JCR-1111 patch applied

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@592947 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.NodeState.ChildNodeEntry;
-     * value = version
+     * value = version name
+    
+    /**
+     * the hashmap of all versions names
+     * key = version name
+     * value = version id (NodeId)
+     */  
+    private HashMap nameCache = new HashMap();
-     * key = versionId (NodeId)
+     * key = version id (NodeId)
-
+    
-
+    
+        nameCache.clear();
-
+        
-
-        // get entries
-        NodeStateEx[] children = node.getChildNodes();
-        for (int i = 0; i < children.length; i++) {
-            NodeStateEx child = children[i];
-            if (child.getName().equals(NameConstants.JCR_VERSIONLABELS)) {
-                labelNode = child;
-                continue;
-            }
-            InternalVersionImpl v = createVersionInstance(child);
-            versionCache.put(v.getId(), v);
-            if (v.isRootVersion()) {
-                rootVersion = v;
-            }
-            vMgr.versionCreated(v);
-        }
-
-        // check for legacy version nodes that had 'virtual' jcr:successor property
-        if (rootVersion.getSuccessors().length==0 && versionCache.size()>1) {
-            // resolve successors and predecessors
-            Iterator iter = versionCache.values().iterator();
-            while (iter.hasNext()) {
-                InternalVersionImpl v = (InternalVersionImpl) iter.next();
-                v.legacyResolveSuccessors();
-            }
-        }
-
-        try {
-            // init label cache
+        
+        // get label node
+        labelNode = node.getNode(NameConstants.JCR_VERSIONLABELS, 1);
+        
+        // init label cache
+        try {  
-                    Name name = pState.getName();
+                    Name labelName = pState.getName();
-                    InternalVersionImpl v = (InternalVersionImpl) getVersion(new NodeId(ref));
-                    if (v != null) {
-                        labelCache.put(name, v);
-                        v.internalAddLabel(name);
+                    NodeId id = new NodeId(ref);
+                    if (node.getState().hasChildNodeEntry(id)) {
+                        labelCache.put(labelName, node.getState().getChildNodeEntry(id).getName());
+        
+        // get root version
+        rootVersion = createVersionInstance(NameConstants.JCR_ROOTVERSION);
+        
+        // get version entries
+        ChildNodeEntry[] children = (ChildNodeEntry[])node.getState().getChildNodeEntries().toArray();
+        for (int i = 0; i < children.length; i++) {
+            ChildNodeEntry child = children[i];
+            if (child.getName().equals(NameConstants.JCR_VERSIONLABELS)) {
+                continue;
+            }
+            nameCache.put(child.getName(), child.getId());
+        }
+        
+        // fix legacy
+        if (rootVersion.getSuccessors().length==0) {		
+            Iterator iter = nameCache.keySet().iterator();
+            while (iter.hasNext()) {
+                Name versionName = (Name)iter.next();
+                InternalVersionImpl v = (InternalVersionImpl)createVersionInstance(versionName);
+                v.legacyResolveSuccessors();
+            }
+        }
-
+    
+    /**
+     * Create a version instance.
+     */
+    InternalVersionImpl createVersionInstance(Name name) {
+        try {
+            NodeStateEx nodeStateEx = node.getNode(name, 1);      
+            InternalVersionImpl v = createVersionInstance(nodeStateEx);	
+            versionCache.put(v.getId(), v);
+            vMgr.versionCreated(v);
+            
+            // add labels
+            Iterator iter = labelCache.keySet().iterator();
+            while (iter.hasNext()) {
+                Name labelName = (Name)iter.next();
+                Name versionName = (Name)labelCache.get(labelName);
+                if (v.getName().equals(versionName)) {
+                    v.internalAddLabel(labelName);
+                }
+            }
+            return v;
+        } catch (RepositoryException e) {
+            throw new IllegalArgumentException("Failed to create version " + name + ".");
+        }  
+    }
+    
-    public InternalVersion getVersion(Name versionName) throws VersionException {
-        // maybe add cache by name?
-        Iterator iter = versionCache.values().iterator();
-        while (iter.hasNext()) {
-            InternalVersion v = (InternalVersion) iter.next();
-            if (v.getName().equals(versionName)) {
-                return v;
-            }
-        }
-        throw new VersionException("Version " + versionName + " does not exist.");
+    public InternalVersion getVersion(Name versionName) throws VersionException {   	
+        NodeId versionId = (NodeId)nameCache.get(versionName);   	
+        if (versionId == null) {
+            throw new VersionException("Version " + versionName + " does not exist.");
+        }                      
+        
+        InternalVersion v = (InternalVersion)versionCache.get(versionId);
+        if (v == null) {
+            v = createVersionInstance(versionName);
+        }  
+        return v;
-        // maybe add cache?
-        Iterator iter = versionCache.values().iterator();
-        while (iter.hasNext()) {
-            InternalVersion v = (InternalVersion) iter.next();
-            if (v.getName().equals(versionName)) {
-                return true;
-            }
-        }
-        return false;
+        return nameCache.containsKey(versionName);
-        return versionCache.containsKey(id);
+        return nameCache.containsValue(id);
-        return (InternalVersion) versionCache.get(id);
+        InternalVersion v = (InternalVersion)versionCache.get(id);
+        if (v == null) {
+            Iterator iter = nameCache.keySet().iterator();
+            while (iter.hasNext()) {
+                Name versionName = (Name)iter.next();
+                if (nameCache.get(versionName).equals(id)) {
+                    v = createVersionInstance(versionName);
+                    break;
+                }
+            }
+        }
+        return v;
-        return (InternalVersion) labelCache.get(label);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Iterator getVersions() {
-        return versionCache.values().iterator();
+        Name versionName = (Name)labelCache.get(label);
+        if (versionName == null) {
+            return null;
+        }
+    	
+        NodeId id = (NodeId)nameCache.get(versionName);
+        InternalVersion v = (InternalVersion)versionCache.get(id);
+        if (v == null) {
+            v = createVersionInstance(versionName);
+        }
+        return v;
-        return versionCache.size();
+        return nameCache.size();
+        nameCache.remove(versionName);
-
-        InternalVersionImpl prev = (InternalVersionImpl) labelCache.get(label);
-        if (prev == null) {
+        Name prevName = (Name) labelCache.get(label);
+        InternalVersionImpl prev = null;
+        if (prevName == null) {
+            prev = (InternalVersionImpl)getVersion(prevName);
-            labelCache.put(label, version);
+            labelCache.put(label, version.getName());
-            if (!versionCache.containsKey(new NodeId(predId))) {
+            if (!nameCache.containsValue(new NodeId(predId))) {
+        nameCache.put(version.getName(), version.getId());

INS26 INS40 INS23 INS31 INS29 INS83 INS43 INS59 MOV54 INS29 MOV43 UPD42 MOV42 INS44 INS8 MOV29 MOV43 UPD42 MOV44 MOV43 MOV29 MOV44 MOV29 INS39 UPD42 UPD42 MOV44 INS8 MOV29 MOV43 INS42 MOV44 INS8 MOV29 INS65 INS42 INS42 INS14 INS21 INS21 INS21 INS65 INS43 INS42 INS54 INS60 INS25 MOV25 INS60 INS25 MOV41 MOV60 INS25 INS60 INS60 INS25 INS41 INS21 INS60 INS60 INS21 UPD66 INS66 INS66 INS66 INS43 UPD66 INS32 INS7 INS7 UPD5 MOV27 INS66 INS42 INS8 INS12 INS43 INS59 INS27 INS8 MOV43 INS27 INS8 INS42 INS32 MOV43 INS59 INS27 INS8 INS43 INS27 INS8 INS43 INS59 MOV43 INS59 INS27 INS8 INS42 INS32 INS43 INS59 MOV43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 UPD43 INS11 INS21 INS60 INS60 MOV21 MOV21 MOV60 MOV61 INS41 INS44 INS8 INS42 INS42 INS11 INS42 INS33 MOV53 UPD42 INS11 INS42 INS33 INS21 UPD42 UPD42 INS42 INS42 INS42 INS42 MOV11 INS42 INS33 INS60 INS61 INS42 UPD42 INS42 INS33 INS41 UPD42 MOV42 INS42 INS11 INS42 INS11 INS42 INS33 INS21 UPD42 INS42 INS42 INS42 INS42 INS42 MOV11 INS42 INS33 UPD42 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS40 INS34 INS42 INS40 UPD42 INS5 INS32 INS43 INS32 MOV43 INS59 MOV43 INS59 INS42 INS43 INS42 INS53 INS43 INS32 MOV43 INS32 INS7 MOV43 INS59 MOV32 INS8 INS43 INS33 INS43 INS32 INS43 INS32 INS7 INS43 INS7 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS60 INS42 INS32 INS42 INS32 INS60 INS42 INS14 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 MOV60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS11 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 MOV43 INS59 INS42 INS42 INS42 INS34 INS42 INS42 UPD43 INS43 INS59 INS43 INS27 UPD42 MOV42 MOV42 INS32 INS42 INS43 INS32 INS8 INS42 INS42 MOV43 INS32 MOV42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 UPD42 INS42 INS11 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS11 INS21 INS42 INS45 INS42 INS45 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS21 INS10 INS42 INS42 UPD43 INS32 INS43 INS43 INS32 INS43 INS43 INS32 INS32 INS43 INS42 INS42 INS42 INS7 UPD42 UPD42 UPD42 MOV14 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL32 DEL11 DEL42 DEL33 DEL27 DEL32 DEL21 DEL32 DEL21 DEL32 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL83 DEL8 DEL31 DEL65 DEL65 DEL29 DEL39 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL9 DEL41 DEL8 DEL8 DEL61 DEL9 DEL41 DEL8 DEL43 DEL42 DEL32 DEL32 DEL41 DEL8