JCR-1547: JCR2SPI: remove dependency to state-package within entprovider interface

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@650417 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.QNodeTypeDefinition;
-import org.apache.jackrabbit.spi.commons.nodetype.NodeTypeConflictException;
-import java.util.HashMap;
+import java.util.HashMap;
-    private final TreeSet mergedNodeTypes;
+    private final TreeSet mergedNodeTypes = new TreeSet();
-    private final TreeSet inheritedNodeTypes;
+    private final TreeSet inheritedNodeTypes = new TreeSet();
-    private final TreeSet allNodeTypes;
+    private final TreeSet allNodeTypes = new TreeSet();
-    private final HashMap namedItemDefs;
+    private final Map namedItemDefs = new HashMap();
-    private final ArrayList unnamedItemDefs;
+    private final List unnamedItemDefs = new ArrayList();
-     * private constructor.
+     * constructor.
-    private EffectiveNodeTypeImpl() {
-        mergedNodeTypes = new TreeSet();
-        inheritedNodeTypes = new TreeSet();
-        allNodeTypes = new TreeSet();
-        namedItemDefs = new HashMap();
-        unnamedItemDefs = new ArrayList();
-        supportedMixins = null;
-    }
-
-    /**
-     * Factory method: creates an effective node type
-     * representation of a node type definition. Whereas all referenced
-     * node types must exist (i.e. must be registered), the definition itself
-     * is not required to be registered.
-     *
-     * @param entProvider
-     * @param ntd
-     * @param ntdMap
-     * @return
-     * @throws NodeTypeConflictException
-     * @throws NoSuchNodeTypeException
-     */
-    static EffectiveNodeTypeImpl create(EffectiveNodeTypeProvider entProvider, QNodeTypeDefinition ntd, Map ntdMap)
-            throws NodeTypeConflictException, NoSuchNodeTypeException {
-        // create empty effective node type instance
-        EffectiveNodeTypeImpl ent = new EffectiveNodeTypeImpl();
-        Name ntName = ntd.getName();
-
-        // prepare new instance
-        ent.mergedNodeTypes.add(ntName);
-        ent.allNodeTypes.add(ntName);
-
-        Name[] smixins = ntd.getSupportedMixinTypes();
-    
-        if (smixins != null) {
-            ent.supportedMixins = new HashSet();
-            for (int i = 0; i < smixins.length; i++) {
-                ent.supportedMixins.add(smixins[i]);
-            }
+    EffectiveNodeTypeImpl(TreeSet mergedNodeTypes, TreeSet inheritedNodeTypes,
+                          TreeSet allNodeTypes, Map namedItemDefs,
+                          List unnamedItemDefs, Set supportedMixins) {
+        this.mergedNodeTypes.addAll(mergedNodeTypes);
+        this.inheritedNodeTypes.addAll(inheritedNodeTypes);
+        this.allNodeTypes.addAll(allNodeTypes);
+        Iterator iter = namedItemDefs.keySet().iterator();
+        while (iter.hasNext()) {
+            Object key = iter.next();
+            List list = (List) namedItemDefs.get(key);
+            this.namedItemDefs.put(key, new ArrayList(list));
-        
-        // map of all item definitions (maps id to definition)
-        // used to effectively detect ambiguous child definitions where
-        // ambiguity is defined in terms of definition identity
-        Set itemDefIds = new HashSet();
+        this.unnamedItemDefs.addAll(unnamedItemDefs);
-        QNodeDefinition[] cnda = ntd.getChildNodeDefs();
-        for (int i = 0; i < cnda.length; i++) {
-            // check if child node definition would be ambiguous within
-            // this node type definition
-            if (itemDefIds.contains(cnda[i])) {
-                // conflict
-                String msg;
-                if (cnda[i].definesResidual()) {
-                    msg = ntName + " contains ambiguous residual child node definitions";
-                } else {
-                    msg = ntName + " contains ambiguous definitions for child node named "
-                            + cnda[i].getName();
-                }
-                log.debug(msg);
-                throw new NodeTypeConflictException(msg);
-            } else {
-                itemDefIds.add(cnda[i]);
-            }
-            if (cnda[i].definesResidual()) {
-                // residual node definition
-                ent.unnamedItemDefs.add(cnda[i]);
-            } else {
-                // named node definition
-                Name name = cnda[i].getName();
-                List defs = (List) ent.namedItemDefs.get(name);
-                if (defs == null) {
-                    defs = new ArrayList();
-                    ent.namedItemDefs.put(name, defs);
-                }
-                if (defs.size() > 0) {
-                    /**
-                     * there already exists at least one definition with that
-                     * name; make sure none of them is auto-create
-                     */
-                    for (int j = 0; j < defs.size(); j++) {
-                        QItemDefinition qDef = (QItemDefinition) defs.get(j);
-                        if (cnda[i].isAutoCreated() || qDef.isAutoCreated()) {
-                            // conflict
-                            String msg = "There are more than one 'auto-create' item definitions for '"
-                                    + name + "' in node type '" + ntName + "'";
-                            log.debug(msg);
-                            throw new NodeTypeConflictException(msg);
-                        }
-                    }
-                }
-                defs.add(cnda[i]);
-            }
+        if (supportedMixins != null) {
+            this.supportedMixins = new HashSet();
+            this.supportedMixins.addAll(supportedMixins);
-        QPropertyDefinition[] pda = ntd.getPropertyDefs();
-        for (int i = 0; i < pda.length; i++) {
-            // check if property definition would be ambiguous within
-            // this node type definition
-            if (itemDefIds.contains(pda[i])) {
-                // conflict
-                String msg;
-                if (pda[i].definesResidual()) {
-                    msg = ntName + " contains ambiguous residual property definitions";
-                } else {
-                    msg = ntName + " contains ambiguous definitions for property named "
-                            + pda[i].getName();
-                }
-                log.debug(msg);
-                throw new NodeTypeConflictException(msg);
-            } else {
-                itemDefIds.add(pda[i]);
-            }
-            if (pda[i].definesResidual()) {
-                // residual property definition
-                ent.unnamedItemDefs.add(pda[i]);
-            } else {
-                // named property definition
-                Name name = pda[i].getName();
-                List defs = (List) ent.namedItemDefs.get(name);
-                if (defs == null) {
-                    defs = new ArrayList();
-                    ent.namedItemDefs.put(name, defs);
-                }
-                if (defs.size() > 0) {
-                    /**
-                     * there already exists at least one definition with that
-                     * name; make sure none of them is auto-create
-                     */
-                    for (int j = 0; j < defs.size(); j++) {
-                        QItemDefinition qDef = (QItemDefinition) defs.get(j);
-                        if (pda[i].isAutoCreated() || qDef.isAutoCreated()) {
-                            // conflict
-                            String msg = "There are more than one 'auto-create' item definitions for '"
-                                    + name + "' in node type '" + ntName + "'";
-                            log.debug(msg);
-                            throw new NodeTypeConflictException(msg);
-                        }
-                    }
-                }
-                defs.add(pda[i]);
-            }
-        }
-
-        // resolve supertypes recursively
-        Name[] supertypes = ntd.getSupertypes();
-        if (supertypes.length > 0) {
-            EffectiveNodeTypeImpl effSuperType = (EffectiveNodeTypeImpl)entProvider.getEffectiveNodeType(supertypes, ntdMap);
-            ent.internalMerge(effSuperType, true);
-        }
-
-        // we're done
-        return ent;
-     * @throws NodeTypeConflictException
+     * @throws ConstraintViolationException
-            throws NodeTypeConflictException {
+            throws ConstraintViolationException {
-     * @throws NodeTypeConflictException
+     * @throws ConstraintViolationException
-    private synchronized void internalMerge(EffectiveNodeTypeImpl other, boolean supertype)
-            throws NodeTypeConflictException {
+    synchronized void internalMerge(EffectiveNodeTypeImpl other, boolean supertype)
+            throws ConstraintViolationException {
-                            throw new NodeTypeConflictException(msg);
+                            throw new ConstraintViolationException(msg);
-                                    throw new NodeTypeConflictException(msg);
+                                    throw new ConstraintViolationException(msg);
-                                throw new NodeTypeConflictException(msg);
+                                throw new ConstraintViolationException(msg);
-                            throw new NodeTypeConflictException(msg);
+                            throw new ConstraintViolationException(msg);
-                            throw new NodeTypeConflictException(msg);
+                            throw new ConstraintViolationException(msg);
-        EffectiveNodeTypeImpl clone = new EffectiveNodeTypeImpl();
-
-        clone.mergedNodeTypes.addAll(mergedNodeTypes);
-        clone.inheritedNodeTypes.addAll(inheritedNodeTypes);
-        clone.allNodeTypes.addAll(allNodeTypes);
-        Iterator iter = namedItemDefs.keySet().iterator();
-        while (iter.hasNext()) {
-            Object key = iter.next();
-            List list = (List) namedItemDefs.get(key);
-            clone.namedItemDefs.put(key, new ArrayList(list));
-        }
-        clone.unnamedItemDefs.addAll(unnamedItemDefs);
-        
-        if (supportedMixins != null) {
-            clone.supportedMixins = new HashSet();
-            clone.supportedMixins.addAll(supportedMixins);
-        }
-
+        EffectiveNodeTypeImpl clone = new EffectiveNodeTypeImpl(mergedNodeTypes,
+                inheritedNodeTypes, allNodeTypes, namedItemDefs, unnamedItemDefs,
+                supportedMixins);

MOV26 MOV31 MOV31 UPD43 MOV43 INS29 UPD42 INS44 INS44 INS44 MOV44 INS44 INS44 UPD43 UPD43 UPD83 MOV43 UPD42 MOV14 MOV14 MOV14 UPD42 MOV14 MOV14 INS65 INS43 INS42 INS43 INS42 INS43 INS42 UPD42 MOV43 INS42 MOV43 INS42 UPD42 UPD42 INS60 MOV41 INS66 INS42 INS42 INS42 UPD42 UPD42 MOV43 INS59 INS22 INS22 INS22 INS22 MOV21 INS42 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL42 DEL14 DEL59 DEL60 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL43 DEL14 DEL7 DEL21 DEL40 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL40 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL45 DEL27 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL2 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL32 DEL40 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL40 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL45 DEL27 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL2 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL32 DEL40 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL40 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL66 DEL65 DEL29 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21