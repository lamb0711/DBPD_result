JCR-1664: JNDI Referencable Issues

Avoid issues with the ordering of the JNDI configuration options by
including the entire Reference instance within BindableRepository.

Also, streamlined the JNDI classes a bit by using the AbstractRepository base class and the JackrabbitRepository interface, and by inlining many of the static methods that weren't being used outside the jndi package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@681031 13f79535-47bb-0310-9956-ffa450edef68

-    private static Map cache = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
+    private static Map cache = new ReferenceMap();
-     * empty default constructor
-     */
-    public BindableRepositoryFactory() {
-    }
-
-    /**
-     * Creates an initialized BindableRepository instance using the given
-     * configuration information and puts it in {@link #cache}.
-     *
-     * @param configFilePath repository configuration file path
-     * @param repHomeDir     repository home directory path
-     * @return initialized repository instance
-     * @throws RepositoryException if the repository cannot be created
-     */
-    static BindableRepository createInstance(String configFilePath, String repHomeDir)
-            throws RepositoryException {
-        BindableRepository rep = BindableRepository.create(configFilePath, repHomeDir);
-        cache.put(rep.getReference(), rep);
-        return rep;
-    }
-
-    //--------------------------------------------------------< ObjectFactory >
-    /**
-    public Object getObjectInstance(Object obj, Name name, Context nameCtx,
-                                    Hashtable environment)
-            throws Exception {
-        if (obj instanceof Reference) {
-            Reference ref = (Reference) obj;
-            synchronized (cache) {
-                if (cache.containsKey(ref)) {
-                    return cache.get(ref);
-                } else {
-                    String configFilePath =
-                            (String) ref.get(BindableRepository.CONFIGFILEPATH_ADDRTYPE).getContent();
-                    String repHomeDir =
-                            (String) ref.get(BindableRepository.REPHOMEDIR_ADDRTYPE).getContent();
-                    return createInstance(configFilePath, repHomeDir);
-                }
+    public synchronized Object getObjectInstance(
+            Object obj, Name name, Context nameCtx, Hashtable environment)
+            throws RepositoryException {
+        synchronized (cache) {
+            Object instance = cache.get(obj);
+            if (instance == null && obj instanceof Reference) {
+                instance = new BindableRepository((Reference) obj);
+                cache.put(obj, instance);
+            return instance;
-        return null;
+

INS31 MOV29 MOV83 UPD83 MOV83 MOV43 MOV42 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 MOV51 INS8 MOV60 INS25 MOV41 UPD43 INS27 INS8 INS42 UPD42 UPD42 INS32 INS27 MOV62 INS21 INS21 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS33 INS7 INS32 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 MOV11 DEL40 DEL40 DEL42 DEL43 DEL40 DEL32 DEL32 DEL11 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL32 DEL32 DEL11 DEL59 DEL60 DEL8 DEL25 DEL8 DEL66 DEL65 DEL29 DEL42 DEL8 DEL31 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL8 DEL25 DEL33 DEL41 DEL8 DEL31