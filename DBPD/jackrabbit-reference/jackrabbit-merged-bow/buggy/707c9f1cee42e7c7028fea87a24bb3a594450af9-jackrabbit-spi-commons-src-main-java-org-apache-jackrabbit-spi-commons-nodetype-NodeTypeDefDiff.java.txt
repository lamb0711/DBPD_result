JCR-2490: jackrabbit wrongly think nodetype is changed on nodetype re-registration

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@988151 13f79535-47bb-0310-9956-ffa450edef68

- * of existing content and does not affect existing/assigned definition id's.
- * The following modifications are considered <code>TRIVIAL</code>:
+ * of existing content. The following modifications are considered
+ * <code>TRIVIAL</code>:
+ * <li>changing specific property/child node <code>name</code> to <code>*</code>
- * <li>weaken property <code>valueConstraints</code> (e.g. by removing completely
- * or by adding to existing or by making a single constraint less restrictive)
- * <li>changing property <code>defaultValues</code>
- * </ul>
- * <p/>
- * A <b><code>MINOR</code></b> modification has no impact on the consistency
- * of existing content but <i>does</i> affect existing/assigned definition id's.
- * The following modifications are considered <code>MINOR</code>:
- * <ul>
- * <li>changing specific property/child node <code>name</code> to <code>*</code>
+ * <li>weaken property <code>valueConstraints</code> (e.g. by removing a constraint
+ * or by making a specific constraint less restrictive)
+ * <li>changing property <code>defaultValues</code>
- * A <b><code>MAJOR</code></b> modification <i>affects</i> the consistency of
- * existing content and <i>does</i> change existing/assigned definition id's.
- * All modifications that are neither <b><code>TRIVIAL</code></b> nor
- * <b><code>MINOR</code></b> are considered <b><code>MAJOR</code></b>.
+ * A <b><code>MAJOR</code></b> modification potentially <i>affects</i> the
+ * consistency of existing content.
+ *
+ * All modifications that are not <b><code>TRIVIAL</code></b> are considered
+ * <b><code>MAJOR</code></b>.
-     * trivial modification: does neither affect consistency of existing content
-     * nor does it change existing/assigned definition id's
+     * trivial modification: does not affect consistency of existing content
-     * minor modification: does not affect consistency of existing content but
-     * <i>does</i> change existing/assigned definition id's
-     */
-    public static final int MINOR = 2;
-    /**
-     * and <i>does</i> change existing/assigned definition id's
-    public static final int MAJOR = 3;
+    public static final int MAJOR = 2;
-     * @return <code>true</code> if minor
-     */
-    public boolean isMinor() {
-        return type == MINOR;
-    }
-
-    /**
-     * <li><b><code>TRIVIAL</code></b>: does neither affect consistency of
-     * existing content nor does it change existing/assigned definition id's
-     * <li><b><code>MINOR</code></b>: does not affect consistency of existing
-     * content but <i>does</i> change existing/assigned definition id's
+     * <li><b><code>TRIVIAL</code></b>: does not affect consistency of
+     * existing content
-     * content and <i>does</i> change existing/assigned definition id's
+     * content
-        return !Arrays.equals(oldDef.getSupertypes(), newDef.getSupertypes()) ? MAJOR : NONE;
+        Set<Name> set1 = new HashSet<Name>(Arrays.asList(oldDef.getSupertypes()));
+        Set<Name> set2 = new HashSet<Name>(Arrays.asList(newDef.getSupertypes()));
+        return !set1.equals(set2) ? MAJOR : NONE;
-        /**
-         * propDefId determinants: declaringNodeType, name, requiredType, multiple
-         * todo: try also to match entries with modified id's
-         */
-
-        /**
-         * nodeDefId determinants: declaringNodeType, name, requiredPrimaryTypes
-         * todo: try also to match entries with modified id's
-         */
-
-            case MINOR:
-                typeString = "MINOR";
-                break;
-                            // just making a child item residual is a MINOR change
-                            type = MINOR;
+                            // just making a child item residual is a TRIVIAL change
+                            type = TRIVIAL;
-             * detected a non-MAJOR modification (i.e. TRIVIAL or MINOR);
+             * detected a non-MAJOR (i.e. TRIVIAL) modification;
-            if (isModified() && type != NONE && type != MAJOR) {
-                /**
-                 * check if valueConstraints were made more restrictive
-                 * (constraints are ORed)
-                 */
+            if (isModified() && type == TRIVIAL) {
+                // check if valueConstraints were made more restrictive
-                if (set1.isEmpty() && !set2.isEmpty()) {
-                    // added constraint where there was no constraint (MAJOR change)
-                    type = MAJOR;
-                } else if (!set2.containsAll(set1) && !set2.isEmpty()) {
-                    // removed existing constraint (MAJOR change)
-                    type = MAJOR;
+                if (!set1.equals(set2)) {
+                    // valueConstraints have been modified
+                    if (set2.containsAll(set1)) {
+                        // new set is a superset of old set
+                        // => constraints have been removed
+                        // (TRIVIAL change, since constraints are OR'ed)
+                        type = TRIVIAL;
+                    } else {
+                        // constraint have been removed/modified (MAJOR change);
+                        // since we're unable to semantically compare
+                        // value constraints (e.g. regular expressions), all
+                        // modifications are considered a MAJOR change.
+                        type = MAJOR;
+                    }
-                            // changed getRequiredType to UNDEFINED (MINOR change)
-                            type = MINOR;
+                            // changed getRequiredType to UNDEFINED (TRIVIAL change)
+                            type = TRIVIAL;
-                            // changed multiple flag to true (MINOR change)
-                            type = MINOR;
+                            // changed multiple flag to true (TRIVIAL change)
+                            type = TRIVIAL;
-             * detected a non-MAJOR modification (i.e. TRIVIAL or MINOR);
+             * detected a non-MAJOR (i.e. TRIVIAL) modification;
-            if (isModified() && type != NONE && type != MAJOR) {
+            if (isModified() && type == TRIVIAL) {
+                        // requiredPrimaryTypes have been modified
-                            // removed requiredPrimaryType (MINOR change)
-                            type = MINOR;
+                            // old list is a superset of new list
+                            // => removed requiredPrimaryType (TRIVIAL change)
+                            type = TRIVIAL;
-                            // added requiredPrimaryType (MAJOR change)
+                            // added/modified requiredPrimaryType (MAJOR change)
+                            // todo check whether aggregate of old requiredTypes would include aggregate of new requiredTypes => trivial change

UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 INS60 INS60 MOV10 UPD66 UPD66 UPD66 UPD66 UPD66 INS74 INS59 INS74 INS59 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS27 INS27 INS42 INS42 INS74 MOV32 INS42 INS42 INS74 INS32 INS32 MOV32 UPD27 MOV27 MOV32 UPD27 MOV27 INS43 INS43 UPD42 INS43 INS43 INS42 INS42 MOV32 INS42 INS42 INS42 UPD42 INS38 UPD42 INS42 INS42 INS42 INS42 MOV32 MOV25 UPD42 UPD42 INS42 MOV32 INS8 INS21 INS7 INS42 INS42 UPD42 UPD42 UPD42 UPD42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL27 DEL41 DEL8 DEL31 DEL66 DEL66 DEL42 DEL49 DEL42 DEL45 DEL7 DEL21 DEL10 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL38 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL7 DEL21 DEL27 DEL42 DEL42 DEL27 DEL27