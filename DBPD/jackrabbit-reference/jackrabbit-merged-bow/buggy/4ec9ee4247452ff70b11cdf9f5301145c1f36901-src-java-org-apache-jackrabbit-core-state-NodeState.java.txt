- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.37 $, $Date: 2004/08/02 16:19:48 $
-	super(overlayedState, initialStatus);
-	nodeTypeName = overlayedState.getNodeTypeName();
-	mixinTypeNames.addAll(overlayedState.getMixinTypeNames());
-	defId = overlayedState.getDefinitionId();
-	uuid = overlayedState.getUUID();
-	parentUUIDs.addAll(overlayedState.getParentUUIDs());
-	propertyEntries.addAll(overlayedState.getPropertyEntries());
-	childNodeEntries.addAll(overlayedState.getChildNodeEntries());
+        super(overlayedState, initialStatus);
+        nodeTypeName = overlayedState.getNodeTypeName();
+        mixinTypeNames.addAll(overlayedState.getMixinTypeNames());
+        defId = overlayedState.getDefinitionId();
+        uuid = overlayedState.getUUID();
+        parentUUIDs.addAll(overlayedState.getParentUUIDs());
+        propertyEntries.addAll(overlayedState.getPropertyEntries());
+        childNodeEntries.addAll(overlayedState.getChildNodeEntries());
-	super(parentUUID, new NodeId(uuid), initialStatus);
-	if (parentUUID != null) {
-	    parentUUIDs.add(parentUUID);
-	}
-	this.nodeTypeName = nodeTypeName;
-	this.uuid = uuid;
+        super(parentUUID, new NodeId(uuid), initialStatus);
+        if (parentUUID != null) {
+            parentUUIDs.add(parentUUID);
+        }
+        this.nodeTypeName = nodeTypeName;
+        this.uuid = uuid;
-	return true;
+        return true;
-	return nodeTypeName;
+        return nodeTypeName;
-	return Collections.unmodifiableSet(mixinTypeNames);
+        return Collections.unmodifiableSet(mixinTypeNames);
-	mixinTypeNames.clear();
-	mixinTypeNames.addAll(names);
+        mixinTypeNames.clear();
+        mixinTypeNames.addAll(names);
-	return defId;
+        return defId;
-	this.defId = defId;
+        this.defId = defId;
-	return uuid;
+        return uuid;
-	return Collections.unmodifiableList(parentUUIDs);
+        return Collections.unmodifiableList(parentUUIDs);
-	parentUUIDs.add(uuid);
+        parentUUIDs.add(uuid);
-	if (parentUUID.equals(uuid)) {
-	    parentUUID = null;
-	}
-	boolean removed = parentUUIDs.remove(uuid);
-	if (parentUUID == null) {
-	    // change primary parent
-	    if (!parentUUIDs.isEmpty()) {
-		parentUUID = (String) parentUUIDs.iterator().next();
-	    }
-	}
-	return removed;
+        if (parentUUID.equals(uuid)) {
+            parentUUID = null;
+        }
+        boolean removed = parentUUIDs.remove(uuid);
+        if (parentUUID == null) {
+            // change primary parent
+            if (!parentUUIDs.isEmpty()) {
+                parentUUID = (String) parentUUIDs.iterator().next();
+            }
+        }
+        return removed;
-	parentUUIDs.clear();
-	parentUUID = null;
+        parentUUIDs.clear();
+        parentUUID = null;
-	parentUUIDs.clear();
-	parentUUIDs.addAll(uuids);
+        parentUUIDs.clear();
+        parentUUIDs.addAll(uuids);
-	Iterator iter = childNodeEntries.iterator();
-	while (iter.hasNext()) {
-	    ChildNodeEntry entry = (ChildNodeEntry) iter.next();
-	    if (name.equals(entry.getName())) {
-		return true;
-	    }
-	}
-	return false;
+        Iterator iter = childNodeEntries.iterator();
+        while (iter.hasNext()) {
+            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+            if (name.equals(entry.getName())) {
+                return true;
+            }
+        }
+        return false;
-	if (index < 1) {
-	    throw new IllegalArgumentException("index is 1-based");
-	}
-	Iterator iter = childNodeEntries.iterator();
-	int count = 0;
-	while (iter.hasNext()) {
-	    ChildNodeEntry entry = (ChildNodeEntry) iter.next();
-	    if (name.equals(entry.getName())) {
-		if (++count == index) {
-		    return true;
-		}
-	    }
-	}
-	return false;
+        if (index < 1) {
+            throw new IllegalArgumentException("index is 1-based");
+        }
+        Iterator iter = childNodeEntries.iterator();
+        int count = 0;
+        while (iter.hasNext()) {
+            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+            if (name.equals(entry.getName())) {
+                if (++count == index) {
+                    return true;
+                }
+            }
+        }
+        return false;
-	PropertyEntry entry = new PropertyEntry(propName);
-	return propertyEntries.contains(entry);
+        PropertyEntry entry = new PropertyEntry(propName);
+        return propertyEntries.contains(entry);
-	Iterator iter = propertyEntries.iterator();
-	while (iter.hasNext()) {
-	    PropertyEntry entry = (PropertyEntry) iter.next();
-	    if (propName.equals(entry.getName())) {
-		return entry;
-	    }
-	}
-	return null;
+        Iterator iter = propertyEntries.iterator();
+        while (iter.hasNext()) {
+            PropertyEntry entry = (PropertyEntry) iter.next();
+            if (propName.equals(entry.getName())) {
+                return entry;
+            }
+        }
+        return null;
-	if (index < 1) {
-	    throw new IllegalArgumentException("index is 1-based");
-	}
-	Iterator iter = childNodeEntries.iterator();
-	int count = 0;
-	while (iter.hasNext()) {
-	    ChildNodeEntry entry = (ChildNodeEntry) iter.next();
-	    if (nodeName.equals(entry.getName())) {
-		if (++count == index) {
-		    return entry;
-		}
-	    }
-	}
-	return null;
+        if (index < 1) {
+            throw new IllegalArgumentException("index is 1-based");
+        }
+        Iterator iter = childNodeEntries.iterator();
+        int count = 0;
+        while (iter.hasNext()) {
+            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+            if (nodeName.equals(entry.getName())) {
+                if (++count == index) {
+                    return entry;
+                }
+            }
+        }
+        return null;
-	return childNodeEntries.entries();
+        return childNodeEntries.entries();
-	ArrayList list = new ArrayList();
-	Iterator iter = childNodeEntries.iterator();
-	while (iter.hasNext()) {
-	    ChildNodeEntry entry = (ChildNodeEntry) iter.next();
-	    if (entry.getUUID().equals(uuid)) {
-		list.add(entry);
-	    }
-	}
-	return Collections.unmodifiableList(list);
+        ArrayList list = new ArrayList();
+        Iterator iter = childNodeEntries.iterator();
+        while (iter.hasNext()) {
+            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+            if (entry.getUUID().equals(uuid)) {
+                list.add(entry);
+            }
+        }
+        return Collections.unmodifiableList(list);
-	ArrayList list = new ArrayList();
-	Iterator iter = childNodeEntries.iterator();
-	while (iter.hasNext()) {
-	    ChildNodeEntry entry = (ChildNodeEntry) iter.next();
-	    if (entry.getName().equals(nodeName)) {
-		list.add(entry);
-	    }
-	}
-	return Collections.unmodifiableList(list);
+        ArrayList list = new ArrayList();
+        Iterator iter = childNodeEntries.iterator();
+        while (iter.hasNext()) {
+            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+            if (entry.getName().equals(nodeName)) {
+                list.add(entry);
+            }
+        }
+        return Collections.unmodifiableList(list);
-	return childNodeEntries.add(nodeName, uuid);
+        return childNodeEntries.add(nodeName, uuid);
-	return childNodeEntries.remove(nodeName, index);
+        return childNodeEntries.remove(nodeName, index);
-	childNodeEntries.removeAll();
+        childNodeEntries.removeAll();
-	childNodeEntries.removeAll();
-	childNodeEntries.addAll(nodeEntries);
+        childNodeEntries.removeAll();
+        childNodeEntries.addAll(nodeEntries);
-	return Collections.unmodifiableList(propertyEntries);
+        return Collections.unmodifiableList(propertyEntries);
-	PropertyEntry entry = new PropertyEntry(propName);
-	propertyEntries.add(entry);
+        PropertyEntry entry = new PropertyEntry(propName);
+        propertyEntries.add(entry);
-	PropertyEntry entry = new PropertyEntry(propName);
-	int pos = propertyEntries.indexOf(entry);
-	if (pos == -1) {
-	    return false;
-	} else {
-	    propertyEntries.remove(pos);
-	    return true;
-	}
+        PropertyEntry entry = new PropertyEntry(propName);
+        int pos = propertyEntries.indexOf(entry);
+        if (pos == -1) {
+            return false;
+        } else {
+            propertyEntries.remove(pos);
+            return true;
+        }
-	propertyEntries.clear();
+        propertyEntries.clear();
-	propertyEntries.clear();
-	propertyEntries.addAll(propEntries);
+        propertyEntries.clear();
+        propertyEntries.addAll(propEntries);
-	if (!hasOverlayedState()) {
-	    return Collections.EMPTY_LIST;
-	}
+        if (!hasOverlayedState()) {
+            return Collections.EMPTY_LIST;
+        }
-	ArrayList list = new ArrayList(parentUUIDs);
+        ArrayList list = new ArrayList(parentUUIDs);
-	NodeState other = (NodeState) getOverlayedState();
-	Iterator i = other.parentUUIDs.iterator();
-	while (i.hasNext()) {
-	    list.remove(i.next());
-	}
+        NodeState other = (NodeState) getOverlayedState();
+        Iterator i = other.parentUUIDs.iterator();
+        while (i.hasNext()) {
+            list.remove(i.next());
+        }
-	return list;
+        return list;
-	if (!hasOverlayedState()) {
-	    return Collections.unmodifiableList(propertyEntries);
-	}
+        if (!hasOverlayedState()) {
+            return Collections.unmodifiableList(propertyEntries);
+        }
-	ArrayList list = new ArrayList(propertyEntries);
+        ArrayList list = new ArrayList(propertyEntries);
-	NodeState other = (NodeState) getOverlayedState();
-	Iterator i = other.propertyEntries.iterator();
-	while (i.hasNext()) {
-	    list.remove(i.next());
-	}
+        NodeState other = (NodeState) getOverlayedState();
+        Iterator i = other.propertyEntries.iterator();
+        while (i.hasNext()) {
+            list.remove(i.next());
+        }
-	return list;
+        return list;
-	if (!hasOverlayedState()) {
-	    return Collections.unmodifiableList(childNodeEntries.entries());
-	}
+        if (!hasOverlayedState()) {
+            return Collections.unmodifiableList(childNodeEntries.entries());
+        }
-	ArrayList list = new ArrayList(childNodeEntries.entries());
+        ArrayList list = new ArrayList(childNodeEntries.entries());
-	NodeState other = (NodeState) getOverlayedState();
-	Iterator i = other.childNodeEntries.entries().iterator();
-	while (i.hasNext()) {
-	    list.remove(i.next());
-	}
+        NodeState other = (NodeState) getOverlayedState();
+        Iterator i = other.childNodeEntries.entries().iterator();
+        while (i.hasNext()) {
+            list.remove(i.next());
+        }
-	return list;
+        return list;
-	if (!hasOverlayedState()) {
-	    return Collections.EMPTY_LIST;
-	}
+        if (!hasOverlayedState()) {
+            return Collections.EMPTY_LIST;
+        }
-	NodeState other = (NodeState) getOverlayedState();
-	ArrayList list = new ArrayList(other.parentUUIDs);
+        NodeState other = (NodeState) getOverlayedState();
+        ArrayList list = new ArrayList(other.parentUUIDs);
-	Iterator i = parentUUIDs.iterator();
-	while (i.hasNext()) {
-	    list.remove(i.next());
-	}
+        Iterator i = parentUUIDs.iterator();
+        while (i.hasNext()) {
+            list.remove(i.next());
+        }
-	return list;
+        return list;
-	if (!hasOverlayedState()) {
-	    return Collections.EMPTY_LIST;
-	}
+        if (!hasOverlayedState()) {
+            return Collections.EMPTY_LIST;
+        }
-	NodeState other = (NodeState) getOverlayedState();
-	ArrayList list = new ArrayList(other.propertyEntries);
+        NodeState other = (NodeState) getOverlayedState();
+        ArrayList list = new ArrayList(other.propertyEntries);
-	Iterator i = propertyEntries.iterator();
-	while (i.hasNext()) {
-	    list.remove(i.next());
-	}
+        Iterator i = propertyEntries.iterator();
+        while (i.hasNext()) {
+            list.remove(i.next());
+        }
-	return list;
+        return list;
-	if (!hasOverlayedState()) {
-	    return Collections.EMPTY_LIST;
-	}
+        if (!hasOverlayedState()) {
+            return Collections.EMPTY_LIST;
+        }
-	NodeState other = (NodeState) getOverlayedState();
-	ArrayList list = new ArrayList(other.childNodeEntries.entries());
+        NodeState other = (NodeState) getOverlayedState();
+        ArrayList list = new ArrayList(other.childNodeEntries.entries());
-	Iterator i = childNodeEntries.entries().iterator();
-	while (i.hasNext()) {
-	    list.remove(i.next());
-	}
+        Iterator i = childNodeEntries.entries().iterator();
+        while (i.hasNext()) {
+            list.remove(i.next());
+        }
-	return list;
+        return list;
-	// @todo is this correct?
-	if (!parentUUIDs.contains(parentUUID) && parentUUID != null) {
-	    parentUUIDs.add(parentUUID);
-	}
-	super.setParentUUID(parentUUID);
+        // @todo is this correct?
+        if (!parentUUIDs.contains(parentUUID) && parentUUID != null) {
+            parentUUIDs.add(parentUUID);
+        }
+        super.setParentUUID(parentUUID);
-	// delegate to default implementation
-	out.defaultWriteObject();
+        // delegate to default implementation
+        out.defaultWriteObject();
-	// delegate to default implementation
-	in.defaultReadObject();
+        // delegate to default implementation
+        in.defaultReadObject();
-	// insertion-ordered collection of entries
-	List entries;
-	// mapping from names to list of same-name sibling entries
-	Map names;
+        // insertion-ordered collection of entries
+        List entries;
+        // mapping from names to list of same-name sibling entries
+        Map names;
-	ChildNodeEntries() {
-	    entries = new ArrayList();
-	    names = new HashMap();
-	}
+        ChildNodeEntries() {
+            entries = new ArrayList();
+            names = new HashMap();
+        }
-	ChildNodeEntry add(QName nodeName, String uuid) {
-	    List siblings = (List) names.get(nodeName);
-	    if (siblings == null) {
-		siblings = new ArrayList();
-		names.put(nodeName, siblings);
-	    }
+        ChildNodeEntry add(QName nodeName, String uuid) {
+            List siblings = (List) names.get(nodeName);
+            if (siblings == null) {
+                siblings = new ArrayList();
+                names.put(nodeName, siblings);
+            }
-	    int index = siblings.size() + 1;
+            int index = siblings.size() + 1;
-	    ChildNodeEntry entry = new ChildNodeEntry(nodeName, uuid, index);
-	    siblings.add(entry);
-	    entries.add(entry);
+            ChildNodeEntry entry = new ChildNodeEntry(nodeName, uuid, index);
+            siblings.add(entry);
+            entries.add(entry);
-	    return entry;
-	}
+            return entry;
+        }
-	void addAll(List entriesList) {
-	    Iterator iter = entriesList.iterator();
-	    while (iter.hasNext()) {
-		ChildNodeEntry entry = (ChildNodeEntry) iter.next();
-		// delegate to add(QName, String) to maintain consistency
-		add(entry.getName(), entry.getUUID());
-	    }
-	}
+        void addAll(List entriesList) {
+            Iterator iter = entriesList.iterator();
+            while (iter.hasNext()) {
+                ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+                // delegate to add(QName, String) to maintain consistency
+                add(entry.getName(), entry.getUUID());
+            }
+        }
-	public void removeAll() {
-	    names.clear();
-	    entries.clear();
-	}
+        public void removeAll() {
+            names.clear();
+            entries.clear();
+        }
-	public boolean remove(ChildNodeEntry entry) {
-	    return remove(entry.getName(), entry.getIndex());
-	}
+        public boolean remove(ChildNodeEntry entry) {
+            return remove(entry.getName(), entry.getIndex());
+        }
-	public boolean remove(QName nodeName, int index) {
-	    if (index < 1) {
-		throw new IllegalArgumentException("index is 1-based");
-	    }
-	    List siblings = (List) names.get(nodeName);
-	    if (siblings == null) {
-		return false;
-	    }
-	    if (index > siblings.size()) {
-		return false;
-	    }
-	    // remove from siblings list
-	    ChildNodeEntry removedEntry = (ChildNodeEntry) siblings.remove(index - 1);
-	    // remove from entries list
-	    entries.remove(removedEntry);
+        public boolean remove(QName nodeName, int index) {
+            if (index < 1) {
+                throw new IllegalArgumentException("index is 1-based");
+            }
+            List siblings = (List) names.get(nodeName);
+            if (siblings == null) {
+                return false;
+            }
+            if (index > siblings.size()) {
+                return false;
+            }
+            // remove from siblings list
+            ChildNodeEntry removedEntry = (ChildNodeEntry) siblings.remove(index - 1);
+            // remove from entries list
+            entries.remove(removedEntry);
-	    if (siblings.size() == 0) {
-		// short cut
-		names.remove(nodeName);
-		return true;
-	    }
+            if (siblings.size() == 0) {
+                // short cut
+                names.remove(nodeName);
+                return true;
+            }
-	    // update indices of subsequent same-name siblings
-	    for (int i = index - 1; i < siblings.size(); i++) {
-		ChildNodeEntry oldEntry = (ChildNodeEntry) siblings.get(i);
-		ChildNodeEntry newEntry = new ChildNodeEntry(nodeName, oldEntry.getUUID(), oldEntry.getIndex() - 1);
-		// overwrite old entry with updated entry in siblings list
-		siblings.set(i, newEntry);
-		// overwrite old entry with updated entry in entries list
-		entries.set(entries.indexOf(oldEntry), newEntry);
-	    }
+            // update indices of subsequent same-name siblings
+            for (int i = index - 1; i < siblings.size(); i++) {
+                ChildNodeEntry oldEntry = (ChildNodeEntry) siblings.get(i);
+                ChildNodeEntry newEntry = new ChildNodeEntry(nodeName, oldEntry.getUUID(), oldEntry.getIndex() - 1);
+                // overwrite old entry with updated entry in siblings list
+                siblings.set(i, newEntry);
+                // overwrite old entry with updated entry in entries list
+                entries.set(entries.indexOf(oldEntry), newEntry);
+            }
-	    return true;
-	}
+            return true;
+        }
-	Iterator iterator() {
-	    return entries.iterator();
-	}
+        Iterator iterator() {
+            return entries.iterator();
+        }
-	List entries() {
-	    return Collections.unmodifiableList(entries);
-	}
+        List entries() {
+            return Collections.unmodifiableList(entries);
+        }
-	protected QName name;
+        protected QName name;
-	protected ChildEntry(QName name) {
-	    this.name = name;
-	}
+        protected ChildEntry(QName name) {
+            this.name = name;
+        }
-	public QName getName() {
-	    return name;
-	}
+        public QName getName() {
+            return name;
+        }
-	private int hash = 0;
+        private int hash = 0;
-	private PropertyEntry(QName propName) {
-	    super(propName);
-	}
+        private PropertyEntry(QName propName) {
+            super(propName);
+        }
-	public boolean equals(Object obj) {
-	    if (this == obj) {
-		return true;
-	    }
-	    if (obj instanceof PropertyEntry) {
-		PropertyEntry other = (PropertyEntry) obj;
-		return name.equals(other.name);
-	    }
-	    return false;
-	}
+        public boolean equals(Object obj) {
+            if (this == obj) {
+                return true;
+            }
+            if (obj instanceof PropertyEntry) {
+                PropertyEntry other = (PropertyEntry) obj;
+                return name.equals(other.name);
+            }
+            return false;
+        }
-	public String toString() {
-	    return name.toString();
-	}
+        public String toString() {
+            return name.toString();
+        }
-	public int hashCode() {
-	    // PropertyEntry is immutable, we can store the computed hash code value
-	    if (hash == 0) {
-		hash = 191 * name.hashCode();
-	    }
-	    return hash;
-	}
+        public int hashCode() {
+            // PropertyEntry is immutable, we can store the computed hash code value
+            if (hash == 0) {
+                hash = 191 * name.hashCode();
+            }
+            return hash;
+        }
-	private int hash = 0;
+        private int hash = 0;
-	private int index; // 1-based index for same-name siblings
-	private String uuid;
+        private int index; // 1-based index for same-name siblings
+        private String uuid;
-	private ChildNodeEntry(QName nodeName, String uuid, int index) {
-	    super(nodeName);
+        private ChildNodeEntry(QName nodeName, String uuid, int index) {
+            super(nodeName);
-	    if (uuid == null) {
-		throw new IllegalArgumentException("uuid can not be null");
-	    }
-	    this.uuid = uuid;
+            if (uuid == null) {
+                throw new IllegalArgumentException("uuid can not be null");
+            }
+            this.uuid = uuid;
-	    if (index < 1) {
-		throw new IllegalArgumentException("index is 1-based");
-	    }
-	    this.index = index;
-	}
+            if (index < 1) {
+                throw new IllegalArgumentException("index is 1-based");
+            }
+            this.index = index;
+        }
-	public String getUUID() {
-	    return uuid;
-	}
+        public String getUUID() {
+            return uuid;
+        }
-	public int getIndex() {
-	    return index;
-	}
+        public int getIndex() {
+            return index;
+        }
-	public boolean equals(Object obj) {
-	    if (this == obj) {
-		return true;
-	    }
-	    if (obj instanceof ChildNodeEntry) {
-		ChildNodeEntry other = (ChildNodeEntry) obj;
-		return (name.equals(other.name) && uuid.equals(other.uuid)
-			&& index == other.index);
-	    }
-	    return false;
-	}
+        public boolean equals(Object obj) {
+            if (this == obj) {
+                return true;
+            }
+            if (obj instanceof ChildNodeEntry) {
+                ChildNodeEntry other = (ChildNodeEntry) obj;
+                return (name.equals(other.name) && uuid.equals(other.uuid)
+                        && index == other.index);
+            }
+            return false;
+        }
-	public String toString() {
-	    return name.toString() + "[" + index + "] -> " + uuid;
-	}
+        public String toString() {
+            return name.toString() + "[" + index + "] -> " + uuid;
+        }
-	public int hashCode() {
-	    // ChildNodeEntry is immutable, we can store the computed hash code value
-	    if (hash == 0) {
-		hash = 6547 * name.hashCode() + 7877 * uuid.hashCode() + 2897 * index;
-	    }
-	    return hash;
-	}
+        public int hashCode() {
+            // ChildNodeEntry is immutable, we can store the computed hash code value
+            if (hash == 0) {
+                hash = 6547 * name.hashCode() + 7877 * uuid.hashCode() + 2897 * index;
+            }
+            return hash;
+        }

DEL66 DEL65 DEL66 DEL65