Make versioning transactional
- Added specialized XAVersion and XAVersionHistory objects that refresh their internal state when needed
- Defined new observation interface in order to have VersionManagerImpl use standard event dispatching
  instead of writing its own
- Added test cases verifying isolation of versioning operations in transactions


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368026 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.WorkspaceImpl;
+import org.apache.jackrabbit.core.PropertyId;
+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.observation.EventStateCollectionFactory;
+import org.apache.jackrabbit.core.value.InternalValue;
+import org.apache.jackrabbit.core.virtual.VirtualItemStateProvider;
+import javax.jcr.PropertyType;
+import java.util.Iterator;
+     * Current update operation.
+     */
+    private transient SharedItemStateManager.Update update;
+
+    /**
+     * Optional virtual item state provider.
+     */
+    private VirtualItemStateProvider virtualProvider;
+
+    /**
+     *
-     * @param wspImpl workspace
+     * @param factory        event state collection factory
-                              WorkspaceImpl wspImpl) {
-        this(sharedStateMgr, wspImpl, DEFAULT_ATTRIBUTE_NAME);
+                              EventStateCollectionFactory factory) {
+        this(sharedStateMgr, factory, DEFAULT_ATTRIBUTE_NAME);
+     *
-     * @param wspImpl workspace
-     * @param attributeName attribute name
+     * @param factory        event state collection factory
+     * @param attributeName  attribute name
-                              WorkspaceImpl wspImpl, String attributeName) {
-        super(sharedStateMgr, wspImpl);
+                              EventStateCollectionFactory factory,
+                              String attributeName) {
+        super(sharedStateMgr, factory);
+     * Set optional virtual item state provider.
+     */
+    public void setVirtualProvider(VirtualItemStateProvider virtualProvider) {
+        this.virtualProvider = virtualProvider;
+    }
+
+    /**
+    public void beforeOperation(TransactionContext tx) {
+        ChangeLog txLog = (ChangeLog) tx.getAttribute(attributeName);
+        if (txLog != null) {
+            ((CommitLog) commitLog.get()).setChanges(txLog);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
-                ((CommitLog) commitLog.get()).setChanges(txLog);
-                sharedStateMgr.checkReferentialIntegrity(txLog);
+                if (virtualProvider != null) {
+                    updateVirtualReferences(txLog);
+                }
+                update = sharedStateMgr.beginUpdate(txLog, factory, virtualProvider);
-            } finally {
-                ((CommitLog) commitLog.get()).setChanges(null);
-                ((CommitLog) commitLog.get()).setChanges(txLog);
-                super.update(txLog);
-            } catch (ReferentialIntegrityException rie) {
-                log.error(rie);
-                txLog.undo(sharedStateMgr);
-                throw new TransactionException("Unable to commit transaction.", rie);
+                update.end();
-            } finally {
-                ((CommitLog) commitLog.get()).setChanges(null);
-            try {
-                ((CommitLog) commitLog.get()).setChanges(txLog);
-                txLog.undo(sharedStateMgr);
-            } finally {
-                ((CommitLog) commitLog.get()).setChanges(null);
+            if (update != null) {
+                update.cancel();
+            txLog.undo(sharedStateMgr);
+     * {@inheritDoc}
+     */
+    public void afterOperation(TransactionContext tx) {
+        ((CommitLog) commitLog.get()).setChanges(null);
+    }
+
+    /**
+        if (virtualProvider != null && virtualProvider.hasItemState(id)) {
+            return virtualProvider.getItemState(id);
+        }
+        if (virtualProvider != null && virtualProvider.hasItemState(id)) {
+            return true;
+        }
+        if (virtualProvider != null && virtualProvider.hasNodeReferences(id)) {
+            return virtualProvider.getNodeReferences(id);
+        }
+        if (virtualProvider != null && virtualProvider.hasNodeReferences(id)) {
+            return true;
+        }
+    //-------------------------------------------------------< implementation >
+
+    /**
+     * Determine all node references whose targets only exist in the view of
+     * this transaction and store the modified view back to the virtual provider.
+     * @param changes change log
+     * @throws ItemStateException if an error occurs
+     */
+    private void updateVirtualReferences(ChangeLog changes) throws ItemStateException {
+        for (Iterator iter = changes.addedStates(); iter.hasNext();) {
+            ItemState state = (ItemState) iter.next();
+            if (!state.isNode()) {
+                PropertyState prop = (PropertyState) state;
+                if (prop.getType() == PropertyType.REFERENCE) {
+                    InternalValue[] vals = prop.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        String uuid = vals[i].toString();
+                        NodeReferencesId refsId = new NodeReferencesId(uuid);
+                        addVirtualReference((PropertyId) prop.getId(), refsId);
+                    }
+                }
+            }
+        }
+        for (Iterator iter = changes.modifiedStates(); iter.hasNext();) {
+            ItemState state = (ItemState) iter.next();
+            if (!state.isNode()) {
+                PropertyState newProp = (PropertyState) state;
+                PropertyState oldProp =
+                        (PropertyState) getItemState(state.getId());
+                if (oldProp.getType() == PropertyType.REFERENCE) {
+                    InternalValue[] vals = oldProp.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        String uuid = vals[i].toString();
+                        NodeReferencesId refsId = new NodeReferencesId(uuid);
+                        removeVirtualReference((PropertyId) oldProp.getId(), refsId);
+                    }
+                }
+                if (newProp.getType() == PropertyType.REFERENCE) {
+                    InternalValue[] vals = newProp.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        String uuid = vals[i].toString();
+                        NodeReferencesId refsId = new NodeReferencesId(uuid);
+                        addVirtualReference((PropertyId) newProp.getId(), refsId);
+                    }
+                }
+            }
+        }
+        for (Iterator iter = changes.deletedStates(); iter.hasNext();) {
+            ItemState state = (ItemState) iter.next();
+            if (!state.isNode()) {
+                PropertyState prop = (PropertyState) state;
+                if (prop.getType() == PropertyType.REFERENCE) {
+                    InternalValue[] vals = prop.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        String uuid = vals[i].toString();
+                        NodeReferencesId refsId = new NodeReferencesId(uuid);
+                        removeVirtualReference((PropertyId) prop.getId(), refsId);
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Add a virtual reference from some reference property to a virtual node.
+     * Ignored if <code>targetId</code> does not actually point to a virtual
+     * node.
+     * @param sourceId property id
+     * @param targetId node references id
+     */
+    private void addVirtualReference(PropertyId sourceId,
+                                     NodeReferencesId targetId)
+            throws NoSuchItemStateException, ItemStateException {
+
+        NodeReferences refs = virtualProvider.getNodeReferences(targetId);
+        if (refs == null && virtualProvider.hasItemState(new NodeId(targetId.getUUID()))) {
+            refs = new NodeReferences(targetId);
+        }
+        if (refs != null) {
+            refs.addReference(sourceId);
+            virtualProvider.setNodeReferences(refs);
+        }
+    }
+
+    /**
+     * Remove a virtual reference from some reference property to a virtual node.
+     * Ignored if <code>targetId</code> does not actually point to a virtual
+     * node.
+     * @param sourceId property id
+     * @param targetId node references id
+     */
+    private void removeVirtualReference(PropertyId sourceId,
+                                        NodeReferencesId targetId)
+            throws NoSuchItemStateException, ItemStateException {
+
+        NodeReferences refs = virtualProvider.getNodeReferences(targetId);
+        if (refs == null && virtualProvider.hasItemState(new NodeId(targetId.getUUID()))) {
+            refs = new NodeReferences(targetId);
+        }
+        if (refs != null) {
+            refs.removeReference(sourceId);
+            virtualProvider.setNodeReferences(refs);
+        }
+    }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 MOV8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS40 INS42 INS65 INS42 INS42 UPD43 UPD42 UPD43 UPD42 INS65 INS43 INS42 INS21 INS65 INS43 INS42 INS60 INS25 INS65 INS43 INS42 INS25 INS25 INS25 INS25 INS65 INS65 INS65 INS43 INS42 INS42 INS24 INS24 INS24 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS25 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS25 INS66 INS66 UPD42 UPD66 UPD42 UPD42 UPD42 UPD66 UPD66 UPD42 UPD42 INS66 INS42 INS7 INS65 INS42 INS43 INS59 INS27 MOV8 INS65 INS42 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS58 INS32 INS8 INS58 INS32 INS8 INS58 INS32 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS22 INS42 INS42 INS42 INS11 INS42 INS33 MOV8 INS25 MOV21 INS27 INS32 INS41 INS27 INS32 INS41 INS27 INS32 INS41 INS27 INS32 INS41 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS33 INS21 INS21 INS52 INS42 INS43 INS32 INS8 INS27 INS8 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS9 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS7 INS32 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS7 INS32 INS32 INS42 INS42 INS42 INS42 INS25 MOV21 INS42 INS33 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS60 INS25 INS42 INS42 INS42 INS42 INS11 INS32 INS60 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS11 INS32 INS60 INS25 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS7 INS43 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS33 INS21 INS42 INS32 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS40 INS60 INS24 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS32 INS40 INS60 INS24 INS32 INS40 INS60 INS24 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS40 INS60 INS24 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS42 INS43 INS32 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS27 INS42 INS60 INS60 INS21 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS27 INS42 INS60 INS60 INS21 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS27 INS42 INS60 INS60 INS21 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS27 INS42 INS60 INS60 INS21 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS11 INS42 INS2 INS42 INS43 INS42 INS43 INS32 INS2 INS42 INS43 INS42 INS43 INS32 INS2 INS42 INS43 INS42 INS43 INS32 INS2 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL32 DEL11 DEL36 DEL33 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL48 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL32 DEL11 DEL36 DEL42 DEL33 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL54