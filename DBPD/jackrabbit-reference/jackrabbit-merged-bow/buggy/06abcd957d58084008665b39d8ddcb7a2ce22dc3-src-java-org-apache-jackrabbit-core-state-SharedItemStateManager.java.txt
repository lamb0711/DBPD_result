JCR-255 Workspace operations (copy/clone) do not handle references correctly

consolidated code that maintains/enforces referential integrity (RI):
SharedItemStateManager.store(ChangeLog) is now the only place where
RI is maintained and enforced

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@326916 13f79535-47bb-0310-9956-ffa450edef68

+import EDU.oswego.cs.dl.util.concurrent.ReadWriteLock;
+import EDU.oswego.cs.dl.util.concurrent.ReentrantWriterPreferenceReadWriteLock;
-import org.apache.jackrabbit.core.util.Dumpable;
+import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.core.util.Dumpable;
+import javax.jcr.ReferentialIntegrityException;
+import java.io.PrintStream;
-import java.io.PrintStream;
-
-import EDU.oswego.cs.dl.util.concurrent.ReadWriteLock;
-import EDU.oswego.cs.dl.util.concurrent.ReentrantWriterPreferenceReadWriteLock;
+import java.util.Set;
+import java.util.List;
+     * node type registry used for identifying referenceable nodes
+     */
+    private final NodeTypeRegistry ntReg;
+
+    /**
+        this.ntReg = ntReg;
+     *
-     * @throws StaleItemStateException if at least one of the affected item
-     *                                 states has become stale
-     * @throws ItemStateException if another error occurs
+     * @throws ReferentialIntegrityException if a new or modified REFERENCE
+     *                                       property refers to a non-existent
+     *                                       target or if a removed node is still
+     *                                       being referenced
+     * @throws StaleItemStateException       if at least one of the affected item
+     *                                       states has become stale
+     * @throws ItemStateException            if another error occurs
-            throws StaleItemStateException, ItemStateException {
+            throws ReferentialIntegrityException, StaleItemStateException,
+            ItemStateException {
-        // set of virtual node references
-        // todo: remember by provider
-        LinkedList virtualRefs = new LinkedList();
+        /**
+         * array of lists of dirty virtual node references
+         * (one array element per provider)
+         * todo: FIXME handling of virtual node references is erm...  messy
+         */
+        List[] virtualNodeReferences = new List[virtualProviders.length];
-             * Validate modified references. Target node of references may
-             * have been deleted in the meantime.
+             * Update node references based on modifications in change log
+             * (added/modified/removed REFERENCE properties)
-            Iterator iter = local.modifiedRefs();
-            while (iter.hasNext()) {
-                NodeReferences refs = (NodeReferences) iter.next();
-                NodeId id = new NodeId(refs.getUUID());
-                // if targetid is in virtual provider, transfer to its modified set
-                for (int i = 0; i < virtualProviders.length; i++) {
-                    VirtualItemStateProvider provider = virtualProviders[i];
-                    if (provider.hasItemState(id)) {
-                        virtualRefs.add(refs);
-                        refs = null;
-                        break;
-                    }
-                }
-                if (refs != null) {
-                    if (refs.hasReferences()) {
-                        if (!local.has(id) && !hasItemState(id)) {
-                            String msg = "Target node " + id
-                                    + " of REFERENCE property does not exist";
-                            throw new ItemStateException(msg);
-                        }
-                    }
-                    shared.modified(refs);
-                }
-            }
+            updateReferences(local);
+            /**
+             * Check whether reference targets exist/were not removed
+             */
+            checkReferentialIntegrity(local);
-                iter = local.modifiedStates();
-                while (iter.hasNext()) {
+                for (Iterator iter = local.modifiedStates(); iter.hasNext();) {
-                iter = local.deletedStates();
-                while (iter.hasNext()) {
+                for (Iterator iter = local.deletedStates(); iter.hasNext();) {
-                iter = local.addedStates();
-                while (iter.hasNext()) {
+                for (Iterator iter = local.addedStates(); iter.hasNext();) {
+                // filter out virtual node references for later processing
+                for (Iterator iter = local.modifiedRefs(); iter.hasNext();) {
+                    NodeReferences refs = (NodeReferences) iter.next();
+                    NodeId id = new NodeId(refs.getUUID());
+                    boolean virtual = false;
+                    for (int i = 0; i < virtualProviders.length; i++) {
+                        if (virtualProviders[i].hasItemState(id)) {
+                            List virtualRefs = virtualNodeReferences[i];
+                            if (virtualRefs == null) {
+                                virtualRefs = new LinkedList();
+                                virtualNodeReferences[i] = virtualRefs;
+                            }
+                            virtualRefs.add(refs);
+                            virtual = true;
+                            break;
+                        }
+                    }
+                    if (virtual) {
+                        continue;
+                    }
+                    shared.modified(refs);
+                }
-                    iter = shared.modifiedStates();
-                    while (iter.hasNext()) {
+                    for (Iterator iter = shared.modifiedStates(); iter.hasNext();) {
-                    iter = shared.deletedStates();
-                    while (iter.hasNext()) {
+                    for (Iterator iter = shared.deletedStates(); iter.hasNext();) {
-                    iter = shared.addedStates();
-                    while (iter.hasNext()) {
+                    for (Iterator iter = shared.addedStates(); iter.hasNext();) {
-            iter = virtualRefs.iterator();
-            while (iter.hasNext()) {
-                NodeReferences refs = (NodeReferences) iter.next();
-                for (int i = 0; i < virtualProviders.length; i++) {
-                    if (virtualProviders[i].setNodeReferences(refs)) {
-                    break;
+            for (int i = 0; i < virtualNodeReferences.length; i++) {
+                List virtualRefs = virtualNodeReferences[i];
+                if (virtualRefs != null) {
+                    for (Iterator iter = virtualRefs.iterator(); iter.hasNext();) {
+                        NodeReferences refs = (NodeReferences) iter.next();
+                        virtualProviders[i].setNodeReferences(refs);
+     *
-     * @param ntReg node type registry
+     * @param ntReg        node type registry
+     *
-     * Check targets of modified node references exist.
-     * @param log change log
-     * @throws ItemStateException if some target was not found
+     * Determines whether the specified node is <i>referenceable</i>, i.e.
+     * whether the mixin type <code>mix:referenceable</code> is either
+     * directly assigned or indirectly inherited.
+     *
+     * @param state node state to check
+     * @return true if the specified node is <i>referenceable</i>, false otherwise.
+     * @throws ItemStateException if an error occurs
-    void checkTargetsExist(ChangeLog log) throws ItemStateException {
-        Iterator iter = log.modifiedRefs();
-        while (iter.hasNext()) {
+    private boolean isReferenceable(NodeState state) throws ItemStateException {
+        // shortcut: check some wellknown built-in types first
+        QName primary = state.getNodeTypeName();
+        Set mixins = state.getMixinTypeNames();
+        if (mixins.contains(QName.MIX_REFERENCEABLE)
+                || mixins.contains(QName.MIX_VERSIONABLE)
+                || primary.equals(QName.NT_RESOURCE)) {
+            return true;
+        }
+        // build effective node type
+        QName[] types = new QName[mixins.size() + 1];
+        mixins.toArray(types);
+        // primary type
+        types[types.length - 1] = primary;
+        try {
+            return ntReg.getEffectiveNodeType(types).includesNodeType(QName.MIX_REFERENCEABLE);
+        } catch (NodeTypeConflictException ntce) {
+            String msg = "internal error: failed to build effective node type for node "
+                    + state.getId();
+            log.debug(msg);
+            throw new ItemStateException(msg, ntce);
+        } catch (NoSuchNodeTypeException nsnte) {
+            String msg = "internal error: failed to build effective node type for node "
+                    + state.getId();
+            log.debug(msg);
+            throw new ItemStateException(msg, nsnte);
+        }
+    }
+
+    /**
+     * Updates the target node references collections based on the modifications
+     * in the change log (i.e. added/removed/modified <code>REFERENCE</code>
+     * properties).
+     * <p/>
+     * <b>Important node:</b> For consistency reasons this method must only be
+     * called <i>once</i> per change log and the change log should not be modified
+     * anymore afterwards.
+     *
+     * @param changes change log
+     * @throws ItemStateException if an error occurs
+     */
+    protected void updateReferences(ChangeLog changes) throws ItemStateException {
+
+        // process added REFERENCE properties
+        for (Iterator iter = changes.addedStates(); iter.hasNext();) {
+            ItemState state = (ItemState) iter.next();
+            if (!state.isNode()) {
+                PropertyState prop = (PropertyState) state;
+                if (prop.getType() == PropertyType.REFERENCE) {
+                    // this is a new REFERENCE property:
+                    // add the new 'reference'
+                    InternalValue[] vals = prop.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        String uuid = vals[i].toString();
+                        NodeReferencesId refsId = new NodeReferencesId(uuid);
+                        NodeReferences refs =
+                                getOrCreateNodeReferences(refsId, changes);
+                        // add reference
+                        refs.addReference((PropertyId) prop.getId());
+                        // update change log
+                        changes.modified(refs);
+                    }
+                }
+            }
+        }
+
+        // process modified REFERENCE properties
+        for (Iterator iter = changes.modifiedStates(); iter.hasNext();) {
+            ItemState state = (ItemState) iter.next();
+            if (!state.isNode()) {
+                PropertyState newProp = (PropertyState) state;
+                PropertyState oldProp =
+                        (PropertyState) getItemState(state.getId());
+                // check old type
+                if (oldProp.getType() == PropertyType.REFERENCE) {
+                    // this is a modified REFERENCE property:
+                    // remove the old 'reference' from the target
+                    InternalValue[] vals = oldProp.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        String uuid = vals[i].toString();
+                        NodeReferencesId refsId = new NodeReferencesId(uuid);
+                        // either get node references from change log or load from
+                        // persistence manager
+                        NodeReferences refs = changes.get(refsId);
+                        if (refs == null) {
+                            refs = getNodeReferences(refsId);
+                        }
+                        // remove reference
+                        refs.removeReference((PropertyId) oldProp.getId());
+                        // update change log
+                        changes.modified(refs);
+                    }
+                }
+                // check new type
+                if (newProp.getType() == PropertyType.REFERENCE) {
+                    // this is a modified REFERENCE property:
+                    // add the new 'reference' to the target
+                    InternalValue[] vals = newProp.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        String uuid = vals[i].toString();
+                        NodeReferencesId refsId = new NodeReferencesId(uuid);
+                        NodeReferences refs =
+                                getOrCreateNodeReferences(refsId, changes);
+                        // add reference
+                        refs.addReference((PropertyId) newProp.getId());
+                        // update change log
+                        changes.modified(refs);
+                    }
+                }
+            }
+        }
+
+        // process removed REFERENCE properties
+        for (Iterator iter = changes.deletedStates(); iter.hasNext();) {
+            ItemState state = (ItemState) iter.next();
+            if (!state.isNode()) {
+                PropertyState prop = (PropertyState) state;
+                if (prop.getType() == PropertyType.REFERENCE) {
+                    // this is a removed REFERENCE property:
+                    // remove the 'reference' from the target
+                    InternalValue[] vals = prop.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        String uuid = vals[i].toString();
+                        NodeReferencesId refsId = new NodeReferencesId(uuid);
+                        // either get node references from change log or
+                        // load from persistence manager
+                        NodeReferences refs = changes.get(refsId);
+                        if (refs == null) {
+                            refs = getNodeReferences(refsId);
+                        }
+                        // remove reference
+                        refs.removeReference((PropertyId) prop.getId());
+                        // update change log
+                        changes.modified(refs);
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Returns a node references object using the following rules:<p/>
+     * <ul>
+     * <li>1. return a modified instance from the change log (if one exists)</li>
+     * <li>2. return an existing instance from <i>this</i> item state manager
+     * (if one exists)</li>
+     * <li>3. create and return a new instance</li>
+     * </ul>
+     *
+     * @param refsId  node references id
+     * @param changes change log
+     * @return a node references object
+     * @throws ItemStateException if an error occurs
+     */
+    private NodeReferences getOrCreateNodeReferences(NodeReferencesId refsId,
+                                                     ChangeLog changes)
+            throws ItemStateException {
+        // check change log
+        NodeReferences refs = changes.get(refsId);
+        if (refs == null) {
+            // not yet in change log:
+            // either load existing or create new
+            if (hasNodeReferences(refsId)) {
+                refs = getNodeReferences(refsId);
+            } else {
+                refs = new NodeReferences(refsId);
+            }
+        }
+        return refs;
+    }
+
+    /**
+     * Verifies that
+     * <ul>
+     * <li>no referenceable nodes are deleted if they are still being referenced</li>
+     * <li>targets of modified node references exist</li>
+     * </ul>
+     *
+     * @param changes change log
+     * @throws ReferentialIntegrityException if a new or modified REFERENCE
+     *                                       property refers to a non-existent
+     *                                       target or if a removed node is still
+     *                                       being referenced
+     * @throws ItemStateException            if another error occurs
+     */
+    protected void checkReferentialIntegrity(ChangeLog changes)
+            throws ReferentialIntegrityException, ItemStateException {
+
+        // check whether removed referenceable nodes are still being referenced
+        for (Iterator iter = changes.deletedStates(); iter.hasNext();) {
+            ItemState state = (ItemState) iter.next();
+            if (state.isNode()) {
+                NodeState node = (NodeState) state;
+                if (isReferenceable(node)) {
+                    NodeReferencesId refsId = new NodeReferencesId(node.getUUID());
+                    // either get node references from change log or
+                    // load from persistence manager
+                    NodeReferences refs = changes.get(refsId);
+                    if (refs == null) {
+                        if (!hasNodeReferences(refsId)) {
+                            continue;
+                        }
+                        refs = getNodeReferences(refsId);
+                    }
+                    if (refs.hasReferences()) {
+                        String msg = node.getId()
+                                + ": the node cannot be removed because it is still being referenced.";
+                        log.debug(msg);
+                        throw new ReferentialIntegrityException(msg);
+                    }
+                }
+            }
+        }
+
+        // check whether targets of modified node references exist
+        for (Iterator iter = changes.modifiedRefs(); iter.hasNext();) {
-
+            if (!refs.hasReferences()) {
+                // no need to check existence of target if there are
+                // no references
+                continue;
+            }
-            if (refs != null && refs.hasReferences()) {
-                if (!log.has(id) && !hasItemState(id)) {
+            if (refs != null) {
+                if (!changes.has(id) && !hasItemState(id)) {
-                    throw new ItemStateException(msg);
+                    log.debug(msg);
+                    throw new ReferentialIntegrityException(msg);
+     *
+     *

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS43 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 MOV44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 UPD42 INS44 INS43 INS65 INS42 INS42 INS21 INS65 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS21 INS21 INS54 INS65 INS65 INS65 UPD42 INS42 INS24 INS24 INS24 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS65 INS43 INS42 INS42 INS24 INS24 INS66 INS7 INS42 INS66 INS66 INS66 INS66 UPD66 UPD66 INS5 UPD66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS5 INS59 INS32 INS7 INS8 INS12 INS12 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS58 INS32 INS8 INS58 INS32 INS8 INS58 INS32 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS66 INS66 INS66 UPD66 INS66 UPD42 INS42 INS66 INS66 INS66 INS66 UPD66 INS42 INS58 INS32 INS8 INS58 MOV32 MOV8 INS22 INS42 INS43 INS85 UPD42 INS3 INS21 INS21 INS24 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS41 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS2 INS42 INS41 INS44 INS8 INS44 INS8 MOV43 INS59 INS42 INS42 INS60 INS25 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS25 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS59 INS25 INS52 INS42 UPD42 MOV42 INS5 INS40 INS32 INS32 MOV58 INS27 MOV37 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS9 INS42 INS5 INS27 INS42 INS27 INS32 INS43 INS42 INS60 INS21 MOV53 INS43 INS42 INS60 INS21 MOV53 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS42 MOV42 MOV32 INS38 INS8 MOV27 INS43 INS85 INS42 INS42 INS42 INS42 INS24 INS24 INS24 INS24 INS42 INS40 MOV60 INS25 INS43 INS85 INS32 INS34 INS40 INS34 INS32 INS42 INS40 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS11 INS32 INS60 INS25 INS42 INS42 INS42 INS42 INS11 INS32 INS60 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS11 INS32 INS60 INS25 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS60 INS25 UPD42 MOV32 INS18 INS42 INS58 MOV32 MOV8 INS58 MOV32 MOV8 INS58 MOV32 MOV8 INS58 MOV32 MOV8 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS7 INS7 INS43 INS32 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 MOV43 MOV59 MOV60 INS24 INS25 MOV21 INS24 INS24 INS24 INS42 INS42 INS2 INS42 INS33 INS24 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS40 INS60 INS24 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS32 INS40 INS60 INS24 INS32 INS40 INS60 INS24 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS40 INS60 INS24 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS60 INS60 INS25 INS25 INS21 INS53 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS39 MOV58 MOV27 MOV37 INS8 INS42 INS8 INS58 MOV32 MOV8 INS58 MOV32 MOV8 INS58 MOV32 MOV8 INS42 INS42 INS58 MOV32 MOV8 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS42 INS43 INS32 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS59 INS43 INS59 INS27 INS8 MOV32 INS8 INS32 INS14 UPD42 INS9 INS25 INS18 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS21 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS27 INS42 INS60 INS60 INS60 INS21 INS21 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS27 INS42 INS60 INS60 INS60 INS25 INS21 INS21 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS27 INS42 INS60 INS60 INS60 INS21 INS21 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS27 INS42 INS60 INS60 INS60 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS25 INS21 INS60 INS21 INS53 UPD42 INS42 INS42 INS42 INS43 INS42 MOV32 INS8 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 MOV32 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS43 INS32 INS42 INS42 INS42 INS38 INS8 INS7 INS43 INS59 INS32 INS14 INS42 MOV2 INS60 INS25 MOV21 INS21 INS10 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS18 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS43 INS59 UPD27 MOV27 INS8 INS7 INS2 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS32 INS2 INS42 INS43 INS42 INS42 INS42 INS42 INS7 INS43 INS32 INS2 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS32 INS2 INS42 INS43 INS42 INS42 INS42 INS42 INS7 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS2 UPD42 INS21 INS21 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 MOV14 INS2 INS42 INS42 INS42 DEL43 DEL61 DEL42 DEL43 DEL42 DEL42 DEL33 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL27 DEL59 DEL60 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL7 DEL21 DEL61 DEL42 DEL7 DEL21 DEL61 DEL42 DEL7 DEL21 DEL61 DEL42 DEL7 DEL21 DEL61 DEL42 DEL7 DEL21 DEL61 DEL42 DEL7 DEL21 DEL61 DEL42 DEL40 DEL27 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL7 DEL21 DEL61 DEL27 DEL59 DEL60 DEL61