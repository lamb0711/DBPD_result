JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]
JCR-2774 : Access control for repository level API operations


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1177668 13f79535-47bb-0310-9956-ffa450edef68

+     * @param path
-    ACLTemplate getACL(NodeImpl aclNode) throws RepositoryException {
-        return new ACLTemplate(aclNode);
+    ACLTemplate getACL(NodeImpl aclNode, String path) throws RepositoryException {
+        return new ACLTemplate(aclNode, path);
-            return new AccessControlPolicy[] {getACL(aclNode)};
+            return new AccessControlPolicy[] {getACL(aclNode, nodePath)};
+        String mixin;
+        Name aclName;
+        NodeImpl controlledNode;
+
+        if (nodePath == null) {
+            controlledNode = (NodeImpl) session.getRootNode();
+            mixin = session.getJCRName(NT_REP_REPO_ACCESS_CONTROLLABLE);
+            aclName = N_REPO_POLICY;
+        } else {
+            controlledNode = getNode(nodePath);
+            mixin = session.getJCRName(NT_REP_ACCESS_CONTROLLABLE);
+            aclName = N_POLICY;
+        }
+
-        NodeImpl controlledNode = getNode(nodePath);
-        NodeImpl aclNode = getAclNode(controlledNode);
+        NodeImpl aclNode = getAclNode(controlledNode, nodePath);
-            // rep:AccessControllable mixin set (e.g. due to a lock) or
-            // has colliding rep:policy child node set.
-            if (controlledNode.hasNode(N_POLICY)) {
+            // mixin set (e.g. due to a lock) or
+            // has colliding rep:policy or rep:repoPolicy child node set.
+            if (controlledNode.hasNode(aclName)) {
-                log.warn("Colliding rep:policy child without node being access controllable ({}).", nodePath);
+                log.warn("Colliding policy child without node being access controllable ({}).", nodePath);
-                String mixin = session.getJCRName(NT_REP_ACCESS_CONTROLLABLE);
+
-            aclNode = createAclNode(nodePath);
+            aclNode = (nodePath == null) ? createRepoAclNode() : createAclNode(nodePath);
-        NodeImpl node = getNode(nodePath);
-        if (utils.isAcItem(node)) {
-            throw new AccessControlException("Node " + nodePath + " defines ACL or ACE itself.");
+        if (nodePath != null) {
+            NodeImpl node = getNode(nodePath);
+            if (utils.isAcItem(node)) {
+                throw new AccessControlException("Node " + nodePath + " defines ACL or ACE itself.");
+            }
-        if (!nodePath.equals(acl.getPath())) {
+        boolean matchingPath = (nodePath == null) ? acl.getPath() == null : nodePath.equals(acl.getPath());
+        if (!matchingPath) {
-        NodeImpl controlledNode = getNode(nodePath);
-        return getAclNode(controlledNode);
+        NodeImpl controlledNode;
+        if (nodePath == null) {
+            controlledNode = (NodeImpl) session.getRootNode();
+        } else {
+            controlledNode = getNode(nodePath);
+        }
+        return getAclNode(controlledNode, nodePath);
+     * @param nodePath
-    private NodeImpl getAclNode(NodeImpl controlledNode) throws RepositoryException {
+    private NodeImpl getAclNode(NodeImpl controlledNode, String nodePath) throws RepositoryException {
-        if (ACLProvider.isAccessControlled(controlledNode)) {
-            aclNode = controlledNode.getNode(N_POLICY);
+        if (nodePath == null) {
+            if (ACLProvider.isRepoAccessControlled(controlledNode)) {
+                aclNode = controlledNode.getNode(N_REPO_POLICY);
+            }
+        } else {
+            if (ACLProvider.isAccessControlled(controlledNode)) {
+                aclNode = controlledNode.getNode(N_POLICY);
+            }
+     *
+     * @return the new acl node used to store repository level privileges.
+     * @throws RepositoryException if an error occurs
+     */
+    private NodeImpl createRepoAclNode() throws RepositoryException {
+        NodeImpl root = (NodeImpl) session.getRootNode();
+        if (!root.isNodeType(NT_REP_REPO_ACCESS_CONTROLLABLE)) {
+            root.addMixin(NT_REP_REPO_ACCESS_CONTROLLABLE);
+        }
+        return addNode(root, N_REPO_POLICY, NT_REP_ACL);
+    }
+
+    /**

INS31 INS44 MOV60 INS8 INS44 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS65 INS43 INS42 INS60 INS60 INS25 INS25 INS60 INS25 INS65 INS43 INS42 MOV60 INS25 MOV41 INS65 INS65 INS42 INS42 INS60 INS25 INS41 INS42 INS42 MOV43 INS59 INS43 INS59 MOV43 INS27 INS8 INS8 INS43 INS27 MOV8 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS27 INS8 MOV8 INS66 INS42 INS66 INS43 INS59 INS38 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS33 INS42 INS16 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS33 INS25 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS36 INS27 MOV32 INS7 INS7 INS32 INS8 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS11 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 MOV32 INS42 INS42 UPD42 INS16 INS27 INS32 INS33 INS42 INS11 INS42 MOV32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS36 INS32 MOV32 INS42 INS33 INS42 INS42 INS43 INS32 INS7 INS42 INS42 INS42 UPD45 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 DEL42 DEL59 DEL60