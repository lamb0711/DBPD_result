JCR-890: concurrent read-only access to a session

Streamline the new ItemSaveOperation and related classes.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@957189 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+import java.util.SortedMap;
+import java.util.TreeMap;
-import org.apache.commons.collections.iterators.IteratorChain;
-     * Returns an iterator over those transient item state instances that are
-     * direct or indirect descendants of the item state with the given
-     * <code>parentId</code>. The transient item state instance with the given
-     * <code>parentId</code> itself (if there is such) will not be included.
-     * <p/>
+     * Returns a collection of those transient item state instances that are
+     * direct or indirect descendants of the item state with the given parent.
+     * The transient item state instance with the given identifier itself
+     * (if there is such) will not be included.
+     * <p>
-     * @param parentId the id of the common parent of the transient item state
-     *                 instances to be returned.
-     * @return an iterator over descendant transient item state instances
+     * @param id identifier of the common parent of the transient item state
+     *           instances to be returned
+     * @return collection of descendant transient item state instances
-    public Iterator<ItemState> getDescendantTransientItemStates(NodeId parentId)
+    public Collection<ItemState> getDescendantTransientItemStates(ItemId id)
-        if (transientStore.isEmpty()) {
-            List<ItemState> empty = Collections.emptyList();
-            return empty.iterator();
-        }
-
-        // build ordered collection of descendant transient states
-        // sorted by decreasing relative depth
-
-        // use an array of lists to group the descendants by relative depth;
-        // the depth is used as array index
-        List[] la = new List[10];
-            HierarchyManager atticAware = getAtticAwareHierarchyMgr();
-            for (ItemState state : transientStore.values()) {
-                // determine relative depth: > 0 means it's a descendant
-                int depth;
-                try {
-                    depth = atticAware.getShareRelativeDepth(parentId, state.getId());
-                } catch (ItemNotFoundException infe) {
-                    /**
-                     * one of the parents of the specified item has been
-                     * removed externally; as we don't know its path,
-                     * we can't determine if it is a descendant;
-                     * InvalidItemStateException should only be thrown if
-                     * a descendant is affected;
-                     * => throw InvalidItemStateException for now
-                     * todo FIXME
-                     */
-                    // unable to determine relative depth, assume that the item
-                    // (or any of its ancestors) has been removed externally
-                    String msg = state.getId()
-                            + ": the item seems to have been removed externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
-                }
-
-                if (depth < 1) {
-                    // not a descendant
-                    continue;
-                }
-
-                // ensure capacity
-                if (depth > la.length) {
-                    List[] old = la;
-                    la = new List[depth + 10];
-                    System.arraycopy(old, 0, la, 0, old.length);
-                }
-
-                List list = la[depth - 1];
-                if (list == null) {
-                    list = new ArrayList();
-                    la[depth - 1] = list;
-                }
-                list.add(state);
-            }
-        } catch (RepositoryException re) {
-            log.warn("inconsistent hierarchy state", re);
+            return getDescendantItemStates(
+                    id, transientStore, getAtticAwareHierarchyMgr());
+        } catch (ItemNotFoundException e) {
+            // one of the parents of the specified item has been
+            // removed externally; as we don't know its path,
+            // we can't determine if it is a descendant;
+            // InvalidItemStateException should only be thrown if
+            // a descendant is affected;
+            // => throw InvalidItemStateException for now (FIXME)
+            // unable to determine relative depth, assume that the item
+            // (or any of its ancestors) has been removed externally
+            throw new InvalidItemStateException(
+                    "Item seems to have been removed externally", e);
-        // create an iterator over the collected descendants
-        // in decreasing depth order
-        IteratorChain resultIter = new IteratorChain();
-        for (int i = la.length - 1; i >= 0; i--) {
-            List list = la[i];
-            if (list != null) {
-                resultIter.addIterator(list.iterator());
-            }
-        }
-        /**
-         * if the resulting iterator chain is empty return
-         * EMPTY_LIST.iterator() instead because older versions
-         * of IteratorChain (pre Commons Collections 3.1)
-         * would throw UnsupportedOperationException in this
-         * situation
-         */
-        if (resultIter.getIterators().isEmpty()) {
-            List<ItemState> empty = Collections.emptyList();
-            return empty.iterator();
-        }
-        return resultIter;
-     * @param parentId the id of the common parent of the transient item state
-     *                 instances to be returned.
-     * @return an iterator over descendant transient item state instances in the attic
+     * @param id identifier of the common parent of the transient item state
+     *           instances to be returned
+     * @return collection of descendant transient item state instances
+     *         in the attic
-    public Iterator<ItemState> getDescendantTransientItemStatesInAttic(NodeId parentId) {
-        if (atticStore.isEmpty()) {
-            List<ItemState> empty = Collections.emptyList();
-            return empty.iterator();
-        }
+    public Iterable<ItemState> getDescendantTransientItemStatesInAttic(
+            ItemId id) throws RepositoryException {
+        return getDescendantItemStates(
+                id, atticStore,
+                new ZombieHierarchyManager(hierMgr, this, getAttic()));
+    }
-        // build ordered collection of descendant transient states in attic
-        // sorted by decreasing relative depth
-
-        // use a special attic-aware hierarchy manager
-        ZombieHierarchyManager zombieHierMgr =
-            new ZombieHierarchyManager(hierMgr, this, getAttic());
-
-        // use an array of lists to group the descendants by relative depth;
-        // the depth is used as array index
-        List[] la = new List[10];
-        try {
-            for (ItemState state : atticStore.values()) {
+    /**
+     * Utility method used by the
+     * {@link #getDescendantTransientItemStates(ItemId)} and
+     * {@link #getDescendantTransientItemStatesInAttic(ItemId)} methods
+     * to collect descendant item states from the given item state store.
+     *
+     * @param id identifier of the parent item
+     * @param store item state store
+     * @param hierarchyManager hierarchy manager associated with the store
+     * @return descendants of the identified item
+     * @throws RepositoryException if the descendants could not be accessed
+     */
+    private List<ItemState> getDescendantItemStates(
+            ItemId id, ItemStateStore store, HierarchyManager hierarchyManager)
+            throws RepositoryException {
+        if (id.denotesNode() && !store.isEmpty()) {
+            // Group the descendants by reverse relative depth
+            SortedMap<Integer, Collection<ItemState>> statesByReverseDepth =
+                new TreeMap<Integer, Collection<ItemState>>();
+            for (ItemState state : store.values()) {
-                //int depth = zombieHierMgr.getRelativeDepth(parentId, state.getId());
-                int depth = zombieHierMgr.getShareRelativeDepth(parentId, state.getId());
-                if (depth < 1) {
-                    // not a descendant
-                    continue;
+                int depth = hierarchyManager.getShareRelativeDepth(
+                        (NodeId) id, state.getId());
+                if (depth > 0) {
+                    Collection<ItemState> statesAtDepth =
+                        statesByReverseDepth.get(-depth);
+                    if (statesAtDepth == null) {
+                        statesAtDepth = new ArrayList<ItemState>();
+                        statesByReverseDepth.put(-depth, statesAtDepth);
+                    }
+                    statesAtDepth.add(state);
-
-                // ensure capacity
-                if (depth > la.length) {
-                    List[] old = la;
-                    la = new List[depth + 10];
-                    System.arraycopy(old, 0, la, 0, old.length);
-                }
-
-                List list = la[depth - 1];
-                if (list == null) {
-                    list = new ArrayList();
-                    la[depth - 1] = list;
-                }
-                list.add(state);
-        } catch (RepositoryException re) {
-            log.warn("inconsistent hierarchy state", re);
-        }
-        // create an iterator over the collected descendants
-        // in decreasing depth order
-        IteratorChain resultIter = new IteratorChain();
-        for (int i = la.length - 1; i >= 0; i--) {
-            List list = la[i];
-            if (list != null) {
-                resultIter.addIterator(list.iterator());
+
+            // Collect the descendants in decreasing depth order
+            List<ItemState> descendants = new ArrayList<ItemState>();
+            for (Collection<ItemState> statesAtDepth
+                    : statesByReverseDepth.values()) {
+                descendants.addAll(statesAtDepth);
+            return descendants;
+        } else {
+            return Collections.emptyList();
-        /**
-         * if the resulting iterator chain is empty return
-         * EMPTY_LIST.iterator() instead because older versions
-         * of IteratorChain (pre Commons Collections 3.1)
-         * would throw UnsupportedOperationException in this
-         * situation
-         */
-        if (resultIter.getIterators().isEmpty()) {
-            List<ItemState> empty = Collections.emptyList();
-            return empty.iterator();
-        }
-        return resultIter;

MOV26 MOV26 UPD40 UPD40 INS31 INS31 INS31 MOV29 MOV83 UPD74 MOV74 MOV42 MOV44 MOV43 MOV43 INS8 MOV29 INS83 INS74 INS42 INS44 MOV43 INS8 INS29 INS83 MOV74 INS42 INS44 INS44 INS44 MOV43 INS8 UPD43 UPD43 UPD42 INS54 INS43 INS43 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 MOV43 INS42 INS25 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 UPD66 UPD66 UPD66 UPD42 UPD42 INS8 MOV12 UPD42 UPD66 UPD66 UPD66 INS66 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 UPD42 MOV42 UPD42 MOV42 INS27 INS8 MOV8 MOV41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV14 INS68 INS68 INS32 INS38 INS60 INS70 MOV60 INS70 INS41 UPD42 INS42 INS69 INS42 INS69 UPD42 MOV42 UPD42 MOV42 INS32 INS74 INS59 MOV44 MOV32 MOV8 MOV74 INS44 INS32 INS8 INS42 MOV32 UPD42 UPD42 INS42 MOV32 INS43 INS43 UPD42 MOV42 MOV42 INS43 INS43 INS74 UPD42 MOV42 INS14 UPD42 INS25 UPD42 MOV14 UPD74 MOV74 INS42 INS42 INS42 MOV21 INS45 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD43 MOV43 MOV43 INS74 UPD27 MOV27 INS8 INS74 UPD43 UPD42 INS43 INS43 INS74 UPD34 INS60 MOV25 MOV21 MOV43 INS43 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 UPD42 INS11 MOV32 INS74 INS59 INS42 UPD42 MOV42 MOV42 MOV43 INS42 INS43 INS43 INS42 INS32 UPD42 MOV21 INS21 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS38 INS32 INS42 UPD42 INS42 INS42 INS38 INS42 INS74 INS42 MOV43 INS43 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL18 DEL8 DEL25 DEL42 DEL40 DEL27 DEL43 DEL85 DEL5 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL34 DEL27 DEL3 DEL7 DEL21 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL27 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL39 DEL42 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL54 DEL42 DEL34 DEL27 DEL18 DEL8 DEL25 DEL42 DEL40 DEL27 DEL43 DEL85 DEL5 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL34 DEL27 DEL3 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL8 DEL25 DEL43 DEL42 DEL42 DEL42 DEL34 DEL27 DEL2 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL40 DEL34 DEL27 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL32 DEL32 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL44 DEL42 DEL42 DEL32 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL43 DEL42 DEL59 DEL60 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL43 DEL42 DEL44 DEL70 DEL8 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL39 DEL42 DEL40 DEL34 DEL27 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL32 DEL42 DEL32 DEL25 DEL42 DEL41 DEL8 DEL31