- adding versioning configuratuin
- adapting versioning to new persistence manager api

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126386 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.PropertyType;
-import javax.jcr.nodetype.NodeDef;
-import javax.jcr.nodetype.PropertyDef;
-import java.util.HashSet;
-     * the node type manager
-     */
-    private final NodeTypeManagerImpl ntMgr;
-
-    /**
-     * @param ntMgr
-                             NodeTypeManagerImpl ntMgr,
-        this.ntMgr = ntMgr;
-    protected void setPropertyValue(QName name, InternalValue value)
+    protected void setPropertyValue(UpdateOperation upd, QName name, InternalValue value)
-        setPropertyValues(name, value.getType(), new InternalValue[]{value}, false);
+        setPropertyValues(upd, name, value.getType(), new InternalValue[]{value}, false);
-    protected void setPropertyValues(QName name, int type, InternalValue[] values)
+    protected void setPropertyValues(UpdateOperation upd, QName name, int type, InternalValue[] values)
-        setPropertyValues(name, type, values, true);
+        setPropertyValues(upd, name, type, values, true);
-    protected void setPropertyValues(QName name, int type, InternalValue[] values, boolean multiple)
+    protected void setPropertyValues(UpdateOperation upd, QName name, int type, InternalValue[] values, boolean multiple)
-        PropertyState prop = getOrCreatePropertyState(name, type, multiple);
+        PropertyState prop = getOrCreatePropertyState(upd, name, type, multiple);
+
-    private PropertyState getOrCreatePropertyState(QName name, int type, boolean multiValued)
+    private PropertyState getOrCreatePropertyState(UpdateOperation upd, QName name, int type, boolean multiValued)
-                propState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                if (propState.getStatus()==ItemState.STATUS_EXISTING) {
+                    propState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                }
+                // although this is not quite correct, we mark node as modified aswell
+                if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
+                    nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                }
-            PropertyDefImpl def = getApplicablePropertyDef(name, type, multiValued);
-            //@todo create property state inside an update
-            PropertyState propState = new PropertyState(name, nodeState.getUUID(),
-                    PropertyState.STATUS_NEW, false);
+            PropertyState propState = upd.createNew(name, nodeState.getUUID());
-            propState.setDefinitionId(new PropDefId(def.unwrap()));
-
+            propState.setDefinitionId(PropDefId.valueOf("0"));
-            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+            if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
+                nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+            }
-     * retrieves the property definition for the given contraints
-     *
-     * @param propertyName
-     * @param type
-     * @param multiValued
-     * @return
-     * @throws RepositoryException
-     */
-    protected PropertyDefImpl getApplicablePropertyDef(QName propertyName,
-                                                       int type, boolean multiValued)
-            throws RepositoryException {
-        PropDef pd = getEffectiveNodeType().getApplicablePropertyDef(propertyName, type, multiValued);
-        return ntMgr.getPropDef(new PropDefId(pd));
-    }
-
-    /**
-     * Retrieves the node definition for the given contraints.
-     *
-     * @param nodeName
-     * @param nodeTypeName
-     * @return
-     * @throws RepositoryException
-     */
-    protected NodeDefImpl getApplicableChildNodeDef(QName nodeName, QName nodeTypeName)
-            throws RepositoryException {
-        ChildNodeDef cnd = getEffectiveNodeType().getApplicableChildNodeDef(nodeName, nodeTypeName);
-        return ntMgr.getNodeDef(new NodeDefId(cnd));
-    }
-
-    /**
-     * Returns the effective (i.e. merged and resolved) node type representation
-     * of this node's primary and mixin node types.
-     *
-     * @return the effective node type
-     * @throws RepositoryException
-     */
-    protected EffectiveNodeType getEffectiveNodeType() throws RepositoryException {
-        // build effective node type of mixins & primary type
-        NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
-        // existing mixin's
-        HashSet set = new HashSet(nodeState.getMixinTypeNames());
-        // primary type
-        set.add(nodeState.getNodeTypeName());
-        try {
-            return ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
-        } catch (NodeTypeConflictException ntce) {
-            String msg = "internal error: failed to build effective node type for node " + nodeState.getUUID();
-            throw new RepositoryException(msg, ntce);
-        }
-    }
-
-    /**
-    protected boolean removeNode(QName name) throws RepositoryException {
-        return removeNode(name, 1);
+    protected boolean removeNode(UpdateOperation upd, QName name) throws RepositoryException {
+        return removeNode(upd, name, 1);
-    protected boolean removeNode(QName name, int index) throws RepositoryException {
-        if (nodeState.removeChildNodeEntry(name, index)) {
-            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-            return true;
-        } else {
-            return false;
+    protected boolean removeNode(UpdateOperation upd, QName name, int index) throws RepositoryException {
+        try {
+            NodeState.ChildNodeEntry entry = nodeState.getChildNodeEntry(name, index);
+            if (entry == null) {
+                return false;
+            } else {
+                ItemState state = stateMgr.getItemState(new NodeId(entry.getUUID()));
+                upd.destroy(state);
+                nodeState.removeChildNodeEntry(name, index);
+                nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                return true;
+            }
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
-            return new PersistentNode(stateMgr, ntMgr, state);
+            return new PersistentNode(stateMgr, state);
-            return new PersistentNode(stateMgr, ntMgr, state);
+            return new PersistentNode(stateMgr, state);
-    protected PersistentNode addNode(QName nodeName, QName nodeTypeName)
+    protected PersistentNode addNode(UpdateOperation upd, QName nodeName, QName nodeTypeName)
-        NodeTypeImpl nodeType = ntMgr.getNodeType(nodeTypeName);
-        NodeDefImpl def;
-        try {
-            def = getApplicableChildNodeDef(name, nodeType == null ? null : nodeType.getQName());
-        } catch (RepositoryException re) {
-            // hack, use nt:unstructured as parent
-            try {
-                NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
-                EffectiveNodeType ent = ntReg.getEffectiveNodeType(new QName[]{NodeTypeRegistry.NT_UNSTRUCTURED});
-                ChildNodeDef cnd = ent.getApplicableChildNodeDef(name, nodeTypeName);
-                def = ntMgr.getNodeDef(new NodeDefId(cnd));
-            } catch (NodeTypeConflictException e) {
-                String msg = "no definition found in parent node's node type for new node";
-                throw new ConstraintViolationException(msg, re);
-            }
-        }
-
-        if (nodeType == null) {
-            // use default node type
-            nodeType = (NodeTypeImpl) def.getDefaultPrimaryType();
-        }
-        return createChildNode(nodeName, def, nodeType, null);
+        return createChildNode(upd, nodeName, nodeTypeName, null);
-     * @param def
-     * @param nodeType
-     * @throws RepositoryException
-    private PersistentNode createChildNode(QName name, NodeDefImpl def,
-                                           NodeTypeImpl nodeType, String uuid)
-            throws RepositoryException {
+    private PersistentNode createChildNode(UpdateOperation upd, QName name, QName nodeTypeName, String uuid) {
-        NodeState state = null;
-        //@todo create node state inside an update
-        state = new NodeState(uuid, nodeType.getQName(), parentUUID,
-                NodeState.STATUS_NEW, false);
-        state.setDefinitionId(new NodeDefId(def.unwrap()));
+        NodeState state = upd.createNew(uuid, nodeTypeName, parentUUID);
+        state.setDefinitionId(NodeDefId.valueOf("0"));
-        PersistentNode node = new PersistentNode(stateMgr, ntMgr, state);
+        PersistentNode node = new PersistentNode(stateMgr, state);
-        nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-
-        // add 'auto-create' properties defined in node type
-        PropertyDef[] pda = nodeType.getAutoCreatePropertyDefs();
-        for (int i = 0; i < pda.length; i++) {
-            PropertyDefImpl pd = (PropertyDefImpl) pda[i];
-            node.getOrCreatePropertyState(pd.getQName(), pd.getRequiredType(), pd.isMultiple());
+        if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
+            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-
-        // recursively add 'auto-create' child nodes defined in node type
-        NodeDef[] nda = nodeType.getAutoCreateNodeDefs();
-        for (int i = 0; i < nda.length; i++) {
-            NodeDefImpl nd = (NodeDefImpl) nda[i];
-            node.createChildNode(nd.getQName(), nd, (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
-        }
-
-        // store primary type
-        node.setPropertyValue(ItemImpl.PROPNAME_PRIMARYTYPE, InternalValue.create(nodeType.getQName()));
-                children[i] = new PersistentNode(stateMgr, ntMgr, state);
+                children[i] = new PersistentNode(stateMgr, state);
-    protected void store() throws RepositoryException {
+    protected void store(UpdateOperation upd) throws RepositoryException {
-            UpdateOperation update = stateMgr.beginUpdate();
-            store(nodeState, update);
-            update.end();
+            store(upd, nodeState);
-    private void store(NodeState state, UpdateOperation update)
+    private void store(UpdateOperation update, NodeState state)
-        if (state.isTransient()) {
+        if (state.getStatus()!=ItemState.STATUS_EXISTING) {
-                if (pstate.isTransient()) {
+                if (pstate.getStatus()!=ItemState.STATUS_EXISTING) {
-                store(nstate, update);
+                store(update, nstate);
-        if (state.isTransient()) {
+        if (state.getStatus()!=ItemState.STATUS_EXISTING) {
-                if (pstate.isTransient()) {
+                if (pstate.getStatus()!=ItemState.STATUS_EXISTING) {
-    protected void copyFrom(PropertyImpl prop) throws RepositoryException {
+    protected void copyFrom(UpdateOperation upd, PropertyImpl prop) throws RepositoryException {
-            setPropertyValues(prop.getQName(), type, values);
+            setPropertyValues(upd, prop.getQName(), type, values);
-            setPropertyValue(prop.getQName(), prop.internalGetValue());
+            setPropertyValue(upd, prop.getQName(), prop.internalGetValue());
-    /**
-     * sets the mixing node type and adds the respective property
-     *
-     * @param mixins
-     * @throws RepositoryException
-     */
-    protected void setMixinNodeTypes(QName[] mixins) throws RepositoryException {
-        HashSet set = new HashSet();
-        InternalValue[] values = new InternalValue[mixins.length];
-        for (int i = 0; i < mixins.length; i++) {
-            set.add(mixins[i]);
-            values[i] = InternalValue.create(mixins[i]);
-        }
-        nodeState.setMixinTypeNames(set);
-        setPropertyValues(ItemImpl.PROPNAME_MIXINTYPES, PropertyType.NAME, values);
-    }

INS31 MOV44 MOV44 INS44 INS44 MOV43 INS44 INS44 INS44 MOV29 MOV83 INS39 INS42 MOV44 MOV44 MOV44 MOV43 INS8 INS44 INS8 MOV44 INS44 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 UPD43 UPD42 INS54 UPD43 MOV43 UPD42 MOV42 MOV41 UPD43 UPD42 INS60 INS25 INS43 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS8 MOV12 UPD42 UPD42 MOV43 INS59 MOV43 INS27 MOV8 INS42 INS27 INS27 INS42 INS42 INS25 INS42 MOV60 INS25 INS42 UPD42 MOV42 INS32 INS32 INS32 INS40 INS32 INS40 INS32 INS40 INS42 MOV43 INS27 INS8 UPD43 INS27 MOV8 INS8 UPD43 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS25 INS25 UPD42 INS32 INS32 INS40 MOV21 INS40 UPD42 INS42 INS33 INS60 MOV21 INS21 MOV21 MOV41 UPD42 MOV43 UPD42 MOV43 UPD42 UPD42 INS42 INS42 INS27 INS8 INS27 INS8 UPD42 UPD42 UPD42 MOV32 INS42 UPD42 MOV42 INS45 INS42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 INS43 INS59 MOV32 UPD42 INS27 INS27 INS32 INS40 MOV21 INS32 INS40 INS21 UPD42 MOV42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 INS32 INS40 UPD42 UPD42 INS32 INS40 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS14 MOV43 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS40 UPD43 MOV43 MOV32 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL40 DEL9 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL14 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL32 DEL41 DEL8 DEL54 DEL8 DEL31 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL83 DEL39 DEL42 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL32 DEL16 DEL32 DEL7 DEL21 DEL8 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL4 DEL3 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL40 DEL9 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL33 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL32 DEL32 DEL32 DEL32 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL40 DEL42 DEL32 DEL21 DEL8 DEL31