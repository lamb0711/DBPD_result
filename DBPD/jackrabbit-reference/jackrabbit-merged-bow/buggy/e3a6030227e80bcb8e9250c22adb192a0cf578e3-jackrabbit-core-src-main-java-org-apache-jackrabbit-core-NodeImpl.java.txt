JCR-2130: Node.removeMixin() should not remove valid items


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@783412 13f79535-47bb-0310-9956-ffa450edef68

+        // TODO JCR-2116: Built-In Node Types; => adapt to JCR 2.0 built-in node types (mix:created, etc)
-        Set remainingMixins = new HashSet(state.getMixinTypeNames());
+        Set remainingMixins = new HashSet<Name>(state.getMixinTypeNames());
-        EffectiveNodeType entRemaining;
+        EffectiveNodeType entResulting;
-            entRemaining = ntReg.getEffectiveNodeType(
+            entResulting = ntReg.getEffectiveNodeType(
-                && !entRemaining.includesNodeType(NameConstants.MIX_REFERENCEABLE)) {
+                && !entResulting.includesNodeType(NameConstants.MIX_REFERENCEABLE)) {
-                && !entRemaining.includesNodeType(NameConstants.MIX_LOCKABLE)
+                && !entResulting.includesNodeType(NameConstants.MIX_LOCKABLE)
-        // walk through properties and child nodes and remove those that have
-        // been defined by the specified mixin type
+        // walk through properties and child nodes and remove those that aren't
+        // accomodated by the resulting new effective node type (see JCR-2130)
-            HashSet set = new HashSet(thisState.getPropertyNames());
+            HashSet set = new HashSet<Name>(thisState.getPropertyNames());
-                if (!entRemaining.includesNodeType(declaringNT.getQName())) {
-                    // the remaining effective node type doesn't include the
-                    // node type that declared this property, it is thus safe
-                    // to remove it
-                    removeChildProperty(propName);
+                if (!entResulting.includesNodeType(declaringNT.getQName())) {
+                    // the resulting effective node type doesn't include the
+                    // node type that declared this property
+
+                    // try to find new applicable definition first and
+                    // redefine property if possible (JCR-2130)
+                    try {
+                        PropertyImpl prop = (PropertyImpl) itemMgr.getItem(propState.getId());
+                        if (prop.getDefinition().isProtected()) {
+                            // remove 'orphaned' protected properties immediately
+                            removeChildProperty(propName);
+                            continue;
+                        }
+                        PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
+                                propName, propState.getType(),
+                                propState.isMultiValued(), false);
+                        if (pdi.getRequiredType() != PropertyType.UNDEFINED
+                                && pdi.getRequiredType() != propState.getType()) {
+                            // value conversion required
+                            if (propState.isMultiValued()) {
+                                // convert value
+                                Value[] values =
+                                        ValueHelper.convert(
+                                                prop.getValues(),
+                                                pdi.getRequiredType(),
+                                                session.getValueFactory());
+                                // redefine property
+                                prop.onRedefine(pdi.unwrap().getId());
+                                // set converted values
+                                prop.setValue(values);
+                            } else {
+                                // convert value
+                                Value value =
+                                        ValueHelper.convert(
+                                                prop.getValue(),
+                                                pdi.getRequiredType(),
+                                                session.getValueFactory());
+                                // redefine property
+                                prop.onRedefine(pdi.unwrap().getId());
+                                // set converted values
+                                prop.setValue(value);
+                            }
+                        } else {
+                            // redefine property
+                            prop.onRedefine(pdi.unwrap().getId());
+                        }
+                    } catch (ValueFormatException vfe) {
+                        // value conversion failed, remove it
+                        removeChildProperty(propName);
+                    } catch (ConstraintViolationException cve) {
+                        // no suitable definition found for this property,
+                        // remove it
+                        removeChildProperty(propName);
+                    }
-            ArrayList list = new ArrayList(thisState.getChildNodeEntries());
+            ArrayList list = new ArrayList<ChildNodeEntry>(thisState.getChildNodeEntries());
-                if (!entRemaining.includesNodeType(declaringNT.getQName())) {
-                    // the remaining effective node type doesn't include the
-                    // node type that declared this child node, it is thus safe
-                    // to remove it
-                    removeChildNode(entry.getName(), entry.getIndex());
+                if (!entResulting.includesNodeType(declaringNT.getQName())) {
+                    // the resulting effective node type doesn't include the
+                    // node type that declared this child node
+
+                    try {
+                        NodeImpl node = (NodeImpl) itemMgr.getItem(nodeState.getId());
+                        if (node.getDefinition().isProtected()) {
+                            // remove 'orphaned' protected child node immediately
+                            removeChildNode(entry.getName(), entry.getIndex());
+                            continue;
+                        }
+                        NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
+                                entry.getName(),
+                                nodeState.getNodeTypeName());
+                        // redefine node
+                        node.onRedefine(ndi.unwrap().getId());
+                    } catch (ConstraintViolationException cve) {
+                        // no suitable definition found for this child node,
+                        // remove it
+                        removeChildNode(entry.getName(), entry.getIndex());
+                    }
+                        if (prop.getDefinition().isProtected()) {
+                            // remove 'orphaned' protected properties immediately
+                            removeChildProperty(propName);
+                            continue;
+                        }
+                        NodeImpl node = (NodeImpl) itemMgr.getItem(nodeState.getId());
+                        if (node.getDefinition().isProtected()) {
+                            // remove 'orphaned' protected child node immediately
+                            removeChildNode(entry.getName(), entry.getIndex());
+                            continue;
+                        }
-                        NodeImpl node = (NodeImpl) itemMgr.getItem(nodeState.getId());

UPD42 INS74 INS8 MOV43 INS43 UPD42 UPD42 UPD42 MOV60 MOV60 MOV60 MOV60 INS25 INS25 INS42 INS74 MOV38 INS8 INS74 MOV38 INS8 INS43 INS43 INS54 INS43 INS43 INS54 MOV42 INS42 UPD42 INS8 INS12 INS12 MOV42 INS42 UPD42 INS8 INS12 MOV60 INS60 INS25 INS60 INS25 INS44 INS8 INS44 INS8 INS60 MOV25 INS60 INS21 INS44 INS8 INS25 INS25 INS43 INS59 INS32 MOV8 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS42 INS21 INS32 INS8 INS32 INS8 INS42 INS42 INS11 INS32 INS42 INS18 INS42 INS42 INS32 INS27 INS27 MOV25 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS11 INS32 INS42 INS18 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS21 INS18 INS32 INS42 INS21 INS18 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS9 INS32 INS40 INS32 INS32 INS32 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS5 INS59 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL8 DEL43