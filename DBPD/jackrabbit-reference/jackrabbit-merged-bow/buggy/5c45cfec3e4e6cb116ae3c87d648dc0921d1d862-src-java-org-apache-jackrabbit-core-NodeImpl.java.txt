- use seperate persistence manager for versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@125924 13f79535-47bb-0310-9956-ffa450edef68

+        // check if versionable
+        checkVersionable();
+
+        // check if checked out
-            String msg = "Unable to checkin node. Is not checked-out. " + safeGetJCRPath();
+            String msg = safeGetJCRPath() + ": Node is already checked-in. ignoring.";
-            throw new VersionException(msg);
+            return getBaseVersion();
+
-            throw new IllegalStateException(msg);
+            throw new InvalidItemStateException(msg);
+
+        // check if not merge failed
+        if (hasProperty(ItemImpl.PROPNAME_MERGE_FAILED) && getProperty(ItemImpl.PROPNAME_MERGE_FAILED).getValues().length>0) {
+            String msg = "Unable to checkin node. Clear 'jcr:mergeFailed' first. " + safeGetJCRPath();
+            log.debug(msg);
+            throw new VersionException(msg);
+        }
+
+        // check if versionable
+        checkVersionable();
+
+        // check if already checked out
-            String msg = "Unable to checkout node. Is not checked-in. " + safeGetJCRPath();
+            String msg = safeGetJCRPath() + ": Node is already checked-out. ignoring.";
-            throw new VersionException(msg);
+            return;
+
+        // check transient state
+        if (isModified()) {
+            String msg = "Unable to checkout node. Not allowed on transient node. " + safeGetJCRPath();
+            log.debug(msg);
+            throw new InvalidItemStateException(msg);
+        }
+
-            if (node.isRepositoryRoot() || !inherit) {
+            if (!inherit || node.isRepositoryRoot()) {
+        boolean removeExisting = true;
-        if (!isCheckedOut()) {
-            String msg = "Unable to restore version. Node is not checked-out " + safeGetJCRPath();
-            log.debug(msg);
-            throw new VersionException(msg);
+        // check if transient
+        if (session.hasPendingChanges()) {
+            String msg = "Unable to restore version. Session has pending changes.";
+            log.error(msg);
+            throw new InvalidItemStateException(msg);
-        internalRestore(getVersionHistory().getVersion(versionName), gvs);
+        internalRestore(getVersionHistory().getVersion(versionName), gvs, removeExisting);
+        boolean removeExisting = true;
-        if (!isCheckedOut()) {
-            String msg = "Unable to restore version. Node is not checked-out " + safeGetJCRPath();
-            log.debug(msg);
-            throw new VersionException(msg);
+        // check if transient
+        if (session.hasPendingChanges()) {
+            String msg = "Unable to restore version. Session has pending changes.";
+            log.error(msg);
+            throw new InvalidItemStateException(msg);
-        internalRestore(version, new GenericVersionSelector(version.getCreated()));
+        internalRestore(version, new GenericVersionSelector(version.getCreated()), removeExisting);
+        boolean removeExisting = true;
+
+        // check if transient
+        if (session.hasPendingChanges()) {
+            String msg = "Unable to restore version. Session has pending changes.";
+            log.error(msg);
+            throw new InvalidItemStateException(msg);
+        }
+        } else {
+            // recreate node from frozen state
+            NodeImpl node = addNode(relPath, ((VersionImpl) version).getFrozenNode());
+            node.internalRestore(version, new GenericVersionSelector(version.getCreated()), removeExisting);
+            node.getParent().save();
-
-        // recreate node from frozen state
-        NodeImpl node = addNode(relPath, ((VersionImpl) version).getFrozenNode());
-        if (!node.isCheckedOut()) {
-            String msg = "Unable to restore version. Node is not checked-out " + node.safeGetJCRPath();
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        node.internalRestore(version, new GenericVersionSelector(version.getCreated()));
-        node.getParent().save();
+        boolean removeExisting = false;
-        if (!isCheckedOut()) {
-            String msg = "Unable to restore version. Node is not checked-out " + safeGetJCRPath();
-            log.debug(msg);
-            throw new VersionException(msg);
+        // check if transient
+        if (session.hasPendingChanges()) {
+            String msg = "Unable to restore version. Session has pending changes.";
+            log.error(msg);
+            throw new InvalidItemStateException(msg);
-        internalRestore(v, new GenericVersionSelector(versionLabel));
+        internalRestore(v, new GenericVersionSelector(versionLabel), removeExisting);
-    private void internalRestore(Version version, VersionSelector vsel)
+    private void internalRestore(Version version, VersionSelector vsel, boolean removeExisting)
-        internalRestore(((VersionImpl) version).getInternalVersion(), vsel);
+        internalRestore(((VersionImpl) version).getInternalVersion(), vsel, removeExisting);
+    }
+
+    /**
+     * Checks if any frozen uuid in the given frozen node or its descendants
+     * collides with the one in the workspace. if 'removeExisting' is true,
+     * collisions will be removed, otherwise an ItemExistsException is thrown.
+     * If a frozen version history is already restored outside this nodes
+     * subtree, a exception is thrown, too, if the removeExisting is true.
+     * @param f
+     * @param removeExisting
+     * @throws RepositoryException
+     */
+    private void checkUUIDCollisions(InternalFrozenNode f, boolean removeExisting)
+            throws RepositoryException {
+
+        if (itemMgr.itemExists(new NodeId(f.getFrozenUUID()))) {
+            NodeImpl node = (NodeImpl) session.getNodeByUUID(f.getFrozenUUID());
+            if (removeExisting) {
+                node.remove();
+            } else {
+                throw new ItemExistsException("Unable to restore. UUID collides with " + node.safeGetJCRPath());
+            }
+        }
+        InternalFreeze[] fs = f.getFrozenChildNodes();
+        for (int i=0; i<fs.length; i++) {
+            if (fs[i] instanceof InternalFrozenNode) {
+                checkUUIDCollisions((InternalFrozenNode) fs[i], removeExisting);
+            } else if (!removeExisting) {
+                InternalFrozenVersionHistory fh = (InternalFrozenVersionHistory) fs[i];
+                VersionHistory history = (VersionHistory) session.getNodeByUUID(fh.getVersionHistoryId());
+                String nodeId = history.getName(); // this is implementation detail!
+
+                // check if representing vh already exists somewhere
+                if (itemMgr.itemExists(new NodeId(nodeId))) {
+                    NodeImpl n = (NodeImpl) session.getNodeByUUID(nodeId);
+                    try {
+                        if (!n.getPrimaryPath().isDescendantOf(getPrimaryPath())) {
+                            throw new ItemExistsException("Unable to restore. Same node already restored at " + n.safeGetJCRPath());
+                        }
+                    } catch (MalformedPathException e) {
+                        throw new RepositoryException(e);
+                    }
+                }
+            }
+        }
-     * @throws UnsupportedRepositoryOperationException
+     * @param removeExisting
-    private void internalRestore(InternalVersion version, VersionSelector vsel)
-            throws UnsupportedRepositoryOperationException, RepositoryException {
+    private void internalRestore(InternalVersion version, VersionSelector vsel, boolean removeExisting)
+            throws RepositoryException {
+
+        // first check, if any uuid conflicts would occurr
+        checkUUIDCollisions(version.getFrozenNode(), removeExisting);
+
+        // set jcr:isCheckedOut property to true, in order to avoid any conflicts
+        internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(true));
-        restoreFrozenState(version.getFrozenNode(), vsel);
+        restoreFrozenState(version.getFrozenNode(), vsel, removeExisting);
-    void restoreFrozenState(InternalFrozenNode freeze, VersionSelector vsel)
+    void restoreFrozenState(InternalFrozenNode freeze, VersionSelector vsel, boolean removeExisting)
-            if (prop.getValues().length == 1) {
-                try {
-                    internalSetProperty(props[i].getName(), prop.getValues()[0]);
-                    continue;
-                } catch (RepositoryException e) {
-                    // ignore and try multiple below
-                }
+            if (prop.isMultiValued()) {
+                internalSetProperty(props[i].getName(), prop.getValues());
+            } else {
+                internalSetProperty(props[i].getName(), prop.getValues()[0]);
-            internalSetProperty(props[i].getName(), prop.getValues());
+
+        // first delete all non frozen version histories
+        NodeIterator iter = getNodes();
+        while (iter.hasNext()) {
+            NodeImpl n = (NodeImpl) iter.nextNode();
+            // this is a bit lousy
+            boolean found = false;
+            for (int i=0; i<frozenNodes.length; i++) {
+                InternalFreeze child = frozenNodes[i];
+                if (child instanceof InternalFrozenVersionHistory) {
+                    if (n.internalGetUUID().equals(child.getId())) {
+                        found = true;
+                        break;
+                    }
+                }
+            }
+            if (!found) {
+                n.remove();
+            }
+        }
-                // if frozen node exist, replace
-                // todo: make work for same name siblings
-                if (hasNode(f.getName())) {
-                    getNode(f.getName()).remove();
-                }
-                n.restoreFrozenState(f, vsel);
+                n.restoreFrozenState(f, vsel, removeExisting);
-                // check if child already exists
-                if (hasNode(child.getName())) {
-                    // do nothing
+                InternalFrozenVersionHistory f = (InternalFrozenVersionHistory) child;
+                VersionHistory history = (VersionHistory) session.getNodeByUUID(f.getVersionHistoryId());
+                String nodeId = history.getName(); // this is implementation detail!
+
+                // check if representing vh already exists somewhere
+                if (itemMgr.itemExists(new NodeId(nodeId))) {
+                    NodeImpl n = (NodeImpl) session.getNodeByUUID(nodeId);
+                    if (hasNode(n.getQName())) {
+                        // so order at end
+                        orderBefore(n.getName(), "");
+                    } else {
+                        session.move(n.getPath(), getPath()+ "/" + n.getName());
+                    }
-                    VersionHistory history = (VersionHistory) session.getNodeByUUID(((InternalFrozenVersionHistory) child).getVersionHistoryId());
-                    node.internalRestore(v, vsel);
+                    node.internalRestore(v, vsel, removeExisting);

INS31 MOV25 MOV21 MOV21 MOV21 MOV21 MOV21 INS8 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS44 INS44 INS21 INS25 INS21 INS25 INS60 INS60 INS60 INS25 INS25 INS60 INS39 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS42 INS25 INS60 INS24 UPD65 INS39 INS42 INS21 INS21 INS39 INS42 INS60 INS61 INS32 MOV38 INS8 INS27 INS32 MOV32 INS8 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS8 MOV32 MOV8 MOV8 INS39 INS59 INS32 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS8 INS5 INS59 INS58 INS27 INS37 INS8 UPD42 INS32 INS32 INS43 INS59 INS32 INS8 INS42 INS60 MOV21 INS41 INS32 INS27 INS21 INS42 INS60 MOV21 INS41 INS42 INS21 INS42 INS9 UPD42 MOV42 INS42 INS42 INS42 INS9 UPD42 MOV42 INS42 INS42 INS42 INS9 INS42 INS42 INS60 INS21 INS53 INS42 INS9 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS14 INS60 INS25 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS25 UPD42 UPD42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS24 INS25 MOV43 INS59 INS32 INS42 INS40 INS22 INS34 INS43 INS32 MOV43 INS59 INS43 INS32 MOV32 INS43 MOV43 INS59 INS32 INS14 MOV43 INS43 INS32 INS43 INS59 INS42 INS8 INS8 INS42 INS42 INS42 INS42 INS34 INS62 INS8 INS25 INS42 INS42 INS9 INS42 INS42 INS32 INS8 MOV8 INS42 INS43 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS38 INS8 INS42 INS27 INS42 UPD43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 UPD43 INS42 INS45 UPD42 UPD43 INS45 UPD42 UPD43 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS45 UPD42 UPD43 INS42 INS42 INS42 INS42 INS42 INS11 INS21 INS53 INS2 INS43 INS21 INS38 INS8 MOV42 UPD42 MOV42 MOV21 INS42 INS42 INS11 INS42 INS9 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS42 INS21 MOV32 INS45 UPD42 INS32 INS42 UPD45 MOV32 INS45 UPD45 UPD42 UPD42 UPD42 INS42 UPD42 INS43 INS32 INS32 INS14 INS42 INS42 INS42 INS32 INS42 INS60 INS60 INS60 INS25 INS43 INS32 INS42 INS34 INS43 INS59 INS62 INS8 INS32 INS60 INS60 INS60 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS43 MOV27 INS42 INS11 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS43 INS25 INS42 INS42 INS42 INS43 INS59 MOV43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS42 UPD45 INS43 INS2 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS14 INS60 INS54 INS42 INS42 INS42 INS32 INS8 INS42 INS42 MOV11 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS14 INS60 INS25 INS42 INS42 INS42 INS43 INS2 MOV43 INS32 INS42 INS42 INS43 INS42 INS43 INS59 INS8 INS12 INS32 INS42 INS32 INS21 INS10 INS43 INS32 INS42 INS42 INS43 INS42 INS43 INS59 MOV32 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS21 INS21 INS42 INS42 INS42 INS43 INS32 INS38 INS8 INS43 INS42 INS53 INS42 INS9 INS42 INS42 INS43 INS32 UPD42 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS32 INS27 INS32 INS42 INS32 INS14 MOV43 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 DEL32 DEL38 DEL45 DEL27 DEL32 DEL38 DEL45 DEL27 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL38 DEL45 DEL42 DEL32 DEL27 DEL42 DEL43 DEL18 DEL32 DEL42 DEL22 DEL34 DEL27 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL36 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60