redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.state.*;
-import org.apache.jackrabbit.core.state.xml.XMLPersistenceManager;
-import org.apache.jackrabbit.core.state.tx.TransactionManager;
-import org.apache.jackrabbit.core.state.tx.XASessionImpl;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.PMContext;
+import org.apache.jackrabbit.core.state.PersistenceManager;
+import org.apache.jackrabbit.core.state.SharedItemStateManager;
-    private static final String ROOT_NODE_UUID = "ac3b5c25-613d-4798-8494-ffbcca9c5c6c";
+    private static final String ROOT_NODE_UUID = "cafebabe-cafe-babe-cafe-babecafebabe";
-    private final TransactionManager txMgr;
-
-        // setup internal transaction manager
-        // @todo rewrite to use file system abstraction (FileSystem interface)
-        try {
-            File txRootDir = new File(repConfig.getHomeDir(), "tx");
-            txMgr = new TransactionManager(txRootDir);
-        } catch (IOException ioe) {
-            String msg = "failed to initialize internal transaction manager";
-            log.error(msg, ioe);
-            throw new RepositoryException(msg, ioe);
-        }
-
-        // todo: improve configurability
-        XMLPersistenceManager pm = new XMLPersistenceManager();
-        try {
-            pm.init(versionStore, repConfig.getHomeDir()+"/versions");
-        } catch (Exception e) {
-            throw new RepositoryException(e);
-        }
-        pvMgr = new NativePVM(pm, getNodeTypeRegistry());
+        // todo: as soon as dynamic workspaces are available, base on system ws
+        SessionImpl verSession = getSystemSession(repConfig.getDefaultWorkspaceName());
+        pvMgr = new NativePVM(verSession);
-     synchronized void createWorkspace(String workspaceName) throws RepositoryException {
+    synchronized void createWorkspace(String workspaceName) throws RepositoryException {
-    PersistentItemStateProvider getWorkspaceStateManager(String workspaceName)
+    SharedItemStateManager getWorkspaceStateManager(String workspaceName)
-    ReferenceManager getWorkspaceReferenceManager(String workspaceName)
-            throws NoSuchWorkspaceException, RepositoryException {
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
-
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getReferenceManager();
-    }
-
-            SessionImpl ses = new XASessionImpl(this, ANONYMOUS_CREDENTIALS, wspInfo.getConfig(), txMgr);
+            SessionImpl ses = new XASessionImpl(this, ANONYMOUS_CREDENTIALS, wspInfo.getConfig());
-            Session ses = new XASessionImpl(this, credentials, wspInfo.getConfig(), txMgr);
+            Session ses = new XASessionImpl(this, credentials, wspInfo.getConfig());
-        private PersistentItemStateManager itemStateMgr;
-
-        /**
-         * reference manager
-         */
-        private ReferenceManager refMgr;
+        private SharedItemStateManager itemStateMgr;
-         * Returns the reference manager for this workspace
-         *
-         * @return the reference manager for this workspace
-         * @throws RepositoryException if the reference manager could not be created
-         */
-        synchronized ReferenceManager getReferenceManager()
-                throws RepositoryException {
-            if (refMgr == null) {
-                // create reference mgr that uses this workspace's perstistence mgr
-                refMgr = new ReferenceManager(getPersistenceManager());
-            }
-            return refMgr;
-        }
-
-        /**
-        synchronized PersistentItemStateProvider getItemStateProvider()
+        synchronized SharedItemStateManager getItemStateProvider()
-                    itemStateMgr = new PersistentItemStateManager(getPersistenceManager(), rootNodeUUID, ntReg);
+                    itemStateMgr = new SharedItemStateManager(getPersistenceManager(), rootNodeUUID, ntReg);
-            // dispose reference manager
-            if (refMgr != null) {
-                //refMgr.dispose();
-                refMgr = null;
-            }
-

UPD40 UPD40 UPD40 UPD40 UPD43 UPD45 MOV60 UPD42 MOV25 UPD43 UPD43 UPD43 MOV27 INS25 UPD42 UPD42 UPD42 UPD42 INS32 MOV62 MOV8 MOV8 INS42 INS32 UPD42 MOV43 MOV42 UPD42 MOV42 MOV43 UPD42 UPD42 UPD43 MOV32 UPD42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL32 DEL45 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL25 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25