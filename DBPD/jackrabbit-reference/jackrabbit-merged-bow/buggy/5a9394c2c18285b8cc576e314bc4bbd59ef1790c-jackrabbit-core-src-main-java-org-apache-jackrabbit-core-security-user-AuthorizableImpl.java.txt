JCR-2313 - Improvements to user management (2) [work in progress] 
-> see issue for details

JCR-2333 - ItemImpl#validateTransientItems: Incomplete validation of mandatory child item
-> patch2

JCR-2195 - Provide possibility to import protected items using Session/Workspace import functionality
-> deal with reference properties
-> make import handlers configurable
-> add userimporter

JCR-171 - Make the extraction of Session UserIDs from Subjects configurable
-> extend SecurityManagerConfig and retrieve uid from principal name if configured
     class is present in the subject

JCR-2351 - Make Authorizable.setProperty more noisy in case of failure

JCR-2331 - Configurable DefaultPolicy replacing Initialization within the ACProvider
-> initial steps. remove code that relies on the default-init
-> add TODOs

JCR-2291 - Issues with compiled permissions of ACL provider
-> remove code searching for DENY-read entries in case of default initialization of ac entries

and here and there minor improvement, usage of generics etc....

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@828791 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.PropertyImpl;
+import org.apache.jackrabbit.core.PropertyImpl;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.PropertyType;
+import javax.jcr.Session;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.ItemVisitor;
+import javax.jcr.Node;
+import javax.jcr.util.TraversingItemVisitor;
-import java.util.Arrays;
+import java.util.Set;
+import java.util.HashSet;
+    private int hashCode;
-        if (!node.isNodeType(NT_REP_AUTHORIZABLE)) {
-            throw new IllegalArgumentException("Node argument of NodeType " + NT_REP_AUTHORIZABLE + " required");
-        }
-        List<Group> memberShip = new ArrayList<Group>();
+        Set<Group> memberShip = new HashSet<Group>();
-        List<Group> memberShip = new ArrayList<Group>();
+        Set<Group> memberShip = new HashSet<Group>();
+            // check if the property has already been created as multi valued
+            // property before -> in this case remove in order to avoid valueformatex.
+            if (node.hasProperty(name)) {
+                Property p = node.getProperty(name);
+                if (p.isMultiple()) {
+                    p.remove();
+                }
+            }
-            if (!userManager.batchModus) {
+            if (userManager.isAutoSave()) {
-            log.warn("Failed to set Property " + name + " for Authorizable " + getID());
+            log.warn("Failed to set Property " + name + " for " + this, e);
+            // check if the property has already been created as single valued
+            // property before -> in this case remove in order to avoid valueformatex.
+            if (node.hasProperty(name)) {
+                Property p = node.getProperty(name);
+                if (!p.isMultiple()) {
+                    p.remove();
+                }
+            }
-            if (!userManager.batchModus) {
+            if (userManager.isAutoSave()) {
-            log.warn("Failed to set Property " + name + " for Authorizable " + getID());
+            log.warn("Failed to set Property " + name + " for " + this, e);
-                if (!userManager.batchModus) {
+                if (userManager.isAutoSave()) {
-            log.warn("Failed to remove Property " + name + " from Authorizable " + getID());
+            log.warn("Failed to remove Property " + name + " from " + this, e);
-        userManager.removeProtectedItem(node, node.getParent());
+        Session s = getSession();
+        node.remove();
+        if (userManager.isAutoSave()) {
+            s.save();
+        }
+    }
+
+    //-------------------------------------------------------------< Object >---
+    @Override
+    public int hashCode() {
+        if (hashCode == 0) {
+            try {
+                StringBuilder sb = new StringBuilder();
+                sb.append(isGroup() ? "group:" : "user:");
+                sb.append(getSession().getWorkspace().getName());
+                sb.append(":");
+                sb.append(node.getIdentifier());
+                hashCode = sb.toString().hashCode();
+            } catch (RepositoryException e) {
+            }
+        }
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (obj instanceof AuthorizableImpl) {
+            AuthorizableImpl otherAuth = (AuthorizableImpl) obj;
+            try {
+                return isGroup() == otherAuth.isGroup() && node.isSame(otherAuth.node);
+            } catch (RepositoryException e) {
+                // should not occur -> return false in this case.
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public String toString() {
+        try {
+            String typeStr = (isGroup()) ? "Group '" : "User '";
+            return new StringBuilder().append(typeStr).append(getID()).append("'").toString();
+        } catch (RepositoryException e) {
+            return super.toString();
+        }
-    boolean addToGroup(GroupImpl group) throws RepositoryException {
-        try {
-            Value[] values;
-            Value added = getSession().getValueFactory().createValue(group.getNode(), true);
-            NodeImpl node = getNode();
-            if (node.hasProperty(P_GROUPS)) {
-                Value[] old = node.getProperty(P_GROUPS).getValues();
-                values = new Value[old.length + 1];
-                System.arraycopy(old, 0, values, 0, old.length);
-            } else {
-                values = new Value[1];
-            }
-            values[values.length - 1] = added;
-            userManager.setProtectedProperty(node, P_GROUPS, values, PropertyType.WEAKREFERENCE);
-            return true;
-        } catch (RepositoryException e) {
-            // revert all pending changes and rethrow.
-            getSession().refresh(false);
-            throw e;
-        }
-    }
-
-    boolean removeFromGroup(GroupImpl group) throws RepositoryException {
-        NodeImpl node = getNode();
-        String message = "Authorizable " + getID() + " is not member of " + group.getID();
-        if (!node.hasProperty(P_GROUPS)) {
-            log.debug(message);
-            return false;
-        }
-
-        Value toRemove = getSession().getValueFactory().createValue(group.getNode(), true);
-        PropertyImpl property = node.getProperty(P_GROUPS);
-        List<Value> valList = new ArrayList<Value>(Arrays.asList(property.getValues()));
-        if (valList.remove(toRemove)) {
-            try {
-                if (valList.isEmpty()) {
-                    userManager.removeProtectedItem(property, node);
-                } else {
-                    Value[] values = valList.toArray(new Value[valList.size()]);
-                    userManager.setProtectedProperty(node, P_GROUPS, values, PropertyType.WEAKREFERENCE);
+    private void collectMembership(final Set<Group> groups, boolean includeIndirect) throws RepositoryException {
+        PropertyIterator refs = getMembershipReferences();
+        if (refs != null) {
+            while (refs.hasNext()) {
+                try {
+                    NodeImpl n = (NodeImpl) refs.nextProperty().getParent();
+                    if (n.isNodeType(NT_REP_GROUP)) {
+                        Group group = userManager.createGroup(n);
+                        // only retrieve indirect membership if the group is not
+                        // yet present (detected eventual circular membership).
+                        if (groups.add(group) && includeIndirect) {
+                            ((AuthorizableImpl) group).collectMembership(groups, true);
+                        }
+                    } else {
+                        // weak-ref property 'rep:members' that doesn't reside under an
+                        // group node -> doesn't represent a valid group member.
+                        log.debug("Invalid member reference to '" + this + "' -> Not included in membership set.");
+                    }
+                } catch (ItemNotFoundException e) {
+                    // group node doesn't exist  -> -> ignore exception
+                    // and skip this reference from membership list.
+                } catch (AccessDeniedException e) {
+                    // not allowed to see the group node -> ignore exception
+                    // and skip this reference from membership list.
-                return true;
-            } catch (RepositoryException e) {
-                // modification failed -> revert all pending changes.
-                node.refresh(false);
-                throw e;
-            // nothing changed
-            log.debug(message);
-            return false;
+            // workaround for failure of Node#getWeakReferences
+            // traverse the tree below groups-path and collect membership manually.
+            log.info("Traversing groups tree to collect membership.");
+            ItemVisitor visitor = new TraversingItemVisitor.Default() {
+                @Override
+                protected void entering(Property property, int level) throws RepositoryException {
+                    PropertyImpl pImpl = (PropertyImpl) property;
+                    NodeImpl n = (NodeImpl) pImpl.getParent();
+                    if (P_MEMBERS.equals(pImpl.getQName()) && n.isNodeType(NT_REP_GROUP)) {
+                        for (Value value : property.getValues()) {
+                            if (value.getString().equals(node.getIdentifier())) {
+                                Group gr = (Group) userManager.getAuthorizable(n);
+                                groups.add(gr);
+                            }
+                        }
+                    }
+                }
+            };
+            Node groupsNode = getSession().getNode(userManager.getGroupsPath());
+            visitor.visit(groupsNode);
-    private void collectMembership(List<Group> groups, boolean includedIndirect) throws RepositoryException {
-        NodeImpl node = getNode();
-        if (!node.hasProperty(P_GROUPS)) {
-            return;
+    /**
+     * @return the iterator returned by {@link Node#getWeakReferences(String)}
+     * or <code>null</code> if the method call fails with <code>RepositoryException</code>.
+     * See fallback scenario above.
+     */
+    private PropertyIterator getMembershipReferences() {
+        PropertyIterator refs = null;
+        try {
+            refs = node.getWeakReferences(getSession().getJCRName(P_MEMBERS));
+        } catch (RepositoryException e) {
+            log.error("Failed to retrieve membership references of " + this + ".", e);
-        Value[] refs = node.getProperty(P_GROUPS).getValues();
-        for (Value ref : refs) {
-            try {
-                NodeImpl groupNode = (NodeImpl) getSession().getNodeByUUID(ref.getString());
-                Group group = GroupImpl.create(groupNode, userManager);
-                if (groups.add(group) && includedIndirect) {
-                    ((AuthorizableImpl) group).collectMembership(groups, true);
-                }
-            } catch (ItemNotFoundException e) {
-                // groupNode doesn't exist any more
-                log.warn("Group node referenced by " + getID() + " doesn't exist anymore -> Ignored from membership list.");
-                // TODO: possibly clean up list of group memberships
-            }
-        }
+        return refs;
-     * <ul>
-     * <li>rep:userId</li>
-     * <li>rep:referees</li>
-     * <li>rep:groups</li>
+     * <li>rep:members</li>
-                || P_GROUPS.equals(pName)
+                || P_MEMBERS.equals(pName)
-            throw new ConstraintViolationException("Attempt to modify protected property " + propertyName + " of an Authorizable.");
+            throw new ConstraintViolationException("Attempt to modify protected property " + propertyName + " of " + this);

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 UPD40 INS40 INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS8 MOV8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS83 UPD39 UPD42 MOV44 MOV43 INS29 INS83 INS43 INS42 INS8 INS42 MOV21 INS54 MOV21 MOV54 INS60 INS21 INS25 INS42 INS25 INS41 INS42 INS43 INS42 INS25 MOV41 INS42 INS42 INS54 INS83 UPD74 INS39 INS42 INS25 INS65 INS42 MOV60 INS54 INS41 UPD74 UPD74 INS8 INS8 INS12 INS8 INS43 INS59 INS32 INS32 INS8 INS27 INS8 INS42 INS42 INS62 INS8 INS8 INS12 UPD43 INS43 INS27 INS8 INS8 INS66 INS65 INS66 INS66 INS43 INS8 INS12 INS42 UPD66 UPD43 UPD43 INS25 MOV21 MOV25 INS25 MOV21 INS25 MOV44 INS8 INS25 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS21 INS42 INS34 INS54 INS42 INS43 INS60 INS54 INS60 INS41 MOV44 INS8 UPD42 INS42 UPD42 INS42 INS33 INS61 INS21 INS60 INS60 MOV21 INS68 UPD42 MOV42 INS33 INS21 INS44 MOV8 UPD42 UPD74 UPD42 UPD74 INS32 INS8 INS32 INS32 INS8 INS32 MOV8 INS21 MOV21 MOV53 MOV32 INS8 MOV8 MOV42 INS32 INS8 INS12 INS42 INS43 INS59 INS8 INS12 MOV43 INS59 INS32 INS41 UPD42 INS32 INS8 INS32 INS43 INS59 INS43 INS59 INS42 INS42 INS69 INS7 UPD43 MOV43 UPD42 MOV42 UPD42 UPD43 UPD43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS32 MOV60 MOV25 MOV25 MOV41 INS42 INS42 MOV60 INS21 INS21 INS21 INS21 MOV21 MOV44 INS8 UPD42 MOV42 INS42 INS11 INS41 INS44 INS8 INS42 INS16 INS32 INS42 INS48 INS42 INS42 INS54 INS42 UPD42 MOV42 INS45 INS42 INS42 INS14 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS43 INS42 MOV32 MOV32 UPD42 UPD42 UPD42 INS43 INS59 INS32 INS8 INS42 INS43 INS59 INS38 INS8 INS42 INS42 INS27 INS42 INS32 INS42 INS43 INS32 INS32 INS32 INS32 INS43 INS42 INS27 INS43 INS42 INS36 INS45 INS45 INS32 INS42 INS45 INS42 INS8 INS12 INS12 INS43 INS1 MOV32 INS42 INS32 INS42 UPD42 UPD42 MOV42 UPD42 INS42 UPD45 INS52 INS42 INS42 INS32 INS42 INS42 INS21 UPD45 INS52 INS42 INS42 INS32 INS32 INS21 INS45 INS42 INS45 INS52 INS42 INS42 UPD45 UPD45 INS52 UPD42 MOV42 UPD42 INS14 INS42 INS42 INS16 INS42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS32 UPD42 INS32 INS42 INS27 INS32 INS42 INS32 MOV32 UPD42 MOV42 MOV32 MOV60 MOV25 MOV44 INS8 INS44 INS8 INS40 INS31 INS42 INS42 UPD42 INS42 UPD45 INS52 UPD45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS45 INS45 UPD42 MOV42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS32 INS42 INS42 INS40 INS42 INS14 INS42 INS42 MOV43 INS32 MOV8 INS43 INS42 INS78 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS43 UPD42 INS11 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 UPD42 MOV42 INS42 INS43 INS42 INS39 INS42 INS60 INS60 MOV25 INS42 MOV43 INS32 INS43 MOV59 UPD42 MOV42 MOV43 INS59 MOV43 INS59 INS27 INS32 UPD42 MOV42 INS42 UPD42 INS27 INS42 INS11 INS42 INS11 INS32 INS32 INS70 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 INS45 INS52 INS45 INS43 INS42 MOV43 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS44 MOV32 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS25 MOV42 INS32 INS8 INS32 INS42 INS32 INS60 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS32 INS42 INS11 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS32 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL40 DEL38 DEL8 DEL42 DEL32 DEL8 DEL40 DEL38 DEL8 DEL42 DEL32 DEL40 DEL38 DEL25 DEL25 DEL8 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32 DEL32 DEL21 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL9 DEL42 DEL43 DEL85 DEL5 DEL40 DEL34 DEL27 DEL3 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL7 DEL21 DEL8 DEL25 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL9 DEL41 DEL8 DEL9 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL45 DEL45 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL60 DEL32 DEL38 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL32 DEL3 DEL32 DEL59 DEL60 DEL40 DEL32 DEL21 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL32 DEL9 DEL41 DEL8 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL9 DEL41 DEL8 DEL25 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL9 DEL42 DEL32 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL41 DEL8 DEL25 DEL44 DEL42 DEL12 DEL54 DEL8 DEL70 DEL8 DEL66 DEL66 DEL66