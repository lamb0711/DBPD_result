JCR-2170: Remove PropDefId and NodeDefId
- merged changes from sandbox branch

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816343 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.ItemDef;
-import org.apache.jackrabbit.core.nodetype.NodeDef;
-import org.apache.jackrabbit.core.nodetype.NodeDefId;
-import org.apache.jackrabbit.core.nodetype.NodeDefinitionImpl;
-import org.apache.jackrabbit.core.nodetype.PropDef;
-import org.apache.jackrabbit.core.nodetype.PropertyDefinitionImpl;
+import org.apache.jackrabbit.spi.QItemDefinition;
+import org.apache.jackrabbit.spi.QPropertyDefinition;
+import org.apache.jackrabbit.spi.QNodeDefinition;
+import org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl;
+import org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl;
+        List<Name> unknown = null;
+        for (Name mixinName : state.getMixinTypeNames()) {
+            if (!ntReg.isRegistered(mixinName)) {
+                if (unknown == null) {
+                    unknown = new ArrayList<Name>();
+                }
+                unknown.add(mixinName);
+                log.warn("Ignoring unknown mixin type '" + mixinName +
+                        "' of " + this);
+            }
+        }
+        if (unknown != null) {
+            // ignore unknown mixin type names
+            Set<Name> known = new HashSet<Name>(state.getMixinTypeNames());
+            known.removeAll(unknown);
+            state.setMixinTypeNames(known);
+        }
-            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
+            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def = getApplicablePropertyDefinition(
-            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
+            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def = getApplicablePropertyDefinition(
-                                                            PropertyDefinitionImpl def)
+                                                            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def)
-            PropDef propDef = def.unwrap();
+            QPropertyDefinition propDef = def.unwrap();
-            propState.setDefinitionId(propDef.getId());
-                genValues = propDef.getDefaultValues();
+                genValues = InternalValue.create(propDef.getDefaultValues());
-                                                    NodeDefinitionImpl def,
-            nodeState.setDefinitionId(def.unwrap().getId());
-            node.createChildProperty(pd.getQName(), pd.getRequiredType(), pd);
+            node.createChildProperty(pd.unwrap().getName(), pd.getRequiredType(), pd);
-            node.createChildNode(nd.getQName(), nd,
-                    (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
+            node.createChildNode(nd.unwrap().getName(), (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
-    protected void onRedefine(NodeDefId defId) throws RepositoryException {
-        NodeDefinitionImpl newDef =
-                session.getNodeTypeManager().getNodeDefinition(defId);
+    protected void onRedefine(QNodeDefinition def) throws RepositoryException {
+        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl newDef =
+                session.getNodeTypeManager().getNodeDefinition(def);
-        NodeState thisState = (NodeState) getOrCreateTransientItemState();
-        // set id of new definition
-        thisState.setDefinitionId(defId);
+        getOrCreateTransientItemState();
+        // set new definition
-            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
+            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def = getApplicablePropertyDefinition(
-    protected NodeDefinitionImpl getApplicableChildNodeDefinition(Name nodeName,
+    protected org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl getApplicableChildNodeDefinition(Name nodeName,
-        NodeDef cnd = getEffectiveNodeType().getApplicableChildNodeDef(
+        QNodeDefinition cnd = getEffectiveNodeType().getApplicableChildNodeDef(
-        return ntMgr.getNodeDefinition(cnd.getId());
+        return ntMgr.getNodeDefinition(cnd);
-    protected PropertyDefinitionImpl getApplicablePropertyDefinition(Name propertyName,
+    protected org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl getApplicablePropertyDefinition(Name propertyName,
-        PropDef pd;
+        QPropertyDefinition pd;
-        return session.getNodeTypeManager().getPropertyDefinition(pd.getId());
+        return session.getNodeTypeManager().getPropertyDefinition(pd);
-            // id of definition
-            persistentState.setDefinitionId(transientState.getDefinitionId());
-        thisState.setDefinitionId(transientState.getDefinitionId());
-                    createChildProperty(pd.getQName(), pd.getRequiredType(), pd);
+                    createChildProperty(pd.unwrap().getName(), pd.getRequiredType(), pd);
-                    createChildNode(nd.getQName(), nd, (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
+                    createChildNode(nd.unwrap().getName(), (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
-                PropertyDefinition def = ntMgr.getPropertyDefinition(propState.getDefinitionId());
+                PropertyDefinition def = itemMgr.getDefinition(propState);
-                        PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
+                        org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
-                                prop.onRedefine(pdi.unwrap().getId());
+                                prop.onRedefine(pdi.unwrap());
-                                prop.onRedefine(pdi.unwrap().getId());
+                                prop.onRedefine(pdi.unwrap());
-                            prop.onRedefine(pdi.unwrap().getId());
+                            prop.onRedefine(pdi.unwrap());
-                NodeDefinition def = ntMgr.getNodeDefinition(nodeState.getDefinitionId());
+                NodeDefinition def = itemMgr.getDefinition(nodeState);
-                        NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
+                        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
-                        node.onRedefine(ndi.unwrap().getId());
+                        node.onRedefine(ndi.unwrap());
-        NodeDefinitionImpl def;
+        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl def;
-        return createChildNode(nodeName, def, nt, id);
+        return createChildNode(nodeName, nt, id);
-        NodeDefinitionImpl def;
+        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl def;
-        NodeDefId defId;
+        QNodeDefinition nodeDef;
-            defId = parent.getApplicableChildNodeDefinition(getQName(), ntName).unwrap().getId();
+            nodeDef = parent.getApplicableChildNodeDefinition(getQName(), ntName).unwrap();
-        if (!defId.equals(state.getDefinitionId())) {
-            onRedefine(defId);
+        if (!nodeDef.equals(itemMgr.getDefinition(state).unwrap())) {
+            onRedefine(nodeDef);
-        Set<ItemDef> oldDefs = new HashSet<ItemDef>(Arrays.asList(entOld.getAllItemDefs()));
-        Set<ItemDef> newDefs = new HashSet<ItemDef>(Arrays.asList(entNew.getAllItemDefs()));
-        Set<ItemDef> allDefs = new HashSet<ItemDef>(Arrays.asList(entAll.getAllItemDefs()));
+        Set<QItemDefinition> oldDefs = new HashSet<QItemDefinition>(Arrays.asList(entOld.getAllItemDefs()));
+        Set<QItemDefinition> newDefs = new HashSet<QItemDefinition>(Arrays.asList(entNew.getAllItemDefs()));
+        Set<QItemDefinition> allDefs = new HashSet<QItemDefinition>(Arrays.asList(entAll.getAllItemDefs()));
-        Set<ItemDef> addedDefs = new HashSet<ItemDef>(newDefs);
+        Set<QItemDefinition> addedDefs = new HashSet<QItemDefinition>(newDefs);
-                if (!allDefs.contains(ntReg.getPropDef(propState.getDefinitionId()))) {
+                if (!allDefs.contains(itemMgr.getDefinition(propState).unwrap())) {
-                        PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
+                        org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
-                                prop.onRedefine(pdi.unwrap().getId());
+                                prop.onRedefine(pdi.unwrap());
-                                prop.onRedefine(pdi.unwrap().getId());
+                                prop.onRedefine(pdi.unwrap());
-                            prop.onRedefine(pdi.unwrap().getId());
+                            prop.onRedefine(pdi.unwrap());
-                if (!allDefs.contains(ntReg.getNodeDef(nodeState.getDefinitionId()))) {
+                if (!allDefs.contains(itemMgr.getDefinition(nodeState).unwrap())) {
-                        NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
+                        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
-                        node.onRedefine(ndi.unwrap().getId());
+                        node.onRedefine(ndi.unwrap());
-        for (Iterator<ItemDef> iter = addedDefs.iterator(); iter.hasNext();) {
-            ItemDef def = iter.next();
+        for (QItemDefinition def : addedDefs) {
-                    NodeDefinitionImpl ndi = ntMgr.getNodeDefinition(((NodeDef) def).getId());
-                    createChildNode(ndi.getQName(), ndi, (NodeTypeImpl) ndi.getDefaultPrimaryType(), null);
+                    NodeDefinitionImpl ndi = ntMgr.getNodeDefinition((QNodeDefinition) def);
+                    createChildNode(def.getName(), (NodeTypeImpl) ndi.getDefaultPrimaryType(), null);
-                    PropertyDefinitionImpl pdi = ntMgr.getPropertyDefinition(((PropDef) def).getId());
-                    createChildProperty(pdi.getQName(), pdi.getRequiredType(), pdi);
+                    PropertyDefinitionImpl pdi = ntMgr.getPropertyDefinition((QPropertyDefinition) def);
+                    createChildProperty(pdi.unwrap().getName(), pdi.getRequiredType(), pdi);

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 MOV60 MOV60 INS60 INS70 INS25 UPD43 UPD43 UPD42 INS40 INS40 INS70 INS74 INS59 INS44 INS32 INS8 INS27 INS8 MOV8 INS40 MOV58 MOV37 MOV58 MOV37 INS8 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD74 INS59 UPD74 MOV74 MOV59 INS74 UPD74 INS44 INS42 MOV8 INS43 INS43 INS42 INS33 INS43 INS42 INS42 INS42 INS25 INS42 INS33 INS60 INS21 INS21 MOV8 MOV60 INS21 INS40 UPD42 UPD42 MOV42 UPD42 MOV42 INS40 INS40 UPD42 UPD42 UPD43 INS42 INS14 UPD43 MOV43 INS43 UPD43 UPD42 INS43 INS42 INS42 INS42 INS42 INS38 INS8 INS74 INS59 INS32 INS32 UPD43 UPD43 INS32 UPD42 UPD43 UPD42 UPD42 UPD74 MOV74 MOV32 UPD42 INS74 INS42 UPD74 UPD42 UPD74 INS42 UPD42 MOV42 INS32 INS25 INS21 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS40 UPD43 UPD42 INS42 INS42 INS32 MOV11 INS33 INS40 UPD42 MOV32 INS32 UPD42 UPD42 UPD43 INS43 INS43 UPD43 UPD43 INS42 INS42 INS42 INS27 INS8 INS32 INS32 INS42 INS42 INS74 INS32 INS40 INS32 UPD42 INS32 INS42 MOV38 MOV38 MOV8 INS42 INS42 MOV42 UPD42 INS42 INS42 MOV42 UPD42 UPD42 MOV8 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS43 INS42 INS42 INS32 MOV42 INS42 INS42 INS42 INS60 INS7 INS45 INS42 INS45 INS52 INS42 INS42 INS42 INS42 MOV32 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 MOV43 INS59 INS42 INS14 INS32 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS42 MOV32 INS42 INS74 INS32 UPD42 MOV32 UPD42 MOV42 UPD43 UPD43 MOV32 MOV32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD43 INS8 UPD42 MOV42 UPD42 MOV42 MOV42 UPD43 MOV32 MOV32 INS11 UPD42 UPD42 INS42 INS42 INS11 UPD42 UPD42 MOV42 INS43 INS43 MOV42 INS42 UPD42 INS40 MOV21 INS40 UPD42 INS42 INS40 INS21 INS40 UPD42 INS42 UPD43 MOV43 MOV42 INS43 INS42 INS42 INS42 MOV32 MOV32 INS32 UPD42 INS42 INS21 UPD42 INS42 INS21 MOV21 INS42 INS42 INS32 INS32 INS32 MOV32 MOV32 INS42 INS42 INS42 INS42 INS32 MOV32 INS42 INS42 MOV32 UPD42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL32 DEL21 DEL8 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL11 DEL36 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24