JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.xml.DomUtil;
-import org.jdom.Element;
+import org.apache.log4j.Logger;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+import javax.jcr.PropertyType;
-    private final Element[] value;
+    private static Logger log = Logger.getLogger(ValuesProperty.class);
+
+    private final Value[] jcrValues;
-
-	Element[] propValue = new Element[values.length];
-	for (int i = 0; i < values.length; i++) {
-	    propValue[i] = new Element(XML_VALUE, ItemResourceConstants.NAMESPACE);
-	    propValue[i].addContent(ValueHelper.serialize(values[i], false));
-	}
-	value = propValue;
+	jcrValues = values;
-    public ValuesProperty(DavProperty property) {
+    public ValuesProperty(DavProperty property) throws RepositoryException {
-	Element[] elems = new Element[0];
-	if (property.getValue() instanceof List) {
+	List valueElements = new ArrayList();
+        Object propValue = property.getValue();
+        if (propValue != null) {
+            if (isValueElement(propValue)) {
+                valueElements.add(propValue);
+            } else if (propValue instanceof List) {
-	    ArrayList valueElements = new ArrayList();
-		if (el instanceof Element && XML_VALUE.equals(((Element)el).getName())) {
+                    if (isValueElement(propValue)) {
+            }
+        }
-	    elems = (Element[])valueElements.toArray(new Element[valueElements.size()]);
-	} else {
-	    new IllegalArgumentException("ValuesProperty may only be created with a property that has a list of 'value' elements as content.");
+        Element[] elems = (Element[])valueElements.toArray(new Element[valueElements.size()]);
+	jcrValues = new Value[elems.length];
+	for (int i = 0; i < elems.length; i++) {
+            String value = DomUtil.getText(elems[i]);
+	    jcrValues[i] = ValueHelper.deserialize(value, PropertyType.STRING, false);
-	// finally set the value to the DavProperty
-	value = elems;
+	}
+
+    private static boolean isValueElement(Object obj) {
+        return obj instanceof Element && XML_VALUE.equals(((Element)obj).getLocalName());
-     * @throws RepositoryException
+     * @throws ValueFormatException if convertion of the internal jcr values to
+     * the specified value type fails.
-    public Value[] getValues(int propertyType) throws ValueFormatException, RepositoryException {
-	Element[] propValue = (Element[])getValue();
-	Value[] values = new Value[propValue.length];
-	for (int i = 0; i < propValue.length; i++) {
-	    values[i] = ValueHelper.deserialize(propValue[i].getText(), propertyType, false);
+    public Value[] getValues(int propertyType) throws ValueFormatException {
+        Value[] vs = new Value[jcrValues.length];
+        for (int i = 0; i < jcrValues.length; i++) {
+            vs[i] = ValueHelper.convert(jcrValues[i], propertyType);
-	return values;
+	return jcrValues;
-     * Returns an array of {@link Element}s representing the value of this
+     * Returns an array of {@link Value}s representing the value of this
-     * @return an array of {@link Element}s
+     * @return an array of {@link Value}s
+     * @see #getValues(int)
-	return value;
+	return jcrValues;
+
+    public Element toXml(Document document) {
+        Element elem = getName().toXml(document);
+        for (int i = 0; i < jcrValues.length; i++) {
+            try {
+                DomUtil.addChildElement(elem, XML_VALUE, ItemResourceConstants.NAMESPACE, jcrValues[i].getString());
+            } catch (RepositoryException e) {
+                log.error("Unexpected Error while converting jcr value to String: " + e.getMessage());
+    }
+        }
+        return elem;
+    }
+

INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS23 INS31 INS31 INS31 UPD83 INS43 INS83 INS83 INS5 INS59 MOV29 INS83 INS42 MOV44 MOV43 MOV43 INS8 MOV43 INS83 INS83 INS39 INS42 INS44 MOV8 INS83 INS43 INS42 INS44 INS8 UPD42 MOV42 INS42 INS32 UPD43 MOV43 MOV85 UPD42 MOV42 MOV46 MOV21 MOV60 INS60 INS25 INS60 INS21 INS24 INS43 INS42 INS41 INS65 INS42 INS43 INS42 INS60 INS24 INS41 INS42 INS42 INS57 UPD42 UPD43 INS43 INS59 INS27 INS8 MOV5 INS59 INS7 MOV58 INS27 MOV37 INS8 INS42 MOV27 UPD42 INS66 INS66 MOV5 UPD42 INS68 UPD42 INS42 MOV43 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS42 INS42 UPD42 INS42 INS42 MOV32 INS42 INS33 INS25 INS42 MOV11 INS42 INS3 INS42 INS40 INS60 MOV21 UPD42 UPD40 UPD42 UPD42 INS42 INS69 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS54 INS42 INS32 INS8 MOV25 INS5 INS40 INS43 MOV59 UPD42 MOV5 UPD40 INS39 INS32 INS42 INS42 INS42 INS34 INS8 INS12 INS42 INS42 INS21 UPD43 MOV43 MOV85 INS42 INS42 INS32 INS2 INS32 UPD42 INS42 INS21 INS44 INS8 INS32 INS42 UPD42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS40 INS9 UPD42 UPD42 MOV2 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS8 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS32 MOV60 INS25 INS2 INS42 INS42 INS42 INS27 INS32 MOV8 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL42 DEL40 DEL14 DEL83 DEL42 DEL5 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL9 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL7 DEL21 DEL42 DEL43 DEL45 DEL14 DEL21 DEL8 DEL42 DEL34 DEL3 DEL42 DEL42 DEL5 DEL60 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL9