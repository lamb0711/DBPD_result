JCR-2144 InternalValue refactoring

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@784058 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.value.BLOBFileValue;
-                    BLOBFileValue blobVal = val.getBLOBFileValue();
-                    if (InternalValue.USE_DATA_STORE && dataStore != null) {
-                        if (blobVal.isSmall()) {
-                            writeSmallBinary(out, blobVal, state, i);
-                        } else {
-                            out.writeInt(BINARY_IN_DATA_STORE);
-                            try {
+                    try {
+                        long size = val.getLength();
+                        if (InternalValue.USE_DATA_STORE && dataStore != null) {
+                            int maxMemorySize = dataStore.getMinRecordLength() - 1;
+                            if (size < maxMemorySize) {
+                                writeSmallBinary(out, val, state, i);
+                            } else {
+                                out.writeInt(BINARY_IN_DATA_STORE);
-                            } catch (RepositoryException e) {
-                                String msg = "Error while storing blob. id="
-                                    + state.getId() + " idx=" + i + " size=" + val.getBLOBFileValue().getLength();
-                                log.error(msg, e);
-                                throw new IOException(msg);
+                                out.writeUTF(val.toString());
-                            out.writeUTF(val.toString());
+                            break;
-                        break;
-                    }
-                    // special handling required for binary value:
-                    // spool binary value to file in blob store
-                    long size = blobVal.getLength();
-                    if (size < 0) {
-                        log.warn("Blob has negative size. Potential loss of data. "
-                                + "id={} idx={}", state.getId(), String.valueOf(i));
-                        out.writeInt(0);
-                        values[i] = InternalValue.create(new byte[0]);
-                        blobVal.discard();
-                    } else if (size > minBlobSize) {
-                        out.writeInt(BINARY_IN_BLOB_STORE);
-                        String blobId = state.getBlobId(i);
-                        if (blobId == null) {
-                            try {
-                                InputStream in = blobVal.getStream();
+                        // special handling required for binary value:
+                        // spool binary value to file in blob store
+                        if (size < 0) {
+                            log.warn("Blob has negative size. Potential loss of data. "
+                                    + "id={} idx={}", state.getId(), String.valueOf(i));
+                            out.writeInt(0);
+                            values[i] = InternalValue.create(new byte[0]);
+                            val.discard();
+                        } else if (size > minBlobSize) {
+                            out.writeInt(BINARY_IN_BLOB_STORE);
+                            String blobId = state.getBlobId(i);
+                            if (blobId == null) {
-                                    blobId = blobStore.createId(state.getId(), i);
-                                    blobStore.put(blobId, in, size);
-                                    state.setBlobId(blobId, i);
-                                } finally {
-                                    IOUtils.closeQuietly(in);
+                                    InputStream in = val.getStream();
+                                    try {
+                                        blobId = blobStore.createId(state.getId(), i);
+                                        blobStore.put(blobId, in, size);
+                                        state.setBlobId(blobId, i);
+                                    } finally {
+                                        IOUtils.closeQuietly(in);
+                                    }
+                                } catch (Exception e) {
+                                    String msg = "Error while storing blob. id="
+                                            + state.getId() + " idx=" + i + " size=" + size;
+                                    log.error(msg, e);
+                                    throw new IOException(msg);
-                            } catch (Exception e) {
-                                String msg = "Error while storing blob. id="
-                                        + state.getId() + " idx=" + i + " size=" + size;
-                                log.error(msg, e);
-                                throw new IOException(msg);
-                            }
-                            try {
-                                // replace value instance with value
-                                // backed by resource in blob store and delete temp file
-                                if (blobStore instanceof ResourceBasedBLOBStore) {
-                                    values[i] = InternalValue.create(((ResourceBasedBLOBStore) blobStore).getResource(blobId));
-                                } else {
-                                    values[i] = InternalValue.create(blobStore.get(blobId));
+                                try {
+                                    // replace value instance with value
+                                    // backed by resource in blob store and delete temp file
+                                    if (blobStore instanceof ResourceBasedBLOBStore) {
+                                        values[i] = InternalValue.create(((ResourceBasedBLOBStore) blobStore).getResource(blobId));
+                                    } else {
+                                        values[i] = InternalValue.create(blobStore.get(blobId));
+                                    }
+                                } catch (Exception e) {
+                                    log.error("Error while reloading blob. truncating. id="
+                                            + state.getId() + " idx=" + i + " size=" + size, e);
+                                    values[i] = InternalValue.create(new byte[0]);
-                            } catch (Exception e) {
-                                log.error("Error while reloading blob. truncating. id="
-                                        + state.getId() + " idx=" + i + " size=" + size, e);
-                                values[i] = InternalValue.create(new byte[0]);
+                                val.discard();
-                            blobVal.discard();
+                            // store id of blob as property value
+                            out.writeUTF(blobId);   // value
+                        } else {
+                            // delete evt. blob
+                            byte[] data = writeSmallBinary(out, val, state, i);
+                            // replace value instance with value
+                            // backed by resource in blob store and delete temp file
+                            values[i] = InternalValue.create(data);
+                            val.discard();
-                        // store id of blob as property value
-                        out.writeUTF(blobId);   // value
-                    } else {
-                        // delete evt. blob
-                        byte[] data = writeSmallBinary(out, blobVal, state, i);
-                        // replace value instance with value
-                        // backed by resource in blob store and delete temp file
-                        values[i] = InternalValue.create(data);
-                        blobVal.discard();
+                    } catch (RepositoryException e) {
+                        String msg = "Error while storing blob. id="
+                            + state.getId() + " idx=" + i + " value=" + val;
+                        log.error(msg, e);
+                        throw new IOException(msg);
-    private byte[] writeSmallBinary(DataOutputStream out, BLOBFileValue blobVal, NodePropBundle.PropertyEntry state, int i) throws IOException {
-        int size = (int) blobVal.getLength();
-        out.writeInt(size);
-        byte[] data = new byte[size];
+    private byte[] writeSmallBinary(DataOutputStream out, InternalValue value, NodePropBundle.PropertyEntry state, int i) throws IOException {
+            int size = (int) value.getLength();
+            out.writeInt(size);
+            byte[] data = new byte[size];
-                new DataInputStream(blobVal.getStream());
+                new DataInputStream(value.getStream());
+            out.write(data, 0, data.length);
+            return data;
-                    + state.getId() + " idx=" + i + " size=" + size;
+                    + state.getId() + " idx=" + i + " value=" + value;
-        out.write(data, 0, data.length);
-        return data;

INS8 UPD43 UPD42 INS54 UPD42 MOV8 INS12 MOV60 MOV54 INS44 INS8 INS54 MOV43 INS43 INS42 INS60 INS21 INS53 INS8 MOV12 INS42 INS43 INS59 INS32 INS14 INS60 INS25 MOV25 MOV43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS39 MOV59 MOV27 MOV8 UPD42 UPD42 INS45 INS32 INS45 INS42 INS45 INS42 INS42 UPD42 INS60 INS25 INS42 INS42 UPD42 INS39 INS59 INS27 MOV8 MOV8 INS42 INS27 INS42 INS42 MOV21 UPD42 UPD45 INS42 INS32 INS34 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL8 DEL54 DEL32 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL60 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54