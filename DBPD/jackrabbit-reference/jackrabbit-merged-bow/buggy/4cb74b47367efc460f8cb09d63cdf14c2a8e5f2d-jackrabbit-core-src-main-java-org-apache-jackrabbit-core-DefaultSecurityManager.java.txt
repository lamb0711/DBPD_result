JCR-1765: Config: make all elements in the security configuration optional

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@704324 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.config.BeanConfig;
+import org.apache.jackrabbit.core.config.SecurityManagerConfig;
+import org.apache.jackrabbit.core.security.DefaultAccessManager;
-        createSystemUsers(adminId, anonymousId);
+        createSystemUsers(systemUserManager, adminId, anonymousId);
-        acProviderFactory.init(this);
+        acProviderFactory.init(securitySession);
-        workspaceAccessManager = createWorkspaceAccessManager();
+        SecurityManagerConfig smc = config.getSecurityManagerConfig();
+        if (smc != null && smc.getWorkspaceAccessConfig() != null) {
+            workspaceAccessManager = (WorkspaceAccessManager) smc.getWorkspaceAccessConfig().newInstance();
+        } else {
+            // fallback -> the default implementation
+            log.debug("No WorkspaceAccessManager configured; using default.");
+            workspaceAccessManager = new WorkspaceAccessManagerImpl();
+        }
+        workspaceAccessManager.init(securitySession);
-     * @see JackrabbitSecurityManager#getSecurityConfig()
-     */
-    public SecurityConfig getSecurityConfig() throws RepositoryException {
-        return repository.getConfig().getSecurityConfig();
-    }
-
-    /**
-        AccessManagerConfig amConfig = getSecurityConfig().getAccessManagerConfig();
+        AccessManagerConfig amConfig = repository.getConfig().getSecurityConfig().getAccessManagerConfig();
+            AccessManager accessMgr;
+            if (amConfig == null) {
+                log.debug("No configuration entry for AccessManager. Using org.apache.jackrabbit.core.security.DefaultAccessManager");
+                accessMgr = new DefaultAccessManager();
+            } else {
+                accessMgr = (AccessManager) amConfig.newInstance();
+            }
-            AccessManager accessMgr = (AccessManager) amConfig.newInstance();
-        } catch (AccessDeniedException ade) {
+        } catch (AccessDeniedException e) {
-            throw ade;
+            throw e;
-            e.printStackTrace();
+        checkInitialized();
-     * @param wspName
-     * @return The <code>WorkspaceSecurityConfig</code> for the given workspace
-     * name or <code>null</code>.
-     */
-    private WorkspaceSecurityConfig getWorkspaceSecurityConfig(String wspName) {
-        WorkspaceConfig conf = repository.getConfig().getWorkspaceConfig(wspName);
-        if (conf == null) {
-            return null;
-        } else {
-            return conf.getSecurityConfig();
-        }
-    }
-
-    /**
-
+        checkInitialized();
-                provider = acProviderFactory.createProvider(systemSession, getWorkspaceSecurityConfig(workspaceName));
+                WorkspaceConfig conf = repository.getConfig().getWorkspaceConfig(workspaceName);
+                WorkspaceSecurityConfig secConf = (conf == null) ?  null : conf.getSecurityConfig();
+                provider = acProviderFactory.createProvider(systemSession, secConf);
-     * @return the WorkspaceAccessManager responsible for the repository.
-     */
-    private WorkspaceAccessManager createWorkspaceAccessManager() throws RepositoryException {
-        WorkspaceAccessManager wspAccess;
-        BeanConfig config = repository.getConfig().getSecurityConfig().getSecurityManagerConfig().getWorkspaceAccessConfig();
-        if (config != null) {
-            wspAccess = (WorkspaceAccessManager) config.newInstance();
-        } else {
-            // fallback -> the default implementation
-            log.debug("No WorkspaceAccessManager configured; using default.");
-            wspAccess = new WorkspaceAccessManagerImpl();
-        }
-        wspAccess.init(this);
-        return wspAccess;
-    }
-
-    /**
+     * @param userManager
-    private void createSystemUsers(String adminId,
-                                   String anonymousId) throws RepositoryException {
+    private static void createSystemUsers(UserManager userManager,
+                                          String adminId,
+                                          String anonymousId) throws RepositoryException {
-        Group admins = (Group) systemUserManager.getAuthorizable(pr);
+        Group admins = (Group) userManager.getAuthorizable(pr);
-            admins = systemUserManager.createGroup(new PrincipalImpl(SecurityConstants.ADMINISTRATORS_NAME));
+            admins = userManager.createGroup(new PrincipalImpl(SecurityConstants.ADMINISTRATORS_NAME));
-            Authorizable admin = systemUserManager.getAuthorizable(adminId);
+            Authorizable admin = userManager.getAuthorizable(adminId);
-                admin = systemUserManager.createUser(adminId, adminId);
+                admin = userManager.createUser(adminId, adminId);
-            Authorizable anonymous = systemUserManager.getAuthorizable(anonymousId);
+            Authorizable anonymous = userManager.getAuthorizable(anonymousId);
-                systemUserManager.createUser(anonymousId, "");
+                userManager.createUser(anonymousId, "");
+         * @param securitySession
-        public void init(JackrabbitSecurityManager securityManager) throws RepositoryException {
+        public void init(Session securitySession) throws RepositoryException {

MOV26 INS26 UPD40 INS40 INS83 INS44 INS60 INS25 INS21 INS21 INS21 INS65 INS43 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS32 INS42 INS42 MOV43 INS65 UPD43 UPD42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 MOV21 MOV21 INS21 INS42 INS42 INS42 INS25 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS33 INS32 INS33 INS7 MOV32 INS27 INS8 INS8 UPD42 MOV8 MOV43 INS42 INS42 INS11 INS42 MOV14 INS42 INS33 INS21 INS21 INS21 UPD42 MOV60 INS60 INS21 MOV21 UPD42 MOV43 INS32 INS32 INS7 INS7 MOV43 INS59 INS7 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS45 INS42 INS14 INS42 MOV11 INS42 INS16 INS42 INS32 UPD42 INS42 UPD42 MOV42 INS43 UPD42 INS36 INS33 MOV32 INS42 INS42 INS42 INS42 UPD42 INS42 MOV27 DEL52 DEL32 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL33 DEL41 DEL8 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL52 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31