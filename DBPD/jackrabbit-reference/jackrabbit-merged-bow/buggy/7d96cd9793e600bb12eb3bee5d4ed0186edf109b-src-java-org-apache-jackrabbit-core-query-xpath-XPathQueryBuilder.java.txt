Update to spec 0.16.4:
- Change prefix for xpath functions. Use jcr (which maps to the jcr namespace) instead of jcrfn.
- Contains function now has two required parameters. Implementations must at least support: XPath: jcr:contains(., 'text'), SQL: CONTAINS(*, 'text')

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161484 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NamespaceRegistryImpl;
-    static final QName JCR_XMLTEXT = new QName(NamespaceRegistryImpl.NS_JCR_URI, "xmltext");
+    static final QName JCR_XMLTEXT = new QName(Constants.NS_JCR_URI, "xmltext");
-     * QName for jcrfn:like
+     * QName for jcr:like
-    static final QName JCRFN_LIKE = new QName(SearchManager.NS_JCRFN_URI, "like");
+    static final QName JCR_LIKE = new QName(Constants.NS_JCR_URI, "like");
-     * QName for jcrfn:deref
+     * QName for jcr:deref
-    static final QName JCRFN_DEREF = new QName(SearchManager.NS_JCRFN_URI, "deref");
+    static final QName JCR_DEREF = new QName(Constants.NS_JCR_URI, "deref");
-     * QName for jcrfn:contains
+     * QName for jcr:contains
-    static final QName JCRFN_CONTAINS = new QName(SearchManager.NS_JCRFN_URI, "contains");
+    static final QName JCR_CONTAINS = new QName(Constants.NS_JCR_URI, "contains");
-    static final QName JCR_ROOT = new QName(NamespaceRegistryImpl.NS_JCR_URI, "root");
+    static final QName JCR_ROOT = new QName(Constants.NS_JCR_URI, "root");
-            } else if (JCRFN_CONTAINS.toJCRName(resolver).equals(fName)) {
+            } else if (JCR_CONTAINS.toJCRName(resolver).equals(fName)) {
-                            exceptions.add(new InvalidQueryException("Wrong argument type for jcrfn:contains"));
+                            exceptions.add(new InvalidQueryException("Wrong argument type for jcr:contains"));
-                // todo first parameter is currently optional -> remove later
-                } else if (node.jjtGetNumChildren() == 2) {
-                    SimpleNode literal = (SimpleNode) node.jjtGetChild(1).jjtGetChild(0);
-                    if (queryNode instanceof NAryQueryNode) {
-                        if (literal.getId() == JJTSTRINGLITERAL) {
-                            String value = literal.getValue();
-                            if (value.charAt(0) == '"') {
-                                value = value.replaceAll("\"\"", "\"");
-                            } else {
-                                value = value.replaceAll("''", "'");
-                            }
-                            // strip quotes
-                            value = value.substring(1, value.length() - 1);
-                            TextsearchQueryNode contains = new TextsearchQueryNode(queryNode, value);
-                            ((NAryQueryNode) queryNode).addOperand(contains);
-                        } else {
-                            exceptions.add(new InvalidQueryException("Wrong argument type for jcrfn:contains"));
-                        }
-                    } else {
-                        exceptions.add(new InvalidQueryException("Unsupported location for function jcrfn:contains"));
-                    }
-                    exceptions.add(new InvalidQueryException("Wrong number of arguments for jcrfn:contains"));
+                    exceptions.add(new InvalidQueryException("Wrong number of arguments for jcr:contains"));
-            } else if (JCRFN_LIKE.toJCRName(resolver).equals(fName)) {
+            } else if (JCR_LIKE.toJCRName(resolver).equals(fName)) {
-                            exceptions.add(new InvalidQueryException("Wrong first argument type for jcrfn:like"));
+                            exceptions.add(new InvalidQueryException("Wrong first argument type for jcr:like"));
-                            exceptions.add(new InvalidQueryException("Wrong second argument type for jcrfn:like"));
+                            exceptions.add(new InvalidQueryException("Wrong second argument type for jcr:like"));
-                        exceptions.add(new InvalidQueryException("Unsupported location for function jcrfn:like"));
+                        exceptions.add(new InvalidQueryException("Unsupported location for function jcr:like"));
-                    exceptions.add(new InvalidQueryException("Wrong number of arguments for jcrfn:like"));
+                    exceptions.add(new InvalidQueryException("Wrong number of arguments for jcr:like"));
-            } else if (JCRFN_DEREF.toJCRName(resolver).equals(fName)) {
+            } else if (JCR_DEREF.toJCRName(resolver).equals(fName)) {
-                            exceptions.add(new InvalidQueryException("Wrong first argument type for jcrfn:deref"));
+                            exceptions.add(new InvalidQueryException("Wrong first argument type for jcr:deref"));
-                            exceptions.add(new InvalidQueryException("Wrong second argument type for jcrfn:like"));
+                            exceptions.add(new InvalidQueryException("Wrong second argument type for jcr:like"));
-                        exceptions.add(new InvalidQueryException("Unsupported location for jcrfn:deref()"));
+                        exceptions.add(new InvalidQueryException("Unsupported location for jcr:deref()"));

UPD42 UPD42 UPD42 UPD40 UPD66 UPD40 UPD66 UPD40 UPD66 UPD40 UPD40 MOV25 MOV27 MOV8 MOV32 MOV8 MOV8 INS32 MOV8 UPD42 MOV8 INS32 INS42 INS42 MOV32 MOV8 INS21 INS42 INS42 INS42 MOV27 MOV8 MOV32 MOV8 INS32 INS25 MOV32 MOV8 INS42 UPD42 MOV42 INS14 MOV62 MOV8 MOV8 MOV32 MOV8 MOV43 INS45 MOV32 MOV8 MOV25 MOV8 MOV8 UPD45 INS32 MOV8 INS32 INS42 INS42 UPD45 INS42 INS42 INS42 MOV27 UPD45 INS25 UPD45 UPD45 MOV27 INS8 MOV8 MOV60 MOV60 MOV21 MOV25 MOV60 MOV25 MOV21 MOV8 MOV8 UPD45 UPD45 UPD45 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL34 DEL32 DEL42 DEL34 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL62 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL13 DEL27 DEL42 DEL42 DEL42 DEL45 DEL45 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL45 DEL45 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL34 DEL27 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL25 DEL25 DEL8 DEL42 DEL42 DEL45 DEL14 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL43 DEL45 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL45 DEL14 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25