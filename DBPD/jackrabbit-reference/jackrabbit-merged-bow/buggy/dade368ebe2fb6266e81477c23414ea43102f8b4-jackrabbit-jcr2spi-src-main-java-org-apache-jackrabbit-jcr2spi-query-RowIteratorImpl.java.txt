JCR-2076: JSR 283: QOM and SQL2
- change return type of QueryInfo.getColumnNames() from Name[] to String[]
- jcr2spi, spi2dav, spi2jcr implementation (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@789269 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.UnsupportedRepositoryOperationException;
-import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.jcr2spi.ItemManager;
+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyManager;
-    private final Name[] columnNames;
+    private final String[] columnNames;
+     * The item manager.
+     */
+    private final ItemManager itemMgr;
+
+    /**
+     * The hierarchy manager.
+     */
+    private final HierarchyManager hmgr;
+
+    /**
+     * @param itemMgr   the item manager.
+     * @param hmgr      the hierarchy manager.
-    RowIteratorImpl(QueryInfo queryInfo, NamePathResolver resolver, ValueFactory vFactory) {
+    RowIteratorImpl(QueryInfo queryInfo, NamePathResolver resolver,
+                    ValueFactory vFactory, ItemManager itemMgr,
+                    HierarchyManager hmgr) {
+        this.itemMgr = itemMgr;
+        this.hmgr = hmgr;
-         * Map of select property <code>Name</code>s. Key: Name, Value:
+         * Map of select property names. Key: String, Value:
-        private Map propertyMap;
+        private Map<String, Integer> propertyMap;
-                Map tmp = new HashMap();
+                Map<String, Integer> tmp = new HashMap<String, Integer>();
-                    tmp.put(columnNames[i], new Integer(i));
+                    tmp.put(columnNames[i], i);
-                Name prop = resolver.getQName(propertyName);
-                Integer idx = (Integer) propertyMap.get(prop);
+                Integer idx = propertyMap.get(propertyName);
-                return values[idx.intValue()];
+                return values[idx];
-            // TODO
-            throw new UnsupportedRepositoryOperationException("JCR-1104");
+            return getNode(row.getNodeId(null));
-            // TODO
-            throw new UnsupportedRepositoryOperationException("JCR-1104");
+            return getNode(row.getNodeId(resolver.getQName(selectorName)));
-            // TODO
-            throw new UnsupportedRepositoryOperationException("JCR-1104");
+            String path = null;
+            Node n = getNode();
+            if (n != null) {
+                path = n.getPath();
+            }
+            return path;
-            // TODO
-            throw new UnsupportedRepositoryOperationException("JCR-1104");
+            String path = null;
+            Node n = getNode(selectorName);
+            if (n != null) {
+                path = n.getPath();
+            }
+            return path;
-            // TODO
-            throw new UnsupportedRepositoryOperationException("JCR-1104");
+            return row.getScore(null);
-            // TODO
-            throw new UnsupportedRepositoryOperationException("JCR-1104");
+            return row.getScore(resolver.getQName(selectorName));
+        /**
+         * Returns the node with the given <code>id</code> or <code>null</code>
+         * if <code>id</code> is <code>null</code>.
+         *
+         * @param id a node id or <code>null</code>.
+         * @return the node with the given id or <code>null</code>.
+         * @throws RepositoryException if an error occurs while retrieving the
+         *                             node.
+         */
+        private Node getNode(NodeId id) throws RepositoryException {
+            Node node = null;
+            if (id != null) {
+                node = (Node) itemMgr.getItem(hmgr.getNodeEntry(id));
+            }
+            return node;
+        }
-

MOV26 MOV26 INS26 UPD40 UPD40 INS40 INS23 INS23 UPD5 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS44 INS44 INS31 INS31 UPD43 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS21 INS74 MOV29 MOV83 MOV39 MOV42 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 UPD42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS7 INS7 MOV43 INS43 INS43 INS41 INS41 INS60 INS60 INS25 INS41 INS60 INS60 INS25 INS41 INS41 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 UPD42 MOV42 INS60 INS25 INS41 INS22 INS42 INS22 INS42 UPD66 INS42 INS42 INS32 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS32 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS42 INS52 INS42 INS52 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS21 UPD42 MOV42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS74 MOV43 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS7 INS42 INS42 INS7 INS42 INS42 INS42 INS7 MOV43 INS43 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS11 INS42 INS74 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 INS32 MOV43 INS43 MOV43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL11 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL42 DEL43 DEL45 DEL14 DEL53 DEL43 DEL45 DEL14 DEL53 DEL43 DEL45 DEL14 DEL53 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL42 DEL43 DEL45 DEL14 DEL53