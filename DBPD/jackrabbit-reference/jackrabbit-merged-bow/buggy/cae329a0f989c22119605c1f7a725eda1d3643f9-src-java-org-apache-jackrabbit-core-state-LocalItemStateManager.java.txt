reworked transaction support, contributed by dominique

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151380 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.ReferenceMap;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-        implements ItemStateManager, ItemStateListener, TransactionListener {
+        implements UpdatableItemStateManager, ItemStateListener {
-     * Known attribute name
-     */
-    private static final String ATTRIBUTE_STATES = "ItemStates";
-
-    /**
-     * Known attribute name
-     */
-    private static final String ATTRIBUTE_REFS = "NodeReferences";
-
-    /**
-    private final SharedItemStateManager sharedStateMgr;
+    protected final SharedItemStateManager sharedStateMgr;
-     * Currently associated transaction
+     * Flag indicating whether this item state manager is in edit mode
-    private TransactionContext tx;
+    private boolean editMode;
-     * A cache for <code>NodeReferences</code> objects.
+     * Change log
-    private Map refsCache = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
+    private final ChangeLog changeLog = new ChangeLog();
-
-        refsCache.clear();
-     * @param id
-     * @return
+     * Retrieve a node state from the parent shared state manager and
+     * wraps it into a intermediate object that helps us handle local
+     * modifications.
+     * @param id node id
+     * @return node state
-        // check cache
-        if (isCached(id)) {
-            return (NodeState) retrieve(id);
-        }
-
-     * @param id
-     * @return
+     * Retrieve a property state from the parent shared state manager and
+     * wraps it into a intermediate object that helps us handle local
+     * modifications.
+     * @param id property id
+     * @return property state
-     * Set transaction context
-     */
-    public void setTransactionContext(TransactionContext tx) {
-        dispose();
-
-        if (tx != null) {
-            if (tx.getAttribute(ATTRIBUTE_STATES) == null) {
-                tx.setAttribute(ATTRIBUTE_STATES, new ArrayList());
-                tx.setAttribute(ATTRIBUTE_REFS, new ArrayList());
-                tx.addListener(this);
-            } else {
-                List states = (List) tx.getAttribute(ATTRIBUTE_STATES);
-                for (int i = 0; i < states.size(); i++) {
-                    cache((ItemState) states.get(i));
-                }
-
-                List refsCollection = (List) tx.getAttribute(ATTRIBUTE_REFS);
-                for (int i = 0; i < refsCollection.size(); i++) {
-                    NodeReferences refs = (NodeReferences) states.get(i);
-                    refsCache.put(refs.getTargetId(), refs);
-                }
-            }
-        }
-        this.tx = tx;
-    }
-
-    /**
+        // check change log
+        ItemState state = changeLog.get(id);
+        if (state != null) {
+            return state;
+        }
+
+        // check cache
+        if (isCached(id)) {
+            return retrieve(id);
+        }
+
+        // regular behaviour
+
+        // check items in change log
+        try {
+            ItemState state = changeLog.get(id);
+            if (state != null) {
+                return true;
+            }
+        } catch (NoSuchItemStateException e) {
+            return false;
+        }
+
+        // check cache
+
+        // regular behaviour
-    public synchronized NodeReferences getNodeReferences(NodeId targetId)
+    public synchronized NodeReferences getNodeReferences(NodeReferencesId id)
-        if (refsCache.containsKey(targetId)) {
-            return (NodeReferences) refsCache.get(targetId);
+        // check change log
+        NodeReferences refs = changeLog.get(id);
+        if (refs != null) {
+            return refs;
-        NodeReferences refs = sharedStateMgr.getNodeReferences(targetId);
-        refs = new NodeReferences(refs);
-
-        refsCache.put(targetId, refs);
-
-        return refs;
+        return sharedStateMgr.getNodeReferences(id);
-     * @see ItemStateManager#beginUpdate
+     * @see UpdatableItemStateManager#edit
-    public UpdateOperation beginUpdate() throws ItemStateException {
-        return new Update();
+    public void edit() throws ItemStateException {
+        if (editMode) {
+            throw new ItemStateException("Already in edit mode");
+        }
+        changeLog.reset();
+
+        editMode = true;
-     * End an update operation
+     * @see UpdatableItemStateManager#createNew
-    private void endUpdate(List states, List refsCollection)
+    public NodeState createNew(String uuid, QName nodeTypeName, String parentUUID) {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+
+        NodeState state = new NodeState(uuid, nodeTypeName, parentUUID,
+                ItemState.STATUS_NEW, false);
+        changeLog.added(state);
+        return state;
+    }
+
+    /**
+     * @see UpdatableItemStateManager#createNew
+     */
+    public PropertyState createNew(QName propName, String parentUUID) {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        PropertyState state = new PropertyState(propName, parentUUID,
+                ItemState.STATUS_NEW, false);
+        changeLog.added(state);
+        return state;
+    }
+
+    /**
+     * @see UpdatableItemStateManager#store
+     */
+    public void store(ItemState state) {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        changeLog.modified(state);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#store
+     */
+    public void store(NodeReferences refs) {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        changeLog.modified(refs);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#destroy
+     */
+    public void destroy(ItemState state) {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        changeLog.deleted(state);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#cancel
+     */
+    public void cancel() {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        changeLog.undo(sharedStateMgr);
+
+        editMode = false;
+    }
+
+    /**
+     * @see UpdatableItemStateManager#update
+     */
+    public void update() throws ItemStateException {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        update(changeLog);
+        changeLog.reset();
+
+        editMode = false;
+    }
+
+
+    /**
+     * End an update operation. Fetch the states and references from
+     * the parent (shared) item manager, reconnect them to the items
+     * collected in our (local) change log and overwrite the shared
+     * items with our copies.
+     * @param changeLog change log containing local states and references
+     */
+    protected void update(ChangeLog changeLog)
-        for (int i = 0; i < states.size(); i++) {
-            ItemState state = (ItemState) states.get(i);
-            state.connect(getOrCreateOverlayed(state));
-            state.push();
-        }
-        for (int i = 0; i < refsCollection.size(); i++) {
-            NodeReferences refs = (NodeReferences) refsCollection.get(i);
-            refs.connect(getOrCreateOverlayed(refs));
-            refs.push();
-        }
-        sharedStateMgr.store(states, refsCollection);
-    }
+        sharedStateMgr.store(changeLog);
-    /**
-     * Return the item state inside the shared item state manager
-     * corresponding to a given item state.
-     */
-    private ItemState getOrCreateOverlayed(ItemState state)
-            throws ItemStateException {
-
-        switch (state.getStatus()) {
-            case ItemState.STATUS_NEW:
-                if (state.isNode()) {
-                    NodeState ns = (NodeState) state;
-                    return sharedStateMgr.createInstance(ns.getUUID(),
-                            ns.getNodeTypeName(), ns.getParentUUID());
-                } else {
-                    PropertyState ps = (PropertyState) state;
-                    return sharedStateMgr.createInstance(ps.getName(),
-                            ps.getParentUUID());
-                }
-            default:
-                return sharedStateMgr.getItemState(state.getId());
-        }
-    }
-
-    /**
-     * Return the references object inside the shared item state manager
-     * corresponding to a references object.
-     */
-    private NodeReferences getOrCreateOverlayed(NodeReferences refs)
-            throws ItemStateException {
-
-        switch (refs.getStatus()) {
-            case NodeReferences.STATUS_NEW:
-                return new NodeReferences(refs.getTargetId());
-
-            default:
-                return sharedStateMgr.getNodeReferences(refs.getTargetId());
-        }
-    }
-
-    //--------------------------------------------------< TransactionListener >
-
-    /**
-     * @see TransactionListener#transactionCommitted
-     */
-    public void transactionCommitted(TransactionContext tx)
-            throws TransactionException {
-
-        List states = (List) tx.getAttribute(ATTRIBUTE_STATES);
-        List refsCollection = (List) tx.getAttribute(ATTRIBUTE_REFS);
-
-        try {
-            endUpdate(states, refsCollection);
-        } catch (ItemStateException e) {
-            throw new TransactionException("Unable to end update.", e);
-        }
-    }
-
-    /**
-     * @see TransactionListener#transactionRolledBack
-     */
-    public void transactionRolledBack(TransactionContext tx) {
-    }
-
-    //------------------------------------------------------< UpdateOperation >
-
-    class Update implements UpdateOperation {
-
-        /**
-         * Modified states
-         */
-        private final List states = new ArrayList();
-
-        /**
-         * Modified references
-         */
-        private final List refsCollection = new ArrayList();
-
-        /**
-         * @see UpdateOperation#createNew
-         */
-        public NodeState createNew(String uuid, QName nodeTypeName,
-                                   String parentUUID) {
-
-            NodeState state = new NodeState(uuid, nodeTypeName, parentUUID,
-                    ItemState.STATUS_NEW, false);
-
-            cache(state);
-            state.addListener(LocalItemStateManager.this);
-
-            return state;
-        }
-
-        /**
-         * @see UpdateOperation#createNew
-         */
-        public PropertyState createNew(QName propName, String parentUUID) {
-            PropertyState state = new PropertyState(propName, parentUUID,
-                    ItemState.STATUS_NEW, false);
-
-            cache(state);
-            state.addListener(LocalItemStateManager.this);
-
-            return state;
-        }
-
-        /**
-         * @see UpdateOperation#store
-         */
-        public void store(ItemState state) {
-            state.disconnect();
-            states.add(state);
-            // notify listeners that the specified instance has been modified
-            state.notifyStateUpdated();
-        }
-
-        /**
-         * @see UpdateOperation#store
-         */
-        public void store(NodeReferences refs) {
-            refs.disconnect();
-            refsCollection.add(refs);
-        }
-
-        /**
-         * @see UpdateOperation#destroy
-         */
-        public void destroy(ItemState state) {
-            state.disconnect();
-            state.setStatus(ItemState.STATUS_EXISTING_REMOVED);
-            states.add(state);
-            // notify listeners that the specified instance has been marked 'removed'
-            state.notifyStateDestroyed();
-        }
-
-        /**
-         * @see UpdateOperation#end
-         */
-        public void end() throws ItemStateException {
-            if (tx != null) {
-                List txStates = (List) tx.getAttribute(ATTRIBUTE_STATES);
-                List txRefs = (List) tx.getAttribute(ATTRIBUTE_REFS);
-
-                txStates.addAll(states);
-                txRefs.addAll(refsCollection);
-            } else {
-                endUpdate(states, refsCollection);
-            }
-        }
+        changeLog.persisted();
-        // not interested
-        // not interested

MOV23 UPD43 INS23 INS31 MOV31 MOV31 INS31 MOV31 MOV31 MOV31 MOV31 UPD42 UPD83 INS39 MOV29 MOV83 MOV83 UPD43 MOV43 MOV59 MOV29 MOV83 MOV39 INS42 MOV43 MOV8 UPD83 INS39 INS42 MOV44 MOV29 MOV83 MOV39 INS42 MOV44 INS8 UPD42 MOV44 INS42 INS8 INS42 MOV43 UPD83 INS42 INS44 MOV43 INS8 UPD42 UPD42 UPD42 INS65 MOV65 MOV65 INS65 MOV65 MOV65 INS60 INS25 MOV25 INS54 UPD43 UPD42 INS60 INS25 INS41 INS25 MOV21 INS25 INS25 UPD65 INS25 INS21 INS25 INS21 INS25 INS25 MOV21 MOV21 INS25 INS65 UPD65 INS43 INS42 MOV21 MOV21 UPD66 UPD66 UPD43 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 MOV43 INS59 INS27 INS8 INS8 INS12 UPD42 MOV43 INS59 INS27 INS8 INS32 INS42 INS8 INS7 INS38 INS8 INS38 INS8 INS67 INS38 MOV8 INS32 INS38 INS8 INS32 INS38 INS8 INS38 INS8 INS7 INS38 INS8 INS7 INS66 INS66 INS66 INS66 INS42 INS66 UPD42 MOV42 UPD42 INS42 INS32 INS42 INS33 INS41 INS60 INS25 INS44 INS8 INS42 INS32 INS42 INS33 MOV41 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 INS53 UPD42 UPD42 MOV42 INS42 INS9 UPD42 INS42 INS53 UPD42 UPD42 INS42 UPD42 INS42 INS53 UPD42 UPD42 INS42 INS42 INS42 INS42 INS53 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 INS42 MOV53 INS42 INS42 INS42 UPD42 UPD42 INS42 INS53 UPD42 UPD42 UPD42 UPD42 INS42 INS53 UPD42 UPD42 INS42 INS42 INS9 UPD42 UPD42 INS42 INS53 UPD42 UPD42 UPD42 UPD42 INS42 INS9 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 MOV32 MOV43 INS59 INS27 INS8 INS43 INS42 INS41 UPD42 MOV42 MOV42 UPD42 MOV42 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS42 INS32 INS42 INS33 INS41 INS42 INS9 MOV43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 UPD43 UPD45 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS9 INS42 INS42 UPD42 MOV42 UPD42 INS42 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL45 DEL40 DEL40 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL23 DEL42 DEL42 DEL32 DEL21 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL43 DEL11 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL32 DEL11 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL52 DEL42 DEL42 DEL32 DEL21 DEL42 DEL52 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL66 DEL66 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL41 DEL42 DEL42 DEL32 DEL40 DEL49 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL49 DEL42 DEL32 DEL32 DEL41 DEL50 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL8 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL67 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL49 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL50 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL67 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL42 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL55