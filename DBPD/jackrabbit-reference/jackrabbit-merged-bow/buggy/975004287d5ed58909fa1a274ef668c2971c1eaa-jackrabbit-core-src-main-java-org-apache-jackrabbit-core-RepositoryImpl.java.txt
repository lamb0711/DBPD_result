JCR-2749: Closing a session twice shouldn't write a warning in the log

Use an explicit "active" flag instead of the activeSessions set to mark workspaces that shouldn't get disposed by the workspace janitor. This way the repository won't prematurely close the system session during shutdown.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@997496 13f79535-47bb-0310-9956-ffa450edef68

-        SystemSession securitySession = getSystemSession(workspaceName);
-        // mark system session as 'active' for that the system workspace does
-        // not get disposed by workspace-janitor
-        onSessionCreated(securitySession);
+
+        // mark the workspace as 'active' for that it does not get disposed
+        // by the workspace-janitor
+        // TODO: There should be a cleaner way to do this
+        markWorkspaceActive(workspaceName);
-        securityMgr.init(this, securitySession);
+        securityMgr.init(this, getSystemSession(workspaceName));
+     * Marks the specified workspace as "active", so that the workspace
+     * janitor won't attempt to dispose it. This is used by features like
+     * security managers and the data store garbage collector to prevent
+     * workspaces from disappearing from below them.
+     * <p>
+     * FIXME: There should be a cleaner way to do this.
+     *
+     * @param workspaceName workspace name
+     * @throws RepositoryException if the workspace can not be accessed
+     */
+    void markWorkspaceActive(String workspaceName) throws RepositoryException {
+        getWorkspaceInfo(workspaceName).setActive(true);
+    }
+
+    /**
+
-            // mark this session as 'active' so the workspace does not get disposed
-            // by the workspace-janitor until the garbage collector is done
-            onSessionCreated(systemSession);
-            // the workspace could be disposed again, so re-initialize if required
-            // afterwards it will not be disposed because a session is registered
+
+            // mark the workspace as 'active' so it does not get disposed by
+            // the workspace-janitor until the garbage collector is done
+            wspInfo.setActive(true);
+
+            // the workspace could be disposed, so re-initialize if required
+            // afterwards it will not be disposed because it was marked active
+
+         * Flag used to mark this as an "active" workspace that should not
+         * get automatically disposed by the workspace janitor.
+         */
+        private boolean active;
+
+        /**
+        public boolean isActive() {
+            return active;
+        }
+
+        public void setActive(boolean active) {
+            this.active = active;
+        }
+
-                if (!initialized) {
+                if (!initialized || active) {
+                active = false;

INS31 INS29 INS39 INS42 INS44 INS43 INS8 INS23 INS31 INS31 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS29 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS32 INS65 INS42 INS41 INS39 INS42 INS21 UPD42 UPD42 MOV32 INS32 INS42 INS9 INS66 INS66 INS42 INS7 INS42 INS42 INS22 INS42 INS21 UPD42 UPD42 INS9 INS52 INS42 INS27 INS7 INS38 INS42 INS42 INS9 MOV42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL38