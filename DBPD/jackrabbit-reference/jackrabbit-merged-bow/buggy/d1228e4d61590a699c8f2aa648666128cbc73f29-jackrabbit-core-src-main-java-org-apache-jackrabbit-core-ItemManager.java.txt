JCR-1276: A Property and a Node Can Have the Same Name

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@605622 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.ItemStateListener;
-import org.apache.jackrabbit.core.state.ItemStateListener;
-import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.Path;
-     * Checks if the item with the given path exists.
+     * Checks whether an item exists at the specified path.
+     *
+     * @deprecated As of JSR 283, a <code>Path</code> doesn't anymore uniquely
+     * identify an <code>Item</code>, therefore {@link #nodeExists(Path)} and
+     * {@link #propertyExists(Path)} should be used instead.
-            if (id == null) {
-                return false;
-            }
-
-            // check if state exists for the given item
-            if (!itemStateProvider.hasItemState(id)) {
-                return false;
-            }
-
-            // check privileges
-            if (!session.getAccessManager().isGranted(id, AccessManager.READ)) {
-                // clear cache
-                evictItem(id);
-                // item exists but the session has not been granted read access
-                return false;
-            }
-            return true;
-        } catch (ItemNotFoundException infe) {
+            return (id != null) && itemExists(id);
+        } catch (RepositoryException re) {
+        }
+    }
+
+    /**
+     * Checks whether a node exists at the specified path.
+     *
+     * @param path path to the node to be checked
+     * @return true if a node exists at the specified path
+     */
+    public boolean nodeExists(Path path) {
+        try {
+            // check sanity of session
+            session.sanityCheck();
+
+            NodeId id = hierMgr.resolveNodePath(path);
+            return (id != null) && itemExists(id);
+        } catch (RepositoryException re) {
+            return false;
+        }
+    }
+
+    /**
+     * Checks whether a property exists at the specified path.
+     *
+     * @param path path to the property to be checked
+     * @return true if a property exists at the specified path
+     */
+    public boolean propertyExists(Path path) {
+        try {
+            // check sanity of session
+            session.sanityCheck();
+
+            PropertyId id = hierMgr.resolvePropertyPath(path);
+            return (id != null) && itemExists(id);
+     * Returns the node at the specified absolute path in the workspace.
+     * If no such node exists, then it returns the property at the specified path.
+     * If no such property exists a <code>PathNotFoundException</code> is thrown.
+     * 
+     * @deprecated As of JSR 283, a <code>Path</code> doesn't anymore uniquely
+     * identify an <code>Item</code>, therefore {@link #getNode(Path)} and
+     * {@link #getProperty(Path)} should be used instead.
+     * @param path
+     * @return
+     * @throws PathNotFoundException
+     * @throws AccessDeniedException
+     * @throws RepositoryException
+     */
+    public NodeImpl getNode(Path path)
+            throws PathNotFoundException, AccessDeniedException, RepositoryException {
+        NodeId id = hierMgr.resolveNodePath(path);
+        if (id == null) {
+            throw new PathNotFoundException(safeGetJCRPath(path));
+        }
+        try {
+            return (NodeImpl) getItem(id);
+        } catch (ItemNotFoundException infe) {
+            throw new PathNotFoundException(safeGetJCRPath(path));
+        }
+    }
+
+    /**
+     * @param path
+     * @return
+     * @throws PathNotFoundException
+     * @throws AccessDeniedException
+     * @throws RepositoryException
+     */
+    public PropertyImpl getProperty(Path path)
+            throws PathNotFoundException, AccessDeniedException, RepositoryException {
+        PropertyId id = hierMgr.resolvePropertyPath(path);
+        if (id == null) {
+            throw new PathNotFoundException(safeGetJCRPath(path));
+        }
+        try {
+            return (PropertyImpl) getItem(id);
+        } catch (ItemNotFoundException infe) {
+            throw new PathNotFoundException(safeGetJCRPath(path));
+        }
+    }
+
+    /**

MOV26 MOV26 INS31 INS31 INS31 INS31 INS31 MOV29 MOV83 MOV39 MOV42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 MOV29 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS8 INS65 INS54 INS65 INS65 INS65 INS43 INS42 INS54 INS65 INS65 INS65 INS43 INS42 INS54 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS25 INS54 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS25 INS54 UPD66 INS66 INS66 INS65 INS66 INS65 INS66 INS8 MOV12 INS66 INS42 INS66 INS66 INS42 INS8 INS12 INS66 INS42 INS66 INS66 INS42 INS8 INS12 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS59 MOV27 INS8 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS12 INS68 INS68 MOV21 MOV60 MOV41 INS21 INS60 INS41 INS44 INS8 INS21 INS60 INS41 INS44 INS8 INS68 INS68 INS42 INS42 INS32 INS53 MOV41 MOV44 INS8 INS42 INS42 INS32 INS42 INS33 INS53 MOV41 INS44 INS8 INS42 INS69 INS42 INS69 INS27 INS32 INS43 INS59 INS27 INS43 INS42 MOV41 INS32 INS43 INS59 INS27 INS43 INS42 MOV41 INS42 INS69 INS42 INS69 INS42 INS42 INS42 INS14 INS11 INS53 INS42 INS42 INS42 INS14 INS11 INS43 INS42 INS53 INS43 INS43 INS36 INS32 INS42 INS42 INS42 INS42 INS32 INS36 INS32 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS36 INS32 INS42 INS43 INS43 INS43 INS32 INS43 INS32 INS14 INS43 INS32 INS43 INS32 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS27 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 DEL9 DEL8 DEL25 DEL42 DEL32 DEL38 DEL8 DEL25 DEL32 DEL42 DEL42 DEL40 DEL32 DEL38 DEL32 DEL21 DEL8 DEL25 DEL8 DEL8 DEL12 DEL54 DEL8 DEL31 DEL9 DEL9