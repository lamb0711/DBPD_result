fixed: move, reorder (work in progress)
fixed: locktoken transfer
fixed: recursive transient removal of invalidated tree fails (restoreTests)
improve: simplify usage of workspace operations
fixed: store original itemId with transient operations in order to properly reflect the changelog upon batch creation
fixed: workspace import doesn't invalidate
fixed: session import uuid handling




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@513279 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QValue;
-            return getEffectiveNodeType(nodeState.getNodeTypeNames());
+            QName[] allNtNames;
+            if (nodeState.getStatus() == Status.EXISTING) {
+                allNtNames = nodeState.getNodeTypeNames();
+            } else {
+                // TODO: check if correct (and only used for creating new)
+                QName primaryType = nodeState.getNodeTypeName();
+                allNtNames = new QName[] { primaryType }; // default
+                PropertyEntry mixins = nodeState.getNodeEntry().getPropertyEntry(QName.JCR_MIXINTYPES);
+                if (mixins != null) {
+                    try {
+                        QValue[] values = mixins.getPropertyState().getValues();
+                        allNtNames = new QName[values.length + 1];
+                        for (int i = 0; i < values.length; i++) {
+                            allNtNames[i] = values[i].getQName();
+                        }
+                        allNtNames[values.length] = primaryType;
+                    } catch (ItemStateException e) {
+                        // ignore
+                    }
+                }
+            }
+
+            return getEffectiveNodeType(allNtNames);
-     * node type representation of the specified node's primary and mixin
-     * node types.
+     * node type representation of the specified node types.
-        throws NodeTypeConflictException, NoSuchNodeTypeException  {
-            return ntReg.getEffectiveNodeType(nodeTypeNames);
+            throws NodeTypeConflictException, NoSuchNodeTypeException  {
+        return ntReg.getEffectiveNodeType(nodeTypeNames);
+    }
+
+    /**
+     * Helper method that builds the effective (i.e. merged and resolved)
+     * node type representation of the specified node type.
+     *
+     * @param nodeTypeName
+     * @return the effective node type
+     * @throws NoSuchNodeTypeException
+     */
+    public EffectiveNodeType getEffectiveNodeType(QName nodeTypeName) throws NoSuchNodeTypeException  {
+        return ntReg.getEffectiveNodeType(nodeTypeName);

INS26 INS40 INS31 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS54 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS8 MOV12 UPD66 INS66 INS66 INS42 INS66 INS42 INS42 INS32 INS60 INS25 INS41 INS42 INS42 INS42 INS5 INS59 INS27 MOV8 INS8 INS32 INS43 INS85 INS42 INS32 INS40 INS21 INS60 INS21 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS59 INS7 INS43 INS59 INS27 INS8 INS42 MOV32 INS42 INS42 INS32 INS42 INS3 INS42 INS42 INS32 INS42 INS33 MOV54 INS42 INS42 INS5 INS4 INS32 INS42 INS40 INS8 INS12 INS43 INS85 INS42 INS42 INS42 INS60 INS21 INS24 INS21 INS44 INS8 INS42 INS5 INS59 INS7 INS58 INS27 INS37 INS8 INS7 INS43 INS42 INS43 INS85 INS42 INS32 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS2 INS42 INS42 INS42 INS32 INS42 INS5 INS27 INS42 INS34 INS7 INS42 INS40 INS42 INS42 INS43 INS85 INS40 INS34 INS2 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS42 DEL42 DEL32 DEL41 DEL8 DEL66