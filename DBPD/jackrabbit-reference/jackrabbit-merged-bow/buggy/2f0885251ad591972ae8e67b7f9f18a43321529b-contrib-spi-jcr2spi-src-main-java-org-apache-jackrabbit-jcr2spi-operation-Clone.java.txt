Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.NodeState;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateException;
+import org.apache.jackrabbit.jcr2spi.config.CacheBehaviour;
+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyEntry;
-     * @see Operation#persisted()
+     * @see Operation#persisted(CacheBehaviour)
+     * @param cacheBehaviour
-    public void persisted() {
-        if (removeExisting) {
-            // invalidate the complete tree
-            try {
-                NodeState rootState = destMgrProvider.getItemStateManager().getRootState();
-                rootState.invalidate(true);
-            } catch (ItemStateException e) {
-                log.error("Cannot invalidate root state.", e.getMessage());
-                // fallback
-                super.persisted();
+    public void persisted(CacheBehaviour cacheBehaviour) {
+        if (cacheBehaviour == CacheBehaviour.INVALIDATE) {
+            if (removeExisting) {
+                // invalidate the complete tree -> find root-hierarchy-entry
+                HierarchyEntry he = getDestinationParentState().getHierarchyEntry();
+                while (he.getParent() != null) {
+                    he = he.getParent();
+                }
+                he.invalidate(true);
+            } else {
+                super.persisted(cacheBehaviour);
-        } else {
-            super.persisted();

UPD40 UPD40 INS44 INS8 INS65 INS43 INS42 INS25 INS42 INS42 INS27 INS8 INS69 INS42 INS40 MOV25 INS43 INS42 MOV60 INS61 MOV21 UPD43 INS27 INS8 INS32 UPD42 UPD42 INS32 INS33 MOV21 INS42 INS42 INS9 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS7 UPD42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL42 DEL48 DEL9 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8