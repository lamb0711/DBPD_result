reimplemented Session.export* according to latest spec

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151373 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.xml.DocViewSAXEventGenerator;
+import org.apache.jackrabbit.core.xml.SysViewSAXEventGenerator;
+import org.apache.xerces.util.XMLChar;
-import org.apache.xerces.util.XMLChar;
-import javax.jcr.version.VersionException;
+import javax.jcr.version.VersionException;
-import java.io.PrintStream;
+import java.io.PrintStream;
-     * @throws RepositoryException if a workspace with the given name
-     *                             already exists or if another error occurs
+     * @throws RepositoryException   if a workspace with the given name
+     *                               already exists or if another error occurs
-        Item item = null;
+        Item item;
-        // @todo implement Session#exportDocView(String, ContentHandler, boolean, boolean)
-        throw new RepositoryException("not yet implemented");
-/*
-        // check path & retrieve state
-        Path path;
-        Path.PathElement name;
-        NodeState state;
-        try {
-            path = Path.create(absPath, session.getNamespaceResolver(), true);
-            name = path.getNameElement();
-            state = getNodeState(path, hierMgr, stateMgr);
-        } catch (MalformedPathException mpe) {
-            String msg = "invalid path: " + absPath;
-            log.debug(msg);
-            throw new RepositoryException(msg, mpe);
-        }
-
-        // check read access
-        if (!session.getAccessManager().isGranted(state.getId(), AccessManager.READ)) {
+        Item item = getItem(absPath);
+        if (!item.isNode()) {
+            // there's a property, though not a node at the specified path
-
-        new DocViewSAXEventGenerator(state, name.getName(), noRecurse, binaryAsLink,
-                stateMgr, rep.getNamespaceRegistry(),
-                session.getAccessManager(), hierMgr, contentHandler).serialize();
-*/
+        new DocViewSAXEventGenerator((NodeImpl) item, noRecurse, skipBinary,
+                this, contentHandler).serialize();
-            PathNotFoundException,  RepositoryException {
+            PathNotFoundException, RepositoryException {
-        // @todo implement Session#exportSysView(String, ContentHandler, boolean, boolean)
-        throw new RepositoryException("not yet implemented");
-/*
-        // check path & retrieve state
-        Path path;
-        Path.PathElement name;
-        NodeState state;
-        try {
-            path = Path.create(absPath, session.getNamespaceResolver(), true);
-            name = path.getNameElement();
-            state = getNodeState(path, hierMgr, stateMgr);
-        } catch (MalformedPathException mpe) {
-            String msg = "invalid path: " + absPath;
-            log.debug(msg);
-            throw new RepositoryException(msg, mpe);
-        }
-
-        // check read access
-        if (!session.getAccessManager().isGranted(state.getId(), AccessManager.READ)) {
+        Item item = getItem(absPath);
+        if (!item.isNode()) {
+            // there's a property, though not a node at the specified path
-
-        new SysViewSAXEventGenerator(state, name.getName(), noRecurse, binaryAsLink,
-                stateMgr, rep.getNamespaceRegistry(),
-                session.getAccessManager(), hierMgr, contentHandler).serialize();
-    }
-*/
+        new SysViewSAXEventGenerator((NodeImpl) item, noRecurse, skipBinary,
+                this, contentHandler).serialize();

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 INS40 INS8 INS8 MOV21 INS60 INS25 INS21 MOV21 INS60 INS25 INS21 UPD66 INS43 INS59 INS38 INS8 INS32 INS43 INS59 INS38 INS8 INS32 INS42 INS42 INS32 INS32 MOV53 INS14 INS42 INS42 INS42 INS32 INS32 MOV53 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS11 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS11 INS42 INS42 INS52 INS42 UPD43 INS42 INS42 INS43 INS42 UPD43 INS42 INS42 INS43 INS42 UPD42 INS42 UPD42 INS42 DEL33 DEL45 DEL8 DEL45 DEL8