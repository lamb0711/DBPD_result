- predecessors were not exposed

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@122849 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.version.*;
-     * the version histories. key=ItemId, value=ItemState
+     * the cache node states. key=ItemId, value=ItemState
-    private Map items = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
+    private Map nodes = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
-
-        // check cache
-        if (items.containsKey(id)) {
-            return true;
-        } else if (id instanceof NodeId) {
+        if (id instanceof NodeId) {
-        ItemState state = (ItemState) items.get(id);
-        if (state==null) {
-            if (id instanceof NodeId) {
-                state = getNodeState((NodeId) id);
-            } else {
-                state = getPropertyState((PropertyId) id);
-            }
-            // add state to cache
-            items.put(id, state);
-            log.info("item added to cache. size=" + items.size());
+        if (id instanceof NodeId) {
+            return getNodeState((NodeId) id);
+        } else {
+            return getPropertyState((PropertyId) id);
-        return state;
-        if (id.equals(root.getId())) {
+        if (nodes.containsKey(id)) {
+        } else if (id.equals(root.getId())) {
+            return true;
+        } else {
+            return vMgr.hasItem(id.getUUID());
-        return vMgr.hasItem(id.getUUID());
-        try {
-            InternalVersionItem vi = vMgr.getItem(id.getUUID());
-            if (vi instanceof InternalVersionHistory) {
-                VersionHistoryNodeState ns = new VersionHistoryNodeState(this, (InternalVersionHistory) vi, root.getUUID());
-                ns.setDefinitionId(NDEF_VERSION_HISTORY);
-                return ns;
+        // check cache
+        VirtualNodeState state = (VirtualNodeState) nodes.get(id);
+        if (state==null) {
+            try {
+                InternalVersionItem vi = vMgr.getItem(id.getUUID());
+                if (vi instanceof InternalVersionHistory) {
+                    state = new VersionHistoryNodeState(this, (InternalVersionHistory) vi, root.getUUID());
+                    state.setDefinitionId(NDEF_VERSION_HISTORY);
-            } else if (vi instanceof InternalVersion) {
-                InternalVersion v = (InternalVersion) vi;
-                VersionNodeState ns = new VersionNodeState(this, v, vi.getParent().getId());
-                ns.setDefinitionId(NDEF_VERSION);
-                ns.setPropertyValue(VersionManager.PROPNAME_CREATED, InternalValue.create(v.getCreated()));
-                ns.setPropertyValue(VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(v.getFrozenNode().getFrozenUUID()));
-                ns.setPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE, InternalValue.create(v.getFrozenNode().getFrozenPrimaryType()));
-                ns.setPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, InternalValue.create(v.getFrozenNode().getFrozenMixinTypes()));
-                ns.setPropertyValues(VersionManager.PROPNAME_VERSION_LABELS, PropertyType.STRING, InternalValue.create(v.getLabels()));
-                ns.setPropertyValues(VersionManager.PROPNAME_PREDECESSORS, PropertyType.REFERENCE, new InternalValue[0]);
-                ns.setPropertyValues(VersionManager.PROPNAME_SUCCESSORS, PropertyType.REFERENCE, new InternalValue[0]);
-                return ns;
+                } else if (vi instanceof InternalVersion) {
+                    InternalVersion v = (InternalVersion) vi;
+                    state = new VersionNodeState(this, v, vi.getParent().getId());
+                    state.setDefinitionId(NDEF_VERSION);
+                    state.setPropertyValue(VersionManager.PROPNAME_CREATED, InternalValue.create(v.getCreated()));
+                    state.setPropertyValue(VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(v.getFrozenNode().getFrozenUUID()));
+                    state.setPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE, InternalValue.create(v.getFrozenNode().getFrozenPrimaryType()));
+                    state.setPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, InternalValue.create(v.getFrozenNode().getFrozenMixinTypes()));
+                    state.setPropertyValues(VersionManager.PROPNAME_VERSION_LABELS, PropertyType.STRING, InternalValue.create(v.getLabels()));
+                    state.setPropertyValues(VersionManager.PROPNAME_PREDECESSORS, PropertyType.REFERENCE, new InternalValue[0]);
+                    state.setPropertyValues(VersionManager.PROPNAME_SUCCESSORS, PropertyType.REFERENCE, new InternalValue[0]);
-            } else if (vi instanceof InternalFrozenNode) {
-                InternalFrozenNode fn = (InternalFrozenNode) vi;
-                VirtualNodeState parent = getNodeState(new NodeId(fn.getParent().getId()));
-                VirtualNodeState state = createNodeState(
-                                parent,
-                                VersionManager.NODENAME_FROZEN,
-                                id.getUUID(),
-                                fn.getFrozenPrimaryType());
-                mapFrozenNode(state, fn);
-                return state;
+                } else if (vi instanceof InternalFrozenNode) {
+                    InternalFrozenNode fn = (InternalFrozenNode) vi;
+                    VirtualNodeState parent = getNodeState(new NodeId(fn.getParent().getId()));
+                    state = createNodeState(
+                            parent,
+                            VersionManager.NODENAME_FROZEN,
+                            id.getUUID(),
+                            fn.getFrozenPrimaryType());
+                    mapFrozenNode(state, fn);
-            } else if (vi instanceof InternalFrozenVersionHistory) {
-                InternalFrozenVersionHistory fn = (InternalFrozenVersionHistory) vi;
-                VirtualNodeState parent = getNodeState(new NodeId(fn.getParent().getId()));
-                VirtualNodeState state = createNodeState(
-                                parent,
-                                VersionManager.NODENAME_FROZEN,
-                                id.getUUID(),
-                                NodeTypeRegistry.NT_FROZEN_VERSIONABLE_CHILD);
-                mapFrozenNode(state, fn);
-                return state;
+                } else if (vi instanceof InternalFrozenVersionHistory) {
+                    InternalFrozenVersionHistory fn = (InternalFrozenVersionHistory) vi;
+                    VirtualNodeState parent = getNodeState(new NodeId(fn.getParent().getId()));
+                    state = createNodeState(
+                            parent,
+                            VersionManager.NODENAME_FROZEN,
+                            id.getUUID(),
+                            NodeTypeRegistry.NT_FROZEN_VERSIONABLE_CHILD);
+                    mapFrozenNode(state, fn);
+                } else {
+                    // not found, throw
+                    throw new NoSuchItemStateException(id.toString());
+                }
+            } catch (RepositoryException e) {
+                log.error("Unable to check for item:" + e.toString());
+                throw new ItemStateException(e);
-        } catch (RepositoryException e) {
-            log.error("Unable to check for item:" + e.toString());
-            throw new ItemStateException(e);
-        }
-        // not found, throw
-        throw new NoSuchItemStateException(id.toString());
+            // add state to cache
+            nodes.put(id, state);
+            log.info("item added to cache. size=" + nodes.size());
+        }
+        return state;
-        items.put(prop.getId(), prop);
-        items.put(state.getId(), state);
+        nodes.put(state.getId(), state);

MOV8 UPD42 MOV25 INS25 INS60 INS25 MOV41 UPD66 INS32 MOV8 MOV25 MOV43 INS59 MOV27 INS8 INS41 INS41 UPD42 MOV42 UPD42 MOV42 MOV42 INS8 INS42 INS11 MOV54 INS21 INS21 UPD42 MOV32 MOV32 MOV41 MOV43 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS42 INS21 MOV21 INS42 INS42 INS7 INS21 INS42 MOV14 UPD42 INS7 INS21 INS8 INS42 MOV14 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD40 UPD42 UPD40 INS7 INS21 MOV53 INS42 MOV32 INS7 INS42 MOV32 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL25 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL41 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL41 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21