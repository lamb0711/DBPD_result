JCR-325: Applied the xml-refactoring.patch that puts the PropInfo instances in charge of applying the imported property values to content nodes.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@387961 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.util.TransientFileFactory;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.io.Reader;
-import java.io.StringReader;
-import java.io.Writer;
-import java.io.FileOutputStream;
-import java.io.OutputStreamWriter;
-    private static Logger log = LoggerFactory.getLogger(TargetImportHandler.class);
-
-     * Disposes all instances of <code>AppendableValue</code> contained in the
-     * given property info's value array.
-     *
-     * @param prop property info
-     */
-    protected void disposePropertyValues(Importer.PropInfo prop) {
-        Importer.TextValue[] vals = prop.getValues();
-        for (int i = 0; i < vals.length; i++) {
-            if (vals[i] instanceof AppendableValue) {
-                try {
-                    ((AppendableValue) vals[i]).dispose();
-                } catch (IOException ioe) {
-                    log.warn("error while disposing temporary value", ioe);
-                    // fall through...
-                }
-            }
-        }
-    }
-
-    //-------------------------------------------------------< ContentHandler >
-
-    /**
-    //--------------------------------------------------------< inner classes >
-    /**
-     * <code>AppendableValue</code> represents a serialized value that is
-     * appendable.
-     * <p/>
-     * <b>Important:</b> Note that in order to free resources
-     * <code>{@link #dispose()}</code> should be called as soon as an
-     * <code>AppendableValue</code> object is not used anymore.
-     */
-    public interface AppendableValue extends Importer.TextValue {
-        /**
-         * Append a portion of an array of characters.
-         *
-         * @param chars  the characters to be appended
-         * @param start  the index of the first character to append
-         * @param length the number of characters to append
-         * @throws IOException if an I/O error occurs
-         */
-        void append(char[] chars, int start, int length)
-                throws IOException;
-
-        /**
-         * Close this value. Once a value has been closed,
-         * further append() invocations will cause an IOException to be thrown.
-         *
-         * @throws IOException if an I/O error occurs
-         */
-        void close() throws IOException;
-
-        /**
-         * Dispose this value, i.e. free all bound resources. Once a value has
-         * been disposed, further method invocations will cause an IOException
-         * to be thrown.
-         *
-         * @throws IOException if an I/O error occurs
-         */
-        void dispose() throws IOException;
-    }
-
-    /**
-     * <code>StringValue</code> represents an immutable serialized value.
-     */
-    protected class StringValue implements Importer.TextValue {
-
-        private final String value;
-
-        /**
-         * Constructs a new <code>StringValue</code> representing the given
-         * value.
-         *
-         * @param value
-         */
-        protected StringValue(String value) {
-            this.value = value;
-        }
-
-        //--------------------------------------------------------< TextValue >
-        /**
-         * {@inheritDoc}
-         */
-        public long length() {
-            return value.length();
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public String retrieve() {
-            return value;
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public Reader reader() {
-            return new StringReader(value);
-        }
-    }
-
-    /**
-     * <code>BufferedStringValue</code> represents an appendable
-     * serialized value that is either buffered in-memory or backed
-     * by a temporary file if its size exceeds a certain limit.
-     * <p/>
-     * <b>Important:</b> Note that in order to free resources
-     * <code>{@link #dispose()}</code> should be called as soon as
-     * <code>BufferedStringValue</code> instance is not used anymore.
-     */
-    protected class BufferedStringValue implements AppendableValue {
-
-        /**
-         * max size for buffering data in memory
-         */
-        private static final int MAX_BUFFER_SIZE = 0x10000;
-        /**
-         * size of increment if capacity buffer needs to be enlarged
-         */
-        private static final int BUFFER_INCREMENT = 0x2000;
-        /**
-         * in-memory buffer
-         */
-        private char[] buffer;
-        /**
-         * current position within buffer (size of actual data in buffer)
-         */
-        private int bufferPos;
-
-        /**
-         * backing temporary file created when size of data exceeds
-         * MAX_BUFFER_SIZE
-         */
-        private File tmpFile;
-        /**
-         * writer used to write to tmpFile; writer & tmpFile are always
-         * instantiated together, i.e. they are either both null or both not null.
-         */
-        private Writer writer;
-
-        /**
-         * Constructs a new empty <code>BufferedStringValue</code>.
-         */
-        protected BufferedStringValue() {
-            buffer = new char[0x2000];
-            bufferPos = 0;
-            tmpFile = null;
-            writer = null;
-        }
-
-        //--------------------------------------------------------< TextValue >
-        /**
-         * {@inheritDoc}
-         */
-        public long length() throws IOException {
-            if (buffer != null) {
-                return bufferPos;
-            } else if (tmpFile != null) {
-                // flush writer first
-                writer.flush();
-                return tmpFile.length();
-            } else {
-                throw new IOException("this instance has already been disposed");
-            }
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public String retrieve() throws IOException {
-            if (buffer != null) {
-                return new String(buffer, 0, bufferPos);
-            } else if (tmpFile != null) {
-                // flush writer first
-                writer.flush();
-                if (tmpFile.length() > Integer.MAX_VALUE) {
-                    throw new IOException("size of value is too big, use reader()");
-                }
-                StringBuffer sb = new StringBuffer((int) tmpFile.length());
-                char[] chunk = new char[0x2000];
-                int read;
-                Reader reader = new FileReader(tmpFile);
-                try {
-                    while ((read = reader.read(chunk)) > -1) {
-                        sb.append(chunk, 0, read);
-                    }
-                } finally {
-                    reader.close();
-                }
-                return sb.toString();
-            } else {
-                throw new IOException("this instance has already been disposed");
-            }
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public Reader reader() throws IOException {
-            if (buffer != null) {
-                return new StringReader(new String(buffer, 0, bufferPos));
-            } else if (tmpFile != null) {
-                // flush writer first
-                writer.flush();
-                return new FileReader(tmpFile);
-            } else {
-                throw new IOException("this instance has already been disposed");
-            }
-        }
-
-        //--------------------------------------------------< AppendableValue >
-        /**
-         * {@inheritDoc}
-         */
-        public void append(char[] chars, int start, int length)
-                throws IOException {
-            if (buffer != null) {
-                if (bufferPos + length > MAX_BUFFER_SIZE) {
-                    // threshold for keeping data in memory exceeded;
-                    // create temp file and spool buffer contents
-                    TransientFileFactory fileFactory = TransientFileFactory.getInstance();
-                    tmpFile = fileFactory.createTransientFile("txt", null, null);
-                    final FileOutputStream fout = new FileOutputStream(tmpFile);
-                    writer = new OutputStreamWriter(fout) {
-                        public void flush() throws IOException {
-                            // flush this writer
-                            super.flush();
-                            // force synchronization with underlying file
-                            fout.getFD().sync();
-                        }
-                    };
-                    writer.write(buffer, 0, bufferPos);
-                    writer.write(chars, start, length);
-                    // reset fields
-                    buffer = null;
-                    bufferPos = 0;
-                } else {
-                    if (bufferPos + length > buffer.length) {
-                        // reallocate new buffer and spool old buffer contents
-                        char[] newBuffer = new char[buffer.length + BUFFER_INCREMENT];
-                        System.arraycopy(buffer, 0, newBuffer, 0, bufferPos);
-                        buffer = newBuffer;
-                    }
-                    System.arraycopy(chars, start, buffer, bufferPos, length);
-                    bufferPos += length;
-                }
-            } else if (tmpFile != null) {
-                writer.write(chars, start, length);
-            } else {
-                throw new IOException("this instance has already been disposed");
-            }
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public void close() throws IOException {
-            if (buffer != null) {
-                // nop
-            } else if (tmpFile != null) {
-                writer.close();
-            } else {
-                throw new IOException("this instance has already been disposed");
-            }
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public void dispose() throws IOException {
-            if (buffer != null) {
-                buffer = null;
-                bufferPos = 0;
-            } else if (tmpFile != null) {
-                writer.close();
-                tmpFile.delete();
-                tmpFile = null;
-                writer = null;
-            } else {
-                throw new IOException("this instance has already been disposed");
-            }
-        }
-    }

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL40 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL36 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL40 DEL43 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL31 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL31 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL40 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL55 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL39 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL34 DEL42 DEL14 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL39 DEL42 DEL42 DEL32 DEL11 DEL14 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL42 DEL34 DEL42 DEL14 DEL14 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL33 DEL33 DEL32 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL48 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL1 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL8 DEL42 DEL42 DEL27 DEL40 DEL27 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL40 DEL42 DEL27 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL33 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL31 DEL55