JCR-56: allow case insensitive searches

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160047 13f79535-47bb-0310-9956-ffa450edef68

-                            || queryNode.getType() == QueryNode.TYPE_PATH) {
+                            || queryNode.getType() == QueryNode.TYPE_PATH
+                            || queryNode.getType() == QueryNode.TYPE_TEXTSEARCH) {
-                        queryNode = createLocationStep(node, (PathQueryNode) queryNode);
+                        queryNode = createLocationStep(node, (NAryQueryNode) queryNode);
+                    } else if (queryNode.getType() == QueryNode.TYPE_TEXTSEARCH) {
+                        // ignore
+                        || queryNode.getType() == QueryNode.TYPE_TEXTSEARCH
-    private LocationStepQueryNode createLocationStep(SimpleNode node, PathQueryNode parent) {
+    private LocationStepQueryNode createLocationStep(SimpleNode node, NAryQueryNode parent) {
-                parent.addPathStep(queryNode);
+                parent.addOperand(queryNode);
-     * {@link PathQueryNode}, {@link OrderQueryNode}.
+     * {@link PathQueryNode}, {@link OrderQueryNode}, {@link TextsearchQueryNode}.
+                    } else if (queryNode.getType() == QueryNode.TYPE_TEXTSEARCH) {
+                        QName name = ISO9075.decode(QName.fromJCRName(child.getValue(), resolver));
+                        ((TextsearchQueryNode) queryNode).setPropertyName(name);
-        // todo distinguish value vs. general comparison
-        } else if (opType.equals(OP_GE) || opType.equals(OP_SIGN_GE)) {
-            type = RelationQueryNode.OPERATION_GE_VALUE;
-        } else if (opType.equals(OP_GT) || opType.equals(OP_SIGN_GT)) {
+        } else if (opType.equals(OP_GT)) {
-        } else if (opType.equals(OP_LE) || opType.equals(OP_SIGN_LE)) {
+        } else if (opType.equals(OP_SIGN_GT)) {
+            type = RelationQueryNode.OPERATION_GT_GENERAL;
+        } else if (opType.equals(OP_GE)) {
+            type = RelationQueryNode.OPERATION_GE_VALUE;
+        } else if (opType.equals(OP_SIGN_GE)) {
+            type = RelationQueryNode.OPERATION_GE_GENERAL;
+        } else if (opType.equals(OP_LE)) {
-        } else if (opType.equals(OP_LT) || opType.equals(OP_SIGN_LT)) {
+        } else if (opType.equals(OP_SIGN_LE)) {
+            type = RelationQueryNode.OPERATION_LE_GENERAL;
+        } else if (opType.equals(OP_LT)) {
+        } else if (opType.equals(OP_SIGN_LT)) {
+            type = RelationQueryNode.OPERATION_LT_GENERAL;
-                if (node.jjtGetNumChildren() == 2) {
+                if (node.jjtGetNumChildren() == 3) {
+                    if (queryNode instanceof NAryQueryNode) {
+                        SimpleNode literal = (SimpleNode) node.jjtGetChild(2).jjtGetChild(0);
+                        if (literal.getId() == JJTSTRINGLITERAL) {
+                            String value = literal.getValue();
+                            if (value.charAt(0) == '"') {
+                                value = value.replaceAll("\"\"", "\"");
+                            } else {
+                                value = value.replaceAll("''", "'");
+                            }
+                            // strip quotes
+                            value = value.substring(1, value.length() - 1);
+                            TextsearchQueryNode contains = new TextsearchQueryNode(queryNode, value);
+                            // assign property name
+                            SimpleNode path = (SimpleNode) node.jjtGetChild(1);
+                            path.jjtAccept(this, contains);
+                            ((NAryQueryNode) queryNode).addOperand(contains);
+                        } else {
+                            exceptions.add(new InvalidQueryException("Wrong argument type for jcrfn:contains"));
+                        }
+                    }
+                // todo first parameter is currently optional -> remove later
+                } else if (node.jjtGetNumChildren() == 2) {

UPD43 MOV25 UPD42 INS66 INS65 MOV32 MOV8 INS42 MOV32 MOV8 INS27 MOV32 INS25 INS27 INS25 MOV27 INS27 MOV32 INS8 INS25 MOV27 INS27 INS27 INS8 MOV8 INS32 INS40 INS21 MOV32 MOV8 INS25 INS32 INS40 INS32 INS40 INS42 INS42 UPD42 INS7 MOV32 INS8 MOV25 INS25 INS42 INS42 INS42 INS42 INS42 INS40 INS21 MOV32 INS25 INS27 INS8 MOV25 INS7 MOV32 INS8 MOV25 INS32 INS34 INS25 UPD43 INS42 INS40 INS21 MOV32 INS25 INS42 INS42 INS62 INS8 UPD42 INS7 MOV32 INS8 MOV25 INS42 INS43 INS60 INS25 INS25 INS42 INS40 INS21 INS42 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS7 INS42 INS42 INS11 INS32 INS42 INS60 INS25 INS21 INS60 INS60 INS21 INS21 INS21 INS32 INS40 INS60 INS21 INS42 INS40 INS43 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS7 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS43 INS59 INS32 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS32 INS13 INS21 INS21 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS11 INS42 INS42 INS52 INS42 INS36 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS36 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS7 INS7 INS42 INS42 INS34 INS27 INS43 INS42 INS42 INS43 INS32 INS11 INS43 INS45 INS42 INS42 INS32 INS11 INS42 INS32 INS42 INS32 INS32 INS34 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL27 DEL27 DEL27 DEL27 DEL25