JCR-820: Add support for query result highlighting
- initial version

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@523251 13f79535-47bb-0310-9956-ffa450edef68

+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import java.io.IOException;
+     * The logger instance for this class.
+     */
+    private static final Logger log = LoggerFactory.getLogger(RowIteratorImpl.class);
+
+    /**
+     * The excerpt provider.
+     */
+    private final ExcerptProvider excerptProvider;
+
+    /**
+        this(nodes, properties, resolver, null);
+    }
+
+    /**
+     * Creates a new <code>RowIteratorImpl</code> that iterates over the result
+     * nodes.
+     *
+     * @param nodes      a <code>ScoreNodeIterator</code> that contains the
+     *                   nodes of the query result.
+     * @param properties <code>QName</code> of the select properties.
+     * @param resolver   <code>NamespaceResolver</code> of the user
+     *                   <code>Session</code>.
+     * @param exProvider the excerpt provider associated with the query result
+     *                   that created this row iterator.
+     */
+    RowIteratorImpl(ScoreNodeIterator nodes,
+                    QName[] properties,
+                    NamespaceResolver resolver,
+                    ExcerptProvider exProvider) {
+        this.excerptProvider = exProvider;
-
+    
-                        // property not set or jcr:path / jcr:score
+                        // property not set or jcr:path / jcr:score / jcr:highlight
-                            tmp[i] = new LongValue((int) (score * 1000f));
+                            tmp[i] = new LongValue(Math.round(score * 1000f));
+                        } else if (isExcerptFunction(properties[i])) {
+                            tmp[i] = getExcerpt();
-                        return new LongValue((int) (score * 1000f));
+                        return new LongValue(Math.round(score * 1000f));
+                    } else if (isExcerptFunction(prop)) {
+                        return getExcerpt();
+
+        /**
+         * @param name a QName.
+         * @return <code>true</code> if <code>name</code> is the rep:excerpt
+         *         function, <code>false</code> otherwise.
+         */
+        private boolean isExcerptFunction(QName name) {
+            return name.getNamespaceURI().equals(QName.NS_REP_URI) &&
+                    name.getLocalName().startsWith("excerpt(");
+        }
+
+        /**
+         * Returns an excerpt for the node associated with this row.
+         *
+         * @return a StringValue or <code>null</code> if the excerpt cannot be
+         *         created or an error occurs.
+         */
+        private Value getExcerpt() {
+            if (excerptProvider == null) {
+                return null;
+            }
+            try {
+                long time = System.currentTimeMillis();
+                String excerpt = excerptProvider.getExcerpt(node.getNodeId(), 3, 150);
+                time = System.currentTimeMillis() - time;
+                log.debug("Created excerpt in {} ms.", new Long(time));
+                if (excerpt != null) {
+                    return new StringValue(excerpt);
+                } else {
+                    return null;
+                }
+            } catch (IOException e) {
+                return null;
+            }
+        }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS8 INS29 INS42 INS44 INS44 INS44 INS44 MOV8 INS31 INS31 INS65 INS42 INS42 INS32 INS65 INS42 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS5 INS42 INS43 INS42 INS43 INS42 INS21 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS66 INS42 INS42 INS57 INS66 INS42 INS42 INS42 INS33 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS85 INS42 INS42 INS7 INS65 INS65 INS43 INS42 INS41 INS65 INS65 INS42 INS25 INS54 INS43 INS42 INS22 INS42 INS42 INS66 INS66 INS66 INS42 INS27 INS66 INS66 INS66 INS27 INS8 INS8 INS12 INS42 INS52 INS42 INS32 INS32 INS42 INS33 INS41 INS60 INS60 INS21 INS21 INS25 INS44 INS8 INS32 INS42 INS40 INS32 INS42 INS45 INS33 INS39 INS59 INS43 INS59 INS7 INS32 INS27 INS8 INS8 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS45 INS14 INS42 INS33 INS41 INS41 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS34 INS34 INS32 INS42 INS43 INS42 INS14 INS33 INS25 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS8 MOV8 INS42 INS25 INS42 INS42 INS41 INS32 INS8 MOV8 INS32 INS32 INS42 INS2 INS21 INS42 INS42 MOV27 INS42 INS42 INS42 INS7 INS32 INS2 INS32 INS42 INS42 MOV27 INS42 INS42 INS42 DEL39 DEL36 DEL11 DEL39 DEL36 DEL11