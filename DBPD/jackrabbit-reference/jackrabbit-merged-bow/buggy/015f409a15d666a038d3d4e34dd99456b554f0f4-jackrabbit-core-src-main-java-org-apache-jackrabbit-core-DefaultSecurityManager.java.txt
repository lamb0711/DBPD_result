JCR-1588: JSR 283 Access Control (work in progress)
JCR-1622 - Session.getUserID returns first principal in the set obtained from Subject.getPrincipals()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@659024 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.security.user.User;
+import org.apache.jackrabbit.core.security.principal.AdminPrincipal;
+import javax.jcr.SimpleCredentials;
+     * @see JackrabbitSecurityManager#getUserID(Subject)
+     */
+    public String getUserID(Subject subject) throws RepositoryException {
+        /* shortcut if the subject contains the AdminPrincipal in which case
+           the userID is already known. */
+        if (!subject.getPrincipals(AdminPrincipal.class).isEmpty()) {
+            return adminId;
+        }
+        /*
+         Retrieve userID from the subject.
+         Since the subject may contain multiple principals and the principal
+         name must not be equals to the UserID by definition, the userID
+         may either be obtained from the login-credentials or from the
+         user manager. in the latter case the set of principals present with
+         the specified subject is used to search for the user.
+        */
+        String uid = null;
+        // try simple access to userID over SimpleCredentials first.
+        Iterator creds = subject.getPublicCredentials(SimpleCredentials.class).iterator();
+        if (creds.hasNext()) {
+            SimpleCredentials sc = (SimpleCredentials) creds.next();
+            uid = sc.getUserID();
+        } else {
+            // no SimpleCredentials: retrieve authorizables corresponding to
+            // a non-group principal. the first one present is used to determine
+            // the userID.
+            for (Iterator it = subject.getPrincipals().iterator(); it.hasNext();) {
+                Principal p = (Principal) it.next();
+                if (!(p instanceof Group)) {
+                    Authorizable authorz = systemUserManager.getAuthorizable(p);
+                    if (authorz != null && !authorz.isGroup()) {
+                        uid = ((User) authorz).getID();
+                        break;
+                    }
+                }
+            }
+        }
+        return uid;
+    }
+
+    /**

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS43 INS42 INS42 INS25 INS60 INS60 INS25 INS41 INS68 INS42 INS38 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS69 INS32 INS41 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS24 INS43 INS32 INS42 INS42 INS32 INS42 INS43 INS59 INS7 INS58 INS32 INS8 INS42 INS42 INS42 INS57 INS42 INS42 INS57 INS42 INS42 INS11 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS36 INS60 INS25 INS42 INS42 INS43 INS32 INS62 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS27 INS38 INS21 INS10 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS7 INS42 INS42 INS42 INS32 INS36 INS42 INS11 INS43 INS42 INS42