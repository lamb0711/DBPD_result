JCR-1588: 283 Access Control

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@689499 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.api.jsr283.security.AccessControlEntry;
-import org.apache.jackrabbit.api.jsr283.security.Hold;
-import org.apache.jackrabbit.api.jsr283.security.RetentionPolicy;
-import org.apache.jackrabbit.core.security.authorization.PolicyTemplate;
-import javax.jcr.lock.LockException;
-import javax.jcr.version.VersionException;
+import java.util.Arrays;
+    private static final CompiledPermissions NO_PERMISSION = new CompiledPermissions() {
+        public void close() {
+            //nop
+        }
+        public boolean grants(Path absPath, int permissions) {
+            // deny everything
+            return false;
+        }
+        public int getPrivileges(Path absPath) {
+            return PrivilegeRegistry.NO_PRIVILEGE;
+        }
+        public boolean canReadAll() {
+            return false;
+        }
+    };
+    private PrivilegeRegistry privilegeRegistry;
+
+     * TODO: if the users group-membership gets modified the compiledPermissions
+     * TODO  should ev. be recalculated. currently those modifications are only
+     * TODO  reflected upon re-login to the repository.
+        privilegeRegistry = new PrivilegeRegistry(resolver);
-            // TODO: review expected default-permissions here.
-            compiledPermissions = new CompiledPermissions() {
-                public void close() {
-                    //nop
-                }
-                public boolean grants(Path absPath, int permissions) throws RepositoryException {
-                    // deny everything
-                    return false;
-                }
-                public int getPrivileges(Path absPath) throws RepositoryException {
-                    return 0;
-                }
-
-                public boolean canReadAll() throws RepositoryException {
-                    return false;
-                }
-            };
+            compiledPermissions = NO_PERMISSION;
+    /**
+     * @see AccessManager#isGranted(Path, int)
+     */
+    /**
+     * @see AccessManager#isGranted(Path, Name, int)
+     */
-        Path path;
-            int privs = PrivilegeRegistry.getBits(privileges);
+            int privs = privilegeRegistry.getBits(privileges);
-        int privs = compiledPermissions.getPrivileges(resolver.getQPath(absPath));
-        return (privs == 0) ? new Privilege[0] : PrivilegeRegistry.getPrivileges(privs);
+        int bits = compiledPermissions.getPrivileges(resolver.getQPath(absPath));
+        return (bits == PrivilegeRegistry.NO_PRIVILEGE) ?
+                new Privilege[0] :
+                privilegeRegistry.getPrivileges(bits);
-     * @see AccessControlManager#getPolicy(String)
+     * @see AccessControlManager#getPolicies(String)
-    public AccessControlPolicy getPolicy(String absPath) throws PathNotFoundException, AccessDeniedException, RepositoryException {
+    public AccessControlPolicy[] getPolicies(String absPath) throws PathNotFoundException, AccessDeniedException, RepositoryException {
-        AccessControlPolicy policy = null;
+        AccessControlPolicy[] policies;
-            policy = editor.getPolicyTemplate(absPath);
+            policies = editor.getPolicies(absPath);
+        } else {
+            policies = new AccessControlPolicy[0];
-        return policy;
+        return policies;
-     * @see AccessControlManager#getEffectivePolicy(String)
+     * @see AccessControlManager#getEffectivePolicies(String)
-    public AccessControlPolicy getEffectivePolicy(String absPath) throws PathNotFoundException, AccessDeniedException, RepositoryException {
+    public AccessControlPolicy[] getEffectivePolicies(String absPath) throws PathNotFoundException, AccessDeniedException, RepositoryException {
-        return acProvider.getPolicy(getPath(absPath));
+        return acProvider.getEffectivePolicies(getPath(absPath));
-            PolicyTemplate applicable = editor.editPolicyTemplate(absPath);
-            if (applicable != null) {
-                return new AccessControlPolicyIteratorAdapter(Collections.singletonList(applicable));
+            try {
+                AccessControlPolicy[] applicable = editor.editAccessControlPolicies(absPath);
+                return new AccessControlPolicyIteratorAdapter(Arrays.asList(applicable));
+            } catch (AccessControlException e) {
+                log.debug("No applicable policy at " + absPath);
-        if (policy instanceof PolicyTemplate) {
-            checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
-            if (editor == null) {
-                throw new UnsupportedRepositoryOperationException("Modification of AccessControlPolicies is not supported. ");
-            }
-            editor.setPolicyTemplate(absPath, (PolicyTemplate) policy);
-        } else {
-            throw new AccessControlException("Access control policy '" + policy + "' not applicable");
+        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
+        if (editor == null) {
+            throw new UnsupportedRepositoryOperationException("Modification of AccessControlPolicies is not supported. ");
+        editor.setPolicy(absPath, policy);
-     * @see AccessControlManager#removePolicy(String)
+     * @see AccessControlManager#removePolicy(String, AccessControlPolicy)
-    public AccessControlPolicy removePolicy(String absPath) throws PathNotFoundException, AccessControlException, AccessDeniedException, RepositoryException {
+    public void removePolicy(String absPath, AccessControlPolicy policy) throws PathNotFoundException, AccessControlException, AccessDeniedException, RepositoryException {
-        return editor.removePolicyTemplate(absPath);
+        editor.removePolicy(absPath, policy);
-    /**
-     * @see AccessControlManager#getAccessControlEntries(String)
-     */
-    public AccessControlEntry[] getAccessControlEntries(String absPath) throws PathNotFoundException, AccessDeniedException, RepositoryException {
-        checkInitialized();
-        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
-
-        AccessControlEntry[] entries = new AccessControlEntry[0];
-        if (editor != null) {
-            entries = editor.getAccessControlEntries(absPath);
-        }
-        return entries;
-    }
-
-    /**
-     * @see AccessControlManager#getEffectiveAccessControlEntries(String)
-     */
-    public AccessControlEntry[] getEffectiveAccessControlEntries(String absPath) throws PathNotFoundException, AccessDeniedException, RepositoryException {
-        checkInitialized();
-        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
-
-        return acProvider.getAccessControlEntries(getPath(absPath));
-    }
-
-    /**
-     * @see AccessControlManager#addAccessControlEntry(String, Principal, Privilege[])
-     */
-    public AccessControlEntry addAccessControlEntry(String absPath, Principal principal, Privilege[] privileges) throws PathNotFoundException, AccessControlException, AccessDeniedException, RepositoryException {
-        checkInitialized();
-        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
-
-        if (editor == null) {
-            throw new UnsupportedRepositoryOperationException("Adding access control entries is not supported.");
-        } else {
-            return editor.addAccessControlEntry(absPath, principal, privileges);
-        }
-    }
-
-    /**
-     * @see AccessControlManager#removeAccessControlEntry(String, AccessControlEntry)
-     */
-    public void removeAccessControlEntry(String absPath, AccessControlEntry ace) throws PathNotFoundException, AccessControlException, AccessDeniedException, RepositoryException {
-        checkInitialized();
-        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
-        if (editor == null) {
-            throw new UnsupportedRepositoryOperationException("Removal of access control entries is not supported.");
-        }
-        if (!editor.removeAccessControlEntry(absPath, ace)) {
-            throw new AccessControlException("AccessControlEntry " + ace + " has not been assigned though this API.");
-        }
-    }
-
-    /**
-     * @see AccessControlManager#getHolds(String)
-     */
-    public Hold[] getHolds(String absPath) throws PathNotFoundException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-        // TODO: add implementation
-        return super.getHolds(absPath);
-    }
-
-    /**
-     * @see AccessControlManager#addHold(String, String, boolean)
-     */
-    public Hold addHold(String absPath, String name, boolean isDeep) throws PathNotFoundException, AccessControlException, AccessDeniedException, UnsupportedRepositoryOperationException, LockException, VersionException, RepositoryException {
-        // TODO: add implementation
-        return super.addHold(absPath, name, isDeep);
-    }
-
-    /**
-     * @see AccessControlManager#removeHold(String, Hold)
-     */
-    public void removeHold(String absPath, Hold hold) throws PathNotFoundException, AccessControlException, AccessDeniedException, UnsupportedRepositoryOperationException, LockException, VersionException, RepositoryException {
-        // TODO: add implementation
-        super.removeHold(absPath, hold);
-    }
-
-    /**
-     * @see AccessControlManager#getRetentionPolicy(String)
-     */
-    public RetentionPolicy getRetentionPolicy(String absPath) throws PathNotFoundException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-        // TODO: add implementation
-        return super.getRetentionPolicy(absPath);
-    }
-
-    /**
-     * @see AccessControlManager#setRetentionPolicy(String, RetentionPolicy)
-     */
-    public void setRetentionPolicy(String absPath, RetentionPolicy retentionPolicy) throws PathNotFoundException, AccessControlException, AccessDeniedException, UnsupportedRepositoryOperationException, LockException, VersionException, RepositoryException {
-        // TODO: add implementation
-        super.setRetentionPolicy(absPath, retentionPolicy);
-    }
-
-    /**
-     * @see AccessControlManager#removeRetentionPolicy(String)
-     */
-    public void removeRetentionPolicy(String absPath) throws PathNotFoundException, AccessControlException, AccessDeniedException, UnsupportedRepositoryOperationException, LockException, VersionException, RepositoryException {
-        // TODO: add implementation
-        super.removeRetentionPolicy(absPath);
-    }
-     * @see JackrabbitAccessControlManager#editPolicy(String)
+     * @see JackrabbitAccessControlManager#getApplicablePolicies(Principal)
-    public PolicyTemplate editPolicy(String absPath) throws AccessDeniedException, AccessControlException, RepositoryException {
-        checkInitialized();
-        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
-        if (editor == null) {
-            throw new UnsupportedRepositoryOperationException("Editing of access control policies is not supported.");
-        }
-
-        return editor.editPolicyTemplate(absPath);
-    }
-
-    public PolicyTemplate editPolicy(Principal principal) throws AccessDeniedException, AccessControlException, UnsupportedRepositoryOperationException, RepositoryException {
+    public AccessControlPolicy[] getApplicablePolicies(Principal principal) throws AccessDeniedException, AccessControlException, UnsupportedRepositoryOperationException, RepositoryException {
-        return editor.editPolicyTemplate(principal);
+        return editor.editAccessControlPolicies(principal);
+    /**
+     * @see AbstractAccessControlManager#getPrivilegeRegistry()
+     */
+    protected PrivilegeRegistry getPrivilegeRegistry() throws RepositoryException {
+        checkInitialized();
+        return privilegeRegistry;
+    }
+
-        // TODO: entries must be cleared if access permission to wsp change.
+        // TODO: entries must be cleared if access permission to wsp changes.

MOV26 MOV31 MOV31 UPD40 INS23 INS23 INS23 MOV83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 MOV43 MOV59 INS29 INS29 INS5 UPD42 INS5 INS42 INS8 MOV8 INS39 INS44 UPD5 UPD42 MOV44 MOV43 MOV43 MOV43 MOV8 UPD83 UPD43 UPD42 MOV43 UPD42 MOV42 UPD42 MOV42 MOV14 UPD42 MOV42 INS42 UPD65 MOV65 INS21 INS65 INS65 MOV43 INS85 INS60 INS25 INS41 INS43 INS85 MOV21 MOV21 INS41 MOV21 INS43 INS42 INS21 UPD43 MOV21 UPD42 MOV21 INS66 INS66 INS66 INS66 INS66 INS7 INS68 INS68 INS5 INS59 MOV27 INS8 INS8 INS42 INS42 INS32 INS8 INS42 INS32 UPD42 INS42 INS42 INS14 INS42 INS42 INS69 INS69 INS42 INS42 INS69 INS69 INS69 UPD42 UPD42 MOV43 INS85 INS42 INS21 INS21 UPD42 INS42 INS42 MOV32 INS54 UPD42 INS42 INS69 MOV42 UPD42 MOV42 MOV42 INS42 UPD42 UPD42 MOV69 UPD42 UPD42 UPD42 MOV44 MOV44 INS43 INS42 INS43 INS39 MOV43 INS43 INS39 UPD42 UPD42 INS7 INS7 UPD42 MOV42 MOV42 INS8 INS12 MOV43 INS42 INS42 INS42 INS42 UPD42 INS40 INS42 INS32 INS42 INS3 MOV60 MOV41 INS44 INS8 INS40 UPD42 INS42 UPD42 MOV42 MOV42 INS5 INS34 INS5 MOV43 INS42 INS21 MOV43 INS85 INS43 INS85 INS32 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS42 INS27 INS45 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL34 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL66 DEL66 DEL65 DEL29 DEL23 DEL42 DEL59 DEL60 DEL34 DEL42 DEL42 DEL32 DEL41 DEL42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL43 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL43 DEL62 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL32 DEL41 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL43 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL43 DEL85 DEL5 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL69 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL48 DEL41 DEL8 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL48 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL48 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL48 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL48 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL31 DEL42 DEL43 DEL69 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL48