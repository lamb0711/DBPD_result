JCR-2255  activity storage path


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803470 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.RepositoryImpl;
+     * The path of the jcr:system node: /jcr:system
+     */
+    private static final Path SYSTEM_PATH;
+
+    /**
-    private static final Path VERSION_STORAGE_PATH;
+    private static final Path HISTORIES_PATH;
-            builder.addLast(NameConstants.JCR_VERSIONSTORAGE);
-            VERSION_STORAGE_PATH = builder.getPath();
+            SYSTEM_PATH = builder.getPath();
+            HISTORIES_PATH = builder.getPath();
+
+            builder = new PathBuilder();
+            builder.addRoot();
+            builder.addLast(NameConstants.JCR_SYSTEM);
+     * Persistent root node of the version histories.
+     */
+    private final NodeStateEx historyRoot;
+
+    /**
+     * Persistent root node of the activities.
+     */
+    private final NodeStateEx activitiesRoot;
+    
+    /**
-     * @param rootParentId node id of the version storage parent (i.e. jcr:system)
-     * @param storageId node id of the version storage (i.e. jcr:versionStorage)
+     * @param systemId node id of the version storage parent (i.e. jcr:system)
+     * @param historiesId node id of the version storage (i.e. jcr:versionStorage)
-                              NodeId rootParentId,
-                              NodeId storageId,
+                              NodeId systemId,
+                              NodeId historiesId,
-        super(ntReg);
+        super(ntReg, historiesId, activitiesId);
+            // need to recreate the jcr:system node in this pm, too. so that
+            // it can act as parent for the histories and activities.
+            if (false && !pMgr.exists(systemId)) {
+                NodeState root = pMgr.createNew(systemId);
+                root.setParentId(RepositoryImpl.ROOT_NODE_ID);
+                root.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_ROOT).getApplicableChildNodeDef(
+                        NameConstants.JCR_SYSTEM, NameConstants.REP_SYSTEM, ntReg).getId());
+                root.setNodeTypeName(NameConstants.REP_SYSTEM);
+                PropertyState pt = pMgr.createNew(new PropertyId(systemId, NameConstants.JCR_PRIMARYTYPE));
+                pt.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_SYSTEM).getApplicablePropertyDef(
+                        NameConstants.JCR_PRIMARYTYPE, PropertyType.NAME, false).getId());
+                pt.setMultiValued(false);
+                pt.setType(PropertyType.NAME);
+                pt.setValues(new InternalValue[]{InternalValue.create(NameConstants.REP_SYSTEM)});
+                root.addPropertyName(pt.getName());
+
+                // add version storage and activities as child node entries
+                root.addChildNodeEntry(NameConstants.JCR_VERSIONSTORAGE, historiesId);
+                root.addChildNodeEntry(NameConstants.JCR_ACTIVITIES, activitiesId);
+
+                ChangeLog cl = new ChangeLog();
+                cl.added(root);
+                cl.added(pt);
+                pMgr.store(cl);
+            }
+
-            if (!pMgr.exists(storageId)) {
-                NodeState root = pMgr.createNew(storageId);
-                root.setParentId(rootParentId);
+            if (!pMgr.exists(historiesId)) {
+                NodeState root = pMgr.createNew(historiesId);
+                root.setParentId(systemId);
-                PropertyState pt = pMgr.createNew(new PropertyId(storageId, NameConstants.JCR_PRIMARYTYPE));
-                pt.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_SYSTEM).getApplicablePropertyDef(
+                PropertyState pt = pMgr.createNew(new PropertyId(historiesId, NameConstants.JCR_PRIMARYTYPE));
+                pt.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_VERSIONSTORAGE).getApplicablePropertyDef(
-                root.setParentId(storageId);
-                root.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_VERSIONSTORAGE).getApplicableChildNodeDef(
+                root.setParentId(systemId);
+                root.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_SYSTEM).getApplicableChildNodeDef(
-
-                // add activities as child
-                NodeState historyState = pMgr.load(storageId);
-                historyState.addChildNodeEntry(NameConstants.JCR_ACTIVITIES, activitiesId);
-                                
-                cl.modified(historyState);
-            sharedStateMgr = createItemStateManager(pMgr, storageId, ntReg, cacheFactory, ismLocking);
+            sharedStateMgr = createItemStateManager(pMgr, systemId, ntReg, cacheFactory, ismLocking);
-            NodeState nodeState = (NodeState) stateMgr.getItemState(storageId);
+            NodeState nodeState = (NodeState) stateMgr.getItemState(historiesId);
-            versProvider = new VersionItemStateProvider(
-                    getHistoryRootId(), sharedStateMgr);
+            versProvider = new VersionItemStateProvider(historiesId, activitiesId, sharedStateMgr);
-        if (id.equals(getHistoryRootId())) {
+        if (id.equals(historiesId)) {
+            return null;
+        }
+        if (id.equals(activitiesId)) {
-     * returns the id of the version history root node
+     * returns the version history root node
-     * @return the id of the version history root node
+     * @return the version history root node
-    NodeId getHistoryRootId() {
-        return historyRoot.getState().getNodeId();
+    protected NodeStateEx getHistoryRoot() {
+        return historyRoot;
+    }
+
+    /**
+     * returns the activities root node
+     *
+     * @return the activities root node
+     */
+    protected NodeStateEx getActivitiesRoot() {
+        return activitiesRoot;
-            return obsMgr.createEventStateCollection(source, VERSION_STORAGE_PATH);
+            return obsMgr.createEventStateCollection(source, SYSTEM_PATH);

INS26 INS40 INS23 INS23 INS23 MOV44 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS83 UPD43 UPD42 INS29 INS83 INS43 INS42 INS8 INS65 INS42 INS42 UPD42 INS65 INS42 INS42 INS65 INS42 INS42 UPD42 UPD42 INS25 UPD42 INS65 INS65 INS42 INS41 INS66 MOV21 INS66 INS66 UPD42 UPD42 INS42 INS42 INS32 INS8 UPD66 UPD66 INS42 INS66 INS66 INS42 INS21 INS21 INS21 INS25 UPD42 MOV42 INS42 INS42 INS42 INS41 INS7 INS7 INS32 INS27 INS8 MOV43 INS33 UPD42 UPD42 INS42 INS32 INS42 INS14 INS42 INS42 UPD40 INS9 INS38 INS60 INS21 INS21 INS21 MOV60 MOV21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS60 INS21 INS42 INS42 INS43 INS32 MOV43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 UPD42 MOV43 INS43 INS59 INS32 UPD42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS9 INS42 INS42 INS40 INS42 INS42 INS3 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS5 INS4 INS42 INS42 INS43 UPD42 INS42 INS42 INS14 INS32 INS42 INS32 INS42 INS40 INS40 INS42 UPD42 INS43 INS85 INS32 INS42 INS43 INS42 INS40 INS32 INS42 INS40 INS40 INS9 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 UPD40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32