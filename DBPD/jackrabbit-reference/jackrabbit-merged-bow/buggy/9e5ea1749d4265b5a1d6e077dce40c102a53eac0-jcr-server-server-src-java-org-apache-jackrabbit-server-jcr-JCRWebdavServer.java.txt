JCR-337 - Remove jcr dependency from dav-library
JCR-343 - Report#init limits the Report interface to DeltaV compliant resources
JCR-340 - ValuesProperty missing property type information
JCR-342 - DavResource#getDavSession() missing
JCR-344 - DeltaVResource lists MKWORKSPACE in the method constant.
JCR-345 - DavException does not allow to specify an exception cause

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@385540 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.DavServletRequest;
+import org.apache.jackrabbit.webdav.jcr.JcrDavSession;
-    private class DavSessionImpl implements DavSession {
-
-        /** the underlying jcr session */
-        private final Session session;
+    private class DavSessionImpl extends JcrDavSession {
-         * @param request
-         * @throws DavException in case a {@link javax.jcr.LoginException} or {@link javax.jcr.RepositoryException} occurs.
+         * @param session
-        private DavSessionImpl(DavServletRequest request) throws DavException {
-            try {
-                String workspaceName = request.getRequestLocator().getWorkspaceName();
-                session = sessionProvider.getSession(request, repository, workspaceName);
-            } catch (LoginException e) {
-                // LoginException results in UNAUTHORIZED,
-                throw new JcrDavException(e);
-            } catch (RepositoryException e) {
-                // RepositoryException results in FORBIDDEN
-                throw new JcrDavException(e);
-            } catch (ServletException e) {
-                throw new DavException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
-            }
+        private DavSessionImpl(Session session) {
+            super(session);
-
-        /**
-         * @see DavSession#getRepositorySession()
-         */
-        public Session getRepositorySession() {
-            return session;
-        }
-
-        /**
-         * @see DavSession#addLockToken(String)
-         */
-        public void addLockToken(String token) {
-            session.addLockToken(token);
-        }
-
-        /**
-         * @see DavSession#getLockTokens()
-         */
-        public String[] getLockTokens() {
-            return session.getLockTokens();
-        }
-
-        /**
-         * @see DavSession#removeLockToken(String)
-         */
-        public void removeLockToken(String token) {
-            session.removeLockToken(token);
-        }
-                session = new DavSessionImpl(request);
+                Session repSession = getRepositorySession(request);
+                session = new DavSessionImpl(repSession);
-                log.info("login: User '" + session.getRepositorySession().getUserID() + "' logged in.");
+                log.info("login: User '" + repSession.getUserID() + "' logged in.");
-                log.info("login: Retrieved cached session for user '" + session.getRepositorySession().getUserID() + "'");
+                log.info("login: Retrieved cached session for user '" + getUserID(session) + "'");
-                    sessionProvider.releaseSession(session.getRepositorySession());
-                    log.info("Login: User '" + session.getRepositorySession().getUserID() + "' logged out");
+                    try {
+                        Session repSession = DavSessionImpl.getRepositorySession(session);
+                        sessionProvider.releaseSession(repSession);
+                        log.info("Login: User '" + getUserID(session) + "' logged out");
+                    } catch (DavException e) {
+                        // should not occure, since we original built a DavSessionImpl
+                        // that wraps a repository session.
+                        log.error("Unexpected error: " + e.getMessage(), e.getCause());
+                    }
+
+        /**
+         * Retrieve the {@link Session} object for the given request.
+         *
+         * @param request
+         * @return JCR session object used to build the <code>DavSession</code>
+         * @throws DavException
+         * @throws DavException in case a {@link javax.jcr.LoginException} or {@link javax.jcr.RepositoryException} occurs.
+         */
+        private Session getRepositorySession(WebdavRequest request) throws DavException {
+            try {
+                String workspaceName = request.getRequestLocator().getWorkspaceName();
+                return sessionProvider.getSession(request, repository, workspaceName);
+            } catch (LoginException e) {
+                // LoginException results in UNAUTHORIZED,
+                throw new JcrDavException(e);
+            } catch (RepositoryException e) {
+                // RepositoryException results in FORBIDDEN
+                throw new JcrDavException(e);
+            } catch (ServletException e) {
+                throw new DavException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+            }
+        }
+
+        private String getUserID(DavSession session) {
+            try {
+                Session s = DavSessionImpl.getRepositorySession(session);
+                if (s != null) {
+                    return s.getUserID();
+                }
+            } catch (DavException e) {
+                log.error(e);
+            }
+            // fallback
+            return session.toString();
+        }

MOV26 UPD40 MOV31 UPD43 MOV31 INS31 UPD42 UPD83 UPD42 MOV43 INS42 INS83 MOV43 INS42 INS44 INS8 MOV65 UPD65 MOV43 UPD42 INS46 INS65 INS65 INS65 UPD43 INS43 INS42 INS54 INS41 INS42 INS42 INS66 INS65 INS66 INS66 INS42 UPD42 INS42 INS8 INS12 INS32 INS60 INS42 INS41 INS60 INS25 INS44 INS8 INS42 INS42 INS43 INS59 INS8 MOV32 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS32 MOV21 MOV21 INS54 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS32 INS42 INS42 UPD42 INS32 INS8 INS12 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 MOV21 MOV21 INS44 INS8 INS42 INS42 INS43 INS59 INS43 INS42 INS21 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL39 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL8 DEL42 DEL42 DEL7 DEL21