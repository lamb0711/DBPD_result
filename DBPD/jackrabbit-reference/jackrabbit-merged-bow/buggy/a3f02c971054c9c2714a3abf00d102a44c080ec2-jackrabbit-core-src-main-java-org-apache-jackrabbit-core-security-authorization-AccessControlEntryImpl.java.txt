JCR-2700 : Allow for wildcard restriction in resource-based ACEs

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@983906 13f79535-47bb-0310-9956-ffa450edef68

-import java.security.Principal;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
+import org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.apache.jackrabbit.value.ValueHelper;
+import javax.jcr.NamespaceException;
+import javax.jcr.RepositoryException;
-
-import org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry;
-import org.apache.jackrabbit.value.ValueHelper;
+import java.security.Principal;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
-    private final Map<String, Value> restrictions;
-
-    /**
-     * Value factory
-     */
-    private final ValueFactory valueFactory;
+    private final Map<Name, Value> restrictions;
+     * @throws RepositoryException if another error occurs.
-            throws AccessControlException {
-        this(principal, privileges, true, null, null);
+            throws AccessControlException, RepositoryException {
+        this(principal, privileges, true, null);
-     * @param valueFactory the value factory.
+     * @throws RepositoryException if another error occurs.
-                                     boolean isAllow, Map<String, Value> restrictions,
-                                     ValueFactory valueFactory)
-            throws AccessControlException {
+                                     boolean isAllow, Map<String, Value> restrictions)
+            throws AccessControlException, RepositoryException {
-        this.valueFactory = valueFactory;
-        
+
-            this.restrictions = new HashMap<String, Value>(restrictions.size());
+            this.restrictions = new HashMap<Name, Value>(restrictions.size());
-                value = ValueHelper.copy(value, valueFactory);
-                this.restrictions.put(key, value);
+                value = ValueHelper.copy(value, getValueFactory());
+                this.restrictions.put(getResolver().getQName(key), value);
+            }
+        }
+    }
+
+    /**
+     * 
+     * @param base
+     * @param privileges
+     * @param isAllow
+     * @throws AccessControlException
+     */
+    protected AccessControlEntryImpl(AccessControlEntryImpl base, Privilege[] privileges, boolean isAllow) throws AccessControlException {
+        // make sure no abstract privileges are passed.
+        for (Privilege privilege : privileges) {
+            if (privilege.isAbstract()) {
+                throw new AccessControlException("Privilege " + privilege + " is abstract.");
+            }
+        }
+        this.principal = base.principal;
+        this.privileges = privileges;
+        this.privilegeBits = PrivilegeRegistry.getBits(privileges);
+        this.allow = isAllow;
+
+        if (base.restrictions == null) {
+            this.restrictions = Collections.emptyMap();
+        } else {
+            this.restrictions = new HashMap<Name, Value>(base.restrictions.size());
+            // validate the passed restrictions and fill the map
+            for (Name name : restrictions.keySet()) {
+                Value value = restrictions.get(name);
+                value = ValueHelper.copy(value, getValueFactory());
+                this.restrictions.put(name, value);
+     * Returns the restrictions defined for this entry.
+     *
+     * @return the restrictions defined for this entry.
+     */
+    public Map<Name,Value> getRestrictions() {
+        return Collections.unmodifiableMap(restrictions);
+    }
+
+    /**
+     * @param restrictionName
+     * @return The restriction with the specified name or <code>null</code>.
+     */
+    public Value getRestriction(Name restrictionName) {
+        return ValueHelper.copy(restrictions.get(restrictionName), getValueFactory());
+    }
+
+    /**
+     * @return Returns the name resolver used to convert JCR names to Name and vice versa.
+     */
+    protected abstract NameResolver getResolver();
+
+    /**
+     * @return The value factory to be used.
+     */
+    protected abstract ValueFactory getValueFactory();
+
+    /**
-    public String[] getRestrictionNames() {
-        return restrictions.keySet().toArray(new String[restrictions.size()]);
+    public String[] getRestrictionNames() throws NamespaceException {
+        String[] restrNames = new String[restrictions.size()];
+        int i = 0;
+        for (Name n : restrictions.keySet()) {
+            restrNames[i] = getResolver().getJCRName(n);
+            i++;
+        }
+        return restrNames;
-    public Value getRestriction(String restrictionName) {
-        if (restrictions.containsKey(restrictionName)) {
-            return ValueHelper.copy(restrictions.get(restrictionName), valueFactory);
-        } else {
-            return null;
-        }
+    public Value getRestriction(String restrictionName) throws RepositoryException {
+        return getRestriction(getResolver().getQName(restrictionName));

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 UPD74 INS43 MOV65 INS43 INS29 INS83 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS43 INS42 INS44 MOV8 INS29 INS83 INS83 INS43 INS42 INS29 INS83 INS83 MOV43 INS42 INS5 INS43 INS8 INS43 UPD43 INS65 INS42 UPD65 UPD42 MOV42 INS65 INS65 INS65 INS65 INS43 INS42 INS5 INS42 INS39 INS42 INS42 INS70 INS21 INS21 INS21 INS21 INS25 INS65 INS65 INS43 INS43 INS43 INS41 INS65 INS65 INS42 INS43 INS42 INS65 INS42 UPD65 MOV65 INS43 INS85 INS42 INS60 INS60 INS70 INS41 INS42 INS41 UPD42 INS42 INS66 UPD42 UPD66 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS44 INS42 INS8 INS7 INS7 INS7 INS7 INS27 INS8 INS8 INS66 INS66 INS42 INS42 INS42 INS32 INS42 INS66 INS42 INS66 UPD66 INS42 MOV5 INS59 INS39 INS59 INS44 INS32 INS8 INS42 INS32 INS42 INS43 INS42 INS25 INS22 INS40 INS22 INS42 INS22 INS32 INS22 INS42 INS40 INS33 INS21 INS21 INS70 INS42 INS42 INS42 INS32 INS42 MOV3 INS42 INS34 INS43 INS42 INS42 INS42 INS21 INS21 UPD42 MOV42 INS32 INS42 INS32 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS7 INS7 INS44 MOV32 INS8 UPD42 MOV42 INS42 INS7 INS37 INS32 INS42 MOV42 INS42 INS42 INS53 INS22 INS32 INS22 INS14 INS43 INS42 INS60 INS21 INS21 INS2 INS32 INS42 UPD42 MOV42 UPD74 INS14 INS52 INS42 INS42 INS42 INS52 INS42 INS74 INS32 INS42 INS43 INS59 INS7 INS32 INS42 INS42 INS32 INS42 INS42 UPD43 INS32 INS43 INS27 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS22 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS32 INS32 INS42 MOV42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS52 INS42 UPD42 MOV42 INS42 INS42 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL33 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL32 DEL41 DEL8 DEL32 DEL33 DEL41 DEL8 DEL25