JCR-1590: JSR 283: Locking

More code cleanup: Inline LockToken into LockInfo and make LockInfo member variables private.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803535 13f79535-47bb-0310-9956-ffa450edef68

-     * Lock token
+     * Lock holder node id. Used also as the lock token.
-    protected final LockToken lockToken;
+    private final NodeId id;
-    protected final boolean sessionScoped;
+    private final boolean sessionScoped;
-    protected final boolean deep;
+    private final boolean deep;
-    protected final String lockOwner;
+    private final String lockOwner;
-     * @param lockToken     lock token
-     * @param sessionScoped whether lock token is session scoped
-     * @param deep          whether lock is deep
-     * @param lockOwner     owner of lock
-     */
-    protected LockInfo(LockToken lockToken, boolean sessionScoped, boolean deep,
-                    String lockOwner) {
-        this(lockToken, sessionScoped, deep, lockOwner, TIMEOUT_INFINITE);
-    }
-
-    /**
-     * Create a new instance of this class.
-     *
-     * @param lockToken     lock token
+     * @param id            lock holder node id
-    protected LockInfo(LockToken lockToken, boolean sessionScoped, boolean deep,
-                            String lockOwner, long timeoutHint) {
-        this.lockToken = lockToken;
+    protected LockInfo(
+            NodeId id, boolean sessionScoped, boolean deep,
+            String lockOwner, long timeoutHint) {
+        this.id = id;
-    public LockToken getLockToken() {
-        return lockToken;
+    public String getLockToken() {
+        String uuid = id.toString();
+        return uuid + "-" + getLockTokenCheckDigit(uuid);
-        return lockToken.getId();
+        return id;
+    /**
+     * Parse a lock token string representation and return the lock
+     * holder node id.
+     *
+     * @param token string representation of lock token
+     * @return lock holder node id
+     * @throws IllegalArgumentException if some field is illegal
+     */
+    public static NodeId parseLockToken(String token)
+            throws IllegalArgumentException {
+        int sep = token.lastIndexOf('-');
+        if (sep == -1 || sep == token.length() - 1) {
+            throw new IllegalArgumentException("Separator not found.");
+        }
+        String uuid = token.substring(0, sep);
+        if (getLockTokenCheckDigit(uuid) != token.charAt(token.length() - 1)) {
+            throw new IllegalArgumentException("Bad check digit.");
+        }
+        return NodeId.valueOf(uuid);
+    }
+
+    /**
+     * Return the check digit for a lock token, given by its UUID
+     * @param uuid uuid
+     * @return check digit
+     */
+    private static char getLockTokenCheckDigit(String uuid) {
+        int result = 0;
+
+        int multiplier = 36;
+        for (int i = 0; i < uuid.length(); i++) {
+            char c = uuid.charAt(i);
+            if (c >= '0' && c <= '9') {
+                int num = c - '0';
+                result += multiplier * num;
+                multiplier--;
+            } else if (c >= 'A' && c <= 'F') {
+                int num = c - 'A' + 10;
+                result += multiplier * num;
+                multiplier--;
+            } else if (c >= 'a' && c <= 'f') {
+                int num = c - 'a' + 10;
+                result += multiplier * num;
+                multiplier--;
+            }
+        }
+
+        int rem = result % 37;
+        if (rem != 0) {
+            rem = 37 - rem;
+        }
+        if (rem >= 0 && rem <= 9) {
+            return (char) ('0' + rem);
+        } else if (rem >= 10 && rem <= 35) {
+            return (char) ('A' + rem - 10);
+        } else {
+            return '+';
+        }
+    }
+

MOV31 MOV31 INS31 UPD83 UPD43 UPD83 UPD83 UPD83 MOV29 INS83 INS43 INS42 INS8 UPD83 INS83 INS43 UPD42 INS43 INS8 INS29 INS83 UPD83 INS39 INS42 INS44 INS8 UPD42 UPD42 UPD43 UPD42 INS42 INS60 INS41 UPD65 UPD65 INS42 UPD43 UPD42 INS42 INS60 INS25 INS60 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS60 INS60 INS24 INS60 INS25 INS25 UPD66 UPD42 UPD66 UPD42 INS43 INS59 INS27 INS42 UPD66 INS66 UPD42 UPD66 UPD66 UPD42 UPD66 UPD42 INS39 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS66 INS42 INS66 INS66 UPD42 MOV42 INS39 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS39 INS59 INS27 INS8 INS27 INS8 INS25 UPD42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS27 INS27 INS53 MOV42 INS42 INS32 INS32 INS32 INS53 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS42 INS27 INS42 INS34 INS21 INS27 INS27 MOV41 INS27 INS8 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS38 INS42 INS27 INS14 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS27 INS14 INS42 INS34 INS42 INS42 INS39 INS59 INS27 INS8 INS25 INS42 INS34 INS7 INS42 INS34 INS42 INS34 INS11 INS27 INS27 INS41 INS41 INS34 INS32 INS34 INS43 INS45 INS32 INS34 INS43 INS45 INS42 INS32 INS27 INS27 INS60 INS21 INS21 INS27 INS8 INS25 INS42 INS27 INS39 INS36 INS42 INS34 INS42 INS34 INS11 INS13 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS13 INS39 INS59 INS7 INS37 INS27 INS27 INS60 INS21 INS21 INS27 INS8 INS34 INS42 INS27 INS39 INS36 INS42 INS27 INS42 INS27 INS42 INS42 INS13 INS42 INS13 INS39 INS59 INS7 INS37 INS27 INS27 INS60 INS21 INS21 INS13 INS42 INS27 INS42 INS13 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS42 INS13 INS42 INS13 INS39 INS59 INS7 INS37 INS27 INS34 INS27 INS34 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS13 INS42 INS42 INS13 INS27 INS34 INS42 INS42 INS42 INS13 DEL42 DEL42 DEL32 DEL42 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL17 DEL8 DEL42 DEL43 DEL42 DEL8