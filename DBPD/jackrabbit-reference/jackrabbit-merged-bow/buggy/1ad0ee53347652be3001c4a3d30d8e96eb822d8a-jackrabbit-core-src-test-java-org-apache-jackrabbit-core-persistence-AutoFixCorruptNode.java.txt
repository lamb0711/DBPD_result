JCR-3115: Versioning fixup leaves persistence in a state where the node can't be made versionable again -- add test case

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1185692 13f79535-47bb-0310-9956-ffa450edef68

+    public void testMissingRootVersion() throws Exception {
+
+        // new repository
+        TransientRepository rep = new TransientRepository(new File(TEST_DIR));
+        Session s = openSession(rep, false);
+
+        String oldVersionRecoveryProp = System
+                .getProperty("org.apache.jackrabbit.version.recovery");
+
+        try {
+            Node root = s.getRootNode();
+
+            // add nodes /test and /test/missing
+            Node test = root.addNode("test");
+            test.addMixin("mix:versionable");
+
+            s.save();
+
+            Node vhr = s.getWorkspace().getVersionManager()
+                    .getVersionHistory(test.getPath());
+
+            assertNotNull(vhr);
+
+            Node brokenNode = vhr.getNode("jcr:rootVersion");
+            String vhrId = vhr.getIdentifier();
+            
+            UUID destroy = UUID.fromString(brokenNode.getIdentifier());
+            s.logout();
+            
+            destroyBundle(destroy, "version");
+
+            s = openSession(rep, false);
+
+            ConsistencyReport report = TestHelper.checkVersionStoreConsistency(s, false);
+            assertTrue("Report should have reported broken nodes", !report.getItems().isEmpty());
+            
+            try {
+                test = s.getRootNode().getNode("test");
+                vhr = s.getWorkspace().getVersionManager()
+                        .getVersionHistory(test.getPath());
+                fail("should not get here");
+            } catch (Exception ex) {
+                // expected
+            }
+
+            s.logout();
+
+            System.setProperty("org.apache.jackrabbit.version.recovery", "true");
+
+            s = openSession(rep, false);
+
+            test = s.getRootNode().getNode("test");
+            // versioning should be disabled now
+            assertFalse(test.isNodeType("mix:versionable"));
+            
+            try {
+                // try to enable versioning again
+                test.addMixin("mix:versionable");
+                s.save();
+                
+                fail("enabling versioning succeeded unexpectedly");
+            }
+            catch (Exception e) {
+                // we expect this to fail
+            }
+            
+            s.logout();
+            
+            // now redo after running fixup on versioning storage
+            s = openSession(rep, false);
+
+            report = TestHelper.checkVersionStoreConsistency(s, true);
+            assertTrue("Report should have reported broken nodes", !report.getItems().isEmpty());
+            int reportitems = report.getItems().size();
+            
+            // problems should now be fixed
+            report = TestHelper.checkVersionStoreConsistency(s, false);
+            assertTrue("Some problems should have been fixed but are not: " + report, report.getItems().size() < reportitems);
+            
+            test = s.getRootNode().getNode("test");
+            // versioning should be disabled now
+            assertFalse(test.isNodeType("mix:versionable"));
+            
+            // try to enable versioning again
+            test.addMixin("mix:versionable");
+            s.save();
+            
+            Node oldVHR = s.getNodeByIdentifier(vhrId);
+            Node newVHR = s.getWorkspace().getVersionManager().getVersionHistory(test.getPath());
+
+            assertTrue("old and new version history path should be different: "
+                    + oldVHR.getPath() + " vs " + newVHR.getPath(), !oldVHR
+                    .getPath().equals(newVHR.getPath()));
+
+            // name should be same plus suffix
+            assertTrue(oldVHR.getName().startsWith(newVHR.getName()));
+            
+            // try a checkout / checkin
+            s.getWorkspace().getVersionManager().checkout(test.getPath());
+            s.getWorkspace().getVersionManager().checkin(test.getPath());
+            
+        } finally {
+            s.logout();
+            System.setProperty("org.apache.jackrabbit.version.recovery",
+                    oldVersionRecoveryProp == null ? ""
+                            : oldVersionRecoveryProp);
+        }
+    }
+

INS31 INS83 INS39 INS42 INS43 INS8 INS42 INS60 INS60 INS60 INS54 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS21 INS21 INS60 INS21 INS60 INS60 INS60 INS21 INS21 INS21 INS60 INS21 INS54 INS21 INS21 INS21 INS21 INS21 INS54 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS14 INS42 INS42 INS9 INS42 INS42 INS45 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS7 INS43 INS59 INS32 INS8 INS12 INS32 INS32 INS7 INS7 INS32 INS8 INS12 INS32 INS7 INS7 INS32 INS39 INS59 INS7 INS32 INS7 INS32 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS38 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS32 INS42 INS32 INS42 INS32 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS38 INS42 INS32 INS42 INS32 INS42 INS27 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS27 INS38 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS16 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS32 INS7 INS7 INS32 INS43 INS42 INS42 INS42 INS9 INS32 INS42 INS45 INS42 INS42 INS45 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS45 INS32 INS45 INS32 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42