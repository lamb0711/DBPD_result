JCR-4066: spi2dav: use HttpClient4 based WebDAV API in remoting code

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1774468 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.UnsupportedEncodingException;
-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HostConfiguration;
-import org.apache.commons.httpclient.HttpClient;
-import org.apache.commons.httpclient.HttpConnectionManager;
-import org.apache.commons.httpclient.HttpMethod;
-import org.apache.commons.httpclient.HttpStatus;
-import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
-import org.apache.commons.httpclient.auth.AuthScope;
-import org.apache.commons.httpclient.methods.GetMethod;
-import org.apache.commons.httpclient.methods.HeadMethod;
-import org.apache.commons.httpclient.methods.InputStreamRequestEntity;
-import org.apache.commons.httpclient.methods.RequestEntity;
-import org.apache.commons.httpclient.methods.StringRequestEntity;
-import org.apache.commons.httpclient.params.HttpConnectionManagerParams;
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpHost;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.client.AuthCache;
+import org.apache.http.client.CredentialsProvider;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpHead;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.client.methods.HttpRequestBase;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.client.protocol.HttpClientContext;
+import org.apache.http.entity.ContentType;
+import org.apache.http.entity.InputStreamEntity;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.auth.BasicScheme;
+import org.apache.http.impl.client.BasicAuthCache;
+import org.apache.http.impl.client.BasicCredentialsProvider;
+import org.apache.http.impl.client.HttpClientBuilder;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
+import org.apache.http.protocol.HttpContext;
-import org.apache.jackrabbit.webdav.client.methods.CheckinMethod;
-import org.apache.jackrabbit.webdav.client.methods.CheckoutMethod;
-import org.apache.jackrabbit.webdav.client.methods.CopyMethod;
-import org.apache.jackrabbit.webdav.client.methods.DavMethod;
-import org.apache.jackrabbit.webdav.client.methods.DavMethodBase;
-import org.apache.jackrabbit.webdav.client.methods.DeleteMethod;
-import org.apache.jackrabbit.webdav.client.methods.LabelMethod;
-import org.apache.jackrabbit.webdav.client.methods.LockMethod;
-import org.apache.jackrabbit.webdav.client.methods.MergeMethod;
-import org.apache.jackrabbit.webdav.client.methods.MkColMethod;
-import org.apache.jackrabbit.webdav.client.methods.MkWorkspaceMethod;
-import org.apache.jackrabbit.webdav.client.methods.MoveMethod;
-import org.apache.jackrabbit.webdav.client.methods.OptionsMethod;
-import org.apache.jackrabbit.webdav.client.methods.OrderPatchMethod;
-import org.apache.jackrabbit.webdav.client.methods.PollMethod;
-import org.apache.jackrabbit.webdav.client.methods.PropFindMethod;
-import org.apache.jackrabbit.webdav.client.methods.PropPatchMethod;
-import org.apache.jackrabbit.webdav.client.methods.PutMethod;
-import org.apache.jackrabbit.webdav.client.methods.ReportMethod;
-import org.apache.jackrabbit.webdav.client.methods.SearchMethod;
-import org.apache.jackrabbit.webdav.client.methods.SubscribeMethod;
-import org.apache.jackrabbit.webdav.client.methods.UnLockMethod;
-import org.apache.jackrabbit.webdav.client.methods.UnSubscribeMethod;
-import org.apache.jackrabbit.webdav.client.methods.UpdateMethod;
+import org.apache.jackrabbit.webdav.client.methods.BaseDavRequest;
+import org.apache.jackrabbit.webdav.client.methods.HttpCheckin;
+import org.apache.jackrabbit.webdav.client.methods.HttpCheckout;
+import org.apache.jackrabbit.webdav.client.methods.HttpCopy;
+import org.apache.jackrabbit.webdav.client.methods.HttpDelete;
+import org.apache.jackrabbit.webdav.client.methods.HttpLabel;
+import org.apache.jackrabbit.webdav.client.methods.HttpLock;
+import org.apache.jackrabbit.webdav.client.methods.HttpMerge;
+import org.apache.jackrabbit.webdav.client.methods.HttpMkcol;
+import org.apache.jackrabbit.webdav.client.methods.HttpMkworkspace;
+import org.apache.jackrabbit.webdav.client.methods.HttpMove;
+import org.apache.jackrabbit.webdav.client.methods.HttpOptions;
+import org.apache.jackrabbit.webdav.client.methods.HttpOrderpatch;
+import org.apache.jackrabbit.webdav.client.methods.HttpPoll;
+import org.apache.jackrabbit.webdav.client.methods.HttpPropfind;
+import org.apache.jackrabbit.webdav.client.methods.HttpProppatch;
+import org.apache.jackrabbit.webdav.client.methods.HttpReport;
+import org.apache.jackrabbit.webdav.client.methods.HttpSearch;
+import org.apache.jackrabbit.webdav.client.methods.HttpSubscribe;
+import org.apache.jackrabbit.webdav.client.methods.HttpUnlock;
+import org.apache.jackrabbit.webdav.client.methods.HttpUnsubscribe;
+import org.apache.jackrabbit.webdav.client.methods.HttpUpdate;
+import org.apache.jackrabbit.webdav.client.methods.XmlEntity;
+import org.apache.jackrabbit.webdav.ordering.OrderPatch;
+import org.apache.jackrabbit.webdav.ordering.Position;
-import org.apache.jackrabbit.webdav.search.SearchConstants;
-    private final HostConfiguration hostConfig;
+    private final HttpHost httpHost;
-    private final HttpConnectionManager connectionManager;
+    private final HttpClientBuilder httpClientBuilder;
-            hostConfig = new HostConfiguration();
-            hostConfig.setHost(repositoryUri.toASCIIString());
+            httpHost = new HttpHost(repositoryUri.getHost(), repositoryUri.getPort());
-        connectionManager = new MultiThreadedHttpConnectionManager();
+        PoolingHttpClientConnectionManager cmgr = new PoolingHttpClientConnectionManager();
-            HttpConnectionManagerParams connectionParams = connectionManager.getParams();
-            connectionParams.setDefaultMaxConnectionsPerHost(maximumHttpConnections);
-            connectionParams.setMaxTotalConnections(maximumHttpConnections);
+            cmgr.setDefaultMaxPerRoute(maximumHttpConnections);
+            cmgr.setMaxTotal(maximumHttpConnections);
+        httpClientBuilder = HttpClients.custom().setConnectionManager(cmgr);
-    private static boolean isUnLockMethod(DavMethod method) {
-        int code = DavMethods.getMethodCode(method.getName());
+    private static boolean isUnLockMethod(HttpUriRequest request) {
+        int code = DavMethods.getMethodCode(request.getMethod());
-    protected static void initMethod(HttpMethod method, SessionInfo sessionInfo, boolean addIfHeader) throws RepositoryException {
+    protected static void initMethod(HttpUriRequest request, SessionInfo sessionInfo, boolean addIfHeader) throws RepositoryException {
-                method.setRequestHeader(ifH.getHeaderName(), ifH.getHeaderValue());
+                request.setHeader(ifH.getHeaderName(), ifH.getHeaderValue());
-        initMethod(method, sessionInfo);
+        initMethod(request, sessionInfo);
-    protected static void initMethod(HttpMethod method, SessionInfo sessionInfo) throws RepositoryException {
+    protected static void initMethod(HttpUriRequest request, SessionInfo sessionInfo) throws RepositoryException {
-        boolean isReadAccess = readMethods.contains(method.getName());
-        boolean needsSessionId = !isReadAccess || "POLL".equals(method.getName());
+        boolean isReadAccess = readMethods.contains(request.getMethod());
+        boolean needsSessionId = !isReadAccess || "POLL".equals(request.getMethod());
-            StringBuilder linkHeaderField = new StringBuilder();
-
-            String sessionIdentifier = ((SessionInfoImpl) sessionInfo)
-                    .getSessionIdentifier();
-            linkHeaderField.append("<").append(sessionIdentifier).append(">; rel=\"")
-                    .append(JcrRemotingConstants.RELATION_REMOTE_SESSION_ID).append("\"");
-
-            String userdata = ((SessionInfoImpl) sessionInfo).getUserData();
-            if (userdata != null && ! isReadAccess) {
-                String escaped = Text.escape(userdata);
-                linkHeaderField.append(", <data:,").append(escaped).append(">; rel=\"")
-                    .append(JcrRemotingConstants.RELATION_USER_DATA).append("\"");
-            }
-
-            method.addRequestHeader("Link", linkHeaderField.toString());
+            request.addHeader("Link", generateLinkHeaderFieldValue(sessionInfo, isReadAccess));
-    private static void initMethod(DavMethod method, BatchImpl batchImpl, boolean addIfHeader) throws RepositoryException {
-        initMethod(method, batchImpl.sessionInfo,  addIfHeader);
+    private static String generateLinkHeaderFieldValue(SessionInfo sessionInfo, boolean isReadAccess) {
+        StringBuilder linkHeaderField = new StringBuilder();
+
+        String sessionIdentifier = ((SessionInfoImpl) sessionInfo).getSessionIdentifier();
+        linkHeaderField.append("<").append(sessionIdentifier).append(">; rel=\"")
+                .append(JcrRemotingConstants.RELATION_REMOTE_SESSION_ID).append("\"");
+
+        String userdata = ((SessionInfoImpl) sessionInfo).getUserData();
+        if (userdata != null && !isReadAccess) {
+            String escaped = Text.escape(userdata);
+            linkHeaderField.append(", <data:,").append(escaped).append(">; rel=\"").append(JcrRemotingConstants.RELATION_USER_DATA)
+                    .append("\"");
+        }
+        return linkHeaderField.toString();
+    }
+
+    private static void initMethod(HttpUriRequest request, BatchImpl batchImpl, boolean addIfHeader) throws RepositoryException {
+        initMethod(request, batchImpl.sessionInfo, addIfHeader);
-        method.setRequestHeader(ch.getHeaderName(), ch.getHeaderValue());
+        request.setHeader(ch.getHeaderName(), ch.getHeaderValue());
-            client = new HttpClient(connectionManager);
-            client.setHostConfiguration(hostConfig);
-            // NOTE: null credentials only work if 'missing-auth-mapping' param is
-            // set on the server
-            org.apache.commons.httpclient.Credentials creds = null;
+            client = httpClientBuilder.build();
-                creds = ((SessionInfoImpl) sessionInfo).getCredentials().getCredentials();
-                // always send authentication not waiting for 401
-                client.getParams().setAuthenticationPreemptive(true);
+                clients.put(clientKey, client);
+                log.debug("Created Client " + client + " for SessionInfo " + sessionInfo);
-            client.getState().setCredentials(AuthScope.ANY, creds);
-            clients.put(clientKey, client);
-            log.debug("Created Client " + client + " for SessionInfo " + sessionInfo);
+    protected HttpContext getContext(SessionInfo sessionInfo) throws RepositoryException {
+        HttpClientContext result = HttpClientContext.create();
+        if (sessionInfo != null) {
+            checkSessionInfo(sessionInfo);
+            org.apache.http.auth.Credentials creds = ((SessionInfoImpl) sessionInfo).getCredentials().getHttpCredentials();
+            if (creds != null) {
+                CredentialsProvider credsProvider = new BasicCredentialsProvider();
+                credsProvider.setCredentials(new org.apache.http.auth.AuthScope(httpHost.getHostName(), httpHost.getPort()), creds);
+                BasicScheme basicAuth = new BasicScheme();
+                AuthCache authCache = new BasicAuthCache();
+                authCache.put(httpHost, basicAuth);
+                result.setCredentialsProvider(credsProvider);
+                result.setAuthCache(authCache);
+            }
+        }
+        return result;
+    }
+
-    private void execute(DavMethod method, SessionInfo sessionInfo) throws RepositoryException {
+    private HttpResponse execute(BaseDavRequest request, SessionInfo sessionInfo) throws RepositoryException {
-            initMethod(method, sessionInfo, !isUnLockMethod(method));
+            initMethod(request, sessionInfo, !isUnLockMethod(request));
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
-
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+            return response;
-            throw ExceptionConverter.generate(e, method);
-        } finally {
-            if (method != null) {
-                method.releaseConnection();
-            }
+            throw ExceptionConverter.generate(e, request);
-            ReportMethod method = null;
+            HttpReport request = null;
-                method = new ReportMethod(uriResolver.getRepositoryUri(), info);
-                int sc = getClient(null).executeMethod(method);
+                request = new HttpReport(uriResolver.getRepositoryUri(), info);
+                HttpResponse response = executeRequest(null, request);
+                int sc = response.getStatusLine().getStatusCode();
-                method.checkSuccess();
-                Document doc = method.getResponseBodyAsDocument();
+                request.checkSuccess(response);
+                Document doc = request.getResponseBodyAsDocument(response.getEntity());
-                if (method != null) {
-                    method.releaseConnection();
+                if (request != null) {
+                    request.releaseConnection();
-        PropFindMethod method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uriResolver.getWorkspaceUri(workspaceName), nameSet, DEPTH_0);
-            getClient(sessionInfo).executeMethod(method);
+            request = new HttpPropfind(uriResolver.getWorkspaceUri(workspaceName), nameSet, DEPTH_0);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            MultiStatusResponse[] responses = request.getResponseBodyAsMultiStatus(response).getResponses();
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        PropFindMethod method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uriResolver.getRepositoryUri(), nameSet, DEPTH_1);
-            getClient(sessionInfo).executeMethod(method);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            request = new HttpPropfind(uriResolver.getRepositoryUri(), nameSet, DEPTH_1);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
-            for (MultiStatusResponse response : responses) {
-                DavPropertySet props = response.getProperties(DavServletResponse.SC_OK);
+            for (MultiStatusResponse mresponse : mresponses) {
+                DavPropertySet props = mresponse.getProperties(DavServletResponse.SC_OK);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        ReportMethod method = null;
+        HttpReport request = null;
-            method = new ReportMethod(uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()), reportInfo);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpReport(uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()), reportInfo);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            MultiStatusResponse[] responses = request.getResponseBodyAsMultiStatus(response).getResponses();
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        DavMethodBase method = null;
+        HttpPropfind propfindRequest = null;
-            method = new PropFindMethod(uri, nameSet, DEPTH_0);
-            getClient(sessionInfo).executeMethod(method);
+            propfindRequest = new HttpPropfind(uri, nameSet, DEPTH_0);
+            HttpResponse response = execute(propfindRequest, sessionInfo);
+            propfindRequest.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length < 1) {
+            MultiStatusResponse[] mresponses = propfindRequest.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length < 1) {
-            DavProperty<?> p = responses[0].getProperties(DavServletResponse.SC_OK).get(displayName);
+            DavProperty<?> p = mresponses[0].getProperties(DavServletResponse.SC_OK).get(displayName);
-            if (method != null) {
-                method.releaseConnection();
+            if (propfindRequest != null) {
+                propfindRequest.releaseConnection();
-        DavMethodBase method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uri, nameSet, DEPTH_0);
-            getClient(sessionInfo).executeMethod(method);
+            request = new HttpPropfind(uri, nameSet, DEPTH_0);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length < 1) {
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length < 1) {
-            DavProperty<?> p = responses[0].getProperties(DavServletResponse.SC_OK).get(displayName);
+            DavProperty<?> p = mresponses[0].getProperties(DavServletResponse.SC_OK).get(displayName);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        DavMethodBase method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uri, nameSet, DEPTH_0);
-            getClient(sessionInfo).executeMethod(method);
+            request = new HttpPropfind(uri, nameSet, DEPTH_0);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length < 1) {
-                throw new ItemNotFoundException("Unable to retrieve the item definition for " + saveGetIdString(itemId, sessionInfo));
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length < 1) {
+                throw new ItemNotFoundException(
+                        "Unable to retrieve the item definition for " + saveGetIdString(itemId, sessionInfo));
-            if (responses.length > 1) {
-                throw new RepositoryException("Internal error: ambigous item definition found '" + saveGetIdString(itemId, sessionInfo) + "'.");
+            if (mresponses.length > 1) {
+                throw new RepositoryException(
+                        "Internal error: ambigous item definition found '" + saveGetIdString(itemId, sessionInfo) + "'.");
-            DavPropertySet propertySet = responses[0].getProperties(DavServletResponse.SC_OK);
+            DavPropertySet propertySet = mresponses[0].getProperties(DavServletResponse.SC_OK);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        DavMethodBase method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uri, nameSet, DEPTH_1);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpPropfind(uri, nameSet, DEPTH_1);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length < 1) {
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length < 1) {
-            for (MultiStatusResponse response : responses) {
-                if (isSameResource(uri, response)) {
-                    nodeResponse = response;
+            for (MultiStatusResponse mresponse : mresponses) {
+                if (isSameResource(uri, mresponse)) {
+                    nodeResponse = mresponse;
-                    childResponses.add(response);
+                    childResponses.add(mresponse);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        DavMethodBase method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uri, nameSet, DEPTH_1);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpPropfind(uri, nameSet, DEPTH_1);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length < 1) {
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length < 1) {
-            } else if (responses.length == 1) {
+            } else if (mresponses.length == 1) {
-            for (MultiStatusResponse resp : responses) {
-                if (!isSameResource(uri, resp)) {
-                    DavPropertySet childProps = resp.getProperties(DavServletResponse.SC_OK);
+            for (MultiStatusResponse mresponse : mresponses) {
+                if (!isSameResource(uri, mresponse)) {
+                    DavPropertySet childProps = mresponse.getProperties(DavServletResponse.SC_OK);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        DavMethodBase method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uri, nameSet, DEPTH_0);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpPropfind(uri, nameSet, DEPTH_0);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length < 1) {
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length < 1) {
-            for (MultiStatusResponse resp : responses) {
-                if (isSameResource(uri, resp)) {
-                    DavPropertySet props = resp.getProperties(DavServletResponse.SC_OK);
+            for (MultiStatusResponse mresponse : mresponses) {
+                if (isSameResource(uri, mresponse)) {
+                    DavPropertySet props = mresponse.getProperties(DavServletResponse.SC_OK);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        GetMethod method = null;
+        HttpGet request = null;
-            method = new GetMethod(uri);
-            HttpClient client = getClient(sessionInfo);
-            client.executeMethod(method);
+            request = new HttpGet(uri);
+            HttpResponse response = executeRequest(sessionInfo, request);
-            int status = method.getStatusCode();
+            int status = response.getStatusLine().getStatusCode();
-                throw ExceptionConverter.generate(new DavException(status, method.getStatusText()));
+                throw ExceptionConverter.generate(new DavException(status, response.getStatusLine().getReasonPhrase()));
-            String ct = null;
-            Header hd = method.getResponseHeader(HEADER_CONTENT_TYPE);
-            if (hd != null) {
-                ct = hd.getValue();
-            }
+            HttpEntity entity = response.getEntity();
+            ContentType ct = ContentType.get(entity);
-            if (ct.startsWith("jcr-value")) {
-                type = JcrValueType.typeFromContentType(ct);
+
+            if (ct != null && ct.getMimeType().startsWith("jcr-value")) {
+                type = JcrValueType.typeFromContentType(ct.getMimeType());
-                    v = getQValueFactory().create(method.getResponseBodyAsStream());
+                    v = getQValueFactory().create(entity.getContent());
-                    Reader reader = new InputStreamReader(method.getResponseBodyAsStream(), method.getResponseCharSet());
+                    Reader reader = new InputStreamReader(entity.getContent(), ct.getCharset());
-            } else if (ct.startsWith("text/xml")) {
+            } else if (ct != null && ct.getMimeType().equals("text/xml")) {
-                values = getValues(method.getResponseBodyAsStream(), resolver, propertyId);
-                type = (values.length > 0) ? values[0].getType() : loadType(uri, client, propertyId, sessionInfo, resolver);
+                values = getValues(entity.getContent(), resolver, propertyId);
+                type = (values.length > 0) ? values[0].getType() : loadType(uri, getClient(sessionInfo), propertyId, sessionInfo, resolver);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        DavMethodBase method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(propertyURI, nameSet, DEPTH_0);
-            client.executeMethod(method);
-            method.checkSuccess();
+            request = new HttpPropfind(propertyURI, nameSet, DEPTH_0);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length == 1) {
-                DavPropertySet props = responses[0].getProperties(DavServletResponse.SC_OK);
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length == 1) {
+                DavPropertySet props = mresponses[0].getProperties(DavServletResponse.SC_OK);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        DavMethod method = null;
+        HttpRequestBase request = null;
-                Iterator<DavMethod> it = batchImpl.methods();
+                Iterator<HttpRequestBase> it = batchImpl.requests();
-                    method = it.next();
-                    initMethod(method, batchImpl, true);
+                    request = it.next();
+                    initMethod(request, batchImpl, true);
-                    client.executeMethod(method);
-                    method.checkSuccess();
-                    method.releaseConnection();
+                    HttpResponse response = client.execute(request);
+                    if (request instanceof BaseDavRequest) {
+                        ((BaseDavRequest) request).checkSuccess(response);
+                    } else {
+                        // use generic HTTP status code checking
+                        int statusCode = response.getStatusLine().getStatusCode();
+                        if (statusCode < 200 || statusCode >= 300) {
+                            throw new DavException(statusCode, "Unexpected status code " + statusCode + " in response to "
+                                    + request.getMethod() + " request.");
+                        }
+                    }
+                    request.releaseConnection();
-            throw ExceptionConverter.generate(e, method);
+            throw ExceptionConverter.generate(e, request);
-        MkColMethod method = new MkColMethod(uri);
-        method.addRequestHeader(JcrRemotingConstants.IMPORT_UUID_BEHAVIOR, Integer.toString(uuidBehaviour));
-        method.setRequestEntity(new InputStreamRequestEntity(xmlStream, "text/xml"));
-        execute(method, sessionInfo);
+        HttpMkcol mkcolRequest = new HttpMkcol(uri);
+        mkcolRequest.addHeader(JcrRemotingConstants.IMPORT_UUID_BEHAVIOR, Integer.toString(uuidBehaviour));
+        mkcolRequest.setEntity(new InputStreamEntity(xmlStream, ContentType.create("text/xml")));
+        execute(mkcolRequest, sessionInfo);
-        MoveMethod method = new MoveMethod(uri, destUri, false);
-        execute(method, sessionInfo);
-        // need to clear the cache as the move may have affected nodes with uuid.
-        clearItemUriCache(sessionInfo);
+        HttpMove request = new HttpMove(uri, destUri, false);
+        try {
+            initMethod(request, sessionInfo);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+            // need to clear the cache as the move may have affected nodes with
+            // uuid.
+            clearItemUriCache(sessionInfo);
+        } catch (IOException ex) {
+            throw new RepositoryException(ex);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e, request);
+        } finally {
+            request.releaseConnection();
+        }
-        CopyMethod method = new CopyMethod(uri, destUri, false, false);
-        execute(method, sessionInfo);
+        HttpCopy request = new HttpCopy(uri, destUri, false, false);
+        try {
+            initMethod(request, sessionInfo);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+        } catch (IOException ex) {
+            throw new RepositoryException(ex);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e, request);
+        } finally {
+            request.releaseConnection();
+        }
-        PropFindMethod method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uri, nameSet, DEPTH_0);
-            initMethod(method, sessionInfo, false);
+            request = new HttpPropfind(uri, nameSet, DEPTH_0);
+            initMethod(request, sessionInfo, false);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length != 1) {
-                throw new ItemNotFoundException("Unable to retrieve the LockInfo. No such node " + saveGetIdString(nodeId, sessionInfo));
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length != 1) {
+                throw new ItemNotFoundException(
+                        "Unable to retrieve the LockInfo. No such node " + saveGetIdString(nodeId, sessionInfo));
-            DavPropertySet ps = responses[0].getProperties(DavServletResponse.SC_OK);
+            DavPropertySet ps = mresponses[0].getProperties(DavServletResponse.SC_OK);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
+        HttpLock request = null;
-            LockMethod method = new LockMethod(uri, scope, Type.WRITE, ownerInfo, davTimeout , deep);
-            execute(method, sessionInfo);
+            request  = new HttpLock(uri,
+                    new org.apache.jackrabbit.webdav.lock.LockInfo(scope, Type.WRITE, ownerInfo, davTimeout, deep));
+            HttpResponse response = execute(request, sessionInfo);
-            String lockToken = method.getLockToken();
+            String lockToken = request.getLockToken(response);
-            LockDiscovery disc = method.getResponseAsLockDiscovery();
+            LockDiscovery disc = request.getResponseBodyAsLockDiscovery(response);
+        } finally {
+            if (request != null) {
+                request.releaseConnection();
+            }
-        LockMethod method = new LockMethod(uri, INFINITE_TIMEOUT, locktokens);
-        execute(method, sessionInfo);
+        HttpLock httpLock = null;
+        try {
+            httpLock = new HttpLock(uri, INFINITE_TIMEOUT, locktokens);
+            execute(httpLock, sessionInfo);
+        } finally {
+            if (httpLock != null) {
+                httpLock.releaseConnection();
+            }
+        }
-        UnLockMethod method = new UnLockMethod(uri, lockToken);
-        execute(method, sessionInfo);
-
-        ((SessionInfoImpl) sessionInfo).removeLockToken(lockToken, isSessionScoped);
+        HttpUnlock unlockRequest = new HttpUnlock(uri, lockToken);
+        try {
+            execute(unlockRequest, sessionInfo);
+            ((SessionInfoImpl) sessionInfo).removeLockToken(lockToken, isSessionScoped);
+        } finally {
+            unlockRequest.releaseConnection();
+        }
-        CheckinMethod method = new CheckinMethod(uri);
-        execute(method, sessionInfo);
-        Header rh = method.getResponseHeader(DeltaVConstants.HEADER_LOCATION);
-        return uriResolver.getNodeId(resolve(uri, rh.getValue()), sessionInfo);
+        HttpCheckin request = new HttpCheckin(uri);
+        try {
+            initMethod(request, sessionInfo, !isUnLockMethod(request));
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+            org.apache.http.Header rh = response.getFirstHeader(DeltaVConstants.HEADER_LOCATION);
+            return uriResolver.getNodeId(resolve(uri, rh.getValue()), sessionInfo);
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException ex) {
+            throw ExceptionConverter.generate(ex);
+        } finally {
+            request.releaseConnection();
+        }
-        CheckoutMethod method = new CheckoutMethod(uri);
-        execute(method, sessionInfo);
+        HttpCheckout request = new HttpCheckout(uri);
+        try {
+            initMethod(request, sessionInfo, !isUnLockMethod(request));
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException ex) {
+            throw ExceptionConverter.generate(ex);
+        } finally {
+            request.releaseConnection();
+        }
-        DeleteMethod method = new DeleteMethod(uri);
-        execute(method, sessionInfo);
+        HttpDelete request = new HttpDelete(uri);
+        try {
+            initMethod(request, sessionInfo, !isUnLockMethod(request));
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+        } catch (IOException ex) {
+            throw new RepositoryException(ex);
+        } catch (DavException ex) {
+            throw ExceptionConverter.generate(ex);
+        } finally {
+            request.releaseConnection();
+        }
-        HeadMethod method = new HeadMethod(uri);
+        HttpHead request = new HttpHead(uri);
-            int statusCode = getClient(sInfo).executeMethod(method);
-            if (statusCode == DavServletResponse.SC_OK) {
-                return true;
-            }
+            int statusCode = executeRequest(sInfo, request).getStatusLine().getStatusCode();
+            return (statusCode == DavServletResponse.SC_OK);
-            log.error("Unexpected error while testing existence of item.",e);
+            log.error("Unexpected error while testing existence of item.", e);
+            return false;
+            return false;
-            method.releaseConnection();
+            request.releaseConnection();
-        return false;
+        HttpUpdate request = null;
-            UpdateMethod method = new UpdateMethod(uri, uInfo);
-            execute(method, sessionInfo);
+            request = new HttpUpdate(uri, uInfo);
+            initMethod(request, sessionInfo, !isUnLockMethod(request));
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+        } finally {
+            if (request != null) {
+                request.releaseConnection();
+            }
+        HttpMerge request = null;
-            MergeMethod method = new MergeMethod(uri, mInfo);
-            execute(method, sessionInfo);
+            request = new HttpMerge(uri, mInfo);
+            initMethod(request, sessionInfo, !isUnLockMethod(request));
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] resps = method.getResponseBodyAsMultiStatus().getResponses();
+            MultiStatusResponse[] resps = request.getResponseBodyAsMultiStatus(response).getResponses();
+        } finally {
+            if (request != null) {
+                request.releaseConnection();
+            }
+        HttpProppatch request = null;
-            PropPatchMethod method = new PropPatchMethod(getItemUri(nodeId, sessionInfo), changeList);
-            execute(method, sessionInfo);
-            method.checkSuccess();
+            request = new HttpProppatch(getItemUri(nodeId, sessionInfo), changeList);
+            initMethod(request, sessionInfo, !isUnLockMethod(request));
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+        } finally {
+            if (request != null) {
+                request.releaseConnection();
+            }
+        HttpLabel request = null;
-            LabelMethod method = new LabelMethod(uri, strLabel, (moveLabel) ? LabelInfo.TYPE_SET : LabelInfo.TYPE_ADD);
-            execute(method, sessionInfo);
+            request = new HttpLabel(uri, new LabelInfo(strLabel, moveLabel ? LabelInfo.TYPE_SET : LabelInfo.TYPE_ADD));
+            initMethod(request, sessionInfo, !isUnLockMethod(request));
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+        } catch (DavException ex) {
+            throw ExceptionConverter.generate(ex);
+        } finally {
+            request.releaseConnection();
+        HttpLabel request = null;
-            LabelMethod method = new LabelMethod(uri, strLabel, LabelInfo.TYPE_REMOVE);
-            execute(method, sessionInfo);
+            request = new HttpLabel(uri, new LabelInfo(strLabel, LabelInfo.TYPE_REMOVE));
+            initMethod(request, sessionInfo, !isUnLockMethod(request));
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
+        } catch (DavException ex) {
+            throw ExceptionConverter.generate(ex);
+        } finally {
+            request.releaseConnection();
-        OptionsMethod method = new OptionsMethod(uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()));
+        HttpOptions request = new HttpOptions(uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()));
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
-
-            Header daslHeader = method.getResponseHeader(SearchConstants.HEADER_DASL);
-            CodedUrlHeader h = new CodedUrlHeader(daslHeader.getName(), daslHeader.getValue());
-            return h.getCodedUrls();
+            HttpResponse response = executeRequest(sessionInfo, request);
+            int status = response.getStatusLine().getStatusCode();
+            if (status != DavServletResponse.SC_OK) {
+                throw new DavException(status);
+            }
+            return request.getSearchGrammars(response).toArray(new String[0]);
-            method.releaseConnection();
+            request.releaseConnection();
-        SearchMethod method = null;
+        HttpSearch request = null;
-            method = new SearchMethod(uri, sInfo);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpSearch(uri, sInfo);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatus ms = method.getResponseBodyAsMultiStatus();
+            MultiStatus ms = request.getResponseBodyAsMultiStatus(response);
-        }  finally {
-            if (method != null) {
-                method.releaseConnection();
+        } finally {
+            if (request != null) {
+                request.releaseConnection();
-        GetMethod method = null;
+        HttpGet request = null;
-            method = new GetMethod(rootUri);
-            method.addRequestHeader("If-None-Match", "\"" + Long.toHexString(after) + "\""); // TODO
-            initMethod(method, sessionInfo);
+            request = new HttpGet(rootUri);
+            request.addHeader("If-None-Match", "\"" + Long.toHexString(after) + "\""); // TODO
+            initMethod(request, sessionInfo);
-            getClient(sessionInfo).executeMethod(method);
-            assert method.getStatusCode() == 200;
+            HttpResponse response = executeRequest(sessionInfo, request);
+            int status = response.getStatusLine().getStatusCode();
+            if (status != 200) {
+                throw new RepositoryException("getEvents to " + rootUri + " failed with " + response.getStatusLine());
+            }
-            InputStream in = method.getResponseBodyAsStream();
+            HttpEntity entity = response.getEntity();
+            InputStream in = entity.getContent();
-                    IOException exception = new IOException("XML parser configuration error");
-                    exception.initCause(e);
-                    throw exception;
+                    throw new IOException("XML parser configuration error", e);
-                    IOException exception = new IOException("XML parsing error");
-                    exception.initCause(e);
-                    throw exception;
+                    throw new IOException("XML parsing error", e);
-            throw new RepositoryException(ex);
+            throw new RepositoryException("extracting events from journal feed: " + ex.getMessage(), ex);
+        } finally {
+            if (request != null) {
+                request.releaseConnection();
+            }
-        SubscribeMethod method = null;
+        HttpSubscribe request = null;
-            if (subscriptionId != null) {
-                method = new SubscribeMethod(uri, subscriptionInfo, subscriptionId);
-            } else {
-                method = new SubscribeMethod(uri, subscriptionInfo);
-            }
-            initMethod(method, sessionInfo);
+            request = new HttpSubscribe(uri, subscriptionInfo, subscriptionId);
+            initMethod(request, sessionInfo);
-                method.setRequestHeader(ch.getHeaderName(), ch.getHeaderValue());
+                request.setHeader(ch.getHeaderName(), ch.getHeaderValue());
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            org.apache.jackrabbit.webdav.observation.Subscription[] subs = method.getResponseAsSubscriptionDiscovery().getValue();
+            org.apache.jackrabbit.webdav.observation.Subscription[] subs = request.getResponseBodyAsSubscriptionDiscovery(response)
+                    .getValue();
-            return method.getSubscriptionId();
+            return request.getSubscriptionId(response);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        UnSubscribeMethod method = null;
+        HttpUnsubscribe request = null;
-            method = new UnSubscribeMethod(uri, subscriptionId);
-            initMethod(method, sessionInfo);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpUnsubscribe(uri, subscriptionId);
+            initMethod(request, sessionInfo);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        PollMethod method = null;
+        HttpPoll request = null;
-            method = new PollMethod(uri, subscriptionId, timeout);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpPoll(uri, subscriptionId, timeout);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            EventDiscovery disc = method.getResponseAsEventDiscovery();
+            EventDiscovery disc = request.getResponseBodyAsEventDiscovery(response);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        ReportMethod method = null;
+        HttpReport request = null;
-            method = new ReportMethod(uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()), info);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpReport(uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()), info);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            Document doc = method.getResponseBodyAsDocument();
+            Document doc = request.getResponseBodyAsDocument(response.getEntity());
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        PropPatchMethod method = null;
+        HttpProppatch request = null;
-            method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
-            initMethod(method, sessionInfo, true);
+            request = new HttpProppatch(uri, setProperties, new DavPropertyNameSet());
+            initMethod(request, sessionInfo, true);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        ReportMethod method = null;
+        HttpReport request = null;
-            method = new ReportMethod(workspaceUri, info);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpReport(workspaceUri, info);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            Document reportDoc = method.getResponseBodyAsDocument();
+            Document reportDoc = request.getResponseBodyAsDocument(response.getEntity());
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        PropPatchMethod method = null;
+        HttpProppatch request = null;
-            method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
-            initMethod(method, sessionInfo, true);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpProppatch(uri, setProperties, new DavPropertyNameSet());
+            initMethod(request, sessionInfo, true);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            if (method != null) {
-                 method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        PropPatchMethod method = null;
+        HttpProppatch request = null;
-            method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
-            initMethod(method, sessionInfo, true);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpProppatch(uri, setProperties, new DavPropertyNameSet());
+            initMethod(request, sessionInfo, true);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        MkWorkspaceMethod method = null;
+        HttpMkworkspace request = null;
-            method = new MkWorkspaceMethod(uriResolver.getWorkspaceUri(name));
-            initMethod(method, sessionInfo, true);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpMkworkspace(uriResolver.getWorkspaceUri(name));
+            initMethod(request, sessionInfo, true);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        DeleteMethod method = null;
+        HttpDelete request = null;
-            method = new DeleteMethod(uriResolver.getWorkspaceUri(name));
-            initMethod(method, sessionInfo, true);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpDelete(uriResolver.getWorkspaceUri(name));
+            initMethod(request, sessionInfo, true);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            if (method != null) {
-               method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
+    public HttpResponse executeRequest(SessionInfo sessionInfo, HttpUriRequest request) throws IOException, RepositoryException {
+        return getClient(sessionInfo).execute(request, getContext(sessionInfo));
+    }
+
-            OptionsMethod method = new OptionsMethod(uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()));
+            HttpOptions request = new HttpOptions(uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()));
-                getClient(sessionInfo).executeMethod(method);
-                method.checkSuccess();
-                Header davHeader = method.getResponseHeader("DAV");
-                if (davHeader!= null) {
-                    // TODO: think about coded-URLs containing a comma
-                    String[] classes = davHeader.getValue().split(",");
-                    this.remoteDavComplianceClasses = new HashSet<String>();
-                    for (String c : classes) {
-                        this.remoteDavComplianceClasses.add(c.trim());
-                    }
+                HttpResponse response = executeRequest(sessionInfo, request);
+                int status = response.getStatusLine().getStatusCode();
+                if (status != DavServletResponse.SC_OK) {
+                    throw new DavException(status);
+                this.remoteDavComplianceClasses = request.getDavComplianceClasses(response);
-                method.releaseConnection();
+                request.releaseConnection();
-        private final List<DavMethod> methods = new ArrayList<DavMethod>();
+        private final List<HttpRequestBase> requests = new ArrayList<HttpRequestBase>();
+            HttpLock request = null;
-                LockMethod method = new LockMethod(uri, TransactionConstants.LOCAL, TransactionConstants.TRANSACTION, null, INFINITE_TIMEOUT, true);
-                initMethod(method, sessionInfo, true);
+                request = new HttpLock(uri, new org.apache.jackrabbit.webdav.lock.LockInfo(TransactionConstants.LOCAL, TransactionConstants.TRANSACTION, null,
+                        INFINITE_TIMEOUT, true));
+                initMethod(request, sessionInfo, true);
-                client.executeMethod(method);
-                if (method.getStatusCode() == DavServletResponse.SC_PRECONDITION_FAILED) {
+                HttpResponse response = client.execute(request,getContext(sessionInfo));
+                if (response.getStatusLine().getStatusCode() == DavServletResponse.SC_PRECONDITION_FAILED) {
-                method.checkSuccess();
+                request.checkSuccess(response);
-                batchId = method.getLockToken();
+                batchId = request.getLockToken(response);
+            } finally {
+                if (request != null) {
+                    request.releaseConnection();
+                }
-            UnLockMethod method = null;
+            HttpUnlock request = null;
-                method = new UnLockMethod(uri, batchId);
-                initMethod(method, sessionInfo, true);
+                request = new HttpUnlock(uri, batchId);
+                initMethod(request, sessionInfo, true);
-                method.setRequestBody(new TransactionInfo(commit));
-                client.executeMethod(method);
-                method.checkSuccess();
+                request.setEntity(XmlEntity.create(new TransactionInfo(commit)));
+                HttpResponse response = client.execute(request, getContext(sessionInfo));
+                request.checkSuccess(response);
-                if (method != null) {
+                if (request != null) {
-                    method.releaseConnection();
+                    request.releaseConnection();
-            methods.clear();
+            requests.clear();
-            return methods.isEmpty();
+            return requests.isEmpty();
-        private Iterator<DavMethod> methods() {
-            return methods.iterator();
+        private Iterator<HttpRequestBase> requests() {
+            return requests.iterator();
-                MkColMethod method = new MkColMethod(uri);
+                HttpMkcol request = new HttpMkcol(uri);
-                method.setRequestBody(body);
+                request.setEntity(XmlEntity.create(body));
-                methods.add(method);
+                requests.add(request);
-            PutMethod method = new PutMethod(uri);
-            method.setRequestHeader(HEADER_CONTENT_TYPE, JcrValueType.contentTypeFromType(value.getType()));
-            method.setRequestEntity(getEntity(value));
-            methods.add(method);
+            HttpPut request = new HttpPut(uri);
+            request.setHeader(HEADER_CONTENT_TYPE, JcrValueType.contentTypeFromType(value.getType()));
+            request.setEntity(getEntity(value));
+            requests.add(request);
-                PutMethod method = new PutMethod(uri);
-                method.setRequestBody(vp);
+                HttpPut request = new HttpPut(uri);
+                request.setEntity(XmlEntity.create(vp));
-                methods.add(method);
+                requests.add(request);
-                RequestEntity ent = getEntity(value);
+                HttpEntity ent = getEntity(value);
-                PutMethod method = new PutMethod(uri);
-                method.setRequestHeader(HEADER_CONTENT_TYPE, JcrValueType.contentTypeFromType(value.getType()));
-                method.setRequestEntity(ent);
-                methods.add(method);
+                HttpPut request = new HttpPut(uri);
+                request.setHeader(HEADER_CONTENT_TYPE, JcrValueType.contentTypeFromType(value.getType()));
+                request.setEntity(ent);
+                requests.add(request);
-                    PropPatchMethod method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
-                    methods.add(method);
+                    HttpProppatch request = new HttpProppatch(uri, setProperties, new DavPropertyNameSet());
+                    requests.add(request);
-        private RequestEntity getEntity(QValue value) throws RepositoryException {
+        private HttpEntity getEntity(QValue value) throws RepositoryException {
-            InputStream in;
-            RequestEntity ent;
-            try {
-                switch (type) {
-                    case PropertyType.NAME:
-                    case PropertyType.PATH:
-                        String str = ValueFormat.getJCRString(value, resolver);
-                        ent = new StringRequestEntity(str, contentType, "UTF-8");
-                        break;
-                    case PropertyType.BINARY:
-                        in = value.getStream();
-                        ent = new InputStreamRequestEntity(in, contentType);
-                        break;
-                    default:
-                        str = value.getString();
-                        ent = new StringRequestEntity(str, contentType, "UTF-8");
-                        break;
-                }
-            } catch (UnsupportedEncodingException e) {
-                // should never get here
-                throw new RepositoryException(e.getMessage());
+            HttpEntity ent;
+            switch (type) {
+                case PropertyType.NAME:
+                case PropertyType.PATH:
+                    String str = ValueFormat.getJCRString(value, resolver);
+                    ent = new StringEntity(str, ContentType.create(contentType, "UTF-8"));
+                    break;
+                case PropertyType.BINARY:
+                    InputStream in = value.getStream();
+                    ent = new InputStreamEntity(in, ContentType.create(contentType));
+                    break;
+                default:
+                    str = value.getString();
+                    ent = new StringEntity(str, ContentType.create(contentType, "UTF-8"));
+                    break;
-            DeleteMethod method = new DeleteMethod(uri);
+            HttpDelete request = new HttpDelete(uri);
-            methods.add(method);
+            requests.add(request);
-                OrderPatchMethod method;
+                Position p;
-                    method = new OrderPatchMethod(uri, OrderingConstants.ORDERING_TYPE_CUSTOM, srcSegment, false);
+                    p = new Position(OrderingConstants.XML_LAST);
-                    method = new OrderPatchMethod(uri, OrderingConstants.ORDERING_TYPE_CUSTOM, srcSegment, targetSegment, true);
+                    p = new Position(OrderingConstants.XML_BEFORE, targetSegment);
-                methods.add(method);
+                OrderPatch op = new OrderPatch(OrderingConstants.ORDERING_TYPE_CUSTOM, new OrderPatch.Member(srcSegment, p));
+                HttpOrderpatch request = new HttpOrderpatch(uri, op);
+                requests.add(request);
-                PropPatchMethod method = new PropPatchMethod(uri, setProperties, removeProperties);
+                HttpProppatch request = new HttpProppatch(uri, setProperties, removeProperties);
-                methods.add(method);
+                requests.add(request);
-                PropPatchMethod method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
+                HttpProppatch request = new HttpProppatch(uri, setProperties, new DavPropertyNameSet());
-                methods.add(method);
+                requests.add(request);
-            MoveMethod method = new MoveMethod(uri, destUri, false);
+            HttpMove request = new HttpMove(uri, destUri, false);
-            methods.add(method);
+            requests.add(request);
-                MkColMethod method = new MkColMethod(uri);
+                HttpMkcol request = new HttpMkcol(uri);
-                method.setRequestBody(((DocumentTree) tree).toDocument());
+                request.setEntity(XmlEntity.create(((DocumentTree) tree).toDocument()));
-                methods.add(method);
+                requests.add(request);

