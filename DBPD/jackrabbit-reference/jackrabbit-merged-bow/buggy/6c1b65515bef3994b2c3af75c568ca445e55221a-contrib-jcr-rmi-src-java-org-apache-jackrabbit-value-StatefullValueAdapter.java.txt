JCR-RMI: Applying patch sent by Felix:
"I have some more adaptions for the JCR-RMI value implementation:
 StatefullValueAdapter needs read/writeObject as does BinaryValue.
 On the other hand SerialValue does not need it."

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@170807 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import javax.jcr.PropertyType;
- * The <code>StatefullValueAdapter</code> class 
- * 
+ * The <code>StatefullValueAdapter</code> class implements the committed value
+ * state for some JCR <code>Value</code> as a part of the State design pattern
+ * (Gof) used by this package.
+ * <p>
+ * This class implements {@link #readObject(ObjectInputStream)} and
+ * {@link #writeObject(ObjectOutputStream)} overwriting the default behaviour.
+ * The reason for this is, that we cannot guarantee delegatee value to be
+ * serializable in which case the {@link #writeObject(ObjectOutputStream)}
+ * must first create a serializable value. The
+ * {@link #readObject(ObjectInputStream)} method is here just to guarantee
+ * symetric implementation.
+ *
- * @author fmeschbe
- * @since 
+ * @author Felix Meschberger
+ * @since 0.16.4.1
+ * 
+ * @see SerialValue
-    private final Value delegatee;
+    /** The delegatee value. */
+    private Value delegatee;
+    /**
+     * Creates an instance adapting the given JCR <code>Value</code> to the
+     * State design pattern.
+     * 
+     * @param delegatee The JCR <code>Value</code> providing the value date.
+     */
+
+    /**
+     * Writes the delegate value to the given <code>ObjectOutputStream</code>.
+     * If the delegatee is {@link SerialValue} it is directly written. Otherwise
+     * the {@link SerialValueFactory} is asked to create a {@link StatefullValue}
+     * from the delegatee, which is then written. The newly created
+     * {@link StatefullValue} value also replaces the original delegatee
+     * internally.
+     * 
+     * @param out The destination to write the delegatee to.
+     * 
+     * @throws IOException If an error occurrs writing the value or if an
+     *      error occurrs creating the {@link StatefullValue} from the
+     *      delegatee.
+     */
+    private void writeObject(ObjectOutputStream out) throws IOException {
+        // if the delegatee value is a StatefullValue or SerialValue, serialize it
+        if (delegatee instanceof StatefullValue ||
+                delegatee instanceof SerialValue) {
+            out.writeObject(delegatee);
+            return;
+        }
+        
+        // otherwise create a SerialValue from the delegatee value to send
+        try {
+            SerialValueFactory factory = SerialValueFactory.getInstance();
+            Value toSend;
+            switch (getType()) {
+                case PropertyType.BINARY:
+                     toSend = factory.createBinaryValue(getStream());
+                    break;
+                case PropertyType.BOOLEAN:
+                    toSend = factory.createBooleanValue(getBoolean());
+                    break;
+                case PropertyType.DATE:
+                    toSend = factory.createDateValue(getDate());
+                    break;
+                case PropertyType.DOUBLE:
+                    toSend = factory.createDoubleValue(getDouble());
+                    break;
+                case PropertyType.LONG:
+                    toSend = factory.createLongValue(getLong());
+                    break;
+                case PropertyType.NAME:
+                    toSend = factory.createNameValue(getString());
+                    break;
+                case PropertyType.PATH:
+                    toSend = factory.createPathValue(getString());
+                    break;
+                case PropertyType.REFERENCE:
+                    toSend = factory.createReferenceValue(getString());
+                    break;
+                case PropertyType.STRING:
+                    toSend = factory.createStringValue(getString());
+                    break;
+                default:
+                    throw new IOException("Unknown value type");
+            }
+
+            // replace the delegatee with the new one
+            delegatee = toSend;
+            
+            // and finally send the serial value instance
+            out.writeObject(toSend);
+        } catch (RepositoryException ex) {
+            throw new IOException(ex.getMessage());
+        }
+    }
+    
+    /**
+     * Reads an reconstructs the delegatee from the given
+     * <code>ObjectInputStream</code>. The value read will either be an
+     * instance of {@link SerialValue} or a {@link StatefullValue} depending
+     * on the original delegatee written.
+     * 
+     * @param in The <code>ObjectInputStream</code> from which to read the
+     *      delegatee.
+     * 
+     * @throws IOException If an error occurrs reading from the
+     *      <code>ObjectInputStream</code> or if the runtime class of the
+     *      value to be read cannot be found. 
+     */
+    private void readObject(ObjectInputStream in) throws IOException {
+        try {
+            delegatee = (Value) in.readObject();
+        } catch (ClassNotFoundException cnfe) {
+            throw new IOException("Cannot load value object class: " + 
+                cnfe.getMessage());
+        }
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS65 INS29 INS29 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 UPD66 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 UPD66 UPD66 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS25 INS54 INS65 INS65 INS65 INS43 INS42 INS42 INS54 INS68 INS68 INS68 INS68 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS42 INS27 INS8 INS8 INS12 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS8 INS12 INS42 INS69 INS42 INS69 INS42 INS69 INS42 INS69 INS42 INS42 INS42 INS42 INS42 INS62 INS62 INS21 INS41 INS60 INS60 INS50 INS21 INS21 INS44 INS8 INS42 INS42 INS21 INS44 INS8 INS43 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS32 INS43 INS59 INS43 INS59 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS7 INS32 INS43 INS42 INS53 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS7 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS11 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS45 INS43 INS32 INS43 INS32 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83