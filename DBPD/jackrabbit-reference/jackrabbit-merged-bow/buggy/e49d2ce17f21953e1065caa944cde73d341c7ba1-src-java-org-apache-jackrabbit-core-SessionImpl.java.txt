porting to v0.16.4 of the jsr170 specification

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161260 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.NodeDefImpl;
+import org.apache.jackrabbit.core.nodetype.NodeDefinitionImpl;
-import org.apache.jackrabbit.core.xml.Importer;
+import javax.jcr.nodetype.NoSuchNodeTypeException;
-            throws AccessControlException {
+            throws AccessControlException, RepositoryException {
-        try {
-            sanityCheck();
-        } catch (RepositoryException re) {
-            String msg = "failed to check permissions on " + absPath;
-            log.warn(msg, re);
-            throw new AccessControlException(actions);
-        }
+        sanityCheck();
-                throw new AccessControlException(READ_ACTION);
-            } catch (RepositoryException re) {
-                String msg = "failed to check READ permission on " + absPath;
-                log.warn(msg, re);
-                throw new AccessControlException(READ_ACTION);
+                throw new RepositoryException(msg);
-                throw new AccessControlException(ADD_NODE_ACTION);
+                throw new RepositoryException(msg);
-            } catch (RepositoryException re) {
-                String msg = "failed to check WRITE permission on parent of " + absPath;
-                log.warn(msg, re);
-                throw new AccessControlException(ADD_NODE_ACTION);
-                throw new AccessControlException(REMOVE_ACTION);
+                throw new RepositoryException(msg);
-            } catch (RepositoryException re) {
-                String msg = "failed to check REMOVE permission on " + absPath;
-                log.warn(msg, re);
-                throw new AccessControlException(REMOVE_ACTION);
-                throw new AccessControlException(SET_PROPERTY_ACTION);
+                throw new RepositoryException(msg);
-            } catch (RepositoryException re) {
-                String msg = "failed to check WRITE permission on parent of " + absPath;
-                log.warn(msg, re);
-                throw new AccessControlException(SET_PROPERTY_ACTION);
-    public boolean itemExists(String absPath) {
-        try {
-            // check sanity of this session
-            sanityCheck();
+    public boolean itemExists(String absPath) throws RepositoryException {
+        // check sanity of this session
+        sanityCheck();
-            getItemManager().getItem(Path.create(absPath, getNamespaceResolver(), true));
-            return true;
-        } catch (RepositoryException re) {
-            // fall through...
+        try {
+            return getItemManager().itemExists(Path.create(absPath, getNamespaceResolver(), true));
-            // fall through...
+            String msg = "invalid path:" + absPath;
+            log.debug(msg);
+            throw new RepositoryException(msg, mpe);
-        return false;
-            throws AccessDeniedException, ConstraintViolationException,
-            InvalidItemStateException, VersionException, LockException,
+            throws AccessDeniedException, ItemExistsException,
+            ConstraintViolationException, InvalidItemStateException,
+            VersionException, LockException, NoSuchNodeTypeException,
-            VersionException, LockException, RepositoryException {
+            VersionException, ConstraintViolationException, LockException,
+            RepositoryException {
-                if (!destParentNode.getDefinition().allowSameNameSibs()
-                        || !((NodeImpl) item).getDefinition().allowSameNameSibs()) {
+                if (!destParentNode.getDefinition().allowsSameNameSiblings()
+                        || !((NodeImpl) item).getDefinition().allowsSameNameSiblings()) {
-        NodeDefImpl newTargetDef;
+        NodeDefinitionImpl newTargetDef;
-            newTargetDef = destParentNode.getApplicableChildNodeDef(destName.getName(), nt.getQName());
+            newTargetDef = destParentNode.getApplicableChildNodeDefinition(destName.getName(), nt.getQName());
-        NodeDefImpl oldTargetDef = (NodeDefImpl) targetNode.getDefinition();
+        NodeDefinitionImpl oldTargetDef = (NodeDefinitionImpl) targetNode.getDefinition();
-    public ContentHandler getImportContentHandler(String parentAbsPath)
+    public ContentHandler getImportContentHandler(String parentAbsPath,
+                                                  int uuidBehavior)
-        SessionImporter importer = new SessionImporter(parent, this, Importer.IMPORT_UUID_CREATE_NEW);
+        SessionImporter importer = new SessionImporter(parent, this, uuidBehavior);
-    public void importXML(String parentAbsPath, InputStream in)
+    public void importXML(String parentAbsPath, InputStream in,
+                          int uuidBehavior)
-        ImportHandler handler = (ImportHandler) getImportContentHandler(parentAbsPath);
+        ImportHandler handler = (ImportHandler)
+                getImportContentHandler(parentAbsPath, uuidBehavior);
-    public void exportDocView(String absPath, ContentHandler contentHandler,
-                              boolean skipBinary, boolean noRecurse)
-            throws InvalidSerializedDataException, PathNotFoundException,
-            SAXException, RepositoryException {
+    public void exportDocumentView(String absPath, ContentHandler contentHandler,
+                                   boolean skipBinary, boolean noRecurse)
+            throws PathNotFoundException, SAXException, RepositoryException {
-    public void exportDocView(String absPath, OutputStream out,
-                              boolean skipBinary, boolean noRecurse)
-            throws InvalidSerializedDataException, IOException,
-            PathNotFoundException, RepositoryException {
+    public void exportDocumentView(String absPath, OutputStream out,
+                                   boolean skipBinary, boolean noRecurse)
+            throws IOException, PathNotFoundException, RepositoryException {
-            exportDocView(absPath, serializer.asContentHandler(), skipBinary, noRecurse);
+            exportDocumentView(absPath, serializer.asContentHandler(),
+                    skipBinary, noRecurse);
-    public void exportSysView(String absPath, ContentHandler contentHandler,
-                              boolean skipBinary, boolean noRecurse)
+    public void exportSystemView(String absPath, ContentHandler contentHandler,
+                                 boolean skipBinary, boolean noRecurse)
-    public void exportSysView(String absPath, OutputStream out,
-                              boolean skipBinary, boolean noRecurse)
+    public void exportSystemView(String absPath, OutputStream out,
+                                 boolean skipBinary, boolean noRecurse)
-            exportSysView(absPath, serializer.asContentHandler(), skipBinary, noRecurse);
+            exportSystemView(absPath, serializer.asContentHandler(),
+                    skipBinary, noRecurse);
+    public boolean isLive() {
+        return alive;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
-    public String getUserId() {
+    public String getUserID() {

MOV26 MOV31 MOV31 UPD40 UPD40 INS31 INS43 MOV43 INS43 INS43 INS43 INS44 INS44 UPD42 INS29 UPD42 MOV43 MOV43 MOV43 UPD42 UPD42 UPD43 MOV43 MOV43 MOV29 INS83 INS39 INS42 INS8 UPD42 INS42 MOV21 MOV21 INS42 INS42 INS42 INS39 INS42 INS39 INS42 INS65 UPD42 INS41 UPD43 UPD43 MOV43 MOV43 INS65 INS42 MOV12 MOV44 INS8 UPD42 UPD42 MOV12 MOV12 MOV32 INS60 INS21 INS53 UPD43 MOV43 INS42 MOV43 MOV44 UPD42 MOV43 INS59 INS32 INS14 UPD42 INS42 UPD42 UPD42 MOV60 INS42 INS27 INS42 INS42 INS42 MOV43 INS42 INS42 UPD42 MOV59 MOV32 INS45 INS42 MOV43 UPD42 MOV42 MOV43 INS42 UPD43 UPD42 UPD43 UPD42 MOV45 UPD42 UPD42 UPD42 UPD42 DEL8 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL21 DEL9 DEL42 DEL44 DEL8 DEL8 DEL12 DEL9 DEL41 DEL40 DEL42 DEL43