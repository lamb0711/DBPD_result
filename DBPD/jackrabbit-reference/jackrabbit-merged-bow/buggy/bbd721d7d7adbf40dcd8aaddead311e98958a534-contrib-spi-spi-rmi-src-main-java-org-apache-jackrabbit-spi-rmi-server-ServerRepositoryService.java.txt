JCR-999  SPI: provide batch read functionality
JCR-1000 JCR2SPI: remove duplicate item states

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552873 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ItemInfo;
-            return createSerializableNodeId(
+            return idFactory.createSerializableNodeId(
-            if (nInfo instanceof Serializable) {
-                return nInfo;
+            return NodeInfoImpl.createSerializableNodeInfo(nInfo, idFactory);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public RemoteIterator getItemInfos(RemoteSessionInfo sessionInfo, NodeId nodeId)
+            throws RepositoryException, RemoteException {
+        try {
+            Iterator it = service.getItemInfos(getSessionInfo(sessionInfo), nodeId);
+            if (it instanceof RemoteIterator) {
+                return (RemoteIterator) it;
-                PropertyId[] refs = nInfo.getReferences();
-                PropertyId[] serRefs = new PropertyId[refs.length];
-                for (int i = 0; i < serRefs.length; i++) {
-                    serRefs[i] = createSerializablePropertyId(refs[i]);
+                List serializables = new ArrayList();
+                while (it.hasNext()) {
+                    ItemInfo info = (ItemInfo) it.next();
+                    if (info instanceof Serializable) {
+                        serializables.add(info);
+                    } else {
+                        if (info.denotesNode()) {
+                            serializables.add(NodeInfoImpl.createSerializableNodeInfo((NodeInfo) info, idFactory));
+                        } else {
+                            serializables.add(PropertyInfoImpl.createSerializablePropertyInfo((PropertyInfo) info, idFactory));
+                        }
+                    }
-                NodeId parentId = null;
-                if (nInfo.getParentId() != null) {
-                    parentId = createSerializableNodeId(nInfo.getParentId());
-                }
-                return new NodeInfoImpl(parentId, nInfo.getQName(),
-                        nInfo.getPath(),
-                        createSerializableNodeId(nInfo.getId()),
-                        nInfo.getIndex(), nInfo.getNodetype(),
-                        nInfo.getMixins(), serRefs,
-                        new IteratorHelper(nInfo.getPropertyIds()) {
-                            public ItemId nextId() {
-                                return createSerializablePropertyId(
-                                        (PropertyId) super.nextId());
-                            }
-                        });
+                return new ServerIterator(serializables.iterator(), DEFAULT_BUFFER_SIZE);
-            Iterator childInfos = service.getChildInfos(
-                    getSessionInfo(sessionInfo), parentId);
+            Iterator childInfos = service.getChildInfos(getSessionInfo(sessionInfo), parentId);
-            PropertyInfo propInfo = service.getPropertyInfo(
-                    getSessionInfo(sessionInfo), propertyId);
-            return new PropertyInfoImpl(
-                    createSerializableNodeId(propInfo.getParentId()),
-                    propInfo.getQName(), propInfo.getPath(),
-                    createSerializablePropertyId(propInfo.getId()),
-                    propInfo.getType(), propInfo.isMultiValued(),
-                    propInfo.getValues());
+            PropertyInfo propInfo = service.getPropertyInfo(getSessionInfo(sessionInfo), propertyId);
+            return PropertyInfoImpl.createSerializablePropertyInfo(propInfo, idFactory);
-                        createSerializableNodeId(lockInfo.getNodeId()));
+                        idFactory.createSerializableNodeId(lockInfo.getNodeId()));
-                        createSerializableNodeId(lockInfo.getNodeId()));
+                        idFactory.createSerializableNodeId(lockInfo.getNodeId()));
-                        id = createSerializableNodeId((NodeId) e.getItemId());
+                        id = idFactory.createSerializableNodeId((NodeId) e.getItemId());
-                        id = createSerializablePropertyId((PropertyId) e.getItemId());
+                        id = idFactory.createSerializablePropertyId((PropertyId) e.getItemId());
-                            createSerializableNodeId(e.getParentId()),
+                            idFactory.createSerializableNodeId(e.getParentId()),
-     * Checks if the passed <code>nodeId</code> is serializable and if it is not
-     * creates a serializable version for the given <code>nodeId</code>.
-     *
-     * @param nodeId the node id to check.
-     * @return a serializable version of <code>nodeId</code> or the passed
-     *         nodeId itself it is already serializable.
-     */
-    private NodeId createSerializableNodeId(NodeId nodeId) {
-        if (nodeId instanceof Serializable) {
-            return nodeId;
-        } else {
-            return idFactory.createNodeId(nodeId.getUniqueID(), nodeId.getPath());
-        }
-    }
-
-    /**
-     * Checks if the passed <code>propId</code> is serializable and if it is not
-     * creates a serializable version for the given <code>propId</code>.
-     *
-     * @param propId the property id to check.
-     * @return a serializable version of <code>propId</code> or the passed
-     *         propId itself it is already serializable.
-     */
-    private PropertyId createSerializablePropertyId(PropertyId propId) {
-        if (propId instanceof Serializable) {
-            return propId;
-        } else {
-            return idFactory.createPropertyId(
-                    createSerializableNodeId(propId.getParentId()),
-                    propId.getQName());
-        }
-    }
-
-    /**

INS26 INS40 INS31 INS31 MOV29 MOV83 MOV43 MOV42 MOV44 MOV44 MOV43 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 MOV44 INS43 INS43 INS8 INS54 INS65 UPD42 MOV42 INS43 INS42 UPD42 MOV42 INS42 INS54 INS8 MOV12 INS65 INS42 INS8 INS12 MOV60 MOV41 INS60 INS25 INS44 INS8 INS32 INS43 INS59 INS62 MOV8 INS8 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS43 INS41 INS60 INS61 INS41 INS42 INS32 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS11 INS43 INS59 INS32 INS8 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS42 UPD42 MOV42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS60 INS25 INS43 INS32 INS42 INS42 INS43 INS43 INS59 MOV62 INS8 INS8 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS11 UPD42 INS21 INS25 INS43 INS32 INS32 INS32 INS8 INS8 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS11 UPD42 MOV42 INS42 INS42 INS11 INS42 INS43 INS42 INS43 INS42 INS42 UPD42 MOV42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL25 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL48 DEL11 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL14 DEL41 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL62 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31