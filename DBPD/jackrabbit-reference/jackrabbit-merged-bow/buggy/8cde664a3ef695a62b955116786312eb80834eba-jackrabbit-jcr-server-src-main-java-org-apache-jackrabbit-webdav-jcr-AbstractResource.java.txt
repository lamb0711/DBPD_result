JCR-2946 - Improve implementation of DavResource#getProperty(DavPropertyName)
JCR-2948 - Add possibility to PROPFIND the JCR_NODETYPES_CND_LN property

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1155296 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.jcr.property.JcrDavPropertyNameSet;
+    protected DavPropertyNameSet names;
+     * @param factory
-        return getProperties().getPropertyNames();
+        initPropertyNames();
+        return names.getContent().toArray(new DavPropertyName[names.getContentSize()]);
-        return getProperties().get(name);
+        DavProperty prop = getProperties().get(name);
+        if (prop == null) {
+            if (DeltaVConstants.SUPPORTED_METHOD_SET.equals(name)) {
+                prop = new SupportedMethodSetProperty(getSupportedMethods().split(",\\s"));
+            } else if (DeltaVConstants.SUPPORTED_REPORT_SET.equals(name)) {
+                prop = supportedReports;
+            } else if (DeltaVConstants.CREATOR_DISPLAYNAME.equals(name)) {
+                // DAV:creator-displayname default value : not available
+                prop = new DefaultDavProperty<String>(DeltaVConstants.CREATOR_DISPLAYNAME, getCreatorDisplayName(), true);
+            } else if (DeltaVConstants.COMMENT.equals(name)) {
+                // DAV:comment not value available from jcr
+                prop = new DefaultDavProperty<String>(DeltaVConstants.COMMENT, null, true);
+            } else if (DeltaVConstants.WORKSPACE.equals(name)) {
+                // 'workspace' property as defined by RFC 3253
+                String workspaceHref = getWorkspaceHref();
+                if (workspaceHref != null) {
+                    prop = new HrefProperty(DeltaVConstants.WORKSPACE, workspaceHref, true);
+                }
+            }
+        }
+
+        // TODO: required supported-live-property-set  
+        return prop;
-            throw new DavException(DavServletResponse.SC_UNPROCESSABLE_ENTITY, "Unkown report "+ reportInfo.getReportName() +"requested.");
+            throw new DavException(DavServletResponse.SC_UNPROCESSABLE_ENTITY, "Unknown report "+ reportInfo.getReportName() +"requested.");
+     * Property names common to all resources.
+     */
+    protected void initPropertyNames() {
+        names = new DavPropertyNameSet(JcrDavPropertyNameSet.BASE_SET);
+    }
+
+    /**
-        properties.add(new DefaultDavProperty<String>(DavPropertyName.CREATIONDATE, HttpDateFormat.creationDateFormat().format(new Date(0))));
+        properties.add(new DefaultDavProperty<String>(DavPropertyName.CREATIONDATE, getCreationDate()));
-        properties.add(new SupportedMethodSetProperty(getSupportedMethods().split(",\\s")));
-
-        // DeltaV properties
-        properties.add(supportedReports);
-        // DAV:creator-displayname default value : not available
-        properties.add(new DefaultDavProperty<String>(DeltaVConstants.CREATOR_DISPLAYNAME, null, true));
-        // DAV:comment not value available from jcr
-        properties.add(new DefaultDavProperty<String>(DeltaVConstants.COMMENT, null, true));
-
-        // 'workspace' property as defined by RFC 3253
-        String workspaceHref = getWorkspaceHref();
-        if (workspaceHref != null) {
-            properties.add(new HrefProperty(DeltaVConstants.WORKSPACE, workspaceHref, true));
-        }
-
-        // TODO: required supported-live-property-set
+     * @throws org.apache.jackrabbit.webdav.DavException
+    /**
+     * Returns the display name of the creator which is used for the protected
+     * {@link DeltaVConstants#CREATOR_DISPLAYNAME} property.
+     *
+     * @return always <code>null</code>; subclasses may provide a regular value.
+     */
+    protected String getCreatorDisplayName() {
+        return null;
+    }
+
+    /**
+     * Returns the creation date which is used for the
+     * {@link DavPropertyName#CREATIONDATE} property.
+     *
+     * @return a dummy date; subclasses may provide a reasonable value.
+     */
+    protected String getCreationDate() {
+        return HttpDateFormat.creationDateFormat().format(new Date(0));
+    }
+

INS26 INS40 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS8 MOV21 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS42 INS42 INS65 INS21 INS60 INS25 INS65 INS21 INS65 INS65 INS65 INS42 INS41 INS65 INS65 INS42 INS41 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS66 INS7 INS40 INS66 INS65 INS66 INS66 INS33 INS66 INS65 INS66 INS66 MOV32 INS42 INS42 INS3 INS42 INS42 MOV32 INS42 INS33 INS25 INS42 INS14 INS67 INS67 INS42 UPD42 INS5 INS32 INS32 INS8 INS25 INS43 INS40 UPD40 INS32 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS40 INS42 INS42 MOV21 INS32 INS8 INS25 INS42 INS42 INS42 INS7 INS40 INS42 INS42 INS21 INS32 INS8 INS25 UPD45 INS42 MOV14 INS7 INS40 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS42 INS7 INS40 INS42 INS42 MOV21 INS32 INS8 INS42 INS14 INS7 INS40 INS42 INS42 MOV60 MOV25 MOV74 INS40 INS32 INS9 INS42 MOV14 INS42 INS7 INS42 MOV14 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL9 DEL42 DEL42 DEL40 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21