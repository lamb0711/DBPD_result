JCR-3506 add ability of reverse lucene index check: whether all items in the repository that should be indexed are present in the index. because this check will take more time and resources it must be explicitly enabled using a system property.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1440908 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.HierarchyManager;
+import org.apache.jackrabbit.core.persistence.IterablePersistenceManager;
+import org.apache.jackrabbit.core.persistence.PersistenceManager;
+import org.apache.jackrabbit.core.persistence.check.ConsistencyChecker;
+import org.apache.jackrabbit.core.state.NoSuchItemStateException;
+import org.apache.jackrabbit.spi.Path;
+import javax.jcr.ItemNotFoundException;
+import java.util.Collections;
+import java.util.Iterator;
+     * The number of nodes to fetch at once from the persistence manager. Defaults to 8kb
+     */
+    private static final int NODESATONCE = Integer.getInteger("org.apache.jackrabbit.checker.nodesatonce", 1024 * 8);
+
+    /**
+     * Whether to check whether all the nodes that are in the repository are indexed.
+     * When false only the check is made whether all nodes in the index are also in the repository.
+     */
+    private static final boolean CHECKREVERSE = Boolean.getBoolean("org.apache.jackrabbit.checker.index.reverse");
+
+
+    private final SearchIndex handler;
+
+    /**
+     * The PersistenceManager of the workspace.
+     */
+    private IterablePersistenceManager pm;
+
+    /**
+     * The bundle consistency checker
+     */
+    private ConsistencyChecker checker;
+
+    /**
+     * Paths of nodes that are not be indexed
+     */
+    private Set<Path> excludedPaths;
+
+    /**
-    private ConsistencyCheck(MultiIndex index, ItemStateManager mgr) {
+    private ConsistencyCheck(MultiIndex index, SearchIndex handler, Set<NodeId> excludedIds) {
-        this.stateMgr = mgr;
+        this.handler = handler;
+
+        final HierarchyManager hierarchyManager = handler.getContext().getHierarchyManager();
+        excludedPaths = new HashSet<Path>(excludedIds.size());
+        for (NodeId excludedId : excludedIds) {
+            try {
+                final Path path = hierarchyManager.getPath(excludedId);
+                excludedPaths.add(path);
+            } catch (ItemNotFoundException e) {
+                log.warn("Excluded node does not exist");
+            } catch (RepositoryException e) {
+                log.error("Failed to get excluded path", e);
+            }
+        }
+
+        this.stateMgr = handler.getContext().getItemStateManager();
+        final PersistenceManager pm = handler.getContext().getPersistenceManager();
+        if (pm instanceof IterablePersistenceManager) {
+            this.pm = (IterablePersistenceManager) pm;
+        }
+        if (pm instanceof ConsistencyChecker) {
+            this.checker = (ConsistencyChecker) pm;
+        }
+     *
+     *
-     * @param mgr   the ItemStateManager from where to load content.
+     * @param handler the QueryHandler to use.
+     * @param excludedIds the set of node ids that are not indexed
-    static ConsistencyCheck run(MultiIndex index, ItemStateManager mgr) throws IOException {
-        ConsistencyCheck check = new ConsistencyCheck(index, mgr);
+    static ConsistencyCheck run(MultiIndex index, SearchIndex handler, final Set<NodeId> excludedIds)
+            throws IOException {
+        ConsistencyCheck check = new ConsistencyCheck(index, handler, excludedIds);
-                    log.warn("Exception while reparing: " + e);
+                    log.warn("Exception while repairing: " + e);
+        log.info("Checking index of workspace " + handler.getContext().getWorkspace());
+        checkIndexToItems();
+        checkItemsToIndex();
+    }
+
+    private void checkIndexToItems() throws IOException {
+        log.info("Checking index consistency");
+    private void checkItemsToIndex() {
+        if (!CHECKREVERSE) {
+            return;
+        }
+        if (pm == null) {
+            log.warn("Cannot run reverse index check with this PersistenceManager");
+            return;
+        }
+        log.info("Checking index completeness");
+        try {
+            int count = 0;
+            List<NodeId> batch = pm.getAllNodeIds(null, NODESATONCE);
+            while (!batch.isEmpty()) {
+                NodeId lastId = null;
+                for (NodeId nodeId : batch) {
+                    lastId = nodeId;
+
+                    count++;
+                    if (count % 1000 == 0) {
+                        log.info(pm + ": checked " + count + " node ids...");
+                    }
+
+                    checkNode(nodeId);
+
+                }
+                batch = pm.getAllNodeIds(lastId, NODESATONCE);
+            }
+        } catch (ItemStateException e) {
+            log.error("Exception while loading items to check", e);
+        } catch (RepositoryException e) {
+            log.error("Exception while loading items to check", e);
+        }
+
+    }
+
+    private void checkNode(final NodeId nodeId) {
+        try {
+            if (!documentIds.contains(nodeId) && !isExcluded(nodeId)) {
+                NodeState nodeState = getNodeState(nodeId);
+                if (nodeState != null && !isBrokenNode(nodeId, nodeState)) {
+                    errors.add(new NodeAdded(nodeId));
+                }
+            }
+        } catch (ItemStateException e) {
+            log.error("Failed to check node: " + nodeId, e);
+        }
+    }
+
+    private boolean isExcluded(NodeId id) {
+        try {
+            final HierarchyManager hierarchyManager = handler.getContext().getHierarchyManager();
+            final Path path = hierarchyManager.getPath(id);
+            for (Path excludedPath : excludedPaths) {
+                if (excludedPath.isEquivalentTo(path) || excludedPath.isAncestorOf(path)) {
+                    return true;
+                }
+            }
+        } catch (RepositoryException ignored) {
+        }
+        return false;
+    }
+
+    private NodeState getNodeState(NodeId nodeId) throws ItemStateException {
+        try {
+            return (NodeState) stateMgr.getItemState(nodeId);
+        } catch (NoSuchItemStateException e) {
+            return null;
+        }
+    }
+
+    private boolean isBrokenNode(final NodeId nodeId, final NodeState nodeState) throws ItemStateException {
+        final NodeId parentId = nodeState.getParentId();
+        if (parentId != null) {
+            final NodeState parentState = getNodeState(parentId);
+            if (parentState == null) {
+                log.warn("Node missing from index is orphaned node: " + nodeId);
+                return true;
+            }
+            if (!parentState.hasChildNodeEntry(nodeId)) {
+                log.warn("Node missing from index is abandoned node: " + nodeId);
+                return true;
+            }
+        }
+        return false;
+    }
+
-            super("Node " + id + " does not longer exist.", id);
+            super("Node " + id + " no longer exists.", id);
+
+    private class NodeAdded extends ConsistencyCheckError {
+
+        NodeAdded(final NodeId id) {
+            super("Node " + id + " is missing.", id);
+        }
+
+        @Override
+        public boolean repairable() {
+            return true;
+        }
+
+        @Override
+        void repair() throws IOException {
+            try {
+                NodeState nodeState = (NodeState) stateMgr.getItemState(id);
+                final Iterator<NodeId> remove = Collections.<NodeId>emptyList().iterator();
+                final Iterator<NodeState> add = Collections.singletonList(nodeState).iterator();
+                handler.updateNodes(remove, add);
+            } catch (RepositoryException e) {
+                throw new IOException(e.toString());
+            } catch (ItemStateException e) {
+                throw new IOException(e.toString());
+            }
+        }
+
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS74 INS59 INS44 INS44 INS8 INS44 MOV29 INS83 INS39 INS42 INS43 INS8 UPD42 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS42 INS43 INS31 INS31 INS31 INS65 INS42 INS32 INS65 INS42 INS32 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS43 INS43 INS42 INS43 INS42 INS74 INS42 MOV21 INS21 INS60 INS21 INS70 MOV21 INS60 INS25 INS25 INS65 UPD43 UPD42 INS83 INS74 INS42 INS42 INS21 INS21 INS21 INS21 INS25 INS25 INS21 INS54 INS83 INS43 INS42 INS54 INS43 INS42 INS54 INS41 INS42 INS43 INS42 INS42 INS54 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS39 INS42 INS43 INS8 INS66 INS42 INS42 INS45 INS27 INS66 INS66 INS42 INS42 INS45 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS7 INS83 INS43 INS59 INS7 INS44 INS42 INS8 INS83 INS43 INS59 INS62 INS8 INS62 INS8 UPD42 UPD66 INS42 INS66 UPD42 INS43 INS43 MOV43 INS32 INS32 INS32 INS32 INS38 INS8 INS27 INS8 INS32 INS8 INS12 INS12 INS42 INS8 INS12 INS42 INS8 INS12 INS9 INS42 INS8 INS12 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS9 INS83 INS43 INS42 INS46 INS42 INS41 INS42 INS42 INS54 INS34 INS34 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS14 INS43 INS42 INS54 INS32 INS42 INS42 INS32 INS42 INS43 INS21 INS42 INS43 INS21 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS41 INS42 INS33 INS21 INS41 INS42 INS42 INS45 INS60 INS60 INS61 INS44 INS8 INS44 INS8 INS25 INS44 INS8 INS60 INS60 INS70 INS44 INS8 INS41 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS25 INS42 INS27 INS42 INS9 INS8 INS12 INS12 INS52 INS42 INS32 INS42 INS74 INS32 INS42 INS8 INS12 INS12 INS32 INS42 INS32 INS42 INS42 INS7 INS42 INS7 MOV43 UPD42 INS42 INS45 INS32 INS32 INS39 INS59 INS74 INS59 INS38 INS8 INS43 INS42 INS21 INS43 INS42 INS21 INS27 INS8 INS43 INS42 INS21 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS42 INS8 INS43 INS42 INS11 INS43 INS42 INS41 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS38 INS8 UPD45 INS45 INS42 INS45 INS60 INS60 INS60 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS43 INS43 INS42 INS42 INS60 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS22 INS11 INS22 INS11 INS32 INS42 INS42 INS42 INS45 INS42 INS34 INS43 INS43 INS42 INS32 INS32 INS60 INS70 INS21 INS42 INS32 INS42 INS32 INS38 INS38 INS60 INS25 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS25 INS42 INS43 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS32 INS21 INS41 INS43 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS83 INS43 INS59 INS32 UPD43 MOV43 UPD42 MOV42 INS21 INS43 INS42 INS21 INS52 INS42 INS43 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS43 INS59 INS44 INS42 INS8 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS11 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS21 INS21 INS25 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS38 INS21 INS45 INS42 INS42 INS42 INS32 INS32 INS41 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS7 INS37 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS34 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS34 INS32 INS43 INS42 UPD45 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS45 DEL42 DEL44 DEL8