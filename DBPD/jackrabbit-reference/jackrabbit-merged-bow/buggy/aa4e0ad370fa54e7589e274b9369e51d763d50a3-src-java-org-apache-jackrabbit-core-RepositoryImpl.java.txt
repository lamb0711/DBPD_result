added some low-level hooks to NodeTypeRegistry & RepositoryImpl to improve re-usability of certain components

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161889 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.observation.ObservationManagerFactory;
+import org.apache.jackrabbit.core.observation.ObservationManagerFactory;
+import java.security.AccessControlContext;
+import java.security.AccessController;
-import java.security.AccessControlContext;
-import java.security.AccessController;
-    private final RepositoryConfig repConfig;
+    protected final RepositoryConfig repConfig;
-    /** the delegating observation dispatcher for all workspaces */
+    /**
+     * the delegating observation dispatcher for all workspaces
+     */
-    private RepositoryImpl(RepositoryConfig repConfig) throws RepositoryException {
+    protected RepositoryImpl(RepositoryConfig repConfig) throws RepositoryException {
-        nsReg = new NamespaceRegistryImpl(new BasedFileSystem(repStore, "/namespaces"));
+        nsReg = createNamespaceRegistry(new BasedFileSystem(repStore, "/namespaces"));
-        ntReg = NodeTypeRegistry.create(nsReg, new BasedFileSystem(repStore, "/nodetypes"));
+        ntReg = createNodeTypeRegistry(nsReg, new BasedFileSystem(repStore, "/nodetypes"));
+     * Creates the <code>NamespaceRegistry</code> instance.
+     *
+     * @param fs
+     * @return
+     * @throws RepositoryException
+     */
+    protected NamespaceRegistryImpl createNamespaceRegistry(FileSystem fs)
+            throws RepositoryException {
+        return new NamespaceRegistryImpl(fs);
+    }
+
+    /**
+     * Creates the <code>NodeTypeRegistry</code> instance.
+     *
+     * @param fs
+     * @return
+     * @throws RepositoryException
+     */
+    protected NodeTypeRegistry createNodeTypeRegistry(NamespaceRegistry nsReg,
+                                                      FileSystem fs)
+            throws RepositoryException {
+        return NodeTypeRegistry.create(nsReg, fs);
+    }
+
+    /**
+    /**
+     * Performs a sanity check on this repository instance.
+     *
+     * @throws IllegalStateException if this repository has been rendered
+     *                               invalid for some reason (e.g. if it has
+     *                               been shut down)
+     */
+    protected void sanityCheck() throws IllegalStateException {
+        // check repository status
+        if (disposed) {
+            throw new IllegalStateException("repository instance has been shut down");
+        }
+    }
+
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
+     * Returns the {@link WorkspaceInfo} for the named workspace.
+     *
+     * @param workspaceName The name of the workspace whose {@link WorkspaceInfo}
+     *                      is to be returned. This must not be <code>null</code>.
+     * @return The {@link WorkspaceInfo} for the named workspace. This will
+     *         never be <code>null</code>.
+     * @throws IllegalStateException    If this repository has already been
+     *                                  shut down.
+     * @throws NoSuchWorkspaceException If the named workspace does not exist.
+     */
+    protected WorkspaceInfo getWorkspaceInfo(String workspaceName)
+            throws NoSuchWorkspaceException {
+        // check sanity of this instance
+        sanityCheck();
+
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
+            throw new NoSuchWorkspaceException(workspaceName);
+        }
+
+        return wspInfo;
+    }
+
+    /**
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getItemStateProvider();
+        return getWorkspaceInfo(workspaceName).getItemStateProvider();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getObservationManagerFactory();
+        return getWorkspaceInfo(workspaceName).getObservationManagerFactory();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getSearchManager();
+        return getWorkspaceInfo(workspaceName).getSearchManager();
+        // check sanity of this instance
+        sanityCheck();
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
-
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getLockManager();
+        return getWorkspaceInfo(workspaceName).getLockManager();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getSystemSession();
+        return getWorkspaceInfo(workspaceName).getSystemSession();
-
-    SessionImpl createSession(LoginContext loginContext, String workspaceName)
+    SessionImpl createSession(LoginContext loginContext,
+                              String workspaceName)
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        XASessionImpl ses = new XASessionImpl(this, loginContext, wspInfo.getConfig());
+        WorkspaceInfo wspInfo = getWorkspaceInfo(workspaceName);
+        SessionImpl ses = createSessionInstance(loginContext, wspInfo.getConfig());
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        XASessionImpl ses = new XASessionImpl(this, subject, wspInfo.getConfig());
+        WorkspaceInfo wspInfo = getWorkspaceInfo(workspaceName);
+        SessionImpl ses = createSessionInstance(subject, wspInfo.getConfig());
-        // check state
+        // check status of this instance
+    /**
+     * Returns an <code>InputStream</code> on a <code>Properties</code> resource
+     * which contains the default properties for the repository. This method is
+     * only called once during repository initialization.
+     * <p/>
+     * The <code>InputStream</code> returned is closed by the caller.
+     * <p/>
+     * This method returns an <code>InputStream</code> on the
+     * <code>org/apache/jackrabbit/core/repository.properties</code> resource
+     * found in the class path.
+     *
+     * @return <code>InputStream</code> on a <code>Properties</code> resource
+     *         or <code>null</code> if the resource does not exist.
+     */
+    protected InputStream getDefaultRepositoryProperties() {
+        return RepositoryImpl.class.getResourceAsStream("repository.properties");
+    }
+
-                InputStream in = RepositoryImpl.class.getResourceAsStream("repository.properties");
-                repProps.load(in);
-                in.close();
+                InputStream in = getDefaultRepositoryProperties();
+                if (in != null) {
+                    try {
+                        repProps.load(in);
+                    } finally {
+                        in.close();
+                    }
+                }
-    private static PersistenceManager createPersistenceManager(
-            File homeDir, FileSystem fs, PersistenceManagerConfig pmConfig,
-            String rootNodeUUID, NamespaceRegistry nsReg, NodeTypeRegistry ntReg)
+    private static PersistenceManager createPersistenceManager(File homeDir, FileSystem fs, PersistenceManagerConfig pmConfig,
+                                                               String rootNodeUUID, NamespaceRegistry nsReg, NodeTypeRegistry ntReg)
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        if (!wspInfos.containsKey(workspaceName)) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
+        // check if workspace exists (will throw NoSuchWorkspaceException if not)
+        getWorkspaceInfo(workspaceName);
-        // check state
+        // check status of this instance
+    //-----------------------------------------< overrideable factory methods >
+    /**
+     * Creates an instance of the {@link SessionImpl} class representing a
+     * user authenticated by the <code>loginContext</code> instance attached
+     * to the workspace configured by the <code>wspConfig</code>.
+     *
+     * @throws AccessDeniedException when ??
+     * @throws RepositoryException   If any other error occurrs creating the
+     *                               session.
+     */
+    protected SessionImpl createSessionInstance(LoginContext loginContext,
+                                                WorkspaceConfig wspConfig)
+            throws AccessDeniedException, RepositoryException {
+
+        return new XASessionImpl(this, loginContext, wspConfig);
+    }
+
+    /**
+     * Creates an instance of the {@link SessionImpl} class representing a
+     * user represented by the <code>subject</code> instance attached
+     * to the workspace configured by the <code>wspConfig</code>.
+     *
+     * @throws AccessDeniedException when ??
+     * @throws RepositoryException   If any other error occurrs creating the
+     *                               session.
+     */
+    protected SessionImpl createSessionInstance(Subject subject,
+                                                WorkspaceConfig wspConfig)
+            throws AccessDeniedException, RepositoryException {
+
+        return new XASessionImpl(this, subject, wspConfig);
+    }
+
-         *  if no <code>SearchManager</code>
+         *         if no <code>SearchManager</code>

MOV26 MOV26 MOV26 MOV31 MOV31 MOV31 MOV31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 UPD83 INS29 INS83 INS43 UPD42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 MOV43 UPD42 INS8 MOV43 UPD42 INS8 MOV43 UPD42 INS8 MOV43 UPD42 MOV42 INS8 MOV43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 MOV43 MOV8 MOV43 INS42 MOV44 MOV43 MOV43 INS8 MOV43 INS42 MOV44 MOV43 INS8 MOV29 MOV43 MOV42 MOV44 MOV43 MOV43 INS8 INS29 INS83 MOV43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 UPD42 MOV42 INS41 INS65 INS65 INS42 INS21 MOV41 INS21 MOV41 INS21 MOV41 INS21 MOV41 INS21 MOV41 INS65 INS65 INS65 INS65 INS65 MOV42 INS43 INS42 INS21 INS21 INS41 INS21 MOV41 INS21 INS41 INS21 INS41 INS21 INS41 INS60 INS65 INS65 INS41 INS21 INS21 INS65 INS65 INS65 UPD42 MOV42 INS43 INS42 INS43 INS42 UPD42 MOV42 INS42 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 UPD42 MOV42 INS42 MOV41 UPD66 INS66 INS42 INS42 INS42 INS14 INS66 INS42 INS42 INS42 INS42 INS32 INS66 INS42 INS66 INS66 INS66 INS32 INS32 INS32 INS32 INS32 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD43 INS43 MOV59 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 MOV32 INS32 INS32 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 UPD42 MOV42 INS14 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS14 INS32 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS32 MOV42 UPD42 MOV42 INS32 MOV42 INS42 INS32 INS42 INS32 UPD42 INS32 INS32 UPD42 MOV42 INS32 INS42 UPD42 MOV42 MOV42 INS42 MOV43 INS52 INS42 INS42 INS42 MOV43 INS52 INS42 INS42 INS42 MOV14 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 MOV32 UPD42 MOV42 MOV42 INS42 INS42 MOV32 INS25 INS43 INS27 INS8 INS42 INS32 INS42 INS33 INS54 INS42 INS8 INS8 MOV21 MOV21 DEL14 DEL42 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL41 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL41 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL32 DEL11 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL52 DEL42 DEL14 DEL42 DEL43 DEL42 DEL32 DEL11 DEL52 DEL42 DEL14 DEL42 DEL33 DEL27 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL60 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL38 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32