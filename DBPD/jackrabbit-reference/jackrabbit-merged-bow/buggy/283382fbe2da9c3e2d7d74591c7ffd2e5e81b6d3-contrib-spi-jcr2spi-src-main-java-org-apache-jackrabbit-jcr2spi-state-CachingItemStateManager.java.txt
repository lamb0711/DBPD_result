- Rename TransientChangeLog to TransientItemStateManager.
- ChangeLog does not disconnect ItemStates anymore
- Added WorkspaceItemStateManager which extends CachingItemStateManager. CachingItemStateManager is now more generic.
- TransientItemStateManager implements TransientItemStateFactory

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431572 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.EventIterator;
-import org.apache.jackrabbit.spi.Event;
-import org.apache.jackrabbit.jcr2spi.observation.InternalEventListener;
-import java.util.List;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.Iterator;
-public class CachingItemStateManager implements ItemStateManager, InternalEventListener {
+public class CachingItemStateManager implements ItemStateManager, ItemStateLifeCycleListener {
+        root.addListener(this);
-    //-------------------------------< InternalEventListener >------------------
+    //------------------------< ItemStateListener >-----------------------------
-    /**
-     * Processes <code>events</code> and invalidates cached <code>ItemState</code>s
-     * accordingly.
-     * @param events 
-     * @param isLocal
-     */
-    public void onEvent(EventIterator events, boolean isLocal) {
-        // if events origin from local changes then
-        // cache does not need invalidation
-        if (isLocal) {
-            return;
-        }
-
-        // collect set of removed node ids
-        Set removedNodeIds = new HashSet();
-        List eventList = new ArrayList();
-        while (events.hasNext()) {
-            Event e = events.nextEvent();
-            eventList.add(e);
-        }
-
-        for (Iterator it = eventList.iterator(); it.hasNext(); ) {
-            Event e = (Event) it.next();
-            ItemId itemId = e.getItemId();
-            NodeId parentId = e.getParentId();
-            ItemState state;
-            NodeState parent;
-            switch (e.getType()) {
-                case Event.NODE_ADDED:
-                case Event.PROPERTY_ADDED:
-                    state = lookup(itemId);
-                    if (state != null) {
-                        // TODO: item already exists ???
-                        // remove from cache and invalidate
-                        recentlyUsed.remove(state);
-                        state.discard();
-                    }
-                    parent = (NodeState) lookup(parentId);
-                    if (parent != null) {
-                        // discard and let wsp manager reload state when accessed next time
-                        recentlyUsed.remove(parent);
-                        parent.discard();
-                    }
-                    break;
-                case Event.NODE_REMOVED:
-                case Event.PROPERTY_REMOVED:
-                    state = lookup(itemId);
-                    if (state != null) {
-                        if (itemId.denotesNode()) {
-                            if (itemId.getRelativePath() == null) {
-                                // also remove mapping from uuid
-                                uuid2NodeState.remove(itemId.getUUID());
-                            }
-                        }
-                        recentlyUsed.remove(state);
-                        state.notifyStateDestroyed();
-                    }
-                    state = lookup(parentId);
-                    if (state != null) {
-                        parent = (NodeState) state;
-                        // check if removed as well
-                        if (removedNodeIds.contains(parent.getId())) {
-                            // do not invalidate here
-                        } else {
-                            // discard and let wsp manager reload state when accessed next time
-                            recentlyUsed.remove(parent);
-                            parent.discard();
-                        }
-                    }
-                    break;
-                case Event.PROPERTY_CHANGED:
-                    state = lookup(itemId);
-                    // discard and let wsp manager reload state when accessed next time
-                    if (state != null) {
-                        recentlyUsed.remove(state);
-                        state.discard();
-                    }
+    public void statusChanged(ItemState state, int previousStatus) {
+        if (state.getStatus() == ItemState.STATUS_REMOVED ||
+                state.getStatus() == ItemState.STATUS_STALE_DESTROYED) {
+            recentlyUsed.remove(state);
+            if (state.isNode()) {
+                NodeState nodeState = (NodeState) state;
+                if (nodeState.getUUID() != null) {
+                    uuid2NodeState.remove(nodeState.getUUID());
+                }
+    public void stateCreated(ItemState created) {
+    }
+
+    public void stateModified(ItemState modified) {
+    }
+
+    public void stateDestroyed(ItemState destroyed) {
+    }
+
+    public void stateDiscarded(ItemState discarded) {
+    }
+
-    private void touch(ItemState state) {
+    protected void touch(ItemState state) {
-        NodeState nodeState = null;
+        // start with root node if no uuid part in id
+        NodeState nodeState = root;
+                nodeState.addListener(this);
-    private ItemState lookup(ItemId id) {
+    protected ItemState lookup(ItemId id) {

UPD43 INS31 INS31 INS31 INS31 INS31 UPD42 MOV83 MOV39 UPD42 MOV42 MOV44 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 UPD83 UPD83 INS21 UPD43 UPD42 UPD39 UPD42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 INS32 UPD42 INS27 MOV8 INS42 INS42 INS42 MOV43 INS42 INS42 INS52 INS27 INS27 MOV21 INS42 INS32 INS40 INS32 INS40 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 INS60 INS21 MOV43 INS59 UPD27 INS32 INS42 MOV11 INS42 INS42 INS52 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL32 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL10 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL10 DEL40 DEL49 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL50 DEL8 DEL24 DEL8 DEL31 DEL42 DEL43 DEL33