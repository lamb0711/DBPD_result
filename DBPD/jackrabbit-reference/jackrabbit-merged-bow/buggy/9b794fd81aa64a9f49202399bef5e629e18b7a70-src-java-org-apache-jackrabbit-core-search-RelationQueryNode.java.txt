Added SQL and XPath query implementation. The implementation is not complete yet. Only basic operations are supported.
Also added postGoals to the maven.xml to generate the parser classes for SQL XPath.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@123135 13f79535-47bb-0310-9956-ffa450edef68

+     * Creates a new <code>RelationQueryNode</code> without a type nor value
+     * assigned.
+     * @param parent the parent node for this query node.
+     */
+    public RelationQueryNode(QueryNode parent, int operation) {
+        super(parent);
+        this.operation = operation;
+    }
+
+    /**
+     * Sets a new property name for this relation query node.
+     * @param name the new property name.
+     */
+    public void setProperty(String name) {
+        property = name;
+    }
+
+    /**
+     * Sets a new value of type <code>long</code>.
+     * @param value the new value.
+     */
+    public void setLongValue(long value) {
+        valueLong = value;
+        type = TYPE_LONG;
+    }
+
+    /**
+     * Sets a new value of type <code>double</code>.
+     * @param value the new value.
+     */
+    public void setDoubleValue(double value) {
+        valueDouble = value;
+        type = TYPE_DOUBLE;
+    }
+
+    /**
+     * Sets a new value of type <code>String</code>.
+     * @param value the new value.
+     */
+    public void setStringValue(String value) {
+        valueString = value;
+        type = TYPE_STRING;
+    }
+
+    /**
+     * Sets a new value of type <code>Date</code>.
+     * @param value the new value.
+     */
+    public void setDateValue(Date value) {
+        valueDate = value;
+        type = TYPE_DATE;
+    }
+
+    /**
-            sb.append("=");
+            sb.append(" = ");
-            sb.append(">=");
+            sb.append(" >= ");
-            sb.append(">");
+            sb.append(" > ");
-            sb.append("<=");
+            sb.append(" <= ");
-            sb.append("<");
+            sb.append(" < ");
-            sb.append("<>");
+            sb.append(" <> ");
-        } else if (type == TYPE_DATE) {
+        } else if (type == TYPE_DATE || type == TYPE_TIMESTAMP) {
+     * Returns a JCR SQL representation for this query node.
+     *
+     * @return a JCR SQL representation for this query node.
+     */
+    public String toJCRSQLString() {
+        StringBuffer sb = new StringBuffer();
+        sb.append("\"" + property + "\"");
+
+        if (operation == OPERATION_EQ) {
+            sb.append(" = ");
+        } else if (operation == OPERATION_GE) {
+            sb.append(" >= ");
+        } else if (operation == OPERATION_GT) {
+            sb.append(" > ");
+        } else if (operation == OPERATION_LE) {
+            sb.append(" <= ");
+        } else if (operation == OPERATION_LIKE) {
+            sb.append(" LIKE ");
+        } else if (operation == OPERATION_LT) {
+            sb.append(" < ");
+        } else if (operation == OPERATION_NE) {
+            sb.append(" <> ");
+        } else {
+            throw new RuntimeException("invalid operation: " + operation);
+        }
+
+
+        if (type == TYPE_LONG) {
+            sb.append(valueLong);
+        } else if (type == TYPE_DOUBLE) {
+            sb.append(valueDouble);
+        } else if (type == TYPE_STRING) {
+            sb.append("'").append(valueString.replaceAll("'", "''")).append("'");
+        } else if (type == TYPE_DATE || type == TYPE_TIMESTAMP) {
+            Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
+            cal.setTime(valueDate);
+            sb.append("TIMESTAMP '").append(ISO8601.format(cal)).append("'");
+        } else {
+            throw new RuntimeException("Invalid type: " + type);
+        }
+        return sb.toString();
+    }
+
+    /**
-        // todo implement
-        return "";
+        StringBuffer sb = new StringBuffer();
+        // @todo use escaping for property name
+        sb.append("@" + property);
+
+        if (operation == OPERATION_EQ) {
+            sb.append(" = ");
+        } else if (operation == OPERATION_GE) {
+            sb.append(" >= ");
+        } else if (operation == OPERATION_GT) {
+            sb.append(" > ");
+        } else if (operation == OPERATION_LE) {
+            sb.append(" <= ");
+        } else if (operation == OPERATION_LIKE) {
+            // @todo make namespace aware
+            sb.insert(0, "jcrfn:like(").append(",");
+        } else if (operation == OPERATION_LT) {
+            sb.append(" < ");
+        } else if (operation == OPERATION_NE) {
+            sb.append(" != ");
+        } else {
+            throw new RuntimeException("invalid operation: " + operation);
+        }
+
+
+        if (type == TYPE_LONG) {
+            sb.append(valueLong);
+        } else if (type == TYPE_DOUBLE) {
+            sb.append(valueDouble);
+        } else if (type == TYPE_STRING) {
+            sb.append("'").append(valueString.replaceAll("'", "''")).append("'");
+        } else if (type == TYPE_DATE || type == TYPE_TIMESTAMP) {
+            Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
+            cal.setTime(valueDate);
+            // @todo make namespace aware
+            sb.append("xs:dateTime('").append(ISO8601.format(cal)).append("')");
+        } else {
+            throw new RuntimeException("Invalid type: " + type);
+        }
+        return sb.toString();

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS8 INS65 INS65 INS43 INS42 INS39 INS42 INS46 INS21 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS39 INS42 INS21 INS21 INS65 INS65 INS39 INS42 INS21 INS21 INS65 INS65 INS43 INS42 INS21 INS21 INS65 INS65 INS43 INS42 INS21 INS21 INS65 INS65 INS42 INS60 INS21 INS25 INS25 INS41 INS60 INS21 INS25 INS25 INS41 INS66 INS66 INS42 INS66 INS42 INS42 INS7 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS7 INS7 INS66 INS42 INS66 INS7 INS7 INS66 INS42 INS66 INS42 INS7 INS7 INS66 INS42 INS66 INS42 INS7 INS7 INS66 INS66 INS43 INS59 INS32 INS27 INS8 INS25 INS27 INS8 INS25 INS32 INS43 INS59 INS32 INS27 INS8 INS25 INS27 INS8 INS25 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS21 INS27 INS8 INS25 INS42 INS42 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS21 INS27 INS8 INS25 INS42 INS42 INS21 INS27 INS8 INS25 INS42 INS42 INS52 INS42 INS43 INS45 INS42 INS45 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS43 INS45 INS42 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS32 INS42 INS42 INS21 INS27 INS8 INS25 UPD45 INS27 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS27 INS8 INS8 UPD45 MOV27 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS27 INS27 INS60 INS21 INS21 INS53 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS27 INS27 INS60 INS21 INS21 INS53 UPD45 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS14 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS14 UPD45 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS27 INS8 INS8 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS27 INS8 INS8 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS53 INS42 INS42 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS21 INS53 INS42 INS42 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS45 INS42 UPD45 INS42 INS42 INS45 INS32 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS34 INS45 INS42 INS42 INS45 INS32 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 UPD45 INS42 INS42 INS45 INS43 INS27 INS42 INS42 INS45 INS43 INS27 INS42 INS45 INS42 INS42 INS45 INS42 DEL45 DEL41 DEL8