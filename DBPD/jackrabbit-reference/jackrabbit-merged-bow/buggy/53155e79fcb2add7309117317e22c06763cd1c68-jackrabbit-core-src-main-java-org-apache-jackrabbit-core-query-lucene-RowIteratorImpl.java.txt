JCR-2076: JSR 283: Joins
- columns

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@781369 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.PropertyImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.ColumnImpl;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.Map;
-     * Array of select property names
+     * Linked map of {@link ColumnImpl columns}, indexed by their column name
+     * (String).
-    private final Name[] properties;
-
-    /**
-     * Set of select property <code>Name</code>s.
-     */
-    private Set propertySet;
+    private final Map<String, ColumnImpl> columns;
-    private final List selectorNames = new ArrayList();
+    private final List<Name> selectorNames = new ArrayList<Name>();
-     * @param properties      <code>Name</code> of the select properties.
+     * @param columns         the columns to select.
+     * @param valueFactory    the value factory of the current session.
+     * @throws NamespaceException if an error occurs while translating a JCR
+     *                            name.
-                    Name[] properties,
+                    Map<String, ColumnImpl> columns,
-                    SpellSuggestion spellSuggestion) {
+                    SpellSuggestion spellSuggestion)
+            throws NamespaceException {
-        this.properties = properties;
+        this.columns = columns;
-                Value[] tmp = new Value[properties.length];
-                for (int i = 0; i < properties.length; i++) {
-                    if (getNodeImpl().hasProperty(properties[i])) {
-                        PropertyImpl prop = getNodeImpl().getProperty(properties[i]);
-                        if (!prop.getDefinition().isMultiple()) {
-                            if (prop.getDefinition().getRequiredType() == PropertyType.UNDEFINED) {
-                                tmp[i] = valueFactory.createValue(prop.getString());
-                            } else {
-                                tmp[i] = prop.getValue();
-                            }
-                        } else {
-                            // mvp values cannot be returned
-                            tmp[i] = null;
-                        }
-                    } else {
-                        // property not set or one of the following:
-                        // jcr:path / jcr:score / rep:excerpt / rep:spellcheck
-                        if (NameConstants.JCR_PATH.equals(properties[i])) {
-                            tmp[i] = valueFactory.createValue(getNodeImpl().getPath(), PropertyType.PATH);
-                        } else if (NameConstants.JCR_SCORE.equals(properties[i])) {
-                            tmp[i] = valueFactory.createValue(Math.round(score * 1000f));
-                        } else if (isExcerptFunction(properties[i])) {
-                            tmp[i] = getExcerpt();
-                        } else if (isSpellCheckFunction(properties[i])) {
-                            tmp[i] = getSpellCheckedStatement();
-                        } else {
-                            tmp[i] = null;
-                        }
-                    }
+                Value[] tmp = new Value[columns.size()];
+                int i = 0;
+                for (String columnName : columns.keySet()) {
+                    tmp[i++] = getValue(columnName);
-         * Returns the value of the indicated  property in this <code>Row</code>.
+         * Returns the value of the indicated  column in this <code>Row</code>.
-         * If <code>propertyName</code> is not among the column names of the
+         * If <code>columnbName</code> is not among the column names of the
-         * @throws ItemNotFoundException if <code>propertyName</code> is not
+         * @throws ItemNotFoundException if <code>columnName</code> is not
-         * @throws RepositoryException   if <code>propertyName</code> is not a
-         *                               valid property name.
+         * @throws RepositoryException   if another error occurs.
-        public Value getValue(String propertyName) throws ItemNotFoundException, RepositoryException {
-            if (propertySet == null) {
-                // create the set first
-                Set tmp = new HashSet();
-                tmp.addAll(Arrays.asList(properties));
-                propertySet = tmp;
-            }
+        public Value getValue(String columnName) throws ItemNotFoundException, RepositoryException {
-                Name prop = resolver.getQName(propertyName);
-                if (!propertySet.contains(prop)) {
-                    if (isExcerptFunction(propertyName)) {
+                ColumnImpl col = columns.get(columnName);
+                if (col == null) {
+                    if (isExcerptFunction(columnName)) {
-                        return getExcerpt(propertyName);
+                        return getExcerpt(columnName);
-                        throw new ItemNotFoundException(propertyName);
+                        throw new ItemNotFoundException(columnName);
-                if (NameConstants.JCR_PATH.equals(prop)) {
-                    QValue p = valueFactory.getQValueFactory().create(hmgr.getPath(sn[0].getNodeId()));
+                Node n = getNode(col.getSelectorName());
+                if (n == null) {
+                    return null;
+                }
+
+                if (NameConstants.JCR_PATH.equals(col.getPropertyQName())) {
+                    int idx = getSelectorIndex(col.getSelectorName());
+                    QValue p = valueFactory.getQValueFactory().create(hmgr.getPath(sn[idx].getNodeId()));
-                } else if (getNodeImpl().hasProperty(prop)) {
-                    Property p = getNodeImpl().getProperty(prop);
-                    if (p.getDefinition().getRequiredType() == PropertyType.UNDEFINED) {
-                        return valueFactory.createValue(p.getString());
+                } else if (n.hasProperty(col.getPropertyName())) {
+                    Property p = n.getProperty(col.getPropertyName());
+                    if (p.getDefinition().isMultiple()) {
+                        // mvp values cannot be returned
+                        return null;
-                        return p.getValue();
+                        if (p.getDefinition().getRequiredType() == PropertyType.UNDEFINED) {
+                            return valueFactory.createValue(p.getString());
+                        } else {
+                            return p.getValue();
+                        }
+                    Name prop = resolver.getQName(columnName);
-                if (isExcerptFunction(propertyName)) {
+                if (isExcerptFunction(columnName)) {
-                    return getExcerpt(propertyName);
+                    return getExcerpt(columnName);
-                // TODO correct?
-                // TODO correct?
-                return Double.NaN;
+                return 0;
+         * @param id a node id.
-                log.debug("Created excerpt in {} ms.", new Long(time));
+                log.debug("Created excerpt in {} ms.", time);
+         * @param text the text where to apply highlighting.
-                log.debug("Highlighted text in {} ms.", new Long(time));
+                log.debug("Highlighted text in {} ms.", time);

MOV26 MOV26 UPD40 UPD40 INS23 MOV29 MOV83 MOV83 INS74 MOV59 INS74 INS43 INS43 INS43 INS43 UPD42 MOV43 MOV43 INS65 INS65 INS74 UPD42 INS42 INS66 INS65 UPD66 INS66 INS42 UPD42 MOV42 INS42 INS74 UPD42 UPD66 INS42 INS66 INS42 INS66 INS66 INS43 INS43 INS43 UPD42 INS65 INS65 INS42 INS66 MOV43 MOV43 UPD42 MOV42 INS42 INS42 UPD42 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS66 INS42 UPD42 INS60 INS70 INS60 INS25 MOV5 INS39 MOV59 INS44 INS32 INS8 INS43 INS27 INS43 INS59 INS27 INS8 INS34 INS43 INS42 UPD42 MOV42 INS42 MOV21 INS42 UPD42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS41 INS32 INS60 INS32 INS8 INS42 INS42 MOV5 INS32 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS32 INS33 INS42 UPD42 MOV42 INS39 INS59 INS42 INS42 MOV32 INS60 INS25 INS60 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV43 INS59 INS32 INS8 MOV8 MOV43 INS59 MOV37 UPD42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS41 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL43 DEL23 DEL85 DEL5 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL39 DEL58 DEL42 DEL40 DEL27 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL32 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL2 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL40 DEL42 DEL42 DEL2 DEL32 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL7 DEL21 DEL8 DEL40 DEL42 DEL42 DEL42 DEL2 DEL32 DEL8 DEL42 DEL42 DEL42 DEL2 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL2 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL33 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL8 DEL25 DEL8 DEL24 DEL66 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL34 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL40 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14