JCR-1169 Distribution of commons classes (adjust jackrabbit-core)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@590014 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.PathFormat;
-import org.apache.jackrabbit.name.MalformedPathException;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.name.PathBuilder;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.conversion.NamePathResolver;
+import org.apache.jackrabbit.conversion.MalformedPathException;
+     * Name and Path resolver
+     */
+    private NamePathResolver resolver;
+
+    /**
+
+        this.resolver = NamePathResolverImpl.create(nsMappings);
-            field = NameFormat.format(node.getPropertyName(), nsMappings);
-            value = NameFormat.format(node.getValue(), nsMappings);
-        } catch (NoPrefixDeclaredException e) {
+            field = resolver.getJCRName(node.getPropertyName());
+            value = resolver.getJCRName(node.getValue());
+        } catch (NamespaceException e) {
-            String mixinTypesField = NameFormat.format(QName.JCR_MIXINTYPES, nsMappings);
-            String primaryTypeField = NameFormat.format(QName.JCR_PRIMARYTYPE, nsMappings);
+            String mixinTypesField = resolver.getJCRName(NameConstants.JCR_MIXINTYPES);
+            String primaryTypeField = resolver.getJCRName(NameConstants.JCR_PRIMARYTYPE);
-                                NameFormat.format(node.getValue(), nsMappings)));
+                                resolver.getJCRName(node.getValue())));
-                                NameFormat.format(node.getValue(), nsMappings)));
+                                resolver.getJCRName(node.getValue())));
-                    String ntName = nsMappings.translatePropertyName(nt.getName(),
-                            session.getNamespaceResolver());
+                    Name n = session.getQName(nt.getName());
+                    String ntName = nsMappings.translatePropertyName(n);
-                QName propName = relPath.getNameElement().getName();
+                Name propName = relPath.getNameElement().getName();
-                Path.PathElement[] elements = relPath.getElements();
+                Path.Element[] elements = relPath.getElements();
-                        name = NameFormat.format(elements[i].getName(), nsMappings);;
+                        name = resolver.getJCRName(elements[i].getName());
-        } catch (NoPrefixDeclaredException e) {
-            exceptions.add(e);
-                QName nameTest = steps[0].getNameTest();
+                Name nameTest = steps[0].getNameTest();
-                        name = NameFormat.format(nameTest, nsMappings);
-                    } catch (NoPrefixDeclaredException e) {
+                        name = resolver.getJCRName(nameTest);
+                    } catch (NamespaceException e) {
-                String internalName = NameFormat.format(node.getNameTest(), nsMappings);
+                String internalName = resolver.getJCRName(node.getNameTest());
-            } catch (NoPrefixDeclaredException e) {
+            } catch (NamespaceException e) {
-                        subQuery = createMatchAllQuery(NameFormat.format(QName.JCR_PRIMARYTYPE, nsMappings));
-                    } catch (NoPrefixDeclaredException e) {
+                        subQuery = createMatchAllQuery(resolver.getJCRName(NameConstants.JCR_PRIMARYTYPE));
+                    } catch (NamespaceException e) {
-            String refProperty = NameFormat.format(node.getRefProperty(), nsMappings);
+            String refProperty = resolver.getJCRName(node.getRefProperty());
-                nameTest = NameFormat.format(node.getNameTest(), nsMappings);
+                nameTest = resolver.getJCRName(node.getNameTest());
-        } catch (NoPrefixDeclaredException e) {
+        } catch (NamespaceException e) {
-                    QName propertyName = node.getRelativePath().getNameElement().getName();
+                    Name propertyName = node.getRelativePath().getNameElement().getName();
-            Path.PathBuilder builder;
+            PathBuilder builder;
-                builder = new Path.PathBuilder();
+                builder = new PathBuilder();
-                builder = new Path.PathBuilder(relPath);
+                builder = new PathBuilder(relPath);
-            builder.addLast(QName.JCR_PRIMARYTYPE);
+            builder.addLast(NameConstants.JCR_PRIMARYTYPE);
-            field = NameFormat.format(relPath.getNameElement().getName(), nsMappings);
-        } catch (NoPrefixDeclaredException e) {
+            field = resolver.getJCRName(relPath.getNameElement().getName());
+        } catch (NamespaceException e) {
-        QName propName = relPath.getNameElement().getName();
+        Name propName = relPath.getNameElement().getName();
-            // check if string literal is a valid XML QName
+            // check if string literal is a valid XML Name
-                // parse string literal as JCR QName
+                // parse string literal as JCR Name
-                    String translatedQName = nsMappings.translatePropertyName(
-                            ISO9075.decode(node.getStringValue()),
-                            session.getNamespaceResolver());
+                    Name n = session.getQName(ISO9075.decode(node.getStringValue()));
+                    String translatedQName = nsMappings.translatePropertyName(n);
+                } catch (NamespaceException e) {
+                    exceptions.add(e);
+                    return data;
-                Path.PathElement[] elements = relPath.getElements();
+                Path.Element[] elements = relPath.getElements();
-                        name = NameFormat.format(elements[i].getName(), nsMappings);
+                        name = resolver.getJCRName(elements[i].getName());
-            } catch (NoPrefixDeclaredException e) {
+            } catch (NamespaceException e) {
-    private String[] getStringValues(QName propertyName, String literal) {
+    private String[] getStringValues(Name propertyName, String literal) {
-                        values.add(nsMappings.translatePropertyName(literal, session.getNamespaceResolver()));
+                        Name n = session.getQName(literal);
+                        values.add(nsMappings.translatePropertyName(n));
+                    } catch (NamespaceException e) {
+                        log.warn("Unable to coerce '" + literal + "' into a NAME: " + e.toString());
-                        values.add(PathFormat.format(p, nsMappings));
+                        values.add(resolver.getJCRPath(p));
-                    values.add(PathFormat.format(
-                            session.getQPath(literal), nsMappings));
+                    values.add(resolver.getJCRPath(session.getQPath(literal)));
-                    values.add(nsMappings.translatePropertyName(literal, session.getNamespaceResolver()));
+                    Name n = session.getQName(literal);
+                    values.add(nsMappings.translatePropertyName(n));

UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS29 INS83 INS43 INS59 INS65 INS42 INS42 INS21 UPD43 INS66 INS7 INS12 UPD43 UPD42 INS22 INS32 MOV8 INS44 INS8 UPD42 INS52 INS42 INS42 INS42 INS42 UPD43 MOV43 MOV43 UPD43 UPD43 INS43 INS42 INS21 UPD42 MOV21 MOV21 UPD42 UPD43 INS42 UPD40 INS42 INS32 INS12 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD40 UPD42 UPD42 UPD40 MOV43 MOV43 UPD43 UPD5 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 MOV12 UPD5 UPD43 INS60 INS44 INS8 INS60 UPD42 UPD43 UPD42 UPD42 INS60 UPD43 UPD42 INS43 INS59 INS43 INS42 INS21 INS60 MOV43 MOV43 INS43 MOV43 INS59 UPD40 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 INS43 MOV43 INS59 UPD43 INS41 UPD40 INS42 INS42 INS32 INS42 INS32 INS43 INS59 UPD42 UPD42 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS27 UPD42 UPD42 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD43 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD43 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL20 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32