[JCR-181] jcr-server should honor a webdav request's Content-Type and Content-Language headers
[JCR-200] move log4j initialization out of RepositoryStartupServlet

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@240176 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.nodetype.PropertyDefinition;
+import org.apache.jackrabbit.webdav.io.InputContext;
-    private DavPropertySet properties;
+    private DavPropertySet properties = new DavPropertySet();
+     * Package protected method that allows to define whether this resource
+     * represents a collection or not.
+     *
+     * @param isCollection
+     */
+    void setIsCollection(boolean isCollection) {
+        this.isCollection = isCollection;
+    }
+
+    /**
-        if (properties == null && exists()) {
-            properties = new DavPropertySet();
+        if (exists()) {
-                String contentType = nodeResource.getContentType();
-                if (contentType != null) {
-                    properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTTYPE, contentType));
-                }
+                setContentType(nodeResource.getContentType());
+                setContentLanguage(nodeResource.getContentLanguage());
-            // JCR properties defined on the underlaying jcr node
+            // non-protected JCR properties defined on the underlaying jcr node
-                    DavPropertyName name = getDavName(pName, node.getSession());
-                    if (p.getDefinition().isMultiple()) {
-                        log.debug("Multivalued property '" + pName + "' not added to webdav property set.");
-                    } else {
-                        String value = p.getValue().getString();
-                        properties.add(new DefaultDavProperty(name, value));
+                    PropertyDefinition def = p.getDefinition();
+                    if (def.isMultiple()) {
+                        log.debug("Multivalue property '" +  pName + "' not added to webdav property set.");
+                        continue;
+                    DavPropertyName name = getDavName(pName, node.getSession());
+                    String value = p.getValue().getString();
+                    properties.add(new DefaultDavProperty(name, value, def.isProtected()));
+    /**
+     * Set the content type.
+     *
+     * @param contentType
+     */
+    private void setContentType(String contentType) {
+        if (contentType != null) {
+            properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTTYPE, contentType));
+        }
+    }
+
+    /**
+     * Set the content language.
+     *
+     * @param contentLanguage
+     */
+    private void setContentLanguage(String contentLanguage) {
+        if (contentLanguage != null) {
+            properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTLANGUAGE, contentLanguage));
+        }
+    }
-     * Adds a new non-collection member to this resource.
+     * Adds a new member to this resource.
-     * @see DavResource#addMember(DavResource, InputStream)
+     * @see DavResource#addMember(DavResource, InputContext)
-    public void addMember(DavResource member, InputStream in) throws DavException {
-        if (!exists() || in == null) {
-            throw new DavException(DavServletResponse.SC_BAD_REQUEST);
-        }
-	if (isLocked(this)) {
-            throw new DavException(DavServletResponse.SC_LOCKED);
-        }
-
-        try {
-            String fileName = member.getDisplayName();
-            // don't allow creation of nodes, that would be filtered out
-            if (isFilteredResource(member)) {
-                log.debug("Avoid creation of filtered resource: " + fileName);
-                throw new DavException(DavServletResponse.SC_FORBIDDEN);
-            }
-
-            ImportContext ctx = new ImportContext(node);
-            ctx.setInputStream(in);
-            ctx.setSystemId(fileName);
-            ImportResourceChain.getChain().execute(ctx);
-            session.getRepositorySession().save();
-        } catch (RepositoryException e) {
-            log.error("Error while executing import chain: " + e.toString());
-            throw new JcrDavException(e);
-        } catch (IOException e) {
-            log.error("Error while executing import chain: " + e.toString());
-            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
-        } catch (Exception e) {
-            log.error("Error while executing import chain: " + e.toString());
-            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
-        }
-    }
-
-    /**
-     * Creates a new collection as member of this resource.
-     *
-     * @see DavResource#addMember(DavResource)
-     */
-    public void addMember(DavResource member) throws DavException {
+    public void addMember(DavResource member, InputContext inputCxt) throws DavException {
-	if (isLocked(this)) {
+        if (isLocked(this)) {
-
-
-            ImportCollectionChain.getChain().execute(ctx);
+            boolean hasContent = inputCxt != null && inputCxt.getInputStream() != null;
+            if (hasContent) {
+                ctx.setInputStream(inputCxt.getInputStream());
+                ctx.setContentType(inputCxt.getContentType());
+                ctx.setContentLanguage(inputCxt.getContentLanguage());
+            }
+            if (member.isCollection()) {
+                ImportCollectionChain.getChain().execute(ctx);
+            } else {
+                ImportResourceChain.getChain().execute(ctx);
+            }
+            // if an input stream was present and was not consumed during the
+            // import the request must fail.
+            if (hasContent && ctx.getInputStream() != null) {
+                // undo all changes
+                node.refresh(false);
+                throw new DavException(DavServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
+            }
+            // persist changes after successful import
+            // should only be thrown by the ImportCollectionChain
+     * Creates a new member of this resource.
+     *
+     * @see DavResource#addMember(DavResource)
+     */
+    public void addMember(DavResource member) throws DavException {
+        addMember(member, null);
+    }
+
+    /**
-     * Build jcr property name from dav property name
+     * Build jcr property name from dav property name. If the property name
+     * defines a namespace uri, that has not been registered yet, an attempt
+     * is made to register the uri with the prefix defined. Note, that no
+     * extra effort is made to generated a unique prefix. 
-        String prefix = node.getSession().getNamespacePrefix(uri);
-        if (prefix != null && !"".equals(prefix)) {
-            pName = prefix + ":" + pName;
+
+        if (uri != null && !"".equals(uri)) {
+            Session s = session.getRepositorySession();
+            String prefix;
+            try {
+                // lookup 'prefix' in the session-ns-mappings / namespace-registry
+                prefix = s.getNamespacePrefix(uri);
+            } catch (NamespaceException e) {
+                // namespace uri has not been registered yet
+                NamespaceRegistry nsReg = s.getWorkspace().getNamespaceRegistry();
+                prefix = propName.getNamespace().getPrefix();
+                // NOTE: will fail if prefix is already in use in the namespace registry
+                nsReg.registerNamespace(prefix, uri);
+            }
+            if (prefix != null && !"".equals(prefix)) {
+                pName = prefix + ":" + pName;
+            }
-     *

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 MOV29 MOV39 UPD42 MOV42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS44 MOV29 INS83 INS39 INS42 MOV44 MOV43 INS8 MOV14 UPD65 INS39 UPD42 MOV21 INS65 INS65 MOV43 INS42 MOV25 INS65 INS65 MOV43 UPD42 MOV42 INS25 INS65 INS65 INS43 INS42 MOV21 INS25 INS66 UPD66 INS42 INS7 MOV32 INS66 INS42 INS66 INS42 INS27 INS8 INS66 INS68 INS42 INS8 UPD66 UPD66 INS66 INS66 INS66 INS27 INS8 INS22 INS42 MOV42 INS42 INS33 MOV21 INS42 INS42 MOV69 INS69 MOV60 MOV21 INS60 INS25 INS25 INS25 MOV21 UPD42 UPD42 INS33 INS27 INS38 INS60 INS60 INS54 MOV25 INS52 INS42 INS43 INS39 INS59 INS42 INS8 INS32 INS8 INS8 INS27 INS8 INS42 INS33 INS32 INS43 INS59 MOV43 INS59 INS8 INS12 INS21 INS21 UPD42 UPD42 INS14 INS42 INS42 INS27 INS21 INS21 INS21 INS42 INS42 MOV21 MOV21 INS42 INS27 INS21 INS53 INS45 INS42 INS42 INS42 INS42 MOV32 MOV42 INS21 INS44 INS8 INS32 INS32 INS43 INS40 INS42 INS27 INS27 INS32 INS32 INS32 INS32 INS33 INS32 INS14 INS7 INS43 INS42 INS60 INS21 INS21 INS42 MOV32 INS42 INS32 INS60 INS25 MOV60 MOV21 INS42 INS42 INS33 INS32 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS9 MOV43 INS40 INS42 INS32 INS42 INS43 INS59 INS7 INS32 INS42 INS42 INS43 INS59 MOV32 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 MOV42 INS42 INS42 MOV32 INS42 INS18 INS32 UPD42 MOV42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 UPD45 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL7 DEL21 DEL42 DEL59 DEL60 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL27 DEL83 DEL38 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL40 DEL14 DEL53 DEL8 DEL25 DEL42 DEL52 DEL32 DEL42 DEL43 DEL40 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL40 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL8 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL32 DEL59 DEL60