redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.log4j.Logger;
+    /**
+     * Serial UID
+     */
+     * Logger instance
+     */
+    private static Logger log = Logger.getLogger(NodeReferences.class);
+
+    /**
-    protected List references;
+    protected ArrayList references = new ArrayList();
+
+    /**
+     * New state
+     */
+    public static final int STATUS_NEW = 0;
+
+    /**
+     * Existing state
+     */
+    public static final int STATUS_EXISTING = 1;
+
+    /**
+     * Destroyed state
+     */
+    public static final int STATUS_DESTROYED = 2;
+
+    /**
+     * the internal status of this item state
+     */
+    protected int status = STATUS_NEW;
+
+    /**
+     * Backing state (may be null)
+     */
+    private NodeReferences overlayed;
-        this.targetId = targetId;
-        references = new ArrayList();
+        this.targetId  = targetId;
+    }
+
+    /**
+     * Package private constructor
+     *
+     * @param overlayed overlayed state
+     */
+    public NodeReferences(NodeReferences overlayed) {
+        this.overlayed = overlayed;
+
+        pull();
+    }
+
+    /**
+     * Copy information from another references object into this object
+     * @param refs source references object
+     */
+    void copy(NodeReferences refs) {
+        targetId = refs.targetId;
+        references.clear();
+        references.addAll(refs.getReferences());
+    }
+
+    /**
+     * Pull information from overlayed object.
+     */
+    void pull() {
+        if (overlayed != null) {
+            copy(overlayed);
+        }
+    }
+
+    /**
+     * Push information into overlayed object.
+     */
+    void push() {
+        if (overlayed != null) {
+            overlayed.copy(this);
+        }
+    }
+
+    /**
+     * Connect this object to an underlying overlayed object
+     */
+    void connect(NodeReferences overlayed) {
+        if (this.overlayed != null) {
+            throw new IllegalStateException(
+                    "References object already connected: " + this);
+        }
+        this.overlayed = overlayed;
+    }
+
+    /**
+     * Disconnect this object from the underlying overlayed object.
+     */
+    void disconnect() {
+        if (overlayed != null) {
+            overlayed = null;
+        }
+
+    /**
+     * Returns the status of this item.
+     *
+     * @return the status of this item.
+     */
+    public int getStatus() {
+        return status;
+    }
+
+    /**
+     * Sets the new status of this item.
+     *
+     * @param newStatus the new status
+     */
+    public void setStatus(int newStatus) {
+        switch (newStatus) {
+            case STATUS_NEW:
+            case STATUS_EXISTING:
+            case STATUS_DESTROYED:
+                status = newStatus;
+                return;
+        }
+        String msg = "illegal status: " + newStatus;
+        log.error(msg);
+        throw new IllegalArgumentException(msg);
+    }

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS29 INS83 INS83 INS43 INS59 UPD43 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS42 INS42 INS32 UPD42 MOV14 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS21 INS65 INS65 INS43 INS42 INS21 INS21 INS21 INS65 INS25 INS65 INS25 INS65 INS43 INS42 INS25 INS21 INS65 INS25 INS65 INS65 INS41 INS65 INS65 INS39 INS42 INS50 INS60 INS21 INS53 INS66 INS66 INS42 INS42 INS57 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS7 INS32 INS66 INS42 INS66 INS42 INS7 INS32 INS32 INS66 INS27 INS8 INS66 INS27 INS8 INS66 INS42 INS27 INS8 INS7 INS66 INS27 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS49 INS49 INS49 INS21 INS41 INS43 INS59 INS32 INS14 INS43 INS22 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS33 INS21 INS22 INS33 INS53 INS22 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS7 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS14 INS52 INS42 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS43 INS27 INS42 INS33 INS42 INS45 INS52 DEL42 DEL7 DEL21