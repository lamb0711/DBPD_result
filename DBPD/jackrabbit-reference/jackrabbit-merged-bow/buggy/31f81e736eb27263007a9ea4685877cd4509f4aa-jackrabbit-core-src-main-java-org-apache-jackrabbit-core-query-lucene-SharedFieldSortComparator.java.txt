JCR-2076: JSR 283: Joins

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@768954 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.PropertyType;
-
-            Comparable iTerm = sortValue(i);
-            Comparable jTerm = sortValue(j);
-
-            if (iTerm == jTerm) {
-                return 0;
-            } else if (iTerm == null) {
-                return -1;
-            } else if (jTerm == null) {
-                return 1;
-            } else if (iTerm.getClass() == jTerm.getClass()) {
-                return iTerm.compareTo(jTerm);
-            } else {
-                // differing types -> compare class names
-                String iName = iTerm.getClass().getName();
-                String jName = jTerm.getClass().getName();
-                return iName.compareTo(jName);
-            }
+            return Util.compare(sortValue(i), sortValue(j));
+            String namedValue = FieldNames.createNamedValue(propertyName, "");
-                        FieldNames.createNamedValue(propertyName, ""),
-                        SharedFieldSortComparator.this);
+                        namedValue, SharedFieldSortComparator.this);
-                    return getComparable(values[0]);
+                    return Util.getComparable(values[0]);
-
-        /**
-         * Returns a comparable for the <code>value</code>.
-         *
-         * @param value an internal value.
-         * @return a comparable for the given <code>value</code>.
-         */
-        private Comparable getComparable(InternalValue value) {
-            switch (value.getType()) {
-                case PropertyType.BINARY:
-                    return null;
-                case PropertyType.BOOLEAN:
-                    return ComparableBoolean.valueOf(value.getBoolean());
-                case PropertyType.DATE:
-                    return new Long(value.getDate().getTimeInMillis());
-                case PropertyType.DOUBLE:
-                    return new Double(value.getDouble());
-                case PropertyType.LONG:
-                    return new Long(value.getLong());
-                case PropertyType.NAME:
-                    return value.getQName().toString();
-                case PropertyType.PATH:
-                    return value.getPath().toString();
-                case PropertyType.REFERENCE:
-                case PropertyType.STRING:
-                    return value.getString();
-                default:
-                    return null;
-            }
-        }

INS8 MOV41 INS60 MOV43 INS59 UPD42 UPD42 MOV32 MOV32 INS42 MOV32 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL27 DEL34 DEL41 DEL8 DEL42 DEL33 DEL27 DEL34 DEL38 DEL41 DEL8 DEL42 DEL33 DEL27 DEL34 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL25 DEL25 DEL25 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL40 DEL49 DEL33 DEL41 DEL40 DEL49 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL40 DEL49 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL32 DEL41 DEL49 DEL33 DEL41 DEL50 DEL8 DEL31