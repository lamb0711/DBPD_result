- invalidating a NodeEntry must also invalidate the ChildNodeEntries collection in order to get informed about reordering of the entries.

- comparing ItemInfo.getPath to HierarchyEntry.getPath must use the 'workspace' path of the latter and not the current path present in the transient space, which differs in case of a moved item.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@518930 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ChildInfo;
+    static final int STATUS_OK = 0;
+    static final int STATUS_INVALIDATED = 1;
+
+    private int status = STATUS_OK;
+     * Mark <code>ChildNodeEntries</code> in order to force
+     */
+    void setStatus(int status) {
+        if (status == STATUS_INVALIDATED || status == STATUS_OK) {
+            this.status = status;
+        } else {
+            throw new IllegalArgumentException();
+        }
+    }
+
+    int getStatus() {
+        return status;
+    }
+
+    /**
-
-            // shortcut if index can never match
-            if (index > siblings.size()) {
-                return null;
-            }
-            // filter out removed states
-            for (Iterator it = siblings.iterator(); it.hasNext(); ) {
-                NodeEntry cne = ((LinkedEntries.LinkNode) it.next()).getNodeEntry();
-                if (cne.isAvailable()) {
-                    try {
-                        if (cne.getNodeState().isValid()) {
-                            index--;
-                        } else {
-                            // child node removed
-                        }
-                    } catch (ItemStateException e) {
-                        // should never happen, cne.isAvailable() returned true
-                    }
-                } else {
-                    // then this child node entry has never been accessed
-                    // before and is assumed valid // TODO: check if correct.
-                    index--;
-                }
-                if (index == 0) {
-                    return cne;
-                }
-            }
+            return findMatchingEntry(siblings, index, true);
+     * Find the matching NodeEntry for the given <code>ChildInfo</code>. Returns
+     * <code>null</code> if no matching entry can be found. NOTE, that no check
+     * for validity of the entries is made.
+     *
+     * @param childInfo
+     * @return
+     */
+    NodeEntry get(ChildInfo childInfo) {
+        String uniqueID = childInfo.getUniqueID();
+        if (uniqueID != null) {
+            return get(childInfo.getName(), uniqueID);
+        } else {
+            int index = childInfo.getIndex();
+            Object obj = nameMap.get(childInfo.getName());
+            if (obj == null) {
+                return null;
+            } else if (obj instanceof List) {
+                // map entry is a list of siblings
+                List siblings = (List) obj;
+                return findMatchingEntry(siblings, index, false);
+            } else if (index == Path.INDEX_DEFAULT) {
+                // map entry is a single child node entry
+                return ((LinkedEntries.LinkNode) obj).getNodeEntry();
+            } // else return 'null'
+        }
+        return null;
+    }
+
+    private static NodeEntry findMatchingEntry(List siblings, int index, boolean checkValidity) {
+        // shortcut if index can never match
+        if (index > siblings.size()) {
+            return null;
+        }
+        if (!checkValidity) {
+            return ((LinkedEntries.LinkNode) siblings.get(index - 1)).getNodeEntry();
+        } else {
+            // filter out removed states
+            for (Iterator it = siblings.iterator(); it.hasNext(); ) {
+                NodeEntry cne = ((LinkedEntries.LinkNode) it.next()).getNodeEntry();
+                if (cne.isAvailable()) {
+                    try {
+                        if (cne.getNodeState().isValid()) {
+                            index--;
+                        } else {
+                            // child node removed
+                        }
+                    } catch (ItemStateException e) {
+                        // should never happen, cne.isAvailable() returned true
+                    }
+                } else {
+                    // then this child node entry has never been accessed
+                    // before and is assumed valid // TODO: check if correct.
+                    index--;
+                }
+                if (index == 0) {
+                    return cne;
+                }
+            }
+        }
+        return null;
+    }
+
+    /**
+    void add(NodeEntry entry, NodeEntry beforeEntry) {
+        if (beforeEntry != null) {
+            // the link node where the new entry is ordered before
+            LinkedEntries.LinkNode beforeLN = getLinkNode(beforeEntry);
+            if (beforeLN == null) {
+                throw new NoSuchElementException();
+            }
+            add(entry);
+            Object insertObj = nameMap.get(entry.getQName());
+            LinkedEntries.LinkNode insertLN = getLinkNode(entry);
+            reorder(insertObj, insertLN, beforeLN);
+        } else {
+            // 'before' is null -> simply append new entry at the end
+            add(entry);
+        }
+    }
+
-        NodeEntry entry = null;
-        for (Iterator it = get(childEntry.getQName()).iterator(); it.hasNext(); ) {
-            NodeEntry tmp = (NodeEntry) it.next();
+        List l = get(childEntry.getQName());
+        for (int i = 0; i < l.size(); i++) {
+            NodeEntry tmp = (NodeEntry) l.get(i);
-                entry = tmp;
-                break;
+                int index = i+1; // index is 1-based
+                return remove(childEntry.getQName(), index);
-        if (entry != null) {
-            return remove(entry.getQName(), entry.getIndex());
-        }
-        return entry;
+        return null;
-        reorder(insertObj, insertLN, beforeLN);
+        if (previousBefore != beforeNode) {
+            reorder(insertObj, insertLN, beforeLN);
+        }
-     * @return the matching <code>LinkNode</code>.
-     * @throws NoSuchElementException if none of the <code>LinkNode</code>s
-     * matches.
+     * @return the matching <code>LinkNode</code> or <code>null</code>
-                // only check available child node entries
-                if (cne.isAvailable() && cne == nodeEntry) {
+                if (cne == nodeEntry) {
-            if (cne.isAvailable() && cne == nodeEntry) {
+            if (cne == nodeEntry) {

INS26 MOV31 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS39 INS42 INS44 INS8 INS39 INS42 INS8 MOV29 INS43 INS42 MOV44 INS44 INS8 INS29 INS43 INS42 INS44 INS8 INS83 INS83 INS42 INS44 INS44 INS39 INS42 INS44 INS44 INS8 MOV29 MOV43 INS42 MOV44 INS8 INS42 INS34 INS42 INS34 INS42 INS42 INS65 INS39 INS42 INS25 INS41 INS42 INS39 INS42 MOV25 MOV60 MOV25 INS25 INS41 INS65 INS65 INS65 UPD42 MOV42 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS39 INS42 MOV25 MOV43 INS42 MOV43 INS42 MOV25 INS60 INS24 INS41 INS25 INS66 INS27 INS8 INS8 INS42 MOV62 INS8 MOV8 INS33 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS33 INS42 INS38 INS8 INS8 INS8 INS43 MOV59 INS58 INS27 INS37 INS8 INS33 INS27 INS8 UPD66 INS27 INS27 INS21 INS53 MOV60 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS60 MOV60 INS25 INS42 INS41 UPD42 INS60 INS25 INS21 INS60 INS60 MOV21 INS21 INS42 UPD42 MOV32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS7 INS14 INS32 INS42 INS42 INS32 INS39 INS59 INS43 INS27 INS8 INS25 INS32 INS43 INS59 INS27 MOV8 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS34 INS42 INS42 MOV43 INS59 MOV27 INS8 INS32 MOV27 INS22 INS42 INS43 INS42 INS42 INS42 INS9 UPD42 MOV42 INS32 INS42 INS42 INS32 INS42 UPD42 INS32 INS42 INS33 INS41 INS62 MOV8 INS25 INS36 INS42 INS40 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS42 MOV32 INS40 INS42 INS32 INS42 INS42 INS42 INS11 INS60 MOV41 INS42 INS42 INS42 INS42 INS52 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS33 INS42 INS43 INS60 INS41 INS27 INS8 INS11 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS32 INS39 INS59 INS32 UPD27 UPD42 MOV42 INS42 INS42 INS43 INS59 INS32 INS42 INS40 INS41 INS43 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 MOV42 MOV42 INS42 INS42 INS11 INS42 INS42 INS42 INS9 INS32 INS40 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS42 INS43 INS42 INS36 INS42 INS42 INS34 INS42 INS11 INS43 INS42 INS40 DEL32 DEL11 DEL42 DEL42 DEL7 DEL21 DEL10 DEL42 DEL41 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL33 DEL59 DEL60 DEL43 DEL58 DEL32 DEL25 DEL8 DEL24 DEL8 DEL31 DEL42 DEL66 DEL66 DEL65 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27