JCR-3154 Stats for Queries continued

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1205199 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import java.util.Collections;
-import java.util.PriorityQueue;
+import java.util.Iterator;
+import java.util.concurrent.PriorityBlockingQueue;
-    private int queueSize = 15;
+    private final BoundedPriorityBlockingQueue<QueryStatDto> slowQueries = new BoundedPriorityBlockingQueue<QueryStatDto>(
+            15, comparator);
-    private PriorityQueue<QueryStatDto> queries = new PriorityQueue<QueryStatDto>(
-            queueSize + 1, comparator);
+    private final static Comparator<QueryStatDtoImpl> comparatorOccurrence = new QueryStatDtoOccurrenceComparator();
+
+    /**
+     * the real queue size will be bigger than the desired number of popular
+     * queries by POPULAR_QUEUE_MULTIPLIER times
+     */
+    private static final int POPULAR_QUEUE_MULTIPLIER = 5;
+
+    private final BoundedPriorityBlockingQueue<QueryStatDtoImpl> popularQueries = new BoundedPriorityBlockingQueue<QueryStatDtoImpl>(
+            15 * POPULAR_QUEUE_MULTIPLIER, comparatorOccurrence);
+
+    private static final class BoundedPriorityBlockingQueue<E> extends
+            PriorityBlockingQueue<E> {
+
+        private static final long serialVersionUID = 1L;
+        private int maxSize;
+
+        public BoundedPriorityBlockingQueue(int maxSize,
+                Comparator<? super E> comparator) {
+            super(maxSize + 1, comparator);
+            this.maxSize = maxSize;
+        }
+
+        @Override
+        public boolean offer(E e) {
+            boolean s = super.offer(e);
+            if (!s) {
+                return false;
+            }
+            if (size() > maxSize) {
+                poll();
+            }
+            return true;
+        }
+
+        public synchronized void setMaxSize(int maxSize) {
+            if (maxSize < this.maxSize) {
+                // shrink the queue
+                int delta = this.maxSize - maxSize;
+                for (int i = 0; i < delta; i++) {
+                    poll();
+                }
+            }
+            this.maxSize = maxSize;
+        }
+
+        public int getMaxSize() {
+            return maxSize;
+        }
+    }
-        return queueSize;
+        return slowQueries.getMaxSize();
-        synchronized (queries) {
-            this.queueSize = size;
-            this.queries = new PriorityQueue<QueryStatDto>(this.queueSize + 1,
-                    comparator);
-        }
+        slowQueries.setMaxSize(size);
-    public void setEnabled(boolean enabled) {
-        synchronized (queries) {
-            this.enabled = enabled;
-            this.queries = new PriorityQueue<QueryStatDto>(this.queueSize + 1,
-                    comparator);
-        }
+    public synchronized void setEnabled(boolean enabled) {
+        this.enabled = enabled;
-        synchronized (queries) {
-            queries.add(new QueryStatDtoImpl(language, statement, durationMs));
-            if (queries.size() > queueSize) {
-                queries.remove();
+        final QueryStatDtoImpl qs = new QueryStatDtoImpl(language, statement,
+                durationMs);
+        slowQueries.offer(qs);
+        Iterator<QueryStatDtoImpl> iterator = popularQueries.iterator();
+        while (iterator.hasNext()) {
+            QueryStatDtoImpl qsdi = iterator.next();
+            if (qsdi.equals(qs)) {
+                qs.setOccurrenceCount(qsdi.getOccurrenceCount() + 1);
+                iterator.remove();
+                break;
+        popularQueries.offer(qs);
-        synchronized (queries) {
-            queries.clear();
+        slowQueries.clear();
+    }
+
+    public QueryStatDto[] getSlowQueries() {
+        QueryStatDto[] top = slowQueries.toArray(new QueryStatDto[slowQueries
+                .size()]);
+        Arrays.sort(top, Collections.reverseOrder(comparator));
+        for (int i = 0; i < top.length; i++) {
+            top[i].setPosition(i + 1);
+        return top;
+    }
+
+    public QueryStatDto[] getPopularQueries() {
+        QueryStatDtoImpl[] top = popularQueries
+                .toArray(new QueryStatDtoImpl[popularQueries.size()]);
+        Arrays.sort(top, Collections.reverseOrder(comparatorOccurrence));
+        int retSize = Math.min(popularQueries.size(),
+                popularQueries.getMaxSize() / POPULAR_QUEUE_MULTIPLIER);
+        QueryStatDto[] retval = new QueryStatDto[retSize];
+        for (int i = 0; i < retSize; i++) {
+            top[i].setPosition(i + 1);
+            retval[i] = top[i];
+        }
+        return top;
+    }
+
+    public int getPopularQueriesQueueSize() {
+        return popularQueries.getMaxSize();
+    }
+
+    public void setPopularQueriesQueueSize(int size) {
+        popularQueries.setMaxSize(size * POPULAR_QUEUE_MULTIPLIER);
+    }
+
+    public void clearPopularQueriesQueue() {
+        popularQueries.clear();
-    }
-
-    public QueryStatDto[] getSlowQueries() {
-        return queries.toArray(new QueryStatDto[queries.size()]);
+        clearPopularQueriesQueue();

INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 UPD40 INS23 INS23 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 UPD74 INS83 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS42 INS73 INS74 INS23 INS23 MOV31 INS31 INS31 INS31 INS83 INS39 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV44 MOV44 INS8 MOV83 MOV39 INS42 INS8 INS83 MOV5 INS42 INS8 INS5 INS42 INS83 INS39 INS42 INS8 UPD42 INS44 INS8 INS39 UPD42 UPD43 UPD42 INS43 INS43 INS42 INS14 INS65 UPD42 UPD34 INS43 INS43 INS42 INS14 INS42 INS43 INS43 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS44 INS44 INS78 MOV83 INS39 INS42 INS44 INS8 INS83 INS83 MOV39 UPD42 MOV42 INS44 INS8 INS83 INS39 INS42 INS8 INS41 INS21 MOV21 MOV25 INS60 INS21 INS60 INS61 INS21 INS21 INS60 INS21 INS24 INS41 INS43 INS85 INS60 MOV21 INS60 INS60 INS24 INS41 INS41 INS39 INS42 MOV21 INS21 INS21 UPD42 UPD74 INS34 INS42 INS42 INS43 INS66 INS66 INS42 INS42 INS74 INS27 INS42 INS42 INS42 INS42 INS34 INS42 INS39 INS42 INS74 INS42 INS46 INS21 INS42 INS43 INS42 INS60 INS25 INS25 INS41 INS39 INS42 INS25 MOV21 INS41 INS32 INS32 INS83 INS43 INS59 INS32 INS74 INS59 INS32 INS8 INS32 INS32 MOV5 INS59 INS32 INS58 INS27 INS37 INS8 INS42 INS42 INS5 INS59 INS39 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS32 INS32 INS32 UPD43 INS42 INS43 INS43 INS34 INS42 INS43 INS76 INS27 INS42 INS7 INS42 INS39 INS59 INS38 INS8 INS27 INS8 INS9 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 UPD43 MOV43 UPD43 MOV43 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS85 INS42 INS32 UPD42 UPD42 INS42 INS32 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS42 INS42 MOV21 INS21 INS42 INS42 UPD42 UPD42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS42 INS43 INS42 INS34 INS22 INS42 INS42 INS48 INS42 INS41 INS32 INS42 INS21 INS42 INS22 INS60 INS24 UPD42 UPD42 UPD42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS42 INS5 INS42 INS42 INS34 INS7 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS9 INS42 INS32 INS52 INS42 INS39 INS59 INS58 INS27 INS37 INS8 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS10 INS5 INS32 INS2 INS42 INS27 INS5 INS32 UPD42 MOV42 MOV42 INS32 INS42 INS43 INS85 INS2 INS42 INS27 INS2 INS2 INS42 INS42 INS27 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS32 INS43 INS85 INS42 INS42 INS42 INS42 INS42 MOV34 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS34 INS32 INS42 INS42 INS27 INS42 INS42 MOV42 INS42 INS52 INS42 INS42 INS32 MOV34 INS42 INS42 DEL42 DEL34 DEL27 DEL39 DEL42 DEL42 DEL41 DEL42 DEL52 DEL42 DEL22 DEL74 DEL52 DEL42 DEL22 DEL27 DEL42 DEL14 DEL7 DEL21 DEL8 DEL51 DEL8 DEL31 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL43 DEL74 DEL52 DEL42 DEL22 DEL27 DEL42 DEL14 DEL7 DEL21 DEL8 DEL51 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL8 DEL25 DEL8 DEL51 DEL42 DEL8 DEL51 DEL8 DEL42 DEL42 DEL32 DEL3 DEL32 DEL41