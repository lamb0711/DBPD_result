re-implementing Workspace.importXML [work in progress...]




git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159394 13f79535-47bb-0310-9956-ffa450edef68

+                    ChildNodeDef def =
+                            wsp.findApplicableNodeDefinition(nodeName, ntName, parent);
+                    if (def.isProtected()) {
+                        // skip protected node
+                        parents.push(null); // push null onto stack for skipped node
+                        log.debug("skipping protected node " + nodeName);
+                        return;
+                    }
+
+                PropDef def = null;
-                    PropDef propDef = ntReg.getPropDef(existing.getDefinitionId());
-                    if (propDef.isProtected()) {
+                    def = ntReg.getPropDef(existing.getDefinitionId());
+                    if (def.isProtected()) {
-                    if (propDef.isAutoCreate() && (existing.getType() == type
+                    if (def.isAutoCreate() && (existing.getType() == type
-                            && propDef.isMultiple() == existing.isMultiValued()) {
+                            && def.isMultiple() == existing.isMultiValued()) {
+                    // find applicable definition
+
+                    // multi- or single-valued property?
+                    if (vals.length == 1) {
+                        // could be single- or multi-valued (n == 1)
+                        try {
+                            // try single-valued
+                            def = wsp.findApplicablePropertyDefinition(propName,
+                                    type, false, parent);
+                        } catch (ConstraintViolationException cve) {
+                            // try multi-valued
+                            def = wsp.findApplicablePropertyDefinition(propName,
+                                    type, true, parent);
+                        }
+                    } else {
+                        // can only be multi-valued (n == 0 || n > 1)
+                        def = wsp.findApplicablePropertyDefinition(propName,
+                                type, true, parent);
+                    }
+
+                    if (def.isProtected()) {
+                        // skip protected property
+                        log.debug("skipping protected property " + propName);
+                        continue;
+                    }
+
-                    prop = createProperty(node, propName, type, vals.length);
+                    prop = createProperty(node, propName, type, def);
-                PropDef propDef = ntReg.getPropDef(prop.getDefinitionId());
-
-                if ((vals.length == 0 || vals.length > 1) && !propDef.isMultiple()) {
+                if ((vals.length == 0 || vals.length > 1) && !def.isMultiple()) {
-                if (propDef.getRequiredType() != PropertyType.UNDEFINED
-                        && propDef.getRequiredType() != type) {
+                if (def.getRequiredType() != PropertyType.UNDEFINED
+                        && def.getRequiredType() != type) {
-                                        propDef.getRequiredType());
+                                        def.getRequiredType());

INS60 INS25 MOV43 INS59 MOV27 INS8 INS60 INS25 INS42 INS33 INS21 MOV25 INS25 INS21 INS43 INS59 INS32 INS8 INS7 INS27 INS8 INS8 INS32 INS8 INS7 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS41 INS42 MOV32 UPD42 INS40 INS34 INS54 INS21 INS42 INS42 INS21 INS18 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 INS8 INS12 INS7 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS33 INS42 INS42 INS27 UPD42 MOV21 INS44 INS8 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS9 INS42 INS45 INS42 UPD42 INS42 INS7 UPD42 UPD42 UPD42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 DEL42 DEL59 DEL60 DEL40 DEL8 DEL42 DEL43 DEL42 DEL32 DEL32 DEL59 DEL60