JCR-890: concurrent read-only access to a session

Turn Query.execute() and related methods into SessionOperations

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@983909 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.session.SessionContext;
+import org.apache.jackrabbit.core.session.SessionOperation;
+    /**
+     * Component context of the current session
+     */
+    protected final SessionContext sessionContext;
+
-    /** The index for the default selector withing {@link #scoreNodes} */
+    /** The index for the default selector within {@link #scoreNodes} */
-    /** ItemManager to turn UUIDs into Node instances */
-    protected final ItemManager itemMgr;
-
-     * @param itemMgr       the <code>ItemManager</code> to turn UUIDs into
-     *                      <code>Node</code> instances.
+     * @param sessionContext component context of the current session
-    NodeIteratorImpl(ItemManager itemMgr,
-                     ScoreNodeIterator scoreNodes,
-                     int selectorIndex) {
-        this.itemMgr = itemMgr;
+    NodeIteratorImpl(
+            SessionContext sessionContext, ScoreNodeIterator scoreNodes,
+            int selectorIndex) {
+        this.sessionContext = sessionContext;
-        // reset
-        next = null;
-        while (next == null && scoreNodes.hasNext()) {
-            ScoreNode[] sn = scoreNodes.nextScoreNodes();
-            try {
-                next = (NodeImpl) itemMgr.getItem(sn[selectorIndex].getNodeId());
-            } catch (RepositoryException e) {
-                log.warn("Exception retrieving Node with UUID: "
-                        + sn[selectorIndex].getNodeId() + ": " + e.toString());
-                // try next
-                invalid++;
-            }
+        try {
+            sessionContext.getSessionState().perform(new FetchNext());
+        } catch (RepositoryException e) {
+            log.warn("Failed to fetch next node", e);
+    private class FetchNext implements SessionOperation<Object> {
+
+        public Object perform(SessionContext context) {
+            next = null; // reset
+
+            ItemManager itemMgr = context.getItemManager();
+            while (next == null && scoreNodes.hasNext()) {
+                ScoreNode[] sn = scoreNodes.nextScoreNodes();
+                try {
+                    next = (NodeImpl) itemMgr.getItem(
+                            sn[selectorIndex].getNodeId());
+                } catch (RepositoryException e) {
+                    log.warn("Failed to retrieve query result node "
+                            + sn[selectorIndex].getNodeId(), e);
+                    // try next
+                    invalid++;
+                }
+            }
+
+            return this;
+        }
+
+    }
+

INS26 INS26 MOV23 INS40 INS40 INS31 INS55 UPD43 MOV29 INS83 INS39 INS42 INS8 INS83 INS42 INS74 MOV31 UPD42 UPD42 INS43 INS42 INS54 INS43 INS43 UPD83 INS43 INS42 INS44 UPD66 UPD66 UPD42 UPD66 INS42 INS8 INS12 INS42 INS42 INS42 INS43 INS42 INS60 INS41 UPD42 INS21 INS44 INS8 INS42 MOV43 INS59 INS52 UPD42 INS32 INS43 INS42 INS21 INS42 INS32 INS32 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 UPD45 DEL66 DEL42 DEL39 DEL42 DEL45 DEL42 DEL42 DEL32