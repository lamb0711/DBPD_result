(JCR-70) Expose registered node types below /jcr:system/jcr:nodeTypes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157939 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.ReferenceMap;
-import org.apache.jackrabbit.core.Constants;
-import org.apache.jackrabbit.core.ItemId;
-import org.apache.jackrabbit.core.QName;
-import org.apache.jackrabbit.core.nodetype.ChildNodeDef;
-import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
-import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
-import org.apache.jackrabbit.core.nodetype.PropDef;
-import org.apache.jackrabbit.core.nodetype.PropDefId;
-import org.apache.jackrabbit.core.state.ItemState;
-import org.apache.jackrabbit.core.state.ItemStateManager;
-import org.apache.jackrabbit.core.state.NodeState;
-import org.apache.jackrabbit.core.virtual.VirtualItemStateProvider;
-import org.apache.jackrabbit.core.virtual.VirtualPropertyState;
+import org.apache.jackrabbit.core.virtual.AbstractVISProvider;
-import java.util.HashSet;
-import java.util.Map;
-public class VersionItemStateProvider implements VirtualItemStateProvider, Constants {
+public class VersionItemStateProvider extends AbstractVISProvider {
-    /**
-     * the root node
-     */
-    private HistoryRootNodeState root;
+
-    /**
-     * the node type manager
-     */
-    private final NodeTypeRegistry ntReg;
-     * the cache node states. key=ItemId, value=ItemState
-     */
-    private Map nodes = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
-    /**
+
+
-     * the root node id
-     */
-    private final String rootNodeId;
-
-    /**
-    public VersionItemStateProvider(VersionManager vMgr, NodeTypeRegistry ntReg, String rootId, String parentId) throws RepositoryException {
+    public VersionItemStateProvider(VersionManager vMgr, NodeTypeRegistry ntReg,
+                                    String rootId, String parentId)
+            throws RepositoryException {
+        super(ntReg, new NodeId(rootId));
-        this.ntReg = ntReg;
-        this.rootNodeId = rootId;
-
-        createRootNodeState();
-     * Creates a new root node state
-     *
-     * @throws RepositoryException
+     * {@inheritDoc}
-    private void createRootNodeState() throws RepositoryException {
-        root = new HistoryRootNodeState(this, vMgr, parentId, rootNodeId);
+    protected VirtualNodeState createRootNodeState() throws RepositoryException {
+        VirtualNodeState root = new HistoryRootNodeState(this, vMgr, parentId, rootNodeId.getUUID());
+        return root;
-    //-----------------------------------------------------< ItemStateManager >
-     * @see ItemStateManager#hasItemState(org.apache.jackrabbit.core.ItemId)
+     * {@inheritDoc}
-    public boolean hasItemState(ItemId id) {
-        if (id instanceof NodeId) {
-            return hasNodeState((NodeId) id);
-        } else {
-            return hasPropertyState((PropertyId) id);
+    public boolean setNodeReferences(NodeReferences refs) {
+        try {
+            InternalVersionItem vi = vMgr.getItem(refs.getUUID());
+            if (vi != null) {
+                vMgr.setItemReferences(vi, refs.getReferences());
+                return true;
+            }
+        } catch (RepositoryException e) {
+            // ignore
+        return false;
-     * @see ItemStateManager#getItemState(ItemId)
-     */
-    public ItemState getItemState(ItemId id)
-            throws NoSuchItemStateException, ItemStateException {
-
-        if (id instanceof NodeId) {
-            return getNodeState((NodeId) id);
-        } else {
-            return getPropertyState((PropertyId) id);
-        }
-    }
-
-    /**
-     * @see ItemStateManager#getNodeReferences(NodeReferencesId)
+     * {@inheritDoc}
-    //-------------------------------------------< VirtualItemStateProvider >---
-     * @see VirtualItemStateProvider#isVirtualRoot(ItemId)
+     * {@inheritDoc}
-    public boolean isVirtualRoot(ItemId id) {
-        return id.equals(root.getId());
+    protected boolean internalHasNodeState(NodeId id) {
+        return vMgr.hasItem(id.getUUID());
-     * @see VirtualItemStateProvider#getVirtualRootId()
+     * {@inheritDoc}
-    public NodeId getVirtualRootId() {
-        return (NodeId) root.getId();
-    }
-
-    /**
-     * @see VirtualItemStateProvider#hasNodeState(NodeId)
-     */
-    public boolean hasNodeState(NodeId id) {
-        if (nodes.containsKey(id)) {
-            return true;
-        } else if (id.equals(root.getId())) {
-            return true;
-        } else {
-            return vMgr.hasItem(id.getUUID());
-        }
-    }
-
-    /**
-     * @see VirtualItemStateProvider#getNodeState(NodeId)
-     */
-    public VirtualNodeState getNodeState(NodeId id)
+    protected VirtualNodeState internalGetNodeState(NodeId id)
-        // check if root
-        if (id.equals(root.getId())) {
-            return root;
-        }
-
-        // check cache
-        VirtualNodeState state = (VirtualNodeState) nodes.get(id);
-        if (state == null) {
-            try {
-                InternalVersionItem vi = vMgr.getItem(id.getUUID());
-                if (vi instanceof InternalVersionHistory) {
-                    state = new VersionHistoryNodeState(this, (InternalVersionHistory) vi, root.getUUID());
-                    state.setDefinitionId(NDEF_VERSION_HISTORY);
-                    // add version labels node state
-                    String uuid = UUID.randomUUID().toString();
-                    VersionLabelsNodeState vlns = new VersionLabelsNodeState(this, (InternalVersionHistory) vi, state.getUUID(), uuid);
-                    vlns.setDefinitionId(NDEF_VERSION_LABELS);
-                    state.addChildNodeEntry(JCR_VERSIONLABELS, uuid);
-                    // need to add as hard reference to version history, so that it does not get fluhed.
-                    state.addStateReference(vlns);
-                    nodes.put(new NodeId(uuid), vlns);
-
-                } else if (vi instanceof InternalVersion) {
-                    InternalVersion v = (InternalVersion) vi;
-                    state = new VersionNodeState(this, v, vi.getParent().getId());
-                    state.setDefinitionId(NDEF_VERSION);
-                    state.setPropertyValue(JCR_CREATED, InternalValue.create(v.getCreated()));
-                    // todo: do not read frozen stuff from frozen node instance here, rather put to version
-                    //state.setPropertyValue(JCR_FROZENUUID, InternalValue.create(v.getFrozenNode().getFrozenUUID()));
-                    //state.setPropertyValue(JCR_FROZENPRIMARYTYPE, InternalValue.create(v.getFrozenNode().getFrozenPrimaryType()));
-                    //state.setPropertyValues(JCR_FROZENMIXINTYPES, PropertyType.NAME, InternalValue.create(v.getFrozenNode().getFrozenMixinTypes()));
-                    //state.setPropertyValues(JCR_VERSIONLABELS, PropertyType.STRING, InternalValue.create(v.getLabels()));
-                    state.setPropertyValues(JCR_PREDECESSORS, PropertyType.REFERENCE, new InternalValue[0]);
-                    state.setPropertyValues(JCR_SUCCESSORS, PropertyType.REFERENCE, new InternalValue[0]);
-
-                } else if (vi instanceof InternalFrozenNode) {
-                    InternalFrozenNode fn = (InternalFrozenNode) vi;
-                    VirtualNodeState parent = getNodeState(new NodeId(fn.getParent().getId()));
-                    boolean mimicFrozen = !(parent instanceof VersionNodeState);
-                    state = createNodeState(parent,
-                            JCR_FROZENNODE,
-                            id.getUUID(),
-                            mimicFrozen ? fn.getFrozenPrimaryType() :
-                            NT_FROZENNODE);
-                    mapFrozenNode(state, fn, mimicFrozen);
-
-                } else if (vi instanceof InternalFrozenVersionHistory) {
-                    InternalFrozenVersionHistory fn = (InternalFrozenVersionHistory) vi;
-                    VirtualNodeState parent = getNodeState(new NodeId(fn.getParent().getId()));
-                    state = createNodeState(parent,
-                            fn.getName(),
-                            id.getUUID(),
-                            NT_VERSIONEDCHILD);
-                    // IMO, this should be exposed aswell
-                    // state.setPropertyValue(JCR_BASE_VERSION, InternalValue.create(UUID.fromString(fn.getBaseVersionId())));
-                    state.setPropertyValue(JCR_CHILD, InternalValue.create(UUID.fromString(fn.getVersionHistoryId())));
-                } else {
-                    // not found, throw
-                    throw new NoSuchItemStateException(id.toString());
-                }
-            } catch (RepositoryException e) {
-                log.error("Unable to check for item:" + e.toString());
-                throw new ItemStateException(e);
-            }
-
-            // add state to cache
-            nodes.put(id, state);
-            log.debug("item added to cache. size=" + nodes.size());
-        }
-        return state;
-    }
-
-    /**
-     * @see VirtualItemStateProvider#hasPropertyState(PropertyId)
-     */
-    public boolean hasPropertyState(PropertyId id) {
-
-        try {
-            // get parent state
-            NodeState parent = getNodeState(new NodeId(id.getParentUUID()));
-
-            // handle some default prop states
-            if (parent instanceof VirtualNodeState) {
-                return ((VirtualNodeState) parent).hasPropertyEntry(id.getName());
-            }
-        } catch (ItemStateException e) {
-            // ignore
-        }
-        return false;
-    }
-
-    /**
-     * @see VirtualItemStateProvider#getPropertyState(PropertyId)
-     */
-    public VirtualPropertyState getPropertyState(PropertyId id)
-            throws NoSuchItemStateException, ItemStateException {
-
-        // get parent state
-        NodeState parent = getNodeState(new NodeId(id.getParentUUID()));
-
-        // handle some default prop states
-        if (parent instanceof VirtualNodeState) {
-            return ((VirtualNodeState) parent).getProperty(id.getName());
-        }
-        throw new NoSuchItemStateException(id.toString());
-    }
-
-    /**
-     * @see VirtualItemStateProvider#createPropertyState(VirtualNodeState, QName, int, boolean)
-     */
-    public VirtualPropertyState createPropertyState(VirtualNodeState parent,
-                                                    QName name, int type,
-                                                    boolean multiValued)
-            throws RepositoryException {
-        PropDef def = getApplicablePropertyDef(parent, name, type, multiValued);
-        VirtualPropertyState prop = new VirtualPropertyState(name, parent.getUUID());
-        prop.setType(type);
-        prop.setMultiValued(multiValued);
-        prop.setDefinitionId(new PropDefId(def));
-        return prop;
-    }
-
-    /**
-     * @see VirtualItemStateProvider#createNodeState(VirtualNodeState, QName, String, QName)
-     */
-    public VirtualNodeState createNodeState(VirtualNodeState parent, QName name,
-                                            String uuid, QName nodeTypeName)
-            throws RepositoryException {
-
-        NodeDefId def;
-        try {
-            def = new NodeDefId(getApplicableChildNodeDef(parent, name, nodeTypeName));
-        } catch (RepositoryException re) {
-            // hack, use nt:unstructured as parent
-            NodeTypeRegistry ntReg = getNodeTypeRegistry();
-            EffectiveNodeType ent = ntReg.getEffectiveNodeType(NT_UNSTRUCTURED);
-            ChildNodeDef cnd = ent.getApplicableChildNodeDef(name, nodeTypeName);
-            ntReg.getNodeDef(new NodeDefId(cnd));
-            def = new NodeDefId(cnd);
-        }
-
-        // create a new node state
-        if (uuid == null) {
-            uuid = UUID.randomUUID().toString();	// version 4 uuid
-        }
-        state = new VirtualNodeState(this, parent.getUUID(), uuid, nodeTypeName, new QName[0]);
-        state.setDefinitionId(def);
+        try {
+            InternalVersionItem vi = vMgr.getItem(id.getUUID());
+            if (vi instanceof InternalVersionHistory) {
+                state = new VersionHistoryNodeState(this, (InternalVersionHistory) vi, rootNodeId.getUUID());
+                state.setDefinitionId(NDEF_VERSION_HISTORY);
+                // add version labels node state
+                String uuid = UUID.randomUUID().toString();
+                VersionLabelsNodeState vlns = new VersionLabelsNodeState(this, (InternalVersionHistory) vi, state.getUUID(), uuid);
+                vlns.setDefinitionId(NDEF_VERSION_LABELS);
+                state.addChildNodeEntry(JCR_VERSIONLABELS, uuid);
+                // need to add as hard reference to version history, so that it does not get fluhed.
+                state.addStateReference(vlns);
+                cache(vlns);
-        nodes.put(state.getId(), state);
+            } else if (vi instanceof InternalVersion) {
+                InternalVersion v = (InternalVersion) vi;
+                state = new VersionNodeState(this, v, vi.getParent().getId());
+                state.setDefinitionId(NDEF_VERSION);
+                state.setPropertyValue(JCR_CREATED, InternalValue.create(v.getCreated()));
+                // todo: do not read frozen stuff from frozen node instance here, rather put to version
+                //state.setPropertyValue(JCR_FROZENUUID, InternalValue.create(v.getFrozenNode().getFrozenUUID()));
+                //state.setPropertyValue(JCR_FROZENPRIMARYTYPE, InternalValue.create(v.getFrozenNode().getFrozenPrimaryType()));
+                //state.setPropertyValues(JCR_FROZENMIXINTYPES, PropertyType.NAME, InternalValue.create(v.getFrozenNode().getFrozenMixinTypes()));
+                //state.setPropertyValues(JCR_VERSIONLABELS, PropertyType.STRING, InternalValue.create(v.getLabels()));
+                state.setPropertyValues(JCR_PREDECESSORS, PropertyType.REFERENCE, new InternalValue[0]);
+                state.setPropertyValues(JCR_SUCCESSORS, PropertyType.REFERENCE, new InternalValue[0]);
+
+            } else if (vi instanceof InternalFrozenNode) {
+                InternalFrozenNode fn = (InternalFrozenNode) vi;
+                VirtualNodeState parent = (VirtualNodeState) getItemState(new NodeId(fn.getParent().getId()));
+                boolean mimicFrozen = !(parent instanceof VersionNodeState);
+                state = createNodeState(parent,
+                        JCR_FROZENNODE,
+                        id.getUUID(),
+                        mimicFrozen ? fn.getFrozenPrimaryType() :
+                        NT_FROZENNODE);
+                mapFrozenNode(state, fn, mimicFrozen);
+
+            } else if (vi instanceof InternalFrozenVersionHistory) {
+                InternalFrozenVersionHistory fn = (InternalFrozenVersionHistory) vi;
+                VirtualNodeState parent = (VirtualNodeState) getItemState(new NodeId(fn.getParent().getId()));
+                state = createNodeState(parent,
+                        fn.getName(),
+                        id.getUUID(),
+                        NT_VERSIONEDCHILD);
+                // IMO, this should be exposed aswell
+                // state.setPropertyValue(JCR_BASE_VERSION, InternalValue.create(UUID.fromString(fn.getBaseVersionId())));
+                state.setPropertyValue(JCR_CHILD, InternalValue.create(UUID.fromString(fn.getVersionHistoryId())));
+            } else {
+                // not found, throw
+                throw new NoSuchItemStateException(id.toString());
+            }
+        } catch (RepositoryException e) {
+            log.error("Unable to check for item:" + e.toString());
+            throw new ItemStateException(e);
+        }
-     * returns the node type manager
-     *
-     * @return
-     */
-    private NodeTypeRegistry getNodeTypeRegistry() {
-        return ntReg;
-    }
-
-    /**
-    /**
-     * retrieves the property definition for the given contraints
-     *
-     * @param propertyName
-     * @param type
-     * @param multiValued
-     * @return
-     * @throws RepositoryException
-     */
-    protected PropDef getApplicablePropertyDef(NodeState parent, QName propertyName,
-                                               int type, boolean multiValued)
-            throws RepositoryException {
-        return getEffectiveNodeType(parent).getApplicablePropertyDef(propertyName, type, multiValued);
-    }
-
-    /**
-     * Retrieves the node definition for the given contraints.
-     *
-     * @param nodeName
-     * @param nodeTypeName
-     * @return
-     * @throws RepositoryException
-     */
-    protected ChildNodeDef getApplicableChildNodeDef(NodeState parent, QName nodeName, QName nodeTypeName)
-            throws RepositoryException {
-        return getEffectiveNodeType(parent).getApplicableChildNodeDef(nodeName, nodeTypeName);
-    }
-
-    /**
-     * Returns the effective (i.e. merged and resolved) node type representation
-     * of this node's primary and mixin node types.
-     *
-     * @return the effective node type
-     * @throws RepositoryException
-     */
-    protected EffectiveNodeType getEffectiveNodeType(NodeState parent) throws RepositoryException {
-        // build effective node type of mixins & primary type
-        NodeTypeRegistry ntReg = getNodeTypeRegistry();
-        // existing mixin's
-        HashSet set = new HashSet(parent.getMixinTypeNames());
-        // primary type
-        set.add(parent.getNodeTypeName());
-        try {
-            return ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
-        } catch (NodeTypeConflictException ntce) {
-            String msg = "internal error: failed to build effective node type for node " + parent.getUUID();
-            throw new RepositoryException(msg, ntce);
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean setNodeReferences(NodeReferences refs) {
-        try {
-            InternalVersionItem vi = vMgr.getItem(refs.getUUID());
-            if (vi != null) {
-                vMgr.setItemReferences(vi, refs.getReferences());
-                return true;
-            }
-        } catch (RepositoryException e) {
-            // ignore
-        }
-        return false;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateCreated(ItemState created) {
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateModified(ItemState modified) {
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDestroyed(ItemState destroyed) {
-        destroyed.removeListener(this);
-        if (destroyed.isNode() && ((NodeState) destroyed).getUUID().equals(rootNodeId)) {
-            try {
-                createRootNodeState();
-            } catch (RepositoryException e) {
-                // ignore
-            }
-        }
-        nodes.remove(destroyed.getId());
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDiscarded(ItemState discarded) {
-        discarded.removeListener(this);
-        if (discarded.isNode() && ((NodeState) discarded).getUUID().equals(rootNodeId)) {
-            try {
-                createRootNodeState();
-            } catch (RepositoryException e) {
-                // ignore
-            }
-        }
-        nodes.remove(discarded.getId());
-    }

MOV26 MOV31 MOV31 UPD40 UPD43 UPD42 MOV29 UPD83 MOV43 MOV29 INS39 INS42 MOV44 MOV8 UPD83 UPD42 MOV8 INS46 INS60 MOV41 MOV65 MOV65 MOV60 MOV41 INS42 INS14 MOV43 INS59 MOV43 INS42 INS42 INS14 MOV43 MOV52 MOV42 MOV42 INS32 INS42 INS42 UPD42 INS60 MOV43 INS59 MOV60 UPD42 INS42 INS11 MOV43 MOV43 INS32 INS11 INS42 MOV14 MOV43 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL40 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL66 DEL65 DEL42 DEL65 DEL29 DEL39 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL40 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL11 DEL32 DEL41 DEL8 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL41 DEL8 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL9 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL9 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL39 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL52 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL52 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL52 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31