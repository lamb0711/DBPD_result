Redesigned query manager to support pluggable implementation for search index.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@124906 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.*;
-import org.apache.jackrabbit.core.search.NamespaceMappings;
-import org.apache.jackrabbit.core.state.*;
+import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.ItemStateProvider;
+import org.apache.jackrabbit.core.state.NoSuchItemStateException;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.NoPrefixDeclaredException;
+import org.apache.jackrabbit.core.PropertyId;
+import org.apache.jackrabbit.core.InternalValue;
+import org.apache.jackrabbit.core.Path;
+import org.apache.jackrabbit.core.QName;
-import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+ * Creates a lucene <code>Document</code> object from a {@link javax.jcr.Node}.
+ * @todo add support for indexing of nt:resource. e.g. when mime type is text/*
-public class NodeIndexer {
+class NodeIndexer {
+    /** The <code>NodeState</code> of the node to index */
+
+    /** The persistent item state provider */
-    private final Path path;
+
+    /**
+     * Namespace mappings to use for indexing. This is the internal
+     * namespace mapping.
+     */
+    /**
+     * Creates a new node indexer.
+     * @param node the node state to index.
+     * @param stateProvider the persistent item state manager to retrieve properties.
+     * @param mappings internal namespace mappings.
+     */
-                        ItemStateProvider stateMgr,
-                        Path path,
+                        ItemStateProvider stateProvider,
-        this.stateProvider = stateMgr;
-        this.path = path;
+        this.stateProvider = stateProvider;
+    /**
+     * Creates a lucene Document from a node.
+     * @param node the node state to index.
+     * @param stateProvider the state provider to retrieve property values.
+     * @param mappings internal namespace mappings.
+     * @return the lucene Document.
+     * @throws RepositoryException if an error occurs while reading property
+     *   values from the <code>ItemStateProvider</code>.
+     */
-                                          ItemStateProvider stateMgr,
-                                          Path path,
-                                          NamespaceMappings mappings) {
-        NodeIndexer indexer = new NodeIndexer(node, stateMgr, path, mappings);
+                                          ItemStateProvider stateProvider,
+                                          NamespaceMappings mappings)
+            throws RepositoryException {
+        NodeIndexer indexer = new NodeIndexer(node, stateProvider, mappings);
-    private Document createDoc() {
+    /**
+     * Creates a lucene Document.
+     * @return the lucene Document with the index layout.
+     * @throws RepositoryException if an error occurs while reading property
+     *   values from the <code>ItemStateProvider</code>.
+     */
+    private Document createDoc() throws RepositoryException {
-            if (path.denotesRoot()) {
+            if (node.getParentUUID() == null) {
+                // root node
+                doc.add(new Field(FieldNames.LABEL, "", false, true, false));
+                NodeState parent = (NodeState) stateProvider.getItemState(
+                        new NodeId(node.getParentUUID()));
+                List entries = parent.getChildNodeEntries(node.getUUID());
+                for (Iterator it = entries.iterator(); it.hasNext();) {
+                    NodeState.ChildNodeEntry child = (NodeState.ChildNodeEntry) it.next();
+                    String name = child.getName().toJCRName(mappings);
+                    doc.add(new Field(FieldNames.LABEL, name, false, true, false));
+                }
-            // Label
-            doc.add(new Field(FieldNames.LABEL, path.getNameElement().toJCRName(mappings),
-                    false, true, false));
+        } catch (NoSuchItemStateException e) {
+            throw new RepositoryException("Error while indexing node: " + node.getUUID(), e);
+        } catch (ItemStateException e) {
+            throw new RepositoryException("Error while indexing node: " + node.getUUID(), e);
-                // FIXME do logging? throw?
+                throw new RepositoryException("Error while indexing node: " + node.getUUID(), e);
-                // FIXME do logging? throw?
+                throw new RepositoryException("Error while indexing node: " + node.getUUID(), e);
+    /**
+     * Adds a value to the lucene Document.
+     * @param doc the document.
+     * @param value the internal jackrabbit value.
+     * @param name the name of the property.
+     */

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 UPD40 UPD40 UPD40 INS65 INS65 INS29 INS29 INS29 INS29 INS29 MOV44 INS43 INS29 INS43 INS29 INS66 INS65 INS66 INS66 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV43 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 UPD42 MOV42 INS65 INS65 INS65 INS42 INS65 INS65 INS65 INS65 INS40 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 MOV42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 MOV43 INS66 INS66 INS42 INS66 INS66 INS8 INS12 INS12 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 INS25 MOV44 INS8 MOV44 INS8 MOV43 UPD42 INS27 MOV8 INS8 INS53 INS53 INS32 INS33 INS21 MOV21 INS60 INS60 INS24 INS14 INS14 INS44 INS44 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS43 INS27 INS42 INS43 INS27 INS42 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS14 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 MOV21 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS14 INS42 INS14 INS43 INS40 INS45 INS9 INS9 INS9 INS43 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS11 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS43 INS32 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL8 DEL25 DEL8