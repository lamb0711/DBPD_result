JCR-2113 : JSR 283 Access Control Management (contribution by Alfusainey Jallow)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1656464 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-            ImportNode n = new ImportNode(key);
-            if (!st.isEmpty()) {
-                ImportItem obj = st.peek();
-                if (obj instanceof ImportNode) {
-                    ((ImportNode) obj).addNode(n);
-                } else {
-                    throw new DiffException("Invalid DIFF format: The JSONArray may only contain simple values.");
-                }
-            }
+        	ImportNode n;
+        	if (st.isEmpty()) {
+        		try {
+            		n = new ImportNode(parent.getPath(), key);        			
+        		} catch (RepositoryException e) {
+        			throw new DiffException(e.getMessage(), e);
+        		}
+
+        	} else {
+        		ImportItem obj = st.peek();
+                n = new ImportNode(obj.getPath(), key);                                                    
+                if (obj instanceof ImportNode) {                        
+                	((ImportNode) obj).addNode(n);                    
+                } else {                
+                	throw new DiffException("Invalid DIFF format: The JSONArray may only contain simple values.");                    
+                }        		
+        	}
-        public void array() throws IOException {
-            ImportMvProp prop = new ImportMvProp(key);
+        public void array() throws IOException {            
+            ImportMvProp prop = new ImportMvProp(obj.getPath(), key);
-                ((ImportNode) obj).addProp(new ImportProp(key, v));
+                ((ImportNode) obj).addProp(new ImportProp(obj.getPath(), key, v));
+        final String parentPath;
-
-        private ImportItem(String name) throws IOException {
+        final String path;
+        
+        private ImportItem(String parentPath, String name) throws IOException {
+            this.parentPath = parentPath;
+            this.path = parentPath+"/"+name;
+        String getPath() {
+        	return path;
+        }
+        
-        private ImportNode(String name) throws IOException {
-            super(name);
+        private ImportNode(String parentPath, String name) throws IOException {
+            super(parentPath, name);
-        }
-
+        }        
+        
-        private ImportProperty(String name) throws IOException {
-            super(name);
+        private ImportProperty(String parentPath, String name) throws IOException {
+            super(parentPath, name);
-        private ImportProp(String name, Value v) throws IOException {
-            super(name);
-            this.value = v;
+        private ImportProp(String parentPath, String name, Value value) throws IOException {
+            super(parentPath, name);
+            try {
+                if (value == null) {
+            		this.value = extractValuesFromRequest(getPath())[0];
+            	} else {
+            		this.value = value;
+            	}                        	
+            } catch (RepositoryException e) {
+            	throw new DiffException(e.getMessage(), e);
+            }
-            try {
+            try {            	
-        private ImportMvProp(String name) throws IOException {
-            super(name);
+        private ImportMvProp(String parentPath, String name) throws IOException {
+            super(parentPath, name);
+            	// Multi-valued property with values present in the request multi-part             	
+            	if (values.size() == 0) {            	
+            		values = Arrays.asList(extractValuesFromRequest(getPath()));            	   
+            	}
+            	

INS26 INS40 INS23 INS23 INS31 MOV60 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS43 INS42 INS8 INS44 INS44 MOV43 INS44 INS44 MOV43 INS8 MOV44 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS43 INS42 UPD42 INS46 INS54 UPD42 MOV43 MOV32 INS8 MOV43 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS54 INS21 INS22 INS42 INS22 INS27 INS25 INS44 INS8 INS25 INS8 INS12 INS7 MOV43 INS32 INS52 INS42 INS52 INS42 INS42 INS45 INS42 INS27 MOV8 INS8 INS43 INS42 INS53 INS27 INS8 INS21 INS44 INS8 INS42 INS14 INS42 INS42 INS42 INS33 INS21 INS42 INS14 INS32 INS34 INS21 INS7 INS43 INS42 INS53 INS43 INS32 INS42 INS32 INS7 INS43 INS32 INS42 INS42 INS42 INS7 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS2 INS22 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 MOV43 INS32 INS42 INS43 INS32 INS42 INS32 INS34 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 DEL42 DEL14 DEL38 DEL42 DEL46 DEL42