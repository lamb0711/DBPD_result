JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.input.SAXBuilder;
-import org.jdom.Document;
-import org.jdom.JDOMException;
-import org.jdom.output.XMLOutputter;
-import org.jdom.output.Format;
-import org.xml.sax.ContentHandler;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.header.Header;
+import org.apache.xml.serialize.OutputFormat;
+import org.apache.xml.serialize.XMLSerializer;
+import org.xml.sax.SAXException;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.ByteArrayOutputStream;
+    static final DocumentBuilderFactory BUILDER_FACTORY = DocumentBuilderFactory.newInstance();
+    static {
+       BUILDER_FACTORY.setNamespaceAware(true);
+    }
-    public void setRequestBody(Document bodyDocument) {
-	String reqBody = new XMLOutputter(Format.getRawFormat()).outputString(bodyDocument);
-	setRequestBody(reqBody);
+    /**
+     *
+     * @param header
+     */
+    public void setRequestHeader(Header header) {
+        setRequestHeader(header.getHeaderName(), header.getHeaderValue());
-    public Document getReponseBodyAsDocument() throws IOException, JDOMException {
-	SAXBuilder builder = new SAXBuilder();
-	return builder.build(getResponseBodyAsStream());
+    /**
+     *
+     * @param requestBody
+     * @throws IOException
+     */
+    public void setRequestBody(XmlSerializable requestBody) throws IOException {
+        try {
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            Document doc = BUILDER_FACTORY.newDocumentBuilder().newDocument();
+            doc.appendChild(requestBody.toXml(doc));
+
+            OutputFormat format = new OutputFormat("xml", "UTF-8", true);
+            XMLSerializer serializer = new XMLSerializer(out, format);
+            serializer.setNamespaces(true);
+            serializer.asDOMSerializer().serialize(doc);
+            setRequestBody(out.toString());
+        } catch (ParserConfigurationException e) {
+            throw new IOException(e.getMessage());
+        }
+    }
+
+    /**
+     * Return the response body as <code>MultiStatus</code> object.
+     *
+     * @return
+     * @throws IOException if the response body could not be parsed
+     * @throws DavException if the status code is other than MultiStatus
+     */
+    public MultiStatus getResponseBodyAsMultiStatus() throws IOException, DavException {
+	checkUsed();
+        if (getStatusCode() == DavServletResponse.SC_MULTI_STATUS) {
+            return MultiStatus.createFromXml(getRootElement());
+        } else {
+            throw new DavException(getStatusCode(), getName() + " resulted with unexpected status code: " + getStatusCode());
+        }
+    }
+
+    /**
+     * Parse the response body into an Xml <code>Document</code>.
+     *
+     * @return Xml document or <code>null</code> if the response stream is
+     * <code>null</code>.
+     * @throws IOException if the parsing fails.
+     */
+    public Document getResponseBodyAsDocument() throws IOException {
+        InputStream in = getResponseBodyAsStream();
+        if (in == null) {
+	    return null;
+	}
+	    try {
+            DocumentBuilder docBuilder = BUILDER_FACTORY.newDocumentBuilder();
+            Document document = docBuilder.parse(in);
+            return document;
+        } catch (ParserConfigurationException e) {
+            throw new IOException(e.getMessage());
+        } catch (SAXException e) {
+            throw new IOException(e.getMessage());
+	    }
+	}
+
+    /**
+     * 
+     * @return
+     * @throws IOException
+     */
+    Element getRootElement() throws IOException {
+        Document document = getResponseBodyAsDocument();
+        if (document != null) {
+            return document.getDocumentElement();
+    }
+        return null;
-	checkUsed();
+        checkUsed();
-	    return null;
-	}
-	InputStream in = this.getResponseBodyAsStream();
-	if (in != null) {
-	    try {
-		SAXBuilder builder = new SAXBuilder(false);
-		Document responseDocument = builder.build(in);
-		return new DavException(getStatusCode(), getStatusText(), responseDocument.getRootElement());
-	    } catch (JDOMException e) {
-		log.error(e.getMessage());
-	    }
-	}
-	// no or unparsable response body
-	return new DavException(getStatusCode(), getStatusText());
-    }
-
-    public void parseResponse(ContentHandler contentHandler) throws IOException, DavException {
-        // todo
-    }
-
-    public MultiStatus getResponseBodyAsMultiStatus() throws IOException, DavException {
-        checkUsed();
-        if (getStatusCode() == DavServletResponse.SC_MULTI_STATUS) {
-            try {
-                return MultiStatus.createFromXml(getReponseBodyAsDocument());
-            } catch (JDOMException e) {
-                log.error(e.getMessage());
-        } else {
-            throw new DavException(getStatusCode(), getName() + " resulted with unexpected status code: " + getStatusCode());
-        }
-    }
-    public void parseMultiStatus(ContentHandler contentHandler) throws IOException, DavException {
-        checkUsed();
-        if (getStatusCode() == DavServletResponse.SC_MULTI_STATUS) {
-            /// todo...
-        } else {
-            throw new DavException(getStatusCode(), getName() + " resulted with unexpected status code: " + getStatusCode());
-        }
+        // todo: build exception from response body if present.
+
+	// fallback: no or unparsable response body
+	return new DavException(getStatusCode(), getStatusText());

INS26 INS26 INS26 INS26 INS26 MOV31 INS40 UPD40 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS23 INS28 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 MOV43 INS8 INS29 INS29 MOV83 MOV43 UPD42 MOV42 MOV43 INS8 INS29 INS43 INS42 MOV43 INS8 INS8 INS42 INS42 INS32 INS21 INS65 INS43 INS42 INS21 INS65 INS65 INS43 UPD42 INS54 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS60 INS25 INS54 INS65 INS65 INS42 INS60 INS25 MOV41 MOV21 MOV25 MOV41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS8 INS12 INS66 INS42 INS66 INS42 INS66 INS8 INS66 INS66 INS66 INS42 INS66 MOV43 INS59 INS27 INS8 INS8 INS12 INS12 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS9 INS42 INS32 INS32 INS60 INS60 INS21 INS60 INS60 INS21 INS21 MOV21 INS44 INS8 MOV41 INS42 MOV32 INS42 INS33 INS41 MOV60 INS60 INS41 INS44 INS8 INS44 INS8 UPD42 MOV42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS42 UPD43 MOV43 INS59 MOV43 INS59 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS42 INS53 INS33 UPD43 MOV43 INS59 INS42 UPD43 MOV43 UPD42 MOV42 INS53 UPD43 MOV43 UPD42 MOV42 INS53 UPD42 MOV42 INS32 UPD42 INS42 INS14 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS9 INS32 INS42 INS42 INS32 INS42 INS14 UPD42 UPD42 INS32 INS42 INS32 UPD42 INS14 UPD42 INS14 INS42 UPD42 MOV42 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS45 INS45 INS9 UPD43 MOV43 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS43 MOV32 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 MOV32 INS43 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL43 DEL8 DEL31 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL14 DEL42 DEL52 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL9 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL44 DEL43 DEL32 DEL21 DEL42 DEL32 DEL40 DEL27 DEL8 DEL43 DEL42 DEL32 DEL32 DEL45 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31