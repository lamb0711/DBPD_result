JCR-2509 : Reduce number of compiler warning by adding @Override and generics where appropriate [step 3: jackrabbit-spi2dav]

in addition:
- minor improvements in comments, typos
- use foreach loops where possible
- remove redundant casts
- remove unused field in NodeInfoImp
- remove unused method in ReadTest
- add WeakReference test to BatchTest

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915358 13f79535-47bb-0310-9956-ffa450edef68

-    private Set dependencies;
+    private Set<Name> dependencies;
-            List qNames = new ArrayList();
+            List<Name> qNames = new ArrayList<Name>();
-            supertypes = (Name[]) qNames.toArray(new Name[qNames.size()]);
+            supertypes = qNames.toArray(new Name[qNames.size()]);
-            mixin = Boolean.valueOf(ntdElement.getAttribute(ISMIXIN_ATTRIBUTE)).booleanValue();
+            mixin = Boolean.valueOf(ntdElement.getAttribute(ISMIXIN_ATTRIBUTE));
-            orderableChildNodes = Boolean.valueOf(ntdElement.getAttribute(HASORDERABLECHILDNODES_ATTRIBUTE)).booleanValue();
+            orderableChildNodes = Boolean.valueOf(ntdElement.getAttribute(HASORDERABLECHILDNODES_ATTRIBUTE));
-            isAbstract = Boolean.valueOf(ntdElement.getAttribute(ISABSTRACT_ATTRIBUTE)).booleanValue();
+            isAbstract = Boolean.valueOf(ntdElement.getAttribute(ISABSTRACT_ATTRIBUTE));
-            isQueryable = Boolean.valueOf(ntdElement.getAttribute(ISQUERYABLE_ATTRIBUTE)).booleanValue();
+            isQueryable = Boolean.valueOf(ntdElement.getAttribute(ISQUERYABLE_ATTRIBUTE));
-        List itemDefs = new ArrayList();
+        List<QNodeDefinition> nds = new ArrayList<QNodeDefinition>();
-            itemDefs.add(new QNodeDefinitionImpl(name, it.nextElement(), resolver));
+            nds.add(new QNodeDefinitionImpl(name, it.nextElement(), resolver));
-        nodeDefs = (QNodeDefinition[]) itemDefs.toArray(new QNodeDefinition[itemDefs.size()]);
+        nodeDefs = nds.toArray(new QNodeDefinition[nds.size()]);
-        itemDefs = new ArrayList();
+        List<QPropertyDefinition> pds = new ArrayList<QPropertyDefinition>();
-            itemDefs.add(new QPropertyDefinitionImpl(name, it.nextElement(), resolver, qValueFactory));
+            pds.add(new QPropertyDefinitionImpl(name, it.nextElement(), resolver, qValueFactory));
-        propDefs = (QPropertyDefinition[]) itemDefs.toArray(new QPropertyDefinition[itemDefs.size()]);
+        propDefs = pds.toArray(new QPropertyDefinition[pds.size()]);
-    public Collection getDependencies() {
+    public Collection<Name> getDependencies() {
-            dependencies = new HashSet();
+            dependencies = new HashSet<Name>();
-            for (int i = 0; i < supertypes.length; i++) {
-                dependencies.add(supertypes[i]);
+            for (Name supertype : supertypes) {
+                dependencies.add(supertype);
-            for (int i = 0; i < nodeDefs.length; i++) {
+            for (QNodeDefinition nodeDef : nodeDefs) {
-                Name ntName = nodeDefs[i].getDefaultPrimaryType();
+                Name ntName = nodeDef.getDefaultPrimaryType();
-                Name[] ntNames = nodeDefs[i].getRequiredPrimaryTypes();
-                for (int j = 0; j < ntNames.length; j++) {
-                    if (ntNames[j] != null && !name.equals(ntNames[j])) {
-                        dependencies.add(ntNames[j]);
+                for (Name rpt : nodeDef.getRequiredPrimaryTypes()) {
+                    if (rpt != null && !name.equals(rpt)) {
+                        dependencies.add(rpt);
-            for (int i = 0; i < propDefs.length; i++) {
+            for (QPropertyDefinition propDef : propDefs) {
-                if (propDefs[i].getRequiredType() == PropertyType.REFERENCE
-                        || propDefs[i].getRequiredType() == PropertyType.WEAKREFERENCE) {
-                    QValueConstraint[] ca = propDefs[i].getValueConstraints();
+                if (propDef.getRequiredType() == PropertyType.REFERENCE
+                        || propDef.getRequiredType() == PropertyType.WEAKREFERENCE) {
+                    QValueConstraint[] ca = propDef.getValueConstraints();
-                        for (int j = 0; j < ca.length; j++) {
+                        for (QValueConstraint vc : ca) {
-                            Name ntName = NameFactoryImpl.getInstance().create(ca[j].getString());
+                            Name ntName = NameFactoryImpl.getInstance().create(vc.getString());
+    @Override
+    @Override

INS74 INS74 INS78 INS78 MOV43 INS43 MOV43 INS43 INS42 INS42 INS42 INS42 INS60 INS70 INS70 INS70 INS74 INS74 INS59 INS44 INS42 INS8 INS44 INS42 INS8 INS44 INS42 MOV8 MOV43 INS43 UPD42 MOV32 INS43 INS43 INS42 MOV14 MOV32 MOV43 INS42 MOV21 INS43 INS42 MOV60 MOV25 INS70 INS43 INS42 INS74 INS42 INS74 UPD42 INS42 INS42 INS74 UPD42 INS74 INS42 INS44 INS32 INS8 INS42 MOV43 INS43 MOV32 MOV32 MOV32 MOV32 MOV32 MOV43 INS43 UPD42 MOV43 INS43 UPD42 MOV43 INS43 INS42 MOV43 INS42 INS42 MOV42 MOV25 INS42 INS74 INS42 UPD42 INS42 UPD42 INS42 INS42 MOV43 INS43 INS42 INS42 INS70 INS42 INS42 INS42 INS44 INS42 MOV8 INS42 INS42 INS43 INS42 INS42 INS42 DEL85 DEL5 DEL11 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL11 DEL42 DEL7 DEL21 DEL42 DEL43 DEL85 DEL5 DEL11 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24