JCR-1588 - JSR 283: Access Control (work in progress)
JCR-1590 - JSR 283: Locking
JCR-1915 - Node.setPrimaryNodeType should only redefine child-definitions that are not covered by the new effective nt
JCR-1875 - Failing Node.unlock() might leave inconsistent transient state
JCR-538 - Failing Node.checkin() or Node.checkout() might leave inconsistent transient state

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@732693 13f79535-47bb-0310-9956-ffa450edef68

+        return lock(node, isDeep, isSessionScoped, Long.MAX_VALUE, null);
+    }
+
+    /**
+     * Lock some node.
+     * @param node node to lock
+     * @param isDeep <code>true</code> to deep lock this node;
+     *               <code>false</code> otherwise
+     * @param isSessionScoped <code>true</code> if lock should be session scoped;
+     *                        <code>false</code> otherwise
+     * @param timeoutHint
+     * @param ownerInfo
+     * @throws LockException if node is already locked
+     * @throws RepositoryException if an error occurs
+     */
+    public AbstractLockInfo lock(NodeImpl node, boolean isDeep, boolean isSessionScoped, long timeoutHint, String ownerInfo)
+            throws LockException, RepositoryException {
-        info = new LockInfo(node, new LockToken(id),
-                isSessionScoped, isDeep, node.getSession().getUserID());
+        String lockOwner = (ownerInfo != null) ? ownerInfo : node.getSession().getUserID();
+        info = new LockInfo(node, new LockToken(id), isSessionScoped, isDeep, lockOwner);
+
-            super(lockToken, sessionScoped, deep, lockOwner);
+            this(node, lockToken, sessionScoped, deep, lockOwner, Long.MAX_VALUE);
+        }
+        /**
+         * Create a new instance of this class.
+         * @param lockToken     lock token
+         * @param sessionScoped whether lock token is session scoped
+         * @param deep          whether lock is deep
+         * @param lockOwner     owner of lock
+         */
+        public LockInfo(NodeImpl node, LockToken lockToken,
+                        boolean sessionScoped, boolean deep, String lockOwner,
+                        long timeoutHint) {
+
+            super(lockToken, sessionScoped, deep, lockOwner, timeoutHint);
-            super(info.lockToken, info.sessionScoped, info.deep, info.lockOwner);
+            super(info.lockToken, info.sessionScoped, info.deep, info.lockOwner, info.getSecondsRemaining());
-                lockMgr.internalLock(node, deep, sessionScoped);
+                lockMgr.internalLock(node, deep, sessionScoped, getSecondsRemaining(), lockOwner);
-                lockMgr.internalLock(node, deep, sessionScoped);
+                lockMgr.internalLock(node, deep, sessionScoped, getSecondsRemaining(), lockOwner);

INS31 MOV29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS44 INS44 INS31 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS60 INS8 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 MOV8 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS66 INS42 INS66 INS42 INS43 INS59 INS17 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS40 INS33 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS40 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS32 INS36 INS42 MOV32 INS42 INS42 INS42 INS27 INS42 INS33 INS32 INS42 INS32 INS42 INS42 INS42