JCR-2933: SQL2 Left Outer Join

Patch by Alex Parvulescu

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1092683 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-import java.util.HashSet;
+import org.apache.commons.io.IOUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+    
+    /**
+     * The logger instance for this class
+     */
+    private static final Logger log = LoggerFactory.getLogger(QueryEngine.class);
+
+    private static final int printIndentStep = 4;
-    private class RowComparator implements Comparator<Row> {
+    private static class RowComparator implements Comparator<Row> {
+        
+        private final OperandEvaluator evaluator;
-        private RowComparator(Ordering[] orderings) {
+        private RowComparator(Ordering[] orderings, OperandEvaluator evaluator) {
+            this.evaluator = evaluator;
-    public QueryEngine(
-            Session session, LuceneQueryFactory lqf,
+    public QueryEngine(Session session, LuceneQueryFactory lqf,
-    public QueryResult execute(
-            Column[] columns, Source source, Constraint constraint,
-            Ordering[] orderings, long offset, long limit)
+    public QueryResult execute(Column[] columns, Source source,
+            Constraint constraint, Ordering[] orderings, long offset, long limit)
-        if (source instanceof Selector) {
-            Selector selector = (Selector) source;
-            return execute(
-                    columns, selector, constraint, orderings, offset, limit);
-        } else if (source instanceof Join) {
-            Join join = (Join) source;
-            if (join.getJoinType() == JCR_JOIN_TYPE_RIGHT_OUTER) {
-                // Swap the join sources to normalize all outer joins to left
-                join = qomFactory.join(
-                        join.getRight(), join.getLeft(),
-                        JCR_JOIN_TYPE_LEFT_OUTER, join.getJoinCondition());
-            }
-            return execute(
-                    columns, join, constraint, orderings, offset, limit);
-        } else {
-            throw new UnsupportedRepositoryOperationException(
-                    "Unknown source type: " + source);
+        long time = System.currentTimeMillis();
+        QueryResult qr = execute(columns, source, constraint, orderings,
+                offset, limit, 2);
+        if (log.isDebugEnabled()) {
+            time = System.currentTimeMillis() - time;
+            log.debug("SQL2 QUERY execute took " + time + " ms.");
+        return qr;
-    protected QueryResult execute(
-            Column[] columns, Join join, Constraint constraint,
-            Ordering[] orderings, long offset, long limit)
-            throws RepositoryException {
-        JoinMerger merger = JoinMerger.getJoinMerger(
-                join, getColumnMap(columns, getSelectorNames(join)),
-                evaluator, qomFactory);
-        ConstraintSplitter splitter = new ConstraintSplitter(
-                constraint, qomFactory,
-                merger.getLeftSelectors(), merger.getRightSelectors());
-
-        Source left = join.getLeft();
-        Set<Row> leftRows = buildLeftRowsJoin(left, splitter.getConstraintSplitInfo());
-
-        Source right = join.getRight();
-        List<Constraint> rightConstraints = merger.getRightJoinConstraints(leftRows);
-        RowIterator rightRows = new RowIteratorAdapter(buildRightRowsJoin(right, splitter.getConstraintSplitInfo(), rightConstraints));
-
-        QueryResult result = merger.merge(new RowIteratorAdapter(leftRows), rightRows);
-        return sort(result, orderings, offset, limit);
+    protected QueryResult execute(Column[] columns, Source source,
+            Constraint constraint, Ordering[] orderings, long offset,
+            long limit, int printIndentation) throws RepositoryException {
+        if (source instanceof Selector) {
+            return execute(columns, (Selector) source, constraint, orderings,
+                    offset, limit, printIndentation);
+        }
+        if (source instanceof Join) {
+            return execute(columns, (Join) source, constraint, orderings,
+                    offset, limit, printIndentation);
+        }
+        throw new UnsupportedRepositoryOperationException(
+                "Unknown source type: " + source);
-    private Comparator<Row> buildSimplePathRowComparator() {
-        return new Comparator<Row>() {
-
-            public int compare(Row o1, Row o2) {
-                try {
-                    return o1.getPath().compareTo(o2.getPath());
-                } catch (RepositoryException e) {
-                    throw new RuntimeException("Unable to compare rows " + o1
-                            + " and " + o2, e);
-                }
+    protected QueryResult execute(Column[] columns, Join join,
+            Constraint constraint, Ordering[] orderings, long offset,
+            long limit, int printIndentation) throws RepositoryException {
+        // Swap the join sources to normalize all outer joins to left
+        if (JCR_JOIN_TYPE_RIGHT_OUTER.equalsIgnoreCase(join.getJoinType())) {
+            if (log.isDebugEnabled()) {
+                log.debug(genString(printIndentation)
+                        + "SQL2 RIGHT OUTER JOIN transformed to LEFT OUTER JOIN.");
-        };
+            Join betterJoin = qomFactory.join(join.getRight(), join.getLeft(),
+                    JCR_JOIN_TYPE_LEFT_OUTER, join.getJoinCondition());
+            return execute(columns, betterJoin, constraint, orderings, offset,
+                    limit, printIndentation);
+        }
+        JoinMerger merger = JoinMerger.getJoinMerger(join,
+                getColumnMap(columns, getSelectorNames(join)), evaluator,
+                qomFactory);
+        ConstraintSplitter splitter = new ConstraintSplitter(constraint,
+                qomFactory, merger.getLeftSelectors(),
+                merger.getRightSelectors(), join);
+        ConstraintSplitInfo csInfo = splitter.getConstraintSplitInfo();
+
+        logQueryAnalysis(csInfo, printIndentation);
+
+        long timeJoinLeftSide = System.currentTimeMillis();
+        Comparator<Row> leftCo = new RowPathComparator(
+                merger.getLeftSelectors());
+        Set<Row> leftRows = buildLeftRowsJoin(csInfo, leftCo, printIndentation
+                + printIndentStep);
+        if (log.isDebugEnabled()) {
+            timeJoinLeftSide = System.currentTimeMillis() - timeJoinLeftSide;
+            log.debug(genString(printIndentation) + "SQL2 JOIN LEFT SIDE took "
+                    + timeJoinLeftSide + " ms. fetched " + leftRows.size()
+                    + " rows.");
+        }
+
+        // The join constraint information is split into:
+        // - rightConstraints selects just the 'ON' constraints
+        // - csInfo has the 'WHERE' constraints
+        //
+        // So, in the case of an OUTER JOIN we'll run 2 queries, one with 'ON'
+        // and one with 'ON' + 'WHERE' conditions
+        // this way, at merge time in case of an outer join we can tell if
+        // it's a 'null' row, or a bad row -> one that must not be returned.
+        // This way at the end we'll have:
+        // - rightRowsSet containing the 'ON' dataset
+        // - excludingOuterJoinRowsSet: the 'ON' + 'WHERE' condition dataset, or
+        // NULL if there is no 'WHERE' condition
+
+        long timeJoinRightSide = System.currentTimeMillis();
+        List<Constraint> rightConstraints = merger
+                .getRightJoinConstraints(leftRows);
+        Comparator<Row> rightCo = new RowPathComparator(
+                merger.getRightSelectors());
+
+        boolean isOuterJoin = JCR_JOIN_TYPE_LEFT_OUTER.equalsIgnoreCase(join
+                .getJoinType());
+
+        Set<Row> rightRows = buildRightRowsJoin(csInfo, rightConstraints, isOuterJoin,
+                rightCo, printIndentation + printIndentStep);
+
+        // this has to be initialized as null
+        Set<Row> excludingOuterJoinRowsSet = null;
+        if (isOuterJoin && csInfo.getRightConstraint() != null) {
+            excludingOuterJoinRowsSet = buildRightRowsJoin(csInfo,
+                    rightConstraints, false, rightCo, printIndentation
+                            + printIndentStep);
+        }
+
+        if (log.isDebugEnabled()) {
+            timeJoinRightSide = System.currentTimeMillis() - timeJoinRightSide;
+            log.debug(genString(printIndentation)
+                    + "SQL2 JOIN RIGHT SIDE took " + timeJoinRightSide
+                    + " ms. fetched" + rightRows.size() + " rows.");
+        }
+
+        long timeMergeAndSort = System.currentTimeMillis();
+
+        // merge left with right datasets
+        QueryResult result = merger.merge(new RowIteratorAdapter(leftRows),
+                new RowIteratorAdapter(rightRows), excludingOuterJoinRowsSet,
+                rightCo);
+        QueryResult sortedResult = sort(result, orderings, evaluator, offset,
+                limit);
+        if (log.isDebugEnabled()) {
+            timeMergeAndSort = System.currentTimeMillis() - timeMergeAndSort;
+            log.debug(genString(printIndentation)
+                    + "SQL2 JOIN MERGE and SORT took " + timeMergeAndSort
+                    + " ms.");
+        }
+        return sortedResult;
-    private Set<Row> buildLeftRowsJoin(Source left, ConstraintSplitInfo csi)
+    private Set<Row> buildLeftRowsJoin(ConstraintSplitInfo csi,
+            Comparator<Row> comparator, int printIndentation)
-            // this *needs* to merge automatically multiple sets of nodes
-            Set<Row> leftRows = new TreeSet<Row>(buildSimplePathRowComparator());
-            for (ConstraintSplitInfo child : csi.getInnerConstraints()) {
-                leftRows.addAll(buildLeftRowsJoin(left, child));
+            if (log.isDebugEnabled()) {
+                log.debug(genString(printIndentation)
+                        + "SQL2 JOIN LEFT SIDE there are multiple inner splits.");
+            Set<Row> leftRows = new TreeSet<Row>(comparator);
+            leftRows.addAll(buildLeftRowsJoin(csi.getLeftInnerConstraints(),
+                    comparator, printIndentation + printIndentStep));
+            leftRows.addAll(buildLeftRowsJoin(csi.getRightInnerConstraints(),
+                    comparator, printIndentation + printIndentStep));
-
-        Set<Row> leftRows = new HashSet<Row>();
-        Constraint leftConstraint = csi.getLeftConstraint();
-        QueryResult leftResult = execute(null, left, leftConstraint, null, 0,
-                -1);
+        Set<Row> leftRows = new TreeSet<Row>(comparator);
+        QueryResult leftResult = execute(null, csi.getSource().getLeft(),
+                csi.getLeftConstraint(), null, 0, -1, printIndentation);
-    private Set<Row> buildRightRowsJoin(Source right, ConstraintSplitInfo csi,
-            List<Constraint> rightConstraints) throws RepositoryException {
+    /**
+     * @param csi
+     *            contains 'WHERE' constraints and the source information
+     * @param rightConstraints
+     *            contains 'ON' constraints
+     * @param ignoreWhereConstraints
+     * @param comparator
+     *            used to merge similar rows together
+     * @param printIndentation
+     *            used in logging
+     * @return the right-side dataset of the join operation
+     * @throws RepositoryException
+     */
+    private Set<Row> buildRightRowsJoin(ConstraintSplitInfo csi,
+            List<Constraint> rightConstraints, boolean ignoreWhereConstraints,
+            Comparator<Row> comparator, int printIndentation)
+            throws RepositoryException {
-            // this *needs* to merge automatically multiple sets of nodes
-            Set<Row> rightRows = new TreeSet<Row>(
-                    buildSimplePathRowComparator());
-            for (ConstraintSplitInfo child : csi.getInnerConstraints()) {
-                rightRows.addAll(buildRightRowsJoin(right, child,
-                        rightConstraints));
+            if (log.isDebugEnabled()) {
+                log.debug(genString(printIndentation)
+                        + "SQL2 JOIN RIGHT SIDE there are multiple inner splits.");
+            Set<Row> rightRows = new TreeSet<Row>(comparator);
+            rightRows.addAll(buildRightRowsJoin(csi.getLeftInnerConstraints(),
+                    rightConstraints, ignoreWhereConstraints, comparator,
+                    printIndentation + printIndentStep));
+            rightRows.addAll(buildRightRowsJoin(csi.getRightInnerConstraints(),
+                    rightConstraints, ignoreWhereConstraints, comparator,
+                    printIndentation + printIndentStep));
-        // TODO refactor to page automatically at 500 *if needed*
-            Set<Row> rightRows = new HashSet<Row>();
+            Set<Row> rightRows = new TreeSet<Row>(comparator);
+            List<Constraint> localRightContraints = rightConstraints;
-                    Constraints.or(qomFactory, rightConstraints),
+                    Constraints.or(qomFactory, localRightContraints),
-            QueryResult rightResult = execute(null, right, rightConstraint,
-                    null, 0, -1);
+            if (ignoreWhereConstraints) {
+                rightConstraint = Constraints.or(qomFactory,
+                        localRightContraints);
+            }
+            QueryResult rightResult = execute(null, csi.getSource().getRight(),
+                    rightConstraint, null, 0, -1, printIndentation);
-        Set<Row> rightRows = new HashSet<Row>();
+        // the 'batch by 500' approach
+        Set<Row> rightRows = new TreeSet<Row>(comparator);
-            Constraint rightConstraint = Constraints
-                    .and(qomFactory,
-                            Constraints.or(
-                                    qomFactory,
-                                    rightConstraints.subList(
-                                            i,
-                                            Math.min(i + 500,
-                                                    rightConstraints.size()))),
-                            csi.getRightConstraint());
-            QueryResult rightResult = execute(null, right, rightConstraint,
-                    null, 0, -1);
+            if (log.isDebugEnabled()) {
+                log.debug(genString(printIndentation)
+                        + "SQL2 JOIN RIGHT SIDE executing batch # " + i + ".");
+            }
+            List<Constraint> localRightContraints = rightConstraints.subList(i,
+                    Math.min(i + 500, rightConstraints.size()));
+            Constraint rightConstraint = Constraints.and(qomFactory,
+                    Constraints.or(qomFactory, localRightContraints),
+                    csi.getRightConstraint());
+            if (ignoreWhereConstraints) {
+                rightConstraint = Constraints.or(qomFactory,
+                        localRightContraints);
+            }
+
+            QueryResult rightResult = execute(null, csi.getSource().getRight(),
+                    rightConstraint, null, 0, -1, printIndentation);
-    protected QueryResult execute(
-            Column[] columns, Selector selector, Constraint constraint,
-            Ordering[] orderings, long offset, long limit)
-            throws RepositoryException {
-        Map<String, NodeType> selectorMap = getSelectorNames(selector);
-        String[] selectorNames =
-            selectorMap.keySet().toArray(new String[selectorMap.size()]);
+    private static String genString(int len) {
+        StringBuilder sb = new StringBuilder();
+        for (int i = 0; i < len; i++) {
+            sb.append(" ");
+        }
+        return sb.toString();
+    }
-        Map<String, PropertyValue> columnMap =
-            getColumnMap(columns, selectorMap);
-        String[] columnNames =
-            columnMap.keySet().toArray(new String[columnMap.size()]);
+    private static void logQueryAnalysis(ConstraintSplitInfo csi,
+            int printIndentation) throws RepositoryException {
+        if (!log.isDebugEnabled()) {
+            return;
+        }
+        StringBuilder sb = new StringBuilder();
+        sb.append(genString(printIndentation));
+        sb.append("SQL2 JOIN analysis:");
+        sb.append(IOUtils.LINE_SEPARATOR);
+        sb.append(constraintSplitInfoToString(csi, 2));
+        log.debug(sb.toString());
+    }
+
+    private static String constraintSplitInfoToString(ConstraintSplitInfo csi,
+            int printIndentation) throws RepositoryException {
+
+        if (csi.isMultiple()) {
+            StringBuilder sb = new StringBuilder();
+            sb.append(genString(printIndentation));
+            sb.append("SQL2 JOIN inner split -> ");
+            sb.append(IOUtils.LINE_SEPARATOR);
+            sb.append(genString(printIndentation));
+            sb.append("+");
+            sb.append(IOUtils.LINE_SEPARATOR);
+            sb.append(constraintSplitInfoToString(
+                    csi.getLeftInnerConstraints(), printIndentation
+                            + printIndentStep));
+            sb.append(IOUtils.LINE_SEPARATOR);
+            sb.append(genString(printIndentation));
+            sb.append("+");
+            sb.append(IOUtils.LINE_SEPARATOR);
+            sb.append(constraintSplitInfoToString(
+                    csi.getRightInnerConstraints(), printIndentation
+                            + printIndentStep));
+            return sb.toString();
+        }
+
+        StringBuilder sb = new StringBuilder();
+        sb.append(genString(printIndentation));
+        sb.append("SQL2 JOIN source: ");
+        sb.append(csi.getSource());
+        sb.append(IOUtils.LINE_SEPARATOR);
+        sb.append(genString(printIndentation));
+        sb.append("SQL2 JOIN left constraint: ");
+        sb.append(csi.getLeftConstraint());
+        sb.append(IOUtils.LINE_SEPARATOR);
+        sb.append(genString(printIndentation));
+        sb.append("SQL2 JOIN right constraint: ");
+        sb.append(csi.getRightConstraint());
+        return sb.toString();
+    }
+
+    protected QueryResult execute(Column[] columns, Selector selector,
+            Constraint constraint, Ordering[] orderings, long offset,
+            long limit, int printIndentation) throws RepositoryException {
+        long time = System.currentTimeMillis();
+
+        Map<String, NodeType> selectorMap = getSelectorNames(selector);
+        String[] selectorNames = selectorMap.keySet().toArray(
+                new String[selectorMap.size()]);
+
+        Map<String, PropertyValue> columnMap = getColumnMap(columns,
+                selectorMap);
+        String[] columnNames = columnMap.keySet().toArray(
+                new String[columnMap.size()]);
-            RowIterator rows = new RowIteratorAdapter(lqf.execute(
-                    columnMap, selector, constraint));
-            QueryResult result =
-                new SimpleQueryResult(columnNames, selectorNames, rows);
-            return sort(result, orderings, offset, limit);
+            RowIterator rows = new RowIteratorAdapter(lqf.execute(columnMap,
+                    selector, constraint));
+            QueryResult result = new SimpleQueryResult(columnNames,
+                    selectorNames, rows);
+            return sort(result, orderings, evaluator, offset, limit);
-            throw new RepositoryException(
-                    "Failed to access the query index", e);
+            throw new RepositoryException("Failed to access the query index", e);
+        } finally {
+            if (log.isDebugEnabled()) {
+                time = System.currentTimeMillis() - time;
+                log.debug(genString(printIndentation) + "SQL2 SELECT took "
+                        + time + " ms. selector: " + selector
+                        + ", columns: " + Arrays.toString(columnNames)
+                        + ", constraint: " + constraint);
+            }
-    public QueryResult sort(
-            QueryResult result, final Ordering[] orderings,
+    protected static QueryResult sort(QueryResult result,
+            final Ordering[] orderings, OperandEvaluator evaluator,
-                Collections.sort(rows, new RowComparator(orderings));
+                Collections.sort(rows, new RowComparator(orderings, evaluator));

MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 MOV44 MOV44 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS23 INS83 INS43 MOV42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 UPD83 INS44 INS83 MOV43 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 INS44 MOV43 INS8 INS44 INS29 INS44 INS44 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS44 INS83 UPD83 INS44 INS65 INS42 INS42 INS32 INS42 INS34 INS83 INS83 INS43 INS59 INS44 INS42 INS5 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS60 INS25 INS41 INS39 INS42 INS25 INS25 MOV53 INS39 INS42 INS25 MOV60 MOV60 INS60 INS21 INS60 INS60 MOV60 INS25 INS60 MOV60 INS60 INS60 INS60 MOV60 INS25 INS25 INS60 MOV60 INS60 INS25 INS41 INS74 INS42 INS39 INS42 INS25 MOV60 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS74 INS42 INS39 INS42 INS42 INS39 INS42 INS60 INS24 INS41 INS43 INS42 INS39 INS42 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS39 INS42 INS60 INS43 INS42 INS66 INS42 INS42 INS57 INS42 INS42 INS43 INS42 INS21 INS43 INS85 MOV42 INS42 INS43 INS85 INS39 INS59 MOV43 INS59 INS32 INS8 INS42 MOV62 MOV8 MOV62 MOV8 INS32 INS8 MOV43 MOV43 INS59 INS32 INS39 INS59 MOV74 MOV59 MOV74 INS32 INS8 INS39 MOV59 MOV74 INS59 INS39 INS59 MOV74 MOV59 INS27 INS8 INS32 INS8 INS39 INS59 MOV43 INS59 INS32 INS8 INS42 INS43 INS43 MOV32 INS8 MOV43 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS43 MOV32 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS42 INS38 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS42 INS32 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS39 INS59 INS8 INS42 INS43 INS42 INS7 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS42 MOV32 INS25 INS60 INS41 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 UPD42 INS14 INS42 INS42 INS21 INS21 UPD42 INS42 INS14 INS42 INS32 INS32 INS42 INS33 INS42 INS27 INS21 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS21 UPD42 MOV42 INS42 INS25 MOV60 MOV21 INS21 MOV41 UPD42 MOV42 INS42 INS25 INS60 INS21 MOV21 MOV41 INS60 INS60 INS25 MOV41 INS25 INS60 INS25 INS42 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS25 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS32 INS32 INS8 MOV43 INS59 INS32 MOV43 INS42 INS42 INS42 INS43 INS32 INS42 UPD42 INS27 INS7 INS32 UPD42 UPD42 INS43 INS32 INS42 INS42 INS32 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS27 INS32 INS33 INS7 INS7 INS32 INS42 INS42 INS14 INS42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 INS7 INS32 INS32 INS8 INS74 INS32 INS42 INS32 MOV32 MOV38 INS42 INS32 INS8 MOV74 INS59 INS32 INS74 INS59 INS74 INS59 MOV43 INS42 INS8 INS43 UPD74 INS42 INS32 INS8 INS74 MOV43 INS59 INS42 INS8 INS43 INS43 INS42 INS34 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS52 INS42 INS42 INS27 INS42 INS42 INS27 MOV11 INS42 MOV11 INS42 INS42 INS42 INS21 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS27 MOV43 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS21 INS43 INS43 UPD42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS21 INS42 INS14 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 MOV43 INS42 INS42 INS21 INS42 UPD43 INS42 INS42 INS21 INS43 INS43 UPD42 MOV32 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS32 INS42 INS45 INS42 INS45 INS32 INS32 INS42 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS9 INS42 INS27 INS32 INS42 INS32 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS32 UPD45 MOV45 UPD42 MOV42 UPD45 MOV45 INS32 INS42 INS42 INS42 INS32 UPD42 INS27 INS42 INS32 INS42 INS27 UPD42 MOV42 INS42 INS32 INS74 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS27 INS42 INS42 INS74 INS42 INS42 MOV32 INS7 INS32 INS42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 MOV32 INS7 INS32 MOV38 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS42 INS32 INS27 INS7 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS27 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS43 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS43 UPD42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS45 INS32 INS45 INS32 INS45 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL59 DEL60 DEL42 DEL27 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL8 DEL25 DEL25 DEL32 DEL42 DEL42 DEL32 DEL32 DEL14 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL42 DEL83 DEL43 DEL60 DEL42 DEL43 DEL60 DEL43 DEL60 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL44 DEL42 DEL43 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL44 DEL32 DEL8 DEL70 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL59 DEL60 DEL43 DEL42 DEL43 DEL42 DEL44 DEL32 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32