- Redesign jackrabbit query handler to allow for better reuse / extension of existing classes.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@158471 13f79535-47bb-0310-9956-ffa450edef68

-class NodeIndexer {
+public class NodeIndexer {
-    private final NodeState node;
+    protected final NodeState node;
-    private final ItemStateManager stateProvider;
+    protected final ItemStateManager stateProvider;
-    private final NamespaceMappings mappings;
+    protected final NamespaceMappings mappings;
-    private NodeIndexer(NodeState node,
+    protected NodeIndexer(NodeState node,
-    private Document createDoc() throws RepositoryException {
+    protected Document createDoc() throws RepositoryException {
-                // don't know how to index -> ignore
+                addBinaryValue(doc, fieldName, internalValue);
-                doc.add(new Field(fieldName,
-                        internalValue.toString(),
-                        false,
-                        true,
-                        false));
+                addBooleanValue(doc, fieldName, internalValue);
-                long millis = ((Calendar) internalValue).getTimeInMillis();
-                doc.add(new Field(fieldName,
-                        DateField.timeToString(millis),
-                        false,
-                        true,
-                        false));
+                addCalendarValue(doc, fieldName, internalValue);
-                double doubleVal = ((Double) internalValue).doubleValue();
-                doc.add(new Field(fieldName,
-                        DoubleField.doubleToString(doubleVal),
-                        false,
-                        true,
-                        false));
+                addDoubleValue(doc, fieldName, internalValue);
-                long longVal = ((Long) internalValue).longValue();
-                doc.add(new Field(fieldName,
-                        LongField.longToString(longVal),
-                        false,
-                        true,
-                        false));
+                addLongValue(doc, fieldName, internalValue);
-                String uuid = internalValue.toString();
-                doc.add(new Field(fieldName,
-                        uuid,
-                        true, // store
-                        true,
-                        false));
+                addReferenceValue(doc, fieldName, internalValue);
-                Path path = (Path) internalValue;
-                String pathString = path.toString();
-                try {
-                    pathString = path.toJCRPath(mappings);
-                } catch (NoPrefixDeclaredException e) {
-                    // will never happen
-                }
-                doc.add(new Field(fieldName,
-                        pathString,
-                        false,
-                        true,
-                        false));
+                addPathValue(doc, fieldName, internalValue);
-                // simple String
-                doc.add(new Field(fieldName,
-                        internalValue.toString(),
-                        false,
-                        true,
-                        false));
-                // also create fulltext index of this value
-                doc.add(new Field(FieldNames.FULLTEXT,
-                        internalValue.toString(),
-                        false,
-                        true,
-                        true));
+                addStringValue(doc, fieldName, internalValue);
-                QName qualiName = (QName) internalValue;
-                String normValue = internalValue.toString();
-                try {
-                    normValue = mappings.getPrefix(qualiName.getNamespaceURI())
-                            + ":" + qualiName.getLocalName();
-                } catch (NamespaceException e) {
-                    // will never happen
-                }
-                doc.add(new Field(fieldName,
-                        normValue,
-                        false,
-                        true,
-                        false));
+                addNameValue(doc, fieldName, internalValue);
+    /**
+     * Adds the binary value to the document as the named field.
+     * <p>
+     * This implementation does nothing as binary indexing is not implemented
+     * here.
+     * 
+     * @param doc The document to which to add the field
+     * @param fieldName The name of the field to add
+     * @param internalValue The value for the field to add to the document.
+     */
+    protected void addBinaryValue(Document doc, String fieldName, Object internalValue) {
+        // don't know how to index -> ignore
+    }
+    
+    /**
+     * Adds the string representation of the boolean value to the document as
+     * the named field.
+     * 
+     * @param doc The document to which to add the field
+     * @param fieldName The name of the field to add
+     * @param internalValue The value for the field to add to the document.
+     */
+    protected void addBooleanValue(Document doc, String fieldName, Object internalValue) {
+        doc.add(new Field(fieldName,
+            internalValue.toString(),
+            false,
+            true,
+            false));
+    }
+
+    /**
+     * Adds the calendar value to the document as the named field. The calendar
+     * value is converted to an indexable string value using the {@link DateField}
+     * class.
+     * 
+     * @param doc The document to which to add the field
+     * @param fieldName The name of the field to add
+     * @param internalValue The value for the field to add to the document.
+     */
+    protected void addCalendarValue(Document doc, String fieldName, Object internalValue) {
+        long millis = ((Calendar) internalValue).getTimeInMillis();
+        doc.add(new Field(fieldName,
+                DateField.timeToString(millis),
+                false,
+                true,
+                false));
+    }
+    
+    /**
+     * Adds the double value to the document as the named field. The double
+     * value is converted to an indexable string value using the
+     * {@link DoubleField} class.
+     * 
+     * @param doc The document to which to add the field
+     * @param fieldName The name of the field to add
+     * @param internalValue The value for the field to add to the document.
+     */
+    protected void addDoubleValue(Document doc, String fieldName, Object internalValue) {
+        double doubleVal = ((Double) internalValue).doubleValue();
+        doc.add(new Field(fieldName,
+                DoubleField.doubleToString(doubleVal),
+                false,
+                true,
+                false));
+    }
+    
+    /**
+     * Adds the long value to the document as the named field. The long
+     * value is converted to an indexable string value using the {@link LongField}
+     * class.
+     * 
+     * @param doc The document to which to add the field
+     * @param fieldName The name of the field to add
+     * @param internalValue The value for the field to add to the document.
+     */
+    protected void addLongValue(Document doc, String fieldName, Object internalValue) {
+        long longVal = ((Long) internalValue).longValue();
+        doc.add(new Field(fieldName,
+                LongField.longToString(longVal),
+                false,
+                true,
+                false));
+    }
+    
+    /**
+     * Adds the reference value to the document as the named field. The value's
+     * string representation is added as the reference data. Additionally the
+     * reference data is stored in the index.
+     * 
+     * @param doc The document to which to add the field
+     * @param fieldName The name of the field to add
+     * @param internalValue The value for the field to add to the document.
+     */
+    protected void addReferenceValue(Document doc, String fieldName, Object internalValue) {
+        String uuid = internalValue.toString();
+        doc.add(new Field(fieldName,
+                uuid,
+                true, // store
+                true,
+                false));
+    }
+    
+    /**
+     * Adds the path value to the document as the named field. The path
+     * value is converted to an indexable string value using the name space
+     * mappings with which this class has been created.
+     * 
+     * @param doc The document to which to add the field
+     * @param fieldName The name of the field to add
+     * @param internalValue The value for the field to add to the document.
+     */
+    protected void addPathValue(Document doc, String fieldName, Object internalValue) {
+        Path path = (Path) internalValue;
+        String pathString = path.toString();
+        try {
+            pathString = path.toJCRPath(mappings);
+        } catch (NoPrefixDeclaredException e) {
+            // will never happen
+        }
+        doc.add(new Field(fieldName,
+                pathString,
+                false,
+                true,
+                false));
+    }
+
+    /**
+     * Adds the string value to the document both as the named field and for
+     * full text indexing.
+     * 
+     * @param doc The document to which to add the field
+     * @param fieldName The name of the field to add
+     * @param internalValue The value for the field to add to the document.
+     */
+    protected void addStringValue(Document doc, String fieldName, Object internalValue) {
+        String stringValue = String.valueOf(internalValue);
+        
+        // simple String
+        doc.add(new Field(fieldName,
+                stringValue,
+                false,
+                true,
+                false));
+        // also create fulltext index of this value
+        doc.add(new Field(FieldNames.FULLTEXT,
+                stringValue,
+                false,
+                true,
+                true));
+    }
+    
+    /**
+     * Adds the name value to the document as the named field. The name
+     * value is converted to an indexable string treating the internal value
+     * as a qualified name and mapping the name space using the name space
+     * mappings with which this class has been created.
+     * 
+     * @param doc The document to which to add the field
+     * @param fieldName The name of the field to add
+     * @param internalValue The value for the field to add to the document.
+     */
+    protected void addNameValue(Document doc, String fieldName, Object internalValue) {
+        QName qualiName = (QName) internalValue;
+        String normValue = internalValue.toString();
+        try {
+            normValue = mappings.getPrefix(qualiName.getNamespaceURI())
+                    + ":" + qualiName.getLocalName();
+        } catch (NamespaceException e) {
+            // will never happen
+        }
+        doc.add(new Field(fieldName,
+                normValue,
+                false,
+                true,
+                false));
+    }

INS83 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 UPD83 UPD83 UPD83 UPD83 MOV29 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 MOV60 MOV54 MOV60 INS50 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 MOV21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 MOV21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 MOV21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 MOV21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 MOV21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 MOV60 MOV54 MOV21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 MOV60 MOV54 MOV21 MOV32 MOV49 INS21 MOV10 MOV49 INS21 MOV10 MOV49 INS21 MOV10 MOV49 INS21 MOV10 MOV49 INS21 MOV10 MOV49 INS21 MOV10 MOV49 INS21 MOV10 MOV49 INS21 INS10 MOV49 INS21 INS10 INS49 MOV53 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 MOV42 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS32 MOV32 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 MOV9 MOV9 MOV9 INS43 INS42 INS42 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL21 DEL10 DEL10 DEL49 DEL50 DEL8 DEL31