JCR-1775: Transaction-safe versioning

Further updateReferences improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@708943 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import org.apache.jackrabbit.uuid.UUID;
-                    /**
-                     * Update node references based on modifications in change log
-                     * (added/modified/removed REFERENCE properties)
-                     */
-                    updateReferences(local, virtualProvider);
+                    // Update node references based on modifications in change
+                    // log (added/modified/removed REFERENCE properties)
+                    updateReferences();
-        private void updateReferences(
-                ChangeLog changes, VirtualItemStateProvider virtualProvider)
-                throws ItemStateException {
-            Iterator iterator;
-
+        private void updateReferences() throws ItemStateException {
-            iterator = getReferenceProperties(changes.addedStates());
-            while (iterator.hasNext()) {
-                PropertyState prop = (PropertyState) iterator.next();
-                // add the new 'reference'
-                InternalValue[] vals = prop.getValues();
-                for (int i = 0; vals != null && i < vals.length; i++) {
-                    NodeReferencesId refsId = new NodeReferencesId(
-                            vals[i].getUUID());
-                    if (virtualProvider != null
-                            && virtualProvider.hasNodeReferences(refsId)) {
-                        continue;
-                    }
-                    NodeReferences refs =
-                        getOrCreateNodeReferences(refsId, changes);
-                    // add reference
-                    refs.addReference(prop.getPropertyId());
-                    // update change log
-                    changes.modified(refs);
-                }
+            for (Iterator i = local.addedStates(); i.hasNext(); ) {
+                addReferences((ItemState) i.next());
-            iterator = getProperties(changes.modifiedStates());
-            while (iterator.hasNext()) {
-                PropertyState newProp = (PropertyState) iterator.next();
-                PropertyState oldProp =
-                    (PropertyState) getItemState(newProp.getId());
-
-                // check old type
-                if (oldProp.getType() == PropertyType.REFERENCE) {
-                    // this is a modified REFERENCE property:
-                    // remove the old 'reference' from the target
-                    InternalValue[] vals = oldProp.getValues();
-                    for (int i = 0; vals != null && i < vals.length; i++) {
-                        NodeReferencesId refsId = new NodeReferencesId(
-                                vals[i].getUUID());
-                        if (virtualProvider != null
-                                && virtualProvider.hasNodeReferences(refsId)) {
-                            continue;
-                        }
-                        // either get node references from change log or load from
-                        // persistence manager
-                        NodeReferences refs = changes.get(refsId);
-                        if (refs == null) {
-                            refs = getNodeReferences(refsId);
-                        }
-                        // remove reference
-                        refs.removeReference(oldProp.getPropertyId());
-                        // update change log
-                        changes.modified(refs);
-                    }
-                }
-
-                // check new type
-                if (newProp.getType() == PropertyType.REFERENCE) {
-                    // this is a modified REFERENCE property:
-                    // add the new 'reference' to the target
-                    InternalValue[] vals = newProp.getValues();
-                    for (int i = 0; vals != null && i < vals.length; i++) {
-                        NodeReferencesId refsId = new NodeReferencesId(
-                                vals[i].getUUID());
-                        if (virtualProvider != null
-                                && virtualProvider.hasNodeReferences(refsId)) {
-                            continue;
-                        }
-                        NodeReferences refs =
-                            getOrCreateNodeReferences(refsId, changes);
-                        // add reference
-                        refs.addReference(newProp.getPropertyId());
-                        // update change log
-                        changes.modified(refs);
-                    }
+            for (Iterator i = local.modifiedStates(); i.hasNext(); ) {
+                ItemState state = (ItemState) i.next();
+                if (!state.isNode()) {
+                    // remove old references from the target
+                    removeReferences(getItemState(state.getId()));
+                    // add new references to the target
+                    addReferences(state);
-            iterator = getReferenceProperties(changes.deletedStates());
-            while (iterator.hasNext()) {
-                PropertyState prop = (PropertyState) iterator.next();
-                if (prop.getType() == PropertyType.REFERENCE) {
-                    // this is a removed REFERENCE property:
-                    // remove the 'reference' from the target
-                    InternalValue[] vals = prop.getValues();
-                    for (int i = 0; vals != null && i < vals.length; i++) {
-                        NodeReferencesId refsId = new NodeReferencesId(
-                                vals[i].getUUID());
-                        if (virtualProvider != null
-                                && virtualProvider.hasNodeReferences(refsId)) {
-                            continue;
-                        }
-                        // either get node references from change log or
-                        // load from persistence manager
-                        NodeReferences refs = changes.get(refsId);
-                        if (refs == null) {
-                            refs = getNodeReferences(refsId);
-                        }
-                        // remove reference
-                        refs.removeReference(prop.getPropertyId());
-                        // update change log
-                        changes.modified(refs);
+            for (Iterator i = local.deletedStates(); i.hasNext(); ) {
+                removeReferences((ItemState) i.next());
+            }
+        }
+
+        private void addReferences(ItemState state)
+                throws NoSuchItemStateException, ItemStateException {
+            if (!state.isNode()) {
+                PropertyState property = (PropertyState) state;
+                if (property.getType() == PropertyType.REFERENCE) {
+                    InternalValue[] values = property.getValues();
+                    for (int i = 0; values != null && i < values.length; i++) {
+                        addReference(
+                                property.getPropertyId(), values[i].getUUID());
-        /**
-         * Returns a node references object using the following rules:
-         * <ol>
-         * <li>return a modified instance from the change log (if one exists)</li>
-         * <li>return an existing instance from <i>this</i> item state manager
-         * (if one exists)</li>
-         * <li>create and return a new instance</li>
-         * </ol>
-         *
-         * @param id  node references id
-         * @param changes change log
-         * @return a node references object
-         * @throws ItemStateException if an error occurs
-         */
-        private NodeReferences getOrCreateNodeReferences(
-                NodeReferencesId id, ChangeLog changes)
+        private void addReference(PropertyId id, UUID uuid)
-            // check change log
-            NodeReferences refs = changes.get(id);
-            if (refs != null) {
-                return refs;
-            } else  if (hasNodeReferences(id)) {
-                return getNodeReferences(id);
-            } else {
-                return new NodeReferences(id);
-            }
-        }
-
-        private Iterator getProperties(Iterator states) {
-            ArrayList properties = new ArrayList();
-            while (states.hasNext()) {
-                ItemState state = (ItemState) states.next();
-                if (!state.isNode()) {
-                    properties.add(state);
+            NodeReferencesId refsId = new NodeReferencesId(uuid);
+            if (virtualProvider == null
+                    || ! virtualProvider.hasNodeReferences(refsId)) {
+                // get or create the references instance
+                NodeReferences refs = local.get(refsId);
+                if (refs == null) {
+                    if (hasNodeReferences(refsId)) {
+                        refs = getNodeReferences(refsId);
+                    } else {
+                        refs = new NodeReferences(refsId);
+                    }
+                // add reference
+                refs.addReference(id);
+                // update change log
+                local.modified(refs);
-            return properties.iterator();
-        private Iterator getReferenceProperties(Iterator states) {
-            ArrayList properties = new ArrayList();
-            while (states.hasNext()) {
-                ItemState state = (ItemState) states.next();
-                if (!state.isNode()) {
-                    PropertyState property = (PropertyState) state;
-                    if (property.getType() == PropertyType.REFERENCE) {
-                        properties.add(property);
+        private void removeReferences(ItemState state)
+                throws NoSuchItemStateException, ItemStateException {
+            if (!state.isNode()) {
+                PropertyState property = (PropertyState) state;
+                if (property.getType() == PropertyType.REFERENCE) {
+                    InternalValue[] values = property.getValues();
+                    for (int i = 0; values != null && i < values.length; i++) {
+                        removeReference(
+                                property.getPropertyId(), values[i].getUUID());
-            return properties.iterator();
+        }
+
+        private void removeReference(PropertyId id, UUID uuid)
+                throws ItemStateException {
+            NodeReferencesId refsId = new NodeReferencesId(uuid);
+            if (virtualProvider == null
+                    || !virtualProvider.hasNodeReferences(refsId)) {
+                // either get node references from change log or load from
+                // persistence manager
+                NodeReferences refs = local.get(refsId);
+                if (refs == null && hasNodeReferences(refsId)) {
+                    refs = getNodeReferences(refsId);
+                }
+                if (refs != null) {
+                    // remove reference
+                    refs.removeReference(id);
+                    // update change log
+                    local.modified(refs);
+                }
+            }

MOV26 UPD40 INS31 INS31 INS31 INS31 INS31 MOV29 MOV83 MOV39 MOV42 MOV43 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 MOV83 INS39 INS42 MOV44 MOV44 MOV43 INS8 INS24 INS24 INS24 MOV43 INS42 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS42 MOV60 INS25 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS25 UPD43 UPD43 UPD42 MOV60 INS25 INS58 INS32 INS8 INS58 INS32 MOV8 INS58 INS32 INS8 MOV38 INS8 INS42 INS42 MOV43 UPD27 MOV27 INS8 MOV38 INS8 UPD42 UPD42 MOV43 UPD27 MOV27 INS8 MOV43 INS59 UPD42 MOV42 MOV42 INS21 MOV43 INS59 INS42 INS42 INS25 MOV43 INS59 UPD42 MOV42 MOV42 INS21 MOV60 MOV25 UPD27 INS38 MOV60 MOV25 MOV21 MOV21 MOV60 MOV25 UPD42 UPD27 INS38 MOV60 MOV25 INS25 UPD42 MOV42 INS32 INS32 UPD42 MOV42 MOV32 UPD43 INS38 INS8 INS42 INS32 INS32 MOV43 INS42 MOV32 MOV43 INS8 MOV27 MOV43 INS42 MOV32 MOV43 INS27 MOV27 INS8 UPD42 MOV42 MOV42 INS42 INS11 UPD42 UPD42 UPD42 UPD42 INS11 INS32 MOV21 MOV21 UPD42 MOV42 UPD42 MOV42 INS42 INS11 UPD42 INS25 UPD42 MOV42 UPD42 UPD42 INS32 MOV27 INS32 MOV21 MOV21 UPD43 MOV43 MOV32 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 MOV43 MOV32 INS42 UPD42 INS42 UPD42 INS32 MOV8 INS8 MOV5 MOV58 MOV37 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 INS21 INS42 INS42 INS21 UPD42 INS21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV32 UPD42 UPD42 UPD40 INS32 INS7 UPD42 UPD42 UPD40 INS32 UPD42 UPD42 UPD42 MOV42 MOV32 INS32 INS42 INS14 MOV42 MOV32 INS32 UPD42 INS2 UPD42 MOV42 MOV43 INS42 UPD42 INS2 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL32 DEL14 DEL42 DEL42 DEL33 DEL27 DEL42 DEL32 DEL27 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL14 DEL59 DEL60 DEL18 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL43 DEL85 DEL5 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL14 DEL59 DEL60 DEL18 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL32 DEL11 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL32 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL37 DEL24 DEL8 DEL61 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL18 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL61 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL25 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31