re-implemented handling of values on import to allow import of large binary properties 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160072 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.Constants;
-import org.apache.jackrabbit.core.InternalValue;
-import org.apache.jackrabbit.core.util.ValueHelper;
-import org.xml.sax.helpers.DefaultHandler;
+import java.io.IOException;
+import java.util.Iterator;
-class SysViewImportHandler extends DefaultHandler implements Constants {
+class SysViewImportHandler extends TargetImportHandler {
-    private final Importer importer;
-    private final NamespaceResolver nsContext;
-
+    // list of AppendableValue objects
-    private StringBuffer currentPropValue;
+    private AppendableValue currentPropValue;
+    /**
+     * Constructs a new <code>SysViewImportHandler</code>.
+     *
+     * @param importer
+     * @param nsContext
+     */
-        this.importer = importer;
-        this.nsContext = nsContext;
+        super(importer, nsContext);
+                // dispose temporary property values
+                for (Iterator iter = state.props.iterator(); iter.hasNext();) {
+                    Importer.PropInfo pi = (Importer.PropInfo) iter.next();
+                    disposePropertyValues(pi);
+                }
+
-            String name = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-            if (name == null) {
-                // try qualified name
-                name = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-            }
+            String name = atts.getValue(SysViewSAXEventGenerator.PREFIXED_NAME_ATTRIBUTE);
-            String name = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-            if (name == null) {
-                // try qualified name
-                name = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-            }
+            String name = atts.getValue(SysViewSAXEventGenerator.PREFIXED_NAME_ATTRIBUTE);
-            String type = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.TYPE_ATTRIBUTE);
-            if (type == null) {
-                // try qualified name
-                type = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.TYPE_ATTRIBUTE);
-            }
+            String type = atts.getValue(SysViewSAXEventGenerator.PREFIXED_TYPE_ATTRIBUTE);
-            currentPropValue = new StringBuffer();
+            if (currentPropType == PropertyType.BINARY) {
+                // binary value; use temp-file backed value appender
+                try {
+                    currentPropValue = new CLOBValue();
+                } catch (IOException ioe) {
+                    throw new SAXException("error while processing property value",
+                            ioe);
+                }
+            } else {
+                // 'normal' value; use StringBuffer-backed value appender
+                currentPropValue = new StringBufferValue();
+            }
-    public void characters(char[] ch, int start, int length) throws SAXException {
+    public void characters(char[] ch, int start, int length)
+            throws SAXException {
-            currentPropValue.append(ch, start, length);
+            try {
+                currentPropValue.append(ch, start, length);
+            } catch (IOException ioe) {
+                throw new SAXException("error while processing property value",
+                        ioe);
+            }
-    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
-        try {
-            String elemName;
-            if (localName != null && !"".equals(localName)) {
-                elemName = localName;
+    public void endElement(String namespaceURI, String localName, String qName)
+            throws SAXException {
+        String elemName;
+        if (localName != null && !"".equals(localName)) {
+            elemName = localName;
+        } else {
+            try {
+                elemName = QName.fromJCRName(qName, nsContext).getLocalName();
+            } catch (BaseException e) {
+                // should never happen...
+                String msg = "internal error: failed to parse/resolve element name " + qName;
+                log.debug(msg);
+                throw new SAXException(msg, e);
+            }
+        }
+        // check element name
+        ImportState state = (ImportState) stack.peek();
+        if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
+            // sv:node element
+            if (!state.started) {
+                // need to start & end current node
+                processNode(state, true, true);
+                state.started = true;
+                // need to end current node
+                processNode(state, false, true);
+            }
+            // pop current state from stack
+            stack.pop();
+        } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
+            // sv:property element
+
+            // check if all system properties (jcr:primaryType, jcr:uuid etc.)
+            // have been collected and create node as necessary
+            if (currentPropName.equals(JCR_PRIMARYTYPE)) {
+                AppendableValue val = (AppendableValue) currentPropValues.get(0);
+                String s = null;
-                    elemName = QName.fromJCRName(qName, nsContext).getLocalName();
-                } catch (BaseException e) {
-                    // should never happen...
-                    String msg = "internal error: failed to parse/resolve element name " + qName;
-                    log.debug(msg);
-                    throw new SAXException(msg, e);
+                    s = val.retrieve();
+                    state.nodeTypeName = QName.fromJCRName(s, nsContext);
+                } catch (IOException ioe) {
+                    throw new SAXException("error while retrieving value", ioe);
+                } catch (IllegalNameException ine) {
+                    throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + s, ine));
+                } catch (UnknownPrefixException upe) {
+                    throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + s, upe));
-            }
-            // check element name
-            ImportState state = (ImportState) stack.peek();
-            if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
-                // sv:node element
-                if (!state.started) {
-                    // need to start & end current node
-                    processNode(state, true, true);
-                    state.started = true;
-                } else {
-                    // need to end current node
-                    processNode(state, false, true);
+            } else if (currentPropName.equals(JCR_MIXINTYPES)) {
+                if (state.mixinNames == null) {
+                    state.mixinNames = new ArrayList(currentPropValues.size());
-                // pop current state from stack
-                stack.pop();
-            } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
-                // sv:property element
-
-                // check if all system properties (jcr:primaryType, jcr:uuid etc.)
-                // have been collected and create node as necessary
-                if (currentPropName.equals(JCR_PRIMARYTYPE)) {
+                for (int i = 0; i < currentPropValues.size(); i++) {
+                    AppendableValue val = (AppendableValue) currentPropValues.get(0);
+                    String s = null;
-                        state.nodeTypeName = QName.fromJCRName((String) currentPropValues.get(0), nsContext);
+                        s = val.retrieve();
+                        QName mixin = QName.fromJCRName(s, nsContext);
+                        state.mixinNames.add(mixin);
+                    } catch (IOException ioe) {
+                        throw new SAXException("error while retrieving value", ioe);
-                        throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + currentPropValues.get(0), ine));
+                        throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + s, ine));
-                        throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + currentPropValues.get(0), upe));
+                        throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + s, upe));
-                } else if (currentPropName.equals(JCR_MIXINTYPES)) {
-                    if (state.mixinNames == null) {
-                        state.mixinNames = new ArrayList(currentPropValues.size());
-                    }
-                    for (int i = 0; i < currentPropValues.size(); i++) {
-                        try {
-                            QName mixin = QName.fromJCRName((String) currentPropValues.get(i), nsContext);
-                            state.mixinNames.add(mixin);
-                        } catch (IllegalNameException ine) {
-                            throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + currentPropValues.get(i), ine));
-                        } catch (UnknownPrefixException upe) {
-                            throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + currentPropValues.get(i), upe));
-                        }
-                    }
-                } else if (currentPropName.equals(JCR_UUID)) {
-                    state.uuid = (String) currentPropValues.get(0);
-                } else {
-                    // convert values to native type
-                    InternalValue[] vals = new InternalValue[currentPropValues.size()];
-                    for (int i = 0; i < currentPropValues.size(); i++) {
-                        String value = (String) currentPropValues.get(i);
-                        vals[i] = InternalValue.create(
-                                ValueHelper.deserialize(value, currentPropType,
-                                        false), nsContext);
-                    }
-                    Importer.PropInfo prop = new Importer.PropInfo();
-                    prop.setName(currentPropName);
-                    prop.setType(currentPropType);
-                    prop.setValues(vals);
-
-                    state.props.add(prop);
-
-                // reset temp fields
-                currentPropValues.clear();
-            } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
-                // sv:value element
-                currentPropValues.add(currentPropValue.toString());
-                // reset temp fields
-                currentPropValue = null;
+            } else if (currentPropName.equals(JCR_UUID)) {
+                AppendableValue val = (AppendableValue) currentPropValues.get(0);
+                try {
+                    state.uuid = val.retrieve();
+                } catch (IOException ioe) {
+                    throw new SAXException("error while retrieving value", ioe);
+                }
-                throw new SAXException(new InvalidSerializedDataException("invalid element in system view xml document: " + elemName));
+                Importer.PropInfo prop = new Importer.PropInfo();
+                prop.setName(currentPropName);
+                prop.setType(currentPropType);
+                prop.setValues((Importer.TextValue[])
+                        currentPropValues.toArray(new Importer.TextValue[currentPropValues.size()]));
+                state.props.add(prop);
-        } catch (RepositoryException re) {
-            throw new SAXException(re);
+            // reset temp fields
+            currentPropValues.clear();
+        } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
+            // sv:value element
+            currentPropValues.add(currentPropValue);
+            // reset temp fields
+            currentPropValue = null;
+        } else {
+            throw new SAXException(new InvalidSerializedDataException("invalid element in system view xml document: " + elemName));

MOV26 MOV26 MOV23 UPD40 UPD40 UPD43 INS31 UPD42 UPD43 MOV59 INS29 MOV42 MOV44 MOV44 MOV8 MOV8 UPD42 INS65 INS65 INS65 INS46 INS66 INS42 INS42 INS42 INS42 INS8 INS25 INS54 INS8 MOV32 INS8 MOV8 MOV8 INS12 MOV21 INS24 INS25 INS44 INS8 INS58 INS32 INS8 UPD40 INS27 INS8 MOV8 INS43 INS42 INS53 INS60 INS60 INS43 INS59 INS42 INS42 INS60 INS21 UPD40 UPD40 INS42 INS40 INS54 INS42 INS14 INS43 INS59 MOV43 INS59 INS12 INS8 INS8 MOV42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS12 INS43 INS45 INS42 INS42 INS42 MOV11 INS42 INS33 INS21 INS44 INS8 MOV60 INS54 MOV60 MOV21 MOV21 MOV21 MOV21 INS40 INS42 INS40 INS42 INS11 INS42 INS42 INS21 INS44 INS8 INS42 INS43 INS7 INS43 INS42 INS53 INS60 INS60 INS43 INS8 INS12 INS32 INS43 INS32 INS7 INS43 INS42 INS53 UPD43 INS42 INS42 INS32 INS42 INS14 INS43 INS59 MOV43 INS59 INS12 UPD42 MOV42 UPD42 INS11 INS21 INS44 INS8 UPD42 MOV42 UPD42 MOV42 INS11 INS40 INS42 INS42 INS42 INS14 INS42 INS14 UPD42 INS42 INS42 INS42 MOV43 INS45 INS42 MOV43 INS42 INS42 INS11 INS42 INS33 INS21 INS44 INS8 INS43 MOV32 INS7 INS43 INS42 INS53 INS5 INS32 INS43 INS43 INS45 INS42 MOV43 MOV43 INS43 MOV32 INS7 INS43 INS42 INS53 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS14 INS43 INS85 UPD42 MOV42 UPD42 MOV42 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS43 INS45 INS42 INS40 INS5 MOV32 INS42 INS42 UPD42 MOV42 MOV43 INS45 INS42 INS43 INS43 UPD42 MOV42 INS43 INS85 INS42 MOV43 INS42 MOV43 INS40 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL42 DEL43 DEL23 DEL31 DEL8 DEL40 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL40 DEL45 DEL40 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL40 DEL45 DEL40 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL40 DEL45 DEL40 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL34 DEL32 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL43 DEL85 DEL5 DEL43 DEL85 DEL5 DEL3 DEL42 DEL42 DEL2 DEL42 DEL42 DEL9 DEL32 DEL42 DEL32 DEL7 DEL40 DEL42 DEL43 DEL11 DEL7 DEL21 DEL8 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8