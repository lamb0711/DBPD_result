- improved versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@122838 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
-import org.apache.jackrabbit.core.util.uuid.UUID;
-
-import javax.jcr.NodeIterator;
-import javax.jcr.PropertyIterator;
-import javax.jcr.PropertyType;
-import javax.jcr.RepositoryException;
-import javax.jcr.nodetype.NodeType;
-import javax.jcr.version.OnParentVersionAction;
-import java.util.ArrayList;
-import java.util.List;
+import org.apache.jackrabbit.core.state.PropertyState;
+import javax.jcr.version.VersionException;
- * The InternalFrozenNode class presents the frozen node that was generated
+ * The InternalFrozenNode interface represents the frozen node that was generated
-public class InternalFrozenNode extends InternalFreeze {
-
-    private static final boolean FREEZEMODE_CLONE = true;
-
-    /**
-     * the underlaying persistance node
-     */
-    private PersistentNode node;
-
-    /**
-     * the list of frozen child nodes
-     */
-    private InternalFreeze[] frozenChildNodes;
-
-    /**
-     * the list of frozen properties
-     */
-    private PersistentProperty[] frozenProperties;
-
-    /**
-     * the frozen uuid of the original node
-     */
-    private String frozenUUID = null;
-
-    /**
-     * the frozen primary type of the orginal node
-     */
-    private QName frozenPrimaryType = null;
-
-    /**
-     * the frozen list of mixin types of the original node
-     */
-    private QName[] frozenMixinTypes = null;
-
-    /**
-     * uuid of this node
-     */
-    private String uuid;
-
-    /**
-     * Creates a new frozen node based on the given persistance node.
-     *
-     * @param node
-     * @throws RepositoryException
-     */
-    protected InternalFrozenNode(InternalFreeze parent, PersistentNode node) throws RepositoryException {
-        super(parent);
-        this.node = node;
-
-        // init the frozen properties
-        PersistentProperty[] props = node.getProperties();
-        List propList = new ArrayList();
-
-        for (int i = 0; i < props.length; i++) {
-            PersistentProperty prop = props[i];
-            if (FREEZEMODE_CLONE) {
-                if (prop.getName().equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
-                    frozenPrimaryType = (QName) node.getPropertyValue(prop.getName()).internalValue();
-                } else if (prop.getName().equals(ItemImpl.PROPNAME_UUID)) {
-                    frozenUUID = node.getPropertyValue(prop.getName()).toString();
-                } else if (prop.getName().equals(ItemImpl.PROPNAME_MIXINTYPES)) {
-                    InternalValue[] values = node.getPropertyValues(prop.getName());
-                    if (values == null) {
-                        frozenMixinTypes = new QName[0];
-                    } else {
-                        frozenMixinTypes = new QName[values.length];
-                        for (int j = 0; j < values.length; j++) {
-                            frozenMixinTypes[j] = (QName) values[j].internalValue();
-                        }
-                    }
-                } else {
-                    propList.add(prop);
-                }
-
-            } else {
-                if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_UUID)) {
-                    // special property
-                    frozenUUID = node.getPropertyValue(VersionManager.PROPNAME_FROZEN_UUID).internalValue().toString();
-                } else if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE)) {
-                    // special property
-                    frozenPrimaryType = (QName) node.getPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE).internalValue();
-                } else if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES)) {
-                    // special property
-                    InternalValue[] values = node.getPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES);
-                    if (values == null) {
-                        frozenMixinTypes = new QName[0];
-                    } else {
-                        frozenMixinTypes = new QName[values.length];
-                        for (int j = 0; j < values.length; j++) {
-                            frozenMixinTypes[j] = (QName) values[j].internalValue();
-                        }
-                    }
-                } else if (prop.getName().equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
-                    // ignore
-                } else if (prop.getName().equals(ItemImpl.PROPNAME_UUID)) {
-                    // ignore
-                } else {
-                    propList.add(prop);
-                }
-            }
-        }
-        frozenProperties = (PersistentProperty[]) propList.toArray(new PersistentProperty[propList.size()]);
-
-        // do some checks
-        if (frozenMixinTypes == null) {
-            frozenMixinTypes = new QName[0];
-        }
-        if (frozenPrimaryType == null) {
-            throw new RepositoryException("Illegal frozen node. Must have 'frozenPrimaryType'");
-        }
-        // init the frozen child nodes
-        PersistentNode[] childNodes = node.getChildNodes();
-        frozenChildNodes = new InternalFreeze[childNodes.length];
-        for (int i = 0; i < childNodes.length; i++) {
-            if (childNodes[i].hasProperty(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE)) {
-                frozenChildNodes[i] = new InternalFrozenNode(this, childNodes[i]);
-            } else if (childNodes[i].hasProperty(VersionManager.PROPNAME_VERSION_HISTORY)) {
-                frozenChildNodes[i] = new InternalFrozenVersionHistory(this, childNodes[i]);
-            } else {
-                // unkown ?
-            }
-        }
-
-    }
-
-    public String getInternalUUID() {
-        return node.getUUID();
-    }
-
-    /**
-     * Returns the name of this frozen node
-     *
-     * @return
-     */
-    public QName getName() {
-        return node.getName();
-    }
-
-    /**
-     * Returns the UUID of this frozen node
-     *
-     * @return
-     */
-    public String getUUID() {
-        return node.getUUID();
-    }
+public interface InternalFrozenNode extends InternalFreeze {
-     * @return
+     * @return an array of internal freezes
+     * @throws VersionException if the freezes cannot be retrieved
-    public InternalFreeze[] getFrozenChildNodes() {
-        return frozenChildNodes;
-    }
+    public InternalFreeze[] getFrozenChildNodes() throws VersionException;
-     * Returns the list of frozen properties
+     * Returns the list of frozen properties.
-     * @return
+     * @return an array of property states
-    public PersistentProperty[] getFrozenProperties() {
-        return frozenProperties;
-    }
+    public PropertyState[] getFrozenProperties();
-     * Returns the frozen UUID
+     * Returns the frozen UUID.
-     * @return
+     * @return the frozen uuid.
-    public String getFrozenUUID() {
-        return frozenUUID;
-    }
+    public String getFrozenUUID();
-     * Returns the frozen primary type
+     * Returns the name of frozen primary type.
-     * @return
+     * @return the name of the frozen primary type.
-    public QName getFrozenPrimaryType() {
-        return frozenPrimaryType;
-    }
+    public QName getFrozenPrimaryType();
-     * Returns the list of the frozen mixin types
+     * Returns the list of names of the frozen mixin types.
-     * @return
+     * @return the list of names of the frozen mixin types.
-    public QName[] getFrozenMixinTypes() {
-        return frozenMixinTypes;
-    }
-
-    /**
-     * Checks-in a <code>src</code> node. It creates a new child node of
-     * <code>parent</code> with the given <code>name</code> and adds the
-     * source nodes properties according to their OPV value to the
-     * list of frozen properties. It creates frozen child nodes for each child
-     * node of <code>src</code> according to its OPV value.
-     *
-     * @param parent
-     * @param name
-     * @param src
-     * @return
-     * @throws RepositoryException
-     */
-    protected static PersistentNode checkin(PersistentNode parent, QName name, NodeImpl src, boolean initOnly, boolean forceCopy)
-            throws RepositoryException {
-
-        PersistentNode node;
-        if (FREEZEMODE_CLONE) {
-            // identiycopy
-            // create new node
-            NodeType[] mixins = src.getMixinNodeTypes();
-            QName[] mixinNames = new QName[mixins.length];
-            for (int i = 0; i < mixins.length; i++) {
-                mixinNames[i] = ((NodeTypeImpl) mixins[i]).getQName();
-            }
-            node = parent.addNode(name, ((NodeTypeImpl) src.getPrimaryNodeType()).getQName());
-            node.setMixinNodeTypes(mixinNames);
-
-        } else {
-            // emulated
-            // create new node
-            node = parent.addNode(name, NodeTypeRegistry.NT_UNSTRUCTURED);
-
-            // initialize the internal properties
-            if (src.isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
-                node.setPropertyValue(VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(src.getUUID()));
-            }
-
-            node.setPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE,
-                    InternalValue.create(((NodeTypeImpl) src.getPrimaryNodeType()).getQName()));
-
-            if (src.hasProperty(NodeImpl.PROPNAME_MIXINTYPES)) {
-                NodeType[] mixins = src.getMixinNodeTypes();
-                InternalValue[] ivalues = new InternalValue[mixins.length];
-                for (int i = 0; i < mixins.length; i++) {
-                    ivalues[i] = InternalValue.create(((NodeTypeImpl) mixins[i]).getQName());
-                }
-                node.setPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, ivalues);
-            }
-        }
-
-        if (!initOnly) {
-            // add the properties
-            PropertyIterator piter = src.getProperties();
-            while (piter.hasNext()) {
-                PropertyImpl prop = (PropertyImpl) piter.nextProperty();
-                int opv = forceCopy ? OnParentVersionAction.COPY : prop.getDefinition().getOnParentVersion();
-                switch (opv) {
-                    case OnParentVersionAction.ABORT:
-                        parent.reload();
-                        throw new RepositoryException("Checkin aborted due to OPV in " + prop.safeGetJCRPath());
-                    case OnParentVersionAction.COMPUTE:
-                    case OnParentVersionAction.IGNORE:
-                    case OnParentVersionAction.INITIALIZE:
-                        break;
-                    case OnParentVersionAction.VERSION:
-                    case OnParentVersionAction.COPY:
-                        node.copyFrom(prop);
-                        break;
-                }
-            }
-
-
-            // add the frozen children and vistories
-            NodeIterator niter = src.getNodes();
-            while (niter.hasNext()) {
-                NodeImpl child = (NodeImpl) niter.nextNode();
-                int opv = forceCopy ? OnParentVersionAction.COPY : child.getDefinition().getOnParentVersion();
-                switch (opv) {
-                    case OnParentVersionAction.ABORT:
-                        throw new RepositoryException("Checkin aborted due to OPV in " + child.safeGetJCRPath());
-                    case OnParentVersionAction.COMPUTE:
-                    case OnParentVersionAction.IGNORE:
-                    case OnParentVersionAction.INITIALIZE:
-                        break;
-                    case OnParentVersionAction.VERSION:
-                        if (child.isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
-                            // create frozen versionable child
-                            PersistentNode newChild = node.addNode(child.getQName(), NodeTypeRegistry.NT_FROZEN_VERSIONABLE_CHILD);
-                            newChild.setPropertyValue(VersionManager.PROPNAME_VERSION_HISTORY,
-                                    InternalValue.create(UUID.fromString(child.getVersionHistory().getUUID())));
-                            newChild.setPropertyValue(VersionManager.PROPNAME_BASE_VERSION,
-                                    InternalValue.create(UUID.fromString(child.getBaseVersion().getUUID())));
-                            break;
-                        }
-                        // else copy
-                    case OnParentVersionAction.COPY:
-                        checkin(node, child.getQName(), child, false, true);
-                        break;
-                }
-            }
-        }
-        parent.store();
-        return node;
-    }
+    public QName[] getFrozenMixinTypes();

UPD40 UPD40 UPD83 MOV5 UPD42 UPD43 UPD5 MOV43 MOV43 MOV5 UPD66 MOV65 UPD65 UPD42 UPD43 UPD66 UPD42 INS66 UPD66 INS66 UPD42 UPD66 INS66 UPD66 INS66 UPD66 INS66 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL33 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL33 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL33 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL2 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL2 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL40 DEL32 DEL42 DEL42 DEL2 DEL42 DEL43 DEL52 DEL42 DEL42 DEL2 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL42 DEL40 DEL32 DEL42 DEL42 DEL2 DEL42 DEL43 DEL52 DEL42 DEL42 DEL2 DEL14 DEL7 DEL21 DEL8 DEL8 DEL25 DEL25 DEL8 DEL24 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL65 DEL29 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL41 DEL8 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL36 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL40 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL38 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL40 DEL49 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL40 DEL49 DEL40 DEL49 DEL40 DEL49 DEL10 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL42 DEL32 DEL21 DEL10 DEL50 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL40 DEL49 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL40 DEL49 DEL40 DEL49 DEL40 DEL49 DEL10 DEL40 DEL49 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL32 DEL21 DEL10 DEL8 DEL25 DEL40 DEL49 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL9 DEL9 DEL32 DEL21 DEL10 DEL50 DEL8 DEL61 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31