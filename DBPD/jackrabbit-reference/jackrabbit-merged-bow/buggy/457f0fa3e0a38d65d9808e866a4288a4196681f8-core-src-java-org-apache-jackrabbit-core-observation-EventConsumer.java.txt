Move preparation of events out of write lock to prevent possible deadlock situations.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@239609 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.ItemState;
-import java.util.HashMap;
+import java.util.WeakHashMap;
-     * A map of <code>Set</code> objects that hold references to denied
-     * <code>EventState</code>s. The map uses the <code>EventStateCollection</code>
-     * as the key to reference a deny Set.
+     * A map of <code>Set</code> objects that hold references to
+     * <code>ItemId</code>s of denied <code>ItemState</code>s. The map uses the
+     * <code>EventStateCollection</code> as the key to reference a deny Set.
-    private final Map accessDenied = Collections.synchronizedMap(new HashMap());
+    private final Map accessDenied = Collections.synchronizedMap(new WeakHashMap());
-                    denied.add(state);
+                    denied.add(state.getId());
+     * Checks for which deleted <code>ItemStates</code> this
+     * <code>EventConsumer</code> has enough access rights to see the event.
+     *
+     * @param events       the collection of {@link EventState}s.
+     * @param deletedItems Iterator of deleted <code>ItemState</code>s.
+     */
+    void prepareDeleted(EventStateCollection events, Iterator deletedItems) {
+        Set denied = null;
+        while (deletedItems.hasNext()) {
+            ItemState item = (ItemState) deletedItems.next();
+            // check read permission
+            boolean granted = false;
+            try {
+                granted = session.getAccessManager().isGranted(item.getId(), AccessManager.READ);
+            } catch (RepositoryException e) {
+                log.warn("Unable to check access rights for item: " + item.getId());
+            }
+            if (!granted) {
+                if (denied == null) {
+                    denied = new HashSet();
+                }
+                denied.add(item.getId());
+            }
+        }
+        if (denied != null) {
+            accessDenied.put(events, denied);
+        }
+    }
+
+    /**
+        // Set of ItemIds of denied ItemStates
-                    denied.add(state);
+                    denied.add(state.getId());

MOV26 INS26 INS40 UPD40 INS31 INS29 INS39 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS61 INS25 UPD66 UPD66 UPD66 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS32 INS8 INS27 INS8 UPD43 INS42 INS42 INS42 INS33 INS42 INS42 INS60 INS60 INS54 MOV25 INS42 INS33 INS21 UPD42 INS43 INS59 INS39 INS59 INS8 INS12 INS38 INS32 INS42 INS42 INS11 INS42 INS9 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS25 INS43 INS32 INS7 INS43 INS42 INS21 MOV38 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS25 INS21 INS32 INS42 INS32 INS40 INS42 INS42 INS27 UPD42 MOV42 INS42 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS33 INS21 INS42 INS42 INS32 MOV42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS14 INS43 INS42