first implementation of jta support

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55234 13f79535-47bb-0310-9956-ffa450edef68

-public abstract class PersistentNodeState extends NodeState implements PersistableItemState {
+public class PersistentNodeState extends NodeState implements PersistableItemState {
-     * Package private constructor
+     * Public constructor
-     * @param uuid         the UUID of the this node
-     * @param nodeTypeName node type of this node
-     * @param parentUUID   the UUID of the parent node
-     * @param persistMgr   the persistence manager
+     * @param uuid       the UUID of the this node
+     * @param persistMgr the persistence manager
-    protected PersistentNodeState(String uuid, QName nodeTypeName, String parentUUID, PersistenceManager persistMgr) {
-        super(uuid, nodeTypeName, parentUUID, STATUS_NEW);
+    public PersistentNodeState(String uuid, PersistenceManager persistMgr) {
+        super(uuid, null, null, STATUS_NEW);
+    /**
+     * Constructor used for overlay mechanism.
+     *
+     * @param overlayedState other node state to overlay
+     * @param initialStatus  initial status
+     * @param persistMgr     persistence manager
+     */
+    protected PersistentNodeState(PersistentNodeState overlayedState,
+                                  int initialStatus,
+                                  PersistenceManager persistMgr) {
+
+        super(overlayedState, initialStatus);
+
+        this.persistMgr = persistMgr;
+    }
+
+    /**
+     * Set the node type name. Needed for deserialization and should therefore
+     * not change the internal status.
+     *
+     * @param nodeTypeName node type name
+     */
+    public void setNodeTypeName(QName nodeTypeName) {
+        this.nodeTypeName = nodeTypeName;
+    }
+
+
-    public abstract void reload() throws ItemStateException;
+    public synchronized void reload() throws ItemStateException {
+        status = STATUS_UNDEFINED;
+        getPersistenceManager().load(this);
+        // reset status
+        status = STATUS_EXISTING;
+    }
-    public abstract void store() throws ItemStateException;
+    public synchronized void store() throws ItemStateException {
+        getPersistenceManager().store(this);
+        // notify listeners
+        if (status == STATUS_NEW) {
+            notifyStateCreated();
+        } else {
+            notifyStateUpdated();
+        }
+        // reset status
+        status = STATUS_EXISTING;
+    }
-    public abstract void destroy() throws ItemStateException;
+    public synchronized void destroy() throws ItemStateException {
+        getPersistenceManager().destroy(this);
+        // notify listeners
+        notifyStateDestroyed();
+        // reset status
+        status = STATUS_UNDEFINED;
+    }
+
+    /**
+     * Return the persistence manager to use for loading and storing data. May
+     * be overridden by subclasses.
+     *
+     * @return persistence manager
+     */
+    protected PersistenceManager getPersistenceManager() {
+        return persistMgr;
+    }

INS42 INS31 INS31 INS31 UPD83 INS29 INS83 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 MOV44 INS8 UPD83 INS8 UPD83 INS8 UPD83 INS8 INS29 INS83 INS43 INS42 INS8 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS46 INS21 INS65 INS65 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS65 INS65 INS42 INS41 UPD66 UPD66 UPD66 INS33 INS33 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS7 INS66 INS66 INS42 INS66 INS7 INS7 INS32 INS7 INS32 INS27 INS8 INS8 INS7 INS32 INS32 INS7 INS66 INS66 INS66 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42