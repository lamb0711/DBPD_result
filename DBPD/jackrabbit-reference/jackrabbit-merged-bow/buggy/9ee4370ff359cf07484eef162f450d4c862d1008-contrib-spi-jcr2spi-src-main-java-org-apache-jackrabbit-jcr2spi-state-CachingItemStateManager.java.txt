SPI
- replace ChildNodeEntryImpl with new implementations
- CachingItemStateManager now uses ItemStateFactory
- WorkspaceManager implements ItemStateFactory
- Retrieving an ItemState now forces loading all ancestors by design
- NodeState does not maintain indexes of child node entries anymore. They are calculated on demand.
- ItemStateFactory methods do not require parent NodeState anymore. The parent NodeState is retrieved using an ItemStateManager. Which in turn may lead to recursive retrieval of ancestors if necessary.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@426536 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.IdFactory;
+import org.apache.jackrabbit.spi.PropertyId;
-     * The underlying item state manager.
+     * The item state factory to create <code>ItemState</code>s that are not
+     * present in the cache.
-    private final ItemStateManager ism;
+    private final ItemStateFactory isf;
-    public CachingItemStateManager(ItemStateManager ism) {
-        this.ism = ism;
+    /**
+     * The Id factory.
+     */
+    private final IdFactory idFactory;
+
+    public CachingItemStateManager(ItemStateFactory isf, IdFactory idFactory) {
+        this.isf = isf;
+        this.idFactory = idFactory;
-        // TODO: caching missing
-        return ism.getNodeReferences(id);
+        // TODO: implement
+        return null;
-        // TODO: caching missing
-        return ism.hasNodeReferences(id);
+        // TODO: caching implement
+        return false;
-                ItemId refId = (relPath == null) ? id : new NodeIdImpl(uuid);
-                ItemState state = ism.getItemState(refId);
+                NodeId refId = (relPath == null) ? (NodeId) id : idFactory.createNodeId(uuid);
+                NodeState state = isf.createNodeState(refId, this);
-                // not yet cached, load from ism
-                ItemState state = ism.getItemState(id);
+                // not yet cached, load from isf
+                ItemState state;
+                if (id.denotesNode()) {
+                    state = isf.createNodeState((NodeId) id, this);
+                } else {
+                    state = isf.createPropertyState((PropertyId) id, this);
+                }
-
-    //--------------------------------------------------------< Inner class >---
-    /**
-     * Simple implementation of the NodeId interface that always wraps around a
-     * UUID String only and never takes a relative path.
-     * Since the uuid is retrieved from an existing <code>ItemId</code> there is
-     * no need to pass the IdFactory and using this simple implementation instead.
-     */
-    private static final class NodeIdImpl implements NodeId {
-
-        private final String uuid;
-
-        public NodeIdImpl(String uuid) {
-            if (uuid == null) {
-                throw new IllegalArgumentException("Expected non-null uuid.");
-            }
-            this.uuid = uuid;
-        }
-
-        /**
-         * Always return <code>true</code>.
-         *
-         * @return true
-         */
-        public boolean denotesNode() {
-            return true;
-        }
-
-        /**
-         * Always returns a non-null string.
-         *
-         * @return uuid passed to the constructor, which is never <code>null</code>.
-         */
-        public String getUUID() {
-            return uuid;
-        }
-
-        /**
-         * Always return <code>null</code>.
-         *
-         * @return <code>null</code>
-         */
-        public Path getRelativePath() {
-            return null;
-        }
-    }

INS26 INS26 INS40 INS40 INS23 UPD43 INS29 INS83 INS83 INS43 MOV59 INS44 UPD42 UPD42 MOV65 UPD42 MOV42 UPD42 UPD43 UPD42 INS43 INS42 INS21 MOV41 UPD66 INS66 UPD66 UPD42 INS42 INS7 INS9 UPD42 INS22 INS42 UPD42 INS52 INS42 INS60 INS25 UPD43 UPD43 MOV43 INS59 INS32 INS8 INS8 UPD42 UPD42 INS42 INS42 INS42 INS21 INS21 INS11 INS32 UPD42 UPD42 INS52 INS7 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS11 INS52 INS42 INS42 INS11 INS52 MOV43 INS42 INS43 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL32 DEL59 DEL60 DEL29 DEL83 DEL83 DEL83 DEL42 DEL83 DEL83 DEL42 DEL43 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL31 DEL55