

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@314827 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.UnknownPrefixException;
+import org.apache.jackrabbit.name.NoPrefixDeclaredException;
+import org.apache.jackrabbit.name.CachingNamespaceResolver;
-class LocalNamespaceMappings implements NamespaceResolver {
+class LocalNamespaceMappings extends CachingNamespaceResolver {
+        super(nsReg, 100);
+
+        // invalidate cache
+        super.prefixRemapped(prefix, uri);
-        if (prefixToURI.containsKey(prefix)) {
-            return (String) prefixToURI.get(prefix);
+        String uri = (String) prefixToURI.get(prefix);
+        if (uri != null) {
+            return uri;
-        if (uriToPrefix.containsKey(uri)) {
-            return (String) uriToPrefix.get(uri);
+        String prefix = (String) uriToPrefix.get(uri);
+        if (prefix != null) {
+            return prefix;
+
+    /**
+     * {@inheritDoc}
+     */
+    public QName getQName(String name)
+            throws IllegalNameException, UnknownPrefixException {
+        if (prefixToURI.isEmpty()) {
+            // shortcut
+            return nsReg.getQName(name);
+        }
+        try {
+            // first try registry, this might result in a wrong QName because
+            // of locally overlayed mappings
+            QName candidate = nsReg.getQName(name);
+            // check if valid
+            String prefix = nsReg.getPrefix(candidate.getNamespaceURI());
+            if (!hiddenPrefixes.contains(prefix)) {
+                return candidate;
+            }
+        } catch (UnknownPrefixException e) {
+            // try using local mappings
+        } catch (NamespaceException e) {
+            // may be thrown by nsReg.getPrefix() but should never happend
+            // because we got the namespace from the nsReg itself
+            throw new UnknownPrefixException(name);
+        }
+        return super.getQName(name);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public String getJCRName(QName name)
+            throws NoPrefixDeclaredException {
+        if (uriToPrefix.isEmpty()) {
+            // shortcut
+            return nsReg.getJCRName(name);
+        }
+        if (uriToPrefix.containsKey(name.getNamespaceURI())) {
+            // locally re-mappped
+            return super.getJCRName(name);
+        } else {
+            // use global mapping
+            return nsReg.getJCRName(name);
+        }
+    }
+
+    /**
+     * @inheritDoc
+     * This method gets called when the NamespaceRegistry remapped a namespace
+     * to a new prefix or if a new namespace is registered.
+     */
+    public void prefixRemapped(String prefix, String uri) {
+        // todo check overlayed mappings and adjust prefixes if necessary
+        super.prefixRemapped(prefix, uri);
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD43 INS31 INS31 INS31 UPD42 INS29 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS46 INS21 INS60 INS25 INS60 INS25 INS65 INS42 INS43 INS42 INS42 INS42 INS25 INS54 INS41 INS65 INS42 INS43 INS42 INS42 INS25 INS25 INS65 INS43 INS42 INS43 INS42 INS21 INS42 INS34 INS48 INS43 INS59 INS27 MOV8 INS43 INS59 INS27 MOV8 INS65 INS42 INS32 INS8 INS8 INS12 INS12 INS48 INS65 INS42 INS32 INS8 INS32 INS8 INS8 INS66 INS66 INS42 INS42 INS48 INS42 INS42 INS42 INS42 INS42 MOV11 INS42 INS33 INS42 INS42 MOV11 INS42 INS33 INS42 INS42 INS41 INS60 INS60 INS25 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS43 INS42 INS43 INS42 INS53 INS32 INS42 INS42 INS48 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL42 DEL42 DEL32 DEL25