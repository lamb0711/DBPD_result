JCR-1747: org.apache.jackrabbit.core.query.lucene.SearchIndex with in-memory lucene index

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@718218 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.lucene.directory.DirectoryManager;
+import org.apache.jackrabbit.core.query.lucene.directory.FSDirectoryManager;
+     * The name of the directory manager class implementation.
+     */
+    private String directoryManagerClass = FSDirectoryManager.class.getName();
+
+    /**
+     * The directory manager.
+     */
+    private DirectoryManager directoryManager;
+
+    /**
-
-        File indexDir = new File(path);
+        directoryManager = createDirectoryManager();
-            File mapFile = new File(indexDir, NS_MAPPING_FILE);
+            File mapFile = new File(new File(path), NS_MAPPING_FILE);
-        index = new MultiIndex(indexDir, this, excludedIDs, nsMappings);
+        index = new MultiIndex(this, excludedIDs);
+     * @return the directory manager for this search index.
+     */
+    public DirectoryManager getDirectoryManager() {
+        return directoryManager;
+    }
+
+    /**
+     * @return an initialized {@link DirectoryManager}.
+     * @throws IOException if the directory manager cannot be instantiated or
+     *          an exception occurs while initializing the manager.
+     */
+    protected DirectoryManager createDirectoryManager()
+            throws IOException {
+        try {
+            Class clazz = Class.forName(directoryManagerClass);
+            if (!DirectoryManager.class.isAssignableFrom(clazz)) {
+                throw new IOException(directoryManagerClass +
+                        " is not a DirectoryManager implementation");
+            }
+            DirectoryManager df = (DirectoryManager) clazz.newInstance();
+            df.init(this);
+            return df;
+        } catch (IOException e) {
+            throw e;
+        } catch (Exception e) {
+            IOException ex = new IOException();
+            ex.initCause(e);
+            throw ex;
+        }
+    }
+
+    /**
+    /**
+     * @return the name of the directory manager class.
+     */
+    public String getDirectoryManagerClass() {
+        return directoryManagerClass;
+    }
+
+    /**
+     * Sets name of the directory manager class. The class must implement
+     * {@link DirectoryManager}.
+     *
+     * @param className the name of the class that implements directory manager.
+     */
+    public void setDirectoryManagerClass(String className) {
+        this.directoryManagerClass = className;
+    }
+

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS42 INS32 INS65 INS42 INS42 INS21 INS65 INS42 INS41 INS65 INS65 INS42 INS42 INS54 INS65 INS42 INS41 INS65 INS65 INS43 INS42 INS21 INS66 INS57 INS42 INS66 INS7 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS8 INS12 INS12 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS7 INS43 INS42 INS32 MOV60 INS42 INS60 INS25 INS60 INS21 INS41 INS44 INS8 INS44 INS8 INS42 INS22 INS42 INS42 INS42 MOV43 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS42 INS43 INS42 INS53 INS43 INS42 INS60 INS21 INS53 INS52 INS42 UPD42 INS14 INS42 INS42 INS32 INS32 INS53 INS42 INS42 INS11 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS59 INS32 INS42 MOV43 MOV14 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS14 INS43 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS43 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42