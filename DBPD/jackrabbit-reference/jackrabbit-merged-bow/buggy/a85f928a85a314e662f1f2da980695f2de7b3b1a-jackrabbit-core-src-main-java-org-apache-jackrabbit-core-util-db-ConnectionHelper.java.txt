JCR-3318 BLOB not stored and no exception thrown

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1349185 13f79535-47bb-0310-9956-ffa450edef68

-        new RetryManager<Void>() {
+        new RetryManager<Void>(params) {
-        return new RetryManager<Integer>() {
+        return new RetryManager<Integer>(params) {
-        return new RetryManager<ResultSet>() {
+        return new RetryManager<ResultSet>(params) {
-                return reallyExec(sql, params, returnGeneratedKeys, maxRows);
+            	return reallyExec(sql, params, returnGeneratedKeys, maxRows);
-            // FIXME: what about already consumed input streams when in a retry?
-        stmt.execute();
+        try {
+        	stmt.execute();
+        } catch (SQLException e) {
+        	//Reset Stream for retry ...
+            for (int i = 0; params != null && i < params.length; i++) {
+                Object p = params[i];
+                if (p instanceof StreamWrapper) {
+                    StreamWrapper wrapper = (StreamWrapper) p;
+                    if(!wrapper.resetStream()) {
+                    	wrapper.cleanupResources();
+                    	throw new RuntimeException("Unable to reset the Stream.");
+                    }
+                }
+            }
+        	throw e;
+        }
+     * The RetryManager must cleanup the Params it will get.
+    	private Object[] params;
+    	
+    	public RetryManager(Object[] params) {
+    		this.params = params;
+    	}
+    	
-                        return call();
+                    	T object = call(); 
+                        cleanupParamResources();
+                        return object;
+                cleanupParamResources();
+
+		/**
+		 * Cleans up the Parameter resources that are not automatically closed or deleted.
+		 *
+		 * @param params
+		 */
+		protected void cleanupParamResources() {
+		    for (int i = 0; params != null && i < params.length; i++) {
+		        Object p = params[i];
+		        if (p instanceof StreamWrapper) {
+		            StreamWrapper wrapper = (StreamWrapper) p;
+		            wrapper.cleanupResources();
+		        }
+		    }
+		}

INS23 INS31 INS31 INS54 INS83 INS5 INS59 INS83 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS8 INS12 INS66 INS43 INS85 INS42 INS5 INS42 INS21 INS65 INS65 INS24 MOV21 INS44 INS8 INS42 INS43 INS85 INS7 INS66 INS42 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS43 INS42 INS24 INS53 INS42 INS22 INS42 INS21 INS39 INS59 INS27 INS27 INS42 INS60 INS25 INS42 INS58 INS27 INS37 INS8 INS42 INS52 INS42 INS32 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS62 INS8 INS39 INS59 INS27 INS27 INS42 INS60 INS25 INS42 INS42 INS42 INS2 INS42 INS43 INS60 INS21 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS62 INS8 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS2 INS42 INS43 INS60 INS25 INS60 INS21 INS41 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS42 INS43 INS42 INS42 INS42 INS11 INS32 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS14 MOV42 INS42 INS42 INS42 INS43 INS45 INS42 DEL32 DEL41