JCR-1855: Update to Lucene 2.4.1

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@756444 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.Hits;
+import org.apache.lucene.analysis.Token;
-import java.io.PrintStream;
- * See the body of {@link #main main()} below in the source for real code, or
- * if you want pseudo code, the simpliest possible usage is as follows. The bold
- * fragment is specific to this class.
- * @author David Spencer
- * @author Bruce Ritchie
- * @author Mark Harwood
-    public static final int DEFALT_MIN_DOC_FREQ = 5;
+    public static final int DEFAULT_MIN_DOC_FREQ = 5;
-    private int minDocFreq = DEFALT_MIN_DOC_FREQ;
+    private int minDocFreq = DEFAULT_MIN_DOC_FREQ;
-    private Similarity similarity = new DefaultSimilarity();
+    private Similarity similarity;// = new DefaultSimilarity();
-        this.ir = ir;
+        this(ir, new DefaultSimilarity());
-    /**
+    public MoreLikeThis(IndexReader ir, Similarity sim){
+      this.ir = ir;
+      this.similarity = sim;
+    }
+
+
+  public Similarity getSimilarity() {
+    return similarity;
+  }
+
+  public void setSimilarity(Similarity similarity) {
+    this.similarity = similarity;
+  }
+
+  /**
-     * many docs. The default frequency is {@link #DEFALT_MIN_DOC_FREQ}.
+     * many docs. The default frequency is {@link #DEFAULT_MIN_DOC_FREQ}.
-        Iterator it = words.entrySet().iterator();
+        Iterator it = words.keySet().iterator();
-            Map.Entry entry = (Map.Entry) it.next();
-            String word = (String) entry.getKey();
+            String word = (String) it.next();
-            int tf = ((Int) entry.getValue()).x; // term freq in the source doc
+            int tf = ((Int) words.get(word)).x; // term freq in the source doc
-        sb.append("\t" + "fieldNames     : \"");
+        sb.append("\t" + "fieldNames     : ");
-     * Test driver.
-     * Pass in "-i INDEX" and then either "-fn FILE" or "-url URL".
-     */
-    public static void main(String[] a) throws Throwable {
-        String indexName = "localhost_index";
-        String fn = "c:/Program Files/Apache Group/Apache/htdocs/manual/vhosts/index.html.en";
-        URL url = null;
-        for (int i = 0; i < a.length; i++) {
-            if (a[i].equals("-i")) {
-                indexName = a[++i];
-            }
-            else if (a[i].equals("-f")) {
-                fn = a[++i];
-            }
-            else if (a[i].equals("-url")) {
-                url = new URL(a[++i]);
-            }
-        }
-
-        PrintStream o = System.out;
-        IndexReader r = IndexReader.open(indexName);
-        o.println("Open index " + indexName + " which has " + r.numDocs() + " docs");
-
-        MoreLikeThis mlt = new MoreLikeThis(r);
-
-        o.println("Query generation parameters:");
-        o.println(mlt.describeParams());
-        o.println();
-
-        Query query = null;
-        if (url != null) {
-            o.println("Parsing URL: " + url);
-            query = mlt.like(url);
-        }
-        else if (fn != null) {
-            o.println("Parsing file: " + fn);
-            query = mlt.like(new File(fn));
-        }
-
-        o.println("q: " + query);
-        o.println();
-        IndexSearcher searcher = new IndexSearcher(indexName);
-
-        Hits hits = searcher.search(query);
-        int len = hits.length();
-        o.println("found: " + len + " documents matching");
-        o.println();
-        for (int i = 0; i < Math.min(25, len); i++) {
-            Document d = hits.doc(i);
-            String summary = d.get( "summary");
-            o.println("score  : " + hits.score(i));
-            o.println("url    : " + d.get("url"));
-            o.println("\ttitle  : " + d.get("title"));
-            if (summary != null) {
-                o.println("\tsummary: " + d.get("summary"));
-            }
-            o.println();
-        }
-    }
-
-    /**
-    private PriorityQueue retrieveTerms(int docNum) throws IOException {
+    public PriorityQueue retrieveTerms(int docNum) throws IOException {
-        org.apache.lucene.analysis.Token token;
-        while ((token = ts.next()) != null) { // for every token
-            String word = token.termText();
+        // for every token
+        final Token reusableToken = new Token();
+        for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {
+            String word = nextToken.term();
-            }
-            else {
+            } else {
-     * @return the most intresting words in the document ordered by score, with the highest scoring, or best entry, first
+     * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first
+     * @see #retrieveInterestingTerms(java.io.Reader)
+     */
+    public String[] retrieveInterestingTerms(int docNum) throws IOException {
+        ArrayList al = new ArrayList(maxQueryTerms);
+        PriorityQueue pq = retrieveTerms(docNum);
+        Object cur;
+        int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...
+        // we just want to return the top words
+        while (((cur = pq.pop()) != null) && lim-- > 0) {
+            Object[] ar = (Object[]) cur;
+            al.add(ar[0]); // the 1st entry is the interesting word
+        }
+        String[] res = new String[al.size()];
+        return (String[]) al.toArray(res);
+    }
+
+    /**
-    public String[] retrieveInterestingTerms( Reader r) throws IOException {
-        ArrayList al = new ArrayList( maxQueryTerms);
-        PriorityQueue pq = retrieveTerms( r);
-        int lim = maxQueryTerms;
-        // have to be careful, retrieveTerms returns all words
-        // but that's probably not useful to our caller...
+    public String[] retrieveInterestingTerms(Reader r) throws IOException {
+        ArrayList al = new ArrayList(maxQueryTerms);
+        PriorityQueue pq = retrieveTerms(r);
+        Object cur;
+        int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...
-        for (Object cur = pq.pop(); cur != null && lim-- > 0; cur = pq.pop()) {
+        while (((cur = pq.pop()) != null) && lim-- > 0) {
-        return (String[]) al.toArray(new String[al.size()]);
+        String[] res = new String[al.size()];
+        return (String[]) al.toArray(res);

MOV26 MOV31 UPD40 INS31 INS31 INS31 MOV29 INS83 INS42 INS44 INS8 INS44 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 UPD83 MOV60 INS5 INS42 INS44 INS43 INS8 UPD42 UPD42 INS43 INS42 INS17 INS43 INS42 INS21 INS42 INS41 INS43 INS42 INS21 INS24 UPD65 INS43 INS85 INS39 INS42 UPD42 MOV42 MOV60 MOV60 MOV60 MOV60 INS61 INS60 INS41 INS60 INS61 INS60 INS42 INS42 MOV14 INS42 INS7 INS42 INS42 INS7 INS83 UPD43 INS58 INS27 INS7 MOV8 UPD66 INS68 MOV42 UPD43 UPD43 UPD43 INS27 INS8 MOV5 INS59 INS11 MOV43 INS59 INS27 MOV8 INS5 INS59 INS22 INS42 INS22 INS42 INS42 INS42 INS14 INS43 INS59 INS42 INS33 UPD42 MOV42 MOV32 INS42 INS69 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 INS42 UPD42 INS42 INS36 INS27 MOV60 MOV21 INS42 INS3 INS5 INS32 MOV42 INS36 MOV27 INS43 INS85 INS42 MOV3 INS52 INS42 INS52 INS42 UPD42 UPD43 UPD45 INS43 INS42 INS42 INS32 INS42 MOV43 INS43 UPD43 UPD42 INS42 INS42 INS27 INS37 INS34 INS5 INS5 INS32 INS43 INS85 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS40 UPD42 INS36 INS33 INS42 INS43 INS85 UPD42 INS11 UPD42 UPD42 MOV42 INS2 INS43 INS85 UPD42 MOV42 UPD42 MOV42 INS42 INS36 MOV33 MOV43 UPD42 UPD42 INS7 UPD42 MOV42 INS5 INS42 INS42 INS34 INS42 MOV7 INS42 INS32 INS43 INS85 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL42 DEL67 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL40 DEL40 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL40 DEL42 DEL42 DEL43 DEL7 DEL36 DEL33 DEL27 DEL61 DEL66 DEL66 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL32 DEL27 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL38 DEL2 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL38 DEL2 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL42 DEL45 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL38 DEL2 DEL14 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL8 DEL24 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL45 DEL32 DEL27 DEL32 DEL21 DEL42 DEL33 DEL27 DEL45 DEL42 DEL45 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL27 DEL27 DEL24