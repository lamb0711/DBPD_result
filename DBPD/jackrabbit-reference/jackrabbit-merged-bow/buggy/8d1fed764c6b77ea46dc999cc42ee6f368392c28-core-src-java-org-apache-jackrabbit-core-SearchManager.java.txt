JCR-178: Allow concurrent index updates and queries

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@232801 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;
+import org.apache.jackrabbit.core.state.ItemState;
-     * Adds a <code>Node</code> to the search index.
-     *
-     * @param node the NodeState to add.
-     * @throws RepositoryException if an error occurs while indexing the node.
-     * @throws IOException         if an error occurs while adding the node to the index.
-     */
-    public void addNode(NodeState node)
-            throws RepositoryException, IOException {
-        handler.addNode(node);
-    }
-
-    /**
-     * Deletes the Node with <code>UUID</code> from the search index.
-     *
-     * @param uuid the <code>UUID</code> of the node to delete.
-     * @throws IOException if an error occurs while deleting the node.
-     */
-    public void deleteNode(String uuid) throws IOException {
-        handler.deleteNode(uuid);
-    }
-
-    /**
-        for (Iterator it = removedNodes.iterator(); it.hasNext();) {
-            try {
-                deleteNode((String) it.next());
-            } catch (IOException e) {
-                log.error("Error deleting node from index.", e);
+        Iterator addedStates = new AbstractIteratorDecorator(addedNodes.iterator()) {
+            public Object next() {
+                ItemState item = null;
+                String uuid = (String) super.next();
+                try {
+                    item = itemMgr.getItemState(new NodeId(uuid));
+                } catch (ItemStateException e) {
+                    log.error("Unable to index node " + uuid + ": does not exist");
+                }
+                return item;
+        };
+        try {
+            handler.updateNodes(removedNodes.iterator(), addedStates);
+        } catch (RepositoryException e) {
+            log.error("Error indexing node.", e);
+        } catch (IOException e) {
+            log.error("Error indexing node.", e);
-        for (Iterator it = addedNodes.iterator(); it.hasNext();) {
-            try {
-                addNode((NodeState) itemMgr.getItemState(new NodeId((String) it.next())));
-            } catch (ItemStateException e) {
-                log.error("Error indexing node.", e);
-            } catch (RepositoryException e) {
-                log.error("Error indexing node.", e);
-            } catch (IOException e) {
-                log.error("Error indexing node.", e);
-            }
-        }
+

INS26 INS26 INS40 INS40 INS60 MOV54 MOV43 INS59 INS42 INS14 INS43 MOV32 INS1 UPD42 MOV42 INS31 UPD42 INS42 MOV32 UPD42 MOV42 INS83 INS43 INS42 INS8 INS42 INS60 INS60 MOV54 INS41 INS43 INS59 MOV43 INS59 INS42 INS42 UPD42 MOV42 INS33 INS42 INS11 MOV44 MOV43 INS48 INS7 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS14 INS27 MOV43 INS42 INS45 INS42 INS45 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL32 DEL11 DEL32 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL14 DEL32 DEL11 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL43 DEL59 DEL58 DEL42 DEL42 DEL32 DEL8 DEL24 DEL42 DEL59 DEL58 DEL42 DEL42 DEL32 DEL8 DEL24