Implemented proper support for IS [NOT] NULL queries.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126276 13f79535-47bb-0310-9956-ffa450edef68

-            int propIdx = sb.length();
-            sb.append("@" + ISO9075.encode(node.getProperty()).toJCRName(resolver));
+            //int propIdx = sb.length();
+            String propName = "@" + ISO9075.encode(node.getProperty()).toJCRName(resolver);
-                sb.append(" = ");
+                sb.append(propName).append(" = ");
+                appendValue(node, sb);
-                sb.append(" >= ");
+                sb.append(propName).append(" >= ");
+                appendValue(node, sb);
-                sb.append(" > ");
+                sb.append(propName).append(" > ");
+                appendValue(node, sb);
-                sb.append(" <= ");
+                sb.append(propName).append(" <= ");
+                appendValue(node, sb);
-                sb.insert(propIdx, XPathQueryBuilder.JCRFN_LIKE.toJCRName(resolver) + "(");
-                sb.append(",");
+                sb.append(XPathQueryBuilder.JCRFN_LIKE.toJCRName(resolver));
+                sb.append("(").append(propName).append(", ");
+                appendValue(node, sb);
+                sb.append(")");
-                sb.append(" < ");
+                sb.append(propName).append(" < ");
+                appendValue(node, sb);
-                sb.append(" != ");
+                sb.append(propName).append(" != ");
+                appendValue(node, sb);
+            } else if (node.getOperation() == OPERATION_NULL) {
+                sb.append(XPathQueryBuilder.FN_NOT.toJCRName(resolver));
+                sb.append("(").append(propName).append(")");
+            } else if (node.getOperation() == OPERATION_NOT_NULL) {
+                sb.append(propName);
-
-            if (node.getType() == TYPE_LONG) {
-                sb.append(node.getLongValue());
-            } else if (node.getType() == TYPE_DOUBLE) {
-                sb.append(node.getDoubleValue());
-            } else if (node.getType() == TYPE_STRING) {
-                sb.append("'").append(node.getStringValue().replaceAll("'", "''")).append("'");
-            } else if (node.getType() == TYPE_DATE || node.getType() == TYPE_TIMESTAMP) {
-                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
-                cal.setTime(node.getDateValue());
-                sb.append(XPathQueryBuilder.XS_DATETIME.toJCRName(resolver));
-                sb.append("('").append(ISO8601.format(cal)).append("')");
-            } else {
-                exceptions.add(new InvalidQueryException("Invalid type: " + node.getType()));
-            }
-
-            if (node.getOperation() == OPERATION_LIKE) {
-                sb.append(")");
-            }
+
+    //----------------------------< internal >----------------------------------
+
+    private void appendValue(RelationQueryNode node, StringBuffer b)
+            throws NoPrefixDeclaredException {
+        if (node.getType() == TYPE_LONG) {
+            b.append(node.getLongValue());
+        } else if (node.getType() == TYPE_DOUBLE) {
+            b.append(node.getDoubleValue());
+        } else if (node.getType() == TYPE_STRING) {
+            b.append("'").append(node.getStringValue().replaceAll("'", "''")).append("'");
+        } else if (node.getType() == TYPE_DATE || node.getType() == TYPE_TIMESTAMP) {
+            Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
+            cal.setTime(node.getDateValue());
+            b.append(XPathQueryBuilder.XS_DATETIME.toJCRName(resolver));
+            b.append("('").append(ISO8601.format(cal)).append("')");
+        } else {
+            exceptions.add(new InvalidQueryException("Invalid type: " + node.getType()));
+        }
+
+    }

MOV31 INS31 INS83 MOV43 INS42 INS44 MOV44 INS8 UPD83 INS39 UPD42 INS44 INS43 MOV8 INS43 INS42 MOV60 INS54 MOV41 INS43 INS42 INS42 INS42 INS8 MOV12 INS42 INS60 INS25 INS43 INS59 MOV27 INS8 INS25 INS42 INS42 MOV27 INS21 INS21 MOV27 INS8 INS25 UPD42 INS32 INS32 INS21 INS21 MOV27 INS8 INS25 UPD42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS21 INS21 MOV27 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS21 INS21 MOV27 INS8 INS25 UPD42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS32 MOV21 INS21 INS21 MOV21 MOV27 INS8 INS25 UPD42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS21 INS21 MOV27 INS8 INS25 UPD42 INS42 INS42 INS42 UPD42 MOV32 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS27 INS8 MOV25 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS21 INS21 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 DEL42 DEL45 DEL27 DEL45 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL42 DEL42 DEL32 DEL42 DEL27 DEL8 DEL25 DEL54 DEL8