- Removed JCRQL implementation
- Added proper QName support to search
- redesigned parsing and formating of queries (better separation of abstract query tree and concrete syntax)
- Some improvements in SQL: colon is now supported in identifier without having to use double quotes, LIKE now supports escaping

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@125778 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.search.jcrql.JCRQLQueryBuilder;
-        if (Query.JCRQL.equals(language)) {
-            return JCRQLQueryBuilder.createQuery(statement);
-        } else if (Query.XPATH_DOCUMENT_VIEW.equals(language)) {
+        if (Query.XPATH_DOCUMENT_VIEW.equals(language)) {
-            throw new InvalidQueryException("unknown language");
+            throw new InvalidQueryException("Unsupported language: " + language);
+        }
+    }
+
+    /**
+     * Creates a String representation of the QueryNode tree argument
+     * <code>root</code>. The argument <code>language</code> specifies the
+     * syntax.
+     * See also: {@link javax.jcr.query.QueryManager#getSupportedQueryLanguages()}.
+     *
+     * @param root the query node tree.
+     * @param language one of the languages returned by:
+     *   {@link javax.jcr.query.QueryManager#getSupportedQueryLanguages()}.
+     * @param resolver to resolve QNames.
+     *
+     * @return a String representation of the query node tree.
+     *
+     * @throws InvalidQueryException if the query node tree cannot be converted
+     * into a String representation of the given language. This might be due to
+     * syntax restrictions of the given language. This exception is also thrown
+     * if <code>language</code> is not one of the supported query languages
+     * returned by the {@link javax.jcr.query.QueryManager}.
+     */
+    public static String toString(QueryRootNode root,
+                                  String language,
+                                  NamespaceResolver resolver)
+            throws InvalidQueryException {
+
+        if (Query.XPATH_DOCUMENT_VIEW.equals(language)) {
+            return XPathQueryBuilder.toString(root, resolver);
+        } else if ("sql".equals(language)) {
+            return JCRSQLQueryBuilder.toString(root, resolver);
+        } else {
+            throw new InvalidQueryException("Unsupported language: " + language);

INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 MOV25 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS8 INS25 INS68 INS68 INS40 INS40 INS42 INS42 INS41 INS32 INS8 INS8 INS40 INS42 INS40 INS42 INS32 INS45 INS42 INS42 INS41 INS53 INS42 INS42 INS42 INS42 INS32 INS14 INS27 INS42 INS42 INS42 INS42 INS43 INS27 INS45 INS42 INS42 INS45 INS42 DEL40 DEL26 DEL45 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25