JCR-2790: jcr:like on node name

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1030038 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.lucene.search.BooleanClause;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.Query;
+import org.apache.lucene.search.*;
+     * Name constant for fn:name()
+     */
+    private static final Name FN_NAME = NameFactoryImpl.getInstance().create(SearchManager.NS_FN_URI, "name()");
+
+    /**
-        if (propertyName.getNamespaceURI().equals(SearchManager.NS_FN_URI)
-                && propertyName.getLocalName().equals("name()")) {
+        if (propertyName.equals(FN_NAME)) {
-            if (node.getOperation() != QueryConstants.OPERATION_EQ_VALUE
-                    && node.getOperation() != QueryConstants.OPERATION_EQ_GENERAL) {
-                exceptions.add(new InvalidQueryException("Name function can "
-                        + "only be used in conjunction with an equals operator"));
-                return data;
-            }
-            // check if string literal is a valid XML Name
-            if (XMLChar.isValidName(node.getStringValue())) {
-                // parse string literal as JCR Name
-                try {
-                    Name n = session.getQName(ISO9075.decode(node.getStringValue()));
-                    query = new NameQuery(n, indexFormatVersion, nsMappings);
-                } catch (NameException e) {
-                    exceptions.add(e);
-                    return data;
-                } catch (NamespaceException e) {
-                    exceptions.add(e);
-                    return data;
+            if (node.getOperation() == QueryConstants.OPERATION_EQ_VALUE
+                    || node.getOperation() == QueryConstants.OPERATION_EQ_GENERAL) {
+                // check if string literal is a valid XML Name
+                if (XMLChar.isValidName(node.getStringValue())) {
+                    // parse string literal as JCR Name
+                    try {
+                        Name n = session.getQName(ISO9075.decode(node.getStringValue()));
+                        query = new NameQuery(n, indexFormatVersion, nsMappings);
+                    } catch (NameException e) {
+                        exceptions.add(e);
+                        return data;
+                    } catch (NamespaceException e) {
+                        exceptions.add(e);
+                        return data;
+                    }
+                } else {
+                    // will never match -> create dummy query
+                    query = new BooleanQuery();
+                }
+            } else if (node.getOperation() == QueryConstants.OPERATION_LIKE) {
+                // the like operation always has one string value.
+                // no coercing, see above
+                if (stringValues[0].equals("%")) {
+                    query = new org.apache.lucene.search.MatchAllDocsQuery();
+                } else {
+                    query = new WildcardNameQuery(stringValues[0], 
+                            transform[0], session, nsMappings);
-                // will never match -> create dummy query
-                query = new BooleanQuery();
+                exceptions.add(new InvalidQueryException("Name function can "
+                        + "only be used in conjunction with the following operators: equals, like"));
+                return data;

MOV26 UPD40 UPD40 INS23 INS29 INS83 INS83 INS83 INS43 INS59 INS65 INS42 INS42 INS32 INS66 INS32 INS42 INS40 INS45 INS32 INS42 INS42 MOV42 MOV42 INS42 INS25 UPD27 MOV27 MOV27 INS8 INS25 UPD27 UPD27 MOV25 INS27 INS8 MOV8 UPD40 UPD40 INS32 INS40 INS25 INS42 INS42 INS32 INS8 INS8 INS2 INS42 INS45 INS21 INS21 INS42 INS34 INS7 INS7 INS42 INS14 INS42 INS14 UPD45 INS43 INS43 INS2 INS2 INS42 INS42 INS40 INS42 INS42 INS34 INS42 INS34 DEL40 DEL26 DEL42 DEL32 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL27 DEL25