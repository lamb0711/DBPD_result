JCR-2018 Jcr-Remoting: PathNotFoundException if item name ends with .json

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@752480 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.DavResourceFactory;
+import org.apache.jackrabbit.webdav.observation.SubscriptionManager;
+import org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl;
+import javax.jcr.PathNotFoundException;
+
+    public DavResourceFactory getResourceFactory() {
+        return new ResourceFactoryImpl(txMgr, subscriptionMgr);
+    }
+
-                    
+
-                    int depth = ((WrappingLocator) davResource.getLocator()).depth;
+                    int depth = ((WrappingLocator) davResource.getLocator()).getDepth();
-                return davResource.exists() && ((WrappingLocator) locator).isJson;
+                return davResource.exists() && (locator instanceof WrappingLocator)
+                        && ((WrappingLocator) locator).isJsonRequest;
-     * TODO: TOBEFIXED will not behave properly if resource path (i.e. item name)
-     * TODO            ends with .json extension and/or contains a depth-selector pattern.
+     * Locator factory that specially deals with hrefs having a .json extension.
-        public DavResourceLocator createResourceLocator(String string, String string1) {
-            return new WrappingLocator(super.createResourceLocator(string, string1), isJson(string1), getDepth(string1));
-        }
-
-        public DavResourceLocator createResourceLocator(String string, String string1, String string2) {
-            return super.createResourceLocator(string, string1, string2);
-        }
-
-        public DavResourceLocator createResourceLocator(String string, String string1, String string2, boolean b) {
-            return super.createResourceLocator(string, string1, string2, b);
-        }
-
-        protected String getRepositoryPath(String resourcePath, String wspPath) {
-            if (resourcePath == null) {
-                return null;
+        public DavResourceLocator createResourceLocator(String prefix, String href) {
+            DavResourceLocator loc = super.createResourceLocator(prefix, href);
+            if (endsWithJson(href)) {
+                loc = new WrappingLocator(super.createResourceLocator(prefix, href));
-            String rp = resourcePath;
-            if (isJson(rp)) {
-                rp = resourcePath.substring(0, resourcePath.lastIndexOf('.'));
-                int pos = rp.lastIndexOf(".");
-                if (pos > -1) {
-                    String depthStr = rp.substring(pos + 1);
-                    try {
-                        Integer.parseInt(depthStr);
-                        rp = rp.substring(0, pos);
-                    } catch (NumberFormatException e) {
-                        // ignore return rp
-                    }
-                }
-            }
-            return super.getRepositoryPath(rp, wspPath);
+            return loc;
-        private static boolean isJson(String s) {
+        public DavResourceLocator createResourceLocator(String prefix, String workspacePath, String path, boolean isResourcePath) {
+            DavResourceLocator loc = super.createResourceLocator(prefix, workspacePath, path, isResourcePath);
+            if (isResourcePath && endsWithJson(path)) {
+                loc = new WrappingLocator(loc);
+            }
+            return loc;
+        }
+
+        private static boolean endsWithJson(String s) {
-
-        private static int getDepth(String s) {
-            int depth = Integer.MIN_VALUE;
-            if (isJson(s)) {
-                String tmp = s.substring(0, s.lastIndexOf('.'));
-                int pos = tmp.lastIndexOf(".");
-                if (pos > -1) {
-                    String depthStr = tmp.substring(pos + 1);
-                    try {
-                        depth = Integer.parseInt(depthStr);
-                    } catch (NumberFormatException e) {
-                        // missing depth
-                    }
-                }
-            }
-            return depth;
-        }
+    /**
+     * Resource locator that removes trailing .json extensions and depth
+     * selector that do not form part of the repository path.
+     * As the locator and it's factory do not have access to a JCR session
+     * the <code>extraJson</code> flag may be reset later on.
+     *
+     * @see ResourceFactoryImpl#getItem(org.apache.jackrabbit.webdav.jcr.JcrDavSession, org.apache.jackrabbit.webdav.DavResourceLocator)  
+     */
-        private final boolean isJson;
-        private final int depth;
+        private boolean isJsonRequest = true;
+        private int depth = Integer.MIN_VALUE;
+        private String repositoryPath;
-        private WrappingLocator(DavResourceLocator loc, boolean isJson, int depth) {
+        private WrappingLocator(DavResourceLocator loc) {
-            this.isJson = isJson;
-            this.depth = depth;
+
+        private void extract() {
+            String rp = loc.getRepositoryPath();
+            rp = rp.substring(0, rp.lastIndexOf('.'));
+            int pos = rp.lastIndexOf(".");
+            if (pos > -1) {
+                String depthStr = rp.substring(pos + 1);
+                try {
+                    depth = Integer.parseInt(depthStr);
+                    rp = rp.substring(0, pos);
+                } catch (NumberFormatException e) {
+                    // apparently no depth-info -> ignore
+                }
+            }
+            repositoryPath = rp;
+        }
+
+        private int getDepth() {
+            if (isJsonRequest) {
+                if (repositoryPath == null) {
+                    extract();
+                }
+                return depth;
+            } else {
+                return Integer.MIN_VALUE;
+            }
+        }
+
-            return loc.getRepositoryPath();
+            if (isJsonRequest) {
+                if (repositoryPath == null) {
+                    extract();
+                }
+                return repositoryPath;
+            } else {
+                return loc.getRepositoryPath();
+            }
+        }
+    }
+
+    /**
+     * Resource factory used to make sure that the .json extension was properly
+     * interpreted.
+     */
+    private static class ResourceFactoryImpl extends org.apache.jackrabbit.webdav.jcr.DavResourceFactoryImpl {
+
+        /**
+         * Create a new <code>DavResourceFactoryImpl</code>.
+         *
+         * @param txMgr
+         * @param subsMgr
+         */
+        public ResourceFactoryImpl(TxLockManagerImpl txMgr, SubscriptionManager subsMgr) {
+            super(txMgr, subsMgr);
+        }
+
+        protected Item getItem(JcrDavSession sessionImpl, DavResourceLocator locator) throws PathNotFoundException, RepositoryException {
+            if (locator instanceof WrappingLocator && ((WrappingLocator)locator).isJsonRequest) {
+                // check if the .json extension has been correctly interpreted.
+                Session s = sessionImpl.getRepositorySession();
+                if (s.itemExists(((WrappingLocator)locator).loc.getRepositoryPath())) {
+                    // an item exists with the original calculated repo-path
+                    // -> assume that the repository item path ends with .json
+                    // or .depth.json. i.e. .json wasn't an extra extension
+                    // appended to request the json-serialization of the node.
+                    // -> change the flag in the WrappingLocator correspondingly.
+                    ((WrappingLocator) locator).isJsonRequest = false;
+                }
+            }
+            return super.getItem(sessionImpl, locator);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS55 INS55 INS83 INS43 INS42 INS8 MOV29 MOV83 MOV83 MOV42 MOV43 MOV31 MOV31 MOV31 MOV31 INS29 INS23 INS23 MOV31 INS31 INS29 INS83 INS83 INS42 INS43 MOV31 MOV31 INS42 INS41 MOV43 MOV44 MOV44 INS8 MOV43 MOV44 MOV44 MOV44 INS44 INS8 UPD42 INS65 INS65 MOV83 INS39 MOV59 UPD83 MOV83 MOV43 INS59 UPD83 INS39 UPD42 MOV8 INS83 INS39 INS42 INS8 INS8 INS65 INS40 INS29 UPD42 UPD83 INS43 UPD42 INS44 INS43 INS43 INS8 INS14 UPD66 UPD42 UPD42 INS60 INS25 INS41 UPD42 UPD42 UPD42 INS39 INS42 INS60 INS25 INS41 INS66 INS66 INS66 INS66 INS68 INS66 UPD42 INS9 INS42 INS60 INS21 INS25 INS25 INS66 INS66 INS65 INS65 INS65 UPD43 UPD42 INS43 INS42 INS46 INS42 UPD43 UPD42 INS43 INS42 UPD42 MOV42 INS42 INS25 INS41 INS43 INS42 INS42 MOV43 INS59 INS32 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS69 INS69 MOV43 INS59 INS7 INS42 INS8 INS8 INS42 INS8 MOV8 INS66 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS27 INS8 INS48 INS42 INS36 INS42 INS48 UPD42 MOV42 UPD42 MOV42 INS21 UPD42 MOV42 INS42 INS48 INS42 INS32 INS21 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS25 MOV41 INS41 INS25 INS41 INS62 INS22 MOV60 INS25 INS42 INS42 INS42 INS62 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS7 INS40 INS40 INS42 INS42 UPD42 INS27 INS8 INS40 INS27 INS8 INS42 INS42 INS43 INS36 INS42 INS43 INS32 INS8 INS42 INS43 INS42 INS14 INS42 INS14 UPD42 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS11 INS42 UPD42 INS42 INS42 INS32 MOV21 INS42 MOV43 INS48 INS43 INS42 INS7 MOV43 INS32 INS32 INS43 INS42 UPD42 UPD42 INS22 INS42 INS42 INS42 INS42 INS42 MOV42 MOV32 INS42 INS42 INS42 INS36 INS42 INS22 INS9 INS32 MOV42 MOV42 MOV42 INS11 INS36 INS42 MOV36 INS42 INS43 INS42 INS11 UPD42 MOV42 INS43 INS42 INS42 DEL42 DEL22 DEL66 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL48 DEL32 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL43 DEL42 DEL44 DEL48 DEL41 DEL8 DEL55 DEL83 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL25 DEL42 DEL42 DEL42 DEL48 DEL41 DEL8 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL48 DEL41 DEL83 DEL39 DEL39 DEL45 DEL39 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL34 DEL42 DEL42 DEL13 DEL32 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL59 DEL60 DEL8 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8