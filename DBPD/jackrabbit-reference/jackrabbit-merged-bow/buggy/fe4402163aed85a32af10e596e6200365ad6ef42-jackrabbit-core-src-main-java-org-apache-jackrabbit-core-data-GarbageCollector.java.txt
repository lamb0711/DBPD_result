JCR-1865 Add the Data Store to the Jackrabbit API

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@815340 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.management.DataStoreGarbageCollector;
+import org.apache.jackrabbit.api.management.MarkEventListener;
-import java.io.IOException;
- * GarbageCollector gc = ((SessionImpl)session).createDataStoreGarbageCollector();
- * gc.scan();
- * gc.stopScan();
- * gc.deleteUnused();
+ * JackrabbitRepositoryFactory jf = (JackrabbitRepositoryFactory) factory;
+ * RepositoryManager m = factory.getRepositoryManager((JackrabbitRepository) rep);
+ * GarbageCollector gc = m.createDataStoreGarbageCollector();
+ * try {
+ *     gc.mark();
+ *     gc.sweep();
+ * } finally {
+ *     gc.close();
+ * }
-public class GarbageCollector {
+public class GarbageCollector implements DataStoreGarbageCollector {
-    private ScanEventListener callback;
+    private MarkEventListener callback;
-    private int sleepBetweenNodes;
+    private long sleepBetweenNodes;
-    private final SessionListener sessionListener;
+    private SessionListener sessionListener;
-    // TODO It should be possible to stop and restart a garbage collection scan.
-
-        // Auto-close if the main session logs out
-        this.sessionListener = new SessionListener() {
-            public void loggedOut(SessionImpl session) {
-            }
-            public void loggingOut(SessionImpl session) {
-                close();
-            }
-        };
-        session.addListener(sessionListener);
+        if (session != null) {
+            // Auto-close if the main session logs out
+            this.sessionListener = new SessionListener() {
+                public void loggedOut(SessionImpl session) {
+                }
+                public void loggingOut(SessionImpl session) {
+                    close();
+                }
+            };
+            session.addListener(sessionListener);
+        }
-    /**
-     * Set the delay between scanning items.
-     * The main scan loop sleeps this many milliseconds after
-     * scanning a node. The default is 0, meaning the scan should run at full speed.
-     *
-     * @param millis the number of milliseconds to sleep
-     */
-    public void setSleepBetweenNodes(int millis) {
+    public void setSleepBetweenNodes(long millis) {
+    public long getSleepBetweenNodes() {
+        return sleepBetweenNodes;
+    }
+
-     * Set the event listener. If set, the event listener will be called
-     * for each item that is scanned. This mechanism can be used
-     * to display the progress.
-     *
-     * @param callback if set, this is called while scanning
+     * @deprecated use setMarkEventListener().
+        setMarkEventListener(callback);
+    }
+
+    public void setMarkEventListener(MarkEventListener callback) {
-     * Scan the repository. The garbage collector will iterate over all nodes in the repository
-     * and update the last modified date. If all persistence managers implement the
-     * IterablePersistenceManager interface, this mechanism will be used; if not, the garbage
-     * collector will scan the repository using the JCR API starting from the root node.
-     *
-     * @throws RepositoryException
-     * @throws IllegalStateException
-     * @throws IOException
-     * @throws ItemStateException
+     * @deprecated use mark().
-    public void scan() throws RepositoryException,
-            IllegalStateException, IOException, ItemStateException {
+    public void scan() throws RepositoryException {
+        mark();
+    }
+
+    public void mark() throws RepositoryException {
-            scanPersistenceManagers();
+            try {
+                scanPersistenceManagers();
+            } catch (ItemStateException e) {
+                throw new RepositoryException(e);
+            }
-    private void scanNodes(Session session)
-        throws RepositoryException, IllegalStateException, IOException {
+    private void scanNodes(Session session) throws RepositoryException {
-    /**
-     * Enable or disable using the IterablePersistenceManager interface
-     * to scan the items. This is important for clients that need
-     * the complete Node implementation in the ScanEventListener
-     * callback.
-     *
-     * @param allow true if using the IterablePersistenceManager interface is allowed
-     */
-    /**
-     * Check if using the IterablePersistenceManager interface is allowed.
-     *
-     * @return true if using IterablePersistenceManager is possible.
-     */
-    public boolean getPersistenceManagerScan() {
+    public boolean isPersistenceManagerScan() {
-    private void scanPersistenceManagers() throws ItemStateException, RepositoryException {
+    /**
+     * @deprecated use isPersistenceManagerScan().
+     */
+    public boolean getPersistenceManagerScan() {
+        return isPersistenceManagerScan();
+    }
+
+    private void scanPersistenceManagers() throws RepositoryException, ItemStateException {
-                if (callback != null) {
-                    callback.afterScanning(null);
-                }
-     * The repository was scanned. This method will stop the observation
-     * listener.
+     * Stop the observation listener if any are installed.
-        checkScanStarted();
-        for (Listener listener : listeners) {
-            try {
-                listener.stop();
-            } catch (Exception e) {
-                throw new RepositoryException(e);
+        if (listeners.size() > 0) {
+            for (Listener listener : listeners) {
+                try {
+                    listener.stop();
+                } catch (Exception e) {
+                    throw new RepositoryException(e);
+                }
+            listeners.clear();
-        listeners.clear();
-     * Delete all unused items in the data store.
-     *
-     * @return the number of deleted items
+     * @deprecated use sweep().
-        checkScanStarted();
-        checkScanStopped();
-        return store.deleteAllOlderThan(startScanTimestamp);
+        return sweep();
-    private void checkScanStarted() throws RepositoryException {
+    public int sweep() throws RepositoryException {
-    }
-
-    private void checkScanStopped() throws RepositoryException {
-        if (listeners.size() > 0) {
-            throw new RepositoryException("stopScan must be called first");
-        }
+        stopScan();
+        return store.deleteAllOlderThan(startScanTimestamp);
-    private void recurse(final Node n, int sleep) throws RepositoryException,
-            IllegalStateException, IOException {
+    private void recurse(final Node n, long sleep) throws RepositoryException {
-        if (callback != null) {
-            callback.afterScanning(n);
-        }
-    /**
-     * Cleanup resources used internally by this instance.
-     */
+            try {
+                stopScan();
+            } catch (RepositoryException e) {
+                LOG.warn("An error occured when stopping the event listener", e);
+            }

MOV26 INS26 MOV31 MOV31 UPD40 INS40 INS43 INS31 INS31 INS31 INS31 MOV43 INS42 UPD43 UPD39 INS83 INS39 INS42 INS8 INS8 INS83 INS39 INS42 INS44 MOV8 MOV29 MOV83 INS39 INS42 MOV43 INS8 UPD42 INS83 MOV39 UPD42 MOV42 MOV8 UPD39 UPD42 INS8 INS29 UPD83 UPD39 UPD42 MOV43 UPD83 UPD39 UPD42 INS66 INS66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 INS66 UPD42 INS25 UPD39 INS41 UPD65 INS21 INS43 INS42 UPD65 INS21 UPD65 INS41 INS25 INS65 INS41 INS21 MOV41 UPD39 INS27 INS8 INS42 UPD66 INS32 INS42 UPD66 INS32 INS8 UPD66 INS32 UPD66 MOV27 MOV8 INS66 INS32 INS32 INS42 INS33 MOV21 MOV21 INS42 INS42 INS42 INS54 UPD42 MOV42 UPD42 MOV42 INS42 INS54 MOV8 INS12 INS42 INS8 INS12 INS44 INS8 INS21 INS44 INS8 MOV43 INS42 INS53 INS32 MOV43 INS42 INS21 INS14 INS42 INS32 INS43 INS42 INS42 INS42 INS45 INS42 INS42 DEL83 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL32 DEL21 DEL42 DEL32 DEL21 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL66 DEL42 DEL32 DEL21 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL66 DEL65 DEL29