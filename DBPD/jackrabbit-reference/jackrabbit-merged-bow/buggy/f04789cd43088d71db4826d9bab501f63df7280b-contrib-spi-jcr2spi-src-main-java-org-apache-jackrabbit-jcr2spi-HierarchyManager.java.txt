work in progress

jcr2spi
- HierarchyManager: fixing methods with ItemId param
- HierarchyManagerImpl(s): removing unused methods
- ItemManagerImpl: replacing NodeId as cacheKey
- ItemImpl: remove ISM field

jcr2spi/xml
- ImporterImpl renamed to SessionImporter (used for s-import only)
- xml import: Use UUID String instead of creating NodeIds
- ReferenceChangeTracker: remove usage of spi NodeId

jcr2spi/state
- SessionItemStateManager: ValueFactory not needed since QPropertyDefinition returns qualified values.

jcr2spi/util
- LogUtil: add 'saveGetJCRName' utility method

jcr2spi/locking
- locking: LockManager to use NodeState instead of NodeId
- locking: removing locktoken from Session checks if Session is lock holder

jcr2spi/query
- NodeIteratorImpl: fix commented code, that allows to retrieve
  search results from IdIterator returned from QueryInfo
- minor reformatting, javadoc

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430791 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.spi.ItemId;
-import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.jcr2spi.state.NodeState;
-     * Returns the qualified name of the specified item state.
-     *
-     * @param itemState state of item whose name should be returned
-     * @return
-     * @throws ItemNotFoundException
-     * @throws RepositoryException
-     */
-    QName getQName(ItemState itemState) throws ItemNotFoundException, RepositoryException;
-
-    /**
-     * ancestor. If <code>ancestorId</code> and <code>descendantId</code>
-     * denote the same item 0 is returned. If <code>ancestorId</code> does not
+     * ancestor. If <code>ancestor</code> and <code>descendant</code>
+     * denote the same item 0 is returned. If <code>ancestor</code> does not
-     * @param ancestorId ancestor id
-     * @param descendantId descendant id
-     * @return the relative depth; -1 if <code>ancestorId</code> does not
-     *         denote an ancestor of the item denoted by <code>descendantId</code>
-     *         (or itself).
-     * @throws ItemNotFoundException if either of the specified id's does not
-     *                               denote an existing item.
-     * @throws RepositoryException   if another error occurs
+     * @param ancestor NodeState that must be an ancestor of the descendant
+     * @param descendant ItemState
+     * @return the relative depth; -1 if <code>ancestor</code> does not
+     * denote an ancestor of the item denoted by <code>descendant</code>
+     * (or itself).
+     * @throws ItemNotFoundException If either of the specified id's does not
+     * denote an existing item.
+     * @throws RepositoryException If another error occurs.
-    int getRelativeDepth(NodeId ancestorId, ItemId descendantId)
+    int getRelativeDepth(NodeState ancestor, ItemState descendant)

MOV26 UPD40 MOV44 MOV43 MOV43 UPD43 UPD42 UPD42 UPD66 UPD66 UPD42 UPD66 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL42 DEL66 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43