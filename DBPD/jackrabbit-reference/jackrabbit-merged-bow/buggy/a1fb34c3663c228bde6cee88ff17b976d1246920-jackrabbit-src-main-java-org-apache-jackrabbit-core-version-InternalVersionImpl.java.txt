JCR-414 jcr:successors property not persisted correctly within a transaction

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@398589 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
-     * the list/cache of predecessors (values == InternalVersion)
-     */
-    private ArrayList predecessors = new ArrayList();
-
-    /**
-     * the list of successors (values == InternalVersion)
-     */
-    private ArrayList successors = new ArrayList();
-
-    /**
-        return (InternalVersionImpl[]) successors.toArray(new InternalVersionImpl[successors.size()]);
+        InternalValue[] values = node.getPropertyValues(QName.JCR_SUCCESSORS);
+        if (values != null) {
+            InternalVersion[] versions = new InternalVersion[values.length];
+            for (int i = 0; i < values.length; i++) {
+                NodeId vId = new NodeId((UUID) values[i].internalValue());
+                versions[i] = versionHistory.getVersion(vId);
+            }
+            return versions;
+        } else {
+            return new InternalVersion[0];
+        }
-        return (InternalVersionImpl[]) predecessors.toArray(new InternalVersionImpl[predecessors.size()]);
+        InternalValue[] values = node.getPropertyValues(QName.JCR_PREDECESSORS);
+        if (values != null) {
+            InternalVersion[] versions = new InternalVersion[values.length];
+            for (int i = 0; i < values.length; i++) {
+                NodeId vId = new NodeId((UUID) values[i].internalValue());
+                versions[i] = versionHistory.getVersion(vId);
+            }
+            return versions;
+        } else {
+            return new InternalVersion[0];
+        }
-        for (int i = 0; i < predecessors.size(); i++) {
-            InternalVersion pred = (InternalVersion) predecessors.get(i);
+        InternalVersion[] preds = getPredecessors();
+        for (int i = 0; i < preds.length; i++) {
+            InternalVersion pred = preds[i];
-     * resolves the predecessors property and indirectly adds it self to their
-     * successor list.
-     */
-    void resolvePredecessors() {
-        InternalValue[] values = node.getPropertyValues(QName.JCR_PREDECESSORS);
-        if (values != null) {
-            for (int i = 0; i < values.length; i++) {
-                NodeId vId = new NodeId((UUID) values[i].internalValue());
-                InternalVersionImpl v = (InternalVersionImpl) versionHistory.getVersion(vId);
-                predecessors.add(v);
-                v.addSuccessor(this);
-            }
-        }
-    }
-
-    /**
-        successors.clear();
-        predecessors.clear();
-     * adds a successor version to the internal cache
-     *
-     * @param successor
-     */
-    private void addSuccessor(InternalVersion successor) {
-        successors.add(successor);
-    }
-
-    /**
-     * stores the internal predecessor cache to the persistance node
+     * stores the given successors or predecessors to the persistance node
-    private void storePredecessors() throws RepositoryException {
-        InternalValue[] values = new InternalValue[predecessors.size()];
+    private void storeXCessors(List cessors, QName propname, boolean store)
+            throws RepositoryException {
+        InternalValue[] values = new InternalValue[cessors.size()];
-                    ((InternalVersion) predecessors.get(i)).getId().getUUID());
+                    ((InternalVersion) cessors.get(i)).getId().getUUID());
-        node.setPropertyValues(QName.JCR_PREDECESSORS, PropertyType.STRING, values);
+        node.setPropertyValues(propname, PropertyType.STRING, values);
+        if (store) {
+            node.store();
+        }
-        InternalVersionImpl[] succ = (InternalVersionImpl[]) getSuccessors();
+        InternalVersion[] succ = getSuccessors();
-            succ[i].internalDetachPredecessor(this);
+            ((InternalVersionImpl) succ[i]).internalDetachPredecessor(this, true);
-        InternalVersionImpl[] preds = (InternalVersionImpl[]) getPredecessors();
+        InternalVersion[] preds = getPredecessors();
-            preds[i].internalDetachSuccessor(this);
+            ((InternalVersionImpl) preds[i]).internalDetachSuccessor(this, true);
+     * Attaches this version as successor to all predecessors. assuming that the
+     * predecessors are already set.
+     *
+     * @throws RepositoryException
+     */
+    void internalAttach() throws RepositoryException {
+        InternalVersion[] preds = getPredecessors();
+        for (int i = 0; i < preds.length; i++) {
+            ((InternalVersionImpl) preds[i]).internalAddSuccessor(this, true);
+        }
+    }
+
+    /**
+     * Adds a version to the set of successors.
+     *
+     * @param succ
+     * @param store
+     * @throws RepositoryException
+     */
+    private void internalAddSuccessor(InternalVersionImpl succ, boolean store)
+            throws RepositoryException {
+        List l = new ArrayList(Arrays.asList(getSuccessors()));
+        if (!l.contains(succ)) {
+            l.add(succ);
+            storeXCessors(l, QName.JCR_SUCCESSORS, store);
+        }
+    }
+
+    /**
-    private void internalDetachPredecessor(InternalVersionImpl v) throws RepositoryException {
+    private void internalDetachPredecessor(InternalVersionImpl v, boolean store)
+            throws RepositoryException {
-        for (int i = 0; i < predecessors.size(); i++) {
-            if (predecessors.get(i).equals(v)) {
-                predecessors.remove(i);
-                break;
-            }
-        }
+        List l = new ArrayList(Arrays.asList(getPredecessors()));
+        l.remove(v);
+
-        predecessors.addAll(Arrays.asList(v.getPredecessors()));
-        storePredecessors();
-        node.store();
+        l.addAll(Arrays.asList(v.getPredecessors()));
+        storeXCessors(l, QName.JCR_PREDECESSORS, store);
-    private void internalDetachSuccessor(InternalVersionImpl v) {
+    private void internalDetachSuccessor(InternalVersionImpl v, boolean store)
+            throws RepositoryException {
-        for (int i = 0; i < successors.size(); i++) {
-            if (successors.get(i).equals(v)) {
-                successors.remove(i);
-                break;
-            }
-        }
+        List l = new ArrayList(Arrays.asList(getSuccessors()));
+        l.remove(v);
+
-        successors.addAll(Arrays.asList(v.getSuccessors()));
+        l.addAll(Arrays.asList(v.getSuccessors()));
+        storeXCessors(l, QName.JCR_SUCCESSORS, store);
+
+    /**
+     * Resolves jcr:successor properties that are missing.
+     *
+     * @throws RepositoryException
+     */
+    void legacyResolveSuccessors() throws RepositoryException {
+        InternalValue[] values = node.getPropertyValues(QName.JCR_PREDECESSORS);
+        if (values != null) {
+            for (int i = 0; i < values.length; i++) {
+                NodeId vId = new NodeId((UUID) values[i].internalValue());
+                InternalVersionImpl v = (InternalVersionImpl) versionHistory.getVersion(vId);
+                v.internalAddSuccessor(this, false);
+            }
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof InternalVersionImpl) {
+            InternalVersionImpl v = (InternalVersionImpl) obj;
+            return v.getId().equals(getId());
+        }
+        return false;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public int hashCode() {
+        return getId().hashCode();
+    }

INS26 MOV31 MOV31 MOV31 INS40 INS31 INS31 INS31 MOV29 INS83 MOV5 INS42 INS8 MOV29 MOV5 UPD42 UPD42 INS44 INS44 INS44 INS29 INS39 INS42 INS43 UPD42 INS44 INS44 INS43 INS8 INS44 INS8 INS44 INS43 INS8 UPD42 INS43 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS60 INS25 INS60 INS25 INS60 INS43 INS42 INS43 INS42 INS39 INS42 INS25 INS65 INS65 INS42 INS60 INS24 INS65 INS65 MOV43 INS42 INS39 INS42 UPD42 MOV42 INS60 INS25 INS39 INS42 INS60 MOV21 MOV21 MOV21 INS39 INS42 INS42 INS60 INS21 MOV21 MOV21 INS65 INS42 INS65 INS43 INS42 INS25 INS25 INS41 INS65 INS41 INS5 INS59 INS27 INS8 INS8 INS5 INS59 INS27 INS8 INS8 INS5 INS59 UPD66 INS42 INS42 MOV5 INS42 INS8 UPD5 UPD5 INS66 INS66 INS42 INS5 INS59 MOV58 INS27 MOV37 INS8 UPD66 UPD42 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS32 UPD66 INS42 INS65 INS42 INS27 INS8 INS62 INS8 INS9 INS65 INS32 INS43 INS85 UPD42 MOV42 INS32 INS42 INS33 INS60 INS24 INS41 INS41 UPD43 MOV43 MOV85 INS42 INS32 INS42 INS33 INS60 INS24 INS41 INS41 INS43 INS85 INS42 INS32 INS40 INS42 INS21 INS43 MOV32 UPD43 MOV32 INS43 MOV85 INS42 INS32 INS42 INS40 INS21 INS42 INS42 INS14 INS32 MOV21 INS21 INS42 INS42 INS14 UPD42 UPD42 UPD42 UPD42 INS42 INS40 INS42 INS42 INS14 UPD42 MOV42 INS42 MOV42 UPD42 UPD42 UPD42 INS40 UPD42 INS52 INS42 INS41 INS42 MOV43 INS60 INS41 INS32 INS42 UPD42 MOV42 INS42 INS42 INS40 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS3 UPD42 UPD42 MOV42 INS42 INS40 INS5 INS59 MOV58 INS27 MOV37 INS8 INS42 INS3 INS42 INS42 MOV43 MOV5 INS32 INS42 UPD42 INS42 UPD42 MOV42 INS32 MOV43 INS32 INS42 INS42 INS42 INS32 MOV43 INS32 MOV43 INS32 INS9 MOV43 INS59 INS32 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS5 INS34 INS43 MOV85 INS42 INS3 INS42 INS40 INS60 INS21 INS5 INS34 MOV42 INS2 UPD42 INS42 INS42 INS36 INS9 INS36 INS9 INS36 INS42 INS52 INS9 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS40 INS42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS11 INS32 INS42 INS32 INS42 INS5 INS40 INS42 INS34 INS43 INS59 INS7 INS43 INS85 INS42 INS5 INS40 INS43 INS59 INS7 INS43 INS85 INS42 INS42 INS11 INS11 INS11 INS42 UPD42 MOV42 UPD42 MOV42 MOV43 INS42 INS42 INS42 INS42 INS43 INS85 INS42 UPD42 MOV42 MOV14 INS2 INS32 INS42 INS43 INS85 INS42 INS42 INS14 INS2 INS32 INS42 INS43 MOV2 MOV43 MOV2 MOV43 INS2 UPD42 INS9 INS42 INS43 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS2 INS42 INS42 INS2 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 DEL66 DEL65 DEL29 DEL83 DEL43 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL59 DEL23 DEL5 DEL42 DEL5 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL40 DEL85 DEL5 DEL11 DEL85 DEL5 DEL11 DEL83 DEL42 DEL5 DEL42 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL42 DEL44 DEL8 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL42 DEL32 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL32 DEL10 DEL8 DEL25 DEL8 DEL24 DEL8 DEL66 DEL42 DEL42 DEL42 DEL32 DEL21