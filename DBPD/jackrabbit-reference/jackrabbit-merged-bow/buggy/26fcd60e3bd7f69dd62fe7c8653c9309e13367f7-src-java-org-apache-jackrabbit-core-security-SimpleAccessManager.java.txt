AccessManager implementation configurable in repository.xml

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155930 13f79535-47bb-0310-9956-ffa450edef68

-    protected final Subject subject;
+    protected Subject subject;
-    protected final HierarchyManager hierMgr;
+    protected HierarchyManager hierMgr;
-    protected final boolean system;
-    protected final boolean anonymous;
+    private boolean initialized;
+
+    protected boolean system;
+    protected boolean anonymous;
-     * Constructor
-     *
-     * @param subject
-     * @param hierMgr
+     * Empty constructor
-    public SimpleAccessManager(Subject subject, HierarchyManager hierMgr) {
-        this.subject = subject;
-        this.hierMgr = hierMgr;
-        anonymous = !subject.getPrincipals(AnonymousPrincipal.class).isEmpty();
-        system = !subject.getPrincipals(SystemPrincipal.class).isEmpty();
+    public SimpleAccessManager() {
+        initialized = false;
+        anonymous = false;
+        system = false;
+     * @see AccessManager#init(AMContext)
+     */
+    public void init(AMContext context) throws Exception {
+        if (initialized) {
+            throw new IllegalStateException("already initialized");
+        }
+
+        subject = context.getSubject();
+        hierMgr = context.getHierarchyManager();
+        anonymous = !subject.getPrincipals(AnonymousPrincipal.class).isEmpty();
+        system = !subject.getPrincipals(SystemPrincipal.class).isEmpty();
+
+        initialized = true;
+    }
+
+    /**
+     * @see AccessManager#close
+     */
+    public synchronized void close() throws Exception {
+        if (!initialized) {
+            throw new IllegalStateException("not initialized");
+        }
+
+        initialized = false;
+    }
+
+    /**
+        if (!initialized) {
+            throw new IllegalStateException("not initialized");
+        }
+
-            // anonymous is always denied WRITE premission
-            if ((permissions & WRITE) == WRITE) {
+            // anonymous is always denied WRITE & REMOVE premissions
+            if ((permissions & WRITE) == WRITE ||
+                    (permissions & REMOVE) == REMOVE) {
+        if (!initialized) {
+            throw new IllegalStateException("not initialized");
+        }
+
-            // anonymous is always denied WRITE premission
-            if ((permissions & WRITE) == WRITE) {
+            // anonymous is always denied WRITE & REMOVE premissions
+            if ((permissions & WRITE) == WRITE ||
+                    (permissions & REMOVE) == REMOVE) {

INS23 INS31 INS31 INS83 INS39 INS59 INS29 INS83 INS42 INS8 INS39 UPD42 INS43 INS29 INS83 INS83 INS39 INS42 INS43 INS8 INS42 INS65 INS21 INS21 INS21 UPD65 UPD43 UPD42 UPD42 MOV42 INS25 INS21 INS65 INS42 INS25 INS21 INS25 INS25 INS66 INS7 INS7 INS7 INS68 UPD42 INS42 INS8 INS7 INS67 INS38 INS8 INS7 INS38 INS8 INS38 INS8 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS42 INS69 INS53 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS53 INS42 INS9 INS42 INS53 INS42 INS53 INS43 INS14 INS42 INS42 INS42 INS42 INS14 INS14 INS14 INS42 INS43 INS45 INS43 INS45 INS43 INS45 INS27 INS43 INS45 INS27 INS42 INS42 INS42 MOV27 INS27 INS42 MOV27 INS27 INS36 INS42 INS36 INS42 MOV36 UPD42 MOV42 INS27 INS27 INS42 INS42 INS42 INS42 UPD42 DEL83 DEL83 DEL83 DEL83 DEL66 DEL65 DEL42 DEL42 DEL65 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42