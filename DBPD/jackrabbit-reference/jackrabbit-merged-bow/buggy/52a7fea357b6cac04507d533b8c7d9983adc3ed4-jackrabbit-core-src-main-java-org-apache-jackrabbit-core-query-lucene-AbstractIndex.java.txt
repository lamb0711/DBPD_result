JCR-390: Move text extraction into a background thread

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497067 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
-import javax.jcr.RepositoryException;
+import java.io.StringReader;
+import java.util.Enumeration;
+     * The indexing queue.
+     */
+    private IndexingQueue indexingQueue;
+
+    /**
-     * @param analyzer  the analyzer for text tokenizing.
-     * @param directory the underlying directory.
-     * @param cache     the document number cache if this index should use one;
-     *                  otherwise <code>cache</code> is <code>null</code>.
+     * @param analyzer      the analyzer for text tokenizing.
+     * @param directory     the underlying directory.
+     * @param cache         the document number cache if this index should use
+     *                      one; otherwise <code>cache</code> is
+     *                      <code>null</code>.
+     * @param indexingQueue the indexing queue.
-                  DocNumberCache cache) throws IOException {
+                  DocNumberCache cache,
+                  IndexingQueue indexingQueue) throws IOException {
+        this.indexingQueue = indexingQueue;
-     * Adds a node to this index and invalidates the shared reader.
+     * Adds a document to this index and invalidates the shared reader.
-     * @param nodeIndexer the node indexer of the node to add.
+     * @param doc the document to add.
-    void addNode(NodeIndexer nodeIndexer) throws IOException {
-        try {
-            getIndexWriter().addDocument(nodeIndexer.createDoc());
-        } catch (RepositoryException e) {
-            IOException iex = new IOException(e.getMessage());
-            iex.initCause(e);
-            throw iex;
-        }
+    void addDocument(Document doc) throws IOException {
+        // check if text extractor completed its work
+        doc = getFinishedDocument(doc);
+        getIndexWriter().addDocument(doc);
+    /**
+     * Returns a document that is finished with text extraction and is ready to
+     * be added to the index.
+     *
+     * @param doc the document to check.
+     * @return <code>doc</code> if it is finished already or a stripped down
+     *         copy of <code>doc</code> without text extractors.
+     * @throws IOException if the document cannot be added to the indexing
+     *                     queue.
+     */
+    private Document getFinishedDocument(Document doc) throws IOException {
+        if (!Util.isDocumentReady(doc)) {
+            Document copy = new Document();
+            for (Enumeration fields = doc.fields(); fields.hasMoreElements(); ) {
+                Field f = (Field) fields.nextElement();
+                Field field = null;
+                Field.TermVector tv;
+                if (f.isTermVectorStored()) {
+                    tv = Field.TermVector.YES;
+                } else {
+                    tv = Field.TermVector.NO;
+                }
+                Field.Store stored;
+                if (f.isStored()) {
+                    stored = Field.Store.YES;
+                } else {
+                    stored = Field.Store.NO;
+                }
+                Field.Index indexed;
+                if (!f.isIndexed()) {
+                    indexed = Field.Index.NO;
+                } else if (f.isTokenized()) {
+                    indexed = Field.Index.TOKENIZED;
+                } else {
+                    indexed = Field.Index.UN_TOKENIZED;
+                }
+                if (f.readerValue() != null) {
+                    // replace all readers with empty string reader
+                    field = new Field(f.name(), new StringReader(""), tv);
+                } else if (f.stringValue() != null) {
+                    field = new Field(f.name(), f.stringValue(),
+                            stored, indexed, tv);
+                } else if (f.isBinary()) {
+                    field = new Field(f.name(), f.binaryValue(), stored);
+                }
+                if (field != null) {
+                    copy.add(field);
+                }
+            }
+            // schedule the original document for later indexing
+            Document existing = indexingQueue.addDocument(doc);
+            if (existing != null) {
+                // the queue already contained a pending document for this
+                // node. -> dispose the document
+                Util.disposeDocument(existing);
+            }
+            // use the stripped down copy for now
+            doc = copy;
+        }
+        return doc;
+    }
+

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS44 MOV29 MOV39 UPD42 MOV42 MOV44 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 MOV43 INS8 INS65 INS42 INS42 INS65 INS43 INS42 INS21 UPD43 UPD42 MOV21 INS21 MOV21 INS65 INS65 INS65 INS65 INS42 UPD43 MOV43 UPD42 MOV42 INS25 INS41 INS66 UPD66 UPD66 UPD66 UPD66 INS66 INS42 INS66 INS42 INS7 UPD66 UPD42 UPD66 UPD42 INS7 INS32 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 UPD42 INS38 INS8 INS42 INS22 INS42 INS42 INS32 MOV32 INS42 INS42 INS32 INS60 INS24 MOV60 INS25 INS21 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS59 INS58 INS32 INS8 UPD43 INS27 INS8 INS7 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS60 INS60 INS25 INS60 INS25 INS60 INS25 INS25 INS25 UPD42 UPD42 INS32 INS42 INS33 MOV21 INS42 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS38 INS8 INS25 INS27 INS8 INS25 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS33 INS40 INS42 INS42 INS42 INS21 INS21 INS40 INS42 INS42 INS42 INS21 INS21 INS40 INS42 INS32 INS21 INS32 INS8 INS8 INS32 INS33 INS21 INS27 INS8 INS25 INS42 INS33 INS21 UPD42 UPD42 UPD42 INS43 INS32 INS7 INS7 INS7 INS7 INS42 INS42 INS7 INS42 INS42 INS21 INS21 INS42 INS42 INS7 INS32 INS33 INS21 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS7 INS7 INS42 INS14 INS42 INS42 INS7 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS43 INS32 INS14 INS42 INS42 INS14 INS7 INS42 INS42 INS42 INS43 INS45 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL32 DEL8 DEL44 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL32 DEL14