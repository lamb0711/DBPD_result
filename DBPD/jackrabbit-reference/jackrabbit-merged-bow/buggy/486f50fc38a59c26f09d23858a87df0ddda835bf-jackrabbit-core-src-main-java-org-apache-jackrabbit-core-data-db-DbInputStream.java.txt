JCR-1864 Database Data Store: clean up the code

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@718632 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FilterInputStream;
+import java.io.EOFException;
+import java.io.InputStream;
+import java.sql.ResultSet;
+
+import org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager;
- * This class represents an input stream backed by a database. It allows the stream to be used by
- * keeping the DB resources open until the stream is closed. When the stream is finished or
- * close()d, then the resources are freed.
+ * This class represents an input stream backed by a database. It allows the
+ * stream to be used by keeping the database objects open until the stream is
+ * closed. When the stream is finished or closed, then the database objects are
+ * freed.
-public class DbInputStream extends FilterInputStream {
+public class DbInputStream extends InputStream {
-    protected DbResources resources;
-    protected boolean streamFinished;
-    protected boolean streamClosed;
+    protected boolean endOfStream;
+    protected InputStream in;
+    
+    protected ConnectionRecoveryManager conn;
+    protected ResultSet rs;
+    
-        super(null);
-        streamFinished = false;
-        streamClosed = true;
-    private void getStream() throws IOException {
-        try {
-            resources = store.getDatabaseResources(identifier);
-            in = resources.getInputStream();
-            streamClosed = false;
-        } catch (DataStoreException e) {
-            IOException e2 = new IOException(e.getMessage());
-            e2.initCause(e);
-            throw e2;
+    /**
+     * Open the stream if required.
+     * 
+     * @throws IOException
+     */
+    protected void openStream() throws IOException {
+        if (endOfStream) {
+            throw new EOFException();
+        }
+        if (in == null) {
+            try {
+                in = store.openStream(this, identifier);
+            } catch (DataStoreException e) {
+                IOException e2 = new IOException(e.getMessage());
+                e2.initCause(e);
+                throw e2;
+            }
-     * When the stream is consumed, the database resources held by the instance are closed.
+     * When the stream is consumed, the database objects held by the instance are closed.
-        if (streamFinished) {
+        if (endOfStream) {
-        if (in == null) {
-            getStream();
-        }
+        openStream();
-            streamFinished = true;
+            endOfStream = true;
-     * When the stream is consumed, the database resources held by the instance are closed.
+     * When the stream is consumed, the database objects held by the instance are closed.
-     * When the stream is consumed, the database resources held by the instance are closed.
+     * When the stream is consumed, the database objects held by the instance are closed.
-        if (streamFinished) {
+        if (endOfStream) {
-        if (in == null) {
-            getStream();
-        }
+        openStream();
-            streamFinished = true;
+            endOfStream = true;
-     * When the stream is consumed, the database resources held by the instance are closed.
+     * When the stream is consumed, the database objects held by the instance are closed.
-        if (!streamClosed) {
-            streamClosed = true;
-            // It may be null (see constructor)
-            if (in != null) {
-                in.close();
-                super.close();
+        if (in != null) {
+            in.close();
+            in = null;
+            // some additional database objects 
+            // may need to be closed
+            if (rs != null) {
+                DatabaseHelper.closeSilently(rs);
+                rs = null;
-            // resources may be null (if getStream() was not called)
-            if (resources != null) {
-                resources.close();
+            if (conn != null) {
+                try {
+                    store.putBack(conn);
+                } catch (DataStoreException e) {
+                    log.info("Error closing DbResource", e);
+                }
-        if (in == null) {
-            getStream();
-        }
+        if (endOfStream) {
+            return -1;
+        }        
+        openStream();
-        if (in == null) {
-            getStream();
-        }
+        if (endOfStream) {
+            return 0;
+        }        
+        openStream();
-        if (in == null) {
-            try {
-                getStream();
-            } catch (IOException e) {
-                log.info("Error getting underlying stream: ", e);
-            }
+        if (endOfStream) {
+            return;
+        } 
+        try {
+            openStream();
+        } catch (IOException e) {
+            log.info("Error getting underlying stream: ", e);
-        if (in == null) {
-            getStream();
-        }
+        if (endOfStream) {
+            throw new EOFException();
+        }         
+        openStream();
-        if (in == null) {
-            try {
-                getStream();
-            } catch (IOException e) {
-                log.info("Error getting underlying stream: ", e);
-                return false;
-            }
+        if (endOfStream) {
+            return false;
+        }      
+        try {
+            openStream();
+        } catch (IOException e) {
+            log.info("Error getting underlying stream: ", e);
+            return false;
+
+    /**
+     * Set the database connection of this input stream. This object must be
+     * closed once the stream is closed.
+     * 
+     * @param conn the connection
+     */
+    void setConnection(ConnectionRecoveryManager conn) {
+        this.conn = conn;
+    }
+
+    /**
+     * Set the result set of this input stream. This object must be closed once
+     * the stream is closed.
+     * 
+     * @param rs the result set
+     */
+    void setResultSet(ResultSet rs) {
+        this.rs = rs;
+    }
+

MOV26 INS26 INS26 INS26 MOV23 MOV23 INS40 UPD40 INS40 INS40 UPD43 INS23 INS31 INS31 UPD42 INS83 INS39 INS59 UPD43 INS43 INS43 INS29 UPD83 UPD42 INS8 MOV8 MOV8 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS8 UPD66 UPD66 UPD66 INS66 INS42 UPD42 UPD42 INS42 UPD42 INS42 UPD42 INS65 INS65 INS25 INS25 MOV21 MOV21 INS25 MOV21 INS25 MOV21 INS25 MOV21 INS25 MOV21 INS25 MOV41 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS43 INS42 INS21 INS66 INS42 INS42 INS8 MOV27 MOV8 UPD66 UPD42 UPD66 UPD66 UPD42 UPD66 MOV27 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS66 INS66 INS42 INS66 INS42 INS7 INS66 INS66 INS42 INS66 INS42 INS7 INS53 UPD42 UPD42 MOV21 INS41 UPD42 INS41 UPD42 INS41 INS53 UPD42 INS41 INS22 INS42 INS22 INS42 INS14 INS27 INS8 INS38 INS34 INS14 INS9 INS52 INS42 INS52 INS42 INS43 UPD42 UPD42 UPD42 INS33 INS42 INS33 INS21 UPD42 INS54 INS34 UPD42 INS43 UPD42 INS42 INS32 INS7 INS8 INS12 INS42 UPD42 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 UPD42 INS52 INS32 INS43 INS42 MOV21 INS42 INS42 INS42 INS42 UPD42 INS42 INS45 UPD42 DEL39 DEL39 DEL33 DEL46 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL38 DEL9 DEL42 DEL48 DEL8 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL25 DEL8