JCR-1104: JSR 283 support (work in progress)
- length query

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@645417 13f79535-47bb-0310-9956-ffa450edef68

-public class JQOM2LuceneQueryBuilder implements QOMTreeVisitor {
+public class JQOM2LuceneQueryBuilder implements QOMTreeVisitor, QueryObjectModelConstants {
-    public Object visit(LengthImpl node, Object data) {
-        // TODO: implement
-        throw new UnsupportedOperationException("not yet implemented");
+    public Object visit(LengthImpl node, Object data) throws Exception {
+        if (version.getVersion() < IndexFormatVersion.V3.getVersion()) {
+            throw new InvalidQueryException("Length operator is only " +
+                    "available with index version >= 3. Please re-index " +
+                    "repository and execute query again.");
+        }
+        PropertyValueImpl pv = (PropertyValueImpl) node.getPropertyValue();
+        String propName = npResolver.getJCRName(pv.getPropertyQName());
+        if (data instanceof ComparisonImpl) {
+            ComparisonImpl comp = (ComparisonImpl) data;
+            int operator = comp.getOperator();
+            Value v = (Value) ((StaticOperandImpl) comp.getOperand2()).accept(this, data);
+            String namedLength = FieldNames.createNamedLength(propName, v.getLong());
+
+            switch (operator) {
+                case OPERATOR_EQUAL_TO:
+                    return new TermQuery(new Term(FieldNames.PROPERTY_LENGTHS, namedLength));
+                case OPERATOR_GREATER_THAN:
+                    Term lower = new Term(FieldNames.PROPERTY_LENGTHS, namedLength);
+                    Term upper = new Term(FieldNames.PROPERTY_LENGTHS,
+                            FieldNames.createNamedLength(propName, Long.MAX_VALUE));
+                    return new RangeQuery(lower, upper, false);
+                case OPERATOR_GREATER_THAN_OR_EQUAL_TO:
+                    lower = new Term(FieldNames.PROPERTY_LENGTHS, namedLength);
+                    upper = new Term(FieldNames.PROPERTY_LENGTHS,
+                            FieldNames.createNamedLength(propName, Long.MAX_VALUE));
+                    return new RangeQuery(lower, upper, true);
+                case OPERATOR_LESS_THAN:
+                    lower = new Term(FieldNames.PROPERTY_LENGTHS,
+                            FieldNames.createNamedLength(propName, -1));
+                    upper = new Term(FieldNames.PROPERTY_LENGTHS, namedLength);
+                    return new RangeQuery(lower, upper, false);
+                case OPERATOR_LESS_THAN_OR_EQUAL_TO:
+                    lower = new Term(FieldNames.PROPERTY_LENGTHS,
+                            FieldNames.createNamedLength(propName, -1));
+                    upper = new Term(FieldNames.PROPERTY_LENGTHS, namedLength);
+                    return new RangeQuery(lower, upper, true);
+                case OPERATOR_LIKE:
+                    throw new InvalidQueryException("Like operator cannot be used with length operand");
+                case OPERATOR_NOT_EQUAL_TO:
+                    Query all = Util.createMatchAllQuery(propName, version);
+                    BooleanQuery b = new BooleanQuery();
+                    b.add(all, BooleanClause.Occur.SHOULD);
+                    b.add(new TermQuery(new Term(FieldNames.PROPERTY_LENGTHS, namedLength)),
+                            BooleanClause.Occur.MUST_NOT);
+                    return b;
+                default:
+                    throw new InvalidQueryException(
+                            "Unknown operator " + operator);
+            }
+        } else {
+            throw new UnsupportedOperationException("not yet implemented");
+        }
-                case QueryObjectModelConstants.OPERATOR_EQUAL_TO:
+                case OPERATOR_EQUAL_TO:
-                case QueryObjectModelConstants.OPERATOR_GREATER_THAN:
+                case OPERATOR_GREATER_THAN:
-                case QueryObjectModelConstants.OPERATOR_GREATER_THAN_OR_EQUAL_TO:
+                case OPERATOR_GREATER_THAN_OR_EQUAL_TO:
-                case QueryObjectModelConstants.OPERATOR_LESS_THAN:
+                case OPERATOR_LESS_THAN:
-                case QueryObjectModelConstants.OPERATOR_LESS_THAN_OR_EQUAL_TO:
+                case OPERATOR_LESS_THAN_OR_EQUAL_TO:
-                case QueryObjectModelConstants.OPERATOR_LIKE:
+                case OPERATOR_LIKE:
-                case QueryObjectModelConstants.OPERATOR_NOT_EQUAL_TO:
+                case OPERATOR_NOT_EQUAL_TO:
-                case QueryObjectModelConstants.OPERATOR_EQUAL_TO:
+                case OPERATOR_EQUAL_TO:
-                case QueryObjectModelConstants.OPERATOR_GREATER_THAN:
+                case OPERATOR_GREATER_THAN:
-                case QueryObjectModelConstants.OPERATOR_GREATER_THAN_OR_EQUAL_TO:
+                case OPERATOR_GREATER_THAN_OR_EQUAL_TO:
-                case QueryObjectModelConstants.OPERATOR_LESS_THAN:
+                case OPERATOR_LESS_THAN:
-                case QueryObjectModelConstants.OPERATOR_LESS_THAN_OR_EQUAL_TO:
+                case OPERATOR_LESS_THAN_OR_EQUAL_TO:
-                case QueryObjectModelConstants.OPERATOR_LIKE:
+                case OPERATOR_LIKE:
-                        return new MatchAllQuery(propName);
+                        return Util.createMatchAllQuery(propName, version);
-                case QueryObjectModelConstants.OPERATOR_NOT_EQUAL_TO:
-                    MatchAllQuery all = new MatchAllQuery(propName);
+                case OPERATOR_NOT_EQUAL_TO:
+                    Query all = Util.createMatchAllQuery(propName, version);
+        } else if (query.getTerm().field() == FieldNames.PROPERTIES_SET) {
+            return query;

INS43 INS42 INS43 INS8 INS42 INS25 INS60 INS60 INS25 INS27 INS8 INS43 INS59 INS43 INS59 INS62 INS8 MOV8 INS25 INS32 INS32 INS53 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS43 INS60 INS60 INS60 INS60 INS50 INS27 INS8 MOV8 INS42 INS42 INS40 INS42 INS14 INS43 INS32 INS42 INS42 INS32 INS42 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS42 INS49 INS41 INS49 INS60 INS60 INS41 INS49 INS21 INS21 INS41 INS49 INS21 INS21 INS41 INS49 INS21 INS21 INS41 INS49 INS53 INS49 INS60 INS60 INS21 INS21 INS41 INS49 INS53 INS32 INS40 INS41 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS14 INS42 INS43 INS59 INS43 INS59 INS14 INS42 INS7 INS7 INS14 INS42 INS7 INS7 INS14 INS42 INS7 INS7 INS14 INS42 INS14 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 INS32 INS42 INS42 INS42 INS45 INS45 INS45 INS43 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS43 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 INS9 INS42 INS14 INS42 INS14 INS43 INS42 INS42 INS9 INS42 INS14 INS42 INS14 INS43 INS42 INS42 INS9 INS42 INS14 INS42 INS14 INS43 INS42 INS42 INS9 INS43 INS45 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS40 INS43 INS27 UPD42 INS32 INS42 INS42 INS42 INS42 INS36 INS42 INS52 INS42 INS42 INS42 INS42 INS43 INS40 INS42 INS43 INS40 INS42 INS43 INS40 INS32 INS42 INS43 INS40 INS42 INS43 INS40 INS32 INS42 INS43 INS40 INS32 INS43 INS40 INS42 INS42 INS43 INS40 INS32 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS14 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS34 INS34 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL43 DEL42 DEL14 DEL40 DEL42 DEL43 DEL42 DEL14