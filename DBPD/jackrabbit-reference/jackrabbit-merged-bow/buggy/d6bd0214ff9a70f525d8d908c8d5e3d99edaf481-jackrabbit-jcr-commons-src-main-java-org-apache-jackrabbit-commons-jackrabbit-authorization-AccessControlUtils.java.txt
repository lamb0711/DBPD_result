    JCR-3777

Add simple allow/deny/clear convenience methods to AccessControlUtils

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1597717 13f79535-47bb-0310-9956-ffa450edef68

-     * Removes all ACL entries for a principal on a given node.
+     * Removes all ACL entries for a principal at a given absolute path. If the specified
+     * {@code principalName} is {@code null} the policy will be removed altogether.
+     * <p>Modifications only take effect upon {@code Session.save()}.</p>
-     * <p>To activate the ACL change, session.save() must be called.</p>
-     *
-     * @param node node from which to remove ACL entries; underlying session is used to write the changes
-     * @param principalName user or group id whose entries should be removed; use {@code null} to remove entries for all users
-     * @return {@code true} if the node's ACL had entries that were removed, {@code false} if it did not have any entries
+     * @param session The editing session.
+     * @param absPath Absolute path of an existing node from which to remove ACL entries (or the policy)
+     * @param principalName Name of the principal whose entries should be removed;
+     * use {@code null} to clear the policy.
+     * @return {@code true} if the policy has been modified; {@code false} otherwise.
-    public static boolean clear(Node node, String principalName) throws RepositoryException {
-        boolean removeAll = (principalName == null);
-        Principal principal = getPrincipal(node.getSession(), principalName);
-        if (principal == null) {
-            return false;
-        }
-
-        AccessControlManager acm = node.getSession().getAccessControlManager();
-        JackrabbitAccessControlList acl = getAccessControlList(acm, node.getPath());
+    public static boolean clear(Session session, String absPath, String principalName) throws RepositoryException {
+        AccessControlManager acm = session.getAccessControlManager();
+        JackrabbitAccessControlList acl = getAccessControlList(acm, absPath);
-            boolean removedEntries = false;
-            // remove all existing entries for principal
-            for (AccessControlEntry ace : acl.getAccessControlEntries()) {
-                if (removeAll || ace.getPrincipal().equals(principal)) {
-                    removedEntries = true;
-                    acl.removeAccessControlEntry(ace);
+            if (principalName == null) {
+                acm.removePolicy(absPath, acl);
+                return true;
+            } else {
+                Principal principal = getPrincipal(session, principalName);
+                if (principal == null) {
+                    return false;
+                }
+                boolean removedEntries = false;
+                // remove all existing entries for principal
+                for (AccessControlEntry ace : acl.getAccessControlEntries()) {
+                    if (ace.getPrincipal().equals(principal)) {
+                        acl.removeAccessControlEntry(ace);
+                        removedEntries = true;
+                    }
+                }
+                if (removedEntries) {
+                    acm.setPolicy(absPath, acl);
+                    return true;
-            acm.setPolicy(node.getPath(), acl);
-            return removedEntries;
-
-     * Removes all ACL entries for a given node.
+     * Removes all ACL entries for a principal on a given node.
-     * <p>To activate the ACL change, session.save() must be called.</p>
+     * <p>Modification to the policy only take effect upon {@code Session.save()} must be called.</p>
-     * @param node node from which to remove all ACL entries; underlying session is used to write the changes
-     * @return {@code true} if the node's ACL had entries that were removed, {@code false} if it did not have any entries
+     * @param node node from which to remove ACL entries; underlying session is used to write the changes
+     * @param principalName Name of the principal whose entries should be removed; use {@code null} to clear the policy altogether.
+     * @return {@code true} if the node's ACL was modified, {@code false} otherwise.
+     * @throws RepositoryException If an unexpected repository error occurs
+     */
+    public static boolean clear(Node node, String principalName) throws RepositoryException {
+        return clear(node.getSession(), node.getPath(), principalName);
+    }
+
+    /**
+     * Removes the access control list at a given node.
+     * <p>To persist the modifications, {@code Session.save()} must be called.</p>
+     *
+     * @param node node from which to remove the ACL; underlying session is used to write the changes
+     * @return {@code true} if the node's ACL was removed, {@code false} otherwise.
-    private static Principal getPrincipal(Session session, String principalName) throws RepositoryException {
+    /**
+     * Removes the access control list at the specified absolute path.
+     * <p>To persist the modification, session.save() must be called.</p>
+     *
+     * @param session The editing session.
+     * @param absPath An absolute path of a valid node accessible to the editing session from which to remove the ACL.
+     * @return {@code true} if the node's ACL got removed, {@code false} otherwise.
+     * @throws RepositoryException If an unexpected repository error occurs
+     */
+    public static boolean clear(Session session, String absPath) throws RepositoryException {
+        return clear(session, absPath, null);
+    }
+
+    /**
+     * Retrieves the principal with the specified {@code principalName}. Shortcut
+     * for calling {@link PrincipalManager#getPrincipal(String)}.
+     *
+     * @param session The editing session which must be a {@code JackrabbitSession}.
+     * @param principalName The name of the principal.
+     * @return The principal with the specified name or {@code null} if no such principal exists.
+     * @throws RepositoryException If an error occurs or if the session is not a {@code JackrabbitSession}.
+     */
+    public static Principal getPrincipal(Session session, String principalName) throws RepositoryException {
-    private static Principal getEveryonePrincipal(Session session) throws RepositoryException {
+    /**
+     * Shortcut for calling {@link PrincipalManager#getEveryone()}.
+     *
+     * @param session The editing session which must be a {@code JackrabbitSession}.
+     * @return The group principal presenting everyone.
+     * @throws RepositoryException If an error occurs or if the session is not a {@code JackrabbitSession}.
+     */
+    public static Principal getEveryonePrincipal(Session session) throws RepositoryException {

INS31 INS31 INS44 INS44 INS29 INS83 INS83 INS39 INS42 MOV44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 UPD83 INS29 UPD83 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS65 MOV65 INS65 MOV65 MOV65 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 UPD66 INS66 INS65 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS42 INS8 INS66 INS66 INS65 INS66 INS42 INS66 MOV65 INS66 UPD66 UPD66 INS42 MOV32 UPD66 INS66 INS65 UPD66 UPD66 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS42 INS32 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS66 UPD66 MOV66 INS66 INS25 INS66 INS42 MOV32 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS33 INS66 INS68 INS66 INS66 INS66 INS68 INS66 INS66 UPD42 MOV42 UPD42 MOV42 MOV27 INS8 MOV8 UPD42 MOV42 INS42 INS42 INS69 INS42 INS42 INS21 INS41 INS60 MOV25 INS25 INS43 INS32 INS9 MOV43 INS59 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV21 MOV41 INS42 INS42 INS42 MOV32 MOV21 INS9 UPD42 MOV42 DEL39 DEL42 DEL36 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL27 DEL42