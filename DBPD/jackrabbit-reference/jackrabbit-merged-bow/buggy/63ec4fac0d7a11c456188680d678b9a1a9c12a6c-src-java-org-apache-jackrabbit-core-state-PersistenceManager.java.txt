redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.config.WorkspaceConfig;
+import org.apache.jackrabbit.core.QName;
+
+import java.util.Iterator;
-     * @param context
-     * @throws Exception
+     * Initialize this persistent manager.
+     * @param context persistence manager context
+     * @throws Exception if an error occurs
-     * @throws Exception
+     * Close this persistence manager. After having closed a persistence
+     * manager, further operations on this object are treated as illegal
+     * and throw
+     * @throws Exception if an error occurs
-     * @param state
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
+     * Create a new node state instance.
+     * @param uuid          the UUID of the this node
+     * @param nodeTypeName  node type of this node
+     * @param parentUUID    the UUID of the parent node
+     * @return node state instance.
-    public void load(PersistentNodeState state)
+    public NodeState createNew(String uuid, QName nodeTypeName,
+                               String parentUUID);
+
+    /**
+     * Create a new property state instance.
+     * @param name          name of the property
+     * @param parentUUID    the uuid of the parent node
+     * @return property state instance.
+     */
+    public PropertyState createNew(QName name, String parentUUID);
+
+    /**
+     * Load the persistent members of a node state.
+     * @param uuid uuid of the node to load
+     * @return loaded node state
+     * @throws NoSuchItemStateException if the item does not exist
+     * @throws ItemStateException if an error occurs
+     */
+    public NodeState load(String uuid)
-     * @param state
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
+     * Load the persistent members of a property state.
+     * @param name name of the property
+     * @param parentUUID the uuid of the parent node
+     * @return loaded property state
+     * @throws NoSuchItemStateException if the item does not exist
+     * @throws ItemStateException if an error occurs
-    public void load(PersistentPropertyState state)
+    public PropertyState load(QName name, String parentUUID)
-     * @param refs
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
+     * Load the persistent members of a node references object.
+     * @param targetId node target id
+     * @return loaded references object
+     * @throws NoSuchItemStateException if the item does not exist
+     * @throws ItemStateException if an error occurs
-    public void load(NodeReferences refs)
+    public NodeReferences load(NodeId targetId)
-     * @param state
-     * @throws ItemStateException
-     */
-    public void store(PersistentNodeState state) throws ItemStateException;
-
-    /**
-     * @param state
-     * @throws ItemStateException
-     */
-    public void store(PersistentPropertyState state) throws ItemStateException;
-
-    /**
-     * @param refs
-     * @throws ItemStateException
-     */
-    public void store(NodeReferences refs) throws ItemStateException;
-
-    /**
-     * @param state
-     * @throws ItemStateException
-     */
-    public void destroy(PersistentNodeState state) throws ItemStateException;
-
-    /**
-     * @param state
-     * @throws ItemStateException
-     */
-    public void destroy(PersistentPropertyState state) throws ItemStateException;
-
-    /**
-     * @param refs
-     * @throws ItemStateException
-     */
-    public void destroy(NodeReferences refs) throws ItemStateException;
-
-    /**
-     * Determines if there's <code>PersistentItemState</code> data for
-     * the given item.
-     *
+     * Determines if there's <code>ItemState</code> data for the given item.
-     * @see #load(PersistentNodeState)
-     * @see #load(PersistentPropertyState)
-     * @see #load(NodeReferences)
+
+    /**
+     * Save all modified states and node references, atomically.
+     * @param states states that have been modified
+     * @param refsIterator refs to store
+     * @throws ItemStateException if an error occurs
+     */
+    public void store(Iterator states, Iterator refsIterator)
+            throws ItemStateException;
+

INS26 UPD40 INS40 INS31 INS31 INS43 INS42 INS44 INS44 INS43 INS42 INS44 INS43 INS29 MOV83 INS43 INS42 INS44 MOV44 MOV43 MOV43 MOV43 UPD42 MOV43 MOV43 UPD39 INS42 MOV44 MOV43 MOV29 MOV83 MOV39 UPD42 MOV42 INS44 INS44 MOV43 INS65 INS65 INS65 UPD65 UPD65 INS65 INS42 INS43 INS42 UPD43 UPD42 INS43 INS42 INS65 UPD65 UPD65 INS42 UPD43 UPD42 INS43 INS42 INS65 INS65 INS42 UPD43 UPD42 INS65 MOV65 UPD65 MOV65 INS65 UPD65 MOV65 MOV65 UPD42 MOV42 INS43 INS42 UPD43 UPD42 INS65 INS65 INS65 UPD43 UPD42 UPD65 MOV65 UPD65 MOV65 INS65 INS65 INS43 INS42 INS43 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD42 INS66 UPD42 INS66 UPD42 INS66 INS66 INS42 UPD42 INS42 INS66 UPD42 INS66 UPD42 INS66 INS66 UPD42 INS42 INS66 UPD42 INS66 INS66 INS66 INS66 UPD42 INS66 UPD42 INS66 UPD42 INS66 INS66 UPD42 INS66 INS66 UPD42 MOV42 UPD42 INS66 UPD42 INS66 INS66 INS42 INS66 INS66 UPD42 INS66 INS66 INS42 INS66 UPD42 INS66 INS66 UPD42 MOV42 UPD42 MOV42 DEL39 DEL42 DEL42 DEL39 DEL42 DEL39 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL29 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL31 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL31 DEL39 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL43 DEL31 DEL66 DEL66 DEL65 DEL65 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65