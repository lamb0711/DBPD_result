JCR-3115: Versioning fixup leaves persistence in a state where the node can't be made versionable again

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1185691 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Calendar;
-import org.apache.jackrabbit.core.version.InternalVersionManager;
+import org.apache.jackrabbit.core.version.InternalVersionManagerImpl;
+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
+import org.apache.jackrabbit.util.ISO8601;
-    private final InternalVersionManager versionManager;
+    private final ChangeLog vworkspaceChanges;
+
+    private final InternalVersionManagerImpl versionManager;
-            InternalVersionManager versionManager) {
+            InternalVersionManagerImpl versionManager) {
+        this.vworkspaceChanges = new ChangeLog();
-    public void fix() throws RepositoryException {
-        if (workspaceChanges.hasUpdates()) {
-            log.warn("Fixing repository inconsistencies");
+    private void fix(PersistenceManager pm, ChangeLog changes, String store)
+            throws RepositoryException {
+        if (changes.hasUpdates()) {
+            log.warn("Fixing " + store + " inconsistencies");
-                workspace.store(workspaceChanges);
+                pm.store(changes);
-                e.printStackTrace();
-                throw new RepositoryException(
-                        "Failed to fix workspace inconsistencies", e);
+                String message = "Failed to fix " + store + " inconsistencies (aborting)";
+                log.error(message, e);
+                throw new RepositoryException(message, e);
-            log.info("No repository inconsistencies found");
+            log.info("No " + store + "  inconsistencies found");
+    public void fix() throws RepositoryException {
+        fix(workspace, workspaceChanges, "workspace");
+        fix(versionManager.getPersistenceManager(), vworkspaceChanges,
+                "versioning workspace");
+    }
+
+            NodeId vhid = null;
+                vhid = vh.getId();
+                
+            } catch (InconsistentVersioningState e) {
+                log.info(message, e);
+                NodeId nvhid = e.getVersionHistoryNodeId();
+                if (nvhid != null) {
+                    if (vhid != null && !nvhid.equals(vhid)) {
+                        log.error("vhrid returned with InconsistentVersioningState does not match the id we already had: "
+                                + vhid + " vs " + nvhid);
+                    }
+                    vhid = nvhid; 
+                }
+                removeVersionHistoryReferences(node, vhid);
-                removeVersionHistoryReferences(node);
+                removeVersionHistoryReferences(node, vhid);
-    private void removeVersionHistoryReferences(NodeState node) {
+    private void removeVersionHistoryReferences(NodeState node, NodeId vhid) {
+        
+        if (vhid != null) {
+            // attempt to rename the version history, so it doesn't interfere with
+            // a future attempt to put the node under version control again 
+            // (see JCR-3115)
+            
+            log.info("trying to rename version history of node " + node.getId());
+
+            NameFactory nf = NameFactoryImpl.getInstance();
+            
+            // Name of VHR in parent folder is ID of versionable node
+            Name vhrname = nf.create(Name.NS_DEFAULT_URI, node.getId().toString());
+
+            try {
+                NodeState vhrState = versionManager.getPersistenceManager().load(vhid);
+                NodeState vhrParentState = versionManager.getPersistenceManager().load(vhrState.getParentId());
+                
+                if (vhrParentState.hasChildNodeEntry(vhrname)) {
+                    NodeState modifiedParent = (NodeState) vworkspaceChanges.get(vhrState.getParentId());
+                    if (modifiedParent == null) {
+                        modifiedParent = new NodeState(vhrParentState, NodeState.STATUS_EXISTING_MODIFIED, true);
+                    }
+                    
+                    Calendar now = Calendar.getInstance();
+                    String appendme = " (disconnected by RepositoryChecker on "
+                            + ISO8601.format(now) + ")";
+                    modifiedParent.renameChildNodeEntry(vhid,
+                            nf.create(vhrname.getNamespaceURI(), vhrname.getLocalName() + appendme));
+
+                    vworkspaceChanges.modified(modifiedParent);
+                }
+                else {
+                    log.info("child node entry " + vhrname + " for version history not found inside parent folder.");
+                }
+            } catch (Exception ex) {
+                log.error("while trying to rename the version history", ex);
+            }
+        }

INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS43 INS59 UPD43 UPD83 INS44 INS44 INS44 INS43 INS83 INS39 INS42 MOV43 INS8 INS44 INS8 INS42 INS42 UPD42 UPD43 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS43 INS42 MOV60 MOV60 MOV25 MOV21 MOV21 MOV21 MOV21 MOV21 INS25 UPD42 INS7 INS42 INS42 INS42 INS32 INS32 INS42 INS27 INS8 INS22 INS14 UPD42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS60 INS42 INS33 INS21 INS60 INS60 INS54 INS52 INS42 INS43 INS42 INS42 INS43 INS59 INS12 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS27 INS27 INS42 INS42 INS33 INS21 INS44 MOV44 INS8 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS25 INS44 INS8 INS45 INS42 INS45 INS60 INS45 INS42 INS45 INS7 INS43 INS42 INS60 INS25 INS21 INS21 INS45 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS42 INS21 UPD42 UPD42 INS43 INS59 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS27 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS27 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS38 INS21 INS42 INS42 INS43 INS32 INS7 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS32 INS27 INS45 INS42 INS45 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS42 INS40 INS9 INS42 INS42 INS45 INS42 INS45 INS42 INS42 DEL45 DEL45 DEL45 DEL8