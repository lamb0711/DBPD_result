JCR-1138: Add AbstractBundlePersistenceManager.getAllNodeIds

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@577297 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.NodeIdIterator;
+import java.util.NoSuchElementException;
+    protected String bundleSelectAllIdsFromSQL;
+    protected String bundleSelectAllIdsSQL;
+    public synchronized NodeIdIterator getAllNodeIds(NodeId bigger, int maxCount)
+            throws ItemStateException {
+        ResultSet rs = null;
+        try {
+            UUID lowUuid;
+            Object[] keys;
+            String sql;
+            if (bigger == null) {
+                sql = bundleSelectAllIdsSQL;
+                lowUuid = null;
+                keys = new Object[0];
+            } else {
+                sql = bundleSelectAllIdsFromSQL;
+                lowUuid = bigger.getUUID();
+                keys = getKey(lowUuid);
+            }
+            if (maxCount > 0) {
+                // get some more rows, in case the first row is smaller
+                // only required for SM_LONGLONG_KEYS
+                // probability is very low to get get the wrong first key, < 1 : 2^64
+                // see also bundleSelectAllIdsFrom SQL statement
+                maxCount += 10;
+            }
+            Statement stmt = connectionManager.executeStmt(sql, keys, false, maxCount + 10);
+            rs = stmt.getResultSet();
+            ArrayList result = new ArrayList();
+            while ((maxCount == 0 || result.size() < maxCount) && rs.next()) {
+                UUID current;
+                if (getStorageModel() == SM_BINARY_KEYS) {
+                    current = new UUID(rs.getBytes(1));
+                } else {
+                    long high = rs.getLong(1);
+                    long low = rs.getLong(2);
+                    current = new UUID(high, low);
+                }
+                if (lowUuid != null) {
+                    // skip the keys that are smaller or equal (see above, maxCount += 10)
+                    if (current.compareTo(lowUuid) <= 0) {
+                        continue;
+                    }
+                }
+                result.add(current);
+            }        
+            ListNodeIdIterator it = new ListNodeIdIterator(result);
+            return it;
+        } catch (SQLException e) {
+            String msg = "getAllNodeIds failed.";
+            log.error(msg, e);
+            throw new ItemStateException(msg, e);
+        } finally {
+            closeResultSet(rs);
+        }
+    }
+    
+    /**
+     * {@inheritDoc}
+     */
+            
+            bundleSelectAllIdsSQL = "select NODE_ID from " + schemaObjectPrefix + "BUNDLE";
+            bundleSelectAllIdsFromSQL = "select NODE_ID from " + schemaObjectPrefix + "BUNDLE WHERE NODE_ID > ? ORDER BY NODE_ID";
+            
+            bundleSelectAllIdsSQL = "select NODE_ID_HI, NODE_ID_LO from " + schemaObjectPrefix + "BUNDLE";
+            // need to use HI and LO parameters
+            // this is not the exact statement, but not all databases support WHERE (NODE_ID_HI, NODE_ID_LOW) >= (?, ?)
+            bundleSelectAllIdsFromSQL = "select NODE_ID_HI, NODE_ID_LO from " + schemaObjectPrefix + "BUNDLE WHERE (NODE_ID_HI >= ?) AND (? IS NOT NULL) ORDER BY NODE_ID_HI, NODE_ID_LO";
+        
+
+    private class ListNodeIdIterator implements NodeIdIterator {
+        
+        private final ArrayList list;
+        private int pos;
+        
+        ListNodeIdIterator(ArrayList list) {
+            this.list = list;
+        }
+        
+        public NodeId nextNodeId() throws NoSuchElementException {
+            if (!hasNext()) {
+                throw new NoSuchElementException();
+            }
+            return new NodeId((UUID) list.get(pos++));
+        }        
+
+        public boolean hasNext() {
+            return pos < list.size();
+        }
+
+        public Object next() {
+            return nextNodeId();
+        }
+
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+        
+    }
+

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS55 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS42 INS42 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS54 INS42 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS42 INS44 INS8 INS83 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS65 INS42 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS25 INS41 INS41 INS42 INS41 INS53 INS42 INS42 INS33 INS60 INS60 INS60 INS25 INS25 INS60 INS21 INS60 INS61 INS60 INS41 INS44 INS8 INS21 INS21 INS21 INS21 INS21 INS42 INS7 INS38 INS8 INS14 INS27 INS32 INS14 INS43 INS59 INS5 INS59 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS43 INS59 INS7 INS43 INS59 INS27 INS8 INS43 INS59 INS42 INS43 INS42 INS60 INS21 INS53 INS32 INS7 INS7 INS7 INS7 INS22 INS42 INS32 INS53 INS43 INS11 INS42 INS32 INS42 INS43 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS34 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS36 INS32 INS60 INS25 INS25 INS21 INS42 INS42 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS52 INS42 INS42 INS14 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS32 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS43 INS42 INS42 INS42 INS37 INS42 INS42 INS42 INS33 INS42 INS3 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS42 INS34 INS42 INS27 INS27 INS42 INS42 INS32 INS42 INS21 INS60 INS60 INS21 INS42 INS33 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS34 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS7 INS39 INS59 INS39 INS59 INS7 INS27 INS8 INS43 INS85 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS14 INS32 INS34 INS18 INS42 INS43 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42