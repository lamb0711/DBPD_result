JCR-1104: JSR 283 support
- multiple selectors (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633843 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.ItemManager;
+import java.util.ArrayList;
+import java.util.List;
+     * List of valid selector {@link Name}s.
+     */
+    private final List selectorNames = new ArrayList();
+
+    /**
+     * The item manager of the session that executes the query.
+     */
+    private final ItemManager itemMgr;
+
+    /**
-     * @param nodes      a <code>ScoreNodeIterator</code> that contains the nodes of
-     *                   the query result.
-     * @param properties <code>Name</code> of the select properties.
-     * @param resolver   <code>NamespaceResolver</code> of the user
-     */
-    RowIteratorImpl(ScoreNodeIterator nodes, Name[] properties, NamePathResolver resolver) {
-        this(nodes, properties, resolver, null, null);
-    }
-
-    /**
-     * Creates a new <code>RowIteratorImpl</code> that iterates over the result
-     * nodes.
-     *
+     * @param selectorNames   the selector names.
+     * @param itemMgr         the item manager of the session that executes the
+     *                        query.
+                    Name[] selectorNames,
+                    ItemManager itemMgr,
+        this.selectorNames.addAll(Arrays.asList(selectorNames));
+        this.itemMgr = itemMgr;
-        return new RowImpl(nodes.getScore(), nodes.nextNodeImpl());
+        return new RowImpl(nodes.getScore(),
+                nodes.getScoreNodes(), nodes.nextNodeImpl());
+         * The score nodes associated with this row.
+         */
+        private final ScoreNode[] sn;
+
+        /**
+         * @param sn    the score nodes associated with this row.
-        RowImpl(float score, NodeImpl node) {
+        RowImpl(float score, ScoreNode[] sn, NodeImpl node) {
+            this.sn = sn;
+            checkSingleSelector("Use getNode(String) instead.");
-            // TODO: implement
-            throw new UnsupportedOperationException("not yet implemented");
+            ScoreNode s = sn[getSelectorIndex(selectorName)];
+            if (s == null) {
+                // TODO correct?
+                return null;
+            }
+            return (Node) itemMgr.getItem(s.getNodeId());
+            checkSingleSelector("Use getPath(String) instead.");
-            // TODO: implement
-            throw new UnsupportedOperationException("not yet implemented");
+            Node n = getNode(selectorName);
+            if (n != null) {
+                return n.getPath();
+            } else {
+                return null;
+            }
+            checkSingleSelector("Use getScore(String) instead.");
-            // TODO: implement
-            throw new UnsupportedOperationException("not yet implemented");
+            ScoreNode s = sn[getSelectorIndex(selectorName)];
+            if (s == null) {
+                // TODO correct?
+                return Double.NaN;
+            }
+            return s.getScore();
+         * Checks if there is a single selector and otherwise throws a
+         * RepositoryException.
+         *
+         * @param useInstead message telling, which method to use instead.
+         * @throws RepositoryException if there is more than one selector.
+         */
+        private void checkSingleSelector(String useInstead) throws RepositoryException {
+            if (sn.length > 1) {
+                String msg = "More than one selector. " + useInstead;
+                throw new RepositoryException(msg);
+            }
+        }
+
+        /**
+         * Gets the selector index for the given <code>selectorName</code>.
+         *
+         * @param selectorName the selector name.
+         * @return the selector index.
+         * @throws RepositoryException if the selector name is not a valid JCR
+         *                             name or the selector name is not the
+         *                             alias of a selector in this query.
+         */
+        private int getSelectorIndex(String selectorName)
+                throws RepositoryException {
+            int idx = selectorNames.indexOf(resolver.getQName(selectorName));
+            if (idx == -1) {
+                throw new RepositoryException("Unknown selector name: " + selectorName);
+            }
+            return idx;
+        }
+
+        /**

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS44 INS44 INS23 INS31 INS31 INS65 UPD42 MOV42 INS42 INS14 INS65 UPD42 MOV42 INS42 INS65 INS65 INS5 INS42 INS43 INS42 INS21 INS21 INS29 INS83 INS83 INS5 INS59 INS44 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 UPD66 MOV66 INS65 UPD66 MOV66 INS43 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS85 INS42 INS32 INS7 INS65 INS43 INS85 INS42 INS65 INS5 INS42 INS21 INS21 INS60 INS25 INS41 INS21 INS60 INS25 INS21 INS60 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS42 INS25 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS25 INS41 UPD42 MOV42 UPD42 MOV42 INS42 INS22 INS42 INS32 INS22 INS42 INS32 INS66 INS42 INS42 INS66 INS43 INS85 INS7 INS32 INS43 INS59 INS27 INS8 INS11 INS32 INS43 INS59 INS27 INS8 INS8 INS32 INS43 INS59 INS27 INS8 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS39 INS59 INS27 INS8 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS45 UPD42 MOV42 INS42 INS2 INS42 INS33 INS41 INS43 INS32 INS42 INS45 UPD42 MOV42 INS42 INS32 INS42 INS33 INS41 INS41 INS42 INS45 UPD42 MOV42 INS42 INS2 INS42 INS33 INS41 INS42 INS42 INS40 INS34 INS60 INS53 INS42 INS32 INS42 INS38 INS53 INS52 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS32 INS40 INS43 INS59 INS14 INS42 INS42 INS32 INS34 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS43 INS27 INS45 INS42 INS42 INS42 INS45 INS42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL43 DEL85 DEL5 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL33 DEL33 DEL17 DEL8 DEL31 DEL43 DEL45 DEL14 DEL53 DEL43 DEL45 DEL14 DEL53 DEL43 DEL45 DEL14 DEL53