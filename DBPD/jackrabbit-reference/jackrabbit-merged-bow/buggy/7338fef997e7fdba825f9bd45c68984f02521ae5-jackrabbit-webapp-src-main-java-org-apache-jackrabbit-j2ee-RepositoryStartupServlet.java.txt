JCR-697: .war distribution should be configurable, prompting you to setup JNDI with the Repository Home and Config locations.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@495531 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.JackrabbitRepository;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.Enumeration;
+import javax.servlet.ServletContext;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
- * <p>
+ * <p/>
- * <p>
+ * <p/>
- * <p>
+ * <p/>
- *      <code>rmi-port</code> parameter is configured, the repository is not
- *      registered with any RMI registry.
+ * <code>rmi-port</code> parameter is configured, the repository is not
+ * registered with any RMI registry.
- *      host name (or IP address), port number and name to bind to from the
- *      URI. If the URI is not valid, host defaults to <code>0.0.0.0</code>
- *      meaning all interfaces on the local host, port defaults to the RMI
- *      default port (<code>1099</code>) and the name defaults to the value
- *      of the <code>repository-name</code> parameter.
+ * host name (or IP address), port number and name to bind to from the
+ * URI. If the URI is not valid, host defaults to <code>0.0.0.0</code>
+ * meaning all interfaces on the local host, port defaults to the RMI
+ * default port (<code>1099</code>) and the name defaults to the value
+ * of the <code>repository-name</code> parameter.
- *      from the <code>rmi-host</code> parameter, the port from the
- *      <code>rmi-port</code> parameter and the name to bind the repository to
- *      from the <code>repository-name</code> parameter. If the
- *      <code>rmi-host</code> parameter is empty or not configured, the host
- *      defaults to <code>0.0.0.0</code> meaning all interfaces on the local
- *      host. If the <code>rmi-port</code> parameter is empty, not configured,
- *      zero or a negative value, the default port for the RMI registry
- *      (<code>1099</code>) is used.
+ * from the <code>rmi-host</code> parameter, the port from the
+ * <code>rmi-port</code> parameter and the name to bind the repository to
+ * from the <code>repository-name</code> parameter. If the
+ * <code>rmi-host</code> parameter is empty or not configured, the host
+ * defaults to <code>0.0.0.0</code> meaning all interfaces on the local
+ * host. If the <code>rmi-port</code> parameter is empty, not configured,
+ * zero or a negative value, the default port for the RMI registry
+ * (<code>1099</code>) is used.
- * <p>
+ * <p/>
- * <p>
+ * <p/>
- * <p>
+ * <p/>
- *      all.
+ * all.
- *      accessed. Reasons include another application which does not act as an
- *      RMI registry is running on the configured port and thus blocks creation
- *      of a new RMI registry.
+ * accessed. Reasons include another application which does not act as an
+ * RMI registry is running on the configured port and thus blocks creation
+ * of a new RMI registry.
- *      used for the repository.
+ * used for the repository.
+ * <p/>
+ * <b>Note:</b> if a <code>bootstrap-config</code> init parameter is specified the
+ * servlet tries to read the respective resource, either as context resource or
+ * as file. The properties specified in this file override the init params
+ * specified in the <code>web.xml</code>.
+ * <p/>
+ * <p/>
+ * <b>Setup Wizard Functionality</b><br>
+ * When using the first time, the configuraition can miss the relevant
+ * repository parameters in the web.xml. if so, it must contain a
+ * <code>bootstrap-config</code> parameter that referrs to a propertiy file.
+ * This file must exsit for proper working. If not, the repository is not
+ * started.<br>
+ * If the servlet is not configured correctly and accessed via http, it will
+ * provide a simple wizard for the first time configuration. It propmpts for
+ * a new (or existing) repository home and will copy the templates of the
+ * repository.xml and bootstrap.properties to the respective location.
-    /** the default logger */
+    /**
+     * the default logger
+     */
-    /** initial param name for the repository config location */
-    public final static String INIT_PARAM_REPOSITORY_CONFIG = "repository-config";
-
-    /** initial param name for the repository home directory */
-    public final static String INIT_PARAM_REPOSITORY_HOME = "repository-home";
-
-    /** initial param name for the repository name */
-    public final static String INIT_PARAM_REPOSITORY_NAME = "repository-name";
-
-    /** initial param name for the rmi port */
-    public final static String INIT_PARAM_RMI_PORT = "rmi-port";
-
-    /** initial param name for the rmi host */
-    public final static String INIT_PARAM_RMI_HOST = "rmi-host";
-
-    /** initial param name for the rmi uri */
-    public final static String INIT_PARAM_RMI_URI = "rmi-uri";
-
-    /** initial param name for the log4j config properties */
-    public final static String INIT_PARAM_LOG4J_CONFIG = "log4j-config";
-
-    /** the registered repository */
-    private Repository repository;
-
-    /** the name of the repository as configured */
-    private String repositoryName;
-
-    /** the jndi context, created base on configuration */
-    private InitialContext jndiContext;
+    /**
+     * the context attribute name foe 'this' instance.
+     */
+    private final static String CTX_PARAM_THIS = "repository.startup.servet";
-     * The rmi uri, in the form of  '//${rmi-host}:${rmi-port}/${repository-name}'
-     * This field is only set to a non-<code>null</code> value, if registration
-     * of the repository to an RMI registry succeeded in the
-     * {@link #registerRMI()} method.
-     *
-     * @see #registerRMI()
-     * @see #unregisterRMI()
+     * initial param name for the bootstrap config location
-    private String rmiURI;
+    public final static String INIT_PARAM_BOOTSTRAP_CONFIG = "bootstrap-config";
+
+    /**
+     * the registered repository
+     */
+    private Repository repository;
+
+    /**
+     * the jndi context; created based on configuration
+     */
+    private InitialContext jndiContext;
-     * Initializes the servlet
-     * @throws ServletException
+     * the file to the bootstrap config
+     */
+    private File bootstrapConfigFile;
+
+    /**
+     * The bootstrap configuration
+     */
+    private BootstrapConfig config;
+
+    /**
+     * Initializes the servlet.<br>
+     * Please note that only one repository startup servlet may exist per
+     * webapp. it registers itself as context attribute and acts as singleton.
+     *
+     * @throws ServletException if a same servlet is already registered or of
+     * another initialization error occurs.
+        // check if servlet is defined twice
+        if (getServletContext().getAttribute(CTX_PARAM_THIS) !=  null) {
+            throw new ServletException("Only one repository startup servlet allowed per web-app.");
+        }
+        getServletContext().setAttribute(CTX_PARAM_THIS, this);
+        startup();
+    }
+
+    /**
+     * Returns an instance of this servlet. Please note, that only 1
+     * repository startup servlet can exist per webapp.
+     *
+     * @param context the servlet context
+     * @return this servlet
+     */
+    public static RepositoryStartupServlet getInstance(ServletContext context) {
+        return (RepositoryStartupServlet) context.getAttribute(CTX_PARAM_THIS);
+    }
+
+    /**
+     * Configures and starts the repository. It registers it then to the
+     * RMI registry and bind is to the JNDI context if so configured.
+     * @throws ServletException if an error occurs.
+     */
+    public void startup() throws ServletException {
+        if (repository != null) {
+            log.error("Startup: Repository already running.");
+            throw new ServletException("Repository already running.");
+        }
-        initRepository();
-        registerRMI();
+            configure();
+            initRepository();
+            registerRMI();
+            log.info("RepositoryStartupServlet initialized.");
-            log.error("RepositoryStartupServlet initializing failed: "+ e, e);
-            throw e;
+            log.error("RepositoryStartupServlet initializing failed: " + e, e);
-        log.info("RepositoryStartupServlet initialized.");
+    }
+
+    /**
+     * Does a shutdown of the repository and deregisters it from the RMI
+     * registry and unbinds if from the JNDI context if so configured.
+     */
+    public void shutdown() {
+        if (repository == null) {
+            log.info("Shutdown: Repository already stopped.");
+        } else {
+            log.info("RepositoryStartupServlet shutting down...");
+            shutdownRepository();
+            unregisterRMI();
+            unregisterJNDI();
+            log.info("RepositoryStartupServlet shut down.");
+        }
+    }
+
+    /**
+     * Restarts the repository.
+     * @throws ServletException if an error occurs.
+     * @see #shutdown()
+     * @see #startup()
+     */
+    public void restart() throws ServletException {
+        if (repository != null) {
+            shutdown();
+        }
+        startup();
-        if (log == null) {
-            log("RepositoryStartupServlet shutting down...");
-        } else {
-            log.info("RepositoryStartupServlet shutting down...");
-        }
-        shutdownRepository();
-        unregisterRMI();
-        unregisterJNDI();
-        if (log == null) {
-            log("RepositoryStartupServlet shut down.");
-        } else {
-            log.info("RepositoryStartupServlet shut down.");
-        }
+        shutdown();
-     * Creates a new Repository based on configuration
-     * @throws ServletException
+     * Returns the started repository or <code>null</code> if not started
+     * yet.
+     * @return the JCR repository
-    private void initRepository() throws ServletException {
-        // setup home directory
-        String repHome = getServletConfig().getInitParameter(INIT_PARAM_REPOSITORY_HOME);
-        if (repHome==null) {
-            log.error(INIT_PARAM_REPOSITORY_HOME + " missing.");
-            throw new ServletException(INIT_PARAM_REPOSITORY_HOME + " missing.");
-        }
-        File repositoryHome;
-        try {
-            repositoryHome = new File(repHome).getCanonicalFile();
-        } catch (IOException e) {
-            log.error(INIT_PARAM_REPOSITORY_HOME + " invalid." + e.toString());
-            throw new ServletException(INIT_PARAM_REPOSITORY_HOME + " invalid." + e.toString());
-        }
-        log.info("  repository-home = " + repositoryHome.getPath());
+    public Repository getRepository() {
+        return repository;
+    }
-        // get repository config
-        String repConfig = getServletConfig().getInitParameter(INIT_PARAM_REPOSITORY_CONFIG);
-        if (repConfig==null) {
-            log.error(INIT_PARAM_REPOSITORY_CONFIG + " missing.");
-            throw new ServletException(INIT_PARAM_REPOSITORY_CONFIG + " missing.");
-        }
-        log.info("  repository-config = " + repConfig);
-
-        InputStream in = getServletContext().getResourceAsStream(repConfig);
-        if (in==null) {
-            try {
-                in = new FileInputStream(new File(repositoryHome, repConfig));
-            } catch (FileNotFoundException e) {
-                log.error(INIT_PARAM_REPOSITORY_CONFIG + " invalid." + e.toString());
-                throw new ServletException(INIT_PARAM_REPOSITORY_CONFIG + " invalid." + e.toString());
+    /**
+     * Reads the configuration and initializes the {@link #config} field if
+     * successful.
+     * @throws ServletException if an error occurs.
+     */
+    private void configure() throws ServletException {
+        // check if there is a loadable bootstrap config
+        Properties bootstrapProps = new Properties();
+        String bstrp = getServletConfig().getInitParameter(INIT_PARAM_BOOTSTRAP_CONFIG);
+        if (bstrp != null) {
+            // check if it's a web-resource
+            InputStream in = getServletContext().getResourceAsStream(bstrp);
+            if (in == null) {
+                // check if it's a file
+                bootstrapConfigFile = new File(bstrp);
+                if (bootstrapConfigFile.canRead()) {
+                    try {
+                        in = new FileInputStream(bootstrapConfigFile);
+                    } catch (FileNotFoundException e) {
+                        log.error("Error while opening bootstrap properties: {}", e.toString());
+                        throw new ServletException("Error while opening bootstrap properties: " + e.toString());
+                    }
+                }
+            }
+            if (in != null) {
+                try {
+                    bootstrapProps.load(in);
+                } catch (IOException e) {
+                    log.error("Error while loading bootstrap properties: {}", e.toString());
+                    throw new ServletException("Error while loading bootstrap properties: " + e.toString());
+                } finally {
+                    try {
+                        in.close();
+                    } catch (IOException e) {
+                        // ignore
+                    }
+                }
-        // get repository name
-        repositoryName = getServletConfig().getInitParameter(INIT_PARAM_REPOSITORY_NAME);
-        if (repositoryName==null) {
-            repositoryName="default";
+        // read bootstrap config
+        config = new BootstrapConfig();
+        config.init(getServletConfig());
+        config.init(bootstrapProps);
+        config.validate();
+        if (!config.isValid()
+                || config.getRepositoryHome() == null
+                || config.getRepositoryConfig() == null) {
+            if (bstrp == null) {
+                log.error("Repository startup configuration is not valid.");
+                throw new ServletException("Repository startup configuration is not valid.");
+            } else {
+                log.error("Repository startup configuration is not valid but a bootstrap config is specified.");
+                log.error("Either create the {} file or", bstrp);
+                log.error("use the '/config/index.jsp' for easy configuration.");
+                throw new ServletException("Repository startup configuration is not valid.");
+            }
-        log.info("  repository-name = " + repositoryName);
+        config.logInfos();
+    }
+
+    /**
+     * Creates a new Repository based on the configuration and initializes the
+     * {@link #repository} field if successful.
+     *
+     * @throws ServletException if an error occurs
+     */
+    private void initRepository() throws ServletException {
+        // get repository config
+        File repHome;
+        try {
+            repHome = new File(config.getRepositoryHome()).getCanonicalFile();
+        } catch (IOException e) {
+            log.error("Repository startup configuration invalid: " + e.toString());
+            throw new ServletException("Repository startup configuration invalid: " + e.toString());
+        }
+        String repConfig = config.getRepositoryConfig();
+        InputStream in = getServletContext().getResourceAsStream(repConfig);
+        if (in == null) {
+            try {
+                in = new FileInputStream(new File(repConfig));
+            } catch (FileNotFoundException e) {
+                // fallback to old config
+                try {
+                    in = new FileInputStream(new File(repHome, repConfig));
+                } catch (FileNotFoundException e1) {
+                    log.error("Repository startup configuration invalid: " + e1.toString());
+                    throw new ServletException("Repository startup configuration invalid: " + e.toString());
+                }
+            }
+        }
-            repository = createRepository(new InputSource(in), repositoryHome);
+            repository = createRepository(new InputSource(in), repHome);
-     * Shuts down the repository
+     * Shuts down the repository. If the repository is an instanceof
+     * {@link JackrabbitRepository} it's {@link JackrabbitRepository#shutdown()}
+     * method is called. in any case, the {@link #repository} field is
+     * <code>nulled</code>.
-        if (repository instanceof RepositoryImpl) {
-            ((RepositoryImpl) repository).shutdown();
-            repository = null;
+        if (repository instanceof JackrabbitRepository) {
+            ((JackrabbitRepository) repository).shutdown();
+        repository = null;
-     * Creates the repository for the given config and homedir.
+     * Creates the repository instance for the given config and homedir.
+     * Subclasses may override this method of providing own implementations of
+     * a {@link Repository}.
-     * @param is
-     * @param homedir
-     * @return
-     * @throws RepositoryException
+     * @param is input source of the repository config
+     * @param homedir the repository home directory
+     * @return a new jcr repository.
+     * @throws RepositoryException if an error during creation occurs.
-     * Registers the repository in the JNDI context
+     * Binds the repository to the JNDI context
+     * @throws ServletException if an error occurs.
-        // registering via jndi
-        Properties env = new Properties();
-        Enumeration names = getServletConfig().getInitParameterNames();
-        while (names.hasMoreElements()) {
-            String name = (String) names.nextElement();
-            if (name.startsWith("java.naming.")) {
-                String initParam = getServletConfig().getInitParameter(name);
-                if (initParam.equals("")) {
-                    log.info("  ignoring empty JNDI init param: " + name);
-                } else {
-                    env.put(name, initParam);
-                    log.info("  adding property to JNDI environment: " + name + "=" + initParam);
-                }
+        JNDIConfig jc = config.getJndiConfig();
+        if (jc.isValid() && jc.enabled()) {
+            try {
+                jndiContext = new InitialContext(jc.getJndiEnv());
+                jndiContext.bind(jc.getJndiName(), repository);
+                log.info("Repository bound to JNDI with name: " + jc.getJndiName());
+            } catch (NamingException e) {
+                throw new ServletException("Unable to bind repository using JNDI.", e);
-        try {
-            jndiContext = new InitialContext(env);
-            jndiContext.bind(repositoryName, repository);
-            log.info("Repository bound to JNDI with name: " + repositoryName);
-        } catch (NamingException e) {
-            throw new ServletException("Unable to bind repository using JNDI.", e);
-        }
-     * Unregisters the repository from the JNDI context
+     * Unbinds the repository from the JNDI context.
-                jndiContext.unbind(repositoryName);
+                jndiContext.unbind(config.getJndiConfig().getJndiName());
+     * @throws ServletException if an error occurs.
-        // check registering via RMI
-        String rmiPortStr = getServletConfig().getInitParameter(INIT_PARAM_RMI_PORT);
-        String rmiHost = getServletConfig().getInitParameter(INIT_PARAM_RMI_HOST);
-        String rmiURI = getServletConfig().getInitParameter(INIT_PARAM_RMI_URI);
-
-        // no registration if neither port nor host nor URI is configured
-        if (rmiPortStr == null && rmiHost == null && rmiURI == null) {
+        RMIConfig rc = config.getRmiConfig();
+        if (!rc.isValid() || !rc.enabled()) {
-        // URI takes precedences, so check whether the configuration has to
-        // be set from the URI
-        int rmiPort = -1;
-        String rmiName = null;
-        if (rmiURI != null && rmiURI.length() > 0) {
-            URI uri = null;
-            try {
-                uri = new URI(rmiURI);
-
-                // extract values from the URI, check later
-                rmiHost = uri.getHost();
-                rmiPort = uri.getPort();
-                rmiName = uri.getPath();
-
-            } catch (URISyntaxException use) {
-                log.warn("Cannot parse RMI URI '" + rmiURI + "'.", use);
-                rmiURI = null; // clear RMI URI use another one
-                rmiHost = null; // use default host, ignore rmi-host param
-            }
-
-            // cut of leading slash from name if defined at all
-            if (rmiName != null && rmiName.startsWith("/")) {
-                rmiName = rmiName.substring(1);
-            }
-        } else {
-            // convert RMI port configuration
-        if (rmiPortStr != null) {
-            try {
-                rmiPort = Integer.parseInt(rmiPortStr);
-            } catch (NumberFormatException e) {
-                log.warn("Invalid port in rmi-port param: " + e + ". using default port.");
-                    rmiPort = Registry.REGISTRY_PORT;
-            }
-        }
-        }
-
-        // check RMI port
-        if (rmiPort == -1 || rmiPort == 0) {
-            // accept -1 or 0 as a hint to use the default
-            rmiPort = Registry.REGISTRY_PORT;
-        } else if (rmiPort < -1 || rmiPort > 0xFFFF) {
-            // emit a warning if out of range, use defualt in this case
-            log.warn("Invalid port in rmi-port param " + rmiPort + ". using default port.");
-            rmiPort = Registry.REGISTRY_PORT;
-        }
-
-        // check host - use an empty name if null (i.e. not configured)
-        if (rmiHost == null) {
-            rmiHost = "";
-        }
-
-        // check name - use repositoryName if empty or null
-        if (rmiName == null || rmiName.length() ==0) {
-            rmiName = repositoryName;
-        }
-
-        // reconstruct the rmiURI now because values might have been changed
-        rmiURI = "//" + rmiHost + ":" + rmiPort + "/" + rmiName;
-
-                if (rmiHost.length() > 0) {
-                    log.debug("Creating RMIServerSocketFactory for host " + rmiHost);
-                    InetAddress hostAddress = InetAddress.getByName(rmiHost);
+                if (rc.getRmiHost().length() > 0) {
+                    log.debug("Creating RMIServerSocketFactory for host " + rc.getRmiHost());
+                    InetAddress hostAddress = InetAddress.getByName(rc.getRmiHost());
-                reg = LocateRegistry.createRegistry(rmiPort, null, sf);
+                reg = LocateRegistry.createRegistry(rc.rmiPort(), null, sf);
-                log.debug("Trying to access existing registry at " + rmiHost
-                    + ":"+ rmiPort);
+                log.debug("Trying to access existing registry at " + rc.getRmiHost()
+                        + ":" + rc.getRmiPort());
-                    reg = LocateRegistry.getRegistry(rmiHost, rmiPort);
+                    reg = LocateRegistry.getRegistry(rc.getRmiHost(), rc.rmiPort());
-                        + rmiHost + ":" + rmiPort, re);
-            }
+                            + rc.getRmiHost() + ":" + rc.getRmiPort(), re);
+                }
-                log.debug("Registering repository as " + rmiName
-                    + " to registry " + reg);
-                reg.bind(rmiName, remote);
+                log.debug("Registering repository as " + rc.getRmiName()
+                        + " to registry " + reg);
+                reg.bind(rc.getRmiName(), remote);
-                this.rmiURI = rmiURI;
-            log.info("Repository bound via RMI with name: " + rmiURI);
+                log.info("Repository bound via RMI with name: " + rc.getRmiUri());
+     * Unregisters the repository from the RMI registry, if it has previously
+     * been registered.
+     */
+    private void unregisterRMI() {
+        if (rmiRepository != null) {
+            // drop strong referenece to remote repository
+            rmiRepository = null;
+
+            // unregister repository
+            try {
+                Naming.unbind(config.getRmiConfig().getRmiUri());
+            } catch (Exception e) {
+                log("Error while unbinding repository from JNDI: " + e);
+            }
+        }
+    }
+
+    /**
+     * <p/>
+     * Subclasses may override this method for providing a name of a own
+     * implementation.
+     *
+     * @return getClass().getName() + "$RMIRemoteFactoryDelegater"
-        return "org.apache.jackrabbit.j2ee.RepositoryStartupServlet$RMIRemoteFactoryDelegater";
+        return getClass().getName() + "$RMIRemoteFactoryDelegater";
-     * <p>
+     * <p/>
-     *      the interface on the local host to which the server sockets are
-     *      bound.
-     *
+     *                    the interface on the local host to which the server sockets are
+     *                    bound.
-     *      creating <code>java.net.ServerSocket</code> instances bound to
-     *      the <code>rmiHost</code>.
+     *         creating <code>java.net.ServerSocket</code> instances bound to
+     *         the <code>rmiHost</code>.
-     * Unregisters the repository from the RMI registry, if it has previously
-     * been registered.
-     */
-    private void unregisterRMI() {
-        // drop strong referenece to remote repository
-        rmiRepository = null;
-
-        // unregister repository
-        if (rmiURI != null) {
-            try {
-                Naming.unbind(rmiURI);
-            } catch (Exception e) {
-                log("Error while unbinding repository from JNDI: " + e);
-            } finally {
-                // do not try again to unregister
-                rmiURI = null;
-            }
-        }
-    }
-
-    /**
+
+    //-------------------------------------------------< Installer Routines >---
+
+    /**
+     * {@inheritDoc}
+     */
+    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+            throws ServletException, IOException {
+        if (repository == null) {
+            redirect(req, resp, "/bootstrap/missing.html");
+        } else {
+            redirect(req, resp, "/bootstrap/running.html");
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
+            throws ServletException, IOException {
+        if (repository != null) {
+            redirect(req, resp, "/bootstrap/reconfigure.html");
+        } else {
+            int rc = new Installer(bootstrapConfigFile,
+                    getServletContext()).installRepository(req);
+            switch (rc) {
+                case Installer.C_INSTALL_OK:
+                    // restart rep
+                    restart();
+                    if (repository == null) {
+                        redirect(req, resp, "/bootstrap/error.html");
+                    } else {
+                        redirect(req, resp, "/bootstrap/success.html");
+                    }
+                    break;
+                case Installer.C_INVALID_INPUT:
+                    redirect(req, resp, "/bootstrap/missing.html");
+                    break;
+                case Installer.C_CONFIG_EXISTS:
+                case Installer.C_BOOTSTRAP_EXISTS:
+                case Installer.C_HOME_EXISTS:
+                    redirect(req, resp, "/bootstrap/exists.html");
+                    break;
+                case Installer. C_HOME_MISSING:
+                case Installer.C_CONFIG_MISSING:
+                    redirect(req, resp, "/bootstrap/notexists.html");
+                    break;
+                case Installer.C_INSTALL_ERROR:
+                    redirect(req, resp, "/bootstrap/error.html");
+                    break;
+            }
+        }
+    }
+
+    /**
+     * Helper function to send a redirect response respecting the context path.
+     *
+     * @param req the request
+     * @param resp the response
+     * @param loc the location for the redirect
+     * @throws ServletException if an servlet error occurs.
+     * @throws IOException if an I/O error occurs.
+     */
+    private void redirect(HttpServletRequest req,
+                          HttpServletResponse resp, String loc)
+            throws ServletException, IOException {
+        String cp = req.getContextPath();
+        if (cp == null || cp.equals("/")) {
+            cp = "";
+        }
+        resp.sendRedirect(cp + loc);
+    }

MOV26 MOV26 MOV26 INS26 MOV23 MOV23 MOV31 MOV31 INS40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 MOV43 MOV43 UPD83 INS43 UPD83 INS43 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 UPD42 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS8 INS29 INS83 INS43 INS42 INS8 MOV29 MOV83 MOV39 UPD42 MOV42 INS43 INS8 INS29 INS83 INS39 INS42 MOV43 INS8 MOV29 MOV83 MOV39 MOV42 MOV43 INS8 INS29 INS83 MOV43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 UPD83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD42 UPD45 UPD42 UPD45 INS42 UPD42 INS42 UPD42 MOV65 INS65 UPD42 MOV42 MOV21 INS25 INS21 INS21 INS65 UPD65 MOV65 INS65 UPD42 MOV42 INS43 INS42 INS41 INS25 MOV65 INS25 INS65 INS65 MOV65 MOV65 UPD42 MOV42 INS25 INS21 MOV21 INS21 INS65 INS65 INS42 INS41 INS42 MOV60 MOV60 INS25 MOV21 MOV21 MOV21 INS21 INS25 INS21 INS65 INS65 INS60 INS54 INS60 MOV60 INS25 MOV54 MOV21 INS65 MOV60 INS25 INS65 INS65 INS65 INS41 INS65 INS43 INS42 INS43 INS42 UPD42 MOV42 INS42 INS25 INS65 INS43 INS42 INS43 INS42 INS42 INS42 MOV25 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 MOV43 INS42 INS42 INS42 INS60 INS25 INS21 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS42 INS66 INS66 INS27 INS8 INS32 INS32 INS66 INS66 INS42 UPD66 INS66 UPD42 MOV42 INS11 UPD66 INS66 INS66 INS27 INS8 UPD66 INS66 INS27 INS8 MOV8 UPD66 MOV66 INS42 INS66 INS27 INS8 INS32 INS32 INS66 INS66 INS66 INS42 UPD66 INS65 INS66 INS66 INS66 INS27 INS8 MOV32 MOV32 INS32 INS27 INS8 INS32 INS66 INS65 INS66 INS42 INS66 MOV43 INS59 INS8 INS12 MOV43 INS59 MOV27 INS8 UPD66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 UPD66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 UPD66 INS42 INS66 UPD43 INS27 INS8 UPD66 INS42 INS66 UPD43 INS27 MOV8 INS66 INS66 MOV65 INS66 INS66 INS66 INS66 INS66 INS27 UPD66 INS65 UPD42 MOV42 INS42 INS27 INS8 INS8 INS65 INS42 INS42 INS27 INS8 UPD66 MOV66 INS42 INS66 INS42 UPD66 MOV66 INS42 INS66 INS42 INS66 INS42 UPD66 MOV66 INS42 INS42 MOV43 INS59 INS27 INS8 INS32 INS32 INS33 INS53 INS32 INS42 INS42 INS52 INS42 INS43 INS32 INS42 INS33 MOV21 INS53 INS21 MOV21 INS21 INS42 INS33 INS21 MOV21 MOV21 UPD42 UPD42 INS42 INS33 INS21 INS42 INS42 INS67 UPD42 UPD42 INS42 INS33 MOV60 MOV25 MOV25 UPD42 INS14 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS27 INS27 MOV25 INS42 INS42 INS67 INS42 INS21 INS44 INS8 INS42 INS32 UPD42 INS54 INS42 INS68 INS67 UPD43 INS42 UPD42 UPD42 INS32 INS32 MOV54 UPD42 UPD42 INS38 INS38 UPD42 MOV21 INS32 INS45 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS50 INS42 INS32 INS27 INS32 INS21 INS42 INS42 INS27 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS32 INS32 INS32 INS42 UPD42 UPD43 INS8 UPD27 INS43 INS38 INS27 INS32 INS33 INS8 INS42 INS7 INS43 INS42 MOV21 INS53 INS42 INS42 INS8 INS12 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS32 INS32 INS32 UPD42 MOV42 INS32 INS32 INS32 INS39 INS42 INS49 INS21 INS25 INS10 INS49 INS21 INS10 INS49 INS49 INS49 INS21 INS10 INS49 INS49 INS21 INS10 INS49 INS21 INS10 INS42 INS42 INS42 INS33 INS42 INS42 INS45 INS7 INS42 INS42 INS42 MOV43 INS45 UPD42 UPD45 MOV43 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 UPD42 UPD42 MOV21 INS25 UPD42 INS54 INS42 INS32 MOV32 INS33 INS42 INS42 UPD42 INS21 INS21 INS21 INS53 INS42 INS32 INS42 INS14 INS21 INS44 INS8 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS42 UPD45 MOV45 UPD42 INS40 INS32 INS27 INS8 MOV8 INS40 MOV32 INS40 INS40 INS40 INS32 INS40 INS40 INS32 INS40 INS32 INS42 INS45 INS42 UPD42 UPD42 INS32 MOV8 INS8 INS12 INS8 INS42 UPD42 MOV42 UPD42 UPD42 INS32 INS32 INS32 INS14 INS14 INS42 UPD42 INS43 INS27 INS7 INS43 INS42 INS54 UPD42 INS14 UPD42 UPD42 INS42 INS42 INS33 INS21 UPD42 UPD42 UPD42 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 UPD42 UPD42 MOV14 INS42 INS42 INS21 MOV44 INS8 INS54 INS45 INS43 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS43 INS45 MOV43 INS32 UPD45 INS32 INS42 INS45 INS32 INS42 INS14 INS42 INS8 INS12 UPD43 INS32 INS32 INS32 INS32 INS43 INS42 INS32 INS32 UPD42 INS32 MOV21 INS53 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS14 MOV21 INS44 INS8 UPD42 INS32 INS42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 INS32 INS32 INS32 INS32 INS32 INS42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD45 MOV45 UPD42 UPD42 INS42 INS45 INS21 INS42 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS43 INS42 INS43 INS42 MOV21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 MOV53 INS45 MOV32 MOV43 MOV27 INS32 INS43 INS42 INS42 INS42 INS14 INS42 INS14 INS32 INS32 INS32 INS32 INS42 INS14 UPD45 INS42 INS42 UPD42 MOV42 INS43 INS14 UPD42 INS43 INS27 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 MOV42 INS32 INS32 MOV43 INS42 INS45 MOV32 MOV43 INS42 INS43 INS42 INS42 UPD45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 UPD45 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL29 DEL83 DEL83 DEL83 DEL43 DEL42 DEL45 DEL59 DEL23 DEL29 DEL83 DEL83 DEL83 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL43 DEL42 DEL45 DEL59 DEL23 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL42 DEL68 DEL65 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL45 DEL83 DEL83 DEL45 DEL42 DEL53 DEL42 DEL33 DEL27 DEL42 DEL45 DEL32 DEL21 DEL8 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL45 DEL32 DEL21 DEL8 DEL8 DEL25 DEL42 DEL14 DEL42 DEL45 DEL27 DEL42 DEL42 DEL45 DEL27 DEL14 DEL53 DEL42 DEL45 DEL27 DEL42 DEL42 DEL45 DEL27 DEL14 DEL53 DEL42 DEL14 DEL42 DEL32 DEL42 DEL7 DEL42 DEL45 DEL27 DEL42 DEL45 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL59 DEL60 DEL8 DEL8 DEL12 DEL54 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL32 DEL42 DEL42 DEL32 DEL43 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL8 DEL61 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL27 DEL25 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL27 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL42 DEL34 DEL38 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL34 DEL38 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL33 DEL27 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL33 DEL7 DEL21 DEL8 DEL32 DEL32 DEL45 DEL42 DEL27 DEL42 DEL32 DEL21 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL65 DEL42 DEL45 DEL41 DEL8