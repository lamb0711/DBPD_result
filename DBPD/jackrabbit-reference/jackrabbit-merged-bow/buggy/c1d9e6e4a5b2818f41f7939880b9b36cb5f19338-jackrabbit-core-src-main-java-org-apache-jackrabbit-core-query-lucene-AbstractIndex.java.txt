JCR-2089: Use java.util.concurrent

Use java.util.concurrent constructs in DynamicPooledExecutor.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@995451 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.analysis.Analyzer;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.IndexDeletionPolicy;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.document.Fieldable;
-import org.apache.lucene.search.Similarity;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.concurrent.CountDownLatch;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.document.Fieldable;
+import org.apache.lucene.index.IndexDeletionPolicy;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.Similarity;
+import org.apache.lucene.store.Directory;
+import org.apache.tika.io.IOExceptionWithCause;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+        final List<IOException> exceptions =
+            Collections.synchronizedList(new ArrayList<IOException>());
+        final CountDownLatch latch = new CountDownLatch(docs.length);
+
-        DynamicPooledExecutor.Command[] commands =
-                new DynamicPooledExecutor.Command[docs.length];
-        for (int i = 0; i < docs.length; i++) {
-            // check if text extractor completed its work
-            final Document doc = getFinishedDocument(docs[i]);
-            // create a command for inverting the document
-            commands[i] = new DynamicPooledExecutor.Command() {
-                public Object call() throws Exception {
-                    long time = System.currentTimeMillis();
-                    writer.addDocument(doc);
-                    return System.currentTimeMillis() - time;
-                }
-            };
-        }
-        DynamicPooledExecutor.Result[] results = EXECUTOR.executeAndWait(commands);
-        invalidateSharedReader();
-        IOException ex = null;
-        for (DynamicPooledExecutor.Result result : results) {
-            if (result.getException() != null) {
-                Throwable cause = result.getException().getCause();
-                if (ex == null) {
-                    // only throw the first exception
-                    if (cause instanceof IOException) {
-                        ex = (IOException) cause;
-                    } else {
-                        throw Util.createIOException(cause);
+        for (final Document doc : docs) {
+            EXECUTOR.execute(new Runnable() {
+                public void run() {
+                    try {
+                        // check if text extractor completed its work
+                        Document document = getFinishedDocument(doc);
+                        if (log.isDebugEnabled()) {
+                            long start = System.nanoTime();
+                            writer.addDocument(document);
+                            log.debug("Inverted a document in {}us",
+                                    (System.nanoTime() - start) / 1000);
+                        } else {
+                            writer.addDocument(document);
+                        }
+                    } catch (IOException e) {
+                        log.warn("Exception while inverting a document", e);
+                        exceptions.add(e);
+                    } finally {
+                        latch.countDown();
-                } else {
-                    // all others are logged
-                    log.warn("Exception while inverting document", cause);
-            } else {
-                log.debug("Inverted document in {} ms", result.get());
-            }
+            });
-        if (ex != null) {
-            throw ex;
+
+        try {
+            latch.await();
+        } catch (InterruptedException e) {
+            throw new IOExceptionWithCause(
+                    "Wait for background indexing tasks was interrupted", e);
+        } finally {
+            invalidateSharedReader();
+        }
+
+        if (!exceptions.isEmpty()) {
+            throw new IOExceptionWithCause(
+                    exceptions.size() + " of " + docs.length
+                    + " background indexer tasks failed", exceptions.get(0));

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV60 INS60 INS70 INS54 INS25 INS83 INS74 INS83 INS43 INS59 INS44 INS42 INS8 INS8 INS12 INS8 INS38 MOV8 INS43 MOV43 UPD42 INS32 INS42 INS42 INS14 INS83 MOV43 INS42 INS21 MOV21 INS44 INS8 MOV21 INS32 INS53 INS42 INS42 INS42 INS14 INS43 INS40 INS32 INS32 INS43 INS42 MOV53 UPD42 MOV42 UPD42 MOV42 INS14 INS74 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS43 INS27 INS32 INS43 MOV43 INS43 INS1 INS43 INS45 INS42 INS42 INS32 INS45 INS40 INS45 UPD42 MOV42 MOV42 INS34 INS42 INS42 INS31 INS42 UPD42 MOV42 INS42 MOV83 INS39 INS42 INS8 INS54 INS8 INS12 INS8 INS60 INS25 INS44 INS8 INS21 INS43 INS59 INS32 INS8 INS8 MOV43 UPD42 MOV42 INS21 INS21 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV60 MOV21 INS21 INS21 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS45 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS36 INS34 INS27 MOV32 UPD42 MOV42 UPD42 DEL40 DEL43 DEL85 DEL5 DEL40 DEL43 DEL85 DEL5 DEL40 DEL3 DEL42 DEL42 DEL11 DEL7 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL83 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL40 DEL43 DEL43 DEL42 DEL42 DEL43 DEL27 DEL41 DEL8 DEL31 DEL1 DEL14 DEL7 DEL21 DEL8 DEL24 DEL40 DEL43 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL40 DEL43 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL62 DEL8 DEL8 DEL25 DEL8 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL25