Added SQL and XPath query implementation. The implementation is not complete yet. Only basic operations are supported.
Also added postGoals to the maven.xml to generate the parser classes for SQL XPath.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@123135 13f79535-47bb-0310-9956-ffa450edef68

+     * @todo not used anymore, node types can be specified in any predicate.
-     * Sub node that defines constraints. Might be null
-     */
-    private AndQueryNode constraintNode = new AndQueryNode(this);
-
-    /**
-     * The textsearch clause. Might be null
-     */
-    private TextsearchQueryNode textsearchNode;
-
-    /**
-     * Returns the constraint node.
-     *
-     * @return the constraint node.
-     */
-    public AndQueryNode getConstraintNode() {
-        return constraintNode;
-    }
-
-    /**
-     * Returns the textsearch node.
-     *
-     * @return the textsearch node.
-     */
-    public TextsearchQueryNode getTextsearchNode() {
-        return textsearchNode;
-    }
-
-    /**
-     * Sets a new textsearch node.
-     *
-     * @param textsearchNode the new textsearch node.
-     */
-    public void setTextsearchNode(TextsearchQueryNode textsearchNode) {
-        this.textsearchNode = textsearchNode;
-    }
-
-    /**
-        if (constraintNode != null) {
-            sb.append(" WHERE ").append(constraintNode.toJCRQLString());
+        LocationStepQueryNode[] steps = locationNode.getPathSteps();
+        QueryNode[] predicates = steps[steps.length - 1].getPredicates();
+        String and = "";
+        for (int i = 0; i < predicates.length; i++) {
+            if (i == 0) {
+                sb.append(" WHERE ");
+            }
+            sb.append(and).append(predicates[i].toJCRQLString());
+            and = " AND ";
+        }
+        return sb.toString();
+    }
+
+    /**
+     * Returns a string representation of this query node including its sub-nodes.
+     * The returned string is formatted in JCR SQL syntax.
+     *
+     * @return a string representation of this query node including its sub-nodes.
+     */
+    public String toJCRSQLString() {
+        StringBuffer sb = new StringBuffer("SELECT *");
+        sb.append(" FROM");
+        String comma = "";
+        if (nodeTypes.size() > 0) {
+            for (Iterator it = nodeTypes.iterator(); it.hasNext();) {
+                NodeTypeQueryNode nodeType = (NodeTypeQueryNode) it.next();
+                sb.append(comma);
+                sb.append(" \"").append(nodeType.getValue()).append("\"");
+                comma = ",";
+            }
+        } else {
+            sb.append(" nt:base");
+        }
+        LocationStepQueryNode[] steps = locationNode.getPathSteps();
+        QueryNode[] predicates = steps[steps.length - 1].getPredicates();
+        String and = "";
+        for (int i = 0; i < predicates.length; i++) {
+            if (i == 0) {
+                sb.append(" WHERE ");
+            }
+            sb.append(and).append(predicates[i].toJCRSQLString());
+            and = " AND ";
+        }
+
+        if (steps.length == 2
+                && steps[1].getIncludeDescendants()
+                && steps[1].getNameTest() == null) {
+            // then this query selects all paths
+        } else {
+            sb.append(" AND ").append(locationNode.toJCRSQLString());
-        return "";
+        return locationNode.toXPathString();

INS31 INS29 INS83 INS43 INS42 INS8 INS65 INS60 INS60 INS60 INS24 INS65 UPD65 MOV65 UPD42 MOV42 INS60 INS21 INS60 INS25 INS60 INS60 INS60 INS24 INS25 INS41 INS66 INS5 INS59 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS66 INS66 UPD66 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS8 INS5 INS59 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS8 INS32 INS32 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS45 INS39 INS59 INS42 INS40 INS42 MOV25 INS21 INS21 INS42 UPD42 MOV42 MOV14 INS42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS34 INS24 INS21 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS45 INS39 INS59 INS42 INS40 INS42 INS25 INS21 MOV21 INS27 INS27 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS34 UPD27 INS32 INS7 UPD43 INS45 INS42 INS42 INS58 INS32 INS8 INS32 INS42 INS42 INS42 UPD42 MOV42 INS2 INS42 INS42 INS34 INS27 INS8 INS32 INS27 INS32 INS32 INS33 INS32 INS42 INS27 UPD42 INS34 INS32 INS42 INS32 INS42 INS45 UPD42 INS43 INS59 INS42 INS42 INS60 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS27 INS42 INS34 INS21 INS32 INS42 INS32 INS42 INS45 INS40 INS34 INS2 INS42 INS2 INS42 INS32 INS42 INS32 INS40 INS34 MOV32 INS42 INS42 INS42 INS2 INS42 UPD42 MOV42 INS42 INS32 INS43 INS59 INS32 INS32 INS7 INS40 INS34 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS43 INS32 INS32 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 DEL29 DEL83 DEL43 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL43 DEL59 DEL23 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL33 DEL42 DEL42 DEL42 DEL32 DEL32 DEL52 DEL52 DEL42 DEL22 DEL42 DEL45