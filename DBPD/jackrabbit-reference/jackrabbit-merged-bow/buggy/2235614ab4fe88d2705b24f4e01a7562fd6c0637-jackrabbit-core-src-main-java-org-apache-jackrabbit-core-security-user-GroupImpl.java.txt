JCR-2710: Add support for large number of users in a group 
make rep:Members node/properties protected

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@986297 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.session.SessionContext;
+import org.apache.jackrabbit.core.session.SessionOperation;
-        public boolean addMember(AuthorizableImpl authorizable) throws RepositoryException {
-            NodeImpl nMembers = (node.hasNode(N_MEMBERS)
-                    ? node.getNode(N_MEMBERS)
-                    : userManager.addProtectedNode(node, N_MEMBERS, NT_REP_MEMBERS));
+        public boolean addMember(final AuthorizableImpl authorizable) throws RepositoryException {
+            return userManager.performProtectedOperation(getSession(), new SessionOperation<Boolean>() {
+                public Boolean perform(SessionContext context) throws RepositoryException {
+                    NodeImpl nMembers = (node.hasNode(N_MEMBERS)
+                            ? node.getNode(N_MEMBERS)
+                            : node.addNode(N_MEMBERS, NT_REP_MEMBERS, null));
-            try {
-                PropertySequence properties = getPropertySequence(nMembers);
-                String propName = Text.escapeIllegalJcrChars(authorizable.getID());
-                if (properties.hasItem(propName)) {
-                    log.debug("Authorizable {} is already member of {}", authorizable, this);
-                    return false;
-                } else {
-                    Value newMember = getSession().getValueFactory().createValue(authorizable.getNode(), true);
-                    properties.addProperty(propName, newMember);
-                }
+                    try {
+                        PropertySequence properties = getPropertySequence(nMembers);
+                        String propName = Text.escapeIllegalJcrChars(authorizable.getID());
+                        if (properties.hasItem(propName)) {
+                            log.debug("Authorizable {} is already member of {}", authorizable, this);
+                            return false;
+                        } else {
+                            Value newMember = getSession().getValueFactory().createValue(authorizable.getNode(), true);
+                            properties.addProperty(propName, newMember);
+                        }
-                if (userManager.isAutoSave()) {
-                    node.save();
+                        if (userManager.isAutoSave()) {
+                            node.save();
+                        }
+                        return true;
+                    }
+                    catch (RepositoryException e) {
+                        log.debug("addMember failed. Reverting changes", e);
+                        if (nMembers.isNew()) {
+                            node.refresh(false);
+                        } else {
+                            nMembers.refresh(false);
+                        }
+                        throw e;
+                    }
-                return true;
-            }
-            catch (RepositoryException e) {
-                log.debug("addMember failed. Reverting changes", e);
-                if (nMembers.isNew()) {
-                    node.refresh(false);
-                } else {
-                    nMembers.refresh(false);
-                }
-                throw e;
-            }
+            });
-        public boolean removeMember(AuthorizableImpl authorizable) throws RepositoryException {
+        public boolean removeMember(final AuthorizableImpl authorizable) throws RepositoryException {
-            NodeImpl nMembers = node.getNode(N_MEMBERS);
-            try {
-                PropertySequence properties = getPropertySequence(nMembers);
-                String propName = Text.escapeIllegalJcrChars(authorizable.getID());
-                if (properties.hasItem(propName)) {
-                    properties.removeProperty(propName);
-                    if (!properties.iterator().hasNext()) {
-                        userManager.removeProtectedItem(nMembers, node);
-                    }
-                } else {
-                    log.debug("Authorizable {} was not member of {}", authorizable.getID(), getID());
-                    return false;
-                }
+            return userManager.performProtectedOperation(getSession(), new SessionOperation<Boolean>() {
+                public Boolean perform(SessionContext context) throws RepositoryException {
+                    NodeImpl nMembers = node.getNode(N_MEMBERS);
+                    try {
+                        PropertySequence properties = getPropertySequence(nMembers);
+                        String propName = Text.escapeIllegalJcrChars(authorizable.getID());
+                        if (properties.hasItem(propName)) {
+                            properties.removeProperty(propName);
+                            if (!properties.iterator().hasNext()) {
+                                nMembers.remove();
+                            }
+                        } else {
+                            log.debug("Authorizable {} was not member of {}", authorizable.getID(), getID());
+                            return false;
+                        }
-                if (userManager.isAutoSave()) {
-                    node.save();
+                        if (userManager.isAutoSave()) {
+                            node.save();
+                        }
+                        return true;
+                    }
+                    catch (RepositoryException e) {
+                        log.debug("removeMember failed. Reverting changes", e);
+                        nMembers.refresh(false);
+                        throw e;
+                    }
-                return true;
-            }
-            catch (RepositoryException e) {
-                log.debug("removeMember failed. Reverting changes", e);
-                nMembers.refresh(false);
-                throw e;
-            }
+            });

INS26 INS26 INS40 INS40 INS31 INS83 INS39 INS42 MOV44 INS43 INS8 INS8 INS83 INS42 INS41 INS83 MOV25 INS41 INS32 INS32 INS42 INS42 INS32 INS14 INS42 INS42 INS32 INS14 INS42 INS74 INS1 INS42 INS74 INS1 INS43 INS43 MOV31 INS43 INS43 INS31 INS42 INS42 INS43 INS42 INS44 INS42 INS42 INS83 INS43 INS42 INS44 INS43 MOV8 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 UPD42 UPD42 INS33 UPD42 DEL39 DEL42 DEL42 DEL42 DEL42