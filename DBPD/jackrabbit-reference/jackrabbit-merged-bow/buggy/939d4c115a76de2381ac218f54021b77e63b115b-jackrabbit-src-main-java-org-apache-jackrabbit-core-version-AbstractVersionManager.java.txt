JCR-546: Introduced the WriteOperation helper class to hide the handling of the StateManager and the write lock.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@478644 13f79535-47bb-0310-9956-ffa450edef68

+     * Helper for managing write operations.
+     */
+    private class WriteOperation {
+
+        /**
+         * Flag for successful completion of the write operation.
+         */
+        private boolean success = false;
+
+        /**
+         * Saves the pending operations in the {@link StateManager}.
+         *
+         * @throws ItemStateException if the pending state is invalid
+         * @throws RepositoryException if the pending state could not be persisted
+         */
+        public void save() throws ItemStateException, RepositoryException {
+            stateMgr.update();
+            success = true;
+        }
+
+        /**
+         * Closes the write operation. The pending operations are cancelled
+         * if they could not be properly saved. Finally the write lock is
+         * released.
+         */
+        public void close() {
+            try {
+                if (!success) {
+                    // update operation failed, cancel all modifications
+                    stateMgr.cancel();
+                }
+            } finally {
+                releaseWriteLock();
+            }
+        }
+    }
+
+    /**
+     * Starts a write operation by acquiring the write lock and setting the
+     * item state manager to the "edit" state. If something goes wrong, the
+     * write lock is released and an exception is thrown.
+     * <p>
+     * The pattern for using this method and the returned helper instance is:
+     * <pre>
+     *     WriteOperation operation = startWriteOperation();
+     *     try {
+     *         ...
+     *         operation.save(); // if everything is OK
+     *         ...
+     *     } catch (...) {
+     *         ...
+     *     } finally {
+     *         operation.close();
+     *     }
+     * </pre>
+     *
+     * @return write operation helper
+     * @throws RepositoryException if the write operation could not be started
+     */
+    private WriteOperation startWriteOperation() throws RepositoryException {
+        boolean success = false;
+        acquireWriteLock();
+        try {
+            stateMgr.edit();
+            success = true;
+            return new WriteOperation();
+        } catch (IllegalStateException e) {
+            throw new RepositoryException("Unable to start edit operation.", e);
+        } finally {
+            if (!success) {
+                releaseWriteLock();
+            }
+        }
+    }
+
+    /**
-
-        acquireWriteLock();
-        try {
-            stateMgr.edit();
-        } catch (IllegalStateException e) {
-            releaseWriteLock();
-            throw new RepositoryException("Unable to start edit operation", e);
-        }
-
-        boolean succeeded = false;
-
+        WriteOperation operation = startWriteOperation();
-            stateMgr.update();
-            succeeded = true;
+            operation.save();
-            if (!succeeded) {
-                // update operation failed, cancel all modifications
-                stateMgr.cancel();
-            }
-            releaseWriteLock();
+            operation.close();
-
-        acquireWriteLock();
-        try {
-            stateMgr.edit();
-        } catch (IllegalStateException e) {
-            releaseWriteLock();
-            throw new VersionException("Unable to start edit operation", e);
-        }
-        boolean succeeded = false;
+        WriteOperation operation = startWriteOperation();
-            stateMgr.update();
-            succeeded = true;
+            operation.save();
-            if (!succeeded) {
-                // update operation failed, cancel all modifications
-                stateMgr.cancel();
-            }
-            releaseWriteLock();
+            operation.close();
-
-        acquireWriteLock();
+        WriteOperation operation = startWriteOperation();
-            stateMgr.edit();
-        } catch (IllegalStateException e) {
-            releaseWriteLock();
-            throw new VersionException("Unable to start edit operation", e);
-        }
-        InternalVersion v = null;
-        boolean success = false;
-        try {
-            v = history.setVersionLabel(version, label, move);
-            stateMgr.update();
-            success = true;
+            InternalVersion v = history.setVersionLabel(version, label, move);
+            operation.save();
+            return v;
+            return null;
-            if (!success) {
-                // update operation failed, cancel all modifications
-                stateMgr.cancel();
-            }
-            releaseWriteLock();
+            operation.close();
-        return v;

INS55 INS31 INS31 INS29 INS83 INS42 INS23 INS31 INS31 INS29 INS83 INS43 INS42 INS43 INS8 MOV29 INS83 MOV43 INS42 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 INS65 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS8 INS65 INS65 INS65 INS42 UPD42 MOV42 MOV60 MOV21 MOV54 INS60 INS60 MOV60 MOV54 INS66 INS65 INS42 INS9 INS65 INS65 INS65 UPD42 MOV42 INS42 MOV21 MOV21 INS65 INS54 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS8 INS43 MOV59 INS8 INS43 INS59 INS8 INS43 INS8 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS7 INS66 INS66 INS66 MOV8 MOV8 MOV21 INS41 INS25 INS42 INS42 INS32 MOV21 UPD42 MOV42 INS42 INS32 MOV21 INS42 UPD42 INS32 INS60 MOV41 INS21 INS42 INS42 INS9 INS14 INS38 INS8 INS42 INS42 INS32 INS42 MOV43 INS59 INS41 INS32 INS43 INS42 MOV21 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 MOV32 UPD42 UPD42 INS33 INS42 INS42 INS42 UPD45 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL42 DEL9 DEL42 DEL32 DEL21 DEL39 DEL60 DEL42 DEL9 DEL7 DEL21 DEL42 DEL38 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL12 DEL54 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL42 DEL38 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL33 DEL42 DEL7 DEL21 DEL83 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31