Enhanced workspace configuration to support independent FileSystem for SearchIndex

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@56683 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.IllegalNameException;
+import org.apache.jackrabbit.core.UnknownPrefixException;
-import javax.jcr.NamespaceException;
+import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.nodetype.NodeType;
+import javax.jcr.nodetype.NodeTypeIterator;
+import java.util.Arrays;
-            } catch (MalformedPathException e) {
+            } catch (IllegalNameException e) {
+                exceptions.add(e);
+            } catch (UnknownPrefixException e) {
-        } catch (MalformedPathException e) {
+        } catch (IllegalNameException e) {
+            exceptions.add(e);
+        } catch (UnknownPrefixException e) {
-        String value = node.getValue();
+        List values = new ArrayList();
-            value = nsMappings.translatePropertyName(node.getValue(),
-                    session.getNamespaceResolver());
-        } catch (NamespaceException e) {
-            // will never happen
-            log.error(e.toString());
-        } catch (MalformedPathException e) {
+
+            values.add(nsMappings.translatePropertyName(node.getValue(),
+                    session.getNamespaceResolver()));
+            NodeTypeManager ntMgr = session.getWorkspace().getNodeTypeManager();
+            NodeType base = ntMgr.getNodeType(node.getValue());
+            NodeTypeIterator allTypes = ntMgr.getAllNodeTypes();
+            while (allTypes.hasNext()) {
+                NodeType nt = allTypes.nextNodeType();
+                NodeType[] superTypes = nt.getSupertypes();
+                if (Arrays.asList(superTypes).contains(base)) {
+                    values.add(nsMappings.translatePropertyName(nt.getName(),
+                            session.getNamespaceResolver()));
+                }
+            }
+        } catch (IllegalNameException e) {
+            exceptions.add(e);
+        } catch (UnknownPrefixException e) {
+            exceptions.add(e);
+        } catch (RepositoryException e) {
-        return new TermQuery(new Term(field, value));
+        if (values.size() == 0) {
+            // exception occured
+            return new BooleanQuery();
+        } else if (values.size() == 1) {
+            return new TermQuery(new Term(field, (String) values.get(0)));
+        } else {
+            BooleanQuery b = new BooleanQuery();
+            for (Iterator it = values.iterator(); it.hasNext();) {
+                b.add(new TermQuery(new Term(field, (String)it.next())), false, false);
+            }
+            return b;
+        }
-        } catch (MalformedPathException e) {
+        } catch (IllegalNameException e) {
+            exceptions.add(e);
+        } catch (UnknownPrefixException e) {

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 INS60 INS54 INS25 INS12 INS43 INS59 INS8 MOV12 INS12 MOV12 INS27 INS8 INS25 INS12 INS44 INS8 INS42 INS42 INS14 MOV21 MOV21 INS60 MOV60 INS60 INS61 INS44 INS8 INS32 INS34 INS41 INS27 INS8 INS8 INS44 INS8 INS12 UPD43 INS43 INS42 INS21 INS43 INS32 INS43 INS59 UPD43 INS43 INS59 INS32 INS8 UPD43 INS43 INS42 INS21 UPD43 INS42 INS42 INS14 INS32 INS34 MOV41 INS60 INS24 INS41 UPD43 INS43 INS42 INS21 INS44 INS8 UPD42 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 UPD42 INS42 INS32 UPD42 INS43 INS42 INS42 INS43 INS59 INS58 INS32 INS8 INS42 UPD42 INS42 INS32 UPD43 INS43 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS5 INS59 INS32 INS8 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS21 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS42 MOV42 MOV42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS32 INS42 INS42 INS21 INS11 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS9 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS43 INS14 INS42 INS42 INS32 INS32 INS42 INS43 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL42 DEL7 DEL32 DEL42 DEL32 DEL42 DEL8 DEL54