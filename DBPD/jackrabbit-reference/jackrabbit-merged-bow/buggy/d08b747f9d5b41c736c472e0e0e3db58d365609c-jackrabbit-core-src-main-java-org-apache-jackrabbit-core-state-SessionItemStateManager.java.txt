JCR-2425: Session.save() and Session.refresh(boolean) rely on accessibility of the root node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@887279 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
-import javax.jcr.nodetype.NoSuchNodeTypeException;
-import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.PathFactory;
+import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
-     * <code>parentId</code> itself (if there is such)                                                                            not be included.
+     * <code>parentId</code> itself (if there is such) will not be included.
-            Iterator iter = transientStore.values().iterator();
-            while (iter.hasNext()) {
-                ItemState state = (ItemState) iter.next();
+            for (ItemState state : transientStore.values()) {
+     * Returns the id of the root of the minimal subtree including all
+     * transient states.
+     *
+     * @return id of nearest common ancestor of all transient states or null
+     *         if there's no transient state.
+     * @throws RepositoryException if an error occurs
+     */
+    public NodeId getIdOfRootTransientNodeState() throws RepositoryException {
+        if (transientStore.isEmpty()) {
+            return null;
+        }
+
+        // short cut
+        if (transientStore.contains(hierMgr.getRootNodeId())) {
+            return hierMgr.getRootNodeId();
+        }
+
+        // the nearest common ancestor of all transient states
+        // must be either
+        // a) a node state with STATUS_EXISTING_MODIFIED, or
+        // b) the parent node of a property state with STATUS_EXISTING_MODIFIED 
+
+        // collect all candidates based on above criteria
+        Collection<NodeId> candidateIds = new LinkedList<NodeId>();
+        try {
+            HierarchyManager hierMgr = getHierarchyMgr();
+            for (ItemState state : transientStore.values()) {
+                if (state.getStatus() == ItemState.STATUS_EXISTING_MODIFIED) {
+                    NodeId nodeId;
+                    if (state.isNode()) {
+                        nodeId = (NodeId) state.getId();
+                    } else {
+                        nodeId = state.getParentId();
+                    }
+                    // remove any descendant candidates
+                    boolean skip = false;
+                    for (NodeId id : candidateIds) {
+                        if (nodeId.equals(id) || hierMgr.isAncestor(id, nodeId)) {
+                            // already a candidate or a descendant thereof
+                            // => skip
+                            skip = true;
+                            break;
+                        }
+                        if (hierMgr.isAncestor(nodeId, id)) {
+                            // candidate is a descendant => remove
+                            candidateIds.remove(id);
+                        }
+                    }
+                    if (!skip) {
+                        // add to candidates
+                        candidateIds.add(nodeId);
+                    }
+                }
+            }
+
+            if (candidateIds.size() == 1) {
+                return candidateIds.iterator().next();
+            }
+
+            // pick (any) candidate with shortest path to start with
+            NodeId candidateId = null;
+            for (NodeId id : candidateIds) {
+                if (candidateId == null) {
+                    candidateId = id;
+                } else {
+                    if (hierMgr.getDepth(id) < hierMgr.getDepth(candidateId)) {
+                        candidateId = id;
+                    }
+                }
+            }
+
+            // starting with this candidate closest to root, find first parent
+            // which is an ancestor of all candidates
+            NodeState state = (NodeState) getItemState(candidateId);
+            NodeId parentId = state.getParentId();
+            boolean continueWithParent = false;
+            while (parentId != null) {
+                for (NodeId id : candidateIds) {
+                    if (hierMgr.getRelativeDepth(parentId, id) == -1) {
+                        continueWithParent = true;
+                        break;
+                    }
+                }
+                if (continueWithParent) {
+                    state = (NodeState) getItemState(candidateId);
+                    parentId = state.getParentId();
+                    continueWithParent = false;
+                } else {
+                    break;
+                }
+            }
+            return parentId;
+        } catch (ItemStateException e) {
+            throw new RepositoryException("failed to determine common root of transient changes", e);
+        }
+    }
+
+    /**

MOV26 MOV26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS31 INS29 INS83 INS43 INS42 INS43 INS8 INS65 INS65 INS65 INS42 INS42 INS25 INS25 INS60 INS54 UPD66 INS66 INS66 INS66 INS66 INS42 INS66 INS32 INS8 INS32 INS8 INS74 INS59 INS8 INS12 INS70 INS42 INS42 INS41 INS42 INS42 INS32 INS41 INS43 INS43 INS42 INS14 INS60 INS70 INS25 INS60 INS70 INS60 INS60 INS60 INS61 INS41 INS44 INS8 INS44 MOV32 MOV8 INS33 INS42 INS42 INS32 INS42 INS42 INS74 INS43 INS59 INS44 INS32 INS8 INS27 INS8 INS43 INS59 INS44 INS42 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS42 INS43 INS42 INS53 MOV43 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 INS25 INS32 INS34 INS41 INS42 INS42 INS33 INS43 INS42 INS25 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS9 INS42 INS33 INS70 INS25 INS42 INS14 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS32 INS42 INS27 INS8 INS8 INS43 INS32 INS42 INS42 INS44 INS42 INS8 INS42 INS8 INS8 INS43 INS45 INS42 INS32 INS40 INS60 INS25 INS60 INS70 INS25 INS32 INS42 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS43 INS42 INS25 INS21 INS21 INS21 INS10 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS42 INS42 INS7 INS27 INS8 INS42 INS27 INS8 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS9 INS43 INS42 INS25 INS25 INS42 INS21 INS42 INS42 INS32 INS32 INS21 INS32 INS38 INS21 INS10 INS42 INS11 INS42 INS32 INS42 INS9 INS7 INS7 INS42 INS27 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS34 INS7 INS43 INS32 INS42 INS42 INS42 INS11 INS42 INS32 INS32 INS32 INS21 INS10 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61