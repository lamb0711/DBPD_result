JCR-2781 FileDataStore performance improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1022094 13f79535-47bb-0310-9956-ffa450edef68

+        return getRecord(identifier, true);
+    }
+
+    /**
+     * Get a data record for the given identifier.
+     * This method only checks if the file exists if the verify flag is set.
+     * If the verify flag is set and the file doesn't exist, the method returns null.
+     *
+     * @param identifier the identifier
+     * @param verify whether to check if the file exists
+     * @return the data record or null
+     */
+    private DataRecord getRecord(DataIdentifier identifier, boolean verify) throws DataStoreException {
-            if (!file.exists()) {
+            if (verify && !file.exists()) {
-            if (minModifiedDate != 0 && file.canWrite()) {
+            if (minModifiedDate != 0) {
+                // only check when running garbage collection
-                } 
+                }
-                	    // The current GC approach depends on this call succeeding
-                    if (!file.setLastModified(System.currentTimeMillis() + ACCESS_TIME_RESOLUTION)) {
-                        throw new DataStoreException("Failed to update record modified date: " + identifier);
+                    // in most cases we can write to the file system, that's why we
+                    // don't call File.canWrite earlier (to save a system call)
+                    if (file.canWrite()) {
+                	        // The current GC approach depends on this call succeeding
+                        if (!file.setLastModified(System.currentTimeMillis() + ACCESS_TIME_RESOLUTION)) {
+                            throw new DataStoreException("Failed to update record modified date: " + identifier);
+                        }
-        DataRecord record = getRecordIfStored(identifier);
-        if (record == null) {
-            throw new DataStoreException("Record not found: " + identifier);
-        }
-        return record;
+        return getRecord(identifier, false);
-                File parent = file.getParentFile();
-                if (!parent.isDirectory()) {
-                    parent.mkdirs();
-                }
-                    temporary.renameTo(file);
-                    if (!file.exists()) {
+                    File parent = file.getParentFile();
+                    parent.mkdirs();
+                    if (temporary.renameTo(file)) {
+                        // no longer need to delete the temporary file
+                        temporary = null;
+                    } else {
-                // Sanity checks on the record file. These should never fail,
-                // but better safe than sorry...
-                if (!file.isFile()) {
-                    throw new IOException("Not a file: " + file);
-                }
+                    // Sanity checks on the record file. These should never fail,
+                    // but better safe than sorry...
+                    if (!file.isFile()) {
+                        throw new IOException("Not a file: " + file);
+                    }
-        if (!directory.isDirectory()) {
-            directory.mkdirs();
-        }
+        // the directory is already created in the init method

INS31 INS83 MOV43 INS42 INS44 MOV43 INS8 INS29 UPD83 UPD42 INS44 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS39 INS42 INS41 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS32 INS42 INS42 INS9 UPD42 MOV42 MOV42 INS9 INS27 MOV27 INS42 MOV38 INS8 INS25 MOV60 MOV21 MOV25 MOV32 MOV8 MOV32 INS8 INS21 INS7 INS42 INS33 DEL27 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25