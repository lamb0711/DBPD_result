JCR-2238: Binary throws NullPointerException

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@802676 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.ByteArrayOutputStream;
-import java.io.UnsupportedEncodingException;
-     * Returns a String representation of this value.
-     *
-     * @return String representation of this value.
-     * @throws RepositoryException
-     */
-    String getString() throws RepositoryException {
-        // TODO: review again. currently the getString method of the JCR Value is delegated to the QValue.
-        InputStream stream = getStream();
-        try {
-            ByteArrayOutputStream out = new ByteArrayOutputStream();
-            byte[] buffer = new byte[8192];
-            int read;
-            while ((read = stream.read(buffer)) > 0) {
-                out.write(buffer, 0, read);
-            }
-            byte[] data = out.toByteArray();
-            return new String(data, "UTF-8");
-        } catch (UnsupportedEncodingException e) {
-            throw new RepositoryException("UTF-8 not supported on this platform", e);
-        } catch (IOException e) {
-            throw new RepositoryException("conversion from stream to string failed", e);
-        } finally {
-            try {
-                if (stream != null) {
-                    stream.close();
-                }
-            } catch (IOException e) {
-                // ignore
-            }
-        }
-    }
-
-    /**
-     * Frees temporarily allocated resources such as temporary file, buffer, etc.
-     * If this <code>BLOBFileValue</code> is backed by a persistent resource
-     * calling this method will have no effect.
-     *
-     * @see #delete(boolean)
-     */
-    abstract void discard();
-
-    /**
-     * Checks if this object is immutable.
-     * Immutable objects can not change and can safely copied.
+     * Returns a copy of this BLOB file value. The returned copy may also be
+     * this object. However an implementation must guarantee that the returned
+     * value has state that is independent from this value. Immutable values
+     * can savely return the same value (this object).
+     * <p/>
+     * Specifically, {@link #dispose()} on the returned value must not have an
+     * effect on this value!
-     * @return true if the object is immutable
+     * @return a value that can be used independently from this value.
+     * @throws RepositoryException if an error occur while copying this value.
-    abstract boolean isImmutable();
+    abstract BLOBFileValue copy() throws RepositoryException;
-    public abstract long getSize();
-
-    public abstract InputStream getStream() throws RepositoryException;
-
-    public void dispose() {
-        discard();
-    }
-

INS31 INS29 MOV83 UPD43 MOV43 UPD42 MOV42 MOV43 INS65 MOV65 INS65 UPD42 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS66 UPD66 MOV66 INS65 UPD66 MOV66 UPD66 MOV66 UPD66 INS42 INS66 MOV68 UPD42 DEL40 DEL26 DEL40 DEL26 DEL65 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL61 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL54 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL39 DEL69 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL83 DEL39 DEL42 DEL31 DEL83 DEL83 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31