* Remove fieldType. this attribute is not used in the object mapping. 
* Review one constructor in ObjectContentManagerImpl.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@563252 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.ocm.exception.JcrMappingException;
-import org.apache.jackrabbit.ocm.reflection.ReflectionUtils;
-    private String fieldName;
-    private String fieldType;
-    private Class fieldTypeClass;
+    private String fieldName;    
-    /**
-     * @return the primitive or fully qualified class of the field
-     * or <tt>null</tt> if not specified in the mapping
-     */
-    public String getFieldType() {
-        return this.fieldType;
-    }
-
-    /**
-     * Sets the type of the field. It supports primitive types, specified as
-     * int, long, etc or fully qualified class names.
-     *
-     * @param fieldType the type of the field
-     */
-    public void setFieldType(String fieldType) {
-        this.fieldType = fieldType;
-    }
-
-    /**
-     * @return the field class of the field
-     * or <tt>null</tt> if not specified in the mapping
-     * or if the class was not found
-     */
-    public Class getFieldTypeClass() {
-        if (this.fieldType == null) {
-            return null;
-        }
-        if (this.fieldTypeClass == null) {
-            this.fieldTypeClass = loadFieldTypeClass();
-        }
-
-        return this.fieldTypeClass;
-    }
-
-	/**
-     * Initialize the fieldTypeClass.
-     *
-     * @return the primitive class or the class accordign to fieldType
-     */
-    private Class loadFieldTypeClass() {
-        if (this.fieldType == null) {
-            return null;
-        }
-        if ("byte".equals(this.fieldType)) {
-            return byte.class;
-        }
-        else if ("short".equals(this.fieldType)) {
-            return short.class;
-        }
-        else if ("int".equals(this.fieldType)) {
-            return int.class;
-        }
-        else if ("long".equals(this.fieldType)) {
-            return long.class;
-        }
-        else if ("float".equals(this.fieldType)) {
-            return float.class;
-        }
-        else if ("double".equals(this.fieldType)) {
-            return double.class;
-        }
-        else if ("char".equals(this.fieldType)) {
-            return char.class;
-        }
-        else if ("boolean".equals(this.fieldType)) {
-            return boolean.class;
-        }
-        else {
-            try {
-                return ReflectionUtils.forName(this.fieldType);
-            }
-            catch (JcrMappingException jme) {
-                ; // nothing to do; it will be dynamically determined
-            }
-        }
-
-        return null;
+	
+    public void setJcrValueConstraints(String jcrValueConstraints) {                
+    	if (jcrValueConstraints != null && ! jcrValueConstraints.equals(""))
+    	{
+    		this.jcrValueConstraints = jcrValueConstraints.split(" *, *");
+    	}
+

INS31 MOV83 MOV39 UPD42 MOV42 MOV44 MOV8 UPD42 INS25 INS27 INS8 INS27 INS38 INS21 INS42 MOV33 INS32 INS7 UPD42 MOV42 MOV42 UPD45 MOV45 INS22 INS32 MOV52 UPD42 MOV42 UPD42 MOV42 INS42 UPD45 MOV45 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL27 DEL33 DEL41 DEL8 DEL25 DEL45 DEL52 DEL42 DEL22 DEL32 DEL39 DEL57 DEL41 DEL8 DEL45 DEL52 DEL42 DEL22 DEL32 DEL39 DEL57 DEL41 DEL8 DEL42 DEL22 DEL32 DEL39 DEL57 DEL41 DEL8 DEL45 DEL52 DEL42 DEL22 DEL32 DEL39 DEL57 DEL41 DEL8 DEL45 DEL42 DEL52 DEL42 DEL22 DEL32 DEL39 DEL57 DEL41 DEL8 DEL45 DEL42 DEL52 DEL42 DEL22 DEL32 DEL39 DEL57 DEL41 DEL8 DEL42 DEL52 DEL42 DEL22 DEL32 DEL39 DEL57 DEL41 DEL8 DEL45 DEL42 DEL52 DEL42 DEL22 DEL32 DEL39 DEL57 DEL41 DEL8 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL20 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL33 DEL41 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL31