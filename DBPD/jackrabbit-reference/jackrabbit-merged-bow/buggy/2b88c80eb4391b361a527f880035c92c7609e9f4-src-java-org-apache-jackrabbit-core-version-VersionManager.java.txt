- enhancing versioning to work with all workspaces

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@56758 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Workspace;
-     * the uuid of the system root node
-     */
-    private final String rootId;
-
-    /**
-     * @param rootId the uuid of the version history root
-    protected VersionManager(PersistentVersionManager vMgr, String rootId) {
+    protected VersionManager(PersistentVersionManager vMgr) {
-        this.rootId = rootId;
-    public VirtualItemStateProvider getVirtualItemStateProvider(ItemStateProvider base) {
+    public VirtualItemStateProvider getVirtualItemStateProvider(SessionImpl session, ItemStateProvider base) {
+                // check, if workspace of session has history root
+                NodeImpl systemRoot = ((RepositoryImpl) session.getRepository()).getSystemRootNode(session);
+                if (!systemRoot.hasNode(VersionManager.VERSION_HISTORY_ROOT_NAME)) {
+                    // if not exist, create
+                    systemRoot.addNode(VersionManager.VERSION_HISTORY_ROOT_NAME, NodeTypeRegistry.NT_UNSTRUCTURED);
+                }
+                systemRoot.save();
+                String rootId = systemRoot.getNode(VersionManager.VERSION_HISTORY_ROOT_NAME).internalGetUUID();
+
-        mapVersionHistory(history);
+            vMgr.onVersionHistoryModified(version.getVersionHistory());
+
-            mapVersion(vhNode, version);
+
+     * Called when a internal version history has changed its internal structure,
+     * and the structure has to be remapped to the content.
+     * @param vh
+     * @throws RepositoryException
+     */
+    protected void onVersionHistoryModified(InternalVersionHistory vh) throws RepositoryException {
+        mapVersionHistory(vh);
+    }
+
+    /**
-            VirtualNodeState vhNode = virtProvider.addNode(parent, historyNodeName, vh.getId(), NodeTypeRegistry.NT_VERSION_HISTORY, null);
+            VirtualNodeState vhNode;
+            if (parent.hasChildNodeEntry(historyNodeName)) {
+                vhNode = virtProvider.getNode(parent, historyNodeName, 1);
+            } else {
+                vhNode = virtProvider.addNode(parent, historyNodeName, vh.getId(), NodeTypeRegistry.NT_VERSION_HISTORY, null);
+            }
-            VirtualNodeState vNode = virtProvider.addNode(vhNode, version.getName(), version.getId(), NodeTypeRegistry.NT_VERSION, null);
+            VirtualNodeState vNode;
+            if (vhNode.hasChildNodeEntry(version.getName())) {
+                vNode = virtProvider.getNode(vhNode, version.getName(), 1);
+            } else {
+                vNode = virtProvider.addNode(vhNode, version.getName(), version.getId(), NodeTypeRegistry.NT_VERSION, null);
+                // initialize the version
+                virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_CREATED, InternalValue.create(version.getCreated()));
-            // initialize the version
-            virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_CREATED, InternalValue.create(version.getCreated()));
-
-            // initialize the primary properties
-            InternalFrozenNode fNode = version.getFrozenNode();
-            virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(fNode.getFrozenUUID()));
-            virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE, InternalValue.create(fNode.getFrozenPrimaryType()));
-            virtProvider.setPropertyValues(vNode, VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, InternalValue.create(fNode.getFrozenMixinTypes()));
+                // initialize the primary properties
+                InternalFrozenNode fNode = version.getFrozenNode();
+                virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(fNode.getFrozenUUID()));
+                virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE, InternalValue.create(fNode.getFrozenPrimaryType()));
+                virtProvider.setPropertyValues(vNode, VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, InternalValue.create(fNode.getFrozenMixinTypes()));
+                if (!version.isRootVersion()) {
+                    // don't map for root verion
+                    mapFrozenNode(vNode, PersistentVersionManager.NODENAME_FROZEN, fNode);
+                }
+            }
-            if (!version.isRootVersion()) {
-                // don't map for root verion
-                mapFrozenNode(vNode, PersistentVersionManager.NODENAME_FROZEN, fNode);
-            }
-

INS26 INS40 INS31 INS44 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS43 INS42 MOV65 INS65 INS65 INS43 INS42 INS42 INS21 INS42 MOV60 INS66 UPD66 INS42 INS42 UPD42 MOV42 INS32 INS8 INS42 INS42 INS25 INS60 INS25 MOV21 MOV43 INS32 INS8 INS8 MOV43 INS59 INS32 INS8 MOV8 INS60 INS25 INS21 INS60 UPD42 UPD42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS32 INS21 INS21 INS43 INS59 INS38 INS8 INS32 MOV43 INS59 MOV42 INS42 INS7 INS7 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS32 INS42 INS32 INS42 MOV32 INS42 INS32 INS42 MOV32 INS36 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS34 INS11 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL29 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL42 DEL66 DEL65 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL59 DEL60