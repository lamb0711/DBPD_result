redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-class TransientItemStateManager extends ItemStateCache implements ItemStateProvider {
+class TransientItemStateManager extends ItemStateCache implements ItemStateManager {
-        ps.println("entries in cache:");
+        ps.print("[transient] ");
+        super.dump(ps);
-        Iterator iter = keys();
-        while (iter.hasNext()) {
-            ItemId id = (ItemId) iter.next();
-            ItemState state = retrieve(id);
-            dumpItemState(id, state, ps);
-        }
-
-        ps.println();
-        ps.println("entries in attic:");
-        ps.println();
-        iter = attic.keys();
-        while (iter.hasNext()) {
-            ItemId id = (ItemId) iter.next();
-            ItemState state = attic.retrieve(id);
-            dumpItemState(id, state, ps);
-        }
-    }
-
-    private void dumpItemState(ItemId id, ItemState state, PrintStream ps) {
-        ps.print(state.isNode() ? "Node: " : "Prop: ");
-        switch (state.getStatus()) {
-            case ItemState.STATUS_EXISTING:
-                ps.print("[existing]           ");
-                break;
-            case ItemState.STATUS_EXISTING_MODIFIED:
-                ps.print("[existing, modified] ");
-                break;
-            case ItemState.STATUS_EXISTING_REMOVED:
-                ps.print("[existing, removed]  ");
-                break;
-            case ItemState.STATUS_NEW:
-                ps.print("[new]                ");
-                break;
-            case ItemState.STATUS_STALE_DESTROYED:
-                ps.print("[stale, destroyed]   ");
-                break;
-            case ItemState.STATUS_STALE_MODIFIED:
-                ps.print("[stale, modified]    ");
-                break;
-            case ItemState.STATUS_UNDEFINED:
-                ps.print("[undefined]          ");
-                break;
-        }
-        ps.println(id + " (" + state + ")");
+        ps.print("[attic]     ");
+        attic.dump(ps);
-     * @see ItemStateProvider#getItemState(ItemId)
+     * @see ItemStateManager#getItemState(ItemId)
-     * @see ItemStateProvider#hasItemState(ItemId)
+     * @see ItemStateManager#hasItemState(ItemId)
-     * @see ItemStateProvider#getItemStateInAttic(ItemId)
+     * @see ItemStateManager#getNodeReferences
-    public ItemState getItemStateInAttic(ItemId id)
+    public NodeReferences getNodeReferences(NodeId targetId)
-        ItemState state = attic.retrieve(id);
-        if (state != null) {
-            return state;
-        } else {
-            throw new NoSuchItemStateException(id.toString());
-        }
+
+        throw new ItemStateException("getNodeReferences() not implemented");
-     * @see ItemStateProvider#hasItemStateInAttic(ItemId)
+     * @see ItemStateManager#beginUpdate
-    public boolean hasItemStateInAttic(ItemId id) {
-        return attic.isCached(id);
+    public UpdateOperation beginUpdate() throws ItemStateException {
+        throw new ItemStateException("beginUpdate() not implemented");
+
-        NodeState state = new NodeState(uuid, nodeTypeName, parentUUID, initialStatus);
+        NodeState state = new NodeState(uuid, nodeTypeName, parentUUID, initialStatus, true);
-        NodeState state = new NodeState(overlayedState, initialStatus);
+        NodeState state = new NodeState(overlayedState, initialStatus, true);
-        PropertyState state = new PropertyState(propName, parentUUID, initialStatus);
+        PropertyState state = new PropertyState(propName, parentUUID, initialStatus, true);
-        PropertyState state = new PropertyState(overlayedState, initialStatus);
+        PropertyState state = new PropertyState(overlayedState, initialStatus, true);
+    /**
+     * Return the attic item state provider that holds all items
+     * moved into the attic.
+     * @return attic
+     */
+    ItemStateManager getAttic() {
+        return attic;
+    }
+
-    class Attic extends ItemStateCache {
+    class Attic extends ItemStateCache implements ItemStateManager {
+
+        /**
+         * @see ItemStateManager#getItemState
+         */
+        public ItemState getItemState(ItemId id)
+                throws NoSuchItemStateException, ItemStateException {
+
+            ItemState state = retrieve(id);
+            if (state != null) {
+                return state;
+            } else {
+                throw new NoSuchItemStateException(id.toString());
+            }
+        }
+
+        /**
+         * @see ItemStateManager#hasItemState
+         */
+        public boolean hasItemState(ItemId id) {
+            return isCached(id);
+        }
+
+        /**
+         * @see ItemStateManager#getNodeReferences
+         */
+        public NodeReferences getNodeReferences(NodeId targetId)
+                throws NoSuchItemStateException, ItemStateException {
+
+            throw new ItemStateException("getNodeReferences() not implemented");
+        }
+
+        /**
+         * @see ItemStateManager#beginUpdate
+         */
+        public UpdateOperation beginUpdate() throws ItemStateException {
+            throw new ItemStateException("beginUpdate() not implemented");
+        }

UPD43 INS31 INS31 INS31 INS31 INS55 UPD42 INS29 MOV44 MOV43 INS43 MOV29 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 MOV8 INS29 INS83 INS43 INS42 MOV44 MOV43 MOV43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS43 INS42 INS8 INS42 MOV43 INS43 MOV31 MOV31 MOV31 INS31 INS31 MOV21 MOV21 INS65 INS42 INS65 UPD42 MOV42 UPD43 UPD42 INS53 INS65 INS42 INS42 INS53 INS65 INS65 INS42 INS41 UPD42 MOV42 UPD42 MOV44 MOV43 UPD42 MOV44 INS29 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS48 INS68 INS42 INS67 UPD42 INS14 INS67 INS14 MOV43 MOV43 MOV43 MOV43 INS66 INS66 INS66 INS42 INS65 INS42 INS43 INS42 INS42 INS42 INS53 INS65 INS42 INS42 INS53 UPD42 UPD45 INS42 INS42 UPD42 UPD45 UPD42 UPD42 INS42 INS42 MOV69 UPD42 UPD42 INS42 INS42 INS43 INS45 INS42 INS42 INS43 INS45 INS67 INS67 INS67 INS42 INS14 INS67 INS14 INS42 INS42 MOV43 INS9 MOV43 INS9 MOV43 INS9 MOV43 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS43 INS45 INS42 INS42 INS43 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL45 DEL16 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL49 DEL42 DEL42 DEL45 DEL32 DEL21 DEL10 DEL40 DEL49 DEL42 DEL42 DEL45 DEL32 DEL21 DEL10 DEL40 DEL49 DEL42 DEL42 DEL45 DEL32 DEL21 DEL10 DEL40 DEL49 DEL42 DEL42 DEL45 DEL32 DEL21 DEL10 DEL40 DEL49 DEL42 DEL42 DEL45 DEL32 DEL21 DEL10 DEL40 DEL49 DEL42 DEL42 DEL45 DEL32 DEL21 DEL10 DEL40 DEL49 DEL42 DEL42 DEL45 DEL32 DEL21 DEL10 DEL50 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL42 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL42 DEL42 DEL55