- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.3 $, $Date: 2004/08/30 11:13:47 $
-				    boolean noRecurse, boolean binaryAsLink,
-				    ItemStateProvider stateProvider,
-				    NamespaceRegistryImpl nsReg,
-				    AccessManagerImpl accessMgr,
-				    HierarchyManager hierMgr,
-				    ContentHandler contentHandler) {
-	super(nodeState, nodeName, noRecurse, binaryAsLink,
-		stateProvider, nsReg, accessMgr, contentHandler);
-	this.hierMgr = hierMgr;
+                                    boolean noRecurse, boolean binaryAsLink,
+                                    ItemStateProvider stateProvider,
+                                    NamespaceRegistryImpl nsReg,
+                                    AccessManagerImpl accessMgr,
+                                    HierarchyManager hierMgr,
+                                    ContentHandler contentHandler) {
+        super(nodeState, nodeName, noRecurse, binaryAsLink,
+                stateProvider, nsReg, accessMgr, contentHandler);
+        this.hierMgr = hierMgr;
-	    throws RepositoryException, SAXException {
-	AttributesImpl attrs = new AttributesImpl();
-	// name attribute
-	String nodeName;
-	try {
-	    if (state.getParentUUIDs().size() == 0) {
-		// use dummy name for root node
-		nodeName = NODENAME_ROOT.toJCRName(nsReg);
-	    } else {
-		nodeName = name.toJCRName(nsReg);
-	    }
-	} catch (NoPrefixDeclaredException npde) {
-	    // should never get here...
-	    String msg = "internal error: encountered unregistered namespace";
-	    log.error(msg, npde);
-	    throw new RepositoryException(msg, npde);
-	}
-	attrs.addAttribute(NS_SV_URI, NAME_ATTRIBUTE, NS_SV_PREFIX + ":" + NAME_ATTRIBUTE, CDATA_TYPE, nodeName);
-	// start node element
-	contentHandler.startElement(NS_SV_URI, NODE_ELEMENT, NS_SV_PREFIX + ":" + NODE_ELEMENT, attrs);
+            throws RepositoryException, SAXException {
+        AttributesImpl attrs = new AttributesImpl();
+        // name attribute
+        String nodeName;
+        try {
+            if (state.getParentUUIDs().size() == 0) {
+                // use dummy name for root node
+                nodeName = NODENAME_ROOT.toJCRName(nsReg);
+            } else {
+                nodeName = name.toJCRName(nsReg);
+            }
+        } catch (NoPrefixDeclaredException npde) {
+            // should never get here...
+            String msg = "internal error: encountered unregistered namespace";
+            log.error(msg, npde);
+            throw new RepositoryException(msg, npde);
+        }
+        attrs.addAttribute(NS_SV_URI, NAME_ATTRIBUTE, NS_SV_PREFIX + ":" + NAME_ATTRIBUTE, CDATA_TYPE, nodeName);
+        // start node element
+        contentHandler.startElement(NS_SV_URI, NODE_ELEMENT, NS_SV_PREFIX + ":" + NODE_ELEMENT, attrs);
-	    throws RepositoryException, SAXException {
-	// nop
+            throws RepositoryException, SAXException {
+        // nop
-	    throws RepositoryException, SAXException {
-	// nop
+            throws RepositoryException, SAXException {
+        // nop
-	    throws RepositoryException, SAXException {
-	// end node element
-	contentHandler.endElement(NS_SV_URI, NODE_ELEMENT, NS_SV_PREFIX + ":" + NODE_ELEMENT);
+            throws RepositoryException, SAXException {
+        // end node element
+        contentHandler.endElement(NS_SV_URI, NODE_ELEMENT, NS_SV_PREFIX + ":" + NODE_ELEMENT);
-	    throws RepositoryException, SAXException {
-	String name;
-	try {
-	    name = state.getName().toJCRName(nsReg);
-	} catch (NoPrefixDeclaredException npde) {
-	    // should never get here...
-	    String msg = "internal error: encountered unregistered namespace";
-	    log.error(msg, npde);
-	    throw new RepositoryException(msg, npde);
-	}
-	AttributesImpl attrs = new AttributesImpl();
-	// name attribute
-	attrs.addAttribute(NS_SV_URI, NAME_ATTRIBUTE, NS_SV_PREFIX + ":" + NAME_ATTRIBUTE, CDATA_TYPE, name);
-	// type attribute
-	int type = state.getType();
-	String typeName;
-	try {
-	    typeName = PropertyType.nameFromValue(type);
-	} catch (IllegalArgumentException iae) {
-	    // should never be getting here
-	    throw new RepositoryException("unexpected property-type ordinal: " + type, iae);
-	}
-	if (type == PropertyType.BINARY && binaryAsLink) {
-	    typeName = PropertyType.TYPENAME_PATH;
-	}
-	attrs.addAttribute(NS_SV_URI, TYPE_ATTRIBUTE, NS_SV_PREFIX + ":" + TYPE_ATTRIBUTE, ENUMERATION_TYPE, typeName);
+            throws RepositoryException, SAXException {
+        String name;
+        try {
+            name = state.getName().toJCRName(nsReg);
+        } catch (NoPrefixDeclaredException npde) {
+            // should never get here...
+            String msg = "internal error: encountered unregistered namespace";
+            log.error(msg, npde);
+            throw new RepositoryException(msg, npde);
+        }
+        AttributesImpl attrs = new AttributesImpl();
+        // name attribute
+        attrs.addAttribute(NS_SV_URI, NAME_ATTRIBUTE, NS_SV_PREFIX + ":" + NAME_ATTRIBUTE, CDATA_TYPE, name);
+        // type attribute
+        int type = state.getType();
+        String typeName;
+        try {
+            typeName = PropertyType.nameFromValue(type);
+        } catch (IllegalArgumentException iae) {
+            // should never be getting here
+            throw new RepositoryException("unexpected property-type ordinal: " + type, iae);
+        }
+        if (type == PropertyType.BINARY && binaryAsLink) {
+            typeName = PropertyType.TYPENAME_PATH;
+        }
+        attrs.addAttribute(NS_SV_URI, TYPE_ATTRIBUTE, NS_SV_PREFIX + ":" + TYPE_ATTRIBUTE, ENUMERATION_TYPE, typeName);
-	// start property element
-	contentHandler.startElement(NS_SV_URI, PROPERTY_ELEMENT, NS_SV_PREFIX + ":" + PROPERTY_ELEMENT, attrs);
+        // start property element
+        contentHandler.startElement(NS_SV_URI, PROPERTY_ELEMENT, NS_SV_PREFIX + ":" + PROPERTY_ELEMENT, attrs);
-	// values
-	InternalValue[] values = state.getValues();
-	if (values != null && values.length > 0) {
-	    for (int i = 0; i < values.length; i++) {
-		if (values[i] != null) {
-		    // start value element
-		    contentHandler.startElement(NS_SV_URI, VALUE_ELEMENT, NS_SV_PREFIX + ":" + VALUE_ELEMENT, new AttributesImpl());
+        // values
+        InternalValue[] values = state.getValues();
+        if (values != null && values.length > 0) {
+            for (int i = 0; i < values.length; i++) {
+                if (values[i] != null) {
+                    // start value element
+                    contentHandler.startElement(NS_SV_URI, VALUE_ELEMENT, NS_SV_PREFIX + ":" + VALUE_ELEMENT, new AttributesImpl());
-		    // characters
-		    if (type == PropertyType.BINARY) {
-			if (binaryAsLink) {
-			    String path;
-			    try {
-				path = hierMgr.getPath(new PropertyId(state.getParentUUID(), state.getName())).toJCRPath(nsReg);
-			    } catch (NoPrefixDeclaredException npde) {
-				// should never get here...
-				String msg = "internal error: encountered unregistered namespace";
-				log.error(msg, npde);
-				throw new RepositoryException(msg, npde);
-			    }
-			    char[] chars = path.toCharArray();
-			    contentHandler.characters(chars, 0, chars.length);
-			} else {
-			    // binary data, base64 encoding required
-			    BLOBFileValue blob = (BLOBFileValue) values[i].internalValue();
-			    InputStream in = blob.getStream();
-			    Writer writer = new Writer() {
-				public void close() /*throws IOException*/ {
-				}
+                    // characters
+                    if (type == PropertyType.BINARY) {
+                        if (binaryAsLink) {
+                            String path;
+                            try {
+                                path = hierMgr.getPath(new PropertyId(state.getParentUUID(), state.getName())).toJCRPath(nsReg);
+                            } catch (NoPrefixDeclaredException npde) {
+                                // should never get here...
+                                String msg = "internal error: encountered unregistered namespace";
+                                log.error(msg, npde);
+                                throw new RepositoryException(msg, npde);
+                            }
+                            char[] chars = path.toCharArray();
+                            contentHandler.characters(chars, 0, chars.length);
+                        } else {
+                            // binary data, base64 encoding required
+                            BLOBFileValue blob = (BLOBFileValue) values[i].internalValue();
+                            InputStream in = blob.getStream();
+                            Writer writer = new Writer() {
+                                public void close() /*throws IOException*/ {
+                                }
-				public void flush() /*throws IOException*/ {
-				}
+                                public void flush() /*throws IOException*/ {
+                                }
-				public void write(char[] cbuf, int off, int len) throws IOException {
-				    try {
-					contentHandler.characters(cbuf, off, len);
-				    } catch (SAXException se) {
-					throw new IOException(se.toString());
-				    }
-				}
-			    };
-			    try {
-				Base64.encode(in, writer);
-				in.close();
-				writer.close();
-			    } catch (IOException ioe) {
-				// check if the exception wraps a SAXException
-				Throwable t = ioe.getCause();
-				if (t != null && t instanceof SAXException) {
-				    throw (SAXException) t;
-				} else {
-				    throw new SAXException(ioe);
-				}
-			    }
-			}
-		    } else {
-			char[] chars = values[i].toJCRValue(nsReg).getString().toCharArray();
-			contentHandler.characters(chars, 0, chars.length);
-		    }
+                                public void write(char[] cbuf, int off, int len) throws IOException {
+                                    try {
+                                        contentHandler.characters(cbuf, off, len);
+                                    } catch (SAXException se) {
+                                        throw new IOException(se.toString());
+                                    }
+                                }
+                            };
+                            try {
+                                Base64.encode(in, writer);
+                                in.close();
+                                writer.close();
+                            } catch (IOException ioe) {
+                                // check if the exception wraps a SAXException
+                                Throwable t = ioe.getCause();
+                                if (t != null && t instanceof SAXException) {
+                                    throw (SAXException) t;
+                                } else {
+                                    throw new SAXException(ioe);
+                                }
+                            }
+                        }
+                    } else {
+                        char[] chars = values[i].toJCRValue(nsReg).getString().toCharArray();
+                        contentHandler.characters(chars, 0, chars.length);
+                    }
-		    // end value element
-		    contentHandler.endElement(NS_SV_URI, VALUE_ELEMENT, NS_SV_PREFIX + ":" + VALUE_ELEMENT);
-		}
-	    }
-	}
+                    // end value element
+                    contentHandler.endElement(NS_SV_URI, VALUE_ELEMENT, NS_SV_PREFIX + ":" + VALUE_ELEMENT);
+                }
+            }
+        }
-	    throws RepositoryException, SAXException {
-	contentHandler.endElement(NS_SV_URI, PROPERTY_ELEMENT, NS_SV_PREFIX + ":" + PROPERTY_ELEMENT);
+            throws RepositoryException, SAXException {
+        contentHandler.endElement(NS_SV_URI, PROPERTY_ELEMENT, NS_SV_PREFIX + ":" + PROPERTY_ELEMENT);

MOV26 DEL66 DEL65 DEL66 DEL65