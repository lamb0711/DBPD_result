JCR-1007: Move common implementations of SPI interfaces to spi-commons module

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@553507 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.QNodeTypeDefinition;
-import org.apache.jackrabbit.name.NameException;
+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.UnknownPrefixException;
-import javax.jcr.PropertyType;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Collections;
-class QNodeTypeDefinitionImpl implements QNodeTypeDefinition {
-
-    /**
-     * The name of the node definition.
-     */
-    private final QName name;
-
-    /**
-     * The names of the declared super types of this node type definition.
-     */
-    private final QName[] supertypes;
-
-    /**
-     * Indicates whether this is a mixin node type definition.
-     */
-    private final boolean isMixin;
-
-    /**
-     * Indicates whether this node type definition has orderable child nodes.
-     */
-    private final boolean hasOrderableChildNodes;
-
-    /**
-     * The name of the primary item or <code>null</code> if none is defined.
-     */
-    private final QName primaryItemName;
-
-    /**
-     * The list of property definitions.
-     */
-    private final QPropertyDefinition[] propertyDefs;
-
-    /**
-     * The list of child node definitions.
-     */
-    private final QNodeDefinition[] childNodeDefs;
-
-    /**
-     * Unmodifiable collection of dependent node type <code>QName</code>s.
-     * @see #getDependencies()
-     */
-    private Collection dependencies;
+class QNodeTypeDefinitionImpl
+        extends org.apache.jackrabbit.spi.commons.QNodeTypeDefinitionImpl {
-     * @throws RepositoryException if an error occurs while reading from
-     *                             <code>nt</code>.
+     * @throws RepositoryException    if an error occurs while reading from
+     *                                <code>nt</code>.
+     * @throws IllegalNameException   if <code>nt</code> contains an illegal
+     *                                name.
+     * @throws UnknownPrefixException if <code>nt</code> contains a name with an
+     *                                namespace prefix that is unknown to
+     *                                <code>nsResolver</code>.
-            throws RepositoryException {
-        try {
-            this.name = NameFormat.parse(nt.getName(), nsResolver);
-            NodeType[] superNts = nt.getDeclaredSupertypes();
-            this.supertypes = new QName[superNts.length];
-            for (int i = 0; i < superNts.length; i++) {
-                supertypes[i] = NameFormat.parse(superNts[i].getName(), nsResolver);
-            }
-            this.isMixin = nt.isMixin();
-            this.hasOrderableChildNodes = nt.hasOrderableChildNodes();
-            String primaryItemJcrName = nt.getPrimaryItemName();
-            if (primaryItemJcrName == null) {
-                this.primaryItemName = null;
-            } else {
-                this.primaryItemName = NameFormat.parse(primaryItemJcrName, nsResolver);
-            }
-        } catch (NameException e) {
-            throw new RepositoryException(e.getMessage(), e);
+            throws RepositoryException, IllegalNameException, UnknownPrefixException {
+        super(NameFormat.parse(nt.getName(), nsResolver),
+                getNodeTypeNames(nt.getDeclaredSupertypes(), nsResolver),
+                nt.isMixin(), nt.hasOrderableChildNodes(),
+                nt.getPrimaryItemName() != null ? NameFormat.parse(nt.getPrimaryItemName(), nsResolver) : null,
+                getQPropertyDefinitions(nt.getDeclaredPropertyDefinitions(), nsResolver, qValueFactory),
+                getQNodeDefinitions(nt.getDeclaredChildNodeDefinitions(), nsResolver));
+    }
+
+    /**
+     * Returns the qualified names of the passed node types using the namespace
+     * resolver to parse the names.
+     *
+     * @param nt         the node types
+     * @param nsResolver the namespace resolver.
+     * @return the qualified names of the node types.
+     * @throws IllegalNameException   if a node type returns an illegal name.
+     * @throws UnknownPrefixException if the nameo of a node type contains a
+     *                                prefix that is not known to <code>nsResolver</code>.
+     */
+    private static QName[] getNodeTypeNames(NodeType[] nt,
+                                     NamespaceResolver nsResolver)
+            throws IllegalNameException, UnknownPrefixException {
+        QName[] names = new QName[nt.length];
+        for (int i = 0; i < nt.length; i++) {
+            QName ntName = NameFormat.parse(nt[i].getName(), nsResolver);
+            names[i] = ntName;
-        PropertyDefinition[] propDefs = nt.getDeclaredPropertyDefinitions();
-        this.propertyDefs = new QPropertyDefinition[propDefs.length];
+        return names;
+    }
+
+    /**
+     * Returns qualified property definitions for JCR property definitions.
+     *
+     * @param propDefs   the JCR property definitions.
+     * @param nsResolver the namespace resolver.
+     * @param factory    the value factory.
+     * @return qualified property definitions.
+     * @throws RepositoryException    if an error occurs while converting the
+     *                                definitions.
+     * @throws IllegalNameException   if a property definition contains an
+     *                                illegal name.
+     * @throws UnknownPrefixException if the name of a property definition
+     *                                contains a namespace prefix that is now
+     *                                known to <code>nsResolver</code>.
+     */
+    private static QPropertyDefinition[] getQPropertyDefinitions(
+            PropertyDefinition[] propDefs,
+            NamespaceResolver nsResolver,
+            QValueFactory factory) throws RepositoryException, IllegalNameException, UnknownPrefixException {
+        QPropertyDefinition[] propertyDefs = new QPropertyDefinition[propDefs.length];
-            this.propertyDefs[i] = new QPropertyDefinitionImpl(
-                    propDefs[i], nsResolver, qValueFactory);
+            propertyDefs[i] = new QPropertyDefinitionImpl(propDefs[i], nsResolver, factory);
-        NodeDefinition[] nodeDefs = nt.getDeclaredChildNodeDefinitions();
-        this.childNodeDefs = new QNodeDefinition[nodeDefs.length];
+        return propertyDefs;
+    }
+    
+    /**
+     * Returns qualified node definitions for JCR node definitions.
+     *
+     * @param nodeDefs   the JCR node definitions.
+     * @param nsResolver the namespace resolver.
+     * @return qualified node definitions.
+     * @throws IllegalNameException   if the node definition contains an illegal
+     *                                name.
+     * @throws UnknownPrefixException if the name of a node definition contains
+     *                                a namespace prefix that is now known to
+     *                                <code>nsResolver</code>.
+     */
+    private static QNodeDefinition[] getQNodeDefinitions(
+            NodeDefinition[] nodeDefs,
+            NamespaceResolver nsResolver) throws IllegalNameException, UnknownPrefixException {
+        QNodeDefinition[] childNodeDefs = new QNodeDefinition[nodeDefs.length];
-            this.childNodeDefs[i] = new QNodeDefinitionImpl(nodeDefs[i], nsResolver);
+            childNodeDefs[i] = new QNodeDefinitionImpl(nodeDefs[i], nsResolver);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public QName getQName() {
-        return name;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public QName[] getSupertypes() {
-        QName[] sTypes = new QName[supertypes.length];
-        System.arraycopy(supertypes, 0, sTypes, 0, supertypes.length);
-        return sTypes;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean isMixin() {
-        return isMixin;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean hasOrderableChildNodes() {
-        return hasOrderableChildNodes;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public QName getPrimaryItemName() {
-        return primaryItemName;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public QPropertyDefinition[] getPropertyDefs() {
-        QPropertyDefinition[] pDefs = new QPropertyDefinition[propertyDefs.length];
-        System.arraycopy(propertyDefs, 0, pDefs, 0, propertyDefs.length);
-        return pDefs;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public QNodeDefinition[] getChildNodeDefs() {
-        QNodeDefinition[] cnDefs = new QNodeDefinition[childNodeDefs.length];
-        System.arraycopy(childNodeDefs, 0, cnDefs, 0, childNodeDefs.length);
-        return cnDefs;
-    }
-
-    /**
-     * TODO: generalize (this method is copied from spi2dav)
-     */
-    public Collection getDependencies() {
-        if (dependencies == null) {
-            Collection deps = new HashSet();
-            // supertypes
-            for (int i = 0; i < supertypes.length; i++) {
-                deps.add(supertypes[i]);
-            }
-            // child node definitions
-            for (int i = 0; i < childNodeDefs.length; i++) {
-                // default primary type
-                QName ntName = childNodeDefs[i].getDefaultPrimaryType();
-                if (ntName != null && !name.equals(ntName)) {
-                    deps.add(ntName);
-                }
-                // required primary type
-                QName[] ntNames = childNodeDefs[i].getRequiredPrimaryTypes();
-                for (int j = 0; j < ntNames.length; j++) {
-                    if (ntNames[j] != null && !name.equals(ntNames[j])) {
-                        deps.add(ntNames[j]);
-                    }
-                }
-            }
-            // property definitions
-            for (int i = 0; i < propertyDefs.length; i++) {
-                // REFERENCE value constraints
-                if (propertyDefs[i].getRequiredType() == PropertyType.REFERENCE) {
-                    String[] ca = propertyDefs[i].getValueConstraints();
-                    if (ca != null) {
-                        for (int j = 0; j < ca.length; j++) {
-                            QName ntName = QName.valueOf(ca[j]);
-                            if (!name.equals(ntName)) {
-                                deps.add(ntName);
-                            }
-                        }
-                    }
-                }
-            }
-            dependencies = Collections.unmodifiableCollection(deps);
-        }
-        return dependencies;
+        return childNodeDefs;

MOV26 UPD40 UPD40 UPD43 INS31 INS31 INS31 INS40 MOV29 INS83 INS42 MOV44 MOV44 MOV44 MOV43 INS43 INS43 INS8 INS29 INS83 INS83 MOV5 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 UPD83 MOV83 MOV5 UPD42 MOV42 INS44 INS44 INS44 MOV43 INS43 INS43 MOV8 INS29 INS83 INS83 MOV5 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS65 UPD42 MOV42 INS42 INS46 MOV65 INS65 INS65 UPD65 MOV65 INS65 INS65 MOV5 INS42 INS43 INS42 INS42 INS42 MOV60 INS24 MOV41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV5 INS42 INS43 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV24 MOV65 INS65 INS65 INS65 INS65 INS65 MOV5 INS42 INS43 INS42 INS42 UPD42 MOV42 MOV60 MOV24 INS41 UPD66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 MOV32 INS32 MOV32 MOV32 INS16 INS32 INS32 UPD66 INS66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 UPD66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 INS66 UPD42 MOV42 MOV5 MOV58 MOV27 MOV37 INS8 UPD42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 UPD42 MOV42 UPD42 MOV42 MOV5 UPD42 UPD66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 UPD42 MOV42 MOV5 INS42 INS42 MOV32 INS42 INS27 INS32 INS33 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV3 UPD40 INS60 MOV21 UPD42 MOV3 INS42 MOV3 INS32 INS33 INS42 INS42 MOV32 INS42 UPD40 MOV43 INS59 INS42 INS42 INS42 INS32 INS2 INS42 MOV2 MOV42 MOV42 MOV32 MOV42 INS42 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL66 DEL65 DEL29 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL65 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL65 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL42 DEL68 DEL65 DEL29 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL59 DEL60 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL59 DEL60 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL39 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL43 DEL85 DEL5 DEL42 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL52 DEL42 DEL22 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL32 DEL40 DEL27 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8