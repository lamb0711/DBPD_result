- Removed JCRQL implementation
- Added proper QName support to search
- redesigned parsing and formating of queries (better separation of abstract query tree and concrete syntax)
- Some improvements in SQL: colon is now supported in identifier without having to use double quotes, LIKE now supports escaping

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@125778 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+import org.apache.jackrabbit.core.QName;
-    private String nameTest;
+    private QName nameTest;
-    private int index = -1;
+    private int index = 0;
-    public LocationStepQueryNode(QueryNode parent, String nameTest, boolean descendants) {
+    public LocationStepQueryNode(QueryNode parent, QName nameTest, boolean descendants) {
-    public String getNameTest() {
+    public QName getNameTest() {
-    public void setNameTest(String nameTest) {
+    public void setNameTest(QName nameTest) {
-     * Sets the position index for this step.
+     * Sets the position index for this step. A value of 0 (zero) indicates
+     * that this location step has no position index assigned. That is, the
+     * step selects all same name siblings.
+     * @exception IllegalArgumentException if index < 0.
+        if (index < 0) {
+            throw new IllegalArgumentException("index < 0");
+        }
-     * Returns the position index for this step.
+     * Returns the position index for this step. A value of 0 (zero) indicates
+     * that this location step has no position index assigned. That is, the
+     * step selects all same name siblings.
-    /**
-     * Returns a JCRQL representation for this query node.
-     *
-     * @return a JCRQL representation for this query node.
-     */
-    public String toJCRQLString() {
-        StringBuffer sb = new StringBuffer();
-        if (nameTest == null) {
-            sb.append("*");
-        } else {
-            sb.append(nameTest);
-        }
-        if (index > -1) {
-            sb.append('[').append(index).append(']');
-        }
-        return sb.toString();
-    }
-
-    /**
-     * Returns a JCR SQL representation for this query node.
-     *
-     * @return a JCR SQL representation for this query node.
-     */
-    public String toJCRSQLString() {
-        StringBuffer sb = new StringBuffer();
-        if (nameTest == null) {
-            sb.append("*");
-        } else {
-            sb.append(nameTest);
-        }
-        if (index > -1) {
-            sb.append('[').append(index).append(']');
-        }
-        return sb.toString();
-    }
-
-    /**
-     * Returns an XPath representation for this query node.
-     *
-     * @return an XPath representation for this query node.
-     */
-    public String toXPathString() {
-        StringBuffer sb = new StringBuffer();
-        if (includeDescendants) {
-            sb.append('/');
-        }
-        if (nameTest == null) {
-            sb.append("*");
-        } else {
-            sb.append(nameTest);
-        }
-        if (index > -1) {
-            sb.append('[').append(index).append(']');
-        }
-        if (operands != null) {
-            for (Iterator it = operands.iterator(); it.hasNext();) {
-                QueryNode predicate = (QueryNode) it.next();
-                sb.append('[').append(predicate.toXPathString()).append(']');
-            }
-        }
-        return sb.toString();
-    }

UPD40 UPD43 UPD43 UPD42 INS34 UPD43 UPD42 UPD43 INS65 INS25 UPD42 UPD42 UPD66 INS66 INS66 INS42 INS66 INS27 INS8 UPD66 INS66 INS66 INS42 INS34 INS53 INS14 INS43 INS45 INS42 DEL34 DEL38 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL42 DEL13 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL42 DEL13 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL13 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL42 DEL13 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL13 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31