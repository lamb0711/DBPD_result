reworked transaction support, contributed by dominique

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151380 13f79535-47bb-0310-9956-ffa450edef68

-    protected abstract void makePersistent(UpdateOperation update);
+    protected abstract void makePersistent();
-                            NodeId targetId = new NodeId(uuid);
+                            NodeReferencesId id = new NodeReferencesId(uuid);
-                            if (dirtyNodeRefs.containsKey(targetId)) {
-                                refs = (NodeReferences) dirtyNodeRefs.get(targetId);
+                            if (dirtyNodeRefs.containsKey(id)) {
+                                refs = (NodeReferences) dirtyNodeRefs.get(id);
-                                    refs = stateMgr.getNodeReferences(targetId);
+                                    refs = stateMgr.getNodeReferences(id);
-                                    String msg = itemMgr.safeGetJCRPath(targetId)
+                                    String msg = itemMgr.safeGetJCRPath(id)
-                                dirtyNodeRefs.put(targetId, refs);
+                                dirtyNodeRefs.put(id, refs);
-                        NodeId targetId = new NodeId(uuid);
+                        NodeReferencesId id = new NodeReferencesId(uuid);
-                        if (!itemMgr.itemExists(targetId)) {
+                        if (!itemMgr.itemExists(id)) {
-                        NodeImpl target = (NodeImpl) itemMgr.getItem(targetId);
+                        NodeImpl target = (NodeImpl) itemMgr.getItem(id);
-                        if (dirtyNodeRefs.containsKey(targetId)) {
-                            refs = (NodeReferences) dirtyNodeRefs.get(targetId);
+                        if (dirtyNodeRefs.containsKey(id)) {
+                            refs = (NodeReferences) dirtyNodeRefs.get(id);
-                                refs = stateMgr.getNodeReferences(targetId);
+                                refs = stateMgr.getNodeReferences(id);
-                                String msg = itemMgr.safeGetJCRPath(targetId)
+                                String msg = itemMgr.safeGetJCRPath(id)
-                            dirtyNodeRefs.put(targetId, refs);
+                            dirtyNodeRefs.put(id, refs);
-                        NodeId targetId = new NodeId(uuid);
+                        NodeReferencesId id = new NodeReferencesId(uuid);
-                        if (dirtyNodeRefs.containsKey(targetId)) {
-                            refs = (NodeReferences) dirtyNodeRefs.get(targetId);
+                        if (dirtyNodeRefs.containsKey(id)) {
+                            refs = (NodeReferences) dirtyNodeRefs.get(id);
-                                refs = stateMgr.getNodeReferences(targetId);
+                                refs = stateMgr.getNodeReferences(id);
-                                String msg = itemMgr.safeGetJCRPath(targetId)
+                                String msg = itemMgr.safeGetJCRPath(id)
-                            dirtyNodeRefs.put(targetId, refs);
+                            dirtyNodeRefs.put(id, refs);
-            NodeId targetId = (NodeId) nodeState.getId();
+            NodeReferencesId id = new NodeReferencesId(nodeState.getUUID());
-            if (dirtyNodeRefs.containsKey(targetId)) {
-                refs = (NodeReferences) dirtyNodeRefs.get(targetId);
+            if (dirtyNodeRefs.containsKey(id)) {
+                refs = (NodeReferences) dirtyNodeRefs.get(id);
-                    refs = stateMgr.getNodeReferences(targetId);
+                    refs = stateMgr.getNodeReferences(id);
-                    String msg = itemMgr.safeGetJCRPath(targetId)
+                    String msg = itemMgr.safeGetJCRPath(id)
-    private void removeTransientItems(UpdateOperation update,
-                                      Iterator iter) {
+    private void removeTransientItems(Iterator iter) {
-            update.destroy(persistentState);
+            stateMgr.destroy(persistentState);
-    private void persistTransientItems(UpdateOperation update,
-                                       Iterator iter)
+    private void persistTransientItems(Iterator iter)
-            item.makePersistent(update);
+            item.makePersistent();
-                    UpdateOperation update = stateMgr.beginUpdate();
+                    stateMgr.edit();
-                    removeTransientItems(update, removed.iterator());
+                    removeTransientItems(removed.iterator());
-                    persistTransientItems(update, dirty.iterator());
+                    persistTransientItems(dirty.iterator());
-                        update.store((NodeReferences) it.next());
+                        stateMgr.store((NodeReferences) it.next());
-                    update.end();
+                    stateMgr.update();

UPD43 UPD42 UPD42 INS14 UPD42 UPD42 INS43 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 INS21 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD43 MOV43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 MOV43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL32 DEL11 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42