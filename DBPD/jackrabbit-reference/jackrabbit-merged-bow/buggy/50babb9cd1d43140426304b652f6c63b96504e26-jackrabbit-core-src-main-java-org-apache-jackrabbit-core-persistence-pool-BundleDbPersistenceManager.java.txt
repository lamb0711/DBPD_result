JCR-2821: Consistency check/fix doesn't work with PSQL persistence manager

Unify bundle loading to automatically choose .getBlob().getBinaryStream() or .getBinaryStream() depending on the type of the result set.
Move bundle size tracking inside BundleReader.

Fix based on a patch by Omid Milani

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1039408 13f79535-47bb-0310-9956-ffa450edef68

+import java.sql.Types;
-import java.util.Arrays;
+import org.apache.jackrabbit.core.persistence.util.BLOBStore;
-import org.apache.jackrabbit.core.persistence.util.NodePropBundle;
-import org.apache.jackrabbit.core.persistence.util.BLOBStore;
+import org.apache.jackrabbit.core.persistence.util.NodePropBundle;
-                    byte[] data = null;
-                        Blob blob = bRs.getBlob(1);
-                        data = getBytes(blob);
+                        // parse and check bundle
+                        NodePropBundle bundle = readBundle(id, bRs, 1);
+                        checkBundleConsistency(id, bundle, fix, modifications);
+                    } catch (SQLException e) {
+                        log.error("Unable to parse bundle " + id, e);
-                    try {
-                        // parse and check bundle
-                        NodePropBundle bundle = binding.readBundle(
-                                new ByteArrayInputStream(data), id);
-                        checkBundleConsistency(id, bundle, fix, modifications);
-                    } catch (IOException e) {
-                        log.error("Unable to parse bundle " + id
-                                + ": " + Arrays.toString(data), e);
-                    }
+    @Override
-        ResultSet rs = null;
-            rs = conHelper.exec(bundleSelectSQL, getKey(id), false, 0);
-            if (!rs.next()) {
-                return null;
-            }
-            byte[] bytes = getBytes(rs.getBlob(1));
-
+            ResultSet rs =
+                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);
-                NodePropBundle bundle =
-                    binding.readBundle(new ByteArrayInputStream(bytes), id);
-                bundle.setSize(bytes.length);
-                return bundle;
-            } catch (IOException e) {
-                log.error("Unable to parse serialization of bundle " + id
-                        + ": " + Arrays.toString(bytes), e);
-                throw e;
+                if (rs.next()) {
+                    return readBundle(id, rs, 1);
+                } else {
+                    return null;
+                }
+            } finally {
+                rs.close();
-        } catch (Exception e) {
+        } catch (SQLException e) {
-        } finally {
-            DbUtility.close(rs);
-     * Reads the blob's bytes and returns it. this is a helper method to
-     * circumvent issue JCR-1039 and JCR-1474
-     * @param blob blob to read
-     * @return bytes of the blob
-     * @throws SQLException if an SQL error occurs
-     * @throws IOException if an I/O error occurs
+     * Reads and parses a bundle from the BLOB in the given column of the
+     * current row of the given result set. This is a helper method to
+     * circumvent issues JCR-1039 and JCR-1474.
+     *
+     * @param id bundle identifier
+     * @param rs result set
+     * @param column BLOB column
+     * @return parsed bundle
+     * @throws SQLException if the bundle can not be read or parsed
-    private byte[] getBytes(Blob blob) throws SQLException, IOException {
-        InputStream in = null;
+    private NodePropBundle readBundle(NodeId id, ResultSet rs, int column)
+            throws SQLException {
-            long length = blob.length();
-            byte[] bytes = new byte[(int) length];
-            in = blob.getBinaryStream();
-            int read, pos = 0;
-            while ((read = in.read(bytes, pos, bytes.length - pos)) > 0) {
-                pos += read;
+            InputStream in;
+            if (rs.getMetaData().getColumnType(column) == Types.BLOB) {
+                in = rs.getBlob(column).getBinaryStream();
+            } else {
+                in = rs.getBinaryStream(column);
-            return bytes;
-        } finally {
-            IOUtils.closeQuietly(in);
+            try {
+                return binding.readBundle(in, id);
+            } finally {
+                in.close();
+            }
+        } catch (IOException e) {
+            SQLException exception =
+                new SQLException("Failed to parse bundle " + id);
+            exception.initCause(e);
+            throw exception;

MOV26 MOV26 MOV26 UPD40 INS78 MOV43 UPD42 INS44 INS44 INS42 UPD65 UPD65 INS65 UPD43 UPD42 INS43 INS42 INS39 INS42 INS54 INS66 UPD66 UPD66 UPD42 UPD66 INS42 UPD66 UPD42 UPD66 INS66 UPD42 UPD66 UPD42 UPD42 MOV42 INS8 INS12 INS60 MOV60 INS25 INS54 MOV44 INS8 INS43 MOV59 INS8 UPD43 INS27 INS8 INS8 INS8 INS8 INS60 MOV21 INS53 INS42 INS42 MOV32 MOV25 MOV21 UPD42 INS32 INS40 MOV21 INS21 INS41 MOV21 INS43 INS59 INS42 MOV32 INS8 INS32 INS42 INS42 INS7 INS32 INS32 INS42 INS42 INS14 UPD42 UPD42 UPD42 INS41 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS27 INS12 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS44 INS8 INS42 INS42 INS42 INS34 INS42 UPD42 MOV42 INS42 UPD43 MOV32 INS43 INS42 INS21 MOV42 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS42 DEL39 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL42 DEL7 DEL21 DEL39 DEL85 DEL5 DEL60 DEL38 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL41 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL53 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL39 DEL85 DEL5 DEL43 DEL33 DEL42 DEL42 DEL7 DEL39 DEL42 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL39 DEL42 DEL11 DEL3 DEL59 DEL60 DEL39 DEL42 DEL59 DEL42 DEL34 DEL59 DEL60 DEL42 DEL40 DEL42 DEL27 DEL32 DEL7 DEL36 DEL34 DEL27 DEL8 DEL61 DEL42 DEL41 DEL8 DEL8 DEL54