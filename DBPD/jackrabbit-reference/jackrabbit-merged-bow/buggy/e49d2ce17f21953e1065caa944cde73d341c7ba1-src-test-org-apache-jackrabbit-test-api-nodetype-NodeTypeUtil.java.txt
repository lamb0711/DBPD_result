porting to v0.16.4 of the jsr170 specification

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161260 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.Session;
-import javax.jcr.RepositoryException;
-import javax.jcr.PropertyType;
-import javax.jcr.Value;
-import javax.jcr.ValueFormatException;
+import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
-import javax.jcr.nodetype.NodeDef;
-import javax.jcr.nodetype.NodeTypeManager;
-import javax.jcr.nodetype.NodeTypeIterator;
+import javax.jcr.Value;
+import javax.jcr.ValueFormatException;
+import javax.jcr.nodetype.NodeDefinition;
-import javax.jcr.nodetype.PropertyDef;
+import javax.jcr.nodetype.NodeTypeIterator;
+import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.nodetype.PropertyDefinition;
-import java.util.Calendar;
-import java.util.regex.Pattern;
-import java.util.regex.Matcher;
+import java.util.Calendar;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
-     * @param session:      the session to access the node types
-     * @param regardDefaultPrimaryType:
-     *                      if true, the default primary type of the returned
-     *                      <code>NodeDef</code> is according to param
-     *                      <code>defaultPrimaryType</code>. If false, the returned
-     *                      <code>NodeDef</code> might have a default primary type
-     *                      or not.
-     * @param defaultPrimaryType:
-     *                      if <code>regardDefaultPrimaryType</code> is true:
-     *                      if true, the returned <code>NodeDef</code> has a
-     *                      default primary type, else not
-     * @param residual:     if true, the returned <code>NodeDef</code> is of
-     *                      the residual name "*", else not
+     * @param session:                  the session to access the node types
+     * @param regardDefaultPrimaryType: if true, the default primary type of the returned
+     *                                  <code>NodeDef</code> is according to param
+     *                                  <code>defaultPrimaryType</code>. If false, the returned
+     *                                  <code>NodeDef</code> might have a default primary type
+     *                                  or not.
+     * @param defaultPrimaryType:       if <code>regardDefaultPrimaryType</code> is true:
+     *                                  if true, the returned <code>NodeDef</code> has a
+     *                                  default primary type, else not
+     * @param residual:                 if true, the returned <code>NodeDef</code> is of
+     *                                  the residual name "*", else not
-    public static NodeDef locateChildNodeDef(Session session,
-                                             boolean regardDefaultPrimaryType,
-                                             boolean defaultPrimaryType,
-                                             boolean residual)
-        throws RepositoryException {
+    public static NodeDefinition locateChildNodeDef(Session session,
+                                                    boolean regardDefaultPrimaryType,
+                                                    boolean defaultPrimaryType,
+                                                    boolean residual)
+            throws RepositoryException {
-            NodeDef nodeDefs[] = type.getDeclaredChildNodeDefs();
+            NodeDefinition nodeDefs[] = type.getDeclaredChildNodeDefinitions();
-                NodeDef nodeDef = nodeDefs[i];
+                NodeDefinition nodeDef = nodeDefs[i];
-                    NodeDef nodeDefsAll[] = type.getChildNodeDefs();
+                    NodeDefinition nodeDefsAll[] = type.getChildNodeDefinitions();
-     * @param session:      the session to access the node types
-     * @param isProtected:  if true, the returned <code>NodeDef</code> is
-     *                      protected, else not
-     * @param mandatory:    if true, the returned <code>NodeDef</code> is
-     *                      mandatory, else not
+     * @param session:     the session to access the node types
+     * @param isProtected: if true, the returned <code>NodeDef</code> is
+     *                     protected, else not
+     * @param mandatory:   if true, the returned <code>NodeDef</code> is
+     *                     mandatory, else not
-    public static NodeDef locateChildNodeDef(Session session,
-                                             boolean isProtected,
-                                             boolean mandatory)
-        throws RepositoryException {
+    public static NodeDefinition locateChildNodeDef(Session session,
+                                                    boolean isProtected,
+                                                    boolean mandatory)
+            throws RepositoryException {
-            NodeDef nodeDefs[] = type.getDeclaredChildNodeDefs();
+            NodeDefinition nodeDefs[] = type.getDeclaredChildNodeDefinitions();
-                NodeDef nodeDef = nodeDefs[i];
+                NodeDefinition nodeDef = nodeDefs[i];
-    public static PropertyDef locatePropertyDef(Session session,
-                                                int propertyType,
-                                                boolean multiple,
-                                                boolean isProtected,
-                                                boolean constraints,
-                                                boolean residual)
+    public static PropertyDefinition locatePropertyDef(Session session,
+                                                       int propertyType,
+                                                       boolean multiple,
+                                                       boolean isProtected,
+                                                       boolean constraints,
+                                                       boolean residual)
-            PropertyDef propDefs[] = type.getDeclaredPropertyDefs();
+            PropertyDefinition propDefs[] = type.getDeclaredPropertyDefinitions();
-                PropertyDef propDef = propDefs[i];
+                PropertyDefinition propDef = propDefs[i];
-                    try {
-                        // check if a value out of constraint is buildable
-                        Value v = getValueOutOfContstraint(propDef);
-                        if (v == null) {
-                            // no value out of the constraint range available
-                            continue;
-                        }
-                    } catch (ParseException e) {
-                        // an error occured
+                    // check if a value out of constraint is buildable
+                    Value v = getValueOutOfContstraint(propDef);
+                    if (v == null) {
+                        // no value out of the constraint range available
-     * @param session:      the session to access the node types
-     * @param isProtected:  if true, the returned <code>PropertyDef</code> is
-     *                      protected, else not
-     * @param mandatory:    if true, the returned <code>PropertyDef</code> is
-     *                      mandatory, else not
+     * @param session:     the session to access the node types
+     * @param isProtected: if true, the returned <code>PropertyDef</code> is
+     *                     protected, else not
+     * @param mandatory:   if true, the returned <code>PropertyDef</code> is
+     *                     mandatory, else not
-    public static PropertyDef locatePropertyDef(Session session,
-                                                boolean isProtected,
-                                                boolean mandatory)
+    public static PropertyDefinition locatePropertyDef(Session session,
+                                                       boolean isProtected,
+                                                       boolean mandatory)
-            PropertyDef propDefs[] = type.getDeclaredPropertyDefs();
+            PropertyDefinition propDefs[] = type.getDeclaredPropertyDefinitions();
-                PropertyDef propDef = propDefs[i];
+                PropertyDefinition propDef = propDefs[i];
-        NodeDef nodeDefs[] = nodeType.getChildNodeDefs();
+        NodeDefinition nodeDefs[] = nodeType.getChildNodeDefinitions();
-               return new BinaryValue("abc");
+                return new BinaryValue("abc");
-    public static Value getValueOutOfContstraint(PropertyDef propDef)
-            throws ValueFormatException, RepositoryException, ParseException {
+    public static Value getValueOutOfContstraint(PropertyDefinition propDef)
+            throws ValueFormatException, RepositoryException {

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD43 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 MOV8 UPD42 UPD43 UPD42 UPD42 UPD42 MOV25 UPD42 UPD43 UPD42 UPD42 DEL66 DEL66 DEL42 DEL43 DEL42 DEL44 DEL18 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43