JCR-2105: JSR 283 NodeType Management (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772992 13f79535-47bb-0310-9956-ffa450edef68

-        if (defs != null) {
-            for (int i = 0; i < defs.length; i++) {
-                if (defs[i].isMandatory()) {
-                    throw new ConstraintViolationException("can't remove mandatory item");
-                }
-                if (defs[i].isProtected()) {
-                    throw new ConstraintViolationException("can't remove protected item");
-                }
-            }
+        if (hasRemoveConstaint(defs)) {
+            throw new ConstraintViolationException("can't remove mandatory or protected item");
+    /**
+     * @inheritDoc
+     * @see EffectiveNodeType#hasRemoveNodeConstraint(Name)
+     */
+    public boolean hasRemoveNodeConstraint(Name nodeName) {
+        QNodeDefinition[] defs = getNamedQNodeDefinitions(nodeName);
+        return hasRemoveConstaint(defs);
+    }
+
+    /**
+     * @inheritDoc
+     * @see EffectiveNodeType#hasRemovePropertyConstraint(Name)
+     */
+    public boolean hasRemovePropertyConstraint(Name propertyName) {
+        QPropertyDefinition[] defs = getNamedQPropertyDefinitions(propertyName);
+        return hasRemoveConstaint(defs);
+    }
+
+    /**
+     * Loop over the specified definitions and return <code>true</code> as soon
+     * as the first mandatory or protected definition is encountered.
+     *
+     * @param defs
+     * @return <code>true</code> if a mandatory or protected definition is present.
+     */
+    private static boolean hasRemoveConstaint(QItemDefinition[] defs) {
+        /**
+         * as there might be multiple definitions with the same name that may be
+         * applicable, return true as soon as the first mandatory or protected
+         * definition is encountered.
+         */
+        if (defs != null) {
+            for (int i = 0; i < defs.length; i++) {
+                if (defs[i].isMandatory()) {
+                    return true;
+                }
+                if (defs[i].isProtected()) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }

INS31 INS31 INS31 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 MOV8 MOV60 MOV25 INS65 INS65 INS43 INS42 INS60 INS41 INS65 INS65 INS43 INS42 INS60 INS41 INS65 INS65 INS65 INS5 INS42 INS41 INS32 INS68 INS42 INS5 INS59 INS32 INS68 INS42 INS5 INS59 INS32 INS66 INS66 INS42 INS66 INS43 INS85 INS9 INS42 INS42 INS42 INS42 INS69 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS69 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 UPD45 INS42 INS42 INS25 MOV32 INS8 INS41 INS41 INS9 INS9 DEL42 DEL43 DEL45 DEL14 DEL53