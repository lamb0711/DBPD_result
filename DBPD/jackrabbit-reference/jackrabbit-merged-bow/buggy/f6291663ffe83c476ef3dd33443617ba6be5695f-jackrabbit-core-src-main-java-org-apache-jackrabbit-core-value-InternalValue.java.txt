JCR-2028: JSR 283 JCR Path

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772659 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QValue;
-import org.apache.jackrabbit.value.BooleanValue;
-import org.apache.jackrabbit.value.DateValue;
-import org.apache.jackrabbit.value.DoubleValue;
-import org.apache.jackrabbit.value.LongValue;
-import org.apache.jackrabbit.value.NameValue;
-import org.apache.jackrabbit.value.PathValue;
-import org.apache.jackrabbit.value.ReferenceValue;
+import org.apache.jackrabbit.spi.commons.value.ValueFactoryQImpl;
+import org.apache.jackrabbit.spi.commons.value.AbstractQValue;
+import org.apache.jackrabbit.spi.commons.value.QValueValue;
+import javax.jcr.Session;
+import javax.jcr.ValueFactory;
+import java.io.UnsupportedEncodingException;
-public class InternalValue {
+public class InternalValue extends AbstractQValue {
-    private Object val;
-    private final int type;
-
-        if (value == null) {
-            throw new IllegalArgumentException("null value");
-        }
-                    return create(resolver.getQName(value.getString()));
+                    if (value instanceof QValueValue) {
+                        QValue qv = ((QValueValue) value).getQValue();
+                        if (qv instanceof InternalValue) {
+                            return (InternalValue) qv;
+                        } else {
+                            return create(qv.getName());
+                        }
+                    } else {
+                        return create(resolver.getQName(value.getString()));
+                    }
-                    return create(resolver.getQPath(value.getString()));
+                    if (value instanceof QValueValue) {
+                        QValue qv = ((QValueValue) value).getQValue();
+                        if (qv instanceof InternalValue) {
+                            return (InternalValue) qv;
+                        } else {
+                            return create(qv.getPath());
+                        }
+                    } else {
+                        return create(resolver.getQPath(value.getString(), false));
+                    }
+     * @deprecated
-        switch (type) {
-            case PropertyType.BINARY:
-                return new BinaryValueImpl((BLOBFileValue) val);
-            case PropertyType.BOOLEAN:
-                return new BooleanValue(((Boolean) val));
-            case PropertyType.DATE:
-                return new DateValue((Calendar) val);
-            case PropertyType.DOUBLE:
-                return new DoubleValue((Double) val);
-            case PropertyType.LONG:
-                return new LongValue((Long) val);
-            case PropertyType.REFERENCE:
-                return ReferenceValue.valueOf(val.toString());
-            case PropertyType.PATH:
-                return PathValue.valueOf(resolver.getJCRPath((Path) val));
-            case PropertyType.NAME:
-                return NameValue.valueOf(resolver.getJCRName((Name) val), false);
-            case PropertyType.STRING:
-                return new StringValue((String) val);
-            default:
-                throw new RepositoryException("illegal internal value type");
+        ValueFactory vf;
+        if (resolver instanceof Session) {
+            vf = ((Session) resolver).getValueFactory();
+        } else {
+            vf = new ValueFactoryImpl(resolver);
+        }
+
+        if (vf instanceof ValueFactoryQImpl) {
+            return ((ValueFactoryQImpl) vf).createValue(this);
+        } else {
+            switch (type) {
+                case PropertyType.BINARY:
+                    return vf.createValue(((BLOBFileValue) val).getStream());
+                case PropertyType.BOOLEAN:
+                    return vf.createValue(((Boolean) val).booleanValue());
+                case PropertyType.DATE:
+                    return vf.createValue((Calendar) val);
+                case PropertyType.DOUBLE:
+                    return vf.createValue(((Double) val).doubleValue());
+                case PropertyType.LONG:
+                    return vf.createValue(((Long) val).longValue());
+                case PropertyType.REFERENCE:
+                    return vf.createValue(val.toString(), PropertyType.REFERENCE);
+                case PropertyType.PATH:
+                    return vf.createValue(resolver.getJCRPath((Path) val), PropertyType.PATH);
+                case PropertyType.NAME:
+                    return vf.createValue(resolver.getJCRName((Name) val), PropertyType.NAME);
+                case PropertyType.STRING:
+                    return new StringValue((String) val);
+                default:
+                    throw new RepositoryException("illegal internal value type");
+            }
-    public boolean getBoolean() {
-        assert val != null && type == PropertyType.BOOLEAN;
-        return ((Boolean) val).booleanValue();
-    }
-
-    public Path getPath() {
-        assert val != null && type == PropertyType.PATH;
-        return (Path) val;
-    }
-
-    public long getLong() {
-        assert val != null && type == PropertyType.LONG;
-        return ((Long) val).longValue();
-    }
-
-    public double getDouble() {
-        assert val != null && type == PropertyType.DOUBLE;
-        return ((Double) val).doubleValue();
-    }
-
-    public String getString() {
-        assert val != null && type == PropertyType.STRING;
-        return (String) val;
-    }
-
-    /**
-     * Get the type of this value.
-     *
-     * @return the type
-     */
-    public int getType() {
-        return type;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj instanceof InternalValue) {
-            InternalValue other = (InternalValue) obj;
-            return val.equals(other.val);
-        }
-        return false;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public int hashCode() {
-        return val.hashCode();
-    }
-        val = value;
-        type = PropertyType.STRING;
+        super(value, PropertyType.STRING);
-        val = value;
-        type = PropertyType.NAME;
+        super(value);
-        val = new Long(value);
-        type = PropertyType.LONG;
+        super(new Long(value));
-        val = new Double(value);
-        type = PropertyType.DOUBLE;
+        super(new Double(value));
-        val = value;
-        type = PropertyType.DATE;
+        super(value, PropertyType.DATE);
-        val = Boolean.valueOf(value);
-        type = PropertyType.BOOLEAN;
+        super(Boolean.valueOf(value));
-        val = value;
-        type = PropertyType.BINARY;
+        super(value, PropertyType.BINARY);
-        val = value;
-        type = PropertyType.PATH;
+        super(value);
-        val = value;
-        type = PropertyType.REFERENCE;
+        super(value, PropertyType.REFERENCE);
+    //-------------------------------------------------------------< QValue >---
+    /**
+     * @see org.apache.jackrabbit.spi.QValue#getLength()
+     */
+    public long getLength() throws RepositoryException {
+        if (PropertyType.BINARY == type) {
+            return ((BLOBFileValue) val).getLength();
+        } else {
+            return super.getLength();
+        }
+    }
+
+    /**
+     * @see org.apache.jackrabbit.spi.QValue#getString()
+     */
+    public String getString() throws RepositoryException {
+        if (type == PropertyType.BINARY) {
+            return ((BLOBFileValue) val).getString();
+        } else if (type == PropertyType.DATE) {
+            return ISO8601.format(((Calendar) val));
+        } else {
+            return toString();
+        }
+    }
+
+    /**
+     * @see org.apache.jackrabbit.spi.QValue#getStream()
+     */
+    public InputStream getStream() throws RepositoryException {
+        if (type == PropertyType.BINARY) {
+            return ((BLOBFileValue) val).getStream();
+        } else {
+            try {
+                // convert via string
+                return new ByteArrayInputStream(getString().getBytes(InternalValueFactory.DEFAULT_ENCODING));
+            } catch (UnsupportedEncodingException e) {
+                throw new RepositoryException(InternalValueFactory.DEFAULT_ENCODING + " is not supported encoding on this platform", e);
+            }
+        }
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS43 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS8 INS83 INS42 MOV44 INS8 INS83 INS42 MOV44 INS8 UPD83 MOV83 UPD42 MOV42 MOV44 INS8 INS83 INS42 MOV44 INS8 INS83 INS42 MOV44 INS8 UPD83 INS42 MOV44 INS29 UPD42 INS43 INS8 INS29 MOV83 MOV43 UPD42 MOV42 INS43 INS8 MOV29 MOV83 INS43 INS42 INS43 INS8 INS65 INS60 INS25 INS25 INS46 INS46 INS46 INS46 INS46 INS46 INS46 INS46 INS46 INS65 INS42 INS25 INS65 INS42 INS25 INS65 UPD42 MOV42 UPD42 MOV42 INS25 INS43 INS59 INS62 INS8 INS8 INS62 INS8 MOV8 INS42 INS40 INS42 MOV14 MOV14 INS42 INS40 MOV32 INS42 INS40 INS42 INS42 INS40 INS68 INS27 INS8 INS8 INS68 INS27 INS8 INS25 INS68 INS27 INS8 INS8 INS8 INS8 INS42 INS42 INS42 INS43 INS21 INS21 INS42 INS43 INS41 INS40 INS42 INS40 MOV42 MOV41 INS41 INS40 INS42 MOV42 UPD40 MOV40 MOV41 INS27 INS8 INS8 INS40 INS42 INS42 INS40 INS41 INS54 INS25 INS25 INS42 INS7 INS7 INS42 INS32 INS48 MOV42 UPD40 MOV40 MOV41 MOV41 INS32 INS8 INS12 INS62 INS8 MOV8 INS62 INS8 MOV8 INS42 INS32 INS42 INS14 INS36 INS42 INS52 INS32 INS32 INS32 INS32 INS32 UPD42 INS42 UPD42 INS32 INS32 INS36 INS42 INS41 INS44 INS8 INS42 INS43 INS60 INS25 INS42 INS43 INS60 INS25 INS36 INS42 INS43 INS42 INS11 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 MOV11 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS40 UPD42 UPD42 INS40 UPD42 UPD42 INS40 INS42 INS42 INS36 INS42 INS11 INS14 INS43 INS42 INS53 INS42 INS43 INS59 INS62 INS8 INS8 INS42 INS43 INS59 INS62 INS8 INS8 INS11 INS42 INS43 INS42 INS36 INS42 INS36 INS42 INS36 INS42 UPD43 UPD43 INS11 INS43 INS42 INS43 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS43 INS41 INS41 INS42 INS42 INS32 INS42 MOV43 INS41 INS41 INS43 INS42 INS42 MOV11 MOV11 INS11 INS11 UPD42 UPD42 UPD43 MOV43 MOV42 INS42 INS42 INS32 INS42 INS40 INS43 INS27 INS42 INS36 INS42 INS42 INS11 INS32 INS36 INS42 INS42 INS11 INS32 INS9 INS42 MOV43 MOV42 MOV43 MOV42 UPD42 INS42 INS42 INS40 INS45 INS11 MOV43 INS42 INS42 INS32 INS11 MOV43 INS42 INS42 INS32 MOV42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL14 DEL42 DEL43 DEL36 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL11 DEL14 DEL42 DEL43 DEL11 DEL14 DEL9 DEL39 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL27 DEL6 DEL41 DEL8 DEL31 DEL39 DEL42 DEL33 DEL27 DEL27 DEL27 DEL6 DEL8 DEL31 DEL83 DEL42 DEL42 DEL33 DEL27 DEL27 DEL27 DEL6 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL62 DEL42 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL31 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL83 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL31 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL27 DEL6 DEL42 DEL43 DEL42 DEL11 DEL41 DEL83 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL31 DEL42 DEL33 DEL27 DEL40 DEL27 DEL27 DEL6 DEL8 DEL11 DEL42 DEL65 DEL65