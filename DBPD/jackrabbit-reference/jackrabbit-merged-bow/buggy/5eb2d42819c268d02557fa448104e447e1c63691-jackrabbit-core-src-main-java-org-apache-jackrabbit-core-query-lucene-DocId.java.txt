JSR 283: Shareable nodes support in query

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@763188 13f79535-47bb-0310-9956-ffa450edef68

+    static final int[] EMPTY = new int[0];
+
-         * Always returns <code>-1</code>.
+         * Always returns an empty array.
-         * @return always <code>-1</code>.
+         * @param docNumbers a int array for reuse as return value.
+         * @return always an empty array.
-        final int getDocumentNumber(MultiIndexReader reader) {
-            return -1;
+        final int[] getDocumentNumbers(MultiIndexReader reader,
+                                       int[] docNumbers) {
+            return EMPTY;
-     * Returns the document number of this <code>DocId</code>. If this id is
-     * invalid <code>-1</code> is returned.
+     * Returns the document numbers of this <code>DocId</code>. An empty array
+     * is returned if this id is invalid.
-     * @param reader the IndexReader to resolve this <code>DocId</code>.
-     * @return the document number of this <code>DocId</code> or <code>-1</code>
-     *         if it is invalid (e.g. does not exist).
+     * @param reader     the IndexReader to resolve this <code>DocId</code>.
+     * @param docNumbers an array for reuse. An implementation should use the
+     *                   passed array as a container for the return value,
+     *                   unless the length of the returned array is different
+     *                   from <code>docNumbers</code>. In which case an
+     *                   implementation will create a new array with an
+     *                   appropriate size.
+     * @return the document numbers of this <code>DocId</code> or
+     *         empty if it is invalid (e.g. does not exist).
-    abstract int getDocumentNumber(MultiIndexReader reader) throws IOException;
+    abstract int[] getDocumentNumbers(MultiIndexReader reader, int[] docNumbers)
+            throws IOException;
+    /**
+     * Creates a <code>DocId</code> that references multiple UUIDs.
+     *
+     * @param uuids the UUIDs of the referenced nodes.
+     * @return a <code>DocId</code> based on multiple node UUIDs.
+     */
+    static DocId create(String[] uuids)  {
+        return new MultiUUIDDocId(uuids);
+    }
+
-        int getDocumentNumber(MultiIndexReader reader) {
-            return docNumber;
+        int[] getDocumentNumbers(MultiIndexReader reader, int[] docNumbers) {
+            if (docNumbers.length == 1) {
+                docNumbers[0] = docNumber;
+                return docNumbers;
+            } else {
+                return new int[]{docNumber};
+            }
-        int getDocumentNumber(MultiIndexReader reader) throws IOException {
+        int[] getDocumentNumbers(MultiIndexReader reader, int[] docNumbers)
+                throws IOException {
-            return realDoc;
+
+            if (docNumbers.length == 1) {
+                docNumbers[0] = realDoc;
+                return docNumbers;
+            } else {
+                return new int[]{realDoc};
+            }
-         * not known until resolved in {@link #getDocumentNumber(MultiIndexReader)}.
+         * not known until resolved in {@link #getDocumentNumbers(MultiIndexReader,int[])}.
+
+    /**
+     * A DocId based on multiple UUIDDocIds.
+     */
+    private static final class MultiUUIDDocId extends DocId {
+
+        /**
+         * The internal uuid based doc ids.
+         */
+        private final UUIDDocId[] docIds;
+
+        /**
+         * @param uuids the uuids of the referenced nodes.
+         * @throws IllegalArgumentException if one of the uuids is malformed.
+         */
+        MultiUUIDDocId(String[] uuids) {
+            this.docIds = new UUIDDocId[uuids.length];
+            for (int i = 0; i < uuids.length; i++) {
+                docIds[i] = new UUIDDocId(UUID.fromString(uuids[i]));
+            }
+        }
+
+        /**
+         * @inheritDoc
+         */
+        int[] getDocumentNumbers(MultiIndexReader reader, int[] docNumbers)
+                throws IOException {
+            int[] tmp = new int[1];
+            docNumbers = new int[docIds.length];
+            for (int i = 0; i < docNumbers.length; i++) {
+                docNumbers[i] = docIds[i].getDocumentNumbers(reader, tmp)[0];
+            }
+            return docNumbers;
+        }
+
+        /**
+         * This implementation will return <code>this</code>. Document number is
+         * not known until resolved in {@link #getDocumentNumbers(MultiIndexReader,int[])}.
+         *
+         * @inheritDoc
+         */
+        DocId applyOffset(int offset) {
+            return this;
+        }
+
+        /**
+         * Always returns <code>true</code>.
+         *
+         * @param deleted the deleted documents.
+         * @return always <code>true</code>.
+         */
+        boolean isValid(BitSet deleted) {
+            return true;
+        }
+
+        /**
+         * Returns a String representation for this <code>DocId</code>.
+         *
+         * @return a String representation for this <code>DocId</code>.
+         */
+        public String toString() {
+            StringBuffer sb = new StringBuffer("MultiUUIDDocId(");
+            String separator = "";
+            for (int i = 0; i < docIds.length; i++) {
+                sb.append(separator);
+                separator = ", ";
+                sb.append(new UUID(docIds[i].msb, docIds[i].lsb));
+            }
+            sb.append(")");
+            return sb.toString();
+        }
+    }

INS23 INS31 INS55 INS83 INS83 INS5 INS59 INS5 UPD42 INS44 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS39 INS85 INS42 INS3 INS65 INS39 INS85 INS5 INS42 INS65 INS65 INS65 INS42 INS5 INS42 INS41 INS5 UPD42 INS44 INS8 INS5 UPD42 INS44 INS65 INS42 INS29 INS83 INS83 INS5 INS59 INS29 INS42 INS44 INS8 INS29 INS5 INS42 INS44 INS44 INS43 INS8 INS29 INS43 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS5 INS34 UPD66 UPD66 UPD66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS39 INS85 INS66 INS42 INS66 INS66 INS43 INS85 INS14 INS39 INS85 INS5 INS42 INS25 INS39 INS85 INS5 INS42 INS25 INS66 INS65 INS43 INS85 INS42 INS65 INS65 INS5 INS42 INS21 INS24 INS65 INS39 INS85 INS43 INS42 INS5 INS42 INS42 INS60 INS21 INS24 INS41 INS65 INS65 INS42 INS39 INS42 INS41 INS65 INS65 INS65 INS43 INS42 INS41 INS65 INS65 INS42 INS60 INS60 INS24 INS21 INS41 INS39 INS85 INS42 INS43 INS42 INS39 INS85 INS27 INS8 INS8 INS39 INS85 INS27 INS8 INS8 INS66 INS42 INS42 INS66 INS42 INS66 INS43 INS85 INS7 INS58 INS27 INS37 INS8 INS42 INS39 INS85 INS5 INS59 INS7 INS58 INS27 INS37 INS8 INS42 INS66 INS66 INS65 INS66 INS52 INS66 INS42 INS66 INS66 INS42 INS9 INS66 INS66 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS32 INS5 UPD42 INS44 INS42 INS40 INS34 INS21 INS41 MOV41 INS40 INS34 INS21 INS41 MOV41 INS42 INS22 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS39 INS85 INS42 INS3 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS68 INS42 INS42 INS14 INS42 INS42 INS45 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS65 INS39 INS85 INS5 INS42 INS7 INS42 INS3 INS7 INS42 INS3 UPD42 INS69 INS52 INS42 INS5 INS40 INS42 INS34 INS7 INS5 INS34 INS5 INS40 INS42 INS34 INS7 INS42 INS69 INS69 INS43 INS45 INS42 INS34 INS32 INS7 INS32 UPD66 INS42 INS66 UPD66 INS39 INS85 INS42 INS2 INS42 INS5 INS4 INS2 INS42 INS5 INS4 INS5 INS43 INS85 INS2 INS14 INS39 INS85 INS39 INS85 INS2 INS2 INS43 INS5 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS34 INS39 INS85 INS42 INS42 INS34 INS39 INS85 INS42 INS39 INS85 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS34 INS42 INS39 INS85 INS43 INS22 INS22 INS42 INS42 INS42 INS2 INS2 INS42 INS42 INS42 INS42 INS2 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL34 DEL38 DEL39 DEL39 DEL42 DEL8 DEL39 DEL42