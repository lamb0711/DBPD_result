JCR-247: Child axis support for XPath predicates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477599 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.Path;
-                    } else if (queryNode.getType() == QueryNode.TYPE_TEXTSEARCH) {
-                        // ignore
-                    } else {
-                        exceptions.add(new InvalidQueryException("Only attribute axis is allowed in predicate"));
+                    } else if (queryNode.getType() == QueryNode.TYPE_TEXTSEARCH
+                            || queryNode.getType() == QueryNode.TYPE_RELATION) {
+                        node.childrenAccept(this, queryNode);
+                    QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        ((RelationQueryNode) queryNode).setProperty(name);
+                        Path.PathElement element = Path.PathElement.create(name);
+                        ((RelationQueryNode) queryNode).addPathElement(element);
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        ((TextsearchQueryNode) queryNode).setPropertyName(name);
+                        TextsearchQueryNode ts = (TextsearchQueryNode) queryNode;
+                        ts.addPathElement(Path.PathElement.create(name));
+                        if (isAttributeNameTest(node)) {
+                            ts.setReferencesProperty(true);
+                        }
+                } else if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                    ((RelationQueryNode) queryNode).addPathElement(
+                            Path.PathElement.create(RelationQueryNode.STAR_NAME_TEST));
+                } else if (queryNode.getType() == QueryNode.TYPE_TEXTSEARCH) {
+                    ((TextsearchQueryNode) queryNode).addPathElement(
+                            Path.PathElement.create(RelationQueryNode.STAR_NAME_TEST));
-                        if (like.getProperty() == null) {
+                        if (like.getRelativePath() == null) {
-                        rel.setProperty(FN_POSITION_FULL);
+                        rel.addPathElement(Path.PathElement.create(FN_POSITION_FULL));
-     * @param node a node with type {@link org.apache.jackrabbit.core.query.xpath.XPathTreeConstants#JJTSTEPEXPR}.
+     * @param node a node with type {@link #JJTSTEPEXPR}.
+     * Returns <code>true</code> if the NodeTest <code>node</code> is an
+     * attribute name test.
+     * Example:
+     * <pre>
+     * StepExpr
+     *     At @
+     *     NodeTest
+     *         NameTest
+     *             QName foo
+     * </pre>
+     * @param node a node with type {@link #JJTNAMETEST}.
+     * @return <code>true</code> if the name test <code>node</code> is on the
+     * attribute axis.
+     */
+    private boolean isAttributeNameTest(SimpleNode node) {
+        SimpleNode stepExpr = (SimpleNode) node.jjtGetParent().jjtGetParent();
+        if (stepExpr.getId() == JJTSTEPEXPR) {
+            return ((SimpleNode) stepExpr.jjtGetChild(0)).getId() == JJTAT;
+        }
+        return false;
+    }
+
+    /**

INS26 INS40 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS43 INS42 INS60 INS25 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS9 INS67 INS42 INS42 INS11 INS32 INS42 INS41 INS42 INS43 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS27 INS25 INS42 INS42 INS36 INS42 MOV27 INS27 MOV60 MOV27 MOV8 INS25 INS11 INS32 INS40 INS27 INS8 MOV25 INS43 INS32 INS42 INS42 UPD42 UPD42 INS52 INS42 INS32 INS40 INS21 INS42 INS42 INS42 INS34 INS25 INS42 INS42 INS32 MOV27 INS8 INS25 INS36 INS42 INS32 UPD43 MOV21 MOV27 MOV8 MOV25 INS11 INS40 INS42 INS40 UPD42 INS32 INS40 INS42 INS32 UPD42 UPD42 INS27 INS43 INS42 INS40 UPD42 MOV42 INS40 INS40 UPD42 MOV42 UPD42 MOV42 INS32 INS40 INS60 INS21 INS25 INS42 INS42 INS42 UPD43 MOV43 INS59 INS32 INS32 INS8 UPD42 UPD42 UPD42 MOV42 INS11 INS42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS21 INS43 INS42 INS40 INS42 UPD42 MOV42 INS32 UPD42 INS32 INS42 UPD42 MOV42 INS42 INS9 INS40 INS42 MOV42 DEL8 DEL42 DEL43 DEL45 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL25 DEL40