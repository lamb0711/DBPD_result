- added lazy-loading item iterator
- optimized Node.has/getNodes(), Node.has/getProperties()

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@56953 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.util.IteratorHelper;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.*;
-    synchronized NodeIterator getChildNodes(NodeId parentId)
+    synchronized boolean hasChildNodes(NodeId parentId)
-        ArrayList children = new ArrayList();
-
-            try {
-                Item item = getItem(new NodeId(entry.getUUID()));
-                children.add(item);
-            } catch (AccessDeniedException ade) {
-                // ignore
-                continue;
+            NodeId id = new NodeId(entry.getUUID());
+            // check read access
+            if (session.getAccessManager().isGranted(id, AccessManager.READ)) {
+                return true;
-
-        return new IteratorHelper(Collections.unmodifiableList(children));
+        return false;
-    synchronized PropertyIterator getChildProperties(NodeId parentId)
+    synchronized NodeIterator getChildNodes(NodeId parentId)
+            throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+        // check privileges
+        if (!session.getAccessManager().isGranted(parentId, AccessManager.READ)) {
+            // clear cache
+            ItemImpl item = retrieveItem(parentId);
+            if (item != null) {
+                evictItem(parentId);
+            }
+            throw new AccessDeniedException("cannot read item " + parentId);
+        }
+
+        ArrayList childIds = new ArrayList();
+
+        ItemState state = null;
+        try {
+            state = itemStateProvider.getItemState(parentId);
+        } catch (NoSuchItemStateException nsise) {
+            String msg = "no such item: " + parentId;
+            log.error(msg);
+            throw new ItemNotFoundException(msg);
+        } catch (ItemStateException ise) {
+            String msg = "failed to retrieve item state of node " + parentId;
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+
+        if (!state.isNode()) {
+            String msg = "can't list child nodes of property " + parentId;
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+        NodeState nodeState = (NodeState) state;
+        Iterator iter = nodeState.getChildNodeEntries().iterator();
+
+        while (iter.hasNext()) {
+            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) iter.next();
+            NodeId id = new NodeId(entry.getUUID());
+            // check read access
+            if (session.getAccessManager().isGranted(id, AccessManager.READ)) {
+                childIds.add(id);
+            }
+        }
+
+        return new LazyItemIterator(this, childIds);
+    }
+
+    /**
+     * @param parentId
+     * @return
+     * @throws ItemNotFoundException
+     * @throws AccessDeniedException
+     * @throws RepositoryException
+     */
+    synchronized boolean hasChildProperties(NodeId parentId)
-        ArrayList children = new ArrayList();
-
-            try {
-                Item item = getItem(new PropertyId(parentId.getUUID(), entry.getName()));
-                children.add(item);
-            } catch (AccessDeniedException ade) {
-                // ignore
-                continue;
+
+            PropertyId id = new PropertyId(parentId.getUUID(), entry.getName());
+            // check read access
+            if (session.getAccessManager().isGranted(id, AccessManager.READ)) {
+                return true;
-        // not need to add virtual properties
+        return false;
+    }
-        return new IteratorHelper(Collections.unmodifiableList(children));
+    /**
+     * @param parentId
+     * @return
+     * @throws ItemNotFoundException
+     * @throws AccessDeniedException
+     * @throws RepositoryException
+     */
+    synchronized PropertyIterator getChildProperties(NodeId parentId)
+            throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+        // check privileges
+        if (!session.getAccessManager().isGranted(parentId, AccessManager.READ)) {
+            ItemImpl item = retrieveItem(parentId);
+            if (item != null) {
+                evictItem(parentId);
+            }
+            throw new AccessDeniedException("cannot read item " + parentId);
+        }
+
+        ArrayList childIds = new ArrayList();
+
+        ItemState state = null;
+        try {
+            state = itemStateProvider.getItemState(parentId);
+        } catch (NoSuchItemStateException nsise) {
+            String msg = "no such item: " + parentId;
+            log.error(msg);
+            throw new ItemNotFoundException(msg);
+        } catch (ItemStateException ise) {
+            String msg = "failed to retrieve item state of node " + parentId;
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+
+        if (!state.isNode()) {
+            String msg = "can't list child properties of property " + parentId;
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+        NodeState nodeState = (NodeState) state;
+        Iterator iter = nodeState.getPropertyEntries().iterator();
+
+        while (iter.hasNext()) {
+            NodeState.PropertyEntry entry = (NodeState.PropertyEntry) iter.next();
+            PropertyId id = new PropertyId(parentId.getUUID(), entry.getName());
+            // check read access
+            if (session.getAccessManager().isGranted(id, AccessManager.READ)) {
+                childIds.add(id);
+            }
+        }
+
+        return new LazyItemIterator(this, childIds);

UPD40 INS31 INS31 INS29 INS39 UPD42 INS44 INS43 MOV43 INS43 MOV29 MOV43 UPD42 MOV44 MOV43 MOV43 MOV43 INS29 INS83 INS39 INS42 INS44 INS43 MOV43 INS43 INS8 MOV29 INS83 MOV43 INS42 MOV44 MOV43 MOV43 MOV43 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS42 INS60 INS54 INS25 INS60 INS60 INS41 MOV25 MOV60 INS61 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS42 INS25 INS60 INS54 INS25 INS60 INS60 MOV61 INS41 INS25 MOV60 MOV60 MOV54 MOV25 MOV60 MOV60 INS61 INS41 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS12 INS38 INS8 INS43 INS59 INS43 INS59 INS9 MOV32 INS8 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS43 INS59 INS8 INS12 INS12 INS38 INS8 INS43 INS59 INS43 INS59 INS32 MOV8 INS9 INS38 INS8 INS32 INS8 INS14 INS42 INS42 INS33 INS21 INS44 INS8 INS44 INS8 INS32 INS60 INS21 INS53 INS42 INS42 INS11 UPD42 MOV42 INS42 INS32 MOV60 INS25 UPD42 INS60 INS60 INS25 UPD43 INS52 INS42 INS32 INS60 INS25 INS53 INS42 INS42 INS33 INS21 INS44 INS8 INS44 INS8 INS32 INS60 INS21 INS53 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 MOV60 INS25 INS32 INS60 INS25 INS53 UPD42 INS42 INS42 INS60 INS60 INS25 INS43 INS52 INS42 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS42 INS42 INS43 INS59 INS32 INS14 INS43 INS42 INS32 UPD42 MOV42 UPD43 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS8 UPD42 INS32 INS42 INS42 INS40 INS43 INS59 INS27 INS8 INS14 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS42 INS42 INS43 INS59 INS32 INS14 INS43 INS42 INS32 INS42 UPD43 INS32 INS8 INS32 INS42 INS42 INS40 INS43 INS59 INS27 INS8 INS14 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV14 INS32 UPD42 MOV42 UPD42 MOV42 INS40 INS41 INS40 INS42 INS11 INS42 INS42 INS14 INS32 INS42 INS42 INS40 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS27 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV14 INS32 UPD42 MOV42 UPD42 MOV42 INS40 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS27 INS40 INS42 INS11 INS42 INS42 INS14 INS32 INS42 INS42 INS40 INS21 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS45 INS42 INS42 UPD42 MOV42 INS42 INS9 INS43 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS45 INS42 INS42 UPD42 MOV42 INS42 INS9 INS42 INS42 INS32 INS42 INS45 INS42 INS43 INS32 INS43 INS32 INS32 INS42 INS42 INS32 INS45 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL44 DEL18 DEL8 DEL12 DEL54 DEL43 DEL32 DEL14 DEL41 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL44 DEL18 DEL8 DEL12 DEL54 DEL8