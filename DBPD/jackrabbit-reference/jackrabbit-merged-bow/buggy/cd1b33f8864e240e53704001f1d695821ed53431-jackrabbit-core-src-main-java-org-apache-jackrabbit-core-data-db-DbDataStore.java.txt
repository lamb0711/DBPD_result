JCR-1388 Allow concurrent reads from the database data store

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@649493 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+     * getDatabaseResources() does NOT close the DB resources on success. It's up to the client of
+     * the stream backed by these resources to close it and therefore close the DB resources.
+     *
+     * @param identifier data identifier
+     * @return database resources that will back the stream corresponding
+     *                     to the passed data identifier
+     * @throws DataStoreException if the data store could not be accessed,
+     *                     or if the given identifier is invalid
+     */
+    public DbResources getDatabaseResources(DataIdentifier identifier) throws DataStoreException {
+        ConnectionRecoveryManager conn = null;
+        ResultSet rs = null;
+        try {
+            conn = getConnection();
+            // SELECT ID, DATA FROM DATASTORE WHERE ID = ?
+            PreparedStatement prep = conn.executeStmt(selectDataSQL, new Object[]{identifier.toString()});
+            rs = prep.getResultSet();
+            if (!rs.next()) {
+                throw new DataStoreException("Record not found: " + identifier);
+            }
+            InputStream result = null;
+            InputStream stream = rs.getBinaryStream(2);
+            if (stream == null) {
+                // If the stream is null, go ahead and close resources
+                result = new ByteArrayInputStream(new byte[0]);
+                DatabaseHelper.closeSilently(rs);
+                putBack(conn);
+            } else {
+                result = new BufferedInputStream(stream);
+                if (copyWhenReading) {
+                    File temp = moveToTempFile(result);
+                    result = new TempFileInputStream(temp);
+                }
+            }
+
+            DbResources dbResources = new DbResources(conn, rs, prep, result, this);
+            return dbResources;
+        } catch (Exception e) {
+            DatabaseHelper.closeSilently(rs);
+            putBack(conn);
+            throw convert("Retrieving database resources ", e);
+        }
+    }
+
+    /**
-     * {@inheritDoc}
-     */
-    public InputStream getInputStream(DataIdentifier identifier) throws DataStoreException {
-        ConnectionRecoveryManager conn = getConnection();
-        try {
-            String id = identifier.toString();
-            // SELECT ID, DATA FROM DATASTORE WHERE ID = ?
-            PreparedStatement prep = conn.executeStmt(selectDataSQL, new Object[]{id});
-            ResultSet rs = prep.getResultSet();
-            if (!rs.next()) {
-                throw new DataStoreException("Record not found: " + identifier);
-            }
-            InputStream in = new BufferedInputStream(rs.getBinaryStream(2));
-            if (copyWhenReading) {
-                File temp = moveToTempFile(in);
-                in = new TempFileInputStream(temp);
-            }
-            return in;
-        } catch (Exception e) {
-            throw convert("Can not read identifier " + identifier, e);
-        } finally {
-            putBack(conn);
-        }
-    }
-
-    /**

INS26 MOV31 INS40 INS43 UPD42 INS65 INS65 INS65 INS65 INS42 INS60 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 MOV43 INS59 MOV60 INS33 INS42 INS33 INS21 INS21 INS60 INS25 INS7 INS7 MOV43 INS59 INS27 INS8 INS8 INS43 UPD42 INS21 MOV21 INS42 MOV32 INS42 MOV32 INS42 INS33 UPD42 MOV32 INS42 INS33 INS21 INS21 INS21 INS21 MOV25 INS42 INS42 INS14 INS32 INS7 INS32 INS32 INS7 INS43 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 MOV32 INS43 INS3 MOV43 INS42 UPD42 MOV42 INS5 INS34 UPD42 INS39 INS85 UPD42 DEL65 DEL65 DEL43 DEL42 DEL59 DEL60 DEL42 DEL14 DEL42 DEL45 DEL42 DEL27 DEL8