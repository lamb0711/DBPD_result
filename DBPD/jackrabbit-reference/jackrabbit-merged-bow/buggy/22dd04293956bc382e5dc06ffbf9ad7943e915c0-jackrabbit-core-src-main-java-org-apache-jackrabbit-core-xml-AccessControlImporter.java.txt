JCR-2195 Provide possibility to import protected items using Session/Workspace import functionality (ACL import)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@810943 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.AccessDeniedException;
+import javax.jcr.security.AccessControlEntry;
+    /**
+     * the ACL for non-principal based
+     */
+    private JackrabbitAccessControlList acl = null;
+
+            acl = getACL(protectedParent.getParent().getPath());
+            if (acl == null) {
+                log.warn("AccessControlImporter cannot be started: no ACL for {}.", parent.getParent().getPath());
+                return false;
+            }
+            acl = null;
+    private JackrabbitAccessControlList getACL(String path) throws RepositoryException, AccessDeniedException {
+        JackrabbitAccessControlList acl = null;
+        for (AccessControlPolicy p: acMgr.getPolicies(path)) {
+            if (p instanceof JackrabbitAccessControlList) {
+                acl = (JackrabbitAccessControlList) p;
+                // don't know if this check is needed
+                if (path.equals(acl.getPath())) {
+                    break;
+                }
+                acl = null;
+            }
+        }
+        if (acl != null) {
+            // clear all existing entries
+            for (AccessControlEntry ace: acl.getAccessControlEntries()) {
+                acl.removeAccessControlEntry(ace);
+            }
+        }
+        return acl;
+    }
+
+            acMgr.setPolicy(acl.getPath(), acl);
+        acl = null;
-
-        // try to access policies
-        List<AccessControlPolicy> policies = new ArrayList<AccessControlPolicy>();
-        if (!principalbased) {
-            // no need to retrieve the applicable policies as the policy node
-            // itself is the start point of the protected import.
-            policies.addAll(Arrays.asList(acMgr.getPolicies(parent.getParent().getPath())));
-        } else {
+        if (principalbased) {
+            // try to access policies
+            List<AccessControlPolicy> policies = new ArrayList<AccessControlPolicy>();
-        }
-
-        for (AccessControlPolicy policy : policies) {
-            if (policy instanceof JackrabbitAccessControlList) {
-                JackrabbitAccessControlList acl = (JackrabbitAccessControlList) policy;
-                // test if this acl can be used to apply the ACE
-                boolean matches;
-                if (!principalbased) {
-                    // resource-based the acl-path must correspond to the path
-                    // of the start-point of the protected import that was the
-                    // policy node itself.
-                    matches = parent.getParent().getPath().equals(acl.getPath());
-                } else {
-                    // principal based acl: just try the first one (TODO: check again)
-                    matches = true;
-                }
-
-                if (matches) {
+            for (AccessControlPolicy policy : policies) {
+                if (policy instanceof JackrabbitAccessControlList) {
+                    JackrabbitAccessControlList acl = (JackrabbitAccessControlList) policy;
-
+        } else {
+            Map<String, Value> restr = new HashMap<String, Value>();
+            for (String restName : acl.getRestrictionNames()) {
+                TextValue txtVal = restrictions.remove(restName);
+                if (txtVal != null) {
+                    restr.put(restName, txtVal.getValue(acl.getRestrictionType(restName), resolver));
+                }
+            }
+            if (!restrictions.isEmpty()) {
+                throw new ConstraintViolationException("ACE childInfo contained restrictions that could not be applied.");
+            }
+            acl.addEntry(principal, privileges, isAllow, restr);
+            return;
+

INS26 INS26 INS40 INS40 INS23 INS31 INS29 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS65 INS42 INS42 INS33 INS42 INS43 INS42 INS42 INS42 INS60 INS70 INS25 INS41 INS21 MOV25 INS66 INS8 INS42 INS43 INS59 INS44 INS32 INS8 INS27 INS8 INS42 INS7 INS42 INS8 INS21 INS25 MOV21 INS42 INS42 INS33 INS43 INS42 INS42 INS42 INS42 INS25 INS42 INS33 INS70 INS21 INS42 INS33 MOV60 MOV25 INS70 INS7 INS27 MOV8 INS21 INS42 INS62 INS8 INS44 INS32 INS8 INS32 MOV44 INS42 INS8 INS42 INS32 INS42 INS33 INS21 INS41 INS7 INS42 INS43 INS21 INS25 INS21 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS25 INS42 INS32 INS32 INS9 INS42 INS33 INS42 INS7 INS32 INS8 INS7 INS42 INS32 INS42 INS42 MOV62 INS8 INS32 INS42 INS42 INS42 INS45 MOV32 INS42 INS11 INS42 INS42 MOV32 INS10 INS42 INS33 INS42 INS42 INS42 MOV60 INS60 INS70 INS25 INS21 MOV21 INS41 INS42 INS42 INS43 INS42 INS74 INS59 INS44 INS32 INS8 INS38 INS8 INS32 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS25 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL8 DEL25 DEL42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70