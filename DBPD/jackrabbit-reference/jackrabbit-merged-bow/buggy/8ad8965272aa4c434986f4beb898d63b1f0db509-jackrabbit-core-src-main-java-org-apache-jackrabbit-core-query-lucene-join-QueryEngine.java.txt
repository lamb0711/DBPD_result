JCR-2852: Support multi-selector OR constraints in join queries

Patch by Alex Parvulescu

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1080186 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashSet;
+import java.util.Set;
+import java.util.TreeSet;
-        Constraint leftConstraint = splitter.getLeftConstraint();
-        QueryResult leftResult =
-            execute(null, left, leftConstraint, null, 0, -1);
-        List<Row> leftRows = new ArrayList<Row>();
+        Set<Row> leftRows = buildLeftRowsJoin(left, splitter.getConstraintSplitInfo());
+
+        Source right = join.getRight();
+        List<Constraint> rightConstraints = merger.getRightJoinConstraints(leftRows);
+        RowIterator rightRows = new RowIteratorAdapter(buildRightRowsJoin(right, splitter.getConstraintSplitInfo(), rightConstraints));
+
+        QueryResult result = merger.merge(new RowIteratorAdapter(leftRows), rightRows);
+        return sort(result, orderings, offset, limit);
+    }
+
+    private Comparator<Row> buildSimplePathRowComparator() {
+        return new Comparator<Row>() {
+
+            public int compare(Row o1, Row o2) {
+                try {
+                    return o1.getPath().compareTo(o2.getPath());
+                } catch (RepositoryException e) {
+                    throw new RuntimeException("Unable to compare rows " + o1
+                            + " and " + o2, e);
+                }
+            }
+        };
+    }
+
+    private Set<Row> buildLeftRowsJoin(Source left, ConstraintSplitInfo csi)
+            throws RepositoryException {
+
+        if (csi.isMultiple()) {
+            // this *needs* to merge automatically multiple sets of nodes
+            Set<Row> leftRows = new TreeSet<Row>(buildSimplePathRowComparator());
+            for (ConstraintSplitInfo child : csi.getInnerConstraints()) {
+                leftRows.addAll(buildLeftRowsJoin(left, child));
+            }
+            return leftRows;
+        }
+
+        Set<Row> leftRows = new HashSet<Row>();
+        Constraint leftConstraint = csi.getLeftConstraint();
+        QueryResult leftResult = execute(null, left, leftConstraint, null, 0,
+                -1);
+        return leftRows;
+    }
-        RowIterator rightRows;
-        Source right = join.getRight();
-        List<Constraint> rightConstraints =
-            merger.getRightJoinConstraints(leftRows);
-        if (rightConstraints.size() < 500) {
-            Constraint rightConstraint = Constraints.and(
-                    qomFactory,
-                    Constraints.or(qomFactory, rightConstraints),
-                    splitter.getRightConstraint());
-            rightRows =
-                execute(null, right, rightConstraint, null, 0, -1).getRows();
-        } else {
-            List<Row> list = new ArrayList<Row>();
-            for (int i = 0; i < rightConstraints.size(); i += 500) {
-                Constraint rightConstraint = Constraints.and(
-                        qomFactory,
-                        Constraints.or(qomFactory, rightConstraints.subList(
-                                i, Math.min(i + 500, rightConstraints.size()))),
-                        splitter.getRightConstraint());
-                QueryResult rightResult =
-                    execute(null, right, rightConstraint, null, 0, -1);
-                for (Row row : JcrUtils.getRows(rightResult)) {
-                    list.add(row);
-                }
+    private Set<Row> buildRightRowsJoin(Source right, ConstraintSplitInfo csi,
+            List<Constraint> rightConstraints) throws RepositoryException {
+
+        if (csi.isMultiple()) {
+            // this *needs* to merge automatically multiple sets of nodes
+            Set<Row> rightRows = new TreeSet<Row>(
+                    buildSimplePathRowComparator());
+            for (ConstraintSplitInfo child : csi.getInnerConstraints()) {
+                rightRows.addAll(buildRightRowsJoin(right, child,
+                        rightConstraints));
-            rightRows = new RowIteratorAdapter(list);
+            return rightRows;
-        QueryResult result =
-            merger.merge(new RowIteratorAdapter(leftRows), rightRows);
-        return sort(result, orderings, offset, limit);
+        // TODO refactor to page automatically at 500 *if needed*
+        if (rightConstraints.size() < 500) {
+            Set<Row> rightRows = new HashSet<Row>();
+            Constraint rightConstraint = Constraints.and(qomFactory,
+                    Constraints.or(qomFactory, rightConstraints),
+                    csi.getRightConstraint());
+            QueryResult rightResult = execute(null, right, rightConstraint,
+                    null, 0, -1);
+            for (Row row : JcrUtils.getRows(rightResult)) {
+                rightRows.add(row);
+            }
+            return rightRows;
+        }
+
+        Set<Row> rightRows = new HashSet<Row>();
+        for (int i = 0; i < rightConstraints.size(); i += 500) {
+            Constraint rightConstraint = Constraints
+                    .and(qomFactory,
+                            Constraints.or(
+                                    qomFactory,
+                                    rightConstraints.subList(
+                                            i,
+                                            Math.min(i + 500,
+                                                    rightConstraints.size()))),
+                            csi.getRightConstraint());
+            QueryResult rightResult = execute(null, right, rightConstraint,
+                    null, 0, -1);
+            for (Row row : JcrUtils.getRows(rightResult)) {
+                rightRows.add(row);
+            }
+        }
+        return rightRows;

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS83 UPD74 MOV74 INS42 INS8 INS83 UPD74 MOV74 INS42 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS43 MOV8 MOV60 INS60 UPD43 INS41 UPD43 INS43 INS42 INS43 INS42 INS42 INS25 INS60 INS60 MOV60 MOV70 INS41 INS43 INS43 INS43 INS42 INS43 INS42 UPD74 MOV74 INS42 INS42 INS25 INS25 INS60 INS41 UPD74 MOV74 MOV43 INS59 UPD42 INS14 UPD42 INS42 INS42 INS32 INS8 INS74 INS59 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS8 MOV27 INS8 INS74 INS59 INS42 UPD43 UPD42 INS42 INS14 INS74 INS1 INS42 INS42 INS60 INS70 INS41 INS43 INS43 INS42 INS14 INS42 INS32 INS42 INS42 INS42 MOV60 INS70 INS41 INS60 INS60 INS60 MOV70 INS41 INS43 INS43 INS42 INS14 INS70 UPD42 UPD42 UPD42 MOV43 INS32 INS43 MOV43 INS31 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS44 INS32 INS8 INS42 INS74 INS59 MOV43 INS59 INS43 INS59 INS42 INS42 INS42 INS74 INS44 INS32 INS8 UPD42 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS43 INS43 INS43 INS43 UPD42 INS43 INS42 INS42 INS42 MOV21 INS43 INS43 INS42 INS14 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS21 INS42 UPD42 MOV42 INS43 INS42 INS43 INS42 INS54 INS42 INS42 INS74 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS42 MOV32 INS32 INS42 INS33 INS42 INS42 INS33 INS34 INS38 INS42 INS42 INS42 INS32 INS42 INS42 INS8 INS12 INS43 INS43 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS34 UPD42 UPD42 INS42 INS42 INS42 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS42 INS45 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL14 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL33 DEL33 DEL34 DEL34 DEL38 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL14 DEL7