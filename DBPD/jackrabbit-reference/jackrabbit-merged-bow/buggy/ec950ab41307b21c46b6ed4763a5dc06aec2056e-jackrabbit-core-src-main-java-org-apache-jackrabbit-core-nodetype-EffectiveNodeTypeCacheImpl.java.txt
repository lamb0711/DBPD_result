JCR-2763: Drop the Dumpable interface

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1004622 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.PrintStream;
-    private final TreeSet sortedKeys;
+    private final TreeSet<Key> sortedKeys;
-    private final HashMap aggregates;
+    private final HashMap<Key, EffectiveNodeType> aggregates;
-        sortedKeys = new TreeSet();
-        aggregates = new HashMap();
+        sortedKeys = new TreeSet<Key>();
+        aggregates = new HashMap<Key, EffectiveNodeType>();
-        return (EffectiveNodeType) aggregates.get(key);
+        return aggregates.get(key);
-        EffectiveNodeType removed = (EffectiveNodeType) aggregates.remove(key);
+        EffectiveNodeType removed = aggregates.remove(key);
-            Iterator iter = sortedKeys.iterator();
+            Iterator<Key> iter = sortedKeys.iterator();
-                Key k = (Key) iter.next();
+                Key k = iter.next();
-        ArrayList keys = new ArrayList(sortedKeys);
-        for (Iterator keysIter = keys.iterator(); keysIter.hasNext();) {
-            Key k = (Key) keysIter.next();
+        ArrayList<Key> keys = new ArrayList<Key>(sortedKeys);
+        for (Iterator<Key> keysIter = keys.iterator(); keysIter.hasNext();) {
+            Key k = keysIter.next();
-        Iterator iter = sortedKeys.iterator();
+        Iterator<Key> iter = sortedKeys.iterator();
-            Key k = (Key) iter.next();
+            Key k = iter.next();
-    //-------------------------------------------------------------< Dumpable >
+    //--------------------------------------------------------------< Object >
-    public void dump(PrintStream ps) {
-        ps.println("EffectiveNodeTypeCache (" + this + ")");
-        ps.println();
-        ps.println("EffectiveNodeTypes in cache:");
-        ps.println();
-        Iterator iter = sortedKeys.iterator();
-        while (iter.hasNext()) {
-            Key k = (Key) iter.next();
-            //EffectiveNodeType ent = (EffectiveNodeType) aggregates.get(k);
-            ps.println(k);
+    public String toString() {
+        StringBuilder builder = new StringBuilder();
+        builder.append("EffectiveNodeTypeCache (" + this + ")\n");
+        builder.append("EffectiveNodeTypes in cache:\n");
+        for (Key key : sortedKeys) {
+            builder.append(key);
+            builder.append("\n");
+        return builder.toString();
-        WeightedKey(Collection ntNames) {
+        WeightedKey(Collection<Name> ntNames) {
-            Set tmp = new HashSet(Arrays.asList(names));
+            Set<Name> tmp = new HashSet<Name>(Arrays.asList(names));
-            Set tmp = new HashSet(Arrays.asList(names));
+            Set<Name> tmp = new HashSet<Name>(Arrays.asList(names));
-        public int compareTo(Object o) {
+        public int compareTo(Key o) {

INS74 INS74 MOV43 INS43 INS42 MOV43 INS43 MOV43 MOV43 MOV43 UPD42 MOV42 INS60 INS70 INS41 INS42 MOV32 MOV43 INS74 INS74 INS43 INS59 INS44 INS42 INS8 INS32 INS74 MOV43 MOV32 MOV43 INS43 INS74 MOV43 MOV43 INS42 INS42 INS14 UPD42 UPD42 UPD42 UPD42 UPD45 INS43 INS42 INS21 INS21 UPD42 MOV42 UPD42 MOV42 MOV43 INS43 INS74 INS74 INS74 INS74 INS74 INS42 INS74 MOV43 MOV43 MOV43 MOV43 INS43 UPD45 UPD42 MOV42 INS32 INS32 INS42 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 MOV43 MOV43 MOV43 INS43 MOV43 INS43 MOV32 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS74 INS42 INS74 INS42 INS42 MOV43 INS42 MOV43 INS43 MOV43 INS43 MOV32 INS42 INS42 DEL40 DEL26 DEL11 DEL11 DEL11 DEL11 DEL11 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43