JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.util.XmlUtil;
-import org.jdom.Element;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.apache.jackrabbit.webdav.xml.Namespace;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+import java.util.ArrayList;
- * that forms the request body of a SUBSCRIBE request.
+ * that forms the request body of a SUBSCRIBE request.<br>
+ * The following xml layout is defined for the subscription info:
+ * <pre>
+ * &lt;!ELEMENT subscriptioninfo ( eventtype, nolocal?, filter? ) &gt;
+ * &lt;!ELEMENT eventtype ANY &gt;
+ *
+ * ANY defines any sequence of elements where at least one defines a valid
+ * eventtype. Note that a single eventtype must not occur multiple times.
+
+ * &lt;!ELEMENT nolocal EMPTY &gt;
+ * &lt;!ELEMENT filter ANY &gt;
+ *
+ * ANY: any sequence of elements identifying a filter for event listening but
+ * at least a single element.
+ * </pre>
-public class SubscriptionInfo implements ObservationConstants {
+public class SubscriptionInfo implements ObservationConstants, XmlSerializable {
-    private Element info;
-    private List eventTypes;
-    private long timeout;
-    private boolean isDeep;
+    private final EventType[] eventTypes;
+    private final Filter[] filters;
+    private final boolean noLocal;
+    private final boolean isDeep;
+    private final long timeout;
+
+    /**
+     * Create a new <code>SubscriptionInfo</code>
+     *
+     * @param eventTypes
+     * @param isDeep
+     * @param timeout
+     */
+    public SubscriptionInfo(EventType[] eventTypes, boolean isDeep, long timeout) {
+        this(eventTypes, null, false, isDeep, timeout);
+    }
+
+    /**
+     * Create a new <code>SubscriptionInfo</code>
+     *
+     * @param eventTypes
+     * @param filters
+     * @param noLocal
+     * @param isDeep
+     * @param timeout
+     */
+    public SubscriptionInfo(EventType[] eventTypes, Filter[] filters, boolean noLocal, boolean isDeep, long timeout) {
+        if (eventTypes == null || eventTypes.length == 0) {
+            throw new IllegalArgumentException("'subscriptioninfo' must at least indicate a single event type.");
+        }
+
+        this.eventTypes = eventTypes;
+        this.noLocal = noLocal;
+
+        if (filters != null) {
+            this.filters = filters;
+        } else {
+            this.filters = new Filter[0];
+        }
+
+        this.isDeep = isDeep;
+        this.timeout = timeout;
+    }
-        if (!XML_SUBSCRIPTIONINFO.equals(reqInfo.getName())) {
+        if (!DomUtil.matches(reqInfo, XML_SUBSCRIPTIONINFO, NAMESPACE)) {
-        if (reqInfo.getChild(XML_EVENTTYPE, NAMESPACE) == null ) {
+        List typeList = new ArrayList();
+        Element el = DomUtil.getChildElement(reqInfo, XML_EVENTTYPE, NAMESPACE);
+        if (el != null) {
+            ElementIterator it = DomUtil.getChildren(el);
+            while (it.hasNext()) {
+                Element typeElem = it.nextElement();
+                EventType et = new SimpleEventType(typeElem.getLocalName(), DomUtil.getNamespace(typeElem));
+                typeList.add(et);
+            }
+        } else {
-        eventTypes = reqInfo.getChild(XML_EVENTTYPE, NAMESPACE).getChildren();
-        if (eventTypes.size() == 0) {
+        if (typeList.isEmpty()) {
+        eventTypes = (EventType[]) typeList.toArray(new EventType[typeList.size()]);
-        // detach the request info, in order to remove the reference to the parent
-        this.info = (Element)reqInfo.detach();
+        List filters = new ArrayList();
+        el = DomUtil.getChildElement(reqInfo, XML_FILTER, NAMESPACE);
+        if (el != null) {
+            ElementIterator it = DomUtil.getChildren(el);
+            while (it.hasNext()) {
+                Filter f = new Filter(it.nextElement());
+                filters.add(f);
+            }
+        }
+        this.filters = (Filter[])filters.toArray(new Filter[filters.size()]);
+
+        this.noLocal = DomUtil.hasChildElement(reqInfo, XML_NOLOCAL, NAMESPACE);
-        setTimeOut(timeout);
+        this.timeout = timeout;
-     * Return list of event types Xml elements present in the subscription info.
-     * NOTE: the elements need to be detached in order to be added as content
-     * to any other Xml element.
+     * Return array of event type names present in the subscription info.
-     * @return List of Xml elements defining which events this subscription should
-     * listen to.
+     * @return array of String defining the names of the events this subscription
+     * should listen to.
-    public List getEventTypes() {
+    public EventType[] getEventTypes() {
+     * Return all filters defined for this <code>SubscriptionInfo</code>
+     *
+     * @return all filters or an empty Filter array.
+     */
+    public Filter[] getFilters() {
+        return filters;
+    }
+
+    /**
-     * @param name the filter elments must provide.
+     * @param localName the filter elments must provide.
+     * @param namespace
-    public String[] getFilters(String name) {
-        String[] filters = null;
-        Element filter = info.getChild(XML_FILTER);
-        if (filter != null) {
-            List li = filter.getChildren(name);
-            if (!li.isEmpty()) {
-                filters = new String[li.size()];
+    public Filter[] getFilters(String localName, Namespace namespace) {
+        List l = new ArrayList();
-                    filters[i] = ((Element)li.get(i)).getText();
+            if (filters[i].isMatchingFilter(localName, namespace)) {
+               l.add(filters[i]);
-        }
-        return filters;
+        return (Filter[])l.toArray(new Filter[l.size()]);
-        return info.getChild(XML_NOLOCAL, NAMESPACE) != null;
+        return noLocal;
-     * Set the timeout. NOTE: no validation is made.
-     *
-     * @param timeout as defined by the {@link org.apache.jackrabbit.webdav.DavConstants#HEADER_TIMEOUT}.
-     */
-    public void setTimeOut(long timeout) {
-        this.timeout = timeout;
-    }
-
-    /**
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     * @param document
-    public Element[] toXml() {
-        Element[] elems = { info, XmlUtil.depthToXml(isDeep), XmlUtil.timeoutToXml(timeout)};
-        return elems;
+    public Element toXml(Document document) {
+        Element subscrInfo = DomUtil.createElement(document, XML_SUBSCRIPTIONINFO, NAMESPACE);
+        Element eventType = DomUtil.addChildElement(subscrInfo, XML_EVENTTYPE, NAMESPACE);
+        for (int i = 0; i < eventTypes.length; i++) {
+            eventType.appendChild(eventTypes[i].toXml(document));
+        }
+
+        if (filters.length > 0) {
+            Element filter = DomUtil.addChildElement(subscrInfo, XML_FILTER, NAMESPACE);
+            for (int i = 0; i < filters.length; i++) {
+                filter.appendChild(filters[i].toXml(document));
+            }
+        }
+
+        if (noLocal) {
+            DomUtil.addChildElement(subscrInfo, XML_NOLOCAL, NAMESPACE);
+        }
+        return subscrInfo;
+    }
+
+    //--------------------------------------------------------< inner class >---
+    /**
+     * Simple EventType implementation that only consists of a qualified event
+     * name.
+     */
+    private class SimpleEventType implements EventType {
+
+        private String localName;
+        private Namespace namespace;
+
+        SimpleEventType(String localName, Namespace namespace) {
+            this.localName = localName;
+            this.namespace = namespace;
+        }
+
+        public Element toXml(Document document) {
+            return DomUtil.createElement(document, localName, namespace);
+        }
+
+        public String getName() {
+            return localName;
+        }
+
+        public Namespace getNamespace() {
+            return namespace;
+        }

INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS55 INS42 INS83 INS83 INS5 MOV59 INS83 INS5 INS83 INS39 INS59 INS83 INS83 INS39 MOV59 INS83 INS29 INS83 INS42 INS44 INS44 MOV44 INS8 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS5 INS29 MOV83 UPD5 MOV5 MOV42 INS8 MOV29 INS83 INS5 INS42 INS44 MOV44 INS8 MOV29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS85 INS43 INS85 UPD42 INS42 INS65 INS65 INS65 INS65 INS5 INS42 INS39 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS5 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS39 INS42 MOV25 INS21 INS21 INS25 INS21 MOV21 INS60 INS60 INS25 INS25 INS21 INS60 INS25 INS21 INS43 INS85 INS65 INS65 INS43 MOV41 INS65 INS43 INS85 MOV43 INS42 INS43 UPD42 INS60 MOV24 INS41 INS65 INS65 INS42 INS43 INS42 INS60 MOV60 INS24 INS25 INS25 INS41 UPD65 MOV65 INS42 INS83 MOV43 INS59 INS83 INS43 INS59 INS42 INS44 INS44 MOV8 MOV83 MOV43 MOV42 INS44 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS66 INS42 INS42 INS42 INS43 INS85 INS42 INS33 INS9 INS42 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS43 INS85 UPD27 INS7 INS7 INS27 INS8 INS8 INS7 MOV43 INS59 MOV43 INS59 INS27 INS8 MOV8 INS32 INS8 INS7 MOV43 INS59 INS27 INS8 INS7 INS7 UPD66 UPD66 UPD66 INS42 INS66 INS66 INS42 UPD42 INS42 INS42 INS42 MOV43 INS59 INS8 INS11 INS42 INS68 INS42 INS42 MOV43 MOV59 INS58 INS27 INS37 INS8 INS27 MOV8 INS42 INS8 INS42 UPD66 UPD66 INS42 INS42 INS42 MOV43 INS42 INS43 INS42 INS21 INS21 INS43 INS42 INS41 INS41 INS42 MOV41 INS42 INS42 INS42 INS27 INS27 INS22 INS42 INS22 INS42 INS42 INS33 INS21 INS21 INS22 INS42 INS42 INS14 INS42 INS32 INS42 MOV33 INS60 INS61 INS42 INS42 INS53 INS42 INS11 INS42 INS14 UPD42 INS32 INS42 INS33 INS60 INS61 INS22 INS32 INS22 INS42 INS42 INS14 INS25 INS5 INS32 INS40 INS42 INS69 UPD42 INS32 UPD42 INS39 INS59 UPD42 MOV42 INS40 INS42 INS21 INS40 INS34 INS24 INS21 INS42 INS7 INS7 INS42 INS32 INS42 UPD42 INS42 INS33 INS40 MOV34 INS52 INS42 INS52 INS42 INS7 INS7 INS52 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 MOV42 INS43 INS59 INS32 INS8 INS14 INS5 INS32 INS43 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 MOV42 INS43 INS59 INS32 INS8 UPD42 INS5 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS43 INS32 INS8 INS43 MOV85 INS42 INS42 INS3 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 INS42 INS42 INS34 INS32 MOV43 INS58 INS27 INS37 INS8 INS32 INS22 INS42 INS22 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS22 INS42 INS22 INS3 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS43 INS45 INS43 INS85 INS42 INS42 INS3 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS43 INS85 INS42 INS42 INS3 INS42 MOV2 INS42 INS42 INS42 MOV21 INS42 INS5 INS32 INS42 INS42 INS42 INS32 UPD42 INS39 INS59 INS42 INS40 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS5 INS34 INS42 INS42 INS42 MOV43 INS59 INS43 INS59 INS32 INS42 INS42 INS5 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS5 INS32 INS32 INS43 INS85 INS42 INS42 INS2 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS34 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS85 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS2 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS2 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL83 DEL39 DEL23 DEL32 DEL32 DEL27 DEL25 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL66 DEL66 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL7 DEL8 DEL5 DEL60 DEL33 DEL27 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL33 DEL42 DEL85 DEL5 DEL42 DEL32 DEL3 DEL7 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL42 DEL40 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL85 DEL5 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL4 DEL59 DEL60 DEL8 DEL31