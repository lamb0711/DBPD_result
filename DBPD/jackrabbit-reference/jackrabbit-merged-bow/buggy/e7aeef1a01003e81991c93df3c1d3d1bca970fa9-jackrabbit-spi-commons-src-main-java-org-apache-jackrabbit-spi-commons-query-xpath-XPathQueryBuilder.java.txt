JCR-977: jcr:deref in xpath predicates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@791737 13f79535-47bb-0310-9956-ffa450edef68

-                        tmpRelPath.addLast(tmp.getRelativePath().getNameElement());
+                        PathQueryNode relPath = tmp.getRelativePath();
+                        LocationStepQueryNode[] steps = relPath.getPathSteps();
+                        
+                        tmpRelPath.addLast(steps[steps.length-1].getNameTest());
-                exceptions.add(new InvalidQueryException("Parent axis is not supported"));
+                if (queryNode instanceof LocationStepQueryNode) {
+                    ((LocationStepQueryNode) queryNode).setNameTest(PATH_FACTORY.getParentElement().getName());
+                } else {
+                    ((RelationQueryNode) queryNode).addPathElement(PATH_FACTORY.getParentElement());
+                }
-                        DerefQueryNode derefNode = factory.createDerefQueryNode(pathNode, null, false);
-
-                        // assign property name
-                        node.jjtGetChild(1).jjtAccept(this, derefNode);
-                        // check property name
-                        if (derefNode.getRefProperty() == null) {
-                            exceptions.add(new InvalidQueryException("Wrong first argument type for jcr:deref"));
-                        }
-
-                        SimpleNode literal = (SimpleNode) node.jjtGetChild(2).jjtGetChild(0);
-                        if (literal.getId() == JJTSTRINGLITERAL) {
-                            String value = literal.getValue();
-                            // strip quotes
-                            value = value.substring(1, value.length() - 1);
-                            if (!value.equals("*")) {
-                                Name name = null;
-                                try {
-                                    name = decode(resolver.getQName(value));
-                                } catch (NameException e) {
-                                    exceptions.add(new InvalidQueryException("Illegal name: " + value));
-                                }
-                                derefNode.setNameTest(name);
-                            }
-                        } else {
-                            exceptions.add(new InvalidQueryException("Second argument for jcr:deref must be a String"));
-                        }
-
-                        // check if descendant
-                        if (!descendant) {
-                            Node p = node.jjtGetParent();
-                            for (int i = 0; i < p.jjtGetNumChildren(); i++) {
-                                SimpleNode c = (SimpleNode) p.jjtGetChild(i);
-                                if (c == node) {
-                                    break;
-                                }
-                                descendant = (c.getId() == JJTSLASHSLASH
-                                        || c.getId() == JJTROOTDESCENDANTS);
-                            }
-                        }
-                        derefNode.setIncludeDescendants(descendant);
-                        pathNode.addPathStep(derefNode);
+                        
+                        pathNode.addPathStep(createDerefQueryNode(node, descendant, pathNode));
+                    } else if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                        RelationQueryNode relNode = (RelationQueryNode) queryNode;
+                        DerefQueryNode deref = createDerefQueryNode(node, descendant, relNode.getRelativePath());
+                        relNode.getRelativePath().addPathStep(deref);
+    private DerefQueryNode createDerefQueryNode(SimpleNode node, boolean descendant, QueryNode pathNode)
+        throws NamespaceException {
+        DerefQueryNode derefNode = factory.createDerefQueryNode(pathNode, null, false);
+
+        // assign property name
+        node.jjtGetChild(1).jjtAccept(this, derefNode);
+        // check property name
+        if (derefNode.getRefProperty() == null) {
+            exceptions.add(new InvalidQueryException("Wrong first argument type for jcr:deref"));
+        }
+
+        SimpleNode literal = (SimpleNode) node.jjtGetChild(2).jjtGetChild(0);
+        if (literal.getId() == JJTSTRINGLITERAL) {
+            String value = literal.getValue();
+            // strip quotes
+            value = value.substring(1, value.length() - 1);
+            if (!value.equals("*")) {
+                Name name = null;
+                try {
+                    name = decode(resolver.getQName(value));
+                } catch (NameException e) {
+                    exceptions.add(new InvalidQueryException("Illegal name: " + value));
+                }
+                derefNode.setNameTest(name);
+            }
+        } else {
+            exceptions.add(new InvalidQueryException("Second argument for jcr:deref must be a String"));
+        }
+
+        // check if descendant
+        if (!descendant) {
+            Node p = node.jjtGetParent();
+            for (int i = 0; i < p.jjtGetNumChildren(); i++) {
+                SimpleNode c = (SimpleNode) p.jjtGetChild(i);
+                if (c == node) {
+                    break;
+                }
+                descendant = (c.getId() == JJTSLASHSLASH
+                        || c.getId() == JJTROOTDESCENDANTS);
+            }
+        }
+        derefNode.setIncludeDescendants(descendant);
+        return derefNode;
+    }
+

INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS43 MOV8 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS41 INS25 INS42 INS42 INS42 INS62 INS8 INS8 INS42 INS43 INS21 INS21 INS42 INS32 MOV32 INS36 INS42 INS32 INS36 UPD42 INS32 INS60 INS60 INS11 INS32 INS42 INS11 INS42 INS42 INS43 INS59 INS5 INS59 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 MOV32 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS2 UPD42 INS42 INS27 INS40 INS34 INS25 MOV27 INS8 INS25 MOV60 INS21 INS27 INS8 MOV8 INS32 INS32 INS40 INS60 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL43 DEL45 DEL14 DEL21 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21