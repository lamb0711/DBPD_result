cleaned up WorkspaceImpl & WorkspaceImporter: refactored duplicate code into new class BatchedItemOperations

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@164983 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.BatchedItemOperations;
-import org.apache.jackrabbit.core.ItemId;
-import org.apache.jackrabbit.core.NoPrefixDeclaredException;
-import org.apache.jackrabbit.core.nodetype.NodeDef;
+import org.apache.jackrabbit.core.nodetype.NodeDef;
-import org.apache.jackrabbit.core.state.ItemStateException;
-import org.apache.jackrabbit.core.state.NoSuchItemStateException;
-import org.apache.jackrabbit.core.state.UpdatableItemStateManager;
+import javax.jcr.ImportUUIDBehavior;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.PathNotFoundException;
-import javax.jcr.ImportUUIDBehavior;
+import javax.jcr.lock.LockException;
+import javax.jcr.version.VersionException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.HashSet;
-import java.util.Set;
-    private final UpdatableItemStateManager stateMgr;
+    private final BatchedItemOperations itemOps;
-     * @param importTarget
+     * @param parentPath   target path where to add the imported subtree
-     * @param uuidBehavior     any of the constants declared by
-     *                         {@link ImportUUIDBehavior}
+     * @param uuidBehavior flag that governs how incoming UUIDs are handled
+     * @throws PathNotFoundException        if no node exists at
+     *                                      <code>parentPath</code> or if the
+     *                                      current session is not granted read
+     *                                      access.
+     * @throws ConstraintViolationException if the node at
+     *                                      <code>parentPath</code> is protected
+     * @throws VersionException             if the node at
+     *                                      <code>parentPath</code> is not
+     *                                      checked-out
+     * @throws LockException                if a lock prevents the addition of
+     *                                      the subtree
+     * @throws RepositoryException          if another error occurs
-    public WorkspaceImporter(NodeState importTarget,
+    public WorkspaceImporter(Path parentPath,
-                             int uuidBehavior) {
-        this.importTarget = importTarget;
+                             int uuidBehavior)
+            throws PathNotFoundException, ConstraintViolationException,
+            VersionException, LockException, RepositoryException {
+
+        SessionImpl ses = (SessionImpl) wsp.getSession();
+        itemOps = new BatchedItemOperations(wsp.getItemStateManager(),
+                ntReg, wsp.getLockManager(), ses, wsp.getHierarchyManager(),
+                ses.getNamespaceResolver());
+        hierMgr = wsp.getHierarchyManager();
+
+        // perform preliminary checks
+        itemOps.verifyCanWrite(parentPath);
+        this.importTarget = itemOps.getNodeState(parentPath);
+
-
-        hierMgr = wsp.getHierarchyManager();
-        stateMgr = wsp.getItemStateManager();
-
-     * Failsafe translation of internal <code>ItemId</code> to JCR path for
-     * use in error messages etc.
-     *
-     * @param id id to translate
-     * @return JCR path
-     */
-    private String resolveJCRPath(ItemId id) {
-        Path path;
-        try {
-            path = hierMgr.getPath(id);
-        } catch (RepositoryException re) {
-            log.error(id + ": failed to determine path to");
-            // return string representation if id as a fallback
-            return id.toString();
-        }
-        try {
-            return path.toJCRPath(((SessionImpl) wsp.getSession()).getNamespaceResolver());
-        } catch (NoPrefixDeclaredException npde) {
-            log.error("failed to convert " + path.toString() + " to JCR path.");
-            // return string representation of internal path as a fallback
-            return path.toString();
-        }
-    }
-
-    protected NodeState createNode(NodeState parent,
-                                   QName nodeName,
-                                   QName nodeTypeName,
-                                   QName[] mixinNames,
-                                   String uuid)
-            throws RepositoryException {
-        NodeDef def =
-                wsp.findApplicableNodeDefinition(nodeName, nodeTypeName, parent);
-        return createNode(parent, nodeName, nodeTypeName, mixinNames, uuid, def);
-    }
-
-    protected NodeState createNode(NodeState parent,
-                                   QName nodeName,
-                                   QName nodeTypeName,
-                                   QName[] mixinNames,
-                                   String uuid,
-                                   NodeDef def)
-            throws RepositoryException {
-        // check for name collisions with existing properties
-        if (parent.hasPropertyEntry(nodeName)) {
-            String msg = "there's already a property with name " + nodeName;
-            log.debug(msg);
-            throw new RepositoryException(msg);
-        }
-        // check for name collisions with existing nodes
-        if (!def.allowsSameNameSiblings() && parent.hasChildNodeEntry(nodeName)) {
-            NodeId id = new NodeId(parent.getChildNodeEntry(nodeName, 1).getUUID());
-            throw new ItemExistsException(resolveJCRPath(id));
-        }
-        if (uuid == null) {
-            // create new uuid
-            uuid = UUID.randomUUID().toString();    // create new version 4 uuid
-        }
-        if (nodeTypeName == null) {
-            // no primary node type specified,
-            // try default primary type from definition
-            nodeTypeName = def.getDefaultPrimaryType();
-            if (nodeTypeName == null) {
-                String msg = "an applicable node type could not be determined for "
-                        + nodeName;
-                log.debug(msg);
-                throw new ConstraintViolationException(msg);
-            }
-        }
-        NodeState node = stateMgr.createNew(uuid, nodeTypeName, parent.getUUID());
-        if (mixinNames != null && mixinNames.length > 0) {
-            node.setMixinTypeNames(new HashSet(Arrays.asList(mixinNames)));
-        }
-        node.setDefinitionId(def.getId());
-
-        // now add new child node entry to parent
-        parent.addChildNodeEntry(nodeName, node.getUUID());
-
-        EffectiveNodeType ent = wsp.getEffectiveNodeType(node);
-
-        if (!node.getMixinTypeNames().isEmpty()) {
-            // create jcr:mixinTypes property
-            PropDef pd = ent.getApplicablePropertyDef(JCR_MIXINTYPES,
-                    PropertyType.NAME, true);
-            createProperty(node, pd.getName(), pd.getRequiredType(), pd);
-        }
-
-        // add 'auto-create' properties defined in node type
-        PropDef[] pda = ent.getAutoCreatePropDefs();
-        for (int i = 0; i < pda.length; i++) {
-            PropDef pd = pda[i];
-            createProperty(node, pd.getName(), pd.getRequiredType(), pd);
-        }
-
-        // recursively add 'auto-create' child nodes defined in node type
-        NodeDef[] nda = ent.getAutoCreateNodeDefs();
-        for (int i = 0; i < nda.length; i++) {
-            NodeDef nd = nda[i];
-            createNode(node, nd.getName(), nd.getDefaultPrimaryType(),
-                    null, null, nd);
-        }
-
-        return node;
-    }
-
-    protected PropertyState createProperty(NodeState parent,
-                                           QName propName,
-                                           int type,
-                                           int numValues)
-            throws RepositoryException {
-        // find applicable definition
-        PropDef def;
-        // multi- or single-valued property?
-        if (numValues == 1) {
-            // could be single- or multi-valued (n == 1)
-            try {
-                // try single-valued
-                def = wsp.findApplicablePropertyDefinition(propName,
-                        type, false, parent);
-            } catch (ConstraintViolationException cve) {
-                // try multi-valued
-                def = wsp.findApplicablePropertyDefinition(propName,
-                        type, true, parent);
-            }
-        } else {
-            // can only be multi-valued (n == 0 || n > 1)
-            def = wsp.findApplicablePropertyDefinition(propName,
-                    type, true, parent);
-        }
-        return createProperty(parent, propName, type, def);
-    }
-
-    protected PropertyState createProperty(NodeState parent,
-                                           QName propName,
-                                           int type,
-                                           PropDef def)
-            throws RepositoryException {
-        // check for name collisions with existing child nodes
-        if (parent.hasChildNodeEntry(propName)) {
-            String msg = "there's already a child node with name " + propName;
-            log.debug(msg);
-            throw new RepositoryException(msg);
-        }
-
-        // create property
-        PropertyState prop = stateMgr.createNew(propName, parent.getUUID());
-
-        prop.setDefinitionId(def.getId());
-        if (def.getRequiredType() != PropertyType.UNDEFINED) {
-            prop.setType(def.getRequiredType());
-        } else if (type != PropertyType.UNDEFINED) {
-            prop.setType(type);
-        } else {
-            prop.setType(PropertyType.STRING);
-        }
-        prop.setMultiValued(def.isMultiple());
-
-        // compute system generated values if necessary
-        InternalValue[] genValues =
-                computeSystemGeneratedPropertyValues(parent, propName, def);
-        if (genValues != null) {
-            prop.setValues(genValues);
-        } else if (def.getDefaultValues() != null) {
-            prop.setValues(def.getDefaultValues());
-        }
-
-        // now add new property entry to parent
-        parent.addPropertyEntry(propName);
-
-        return prop;
-    }
-
-    /**
-     * Computes the values of well-known system (i.e. protected) properties.
-     * todo: duplicate code in NodeImpl: consolidate and delegate to NodeTypeInstanceHandler
-     *
-     * @param name
-     * @param def
+     * @param conflicting
+     * @param nodeInfo
-    protected InternalValue[] computeSystemGeneratedPropertyValues(NodeState parent,
-                                                                   QName name,
-                                                                   PropDef def)
-            throws RepositoryException {
-        InternalValue[] genValues = null;
-
-        /**
-         * todo: need to come up with some callback mechanism for applying system generated values
-         * (e.g. using a NodeTypeInstanceHandler interface)
-         */
-
-        // compute system generated values
-        QName declaringNT = def.getDeclaringNodeType();
-        if (MIX_REFERENCEABLE.equals(declaringNT)) {
-            // mix:referenceable node type
-            if (JCR_UUID.equals(name)) {
-                // jcr:uuid property
-                genValues = new InternalValue[]{InternalValue.create(parent.getUUID())};
-            }
-        } else if (NT_BASE.equals(declaringNT)) {
-            // nt:base node type
-            if (JCR_PRIMARYTYPE.equals(name)) {
-                // jcr:primaryType property
-                genValues = new InternalValue[]{InternalValue.create(parent.getNodeTypeName())};
-            } else if (JCR_MIXINTYPES.equals(name)) {
-                // jcr:mixinTypes property
-                Set mixins = parent.getMixinTypeNames();
-                ArrayList values = new ArrayList(mixins.size());
-                Iterator iter = mixins.iterator();
-                while (iter.hasNext()) {
-                    values.add(InternalValue.create((QName) iter.next()));
-                }
-                genValues = (InternalValue[]) values.toArray(new InternalValue[values.size()]);
-            }
-        } else if (NT_HIERARCHYNODE.equals(declaringNT)) {
-            // nt:hierarchyNode node type
-            if (JCR_CREATED.equals(name)) {
-                // jcr:created property
-                genValues = new InternalValue[]{InternalValue.create(Calendar.getInstance())};
-            }
-        } else if (NT_RESOURCE.equals(declaringNT)) {
-            // nt:resource node type
-            if (JCR_LASTMODIFIED.equals(name)) {
-                // jcr:lastModified property
-                genValues = new InternalValue[]{InternalValue.create(Calendar.getInstance())};
-            }
-        } else if (NT_VERSION.equals(declaringNT)) {
-            // nt:version node type
-            if (JCR_CREATED.equals(name)) {
-                // jcr:created property
-                genValues = new InternalValue[]{InternalValue.create(Calendar.getInstance())};
-            }
-/*
-        // FIXME delegate to NodeTypeInstanceHandler
-        } else if (MIX_VERSIONABLE.equals(declaringNT)) {
-            // mix:versionable node type
-            if (JCR_VERSIONHISTORY.equals(name)) {
-                // jcr:versionHistory property
-                genValues = new InternalValue[]{InternalValue.create(new UUID(hist.getUUID()))};
-            } else if (JCR_BASEVERSION.equals(name)) {
-                // jcr:baseVersion property
-                genValues = new InternalValue[]{InternalValue.create(new UUID(hist.getRootVersion().getUUID()))};
-            } else if (JCR_ISCHECKEDOUT.equals(name)) {
-                // jcr:isCheckedOut property
-                genValues = new InternalValue[]{InternalValue.create(true)};
-            } else if (JCR_PREDECESSORS.equals(name)) {
-                // jcr:predecessors property
-                genValues = new InternalValue[]{InternalValue.create(new UUID(hist.getRootVersion().getUUID()))};
-            }
-*/
-        }
-
-        return genValues;
-    }
-
-    /**
-     * Unlinks the specified target node from all its parents and recursively
-     * removes it including its properties and child nodes.
-     * <p/>
-     * <b>Precondition:</b> the state manager of this workspace needs to be in
-     * edit mode.
-     * todo duplicate code in WorkspaceImporter; consolidate in WorkspaceOperations class
-     *
-     * @param target
-     * @throws RepositoryException if an error occurs
-     */
-    protected void removeNode(NodeState target)
-            throws RepositoryException {
-
-        // copy list to avoid ConcurrentModificationException
-        ArrayList parentUUIDs = new ArrayList(target.getParentUUIDs());
-        Iterator iter = parentUUIDs.iterator();
-        while (iter.hasNext()) {
-            String parentUUID = (String) iter.next();
-            NodeId parentId = new NodeId(parentUUID);
-
-            // unlink target node from this parent
-            unlinkNode(target, parentUUID);
-
-            // remove child node entries
-            NodeState parent;
-            try {
-                parent = (NodeState) stateMgr.getItemState(parentId);
-            } catch (ItemStateException ise) {
-                // should never get here...
-                String msg = "internal error: failed to retrieve parent state";
-                log.error(msg, ise);
-                throw new RepositoryException(msg, ise);
-            }
-            // use temp array to avoid ConcurrentModificationException
-            ArrayList tmp =
-                    new ArrayList(parent.getChildNodeEntries(target.getUUID()));
-            // remove from tail to avoid problems with same-name siblings
-            for (int i = tmp.size() - 1; i >= 0; i--) {
-                NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) tmp.get(i);
-                parent.removeChildNodeEntry(entry.getName(), entry.getIndex());
-            }
-            // store parent
-            stateMgr.store(parent);
-        }
-    }
-
-    /**
-     * Unlinks the given target node from the specified parent i.e. removes
-     * <code>parentUUID</code> from its list of parents. If as a result
-     * the target node would be orphaned it will be recursively removed
-     * including its properties and child nodes.
-     * <p/>
-     * Note that the child node entry refering to <code>target</code> is
-     * <b><i>not</i></b> automatically removed from <code>target</code>'s
-     * parent denoted by <code>parentUUID</code>.
-     * <p/>
-     * <b>Precondition:</b> the state manager of this workspace needs to be in
-     * edit mode.
-     * todo duplicate code in WorkspaceImporter; consolidate in WorkspaceOperations class
-     *
-     * @param target
-     * @param parentUUID
-     * @throws RepositoryException if an error occurs
-     */
-    private void unlinkNode(NodeState target, String parentUUID)
-            throws RepositoryException {
-
-        // check if this node state would be orphaned after unlinking it from parent
-        ArrayList parentUUIDs = new ArrayList(target.getParentUUIDs());
-        parentUUIDs.remove(parentUUID);
-        boolean orphaned = parentUUIDs.isEmpty();
-
-        if (orphaned) {
-            // remove child nodes
-            // use temp array to avoid ConcurrentModificationException
-            ArrayList tmp = new ArrayList(target.getChildNodeEntries());
-            // remove from tail to avoid problems with same-name siblings
-            for (int i = tmp.size() - 1; i >= 0; i--) {
-                NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) tmp.get(i);
-                NodeId nodeId = new NodeId(entry.getUUID());
-                try {
-                    NodeState node = (NodeState) stateMgr.getItemState(nodeId);
-                    // check if child node can be removed
-                    // (access rights, locking & versioning status)
-                    wsp.checkRemoveNode(node, (NodeId) target.getId(),
-                            WorkspaceImpl.CHECK_ACCESS | WorkspaceImpl.CHECK_LOCK
-                            | WorkspaceImpl.CHECK_VERSIONING);
-                    // unlink child node (recursive)
-                    unlinkNode(node, target.getUUID());
-                } catch (ItemStateException ise) {
-                    String msg = "internal error: failed to retrieve state of "
-                            + nodeId;
-                    log.debug(msg);
-                    throw new RepositoryException(msg, ise);
-                }
-                // remove child node entry
-                target.removeChildNodeEntry(entry.getName(), entry.getIndex());
-            }
-
-            // remove properties
-            // use temp array to avoid ConcurrentModificationException
-            tmp = new ArrayList(target.getPropertyEntries());
-            for (int i = 0; i < tmp.size(); i++) {
-                NodeState.PropertyEntry entry = (NodeState.PropertyEntry) tmp.get(i);
-                PropertyId propId =
-                        new PropertyId(target.getUUID(), entry.getName());
-                try {
-                    PropertyState prop = (PropertyState) stateMgr.getItemState(propId);
-                    // remove property entry
-                    target.removePropertyEntry(propId.getName());
-                    // destroy property state
-                    stateMgr.destroy(prop);
-                } catch (ItemStateException ise) {
-                    String msg = "internal error: failed to retrieve state of "
-                            + propId;
-                    log.debug(msg);
-                    throw new RepositoryException(msg, ise);
-                }
-            }
-        }
-
-        // now actually do unlink target state from specified parent state
-        // (i.e. remove uuid of parent state from target state's parent list)
-        target.removeParentUUID(parentUUID);
-
-        if (orphaned) {
-            // destroy target state (pass overlayed state since target state
-            // might have been modified during unlinking)
-            stateMgr.destroy(target.getOverlayedState());
-        } else {
-            // store target
-            stateMgr.store(target);
-        }
-    }
-
-            wsp.checkAddNode(parent, nodeInfo.getName(),
+            itemOps.checkAddNode(parent, nodeInfo.getName(),
-                    WorkspaceImpl.CHECK_ACCESS
-                    | WorkspaceImpl.CHECK_CONSTRAINTS);
-            node = createNode(parent, nodeInfo.getName(),
+                    BatchedItemOperations.CHECK_ACCESS
+                    | BatchedItemOperations.CHECK_CONSTRAINTS);
+            node = itemOps.createNodeState(parent, nodeInfo.getName(),
-            EffectiveNodeType ent = wsp.getEffectiveNodeType(node);
+            EffectiveNodeType ent = itemOps.getEffectiveNodeType(node);
-            wsp.checkRemoveNode(conflicting,
-                    WorkspaceImpl.CHECK_ACCESS
-                    | WorkspaceImpl.CHECK_LOCK
-                    | WorkspaceImpl.CHECK_VERSIONING
-                    | WorkspaceImpl.CHECK_CONSTRAINTS);
+            itemOps.checkRemoveNode(conflicting,
+                    BatchedItemOperations.CHECK_ACCESS
+                    | BatchedItemOperations.CHECK_LOCK
+                    | BatchedItemOperations.CHECK_VERSIONING
+                    | BatchedItemOperations.CHECK_CONSTRAINTS);
-            removeNode(conflicting);
+            itemOps.removeNodeState(conflicting);
-            wsp.checkAddNode(parent, nodeInfo.getName(),
+            itemOps.checkAddNode(parent, nodeInfo.getName(),
-                    WorkspaceImpl.CHECK_ACCESS
-                    | WorkspaceImpl.CHECK_CONSTRAINTS);
+                    BatchedItemOperations.CHECK_ACCESS
+                    | BatchedItemOperations.CHECK_CONSTRAINTS);
-            node = createNode(parent, nodeInfo.getName(),
+            node = itemOps.createNodeState(parent, nodeInfo.getName(),
-                parent = (NodeState) stateMgr.getItemState(parentId);
-            } catch (ItemStateException ise) {
+                parent = itemOps.getNodeState(parentId);
+            } catch (ItemNotFoundException infe) {
-                log.error(msg, ise);
-                throw new RepositoryException(msg, ise);
+                log.error(msg, infe);
+                throw new RepositoryException(msg, infe);
-            wsp.checkRemoveNode(conflicting,
-                    WorkspaceImpl.CHECK_ACCESS
-                    | WorkspaceImpl.CHECK_LOCK
-                    | WorkspaceImpl.CHECK_VERSIONING
-                    | WorkspaceImpl.CHECK_CONSTRAINTS);
+            itemOps.checkRemoveNode(conflicting,
+                    BatchedItemOperations.CHECK_ACCESS
+                    | BatchedItemOperations.CHECK_LOCK
+                    | BatchedItemOperations.CHECK_VERSIONING
+                    | BatchedItemOperations.CHECK_CONSTRAINTS);
-            removeNode(conflicting);
+            itemOps.removeNodeState(conflicting);
-            wsp.checkAddNode(parent, nodeInfo.getName(),
+            itemOps.checkAddNode(parent, nodeInfo.getName(),
-                    WorkspaceImpl.CHECK_ACCESS
-                    | WorkspaceImpl.CHECK_LOCK
-                    | WorkspaceImpl.CHECK_VERSIONING
-                    | WorkspaceImpl.CHECK_CONSTRAINTS);
+                    BatchedItemOperations.CHECK_ACCESS
+                    | BatchedItemOperations.CHECK_LOCK
+                    | BatchedItemOperations.CHECK_VERSIONING
+                    | BatchedItemOperations.CHECK_CONSTRAINTS);
-            node = createNode(parent, nodeInfo.getName(),
+            node = itemOps.createNodeState(parent, nodeInfo.getName(),
-            stateMgr.edit();
+            itemOps.edit();
-        NodeState parent = null;
+        NodeState parent;
-                NodeState existing = (NodeState) stateMgr.getItemState(idExisting);
+                NodeState existing = (NodeState) itemOps.getItemState(idExisting);
-                            wsp.getEffectiveNodeType(existing);
+                            itemOps.getEffectiveNodeType(existing);
-                                + resolveJCRPath(existing.getId()));
+                                + itemOps.safeGetJCRPath(existing.getId()));
-                        throw new ItemExistsException(resolveJCRPath(existing.getId()));
+                        throw new ItemExistsException(itemOps.safeGetJCRPath(existing.getId()));
-                            wsp.findApplicableNodeDefinition(nodeName, ntName, parent);
+                            itemOps.findApplicableNodeDefinition(nodeName, ntName, parent);
-                    wsp.checkAddNode(parent, nodeName, ntName,
-                            WorkspaceImpl.CHECK_ACCESS
-                            | WorkspaceImpl.CHECK_CONSTRAINTS);
+                    itemOps.checkAddNode(parent, nodeName, ntName,
+                            BatchedItemOperations.CHECK_ACCESS
+                            | BatchedItemOperations.CHECK_CONSTRAINTS);
-                    node = createNode(parent, nodeName, ntName, mixins, null, def);
+                    node = itemOps.createNodeState(parent, nodeName, ntName, mixins, null, def);
-                        conflicting =
-                                (NodeState) stateMgr.getItemState(new NodeId(uuid));
-                    } catch (NoSuchItemStateException nsise) {
+                        conflicting = itemOps.getNodeState(new NodeId(uuid));
+                    } catch (ItemNotFoundException infe) {
-                                wsp.findApplicableNodeDefinition(nodeName, ntName, parent);
+                                itemOps.findApplicableNodeDefinition(nodeName, ntName, parent);
-                        wsp.checkAddNode(parent, nodeName, ntName,
-                                WorkspaceImpl.CHECK_ACCESS
-                                | WorkspaceImpl.CHECK_CONSTRAINTS);
+                        itemOps.checkAddNode(parent, nodeName, ntName,
+                                BatchedItemOperations.CHECK_ACCESS
+                                | BatchedItemOperations.CHECK_CONSTRAINTS);
-                        node = createNode(parent, nodeName, ntName, mixins, uuid, def);
+                        node = itemOps.createNodeState(parent, nodeName, ntName, mixins, uuid, def);
-                            (PropertyState) stateMgr.getItemState(idExisting);
+                            (PropertyState) itemOps.getItemState(idExisting);
-                                + resolveJCRPath(idExisting));
+                                + itemOps.safeGetJCRPath(idExisting));
-                        throw new ItemExistsException(resolveJCRPath(existing.getId()));
+                        throw new ItemExistsException(itemOps.safeGetJCRPath(existing.getId()));
-                            def = wsp.findApplicablePropertyDefinition(propName,
+                            def = itemOps.findApplicablePropertyDefinition(propName,
-                            def = wsp.findApplicablePropertyDefinition(propName,
+                            def = itemOps.findApplicablePropertyDefinition(propName,
-                        def = wsp.findApplicablePropertyDefinition(propName,
+                        def = itemOps.findApplicablePropertyDefinition(propName,
-                    prop = createProperty(node, propName, type, def);
+                    prop = itemOps.createPropertyState(node, propName, type, def);
-                    throw new ConstraintViolationException(resolveJCRPath(prop.getId())
+                    throw new ConstraintViolationException(itemOps.safeGetJCRPath(prop.getId())
-
-                // make sure node is valid according to its definition
-                wsp.validate(prop);
+                // make sure property is valid according to its definition
+                itemOps.validate(prop);
-                stateMgr.store(prop);
+                itemOps.store(prop);
-            stateMgr.store(node);
-            stateMgr.store(parent);
+            itemOps.store(node);
+            itemOps.store(parent);
-        } catch (ItemStateException ise) {
-            String msg = "internal error: failed to store state of "
-                    + resolveJCRPath(parent.getId());
-            log.debug(msg);
-            throw new RepositoryException(msg, ise);
-                stateMgr.cancel();
+                itemOps.cancel();
-            wsp.validate(node);
+            itemOps.validate(node);
-            stateMgr.store(node);
+            itemOps.store(node);
-                stateMgr.cancel();
+                itemOps.cancel();
-                    stateMgr.store(prop);
+                    itemOps.store(prop);
-            wsp.validate(importTarget);
+            itemOps.validate(importTarget);
-            stateMgr.store(importTarget);
+            itemOps.store(importTarget);
-                stateMgr.cancel();
+                itemOps.cancel();
-            try {
-                // finish update
-                stateMgr.update();
-            } catch (ItemStateException ise) {
-                aborted = true;
-                String msg = "internal error: failed to finish update operation";
-                log.debug(msg);
-                throw new RepositoryException(msg, ise);
-            }
+            // finish update
+            itemOps.update();

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 INS43 MOV43 INS43 INS43 MOV43 MOV21 MOV21 INS29 UPD42 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 UPD43 UPD42 INS42 INS42 INS42 INS60 INS21 MOV65 INS65 INS65 INS65 MOV65 MOV60 UPD42 INS66 MOV42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 UPD66 MOV66 INS66 INS66 UPD42 MOV42 INS66 INS66 INS42 INS66 MOV42 INS43 INS59 INS32 INS42 INS42 INS8 MOV8 INS8 INS42 INS42 MOV11 INS42 INS14 INS42 INS42 INS42 INS32 MOV25 INS25 MOV21 INS43 MOV32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 MOV43 MOV27 MOV38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 MOV32 INS21 UPD42 INS25 UPD42 UPD42 MOV21 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD40 UPD40 INS42 UPD42 MOV32 UPD42 MOV32 INS7 MOV21 MOV43 MOV27 INS8 INS8 UPD42 INS42 UPD42 INS42 UPD42 INS27 INS42 INS32 INS60 MOV25 INS21 INS21 MOV60 MOV54 MOV25 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD40 UPD40 UPD40 UPD40 INS40 INS40 INS42 INS42 INS42 MOV32 MOV32 MOV32 MOV32 UPD42 INS42 UPD42 UPD42 MOV43 MOV43 MOV43 INS59 INS32 INS7 MOV43 UPD43 UPD42 MOV60 MOV53 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS40 UPD40 INS42 UPD42 MOV32 MOV32 MOV32 MOV32 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 MOV25 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 UPD43 UPD42 MOV43 MOV43 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 INS42 MOV43 MOV32 UPD42 UPD42 UPD42 MOV43 MOV32 MOV44 INS42 UPD42 INS32 INS42 UPD42 UPD42 UPD42 UPD42 UPD40 UPD40 INS42 UPD42 INS42 UPD42 UPD42 INS42 INS42 MOV32 INS42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL65 DEL65 DEL42 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL42 DEL42 DEL36 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL40 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL40 DEL40 DEL40 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL7 DEL42 DEL43 DEL32 DEL11 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL11 DEL42 DEL43 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8