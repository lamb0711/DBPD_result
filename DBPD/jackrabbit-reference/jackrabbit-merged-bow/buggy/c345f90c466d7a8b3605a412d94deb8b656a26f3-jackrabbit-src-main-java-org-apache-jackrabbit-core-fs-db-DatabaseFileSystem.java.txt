JCR-645

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@478892 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import java.util.HashMap;
-    // the list of prepared statements, used in close()
-    private List preparedStatements;
+    // time to sleep in ms before a reconnect is attempted
+    protected static final int SLEEP_BEFORE_RECONNECT = 10000;
-    // shared prepared statements
-    protected PreparedStatement selectExistStmt;
-    protected PreparedStatement selectFileExistStmt;
-    protected PreparedStatement selectFolderExistStmt;
-    protected PreparedStatement selectChildCountStmt;
-    protected PreparedStatement selectDataStmt;
-    protected PreparedStatement selectLastModifiedStmt;
-    protected PreparedStatement selectLengthStmt;
-    protected PreparedStatement selectFileNamesStmt;
-    protected PreparedStatement selectFolderNamesStmt;
-    protected PreparedStatement selectFileAndFolderNamesStmt;
-    protected PreparedStatement deleteFileStmt;
-    protected PreparedStatement deleteFolderStmt;
-    protected PreparedStatement insertFileStmt;
-    protected PreparedStatement insertFolderStmt;
-    protected PreparedStatement updateDataStmt;
-    protected PreparedStatement updateLastModifiedStmt;
-    protected PreparedStatement copyFileStmt;
-    protected PreparedStatement copyFilesStmt;
+    // the map of prepared statements (key: sql stmt, value: prepared stmt)
+    private HashMap preparedStatements = new HashMap();
+
+    // SQL statements
+    protected String selectExistSQL;
+    protected String selectFileExistSQL;
+    protected String selectFolderExistSQL;
+    protected String selectChildCountSQL;
+    protected String selectDataSQL;
+    protected String selectLastModifiedSQL;
+    protected String selectLengthSQL;
+    protected String selectFileNamesSQL;
+    protected String selectFolderNamesSQL;
+    protected String selectFileAndFolderNamesSQL;
+    protected String deleteFileSQL;
+    protected String deleteFolderSQL;
+    protected String insertFileSQL;
+    protected String insertFolderSQL;
+    protected String updateDataSQL;
+    protected String updateLastModifiedSQL;
+    protected String copyFileSQL;
+    protected String copyFilesSQL;
+            // build sql statements
+            buildSQLStatements();
+
-            preparedStatements = initPreparedStatements();
+            initPreparedStatements();
-            if (preparedStatements != null) {
-                while (!preparedStatements.isEmpty()) {
-                    closeStatement(
-                            (PreparedStatement) preparedStatements.remove(0)
-                    );
-                }
+            for (Iterator it = preparedStatements.values().iterator(); it.hasNext(); ) {
+                closeStatement((PreparedStatement) it.next());
-            preparedStatements = null;
+            preparedStatements.clear();
-        PreparedStatement stmt = deleteFileStmt;
-        synchronized (stmt) {
+        synchronized (deleteFileSQL) {
-                stmt.setString(1, parentDir);
-                stmt.setString(2, name);
-                count = stmt.executeUpdate();
+                Statement stmt = executeStmt(
+                        deleteFileSQL, new Object[]{parentDir, name});
+                count = stmt.getUpdateCount();
-            } finally {
-                resetStatement(stmt);
-        PreparedStatement stmt = deleteFolderStmt;
-        synchronized (stmt) {
+        synchronized (deleteFolderSQL) {
-                stmt.setString(1, parentDir);
-                stmt.setString(2, name);
-                stmt.setString(3, folderPath);
-                stmt.setString(4, folderPath + FileSystem.SEPARATOR + "%");
-                count = stmt.executeUpdate();
+                Statement stmt = executeStmt(deleteFolderSQL, new Object[]{
+                        parentDir,
+                        name,
+                        folderPath,
+                        folderPath + FileSystem.SEPARATOR + "%"});
+                count = stmt.getUpdateCount();
-            } finally {
-                resetStatement(stmt);
-        PreparedStatement stmt = selectExistStmt;
-        synchronized (stmt) {
+        synchronized (selectExistSQL) {
-                stmt.setString(1, parentDir);
-                stmt.setString(2, name);
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        selectExistSQL, new Object[]{parentDir, name});
-                resetStatement(stmt);
-        PreparedStatement stmt = selectFileExistStmt;
-        synchronized (stmt) {
+        synchronized (selectFileExistSQL) {
-                stmt.setString(1, parentDir);
-                stmt.setString(2, name);
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        selectFileExistSQL, new Object[]{parentDir, name});
-                resetStatement(stmt);
-        PreparedStatement stmt = selectFolderExistStmt;
-        synchronized (stmt) {
+        synchronized (selectFolderExistSQL) {
-                stmt.setString(1, parentDir);
-                stmt.setString(2, name);
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        selectFolderExistSQL, new Object[]{parentDir, name});
-                resetStatement(stmt);
-        PreparedStatement stmt = selectLastModifiedStmt;
-        synchronized (stmt) {
+        synchronized (selectLastModifiedSQL) {
-                stmt.setString(1, parentDir);
-                stmt.setString(2, name);
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        selectLastModifiedSQL, new Object[]{parentDir, name});
-                resetStatement(stmt);
-        PreparedStatement stmt = selectLengthStmt;
-        synchronized (stmt) {
+        synchronized (selectLengthSQL) {
-                stmt.setString(1, parentDir);
-                stmt.setString(2, name);
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        selectLengthSQL, new Object[]{parentDir, name});
-                resetStatement(stmt);
-        PreparedStatement stmt = selectChildCountStmt;
-        synchronized (stmt) {
+        synchronized (selectChildCountSQL) {
-                stmt.setString(1, path);
-                stmt.execute();
+                Statement stmt = executeStmt(selectChildCountSQL, new Object[]{path});
-                resetStatement(stmt);
-        PreparedStatement stmt = selectFileAndFolderNamesStmt;
-        synchronized (stmt) {
+        synchronized (selectFileAndFolderNamesSQL) {
-                stmt.setString(1, folderPath);
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        selectFileAndFolderNamesSQL, new Object[]{folderPath});
-                resetStatement(stmt);
-        PreparedStatement stmt = selectFileNamesStmt;
-        synchronized (stmt) {
+        synchronized (selectFileNamesSQL) {
-                stmt.setString(1, folderPath);
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        selectFileNamesSQL, new Object[]{folderPath});
-                resetStatement(stmt);
-        PreparedStatement stmt = selectFolderNamesStmt;
-        synchronized (stmt) {
+        synchronized (selectFolderNamesSQL) {
-                stmt.setString(1, folderPath);
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        selectFolderNamesSQL, new Object[]{folderPath});
-                resetStatement(stmt);
-        PreparedStatement stmt = updateLastModifiedStmt;
-        synchronized (stmt) {
+        synchronized (updateLastModifiedSQL) {
-                stmt.setLong(1, System.currentTimeMillis());
-                stmt.setString(2, parentDir);
-                stmt.setString(3, name);
-                count = stmt.executeUpdate();
+                Statement stmt = executeStmt(updateLastModifiedSQL, new Object[]{
+                        new Long(System.currentTimeMillis()),
+                        parentDir,
+                        name});
+                count = stmt.getUpdateCount();
-            } finally {
-                resetStatement(stmt);
-        PreparedStatement stmt = selectDataStmt;
-        synchronized (stmt) {
+        synchronized (selectDataSQL) {
-                stmt.setString(1, parentDir);
-                stmt.setString(2, name);
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        updateLastModifiedSQL, new Object[]{parentDir, name});
+
-            } finally {
-                resetStatement(stmt);
-                    PreparedStatement stmt = null;
-                            stmt = updateDataStmt;
-                            synchronized (stmt) {
+                            synchronized (updateDataSQL) {
-                                stmt.setBinaryStream(1, in, (int) length);
-                                stmt.setLong(2, System.currentTimeMillis());
-                                stmt.setLong(3, length);
-                                stmt.setString(4, parentDir);
-                                stmt.setString(5, name);
-                                stmt.executeUpdate();
+                                executeStmt(updateDataSQL,
+                                        new Object[]{
+                                            new SizedInputStream(in, length),
+                                            new Long(System.currentTimeMillis()),
+                                            new Long(length),
+                                            parentDir,
+                                            name
+                                        });
-                            stmt = insertFileStmt;
-                            stmt.setString(1, parentDir);
-                            stmt.setString(2, name);
-                            long length = tmpFile.length();
-                            in = new FileInputStream(tmpFile);
-                            stmt.setBinaryStream(3, in, (int) length);
-                            stmt.setLong(4, System.currentTimeMillis());
-                            stmt.setLong(5, length);
-                            stmt.executeUpdate();
+                            synchronized (insertFileSQL) {
+                                long length = tmpFile.length();
+                                in = new FileInputStream(tmpFile);
+                                executeStmt(insertFileSQL,
+                                        new Object[]{
+                                            parentDir,
+                                            name,
+                                            new SizedInputStream(in, length),
+                                            new Long(System.currentTimeMillis()),
+                                            new Long(length)
+                                        });
+                            }
-                        if (stmt != null) {
-                            resetStatement(stmt);
-                        }
-                    PreparedStatement stmt = null;
-                            stmt = updateDataStmt;
-                            synchronized (stmt) {
+                            synchronized (updateDataSQL) {
-                                stmt.setBinaryStream(1, in, (int) length);
-                                stmt.setLong(2, System.currentTimeMillis());
-                                stmt.setLong(3, length);
-                                stmt.setString(4, parentDir);
-                                stmt.setString(5, name);
-                                stmt.executeUpdate();
+                                executeStmt(updateDataSQL,
+                                        new Object[]{
+                                            new SizedInputStream(in, length),
+                                            new Long(System.currentTimeMillis()),
+                                            new Long(length),
+                                            parentDir,
+                                            name
+                                        });
-                            stmt = insertFileStmt;
-                            stmt.setString(1, parentDir);
-                            stmt.setString(2, name);
-                            long length = tmpFile.length();
-                            in = new FileInputStream(tmpFile);
-                            stmt.setBinaryStream(3, in, (int) length);
-                            stmt.setLong(4, System.currentTimeMillis());
-                            stmt.setLong(5, length);
-                            stmt.executeUpdate();
+                            synchronized (insertFileSQL) {
+                                long length = tmpFile.length();
+                                in = new FileInputStream(tmpFile);
+                                executeStmt(insertFileSQL,
+                                        new Object[]{
+                                            parentDir,
+                                            name,
+                                            new SizedInputStream(in, length),
+                                            new Long(System.currentTimeMillis()),
+                                            new Long(length)
+                                        });
+                            }
-                        if (stmt != null) {
-                            resetStatement(stmt);
-                        }
+     * Re-establishes the database connection. This method is called by
+     * {@link #executeStmt(String, Object[])} after a <code>SQLException</code>
+     * had been encountered.
+     *
+     * @return true if the connection could be successfully re-established,
+     *         false otherwise.
+     */
+    protected synchronized boolean reestablishConnection() {
+        // in any case try to shut down current connection
+        // gracefully in order to avoid potential memory leaks
+
+        // close shared prepared statements
+        for (Iterator it = preparedStatements.values().iterator(); it.hasNext(); ) {
+            closeStatement((PreparedStatement) it.next());
+        }
+        preparedStatements.clear();
+        try {
+            closeConnection(con);
+        } catch (Exception ignore) {
+        }
+
+        // sleep for a while to give database a chance
+        // to restart before a reconnect is attempted
+
+        try {
+            Thread.sleep(SLEEP_BEFORE_RECONNECT);
+        } catch (InterruptedException ignore) {
+        }
+
+        // now try to re-establish connection
+
+        try {
+            initConnection();
+            initPreparedStatements();
+            return true;
+        } catch (Exception e) {
+            log.error("failed to re-establish connection", e);
+            // reconnect failed
+            return false;
+        }
+    }
+
+    /**
+     * Executes the given SQL statement with the specified parameters.
+     * If a <code>SQLException</code> is encountered <i>one</i> attempt is made
+     * to re-establish the database connection and re-execute the statement.
+     *
+     * @param sql    statement to execute
+     * @param params parameters to set
+     * @return the <code>Statement</code> object that had been executed
+     * @throws SQLException if an error occurs
+     */
+    protected Statement executeStmt(String sql, Object[] params)
+            throws SQLException {
+        int trials = 2;
+        while (true) {
+            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(sql);
+            try {
+                for (int i = 0; i < params.length; i++) {
+                    if (params[i] instanceof SizedInputStream) {
+                        SizedInputStream in = (SizedInputStream) params[i];
+                        stmt.setBinaryStream(i + 1, in, (int) in.getSize());
+                    } else {
+                        stmt.setObject(i + 1, params[i]);
+                    }
+                }
+                stmt.execute();
+                resetStatement(stmt);
+                return stmt;
+            } catch (SQLException se) {
+                if (--trials == 0) {
+                    // no more trials, re-throw
+                    throw se;
+                }
+                log.warn("execute failed, about to reconnect...", se.getMessage());
+
+                // try to reconnect
+                if (reestablishConnection()) {
+                    // reconnect succeeded; check whether it's possible to
+                    // re-execute the prepared stmt with the given parameters
+                    for (int i = 0; i < params.length; i++) {
+                        if (params[i] instanceof SizedInputStream) {
+                            SizedInputStream in = (SizedInputStream) params[i];
+                            if (in.isConsumed()) {
+                                // we're unable to re-execute the prepared stmt
+                                // since an InputStream paramater has already
+                                // been 'consumed';
+                                // re-throw previous SQLException
+                                throw se;
+                            }
+                        }
+                    }
+
+                    // try again to execute the statement
+                    continue;
+                } else {
+                    // reconnect failed, re-throw previous SQLException
+                    throw se;
+                }
+            }
+        }
+    }
+
+    /**
-     * Initializes the prepared statements and returns them in a list. please
-     * note that this list is used to close the statements in the {@link #close()}
-     * call.
-     *
-     * @return the list of prepared statements
-     * @throws SQLException
+     * Builds the SQL statements
-    protected List initPreparedStatements() throws SQLException {
-        List stmts = new LinkedList();
-        stmts.add(insertFileStmt = con.prepareStatement("insert into "
+    protected void buildSQLStatements() {
+        insertFileSQL = "insert into "
-                + "values (?, ?, ?, ?, ?)"));
+                + "values (?, ?, ?, ?, ?)";
-        stmts.add(insertFolderStmt = con.prepareStatement("insert into "
+        insertFolderSQL = "insert into "
-                + "values (?, ?, ?, 0)"));
+                + "values (?, ?, ?, 0)";
-        stmts.add(updateDataStmt = con.prepareStatement("update "
+        updateDataSQL = "update "
-                + "and FSENTRY_DATA is not null"));
+                + "and FSENTRY_DATA is not null";
-        stmts.add(updateLastModifiedStmt = con.prepareStatement("update "
+        updateLastModifiedSQL = "update "
-                + "and FSENTRY_DATA is not null"));
+                + "and FSENTRY_DATA is not null";
-        stmts.add(selectExistStmt = con.prepareStatement("select 1 from "
+        selectExistSQL = "select 1 from "
-                + "and FSENTRY_NAME = ?"));
+                + "and FSENTRY_NAME = ?";
-        stmts.add(selectFileExistStmt = con.prepareStatement("select 1 from "
+        selectFileExistSQL = "select 1 from "
-                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null"));
+                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null";
-        stmts.add(selectFolderExistStmt = con.prepareStatement("select 1 from "
+        selectFolderExistSQL = "select 1 from "
-                + "and FSENTRY_NAME = ? and FSENTRY_DATA is null"));
+                + "and FSENTRY_NAME = ? and FSENTRY_DATA is null";
-        stmts.add(selectFileNamesStmt = con.prepareStatement("select FSENTRY_NAME from "
+        selectFileNamesSQL = "select FSENTRY_NAME from "
-                + "and FSENTRY_DATA is not null"));
+                + "and FSENTRY_DATA is not null";
-        stmts.add(selectFolderNamesStmt = con.prepareStatement("select FSENTRY_NAME from "
+        selectFolderNamesSQL = "select FSENTRY_NAME from "
-                + "and FSENTRY_DATA is null"));
+                + "and FSENTRY_DATA is null";
-        stmts.add(selectFileAndFolderNamesStmt = con.prepareStatement("select FSENTRY_NAME from "
-                + schemaObjectPrefix + "FSENTRY where FSENTRY_PATH = ?"));
+        selectFileAndFolderNamesSQL = "select FSENTRY_NAME from "
+                + schemaObjectPrefix + "FSENTRY where FSENTRY_PATH = ?";
-        stmts.add(selectChildCountStmt = con.prepareStatement("select count(FSENTRY_NAME) from "
-                + schemaObjectPrefix + "FSENTRY where FSENTRY_PATH = ?  "));
+        selectChildCountSQL = "select count(FSENTRY_NAME) from "
+                + schemaObjectPrefix + "FSENTRY where FSENTRY_PATH = ?  ";
-        stmts.add(selectDataStmt = con.prepareStatement("select FSENTRY_DATA from "
+        selectDataSQL = "select FSENTRY_DATA from "
-                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null"));
+                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null";
-        stmts.add(selectLastModifiedStmt = con.prepareStatement("select FSENTRY_LASTMOD from "
+        selectLastModifiedSQL = "select FSENTRY_LASTMOD from "
-                + "and FSENTRY_NAME = ?"));
+                + "and FSENTRY_NAME = ?";
-        stmts.add(selectLengthStmt = con.prepareStatement("select FSENTRY_LENGTH from "
+        selectLengthSQL = "select FSENTRY_LENGTH from "
-                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null"));
+                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null";
-        stmts.add(deleteFileStmt = con.prepareStatement("delete from "
+        deleteFileSQL = "delete from "
-                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null"));
+                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null";
-        stmts.add(deleteFolderStmt = con.prepareStatement("delete from "
+        deleteFolderSQL = "delete from "
-                + "or (FSENTRY_PATH like ?) "));
+                + "or (FSENTRY_PATH like ?) ";
-        stmts.add(copyFileStmt = con.prepareStatement("insert into "
+        copyFileSQL = "insert into "
-                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null"));
+                + "and FSENTRY_NAME = ? and FSENTRY_DATA is not null";
-        stmts.add(copyFilesStmt = con.prepareStatement("insert into "
+        copyFilesSQL = "insert into "
-                + "and FSENTRY_DATA is not null"));
+                + "and FSENTRY_DATA is not null";
+    }
-        return stmts;
+    /**
+     * Initializes the map of prepared statements.
+     *
+     * @throws SQLException if an error occurs
+     */
+    protected void initPreparedStatements() throws SQLException {
+        preparedStatements.put(
+                selectExistSQL, con.prepareStatement(selectExistSQL));
+        preparedStatements.put(
+                selectFileExistSQL, con.prepareStatement(selectFileExistSQL));
+        preparedStatements.put(
+                selectFolderExistSQL, con.prepareStatement(selectFolderExistSQL));
+        preparedStatements.put(
+                selectChildCountSQL, con.prepareStatement(selectChildCountSQL));
+        preparedStatements.put(
+                selectDataSQL, con.prepareStatement(selectDataSQL));
+        preparedStatements.put(
+                selectLastModifiedSQL, con.prepareStatement(selectLastModifiedSQL));
+        preparedStatements.put(
+                selectLengthSQL, con.prepareStatement(selectLengthSQL));
+        preparedStatements.put(
+                selectFileNamesSQL, con.prepareStatement(selectFileNamesSQL));
+        preparedStatements.put(
+                selectFolderNamesSQL, con.prepareStatement(selectFolderNamesSQL));
+        preparedStatements.put(
+                selectFileAndFolderNamesSQL, con.prepareStatement(selectFileAndFolderNamesSQL));
+        preparedStatements.put(
+                deleteFileSQL, con.prepareStatement(deleteFileSQL));
+        preparedStatements.put(
+                deleteFolderSQL, con.prepareStatement(deleteFolderSQL));
+        preparedStatements.put(
+                insertFileSQL, con.prepareStatement(insertFileSQL));
+        preparedStatements.put(
+                insertFolderSQL, con.prepareStatement(insertFolderSQL));
+        preparedStatements.put(
+                updateDataSQL, con.prepareStatement(updateDataSQL));
+        preparedStatements.put(
+                updateLastModifiedSQL, con.prepareStatement(updateLastModifiedSQL));
+        preparedStatements.put(
+                copyFileSQL, con.prepareStatement(copyFileSQL));
+        preparedStatements.put(
+                copyFilesSQL, con.prepareStatement(copyFilesSQL));
+
-        PreparedStatement stmt = selectFolderExistStmt;
-        synchronized (stmt) {
+        synchronized (selectFolderExistSQL) {
-                stmt.setString(1, FileSystem.SEPARATOR);
-                stmt.setString(2, "");
-                stmt.execute();
+                Statement stmt = executeStmt(
+                        selectFolderExistSQL,
+                        new Object[]{FileSystem.SEPARATOR, ""});
-                resetStatement(stmt);
-        PreparedStatement stmt = insertFolderStmt;
-        synchronized (stmt) {
+        synchronized (insertFolderSQL) {
-                stmt.setString(1, parentDir);
-                stmt.setString(2, name);
-                stmt.setLong(3, System.currentTimeMillis());
-                stmt.executeUpdate();
+                executeStmt(
+                        insertFolderSQL,
+                        new Object[]{
+                                parentDir,
+                                name,
+                                new Long(System.currentTimeMillis())});
-            } finally {
-                resetStatement(stmt);
-        PreparedStatement stmt = copyFilesStmt;
-        synchronized (stmt) {
+        synchronized (copyFilesSQL) {
-                stmt.setString(1, destPath);
-                stmt.setString(2, srcPath);
-                stmt.executeUpdate();
+                executeStmt(copyFilesSQL, new Object[]{destPath, srcPath});
-            } finally {
-                resetStatement(stmt);
-        PreparedStatement stmt = copyFileStmt;
-        synchronized (stmt) {
+        synchronized (copyFileSQL) {
-                stmt.setString(1, destParentDir);
-                stmt.setString(2, destName);
-                stmt.setString(3, srcParentDir);
-                stmt.setString(4, srcName);
-                count = stmt.executeUpdate();
+                Statement stmt = executeStmt(
+                        selectFolderExistSQL,
+                        new Object[]{
+                                destParentDir,
+                                destName,
+                                srcParentDir,
+                                srcName});
+                count = stmt.getUpdateCount();
-            } finally {
-                resetStatement(stmt);
+
+    //--------------------------------------------------------< inner classes >
+
+    class SizedInputStream extends FilterInputStream {
+        private final long size;
+        private boolean consumed = false;
+
+        SizedInputStream(InputStream in, long size) {
+            super(in);
+            this.size = size;
+        }
+
+        long getSize() {
+            return size;
+        }
+
+        boolean isConsumed() {
+            return consumed;
+        }
+
+        public int read() throws IOException {
+            consumed = true;
+            return super.read();
+        }
+
+        public long skip(long n) throws IOException {
+            consumed = true;
+            return super.skip(n);
+        }
+
+        public int read(byte b[]) throws IOException {
+            consumed = true;
+            return super.read(b);
+        }
+
+        public int read(byte b[], int off, int len) throws IOException {
+            consumed = true;
+            return super.read(b, off, len);
+        }
+    }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS39 INS59 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS39 UPD42 INS29 INS83 INS39 INS42 MOV43 INS8 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS34 UPD42 INS14 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS65 INS65 INS24 INS21 INS54 INS54 INS54 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS5 INS42 INS42 INS60 INS61 UPD65 INS65 INS65 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS44 INS44 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS66 INS65 INS66 INS66 INS66 INS66 INS58 INS32 INS8 INS32 INS8 INS12 INS8 INS12 INS8 INS12 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS85 INS39 INS59 INS9 INS8 UPD66 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 MOV7 INS66 INS42 INS66 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS9 INS43 INS42 INS39 INS42 INS46 INS21 INS41 INS41 INS42 INS21 INS41 INS39 INS42 INS42 INS21 INS41 INS39 INS42 INS85 INS42 INS21 INS41 INS39 INS42 INS85 INS39 INS42 INS39 INS42 INS42 INS21 INS41 INS42 INS21 INS24 INS68 INS43 INS59 INS42 INS42 INS21 INS42 INS42 INS21 INS44 INS8 INS21 INS44 INS8 INS21 INS21 INS41 INS44 INS8 INS42 INS42 INS34 INS60 INS54 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 UPD42 MOV27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS7 INS48 INS7 INS48 INS7 INS48 INS7 INS48 INS32 MOV32 INS58 INS32 INS8 INS32 INS42 INS69 INS69 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS32 INS43 INS42 INS32 INS32 INS9 INS43 INS42 INS21 INS41 MOV43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS42 MOV21 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS43 INS5 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS11 INS24 MOV21 MOV21 INS41 INS44 INS8 INS60 INS21 INS21 INS60 INS52 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS43 INS85 INS42 INS42 MOV43 INS32 INS42 INS42 INS45 INS42 MOV43 INS32 INS58 INS27 INS37 INS8 INS42 INS43 INS42 INS25 INS21 INS25 INS43 INS59 INS32 INS32 INS43 INS59 INS32 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS27 INS8 INS32 INS32 INS8 INS8 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 INS42 INS42 INS32 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 UPD42 MOV42 UPD42 MOV42 INS3 INS42 INS34 INS62 INS8 INS8 INS38 INS34 INS53 INS42 INS42 INS45 INS32 INS42 INS24 INS18 INS53 UPD42 MOV42 UPD42 MOV42 INS3 INS5 INS4 INS5 INS4 UPD42 MOV42 UPD42 MOV42 INS3 UPD42 UPD42 UPD42 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS2 INS43 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS58 INS27 INS37 INS8 INS42 INS5 INS4 INS43 INS85 INS42 INS42 INS14 INS43 INS85 INS42 INS42 INS5 INS4 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS42 MOV27 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS43 INS85 INS42 INS43 INS85 INS42 INS43 INS85 INS42 INS43 INS85 INS14 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS39 INS59 INS42 INS40 INS42 INS25 INS43 INS85 INS40 INS45 INS42 INS43 MOV32 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV32 INS42 INS8 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS11 INS42 INS42 INS27 INS2 INS42 INS34 INS62 INS8 INS42 INS42 INS42 INS42 INS51 INS51 INS51 INS51 INS43 INS2 INS42 INS34 INS39 INS32 INS42 INS34 INS42 INS42 INS2 INS43 INS60 INS25 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 MOV60 MOV21 INS21 MOV60 MOV21 INS21 MOV60 MOV21 INS21 MOV60 MOV21 INS21 INS42 INS42 INS11 INS42 INS42 INS53 INS32 INS32 INS32 INS32 INS43 INS2 INS42 INS42 INS42 INS3 INS42 UPD42 MOV42 INS3 INS42 INS42 INS3 INS42 UPD42 MOV42 INS3 INS42 INS42 INS42 INS43 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS42 INS43 INS85 INS14 INS14 INS14 INS42 INS42 INS43 INS85 INS42 INS42 INS14 INS14 INS14 INS43 INS85 INS14 INS14 INS14 INS42 INS42 INS43 INS85 INS42 INS42 INS14 INS14 INS14 INS42 INS43 INS42 INS42 INS43 MOV32 INS43 INS42 INS42 INS43 INS42 INS42 INS43 MOV32 INS43 INS42 INS42 INS43 INS42 INS42 INS43 MOV32 INS43 INS42 INS42 UPD43 MOV43 INS42 INS42 INS43 MOV32 INS43 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 DEL42 DEL7 DEL34 DEL42 DEL33 DEL27 DEL32 DEL38 DEL8 DEL61 DEL8 DEL25 DEL42 DEL33 DEL7 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL21 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL34 DEL42 DEL39 DEL42 DEL11 DEL32 DEL21 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL42 DEL42 DEL7 DEL21 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL39 DEL42 DEL11 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL39 DEL42 DEL11 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL42 DEL42 DEL7 DEL21 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL39 DEL42 DEL11 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL66 DEL66 DEL42 DEL68 DEL65 DEL66 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL41 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL34 DEL40 DEL32 DEL21 DEL34 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL59 DEL60 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8