JCR-1169 Distribution of commons classes
JCR-996 Name and Path interfaces in SPI

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586058 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.PathFactory;
+import javax.jcr.RepositoryException;
+     * Subclassed need to define a PathFactory used to create IDs
+     *
+     * @return a implementation of <code>PathFactory</code>.
+     */
+    protected abstract PathFactory getPathFactory();
+
+    /**
-        } catch (MalformedPathException e) {
+        } catch (RepositoryException e) {
-     * @see IdFactory#createPropertyId(NodeId, QName)
+     * @see IdFactory#createPropertyId(NodeId,Name)
-    public PropertyId createPropertyId(NodeId parentId, QName propertyName) {
+    public PropertyId createPropertyId(NodeId parentId, Name propertyName) {
-        } catch (MalformedPathException e) {
+        } catch (RepositoryException e) {
-    private static abstract class ItemIdImpl implements ItemId, Serializable {
+    private abstract class ItemIdImpl implements ItemId, Serializable {
-        private ItemIdImpl(NodeId parentId, QName name) throws MalformedPathException {
+        private ItemIdImpl(NodeId parentId, Name name) throws RepositoryException {
-                this.path = Path.create(parentPath, name, true);
+                this.path = getPathFactory().create(parentPath, name, true);
-                this.path = Path.create(name, Path.INDEX_UNDEFINED);
+                this.path = getPathFactory().create(name);
-    private static class NodeIdImpl extends ItemIdImpl implements NodeId {
+    private class NodeIdImpl extends ItemIdImpl implements NodeId {
-        public NodeIdImpl(NodeId parentId, Path path) throws MalformedPathException {
-            super(parentId.getUniqueID(), (parentId.getPath() != null) ? Path.create(parentId.getPath(), path, true) : path);
+        public NodeIdImpl(NodeId parentId, Path path) throws RepositoryException {
+            super(parentId.getUniqueID(), (parentId.getPath() != null) ? getPathFactory().create(parentId.getPath(), path, true) : path);
-    private static class PropertyIdImpl extends ItemIdImpl implements PropertyId {
+    private class PropertyIdImpl extends ItemIdImpl implements PropertyId {
-        private PropertyIdImpl(NodeId parentId, QName name) throws MalformedPathException {
+        private PropertyIdImpl(NodeId parentId, Name name) throws RepositoryException {
-        public QName getQName() {
+        public Name getName() {

INS26 UPD40 UPD40 UPD40 INS40 INS31 INS29 INS83 INS83 INS43 INS42 INS65 INS65 INS42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 INS66 INS66 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 INS32 MOV22 MOV22 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 DEL83 DEL40 DEL83 DEL83