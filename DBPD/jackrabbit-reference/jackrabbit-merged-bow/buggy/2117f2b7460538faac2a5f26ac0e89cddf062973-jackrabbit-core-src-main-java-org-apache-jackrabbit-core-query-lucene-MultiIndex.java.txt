JCR-2216: Append-only index updates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@801253 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Calendar;
+import java.text.DateFormat;
-    private final IndexInfos indexNames = new IndexInfos("indexes");
+    private final IndexInfos indexNames;
+
+    /**
+     * The history of the multi index.
+     */
+    private final IndexHistory indexHistory;
+     * Key = index name (String), Value = time when last in use (Long)
-    private final Set<String> deletable = new HashSet<String>();
+    private final Map<String, Long> deletable = new HashMap<String, Long>();
-    private final RedoLog redoLog;
+    private RedoLog redoLog;
-        this.redoLog = new RedoLog(indexDir);
-        if (indexNames.exists(indexDir)) {
-            indexNames.read(indexDir);
-        }
+        indexNames = new IndexInfos(indexDir, "indexes");
+
+        this.indexHistory = new IndexHistory(indexDir,
+                handler.getMaxHistoryAge() * 1000);
+        this.redoLog = RedoLog.create(indexDir, indexNames.getGeneration());
+
-        for (int i = 0; i < indexNames.size(); i++) {
-            String name = indexNames.getName(i);
+        for (Iterator it = indexNames.iterator(); it.hasNext(); ) {
+            IndexInfo info = (IndexInfo) it.next();
+            String name = info.getName();
-                    cache, indexingQueue, directoryManager);
+                    cache, indexingQueue, directoryManager,
+                    handler.getMaxHistoryAge());
-                log.info("Created initial index for {} nodes", new Long(count));
+                log.info("Created initial index for {} nodes", count);
-            boolean flush = false;
-                    flush |= checkVolatileCommit();
+                    checkVolatileCommit();
-
-            // flush whole index when volatile index has been commited.
-            if (flush) {
-                flush();
-            }
-            for (int i = 0; i < indexes.size(); i++) {
-                PersistentIndex index = (PersistentIndex) indexes.get(i);
+            for (PersistentIndex index : indexes) {
-                    cache, indexingQueue, directoryManager);
+                    cache, indexingQueue, directoryManager,
+                    handler.getMaxHistoryAge());
-                deletable.add(indexName);
+                deletable.put(indexName, Long.MIN_VALUE);
-            log.debug("hierarchy cache initialized in {} ms", new Long(time));
+            log.debug("hierarchy cache initialized in {} ms", time);
-                for (int i = 0; i < indexes.size(); i++) {
-                    PersistentIndex pIdx = (PersistentIndex) indexes.get(i);
+                for (PersistentIndex pIdx : indexes) {
-            for (int i = 0; i < indexes.size(); i++) {
-                ((PersistentIndex) indexes.get(i)).close();
+            for (PersistentIndex index : indexes) {
+                index.close();
-     * Removes the <code>index</code> from the list of active sub indexes. The
-     * Index is not acutally deleted right away, but postponed to the transaction
-     * commit.
+     * Removes the <code>index</code> from the list of active sub indexes.
+     * Depending on the {@link SearchIndex#getMaxHistoryAge()}, the
+     * Index is not deleted right away.
-            deletable.add(index.getName());
+            deletable.put(index.getName(), System.currentTimeMillis());
-            // commit volatile index
-            executeAndLog(new Start(Action.INTERNAL_TRANSACTION));
-            commitVolatileIndex();
+            // only start transaction when there is something to commit
+            boolean transactionStarted = false;
+
+            if (volatileIndex.getNumDocuments() > 0) {
+                // commit volatile index
+                executeAndLog(new Start(Action.INTERNAL_TRANSACTION));
+                transactionStarted = true;
+                commitVolatileIndex();
+            }
+
+            boolean indexesModified = false;
-                PersistentIndex index = (PersistentIndex) indexes.get(i);
+                PersistentIndex index = indexes.get(i);
+                    long gen = index.getCurrentGeneration();
+                    if (gen != index.getCurrentGeneration()) {
+                        indexesModified = true;
+                        log.debug("Committed revision {} of index {}",
+                                Long.toString(index.getCurrentGeneration(), Character.MAX_RADIX),
+                                index.getName());
+                    }
+                        if (!transactionStarted) {
+                            executeAndLog(new Start(Action.INTERNAL_TRANSACTION));
+                            transactionStarted = true;
+                        }
-            executeAndLog(new Commit(getTransactionId()));
-            indexNames.write(indexDir);
+            if (transactionStarted) {
+                executeAndLog(new Commit(getTransactionId()));
+            }
-            // reset redo log
-            redoLog.clear();
+            if (transactionStarted || indexesModified || redoLog.hasEntries()) {
+                indexNames.write();
+
+                indexHistory.addIndexInfos(indexNames);
+
+                // close redo.log and create a new one based
+                // on the new indexNames generation
+                redoLog.close();
+                redoLog = RedoLog.create(indexDir, indexNames.getGeneration());
+            }
+        indexHistory.pruneOutdated();
+
-        String[] dirNames = directoryManager.getDirectoryNames();
-        for (int i = 0; i < dirNames.length; i++) {
-            if (dirNames[i].startsWith("_") && !indexNames.contains(dirNames[i])) {
-                deletable.add(dirNames[i]);
+        for (String name : directoryManager.getDirectoryNames()) {
+            if (!name.startsWith("_")) {
+                continue;
+            }
+            long lastUse = indexHistory.getLastUseOf(name);
+            if (lastUse != Long.MAX_VALUE) {
+                if (log.isDebugEnabled()) {
+                    String msg = "Segment " + name + " not is use anymore. ";
+                    if (lastUse != Long.MIN_VALUE) {
+                        Calendar cal = Calendar.getInstance();
+                        DateFormat df = DateFormat.getInstance();
+                        cal.setTimeInMillis(lastUse);
+                        msg += "Unused since: " + df.format(cal.getTime());
+                    } else {
+                        msg += "(orphaned)";
+                    }
+                    log.debug(msg);
+                }
+                deletable.put(name, lastUse);
+        // now prune outdated index infos
+        indexHistory.pruneOutdated();
+     *
+     * @throws IOException if the volatile index cannot be reset.
-     * @param path     the path of the current node.
+     * @param path     the path of the current <code>node</code> state.
-            log.info("indexing... {} ({})", resolver.getJCRPath(path), new Long(count));
+            log.info("indexing... {} ({})", resolver.getJCRPath(path), count);
-     * Attempts to delete all files recorded in {@link #deletable}.
+     * Attempts to delete all files that are older than
+     *{@link SearchIndex#getMaxHistoryAge()}.
-            for (Iterator<String> it = deletable.iterator(); it.hasNext(); ) {
-                String indexName = it.next();
-                if (directoryManager.delete(indexName)) {
-                    it.remove();
-                } else {
-                    log.info("Unable to delete obsolete index: " + indexName);
+            for (Iterator<Map.Entry<String, Long>> it = deletable.entrySet().iterator(); it.hasNext(); ) {
+                Map.Entry<String, Long> entry = it.next();
+                String indexName = entry.getKey();
+                long lastUse = entry.getValue();
+                if (System.currentTimeMillis() - handler.getMaxHistoryAge() * 1000 > lastUse) {
+                    if (directoryManager.delete(indexName)) {
+                        it.remove();
+                    } else {
+                        log.info("Unable to delete obsolete index: " + indexName);
+                    }
-                    new Long(finished.size()));
+                    finished.size());
-                index.indexNames.addName(indexName);
+                index.indexNames.addName(indexName, idx.getCurrentGeneration());
-                    PersistentIndex idx = (PersistentIndex) index.indexes.get(i);
+                    PersistentIndex idx = index.indexes.get(i);
+         * @param targetIndex   the name of the index where the volatile index
+         *                      will be committed.

INS26 INS26 INS40 INS40 INS23 INS29 INS83 INS83 INS43 INS59 UPD74 MOV21 INS8 INS65 INS42 INS42 UPD43 MOV43 MOV43 INS21 INS21 INS21 INS70 INS21 INS65 INS66 INS66 UPD42 UPD74 INS7 INS7 INS58 INS32 UPD66 UPD66 INS65 INS66 UPD66 INS32 INS44 MOV32 INS8 INS32 INS42 INS66 UPD66 UPD66 INS65 UPD43 MOV43 MOV43 INS42 MOV14 INS22 MOV22 INS32 INS43 INS59 INS42 INS42 INS60 INS70 INS70 INS68 INS60 INS25 INS60 INS25 INS25 INS42 INS42 MOV43 INS42 INS25 MOV60 INS25 INS42 INS42 INS68 INS42 INS66 INS66 UPD42 INS42 INS52 INS42 UPD43 INS27 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS42 INS32 INS43 INS59 MOV43 INS44 INS42 MOV8 INS44 INS42 INS8 INS42 INS42 INS39 INS59 INS27 INS8 INS39 INS59 INS42 INS8 INS27 INS8 INS38 INS8 INS39 INS27 INS8 INS42 INS42 INS8 UPD42 INS32 INS34 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS11 INS43 INS42 INS42 INS70 INS43 INS42 MOV21 UPD42 INS32 INS42 INS9 INS32 INS34 MOV21 INS21 MOV21 INS42 INS9 MOV21 INS42 INS42 INS32 MOV21 INS21 MOV21 INS21 INS32 INS18 INS42 INS32 INS42 INS40 INS25 MOV21 INS42 UPD74 MOV60 INS60 INS60 INS25 MOV32 INS42 INS42 INS43 INS32 UPD42 MOV43 INS32 INS42 INS32 INS44 INS42 MOV8 INS42 INS42 INS42 INS42 INS42 INS7 MOV43 INS42 INS42 INS32 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS8 INS74 INS74 MOV43 INS59 INS39 INS59 INS27 MOV8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 UPD42 MOV42 INS42 INS9 MOV32 INS60 INS25 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS42 INS60 INS25 INS21 UPD42 INS42 INS42 INS43 MOV43 MOV43 INS32 INS43 INS43 MOV43 UPD42 INS42 INS32 INS42 INS32 INS27 INS42 INS42 INS42 MOV43 INS32 UPD42 INS40 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS8 INS32 INS40 MOV42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS27 MOV32 MOV42 INS42 INS32 INS42 INS32 INS21 INS21 INS25 INS42 INS42 INS42 UPD42 MOV42 INS27 UPD42 MOV42 UPD40 MOV40 INS60 INS60 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS7 INS32 INS38 INS8 INS45 INS42 INS45 INS43 INS59 INS43 INS59 INS32 INS7 INS7 INS42 INS42 INS42 INS9 INS42 INS42 INS45 INS32 INS32 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS7 INS42 INS42 INS42 UPD42 MOV42 INS45 INS32 INS42 INS42 INS42 INS14 INS42 INS9 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS40 INS42 INS42 INS42 DEL83 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL14 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL32 DEL7 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL43 DEL11 DEL42 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL39 DEL34 DEL59 DEL58 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL45 DEL32 DEL42 DEL42 DEL2 DEL32 DEL38 DEL27 DEL8 DEL25 DEL8 DEL24 DEL8 DEL42 DEL14 DEL42 DEL67 DEL14 DEL42 DEL43 DEL11