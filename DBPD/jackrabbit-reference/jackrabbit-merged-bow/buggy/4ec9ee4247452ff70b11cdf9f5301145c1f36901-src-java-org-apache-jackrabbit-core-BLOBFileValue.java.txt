- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.16 $
-	// create temp file
-	file = File.createTempFile("bin", null);
-	file.deleteOnExit();
-	// this instance is backed by a 'real' file; set virtual fs resource to null
-	fsResource = null;
+        // create temp file
+        file = File.createTempFile("bin", null);
+        file.deleteOnExit();
+        // this instance is backed by a 'real' file; set virtual fs resource to null
+        fsResource = null;
-	// spool stream to temp file
-	FileOutputStream out = new FileOutputStream(file);
-	try {
-	    byte[] buffer = new byte[8192];
-	    int read = 0;
-	    while ((read = in.read(buffer)) > 0) {
-		out.write(buffer, 0, read);
-	    }
-	} finally {
-	    out.close();
-	    in.close();
-	}
+        // spool stream to temp file
+        FileOutputStream out = new FileOutputStream(file);
+        try {
+            byte[] buffer = new byte[8192];
+            int read = 0;
+            while ((read = in.read(buffer)) > 0) {
+                out.write(buffer, 0, read);
+            }
+        } finally {
+            out.close();
+            in.close();
+        }
-	tmpFile = true;
+        tmpFile = true;
-	String path = file.getCanonicalPath();
-	if (!file.isFile()) {
-	    throw new IOException(path + ": the specified file does not exist");
-	}
-	if (!file.canRead()) {
-	    throw new IOException(path + ": the specified file can not be read");
-	}
-	this.file = file;
-	// this instance is backed by a 'real' file; set virtual fs resource to null
-	fsResource = null;
+        String path = file.getCanonicalPath();
+        if (!file.isFile()) {
+            throw new IOException(path + ": the specified file does not exist");
+        }
+        if (!file.canRead()) {
+            throw new IOException(path + ": the specified file can not be read");
+        }
+        this.file = file;
+        // this instance is backed by a 'real' file; set virtual fs resource to null
+        fsResource = null;
-	tmpFile = false;
+        tmpFile = false;
-	try {
-	    if (!fsResource.exists()) {
-		throw new IOException(fsResource.getPath() + ": the specified resource does not exist");
-	    }
-	} catch (FileSystemException fse) {
-	    throw new IOException(fsResource.getPath() + ": the specified resource does not exist");
-	}
-	// this instance is backed by a resource in the virtual file system
-	this.fsResource = fsResource;
-	// set 'real' file to null
-	file = null;
+        try {
+            if (!fsResource.exists()) {
+                throw new IOException(fsResource.getPath() + ": the specified resource does not exist");
+            }
+        } catch (FileSystemException fse) {
+            throw new IOException(fsResource.getPath() + ": the specified resource does not exist");
+        }
+        // this instance is backed by a resource in the virtual file system
+        this.fsResource = fsResource;
+        // set 'real' file to null
+        file = null;
-	tmpFile = false;
+        tmpFile = false;
-	if (this == obj) {
-	    return true;
-	}
-	if (obj instanceof BLOBFileValue) {
-	    BLOBFileValue other = (BLOBFileValue) obj;
-	    return ((file == null ? other.file == null : file.equals(other.file))
-		    && (fsResource == null ? other.fsResource == null : fsResource.equals(other.fsResource)));
-	}
-	return false;
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof BLOBFileValue) {
+            BLOBFileValue other = (BLOBFileValue) obj;
+            return ((file == null ? other.file == null : file.equals(other.file))
+                    && (fsResource == null ? other.fsResource == null : fsResource.equals(other.fsResource)));
+        }
+        return false;
-	if (file != null) {
-	    // this instance is backed by a 'real' file
-	    if (file.exists()) {
-		return file.length();
-	    } else {
-		return -1;
-	    }
-	} else {
-	    // this instance is backed by a resource in the virtual file system
-	    try {
-		return fsResource.length();
-	    } catch (FileSystemException fse) {
-		return -1;
-	    }
-	}
+        if (file != null) {
+            // this instance is backed by a 'real' file
+            if (file.exists()) {
+                return file.length();
+            } else {
+                return -1;
+            }
+        } else {
+            // this instance is backed by a resource in the virtual file system
+            try {
+                return fsResource.length();
+            } catch (FileSystemException fse) {
+                return -1;
+            }
+        }
-	return tmpFile;
+        return tmpFile;
-	if (file != null) {
-	    // this instance is backed by a 'real' file
-	    file.delete();
-	} else {
-	    // this instance is backed by a resource in the virtual file system
-	    try {
-		fsResource.delete();
-	    } catch (FileSystemException fse) {
-		// ignore
-	    }
-	}
+        if (file != null) {
+            // this instance is backed by a 'real' file
+            file.delete();
+        } else {
+            // this instance is backed by a resource in the virtual file system
+            try {
+                fsResource.delete();
+            } catch (FileSystemException fse) {
+                // ignore
+            }
+        }
-	InputStream in;
-	if (file != null) {
-	    // this instance is backed by a 'real' file
-	    try {
-		in = new FileInputStream(file);
-	    } catch (FileNotFoundException fnfe) {
-		throw new RepositoryException("file backing binary value not found", fnfe);
-	    }
-	} else {
-	    // this instance is backed by a resource in the virtual file system
-	    try {
-		in = fsResource.getInputStream();
-	    } catch (FileSystemException fse) {
-		throw new RepositoryException(fsResource.getPath() + ": the specified resource does not exist", fse);
-	    }
-	}
-	try {
-	    byte[] buffer = new byte[8192];
-	    int read = 0;
-	    while ((read = in.read(buffer)) > 0) {
-		out.write(buffer, 0, read);
-	    }
-	} finally {
-	    try {
-		in.close();
-	    } catch (IOException ioe) {
-	    }
-	}
+        InputStream in;
+        if (file != null) {
+            // this instance is backed by a 'real' file
+            try {
+                in = new FileInputStream(file);
+            } catch (FileNotFoundException fnfe) {
+                throw new RepositoryException("file backing binary value not found", fnfe);
+            }
+        } else {
+            // this instance is backed by a resource in the virtual file system
+            try {
+                in = fsResource.getInputStream();
+            } catch (FileSystemException fse) {
+                throw new RepositoryException(fsResource.getPath() + ": the specified resource does not exist", fse);
+            }
+        }
+        try {
+            byte[] buffer = new byte[8192];
+            int read = 0;
+            while ((read = in.read(buffer)) > 0) {
+                out.write(buffer, 0, read);
+            }
+        } finally {
+            try {
+                in.close();
+            } catch (IOException ioe) {
+            }
+        }
-	if (file != null) {
-	    // this instance is backed by a 'real' file
-	    return file.toString();
-	} else {
-	    // this instance is backed by a resource in the virtual file system
-	    return fsResource.toString();
-	}
+        if (file != null) {
+            // this instance is backed by a 'real' file
+            return file.toString();
+        } else {
+            // this instance is backed by a resource in the virtual file system
+            return fsResource.toString();
+        }
-	return TYPE;
+        return TYPE;
-	if (text == null) {
-	    ByteArrayOutputStream out = new ByteArrayOutputStream();
-	    try {
-		spool(out);
-		byte[] data = out.toByteArray();
-		text = new String(data, DEFAULT_ENCODING);
-	    } catch (UnsupportedEncodingException e) {
-		throw new RepositoryException(DEFAULT_ENCODING + " not supported on this platform", e);
-	    } catch (IOException e) {
-		throw new ValueFormatException("conversion from stream to string failed", e);
-	    } finally {
-		try {
-		    out.close();
-		} catch (IOException e) {
-		    // ignore
-		}
-	    }
-	}
-	return text;
+        if (text == null) {
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            try {
+                spool(out);
+                byte[] data = out.toByteArray();
+                text = new String(data, DEFAULT_ENCODING);
+            } catch (UnsupportedEncodingException e) {
+                throw new RepositoryException(DEFAULT_ENCODING + " not supported on this platform", e);
+            } catch (IOException e) {
+                throw new ValueFormatException("conversion from stream to string failed", e);
+            } finally {
+                try {
+                    out.close();
+                } catch (IOException e) {
+                    // ignore
+                }
+            }
+        }
+        return text;
-	// always return a 'fresh' stream
-	if (file != null) {
-	    // this instance is backed by a 'real' file
-	    try {
-		return new FileInputStream(file);
-	    } catch (FileNotFoundException fnfe) {
-		throw new RepositoryException("file backing binary value not found", fnfe);
-	    }
-	} else {
-	    // this instance is backed by a resource in the virtual file system
-	    try {
-		return fsResource.getInputStream();
-	    } catch (FileSystemException fse) {
-		throw new RepositoryException(fsResource.getPath() + ": the specified resource does not exist", fse);
-	    }
-	}
+        // always return a 'fresh' stream
+        if (file != null) {
+            // this instance is backed by a 'real' file
+            try {
+                return new FileInputStream(file);
+            } catch (FileNotFoundException fnfe) {
+                throw new RepositoryException("file backing binary value not found", fnfe);
+            }
+        } else {
+            // this instance is backed by a resource in the virtual file system
+            try {
+                return fsResource.getInputStream();
+            } catch (FileSystemException fse) {
+                throw new RepositoryException(fsResource.getPath() + ": the specified resource does not exist", fse);
+            }
+        }
-	try {
-	    return Double.parseDouble(getString());
-	} catch (NumberFormatException e) {
-	    throw new ValueFormatException("conversion to double failed", e);
-	}
+        try {
+            return Double.parseDouble(getString());
+        } catch (NumberFormatException e) {
+            throw new ValueFormatException("conversion to double failed", e);
+        }
-	Calendar cal = ISO8601.parse(getString());
-	if (cal != null) {
-	    return cal;
-	} else {
-	    throw new ValueFormatException("not a valid date format");
-	}
+        Calendar cal = ISO8601.parse(getString());
+        if (cal != null) {
+            return cal;
+        } else {
+            throw new ValueFormatException("not a valid date format");
+        }
-	try {
-	    return Long.parseLong(getString());
-	} catch (NumberFormatException e) {
-	    throw new ValueFormatException("conversion to long failed", e);
-	}
+        try {
+            return Long.parseLong(getString());
+        } catch (NumberFormatException e) {
+            throw new ValueFormatException("conversion to long failed", e);
+        }
-	return Boolean.valueOf(getString()).booleanValue();
+        return Boolean.valueOf(getString()).booleanValue();

DEL66 DEL65 DEL66 DEL65