Added SQL and XPath query implementation. The implementation is not complete yet. Only basic operations are supported.
Also added postGoals to the maven.xml to generate the parser classes for SQL XPath.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@123135 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.MalformedPathException;
-import org.apache.jackrabbit.core.Path;
+import org.apache.jackrabbit.core.QName;
+import org.apache.jackrabbit.core.NoPrefixDeclaredException;
+import org.apache.jackrabbit.core.NamespaceRegistryImpl;
+    private static QName primaryType = new QName(NamespaceRegistryImpl.NS_JCR_URI, "primaryType");
+
-        Query constraintQuery = (Query) node.getConstraintNode().accept(this, null);
-        if (constraintQuery != null) {
-            root.add(constraintQuery, true, false);
-        }
-        TextsearchQueryNode textsearchNode = node.getTextsearchNode();
-        if (textsearchNode != null) {
-            Query textsearch = (Query) textsearchNode.accept(this, null);
-            if (textsearch != null) {
-                root.add(textsearch, true, false);
-            }
-        }
-
+        try {
+            // first select any node
+            notQuery.add(new MatchAllQuery(primaryType.toJCRName(nsMappings)),
+                    false, false);
+        } catch (NoPrefixDeclaredException e) {
+            // will never happen, prefixes are created when unknown
+        }
+            // then prohibit the nodes from the not clause
-        PathQuery pathQuery = null;
-        try {
-            // FIXME what about relative path?
-            Path p = Path.create(node.getPath(),
-                    session.getNamespaceResolver(), false);
-            pathQuery = new PathQuery(p, nsMappings, node.getType());
-        } catch (MalformedPathException e) {
-            exceptions.add(e);
+        Query context = null;
+        // loop over steps
+        QueryNode[] steps = node.getPathSteps();
+        for (int i = 0; i < steps.length; i++) {
+            context = (Query) steps[i].accept(this, context);
-        if (pathQuery != null && pathQuery.getClauses().length > 0) {
-            BooleanQuery combined = new BooleanQuery();
-            combined.add(pathQuery, true, false);
-            combined.add((Query) data, true, false);
-            return combined;
+        if (data instanceof BooleanQuery) {
+            BooleanQuery constraint = (BooleanQuery) data;
+            if (constraint.getClauses().length > 0) {
+                constraint.add(context, true, false);
+                context = constraint;
+            }
+        }
+        return context;
+    }
+
+    public Object visit(LocationStepQueryNode node, Object data) {
+        if (node.getNameTest() != null && node.getNameTest().length() == 0) {
+            // select root node
+            return new TermQuery(new Term(FieldNames.PARENT, ""));
+        }
+
+        Query context = (Query) data;
+
+        BooleanQuery andQuery = new BooleanQuery();
+        if (context == null) {
+            exceptions.add(new IllegalArgumentException("Unsupported query"));
+        }
+
+        // predicate on step?
+        Object[] predicates = node.acceptOperands(this, data);
+        for (int i = 0; i < predicates.length; i++) {
+            andQuery.add((Query) predicates[i], true, false);
+        }
+
+        TermQuery nameTest = null;
+        if (node.getNameTest() != null) {
+            try {
+                String internalName = nsMappings.translatePropertyName(node.getNameTest(),
+                        session.getNamespaceResolver());
+                nameTest = new TermQuery(new Term(FieldNames.LABEL, internalName));
+            } catch (IllegalNameException e) {
+                exceptions.add(e);
+            } catch (UnknownPrefixException e) {
+                exceptions.add(e);
+            }
+        }
+
+        if (node.getIncludeDescendants()) {
+            if (nameTest != null) {
+                andQuery.add(new DescendantSelfAxisQuery(context, nameTest), true, false);
+            } else {
+                // descendant-or-self with nametest=*
+                if (predicates.length > 0) {
+                    // if we have a predicate attached, the condition acts as
+                    // the sub query.
+                    Query subQuery = new DescendantSelfAxisQuery(context, andQuery);
+                    andQuery = new BooleanQuery();
+                    andQuery.add(subQuery, true, false);
+                } else {
+                    // @todo this will traverse the whole index, optimize!
+                    Query subQuery = new MatchAllQuery(FieldNames.UUID);
+                    andQuery.add(new DescendantSelfAxisQuery(context, subQuery), true, false);
+                }
+            }
-            return data;
+            // select child nodes
+            andQuery.add(new ChildAxisQuery(context), true, false);
+
+            // name test
+            if (nameTest != null) {
+                andQuery.add(nameTest, true, false);
+            }
+
+        return andQuery;
+                // @todo use MatchAllQuery if stringValue is "*" (or "%" ?)
-        return null;
+        return data;
-
-    //---------------------------< internal >-----------------------------------
-

MOV26 MOV26 INS26 INS40 UPD40 UPD40 INS23 INS31 INS83 INS83 INS43 INS59 INS83 MOV43 INS42 MOV44 MOV44 INS8 INS43 INS44 INS44 MOV8 INS42 INS42 INS14 INS54 INS60 INS60 INS24 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS25 INS60 MOV60 INS25 INS60 INS24 INS25 INS41 INS43 INS40 INS45 INS8 INS12 MOV43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS62 INS8 INS42 INS42 INS42 INS27 INS8 MOV43 INS59 INS43 INS27 INS8 INS5 INS59 INS58 INS27 INS37 INS8 UPD43 INS27 INS8 INS32 INS8 INS8 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS43 INS60 INS25 INS27 INS27 INS41 INS42 MOV11 INS42 UPD42 INS42 INS33 INS21 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 UPD42 UPD42 INS32 INS33 MOV54 INS42 INS42 INS25 INS21 INS25 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS42 INS43 INS59 INS27 INS8 INS32 INS33 INS32 INS34 INS14 INS32 INS42 INS42 INS42 INS52 INS42 INS42 INS34 INS32 INS42 INS42 INS12 INS27 INS8 INS8 INS32 INS27 INS8 INS42 INS42 INS14 INS9 INS9 INS42 INS42 INS11 INS42 INS42 INS11 INS22 INS34 INS21 INS21 INS42 INS42 INS32 INS42 INS43 INS14 INS42 INS42 INS14 INS42 INS42 INS11 INS9 INS9 INS44 INS8 UPD42 MOV42 MOV33 INS21 INS25 INS42 INS42 INS14 INS9 INS9 INS42 INS33 INS21 INS43 INS32 MOV43 INS32 MOV43 INS42 INS32 INS42 INS32 INS7 INS42 INS42 INS42 INS43 INS40 INS45 INS43 INS45 MOV43 INS2 UPD43 UPD43 INS43 INS42 INS21 INS32 INS27 INS8 INS8 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS2 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS14 INS9 INS9 INS40 MOV34 INS60 INS21 MOV21 INS60 MOV21 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS42 UPD42 UPD42 UPD43 INS14 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS59 INS7 INS43 INS59 UPD42 UPD42 INS43 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS14 UPD42 UPD42 INS42 INS42 INS14 UPD42 INS14 INS42 INS43 INS42 INS42 INS43 INS43 INS40 INS43 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL52 DEL33 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL9 DEL9 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL52 DEL33 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL9 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL9 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL42 DEL22 DEL27 DEL27 DEL42 DEL41 DEL8 DEL33 DEL41 DEL8