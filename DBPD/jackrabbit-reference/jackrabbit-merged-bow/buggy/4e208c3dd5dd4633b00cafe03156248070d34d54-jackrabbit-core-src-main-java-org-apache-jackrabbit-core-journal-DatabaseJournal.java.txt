JCR-749 Add mysql ddl for clustering (DatabaseJournal)
JCR-756 Concurrent add/remove child node operations in a cluster may corrupt repository
JCR-757 Allow multiple producers to feed/consume journal


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@509624 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.core.cluster;
+package org.apache.jackrabbit.core.journal;
-import java.io.DataInputStream;
-     * Bean getter for driver.
-     * @return driver
+     * Locked revision.
-    public String getDriver() {
-        return driver;
-    }
-
-    /**
-     * Bean setter for driver.
-     * @param driver driver
-     */
-    public void setDriver(String driver) {
-        this.driver = driver;
-    }
-
-    /**
-     * Bean getter for url.
-     * @return url
-     */
-    public String getUrl() {
-        return url;
-    }
-
-    /**
-     * Bean setter for url.
-     * @param url url
-     */
-    public void setUrl(String url) {
-        this.url = url;
-    }
-
-    /**
-     * Bean getter for schema.
-     * @return schema
-     */
-    public String getSchema() {
-        return schema;
-    }
-
-    /**
-     * Bean getter for schema.
-     * @param schema schema
-     */
-    public void setSchema(String schema) {
-        this.schema = schema;
-    }
-
-    /**
-     * Bean getter for schema object prefix.
-     * @return schema object prefix
-     */
-    public String getSchemaObjectPrefix() {
-        return schemaObjectPrefix;
-    }
-
-    /**
-     * Bean getter for schema object prefix.
-     * @param schemaObjectPrefix schema object prefix
-     */
-    public void setSchemaObjectPrefix(String schemaObjectPrefix) {
-        this.schemaObjectPrefix = schemaObjectPrefix.toUpperCase();
-    }
-
-    /**
-     * Bean getter for user.
-     * @return user
-     */
-    public String getUser() {
-        return user;
-    }
-
-    /**
-     * Bean setter for user.
-     * @param user user
-     */
-    public void setUser(String user) {
-        this.user = user;
-    }
-
-    /**
-     * Bean getter for password.
-     * @return password
-     */
-    public String getPassword() {
-        return password;
-    }
-
-    /**
-     * Bean setter for password.
-     * @param password password
-     */
-    public void setPassword(String password) {
-        this.password = password;
-    }
+    private long lockedRevision;
-    public void init(String id, RecordProcessor processor, NamespaceResolver resolver)
+    public void init(String id, NamespaceResolver resolver)
-        super.init(id, processor, resolver);
+        super.init(id, resolver);
-            con.setAutoCommit(false);
+            con.setAutoCommit(true);
-    public void sync() throws JournalException {
-        long oldRevision = getLocalRevision();
-        ResultSet rs = null;
+    protected RecordIterator getRecords(long startRevision)
+            throws JournalException {
-            selectRevisionsStmt.setLong(1, oldRevision);
+            selectRevisionsStmt.setLong(1, startRevision);
-            rs = selectRevisionsStmt.getResultSet();
-            while (rs.next()) {
-                long revision = rs.getLong(1);
-                String creator = rs.getString(2);
-                if (!creator.equals(id)) {
-                    DataInputStream in = new DataInputStream(rs.getBinaryStream(3));
-                    try {
-                        process(revision, in);
-                    } catch (IllegalArgumentException e) {
-                        String msg = "Error while processing revision " +
-                                revision + ": " + e.getMessage();
-                        throw new JournalException(msg);
-                    } finally {
-                        close(in);
-                    }
-                } else {
-                    log.info("Log entry matches journal id, skipped: " + revision);
-                }
-                setLocalRevision(revision);
-            }
+            return new DatabaseRecordIterator(
+                    selectRevisionsStmt.getResultSet(), getResolver());
-            String msg = "Unable to iterate over modified records.";
+            String msg = "Unable to return record iterater.";
-        } finally {
-            close(rs);
-        }
-
-        long currentRevision = getLocalRevision();
-        if (oldRevision < currentRevision) {
-            log.info("Sync finished, instance revision is: " + currentRevision);
-        }
-    }
-
-    /**
-     * Process a record.
-     *
-     * @param revision revision
-     * @param dataIn data input
-     * @throws JournalException if an error occurs
-     */
-    private void process(long revision, DataInputStream dataIn) throws JournalException {
-        RecordInput in = new RecordInput(dataIn, resolver);
-
-        try {
-            process(revision, in);
-        } finally {
-            in.close();
-    protected long lockRevision() throws JournalException {
+    protected void doLock() throws JournalException {
+            con.setAutoCommit(false);
+        } catch (SQLException e) {
+            String msg = "Unable to set autocommit to false.";
+            throw new JournalException(msg, e);
+        }
+
+        try {
-            long globalRevision = rs.getLong(1);
+            lockedRevision = rs.getLong(1);
-            return globalRevision;
-            String msg = "Unable to lock global revision table: " + e.getMessage();
-            throw new JournalException(msg);
+            String msg = "Unable to lock global revision table.";
+            throw new JournalException(msg, e);
+
+                try {
+                    con.setAutoCommit(true);
+                } catch (SQLException e) {
+                    String msg = "Unable to set autocommit to true.";
+                    log.warn(msg, e);
+                }
-    protected void unlockRevision(boolean successful) {
+    protected void doUnlock(boolean successful) {
+        try {
+            con.setAutoCommit(true);
+        } catch (SQLException e) {
+            String msg = "Unable to set autocommit to true.";
+            log.warn(msg, e);
+        }
-    protected void append(long revision, File record) throws JournalException {
+    protected long append(String producerId, File file) throws JournalException {
-            InputStream in = new BufferedInputStream(new FileInputStream(record));
+            InputStream in = new BufferedInputStream(new FileInputStream(file));
-                insertRevisionStmt.setLong(1, revision);
-                insertRevisionStmt.setString(2, id);
-                insertRevisionStmt.setBinaryStream(3, in, (int) record.length());
+                insertRevisionStmt.setLong(1, lockedRevision);
+                insertRevisionStmt.setString(2, getId());
+                insertRevisionStmt.setString(3, producerId);
+                insertRevisionStmt.setBinaryStream(4, in, (int) file.length());
-
-                setLocalRevision(revision);
+                return lockedRevision;
-                in.close();
+                close(in);
+
+                try {
+                    con.setAutoCommit(true);
+                } catch (SQLException e) {
+                    String msg = "Unable to set autocommit to true.";
+                    log.warn(msg, e);
+                }
-            String msg = "Unable to open journal log " + record + ": " + e.getMessage();
-            throw new JournalException(msg);
+            String msg = "Unable to open journal log '" + file + "'.";
+            throw new JournalException(msg, e);
-            String msg = "Unable to append revision: "  + revision + ": " + e.getMessage();
-            throw new JournalException(msg);
+            String msg = "Unable to append revision " + lockedRevision + ".";
+            throw new JournalException(msg, e);
-                "select REVISION_ID, REVISION_CREATOR, REVISION_DATA " +
+                "select REVISION_ID, JOURNAL_ID, PRODUCER_ID, REVISION_DATA " +
-                "(REVISION_ID, REVISION_CREATOR, REVISION_DATA) " +
-                "values (?,?,?)");
+                "(REVISION_ID, JOURNAL_ID, PRODUCER_ID, REVISION_DATA) " +
+                "values (?,?,?,?)");
+    }
+
+    /**
+     * Bean getters
+     */
+    public String getDriver() {
+        return driver;
+    }
+
+    public String getUrl() {
+        return url;
+    }
+
+    public String getSchema() {
+        return schema;
+    }
+
+    public String getSchemaObjectPrefix() {
+        return schemaObjectPrefix;
+    }
+
+    public String getUser() {
+        return user;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    /**
+     * Bean setters
+     */
+    public void setDriver(String driver) {
+        this.driver = driver;
+    }
+
+    public void setUrl(String url) {
+        this.url = url;
+    }
+
+    public void setSchema(String schema) {
+        this.schema = schema;
+    }
+
+    public void setSchemaObjectPrefix(String schemaObjectPrefix) {
+        this.schemaObjectPrefix = schemaObjectPrefix.toUpperCase();
+    }
+
+    public void setUser(String user) {
+        this.user = user;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;

MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 INS23 INS31 INS31 INS29 INS83 INS39 INS59 MOV29 INS83 INS43 INS42 INS44 MOV43 INS8 UPD39 UPD42 MOV29 UPD83 INS42 MOV44 UPD39 INS29 INS83 MOV43 INS42 MOV8 MOV65 UPD42 MOV42 UPD42 MOV42 INS39 INS42 INS54 INS54 MOV25 MOV43 UPD42 UPD42 INS65 UPD66 INS8 MOV12 INS8 INS12 INS12 INS66 UPD66 INS21 MOV21 MOV21 MOV21 MOV21 INS41 MOV21 INS44 INS8 INS21 INS44 MOV44 INS8 MOV44 INS32 INS14 UPD43 INS43 INS42 INS60 INS53 INS7 INS43 INS42 INS8 INS60 MOV21 INS8 INS8 MOV53 INS42 INS42 INS9 UPD42 UPD43 MOV43 MOV32 MOV32 UPD42 INS43 INS42 INS43 INS59 INS14 INS42 MOV32 INS42 INS43 MOV21 INS54 UPD42 UPD42 INS9 MOV43 INS59 MOV21 MOV21 MOV21 MOV21 INS21 MOV21 MOV21 MOV21 INS41 MOV21 INS54 MOV43 UPD45 UPD45 UPD42 UPD42 INS42 INS45 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS45 INS42 INS8 INS12 INS42 INS45 INS42 UPD42 INS42 UPD42 INS32 INS42 INS8 INS12 INS42 UPD45 INS42 INS21 INS44 INS8 UPD42 UPD42 INS32 INS42 INS42 INS34 INS42 UPD34 MOV21 MOV44 INS8 UPD45 UPD42 UPD45 UPD45 UPD42 UPD45 INS32 INS43 INS42 INS60 INS21 UPD42 MOV42 INS60 MOV21 INS42 INS42 INS9 INS42 MOV43 INS59 INS32 UPD42 UPD42 UPD42 INS9 MOV43 INS59 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 UPD42 INS42 UPD42 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL42 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL34 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL83 DEL39 DEL42 DEL39 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL54 DEL8 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL42 DEL45 DEL59 DEL60 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL41 DEL45 DEL42 DEL42 DEL32 DEL27 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL8 DEL83 DEL39 DEL42 DEL8 DEL31 DEL39 DEL8 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL42 DEL42 DEL32 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29