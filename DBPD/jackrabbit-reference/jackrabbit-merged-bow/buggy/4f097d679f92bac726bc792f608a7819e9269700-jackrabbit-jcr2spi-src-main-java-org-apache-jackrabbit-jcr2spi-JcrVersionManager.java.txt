JCR-2104:  JSR 283 Full Versioning (work in progress)

- setActivity
- checkout with activity param -> spi level
- more checks in version manager
- invalidation after sucessful mergeActivity

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803444 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.spi.ItemId;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.Repository;
+    /**
+     * The ID of the activity currently in effect for the session this
+     * manager has been created for.
+     */
+    private NodeId activityId;
+
+        session.checkIsAlive();
+        
+        session.checkIsAlive();
+
+
+        session.checkIsAlive();
+
+        session.checkIsAlive();
+
+        session.checkIsAlive();
+
+        session.checkIsAlive();
+
+        session.checkIsAlive();
+
+        session.checkIsAlive();
+
+        session.checkIsAlive();        
+
+        session.checkIsAlive();
+
+        session.checkIsAlive();                                  
+
-        // TODO: add validation
+        session.checkIsAlive();
+
-        // TODO
-        throw new UnsupportedOperationException("JCR-2104: JSR 283 Versioning. Implementation missing");
+        session.checkIsAlive();
+        session.checkSupportedOption(Repository.OPTION_ACTIVITIES_SUPPORTED);
+
+
+        Node oldActivity = getActivity();
+        if (activity == null) {
+            activityId = null;
+        } else {
+            NodeImpl activityNode = getValidActivity(activity, "set");
+            activityId = (NodeId) activityNode.getItemState().getId();
+        }
+        return oldActivity;
-        // TODO
-        throw new UnsupportedOperationException("JCR-2104: JSR 283 Versioning. Implementation missing");
+        session.checkIsAlive();
+        session.checkSupportedOption(Repository.OPTION_ACTIVITIES_SUPPORTED);
+
+        if (activityId == null) {
+            return null;
+        } else {
+            try {
+                return (Node) itemManager.getItem(session.getHierarchyManager().getNodeEntry(activityId));
+            } catch (ItemNotFoundException e) {
+                // the activity doesn't exist any more.
+                log.warn("Activity node with id " + activityId + " doesn't exist any more.");
+                activityId = null;
+                return null;
+            }
+        }
-        // TODO: add validation
+        session.checkIsAlive();
+
-        vMgr.removeActivity((NodeState) ((NodeImpl) activityNode).getItemState());
+        session.checkIsAlive();
+        NodeImpl activity = getValidActivity(activityNode, "remove");
+
+        NodeState nState = (NodeState) activity.getItemState();
+        ItemId removeId = nState.getId();
+        vMgr.removeActivity(nState);
+
+        // if the removal succeeded, make sure there is no current activity
+        // setting on this session, that points to the removed activity.
+        if (activityId != null && activityId.equals(removeId)) {
+            activityId = null;
+        }
-        // TODO: add validation
-        Iterator failedIds = vMgr.mergeActivity((NodeState) ((NodeImpl) activityNode).getItemState());
+        session.checkIsAlive();
+        NodeImpl activity = getValidActivity(activityNode, "merge");
+        Iterator failedIds = vMgr.mergeActivity((NodeState) activity.getItemState());
+    /**
+     * Assert that activity nodes passes to any of the activity methods have
+     * been obtained from the session this version manager has been created for.
+     * This is particularly important for workspace operations that are followed
+     * by internal updated of modified items: The hierarchy entries invalidated
+     * after successful completion of the operation must reside within scope
+     * defined by this session.
+     * <br>
+     * In addition this method varifies that the passed node is of type nt:activity.
+     *
+     * @param activityNode
+     * @param methodName
+     * @return
+     * @throws RepositoryException
+     */
+    private NodeImpl getValidActivity(Node activityNode, String methodName) throws UnsupportedRepositoryOperationException, RepositoryException {
+        NodeImpl activity;
+        if (session != activityNode.getSession()) {
+            String msg = "Attempt to " +methodName+ " an activity node that has been retrieved by another session.";
+            log.warn(msg);
+            activity = (NodeImpl) session.getNodeByIdentifier(activityNode.getIdentifier());
+        } else {
+            activity = (NodeImpl) activityNode;
+        }
+        if (!activity.isNodeType(NameConstants.NT_ACTIVITY)) {
+            throw new UnsupportedRepositoryOperationException("Given node is not an activity.");
+        }
+        return activity;
+    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS8 INS8 MOV29 MOV83 MOV39 MOV42 MOV44 MOV43 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS41 INS21 INS21 INS25 INS21 INS21 INS60 INS60 INS60 INS21 INS25 INS21 INS60 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS25 INS41 INS66 INS66 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS8 INS42 INS32 INS32 INS27 INS8 INS8 INS32 INS32 INS43 INS59 MOV43 INS59 INS43 INS59 INS32 INS27 INS8 INS32 INS43 INS59 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS21 INS42 INS42 INS42 INS42 INS40 INS42 INS33 INS41 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS11 INS42 INS42 INS32 MOV42 MOV42 INS42 INS27 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS60 INS21 INS21 INS21 INS32 INS53 INS42 INS7 INS43 INS59 INS7 INS33 INS8 INS12 INS42 INS42 INS45 MOV43 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS7 INS42 INS42 INS45 INS42 INS42 INS43 INS59 INS32 INS7 INS7 INS42 INS42 INS40 INS14 INS42 INS33 UPD42 MOV42 INS42 INS32 INS42 INS11 INS41 INS44 INS8 INS42 INS42 INS42 INS33 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS11 INS42 MOV11 INS43 INS45 INS42 INS42 INS45 INS43 INS32 INS11 INS43 INS42 INS21 INS21 INS41 INS42 INS42 INS45 INS42 INS45 MOV43 INS32 INS42 INS42 INS32 INS42 INS43 INS32 UPD42 MOV42 INS32 INS7 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS33 INS42 UPD42 MOV42 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL11 DEL36 DEL32 DEL11 DEL32 DEL21 DEL8 DEL31 DEL36