JCR-3054: Deprecate RepositoryService.getPropertyInfo method

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1159182 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.PropertyInfo;
+import org.apache.jackrabbit.spi.commons.iterator.Iterators;
-    public Iterator<? extends ItemInfo> getItemInfos(SessionInfo sessionInfo, NodeId nodeId) throws ItemNotFoundException, RepositoryException {
-        Path path = getPath(nodeId, sessionInfo);
-        String uri = getURI(path, sessionInfo);
-        int depth = batchReadConfig.getDepth(path, this.getNamePathResolver(sessionInfo));
+    public Iterator<? extends ItemInfo> getItemInfos(SessionInfo sessionInfo, ItemId itemId) throws ItemNotFoundException, RepositoryException {
+        if (!itemId.denotesNode()) {
+            PropertyInfo propertyInfo = super.getPropertyInfo(sessionInfo, (PropertyId) itemId);
+            return Iterators.singleton(propertyInfo);
+        }
+        else {
+            NodeId nodeId = (NodeId) itemId;
+            Path path = getPath(itemId, sessionInfo);
+            String uri = getURI(path, sessionInfo);
+            int depth = batchReadConfig.getDepth(path, this.getNamePathResolver(sessionInfo));
-        GetMethod method = new GetMethod(uri + "." + depth + ".json");
-        try {
-            int statusCode = getClient(sessionInfo).executeMethod(method);
-            if (statusCode == DavServletResponse.SC_OK) {
-                if (method.getResponseContentLength() == 0) {
-                    // no JSON response -> no such node on the server
-                    throw new ItemNotFoundException("No such node " + nodeId);
+            GetMethod method = new GetMethod(uri + "." + depth + ".json");
+            try {
+                int statusCode = getClient(sessionInfo).executeMethod(method);
+                if (statusCode == DavServletResponse.SC_OK) {
+                    if (method.getResponseContentLength() == 0) {
+                        // no JSON response -> no such node on the server
+                        throw new ItemNotFoundException("No such item " + nodeId);
+                    }
+
+                    NamePathResolver resolver = getNamePathResolver(sessionInfo);
+                    NodeInfoImpl nInfo = new NodeInfoImpl(nodeId, path);
+
+                    ItemInfoJsonHandler handler = new ItemInfoJsonHandler(resolver, nInfo, getRootURI(sessionInfo), getQValueFactory(sessionInfo), getPathFactory(), getIdFactory());
+                    JsonParser ps = new JsonParser(handler);
+                    ps.parse(method.getResponseBodyAsStream(), method.getResponseCharSet());
+
+                    Iterator<? extends ItemInfo> it = handler.getItemInfos();
+                    if (!it.hasNext()) {
+                        throw new ItemNotFoundException("No such node " + uri);
+                    }
+                    return handler.getItemInfos();
+                } else {
+                    throw ExceptionConverter.generate(new DavException(statusCode, "Unable to retrieve NodeInfo for " + uri), method);
-
-                NamePathResolver resolver = getNamePathResolver(sessionInfo);
-                NodeInfoImpl nInfo = new NodeInfoImpl(nodeId, path);
-
-                ItemInfoJsonHandler handler = new ItemInfoJsonHandler(resolver, nInfo, getRootURI(sessionInfo), getQValueFactory(sessionInfo), getPathFactory(), getIdFactory());
-                JsonParser ps = new JsonParser(handler);
-                ps.parse(method.getResponseBodyAsStream(), method.getResponseCharSet());
-
-                Iterator<? extends ItemInfo> it = handler.getItemInfos();
-                if (!it.hasNext()) {
-                    throw new ItemNotFoundException("No such node " + uri);
-                }
-                return handler.getItemInfos();
-            } else {
-                throw ExceptionConverter.generate(new DavException(statusCode, "Unable to retrieve NodeInfo for " + uri), method);
+            } catch (HttpException e) {
+                throw ExceptionConverter.generate(new DavException(method.getStatusCode(), "Unable to retrieve NodeInfo for " + uri));
+            } catch (IOException e) {
+                log.error("Internal error while retrieving NodeInfo.",e);
+                throw new RepositoryException(e.getMessage());
+            } finally {
+                method.releaseConnection();
-        } catch (HttpException e) {
-            throw ExceptionConverter.generate(new DavException(method.getStatusCode(), "Unable to retrieve NodeInfo for " + uri));
-        } catch (IOException e) {
-            log.error("Internal error while retrieving NodeInfo.",e);
-            throw new RepositoryException(e.getMessage());
-        } finally {
-            method.releaseConnection();

INS26 INS26 INS40 INS40 INS8 INS43 INS42 INS25 INS42 INS38 INS8 MOV8 INS32 INS60 INS41 INS60 INS42 INS42 INS43 INS59 INS32 MOV43 INS59 INS42 INS42 INS48 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS43 INS42 UPD42 INS43 INS42 INS42 INS42 UPD45 DEL42