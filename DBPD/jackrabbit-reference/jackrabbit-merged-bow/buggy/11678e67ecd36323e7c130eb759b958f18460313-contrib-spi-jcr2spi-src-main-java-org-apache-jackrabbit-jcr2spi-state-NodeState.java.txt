- remove cachebehaviour flag from ChangeLog.persisted
- minor improvement

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@521356 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.config.CacheBehaviour;
+import org.apache.jackrabbit.name.Path;
-    
+
-        PropertyEntry child = getNodeEntry().getPropertyEntry(propertyName);
-        if (child != null) {
-            return child.getPropertyState();
+        HierarchyEntry child = getNodeEntry().getDeepEntry(Path.create(propertyName, Path.INDEX_UNDEFINED));
+        if (child != null && !child.denotesNode()) {
+            return ((PropertyEntry) child).getPropertyState();
-            // TODO; correct?
-     * @see ItemState#persisted(ChangeLog, CacheBehaviour)
+     * @see ItemState#persisted(ChangeLog)
-    void persisted(ChangeLog changeLog, CacheBehaviour cacheBehaviour) throws IllegalStateException {
+    void persisted(ChangeLog changeLog) throws IllegalStateException {
-
-            // delState.overlayedState.getHierarchyEntry().remove();
+            if (Status.isTerminal(delState.getStatus())) {
+                log.debug("Removal of State " + delState + " has already been completed.");
+                continue;
+            }
-                // connect the new state to its overlayed state (including update
-                // via merging in order to be aware of autocreated values,
-                // changed definition etc.
-                addedState.reconnect(false);
-
-                it.remove();
+                if (addedState.getStatus() == Status.EXISTING) {
+                    log.debug("Adding new state " + addedState + " has already been completed.");
+                } else {
+                    // connect the new state to its overlayed state (including update
+                    // via merging in order to be aware of autocreated values,
+                    // changed definition etc.
+                    addedState.reconnect(false);
+                }
+            if (modState.getStatus() == Status.EXISTING) {
+                log.debug("Modified state has already been processed");
+                continue;
+            }
-                    it.remove();
-                it.remove();
-            adjustNodeState(parent, (PropertyState[]) l.toArray(new PropertyState[l.size()]), cacheBehaviour);
+            adjustNodeState(parent, (PropertyState[]) l.toArray(new PropertyState[l.size()]));
-        
+
-    private static void adjustNodeState(NodeState parent, PropertyState[] props,
-                                        CacheBehaviour cacheBehaviour) {
+    private static void adjustNodeState(NodeState parent, PropertyState[] props) {
-            if (cacheBehaviour != CacheBehaviour.OBSERVATION) {
-                // TODO: really necessary???
-                try {
-                    parent.reconnect(false);
-                } catch (RepositoryException e) {
-                    // TODO: handle properly
-                    log.error("Internal error", e);
-                }
+            try {
+                parent.reconnect(false);
+            } catch (RepositoryException e) {
+                // TODO: handle properly
+                log.error("Internal error", e);

MOV26 UPD40 INS43 INS27 INS42 MOV27 INS38 INS25 INS25 MOV54 UPD42 INS32 INS32 INS32 INS8 INS27 INS8 INS42 INS42 MOV42 INS40 INS42 INS42 INS36 INS42 INS42 INS32 INS21 INS18 INS25 INS32 INS40 INS21 INS18 INS11 INS42 INS42 INS32 INS27 INS8 INS8 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 INS27 INS32 INS40 MOV21 MOV21 INS42 INS42 INS45 INS45 INS42 INS45 INS42 INS42 UPD42 INS42 INS27 INS45 INS42 INS45 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL27 DEL8 DEL25