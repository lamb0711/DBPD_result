JCR-2541: spi2dav : EventJournal not implemented

Add Atom Feed based Event Journal implementation.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1213890 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.webdav.AtomFeedConstants;
-import org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery;
-    public EventBundle getEvents(SessionInfo sessionInfo, EventFilter filter,
-                                   long after) throws
-            RepositoryException, UnsupportedRepositoryOperationException {
-        // TODO
-        throw new UnsupportedRepositoryOperationException("Not implemented -> JCR-2541");
+    public EventBundle getEvents(SessionInfo sessionInfo, EventFilter filter, long after) throws RepositoryException,
+            UnsupportedRepositoryOperationException {
+        // TODO: use filters remotely (JCR-3179)
+
+        GetMethod method = null;
+        String rootUri = uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName());
+        rootUri += "?type=journal"; // TODO should have a way to discover URI template
+
+        try {
+            method = new GetMethod(rootUri);
+            method.addRequestHeader("If-None-Match", "\"" + Long.toHexString(after) + "\""); // TODO
+            initMethod(method, sessionInfo);
+
+            getClient(sessionInfo).executeMethod(method);
+            assert method.getStatusCode() == 200;
+
+            InputStream in = method.getResponseBodyAsStream();
+            Document doc = null;
+            if (in != null) {
+                // read response and try to build a xml document
+                try {
+                    doc = DomUtil.parseDocument(in);
+                } catch (ParserConfigurationException e) {
+                    IOException exception = new IOException("XML parser configuration error");
+                    exception.initCause(e);
+                    throw exception;
+                } catch (SAXException e) {
+                    IOException exception = new IOException("XML parsing error");
+                    exception.initCause(e);
+                    throw exception;
+                } finally {
+                    in.close();
+                }
+            }
+
+            List<Event> events = new ArrayList<Event>();
+
+            ElementIterator entries = DomUtil.getChildren(doc.getDocumentElement(), AtomFeedConstants.N_ENTRY);
+            while (entries.hasNext()) {
+                Element entryElem = entries.next();
+
+                Element contentElem = DomUtil.getChildElement(entryElem, AtomFeedConstants.N_CONTENT);
+                if (contentElem != null
+                        && "application/vnd.apache.jackrabbit.event+xml".equals(contentElem.getAttribute("type"))) {
+                    List<Event> el = buildEventList(contentElem, (SessionInfoImpl) sessionInfo);
+                    for (Event e : el) {
+                        if (e.getDate() > after && (filter == null || filter.accept(e, false))) {
+                            events.add(e);
+                        }
+                    }
+                }
+            }
+
+            return new EventBundleImpl(events, false);
+        } catch (Exception ex) {
+            log.error("extracting events from journal feed", ex);
+            throw new RepositoryException(ex);
+        }
+
+        String userId = null;
+
+        // get user id from enclosing Atom entry element in case this was a feed
+        if (DomUtil.matches(bundleElement, AtomFeedConstants.N_ENTRY)) {
+            Element authorEl = DomUtil.getChildElement(bundleElement, AtomFeedConstants.N_AUTHOR);
+            Element nameEl = authorEl != null ? DomUtil.getChildElement(authorEl, AtomFeedConstants.N_NAME) : null;
+            if (nameEl != null) {
+                userId = DomUtil.getTextTrim(nameEl);
+            }
+        }
+
-            Path eventPath;
-            try {
-                eventPath = uriResolver.getQPath(href, sessionInfo);
-            } catch (RepositoryException e) {
-                // should not occur
-                log.error("Internal error while building Event", e.getMessage());
-                continue;
-            }
-
-            boolean isForNode = (type == Event.NODE_ADDED
-                    || type == Event.NODE_REMOVED || type == Event.NODE_MOVED);
-            
+            Path eventPath = null;
-            try {
-                if (isForNode) {
-                    eventId = uriResolver.getNodeIdAfterEvent(href,
-                            sessionInfo, type == Event.NODE_REMOVED);
-                } else {
-                    eventId = uriResolver.getPropertyId(href, sessionInfo);
+            NodeId parentId = null;
+
+            if (href != null) {
+                try {
+                    eventPath = uriResolver.getQPath(href, sessionInfo);
+                } catch (RepositoryException e) {
+                    // should not occur
+                    log.error("Internal error while building Event", e.getMessage());
+                    continue;
-            } catch (RepositoryException e) {
-                if (isForNode) {
-                    eventId = idFactory.createNodeId((String) null, eventPath);
-                } else {
-                    try {
-                        eventId = idFactory.createPropertyId(
-                                idFactory.createNodeId((String) null,
-                                        eventPath.getAncestor(1)),
-                                eventPath.getName());
-                    } catch (RepositoryException e1) {
-                        log.warn("Unable to build event itemId: ",
-                                e.getMessage());
+
+                boolean isForNode = (type == Event.NODE_ADDED
+                        || type == Event.NODE_REMOVED || type == Event.NODE_MOVED);
+                
+                try {
+                    if (isForNode) {
+                        eventId = uriResolver.getNodeIdAfterEvent(href,
+                                sessionInfo, type == Event.NODE_REMOVED);
+                    } else {
+                        eventId = uriResolver.getPropertyId(href, sessionInfo);
+                    }
+                } catch (RepositoryException e) {
+                    if (isForNode) {
+                        eventId = idFactory.createNodeId((String) null, eventPath);
+                    } else {
+                        try {
+                            eventId = idFactory.createPropertyId(
+                                    idFactory.createNodeId((String) null,
+                                            eventPath.getAncestor(1)),
+                                    eventPath.getName());
+                        } catch (RepositoryException e1) {
+                            log.warn("Unable to build event itemId: ",
+                                    e.getMessage());
+                        }
-            }
-            String parentHref = Text.getRelativeParent(href, 1, true);
-            NodeId parentId = null;
-            try {
-                parentId = uriResolver.getNodeId(parentHref, sessionInfo);
-            } catch (RepositoryException e) {
-                log.warn("Unable to build event parentId: ", e.getMessage());
+
+                String parentHref = Text.getRelativeParent(href, 1, true);
+                try {
+                    parentId = uriResolver.getNodeId(parentHref, sessionInfo);
+                } catch (RepositoryException e) {
+                    log.warn("Unable to build event parentId: ", e.getMessage());
+                }
+                
+            if (userId == null) {
+                // user id not retrieved from container
+                userId = DomUtil.getChildTextTrim(evElem, ObservationConstants.XML_EVENTUSERID, ObservationConstants.NAMESPACE);
+            }
-            events.add(new EventImpl(eventId, eventPath, parentId, type, evElem, getNamePathResolver(sessionInfo), getQValueFactory()));
+            events.add(new EventImpl(eventId, eventPath, parentId, type, userId, evElem,
+                    getNamePathResolver(sessionInfo), getQValueFactory()));

MOV26 UPD40 INS8 INS60 INS60 INS21 INS54 INS60 INS25 INS43 INS59 INS43 INS59 INS7 INS8 INS12 INS43 INS59 INS32 INS8 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS45 INS21 INS21 INS21 INS21 INS6 INS60 INS60 INS25 INS60 INS60 INS61 INS41 INS44 INS8 INS42 INS42 INS33 INS42 INS42 INS42 INS40 INS60 INS60 INS25 INS25 INS25 INS42 INS42 INS32 INS7 INS32 INS32 INS32 INS27 INS43 INS59 INS43 INS59 INS27 INS8 INS74 INS59 INS43 INS59 INS32 INS8 INS14 INS43 INS42 INS21 MOV53 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS54 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS43 INS42 INS9 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS33 INS21 INS33 INS42 INS33 MOV54 MOV60 MOV54 MOV60 MOV54 INS42 INS33 INS21 INS43 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS12 INS8 INS42 INS42 INS74 INS42 INS42 INS32 INS40 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS45 INS42 UPD43 INS42 INS42 INS42 INS42 INS40 INS27 INS32 INS33 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS44 INS8 INS21 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS60 INS70 UPD42 INS42 INS33 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS33 INS45 INS42 INS32 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS27 INS8 INS43 INS45 INS43 INS45 INS43 INS42 INS27 INS36 INS21 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS9 DEL45 DEL8