- Redesigned observation to also include workspace modifications
- Extended observation tests and moved them into the api.observation package

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155583 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.WorkspaceImpl;
+     * ThreadLocal that holds the ChangeLog while this item state manager
+     * is in commit().
+     */
+    private static ThreadLocal commitLog = new ThreadLocal() {
+        protected synchronized Object initialValue() {
+            return new CommitLog();
+        }
+    };
+
+    /**
-    public TransactionalItemStateManager(SharedItemStateManager sharedStateMgr) {
-        super(sharedStateMgr);
+    public TransactionalItemStateManager(SharedItemStateManager sharedStateMgr, WorkspaceImpl wspImpl) {
+        super(sharedStateMgr, wspImpl);
+                // set changeLog in ThreadLocal
+                ((CommitLog) commitLog.get()).setChanges(changeLog);
+                log.error(e);
+            } finally {
+                ((CommitLog) commitLog.get()).setChanges(null);
-     * If associated to a transaction, check our transactional
-     * change log first.
+     * If this state manager is committing changes, this method first checks
+     * the commitLog ThreadLocal. Else if associated to a transaction check
+     * the transactional change log. Fallback is always the call to the base
+     * class.
-        if (txLog != null) {
+        ChangeLog changeLog = ((CommitLog) commitLog.get()).getChanges();
+        if (changeLog != null) {
+            // check items in commit log
+            ItemState state = changeLog.get(id);
+            if (state != null) {
+                return state;
+            }
+        } else if (txLog != null) {
-     * If associated to a transaction, check our transactional
-     * change log first.
+     * If this state manager is committing changes, this method first checks
+     * the commitLog ThreadLocal. Else if associated to a transaction check
+     * the transactional change log. Fallback is always the call to the base
+     * class.
-        if (txLog != null) {
+        ChangeLog changeLog = ((CommitLog) commitLog.get()).getChanges();
+        if (changeLog != null) {
+            // check items in commit log
+            try {
+                ItemState state = changeLog.get(id);
+                if (state != null) {
+                    return true;
+                }
+            } catch (NoSuchItemStateException e) {
+                return false;
+            }
+        } else if (txLog != null) {
-     * If associated to a transaction, check our transactional
-     * change log first.
+     * If this state manager is committing changes, this method first
+     * checks the commitLog ThreadLocal. Else if associated to a transaction
+     * check the transactional change log. Fallback is always the call to
+     * the base class.
-        if (txLog != null) {
+        ChangeLog changeLog = ((CommitLog) commitLog.get()).getChanges();
+        if (changeLog != null) {
+            // check commit log
+            NodeReferences refs = changeLog.get(id);
+            if (refs != null) {
+                return refs;
+            }
+        } else if (txLog != null) {
+
+    //--------------------------< inner classes >-------------------------------
+
+    /**
+     * Helper class that serves as a container for a ChangeLog in a ThreadLocal.
+     * The <code>CommitLog</code> is associated with a <code>ChangeLog</code>
+     * while the <code>TransactionalItemStateManager</code> is in the commit
+     * method.
+     */
+    private static class CommitLog {
+
+        /** The changes that are about to be committed */
+        private ChangeLog changes;
+
+        /**
+         * Sets changes that are about to be committed.
+         * @param changes that are about to be committed, or <code>null</code>
+         * if changes have been committed and the commit log should be reset.
+         */
+        private void setChanges(ChangeLog changes) {
+            this.changes = changes;
+        }
+
+        /**
+         * The changes that are about to be committed, or <code>null</code> if
+         * the <code>TransactionalItemStateManager</code> is currently not
+         * committing any changes.
+         * @return the changes about to be committed.
+         */
+        private ChangeLog getChanges() {
+            return changes;
+        }
+    }

INS26 INS40 INS23 INS55 INS29 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS83 INS42 INS23 INS31 INS31 INS65 INS42 INS42 INS14 INS43 INS42 INS60 INS25 INS60 INS25 INS60 INS25 INS65 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS66 INS66 INS43 INS1 INS42 INS42 INS66 UPD66 UPD66 INS66 INS43 INS59 INS27 INS8 MOV25 INS66 UPD66 UPD66 INS66 INS43 INS59 INS27 INS8 MOV25 INS66 UPD66 UPD66 INS66 INS43 INS59 INS27 INS8 MOV25 INS66 INS66 INS66 INS66 INS65 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS42 INS41 INS42 INS31 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS66 INS66 INS42 INS66 INS66 INS42 INS7 INS66 INS66 INS66 INS66 INS42 INS83 INS83 INS43 INS42 INS8 INS8 INS36 INS42 INS43 INS59 INS27 INS8 INS36 INS42 INS8 INS12 INS36 INS42 INS43 INS59 INS27 INS8 INS22 INS42 INS42 INS41 INS21 INS21 INS11 INS42 INS42 INS32 INS42 INS33 INS41 INS11 INS60 INS25 INS44 INS8 INS11 INS42 INS42 INS32 INS42 INS33 INS41 INS52 INS42 INS14 INS32 INS21 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS59 INS27 INS8 INS43 INS42 INS41 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS36 INS42 INS42 INS32 INS36 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS9 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS9 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42