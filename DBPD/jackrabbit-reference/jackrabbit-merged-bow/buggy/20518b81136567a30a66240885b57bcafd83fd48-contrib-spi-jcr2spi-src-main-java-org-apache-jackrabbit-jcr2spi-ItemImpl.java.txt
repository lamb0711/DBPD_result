- work in progress: implement invalidate and refresh on ItemState.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@474207 13f79535-47bb-0310-9956-ffa450edef68

-        if (keepChanges) {
-            // TODO: TOBEFIXED. make sure item is updated to status present on the server.
-            return;
+        if (!keepChanges) {
+            // check status of this item's state
+            switch (state.getStatus()) {
+                case Status.NEW:
+                    String msg = "Cannot refresh a new item (" + safeGetJCRPath() + ").";
+                    log.debug(msg);
+                    throw new RepositoryException(msg);
+            }
+
+            // reset all transient modifications from this item and its decendants.
+            try {
+                session.getSessionItemStateManager().undo(state);
+            } catch (ItemStateException e) {
+                String msg = "Unable to undo item (" + safeGetJCRPath() + ")";
+                log.debug(msg);
+                throw new RepositoryException(msg, e);
+            }
-        // check status of this item's state
-        switch (state.getStatus()) {
-            case Status.NEW:
-                String msg = "Cannot refresh a new item (" + safeGetJCRPath() + ").";
-                log.debug(msg);
-                throw new RepositoryException(msg);
-            case Status.STALE_DESTROYED:
-                msg = "Cannot refresh on a deleted item (" + safeGetJCRPath() + ").";
-                log.debug(msg);
-                throw new InvalidItemStateException(msg);
-        }
-
-        // reset all transient modifications from this item and its decendants.
-        try {
-            session.getSessionItemStateManager().undo(state);
-        } catch (ItemStateException e) {
-            String msg = "Unable to update item (" + safeGetJCRPath() + ")";
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
-        }
+        // now refresh to persistent state on server
+        state.refresh();
-     * Performs a sanity check on this item and the associated session.
+     * Performs a sanity check on this item and the associated session. If
+     * the underlying item state is in an invalidated state then it will be
+     * refreshed to get the current status of the item state. The status
+     * check is then performed on the newly retrieved status.
-        if (state == null || !state.isValid()) {
-            throw new InvalidItemStateException("Item '" + this + "' doesn't exist anymore");
+        if (state != null) {
+            if (state.getStatus() == Status.INVALIDATED) {
+                // refresh to get current status from persistent storage
+                state.refresh();
+            }
+            // now check if valid
+            if (state.isValid()) {
+                return;
+            }
+        throw new InvalidItemStateException("Item '" + this + "' doesn't exist anymore");

INS8 MOV21 INS25 INS21 MOV53 INS38 MOV8 INS32 UPD66 INS66 INS66 INS66 INS27 INS8 INS42 INS42 INS42 MOV42 MOV33 INS25 MOV25 INS27 MOV8 MOV32 INS32 INS40 INS21 INS42 INS42 MOV42 UPD42 MOV42 INS32 INS42 INS42 MOV27 UPD45 UPD45 DEL40 DEL49 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL45 DEL42 DEL32 DEL45 DEL27 DEL42 DEL27 DEL38 DEL27