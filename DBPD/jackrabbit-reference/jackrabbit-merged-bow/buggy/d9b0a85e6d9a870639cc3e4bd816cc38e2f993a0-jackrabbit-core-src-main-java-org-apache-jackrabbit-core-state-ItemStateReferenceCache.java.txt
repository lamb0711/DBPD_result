JCR-2699: Improve read/write concurrency

Use segments also in ItemStateReferenceCache to make synchronization more fine-grained

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1004224 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.util.Dumpable;
-import java.io.PrintStream;
+import java.util.ArrayList;
+import java.util.List;
-public class ItemStateReferenceCache implements ItemStateCache, Dumpable {
+public class ItemStateReferenceCache implements ItemStateCache {
-     * primary cache storing weak references to <code>ItemState</code>
-     * instances.
-     */
-    @SuppressWarnings("unchecked")
-    private final Map<ItemId, ItemState> refs =
-        // I tried using soft instead of weak references here, but that
-        // seems to have some unexpected performance consequences (notable
-        // increase in the JCR TCK run time). So even though soft references
-        // are generally recommended over weak references for caching
-        // purposes, it seems that using weak references is safer here.
-        new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK);
-
-    /**
-     * secondary cache that automatically flushes entries based on some
-     * eviction policy; entries flushed from the secondary cache will be
-     * indirectly flushed from the primary (reference) cache by the garbage
-     * collector if they thus are rendered weakly reachable.
+     * Cache that automatically flushes entries based on some eviction policy;
+     * entries flushed from the secondary cache will be indirectly flushed
+     * from the reference map by the garbage collector if they thus are
+     * rendered weakly reachable.
+     * Segments of the weak reference map used to keep track of item states.
+     */
+    private final Map<ItemId, ItemState>[] segments;
+
+    /**
-     * <code>MLRUItemStateCache</code> instance as internal secondary
-     * cache.
+     * <code>MLRUItemStateCache</code> instance as internal cache.
+    @SuppressWarnings("unchecked")
+        this.segments = new Map[Runtime.getRuntime().availableProcessors()];
+        for (int i = 0; i < segments.length; i++) {
+            // I tried using soft instead of weak references here, but that
+            // seems to have some unexpected performance consequences (notable
+            // increase in the JCR TCK run time). So even though soft references
+            // are generally recommended over weak references for caching
+            // purposes, it seems that using weak references is safer here.
+            segments[i] =
+                new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK);
+        }
+    }
+
+    /**
+     * Returns the reference map segment for the given entry key. The segment
+     * is selected based on the hash code of the key, after a transformation
+     * to prevent interfering with the optimal performance of the segment
+     * hash map.
+     *
+     * @param id item identifer
+     * @return reference map segment
+     */
+    private Map<ItemId, ItemState> getSegment(ItemId id) {
+        // Unsigned shift right to prevent negative indexes and to
+        // prevent too similar keys to all get stored in the same segment
+        return segments[(id.hashCode() >>> 1) % segments.length];
-    public synchronized boolean isCached(ItemId id) {
-        // check primary cache
-        return refs.containsKey(id);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public synchronized ItemState retrieve(ItemId id) {
-        // fake call to update stats of secondary cache
-        cache.retrieve(id);
-
-        // retrieve from primary cache
-        return refs.get(id);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public synchronized ItemState[] retrieveAll() {
-        // values of primary cache
-        return (ItemState[]) refs.values().toArray(new ItemState[refs.size()]);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public synchronized void cache(ItemState state) {
-        ItemId id = state.getId();
-        if (refs.containsKey(id)) {
-            log.warn("overwriting cached entry " + id);
+    public boolean isCached(ItemId id) {
+        Map<ItemId, ItemState> segment = getSegment(id);
+        synchronized (segment) {
+            return segment.containsKey(id);
-        // fake call to update stats of secondary cache
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public ItemState retrieve(ItemId id) {
+        // Update the access statistics in the cache
+        ItemState state = cache.retrieve(id);
+        if (state != null) {
+            // Return fast to avoid the second lookup below
+            return state;
+        }
+
+        Map<ItemId, ItemState> segment = getSegment(id);
+        synchronized (segment) {
+            return segment.get(id);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public ItemState[] retrieveAll() {
+        List<ItemState> states = new ArrayList<ItemState>();
+        for (int i = 0; i < segments.length; i++) {
+            synchronized (segments[i]) {
+                states.addAll(segments[i].values());
+            }
+        }
+        return states.toArray(new ItemState[states.size()]);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void cache(ItemState state) {
+        // Update the cache
-        // store weak reference in primary cache
-        refs.put(id, state);
+        // Store a weak reference in the reference map
+        ItemId id = state.getId();
+        Map<ItemId, ItemState> segment = getSegment(id);
+        synchronized (segment) {
+            if (segment.containsKey(id)) {
+                log.warn("overwriting cached entry " + id);
+            }
+            segment.put(id, state);
+        }
-    public synchronized void evict(ItemId id) {
-        // fake call to update stats of secondary cache
+    public void evict(ItemId id) {
+        // Update the cache
-        // remove from primary cache
-        refs.remove(id);
+        // Remove from reference map
+        // TODO: Allow the weak reference to be cleared automatically?
+        Map<ItemId, ItemState> segment = getSegment(id);
+        synchronized (segment) {
+            segment.remove(id);
+        }
-    public synchronized void dispose() {
+    public void dispose() {
-    public synchronized void evictAll() {
-        // fake call to update stats of secondary cache
+    public void evictAll() {
+        // Update the cache
-        // remove all weak references from primary cache
-        refs.clear();
+        // remove all weak references from reference map
+        // TODO: Allow the weak reference to be cleared automatically?
+        for (int i = 0; i < segments.length; i++) {
+            synchronized (segments[i]) {
+                segments[i].clear();
+            }
+        }
-    public synchronized boolean isEmpty() {
-        // check primary cache
-        return refs.isEmpty();
+    public boolean isEmpty() {
+        for (int i = 0; i < segments.length; i++) {
+            synchronized (segments[i]) {
+                if (!segments[i].isEmpty()) {
+                    return false;
+                }
+            }
+        }
+        return true;
-    //-------------------------------------------------------------< Dumpable >
-    /**
-     * {@inheritDoc}
-     */
-    public synchronized void dump(PrintStream ps) {
-        ps.println("ItemStateReferenceCache (" + this + ")");
-        ps.println("  refs: " + refs.keySet());
-        ps.println();
-    }

MOV26 UPD40 UPD40 INS31 INS31 INS31 MOV43 MOV59 INS5 INS59 MOV79 INS8 MOV29 UPD83 MOV83 MOV74 INS42 MOV44 INS8 MOV29 UPD83 MOV83 MOV39 MOV42 INS44 INS8 INS43 INS8 MOV29 INS8 MOV60 INS8 INS8 MOV29 MOV83 MOV39 MOV42 INS8 INS74 INS85 INS42 MOV21 INS21 INS24 INS65 INS65 INS65 INS41 INS43 INS42 INS60 INS51 INS42 INS60 INS25 INS60 INS51 INS60 INS24 MOV41 INS60 INS51 MOV21 INS60 INS51 MOV21 INS24 INS24 INS41 INS66 INS66 UPD66 UPD66 UPD66 INS43 INS43 INS43 UPD66 INS7 INS58 INS27 INS37 INS8 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS2 INS42 INS74 INS59 INS42 INS8 MOV43 INS59 INS27 INS8 INS74 INS59 INS42 INS8 INS74 INS59 INS58 INS27 INS37 INS8 MOV32 INS74 INS59 INS42 INS8 INS74 INS59 INS42 INS8 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS9 INS42 INS42 INS42 INS22 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS27 INS43 INS43 INS43 INS42 INS32 MOV41 INS42 MOV32 INS42 INS33 INS41 INS43 INS43 INS43 INS42 INS32 MOV41 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS51 UPD42 MOV42 INS43 INS43 INS43 INS42 INS32 MOV25 MOV21 INS43 INS43 INS43 INS42 INS32 MOV21 INS39 INS59 INS42 INS40 INS42 INS51 INS39 INS59 INS42 INS40 INS42 INS51 INS52 INS42 INS5 INS32 INS42 INS34 INS7 INS36 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS34 INS2 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS2 INS8 INS42 INS34 INS2 INS8 INS43 INS85 INS32 INS42 INS2 MOV14 INS27 UPD42 UPD42 INS43 INS43 INS42 INS42 INS21 UPD42 UPD42 UPD42 UPD42 INS42 INS42 MOV21 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS38 INS8 INS42 INS42 INS42 INS42 INS32 INS2 INS32 INS41 INS2 INS42 INS42 INS42 INS2 UPD42 MOV42 INS9 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL59 DEL66 DEL66 DEL66 DEL66 DEL8 DEL65 DEL65 DEL8 DEL31 DEL83 DEL21 DEL8 DEL83 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL11 DEL8 DEL83 DEL83 DEL8 DEL83 DEL83 DEL42 DEL8 DEL83 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL52 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31