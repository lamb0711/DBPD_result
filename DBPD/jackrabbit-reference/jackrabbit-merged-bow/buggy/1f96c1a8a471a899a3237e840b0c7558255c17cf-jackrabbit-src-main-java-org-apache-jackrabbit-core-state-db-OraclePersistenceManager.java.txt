JCR-595 Refactoring of the Persistence Managers (+changing some eol-styles)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@467925 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.state.PMContext;
-import org.apache.jackrabbit.core.state.NodeReferences;
-import org.apache.jackrabbit.core.state.ItemStateException;
-import org.apache.jackrabbit.core.state.NodeState;
-import org.apache.jackrabbit.core.state.PropertyState;
-import org.apache.jackrabbit.core.state.ItemState;
-import org.apache.jackrabbit.core.state.util.Serializer;
-import org.apache.jackrabbit.util.Text;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.jcr.RepositoryException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.ByteArrayInputStream;
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.lang.reflect.Method;
-import java.sql.Blob;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.DatabaseMetaData;
-import java.sql.Statement;
-
- * <code>OraclePersistenceManager</code> is a JDBC-based
- * <code>PersistenceManager</code> for Jackrabbit that persists
- * <code>ItemState</code> and <code>NodeReferences</code> objects in Oracle
- * database using a simple custom serialization format and a
- * very basic non-normalized database schema (in essence tables with one 'key'
- * and one 'data' column).
- * <p/>
- * It is configured through the following properties:
- * <ul>
- * <li><code>driver</code>: the FQN name of the JDBC driver class
- * (default: <code>"oracle.jdbc.OracleDriver"</code>)</li>
- * <li><code>schema</code>: type of schema to be used
- * (default: <code>"oracle"</code>)</li>
- * <li><code>url</code>: the database url (e.g.
- * <code>"jdbc:oracle:thin:@[host]:[port]:[sid]"</code>)</li>
- * <li><code>user</code>: the database user</li>
- * <li><code>password</code>: the user's password</li>
- * <li><code>schemaObjectPrefix</code>: prefix to be prepended to schema objects</li>
- * <li><code>externalBLOBs</code>: if <code>true</code> (the default) BINARY
- * values (BLOBs) are stored in the local file system;
- * if <code>false</code> BLOBs are stored in the database</li>
- * </ul>
- * See also {@link SimpleDbPersistenceManager}.
- * <p/>
- * The following is a fragment from a sample configuration:
- * <pre>
- *   &lt;PersistenceManager class="org.apache.jackrabbit.core.state.db.OraclePersistenceManager"&gt;
- *       &lt;param name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:orcl"/&gt;
- *       &lt;param name="user" value="scott"/&gt;
- *       &lt;param name="password" value="tiger"/&gt;
- *       &lt;param name="schemaObjectPrefix" value="${wsp.name}_"/&gt;
- *       &lt;param name="externalBLOBs" value="false"/&gt;
- *  &lt;/PersistenceManager&gt;
- * </pre>
- */
-public class OraclePersistenceManager extends SimpleDbPersistenceManager {
-
-    /**
-     * Logger instance
-     */
-    private static Logger log = LoggerFactory.getLogger(OraclePersistenceManager.class);
-
-    private Class blobClass;
-    private Integer DURATION_SESSION_CONSTANT;
-    private Integer MODE_READWRITE_CONSTANT;
-
-    /**
-     * Creates a new <code>OraclePersistenceManager</code> instance.
-     */
-    public OraclePersistenceManager() {
-        // preset some attributes to reasonable defaults
-        schema = "oracle";
-        driver = "oracle.jdbc.OracleDriver";
-        schemaObjectPrefix = "";
-        user = "";
-        password = "";
-        initialized = false;
-    }
-
-    //---------------------------------< SimpleDbPersistenceManager overrides >
-    /**
-     * {@inheritDoc}
-     * <p/>
-     * Retrieve the <code>oracle.sql.BLOB</code> class via reflection, and
-     * initialize the values for the <code>DURATION_SESSION</code> and
-     * <code>MODE_READWRITE</code> constants defined there.
-     * @see oracle.sql.BLOB#DURATION_SESSION
-     * @see oracle.sql.BLOB#MODE_READWRITE
-     */
-    public void init(PMContext context) throws Exception {
-        super.init(context);
-
-        if (!externalBLOBs) {
-            blobStore = new OracleBLOBStore();
-        }
-
-        // initialize oracle.sql.BLOB class & constants
-
-        // use the Connection object for using the exact same
-        // class loader that the Oracle driver was loaded with
-        blobClass = con.getClass().getClassLoader().loadClass("oracle.sql.BLOB");
-        DURATION_SESSION_CONSTANT =
-                new Integer(blobClass.getField("DURATION_SESSION").getInt(null));
-        MODE_READWRITE_CONSTANT =
-                new Integer(blobClass.getField("MODE_READWRITE").getInt(null));
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public synchronized void store(NodeState state) throws ItemStateException {
-        if (!initialized) {
-            throw new IllegalStateException("not initialized");
-        }
-
-        // check if insert or update
-        boolean update = state.getStatus() != ItemState.STATUS_NEW;
-        //boolean update = exists((NodeId) state.getId());
-        PreparedStatement stmt = (update) ? nodeStateUpdate : nodeStateInsert;
-
-        Blob blob = null;
-        try {
-            ByteArrayOutputStream out =
-                    new ByteArrayOutputStream(INITIAL_BUFFER_SIZE);
-            // serialize node state
-            Serializer.serialize(state, out);
-
-            // we are synchronized on this instance, therefore we do not
-            // not have to additionally synchronize on the preparedStatement
-
-            blob = createTemporaryBlob(new ByteArrayInputStream(out.toByteArray()));
-            stmt.setBlob(1, blob);
-            stmt.setString(2, state.getId().toString());
-            stmt.executeUpdate();
-
-            // there's no need to close a ByteArrayOutputStream
-            //out.close();
-        } catch (Exception e) {
-            String msg = "failed to write node state: " + state.getId();
-            log.error(msg, e);
-            throw new ItemStateException(msg, e);
-        } finally {
-            resetStatement(stmt);
-            if (blob != null) {
-                try {
-                    freeTemporaryBlob(blob);
-                } catch (Exception e1) {
-                }
-            }
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public synchronized void store(PropertyState state) throws ItemStateException {
-        if (!initialized) {
-            throw new IllegalStateException("not initialized");
-        }
-
-        // check if insert or update
-        boolean update = state.getStatus() != ItemState.STATUS_NEW;
-        //boolean update = exists((PropertyId) state.getId());
-        PreparedStatement stmt = (update) ? propertyStateUpdate : propertyStateInsert;
-
-        Blob blob = null;
-        try {
-            ByteArrayOutputStream out =
-                    new ByteArrayOutputStream(INITIAL_BUFFER_SIZE);
-            // serialize property state
-            Serializer.serialize(state, out, blobStore);
-
-            // we are synchronized on this instance, therefore we do not
-            // not have to additionally synchronize on the preparedStatement
-
-            blob = createTemporaryBlob(new ByteArrayInputStream(out.toByteArray()));
-            stmt.setBlob(1, blob);
-            stmt.setString(2, state.getId().toString());
-            stmt.executeUpdate();
-
-            // there's no need to close a ByteArrayOutputStream
-            //out.close();
-        } catch (Exception e) {
-            String msg = "failed to write property state: " + state.getId();
-            log.error(msg, e);
-            throw new ItemStateException(msg, e);
-        } finally {
-            resetStatement(stmt);
-            if (blob != null) {
-                try {
-                    freeTemporaryBlob(blob);
-                } catch (Exception e1) {
-                }
-            }
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public synchronized void store(NodeReferences refs) throws ItemStateException {
-        if (!initialized) {
-            throw new IllegalStateException("not initialized");
-        }
-
-        // check if insert or update
-        boolean update = exists(refs.getId());
-        PreparedStatement stmt = (update) ? nodeReferenceUpdate : nodeReferenceInsert;
-
-        Blob blob = null;
-        try {
-            ByteArrayOutputStream out =
-                    new ByteArrayOutputStream(INITIAL_BUFFER_SIZE);
-            // serialize references
-            Serializer.serialize(refs, out);
-
-            // we are synchronized on this instance, therefore we do not
-            // not have to additionally synchronize on the preparedStatement
-
-            blob = createTemporaryBlob(new ByteArrayInputStream(out.toByteArray()));
-            stmt.setBlob(1, blob);
-            stmt.setString(2, refs.getId().toString());
-            stmt.executeUpdate();
-
-            // there's no need to close a ByteArrayOutputStream
-            //out.close();
-        } catch (Exception e) {
-            String msg = "failed to write node references: " + refs.getId();
-            log.error(msg, e);
-            throw new ItemStateException(msg, e);
-        } finally {
-            resetStatement(stmt);
-            if (blob != null) {
-                try {
-                    freeTemporaryBlob(blob);
-                } catch (Exception e1) {
-                }
-            }
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     * <p/>
-     * Overridden in order to support multiple oracle schemas. Note that
-     * schema names in Oracle correspond to the username of the connection.
-     * See http://issues.apache.org/jira/browse/JCR-582
-     *
-     * @throws Exception if an error occurs
-     */
-    protected void checkSchema() throws Exception {
-        DatabaseMetaData metaData = con.getMetaData();
-        String tableName = schemaObjectPrefix + "NODE";
-        if (metaData.storesLowerCaseIdentifiers()) {
-            tableName = tableName.toLowerCase();
-        } else if (metaData.storesUpperCaseIdentifiers()) {
-            tableName = tableName.toUpperCase();
-        }
-        String userName = metaData.getUserName();
-
-        ResultSet rs = metaData.getTables(null, userName, tableName, null);
-        boolean schemaExists;
-        try {
-            schemaExists = rs.next();
-        } finally {
-            rs.close();
-        }
-
-        if (!schemaExists) {
-            // read ddl from resources
-            InputStream in = getClass().getResourceAsStream(schema + ".ddl");
-            if (in == null) {
-                String msg = "Configuration error: unknown schema '" + schema + "'";
-                log.debug(msg);
-                throw new RepositoryException(msg);
-            }
-            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
-            Statement stmt = con.createStatement();
-            try {
-                String sql = reader.readLine();
-                while (sql != null) {
-                    // Skip comments and empty lines
-                    if (!sql.startsWith("#") && sql.length() > 0) {
-                        // replace prefix variable
-                        sql = Text.replace(sql, SCHEMA_OBJECT_PREFIX_VARIABLE, schemaObjectPrefix);
-                        // execute sql stmt
-                        stmt.executeUpdate(sql);
-                    }
-                    // read next sql stmt
-                    sql = reader.readLine();
-                }
-                // commit the changes
-                con.commit();
-            } finally {
-                closeStream(in);
-                closeStatement(stmt);
-            }
-        }
-    }
-
-    //----------------------------------------< oracle-specific blob handling >
-    /**
-     * Creates a temporary oracle.sql.BLOB instance via reflection and spools
-     * the contents of the specified stream.
-     */
-    protected Blob createTemporaryBlob(InputStream in) throws Exception {
-        /*
-        BLOB blob = BLOB.createTemporary(con, false, BLOB.DURATION_SESSION);
-        blob.open(BLOB.MODE_READWRITE);
-        OutputStream out = blob.getBinaryOutputStream();
-        ...
-        out.flush();
-        out.close();
-        blob.close();
-        return blob;
-        */
-        Method createTemporary = blobClass.getMethod("createTemporary",
-                new Class[]{Connection.class, Boolean.TYPE, Integer.TYPE});
-        Object blob = createTemporary.invoke(null,
-                new Object[]{con, Boolean.FALSE, DURATION_SESSION_CONSTANT});
-        Method open = blobClass.getMethod("open", new Class[]{Integer.TYPE});
-        open.invoke(blob, new Object[]{MODE_READWRITE_CONSTANT});
-        Method getBinaryOutputStream =
-                blobClass.getMethod("getBinaryOutputStream", new Class[0]);
-        OutputStream out = (OutputStream) getBinaryOutputStream.invoke(blob, null);
-        try {
-            int read;
-            byte[] buf = new byte[8192];
-            while ((read = in.read(buf, 0, buf.length)) > -1) {
-                out.write(buf, 0, read);
-            }
-        } finally {
-            try {
-                out.flush();
-            } catch (IOException ioe) {
-            }
-            out.close();
-        }
-        Method close = blobClass.getMethod("close", new Class[0]);
-        close.invoke(blob, null);
-        return (Blob) blob;
-    }
-
-    /**
-     * Frees a temporary oracle.sql.BLOB instance via reflection.
-     */
-    protected void freeTemporaryBlob(Object blob) throws Exception {
-        // blob.freeTemporary();
-        Method freeTemporary = blobClass.getMethod("freeTemporary", new Class[0]);
-        freeTemporary.invoke(blob, null);
-    }
-
-    //--------------------------------------------------------< inner classes >
-    class OracleBLOBStore extends DbBLOBStore {
-        /**
-         * {@inheritDoc}
-         */
-        public synchronized void put(String blobId, InputStream in, long size)
-                throws Exception {
-            PreparedStatement stmt = blobSelectExist;
-            Blob blob = null;
-            try {
-                stmt.setString(1, blobId);
-                stmt.execute();
-                ResultSet rs = stmt.getResultSet();
-                // a BLOB exists if the result has at least one entry
-                boolean exists = rs.next();
-                resetStatement(stmt);
-                closeResultSet(rs);
-
-                stmt = (exists) ? blobUpdate : blobInsert;
-
-                blob = createTemporaryBlob(in);
-                stmt.setBlob(1, blob);
-                stmt.setString(2, blobId);
-                stmt.executeUpdate();
-            } finally {
-                resetStatement(stmt);
-                if (blob != null) {
-                    try {
-                        freeTemporaryBlob(blob);
-                    } catch (Exception e1) {
-                    }
-                }
-            }
-        }
-    }
-}
+ * Legacy class kept for backward compatibility reasons.
+  * @deprecated use {@link org.apache.jackrabbit.core.persistence.db.OraclePersistenceManager}
+  *             instead.
+  */
+public class OraclePersistenceManager
+        extends org.apache.jackrabbit.core.persistence.db.OraclePersistenceManager {
+}

INS43 INS65 INS65 INS40 UPD66 MOV66 UPD66 MOV66 MOV65 UPD66 MOV66 INS40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL45 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL31 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL40 DEL42 DEL67 DEL65 DEL40 DEL42 DEL67 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL48 DEL21 DEL42 DEL38 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL42 DEL33 DEL32 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL42 DEL33 DEL32 DEL14 DEL7 DEL21 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL40 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL36 DEL42 DEL42 DEL16 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL7 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL40 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL36 DEL42 DEL42 DEL16 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL7 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL36 DEL42 DEL42 DEL16 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL7 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL38 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL27 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL38 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL57 DEL40 DEL40 DEL4 DEL3 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL42 DEL43 DEL85 DEL5 DEL42 DEL40 DEL42 DEL4 DEL3 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL40 DEL4 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL34 DEL40 DEL32 DEL7 DEL36 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL43 DEL65 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL36 DEL42 DEL42 DEL16 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL55