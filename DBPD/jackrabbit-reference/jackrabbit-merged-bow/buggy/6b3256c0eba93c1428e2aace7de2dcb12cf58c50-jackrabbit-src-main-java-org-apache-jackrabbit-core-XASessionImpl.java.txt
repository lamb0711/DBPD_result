Locking and XA
- Introduce internal XA resources
- Add rollback thread that runs when transaction timeout has expired
- Make lock's live attribute transaction-aware
- Make NodeImpl's internalSetProperty protected again 



git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@365558 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.lock.TxLockManager;
-import org.apache.jackrabbit.core.lock.SharedLockManager;
-import org.apache.jackrabbit.core.state.ChangeLog;
-import org.apache.jackrabbit.core.state.TransactionalItemStateManager;
+import org.apache.jackrabbit.core.lock.XALockManager;
+import org.apache.jackrabbit.core.lock.LockManagerImpl;
+import org.apache.jackrabbit.core.state.XAItemStateManager;
+import org.apache.jackrabbit.core.state.SessionItemStateManager;
+import org.apache.jackrabbit.core.state.SharedItemStateManager;
-     * Known attribute name.
+     * Default transaction timeout, in seconds.
-    private static final String ATTRIBUTE_CHANGE_LOG = "ChangeLog";
-
-    /**
-     * Known attribute name.
-     */
-    private static final String ATTRIBUTE_LOCK_MANAGER = "LockManager";
+    private static final int DEFAULT_TX_TIMEOUT = 5;
+     * List of transactional resources.
+     */
+    private InternalXAResource[] txResources;
+
+    /**
+     * Session-local lock manager.
+     */
+    private LockManager lockMgr;
+
+    /**
+
+        txResources = new InternalXAResource[] {
+            (XAItemStateManager) wsp.getItemStateManager(),
+            (XALockManager) getLockManager()
+        };
+
+        txResources = new InternalXAResource[] {
+            (XAItemStateManager) wsp.getItemStateManager(),
+            (XALockManager) getLockManager()
+        };
+    /**
+     * {@inheritDoc}
+     */
+    protected WorkspaceImpl createWorkspaceInstance(WorkspaceConfig wspConfig,
+                                                    SharedItemStateManager stateMgr,
+                                                    RepositoryImpl rep,
+                                                    SessionImpl session) {
+        return new XAWorkspace(wspConfig, stateMgr, rep, session);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public LockManager getLockManager() throws RepositoryException {
+        if (lockMgr == null) {
+            LockManagerImpl lockMgr = (LockManagerImpl) wsp.getLockManager();
+            this.lockMgr = new XALockManager(this, lockMgr);
+        }
+        return lockMgr;
+    }
-    public int getTransactionTimeout() throws XAException {
-        return txTimeout;
+    public int getTransactionTimeout() {
+        return txTimeout == 0 ? DEFAULT_TX_TIMEOUT : txTimeout;
-    public boolean setTransactionTimeout(int seconds) throws XAException {
+    public boolean setTransactionTimeout(int seconds) {
-
-     * Create a global transaction.
-     *
+     * Create a new transaction context.
-     * @return transaction
+     * @return transaction context
-        TransactionContext tx = new TransactionContext();
+        TransactionContext tx = new TransactionContext(txResources, getTransactionTimeout());
-
-        if (flags == TMSUCCESS) {
-            disassociate();
-        } else if (flags == TMFAIL) {
-            disassociate();
-        } else if (flags == TMSUSPEND) {
-            disassociate();
+        if (flags == TMSUCCESS || flags == TMFAIL || flags == TMSUSPEND) {
+            associate(null);
-    public synchronized int prepare(Xid xid) throws XAException {
+    public int prepare(Xid xid) throws XAException {
-
-        TransactionalItemStateManager stateMgr = wsp.getItemStateManager();
-        stateMgr.setChangeLog(getChangeLog(tx), true);
-
-        try {
-            // 1. Prepare state manager
-            try {
-                stateMgr.prepare();
-            } catch (TransactionException e) {
-                throw new ExtendedXAException(XAException.XA_RBOTHER, e);
-            }
-
-            // 2. Prepare lock manager
-            try {
-                TxLockManager lockMgr = getTxLockManager(tx);
-                if (lockMgr != null) {
-                    lockMgr.prepare();
-                }
-            } catch (TransactionException e) {
-                stateMgr.rollback();
-                throw new ExtendedXAException(XAException.XA_RBOTHER, e);
-            }
-            return XA_OK;
-
-        } finally {
-            stateMgr.setChangeLog(null, true);
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void rollback(Xid xid) throws XAException {
-        TransactionContext tx = (TransactionContext) txGlobal.get(xid);
-        if (tx == null) {
-            throw new XAException(XAException.XAER_NOTA);
-        }
-
-        TransactionalItemStateManager stateMgr = wsp.getItemStateManager();
-        stateMgr.setChangeLog(getChangeLog(tx), true);
-
-        try {
-            // 1. Rollback changes on lock manager
-            TxLockManager lockMgr = getTxLockManager(tx);
-            if (lockMgr != null) {
-                lockMgr.rollback();
-            }
-
-            // 2. Rollback changes on state manager
-            stateMgr.rollback();
-
-        } finally {
-            stateMgr.setChangeLog(null, true);
-        }
+        tx.prepare();
+        return XA_OK;
-
-        TransactionalItemStateManager stateMgr = wsp.getItemStateManager();
-        stateMgr.setChangeLog(getChangeLog(tx), true);
-
-        TxLockManager lockMgr = getTxLockManager(tx);
-
-        try {
-            // 1. Commit changes on state manager
-            try {
-                stateMgr.commit();
-            } catch (TransactionException e) {
-                if (lockMgr != null) {
-                    lockMgr.rollback();
-                }
-                throw new ExtendedXAException(XAException.XA_RBOTHER, e);
-            }
-
-            // 2. Commit changes on lock manager
-            if (lockMgr != null) {
-                lockMgr.commit();
-            }
-        } finally {
-            stateMgr.setChangeLog(null, true);
+        if (onePhase) {
+            tx.prepare();
+        tx.commit();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void rollback(Xid xid) throws XAException {
+        TransactionContext tx = (TransactionContext) txGlobal.get(xid);
+        if (tx == null) {
+            throw new XAException(XAException.XAER_NOTA);
+        }
+        tx.rollback();
-    void associate(TransactionContext tx) {
+    public synchronized void associate(TransactionContext tx) {
-        ChangeLog txLog = getChangeLog(tx);
-        if (txLog == null) {
-            txLog = new ChangeLog();
-            tx.setAttribute(ATTRIBUTE_CHANGE_LOG, txLog);
+        for (int i = 0; i < txResources.length; i++) {
+            InternalXAResource txResource = txResources[i];
+            txResource.associate(tx);
-        wsp.getItemStateManager().setChangeLog(txLog, false);
-    boolean isAssociated() {
+    private boolean isAssociated() {
-     * Disassociate this session from a global transaction. Internally,
-     * clear the transaction object.
-     */
-    void disassociate() {
-        tx = null;
-
-        wsp.getItemStateManager().setChangeLog(null, false);
-    }
-
-    /**
-
-    /**
-     * Internal XAException derived class that allows passing a base exception
-     * in its constructor.
-     */
-    static class ExtendedXAException extends XAException {
-
-        /**
-         * Create an XAException with a given error code and a root cause.
-         * @param errcode The error code identifying the exception.
-         * @param cause The cause (which is saved for later retrieval by the
-         *              {@link #getCause()} method).  (A <tt>null</tt> value is
-         *              permitted, and indicates that the cause is nonexistent
-         *              or unknown.)
-         */
-        public ExtendedXAException(int errcode, Throwable cause) {
-            super(errcode);
-
-            if (cause != null) {
-                initCause(cause);
-            }
-        }
-    }
-
-    //-------------------------------------------------------< locking support >
-
-    /**
-     * Return the lock manager for this session. In a transactional environment,
-     * this is a session-local object that records locking/unlocking operations
-     * until final commit.
-     *
-     * @return lock manager for this session
-     * @throws javax.jcr.RepositoryException if an error occurs
-     */
-    public LockManager getLockManager() throws RepositoryException {
-        if (tx != null) {
-            TxLockManager lockMgr = (TxLockManager) tx.getAttribute(ATTRIBUTE_LOCK_MANAGER);
-            if (lockMgr == null) {
-                lockMgr = new TxLockManager(
-                        (SharedLockManager) super.getLockManager());
-                tx.setAttribute(ATTRIBUTE_LOCK_MANAGER, lockMgr);
-            }
-            return lockMgr;
-        }
-        return super.getLockManager();
-    }
-
-    /**
-     * Return the transactional change log for this session.
-     *
-     * @param tx transactional context
-     * @return change log for this session, may be <code>null</code>
-     */
-    private static ChangeLog getChangeLog(TransactionContext tx) {
-        return (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
-    }
-
-    /**
-     * Return the transactional lock manager for this session. Returns
-     * <code>null</code> if no lock manager has been used yet.
-     *
-     * @return lock manager for this session
-     */
-    private static TxLockManager getTxLockManager(TransactionContext tx) {
-        return (TxLockManager) tx.getAttribute(ATTRIBUTE_LOCK_MANAGER);
-    }

INS26 MOV23 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 UPD40 INS40 INS23 INS31 INS31 INS31 INS39 INS5 INS29 INS83 INS43 INS59 MOV29 UPD83 UPD43 INS42 INS44 INS44 INS44 INS44 INS8 INS29 MOV43 UPD42 MOV43 INS8 INS29 MOV83 UPD39 MOV39 INS42 INS8 MOV29 INS83 INS39 INS42 MOV44 MOV43 INS8 MOV29 INS83 UPD42 MOV44 MOV44 MOV43 MOV29 INS83 UPD42 MOV44 MOV43 MOV29 INS83 UPD83 MOV83 INS39 UPD42 MOV42 MOV44 INS8 INS83 UPD42 INS34 INS43 INS85 UPD42 INS65 UPD42 MOV42 INS42 INS21 INS21 UPD42 UPD43 MOV43 UPD42 MOV42 INS43 INS42 INS43 INS42 UPD43 MOV43 UPD42 MOV42 INS41 INS65 INS25 MOV41 INS65 INS41 MOV25 MOV60 MOV25 MOV21 MOV41 MOV60 MOV25 MOV60 MOV25 MOV21 INS24 UPD66 UPD66 UPD42 MOV42 INS66 INS7 INS7 UPD42 UPD42 MOV42 INS42 UPD42 INS14 INS65 MOV27 INS8 INS65 INS16 UPD66 UPD66 MOV43 INS27 INS42 INS32 INS32 INS58 INS27 INS37 INS8 INS42 INS3 INS42 INS3 UPD43 MOV43 UPD42 MOV42 INS42 INS42 INS42 MOV60 INS21 INS27 INS42 INS42 INS27 MOV27 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS39 INS59 UPD42 MOV42 INS40 INS42 MOV60 MOV21 INS5 INS4 INS5 INS4 UPD42 UPD43 INS7 UPD42 MOV42 INS34 MOV43 INS42 INS32 MOV27 MOV27 INS42 INS34 UPD43 INS43 INS85 INS11 INS11 INS43 INS85 INS11 INS11 UPD42 UPD42 INS11 INS22 INS14 INS42 UPD42 INS33 UPD42 UPD42 INS42 INS2 UPD42 UPD42 UPD42 INS42 INS43 MOV32 INS43 INS32 INS42 INS43 MOV32 INS43 INS32 INS43 INS32 INS52 INS42 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL43 DEL45 DEL83 DEL83 DEL43 DEL45 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL44 DEL42 DEL43 DEL40 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL44 DEL42 DEL42 DEL32 DEL21 DEL40 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL33 DEL9 DEL32 DEL21 DEL8 DEL54 DEL8 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL32 DEL21 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL33 DEL9 DEL32 DEL21 DEL8 DEL54 DEL8 DEL83 DEL39 DEL42 DEL43 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL66 DEL66 DEL65 DEL29 DEL42 DEL33 DEL7 DEL21 DEL32 DEL42 DEL33 DEL9 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL40 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL33 DEL9 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL42 DEL68 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL55 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL40 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL48 DEL11 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL48 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31