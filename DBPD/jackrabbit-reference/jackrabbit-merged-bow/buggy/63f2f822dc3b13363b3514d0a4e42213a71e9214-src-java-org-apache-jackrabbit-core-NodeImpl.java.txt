grouped frequently used constants scattered around in various source files into Constants interface

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153503 13f79535-47bb-0310-9956-ffa450edef68

-        if (nt.getQName().equals(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+        if (nt.getQName().equals(MIX_REFERENCEABLE)) {
-            if (name.equals(PROPNAME_UUID)) {
+            if (name.equals(JCR_UUID)) {
-	} else if (nt.getQName().equals(NodeTypeRegistry.MIX_VERSIONABLE)) {
+	} else if (nt.getQName().equals(MIX_VERSIONABLE)) {
-	    VersionHistory hist = rep.getVersionManager().getOrCreateVersionHistory(this);
-	    if (name.equals(InternalVersion.PROPNAME_VERSION_HISTORY)) {
+	    VersionHistory hist = session.getVersionManager().getOrCreateVersionHistory(this);
+	    if (name.equals(JCR_VERSIONHISTORY)) {
-	    } else if (name.equals(InternalVersion.PROPNAME_BASE_VERSION)) {
+	    } else if (name.equals(JCR_BASEVERSION)) {
-	    } else if (name.equals(InternalVersion.PROPNAME_IS_CHECKED_OUT)) {
+	    } else if (name.equals(JCR_ISCHECKEDOUT)) {
-	    } else if (name.equals(InternalVersion.PROPNAME_PREDECESSORS)) {
+	    } else if (name.equals(JCR_PREDECESSORS)) {
-        } else if (nt.getQName().equals(NodeTypeRegistry.NT_HIERARCHYNODE)) {
+        } else if (nt.getQName().equals(NT_HIERARCHYNODE)) {
-            if (name.equals(PROPNAME_CREATED)) {
+            if (name.equals(JCR_CREATED)) {
-        } else if (nt.getQName().equals(NodeTypeRegistry.NT_RESOURCE)) {
+        } else if (nt.getQName().equals(NT_RESOURCE)) {
-            if (name.equals(PROPNAME_LAST_MODIFIED)) {
+            if (name.equals(JCR_LASTMODIFIED)) {
-        } else if (nt.getQName().equals(NodeTypeRegistry.NT_VERSION)) {
+        } else if (nt.getQName().equals(NT_VERSION)) {
-            if (name.equals(PROPNAME_CREATED)) {
+            if (name.equals(JCR_CREATED)) {
-        } else if (nt.getQName().equals(NodeTypeRegistry.NT_BASE)) {
+        } else if (nt.getQName().equals(NT_BASE)) {
-            if (name.equals(PROPNAME_PRIMARYTYPE)) {
+            if (name.equals(JCR_PRIMARYTYPE)) {
-            } else if (name.equals(PROPNAME_MIXINTYPES)) {
+            } else if (name.equals(JCR_MIXINTYPES)) {
-        if (thisState.hasPropertyEntry(PROPNAME_MIXINTYPES)) {
-            prop = (PropertyImpl) itemMgr.getItem(new PropertyId(thisState.getUUID(), PROPNAME_MIXINTYPES));
+        if (thisState.hasPropertyEntry(JCR_MIXINTYPES)) {
+            prop = (PropertyImpl) itemMgr.getItem(new PropertyId(thisState.getUUID(), JCR_MIXINTYPES));
-            PropertyDefImpl def = getApplicablePropertyDef(PROPNAME_MIXINTYPES, PropertyType.NAME, true);
-            prop = createChildProperty(PROPNAME_MIXINTYPES, PropertyType.NAME, def);
+            PropertyDefImpl def = getApplicablePropertyDef(JCR_MIXINTYPES, PropertyType.NAME, true);
+            prop = createChildProperty(JCR_MIXINTYPES, PropertyType.NAME, def);
-            removeChildProperty(PROPNAME_MIXINTYPES);
+            removeChildProperty(JCR_MIXINTYPES);
-        if (NodeTypeRegistry.MIX_REFERENCEABLE.equals(ntName)) {
+        if (MIX_REFERENCEABLE.equals(ntName)) {
-        if (!isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+        if (!isNodeType(MIX_REFERENCEABLE)) {
-        while (!m1.isRepositoryRoot() && !m1.isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+        while (!m1.isRepositoryRoot() && !m1.isNodeType(MIX_REFERENCEABLE)) {
-        if (hasProperty(ItemImpl.PROPNAME_MERGE_FAILED) && getProperty(ItemImpl.PROPNAME_MERGE_FAILED).getValues().length > 0) {
+        if (hasProperty(JCR_MERGEFAILED) && getProperty(JCR_MERGEFAILED).getValues().length > 0) {
-        Version v = session.versionMgr.checkin(this);
-        Property prop = internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(false));
+        Version v = session.getVersionManager().checkin(this);
+        Property prop = internalSetProperty(JCR_ISCHECKEDOUT, InternalValue.create(false));
-        prop = internalSetProperty(VersionManager.PROPNAME_BASE_VERSION, InternalValue.create(new UUID(v.getUUID())));
+        prop = internalSetProperty(JCR_BASEVERSION, InternalValue.create(new UUID(v.getUUID())));
-        prop = internalSetProperty(VersionManager.PROPNAME_PREDECESSORS, new InternalValue[0]);
+        prop = internalSetProperty(JCR_PREDECESSORS, new InternalValue[0]);
-        Property prop = internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(true));
+        Property prop = internalSetProperty(JCR_ISCHECKEDOUT, InternalValue.create(true));
-        prop = internalSetProperty(VersionManager.PROPNAME_PREDECESSORS,
+        prop = internalSetProperty(JCR_PREDECESSORS,
-        return (VersionHistory) getProperty(VersionManager.PROPNAME_VERSION_HISTORY).getNode();
+        return (VersionHistory) getProperty(JCR_VERSIONHISTORY).getNode();
-        return (Version) getProperty(VersionManager.PROPNAME_BASE_VERSION).getNode();
+        return (Version) getProperty(JCR_BASEVERSION).getNode();
-        if (!isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
+        if (!isNodeType(MIX_VERSIONABLE)) {
-        while (!m1.isRepositoryRoot() && !m1.isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+        while (!m1.isRepositoryRoot() && !m1.isNodeType(MIX_REFERENCEABLE)) {
-        if (!isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
+        if (!isNodeType(MIX_VERSIONABLE)) {
-        if (!srcNode.isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
+        if (!srcNode.isNodeType(MIX_VERSIONABLE)) {
-                List values = hasProperty(ItemImpl.PROPNAME_MERGE_FAILED)
-                        ? Arrays.asList(getProperty(ItemImpl.PROPNAME_MERGE_FAILED).getValues())
+                List values = hasProperty(JCR_MERGEFAILED)
+                        ? Arrays.asList(getProperty(JCR_MERGEFAILED).getValues())
-                setProperty(ItemImpl.PROPNAME_MERGE_FAILED, (Value[]) values.toArray(new Value[values.size()]));
+                setProperty(JCR_MERGEFAILED, (Value[]) values.toArray(new Value[values.size()]));
-        while (!node.hasProperty(VersionManager.PROPNAME_IS_CHECKED_OUT)) {
+        while (!node.hasProperty(JCR_ISCHECKEDOUT)) {
-        return node.getProperty(VersionManager.PROPNAME_IS_CHECKED_OUT).getBoolean();
+        return node.getProperty(JCR_ISCHECKEDOUT).getBoolean();
-        internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(true));
+        internalSetProperty(JCR_ISCHECKEDOUT, InternalValue.create(true));
-        internalSetProperty(VersionManager.PROPNAME_BASE_VERSION, InternalValue.create(new UUID(version.getId())));
+        internalSetProperty(JCR_BASEVERSION, InternalValue.create(new UUID(version.getId())));
-        internalSetProperty(VersionManager.PROPNAME_PREDECESSORS, new InternalValue[0], PropertyType.REFERENCE);
+        internalSetProperty(JCR_PREDECESSORS, new InternalValue[0], PropertyType.REFERENCE);
-        internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(false));
+        internalSetProperty(JCR_ISCHECKEDOUT, InternalValue.create(false));
-        if (isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+        if (isNodeType(MIX_REFERENCEABLE)) {
-            if (prop.getQName().equals(VersionManager.PROPNAME_VERSION_HISTORY)) {
+            if (prop.getQName().equals(JCR_VERSIONHISTORY)) {
-            } else if (prop.getQName().equals(VersionManager.PROPNAME_PREDECESSORS)) {
+            } else if (prop.getQName().equals(JCR_PREDECESSORS)) {
-        if (!isNodeType(NodeTypeRegistry.MIX_LOCKABLE)) {
+        if (!isNodeType(MIX_LOCKABLE)) {

INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 INS42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40