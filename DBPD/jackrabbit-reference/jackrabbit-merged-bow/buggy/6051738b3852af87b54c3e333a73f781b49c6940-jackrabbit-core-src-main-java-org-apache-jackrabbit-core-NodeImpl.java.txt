JCR-2740 On missing child node, automatically remove the entry

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1040601 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.ItemStateManager;
-     * @deprecated use #renameChildNode(NodeId, Name, boolean) 
+     * @deprecated use #renameChildNode(NodeId, Name, boolean)
-        NodeImpl childNode = itemMgr.getNode(childId, getNodeId());
-        childNode.onRemove(getNodeId());
+        try {
+            NodeImpl childNode = itemMgr.getNode(childId, getNodeId());
+            childNode.onRemove(getNodeId());
+        } catch (ItemNotFoundException e) {
+            boolean ignoreError = false;
+            if (sessionContext.getSessionImpl().autoFixCorruptions()) {
+                // it might be an access right problem
+                // we need to check if the item doesn't exist in the ism
+                ItemStateManager ism = sessionContext.getItemStateManager();
+                if (!ism.hasItemState(childId)) {
+                    log.warn("Node " + childId + " not found, ignore", e);
+                    ignoreError = true;
+                }
+            }
+            if (!ignoreError) {
+                throw e;
+            }
+        }
-                NodeImpl childNode = itemMgr.getNode(childId, getNodeId());
-                childNode.onRemove(thisState.getNodeId());
-                // remove the child node entry
+                try {
+                    NodeImpl childNode = itemMgr.getNode(childId, getNodeId());
+                    childNode.onRemove(thisState.getNodeId());
+                    // remove the child node entry
+                } catch (ItemNotFoundException e) {
+                    boolean ignoreError = false;
+                    if (parentId != null && sessionContext.getSessionImpl().autoFixCorruptions()) {
+                        // it might be an access right problem
+                        // we need to check if the item doesn't exist in the ism
+                        ItemStateManager ism = sessionContext.getItemStateManager();
+                        if (!ism.hasItemState(childId)) {
+                            log.warn("Child named " + entry.getName() + " (index " + entry.getIndex() + ", " +
+                                    "node id " + childId + ") " +
+                                    "not found when trying to remove " + getPath() + " " +
+                                    "(node id " + getNodeId() + ") - ignored", e);
+                            ignoreError = true;
+                        }
+                    }
+                    if (!ignoreError) {
+                        throw e;
+                    }
+                }
-        
+
-                return new LazyItemIterator(itemMgr, idList);
+                return new LazyItemIterator(sessionContext, idList);

INS26 INS40 INS54 UPD66 INS8 INS12 MOV60 MOV21 INS44 INS8 INS43 INS42 INS60 INS25 INS25 INS8 INS42 INS39 INS59 INS32 INS8 INS38 INS8 MOV60 MOV60 INS54 MOV21 INS42 INS9 INS32 INS42 INS60 INS25 INS42 INS53 MOV8 INS12 INS42 INS42 INS43 INS59 INS38 INS8 INS42 INS44 INS8 UPD42 INS42 INS42 INS32 INS32 INS21 INS21 INS43 INS42 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS39 INS59 INS27 INS8 INS38 INS8 INS42 INS42 INS27 INS42 INS42 INS9 INS42 INS9 INS27 INS32 INS60 INS25 INS42 INS53 INS45 INS42 INS45 INS42 INS33 INS32 INS42 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS27 INS42 INS42 INS9 INS45 INS32 INS45 INS32 INS45 INS45 INS42 INS45 INS45 INS32 INS45 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42