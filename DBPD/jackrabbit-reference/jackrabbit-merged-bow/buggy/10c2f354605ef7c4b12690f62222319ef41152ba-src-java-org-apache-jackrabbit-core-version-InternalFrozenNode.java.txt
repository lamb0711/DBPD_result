- improved versioning / virtual node behaviour
  fixes jira issues: JCR-20, JCR-22 and JCR-23

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@111518 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.uuid.UUID;
+import java.util.HashSet;
+import java.util.Set;
+    private static final boolean FREEZEMODE_CLONE = true;
+
+     * uuid of this node
+     */
+    private String uuid;
+
+    /**
+
-            if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_UUID)) {
-                // special property
-                frozenUUID = node.getPropertyValue(VersionManager.PROPNAME_FROZEN_UUID).internalValue().toString();
-            } else if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE)) {
-                // special property
-                frozenPrimaryType = (QName) node.getPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE).internalValue();
-            } else if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES)) {
-                // special property
-                InternalValue[] values = node.getPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES);
-                if (values == null) {
-                    frozenMixinTypes = new QName[0];
-                } else {
-                    frozenMixinTypes = new QName[values.length];
-                    for (int j = 0; j < values.length; j++) {
-                        frozenMixinTypes[j] = (QName) values[j].internalValue();
+            if (FREEZEMODE_CLONE) {
+                if (prop.getName().equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
+                    frozenPrimaryType = (QName) node.getPropertyValue(prop.getName()).internalValue();
+                } else if (prop.getName().equals(ItemImpl.PROPNAME_UUID)) {
+                    frozenUUID = node.getPropertyValue(prop.getName()).toString();
+                } else if (prop.getName().equals(ItemImpl.PROPNAME_MIXINTYPES)) {
+                    InternalValue[] values = node.getPropertyValues(prop.getName());
+                    if (values == null) {
+                        frozenMixinTypes = new QName[0];
+                    } else {
+                        frozenMixinTypes = new QName[values.length];
+                        for (int j = 0; j < values.length; j++) {
+                            frozenMixinTypes[j] = (QName) values[j].internalValue();
+                        }
+                } else {
+                    propList.add(prop);
-            } else if (prop.getName().equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
-                // ignore
-            } else if (prop.getName().equals(ItemImpl.PROPNAME_UUID)) {
-                // ignore
+
-                propList.add(prop);
+                if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_UUID)) {
+                    // special property
+                    frozenUUID = node.getPropertyValue(VersionManager.PROPNAME_FROZEN_UUID).internalValue().toString();
+                } else if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE)) {
+                    // special property
+                    frozenPrimaryType = (QName) node.getPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE).internalValue();
+                } else if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES)) {
+                    // special property
+                    InternalValue[] values = node.getPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES);
+                    if (values == null) {
+                        frozenMixinTypes = new QName[0];
+                    } else {
+                        frozenMixinTypes = new QName[values.length];
+                        for (int j = 0; j < values.length; j++) {
+                            frozenMixinTypes[j] = (QName) values[j].internalValue();
+                        }
+                    }
+                } else if (prop.getName().equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
+                    // ignore
+                } else if (prop.getName().equals(ItemImpl.PROPNAME_UUID)) {
+                    // ignore
+                } else {
+                    propList.add(prop);
+                }
+    public String getInternalUUID() {
+        return node.getUUID();
+    }
+
-        // create new node
-        PersistentNode node = parent.addNode(name, NodeTypeRegistry.NT_UNSTRUCTURED);
-
-        // initialize the internal properties
-        if (src.isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
-            node.setPropertyValue(VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(src.getUUID()));
-        }
-
-        node.setPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE,
-                InternalValue.create(((NodeTypeImpl) src.getPrimaryNodeType()).getQName()));
-
-        if (src.hasProperty(NodeImpl.PROPNAME_MIXINTYPES)) {
+        PersistentNode node;
+        if (FREEZEMODE_CLONE) {
+            // identiycopy
+            // create new node
-            InternalValue[] ivalues = new InternalValue[mixins.length];
+            QName[] mixinNames = new QName[mixins.length];
-                ivalues[i] = InternalValue.create(((NodeTypeImpl) mixins[i]).getQName());
+                mixinNames[i]=((NodeTypeImpl) mixins[i]).getQName();
-            node.setPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, ivalues);
+            node = parent.addNode(name, ((NodeTypeImpl) src.getPrimaryNodeType()).getQName());
+            node.setMixinNodeTypes(mixinNames);
+
+        } else {
+            // emulated
+            // create new node
+            node = parent.addNode(name, NodeTypeRegistry.NT_UNSTRUCTURED);
+
+            // initialize the internal properties
+            if (src.isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+                node.setPropertyValue(VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(src.getUUID()));
+            }
+
+            node.setPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE,
+                    InternalValue.create(((NodeTypeImpl) src.getPrimaryNodeType()).getQName()));
+
+            if (src.hasProperty(NodeImpl.PROPNAME_MIXINTYPES)) {
+                NodeType[] mixins = src.getMixinNodeTypes();
+                InternalValue[] ivalues = new InternalValue[mixins.length];
+                for (int i = 0; i < mixins.length; i++) {
+                    ivalues[i] = InternalValue.create(((NodeTypeImpl) mixins[i]).getQName());
+                }
+                node.setPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, ivalues);
+            }
+
-                            PersistentNode newChild = node.addNode(child.getQName(), NodeTypeRegistry.NT_UNSTRUCTURED);
+                            PersistentNode newChild = node.addNode(child.getQName(), NodeTypeRegistry.NT_FROZEN_VERSIONABLE_CHILD);
-                                    InternalValue.create(child.getVersionHistory().getUUID()));
+                                    InternalValue.create(UUID.fromString(child.getVersionHistory().getUUID())));
-                                    InternalValue.create(child.getBaseVersion().getUUID()));
+                                    InternalValue.create(UUID.fromString(child.getBaseVersion().getUUID())));
+                            break;
-                        // else ignore
-                        break;
+                        // else copy

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS42 INS9 INS65 INS42 INS42 INS42 INS41 INS25 INS66 INS8 INS32 INS42 INS8 INS8 MOV60 INS25 INS42 INS42 INS60 INS60 INS24 INS21 INS21 INS21 MOV25 MOV21 MOV25 INS42 INS8 MOV8 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS32 INS7 INS25 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 MOV10 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS42 INS32 INS32 INS42 INS40 INS21 INS32 INS8 INS25 INS43 INS85 INS2 INS32 INS36 INS42 INS42 INS42 INS7 INS32 INS42 INS40 INS21 INS32 INS8 INS8 INS42 INS42 INS42 INS36 INS42 INS11 INS10 INS42 INS11 INS42 INS42 INS7 INS32 INS42 INS40 INS60 INS25 INS21 INS11 INS43 INS32 INS32 INS32 INS43 INS32 INS42 INS32 INS42 INS42 INS5 INS59 INS27 INS8 INS8 INS32 INS43 INS2 INS42 INS42 INS42 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 MOV32 INS42 INS32 INS42 INS32 INS42 INS43 INS85 INS42 INS32 INS42 INS33 INS21 INS21 INS24 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS7 INS7 INS58 INS27 INS37 INS8 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS5 INS34 INS5 INS40 INS42 INS34 INS7 INS43 INS85 INS43 INS85 INS2 INS11 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS2 INS42 INS42 INS42 DEL40 DEL40 DEL10