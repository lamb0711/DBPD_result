JCR-3816: [aws-ext]S3DS not able update lastModified of record > 5GB
JCR-3817: [jackrabbit-aws-ext] Performance of operation degrades while running DS GC

Applying patch from Shashank Gupta

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1632482 13f79535-47bb-0310-9956-ffa450edef68

+ *     &lt;param name="{@link #setTouchAsync(boolean) touchAsync}" value="false"/>
-        MultiDataStoreAware, AsyncUploadCallback {
+        MultiDataStoreAware, AsyncUploadCallback, AsyncTouchCallback {
+    
+    /**
+     * In memory map to hold in-progress asynchronous touch. Once touch is
+     * successful corresponding entry is flushed from the map.
+     */
+    protected final Map<DataIdentifier, Long> asyncTouchCache = new ConcurrentHashMap<DataIdentifier, Long>(5);
+    
+    /**
+     * Flag to indicate if lastModified is updated asynchronously.
+     */
+    private boolean touchAsync = false;
-        boolean touch = minModifiedDate > 0 ? true : false;
-        synchronized (this) {
-            try {
-                if (asyncWriteCache.hasEntry(fileName, touch)) {
-                    usesIdentifier(identifier);
-                    return new CachingDataRecord(this, identifier);
-                } else if (cache.getFileIfStored(fileName) != null) {
-                    if (touch) {
-                        backend.exists(identifier, touch);
-                    }
-                    usesIdentifier(identifier);
-                    return new CachingDataRecord(this, identifier);
-                } else if (backend.exists(identifier, touch)) {
-                    usesIdentifier(identifier);
-                    return new CachingDataRecord(this, identifier);
-                }
-
-            } catch (IOException ioe) {
-                throw new DataStoreException("error in getting record ["
-                    + identifier + "]", ioe);
+        try {
+            if (asyncWriteCache.hasEntry(fileName, minModifiedDate > 0)) {
+                LOG.debug("[{}] record retrieved from asyncUploadmap",
+                    identifier);
+                usesIdentifier(identifier);
+                return new CachingDataRecord(this, identifier);
+            } else if (cache.getFileIfStored(fileName) != null
+                || backend.exists(identifier)) {
+                LOG.debug("[{}] record retrieved from local cache or backend",
+                    identifier);
+                touchInternal(identifier);
+                usesIdentifier(identifier);
+                return new CachingDataRecord(this, identifier);
+
+        } catch (IOException ioe) {
+            throw new DataStoreException("error in getting record ["
+                + identifier + "]", ioe);
-
+    
-     * @param identifier
-     *            identifier of record.
+     * @param identifier identifier of record.
-        boolean touch = minModifiedDate > 0 ? true : false;
-        synchronized (this) {
-            try {
-                if (asyncWriteCache.hasEntry(fileName, touch)
-                    || backend.exists(identifier, touch)) {
-                    usesIdentifier(identifier);
-                    return new CachingDataRecord(this, identifier);
-                }
-            } catch (IOException ioe) {
-                throw new DataStoreException(ioe);
+        try {
+            if (asyncWriteCache.hasEntry(fileName, minModifiedDate > 0)) {
+                LOG.debug("[{}] record retrieved from asyncuploadmap",
+                    identifier);
+                usesIdentifier(identifier);
+                return new CachingDataRecord(this, identifier);
+            } else if (backend.exists(identifier)) {
+                LOG.debug("[{}] record retrieved from backend", identifier);
+                touchInternal(identifier);
+                usesIdentifier(identifier);
+                return new CachingDataRecord(this, identifier);
+        } catch (IOException ioe) {
+            throw new DataStoreException(ioe);
-                "identifier [{}]'s lastModified retrireved from AsyncUploadCache ",
-                identifier);
+                "identifier [{}], lastModified=[{}] retrireved from AsyncUploadCache ",
+                identifier, lastModified);
+        } else if (asyncTouchCache.get(identifier) != null) {
+            lastModified = asyncTouchCache.get(identifier);
+            LOG.debug(
+                "identifier [{}], lastModified=[{}] retrireved from asyncTouchCache ",
+                identifier, lastModified);
-            lastModified =  backend.getLastModified(identifier);
+            lastModified = backend.getLastModified(identifier);
+            LOG.debug(
+                "identifier [{}], lastModified=[{}] retrireved from backend ",
+                identifier, lastModified);
-        LOG.debug("identifier= [{}], lastModified=[{}]", identifier,
-            lastModified);
-            InputStream in = null;
-            InputStream cachedStream = null;
-            try {
-                in = backend.read(identifier);
-                cachedStream = cache.store(fileName, in);
-            } catch (IOException e) {
-                throw new DataStoreException("IO Exception: " + identifier, e);
-            } finally {
-                IOUtils.closeQuietly(in);
-                IOUtils.closeQuietly(cachedStream);
-            }
-            length = cache.getFileLength(fileName);
-            if (length != null) {
-                return length.longValue();
-            }
+            return backend.getLength(identifier);
-        return backend.getLength(identifier);
+            } else {
+                // async upload took lot of time.
+                // getRecord to touch if required.
+                getRecord(identifier);
+            // remove from failed upload map if any.
+            uploadRetryMap.remove(identifier);
+    
+    @Override
+    public void onSuccess(AsyncTouchResult result) {
+        asyncTouchCache.remove(result.getIdentifier());
+        LOG.debug(" Async Touch succeed. Removed [{}] from asyncTouchCache",
+            result.getIdentifier());
+
+    }
+    
+    @Override
+    public void onFailure(AsyncTouchResult result) {
+        LOG.warn(" Async Touch failed. Not removing [{}] from asyncTouchCache",
+            result.getIdentifier());
+        if (result.getException() != null) {
+            LOG.debug(" Async Touch failed. exception", result.getException());
+        }
+    }
+    
+    @Override
+    public void onAbort(AsyncTouchResult result) {
+        asyncTouchCache.remove(result.getIdentifier());
+        LOG.debug(" Async Touch aborted. Removed [{}] from asyncTouchCache",
+            result.getIdentifier());
+    }
+    
+    /**
+     * Method to confirm that identifier can be deleted from {@link Backend}
+     * 
+     * @param identifier
+     * @return
+     */
+    public boolean confirmDelete(DataIdentifier identifier) {
+        if (isInUse(identifier)) {
+            LOG.debug("identifier [{}] is inUse confirmDelete= false ",
+                identifier);
+            return false;
+        }
+
+        String fileName = getFileName(identifier);
+        long lastModified = asyncWriteCache.getLastModified(fileName);
+        if (lastModified != 0) {
+            LOG.debug(
+                "identifier [{}] is asyncWriteCache map confirmDelete= false ",
+                identifier);
+            return false;
+
+        }
+        if (asyncTouchCache.get(identifier) != null) {
+            LOG.debug(
+                "identifier [{}] is asyncTouchCache confirmDelete = false ",
+                identifier);
+            return false;
+        }
+
+        return true;
+    }
+    
+    /**
+     * Internal method to touch identifier in @link {@link Backend}. if
+     * {@link #touchAsync}, the record is updated asynchronously.
+     * 
+     * @param identifier
+     * @throws DataStoreException
+     */
+    private void touchInternal(DataIdentifier identifier)
+            throws DataStoreException {
+
+        if (touchAsync) {
+            Long lastModified = asyncTouchCache.put(identifier,
+                System.currentTimeMillis());
+
+            if (lastModified == null) {
+                LOG.debug("Async touching [{}] ", identifier);
+                backend.touchAsync(identifier, minModifiedDate, this);
+            } else {
+                LOG.debug( "Touched in asyncTouchMap [{}]", identifier);
+            }
+                
+        } else {
+            backend.touch(identifier, minModifiedDate);
+        }
+    }
+    
+    
+    
+
+    public void setTouchAsync(boolean touchAsync) {
+        this.touchAsync = touchAsync;
+    }

INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS39 INS59 MOV8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 MOV43 INS8 INS83 INS39 INS42 INS44 INS8 INS66 INS65 INS66 INS65 INS43 INS43 INS43 INS42 INS14 INS65 INS42 INS9 MOV60 MOV53 MOV54 INS25 MOV25 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS25 INS42 INS43 INS42 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS25 INS60 INS60 INS25 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS25 INS39 INS42 INS21 INS68 INS66 INS66 INS66 INS42 INS42 INS42 INS74 INS34 INS66 UPD66 MOV27 MOV8 INS25 INS8 INS42 INS32 INS32 INS42 INS32 INS27 INS8 INS42 INS32 INS32 INS66 INS65 INS42 INS42 INS32 INS8 INS43 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS9 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS42 INS42 INS8 INS8 INS7 INS42 INS69 INS43 INS43 INS43 MOV25 INS27 INS8 MOV8 MOV41 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS21 INS41 INS32 INS33 INS21 INS41 INS42 INS67 INS60 INS25 INS21 INS22 INS42 INS39 INS42 INS42 INS42 INS32 INS32 INS25 INS32 INS33 INS21 MOV21 INS21 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS32 INS9 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS52 INS42 INS42 INS42 INS42 MOV27 MOV21 INS27 MOV42 MOV42 MOV42 MOV27 INS21 INS32 MOV8 UPD45 INS42 INS42 INS42 INS42 INS7 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS42 MOV27 INS32 INS21 INS21 INS32 MOV42 MOV42 MOV42 INS21 INS21 INS42 INS32 UPD45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 UPD42 UPD42 INS45 MOV42 MOV42 MOV42 INS32 INS32 INS42 INS42 INS45 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 DEL42 DEL42 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL25 DEL39 DEL42 DEL9 DEL9 DEL16 DEL59 DEL60 DEL52 DEL51 DEL8 DEL42 DEL32 DEL42 DEL32 DEL27 DEL39 DEL42 DEL9 DEL9 DEL16 DEL59 DEL60 DEL52 DEL8 DEL51 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25