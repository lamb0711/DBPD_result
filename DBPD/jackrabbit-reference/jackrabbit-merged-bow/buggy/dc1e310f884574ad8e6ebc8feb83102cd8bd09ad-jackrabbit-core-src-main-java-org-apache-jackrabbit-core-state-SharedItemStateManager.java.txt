JCR-314: Fine grained locking in SharedItemStateManager

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@540944 13f79535-47bb-0310-9956-ffa450edef68

-import EDU.oswego.cs.dl.util.concurrent.ReadWriteLock;
-import EDU.oswego.cs.dl.util.concurrent.ReentrantWriterPreferenceReadWriteLock;
-    private final ItemStateReferenceCache cache;
+    private final ItemStateCache cache;
-     * JCR-447: deadlock might occur when this manager is still write-locked and events are dispatched.
-     */
-    private boolean noLockHack = false;
-
-    /**
-     * Read-/Write-Lock to synchronize access on this item state manager.
+     * The locking strategy.
-    private final ReadWriteLock rwLock =
-            new ReentrantWriterPreferenceReadWriteLock() {
-                /**
-                 * Allow reader when there is no active writer, or current
-                 * thread owns the write lock (reentrant).
-                 * <p/>
-                 * the 'noLockHack' is only temporary (hopefully)
-                 */
-                protected boolean allowReader() {
-                    return activeWriter_ == null
-                        || activeWriter_ == Thread.currentThread()
-                        || noLockHack;
-                }
-            };
+    private ISMLocking ismLocking;
+        this.ismLocking = new DefaultISMLocking();
-        this.noLockHack = noLockHack;
+        if (ismLocking instanceof DefaultISMLocking) {
+            ((DefaultISMLocking) ismLocking).setNoLockHack(noLockHack);
+        }
+    /**
+     * Sets a new locking strategy.
+     *
+     * @param ismLocking the locking strategy for this item state manager.
+     */
+    public void setISMLocking(ISMLocking ismLocking) {
+        if (ismLocking == null) {
+            throw new NullPointerException();
+        }
+        this.ismLocking = ismLocking;
+    }
+
-        acquireReadLock();
+        ISMLocking.ReadLock readLock = acquireReadLock(id);
-            rwLock.readLock().release();
+            readLock.release();
+        ISMLocking.ReadLock readLock;
-            acquireReadLock();
+            readLock = acquireReadLock(id);
-            rwLock.readLock().release();
+            readLock.release();
-        acquireReadLock();
+        ISMLocking.ReadLock readLock = acquireReadLock(id.getTargetId());
-            rwLock.readLock().release();
+            readLock.release();
+        ISMLocking.ReadLock readLock;
-            acquireReadLock();
+            readLock = acquireReadLock(id.getTargetId());
-            rwLock.readLock().release();
+            readLock.release();
-        ps.println();
-        ps.print("[referenceCache] ");
-        cache.dump(ps);
+        if (cache instanceof Dumpable) {
+            ps.println();
+            ps.print("[referenceCache] ");
+            ((Dumpable) cache).dump(ps);
+        }
-         * Flag indicating whether we are holding write lock.
+         * The write lock we currently hold or <code>null</code> if none is
+         * hold.
-        private boolean holdingWriteLock;
+        private ISMLocking.WriteLock writeLock;
-                acquireWriteLock();
-                holdingWriteLock = true;
+                writeLock = acquireWriteLock(local);
-                if (!holdingWriteLock && eventChannel != null) {
+                if (writeLock == null && eventChannel != null) {
+            ISMLocking.ReadLock readLock = null;
-                acquireReadLock();
-                rwLock.writeLock().release();
-                holdingWriteLock = false;
+                readLock = writeLock.downgrade();
+                writeLock = null;
+            } catch (InterruptedException e) {
+                throw new ItemStateException("Interrupted while downgrading to read lock");
-                if (holdingWriteLock) {
+                if (writeLock != null) {
-                    rwLock.writeLock().release();
-                    holdingWriteLock = false;
-                } else {
-                    rwLock.readLock().release();
+                    writeLock.release();
+                    writeLock = null;
+                } else if (readLock != null) {
+                    readLock.release();
-                if (holdingWriteLock) {
-                    rwLock.writeLock().release();
-                    holdingWriteLock = false;
+                if (writeLock != null) {
+                    writeLock.release();
+                    writeLock = null;
+        ISMLocking.WriteLock wLock = null;
-            acquireWriteLock();
+            wLock = acquireWriteLock(external);
+        ISMLocking.ReadLock rLock = null;
-            acquireReadLock();
-            rwLock.writeLock().release();
-            holdingWriteLock = false;
-
-            events.dispatch();
-        } catch (ItemStateException e) {
+            if (wLock != null) {
+                rLock = wLock.downgrade();
+                holdingWriteLock = false;
+                events.dispatch();
+            }
+        } catch (InterruptedException e) {
-                rwLock.writeLock().release();
-                holdingWriteLock = false;
+                if (wLock != null) {
+                    wLock.release();
+                }
-                rwLock.readLock().release();
+                if (rLock != null) {
+                    rLock.release();
+                }
+     * @param id the id of the item for which to acquire a read lock.
-    private void acquireReadLock() throws ItemStateException {
+    private ISMLocking.ReadLock acquireReadLock(ItemId id) throws ItemStateException {
-            rwLock.readLock().acquire();
+            return ismLocking.acquireReadLock(id);
+     * @param changeLog the change log for which to acquire a write lock.
-    private void acquireWriteLock() throws ItemStateException {
+    private ISMLocking.WriteLock acquireWriteLock(ChangeLog changeLog) throws ItemStateException {
-            rwLock.writeLock().acquire();
+            return ismLocking.acquireWriteLock(changeLog);

MOV23 MOV31 INS31 UPD43 INS43 MOV29 INS83 INS39 INS42 MOV44 INS8 INS29 UPD42 INS44 INS43 INS44 INS43 INS44 UPD42 INS42 UPD42 INS21 INS25 INS65 INS65 INS43 INS42 INS25 INS60 INS60 INS60 INS60 INS25 INS43 INS60 INS60 INS54 INS65 INS40 INS43 INS42 INS65 INS40 INS43 INS42 UPD66 INS7 INS62 INS8 INS66 INS42 INS66 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS62 INS8 INS40 UPD42 INS60 INS43 INS59 INS43 INS59 INS8 MOV12 MOV8 INS42 INS66 INS42 INS42 INS66 INS42 INS22 INS14 INS42 INS43 INS21 INS42 INS33 INS53 UPD42 INS40 INS42 INS32 INS40 INS42 INS40 INS42 INS32 INS40 INS42 INS42 INS43 MOV21 MOV21 MOV21 UPD66 INS66 INS43 INS59 INS12 INS40 INS42 INS33 INS40 INS42 INS33 INS25 INS41 INS41 INS52 INS42 INS43 UPD42 MOV42 INS32 INS14 UPD42 MOV42 INS42 INS7 MOV42 INS32 INS7 INS42 INS40 INS42 INS33 INS44 INS8 INS7 INS27 INS8 UPD43 INS8 INS8 INS32 INS32 INS42 INS36 UPD42 MOV42 INS42 INS43 MOV42 INS42 INS32 MOV42 INS42 INS42 MOV42 INS42 INS32 MOV42 INS36 INS7 INS43 INS42 INS53 INS27 INS25 INS27 INS42 INS32 INS42 INS33 MOV21 MOV21 MOV21 UPD42 INS25 INS25 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS11 INS42 MOV42 INS42 MOV42 INS32 INS11 UPD42 INS32 INS27 INS42 INS32 UPD42 INS33 INS42 INS14 INS42 INS33 INS27 MOV8 INS42 INS33 MOV42 INS42 INS27 MOV8 INS27 MOV8 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS33 MOV42 UPD42 MOV42 INS43 INS45 INS42 INS33 UPD42 INS32 INS42 INS33 INS42 INS33 INS42 INS42 INS42 MOV42 UPD42 INS33 MOV42 UPD42 INS33 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL39 DEL9 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL27 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL23 DEL32 DEL21 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL39 DEL42 DEL32 DEL21 DEL9 DEL42 DEL38 DEL42 DEL32 DEL21 DEL42 DEL32 DEL32 DEL9 DEL42 DEL42 DEL32 DEL9 DEL42 DEL32 DEL42 DEL42 DEL32 DEL9 DEL32 DEL9 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL54 DEL39 DEL32 DEL32 DEL21 DEL39 DEL32 DEL32 DEL21