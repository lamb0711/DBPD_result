Improve indexing performance on consecutive small transactions on the same node.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159687 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.lucene.index.IndexReader;
+import org.apache.commons.collections.SequencedHashMap;
+import java.util.Map;
+import java.util.Iterator;
+    /**
+     * Default value for {@link #bufferSize}.
+     */
+    private final int DEFAULT_BUFFER_SIZE = 10;
+
+    /** Map of pending documents to add to the index */
+    private final Map pending = new SequencedHashMap();
+
+    /**
+     * Number of documents that are buffered before they are added to the index.
+     */
+    private int bufferSize = DEFAULT_BUFFER_SIZE;
+
-     * redo log and then calling the <code>super.addDocument()</code> method.
+     * redo log and then adds it to the pending list.
-        super.addDocument(doc);
+        pending.put(doc.get(FieldNames.UUID), doc);
+        if (pending.size() >= bufferSize) {
+            commitPending();
+        }
-     * log and then calling the <code>super.removeDocument()</code> method.
+     * log and then calling the <code>super.removeDocument()</code> method or
+     * if the document is in the pending list, removes it from there.
+     *
-        return super.removeDocument(idTerm);
+        if (pending.remove(idTerm.text()) != null) {
+            // pending document has been removed
+            return 1;
+        } else {
+            // remove document from index
+            return super.getIndexReader().delete(idTerm);
+        }
+    }
+
+    /**
+     * Overwrites the implementation in {@link AbstractIndex} to trigger
+     * commit of pending documents to index.
+     * @return the index reader for this index.
+     * @throws IOException if an error occurs building a reader.
+     */
+    protected synchronized IndexReader getIndexReader() throws IOException {
+        commitPending();
+        return super.getIndexReader();
+    }
+
+    /**
+     * Overwrites the implementation in {@link AbstractIndex} to commit
+     * pending documents.
+     */
+    protected synchronized void commit() throws IOException {
+        commitPending();
+        super.commit();
+    }
+
+    /**
+     * Sets a new buffer size for pending documents to add to the index.
+     * Higher values consume more memory, but help to avoid multiple index
+     * cycles when a node is changed / saved multiple times.
+     *
+     * @param size the new buffer size.
+     */
+    void setBufferSize(int size) {
+        bufferSize = size;
+    }
+
+    /**
+     * Commits pending documents to the index.
+     */
+    private void commitPending() throws IOException {
+        for (Iterator it = pending.values().iterator(); it.hasNext();) {
+            Document doc = (Document) it.next();
+            super.addDocument(doc);
+            it.remove();
+        }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS43 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS65 INS42 INS34 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS21 INS25 INS25 INS65 INS65 INS65 INS42 INS42 INS21 INS41 INS65 INS42 INS21 INS21 INS65 INS65 INS39 INS42 INS21 INS65 INS42 INS24 INS66 INS65 INS66 INS66 INS43 INS66 UPD66 INS32 INS27 INS8 UPD66 INS66 INS27 INS8 INS8 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS32 INS48 INS66 INS65 INS66 INS66 INS32 INS48 INS66 INS66 INS66 INS42 INS66 INS7 INS66 INS58 INS32 INS8 INS67 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS21 INS32 INS33 INS41 MOV41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 MOV21 INS21 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS34 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS48 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 UPD42 MOV42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL42 DEL48