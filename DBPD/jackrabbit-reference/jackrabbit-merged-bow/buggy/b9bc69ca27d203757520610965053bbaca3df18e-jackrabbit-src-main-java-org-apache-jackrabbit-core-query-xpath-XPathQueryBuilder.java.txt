JCR-638: Support lower-/upper-case functions

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@475677 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.PropertyFunctionQueryNode;
+import org.apache.jackrabbit.core.query.DefaultQueryNodeVisitor;
+     * Namespace uri for xpath functions. See also class SearchManager
+     */
+    static final String NS_FN_URI = "http://www.w3.org/2004/10/xpath-functions";
+
+    /**
-    static final QName FN_NOT = new QName("http://www.w3.org/2004/10/xpath-functions", "not");
+    static final QName FN_NOT = new QName(NS_FN_URI, "not");
+
+    /**
+     * QName for 'fn:lower-case'
+     */
+    static final QName FN_LOWER_CASE = new QName(NS_FN_URI, "lower-case");
+
+    /**
+     * QName for 'fn:upper-case'
+     */
+    static final QName FN_UPPER_CASE = new QName(NS_FN_URI, "upper-case");
-        RelationQueryNode rqn = new RelationQueryNode(queryNode, type);
+        final RelationQueryNode rqn = new RelationQueryNode(queryNode, type);
+        // check if string transformation is valid
+        rqn.acceptOperands(new DefaultQueryNodeVisitor() {
+            public Object visit(PropertyFunctionQueryNode node, Object data) {
+                String functionName = node.getFunctionName();
+                if ((functionName.equals(PropertyFunctionQueryNode.LOWER_CASE)
+                        || functionName.equals(PropertyFunctionQueryNode.UPPER_CASE))
+                            && rqn.getValueType() != QueryConstants.TYPE_STRING) {
+                    String msg = "Upper and lower case function are only supported with String literals";
+                    exceptions.add(new InvalidQueryException(msg));
+                }
+                return data;
+            }
+        }, null);
+
+            } else if (NameFormat.format(FN_LOWER_CASE, resolver).equals(fName)) {
+                if (node.jjtGetNumChildren() == 2) {
+                    if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                        RelationQueryNode relNode = (RelationQueryNode) queryNode;
+                        relNode.addOperand(new PropertyFunctionQueryNode(relNode, PropertyFunctionQueryNode.LOWER_CASE));
+                        // get property name
+                        node.jjtGetChild(1).jjtAccept(this, relNode);
+                    } else {
+                        exceptions.add(new InvalidQueryException("Unsupported location for fn:lower-case()"));
+                    }
+                } else {
+                    exceptions.add(new InvalidQueryException("Wrong number of argument for fn:lower-case()"));
+                }
+            } else if (NameFormat.format(FN_UPPER_CASE, resolver).equals(fName)) {
+                if (node.jjtGetNumChildren() == 2) {
+                    if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                        RelationQueryNode relNode = (RelationQueryNode) queryNode;
+                        relNode.addOperand(new PropertyFunctionQueryNode(relNode, PropertyFunctionQueryNode.UPPER_CASE));
+                        // get property name
+                        node.jjtGetChild(1).jjtAccept(this, relNode);
+                    } else {
+                        exceptions.add(new InvalidQueryException("Unsupported location for fn:upper-case()"));
+                    }
+                } else {
+                    exceptions.add(new InvalidQueryException("Unsupported location for fn:upper-case()"));
+                }

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS14 INS21 INS66 INS42 INS66 INS43 INS42 INS45 INS66 INS43 INS42 INS45 INS83 INS32 INS42 INS42 INS42 INS42 INS14 INS33 INS43 INS1 INS42 INS31 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS36 INS27 INS60 INS21 INS42 INS42 INS27 INS32 INS40 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS42 INS42 INS25 MOV32 MOV8 INS25 INS32 INS8 INS25 INS32 INS42 INS42 INS25 INS32 INS8 MOV8 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS25 INS32 INS34 INS25 INS21 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS27 INS8 INS8 INS32 INS32 INS34 INS25 INS21 INS32 INS40 INS60 INS21 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS43 INS45 INS32 INS40 INS60 INS21 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS11 INS42 INS42 INS14 INS32 INS42 INS52 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS43 INS45 INS43 INS42 INS43 INS42 INS40 INS42 INS42 INS34 INS43 INS45 INS42 INS42 INS11 INS42 INS42 INS14 INS32 INS42 INS52 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS40 INS42 INS42 INS34 INS43 INS45 INS42 INS42 INS42 DEL45 DEL25