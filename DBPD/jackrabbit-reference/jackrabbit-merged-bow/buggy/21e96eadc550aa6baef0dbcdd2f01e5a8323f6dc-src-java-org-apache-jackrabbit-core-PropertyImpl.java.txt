migrating to v0.15 of the jsr 170 spec

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55516 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.access.AccessDeniedException;
-    public Value[] getValues() throws RepositoryException {
+    public Value[] getValues() throws ValueFormatException, RepositoryException {
-    public Value getValue() throws RepositoryException {
+    public Value getValue() throws ValueFormatException, RepositoryException {
-     * @see Property#hasValue()
-     */
-    public boolean hasValue() {
-        // check state of this instance
-        //checkItemState();
-
-        PropertyState state = (PropertyState) getItemState();
-        InternalValue[] values = state.getValues();
-        return values.length > 0;
-    }
-
-    /**
-    public long getLength() {
+    public long getLength() throws ValueFormatException, RepositoryException {
-        //checkItemState();
+        checkItemState();
+
+        // check multi-value flag
+        if (definition.isMultiple()) {
+            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued");
+        }
-                    log.warn(safeGetJCRPath() + ": the value represents an invalid name", npde);
-                    return -1;
+                    String msg = safeGetJCRPath() + ": the value represents an invalid name";
+                    log.error(msg, npde);
+                    throw new RepositoryException(msg, npde);
-                    log.warn(safeGetJCRPath() + ": the value represents an invalid path", npde);
-                    return -1;
+                    String msg = safeGetJCRPath() + ": the value represents an invalid path";
+                    log.error(msg, npde);
+                    throw new RepositoryException(msg, npde);
+     * @see Property#getLengths
+     */
+    public long[] getLengths() throws ValueFormatException, RepositoryException {
+        // check state of this instance
+        checkItemState();
+
+        // check multi-value flag
+        if (!definition.isMultiple()) {
+            throw new ValueFormatException(safeGetJCRPath() + " is not multi-valued");
+        }
+
+        InternalValue[] values = ((PropertyState) state).getValues();
+        long[] lengths = new long[values.length];
+        for (int i = 0; i < values.length; i++) {
+            long length = -1;
+            InternalValue value = values[i];
+            switch (value.getType()) {
+                case PropertyType.STRING:
+                case PropertyType.LONG:
+                case PropertyType.DOUBLE:
+                    length = value.toString().length();
+
+                case PropertyType.NAME:
+                    QName name = (QName) value.internalValue();
+                    try {
+                        length = name.toJCRName(session.getNamespaceResolver()).length();
+                    } catch (NoPrefixDeclaredException npde) {
+                        // should never happen...
+                        String msg = safeGetJCRPath() + ": the value represents an invalid name";
+                        log.error(msg, npde);
+                        throw new RepositoryException(msg, npde);
+                    }
+
+                case PropertyType.PATH:
+                    Path path = (Path) value.internalValue();
+                    try {
+                        length = path.toJCRPath(session.getNamespaceResolver()).length();
+                    } catch (NoPrefixDeclaredException npde) {
+                        // should never happen...
+                        String msg = safeGetJCRPath() + ": the value represents an invalid path";
+                        log.error(msg, npde);
+                        throw new RepositoryException(msg, npde);
+                    }
+
+                case PropertyType.BINARY:
+                    BLOBFileValue blob = (BLOBFileValue) value.internalValue();
+                    length = blob.getLength();
+            }
+            lengths[i] = length;
+        }
+        return lengths;
+    }
+
+    /**

MOV31 INS43 INS43 INS43 INS43 INS5 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS21 INS25 INS39 INS85 INS42 INS42 INS21 INS25 INS60 INS24 INS41 INS32 INS32 INS8 INS67 INS32 INS38 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS32 INS53 INS43 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS50 INS21 INS14 INS42 INS42 INS14 INS42 INS36 INS5 INS40 INS42 INS34 INS39 INS59 MOV43 INS59 INS32 INS49 INS49 INS49 INS21 INS49 INS60 INS54 INS49 INS60 INS54 INS49 INS60 INS21 INS7 INS43 INS27 INS60 INS53 INS60 INS53 INS43 INS27 INS11 INS39 INS85 INS42 INS38 INS42 INS2 INS42 INS42 INS40 INS40 INS40 INS7 INS40 INS43 INS59 INS8 INS12 INS40 INS43 INS59 INS8 INS12 INS40 INS43 INS59 INS7 INS2 INS42 INS42 INS32 INS45 INS43 INS59 INS14 INS43 INS59 INS14 UPD42 MOV42 INS32 INS45 INS43 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS21 INS44 INS8 INS42 INS42 INS11 INS21 INS44 INS8 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV27 UPD42 INS42 INS43 INS42 INS42 INS42 INS42 MOV27 UPD42 INS42 INS43 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS43 INS32 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS32 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS45 INS42 INS42 INS42 INS32 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL34 DEL38 DEL41 DEL34 DEL38 DEL41 DEL42 DEL42 DEL68 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL42 DEL40 DEL34 DEL27 DEL41