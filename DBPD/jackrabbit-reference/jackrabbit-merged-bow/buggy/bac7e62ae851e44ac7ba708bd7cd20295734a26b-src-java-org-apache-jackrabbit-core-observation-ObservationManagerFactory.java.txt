- Redesigned observation to also include workspace modifications
- Extended observation tests and moved them into the api.observation package

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155583 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.*;
-import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
-import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
-import org.apache.jackrabbit.core.state.ItemStateManager;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.HierarchyManager;
+import org.apache.jackrabbit.core.ItemManager;
-import javax.jcr.RepositoryException;
-import javax.jcr.observation.EventListener;
-import javax.jcr.observation.EventListenerIterator;
-import javax.jcr.observation.ObservationManager;
-    private Set getAsynchronousConsumers() {
+    Set getAsynchronousConsumers() {
-    private Set getSynchronousConsumers() {
+    Set getSynchronousConsumers() {
-    public ObservationManager createObservationManager(SessionImpl session,
-                                                       ItemManager itemMgr) {
-        return new SessionLocalObservationManager(session, itemMgr);
-    }
-
-    public EventStateCollection createEventStateCollection(SessionImpl session,
-                                                           ItemStateManager provider,
-                                                           HierarchyManager hmgr) {
-        return new EventStateCollection(this, session, provider, hmgr);
+    public ObservationManagerImpl createObservationManager(SessionImpl session,
+                                                           HierarchyManager hmgr,
+                                                           ItemManager itemMgr) {
+        return new ObservationManagerImpl(this, session, hmgr, itemMgr);
-    void prepareEvents(EventStateCollection events)
-            throws RepositoryException {
+    void prepareEvents(EventStateCollection events) {
-    //----------------------------< adapter class >-----------------------------
-
-     * Each <code>Session</code> instance has its own <code>ObservationManager</code>
-     * instance. The class <code>SessionLocalObservationManager</code> implements
-     * this behaviour.
+     * Adds or replaces an event consumer.
+     * @param consumer the <code>EventConsumer</code> to add or replace.
-    class SessionLocalObservationManager implements ObservationManager {
-
-        /**
-         * The <code>Session</code> this <code>ObservationManager</code>
-         * belongs to.
-         */
-        private SessionImpl session;
-
-        /**
-         * The <code>ItemManager</code> for this <code>ObservationManager</code>.
-         */
-        private ItemManager itemMgr;
-
-        /**
-         * Creates an <code>ObservationManager</code> instance.
-         *
-         * @param session the <code>Session</code> this ObservationManager
-         *                belongs to.
-         * @param itemMgr {@link org.apache.jackrabbit.core.ItemManager} of the passed
-         *                <code>Session</code>.
-         * @throws NullPointerException if <code>session</code> or <code>itemMgr</code>
-         *                              is <code>null</code>.
-         */
-        SessionLocalObservationManager(SessionImpl session,
-                                       ItemManager itemMgr) {
-            if (session == null) {
-                throw new NullPointerException("session");
-            }
-            if (itemMgr == null) {
-                throw new NullPointerException("itemMgr");
-            }
-
-            this.session = session;
-            this.itemMgr = itemMgr;
-        }
-
-        /**
-         * @see ObservationManager#addEventListener
-         */
-        public void addEventListener(EventListener listener,
-                                     int eventTypes,
-                                     String absPath,
-                                     boolean isDeep,
-                                     String[] uuid,
-                                     String[] nodeTypeName,
-                                     boolean noLocal)
-                throws RepositoryException {
-
-            // create NodeType instances from names
-            NodeTypeImpl[] nodeTypes;
-            if (nodeTypeName == null) {
-                nodeTypes = null;
+    void addConsumer(EventConsumer consumer) {
+        synchronized (consumerChange) {
+            if (consumer.getEventListener() instanceof SynchronousEventListener) {
+                // remove existing if any
+                synchronousConsumers.remove(consumer);
+                // re-add it
+                synchronousConsumers.add(consumer);
+                // reset read only consumer set
+                synchronousReadOnlyConsumers = null;
-                NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
-                nodeTypes = new NodeTypeImpl[nodeTypeName.length];
-                for (int i = 0; i < nodeTypes.length; i++) {
-                    nodeTypes[i] = (NodeTypeImpl) ntMgr.getNodeType(nodeTypeName[i]);
-                }
+                // remove existing if any
+                activeConsumers.remove(consumer);
+                // re-add it
+                activeConsumers.add(consumer);
+                // reset read only consumer set
+                readOnlyConsumers = null;
-
-            Path path;
-            try {
-                path = Path.create(absPath, session.getNamespaceResolver(), true);
-            } catch (MalformedPathException mpe) {
-                String msg = "invalid path syntax: " + absPath;
-                log.debug(msg);
-                throw new RepositoryException(msg, mpe);
-            }
-            // create filter
-            EventFilter filter = new EventFilter(itemMgr,
-                    session,
-                    eventTypes,
-                    path,
-                    isDeep,
-                    uuid,
-                    nodeTypes,
-                    noLocal);
-
-            EventConsumer consumer =
-                    new EventConsumer(session, listener, filter);
-
-            synchronized (consumerChange) {
-                if (listener instanceof SynchronousEventListener) {
-                    // remove existing if any
-                    synchronousConsumers.remove(consumer);
-                    // re-add it
-                    synchronousConsumers.add(consumer);
-                    // reset read only consumer set
-                    synchronousReadOnlyConsumers = null;
-                } else {
-                    // remove existing if any
-                    activeConsumers.remove(consumer);
-                    // re-add it
-                    activeConsumers.add(consumer);
-                    // reset read only consumer set
-                    readOnlyConsumers = null;
-                }
-            }
-        }
-
-        /**
-         * @see ObservationManager#removeEventListener(javax.jcr.observation.EventListener)
-         */
-        public void removeEventListener(EventListener listener)
-                throws RepositoryException {
-            EventConsumer consumer =
-                    new EventConsumer(session, listener, EventFilter.BLOCK_ALL);
-
-            synchronized (consumerChange) {
-                if (listener instanceof SynchronousEventListener) {
-                    synchronousConsumers.remove(consumer);
-                    // reset read only listener set
-                    synchronousReadOnlyConsumers = null;
-                } else {
-                    activeConsumers.remove(consumer);
-                    // reset read only listener set
-                    readOnlyConsumers = null;
-                }
-            }
-        }
-
-        /**
-         * @see ObservationManager#getRegisteredEventListeners()
-         */
-        public EventListenerIterator getRegisteredEventListeners()
-                throws RepositoryException {
-            return new EventListenerIteratorImpl(session,
-                    getSynchronousConsumers(),
-                    getAsynchronousConsumers());
+
+    /**
+     * Unregisters an event consumer from event notification.
+     * @param consumer the consumer to deregister.
+     */
+    void removeConsumer(EventConsumer consumer) {
+        synchronized (consumerChange) {
+            if (consumer.getEventListener() instanceof SynchronousEventListener) {
+                synchronousConsumers.remove(consumer);
+                // reset read only listener set
+                synchronousReadOnlyConsumers = null;
+            } else {
+                activeConsumers.remove(consumer);
+                // reset read only listener set
+                readOnlyConsumers = null;
+            }
+        }
+    }
+

MOV26 UPD40 UPD40 UPD40 INS31 MOV31 UPD43 MOV44 MOV29 MOV39 UPD42 MOV42 MOV44 INS8 UPD42 UPD42 MOV43 UPD42 MOV51 INS65 UPD65 MOV43 UPD42 UPD66 UPD42 UPD66 INS66 INS42 INS66 UPD43 INS52 INS42 UPD42 INS62 MOV62 INS32 MOV43 INS32 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL52 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL66 DEL66 DEL65 DEL66 DEL40 DEL65 DEL66 DEL42 DEL66 DEL66 DEL65 DEL42 DEL43 DEL42 DEL42 DEL40 DEL43 DEL69 DEL68 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL14 DEL59 DEL60 DEL42 DEL42 DEL62 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL67 DEL65 DEL29 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL11 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL55