JCR-193, JCR-216, JCR-203, JCR 184 + various minor fixes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@293331 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.util.Text;
-    public DavResourceLocator createResourceLocator(String prefix, String requestHandle) {
+    public DavResourceLocator createResourceLocator(String prefix, String href) {
-        String rHandle = requestHandle;
-	// remove the configured repository prefix from the path
-        if (rHandle != null && rHandle.startsWith(repositoryPrefix)) {
-            rHandle = rHandle.substring(repositoryPrefix.length());
+        String escPath = href;
+        // remove the configured repository prefix from the path
+        if (escPath != null && escPath.startsWith(repositoryPrefix)) {
+            escPath = escPath.substring(repositoryPrefix.length());
-	// special treatment for root item, that has no name but '/' path.
-        if (rHandle == null || "".equals(rHandle)) {
-            rHandle = "/";
+        // special treatment for root item, that has no name but '/' path.
+        if (escPath == null || "".equals(escPath)) {
+            escPath = "/";
-        return new Locator(rPrefix, rHandle, this);
+        return new Locator(rPrefix, Text.unescape(escPath), this);
-        return new Locator(prefix, resourcePath, this);
+        return createResourceLocator(prefix, workspacePath, resourcePath, true);
+    public DavResourceLocator createResourceLocator(String prefix, String workspacePath, String path, boolean isResourcePath) {
+        return new Locator(prefix, path, this);
+    }
+
+    //--------------------------------------------------------------------------
-        private final String itemPath;
+        private final String resourcePath;
+        private final String href;
-        private Locator(String prefix, String itemPath, DavLocatorFactory factory) {
+        private Locator(String prefix, String resourcePath, DavLocatorFactory factory) {
-	    // remove trailing '/' that is not part of the itemPath except for the root item.
-            if (itemPath.endsWith("/") && !"/".equals(itemPath)) {
-                itemPath = itemPath.substring(0, itemPath.length()-1);
+            // remove trailing '/' that is not part of the resourcePath except for the root item.
+            if (resourcePath.endsWith("/") && !"/".equals(resourcePath)) {
+                resourcePath = resourcePath.substring(0, resourcePath.length()-1);
-            this.itemPath = itemPath;
+            this.resourcePath = resourcePath;
+            href = prefix + Text.escapePath(resourcePath);
-            return itemPath;
+            return resourcePath;
-        public boolean isSameWorkspace(DavResourceLocator path) {
-            return isSameWorkspace(path.getWorkspaceName());
+        public boolean isSameWorkspace(DavResourceLocator locator) {
+            return isSameWorkspace(locator.getWorkspaceName());
-	    // avoid doubled trainling '/' for the root item
-	    String suffix = (isCollection && !isRootLocation()) ? "/" : "";
-            return prefix + itemPath + suffix;
+            // avoid doubled trailing '/' for the root item
+            String suffix = (isCollection && !isRootLocation()) ? "/" : "";
+            return href + suffix;
-            return "/".equals(itemPath);
+            return "/".equals(resourcePath);
-         * Computes the hash code using the prefix and the itemPath
+         * Returns the same as {@link #getResourcePath()}. No encoding is performed
+         * at all.
+         * @see DavResourceLocator#getJcrPath()
+         */
+        public String getJcrPath() {
+            return getResourcePath();
+        }
+
+        /**
+         * Computes the hash code from the href, which is built using the final
+         * fields prefix and resourcePath.
-            int hashCode = prefix.hashCode();
-            if (itemPath != null) {
-                hashCode += itemPath.hashCode();
-            }
-            return hashCode % Integer.MAX_VALUE;
+            return href.hashCode();
-         * and the return values of the two <code>getHref(boolean)</code> methods are
-         * equal.
+         * object with the same hash code.
-                DavResourceLocator path = (DavResourceLocator) obj;
-                this.getHref(true).equals(path.getHref(true));
+                DavResourceLocator other = (DavResourceLocator) obj;
+                return hashCode() == other.hashCode();

INS26 INS40 INS31 INS83 INS43 INS42 INS44 INS44 MOV44 INS44 INS8 INS23 INS31 UPD42 INS42 INS43 INS42 INS43 INS42 UPD42 INS39 INS42 INS41 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS43 INS42 INS8 INS32 INS42 INS42 INS14 UPD42 INS42 INS42 INS43 INS42 INS21 UPD42 INS65 INS65 INS42 INS41 INS41 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS9 MOV43 INS42 INS42 INS52 INS42 INS7 UPD42 INS66 INS65 INS66 INS66 INS68 INS32 UPD66 INS66 INS32 UPD66 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS27 UPD42 UPD42 INS68 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS41 UPD42 UPD42 UPD42 UPD42 INS42 INS32 UPD42 INS42 INS27 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS32 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 DEL42 DEL42 DEL42 DEL52 DEL14 DEL42 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL40 DEL27 DEL41 DEL66 DEL52 DEL9 DEL32 DEL42 DEL9 DEL32 DEL32 DEL21