Make locking part of XAResource's transaction support

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@354456 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.observation.EventStateCollection;
-import org.apache.jackrabbit.core.state.TransactionContext;
-import org.apache.jackrabbit.core.state.TransactionException;
-import org.apache.jackrabbit.core.state.TransactionListener;
+import org.apache.jackrabbit.core.lock.LockManager;
+import org.apache.jackrabbit.core.lock.TxLockManager;
+import org.apache.jackrabbit.core.lock.SharedLockManager;
+import org.apache.jackrabbit.core.state.ChangeLog;
+import org.apache.jackrabbit.core.state.TransactionalItemStateManager;
+     * Known attribute name.
+     */
+    private static final String ATTRIBUTE_CHANGE_LOG = "ChangeLog";
+
+    /**
+     * Known attribute name.
+     */
+    private static final String ATTRIBUTE_LOCK_MANAGER = "LockManager";
+
+    /**
-        return XA_OK;
+
+        TransactionalItemStateManager stateMgr = wsp.getItemStateManager();
+        stateMgr.setChangeLog(getChangeLog(tx), true);
+
+        try {
+            // 1. Prepare state manager
+            try {
+                stateMgr.prepare();
+            } catch (TransactionException e) {
+                throw new ExtendedXAException(XAException.XA_RBOTHER, e);
+            }
+
+            // 2. Prepare lock manager
+            try {
+                TxLockManager lockMgr = getTxLockManager(tx);
+                if (lockMgr != null) {
+                    lockMgr.prepare();
+                }
+            } catch (TransactionException e) {
+                stateMgr.rollback();
+                throw new ExtendedXAException(XAException.XA_RBOTHER, e);
+            }
+            return XA_OK;
+
+        } finally {
+            stateMgr.setChangeLog(null, true);
+        }
-        wsp.getItemStateManager().rollback(tx);
+
+        TransactionalItemStateManager stateMgr = wsp.getItemStateManager();
+        stateMgr.setChangeLog(getChangeLog(tx), true);
+
+        try {
+            // 1. Rollback changes on lock manager
+            TxLockManager lockMgr = getTxLockManager(tx);
+            if (lockMgr != null) {
+                lockMgr.rollback();
+            }
+
+            // 2. Rollback changes on state manager
+            stateMgr.rollback();
+
+        } finally {
+            stateMgr.setChangeLog(null, true);
+        }
+        TransactionalItemStateManager stateMgr = wsp.getItemStateManager();
+        stateMgr.setChangeLog(getChangeLog(tx), true);
+
+        TxLockManager lockMgr = getTxLockManager(tx);
+
-            wsp.getItemStateManager().commit(tx);
-        } catch (TransactionException e) {
-            throw new ExtendedXAException(XAException.XA_RBOTHER, e);
+            // 1. Commit changes on state manager
+            try {
+                stateMgr.commit();
+            } catch (TransactionException e) {
+                if (lockMgr != null) {
+                    lockMgr.rollback();
+                }
+                throw new ExtendedXAException(XAException.XA_RBOTHER, e);
+            }
+
+            // 2. Commit changes on lock manager
+            if (lockMgr != null) {
+                lockMgr.commit();
+            }
+        } finally {
+            stateMgr.setChangeLog(null, true);
-        wsp.getItemStateManager().setTransactionContext(tx);
+        ChangeLog txLog = getChangeLog(tx);
+        if (txLog == null) {
+            txLog = new ChangeLog();
+            tx.setAttribute(ATTRIBUTE_CHANGE_LOG, txLog);
+        }
+        wsp.getItemStateManager().setChangeLog(txLog, false);
-        wsp.getItemStateManager().setTransactionContext(null);
-    }
-
-    /**
-     * {@inheritDoc}
-     * <p/>
-     * If we are currently associated with a transaction, the dispatch operation
-     * will be postponed until commit.
-     */
-    protected void dispatch(EventStateCollection events) {
-        if (tx != null) {
-            tx.addListener(new EventDispatcher(events));
-            return;
-        }
-        super.dispatch(events);
-    }
-
-    /**
-     * Internal {@link TransactionListener} implementation that will dispatch
-     * events only when a transaction has actually been committed.
-     */
-    static class EventDispatcher implements TransactionListener {
-
-        /**
-         * Events to dispatch if transaction is committed
-         */
-        private final EventStateCollection events;
-
-        /**
-         * Create a new instance of this class.
-         *
-         * @param events events to dispatch on commit
-         */
-        public EventDispatcher(EventStateCollection events) {
-            this.events = events;
-        }
-
-        /**
-         * {@inheritDoc}
-         * <p/>
-         * Dispatch events.
-         */
-        public void transactionCommitted(TransactionContext tx) {
-            events.dispatch();
-        }
-
-        /**
-         * {@inheritDoc}
-         * <p/>
-         * Nothing to do.
-         */
-        public void transactionRolledBack(TransactionContext tx) {
-        }
+        wsp.getItemStateManager().setChangeLog(null, false);
+
+    //-------------------------------------------------------< locking support >
+
+    /**
+     * Return the lock manager for this session. In a transactional environment,
+     * this is a session-local object that records locking/unlocking operations
+     * until final commit.
+     *
+     * @return lock manager for this session
+     * @throws javax.jcr.RepositoryException if an error occurs
+     */
+    public LockManager getLockManager() throws RepositoryException {
+        if (tx != null) {
+            TxLockManager lockMgr = (TxLockManager) tx.getAttribute(ATTRIBUTE_LOCK_MANAGER);
+            if (lockMgr == null) {
+                lockMgr = new TxLockManager(
+                        (SharedLockManager) super.getLockManager());
+                tx.setAttribute(ATTRIBUTE_LOCK_MANAGER, lockMgr);
+            }
+            return lockMgr;
+        }
+        return super.getLockManager();
+    }
+
+    /**
+     * Return the transactional change log for this session.
+     *
+     * @param tx transactional context
+     * @return change log for this session, may be <code>null</code>
+     */
+    private static ChangeLog getChangeLog(TransactionContext tx) {
+        return (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
+    }
+
+    /**
+     * Return the transactional lock manager for this session. Returns
+     * <code>null</code> if no lock manager has been used yet.
+     *
+     * @return lock manager for this session
+     */
+    private static TxLockManager getTxLockManager(TransactionContext tx) {
+        return (TxLockManager) tx.getAttribute(ATTRIBUTE_LOCK_MANAGER);
+    }

MOV26 INS26 MOV31 UPD40 UPD40 INS40 UPD40 UPD40 INS23 INS23 INS31 INS31 INS31 MOV31 MOV31 MOV31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS83 UPD39 UPD42 MOV29 INS83 MOV39 INS42 MOV44 MOV44 MOV43 INS8 MOV29 INS39 INS42 MOV44 INS8 MOV29 INS39 INS42 MOV8 INS43 INS42 INS43 INS8 INS83 UPD83 INS43 INS42 MOV44 INS83 UPD83 INS43 INS42 MOV44 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS60 INS21 INS54 INS60 INS54 MOV60 MOV25 INS60 MOV21 INS60 INS54 MOV21 INS60 INS25 MOV21 INS21 INS65 UPD65 UPD65 INS42 UPD42 MOV42 INS25 INS41 INS65 INS65 INS65 INS42 INS41 INS65 INS42 INS41 INS66 INS66 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS32 INS43 INS59 INS8 INS8 INS43 INS59 INS27 INS8 MOV7 INS66 INS66 INS66 UPD66 INS40 UPD66 MOV27 INS8 INS48 INS66 INS42 UPD66 MOV66 UPD66 MOV66 INS11 UPD66 UPD66 INS66 INS11 INS42 INS42 MOV32 INS42 INS42 INS32 INS9 MOV54 INS54 MOV41 INS21 INS42 INS42 MOV32 INS42 INS42 INS32 INS9 INS60 INS25 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS32 INS54 INS25 INS21 UPD42 MOV42 INS42 INS32 INS42 INS33 INS21 INS21 UPD42 INS42 INS9 UPD42 INS33 INS9 INS60 INS25 INS41 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS8 INS12 INS32 INS42 UPD42 MOV42 MOV42 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS27 INS8 INS32 INS42 INS42 INS7 INS32 INS43 INS59 INS27 INS8 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS44 INS8 INS42 INS42 INS33 INS9 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS33 INS9 INS21 INS44 INS8 INS42 INS33 MOV21 INS42 INS42 INS33 INS9 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS33 MOV21 INS21 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS53 INS42 INS42 INS32 INS32 UPD43 MOV43 UPD42 MOV42 INS25 INS53 INS32 INS43 INS43 INS32 INS32 UPD42 MOV42 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS14 INS42 INS42 INS42 INS42 UPD42 INS27 INS8 INS14 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS40 INS42 INS42 INS33 INS21 UPD43 MOV43 INS40 UPD42 MOV42 INS43 INS11 INS42 INS42 INS42 INS32 UPD42 INS42 INS43 INS48 UPD42 MOV42 INS42 INS42 INS42 DEL83 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL32 DEL42 DEL42 DEL48 DEL33 DEL42 DEL31 DEL42 DEL39 DEL42 DEL8 DEL31 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL44 DEL42 DEL14 DEL32 DEL21 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL55 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL65 DEL65 DEL39 DEL42 DEL32 DEL21 DEL65 DEL39 DEL42