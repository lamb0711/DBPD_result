work in progress

- NodeInfo does not load information about child-node-entries
  -> add separate SPI call
  -> add initial draft ChildInfo interface
  -> ChildNodeEntries are not built upon creation of the NodeState
  -> ItemStateFactory: add method to retrieve ChildNodeEntries

- respect CacheBehaviour while persisting transient modifications

- LockInfo.getNodeId() -> not used so far -> remove

- SessionItemStateManager: getHierarchyManager() only used by SessionImpl -> moved

- Improve TODO comments
- Javadoc


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@482657 13f79535-47bb-0310-9956-ffa450edef68

-    
+
+    /**
+     * Create <code>ChildNodeEntries</code> for the given node state.
+     *
+     * @param nodeState
+     */
+    ChildNodeEntries(NodeState nodeState, ChildNodeEntries base) {
+        this.nodeState = nodeState;
+        for (Iterator it = base.iterator(); it.hasNext();) {
+            ChildNodeEntry cne = (ChildNodeEntry) it.next();
+            add(cne.getName(), cne.getUUID(), cne.getIndex());
+        }
+    }
+
-        ChildNodeEntry cne = add(nodeName, uuid);
-        // TODO: in case of SNS, move new cne to the right position.
+        ChildNodeEntry cne = ChildNodeReference.create(nodeState, nodeName, uuid, nodeState.isf, nodeState.idFactory);
+        add(cne, index);
-
-    /**
-     * Adds a <code>ChildNodeEntry</code> for a child node with the given
-     * name and an optional <code>uuid</code>.
-     *
-     * @param nodeName The name of the child node.
-     * @param uuid The UUID of the child node if it can be identified with a UUID;
-     * otherwise <code>null</code>.
-     * @return the created ChildNodeEntry.
-     */
-    private ChildNodeEntry add(QName nodeName, String uuid) {
-        ChildNodeEntry cne = ChildNodeReference.create(nodeState, nodeName, uuid, nodeState.isf, nodeState.idFactory);
-        add(cne);
-        return cne;
-    }
+     * Adds a <code>ChildNodeEntry</code>. If an entry with the given index
+     * already exists, the the new sibling is inserted before.
+     *
+     * @param cne the <code>ChildNodeEntry</code> to add.
+     */
+    private void add(ChildNodeEntry cne, int index) {
+        QName nodeName = cne.getName();
+
+        // retrieve ev. sibling node with same index
+        // if index is 'undefined' behave just as '#add(ChildNodeEntry).
+        LinkedEntries.LinkNode existing = (index < Path.INDEX_DEFAULT) ? null : getLinkNode(nodeName, index);
+
+        // add new entry (same as #add(ChildNodeEntry)
+        List siblings = null;
+        Object obj = nameMap.get(nodeName);
+        if (obj != null) {
+            if (obj instanceof List) {
+                // map entry is a list of siblings
+                siblings = (ArrayList) obj;
+            } else {
+                // map entry is a single child node entry,
+                // convert to siblings list
+                siblings = new ArrayList();
+                siblings.add(obj);
+                nameMap.put(nodeName, siblings);
+            }
+        }
+
+        LinkedEntries.LinkNode ln = entries.add(cne);
+        if (siblings != null) {
+            siblings.add(ln);
+        } else {
+            nameMap.put(nodeName, ln);
+        }
+
+        // if new entry must be inserted instead of appended at the end
+        // reorder entries now
+        if (existing != null) {
+            reorder(obj, ln, existing);
+        }
+    }
+
+    /**
-     * Removes all child node entries
-     */
-    void removeAll() {
-        nameMap.clear();
-        entries.clear();
-    }
-
-    /**
+        reorder(insertObj, insertLN, beforeLN);
+    }
+
+    /**
+     *
+     * @param insertObj
+     * @param insertLN
+     * @param beforeLN
+     */
+    private void reorder(Object insertObj, LinkedEntries.LinkNode insertLN, LinkedEntries.LinkNode beforeLN) {
-            if (beforeNode == null) {
+            if (beforeLN == null) {
-
-                QName insertName = insertNode.getQName();
+                QName insertName = insertLN.getChildNodeEntry().getName();
-     * resolution of any ChildNodeEntry that matches by name.
+     * resolution of any <code>ChildNodeEntry</code> that matches by name.
+    /**
+     * Returns the matching <code>LinkNode</code> from a list or a single
+     * <code>LinkNode</code>. This method will return <code>null</code>
+     * if none of the entries matches.
+     *
+     * @param name
+     * @param index
+     * @return the matching <code>LinkNode</code> or <code>null</code>.
+     */
+    private LinkedEntries.LinkNode getLinkNode(QName name, int index) {
+        Object listOrLinkNode = nameMap.get(name);
+        if (listOrLinkNode == null) {
+            // no matching child node entry
+            return null;
+        }
+
+        if (listOrLinkNode instanceof List) {
+            // has same name sibling
+            for (Iterator it = ((List) listOrLinkNode).iterator(); it.hasNext();) {
+                LinkedEntries.LinkNode n = (LinkedEntries.LinkNode) it.next();
+                ChildNodeEntry cne = n.getChildNodeEntry();
+                if (cne.getIndex() == index) {
+                    return n;
+                }
+            }
+        } else {
+            // single child node with this name
+            ChildNodeEntry cne = ((LinkedEntries.LinkNode) listOrLinkNode).getChildNodeEntry();
+            if (cne.getIndex() == index) {
+                return (LinkedEntries.LinkNode) listOrLinkNode;
+            }
+        }
+
+        // no matching entry
+        return null;
+    }

MOV31 MOV31 MOV31 INS31 INS31 INS29 INS42 INS8 MOV29 MOV44 INS83 UPD42 INS44 INS44 MOV29 INS39 INS42 MOV44 MOV44 MOV43 INS8 INS29 INS83 INS44 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS65 INS65 UPD43 UPD42 UPD43 UPD42 INS21 INS24 INS65 MOV43 INS42 INS39 INS42 INS60 INS60 INS60 INS60 INS25 INS60 INS25 INS25 MOV60 MOV60 MOV60 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS65 INS65 INS65 INS65 INS40 INS43 INS42 INS39 INS42 INS60 INS25 INS25 INS41 INS66 INS42 UPD42 UPD42 INS7 INS58 INS32 INS8 UPD66 INS66 INS42 INS66 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS40 INS40 UPD66 INS66 INS66 INS66 INS42 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS62 INS8 INS8 INS33 INS22 INS42 INS43 INS59 INS42 INS42 MOV60 INS21 INS42 INS42 INS42 INS32 INS40 INS42 INS16 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS25 INS40 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS43 INS24 INS60 INS25 INS52 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS36 INS33 INS32 INS42 INS42 INS42 INS62 INS8 INS8 MOV42 INS42 UPD42 MOV42 INS32 INS32 INS32 INS42 INS42 INS42 INS33 INS42 INS58 INS32 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS11 INS42 INS32 INS32 INS32 INS27 INS42 INS42 INS42 INS42 INS43 INS21 INS21 INS21 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS32 INS32 INS42 INS41 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS7 INS7 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS36 INS42 INS42 INS42 INS11 UPD42 MOV42 UPD42 MOV42 INS42 INS11 INS42 INS14 INS42 INS42 INS42 UPD42 INS42 INS42 INS36 INS42 INS40 INS42 INS11 INS42 INS42 INS32 INS32 INS42 INS41 INS11 INS43 INS42 INS43 INS42 INS43 INS32 UPD42 INS11 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS40 INS42 INS42 UPD42 MOV42 INS42 INS43 INS42 INS40 INS42 INS42 INS40 INS42 DEL42 DEL42 DEL32 DEL42 DEL41 DEL8 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL32 DEL21