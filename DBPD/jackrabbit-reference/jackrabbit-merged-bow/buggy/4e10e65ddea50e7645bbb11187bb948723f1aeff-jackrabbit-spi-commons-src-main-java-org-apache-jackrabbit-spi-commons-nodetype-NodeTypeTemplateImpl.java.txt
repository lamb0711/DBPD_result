JCR-2192: Handling of expanded-form jcr names by node type *Template classes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@797410 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.QNodeTypeDefinition;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
-import javax.jcr.nodetype.NodeTypeDefinition;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.nodetype.NodeTypeDefinition;
+import javax.jcr.NamespaceException;
+import javax.jcr.RepositoryException;
-    private String name;
-    private String[] superTypeNames;
-    private String primaryItemName;
+    private static final Logger log = LoggerFactory.getLogger(NodeTypeTemplateImpl.class);
+
+    private Name name;
+    private Name[] superTypeNames;
+    private Name primaryItemName;
+    private final NamePathResolver resolver;
+
+     *
+     * @param resolver
-    NodeTypeTemplateImpl() {
+    NodeTypeTemplateImpl(NamePathResolver resolver) {
+        // TODO: see https://jsr-283.dev.java.net/issues/show_bug.cgi?id=798
+        // TODO see https://jsr-283.dev.java.net/issues/show_bug.cgi?id=797
+        superTypeNames = new Name[0];
+        this.resolver = resolver;
+     * @param resolver
-    NodeTypeTemplateImpl(NodeTypeDefinition def) {
-        name = def.getName();
-        superTypeNames = def.getDeclaredSupertypeNames();
-        primaryItemName = def.getPrimaryItemName();
+    NodeTypeTemplateImpl(NodeTypeDefinition def, NamePathResolver resolver) throws RepositoryException {
+        this.resolver = resolver;
+        
+        if (def instanceof NodeTypeDefinitionImpl) {
+            QNodeTypeDefinition qDef = ((NodeTypeDefinitionImpl) def).ntd;
+            name = qDef.getName();
+            superTypeNames = qDef.getSupertypes();
+            primaryItemName = qDef.getPrimaryItemName();
+        } else {
+            setName(def.getName());
+            setDeclaredSuperTypeNames(def.getDeclaredSupertypeNames());
+            setPrimaryItemName(def.getPrimaryItemName());
+        }
+
+
-                list.add(new NodeDefinitionTemplateImpl(nodeDef));
+                list.add(new NodeDefinitionTemplateImpl(nodeDef, resolver));
-                list.add(new PropertyDefinitionTemplateImpl(propDef));
+                list.add(new PropertyDefinitionTemplateImpl(propDef, resolver));
-    public void setName(String name) {
-        this.name = name;
+    public void setName(String name) throws ConstraintViolationException {
+        try {
+            this.name = resolver.getQName(name);
+        } catch (RepositoryException e) {
+            throw new ConstraintViolationException(e);
+        }
-    public void setDeclaredSuperTypeNames(String[] names) {
-        superTypeNames = names;
+    public void setDeclaredSuperTypeNames(String[] names) throws ConstraintViolationException {
+        // TODO see https://jsr-283.dev.java.net/issues/show_bug.cgi?id=797
+        if (names == null) {
+            throw new ConstraintViolationException("null isn't a valid array of JCR names.");            
+        } else {
+            superTypeNames = new Name[names.length];
+            for (int i = 0; i < names.length; i++) {
+                try {
+                    superTypeNames[i] = resolver.getQName(names[i]);
+                } catch (RepositoryException e) {
+                    throw new ConstraintViolationException(e);
+                }
+            }
+        }
-    public void setPrimaryItemName(String name) {
-        primaryItemName = name;
+    public void setPrimaryItemName(String name) throws ConstraintViolationException {
+        if (name == null) {
+            primaryItemName = null;
+        } else {
+            try {
+                primaryItemName = resolver.getQName(name);
+            } catch (RepositoryException e) {
+                throw new ConstraintViolationException(e);
+            }
+        }
-        return name;
+        if (name == null) {
+            return null;
+        } else {
+            try {
+                return resolver.getJCRName(name);
+            } catch (NamespaceException e) {
+                // should never get here
+                log.error("encountered unregistered namespace in node type name", e);
+                return name.toString();
+            }
+        }
-        return superTypeNames;
+        String[] names = new String[superTypeNames.length];
+        for (int i = 0; i < superTypeNames.length; i++) {
+            try {
+                names[i] = resolver.getJCRName(superTypeNames[i]);
+            } catch (NamespaceException e) {
+                // should never get here
+                log.error("encountered unregistered namespace in super type name", e);
+                names[i] = superTypeNames[i].toString();
+            }
+        }
+        return names;
-        return primaryItemName;
+        if (primaryItemName == null) {
+            return null;
+        } else {
+            try {
+                return resolver.getJCRName(primaryItemName);
+            } catch (NamespaceException e) {
+                // should never get here
+                log.error("encountered unregistered namespace in primary type name", e);
+                return primaryItemName.toString();
+            }
+        }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS83 INS83 UPD43 INS59 INS43 MOV59 INS5 MOV59 INS83 INS43 MOV59 INS83 INS83 INS43 INS59 INS44 INS44 INS43 INS43 INS8 INS43 INS8 MOV29 INS43 INS8 MOV29 MOV43 INS8 MOV29 MOV29 MOV43 INS8 UPD42 INS42 INS32 INS42 INS43 INS85 INS42 INS42 INS42 INS65 INS43 INS42 INS21 INS21 INS65 INS43 INS42 INS42 INS21 INS25 INS42 INS54 INS42 INS25 INS42 INS25 INS25 INS60 INS24 INS25 INS42 INS42 INS57 UPD42 MOV42 INS42 INS42 INS7 INS7 INS42 INS42 INS7 INS62 INS8 INS8 MOV8 INS12 INS27 INS8 INS8 INS27 INS8 INS8 INS27 INS8 INS8 MOV5 INS59 INS58 INS27 INS37 INS8 UPD42 INS27 INS8 INS8 INS43 INS42 INS3 INS22 INS42 INS22 INS42 INS42 INS43 INS60 INS21 INS21 INS21 MOV21 MOV21 MOV21 INS44 INS8 INS42 INS33 INS53 INS21 INS24 INS42 INS33 INS21 INS54 INS42 INS33 INS41 INS54 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS54 INS42 INS33 INS41 INS54 INS42 INS5 INS34 INS52 INS42 INS52 INS42 INS42 INS43 INS59 INS7 INS7 INS7 INS32 INS32 INS32 INS43 INS42 INS53 INS14 INS7 INS58 INS27 INS37 INS8 INS7 INS8 INS12 INS33 INS8 INS12 INS5 INS40 INS42 INS34 INS8 INS12 INS33 INS8 INS12 INS43 INS85 INS42 INS42 INS22 INS42 INS32 INS42 INS32 INS42 INS32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS32 INS42 INS14 INS43 INS45 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS54 INS42 INS33 MOV21 INS44 INS8 MOV41 INS44 INS8 INS43 INS85 INS21 INS44 INS8 MOV41 INS44 INS8 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS5 INS40 INS42 INS34 INS8 INS12 INS43 INS42 INS53 INS32 INS43 INS42 INS21 INS41 INS42 INS7 INS43 INS42 INS21 INS21 INS32 INS43 INS42 INS21 INS41 INS11 INS42 INS43 INS85 MOV21 INS44 INS8 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS2 INS32 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS53 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS45 INS42 INS2 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS2 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS2 INS43 INS42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL42 DEL7 DEL42 DEL7 DEL42 DEL7 DEL42 DEL42 DEL42 DEL8 DEL42 DEL8 DEL42 DEL8 DEL42 DEL8