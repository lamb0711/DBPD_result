- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.Repository;
+import javax.jcr.Repository;
-import java.util.Properties;
-import java.io.*;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
- * <p>
+ * <p/>
- *
- * @version $Revision: 1.3 $, $Date: 2004/05/04 12:06:31 $
- * @author Marcel Reutegger
-        if (env == null) throw new IllegalArgumentException("Parameter 'env' must not be null!");
+        if (env == null) {
+            throw new IllegalArgumentException("Parameter 'env' must not be null!");
+        }
-	superuser = new SimpleCredentials(env.getProperty(PROP_SUPERUSER_NAME, ""),
-		env.getProperty(PROP_SUPERUSER_PWD, "").toCharArray());
-	readonly = new SimpleCredentials(env.getProperty(PROP_READONLY_NAME, ""),
-		env.getProperty(PROP_READONLY_PWD, "").toCharArray());
-	readwrite = new SimpleCredentials(env.getProperty(PROP_READWRITE_NAME, ""),
-		env.getProperty(PROP_READWRITE_PWD, "").toCharArray());
+        superuser = new SimpleCredentials(env.getProperty(PROP_SUPERUSER_NAME, ""),
+                env.getProperty(PROP_SUPERUSER_PWD, "").toCharArray());
+        readonly = new SimpleCredentials(env.getProperty(PROP_READONLY_NAME, ""),
+                env.getProperty(PROP_READONLY_PWD, "").toCharArray());
+        readwrite = new SimpleCredentials(env.getProperty(PROP_READWRITE_NAME, ""),
+                env.getProperty(PROP_READWRITE_PWD, "").toCharArray());
-     * <p>
+     * <p/>
+     *
-	    if (implProp != null) {
-		File implPropFile = new File(implProp);
-		if (implPropFile.exists()) {
-		    props = new Properties();
-		    try {
-			props.load(new FileInputStream(implPropFile));
-		    } catch (IOException e) {
-			throw new RepositoryStubException("Unable to load config file: "
-				+ implProp + " " + e.toString());
-		    }
-		} else {
-		    throw new RepositoryStubException("File does not exist: " + implProp);
-		}
-	    }
+            if (implProp != null) {
+                File implPropFile = new File(implProp);
+                if (implPropFile.exists()) {
+                    props = new Properties();
+                    try {
+                        props.load(new FileInputStream(implPropFile));
+                    } catch (IOException e) {
+                        throw new RepositoryStubException("Unable to load config file: "
+                                + implProp + " " + e.toString());
+                    }
+                } else {
+                    throw new RepositoryStubException("File does not exist: " + implProp);
+                }
+            }
-	    if (props == null) {
-		InputStream is = RepositoryStub.class.getClassLoader().getResourceAsStream(STUB_IMPL_PROPS);
-		if (is == null) {
-		    throw new RepositoryStubException(STUB_IMPL_PROPS + " not found in classpath!");
-		}
-		try {
-		    props = new Properties();
-		    props.load(is);
-		} catch (IOException e) {
-		    throw new RepositoryStubException("Exception reading "
-			    + STUB_IMPL_PROPS + ": " + e.toString());
-		}
-	    }
+            if (props == null) {
+                InputStream is = RepositoryStub.class.getClassLoader().getResourceAsStream(STUB_IMPL_PROPS);
+                if (is == null) {
+                    throw new RepositoryStubException(STUB_IMPL_PROPS + " not found in classpath!");
+                }
+                try {
+                    props = new Properties();
+                    props.load(is);
+                } catch (IOException e) {
+                    throw new RepositoryStubException("Exception reading "
+                            + STUB_IMPL_PROPS + ": " + e.toString());
+                }
+            }
-                Constructor constr = stubClass.getConstructor(new Class[] {Properties.class});
-                instance = (RepositoryStub)constr.newInstance(new Object[] {props});
+                Constructor constr = stubClass.getConstructor(new Class[]{Properties.class});
+                instance = (RepositoryStub) constr.newInstance(new Object[]{props});
+     *
-     * <p>
+     * <p/>
-     *      <code>Repository</code> as 'superuser'.
+     *         <code>Repository</code> as 'superuser'.
-	return superuser;
+        return superuser;
-     * <p>
+     * <p/>
-     * <p>
+     * <p/>
-     *      <code>Repository</code> with read/write right.
+     *         <code>Repository</code> with read/write right.
-	return readwrite;
+        return readwrite;
-     * <p>
+     * <p/>
-     * <p>
+     * <p/>
-     *      <code>Repository</code> with read-only right.
+     *         <code>Repository</code> with read-only right.
-	return readonly;
+        return readonly;

MOV26 MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD66 INS8 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV53 DEL66 DEL65 DEL66 DEL65