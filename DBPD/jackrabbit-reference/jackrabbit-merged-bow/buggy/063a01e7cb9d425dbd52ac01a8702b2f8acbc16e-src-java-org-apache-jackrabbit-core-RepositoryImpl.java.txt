- refactored WorkspaceConfig and cleaned-up per-workspace objects 
  held in RepositoryImpl
- added PersistenceManagerConfig, RepositoryImpl.WorkspaceInfo, PMContext
- changed PersistenceManager initialization

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@106580 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.BeanMap;
+import org.apache.jackrabbit.core.config.PersistenceManagerConfig;
-import org.apache.jackrabbit.core.state.ItemStateException;
-import org.apache.jackrabbit.core.state.PersistentItemStateManager;
-import org.apache.jackrabbit.core.state.PersistentItemStateProvider;
-import org.apache.jackrabbit.core.state.ReferenceManager;
+import org.apache.jackrabbit.core.state.*;
+import java.util.Map;
-    // map of workspace names and workspace configurations
-    private final HashMap wspConfigs = new HashMap();
-
-     * map of workspace names and workspace item state managers
-     * (might be shared among multiple workspace instances representing
-     * the same named workspace, i.e. the same physical storage)
+     * map of workspace names and <code>WorkspaceInfo<code>s.
-    private final HashMap wspStateMgrs = new HashMap();
-
-    /**
-     * map of workspace names and workspace reference managers
-     * (might be shared among multiple workspace instances representing
-     * the same named workspace, i.e. the same physical storage)
-     */
-    private final HashMap wspRefMgrs = new HashMap();
-
-    // map of workspace names and observation managers
-    private final HashMap wspObsMgrFactory = new HashMap();
-
-    // map of search managers
-    private final HashMap wspSearchMgrs = new HashMap();
-
-    // map of workspace names and system sessions
-    private final HashMap wspSystemSessions = new HashMap();
+    private final HashMap wspInfos = new HashMap();
-            wspConfigs.put(config.getName(), config);
+            WorkspaceInfo info = new WorkspaceInfo(config);
+            wspInfos.put(config.getName(), info);
-        Iterator wspNames = wspConfigs.keySet().iterator();
+        Iterator wspNames = wspInfos.keySet().iterator();
-        iter = wspConfigs.values().iterator();
+        iter = wspInfos.values().iterator();
-            String wspName = ((WorkspaceConfig) iter.next()).getName();
+            String wspName = ((WorkspaceInfo) iter.next()).getName();
-        return (String[]) wspConfigs.keySet().toArray(new String[wspConfigs.keySet().size()]);
+        return (String[]) wspInfos.keySet().toArray(new String[wspInfos.keySet().size()]);
-        if (wspConfigs.containsKey(workspaceName)) {
+        if (wspInfos.containsKey(workspaceName)) {
-        repConfig.createWorkspaceConfig(workspaceName);
-        // add new configuration to map of workspace configs
-        wspConfigs.put(workspaceName, repConfig.getWorkspaceConfig(workspaceName));
+        WorkspaceConfig config = repConfig.createWorkspaceConfig(workspaceName);
+        WorkspaceInfo info = new WorkspaceInfo(config);
+        wspInfos.put(workspaceName, info);
-        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
-        if (wspConfig == null) {
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
-
-        synchronized (wspStateMgrs) {
-            // get/create per named workspace (i.e. per physical storage) item state manager
-            PersistentItemStateProvider stateMgr =
-                    (PersistentItemStateProvider) wspStateMgrs.get(workspaceName);
-            if (stateMgr == null) {
-                // create state manager
-                try {
-                    stateMgr = new PersistentItemStateManager(wspConfig.getPersistenceManager(), rootNodeUUID, ntReg);
-                } catch (ItemStateException ise) {
-                    String msg = "failed to instantiate the persistent state manager";
-                    log.error(msg, ise);
-                    throw new RepositoryException(msg, ise);
-                }
-                wspStateMgrs.put(workspaceName, stateMgr);
-            }
-            return stateMgr;
-        }
+        return wspInfo.getItemStateProvider();
-        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
-        if (wspConfig == null) {
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
-
-        synchronized (wspRefMgrs) {
-            ReferenceManager refMgr
-                    = (ReferenceManager) wspRefMgrs.get(workspaceName);
-            if (refMgr == null) {
-                // create reference mgr that uses the perstistence mgr configured
-                // in the workspace definition
-                refMgr = new ReferenceManager(wspConfig.getPersistenceManager());
-                wspRefMgrs.put(workspaceName, refMgr);
-            }
-            return refMgr;
-        }
+        return wspInfo.getReferenceManager();
-        if (!wspConfigs.containsKey(workspaceName)) {
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
-
-        synchronized (wspObsMgrFactory) {
-            ObservationManagerFactory obsMgr
-                    = (ObservationManagerFactory) wspObsMgrFactory.get(workspaceName);
-            if (obsMgr == null) {
-                obsMgr = new ObservationManagerFactory();
-                wspObsMgrFactory.put(workspaceName, obsMgr);
-            }
-            return obsMgr;
-        }
+        return wspInfo.getObservationManagerFactory();
-        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
-        if (wspConfig == null) {
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
-
-        synchronized (wspSearchMgrs) {
-            SearchManager searchMgr
-                    = (SearchManager) wspSearchMgrs.get(workspaceName);
-            if (searchMgr == null) {
-                try {
-                    if (wspConfig.getSearchConfig() == null) {
-                        // no search index configured
-                        return null;
-                    }
-                    SystemSession s = getSystemSession(workspaceName);
-                    searchMgr = new SearchManager(s, wspConfig.getSearchConfig());
-                } catch (IOException e) {
-                    throw new RepositoryException("Exception opening search index.", e);
-                }
-                wspSearchMgrs.put(workspaceName, searchMgr);
-            }
-            return searchMgr;
-        }
+        return wspInfo.getSearchManager();
-        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
-        if (wspConfig == null) {
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
-
-        synchronized (wspSystemSessions) {
-            SystemSession systemSession
-                    = (SystemSession) wspSystemSessions.get(workspaceName);
-            if (systemSession == null) {
-                systemSession = new SystemSession(this, wspConfig);
-                wspSystemSessions.put(workspaceName, systemSession);
-            }
-            return systemSession;
-        }
+        return wspInfo.getSystemSession();
-        // stop / dispose all ObservationManagers
-        for (Iterator it = wspObsMgrFactory.values().iterator(); it.hasNext();) {
-            ObservationManagerFactory obsMgr = (ObservationManagerFactory) it.next();
-            obsMgr.dispose();
-        }
-
-        // shutdown search managers
-        for (Iterator it = wspSearchMgrs.values().iterator(); it.hasNext();) {
-            SearchManager searchMgr = (SearchManager) it.next();
-            searchMgr.close();
-        }
-
-        // close system sessions
-        for (Iterator it = wspSystemSessions.values().iterator(); it.hasNext();) {
-            SessionImpl session = (SessionImpl) it.next();
-            session.removeListener(this);
-            session.logout();
-        }
-        wspSystemSessions.clear();
-
-        // dispose persistent item state  mgr's
-        for (Iterator it = wspStateMgrs.values().iterator(); it.hasNext();) {
-            PersistentItemStateManager stateMgr =
-                    (PersistentItemStateManager) it.next();
-            stateMgr.dispose();
-        }
-
-        // shutdown persistence managers & file systems
-        for (Iterator it = wspConfigs.values().iterator(); it.hasNext();) {
-            WorkspaceConfig wspConfig = (WorkspaceConfig) it.next();
-            try {
-                // close persistence manager
-                wspConfig.getPersistenceManager().close();
-            } catch (Exception e) {
-                log.error("error while closing persistence manager of workspace " + wspConfig.getName(), e);
-            }
-            try {
-                // close workspace file system
-                wspConfig.getFileSystem().close();
-            } catch (FileSystemException e) {
-                log.error("error while closing filesystem of workspace " + wspConfig.getName(), e);
-            }
+        // shut down workspaces 
+        for (Iterator it = wspInfos.values().iterator(); it.hasNext();) {
+            WorkspaceInfo wspInfo = (WorkspaceInfo) it.next();
+            wspInfo.dispose();
-        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
-        if (wspConfig == null) {
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
-            SessionImpl ses = new XASessionImpl(this, ANONYMOUS_CREDENTIALS, wspConfig, txMgr);
+            SessionImpl ses = new XASessionImpl(this, ANONYMOUS_CREDENTIALS, wspInfo.getConfig(), txMgr);
-            Session ses = new XASessionImpl(this, credentials, wspConfig, txMgr);
+            Session ses = new XASessionImpl(this, credentials, wspInfo.getConfig(), txMgr);
+
+    //--------------------------------------------------------< inner classes >
+    /**
+     * <code>WorkspaceInfo</code> holds the objects that are shared
+     * among multiple per-session <code>WorkspaceImpl</code> instances
+     * representing the same named workspace, i.e. the same physical
+     * storage.
+     */
+    class WorkspaceInfo {
+
+        /**
+         * workspace configuration
+         */
+        private final WorkspaceConfig config;
+
+        /**
+         * persistence manager
+         */
+        private PersistenceManager persistMgr;
+
+        /**
+         * item state provider
+         */
+        private PersistentItemStateManager itemStateMgr;
+
+        /**
+         * reference manager
+         */
+        private ReferenceManager refMgr;
+
+        /**
+         * system session
+         */
+        private SystemSession systemSession;
+
+        /**
+         * observation manager factory
+         */
+        private ObservationManagerFactory obsMgrFactory;
+
+        /**
+         * search manager
+         */
+        private SearchManager searchMgr;
+
+        /**
+         * Creates a new <code>WorkspaceInfo</code> based on the given
+         * <code>config</code>.
+         *
+         * @param config workspace configuration
+         */
+        WorkspaceInfo(WorkspaceConfig config) {
+            this.config = config;
+        }
+
+        /**
+         * Returns the workspace name
+         *
+         * @return the workspace name
+         */
+        String getName() {
+            return config.getName();
+        }
+
+        /**
+         * Returns the workspace file system
+         *
+         * @return the workspace file system
+         */
+        FileSystem getFileSystem() {
+            return config.getFileSystem();
+        }
+
+        /**
+         * Returns the workspace configuration
+         *
+         * @return the workspace configuration
+         */
+        WorkspaceConfig getConfig() {
+            return config;
+        }
+
+        /**
+         * Returns the workspace persistence manager
+         *
+         * @return the workspace persistence manager
+         * @throws RepositoryException if the persistence manager could not be instantiated/initialized
+         */
+        synchronized PersistenceManager getPersistenceManager() throws RepositoryException {
+            if (persistMgr == null) {
+                PersistenceManagerConfig pmConfig = config.getPersistenceManagerConfig();
+                String className = pmConfig.getClassName();
+                Map params = pmConfig.getParameters();
+                try {
+                    Class c = Class.forName(className);
+                    persistMgr = (PersistenceManager) c.newInstance();
+                    /**
+                     * set the properties of the persistence manager object
+                     * from the param map
+                     */
+                    BeanMap bm = new BeanMap(persistMgr);
+                    Iterator iter = params.keySet().iterator();
+                    while (iter.hasNext()) {
+                        Object name = iter.next();
+                        Object value = params.get(name);
+                        bm.put(name, value);
+                    }
+                    PMContext ctx = new PMContext(config, rootNodeUUID, nsReg, ntReg);
+                    persistMgr.init(ctx);
+                } catch (Exception e) {
+                    persistMgr = null;
+                    log.error("Cannot instantiate implementing class " + className, e);
+                    throw new RepositoryException("Cannot instantiate implementing class " + className, e);
+                }
+            }
+            return persistMgr;
+        }
+
+        /**
+         * Returns the system session for this workspace
+         *
+         * @return the system session for this workspace
+         * @throws RepositoryException if the system session could not be created
+         */
+        synchronized SystemSession getSystemSession() throws RepositoryException {
+            if (systemSession == null) {
+                systemSession = new SystemSession(RepositoryImpl.this, config);
+            }
+            return systemSession;
+        }
+
+        /**
+         * Returns the reference manager for this workspace
+         *
+         * @return the reference manager for this workspace
+         * @throws RepositoryException if the reference manager could not be created
+         */
+        synchronized ReferenceManager getReferenceManager()
+                throws RepositoryException {
+            if (refMgr == null) {
+                // create reference mgr that uses this workspace's perstistence mgr
+                refMgr = new ReferenceManager(getPersistenceManager());
+            }
+            return refMgr;
+        }
+
+        /**
+         * Returns the workspace item state provider
+         *
+         * @return the workspace item state provider
+         * @throws RepositoryException if the workspace item state provider could not be created
+         */
+        synchronized PersistentItemStateProvider getItemStateProvider()
+                throws RepositoryException {
+            if (itemStateMgr == null) {
+                // create item state manager
+                try {
+                    itemStateMgr = new PersistentItemStateManager(getPersistenceManager(), rootNodeUUID, ntReg);
+                } catch (ItemStateException ise) {
+                    String msg = "failed to instantiate persistent item state manager";
+                    log.error(msg, ise);
+                    throw new RepositoryException(msg, ise);
+                }
+            }
+            return itemStateMgr;
+        }
+
+        /**
+         * Returns the observation manager factory for this workspace
+         *
+         * @return the observation manager factory for this workspace
+         */
+        synchronized ObservationManagerFactory getObservationManagerFactory() {
+            if (obsMgrFactory == null) {
+                obsMgrFactory = new ObservationManagerFactory();
+            }
+            return obsMgrFactory;
+        }
+
+        /**
+         * Returns the search manager for this workspace
+         *
+         * @return the search manager for this workspace
+         * @throws RepositoryException if the search manager could not be created
+         */
+        synchronized SearchManager getSearchManager() throws RepositoryException {
+            if (searchMgr == null) {
+                if (config.getSearchConfig() == null) {
+                    // no search index configured
+                    return null;
+                }
+                try {
+                    searchMgr = new SearchManager(getSystemSession(), config.getSearchConfig());
+                } catch (IOException ioe) {
+                    String msg = "failed to instantiate search manager";
+                    log.error(msg, ioe);
+                    throw new RepositoryException(msg, ioe);
+                }
+            }
+            return searchMgr;
+        }
+
+        /**
+         * Disposes all objects this <code>WorkspaceInfo</code> is holding.
+         */
+        void dispose() {
+            // dispose observation manager factory
+            if (obsMgrFactory != null) {
+                obsMgrFactory.dispose();
+                obsMgrFactory = null;
+            }
+
+            // shutdown search managers
+            if (searchMgr != null) {
+                searchMgr.close();
+                searchMgr = null;
+            }
+
+            // close system session
+            if (systemSession != null) {
+                systemSession.removeListener(RepositoryImpl.this);
+                systemSession.logout();
+                systemSession = null;
+            }
+
+            // dispose persistent item state mgr
+            if (itemStateMgr != null) {
+                itemStateMgr.dispose();
+                itemStateMgr = null;
+            }
+
+            // close persistence manager
+            if (persistMgr != null) {
+                try {
+                    persistMgr.close();
+                } catch (Exception e) {
+                    log.error("error while closing persistence manager of workspace " + config.getName(), e);
+                }
+                persistMgr = null;
+            }
+
+            // dispose reference manager
+            if (refMgr != null) {
+                //refMgr.dispose();
+                refMgr = null;
+            }
+
+            // close workspace file system
+            try {
+                // close workspace file system
+                config.getFileSystem().close();
+            } catch (FileSystemException e) {
+                log.error("error while closing filesystem of workspace " + config.getName(), e);
+            }
+        }
+    }

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 INS55 INS29 MOV43 INS42 MOV44 MOV43 INS43 INS8 MOV43 INS42 MOV44 MOV43 INS43 INS8 MOV43 INS42 MOV44 MOV43 INS8 MOV29 MOV43 INS42 MOV44 MOV43 MOV43 INS8 MOV43 INS42 MOV44 MOV43 INS43 INS8 MOV24 INS29 INS42 INS23 MOV23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 INS31 INS31 MOV31 INS65 MOV42 UPD42 INS60 INS60 INS21 INS42 MOV25 INS60 MOV25 INS41 INS42 MOV25 INS60 MOV25 INS41 MOV25 INS60 MOV25 INS41 MOV25 INS60 MOV25 INS41 INS42 MOV25 INS60 MOV25 INS41 MOV25 MOV25 MOV65 INS29 MOV83 MOV83 MOV43 MOV59 UPD43 INS29 MOV83 MOV43 INS59 INS29 UPD83 MOV83 MOV43 INS59 INS29 INS83 MOV43 MOV59 INS29 MOV83 MOV43 INS59 INS29 UPD83 MOV83 MOV43 INS59 INS29 INS42 INS44 INS8 INS29 INS43 INS42 INS8 INS29 INS43 INS42 INS8 INS29 MOV43 INS42 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 MOV43 INS42 MOV43 INS8 INS29 INS83 MOV43 INS42 MOV43 INS8 INS29 INS83 INS42 MOV8 INS29 INS83 MOV43 INS42 MOV8 INS29 INS83 MOV43 INS42 INS43 INS8 INS29 INS39 UPD42 INS66 MOV43 INS59 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS27 INS32 INS43 MOV27 INS25 UPD66 UPD66 UPD66 INS66 INS65 UPD42 UPD42 UPD42 INS65 INS42 INS65 INS42 INS65 UPD42 INS65 INS42 INS65 INS42 INS65 INS65 MOV43 INS42 INS21 INS65 INS65 UPD42 MOV42 INS41 INS65 INS65 UPD42 MOV42 INS41 INS65 INS65 INS41 INS65 INS65 INS65 UPD42 MOV42 UPD42 MOV42 INS25 INS41 INS65 INS65 INS65 INS25 MOV41 INS65 INS65 INS65 INS25 MOV41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 MOV25 MOV41 INS65 INS25 INS25 INS25 INS25 INS25 INS25 INS54 INS60 MOV5 UPD42 INS42 MOV32 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS11 UPD42 INS42 INS42 INS42 INS42 INS11 UPD42 INS42 INS42 INS42 INS42 INS11 UPD42 INS42 INS42 INS42 INS42 INS11 UPD42 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS42 INS42 INS42 UPD42 UPD42 MOV62 MOV8 MOV8 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS7 INS66 INS66 INS32 INS66 INS66 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS27 INS8 INS42 INS66 INS66 INS42 INS66 MOV27 INS8 INS66 INS66 INS42 INS66 MOV27 INS8 INS66 INS66 INS42 INS66 UPD42 INS66 INS66 UPD42 INS66 INS66 INS42 INS66 INS66 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS8 INS12 INS43 INS59 INS43 INS42 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS43 MOV43 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS33 MOV60 INS60 INS60 INS54 INS21 INS21 UPD42 UPD42 MOV25 INS54 INS42 INS33 INS21 INS21 INS42 INS33 MOV21 INS21 INS42 INS33 INS21 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS54 MOV21 INS42 INS33 INS21 INS21 MOV44 INS8 INS42 INS42 INS14 UPD42 UPD42 UPD42 UPD42 UPD42 MOV5 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 MOV43 INS52 INS42 UPD43 MOV43 INS59 INS43 INS59 INS8 INS12 INS7 INS7 INS8 INS12 INS32 INS7 INS7 INS32 INS32 INS7 INS32 INS7 INS8 INS12 INS7 INS32 MOV21 INS43 INS42 UPD42 INS43 UPD42 INS32 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS32 INS42 INS42 INS32 MOV60 MOV21 INS60 INS60 INS61 MOV60 INS21 MOV44 INS8 INS42 INS14 INS42 INS14 UPD42 MOV21 MOV44 INS8 INS42 INS42 INS42 INS33 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS21 INS44 INS8 UPD42 INS33 INS42 INS33 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 INS43 INS59 MOV43 INS59 INS32 INS8 UPD43 INS32 INS21 INS21 INS53 MOV43 INS52 INS42 MOV43 INS32 UPD42 UPD42 INS60 MOV21 INS53 INS42 INS32 INS43 INS42 INS21 INS42 INS42 UPD42 UPD42 INS27 UPD42 UPD43 INS42 INS42 INS42 UPD42 INS32 UPD42 INS11 INS42 INS42 INS14 INS42 INS32 UPD42 MOV42 INS42 INS60 MOV60 INS21 UPD42 UPD42 INS14 INS42 INS42 INS42 INS7 INS32 INS14 INS42 INS42 UPD42 INS43 INS43 INS59 INS14 INS42 INS42 UPD42 MOV42 INS32 INS45 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS43 INS42 INS32 UPD42 MOV42 INS43 INS59 UPD43 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS27 INS42 MOV43 INS27 INS42 MOV43 INS42 UPD45 MOV43 INS32 INS42 INS42 INS45 UPD42 UPD42 UPD42 UPD42 INS43 INS42 INS42 UPD42 MOV42 INS42 INS27 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS45 INS42 INS45 INS42 INS42 UPD42 INS42 INS45 INS32 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 DEL29 DEL23 DEL42 DEL43 DEL23 DEL43 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL43 DEL42 DEL43 DEL14 DEL59 DEL23 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL31 DEL42 DEL42 DEL51 DEL8 DEL31 DEL42 DEL42 DEL8 DEL51 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL52 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL42 DEL25 DEL42 DEL43 DEL14 DEL66 DEL66 DEL83 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL32 DEL11 DEL32 DEL11 DEL32 DEL14 DEL42 DEL43 DEL32 DEL11 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL51 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL52 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL25 DEL8 DEL51