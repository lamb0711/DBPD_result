JCR-890: concurrent read-only access to a session

Streamline the new ItemSaveOperation and related classes.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@957189 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-import java.util.Iterator;
-            String msg = "Unable to start edit operation";
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
+            throw new RepositoryException("Unable to start edit operation", e);
-
-
-        ItemState transientState;
-            Iterator<ItemState> iter = stateMgr.getDescendantTransientItemStates((NodeId) state.getId());
-            while (iter.hasNext()) {
-                transientState = iter.next();
+            for (ItemState transientState
+                    : stateMgr.getDescendantTransientItemStates(state.getId())) {
-        ArrayList<ItemState> removed = new ArrayList<ItemState>();
-        ItemState transientState;
-
-            Iterator<ItemState> iter = stateMgr.getDescendantTransientItemStatesInAttic((NodeId) state.getId());
-            while (iter.hasNext()) {
-                transientState = iter.next();
+            ArrayList<ItemState> removed = new ArrayList<ItemState>();
+            for (ItemState transientState
+                    : stateMgr.getDescendantTransientItemStatesInAttic(state.getId())) {
-                if (transientState.getStatus() == ItemState.STATUS_STALE_MODIFIED) {
-                    String msg = transientState.getId()
-                            + ": the item cannot be removed because it has been modified externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
-                }
-                if (transientState.getStatus() == ItemState.STATUS_STALE_DESTROYED) {
-                    String msg = transientState.getId()
-                            + ": the item cannot be removed because it has already been deleted externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
+                switch (transientState.getStatus()) {
+                case ItemState.STATUS_STALE_MODIFIED:
+                    throw new InvalidItemStateException(
+                            "Item can't be removed because it has been"
+                            + " modified externally: "
+                            + transientState.getId());
+                case ItemState.STATUS_STALE_DESTROYED:
+                    throw new InvalidItemStateException(
+                            "Item can't be removed because it has already"
+                            + " been deleted externally: "
+                            + transientState.getId());
+            return removed;
+        } else {
+            return Collections.emptyList();
-        return removed;
-     * Initializes the version history of all new nodes of node type
+     * Initialises the version history of all new nodes of node type
-     * <p/>
-     * Called by {@link #save()}.

MOV26 UPD40 INS8 INS25 INS42 MOV8 INS8 UPD66 INS70 INS70 INS41 INS44 MOV32 MOV8 INS44 MOV32 INS8 INS32 MOV43 INS42 MOV32 MOV43 INS42 MOV32 INS50 MOV21 INS42 INS42 INS45 MOV32 INS49 INS53 INS49 INS53 INS40 MOV14 INS40 MOV14 MOV43 MOV27 MOV32 MOV43 MOV27 MOV32 UPD45 INS45 UPD45 INS45 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL11 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL11 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL53 DEL8 DEL25 DEL8 DEL61 DEL8 DEL25 DEL66 DEL66 DEL42 DEL68 DEL65 DEL66