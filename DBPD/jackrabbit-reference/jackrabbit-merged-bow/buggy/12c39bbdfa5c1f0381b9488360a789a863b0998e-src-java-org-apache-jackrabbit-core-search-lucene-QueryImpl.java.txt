Redesigned query manager to support pluggable implementation for search index.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@124906 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.*;
+import org.apache.jackrabbit.core.search.OrderQueryNode;
+import org.apache.jackrabbit.core.QName;
+import org.apache.jackrabbit.core.NamespaceRegistryImpl;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.ItemManager;
+import org.apache.jackrabbit.core.Path;
+import org.apache.jackrabbit.core.MalformedPathException;
+import org.apache.jackrabbit.core.NoPrefixDeclaredException;
+import org.apache.jackrabbit.core.AccessManagerImpl;
+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.AccessManager;
+import org.apache.jackrabbit.core.NamespaceResolver;
+import org.apache.lucene.search.Hits;
+import org.apache.lucene.search.Query;
-import javax.jcr.*;
-import javax.jcr.query.Query;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Node;
+import javax.jcr.ItemExistsException;
+import javax.jcr.PathNotFoundException;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.io.IOException;
-public class QueryImpl implements Query {
+class QueryImpl implements javax.jcr.query.Query {
+    private final SearchIndex index;
+
-    private final SearchManager searchMgr;
-
-                     SearchManager searchMgr,
+                     SearchIndex index,
-        this.searchMgr = searchMgr;
+        this.index = index;
-                     SearchManager searchMgr,
+                     SearchIndex index,
-        this.searchMgr = searchMgr;
+        this.index = index;
-        return searchMgr.execute(itemMgr, root, session);
+        // build lucene query
+        Query query = LuceneQueryBuilder.createQuery(root,
+                session, index.getNamespaceMappings(), index.getAnalyzer());
+
+        OrderQueryNode orderNode = root.getOrderNode();
+        // FIXME according to spec this should be descending
+        // by default. this contrasts to standard sql semantics
+        // where default is ascending.
+        boolean[] orderSpecs = null;
+        String[] orderProperties = null;
+        if (orderNode != null) {
+            orderProperties = orderNode.getOrderByProperties();
+            orderSpecs = orderNode.getOrderBySpecs();
+        } else {
+            orderProperties = new String[0];
+            orderSpecs = new boolean[0];
+        }
+
+
+        List uuids;
+        AccessManagerImpl accessMgr = session.getAccessManager();
+
+        // execute it
+        try {
+            Hits result = index.executeQuery(query, orderProperties, orderSpecs);
+            uuids = new ArrayList(result.length());
+            for (int i = 0; i < result.length(); i++) {
+                String uuid = result.doc(i).get(FieldNames.UUID);
+                // check access
+                if (accessMgr.isGranted(new NodeId(uuid), AccessManager.READ)) {
+                    uuids.add(uuid);
+                }
+            }
+        } catch (IOException e) {
+            uuids = Collections.EMPTY_LIST;
+        }
+
+        // return QueryResult
+        return new QueryResultImpl(itemMgr,
+                (String[]) uuids.toArray(new String[uuids.size()]),
+                root.getSelectProperties());

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS43 INS40 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS54 INS41 UPD42 UPD42 MOV43 INS59 INS43 INS59 INS5 INS59 INS5 INS59 INS27 INS8 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS14 UPD42 UPD42 INS42 INS32 INS42 INS42 INS32 INS39 INS85 INS42 INS33 INS43 INS85 INS42 INS33 INS42 INS33 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS60 INS21 INS24 INS44 INS8 INS43 INS42 INS11 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS42 INS42 INS43 INS59 INS7 INS58 INS27 INS37 INS8 INS43 INS42 INS21 INS42 INS5 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS3 INS42 INS3 INS42 INS42 INS32 INS42 INS14 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS42 INS7 INS43 INS85 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS5 INS34 INS5 INS34 INS42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS32 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS40 INS42 INS5 INS32 INS43 INS85 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS40 INS21 INS43 INS85 INS42 INS42 INS42 INS32 INS42 INS40 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL32 DEL41