JCR-2076: JSR 283: Joins

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@768954 13f79535-47bb-0310-9956-ffa450edef68

-        JackrabbitIndexSearcher searcher = new JackrabbitIndexSearcher(session, reader);
+        JackrabbitIndexSearcher searcher = new JackrabbitIndexSearcher(
+                session, reader, getContext().getItemStateManager());
-                searcher.execute(query, sort, resultFetchHint)) {
+                searcher.execute(query, sort, resultFetchHint,
+                        QueryImpl.DEFAULT_SELECTOR_NAME)) {
+            public void close() throws IOException {
+                try {
+                    super.close();
+                } finally {
+                    PerQueryCache.getInstance().dispose();
+                    Util.closeOrRelease(reader);
+                }
+            }
+        };
+    }
+
+    /**
+     * Executes the query on the search index.
+     *
+     * @param session         the session that executes the query.
+     * @param query           the query.
+     * @param orderProps      name of the properties for sort order.
+     * @param orderSpecs      the order specs for the sort order properties.
+     *                        <code>true</code> indicates ascending order,
+     *                        <code>false</code> indicates descending.
+     * @param resultFetchHint a hint on how many results should be fetched.
+     * @return the query hits.
+     * @throws IOException if an error occurs while searching the index.
+     */
+    public MultiColumnQueryHits executeQuery(SessionImpl session,
+                                             MultiColumnQuery query,
+                                             Path[] orderProps,
+                                             boolean[] orderSpecs,
+                                             long resultFetchHint)
+            throws IOException {
+        checkOpen();
+
+        Sort sort = new Sort(createSortFields(orderProps, orderSpecs));
+
+        final IndexReader reader = getIndexReader();
+        JackrabbitIndexSearcher searcher = new JackrabbitIndexSearcher(
+                session, reader, getContext().getItemStateManager());
+        searcher.setSimilarity(getSimilarity());
+        return new FilterMultiColumnQueryHits(
+                query.execute(searcher, sort, resultFetchHint)) {
+     * @return the sort comparator source for this index.
+     */
+    protected SortComparatorSource getSortComparatorSource() {
+        return scs;
+    }
+
+    /**

INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS5 INS42 INS39 INS42 INS42 INS21 INS60 INS60 INS60 INS21 INS41 INS65 INS42 INS41 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS85 INS39 INS85 INS32 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS32 INS14 INS66 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS32 INS1 INS32 INS40 INS43 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS31 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS42 INS54 INS8 INS8 INS21 INS21 INS21 INS48 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42