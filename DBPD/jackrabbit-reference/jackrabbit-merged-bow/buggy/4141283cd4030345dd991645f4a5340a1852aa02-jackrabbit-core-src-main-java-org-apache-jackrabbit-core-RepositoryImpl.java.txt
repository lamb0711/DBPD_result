JCR-676 Participation of a workspace in a cluster should be configurable
+ Allow derived implementations of SharedItemStateManager


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@487178 13f79535-47bb-0310-9956-ffa450edef68

-        // initialize default workspace
-        String wspName = repConfig.getDefaultWorkspaceName();
-        try {
-            initWorkspace((WorkspaceInfo) wspInfos.get(wspName));
-        } catch (RepositoryException e) {
-            // if default workspace failed to initialize, shutdown again
-            log.error("Failed to initialize workspace '" + wspName + "'", e);
-            log.error("Unable to start repository, forcing shutdown...");
-            shutdown();
-            throw e;
-        }
+        // initialize startup workspaces
+        initStartupWorkspaces();
-        getSystemSearchManager(wspName);
-
-        // amount of time in seconds before an idle workspace is automatically
-        // shut down
-        int maxIdleTime = repConfig.getWorkspaceMaxIdleTime();
-        if (maxIdleTime != 0) {
-            // start workspace janitor thread
-            Thread wspJanitor = new Thread(new WorkspaceJanitor(maxIdleTime * 1000));
-            wspJanitor.setName("WorkspaceJanitor");
-            wspJanitor.setPriority(Thread.MIN_PRIORITY);
-            wspJanitor.setDaemon(true);
-            wspJanitor.start();
-        }
+        getSystemSearchManager(repConfig.getDefaultWorkspaceName());
+        // amount of time in seconds before an idle workspace is automatically
+        // shut down
+        int maxIdleTime = repConfig.getWorkspaceMaxIdleTime();
+        if (maxIdleTime != 0) {
+            // start workspace janitor thread
+            Thread wspJanitor = new Thread(new WorkspaceJanitor(maxIdleTime * 1000));
+            wspJanitor.setName("WorkspaceJanitor");
+            wspJanitor.setPriority(Thread.MIN_PRIORITY);
+            wspJanitor.setDaemon(true);
+            wspJanitor.start();
+        }
+
+     * Initialize startup workspaces. Base implementation will initialize the
+     * default workspace. Derived classes may initialize their own startup
+     * workspaces <b>after</b> having called the base implementation.
+     *
+     * @throws RepositoryException if an error occurs
+     */
+    protected void initStartupWorkspaces() throws RepositoryException {
+        String wspName = repConfig.getDefaultWorkspaceName();
+        try {
+            initWorkspace((WorkspaceInfo) wspInfos.get(wspName));
+        } catch (RepositoryException e) {
+            // if default workspace failed to initialize, shutdown again
+            log.error("Failed to initialize workspace '" + wspName + "'", e);
+            log.error("Unable to start repository, forcing shutdown...");
+            shutdown();
+            throw e;
+        }
+    }
+
+    /**
+    
+    /**
+     * Creates a <code>SharedItemStateManager</code> or derivative.
+     *
+     * @param persistMgr     persistence manager
+     * @param rootNodeId     root node id
+     * @param ntReg          node type registry
+     * @param usesReferences <code>true</code> if the item state manager should use
+     *                       node references to verify integrity of its reference properties;
+     *                       <code>false</code> otherwise
+     * @param cacheFactory   cache factory
+     * @return item state manager
+     * @throws ItemStateException if an error occurs
+     */ 
+    protected SharedItemStateManager createItemStateManager(PersistenceManager persistMgr,
+                                                            NodeId rootNodeId,
+                                                            NodeTypeRegistry ntReg,
+                                                            boolean usesReferences,
+                                                            ItemStateCacheFactory cacheFactory)
+            throws ItemStateException {
+
+        return new SharedItemStateManager(persistMgr, rootNodeId, ntReg, true, cacheFactory);
+    }
-                    if (clusterNode != null) {
+                    if (clusterNode != null && config.isClustered()) {
-                    itemStateMgr =
-                            new SharedItemStateManager(persistMgr, rootNodeId, ntReg, true, cacheFactory);
+                    itemStateMgr = createItemStateManager(persistMgr, rootNodeId, ntReg, true, cacheFactory);
-                    if (clusterNode != null) {
+                    if (clusterNode != null && config.isClustered()) {

INS31 INS31 MOV60 MOV25 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS21 INS65 INS65 INS42 MOV60 MOV54 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS41 INS32 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS42 MOV14 INS42 INS32 INS42 UPD42 MOV42 INS27 INS27 MOV27 INS32 INS32 MOV27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42