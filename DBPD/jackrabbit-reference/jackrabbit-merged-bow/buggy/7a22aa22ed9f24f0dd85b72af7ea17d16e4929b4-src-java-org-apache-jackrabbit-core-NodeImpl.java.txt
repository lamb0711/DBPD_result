Removed o.a.j.Constants and moved all name constants to o.a.j.name.QName in order to simplify package dependencies. Also added two new constants: QName.EMPTY and QName.WILDCARD.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@293034 13f79535-47bb-0310-9956-ffa450edef68

-            primaryTypeName = NT_UNSTRUCTURED;
+            primaryTypeName = QName.NT_UNSTRUCTURED;
-        if (nt.getQName().equals(MIX_REFERENCEABLE)) {
+        if (nt.getQName().equals(QName.MIX_REFERENCEABLE)) {
-            if (name.equals(JCR_UUID)) {
+            if (name.equals(QName.JCR_UUID)) {
-        } else if (nt.getQName().equals(NT_HIERARCHYNODE)) {
+        } else if (nt.getQName().equals(QName.NT_HIERARCHYNODE)) {
-            if (name.equals(JCR_CREATED)) {
+            if (name.equals(QName.JCR_CREATED)) {
-        } else if (nt.getQName().equals(NT_RESOURCE)) {
+        } else if (nt.getQName().equals(QName.NT_RESOURCE)) {
-            if (name.equals(JCR_LASTMODIFIED)) {
+            if (name.equals(QName.JCR_LASTMODIFIED)) {
-        } else if (nt.getQName().equals(NT_VERSION)) {
+        } else if (nt.getQName().equals(QName.NT_VERSION)) {
-            if (name.equals(JCR_CREATED)) {
+            if (name.equals(QName.JCR_CREATED)) {
-        } else if (nt.getQName().equals(NT_BASE)) {
+        } else if (nt.getQName().equals(QName.NT_BASE)) {
-            if (name.equals(JCR_PRIMARYTYPE)) {
+            if (name.equals(QName.JCR_PRIMARYTYPE)) {
-            } else if (name.equals(JCR_MIXINTYPES)) {
+            } else if (name.equals(QName.JCR_MIXINTYPES)) {
-        if (thisState.hasPropertyName(JCR_MIXINTYPES)) {
-            prop = (PropertyImpl) itemMgr.getItem(new PropertyId(thisState.getUUID(), JCR_MIXINTYPES));
+        if (thisState.hasPropertyName(QName.JCR_MIXINTYPES)) {
+            prop = (PropertyImpl) itemMgr.getItem(new PropertyId(thisState.getUUID(), QName.JCR_MIXINTYPES));
-            PropertyDefinitionImpl def = getApplicablePropertyDefinition(JCR_MIXINTYPES, PropertyType.NAME, true);
-            prop = createChildProperty(JCR_MIXINTYPES, PropertyType.NAME, def);
+            PropertyDefinitionImpl def = getApplicablePropertyDefinition(QName.JCR_MIXINTYPES, PropertyType.NAME, true);
+            prop = createChildProperty(QName.JCR_MIXINTYPES, PropertyType.NAME, def);
-            removeChildProperty(JCR_MIXINTYPES);
+            removeChildProperty(QName.JCR_MIXINTYPES);
-        if ((MIX_REFERENCEABLE.equals(mixinName)
-                || mixin.isDerivedFrom(MIX_REFERENCEABLE))
-                && !entRemaining.includesNodeType(MIX_REFERENCEABLE)) {
+        if ((QName.MIX_REFERENCEABLE.equals(mixinName)
+                || mixin.isDerivedFrom(QName.MIX_REFERENCEABLE))
+                && !entRemaining.includesNodeType(QName.MIX_REFERENCEABLE)) {
-        if (!isNodeType(MIX_REFERENCEABLE)) {
+        if (!isNodeType(QName.MIX_REFERENCEABLE)) {
-            while (m1.getDepth() != 0 && !m1.isNodeType(MIX_REFERENCEABLE)) {
+            while (m1.getDepth() != 0 && !m1.isNodeType(QName.MIX_REFERENCEABLE)) {
-        Property prop = internalSetProperty(JCR_ISCHECKEDOUT, InternalValue.create(false));
+        Property prop = internalSetProperty(QName.JCR_ISCHECKEDOUT, InternalValue.create(false));
-        prop = internalSetProperty(JCR_BASEVERSION, InternalValue.create(new UUID(v.getUUID())));
+        prop = internalSetProperty(QName.JCR_BASEVERSION, InternalValue.create(new UUID(v.getUUID())));
-        prop = internalSetProperty(JCR_PREDECESSORS, InternalValue.EMPTY_ARRAY, PropertyType.REFERENCE);
+        prop = internalSetProperty(QName.JCR_PREDECESSORS, InternalValue.EMPTY_ARRAY, PropertyType.REFERENCE);
-        Property prop = internalSetProperty(JCR_ISCHECKEDOUT, InternalValue.create(true));
+        Property prop = internalSetProperty(QName.JCR_ISCHECKEDOUT, InternalValue.create(true));
-        prop = internalSetProperty(JCR_PREDECESSORS,
+        prop = internalSetProperty(QName.JCR_PREDECESSORS,
-        return (VersionHistory) getProperty(JCR_VERSIONHISTORY).getNode();
+        return (VersionHistory) getProperty(QName.JCR_VERSIONHISTORY).getNode();
-        return (Version) getProperty(JCR_BASEVERSION).getNode();
+        return (Version) getProperty(QName.JCR_BASEVERSION).getNode();
-        if (!isNodeType(MIX_VERSIONABLE)) {
+        if (!isNodeType(QName.MIX_VERSIONABLE)) {
-        while (!m1.isNodeType(MIX_REFERENCEABLE)) {
+        while (!m1.isNodeType(QName.MIX_REFERENCEABLE)) {
-        if (!isNodeType(MIX_VERSIONABLE) || failedIds == null) {
+        if (!isNodeType(QName.MIX_VERSIONABLE) || failedIds == null) {
-        if (!srcNode.isNodeType(MIX_VERSIONABLE)) {
+        if (!srcNode.isNodeType(QName.MIX_VERSIONABLE)) {
-            Value[] vals = getProperty(JCR_PREDECESSORS).getValues();
+            Value[] vals = getProperty(QName.JCR_PREDECESSORS).getValues();
-            internalSetProperty(JCR_PREDECESSORS, v);
+            internalSetProperty(QName.JCR_PREDECESSORS, v);
-        if (hasProperty(JCR_MERGEFAILED)) {
-            Value[] vals = getProperty(JCR_MERGEFAILED).getValues();
+        if (hasProperty(QName.JCR_MERGEFAILED)) {
+            Value[] vals = getProperty(QName.JCR_MERGEFAILED).getValues();
-            internalSetProperty(JCR_MERGEFAILED, (InternalValue[]) null);
+            internalSetProperty(QName.JCR_MERGEFAILED, (InternalValue[]) null);
-            internalSetProperty(JCR_MERGEFAILED, vals);
+            internalSetProperty(QName.JCR_MERGEFAILED, vals);
-        while (!node.hasProperty(JCR_ISCHECKEDOUT)) {
+        while (!node.hasProperty(QName.JCR_ISCHECKEDOUT)) {
-        return node.getProperty(JCR_ISCHECKEDOUT).getBoolean();
+        return node.getProperty(QName.JCR_ISCHECKEDOUT).getBoolean();
-            if (p.getQName().equals(JCR_PRIMARYTYPE)
-                    || p.getQName().equals(JCR_MIXINTYPES)
-                    || p.getQName().equals(JCR_UUID)) {
+            if (p.getQName().equals(QName.JCR_PRIMARYTYPE)
+                    || p.getQName().equals(QName.JCR_MIXINTYPES)
+                    || p.getQName().equals(QName.JCR_UUID)) {
-            } else if (child.isNodeType(MIX_REFERENCEABLE)) {
+            } else if (child.isNodeType(QName.MIX_REFERENCEABLE)) {
-        internalSetProperty(JCR_ISCHECKEDOUT, InternalValue.create(true));
+        internalSetProperty(QName.JCR_ISCHECKEDOUT, InternalValue.create(true));
-        internalSetProperty(JCR_BASEVERSION, InternalValue.create(new UUID(version.getId())));
+        internalSetProperty(QName.JCR_BASEVERSION, InternalValue.create(new UUID(version.getId())));
-        internalSetProperty(JCR_PREDECESSORS, InternalValue.EMPTY_ARRAY, PropertyType.REFERENCE);
+        internalSetProperty(QName.JCR_PREDECESSORS, InternalValue.EMPTY_ARRAY, PropertyType.REFERENCE);
-        internalSetProperty(JCR_MERGEFAILED, (InternalValue[]) null);
+        internalSetProperty(QName.JCR_MERGEFAILED, (InternalValue[]) null);
-        internalSetProperty(JCR_ISCHECKEDOUT, InternalValue.create(false));
+        internalSetProperty(QName.JCR_ISCHECKEDOUT, InternalValue.create(false));
-        if (isNodeType(MIX_REFERENCEABLE)) {
+        if (isNodeType(QName.MIX_REFERENCEABLE)) {
-            if (prop.getQName().equals(JCR_VERSIONHISTORY)) {
+            if (prop.getQName().equals(QName.JCR_VERSIONHISTORY)) {
-            } else if (prop.getQName().equals(JCR_PREDECESSORS)) {
+            } else if (prop.getQName().equals(QName.JCR_PREDECESSORS)) {
-        if (!isNodeType(MIX_LOCKABLE) || isNew()) {
+        if (!isNodeType(QName.MIX_LOCKABLE) || isNew()) {
-        if (!isNodeType(MIX_LOCKABLE)) {
+        if (!isNodeType(QName.MIX_LOCKABLE)) {

