JCR-1104: JSR 283 support

Upgrade jackrabbit-jcar to JCR 2.0

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@770268 13f79535-47bb-0310-9956-ffa450edef68

+
+import org.apache.jackrabbit.commons.repository.ProxyRepository;
+import org.apache.jackrabbit.commons.repository.RepositoryFactory;
+
-public final class JCARepositoryHandle
-        implements Repository, Referenceable, Serializable {
+public final class JCARepositoryHandle extends ProxyRepository
+        implements Referenceable, Serializable {
-    public JCARepositoryHandle(JCAManagedConnectionFactory mcf, ConnectionManager cm) {
+    public JCARepositoryHandle(
+            JCAManagedConnectionFactory mcf, ConnectionManager cm) {
+        super(new JCARepositoryFactory(mcf));
-    public Session login()
-            throws LoginException, NoSuchWorkspaceException, RepositoryException {
-        return login(null, null);
-    }
-
-    /**
-     * Creates a new session.
-     */
-    public Session login(Credentials creds)
-            throws LoginException, NoSuchWorkspaceException, RepositoryException {
-        return login(creds, null);
-    }
-
-    /**
-     * Creates a new session.
-     */
-    public Session login(String workspace)
-            throws LoginException, NoSuchWorkspaceException, RepositoryException {
-        return login(null, workspace);
-    }
-
-    /**
-     * Creates a new session.
-     */
-            throws LoginException, NoSuchWorkspaceException, RepositoryException {
-        return login(new JCAConnectionRequestInfo(creds, workspace));
-    }
-
-    /**
-     * Creates a new session.
-     */
-    private Session login(JCAConnectionRequestInfo cri)
-            throws LoginException, NoSuchWorkspaceException, RepositoryException {
+            throws RepositoryException {
-            return (Session) cm.allocateConnection(mcf, cri);
+            return (Session) cm.allocateConnection(
+                    mcf, new JCAConnectionRequestInfo(creds, workspace));
-
-     * Return the descriptor keys.
-     */
-    public String[] getDescriptorKeys() {
-        return mcf.getRepository().getDescriptorKeys();
-    }
-
-    /**
-     * Return the descriptor for key.
-     */
-    public String getDescriptor(String key) {
-        return mcf.getRepository().getDescriptor(key);
-    }
-
-    /**
+
+    private static class JCARepositoryFactory
+            implements RepositoryFactory, Serializable {
+
+        private final JCAManagedConnectionFactory mcf;
+
+        public JCARepositoryFactory(JCAManagedConnectionFactory mcf) {
+            this.mcf = mcf;
+        }
+
+        public Repository getRepository() {
+            return mcf.getRepository();
+        }
+
+    }
+

INS26 INS26 INS40 INS40 INS43 INS55 UPD42 MOV42 UPD83 MOV44 MOV44 INS83 INS83 INS42 INS43 INS43 INS23 MOV31 MOV31 INS46 UPD42 MOV42 UPD42 MOV42 INS83 INS83 INS43 INS59 INS42 MOV43 INS42 MOV8 INS14 MOV8 UPD42 MOV42 INS42 UPD43 UPD42 INS21 INS43 INS42 UPD42 INS7 MOV32 INS42 INS11 INS22 INS42 MOV43 MOV32 INS52 INS42 INS42 UPD42 INS42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL43 DEL42 DEL33 DEL33 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL43 DEL43 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL31 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL42 DEL32 DEL41 DEL66 DEL65 DEL29 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8