JCR-1369: indexing-rules should allow wildcards for (global) property names

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@677952 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.name.Pattern;
+import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
+import org.apache.jackrabbit.spi.PathFactory;
+import org.apache.jackrabbit.spi.Path;
+     * The path factory instance.
+     */
+    private static final PathFactory PATH_FACTORY = PathFactoryImpl.getInstance();
+
+    /**
-                                                    + FieldNames.FULLTEXT_PREFIX + fieldName.substring(idx + 1);;
+                                                    + FieldNames.FULLTEXT_PREFIX + fieldName.substring(idx + 1);
-     * @return the property configurations defined in the <code>config</code>.
+     * @param propConfigs will be filled with exact <code>Name</code> to
+     *                    <code>PropertyConfig</code> mappings.
+     * @param namePatterns will be filled with <code>NamePattern</code>s.
-    private Map getPropertyConfigs(Node config)
+    private void createPropertyConfigs(Node config,
+                                       Map propConfigs,
+                                       List namePatterns)
-        Map configs = new HashMap();
-                // get property name
-                Name propName = resolver.getQName(getTextContent(n));
+                // get isRegexp flag
+                boolean isRegexp = false;
+                Node regexp = attributes.getNamedItem("isRegexp");
+                if (regexp != null) {
+                    isRegexp = Boolean.valueOf(
+                            regexp.getNodeValue()).booleanValue();
+                }
-                configs.put(propName, new PropertyConfig(boost, nodeScopeIndex));
+                PropertyConfig pc = new PropertyConfig(boost, nodeScopeIndex);
+
+                if (isRegexp) {
+                    namePatterns.add(new NamePattern(
+                            getTextContent(n), pc, resolver));
+                } else {
+                    Name propName = resolver.getQName(getTextContent(n));
+                    propConfigs.put(propName, pc);
+                }
-        return configs;
+    /**
+     * A property name pattern.
+     */
+    private static final class NamePattern {
+
+        /**
+         * The pattern to match.
+         */
+        private final Pattern pattern;
+
+        /**
+         * The associated configuration.
+         */
+        private final PropertyConfig config;
+
+        /**
+         * Creates a new name pattern.
+         *
+         * @param pattern the pattern as read from the configuration file.
+         * @param config the associated configuration.
+         * @param resolver a namespace resolver for parsing name from the
+         *                 configuration.
+         * @throws IllegalNameException if the prefix of the name pattern is
+         *                              illegal.
+         * @throws NamespaceException if the prefix of the name pattern cannot
+         *                            be resolved.
+         */
+        private NamePattern(String pattern,
+                            PropertyConfig config,
+                            NameResolver resolver)
+                throws IllegalNameException, NamespaceException {
+            String uri = Name.NS_DEFAULT_URI;
+            String localPattern = pattern;
+            int idx = pattern.indexOf(':');
+            if (idx != -1) {
+                // use a dummy local name to get namespace uri
+                uri = resolver.getQName(pattern.substring(0, idx) + ":a").getNamespaceURI();
+                localPattern = pattern.substring(idx + 1);
+            }
+            this.pattern = Pattern.name(uri, localPattern);
+            this.config = config;
+        }
+
+        /**
+         * @param path the path to match.
+         * @return <code>true</code> if <code>path</code> matches this name
+         *         pattern; <code>false</code> otherwise.
+         */
+        boolean matches(Path path) {
+            return pattern.match(path).isFullMatch();
+        }
+
+        /**
+         * @return the property configuration for this name pattern.
+         */
+        PropertyConfig getConfig() {
+            return config;
+        }
+    }
+
-        private final Map propConfigs;
+        private final Map propConfigs = new HashMap();
+
+        /**
+         * List of {@link NamePattern}s.
+         */
+        private final List namePatterns = new ArrayList();
-            this.propConfigs = getPropertyConfigs(config);
+            createPropertyConfigs(config, propConfigs, namePatterns);
-            return propConfigs.containsKey(propertyName);
+            return getConfig(propertyName) != null;
-            PropertyConfig config = (PropertyConfig) propConfigs.get(propertyName);
+            PropertyConfig config = getConfig(propertyName);
-         * be included in the node scope fulltext index. If there is not
+         * be included in the node scope fulltext index. If there is no
-            PropertyConfig config = (PropertyConfig) propConfigs.get(propertyName);
+            PropertyConfig config = getConfig(propertyName);
+         * @param propertyName name of a property.
+         * @return the property configuration or <code>null</code> if this
+         *         indexing rule does not contain a configuration for the given
+         *         property.
+         */
+        private PropertyConfig getConfig(Name propertyName) {
+            PropertyConfig config = (PropertyConfig) propConfigs.get(propertyName);
+            if (config != null) {
+                return config;
+            } else if (namePatterns.size() > 0) {
+                Path path = PATH_FACTORY.create(propertyName);
+                // check patterns
+                for (Iterator it = namePatterns.iterator(); it.hasNext(); ) {
+                    NamePattern np = (NamePattern) it.next();
+                    if (np.matches(path)) {
+                        return np.getConfig();
+                    }
+                }
+            }
+            return null;
+        }
+
+        /**
-                            return (NodeState) ism.getItemState(cne.getId());
+                            return ism.getItemState(cne.getId());

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS55 INS29 INS83 INS83 INS83 INS43 INS59 INS39 INS42 INS44 INS44 INS29 INS83 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS23 INS31 INS65 INS42 INS42 INS32 UPD65 INS65 MOV43 INS42 INS43 INS42 INS65 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS39 INS42 INS44 INS8 INS29 INS43 INS42 INS8 MOV59 INS29 INS83 INS83 INS43 INS59 MOV21 INS29 INS83 INS43 INS42 INS44 INS8 INS66 INS42 INS42 INS42 INS66 UPD66 INS42 INS66 UPD42 MOV42 INS66 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS21 INS21 INS65 INS65 INS43 INS42 INS41 INS65 INS42 INS41 UPD42 INS65 INS42 INS42 INS14 INS60 INS65 INS65 INS42 INS43 INS42 MOV60 INS25 INS41 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS7 INS7 INS42 INS66 INS66 INS66 INS42 INS32 INS66 INS42 INS66 INS65 INS66 INS43 INS32 INS27 UPD66 INS43 INS59 INS42 INS66 INS66 INS66 INS66 INS42 INS27 INS8 INS25 INS33 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS38 INS21 INS21 INS22 INS32 INS22 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS32 INS33 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS27 INS8 INS60 INS60 INS25 INS60 INS25 INS42 INS42 INS13 INS34 INS7 INS7 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS32 INS34 INS60 INS24 INS39 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS42 INS8 INS8 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS58 INS32 INS8 INS42 INS9 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 MOV14 INS21 MOV60 MOV21 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS45 INS7 INS32 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS32 INS42 INS42 INS14 UPD42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS41 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS43 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 DEL20 DEL43 DEL42 DEL60 DEL42 DEL41 DEL42 DEL59 DEL52 DEL42 DEL22 DEL32 DEL7 DEL42 DEL32 DEL42 DEL43 DEL42 DEL32 DEL11 DEL42 DEL43 DEL11