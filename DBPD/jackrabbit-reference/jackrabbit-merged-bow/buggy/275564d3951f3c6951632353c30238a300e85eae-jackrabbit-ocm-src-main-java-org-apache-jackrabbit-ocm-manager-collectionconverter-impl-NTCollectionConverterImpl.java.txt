- working on JCR-1339 : better support for Map. It is important to define an ID field in the class used for the Map elements. This ID will be used as a key in the map. 
- Rename ManagedHashMap into ManageableHashMap in ordrer to follow the same naming convention.
- Now, it is not necessary to define the ElementClassName if the Collection or the Map are parametrized like List<MyClass>

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@646938 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.ocm.exception.JcrMappingException;
-import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableCollectionUtil;
+import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableObjectsUtil;
+import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableMap;
+import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableObjects;
-                                      ManageableCollection collection) {
-        if (collection == null) {
+                                      ManageableObjects objects) {
+        if (objects == null) {
-        Iterator collectionIterator = collection.getIterator();
+        Iterator collectionIterator = objects.getIterator();
-                                      ManageableCollection collection) throws RepositoryException {
+                                      ManageableObjects objects) throws RepositoryException {
-        if (collection == null || !elementClassDescriptor.hasIdField()) {
+        if (objects == null || !elementClassDescriptor.hasIdField()) {
-        if (collection == null) {
+        if (objects == null) {
-        Iterator collectionIterator = collection.getIterator();
+        Iterator collectionIterator = objects.getIterator();
-    protected ManageableCollection doGetCollection(Session session,
+    protected ManageableObjects doGetCollection(Session session,
-        ManageableCollection collection = ManageableCollectionUtil.getManageableCollection(collectionFieldClass);
+        ManageableObjects objects = ManageableObjectsUtil.getManageableObjects(collectionFieldClass);
-            collection.addObject(item);
+            mapper.getClassDescriptorByClass(item.getClass());
+            if ( objects instanceof ManageableCollection)
+            	((ManageableCollection)objects).addObject(item);
+            else {
+            	if (!elementClassDescriptor.hasIdField())
+            	{
+            		throw new JcrMappingException("Impossible to use a map for the field : "
+            				                      + collectionDescriptor.getFieldName()
+            				                      + "in the class : " + collectionDescriptor.getCollectionClassName()
+            				                      + ". The element objects have no id field (check their OCM mapping)");
+            	}
+            	Object elementId = ReflectionUtils.getNestedProperty(item,
+            			                           elementClassDescriptor.getIdFieldDescriptor().getFieldName());
+                ((ManageableMap) objects).addObject(elementId, item);
+            }
+
-        return collection;
+        return objects;
-		QueryResult queryResult = getQuery(session, parentNode, elementClassDescriptor.getJcrType());    	
+		QueryResult queryResult = getQuery(session, parentNode, elementClassDescriptor.getJcrType());
-	
+
-    	String jcrExpression= "";    	
+    	String jcrExpression= "";
-    	
+
-    		
+

INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS43 UPD43 UPD42 UPD43 UPD42 INS42 UPD42 UPD42 INS43 UPD42 UPD42 UPD42 INS42 UPD42 INS21 INS25 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS62 INS21 INS8 INS42 INS42 INS32 INS42 MOV43 INS32 INS25 INS60 MOV21 INS42 INS42 INS36 INS42 INS42 INS38 INS8 INS43 INS59 INS11 INS32 INS53 INS42 INS42 INS32 INS36 INS42 MOV43 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS11 INS43 INS27 INS32 INS42 INS43 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42