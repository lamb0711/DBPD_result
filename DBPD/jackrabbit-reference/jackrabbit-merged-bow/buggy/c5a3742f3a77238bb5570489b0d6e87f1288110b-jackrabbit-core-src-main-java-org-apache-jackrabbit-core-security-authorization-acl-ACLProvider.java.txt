JCR-2646 : AccessControlManager#getEffectivePolicies(String) may expose AC content without proper permissions
JCR-2657 : DefaultAccessManager#hasPrivileges(String,Set,Privilege[]) doesn't close compiled permissions
JCR-2649 : Provide means to display the effective policies for a given set of principals

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@954964 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.util.ISO9075;
+import org.apache.jackrabbit.util.Text;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.NodeIterator;
+import javax.jcr.query.Query;
+import javax.jcr.query.QueryManager;
+import javax.jcr.query.QueryResult;
+import java.util.LinkedHashSet;
-     * @see org.apache.jackrabbit.core.security.authorization.AccessControlProvider#getEffectivePolicies(Path)
-     * @param absPath absolute path
+     * @see org.apache.jackrabbit.core.security.authorization.AccessControlProvider#getEffectivePolicies(org.apache.jackrabbit.spi.Path,org.apache.jackrabbit.core.security.authorization.CompiledPermissions)
-    public AccessControlPolicy[] getEffectivePolicies(Path absPath) throws ItemNotFoundException, RepositoryException {
+    public AccessControlPolicy[] getEffectivePolicies(Path absPath, CompiledPermissions permissions) throws ItemNotFoundException, RepositoryException {
-        collectAcls(node, acls);
+        collectAcls(node, permissions, acls);
-            // controlled.
+            // controlled. TODO: there should be a default policy in this case (see JCR-2331)
+     * @see org.apache.jackrabbit.core.security.authorization.AccessControlProvider#getEffectivePolicies(java.util.Set, CompiledPermissions)
+     */
+    public AccessControlPolicy[] getEffectivePolicies(Set<Principal> principals, CompiledPermissions permissions) throws RepositoryException {
+        String propName = ISO9075.encode(session.getJCRName(P_PRINCIPAL_NAME));
+
+        StringBuilder stmt = new StringBuilder("/jcr:root");
+        stmt.append("//element(*,");
+        stmt.append(session.getJCRName(NT_REP_ACE));
+        stmt.append(")[");
+        int i = 0;
+        for (Principal principal : principals) {
+            if (i > 0) {
+                stmt.append(" or ");
+            }
+            stmt.append("@");
+            stmt.append(propName);
+            stmt.append("='");
+            stmt.append(principal.getName().replaceAll("'", "''"));
+            stmt.append("'");
+            i++;
+        }
+        stmt.append("]");
+        
+        QueryResult result;
+        try {
+            QueryManager qm = session.getWorkspace().getQueryManager();
+            Query q = qm.createQuery(stmt.toString(), Query.XPATH);
+            result = q.execute();
+        } catch (RepositoryException e) {
+            log.error("Unexpected error while searching effective policies.", e.getMessage());            
+            throw new UnsupportedOperationException("Retrieve effective policies for set of principals not supported.", e);
+        }
+
+        Set<AccessControlPolicy> acls = new LinkedHashSet<AccessControlPolicy>();
+        for (NodeIterator it = result.getNodes(); it.hasNext();) {
+            NodeImpl aclNode = (NodeImpl) it.nextNode().getParent();
+            NodeImpl accessControlledNode = (NodeImpl) aclNode.getParent();
+            
+            if (isAccessControlled(accessControlledNode)) {
+                if (permissions.canRead(aclNode.getPrimaryPath(), aclNode.getNodeId())) {
+                    acls.add(new UnmodifiableAccessControlList(entryCollector.getEntries(accessControlledNode), accessControlledNode.getPath(), Collections.<String, Integer>emptyMap()));
+                } else {
+                    throw new AccessDeniedException("Access denied at " + Text.getRelativeParent(aclNode.getPath(), 1));
+                }
+            }
+        }
+
+        return acls.toArray(new AccessControlPolicy[acls.size()]);
+    }
+
+    /**
-    private void collectAcls(NodeImpl node, List<AccessControlList> acls) throws RepositoryException {
+    private void collectAcls(NodeImpl node, CompiledPermissions permissions, List<AccessControlList> acls) throws RepositoryException {
-            // retrieve the entries for the access controlled node
-            acls.add(new UnmodifiableAccessControlList(entryCollector.getEntries(node), node.getPath(), Collections.<String, Integer>emptyMap()));
+            if (permissions.grants(node.getPrimaryPath(), Permission.READ_AC)) {
+                // retrieve the entries for the access controlled node
+                acls.add(new UnmodifiableAccessControlList(entryCollector.getEntries(node), node.getPath(), Collections.<String, Integer>emptyMap()));
+            } else {
+                throw new AccessDeniedException("Access denied at " + node.getPath());
+            }
-            collectAcls(parentNode, acls);
+            collectAcls(parentNode, permissions, acls);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS44 INS29 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS44 INS43 INS42 INS65 INS43 INS85 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS60 INS70 INS21 INS60 INS54 INS60 INS24 INS41 INS43 INS42 INS42 INS68 INS42 INS43 INS43 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS39 INS59 INS44 INS42 INS8 INS32 INS43 INS59 INS8 INS12 INS74 INS59 INS58 INS32 INS8 INS32 INS42 INS8 INS69 INS42 INS40 INS42 INS69 INS69 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS34 INS43 INS42 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS60 INS60 INS21 INS44 INS8 INS43 INS43 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS3 INS25 UPD43 INS43 INS43 INS43 INS42 INS42 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS27 INS8 INS32 INS32 INS32 INS32 INS32 INS37 INS43 INS59 INS43 INS59 INS7 INS43 INS42 INS21 INS53 INS42 INS42 INS74 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS5 INS32 INS32 MOV8 INS8 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS14 INS43 INS43 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS25 INS43 INS85 INS42 INS42 INS42 INS42 INS32 INS40 INS53 INS42 INS32 INS32 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS45 INS32 INS43 INS45 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS32 INS8 INS8 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS53 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS45 INS32 INS42 INS42 INS14 INS43 INS27 INS42 INS42 INS43 INS32 INS32 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL66 DEL65