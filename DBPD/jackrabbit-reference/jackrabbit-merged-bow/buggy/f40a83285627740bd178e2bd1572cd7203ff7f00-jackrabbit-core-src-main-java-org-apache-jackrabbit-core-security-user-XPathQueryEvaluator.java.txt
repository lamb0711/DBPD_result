JCR-2829: Offset not working correctly in user/group query when restricting to group members

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1041761 13f79535-47bb-0310-9956-ffa450edef68

-        if (offset > 0) {
-            query.setOffset(offset);
+        // If we are scoped to a group and have an offset, we need to skip to that offset
+        // here (inefficient!) otherwise we can apply the offset in the query
+        if (builder.getGroupName() == null) {
+            if (offset > 0) {
+                query.setOffset(offset);
+            }
+            return toAuthorizables(execute(query));
-
-        return filter(toAuthorizables(execute(query)), builder.getGroupName(), builder.isDeclaredMembersOnly());
+        else {
+            Iterator<Authorizable> result = filter(toAuthorizables(execute(query)), builder.getGroupName(), builder.isDeclaredMembersOnly());
+            for (int c = 0; c < offset && result.hasNext(); c++) {
+                result.next();
+            }
+            return result;
+        }
-        if (groupName == null) {
-            predicate = Predicates.TRUE();
+        Authorizable groupAuth = userManager.getAuthorizable(groupName);
+        if (groupAuth == null || !groupAuth.isGroup()) {
+            predicate = Predicates.FALSE();
-            Authorizable groupAuth = userManager.getAuthorizable(groupName);
-            if (groupAuth == null || !groupAuth.isGroup()) {
-                predicate = Predicates.FALSE();
+            final Group group = (Group) groupAuth;
+            if (declaredMembersOnly) {
+                predicate = new Predicate<Authorizable>() {
+                    public boolean evaluate(Authorizable authorizable) {
+                        try {
+                            return authorizable != null && group.isDeclaredMember(authorizable);
+                        } catch (RepositoryException e) {
+                            log.warn("Cannot determine whether {} is member of group {}", authorizable, group);
+                            log.debug(e.getMessage(), e);
+                            return false;
+                        }
+                    }
+                };
+
-                final Group group = (Group) groupAuth;
-                if (declaredMembersOnly) {
-                    predicate = new Predicate<Authorizable>() {
-                        public boolean evaluate(Authorizable authorizable) {
-                            try {
-                                return authorizable != null && group.isDeclaredMember(authorizable);
-                            } catch (RepositoryException e) {
-                                log.warn("Cannot determine whether {} is member of group {}", authorizable, group);
-                                log.debug(e.getMessage(), e);
-                                return false;
-                            }
+                predicate = new Predicate<Authorizable>() {
+                    public boolean evaluate(Authorizable authorizable) {
+                        try {
+                            return authorizable != null && group.isMember(authorizable);
+                        } catch (RepositoryException e) {
+                            log.warn("Cannot determine whether {} is member of group {}", authorizable, group);
+                            log.debug(e.getMessage(), e);
+                            return false;
-                    };
-
-                }
-                else {
-                    predicate = new Predicate<Authorizable>() {
-                        public boolean evaluate(Authorizable authorizable) {
-                            try {
-                                return authorizable != null && group.isMember(authorizable);
-                            } catch (RepositoryException e) {
-                                log.warn("Cannot determine whether {} is member of group {}", authorizable, group);
-                                log.debug(e.getMessage(), e);
-                                return false;
-                            }
-                        }
-                    };
-                }
+                    }
+                };

MOV8 INS25 MOV60 MOV41 INS27 INS8 INS8 INS32 INS33 MOV25 MOV41 INS60 INS24 INS41 INS42 INS42 INS32 INS74 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS32 INS43 INS43 INS42 MOV32 INS39 INS59 INS27 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8