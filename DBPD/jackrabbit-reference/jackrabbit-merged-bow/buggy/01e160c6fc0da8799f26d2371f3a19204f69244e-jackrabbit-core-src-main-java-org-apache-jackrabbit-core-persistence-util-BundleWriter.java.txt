JCR-2762: Optimize bundle serialization

Avoid the extra byte in front of many names by writing out explicit counts before mixin types and properties.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1022909 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import org.apache.jackrabbit.core.persistence.util.NodePropBundle.PropertyEntry;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-        for (Name name : bundle.getMixinTypeNames()) {
-            writeName(name);
-        }
-        writeName(null);
+        writeMixinTypes(bundle);
-        for (Name pName : bundle.getPropertyNames()) {
-            // skip redundant primaryType, mixinTypes and uuid properties
-            if (pName.equals(NameConstants.JCR_PRIMARYTYPE)
-                || pName.equals(NameConstants.JCR_MIXINTYPES)
-                || pName.equals(NameConstants.JCR_UUID)) {
-                continue;
-            }
-            NodePropBundle.PropertyEntry pState = bundle.getPropertyEntry(pName);
-            if (pState == null) {
-                log.error("PropertyState missing in bundle: " + pName);
-            } else {
-                writeName(pName);
-                writeState(pState);
-            }
-        }
-        writeName(null);
+        writeProperties(bundle);
+    private void writeMixinTypes(NodePropBundle bundle) throws IOException {
+        Set<Name> mixins = bundle.getMixinTypeNames();
+        writeVarInt(mixins.size());
+        for (Name name : mixins) {
+            writeName(name);
+        }
+    }
+
+    private void writeProperties(NodePropBundle bundle) throws IOException {
+        Collection<PropertyEntry> properties = bundle.getPropertyEntries();
+        writeVarInt(properties.size());
+        for (PropertyEntry property : properties) {
+            writeState(property);
+        }
+    }
+
-     * Serializes a property entry. The serialization begins with a single
-     * byte that encodes the type and multi-valuedness of the property:
+     * Serializes a property entry. The serialization begins with the
+     * property name followed by a single byte that encodes the type and
+     * multi-valuedness of the property:
+        writeName(state.getName());
+

MOV26 INS26 INS40 UPD40 INS31 INS31 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 MOV21 MOV21 INS43 INS42 INS42 INS60 INS21 MOV70 INS43 INS42 INS42 INS60 INS21 INS70 INS21 INS42 INS74 INS59 INS32 INS42 INS42 INS74 INS59 INS32 INS44 INS42 INS8 UPD66 INS66 UPD66 INS32 UPD42 UPD42 UPD42 UPD42 INS43 MOV43 INS42 MOV32 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS43 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL18 DEL8 DEL25 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL70 DEL42 DEL33 DEL32 DEL21