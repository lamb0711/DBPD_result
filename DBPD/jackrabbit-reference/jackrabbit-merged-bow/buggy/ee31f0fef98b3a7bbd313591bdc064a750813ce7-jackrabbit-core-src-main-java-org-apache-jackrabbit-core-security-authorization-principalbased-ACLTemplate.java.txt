JCR-1588 JSR 283: Access Control

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@748247 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.NamespaceException;
-import java.util.Arrays;
+import java.util.Set;
-                    Entry entry = new Entry(principal, privileges, isAllow, restrictions);
+                    AccessControlEntry entry = createEntry(principal, privileges, isAllow, restrictions);
+    AccessControlEntry createEntry(Principal princ, Privilege[] privileges, boolean allow, Map restrictions) throws RepositoryException {
+        if (!principal.equals(princ)) {
+            throw new AccessControlException("Invalid principal. Expected: " + principal);
+        }
+        if (!allow && principal instanceof Group) {
+            throw new AccessControlException("For group principals permissions can only be added but not denied.");
+        }
+
+        Set rNames = restrictions.keySet();
+        if (!rNames.contains(jcrNodePathName)) {
+            throw new AccessControlException("Missing mandatory restriction: " + jcrNodePathName);
+        }
+
+        // make sure the nodePath restriction is of type PATH
+        Value v = (Value) restrictions.get(jcrNodePathName);
+        if (v.getType() != PropertyType.PATH) {
+            v = V_FACTORY.createValue(v.getString(), PropertyType.PATH);
+            restrictions.put(jcrNodePathName, v);
+        }
+        // ... and glob is of type STRING.
+        v = (Value) restrictions.get(jcrGlobName);
+        if (v != null && v.getType() != PropertyType.STRING) {
+            v = V_FACTORY.createValue(v.getString(), PropertyType.STRING);
+            restrictions.put(jcrGlobName, v);
+        }
+        return new Entry(princ, privileges, allow, restrictions);
+    }
+
+     * @see JackrabbitAccessControlList#getRestrictionNames()
+     */
+    public String[] getRestrictionNames() {
+        return new String[] {jcrNodePathName, jcrGlobName};
+    }
+
+    /**
+     * @see JackrabbitAccessControlList#getRestrictionType(String)
+     */
+    public int getRestrictionType(String restrictionName) {
+        if (jcrNodePathName.equals(restrictionName)) {
+            return PropertyType.PATH;
+        } else if (jcrGlobName.equals(restrictionName)) {
+            return PropertyType.STRING;
+        } else {
+            return PropertyType.UNDEFINED;
+        }
+    }
+
+    /**
-        Entry entry = new Entry(principal, privileges, isAllow, restrictions);
+        AccessControlEntry entry = createEntry(principal, privileges, isAllow, restrictions);
-        return (Entry[]) entries.toArray(new Entry[entries.size()]);
+        return (AccessControlEntry[]) entries.toArray(new AccessControlEntry[entries.size()]);
-        Entry(Principal principal, Privilege[] privileges, boolean allow, Map restrictions)
+        private Entry(Principal principal, Privilege[] privileges, boolean allow, Map restrictions)
-            checkValidEntry();
+            Value np = getRestriction(jcrNodePathName);
-        private void checkValidEntry() throws AccessControlException, NamespaceException {
-            if (!principal.equals(getPrincipal())) {
-                throw new AccessControlException("Invalid principal. Expected: " + principal);
-            }
-            if (!isAllow() && getPrincipal() instanceof Group) {
-                throw new AccessControlException("For group principals permissions can only be added but not denied.");
-            }
-
-            String[] rNames = getRestrictionNames();
-            if (!Arrays.asList(rNames).contains(jcrNodePathName)) {
-                throw new AccessControlException("Missing mandatory restriction: " + jcrNodePathName);
-            }
-        }
-

MOV26 UPD40 INS31 INS31 INS31 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS42 INS5 INS42 INS39 INS42 INS43 INS42 INS42 MOV25 MOV25 INS60 MOV25 INS60 INS25 INS21 INS25 INS41 INS65 INS43 INS85 INS41 INS65 INS43 INS42 INS25 INS83 INS42 INS43 INS85 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS14 INS68 INS42 INS3 INS68 INS42 INS32 INS8 INS25 INS43 INS60 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS32 INS40 INS21 INS21 INS42 INS11 INS27 INS27 INS21 INS21 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 MOV5 INS4 INS42 INS42 INS69 INS42 INS42 INS42 INS41 INS32 INS8 INS8 INS42 INS32 UPD5 INS43 INS59 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV42 INS43 INS32 INS42 INS42 INS7 INS32 INS43 INS32 INS42 INS33 INS32 INS40 INS7 INS32 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS41 INS41 INS42 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS40 UPD42 UPD5 UPD42 MOV42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS40 UPD43 INS42 INS42 INS42 INS42 UPD42 UPD43 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31