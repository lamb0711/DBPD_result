JCR-2245: Make QValueFactoryImpl extensible

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@802695 13f79535-47bb-0310-9956-ffa450edef68

+import java.math.BigDecimal;
+import java.net.URI;
+import java.io.UnsupportedEncodingException;
+import javax.jcr.ValueFormatException;
+import org.apache.jackrabbit.spi.Path;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.jackrabbit.util.ISO8601;
-     * logger instance
-     */
-    private static final Logger log = LoggerFactory.getLogger(AbstractQValueFactory.class);
-
-
-    /**
-        final String userId = "undefined";
-
+
+    /**
+     * @see QValueFactory#create(String, int)
+     */
+    public QValue create(String value, int type) throws RepositoryException {
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+
+        try {
+            switch (type) {
+                case PropertyType.BOOLEAN:
+                    return create(Boolean.valueOf(value));
+                case PropertyType.DATE: {
+                        Calendar cal = ISO8601.parse(value);
+                        if (cal == null) {
+                            throw new ValueFormatException("not a valid date: " + value);
+                        }
+                        return create(cal);
+                    }
+                case PropertyType.DOUBLE:
+                    return create(Double.valueOf(value));
+                case PropertyType.LONG:
+                    return create(Long.valueOf(value));
+                case PropertyType.DECIMAL:
+                    return create(new BigDecimal(value));
+                case PropertyType.URI:
+                    return create(URI.create(value));
+                case PropertyType.PATH:
+                    return create(PATH_FACTORY.create(value));
+                case PropertyType.NAME:
+                    return create(NAME_FACTORY.create(value));
+                case PropertyType.STRING:
+                    return createString(value);
+                case PropertyType.REFERENCE:
+                    return createReference(value, false);
+                case PropertyType.WEAKREFERENCE:
+                    return createReference(value, true);
+                case PropertyType.BINARY:
+                    return create(value.getBytes(DEFAULT_ENCODING));
+                // default: invalid type specified -> see below.
+            }
+        } catch (IllegalArgumentException ex) {
+            // given String value cannot be converted to Long/Double/Path/Name
+            throw new ValueFormatException(ex);
+        } catch (UnsupportedEncodingException ex) {
+            throw new RepositoryException(ex);
+        }
+
+        // invalid type specified:
+        throw new IllegalArgumentException("illegal type " + type);
+    }
+
+    /**
+     * @see QValueFactory#create(Calendar)
+     */
+    public QValue create(Calendar value) throws RepositoryException {
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        // Calendar is not constant, must create a clone
+        return new DefaultQValue((Calendar) value.clone());
+    }
+
+    /**
+     * @see QValueFactory#create(double)
+     */
+    public QValue create(double value) throws RepositoryException {
+        return new DefaultQValue(value);
+    }
+
+    /**
+     * @see QValueFactory#create(long)
+     */
+    public QValue create(long value) throws RepositoryException {
+        return new DefaultQValue(value);
+    }
+
+    /**
+     * @see QValueFactory#create(boolean)
+     */
+    public QValue create(boolean value) throws RepositoryException {
+        if (value) {
+            return DefaultQValue.TRUE;
+        } else {
+            return DefaultQValue.FALSE;
+        }
+    }
+
+    /**
+     * @see QValueFactory#create(Name)
+     */
+    public QValue create(Name value) throws RepositoryException {
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        return new DefaultQValue(value);
+    }
+
+    /**
+     * @see QValueFactory#create(Path)
+     */
+    public QValue create(Path value) throws RepositoryException {
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        return new DefaultQValue(value);
+    }
+
+    /**
+     * @see QValueFactory#create(URI)
+     */
+    public QValue create(URI value) throws RepositoryException {
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        return new DefaultQValue(value);
+    }
+
+    /**
+     * @see QValueFactory#create(URI)
+     */
+    public QValue create(BigDecimal value) throws RepositoryException {
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        return new DefaultQValue(value);
+    }
+
+    /**
+     * Creates a new QValue of type STRING.
+     *
+     * @param value the string value.
+     * @return a new QValue.
+     */
+    protected QValue createString(String value) {
+        return new DefaultQValue(value, PropertyType.STRING);
+    }
+
+    /**
+     * Creates a new QValue of type REFERENCE or WEAKREFERENCE.
+     *
+     * @param ref the reference value.
+     * @param weak whether the reference is weak.
+     * @return a new QValue.
+     */
+    protected QValue createReference(String ref, boolean weak) {
+        if (weak) {
+            return new DefaultQValue(ref, PropertyType.WEAKREFERENCE);
+        } else {
+            return new DefaultQValue(ref, PropertyType.REFERENCE);
+        }
+    }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS8 UPD65 MOV65 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS54 INS53 INS65 INS42 INS43 INS42 INS42 INS25 INS41 INS65 UPD42 MOV42 INS39 INS42 INS42 INS41 INS65 INS42 INS39 INS42 INS42 INS41 INS65 INS42 INS39 INS42 INS42 INS25 INS65 INS42 INS43 INS42 INS42 INS25 INS41 INS65 INS42 INS43 INS42 INS42 INS25 INS41 INS65 INS42 INS43 INS42 INS42 INS25 INS41 INS65 INS42 INS43 INS42 INS42 INS25 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS25 INS68 INS42 INS27 INS8 INS8 INS12 INS12 INS14 INS68 INS42 INS27 INS8 INS14 INS68 INS14 INS68 INS14 INS68 INS42 INS8 INS8 INS68 INS42 INS27 INS8 INS14 INS68 INS42 INS27 INS8 INS14 INS68 INS42 INS27 INS8 INS14 INS68 INS42 INS27 INS8 INS14 INS66 INS42 INS66 INS66 INS42 INS14 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS8 INS8 INS42 INS42 INS69 INS69 INS42 INS33 INS53 INS50 INS44 INS8 INS44 INS8 INS43 INS27 INS42 INS42 INS69 INS42 INS33 INS53 INS43 INS11 INS42 INS42 INS69 INS43 INS42 INS42 INS42 INS69 INS43 INS42 INS42 INS42 INS69 INS41 INS41 INS42 INS42 INS69 INS42 INS33 INS53 INS43 INS42 INS42 INS42 INS69 INS42 INS33 INS53 INS43 INS42 INS42 INS42 INS69 INS42 INS33 INS53 INS43 INS42 INS42 INS42 INS69 INS42 INS33 INS53 INS43 INS42 INS43 INS42 INS40 INS41 INS41 MOV43 INS39 INS14 INS42 INS49 INS41 INS49 INS8 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS45 INS42 INS43 INS14 INS42 INS43 INS32 INS39 INS42 INS39 UPD42 MOV42 INS39 INS40 INS40 INS43 INS14 INS42 INS43 INS14 INS42 INS43 INS14 INS42 INS43 INS14 INS42 INS42 INS14 INS14 INS43 INS45 INS40 INS32 INS40 INS60 INS25 INS41 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS42 INS14 INS42 INS14 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS43 INS45 INS42 INS43 INS45 INS42 INS43 INS45 INS43 INS42 INS40 INS43 INS42 INS40 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS32 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS27 INS42 INS45 INS42 DEL29 DEL83 DEL83 DEL83 DEL43 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL83 DEL42 DEL45 DEL59 DEL60 DEL66