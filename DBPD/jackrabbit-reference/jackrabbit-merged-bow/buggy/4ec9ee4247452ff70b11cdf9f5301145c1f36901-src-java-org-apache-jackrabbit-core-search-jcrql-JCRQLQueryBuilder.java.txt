- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.search.QueryRootNode;
-import org.apache.jackrabbit.core.search.NAryQueryNode;
-import org.apache.jackrabbit.core.search.NodeTypeQueryNode;
-import org.apache.jackrabbit.core.search.AndQueryNode;
-import org.apache.jackrabbit.core.search.PathQueryNode;
-import org.apache.jackrabbit.core.search.OrQueryNode;
-import org.apache.jackrabbit.core.search.NotQueryNode;
-import org.apache.jackrabbit.core.search.RelationQueryNode;
-import org.apache.jackrabbit.core.search.Constants;
-import org.apache.jackrabbit.core.search.TextsearchQueryNode;
-import org.apache.jackrabbit.core.search.OrderQueryNode;
+import org.apache.jackrabbit.core.search.*;
- *
- * @author Marcel Reutegger
- * @version $Revision:  $, $Date:  $
-	this.stmt = stmt;
+        this.stmt = stmt;
-	    throws InvalidQueryException {
-	try {
-	    JCRQLQueryBuilder builder = new JCRQLQueryBuilder(JCRQLParser.parse(statement));
-	    return builder.getRootNode();
-	} catch (ParseException e) {
-	    throw new InvalidQueryException(e.getMessage());
-	}
+            throws InvalidQueryException {
+        try {
+            JCRQLQueryBuilder builder = new JCRQLQueryBuilder(JCRQLParser.parse(statement));
+            return builder.getRootNode();
+        } catch (ParseException e) {
+            throw new InvalidQueryException(e.getMessage());
+        }
-	if (root == null) {
-	    root = (QueryRootNode) stmt.jjtAccept(this, null);
-	}
-	return root;
+        if (root == null) {
+            root = (QueryRootNode) stmt.jjtAccept(this, null);
+        }
+        return root;
-	// FIXME throw exception? unsupported
-	return data;
+        // FIXME throw exception? unsupported
+        return data;
-	QueryRootNode root = new QueryRootNode();
+        QueryRootNode root = new QueryRootNode();
-	node.childrenAccept(this, root);
-	// pass to select, from, location, where, textsearch clause
-	return root;
+        node.childrenAccept(this, root);
+        // pass to select, from, location, where, textsearch clause
+        return root;
-	QueryRootNode root = (QueryRootNode) data;
-	String[] properties = node.getProperties();
-	for (int i = 0; i < properties.length; i++) {
-	    root.addSelectProperty(properties[i]);
-	}
-	return data;
+        QueryRootNode root = (QueryRootNode) data;
+        String[] properties = node.getProperties();
+        for (int i = 0; i < properties.length; i++) {
+            root.addSelectProperty(properties[i]);
+        }
+        return data;
-	QueryRootNode root = (QueryRootNode) data;
-	// add node type query to parent
-	node.childrenAccept(this, root.getConstraintNode());
+        QueryRootNode root = (QueryRootNode) data;
+        // add node type query to parent
+        node.childrenAccept(this, root.getConstraintNode());
-	return data;
+        return data;
-	parent.addOperand(new NodeTypeQueryNode(parent, node.getName()));
-	return parent;
+        parent.addOperand(new NodeTypeQueryNode(parent, node.getName()));
+        return parent;
-	QueryRootNode root = (QueryRootNode) data;
-	root.setLocationNode(new PathQueryNode(root, node.getStringLocation(),
-		node.getType()));
-	return root;
+        QueryRootNode root = (QueryRootNode) data;
+        root.setLocationNode(new PathQueryNode(root, node.getStringLocation(),
+                node.getType()));
+        return root;
-	QueryRootNode root = (QueryRootNode) data;
+        QueryRootNode root = (QueryRootNode) data;
-	return node.childrenAccept(this, root.getConstraintNode());
+        return node.childrenAccept(this, root.getConstraintNode());
-	NAryQueryNode parent = (NAryQueryNode) data;
-	OrQueryNode orQuery = new OrQueryNode(parent);
-	// pass to operands
-	node.childrenAccept(this, orQuery);
+        NAryQueryNode parent = (NAryQueryNode) data;
+        OrQueryNode orQuery = new OrQueryNode(parent);
+        // pass to operands
+        node.childrenAccept(this, orQuery);
-	parent.addOperand(orQuery);
-	return parent;
+        parent.addOperand(orQuery);
+        return parent;
-	NAryQueryNode parent = (NAryQueryNode) data;
-	AndQueryNode andQuery = new AndQueryNode(parent);
-	// pass to operands
-	node.childrenAccept(this, andQuery);
+        NAryQueryNode parent = (NAryQueryNode) data;
+        AndQueryNode andQuery = new AndQueryNode(parent);
+        // pass to operands
+        node.childrenAccept(this, andQuery);
-	parent.addOperand(andQuery);
-	return parent;
+        parent.addOperand(andQuery);
+        return parent;
-	NAryQueryNode parent = (NAryQueryNode) data;
-	NotQueryNode notQuery = new NotQueryNode(parent);
-	// pass to operand
-	node.childrenAccept(this, notQuery);
+        NAryQueryNode parent = (NAryQueryNode) data;
+        NotQueryNode notQuery = new NotQueryNode(parent);
+        // pass to operand
+        node.childrenAccept(this, notQuery);
-	parent.addOperand(notQuery);
-	return parent;
+        parent.addOperand(notQuery);
+        return parent;
-	NAryQueryNode parent = (NAryQueryNode) data;
-	ASTValue value = (ASTValue) node.jjtGetChild(0);
-	int type = value.getType();
-	RelationQueryNode rel = null;
+        NAryQueryNode parent = (NAryQueryNode) data;
+        ASTValue value = (ASTValue) node.jjtGetChild(0);
+        int type = value.getType();
+        RelationQueryNode rel = null;
-	if (type == Constants.TYPE_DATE) {
-	    Date date = ISO8601.parse(value.getValue()).getTime();
-	    rel = new RelationQueryNode(parent,
-		    node.getProperty(),
-		    date,
-		    node.getOperationType());
-	} else if (type == Constants.TYPE_DOUBLE) {
-	    double d = Double.parseDouble(value.getValue());
-	    rel = new RelationQueryNode(parent,
-		    node.getProperty(),
-		    d,
-		    node.getOperationType());
-	} else if (type == Constants.TYPE_LONG) {
-	    long l = Long.parseLong(value.getValue());
-	    rel = new RelationQueryNode(parent,
-		    node.getProperty(),
-		    l,
-		    node.getOperationType());
-	} else if (type == Constants.TYPE_STRING) {
-	    rel = new RelationQueryNode(parent,
-		    node.getProperty(),
-		    value.getValue(),
-		    node.getOperationType());
-	}
+        if (type == Constants.TYPE_DATE) {
+            Date date = ISO8601.parse(value.getValue()).getTime();
+            rel = new RelationQueryNode(parent,
+                    node.getProperty(),
+                    date,
+                    node.getOperationType());
+        } else if (type == Constants.TYPE_DOUBLE) {
+            double d = Double.parseDouble(value.getValue());
+            rel = new RelationQueryNode(parent,
+                    node.getProperty(),
+                    d,
+                    node.getOperationType());
+        } else if (type == Constants.TYPE_LONG) {
+            long l = Long.parseLong(value.getValue());
+            rel = new RelationQueryNode(parent,
+                    node.getProperty(),
+                    l,
+                    node.getOperationType());
+        } else if (type == Constants.TYPE_STRING) {
+            rel = new RelationQueryNode(parent,
+                    node.getProperty(),
+                    value.getValue(),
+                    node.getOperationType());
+        }
-	if (rel != null) {
-	    parent.addOperand(rel);
-	}
-	return parent;
+        if (rel != null) {
+            parent.addOperand(rel);
+        }
+        return parent;
-	// bracket expression only has influence on how the syntax tree
-	// is created.
-	// simply pass on to children
-	return node.childrenAccept(this, data);
+        // bracket expression only has influence on how the syntax tree
+        // is created.
+        // simply pass on to children
+        return node.childrenAccept(this, data);
-	// FIXME throw Unsupported exception?
-	return data;
+        // FIXME throw Unsupported exception?
+        return data;
-	QueryRootNode root = (QueryRootNode) data;
-	root.setTextsearchNode(new TextsearchQueryNode(root, node.getQuery()));
-	return root;
+        QueryRootNode root = (QueryRootNode) data;
+        root.setTextsearchNode(new TextsearchQueryNode(root, node.getQuery()));
+        return root;
-	QueryRootNode root = (QueryRootNode) data;
-	root.setOrderNode(
-		new OrderQueryNode(root, node.getProperties(), node.isAscending()));
-	return root;
+        QueryRootNode root = (QueryRootNode) data;
+        root.setOrderNode(new OrderQueryNode(root, node.getProperties(), node.isAscending()));
+        return root;

UPD40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL66 DEL65