JCR-2334: Tika-based type detection in jcr-server

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@830670 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.tika.config.TikaConfig;
+import org.apache.tika.detect.Detector;
+import org.apache.tika.exception.TikaException;
+import org.apache.tika.metadata.Metadata;
-    private String collectionNodetype = JcrConstants.NT_FOLDER;
-    private String defaultNodetype = JcrConstants.NT_FILE;
-    /* IMPORTANT NOTE: for webDAV compliance the default nodetype of the content
-       node has been changed from nt:resource to nt:unstructured. */
-    private String contentNodetype = JcrConstants.NT_UNSTRUCTURED;
+    private String collectionNodetype;
+
+    private String defaultNodetype;
+
+    private String contentNodetype;
-     * Creates a new <code>DefaultHandler</code> with default nodetype definitions
-     * and without setting the IOManager.
+     * Creates a new <code>DefaultHandler</code> with default nodetype definitions:<br>
+     * <ul>
+     * <li>Nodetype for Collection: {@link JcrConstants#NT_FOLDER nt:folder}</li>
+     * <li>Nodetype for Non-Collection: {@link JcrConstants#NT_FILE nt:file}</li>
+     * <li>Nodetype for Non-Collection content: {@link JcrConstants#NT_UNSTRUCTURED nt:unstructured}</li>
+     * </ul>
-     * @see IOHandler#setIOManager(IOManager)
+     * @param ioManager the I/O manager
+        this(null);
-     * <li>Nodetype for Non-Collection content: {@link JcrConstants#NT_RESOURCE nt:resource}</li>
+     * <li>Nodetype for Non-Collection content: {@link JcrConstants#NT_UNSTRUCTURED nt:unstructured}</li>
-        this.ioManager = ioManager;
+        this(ioManager,
+                JcrConstants.NT_FOLDER,
+                JcrConstants.NT_FILE,
+                // IMPORTANT NOTE: for webDAV compliance the default type
+                // of the content node has been changed from nt:resource to
+                // nt:unstructured
+                JcrConstants.NT_UNSTRUCTURED);
+    /**
+     * Detects the media type of a document based on the given name.
+     *
+     * @param name document name
+     * @return detected content type (or application/octet-stream)
+     */
+    protected String detect(String name) {
+        try {
+            Metadata metadata = new Metadata();
+            metadata.set(Metadata.RESOURCE_NAME_KEY, name);
+            return ioManager.getDetector().detect(null, metadata).toString();
+        } catch (IOException e) {
+            // Can not happen since the InputStream above is null
+            throw new IllegalStateException(
+                    "Unexpected IOException", e);
+        }
+    }
+

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS31 MOV43 MOV43 MOV43 MOV44 INS29 INS83 INS43 INS42 INS44 INS8 INS17 UPD65 INS17 INS65 INS65 INS65 INS42 INS43 INS42 INS54 INS33 UPD66 UPD66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS40 INS40 INS40 INS66 INS42 INS66 INS66 INS42 INS8 INS12 UPD66 INS67 INS66 INS67 INS66 INS67 INS66 INS60 INS21 INS41 INS44 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS14 INS43 INS32 INS42 INS33 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL40 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68