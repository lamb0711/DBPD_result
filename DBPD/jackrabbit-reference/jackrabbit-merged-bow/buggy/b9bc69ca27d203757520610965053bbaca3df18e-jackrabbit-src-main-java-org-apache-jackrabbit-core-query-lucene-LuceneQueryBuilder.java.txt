JCR-638: Support lower-/upper-case functions

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@475677 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.PropertyFunctionQueryNode;
+import org.apache.jackrabbit.core.query.DefaultQueryNodeVisitor;
+        // get property transformation
+        final int[] transform = new int[]{TransformConstants.TRANSFORM_NONE};
+        node.acceptOperands(new DefaultQueryNodeVisitor() {
+            public Object visit(PropertyFunctionQueryNode node, Object data) {
+                if (node.getFunctionName().equals(PropertyFunctionQueryNode.LOWER_CASE)) {
+                    transform[0] = TransformConstants.TRANSFORM_LOWER_CASE;
+                } else if (node.getFunctionName().equals(PropertyFunctionQueryNode.UPPER_CASE)) {
+                    transform[0] = TransformConstants.TRANSFORM_UPPER_CASE;
+                }
+                return data;
+            }
+        }, null);
+
-                    or.add(new TermQuery(new Term(FieldNames.PROPERTIES,
-                            FieldNames.createNamedValue(field, stringValues[i]))), false, false);
+                    Term t = new Term(FieldNames.PROPERTIES,
+                                FieldNames.createNamedValue(field, stringValues[i]));
+                    Query q;
+                    if (transform[0] == TransformConstants.TRANSFORM_UPPER_CASE) {
+                        q = new CaseTermQuery.Upper(t);
+                    } else if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
+                        q = new CaseTermQuery.Lower(t);
+                    } else {
+                        q = new TermQuery(t);
+                    }
+                    or.add(q, false, false);
-                    or.add(new RangeQuery(lower, upper, true), false, false);
+                    or.add(new RangeQuery(lower, upper, true, transform[0]), false, false);
-                    or.add(new RangeQuery(lower, upper, false), false, false);
+                    or.add(new RangeQuery(lower, upper, false, transform[0]), false, false);
-                    or.add(new RangeQuery(lower, upper, true), false, false);
+                    or.add(new RangeQuery(lower, upper, true, transform[0]), false, false);
-                    query = new WildcardQuery(FieldNames.PROPERTIES, field, stringValues[0]);
+                    query = new WildcardQuery(FieldNames.PROPERTIES, field, stringValues[0], transform[0]);
-                    or.add(new RangeQuery(lower, upper, false), false, false);
+                    or.add(new RangeQuery(lower, upper, false, transform[0]), false, false);
-                    notQuery.add(new TermQuery(t), false, true);
+                    Query q;
+                    if (transform[0] == TransformConstants.TRANSFORM_UPPER_CASE) {
+                        q = new CaseTermQuery.Upper(t);
+                    } else if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
+                        q = new CaseTermQuery.Lower(t);
+                    } else {
+                        q = new TermQuery(t);
+                    }
+                    notQuery.add(q, false, true);
-                    and.add(new TermQuery(t), true, false);
+                    Query q;
+                    if (transform[0] == TransformConstants.TRANSFORM_UPPER_CASE) {
+                        q = new CaseTermQuery.Upper(t);
+                    } else if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
+                        q = new CaseTermQuery.Lower(t);
+                    } else {
+                        q = new TermQuery(t);
+                    }
+                    and.add(q, true, false);
+    public Object visit(PropertyFunctionQueryNode node, Object data) {
+        return data;
+    }
+

INS26 INS26 INS40 INS40 INS31 INS83 INS43 INS42 INS44 INS44 INS8 INS60 INS21 MOV24 MOV24 MOV24 MOV24 INS42 INS43 INS42 INS43 INS42 INS41 INS83 INS5 INS59 INS32 INS42 INS42 INS42 INS39 INS85 INS42 INS3 INS42 INS42 INS14 INS33 MOV58 MOV27 MOV37 INS58 INS27 INS37 MOV58 MOV27 MOV37 INS8 INS5 INS4 INS43 INS1 INS60 INS60 INS25 INS21 INS39 INS59 INS42 INS40 INS42 MOV59 MOV60 INS60 INS25 INS21 INS60 INS25 INS21 INS39 INS85 INS40 INS42 INS31 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS32 INS42 INS34 MOV42 INS43 INS59 INS27 INS8 INS25 INS32 INS43 INS59 INS27 INS8 INS25 INS32 INS83 INS43 INS42 INS44 INS44 INS8 UPD42 MOV42 INS42 INS14 INS42 INS42 INS2 INS40 INS21 INS27 INS8 INS8 INS42 INS42 INS42 MOV9 MOV9 INS42 INS42 INS2 INS40 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS2 INS40 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS9 INS9 INS42 INS43 INS42 INS43 INS42 INS25 INS41 MOV43 MOV40 MOV32 INS42 INS34 INS7 INS2 INS40 INS21 INS21 UPD9 INS2 MOV43 UPD9 INS2 UPD9 INS2 INS2 MOV43 UPD9 INS2 INS42 INS34 INS7 INS2 UPD40 MOV40 INS21 MOV21 INS42 INS34 INS7 INS2 INS40 INS21 MOV21 INS42 INS42 INS32 INS8 INS25 INS42 INS42 INS14 INS42 INS34 INS7 INS7 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS14 INS42 INS34 INS7 INS7 INS42 INS14 INS42 INS34 INS7 INS7 INS32 INS42 INS40 INS21 INS32 INS8 INS43 INS42 INS42 INS14 INS42 INS14 INS43 INS42 INS42 INS14 INS42 MOV14 INS43 INS42 INS42 INS14 INS42 MOV14 INS42 INS42 INS7 INS32 INS42 INS40 INS21 INS40 INS43 INS42 INS43 INS42 INS40 INS43 INS42 INS40 INS43 INS42 INS2 INS40 INS42 INS42 INS7 INS40 INS42 INS40 INS40 INS42 INS34 INS2 INS40 INS42 INS34 DEL42 DEL42 DEL43 DEL14 DEL14 DEL32 DEL21 DEL42 DEL42 DEL9 DEL9 DEL32 DEL8 DEL42 DEL42 DEL9 DEL9 DEL32