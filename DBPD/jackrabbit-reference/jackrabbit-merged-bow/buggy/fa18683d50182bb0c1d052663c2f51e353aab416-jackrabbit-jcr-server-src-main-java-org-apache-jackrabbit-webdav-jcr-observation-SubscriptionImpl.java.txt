Work in progress
- Removed is-local flag from event bundle response and added transaction id which is equal to the lock token that was used to save changes.
- Added TransactionListener. SubscriptionManagerImpl now listens on the TxLockManagerImpl for transaction commits and registers special EventListeners for a short period of time to associate the lockToken / transactionId with an event bundle.
- Remove SubscriptionImpl as event listener when subscription expires
- Update currentVersion to 1.2-SNAPSHOT

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@482627 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.transaction.TransactionResource;
+import org.apache.jackrabbit.webdav.jcr.transaction.TransactionListener;
+import org.apache.jackrabbit.webdav.jcr.JcrDavSession;
+import org.apache.jackrabbit.webdav.jcr.JcrDavException;
+import javax.jcr.Session;
+import javax.jcr.observation.ObservationManager;
+    private final ObservationManager obsMgr;
+     * @throws DavException if resource is not based on a JCR repository or
+     * the repository does not support observation.
-    public SubscriptionImpl(SubscriptionInfo info, ObservationResource resource) {
+    public SubscriptionImpl(SubscriptionInfo info, ObservationResource resource)
+            throws DavException {
+        Session s = JcrDavSession.getRepositorySession(resource.getSession());
+        try {
+            obsMgr = s.getWorkspace().getObservationManager();
+        } catch (RepositoryException e) {
+            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, e);
+        }
+    /**
+     * Creates a new transaction listener for the scope of a transaction
+     * commit (save call).
+     * @return a transaction listener for this subscription.
+     */
+    TransactionListener createTransactionListener() {
+        if (info.isNoLocal()) {
+            // a subscription which is not interested in local changes does
+            // not need the transaction id
+            return new TransactionEvent() {
+                public void onEvent(EventIterator events) {
+                    // ignore
+                }
+
+                public void beforeCommit(TransactionResource resource, String lockToken) {
+                    // ignore
+                }
+
+                public void afterCommit(TransactionResource resource,
+                                        String lockToken,
+                                        boolean success) {
+                    // ignore
+                }
+            };
+        } else {
+            return new TransactionEvent();
+        }
+    }
+
+    /**
+     * Suspend this subscription. This call will remove this subscription as
+     * event listener from the observation manager.
+     */
+    void suspend() throws DavException {
+        try {
+            obsMgr.removeEventListener(this);
+        } catch (RepositoryException e) {
+            throw new JcrDavException(e);
+        }
+    }
+
+    /**
+     * Resumes this subscription. This call will register this subscription
+     * again as event listener to the observation manager.
+     */
+    void resume() throws DavException {
+        try {
+            obsMgr.addEventListener(this, getJcrEventTypes(),
+                    getLocator().getRepositoryPath(), isDeep(), getUuidFilters(),
+                    getNodetypeNameFilters(), isNoLocal());
+        } catch (RepositoryException e) {
+            throw new JcrDavException(e);
+        }
+    }
+
-     * available with the next {@link #discoverEvents()} request.
+     * available with the next {@link #discoverEvents()} request. If this
+     * subscription is expired it will remove itself as listener from the
+     * observation manager.
-        // TODO: correct not to accept events after expiration? without unsubscribing?
+        } else {
+            // expired -> unsubscribe
+            try {
+                obsMgr.removeEventListener(this);
+            } catch (RepositoryException e) {
+                log.warn("Exception while unsubscribing: " + e);
+            }
+        private final String transactionId;
+
+            this(events, null);
+        }
+
+        private EventBundleImpl(EventIterator events, String transactionId) {
+            this.transactionId = transactionId;
-            DomUtil.setAttribute(bundle, XML_EVENT_IS_LOCAL, NAMESPACE, Boolean.toString(!info.isNoLocal()));
+            if (transactionId != null) {
+                DomUtil.setAttribute(bundle, XML_EVENT_TRANSACTION_ID, NAMESPACE, transactionId);
+            }
+
+    //----------------------------< TransactionEvent >------------------------
+
+    /**
+     * Implements a transaction event which listenes for events during a save
+     * call on the repository.
+     */
+    private class TransactionEvent implements EventListener, TransactionListener {
+
+        private String transactionId;
+
+        /**
+         * {@inheritDoc}
+         */
+        public void onEvent(EventIterator events) {
+            String tId = transactionId;
+            if (tId == null) {
+                tId = UUID.randomUUID().toString();
+            }
+            eventBundles.add(new EventBundleImpl(events, tId));
+        }
+
+        //-----------------------------< TransactionListener >------------------
+
+        /**
+         * {@inheritDoc}
+         */
+        public void beforeCommit(TransactionResource resource, String lockToken) {
+            try {
+                transactionId = lockToken;
+                obsMgr.addEventListener(this, getJcrEventTypes(),
+                        getLocator().getRepositoryPath(), isDeep(), getUuidFilters(),
+                        getNodetypeNameFilters(), isNoLocal());
+                // suspend the subscription
+                suspend();
+            } catch (RepositoryException e) {
+                log.warn("Unable to register TransactionListener: " + e);
+            } catch (DavException e) {
+                log.warn("Unable to register TransactionListener: " + e);
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public void afterCommit(TransactionResource resource,
+                                String lockToken,
+                                boolean success) {
+            try {
+                // resume the subscription
+                resume();
+                // remove this transaction event
+                obsMgr.removeEventListener(this);
+            } catch (RepositoryException e) {
+                log.warn("Unable to remove listener: " + e);
+            } catch (DavException e) {
+                log.warn("Unable to resume Subscription: " + e);
+            }
+        }
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS55 INS83 INS83 INS43 INS59 INS43 INS8 INS29 INS43 INS42 INS8 INS29 INS39 INS42 INS43 INS8 INS29 INS39 INS42 INS43 INS8 INS23 INS31 INS29 INS83 INS42 INS43 INS43 INS23 INS31 INS31 INS31 INS42 INS42 INS65 INS42 MOV21 MOV21 INS60 INS54 INS65 INS65 INS42 INS25 INS65 INS42 INS54 INS65 INS42 INS54 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS44 INS65 INS42 INS42 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS66 INS66 INS43 INS59 INS8 INS12 INS66 INS66 INS66 MOV32 INS8 INS8 INS66 INS66 INS8 INS12 INS66 INS66 INS8 INS12 UPD66 INS66 INS66 INS8 INS42 INS42 INS43 INS42 INS17 INS43 INS42 INS21 INS25 INS66 INS66 INS42 INS42 INS65 INS43 INS42 INS60 INS25 INS21 INS65 INS43 INS42 INS43 INS42 INS54 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS54 INS42 INS42 INS32 INS21 INS44 INS8 INS41 INS41 INS21 INS44 INS8 INS21 INS44 INS8 INS54 INS42 INS42 INS33 INS42 INS7 INS27 INS8 INS65 INS42 INS43 INS59 INS27 INS8 INS32 INS65 INS42 INS42 INS8 INS12 INS12 INS65 INS42 INS42 INS8 INS12 INS12 INS42 INS42 INS32 INS7 INS43 INS42 INS53 INS14 INS14 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS8 INS12 INS22 INS42 INS42 INS33 MOV21 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS14 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS21 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS14 INS43 INS1 INS43 INS42 INS42 INS52 INS42 INS14 INS42 INS42 INS52 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS14 INS21 INS44 INS8 INS52 INS42 INS7 INS43 INS42 INS42 INS7 INS32 INS32 INS43 INS42 INS21 INS43 INS42 INS21 INS32 INS32 INS43 INS42 INS21 INS43 INS42 INS21 INS32 INS42 INS43 INS40 INS42 INS42 INS31 INS31 INS31 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS43 INS42 INS21 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS52 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 DEL8 DEL42 DEL38 DEL32