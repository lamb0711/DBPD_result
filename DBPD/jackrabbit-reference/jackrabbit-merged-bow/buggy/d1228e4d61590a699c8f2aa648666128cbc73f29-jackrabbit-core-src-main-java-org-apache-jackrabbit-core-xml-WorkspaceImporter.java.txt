JCR-1276: A Property and a Node Can Have the Same Name

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@605622 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.PropertyId;
-import org.apache.jackrabbit.core.state.ItemState;
-import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.uuid.UUID;
-import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
+import org.apache.jackrabbit.uuid.UUID;
+import java.util.ArrayList;
-import java.util.ArrayList;
-                    if (parent.hasPropertyName(nodeName)) {
-                        resolvePropertyNameConflict(parent, nodeName);
-                    }
-
-     * Resolves a conflict where a property with the same name as a node
-     * being imported already exists; if this property has been imported
-     * as well (e.g. through document view import where an element can have
-     * the same name as one of the attributes of its parent element) we have
-     * to rename the conflicting property.
-     *
-     * @see http://issues.apache.org/jira/browse/JCR-61
-     * @param parent parent node
-     * @param name name of the node being imported
-     * @throws RepositoryException
-     */
-    private void resolvePropertyNameConflict(NodeState parent, Name name)
-            throws RepositoryException {
-        PropertyId propId = new PropertyId(parent.getNodeId(), name);
-        PropertyState conflicting = itemOps.getPropertyState(propId);
-        if (conflicting.getStatus() == ItemState.STATUS_NEW) {
-            // assume this property has been imported as well;
-            // rename conflicting property
-            // @todo use better reversible escaping scheme to create unique name
-            Name newName = NameFactoryImpl.getInstance().create(name.getNamespaceURI(), name.getLocalName() + "_");
-            while (parent.hasPropertyName(newName)) {
-                newName = NameFactoryImpl.getInstance().create(newName.getNamespaceURI(), newName.getLocalName() + "_");
-            }
-            InternalValue[] values = conflicting.getValues();
-            PropertyState newProp = itemOps.createPropertyState(
-                    parent, newName, conflicting.getType(), values.length);
-            newProp.setValues(values);
-            parent.removePropertyName(name);
-            itemOps.store(parent);
-            itemOps.destroy(conflicting);
-        }
-    }
-
-    /**

MOV26 MOV26 MOV26 MOV26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL7 DEL21 DEL8 DEL61 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31