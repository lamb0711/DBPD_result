JCR-106: Minimize use of fields in lucene index

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161425 13f79535-47bb-0310-9956-ffa450edef68

-                if (propState.isMultiValued()) {
-                    // multi valued
-                    if (values.length == 1) {
-                        // also index as if single value property
-                        addValue(doc, values[0], propState.getName(), false);
-                    }
-                    for (int i = 0; i < values.length; i++) {
-                        addValue(doc, values[i], propState.getName(), true);
-                    }
-                } else {
-                    // single value
-                    // do we have a value at all?
-                    if (values.length == 1) {
-                        addValue(doc, values[0], propState.getName(), false);
-                    }
+                for (int i = 0; i < values.length; i++) {
+                    addValue(doc, values[i], propState.getName());
+                }
+                if (values.length > 1) {
+                    // real multi-valued
+                    addMVPName(doc, propState.getName());
+     * Adds a {@link FieldNames#MVP} field to <code>doc</code> with the resolved
+     * <code>name</code> using the internal search index namespace mapping.
+     * @param doc the lucene document.
+     * @param name the name of the multi-value property.
+     */
+    private void addMVPName(Document doc, QName name) {
+        try {
+            String propName = name.toJCRName(mappings);
+            doc.add(new Field(FieldNames.MVP, propName, false, true, false));
+        } catch (NoPrefixDeclaredException e) {
+            // will never happen, prefixes are created dynamically
+        }
+    }
+
+    /**
-     * @param multiValued if <code>true</code> the value is treated as a
-     *   multivalued.
-    private void addValue(Document doc, InternalValue value, QName name, boolean multiValued) {
+    private void addValue(Document doc, InternalValue value, QName name) {
-            StringBuffer tmp = new StringBuffer();
-            tmp.append(mappings.getPrefix(name.getNamespaceURI()));
-            tmp.append(':');
-            if (multiValued) {
-                tmp.append(FieldNames.MVP_PREFIX);
-            }
-            tmp.append(name.getLocalName());
-            fieldName = tmp.toString();
-        } catch (NamespaceException e) {
+            fieldName = name.toJCRName(mappings);
+        } catch (NoPrefixDeclaredException e) {
-        doc.add(new Field(fieldName,
-            internalValue.toString(),
+        doc.add(new Field(FieldNames.PROPERTIES,
+            FieldNames.createNamedValue(fieldName, internalValue.toString()),
-        doc.add(new Field(fieldName,
-                DateField.timeToString(millis),
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, DateField.timeToString(millis)),
-        doc.add(new Field(fieldName,
-                DoubleField.doubleToString(doubleVal),
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, DoubleField.doubleToString(doubleVal)),
-        doc.add(new Field(fieldName,
-                LongField.longToString(longVal),
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, LongField.longToString(longVal)),
-        doc.add(new Field(fieldName,
-                uuid,
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, uuid),
-        doc.add(new Field(fieldName,
-                pathString,
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, pathString),
-        doc.add(new Field(fieldName,
-                stringValue,
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, stringValue),
-        doc.add(new Field(fieldName,
-                normValue,
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, normValue),

INS31 MOV8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 MOV60 MOV21 MOV54 MOV60 INS24 MOV41 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS54 MOV58 MOV32 MOV8 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS8 INS12 MOV60 MOV60 INS54 INS67 INS60 INS21 INS44 INS8 MOV8 MOV25 MOV12 MOV12 INS42 INS42 INS43 INS59 INS32 INS43 INS42 UPD43 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 MOV60 MOV60 INS42 INS42 INS32 INS42 INS42 INS14 INS42 UPD42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD27 INS42 INS42 INS42 INS43 INS40 INS42 INS9 INS9 INS9 INS42 UPD42 UPD42 INS42 UPD42 UPD42 MOV42 DEL9 DEL42 DEL34 DEL2 DEL9 DEL42 DEL42 DEL32 DEL40 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL54 DEL24 DEL8 DEL42 DEL66 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42