Implement jcrfn:deref() function for XPath. Level 1 test cases for jcrfn:deref()

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157120 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.search.DerefQueryNode;
+        QueryNode queryNode = (QueryNode) data;
-                data = createPathQueryNode(node);
+                queryNode = createPathQueryNode(node);
-                ((PathQueryNode) data).setAbsolute(true);
+                ((PathQueryNode) queryNode).setAbsolute(true);
-                    if (data instanceof RelationQueryNode
-                            || data instanceof OrderQueryNode
-                            || data instanceof PathQueryNode) {
+                    if (queryNode.getType() == QueryNode.TYPE_RELATION
+                            || queryNode.getType() == QueryNode.TYPE_DEREF
+                            || queryNode.getType() == QueryNode.TYPE_ORDER
+                            || queryNode.getType() == QueryNode.TYPE_PATH) {
-                        node.childrenAccept(this, data);
-                    } else if (data instanceof NotQueryNode) {
+                        node.childrenAccept(this, queryNode);
+                    } else if (queryNode.getType() == QueryNode.TYPE_NOT) {
-                                = new RelationQueryNode((QueryNode) data,
+                                = new RelationQueryNode(queryNode,
-                        NotQueryNode notNode = (NotQueryNode) data;
+                        NotQueryNode notNode = (NotQueryNode) queryNode;
-                                = new RelationQueryNode((QueryNode) data,
+                                = new RelationQueryNode(queryNode,
-                        ((NAryQueryNode) data).addOperand(notNull);
+                        ((NAryQueryNode) queryNode).addOperand(notNull);
-                    if (data instanceof PathQueryNode) {
-                        data = createLocationStep(node, (PathQueryNode) data);
+                    if (queryNode.getType() == QueryNode.TYPE_PATH) {
+                        queryNode = createLocationStep(node, (PathQueryNode) queryNode);
-                if (data instanceof LocationStepQueryNode
-                        || data instanceof RelationQueryNode
-                        || data instanceof PathQueryNode) {
-                    createNameTest(node, (QueryNode) data);
-                } else if (data instanceof OrderQueryNode) {
-                    data = createOrderSpec(node, (OrderQueryNode) data);
+                if (queryNode.getType() == QueryNode.TYPE_LOCATION
+                        || queryNode.getType() == QueryNode.TYPE_DEREF
+                        || queryNode.getType() == QueryNode.TYPE_RELATION
+                        || queryNode.getType() == QueryNode.TYPE_PATH) {
+                    createNodeTest(node, queryNode);
+                } else if (queryNode.getType() == QueryNode.TYPE_ORDER) {
+                    createOrderSpec(node, (OrderQueryNode) queryNode);
-                    node.childrenAccept(this, data);
+                    node.childrenAccept(this, queryNode);
-                NAryQueryNode parent = (NAryQueryNode) data;
-                data = new OrQueryNode(parent);
-                parent.addOperand((QueryNode) data);
+                NAryQueryNode parent = (NAryQueryNode) queryNode;
+                queryNode = new OrQueryNode(parent);
+                parent.addOperand(queryNode);
-                node.childrenAccept(this, data);
+                node.childrenAccept(this, queryNode);
-                parent = (NAryQueryNode) data;
-                data = new AndQueryNode(parent);
-                parent.addOperand((QueryNode) data);
+                parent = (NAryQueryNode) queryNode;
+                queryNode = new AndQueryNode(parent);
+                parent.addOperand(queryNode);
-                node.childrenAccept(this, data);
+                node.childrenAccept(this, queryNode);
-                createExpression(node, (NAryQueryNode) data);
+                createExpression(node, (NAryQueryNode) queryNode);
-                if (data instanceof RelationQueryNode) {
-                    assignValue(node, (RelationQueryNode) data);
-                } else if (data instanceof LocationStepQueryNode) {
+                if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                    assignValue(node, (RelationQueryNode) queryNode);
+                } else if (queryNode.getType() == QueryNode.TYPE_LOCATION) {
-                        ((LocationStepQueryNode) data).setIndex(index);
+                        ((LocationStepQueryNode) queryNode).setIndex(index);
-                data = createFunction(node, (QueryNode) data);
+                queryNode = createFunction(node, queryNode);
-                data = root.getOrderNode();
-                node.childrenAccept(this, data);
+                queryNode = root.getOrderNode();
+                node.childrenAccept(this, queryNode);
-                    OrderQueryNode.OrderSpec[] specs = ((OrderQueryNode) data).getOrderSpecs();
+                    OrderQueryNode.OrderSpec[] specs = ((OrderQueryNode) queryNode).getOrderSpecs();
-                node.childrenAccept(this, data);
+                node.childrenAccept(this, queryNode);
-        return data;
+        return queryNode;
-     * Creates a name test either for a <code>LocationStepQueryNode</code> or
-     * for a <code>RelationQueryNode</code>.
+     * Assigns a QName to one of the follwing QueryNodes:
+     * {@link RelationQueryNode}, {@link DerefQueryNode}, {@link RelationQueryNode},
+     * {@link PathQueryNode}, {@link OrderQueryNode}.
-     * @param queryNode either a <code>LocationStepQueryNode</code> or a
-     *                  <code>RelationQueryNode</code>.
+     * @param queryNode the query node.
-    private void createNameTest(SimpleNode node, QueryNode queryNode) {
+    private void createNodeTest(SimpleNode node, QueryNode queryNode) {
-                    if (queryNode instanceof LocationStepQueryNode) {
+                    if (queryNode.getType() == QueryNode.TYPE_LOCATION) {
-                    } else if (queryNode instanceof RelationQueryNode) {
+                    } else if (queryNode.getType() == QueryNode.TYPE_DEREF) {
+                        QName name = ISO9075.decode(QName.fromJCRName(child.getValue(), resolver));
+                        ((DerefQueryNode) queryNode).setRefProperty(name);
+                    } else if (queryNode.getType() == QueryNode.TYPE_RELATION) {
-                    } else if (queryNode instanceof PathQueryNode) {
+                    } else if (queryNode.getType() == QueryNode.TYPE_PATH) {
-                    } else if (queryNode instanceof OrderQueryNode) {
+                    } else if (queryNode.getType() == QueryNode.TYPE_ORDER) {
-                if (queryNode instanceof LocationStepQueryNode) {
+                if (queryNode.getType() == QueryNode.TYPE_LOCATION) {
-                exceptions.add(new InvalidQueryException("Unsupported function: " + fName));
+                // check number of arguments
+                if (node.jjtGetNumChildren() == 3) {
+                    if (queryNode.getType() == QueryNode.TYPE_PATH) {
+                        PathQueryNode pathNode = (PathQueryNode) queryNode;
+                        DerefQueryNode derefNode = new DerefQueryNode(pathNode, null, false);
+
+                        // assign property name
+                        node.jjtGetChild(1).jjtAccept(this, derefNode);
+                        // check property name
+                        if (derefNode.getRefProperty() == null) {
+                            exceptions.add(new InvalidQueryException("Wrong first argument type for jcrfn:deref"));
+                        }
+
+                        SimpleNode literal = (SimpleNode) node.jjtGetChild(2).jjtGetChild(0);
+                        if (literal.getId() == JJTSTRINGLITERAL) {
+                            String value = literal.getValue();
+                            // strip quotes
+                            value = value.substring(1, value.length() - 1);
+                            if (!value.equals("*")) {
+                                QName name = null;
+                                try {
+                                    name = ISO9075.decode(QName.fromJCRName(value, resolver));
+                                } catch (IllegalNameException e) {
+                                    exceptions.add(new InvalidQueryException("Illegal name: " + value));
+                                } catch (UnknownPrefixException e) {
+                                    exceptions.add(new InvalidQueryException("Unknown prefix: " + value));
+                                }
+                                derefNode.setNameTest(name);
+                            }
+                        } else {
+                            exceptions.add(new InvalidQueryException("Wrong second argument type for jcrfn:like"));
+                        }
+                        pathNode.addPathStep(derefNode);
+                    } else {
+                        exceptions.add(new InvalidQueryException("Unsupported location for jcrfn:deref()"));
+                    }
+                }

INS26 INS40 UPD42 MOV60 MOV21 INS43 INS21 UPD42 UPD66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 UPD66 UPD66 INS42 UPD42 MOV11 INS27 MOV43 INS7 INS32 INS27 INS42 INS42 INS42 INS42 INS42 UPD42 INS27 INS27 INS27 MOV11 UPD42 INS42 UPD42 INS42 MOV11 UPD42 INS42 UPD42 INS42 INS42 INS11 INS32 INS40 INS27 UPD42 UPD42 UPD42 UPD42 INS27 INS27 INS27 INS32 INS40 INS32 INS40 UPD42 UPD42 MOV43 INS42 INS42 INS42 INS32 INS40 INS42 UPD42 INS27 INS27 INS27 INS32 INS40 INS27 INS27 INS32 INS40 INS42 INS42 UPD42 INS42 INS42 INS42 MOV32 INS42 INS42 INS27 INS27 INS32 INS40 INS32 INS40 INS60 INS42 INS42 INS32 INS40 INS32 INS40 INS42 INS42 UPD42 UPD42 INS27 INS27 INS27 INS32 INS40 INS42 INS42 UPD42 INS42 INS42 MOV43 INS59 MOV43 MOV43 UPD42 INS42 INS42 INS42 INS42 UPD42 INS27 INS25 INS32 INS40 INS32 INS40 INS32 INS40 INS42 INS42 INS42 INS14 UPD42 INS32 INS40 INS27 INS8 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS40 MOV43 UPD42 MOV43 INS42 UPD42 INS42 INS42 INS32 INS40 INS60 INS21 INS27 UPD42 UPD42 INS42 INS42 INS43 INS59 INS32 INS32 INS40 INS27 INS25 INS42 INS42 INS32 INS36 INS42 INS42 INS42 INS42 INS32 INS40 INS27 MOV32 MOV8 INS25 INS42 INS42 INS32 INS11 INS42 INS42 INS32 INS40 MOV32 INS8 MOV8 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS25 INS42 INS42 UPD42 MOV42 INS27 INS8 INS32 INS34 INS25 INS42 INS42 INS27 INS8 INS8 INS32 INS40 INS60 INS60 INS21 INS25 INS60 INS25 INS21 INS21 INS42 INS42 MOV43 INS59 INS43 INS59 INS32 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS42 INS11 INS42 INS42 INS14 INS32 INS42 INS52 INS42 INS32 INS33 INS21 INS42 INS42 INS11 INS32 INS42 INS60 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS14 MOV43 INS42 INS43 INS42 INS33 INS9 INS42 INS42 INS34 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS43 INS59 INS7 INS38 INS8 INS32 INS43 INS45 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS32 INS32 INS60 INS54 INS21 INS42 INS42 INS14 INS42 INS43 INS45 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS27 INS42 INS42 INS45 INS43 INS59 INS8 INS12 INS12 INS32 INS43 INS45 INS42 INS32 INS34 INS42 INS42 INS33 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS43 INS42 MOV21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS42 UPD45 UPD42 DEL40 DEL14 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL62 DEL27 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL43 DEL62 DEL42 DEL7 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL32 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL66 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL8 DEL25 DEL25