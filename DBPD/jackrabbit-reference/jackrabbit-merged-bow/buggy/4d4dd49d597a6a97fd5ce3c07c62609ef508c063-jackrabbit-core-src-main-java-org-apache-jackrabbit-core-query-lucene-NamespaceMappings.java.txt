JCR-669: Move NamespaceMappings/Index from lucene to namespace registry

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@486099 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.AbstractNamespaceResolver;
-import org.apache.jackrabbit.name.NameFormat;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.jcr.NamespaceException;
-import java.io.BufferedOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Properties;
- * The class <code>NamespaceMappings</code> implements a {@link
- * org.apache.jackrabbit.core.NamespaceResolver} that holds a namespace
- * mapping that is used internally in the search index. Storing paths with the
- * full uri of a namespace would require too much space in the search index.
- * <p/>
- * Whenever a yet unknown namespace uri to prefix mapping is requested, a new
- * prefix is created on the fly and associated with the namespace. Known
- * namespace mappings are stored in a properties file.
+ * The class <code>NamespaceMappings</code> holds a namespace mapping that is
+ * used internally in the search index. Storing paths with the full uri of a
+ * namespace would require too much space in the search index.
-public class NamespaceMappings extends AbstractNamespaceResolver {
+public interface NamespaceMappings extends NamespaceResolver {
-     * Default logger instance for this class
-     */
-    private static Logger log = LoggerFactory.getLogger(NamespaceMappings.class);
-
-    /**
-     * Location of the file that persists the uri / prefix mappings
-     */
-    private final File storage;
-
-    /**
-     * Map of uris indexed by prefixes
-     */
-    private Map prefixToURI = new HashMap();
-
-    /**
-     * Map of prefixes indexed by uris
-     */
-    private Map uriToPrefix = new HashMap();
-
-    /**
-     * Current prefix count.
-     */
-    private int prefixCount;
-
-    /**
-     * Creates <code>NamespaceMappings</code> instance. Initial mappings are
-     * loaded from <code>file</code>.
-     *
-     * @param file the <code>File</code> to load initial mappings.
-     * @throws IOException if an error occurs while reading initial namespace
-     *                     mappings from <code>file</code>.
-     */
-    public NamespaceMappings(File file) throws IOException {
-        storage = file;
-        load();
-    }
-
-    /**
-     * Returns a namespace uri for a <code>prefix</code>.
-     *
-     * @param prefix the namespace prefix.
-     * @return the namespace uri.
-     * @throws NamespaceException if no namespace uri is registered for
-     *                            <code>prefix</code>.
-     */
-    public synchronized String getURI(String prefix) throws NamespaceException {
-        if (!prefixToURI.containsKey(prefix)) {
-            throw new NamespaceException(prefix + ": is not a registered namespace prefix.");
-        }
-        return (String) prefixToURI.get(prefix);
-    }
-
-    /**
-     * Returns a prefix for the namespace <code>uri</code>. If a namespace
-     * mapping exists, the already known prefix is returned; otherwise a new
-     * prefix is created and assigned to the namespace uri.
-     *
-     * @param uri the namespace uri.
-     * @return the prefix for the namespace uri.
-     * @throws NamespaceException if an yet unknown namespace uri / prefix
-     *                            mapping could not be stored.
-     */
-    public synchronized String getPrefix(String uri) throws NamespaceException {
-        String prefix = (String) uriToPrefix.get(uri);
-        if (prefix == null) {
-            // make sure prefix is not taken
-            while (prefixToURI.get(String.valueOf(prefixCount)) != null) {
-                prefixCount++;
-            }
-            prefix = String.valueOf(prefixCount);
-            prefixToURI.put(prefix, uri);
-            uriToPrefix.put(uri, prefix);
-            log.debug("adding new namespace mapping: " + prefix + " -> " + uri);
-            try {
-                store();
-            } catch (IOException e) {
-                throw new NamespaceException("Could not obtain a prefix for uri: " + uri, e);
-            }
-        }
-        return prefix;
-    }
-
-    /**
-     * Translates a property name from a session local namespace mapping
-     * into a search index private namespace mapping.
+     * Translates a property name from a session local namespace mapping into a
+     * search index private namespace mapping.
-    public String translatePropertyName(String name, NamespaceResolver resolver)
-            throws IllegalNameException, UnknownPrefixException {
-        QName qName = NameFormat.parse(name, resolver);
-        try {
-            return NameFormat.format(qName, this);
-        } catch (NoPrefixDeclaredException e) {
-            // should never happen actually, because we create yet unknown
-            // uri mappings on the fly.
-            throw new IllegalNameException("Internal error.", e);
-        }
-    }
-
-    //-----------------------< internal >---------------------------------------
-
-    /**
-     * Loads currently known mappings from a .properties file.
-     *
-     * @throws IOException if an error occurs while reading from the file.
-     */
-    private void load() throws IOException {
-        if (storage.exists()) {
-            InputStream in = new FileInputStream(storage);
-            try {
-                Properties props = new Properties();
-                log.debug("loading namespace mappings...");
-                props.load(in);
-
-                // read mappings from properties
-                Iterator iter = props.keySet().iterator();
-                while (iter.hasNext()) {
-                    String prefix = (String) iter.next();
-                    String uri = props.getProperty(prefix);
-                    log.debug(prefix + " -> " + uri);
-                    prefixToURI.put(prefix, uri);
-                    uriToPrefix.put(uri, prefix);
-                }
-                prefixCount = props.size();
-                log.debug("namespace mappings loaded.");
-            } finally {
-                in.close();
-            }
-        }
-    }
-
-    /**
-     * Writes the currently known mappings into a .properties file.
-     *
-     * @throws IOException if an error occurs while writing the file.
-     */
-    private void store() throws IOException {
-        Properties props = new Properties();
-
-        // store mappings in properties
-        Iterator iter = prefixToURI.keySet().iterator();
-        while (iter.hasNext()) {
-            String prefix = (String) iter.next();
-            String uri = (String) prefixToURI.get(prefix);
-            props.setProperty(prefix, uri);
-        }
-
-        OutputStream out = new FileOutputStream(storage);
-        try {
-            out = new BufferedOutputStream(out);
-            props.store(out, null);
-        } finally {
-            // make sure stream is closed
-            out.close();
-        }
-    }
+    public String translatePropertyName(String name,
+                                        NamespaceResolver resolver)
+            throws IllegalNameException, UnknownPrefixException;

UPD43 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL33 DEL27 DEL42 DEL37 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL52 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31