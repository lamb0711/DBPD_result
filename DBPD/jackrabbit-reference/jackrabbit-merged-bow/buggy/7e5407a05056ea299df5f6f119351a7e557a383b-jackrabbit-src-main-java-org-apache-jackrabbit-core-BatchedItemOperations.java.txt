[JCR-317] replace UUID strings by UUID classes in NodeId, etc..

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378221 13f79535-47bb-0310-9956-ffa450edef68

-            if (!srcAccessMgr.isGranted(srcState.getId(), AccessManager.READ)) {
+            if (!srcAccessMgr.isGranted(srcState.getNodeId(), AccessManager.READ)) {
-                destParentState.getUUID(), flag, refTracker);
+                destParentState.getNodeId(), flag, refTracker);
-        destParentState.addChildNodeEntry(destName.getName(), newState.getUUID());
+        destParentState.addChildNodeEntry(destName.getName(), newState.getNodeId());
-                String original = ((UUID) val.internalValue()).toString();
-                String adjusted = refTracker.getMappedUUID(original);
+                UUID original = (UUID) val.internalValue();
+                UUID adjusted = refTracker.getMappedUUID(original);
-                    newVals[i] = InternalValue.create(UUID.fromString(adjusted));
+                    newVals[i] = InternalValue.create(adjusted);
-        checkRemoveNode(target, (NodeId) srcParent.getId(),
+        checkRemoveNode(target, srcParent.getNodeId(),
-
-        boolean renameOnly = srcParent.getUUID().equals(destParent.getUUID());
+        boolean renameOnly = srcParent.getNodeId().equals(destParent.getNodeId());
-            target.setParentUUID(destParent.getUUID());
+            target.setParentId(destParent.getNodeId());
-            destParent.addChildNodeEntry(destName.getName(), target.getUUID());
+            destParent.addChildNodeEntry(destName.getName(), target.getNodeId());
-
-        NodeId parentId = new NodeId(target.getParentUUID());
+        NodeId parentId = target.getParentId();
-
-
-        Path parentPath = hierMgr.getPath(parentState.getId());
+        Path parentPath = hierMgr.getPath(parentState.getNodeId());
-            if (!accessMgr.isGranted(parentState.getId(), AccessManager.READ)) {
-                throw new ItemNotFoundException(safeGetJCRPath(parentState.getId()));
+            if (!accessMgr.isGranted(parentState.getNodeId(), AccessManager.READ)) {
+                throw new ItemNotFoundException(safeGetJCRPath(parentState.getNodeId()));
-            if (!accessMgr.isGranted(parentState.getId(), AccessManager.WRITE)) {
-                throw new AccessDeniedException(safeGetJCRPath(parentState.getId())
+            if (!accessMgr.isGranted(parentState.getNodeId(), AccessManager.WRITE)) {
+                throw new AccessDeniedException(safeGetJCRPath(parentState.getNodeId())
-                throw new ConstraintViolationException(safeGetJCRPath(parentState.getId())
+                throw new ConstraintViolationException(safeGetJCRPath(parentState.getNodeId())
-                        + safeGetJCRPath(parentState.getId())
+                        + safeGetJCRPath(parentState.getNodeId())
-                NodeId conflictingId = new NodeId(entry.getUUID());
+                NodeId conflictingId = entry.getId();
-                            + safeGetJCRPath(parentState.getId())
+                            + safeGetJCRPath(parentState.getNodeId())
-        NodeId parentId = new NodeId(targetState.getParentUUID());
-        checkRemoveNode(targetState, parentId, options);
+        checkRemoveNode(targetState, targetState.getParentId(), options);
-        if (targetState.getParentUUID() == null) {
+        if (targetState.getParentId() == null) {
-        NodeId targetId = (NodeId) targetState.getId();
+        NodeId targetId = targetState.getNodeId();
-                NodeReferencesId refsId = new NodeReferencesId(targetState.getUUID());
+                NodeReferencesId refsId = new NodeReferencesId(targetState.getNodeId());
-        if (!accessMgr.isGranted(node.getId(), AccessManager.READ)) {
-            throw new PathNotFoundException(safeGetJCRPath(node.getId()));
+        if (!accessMgr.isGranted(node.getNodeId(), AccessManager.READ)) {
+            throw new PathNotFoundException(safeGetJCRPath(node.getNodeId()));
-        if (!accessMgr.isGranted(node.getId(), AccessManager.WRITE)) {
-            throw new AccessDeniedException(safeGetJCRPath(node.getId())
+        if (!accessMgr.isGranted(node.getNodeId(), AccessManager.WRITE)) {
+            throw new AccessDeniedException(safeGetJCRPath(node.getNodeId())
-        if (!accessMgr.isGranted(node.getId(), AccessManager.READ)) {
-            throw new PathNotFoundException(safeGetJCRPath(node.getId()));
+        if (!accessMgr.isGranted(node.getNodeId(), AccessManager.READ)) {
+            throw new PathNotFoundException(safeGetJCRPath(node.getNodeId()));
-     * @param uuid
+     * @param id
-                                     String uuid)
+                                     NodeId id)
-        return createNodeState(parent, nodeName, nodeTypeName, mixinNames, uuid, def);
+        return createNodeState(parent, nodeName, nodeTypeName, mixinNames, id, def);
-     * @param uuid
+     * @param id
-                                     String uuid,
+                                     NodeId id,
-            NodeId id = new NodeId(parent.getChildNodeEntry(nodeName, 1).getUUID());
-            throw new ItemExistsException(safeGetJCRPath(id));
+            NodeId errorId = parent.getChildNodeEntry(nodeName, 1).getId();
+            throw new ItemExistsException(safeGetJCRPath(errorId));
-        if (uuid == null) {
-            // create new uuid
-            uuid = UUID.randomUUID().toString();    // create new version 4 uuid
+        if (id == null) {
+            // create new id
+            id = new NodeId(UUID.randomUUID());
-        NodeState node = stateMgr.createNew(uuid, nodeTypeName, parent.getUUID());
+        NodeState node = stateMgr.createNew(id, nodeTypeName, parent.getNodeId());
-        parent.addChildNodeEntry(nodeName, node.getUUID());
+        parent.addChildNodeEntry(nodeName, id);
-            PropertyId id = new PropertyId(parent.getUUID(), propName);
-            throw new ItemExistsException(safeGetJCRPath(id));
+            PropertyId errorId = new PropertyId(parent.getNodeId(), propName);
+            throw new ItemExistsException(safeGetJCRPath(errorId));
-        PropertyState prop = stateMgr.createNew(propName, parent.getUUID());
+        PropertyState prop = stateMgr.createNew(propName, parent.getNodeId());
-        String parentUUID = target.getParentUUID();
-        if (parentUUID == null) {
+        NodeId parentId = target.getParentId();
+        if (parentId == null) {
-        NodeId parentId = new NodeId(parentUUID);
-
-        parent.removeChildNodeEntry(target.getUUID());
+        parent.removeChildNodeEntry(target.getNodeId());
-                new PropertyId(nodeState.getUUID(), QName.JCR_ISCHECKEDOUT);
+                new PropertyId(nodeState.getNodeId(), QName.JCR_ISCHECKEDOUT);
-     * @return
+     * @return the computed values
-                genValues = new InternalValue[]{InternalValue.create(parent.getUUID())};
+                genValues = new InternalValue[]{InternalValue.create(
+                        parent.getNodeId().getUUID().toString())};
-                NodeId nodeId = new NodeId(entry.getUUID());
+                NodeId nodeId = entry.getId();
-                    checkRemoveNode(nodeState, (NodeId) targetState.getId(),
+                    checkRemoveNode(nodeState, targetState.getNodeId(),
-                    new PropertyId(targetState.getUUID(), propName);
+                    new PropertyId(targetState.getNodeId(), propName);
-        targetState.setParentUUID(null);
+        targetState.setParentId(null);
-     * @param destParentUUID
+     * @param destParentId
-                                    String destParentUUID,
+                                    NodeId destParentId,
-            String uuid;
-                    uuid = UUID.randomUUID().toString();    // create new version 4 uuid
+                    id = new NodeId(UUID.randomUUID());
-                        refTracker.mappedUUID(srcState.getUUID(), uuid);
+                        refTracker.mappedUUID(srcState.getNodeId().getUUID(), id.getUUID());
-                        uuid = UUID.randomUUID().toString();    // create new version 4 uuid
+                        id = new NodeId(UUID.randomUUID());
-                    uuid = srcState.getUUID();
-                    id = new NodeId(uuid);
+                    id = srcState.getNodeId();
-                        uuid = UUID.randomUUID().toString();    // create new version 4 uuid
+                        id = new NodeId(UUID.randomUUID());
-                    uuid = srcState.getUUID();
-                    id = new NodeId(uuid);
+                    id = srcState.getNodeId();
-                        NodeId newParentId = new NodeId(destParentUUID);
-                        Path p0 = hierMgr.getPath(newParentId);
+                        Path p0 = hierMgr.getPath(destParentId);
-            newState = stateMgr.createNew(uuid, srcState.getNodeTypeName(), destParentUUID);
+            newState = stateMgr.createNew(id, srcState.getNodeTypeName(), destParentId);
-                NodeId nodeId = new NodeId(entry.getUUID());
+                NodeId nodeId = entry.getId();
-                        srcStateMgr, srcAccessMgr, uuid, flag, refTracker);
+                        srcStateMgr, srcAccessMgr, id, flag, refTracker);
-                newState.addChildNodeEntry(entry.getName(), newChildState.getUUID());
+                newState.addChildNodeEntry(entry.getName(), newChildState.getNodeId());
-                PropertyId propId = new PropertyId(srcState.getUUID(), propName);
+                PropertyId propId = new PropertyId(srcState.getNodeId(), propName);
-                        copyPropertyState(srcChildState, uuid, propName);
+                        copyPropertyState(srcChildState, id, propName);
-            String msg = "internal error: failed to copy state of " + srcState.getId();
+            String msg = "internal error: failed to copy state of " + srcState.getNodeId();
-     * @param parentUUID
+     * @param parentId
-                                            String parentUUID,
+                                            NodeId parentId,
-        PropertyState newState = stateMgr.createNew(propName, parentUUID);
+        PropertyState newState = stateMgr.createNew(propName, parentId);
-                newState.setValues(new InternalValue[]{InternalValue.create(parentUUID)});
+                newState.setValues(new InternalValue[]{InternalValue.create(parentId.getUUID().toString())});

MOV43 UPD42 UPD43 UPD42 MOV43 UPD42 UPD43 UPD42 UPD42 UPD42 MOV42 MOV43 MOV43 INS66 UPD42 UPD42 UPD42 INS32 INS32 INS32 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV25 MOV25 MOV49 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 UPD42 MOV43 UPD42 UPD42 MOV43 MOV43 MOV21 INS10 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 INS14 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 MOV43 UPD42 UPD42 MOV43 MOV32 MOV43 UPD42 MOV43 UPD42 INS14 MOV21 UPD42 INS32 UPD42 UPD42 MOV43 UPD42 UPD42 MOV11 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 INS32 UPD42 MOV43 MOV32 UPD42 INS42 INS42 INS32 MOV42 UPD42 MOV42 MOV43 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS14 UPD42 INS14 MOV42 UPD42 MOV42 UPD42 UPD42 MOV43 UPD42 UPD42 UPD42 UPD42 INS32 INS32 UPD42 MOV42 INS42 MOV43 MOV32 MOV43 MOV32 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 INS32 MOV42 UPD42 MOV42 MOV42 INS42 INS32 MOV32 INS42 INS32 INS42 UPD42 INS32 UPD42 MOV42 INS42 MOV42 INS42 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL32 DEL11 DEL42 DEL43 DEL32 DEL14 DEL42 DEL43 DEL32 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL32 DEL11 DEL42 DEL43 DEL14 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL32 DEL14 DEL32 DEL11 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL14 DEL7 DEL21 DEL10 DEL42 DEL32 DEL42 DEL32 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL32 DEL14