[JCR-175] Contrib JCR-Server: enable PROPPATCH for simple-davresource
[JCR-174] Contrib JCR-Server: improve handing of strong etags

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@230679 13f79535-47bb-0310-9956-ffa450edef68

+import org.jdom.Namespace;
+    private ResourceFilter filter;
+
-                           DavSession session)
-        throws RepositoryException {
+                           DavSession session, ResourceFilter filter)
+        throws RepositoryException, DavException {
+        this.filter = filter;
-    private void init(Item repositoryItem) throws RepositoryException {
+    private void init(Item repositoryItem) throws RepositoryException, DavException {
-
+        if (isFilteredNode(node)) {
+            log.debug("Cannot to access resource based on a filtered repository item: " + locator.getResourcePath());
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
+
+            // JCR properties defined on the underlaying jcr node
+            try {
+                // todo: should filter be respected for properties as well?
+                PropertyIterator it = node.getProperties();
+                while (it.hasNext()) {
+                    Property p = it.nextProperty();
+                    String pName = p.getName();
+                    String prefix = Text.getNamespacePrefix(pName);
+                    String uri = node.getSession().getNamespaceURI(prefix);
+                    Namespace namespace = Namespace.getNamespace(prefix, uri);
+                    DavPropertyName name = DavPropertyName.create(Text.getLocalName(pName), namespace);
+                    if (p.getDefinition().isMultiple()) {
+                        log.debug("Multivalued property '" + pName + "' not added to webdav property set.");
+                    } else {
+                        String value = p.getValue().getString();
+                        properties.add(new DefaultDavProperty(name, value));
+                    }
+                }
+            } catch (RepositoryException e) {
+                log.error("Unexpected error while retrieving properties: " + e.getMessage());
+            }
-        throw new DavException(DavServletResponse.SC_METHOD_NOT_ALLOWED);
+        if (!exists()) {
+            throw new DavException(DavServletResponse.SC_NOT_FOUND);
+        }
+        try {
+            setJcrProperty(property);
+            node.save();
+        } catch (RepositoryException e) {
+            // revert any changes made so far an throw exception
+            try {
+                node.refresh(false);
+            } catch (RepositoryException re) {
+                throw new JcrDavException(e);
+            }
+            throw new JcrDavException(e);
+        }
-        throw new DavException(DavServletResponse.SC_METHOD_NOT_ALLOWED);
+        if (!exists()) {
+            throw new DavException(DavServletResponse.SC_NOT_FOUND);
+        }
+        try {
+            removeJcrProperty(propertyName);
+            node.save();
+        } catch (RepositoryException e) {
+            throw new JcrDavException(e);
+        }
+    public void alterProperties(DavPropertySet setProperties,
+                                DavPropertyNameSet removePropertyNames)
+        throws DavException {
+        if (isLocked(this)) {
+            throw new DavException(DavServletResponse.SC_LOCKED);
+        }
+        if (!exists()) {
+            throw new DavException(DavServletResponse.SC_NOT_FOUND);
+        }
+        try {
+            DavPropertyIterator setIter = setProperties.iterator();
+            while (setIter.hasNext()) {
+                DavProperty prop = setIter.nextProperty();
+                setJcrProperty(prop);
+            }
+            Iterator remNameIter = removePropertyNames.iterator();
+            while (remNameIter.hasNext()) {
+                DavPropertyName propName = (DavPropertyName) remNameIter.next();
+                removeJcrProperty(propName);
+            }
+            // save all changes together (reverted in case this fails)
+            node.save();
+        } catch (RepositoryException e) {
+            // revert any changes made so far an throw exception
+            try {
+                node.refresh(false);
+            } catch (RepositoryException re) {
+                throw new JcrDavException(e);
+            }
+            throw new JcrDavException(e);
+        }
+    }
+
+
-                    list.add(buildResourceFromItem(it.nextNode()));
+                    Node n = it.nextNode();
+                    if (!isFilteredNode(n)) {
+                        list.add(buildResourceFromItem(n));
+                    } else {
+                        log.debug("Filtered resource '" + n.getName() + "'.");
+                    }
+            // don't allow creation of nodes, that would be filtered out
+            if (isFilteredResource(member)) {
+                log.debug("Avoid creation of filtered resource: " + fileName);
+                throw new DavException(DavServletResponse.SC_FORBIDDEN);
+            }
+
+
+        // don't allow creation of nodes, that would be filtered out
+        if (isFilteredResource(member)) {
+            log.debug("Avoid creation of filtered resource: " + member.getDisplayName());
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
+
+        // don't allow removal of nodes, that would be filtered out
+        if (isFilteredResource(member)) {
+            log.debug("Avoid removal of filtered resource: " + member.getDisplayName());
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
+
+        if (isFilteredResource(destination)) {
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
+        if (isFilteredResource(destination)) {
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
-        return new ActiveLock[] {getLock(Type.WRITE, Scope.EXCLUSIVE)};
+        ActiveLock writeLock = getLock(Type.WRITE, Scope.EXCLUSIVE);
+        return (writeLock != null) ? new ActiveLock[] {writeLock} : new ActiveLock[0];
-                lockable =  node.isNodeType("mix:lockable");
+                lockable =  node.isNodeType(MIX_LOCKABLE);
+
+    /**
+     * Build jcr property name from dav property name
+     *
+     * @param propName
+     * @return jcr name
+     * @throws RepositoryException
+     */
+    private String getJcrName(DavPropertyName propName) throws RepositoryException {
+        String pName = propName.getName();
+        String uri = propName.getNamespace().getURI();
+        String prefix = node.getSession().getNamespacePrefix(uri);
+        if (prefix != null && !"".equals(prefix)) {
+            pName = prefix + ":" + pName;
+        }
+        return pName;
+    }
+
+
+    private void setJcrProperty(DavProperty property) throws RepositoryException {
+        // retrieve value
+        String value = property.getValue().toString();
+        // set value; since multivalued-properties are not listed in the set
+        // of available properties, this extra validation-check is omitted.
+        node.setProperty(getJcrName(property.getName()), value);
+    }
+
+    private void removeJcrProperty(DavPropertyName propertyName) throws RepositoryException {
+        node.getProperty(getJcrName(propertyName)).remove();
+    }
+
+    private boolean isFilteredResource(DavResource resource) {
+        // todo: filtered nodetypes should be checked as well in order to prevent problems.
+        return filter != null && filter.isFilteredResource(resource.getDisplayName(), session.getRepositorySession());
+    }
+
+    private boolean isFilteredNode(Node n) {
+        return filter != null && filter.isFilteredItem(n);
+    }

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS44 INS43 INS43 INS8 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS43 INS42 INS42 INS21 INS42 INS25 MOV25 INS25 INS54 MOV25 INS25 INS54 INS43 INS42 INS43 INS42 INS42 INS25 INS25 INS54 INS25 INS25 INS25 INS25 INS60 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS41 INS43 INS42 INS42 INS60 INS21 INS43 INS42 INS42 INS21 INS43 INS42 INS41 INS43 INS42 INS41 INS42 INS7 INS32 INS8 INS38 INS8 INS8 INS12 INS38 INS8 INS8 INS12 INS42 INS42 INS32 INS8 INS38 INS8 INS8 INS12 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS43 INS59 INS16 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS32 INS42 INS32 INS42 INS27 INS42 INS27 INS22 INS42 INS42 INS42 INS21 INS53 INS54 INS32 MOV53 INS21 INS21 INS44 INS8 INS32 INS53 INS21 INS21 INS44 INS8 INS42 INS52 INS53 INS32 INS53 INS60 INS61 INS60 INS61 INS21 INS44 INS8 INS25 INS42 INS42 INS21 INS53 INS42 INS42 INS21 INS53 INS42 INS42 INS53 INS42 INS42 INS53 INS42 INS42 MOV32 INS36 MOV3 INS3 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS32 INS27 INS32 INS52 INS42 INS32 INS14 INS8 INS12 INS42 INS32 INS32 INS43 INS42 INS54 INS53 INS42 INS14 INS32 INS32 INS43 INS42 INS53 INS14 INS42 INS14 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS32 INS43 INS42 INS54 INS53 INS32 INS8 INS32 INS14 INS32 INS14 INS14 INS14 INS27 INS5 INS34 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS33 INS32 INS7 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS40 INS60 INS61 INS44 INS8 UPD40 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS14 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS40 INS43 INS40 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS8 INS12 INS14 INS42 INS42 INS21 MOV53 INS42 INS42 INS27 INS43 INS40 INS42 INS42 INS27 INS43 INS40 INS43 INS40 INS43 INS40 INS42 INS33 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS43 INS59 INS32 INS8 INS43 INS42 INS21 INS21 INS44 INS8 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS32 INS21 INS44 INS8 INS43 INS42 INS8 INS32 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS42 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS60 INS25 INS42 INS42 INS27 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS27 INS42 INS42 INS9 INS42 INS14 INS42 INS42 INS43 INS32 INS42 INS42 INS9 INS42 INS14 INS43 INS59 INS38 INS8 INS8 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS21 INS60 INS21 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 MOV32 INS32 MOV21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS27 INS45 INS42 INS45 INS32 INS42 INS43 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 DEL8 DEL8 DEL8 DEL45