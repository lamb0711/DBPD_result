JCR-2076: JSR 283: QOM and SQL2
- change return type of QueryInfo.getColumnNames() from Name[] to String[]
- jcr2spi, spi2dav, spi2jcr implementation (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@789269 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ValueFactory;
+import javax.jcr.PropertyType;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Arrays;
-            for (int i = 0; i < langs.length; i++) {
+            for (String lang : langs) {
-                qgs.addQueryLanguage(langs[i], Namespace.EMPTY_NAMESPACE);
+                qgs.addQueryLanguage(lang, Namespace.EMPTY_NAMESPACE);
-            Map namespaces = sInfo.getNamespaces();
+            Map<String, String> namespaces = sInfo.getNamespaces();
-                for (Iterator it = namespaces.keySet().iterator(); it.hasNext(); ) {
-                    String prefix = (String) it.next();
-                    String uri = (String) namespaces.get(prefix);
+                for (Map.Entry<String, String> entry : namespaces.entrySet()) {
+                    String prefix = entry.getKey();
+                    String uri = entry.getValue();
-                for (Iterator it = namespaces.values().iterator(); it.hasNext(); ) {
-                    String uri = (String) it.next();
+                for (String uri : namespaces.values()) {
-                new JcrDavException(e);
+                throw new JcrDavException(e);
-     * @throws RepositoryException
+     * @throws RepositoryException if an error occurs.
-        String[] columnNames = qResult.getColumnNames();
+        List<String> columnNames = new ArrayList<String>();
+        columnNames.addAll(Arrays.asList(qResult.getColumnNames()));
-        for (int i = 0; i < columnNames.length; i++) {
+        for (String columnName : columnNames) {
-            responseDescription.append(ISO9075.encode(columnNames[i]));
+            responseDescription.append(ISO9075.encode(columnName));
+        ValueFactory vf = getRepositorySession().getValueFactory();
+        List<RowValue> descr = new ArrayList<RowValue>();
+        for (Iterator<String> it = columnNames.iterator(); it.hasNext(); ) {
+            String columnName = it.next();
+            if (!isPathOrScore(columnName)) {
+                descr.add(new PlainValue(columnName, null, vf));
+            } else {
+                it.remove();
+            }
+        }
+        // add path and score for each selector
+        List<String> sn = new ArrayList<String>();
+        // TODO
+        // sn.addAll(Arrays.asList(qResult.getSelectorNames()));
+        if (sn.isEmpty()) {
+            sn.add(null); // default selector
+        }
+        for (String selectorName : sn) {
+            descr.add(new PathValue(JcrConstants.JCR_PATH, selectorName, vf));
+            columnNames.add(JcrConstants.JCR_PATH);
+            descr.add(new ScoreValue(JcrConstants.JCR_SCORE, selectorName, vf));
+            columnNames.add(JcrConstants.JCR_SCORE);
+        }
+        String[] selectorNames = createSelectorNames(descr);
+        String[] colNames = columnNames.toArray(new String[columnNames.size()]);
-            Value[] values = row.getValues();
+            List<Value> values = new ArrayList<Value>();
+            for (RowValue rv : descr) {
+                values.add(rv.getValue(row));
+            }
-            // get the jcr:path column indicating the node path and build
+            // get the path for the first selector and build
-            String itemPath = row.getValue(JcrConstants.JCR_PATH).getString();
+            String itemPath = row.getPath();
-            SearchResultProperty srp = new SearchResultProperty(columnNames, values);
+            SearchResultProperty srp = new SearchResultProperty(colNames,
+                    selectorNames, values.toArray(new Value[values.size()]));
+    private static String[] createSelectorNames(Iterable<RowValue> rows)
+            throws RepositoryException {
+        List<String> sn = new ArrayList<String>();
+        for (RowValue rv : rows) {
+            sn.add(rv.getSelectorName());
+        }
+        return sn.toArray(new String[sn.size()]);
+    }
+
-     * @return
+     * @param columnName a column name.
+     * @return <code>true</code> if <code>columnName</code> is either
+     *         <code>jcr:path</code> or <code>jcr:score</code>;
+     *         <code>false</code> otherwise.
+     */
+    private static boolean isPathOrScore(String columnName) {
+        return JcrConstants.JCR_PATH.equals(columnName)
+                || JcrConstants.JCR_SCORE.equals(columnName);
+    }
+
+    /**
+     * @return the session associated with this resource.
+
+    private interface RowValue {
+
+        public Value getValue(Row row) throws RepositoryException;
+
+        public String getColumnName() throws RepositoryException;
+
+        public String getSelectorName() throws RepositoryException;
+    }
+
+    private static final class PlainValue extends SelectorValue {
+
+        public PlainValue(String columnName,
+                          String selectorName,
+                          ValueFactory vf) {
+            super(columnName, selectorName, vf);
+        }
+
+        public Value getValue(Row row) throws RepositoryException {
+            return row.getValue(columnName);
+        }
+    }
+
+    private static abstract class SelectorValue implements RowValue {
+
+        protected final String columnName;
+
+        protected final String selectorName;
+
+        protected final ValueFactory vf;
+
+        public SelectorValue(String columnName,
+                             String selectorName,
+                             ValueFactory vf) {
+            this.columnName = columnName;
+            this.selectorName = selectorName;
+            this.vf = vf;
+        }
+
+        public String getColumnName() throws RepositoryException {
+            return columnName;
+        }
+
+        public String getSelectorName() throws RepositoryException {
+            return selectorName;
+        }
+    }
+
+    private static final class ScoreValue extends SelectorValue {
+
+        public ScoreValue(String columnName,
+                          String selectorName,
+                          ValueFactory vf) {
+            super(columnName, selectorName, vf);
+        }
+
+        public Value getValue(Row row) throws RepositoryException {
+            double score;
+            if (selectorName != null) {
+                score = row.getScore(selectorName);
+            } else {
+                score = row.getScore();
+            }
+            return vf.createValue(score);
+        }
+    }
+
+    private static final class PathValue extends SelectorValue {
+
+        public PathValue(String columnName,
+                         String selectorName,
+                         ValueFactory vf) {
+            super(columnName, selectorName, vf);
+        }
+
+        public Value getValue(Row row) throws RepositoryException {
+            String path;
+            if (selectorName != null) {
+                path = row.getPath(selectorName);
+            } else {
+                path = row.getPath();
+            }
+            return vf.createValue(path, PropertyType.PATH);
+        }
+    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS55 INS55 INS55 INS55 INS55 MOV24 INS83 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS42 INS31 INS31 INS31 INS83 INS83 INS83 INS42 INS43 INS31 INS31 INS83 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS42 INS43 INS31 INS31 INS83 INS83 INS83 INS42 INS43 INS31 INS31 INS21 INS70 INS60 INS60 INS60 INS25 INS70 INS60 INS60 INS43 INS85 INS74 INS42 INS42 INS60 INS70 INS41 INS65 INS65 INS43 INS42 INS41 INS83 INS43 INS42 INS44 INS43 INS83 INS43 INS42 INS43 INS83 INS43 INS42 INS43 INS42 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS43 INS8 INS83 INS43 INS42 INS43 INS8 INS42 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS66 INS74 INS32 INS44 INS42 MOV8 INS43 INS59 INS74 INS59 MOV32 INS8 INS74 INS59 INS32 INS8 INS44 INS42 INS8 MOV5 INS59 INS5 INS59 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS66 INS66 INS66 INS66 INS42 INS27 INS66 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS46 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS42 INS41 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS46 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS46 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS70 INS43 INS43 INS14 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS74 MOV60 INS25 INS43 INS43 INS42 INS14 INS42 INS42 INS21 MOV43 INS42 INS21 INS21 INS21 INS21 INS42 INS32 INS43 INS85 INS42 INS32 INS70 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS3 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS44 INS42 INS8 INS74 INS42 INS42 INS74 INS42 INS42 MOV32 INS32 INS42 INS42 INS42 INS74 MOV43 INS43 UPD42 INS32 INS43 INS38 INS8 INS8 INS42 INS42 INS74 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS3 INS74 INS44 INS42 INS8 MOV43 INS42 INS42 INS74 INS42 INS32 INS5 INS32 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS40 MOV43 INS42 MOV21 MOV43 INS43 INS43 INS70 INS70 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS42 INS42 UPD42 MOV32 INS32 INS21 INS21 INS43 INS43 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS40 INS5 INS32 INS43 INS43 INS14 INS43 INS42 INS21 INS32 INS43 INS43 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS7 INS7 INS7 INS42 INS42 INS44 INS32 INS8 INS44 MOV32 MOV8 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS40 INS42 INS42 INS43 INS40 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS74 INS42 INS32 MOV42 UPD42 MOV42 MOV43 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS74 INS42 MOV42 UPD42 MOV42 MOV60 MOV60 MOV21 MOV43 INS42 MOV14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 MOV43 MOV43 INS43 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 MOV5 INS32 INS40 UPD42 MOV42 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL32 DEL11 DEL42 DEL32 DEL11 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL8 DEL24 DEL42 DEL42 DEL32 DEL59 DEL58 DEL24 DEL21 DEL42 DEL42 DEL2 DEL39 DEL34 DEL11 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL32 DEL40 DEL32 DEL42 DEL32 DEL42