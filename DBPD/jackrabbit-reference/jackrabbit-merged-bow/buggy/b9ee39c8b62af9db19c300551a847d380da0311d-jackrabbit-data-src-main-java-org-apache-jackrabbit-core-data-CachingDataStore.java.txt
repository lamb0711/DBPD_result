JCR-3864 CachingDatastore -cache file sizes to save remote call to remote datastore( S3DS)

Enabled LRU cache of defaut size 200 ( 28KB memory footprint) of IDs Vs length. 
getRecored/getRecordIfStored optimized to use this recordLength cache.
Fixed closing inputstream in TestLocalCache.java

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1671041 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashMap;
+ *     &lt;param name="{@link #setRecLengthCacheSize(int) recLengthCacheSize}" value="200"/>
+    /**
+     * In memory cache to hold {@link DataRecord#getLength()} against
+     * {@link DataIdentifier}
+     */
+    protected Map<DataIdentifier, Long> recLenCache = null;
+
+    
+    /**
+     * Size of {@link #recLenCache}. Each entry consumes of approx 140 bytes.
+     * Default total memory consumption of {@link #recLenCache} 28KB.
+     */
+    private int recLengthCacheSize = 200;
+            /*
+             * Initialize LRU cache of size {@link #recLengthCacheSize}
+             */
+            recLenCache = Collections.synchronizedMap(new LinkedHashMap<DataIdentifier, Long>(
+                recLengthCacheSize, 0.75f, true) {
+
+                private static final long serialVersionUID = -8752749075395630485L;
+
+                @Override
+                protected boolean removeEldestEntry(
+                                Map.Entry<DataIdentifier, Long> eldest) {
+                    if (size() > recLengthCacheSize) {
+                        LOG.trace("evicted from recLengthCache [{}]",
+                            eldest.getKey());
+                        return true;
+                    }
+                    return false;
+                }
+            });
-            throws DataStoreException {
+                    throws DataStoreException {
-        boolean existsAtBackend = false;
-                LOG.debug("[{}] record retrieved from asyncUploadmap",
+                LOG.debug("getRecord: [{}]  retrieved from asyncUploadmap",
-            } else if (cache.getFileIfStored(fileName) != null
-                || (existsAtBackend = backend.exists(identifier))) {
-                if (existsAtBackend) {
-                    LOG.debug("[{}] record retrieved from backend", identifier);
-                    asyncDownload(identifier);
-                } else {
-                    LOG.debug("[{}] record retrieved from local cache",
-                        identifier);
-                }
+            } else if (getLength(identifier) > -1) {
+                LOG.debug("getRecord: [{}]  retrieved using getLength",
+                    identifier);
-            throws DataStoreException {
+                    throws DataStoreException {
-                LOG.debug("[{}] record retrieved from asyncuploadmap",
+                LOG.debug(
+                    "getRecordIfStored: [{}]  retrieved from asyncuploadmap",
-            } else if (backend.exists(identifier)) {
-                LOG.debug("[{}] record retrieved from backend", identifier);
+            } else if (recLenCache.containsKey(identifier)) {
+                LOG.debug(
+                    "getRecordIfStored: [{}]  retrieved using recLenCache",
+                    identifier);
+            } else {
+                try {
+                    long length = backend.getLength(identifier);
+                    LOG.debug(
+                        "getRecordIfStored :[{}]  retrieved from backend",
+                        identifier);
+                    recLenCache.put(identifier, length);
+                    touchInternal(identifier);
+                    usesIdentifier(identifier);
+                    return new CachingDataRecord(this, identifier);
+                } catch (DataStoreException ignore) {
+                    LOG.warn(" getRecordIfStored: [{}]  not found", identifier);
+                }
+
+                recLenCache.remove(identifier);
+        
+            recLenCache.remove(identifier);
-            throws DataStoreException {
+                    throws DataStoreException {
-        Long length = cache.getFileLength(fileName);
+
+        Long length = recLenCache.get(identifier);
-            return length.longValue();
+            LOG.debug(" identifier [{}] length fetched from recLengthCache",
+                identifier);
+            return length;
+        } else if ((length = cache.getFileLength(fileName)) != null) {
+            LOG.debug(" identifier [{}] length fetched from local cache",
+                identifier);
+            recLenCache.put(identifier, length);
+            return length;
+            LOG.debug(" identifier [{}] length fetched from backend",
+                identifier);
+            recLenCache.put(identifier, length);
+    
+    public void deleteFromCache(DataIdentifier identifier)
+                    throws DataStoreException {
+        try {
+            // order is important here
+            recLenCache.remove(identifier);
+            String fileName = getFileName(identifier);
+            asyncWriteCache.delete(fileName);
+            cache.delete(fileName);
+        } catch (IOException ioe) {
+            throw new DataStoreException(ioe);
+        }
+    }
+    
+    
+    public void setRecLengthCacheSize(int recLengthCacheSize) {
+        this.recLengthCacheSize = recLengthCacheSize;
+    }

INS26 MOV31 INS40 INS23 INS23 INS31 INS31 INS29 INS83 INS74 INS59 INS29 INS83 INS39 INS59 MOV78 MOV43 UPD42 MOV44 MOV43 MOV29 MOV78 MOV43 UPD42 MOV44 MOV43 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS66 INS65 INS66 INS65 INS43 INS43 INS43 INS42 INS33 INS65 INS42 INS34 MOV60 MOV53 MOV41 INS25 INS43 INS42 INS42 INS54 INS39 INS42 INS21 INS68 INS66 INS66 INS65 INS66 INS65 INS42 INS42 INS42 INS66 INS65 INS66 INS66 INS65 INS66 MOV12 MOV43 MOV59 MOV12 MOV27 INS8 INS25 INS42 INS8 INS12 INS7 INS42 INS69 INS68 INS42 INS67 INS67 INS21 UPD42 MOV42 INS21 INS32 INS21 INS41 INS27 MOV8 MOV8 INS21 INS60 INS21 INS21 INS44 INS8 INS22 INS42 INS39 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS32 INS42 INS36 INS33 INS21 INS21 INS41 INS21 INS21 INS32 INS43 INS59 INS32 INS32 INS43 INS42 INS53 INS52 INS42 INS42 INS32 INS27 INS32 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS7 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS38 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV21 INS54 INS32 INS42 MOV32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS74 INS42 INS34 INS9 INS1 UPD45 UPD42 MOV42 MOV42 INS34 UPD45 INS8 INS12 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS23 INS31 UPD45 UPD45 INS60 INS21 INS21 INS21 INS21 INS41 INS44 INS8 INS42 INS42 INS42 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS39 INS59 INS32 INS32 INS32 INS32 INS14 INS43 INS42 INS21 INS42 INS38 INS42 INS74 INS42 INS25 INS41 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS52 INS42 INS42 INS32 INS34 INS43 INS43 INS43 INS27 INS8 INS9 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS45 INS42 INS40 INS42 INS42 INS32 INS42 INS21 INS41 INS42 INS32 INS9 INS42 INS42 INS45 INS32 INS42 INS42 DEL42 DEL32 DEL39 DEL9 DEL32 DEL33 DEL27 DEL42 DEL32 DEL7 DEL36 DEL27 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL25 DEL42 DEL32 DEL41 DEL25