JCR-2313 - Improvements to user management (2) [work in progress] 
-> see issue for details

JCR-2333 - ItemImpl#validateTransientItems: Incomplete validation of mandatory child item
-> patch2

JCR-2195 - Provide possibility to import protected items using Session/Workspace import functionality
-> deal with reference properties
-> make import handlers configurable
-> add userimporter

JCR-171 - Make the extraction of Session UserIDs from Subjects configurable
-> extend SecurityManagerConfig and retrieve uid from principal name if configured
     class is present in the subject

JCR-2351 - Make Authorizable.setProperty more noisy in case of failure

JCR-2331 - Configurable DefaultPolicy replacing Initialization within the ACProvider
-> initial steps. remove code that relies on the default-init
-> add TODOs

JCR-2291 - Issues with compiled permissions of ACL provider
-> remove code searching for DENY-read entries in case of default initialization of ac entries

and here and there minor improvement, usage of generics etc....

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@828791 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import org.apache.jackrabbit.core.config.ImportConfig;
+    private final List<ProtectedNodeImporter> pnImporters = new ArrayList();
-     * Importer for protected nodes.
+     * Available importers for protected properties.
-    private final ProtectedNodeImporter pnImporter;
+    private final List<ProtectedPropertyImporter> ppImporters = new ArrayList();
-     * Importer for protected properties.
+     * Currently active importer for protected nodes.
-    private final ProtectedPropertyImporter ppImporter;
+    private ProtectedNodeImporter pnImporter = null;
-        this(importTargetNode, session, uuidBehavior, null, null);
+        this(importTargetNode, session, uuidBehavior, null);
-     * @param pnImporter importer for protected nodes
-     * @param ppImporter importer for protected properties
+     * @param config
-                           int uuidBehavior,
-                           ProtectedNodeImporter pnImporter,
-                           ProtectedPropertyImporter ppImporter) {
+                           int uuidBehavior, ImportConfig config) {
-        this.ppImporter = ppImporter == null
-                ? new DefaultProtectedPropertyImporter(session, session, false)
-                : ppImporter;
-        this.pnImporter = pnImporter == null
-                ? new DefaultProtectedNodeImporter(session, session, false, uuidBehavior)
-                : pnImporter;
+
+        if (config != null) {
+            List<ProtectedNodeImporter> ln = config.getProtectedNodeImporters();
+            for (ProtectedNodeImporter pni : ln) {
+                if (pni.init(session, session, false, uuidBehavior, refTracker)) {
+                    pnImporters.add(pni);
+                }
+            }
+            List<ProtectedPropertyImporter> lp = config.getProtectedPropertyImporters();
+            for (ProtectedPropertyImporter ppi : lp) {
+                if (ppi.init(session, session, false, uuidBehavior, refTracker)) {
+                    ppImporters.add(ppi);
+                }
+            }
+        }
+
+        // missing config -> initialize defaults.
+        if (pnImporters.isEmpty()) {
+            ProtectedNodeImporter def = new DefaultProtectedNodeImporter();
+            if (def.init(session, session, false, uuidBehavior, refTracker)) {
+                pnImporters.add(def);
+            }
+        }
+        if (ppImporters.isEmpty()) {
+            DefaultProtectedPropertyImporter def = new DefaultProtectedPropertyImporter();
+            if (def.init(session, session, false, uuidBehavior, refTracker)) {
+                ppImporters.add(def);
+            }
+        }
-            pnImporter.startChildInfo(nodeInfo, propInfos);
+            if (pnImporter != null) {
+                pnImporter.startChildInfo(nodeInfo, propInfos);
+            }
-            if (pnImporter.start(parent)) {
-                log.debug("Protected node -> delegated to ProtectedPropertyImporter");
-                pnImporter.startChildInfo(nodeInfo, propInfos);
-            } /* else: p-i-Importer isn't able to deal with the protected tree.
-                 skip the tree below the protected parent */
+            for (ProtectedNodeImporter pni : pnImporters) {
+                if (pni.start(parent)) {
+                    log.debug("Protected node -> delegated to ProtectedPropertyImporter");
+                    pnImporter = pni;
+                    pnImporter.startChildInfo(nodeInfo, propInfos);
+                    break;
+                } /* else: p-i-Importer isn't able to deal with the protected tree.
+                     try next. and if none can handle the passed parent the
+                     tree below will be skipped */
+            }
-                if (ppImporter.handlePropInfo(node, pi, def)) {
-                    // TODO: deal with reference props within the imported tree?                    
-                    log.debug("Protected property -> delegated to ProtectedPropertyImporter");
-                } // else: p-i-Importer isn't able to deal with this property
+                for (ProtectedPropertyImporter ppi : ppImporters) {
+                    if (ppi.handlePropInfo(node, pi, def)) {
+                        log.debug("Protected property -> delegated to ProtectedPropertyImporter");
+                        break;
+                    } /* else: p-i-Importer isn't able to deal with this property.
+                         try next pp-importer */
+
+                }
-            pnImporter.endChildInfo();
+            if (pnImporter != null) {
+                pnImporter.endChildInfo();
+            }
-            pnImporter.end(parent);
-            // TODO: deal with reference props within the imported tree?
+            if (pnImporter != null) {
+                pnImporter.end(parent);
+                // and reset the pnImporter field waiting for the next protected
+                // parent -> selecting again from available importers
+                pnImporter = null;
+            }
-        Iterator iter = refTracker.getProcessedReferences();
+        // 1. let protected property/node importers handle protected ref-properties
+        //    and (protected) properties underneith a protected parent node.
+        for (ProtectedPropertyImporter ppi : ppImporters) {
+            ppi.processReferences();
+        }
+        for (ProtectedNodeImporter pni : pnImporters) {
+            pni.processReferences();
+        }
+
+        // 2. regular non-protected properties.
+        Iterator<Object> iter = refTracker.getProcessedReferences();
-            Property prop = (Property) iter.next();
+            Object ref = iter.next();
+            if (!(ref instanceof Property)) {
+                continue;
+            }
+
+            Property prop = (Property) ref;

INS26 INS26 INS40 INS40 INS23 INS83 INS83 INS74 INS59 INS74 MOV43 INS44 INS8 INS43 INS43 INS42 INS14 INS43 MOV43 UPD42 INS14 UPD42 INS33 INS43 INS42 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS25 INS25 INS25 INS70 INS70 INS42 INS42 INS43 UPD66 INS42 INS43 UPD66 UPD42 INS42 INS27 INS8 INS32 INS8 INS32 INS8 INS8 INS44 INS42 INS8 INS44 INS42 INS8 INS74 INS42 INS42 UPD42 MOV42 MOV33 INS60 INS70 INS60 INS70 INS42 INS42 INS60 INS25 INS42 INS42 INS60 INS25 INS25 INS70 INS25 INS8 INS43 INS42 INS21 INS43 INS42 INS21 MOV43 INS43 INS25 INS60 INS74 INS59 MOV44 INS42 INS8 INS74 INS59 MOV44 INS42 INS8 INS43 INS59 INS32 INS8 MOV43 INS59 INS32 INS8 INS27 INS8 INS44 INS42 INS8 INS27 MOV8 INS25 INS42 INS32 INS42 INS32 INS42 INS43 INS38 INS8 MOV43 INS59 INS43 INS43 INS42 INS32 UPD42 INS25 INS43 INS43 INS42 INS32 UPD42 INS25 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS21 INS42 INS14 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS21 INS42 INS33 MOV21 INS43 INS42 MOV25 INS70 INS42 INS33 INS27 MOV8 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 INS36 INS18 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS43 INS32 INS42 INS44 INS42 INS8 INS42 INS33 INS21 INS62 MOV43 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS21 INS10 INS43 INS42 MOV25 INS7 INS42 INS43 INS32 INS32 INS7 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS10 DEL83 DEL33 DEL66 DEL42 DEL66 DEL65 DEL42 DEL42 DEL9 DEL42 DEL52 DEL42 DEL22 DEL27 DEL42 DEL42 DEL9 DEL14 DEL42 DEL16 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL42 DEL16 DEL7 DEL21 DEL8 DEL11