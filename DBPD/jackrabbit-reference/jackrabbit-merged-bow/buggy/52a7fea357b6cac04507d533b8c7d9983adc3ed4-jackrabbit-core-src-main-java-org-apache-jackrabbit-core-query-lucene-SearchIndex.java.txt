JCR-390: Move text extraction into a background thread

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497067 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Document;
-     * Name of the file to persist search internal namespace mappings
+     * Name of the file to persist search internal namespace mappings.
+     * The default value for property {@link #extractorPoolSize}.
+     */
+    public static final int DEFAULT_EXTRACTOR_POOL_SIZE = 0;
+
+    /**
+     * The default value for property {@link #extractorBackLog}.
+     */
+    public static final int DEFAULT_EXTRACTOR_BACK_LOG = 10;
+
+    /**
+     * The default timeout in milliseconds which is granted to the text
+     * extraction process until fulltext indexing is deferred to a background
+     * thread.
+     */
+    public static final long DEFAULT_EXTRACTOR_TIMEOUT = 100;
+
+    /**
+     * extractorPoolSize config parameter
+     */
+    private int extractorPoolSize = DEFAULT_EXTRACTOR_POOL_SIZE;
+
+    /**
+     * extractorBackLog config parameter
+     */
+    private int extractorBackLog = DEFAULT_EXTRACTOR_BACK_LOG;
+
+    /**
+     * extractorTimeout config parameter
+     */
+    private long extractorTimeout = DEFAULT_EXTRACTOR_TIMEOUT;
+
+    /**
+        extractor = new JackrabbitTextExtractor(textFilterClasses);
+        if (extractorPoolSize > 0) {
+            // wrap with pool
+            extractor = new PooledTextExtractor(extractor, extractorPoolSize,
+                    extractorBackLog, extractorTimeout);
+        }
+
-        extractor = new JackrabbitTextExtractor(textFilterClasses);
-
-                return createNodeIndexer(state, getNamespaceMappings());
+                Document doc = null;
+                try {
+                    doc = createDocument(state, getNamespaceMappings());
+                } catch (RepositoryException e) {
+                    log.error("Exception while creating document for node: "
+                            + state.getNodeId() + ": " + e.toString());
+                }
+                return doc;
+        // shutdown extractor
+        if (extractor instanceof PooledTextExtractor) {
+            ((PooledTextExtractor) extractor).shutdown();
+        }
-     * Creates a <code>NodeIndexer</code> for a node state using the namespace
-     * mappings <code>nsMappings</code>.
+     * Creates a lucene <code>Document</code> for a node state using the
+     * namespace mappings <code>nsMappings</code>.
-     * @return a <code>NodeIndexer</code> for the given <code>node</code>.
+     * @return a lucene <code>Document</code> that contains all properties of
+     *         <code>node</code>.
+     * @throws RepositoryException if an error occurs while indexing the
+     *                             <code>node</code>.
-    protected NodeIndexer createNodeIndexer(NodeState node, NamespaceMappings nsMappings) {
+    protected Document createDocument(NodeState node,
+                                      NamespaceMappings nsMappings)
+            throws RepositoryException {
-                nsMappings, extractor);
+                nsMappings, extractor).createDoc();
+    /**
+     * The number of background threads for the extractor pool.
+     *
+     * @param numThreads the number of threads.
+     */
+    public void setExtractorPoolSize(int numThreads) {
+        if (numThreads < 0) {
+            numThreads = 0;
+        }
+        extractorPoolSize = numThreads;
+    }
+
+    /**
+     * @return the size of the thread pool which is used to run the text
+     *         extractors when binary content is indexed.
+     */
+    public int getExtractorPoolSize() {
+        return extractorPoolSize;
+    }
+
+    /**
+     * The number of extractor jobs that are queued until a new job is executed
+     * with the current thread instead of using the thread pool.
+     *
+     * @param backLog size of the extractor job queue.
+     */
+    public void setExtractorBackLogSize(int backLog) {
+        extractorBackLog = backLog;
+    }
+
+    /**
+     * @return the size of the extractor queue back log.
+     */
+    public int getExtractorBackLogSize() {
+        return extractorBackLog;
+    }
+
+    /**
+     * The timeout in milliseconds which is granted to the text extraction
+     * process until fulltext indexing is deferred to a background thread.
+     *
+     * @param timeout the timeout in milliseconds.
+     */
+    public void setExtractorTimeout(long timeout) {
+        extractorTimeout = timeout;
+    }
+
+    /**
+     * @return the extractor timeout in milliseconds.
+     */
+    public long getExtractorTimeout() {
+        return extractorTimeout;
+    }
+

MOV26 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 MOV21 UPD43 UPD42 INS43 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS25 INS25 INS65 UPD42 INS42 INS65 INS65 INS39 INS42 INS25 INS21 INS65 INS41 INS65 INS65 INS39 INS42 INS21 INS65 INS41 INS65 INS65 INS39 INS42 INS21 INS65 INS41 UPD66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS27 INS8 INS62 INS8 UPD66 UPD66 INS66 UPD66 INS42 INS66 INS66 INS32 INS66 INS42 INS66 INS27 INS8 INS7 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS7 INS66 INS42 INS66 INS66 INS42 INS66 INS7 INS66 INS42 INS67 INS67 INS42 INS34 INS21 INS42 INS43 INS21 MOV14 INS42 INS42 INS34 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS32 INS7 INS42 INS14 INS36 INS42 INS42 INS34 INS43 INS42 INS42 INS42 INS42 INS11 INS42 INS60 INS54 INS43 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS7 INS43 INS42 INS21 INS42 MOV32 INS42 INS32 UPD42 INS42 INS42 INS27 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42