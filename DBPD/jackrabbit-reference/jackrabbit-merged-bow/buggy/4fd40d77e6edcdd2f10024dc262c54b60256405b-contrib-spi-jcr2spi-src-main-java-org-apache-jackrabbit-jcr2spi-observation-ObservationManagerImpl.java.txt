- add commons-codec dependency to client project.xml
- add concurrent dependency to jcr2spi project.xml
- remove events again from operation methods on RepositoryService.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@472888 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.ChangeLog;
+import org.apache.jackrabbit.jcr2spi.WorkspaceManager;
+import org.apache.jackrabbit.spi.EventFilter;
+import java.util.List;
+import java.util.ArrayList;
+     * The workspace manager.
+     */
+    private final WorkspaceManager wspManager;
+
+    /**
+     * @param wspManager the WorkspaceManager.
-    public ObservationManagerImpl(NamespaceResolver nsResolver, NodeTypeRegistry ntRegistry) {
+    public ObservationManagerImpl(WorkspaceManager wspManager, NamespaceResolver nsResolver, NodeTypeRegistry ntRegistry) {
+        this.wspManager = wspManager;
+        this.wspManager.addEventListener(this);
-                                 String[] uuid,
-                                 String[] nodeTypeName,
+                                 String[] uuids,
+                                 String[] nodeTypeNames,
-        QName[] nodeTypeNames;
-        if (nodeTypeName == null) {
-            nodeTypeNames = null;
+        QName[] nodeTypeQNames;
+        if (nodeTypeNames == null) {
+            nodeTypeQNames = null;
-                nodeTypeNames = new QName[nodeTypeName.length];
-                for (int i = 0; i < nodeTypeName.length; i++) {
-                    QName ntName = NameFormat.parse(nodeTypeName[i], nsResolver);
+                nodeTypeQNames = new QName[nodeTypeNames.length];
+                for (int i = 0; i < nodeTypeNames.length; i++) {
+                    QName ntName = NameFormat.parse(nodeTypeNames[i], nsResolver);
-                        throw new RepositoryException("unknown node type: " + nodeTypeName[i]);
+                        throw new RepositoryException("unknown node type: " + nodeTypeNames[i]);
-                    nodeTypeNames[i] = ntName;
+                    nodeTypeQNames[i] = ntName;
-            EventFilter filter = new EventFilter(nsResolver, ntRegistry,
-                    eventTypes, path, isDeep, uuid, nodeTypeNames, noLocal);
+            EventFilter filter = wspManager.createEventFilter(eventTypes, path, isDeep, uuids, nodeTypeQNames, noLocal);
+    public Collection getEventFilters() {
+        List filters = new ArrayList();
+        synchronized (subscriptions) {
+            ensureReadOnlyMap();
+            filters.addAll(readOnlySubscriptions.values());
+        }
+        return filters;
+    }
+
-            FilteredEventIterator eventIter = new FilteredEventIterator(eventBundle, filter);
+            FilteredEventIterator eventIter = new FilteredEventIterator(eventBundle, filter, nsResolver);
-    /**
-     * Same as {@link #onEvent(EventBundle)} but only used for local changes
-     * with a <code>ChangeLog</code>.
-     * 
-     * @param eventBundle
-     * @param changeLog
-     */
-    public void onEvent(EventBundle eventBundle, ChangeLog changeLog) {
-        onEvent(eventBundle);
-    }
-

INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS23 MOV44 INS31 INS29 INS83 INS83 INS43 INS59 INS44 MOV83 INS43 UPD42 MOV42 INS8 MOV65 INS42 INS42 INS65 INS43 INS42 INS21 INS21 UPD42 UPD42 INS42 INS60 INS51 INS41 UPD66 INS42 INS66 INS42 INS7 INS32 MOV5 INS43 INS59 INS42 INS8 INS42 INS22 INS42 INS22 INS42 INS52 UPD42 UPD42 UPD42 MOV42 INS42 INS14 INS21 MOV21 INS52 INS42 INS52 INS42 MOV43 INS43 INS32 INS32 MOV43 UPD42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV43 INS42 UPD42 UPD40 MOV5 UPD40 INS2 MOV2 INS42 INS42 UPD42 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL32 DEL42 DEL65 DEL42 DEL65 DEL29 DEL39 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL8 DEL31