JCR-442: Committed Nicolas' latest contrib/backup changes (patch-backup-060728.txt) with some modifications.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@426435 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.Array;
+import java.util.zip.CRC32;
+import java.util.zip.CheckedInputStream;
+import java.util.zip.Checksum;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+    
+    private static int BUFFER_SIZE = 1024;
-    int maxFileSize;
-    File zip;
-    FileInputStream fin;
-    FileChannel fc;
-    private ByteBuffer buffer;
-	private FileOutputStream fout;
-
-	
-	public ZipFileBackupIOHandler(String zipFile) {
-		this.zip = new File(zipFile);
-        this.buffer = ByteBuffer.allocateDirect(2048);        
-	}
-
-	public void setMaxFileSize(int i) {
-		this.maxFileSize = i;
+    private File zip;
+  //  private FileInputStream fin;
+ //   private ByteBuffer buffer;
+    private FileOutputStream fout;
+    private ZipOutputStream zipOut;
+    
+    
+    public ZipFileBackupIOHandler(String zipFile) throws FileNotFoundException {
+        this.zip = new File(zipFile);
+      //  this.buffer = ByteBuffer.allocateDirect(2048);        
-    public int getMaxFileSize() {
-        return this.maxFileSize;
-    }
-
-    public void close() {
-        // TODO Auto-generated method stub
-        
+    public void close() throws IOException {
+        zipOut.finish();
+        zipOut.close();    
-    public void init() {
+  ///  private void init() {
-        this.buffer.clear();
-    }
+       // this.buffer.clear();
+    //}
-    public void initBackup() throws FileNotFoundException {
-        this.fout = new FileOutputStream(this.zip);
-        this.fc = this.fin.getChannel();      
-    }
-    
-    public void initRestore() {
-        try {
-			this.fin = new FileInputStream(this.zip);
-		} catch (FileNotFoundException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-        this.fc = this.fin.getChannel();
+    public void initBackup() throws IOException {
+        boolean a = this.zip.createNewFile(); 
+        if (!a) {
+            throw new IOException();
+        }
+        
+        this.fout = new FileOutputStream(this.zip);
+        this.zipOut = new ZipOutputStream(this.fout);
+    }
+    
+    public void initRestore() throws FileNotFoundException {
+  //      this.fin = new FileInputStream(this.zip);
+      //  this.fcin = this.fin.getChannel();
+        //Restore zipFile
-
-    
-    
-    /*  private void writeFile(String string, String content) {
+    /*private void writeFile(String string, String content) {
+    
+    public void read() {
+    }
+    
+    
+    public void write(String name, File f) throws IOException {
+       zipOut.flush();
+       ZipEntry e = new ZipEntry(name);
+       zipOut.putNextEntry(e);
+       
+       Checksum crc = new CRC32();
+       CheckedInputStream i = new CheckedInputStream(new FileInputStream(f), crc);
+       
+       byte[] buffer = new byte[BUFFER_SIZE]; 
+       
+       int len;  
+       while ( (len = i.read(buffer, 0, BUFFER_SIZE)) != -1) {
+           zipOut.write(buffer,0, len); 
+        }
+       
+       //Checksum management
+       // TODO Is crc up to date? To be checked...
+       long check = crc.getValue();
+       e.setCrc(check);
+       zipOut.closeEntry(); 
+    }
+
+  
+    /**
+     * 
+     * TODO: refactor this method with the one upper.
+     * 
+     * 
+     * Used for small I/O operations (no NIO used there). Take a file and zip it.
+     * 
+     * Most I/O operations are operated on RAM.
+     * 
+     */
+    public void write(String name, ByteArrayOutputStream fos) throws IOException {       
+        zipOut.flush();
+        ZipEntry e = new ZipEntry(name);
+        zipOut.putNextEntry(e);
+        
+        Checksum crc = new CRC32();
+        
+        InputStream io = new ByteArrayInputStream(fos.toByteArray());
+        
+        CheckedInputStream i = new CheckedInputStream(io, crc);
+        
+        byte[] buffer = new byte[BUFFER_SIZE]; 
+        int len;  
+        while ( (len = i.read(buffer, 0, BUFFER_SIZE)) != -1) {
+            zipOut.write(buffer,0, len); 
+         }
+    
+        //Checksum management
+        // TODO Is crc up to date? To be checked...
+        long check = crc.getValue();
+        e.setCrc(check);
+        zipOut.closeEntry(); 
+     }
+   

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 UPD40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS83 INS83 INS83 UPD43 MOV43 INS83 INS39 INS42 INS43 INS8 UPD42 INS43 INS8 UPD39 UPD42 MOV43 INS29 UPD42 MOV83 MOV39 INS42 INS44 INS44 INS43 INS8 INS29 INS42 INS44 INS44 INS43 UPD42 INS34 UPD42 UPD42 INS42 UPD42 MOV42 INS21 INS21 INS42 INS60 INS25 MOV21 MOV21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS60 INS60 INS60 INS60 INS61 INS60 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS42 MOV21 INS60 MOV21 INS60 INS60 INS60 INS60 INS60 INS61 INS60 INS21 INS21 INS32 INS32 INS39 INS59 INS38 INS8 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS5 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS32 INS32 INS66 INS66 INS66 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS5 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS53 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS39 INS85 INS42 INS3 INS42 INS36 INS38 MOV21 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS14 UPD42 INS42 UPD42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS39 INS85 INS42 INS3 INS42 INS36 INS38 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV22 INS42 INS14 UPD42 INS43 INS22 INS43 INS42 INS43 INS43 MOV14 INS42 INS5 INS42 INS7 INS34 INS42 INS42 INS43 INS42 INS43 INS43 INS32 INS43 INS42 INS42 INS5 INS42 INS7 INS34 INS32 INS42 INS42 INS43 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS34 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 MOV32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 UPD42 INS42 INS34 INS42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL42 DEL39 DEL42 DEL44 DEL8 DEL52 DEL42 DEL22 DEL41 DEL52 DEL42 DEL22 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL7 DEL21