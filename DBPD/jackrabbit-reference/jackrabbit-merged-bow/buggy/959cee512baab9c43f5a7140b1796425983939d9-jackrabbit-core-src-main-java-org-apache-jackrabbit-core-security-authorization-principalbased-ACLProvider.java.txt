 JCR-1588: JSR 283: Access Control

- align principalbased ac editing with latest changes made to JSR 283
   -> getApplicablePolicies(Principal) only returns policies that have not yet been set
   -> getPolicies(Principal) added -> used to modify policies that have been set before

- WorkspaceAccessManagerImpl.grants throws NoSuchWorkspaceException if an invalid
   wspName gets passed... TCK tests would fail if not executed with admin user that
   is covered by shortcut.

- Various improvements to AccessControlProvider handling
   > prevent closure of used provider
   > add AccessControlProvider#isLive that allows to rebuild the provider if it was closed before

- Simplify WriteTest and add test for changes made to principal-based ACLEditor

JCR-2087 Upgrade to Java 5 as the base platform
- use generics in security code (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@788450 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.security.authorization.UnmodifiableAccessControlList;
-import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
+import javax.jcr.security.AccessControlException;
+
+    private static final AccessControlPolicy effectivePolicy = EffectivePrincipalBasedPolicy.getInstance();
+
+                // initial default permissions for the administrators group                
+                    installDefaultPermissions(administrators,
+                        new Privilege[] {acMgr.privilegeFromName(Privilege.JCR_ALL)},
+                        restrictions, editor);
-                    log.warn("Administrators principal group is missing.");
-                    administrators = new PrincipalImpl(pName);
-                }
-                AccessControlPolicy[] acls = editor.editAccessControlPolicies(administrators);
-                ACLTemplate acl = (ACLTemplate) acls[0];
-                if (acl.isEmpty()) {
-                    log.debug("... Privilege.ALL for administrators principal.");
-                    acl.addEntry(administrators,
-                            new Privilege[] {acMgr.privilegeFromName(Privilege.JCR_ALL)},
-                            true, restrictions);
-                    editor.setPolicy(acl.getPath(), acl);
-                } else {
-                    log.debug("... policy for administrators principal already present.");
+                    log.warn("Administrators principal group is missing -> Not adding default permissions.");
-                Principal everyone = pMgr.getEveryone();
-                acls = editor.editAccessControlPolicies(everyone);
-                acl = (ACLTemplate) acls[0];
-                if (acl.isEmpty()) {
-                    log.debug("... Privilege.READ for everyone principal.");
-                    acl.addEntry(everyone,
-                            new Privilege[] {acMgr.privilegeFromName(Privilege.JCR_READ)},
-                            true, restrictions);
-                    editor.setPolicy(acl.getPath(), acl);
-                } else {
-                    log.debug("... policy for everyone principal already present.");
-                }
+                // initialize default permissions for the everyone group
+                installDefaultPermissions(pMgr.getEveryone(),
+                        new Privilege[] {acMgr.privilegeFromName(Privilege.JCR_READ)},
+                        restrictions, editor);
+    private static void installDefaultPermissions(Principal principal, Privilege[] privs, Map restrictions, AccessControlEditor editor) throws RepositoryException, AccessControlException {
+        AccessControlPolicy[] acls = editor.editAccessControlPolicies(principal);
+        if (acls.length > 0) {
+            ACLTemplate acl = (ACLTemplate) acls[0];
+            if (acl.isEmpty()) {
+                acl.addEntry(principal, privs, true, restrictions);
+                editor.setPolicy(acl.getPath(), acl);
+            } else {
+                log.debug("... policy for principal '"+principal.getName()+"' already present.");
+            }
+        } else {
+            log.debug("... policy for principal  '"+principal.getName()+"'  already present.");
+        }
+    }
+
-           TODO review
-           rep:nodePath restriction, returning the principal-based
-           policy at 'absPath' probably doesn't reveal what the caller expects.
-           Maybe it would be better not to return an empty array as
-           {@link AccessControlManager#getEffectivePolicies(String)
-           is defined to express a best-effor estimate only.
+           rep:nodePath restriction present with the individual access control
+           entries, returning the principal-based policy at 'absPath' (which for
+           most nodes in the repository isn't available anyway) doesn't
+           provide the desired information.
+           As tmp. solution some default policy is returned indicating.
+           TODO: add proper evalution and return a set of ACLs that take effect on the node at abspath
-        AccessControlPolicy[] tmpls = editor.getPolicies(session.getJCRPath(absPath));
-        AccessControlPolicy[] effectives = new AccessControlPolicy[tmpls.length];
-        for (int i = 0; i < tmpls.length; i++) {
-            effectives[i] = new UnmodifiableAccessControlList((ACLTemplate) tmpls[i]);
-        }
-        return effectives;
+        return new AccessControlPolicy[] {effectivePolicy};
+
+    /**
+     * Dummy effective policy 
+     */
+    private static final class EffectivePrincipalBasedPolicy implements AccessControlPolicy {
+
+        private static EffectivePrincipalBasedPolicy INSTANCE = new EffectivePrincipalBasedPolicy();
+        private EffectivePrincipalBasedPolicy() {
+        }
+
+        private static EffectivePrincipalBasedPolicy getInstance() {
+            return INSTANCE;
+        }
+    }

MOV26 UPD40 INS23 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS8 MOV29 INS83 MOV5 INS42 MOV44 MOV43 MOV43 INS8 INS29 INS83 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS42 INS42 INS32 MOV43 INS42 INS5 INS42 INS43 INS42 INS43 INS42 INS42 UPD42 MOV42 INS60 INS25 INS41 INS65 UPD42 MOV42 INS83 INS83 INS43 INS59 INS83 INS42 INS8 INS83 INS83 INS43 INS42 INS8 INS42 INS42 INS43 INS85 INS42 UPD42 MOV42 MOV5 INS59 INS27 INS8 INS8 INS3 INS66 UPD42 MOV42 INS42 INS14 INS42 MOV41 INS42 INS42 INS32 INS40 INS34 MOV60 INS25 INS21 MOV5 INS4 INS43 UPD42 INS42 INS42 INS42 MOV32 INS8 INS8 INS32 INS42 INS42 MOV21 INS21 MOV21 INS21 INS42 INS42 INS27 MOV3 INS32 INS32 INS45 INS32 INS45 INS21 UPD42 MOV32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS45 INS32 INS45 INS42 INS42 MOV3 INS42 INS42 UPD45 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL9 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL9 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL34 DEL2 DEL11 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL43 DEL43 DEL42 DEL42 DEL2 DEL11 DEL14 DEL7 DEL21 DEL8 DEL24 DEL8 DEL31