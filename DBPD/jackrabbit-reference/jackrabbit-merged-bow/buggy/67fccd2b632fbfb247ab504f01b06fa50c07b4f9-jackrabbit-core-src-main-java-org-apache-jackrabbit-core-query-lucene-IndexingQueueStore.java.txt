JCR-1747: org.apache.jackrabbit.core.query.lucene.SearchIndex with in-memory lucene index

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@718218 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.FileSystem;
-import org.apache.jackrabbit.core.fs.FileSystemException;
+import org.apache.jackrabbit.core.query.lucene.directory.IndexInputStream;
+import org.apache.lucene.store.Directory;
- * was also persisted to a {@link FileSystem}. Starting with 1.5 the pending
+ * was also persisted to disk. Starting with 1.5 the pending
+     * Name of the file that contains the indexing queue log.
+     */
+    private static final String INDEXING_QUEUE_FILE = "indexing_queue.log";
+
+    /**
-     * The file system from where to read pending document UUIDs.
+     * The directory from where to read pending document UUIDs.
-    private final FileSystem fs;
+    private final Directory dir;
-     * The name of the file for the pending document UUIDs.
-     */
-    private final String fileName;
-
-    /**
-     * Creates a new <code>IndexingQueueStore</code> using the given file
-     * system.
+     * Creates a new <code>IndexingQueueStore</code> using the given directory.
-     * @param fs       the file system to use.
-     * @param fileName the name of the file where to write the pending UUIDs
-     *                 to.
-     * @throws FileSystemException if an error ocurrs while reading pending
-     *                             UUIDs.
+     * @param directory the directory to use.
+     * @throws IOException if an error ocurrs while reading pending UUIDs.
-    IndexingQueueStore(FileSystem fs, String fileName) throws FileSystemException {
-        this.fs = fs;
-        this.fileName = fileName;
+    IndexingQueueStore(Directory directory) throws IOException {
+        this.dir = directory;
-                if (fs.exists(fileName)) {
-                    fs.deleteFile(fileName);
+                if (dir.fileExists(INDEXING_QUEUE_FILE)) {
+                    dir.deleteFile(INDEXING_QUEUE_FILE);
-            } catch (FileSystemException e) {
-                log.warn("unable to delete " + fileName);
+            } catch (IOException e) {
+                log.warn("unable to delete " + INDEXING_QUEUE_FILE);
-     * @throws FileSystemException if an error occurs while reading.
+     * @throws IOException if an error occurs while reading.
-    private void readStore() throws FileSystemException {
-        if (fs.exists(fileName)) {
+    private void readStore() throws IOException {
+        if (dir.fileExists(INDEXING_QUEUE_FILE)) {
+            InputStream in = new IndexInputStream(dir.openInput(INDEXING_QUEUE_FILE));
+            BufferedReader reader = new BufferedReader(
+                    new InputStreamReader(in, ENCODING));
-                InputStream in = fs.getInputStream(fileName);
-                BufferedReader reader = new BufferedReader(
-                        new InputStreamReader(in, ENCODING));
-                try {
-                    String line;
-                    while ((line = reader.readLine()) != null) {
-                        int idx = line.indexOf(' ');
-                        if (idx == -1) {
-                            // invalid line
-                            log.warn("invalid line in {}: {}", fileName, line);
+                String line;
+                while ((line = reader.readLine()) != null) {
+                    int idx = line.indexOf(' ');
+                    if (idx == -1) {
+                        // invalid line
+                        log.warn("invalid line in {}: {}", INDEXING_QUEUE_FILE, line);
+                    } else {
+                        String cmd = line.substring(0, idx);
+                        String uuid = line.substring(idx + 1, line.length());
+                        if (ADD.equals(cmd)) {
+                            pending.add(uuid);
+                        } else if (REMOVE.equals(cmd)) {
+                            pending.remove(uuid);
-                            String cmd = line.substring(0, idx);
-                            String uuid = line.substring(idx + 1, line.length());
-                            if (ADD.equals(cmd)) {
-                                pending.add(uuid);
-                            } else if (REMOVE.equals(cmd)) {
-                                pending.remove(uuid);
-                            } else {
-                                // invalid line
-                                log.warn("invalid line in {}: {}", fileName, line);
-                            }
+                            // invalid line
+                            log.warn("invalid line in {}: {}", INDEXING_QUEUE_FILE, line);
-                } finally {
-                    in.close();
-            } catch (IOException e) {
-                throw new FileSystemException(e.getMessage(), e);
+            } finally {
+                in.close();

MOV23 UPD40 UPD40 INS83 MOV43 INS43 UPD43 UPD43 MOV8 UPD66 UPD42 INS45 INS42 UPD42 UPD43 UPD42 UPD42 UPD42 INS25 UPD66 UPD66 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD42 INS32 MOV8 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV44 INS14 INS43 INS32 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL66 DEL42 DEL65 DEL42 DEL43 DEL66 DEL42 DEL66 DEL66 DEL65 DEL66 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL43 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL25 DEL8