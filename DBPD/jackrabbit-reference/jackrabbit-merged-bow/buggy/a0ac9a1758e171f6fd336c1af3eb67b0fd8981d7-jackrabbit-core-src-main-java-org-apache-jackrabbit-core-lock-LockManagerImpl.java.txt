JCR-1590: JSR 283: Locking

Added a timeout handler to LockManagerImpl. It runs as a scheduled task (at one second intervals) inside a new repository-wide ScheduledExecutorService instance.

Adjusted the TCK test for this and fixed some jcr2spi assumptions about this (the lock can expire from under the SPI layer).

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@805431 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+     * The periodically invoked lock timeout handler.
+     */
+    private final ScheduledFuture<?> timeoutHandler;
+
+    /**
-     * @param session system session
-     * @param fs      file system for persisting locks
+     * @param session  system session
+     * @param fs       file system for persisting locks
+     * @param executor scheduled executor service for handling lock timeouts
-    public LockManagerImpl(SessionImpl session, FileSystem fs)
-            throws RepositoryException {
+    public LockManagerImpl(
+            SessionImpl session, FileSystem fs,
+            ScheduledExecutorService executor) throws RepositoryException {
+
+        timeoutHandler = executor.scheduleWithFixedDelay(
+                new TimeoutHandler(), 1, 1, TimeUnit.SECONDS);
+        timeoutHandler.cancel(false);
+     * Periodically (at one second delay) invoked timeout handler. Traverses
+     * all locks and unlocks those that have expired.
+     *
+     * @see <a href="https://issues.apache.org/jira/browse/JCR-1590">JCR-1590</a>:
+     *      JSR 283: Locking
+     */
+    private class TimeoutHandler implements Runnable {
+        public void run() {
+            lockMap.traverse(new PathMap.ElementVisitor<LockInfo>() {
+                public void elementVisited(PathMap.Element<LockInfo> element) {
+                    LockInfo info = element.get();
+                    if (info != null && info.isLive() && info.isExpired()) {
+                        NodeId id = info.getId();
+                        SessionImpl holder = info.getLockHolder();
+                        if (holder == null) {
+                            info.setLockHolder(sysSession);
+                            holder = sysSession;
+                        }
+                        try {
+                            // FIXME: This session access is not thread-safe!
+                            unlock(holder.getNodeById(id));
+                        } catch (RepositoryException e) {
+                            log.warn("Unable to expire the lock " + id, e);
+                        }
+                    }
+                }
+            }, false);
+        }
+    }
+
+    /**

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS55 INS29 INS83 INS83 INS74 INS59 INS44 INS29 INS83 INS42 INS43 INS31 INS65 INS43 INS76 INS42 INS65 INS43 INS42 INS21 INS21 INS65 INS65 INS42 INS83 INS39 INS42 INS8 INS66 INS42 UPD66 UPD66 INS42 INS66 INS42 INS7 INS32 INS66 INS66 INS66 INS66 INS21 INS42 INS32 INS42 INS42 INS9 INS32 INS42 INS42 INS14 INS34 INS34 INS40 INS42 INS42 INS14 INS9 INS43 INS74 INS1 INS42 INS43 INS43 INS31 INS40 INS42 INS83 INS39 INS42 INS44 INS8 INS74 INS42 INS60 INS25 INS43 INS43 INS43 INS59 INS27 INS8 INS40 INS42 INS42 INS42 INS32 INS27 INS32 INS60 INS60 INS25 INS54 INS42 INS42 INS27 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS12 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS42