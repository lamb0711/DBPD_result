- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Tobias Strasser
- * @version $Revision: 1.7 $, $Date: 2004/09/14 08:50:07 $
-	return (VersionHistoryImpl) node;
+        return (VersionHistoryImpl) node;
-			      NodeState state, NodeDef definition,
-			      ItemLifeCycleListener[] listeners)
-	    throws RepositoryException {
-	super(itemMgr, session, id, state, definition, listeners);
+                              NodeState state, NodeDef definition,
+                              ItemLifeCycleListener[] listeners)
+            throws RepositoryException {
+        super(itemMgr, session, id, state, definition, listeners);
-	return (Version) getNode(NODENAME_ROOTVERSION);
+        return (Version) getNode(NODENAME_ROOTVERSION);
-	return new VersionIteratorImpl(getRootVersion());
+        return new VersionIteratorImpl(getRootVersion());
-	return (Version) getNode(versionName);
+        return (Version) getNode(versionName);
-	initLabelCache();
-	return labelCache.containsKey(label)
-		? (Version) getNode((String) labelCache.get(label))
-		: null;
+        initLabelCache();
+        return labelCache.containsKey(label)
+                ? (Version) getNode((String) labelCache.get(label))
+                : null;
-	VersionImpl v = (VersionImpl) getVersion(versionName);
-	if (v.isSame(getRootVersion())) {
-	    String msg = "Removal of " + versionName + " not allowed.";
-	    log.error(msg);
-	    throw new VersionException(msg);
-	}
-	// check if any references to this node exist outside the version graph
-	// todo: check this
+        VersionImpl v = (VersionImpl) getVersion(versionName);
+        if (v.isSame(getRootVersion())) {
+            String msg = "Removal of " + versionName + " not allowed.";
+            log.error(msg);
+            throw new VersionException(msg);
+        }
+        // check if any references to this node exist outside the version graph
+        // todo: check this
-	// detach from the version graph
-	v.internalDetach();
+        // detach from the version graph
+        v.internalDetach();
-	// and remove from history
-	remove(versionName);
-	save();
+        // and remove from history
+        remove(versionName);
+        save();
-	if (labelCache != null) {
-	    return;
-	}
-	labelCache = new HashMap();
-	NodeIterator iter = getNodes();
-	while (iter.hasNext()) {
-	    // assuming all subnodes are 'versions'
-	    Version v = (Version) iter.nextNode();
-	    String[] labels = v.getVersionLabels();
-	    for (int i = 0; i < labels.length; i++) {
-		if (labelCache.containsKey(labels[i])) {
-		    log.error("Label " + labels[i] + " duplicate: in " + v.getName() + " and in " + labelCache.get(labels[i]));
-		} else {
-		    labelCache.put(labels[i], v.getName());
-		}
-	    }
-	}
+        if (labelCache != null) {
+            return;
+        }
+        labelCache = new HashMap();
+        NodeIterator iter = getNodes();
+        while (iter.hasNext()) {
+            // assuming all subnodes are 'versions'
+            Version v = (Version) iter.nextNode();
+            String[] labels = v.getVersionLabels();
+            for (int i = 0; i < labels.length; i++) {
+                if (labelCache.containsKey(labels[i])) {
+                    log.error("Label " + labels[i] + " duplicate: in " + v.getName() + " and in " + labelCache.get(labels[i]));
+                } else {
+                    labelCache.put(labels[i], v.getName());
+                }
+            }
+        }
+     *
-	initLabelCache();
-	String vname = (String) labelCache.get(label);
-	if (vname == null) {
-	    // if not exists, add
-	    labelCache.put(label, version.getName());
-	    ((VersionImpl) version).internalAddVersionLabel(label);
-	} else if (vname.equals(version.getName())) {
-	    // if already defined to this version, ignore
-	} else {
-	    // already defined eslwhere, throw
-	    throw new RepositoryException("Version label " + label + " already defined for version " + vname);
-	}
+        initLabelCache();
+        String vname = (String) labelCache.get(label);
+        if (vname == null) {
+            // if not exists, add
+            labelCache.put(label, version.getName());
+            ((VersionImpl) version).internalAddVersionLabel(label);
+        } else if (vname.equals(version.getName())) {
+            // if already defined to this version, ignore
+        } else {
+            // already defined eslwhere, throw
+            throw new RepositoryException("Version label " + label + " already defined for version " + vname);
+        }
-	initLabelCache();
-	String name = (String) labelCache.remove(label);
-	if (name == null) {
-	    throw new RepositoryException("Version label " + label + " is not in version history.");
-	}
-	((VersionImpl) getVersion(name)).internalRemoveVersionLabel(label);
+        initLabelCache();
+        String name = (String) labelCache.remove(label);
+        if (name == null) {
+            throw new RepositoryException("Version label " + label + " is not in version history.");
+        }
+        ((VersionImpl) getVersion(name)).internalRemoveVersionLabel(label);

MOV26 DEL66 DEL65 DEL66 DEL65