JCR-1538: [patch] add toString for NodeImpl and PropertyImpl

Type-specific toString() on all ItemImpl descendants

Use the toString() method instead of safeGetPath() in diagnostics.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@698402 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Property;
+import javax.jcr.nodetype.ItemDefinition;
-import javax.jcr.nodetype.PropertyDefinition;
-                String msg;
-                        msg = transientState.getId()
-                            + ": the item cannot be saved because it has been modified externally.";
-                        log.debug(msg);
-                        throw new InvalidItemStateException(msg);
+                        throw new InvalidItemStateException(
+                                "Item cannot be saved because it has been"
+                                + "modified externally: " + this);
-                        msg = transientState.getId()
-                            + ": the item cannot be saved because it has been deleted externally.";
-                        log.debug(msg);
-                        throw new InvalidItemStateException(msg);
+                        throw new InvalidItemStateException(
+                                "Item cannot be saved because it has been"
+                                + "deleted externally: " + this);
-                        msg = safeGetJCRPath()
-                            + ": the item cannot be saved; it seems to have been removed externally.";
-                        log.debug(msg);
-                        throw new InvalidItemStateException(msg);
+                        throw new InvalidItemStateException(
+                                "Item cannot be saved; it seems to have been"
+                                + "removed externally: " + this);
-                        log.debug("unexpected state status (" + transientState.getStatus() + ")");
+                        log.warn("Unexpected item state status: "
+                                + transientState.getStatus() + " of " + this);
-                    msg = safeGetJCRPath() + ": cannot save a new item.";
-                    log.debug(msg);
-                    throw new RepositoryException(msg);
+                    throw new RepositoryException(
+                            "Cannot save a new item: " + this);
-                    msg = safeGetJCRPath()
-                        + ": the item cannot be saved because it has been modified externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
+                    throw new InvalidItemStateException(
+                            "Item cannot be saved because it has been"
+                            + " modified externally: " + this);
-                    msg = safeGetJCRPath()
-                        + ": the item cannot be saved because it has been deleted externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
+                    throw new InvalidItemStateException(
+                            "Item cannot be saved because it has been"
+                            + " deleted externally:" + this);
-                    msg = safeGetJCRPath()
-                        + ": the item cannot be saved; it seems to have been removed externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
+                    throw new InvalidItemStateException(
+                            "Item cannot be saved; it seems to have been"
+                            + " removed externally: " + this);
-                    log.debug("unexpected state status (" + state.getStatus() + ")");
+                    log.warn("Unexpected item state status:"
+                            + state.getStatus() + " of " + this);
-        Path.Element thisName = getPrimaryPath().getNameElement();
-
-        // check if protected
-        if (isNode()) {
-            NodeImpl node = (NodeImpl) this;
-            // check if this is the root node
-            if (node.getDepth() == 0) {
-                String msg = safeGetJCRPath() + ": cannot remove root node";
-                log.debug(msg);
-                throw new RepositoryException(msg);
-            }
-
-            NodeDefinition def = node.getDefinition();
-            // check protected flag
-            if (!noChecks && def.isProtected()) {
-                String msg = safeGetJCRPath() + ": cannot remove a protected node";
-                log.debug(msg);
-                throw new ConstraintViolationException(msg);
-            }
-        } else {
-            PropertyImpl prop = (PropertyImpl) this;
-            PropertyDefinition def = prop.getDefinition();
-            // check protected flag
-            if (!noChecks && def.isProtected()) {
-                String msg = safeGetJCRPath() + ": cannot remove a protected property";
-                log.debug(msg);
-                throw new ConstraintViolationException(msg);
-            }
+        // check if this is the root node
+        if (getDepth() == 0) {
+            throw new RepositoryException("Cannot remove the root node");
-        // verify that parent node is checked-out
-        if (!noChecks && !parentNode.internalIsCheckedOut()) {
-            String msg = parentNode.safeGetJCRPath() + ": cannot remove a child of a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag of parent node
-        if (!noChecks && parentNode.getDefinition().isProtected()) {
-            String msg = parentNode.safeGetJCRPath() + ": cannot remove a child of a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check lock status
+            // check if protected
+            ItemDefinition definition;
+            if (isNode()) {
+                definition = ((Node) this).getDefinition();
+            } else {
+                definition = ((Property) this).getDefinition();
+            }
+            if (definition.isProtected()) {
+                throw new ConstraintViolationException(
+                        "Cannot remove a protected item: " + this);
+            }
+
+            // verify that parent node is checked-out and not protected
+            if (!parentNode.internalIsCheckedOut()) {
+                throw new VersionException(
+                        "Cannot remove a child of a checked-in node: " + this);
+            }
+            if (parentNode.getDefinition().isProtected()) {
+                throw new ConstraintViolationException(
+                        "Cannot remove a child of a protected node: " + this);
+            }
+
+            // check lock status
+        Path.Element thisName = getPrimaryPath().getNameElement();
-                String msg = safeGetJCRPath() + ": unable to update item.";
-                log.debug(msg);
-                throw new RepositoryException(msg, e);
+                throw new RepositoryException(
+                        "Unable to update item: " + this, e);
-                    String msg = safeGetJCRPath() + ": cannot refresh a new item.";
-                    log.debug(msg);
-                    throw new RepositoryException(msg);
+                    throw new RepositoryException(
+                            "Cannot refresh a new item: " + this);
-                    log.debug("unexpected state status (" + transientState.getStatus() + ")");
+                    log.warn("Unexpected item state status:"
+                            + transientState.getStatus() + " of " + this);
-     * Returns a string with the type and ({@link #safeGetJCRPath() safe}) path
-     * of this item for use in diagnostic output.
+     * Returns the({@link #safeGetJCRPath() safe}) path of this item for use
+     * in diagnostic output.
-     * @return item path
+     * @return "/path/to/item"
-        if (isNode()) {
-            return "node " + safeGetJCRPath();
-        } else {
-            return "property " + safeGetJCRPath();
-        }
+        return safeGetJCRPath();

MOV26 INS26 INS40 UPD40 MOV60 INS8 MOV25 INS25 MOV41 MOV38 INS8 UPD66 UPD66 UPD66 UPD66 MOV32 MOV60 INS25 MOV25 MOV25 MOV25 MOV21 INS53 INS53 INS53 UPD43 MOV32 MOV8 INS8 INS32 MOV38 MOV32 INS53 INS14 INS14 INS14 INS45 UPD42 INS42 INS21 INS21 UPD42 MOV42 MOV42 MOV53 INS14 INS53 INS53 INS53 INS27 MOV43 INS27 MOV43 INS27 MOV43 INS27 UPD42 INS7 INS7 INS53 MOV43 INS27 UPD42 INS14 INS14 INS14 INS45 INS52 UPD45 MOV45 INS45 INS52 UPD45 MOV45 INS45 INS52 UPD45 MOV45 INS45 INS52 UPD45 UPD45 INS52 INS42 INS32 INS42 INS32 INS27 INS27 INS27 INS14 UPD45 MOV45 INS52 UPD45 UPD45 INS52 MOV43 INS27 MOV43 INS27 MOV43 INS27 UPD42 INS36 UPD42 MOV42 INS36 MOV42 INS45 INS52 INS45 INS52 INS45 INS52 MOV43 INS27 MOV42 UPD45 MOV45 INS45 INS52 UPD45 MOV45 INS45 INS52 UPD45 MOV45 INS45 INS52 UPD45 UPD45 INS52 INS11 INS11 UPD45 MOV45 INS52 INS43 INS52 UPD43 MOV43 MOV52 INS42 UPD42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL42 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL42 DEL42 DEL32 DEL45 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL52 DEL11 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL32 DEL27 DEL25 DEL8 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL38 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL42 DEL38 DEL8 DEL25 DEL43 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL42 DEL43 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL45 DEL42 DEL32 DEL27 DEL42 DEL32 DEL8 DEL45 DEL42 DEL32 DEL27 DEL41 DEL8 DEL25 DEL8