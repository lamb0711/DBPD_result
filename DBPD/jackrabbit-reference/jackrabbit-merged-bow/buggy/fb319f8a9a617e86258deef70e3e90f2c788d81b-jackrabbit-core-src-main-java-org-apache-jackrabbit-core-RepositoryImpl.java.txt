JCR-2640: Internal repository context

Commit the first draft patch, more updates to come...

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@948757 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.NamespaceRegistry;
-    private NodeId rootNodeId;
+    protected final RepositoryContext context = new RepositoryContext(this);
-    private final NamespaceRegistryImpl nsReg;
-    private final NodeTypeRegistry ntReg;
-    private final InternalVersionManagerImpl vMgr;
-            rootNodeId = loadRootNodeId(metaDataStore);
+            context.setRootNodeId(loadRootNodeId(metaDataStore));
-            nsReg = createNamespaceRegistry(new BasedFileSystem(repStore, "/namespaces"));
-            ntReg = createNodeTypeRegistry(nsReg, new BasedFileSystem(repStore, "/nodetypes"));
+            context.setNamespaceRegistry(createNamespaceRegistry(
+                    new BasedFileSystem(repStore, "/namespaces")));
+            context.setNodeTypeRegistry(createNodeTypeRegistry(
+                    new BasedFileSystem(repStore, "/nodetypes")));
-                nsReg.setEventChannel(clusterNode);
-                ntReg.setEventChannel(clusterNode);
+                context.getNamespaceRegistry().setEventChannel(clusterNode);
+                context.getNodeTypeRegistry().setEventChannel(clusterNode);
-            vMgr = createVersionManager(repConfig.getVersioningConfig(),
-                    delegatingDispatcher);
+            InternalVersionManagerImpl vMgr = createVersionManager(
+                    repConfig.getVersioningConfig(), delegatingDispatcher);
+            context.setInternalVersionManager(vMgr);
-            virtNTMgr = new VirtualNodeTypeStateManager(getNodeTypeRegistry(),
+            virtNTMgr = new VirtualNodeTypeStateManager(
+                    context.getNodeTypeRegistry(),
-        PersistenceManager pm = createPersistenceManager(vConfig.getHomeDir(),
-                fs,
-                vConfig.getPersistenceManagerConfig(),
-                rootNodeId,
-                nsReg,
-                ntReg,
-                dataStore);
+        PersistenceManager pm = createPersistenceManager(
+                vConfig.getHomeDir(), fs,
+                vConfig.getPersistenceManagerConfig(), dataStore);
-        return new InternalVersionManagerImpl(pm, fs, ntReg, delegatingDispatcher,
+        return new InternalVersionManagerImpl(
+                pm, fs, context.getNodeTypeRegistry(), delegatingDispatcher,
-    protected NodeTypeRegistry createNodeTypeRegistry(NamespaceRegistry nsReg,
-                                                      FileSystem fs)
+    protected NodeTypeRegistry createNodeTypeRegistry(FileSystem fs)
-        return NodeTypeRegistry.create(nsReg, fs);
+        return NodeTypeRegistry.create(context.getNamespaceRegistry(), fs);
-                        repConfig, nsReg, ntReg,
+                        repConfig,
+                        context.getNamespaceRegistry(),
+                        context.getNodeTypeRegistry(),
-                        vMgr.getPersistenceManager(), SYSTEM_ROOT_NODE_ID,
+                        context.getInternalVersionManager().getPersistenceManager(),
+                        SYSTEM_ROOT_NODE_ID,
-    protected NamespaceRegistryImpl getNamespaceRegistry() {
-        return nsReg;
-    }
-
-    protected NodeTypeRegistry getNodeTypeRegistry() {
-        return ntReg;
-    }
-
-    protected InternalVersionManager getVersionManager() {
-        return vMgr;
-    }
-
-    protected NodeId getRootNodeId() {
-        return rootNodeId;
-    }
-
-        if (vMgr != null) {
-            try {
-                vMgr.close();
-            } catch (Exception e) {
-                log.error("Error while closing Version Manager.", e);
-            }
+        try {
+            context.getInternalVersionManager().close();
+        } catch (Exception e) {
+            log.error("Error while closing Version Manager.", e);
-    InternalVersionManagerImpl getVersionManagerImpl() {
-        return vMgr;
-    }
-
-    private static PersistenceManager createPersistenceManager(File homeDir,
-                                                               FileSystem fs,
-                                                               PersistenceManagerConfig pmConfig,
-                                                               NodeId rootNodeId,
-                                                               NamespaceRegistry nsReg,
-                                                               NodeTypeRegistry ntReg,
-                                                               DataStore dataStore)
-            throws RepositoryException {
+    private PersistenceManager createPersistenceManager(
+            File homeDir, FileSystem fs, PersistenceManagerConfig pmConfig,
+            DataStore dataStore) throws RepositoryException {
-            pm.init(new PMContext(homeDir, fs, rootNodeId, nsReg, ntReg, dataStore));
+            pm.init(new PMContext(
+                    homeDir, fs,
+                    context.getRootNodeId(),
+                    context.getNamespaceRegistry(),
+                    context.getNodeTypeRegistry(),
+                    dataStore));
-     * @param rootNodeId     root node id
-     * @param ntReg          node type registry
-    protected SharedItemStateManager createItemStateManager(PersistenceManager persistMgr,
-                                                            NodeId rootNodeId,
-                                                            NodeTypeRegistry ntReg,
-                                                            boolean usesReferences,
-                                                            ItemStateCacheFactory cacheFactory,
-                                                            ISMLocking locking)
+    protected SharedItemStateManager createItemStateManager(
+            PersistenceManager persistMgr, boolean usesReferences,
+            ItemStateCacheFactory cacheFactory, ISMLocking locking)
-
-        return new SharedItemStateManager(persistMgr, rootNodeId, ntReg, true, cacheFactory, locking);
+        return new SharedItemStateManager(
+                persistMgr,
+                context.getRootNodeId(),
+                context.getNodeTypeRegistry(),
+                true, cacheFactory, locking);
-
-        return new XASessionImpl(this, loginContext, wspConfig);
+        return new XASessionImpl(context, loginContext, wspConfig);
-
-        return new XASessionImpl(this, subject, wspConfig);
+        return new XASessionImpl(context, subject, wspConfig);
-                    searchMgr = new SearchManager(config,
-                            nsReg, ntReg, itemStateMgr, persistMgr, rootNodeId,
+                    searchMgr = new SearchManager(
+                            config,
+                            context.getNamespaceRegistry(),
+                            context.getNodeTypeRegistry(),
+                            itemStateMgr, persistMgr,
+                            context.getRootNodeId(),
-                    systemSession =
-                            SystemSession.create(RepositoryImpl.this, config);
+                    systemSession = SystemSession.create(context, config);
-            persistMgr = createPersistenceManager(new File(config.getHomeDir()),
+            persistMgr = createPersistenceManager(
+                    new File(config.getHomeDir()),
-                    rootNodeId,
-                    nsReg,
-                    ntReg,
-                RepositoryChecker checker =
-                    new RepositoryChecker(persistMgr, vMgr);
+                RepositoryChecker checker = new RepositoryChecker(
+                        persistMgr, context.getInternalVersionManager());
-                itemStateMgr = createItemStateManager(persistMgr, rootNodeId,
-                        ntReg, true, cacheFactory, ismLocking);
+                itemStateMgr = createItemStateManager(
+                        persistMgr, true, cacheFactory, ismLocking);
-                            vMgr.getVirtualItemStateProvider());
+                            context.getInternalVersionManager().getVirtualItemStateProvider());
-            return new RegistryNamespaceResolver(getNamespaceRegistry());
+            return new RegistryNamespaceResolver(context.getNamespaceRegistry());

INS23 UPD83 MOV83 MOV83 UPD43 MOV43 INS59 UPD42 INS42 INS14 MOV54 INS43 INS52 UPD42 MOV42 INS60 INS32 INS32 INS32 INS32 MOV43 INS42 MOV43 INS42 INS32 INS32 INS32 MOV43 INS59 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 MOV43 INS42 INS42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL7 DEL42 DEL7 DEL42 DEL42 DEL7 DEL42 DEL7 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL52 DEL52 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42