work in progress

- replace ItemImpl by Item in ItemManager interface and adjust
  usages.
- change all setters on ItemState and derived classes from public to
  package private
- NodeState: use collection return value instead of set/list whereever possible
- WorkspaceManager: put ItemStateFactory to a separate class and
  remove unused inner class NodeReferenceImpl 
- add methods to NodeState/PropertyState that avoids return a null
  QItemDefinition and remove corresponding methods from NodeTypeManagerImpl
- remove ItemDefinitionManager.
- VersionHistoryImpl: add safety check if cne for root version really exists
- Fix ImporterImpl: ItemState.getDefinition() may return 'null' value.
  use method instead, that sets the definition if it is still missing.
- javadoc and code formatting


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430031 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QNodeDefinition;
+import org.apache.jackrabbit.spi.QPropertyDefinition;
+import org.apache.commons.collections.map.ReferenceMap;
+import javax.jcr.Item;
+import java.util.Map;
+    // TODO: TO-BE-FIXED. With SPI_ItemId simple map cannot be used any more
-    // TODO: TO-BE-FIXED. Usage of SPI-Id required refactoring of the cache
-    private IdKeyMap itemCache;
+    private Map itemCache;
-        itemCache = new DefaultIdKeyMap(); // TODO, JR: new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK);
+        itemCache = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK);
-     * @inheritDoc
+     * @see ItemManager#dispose()
-     * @inheritDoc
+     * @see ItemManager#itemExists(Path)
-     * @inheritDoc
+     * @see ItemManager#itemExists(ItemState)
-     * @inheritDoc
+     * @see ItemManager#getItem(Path)
-    public synchronized ItemImpl getItem(Path path)
+    public synchronized Item getItem(Path path)
-     * @inheritDoc
+     * @see ItemManager#getItem(ItemState)
-    public ItemImpl getItem(ItemState itemState) throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+    public Item getItem(ItemState itemState) throws ItemNotFoundException, AccessDeniedException, RepositoryException {
-     * @inheritDoc
+     * @see ItemManager#hasChildNodes(NodeState)
-     * @inheritDoc
+     * @see ItemManager#getChildNodes(NodeState)
-     * @inheritDoc
+     * @see ItemManager#hasChildProperties(NodeState)
-     * @inheritDoc
+     * @see ItemManager#getChildProperties(NodeState)
-     * {@inheritDoc}
+     * @see ItemLifeCycleListener#itemCreated(ItemImpl)
-    public void itemCreated(ItemId id, ItemImpl item) {
+    public void itemCreated(ItemImpl item) {
-            log.debug("created item " + id);
+            log.debug("created item " + item);
-     * {@inheritDoc}
+     * @see ItemLifeCycleListener#itemInvalidated(ItemImpl)
-    public void itemInvalidated(ItemId id, ItemImpl item) {
+    public void itemInvalidated(ItemImpl item) {
-            log.debug("invalidated item " + id);
+            log.debug("invalidated item " + item);
-        evictItem(id);
+        evictItem(item.getId());
-     * {@inheritDoc}
+     * @see ItemLifeCycleListener#itemDestroyed(ItemImpl)
-    public void itemDestroyed(ItemId id, ItemImpl item) {
+    public void itemDestroyed(ItemImpl item) {
-            log.debug("destroyed item " + id);
+            log.debug("destroyed item " + item);
-        evictItem(id);
+        evictItem(item.getId());
-     * {@inheritDoc}
+     * @see Dumpable#dump(PrintStream)
+    /**
+     *
+     * @param state
+     * @param removeFromCache
+     * @throws RepositoryException
+     */
-    private NodeImpl createNodeInstance(NodeState state, NodeDefinition def)
-            throws RepositoryException {
+    private NodeImpl createNodeInstance(NodeState state) throws RepositoryException {
+        // 1. get definition of the specified node
+        QNodeDefinition qnd = state.getDefinition(session.getNodeTypeRegistry());
+        NodeDefinition def = session.getNodeTypeManager().getNodeDefinition(qnd);
+
+        // 2. create instance
-
-    private NodeImpl createNodeInstance(NodeState state) throws RepositoryException {
-        // 1. get definition of the specified node
-        NodeState parentState = state.getParent();
-        NodeDefinition def = session.getItemDefinitionManager().getNodeDefinition(state, parentState);
+    private PropertyImpl createPropertyInstance(PropertyState state)
+            throws RepositoryException {
+        // 1. get definition for the specified property
+        QPropertyDefinition qpd = state.getDefinition(session.getNodeTypeRegistry());
+        PropertyDefinition def = session.getNodeTypeManager().getPropertyDefinition(qpd);
+
-        return createNodeInstance(state, def);
-    }
-
-    private PropertyImpl createPropertyInstance(PropertyState state,
-                                                PropertyDefinition def) {
-        // we want to be informed on life cycle changes of the new property object
+                // we want to be informed on life cycle changes of the new property object
-    private PropertyImpl createPropertyInstance(PropertyState state)
-            throws RepositoryException {
-        // 1. get definition for the specified property
-        NodeState parentState = state.getParent();
-        PropertyDefinition def = session.getItemDefinitionManager().getPropertyDefinition(state, parentState);
-
-        // 2. create instance
-        return createPropertyInstance(state, def);
-    }
-
-    //---------------------------------------------------< item cache methods >
+    //-------------------------------------------------< item cache methods >---

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD43 INS43 INS43 INS29 MOV43 UPD42 UPD65 UPD65 UPD65 UPD65 INS42 UPD65 INS42 UPD65 UPD65 UPD65 UPD65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS60 INS60 UPD42 MOV42 INS60 INS60 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 MOV32 INS68 INS68 MOV32 INS68 INS42 INS42 INS42 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS32 INS42 INS42 INS69 INS32 INS42 INS42 INS69 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 UPD43 INS40 INS40 INS43 INS43 INS43 INS43 INS43 INS43 MOV43 MOV43 MOV43 MOV43 UPD42 MOV42 INS42 INS43 UPD42 MOV42 INS42 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 DEL65 DEL65 DEL42 DEL43 DEL42 DEL44 DEL65 DEL65 DEL42 DEL43 DEL42 DEL44 DEL65 DEL65 DEL42 DEL43 DEL42 DEL44 DEL65 DEL65 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31