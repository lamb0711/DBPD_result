- Remove immediate event request after operation executed. Executing operations is not tied to observation anymore, even when CacheBehaviour = Observation.
- Event polling in spi2dav now implements timeout (blocking until event or timeout occurs)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@509151 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.EventIterator;
+import org.apache.jackrabbit.spi.Event;
-import EDU.oswego.cs.dl.util.concurrent.Channel;
-import EDU.oswego.cs.dl.util.concurrent.Latch;
-import EDU.oswego.cs.dl.util.concurrent.LinkedQueue;
+import EDU.oswego.cs.dl.util.concurrent.Mutex;
-     * Monitor object to synchronize the feed thread with client
+     * Mutex to synchronize the feed thread with client
-    private final Object updateMonitor = new Object();
-
-    /**
-     * A producer for this channel can request an immediate poll for events
-     * by placing a Sync into the channel. The Sync is released when the event
-     * poll finished.
-     */
-    private final Channel immediateEventRequests = new LinkedQueue();
+    private final Sync updateSync = new Mutex();
-                            CacheBehaviour cacheBehaviour, int pollingInterval)
+                            CacheBehaviour cacheBehaviour, int pollTimeout)
-        changeFeed = createChangeFeed(pollingInterval);
+        changeFeed = createChangeFeed(pollTimeout);
-     * @param pollingInterval the polling interval in milliseconds.
+     * @param pollTimeout the polling timeout in milliseconds.
-    private Thread createChangeFeed(int pollingInterval) {
+    private Thread createChangeFeed(int pollTimeout) {
-                t = new Thread(new ChangePolling(pollingInterval));
+                t = new Thread(new ChangePolling(pollTimeout));
-        if (cacheBehaviour == CacheBehaviour.OBSERVATION) {
-            Sync eventSignal;
-            synchronized (updateMonitor) {
-                new OperationVisitorImpl(sessionInfo).execute(operation);
-                eventSignal = getEventPollingRequest();
-            }
-            try {
-                eventSignal.acquire();
-            } catch (InterruptedException e) {
-                Thread.interrupted();
-                log.warn("Interrupted while waiting for events from RepositoryService");
-            }
-        } else {
+        // block event delivery while changes are executed
+        try {
+            updateSync.acquire();
+        } catch (InterruptedException e) {
+            throw new RepositoryException(e);
+        }
+        try {
-            operation.persisted(cacheBehaviour);
+            // TODO: remove parameter CacheBehaviour
+            operation.persisted(CacheBehaviour.INVALIDATE);
+        } finally {
+            updateSync.release();
-        if (cacheBehaviour == CacheBehaviour.OBSERVATION) {
-            // TODO: TOBEFIXED. processing events after changelog may lead to consistency problems (duplicate processing) (e.g. removal of SNSs).
-            // TODO: filtering of events required according to information present in the changelog.
-            Sync eventSignal;
-            synchronized (updateMonitor) {
-                new OperationVisitorImpl(sessionInfo).execute(changes);
-                changes.persisted(cacheBehaviour);
-                eventSignal = getEventPollingRequest();
-            }
-            try {
-                // wait at most 10 seconds
-                if (!eventSignal.attempt(10 * 1000)) {
-                    log.warn("No events received for batch");
-                }
-            } catch (InterruptedException e) {
-                Thread.interrupted();
-                log.warn("Interrupted while waiting for events from RepositoryService");
-            }
-        } else {
+        // block event delivery while changes are executed
+        try {
+            updateSync.acquire();
+        } catch (InterruptedException e) {
+            throw new RepositoryException(e);
+        }
+        try {
-            changes.persisted(cacheBehaviour);
+            // TODO: remove parameter CacheBehaviour
+            changes.persisted(CacheBehaviour.INVALIDATE);
+        } finally {
+            updateSync.release();
-            try {
-                changeFeed.join();
-            } catch (InterruptedException e) {
-                log.warn("Interrupted while waiting for external change thread to terminate.");
-            }
-        // notify listener
-        InternalEventListener[] lstnrs = (InternalEventListener[]) listeners.toArray(new InternalEventListener[listeners.size()]);
-        for (int i = 0; i < eventBundles.length; i++) {
-            for (int j = 0; j < lstnrs.length; j++) {
-                lstnrs[j].onEvent(eventBundles[i]);
+        if (log.isDebugEnabled()) {
+            log.debug("received {} event bundles.", new Integer(eventBundles.length));
+            for (int i = 0; i < eventBundles.length; i++) {
+                log.debug("BundleId: {}", eventBundles[i].getBundleId());
+                log.debug("IsLocal:  {}", new Boolean(eventBundles[i].isLocal()));
+                for (EventIterator it = eventBundles[i].getEvents(); it.hasNext(); ) {
+                    Event e = it.nextEvent();
+                    String type;
+                    switch (e.getType()) {
+                        case Event.NODE_ADDED:
+                            type = "NodeAdded";
+                            break;
+                        case Event.NODE_REMOVED:
+                            type = "NodeRemoved";
+                            break;
+                        case Event.PROPERTY_ADDED:
+                            type = "PropertyAdded";
+                            break;
+                        case Event.PROPERTY_CHANGED:
+                            type = "PropertyChanged";
+                            break;
+                        case Event.PROPERTY_REMOVED:
+                            type = "PropertyRemoved";
+                            break;
+                        default:
+                            type = "Unknown";
+                    }
+                    log.debug("  {}; {}", e.getQPath(), type);
+                }
+        // do not deliver events while an operation executes
+        try {
+            updateSync.acquire();
+        } catch (InterruptedException e) {
+            log.warn("Unable to acquire update mutext");
+            return;
+        }
+        try {
+            // notify listener
+            InternalEventListener[] lstnrs = (InternalEventListener[]) listeners.toArray(new InternalEventListener[listeners.size()]);
+            for (int i = 0; i < eventBundles.length; i++) {
+                for (int j = 0; j < lstnrs.length; j++) {
+                    lstnrs[j].onEvent(eventBundles[i]);
+                }
+            }
+        } finally {
+            updateSync.release();
+        }
-     * Requests an immediate poll for events. The returned Sync will be
-     * released by the event polling thread when events have been retrieved.
-     */
-    private Sync getEventPollingRequest() {
-        Sync signal;
-        if (changeFeed != null) {
-            // observation supported
-            signal = new Latch();
-            try {
-                immediateEventRequests.put(signal);
-            } catch (InterruptedException e) {
-                log.warn("Unable to request immediate event poll: " + e);
-            }
-        } else {
-            // no observation, return a dummy sync which can be acquired immediately
-            signal = new Sync() {
-                public void acquire() {
-                }
-                public boolean attempt(long l) {
-                    return true;
-                }
-                public void release() {
-                    throw new UnsupportedOperationException();
-                }
-            };
-        }
-        return signal;
-    }
-
-    /**
-         * The polling interval in milliseconds.
+         * The polling timeout in milliseconds.
-        private final int pollingInterval;
+        private final int pollTimeout;
-         * Creates a new change polling with a given polling interval.
+         * Creates a new change polling with a given polling timeout.
-         * @param pollingInterval the interval in milliseconds.
+         * @param pollTimeout the timeout in milliseconds.
-        private ChangePolling(int pollingInterval) {
-            this.pollingInterval = pollingInterval;
+        private ChangePolling(int pollTimeout) {
+            this.pollTimeout = pollTimeout;
-                    // wait for a signal to do an immediate poll but wait at
-                    // most EXTERNAL_EVENT_POLLING_INTERVAL
-                    Sync signal = (Sync) immediateEventRequests.poll(pollingInterval);
+                    // get filters from listeners
+                    List filters = new ArrayList();
+                    InternalEventListener[] iel = (InternalEventListener[]) listeners.toArray(new InternalEventListener[0]);
+                    for (int i = 0; i < iel.length; i++) {
+                        filters.addAll(iel[i].getEventFilters());
+                    }
+                    EventFilter[] filtArr = (EventFilter[]) filters.toArray(new EventFilter[filters.size()]);
-                    synchronized (updateMonitor) {
-                        // if this thread was waiting for updateMonitor and now
-                        // enters this synchronized block, then a user thread
-                        // has just finished an operation and will probably
-                        // request an immediate event poll. That's why we
-                        // check here again for a sync signal
-                        if (signal == null) {
-                            signal = (Sync) immediateEventRequests.poll(0);
-                        }
-
-                        if (signal != null) {
-                            log.debug("Request for immediate event poll");
-                        }
-
-                        long timeout = 0;
-                        // get filters from listeners
-                        List filters = new ArrayList();
-                        InternalEventListener[] iel = (InternalEventListener[]) listeners.toArray(new InternalEventListener[0]);
-                        for (int i = 0; i < iel.length; i++) {
-                            filters.addAll(iel[i].getEventFilters());
-                        }
-                        EventFilter[] filtArr = (EventFilter[]) filters.toArray(new EventFilter[filters.size()]);
-
-                        EventBundle[] bundles = service.getEvents(sessionInfo, timeout, filtArr);
-                        try {
-                            if (bundles.length > 0) {
-                                onEventReceived(bundles);
-                            }
-                        } finally {
-                            if (signal != null) {
-                                log.debug("About to signal that events have been delivered");
-                                signal.release();
-                                log.debug("Event delivery signaled");
-                            }
-                        }
+                    log.debug("calling getEvents() (Workspace={})",
+                            sessionInfo.getWorkspaceName());
+                    EventBundle[] bundles = service.getEvents(sessionInfo, pollTimeout, filtArr);
+                    log.debug("returned from getEvents() (Workspace={})",
+                            sessionInfo.getWorkspaceName());
+                    // check if thread had been interrupted while
+                    // getting events
+                    if (Thread.interrupted()) {
+                        log.debug("Thread interrupted, terminating...");
+                        break;
+                    }
+                    if (bundles.length > 0) {
+                        onEventReceived(bundles);
-                    log.warn("Exception while retrieving event bundles: " + e);
+                    log.info("Workspace=" + sessionInfo.getWorkspaceName() +
+                            ": Exception while retrieving event bundles: " + e);

MOV26 MOV26 UPD40 UPD40 UPD40 INS31 UPD43 MOV29 MOV83 MOV39 MOV42 MOV44 MOV43 MOV8 INS8 MOV42 UPD42 UPD42 UPD42 MOV54 INS54 MOV54 INS54 INS25 INS54 INS54 MOV8 UPD66 UPD43 UPD42 UPD66 MOV8 INS8 MOV8 INS8 INS8 INS32 INS8 INS8 INS12 MOV8 INS8 UPD42 UPD42 INS61 UPD42 MOV44 MOV21 MOV44 INS8 MOV21 MOV21 INS42 INS42 INS21 INS24 INS21 MOV44 INS8 INS21 UPD66 UPD66 UPD42 UPD66 MOV38 MOV8 UPD42 INS53 INS32 INS53 INS32 INS32 INS58 INS27 INS37 INS8 INS32 INS21 INS41 INS32 UPD42 INS54 UPD42 INS14 INS42 UPD42 MOV42 INS40 INS42 UPD42 UPD42 UPD42 INS14 INS40 INS42 INS42 INS42 INS42 INS45 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS24 INS42 INS42 INS32 INS42 INS42 UPD42 MOV8 MOV12 INS12 MOV12 MOV12 INS43 INS42 INS43 INS42 INS43 INS40 INS42 INS34 INS32 INS32 INS58 INS32 INS8 INS42 INS42 INS45 MOV21 INS21 INS25 MOV25 MOV44 INS8 INS42 UPD42 MOV42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS14 INS43 INS59 INS42 INS42 INS60 INS60 INS50 INS21 INS32 MOV32 INS8 INS21 MOV21 INS2 INS42 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS32 UPD45 INS32 MOV42 MOV42 UPD45 MOV45 INS32 MOV21 INS10 UPD42 MOV42 INS32 UPD42 INS42 INS42 INS42 INS2 INS42 INS2 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS7 INS7 INS42 INS42 INS45 INS32 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 UPD45 INS45 INS32 INS45 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL7 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL51 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL1 DEL14 DEL7 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL8 DEL25 DEL42 DEL41 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL51 DEL42 DEL42 DEL34 DEL34 DEL27 DEL32 DEL38 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL34 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL8 DEL42 DEL33 DEL27 DEL32 DEL21 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL43 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL51 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL61 DEL8