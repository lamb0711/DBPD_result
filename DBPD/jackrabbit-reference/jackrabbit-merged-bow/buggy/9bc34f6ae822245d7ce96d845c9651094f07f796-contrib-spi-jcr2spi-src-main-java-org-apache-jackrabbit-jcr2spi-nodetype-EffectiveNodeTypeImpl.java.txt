- new interface EffectiveNodeTypeProvider
- new interface ItemDefinitionProvider
- limit access to NodeTypeRegistry and simplify the NodeTypeRegistry
  interface.
- avoid duplicate code dealing with logic of EffectiveNodeType
  and retrieval of QItemDefinitions.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@520408 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.PropertyType;
-import java.util.Collections;
-    static EffectiveNodeTypeImpl create(NodeTypeRegistry ntReg, QNodeTypeDefinition ntd, Map ntdMap)
+    static EffectiveNodeTypeImpl create(EffectiveNodeTypeProvider entProvider, QNodeTypeDefinition ntd, Map ntdMap)
-            EffectiveNodeTypeImpl effSuperType = (EffectiveNodeTypeImpl)ntReg.getEffectiveNodeType(supertypes, ntdMap);
+            EffectiveNodeTypeImpl effSuperType = (EffectiveNodeTypeImpl)entProvider.getEffectiveNodeType(supertypes, ntdMap);
-     * @inheritDoc
+     * @see EffectiveNodeType#getInheritedNodeTypes()
-     * @inheritDoc
+     * @see EffectiveNodeType#getAllNodeTypes()
-     * @inheritDoc
+     * @see EffectiveNodeType#getMergedNodeTypes()
-     * @inheritDoc
+     * @see EffectiveNodeType#getAllQNodeDefinitions()
-    public QNodeDefinition[] getAllNodeDefs() {
+    public QNodeDefinition[] getAllQNodeDefinitions() {
-     * @inheritDoc
+     * @see EffectiveNodeType#getAllQPropertyDefinitions()
-    public QPropertyDefinition[] getAllPropDefs() {
+    public QPropertyDefinition[] getAllQPropertyDefinitions() {
-     * @inheritDoc
+     * @see EffectiveNodeType#getAutoCreateQNodeDefinitions()
-    public QNodeDefinition[] getAutoCreateNodeDefs() {
+    public QNodeDefinition[] getAutoCreateQNodeDefinitions() {
-     * @inheritDoc
+     * @see EffectiveNodeType#getAutoCreateQPropertyDefinitions()
-    public QPropertyDefinition[] getAutoCreatePropDefs() {
+    public QPropertyDefinition[] getAutoCreateQPropertyDefinitions() {
-     * @inheritDoc
+     * @see EffectiveNodeType#getMandatoryQPropertyDefinitions()
-    public QPropertyDefinition[] getMandatoryPropDefs() {
+    public QPropertyDefinition[] getMandatoryQPropertyDefinitions() {
-     * @inheritDoc
+     * @see EffectiveNodeType#getMandatoryQNodeDefinitions()
-    public QNodeDefinition[] getMandatoryNodeDefs() {
+    public QNodeDefinition[] getMandatoryQNodeDefinitions() {
+     * @see EffectiveNodeType#getNamedQNodeDefinitions(QName)
+     */
+    public QNodeDefinition[] getNamedQNodeDefinitions(QName name) {
+        List list = (List) namedItemDefs.get(name);
+        if (list == null || list.size() == 0) {
+            return QNodeDefinition.EMPTY_ARRAY;
+        }
+        ArrayList defs = new ArrayList(list.size());
+        Iterator iter = list.iterator();
+        while (iter.hasNext()) {
+            QItemDefinition qDef = (QItemDefinition) iter.next();
+            if (qDef.definesNode()) {
+                defs.add(qDef);
+            }
+        }
+        if (defs.size() == 0) {
+            return QNodeDefinition.EMPTY_ARRAY;
+        }
+        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
+    }
+
+    /**
+     * @see EffectiveNodeType#getUnnamedQNodeDefinitions()
+     */
+    public QNodeDefinition[] getUnnamedQNodeDefinitions() {
+        if (unnamedItemDefs.size() == 0) {
+            return QNodeDefinition.EMPTY_ARRAY;
+        }
+        ArrayList defs = new ArrayList(unnamedItemDefs.size());
+        Iterator iter = unnamedItemDefs.iterator();
+        while (iter.hasNext()) {
+            QItemDefinition qDef = (QItemDefinition) iter.next();
+            if (qDef.definesNode()) {
+                defs.add(qDef);
+            }
+        }
+        if (defs.size() == 0) {
+            return QNodeDefinition.EMPTY_ARRAY;
+        }
+        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
+    }
+
+    /**
+     * @see EffectiveNodeType#getNamedQPropertyDefinitions(QName)
+     */
+    public QPropertyDefinition[] getNamedQPropertyDefinitions(QName name) {
+        List list = (List) namedItemDefs.get(name);
+        if (list == null || list.size() == 0) {
+            return QPropertyDefinition.EMPTY_ARRAY;
+        }
+        ArrayList defs = new ArrayList(list.size());
+        Iterator iter = list.iterator();
+        while (iter.hasNext()) {
+            QItemDefinition qDef = (QItemDefinition) iter.next();
+            if (!qDef.definesNode()) {
+                defs.add(qDef);
+            }
+        }
+        if (defs.size() == 0) {
+            return QPropertyDefinition.EMPTY_ARRAY;
+        }
+        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
+    }
+
+    /**
+     * @see EffectiveNodeType#getUnnamedQPropertyDefinitions()
+     */
+    public QPropertyDefinition[] getUnnamedQPropertyDefinitions() {
+        if (unnamedItemDefs.size() == 0) {
+            return QPropertyDefinition.EMPTY_ARRAY;
+        }
+        ArrayList defs = new ArrayList(unnamedItemDefs.size());
+        Iterator iter = unnamedItemDefs.iterator();
+        while (iter.hasNext()) {
+            QItemDefinition qDef = (QItemDefinition) iter.next();
+            if (!qDef.definesNode()) {
+                defs.add(qDef);
+            }
+        }
+        if (defs.size() == 0) {
+            return QPropertyDefinition.EMPTY_ARRAY;
+        }
+        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
+    }
+
+    /**
+     * @see EffectiveNodeType#checkAddNodeConstraints(QName, ItemDefinitionProvider)
-    public void checkAddNodeConstraints(QName name, NodeTypeRegistry ntReg)
+    public void checkAddNodeConstraints(QName name, ItemDefinitionProvider definitionProvider)
-            getApplicableNodeDefinition(name, null, ntReg);
+            definitionProvider.getQNodeDefinition(this, name, null);
+     * @see EffectiveNodeType#checkAddNodeConstraints(QName, ItemDefinitionProvider)
-    public void checkAddNodeConstraints(QName name, QName nodeTypeName, NodeTypeRegistry ntReg)
+    public void checkAddNodeConstraints(QName name, QName nodeTypeName, ItemDefinitionProvider definitionProvider)
-        QNodeDefinition nd = getApplicableNodeDefinition(name, nodeTypeName, ntReg);
+        QNodeDefinition nd = definitionProvider.getQNodeDefinition(this, name, nodeTypeName);
+     * @see EffectiveNodeType#checkRemoveItemConstraints(QName)
-    /**
-     * @inheritDoc
-     */
-    public QNodeDefinition getApplicableNodeDefinition(QName name, QName nodeTypeName,
-                                                       NodeTypeRegistry ntReg)
-            throws NoSuchNodeTypeException, ConstraintViolationException {
-        EffectiveNodeType entTarget;
-        if (nodeTypeName != null) {
-            entTarget = ntReg.getEffectiveNodeType(nodeTypeName);
-        } else {
-            entTarget = null;
-        }
-
-        // try named node definitions first
-        QItemDefinition[] defs = getNamedItemDefs(name);
-        if (defs != null) {
-            for (int i = 0; i < defs.length; i++) {
-                QItemDefinition def = defs[i];
-                if (def.definesNode()) {
-                    QNodeDefinition nd = (QNodeDefinition) def;
-                    // node definition with that name exists
-                    if (entTarget != null && nd.getRequiredPrimaryTypes() != null) {
-                        // check 'required primary types' constraint
-                        if (entTarget.includesNodeTypes(nd.getRequiredPrimaryTypes())) {
-                            // found named node definition
-                            return nd;
-                        }
-                    } else {
-                        if (nd.getDefaultPrimaryType() != null) {
-                            // found node definition with default node type
-                            return nd;
-                        }
-                    }
-                }
-            }
-        }
-
-        // no item with that name defined;
-        // try residual node definitions
-        QNodeDefinition[] nda = getUnnamedNodeDefs();
-        for (int i = 0; i < nda.length; i++) {
-            QNodeDefinition nd = nda[i];
-            if (entTarget != null && nd.getRequiredPrimaryTypes() != null) {
-                // check 'required primary types' constraint
-                if (entTarget.includesNodeTypes(nd.getRequiredPrimaryTypes())) {
-                    // found residual node definition
-                    return nd;
-                }
-            } else {
-                // since no node type has been specified for the new node,
-                // it must be determined from the default node type;
-                if (nd.getDefaultPrimaryType() != null) {
-                    // found residual node definition with default node type
-                    return nd;
-                }
-            }
-        }
-
-        // no applicable definition found
-        throw new ConstraintViolationException("no matching child node definition found for " + name);
-    }
-
-    /**
-     * @inheritDoc
-     */
-    public QPropertyDefinition getApplicablePropertyDefinition(QName name, int type,
-                                                               boolean multiValued)
-        throws ConstraintViolationException {
-        // try named property definitions first
-        QPropertyDefinition match =
-                getMatchingPropDef(getNamedPropDefs(name), type, multiValued);
-        if (match != null) {
-            return match;
-        }
-
-        // no item with that name defined;
-        // try residual property definitions
-        match = getMatchingPropDef(getUnnamedPropDefs(), type, multiValued);
-        if (match != null) {
-            return match;
-        }
-
-        // no applicable definition found
-        throw new ConstraintViolationException("no matching property definition found for " + name);
-    }
-
-    /**
-     * @inheritDoc
-     */
-    public QPropertyDefinition[] getApplicablePropertyDefinitions(QName name, int type, boolean multiValued) throws ConstraintViolationException {
-      
-        QPropertyDefinition named[] = getNamedPropDefs(name);
-        QPropertyDefinition unnamed[] = getUnnamedPropDefs();
-        QPropertyDefinition all[] = new QPropertyDefinition[named.length + unnamed.length];
-        for (int i = 0; i < all.length; i++) {
-            if (i < named.length) {
-                all[i] = named[i]; 
-            }
-            else {
-                all[i] = unnamed[i - named.length];
-            }
-        }
-      
-        QPropertyDefinition result[] = getMatchingPropDefs(all, type, multiValued);
-        if (result.length == 0) {
-            throw new ConstraintViolationException("no matching property definition found for " + name);
-        }
-        else {
-            return result;
-        }
-    }
-
-    /**
-     * @inheritDoc
-     */
-    public QPropertyDefinition getApplicablePropertyDefinition(QName name, int type)
-            throws ConstraintViolationException {
-        // try named property definitions first
-        QPropertyDefinition match = getMatchingPropDef(getNamedPropDefs(name), type);
-        if (match != null) {
-            return match;
-        }
-
-        // no item with that name defined;
-        // try residual property definitions
-        match = getMatchingPropDef(getUnnamedPropDefs(), type);
-        if (match != null) {
-            return match;
-        }
-
-        // no applicable definition found
-        throw new ConstraintViolationException("no matching property definition found for " + name);
-    }
-
+    private QItemDefinition[] getNamedItemDefs(QName name) {
+        List list = (List) namedItemDefs.get(name);
+        if (list == null || list.size() == 0) {
+            return QNodeDefinition.EMPTY_ARRAY;
+        }
+        return (QItemDefinition[]) list.toArray(new QItemDefinition[list.size()]);
+    }
+
-    private QItemDefinition[] getNamedItemDefs(QName name) {
-        List defs = (List) namedItemDefs.get(name);
-        if (defs == null || defs.size() == 0) {
-            return QItemDefinition.EMPTY_ARRAY;
-        }
-        return (QItemDefinition[]) defs.toArray(new QItemDefinition[defs.size()]);
-    }
-
-    private QNodeDefinition[] getUnnamedNodeDefs() {
-        if (unnamedItemDefs.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(unnamedItemDefs.size());
-        Iterator iter = unnamedItemDefs.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
-            if (qDef.definesNode()) {
-                defs.add(qDef);
-            }
-        }
-        if (defs.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
-    }
-
-    private QPropertyDefinition[] getNamedPropDefs(QName name) {
-        List list = (List) namedItemDefs.get(name);
-        if (list == null || list.size() == 0) {
-            return QPropertyDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(list.size());
-        Iterator iter = list.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
-            if (!qDef.definesNode()) {
-                defs.add(qDef);
-            }
-        }
-        if (defs.size() == 0) {
-            return QPropertyDefinition.EMPTY_ARRAY;
-        }
-        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
-    }
-
-    private QPropertyDefinition[] getUnnamedPropDefs() {
-        if (unnamedItemDefs.size() == 0) {
-            return QPropertyDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(unnamedItemDefs.size());
-        Iterator iter = unnamedItemDefs.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
-            if (!qDef.definesNode()) {
-                defs.add(qDef);
-            }
-        }
-        if (defs.size() == 0) {
-            return QPropertyDefinition.EMPTY_ARRAY;
-        }
-        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
-    }
-
-    private QPropertyDefinition getMatchingPropDef(QPropertyDefinition[] defs, int type) {
-        QPropertyDefinition match = null;
-        for (int i = 0; i < defs.length; i++) {
-            QItemDefinition qDef = defs[i];
-            if (!qDef.definesNode()) {
-                QPropertyDefinition pd = (QPropertyDefinition) qDef;
-                int reqType = pd.getRequiredType();
-                // match type
-                if (reqType == PropertyType.UNDEFINED
-                        || type == PropertyType.UNDEFINED
-                        || reqType == type) {
-                    if (match == null) {
-                        match = pd;
-                    } else {
-                        // check if this definition is a better match than
-                        // the one we've already got
-                        if (match.getRequiredType() != pd.getRequiredType()) {
-                            if (match.getRequiredType() == PropertyType.UNDEFINED) {
-                                // found better match
-                                match = pd;
-                            }
-                        } else {
-                            if (match.isMultiple() && !pd.isMultiple()) {
-                                // found better match
-                                match = pd;
-                            }
-                        }
-                    }
-                    if (match.getRequiredType() != PropertyType.UNDEFINED
-                            && !match.isMultiple()) {
-                        // found best possible match, get outta here
-                        return match;
-                    }
-                }
-            }
-        }
-        return match;
-    }
-
-    private QPropertyDefinition getMatchingPropDef(QPropertyDefinition[] defs, int type,
-                                       boolean multiValued) {
-        QPropertyDefinition match = null;
-        for (int i = 0; i < defs.length; i++) {
-            QItemDefinition qDef = defs[i];
-            if (!qDef.definesNode()) {
-                QPropertyDefinition pd = (QPropertyDefinition) qDef;
-                int reqType = pd.getRequiredType();
-                // match type
-                if (reqType == PropertyType.UNDEFINED
-                        || type == PropertyType.UNDEFINED
-                        || reqType == type) {
-                    // match multiValued flag
-                    if (multiValued == pd.isMultiple()) {
-                        // found match
-                        if (pd.getRequiredType() != PropertyType.UNDEFINED) {
-                            // found best possible match, get outta here
-                            return pd;
-                        } else {
-                            if (match == null) {
-                                match = pd;
-                            }
-                        }
-                    }
-                }
-            }
-        }
-        return match;
-    }
-
-    private QPropertyDefinition[] getMatchingPropDefs(QPropertyDefinition[] defs, int type, boolean multiValued) {
-        List result = Collections.EMPTY_LIST;
-    
-        for (int i = 0; i < defs.length; i++) {
-            QItemDefinition qDef = defs[i];
-            if (!qDef.definesNode()) {
-                QPropertyDefinition pd = (QPropertyDefinition)qDef;
-                int reqType = pd.getRequiredType();
-                // match type
-                if (reqType == PropertyType.UNDEFINED || type == PropertyType.UNDEFINED || reqType == type) {
-                    // match multiValued flag
-                    if (multiValued == pd.isMultiple()) {
-                        // found match
-                        if (result.isEmpty()) {
-                            result = Collections.singletonList(pd);
-                        }
-                        else {
-                            if (result.size() == 1) {
-                                result = new ArrayList(result);
-                            }
-                            result.add(pd);
-                        }
-                    }
-                }
-            }
-        }
-        return (QPropertyDefinition[])result.toArray(QPropertyDefinition.EMPTY_ARRAY);
-    }
-

MOV31 MOV31 MOV31 MOV31 INS31 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS29 MOV83 UPD5 MOV5 UPD42 MOV42 MOV44 INS8 INS29 UPD83 UPD42 INS29 UPD83 UPD42 INS29 UPD83 UPD42 MOV44 UPD43 UPD42 UPD65 UPD65 UPD65 UPD65 UPD65 UPD65 UPD65 UPD65 UPD65 INS65 UPD43 INS60 MOV25 MOV60 MOV60 INS61 MOV25 MOV41 INS65 INS65 INS65 INS65 UPD43 UPD42 INS65 UPD43 UPD42 INS65 INS25 UPD42 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 UPD42 MOV43 INS59 MOV8 UPD43 UPD43 INS32 INS8 MOV27 INS68 INS68 INS68 INS68 UPD42 INS68 UPD42 MOV43 INS68 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 UPD42 MOV42 INS11 MOV27 INS41 UPD42 INS42 MOV14 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV60 MOV25 UPD5 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS69 INS69 INS42 INS42 INS69 INS69 INS42 INS42 INS69 UPD42 INS27 INS27 INS41 MOV5 MOV43 INS43 INS43 INS32 UPD42 INS33 INS32 INS34 INS40 INS32 INS42 INS42 MOV43 MOV32 UPD40 UPD43 UPD42 INS3 INS43 INS43 INS43 INS43 INS43 INS42 UPD42 INS52 INS43 INS42 INS33 INS32 INS34 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV5 MOV32 INS42 INS42 INS42 INS42 UPD42 INS52 INS42 INS42 INS42 INS42 INS42 MOV5 INS32 MOV43 MOV43 INS32 INS42 INS42 UPD42 INS42 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL27 DEL40 DEL42 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL31 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL31 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL85 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL85 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL85 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL27 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL40 DEL27 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL42 DEL42 DEL40 DEL27 DEL2 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL85 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL38 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL40 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL32 DEL38 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31