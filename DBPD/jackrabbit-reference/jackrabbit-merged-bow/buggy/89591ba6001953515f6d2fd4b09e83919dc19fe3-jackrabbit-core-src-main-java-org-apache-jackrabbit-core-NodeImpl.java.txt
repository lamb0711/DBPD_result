JCR-1589: JSR 283 Retention & Hold Management (work in progress)
JCR-1957: Move common validation checks to a single place

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@738422 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.security.AccessManager;
-        // make sure that parent node is checked-out
-        if (!parentNode.internalIsCheckedOut()) {
-            String msg = this + ": cannot add a child to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check lock status
-        parentNode.checkLock();
+        // make sure that parent node is checked-out and not locked
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING;
+        session.getValidator().checkModify(parentNode, options, Permission.NONE);
-        // check protected flag of parent (i.e. this) node
-        final NodeDefinition definition = data.getNodeDefinition();
-        if (definition.isProtected()) {
-            String msg = this + ": cannot add a child to a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
+        // check protected flag of parent (i.e. this) node and retention/hold
+        int options = ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD |
+                ItemValidator.CHECK_RETENTION;
+        session.getValidator().checkModify(this, options, Permission.NONE);
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg = this + ": cannot add a mixin node type to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag
-        final NodeDefinition definition = data.getNodeDefinition();
-        if (definition.isProtected()) {
-            String msg = this + ": cannot add a mixin node type to a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check lock status
-        checkLock();
-        // check permissions
-        Path p = getPrimaryPath();
-        AccessManager acMgr = session.getAccessManager();
-        acMgr.checkPermission(p, Permission.NODE_TYPE_MNGMT);
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
+                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
+        int permissions = Permission.NODE_TYPE_MNGMT;
-            acMgr.checkPermission(p, Permission.VERSION_MNGMT);
+            permissions |= Permission.VERSION_MNGMT;
+        session.getValidator().checkModify(this, options, permissions);
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg =
-                this + ": cannot remove a mixin node type from a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag
-        NodeDefinition definition = data.getNodeDefinition();
-        if (definition.isProtected()) {
-            String msg =
-                this + ": cannot remove a mixin node type from a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check lock status
-        checkLock();
-        // check permission
-        session.getAccessManager().checkPermission(getPrimaryPath(), Permission.NODE_TYPE_MNGMT);
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
+                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
+        int permissions = Permission.NODE_TYPE_MNGMT;
+        session.getValidator().checkModify(this, options, permissions);
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg = this + ": cannot set property of a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check lock status
-        checkLock();
+        // make sure this node is checked-out and is not locked
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING;
+        session.getValidator().checkModify(this, options, Permission.NONE);
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg = this + ": cannot add node to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check lock status
-        checkLock();
+        // make sure this node is checked-out and not locked by another session.
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING;
+        session.getValidator().checkModify(this, options, Permission.NONE);
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg =
-                this + ": cannot change child node ordering of a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag
-        final NodeDefinition definition = data.getNodeDefinition();
-        if (definition.isProtected()) {
-            String msg =
-                this + ": cannot change child node ordering of a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check lock status
-        checkLock();
+        // make sure this node is checked-out and neither protected nor locked
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
+                ItemValidator.CHECK_CONSTRAINTS;
+        session.getValidator().checkModify(this, options, Permission.NONE);
-        if (!internalIsCheckedOut()) {
-            String msg = this + ": cannot add a child to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        checkLock();
+        // (3) check protected flag of parent (i.e. this) node
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING | ItemValidator.CHECK_CONSTRAINTS;
+        session.getValidator().checkModify(this, options, Permission.NONE);
-        // (3) check for name collisions
+        // (4) check for name collisions
-        // (4) check protected flag of parent (i.e. this) node
-        final NodeDefinition definition = data.getNodeDefinition();
-        if (definition.isProtected()) {
-            String msg = this + ": cannot add a child to a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check checked-out status
-        if (!internalIsCheckedOut()) {
+        Name ntName = session.getQName(mixinName);
+        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
+        NodeTypeImpl mixin = ntMgr.getNodeType(ntName);
+        if (!mixin.isMixin()) {
-
-        // check protected flag
-        if (data.getNodeDefinition().isProtected()) {
-            return false;
-        }
-
-        // check lock status
-        try {
-            checkLock();
-        } catch (LockException le) {
-            return false;
-        }
-
-        Name ntName;
-        try {
-            ntName = session.getQName(mixinName);
-        } catch (NameException e) {
-            throw new RepositoryException(
-                    "invalid mixin type name: " + mixinName, e);
-        }
-
-        // check permissions
-        Path p = getPrimaryPath();
-        AccessManager acMgr = session.getAccessManager();
-        if (!acMgr.isGranted(p, Permission.NODE_TYPE_MNGMT)) {
-            return false;
-        }
+        
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
+                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
+        int permissions = Permission.NODE_TYPE_MNGMT;
-            if (!acMgr.isGranted(p, Permission.VERSION_MNGMT)) {
-                return false;
-            }
+            permissions |= Permission.VERSION_MNGMT;
-
-        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
-        NodeTypeImpl mixin = ntMgr.getNodeType(ntName);
-        if (!mixin.isMixin()) {
+        if (!session.getValidator().canModify(this, options, permissions)) {
-        // check for pending changes
-        if (hasPendingChanges()) {
-            String msg = "Unable to checkin node. Node has pending changes: " + this;
-            log.debug(msg);
-            throw new InvalidItemStateException(msg);
-        }
-
-        // check lock status
-        checkLock();
-        // check permission
-        session.getAccessManager().checkPermission(getPrimaryPath(), Permission.VERSION_MNGMT);
+        // check lock status, holds and permissions
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD | ItemValidator.CHECK_PENDING_CHANGES_ON_NODE;
+        session.getValidator().checkModify(this, options, Permission.VERSION_MNGMT);
-        // check lock status
-        checkLock();
-        // check permission
-        session.getAccessManager().checkPermission(getPrimaryPath(), Permission.VERSION_MNGMT);
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD;
+        session.getValidator().checkModify(this, options, Permission.VERSION_MNGMT);
-        checkSessionHasPending();
-        checkLock();
+        int options = ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD;
+        session.getValidator().checkModify(this, options, Permission.NONE);
-        checkSessionHasPending();
-        checkLock();
+        int options = ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK| ItemValidator.CHECK_HOLD;
+        session.getValidator().checkModify(this, options, Permission.NONE);
-        checkSessionHasPending();
-        checkLock();
+        int options = ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD;
+        session.getValidator().checkModify(this, options, Permission.NONE);
-        checkSessionHasPending();
-        checkLock();
+        int options = ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK| ItemValidator.CHECK_HOLD;
+        session.getValidator().checkModify(this, options, Permission.NONE);
-     * Checks if this nodes session has pending changes.
-     *
-     * @throws InvalidItemStateException if this nodes session has pending changes
-     * @throws RepositoryException
-     */
-    private void checkSessionHasPending()
-            throws InvalidItemStateException, RepositoryException {
-        // check for pending changes
-        if (session.hasPendingChanges()) {
-            String msg = "Unable to perform operation. Session has pending changes.";
-            log.debug(msg);
-            throw new InvalidItemStateException(msg);
-        }
-
-
-    }
-
-    /**
-        // check for pending changes
-        if (hasPendingChanges()) {
-            String msg =
-                "Unable to finish merge. Node has pending changes: " + this;
-            log.debug(msg);
-            throw new InvalidItemStateException(msg);
-        }
-
-        // check lock
-        checkLock();
-        // check permission
-        session.getAccessManager().checkPermission(getPrimaryPath(), Permission.VERSION_MNGMT);
-
-        // check if checked out
-        if (!internalIsCheckedOut()) {
-            String msg = "Unable to finish merge. Node is checked-in: " + this;
-            log.error(msg);
-            throw new VersionException(msg);
-        }
+        // check lock, permissions and checkout-status
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING | ItemValidator.CHECK_PENDING_CHANGES_ON_NODE | ItemValidator.CHECK_HOLD;
+        session.getValidator().checkModify(this, options, Permission.VERSION_MNGMT);
-        checkSessionHasPending();
-        // check permission
-        session.getAccessManager().checkPermission(getPrimaryPath(), Permission.VERSION_MNGMT);
+        session.getValidator().checkModify(this, ItemValidator.CHECK_PENDING_CHANGES, Permission.VERSION_MNGMT);
-        // check lock status
-        checkLock();
+        // check lock and hold status
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD;
+        session.getValidator().checkModify(this, options, Permission.NONE);
+     * @deprecated
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg = this + ": cannot set primary type of a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag
-        if (data.getDefinition().isProtected()) {
-            String msg = this + ": cannot set primary type of a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
+        // make sure this node is checked-out, neither protected nor locked and
+        // the editing session has sufficient permission to change the primary type.
+        int options = ItemValidator.CHECK_VERSIONING | ItemValidator.CHECK_LOCK |
+                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
+        session.getValidator().checkModify(this, options, Permission.NODE_TYPE_MNGMT);
-        // check lock status
-        checkLock();
-        // check permission
-        session.getAccessManager().checkPermission(getPrimaryPath(), Permission.NODE_TYPE_MNGMT);
-
-        Name ntName;
-        try {
-            ntName = session.getQName(nodeTypeName);
-        } catch (NameException e) {
-            throw new RepositoryException(
-                    "invalid node type name: " + nodeTypeName, e);
-        }
-
+        Name ntName = session.getQName(nodeTypeName);
+            log.debug("Node already has " + nodeTypeName + " as primary node type.");

INS8 MOV60 MOV60 MOV25 MOV21 MOV60 INS21 INS21 MOV60 INS21 MOV60 MOV60 MOV21 MOV60 MOV21 MOV60 INS21 MOV60 INS21 MOV25 MOV60 INS60 INS60 INS60 INS60 INS60 MOV60 INS60 INS65 MOV60 INS39 INS32 INS39 INS32 INS39 INS39 MOV32 INS32 INS39 INS39 INS39 INS39 INS39 INS32 INS39 INS32 INS39 INS39 MOV32 INS8 MOV8 INS39 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS39 INS59 INS39 UPD42 UPD27 INS32 INS42 MOV42 UPD42 MOV42 INS40 UPD42 INS27 INS32 INS42 INS52 INS42 INS40 UPD42 UPD27 UPD42 INS40 INS32 UPD42 MOV42 INS52 UPD42 MOV42 UPD42 MOV42 UPD42 UPD27 UPD42 INS40 UPD42 INS52 UPD42 MOV42 INS42 UPD42 UPD27 INS32 UPD42 INS52 INS42 INS40 UPD42 UPD27 INS32 UPD42 INS52 INS42 INS40 UPD42 UPD27 INS32 INS42 INS52 INS42 INS40 UPD42 UPD27 INS32 UPD42 MOV42 INS52 INS42 INS40 MOV32 UPD42 INS27 INS42 INS40 INS21 UPD42 UPD27 UPD42 INS52 UPD42 MOV42 INS42 INS27 UPD42 INS52 UPD42 MOV42 INS42 INS27 INS32 UPD42 INS52 INS42 INS40 INS42 INS27 INS32 UPD42 INS52 INS42 INS40 INS42 INS27 INS32 UPD42 INS52 INS42 INS40 INS42 INS27 INS32 UPD42 INS52 INS42 INS40 UPD42 UPD27 UPD42 INS52 UPD42 MOV42 UPD42 INS52 INS40 INS42 INS27 INS32 UPD42 INS52 INS42 INS40 UPD42 UPD27 UPD42 INS52 UPD42 MOV42 MOV32 INS21 INS40 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS40 INS40 INS7 MOV42 UPD42 MOV42 INS40 INS40 INS40 INS40 UPD42 INS40 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS40 INS40 INS7 INS32 UPD42 INS52 INS42 UPD42 INS40 INS40 INS40 UPD42 INS40 INS40 UPD42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS40 UPD42 UPD42 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS40 UPD42 INS32 INS42 INS40 INS42 INS40 INS42 UPD42 MOV42 INS42 INS42 INS27 INS45 INS42 INS45 DEL40 DEL26 DEL42 DEL43 DEL52 DEL45 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL52 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL52 DEL45 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL52 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL52 DEL45 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL52 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL32 DEL40 DEL42 DEL43 DEL52 DEL45 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL52 DEL45 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL43 DEL52 DEL45 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL43 DEL42 DEL52 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL43 DEL52 DEL45 DEL42 DEL32 DEL38 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL52 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL38 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL40 DEL32 DEL38 DEL9 DEL41 DEL8 DEL40 DEL9 DEL41 DEL8 DEL42 DEL43 DEL45 DEL52 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL32 DEL42 DEL32 DEL21 DEL32 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL52 DEL42 DEL32 DEL21 DEL32 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL45 DEL52 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL43 DEL52 DEL45 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL52 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54