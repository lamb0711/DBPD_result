JCR-2087: Upgrade to Java 5 as the base platform

Generify PathMap (as preparation for work on LockManagerImpl).

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803119 13f79535-47bb-0310-9956-ffa450edef68

-    private final PathMap pathCache = new PathMap();
+    private final PathMap<LRUEntry> pathCache = new PathMap<LRUEntry>();
-        PathMap.Element element = map(pathToNode);
+        PathMap.Element<LRUEntry> element = map(pathToNode);
-        LRUEntry entry = (LRUEntry) element.get();
+        LRUEntry entry = element.get();
-            PathMap.Element element = get(state.getId());
+            PathMap.Element<LRUEntry> element = get(state.getId());
-            PathMap.Element element = get(id);
+            PathMap.Element<LRUEntry> element = get(id);
-            PathMap.Element element = get(id);
+            PathMap.Element<LRUEntry> element = get(id);
-            PathMap.Element element = get(id);
+            PathMap.Element<LRUEntry> element = get(id);
-            PathMap.Element element = get(nodeId);
+            PathMap.Element<LRUEntry> element = get(nodeId);
-                PathMap.Element child = get(itemId);
+                PathMap.Element<LRUEntry> child = get(itemId);
-            for (PathMap.Element element : entry.getElements()) {
-                Iterator iter = element.getChildren();
+            for (PathMap.Element<LRUEntry> element : entry.getElements()) {
+                Iterator<PathMap.Element<LRUEntry>> iter = element.getChildren();
-                    PathMap.Element child = (PathMap.Element) iter.next();
+                    PathMap.Element<LRUEntry> child = iter.next();
-                    LRUEntry childEntry = (LRUEntry) child.get();
+                    LRUEntry childEntry = child.get();
-            for (PathMap.Element parent : entry.getElements()) {
-                HashMap<Path.Element, PathMap.Element> newChildrenOrder = new HashMap<Path.Element, PathMap.Element>();
+            for (PathMap.Element<LRUEntry> parent : entry.getElements()) {
+                HashMap<Path.Element, PathMap.Element<LRUEntry>> newChildrenOrder =
+                    new HashMap<Path.Element, PathMap.Element<LRUEntry>>();
-                Iterator iter = parent.getChildren();
+                Iterator<PathMap.Element<LRUEntry>> iter = parent.getChildren();
-                    PathMap.Element child = (PathMap.Element) iter.next();
+                    PathMap.Element<LRUEntry> child = iter.next();
-    private PathMap.Element get(ItemId id) {
+    private PathMap.Element<LRUEntry> get(ItemId id) {
-    private PathMap.Element map(Path path) {
+    private PathMap.Element<LRUEntry> map(Path path) {
-            PathMap.Element element = pathCache.map(path, false);
+            PathMap.Element<LRUEntry> element = pathCache.map(path, false);
-                LRUEntry entry = (LRUEntry) element.get();
+                LRUEntry entry = element.get();
-                    PathMap.Element[] elements = entry.getElements();
+                    PathMap.Element<LRUEntry>[] elements = entry.getElements();
-            PathMap.Element element = pathCache.put(path);
+            PathMap.Element<LRUEntry> element = pathCache.put(path);
-            PathMap.Element[] elements = entry.getElements();
+            PathMap.Element<LRUEntry>[] elements = entry.getElements();
-            PathMap.Element element = pathCache.map(path, true);
+            PathMap.Element<LRUEntry> element = pathCache.map(path, true);
-                PathMap.Element[] elements = entry.getElements();
+                PathMap.Element<LRUEntry>[] elements = entry.getElements();
-    private void evict(PathMap.Element element, boolean shift) {
+    private void evict(PathMap.Element<LRUEntry> element, boolean shift) {
-        element.traverse(new PathMap.ElementVisitor() {
-            public void elementVisited(PathMap.Element element) {
+        element.traverse(new PathMap.ElementVisitor<LRUEntry>() {
+            public void elementVisited(PathMap.Element<LRUEntry> element) {
-        PathMap.Element element = null;
+        PathMap.Element<LRUEntry> element = null;
-                PathMap.Element[] elements = entry.getElements();
+                PathMap.Element<LRUEntry>[] elements = entry.getElements();
-        PathMap.Element parent = pathCache.map(path.getAncestor(1), true);
+        PathMap.Element<LRUEntry> parent = pathCache.map(path.getAncestor(1), true);
-        PathMap.Element parent = pathCache.map(path.getAncestor(1), true);
+        PathMap.Element<LRUEntry> parent =
+            pathCache.map(path.getAncestor(1), true);
-        PathMap.Element element = parent.getDescendant(PathFactoryImpl.getInstance().create(
+        PathMap.Element<LRUEntry> element =
+            parent.getDescendant(PathFactoryImpl.getInstance().create(
-            pathCache.traverse(new PathMap.ElementVisitor() {
-                public void elementVisited(PathMap.Element element) {
+            pathCache.traverse(new PathMap.ElementVisitor<LRUEntry>() {
+                public void elementVisited(PathMap.Element<LRUEntry> element) {
-        class PathMapElementCounter implements PathMap.ElementVisitor {
+        class PathMapElementCounter implements PathMap.ElementVisitor<LRUEntry> {
-            public void elementVisited(PathMap.Element element) {
+            public void elementVisited(PathMap.Element<LRUEntry> element) {
-                PathMap.Element[] elements = cachedEntry.getElements();
+                PathMap.Element<LRUEntry>[] elements = cachedEntry.getElements();
-        private PathMap.Element[] elements;
+        private PathMap.Element<LRUEntry>[] elements;
-        public LRUEntry(NodeId id, PathMap.Element element) {
+        public LRUEntry(NodeId id, PathMap.Element<LRUEntry> element) {
-         * Return previous LRU entry
-         *
-         * @return previous LRU entry
-         */
-        public LRUEntry getPrevious() {
-            return previous;
-        }
-
-        /**
-        public PathMap.Element[] getElements() {
+        public PathMap.Element<LRUEntry>[] getElements() {
-        public void addElement(PathMap.Element element) {
-            PathMap.Element[] tmp = new PathMap.Element[elements.length + 1];
+        public void addElement(PathMap.Element<LRUEntry> element) {
+            PathMap.Element<LRUEntry>[] tmp =
+                new PathMap.Element[elements.length + 1];
-        public int removeElement(PathMap.Element element) {
+        public int removeElement(PathMap.Element<LRUEntry> element) {
-                PathMap.Element[] tmp = new PathMap.Element[elements.length - 1];
+                PathMap.Element<LRUEntry>[] tmp =
+                    new PathMap.Element[elements.length - 1];

INS74 INS74 INS74 MOV43 INS43 MOV43 MOV43 MOV43 INS43 INS74 INS60 MOV60 UPD5 UPD5 INS42 INS74 INS74 MOV43 MOV40 INS42 MOV43 INS43 INS74 INS74 MOV59 INS74 INS74 INS74 INS74 INS74 INS74 INS74 MOV43 INS43 MOV43 INS43 MOV32 INS60 INS42 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS74 MOV43 INS43 MOV43 MOV43 MOV43 INS43 MOV43 INS43 UPD5 MOV43 INS43 INS42 INS42 INS74 INS74 INS74 INS74 INS74 INS74 INS74 INS5 MOV59 INS74 INS74 MOV40 INS42 INS42 INS42 MOV40 INS42 MOV43 INS43 INS42 INS40 MOV40 INS42 INS42 INS74 INS42 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS74 INS74 MOV43 INS43 MOV43 INS43 INS74 INS85 MOV43 INS43 MOV60 MOV43 INS43 INS42 INS74 MOV43 INS43 UPD5 INS42 INS42 INS42 INS42 INS42 INS74 MOV43 INS43 INS74 MOV43 INS43 UPD74 MOV74 INS74 MOV40 INS42 MOV43 MOV40 INS42 MOV43 INS43 MOV40 INS42 UPD5 INS42 UPD5 INS74 MOV43 INS43 UPD5 INS42 INS74 MOV43 INS43 INS42 MOV43 INS74 INS42 INS74 MOV43 INS74 MOV32 INS40 INS42 INS74 INS74 INS74 MOV43 INS43 INS42 INS74 MOV43 INS43 INS42 MOV43 INS43 INS74 MOV43 MOV43 INS43 UPD74 MOV74 MOV43 INS43 INS74 UPD5 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS42 MOV43 INS43 INS42 INS42 MOV43 INS43 MOV32 INS32 INS42 INS74 INS42 MOV43 INS43 MOV32 INS74 MOV40 INS42 MOV40 INS42 INS40 INS42 INS74 INS42 INS42 MOV42 MOV42 MOV43 INS43 INS40 INS42 MOV43 INS43 MOV43 INS43 INS42 MOV40 INS42 MOV40 INS42 DEL11 DEL11 DEL42 DEL43 DEL42 DEL43 DEL32 DEL11 DEL11 DEL11 DEL85 DEL5 DEL60 DEL60 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31