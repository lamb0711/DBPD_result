JCR-739: Predefined entity references are not decoded in string literal

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@505286 13f79535-47bb-0310-9956-ffa450edef68

-            queryNode.setStringValue(unescapeQuotes(node.getValue()));
+            queryNode.setStringValue(unescapeQuotes(
+                    decodePredefinedEntities(node.getValue())));
-                            TextsearchQueryNode contains = new TextsearchQueryNode(queryNode,
-                                    unescapeQuotes(literal.getValue()));
+                            TextsearchQueryNode contains = new TextsearchQueryNode(
+                                    queryNode,
+                                    unescapeQuotes(decodePredefinedEntities(
+                                            literal.getValue())));
-                            like.setStringValue(unescapeQuotes(literal.getValue()));
+                            like.setStringValue(unescapeQuotes(
+                                    decodePredefinedEntities(literal.getValue())));
+                            value = decodePredefinedEntities(value);
+
+    /**
+     * Decodes a string literal with predefined entities. Predefined entities
+     * are:
+     * <ul>
+     * <li>&amp;lt; : &lt;</li>
+     * <li>&amp;gt; : &gt;</li>
+     * <li>&amp;amp; : &amp;</li>
+     * <li>&amp;quote; : "</li>
+     * <li>&amp;apos; : '</li>
+     * </ul>
+     * @param literal a string literal that may contain predefined entities.
+     * @return the decoded string.
+     * @throws IllegalArgumentException if the string <code>literal</code> is
+     *                                  malformed.
+     */
+    private String decodePredefinedEntities(String literal) throws IllegalArgumentException {
+        int idx = literal.indexOf('&');
+        if (idx == -1) {
+            return literal;
+        }
+        int endIndex = -1;
+        StringBuffer buf = new StringBuffer();
+        buf.append(literal.substring(0, idx));
+        while (idx != -1) {
+            endIndex = literal.indexOf(';', idx);
+            if (endIndex == -1) {
+                throw new IllegalArgumentException(literal);
+            }
+            String entity = literal.substring(idx + 1, endIndex);
+            if (entity.equals("lt")) {
+                buf.append('<');
+            } else if (entity.equals("gt")) {
+                buf.append('>');
+            } else if (entity.equals("amp")) {
+                buf.append('&');
+            } else if (entity.equals("quot")) {
+                buf.append('"');
+            } else if (entity.equals("apos")) {
+                buf.append('\'');
+            } else {
+                throw new IllegalArgumentException(literal);
+            }
+            idx = literal.indexOf('&', idx + 1);
+            if (idx != -1) {
+                buf.append(literal.substring(endIndex + 1, idx));
+            }
+        }
+        // write remaining
+        buf.append(literal.substring(endIndex + 1));
+        return buf.toString();
+    }

INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS60 INS21 INS61 INS21 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS32 INS27 INS8 INS32 INS32 INS42 INS32 INS42 INS38 INS41 INS42 INS38 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS38 INS21 INS25 INS60 INS25 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS13 INS34 INS42 INS34 INS43 INS42 INS42 INS34 INS42 INS34 INS7 INS27 INS8 INS43 INS59 INS32 INS8 INS25 INS7 INS27 INS8 INS42 INS42 INS27 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS38 INS53 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS42 INS32 INS42 INS38 INS21 INS42 INS34 UPD42 INS42 INS42 INS13 INS42 INS34 INS14 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS42 INS42 INS13 INS27 INS34 INS32 UPD42 INS43 INS42 INS42 INS34 INS42 INS42 INS13 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS13 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS13 INS32 INS42 INS42 INS45 INS21 INS53 INS42 INS34 INS42 INS42 INS13 INS32 INS14 INS42 INS42 INS13 INS43 INS42 INS42 MOV43 INS32 MOV43 INS32 INS42 INS42 MOV32 INS42 MOV32 UPD42 UPD42 UPD42 INS21 INS7 INS42 INS32 INS42 INS42 DEL42 DEL42