JCR-669: Move NamespaceMappings/Index from lucene to namespace registry.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@486082 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.FileSystem;
-import org.apache.jackrabbit.core.fs.FileSystemResource;
+import org.apache.jackrabbit.core.fs.FileSystem;
+import org.apache.jackrabbit.core.fs.FileSystemResource;
-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.QName;
-import javax.jcr.AccessDeniedException;
-import javax.jcr.NamespaceException;
-import javax.jcr.NamespaceRegistry;
-import javax.jcr.RepositoryException;
-import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.NamespaceException;
+import javax.jcr.NamespaceRegistry;
+import javax.jcr.RepositoryException;
+import javax.jcr.UnsupportedRepositoryOperationException;
+
+    private static final String NS_IDX_RESOURCE = "ns_idx.properties";
+    private HashMap indexToURI = new HashMap();
+    private HashMap uriToIndex = new HashMap();
+
+    private int lastIndex = 0;
+
+    /**
+     * Clears all mappings.
+     */
+    private void clear() {
+        prefixToURI.clear();
+        uriToPrefix.clear();
+        indexToURI.clear();
+        uriToIndex.clear();
+    }
+
+    /**
+     * Adds a new mapping and automatically assigns a new index.
+     *
+     * @param prefix the namespace prefix
+     * @param uri the namespace uri
+     */
+    private void map(String prefix, String uri) {
+        map(prefix, uri, null);
+    }
+
+    /**
+     * Adds a new mapping and uses the given index if specified.
+     *
+     * @param prefix the namespace prefix
+     * @param uri the namespace uri
+     * @param idx the index or <code>null</code>.
+     */
+    private void map(String prefix, String uri, Integer idx) {
+        prefixToURI.put(prefix, uri);
+        uriToPrefix.put(uri, prefix);
+        if (!uriToIndex.containsKey(uri)) {
+            if (idx == null) {
+                idx = new Integer(++lastIndex);
+            } else {
+                if (idx.intValue() > lastIndex) {
+                    lastIndex = idx.intValue();
+                }
+            }
+            indexToURI.put(idx, uri);
+            uriToIndex.put(uri, idx);
+        }
+    }
+
+        FileSystemResource idxFile =
+                new FileSystemResource(nsRegStore, NS_IDX_RESOURCE);
-                prefixToURI.clear();
-                uriToPrefix.clear();
+                clear();
-                prefixToURI.put(QName.NS_EMPTY_PREFIX, QName.NS_DEFAULT_URI);
-                uriToPrefix.put(QName.NS_DEFAULT_URI, QName.NS_EMPTY_PREFIX);
+                map(QName.NS_EMPTY_PREFIX, QName.NS_DEFAULT_URI);
+
-                prefixToURI.put(QName.NS_REP_PREFIX, QName.NS_REP_URI);
-                uriToPrefix.put(QName.NS_REP_URI, QName.NS_REP_PREFIX);
+                map(QName.NS_REP_PREFIX, QName.NS_REP_URI);
-                prefixToURI.put(QName.NS_JCR_PREFIX, QName.NS_JCR_URI);
-                uriToPrefix.put(QName.NS_JCR_URI, QName.NS_JCR_PREFIX);
+                map(QName.NS_JCR_PREFIX, QName.NS_JCR_URI);
-                prefixToURI.put(QName.NS_NT_PREFIX, QName.NS_NT_URI);
-                uriToPrefix.put(QName.NS_NT_URI, QName.NS_NT_PREFIX);
+                map(QName.NS_NT_PREFIX, QName.NS_NT_URI);
-                prefixToURI.put(QName.NS_MIX_PREFIX, QName.NS_MIX_URI);
-                uriToPrefix.put(QName.NS_MIX_URI, QName.NS_MIX_PREFIX);
+                map(QName.NS_MIX_PREFIX, QName.NS_MIX_URI);
-                prefixToURI.put(QName.NS_SV_PREFIX, QName.NS_SV_URI);
-                uriToPrefix.put(QName.NS_SV_URI, QName.NS_SV_PREFIX);
+                map(QName.NS_SV_PREFIX, QName.NS_SV_URI);
-                prefixToURI.put(QName.NS_XML_PREFIX, QName.NS_XML_URI);
-                uriToPrefix.put(QName.NS_XML_URI, QName.NS_XML_PREFIX);
+                map(QName.NS_XML_PREFIX, QName.NS_XML_URI);
+            // check if index file exists
+            Properties indexes = new Properties();
+            if (idxFile.exists()) {
+                InputStream in = idxFile.getInputStream();
+                try {
+                    indexes.load(in);
+                } finally {
+                    in.close();
+                }
+            }
+
-                prefixToURI.clear();
-                uriToPrefix.clear();
+                clear();
-
-                    prefixToURI.put(prefix, uri);
-                    uriToPrefix.put(uri, prefix);
+                    String idx = indexes.getProperty(uri);
+                    if (idx != null) {
+                        map(prefix, uri, Integer.decode(idx));
+                    } else {
+                        map(prefix, uri);
+                    }
+            if (!idxFile.exists()) {
+                store();
+            }
+
+        FileSystemResource indexFile =
+                new FileSystemResource(nsRegStore, NS_IDX_RESOURCE);
+        try {
+            indexFile.makeParentDirs();
+            OutputStream os = indexFile.getOutputStream();
+            Properties props = new Properties();
+
+            // store mappings in properties
+            Iterator iter = uriToIndex.keySet().iterator();
+            while (iter.hasNext()) {
+                String uri = (String) iter.next();
+                String index = uriToIndex.get(uri).toString();
+                props.setProperty(uri, index);
+            }
+
+            try {
+                props.store(os, null);
+            } finally {
+                // make sure stream is closed
+                os.close();
+            }
+        } catch (Exception e) {
+            String msg = "failed to persist namespace registry index.";
+            log.debug(msg);
+            throw new RepositoryException(msg, e);
+        }
+    /**
+     * Returns the index (i.e. stable prefix) for the given uri.
+     *
+     * @param uri the uri to retrieve the index for
+     * @return the index
+     * @throws NamespaceException if the URI is not registered.
+     */
+    public int getURIIndex(String uri) throws NamespaceException {
+        Integer idx = (Integer) uriToIndex.get(uri);
+        if (idx == null) {
+            throw new NamespaceException("URI " + uri + " is not registered.");
+        }
+        return idx.intValue();
+    }
+
+    /**
+     * Returns the URI for a given index (i.e. stable prefix).
+     *
+     * @param idx the index to retrieve the uri for.
+     * @return the uri
+     * @throws NamespaceException if the URI is not registered.
+     */
+    public String getURI(int idx) throws NamespaceException {
+        String uri = (String) indexToURI.get(new Integer(idx));
+        if (uri == null) {
+            throw new NamespaceException("URI for index " + idx +  " not registered.");
+        }
+        return uri;
+    }
+    
-        prefixToURI.put(prefix, uri);
-        uriToPrefix.put(uri, prefix);
+        map(prefix, uri);
-        prefixToURI.put(newPrefix, uri);
-        uriToPrefix.put(uri, newPrefix);
+        map(newPrefix, uri);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS34 INS65 MOV21 MOV21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 MOV21 MOV21 INS25 INS60 INS60 INS54 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS66 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS38 INS8 INS43 INS59 INS8 INS43 INS59 INS8 INS12 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS25 INS21 INS21 INS42 INS42 INS14 INS25 INS60 INS25 MOV60 MOV54 INS25 INS42 INS42 INS14 INS21 INS60 INS60 INS60 INS61 INS54 INS44 INS8 INS42 INS42 INS11 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS53 UPD42 UPD42 INS42 INS42 INS42 INS27 INS8 INS8 INS32 INS32 INS43 INS42 INS42 MOV38 INS8 INS43 INS59 INS32 INS8 INS38 INS8 INS43 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS8 INS43 INS42 INS60 INS21 INS53 INS43 INS32 INS14 INS43 INS32 INS14 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS41 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS60 INS54 INS32 MOV21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS14 INS43 INS27 INS7 INS27 INS8 INS43 INS43 INS59 INS8 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS45 INS43 INS42 INS42 INS45 INS42 INS45 INS42 INS14 INS32 INS42 INS21 UPD42 UPD42 UPD40 UPD40 UPD42 UPD42 UPD40 UPD40 UPD42 UPD40 UPD40 UPD42 UPD40 UPD40 UPD42 UPD40 UPD40 UPD42 UPD40 UPD40 INS42 INS42 INS42 INS32 MOV21 MOV21 INS60 INS25 UPD42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS43 INS38 INS42 INS42 INS7 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS27 INS8 INS8 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL40 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL40 DEL40 DEL40 DEL32 DEL21 DEL40 DEL40 DEL32 DEL21 DEL40 DEL40 DEL32 DEL21 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21