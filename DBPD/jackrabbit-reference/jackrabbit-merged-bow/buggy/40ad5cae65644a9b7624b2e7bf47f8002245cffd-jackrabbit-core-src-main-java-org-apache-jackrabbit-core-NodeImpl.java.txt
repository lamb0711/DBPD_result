JCR-1565: JSR 283 lifecycle management

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@795096 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.InvalidLifecycleTransitionException;
+import org.apache.jackrabbit.commons.JcrUtils;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_LIFECYCLE_POLICY;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_CURRENT_LIFECYCLE_STATE;
+
-    // TODO: JCR-1565 JSR 283 lifecycle management
+    /**
+     * Returns all allowed transitions from the current lifecycle state of
+     * this node.
+     * <p>
+     * The lifecycle policy node referenced by the "jcr:lifecyclePolicy"
+     * property is expected to contain a "transitions" node with a list of
+     * child nodes, one for each transition. These transition nodes must
+     * have single-valued string "from" and "to" properties that identify
+     * the allowed source and target states of each transition.
+     * <p>
+     * Note that future versions of Apache Jackrabbit may well use different
+     * lifecycle policy implementations.
+     *
+     * @since Apache Jackrabbit 2.0
+     * @return allowed transitions for the current lifecycle state of this node
+     * @throws UnsupportedRepositoryOperationException
+     *             if this node does not have the mix:lifecycle mixin node type
+     * @throws RepositoryException if another error occurs
+     */
-            throws RepositoryException {
+            throws UnsupportedRepositoryOperationException, RepositoryException {
-            throw new UnsupportedRepositoryOperationException();
+            Node policy = getProperty(JCR_LIFECYCLE_POLICY).getNode();
+            String state = getProperty(JCR_CURRENT_LIFECYCLE_STATE).getString();
+
+            List<String> targetStates = new ArrayList<String>();
+            if (policy.hasNode("transitions")) {
+                Node transitions = policy.getNode("transitions");
+                for (Node transition : JcrUtils.getChildNodes(transitions)) {
+                    String from = transition.getProperty("from").getString();
+                    if (from.equals(state)) {
+                        String to = transition.getProperty("to").getString();
+                        targetStates.add(to);
+                    }
+                }
+            }
+
+            return targetStates.toArray(new String[targetStates.size()]);
-                    + " may participate in a lifecycle.");
+                    + " may participate in a lifecycle: " + this);
-    // TODO: JCR-1565 JSR 283 lifecycle management
+    /**
+     * Transitions this node through its lifecycle to the given target state.
+     *
+     * @since Apache Jackrabbit 2.0
+     * @see #getAllowedLifecycleTransistions()
+     * @param transition target lifecycle state
+     * @throws UnsupportedRepositoryOperationException
+     *             if this node does not have the mix:lifecycle mixin node type
+     * @throws InvalidLifecycleTransitionException
+     *             if the given target state is not among the allowed
+     *             transitions from the current lifecycle state of this node
+     * @throws RepositoryException if another error occurs
+     */
-            throws RepositoryException {
-        if (isNodeType(NameConstants.MIX_LIFECYCLE)) {
-            throw new UnsupportedRepositoryOperationException();
-        } else {
-            throw new UnsupportedRepositoryOperationException(
-                    "Only nodes with mixin node type mix:lifecycle"
-                    + " may participate in a lifecycle.");
+            throws UnsupportedRepositoryOperationException,
+            InvalidLifecycleTransitionException, RepositoryException {
+        // getAllowedLifecycleTransitions checks for the mix:lifecycle mixin
+        for (String target : getAllowedLifecycleTransistions()) {
+            if (target.equals(transition)) {
+                PropertyImpl property = getProperty(JCR_CURRENT_LIFECYCLE_STATE);
+                property.internalSetValue(
+                        new InternalValue[] { InternalValue.create(target) },
+                        PropertyType.STRING);
+                property.save();
+                return;
+            }
+
+        // No valid transition found
+        throw new InvalidLifecycleTransitionException(
+                "Invalid lifecycle transition \""
+                + transition  + "\" for " + this);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS29 MOV43 INS29 MOV43 INS43 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS70 MOV53 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 MOV32 INS8 INS66 INS66 INS68 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS44 INS32 INS8 INS60 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS42 INS25 INS43 INS43 INS59 INS43 INS59 INS74 INS59 MOV32 INS8 INS32 INS42 INS32 MOV8 INS42 UPD45 INS42 UPD45 INS52 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 UPD42 INS45 INS60 INS70 INS42 INS42 INS3 MOV43 INS42 INS42 INS42 INS60 INS21 INS21 INS41 INS32 INS42 INS32 INS42 INS42 INS42 INS74 INS43 INS59 INS44 INS32 INS8 INS5 INS32 UPD45 INS52 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS60 INS25 INS43 INS85 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS3 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS59 INS32 MOV8 INS42 INS42 INS42 INS5 INS4 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS43 INS85 INS32 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 DEL40 DEL43 DEL14 DEL53 DEL14 DEL53 DEL8 DEL25