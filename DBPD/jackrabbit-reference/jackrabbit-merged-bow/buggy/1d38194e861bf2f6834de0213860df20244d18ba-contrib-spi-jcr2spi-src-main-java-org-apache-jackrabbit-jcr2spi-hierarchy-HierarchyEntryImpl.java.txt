- invalidating a NodeEntry must also invalidate the ChildNodeEntries collection in order to get informed about reordering of the entries.

- comparing ItemInfo.getPath to HierarchyEntry.getPath must use the 'workspace' path of the latter and not the current path present in the transient space, which differs in case of a moved item.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@518930 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.MalformedPathException;
-            state = doResolve();
-            target = new WeakReference(state);
+            try {
+                state = doResolve();
+                target = new WeakReference(state);
+            } catch (NoSuchItemStateException e) {
+                remove();
+                throw e;
+            }
+     * Build the Path of this entry
+     *
+     * @param workspacePath
+     * @return
+     * @throws RepositoryException
+     */
+    abstract Path buildPath(boolean workspacePath) throws RepositoryException;
+
+    /**
-        // shortcut for root state
-        if (parent == null) {
-            return Path.ROOT;
-        }
-
-        // build path otherwise
-        try {
-            Path.PathBuilder builder = new Path.PathBuilder();
-            buildPath(builder, this);
-            return builder.getPath();
-        } catch (MalformedPathException e) {
-            String msg = "Failed to build path of " + this;
-            throw new RepositoryException(msg, e);
-        }
+        return buildPath(false);
-     * Adds the path element of an item id to the path currently being built.
-     * On exit, <code>builder</code> contains the path of <code>state</code>.
-     *
-     * @param builder builder currently being used
-     * @param hEntry HierarchyEntry of the state the path should be built for.
+     * @inheritDoc
+     * @see HierarchyEntry#getWorkspacePath()
-    private void buildPath(Path.PathBuilder builder, HierarchyEntry hEntry) {
-        NodeEntry parentEntry = hEntry.getParent();
-        // shortcut for root state
-        if (parentEntry == null) {
-            builder.addRoot();
-            return;
-        }
-
-        // recursively build path of parent
-        buildPath(builder, parentEntry);
-
-        QName name = hEntry.getQName();
-        if (hEntry.denotesNode()) {
-            int index = ((NodeEntry) hEntry).getIndex();
-            // add to path
-            if (index == Path.INDEX_DEFAULT) {
-                builder.addLast(name);
-            } else {
-                builder.addLast(name, index);
-            }
-        } else {
-            // property-state: add to path
-            builder.addLast(name);
-        }
+    public Path getWorkspacePath() throws RepositoryException {
+        return buildPath(true);

INS31 INS31 INS31 MOV29 UPD83 MOV83 INS43 INS42 MOV44 INS43 MOV29 INS83 MOV43 INS42 MOV43 INS8 INS29 INS83 INS43 INS42 MOV43 INS8 INS65 UPD65 INS42 INS39 INS42 UPD42 MOV42 INS41 INS65 INS65 UPD42 MOV42 INS41 INS8 UPD66 UPD42 UPD42 INS32 INS68 INS32 INS54 UPD42 MOV42 INS9 INS42 INS42 UPD42 MOV42 INS9 MOV8 INS12 INS44 INS8 INS43 INS42 INS21 INS53 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL66 DEL66 DEL66 DEL42 DEL43 DEL42 DEL83 DEL42 DEL42 DEL33 DEL27 DEL40 DEL41 DEL8 DEL25 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL52 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL52 DEL27 DEL59 DEL60 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL39 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31