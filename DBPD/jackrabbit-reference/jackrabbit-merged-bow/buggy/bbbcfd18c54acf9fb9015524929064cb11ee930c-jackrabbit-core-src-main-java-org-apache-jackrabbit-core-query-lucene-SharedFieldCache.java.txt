JCR-2906 Multivalued property sorted by last/random value

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1209063 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+    static class ComparableArray implements Comparable<ComparableArray> {
+
+        private int offset = 0;
+
+        private Comparable<?>[] c = new Comparable[0];
+
+        public ComparableArray(Comparable<?> item, int index) {
+            insert(item, index);
+        }
+
+        public int compareTo(ComparableArray o) {
+            return Util.compare(c, o.c);
+        }
+
+        /**
+         * testing purpose only.
+         * 
+         * @return the offset
+         */
+        int getOffset() {
+            return offset;
+        }
+
+        public ComparableArray insert(Comparable<?> item, int index) {
+            // optimize for most common scenario
+            if (c.length == 0) {
+                offset = index;
+                c = new Comparable<?>[] { item };
+                return this;
+            }
+
+            // inside
+            if (index >= offset && index < offset + c.length) {
+                c[index - offset] = item;
+                return this;
+            }
+
+            // before
+            if (index < offset) {
+                int relativeOffset = offset - index;
+                Comparable<?>[] newC = new Comparable[relativeOffset + c.length];
+                newC[0] = item;
+                System.arraycopy(c, 0, newC, relativeOffset, c.length);
+                c = newC;
+                offset = index;
+                return this;
+            }
+
+            // after
+            if (index >= offset + c.length) {
+                c = Arrays.copyOf(c, index - offset + 1);
+                c[index - offset] = item;
+                return this;
+            }
+            return this;
+        }
+
+        /*
+         * This is needed by {@link UpperCaseSortComparator} and {@link LowerCaseSortComparator}
+         */
+        @Override
+        public String toString() {
+            if (c == null) {
+                return null;
+            }
+            if (c.length == 1) {
+                return c[0].toString();
+            }
+            return Arrays.toString(c);
+        }
+    }
+
-            Comparable<?>[] retArray = new Comparable[reader.maxDoc()];
+            final int maxDocs = reader.maxDoc();
+            ComparableArray[] retArray = new ComparableArray[maxDocs];
-            if (retArray.length > 0) {
+            if (maxDocs > 0) {
-
-                char[] tmp = new char[16];
-
-                        // make sure term is compacted
-                        String text = term.text();
-                        int len = text.length() - prefix.length();
-                        if (tmp.length < len) {
-                            // grow tmp
-                            tmp = new char[len];
-                        }
-                        text.getChars(prefix.length(), text.length(), tmp, 0);
-                        String value = new String(tmp, 0, len);
-
-                        termDocs.seek(termEnum);
+                        final String value = termValueAsString(term, prefix);
+                        termDocs.seek(term);
+                            int termPosition = 0;
-                                termPos.nextPosition();
+                                termPosition = termPos.nextPosition();
-                            retArray[termDocs.doc()] = getValue(value, type);
+                            Comparable<?> v = getValue(value, type);
+                            int doc = termDocs.doc();
+                            ComparableArray ca = retArray[doc];
+                            if (ca == null) {
+                                retArray[doc] = new ComparableArray(v, termPosition);
+                            } else {
+                                retArray[doc] = ca.insert(v, termPosition);
+                            }
+     * Extracts the value from a given Term as a String
+     * 
+     * @param term
+     * @param prefix
+     * @return string value contained in the term
+     */
+    private static String termValueAsString(Term term, String prefix) {
+        // make sure term is compacted
+        String text = term.text();
+        int length = text.length() - prefix.length();
+        char[] tmp = new char[length];
+        text.getChars(prefix.length(), text.length(), tmp, 0);
+        return new String(tmp, 0, length);
+    }
+
+    /**

INS26 INS40 INS55 INS31 INS83 INS42 INS74 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS43 INS43 INS83 INS39 INS59 INS83 INS5 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 MOV60 MOV60 MOV60 MOV21 INS41 INS42 INS42 INS42 INS34 INS74 INS85 INS42 INS3 INS74 INS42 INS39 INS42 INS21 INS43 INS42 INS41 INS65 INS65 INS41 INS42 INS74 INS42 INS39 INS42 INS25 INS25 INS25 INS25 INS41 INS42 INS42 INS25 INS25 INS41 INS66 INS42 INS42 INS66 INS42 INS42 MOV5 INS14 INS43 INS76 INS5 INS34 INS43 INS76 INS32 INS42 INS32 INS66 INS66 INS42 INS43 INS76 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS52 INS27 INS8 INS27 INS8 INS32 INS60 INS60 UPD42 MOV43 INS42 INS34 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS34 INS21 INS21 INS41 INS27 INS27 INS21 INS41 INS42 INS42 INS60 MOV60 INS21 INS21 INS21 INS21 INS41 INS42 INS27 INS21 INS21 INS41 INS42 INS33 INS41 INS40 INS34 INS41 INS42 INS42 INS42 INS83 INS39 INS59 INS5 INS59 INS42 INS42 INS7 INS7 INS52 INS42 INS42 INS42 INS27 INS7 INS52 INS39 INS59 INS7 INS32 INS7 INS7 INS52 INS42 INS40 INS7 INS7 INS52 INS33 INS32 INS42 MOV32 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS3 INS42 INS40 INS2 INS42 INS42 INS27 UPD42 INS2 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS2 INS42 INS2 INS42 INS42 INS5 INS42 INS5 INS4 INS42 INS27 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS34 INS43 INS85 INS74 INS85 INS42 INS42 INS42 INS42 INS40 INS27 INS34 INS42 INS42 INS42 INS43 INS76 INS42 INS42 INS42 INS83 INS32 UPD42 INS60 INS60 INS60 INS60 INS25 INS42 INS42 INS42 INS39 INS59 INS74 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS34 INS43 INS76 INS42 MOV32 INS42 MOV32 INS42 INS42 INS2 INS42 INS33 MOV21 INS21 INS7 INS42 INS42 INS42 INS7 INS42 MOV32 INS14 INS2 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL42 DEL27 DEL42 DEL42 DEL3 DEL7 DEL21 DEL8 DEL25 DEL42 DEL34 DEL42 DEL14 DEL34