JCR-2959 SQL2 QueryEngine should use Lucene for sort
 - work in progress

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1161475 13f79535-47bb-0310-9956-ffa450edef68

-import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_ORDER_DESCENDING;
+import java.util.HashMap;
-import javax.jcr.query.qom.Operand;
+import javax.jcr.query.qom.QueryObjectModelConstants;
+import org.apache.jackrabbit.JcrConstants;
+import org.apache.jackrabbit.core.query.lucene.sort.DynamicOperandFieldComparatorSource;
+import org.apache.jackrabbit.core.query.lucene.sort.RowComparator;
+import org.apache.lucene.search.Sort;
+import org.apache.lucene.search.SortField;
+    
+    //TODO remove this when the implementation is stable
+    public static final String NATIVE_SORT_SYSTEM_PROPERTY = "useNativeSort";
+
+    private static final boolean NATIVE_SORT = Boolean.valueOf(System
+            .getProperty(NATIVE_SORT_SYSTEM_PROPERTY, "false"));
-
-    /**
-     * Row comparator.
-     */
-    private static class RowComparator implements Comparator<Row> {
-
-        private final ValueComparator comparator = new ValueComparator();
-
-        private final Ordering[] orderings;
-
-        private final OperandEvaluator evaluator;
-
-        private RowComparator(Ordering[] orderings, OperandEvaluator evaluator) {
-            this.orderings = orderings;
-            this.evaluator = evaluator;
-        }
-
-        public int compare(Row a, Row b) {
-            try {
-                for (Ordering ordering : orderings) {
-                    Operand operand = ordering.getOperand();
-                    Value[] va = evaluator.getValues(operand, a);
-                    Value[] vb = evaluator.getValues(operand, b);
-                    int d = compare(va, vb);
-                    if (d != 0) {
-                        if (JCR_ORDER_DESCENDING.equals(ordering.getOrder())) {
-                            return -d;
-                        } else {
-                            return d;
-                        }
-                    }
-                }
-                return 0;
-            } catch (RepositoryException e) {
-                throw new RuntimeException("Unable to compare rows " + a
-                        + " and " + b, e);
-            }
-        }
-
-        private int compare(Value[] a, Value[] b) {
-            for (int i = 0; i < a.length && i < b.length; i++) {
-                int d = comparator.compare(a[i], b[i]);
-                if (d != 0) {
-                    return d;
-                }
-            }
-            return a.length - b.length;
-        }
-
-    }
+    
+    private final Session session;
+        this.session = session;
-
-        log.debug("SQL2 QUERY execute took {} ms.", System.currentTimeMillis()
-                - time);
+        log.debug("SQL2 QUERY execute took {} ms. native sort is {}.",
+                System.currentTimeMillis() - time, NATIVE_SORT);
-        
+
+        Sort sort = new Sort();
+        if (NATIVE_SORT) {
+            sort = new Sort(createSortFields(orderings, session));
+        }
+
+        // if true it means that the LuceneQueryFactory should just let the
+        // QueryEngine take care of sorting and applying offset and limit
+        // constraints
+        boolean externalSort = !NATIVE_SORT;
+        RowIterator rows = null;
-            RowIterator rows = new RowIteratorAdapter(lqf.execute(columnMap,
-                    selector, constraint));
-            QueryResult result = new SimpleQueryResult(columnNames,
-                    selectorNames, rows);
-            return sort(result, orderings, evaluator, offset, limit);
+            rows = new RowIteratorAdapter(lqf.execute(columnMap, selector,
+                    constraint, sort, externalSort, offset, limit));
-            if (log.isDebugEnabled()) {
-                time = System.currentTimeMillis() - time;
-                log.debug(genString(printIndentation) + "SQL2 SELECT took "
-                        + time + " ms. selector: " + selector + ", columns: "
-                        + Arrays.toString(columnNames) + ", constraint: "
-                        + constraint);
+            log.debug(
+                    "{}SQL2 SELECT took {} ms. selector: {}, columns: {}, constraint: {}, offset {}, limit {}",
+                    new Object[] { genString(printIndentation),
+                            System.currentTimeMillis() - time, selector,
+                            Arrays.toString(columnNames), constraint, offset,
+                            limit });
+        }
+        QueryResult result = new SimpleQueryResult(columnNames, selectorNames,
+                rows);
+        if (NATIVE_SORT) {
+            return result;
+        }
+
+        long timeSort = System.currentTimeMillis();
+        QueryResult sorted = sort(result, orderings, evaluator, offset, limit);
+        log.debug("{}SQL2 SORT took {} ms.", genString(printIndentation),
+                System.currentTimeMillis() - timeSort);
+        return sorted;
+    }
+
+    public SortField[] createSortFields(Ordering[] orderings, Session session)
+            throws RepositoryException {
+
+        if (orderings == null || orderings.length == 0) {
+            return new SortField[] { SortField.FIELD_SCORE };
+        }
+        // orderings[] -> (property, ordering)
+        Map<String, Ordering> orderByProperties = new HashMap<String, Ordering>();
+        for (Ordering o : orderings) {
+            final String p = o.toString();
+            if (!orderByProperties.containsKey(p)) {
+                orderByProperties.put(p, o);
+        final DynamicOperandFieldComparatorSource dofcs = new DynamicOperandFieldComparatorSource(
+                session, evaluator, orderByProperties);
+
+        List<SortField> sortFields = new ArrayList<SortField>();
+
+        // as it turn out, orderByProperties.keySet() doesn't keep the original
+        // insertion order
+        for (Ordering o : orderings) {
+            final String p = o.toString();
+            // order on jcr:score does not use the natural order as
+            // implemented in lucene. score ascending in lucene means that
+            // higher scores are first. JCR specs that lower score values
+            // are first.
+            boolean isAsc = QueryObjectModelConstants.JCR_ORDER_ASCENDING
+                    .equals(o.getOrder());
+            if (JcrConstants.JCR_SCORE.equals(p)) {
+                sortFields.add(new SortField(null, SortField.SCORE, !isAsc));
+            } else {
+                // TODO use native sort if available
+                sortFields.add(new SortField(p, dofcs, isAsc));
+            }
+        }
+        return sortFields.toArray(new SortField[sortFields.size()]);

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS23 MOV23 MOV23 INS31 INS83 INS83 MOV83 UPD43 MOV43 MOV59 INS83 INS39 UPD43 UPD83 MOV83 INS5 INS42 MOV44 MOV44 MOV43 INS8 UPD42 UPD42 INS45 UPD42 INS32 UPD42 UPD42 INS21 INS60 INS25 INS60 INS60 INS54 MOV60 INS25 INS60 INS60 MOV21 INS41 INS43 INS85 UPD43 UPD42 INS25 INS60 INS70 MOV60 INS60 INS70 INS41 INS42 INS42 INS32 INS7 INS43 INS59 INS42 INS8 INS39 INS59 MOV43 INS59 MOV8 MOV12 INS8 INS42 INS8 INS39 INS59 INS43 INS59 INS42 INS42 UPD42 INS27 INS8 INS74 INS59 MOV44 MOV42 INS8 INS83 INS43 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS45 INS22 INS42 UPD45 INS42 INS42 INS42 INS14 INS21 INS42 INS38 INS42 INS33 INS21 INS21 INS41 INS42 INS32 INS42 INS42 MOV32 INS45 INS32 INS27 INS27 INS27 INS41 INS43 INS43 INS43 INS42 INS14 UPD42 MOV60 INS25 UPD42 MOV42 UPD42 INS14 INS43 INS43 INS42 INS14 MOV43 INS42 MOV60 INS60 INS25 INS42 INS42 INS3 INS52 INS42 INS43 INS7 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS33 INS40 INS34 INS3 INS42 INS42 INS42 INS74 INS83 UPD43 INS38 INS8 INS43 INS42 INS42 INS42 UPD42 MOV42 INS42 INS74 INS83 INS43 INS39 INS59 INS32 INS8 INS8 INS5 INS32 INS42 INS42 INS14 INS42 INS14 MOV42 UPD42 MOV42 INS45 INS3 INS42 INS42 INS5 INS4 INS43 INS43 INS43 UPD42 UPD42 INS32 INS21 INS42 INS43 INS43 INS42 UPD42 INS42 INS32 INS40 INS42 INS42 INS21 INS21 INS43 INS85 UPD42 MOV42 UPD42 MOV42 INS43 INS32 MOV43 MOV32 INS5 INS4 INS43 INS85 INS40 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 INS40 MOV42 MOV32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 MOV32 MOV27 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS43 INS33 INS40 INS38 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 DEL42 DEL43 DEL14 DEL85 DEL5 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL23 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL32 DEL42 DEL38 DEL41 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL34 DEL41 DEL8 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL24 DEL40 DEL40 DEL27 DEL41 DEL8 DEL31 DEL55 DEL42 DEL14 DEL59 DEL60 DEL41 DEL45 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL32 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL54 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42