JCR-1397: Allow query results with unknown size

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@629145 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
-     * The name and path resolver of the session executing the query
+     * The session executing the query
-    protected final NamePathResolver resolver;
+    protected final SessionImpl session;
-     * restrictions. This value is set when the query is executed the first
-     * time.
+     * restrictions. This value is set whenever hits are obtained.
-     * @param resolver        the namespace resolver of the session executing
-     *                        the query.
+     * @param session         the session executing the query.
-                           NamePathResolver resolver,
+                           SessionImpl session,
-        this.resolver = resolver;
+        this.session = session;
-                propNames[i] = resolver.getJCRName(selectProps[i]);
+                propNames[i] = session.getJCRName(selectProps[i]);
-                resolver, excerptProvider, spellSuggestion);
+                session, excerptProvider, spellSuggestion);
-        return index.executeQuery(queryImpl, query, orderProps, orderSpecs);
+        return index.executeQuery(session, queryImpl,
+                query, orderProps, orderSpecs);
-            log.debug("getResults(" + size + ")");
+            log.debug("getResults({}) limit={}", new Long(size), new Long(limit));
+            long time = System.currentTimeMillis();
-
-            // set num results with the first query execution
-            if (numResults == -1) {
-                numResults = result.length();
-            }
+            log.debug("query executed in {} ms",
+                    new Long(System.currentTimeMillis() - time));
-            int max = Math.min(result.length(), numResults);
-            for (int i = start; i < max && resultNodes.size() < maxResultSize; i++) {
-                NodeId id = NodeId.valueOf(result.doc(i).get(FieldNames.UUID));
+            time = System.currentTimeMillis();
+            result.skip(start);
+            for (ScoreNode sn = result.nextScoreNode();
+                 sn != null && resultNodes.size() < maxResultSize;
+                 sn = result.nextScoreNode()) {
-                    if (accessMgr.isGranted(id, AccessManager.READ)) {
-                        resultNodes.add(new ScoreNode(id, result.score(i)));
+                    if (accessMgr.isGranted(sn.getNodeId(), AccessManager.READ)) {
+                        resultNodes.add(sn);
+            log.debug("retrieved ScoreNodes in {} ms",
+                    new Long(System.currentTimeMillis() - time));
+
+            // update numResults
+            numResults = result.getSize();
-     * current session has no permission to access.
+     * current session has no permission to access. This method may return
+     * <code>-1</code> if the total size is unknown.
-        return numResults - invalid;
+        if (numResults == -1) {
+            return -1;
+        } else {
+            return numResults - invalid;
+        }
-            if ((position + invalid + skipNum) > numResults) {
-                throw new NoSuchElementException();
-            }
-            long size = getTotalSize() - offset;
+            int total = getTotalSize();
+            if (total == -1) {
+                return -1;
+            }
+            long size = total - offset;
-            while (next == null && (nextPos + invalid) < numResults) {
+            while (next == null) {
+                    // quick check if there are more results at all
+                    // this check is only possible if we have numResults
+                    if (numResults != -1 && (nextPos + invalid) >= numResults) {
+                        break;
+                    }
+
-                        return;
+                        break;

MOV26 UPD40 UPD43 INS8 UPD42 UPD42 UPD43 UPD42 INS25 UPD66 UPD66 UPD42 UPD66 UPD42 UPD66 INS66 MOV27 INS8 MOV8 INS25 INS60 UPD42 UPD42 INS42 INS60 INS21 INS21 INS21 INS24 INS21 INS21 INS41 UPD39 INS27 INS8 INS39 INS59 MOV27 UPD42 INS39 INS59 INS32 INS7 INS32 INS58 MOV27 INS7 INS8 INS32 INS7 INS38 UPD42 MOV32 INS42 INS38 INS41 INS42 INS27 INS45 INS14 INS14 INS42 INS32 INS42 UPD42 MOV42 INS45 INS14 INS42 INS32 INS42 INS42 UPD42 MOV42 MOV43 INS59 UPD27 INS42 INS32 MOV54 INS42 INS42 INS45 INS14 INS42 INS32 INS34 INS34 INS38 INS42 INS42 INS43 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS27 INS42 INS42 INS42 INS32 UPD42 INS33 UPD42 MOV42 INS42 INS43 INS27 INS42 INS42 INS34 INS25 INS42 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS42 INS32 INS42 MOV27 INS8 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 UPD27 INS10 INS10 INS32 INS42 INS38 INS42 UPD42 MOV42 INS34 UPD42 MOV42 DEL40 DEL26 DEL66 DEL66 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL39 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL32 DEL59 DEL60 DEL8 DEL24 DEL42 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL27 DEL41