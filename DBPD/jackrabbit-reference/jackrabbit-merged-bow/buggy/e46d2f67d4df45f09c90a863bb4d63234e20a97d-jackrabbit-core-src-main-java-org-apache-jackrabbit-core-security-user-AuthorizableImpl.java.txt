JCR-1104 : JSR 283 support (security work in progress)

- user API: add distinction between declared and indirect group membership
- user Impl: move group membership to authorizable node type
- javadoc
- minor fixes/improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@651624 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.PropertyImpl;
+import org.apache.jackrabbit.api.security.principal.PrincipalIterator;
+import org.apache.jackrabbit.api.security.principal.PrincipalManager;
-import org.apache.jackrabbit.api.security.principal.PrincipalIterator;
-import org.apache.jackrabbit.api.security.principal.PrincipalManager;
+import org.apache.jackrabbit.api.security.user.User;
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.core.PropertyImpl;
+import org.apache.jackrabbit.core.SessionImpl;
+import java.util.Arrays;
-import java.util.HashSet;
+     * @see Authorizable#declaredMemberOf()
+     */
+    public Iterator declaredMemberOf() throws RepositoryException {
+        List memberShip = new ArrayList();
+        collectMembership(memberShip, false);
+        return memberShip.iterator();
+    }
+
+    /**
-        // TODO: replace by weak-refs
-        PropertyIterator itr = node.getReferences();
-        Collection tmp = new HashSet((int) itr.getSize());
-        while (itr.hasNext()) {
-            NodeImpl groupNode = (NodeImpl) itr.nextProperty().getParent();
-            if (groupNode.isNodeType(NT_REP_GROUP)) {
-                Group group = GroupImpl.create(groupNode, userManager);
-                tmp.add(group);
-            }
-        }
-        return tmp.iterator();
+        List memberShip = new ArrayList();
+        collectMembership(memberShip, true);
+        return memberShip.iterator();
-        // TODO: ev. remove group-memberships first?
+        // don't allow for removal of the administrator even if the executing
+        // session has all permissions.
+        if (!isGroup() && ((User) this).isAdmin()) {
+            throw new RepositoryException("The administrator cannot be removed.");
+        }
+    boolean addToGroup(GroupImpl group) throws RepositoryException {
+        try {
+            Value[] values;
+            // TODO: replace by weak-refs
+            Value added = getSession().getValueFactory().createValue(group.getNode());
+            NodeImpl node = getNode();
+            if (node.hasProperty(P_GROUPS)) {
+                Value[] old = node.getProperty(P_GROUPS).getValues();
+                values = new Value[old.length + 1];
+                System.arraycopy(old, 0, values, 0, old.length);
+            } else {
+                values = new Value[1];
+            }
+            values[values.length - 1] = added;
+            userManager.setProtectedProperty(node, P_GROUPS, values);
+            return true;
+        } catch (RepositoryException e) {
+            // revert all pending changes and rethrow.
+            log.error("Error while editing group membership:", e.getMessage());
+            getSession().refresh(false);
+            throw e;
+        }
+    }
+
+    boolean removeFromGroup(GroupImpl group) throws RepositoryException {
+        NodeImpl node = getNode();
+        String message = "Authorizable " + getID() + " is not member of " + group.getID();
+        if (!node.hasProperty(P_GROUPS)) {
+            log.debug(message);
+            return false;
+        }
+
+        Value toRemove = getSession().getValueFactory().createValue(group.getNode());
+        PropertyImpl property = node.getProperty(P_GROUPS);
+        List valList = new ArrayList(Arrays.asList(property.getValues()));
+        if (valList.remove(toRemove)) {
+            try {
+                if (valList.isEmpty()) {
+                    userManager.removeProtectedItem(property, node);
+                } else {
+                    Value[] values = (Value[]) valList.toArray(new Value[valList.size()]);
+                    userManager.setProtectedProperty(node, P_GROUPS, values);
+                }
+                return true;
+            } catch (RepositoryException e) {
+                // modification failed -> revert all pending changes.
+                node.refresh(false);
+                throw e;
+            }
+        } else {
+            // nothing changed
+            log.debug(message);
+            return false;
+        }
+    }
+
+    private void collectMembership(List groups, boolean includedIndirect) throws RepositoryException {
+        NodeImpl node = getNode();
+        if (!node.hasProperty(P_GROUPS)) {
+            return;
+        }
+        Value[] refs = node.getProperty(P_GROUPS).getValues();
+        for (int i = 0; i < refs.length; i++) {
+            NodeImpl groupNode = (NodeImpl) getSession().getNodeByUUID(refs[i].getString());
+            Group group = GroupImpl.create(groupNode, userManager);
+            if (groups.add(group) && includedIndirect) {
+                ((AuthorizableImpl) group).collectMembership(groups, true);
+            }
+        }
+    }
+
-     * <li>rep:members</li>
+     * <li>rep:groups</li>
-                 || P_REFEREES.equals(pName) || P_MEMBERS.equals(pName)
+                 || P_REFEREES.equals(pName) || P_GROUPS.equals(pName)

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 UPD40 INS31 INS31 INS31 INS31 INS31 INS29 MOV83 INS43 INS42 INS43 INS8 MOV29 INS83 MOV43 MOV42 MOV43 INS8 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS42 INS60 INS21 INS41 INS60 INS21 INS41 INS25 INS43 INS42 INS42 INS54 INS43 INS42 INS42 INS60 INS60 INS25 INS60 MOV60 MOV60 INS25 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS60 INS24 INS68 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS32 INS27 INS8 INS42 INS8 INS12 INS42 MOV43 INS59 INS43 INS59 INS38 INS8 INS43 INS59 UPD43 UPD43 INS32 INS8 INS8 INS42 INS43 INS59 INS38 INS8 INS5 INS59 INS58 INS27 INS37 INS8 UPD66 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS38 INS32 INS53 INS60 INS60 INS60 INS25 INS21 INS21 INS41 INS44 INS8 INS42 INS32 INS42 INS42 INS27 INS32 INS21 INS41 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS54 INS21 INS41 INS42 INS42 INS32 INS32 INS41 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 MOV60 MOV60 MOV25 INS43 INS43 INS32 INS36 INS42 INS14 INS5 INS59 INS43 INS59 MOV43 INS59 INS32 INS8 INS8 INS7 INS32 INS9 INS43 INS42 INS21 INS21 INS53 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS32 INS9 INS32 INS42 INS32 UPD42 INS42 UPD43 INS32 INS8 INS12 INS32 INS9 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS34 INS43 INS27 UPD42 INS42 INS42 INS42 INS11 INS43 INS45 INS43 INS85 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS25 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS52 INS42 INS42 INS32 INS42 INS32 INS42 INS5 INS59 INS7 INS32 INS7 INS42 INS27 INS42 INS42 INS45 INS32 INS32 INS42 INS9 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS8 INS8 INS9 INS43 INS42 INS21 INS53 INS43 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS42 INS3 INS40 INS34 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS36 UPD42 UPD42 INS9 INS42 INS42 INS32 INS42 INS5 INS27 INS5 INS34 INS32 INS5 INS59 INS32 INS42 INS42 INS9 INS42 INS2 UPD42 MOV42 INS11 INS42 INS42 INS42 INS43 INS85 INS40 INS34 INS43 INS85 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS43 INS85 INS42 INS42 INS3 INS42 INS5 INS32 INS43 INS85 INS42 INS42 INS42 DEL32 DEL8 DEL61 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL32 DEL11 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42