Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.hierarchy.NodeEntry;
+import org.apache.jackrabbit.jcr2spi.hierarchy.PropertyEntry;
-import org.apache.jackrabbit.jcr2spi.state.entry.ChildNodeEntry;
-import org.apache.jackrabbit.jcr2spi.state.PropertyState;
-import javax.jcr.nodetype.NodeDefinition;
-import java.util.Collection;
-    private final NodeState vhState;
-    private final NodeState labelNodeState;
+    private final NodeEntry vhEntry;
+    private final NodeEntry labelNodeEntry;
-                              NodeState state, NodeDefinition definition,
-                              ItemLifeCycleListener[] listeners) throws VersionException {
-        super(itemMgr, session, state, definition, listeners);
-        this.vhState = state;
+                              NodeState state, ItemLifeCycleListener[] listeners)
+        throws VersionException {
+        super(itemMgr, session, state, listeners);
+        this.vhEntry = (NodeEntry) state.getHierarchyEntry();
-        if (state.hasChildNodeEntry(QName.JCR_VERSIONLABELS)) {
-            ChildNodeEntry lnEntry = state.getChildNodeEntry(QName.JCR_VERSIONLABELS, Path.INDEX_DEFAULT);
-            try {
-                labelNodeState = lnEntry.getNodeState();
-            } catch (ItemStateException e) {
-                throw new VersionException("nt:versionHistory requires a mandatory, autocreated child node jcr:versionLabels.");
-            }
+        if (vhEntry.hasNodeEntry(QName.JCR_VERSIONLABELS)) {
+            labelNodeEntry = vhEntry.getNodeEntry(QName.JCR_VERSIONLABELS, Path.INDEX_DEFAULT);
-        try {
-            if (vhState.hasChildNodeEntry(QName.JCR_ROOTVERSION)) {
-                NodeState vState = vhState.getChildNodeEntry(QName.JCR_ROOTVERSION, Path.INDEX_DEFAULT).getNodeState();
-                return (Version) itemMgr.getItem(vState);
-            } else {
-                String msg = "Unexpected error: VersionHistory state does not contain a root version child node entry.";
-                log.error(msg);
-                throw new RepositoryException(msg);
-            }
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
+        if (vhEntry.hasNodeEntry(QName.JCR_ROOTVERSION)) {
+            NodeEntry vEntry = vhEntry.getNodeEntry(QName.JCR_ROOTVERSION, Path.INDEX_DEFAULT);
+            return (Version) itemMgr.getItem(vEntry);
+        } else {
+            String msg = "Unexpected error: VersionHistory state does not contain a root version child node entry.";
+            log.error(msg);
+            throw new RepositoryException(msg);
-        Iterator childIter = vhState.getChildNodeEntries().iterator();
-        List versionStates = new ArrayList();
+        refreshEntry(vhEntry);
+        Iterator childIter = vhEntry.getNodeEntries();
+        List versionEntries = new ArrayList();
-            ChildNodeEntry entry = (ChildNodeEntry) childIter.next();
-            if (!QName.JCR_VERSIONLABELS.equals(entry.getName())) {
-                try {
-                    versionStates.add(entry.getNodeState());
-                } catch (ItemStateException e) {
-                    throw new RepositoryException(e);
-                }
+            NodeEntry entry = (NodeEntry) childIter.next();
+            if (!QName.JCR_VERSIONLABELS.equals(entry.getQName())) {
+                versionEntries.add(entry);
-        return new LazyItemIterator(itemMgr, versionStates);
+        return new LazyItemIterator(itemMgr, versionEntries.iterator());
-        return (Version) itemMgr.getItem(vState);
+        return (Version) itemMgr.getItem(vState.getHierarchyEntry());
-        return (Version) itemMgr.getItem(vState);
+        return (Version) itemMgr.getItem(vState.getHierarchyEntry());
-        session.getVersionManager().addVersionLabel(vhState, vState, qLabel, moveLabel);
+        session.getVersionManager().addVersionLabel((NodeState) getItemState(), vState, qLabel, moveLabel);
-        session.getVersionManager().removeVersionLabel(vhState, vState, qLabel);
+        session.getVersionManager().removeVersionLabel((NodeState) getItemState(), vState, qLabel);
-        session.getVersionManager().removeVersion(vhState, vState);
+        session.getVersionManager().removeVersion((NodeState) getItemState(), vState);
-            return vhState.getUniqueID().equals(other.vhState.getUniqueID());
+            return vhEntry.getUniqueID().equals(other.vhEntry.getUniqueID());
+    /**
+     * Always returns false
+     *
+     * @throws RepositoryException
+     * @see NodeImpl#isWritable()
+     */
+    protected boolean isWritable() throws RepositoryException {
+        super.isWritable();
+        return false;
+    }
-    private QName[] getQLabels() {
-        Collection labelQNames = labelNodeState.getPropertyNames();
+    private QName[] getQLabels() throws RepositoryException {
+        refreshEntry(labelNodeEntry);
+        List labelQNames = new ArrayList();
+        Iterator it = labelNodeEntry.getPropertyEntries();
+        while (it.hasNext()) {
+            PropertyEntry pe = (PropertyEntry) it.next();
+            if (QName.JCR_PRIMARYTYPE.equals(pe.getQName())) {
+                continue;
+            }
+            labelQNames.add(pe.getQName());
+        }
-            ChildNodeEntry vEntry = vhState.getChildNodeEntry(vQName, Path.INDEX_DEFAULT);
+            refreshEntry(vhEntry);
+            NodeEntry vEntry = vhEntry.getNodeEntry(vQName, Path.INDEX_DEFAULT);
-        if (labelNodeState.hasPropertyName(qLabel)) {
-            // retrieve reference property value -> and convert it to a NodeId
-            try {
-                PropertyState pState = labelNodeState.getPropertyState(qLabel);
-                Node version = ((Property) itemMgr.getItem(pState)).getNode();
-                return getVersionState(version.getName());
-            } catch (ItemStateException e) {
-                // should not occur. existance of property state has been checked
-                throw new RepositoryException(e);
-            }
+        refreshEntry(labelNodeEntry);
+        if (labelNodeEntry.hasPropertyEntry(qLabel)) {
+            // retrieve reference property value -> and retrieve referenced node
+            PropertyEntry pEntry = labelNodeEntry.getPropertyEntry(qLabel);
+            Node version = ((Property) itemMgr.getItem(pEntry)).getNode();
+            return getVersionState(version.getName());
+
+    private void refreshEntry(NodeEntry entry) throws RepositoryException {
+        // TODO: check again.. is this correct? or should NodeEntry be altered
+        try {
+            entry.getNodeState();
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        }
+    }

MOV26 MOV26 UPD40 UPD40 INS31 INS31 INS31 INS43 INS43 MOV83 MOV42 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 MOV8 INS29 INS83 INS39 INS42 INS43 INS8 INS43 INS83 INS39 INS42 INS44 INS43 MOV8 INS42 UPD42 INS42 UPD42 MOV46 MOV21 INS25 MOV21 INS21 MOV21 MOV21 MOV21 MOV60 MOV21 MOV60 INS65 INS65 INS65 UPD42 MOV42 INS21 INS41 INS42 INS21 INS60 INS61 INS21 INS43 INS42 INS42 MOV32 INS8 MOV8 INS32 INS66 INS42 INS68 INS48 INS9 INS32 INS43 INS59 UPD43 INS32 INS8 INS32 INS8 INS42 INS11 UPD42 UPD42 INS21 UPD42 UPD42 INS42 INS42 INS32 UPD42 INS32 MOV43 MOV43 MOV32 INS11 MOV32 INS11 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 UPD42 INS42 INS42 INS60 INS25 INS21 INS21 INS42 INS42 UPD42 UPD42 MOV60 MOV60 MOV41 UPD42 INS43 INS32 INS7 INS43 UPD42 MOV42 UPD42 MOV42 UPD43 INS8 INS42 INS42 INS32 INS32 MOV43 INS32 MOV43 INS32 MOV43 INS32 INS43 UPD42 UPD42 INS43 INS59 INS32 INS8 INS32 INS32 UPD43 UPD43 MOV32 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS32 UPD42 INS21 MOV42 INS42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS11 INS40 INS42 INS32 INS18 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV40 MOV40 UPD42 MOV42 UPD42 MOV42 MOV40 MOV40 UPD42 UPD43 INS32 UPD42 UPD40 INS43 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL32 DEL42 DEL32 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32