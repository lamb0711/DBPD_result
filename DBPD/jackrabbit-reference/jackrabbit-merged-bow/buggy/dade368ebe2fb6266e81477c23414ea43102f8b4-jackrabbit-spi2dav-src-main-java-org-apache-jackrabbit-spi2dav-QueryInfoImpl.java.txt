JCR-2076: JSR 283: QOM and SQL2
- change return type of QueryInfo.getColumnNames() from Name[] to String[]
- jcr2spi, spi2dav, spi2jcr implementation (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@789269 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.Map;
+import java.util.ArrayList;
+import java.util.List;
-import javax.jcr.Value;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-import org.apache.jackrabbit.spi.NodeId;
-import org.apache.jackrabbit.spi.SessionInfo;
-import org.apache.jackrabbit.spi.QValue;
-import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.IdFactory;
-import org.apache.jackrabbit.webdav.DavServletResponse;
-import org.apache.jackrabbit.webdav.jcr.search.SearchResultProperty;
-import org.apache.jackrabbit.webdav.property.DavProperty;
-import org.apache.jackrabbit.webdav.property.DavPropertySet;
-import org.apache.jackrabbit.spi.commons.value.ValueFormat;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
+import org.apache.jackrabbit.commons.iterator.RangeIteratorAdapter;
-    private static final double UNDEFINED_SCORE = -1;
+    private final String[] columnNames;
-    private final Name[] columnNames;
-    private int scoreIndex = -1;
-    private final Map results = new LinkedHashMap();
+    private final List<QueryResultRow> results = new ArrayList<QueryResultRow>();
-    public QueryInfoImpl(MultiStatus ms, SessionInfo sessionInfo, URIResolver uriResolver,
+    public QueryInfoImpl(MultiStatus ms, IdFactory idFactory,
-            this.columnNames = new Name[cn.length];
+            this.columnNames = new String[cn.length];
-                String jcrColumnNames = ISO9075.decode(cn[i]);
-                try {
-                    columnNames[i] = resolver.getQName(jcrColumnNames);
-                    if (NameConstants.JCR_SCORE.equals(columnNames[i])) {
-                        scoreIndex = i;
-                    }
-                } catch (NameException e) {
-                    throw new RepositoryException(e);
-                }
+                columnNames[i] = ISO9075.decode(cn[i]);
-        MultiStatusResponse[] responses = ms.getResponses();
-        for (int i = 0; i < responses.length; i++) {
-            MultiStatusResponse response = responses[i];
-            String href = response.getHref();
-            DavPropertySet okSet = response.getProperties(DavServletResponse.SC_OK);
-
-            DavProperty davProp = okSet.get(SearchResultProperty.SEARCH_RESULT_PROPERTY);
-            SearchResultProperty resultProp = new SearchResultProperty(davProp, valueFactory);
-            Value[] values = resultProp.getValues();
-            QValue[] qValues = new QValue[values.length];
-            for (int j = 0; j < values.length; j++) {
-                try {
-                    qValues[j] = (values[j] == null) ?  null : ValueFormat.getQValue(values[j], resolver, qValueFactory);
-                } catch (RepositoryException e) {
-                    // should not occur
-                    log.error("Malformed value: " + values[j].toString());
-                }
-            }
-
-            NodeId nodeId = uriResolver.getNodeId(href, sessionInfo);
-            results.put(nodeId, qValues);
+        for (MultiStatusResponse response : ms.getResponses()) {
+            results.add(new QueryResultRowImpl(response, columnNames, resolver,
+                    qValueFactory, valueFactory, idFactory));
-        return new QueryResultRowIterator();
+        return new RangeIteratorAdapter(results);
-    public Name[] getColumnNames() {
-        return columnNames;
-    }
-
-    //--------------------------------------------------------< inner class >---
-    /**
-     * Inner class implementing the <code>RangeIterator</code> for the query
-     * result rows. 
-     */
-    private class QueryResultRowIterator implements RangeIterator {
-
-        private final Iterator keyIterator;
-        private long pos = 0;
-
-        private QueryResultRowIterator() {
-            keyIterator = results.keySet().iterator();
-        }
-
-        private QueryResultRow nextQueryResultRow() {
-            final NodeId nId = (NodeId) keyIterator.next();
-            final QValue[] qValues = (QValue[]) results.get(nId);
-            pos++;
-
-            return new QueryResultRow() {
-                /**
-                 * @see QueryResultRow#getNodeId()
-                 */
-                public NodeId getNodeId() {
-                    return nId;
-                }
-
-                /**
-                 * @see QueryResultRow#getScore()
-                 */
-                public double getScore() {
-                    if (scoreIndex != -1 && qValues[scoreIndex] != null) {
-                        try {
-                            return Double.parseDouble(qValues[scoreIndex].getString());
-                        } catch (RepositoryException e) {
-                            log.error("Error while building query score", e);
-                        }   return UNDEFINED_SCORE;
-                    } else {
-                        log.error("Cannot determined jcr:score from query results.");
-                        return UNDEFINED_SCORE;
-                    }
-                }
-
-                /**
-                 * @see QueryResultRow#getValues()
-                 */
-                public QValue[] getValues() {
-                    return qValues;
-                }
-            };
-        }
-
-        //--------------------------------------------------< RangeIterator >---
-        /**
-         * @see RangeIterator#skip(long)
-         */
-        public void skip(long skipNum) {
-            while (skipNum-- > 0) {
-                nextQueryResultRow();
-            }
-        }
-
-        /**
-         * @see RangeIterator#getSize()
-         */
-        public long getSize() {
-            return results.size();
-        }
-
-        /**
-         * @see RangeIterator#getPosition()
-         */
-        public long getPosition() {
-            return pos;
-        }
-
-        //-------------------------------------------------------< Iterator >---
-        /**
-         * @see Iterator#remove()
-         */
-        public void remove() {
-            throw new UnsupportedOperationException("Remove not implemented");
-        }
-
-        /**
-         * @see Iterator#hasNext()
-         */
-        public boolean hasNext() {
-            return keyIterator.hasNext();
-        }
-
-        /**
-         * @see Iterator#next()
-         */
-        public Object next() {
-            return nextQueryResultRow();
-        }
+    public String[] getColumnNames() {
+        String[] names = new String[columnNames.length];
+        System.arraycopy(columnNames, 0, names, 0, columnNames.length);
+        return names;

MOV26 UPD40 UPD40 UPD40 UPD40 INS31 UPD5 INS74 MOV29 MOV83 UPD5 MOV5 MOV42 INS8 UPD43 INS43 MOV43 UPD43 UPD42 INS70 MOV43 MOV60 INS21 MOV41 UPD42 UPD42 MOV42 INS74 UPD42 INS44 MOV32 INS8 UPD5 INS32 UPD42 INS43 MOV43 MOV43 INS42 INS21 UPD43 INS42 UPD43 UPD42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS40 UPD42 MOV42 INS8 INS32 UPD42 UPD42 INS5 INS40 MOV21 INS42 INS42 INS14 MOV43 MOV85 UPD5 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 MOV2 MOV32 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL43 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL42 DEL2 DEL32 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL33 DEL27 DEL36 DEL33 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL16 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL2 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL83 DEL42 DEL43 DEL5 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL37 DEL21 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL2 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL37 DEL34 DEL27 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55