Removing superfluous AbstractVersion and AbstractVersionHistory


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@424021 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.NoPrefixDeclaredException;
+import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.UnknownPrefixException;
+import org.apache.jackrabbit.name.NameFormat;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import javax.jcr.Item;
+import javax.jcr.RepositoryException;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.NodeIterator;
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.version.Version;
+import javax.jcr.version.VersionException;
+import javax.jcr.version.VersionHistory;
+import javax.jcr.version.VersionIterator;
- * This Class implements a version history that extends a node.
+ * Base implementation of the {@link javax.jcr.version.VersionHistory} interface.
-public class VersionHistoryImpl extends AbstractVersionHistory {
+public class VersionHistoryImpl extends NodeImpl implements VersionHistory {
-     * creates a new version history node.
-     *
-     * @param itemMgr
-     * @param session
-     * @param id
-     * @param state
-     * @param definition
-     * @param listeners
-     * @param history
+     * Logger instance.
+     */
+    private static Logger log = LoggerFactory.getLogger(VersionHistoryImpl.class);
+
+    /**
+     * Create a new instance of this class.
+     * @param itemMgr item manager
+     * @param session session
+     * @param id node id
+     * @param state node state
+     * @param definition node definition
+     * @param listeners life cycle listeners
-                              ItemLifeCycleListener[] listeners,
-                              InternalVersionHistory history) {
+                              ItemLifeCycleListener[] listeners) {
+    /**
+     * Returns the internal version history. Subclass responsibility.
+     *
+     * @return internal version history
+     * @throws RepositoryException if the internal version history is not available
+     */
+    protected InternalVersionHistory getInternalVersionHistory()
+            throws RepositoryException {
+        InternalVersionHistory history =
+                session.getVersionManager().getVersionHistory((NodeId) id);
+        if (history == null) {
+            throw new InvalidItemStateException(id + ": the item does not exist anymore");
+        }
+        return history;
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#getRootVersion()
+     */
+    public Version getRootVersion() throws RepositoryException {
+        return (Version) session.getNodeById(
+                getInternalVersionHistory().getRootVersion().getId());
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#getAllVersions()
+     */
+    public VersionIterator getAllVersions() throws RepositoryException {
+        return new VersionIteratorImpl(session,
+                getInternalVersionHistory().getRootVersion());
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#getVersion(String)
+     */
+    public Version getVersion(String versionName)
+            throws VersionException, RepositoryException {
+        try {
+            QName name = NameFormat.parse(versionName, session.getNamespaceResolver());
+            InternalVersion v = getInternalVersionHistory().getVersion(name);
+            if (v == null) {
+                throw new VersionException("No version with name '" + versionName + "' exists in this version history.");
+            }
+            return (Version) session.getNodeById(v.getId());
+        } catch (IllegalNameException e) {
+            throw new VersionException(e);
+        } catch (UnknownPrefixException e) {
+            throw new VersionException(e);
+        }
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#getVersionByLabel(String)
+     */
+    public Version getVersionByLabel(String label) throws RepositoryException {
+        try {
+            QName qLabel = NameFormat.parse(label, session.getNamespaceResolver());
+            InternalVersion v = getInternalVersionHistory().getVersionByLabel(qLabel);
+            if (v == null) {
+                throw new VersionException("No version with label '" + label + "' exists in this version history.");
+            }
+            return (Version) session.getNodeById(v.getId());
+        } catch (IllegalNameException e) {
+            throw new VersionException(e);
+        } catch (UnknownPrefixException e) {
+            throw new VersionException(e);
+        }
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#addVersionLabel(String, String, boolean)
+     */
+    public void addVersionLabel(String versionName, String label, boolean move)
+            throws VersionException, RepositoryException {
+        try {
+            session.getVersionManager().setVersionLabel(this,
+                    NameFormat.parse(versionName, session.getNamespaceResolver()),
+                    NameFormat.parse(label, session.getNamespaceResolver()),
+                    move);
+        } catch (IllegalNameException e) {
+            throw new VersionException(e);
+        } catch (UnknownPrefixException e) {
+            throw new VersionException(e);
+        }
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#removeVersionLabel(String)
+     */
+    public void removeVersionLabel(String label) throws RepositoryException {
+        try {
+            Version existing = session.getVersionManager().setVersionLabel(this,
+                    null,
+                    NameFormat.parse(label, session.getNamespaceResolver()),
+                    true);
+            if (existing == null) {
+                throw new VersionException("No version with label '" + label + "' exists in this version history.");
+            }
+        } catch (IllegalNameException e) {
+            throw new VersionException(e);
+        } catch (UnknownPrefixException e) {
+            throw new VersionException(e);
+        }
+    }
+
+
+    /**
+     * @see javax.jcr.version.VersionHistory#getVersionLabels
+     */
+    public String[] getVersionLabels() throws RepositoryException {
+        try {
+            QName[] labels = getInternalVersionHistory().getVersionLabels();
+            String[] ret = new String[labels.length];
+            for (int i = 0; i < labels.length; i++) {
+                ret[i] = NameFormat.format(labels[i], session.getNamespaceResolver());
+            }
+            return ret;
+        } catch (NoPrefixDeclaredException e) {
+            throw new IllegalArgumentException("Unable to resolve label name: " + e.toString());
+        }
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#getVersionLabels(javax.jcr.version.Version)
+     */
+    public String[] getVersionLabels(Version version)
+            throws VersionException, RepositoryException {
+        checkOwnVersion(version);
+        try {
+            QName[] labels = ((VersionImpl) version).getInternalVersion().getLabels();
+            String[] ret = new String[labels.length];
+            for (int i = 0; i < labels.length; i++) {
+                ret[i] = NameFormat.format(labels[i], session.getNamespaceResolver());
+            }
+            return ret;
+        } catch (NoPrefixDeclaredException e) {
+            throw new IllegalArgumentException("Unable to resolve label name: " + e.toString());
+        }
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#hasVersionLabel(String)
+     */
+    public boolean hasVersionLabel(String label) throws RepositoryException {
+        try {
+            QName qLabel = NameFormat.parse(label, session.getNamespaceResolver());
+            return getInternalVersionHistory().getVersionByLabel(qLabel) != null;
+        } catch (IllegalNameException e) {
+            throw new IllegalArgumentException("Unable to resolve label: " + e);
+        } catch (UnknownPrefixException e) {
+            throw new IllegalArgumentException("Unable to resolve label: " + e);
+        }
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#hasVersionLabel(javax.jcr.version.Version, String)
+     */
+    public boolean hasVersionLabel(Version version, String label)
+            throws VersionException, RepositoryException {
+        checkOwnVersion(version);
+        try {
+            QName qLabel = NameFormat.parse(label, session.getNamespaceResolver());
+            return ((VersionImpl) version).getInternalVersion().hasLabel(qLabel);
+        } catch (IllegalNameException e) {
+            throw new VersionException(e);
+        } catch (UnknownPrefixException e) {
+            throw new VersionException(e);
+        }
+    }
+
+    /**
+     * @see javax.jcr.version.VersionHistory#removeVersion(String)
+     */
+    public void removeVersion(String versionName)
+            throws UnsupportedRepositoryOperationException, VersionException,
+            RepositoryException {
+        try {
+            session.getVersionManager().removeVersion(this,
+                    NameFormat.parse(versionName, session.getNamespaceResolver()));
+        } catch (IllegalNameException e) {
+            throw new RepositoryException(e);
+        } catch (UnknownPrefixException e) {
+            throw new RepositoryException(e);
+        }
+    }
+
+    /**
+     * @see javax.jcr.Item#isSame(javax.jcr.Item)
+     */
+    public boolean isSame(Item otherItem) {
+        if (otherItem instanceof VersionHistoryImpl) {
+            // since all version histories live in the same workspace, we can compare the uuids
+            try {
+                InternalVersionHistory other = ((VersionHistoryImpl) otherItem).getInternalVersionHistory();
+                return other.getId().equals(getInternalVersionHistory().getId());
+            } catch (RepositoryException e) {
+                log.warn("Unable to retrieve internal version history objects: " + e.getMessage());
+                log.debug("Stack dump:", e);
+            }
+        }
+        return false;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public String getVersionableUUID() throws RepositoryException {
+        return getInternalVersionHistory().getVersionableUUID().toString();
+    }
+
+    /**
+     * Checks if the given version belongs to this history
+     *
+     * @param version
+     * @throws javax.jcr.version.VersionException
+     * @throws javax.jcr.RepositoryException
+     */
+    private void checkOwnVersion(Version version)
+            throws VersionException, RepositoryException {
+        if (!version.getParent().isSame(this)) {
+            throw new VersionException("Specified version not contained in this history.");
+        }
+    }
+
+    //--------------------------------------< Overwrite "protected" methods >---
+
+    /**
+     * Always throws a {@link javax.jcr.nodetype.ConstraintViolationException} since this node
+     * is protected.
+     *
+     * @throws javax.jcr.nodetype.ConstraintViolationException
+     */
+    public void update(String srcWorkspaceName) throws ConstraintViolationException {
+        String msg = "update operation not allowed on a version history node: " + safeGetJCRPath();
+        log.debug(msg);
+        throw new ConstraintViolationException(msg);
+    }
+
+    /**
+     * Always throws a {@link javax.jcr.nodetype.ConstraintViolationException} since this node
+     * is protected.
+     *
+     * @throws javax.jcr.nodetype.ConstraintViolationException
+     */
+    public NodeIterator merge(String srcWorkspace, boolean bestEffort)
+            throws ConstraintViolationException {
+        String msg = "merge operation not allowed on a version history node: " + safeGetJCRPath();
+        log.debug(msg);
+        throw new ConstraintViolationException(msg);
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 UPD43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 UPD42 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 UPD66 INS65 INS66 INS65 INS42 INS42 INS32 INS65 INS65 INS65 INS42 INS42 INS60 INS25 INS41 INS65 INS42 INS42 INS41 INS65 INS42 INS42 INS41 INS65 INS42 INS43 INS42 INS42 INS42 INS54 INS65 INS42 INS43 INS42 INS42 INS54 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS54 INS65 INS43 INS42 INS42 INS54 INS65 INS43 INS85 INS42 INS54 INS65 INS43 INS85 INS43 INS42 INS42 INS42 INS21 INS54 INS65 INS43 INS42 INS42 INS54 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS54 INS65 INS43 INS42 INS42 INS42 INS42 INS54 INS65 INS43 INS42 INS25 INS41 INS65 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS42 INS25 INS65 INS65 INS43 INS42 INS42 INS60 INS21 INS53 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS53 INS40 INS66 INS42 INS42 INS57 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 MOV43 INS59 INS27 INS8 INS42 INS68 INS11 INS68 INS14 INS68 INS42 INS8 INS12 INS12 INS68 INS42 INS8 INS12 INS12 INS68 INS42 INS42 INS8 INS12 INS12 INS68 INS42 INS8 INS12 INS12 INS67 INS42 INS8 INS12 INS68 INS42 INS42 INS32 INS8 INS12 INS68 INS42 INS8 INS12 INS12 INS68 INS42 INS42 INS32 INS8 INS12 INS12 INS68 INS42 INS8 INS12 INS12 INS68 INS42 INS62 INS8 INS9 INS65 INS32 INS66 INS42 INS40 INS40 INS42 INS38 INS8 INS66 INS65 INS66 INS66 INS40 INS42 INS43 INS59 INS32 INS14 INS66 INS65 INS66 INS66 INS40 INS42 INS43 INS59 INS32 INS14 INS43 INS42 INS32 INS42 INS33 INS53 INS40 INS42 INS43 INS32 INS40 INS42 INS43 INS42 INS32 INS40 INS42 INS69 INS60 INS60 INS25 INS41 INS44 INS8 INS44 INS8 INS40 INS42 INS69 INS60 INS60 INS25 INS41 INS44 INS8 INS44 INS8 INS40 INS42 INS69 INS69 INS69 INS21 INS44 INS8 INS44 INS8 INS40 INS42 INS69 INS60 INS25 INS44 INS8 INS44 INS8 INS40 INS42 INS60 INS60 INS24 INS41 INS44 INS8 INS40 INS42 INS69 INS42 INS42 INS60 INS60 INS24 INS41 INS44 INS8 INS40 INS42 INS69 INS60 INS41 INS44 INS8 INS44 INS8 INS40 INS42 INS69 INS69 INS42 INS42 INS60 INS41 INS44 INS8 INS44 INS8 INS40 INS42 INS69 INS21 INS44 INS8 INS44 INS8 INS40 INS42 INS69 INS42 INS43 INS54 INS32 INS42 INS32 INS53 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS11 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS43 INS59 INS43 INS59 INS27 INS8 INS11 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS43 INS59 INS43 INS59 INS27 INS8 INS11 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS43 INS39 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS43 INS59 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS42 INS53 INS43 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS42 INS53 INS43 INS43 INS59 INS27 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS43 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS8 INS12 INS32 INS42 INS32 INS42 INS52 INS14 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS43 INS42 INS43 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS43 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS43 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS52 INS32 INS32 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS14 INS42 INS14 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS14 INS40 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS14 INS42 INS42 INS42 INS32 INS32 INS33 INS42 INS14 INS42 INS14 INS40 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS32 INS42 INS52 INS32 INS42 INS14 INS42 INS14 INS40 INS60 INS41 INS44 INS8 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS32 INS42 INS52 INS33 INS32 INS9 INS14 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS43 INS27 INS42 INS32 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS43 INS27 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS32 INS36 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS43 INS59 INS32 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS43 INS85 INS2 INS32 INS42 INS45 INS32 INS36 INS42 INS43 INS85 INS2 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS2 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS2 INS32 INS42 INS42 INS43 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS45 INS32 INS42 INS43 INS42 INS42 INS42 INS42 DEL42 DEL65 DEL42 DEL44