JCR-1775: Transaction-safe versioning

Streamline handling of node references.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@708929 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+
+        /**
+         * Updates the target node references collections based on the
+         * modifications in the change log (i.e. added/removed/modified
+         * <code>REFERENCE</code> properties).
+         * <p>
+         * <b>Important node:</b> For consistency reasons this method must
+         * only be called <i>once</i> per change log and the change log
+         * should not be modified anymore afterwards.
+         *
+         * @param changes change log
+         * @param virtualProvider virtual provider that may already contain a
+         *                        node references object
+         * @throws ItemStateException if an error occurs
+         */
+        private void updateReferences(
+                ChangeLog changes, VirtualItemStateProvider virtualProvider)
+                throws ItemStateException {
+            Iterator iterator;
+
+            // process added REFERENCE properties
+            iterator = getReferenceProperties(changes.addedStates());
+            while (iterator.hasNext()) {
+                PropertyState prop = (PropertyState) iterator.next();
+                // add the new 'reference'
+                InternalValue[] vals = prop.getValues();
+                for (int i = 0; vals != null && i < vals.length; i++) {
+                    NodeReferencesId refsId = new NodeReferencesId(
+                            vals[i].getUUID());
+                    if (virtualProvider != null
+                            && virtualProvider.hasNodeReferences(refsId)) {
+                        continue;
+                    }
+                    NodeReferences refs =
+                        getOrCreateNodeReferences(refsId, changes);
+                    // add reference
+                    refs.addReference(prop.getPropertyId());
+                    // update change log
+                    changes.modified(refs);
+                }
+            }
+
+            // process modified REFERENCE properties
+            iterator = getProperties(changes.modifiedStates());
+            while (iterator.hasNext()) {
+                PropertyState newProp = (PropertyState) iterator.next();
+                PropertyState oldProp =
+                    (PropertyState) getItemState(newProp.getId());
+
+                // check old type
+                if (oldProp.getType() == PropertyType.REFERENCE) {
+                    // this is a modified REFERENCE property:
+                    // remove the old 'reference' from the target
+                    InternalValue[] vals = oldProp.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        NodeReferencesId refsId = new NodeReferencesId(
+                                vals[i].getUUID());
+                        if (virtualProvider != null
+                                && virtualProvider.hasNodeReferences(refsId)) {
+                            continue;
+                        }
+                        // either get node references from change log or load from
+                        // persistence manager
+                        NodeReferences refs = changes.get(refsId);
+                        if (refs == null) {
+                            refs = getNodeReferences(refsId);
+                        }
+                        // remove reference
+                        refs.removeReference(oldProp.getPropertyId());
+                        // update change log
+                        changes.modified(refs);
+                    }
+                }
+
+                // check new type
+                if (newProp.getType() == PropertyType.REFERENCE) {
+                    // this is a modified REFERENCE property:
+                    // add the new 'reference' to the target
+                    InternalValue[] vals = newProp.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        NodeReferencesId refsId = new NodeReferencesId(
+                                vals[i].getUUID());
+                        if (virtualProvider != null
+                                && virtualProvider.hasNodeReferences(refsId)) {
+                            continue;
+                        }
+                        NodeReferences refs =
+                            getOrCreateNodeReferences(refsId, changes);
+                        // add reference
+                        refs.addReference(newProp.getPropertyId());
+                        // update change log
+                        changes.modified(refs);
+                    }
+                }
+            }
+
+            // process removed REFERENCE properties
+            iterator = getReferenceProperties(changes.deletedStates());
+            while (iterator.hasNext()) {
+                PropertyState prop = (PropertyState) iterator.next();
+                if (prop.getType() == PropertyType.REFERENCE) {
+                    // this is a removed REFERENCE property:
+                    // remove the 'reference' from the target
+                    InternalValue[] vals = prop.getValues();
+                    for (int i = 0; vals != null && i < vals.length; i++) {
+                        NodeReferencesId refsId = new NodeReferencesId(
+                                vals[i].getUUID());
+                        if (virtualProvider != null
+                                && virtualProvider.hasNodeReferences(refsId)) {
+                            continue;
+                        }
+                        // either get node references from change log or
+                        // load from persistence manager
+                        NodeReferences refs = changes.get(refsId);
+                        if (refs == null) {
+                            refs = getNodeReferences(refsId);
+                        }
+                        // remove reference
+                        refs.removeReference(prop.getPropertyId());
+                        // update change log
+                        changes.modified(refs);
+                    }
+                }
+            }
+        }
+
+        /**
+         * Returns a node references object using the following rules:
+         * <ol>
+         * <li>return a modified instance from the change log (if one exists)</li>
+         * <li>return an existing instance from <i>this</i> item state manager
+         * (if one exists)</li>
+         * <li>create and return a new instance</li>
+         * </ol>
+         *
+         * @param id  node references id
+         * @param changes change log
+         * @return a node references object
+         * @throws ItemStateException if an error occurs
+         */
+        private NodeReferences getOrCreateNodeReferences(
+                NodeReferencesId id, ChangeLog changes)
+                throws ItemStateException {
+            // check change log
+            NodeReferences refs = changes.get(id);
+            if (refs != null) {
+                return refs;
+            } else  if (hasNodeReferences(id)) {
+                return getNodeReferences(id);
+            } else {
+                return new NodeReferences(id);
+            }
+        }
+
+        private Iterator getProperties(Iterator states) {
+            ArrayList properties = new ArrayList();
+            while (states.hasNext()) {
+                ItemState state = (ItemState) states.next();
+                if (!state.isNode()) {
+                    properties.add(state);
+                }
+            }
+            return properties.iterator();
+        }
+
+        private Iterator getReferenceProperties(Iterator states) {
+            ArrayList properties = new ArrayList();
+            while (states.hasNext()) {
+                ItemState state = (ItemState) states.next();
+                if (!state.isNode()) {
+                    PropertyState property = (PropertyState) state;
+                    if (property.getType() == PropertyType.REFERENCE) {
+                        properties.add(property);
+                    }
+                }
+            }
+            return properties.iterator();
+        }
+
-     * Updates the target node references collections based on the modifications
-     * in the change log (i.e. added/removed/modified <code>REFERENCE</code>
-     * properties).
-     * <p/>
-     * <b>Important node:</b> For consistency reasons this method must only be
-     * called <i>once</i> per change log and the change log should not be modified
-     * anymore afterwards.
-     *
-     * @param changes change log
-     * @param virtualProvider virtual provider that may already contain a
-     *                        node references object
-     * @throws ItemStateException if an error occurs
-     */
-    protected void updateReferences(ChangeLog changes,
-                                    VirtualItemStateProvider virtualProvider)
-            throws ItemStateException {
-
-        // process added REFERENCE properties
-        for (Iterator iter = changes.addedStates(); iter.hasNext();) {
-            ItemState state = (ItemState) iter.next();
-            if (!state.isNode()) {
-                PropertyState prop = (PropertyState) state;
-                if (prop.getType() == PropertyType.REFERENCE) {
-                    // this is a new REFERENCE property:
-                    // add the new 'reference'
-                    InternalValue[] vals = prop.getValues();
-                    for (int i = 0; vals != null && i < vals.length; i++) {
-                        NodeReferencesId refsId = new NodeReferencesId(
-                                vals[i].getUUID());
-                        if (virtualProvider != null
-                                && virtualProvider.hasNodeReferences(refsId)) {
-                            continue;
-                        }
-                        NodeReferences refs =
-                                getOrCreateNodeReferences(refsId, changes);
-                        // add reference
-                        refs.addReference(prop.getPropertyId());
-                        // update change log
-                        changes.modified(refs);
-                    }
-                }
-            }
-        }
-
-        // process modified REFERENCE properties
-        for (Iterator iter = changes.modifiedStates(); iter.hasNext();) {
-            ItemState state = (ItemState) iter.next();
-            if (!state.isNode()) {
-                PropertyState newProp = (PropertyState) state;
-                PropertyState oldProp =
-                        (PropertyState) getItemState(state.getId());
-                // check old type
-                if (oldProp.getType() == PropertyType.REFERENCE) {
-                    // this is a modified REFERENCE property:
-                    // remove the old 'reference' from the target
-                    InternalValue[] vals = oldProp.getValues();
-                    for (int i = 0; vals != null && i < vals.length; i++) {
-                        NodeReferencesId refsId = new NodeReferencesId(
-                                vals[i].getUUID());
-                        if (virtualProvider != null
-                                && virtualProvider.hasNodeReferences(refsId)) {
-                            continue;
-                        }
-                        // either get node references from change log or load from
-                        // persistence manager
-                        NodeReferences refs = changes.get(refsId);
-                        if (refs == null) {
-                            refs = getNodeReferences(refsId);
-                        }
-                        // remove reference
-                        refs.removeReference(oldProp.getPropertyId());
-                        // update change log
-                        changes.modified(refs);
-                    }
-                }
-                // check new type
-                if (newProp.getType() == PropertyType.REFERENCE) {
-                    // this is a modified REFERENCE property:
-                    // add the new 'reference' to the target
-                    InternalValue[] vals = newProp.getValues();
-                    for (int i = 0; vals != null && i < vals.length; i++) {
-                        NodeReferencesId refsId = new NodeReferencesId(
-                                vals[i].getUUID());
-                        if (virtualProvider != null
-                                && virtualProvider.hasNodeReferences(refsId)) {
-                            continue;
-                        }
-                        NodeReferences refs =
-                                getOrCreateNodeReferences(refsId, changes);
-                        // add reference
-                        refs.addReference(newProp.getPropertyId());
-                        // update change log
-                        changes.modified(refs);
-                    }
-                }
-            }
-        }
-
-        // process removed REFERENCE properties
-        for (Iterator iter = changes.deletedStates(); iter.hasNext();) {
-            ItemState state = (ItemState) iter.next();
-            if (!state.isNode()) {
-                PropertyState prop = (PropertyState) state;
-                if (prop.getType() == PropertyType.REFERENCE) {
-                    // this is a removed REFERENCE property:
-                    // remove the 'reference' from the target
-                    InternalValue[] vals = prop.getValues();
-                    for (int i = 0; vals != null && i < vals.length; i++) {
-                        NodeReferencesId refsId = new NodeReferencesId(
-                                vals[i].getUUID());
-                        if (virtualProvider != null
-                                && virtualProvider.hasNodeReferences(refsId)) {
-                            continue;
-                        }
-                        // either get node references from change log or
-                        // load from persistence manager
-                        NodeReferences refs = changes.get(refsId);
-                        if (refs == null) {
-                            refs = getNodeReferences(refsId);
-                        }
-                        // remove reference
-                        refs.removeReference(prop.getPropertyId());
-                        // update change log
-                        changes.modified(refs);
-                    }
-                }
-            }
-        }
-    }
-
-    /**
-     * Returns a node references object using the following rules:<p/>
-     * <ul>
-     * <li>1. return a modified instance from the change log (if one exists)</li>
-     * <li>2. return an existing instance from <i>this</i> item state manager
-     * (if one exists)</li>
-     * <li>3. create and return a new instance</li>
-     * </ul>
-     *
-     * @param refsId  node references id
-     * @param changes change log
-     * @return a node references object
-     * @throws ItemStateException if an error occurs
-     */
-    private NodeReferences getOrCreateNodeReferences(NodeReferencesId refsId,
-                                                     ChangeLog changes)
-            throws ItemStateException {
-        // check change log
-        NodeReferences refs = changes.get(refsId);
-        if (refs == null) {
-            // not yet in change log:
-            // either load existing or create new
-            if (hasNodeReferences(refsId)) {
-                refs = getNodeReferences(refsId);
-            } else {
-                refs = new NodeReferences(refsId);
-            }
-        }
-        return refs;
-    }
-
-    /**

INS26 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 INS29 INS83 MOV43 INS42 INS44 MOV44 MOV43 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS65 MOV65 MOV65 MOV65 INS60 INS21 INS61 INS21 INS61 INS21 INS61 INS65 INS65 MOV65 MOV65 MOV65 MOV43 INS42 INS60 INS25 INS42 MOV43 INS42 INS60 INS61 INS41 INS42 MOV43 INS42 INS60 INS61 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 MOV43 INS59 INS7 INS32 INS8 INS7 INS32 INS8 INS7 INS32 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 MOV43 INS59 INS27 INS8 INS25 INS43 INS59 INS32 INS8 INS32 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS60 MOV60 MOV24 INS42 INS32 INS42 INS42 INS60 INS60 MOV25 MOV25 INS42 INS32 INS42 INS42 INS60 MOV25 INS42 INS32 INS42 INS33 MOV41 INS32 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS60 INS25 INS42 INS42 INS42 MOV32 INS43 INS59 INS42 MOV32 INS43 INS59 MOV43 INS59 INS42 MOV32 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 INS41 INS41 INS43 MOV43 INS59 MOV38 INS8 INS43 MOV43 INS59 MOV38 INS8 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS11 INS42 INS11 INS32 INS14 INS42 INS42 INS11 INS21 INS42 INS42 INS11 INS60 INS25 INS43 INS32 INS43 INS32 MOV43 INS32 MOV43 INS32 INS42 INS42 MOV43 INS42 MOV43 INS32 INS32 MOV43 INS32 MOV43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV11 INS32 INS40 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL8 DEL25 DEL8 DEL24 DEL42 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31