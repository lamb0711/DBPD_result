[JCR-127] Speedup Startup
          Removing one layer in versioning, thus mapping virtual items
          directly from the peristence layer.


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@191172 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.ItemId;
+import org.apache.jackrabbit.core.value.InternalValue;
+import org.apache.jackrabbit.core.util.uuid.UUID;
+import org.apache.jackrabbit.core.virtual.VirtualItemStateProvider;
+import org.apache.jackrabbit.core.virtual.VirtualPropertyState;
+import org.apache.jackrabbit.core.virtual.VirtualNodeState;
-import org.apache.jackrabbit.core.virtual.VirtualItemStateProvider;
+import org.apache.jackrabbit.core.state.PersistenceManager;
+import org.apache.jackrabbit.core.state.SharedItemStateManager;
+import org.apache.jackrabbit.core.state.LocalItemStateManager;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.NodeReferences;
+import org.apache.jackrabbit.core.state.NodeReferencesId;
+import org.apache.jackrabbit.core.state.ChangeLog;
+import org.apache.jackrabbit.core.state.ItemState;
+import org.apache.jackrabbit.core.state.NoSuchItemStateException;
+import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.commons.collections.map.ReferenceMap;
+import javax.jcr.Value;
+import java.util.Collections;
- * This Class implements a VersionManager. It more or less acts as proxy
- * between the virtual item state manager that exposes the version to the
- * version storage ({@link VersionItemStateProvider}) and the persistent
- * version manager.
+ * This Class implements a VersionManager.
-public class VersionManagerImpl implements VersionManager, Constants {
+public class VersionManagerImpl implements VersionManager,
+        VirtualItemStateProvider, Constants {
-     * The root parent node UUID for the version storage
+     * The persistence manager for the versions
-    private final String VERSION_STORAGE_PARENT_NODE_UUID;
+    private final PersistenceManager pMgr;
-     * The version manager of the internal versions
+     * the state manager for the version storage
-    private final PersistentVersionManager vMgr;
+    private LocalItemStateManager stateMgr;
-     * The virtual item manager that exposes the versions to the content
+     * the persistent root node of the version histories
-    private VersionItemStateProvider virtProvider;
+    private final NodeStateEx historyRoot;
+     * Map of returned items. this is kept for invalidating
+     */
+    private ReferenceMap items = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK);
+
+    /**
+     * Map of returned items. this is kept for invalidating
+     */
+    private ReferenceMap versionItems = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK);
+
+    /**
-     * @param vMgr
-    public VersionManagerImpl(PersistentVersionManager vMgr, NodeTypeRegistry ntReg,
+    public VersionManagerImpl(PersistenceManager pMgr, NodeTypeRegistry ntReg,
-                              String rootParentUUID) {
-        this.vMgr = vMgr;
-        this.ntReg = ntReg;
-        this.obsMgr = obsMgr;
-        this.VERSION_STORAGE_NODE_UUID = rootUUID;
-        this.VERSION_STORAGE_PARENT_NODE_UUID = rootParentUUID;
+                              String rootParentUUID) throws RepositoryException {
+        try {
+            this.pMgr = pMgr;
+            this.ntReg = ntReg;
+            this.obsMgr = obsMgr;
+            this.VERSION_STORAGE_NODE_UUID = rootUUID;
+
+            // need to store the version storage root directly into the persistence manager
+            if (!pMgr.exists(new NodeId(rootUUID))) {
+                NodeState root = pMgr.createNew(new NodeId(rootUUID));
+                root.setParentUUID(rootParentUUID);
+                root.setDefinitionId(ntReg.getEffectiveNodeType(REP_SYSTEM).getApplicableChildNodeDef(
+                        JCR_VERSIONSTORAGE, REP_VERSIONSTORAGE).getId());
+                root.setNodeTypeName(REP_VERSIONSTORAGE);
+                ChangeLog cl = new ChangeLog();
+                cl.added(root);
+                pMgr.store(cl);
+            }
+            SharedItemStateManager sharedStateMgr = new SharedItemStateManager(pMgr, VERSION_STORAGE_NODE_UUID, ntReg);
+            stateMgr = new LocalItemStateManager(sharedStateMgr, null);
+            NodeState nodeState = (NodeState) stateMgr.getItemState(new NodeId(VERSION_STORAGE_NODE_UUID));
+            historyRoot = new NodeStateEx(stateMgr, ntReg, nodeState, JCR_VERSIONSTORAGE);
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        }
-    public synchronized VirtualItemStateProvider getVirtualItemStateProvider(ItemStateManager base) {
-        if (virtProvider == null) {
-            try {
-                // init the definition id mgr
-                virtProvider = new VersionItemStateProvider(
-                        this, ntReg, VERSION_STORAGE_NODE_UUID, VERSION_STORAGE_PARENT_NODE_UUID);
-            } catch (Exception e) {
-                // todo: better error handling
-                log.error("Error while initializing virtual items.", e);
-                throw new IllegalStateException(e.toString());
-            }
-        }
-        return virtProvider;
+    public synchronized ItemStateManager getItemStateProvider(ItemStateManager base) {
+        return stateMgr;
+        pMgr.close();
-    public VersionHistory createVersionHistory(Session session, NodeState node) throws RepositoryException {
-        InternalVersionHistory history = vMgr.createVersionHistory(node);
-        virtProvider.invalidateItem(new NodeId(VERSION_STORAGE_NODE_UUID), false);
+    public VersionHistory createVersionHistory(Session session, NodeState node)
+            throws RepositoryException {
+
+        InternalVersionHistory history = createVersionHistory(node);
+        if (history == null) {
+            throw new VersionException("History already exists for node " + node.getUUID());
+        }
+     * Creates a new Version History.
+     *
+     * @param node the node for which the version history is to be initialized
+     * @return the newly created version history.
+     * @throws RepositoryException
+     */
+    private InternalVersionHistory createVersionHistory(NodeState node)
+            throws RepositoryException {
+
+        try {
+            stateMgr.edit();
+        } catch (IllegalStateException e) {
+            throw new RepositoryException("Unable to start edit operation", e);
+        }
+
+        boolean succeeded = false;
+
+        try {
+            // create deep path
+            String uuid = node.getUUID();
+            NodeStateEx root = historyRoot;
+            for (int i = 0; i < 3; i++) {
+                QName name = new QName(NS_DEFAULT_URI, uuid.substring(i * 2, i * 2 + 2));
+                if (!root.hasNode(name)) {
+                    root.addNode(name, REP_VERSIONSTORAGE, null, false);
+                    root.store();
+                }
+                root = root.getNode(name, 1);
+            }
+            QName historyNodeName = new QName(NS_DEFAULT_URI, uuid);
+            if (root.hasNode(historyNodeName)) {
+                // already exists
+                return null;
+            }
+
+            // create new history node in the persistent state
+            InternalVersionHistoryImpl hist = InternalVersionHistoryImpl.create(this, root, UUID.randomUUID().toString(), historyNodeName, node);
+
+            // end update
+            stateMgr.update();
+            succeeded = true;
+
+            log.info("Created new version history " + hist.getId() + " for " + node + ".");
+            return hist;
+
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        } finally {
+            if (!succeeded) {
+                // update operation failed, cancel all modifications
+                stateMgr.cancel();
+            }
+        }
+    }
+
+    /**
-        return vMgr.hasVersionHistory(id);
+        // todo: probably need to check if this item is really a history
+        return hasItem(id);
-        return vMgr.getVersionHistory(id);
-    }
-
-    /**
-     * Returns the number of version histories
-     *
-     * @return
-     * @throws RepositoryException
-     */
-    public int getNumVersionHistories() throws RepositoryException {
-        return vMgr.getNumVersionHistories();
-    }
-
-    /**
-     * Returns an iterator over all ids of {@link InternalVersionHistory}s.
-     *
-     * @return
-     * @throws RepositoryException
-     */
-    public Iterator getVersionHistoryIds() throws RepositoryException {
-        return vMgr.getVersionHistoryIds();
+        return (InternalVersionHistory) getItem(id);
-        return vMgr.hasVersion(id);
+        // todo: probably need to check if this item is really a version
+        return hasItem(id);
-        return vMgr.getVersion(id);
+        return (InternalVersion) getItem(id);
-        return vMgr.hasItem(id);
+        return versionItems.containsKey(id) || stateMgr.hasItemState(new NodeId(id));
-     * Returns the version item with the given id
+     * Returns the item with the given persistent id
-     * @param id
+     * @param uuid
-    public InternalVersionItem getItem(String id) throws RepositoryException {
-        return vMgr.getItem(id);
+    synchronized InternalVersionItem getItem(String uuid) throws RepositoryException {
+        NodeId id = new NodeId(uuid);
+        try {
+            InternalVersionItem item = (InternalVersionItem) versionItems.get(id);
+            if (item == null) {
+                if (stateMgr.hasItemState(id)) {
+                    NodeState state = (NodeState) stateMgr.getItemState(id);
+                    NodeStateEx pNode = new NodeStateEx(stateMgr, ntReg, state, null);
+                    String parentUUID = pNode.getParentUUID();
+                    InternalVersionItem parent =
+                            (parentUUID != null) ? getItem(parentUUID) : null;
+                    QName ntName = state.getNodeTypeName();
+                    if (ntName.equals(NT_FROZENNODE)) {
+                        item = new InternalFrozenNodeImpl(this, pNode, parent);
+                    } else if (ntName.equals(NT_VERSIONEDCHILD)) {
+                        item = new InternalFrozenVHImpl(this, pNode, parent);
+                    } else if (ntName.equals(NT_VERSION)) {
+                        item = ((InternalVersionHistory) parent).getVersion(uuid);
+                    } else if (ntName.equals(NT_VERSIONHISTORY)) {
+                        item = new InternalVersionHistoryImpl(this, pNode);
+                    } else {
+                        //return null;
+                    }
+                }
+                if (item != null) {
+                    versionItems.put(id, item);
+                }
+            }
+            return item;
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        }
-        InternalVersion version = vMgr.checkin(node);
-        virtProvider.invalidateItem(new NodeId(version.getVersionHistory().getId()), true);
+        InternalVersion version = internalCheckin(node);
+        invalidateItem(new NodeId(version.getVersionHistory().getId()), true);
+     * Checks in a node
+     *
+     * @param node
+     * @return
+     * @throws RepositoryException
+     * @see javax.jcr.Node#checkin()
+     */
+    private InternalVersion internalCheckin(NodeImpl node) throws RepositoryException {
+        // assuming node is versionable and checkout (check in nodeimpl)
+        // To create a new version of a versionable node N, the client calls N.checkin.
+        // This causes the following series of events:
+        String histUUID = node.getProperty(Constants.JCR_VERSIONHISTORY).getString();
+        InternalVersionHistoryImpl history = (InternalVersionHistoryImpl) getVersionHistory(histUUID);
+
+        // 0. resolve the predecessors
+        Value[] values = node.getProperty(Constants.JCR_PREDECESSORS).getValues();
+        InternalVersion[] preds = new InternalVersion[values.length];
+        for (int i = 0; i < values.length; i++) {
+            preds[i] = history.getVersion(values[i].getString());
+        }
+
+        // 0.1 search a predecessor, suitable for generating the new name
+        String versionName = null;
+        int maxDots = Integer.MAX_VALUE;
+        for (int i = 0; i < preds.length; i++) {
+            // take the first pred. without a successor
+            if (preds[i].getSuccessors().length == 0) {
+                versionName = preds[i].getName().getLocalName(); //assuming no namespaces in version names
+                // need to count the dots
+                int pos = -1;
+                int numDots = 0;
+                while (versionName.indexOf('.', pos + 1) >= 0) {
+                    pos = versionName.indexOf('.', pos + 1);
+                    numDots++;
+                }
+                if (numDots < maxDots) {
+                    maxDots = numDots;
+                    if (pos < 0) {
+                        versionName = "1.0";
+                    } else {
+                        versionName = versionName.substring(0, pos + 1)
+                                + (Integer.parseInt(versionName.substring(pos + 1)) + 1);
+                    }
+                }
+                break;
+            }
+        }
+        // if no empty found, generate new name
+        if (versionName == null) {
+            versionName = preds[0].getName().getLocalName();
+            do {
+                versionName += ".1";
+            } while (history.hasVersion(new QName("", versionName)));
+        }
+
+        try {
+            stateMgr.edit();
+        } catch (IllegalStateException e) {
+            throw new RepositoryException("Unable to start edit operation.");
+        }
+
+        boolean succeeded = false;
+
+        try {
+            InternalVersionImpl v = history.checkin(new QName("", versionName), node);
+            stateMgr.update();
+            succeeded = true;
+
+            return v;
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        } finally {
+            if (!succeeded) {
+                // update operation failed, cancel all modifications
+                stateMgr.cancel();
+            }
+        }
+    }
+
+
+    /**
-        InternalVersionHistory vh = ((VersionHistoryImpl) history).getInternalVersionHistory();
-        vh.removeVersion(name);
+        InternalVersionHistoryImpl vh = (InternalVersionHistoryImpl)
+                ((VersionHistoryImpl) history).getInternalVersionHistory();
-        virtProvider.invalidateItem(new NodeId(vh.getId()), true);
+        try {
+            stateMgr.edit();
+        } catch (IllegalStateException e) {
+            throw new VersionException("Unable to start edit operation", e);
+        }
+        boolean succeeded = false;
+        try {
+            vh.removeVersion(name);
+            stateMgr.update();
+            succeeded = true;
+        } catch (ItemStateException e) {
+            log.error("Error while storing: " + e.toString());
+        } finally {
+            if (!succeeded) {
+                // update operation failed, cancel all modifications
+                stateMgr.cancel();
+            }
+        }
+
+        invalidateItem(new NodeId(vh.getId()), true);
-        InternalVersionHistory vh = ((VersionHistoryImpl) history).getInternalVersionHistory();
+        InternalVersionHistoryImpl vh = (InternalVersionHistoryImpl)
+                ((VersionHistoryImpl) history).getInternalVersionHistory();
-        InternalVersion v = vh.setVersionLabel(version, label, move);
+
+        try {
+            stateMgr.edit();
+        } catch (IllegalStateException e) {
+            throw new VersionException("Unable to start edit operation", e);
+        }
+        InternalVersion v = null;
+        boolean success = false;
+        try {
+            v = vh.setVersionLabel(version, label, move);
+            stateMgr.update();
+            success = true;
+        } catch(ItemStateException e) {
+            log.error("Error while storing: " + e.toString());
+        } finally {
+            if (!success) {
+                // update operation failed, cancel all modifications
+                stateMgr.cancel();
+            }
+        }
-        virtProvider.invalidateItem(new NodeId(labelNode.internalGetUUID()), false);
+        invalidateItem(new NodeId(labelNode.internalGetUUID()), true);
-    public List getItemReferences(InternalVersionItem item) {
-        return vMgr.getItemReferences(item);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-            if (!vMgr.hasItem(id.getParentUUID())) {
+            if (!hasItem(id.getParentUUID())) {
-        vMgr.setItemReferences(item, refs);
+        internalSetItemReferences(item, refs);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public List getItemReferences(InternalVersionItem item) {
+        try {
+            NodeReferences refs = pMgr.load(new NodeReferencesId(item.getId()));
+            return refs.getReferences();
+        } catch (ItemStateException e) {
+            // ignore
+        }
+        return Collections.EMPTY_LIST;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    private void internalSetItemReferences(InternalVersionItem item, List references) {
+        try {
+            ChangeLog log = new ChangeLog();
+            NodeReferences refs = new NodeReferences(new NodeReferencesId(item.getId()));
+            refs.addAllReferences(references);
+            log.modified(refs);
+            pMgr.store(log);
+        } catch (ItemStateException e) {
+            log.error("Error while storing", e);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public VirtualItemStateProvider getVirtualItemStateProvider() {
+        return this;
+    }
+
+    /**
+     * invalidates the item
+     *
+     * @param id
+     */
+    private void invalidateItem(ItemId id, boolean recursive) {
+        ItemState state = (ItemState) items.remove(id);
+        if (state != null) {
+            if (recursive) {
+                if (state instanceof NodeState) {
+                    NodeState nState = (NodeState) state;
+                    Iterator iter = nState.getPropertyEntries().iterator();
+                    while (iter.hasNext()) {
+                        NodeState.PropertyEntry pe = (NodeState.PropertyEntry) iter.next();
+                        invalidateItem(new PropertyId(nState.getUUID(), pe.getName()), false);
+                    }
+                    iter = nState.getChildNodeEntries().iterator();
+                    while (iter.hasNext()) {
+                        NodeState.ChildNodeEntry pe = (NodeState.ChildNodeEntry) iter.next();
+                        invalidateItem(new NodeId(pe.getUUID()), true);
+                    }
+                }
+            }
+            state.notifyStateUpdated();
+        }
+    }
+
+
+    //--------------------------------------------------------------------------
+    //--------------------------------------------------------------------------
+
+    public boolean isVirtualRoot(ItemId id) {
+        return id.equals(historyRoot.getState().getId());
+    }
+
+    public NodeId getVirtualRootId() {
+        return (NodeId) historyRoot.getState().getId();
+    }
+
+    public VirtualPropertyState createPropertyState(VirtualNodeState parent, QName name, int type, boolean multiValued) throws RepositoryException {
+        throw new IllegalStateException("VersionManager should never create a VirtualPropertyState");
+    }
+
+    public VirtualNodeState createNodeState(VirtualNodeState parent, QName name, String uuid, QName nodeTypeName) throws RepositoryException {
+        throw new IllegalStateException("VersionManager should never create a VirtualNodeState");
+    }
+
+    public boolean setNodeReferences(NodeReferences refs) {
+        try {
+            InternalVersionItem item = getItem(refs.getTargetId().getUUID());
+            setItemReferences(item, refs.getReferences());
+            return true;
+        } catch (RepositoryException e) {
+            log.error("Error while setting references: " + e.toString());
+            return false;
+        }
+    }
+
+    public synchronized ItemState getItemState(ItemId id)
+            throws NoSuchItemStateException, ItemStateException {
+        ItemState item = (ItemState) items.get(id);
+        if (item == null) {
+            item = stateMgr.getItemState(id);
+            items.put(id, item);
+
+            // special check for successors
+            if (item instanceof PropertyState) {
+                PropertyState prop = (PropertyState) item;
+                if (prop.getName().equals(JCR_SUCCESSORS)) {
+                    try {
+                        InternalVersion v = getVersion(prop.getParentUUID());
+                        if (v != null) {
+                            InternalVersion[] succs = v.getSuccessors();
+                            InternalValue[] succV = new InternalValue[succs.length];
+                            for (int i = 0; i < succs.length; i++) {
+                                succV[i] = InternalValue.create(new UUID(succs[i].getId()));
+                            }
+                            prop.setValues(succV);
+                        }
+                    } catch (RepositoryException e) {
+                        log.warn("Unable to resolve jcr:successors property for " + id);
+                    }
+                }
+            }
+        }
+        return item;
+    }
+
+    public boolean hasItemState(ItemId id) {
+        return stateMgr.hasItemState(id);
+    }
+
+    public NodeReferences getNodeReferences(NodeReferencesId id)
+            throws NoSuchItemStateException, ItemStateException {
+        return stateMgr.getNodeReferences(id);
+    }
+
+    public boolean hasNodeReferences(NodeReferencesId id) {
+        return stateMgr.hasNodeReferences(id);
+    }
+
+    public void stateCreated(ItemState created) {
+        stateMgr.stateCreated(created);
+    }
+
+    public void stateModified(ItemState modified) {
+        stateMgr.stateModified(modified);
+    }
+
+    public void stateDestroyed(ItemState destroyed) {
+        items.remove(destroyed.getId());
+        stateMgr.stateDestroyed(destroyed);
+    }
+
+    public void stateDiscarded(ItemState discarded) {
+        items.remove(discarded.getId());
+        stateMgr.stateDiscarded(discarded);

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 MOV43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS29 INS83 INS43 INS59 UPD43 INS29 INS83 INS43 INS59 UPD43 INS43 INS8 MOV29 MOV83 MOV83 INS43 UPD42 MOV42 MOV44 INS8 INS29 INS83 INS43 INS42 INS44 MOV43 INS8 MOV29 INS83 INS39 INS42 MOV44 INS8 INS29 INS83 MOV43 INS42 INS44 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 MOV43 INS8 MOV29 INS83 MOV43 INS42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS8 MOV29 INS83 INS39 INS42 INS44 INS44 INS8 MOV83 UPD39 MOV39 INS42 INS44 INS8 INS83 INS43 INS42 MOV8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 MOV83 INS83 INS43 INS42 INS44 INS43 INS43 INS8 UPD42 INS44 INS43 UPD42 INS43 INS43 INS39 UPD42 INS44 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 UPD66 INS42 UPD42 INS65 INS42 INS42 UPD42 UPD42 INS65 INS42 INS42 INS14 UPD42 UPD42 INS14 UPD43 UPD42 INS42 INS54 INS42 INS41 INS21 INS25 INS65 INS65 INS65 MOV65 INS42 INS43 INS42 INS54 INS60 INS54 INS41 INS65 INS65 INS65 MOV65 INS43 INS42 INS60 INS54 INS65 INS65 INS65 MOV65 INS65 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS24 INS60 INS60 INS24 INS25 INS54 INS60 INS54 INS60 INS54 INS60 INS54 MOV60 INS54 INS60 INS54 INS54 INS41 INS65 INS43 INS42 INS43 INS42 INS54 INS65 INS42 INS41 MOV65 INS43 INS42 INS39 INS42 INS60 INS25 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS53 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS53 INS43 INS42 INS54 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS41 INS43 INS42 INS42 UPD43 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS21 INS43 INS42 INS21 INS21 UPD66 INS66 UPD66 INS66 INS43 INS40 INS40 UPD66 INS43 INS40 INS40 UPD42 INS8 INS12 INS42 INS32 INS27 INS8 INS66 INS42 INS66 INS66 INS42 INS8 INS12 INS39 INS59 INS8 INS12 INS8 INS11 INS11 INS27 INS66 INS42 INS42 INS43 INS59 INS8 INS12 INS66 INS42 INS68 INS42 INS43 INS59 INS43 INS59 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS8 INS12 INS39 INS59 INS8 INS12 INS8 INS43 INS59 INS8 INS12 INS39 INS59 INS8 INS12 INS8 UPD43 INS8 INS12 INS39 INS59 INS8 INS12 INS8 INS8 INS12 INS40 INS65 INS42 INS42 INS8 MOV12 INS65 INS52 UPD66 INS42 INS43 INS59 INS27 INS8 INS42 INS32 INS11 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS8 INS12 INS42 INS43 INS59 INS27 INS8 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 MOV21 MOV21 MOV21 MOV21 INS25 INS60 MOV21 INS60 INS21 INS44 INS8 INS42 INS42 INS42 INS33 INS53 INS21 INS44 INS8 INS42 INS9 INS60 INS60 INS24 INS60 INS25 INS60 INS21 INS21 INS21 INS41 INS44 INS8 INS25 UPD42 INS43 INS32 UPD42 INS43 INS32 INS32 INS32 INS42 INS42 INS14 INS60 INS25 INS41 INS44 INS8 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS33 INS42 INS40 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS33 INS21 INS19 INS21 INS44 INS8 INS42 INS9 INS60 INS21 INS21 INS41 INS44 INS8 INS25 INS42 INS42 INS11 INS21 INS44 INS8 INS42 INS9 MOV21 INS21 INS21 INS44 INS8 INS25 UPD42 INS11 INS21 INS44 INS8 INS33 INS42 INS9 INS21 INS21 INS21 INS44 INS8 INS25 UPD9 UPD42 INS60 INS41 INS44 INS8 INS60 INS60 INS21 INS21 INS21 INS42 INS42 INS11 INS42 INS33 INS25 INS21 INS42 INS42 INS32 INS43 INS32 INS43 INS45 INS43 INS45 INS60 INS21 INS41 INS44 INS8 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS25 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS38 INS8 INS43 INS59 INS43 INS59 INS7 INS43 INS42 INS53 INS14 INS32 MOV43 INS42 INS53 MOV43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS7 INS32 INS42 INS43 INS42 INS53 INS38 INS8 INS42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS43 INS59 MOV27 INS8 INS42 INS43 INS42 INS53 UPD42 INS32 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS34 INS27 INS8 INS7 INS8 INS32 INS32 INS43 INS42 INS53 INS43 INS59 INS32 INS7 INS42 INS43 INS42 INS53 INS38 INS8 INS43 MOV32 INS32 INS43 INS42 INS53 INS32 INS7 INS43 INS42 INS21 INS38 INS8 INS43 MOV32 INS32 INS43 INS42 INS53 INS7 INS32 INS7 INS43 INS42 INS21 INS38 INS8 INS43 INS59 INS32 INS43 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 UPD43 INS43 INS32 INS42 INS8 INS32 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS43 INS59 INS32 INS9 INS43 INS42 INS21 INS41 INS43 INS32 INS7 INS32 INS62 INS8 INS42 INS42 INS42 INS42 UPD42 INS32 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS11 INS42 INS14 INS42 INS14 INS43 INS27 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS39 INS59 INS42 INS34 INS42 INS60 INS25 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS14 INS42 INS21 INS43 INS42 INS42 INS42 INS42 INS11 UPD42 INS25 INS25 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS85 INS2 INS32 INS22 INS34 INS21 INS60 INS60 INS61 INS25 INS10 INS42 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS42 INS14 INS42 INS21 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS21 INS42 INS42 INS42 UPD42 MOV42 INS14 INS42 MOV32 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS25 UPD42 INS42 INS42 INS14 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS43 INS42 INS42 INS42 INS43 INS42 INS33 INS43 MOV32 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS38 INS8 INS7 INS43 INS42 INS42 INS33 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS43 INS42 INS32 INS42 INS43 INS32 INS32 INS8 INS27 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS7 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS32 INS42 INS7 INS43 INS45 INS42 INS43 INS45 INS42 INS42 INS14 INS42 INS43 INS42 INS32 INS43 INS45 INS42 INS42 INS42 INS27 INS32 INS43 INS45 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS14 INS43 INS43 INS14 UPD45 INS62 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS42 INS33 INS21 INS42 INS2 INS42 INS2 INS42 INS42 INS32 INS42 INS38 INS42 INS34 INS32 INS34 INS21 INS21 INS42 INS42 INS21 INS25 INS2 INS42 INS42 INS45 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS45 MOV32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS43 INS60 INS60 INS61 INS21 INS61 INS32 INS42 INS45 INS32 INS42 INS42 INS11 INS32 INS42 INS42 INS54 INS42 INS42 INS42 INS14 INS32 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS13 INS27 INS7 INS37 INS7 INS27 INS8 INS8 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 MOV43 INS59 INS32 INS8 INS7 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS8 INS12 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS33 INS9 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS42 MOV21 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS21 INS21 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS34 INS27 INS34 INS43 INS32 INS43 INS42 INS42 INS42 INS33 INS42 INS42 INS36 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS13 INS27 INS7 INS7 INS43 INS42 INS32 INS42 INS43 INS59 INS32 INS32 INS42 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 UPD42 INS7 INS42 INS42 INS42 INS21 INS32 INS8 INS8 INS42 INS34 INS42 INS45 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS11 INS42 INS14 INS9 INS42 INS42 INS40 INS42 INS11 INS42 INS14 INS9 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS24 INS21 INS42 INS32 INS42 INS33 UPD43 UPD42 UPD42 INS42 INS14 INS7 INS42 INS42 INS42 INS21 INS32 INS36 INS43 INS32 INS43 INS32 INS32 INS43 INS32 INS43 INS32 INS42 INS32 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS42 INS42 INS27 UPD42 INS43 INS52 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS34 INS27 INS27 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS45 INS42 INS42 INS36 INS42 INS42 INS42 INS14 INS42 INS34 INS32 INS34 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS5 INS40 INS42 INS34 INS7 INS11 INS43 INS52 INS42 INS42 INS42 INS32 INS43 INS85 INS2 INS32 MOV43 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS34 INS43 INS32 INS42 INS2 INS42 INS42 INS42 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL42 DEL65 DEL52 DEL42 DEL22 DEL42 DEL9 DEL8 DEL8 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL21 DEL42 DEL42 DEL32 DEL42 DEL31 DEL66 DEL42 DEL65 DEL66 DEL65 DEL65 DEL29 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL14 DEL53 DEL65 DEL32 DEL66 DEL65 DEL65 DEL29