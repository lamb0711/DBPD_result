JCR-2523: StaleItemStateException during distributed transaction

Discard the old JCR session when reusing a JCAManagedConnection instance in a JCA connection pool.
This prevents things like custom namespace mappings or uncleared cache data from persisting between connections returned from the pool.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1039064 13f79535-47bb-0310-9956-ffa450edef68

-    private final Session session;
+    private Session session;
-            JCAManagedConnectionFactory mcf, JCAConnectionRequestInfo cri,
-            Session session) {
+            JCAManagedConnectionFactory mcf, JCAConnectionRequestInfo cri)
+            throws ResourceException {
-        this.session = session;
+        this.session = openSession();
-     * Return the repository.
+     * Create a new session.
-    private Repository getRepository() {
-        return mcf.getRepository();
+    @SuppressWarnings("deprecation")
+    private Session openSession() throws ResourceException {
+        try {
+            Session session = mcf.getRepository().login(
+                    cri.getCredentials(), cri.getWorkspace());
+            log("Created session (" + session + ")");
+            return session;
+        } catch (RepositoryException e) {
+            log("Failed to create session", e);
+            ResourceException exception = new ResourceException(
+                    "Failed to create session: " + e.getMessage());
+            exception.setLinkedException(e);
+            throw exception;
+        }
-            try {
-                this.session.refresh(false);
-            } catch (RepositoryException e) {
-                ResourceException exception =
-                    new ResourceException("unable to cleanup connection");
-                exception.setLinkedException(e);
-                throw exception;
-            }
+            this.session.logout();
+            this.session = openSession();
+    @SuppressWarnings("deprecation")
+    private String getDescriptor(String key) throws ResourceException {
+        try {
+            return mcf.getRepository().getDescriptor(key);
+        } catch (RepositoryException e) {
+            log("Failed to access the repository", e);
+            ResourceException exception = new ResourceException(
+                    "Failed to access the repository: " + e.getMessage());
+            exception.setLinkedException(e);
+            throw exception;
+        }
+    }
+
-    public String getEISProductName()
-            throws ResourceException {
-        return getRepository().getDescriptor(Repository.REP_NAME_DESC);
+    public String getEISProductName() throws ResourceException {
+        return getDescriptor(Repository.REP_NAME_DESC);
-    public String getEISProductVersion()
-            throws ResourceException {
-        return getRepository().getDescriptor(Repository.REP_VERSION_DESC);
+    public String getEISProductVersion() throws ResourceException {
+        return getDescriptor(Repository.REP_VERSION_DESC);

INS31 INS31 INS43 MOV29 INS79 MOV83 INS43 INS42 UPD43 MOV43 MOV8 INS79 INS83 INS43 UPD42 MOV42 INS44 INS43 INS8 INS42 INS42 INS45 INS42 UPD42 INS42 INS45 INS42 INS43 INS42 INS42 INS54 UPD66 INS8 MOV8 INS42 INS8 INS12 INS32 INS60 INS21 INS41 INS21 MOV21 MOV41 INS44 INS8 INS42 MOV43 INS59 INS32 INS42 INS21 INS7 INS32 INS43 INS42 INS21 INS60 INS21 INS53 INS42 INS32 INS42 INS27 INS32 MOV43 UPD42 INS22 INS32 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS42 MOV32 INS42 INS32 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS27 INS43 INS27 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL44 DEL42 DEL45 DEL8 DEL31 DEL9 DEL42 DEL32 DEL42 DEL32