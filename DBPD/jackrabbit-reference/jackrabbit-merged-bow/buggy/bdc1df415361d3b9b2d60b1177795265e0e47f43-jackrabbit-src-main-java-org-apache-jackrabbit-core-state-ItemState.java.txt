JCR-552 Move listeners from item state to item state managers


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@438851 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.util.WeakIdentityCollection;
-import java.util.Collection;
-public abstract class ItemState implements ItemStateListener, Serializable {
+public abstract class ItemState implements Serializable {
-     * Listeners (weak references)
+     * Parent container.
-    private final transient Collection listeners = new WeakIdentityCollection(5);
+    private transient ItemStateListener container;
-        // prepare this instance so it can be gc'ed
-        synchronized (listeners) {
-            listeners.clear();
-        }
-        this.overlayedState.addListener(this);
-        this.overlayedState.addListener(this);
-            // de-register listener on overlayed state...
-            overlayedState.removeListener(this);
-     * Notify the listeners that the persistent state this object is
-     * representing has been discarded.
+     * Return a flag indicating whether this state is connected to some other state.
+     * @return <code>true</code> if this state is connected, <code>false</code> otherwise.
+     */
+    protected boolean isConnected() {
+        return overlayedState != null;
+    }
+
+    /**
+     * Notify the parent container about changes to this state.
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDiscarded(this);
-            }
+        if (container != null) {
+            container.stateDiscarded(this);
-     * Notify the listeners that the persistent state this object is
-     * representing has been created.
+     * Notify the parent container about changes to this state.
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateCreated(this);
-            }
+        if (container != null) {
+            container.stateCreated(this);
-     * Notify the listeners that the persistent state this object is
-     * representing has been updated.
+     * Notify the parent container about changes to this state.
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateModified(this);
-            }
+        if (container != null) {
+            container.stateModified(this);
-     * Notify the listeners that the persistent state this object is
-     * representing has been destroyed.
+     * Notify the parent container about changes to this state.
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDestroyed(this);
-            }
+        if (container != null) {
+            container.stateDestroyed(this);
-     * Add an <code>ItemStateListener</code>
-     *
-     * @param listener the new listener to be informed on modifications
+     * Set the parent container that will receive notifications about changes to this state.
+     * @param container container to be informed on modifications
-    public void addListener(ItemStateListener listener) {
-        synchronized (listeners) {
-            assert (!listeners.contains(listener));
-            listeners.add(listener);
+    public void setContainer(ItemStateListener container) {
+        if (this.container != null) {
+            throw new IllegalStateException("State already connected to a container: " + this.container);
+        this.container = container;
-     * Remove an <code>ItemStateListener</code>
-     *
-     * @param listener an existing listener
+     * Return the parent container that will receive notifications about changes to this state. Returns
+     * <code>null</code> if none has been yet assigned.
+     * @return container or <code>null</code>
-    public void removeListener(ItemStateListener listener) {
-        synchronized (listeners) {
-            listeners.remove(listener);
-        }
+    public ItemStateListener getContainer() {
+        return container;
-    //----------------------------------------------------< ItemStateListener >
-    /**
-     * {@inheritDoc}
-     */
-    public void stateCreated(ItemState created) {
-        // underlying state has been permanently created
-        status = STATUS_EXISTING;
-        pull();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDestroyed(ItemState destroyed) {
-        // underlying state has been permanently destroyed
-        if (isTransient) {
-            status = STATUS_STALE_DESTROYED;
-        } else {
-            status = STATUS_EXISTING_REMOVED;
-            notifyStateDestroyed();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateModified(ItemState modified) {
-        // underlying state has been modified
-        if (isTransient) {
-            status = STATUS_STALE_MODIFIED;
-        } else {
-            synchronized (this) {
-                // this instance represents existing state, update it
-                pull();
-                notifyStateUpdated();
-            }
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDiscarded(ItemState discarded) {
-        // underlying persistent state has been discarded, discard this instance too
-        discard();
-    }
-

INS31 MOV43 INS29 INS83 INS39 INS42 INS8 INS8 INS8 INS8 INS8 UPD42 MOV43 INS42 INS8 UPD42 INS65 INS65 INS41 MOV25 MOV25 MOV25 MOV25 MOV43 UPD42 INS25 MOV21 UPD65 INS41 UPD66 INS27 INS66 INS66 MOV27 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 UPD66 INS27 INS8 INS7 INS66 UPD66 UPD66 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS22 INS33 INS53 INS22 INS42 INS52 INS42 INS14 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS22 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL43 DEL34 DEL14 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL52 DEL42 DEL22 DEL42 DEL52 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL52 DEL32 DEL21 DEL42 DEL42 DEL52 DEL32 DEL21 DEL66 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL66 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL66 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL66 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL85 DEL5 DEL42 DEL42 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL36 DEL6 DEL8 DEL51 DEL42 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL7 DEL21 DEL8 DEL52 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL8 DEL31