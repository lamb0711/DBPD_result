JCR-1589: JSR 283 Retention & Hold Management (work in progress)
JCR-1957: Move common validation checks to a single place

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@738422 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.jsr283.retention.Hold;
+import org.apache.jackrabbit.api.jsr283.retention.RetentionManager;
+import org.apache.jackrabbit.api.jsr283.retention.RetentionPolicy;
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.ProtectedItemModifier;
+import org.apache.jackrabbit.core.PropertyImpl;
+import org.apache.jackrabbit.core.security.authorization.Permission;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.jackrabbit.api.jsr283.retention.RetentionManager;
-import org.apache.jackrabbit.api.jsr283.retention.Hold;
-import org.apache.jackrabbit.api.jsr283.retention.RetentionPolicy;
-import javax.jcr.PathNotFoundException;
+import javax.jcr.PathNotFoundException;
-import javax.jcr.Session;
-import javax.jcr.version.VersionException;
+import javax.jcr.Value;
+import javax.jcr.PropertyType;
+import javax.jcr.version.VersionException;
+import java.util.ArrayList;
+import java.util.List;
-public class RetentionManagerImpl implements RetentionManager {
+public class RetentionManagerImpl extends ProtectedItemModifier implements RetentionManager {
-    private final Session session;
-    
-    public RetentionManagerImpl(Session session) {
+    private static final NameFactory NAME_FACTORY = NameFactoryImpl.getInstance();
+
+    static final Name REP_RETENTION_MANAGEABLE = NAME_FACTORY.create(Name.NS_REP_URI, "RetentionManageable");
+    static final Name REP_HOLD = NAME_FACTORY.create(Name.NS_REP_URI, "hold");
+    static final Name REP_RETENTION_POLICY = NAME_FACTORY.create(Name.NS_REP_URI, "retentionPolicy");
+
+    private final SessionImpl session;
+
+    /**
+     *
+     * @param session The editing session.
+     */
+    public RetentionManagerImpl(SessionImpl session) {
+        super(Permission.RETENTION_MNGMT);
-
+    
+    //---------------------------------------------------< RetentionManager >---
+    /**
+     * @see RetentionManager#getHolds(String)
+     */
-        //TODO
-        return new Hold[0];
+
+        NodeImpl n = (NodeImpl) session.getNode(absPath);
+        session.getAccessManager().checkPermission(session.getQPath(absPath), Permission.RETENTION_MNGMT);        
+
+        Hold[] holds;
+        if (n.isNodeType(REP_RETENTION_MANAGEABLE) && n.hasProperty(REP_HOLD)) {
+            holds = HoldImpl.createFromProperty(n.getProperty(REP_HOLD), n.getNodeId());
+        } else {
+            holds = new Hold[0];
+        }
+        return holds;
+    /**
+     * @see RetentionManager#addHold(String, String, boolean) 
+     */
-        //TODO
-        throw new UnsupportedOperationException("Not yet implemented");
+
+        NodeImpl n = (NodeImpl) session.getNode(absPath);
+        if (!n.isNodeType(REP_RETENTION_MANAGEABLE)) {
+            n.addMixin(REP_RETENTION_MANAGEABLE);
+        }
+
+        HoldImpl hold = new HoldImpl(session.getQName(name), isDeep, n.getNodeId(), session);
+        Value[] vls;
+        if (n.hasProperty(REP_HOLD)) {
+            Value[] vs = n.getProperty(REP_HOLD).getValues();
+            // check if the same hold already exists
+            for (int i = 0; i < vs.length; i++) {
+                if (hold.equals(HoldImpl.createFromValue(vs[i], n.getNodeId(), session))) {
+                    throw new RepositoryException("Hold already exists.");
+                }
+            }
+            vls = new Value[vs.length + 1];
+            System.arraycopy(vs, 0, vls, 0, vs.length);
+        } else {
+            vls = new Value[1];
+        }
+
+        // add the value of the new hold
+        vls[vls.length - 1] = hold.toValue(session.getValueFactory());
+        setProperty(n, REP_HOLD, vls);
+        return hold;
+    /**
+     * @see RetentionManager#removeHold(String, Hold) 
+     */
-        //TODO
-        throw new UnsupportedOperationException("Not yet implemented");
+
+        NodeImpl n = (NodeImpl) session.getNode(absPath);
+        if (hold instanceof HoldImpl
+                && n.getNodeId().equals(((HoldImpl) hold).getNodeId())
+                && n.isNodeType(REP_RETENTION_MANAGEABLE)
+                && n.hasProperty(REP_HOLD)) {
+
+            PropertyImpl p = n.getProperty(REP_HOLD);
+            Value[] vls = p.getValues();
+
+            List newValues = new ArrayList(vls.length - 1);
+            for (int i = 0; i < vls.length; i++) {
+                if (!hold.equals(HoldImpl.createFromValue(vls[i], n.getNodeId(), session))) {
+                    newValues.add(vls[i]);
+                }
+            }
+            if (newValues.size() < vls.length) {
+                if (newValues.size() == 0) {
+                    removeItem(p);
+                } else {
+                    setProperty(n, REP_HOLD, (Value[]) newValues.toArray(new Value[newValues.size()]));
+                }
+            } else {
+                // no matching hold.
+                throw new RepositoryException("Cannot remove '" + hold.getName() + "' at " + absPath + ".");
+            }
+        } else {
+            // invalid hold or no hold at absPath
+            throw new RepositoryException("Cannot remove '" + hold.getName() + "' at " + absPath + ".");
+        }
+    /**
+     * @see RetentionManager#getRetentionPolicy(String) 
+     */
-        // TODO
-        return null;
+
+        NodeImpl n = (NodeImpl) session.getNode(absPath);
+        session.getAccessManager().checkPermission(session.getQPath(absPath), Permission.RETENTION_MNGMT);
+
+        RetentionPolicy rPolicy = null;
+        if (n.isNodeType(REP_RETENTION_MANAGEABLE) && n.hasProperty(REP_RETENTION_POLICY)) {
+            String jcrName = n.getProperty(REP_RETENTION_POLICY).getString();
+            rPolicy = new RetentionPolicyImpl(jcrName, n.getNodeId(), session);
+        }
+        
+        return rPolicy;
+    /**
+     * @see RetentionManager#setRetentionPolicy(String, RetentionPolicy)
+     */
-        //TODO
-        throw new UnsupportedOperationException("Not yet implemented");
+
+        NodeImpl n = (NodeImpl) session.getNode(absPath);
+        if (!(retentionPolicy instanceof RetentionPolicyImpl)) {
+            throw new RepositoryException("Invalid retention policy.");
+        }
+        Value retentionReference = session.getValueFactory().createValue(retentionPolicy.getName(), PropertyType.NAME);
+        if (!n.isNodeType(REP_RETENTION_MANAGEABLE)) {
+            n.addMixin(REP_RETENTION_MANAGEABLE);
+        }
+        setProperty(n, REP_RETENTION_POLICY, retentionReference);
+    /**
+     * @see RetentionManager#removeRetentionPolicy(String) 
+     */
-        //TODO
-        throw new UnsupportedOperationException("Not yet implemented");
+
+        NodeImpl n = (NodeImpl) session.getNode(absPath);
+        if (n.isNodeType(REP_RETENTION_MANAGEABLE) && n.hasProperty(REP_RETENTION_POLICY)) {
+            removeItem(n.getProperty(REP_RETENTION_POLICY));
+        } else {
+            throw new RepositoryException("Cannot remove retention policy at absPath.");
+        }

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS23 INS42 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 UPD43 INS29 INS29 INS8 INS29 INS8 INS29 INS8 INS29 MOV44 MOV43 MOV43 MOV43 INS29 INS8 INS29 MOV44 MOV43 MOV43 MOV43 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS65 UPD43 INS46 INS65 INS60 INS21 INS60 INS25 INS41 INS65 INS60 INS25 INS60 INS60 INS25 INS21 INS21 INS41 INS65 INS60 INS25 INS65 INS60 INS21 INS60 INS25 INS41 INS65 INS60 INS25 INS60 INS25 INS21 INS65 INS60 INS25 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS40 INS45 INS42 INS42 INS40 INS45 INS42 INS66 UPD42 INS40 INS68 INS43 INS59 INS32 INS5 INS59 INS27 INS8 MOV8 INS42 INS68 INS66 INS43 INS59 INS38 INS8 INS43 INS59 INS5 INS59 INS32 INS8 INS8 INS7 INS32 INS42 INS68 INS66 INS43 INS59 INS27 INS8 INS8 INS68 INS66 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS42 INS68 INS43 INS59 INS38 INS8 INS43 INS59 INS38 INS8 INS32 INS68 INS66 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS69 INS42 INS42 INS11 INS32 INS42 INS32 INS40 INS43 INS85 INS42 INS32 INS32 INS21 INS21 INS42 INS42 INS69 INS69 INS69 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS14 INS43 INS85 INS42 INS42 INS42 INS42 INS60 INS24 INS21 INS21 INS21 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS69 INS42 INS42 INS11 INS62 INS32 INS32 INS32 INS60 INS60 INS60 INS24 INS25 INS53 INS42 INS42 INS69 INS42 INS42 INS11 INS32 INS42 INS32 INS40 INS42 INS42 INS33 INS32 INS32 INS60 INS21 INS42 INS42 INS69 INS69 INS42 INS42 INS11 INS36 MOV53 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS11 INS32 INS32 INS21 MOV53 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS43 INS43 INS39 INS43 INS32 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS32 INS7 INS42 INS27 INS42 INS42 INS32 INS43 INS43 INS43 INS32 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS8 INS14 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS43 INS43 INS43 INS32 INS62 INS32 INS42 INS32 INS40 INS42 INS42 INS42 INS32 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV3 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS42 INS3 INS40 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS25 INS32 INS40 INS25 MOV53 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 UPD43 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD43 UPD45 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS34 INS32 INS8 INS5 INS27 INS5 INS34 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS34 INS38 INS8 INS42 INS42 INS27 INS8 INS8 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS42 INS43 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV53 INS43 INS85 INS40 INS34 INS43 INS85 INS43 INS42 INS42 INS40 INS34 INS32 INS21 INS32 INS34 INS21 INS21 UPD43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 UPD42 INS45 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42 UPD43 UPD45 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS43 INS85 INS42 INS42 INS3 INS42 INS5 INS32 INS43 INS85 INS42 INS42 INS42 DEL41 DEL8 DEL45 DEL8 DEL33 DEL41 DEL8 DEL8