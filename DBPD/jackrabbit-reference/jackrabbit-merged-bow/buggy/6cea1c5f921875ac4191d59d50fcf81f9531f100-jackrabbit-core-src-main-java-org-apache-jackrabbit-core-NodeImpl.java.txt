JCR-1104 - JSR 283 support
- shareble nodes (work in progress)
- prepare for returning stable paths on shareable nodes or their descendants

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@647767 13f79535-47bb-0310-9956-ffa450edef68

-    /**
-     * Primary parent id, if this is a shareable node, <code>null</code> otherwise.
-     */
-    private NodeId primaryParentId;
-
+    /** node data (avoids casting <code>ItemImpl.data</code>) */
+    private final AbstractNodeData data;
+
-    protected NodeImpl(ItemManager itemMgr, SessionImpl session, NodeId id,
-                       NodeState state, NodeDefinition definition,
-                       ItemLifeCycleListener[] listeners) {
-        super(itemMgr, session, id, state, listeners);
-        this.definition = definition;
+    protected NodeImpl(ItemManager itemMgr, SessionImpl session, AbstractNodeData data) {
+        super(itemMgr, session, data);
+        this.data = data;
+        final NodeState state = data.getNodeState();
-        if (isShareable()) {
-            this.primaryParentId = state.getParentId();
-        }
-    }
-
-    /**
-     * Protected constructor. Used when creating a node that is a shared
-     * sibling of another node, and that has the same properties, children nodes,
-     * etc. as the other node.
-     */
-    protected NodeImpl(NodeImpl sharedSibling, NodeId parentId,
-                       ItemLifeCycleListener[] listeners) {
-
-        super(sharedSibling.itemMgr, sharedSibling.session,
-                sharedSibling.id, sharedSibling.state, listeners);
-
-        this.definition = sharedSibling.definition;
-        this.primaryTypeName = sharedSibling.primaryTypeName;
-        this.primaryParentId = parentId;
-                NodeState thisState = (NodeState) state;
+                NodeState thisState = data.getNodeState();
-                    NodeState thisState = (NodeState) state;
+                    NodeState thisState = data.getNodeState();
-        if (!isTransient()) {
-            try {
-                // make transient (copy-on-write)
-                NodeState transientState =
-                        stateMgr.createTransientNodeState((NodeState) state, ItemState.STATUS_EXISTING_MODIFIED);
-                // replace persistent with transient state
-                state = transientState;
-                if (isShareable()) {
-                    itemMgr.becameTransient(this);
+
+        synchronized (data) {
+            if (!isTransient()) {
+                try {
+                    // make transient (copy-on-write)
+                    NodeState transientState =
+                            stateMgr.createTransientNodeState(
+                                    data.getNodeState(), ItemState.STATUS_EXISTING_MODIFIED);
+                    // replace persistent with transient state
+                    data.setState(transientState);
+                } catch (ItemStateException ise) {
+                    String msg = "failed to create transient state";
+                    log.debug(msg);
+                    throw new RepositoryException(msg, ise);
-            } catch (ItemStateException ise) {
-                String msg = "failed to create transient state";
-                log.debug(msg);
-                throw new RepositoryException(msg, ise);
+            return getItemState();
-        return state;
-        NodeState thisState = (NodeState) state;
+        NodeState thisState = data.getNodeState();
-        PropertyImpl prop = itemMgr.createPropertyInstance(propState, def);
+        PropertyImpl prop = (PropertyImpl) itemMgr.getItem(propState.getId());
-            node = itemMgr.createNodeInstance(nodeState, def);
+            node = (NodeImpl) itemMgr.getItem(id);
-        definition = newDef;
+        data.setDefinition(newDef);
-                status = STATUS_INVALIDATED;
-                // notify the listeners that this instance has been
+                data.setStatus(STATUS_INVALIDATED);
+                // notify the item manager that this instance has been
-                notifyInvalidated();
+                itemMgr.itemInvalidated(id, data);
-        NodeState thisState = (NodeState) state;
+        NodeState thisState = data.getNodeState();
+        final NodeDefinition definition = data.getNodeDefinition();
-        NodeState thisState = (NodeState) state;
+        NodeState thisState = data.getNodeState();
-        return ((NodeState) state).getMixinTypeNames();
+        return data.getNodeState().getMixinTypeNames();
-        return getEffectiveNodeType(((NodeState) state).getMixinTypeNames());
+        return getEffectiveNodeType(data.getNodeState().getMixinTypeNames());
-        NodeState transientState = (NodeState) state;
+        NodeState transientState = data.getNodeState();
-        state = persistentState;
+        data.setState(persistentState);
-        status = STATUS_NORMAL;
+        data.setStatus(STATUS_NORMAL);
-        if (isShareable()) {
-            // if node has become shareable, set its primary parent id
-            if (primaryParentId == null) {
-                primaryParentId = state.getParentId();
-            }
-            itemMgr.persisted(this);
+        if (isShareable() && data.getPrimaryParentId() == null) {
+            data.setPrimaryParentId(persistentState.getParentId());
+        final NodeDefinition definition = data.getNodeDefinition();
-            HashSet set = new HashSet(((NodeState) state).getMixinTypeNames());
+            HashSet set = new HashSet(data.getNodeState().getMixinTypeNames());
+        NodeDefinition definition = data.getNodeDefinition();
-        if (!((NodeState) state).getMixinTypeNames().contains(mixinName)) {
+        final NodeState state = data.getNodeState();
+        if (!state.getMixinTypeNames().contains(mixinName)) {
-        Set remainingMixins = new HashSet(((NodeState) state).getMixinTypeNames());
+        Set remainingMixins = new HashSet(state.getMixinTypeNames());
-        Set mixins = ((NodeState) state).getMixinTypeNames();
+        Set mixins = data.getNodeState().getMixinTypeNames();
-        NodeState thisState = (NodeState) state;
+        NodeState thisState = data.getNodeState();
-        NodeState thisState = (NodeState) state;
+        NodeState thisState = data.getNodeState();
-        NodeState thisState = (NodeState) state;
+        NodeState thisState = data.getNodeState();
+        final NodeDefinition definition = data.getNodeDefinition();
-        ArrayList list = new ArrayList(((NodeState) state).getChildNodeEntries());
+        ArrayList list = new ArrayList(data.getNodeState().getChildNodeEntries());
-        NodeState.ChildNodeEntry cneExisting = ((NodeState) state).getChildNodeEntry(id);
+        NodeState state = data.getNodeState();
+        NodeState.ChildNodeEntry cneExisting = state.getChildNodeEntry(id);
-        List cneList = new ArrayList(((NodeState) state).getChildNodeEntries());
+        List cneList = new ArrayList(state.getChildNodeEntries());
+        // fetch <code>state</code> again, as it changed while removing child
+        state = data.getNodeState();
+
-            ((NodeState) state).setChildNodeEntries(cneList);
+            state.setChildNodeEntries(cneList);
-            ((NodeState) state).removeAllChildNodeEntries();
+            state.removeAllChildNodeEntries();
-                    ((NodeState) state).addChildNodeEntry(nodeName, id);
+                    state.addChildNodeEntry(nodeName, id);
-                    ((NodeState) state).addChildNodeEntry(cne.getName(), cne.getId());
+                    state.addChildNodeEntry(cne.getName(), cne.getId());
-        NodeState thisState = (NodeState) state;
+        NodeState thisState = data.getNodeState();
+        final NodeDefinition definition = data.getNodeDefinition();
+        final NodeState state = data.getNodeState();
-        // check if shareable node
-        NodeId parentId = this.primaryParentId;
+        // check if root node
+        NodeId parentId = getParentId();
-            // check if root node
-            parentId = state.getParentId();
-            if (parentId == null) {
-                String msg = "root node doesn't have a parent";
-                log.debug(msg);
-                throw new ItemNotFoundException(msg);
-            }
+            String msg = "root node doesn't have a parent";
+            log.debug(msg);
+            throw new ItemNotFoundException(msg);
-            if (((NodeState) state).hasChildNodeEntry(id)) {
+            if (data.getNodeState().hasChildNodeEntry(id)) {
-        Set mixinNames = ((NodeState) state).getMixinTypeNames();
+        Set mixinNames = data.getNodeState().getMixinTypeNames();
-        if (definition.isProtected()) {
+        if (data.getNodeDefinition().isProtected()) {
-            HashSet set = new HashSet(((NodeState) state).getMixinTypeNames());
+            HashSet set = new HashSet(data.getNodeState().getMixinTypeNames());
-        return definition;
+        return data.getNodeDefinition();
-            NodeState state = (NodeState) this.state;
+            NodeState state = data.getNodeState();
-       return ((NodeState) state).isShareable();
+       return data.getNodeState().isShareable();
-        if (primaryParentId != null) {
-            return primaryParentId;
-        }
-        return state.getParentId();
+        return data.getParentId();
-        return ((NodeState) state).containsShare(parentId);
+        return data.getNodeState().containsShare(parentId);
-        NodeState state = (NodeState) this.state;
+        NodeState state = data.getNodeState();
-            String msg = "failed to build path of " + state.getId() + ": "
+            String msg = "failed to build path of " + id + ": "
-    /**
-     * Invoked when another node in the same shared set has replaced the
-     * node state.
-     *
-     * @param state state that is now stored as <code>NodeImpl</code>'s state
-     */
-    void stateReplaced(NodeState state) {
-        this.state = state;
-    }
-
-                failedIds.add(state.getId());
+                failedIds.add(id);
-        if (definition.isProtected()) {
+        if (data.getDefinition().isProtected()) {
+        final NodeState state = data.getNodeState();
-            HashSet set = new HashSet(((NodeState) state).getMixinTypeNames());
+            HashSet set = new HashSet(state.getMixinTypeNames());
-        if (!defId.equals(((NodeState) state).getDefinitionId())) {
+        if (!defId.equals(state.getDefinitionId())) {

MOV23 INS83 UPD43 INS8 MOV8 UPD42 UPD42 UPD43 UPD42 INS60 INS51 INS60 MOV25 INS60 INS60 INS60 INS60 INS60 INS21 INS60 INS60 MOV21 INS60 MOV41 INS60 UPD66 UPD42 UPD42 INS83 MOV43 INS59 INS42 MOV8 MOV43 INS43 INS32 INS83 INS43 INS59 MOV43 INS32 INS32 INS27 INS83 INS43 INS59 MOV43 INS59 INS83 MOV43 INS59 INS83 INS43 INS59 MOV43 MOV43 INS59 INS7 INS83 INS43 INS59 INS83 MOV43 INS59 INS43 INS59 INS32 MOV43 INS83 MOV43 INS59 UPD42 INS42 INS32 INS32 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 UPD42 INS32 INS32 INS32 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV33 INS32 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 MOV43 INS42 MOV42 UPD42 MOV42 INS32 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 MOV43 INS32 INS32 UPD42 MOV42 MOV42 MOV43 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 MOV43 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL8 DEL25 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL40 DEL40 DEL40 DEL40 DEL42 DEL46 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL11 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL11 DEL42 DEL42 DEL7 DEL42 DEL32 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL32 DEL42 DEL32 DEL42 DEL42 DEL7 DEL42 DEL42 DEL7 DEL42 DEL11 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL7 DEL42 DEL42 DEL7 DEL42 DEL27 DEL42 DEL32 DEL7 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL11 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL42 DEL42 DEL32 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL32 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36