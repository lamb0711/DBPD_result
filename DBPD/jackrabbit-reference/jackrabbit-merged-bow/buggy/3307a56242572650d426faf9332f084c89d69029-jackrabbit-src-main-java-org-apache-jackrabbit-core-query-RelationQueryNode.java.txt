JCR-247: Child axis support for XPath predicates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477599 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.Path;
+import org.apache.jackrabbit.name.MalformedPathException;
-     * The name of the property
+     * Acts as an syntetic placeholder for a location step that matches any
+     * name. This is required becase a JCR path does not allow a QName with
+     * a single '*' (star) character.
-    private QName property;
+    public static final QName STAR_NAME_TEST = new QName(QName.NS_REP_URI, "__star__");
+
+    /**
+     * The relative path to the property.
+     */
+    private Path relPath;
-     * @param property  the name of a property.
+     * @param relPath   the relative path to a property.
-    public RelationQueryNode(QueryNode parent, QName property, long value, int operation) {
+    public RelationQueryNode(QueryNode parent, Path relPath, long value, int operation) {
-        this.property = property;
+        this.relPath = relPath;
-     * @param property  the name of a property.
+     * @param relPath   the relative path to a property.
-    public RelationQueryNode(QueryNode parent, QName property, double value, int operation) {
+    public RelationQueryNode(QueryNode parent, Path relPath, double value, int operation) {
-        this.property = property;
+        this.relPath = relPath;
-     * @param property  the name of a property.
+     * @param relPath   the relative path to a property.
-    public RelationQueryNode(QueryNode parent, QName property, Date value, int operation) {
+    public RelationQueryNode(QueryNode parent, Path relPath, Date value, int operation) {
-        this.property = property;
+        this.relPath = relPath;
-     * @param property  the name of a property.
+     * @param relPath   the relative path to a property.
-    public RelationQueryNode(QueryNode parent, QName property, String value, int operation) {
+    public RelationQueryNode(QueryNode parent, Path relPath, String value, int operation) {
-        this.property = property;
+        this.relPath = relPath;
-     * Returns the name of the property in this relation query node.
+     * Returns the name of the property in this relation query node. Please
+     * note that this method does not return the full relative path that
+     * reference the property to match, but only the name of the final name
+     * element of the path returned by {@link #getRelativePath()}.
+     * @deprecated Use {@link #getRelativePath()} instead.
-        return property;
+        return relPath == null ? null : relPath.getNameElement().getName();
+     * @deprecated Use {@link #setRelativePath(Path)} instead.
-        property = name;
+        Path.PathBuilder builder = new Path.PathBuilder();
+        builder.addLast(name);
+        try {
+            this.relPath = builder.getPath();
+        } catch (MalformedPathException e) {
+            // path is always valid
+        }
+    }
+
+    /**
+     * @return the relative path that references the property in this relation.
+     */
+    public Path getRelativePath() {
+        return relPath;
+    }
+
+    /**
+     * Sets the relative path to the property in this relation.
+     *
+     * @param relPath the relative path to a property.
+     * @throws IllegalArgumentException if <code>relPath</code> is absolute.
+     */
+    public void setRelativePath(Path relPath) {
+        if (relPath != null && relPath.isAbsolute()) {
+            throw new IllegalArgumentException("relPath must be relative");
+        }
+        this.relPath = relPath;
+    }
+
+    /**
+     * Adds a path element to the existing relative path. To add a path element
+     * which matches all node names use {@link #STAR_NAME_TEST}.
+     *
+     * @param element the path element to append.
+     */
+    public void addPathElement(Path.PathElement element) {
+        Path.PathBuilder builder = new Path.PathBuilder();
+        if (relPath != null) {
+            builder.addAll(relPath.getElements());
+        }
+        builder.addLast(element);
+        try {
+            relPath = builder.getPath();
+        } catch (MalformedPathException e) {
+            // path is always valid
+        }
+        // try to normalize the path
+        try {
+            relPath = relPath.getNormalizedPath();
+        } catch (MalformedPathException e) {
+            // just keep the original in that case
+        }
-                    && (property == null ? other.property == null : property.equals(other.property));
+                    && (relPath == null ? other.relPath== null : relPath.equals(other.relPath));

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS83 MOV43 INS59 INS43 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS14 INS42 UPD42 INS43 INS42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 INS65 INS65 INS60 INS21 INS54 INS65 INS42 INS41 INS65 INS65 INS65 INS43 INS42 INS25 INS21 INS65 INS65 INS43 INS42 INS60 INS25 INS21 INS54 INS54 INS66 INS66 INS66 MOV43 INS40 INS45 UPD66 UPD42 UPD66 INS42 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 UPD66 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS16 INS66 INS65 INS66 INS43 INS59 INS32 INS8 INS12 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS7 INS66 INS66 INS65 INS66 INS42 INS66 INS40 INS43 INS59 INS27 INS8 INS32 INS8 INS12 INS8 INS12 UPD42 UPD42 UPD42 UPD42 INS68 INS68 INS27 INS33 INS32 INS68 INS40 INS42 INS14 INS42 INS42 INS42 MOV21 INS44 INS8 INS27 INS32 INS53 INS22 INS42 INS67 INS40 INS42 INS14 INS42 INS33 INS21 INS42 INS42 INS42 INS21 INS44 INS8 INS21 INS44 INS8 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS69 INS43 INS43 INS42 INS42 INS33 INS42 INS42 INS14 INS52 INS42 INS42 INS43 INS32 INS7 INS43 INS42 INS7 INS43 INS42 INS42 INS42 INS43 INS40 INS22 INS32 INS42 INS43 INS45 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD40 UPD42 UPD40 DEL42 DEL42 DEL42 DEL42 DEL8