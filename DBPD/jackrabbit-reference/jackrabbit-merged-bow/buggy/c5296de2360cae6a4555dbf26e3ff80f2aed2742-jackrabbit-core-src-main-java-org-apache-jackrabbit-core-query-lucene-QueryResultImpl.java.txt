JCR-1104: JSR 283 support
- multiple selectors (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633843 13f79535-47bb-0310-9956-ffa450edef68

+     * <p/>
+     * The exact type is: <code>List&lt;ScoreNode[]></code>
-                session, excerptProvider, spellSuggestion);
+                queryImpl.getSelectorNames(), itemMgr, session,
+                excerptProvider, spellSuggestion);
-    protected QueryHits executeQuery() throws IOException {
+    protected MultiColumnQueryHits executeQuery() throws IOException {
-            return new DocOrderNodeIteratorImpl(itemMgr, resultNodes);
+            return new DocOrderNodeIteratorImpl(itemMgr, resultNodes, 0);
-            return new LazyScoreNodeIterator();
+            return new LazyScoreNodeIterator(0);
-        QueryHits result = null;
+        MultiColumnQueryHits result = null;
-            for (ScoreNode sn = result.nextScoreNode();
+            for (ScoreNode[] sn = result.nextScoreNodes();
-                 sn = result.nextScoreNode()) {
+                 sn = result.nextScoreNodes()) {
-                    if (accessMgr.isGranted(sn.getNodeId(), AccessManager.READ)) {
+                    if (isAccessGranted(sn)) {
+     * Checks if access is granted to all <code>nodes</code>.
+     *
+     * @param nodes the nodes to check.
+     * @return <code>true</code> if read access is granted to all
+     *         <code>nodes</code>.
+     * @throws ItemNotFoundException if one of the <code>nodes</code> is not
+     *                               found.
+     * @throws RepositoryException   if an error occurs while checking access
+     *                               rights.
+     */
+    private boolean isAccessGranted(ScoreNode[] nodes)
+            throws ItemNotFoundException, RepositoryException {
+        for (int i = 0; i < nodes.length; i++) {
+            if (nodes[i] != null && !accessMgr.isGranted(
+                    nodes[i].getNodeId(), AccessManager.READ)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    /**
+        private final int selectorIndex;
+
+        private LazyScoreNodeIterator(int selectorIndex) {
+            this.selectorIndex = selectorIndex;
+        }
+
-            return ((ScoreNode) resultNodes.get(position)).getScore();
+            return ((ScoreNode[]) resultNodes.get(position))[selectorIndex].getScore();
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public ScoreNode[] getScoreNodes() {
+            initialize();
+            if (!hasNext()) {
+                throw new NoSuchElementException();
+            }
+            return (ScoreNode[]) resultNodes.get(position);
-                ScoreNode sn = (ScoreNode) resultNodes.get(nextPos);
+                ScoreNode[] sn = (ScoreNode[]) resultNodes.get(nextPos);
-                    next = (NodeImpl) itemMgr.getItem(sn.getNodeId());
+                    next = (NodeImpl) itemMgr.getItem(sn[selectorIndex].getNodeId());
-                            + sn.getNodeId() + ": " + e.toString());
+                            + sn[selectorIndex].getNodeId() + ": " + e.toString());

INS31 UPD43 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS23 INS31 INS31 UPD42 INS65 INS65 INS65 INS65 INS65 INS5 INS42 INS42 INS42 INS24 INS41 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS8 INS29 INS83 INS5 INS42 INS8 INS66 INS66 UPD43 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 MOV43 INS85 INS58 INS27 INS37 INS8 INS9 INS42 INS39 INS42 INS21 INS65 INS43 INS85 INS21 INS25 INS41 INS32 INS42 UPD42 INS39 INS59 INS42 INS40 INS42 INS25 INS7 INS65 INS42 INS32 INS38 INS8 INS11 INS42 INS42 INS42 INS34 INS27 INS8 INS22 INS42 INS2 INS42 INS32 INS53 INS5 INS32 INS34 INS34 INS5 INS27 INS38 INS41 INS52 INS42 MOV36 INS42 INS42 INS14 INS43 INS85 INS42 INS42 INS42 INS5 MOV43 INS85 UPD42 INS2 INS33 INS32 INS9 INS43 INS42 MOV43 INS85 UPD42 INS42 INS42 INS42 INS42 INS32 INS40 INS5 INS42 INS5 INS2 INS42 INS43 INS85 MOV43 INS85 UPD42 MOV42 INS42 INS42 INS42 INS2 INS2 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42