JCR-2074: JSR 283: New Event Types

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@765328 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.value.InternalValue;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.spi.commons.name.PathBuilder;
+import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
+import org.apache.jackrabbit.api.jsr283.observation.Event;
+import javax.jcr.PathNotFoundException;
-import javax.jcr.observation.Event;
+import java.util.Map;
+import java.util.HashMap;
+     * The key <code>srcAbsPath</code> in the info map.
+     */
+    static final String SRC_ABS_PATH = "srcAbsPath";
+
+    /**
+     * The key <code>destAbsPath</code> in the info map.
+     */
+    static final String DEST_ABS_PATH = "destAbsPath";
+
+    /**
+     * The key <code>srcChildRelPath</code> in the info map.
+     */
+    static final String SRC_CHILD_REL_PATH = "srcChildRelPath";
+
+    /**
+     * The key <code>destChildRelPath</code> in the info map.
+     */
+    static final String DEST_CHILD_REL_PATH = "destChildRelPath";
+
+    /**
+     * The info Map associated with this event.
+     */
+    private Map info = Collections.EMPTY_MAP;
+
+    /**
+     * <code>NODE_MOVED</code>. The parent node associated with this event type
+     * is the parent node of the destination of the move!
+     * This method creates an event state without an info map. A caller of this
+     * method must ensure that it is properly set afterwards.
+     *
+     * @param parentId   the id of the parent node associated with
+     *                   this <code>EventState</code>.
+     * @param parentPath the path of the parent node associated with
+     *                   this <code>EventState</code>.
+     * @param childId    the id of the child node associated with this event.
+     * @param childPath  the relative path of the child node that was moved.
+     * @param nodeType   the node type of the parent node.
+     * @param mixins     mixins assigned to the parent node.
+     * @param session    the session that moved the node.
+     * @param external   flag indicating whether this is an external event
+     * @return an <code>EventState</code> instance.
+     */
+    public static EventState nodeMoved(NodeId parentId,
+                                       Path parentPath,
+                                       NodeId childId,
+                                       Path.Element childPath,
+                                       Name nodeType,
+                                       Set mixins,
+                                       Session session,
+                                       boolean external) {
+
+        return new EventState(Event.NODE_MOVED, parentId, parentPath,
+                childId, childPath, nodeType, mixins, session, external);
+    }
+
+    /**
+     * Creates a new {@link javax.jcr.observation.Event} of type
+     * <code>NODE_MOVED</code>. The parent node associated with this event type
+     * is the parent node of the destination of the move!
+     *
+     * @param parentId the id of the parent node associated with this
+     *                 <code>EventState</code>.
+     * @param destPath the path of the destination of the move.
+     * @param childId  the id of the child node associated with this event.
+     * @param srcPath  the path of the source of the move.
+     * @param nodeType the node type of the parent node.
+     * @param mixins   mixins assigned to the parent node.
+     * @param session  the session that removed the node.
+     * @param external flag indicating whether this is an external event
+     * @return an <code>EventState</code> instance.
+     * @throws ItemStateException if <code>destPath</code> does not have a
+     *                            parent.
+     */
+    public static EventState nodeMoved(NodeId parentId,
+                                       Path destPath,
+                                       NodeId childId,
+                                       Path srcPath,
+                                       Name nodeType,
+                                       Set mixins,
+                                       Session session,
+                                       boolean external)
+            throws ItemStateException {
+        try {
+            EventState es = nodeMoved(parentId, destPath.getAncestor(1),
+                    childId, destPath.getNameElement(), nodeType, mixins,
+                    session, external);
+            Map info = new HashMap();
+            info.put(SRC_ABS_PATH, InternalValue.create(srcPath));
+            info.put(DEST_ABS_PATH, InternalValue.create(destPath));
+            es.setInfo(info);
+            return es;
+        } catch (PathNotFoundException e) {
+            // should never happen actually
+            String msg = "Unable to resolve parent for path: " + destPath;
+            log.error(msg);
+            throw new ItemStateException(msg, e);
+        }
+    }
+
+    /**
+     * Creates a new {@link javax.jcr.observation.Event} of type
+     * <code>NODE_MOVED</code>. The parent node associated with this event type
+     * is the parent node of the destination of the reorder!
+     *
+     * @param parentId      the id of the parent node associated with this
+     *                      <code>EventState</code>.
+     * @param parentPath    the path of the parent node associated with
+     *                      this <code>EventState</code>.
+     * @param childId       the id of the child node associated with this
+     *                      event.
+     * @param destChildPath the name element of the node before it was reordered.
+     * @param srcChildPath  the name element of the reordered node before the
+     *                      reorder operation.
+     * @param beforeChildPath the name element of the node before which the
+     *                      reordered node is placed. (may be <code>null</code>
+     *                      if reordered to the end.
+     * @param nodeType      the node type of the parent node.
+     * @param mixins        mixins assigned to the parent node.
+     * @param session       the session that removed the node.
+     * @param external      flag indicating whether this is an external event
+     * @return an <code>EventState</code> instance.
+     */
+    public static EventState nodeReordered(NodeId parentId,
+                                           Path parentPath,
+                                           NodeId childId,
+                                           Path.Element destChildPath,
+                                           Path.Element srcChildPath,
+                                           Path.Element beforeChildPath,
+                                           Name nodeType,
+                                           Set mixins,
+                                           Session session,
+                                           boolean external) {
+        EventState es = nodeMoved(parentId, parentPath, childId, destChildPath,
+               nodeType, mixins, session, external);
+        Map info = new HashMap();
+        info.put(SRC_CHILD_REL_PATH, createValue(srcChildPath));
+        InternalValue value = null;
+        if (beforeChildPath != null) {
+            value = createValue(beforeChildPath);
+        }
+        info.put(DEST_CHILD_REL_PATH, value);
+        es.setInfo(info);
+        return es;
+    }
+
+    /**
+     * Creates a new {@link javax.jcr.observation.Event} of type
+     * @return an unmodifiable info Map.
+     */
+    public Map getInfo() {
+        return info;
+    }
+
+    /**
+     * Sets a new info map for this event.
+     *
+     * @param info the new info map.
+     */
+    public void setInfo(Map info) {
+        this.info = Collections.unmodifiableMap(new HashMap(info));
+    }
+
+    /**
+            sb.append(", Info: ").append(info);
+            h = 37 * h + info.hashCode();
-                    && this.session.equals(other.session);
+                    && this.session.equals(other.session)
+                    && this.info.equals(other.info);
+        } else if (eventType == Event.NODE_MOVED) {
+            return "NodeMoved";
+    /**
+     * Creates an internal path value from the given path <code>element</code>.
+     *
+     * @param element the path element.
+     * @return an internal value wrapping the path element.
+     */
+    private static InternalValue createValue(Path.Element element) {
+        PathBuilder builder = new PathBuilder();
+        builder.addFirst(element);
+        try {
+            return InternalValue.create(builder.getPath());
+        } catch (MalformedPathException e) {
+            // this exception is only thrown when number of element is zero
+            throw new InternalError();
+        }
+    }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS40 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS54 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS60 INS21 INS60 INS25 INS21 INS21 INS41 INS65 INS42 INS41 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS21 INS54 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS14 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS25 INS66 INS42 INS66 INS66 INS40 INS43 INS59 INS32 INS8 INS12 INS40 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS60 INS60 INS21 INS21 INS21 INS41 INS44 INS8 INS40 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS21 INS21 INS27 INS8 MOV25 INS42 INS42 INS14 INS42 INS42 INS42 INS41 INS44 INS8 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS43 INS42 INS60 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS7 INS52 INS42 INS42 INS42 INS14 INS32 INS7 INS27 INS42 INS40 INS41 INS43 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS27 MOV27 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS27 INS32 INS22 INS42 INS40 INS42 INS42 INS43 INS42 INS42 INS34 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS42 INS52 INS42 INS42