JCR-2056: Binary interfaces



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@779642 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Binary;
+import java.io.RandomAccessFile;
+         * @see QValue#getBinary()
+         */
+        public Binary getBinary() throws RepositoryException {
+            // TODO FIXME consolidate Binary implementations
+            return new Binary() {
+                public InputStream getStream() throws RepositoryException {
+                    return QValueImpl.this.getStream();
+                }
+
+                public int read(byte[] b, long position) throws IOException, RepositoryException {
+                    InputStream in = getStream();
+                    in.skip(position);
+                    return in.read(b);
+                }
+
+                public long getSize() throws RepositoryException {
+                    return getLength();
+                }
+            };
+        }
+
+        /**
-    private static class BinaryQValue implements QValue, Serializable {
+    private static class BinaryQValue implements QValue, Binary, Serializable {
-            return Boolean.valueOf(getString()).booleanValue();
+            return Boolean.valueOf(getString());
+         * @see QValue#getBinary()
+         */
+        public Binary getBinary() throws RepositoryException {
+            return this;
+        }
+
+        /**
+        //-----------------------------< javx.jcr.Binary >----------------------
+        /**
+         * {@inheritDoc}
+         */
+        public int read(byte[] b, long position) throws IOException, RepositoryException {
+            if (file != null) {
+                // this instance is backed by a temp file
+                RandomAccessFile raf = new RandomAccessFile(file, "r");
+                raf.seek(position);
+                return raf.read(b);
+            } else {
+                // this instance is backed by an in-memory buffer
+                int length = Math.min(b.length, buffer.length - (int) position);
+                if (length > 0) {
+                    System.arraycopy(buffer, (int) position, b, 0, length);
+                    return length;
+                } else {
+                    return -1;
+                }
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public long getSize() throws RepositoryException {
+            return getLength();
+        }
+

INS26 INS26 INS40 INS40 INS31 INS43 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS43 INS8 INS42 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS65 INS42 INS42 INS41 INS65 INS42 INS42 INS41 INS65 INS5 INS42 INS39 INS42 INS42 INS42 INS25 INS65 INS42 INS41 INS68 INS14 MOV32 INS68 INS52 INS65 INS39 INS85 INS27 INS8 INS8 INS65 INS32 INS42 INS42 INS43 INS1 INS42 INS42 INS42 INS33 INS60 INS21 INS41 INS60 INS25 INS42 INS42 INS31 INS31 INS31 INS43 INS59 INS32 INS32 INS39 INS59 INS27 INS8 INS8 INS83 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS21 INS41 INS41 INS42 INS42 INS41 INS5 INS42 INS39 INS42 INS42 INS42 INS60 INS21 INS41 INS42 INS41 INS43 INS42 INS45 INS42 INS42 INS40 INS27 INS32 INS42 INS38 INS32 INS39 INS85 INS43 INS59 INS32 INS32 INS32 INS42 INS40 INS11 INS42 INS42 INS42 INS11 INS42 INS34 INS42 INS34 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS39 INS42 INS42 INS42 DEL42 DEL32