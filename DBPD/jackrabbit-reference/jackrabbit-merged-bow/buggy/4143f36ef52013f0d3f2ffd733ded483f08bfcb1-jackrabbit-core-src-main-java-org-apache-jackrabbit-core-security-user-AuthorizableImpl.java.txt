JCR-2703 : UserManagement: Add Membership Cache

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@984356 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.PropertyImpl;
-import javax.jcr.Value;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.AccessDeniedException;
-import javax.jcr.ItemVisitor;
-import javax.jcr.Node;
-import javax.jcr.util.TraversingItemVisitor;
+import javax.jcr.Value;
+import java.util.Collection;
+import java.util.HashSet;
-import java.util.HashSet;
-    protected AuthorizableImpl(NodeImpl node, UserManagerImpl userManager)
-            throws RepositoryException {
+    protected AuthorizableImpl(NodeImpl node, UserManagerImpl userManager) {
-        Set<Group> memberShip = new HashSet<Group>();
-        collectMembership(memberShip, false);
-        return memberShip.iterator();
+        return collectMembership(false);
-        Set<Group> memberShip = new HashSet<Group>();
-        collectMembership(memberShip, true);
-        return memberShip.iterator();
+        return collectMembership(true);
-        if (!isGroup() && ((User) this).isAdmin()) {
+        boolean isGroup = isGroup();
+        if (!isGroup && ((User) this).isAdmin()) {
+
+        // upon successful removal of a Group -> clear the membership cache
+        if (isGroup) {
+            userManager.getMembershipCache().clear();
+        }
-    private void collectMembership(final Set<Group> groups, boolean includeIndirect) throws RepositoryException {
-        PropertyIterator refs = getMembershipReferences();
-        if (refs != null) {
-            while (refs.hasNext()) {
-                try {
-                    NodeImpl n = (NodeImpl) refs.nextProperty().getParent();
-                    if (n.isNodeType(NT_REP_GROUP)) {
-                        Group group = userManager.createGroup(n);
-                        // only retrieve indirect membership if the group is not
-                        // yet present (detected eventual circular membership).
-                        if (groups.add(group) && includeIndirect) {
-                            ((AuthorizableImpl) group).collectMembership(groups, true);
-                        }
-                    } else {
-                        // weak-ref property 'rep:members' that doesn't reside under an
-                        // group node -> doesn't represent a valid group member.
-                        log.debug("Invalid member reference to '" + this + "' -> Not included in membership set.");
-                    }
-                } catch (ItemNotFoundException e) {
-                    // group node doesn't exist  -> -> ignore exception
-                    // and skip this reference from membership list.
-                } catch (AccessDeniedException e) {
-                    // not allowed to see the group node -> ignore exception
-                    // and skip this reference from membership list.
-                }
-            }
+    private Iterator<Group> collectMembership(boolean includeIndirect) throws RepositoryException {
+        Collection<String> groupNodeIds;
+        if (includeIndirect) {
+            groupNodeIds = userManager.getMembershipCache().getMemberOf(node.getIdentifier());
-            // workaround for failure of Node#getWeakReferences
-            // traverse the tree below groups-path and collect membership manually.
-            log.info("Traversing groups tree to collect membership.");
-            ItemVisitor visitor = new TraversingItemVisitor.Default() {
-                @Override
-                protected void entering(Property property, int level) throws RepositoryException {
-                    PropertyImpl pImpl = (PropertyImpl) property;
-                    NodeImpl n = (NodeImpl) pImpl.getParent();
-                    if (P_MEMBERS.equals(pImpl.getQName()) && n.isNodeType(NT_REP_GROUP)) {
-                        for (Value value : property.getValues()) {
-                            if (value.getString().equals(node.getIdentifier())) {
-                                Group gr = (Group) userManager.getAuthorizable(n);
-                                groups.add(gr);
-                            }
-                        }
-                    }
-                }
-            };
-            Node groupsNode = getSession().getNode(userManager.getGroupsPath());
-            visitor.visit(groupsNode);
+            groupNodeIds = userManager.getMembershipCache().getDeclaredMemberOf(node.getIdentifier());
-    }
-    /**
-     * @return the iterator returned by {@link Node#getWeakReferences(String)}
-     * or <code>null</code> if the method call fails with <code>RepositoryException</code>.
-     * See fallback scenario above.
-     */
-    private PropertyIterator getMembershipReferences() {
-        PropertyIterator refs = null;
-        try {
-            refs = node.getWeakReferences(getSession().getJCRName(P_MEMBERS));
-        } catch (RepositoryException e) {
-            log.error("Failed to retrieve membership references of " + this + ".", e);
+        Set<Group> groups = new HashSet<Group>(groupNodeIds.size());
+        for (String identifier : groupNodeIds) {
+            try {
+                NodeImpl n = (NodeImpl) getSession().getNodeByIdentifier(identifier);
+                Group group = userManager.createGroup(n);
+                groups.add(group);
+            } catch (RepositoryException e) {
+                // group node doesn't exist or cannot be read -> ignore.
+            }
-        return refs;
+        return groups.iterator();

MOV26 MOV26 MOV26 UPD40 INS31 MOV83 INS74 INS42 MOV44 MOV43 INS8 INS41 INS41 INS60 INS25 UPD43 MOV43 MOV43 INS60 MOV25 MOV60 INS70 MOV41 INS32 INS32 INS39 INS59 INS42 INS8 UPD42 INS74 MOV59 INS42 INS8 MOV8 INS44 INS42 INS8 INS32 MOV42 MOV9 MOV42 MOV9 INS42 MOV32 INS21 INS43 INS43 INS42 INS21 INS21 UPD42 MOV43 INS42 MOV54 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS7 INS7 INS32 MOV8 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS42 MOV32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 MOV43 INS59 MOV32 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS11 MOV43 INS32 MOV32 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL25 DEL8 DEL70 DEL8 DEL42 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL9 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL52 DEL45 DEL27 DEL42 DEL32 DEL21 DEL42 DEL39 DEL42 DEL83 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL40 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL43 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL60 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL42 DEL42 DEL69 DEL68 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL8 DEL31