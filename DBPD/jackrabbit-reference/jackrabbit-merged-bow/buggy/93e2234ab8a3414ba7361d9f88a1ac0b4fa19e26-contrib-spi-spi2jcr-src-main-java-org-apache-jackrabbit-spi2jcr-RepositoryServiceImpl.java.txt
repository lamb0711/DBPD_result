- Observation support in spi2jcr

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@512981 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.observation.ObservationManager;
+import javax.jcr.observation.EventListener;
+import java.util.Arrays;
+import java.util.IdentityHashMap;
+import java.util.Collections;
+     * Maps session info instances to {@link EventSubscription}s.
+     */
+    private final Map subscriptions = Collections.synchronizedMap(new IdentityHashMap());
+
+    /**
+     * Set to <code>true</code> if the underlying JCR repository supports
+     * observation.
+     */
+    private final boolean supportsObservation;
+
+    /**
+        this.supportsObservation = "true".equals(repository.getDescriptor(Repository.OPTION_OBSERVATION_SUPPORTED));
-            if (keys[i].equals(Repository.OPTION_TRANSACTIONS_SUPPORTED)
-                    || keys[i].equals(Repository.OPTION_OBSERVATION_SUPPORTED)) {
+            if (keys[i].equals(Repository.OPTION_TRANSACTIONS_SUPPORTED)) {
+        subscriptions.remove(sessionInfo);
-    public void importXml(SessionInfo sessionInfo,
-                          NodeId parentId,
-                          InputStream xmlStream,
-                          int uuidBehaviour) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        String path = pathForId(parentId, sInfo);
-        try {
-            sInfo.getSession().getWorkspace().importXML(path, xmlStream, uuidBehaviour);
-        } catch (IOException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void move(SessionInfo sessionInfo,
-                     NodeId srcNodeId,
-                     NodeId destParentNodeId,
-                     QName destName) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        String srcPath = pathForId(srcNodeId, sInfo);
-        StringBuffer destPath = new StringBuffer(pathForId(destParentNodeId, sInfo));
-        try {
-            if (destPath.length() > 1) {
-                destPath.append("/");
+    public void importXml(final SessionInfo sessionInfo,
+                          final NodeId parentId,
+                          final InputStream xmlStream,
+                          final int uuidBehaviour) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                String path = pathForId(parentId, sInfo);
+                try {
+                    sInfo.getSession().getWorkspace().importXML(path, xmlStream, uuidBehaviour);
+                } catch (IOException e) {
+                    throw new RepositoryException(e.getMessage(), e);
+                }
+                return null;
-            destPath.append(NameFormat.format(destName, sInfo.getNamespaceResolver()));
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
-        sInfo.getSession().getWorkspace().move(srcPath, destPath.toString());
+        }, sInfo);
-    public void copy(SessionInfo sessionInfo,
-                     String srcWorkspaceName,
-                     NodeId srcNodeId,
-                     NodeId destParentNodeId,
-                     QName destName) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        String srcPath = pathForId(srcNodeId, sInfo);
-        StringBuffer destPath = new StringBuffer(pathForId(destParentNodeId, sInfo));
-        try {
-            if (destPath.length() > 1) {
-                destPath.append("/");
+    public void move(final SessionInfo sessionInfo,
+                     final NodeId srcNodeId,
+                     final NodeId destParentNodeId,
+                     final QName destName) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                String srcPath = pathForId(srcNodeId, sInfo);
+                StringBuffer destPath = new StringBuffer(pathForId(destParentNodeId, sInfo));
+                try {
+                    if (destPath.length() > 1) {
+                        destPath.append("/");
+                    }
+                    destPath.append(NameFormat.format(destName, sInfo.getNamespaceResolver()));
+                } catch (NoPrefixDeclaredException e) {
+                    throw new RepositoryException(e.getMessage(), e);
+                }
+                sInfo.getSession().getWorkspace().move(srcPath, destPath.toString());
+                return null;
-            destPath.append(NameFormat.format(destName, sInfo.getNamespaceResolver()));
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
-        Workspace ws = sInfo.getSession().getWorkspace();
-        if (sInfo.getWorkspaceName().equals(srcWorkspaceName)) {
-            // inner-workspace copy
-            ws.copy(srcPath, destPath.toString());
-        } else {
-            ws.copy(srcWorkspaceName, srcPath, destPath.toString());
-        }
+        }, sInfo);
-    public void update(SessionInfo sessionInfo,
-                       NodeId nodeId,
-                       String srcWorkspaceName)
+    public void copy(final SessionInfo sessionInfo,
+                     final String srcWorkspaceName,
+                     final NodeId srcNodeId,
+                     final NodeId destParentNodeId,
+                     final QName destName) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                String srcPath = pathForId(srcNodeId, sInfo);
+                StringBuffer destPath = new StringBuffer(pathForId(destParentNodeId, sInfo));
+                try {
+                    if (destPath.length() > 1) {
+                        destPath.append("/");
+                    }
+                    destPath.append(NameFormat.format(destName, sInfo.getNamespaceResolver()));
+                } catch (NoPrefixDeclaredException e) {
+                    throw new RepositoryException(e.getMessage(), e);
+                }
+                Workspace ws = sInfo.getSession().getWorkspace();
+                if (sInfo.getWorkspaceName().equals(srcWorkspaceName)) {
+                    // inner-workspace copy
+                    ws.copy(srcPath, destPath.toString());
+                } else {
+                    ws.copy(srcWorkspaceName, srcPath, destPath.toString());
+                }
+                return null;
+            }
+        }, sInfo);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void update(final SessionInfo sessionInfo,
+                       final NodeId nodeId,
+                       final String srcWorkspaceName)
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        getNode(nodeId, sInfo).update(srcWorkspaceName);
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                getNode(nodeId, sInfo).update(srcWorkspaceName);
+                return null;
+            }
+        }, sInfo);
-    public void clone(SessionInfo sessionInfo,
-                      String srcWorkspaceName,
-                      NodeId srcNodeId,
-                      NodeId destParentNodeId,
-                      QName destName,
-                      boolean removeExisting) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        String srcPath = pathForId(srcNodeId, sInfo);
-        StringBuffer destPath = new StringBuffer(pathForId(destParentNodeId, sInfo));
-        try {
-            if (destPath.length() > 1) {
-                destPath.append("/");
+    public void clone(final SessionInfo sessionInfo,
+                      final String srcWorkspaceName,
+                      final NodeId srcNodeId,
+                      final NodeId destParentNodeId,
+                      final QName destName,
+                      final boolean removeExisting) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                String srcPath = pathForId(srcNodeId, sInfo);
+                StringBuffer destPath = new StringBuffer(pathForId(destParentNodeId, sInfo));
+                try {
+                    if (destPath.length() > 1) {
+                        destPath.append("/");
+                    }
+                    destPath.append(NameFormat.format(destName, sInfo.getNamespaceResolver()));
+                } catch (NoPrefixDeclaredException e) {
+                    throw new RepositoryException(e.getMessage(), e);
+                }
+                sInfo.getSession().getWorkspace().clone(srcWorkspaceName, srcPath,
+                        destPath.toString(), removeExisting);
+                return null;
-            destPath.append(NameFormat.format(destName, sInfo.getNamespaceResolver()));
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
-        sInfo.getSession().getWorkspace().clone(srcWorkspaceName, srcPath,
-                destPath.toString(), removeExisting);
+        }, sInfo);
-    public LockInfo lock(SessionInfo sessionInfo,
-                         NodeId nodeId,
-                         boolean deep,
-                         boolean sessionScoped)
+    public LockInfo lock(final SessionInfo sessionInfo,
+                         final NodeId nodeId,
+                         final boolean deep,
+                         final boolean sessionScoped)
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        Node n = getNode(nodeId, sInfo);
-        n.lock(deep, sessionScoped);
-        return new LockInfoImpl(n, idFactory, sInfo.getNamespaceResolver());
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        return (LockInfo) executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                Node n = getNode(nodeId, sInfo);
+                n.lock(deep, sessionScoped);
+                return new LockInfoImpl(n, idFactory, sInfo.getNamespaceResolver());
+            }
+        }, sInfo);
-    public void unlock(SessionInfo sessionInfo, NodeId nodeId)
+    public void unlock(final SessionInfo sessionInfo, final NodeId nodeId)
-        getNode(nodeId, getSessionInfoImpl(sessionInfo)).unlock();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void checkin(SessionInfo sessionInfo, NodeId nodeId)
-            throws VersionException, UnsupportedRepositoryOperationException, InvalidItemStateException, LockException, RepositoryException {
-        getNode(nodeId, getSessionInfoImpl(sessionInfo)).checkin();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void checkout(SessionInfo sessionInfo, NodeId nodeId)
-            throws UnsupportedRepositoryOperationException, LockException, RepositoryException {
-        getNode(nodeId, getSessionInfoImpl(sessionInfo)).checkout();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void removeVersion(SessionInfo sessionInfo,
-                              NodeId versionHistoryId,
-                              NodeId versionId)
-            throws ReferentialIntegrityException, AccessDeniedException, UnsupportedRepositoryOperationException, VersionException, RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        Node vHistory = getNode(versionHistoryId, sInfo);
-        Node version = getNode(versionId, sInfo);
-        if (vHistory instanceof VersionHistory) {
-            ((VersionHistory) vHistory).removeVersion(version.getName());
-        } else {
-            throw new RepositoryException("versionHistoryId does not reference a VersionHistor node");
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void restore(SessionInfo sessionInfo,
-                        NodeId nodeId,
-                        NodeId versionId,
-                        boolean removeExisting) throws VersionException, PathNotFoundException, ItemExistsException, UnsupportedRepositoryOperationException, LockException, InvalidItemStateException, RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        Node n = getNode(nodeId, sInfo);
-        Node v = getNode(versionId, sInfo);
-        n.restore(v.getName(), removeExisting);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void restore(SessionInfo sessionInfo,
-                        NodeId[] versionIds,
-                        boolean removeExisting) throws ItemExistsException, UnsupportedRepositoryOperationException, VersionException, LockException, InvalidItemStateException, RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        Version[] versions = new Version[versionIds.length];
-        for (int i = 0; i < versions.length; i++) {
-            Node n = getNode(versionIds[i], sInfo);
-            if (n instanceof Version) {
-                versions[i] = (Version) n;
-            } else {
-                throw new RepositoryException(n.getPath() +
-                        " does not reference a Version node");
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                getNode(nodeId, sInfo).unlock();
+                return null;
-        }
-        sInfo.getSession().getWorkspace().restore(versions, removeExisting);
+        }, sInfo);
-    public IdIterator merge(SessionInfo sessionInfo,
-                            NodeId nodeId,
-                            String srcWorkspaceName,
-                            boolean bestEffort)
+    public void checkin(final SessionInfo sessionInfo, final NodeId nodeId)
+            throws VersionException, UnsupportedRepositoryOperationException, InvalidItemStateException, LockException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                getNode(nodeId, getSessionInfoImpl(sessionInfo)).checkin();
+                return null;
+            }
+        }, sInfo);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void checkout(final SessionInfo sessionInfo, final NodeId nodeId)
+            throws UnsupportedRepositoryOperationException, LockException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                getNode(nodeId, getSessionInfoImpl(sessionInfo)).checkout();
+                return null;
+            }
+        }, sInfo);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void removeVersion(final SessionInfo sessionInfo,
+                              final NodeId versionHistoryId,
+                              final NodeId versionId)
+            throws ReferentialIntegrityException, AccessDeniedException, UnsupportedRepositoryOperationException, VersionException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                Node vHistory = getNode(versionHistoryId, sInfo);
+                Node version = getNode(versionId, sInfo);
+                if (vHistory instanceof VersionHistory) {
+                    ((VersionHistory) vHistory).removeVersion(version.getName());
+                } else {
+                    throw new RepositoryException("versionHistoryId does not reference a VersionHistor node");
+                }
+                return null;
+            }
+        }, sInfo);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void restore(final SessionInfo sessionInfo,
+                        final NodeId nodeId,
+                        final NodeId versionId,
+                        final boolean removeExisting) throws VersionException, PathNotFoundException, ItemExistsException, UnsupportedRepositoryOperationException, LockException, InvalidItemStateException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                Node n = getNode(nodeId, sInfo);
+                Node v = getNode(versionId, sInfo);
+                n.restore(v.getName(), removeExisting);
+                return null;
+            }
+        }, sInfo);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void restore(final SessionInfo sessionInfo,
+                        final NodeId[] versionIds,
+                        final boolean removeExisting) throws ItemExistsException, UnsupportedRepositoryOperationException, VersionException, LockException, InvalidItemStateException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                Version[] versions = new Version[versionIds.length];
+                for (int i = 0; i < versions.length; i++) {
+                    Node n = getNode(versionIds[i], sInfo);
+                    if (n instanceof Version) {
+                        versions[i] = (Version) n;
+                    } else {
+                        throw new RepositoryException(n.getPath() +
+                                " does not reference a Version node");
+                    }
+                }
+                sInfo.getSession().getWorkspace().restore(versions, removeExisting);
+                return null;
+            }
+        }, sInfo);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public IdIterator merge(final SessionInfo sessionInfo,
+                            final NodeId nodeId,
+                            final String srcWorkspaceName,
+                            final boolean bestEffort)
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        Node n = getNode(nodeId, sInfo);
-        NodeIterator it = n.merge(srcWorkspaceName, bestEffort);
-        List ids = new ArrayList();
-        while (it.hasNext()) {
-            ids.add(idFactory.createNodeId(it.nextNode(),
-                    sInfo.getNamespaceResolver()));
-        }
-        return new IteratorHelper(ids);
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        return (IdIterator) executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                Node n = getNode(nodeId, sInfo);
+                NodeIterator it = n.merge(srcWorkspaceName, bestEffort);
+                List ids = new ArrayList();
+                while (it.hasNext()) {
+                    ids.add(idFactory.createNodeId(it.nextNode(),
+                            sInfo.getNamespaceResolver()));
+                }
+                return new IteratorHelper(ids);
+            }
+        }, sInfo);
-    public void addVersionLabel(SessionInfo sessionInfo,
-                                NodeId versionHistoryId,
-                                NodeId versionId,
-                                QName label,
-                                boolean moveLabel) throws VersionException, RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        String jcrLabel;
-        try {
-            jcrLabel = NameFormat.format(label, sInfo.getNamespaceResolver());
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
-        Node version = getNode(versionId, sInfo);
-        Node vHistory = getNode(versionHistoryId, sInfo);
-        if (vHistory instanceof VersionHistory) {
-            ((VersionHistory) vHistory).addVersionLabel(
-                    version.getName(), jcrLabel, moveLabel);
-        } else {
-            throw new RepositoryException("versionHistoryId does not reference a VersionHistory node");
-        }
+    public void addVersionLabel(final SessionInfo sessionInfo,
+                                final NodeId versionHistoryId,
+                                final NodeId versionId,
+                                final QName label,
+                                final boolean moveLabel) throws VersionException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                String jcrLabel;
+                try {
+                    jcrLabel = NameFormat.format(label, sInfo.getNamespaceResolver());
+                } catch (NoPrefixDeclaredException e) {
+                    throw new RepositoryException(e.getMessage(), e);
+                }
+                Node version = getNode(versionId, sInfo);
+                Node vHistory = getNode(versionHistoryId, sInfo);
+                if (vHistory instanceof VersionHistory) {
+                    ((VersionHistory) vHistory).addVersionLabel(
+                            version.getName(), jcrLabel, moveLabel);
+                } else {
+                    throw new RepositoryException("versionHistoryId does not reference a VersionHistory node");
+                }
+                return null;
+            }
+        }, sInfo);
-    public void removeVersionLabel(SessionInfo sessionInfo,
-                                   NodeId versionHistoryId,
-                                   NodeId versionId,
-                                   QName label) throws VersionException, RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        String jcrLabel;
-        try {
-            jcrLabel = NameFormat.format(label, sInfo.getNamespaceResolver());
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
-        Node vHistory = getNode(versionHistoryId, sInfo);
-        if (vHistory instanceof VersionHistory) {
-            ((VersionHistory) vHistory).removeVersionLabel(jcrLabel);
-        } else {
-            throw new RepositoryException("versionHistoryId does not reference a VersionHistory node");
-        }
+    public void removeVersionLabel(final SessionInfo sessionInfo,
+                                   final NodeId versionHistoryId,
+                                   final NodeId versionId,
+                                   final QName label) throws VersionException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                String jcrLabel;
+                try {
+                    jcrLabel = NameFormat.format(label, sInfo.getNamespaceResolver());
+                } catch (NoPrefixDeclaredException e) {
+                    throw new RepositoryException(e.getMessage(), e);
+                }
+                Node vHistory = getNode(versionHistoryId, sInfo);
+                if (vHistory instanceof VersionHistory) {
+                    ((VersionHistory) vHistory).removeVersionLabel(jcrLabel);
+                } else {
+                    throw new RepositoryException("versionHistoryId does not reference a VersionHistory node");
+                }
+                return null;
+            }
+        }, sInfo);
-     * TODO: implement
+     * {@inheritDoc}
-        throw new UnsupportedRepositoryOperationException("not yet implemented");
+        // make sure there is an event subscription for this session info
+        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        if (!subscriptions.containsKey(sInfo)) {
+            EventSubscription subscr = new EventSubscription(
+                    idFactory, sInfo.getNamespaceResolver());
+            ObservationManager obsMgr = sInfo.getSession().getWorkspace().getObservationManager();
+            obsMgr.addEventListener(subscr, EventSubscription.ALL_EVENTS,
+                    "/", true, null, null, true);
+            subscriptions.put(sInfo, subscr);
+        }
+
+        Set ntNames = null;
+        if (nodeTypeName != null) {
+            ntNames = new HashSet(Arrays.asList(nodeTypeName));
+        }
+        return new EventFilterImpl(eventTypes, absPath, isDeep, uuid, ntNames, noLocal);
-     * TODO: implement
+     * {@inheritDoc}
-        throw new UnsupportedRepositoryOperationException("not yet implemented");
+        EventSubscription subscr = (EventSubscription) subscriptions.get(sessionInfo);
+        if (subscr != null) {
+            return subscr.getEventBundles(filters, timeout);
+        } else {
+            // sleep for at most one second, then return
+            Thread.sleep(Math.min(timeout, 1000));
+            return new EventBundle[0];
+        }
-                public void run() throws RepositoryException {
+                public Object run() throws RepositoryException {
+                    return null;
-                public void run() throws RepositoryException {
+                public Object run() throws RepositoryException {
+                    return null;
-                public void run() throws RepositoryException {
+                public Object run() throws RepositoryException {
+                    return null;
-                public void run() throws RepositoryException {
+                public Object run() throws RepositoryException {
+                    return null;
-                public void run() throws RepositoryException {
+                public Object run() throws RepositoryException {
+                    return null;
-                public void run() throws RepositoryException {
+                public Object run() throws RepositoryException {
+                    return null;
-                public void run() throws RepositoryException {
+                public Object run() throws RepositoryException {
+                    return null;
-                public void run() throws RepositoryException {
+                public Object run() throws RepositoryException {
+                    return null;
-                public void run() throws RepositoryException {
+                public Object run() throws RepositoryException {
+                    return null;
-                public void run() throws RepositoryException {
-                    sInfo.getSession().save();
+                public Object run() throws RepositoryException {
+                    executeWithLocalEvents(new Callable() {
+                        public Object run() throws RepositoryException {
+                            sInfo.getSession().save();
+                            return null;
+                        }
+                    }, sInfo);
+                    return null;
-        public void run() throws RepositoryException;
+        public Object run() throws RepositoryException;
+
+    private Object executeWithLocalEvents(Callable call, SessionInfoImpl sInfo)
+            throws RepositoryException {
+        if (supportsObservation) {
+            // register local event listener
+            EventSubscription subscr = (EventSubscription) subscriptions.get(sInfo);
+            if (subscr != null) {
+                ObservationManager obsMgr = sInfo.getSession().getWorkspace().getObservationManager();
+                EventListener listener = subscr.getLocalEventListener();
+                obsMgr.addEventListener(listener, EventSubscription.ALL_EVENTS,
+                        "/", true, null, null, false);
+                try {
+                    return call.run();
+                } finally {
+                    obsMgr.removeEventListener(listener);
+                }
+            }
+        }
+        // if we get here simply run as is
+        return call.run();
+    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS59 INS43 INS8 MOV29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 MOV29 INS83 INS39 INS42 INS44 MOV44 INS44 INS44 INS44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 MOV44 INS43 INS8 MOV29 INS83 INS39 INS42 INS44 MOV44 INS44 INS44 INS44 INS44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 MOV29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 MOV43 MOV43 MOV43 MOV43 INS43 INS8 INS8 INS43 INS8 MOV29 INS83 INS39 INS42 INS44 INS44 MOV43 MOV43 INS43 INS8 MOV29 INS83 INS39 INS42 INS44 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 MOV29 INS83 INS39 INS42 INS44 INS44 MOV44 INS44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 INS8 MOV29 INS83 INS39 INS42 INS44 MOV44 INS44 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 INS8 MOV29 INS83 INS43 INS42 INS44 INS44 MOV44 INS44 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 INS8 MOV29 INS83 INS39 INS42 INS44 MOV44 MOV44 MOV44 INS44 MOV43 MOV43 INS8 MOV29 INS83 INS39 INS42 INS44 MOV44 MOV44 MOV44 MOV43 MOV43 INS8 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS42 INS32 INS65 INS42 INS21 INS21 INS83 INS83 INS83 INS83 INS42 INS60 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS21 INS83 INS43 INS42 INS83 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS21 INS83 INS83 INS83 INS42 INS60 INS21 INS83 INS43 INS42 INS83 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS60 INS21 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS42 INS60 INS41 INS83 INS83 INS60 INS21 INS83 INS83 INS42 INS60 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS21 INS83 INS43 INS42 INS83 UPD42 INS83 INS60 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS83 UPD42 INS83 INS39 INS42 INS42 INS60 INS21 INS83 INS43 INS42 INS83 INS83 INS39 INS42 INS42 INS60 INS21 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS83 INS39 INS42 INS42 INS60 INS41 INS83 INS43 INS42 INS83 UPD42 INS83 UPD42 INS83 INS83 INS39 INS42 INS60 INS21 INS83 INS43 INS42 INS83 UPD42 INS83 UPD42 INS83 INS60 INS21 INS65 MOV60 INS25 INS60 INS25 INS41 INS65 INS60 INS25 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS41 INS66 INS65 INS66 INS42 INS42 INS14 INS66 INS66 INS7 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS83 INS43 INS59 INS11 INS83 INS43 INS59 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS83 INS43 INS59 INS32 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS83 INS43 INS59 INS32 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS83 INS43 INS59 INS11 INS42 INS83 INS43 INS59 INS32 INS42 INS83 INS43 INS59 INS32 INS65 INS38 INS8 INS43 INS59 INS27 INS8 INS14 INS65 INS43 INS59 INS27 INS8 INS8 INS21 INS42 INS42 INS42 INS42 INS8 INS32 INS42 INS43 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 MOV32 MOV43 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 MOV43 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS32 INS60 INS60 INS21 INS21 INS42 INS42 INS33 INS42 INS33 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS11 INS42 INS33 INS41 INS21 INS41 INS32 INS60 INS25 INS42 INS42 INS42 INS52 INS42 INS45 INS42 INS32 MOV32 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS14 INS42 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS1 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS7 INS42 INS43 INS32 INS32 INS32 INS3 INS42 INS14 INS43 INS59 INS27 INS8 INS42 INS42 INS40 INS42 INS31 INS42 MOV31 INS42 MOV31 INS42 INS31 INS42 MOV31 INS43 INS1 INS42 INS31 INS42 INS31 INS42 MOV31 INS42 MOV31 INS42 MOV31 INS42 MOV31 INS43 INS1 INS42 MOV31 INS42 MOV31 UPD42 MOV42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS45 INS9 INS33 INS33 INS9 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS5 INS34 INS43 INS1 INS42 INS42 INS11 INS42 INS33 INS60 INS60 INS21 INS54 INS83 INS43 INS42 MOV43 MOV8 INS43 INS42 INS43 INS43 INS42 INS43 INS83 INS43 INS42 MOV43 MOV8 INS43 INS42 INS43 INS42 MOV31 INS83 INS43 INS42 INS43 MOV8 INS83 INS43 INS42 MOV43 MOV8 INS43 INS42 INS43 INS42 INS43 INS43 INS42 INS43 INS42 INS42 MOV31 INS43 INS42 INS43 INS43 UPD42 INS43 INS43 INS42 INS32 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS34 INS43 INS85 INS42 INS31 INS43 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS41 UPD42 MOV42 UPD42 MOV42 INS41 UPD42 MOV42 UPD42 MOV42 INS41 INS42 INS41 UPD42 MOV42 UPD42 MOV42 INS41 INS43 INS42 INS42 INS42 INS41 INS42 INS41 UPD42 MOV42 INS41 UPD42 MOV42 UPD42 MOV42 INS41 UPD42 MOV42 INS41 UPD42 MOV42 INS41 INS43 INS42 UPD42 MOV42 INS42 INS41 INS42 UPD42 MOV42 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS83 INS43 INS42 INS43 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS45 INS9 INS33 INS33 INS9 INS41 INS21 INS33 INS33 INS33 INS33 INS33 UPD42 MOV42 INS33 INS33 INS33 INS33 INS33 INS33 UPD42 MOV42 INS33 INS33 INS42 INS42 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS42 INS41 INS32 INS42 INS42 INS42 INS32 INS32 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS43 INS42 INS41 INS33 DEL42 DEL42 DEL2 DEL42 DEL40 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL43 DEL42 DEL44 DEL66 DEL65 DEL43 DEL45 DEL14 DEL53 DEL8 DEL66 DEL65 DEL43 DEL45 DEL14 DEL53 DEL39 DEL39 DEL39 DEL39 DEL39 DEL39 DEL39 DEL39 DEL39 DEL39 DEL39