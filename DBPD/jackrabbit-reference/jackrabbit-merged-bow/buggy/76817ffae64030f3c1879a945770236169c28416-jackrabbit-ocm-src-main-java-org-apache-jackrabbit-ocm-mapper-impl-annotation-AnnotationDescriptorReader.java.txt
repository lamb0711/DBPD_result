Fix for JCR-1325 and review support for Collection & Map. 
The mapping definition can be simplified with parameterized collections and maps. In this case the ElementClass setting is not necessary.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@650283 13f79535-47bb-0310-9956-ffa450edef68

+		String fieldName = "";
-
+				fieldName = propertyDescriptor.getName();
-			throw new InitMapperException("Impossible to read the mapping descriptor from the getter", e);
+			throw new InitMapperException("Impossible to read the mapping descriptor from the getter for class : " +
+					clazz.toString() +
+					(fieldName == null ? "" : " for field : " + fieldName), e);
-		collectionDescriptor.setCollectionClassName(field.getName());
+		collectionDescriptor.setCollectionClassName(field.getType().getName());
-
-//		    collectionDescriptor.setElementClassName(targetClass.getName());
-			Type type = field.getGenericType();
-			if (type instanceof ParameterizedType)
-			{
-				Type[] paramType = ((ParameterizedType) type).getActualTypeArguments();
-				//TODO : change this condition. No sure if it will be all the time true.
-				// If only one type argument, the attribute is certainly a collection
-				if (paramType.length == 1)
-				{
-					collectionDescriptor.setElementClassName(paramType[0].toString().replace("class ", ""));
-				}
-				// either, it is certainly a map
-				else
-				{
-					collectionDescriptor.setElementClassName(paramType[1].toString().replace("class ", ""));
-				}
-
-			}
-
+			setElementClassName(collectionDescriptor, field.getGenericType());
+
+
+	private void setElementClassName(CollectionDescriptor collectionDescriptor, Type type) {
+		if (type instanceof ParameterizedType)
+		{
+			Type[] paramType = ((ParameterizedType) type).getActualTypeArguments();
+			//TODO : change this condition. No sure if it will be all the time true.
+			// If only one type argument, the object is certainly a collection
+			if (paramType.length == 1)
+			{
+				collectionDescriptor.setElementClassName(paramType[0].toString().replace("class ", ""));
+
+			}
+			// either, it is certainly a map
+			else
+			{
+				collectionDescriptor.setElementClassName(paramType[1].toString().replace("class ", ""));
+			}
+
+		}
+		else
+		{
+			Type ancestorType = ((Class)type).getGenericSuperclass();
+            if ( ancestorType!= null)
+            {
+			   setElementClassName(collectionDescriptor,ancestorType);
+            }
+		}
+	}
+

INS31 INS83 INS39 INS42 INS44 INS44 MOV8 INS60 INS43 INS42 MOV43 INS42 INS43 INS59 INS8 INS42 INS8 INS42 INS42 INS45 INS21 INS60 INS25 INS32 INS32 INS43 INS59 INS27 INS8 INS21 MOV42 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS33 INS21 INS7 INS27 INS36 INS42 INS32 INS42 INS32 INS45 INS32 INS36 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS43 INS42 INS27 INS45 INS27 INS42 INS42 INS33 INS45 INS42 DEL45 DEL42 DEL59 DEL60