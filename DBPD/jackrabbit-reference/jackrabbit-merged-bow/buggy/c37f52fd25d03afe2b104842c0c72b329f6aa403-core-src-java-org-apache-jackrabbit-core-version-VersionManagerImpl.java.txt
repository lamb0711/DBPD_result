- seperating VersionManagerImpl from ItemStateProvider to avoid potential deadlocks during checkin.
- VersionItemStateProvider returns now shared item states
- Node References handling adjusted

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@267207 13f79535-47bb-0310-9956-ffa450edef68

-public class VersionManagerImpl implements VersionManager,
-        VirtualItemStateProvider, Constants {
+public class VersionManagerImpl implements VersionManager, Constants {
+     * the virtual item state provider that exposes the version storage
+     */
+    private final VersionItemStateProvider versProvider;
+
+    /**
+
+            // create the virtual item state provider
+            versProvider = new VersionItemStateProvider(this, sharedStateMgr);
+
-     * returns the virtual item state provider that exposes the internal versions
-     * as items.
-     *
-     * @param base
-     * @return
+     * {@inheritDoc}
-    public synchronized ItemStateManager getItemStateProvider(ItemStateManager base) {
-        return stateMgr;
+    public VirtualItemStateProvider getVirtualItemStateProvider() {
+        return versProvider;
-     * {@inheritDoc}
-     */
-    public VirtualItemStateProvider getVirtualItemStateProvider() {
-        return this;
-    }
-
-    /**
-    //--------------------------------------------------------------------------
-    //--------------------------------------------------------------------------
-
-    public boolean isVirtualRoot(ItemId id) {
-        return id.equals(historyRoot.getState().getId());
-    }
-
-    public NodeId getVirtualRootId() {
+    /**
+     * returns the id of the version history root node
+     *
+     * @return the id of the version history root node
+     */
+    NodeId getHistoryRootId() {
-    public VirtualPropertyState createPropertyState(VirtualNodeState parent, QName name, int type, boolean multiValued) throws RepositoryException {
-        throw new IllegalStateException("VersionManager should never create a VirtualPropertyState");
-    }
-
-    public VirtualNodeState createNodeState(VirtualNodeState parent, QName name, String uuid, QName nodeTypeName) throws RepositoryException {
-        throw new IllegalStateException("VersionManager should never create a VirtualNodeState");
-    }
-
-    public boolean setNodeReferences(NodeReferences refs) {
-        try {
-            InternalVersionItem item = getItem(refs.getTargetId().getUUID());
-            setItemReferences(item, refs.getReferences());
-            return true;
-        } catch (RepositoryException e) {
-            log.error("Error while setting references: " + e.toString());
-            return false;
-        }
-    }
-
-    public synchronized ItemState getItemState(ItemId id)
-            throws NoSuchItemStateException, ItemStateException {
-        ItemState item = (ItemState) items.get(id);
-        if (item == null) {
-            item = stateMgr.getItemState(id);
-            items.put(id, item);
-
-            // special check for successors
-            if (item instanceof PropertyState) {
-                PropertyState prop = (PropertyState) item;
-                if (prop.getName().equals(JCR_SUCCESSORS)) {
-                    try {
-                        InternalVersion v = getVersion(prop.getParentUUID());
-                        if (v != null) {
-                            InternalVersion[] succs = v.getSuccessors();
-                            InternalValue[] succV = new InternalValue[succs.length];
-                            for (int i = 0; i < succs.length; i++) {
-                                succV[i] = InternalValue.create(new UUID(succs[i].getId()));
-                            }
-                            prop.setValues(succV);
-                        }
-                    } catch (RepositoryException e) {
-                        log.warn("Unable to resolve jcr:successors property for " + id);
-                    }
-                }
-            }
-        }
-        return item;
-    }
-
-    public boolean hasItemState(ItemId id) {
-        return stateMgr.hasItemState(id);
-    }
-
-    public NodeReferences getNodeReferences(NodeReferencesId id)
-            throws NoSuchItemStateException, ItemStateException {
-        return stateMgr.getNodeReferences(id);
-    }
-
-    public boolean hasNodeReferences(NodeReferencesId id) {
-        return stateMgr.hasNodeReferences(id);
-    }
-
-    public void stateCreated(ItemState created) {
-        stateMgr.stateCreated(created);
-    }
-
-    public void stateModified(ItemState modified) {
-        stateMgr.stateModified(modified);
-    }
-
-    public void stateDestroyed(ItemState destroyed) {
-        items.remove(destroyed.getId());
-        stateMgr.stateDestroyed(destroyed);
-    }
-
-    public void stateDiscarded(ItemState discarded) {
-        items.remove(discarded.getId());
-        stateMgr.stateDiscarded(discarded);
-    }

MOV31 INS23 INS29 INS83 INS83 INS43 INS59 INS29 UPD42 MOV65 UPD42 MOV42 UPD42 MOV42 INS65 INS65 UPD66 INS42 INS66 INS66 INS21 INS7 INS42 INS14 INS43 INS52 INS42 INS42 DEL42 DEL43 DEL66 DEL52 DEL42 DEL65 DEL65 DEL29 DEL83 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL9 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL42 DEL32 DEL14 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31