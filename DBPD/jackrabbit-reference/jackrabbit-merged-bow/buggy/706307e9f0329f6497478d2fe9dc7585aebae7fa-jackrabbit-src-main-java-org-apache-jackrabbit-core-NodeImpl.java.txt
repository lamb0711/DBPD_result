[JCR-336] Concurrent locking operations fail 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@393020 13f79535-47bb-0310-9956-ffa450edef68

-        NodeState thisState = (NodeState) state;
-        if (thisState.hasPropertyName(name)) {
-            /**
-             * the following call will throw ItemNotFoundException if the
-             * current session doesn't have read access
-             */
-            return getProperty(name);
-        }
+        /*
+         * Please note, that this implementation does not win a price for beauty
+         * or speed. It's never a good idea to use exceptions for semantical
+         * control flow.
+         * However, compared to the previous version, this one is thread save
+         * and makes the test/get block atomic in respect to transactional
+         * commits. the test/set can still fail.
+         *
+         * Old Version:
-        // does not exist yet:
-        // find definition for the specified property and create property
-        PropertyDefinitionImpl def = getApplicablePropertyDefinition(
-                name, type, multiValued, exactTypeMatch);
-        PropertyImpl prop = createChildProperty(name, type, def);
-        status.set(CREATED);
-        return prop;
+            NodeState thisState = (NodeState) state;
+            if (thisState.hasPropertyName(name)) {
+                /**
+                 * the following call will throw ItemNotFoundException if the
+                 * current session doesn't have read access
+                 /
+                return getProperty(name);
+            }
+            [...create block...]
+
+        */
+        try {
+            PropertyId propId = new PropertyId(getNodeId(), name);
+            return (PropertyImpl) itemMgr.getItem(propId);
+        } catch (AccessDeniedException ade) {
+            throw new ItemNotFoundException(name.toString());
+        } catch (ItemNotFoundException e) {
+            // does not exist yet:
+            // find definition for the specified property and create property
+            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
+                    name, type, multiValued, exactTypeMatch);
+            PropertyImpl prop = createChildProperty(name, type, def);
+            status.set(CREATED);
+            return prop;
+        }
-            lockMgr.unlock(this);
+            if (lockMgr.holdsLock(this)) {
+                // save first, and unlock later. this guards concurrent access
-            // remove properties in content
-            internalSetProperty(QName.JCR_LOCKOWNER, (InternalValue) null);
-            internalSetProperty(QName.JCR_LOCKISDEEP, (InternalValue) null);
-            save();
+                // remove properties in content
+                internalSetProperty(QName.JCR_LOCKOWNER, (InternalValue) null);
+                internalSetProperty(QName.JCR_LOCKISDEEP, (InternalValue) null);
+                save();
+            }
+            lockMgr.unlock(this);

INS8 MOV21 INS54 INS8 INS12 INS12 INS60 INS41 INS44 INS8 INS44 MOV8 INS25 INS43 INS59 INS11 INS43 INS42 INS53 INS43 INS42 INS32 INS8 INS42 INS42 INS14 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS52 MOV21 MOV21 MOV21 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25