JCR-1169 Distribution of commons classes (adjust jackrabbit-core)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@590014 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.conversion.MalformedPathException;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.name.PathFactoryImpl;
+import org.apache.jackrabbit.name.PathBuilder;
-    protected final QName primaryTypeName;
+    protected final Name primaryTypeName;
-            primaryTypeName = QName.NT_UNSTRUCTURED;
+            primaryTypeName = NameConstants.NT_UNSTRUCTURED;
-                QName propName = session.getQName(relPath);
+                Name propName = session.getQName(relPath);
-                Path.create(getPrimaryPath(), session.getQPath(relPath), false)
+                PathFactoryImpl.getInstance().create(getPrimaryPath(), session.getQPath(relPath), false)
-                Path.PathElement pe = p.getNameElement();
+                Path.Element pe = p.getNameElement();
-            p = Path.create(getPrimaryPath(), p, true);
+            p = PathFactoryImpl.getInstance().create(getPrimaryPath(), p, true);
-    protected InternalValue[] computeSystemGeneratedPropertyValues(QName name,
+    protected InternalValue[] computeSystemGeneratedPropertyValues(Name name,
-        if (nt.getQName().equals(QName.MIX_REFERENCEABLE)) {
+        if (nt.getQName().equals(NameConstants.MIX_REFERENCEABLE)) {
-            if (name.equals(QName.JCR_UUID)) {
+            if (name.equals(NameConstants.JCR_UUID)) {
-        } else if (nt.getQName().equals(QName.NT_HIERARCHYNODE)) {
+        } else if (nt.getQName().equals(NameConstants.NT_HIERARCHYNODE)) {
-            if (name.equals(QName.JCR_CREATED)) {
+            if (name.equals(NameConstants.JCR_CREATED)) {
-        } else if (nt.getQName().equals(QName.NT_RESOURCE)) {
+        } else if (nt.getQName().equals(NameConstants.NT_RESOURCE)) {
-            if (name.equals(QName.JCR_LASTMODIFIED)) {
+            if (name.equals(NameConstants.JCR_LASTMODIFIED)) {
-        } else if (nt.getQName().equals(QName.NT_VERSION)) {
+        } else if (nt.getQName().equals(NameConstants.NT_VERSION)) {
-            if (name.equals(QName.JCR_CREATED)) {
+            if (name.equals(NameConstants.JCR_CREATED)) {
-        } else if (nt.getQName().equals(QName.NT_BASE)) {
+        } else if (nt.getQName().equals(NameConstants.NT_BASE)) {
-            if (name.equals(QName.JCR_PRIMARYTYPE)) {
+            if (name.equals(NameConstants.JCR_PRIMARYTYPE)) {
-            } else if (name.equals(QName.JCR_MIXINTYPES)) {
+            } else if (name.equals(NameConstants.JCR_MIXINTYPES)) {
-                    values.add(InternalValue.create((QName) iter.next()));
+                    values.add(InternalValue.create((Name) iter.next()));
-    protected synchronized PropertyImpl getOrCreateProperty(QName name, int type,
+    protected synchronized PropertyImpl getOrCreateProperty(Name name, int type,
-    protected synchronized PropertyImpl createChildProperty(QName name, int type,
+    protected synchronized PropertyImpl createChildProperty(Name name, int type,
-    protected synchronized NodeImpl createChildNode(QName name,
+    protected synchronized NodeImpl createChildNode(Name name,
-    protected void renameChildNode(QName oldName, int index, NodeId id,
-                                   QName newName)
+    protected void renameChildNode(Name oldName, int index, NodeId id,
+                                   Name newName)
-    protected void removeChildProperty(QName propName) throws RepositoryException {
+    protected void removeChildProperty(Name propName) throws RepositoryException {
-    protected void removeChildNode(QName nodeName, int index)
+    protected void removeChildNode(Name nodeName, int index)
-            QName propName = (QName) iter.next();
+            Name propName = (Name) iter.next();
-        QName nodeName;
+        Name nodeName;
-                Path.create(getPrimaryPath(), session.getQPath(relPath), false)
+                PathFactoryImpl.getInstance().create(getPrimaryPath(), session.getQPath(relPath), false)
-    protected NodeImpl internalAddChildNode(QName nodeName,
+    protected NodeImpl internalAddChildNode(Name nodeName,
-    protected NodeImpl internalAddChildNode(QName nodeName,
+    protected NodeImpl internalAddChildNode(Name nodeName,
-            nodePath = Path.create(getPrimaryPath(), nodeName, true);
+            nodePath = PathFactoryImpl.getInstance().create(getPrimaryPath(), nodeName, true);
-            QName nodeTypeName = null;
+            Name nodeTypeName = null;
-        if (thisState.hasPropertyName(QName.JCR_MIXINTYPES)) {
-            prop = (PropertyImpl) itemMgr.getItem(new PropertyId(thisState.getNodeId(), QName.JCR_MIXINTYPES));
+        if (thisState.hasPropertyName(NameConstants.JCR_MIXINTYPES)) {
+            prop = (PropertyImpl) itemMgr.getItem(new PropertyId(thisState.getNodeId(), NameConstants.JCR_MIXINTYPES));
-                    QName.JCR_MIXINTYPES, PropertyType.NAME, true, true);
-            prop = createChildProperty(QName.JCR_MIXINTYPES, PropertyType.NAME, def);
+                    NameConstants.JCR_MIXINTYPES, PropertyType.NAME, true, true);
+            prop = createChildProperty(NameConstants.JCR_MIXINTYPES, PropertyType.NAME, def);
-            removeChildProperty(QName.JCR_MIXINTYPES);
+            removeChildProperty(NameConstants.JCR_MIXINTYPES);
-            vals[cnt++] = InternalValue.create((QName) iter.next());
+            vals[cnt++] = InternalValue.create((Name) iter.next());
-     * Returns the <code>QName</code>s of this node's mixin types.
+     * Returns the <code>Name</code>s of this node's mixin types.
-     * @return a set of the <code>QName</code>s of this node's mixin types.
+     * @return a set of the <code>Name</code>s of this node's mixin types.
-        QName[] types = new QName[mixins.size() + 1];
+        Name[] types = new Name[mixins.size() + 1];
-    protected NodeDefinitionImpl getApplicableChildNodeDefinition(QName nodeName,
-                                                                  QName nodeTypeName)
+    protected NodeDefinitionImpl getApplicableChildNodeDefinition(Name nodeName,
+                                                                  Name nodeTypeName)
-    protected PropertyDefinitionImpl getApplicablePropertyDefinition(QName propertyName,
+    protected PropertyDefinitionImpl getApplicablePropertyDefinition(Name propertyName,
-     * <code>QName</code> instead of a <code>String</code>.
+     * <code>Name</code> instead of a <code>String</code>.
-    public void addMixin(QName mixinName)
+    public void addMixin(Name mixinName)
-            entExisting = ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+            entExisting = ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
-            ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+            ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
-     * <code>QName</code> instead of a <code>String</code>.
+     * <code>Name</code> instead of a <code>String</code>.
-    public void removeMixin(QName mixinName)
+    public void removeMixin(Name mixinName)
-            entRemaining = ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+            entRemaining = ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
-        if ((QName.MIX_REFERENCEABLE.equals(mixinName)
-                || mixin.isDerivedFrom(QName.MIX_REFERENCEABLE))
-                && !entRemaining.includesNodeType(QName.MIX_REFERENCEABLE)) {
+        if ((NameConstants.MIX_REFERENCEABLE.equals(mixinName)
+                || mixin.isDerivedFrom(NameConstants.MIX_REFERENCEABLE))
+                && !entRemaining.includesNodeType(NameConstants.MIX_REFERENCEABLE)) {
-            QName propName = (QName) iter.next();
+            Name propName = (Name) iter.next();
-     * <code>QName</code> instead of a <code>String</code>.
+     * <code>Name</code> instead of a <code>String</code>.
-    public boolean isNodeType(QName ntName) throws RepositoryException {
+    public boolean isNodeType(Name ntName) throws RepositoryException {
-    protected Property internalSetProperty(QName name, InternalValue value)
+    protected Property internalSetProperty(Name name, InternalValue value)
-    protected Property internalSetProperty(QName name, InternalValue[] values)
+    protected Property internalSetProperty(Name name, InternalValue[] values)
-    protected Property internalSetProperty(QName name, InternalValue[] values,
+    protected Property internalSetProperty(Name name, InternalValue[] values,
-    public NodeImpl getNode(QName name) throws ItemNotFoundException, RepositoryException {
+    public NodeImpl getNode(Name name) throws ItemNotFoundException, RepositoryException {
-    public NodeImpl getNode(QName name, int index)
+    public NodeImpl getNode(Name name, int index)
-    public boolean hasNode(QName name) throws RepositoryException {
+    public boolean hasNode(Name name) throws RepositoryException {
-    public boolean hasNode(QName name, int index) throws RepositoryException {
+    public boolean hasNode(Name name, int index) throws RepositoryException {
-    public PropertyImpl getProperty(QName name)
+    public PropertyImpl getProperty(Name name)
-    public boolean hasProperty(QName name) throws RepositoryException {
+    public boolean hasProperty(Name name) throws RepositoryException {
-     * this method takes <code>QName</code> arguments instead of
+     * this method takes <code>Name</code> arguments instead of
-    public synchronized NodeImpl addNode(QName nodeName, QName nodeTypeName,
+    public synchronized NodeImpl addNode(Name nodeName, Name nodeTypeName,
-     * this method takes a <code>QName</code> name argument instead of a
+     * this method takes a <code>Name</code> name argument instead of a
-    public PropertyImpl setProperty(QName name, Value[] values)
+    public PropertyImpl setProperty(Name name, Value[] values)
-     * that this method takes a <code>QName</code> name argument instead of a
+     * that this method takes a <code>Name</code> name argument instead of a
-    public PropertyImpl setProperty(QName name, Value[] values, int type)
+    public PropertyImpl setProperty(Name name, Value[] values, int type)
-     * this method takes a <code>QName</code> name argument instead of a
+     * this method takes a <code>Name</code> name argument instead of a
-    public PropertyImpl setProperty(QName name, Value value)
+    public PropertyImpl setProperty(Name name, Value value)
-    public QName getQName() throws RepositoryException {
+    public Name getQName() throws RepositoryException {
-     * this method takes a <code>Path.PathElement</code> arguments instead of
+     * this method takes a <code>Path.Element</code> arguments instead of
-    public synchronized void orderBefore(Path.PathElement srcName,
-                                         Path.PathElement dstName)
+    public synchronized void orderBefore(Path.Element srcName,
+                                         Path.Element dstName)
-                Path.PathElement[] path = new Path.PathElement[] { srcName };
-                name = session.getJCRPath(new Path.PathBuilder(path).getPath());
+                Path.Element[] path = new Path.Element[] { srcName };
+                name = session.getJCRPath(new PathBuilder(path).getPath());
-                Path.PathElement[] path = new Path.PathElement[] { dstName };
-                name = session.getJCRPath(new Path.PathBuilder(path).getPath());
+                Path.Element[] path = new Path.Element[] { dstName };
+                name = session.getJCRPath(new PathBuilder(path).getPath());
-    public synchronized NodeImpl replaceChildNode(NodeId id, QName nodeName,
-                                                  QName nodeTypeName,
-                                                  QName[] mixinNames)
+    public synchronized NodeImpl replaceChildNode(NodeId id, Name nodeName,
+                                                  Name nodeTypeName,
+                                                  Name[] mixinNames)
-        Path.PathElement insertName;
+        Path.Element insertName;
-        Path.PathElement beforeName;
+        Path.Element beforeName;
-            nta[i++] = session.getNodeTypeManager().getNodeType((QName) iter.next());
+            nta[i++] = session.getNodeTypeManager().getNodeType((Name) iter.next());
-        QName ntName;
+        Name ntName;
-            entExisting = ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+            entExisting = ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
-            ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+            ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
-        if (!isNodeType(QName.MIX_REFERENCEABLE)) {
+        if (!isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-            while (m1.getDepth() != 0 && !m1.isNodeType(QName.MIX_REFERENCEABLE)) {
+            while (m1.getDepth() != 0 && !m1.isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-        internalSetProperty(QName.JCR_ISCHECKEDOUT, InternalValue.create(false));
-        internalSetProperty(QName.JCR_BASEVERSION, InternalValue.create(new UUID(v.getUUID())));
-        internalSetProperty(QName.JCR_PREDECESSORS, InternalValue.EMPTY_ARRAY, PropertyType.REFERENCE);
+        internalSetProperty(NameConstants.JCR_ISCHECKEDOUT, InternalValue.create(false));
+        internalSetProperty(NameConstants.JCR_BASEVERSION, InternalValue.create(new UUID(v.getUUID())));
+        internalSetProperty(NameConstants.JCR_PREDECESSORS, InternalValue.EMPTY_ARRAY, PropertyType.REFERENCE);
-        Property prop = internalSetProperty(QName.JCR_ISCHECKEDOUT, InternalValue.create(true));
+        Property prop = internalSetProperty(NameConstants.JCR_ISCHECKEDOUT, InternalValue.create(true));
-        prop = internalSetProperty(QName.JCR_PREDECESSORS,
+        prop = internalSetProperty(NameConstants.JCR_PREDECESSORS,
-                            Path.create(getPrimaryPath(), relative, false)
+                            PathFactoryImpl.getInstance().create(getPrimaryPath(), relative, false)
-        NodeId id = NodeId.valueOf(getProperty(QName.JCR_VERSIONHISTORY).getString());
+        NodeId id = NodeId.valueOf(getProperty(NameConstants.JCR_VERSIONHISTORY).getString());
-        return (VersionHistory) getProperty(QName.JCR_VERSIONHISTORY).getNode();
+        return (VersionHistory) getProperty(NameConstants.JCR_VERSIONHISTORY).getNode();
-        NodeId id = NodeId.valueOf(getProperty(QName.JCR_BASEVERSION).getString());
+        NodeId id = NodeId.valueOf(getProperty(NameConstants.JCR_BASEVERSION).getString());
-        return (Version) getProperty(QName.JCR_BASEVERSION).getNode();
+        return (Version) getProperty(NameConstants.JCR_BASEVERSION).getNode();
-        if (!isNodeType(QName.MIX_VERSIONABLE)) {
+        if (!isNodeType(NameConstants.MIX_VERSIONABLE)) {
-        while (!m1.isNodeType(QName.MIX_REFERENCEABLE)) {
+        while (!m1.isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-        if (!isNodeType(QName.MIX_VERSIONABLE) || failedIds == null) {
+        if (!isNodeType(NameConstants.MIX_VERSIONABLE) || failedIds == null) {
-        if (!srcNode.isNodeType(QName.MIX_VERSIONABLE)) {
+        if (!srcNode.isNodeType(NameConstants.MIX_VERSIONABLE)) {
-            Value[] vals = getProperty(QName.JCR_PREDECESSORS).getValues();
+            Value[] vals = getProperty(NameConstants.JCR_PREDECESSORS).getValues();
-            internalSetProperty(QName.JCR_PREDECESSORS, v);
+            internalSetProperty(NameConstants.JCR_PREDECESSORS, v);
-        if (hasProperty(QName.JCR_MERGEFAILED)) {
-            Value[] vals = getProperty(QName.JCR_MERGEFAILED).getValues();
+        if (hasProperty(NameConstants.JCR_MERGEFAILED)) {
+            Value[] vals = getProperty(NameConstants.JCR_MERGEFAILED).getValues();
-            internalSetProperty(QName.JCR_MERGEFAILED, (InternalValue[]) null);
+            internalSetProperty(NameConstants.JCR_MERGEFAILED, (InternalValue[]) null);
-            internalSetProperty(QName.JCR_MERGEFAILED, vals);
+            internalSetProperty(NameConstants.JCR_MERGEFAILED, vals);
-        while (!node.hasProperty(QName.JCR_ISCHECKEDOUT)) {
+        while (!node.hasProperty(NameConstants.JCR_ISCHECKEDOUT)) {
-        return node.getProperty(QName.JCR_ISCHECKEDOUT).getBoolean();
+        return node.getProperty(NameConstants.JCR_ISCHECKEDOUT).getBoolean();
-    private NodeImpl addNode(QName name, InternalFrozenNode frozen)
+    private NodeImpl addNode(Name name, InternalFrozenNode frozen)
-        QName[] mxNames = frozen.getFrozenMixinTypes();
+        Name[] mxNames = frozen.getFrozenMixinTypes();
-        QName[] mxNames = frozen.getFrozenMixinTypes();
+        Name[] mxNames = frozen.getFrozenMixinTypes();
-            if (p.getQName().equals(QName.JCR_PRIMARYTYPE)
-                    || p.getQName().equals(QName.JCR_MIXINTYPES)
-                    || p.getQName().equals(QName.JCR_UUID)) {
+            if (p.getQName().equals(NameConstants.JCR_PRIMARYTYPE)
+                    || p.getQName().equals(NameConstants.JCR_MIXINTYPES)
+                    || p.getQName().equals(NameConstants.JCR_UUID)) {
-            Path.PathElement name = n.getPrimaryPath().getNameElement();
+            Path.Element name = n.getPrimaryPath().getNameElement();
-            Path.PathElement name = child.getPrimaryPath().getNameElement();
+            Path.Element name = child.getPrimaryPath().getNameElement();
-            if (child.isNodeType(QName.MIX_REFERENCEABLE)) {
+            if (child.isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-        internalSetProperty(QName.JCR_ISCHECKEDOUT, InternalValue.create(true));
+        internalSetProperty(NameConstants.JCR_ISCHECKEDOUT, InternalValue.create(true));
-        internalSetProperty(QName.JCR_BASEVERSION, InternalValue.create(uuid));
+        internalSetProperty(NameConstants.JCR_BASEVERSION, InternalValue.create(uuid));
-        internalSetProperty(QName.JCR_PREDECESSORS, InternalValue.EMPTY_ARRAY, PropertyType.REFERENCE);
+        internalSetProperty(NameConstants.JCR_PREDECESSORS, InternalValue.EMPTY_ARRAY, PropertyType.REFERENCE);
-        internalSetProperty(QName.JCR_MERGEFAILED, (InternalValue[]) null);
+        internalSetProperty(NameConstants.JCR_MERGEFAILED, (InternalValue[]) null);
-        internalSetProperty(QName.JCR_ISCHECKEDOUT, InternalValue.create(false));
+        internalSetProperty(NameConstants.JCR_ISCHECKEDOUT, InternalValue.create(false));
-        if (isNodeType(QName.MIX_REFERENCEABLE)) {
+        if (isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-        QName[] mixinNames = freeze.getFrozenMixinTypes();
+        Name[] mixinNames = freeze.getFrozenMixinTypes();
-            if (prop.getQName().equals(QName.JCR_VERSIONHISTORY)) {
+            if (prop.getQName().equals(NameConstants.JCR_VERSIONHISTORY)) {
-            } else if (prop.getQName().equals(QName.JCR_PREDECESSORS)) {
+            } else if (prop.getQName().equals(NameConstants.JCR_PREDECESSORS)) {
-                UUID vhUUID = n.hasProperty(QName.JCR_VERSIONHISTORY)
-                        ? new UUID(n.getProperty(QName.JCR_VERSIONHISTORY).getString())
+                UUID vhUUID = n.hasProperty(NameConstants.JCR_VERSIONHISTORY)
+                        ? new UUID(n.getProperty(NameConstants.JCR_VERSIONHISTORY).getString())
-                ivalues[i] = InternalValue.create(values[i], session.getNamespaceResolver(), rep.getDataStore());
+                ivalues[i] = InternalValue.create(values[i], session.getNamePathResolver(), rep.getDataStore());
-            InternalValue value = InternalValue.create(prop.getValue(), session.getNamespaceResolver(), rep.getDataStore());
+            InternalValue value = InternalValue.create(prop.getValue(), session.getNamePathResolver(), rep.getDataStore());
-                internalSetProperty(QName.JCR_LOCKOWNER,
+                internalSetProperty(NameConstants.JCR_LOCKOWNER,
-                internalSetProperty(QName.JCR_LOCKISDEEP,
+                internalSetProperty(NameConstants.JCR_LOCKISDEEP,
-                internalSetProperty(QName.JCR_LOCKOWNER, (InternalValue) null);
-                internalSetProperty(QName.JCR_LOCKISDEEP, (InternalValue) null);
+                internalSetProperty(NameConstants.JCR_LOCKOWNER, (InternalValue) null);
+                internalSetProperty(NameConstants.JCR_LOCKISDEEP, (InternalValue) null);
-        if (!isNodeType(QName.MIX_LOCKABLE) || isNew()) {
+        if (!isNodeType(NameConstants.MIX_LOCKABLE) || isNew()) {
-        if (!isNodeType(QName.MIX_LOCKABLE)) {
+        if (!isNodeType(NameConstants.MIX_LOCKABLE)) {
-                    QName qName;
+                    Name qName;
-        QName ntName;
+        Name ntName;
-            ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+            ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
-        boolean referenceableOld = entOld.includesNodeType(QName.MIX_REFERENCEABLE);
-        boolean referenceableNew = entNew.includesNodeType(QName.MIX_REFERENCEABLE);
+        boolean referenceableOld = entOld.includesNodeType(NameConstants.MIX_REFERENCEABLE);
+        boolean referenceableNew = entNew.includesNodeType(NameConstants.MIX_REFERENCEABLE);
-        internalSetProperty(QName.JCR_PRIMARYTYPE, InternalValue.create(ntName));
+        internalSetProperty(NameConstants.JCR_PRIMARYTYPE, InternalValue.create(ntName));
-                QName propName = (QName) iter.next();
+                Name propName = (Name) iter.next();

INS26 INS26 INS26 UPD40 UPD40 UPD40 UPD40 INS40 INS40 INS40 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD5 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD66 UPD66 UPD5 UPD42 UPD42 UPD42 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD66 UPD40 UPD40 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD5 UPD5 UPD5 UPD43 UPD40 UPD42 UPD40 UPD43 UPD42 UPD40 UPD40 UPD42 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 MOV25 UPD42 UPD40 UPD40 UPD43 UPD43 UPD42 UPD5 UPD43 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD42 UPD42 MOV32 MOV32 UPD43 UPD43 UPD42 INS25 MOV21 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD42 UPD42 UPD40 UPD43 UPD40 UPD42 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 MOV32 MOV8 UPD40 UPD43 UPD43 INS32 UPD40 UPD40 UPD43 INS32 UPD40 UPD40 UPD42 UPD5 UPD40 UPD40 UPD43 UPD5 UPD5 UPD5 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD5 UPD43 UPD42 INS32 UPD40 UPD42 MOV42 INS42 UPD40 UPD40 UPD42 INS32 UPD42 MOV42 INS42 UPD43 UPD5 UPD43 UPD5 UPD42 UPD43 UPD43 UPD43 UPD5 UPD43 UPD40 UPD40 UPD40 MOV43 UPD42 UPD40 UPD40 UPD40 UPD40 UPD43 UPD42 UPD42 MOV42 INS42 UPD40 UPD42 MOV42 INS42 UPD40 UPD42 UPD43 UPD42 UPD5 UPD43 UPD40 UPD5 UPD40 UPD5 UPD42 UPD43 UPD42 UPD5 UPD43 UPD42 UPD5 UPD43 UPD40 UPD42 UPD5 UPD43 UPD42 UPD5 UPD43 UPD43 UPD42 UPD5 UPD43 UPD42 UPD42 UPD43 UPD42 UPD40 UPD43 UPD42 UPD43 UPD40 UPD43 UPD40 UPD43 UPD43 UPD42 UPD40 MOV43 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD40 INS32 UPD42 MOV42 INS42 UPD43 UPD42 DEL40 DEL40 DEL25