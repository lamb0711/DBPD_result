JCR-1717: Configure occurrence of property value in excerpt

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@684732 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import java.util.ArrayList;
+     * List of {@link FieldNames#FULLTEXT} fields which should not be used in
+     * an excerpt.
+     */
+    protected List doNotUseInExcerpt = new ArrayList();
+
+    /**
+        doNotUseInExcerpt.clear();
+
+        // now add fields that are not used in excerpt (must go at the end)
+        for (Iterator it = doNotUseInExcerpt.iterator(); it.hasNext(); ) {
+            doc.add((Field) it.next());
+        }
-                                getPropertyBoost(name));
+                                getPropertyBoost(name), useInExcerpt(name));
+     * @deprecated use {@link #addStringValue(Document, String, Object, boolean, boolean, float, boolean)} instead.
+        addStringValue(doc, fieldName, internalValue, tokenized, includeInNodeIndex, boost, true);
+    }
+
+    /**
+     * Adds the string value to the document both as the named field and
+     * optionally for full text indexing if <code>tokenized</code> is
+     * <code>true</code>.
+     *
+     * @param doc                The document to which to add the field
+     * @param fieldName          The name of the field to add
+     * @param internalValue      The value for the field to add to the
+     *                           document.
+     * @param tokenized          If <code>true</code> the string is also
+     *                           tokenized and fulltext indexed.
+     * @param includeInNodeIndex If <code>true</code> the string is also
+     *                           tokenized and added to the node scope fulltext
+     *                           index.
+     * @param boost              the boost value for this string field.
+     * @param useInExcerpt       If <code>true</code> the string may show up in
+     *                           an excerpt.
+     */
+    protected void addStringValue(Document doc, String fieldName,
+                                  Object internalValue, boolean tokenized,
+                                  boolean includeInNodeIndex, float boost,
+                                  boolean useInExcerpt) {
-                doc.add(createFulltextField(stringValue));
+                boolean store = supportHighlighting && useInExcerpt;
+                f = createFulltextField(stringValue, store, supportHighlighting);
+                if (useInExcerpt) {
+                    doc.add(f);
+                } else {
+                    doNotUseInExcerpt.add(f);
+                }
+     * @deprecated use {@link #createFulltextField(String, boolean, boolean)} instead.
-        if (supportHighlighting) {
+        return createFulltextField(value, supportHighlighting, supportHighlighting);
+    }
+
+    /**
+     * Creates a fulltext field for the string <code>value</code>.
+     *
+     * @param value the string value.
+     * @param store if the value of the field should be stored.
+     * @param withOffsets if a term vector with offsets should be stored.
+     * @return a lucene field.
+     */
+    protected Field createFulltextField(String value,
+                                        boolean store,
+                                        boolean withOffsets) {
+        Field.TermVector tv;
+        if (withOffsets) {
+            tv = Field.TermVector.WITH_OFFSETS;
+        } else {
+            tv = Field.TermVector.NO;
+        }
+        if (store) {
-                    Field.Index.TOKENIZED, Field.TermVector.WITH_OFFSETS);
+                    Field.Index.TOKENIZED, tv);
-                    Field.Store.NO, Field.Index.TOKENIZED);
+                    Field.Store.NO, Field.Index.TOKENIZED, tv);
-            return createFulltextField(textExtract.toString());
+            return createFulltextField(textExtract.toString(), true, true);
+     * Returns <code>true</code> if the content of the property with the given
+     * name should the used to create an excerpt.
+     *
+     * @param propertyName the name of a property.
+     * @return <code>true</code> if it should be used to create an excerpt;
+     *         <code>false</code> otherwise.
+     */
+    protected boolean useInExcerpt(Name propertyName) {
+        if (indexingConfig == null) {
+            return true;
+        } else {
+            return indexingConfig.useInExcerpt(node, propertyName);
+        }
+    }
+
+    /**

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS43 INS59 MOV29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS44 MOV29 INS83 INS43 INS42 INS44 INS8 INS29 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS42 INS14 INS21 INS24 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS65 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS60 INS25 INS65 INS65 INS65 INS43 INS42 INS25 INS66 INS65 INS66 INS66 INS43 INS32 INS58 INS32 INS8 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS65 INS66 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS59 INS42 INS8 INS8 UPD42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS27 INS8 INS8 INS67 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS21 INS68 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS68 INS42 INS42 INS42 INS42 INS40 INS42 INS21 INS21 INS42 INS33 INS41 INS41 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS42 INS69 INS69 INS69 INS7 INS7 INS9 INS32 INS42 INS42 INS42 INS42 INS11 INS43 INS43 INS43 INS39 INS39 INS39 INS39 INS60 INS21 INS25 INS43 INS39 INS39 INS42 INS40 INS42 INS40 MOV43 INS42 MOV43 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS39 INS59 INS7 INS42 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 MOV42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL32 DEL32 DEL21 DEL40