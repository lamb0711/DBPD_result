Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QPropertyDefinition;
-import javax.jcr.AccessDeniedException;
-import javax.jcr.ItemNotFoundException;
-    private final PropertyDefinition definition;
-
-                        PropertyState state, PropertyDefinition definition,
-                        ItemLifeCycleListener[] listeners) {
+                        PropertyState state, ItemLifeCycleListener[] listeners) {
-        this.definition = definition;
-     * @see Item#getParent()
-     */
-    public Node getParent() throws ItemNotFoundException, AccessDeniedException, RepositoryException {
-        checkStatus();
-        return (Node) itemMgr.getItem(getItemState().getParent());
-    }
-
-    /**
-        int targetType = definition.getRequiredType();
+        int targetType = getDefinition().getRequiredType();
-	checkStatus();
-        return definition;
+        checkStatus();
+        QPropertyDefinition qpd = getPropertyState().getDefinition();
+        return session.getNodeTypeManager().getPropertyDefinition(qpd);
-        if (definition.isMultiple() != multiValues) {
+        if (isMultiple() != multiValues) {
-	return definition.isMultiple();
+	return getPropertyState().isMultiValued();
-    private int getRequiredType(int defaultType) {
+    private int getRequiredType(int defaultType) throws RepositoryException {
-        int reqType = definition.getRequiredType();
+        int reqType = getDefinition().getRequiredType();

MOV26 UPD40 MOV43 INS60 INS43 INS59 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 UPD42 INS32 INS32 INS42 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 UPD42 MOV42 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL11 DEL41 DEL8 DEL31 DEL42 DEL42