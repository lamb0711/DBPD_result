JCR-2074: JSR 283: New Event Types

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@765328 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+import java.util.HashMap;
-import javax.jcr.observation.Event;
+import javax.jcr.PropertyType;
+import org.apache.jackrabbit.core.value.InternalValue;
+import org.apache.jackrabbit.api.jsr283.observation.Event;
-        events.add(createEventState(type, parentId, parentPath, childId,
-                childRelPath, ntName, mixins, userId));
+
+        Map info = null;
+        if (type == Event.NODE_MOVED) {
+            info = new HashMap();
+            // read info map
+            int infoSize = record.readInt();
+            for (int i = 0; i < infoSize; i++) {
+                String key = record.readString();
+                int propType = record.readInt();
+                InternalValue value;
+                if (propType == PropertyType.UNDEFINED) {
+                    // indicates null value
+                    value = null;
+                } else {
+                    value = InternalValue.valueOf(record.readString(), propType);
+                }
+                info.put(key, value);
+            }
+        }
+
+        EventState es = createEventState(type, parentId, parentPath, childId,
+                childRelPath, ntName, mixins, userId);
+        if (info != null) {
+            es.setInfo(info);
+        }
+        events.add(es);
-        case Event.NODE_ADDED:
-            return EventState.childNodeAdded(parentId, parentPath, childId, childRelPath,
-                    ntName, mixins, getOrCreateSession(userId), true);
-        case Event.NODE_REMOVED:
-            return EventState.childNodeRemoved(parentId, parentPath, childId, childRelPath,
-                    ntName, mixins, getOrCreateSession(userId), true);
-        case Event.PROPERTY_ADDED:
-            return EventState.propertyAdded(parentId, parentPath, childRelPath,
-                    ntName, mixins, getOrCreateSession(userId), true);
-        case Event.PROPERTY_CHANGED:
-            return EventState.propertyChanged(parentId, parentPath, childRelPath,
-                    ntName, mixins, getOrCreateSession(userId), true);
-        case Event.PROPERTY_REMOVED:
-            return EventState.propertyRemoved(parentId, parentPath, childRelPath,
-                    ntName, mixins, getOrCreateSession(userId), true);
-        default:
-            String msg = "Unexpected event type: " + type;
-            throw new IllegalArgumentException(msg);
+            case Event.NODE_ADDED:
+                return EventState.childNodeAdded(parentId, parentPath, childId, childRelPath,
+                        ntName, mixins, getOrCreateSession(userId), true);
+            case Event.NODE_MOVED:
+                return EventState.nodeMoved(parentId, parentPath, childId, childRelPath,
+                        ntName, mixins, getOrCreateSession(userId), true);
+            case Event.NODE_REMOVED:
+                return EventState.childNodeRemoved(parentId, parentPath, childId, childRelPath,
+                        ntName, mixins, getOrCreateSession(userId), true);
+            case Event.PROPERTY_ADDED:
+                return EventState.propertyAdded(parentId, parentPath, childRelPath,
+                        ntName, mixins, getOrCreateSession(userId), true);
+            case Event.PROPERTY_CHANGED:
+                return EventState.propertyChanged(parentId, parentPath, childRelPath,
+                        ntName, mixins, getOrCreateSession(userId), true);
+            case Event.PROPERTY_REMOVED:
+                return EventState.propertyRemoved(parentId, parentPath, childRelPath,
+                        ntName, mixins, getOrCreateSession(userId), true);
+            default:
+                String msg = "Unexpected event type: " + type;
+                throw new IllegalArgumentException(msg);
+
+        if (event.getType() == Event.NODE_MOVED) {
+            // write info map
+            Map info = event.getInfo();
+            record.writeInt(info.size());
+            for (Iterator it = info.entrySet().iterator(); it.hasNext(); ) {
+                Map.Entry entry = (Map.Entry) it.next();
+                String key = (String) entry.getKey();
+                InternalValue value = (InternalValue) entry.getValue();
+                record.writeString(key);
+                if (value == null) {
+                    // use undefined for null value
+                    record.writeInt(PropertyType.UNDEFINED);
+                } else {
+                    record.writeInt(value.getType());
+                    record.writeString(value.toString());
+                }
+            }
+        }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS60 INS25 INS60 INS25 MOV49 INS25 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS41 INS49 INS27 INS8 INS42 INS42 INS33 INS42 INS40 INS21 INS60 INS24 INS42 INS42 MOV32 INS42 INS33 INS21 INS42 INS40 INS32 INS32 INS40 INS60 INS21 INS24 INS7 INS39 INS59 INS58 INS27 INS37 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS43 INS59 INS32 INS58 INS32 INS8 INS42 INS14 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS60 INS21 INS25 INS43 INS42 INS42 INS42 INS34 INS43 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS43 INS32 INS43 INS32 INS43 INS32 INS32 INS32 INS32 INS42 INS33 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42