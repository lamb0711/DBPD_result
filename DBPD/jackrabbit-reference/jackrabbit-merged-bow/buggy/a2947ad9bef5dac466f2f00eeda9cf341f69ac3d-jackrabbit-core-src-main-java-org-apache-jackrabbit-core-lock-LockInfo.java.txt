JCR-1590: JSR 283: Locking

Add tracking of timeout information. Work in progress...

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803604 13f79535-47bb-0310-9956-ffa450edef68

-     * Constant for the undefined or infinite timeout.
+     * The biggest possible timeout hint value (in seconds), used to avoid
+     * overflows when calculating the timeout. 100 years should be plenty
+     * enough for anyone...
-    static final long TIMEOUT_INFINITE = Long.MAX_VALUE;
-
-    /**
-     * Constant for the expired timeout.
-     */
-    static final long TIMEOUT_EXPIRED = -1;
+    private static final long MAXIMUM_TIMEOUT = 100L * 365L * 24L * 60L * 60L;
-     * Flag indicating whether this lock is live
+     * Lock timeout hint (in seconds) given when the lock was created.
+     * Guaranteed to be between 0 and {@link #MAXIMUM_TIMEOUT}. If the value
+     * is 0, then this lock will not timeout.
+     */
+    private final long timeoutHint;
+
+    /**
+     * Time (in seconds since epoch) when this lock will timeout. Set to
+     * {@link Long#MAX_VALUE} if this lock will not timeout.
+     */
+    private long timeoutTime;
+
+    /**
+     * Flag indicating whether this lock is live. See also {@link #timeoutTime}.
-     * @param timeoutHint   the timeoutHint
+     * @param timeoutHint   lock timeout hint in seconds
-        // TODO: TOBEFIXED for 2.0 respect and deal with timeout hint.
+        this.timeoutHint = timeoutHint;
+
+        updateTimeoutTime();
+    }
+
+    protected LockInfo(LockInfo that) {
+        this.id = that.id;
+        this.sessionScoped = that.sessionScoped;
+        this.deep = that.deep;
+        this.lockOwner = that.lockOwner;
+        this.timeoutHint = that.timeoutHint;
+        this.timeoutTime = that.timeoutTime;
-     * Return the number of seconds remaining until the lock expires.
+     * Returns the timeout hint given when the lock was created.
-     * @return number of seconds remaining until the lock expires.
+     * @return timeout hint (in seconds)
-    public long getSecondsRemaining() {
-        // TODO: TOBEFIXED for 2.0
-        // TODO  - add support for timeout specified by the API user -> LockManager#lock
-        return isLive() ? TIMEOUT_INFINITE : TIMEOUT_EXPIRED;
+    public long getTimeoutHint() {
+        return timeoutHint;
+    }
+
+    /**
+     * Returns the time when this lock will expire. 
+     *
+     * @return timeout time in seconds after epoch
+     */
+    public long getTimeoutTime() {
+        return timeoutTime;
+    }
+
+    /**
+     * Updates the timeout time of this lock based on current time and
+     * the timeout hint specified for this lock. The timeout time is always
+     * rounded up.
+     */
+    public void updateTimeoutTime() {
+        if (timeoutHint > 0 && timeoutHint <= MAXIMUM_TIMEOUT) {
+            long now = (System.currentTimeMillis() + 999) / 1000; // round up
+            this.timeoutTime = now + timeoutHint;
+        } else {
+            this.timeoutTime = Long.MAX_VALUE;
+        }

MOV23 INS23 INS31 INS31 INS31 INS31 INS83 UPD83 INS29 INS83 INS39 INS59 INS83 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 MOV29 MOV83 MOV39 UPD42 MOV42 INS8 INS29 INS83 INS39 INS42 INS8 UPD42 INS27 UPD42 INS65 INS42 INS21 INS21 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS41 INS41 INS65 INS25 INS66 UPD66 INS66 INS34 INS34 INS34 INS34 INS34 INS66 INS66 INS65 INS66 UPD66 INS66 INS65 INS66 UPD66 INS65 INS66 UPD66 INS7 INS32 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS66 INS66 INS42 UPD66 UPD66 INS42 INS66 INS66 INS66 INS27 INS8 INS8 INS67 INS67 INS67 INS22 INS42 INS42 INS22 INS40 INS22 INS40 INS22 INS40 INS22 INS40 INS22 INS40 INS22 INS40 INS27 INS27 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS34 INS42 INS42 INS39 INS59 INS7 INS7 INS42 INS27 INS22 INS27 INS22 INS40 INS36 INS34 INS52 INS42 INS42 INS42 INS52 INS42 INS27 INS32 INS34 UPD42 MOV42 INS42 DEL40 DEL34 DEL38 DEL32 DEL42 DEL42 DEL16 DEL41 DEL8 DEL31