work in progress

- replace ItemImpl by Item in ItemManager interface and adjust
  usages.
- change all setters on ItemState and derived classes from public to
  package private
- NodeState: use collection return value instead of set/list whereever possible
- WorkspaceManager: put ItemStateFactory to a separate class and
  remove unused inner class NodeReferenceImpl 
- add methods to NodeState/PropertyState that avoids return a null
  QItemDefinition and remove corresponding methods from NodeTypeManagerImpl
- remove ItemDefinitionManager.
- VersionHistoryImpl: add safety check if cne for root version really exists
- Fix ImporterImpl: ItemState.getDefinition() may return 'null' value.
  use method instead, that sets the definition if it is still missing.
- javadoc and code formatting


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430031 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.NodeState;
-import org.apache.jackrabbit.jcr2spi.state.PropertyState;
-import org.apache.jackrabbit.jcr2spi.state.ChildNodeEntry;
-public class NodeTypeManagerImpl implements NodeTypeManager, ItemDefinitionManager,
-        NodeTypeRegistryListener, Dumpable {
+public class NodeTypeManagerImpl implements NodeTypeManager, NodeTypeRegistryListener, Dumpable {
-        // initialize ItemDefinitionManager
-        // 1) setup caches with soft references to node type
+        // setup caches with soft references to node type
-        // 2) setup root definition and update cache
+        // setup root definition and update cache
-    //----------------------------------------------< ItemDefinitionManager >---
-    // DIFF JR: new interface ItemDefinitionManager -> avoid usage of NodeTypeManagerImpl
-     * @inheritDoc
+     * Retrieve the <code>NodeDefinition</code> for the given
+     * <code>QNodeDefinition</code>.
+     *
+     * @param def
+     * @return
-     * @inheritDoc
+     * Retrieve the <code>PropertyDefinition</code> for the given
+     * <code>QPropertyDefinition</code>.
+     *
+     * @param def
+     * @return
-
-    /**
-     * @inheritDoc
-     */
-    // DIFF JACKRABBIT: method added (JR defines similar in ItemManager)
-    public NodeDefinition getNodeDefinition(NodeState nodeState, NodeState parentState) throws RepositoryException {
-        QNodeDefinition def = nodeState.getDefinition();
-        if (def == null) {
-            try {
-                if (parentState == null) {
-                    // special case for root state
-                    def = ntReg.getRootNodeDef();
-                } else {
-                    ChildNodeEntry cne = parentState.getChildNodeEntry(nodeState.getNodeId());
-                    def = ntReg.getEffectiveNodeType(parentState.getNodeTypeNames()).getApplicableNodeDefinition(cne.getName(), nodeState.getNodeTypeName());
-                }
-            } catch (NodeTypeConflictException e) {
-                String msg = "internal error: failed to build effective node type.";
-                log.debug(msg);
-                throw new RepositoryException(msg, e);
-            }
-            // make sure the state has the definition set now
-            nodeState.setDefinition(def);
-        }
-        return getNodeDefinition(def);
-    }
-
-    /**
-     * @inheritDoc
-     */
-    // DIFF JACKRABBIT: method added (JR defines similar in ItemManager)
-    public PropertyDefinition getPropertyDefinition(PropertyState propState, NodeState parentState) throws RepositoryException {
-        QPropertyDefinition def = propState.getDefinition();
-        if (def == null) {
-            try {
-                def = ntReg.getEffectiveNodeType(parentState.getNodeTypeNames()).getApplicablePropertyDefinition(propState.getQName(), propState.getType(), propState.isMultiValued());
-                propState.setDefinition(def);
-            } catch (NodeTypeConflictException e) {
-                String msg = "internal error: failed to build effective node type.";
-                log.debug(msg);
-                throw new RepositoryException(msg, e);
-            }
-        }
-        return getPropertyDefinition(def);
-    }
-
+    

INS65 UPD65 INS65 INS65 UPD65 INS65 INS66 INS66 INS42 INS66 INS66 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31