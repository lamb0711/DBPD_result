- add missing @Override annotation
- parametrize generic types
- remove unnecessary unboxing


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915837 13f79535-47bb-0310-9956-ffa450edef68

-        List l = new ArrayList();
+        List<Path.Element> l = new ArrayList<Path.Element>();
-        List elements = new ArrayList();
+        List<Path.Element> elements = new ArrayList<Path.Element>();
-        List elements = new ArrayList();
+        List<Path.Element> elements = new ArrayList<Path.Element>();
-        ArrayList list = new ArrayList();
+        ArrayList<Path.Element> list = new ArrayList<Path.Element>();
-            int index = Integer.valueOf(elementString.substring(pos + 1, pos1)).intValue();
+            int index = Integer.valueOf(elementString.substring(pos + 1, pos1));
-            LinkedList queue = new LinkedList();
+            LinkedList<Path.Element> queue = new LinkedList<Path.Element>();
-            for (int i = 0; i < elements.length; i++) {
-                Path.Element elem = elements[i];
+            for (Element elem : elements) {
-                        last = (Path.Element) queue.getLast();
+                        last = queue.getLast();
-            return new PathImpl((Path.Element[]) queue.toArray(new Element[queue.size()]), isNormalized);
+            return new PathImpl(queue.toArray(new Element[queue.size()]), isNormalized);
-            List l = new ArrayList();
+            List<Path.Element> l = new ArrayList<Path.Element>();
-            for (int i = 0; i < elements.length; i++) {
-                if (elements[i].denotesParent()) {
+            for (Element element : elements) {
+                if (element.denotesParent()) {
-                } else if (elements[i].denotesName()) {
+                } else if (element.denotesName()) {
+        @Override
+        @Override
-                for (int i = 0; i < elements.length; i++) {
-                    h = 37 * h + elements[i].hashCode();
+                for (Element element : elements) {
+                    h = 37 * h + element.hashCode();
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
-        private Builder(List elemList) {
-            this((Path.Element[]) elemList.toArray(new Path.Element[elemList.size()]));
+        private Builder(List<Path.Element> elemList) {
+            this(elemList.toArray(new Path.Element[elemList.size()]));

INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS74 INS74 INS74 INS74 INS70 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS74 INS44 INS42 MOV8 INS74 INS44 INS42 MOV8 MOV43 MOV43 MOV32 INS40 INS74 INS40 INS74 INS40 INS74 INS40 INS74 MOV43 MOV43 INS43 INS42 MOV32 MOV43 MOV43 INS43 INS42 INS70 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV32 INS74 INS42 INS74 INS42 INS44 INS42 INS8 INS40 INS40 INS40 INS40 MOV43 MOV43 MOV43 INS43 INS42 INS43 INS42 MOV21 INS40 INS42 INS42 MOV32 INS42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL11 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL85 DEL5 DEL11 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL85 DEL5 DEL11