JCR-1011: JCR2SPI: add configurable cache for Item instances (ItemManager)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@619416 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.state.ItemStateCreationListener;
-import org.apache.commons.collections.map.ReferenceMap;
+import javax.jcr.Workspace;
-import java.util.Map;
-public class ItemManagerImpl implements Dumpable, ItemManager {
+public class ItemManagerImpl implements Dumpable, ItemManager, ItemStateCreationListener {
-    private Map itemCache;
+    private final ItemCache itemCache;
+     * @param cache the ItemCache to be used.
-    ItemManagerImpl(HierarchyManager hierMgr, SessionImpl session) {
+    ItemManagerImpl(HierarchyManager hierMgr, SessionImpl session, ItemCache cache) {
-        /* Setup item cache with weak keys (ItemState) and weak values (Item).*/
-        itemCache = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);
+        itemCache = cache;
+
+        // start listening to creation of ItemStates upon batch-reading in the
+        // workspace item state factory.
+        Workspace wsp = session.getWorkspace();
+        if (wsp instanceof WorkspaceImpl) {
+            ((WorkspaceImpl) wsp).getItemStateFactory().addCreationListener(this);
+        }
+        // stop listening
+        Workspace wsp = session.getWorkspace();
+        if (wsp instanceof WorkspaceImpl) {
+            ((WorkspaceImpl) wsp).getItemStateFactory().removeCreationListener(this);
+        }
+        // aftwards clear the cache.
-        Item item = retrieveItem(itemState);
+        Item item = itemCache.getItem(itemState);
-    //----------------------------------------------< ItemLifeCycleListener >---
-    /**
-     * @see ItemLifeCycleListener#itemCreated(Item)
-     */
-    public void itemCreated(Item item) {
-        if (!(item instanceof ItemImpl)) {
-            String msg = "Incompatible Item object: " + ItemImpl.class.getName() + " expected.";
-            throw new IllegalArgumentException(msg);
-        }
-        if (log.isDebugEnabled()) {
-            log.debug("created item " + item);
-        }
-        // add instance to cache
-        cacheItem(((ItemImpl)item).getItemState(), item);
-    }
-
-    /**
-     * @see ItemLifeCycleListener#itemInvalidated(Item)
-     */
-    public void itemInvalidated(Item item) {
-        if (!(item instanceof ItemImpl)) {
-            String msg = "Incompatible Item object: " + ItemImpl.class.getName() + " expected.";
-            throw new IllegalArgumentException(msg);
-        }
-        if (log.isDebugEnabled()) {
-            log.debug("invalidated item " + item);
-        }
-        // remove instance from cache
-        evictItem(((ItemImpl)item).getItemState());
-    }
-
-    /**
-     * @see ItemLifeCycleListener#itemDestroyed(Item)
-     */
-    public void itemDestroyed(Item item) {
-        if (!(item instanceof ItemImpl)) {
-            String msg = "Incompatible Item object: " + ItemImpl.class.getName() + " expected.";
-            throw new IllegalArgumentException(msg);
-        }
-        if (log.isDebugEnabled()) {
-            log.debug("destroyed item " + item);
-        }
-        // we're no longer interested in this item
-        ((ItemImpl)item).removeLifeCycleListener(this);
-        // remove instance from cache
-        evictItem(((ItemImpl)item).getItemState());
-    }
-
-        Iterator iter = itemCache.keySet().iterator();
-        while (iter.hasNext()) {
-            ItemState state = (ItemState) iter.next();
-            Item item = (Item) itemCache.get(state);
-            if (item.isNode()) {
-                ps.print("Node: ");
-            } else {
-                ps.print("Property: ");
-            }
-            if (item.isNew()) {
-                ps.print("new ");
-            } else if (item.isModified()) {
-                ps.print("modified ");
-            } else {
-                ps.print("- ");
-            }
-            ps.println(state + "\t" + LogUtil.safeGetJCRPath(state, session.getPathResolver()) + " (" + item + ")");
+        if (itemCache instanceof Dumpable) {
+            ((Dumpable) itemCache).dump(ps);
+        } else {
+            ps.println("ItemCache (" + itemCache.toString() + ")");
-        ItemLifeCycleListener[] listeners = new ItemLifeCycleListener[]{this};
+        ItemLifeCycleListener[] listeners = new ItemLifeCycleListener[]{itemCache};
-        ItemLifeCycleListener[] listeners = new ItemLifeCycleListener[]{this};
+        ItemLifeCycleListener[] listeners = new ItemLifeCycleListener[]{itemCache};
-    //-------------------------------------------------< item cache methods >---
+    //------------------------------------------< ItemStateCreationListener >---
-     * Puts the reference of an item in the cache with
-     * the item's path as the key.
-     * @param item the item to cache
+     * @param state
-    private void cacheItem(ItemState state, Item item) {
-        if (itemCache.containsKey(state)) {
-            log.warn("overwriting cached item " + state);
+    public void created(ItemState state) {
+        if (state.isNode()) {
+            try {
+                createNodeInstance((NodeState) state);
+            } catch (RepositoryException e) {
+                // log warning and ignore
+                log.warn("Unable to create Node instance: " + e.getMessage());
+            }
+        } else {
+            createPropertyInstance((PropertyState) state);
-        if (log.isDebugEnabled()) {
-            log.debug("caching item " + state);
-        }
-        itemCache.put(state, item);
-    /**
-     * Returns an item reference from the cache.
-     *
-     * @param state State of the item that should be retrieved.
-     * @return the item reference stored in the corresponding cache entry
-     *         or <code>null</code> if there's no corresponding cache entry.
-     */
-    private Item retrieveItem(ItemState state) {
-        return (Item) itemCache.get(state);
-    }
-
-    /**
-     * Removes a cache entry for a specific item.
-     *
-     * @param itemState state of the item to remove from the cache
-     */
-    private void evictItem(ItemState itemState) {
-        if (log.isDebugEnabled()) {
-            log.debug("removing item " + itemState + " from cache");
-        }
-        itemCache.remove(itemState);
+    public void statusChanged(ItemState state, int previousStatus) {
+        // nothing to do -> Item is listening to status changes and forces
+        // cleanup of cache entries through it's own status changes.

MOV26 MOV26 UPD40 UPD40 INS43 INS31 UPD42 MOV42 INS83 UPD43 INS44 MOV29 MOV83 MOV39 UPD42 MOV42 INS8 UPD83 UPD42 UPD83 UPD42 MOV44 INS8 UPD42 INS65 INS43 INS42 INS60 INS25 MOV60 INS25 MOV21 INS25 INS60 MOV60 INS25 INS39 INS42 INS42 INS66 INS42 INS43 INS59 INS62 INS8 UPD43 INS62 INS8 INS62 INS8 INS8 MOV5 INS59 MOV5 UPD42 MOV32 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS43 INS21 UPD42 UPD42 INS32 UPD42 MOV42 UPD43 MOV43 MOV21 INS42 INS43 INS21 MOV21 INS42 INS3 UPD42 UPD42 INS54 MOV21 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 INS42 UPD42 UPD42 MOV42 INS32 MOV5 INS4 MOV5 INS8 INS12 INS32 INS42 INS52 INS42 INS52 INS36 UPD42 MOV42 MOV42 INS42 INS42 MOV21 INS44 INS8 UPD42 INS11 INS36 INS42 UPD42 INS11 UPD45 INS43 INS42 MOV21 INS43 INS42 INS11 UPD43 MOV43 INS42 UPD42 UPD42 MOV42 UPD42 INS11 INS42 INS42 INS43 INS42 UPD43 UPD42 UPD42 INS43 INS42 UPD42 INS42 UPD42 INS42 UPD45 INS32 INS42 INS42 DEL42 DEL43 DEL40 DEL40 DEL14 DEL45 DEL42 DEL43 DEL57 DEL32 DEL45 DEL27 DEL42 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL62 DEL36 DEL38 DEL42 DEL43 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL42 DEL43 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL52 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL61 DEL52 DEL42 DEL52 DEL4 DEL3 DEL59 DEL60 DEL66 DEL66 DEL65 DEL66 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8