JCR-3754 - [jackrabbit-aws-ext] Add retry logic to S3 asynchronous failed upload

Applying patch from Shashank Gupta

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1585461 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.ConcurrentHashMap;
+ *     &lt;param name="{@link #setUploadRetries(int) uploadRetries}" value="3"/>
+    
+    /**
+     * In memory map to hold failed asynchronous upload {@link DataIdentifier}
+     * and its retry count. Once if all retries are exhausted or file is 
+     * successfully uploaded, then corresponding entry is flushed from the map.
+     * As all failed uploads are synchronously uploaded at startup, this map 
+     * is not required to be persisted. 
+     */
+    protected final Map<DataIdentifier, Integer> uploadRetryMap = new ConcurrentHashMap<DataIdentifier, Integer>(5);
+    
+    /**
+     * The number of retries for failed upload.
+     */
+    private int uploadRetries = 3;
-            LOG.info("path=[" + path + ",] tmpPath= [" + tmpDir.getPath() + "]");
+            LOG.info("path=[{}],  tmpPath=[{}]", path, tmpDir.getPath());
-                LOG.info("tmp = " + tmpDir.getPath() + " cleaned");
+                LOG.info("tmp=[{}] cleaned.", tmpDir.getPath());
-                    LOG.info("marker file = " + markerFile.getAbsolutePath()
-                        + " exists");
+                    LOG.info("marker file = [{}] exists ",
+                        markerFile.getAbsolutePath());
-                LOG.info("Uploading [" + fileList + "]  and size ["
-                    + fileList.size() + "] from AsyncUploadCache.");
+                LOG.info("Uploading [{}] and size=[{}] from AsyncUploadCache.",
+                    fileList, fileList.size());
-                        LOG.error("Cannot upload pending file ["
-                            + f.getAbsolutePath() + "]. File doesn't exist.");
+                        LOG.error(
+                            "Cannot upload pending file [{}]. File doesn't exist.",
+                            f.getAbsolutePath());
-                    LOG.error("Pending uploads of files [" + errorFiles
-                        + "] failed. Files do not exist in Local cache.");
-                    LOG.error("To continue set [continueOnAsyncUploadFailure] to true in Datastore configuration in repository.xml."
-                        + " There would be inconsistent data in repository due the missing files. ");
+                    LOG.error(
+                        "Pending uploads of files [{}] failed. Files do not exist in Local cache.",
+                        errorFiles);
+                    LOG.error("To continue set [continueOnAsyncUploadFailure] "
+                        + "to true in Datastore configuration in "
+                        + "repository.xml. There would be inconsistent data "
+                        + "in repository due the missing files. ");
-                        LOG.error("Pending uploads of files ["
-                            + errorFiles
-                            + "] failed. Files do not exist"
-                            + " in Local cache. Continuing as [continueOnAsyncUploadFailure] is set to true.");
+                        LOG.error(
+                            "Pending uploads of files [{}] failed. Files do" +
+                            " not exist in Local cache. Continuing as " +
+                            "[continueOnAsyncUploadFailure] is set to true.",
+                            errorFiles);
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("getting SHA1 hash  [" + identifier + "] length ["
-                    + length + "],   in [" + (currTime - startTime) + "] ms.");
-            }
+            LOG.debug("SHA1 of [{}], length =[{}] took [{}]ms ",
+                new Object[] { identifier, length, (currTime - startTime) });
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("storing  [" + identifier + "] in localCache took ["
-                    + (System.currentTimeMillis() - currTime) + "] ms.");
-            }
+            LOG.debug("storing  [{}] in localCache took [{}] ms", identifier,
+                (System.currentTimeMillis() - currTime));
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("write [" + identifier + "] length [" + length
-                    + "],   in [" + (System.currentTimeMillis() - startTime)
-                    + "] ms.");
-            }
+            LOG.debug("addRecord [{}] of length [{}] took [{}]ms.",
+                new Object[] { identifier, length,
+                    (System.currentTimeMillis() - startTime) });
-        LOG.info("minModifiedDate set to: " + before);
+        LOG.info("minModifiedDate set to [{}]", before);
-        LOG.info("deleteAllOlderThan  exit. Deleted [" + diSet
-            + "] records. Number of records deleted [" + diSet.size() + "]");
+        LOG.info(
+            "deleteAllOlderThan  exit. Deleted [{}]records. Number of records deleted [{}]",
+            diSet, diSet.size());
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("accessed lastModified of identifier:" + identifier);
-        }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("getlastModified of identifier [" + identifier
-                    + "] from AsyncUploadCache = " + lastModified);
-            }
-            return lastModified;
+            LOG.debug(
+                "identifier [{}]'s lastModified retrireved from AsyncUploadCache ",
+                identifier);
-            return backend.getLastModified(identifier);
+            lastModified =  backend.getLastModified(identifier);
+        LOG.debug("identifier= [{}], lastModified=[{}]", identifier,
+            lastModified);
+        return lastModified;
-
-    public void call(DataIdentifier identifier, File file,
-            AsyncUploadCallback.RESULT resultCode) {
+    
+    @Override
+    public void onSuccess(AsyncUploadResult result) {
+        DataIdentifier identifier = result.getIdentifier();
+        File file = result.getFile();
-        if (AsyncUploadCallback.RESULT.SUCCESS.equals(resultCode)) {
-            try {
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("Upload completed. [" + identifier + "].");
-                }
-                AsyncUploadCacheResult result = asyncWriteCache.remove(fileName);
-                if (result.doRequiresDelete()) {
-                    // added record already marked for delete
-                    deleteRecord(identifier);
-                }
-            } catch (IOException ie) {
-                LOG.warn("Cannot remove pending file upload. Dataidentifer [ "
-                    + identifier + "], file [" + file.getAbsolutePath() + "]",
-                    ie);
-            } catch (DataStoreException dse) {
-                LOG.warn("Cannot remove pending file upload. Dataidentifer [ "
-                    + identifier + "], file [" + file.getAbsolutePath() + "]",
-                    dse);
+        try {
+            LOG.debug("Upload completed for [{}]", identifier);
+            // remove from failed upload map if any.
+            uploadRetryMap.remove(identifier);
+            AsyncUploadCacheResult cachedResult = asyncWriteCache.remove(fileName);
+            if (cachedResult.doRequiresDelete()) {
+                // added record already marked for delete
+                deleteRecord(identifier);
-        } else if (AsyncUploadCallback.RESULT.FAILED.equals(resultCode)) {
-            LOG.error("Async Upload failed. Dataidentifer [ " + identifier
-                + "], file [" + file.getAbsolutePath() + "]");
-        } else if (AsyncUploadCallback.RESULT.ABORTED.equals(resultCode)) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Async Upload Aborted. Dataidentifer [ " + identifier
-                    + "], file [" + file.getAbsolutePath() + "]");
-            }
-            try {
-                asyncWriteCache.remove(fileName);
-                LOG.info("Async Upload Aborted. Dataidentifer [ " + identifier
-                    + "], file [" + file.getAbsolutePath() + "] removed.");
-            } catch (IOException ie) {
-                LOG.warn("Cannot remove pending file upload. Dataidentifer [ "
-                    + identifier + "], file [" + file.getAbsolutePath() + "]",
-                    ie);
-            }
+        } catch (IOException ie) {
+            LOG.warn("Cannot remove pending file upload. Dataidentifer [ "
+                + identifier + "], file [" + file.getAbsolutePath() + "]", ie);
+        } catch (DataStoreException dse) {
+            LOG.warn("Cannot remove pending file upload. Dataidentifer [ "
+                + identifier + "], file [" + file.getAbsolutePath() + "]", dse);
+    @Override
+    public void onFailure(AsyncUploadResult result) {
+        DataIdentifier identifier = result.getIdentifier();
+        File file = result.getFile();
+        String fileName = getFileName(identifier);
+        if (result.getException() != null) {
+            LOG.warn("Async Upload failed. Dataidentifer [ " + identifier
+                + "], file [" + file.getAbsolutePath() + "]",
+                result.getException());
+        } else {
+            LOG.warn("Async Upload failed. Dataidentifer [ " + identifier
+                + "], file [" + file.getAbsolutePath() + "]");
+        }
+        // Retry failed upload upto uploadRetries times.
+        try {
+            if (asyncWriteCache.hasEntry(fileName, false)) {
+                synchronized (uploadRetryMap) {
+                    Integer retry = uploadRetryMap.get(identifier);
+                    if (retry == null) {
+                        retry = new Integer(1);
+                    } else {
+                        retry++;
+                    }
+                    if (retry <= uploadRetries) {
+                        uploadRetryMap.put(identifier, retry);
+                        LOG.info(
+                            "Retrying [{}] times failed upload for dataidentifer",
+                            retry, identifier);
+                        try {
+                            backend.writeAsync(identifier, file, this);
+                        } catch (DataStoreException e) {
+                            LOG.warn("exception", e);
+                        }
+                    } else {
+                        LOG.info("Retries [{}] exhausted for  dataidentifer.",
+                            (retry - 1), identifier);
+                        uploadRetryMap.remove(identifier);
+                    }
+                }
+            }
+        } catch (IOException ie) {
+            LOG.warn("Cannot retry failed async file upload. Dataidentifer [ "
+                + identifier + "], file [" + file.getAbsolutePath() + "]", ie);
+        }
+    }
+
+    @Override
+    public void onAbort(AsyncUploadResult result) {
+        DataIdentifier identifier = result.getIdentifier();
+        File file = result.getFile();
+        String fileName = getFileName(identifier);
+        try {
+            asyncWriteCache.remove(fileName);
+            LOG.info(
+                "Async Upload Aborted. Dataidentifer [{}], file [{}] removed from AsyncCache.",
+                identifier, file.getAbsolutePath());
+        } catch (IOException ie) {
+            LOG.warn("Cannot remove pending file upload. Dataidentifer [ "
+                + identifier + "], file [" + file.getAbsolutePath() + "]", ie);
+        }
+    }
+
+
-        if (concurrentUploadsThreads > 1) {
-            new FilesUploader(files, totalSize, concurrentUploadsThreads, false).upload();
-        } else {
-            uploadFilesInSingleThread(files, totalSize);
+        if (files.size() > 0) {
+            if (concurrentUploadsThreads > 1) {
+                new FilesUploader(files, totalSize, concurrentUploadsThreads,
+                    false).upload();
+            } else {
+                uploadFilesInSingleThread(files, totalSize);
+            }
-        LOG.info("Upload:  {" + files.size() + "} files in single thread.");
+        LOG.info("Upload:  [{}] files in single thread.", files.size());
-            long now = System.currentTimeMillis();
-            if (now > time + 5000) {
-                LOG.info("Uploaded:  {" + currentCount + "}/{" + files.size()
-                    + "} files, {" + currentSize + "}/{" + totalSize
-                    + "} size data");
-                time = now;
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("upload file = " + name);
-            }
+            LOG.debug("upload file [{}] ", name);
+            long now = System.currentTimeMillis();
+            if (now > time + 5000) {
+                LOG.info("Uploaded:  [{}/{}] files, [{}/{}] size data",
+                    new Object[] { currentCount, files.size(), currentSize,
+                        totalSize });
+                time = now;
+            }
-        LOG.info("Uploaded:  {" + currentCount + "}/{" + files.size()
-            + "} files, {" + currentSize + "}/{" + totalSize
-            + "} size data, time taken {" + ((endTime - startTime) / 1000)
-            + "} sec");
+        LOG.info(
+            "Uploaded:  [{}/{}] files, [{}/{}] size data, time taken = [{}] sec",
+            new Object[] { currentCount, files.size(), currentSize, totalSize,
+                ((endTime - startTime) / 1000) });
-            if (LOG.isDebugEnabled()) {
-                LOG.debug(f.getName() + "uploaded.");
-            }
+            LOG.debug("uploaded [{}]", f.getName());
+    
+    public int getUploadRetries() {
+        return uploadRetries;
+    }
+
+    public void setUploadRetries(int uploadRetries) {
+        this.uploadRetries = uploadRetries;
+    }
-            LOG.info("Uploaded:  {" + currentCount.get() + "}/{" + files.size()
-                + "} files, {" + currentSize.get() + "}/{" + totalSize
-                + "} size data");
+            LOG.info("Uploaded:  [{}/{}] files, [{}/{}] size data",
+                new Object[] { currentCount, files.size(), currentSize,
+                    totalSize });
-            LOG.info(" Uploading " + files.size() + " using " + threads
-                + " threads.");
+            LOG.info(" Uploading [{}] using [{}] threads.", files.size(), threads);
-            LOG.info("Uploaded:  {" + currentCount.get() + "}/{" + files.size()
-                + "} files, {" + currentSize.get() + "}/{" + totalSize
-                + "} size data, time taken {" + ((endTime - startTime) / 1000)
-                + "} sec");
+            LOG.info(
+                "Uploaded:  [{}/{}] files, [{}/{}] size data, time taken = [{}] sec",
+                new Object[] { currentCount, files.size(), currentSize,
+                    totalSize, ((endTime - startTime) / 1000) });
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Thread [ " + Thread.currentThread().getName()
-                    + "]: Uploading files from startIndex[" + startIndex
-                    + "] and endIndex [" + (endIndex - 1)
-                    + "], both inclusive.");
-            }
+            LOG.debug(
+                "Thread [{}] : Uploading files from startIndex [{}] to endIndex [{}] both inclusive.",
+                new Object[] { Thread.currentThread().getName(), startIndex,
+                    (endIndex - 1) });
-                    if (LOG.isDebugEnabled()) {
-                        LOG.debug("upload file = " + name);
-                    }
+                    LOG.debug("upload file [{}] ",name);

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS39 INS59 MOV25 INS78 UPD42 MOV8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 MOV8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS66 INS65 INS66 INS65 INS43 INS43 INS43 INS42 INS14 INS65 INS42 INS34 MOV21 MOV41 INS42 UPD43 UPD42 INS60 INS60 MOV60 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS54 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS41 INS39 INS42 INS21 INS68 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS74 INS34 INS66 MOV27 MOV8 INS42 INS43 INS59 MOV43 INS59 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 MOV8 INS8 INS8 INS12 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 MOV60 MOV25 INS42 INS7 MOV21 INS42 INS69 INS42 INS43 INS43 INS43 MOV21 MOV21 MOV21 INS45 INS42 INS45 INS42 MOV32 INS21 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 MOV21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS21 INS25 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS34 MOV25 INS45 MOV32 MOV21 INS45 INS3 MOV21 INS22 INS42 INS39 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS43 INS42 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 INS5 INS4 INS52 INS42 INS45 INS3 INS45 MOV32 INS42 INS45 INS3 INS45 INS3 INS45 INS42 MOV32 INS45 INS3 INS45 INS42 MOV36 INS45 INS3 INS45 INS42 INS42 MOV32 MOV42 UPD42 MOV42 INS45 INS42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS9 INS51 INS42 INS32 INS45 INS42 MOV32 UPD42 INS45 INS42 MOV21 INS43 INS85 INS42 MOV32 INS42 INS42 MOV36 INS45 MOV32 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS8 INS42 INS42 INS27 INS42 INS42 INS43 INS85 INS42 MOV32 INS42 INS42 INS43 INS85 INS42 MOV32 INS42 INS42 MOV36 INS43 INS85 MOV32 INS42 MOV36 MOV21 INS45 MOV32 INS45 INS42 MOV32 INS43 INS85 INS42 INS42 MOV36 INS43 INS85 INS42 INS42 MOV36 INS42 INS42 INS60 INS25 INS25 INS45 INS42 INS45 MOV32 INS45 UPD42 INS45 INS3 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS8 INS5 INS4 INS45 INS42 INS45 MOV32 INS45 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS21 INS21 INS54 INS21 INS21 INS43 INS85 INS42 MOV32 INS42 INS42 UPD45 INS45 INS45 UPD45 INS42 INS42 INS42 INS7 INS37 INS32 INS32 INS8 INS12 INS32 INS32 INS42 INS45 MOV32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS45 INS36 INS42 INS42 INS42 INS42 UPD45 UPD45 UPD45 INS43 INS34 INS32 INS43 INS42 INS21 INS27 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS34 INS42 INS42 INS45 INS42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL42 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL45 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL41 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL40 DEL45 DEL42 DEL45 DEL27 DEL32 DEL8 DEL25 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL25 DEL25 DEL25 DEL8 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL45 DEL42 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL8 DEL25 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL45 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL42 DEL32 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL45 DEL27 DEL45 DEL45 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25