- adapting Node.isCheckedOut() behaviour to spec 0.16 (--> no exception if non-versionable)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@124087 13f79535-47bb-0310-9956-ffa450edef68

-        // check if versioning allows write
-        if (!safeIsCheckedOut()) {
+        // check if versioning allows write (only cheep call)
+        if (!isCheckedOut(false)) {
-        // check if versioning allows write
-        if (!safeIsCheckedOut()) {
+        // check if versioning allows write (only cheep call)
+        if (!isCheckedOut(false)) {
-        // check if versioning allows write
-        if (!safeIsCheckedOut()) {
+        // check if versioning allows write (only cheep call)
+        if (!isCheckedOut(false)) {
-        if (!safeIsCheckedOut()) {
+        if (!isCheckedOut(true)) {
-        if (!safeIsCheckedOut()) {
+        if (!isCheckedOut(true)) {
-        if (!safeIsCheckedOut()) {
+        if (!isCheckedOut(true)) {
+     * Same as {@link javax.jcr.Node#isCheckedOut()} but if <code>inherit</code>
+     * is <code>true</code>, a non-versionable node will return the checked out
+     * state of its parent.
+     *
+     * @param inherit
+     *
-    public boolean isCheckedOut()
-            throws UnsupportedRepositoryOperationException, RepositoryException {
-        checkVersionable();
-        return getProperty(VersionManager.PROPNAME_IS_CHECKED_OUT).getBoolean();
+    public boolean isCheckedOut(boolean inherit) throws RepositoryException {
+        // search nearest ancestor that is versionable
+        NodeImpl node = this;
+        while (!node.hasProperty(VersionManager.PROPNAME_IS_CHECKED_OUT)) {
+            if (node.isRepositoryRoot() || !inherit) {
+                return true;
+            }
+            node = (NodeImpl) node.getParent();
+        }
+        return node.getProperty(VersionManager.PROPNAME_IS_CHECKED_OUT).getBoolean();
-     * Same as {@link #isCheckedOut()} but without UnsupportedException.
+     * @see Node#isCheckedOut()
-    public boolean safeIsCheckedOut() throws RepositoryException {
-        // what if this node is not versionable but has OPV==Copy?
-        // do we need to search ancestors for a verionable node?
-        return hasProperty(VersionManager.PROPNAME_IS_CHECKED_OUT)
-                ? getProperty(VersionManager.PROPNAME_IS_CHECKED_OUT).getBoolean()
-                : true;
+    public boolean isCheckedOut() throws RepositoryException {
+        return isCheckedOut(false);

INS29 INS44 MOV43 INS8 MOV29 UPD42 MOV43 INS65 INS65 INS65 INS39 INS42 INS60 INS61 MOV41 INS66 INS65 INS66 INS66 INS66 INS42 INS68 INS43 INS59 INS38 INS8 INS32 INS68 INS42 INS42 UPD42 MOV42 INS42 INS52 INS32 INS25 MOV21 UPD42 MOV42 INS9 UPD42 INS9 UPD42 INS9 UPD42 INS9 UPD42 INS9 UPD42 INS9 UPD42 INS9 INS40 INS42 INS42 INS42 INS40 INS27 INS8 INS7 INS42 INS32 INS38 INS41 INS42 INS11 INS42 INS42 INS42 INS9 INS43 INS32 INS42 UPD42 MOV42 INS42 DEL32 DEL43 DEL8 DEL66 DEL42 DEL68 DEL65 DEL66 DEL65 DEL29 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL9 DEL16