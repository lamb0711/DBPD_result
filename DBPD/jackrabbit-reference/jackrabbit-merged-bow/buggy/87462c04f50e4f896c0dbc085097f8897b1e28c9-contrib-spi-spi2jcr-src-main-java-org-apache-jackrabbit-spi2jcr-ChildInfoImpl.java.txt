JCR-1007: Move common implementations of SPI interfaces to spi-commons module

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@553507 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.ChildInfo;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameException;
+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.UnknownPrefixException;
-class ChildInfoImpl implements ChildInfo {
-
-    /**
-     * The name of this child info.
-     */
-    private final QName name;
-
-    /**
-     * The unique id for this child info or <code>null</code> if it does not
-     * have a unique id.
-     */
-    private final String uniqueId;
-
-    /**
-     * 1-based index of this child info.
-     */
-    private final int index;
+class ChildInfoImpl extends org.apache.jackrabbit.spi.commons.ChildInfoImpl {
-     * @throws RepositoryException if an error occurs while reading from
-     *                             <code>node</code>.
+     * @throws RepositoryException    if an error occurs while reading from
+     *                                <code>node</code>.
+     * @throws IllegalNameException   if the <code>node</code> name is illegal.
+     * @throws UnknownPrefixException if the name of the <code>node</code>
+     *                                contains a prefix not known to
+     *                                <code>nsResolver</code>.
-    public ChildInfoImpl(Node node, NamespaceResolver nsResolver) throws RepositoryException {
-        try {
-            this.name = NameFormat.parse(node.getName(), nsResolver);
-        } catch (NameException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
+    public ChildInfoImpl(Node node, NamespaceResolver nsResolver)
+            throws RepositoryException, IllegalNameException, UnknownPrefixException {
+        super(NameFormat.parse(node.getName(), nsResolver),
+                getUniqueId(node), node.getIndex());
+    }
+
+    /**
+     * @param node the JCR node.
+     * @return the unique id for the <code>node</code> or <code>null</code> if
+     *         the node does not have a unique id.
+     * @throws RepositoryException if an error occurs while reading the unique
+     *                             id.
+     */
+    private static String getUniqueId(Node node) throws RepositoryException {
-        this.uniqueId = uuid;
-        this.index = node.getIndex();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public QName getName() {
-        return name;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public String getUniqueID() {
-        return uniqueId;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public int getIndex() {
-        return index;
+        return uuid;

MOV26 UPD40 UPD40 UPD43 INS31 INS40 INS43 INS43 MOV8 INS29 INS83 INS83 MOV43 INS42 INS44 MOV43 MOV8 INS65 INS65 INS42 INS42 INS46 UPD65 MOV65 UPD65 MOV65 INS65 INS43 INS42 INS41 UPD66 INS42 INS66 INS42 INS66 INS66 INS66 MOV32 INS32 MOV32 INS42 UPD66 UPD66 UPD66 INS42 INS66 UPD66 MOV66 UPD42 MOV42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL65 DEL65 DEL29 DEL83 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31