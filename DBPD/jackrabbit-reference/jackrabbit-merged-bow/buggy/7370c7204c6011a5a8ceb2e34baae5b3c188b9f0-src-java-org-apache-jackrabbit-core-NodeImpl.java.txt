

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@314827 13f79535-47bb-0310-9956-ffa450edef68

-            Path p = Path.create(relPath, session.getNamespaceResolver(), false);
-            if (p.getLength() == 1) {
-                Path.PathElement pe = p.getNameElement();
-                if (pe.denotesName()) {
-                    if (pe.getIndex() > 0) {
-                        // property name can't have subscript
-                        String msg = relPath + " is not a valid property path";
-                        log.debug(msg);
-                        throw new RepositoryException(msg);
-                    }
-                    // check if property entry exists
-                    NodeState thisState = (NodeState) state;
-                    if (thisState.hasPropertyName(pe.getName())) {
-                        return new PropertyId(thisState.getUUID(), pe.getName());
-                    } else {
-                        // there's no property with that name
-                        return null;
-                    }
+            if (relPath.indexOf('/') == -1) {
+                QName propName = session.getNamespaceResolver().getQName(relPath);
+                // check if property entry exists
+                NodeState thisState = (NodeState) state;
+                if (thisState.hasPropertyName(propName)) {
+                    return new PropertyId(thisState.getUUID(), propName);
+                } else {
+                    // there's no property with that name
+                    return null;
-            p = Path.create(getPrimaryPath(), relPath, session.getNamespaceResolver(), true);
+            Path p = Path.create(getPrimaryPath(), relPath, session.getNamespaceResolver(), true);
-        } catch (MalformedPathException e) {
+        } catch (BaseException e) {
-            qName = QName.fromJCRName(name, session.getNamespaceResolver());
+            qName = session.getNamespaceResolver().getQName(name);
-            qName = QName.fromJCRName(propName, session.getNamespaceResolver());
+            qName = session.getNamespaceResolver().getQName(propName);
-            return name.toJCRName(session.getNamespaceResolver());
+            return session.getNamespaceResolver().getJCRName(name);
-            ntName = QName.fromJCRName(nodeTypeName, session.getNamespaceResolver());
+            ntName = session.getNamespaceResolver().getQName(nodeTypeName);
-            ntName = QName.fromJCRName(mixinName, session.getNamespaceResolver());
+            ntName = session.getNamespaceResolver().getQName(mixinName);
-            ntName = QName.fromJCRName(mixinName, session.getNamespaceResolver());
+            ntName = session.getNamespaceResolver().getQName(mixinName);
-            ntName = QName.fromJCRName(mixinName, session.getNamespaceResolver());
+            ntName = session.getNamespaceResolver().getQName(mixinName);

MOV31 MOV29 UPD42 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV29 UPD42 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV60 MOV54 MOV21 MOV60 MOV21 MOV54 MOV25 MOV60 INS27 MOV43 UPD43 MOV32 INS32 INS38 MOV60 INS42 MOV32 UPD42 MOV32 MOV32 UPD42 UPD42 MOV32 MOV32 MOV32 MOV32 UPD42 MOV42 UPD42 MOV42 INS13 INS34 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 MOV32 UPD42 MOV42 UPD42 INS42 DEL32 DEL42 DEL9 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL8 DEL25 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42