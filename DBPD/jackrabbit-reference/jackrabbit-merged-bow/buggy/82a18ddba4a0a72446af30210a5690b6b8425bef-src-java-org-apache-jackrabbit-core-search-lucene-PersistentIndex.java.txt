Redesign of query index to allow for generations of PersistentIndex instances. Indexing a lot of content is now faster and pauses during indexing are less frequent. At the same time less lucene IndexReader/Writer changes occur.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160385 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.fs.FileSystemException;
-import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexReader;
+import org.apache.log4j.Logger;
+    /** The logger instance for this class */
+    private static final Logger log = Logger.getLogger(PersistentIndex.class);
+
+    /** Name of the write lock file */
+    private static final String WRITE_LOCK = "write.lock";
+
+    /** The name of this persistent index */
+    private final String name;
+
+     * @param name the name of this index.
-     * index.
+     *  index.
+     * @throws FileSystemException if an error occurs while opening / creating
+     *  the index.
-    PersistentIndex(FileSystem fs, boolean create, Analyzer analyzer)
-            throws IOException {
+    PersistentIndex(String name, FileSystem fs, boolean create, Analyzer analyzer)
+            throws FileSystemException, IOException {
+        this.name = name;
+
+        // check if index is locked, probably from an unclean repository
+        // shutdown
+        if (fs.exists(WRITE_LOCK)) {
+            log.warn("Removing write lock on search index.");
+            try {
+                fs.deleteFile(WRITE_LOCK);
+            } catch (FileSystemException e) {
+                log.error("Unable to remove write lock on search index.");
+            }
+        }
-     * Merges another index into this persistent index.
+     * Merges another index into this persistent index. Before <code>index</code>
+     * is merged, {@link AbstractIndex#commit()} is called on that
+     * <code>index</code>.
+     *
+
+    /**
+     * Returns <code>true</code> if this index has valid documents. Returns
+     * <code>false</code> if all documents are deleted, or the index does not
+     * contain any documents.
+     * @return
+     * @throws IOException
+     */
+    boolean hasDocuments() throws IOException {
+        if (getIndexReader().numDocs() == 0) {
+            return false;
+        }
+        IndexReader reader = getIndexReader();
+        for (int i = 0; i < reader.maxDoc(); i++) {
+            if (!reader.isDeleted(i)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Returns the name of this index.
+     * @return the name of this index.
+     */
+    String getName() {
+        return name;
+    }

MOV26 INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS44 INS43 INS8 INS29 INS39 INS42 INS43 INS8 INS29 INS43 INS42 INS8 INS65 INS42 INS42 INS32 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS65 INS65 INS43 INS42 INS42 MOV46 INS21 MOV21 INS25 INS65 INS65 INS65 INS42 INS25 INS60 INS24 INS41 INS65 INS65 INS42 INS41 INS66 INS42 INS42 INS57 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS7 INS32 INS8 UPD66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS27 INS8 INS43 INS59 INS58 INS27 INS37 INS8 INS9 INS66 INS66 INS42 INS43 INS22 INS42 INS42 INS42 INS42 INS21 INS54 INS68 INS32 INS34 INS41 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS25 INS42 INS52 INS42 INS32 INS8 INS12 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS34 INS42 INS42 INS38 INS8 INS42 INS42 INS45 INS21 INS44 INS8 INS42 INS32 INS41 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 DEL8