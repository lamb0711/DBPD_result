improve memory consumption of the current hierarchy implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@542571 13f79535-47bb-0310-9956-ffa450edef68

-        // retrieve nodestate of the jcr:versionLabels node
-        if (vhEntry.hasNodeEntry(QName.JCR_VERSIONLABELS)) {
-            labelNodeEntry = vhEntry.getNodeEntry(QName.JCR_VERSIONLABELS, Path.INDEX_DEFAULT);
-        } else {
-            throw new VersionException("nt:versionHistory requires a mandatory, autocreated child node jcr:versionLabels.");
+        // retrieve hierarchy entry of the jcr:versionLabels node
+        labelNodeEntry = vhEntry.getNodeEntry(QName.JCR_VERSIONLABELS, Path.INDEX_DEFAULT, true);
+        if (labelNodeEntry == null) {
+            String msg = "Unexpected error: nt:versionHistory requires a mandatory, autocreated child node jcr:versionLabels.";
+            log.error(msg);
+            throw new VersionException(msg);
-        if (vhEntry.hasNodeEntry(QName.JCR_ROOTVERSION)) {
-            NodeEntry vEntry = vhEntry.getNodeEntry(QName.JCR_ROOTVERSION, Path.INDEX_DEFAULT);
-            return (Version) itemMgr.getItem(vEntry);
-        } else {
+        NodeEntry vEntry = vhEntry.getNodeEntry(QName.JCR_ROOTVERSION, Path.INDEX_DEFAULT, true);
+        if (vEntry == null) {
+        return (Version) itemMgr.getItem(vEntry);
-        NodeState vState = getVersionStateByLabel(getQLabel(label));
-        return (Version) itemMgr.getItem(vState.getHierarchyEntry());
+        return getVersionByLabel(getQLabel(label));
-        NodeState vState = getVersionStateByLabel(getQLabel(label));
+        Version version = getVersionByLabel(qLabel);
+        NodeState vState = getVersionState(version.getName());
-                String uuid = getVersionStateByLabel(qLabels[i]).getUniqueID();
+                String uuid = getVersionByLabel(qLabels[i]).getUUID();
-            String uuid = getVersionStateByLabel(qLabels[i]).getUniqueID();
+            String uuid = getVersionByLabel(qLabels[i]).getUUID();
-            NodeEntry vEntry = vhEntry.getNodeEntry(vQName, Path.INDEX_DEFAULT);
+            NodeEntry vEntry = vhEntry.getNodeEntry(vQName, Path.INDEX_DEFAULT, true);
-     *
+     * 
-    private NodeState getVersionStateByLabel(QName qLabel) throws VersionException, RepositoryException {
-        refreshEntry(labelNodeEntry);
-        if (labelNodeEntry.hasPropertyEntry(qLabel)) {
-            // retrieve reference property value -> and retrieve referenced node
-            PropertyEntry pEntry = labelNodeEntry.getPropertyEntry(qLabel);
-            Node version = ((Property) itemMgr.getItem(pEntry)).getNode();
-            return getVersionState(version.getName());
-        } else {
+    private Version getVersionByLabel(QName qLabel) throws VersionException, RepositoryException {
+         refreshEntry(labelNodeEntry);
+        // retrieve reference property value -> and retrieve referenced node
+        PropertyEntry pEntry = labelNodeEntry.getPropertyEntry(qLabel, true);
+        if (pEntry == null) {
+        Node version = ((Property) itemMgr.getItem(pEntry)).getNode();
+        return (Version) version;

UPD43 UPD42 MOV21 INS25 INS60 MOV41 INS60 UPD42 MOV60 INS25 MOV60 MOV41 INS27 MOV8 MOV43 INS59 INS27 MOV32 MOV43 INS59 INS27 MOV8 INS11 INS42 INS33 INS60 INS21 INS42 INS32 INS42 INS33 UPD42 INS42 INS32 MOV32 INS42 INS33 INS43 INS42 INS9 INS43 INS59 INS32 INS42 INS42 INS40 INS40 INS9 INS42 INS42 UPD42 MOV42 INS9 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS9 UPD42 UPD42 UPD42 DEL45 DEL42 DEL42 DEL40 DEL32 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25