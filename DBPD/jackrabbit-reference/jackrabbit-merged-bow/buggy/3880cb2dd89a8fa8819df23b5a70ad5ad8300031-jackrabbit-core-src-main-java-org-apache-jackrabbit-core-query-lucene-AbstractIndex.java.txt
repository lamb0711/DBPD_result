JCR-1222: Index nodes in parallel

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@596654 13f79535-47bb-0310-9956-ffa450edef68

+    /** Executor with a pool size equal to the number of available processors */
+    private static final DynamicPooledExecutor EXECUTOR = new DynamicPooledExecutor();
+
-     * Adds a document to this index and invalidates the shared reader.
+     * Adds documents to this index and invalidates the shared reader.
-     * @param doc the document to add.
+     * @param docs the documents to add.
-    void addDocument(Document doc) throws IOException {
-        // check if text extractor completed its work
-        doc = getFinishedDocument(doc);
-        getIndexWriter().addDocument(doc);
+    void addDocuments(Document[] docs) throws IOException {
+        final IndexWriter writer = getIndexWriter();
+        DynamicPooledExecutor.Command commands[] =
+                new DynamicPooledExecutor.Command[docs.length];
+        for (int i = 0; i < docs.length; i++) {
+            // check if text extractor completed its work
+            final Document doc = getFinishedDocument(docs[i]);
+            // create a command for inverting the document
+            commands[i] = new DynamicPooledExecutor.Command() {
+                public Object call() throws Exception {
+                    long time = System.currentTimeMillis();
+                    writer.addDocument(doc);
+                    return new Long(System.currentTimeMillis() - time);
+                }
+            };
+        }
+        DynamicPooledExecutor.Result results[] = EXECUTOR.executeAndWait(commands);
+        IOException ex = null;
+        for (int i = 0; i < results.length; i++) {
+            if (results[i].getException() != null) {
+                Throwable cause = results[i].getException().getCause();
+                if (ex == null) {
+                    // only throw the first exception
+                    if (cause instanceof IOException) {
+                        ex = (IOException) cause;
+                    } else {
+                        IOException e = new IOException();
+                        e.initCause(cause);
+                        ex = e;
+                    }
+                } else {
+                    // all others are logged
+                    log.warn("Exception while inverting document", cause);
+                }
+            } else {
+                log.debug("Inverted document in {} ms", results[i].get());
+            }
+        }
+        if (ex != null) {
+            throw ex;
+        }

INS23 INS29 INS83 INS83 INS83 INS43 INS59 UPD42 INS65 INS42 INS42 INS14 INS5 UPD42 INS60 INS60 INS24 INS60 INS60 INS24 INS25 INS66 INS43 UPD66 UPD42 UPD66 MOV43 INS85 INS83 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS42 INS42 INS42 MOV32 INS40 INS42 INS85 INS3 INS39 INS59 INS42 INS40 INS42 INS60 MOV21 INS40 INS42 INS85 INS32 INS42 INS42 INS33 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS33 INS53 INS5 INS40 INS42 INS34 INS83 INS43 INS59 INS42 INS42 INS42 INS42 INS34 INS27 INS8 INS8 INS42 INS43 INS85 INS42 INS42 INS32 INS2 INS14 INS32 INS33 INS60 INS25 MOV21 INS40 INS42 INS2 INS42 INS42 INS43 INS1 INS2 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS40 INS31 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS21 UPD42 UPD42 INS45 INS32 INS83 INS43 INS42 INS43 INS8 INS32 INS42 INS62 INS8 INS8 INS32 INS2 INS42 INS42 INS42 INS60 INS21 INS41 INS2 INS42 INS42 INS43 INS21 INS60 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS39 INS59 INS32 INS14 INS42 INS42 INS42 INS7 INS43 INS59 INS32 INS7 INS42 INS32 INS42 UPD42 MOV42 MOV42 INS43 INS27 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 DEL42 DEL32