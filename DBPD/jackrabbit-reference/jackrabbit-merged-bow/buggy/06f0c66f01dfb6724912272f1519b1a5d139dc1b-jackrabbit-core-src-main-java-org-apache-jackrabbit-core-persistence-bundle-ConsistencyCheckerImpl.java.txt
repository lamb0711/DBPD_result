JCR-3184: consistency check -- add the ability to adopt orphaned nodes to a caller-specified "lost+found" node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1221789 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+    private static final NameFactory NF = NameFactoryImpl.getInstance();
+    
-    public ConsistencyReport check(String[] uuids, boolean recursive, boolean fix) throws RepositoryException {
+    public ConsistencyReport check(String[] uuids, boolean recursive, boolean fix, String lostNFoundId)
+            throws RepositoryException {
-        int total = internalCheckConsistency(uuids, recursive, fix, reports);
+        int total = internalCheckConsistency(uuids, recursive, fix, reports, lostNFoundId);
-    private int internalCheckConsistency(String[] uuids, boolean recursive, boolean fix, Set<ReportItem> reports) throws RepositoryException {
+    private int internalCheckConsistency(String[] uuids, boolean recursive, boolean fix, Set<ReportItem> reports,
+            String lostNFoundId) throws RepositoryException {
-        Collection<NodePropBundle> modifications = new ArrayList<NodePropBundle>();        
+        Collection<NodePropBundle> modifications = new ArrayList<NodePropBundle>();
+        Set<NodeId> orphaned = new HashSet<NodeId>();
+
+        NodeId lostNFound = null;
+        if (fix && lostNFoundId != null) {
+            // do we have a "lost+found" node?
+            try {
+                NodeId tmpid = new NodeId(lostNFoundId);
+                NodePropBundle lfBundle = pm.loadBundle(tmpid);
+                if (lfBundle == null) {
+                    log.error("specified 'lost+found' node does not exist");
+                } else if (!NameConstants.NT_UNSTRUCTURED.equals(lfBundle.getNodeTypeName())) {
+                    log.error("specified 'lost+found' node is not of type nt:unstructered");
+                } else {
+                    lostNFound = lfBundle.getId();
+                }
+            } catch (Exception ex) {
+                log.error("finding 'lost+found' folder", ex);
+            }
+        }
-                            checkBundleConsistency(id, bundle, fix, modifications, reports);
+                            checkBundleConsistency(id, bundle, fix, modifications, lostNFound, orphaned, reports);
-                        checkBundleConsistency(id, bundle, fix, modifications, reports);
+                        checkBundleConsistency(id, bundle, fix, modifications, lostNFound, orphaned, reports);
+        if (fix && lostNFoundId != null && !orphaned.isEmpty()) {
+            // do we have things to add to "lost+found"?
+            try {
+                NodePropBundle lfBundle = pm.loadBundle(lostNFound);
+                if (lfBundle == null) {
+                    log.error("specified 'lost+found' node does not exist");
+                } else if (!NameConstants.NT_UNSTRUCTURED.equals(lfBundle.getNodeTypeName())) {
+                    log.error("specified 'lost+found' node is not of type nt:unstructered");
+                } else {
+                    lfBundle.markOld();
+                    for (NodeId orphan : orphaned) {
+                        String nodeName = orphan + "-" + System.currentTimeMillis();
+                        lfBundle.addChildNodeEntry(NF.create("", nodeName), orphan);
+                    }
+                    pm.storeBundle(lfBundle);
+                    pm.evictBundle(lfBundle.getId());
+                }
+            } catch (Exception ex) {
+                log.error("trying orphan adoption", ex);
+            }
+        }
+
-                                          Set<ReportItem> reports) {
+                                          NodeId lostNFoundId, Set<NodeId> orphaned, Set<ReportItem> reports) {
+                    orphaned.add(id);
+                    if (lostNFoundId != null) {
+                        bundle.setParentId(lostNFoundId);
+                        modifications.add(bundle);
+                    }
-                        parentBundle.addChildNodeEntry(NameFactoryImpl
-                                .getInstance().create("{}" + nodeName), id);
+                        parentBundle.addChildNodeEntry(NF.create("{}" + nodeName), id);

INS26 INS26 INS40 INS40 INS23 INS83 INS83 INS83 INS43 INS59 INS44 INS44 INS44 INS44 INS42 INS42 MOV32 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS25 INS43 INS42 INS74 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS43 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS33 INS42 INS27 INS54 INS27 INS38 INS54 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS33 INS8 INS12 INS42 INS27 INS32 INS8 INS12 INS43 INS43 INS60 INS60 INS25 INS44 INS8 INS42 INS33 INS42 INS42 INS60 INS25 INS44 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS43 INS42 INS21 INS43 INS59 INS27 INS8 INS25 INS43 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS38 INS8 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS38 INS8 INS8 INS42 INS32 INS21 INS25 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS70 INS21 INS21 INS42 INS42 INS45 INS42 INS32 INS27 INS8 INS42 INS42 INS42 INS45 INS40 INS42 INS32 INS32 INS7 INS42 INS42 INS45 INS40 INS42 INS32 INS32 INS32 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42