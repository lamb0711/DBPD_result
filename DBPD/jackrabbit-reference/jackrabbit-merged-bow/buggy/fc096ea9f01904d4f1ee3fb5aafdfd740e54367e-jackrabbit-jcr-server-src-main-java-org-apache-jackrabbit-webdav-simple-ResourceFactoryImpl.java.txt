JCR-388: add support for RFC 3253 to the simple server

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@559335 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.jcr.JcrDavSession;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.jcr.Item;
+import javax.jcr.Node;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Repository;
+import javax.jcr.Session;
+import javax.jcr.version.Version;
+import javax.jcr.version.VersionHistory;
+    private static Logger log =LoggerFactory.getLogger(ResourceFactoryImpl.class);
+
-     * @return
+     * @return DavResource
-        DavResourceImpl resource = (DavResourceImpl)createResource(locator, request.getDavSession());
-        if (DavMethods.isCreateRequest(request) && ! resource.exists()) {
-            resource.setIsCollection(DavMethods.isCreateCollectionRequest(request));
+        try {
+            Node node = getNode(request.getDavSession(), locator);
+            DavResource resource;
+            if (node == null) {
+                log.debug("Creating resource for non-existing repository node.");
+                boolean isCollection = DavMethods.isCreateCollectionRequest(request);
+                resource = createNullResource(locator, request.getDavSession(), isCollection);
+            } else {
+                resource = createResource(node, locator, request.getDavSession());
+            }
+            resource.addLockManager(lockMgr);
+            return resource;
+        } catch (RepositoryException e) {
+            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, e);
-        return resource;
-        DavResourceImpl res = new DavResourceImpl(locator, this, session, resourceConfig);
-        res.addLockManager(lockMgr);
-        return res;
+        try {
+            Node node = getNode(session, locator);
+            DavResource resource = createResource(node, locator, session);
+            resource.addLockManager(lockMgr);
+            return resource;
+        } catch (RepositoryException e) {
+            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, e);
+        }
+    }
+
+    /**
+     * Returns the <code>Node</code> corresponding to the given locator or
+     * <code>null</code> if it does not exist or if the existing item represents
+     * a <code>Property</code>.
+     *
+     * @param sessionImpl
+     * @param locator
+     * @return
+     * @throws RepositoryException
+     */
+    private Node getNode(DavSession sessionImpl, DavResourceLocator locator)
+            throws RepositoryException {
+        Node node = null;
+        try {
+            Item item = ((JcrDavSession)sessionImpl).getRepositorySession().getItem(locator.getRepositoryPath());
+            if (item instanceof Node) {
+                node = (Node)item;
+            } // else: item is a property -> return null
+        } catch (PathNotFoundException e) {
+            // item does not exist (yet) -> create null-resource
+            node = null;
+        }
+        return node;
+    }
+
+    /**
+     * Create a 'null resource'
+     *
+     * @param locator
+     * @param session
+     * @param request
+     * @return
+     * @throws DavException
+     */
+    private DavResource createNullResource(DavResourceLocator locator,
+                                           DavSession session,
+                                           boolean isCollection) throws DavException {
+        JcrDavSession.checkImplementation(session);
+        JcrDavSession sessionImpl = (JcrDavSession)session;
+
+        DavResource resource;
+        if (versioningSupported(sessionImpl.getRepositorySession())) {
+            resource = new VersionControlledResourceImpl(locator, this, sessionImpl, resourceConfig, isCollection);
+        } else {
+            resource = new DavResourceImpl(locator, this, sessionImpl, resourceConfig, isCollection);
+        }
+        return resource;
+    }
+
+    /**
+     * Tries to retrieve the repository item defined by the locator's resource
+     * path and build the corresponding WebDAV resource. If the repository
+     * supports the versioning option different resources are created for
+     * version, versionhistory and common nodes.
+     *
+     * @param locator
+     * @param sessionImpl
+     * @return DavResource representing a repository item.
+     * @throws RepositoryException if {@link javax.jcr.Session#getItem(String)} fails.
+     */
+    private DavResource createResource(Node node, DavResourceLocator locator,
+                                       DavSession session) throws DavException {
+        JcrDavSession.checkImplementation(session);
+        JcrDavSession sessionImpl = (JcrDavSession)session;
+
+        DavResource resource;
+        if (versioningSupported(sessionImpl.getRepositorySession())) {
+            // create special resources for Version and VersionHistory
+            if (node instanceof Version) {
+                resource = new VersionResourceImpl(locator, this, sessionImpl, resourceConfig, node);
+            }  else if (node instanceof VersionHistory) {
+                resource = new VersionHistoryResourceImpl(locator, this, sessionImpl, resourceConfig, node);
+            } else {
+                resource = new VersionControlledResourceImpl(locator, this, sessionImpl, resourceConfig, node);
+            }
+        } else {
+            resource = new DavResourceImpl(locator, this, session, resourceConfig, node);
+        }
+        return resource;
+    }
+
+    /**
+     * @param repoSession
+     * @return true if the JCR repository supports versioning.
+     */
+    private static boolean versioningSupported(Session repoSession) {
+        String desc = repoSession.getRepository().getDescriptor(Repository.OPTION_VERSIONING_SUPPORTED);
+        return Boolean.valueOf(desc).booleanValue();

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS32 INS54 INS54 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS60 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS25 INS41 INS65 INS65 INS43 INS42 INS60 INS41 INS42 INS42 INS57 INS66 INS8 INS12 INS8 INS12 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS66 INS42 INS43 INS59 INS32 INS43 INS60 MOV60 INS25 INS21 MOV41 INS44 INS8 INS60 MOV60 MOV21 MOV41 INS44 INS8 INS42 INS42 INS33 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS32 INS21 INS21 INS68 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS32 INS25 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS59 UPD43 INS27 INS8 INS8 INS32 INS43 INS42 INS53 INS43 INS59 INS43 UPD42 INS43 INS42 INS53 INS43 INS59 INS62 INS8 INS43 INS42 INS21 INS43 INS42 INS42 INS42 INS7 INS7 INS40 INS42 INS69 INS43 INS42 INS42 INS42 INS62 INS8 INS25 INS7 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS33 INS21 INS60 INS21 INS21 MOV42 UPD42 MOV42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 UPD42 INS32 UPD42 INS42 INS14 INS42 INS42 INS32 INS42 INS43 INS21 INS42 INS7 INS42 INS42 INS14 INS42 INS14 INS43 INS42 INS42 INS43 INS21 INS62 INS8 INS8 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS39 INS59 INS7 INS7 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS40 INS42 INS32 INS42 INS32 INS42 INS7 INS42 INS33 INS43 INS42 INS52 INS42 INS42 INS42 MOV43 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS43 INS21 INS21 MOV43 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 MOV32 INS42 MOV32 INS42 INS32 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS7 INS7 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS11 INS43 INS42 INS43 INS42 INS52 INS42 INS42 INS42 INS42 INS14 INS42 INS14 MOV42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS52 INS42 INS42 INS42 INS43 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL11 DEL32 DEL32 DEL38 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL52 DEL42 DEL42 DEL14 DEL8