JCR-337 - Remove jcr dependency from dav-library
JCR-343 - Report#init limits the Report interface to DeltaV compliant resources
JCR-340 - ValuesProperty missing property type information
JCR-342 - DavResource#getDavSession() missing
JCR-344 - DeltaVResource lists MKWORKSPACE in the method constant.
JCR-345 - DavException does not allow to specify an exception cause

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@385540 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.DavSession;
+import org.apache.jackrabbit.webdav.jcr.JcrDavSession;
+import javax.jcr.Session;
- * todo: removing all expired locks
- * todo: 'local' and 'global' are not accurate terms in the given context > replace
- * todo: the usage of the 'global' transaction is not according to the JTA specification,
- * which explicitely requires any transaction present on a servlet to be completed before
- * the service method returns. Starting/completing transactions on the session object,
- * which is possible with the jackrabbit implementation is a hack.
- * todo: review of this transaction part is therefore required. Is there a use-case
- * for those 'global' transactions at all...
+ //todo: removing all expired locks
+ //todo: 'local' and 'global' are not accurate terms in the given context > replace
+ /*todo: the usage of the 'global' transaction is not according to the JTA specification,
+   which explicitely requires any transaction present on a servlet to be completed before
+   the service method returns. Starting/completing transactions on the session object,
+   which is possible with the jackrabbit implementation is a hack.*/
+ /*todo: review of this transaction part is therefore required. Is there a use-case
+   for those 'global' transactions at all...*/
+     * Returns true if the given lock token belongs to a lock that applies to
+     * the given resource, false otherwise. The token may either be retrieved
+     * from the {@link DavConstants#HEADER_LOCK_TOKEN Lock-Token header} or
+     * from the {@link TransactionConstants#HEADER_TRANSACTIONID TransactionId header}.
+     *
+     * @param token
+     * @param resource
+     * @return
+     * @see LockManager#hasLock(String token, DavResource resource)
+     */
+    public boolean hasLock(String token, DavResource resource) {
+        return getLock(token, null, resource) != null;
+    }
+
+    /**
-            String[] sessionTokens = resource.getSession().getRepositorySession().getLockTokens();
+            String[] sessionTokens = resource.getSession().getLockTokens();
-     * Returns true if the given lock token belongs to a lock that applies to
-     * the given resource, false otherwise. The token may either be retrieved
-     * from the {@link DavConstants#HEADER_LOCK_TOKEN Lock-Token header} or
-     * from the {@link TransactionConstants#HEADER_TRANSACTIONID TransactionId header}.
-     *
-     * @param token
-     * @param resource
-     * @return
-     * @see LockManager#hasLock(String token, DavResource resource)
-     */
-    public boolean hasLock(String token, DavResource resource) {
-        return getLock(token, null, resource) != null;
-    }
-
-    /**
-        resource.getSession().getRepositorySession().addLockToken(tx.getId());
+        getRepositorySession(resource).addLockToken(tx.getId());
-        resource.getSession().getRepositorySession().removeLockToken(tx.getId());
+        resource.getSession().removeLockToken(tx.getId());
+
+    /**
+     * @param resource
+     * @return JCR session
+     */
+    private static Session getRepositorySession(TransactionResource resource) throws DavException {
+        return JcrDavSession.getRepositorySession(resource.getSession());
+    }
-                if (!resource.getSession().getRepositorySession().itemExists(getResourcePath())) {
+                if (!getRepositorySession(resource).itemExists(getResourcePath())) {
-        private Item getItem(TransactionResource resource) throws PathNotFoundException, RepositoryException {
-            DavSession session = resource.getSession();
-            String itemPath = resource.getLocator().getJcrPath();
-            return session.getRepositorySession().getItem(itemPath);
+        private Item getItem(TransactionResource resource) throws PathNotFoundException, RepositoryException, DavException {
+            String itemPath = resource.getLocator().getRepositoryPath();
+            return getRepositorySession(resource).getItem(itemPath);
-/*
-
-            currently commented, since server should be jackrabbit independant
-
+            /*
+            // commented, since server should be jackrabbit independant

MOV26 INS26 MOV31 UPD40 INS40 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS43 MOV32 INS42 INS66 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 MOV32 UPD42 MOV42 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60