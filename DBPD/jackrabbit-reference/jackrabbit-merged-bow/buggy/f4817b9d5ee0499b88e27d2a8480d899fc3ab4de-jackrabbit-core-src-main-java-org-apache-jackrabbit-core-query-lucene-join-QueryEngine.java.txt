JCR-2715: Improved join query performance

Handle query offset and limit only after sorting.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1025643 13f79535-47bb-0310-9956-ffa450edef68

-        QueryResult result = merger.merge(
-                new RowIteratorAdapter(leftRows), rightRows, offset, limit);
-        return sort(result, orderings);
+        QueryResult result =
+            merger.merge(new RowIteratorAdapter(leftRows), rightRows);
+        return sort(result, orderings, offset, limit);
-        while ((offset-- > 0 || limit == 0) && nodes.hasNext()) {
-            nodes.next();
-        }
-        if (limit > 0) {
-            List<Node> list = new ArrayList<Node>((int) limit);
-            for (int i = 0; i < limit && nodes.hasNext(); i++) {
-                list.add(nodes.nextNode());
-            }
-            nodes = new NodeIteratorAdapter(list);
-        }
-
-        RangeIterator rows = new RangeIteratorAdapter(nodes) {
+        RowIterator rows = new RowIteratorAdapter(nodes) {
-        QueryResult result = new SimpleQueryResult(
-                columnNames, selectorNames, new RowIteratorAdapter(rows));
-        return sort(result, orderings);
+        QueryResult result =
+            new SimpleQueryResult(columnNames, selectorNames, rows);
+        return sort(result, orderings, offset, limit);
+     * @param offset result offset
+     * @param limit result limit
-    public QueryResult sort(QueryResult result, final Ordering[] orderings)
-            throws RepositoryException {
-        if (orderings != null && orderings.length > 0) {
+    public QueryResult sort(
+            QueryResult result, final Ordering[] orderings,
+            long offset, long limit) throws RepositoryException {
+        if ((orderings != null && orderings.length > 0)
+                || offset != 0 || limit >= 0) {
-            Collections.sort(rows, new RowComparator(orderings));
+            if (orderings != null && orderings.length > 0) {
+                Collections.sort(rows, new RowComparator(orderings));
+            }
+
+            if (offset != 0 || limit >= 0) {
+                int from = (int) offset;
+                int to = rows.size();
+                if (limit >= 0 && offset + limit < to) {
+                    to = (int) (offset + limit);
+                }
+                rows = rows.subList(from, to);
+            }

INS44 INS44 INS65 INS65 INS39 INS42 INS39 INS42 UPD43 INS42 INS66 INS42 INS66 INS27 INS42 INS42 UPD42 INS42 INS42 INS27 INS27 INS25 INS25 MOV43 MOV42 INS36 INS27 INS42 INS34 MOV27 INS8 INS27 INS8 UPD42 MOV42 INS27 INS42 INS34 MOV21 INS27 INS27 INS60 INS60 INS25 INS21 INS27 INS27 INS42 INS34 INS42 INS34 INS39 INS59 INS39 INS59 INS27 INS8 INS7 INS42 INS33 INS40 INS34 INS42 INS11 INS42 INS32 INS27 INS27 INS21 INS42 INS32 INS39 INS42 INS42 INS42 INS42 INS34 INS27 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS39 INS36 INS27 INS42 INS42 DEL42 DEL42 DEL42 DEL37 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL36 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL39 DEL42 DEL11 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL14