JCR-305: provide option to automatically dispose idle workspaces

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@370144 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
+import java.util.HashSet;
+    /**
+     * workspace janitor thread that is responsible for temporarily
+     * shutting down workspaces that have been idle for a specific
+     * amount of time
+     */
+    private Thread wspJanitor;
+
+        log.info("Starting repository...");
+
-        this.acquireRepositoryLock() ;
+        acquireRepositoryLock() ;
-        // init virtual nodetype manager
+        // init virtual node type manager
+        // amount of time in seconds before an idle workspace is automatically
+        // shut down
+        int maxIdleTime = repConfig.getWorkspaceMaxIdleTime();
+        if (maxIdleTime != 0) {
+            // start workspace janitor thread
+            wspJanitor = new WorkspaceJanitor(maxIdleTime * 1000);
+            wspJanitor.start();
+        }
+
+
+        log.info("Repository started");
-                    " deteteced. Repository was not shutdown properly.");
+                    " deteteced. Repository was not shut down properly.");
-            // add nodetypes
+            // add node types
-    protected final SessionImpl createSession(AuthContext loginContext,
+    protected synchronized final SessionImpl createSession(AuthContext loginContext,
+        // reset idle timestamp
+        wspInfo.setIdleTimestamp(0);
-    protected final SessionImpl createSession(Subject subject,
+    protected synchronized final SessionImpl createSession(Subject subject,
+        // reset idle timestamp
+        wspInfo.setIdleTimestamp(0);
+        log.info("Shutting down repository...");
+
+        if (wspJanitor != null) {
+            wspJanitor.interrupt();
+            wspJanitor = null;
+        }
+
+
+        log.info("Repository has been shutdown");
-    private static PersistenceManager createPersistenceManager(File homeDir, FileSystem fs, PersistenceManagerConfig pmConfig,
-                                                               String rootNodeUUID, NamespaceRegistry nsReg, NodeTypeRegistry ntReg)
+    private static PersistenceManager createPersistenceManager(File homeDir,
+                                                               FileSystem fs,
+                                                               PersistenceManagerConfig pmConfig,
+                                                               String rootNodeUUID,
+                                                               NamespaceRegistry nsReg,
+                                                               NodeTypeRegistry ntReg)
-    public void loggedOut(SessionImpl session) {
+    public synchronized void loggedOut(SessionImpl session) {
+         * timestamp when the workspace has been determined being idle
+         */
+        private long idleTimestamp;
+
+        /**
+            idleTimestamp = 0;
+         * Returns the timestamp when the workspace has become idle or zero
+         * if the workspace is currently not idle.
+         *
+         * @return the timestamp when the workspace has become idle or zero if
+         *         the workspace is not idle.
+         */
+        long getIdleTimestamp() {
+            return idleTimestamp;
+        }
+
+        /**
+         * Sets the timestamp when the workspace has become idle. if
+         * <code>ts == 0</code> the workspace is marked as being currently
+         * active.
+         *
+         * @param ts timestamp when workspace has become idle.
+         */
+        void setIdleTimestamp(long ts) {
+            idleTimestamp = ts;
+        }
+
+        /**
+            log.info("initializing workspace '" + getName() + "'...");
+
+
+            log.info("workspace '" + getName() + "' initialized");
+            log.info("shutting down workspace '" + getName() + "'...");
+
+
+            // reset idle timestamp
+            idleTimestamp = 0;
+
+            initialized = false;
+
+            log.info("workspace '" + getName() + "' has been shutdown");
+        }
+    }
+
+    /**
+     * The workspace janitor thread that will shutdown workspaces that have
+     * been idle for a certain amount of time.
+     */
+    private class WorkspaceJanitor extends Thread {
+
+        /**
+         * amount of time in mmilliseconds before an idle workspace is
+         * automatically shutdown.
+         */
+        private long maxIdleTime;
+        /**
+         * interval in mmilliseconds between checks for idle workspaces.
+         */
+        private long checkInterval;
+
+        /**
+         * Creates a new <code>WorkspaceJanitor</code> instance responsible for
+         * shutting down idle workspaces.
+         *
+         * @param maxIdleTime amount of time in mmilliseconds before an idle
+         *                    workspace is automatically shutdown.
+         */
+        WorkspaceJanitor(long maxIdleTime) {
+            super("WorkspaceJanitor");
+            setPriority(Thread.MIN_PRIORITY);
+            setDaemon(true);
+            this.maxIdleTime = maxIdleTime;
+            // compute check interval as 10% of maxIdleTime
+            checkInterval = (long) (0.1 * maxIdleTime);
+        }
+
+        /**
+         * {@inheritDoc}
+         * <p/>
+         * Performs the following tasks in a <code>while (true)</code> loop:
+         * <ol>
+         * <li>wait for <code>checkInterval</code> milliseconds</li>
+         * <li>build list of initialized but currently inactive workspaces
+         *     (excluding the default workspace)</li>
+         * <li>shutdown those workspaces that have been idle for at least
+         *     <code>maxIdleTime</code> milliseconds</li>
+         * </ol>
+         */
+        public void run() {
+            while (!disposed) {
+                try {
+                    Thread.sleep(checkInterval);
+                } catch (InterruptedException e) {
+                    /* ignore */
+                }
+
+                synchronized (RepositoryImpl.this) {
+                    if (disposed) {
+                        return;
+                    }
+                    // get names of workspaces
+                    Set wspNames = new HashSet(wspInfos.keySet());
+                    // remove default workspace (will never be shutdown when idle)
+                    wspNames.remove(repConfig.getDefaultWorkspaceName());
+                    // remove workspaces with active sessions
+                    for (Iterator it = activeSessions.values().iterator(); it.hasNext();) {
+                        SessionImpl ses = (SessionImpl) it.next();
+                        wspNames.remove(ses.getWorkspace().getName());
+                    }
+                    // remove uninitialized workspaces
+                    for (Iterator it = wspInfos.values().iterator(); it.hasNext();) {
+                        WorkspaceInfo wspInfo = (WorkspaceInfo) it.next();
+                        if (!wspInfo.isInitialized()) {
+                            wspNames.remove(wspInfo.getName());
+                        }
+                    }
+
+                    // remaining names denote workspaces which are currently idle
+                    for (Iterator it = wspNames.iterator(); it.hasNext();) {
+                        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(it.next());
+                        long currentTS = System.currentTimeMillis();
+                        long idleTS = wspInfo.getIdleTimestamp();
+                        if (idleTS == 0) {
+                            // set idle timestamp
+                            wspInfo.setIdleTimestamp(currentTS);
+                        } else {
+                            if ((currentTS - idleTS) > maxIdleTime) {
+                                // temporarily shutdown workspace
+                                wspInfo.dispose();
+                            }
+                        }
+                    }
+                }
+            }

INS26 INS26 INS40 INS40 INS83 INS42 INS23 INS55 INS29 INS83 INS43 INS59 INS83 INS83 INS83 INS23 INS31 INS31 INS29 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS65 INS42 INS42 INS21 INS60 INS25 INS21 INS21 INS21 INS21 INS25 INS21 INS29 INS83 INS39 INS59 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS44 INS8 INS65 INS42 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS66 INS66 INS66 INS32 INS39 INS59 INS27 INS8 INS32 INS32 INS32 INS32 INS27 INS8 INS32 INS65 INS42 INS21 INS65 INS65 INS41 INS65 INS65 INS39 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS66 INS66 INS65 INS42 INS65 INS42 INS65 INS65 INS39 INS42 INS46 INS21 INS21 INS21 INS21 INS65 INS61 INS42 INS42 INS45 INS42 INS32 INS42 INS34 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS45 INS42 INS33 INS21 INS21 INS42 INS42 INS45 INS66 INS7 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS7 INS32 INS32 INS32 INS7 INS7 INS32 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS45 INS32 INS32 INS7 INS7 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS38 INS8 INS42 INS42 INS7 INS32 INS32 INS7 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS34 INS42 INS9 INS42 INS42 INS27 INS42 INS40 INS42 INS9 INS22 INS42 INS42 INS11 INS42 INS54 INS51 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS45 INS32 INS45 INS45 INS32 INS45 INS45 INS32 INS45 INS45 INS32 INS45 INS52 INS42 INS39 INS36 INS8 INS12 INS52 INS8 INS43 INS27 UPD45 INS42 INS42 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS25 INS60 INS21 INS24 INS24 INS24 INS42 INS42 INS34 INS34 INS42 INS32 INS43 INS42 INS42 INS8 INS43 INS59 INS32 INS58 INS32 INS8 INS58 INS32 INS8 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS21 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS59 INS42 INS42 INS60 INS60 INS60 INS25 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS32 INS42 INS34 INS21 INS25 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS36 INS42 INS21 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL52