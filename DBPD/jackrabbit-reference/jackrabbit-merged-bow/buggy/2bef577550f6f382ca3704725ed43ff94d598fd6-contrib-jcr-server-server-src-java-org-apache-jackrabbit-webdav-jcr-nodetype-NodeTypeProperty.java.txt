JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
-import org.apache.jackrabbit.webdav.property.DavPropertyName;
-import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.webdav.DavException;
+import org.apache.jackrabbit.webdav.DavServletResponse;
-import org.jdom.Element;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.webdav.property.DavPropertyName;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.log4j.Logger;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
-public class NodeTypeProperty extends AbstractDavProperty {
+public class NodeTypeProperty extends AbstractDavProperty implements NodeTypeConstants {
-    private final NodeTypeElement[] value;
+    private final Set nodetypeNames = new HashSet();
-        super(name, isProtected);
-        value = new NodeTypeElement[] {new NodeTypeElement(nodeType)};
+        this(name, new NodeType[] {nodeType}, isProtected);
-        value = NodeTypeElement.create(nodeTypes);
+        for (int i = 0; i < nodeTypes.length; i++) {
+            NodeType nt = nodeTypes[i];
+            if (nt != null) {
+                nodetypeNames.add(nodeTypes[i].getName());
+            }
+        }
-    public NodeTypeProperty(DavProperty property) {
+    public NodeTypeProperty(DavProperty property) throws DavException {
+        Object propValue = property.getValue();
+        Iterator it;
+        if (propValue instanceof List) {
+            it = ((List)propValue).iterator();
+        } else if (propValue instanceof Element) {
+            List l = new ArrayList();
+            l.add(propValue);
+            it = l.iterator();
+        } else {
+            log.warn("Cannot build NodeTypeProperty from the given property.");
+            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "Cannot build NodeTypeProperty from the given property.");
+        }
-        if (property.getValue() instanceof List) {
-            List ntElemList = new ArrayList();
-            Iterator it = ((List) property.getValue()).iterator();
-                if (content instanceof Element) {
-                    ntElemList.add(new NodeTypeElement((Element)content));
+            if (!(content instanceof Element)) {
+                continue;
+            Element el = (Element)content;
+            if (XML_NODETYPE.equals(el.getLocalName()) && NodeTypeConstants.NAMESPACE.isSame(el.getNamespaceURI())) {
+                String nodetypeName = DomUtil.getText(el);
+                if (nodetypeName != null && !"".equals(nodetypeName)) {
+                    nodetypeNames.add(nodetypeName);
-            value = (NodeTypeElement[]) ntElemList.toArray(new NodeTypeElement[ntElemList.size()]);
-        } else if (property.getValue() instanceof Element) {
-	    NodeTypeElement ntElem = new NodeTypeElement((Element)property.getValue());
-	    value = new NodeTypeElement [] {ntElem};
-            value = new NodeTypeElement[0];
+                log.debug("'dcr:nodetype' element expected -> ignoring element '" + ((Element)content).getNodeName() + "'");
+            }
-        HashSet names = new HashSet();
-        Object val = getValue();
-        if (val instanceof NodeTypeElement[]) {
-            NodeTypeElement[] elems = (NodeTypeElement[])val;
-            for (int i = 0; i < elems.length; i++) {
-                String ntName = elems[i].getNodeTypeName();
-                if (ntName != null) {
-                    names.add(ntName);
-                }
-            }
-        }
-        return names;
+        return nodetypeNames;
-     * Returns the value of this property which is an array of {@link NodeTypeElement}
-     * objects.
+     * Returns the value of this property which is a Set of nodetype names.
-     * @return an array of {@link NodeTypeElement}s
+     * @return a Set of nodetype names (String).
-        return value;
+        return nodetypeNames;
+    }
+
+    /**
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     */
+    public Element toXml(Document document) {
+        Element elem = getName().toXml(document);
+        Iterator it = getNodeTypeNames().iterator();
+        while (it.hasNext()) {
+            String name = it.next().toString();
+            Element ntElem = DomUtil.addChildElement(elem, XML_NODETYPE, NodeTypeConstants.NAMESPACE);
+            DomUtil.addChildElement(ntElem, XML_NODETYPENAME, NodeTypeConstants.NAMESPACE, name);
+        }
+        return elem;

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 UPD40 INS43 INS31 INS31 INS31 INS42 INS43 MOV59 INS8 INS43 MOV29 MOV83 MOV43 MOV42 INS8 INS29 INS83 MOV43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS8 UPD42 MOV42 UPD42 INS17 MOV46 INS24 INS42 INS60 MOV60 INS25 INS61 INS41 INS65 INS65 INS41 INS65 UPD42 MOV42 INS43 INS42 MOV60 INS60 INS61 MOV41 INS42 INS3 INS42 MOV58 INS27 MOV37 INS8 MOV43 INS59 MOV62 INS8 INS25 MOV32 INS8 INS42 INS66 INS66 INS42 INS68 INS42 INS43 INS43 INS59 INS32 INS8 UPD42 UPD5 MOV5 MOV4 INS42 INS40 INS60 INS25 INS42 MOV32 INS42 INS21 MOV62 MOV8 INS8 MOV60 INS25 INS60 INS25 INS40 INS42 INS69 UPD42 MOV42 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 MOV60 INS60 INS21 UPD43 INS42 INS43 INS59 INS27 INS8 INS7 INS42 MOV60 INS21 INS21 INS53 INS38 INS8 MOV43 INS59 INS27 MOV8 MOV8 INS43 INS32 INS42 INS42 INS32 INS42 INS43 INS43 INS59 INS32 UPD42 INS42 INS42 INS2 INS42 INS33 MOV21 INS42 MOV32 INS7 INS32 INS14 INS36 INS18 INS42 MOV11 INS32 INS32 INS25 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS45 INS43 INS40 INS45 MOV62 UPD42 MOV42 INS42 INS32 INS40 INS42 INS32 MOV43 INS27 INS8 INS32 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS27 INS38 MOV21 INS42 INS42 INS27 INS42 INS42 INS2 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS33 INS32 INS32 INS45 INS32 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS11 INS43 INS42 UPD42 MOV42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL46 DEL42 DEL3 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL14 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL7 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL7 DEL25 DEL8 DEL61 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL25 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL42 DEL11 DEL42 DEL42 DEL2 DEL42 DEL43 DEL60 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL62 DEL42 DEL40 DEL27 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL8 DEL31