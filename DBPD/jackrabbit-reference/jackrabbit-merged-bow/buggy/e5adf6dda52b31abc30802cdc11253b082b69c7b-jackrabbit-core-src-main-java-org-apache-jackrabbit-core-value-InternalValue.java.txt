JCR-1346 InternalValue.createCopy for binary properties (jcr:data) causes problems

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@616442 13f79535-47bb-0310-9956-ffa450edef68

-                    return new InternalValue(getBLOBFileValue(store, value.getStream()));
+                    return new InternalValue(getBLOBFileValue(store, value.getStream(), true));
-            return new InternalValue(getBLOBFileValue(null, value));
+            return new InternalValue(getBLOBFileValue(null, value, true));
-            return new InternalValue(getBLOBFileValue(store, value));
+            return new InternalValue(getBLOBFileValue(store, value, true));
-            return new InternalValue(getBLOBFileValue(null, value));
+            return new InternalValue(getBLOBFileValue(null, value, false));
+     * Get the type of this value.
+     *
-     * @return
+     * Create a copy of this object. Immutable values will return itself,
+     * while mutable values will return a copy.
+     *
+     * @return itself or a copy
-        if (USE_DATA_STORE) {
-            return this;
-        }
-        if (type == PropertyType.BINARY) {
-            // return a copy since the wrapped BLOBFileValue instance is mutable
-            InputStream stream = ((BLOBFileValue) val).getStream();
-            try {
-                return createTemporary(stream);
-            } finally {
-                try {
-                    stream.close();
-                } catch (IOException e) {
-                    // ignore
-                }
-            }
-        } else {
-            // for all other types it's safe to return 'this' because the
+        if (type != PropertyType.BINARY) {
+            // for all types except BINARY it's safe to return 'this' because the
+        BLOBFileValue v = (BLOBFileValue) val;
+        if (USE_DATA_STORE) {
+            if (v.isImmutable()) {
+                return this;
+            }
+        }
+        // return a copy since the wrapped BLOBFileValue instance is mutable
+        InputStream stream = v.getStream();
+        try {
+            return createTemporary(stream);
+        } finally {
+            try {
+                stream.close();
+            } catch (IOException e) {
+                // ignore
+            }
+        }
-    private static BLOBFileValue getBLOBFileValue(DataStore store, InputStream in) throws RepositoryException {
+    /**
+     * Create a BLOB value from in input stream. Small objects will create an in-memory object,
+     * while large objects are stored in the data store or in a temp file (if the store parameter is not set).
+     *
+     * @param store the data store (optional)
+     * @param in the input stream
+     * @param temporary if the file should be deleted when discard is called (ignored if a data store is used)
+     * @return the value
+     */
+    private static BLOBFileValue getBLOBFileValue(DataStore store, InputStream in, boolean temporary) throws RepositoryException {
-                return BLOBInTempFile.getInstance(in, true);
+                return BLOBInTempFile.getInstance(in, temporary);
+    /**
+     * Store a value in the data store. This will store temporary files or in-memory objects
+     * in the data store.
+     *
+     * @param dataStore the data store
+     * @throws RepositoryException
+     */
-        val = getBLOBFileValue(dataStore, v.getStream());
+        val = getBLOBFileValue(dataStore, v.getStream(), false);

MOV8 INS29 INS44 INS29 INS65 INS65 MOV25 INS60 INS25 INS60 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS65 INS65 INS65 INS66 INS66 INS66 INS66 INS27 INS43 INS59 INS42 INS8 MOV43 INS59 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS40 INS42 INS42 INS11 INS25 INS42 INS32 MOV43 MOV42 INS32 MOV8 INS42 MOV42 INS9 INS42 INS42 INS9 INS9 INS9 INS9 INS42 DEL42 DEL42 DEL11 DEL36 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL25 DEL8 DEL9