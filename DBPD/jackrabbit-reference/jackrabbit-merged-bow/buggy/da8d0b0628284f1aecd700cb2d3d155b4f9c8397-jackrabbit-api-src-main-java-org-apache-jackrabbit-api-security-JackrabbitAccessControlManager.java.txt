JCR-2253: Discovery of privileges of any set of Principals

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803026 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.PathNotFoundException;
+import javax.jcr.security.Privilege;
+import java.util.Set;
+
+    /**
+     * Returns whether the given set of <code>Principal</code>s has the specified
+     * privileges for absolute path <code>absPath</code>, which must be an
+     * existing node.
+     * <p>
+     * Testing an aggregate privilege is equivalent to testing each non
+     * aggregate privilege among the set returned by calling
+     * <code>Privilege.getAggregatePrivileges()</code> for that privilege.
+     * <p>
+     * The results reported by the this method reflect the net <i>effect</i> of
+     * the currently applied control mechanisms. It does not reflect unsaved
+     * access control policies or unsaved access control entries. Changes to
+     * access control status caused by these mechanisms only take effect on
+     * <code>Session.save()</code> and are only then reflected in the results of
+     * the privilege test methods.
+     * <p>
+     * Since this method allows to view the privileges of principals other
+     * than included in the editing session, this method must throw
+     * <code>AccessDeniedException</code> if the session lacks
+     * <code>READ_ACCESS_CONTROL</code> privilege for the <code>absPath</code>
+     * node.
+     *
+     * @param absPath    an absolute path.
+     * @param principals a set of <code>Principal</code>s for which is the
+     * given privileges are tested.
+     * @param privileges an array of <code>Privilege</code>s.
+     * @return <code>true</code> if the session has the specified privileges;
+     *         <code>false</code> otherwise.
+     * @throws javax.jcr.PathNotFoundException if no node at <code>absPath</code> exists
+     * or the session does not have sufficent access to retrieve a node at that location.
+     * @throws AccessDeniedException if the session lacks
+     * <code>READ_ACCESS_CONTROL</code> privilege for the <code>absPath</code> node.
+     * @throws RepositoryException  if another error occurs.
+     */
+    public boolean hasPrivileges(String absPath, Set<Principal> principals, Privilege[] privileges)
+            throws PathNotFoundException, AccessDeniedException, RepositoryException;
+
+    /**
+     * Returns the privileges the given set of <code>Principal</code>s has for
+     * absolute path <code>absPath</code>, which must be an existing node.
+     * <p>
+     * The returned privileges are those for which {@link #hasPrivileges} would
+     * return <code>true</code>.
+     * <p>
+     * The results reported by the this method reflect the net <i>effect</i> of
+     * the currently applied control mechanisms. It does not reflect unsaved
+     * access control policies or unsaved access control entries. Changes to
+     * access control status caused by these mechanisms only take effect on
+     * <code>Session.save()</code> and are only then reflected in the results of
+     * the privilege test methods.
+     * <p>
+     * Since this method allows to view the privileges of principals other
+     * than included in the editing session, this method must throw
+     * <code>AccessDeniedException</code> if the session lacks
+     * <code>READ_ACCESS_CONTROL</code> privilege for the <code>absPath</code>
+     * node.
+     *
+     *
+     * @param absPath an absolute path.
+     * @param principals a set of <code>Principal</code>s for which is the
+     * privileges are retrieved.
+     * @return an array of <code>Privilege</code>s.
+     * @throws PathNotFoundException if no node at <code>absPath</code> exists
+     * or the session does not have sufficient access to retrieve a node at that
+     * location.
+     * @throws AccessDeniedException if the session lacks <code>READ_ACCESS_CONTROL</code>
+     * privilege for the <code>absPath</code> node.
+     * @throws RepositoryException  if another error occurs.
+     */
+    public Privilege[] getPrivileges(String absPath, Set<Principal> principals)
+            throws PathNotFoundException, AccessDeniedException, RepositoryException;

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS29 INS83 INS5 INS42 INS44 INS44 INS43 INS43 INS43 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS5 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS74 INS42 INS42 INS42 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS40 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS85 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS67 INS42 INS42 INS42