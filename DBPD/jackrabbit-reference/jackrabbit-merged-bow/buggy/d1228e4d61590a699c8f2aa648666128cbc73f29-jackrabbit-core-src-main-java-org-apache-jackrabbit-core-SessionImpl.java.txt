JCR-1276: A Property and a Node Can Have the Same Name

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@605622 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.PrintStream;
-import java.security.AccessControlException;
-import java.security.Principal;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Set;
+import org.apache.commons.collections.IteratorUtils;
+import org.apache.commons.collections.map.ReferenceMap;
+import org.apache.jackrabbit.commons.AbstractSession;
+import org.apache.jackrabbit.core.config.AccessManagerConfig;
+import org.apache.jackrabbit.core.config.WorkspaceConfig;
+import org.apache.jackrabbit.core.lock.LockManager;
+import org.apache.jackrabbit.core.nodetype.NodeDefinitionImpl;
+import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
+import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
+import org.apache.jackrabbit.core.security.AMContext;
+import org.apache.jackrabbit.core.security.AccessManager;
+import org.apache.jackrabbit.core.security.AuthContext;
+import org.apache.jackrabbit.core.security.SecurityConstants;
+import org.apache.jackrabbit.core.state.LocalItemStateManager;
+import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.SessionItemStateManager;
+import org.apache.jackrabbit.core.state.SharedItemStateManager;
+import org.apache.jackrabbit.core.util.Dumpable;
+import org.apache.jackrabbit.core.version.VersionManager;
+import org.apache.jackrabbit.core.xml.DocViewSAXEventGenerator;
+import org.apache.jackrabbit.core.xml.ImportHandler;
+import org.apache.jackrabbit.core.xml.SessionImporter;
+import org.apache.jackrabbit.core.xml.SysViewSAXEventGenerator;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.commons.conversion.DefaultNamePathResolver;
+import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
+import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
+import org.apache.jackrabbit.spi.commons.conversion.NameException;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
+import org.apache.jackrabbit.uuid.UUID;
+import org.apache.jackrabbit.value.ValueFactoryImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import javax.jcr.Property;
-import javax.jcr.Property;
-import javax.jcr.lock.LockException;
+import javax.jcr.lock.LockException;
-
-import org.apache.commons.collections.IteratorUtils;
-import org.apache.commons.collections.map.ReferenceMap;
-import org.apache.jackrabbit.core.RepositoryImpl.WorkspaceInfo;
-import org.apache.jackrabbit.core.config.AccessManagerConfig;
-import org.apache.jackrabbit.core.config.WorkspaceConfig;
-import org.apache.jackrabbit.core.data.GarbageCollector;
-import org.apache.jackrabbit.core.lock.LockManager;
-import org.apache.jackrabbit.core.nodetype.NodeDefinitionImpl;
-import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
-import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
-import org.apache.jackrabbit.core.persistence.IterablePersistenceManager;
-import org.apache.jackrabbit.core.persistence.PersistenceManager;
-import org.apache.jackrabbit.core.security.AMContext;
-import org.apache.jackrabbit.core.security.AccessManager;
-import org.apache.jackrabbit.core.security.AuthContext;
-import org.apache.jackrabbit.core.security.SecurityConstants;
-import org.apache.jackrabbit.core.state.ItemStateException;
-import org.apache.jackrabbit.core.state.LocalItemStateManager;
-import org.apache.jackrabbit.core.state.NodeState;
-import org.apache.jackrabbit.core.state.SessionItemStateManager;
-import org.apache.jackrabbit.core.state.SharedItemStateManager;
-import org.apache.jackrabbit.core.util.Dumpable;
-import org.apache.jackrabbit.core.version.VersionManager;
-import org.apache.jackrabbit.core.version.VersionManagerImpl;
-import org.apache.jackrabbit.core.xml.DocViewSAXEventGenerator;
-import org.apache.jackrabbit.core.xml.ImportHandler;
-import org.apache.jackrabbit.core.xml.SessionImporter;
-import org.apache.jackrabbit.core.xml.SysViewSAXEventGenerator;
-import org.apache.jackrabbit.commons.AbstractSession;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
-import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
-import org.apache.jackrabbit.spi.commons.conversion.DefaultNamePathResolver;
-import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
-import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
-import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.uuid.UUID;
-import org.apache.jackrabbit.value.ValueFactoryImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
+import java.io.File;
+import java.io.PrintStream;
+import java.security.AccessControlException;
+import java.security.Principal;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Set;
-    
-    /**
-     * Create a data store garbage collector for this repository.
-     * 
-     * @throws ItemStateException 
-     * @throws RepositoryException
-     */
-    public GarbageCollector createDataStoreGarbageCollector() throws RepositoryException, ItemStateException {
-        ArrayList pmList = new ArrayList();
-        VersionManagerImpl vm = (VersionManagerImpl)rep.getVersionManager();
-        PersistenceManager pm = vm.getPersistenceManager();
-        pmList.add(pm);
-        String[] wspNames = rep.getWorkspaceNames();
-        SystemSession[] sysSessions = new SystemSession[wspNames.length];
-        for (int i = 0; i < wspNames.length; i++) {
-            String wspName = wspNames[i];
-            WorkspaceInfo wspInfo = rep.getWorkspaceInfo(wspName);
-            sysSessions[i] = rep.getSystemSession(wspName);
-            pm = wspInfo.getPersistenceManager();
-            pmList.add(pm);
-        }
-        IterablePersistenceManager[] ipmList = new IterablePersistenceManager[pmList.size()];
-        for (int i = 0; i < pmList.size(); i++) {
-            pm = (PersistenceManager) pmList.get(i);
-            if (!(pm instanceof IterablePersistenceManager)) {
-                ipmList = null;
-                break;
-            }
-            ipmList[i] = (IterablePersistenceManager) pm;
-        }
-        GarbageCollector gc = new GarbageCollector(this, ipmList, sysSessions);
-        return gc;
-    }
-                parentId = hierMgr.resolvePath(parentPath);
+                parentId = hierMgr.resolveNodePath(parentPath);
-                            parentId = hierMgr.resolvePath(parentPath);
+                            parentId = hierMgr.resolveNodePath(parentPath);
-            ItemImpl item = getItemManager().getItem(srcPath);
-            if (!item.isNode()) {
-                throw new PathNotFoundException(srcAbsPath);
-            }
-            targetNode = (NodeImpl) item;
-            srcParentNode = (NodeImpl) getItemManager().getItem(srcParentPath);
+            targetNode = getItemManager().getNode(srcPath);
+            srcParentNode = getItemManager().getNode(srcParentPath);
-            destParentNode = (NodeImpl) getItemManager().getItem(destParentPath);
+            destParentNode = getItemManager().getNode(destParentPath);
-        ItemImpl existing = null;
+        NodeImpl existing = null;
-            existing = getItemManager().getItem(destPath);
-            if (!existing.isNode()) {
-                // there's already a property with that name
+            existing = getItemManager().getNode(destPath);
+            // there's already a node with that name:
+            // check same-name sibling setting of existing node
+            if (!existing.getDefinition().allowsSameNameSiblings()) {
-            } else {
-                // there's already a node with that name:
-                // check same-name sibling setting of existing node
-                if (!((NodeImpl) existing).getDefinition().allowsSameNameSiblings()) {
-                    throw new ItemExistsException(existing.safeGetJCRPath());
-                }
-            // no name collision since same-name siblings are allowed
+            // no name collision, fall through
-        Item item;
+        NodeImpl parent;
-            item = getItemManager().getItem(p);
+            parent = getItemManager().getNode(p);
-        if (!item.isNode()) {
-            throw new PathNotFoundException(parentAbsPath);
-        }
-        NodeImpl parent = (NodeImpl) item;
-        Item item  = getItem(absPath);
-        if (!item.isNode()) {
+        // check sanity of this session
+        sanityCheck();
+
+        try {
+            Path p = getQPath(absPath).getNormalizedPath();
+            if (!p.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + absPath);
+            }
+            return getItemManager().getNode(p);
+        } catch (AccessDeniedException ade) {
+        } catch (NameException e) {
+            String msg = "invalid path:" + absPath;
+            log.debug(msg);
+            throw new RepositoryException(msg, e);
-        return (Node) item;
-        Item item  = getItem(absPath);
-        if (item.isNode()) {
+        // check sanity of this session
+        sanityCheck();
+
+        try {
+            Path p = getQPath(absPath).getNormalizedPath();
+            if (!p.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + absPath);
+            }
+            return getItemManager().getProperty(p);
+        } catch (AccessDeniedException ade) {
+        } catch (NameException e) {
+            String msg = "invalid path:" + absPath;
+            log.debug(msg);
+            throw new RepositoryException(msg, e);
-        return (Property) item;
-        // TODO: optimize...
+        // check sanity of this session
+        sanityCheck();
+
-            getNode(absPath);
-            return true;
-        } catch (PathNotFoundException pnfe) {
-            return false;
+            Path p = getQPath(absPath).getNormalizedPath();
+            if (!p.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + absPath);
+            }
+            return getItemManager().nodeExists(p);
+        } catch (NameException e) {
+            String msg = "invalid path:" + absPath;
+            log.debug(msg);
+            throw new RepositoryException(msg, e);
-        // TODO: optimize...
+        // check sanity of this session
+        sanityCheck();
+
-            getProperty(absPath);
-            return true;
-        } catch (PathNotFoundException pnfe) {
-            return false;
+            Path p = getQPath(absPath).getNormalizedPath();
+            if (!p.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + absPath);
+            }
+            return getItemManager().propertyExists(p);
+        } catch (NameException e) {
+            String msg = "invalid path:" + absPath;
+            log.debug(msg);
+            throw new RepositoryException(msg, e);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS31 INS31 INS31 INS31 MOV54 MOV29 MOV83 MOV43 INS42 MOV44 MOV43 MOV43 INS8 MOV29 INS83 MOV43 INS42 MOV44 MOV43 MOV43 INS8 MOV29 INS83 INS39 INS42 MOV44 MOV43 INS8 MOV29 INS39 UPD42 MOV42 MOV44 MOV43 INS8 INS21 INS54 INS21 INS54 INS21 INS54 INS21 INS54 MOV43 INS8 MOV43 INS32 INS8 INS12 INS12 INS32 INS8 INS12 INS12 INS32 INS8 INS12 INS32 INS8 INS12 INS21 MOV21 MOV25 MOV21 INS42 INS60 INS25 INS41 INS44 MOV8 INS44 INS8 INS42 INS60 INS25 INS41 INS44 MOV8 INS44 INS8 UPD42 MOV42 INS60 MOV25 INS41 INS44 INS8 INS42 MOV60 INS25 INS41 MOV44 INS8 INS7 MOV8 INS43 INS59 INS38 INS8 MOV32 INS43 INS42 INS43 INS42 MOV60 MOV21 INS53 INS43 INS59 INS38 INS8 INS32 INS43 INS42 INS43 INS42 INS60 MOV21 INS53 INS43 INS59 INS32 INS43 INS42 MOV60 INS21 INS53 UPD43 INS38 INS8 INS32 UPD43 UPD42 INS60 MOV21 INS53 INS42 INS32 UPD42 INS32 MOV32 UPD42 MOV32 UPD42 UPD42 MOV42 INS42 INS32 INS32 INS53 UPD42 UPD42 MOV42 UPD42 MOV42 MOV43 INS14 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS53 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV43 INS59 INS14 UPD42 MOV42 INS42 INS32 INS32 INS53 INS32 INS42 INS42 UPD42 MOV42 UPD43 INS32 INS14 UPD42 UPD42 INS32 INS32 INS53 INS32 UPD42 MOV42 INS42 UPD42 INS43 INS59 INS14 INS32 INS42 INS42 MOV32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS14 UPD42 INS27 UPD42 UPD42 UPD42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS14 UPD42 MOV42 INS42 INS27 UPD42 UPD42 UPD42 INS43 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS14 INS42 UPD42 UPD42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 INS42 INS42 INS27 UPD42 UPD42 INS42 INS43 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 MOV43 INS27 INS45 INS42 INS42 INS42 INS42 INS43 INS27 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS27 INS45 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS43 INS27 INS45 INS42 UPD42 MOV42 UPD42 INS45 INS42 UPD42 MOV42 INS45 INS42 INS42 INS45 INS42 UPD42 MOV42 INS45 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL24 DEL43 DEL42 DEL42 DEL43 DEL52 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL11 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL36 DEL42 DEL33 DEL7 DEL21 DEL10 DEL42 DEL42 DEL32 DEL32 DEL83 DEL42 DEL32 DEL38 DEL25 DEL43 DEL42 DEL11 DEL41 DEL8 DEL31 DEL83 DEL32 DEL25 DEL43 DEL42 DEL11 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL39 DEL42 DEL9 DEL41 DEL8 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31