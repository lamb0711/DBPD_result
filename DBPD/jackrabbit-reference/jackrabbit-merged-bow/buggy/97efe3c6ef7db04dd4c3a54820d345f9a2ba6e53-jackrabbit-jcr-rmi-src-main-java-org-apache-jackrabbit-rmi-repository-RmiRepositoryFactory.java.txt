JCR-3459 RmiRepositoryFactory regression, invalid stream header

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1414782 13f79535-47bb-0310-9956-ffa450edef68

+    @SuppressWarnings("rawtypes")
+    private Repository getJndiRepository(final String name,
+            final Hashtable environment) throws RepositoryException {
+        return new SafeClientRepositoryJndi(name, environment,
+                new ClientAdapterFactory());
+    }
+
+    private Repository getRmiRepository(final String name)
+            throws RepositoryException {
+        return new SafeClientRepositoryName(name, new ClientAdapterFactory());
+    }
+
-    private Repository getJndiRepository(final String name, final Hashtable environment)
-            throws RepositoryException {
-    	return new SafeClientRepository(new ClientAdapterFactory()) {
-			
-			@Override
-			protected RemoteRepository getRemoteRepository() throws RemoteException {
-		        try {
-		            Object value = new InitialContext(environment).lookup(name);
-		            if (value instanceof RemoteRepository) {
-		                return (RemoteRepository) value;
-		            } else {
-		                throw new RemoteException(
-		                        "The JNDI resource " + name
-		                        + " is not a remote repository stub: " + value);
-		            }
-		        } catch (NamingException e) {
-		            throw new RemoteException(
-		                    "Failed to look up the JNDI resource " + name, e);
-		        }
-			}
-		};
+    private static class SafeClientRepositoryJndi extends SafeClientRepository {
+
+        private final String name;
+        private final Hashtable environment;
+
+        public SafeClientRepositoryJndi(String name, Hashtable environment,
+                LocalAdapterFactory factory) {
+            super(factory);
+            this.name = name;
+            this.environment = environment;
+        }
+
+        @Override
+        protected RemoteRepository getRemoteRepository() throws RemoteException {
+            try {
+                Object value = new InitialContext(environment).lookup(name);
+                if (value instanceof RemoteRepository) {
+                    return (RemoteRepository) value;
+                } else {
+                    throw new RemoteException("The JNDI resource " + name
+                            + " is not a remote repository stub: " + value);
+                }
+            } catch (NamingException e) {
+                throw new RemoteException(
+                        "Failed to look up the JNDI resource " + name, e);
+            }
+        }
-    private Repository getRmiRepository(final String name)
-            throws RepositoryException {
-    	return new SafeClientRepository(new ClientAdapterFactory()) {
-				
-    		@Override
-    		protected RemoteRepository getRemoteRepository() throws RemoteException {
-    			try {
-    				Object value = Naming.lookup(name);
-    				if (value instanceof RemoteRepository) {
-    					return (RemoteRepository) value;
-    				} else {
-    					throw new RemoteException(
-    							"The RMI resource " + name
-    							+ " is not a remote repository stub: " + value);
-    				}
-    			} catch (NotBoundException e) {
-    				throw new RemoteException(
-    						"RMI resource " + name + " not found", e);
-    			} catch (MalformedURLException e) {
-    				throw new RemoteException(
-    						"Invalid RMI name: " + name, e);
-    			} catch (RemoteException e) {
-    				throw new RemoteException(
-    						"Failed to look up the RMI resource " + name, e);
-    			}
-    		}
-    	};
+    private static class SafeClientRepositoryName extends SafeClientRepository {
+
+        private final String name;
+
+        public SafeClientRepositoryName(String name, LocalAdapterFactory factory) {
+            super(factory);
+            this.name = name;
+        }
+
+        @Override
+        protected RemoteRepository getRemoteRepository() throws RemoteException {
+            try {
+                Object value = Naming.lookup(name);
+                if (value instanceof RemoteRepository) {
+                    return (RemoteRepository) value;
+                } else {
+                    throw new RemoteException("The RMI resource " + name
+                            + " is not a remote repository stub: " + value);
+                }
+            } catch (NotBoundException e) {
+                throw new RemoteException(
+                        "RMI resource " + name + " not found", e);
+            } catch (MalformedURLException e) {
+                throw new RemoteException("Invalid RMI name: " + name, e);
+            } catch (RemoteException e) {
+                throw new RemoteException("Failed to look up the RMI resource "
+                        + name, e);
+            }
+        }

MOV55 INS55 INS55 INS79 MOV79 INS83 INS83 INS42 MOV43 INS23 INS23 INS31 MOV31 INS83 INS83 INS42 MOV43 INS23 INS31 MOV31 INS42 INS45 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS46 INS21 INS21 INS42 INS42 INS43 INS42 INS43 INS42 INS46 INS21 INS43 INS42 INS42 MOV14 INS43 INS42 MOV14 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 DEL1 DEL1