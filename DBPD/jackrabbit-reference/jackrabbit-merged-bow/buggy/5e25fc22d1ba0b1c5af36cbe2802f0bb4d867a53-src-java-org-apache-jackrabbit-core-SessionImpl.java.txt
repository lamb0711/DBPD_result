porting jackrabbit to v0.16.2 of jsr170 spec 
(work in progress...)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@148894 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.xml.serialize.OutputFormat;
+import org.apache.xml.serialize.XMLSerializer;
+import javax.jcr.version.VersionException;
+import java.io.OutputStream;
-    public String[] getWorkspaceNames() {
+    protected String[] getWorkspaceNames() {
+     * @throws AccessDeniedException if the current session is not allowed to
+     *                               create the workspace
-    public void createWorkspace(String workspaceName) throws RepositoryException {
+    protected void createWorkspace(String workspaceName)
+            throws AccessDeniedException, RepositoryException {
-    public void save() throws AccessDeniedException, LockException,
-            ConstraintViolationException, InvalidItemStateException,
+    public void save()
+            throws AccessDeniedException, ConstraintViolationException,
+            InvalidItemStateException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
+            VersionException, RepositoryException {
-    public ContentHandler getImportContentHandler(String parentAbsPath) throws PathNotFoundException, RepositoryException {
+    public ContentHandler getImportContentHandler(String parentAbsPath)
+            throws PathNotFoundException, ConstraintViolationException,
+            VersionException, LockException, RepositoryException {
+
+        // check if versioning allows write (only cheap call)
+        if (!parent.isCheckedOut(false)) {
+            String msg = parentAbsPath + ": cannot add a child to a checked-in node";
+            log.error(msg);
+            throw new VersionException(msg);
+        }
+
+        // check protected flag of parent node
+        if (parent.getDefinition().isProtected()) {
+            String msg = parentAbsPath + ": cannot add a child to a protected node";
+            log.error(msg);
+            throw new ConstraintViolationException(msg);
+        }
+
-            ConstraintViolationException, InvalidSerializedDataException,
-            RepositoryException {
+            ConstraintViolationException, VersionException,
+            InvalidSerializedDataException, LockException, RepositoryException {
+     * @see Session#exportDocView(String, ContentHandler, boolean, boolean)
+     */
+    public void exportDocView(String absPath, ContentHandler contentHandler, boolean skipBinary, boolean noRecurse) throws InvalidSerializedDataException, PathNotFoundException, SAXException, RepositoryException {
+        // @todo implement Session#exportDocView(String, ContentHandler, boolean, boolean)
+        throw new RepositoryException("not yet implemented");
+/*
+        // check path & retrieve state
+        Path path;
+        Path.PathElement name;
+        NodeState state;
+        try {
+            path = Path.create(absPath, session.getNamespaceResolver(), true);
+            name = path.getNameElement();
+            state = getNodeState(path, hierMgr, stateMgr);
+        } catch (MalformedPathException mpe) {
+            String msg = "invalid path: " + absPath;
+            log.error(msg, mpe);
+            throw new RepositoryException(msg, mpe);
+        }
+
+        // check read access
+        if (!session.getAccessManager().isGranted(state.getId(), AccessManager.READ)) {
+            throw new PathNotFoundException(absPath);
+        }
+
+        new DocViewSAXEventGenerator(state, name.getName(), noRecurse, binaryAsLink,
+                stateMgr, rep.getNamespaceRegistry(),
+                session.getAccessManager(), hierMgr, contentHandler).serialize();
+    }
+*/
+    }
+
+    /**
+     * @see Session#exportDocView(String, OutputStream, boolean, boolean)
+     */
+    public void exportDocView(String absPath, OutputStream out,
+                              boolean skipBinary, boolean noRecurse)
+            throws InvalidSerializedDataException, IOException,
+            PathNotFoundException,  RepositoryException {
+        OutputFormat format = new OutputFormat("xml", "UTF-8", true);
+        XMLSerializer serializer = new XMLSerializer(out, format);
+        try {
+            exportDocView(absPath, serializer.asContentHandler(), skipBinary, noRecurse);
+        } catch (SAXException se) {
+            throw new RepositoryException(se);
+        }
+    }
+
+    /**
+     * @see Session#exportSysView(String, ContentHandler, boolean, boolean)
+     */
+    public void exportSysView(String absPath, ContentHandler contentHandler,
+                              boolean skipBinary, boolean noRecurse)
+            throws PathNotFoundException, SAXException, RepositoryException {
+        // @todo implement Session#exportSysView(String, ContentHandler, boolean, boolean)
+        throw new RepositoryException("not yet implemented");
+/*
+        // check path & retrieve state
+        Path path;
+        Path.PathElement name;
+        NodeState state;
+        try {
+            path = Path.create(absPath, session.getNamespaceResolver(), true);
+            name = path.getNameElement();
+            state = getNodeState(path, hierMgr, stateMgr);
+        } catch (MalformedPathException mpe) {
+            String msg = "invalid path: " + absPath;
+            log.error(msg, mpe);
+            throw new RepositoryException(msg, mpe);
+        }
+
+        // check read access
+        if (!session.getAccessManager().isGranted(state.getId(), AccessManager.READ)) {
+            throw new PathNotFoundException(absPath);
+        }
+
+        new SysViewSAXEventGenerator(state, name.getName(), noRecurse, binaryAsLink,
+                stateMgr, rep.getNamespaceRegistry(),
+                session.getAccessManager(), hierMgr, contentHandler).serialize();
+    }
+*/
+    }
+
+    /**
+     * @see Session#exportSysView(String, OutputStream, boolean, boolean)
+     */
+    public void exportSysView(String absPath, OutputStream out,
+                              boolean skipBinary, boolean noRecurse)
+            throws IOException, PathNotFoundException, RepositoryException {
+        OutputFormat format = new OutputFormat("xml", "UTF-8", true);
+        XMLSerializer serializer = new XMLSerializer(out, format);
+        try {
+            exportSysView(absPath, serializer.asContentHandler(), skipBinary, noRecurse);
+        } catch (SAXException se) {
+            throw new RepositoryException(se);
+        }
+    }
+
+    /**
-    public void setNamespacePrefix(String prefix, String uri) throws NamespaceException, RepositoryException {
+    public void setNamespacePrefix(String prefix, String uri)
+            throws NamespaceException, RepositoryException {
-    public String[] getNamespacePrefixes() {
+    public String[] getNamespacePrefixes()
+            throws NamespaceException, RepositoryException {
-    public String getNamespaceURI(String prefix) throws NamespaceException {
+    public String getNamespaceURI(String prefix)
+            throws NamespaceException, RepositoryException {
-    public String getNamespacePrefix(String uri) throws NamespaceException {
+    public String getNamespacePrefix(String uri)
+            throws NamespaceException, RepositoryException {
-        String[] getPrefixes() {
+        String[] getPrefixes() throws RepositoryException {

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV43 INS31 INS31 INS31 INS31 UPD83 UPD83 INS43 INS43 INS43 MOV43 INS43 INS43 INS43 INS43 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS43 INS43 INS43 INS43 INS65 INS42 INS42 INS42 INS42 INS42 INS25 INS25 INS42 INS42 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS53 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS54 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS42 INS53 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS42 INS60 INS60 INS54 INS42 INS42 INS42 INS42 INS43 INS42 INS66 INS66 INS38 INS8 INS32 INS8 INS68 INS42 INS42 INS14 INS68 INS42 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS68 INS42 INS42 INS14 INS68 INS42 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS32 INS60 INS21 INS53 INS32 INS42 INS60 INS21 INS53 INS42 INS42 INS69 INS69 INS69 INS69 INS43 INS45 INS42 INS42 INS69 INS69 INS69 INS69 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS69 INS69 INS69 INS69 INS43 INS45 INS42 INS42 INS69 INS69 INS69 INS69 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS9 INS43 INS59 INS32 INS14 INS42 INS42 INS43 INS59 INS32 INS14 INS43 INS43 INS39 INS39 INS42 INS43 INS43 INS39 INS39 INS43 INS45 INS45 INS9 INS43 INS42 INS42 INS32 INS43 INS42 INS53 INS43 INS43 INS39 INS39 INS42 INS43 INS43 INS39 INS39 INS43 INS45 INS45 INS9 INS43 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42