JCR-2515: ISO8601 uses default DecimalFormat constructor using locale specific digits

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915772 13f79535-47bb-0310-9956-ffa450edef68

-import java.text.DecimalFormat;
- * <p>
+ * <p/>
-     * misc. numeric formats used in formatting
-     */
-    private static final DecimalFormat XX_FORMAT = new DecimalFormat("00");
-    private static final DecimalFormat XXX_FORMAT = new DecimalFormat("000");
-    private static final DecimalFormat XXXX_FORMAT = new DecimalFormat("0000");
-
-    /**
+            /**
+             * in addition check the validity of the year
+             */
+            getYear(cal);
+     * or the calendar cannot be represented as defined by ISO 8601 (i.e. year
+     * with more than four digits).
-    public static String format(Calendar cal) {
+    public static String format(Calendar cal) throws IllegalArgumentException {
-        // determine era and adjust year if necessary
-        int year = cal.get(Calendar.YEAR);
-        if (cal.isSet(Calendar.ERA)
-                && cal.get(Calendar.ERA) == GregorianCalendar.BC) {
-            /**
-             * calculate year using astronomical system:
-             * year n BCE => astronomical year -n + 1
-             */
-            year = 0 - year + 1;
-        }
-
-        buf.append(XXXX_FORMAT.format(year));
+        appendZeroPaddedInt(buf, getYear(cal), 4);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.MONTH) + 1));
+        appendZeroPaddedInt(buf, cal.get(Calendar.MONTH) + 1, 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.DAY_OF_MONTH)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.DAY_OF_MONTH), 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.HOUR_OF_DAY)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.HOUR_OF_DAY), 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.MINUTE)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.MINUTE), 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.SECOND)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.SECOND), 2);
-        buf.append(XXX_FORMAT.format(cal.get(Calendar.MILLISECOND)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.MILLISECOND), 3);
-            buf.append(XX_FORMAT.format(hours));
+            appendZeroPaddedInt(buf, hours, 2);
-            buf.append(XX_FORMAT.format(minutes));
+            appendZeroPaddedInt(buf, minutes, 2);
+
+    /**
+     * Returns the astronomical year of the given calendar.
+     *
+     * @param cal a calendar instance.
+     * @return the astronomical year.
+     * @throws IllegalArgumentException if calendar cannot be represented as
+     *                                  defined by ISO 8601 (i.e. year with more
+     *                                  than four digits).
+     */
+    public static int getYear(Calendar cal) throws IllegalArgumentException {
+        // determine era and adjust year if necessary
+        int year = cal.get(Calendar.YEAR);
+        if (cal.isSet(Calendar.ERA)
+                && cal.get(Calendar.ERA) == GregorianCalendar.BC) {
+            /**
+             * calculate year using astronomical system:
+             * year n BCE => astronomical year -n + 1
+             */
+            year = 0 - year + 1;
+        }
+
+        if (year > 9999 || year < -9999) {
+            throw new IllegalArgumentException("Calendar has more than four " +
+                    "year digits, cannot be formatted as ISO8601: " + year);
+        }
+        return year;
+    }
+
+    /**
+     * Appends a zero-padded number to the given string buffer.
+     * <p/>
+     * This is an internal helper method which doesn't perform any
+     * validation on the given arguments.
+     *
+     * @param buf String buffer to append to
+     * @param n number to append
+     * @param precision number of digits to append
+     */
+    private static void appendZeroPaddedInt(StringBuffer buf, int n, int precision) {
+        if (n < 0) {
+            buf.append('-');
+            n = -n;
+        }
+
+        int exp = 1;
+        while (exp < precision) {
+            if (n < Math.pow(10, exp)) {
+                buf.append('0');
+            }
+            exp++;
+        }
+        buf.append(n);
+    }

INS31 INS31 INS43 MOV21 MOV21 MOV21 MOV21 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 UPD66 INS42 INS65 INS65 INS65 UPD65 MOV65 INS43 INS42 UPD42 MOV42 MOV60 MOV25 INS25 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS25 INS60 INS61 INS21 INS66 INS66 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS66 INS42 INS66 INS66 INS42 INS66 INS66 UPD66 UPD42 MOV42 INS27 INS8 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 MOV42 INS27 INS8 INS39 INS59 INS27 INS8 INS32 INS21 INS42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 INS27 INS27 INS53 INS42 INS34 INS21 INS21 INS42 INS34 INS42 INS42 INS25 INS21 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS34 INS42 INS38 INS14 INS32 INS7 INS27 INS8 INS37 INS42 INS42 UPD42 UPD42 MOV42 MOV42 INS34 UPD42 UPD42 MOV42 MOV42 INS34 INS34 UPD43 MOV43 INS27 INS42 INS42 INS13 INS42 INS38 INS42 INS32 INS21 INS42 UPD42 INS45 INS45 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS13 DEL40 DEL26 DEL29 DEL83 DEL83 DEL83 DEL43 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32