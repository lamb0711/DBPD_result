Locking and XA
- Introduce internal XA resources
- Add rollback thread that runs when transaction timeout has expired
- Make lock's live attribute transaction-aware
- Make NodeImpl's internalSetProperty protected again 



git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@365558 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.value.InternalValue;
-public class SharedLockManager implements LockManager, SynchronousEventListener {
+public class LockManagerImpl implements LockManager, SynchronousEventListener {
-    private static final Logger log = Logger.getLogger(SharedLockManager.class);
+    private static final Logger log = Logger.getLogger(LockManagerImpl.class);
-     * Monitor used when modifying content, too, in order to make modifications
-     * in the lock map and modifications in the content atomic.
-     */
-    private final Object contentMonitor = new Object();
-
-    /**
-    public SharedLockManager(SessionImpl session, FileSystem fs)
+    public LockManagerImpl(SessionImpl session, FileSystem fs)
-    Lock internalLock(NodeImpl node, boolean isDeep, boolean isSessionScoped)
+    AbstractLockInfo internalLock(NodeImpl node, boolean isDeep, boolean isSessionScoped)
-            return new LockImpl(info, node);
+            return info;
-     * Unlock a node given by its info. Invoked when a session logs out and
-     * all session scoped locks of that session must be unlocked.<p>
-     * In order to prevent deadlocks from within the synchronous dispatching of
-     * events, content modifications should not be made from within code
-     * sections that hold monitors. (see #JCR-194)
-     *
-     * @param info lock info
-     */
-    void unlock(LockInfo info) {
-        // if no session currently holds lock, take system session
-        SessionImpl session = info.getLockHolder();
-        if (session == null) {
-            session = this.session;
-        }
-        try {
-            synchronized (contentMonitor) {
-                // get node's path and remove child in path map
-                NodeImpl node = (NodeImpl) session.getItemManager().getItem(
-                        new NodeId(info.getUUID()));
-                Path path = getPath(node.getId());
-
-                acquire();
-
-                try {
-                    PathMap.Element element = lockMap.map(path, true);
-                    if (element != null) {
-                        element.set(null);
-                    }
-                    info.setLive(false);
-                    if (info.sessionScoped) {
-                        save();
-                    }
-
-                } finally {
-                    release();
-                }
-
-                // remove properties in content
-                node.internalSetProperty(QName.JCR_LOCKOWNER, (InternalValue) null);
-                node.internalSetProperty(QName.JCR_LOCKISDEEP, (InternalValue) null);
-                node.save();
-            }
-        } catch (RepositoryException e) {
-            log.warn("Unable to unlock session-scoped lock on node '"
-                    + info.lockToken + "': " + e.getMessage());
-            log.debug("Root cause: ", e);
-        }
-    }
-
-    /**
-        synchronized (contentMonitor) {
-            Lock lock = internalLock(node, isDeep, isSessionScoped);
-
-            // add properties to content
-            node.internalSetProperty(QName.JCR_LOCKOWNER,
-                    InternalValue.create(node.getSession().getUserID()));
-            node.internalSetProperty(QName.JCR_LOCKISDEEP,
-                    InternalValue.create(isDeep));
-            node.save();
-
-            return lock;
-        }
+        AbstractLockInfo info = internalLock(node, isDeep, isSessionScoped);
+        return new LockImpl(info, node);
-        synchronized (contentMonitor) {
-            internalUnlock(node);
-
-            // remove properties in content
-            node.internalSetProperty(QName.JCR_LOCKOWNER, (InternalValue) null);
-            node.internalSetProperty(QName.JCR_LOCKISDEEP, (InternalValue) null);
-            node.save();
-        }
+        internalUnlock(node);
-                    unlock(this);
+                    // if no session currently holds lock, reassign
+                    SessionImpl lockHolder = getLockHolder();
+                    if (lockHolder == null) {
+                        setLockHolder(session);
+                    }
+                    try {
+                        NodeImpl node = (NodeImpl) session.getItemManager().getItem(
+                                new NodeId(getUUID()));
+                        node.unlock();
+                    } catch (RepositoryException e) {
+                        log.warn("Unable to unlock session-scoped lock on node '"
+                                + lockToken + "': " + e.getMessage());
+                        log.debug("Root cause: ", e);
+                    }

UPD42 UPD42 UPD43 MOV43 INS8 INS8 UPD42 MOV60 MOV41 MOV21 INS43 UPD43 INS41 INS42 UPD42 UPD42 INS42 MOV8 INS8 UPD42 UPD42 MOV60 MOV21 INS32 INS42 INS42 UPD42 INS42 DEL40 DEL26 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL51 DEL8 DEL42 DEL42 DEL42 DEL40 DEL42 DEL43 DEL33 DEL11 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL43 DEL33 DEL11 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL42 DEL42 DEL52 DEL42 DEL22 DEL7 DEL42 DEL40 DEL42 DEL43 DEL33 DEL11 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL21 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL40 DEL42 DEL43 DEL33 DEL11 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL40 DEL42 DEL52 DEL32 DEL21 DEL8