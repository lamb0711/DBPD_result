optimized performance of Item.save() 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@208759 13f79535-47bb-0310-9956-ffa450edef68

-        // collection of descendant transient states:
+/*
+        // build ordered collection of descendant transient states:
-         */
+         * /
-                     */
+                     * /
+*/
+        // build ordered collection of descendant transient states
+        // sorted by decreasing relative depth
+
+        // use an array of lists to group the descendants by relative depth;
+        // the depth is used as array index
+        List[] la = new List[10];
+        try {
+            Iterator iter = transientStateMgr.getEntries();
+            while (iter.hasNext()) {
+                ItemState state = (ItemState) iter.next();
+                // determine relative depth: > 0 means it's a descendant
+                int depth;
+                try {
+                    depth = hierMgr.getRelativeDepth(parentId, state.getId());
+                } catch (ItemNotFoundException infe) {
+                    /**
+                     * one of the parents of the specified item has been
+                     * removed externally; as we don't know its path,
+                     * we can't determine if it is a descendant;
+                     * InvalidItemStateException should only be thrown if
+                     * a descendant is affected;
+                     * => throw InvalidItemStateException for now
+                     * todo FIXME
+                     */
+                    // unable to determine relative depth, assume that the item
+                    // (or any of its ancestors) has been removed externally
+                    String msg = state.getId()
+                            + ": the item seems to have been removed externally.";
+                    log.debug(msg);
+                    throw new InvalidItemStateException(msg);
+                }
+
+                if (depth < 1) {
+                    // not a descendant
+                    continue;
+                }
+
+                // ensure capacity
+                if (depth > la.length) {
+                    List old[] = la;
+                    la = new List[depth + 10];
+                    System.arraycopy(old, 0, la, 0, old.length);
+                }
+
+                List list = la[depth - 1];
+                if (list == null) {
+                    list = new ArrayList();
+                    la[depth - 1] = list;
+                }
+                list.add(state);
+            }
+        } catch (RepositoryException re) {
+            log.warn("inconsistent hierarchy state", re);
+        }
+        // create an iterator over the collected descendants
+        // in decreasing depth order
+        IteratorChain resultIter = new IteratorChain();
+        for (int i = la.length - 1; i >= 0; i--) {
+            List list = la[i];
+            if (list != null) {
+                resultIter.addIterator(list.iterator());
+            }
+        }
+        return resultIter;
-

INS54 INS60 INS24 INS5 INS8 INS12 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS85 UPD42 INS3 MOV60 INS61 MOV44 INS8 UPD42 MOV42 INS42 INS14 INS39 INS59 INS42 INS34 INS42 INS60 INS25 UPD42 MOV42 INS5 INS34 MOV32 INS8 MOV21 INS43 UPD42 MOV42 UPD27 MOV27 INS43 INS59 INS27 INS8 INS43 INS85 MOV60 MOV60 INS54 INS25 INS25 MOV60 INS25 INS21 INS32 UPD42 MOV42 INS40 INS34 UPD42 MOV42 INS42 INS2 INS42 INS33 MOV21 UPD42 MOV42 INS39 MOV8 MOV12 INS27 MOV8 INS27 INS8 UPD43 INS27 INS8 INS32 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 INS42 INS42 UPD42 INS21 UPD42 MOV42 INS34 INS42 INS40 MOV60 MOV21 MOV21 UPD42 UPD42 INS2 INS42 INS33 INS21 INS21 UPD42 MOV42 INS42 MOV42 UPD42 UPD42 INS32 INS7 UPD43 INS42 INS27 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS85 INS42 UPD42 INS3 UPD42 UPD42 UPD42 INS34 INS42 INS34 INS40 INS42 INS34 INS42 INS14 INS2 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS5 INS27 INS43 INS42 INS27 MOV32 UPD45 INS43 INS85 INS42 INS34 UPD42 MOV42 INS42 INS34 INS42 INS42 DEL43 DEL43 DEL42 DEL43 DEL14 DEL14 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL43 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL61 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL8 DEL43 DEL42 DEL44 DEL43 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL32