Initial checkin of QueryManager with support for JCRQL (search implementation is not complete, some features are missing: searching for distinct same name sibling, sorting not yet implemented, indexing contains potential for optimizing)

Changed observation to support SynchronousEventListeners. The search registers itself as synchronous event listener. Also changed access checking on events sent out, because checking access on removed nodes need to be performed before they actually get removed.

Extended config.xml, which allows now to specify an index location for the QueryManager.

Added jar files needed for search.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47399 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.Path;
+import org.apache.jackrabbit.core.MalformedPathException;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.NoPrefixDeclaredException;
+import org.apache.log4j.Logger;
+
+import javax.jcr.RepositoryException;
+import javax.jcr.access.Permission;
+import javax.jcr.observation.EventType;
+import java.util.*;
+     * The default Logger instance for this class.
+     */
+    private static final Logger log = Logger.getLogger(EventConsumer.class);
+
+    /**
-    private final Session session;
+    private final SessionImpl session;
+     * A map of <code>Set</code> objects that hold references to denied
+     * <code>EventState</code>s. The map uses the <code>EventStateCollection</code>
+     * as the key to reference a deny Set.
+     */
+    private final Map accessDenied = Collections.synchronizedMap(new HashMap());
+
+    /**
-    EventConsumer(Session session, EventListener listener, EventFilter filter) {
+    EventConsumer(SessionImpl session, EventListener listener, EventFilter filter) {
+     * Checks for what {@link EventState}s this <code>EventConsumer</code> has
+     * enough access rights to see the event.
+     *
+     * @param events the collection of {@link EventState}s.
+     * @throws RepositoryException if an error occurs while checking access
+     *   rights on the {@link EventStateCollection}.
+     */
+    void prepareEvents(EventStateCollection events) throws RepositoryException {
+	Iterator it = events.iterator();
+	Set denied = null;
+	while (it.hasNext()) {
+	    EventState state = (EventState)it.next();
+	    if (state.getType() == EventType.CHILD_NODE_REMOVED
+		    || state.getType() == EventType.PROPERTY_REMOVED) {
+
+		if (session.equals(state.getSession())) {
+		    // if we created the event, we can be sure that
+		    // we have enough access rights to see the event
+		    continue;
+		}
+
+		try {
+		    // FIXME is there a better way to check access right
+		    // without transforming path
+		    Path p = Path.create(state.getParentPath(), state.getChildItemQName(), false);
+		    if (!session.getWorkspace().getAccessManager().isGranted(
+			    p.toJCRPath(session.getNamespaceResolver()),
+			    Permission.READ_ITEM)) {
+			if (denied == null) {
+			    denied = new HashSet();
+			}
+			denied.add(state);
+		    }
+		} catch (MalformedPathException e) {
+		    // should actually never happen
+		    log.error("internal error: malformed path exception", e);
+		} catch (NoPrefixDeclaredException e) {
+		    // should actually never happen
+		    log.error("internal error: no prefix declared", e);
+		}
+	    }
+	}
+	if (denied != null) {
+	    accessDenied.put(events, denied);
+	}
+    }
+
+    /**
-    void consumeEvents(EventStateCollection events) {
+    void consumeEvents(EventStateCollection events) throws RepositoryException {
+	Set denied = (Set)accessDenied.remove(events);
+	// check permissions
+	for (Iterator it = events.iterator(); it.hasNext(); ) {
+	    EventState state = (EventState)it.next();
+	    if (state.getType() == EventType.CHILD_NODE_ADDED
+		    || state.getType() == EventType.PROPERTY_ADDED
+		    || state.getType() == EventType.PROPERTY_CHANGED) {
+		try {
+		    // FIXME is there a better way to check access right
+		    // without transforming path
+		    Path p = Path.create(state.getParentPath(), state.getChildItemQName(), false);
+		    if (!session.getWorkspace().getAccessManager().isGranted(
+			    p.toJCRPath(session.getNamespaceResolver()),
+			    Permission.READ_ITEM)) {
+			if (denied == null) {
+			    denied = new HashSet();
+			}
+			denied.add(state);
+		    }
+		} catch (MalformedPathException e) {
+		    // should actually never happen
+		    log.error("internal error: malformed path exception", e);
+		} catch (NoPrefixDeclaredException e) {
+		    // should actually never happen
+		    log.error("internal error: no prefix declared", e);
+		}
+	    }
+	}
-	EventIterator it = new FilteredEventIterator(events, filter);
+	EventIterator it = new FilteredEventIterator(events, filter, denied);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 UPD43 INS29 INS83 INS83 INS43 INS59 INS29 INS39 INS42 INS44 INS43 INS8 INS43 INS65 INS42 INS42 INS32 UPD42 INS65 INS42 INS42 INS32 UPD43 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS61 INS25 INS42 INS60 INS24 INS66 INS42 INS42 INS57 INS66 INS66 INS66 INS42 INS42 INS14 UPD42 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS27 INS8 INS43 INS59 INS58 INS32 INS8 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS60 INS25 INS42 INS33 INS21 INS42 INS42 INS11 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS11 INS27 INS27 INS25 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS27 INS27 INS54 INS43 INS32 INS32 INS40 INS32 INS40 INS32 INS8 INS8 INS12 INS12 INS43 INS32 INS27 INS27 INS32 INS40 INS8 INS12 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS18 INS60 INS25 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS32 INS40 INS32 INS40 INS42 INS42 INS60 INS25 INS44 INS8 INS44 INS8 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS32 INS32 INS25 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS25 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS9 INS32 INS42 INS32 INS40 INS27 INS8 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS9 INS32 INS42 INS32 INS40 INS27 INS8 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS7 INS42 INS14 INS42 INS14 INS43 INS43 INS42 INS42