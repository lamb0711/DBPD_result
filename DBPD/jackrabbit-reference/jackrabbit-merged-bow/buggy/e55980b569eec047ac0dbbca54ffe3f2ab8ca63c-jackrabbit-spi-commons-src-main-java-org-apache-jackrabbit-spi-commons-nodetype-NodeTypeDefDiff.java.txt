JCR-3840 take same-name child type definitions into account when reregistering node types

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1644405 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
-        QNodeDefinition[] cnda1 = oldDef.getChildNodeDefs();
-        Map<QNodeDefinitionId, QNodeDefinition> defs1 = new HashMap<QNodeDefinitionId, QNodeDefinition>();
-        for (QNodeDefinition def1 : cnda1) {
-            defs1.put(new QNodeDefinitionId(def1), def1);
+        final Map<QNodeDefinitionId, List<QNodeDefinition>> oldDefs = collectChildNodeDefs(oldDef.getChildNodeDefs());
+        final Map<QNodeDefinitionId, List<QNodeDefinition>> newDefs = collectChildNodeDefs(newDef.getChildNodeDefs());
+
+        for (QNodeDefinitionId defId : oldDefs.keySet()) {
+            final ChildNodeDefDiffs childNodeDefDiffs = new ChildNodeDefDiffs(oldDefs.get(defId), newDefs.get(defId));
+            this.childNodeDefDiffs.addAll(childNodeDefDiffs.getChildNodeDefDiffs());
+            newDefs.remove(defId);
-        QNodeDefinition[] cnda2 = newDef.getChildNodeDefs();
-        Map<QNodeDefinitionId, QNodeDefinition> defs2 = new HashMap<QNodeDefinitionId, QNodeDefinition>();
-        for (QNodeDefinition def2 : cnda2) {
-            defs2.put(new QNodeDefinitionId(def2), def2);
+        for (QNodeDefinitionId defId : newDefs.keySet()) {
+            final ChildNodeDefDiffs childNodeDefDiffs = new ChildNodeDefDiffs(null, newDefs.get(defId));
+            this.childNodeDefDiffs.addAll(childNodeDefDiffs.getChildNodeDefDiffs());
-        /**
-         * walk through defs1 and process all entries found in
-         * both defs1 & defs2 and those found only in defs1
-         */
-        for (Map.Entry<QNodeDefinitionId, QNodeDefinition> entry1 : defs1.entrySet()) {
-            QNodeDefinitionId id = entry1.getKey();
-            QNodeDefinition def1 = entry1.getValue();
-            QNodeDefinition def2 = defs2.get(id);
-            ChildNodeDefDiff diff = new ChildNodeDefDiff(def1, def2);
+        for (ChildNodeDefDiff diff : childNodeDefDiffs) {
-            childNodeDefDiffs.add(diff);
-            defs2.remove(id);
-        }
-
-        /**
-         * defs2 by now only contains entries found in defs2 only;
-         * walk through defs2 and process all remaining entries
-         */
-        for (Map.Entry<QNodeDefinitionId, QNodeDefinition> entry2 : defs2.entrySet()) {
-            QNodeDefinition def2 = entry2.getValue();
-            ChildNodeDefDiff diff = new ChildNodeDefDiff(null, def2);
-            if (diff.getType() > maxType) {
-                maxType = diff.getType();
-            }
-            childNodeDefDiffs.add(diff);
+    private Map<QNodeDefinitionId, List<QNodeDefinition>> collectChildNodeDefs(final QNodeDefinition[] cnda1) {
+        Map<QNodeDefinitionId, List<QNodeDefinition>> defs1 = new HashMap<QNodeDefinitionId, List<QNodeDefinition>>();
+        for (QNodeDefinition def1 : cnda1) {
+            final QNodeDefinitionId def1Id = new QNodeDefinitionId(def1);
+            List<QNodeDefinition> list = defs1.get(def1Id);
+            if (list == null) {
+                list = new ArrayList<QNodeDefinition>();
+                defs1.put(def1Id, list);
+            }
+            list.add(def1);
+        }
+        return defs1;
+    }
+
+
+    private class ChildNodeDefDiffs {
+
+        private final List<QNodeDefinition> defs1;
+        private final List<QNodeDefinition> defs2;
+
+        private ChildNodeDefDiffs(final List<QNodeDefinition> defs1, final List<QNodeDefinition> defs2) {
+            this.defs1 = defs1 != null ? defs1 : Collections.<QNodeDefinition>emptyList();
+            this.defs2 = defs2 != null ? defs2 : Collections.<QNodeDefinition>emptyList();
+        }
+
+        private Collection<ChildNodeDefDiff> getChildNodeDefDiffs() {
+            // gather all possible combinations of diffs
+            final List<ChildNodeDefDiff> diffs = new ArrayList<ChildNodeDefDiff>();
+            for (QNodeDefinition def1 : defs1) {
+                for (QNodeDefinition def2 : defs2) {
+                    diffs.add(new ChildNodeDefDiff(def1, def2));
+                }
+            }
+            if (defs2.size() < defs1.size()) {
+                for (QNodeDefinition def1 : defs1) {
+                    diffs.add(new ChildNodeDefDiff(def1, null));
+                }
+            }
+            if (defs1.size() < defs2.size()) {
+                for (QNodeDefinition def2 : defs2) {
+                    diffs.add(new ChildNodeDefDiff(null, def2));
+                }
+            }
+            // sort them according to decreasing compatibility
+            Collections.sort(diffs, new Comparator<ChildNodeDefDiff>() {
+                @Override
+                public int compare(final ChildNodeDefDiff o1, final ChildNodeDefDiff o2) {
+                    return o1.getType() - o2.getType();
+                }
+            });
+            // select the most compatible ones
+            final int size = defs1.size() > defs2.size() ? defs1.size() : defs2.size();
+            final List<ChildNodeDefDiff> results = new ArrayList<ChildNodeDefDiff>();
+            for (ChildNodeDefDiff diff : diffs) {
+                if (!alreadyMatched(results, diff.getNewDef(), diff.getOldDef())) {
+                    results.add(diff);
+                }
+                if (results.size() == size) {
+                    break;
+                }
+            }
+            return results;
+        }
+
+        private boolean alreadyMatched(final List<ChildNodeDefDiff> result, final QNodeDefinition newDef, final QNodeDefinition oldDef) {
+            boolean containsNewDef = false, containsOldDef = false;
+            for (ChildNodeDefDiff d : result) {
+                if (d.getNewDef() != null && d.getNewDef().equals(newDef)) {
+                    containsNewDef = true;
+                }
+                if (d.getOldDef() != null && d.getOldDef().equals(oldDef)) {
+                    containsOldDef = true;
+                }
+            }
+            return containsNewDef || containsOldDef;
+        }
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS55 MOV29 MOV83 MOV39 MOV42 INS8 INS83 UPD74 MOV74 INS42 INS44 INS8 INS83 INS42 INS23 INS23 INS31 INS31 INS31 MOV60 INS60 INS60 INS70 INS70 INS70 MOV41 UPD43 INS74 INS83 MOV5 INS42 MOV60 MOV70 INS41 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 UPD74 MOV74 MOV59 INS83 UPD74 MOV74 MOV59 INS44 INS32 INS8 INS44 INS32 INS8 INS44 INS42 MOV8 INS42 INS43 MOV43 UPD74 INS8 INS42 INS43 INS43 INS42 INS43 INS43 INS42 INS83 INS74 INS42 INS83 INS74 INS42 INS21 MOV21 INS43 INS43 INS60 INS70 INS25 INS25 INS21 MOV60 MOV60 INS70 INS41 INS83 INS74 INS42 INS83 MOV43 INS42 INS83 INS43 INS42 INS60 INS70 INS41 INS74 INS42 INS32 UPD43 INS74 INS42 INS32 MOV43 INS42 INS42 INS42 MOV60 INS21 INS21 MOV43 INS42 INS42 INS42 MOV60 INS21 MOV43 INS42 INS42 INS43 INS74 UPD42 INS60 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS7 INS7 INS42 INS42 INS83 INS74 INS59 MOV44 INS42 INS8 INS27 INS8 INS27 INS8 INS32 INS83 INS39 INS83 INS74 INS44 INS42 INS8 INS42 UPD43 MOV43 UPD43 MOV43 MOV42 INS39 INS59 INS59 INS44 INS42 INS8 INS27 INS43 MOV43 INS42 MOV32 UPD42 INS43 MOV43 INS42 MOV32 INS83 INS43 INS59 INS32 INS32 INS83 INS43 INS32 INS42 INS43 MOV43 UPD74 INS83 MOV43 INS59 INS74 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS22 INS16 INS22 INS16 INS43 INS43 INS42 INS14 INS43 UPD42 INS70 INS32 INS32 INS70 INS32 INS32 INS70 INS42 INS42 INS42 INS14 INS42 INS16 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS25 INS42 UPD42 INS42 INS9 INS42 INS9 INS43 INS42 INS25 INS25 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS14 INS22 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS22 INS42 INS32 INS42 INS42 INS74 INS42 MOV14 INS43 MOV43 INS42 INS32 INS42 INS33 INS21 MOV21 INS42 INS42 INS42 INS52 INS42 INS27 INS42 INS32 INS52 INS42 INS27 INS42 INS32 INS42 INS42 INS74 INS42 MOV44 INS42 INS8 INS42 INS42 MOV42 UPD42 MOV42 INS44 INS42 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS44 INS42 INS8 INS74 INS1 INS27 INS32 INS32 INS42 INS42 INS74 INS42 INS38 INS8 INS27 INS8 INS42 INS27 INS8 INS27 INS8 INS43 INS32 INS32 INS52 INS42 INS42 INS42 INS43 INS33 INS32 INS52 INS42 INS42 INS42 INS43 MOV43 INS42 INS42 INS42 INS42 INS7 INS42 INS33 INS42 MOV43 INS42 INS42 INS33 UPD42 MOV42 MOV43 INS42 INS43 INS43 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS43 INS31 INS32 INS32 INS42 INS42 MOV42 UPD42 MOV42 INS43 INS43 INS32 MOV21 INS32 INS42 INS10 INS27 INS32 INS21 INS27 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS32 INS33 INS32 INS42 INS42 INS7 INS32 INS33 INS32 UPD42 MOV42 INS42 INS7 INS74 INS42 INS42 MOV14 INS42 INS42 INS14 INS42 INS42 MOV14 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 UPD42 MOV42 INS42 INS42 INS9 INS43 INS43 MOV43 INS42 INS33 INS42 INS42 INS27 INS42 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL8 DEL60 DEL42 DEL8 DEL70 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL74 DEL42 DEL44 DEL32 DEL70 DEL8 DEL31 DEL42 DEL42 DEL42 DEL14 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40