JCR-3454 The RmiRepositoryFactory should handle auto recconnect


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1409181 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.rmi.client.SafeClientRepository;
-    private Repository getUrlRepository(URL url) throws RepositoryException {
-        try {
-            InputStream stream = url.openStream();
-            try {
-                Object remote = new ObjectInputStream(stream).readObject();
-                if (remote instanceof RemoteRepository) {
-                    return getRepository((RemoteRepository) remote);
-                } else {
-                    throw new RepositoryException(
-                            "The resource at URL " + url
-                            + " is not a remote repository stub: "
-                            + remote);
-                }
-            } finally {
-                stream.close();
-            }
-        } catch (ClassNotFoundException e) {
-            throw new RepositoryException(
-                    "The resource at URL " + url
-                    + " requires a class that is not available", e);
-        } catch (IOException e) {
-            throw new RepositoryException(
-                    "Failed to read the resource at URL " + url, e);
-        }
+    private Repository getUrlRepository(final URL url) throws RepositoryException {
+    	return new SafeClientRepository(new ClientAdapterFactory()) {
+			
+			@Override
+			protected RemoteRepository getRemoteRepository() throws RemoteException {
+		        try {
+		            InputStream stream = url.openStream();
+		            try {
+		                Object remote = new ObjectInputStream(stream).readObject();
+		                if (remote instanceof RemoteRepository) {
+		                    return (RemoteRepository) remote;
+		                } else {
+		                    throw new RemoteException(
+		                            "The resource at URL " + url
+		                            + " is not a remote repository stub: "
+		                            + remote);
+		                }
+		            } finally {
+		                stream.close();
+		            }
+		        } catch (ClassNotFoundException e) {
+		            throw new RemoteException(
+		                    "The resource at URL " + url
+		                    + " requires a class that is not available", e);
+		        } catch (IOException e) {
+		            throw new RemoteException(
+		                    "Failed to read the resource at URL " + url, e);
+		        }
+			}
+		};
-    private Repository getJndiRepository(String name, Hashtable environment)
+    private Repository getJndiRepository(final String name, final Hashtable environment)
-        try {
-            Object value = new InitialContext(environment).lookup(name);
-            if (value instanceof RemoteRepository) {
-                return getRepository((RemoteRepository) value);
-            } else {
-                throw new RepositoryException(
-                        "The JNDI resource " + name
-                        + " is not a remote repository stub: " + value);
-            }
-        } catch (NamingException e) {
-            throw new RepositoryException(
-                    "Failed to look up the JNDI resource " + name, e);
-        }
+    	return new SafeClientRepository(new ClientAdapterFactory()) {
+			
+			@Override
+			protected RemoteRepository getRemoteRepository() throws RemoteException {
+		        try {
+		            Object value = new InitialContext(environment).lookup(name);
+		            if (value instanceof RemoteRepository) {
+		                return (RemoteRepository) value;
+		            } else {
+		                throw new RemoteException(
+		                        "The JNDI resource " + name
+		                        + " is not a remote repository stub: " + value);
+		            }
+		        } catch (NamingException e) {
+		            throw new RemoteException(
+		                    "Failed to look up the JNDI resource " + name, e);
+		        }
+			}
+		};
-    private Repository getRmiRepository(String name)
+    private Repository getRmiRepository(final String name)
-        try {
-            Object value = Naming.lookup(name);
-            if (value instanceof RemoteRepository) {
-                return getRepository((RemoteRepository) value);
-            } else {
-                throw new RepositoryException(
-                        "The RMI resource " + name
-                        + " is not a remote repository stub: " + value);
-            }
-        } catch (NotBoundException e) {
-            throw new RepositoryException(
-                    "RMI resource " + name + " not found", e);
-        } catch (MalformedURLException e) {
-            throw new RepositoryException(
-                    "Invalid RMI name: " + name, e);
-        } catch (RemoteException e) {
-            throw new RepositoryException(
-                    "Failed to look up the RMI resource " + name, e);
-        }
+    	return new SafeClientRepository(new ClientAdapterFactory()) {
+				
+    		@Override
+    		protected RemoteRepository getRemoteRepository() throws RemoteException {
+    			try {
+    				Object value = Naming.lookup(name);
+    				if (value instanceof RemoteRepository) {
+    					return (RemoteRepository) value;
+    				} else {
+    					throw new RemoteException(
+    							"The RMI resource " + name
+    							+ " is not a remote repository stub: " + value);
+    				}
+    			} catch (NotBoundException e) {
+    				throw new RemoteException(
+    						"RMI resource " + name + " not found", e);
+    			} catch (MalformedURLException e) {
+    				throw new RemoteException(
+    						"Invalid RMI name: " + name, e);
+    			} catch (RemoteException e) {
+    				throw new RemoteException(
+    						"Failed to look up the RMI resource " + name, e);
+    			}
+    		}
+    	};
-
-    private Repository getRepository(RemoteRepository remote) {
-        return new ClientAdapterFactory().getRepository(remote);
-    }
-

INS26 INS40 INS31 INS31 MOV83 MOV43 INS42 MOV44 MOV43 INS8 INS8 INS83 MOV43 INS42 MOV44 MOV43 MOV8 INS83 INS41 INS83 INS83 INS41 INS83 INS14 INS14 INS14 INS43 INS14 INS1 INS43 INS14 INS1 INS43 MOV14 INS1 INS42 INS43 MOV31 INS42 INS43 INS31 INS42 MOV31 UPD42 MOV42 INS78 UPD83 INS43 UPD42 INS43 INS42 INS78 INS83 INS43 INS42 INS43 MOV8 INS78 UPD83 MOV43 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 MOV8 INS41 UPD43 UPD43 MOV11 UPD43 MOV11 UPD43 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 MOV11 UPD42 UPD42 UPD43 UPD42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL44 DEL31