- adding better error handling for failing persistence managers

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@190379 13f79535-47bb-0310-9956-ffa450edef68

-        FileSystemResource uuidFile = new FileSystemResource(metaDataStore, "rootUUID");
+        // init root node uuid
+        rootNodeUUID = loadRootNodeUUID(metaDataStore);
+
+        // load repository properties
+        repProps = new Properties();
+        loadRepProps();
+        nodesCount = Long.parseLong(repProps.getProperty(STATS_NODE_COUNT_PROPERTY, "0"));
+        propsCount = Long.parseLong(repProps.getProperty(STATS_PROP_COUNT_PROPERTY, "0"));
+
+        // create registries
+        nsReg = createNamespaceRegistry(new BasedFileSystem(repStore, "/namespaces"));
+        ntReg = createNodeTypeRegistry(nsReg, new BasedFileSystem(repStore, "/nodetypes"));
+
+        // init workspace configs
+        Iterator iter = repConfig.getWorkspaceConfigs().iterator();
+        while (iter.hasNext()) {
+            WorkspaceConfig config = (WorkspaceConfig) iter.next();
+            WorkspaceInfo info = new WorkspaceInfo(config);
+            wspInfos.put(config.getName(), info);
+        }
+
+        // init version manager
+        VersioningConfig vConfig = repConfig.getVersioningConfig();
+        PersistenceManager pm = createPersistenceManager(vConfig.getHomeDir(),
+                vConfig.getFileSystem(),
+                vConfig.getPersistenceManagerConfig(),
+                rootNodeUUID,
+                nsReg,
+                ntReg);
+        pvMgr = new NativePVM(pm, getNodeTypeRegistry());
+        vMgr = new VersionManagerImpl(pvMgr, ntReg, delegatingDispatcher,
+                VERSION_STORAGE_NODE_UUID, SYSTEM_ROOT_NODE_UUID);
+
+        // init virtual nodetype manager
+        virtNTMgr = new VirtualNodeTypeStateManager(getNodeTypeRegistry(),
+                delegatingDispatcher, NODETYPES_NODE_UUID, SYSTEM_ROOT_NODE_UUID);
+
+        // initialize workspaces
+        try {
+            iter = wspInfos.keySet().iterator();
+            while (iter.hasNext()) {
+                String wspName = (String) iter.next();
+                initWorkspace(wspName);
+            }
+        } catch (RepositoryException e) {
+            // if any workspace failed to initialize, shutdown again
+            log.error("Unable to start repository. forcing shutdown.");
+            shutdown();
+            throw e;
+        }
+
+        // after the workspaces are initialized, we setup a system session for
+        // the virtual nodetype manager
+        virtNTMgr.setSession(getSystemSession(repConfig.getDefaultWorkspaceName()));
+
+        // finally register shutdown hook
+        Runtime.getRuntime().addShutdownHook(new Thread() {
+            public void run() {
+                shutdown();
+            }
+        });
+    }
+
+    /**
+     * Returns the root node uuid.
+     * @param fs
+     * @return
+     * @throws RepositoryException
+     */
+    protected String loadRootNodeUUID(FileSystem fs) throws RepositoryException {
+        FileSystemResource uuidFile = new FileSystemResource(fs, "rootUUID");
-                    rootNodeUUID = new UUID(new String(chars)).toString();
+                    return new UUID(new String(chars)).toString();
-                rootNodeUUID = ROOT_NODE_UUID;
-                        writer.write(rootNodeUUID);
+                        writer.write(ROOT_NODE_UUID);
+                    return ROOT_NODE_UUID;
-
-        // load repository properties
-        repProps = new Properties();
-        loadRepProps();
-        nodesCount = Long.parseLong(repProps.getProperty(STATS_NODE_COUNT_PROPERTY, "0"));
-        propsCount = Long.parseLong(repProps.getProperty(STATS_PROP_COUNT_PROPERTY, "0"));
-
-        // workspaces
-        Iterator iter = repConfig.getWorkspaceConfigs().iterator();
-        while (iter.hasNext()) {
-            WorkspaceConfig config = (WorkspaceConfig) iter.next();
-            WorkspaceInfo info = new WorkspaceInfo(config);
-            wspInfos.put(config.getName(), info);
-        }
-
-        nsReg = createNamespaceRegistry(new BasedFileSystem(repStore, "/namespaces"));
-
-        ntReg = createNodeTypeRegistry(nsReg, new BasedFileSystem(repStore, "/nodetypes"));
-
-        // init version manager
-        VersioningConfig vConfig = repConfig.getVersioningConfig();
-        PersistenceManager pm = createPersistenceManager(vConfig.getHomeDir(),
-                vConfig.getFileSystem(),
-                vConfig.getPersistenceManagerConfig(),
-                rootNodeUUID,
-                nsReg,
-                ntReg);
-        pvMgr = new NativePVM(pm, getNodeTypeRegistry());
-        vMgr = new VersionManagerImpl(pvMgr, ntReg, delegatingDispatcher,
-                VERSION_STORAGE_NODE_UUID, SYSTEM_ROOT_NODE_UUID);
-
-        // init virtual nodetype manager
-        virtNTMgr = new VirtualNodeTypeStateManager(getNodeTypeRegistry(),
-                delegatingDispatcher, NODETYPES_NODE_UUID, SYSTEM_ROOT_NODE_UUID);
-
-        // initialize workspaces
-        iter = wspInfos.keySet().iterator();
-        while (iter.hasNext()) {
-            String wspName = (String) iter.next();
-            initWorkspace(wspName);
-        }
-
-        // after the workspaces are initialized, we setup a system session for
-        // the virtual nodetype manager
-        virtNTMgr.setSession(getSystemSession(repConfig.getDefaultWorkspaceName()));
-
-        // finally register shutdown hook
-        Runtime.getRuntime().addShutdownHook(new Thread() {
-            public void run() {
-                shutdown();
-            }
-        });

INS31 MOV60 MOV61 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS21 INS54 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 MOV54 INS7 INS8 INS12 INS66 INS42 INS42 INS42 MOV43 INS59 INS42 INS32 MOV21 MOV61 INS44 INS8 INS42 INS14 INS42 INS42 INS43 INS42 INS21 INS21 INS53 MOV43 INS42 INS45 INS42 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS41 INS41 MOV32 INS42 UPD42 DEL42 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21