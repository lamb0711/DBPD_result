Cleaned up code by removing too fine-grained exception declarations.
The rationale for this is that internally the JCR-RMI layer only cares about
the RepositoryException/RemoteException difference.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155801 13f79535-47bb-0310-9956-ffa450edef68

-        if (iterator == null) {
+        if (iterator != null) {
+            RemoteNode[] remotes = new RemoteNode[(int) iterator.getSize()];
+            for (int i = 0; iterator.hasNext(); i++) {
+                remotes[i] = factory.getRemoteNode(iterator.nextNode());
+            }
+            return remotes;
+        } else {
-
-        RemoteNode[] remotes = new RemoteNode[(int) iterator.getSize()];
-        for (int i = 0; iterator != null && iterator.hasNext(); i++) {
-            remotes[i] = factory.getRemoteNode(iterator.nextNode());
-        }
-        return remotes;
-        if (types == null) {
+        if (types != null) {
+            RemoteNodeType[] remotes = new RemoteNodeType[types.length];
+            for (int i = 0; i < types.length; i++) {
+                remotes[i] = factory.getRemoteNodeType(types[i]);
+            }
+            return remotes;
+        } else {
-
-        RemoteNodeType[] remotes = new RemoteNodeType[types.length];
-        for (int i = 0; i < types.length; i++) {
-            remotes[i] = factory.getRemoteNodeType(types[i]);
-        }
-        return remotes;
-        if (iterator == null) {
+        if (iterator != null) {
+            RemoteNodeType[] remotes =
+                new RemoteNodeType[(int) iterator.getSize()];
+            for (int i = 0; iterator.hasNext(); i++) {
+                remotes[i] = factory.getRemoteNodeType(iterator.nextNodeType());
+            }
+            return remotes;
+        } else {
-
-        RemoteNodeType[] remotes = new RemoteNodeType[(int) iterator.getSize()];
-        for (int i = 0; iterator.hasNext(); i++) {
-            remotes[i] = factory.getRemoteNodeType(iterator.nextNodeType());
-        }
-        return remotes;
-        if (defs == null) {
+        if (defs != null) {
+            RemoteNodeDef[] remotes = new RemoteNodeDef[defs.length];
+            for (int i = 0; i < defs.length; i++) {
+                remotes[i] = factory.getRemoteNodeDef(defs[i]);
+            }
+            return remotes;
+        } else {
-
-        RemoteNodeDef[] remotes = new RemoteNodeDef[defs.length];
-        for (int i = 0; i < defs.length; i++) {
-            remotes[i] = factory.getRemoteNodeDef(defs[i]);
-        }
-        return remotes;
-        if (defs == null) {
+        if (defs != null) {
+            RemotePropertyDef[] remotes = new RemotePropertyDef[defs.length];
+            for (int i = 0; i < defs.length; i++) {
+                remotes[i] = factory.getRemotePropertyDef(defs[i]);
+            }
+            return remotes;
+        } else {
-
-        RemotePropertyDef[] remotes = new RemotePropertyDef[defs.length];
-        for (int i = 0; i < defs.length; i++) {
-            remotes[i] = factory.getRemotePropertyDef(defs[i]);
-        }
-        return remotes;

MOV27 INS8 UPD27 INS8 UPD27 INS8 UPD27 INS8 UPD27 INS8 MOV60 MOV24 MOV41 MOV60 MOV24 MOV41 MOV60 MOV24 MOV41 MOV60 MOV24 MOV41 MOV60 MOV24 MOV41 MOV32 DEL27 DEL42 DEL33 DEL27