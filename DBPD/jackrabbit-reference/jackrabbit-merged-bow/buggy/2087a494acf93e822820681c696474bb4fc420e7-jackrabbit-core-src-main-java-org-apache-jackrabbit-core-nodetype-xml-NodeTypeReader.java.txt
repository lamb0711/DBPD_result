JCR-2064 Add new JSR283 features to CND reader/writer
JCR-2153 Introduce QValueConstraint and change return type of QPropertyDefinition.getValueConstraints()
JCR-2158 Consolidate CND related classes from SPI and Core


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785777 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.InvalidConstraintException;
-import org.apache.jackrabbit.core.nodetype.ValueConstraint;
+import org.apache.jackrabbit.spi.commons.nodetype.constraint.ValueConstraint;
+import org.apache.jackrabbit.spi.commons.nodetype.InvalidConstraintException;
+import org.apache.jackrabbit.spi.QValueConstraint;
+     * @return the namespaces
+     * @throws NamespaceException if a namespace is not defined
-        List defs = new ArrayList();
+        List<NodeTypeDef> defs = new ArrayList<NodeTypeDef>();
-        return (NodeTypeDef[]) defs.toArray(new NodeTypeDef[defs.size()]);
+        return defs.toArray(new NodeTypeDef[defs.size()]);
+     * @throws NamespaceException if a namespace is not defined
-                walker.getAttribute(Constants.ISMIXIN_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.ISMIXIN_ATTRIBUTE)));
-                walker.getAttribute(Constants.HASORDERABLECHILDNODES_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.HASORDERABLECHILDNODES_ATTRIBUTE)));
-                walker.getAttribute(Constants.ISABSTRACT_ATTRIBUTE))
-                .booleanValue());
-        type.setQueryable(Boolean.valueOf(
-                walker.getAttribute(Constants.ISQUERYABLE_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.ISABSTRACT_ATTRIBUTE)));
+        if (walker.getAttribute(Constants.ISQUERYABLE_ATTRIBUTE) != null) {
+            type.setQueryable(Boolean.valueOf(
+                    walker.getAttribute(Constants.ISQUERYABLE_ATTRIBUTE)));
+        }
-            List supertypes = new ArrayList();
+            List<Name> supertypes = new ArrayList<Name>();
-            type.setSupertypes((Name[])
-                    supertypes.toArray(new Name[supertypes.size()]));
+            type.setSupertypes(supertypes.toArray(new Name[supertypes.size()]));
-        List properties = new ArrayList();
+        List<PropDef> properties = new ArrayList<PropDef>();
-        type.setPropertyDefs((PropDef[])
-                properties.toArray(new PropDef[properties.size()]));
+        type.setPropertyDefs(properties.toArray(new PropDef[properties.size()]));
-        List nodes = new ArrayList();
+        List<NodeDef> nodes = new ArrayList<NodeDef>();
-        type.setChildNodeDefs((NodeDef[])
-                nodes.toArray(new NodeDef[nodes.size()]));
+        type.setChildNodeDefs(nodes.toArray(new NodeDef[nodes.size()]));
+     * @throws NamespaceException if a namespace is not defined
-                walker.getAttribute(Constants.MULTIPLE_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.MULTIPLE_ATTRIBUTE)));
-                walker.getAttribute(Constants.ISFULLTEXTSEARCHABLE_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.ISFULLTEXTSEARCHABLE_ATTRIBUTE)));
-                walker.getAttribute(Constants.ISQUERYORDERABLE_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.ISQUERYORDERABLE_ATTRIBUTE)));
-            List queryOps = new ArrayList();
-            for (int i = 0; i < ops.length; i++) {
-                String op = ops[i].trim();
+            List<String> queryOps = new ArrayList<String>();
+            for (String op1 : ops) {
+                String op = op1.trim();
-            def.setAvailableQueryOperators((String[]) queryOps.toArray(new String[queryOps.size()]));
+            def.setAvailableQueryOperators(queryOps.toArray(new String[queryOps.size()]));
-            List constraints = new ArrayList();
+            List<QValueConstraint> constraints = new ArrayList<QValueConstraint>();
-            def.setValueConstraints((ValueConstraint[]) constraints.toArray(
-                    new ValueConstraint[constraints.size()]));
+            def.setValueConstraints(constraints.toArray(
+                    new QValueConstraint[constraints.size()]));
-            List<InternalValue> values = new ArrayList();
+            List<InternalValue> values = new ArrayList<InternalValue>();
-            def.setDefaultValues((InternalValue[])
-                    values.toArray(new InternalValue[values.size()]));
+            def.setDefaultValues(values.toArray(new InternalValue[values.size()]));
+     * @throws NamespaceException if a namespace is not defined
-                walker.getAttribute(Constants.SAMENAMESIBLINGS_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.SAMENAMESIBLINGS_ATTRIBUTE)));
-            List types = new ArrayList();
+            List<Name> types = new ArrayList<Name>();
-            def.setRequiredPrimaryTypes(
-                    (Name[]) types.toArray(new Name[types.size()]));
+            def.setRequiredPrimaryTypes(types.toArray(new Name[types.size()]));

MOV26 MOV26 INS26 INS40 UPD40 UPD40 INS65 INS65 INS65 INS25 INS65 INS65 INS66 INS42 INS66 INS74 MOV32 INS42 INS66 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS27 INS8 INS74 INS74 INS42 INS66 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS42 INS66 MOV32 MOV32 MOV43 INS43 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS32 INS33 MOV21 MOV43 INS43 MOV32 MOV43 INS43 MOV32 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS70 UPD42 INS42 INS42 INS74 INS42 INS42 INS40 MOV32 MOV32 INS74 INS42 INS74 INS42 INS74 INS74 INS44 INS42 MOV8 INS74 INS74 MOV43 INS43 UPD42 INS42 MOV43 INS43 MOV32 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 MOV43 INS42 MOV32 MOV43 INS43 INS32 MOV32 MOV43 INS43 MOV32 INS42 INS42 INS74 INS42 INS74 MOV43 INS42 INS74 MOV42 MOV42 MOV3 INS74 INS42 INS74 MOV43 MOV43 MOV43 INS43 MOV43 INS43 UPD5 MOV43 MOV43 MOV43 MOV43 INS42 INS42 INS42 UPD43 UPD42 DEL42 DEL43 DEL85 DEL5 DEL11 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL85 DEL5 DEL11 DEL85 DEL5 DEL11 DEL85 DEL5 DEL11 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL85 DEL5 DEL11 DEL42 DEL43 DEL85 DEL5 DEL32 DEL11 DEL85 DEL5 DEL11 DEL42 DEL42 DEL32 DEL85 DEL5 DEL11