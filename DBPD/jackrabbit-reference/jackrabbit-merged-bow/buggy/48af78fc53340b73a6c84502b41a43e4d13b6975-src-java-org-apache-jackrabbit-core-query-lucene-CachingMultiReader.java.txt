Improve performance for complex path queries involving descendant-or-self axis. e.g: //foo//bar//*[@prop='bla']

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@164208 13f79535-47bb-0310-9956-ffa450edef68

+        } else if (term.field() == FieldNames.PARENT) {
+            TermDocs[] termDocs = new TermDocs[subReaders.length];
+            for (int i = 0; i < subReaders.length; i++) {
+                termDocs[i] = subReaders[i].termDocs(term);
+            }
+            return new MultiTermDocs(termDocs, starts);
-         * @throws UnsupportedOperationException always
+         * {@inheritDoc}
+
+    /**
+     * Implements a <code>TermDocs</code> which spans multiple other
+     * <code>TermDocs</code>.
+     */
+    private static final class MultiTermDocs implements TermDocs {
+
+        /**
+         * The actual <code>TermDocs</code>.
+         */
+        private final TermDocs[] termDocs;
+
+        /**
+         * The document number offsets for each <code>TermDocs</code>.
+         */
+        private final int[] starts;
+
+        /**
+         * The current <code>TermDocs</code> instance. If <code>null</code>
+         * there are no more documents.
+         */
+        private TermDocs current;
+
+        /**
+         * The current index into {@link #termDocs} and {@link #starts}.
+         */
+        private int idx = 0;
+
+        /**
+         * Creates a new <code>MultiTermDocs</code> instance.
+         * @param termDocs the actual <code>TermDocs</code>.
+         * @param starts the document number offsets for each
+         *  <code>TermDocs</code>
+         */
+        MultiTermDocs(TermDocs[] termDocs, int[] starts) {
+            this.termDocs = termDocs;
+            this.starts = starts;
+            current = termDocs[idx];
+        }
+
+        /**
+         * @throws UnsupportedOperationException always
+         */
+        public void seek(Term term) {
+            throw new UnsupportedOperationException();
+        }
+
+        /**
+         * @throws UnsupportedOperationException always
+         */
+        public void seek(TermEnum termEnum) {
+            throw new UnsupportedOperationException();
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public int doc() {
+            return starts[idx] + current.doc();
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public int freq() {
+            return current.freq();
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public boolean next() throws IOException {
+            while (current != null && !current.next()) {
+                if (++idx >= termDocs.length) {
+                    // no more TermDocs
+                    current = null;
+                } else {
+                    // move to next TermDocs
+                    current = termDocs[idx];
+                }
+            }
+            return current != null;
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public int read(int[] docs, int[] freqs) throws IOException {
+            int count = 0;
+            for (int i = 0; i < docs.length && next(); i++, count++) {
+                docs[i] = doc();
+                freqs[i] = freq();
+            }
+            return count;
+        }
+
+        /**
+         * @throws UnsupportedOperationException always
+         */
+        public boolean skipTo(int target) {
+            throw new UnsupportedOperationException();
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public void close() throws IOException {
+            for (int i = 0; i < termDocs.length; i++) {
+                termDocs[i].close();
+            }
+        }
+    }

INS55 INS29 INS83 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS42 INS29 INS83 INS83 INS5 INS59 INS29 INS83 INS83 INS5 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS29 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS25 INS65 INS66 INS66 INS65 INS43 INS85 INS42 INS65 INS39 INS85 INS42 INS65 INS42 INS42 INS65 INS42 INS34 INS65 INS65 INS65 INS5 INS42 INS5 INS42 INS21 INS21 INS21 INS65 INS43 INS42 INS53 INS65 INS43 INS42 INS53 INS65 INS41 INS65 INS41 INS65 INS42 INS61 INS41 INS65 INS5 INS42 INS5 INS42 INS42 INS60 INS24 INS41 INS65 INS39 INS42 INS53 INS65 INS42 INS24 INS27 INS8 INS65 INS66 INS42 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS85 INS39 INS85 INS7 INS7 INS7 INS42 INS66 INS42 INS14 INS42 INS66 INS42 INS14 INS65 INS27 INS65 INS32 INS65 INS27 INS8 INS27 INS65 INS39 INS85 INS39 INS85 INS39 INS59 INS58 INS27 INS37 INS37 INS8 INS42 INS42 INS66 INS14 INS65 INS58 INS27 INS37 INS8 INS32 INS40 INS60 INS24 INS41 INS67 INS67 INS42 INS22 INS42 INS22 INS42 INS42 INS2 INS43 INS43 INS2 INS32 INS42 INS42 INS27 INS38 INS25 INS42 INS33 INS42 INS34 INS39 INS59 INS27 INS32 INS42 INS42 INS21 INS21 INS43 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS14 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS27 INS8 INS8 INS42 INS34 INS42 INS40 INS42 INS7 INS7 INS42 INS42 INS34 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS42 INS42 INS42 INS42 INS38 INS40 INS21 INS21 INS2 INS32 INS2 INS32 INS2 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS2 INS32 INS42 INS33 INS42 INS2 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL66 DEL65