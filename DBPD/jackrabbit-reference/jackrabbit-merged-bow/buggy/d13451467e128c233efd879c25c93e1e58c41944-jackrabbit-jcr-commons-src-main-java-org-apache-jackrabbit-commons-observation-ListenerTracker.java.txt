JCR-3859: Extend EventListenerMBean to report time series for observation processing
Initial implementation of the additional EventListenerMBean methods

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1666170 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.jackrabbit.stats.TimeSeriesStatsUtil.asCompositeData;
+import javax.management.openmbean.CompositeData;
+import org.apache.jackrabbit.stats.TimeSeriesMax;
+import org.apache.jackrabbit.stats.TimeSeriesRecorder;
+    private final TimeSeriesMax queueLength = new TimeSeriesMax();
+
+    private final TimeSeriesRecorder eventCount = new TimeSeriesRecorder(true);
+
+    private final TimeSeriesRecorder eventConsumerTime = new TimeSeriesRecorder(true);
+
+    private final TimeSeriesRecorder eventProducerTime = new TimeSeriesRecorder(true);
+
-            EventListener listener,
-            int eventTypes, String absPath, boolean isDeep,
-            String[] uuid, String[] nodeTypeName, boolean noLocal) {
+            EventListener listener, int eventTypes, String absPath, boolean isDeep, String[] uuid,
+            String[] nodeTypeName, boolean noLocal) {
-
+    /**
+     * Applications should call this to report the current queue length.
+     * @param length
+     */
+    public void recordQueueLength(long length) {
+        queueLength.recordValue(length);
+    }
+
+    /**
+     * Records the number of measured values over the past second and resets
+     * the counter. This method should be scheduled to be called once per
+     * second.
+     */
+    public void recordOneSecond() {
+        queueLength.recordOneSecond();
+        eventCount.recordOneSecond();
+        eventConsumerTime.recordOneSecond();
+        eventProducerTime.recordOneSecond();
+    }
+
-                long start = nanoTime();
+                final long start = nanoTime();
+                        long t0 = start;
+
+                        private void recordTime(TimeSeriesRecorder recorder) {
+                            recorder.getCounter().addAndGet(-(t0 - (t0 = nanoTime())));
+                        }
+
+                            recordTime(eventConsumerTime);
+                            eventCount.getCounter().incrementAndGet();
+                            recordTime(eventProducerTime);
+
+                        @Override
+                        public boolean hasNext() {
+                            recordTime(eventConsumerTime);
+                            boolean result = super.hasNext();
+                            t0 = nanoTime();
+                            recordTime(eventProducerTime);
+                            return result;
+                        }
+            @Override
+            public CompositeData getQueueLength() {
+                return asCompositeData(queueLength, "queueLength");
+            }
+            @Override
+            public CompositeData getEventCount() {
+                return asCompositeData(eventCount, "eventCount");
+            }
+            @Override
+            public CompositeData getEventConsumerTime() {
+                return asCompositeData(eventConsumerTime, "eventConsumerTime");
+            }
+            @Override
+            public CompositeData getEventProducerTime() {
+                return asCompositeData(eventProducerTime, "eventProducerTime");
+            }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS65 INS65 INS39 INS42 INS21 INS65 INS21 INS21 INS21 INS21 INS43 INS43 INS9 INS43 INS9 INS43 INS9 INS66 INS42 INS32 INS66 INS66 INS66 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS31 INS31 INS31 INS31 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS83 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS23 INS31 INS31 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS42 INS21 INS60 INS21 INS21 INS41 INS42 INS32 INS32 INS32 INS32 INS32 INS39 INS59 INS7 INS32 INS42 INS32 INS42 INS38 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS48 INS42 INS32 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS27 INS42 INS36 INS7 INS42 INS32 INS42