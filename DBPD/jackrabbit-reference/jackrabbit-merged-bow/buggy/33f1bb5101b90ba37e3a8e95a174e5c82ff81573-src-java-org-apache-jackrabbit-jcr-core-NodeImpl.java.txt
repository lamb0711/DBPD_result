differentiated handling of single vs. multi-valued properties:
multi-valued property can only be set with value array and vice versa


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@46941 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
-    protected PropertyImpl getOrCreateProperty(String name, int type)
+    protected PropertyImpl getOrCreateProperty(String name, int type, boolean multiValued)
-	PropertyDefImpl def = getApplicablePropertyDef(qName, type);
+	PropertyDefImpl def = getApplicablePropertyDef(qName, type, multiValued);
-    protected PropertyImpl getOrCreateProperty(QName name, int type)
+    protected PropertyImpl getOrCreateProperty(QName name, int type, boolean multiValued)
-	    PropertyDefImpl def = getApplicablePropertyDef(name, type);
+	    PropertyDefImpl def = getApplicablePropertyDef(name, type, multiValued);
-	    PropertyDefImpl def = getApplicablePropertyDef(PROPNAME_MIXINTYPES, PropertyType.NAME);
+	    PropertyDefImpl def = getApplicablePropertyDef(PROPNAME_MIXINTYPES, PropertyType.NAME, true);
+     * @param multiValued
-    protected PropertyDefImpl getApplicablePropertyDef(QName propertyName, int type)
+    protected PropertyDefImpl getApplicablePropertyDef(QName propertyName,
+						       int type, boolean multiValued)
-	PropDef pd = getEffectiveNodeType().getApplicablePropertyDef(propertyName, type);
+	PropDef pd = getEffectiveNodeType().getApplicablePropertyDef(propertyName, type, multiValued);
+     *
+	// check state of this instance
+	checkItemState();
+
+	int type;
-	    return internalSetProperty(name, (InternalValue[]) null);
+	    type = PropertyType.STRING;
-	    return internalSetProperty(name, new InternalValue[]{value});
+	    type = value.getType();
+	PropertyImpl prop = getOrCreateProperty(name, type, false);
+	if (value == null) {
+	    prop.internalSetValue((InternalValue[]) null, type);
+	} else {
+	    prop.internalSetValue(new InternalValue[]{value}, type);
+	}
+	return prop;
-	PropertyImpl prop = getOrCreateProperty(name, type);
+	PropertyImpl prop = getOrCreateProperty(name, type, true);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME, false);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME, true);
-	PropertyImpl prop = getOrCreateProperty(name, type);
+	PropertyImpl prop = getOrCreateProperty(name, type, true);
+     * Same as <code>{@link Node#setProperty(String, Value)}</code> except that
+     * this method takes a <code>QName</code> name argument instead of a
+     * <code>String</code>.
+     *
+     * @param name
+     * @param value
+     * @return
+     * @throws ValueFormatException
+     * @throws RepositoryException
+     */
+    public PropertyImpl setProperty(QName name, Value value)
+	    throws ValueFormatException, RepositoryException {
+	// check state of this instance
+	checkItemState();
+
+	int type = (value == null) ? PropertyType.STRING : value.getType();
+	PropertyImpl prop = getOrCreateProperty(name, type, false);
+	prop.setValue(value);
+	return prop;
+    }
+
+    /**
-	PropertyImpl prop = getOrCreateProperty(name, type);
+	PropertyImpl prop = getOrCreateProperty(name, type, true);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.STRING);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.STRING, true);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.STRING);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.STRING, false);
-	PropertyImpl prop = getOrCreateProperty(name, type);
+	PropertyImpl prop = getOrCreateProperty(name, type, false);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.BINARY);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.BINARY, false);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.BOOLEAN);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.BOOLEAN, false);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.DOUBLE);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.DOUBLE, false);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.LONG);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.LONG, false);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.DATE);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.DATE, false);
-	PropertyImpl prop = getOrCreateProperty(name, PropertyType.REFERENCE);
+	PropertyImpl prop = getOrCreateProperty(name, PropertyType.REFERENCE, false);
-	if (srcNode==null) {
+	if (srcNode == null) {
-     * <p>
+     * <p/>
-     *     the same UUID.
+     * the same UUID.
-     *     node M1 which is either the nearest ancestor of N1 that is
-     *     referenceable, or is the root node of W1. If the corresponding node
-     *     of M1 is M2 in W2, then N2 is the node with the same relative path
-     *     from M2 as N1 has from M1.
+     * node M1 which is either the nearest ancestor of N1 that is
+     * referenceable, or is the root node of W1. If the corresponding node
+     * of M1 is M2 in W2, then N2 is the node with the same relative path
+     * from M2 as N1 has from M1.
+     *
-     * @throws AccessDeniedException If the current session does not have sufficient rights to perform the operation.
-     * @throws RepositoryException If another error occurs.
+     * @throws AccessDeniedException    If the current session does not have sufficient rights to perform the operation.
+     * @throws RepositoryException      If another error occurs.
-	String relPath = getPath().substring(m1.getPath().length()+1);
+	String relPath = getPath().substring(m1.getPath().length() + 1);
-	if (srcNode!=null) {
+	if (srcNode != null) {
-	if (srcNode==null) {
+	if (srcNode == null) {
-		    Value[] newValues = new Value[values.length+1];
+		    Value[] newValues = new Value[values.length + 1];
-     * @param prop
+     * @param name
+     * @param type
+     * @param multiValued
+     * @throws RepositoryException
-    private int getOPV(PropertyImpl prop) throws RepositoryException {
-	PropertyDefImpl def = getApplicablePropertyDef(prop.getQName(), PropertyType.UNDEFINED);
+    private int guessOPV(QName name, int type, boolean multiValued) throws RepositoryException {
+	PropertyDefImpl def = getApplicablePropertyDef(name, type, multiValued);
-		int opv = getOPV(prop);
+		int type = PropertyType.UNDEFINED;
+		if (prop.getDefinition().isMultiple()) {
+		    Value[] values = prop.getValues();
+		    if (values.length != 0) {
+			type = values[0].getType();
+		    }
+		} else {
+		    type = prop.getValue().getType();
+		}
+		int opv = guessOPV(prop.getQName(), type, prop.getDefinition().isMultiple());
-		// todo: make work for samename siblings
+		// todo: make work for same name siblings

MOV26 INS31 INS44 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 UPD42 INS44 INS44 INS39 INS42 INS39 INS42 INS65 INS39 INS42 INS21 INS60 INS25 INS60 INS41 INS21 MOV41 MOV41 MOV21 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS60 INS60 INS21 INS41 INS21 INS21 INS41 INS21 INS41 INS21 MOV21 MOV41 MOV41 MOV21 MOV41 MOV21 MOV21 MOV41 MOV21 MOV21 MOV41 MOV21 MOV21 MOV41 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS32 INS39 INS59 INS27 INS8 INS8 INS43 INS59 INS42 INS32 INS43 MOV32 MOV43 MOV43 INS66 INS65 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 MOV43 INS59 INS32 INS42 INS32 INS43 INS32 INS43 INS42 INS32 INS42 INS32 MOV32 MOV43 MOV32 MOV43 MOV43 MOV43 UPD66 UPD66 UPD66 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS21 INS21 INS42 INS42 MOV42 MOV42 INS68 INS42 INS42 INS16 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS9 MOV32 MOV42 MOV32 MOV42 INS9 INS9 INS9 INS9 INS42 INS42 INS69 INS69 INS36 INS40 INS32 INS42 INS42 INS42 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS43 INS43 INS27 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS60 INS25 INS39 INS59 INS32 INS8 INS8 INS42 INS40 INS32 INS42 INS60 INS25 INS21 INS42 INS42 INS5 INS59 INS27 INS8 INS7 UPD42 MOV32 INS42 INS32 INS43 INS85 INS42 INS32 INS40 INS34 INS21 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS7 INS32 INS42 MOV42 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS34 DEL41 DEL41 DEL42 DEL40