JCR-1588: 283 Access Control

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@689499 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.map.LRUMap;
+import java.util.Map;
-    private String currentUserPath;
+    /**
+     * Simple unmanaged map from authorizableID to nodePath (node representing
+     * the authorizable) used limit the number of calls to the
+     * <code>NodeResolver</code> in order to find authorizable nodes by the
+     * authorizable id.
+     */
+    private final Map idPathMap = new LRUMap(1000);
-        NodeImpl n = (NodeImpl) authResolver.findNode(P_USERID, id, NT_REP_USER);
+        NodeImpl n = getUserNode(id);
-            authorz = UserImpl.create(n, this);
+            authorz = createUser(n);
-            Name nodeName = session.getQName(id);
-            n = (NodeImpl) authResolver.findNode(nodeName, NT_REP_GROUP);
+            n = getGroupNode(id);
-                authorz = GroupImpl.create(n, this);
+                authorz = createGroup(n);
-               return UserImpl.create(n, this);
+               return createUser(n);
-               return GroupImpl.create(n, this);
+               return createGroup(n);
-     * @see UserManager#findAuthorizable(String,String)
+     * @see UserManager#findAuthorizables(String,String)
-    public Iterator findAuthorizable(String propertyName, String value) throws RepositoryException {
+    public Iterator findAuthorizables(String propertyName, String value) throws RepositoryException {
+        return findAuthorizables(propertyName, value, SEARCH_TYPE_AUTHORIZABLE);
+    }
+
+    /**
+     * @see UserManager#findAuthorizables(String,String, int)
+     */
+    public Iterator findAuthorizables(String propertyName, String value, int searchType)
+            throws RepositoryException {
-        NodeIterator auths  = authResolver.findNodes(name, value, NT_REP_AUTHORIZABLE, true);
-        return new AuthorizableIterator(auths);
+        Name ntName;
+        switch (searchType) {
+            case SEARCH_TYPE_AUTHORIZABLE:
+                ntName = NT_REP_AUTHORIZABLE;
+                break;
+            case SEARCH_TYPE_GROUP:
+                ntName = NT_REP_GROUP;
+                break;
+            case SEARCH_TYPE_USER:
+                ntName = NT_REP_USER;
+                break;
+            default: throw new IllegalArgumentException("Invalid search type " + searchType);
+        }
+        NodeIterator nodes = authResolver.findNodes(name, value, ntName, true);
+        return new AuthorizableIterator(nodes);
-            return UserImpl.create(userNode, this);
+            return createUser(userNode);
-            return GroupImpl.create(groupNode, this);
+            return createGroup(groupNode);
-     * Simple search for <code>User</code>s<br>
-     * The argument is a substring which must match the UserId or main
-     * Principal's name.
-     *
-     * @param simpleFilter substring to match against. The empty String matches
-     * all users.
-     * @return Iterator containing Authorizable-objects
-     * @throws RepositoryException
-     */
-    public Iterator findUsers(String simpleFilter) throws RepositoryException {
-        Set s = new HashSet(2);
-        s.add(P_USERID);
-        s.add(P_PRINCIPAL_NAME);
-        NodeIterator nodes = authResolver.findNodes(s, simpleFilter, NT_REP_USER, false, Long.MAX_VALUE);
-        return new AuthorizableIterator(nodes);
-    }
-
-    /**
-     * Simple search for a <code>Group</code>s<br>
-     * The argument is a substring which must match the Group's Principal name.
-     *
-     * @param simpleFilter substring to match against. The empty String matches
-     * all groups.
-     * @return Iterator containing Authorizable-objects
-     * @throws RepositoryException
-     */
-    public Iterator findGroups(String simpleFilter) throws RepositoryException {
-        NodeIterator nodes = authResolver.findNodes(P_PRINCIPAL_NAME, simpleFilter, NT_REP_GROUP, false);
-        return new AuthorizableIterator(nodes);
-    }
-
-    /**
-        return adminId.equals(userID);
+        return (adminId == null) ? false : adminId.equals(userID);
-    UserImpl getCurrentUser() {
-        try {
-            String uid = session.getUserID();
-            if (uid != null) {
-                AuthorizableImpl auth = (AuthorizableImpl) getAuthorizable(session.getUserID());
-                if (auth != null && !auth.isGroup()) {
-                    return (UserImpl) auth;
+    /**
+     * Build the User object from the given user node.
+     *
+     * @param userNode
+     * @return
+     * @throws RepositoryException
+     */
+    User createUser(NodeImpl userNode) throws RepositoryException {
+        User user = UserImpl.create(userNode, this);
+        idPathMap.put(user.getID(), userNode.getPath());
+        return user;
+    }
+
+    /**
+     * Build the Group object from the given group node.
+     *
+     * @param groupNode
+     * @return
+     * @throws RepositoryException
+     */
+    Group createGroup(NodeImpl groupNode) throws RepositoryException {
+        Group group = GroupImpl.create(groupNode, this);
+        idPathMap.put(group.getID(), groupNode.getPath());
+        return group;
+    }
+
+    /**
+     * @param userID
+     * @return the node associated with the given userID or <code>null</code>.
+     */
+    private NodeImpl getUserNode(String userID) throws RepositoryException {
+        NodeImpl n = null;
+        if (idPathMap.containsKey(userID)) {
+            String path = idPathMap.get(userID).toString();
+            if (session.itemExists(path)) {
+                Item itm = session.getItem(path);
+                // make sure the item really represents the node associated with
+                // the given userID. if not the search below is execute.
+                if (itm.isNode()) {
+                    NodeImpl tmp = (NodeImpl) itm;
+                    if (tmp.isNodeType(NT_REP_USER) && userID.equals(((NodeImpl) itm).getProperty(P_USERID).getString())) {
+                        n = (NodeImpl) itm;
+                    }
-        } catch (RepositoryException e) {
-            // should never get here
-            log.error("Internal error: unable to build current user path.", e.getMessage());
-        return null;
+
+        if (n == null) {
+            // clear eventual previous entry
+            idPathMap.remove(userID);
+            // search for it the node belonging to that userID
+            n = (NodeImpl) authResolver.findNode(P_USERID, userID, NT_REP_USER);
+        }
+        return n;
-    private String getCurrentUserPath() {
-        if (currentUserPath == null) {
-            StringBuffer b = new StringBuffer();
-            try {
-                String uid = session.getUserID();
-                if (uid != null) {
-                    UserImpl user = getCurrentUser();
-                    if (user != null) {
-                        b.append(user.getNode().getPath());
+    private NodeImpl getGroupNode(String groupID) throws RepositoryException {
+        NodeImpl n = null;
+        if (idPathMap.containsKey(groupID)) {
+            String path = idPathMap.get(groupID).toString();
+            if (session.itemExists(path)) {
+                Item itm = session.getItem(path);
+                // make sure the item really represents the node associated with
+                // the given userID. if not the search below is execute.
+                if (itm.isNode()) {
+                    NodeImpl tmp = (NodeImpl) itm;
+                    if (tmp.isNodeType(NT_REP_GROUP) && groupID.equals(tmp.getName())) {
+                        n = (NodeImpl) itm;
+            }
+        }
+        if (n == null) {
+            // clear eventual previous entry
+            idPathMap.remove(groupID);
+            // search for it the node belonging to that groupID
+            Name nodeName = session.getQName(groupID);
+            n = (NodeImpl) authResolver.findNode(nodeName, NT_REP_GROUP);
+        }
+        return n;
+    }
+
+    /**
+     * @return the path refering to the node associated with the user this
+     * <code>UserManager</code> has been built for.
+     */
+    private String getCurrentUserPath() {
+        // fallback: default user-path
+        String currentUserPath = USERS_PATH;;
+        String userId = session.getUserID();
+
+        if (idPathMap.containsKey(userId)) {
+            currentUserPath = idPathMap.get(userId).toString();
+        } else {
+            try {
+                Node n = getUserNode(userId);
+                if (n != null) {
+                    currentUserPath = n.getPath();
+                }
-            if (b.length() == 0) {
-                // fallback: default user-path
-                b.append(USERS_PATH);
-            }
-            currentUserPath = b.toString();
-                            authr = UserImpl.create(node, UserManagerImpl.this);
+                            authr = createUser(node);
-                            authr = GroupImpl.create(node, UserManagerImpl.this);
+                            authr = createGroup(node);
-

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS43 MOV29 INS83 MOV43 INS42 INS44 INS44 MOV43 INS8 INS29 UPD42 INS44 MOV29 INS43 INS42 MOV44 INS43 INS8 INS29 INS43 INS42 INS44 INS43 INS8 MOV29 UPD83 MOV83 UPD43 MOV43 UPD42 MOV42 MOV44 MOV43 INS8 MOV83 INS43 UPD42 MOV42 INS44 INS43 INS8 INS29 INS83 MOV43 INS42 INS8 INS65 INS42 UPD42 INS14 INS43 INS42 INS43 INS42 INS41 INS65 INS39 INS42 INS60 INS50 MOV41 MOV65 INS42 MOV43 UPD42 INS42 MOV60 MOV21 INS41 INS65 INS65 INS65 MOV65 INS42 INS43 INS42 INS42 INS60 INS21 INS41 UPD42 INS43 INS42 INS60 INS25 INS25 MOV41 INS42 MOV43 INS42 INS42 MOV60 INS25 MOV25 INS41 INS65 INS60 INS20 MOV60 INS25 MOV41 INS66 INS66 INS66 INS66 INS43 INS34 MOV43 INS42 INS42 INS32 INS68 MOV43 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS16 UPD66 UPD42 UPD43 INS42 INS66 INS42 UPD42 MOV42 INS43 INS59 INS32 INS42 UPD42 UPD66 INS42 UPD43 MOV43 INS59 INS32 INS8 INS27 INS8 INS42 UPD43 INS32 INS8 INS42 INS66 INS66 MOV43 INS59 MOV43 INS32 INS8 INS8 INS42 INS32 INS21 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS69 INS69 INS42 INS42 INS7 INS42 INS7 INS42 INS7 INS14 UPD42 INS36 INS9 MOV32 UPD42 UPD42 MOV32 UPD42 UPD42 INS32 INS32 INS42 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 UPD42 MOV42 INS33 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 INS25 INS42 INS33 INS21 MOV21 UPD42 UPD42 INS33 INS42 INS42 INS42 INS60 MOV25 INS42 INS33 INS60 MOV21 INS42 INS42 UPD42 INS42 INS42 INS42 MOV21 INS54 UPD42 MOV42 MOV42 INS7 INS43 INS43 INS39 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 UPD42 INS32 INS32 INS27 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 INS59 INS32 INS8 INS32 INS7 MOV43 INS59 INS32 INS43 INS59 INS8 MOV12 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS42 INS42 MOV60 MOV25 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS60 INS25 UPD42 UPD42 MOV42 MOV42 INS32 INS42 INS43 INS32 INS43 INS32 INS32 INS42 UPD43 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 UPD42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS60 INS25 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 UPD42 UPD42 UPD42 INS42 UPD43 INS42 UPD42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS7 UPD42 UPD42 INS32 INS32 INS21 INS42 INS42 INS11 INS32 INS32 INS21 INS42 INS32 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 UPD42 INS32 INS42 INS42 INS11 INS42 INS42 UPD42 MOV42 INS42 INS11 INS36 INS42 INS42 UPD43 MOV43 UPD42 MOV42 INS43 INS42 INS11 UPD42 INS42 UPD42 INS43 INS42 UPD42 INS42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL52 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL52 DEL42 DEL52 DEL42 DEL52 DEL42 DEL43 DEL42 DEL14 DEL41 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL9 DEL40 DEL32 DEL59 DEL60 DEL8 DEL31 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL43 DEL34 DEL14 DEL66 DEL66 DEL65 DEL66 DEL66 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL11 DEL41 DEL42 DEL42 DEL45 DEL32 DEL32 DEL33 DEL42 DEL43 DEL14 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL34 DEL42 DEL43 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL33 DEL27 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL52 DEL42 DEL42 DEL52