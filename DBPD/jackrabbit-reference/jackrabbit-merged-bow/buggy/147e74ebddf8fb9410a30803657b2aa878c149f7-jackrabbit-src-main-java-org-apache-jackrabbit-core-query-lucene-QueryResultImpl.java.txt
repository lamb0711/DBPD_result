JCR-651: Improve performance for queries with large result sets
- reverted changes on QueryResultImpl to provide a backward compatible constructor
- the newly introduces lazy access right check is now implemented in LazyQueryResultImpl.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@480917 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.security.AccessManager;
-import org.apache.lucene.search.Query;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.Node;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.NoSuchElementException;
+import java.util.Arrays;
-     * The search index to execute the query.
-     */
-    private final SearchIndex index;
-
-    /**
-     * The namespace resolver of the session executing the query
+     * The result nodes and their scores
-    protected final NamespaceResolver resolver;
-
-    /**
-     * The access manager of the session that executes the query.
-     */
-    private final AccessManager accessMgr;
-
-    /**
-     * The query instance which created this query result.
-     */
-    protected final QueryImpl queryImpl;
-
-    /**
-     * The lucene query to execute.
-     */
-    protected final Query query;
+    private final ScoreNode[] scoreNodes;
-    protected final QName[] selectProps;
+    private final QName[] selectProps;
-     * The names of properties to use for ordering the result set.
+     * The namespace resolver of the session executing the query
-    protected final QName[] orderProps;
-
-    /**
-     * The order specifier for each of the order properties.
-     */
-    protected final boolean[] orderSpecs;
-
-    /**
-     * The result nodes including their score. This list is populated on a lazy
-     * basis while a client iterates through the results.
-     */
-    private final List resultNodes = new ArrayList();
-
-    /**
-     * This is the raw number of results that matched the query. This number
-     * also includes matches which will not be returned due to access
-     * restrictions. This value is set when the query is executed the first
-     * time.
-     */
-    private int numResults = -1;
-
-    /**
-     * The number of results that are invalid, either because a node does not
-     * exist anymore or because the session does not have access to the node.
-     */
-    private int invalid = 0;
+    private final NamespaceResolver resolver;
-     * @param index         the search index where the query is executed.
-     * @param itemMgr       the item manager of the session executing the
-     *                      query.
-     * @param resolver      the namespace resolver of the session executing the
-     *                      query.
-     * @param accessMgr     the access manager of the session executiong the
-     *                      query.
-     * @param queryImpl     the query instance which created this query result.
-     * @param query         the lucene query to execute on the index.
-     * @param selectProps   the select properties of the query.
-     * @param orderProps    the names of the order properties.
-     * @param orderSpecs    the order specs, one for each order property name.
-     * @param documentOrder if <code>true</code> the result is returned in
-     *                      document order.
+     * @param itemMgr     the item manager of the session executing the query.
+     * @param ids         the Ids of the result nodes.
+     * @param scores      the score values of the result nodes.
+     * @param selectProps the select properties of the query.
+     * @param resolver    the namespace resolver of the session executing the query.
+     * @param docOrder    if <code>true</code> the result is returned in document
+     *  order.
-    public QueryResultImpl(SearchIndex index,
-                           ItemManager itemMgr,
-                           NamespaceResolver resolver,
-                           AccessManager accessMgr,
-                           QueryImpl queryImpl,
-                           Query query,
+    public QueryResultImpl(ItemManager itemMgr,
+                           NodeId[] ids,
+                           Float[] scores,
-                           QName[] orderProps,
-                           boolean[] orderSpecs,
-                           boolean documentOrder) throws RepositoryException {
-        this.index = index;
+                           NamespaceResolver resolver,
+                           boolean docOrder) {
+        this.scoreNodes = new ScoreNode[ids.length];
-        this.resolver = resolver;
-        this.accessMgr = accessMgr;
-        this.queryImpl = queryImpl;
-        this.query = query;
-        this.orderProps = orderProps;
-        this.orderSpecs = orderSpecs;
-        this.docOrder = orderProps.length == 0 && documentOrder;
-        // if document order is requested get all results right away
-        getResults(docOrder ? Integer.MAX_VALUE : index.getResultFetchSize());
+        this.resolver = resolver;
+        this.docOrder = docOrder;
+        for (int i = 0; i < ids.length; i++) {
+            scoreNodes[i] = new ScoreNode(ids[i], scores[i].floatValue());
+        }
-     * Executes the query for this result and returns hits. The caller must
-     * close the query hits when he is done using it.
-     *
-     * @return hits for this query result.
-     * @throws IOException if an error occurs while executing the query.
-     */
-    protected QueryHits executeQuery() throws IOException {
-        return index.executeQuery(queryImpl, query, orderProps, orderSpecs);
-    }
-
-    //--------------------------------< internal >------------------------------
-
-    /**
-     *
-            return new DocOrderNodeIteratorImpl(itemMgr, resultNodes);
+            return new DocOrderNodeIteratorImpl(itemMgr, Arrays.asList(scoreNodes));
-            return new LazyScoreNodeIterator();
-        }
-    }
-
-    /**
-     * Attempts to get <code>size</code> results and puts them into {@link
-     * #resultNodes}. If the size of {@link #resultNodes} is less than
-     * <code>size</code> then there are no more than <code>resultNodes.size()</code>
-     * results for this query.
-     *
-     * @param size the number of results to fetch for the query.
-     * @throws RepositoryException if an error occurs while executing the
-     *                             query.
-     */
-    private void getResults(int size) throws RepositoryException {
-        if (log.isDebugEnabled()) {
-            log.debug("getResults(" + size + ")");
-        }
-        if (resultNodes.size() >= size) {
-            // we already have them all
-            return;
-        }
-
-        // execute it
-        QueryHits result = null;
-        try {
-            result = executeQuery();
-
-            // set num results with the first query execution
-            if (numResults == -1) {
-                numResults = result.length();
-            }
-
-            int start = resultNodes.size() + invalid;
-            int max = Math.min(result.length(), numResults);
-            for (int i = start; i < max && resultNodes.size() < size; i++) {
-                NodeId id = NodeId.valueOf(result.doc(i).get(FieldNames.UUID));
-                // check access
-                try {
-                    if (accessMgr.isGranted(id, AccessManager.READ)) {
-                        resultNodes.add(new ScoreNode(id, result.score(i)));
-                    }
-                } catch (ItemNotFoundException e) {
-                    // has been deleted meanwhile
-                    invalid++;
-                }
-            }
-        } catch (IOException e) {
-            log.error("Exception while executing query: ", e);
-            // todo throw?
-        } finally {
-            if (result != null) {
-                try {
-                    result.close();
-                } catch (IOException e) {
-                    log.warn("Unable to close query result: " + e);
-                }
-            }
-        }
-    }
-
-    private final class LazyScoreNodeIterator implements ScoreNodeIterator {
-
-        private int position = -1;
-
-        private boolean initialized = false;
-
-        private NodeImpl next;
-
-        /**
-         * {@inheritDoc}
-         */
-        public float getScore() {
-            initialize();
-            if (!hasNext()) {
-                throw new NoSuchElementException();
-            }
-            return ((ScoreNode) resultNodes.get(position)).getScore();
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public NodeImpl nextNodeImpl() {
-            initialize();
-            if (next == null) {
-                throw new NoSuchElementException();
-            }
-            NodeImpl n = next;
-            fetchNext();
-            return n;
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public Node nextNode() {
-            return nextNodeImpl();
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public void skip(long skipNum) {
-            initialize();
-            if (skipNum < 0) {
-                throw new IllegalArgumentException("skipNum must not be negative");
-            }
-            if ((position + invalid + skipNum) > numResults) {
-                throw new NoSuchElementException();
-            }
-            if (skipNum == 0) {
-                // do nothing
-            } else {
-                // attempt to get enough results
-                try {
-                    getResults(position + invalid + (int) skipNum);
-                    if (resultNodes.size() >= position + skipNum) {
-                        // skip within already fetched results
-                        position += skipNum - 1;
-                        fetchNext();
-                    } else {
-                        // not enough results after getResults()
-                        throw new NoSuchElementException();
-                    }
-                } catch (RepositoryException e) {
-                    throw new NoSuchElementException(e.getMessage());
-                }
-            }
-        }
-
-        /**
-         * {@inheritDoc}
-         * <p/>
-         * This value may shrink when the query result encounters non-existing
-         * nodes or the session does not have access to a node.
-         */
-        public long getSize() {
-            return numResults - invalid;
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public long getPosition() {
-            initialize();
-            return position;
-        }
-
-        /**
-         * @throws UnsupportedOperationException always.
-         */
-        public void remove() {
-            throw new UnsupportedOperationException("remove");
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public boolean hasNext() {
-            initialize();
-            return next != null;
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public Object next() {
-            return nextNodeImpl();
-        }
-
-        /**
-         * Initializes this iterator but only if it is not yet initialized.
-         */
-        private void initialize() {
-            if (!initialized) {
-                fetchNext();
-                initialized = true;
-            }
-        }
-
-        /**
-         * Fetches the next node to return by this iterator. If this method
-         * returns and {@link #next} is <code>null</code> then there is no next
-         * node.
-         */
-        private void fetchNext() {
-            next = null;
-            int nextPos = position + 1;
-            while (next == null && (nextPos + invalid) < numResults) {
-                if (nextPos >= resultNodes.size()) {
-                    // fetch more results
-                    try {
-                        int num;
-                        if (resultNodes.size() == 0) {
-                            num = index.getResultFetchSize();
-                        } else {
-                            num = resultNodes.size() * 2;
-                        }
-                        getResults(num);
-                    } catch (RepositoryException e) {
-                        log.warn("Exception getting more results: " + e);
-                    }
-                    // check again
-                    if (nextPos >= resultNodes.size()) {
-                        // no more valid results
-                        return;
-                    }
-                }
-                ScoreNode sn = (ScoreNode) resultNodes.get(nextPos);
-                try {
-                    next = (NodeImpl) itemMgr.getItem(sn.getNodeId());
-                } catch (RepositoryException e) {
-                    log.warn("Exception retrieving Node with UUID: "
-                            + sn.getNodeId() + ": " + e.toString());
-                    // remove score node and try next
-                    resultNodes.remove(nextPos);
-                    invalid++;
-                }
-            }
-            position++;
+            return new NodeIteratorImpl(itemMgr, scoreNodes);

MOV23 MOV23 UPD40 INS31 MOV31 UPD83 UPD5 UPD83 UPD83 MOV29 MOV83 MOV42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 INS8 MOV29 MOV43 UPD42 INS8 MOV43 UPD42 UPD5 UPD42 UPD5 UPD42 UPD42 MOV21 MOV21 MOV21 MOV21 MOV21 MOV24 INS25 UPD66 UPD66 UPD42 UPD66 UPD42 UPD66 UPD66 UPD42 UPD66 UPD42 UPD66 UPD66 MOV43 INS43 INS27 INS42 MOV8 INS8 INS42 INS3 INS42 MOV42 INS40 INS21 INS41 INS41 UPD42 INS5 INS40 INS34 INS7 INS14 INS14 MOV43 INS85 INS2 INS14 MOV43 INS42 INS32 INS43 INS42 INS42 INS42 INS42 MOV43 INS2 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS2 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL66 DEL65 DEL66 DEL66 DEL66 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL43 DEL39 DEL42 DEL40 DEL34 DEL27 DEL42 DEL27 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL37 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL16 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL29 DEL39 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL25 DEL42 DEL33 DEL7 DEL21 DEL39 DEL42 DEL42 DEL34 DEL27 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL25 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL12 DEL54 DEL8 DEL61 DEL42 DEL37 DEL21 DEL8 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL42 DEL43 DEL14 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL42 DEL67 DEL65 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL38 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL34 DEL27 DEL8 DEL42 DEL42 DEL42 DEL39 DEL42 DEL11 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL34 DEL27 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL27 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL38 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL55