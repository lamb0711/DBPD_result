- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.QName;
+import org.apache.jackrabbit.core.QName;
- *
- * @author Marcel Reutegger
- * @version $Revision: 1.6 $
-		       String parentUUID,
-		       Path parentPath,
-		       String childUUID,
-		       QName childName,
-		       NodeTypeImpl nodeType,
-		       Session session) {
-	long mask = (EventType.PROPERTY_ADDED | EventType.PROPERTY_CHANGED | EventType.PROPERTY_REMOVED);
-	if ((type & mask) > 0) {
-	    if (childUUID != null) {
-		throw new IllegalArgumentException("childUUID only allowed for Node events.");
-	    }
-	} else {
-	    if (childUUID == null) {
-		throw new IllegalArgumentException("childUUID must not be null for Node events.");
-	    }
-	}
-	this.type = type;
-	this.parentUUID = parentUUID;
-	this.parentPath = parentPath;
-	this.childUUID = childUUID;
-	this.childName = childName;
-	this.nodeType = nodeType;
-	this.session = session;
+                       String parentUUID,
+                       Path parentPath,
+                       String childUUID,
+                       QName childName,
+                       NodeTypeImpl nodeType,
+                       Session session) {
+        long mask = (EventType.PROPERTY_ADDED | EventType.PROPERTY_CHANGED | EventType.PROPERTY_REMOVED);
+        if ((type & mask) > 0) {
+            if (childUUID != null) {
+                throw new IllegalArgumentException("childUUID only allowed for Node events.");
+            }
+        } else {
+            if (childUUID == null) {
+                throw new IllegalArgumentException("childUUID must not be null for Node events.");
+            }
+        }
+        this.type = type;
+        this.parentUUID = parentUUID;
+        this.parentPath = parentPath;
+        this.childUUID = childUUID;
+        this.childName = childName;
+        this.nodeType = nodeType;
+        this.session = session;
-					    Path parentPath,
-					    String childUUID,
-					    QName childName,
-					    NodeTypeImpl nodeType,
-					    Session session) {
-	return new EventState(EventType.CHILD_NODE_ADDED,
-		parentUUID,
-		parentPath,
-		childUUID,
-		childName,
-		nodeType,
-		session);
+                                            Path parentPath,
+                                            String childUUID,
+                                            QName childName,
+                                            NodeTypeImpl nodeType,
+                                            Session session) {
+        return new EventState(EventType.CHILD_NODE_ADDED,
+                parentUUID,
+                parentPath,
+                childUUID,
+                childName,
+                nodeType,
+                session);
-					      Path parentPath,
-					      String childUUID,
-					      QName childName,
-					      NodeTypeImpl nodeType,
-					      Session session) {
-	return new EventState(EventType.CHILD_NODE_REMOVED,
-		parentUUID,
-		parentPath,
-		childUUID,
-		childName,
-		nodeType,
-		session);
+                                              Path parentPath,
+                                              String childUUID,
+                                              QName childName,
+                                              NodeTypeImpl nodeType,
+                                              Session session) {
+        return new EventState(EventType.CHILD_NODE_REMOVED,
+                parentUUID,
+                parentPath,
+                childUUID,
+                childName,
+                nodeType,
+                session);
-					   Path parentPath,
-					   QName childName,
-					   NodeTypeImpl nodeType,
-					   Session session) {
-	return new EventState(EventType.PROPERTY_ADDED,
-		parentUUID,
-		parentPath,
-		null,
-		childName,
-		nodeType,
-		session);
+                                           Path parentPath,
+                                           QName childName,
+                                           NodeTypeImpl nodeType,
+                                           Session session) {
+        return new EventState(EventType.PROPERTY_ADDED,
+                parentUUID,
+                parentPath,
+                null,
+                childName,
+                nodeType,
+                session);
-					     Path parentPath,
-					     QName childName,
-					     NodeTypeImpl nodeType,
-					     Session session) {
-	return new EventState(EventType.PROPERTY_REMOVED,
-		parentUUID,
-		parentPath,
-		null,
-		childName,
-		nodeType,
-		session);
+                                             Path parentPath,
+                                             QName childName,
+                                             NodeTypeImpl nodeType,
+                                             Session session) {
+        return new EventState(EventType.PROPERTY_REMOVED,
+                parentUUID,
+                parentPath,
+                null,
+                childName,
+                nodeType,
+                session);
-					     Path parentPath,
-					     QName childName,
-					     NodeTypeImpl nodeType,
-					     Session session) {
-	return new EventState(EventType.PROPERTY_CHANGED,
-		parentUUID,
-		parentPath,
-		null,
-		childName,
-		nodeType,
-		session);
+                                             Path parentPath,
+                                             QName childName,
+                                             NodeTypeImpl nodeType,
+                                             Session session) {
+        return new EventState(EventType.PROPERTY_CHANGED,
+                parentUUID,
+                parentPath,
+                null,
+                childName,
+                nodeType,
+                session);
-	return type;
+        return type;
-	return parentUUID;
+        return parentUUID;
+     *
-	return parentPath;
+        return parentPath;
+     *
-	return childUUID;
+        return childUUID;
-	return childName;
+        return childName;
-	return nodeType;
+        return nodeType;
-	return session.getUserId();
+        return session.getUserId();
-	return session;
+        return session;
-	if (stringValue == null) {
-	    StringBuffer sb = new StringBuffer();
-	    sb.append("EventState: ").append(valueOf(type));
-	    sb.append(", Parent: ").append(parentUUID);
-	    sb.append(", Child: ").append(childName);
-	    sb.append(", UserId: ").append(session.getUserId());
-	    stringValue = sb.toString();
-	}
-	return stringValue;
+        if (stringValue == null) {
+            StringBuffer sb = new StringBuffer();
+            sb.append("EventState: ").append(valueOf(type));
+            sb.append(", Parent: ").append(parentUUID);
+            sb.append(", Child: ").append(childName);
+            sb.append(", UserId: ").append(session.getUserId());
+            stringValue = sb.toString();
+        }
+        return stringValue;
-	int h = hashCode;
-	if (h == 0) {
-	    h = 37;
-	    h = 37 * h + (int) type;
-	    h = 37 * h + parentUUID.hashCode();
-	    h = 37 * h + childName.hashCode();
-	    h = 37 * h + session.hashCode();
-	    hashCode = h;
-	}
-	return hashCode;
+        int h = hashCode;
+        if (h == 0) {
+            h = 37;
+            h = 37 * h + (int) type;
+            h = 37 * h + parentUUID.hashCode();
+            h = 37 * h + childName.hashCode();
+            h = 37 * h + session.hashCode();
+            hashCode = h;
+        }
+        return hashCode;
-	if (obj == this) {
-	    return true;
-	}
-	if (obj instanceof EventState) {
-	    EventState other = (EventState) obj;
-	    return this.type == other.type
-		    && this.parentUUID.equals(other.parentUUID)
-		    && this.childName.equals(other.childName)
-		    && this.session.equals(other.session);
-	}
-	return false;
+        if (obj == this) {
+            return true;
+        }
+        if (obj instanceof EventState) {
+            EventState other = (EventState) obj;
+            return this.type == other.type
+                    && this.parentUUID.equals(other.parentUUID)
+                    && this.childName.equals(other.childName)
+                    && this.session.equals(other.session);
+        }
+        return false;
-	if (eventType == EventType.CHILD_NODE_ADDED) {
-	    return "ChildNodeAdded";
-	} else if (eventType == EventType.CHILD_NODE_REMOVED) {
-	    return "ChildNodeRemoved";
-	} else if (eventType == EventType.PROPERTY_ADDED) {
-	    return "PropertyAdded";
-	} else if (eventType == EventType.PROPERTY_CHANGED) {
-	    return "PropertyChanged";
-	} else if (eventType == EventType.PROPERTY_REMOVED) {
-	    return "PropertyRemoved";
-	} else {
-	    return "UnknownEventType";
-	}
+        if (eventType == EventType.CHILD_NODE_ADDED) {
+            return "ChildNodeAdded";
+        } else if (eventType == EventType.CHILD_NODE_REMOVED) {
+            return "ChildNodeRemoved";
+        } else if (eventType == EventType.PROPERTY_ADDED) {
+            return "PropertyAdded";
+        } else if (eventType == EventType.PROPERTY_CHANGED) {
+            return "PropertyChanged";
+        } else if (eventType == EventType.PROPERTY_REMOVED) {
+            return "PropertyRemoved";
+        } else {
+            return "UnknownEventType";
+        }

MOV26 DEL66 DEL65 DEL66 DEL65