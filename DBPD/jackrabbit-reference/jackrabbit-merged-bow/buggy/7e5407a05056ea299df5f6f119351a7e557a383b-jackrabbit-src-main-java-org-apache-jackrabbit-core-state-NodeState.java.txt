[JCR-317] replace UUID strings by UUID classes in NodeId, etc..

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378221 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.ItemId;
-     * the uuid of this node
-     */
-    protected String uuid;
-
-    /**
-    protected QName nodeTypeName;
+    private QName nodeTypeName;
-    protected HashSet mixinTypeNames = new HashSet();
+    private HashSet mixinTypeNames = new HashSet();
+
+    /**
+     * the id of this node state.
+     */
+    private NodeId id;
+
+    /**
+     * the id of the parent node or <code>null</code> if this is the root node
+     */
+    private NodeId parentId;
-    protected NodeDefId defId;
+    private NodeDefId defId;
-    protected ChildNodeEntries childNodeEntries = new ChildNodeEntries();
+    private ChildNodeEntries childNodeEntries = new ChildNodeEntries();
-    protected HashSet propertyNames = new HashSet();
+    private HashSet propertyNames = new HashSet();
-     * Constructor
+     * Constructs a new node state that is initially connected to an overlayed
+     * state.
-        super(initialStatus, isTransient);
-
-        connect(overlayedState);
+        super(overlayedState, initialStatus, isTransient);
-     * Constructor
+     * Constructs a new node state this is not connected.
-     * @param uuid          the UUID of the this node
+     * @param id            the Id of the this node
-     * @param parentUUID    the UUID of the parent node
+     * @param parentId      the Id of the parent node
-    public NodeState(String uuid, QName nodeTypeName, String parentUUID,
+    public NodeState(NodeId id, QName nodeTypeName, NodeId parentId,
-        super(parentUUID, new NodeId(uuid), initialStatus, isTransient);
-
+        super(initialStatus, isTransient);
+        this.id = id;
+        this.parentId = parentId;
-        this.uuid = uuid;
-            super.copy(state);
-
-            nodeTypeName = nodeState.getNodeTypeName();
+            id = nodeState.id;
+            parentId = nodeState.parentId;
+            nodeTypeName = nodeState.nodeTypeName;
-            defId = nodeState.getDefinitionId();
-            uuid = nodeState.getUUID();
+            defId = nodeState.defId;
-    //-------------------------------------------------------< public methods >
+    //-----------------------------------------------------< public methods >---
+     * {@inheritDoc}
+     */
+    public NodeId getParentId() {
+        return parentId;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public ItemId getId() {
+        return id;
+    }
+
+    /**
+     * Returns the id of this node state.
+     * @return the id of this node state.
+     */
+    public NodeId getNodeId() {
+        return id;
+    }
+
+    /**
+     * Sets the Id of the parent <code>NodeState</code>.
+     *
+     * @param parentId the parent <code>NodeState</code>'s Id or <code>null</code>
+     * if either this node state should represent the root node or this node
+     * state should be 'free floating', i.e. detached from the repository's
+     * hierarchy.
+     */
+    public void setParentId(NodeId parentId) {
+        this.parentId = parentId;
+    }
+
+    /**
-     * Returns the UUID of the repository node this node state is representing.
-     *
-     * @return the UUID
-     */
-    public String getUUID() {
-        return uuid;
-    }
-
-    /**
-     * @param uuid UUID of the child node
+     * @param id the id of the child node
-    public synchronized boolean hasChildNodeEntry(String uuid) {
-        return childNodeEntries.get(uuid) != null;
+    public synchronized boolean hasChildNodeEntry(NodeId id) {
+        return childNodeEntries.get(id) != null;
-     * @param uuid UUID of the child node
+     * @param id the id of the child node
-    public synchronized ChildNodeEntry getChildNodeEntry(String uuid) {
-        return childNodeEntries.get(uuid);
+    public synchronized ChildNodeEntry getChildNodeEntry(NodeId id) {
+        return childNodeEntries.get(id);
-     * @param uuid     UUID the new entry is refering to.
+     * @param id The id the new entry is refering to.
-                                                         String uuid) {
-        ChildNodeEntry entry = childNodeEntries.add(nodeName, uuid);
+                                                         NodeId id) {
+        ChildNodeEntry entry = childNodeEntries.add(nodeName, id);
-                    childNodeEntries.add(newName, oldEntry.getUUID());
+                    childNodeEntries.add(newName, oldEntry.getId());
-     * @param uuid UUID of the entry to be removed
+     * @param id the Id of the entry to be removed
-    public synchronized boolean removeChildNodeEntry(String uuid) {
-        ChildNodeEntry entry = childNodeEntries.remove(uuid);
+    public synchronized boolean removeChildNodeEntry(NodeId id) {
+        ChildNodeEntry entry = childNodeEntries.remove(id);
-            if (entry == other || entry.getUUID().equals(other.getUUID())) {
+            if (entry == other || entry.id.equals(other.id)) {
-                    if (entry.getUUID().equals(((ChildNodeEntry) others.get(i + 1)).getUUID())) {
+                    if (entry.id.equals(((ChildNodeEntry) others.get(i + 1)).id)) {
-                            if (((ChildNodeEntry) ours.get(j)).getUUID().equals(other.uuid)) {
+                            if (((ChildNodeEntry) ours.get(j)).id.equals(other.id)) {
-                    if (((ChildNodeEntry) ours.get(j)).getUUID().equals(entry.getUUID())) {
+                    if (((ChildNodeEntry) ours.get(j)).id.equals(entry.id)) {
-                    if (((ChildNodeEntry) others.get(j)).getUUID().equals(entry.getUUID())) {
+                    if (((ChildNodeEntry) others.get(j)).id.equals(entry.id)) {
-                            added.getIndex(), added.getUUID());
+                            added.getIndex(), added.getId());
-                            removed.getIndex(), removed.getUUID());
+                            removed.getIndex(), removed.getId());
-        // insertion-ordered map of entries (key=uuid, value=entry)
+        // insertion-ordered map of entries (key=NodeId, value=entry)
-        ChildNodeEntry get(String uuid) {
-            return (ChildNodeEntry) entries.get(uuid);
+        ChildNodeEntry get(NodeId id) {
+            return (ChildNodeEntry) entries.get(id);
-        ChildNodeEntry add(QName nodeName, String uuid) {
+        ChildNodeEntry add(QName nodeName, NodeId id) {
-            ChildNodeEntry entry = new ChildNodeEntry(nodeName, uuid, index);
+            ChildNodeEntry entry = new ChildNodeEntry(nodeName, id, index);
-            entries.put(uuid, entry);
+            entries.put(id, entry);
-                add(entry.getName(), entry.getUUID());
+                add(entry.getName(), entry.getId());
-                entries.remove(removedEntry.getUUID());
+                entries.remove(removedEntry.getId());
-            entries.remove(removedEntry.getUUID());
+            entries.remove(removedEntry.getId());
-                ChildNodeEntry newEntry = new ChildNodeEntry(nodeName, oldEntry.getUUID(), oldEntry.getIndex() - 1);
+                ChildNodeEntry newEntry = new ChildNodeEntry(nodeName, oldEntry.getId(), oldEntry.getIndex() - 1);
-                entries.put(newEntry.getUUID(), newEntry);
+                entries.put(newEntry.getId(), newEntry);
-        ChildNodeEntry remove(String uuid) {
-            ChildNodeEntry entry = (ChildNodeEntry) entries.get(uuid);
+        /**
+         * Removes the child node entry with the given id
+         * @param id
+         * @return the removed entry or <code>null</code>
+         */
+        ChildNodeEntry remove(NodeId id) {
+            ChildNodeEntry entry = (ChildNodeEntry) entries.get(id);
+        /**
+         * Removes the child node entry
+         * @param entry
+         * @return the removed entry or <code>null</code>
+         */
+        /**
+         * Removes all child node entries
+         */
-                ChildNodeEntry otherEntry = (ChildNodeEntry) other.get(entry.uuid);
+                ChildNodeEntry otherEntry = other.get(entry.id);
-                ChildNodeEntry otherEntry = (ChildNodeEntry) other.get(entry.uuid);
+                ChildNodeEntry otherEntry = other.get(entry.id);
-                return entries.containsKey(((ChildNodeEntry) o).uuid);
+                return entries.containsKey(((ChildNodeEntry) o).id);
-                return entries.indexOf(((ChildNodeEntry) o).uuid);
+                return entries.indexOf(((ChildNodeEntry) o).id);
-                out.writeUTF(entry.getUUID());  // uuid
+                out.writeUTF(entry.getId().toString());  // uuid
-                String s = in.readUTF();   // uuid
-                add(name, s);
+                String s = in.readUTF();   // nodeid
+                add(name, NodeId.valueOf(s));
-        private final String uuid;
+        private final NodeId id;
-        private ChildNodeEntry(QName name, String uuid, int index) {
+        private ChildNodeEntry(QName name, NodeId id, int index) {
-            if (uuid == null) {
-                throw new IllegalArgumentException("uuid can not be null");
+            if (id == null) {
+                throw new IllegalArgumentException("id can not be null");
-            this.uuid = uuid;
+            this.id = id;
-        public String getUUID() {
-            return uuid;
+        public NodeId getId() {
+            return id;
-                return (name.equals(other.name) && uuid.equals(other.uuid)
+                return (name.equals(other.name) && id.equals(other.id)
-            return name.toString() + "[" + index + "] -> " + uuid;
+            return name.toString() + "[" + index + "] -> " + id;
-                h = 37 * h + uuid.hashCode();
+                h = 37 * h + id.hashCode();

INS26 MOV23 MOV31 INS40 INS23 INS31 INS31 INS31 MOV31 MOV31 UPD83 UPD83 UPD83 UPD43 INS29 INS83 INS43 INS59 UPD83 UPD83 UPD83 MOV21 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 UPD43 UPD42 INS29 INS83 INS39 INS42 INS44 INS8 UPD42 UPD42 INS65 INS42 INS42 INS46 UPD43 UPD42 MOV43 UPD42 MOV46 INS21 INS65 INS42 INS41 INS65 INS42 INS41 UPD42 INS65 INS65 INS43 INS42 INS21 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 MOV43 INS29 INS29 INS29 UPD39 UPD42 MOV44 UPD39 UPD42 MOV44 UPD43 UPD43 UPD42 UPD66 INS66 UPD66 INS66 INS42 INS42 INS42 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 INS7 MOV21 MOV21 INS65 INS42 INS65 INS42 UPD66 UPD66 UPD42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS7 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 INS43 UPD42 UPD66 UPD42 MOV43 UPD43 UPD42 UPD43 UPD42 INS65 INS65 INS65 UPD43 UPD42 INS65 INS65 INS65 INS65 UPD42 UPD42 UPD43 UPD42 UPD42 INS22 INS42 UPD42 INS22 INS42 UPD42 INS42 UPD42 UPD42 MOV43 INS66 INS42 INS66 UPD42 MOV43 INS66 INS42 INS66 INS66 MOV62 MOV8 MOV62 MOV8 UPD42 UPD42 INS52 INS42 UPD42 INS7 INS52 INS42 UPD42 UPD42 MOV43 UPD42 MOV43 UPD42 UPD42 UPD42 UPD42 INS42 INS40 UPD42 INS40 INS42 INS40 UPD42 INS40 UPD42 MOV43 UPD42 UPD42 MOV43 MOV43 MOV43 UPD42 INS40 INS40 UPD42 MOV42 INS32 INS32 UPD42 UPD42 INS32 INS32 UPD45 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 UPD40 MOV40 MOV42 MOV42 UPD40 MOV40 UPD42 UPD42 MOV32 INS42 INS42 INS42 MOV42 MOV32 MOV32 MOV32 UPD42 UPD42 UPD42 UPD40 UPD42 INS40 UPD42 INS22 INS22 INS42 INS40 INS22 INS42 INS40 MOV36 INS42 MOV36 INS42 MOV36 INS42 UPD42 UPD42 INS22 UPD40 MOV36 INS42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL42 DEL46 DEL42 DEL42 DEL48 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL32 DEL11 DEL32 DEL11