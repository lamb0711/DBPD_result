- moved virtual nodestate providers down to shared states (part of solving JCR-45)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156034 13f79535-47bb-0310-9956-ffa450edef68

-    private final HistoryRootNodeState root;
+    private HistoryRootNodeState root;
-    private final NodeTypeManagerImpl ntMgr;
+    private final NodeTypeRegistry ntReg;
+
+    /** the parent id */
+    private final String parentId;
+
+    /** the root node id */
+    private final String rootNodeId;
+
-    public VersionItemStateProvider(VersionManager vMgr, NodeTypeManagerImpl ntMgr, String rootId, String parentId) throws RepositoryException {
+    public VersionItemStateProvider(VersionManager vMgr, NodeTypeRegistry ntReg, String rootId, String parentId) throws RepositoryException {
-        this.ntMgr = ntMgr;
-        NDEF_VERSION = new NodeDefId(getNodeTypeManager().getNodeType(NT_VERSIONHISTORY).getApplicableChildNodeDef(JCR_ROOTVERSION, NT_VERSION).unwrap());
-        NDEF_VERSION_HISTORY = new NodeDefId(getNodeTypeManager().getNodeType(NT_UNSTRUCTURED).getApplicableChildNodeDef(JCR_ROOTVERSION, NT_VERSIONHISTORY).unwrap());
-        NDEF_VERSION_HISTORY_ROOT = new NodeDefId(getNodeTypeManager().getNodeType(REP_SYSTEM).getApplicableChildNodeDef(JCR_VERSIONSTORAGE, REP_VERSIONSTORAGE).unwrap());
-        NDEF_VERSION_LABELS = new NodeDefId(getNodeTypeManager().getNodeType(NT_VERSIONHISTORY).getApplicableChildNodeDef(JCR_VERSIONLABELS, NT_VERSIONLABELS).unwrap());
+        this.ntReg = ntReg;
+        this.rootNodeId = rootId;
+        this.parentId = parentId;
+        NDEF_VERSION = new NodeDefId(ntReg.getEffectiveNodeType(NT_VERSIONHISTORY).getApplicableChildNodeDef(JCR_ROOTVERSION, NT_VERSION));
+        NDEF_VERSION_HISTORY = new NodeDefId(ntReg.getEffectiveNodeType(NT_UNSTRUCTURED).getApplicableChildNodeDef(JCR_ROOTVERSION, NT_VERSIONHISTORY));
+        NDEF_VERSION_HISTORY_ROOT = new NodeDefId(ntReg.getEffectiveNodeType(REP_SYSTEM).getApplicableChildNodeDef(JCR_VERSIONSTORAGE, REP_VERSIONSTORAGE));
+        NDEF_VERSION_LABELS = new NodeDefId(ntReg.getEffectiveNodeType(NT_VERSIONHISTORY).getApplicableChildNodeDef(JCR_VERSIONLABELS, NT_VERSIONLABELS));
-        this.root = new HistoryRootNodeState(this, vMgr, parentId, rootId);
-        this.root.setDefinitionId(NDEF_VERSION_HISTORY_ROOT);
+        createRootNodeState();
+    }
+
+    /**
+     * Creates a new root node state
+     * @throws RepositoryException
+     */
+    private void createRootNodeState() throws RepositoryException {
+        root = new HistoryRootNodeState(this, vMgr, parentId, rootNodeId);
+        root.setDefinitionId(NDEF_VERSION_HISTORY_ROOT);
-        PropertyDefImpl def = getApplicablePropertyDef(parent, name, type, multiValued);
+        PropDef def = getApplicablePropertyDef(parent, name, type, multiValued);
-        prop.setDefinitionId(new PropDefId(def.unwrap()));
+        prop.setDefinitionId(new PropDefId(def));
-        NodeTypeImpl nodeType = getNodeTypeManager().getNodeType(nodeTypeName);
-        NodeDefImpl def;
+        NodeDefId def;
-            def = getApplicableChildNodeDef(parent, name, nodeType == null ? null : nodeType.getQName());
+            def = new NodeDefId(getApplicableChildNodeDef(parent, name, nodeTypeName));
-            NodeTypeRegistry ntReg = getNodeTypeManager().getNodeTypeRegistry();
+            NodeTypeRegistry ntReg = getNodeTypeRegistry();
-            def = getNodeTypeManager().getNodeDef(new NodeDefId(cnd));
-        }
-        if (nodeType == null) {
-            // use default node type
-            nodeType = (NodeTypeImpl) def.getDefaultPrimaryType();
+            ntReg.getNodeDef(new NodeDefId(cnd));
+            def = new NodeDefId(cnd);
-        state.setDefinitionId(new NodeDefId(def.unwrap()));
+        state.setDefinitionId(def);
-    private NodeTypeManagerImpl getNodeTypeManager() {
-        return ntMgr;
+    private NodeTypeRegistry getNodeTypeRegistry() {
+        return ntReg;
-    protected PropertyDefImpl getApplicablePropertyDef(NodeState parent, QName propertyName,
-                                                       int type, boolean multiValued)
+    protected PropDef getApplicablePropertyDef(NodeState parent, QName propertyName,
+                                               int type, boolean multiValued)
-        PropDef pd = getEffectiveNodeType(parent).getApplicablePropertyDef(propertyName, type, multiValued);
-        return getNodeTypeManager().getPropDef(new PropDefId(pd));
+        return getEffectiveNodeType(parent).getApplicablePropertyDef(propertyName, type, multiValued);
-    protected NodeDefImpl getApplicableChildNodeDef(NodeState parent, QName nodeName, QName nodeTypeName)
+    protected ChildNodeDef getApplicableChildNodeDef(NodeState parent, QName nodeName, QName nodeTypeName)
-        ChildNodeDef cnd = getEffectiveNodeType(parent).getApplicableChildNodeDef(nodeName, nodeTypeName);
-        return getNodeTypeManager().getNodeDef(new NodeDefId(cnd));
+        return getEffectiveNodeType(parent).getApplicableChildNodeDef(nodeName, nodeTypeName);
-        NodeTypeRegistry ntReg = getNodeTypeManager().getNodeTypeRegistry();
+        NodeTypeRegistry ntReg = getNodeTypeRegistry();
+
+    /**
+     * @see ItemStateListener#stateCreated
+     */
+    public void stateCreated(ItemState created) {
+    }
+
+    /**
+     * @see ItemStateListener#stateModified
+     */
+    public void stateModified(ItemState modified) {
+    }
+
+    /**
+     * @see ItemStateListener#stateDestroyed
+     */
+    public void stateDestroyed(ItemState destroyed) {
+        destroyed.removeListener(this);
+        if (destroyed.isNode() && ((NodeState) destroyed).getUUID().equals(rootNodeId)) {
+            try {
+                createRootNodeState();
+            } catch (RepositoryException e) {
+                // ignore
+            }
+        }
+        nodes.remove(destroyed.getId());
+    }
+
+    /**
+     * @see ItemStateListener#stateDiscarded
+     */
+    public void stateDiscarded(ItemState discarded) {
+        discarded.removeListener(this);
+        if (discarded.isNode() && ((NodeState) discarded).getUUID().equals(rootNodeId)) {
+            try {
+                createRootNodeState();
+            } catch (RepositoryException e) {
+                // ignore
+            }
+        }
+        nodes.remove(discarded.getId());
+    }

INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 UPD43 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 MOV29 MOV83 MOV42 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 UPD43 UPD42 MOV43 MOV43 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD42 UPD42 INS65 INS42 INS42 INS65 INS42 INS42 UPD43 UPD42 MOV21 MOV21 INS21 INS21 MOV21 MOV21 MOV21 MOV21 INS21 INS65 INS65 INS42 MOV21 MOV21 UPD42 INS65 INS43 INS42 INS65 INS43 INS42 INS65 INS43 INS42 INS21 INS25 INS21 INS65 INS43 INS42 INS21 INS25 INS21 INS66 INS66 UPD42 INS7 INS7 INS32 INS66 INS42 UPD43 UPD43 UPD42 MOV32 MOV32 INS67 INS42 INS67 INS42 INS67 INS42 INS32 INS27 INS8 INS32 INS67 INS42 INS32 INS27 INS8 INS32 UPD42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS32 INS32 INS54 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS52 INS32 INS32 INS54 INS42 INS42 INS32 UPD42 INS52 INS42 INS52 INS42 MOV43 INS32 MOV43 INS32 MOV43 INS32 MOV43 INS32 UPD42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS8 INS12 INS42 INS42 MOV32 MOV42 MOV42 MOV42 MOV32 MOV42 MOV42 MOV42 MOV32 MOV42 MOV42 MOV42 MOV32 MOV42 MOV42 MOV42 INS14 MOV32 INS7 INS36 INS42 INS21 INS44 INS8 INS36 INS42 INS21 INS44 INS8 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV43 INS32 UPD42 MOV42 INS42 MOV14 INS11 INS32 INS43 INS42 INS11 INS32 INS43 INS42 MOV42 MOV42 MOV42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 DEL83 DEL32 DEL32 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL32 DEL16 DEL32 DEL42 DEL32 DEL32 DEL42 DEL7 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32