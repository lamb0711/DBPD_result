reworked transaction support, contributed by dominique

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151380 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.ReferenceMap;
-     * A cache for <code>NodeReferences</code> objects.
-     */
-    private Map refsCache = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
-
-    /**
-     * Creates a new <code>DefaultItemStateManager</code> instance.
+     * Creates a new <code>SharedItemStateManager</code> instance.
-        ArrayList states = new ArrayList();
-        states.add(rootState);
-        states.add(prop);
+        ChangeLog changeLog = new ChangeLog();
+        changeLog.added(rootState);
+        changeLog.added(prop);
-        // do persist root node (incl. properties)
-        store(states, Collections.EMPTY_LIST);
+        persistMgr.store(changeLog);
+        changeLog.persisted();
-        NodeState state = persistMgr.load(id.getUUID());
+        NodeState state = persistMgr.load(id);
-        PropertyState state = persistMgr.load(id.getName(), id.getParentUUID());
+        PropertyState state = persistMgr.load(id);
-    public boolean hasItemState(ItemId id) {
+    public synchronized boolean hasItemState(ItemId id) {
-            return persistMgr.exists(id);
+            if (id.denotesNode()) {
+                return persistMgr.exists((NodeId) id);
+            } else {
+                return persistMgr.exists((PropertyId) id);
+            }
-    public synchronized NodeReferences getNodeReferences(NodeId targetId)
+    public synchronized NodeReferences getNodeReferences(NodeReferencesId id)
-        if (refsCache.containsKey(targetId)) {
-            return (NodeReferences) refsCache.get(targetId);
-        }
-
-            refs = persistMgr.load(targetId);
+            refs = persistMgr.load(id);
-            refs = new NodeReferences(targetId);
+            refs = new NodeReferences(id);
-        refsCache.put(targetId, refs);
-    /**
-     * @see ItemStateManager#beginUpdate
-     */
-    public UpdateOperation beginUpdate() throws ItemStateException {
-        throw new ItemStateException("Update not available.");
-    }
-
-    NodeState createInstance(String uuid, QName nodeTypeName,
-                             String parentUUID) {
+    private NodeState createInstance(String uuid, QName nodeTypeName,
+                                     String parentUUID) {
-        NodeState state = persistMgr.createNew(uuid, nodeTypeName, parentUUID);
+        NodeState state = persistMgr.createNew(new NodeId(uuid));
+        state.setNodeTypeName(nodeTypeName);
+        state.setParentUUID(parentUUID);
+     * Create a new node state instance
+     * @param other other state associated with new instance
+     * @return new node state instance
+     */
+    private ItemState createInstance(ItemState other) {
+        if (other.isNode()) {
+            NodeState ns = (NodeState) other;
+            return createInstance(ns.getUUID(), ns.getNodeTypeName(), ns.getParentUUID());
+        } else {
+            PropertyState ps = (PropertyState) other;
+            return createInstance(ps.getName(), ps.getParentUUID());
+        }
+    }
+
+    /**
-        PropertyState state = persistMgr.createNew(propName, parentUUID);
+        PropertyState state = persistMgr.createNew(
+                new PropertyId(parentUUID, propName));
-     * Store modified states and node references, atomically.
-     *
-     * @param states         states that have been modified
-     * @param refsCollection collection of refs to store
+     * Store modifications registered in a <code>ChangeLog</code>. The items
+     * contained in the <tt>ChangeLog</tt> are not states returned by this
+     * item state manager but rather must be reconnected to items provided
+     * by this state manager.
+     * @param local change log containing local items
-    void store(Collection states, Collection refsCollection)
-            throws ItemStateException {
+    public synchronized void store(ChangeLog local) throws ItemStateException {
+        ChangeLog shared = new ChangeLog();
-        persistMgr.store(states.iterator(), refsCollection.iterator());
-
-        Iterator iter = states.iterator();
+        /**
+         * Reconnect all items contained in the change log to their
+         * respective shared item and add the shared items to a
+         * new change log.
+         */
+        Iterator iter = local.addedStates();
-            int status = state.getStatus();
-            // @todo FIXME need to notify listeners on underlying (shared) state
-            if (state.getOverlayedState() != null) {
-                state = state.getOverlayedState();
-            }
-            switch (status) {
-                case ItemState.STATUS_NEW:
-                    state.notifyStateCreated();
-                    state.setStatus(ItemState.STATUS_EXISTING);
-                    break;
-
-                case ItemState.STATUS_EXISTING_REMOVED:
-                    state.notifyStateDestroyed();
-                    state.discard();
-                    break;
-
-                default:
-                    state.notifyStateUpdated();
-                    state.setStatus(ItemState.STATUS_EXISTING);
-                    break;
-            }
+            state.connect(createInstance(state));
+            shared.added(state.getOverlayedState());
-    }
+        iter = local.modifiedStates();
+        while (iter.hasNext()) {
+            ItemState state = (ItemState) iter.next();
+            state.connect(getItemState(state.getId()));
+            shared.modified(state.getOverlayedState());
+        }
+        iter = local.deletedStates();
+        while (iter.hasNext()) {
+            ItemState state = (ItemState) iter.next();
+            state.connect(getItemState(state.getId()));
+            shared.deleted(state.getOverlayedState());
+        }
+        iter = local.modifiedRefs();
+        while (iter.hasNext()) {
+            shared.modified((NodeReferences) iter.next());
+        }
+        /* Push all changes from the local items to the shared items */
+        local.push();
+
+        /* Store items in the underlying persistence manager */
+        persistMgr.store(shared);
+
+        /* Let the shared item listeners know about the change */
+        shared.persisted();
+    }

MOV31 INS83 INS83 UPD83 UPD43 UPD42 INS44 INS8 INS83 INS83 INS8 INS21 UPD43 UPD42 INS60 INS21 INS21 INS65 UPD65 INS65 UPD42 INS43 INS42 INS25 INS65 UPD43 UPD42 INS60 INS60 INS61 INS21 INS61 INS21 INS61 INS21 INS61 INS21 INS21 INS21 UPD66 UPD43 INS32 INS8 UPD42 INS43 INS59 INS32 INS32 INS66 INS42 INS66 INS66 UPD42 MOV42 INS32 INS8 INS8 INS43 UPD66 MOV66 INS66 INS66 UPD66 MOV66 UPD42 UPD66 UPD42 INS43 INS59 MOV43 INS59 MOV32 INS8 INS7 INS32 INS8 INS7 INS32 INS8 INS7 INS32 INS8 MOV32 MOV32 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS42 INS25 INS42 MOV42 INS32 INS42 INS42 MOV42 INS42 INS42 MOV42 INS42 INS42 INS60 INS41 INS60 INS41 INS42 UPD42 MOV42 INS42 INS14 INS42 INS32 MOV60 INS21 MOV21 INS42 INS32 INS42 INS42 MOV60 INS21 INS21 INS42 INS32 INS42 INS42 INS60 INS21 INS21 INS42 INS32 INS42 INS42 INS21 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD43 MOV42 MOV42 INS32 INS8 INS8 MOV42 MOV42 INS14 MOV43 INS59 INS32 INS43 INS59 INS32 INS14 INS43 INS42 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS32 INS42 INS42 INS43 INS59 MOV32 INS32 INS42 INS42 MOV32 UPD42 INS42 INS42 MOV41 INS41 INS43 INS42 INS42 INS11 INS42 INS32 INS32 INS32 INS42 INS42 INS11 INS42 INS32 INS32 INS43 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV32 INS42 UPD42 INS11 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS11 INS32 UPD42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS43 INS32 INS42 INS32 INS43 INS32 UPD42 MOV42 INS32 MOV42 UPD42 MOV42 MOV43 INS32 INS11 INS42 INS42 INS11 MOV43 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL40 DEL14 DEL59 DEL23 DEL40 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL67 DEL43 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL42 DEL65 DEL42 DEL65 DEL43 DEL42 DEL44 DEL42 DEL7 DEL32 DEL40 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL39 DEL42 DEL32 DEL59 DEL60 DEL33 DEL27 DEL8 DEL25 DEL42 DEL40 DEL49 DEL21 DEL40 DEL32 DEL21 DEL10 DEL40 DEL49 DEL21 DEL21 DEL10 DEL49 DEL21 DEL21 DEL10 DEL50 DEL8 DEL61 DEL8