JCR-238 workspace.copy causes 2 nodes in the same workspace to have the same version history

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@314862 13f79535-47bb-0310-9956-ffa450edef68

- *                     as applicable.
+  *                     as applicable.
+import org.apache.jackrabbit.core.version.VersionManager;
+import javax.jcr.version.VersionHistory;
+            boolean versionable = ent.includesNodeType(QName.MIX_VERSIONABLE);
+
+                if (versionable && flag == COPY) {
+                    /**
+                     * a versionable node is being copied:
+                     * copied properties declared by mix:versionable need to be
+                     * adjusted accordingly.
+                     */
+                    // jcr:versionHistory
+                    if (!propName.equals(QName.JCR_VERSIONHISTORY)) {
+                        VersionHistory vh = getOrCreateVersionHistory(newState);
+                        newChildState.setValues(new InternalValue[]{InternalValue.create(new UUID(vh.getUUID()))});
+                    }
+
+                    // jcr:baseVersion
+                    if (!propName.equals(QName.JCR_BASEVERSION)) {
+                        VersionHistory vh = getOrCreateVersionHistory(newState);
+                        newChildState.setValues(new InternalValue[]{InternalValue.create(new UUID(vh.getRootVersion().getUUID()))});
+                    }
+
+                    // jcr:predecessors
+                    if (!propName.equals(QName.JCR_PREDECESSORS)) {
+                        VersionHistory vh = getOrCreateVersionHistory(newState);
+                        newChildState.setValues(new InternalValue[]{InternalValue.create(new UUID(vh.getRootVersion().getUUID()))});
+                    }
+
+                    // jcr:isCheckedOut
+                    if (!propName.equals(QName.JCR_ISCHECKEDOUT)) {
+                        newChildState.setValues(new InternalValue[]{InternalValue.create(true)});
+                    }
+                }
+
+
+    /**
+     * Returns the version history of the given node state. A new
+     * version history will be created if doesn't exist yet.
+     *
+     * @param node node state
+     * @return the version history of the target node state
+     * @throws RepositoryException if an error occurs
+     */
+    private VersionHistory getOrCreateVersionHistory(NodeState node)
+            throws RepositoryException {
+        VersionManager vMgr = session.getVersionManager();
+        VersionHistory vh = vMgr.getVersionHistory(session, node);
+        if (vh == null) {
+            // create a new version history
+            vh = vMgr.createVersionHistory(session, node);
+        }
+        return vh;
+    }

INS26 INS26 INS40 INS40 INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS60 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS39 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS32 INS25 INS42 INS32 INS42 INS42 INS40 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS27 INS25 INS25 INS25 INS25 INS42 INS42 INS38 INS8 INS38 INS8 INS38 INS8 INS38 INS8 INS32 INS60 INS21 INS32 INS60 INS21 INS32 INS60 INS21 INS32 INS21 INS42 INS42 INS40 INS43 INS59 INS32 INS42 INS42 INS40 INS43 INS59 INS32 INS42 INS42 INS40 INS43 INS59 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS32 INS42 INS42 INS3 INS42 INS42 INS32 INS42 INS42 INS3 INS42 INS42 INS32 INS42 INS42 INS3 INS42 INS42 INS3 INS42 INS42 INS5 INS4 INS42 INS42 INS5 INS4 INS42 INS42 INS5 INS4 INS5 INS4 INS43 INS85 INS32 INS43 INS85 INS32 INS43 INS85 INS32 INS43 INS85 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS9 INS43 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42