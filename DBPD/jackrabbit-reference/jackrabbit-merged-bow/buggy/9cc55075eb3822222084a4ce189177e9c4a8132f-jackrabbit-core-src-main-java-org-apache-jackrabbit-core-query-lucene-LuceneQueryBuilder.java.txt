JCR-1064: Optimize queries that check for the existence of a property

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@578711 13f79535-47bb-0310-9956-ffa450edef68

+     * Wether the index format is new or old.
+     */
+    private IndexFormatVersion indexFormatVersion;
+    
+    /**
-     * @param root            the root node of the abstract query tree.
-     * @param session         of the user executing this query.
-     * @param sharedItemMgr   the shared item state manager of the workspace.
-     * @param hmgr            a hierarchy manager based on sharedItemMgr.
-     * @param nsMappings      namespace resolver for internal prefixes.
-     * @param analyzer        for parsing the query statement of the contains
-     *                        function.
-     * @param propReg         the property type registry.
-     * @param synonymProvider the synonym provider or <code>null</code> if node
-     *                        is configured.
+     * @param root               the root node of the abstract query tree.
+     * @param session            of the user executing this query.
+     * @param sharedItemMgr      the shared item state manager of the
+     *                           workspace.
+     * @param hmgr               a hierarchy manager based on sharedItemMgr.
+     * @param nsMappings         namespace resolver for internal prefixes.
+     * @param analyzer           for parsing the query statement of the contains
+     *                           function.
+     * @param propReg            the property type registry.
+     * @param synonymProvider    the synonym provider or <code>null</code> if
+     *                           node is configured.
+     * @param indexFormatVersion the index format version for the lucene query.
-                               SynonymProvider synonymProvider) {
+                               SynonymProvider synonymProvider, 
+                               IndexFormatVersion indexFormatVersion) {
+        this.indexFormatVersion = indexFormatVersion;
+     * @param  indexFormatVersion  the index format version to be used                   
-                                    SynonymProvider synonymProvider)
+                                    SynonymProvider synonymProvider,
+                                    IndexFormatVersion indexFormatVersion)
-                analyzer, propReg, synonymProvider);
+                analyzer, propReg, synonymProvider, indexFormatVersion);
-                        subQuery = new MatchAllQuery(NameFormat.format(QName.JCR_PRIMARYTYPE, nsMappings));
+                        subQuery = createMatchAllQuery(NameFormat.format(QName.JCR_PRIMARYTYPE, nsMappings));
-                Query refPropQuery = new MatchAllQuery(refProperty);
+                Query refPropQuery = createMatchAllQuery(refProperty);
-                        query = new MatchAllQuery(field);
+                        query = createMatchAllQuery(field);
-                    notQuery.add(new MatchAllQuery(field), Occur.SHOULD);
+                    notQuery.add(createMatchAllQuery(field), Occur.SHOULD);
-                    notQuery.add(new MatchAllQuery(field), Occur.SHOULD);
+                    notQuery.add(createMatchAllQuery(field), Occur.SHOULD);
-                    query = new NotQuery(new MatchAllQuery(field));
+                    query = new NotQuery(createMatchAllQuery(field));
-                    query = new MatchAllQuery(field);
+                    query = createMatchAllQuery(field);
+    
+    /**
+     * Depending on the index format this method returns
+     * a query that matches all nodes that have a property named 'field'
+     *
+     * @param field
+     * @return Query that matches all nodes that have a property named 'field'
+     */
+    private final Query createMatchAllQuery(String field) {
+        if (indexFormatVersion.getVersion() >= IndexFormatVersion.V2.getVersion()) {
+            // new index format style
+            return new TermQuery(new Term(FieldNames.PROPERTIES_SET, field));
+        } else {
+            return new MatchAllQuery(field);
+        }
+    }

INS23 INS31 INS29 INS83 INS43 INS59 INS44 INS44 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS42 INS65 INS43 INS42 INS21 INS65 INS43 INS42 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS7 INS42 INS66 INS42 MOV43 INS66 INS66 INS42 INS66 INS42 INS27 INS8 INS8 INS22 INS42 INS32 INS32 INS41 INS41 INS52 INS42 MOV43 INS42 INS42 INS42 INS40 INS42 INS14 MOV14 INS43 INS14 INS32 INS32 INS14 INS32 INS42 INS43 INS40 INS42 INS32 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL14