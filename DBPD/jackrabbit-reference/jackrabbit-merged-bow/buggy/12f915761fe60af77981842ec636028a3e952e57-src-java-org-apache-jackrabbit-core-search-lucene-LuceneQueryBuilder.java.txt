Changed XPath queries to reflect changes in latest spec: relative path uses root node as context node. absolute path must select /jcr:root to match anything at all.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151355 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.query.InvalidQueryException;
+        LocationStepQueryNode[] steps = node.getPathSteps();
+        if (steps.length > 0) {
+            if (node.isAbsolute() && !steps[0].getIncludeDescendants()) {
+                // eat up first step
+                QName nameTest = steps[0].getNameTest();
+                if (nameTest == null) {
+                    // this is equivalent to the root node
+                    context = new TermQuery(new Term(FieldNames.PARENT, ""));
+                } else if (nameTest.getLocalName().length() == 0) {
+                    // root node
+                    context = new TermQuery(new Term(FieldNames.PARENT, ""));
+                } else {
+                    // then this is a node != the root node
+                    // will never match anything!
+                    String name = "";
+                    try {
+                        name = nameTest.toJCRName(nsMappings);
+                    } catch (NoPrefixDeclaredException e) {
+                        exceptions.add(e);
+                    }
+                    BooleanQuery and = new BooleanQuery();
+                    and.add(new TermQuery(new Term(FieldNames.PARENT, "")), true, false);
+                    and.add(new TermQuery(new Term(FieldNames.LABEL, name)), true, false);
+                    context = and;
+                }
+                LocationStepQueryNode[] tmp = new LocationStepQueryNode[steps.length - 1];
+                System.arraycopy(steps, 1, tmp, 0, steps.length - 1);
+                steps = tmp;
+            } else {
+                // path is 1) relative or 2) descendant-or-self
+                // use root node as context
+                context = new TermQuery(new Term(FieldNames.PARENT, ""));
+            }
+        } else {
+            exceptions.add(new InvalidQueryException("Number of location steps must be > 0"));
+        }
-        QueryNode[] steps = node.getPathSteps();
-        if (node.getNameTest() != null && node.getNameTest().getLocalName().length() == 0) {
-            // select root node
-            return new TermQuery(new Term(FieldNames.PARENT, ""));
-        }
-
-
+

INS26 INS40 INS25 UPD5 INS27 INS8 INS8 UPD43 INS40 INS34 INS25 INS21 UPD42 INS27 INS8 INS8 INS32 INS32 INS38 INS60 INS25 INS60 INS21 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS25 INS5 INS59 INS32 INS7 INS7 INS43 INS45 INS2 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS27 INS8 INS8 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS34 INS2 INS42 INS7 INS32 INS34 INS21 INS60 INS54 INS60 INS21 INS21 INS21 INS42 INS5 INS27 INS40 INS34 INS43 INS14 INS42 INS34 INS42 INS14 INS32 INS42 INS7 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS32 INS7 INS43 INS85 INS40 INS34 INS42 INS43 INS40 INS45 INS43 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 MOV14 INS9 INS9 INS42 INS42 INS14 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS43 INS40 INS45 INS43 INS14 INS7 INS43 INS42 INS21 INS43 INS43 INS14 INS42 INS42 INS43 INS40 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL41 DEL8 DEL25