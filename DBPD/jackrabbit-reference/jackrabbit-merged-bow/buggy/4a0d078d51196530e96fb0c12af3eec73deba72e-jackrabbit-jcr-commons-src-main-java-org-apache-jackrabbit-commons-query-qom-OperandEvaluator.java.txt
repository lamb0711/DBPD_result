JCR-2853: QOM utility classes in jcr-commons

Move OperandEvaluator to jcr-commons.

Add a simple value factory class to simplify testing.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1080235 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.core.query.lucene.join;
+package org.apache.jackrabbit.commons.query.qom;
-import static java.util.Locale.ENGLISH;
-import static javax.jcr.PropertyType.NAME;
-
+import java.util.Locale;
+    /** The locale to use in upper- and lower-case conversion. */
+    private final Locale locale;
+
-     * bind variables.
+     * bind variables. Upper- and lower-case conversions are performed using
+     * the given locale.
+     * @param locale locale to use in upper- and lower-case conversions
+     */
+    public OperandEvaluator(
+            ValueFactory factory, Map<String, Value> variables, Locale locale) {
+        this.factory = factory;
+        this.variables = variables;
+        this.locale = locale;
+    }
+
+    /**
+     * Creates an operand evaluator for the given value factory and set of
+     * bind variables. Upper- and lower-case conversions are performed using
+     * the {@link Locale#ENGLISH}.
+     *
+     * @param factory value factory
+     * @param variables bind variables
+     * @param locale locale to use in upper- and lower-case conversions
-        this.factory = factory;
-        this.variables = variables;
+        this(factory, variables, Locale.ENGLISH);
-    public Value getValue(StaticOperand operand, int type) throws RepositoryException {
+    /**
+     * Returns the value of the given static operand
+     * ({@link Literal literal} or {@link BindVariableValue bind variable})
+     * casted to the given type.
+     *
+     * @param operand static operand to be evaluated
+     * @param type expected value type
+     * @return evaluated value, casted to the given type
+     * @throws RepositoryException if a named bind variable is not found,
+     *                             if the operand type is unknown, or
+     *                             if the type conversion fails
+     */
+    public Value getValue(StaticOperand operand, int type)
+            throws RepositoryException {
-     * @throws RepositoryException
+     * @throws RepositoryException if the operand can't be evaluated
-            Node node = row.getNode(nn.getSelectorName());
-            return new Value[] { factory.createValue(node.getName(), NAME) };
+            Value value = factory.createValue(
+                    row.getNode(nn.getSelectorName()).getName(),
+                    PropertyType.NAME);
+            return new Value[] { value };
-            String lower = value.toLowerCase(ENGLISH);
+            String lower = value.toLowerCase(locale);
-            String upper = value.toUpperCase(ENGLISH);
+            String upper = value.toUpperCase(locale);
-        return new Value[] { factory.createValue(name, NAME) };
+        return new Value[] { factory.createValue(name, PropertyType.NAME) };

UPD40 UPD40 INS23 INS31 INS29 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS42 INS44 INS44 INS8 INS29 INS65 INS42 INS42 INS65 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS66 UPD66 INS66 INS42 INS66 INS42 INS7 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS42 INS42 INS40 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS22 INS42 INS67 INS42 INS42 INS42 INS42 INS66 INS42 INS66 INS52 INS42 INS42 INS42 MOV43 MOV43 INS40 UPD43 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS32 INS40 INS42 MOV32 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42