JCR-2402 Observation: avoid running out of memory

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@884154 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.atomic.AtomicInteger;
+     * The maximum number of queued asynchronous events. To avoid of of memory
+     * problems, the default value is 200'000. To change the default, set the
+     * system property jackrabbit.maxQueuedEvents to the required value. If more
+     * events are in the queue, the current thread waits, unless the current thread is
+     * the observation dispatcher itself (in which case only a warning is logged
+     * - usually observation listeners shouldn't cause new events).
+     */
+    private static final int MAX_QUEUED_EVENTS = Integer.parseInt(System.getProperty("jackrabbit.maxQueuedEvents", "200000"));
+
+    /**
+    private AtomicInteger eventQueueSize = new AtomicInteger();
+
+    private long lastError;
+
+            eventQueueSize.getAndAdd(-action.getEventStates().size());
+        int size = eventQueueSize.addAndGet(events.size());
+        if (size > MAX_QUEUED_EVENTS) {
+            boolean logWarning = false;
+            long now = System.currentTimeMillis();
+            // log a warning at most every 5 seconds (to avoid filling the log file)
+            if (lastError == 0 || now > lastError + 5000) {
+                logWarning = true;
+                log.warn("More than " + MAX_QUEUED_EVENTS + " events in the queue", new Exception("Stack Trace"));
+                lastError = now;
+            }
+            if (Thread.currentThread() == notificationThread) {
+                if (logWarning) {
+                    log.warn("Recursive notification?");
+                }
+            } else {
+                if (logWarning) {
+                    log.warn("Waiting");
+                }
+                while (eventQueueSize.get() > MAX_QUEUED_EVENTS) {
+                    try {
+                        Thread.sleep(100);
+                    } catch (InterruptedException e) {
+                        // ignore
+                    }
+                }
+            }
+        }

INS26 INS40 INS23 INS23 INS23 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS65 INS42 INS32 INS42 INS42 INS14 INS42 INS60 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS32 INS43 INS39 INS59 INS27 INS8 INS42 INS42 INS45 INS45 INS42 INS21 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS25 INS32 INS42 INS42 INS32 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS8 INS42 INS42 INS38 INS42 INS42 INS42 INS9 INS42 INS32 INS27 INS27 INS21 INS21 INS21 INS32 INS42 INS25 INS25 INS61 INS32 INS42 INS42 INS42 INS34 INS42 INS27 INS7 INS32 INS7 INS42 INS42 INS42 INS8 INS42 INS8 INS27 INS8 INS32 INS42 INS42 INS34 INS42 INS9 INS42 INS42 INS27 INS14 INS42 INS42 INS21 INS21 INS32 INS42 INS54 INS42 INS42 INS45 INS42 INS45 INS43 INS45 INS32 INS32 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS21 INS44 INS8 INS32 INS43 INS42 INS42 INS42 INS34 INS42