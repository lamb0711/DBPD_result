Make versioning transactional
- Added specialized XAVersion and XAVersionHistory objects that refresh their internal state when needed
- Defined new observation interface in order to have VersionManagerImpl use standard event dispatching
  instead of writing its own
- Added test cases verifying isolation of versioning operations in transactions


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368026 13f79535-47bb-0310-9956-ffa450edef68

-public class InternalVersionHistoryImpl extends InternalVersionItemImpl
+class InternalVersionHistoryImpl extends InternalVersionItemImpl
+     * Temporary version cache, used on a refresh.
+     */
+    private HashMap tempVersionCache = new HashMap();
+
+    /**
-    public InternalVersionHistoryImpl(VersionManagerImpl vMgr, NodeStateEx node)
+    public InternalVersionHistoryImpl(AbstractVersionManager vMgr, NodeStateEx node)
-            InternalVersionImpl v = new InternalVersionImpl(this, child, child.getName());
+            InternalVersionImpl v = createVersionInstance(child);
+            vMgr.versionCreated(v);
+     * Reload this object and all its dependent version objects.
+     */
+    void reload() throws RepositoryException {
+        tempVersionCache.putAll(versionCache);
+
+        init();
+
+        // invalidate all versions that are not referenced any more
+        Iterator iter = tempVersionCache.values().iterator();
+        while (iter.hasNext()) {
+            InternalVersionImpl v = (InternalVersionImpl) iter.next();
+            v.invalidate();
+        }
+        tempVersionCache.clear();
+    }
+
+    /**
+     * Create a version instance. May resurrect versions temporarily swapped
+     * out when refreshing this history.
+     */
+    InternalVersionImpl createVersionInstance(NodeStateEx child) {
+        InternalVersionImpl v = (InternalVersionImpl) tempVersionCache.remove(child.getUUID());
+        if (v != null) {
+            v.clear();
+        }
+        if (v == null) {
+            v = new InternalVersionImpl(this, child, child.getName());
+        }
+        return v;
+    }
+
+    /**
-        List refs = getVersionManager().getItemReferences(v);
+        List refs = vMgr.getItemReferences(v);
+        vMgr.versionDestroyed(v);
+        vMgr.versionCreated(version);
-    static InternalVersionHistoryImpl create(VersionManagerImpl vMgr,
+    static InternalVersionHistoryImpl create(AbstractVersionManager vMgr,
-                                             NodeState nodeState,
-                                             List created)
+                                             NodeState nodeState)
-        created.add(pNode.getUUID());
-        NodeStateEx lNode = pNode.addNode(QName.JCR_VERSIONLABELS, QName.NT_VERSIONLABELS, null, false);
-        created.add(lNode.getUUID());
+        pNode.addNode(QName.JCR_VERSIONLABELS, QName.NT_VERSIONLABELS, null, false);
-        created.add(vNode.getUUID());
-        created.add(node.getUUID());
-        
+

INS42 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS29 INS39 INS42 INS43 INS8 INS29 MOV43 INS42 INS44 INS8 MOV21 INS65 INS42 INS42 INS14 UPD43 INS65 INS42 INS21 INS21 INS60 INS61 INS21 INS65 MOV43 INS42 INS60 INS25 INS25 INS41 INS21 INS21 UPD43 INS66 INS43 UPD42 INS66 INS32 INS32 INS43 INS59 INS32 INS8 INS32 INS66 INS66 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS32 INS32 UPD42 MOV32 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS43 INS59 INS32 INS43 INS32 INS32 INS7 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 MOV14 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21