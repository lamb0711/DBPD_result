differentiated handling of single vs. multi-valued properties:
multi-valued property can only be set with value array and vice versa


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@46941 13f79535-47bb-0310-9956-ffa450edef68

+     * @param multiValued
-    public PropertyDefImpl getApplicablePropertyDef(QName propertyName, int type)
+    public PropertyDefImpl getApplicablePropertyDef(QName propertyName, int type,
+						    boolean multiValued)
-	return new PropertyDefImpl(ent.getApplicablePropertyDef(propertyName, type),
+	return new PropertyDefImpl(ent.getApplicablePropertyDef(propertyName, type, multiValued),
+	if (value == null) {
+	    // setting a property to null is equivalent of removing it
+	    return canRemoveItem(propertyName);
+	}
-	    PropertyDefImpl def = getApplicablePropertyDef(name, value == null ? PropertyType.UNDEFINED : value.getType());
+	    int type = (value == null) ? PropertyType.UNDEFINED : value.getType();
+	    PropertyDefImpl def = getApplicablePropertyDef(name, type, false);
+	    if (def.isMultiple()) {
+		return false;
+	    }
+     * @see NodeType#canSetProperty(String, Value[])
+     */
+    public boolean canSetProperty(String propertyName, Value values[]) {
+	if (values == null) {
+	    // setting a property to null is equivalent of removing it
+	    return canRemoveItem(propertyName);
+	}
+	try {
+	    QName name = QName.fromJCRName(propertyName, nsResolver);
+	    int type = (values == null || values.length == 0) ? PropertyType.UNDEFINED : values[0].getType();
+	    PropertyDefImpl def = getApplicablePropertyDef(name, type, true);
+	    if (def.isProtected()) {
+		return false;
+	    }
+	    if (!def.isMultiple()) {
+		return false;
+	    }
+	    ArrayList list = new ArrayList();
+	    // convert values and compact array (purge null entries)
+	    for (int i = 0; i < values.length; i++) {
+		if (values[i] != null) {
+		    InternalValue internalValue = InternalValue.create(values[i], nsResolver);
+		    list.add(internalValue);
+		}
+	    }
+	    InternalValue[] internalValues = (InternalValue[]) list.toArray(new InternalValue[list.size()]);
+	    checkSetPropertyValueConstraints(def, internalValues);
+	    return true;
+	} catch (BaseException be) {
+	    // implementation specific exception, fall through
+	} catch (RepositoryException re) {
+	    // fall through
+	}
+	return false;
+    }
+
+    /**

INS31 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS39 INS42 INS25 INS65 INS43 INS42 INS43 INS42 INS85 INS25 INS54 INS41 INS42 MOV27 INS8 INS68 INS42 INS42 INS27 INS8 INS8 INS12 INS12 INS9 INS41 INS60 INS25 INS42 INS42 INS69 INS69 INS42 INS33 INS41 INS60 INS60 INS60 INS25 INS25 INS60 INS24 INS60 INS21 INS41 INS44 INS8 INS44 INS8 INS42 INS32 INS39 INS59 INS32 INS8 INS43 INS5 INS32 INS43 INS59 INS39 INS59 INS43 INS59 INS32 INS8 INS38 INS8 INS43 INS59 INS58 INS27 INS37 INS8 INS5 INS59 INS32 INS9 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS41 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS32 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS41 INS32 INS41 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS25 INS43 INS85 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS36 INS40 MOV32 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS36 INS40 INS32 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS9 INS43 INS42 INS34 INS27 INS8 INS42 INS5 INS32 INS27 INS27 INS2 INS42 INS42 INS2 INS33 INS60 INS21 INS43 INS85 INS42 INS42 INS3 INS42 INS33 INS27 INS27 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS42 INS5 INS32 INS42 INS33 INS40 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 DEL40 DEL16