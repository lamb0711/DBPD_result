improving startup time: all workspaces (except the default workspace) are initialized lazily, i.e. on demand

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@366532 13f79535-47bb-0310-9956-ffa450edef68

-        // initialize workspaces
-        String wspName = "";
+        // initialize default workspace
+        String wspName = repConfig.getDefaultWorkspaceName();
-            iter = wspInfos.keySet().iterator();
-            while (iter.hasNext()) {
-                wspName = (String) iter.next();
-                initWorkspace(wspName);
-            }
+            initWorkspace((WorkspaceInfo) wspInfos.get(wspName));
-            // if any workspace failed to initialize, shutdown again
+            // if default workspace failed to initialize, shutdown again
-        // after the workspaces are initialized we pass a system session to
+        // after the workspace is initialized we pass a system session to
-        // todo FIXME it seems odd that the *global* virtual node type manager 
+        // todo FIXME it seems odd that the *global* virtual node type manager
-    private void initWorkspace(String wspName) throws RepositoryException {
+    private void initWorkspace(WorkspaceInfo wspInfo) throws RepositoryException {
+        // first initialize workspace info
+        wspInfo.initialize();
-        SessionImpl sysSession = getSystemSession(wspName);
+        SessionImpl sysSession = wspInfo.getSystemSession();
-         * - the should be one 'System' workspace per repositoy
+         * - the should be one 'System' workspace per repository
-        SearchManager searchMgr = getSearchManager(wspName);
+        SearchManager searchMgr = wspInfo.getSearchManager();
-        delegatingDispatcher.addDispatcher(getObservationManagerFactory(wspName));
+        delegatingDispatcher.addDispatcher(wspInfo.getObservationManagerFactory());
-    private SearchManager getSystemSearchManager(String wspName) throws RepositoryException {
+    private SearchManager getSystemSearchManager(String wspName)
+            throws RepositoryException {
+        synchronized (wspInfo) {
+            if (!wspInfo.isInitialized()) {
+                try {
+                    initWorkspace(wspInfo);
+                } catch (RepositoryException e) {
+                    log.error("Unable to initialize workspace '" + workspaceName + "'", e);
+                    throw new NoSuchWorkspaceException(workspaceName);
+                }
+            }
+        }
-
-        // setup/initialize new workspace
-        initWorkspace(workspaceName);
-     * @param workspaceName
-     * @return
-     * @throws NoSuchWorkspaceException
-     * @throws RepositoryException
+     * Returns the {@link SystemSession} for the workspace with name
+     * <code>workspaceName</code>
+     *
+     * @param workspaceName workspace name
+     * @return system session of the specified workspace
+     * @throws NoSuchWorkspaceException if such a workspace does not exist
+     * @throws RepositoryException      if some other error occurs
-            wspInfo.dispose();
+            synchronized(wspInfo) {
+                if (wspInfo.isInitialized()) {
+                    wspInfo.dispose();
+                }
+            }
-        this.releaseRepositoryLock() ;
-        
+        // finally release repository lock
+        releaseRepositoryLock();
-         * workspace configuration
+         * workspace configuration (passed in constructor)
-         * persistence manager
+         * persistence manager (instantiated on init)
-         * item state provider
+         * item state provider (instantiated on init)
-         * system session
-         */
-        private SystemSession systemSession;
-
-        /**
-         * observation manager factory
+         * observation manager factory (instantiated on init)
-         * search manager
+         * system session (lazily instantiated)
+         */
+        private SystemSession systemSession;
+
+        /**
+         * search manager (lazily instantiated)
-         * Lock manager
+         * lock manager (lazily instantiated)
+         * flag indicating whether this instance has been initialized.
+         */
+        private boolean initialized;
+
+        /**
+            initialized = false;
-         * Returns the workspace name
+         * Returns the workspace name.
-         * Returns the workspace file system
+         * Returns the workspace file system.
-         * Returns the workspace configuration
+         * Returns the workspace configuration.
-         * Returns the workspace persistence manager
+         * Returns <code>true</code> if this workspace info is initialized,
+         * otherwise returns <code>false</code>.
+         *
+         * @return <code>true</code> if this workspace info is initialized.
+         */
+        synchronized boolean isInitialized() {
+            return initialized;
+        }
+
+        /**
+         * Returns the workspace persistence manager.
-            if (persistMgr == null) {
-                persistMgr = createPersistenceManager(new File(config.getHomeDir()),
-                        config.getFileSystem(),
-                        pmConfig,
-                        rootNodeUUID,
-                        nsReg,
-                        ntReg);
+            if (!initialized) {
+                throw new IllegalStateException("not initialized");
-            return persistMgr;
-        }
-        /**
-         * Returns the system session for this workspace
-         *
-         * @return the system session for this workspace
-         * @throws RepositoryException if the system session could not be created
-         */
-        synchronized SystemSession getSystemSession() throws RepositoryException {
-            if (systemSession == null) {
-                systemSession = SystemSession.create(RepositoryImpl.this, config);
-            }
-            return systemSession;
+            return persistMgr;
-            if (itemStateMgr == null) {
-                // create item state manager
-                try {
-                    itemStateMgr = new SharedItemStateManager(
-                            getPersistenceManager(config.getPersistenceManagerConfig()),
-                            rootNodeUUID, ntReg);
-                    try {
-                        itemStateMgr.addVirtualItemStateProvider(vMgr.getVirtualItemStateProvider());
-                        itemStateMgr.addVirtualItemStateProvider(virtNTMgr.getVirtualItemStateProvider());
-                    } catch (Exception e) {
-                        log.error("Unable to add vmgr: " + e.toString(), e);
-                    }
-                } catch (ItemStateException ise) {
-                    String msg = "failed to instantiate persistent item state manager";
-                    log.debug(msg);
-                    throw new RepositoryException(msg, ise);
-                }
+            if (!initialized) {
+                throw new IllegalStateException("not initialized");
+
-            if (obsMgrFactory == null) {
-                obsMgrFactory = new ObservationManagerFactory();
+            if (!initialized) {
+                throw new IllegalStateException("not initialized");
+
-         * Returns the search manager for this workspace
+         * Returns the search manager for this workspace.
+            if (!initialized) {
+                throw new IllegalStateException("not initialized");
+            }
+
+                // search manager is lazily instantiated in order to avoid
+                // 'chicken & egg' bootstrap problems
-                        getItemStateProvider(),
+                        itemStateMgr,
-         * Returns the lock manager for this workspace
+         * Returns the lock manager for this workspace.
+            if (!initialized) {
+                throw new IllegalStateException("not initialized");
+            }
+
+            // lock manager is lazily instantiated in order to avoid
+            // 'chicken & egg' bootstrap problems
+         * Returns the system session for this workspace.
+         *
+         * @return the system session for this workspace
+         * @throws RepositoryException if the system session could not be created
+         */
+        synchronized SystemSession getSystemSession() throws RepositoryException {
+            if (!initialized) {
+                throw new IllegalStateException("not initialized");
+            }
+
+            // system session is lazily instantiated in order to avoid
+            // 'chicken & egg' bootstrap problems
+            if (systemSession == null) {
+                systemSession = SystemSession.create(RepositoryImpl.this, config);
+            }
+            return systemSession;
+        }
+
+        /**
+         * Initializes this workspace info. The following components are
+         * initialized immediately:
+         * <ul>
+         * <li>persistence manager</li>
+         * <li>shared item state manager</li>
+         * <li>observation manager factory</li>
+         * </ul>
+         * The following components are initialized lazily (i.e. on demand)
+         * in order to save resources and to avoid 'chicken & egg' bootstrap
+         * problems:
+         * <ul>
+         * <li>system session</li>
+         * <li>lock manager</li>
+         * <li>search manager</li>
+         * </ul>
+         */
+        synchronized void initialize() throws RepositoryException {
+            if (initialized) {
+                throw new IllegalStateException("already initialized");
+            }
+
+            persistMgr = createPersistenceManager(new File(config.getHomeDir()),
+                    config.getFileSystem(),
+                    config.getPersistenceManagerConfig(),
+                    rootNodeUUID,
+                    nsReg,
+                    ntReg);
+
+            // create item state manager
+            try {
+                itemStateMgr =
+                        new SharedItemStateManager(persistMgr, rootNodeUUID, ntReg);
+                try {
+                    itemStateMgr.addVirtualItemStateProvider(
+                            vMgr.getVirtualItemStateProvider());
+                    itemStateMgr.addVirtualItemStateProvider(
+                            virtNTMgr.getVirtualItemStateProvider());
+                } catch (Exception e) {
+                    log.error("Unable to add vmgr: " + e.toString(), e);
+                }
+            } catch (ItemStateException ise) {
+                String msg = "failed to instantiate shared item state manager";
+                log.debug(msg);
+                throw new RepositoryException(msg, ise);
+            }
+
+            obsMgrFactory = new ObservationManagerFactory();
+
+            initialized = true;
+        }
+
+        /**
-        void dispose() {
-            // dispose observation manager factory
-            if (obsMgrFactory != null) {
-                obsMgrFactory.dispose();
-                obsMgrFactory = null;
+        synchronized void dispose() {
+            if (!initialized) {
+                throw new IllegalStateException("not initialized");
+            // dispose observation manager factory
+            obsMgrFactory.dispose();
+            obsMgrFactory = null;
+
-            // dispose persistent item state mgr
-            if (itemStateMgr != null) {
-                itemStateMgr.dispose();
-                itemStateMgr = null;
-            }
+            // dispose shared item state manager
+            itemStateMgr.dispose();
+            itemStateMgr = null;
-            if (persistMgr != null) {
-                try {
-                    persistMgr.close();
-                } catch (Exception e) {
-                    log.error("error while closing persistence manager of workspace "
-                            + config.getName(), e);
-                }
-                persistMgr = null;
+            try {
+                persistMgr.close();
+            } catch (Exception e) {
+                log.error("error while closing persistence manager of workspace "
+                        + config.getName(), e);
+            persistMgr = null;
+            // close lock manager
+                lockMgr = null;

MOV23 MOV31 MOV31 INS23 INS31 INS31 UPD43 UPD42 INS21 INS51 INS65 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 MOV29 INS83 MOV43 INS42 INS43 INS8 INS29 INS39 INS42 MOV8 INS83 MOV25 INS8 UPD42 INS32 INS42 INS8 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS42 INS21 INS65 INS65 INS41 INS42 INS25 MOV41 INS25 INS25 INS25 INS65 INS25 MOV21 MOV21 INS21 MOV21 MOV21 MOV21 MOV21 MOV54 MOV21 INS32 MOV21 INS42 INS42 INS25 INS42 INS51 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS7 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS42 UPD66 INS38 INS38 INS8 INS38 UPD66 INS38 INS8 UPD66 INS38 INS8 UPD66 INS38 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS8 INS7 INS38 INS42 INS42 INS32 INS42 INS42 INS42 INS38 INS8 INS42 INS8 INS42 INS9 INS42 INS53 INS42 INS53 INS42 INS53 INS42 INS53 INS42 INS53 INS42 INS53 INS53 INS42 INS9 INS42 INS53 INS21 INS42 INS11 INS32 INS54 INS25 INS14 INS14 INS14 INS14 INS14 INS14 INS14 MOV32 INS43 INS14 INS7 UPD43 MOV43 MOV32 INS42 INS42 INS8 INS12 INS32 INS8 INS43 INS45 INS43 INS45 UPD43 MOV43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS43 INS45 INS42 INS33 UPD42 UPD42 UPD42 INS42 INS21 INS44 INS8 INS42 INS42 MOV21 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 INS42 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS27 INS42 INS43 INS42 INS45 INS42 INS45 INS42 DEL45 DEL42 DEL11 DEL7 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25