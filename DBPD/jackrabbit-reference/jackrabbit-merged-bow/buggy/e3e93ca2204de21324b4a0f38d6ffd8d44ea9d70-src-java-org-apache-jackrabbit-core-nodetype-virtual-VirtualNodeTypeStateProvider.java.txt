- adding indexing of nodetype 
- fixing indexing of versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159669 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.uuid.UUID;
-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistryListener;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.io.UnsupportedEncodingException;
-public class VirtualNodeTypeStateProvider extends AbstractVISProvider implements NodeTypeRegistryListener {
+public class VirtualNodeTypeStateProvider extends AbstractVISProvider {
-        ntReg.addListener(this);
-    public void nodeTypeRegistered(QName ntName) {
-        // todo: do more efficient reloading
+    public void onNodeTypeAdded(QName ntName) throws RepositoryException {
-            getRootState().discard();
+            VirtualNodeState root = (VirtualNodeState) getRootState();
+            NodeTypeDef ntDef = ntReg.getNodeTypeDef(ntName);
+            VirtualNodeState ntState = createNodeTypeState(root, ntDef);
+            root.addChildNodeEntry(ntName, ntState.getUUID());
+
+            // add as hard reference
+            root.addStateReference(ntState);
+            root.notifyStateUpdated();
-            // ignore
+            throw new RepositoryException(e);
-    public void nodeTypeReRegistered(QName ntName) {
+    public void onNodeTypeModified(QName ntName) throws RepositoryException {
-            // ignore
+            throw new RepositoryException(e);
-    public void nodeTypeUnregistered(QName ntName) {
+    public void onNodeTypeRemoved(QName ntName) throws RepositoryException {
-            // ignore
+            throw new RepositoryException(e);
-        VirtualNodeState ntState = createNodeState(parent, ntDef.getName(), null, NT_NODETYPE);
+        String uuid = calculateStableUUID(ntDef.getName().toString());
+        VirtualNodeState ntState = createNodeState(parent, ntDef.getName(), uuid, NT_NODETYPE);
-            VirtualNodeState pdState = createPropertyDefState(ntState, propDefs[i]);
+            VirtualNodeState pdState = createPropertyDefState(ntState, propDefs[i], ntDef, i);
-            VirtualNodeState cnState = createChildNodeDefState(ntState, cnDefs[i]);
+            VirtualNodeState cnState = createChildNodeDefState(ntState, cnDefs[i], ntDef, i);
-    private VirtualNodeState createPropertyDefState(VirtualNodeState parent, PropDef propDef) throws RepositoryException {
-        VirtualNodeState pState = createNodeState(parent, JCR_PROPERTYDEF, null, NT_PROPERTYDEF);
+    private VirtualNodeState createPropertyDefState(VirtualNodeState parent,
+                                                    PropDef propDef,
+                                                    NodeTypeDef ntDef, int n)
+            throws RepositoryException {
+        String uuid = calculateStableUUID(ntDef.getName().toString() + "/" + JCR_PROPERTYDEF.toString() + "/" + n);
+        VirtualNodeState pState = createNodeState(parent, JCR_PROPERTYDEF, uuid, NT_PROPERTYDEF);
-    private VirtualNodeState createChildNodeDefState(VirtualNodeState parent, ChildNodeDef cnDef) throws RepositoryException {
-        VirtualNodeState pState = createNodeState(parent, JCR_CHILDNODEDEF, null, NT_CHILDNODEDEF);
+    private VirtualNodeState createChildNodeDefState(VirtualNodeState parent,
+                                                     ChildNodeDef cnDef,
+                                                     NodeTypeDef ntDef, int n)
+            throws RepositoryException {
+        String uuid = calculateStableUUID(ntDef.getName().toString() + "/" + JCR_CHILDNODEDEF.toString() + "/" + n);
+        VirtualNodeState pState = createNodeState(parent, JCR_CHILDNODEDEF, uuid, NT_CHILDNODEDEF);
+    
+    /**
+     * Calclulates a stable uuid out of the given string. The alogrith does a
+     * MD5 digest from the string an converts it into the uuid format.
+     * 
+     * @param name
+     * @return
+     * @throws RepositoryException
+     */ 
+    private static String calculateStableUUID(String name) throws RepositoryException {
+        try {
+            MessageDigest md = MessageDigest.getInstance("MD5");
+            byte[] digest = md.digest(name.getBytes("utf-8"));
+            return new UUID(digest).toString();
+        } catch (NoSuchAlgorithmException e) {
+            throw new RepositoryException(e);
+        } catch (UnsupportedEncodingException e) {
+            throw new RepositoryException(e);
+        }
+    }

MOV26 INS26 INS26 INS26 MOV31 UPD40 INS40 INS40 INS40 INS31 UPD42 INS43 UPD42 INS43 UPD42 INS43 INS44 INS44 INS44 INS44 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS42 INS60 INS43 INS42 INS39 INS42 INS60 INS43 INS42 INS39 INS42 INS60 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS54 MOV12 MOV12 MOV12 INS43 INS59 INS43 INS42 INS43 INS59 INS42 INS43 INS59 INS66 INS66 INS42 INS42 INS42 INS8 INS12 INS12 INS60 INS60 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS41 INS44 INS8 INS44 INS8 INS43 INS59 INS43 INS59 MOV43 INS59 INS32 INS32 INS32 INS53 INS53 INS53 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS43 INS59 INS5 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS14 INS14 INS32 INS42 INS32 INS45 INS32 INS45 INS42 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS14 INS42 INS42 INS14 INS42 INS14 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL52 DEL32 DEL21 DEL32 DEL32 DEL33 DEL33 DEL33