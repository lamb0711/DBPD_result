JCR-94: Versioning support for JCR-RMI, contributed by Felix Meschberger.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159670 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.version.Version;
+import javax.jcr.version.VersionHistory;
+import javax.jcr.version.VersionIterator;
+import org.apache.jackrabbit.rmi.remote.RemoteVersion;
+     * <p>
+     * If the <code>item</code>, this method calls the
+     * {@link #getRemoteNode(Node)} to return the correct remote type.
-            return factory.getRemoteNode((Node) item);
+            return getRemoteNode((Node) item);
+     * Utility method for creating a remote reference for a local node.
+     * Unlike the factory method for creating remote node references, this
+     * method introspects the type of the local node and returns the
+     * corresponding node, version, or version history remote reference using
+     * the remote adapter factory.
+     *
+     * @param item local node, property, or item
+     * @return remote node, property, or item reference
+     * @throws RemoteException on RMI errors
+     */
+    protected RemoteNode getRemoteNode(Node node) throws RemoteException {
+        if (node instanceof Version) {
+            return factory.getRemoteVersion((Version) node);
+        } else if (node instanceof VersionHistory) {
+            return factory.getRemoteVersionHistory((VersionHistory) node);
+        } else {
+            return factory.getRemoteNode(node);
+        }
+    }
+
+    /**
-                remotes[i] = factory.getRemoteNode(iterator.nextNode());
+                remotes[i] = getRemoteNode(iterator.nextNode());
+     * local versions. The remote references are created using the
+     * remote adapter factory.
+     * <p>
+     * A <code>null</code> input is treated as an empty array.
+     *
+     * @param versions local version array
+     * @return remote version array
+     * @throws RemoteException on RMI errors
+     */
+    protected RemoteVersion[] getRemoteVersionArray(Version[] versions)
+            throws RemoteException {
+        if (versions != null) {
+            RemoteVersion[] remotes = new RemoteVersion[versions.length];
+            for (int i = 0; i < remotes.length; i++) {
+                remotes[i] = factory.getRemoteVersion(versions[i]);
+            }
+            return remotes;
+        } else {
+            return new RemoteVersion[0]; // for safety
+        }
+    }
+
+    /**
+     * Utility method for creating an array of remote references for
+     * local versions. The remote references are created using the
+     * remote adapter factory.
+     * <p>
+     * A <code>null</code> input is treated as an empty iterator.
+     *
+     * @param iterator local version iterator
+     * @return remote version array
+     * @throws RemoteException on RMI errors
+     */
+    protected RemoteVersion[] getRemoteVersionArray(VersionIterator iterator)
+            throws RemoteException {
+        if (iterator != null) {
+            RemoteVersion[] remotes = new RemoteVersion[(int) iterator.getSize()];
+            for (int i = 0; iterator.hasNext(); i++) {
+                remotes[i] = factory.getRemoteVersion(iterator.nextVersion());
+            }
+            return remotes;
+        } else {
+            return new RemoteVersion[0]; // for safety
+        }
+    }
+
+    /**
+     * Utility method for creating an array of remote references for

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS65 INS65 INS65 INS65 INS43 INS85 INS5 INS42 INS42 INS25 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS42 INS25 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS62 INS8 INS25 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS85 INS27 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS8 INS68 INS42 INS43 INS41 INS62 INS8 INS8 INS42 INS42 INS33 INS60 INS24 INS41 INS41 INS42 INS33 INS60 INS24 INS41 INS41 INS42 INS69 INS42 INS32 INS42 INS43 INS41 INS41 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS3 INS5 INS59 INS58 INS32 INS37 INS8 INS42 INS3 INS43 INS42 INS42 INS11 INS42 INS32 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS5 INS34 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS42 INS42 INS21 INS5 INS34 INS42 INS43 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS43 INS85 INS42 INS5 INS11 INS42 INS34 INS7 INS43 INS85 INS42 INS43 INS42 INS43 INS85 INS2 INS32 INS42 INS43 INS85 INS39 INS32 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42