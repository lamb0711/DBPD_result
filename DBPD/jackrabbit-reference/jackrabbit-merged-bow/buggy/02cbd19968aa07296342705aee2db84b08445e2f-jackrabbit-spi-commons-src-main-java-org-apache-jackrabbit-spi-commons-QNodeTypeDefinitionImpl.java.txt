JCR-2105: JSR 283 NodeType Management (work in progress)
JCR-1483: Move common node type functionality to jackrabbit-spi-commons

NOTE: intermediate checkin to avoid additional conflicts with stefans work


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@774294 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.QValueFactory;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
+import org.apache.jackrabbit.spi.commons.value.ValueFormat;
+import javax.jcr.NamespaceException;
+import javax.jcr.RepositoryException;
+import javax.jcr.nodetype.NodeTypeDefinition;
+import javax.jcr.nodetype.PropertyDefinition;
+import javax.jcr.nodetype.NodeDefinition;
+     * Createa a new <code>QNodeTypeDefinitionImpl</code> from a JCR
+     * NodeType definition.
+     *
+     * @param def
+     * @param resolver
+     * @param qValueFactory
+     * @throws RepositoryException
+     */
+    public QNodeTypeDefinitionImpl(NodeTypeDefinition def,
+                                   NamePathResolver resolver,
+                                   QValueFactory qValueFactory) throws RepositoryException {
+        this(resolver.getQName(def.getName()),
+                getNames(def.getDeclaredSupertypeNames(), resolver), null, def.isMixin(),
+                def.isAbstract(), def.isQueryable(), def.hasOrderableChildNodes(),
+                resolver.getQName(def.getPrimaryItemName()),
+                createQPropertyDefinitions(def.getDeclaredPropertyDefinitions(), resolver, qValueFactory),
+                createQNodeDefinitions(def.getDeclaredChildNodeDefinitions(), resolver));
+    }
+
+    //------------------------------------------------< QNodeTypeDefinition >---
+    /**
+
+    private static Name[] getNames(String[] jcrNames, NamePathResolver resolver) throws NamespaceException, IllegalNameException {
+        Name[] names = new Name[jcrNames.length];
+        for (int i = 0; i < jcrNames.length; i++) {
+            names[i] = resolver.getQName(jcrNames[i]);
+        }
+        return names;
+    }
+
+    private static QPropertyDefinition[] createQPropertyDefinitions(PropertyDefinition[] pds,
+                                                                    NamePathResolver resolver,
+                                                                    QValueFactory qValueFactory) throws RepositoryException {
+        QPropertyDefinition[] declaredPropDefs = new QPropertyDefinition[pds.length];
+        for (int i = 0; i < pds.length; i++) {
+            PropertyDefinition propDef = pds[i];
+            Name name = resolver.getQName(propDef.getName());
+            Name declName = resolver.getQName(propDef.getDeclaringNodeType().getName());
+            QValue[] defVls = ValueFormat.getQValues(propDef.getDefaultValues(), resolver, qValueFactory);
+
+            declaredPropDefs[i] = new QPropertyDefinitionImpl(
+                    name, declName, propDef.isAutoCreated(), propDef.isMandatory(),
+                    propDef.getOnParentVersion(), propDef.isProtected(),
+                    defVls, propDef.isMultiple(),
+                    propDef.getRequiredType(), propDef.getValueConstraints(),
+                    getNames(propDef.getAvailableQueryOperators(), resolver),
+                    propDef.isFullTextSearchable(),
+                    propDef.isQueryOrderable());
+        }
+        return declaredPropDefs;
+    }
+
+    private static QNodeDefinition[] createQNodeDefinitions(NodeDefinition[] nds, NamePathResolver resolver) throws RepositoryException {
+        QNodeDefinition[] declaredNodeDefs = new QNodeDefinition[nds.length];
+        for (int i = 0; i < nds.length; i++) {
+            NodeDefinition nodeDef = nds[i];
+            Name name = resolver.getQName(nodeDef.getName());
+            Name declName = resolver.getQName(nodeDef.getDeclaringNodeType().getName());
+            Name defaultPrimaryType = resolver.getQName(nodeDef.getDefaultPrimaryTypeName());
+            Name[] requiredPrimaryTypes = getNames(nodeDef.getRequiredPrimaryTypeNames(), resolver);
+
+            declaredNodeDefs[i] = new QNodeDefinitionImpl(
+                    name, declName, nodeDef.isAutoCreated(), nodeDef.isMandatory(),
+                    nodeDef.getOnParentVersion(), nodeDef.isProtected(),
+                    defaultPrimaryType, requiredPrimaryTypes,
+                    nodeDef.allowsSameNameSiblings());
+        }
+        return declaredNodeDefs;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS5 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS5 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS17 INS43 INS85 INS5 INS42 INS43 INS42 INS42 INS42 INS60 INS24 INS41 INS43 INS85 INS5 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS24 INS41 INS43 INS85 INS5 INS42 INS43 INS42 INS42 INS60 INS24 INS41 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS33 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS43 INS85 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS85 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS85 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS60 INS60 INS21 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS60 INS60 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS5 INS40 INS42 INS34 INS43 INS59 INS43 INS59 INS43 INS59 INS5 INS59 INS7 INS42 INS5 INS40 INS42 INS34 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS5 INS59 INS7 INS43 INS85 INS2 INS32 INS43 INS85 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS2 INS14 INS43 INS85 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS2 INS14 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42