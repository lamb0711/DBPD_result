JCR-1169 Distribution of commons classes (adjust jackrabbit-core)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@590014 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.UnknownPrefixException;
-import org.apache.jackrabbit.name.IllegalNameException;
-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.NameResolver;
-import org.apache.jackrabbit.name.ParsingNameResolver;
-import org.apache.jackrabbit.name.PathResolver;
-import org.apache.jackrabbit.name.ParsingPathResolver;
+import org.apache.jackrabbit.conversion.IllegalNameException;
+import org.apache.jackrabbit.conversion.MalformedPathException;
+import org.apache.jackrabbit.conversion.NameResolver;
+import org.apache.jackrabbit.conversion.ParsingNameResolver;
+import org.apache.jackrabbit.conversion.PathResolver;
+import org.apache.jackrabbit.conversion.ParsingPathResolver;
+import org.apache.jackrabbit.name.NameFactoryImpl;
+import org.apache.jackrabbit.name.PathFactoryImpl;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.namespace.NamespaceResolver;
+import javax.jcr.NamespaceException;
-    private NamespaceResolver nsResolver;
-
-    /**
-     * The node type registry.
-     */
-    private NodeTypeRegistry ntReg;
+    private NameResolver resolver;
-        ntReg = context.getNodeTypeRegistry();
-        NameResolver nameResolver = new ParsingNameResolver(
+        NameResolver nameResolver = new ParsingNameResolver(NameFactoryImpl.getInstance(),
-        PathResolver pathResolver = new ParsingPathResolver(nameResolver);
+        PathResolver pathResolver = new ParsingPathResolver(PathFactoryImpl.getInstance(),
+                nameResolver);
-        nsResolver = new AdditionalNamespaceResolver(getNamespaces(config));
+        
+        NamespaceResolver nsResolver = new AdditionalNamespaceResolver(getNamespaces(config));
+        resolver = new ParsingNameResolver(NameFactoryImpl.getInstance(), nsResolver);
-        QName[] ntNames = ntReg.getRegisteredNodeTypes();
+        NodeTypeRegistry ntReg = context.getNodeTypeRegistry();
+        Name[] ntNames = ntReg.getRegisteredNodeTypes();
-                        configNode, nsResolver, ism, hmgr));
+                        configNode, resolver, ism, hmgr));
-                                        QName propName = NameFormat.parse(getTextContent(propertyNode), nsResolver);
-                                        String fieldName = NameFormat.format(propName, nsMappings);
+                                        Name propName = resolver.getQName(getTextContent(propertyNode));
+                                        String fieldName = nsMappings.translatePropertyName(propName);
-    public boolean isIndexed(NodeState state, QName propertyName) {
+    public boolean isIndexed(NodeState state, Name propertyName) {
-    public float getPropertyBoost(NodeState state, QName propertyName) {
+    public float getPropertyBoost(NodeState state, Name propertyName) {
-                                              QName propertyName) {
+                                              Name propertyName) {
-     * (the string representation ,JCR-style name, of the given <code>QName</code>
+     * (the string representation ,JCR-style name, of the given <code>Name</code>
-     * @param fieldName the string representation ,JCR-style name, of the given <code>QName</code>
+     * @param fieldName the string representation ,JCR-style name, of the given <code>Name</code>
-     * @throws UnknownPrefixException if the node type contains an unknown
+     * @throws NamespaceException if the node type contains an unknown
-            throws IllegalNameException, UnknownPrefixException {
+            throws IllegalNameException, NamespaceException {
-                QName propName = NameFormat.parse(getTextContent(n), nsResolver);
+                Name propName = resolver.getQName(getTextContent(n));
-     * @throws UnknownPrefixException if a name contains an unknown prefix.
+     * @throws NamespaceException if a name contains an unknown prefix.
-            throws MalformedPathException, IllegalNameException, UnknownPrefixException {
+            throws MalformedPathException, IllegalNameException, NamespaceException {
-        QName elementTest = null;
-        QName nameTest = null;
-        QName propertyName;
+        Name elementTest = null;
+        Name nameTest = null;
+        Name propertyName;
-                    nameTest = NameFormat.parse(ISO9075.decode(name), nsResolver);
+                    nameTest = resolver.getQName(ISO9075.decode(name));
-                elementTest = NameFormat.parse(ISO9075.decode(type), nsResolver);
+                elementTest = resolver.getQName(ISO9075.decode(type));
-                        nameTest = NameFormat.parse(ISO9075.decode(name), nsResolver);
+                        nameTest = resolver.getQName(ISO9075.decode(name));
-            propertyName = NameFormat.parse(ISO9075.decode(name), nsResolver);
+            propertyName = resolver.getQName(ISO9075.decode(name));
-        private final QName nodeTypeName;
+        private final Name nodeTypeName;
-         * Map of {@link PropertyConfig}. Key=QName of property.
+         * Map of {@link PropertyConfig}. Key=Name of property.
-         * @throws UnknownPrefixException if a name contains an unknown prefix.
+         * @throws NamespaceException if a name contains an unknown prefix.
-                throws MalformedPathException, IllegalNameException, UnknownPrefixException {
+                throws MalformedPathException, IllegalNameException, NamespaceException {
-        public QName getNodeTypeName() {
+        public Name getNodeTypeName() {
-        public boolean isIndexed(QName propertyName) {
+        public boolean isIndexed(Name propertyName) {
-        public float getBoost(QName propertyName) {
+        public float getBoost(Name propertyName) {
-        public boolean isIncludedInNodeScopeIndex(QName propertyName) {
+        public boolean isIncludedInNodeScopeIndex(Name propertyName) {
-         * @throws UnknownPrefixException if the node type contains an unknown
+         * @throws NamespaceException if the node type contains an unknown
-        private QName getNodeTypeName(Node config)
-                throws IllegalNameException, UnknownPrefixException {
+        private Name getNodeTypeName(Node config)
+                throws IllegalNameException, NamespaceException {
-            return NameFormat.parse(ntString, nsResolver);
+            return resolver.getQName(ntString);
-        private final QName elementTest;
+        private final Name elementTest;
-        private final QName nameTest;
+        private final Name nameTest;
-        private final QName propertyName;
+        private final Name propertyName;
-        PathExpression(int axis, QName elementTest, QName nameTest,
-                       QName propertyName, String propertyValue) {
+        PathExpression(int axis, Name elementTest, Name nameTest,
+                       Name propertyName, String propertyValue) {

MOV26 MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS43 UPD43 UPD43 INS42 UPD42 INS60 INS60 UPD43 UPD43 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 MOV43 INS59 MOV43 INS59 UPD5 UPD42 UPD42 UPD42 UPD66 UPD66 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 INS42 MOV14 INS42 INS14 INS42 MOV32 UPD43 UPD42 UPD42 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS32 INS43 INS32 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42