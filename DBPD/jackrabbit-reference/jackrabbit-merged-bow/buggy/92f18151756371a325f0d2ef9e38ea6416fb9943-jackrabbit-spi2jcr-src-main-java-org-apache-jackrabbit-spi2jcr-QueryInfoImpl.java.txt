JCR-2076: JSR 283: QOM and SQL2
- jcr2spi, spi2dav, spi2jcr implementation (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@789307 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.query.Query;
+import javax.jcr.query.qom.QueryObjectModel;
+import javax.jcr.query.qom.Source;
+import javax.jcr.query.qom.Join;
+import javax.jcr.query.qom.Selector;
+import java.util.List;
+import java.util.ArrayList;
+     * @param query         the JCR query.
-    public QueryInfoImpl(QueryResult result,
+    public QueryInfoImpl(Query query,
+                         QueryResult result,
-        // TODO
-        String[] sn = new String[0]; //result.getSelectorNames();
-        this.selectorNames = new Name[sn.length];
-        for (int i = 0; i < sn.length; i++) {
-            selectorNames[i] = resolver.getQName(sn[i]);
-        }
+        this.selectorNames = getSelectorNames(query, result, resolver);
+
+    private static Name[] getSelectorNames(Query query,
+                                           QueryResult result,
+                                           NamePathResolver resolver)
+            throws RepositoryException {
+        List<String> sn = new ArrayList<String>();
+        if (query instanceof QueryObjectModel) {
+            QueryObjectModel qom = (QueryObjectModel) query;
+            collectSelectorNames(qom.getSource(), sn);
+        } else {
+            // TODO
+            // sn.addAll(Arrays.asList(result.getSelectorNames()));
+        }
+        Name[] selectorNames = new Name[sn.size()];
+        for (int i = 0; i < sn.size(); i++) {
+            selectorNames[i] = resolver.getQName(sn.get(i));
+        }
+        return selectorNames;
+    }
+
+    private static void collectSelectorNames(Source source, List<String> sn) {
+        if (source instanceof Join) {
+            collectSelectorNames((Join) source, sn);
+        } else {
+            collectSelectorNames((Selector) source, sn);
+        }
+    }
+
+    private static void collectSelectorNames(Join join, List<String> sn) {
+        collectSelectorNames(join.getLeft(), sn);
+        collectSelectorNames(join.getRight(), sn);
+    }
+
+    private static void collectSelectorNames(Selector s, List<String> sn) {
+        sn.add(s.getSelectorName());
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS44 INS83 INS83 INS5 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS43 INS42 MOV21 INS43 INS85 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS24 INS41 INS43 INS42 INS74 INS42 INS25 INS43 INS42 INS74 INS42 INS21 INS21 INS43 INS42 INS74 INS42 INS21 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS62 INS8 INS8 MOV5 INS59 MOV58 INS27 MOV37 INS8 INS42 INS42 INS43 INS43 INS62 INS8 INS8 INS42 INS43 INS43 INS32 INS32 INS42 INS43 INS43 INS32 MOV22 INS43 MOV43 INS42 INS14 INS42 INS43 INS60 INS21 INS42 INS3 INS42 INS32 INS21 INS42 INS42 INS42 INS43 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS74 INS42 INS43 INS59 INS32 INS5 INS32 INS42 INS42 INS7 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV43 INS42 INS42 INS11 INS42 INS32 INS42 INS43 INS85 INS42 INS42 MOV2 INS32 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL2 DEL85 DEL5 DEL42 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL40 DEL3 DEL7 DEL21 DEL42 DEL40 DEL27 DEL8 DEL24