JCR-820: Add support for query result highlighting
- initial version

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@523251 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.lucene.document.Field;
+     * If set to <code>true</code> the fulltext field is stored and and a term
+     * vector is created with offset information.
+     * <p/>
+     * Default value is: <code>false</code>.
+     */
+    private boolean supportHighlighting = false;
+
+    /**
+     * The excerpt provider class. Implements {@link ExcerptProvider}.
+     */
+    private Class excerptProviderClass = DefaultXMLExcerpt.class;
+
+    /**
-        QueryHandler parentHandler = getContext().getParentHandler();
-        IndexReader parentReader = null;
-        if (parentHandler instanceof SearchIndex) {
-            parentReader = ((SearchIndex) parentHandler).index.getIndexReader();
-        }
-
-        IndexReader reader = index.getIndexReader();
-        if (parentReader != null) {
-            // todo FIXME not type safe
-            CachingMultiReader[] readers = {(CachingMultiReader) reader,
-                                            (CachingMultiReader) parentReader};
-            reader = new CombinedIndexReader(readers);
-        }
-
+        IndexReader reader = getIndexReader();
+     * Creates an excerpt provider for the given <code>query</code>.
+     *
+     * @param query the query.
+     * @return an excerpt provider for the given <code>query</code>.
+     * @throws IOException if the provider cannot be created.
+     */
+    public ExcerptProvider createExcerptProvider(Query query)
+            throws IOException {
+        ExcerptProvider ep;
+        try {
+            ep = (ExcerptProvider) excerptProviderClass.newInstance();
+        } catch (Exception e) {
+            IOException ex = new IOException();
+            ex.initCause(e);
+            throw ex;
+        }
+        ep.init(query, this);
+        return ep;
+    }
+
+    /**
+     * Returns an index reader for this search index. The caller of this method
+     * is responsible for closing the index reader when he is finished using
+     * it.
+     *
+     * @return an index reader for this search index.
+     * @throws IOException the index reader cannot be obtained.
+     */
+    public IndexReader getIndexReader() throws IOException {
+        QueryHandler parentHandler = getContext().getParentHandler();
+        IndexReader parentReader = null;
+        if (parentHandler instanceof SearchIndex) {
+            parentReader = ((SearchIndex) parentHandler).index.getIndexReader();
+        }
+
+        IndexReader reader = index.getIndexReader();
+        if (parentReader != null) {
+            // todo FIXME not type safe
+            CachingMultiReader[] readers = {(CachingMultiReader) reader,
+                                            (CachingMultiReader) parentReader};
+            reader = new CombinedIndexReader(readers);
+        }
+        return reader;
+    }
+
+    /**
-        return new NodeIndexer(node, getContext().getItemStateManager(),
-                nsMappings, extractor).createDoc();
+        NodeIndexer indexer = new NodeIndexer(node,
+                getContext().getItemStateManager(), nsMappings, extractor);
+        indexer.setSupportHighlighting(supportHighlighting);
+        return indexer.createDoc();
+    /**
+     * If set to <code>true</code> additional information is stored in the index
+     * to support highlighting using the rep:excerpt pseudo property.
+     *
+     * @param b <code>true</code> to enable highlighting support.
+     */
+    public void setSupportHighlighting(boolean b) {
+        supportHighlighting = b;
+    }
+
+    /**
+     * @return <code>true</code> if highlighting support is enabled.
+     */
+    public boolean getSupportHighlighting() {
+        return supportHighlighting;
+    }
+
+    /**
+     * Sets the class name for the {@link ExcerptProvider} that should be used
+     * for the rep:excerpt pseudo property in a query.
+     *
+     * @param className the name of a class that implements {@link
+     *                  ExcerptProvider}.
+     */
+    public void setExcerptProviderClass(String className) {
+        try {
+            Class clazz = Class.forName(className);
+            if (ExcerptProvider.class.isAssignableFrom(clazz)) {
+                excerptProviderClass = clazz;
+            } else {
+                log.warn("Invalid value for excerptProviderClass, {} does " +
+                        "not implement ExcerptProvider interface.", className);
+            }
+        } catch (ClassNotFoundException e) {
+            log.warn("Invalid value for excerptProviderClass, class {} not " +
+                    "found.", className);
+        }
+    }
+
+    /**
+     * @return the class name of the excerpt provider implementation.
+     */
+    public String getExcerptProviderClass() {
+        return excerptProviderClass.getName();
+    }
+
-}
+        }

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS59 INS29 INS83 INS43 INS59 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS43 MOV8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS65 INS42 INS9 INS65 INS42 INS42 INS57 MOV21 MOV60 INS60 MOV60 MOV60 MOV25 MOV41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS54 INS21 INS41 INS65 INS65 INS65 INS42 INS42 INS41 INS60 INS21 INS65 INS65 INS39 INS42 INS21 INS65 INS41 INS65 INS65 INS43 INS42 INS54 INS65 INS42 INS41 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS43 INS43 INS59 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS8 INS12 INS32 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS32 INS66 INS66 INS42 INS66 INS7 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS8 INS12 INS66 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS52 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS59 INS32 INS8 INS8 INS43 INS42 INS21 INS42 INS11 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS57 INS42 INS42 INS21 INS21 INS42 INS32 INS43 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS7 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS45 INS42 INS45 INS45