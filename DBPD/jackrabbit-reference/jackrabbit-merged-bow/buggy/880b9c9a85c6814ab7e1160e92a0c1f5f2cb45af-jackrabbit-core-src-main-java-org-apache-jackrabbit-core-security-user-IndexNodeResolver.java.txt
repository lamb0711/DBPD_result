JCR-2620 -  Authorizable#getProperty and #setProperty should deal with relativePath

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@987435 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.iterator.FilteringNodeIterator;
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.spi.Path;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.util.HashSet;
+    private static Logger log = LoggerFactory.getLogger(IndexNodeResolver.class);
+
+        query.setLimit(1);        
-     * Search nodes. Take the arguments as search criteria.
-     * The queried value has to be a string fragment of one of the Properties
-     * contained in the given set. And the node have to be of a requested nodetype
+     * Search authorizable nodes of the specified node type having the specified
+     * properties with the specified value.
+    @Override
+    public NodeIterator findNodes(Path relPath, String value, int authorizableType, boolean exact, long maxSize) throws RepositoryException {
+        Query query;
+        if (relPath.getLength() == 1) {
+            Set<Name> names = Collections.singleton(relPath.getNameElement().getName());
+            // search without nt-restriction in order not to limit the query to the
+            // authorizable nodes and filter non-matching results later.
+            query = buildQuery(value, names, null, exact, maxSize, getSearchRoot(authorizableType));
+        } else {
+            query = buildQuery(value, relPath, exact, maxSize, getSearchRoot(authorizableType));
+        }
+        return new ResultFilteringNodeIterator(query.execute().getNodes(), getAuthorizableTypePredicate(authorizableType, false));        
+    }
+
-    private Query buildQuery(Name nodeName, Name ntName)
-            throws RepositoryException {
+    private Query buildQuery(Name nodeName, Name ntName) throws RepositoryException {
+     * 
+     * @param value
+     * @param props
+     * @param ntName
+     * @param exact
+     * @param maxSize
+     * @return
+     * @throws RepositoryException
+     */
+    private Query buildQuery(String value, Set<Name> props, Name ntName,
+                             boolean exact, long maxSize) throws RepositoryException {
+        String searchRoot = getSearchRoot(ntName);
+        return buildQuery(value, props, ntName, exact, maxSize, searchRoot);
+    }
+
+    /**
-     * @param maxSize Currently ignored!
+     * @param maxSize
-                             boolean exact, long maxSize)
-            throws RepositoryException {
+                             boolean exact, long maxSize, String searchRoot) throws RepositoryException {
-        String searchRoot = getSearchRoot(ntName);
-        stmt.append("//element(*,");
-        stmt.append(getNamePathResolver().getJCRName(ntName));
+
+        if (ntName != null) {
+            stmt.append("//element(*,");
+            stmt.append(getNamePathResolver().getJCRName(ntName));
+        } else {
+            stmt.append("//element(*");
+        }
+    /**
+     *
+     * @param value
+     * @param relPath
+     * @param exact
+     * @param maxSize
+     * @return
+     * @throws RepositoryException
+     */
+    private Query buildQuery(String value, Path relPath, boolean exact, long maxSize, String searchRoot)
+            throws RepositoryException {
+        StringBuilder stmt = new StringBuilder("/jcr:root");
+        if (!"/".equals(searchRoot)) {
+            stmt.append(searchRoot);
+        }
+
+        String p = getNamePathResolver().getJCRPath(relPath.getAncestor(1));
+        stmt.append("//").append(p);
+
+        if (value != null) {
+            stmt.append("[");
+            Name prop = relPath.getNameElement().getName();
+            stmt.append((exact) ? "@" : "jcr:like(@");
+            String pName = getNamePathResolver().getJCRName(prop);
+            stmt.append(ISO9075.encode(pName));
+            if (exact) {
+                stmt.append("='");
+                stmt.append(value.replaceAll("'", "''"));
+                stmt.append("'");
+            } else {
+                stmt.append(",'%");
+                stmt.append(escapeForQuery(value));
+                stmt.append("%')");
+            }
+            stmt.append("]");
+        }
+        Query q = queryManager.createQuery(stmt.toString(), Query.XPATH);
+        q.setLimit(maxSize);
+        return q;
+    }
+
+
+    //--------------------------------------------------------------------------
+    /**
+     * 
+     */
+    private class ResultFilteringNodeIterator extends FilteringNodeIterator {
+
+        private Set<String> authorizableIDs;
+
+        private ResultFilteringNodeIterator(NodeIterator base, AuthorizableTypePredicate filter) {
+            super(base, filter);
+        }
+
+        @Override
+        protected Node seekNext() {
+            if (authorizableIDs == null) {
+                authorizableIDs = new HashSet<String>();
+            }
+            Node n = null;
+            while (n == null && base.hasNext()) {
+                NodeImpl nextRes = (NodeImpl) base.nextNode();
+                Node authorizableNode = ((AuthorizableTypePredicate) filter).getAuthorizableNode(nextRes);
+                try {
+                    if (authorizableNode != null && authorizableIDs.add(authorizableNode.getIdentifier())) {
+                        n = authorizableNode;
+                    }
+                } catch (RepositoryException e) {
+                    log.warn(e.getMessage());
+                }
+            }
+            return n;
+        }
+
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS55 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 MOV29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS42 INS43 INS23 INS31 INS31 INS42 INS42 INS32 INS21 INS42 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 MOV60 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS21 INS25 INS60 INS21 INS41 INS42 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS57 INS32 UPD66 UPD66 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS14 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS27 INS8 INS43 INS59 INS32 INS42 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS46 INS42 INS42 INS25 INS60 INS61 INS41 INS43 INS42 INS42 INS34 INS42 INS42 INS32 INS34 INS60 INS21 INS21 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 MOV21 MOV21 INS21 INS42 INS42 INS14 INS32 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS33 INS21 INS60 INS21 INS60 INS21 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS74 INS59 INS7 INS7 INS42 INS32 INS42 INS42 INS42 INS9 INS32 INS43 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS45 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS8 INS8 INS32 INS42 INS42 INS32 INS40 INS42 INS33 INS21 INS42 INS42 INS33 INS27 INS32 INS60 INS60 INS54 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS7 INS42 INS33 INS42 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS36 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS14 INS42 INS42 INS11 INS42 INS42 INS32 INS25 INS44 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS74 INS43 INS32 INS36 INS42 INS42 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS11 INS27 INS32 INS21 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS33 INS42 INS42 INS32 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66