JCR-353: Correct handling of login failures in TransientRepository.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@386114 13f79535-47bb-0310-9956-ffa450edef68

-public class TransientRepository implements Repository {
+public class TransientRepository implements Repository, SessionListener {
-    private static final String DEFAULT_REPOSITORY_XML =
-        "repository.xml";
+    private static final String DEFAULT_REPOSITORY_XML = "repository.xml";
+     * Starts the underlying repository.
+     *
+     * @throws RepositoryException if the repository cannot be started
+     */
+    private synchronized void startRepository() throws RepositoryException {
+        assert repository == null && sessions.isEmpty();
+        logger.debug("Initializing transient repository");
+        repository = factory.getRepository();
+        logger.info("Transient repository initialized");
+    }
+
+    /**
+     * Stops the underlying repository.
+     */
+    private synchronized void stopRepository() {
+        assert repository != null && sessions.isEmpty();
+        logger.debug("Shutting down transient repository");
+        repository.shutdown();
+        logger.info("Transient repository shut down");
+        repository = null;
+    }
+
+    //------------------------------------------------------------<Repository>
+
+    /**
-     * Removes the given session from the set of open sessions. If no open
-     * sessions remain, then the underlying repository instance is shut down.
-     *
-     * @param session closed session
-     */
-    private synchronized void removeSession(SessionImpl session) {
-        sessions.remove(session);
-        logger.info("Session closed");
-        if (sessions.isEmpty()) {
-            // FIXME: This is an ugly hack to avoid an infinite loop when
-            // RepositoryImpl.shutdown() repeatedly calls logout() on all
-            // remaining active sessions including the one that just emitted
-            // the loggedOut() message to us!
-            repository.loggedOut(session);
-
-            logger.debug("Shutting down transient repository");
-            repository.shutdown();
-            logger.info("Transient repository shut down");
-            repository = null;
-        }
-    }
-
-    /**
-        if (repository == null) {
-            logger.debug("Initializing transient repository");
-            repository = factory.getRepository();
-            logger.info("Transient repository initialized");
+        // Start the repository if this is the first login
+        if (sessions.isEmpty()) {
+            startRepository();
-        logger.debug("Opening a new session");
-        SessionImpl session = (SessionImpl)
-            repository.login(credentials, workspaceName);
-        sessions.add(session);
-        session.addListener(new SessionListener() {
-            
-            public void loggedOut(SessionImpl session) {
-                removeSession(session);
-            }
-            
-            public void loggingOut(SessionImpl session) {
-            }
-            
-        });
-        logger.info("Session opened");
+        try {
+            logger.debug("Opening a new session");
+            Session session = repository.login(credentials, workspaceName);
+            sessions.add(session);
+            ((SessionImpl) session).addListener(this);
+            logger.info("Session opened");
-        return session;
+            return session;
+        } finally {
+            // Stop the repository if the login failed
+            // and no other sessions are active
+            if (sessions.isEmpty()) {
+                stopRepository();
+            }
+        }
+    //-------------------------------------------------------<SessionListener>
+
+    /**
+     * Removes the given session from the set of open sessions. If no open
+     * sessions remain, then the underlying repository instance is shut down.
+     *
+     * @param session closed session
+     * @see SessionListener#loggedOut(SessionImpl)
+     */
+    public synchronized void loggedOut(SessionImpl session) {
+        assert sessions.contains(session);
+        sessions.remove(session);
+        logger.info("Session closed");
+        if (sessions.isEmpty()) {
+            // FIXME: This is an ugly hack to avoid an infinite loop when
+            // RepositoryImpl.shutdown() repeatedly calls logout() on all
+            // remaining active sessions including the one that just emitted
+            // the loggedOut() message to us!
+            repository.loggedOut(session);
+            
+            stopRepository();
+        }
+    }
+
+    /**
+     * Ignored. {@inheritDoc}
+     */
+    public void loggingOut(SessionImpl session) {
+    }
+

MOV31 MOV43 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS43 MOV8 INS29 INS83 INS83 INS39 INS42 MOV8 INS8 UPD83 UPD42 INS29 INS83 INS39 INS42 MOV44 INS8 INS65 INS65 INS42 INS6 INS65 INS6 INS25 INS54 INS65 INS6 INS65 INS66 INS42 INS66 INS27 INS66 INS27 INS32 INS8 MOV8 INS8 INS68 INS32 INS8 INS66 INS65 MOV27 INS32 INS27 INS32 INS42 INS42 INS21 INS25 INS42 INS42 INS69 INS42 INS42 INS42 MOV21 INS21 INS42 INS42 INS42 INS33 INS42 INS42 INS32 UPD43 INS32 INS8 INS43 INS32 INS42 UPD42 MOV32 INS36 INS52 INS42 INS42 INS21 INS42 INS42 INS11 INS32 MOV43 INS42 INS42 DEL25 DEL11 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL1 DEL14