JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.nodetype.NodeTypeConflictException;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.MalformedPathException;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.namespace.NamespaceResolver;
-                throw new PathNotFoundException(LogUtil.safeGetJCRPath(parentPath, session.getNamespaceResolver()));
+                throw new PathNotFoundException(LogUtil.safeGetJCRPath(parentPath, session.getPathResolver()));
-            throw new PathNotFoundException(LogUtil.safeGetJCRPath(parentPath, session.getNamespaceResolver()));
+            throw new PathNotFoundException(LogUtil.safeGetJCRPath(parentPath, session.getPathResolver()));
-                       log.debug("skipping protected node " + LogUtil.safeGetJCRPath(existing, session.getNamespaceResolver()));
+                       log.debug("skipping protected node " + LogUtil.safeGetJCRPath(existing, session.getPathResolver()));
-                       throw new ItemExistsException(LogUtil.safeGetJCRPath(existing, session.getNamespaceResolver()));
+                       throw new ItemExistsException(LogUtil.safeGetJCRPath(existing, session.getPathResolver()));
-                try {
-                    if (p1.equals(p0) || p1.isAncestorOf(p0)) {
-                        msg = "cannot remove ancestor node";
-                        log.debug(msg);
-                        throw new ConstraintViolationException(msg);
-                    }
-                } catch (MalformedPathException e) {
-                    // should never get here...
-                    msg = "internal error: failed to determine degree of relationship";
-                    log.error(msg, e);
-                    throw new RepositoryException(msg, e);
+                if (p1.equals(p0) || p1.isAncestorOf(p0)) {
+                    msg = "cannot remove ancestor node";
+                    log.debug(msg);
+                    throw new ConstraintViolationException(msg);
-                QName newName = new QName(nodeInfo.getName().getNamespaceURI(), nodeInfo.getName().getLocalName() + "_");
+                Name newName = session.getNameFactory().create(nodeInfo.getName().getNamespaceURI(), nodeInfo.getName().getLocalName() + "_");
-                    newName = new QName(newName.getNamespaceURI(), newName.getLocalName() + "_");
+                    newName = session.getNameFactory().create(newName.getNamespaceURI(), newName.getLocalName() + "_");
-            QName ntName = nodeInfo.getNodeTypeName();
+            Name ntName = nodeInfo.getNodeTypeName();
-    private void importProperty(PropInfo pi, NodeState parentState, NamespaceResolver nsResolver) throws RepositoryException, ConstraintViolationException {
-        QName propName = pi.getName();
+    private void importProperty(PropInfo pi, NodeState parentState, org.apache.jackrabbit.namespace.NamespaceResolver nsResolver) throws RepositoryException, ConstraintViolationException {
+        Name propName = pi.getName();
-                    log.debug("skipping protected property " + LogUtil.safeGetJCRPath(existing, session.getNamespaceResolver()));
+                    log.debug("skipping protected property " + LogUtil.safeGetJCRPath(existing, session.getPathResolver()));
-                    throw new ItemExistsException(LogUtil.safeGetJCRPath(existing, session.getNamespaceResolver()));
+                    throw new ItemExistsException(LogUtil.safeGetJCRPath(existing, session.getPathResolver()));
-    private QValue[] getPropertyValues(PropInfo propertyInfo, int targetType, boolean isMultiple, NamespaceResolver nsResolver) throws RepositoryException {
+    private QValue[] getPropertyValues(PropInfo propertyInfo, int targetType, boolean isMultiple, org.apache.jackrabbit.namespace.NamespaceResolver nsResolver) throws RepositoryException {
-    private QValue buildQValue(TextValue tv, int targetType, NamespaceResolver nsResolver) throws RepositoryException {
+    private QValue buildQValue(TextValue tv, int targetType, org.apache.jackrabbit.namespace.NamespaceResolver nsResolver) throws RepositoryException {
-                    iv = ValueFormat.getQValue(v, nsResolver, session.getQValueFactory());
+                    iv = ValueFormat.getQValue(v, session.getNamePathResolver(), session.getQValueFactory());
-        if (l.contains(QName.MIX_REFERENCEABLE)) {
+        if (l.contains(NameConstants.MIX_REFERENCEABLE)) {
-        QName[] ntNames = (QName[]) l.toArray(new QName[l.size()]);
+        Name[] ntNames = (Name[]) l.toArray(new Name[l.size()]);
-            if (!ent.includesNodeType(QName.MIX_REFERENCEABLE)) {
+            if (!ent.includesNodeType(NameConstants.MIX_REFERENCEABLE)) {

MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 UPD43 MOV25 INS40 UPD43 INS40 INS40 UPD5 UPD42 UPD40 UPD43 UPD43 UPD42 UPD5 UPD42 UPD43 UPD43 UPD42 UPD5 UPD40 UPD42 INS32 INS32 UPD43 UPD42 INS32 INS42 MOV32 MOV27 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS32 INS32 INS42 MOV32 MOV27 INS42 INS42 UPD42 UPD42 UPD42 UPD42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42