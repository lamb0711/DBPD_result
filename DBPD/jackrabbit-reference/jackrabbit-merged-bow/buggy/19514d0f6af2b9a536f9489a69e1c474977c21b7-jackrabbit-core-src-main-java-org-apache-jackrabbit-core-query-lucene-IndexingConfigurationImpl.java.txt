JCR-1079: Extend the IndexingConfiguration to allow configuration of reuseable analyzers

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@573526 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.lucene.analysis.Analyzer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+     * The logger instance for this class
+     */
+    private static final Logger log = LoggerFactory.getLogger(IndexingConfigurationImpl.class);
+    
+    /**
+     * The configured analyzers for indexing properties.
+     */
+    private Map analyzers = new HashMap();
+    
+    /**
-    public void init(Element config, QueryHandlerContext context) throws Exception {
+    public void init(Element config, QueryHandlerContext context, NamespaceMappings nsMappings) throws Exception {
+            } else if (configNode.getNodeName().equals("analyzers")) {
+                NodeList childNodes = configNode.getChildNodes();
+                for (int j = 0; j < childNodes.getLength(); j++) {
+                    Node analyzerNode = childNodes.item(j);
+                    if (analyzerNode.getNodeName().equals("analyzer")) {
+                        String analyzerClassName = analyzerNode.getAttributes().getNamedItem("class").getNodeValue();
+                        try {
+                        Class clazz = Class.forName(analyzerClassName);
+                            if(clazz == JackrabbitAnalyzer.class) {
+                                log.warn("Not allowed to configure " + JackrabbitAnalyzer.class.getName() +  " for a property. " +
+                                        "Using default analyzer for that property.");
+                            }
+                            else if(Analyzer.class.isAssignableFrom(clazz)){
+                                Analyzer analyzer = (Analyzer)clazz.newInstance();
+                                NodeList propertyChildNodes = analyzerNode.getChildNodes();
+                                for (int k = 0; k < propertyChildNodes.getLength(); k++) {
+                                    Node propertyNode = propertyChildNodes.item(k);
+                                    if (propertyNode.getNodeName().equals("property")) {
+                                        // get property name
+                                        QName propName = NameFormat.parse(getTextContent(propertyNode), nsResolver);
+                                        String fieldName = NameFormat.format(propName, nsMappings);
+                                        // set analyzer for the fulltext property fieldname
+                                        int idx = fieldName.indexOf(':');
+                                        fieldName = fieldName.substring(0, idx + 1)
+                                                    + FieldNames.FULLTEXT_PREFIX + fieldName.substring(idx + 1);;
+                                        Object prevAnalyzer = analyzers.put(fieldName, analyzer);
+                                        if(prevAnalyzer!=null){
+                                            log.warn("Property " + propName.getLocalName() + " has been configured for multiple analyzers. " +
+                                                    " Last configured analyzer is used");
+                                        }
+                                    }
+                                }
+                            } else {
+                                log.warn("org.apache.lucene.analysis.Analyzer is not a superclass of " 
+                                        + analyzerClassName +". Ignoring this configure analyzer" );
+                            }
+                        } catch (ClassNotFoundException e) {
+                            log.warn("Analyzer class not found: " + analyzerClassName, e);
+                        }
+                    }
+                }
+            
+    
+    /**
+     * Returns the analyzer configured for the property with this fieldName 
+     * (the string representation ,JCR-style name, of the given <code>QName</code>
+     * prefixed with <code>FieldNames.FULLTEXT_PREFIX</code>)), 
+     * and <code>null</code> if none is configured, or the configured analyzer
+     * cannot be found. If <code>null</code> is returned, the default Analyzer
+     * is used.
+     * 
+     * @param fieldName the string representation ,JCR-style name, of the given <code>QName</code>
+     * prefixed with <code>FieldNames.FULLTEXT_PREFIX</code>))
+     * @return the <code>analyzer</code> to use for indexing this property 
+     */
+    public Analyzer getPropertyAnalyzer(String fieldName) {
+        if(analyzers.containsKey(fieldName)){
+            return (Analyzer)analyzers.get(fieldName);
+        }
+        return null;
+    }
-}
+}

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS44 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS42 INS32 INS65 INS42 INS42 INS14 INS43 INS42 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS41 INS66 INS42 INS42 INS57 INS66 INS43 INS42 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS32 INS8 INS33 INS43 INS42 MOV60 INS25 INS42 INS42 INS42 INS41 INS42 MOV32 MOV8 INS25 INS11 MOV32 MOV8 INS25 INS43 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS60 INS24 INS42 INS42 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS32 INS42 INS45 INS60 INS54 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS32 INS60 INS25 INS44 INS8 INS32 INS42 INS43 INS59 INS27 INS8 INS25 INS43 INS42 INS21 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS57 INS21 INS32 INS8 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS57 INS42 INS42 INS60 INS60 INS24 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS43 INS43 INS59 INS43 INS59 INS58 INS27 INS37 MOV8 INS32 INS45 INS42 INS45 INS32 INS45 INS45 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS42 INS42 INS27 INS57 INS42 INS43 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS8 INS45 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS60 INS60 INS60 INS21 INS20 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS7 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS32 INS40 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS34 INS42 INS34 INS45 INS32 INS45 INS45 INS42 INS42 DEL25