JCR-2640: Internal repository context

Decouple SessionImpl from the details of workspace and data store handling in RepositoryImpl.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@948851 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.management.RepositoryManager;
+import org.apache.jackrabbit.core.data.GarbageCollector;
+import org.apache.jackrabbit.core.persistence.IterablePersistenceManager;
+            context.setWorkspaceManager(new WorkspaceManager(this));
+
+    /**
+     * Creates a data store garbage collector for this repository.
+     * <p>
+     * Note that you should use the {@link RepositoryManager} interface
+     * to access this functionality. This RepositoryImpl method may be
+     * removed in future Jackrabbit versions. 
+     */
+    public GarbageCollector createDataStoreGarbageCollector()
+            throws RepositoryException {
+        ArrayList<PersistenceManager> pmList = new ArrayList<PersistenceManager>();
+        InternalVersionManagerImpl vm = context.getInternalVersionManager();
+        PersistenceManager pm = vm.getPersistenceManager();
+        pmList.add(pm);
+        String[] wspNames = getWorkspaceNames();
+        Session[] sessions = new Session[wspNames.length];
+        for (int i = 0; i < wspNames.length; i++) {
+            String wspName = wspNames[i];
+            WorkspaceInfo wspInfo = getWorkspaceInfo(wspName);
+            // this will initialize the workspace if required
+            SessionImpl systemSession =
+                SystemSession.create(context, wspInfo.getConfig());
+            // mark this session as 'active' so the workspace does not get disposed
+            // by the workspace-janitor until the garbage collector is done
+            onSessionCreated(systemSession);
+            // the workspace could be disposed again, so re-initialize if required
+            // afterwards it will not be disposed because a session is registered
+            wspInfo.initialize();
+            sessions[i] = systemSession;
+            pm = wspInfo.getPersistenceManager();
+            pmList.add(pm);
+        }
+        IterablePersistenceManager[] ipmList =
+            new IterablePersistenceManager[pmList.size()];
+        for (int i = 0; i < pmList.size(); i++) {
+            pm = pmList.get(i);
+            if (!(pm instanceof IterablePersistenceManager)) {
+                ipmList = null;
+                break;
+            }
+            ipmList[i] = (IterablePersistenceManager) pm;
+        }
+        return new GarbageCollector(context.getDataStore(), ipmList, sessions);
+    }
+
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS83 INS43 INS42 INS43 INS8 INS65 INS42 INS42 INS60 INS60 INS60 INS21 INS60 INS60 INS24 INS60 INS24 INS41 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS74 INS59 INS43 INS59 INS43 INS59 INS32 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS14 INS21 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS32 INS42 INS21 INS25 INS21 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS7 INS7 INS32 INS42 INS5 INS32 INS42 INS34 INS42 INS42 INS7 INS38 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS43 INS85 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS32 INS36 INS21 INS10 INS2 INS11 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS62 INS7 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS33 INS42 INS42