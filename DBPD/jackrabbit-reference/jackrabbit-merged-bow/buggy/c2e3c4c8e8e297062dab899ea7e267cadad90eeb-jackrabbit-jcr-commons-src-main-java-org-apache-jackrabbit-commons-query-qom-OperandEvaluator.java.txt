JCR-3047 OperandEvaluator should be able to handle Nodes as well, not just Rows

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1157081 13f79535-47bb-0310-9956-ffa450edef68

+     * Evaluates the given operand in the context of the given node.
+     *
+     * @param operand operand to be evaluated
+     * @param node node
+     * @return values of the operand at the given node
+     * @throws RepositoryException if the operand can't be evaluated
+     */
+    public Value[] getValues(Operand operand, Node node)
+            throws RepositoryException {
+        if (operand instanceof StaticOperand) {
+            StaticOperand so = (StaticOperand) operand;
+            return new Value[] { getValue(so) };
+        }
+        if (operand instanceof FullTextSearchScore) {
+            final double defaultScore = 0.0;
+            return new Value[] { factory.createValue(defaultScore) };
+        }
+        if (operand instanceof NodeName) {
+            Value value = factory
+                    .createValue(node.getName(), PropertyType.NAME);
+            return new Value[] { value };
+        }
+        if (operand instanceof Length) {
+            return getLengthValues((Length) operand, node);
+        }
+        if (operand instanceof LowerCase) {
+            return getLowerCaseValues((LowerCase) operand, node);
+        }
+        if (operand instanceof UpperCase) {
+            return getUpperCaseValues((UpperCase) operand, node);
+        }
+        if (operand instanceof NodeLocalName) {
+            return getNodeLocalNameValues((NodeLocalName) operand, node);
+        }
+        if (operand instanceof PropertyValue) {
+            return getPropertyValues((PropertyValue) operand, node);
+        }
+        throw new UnsupportedRepositoryOperationException(
+                "Unknown operand type: " + operand);
+    }
+
+    /**
+     * Evaluates the operand and extracts the node property that is supposed to
+     * be used for evaluation.
+     * 
+     * Can be <code>null</code> if there is no possible value
+     * 
+     * @param operand
+     * @return the node's property name
+     */
+    public String getAffectedPropertyName(Operand operand) {
+        if (operand instanceof StaticOperand) {
+            return null;
+        }
+        if (operand instanceof FullTextSearchScore) {
+            return null;
+        }
+        if (operand instanceof NodeName) {
+            return null;
+        }
+        if (operand instanceof Length) {
+            return ((Length) operand).getPropertyValue().getPropertyName();
+        }
+        if (operand instanceof LowerCase) {
+            return getAffectedPropertyName(((LowerCase) operand).getOperand());
+        }
+        if (operand instanceof UpperCase) {
+            return getAffectedPropertyName(((UpperCase) operand).getOperand());
+        }
+        if (operand instanceof NodeLocalName) {
+            return null;
+        }
+        if (operand instanceof PropertyValue) {
+            return ((PropertyValue) operand).getPropertyName();
+        }
+        return null;
+    }
+
+    /**
+     * Returns the values of the given value length operand for the given node.
+     *
+     * @see #getProperty(PropertyValue, Node)
+     * @param operand value length operand
+     * @param node node
+     * @return values of the operand for the given node
+     * @throws RepositoryException if the operand can't be evaluated
+     */
+    private Value[] getLengthValues(Length operand, Node n)
+            throws RepositoryException {
+        Property property = getProperty(operand.getPropertyValue(), n);
+        if (property == null) {
+            return new Value[0];
+        }
+        if (property.isMultiple()) {
+            long[] lengths = property.getLengths();
+            Value[] values = new Value[lengths.length];
+            for (int i = 0; i < lengths.length; i++) {
+                values[i] = factory.createValue(lengths[i]);
+            }
+            return values;
+        }
+        long length = property.getLength();
+        return new Value[] { factory.createValue(length) };
+    }
+
+    /**
+     * Returns the values of the given lower case operand for the given node.
+     *
+     * @param operand lower case operand
+     * @param node node
+     * @return values of the operand for the given node
+     * @throws RepositoryException if the operand can't be evaluated
+     */
+    private Value[] getLowerCaseValues(LowerCase operand, Node node)
+            throws RepositoryException {
+        Value[] values = getValues(operand.getOperand(), node);
+        for (int i = 0; i < values.length; i++) {
+            String value = values[i].getString();
+            String lower = value.toLowerCase(locale);
+            if (!value.equals(lower)) {
+                values[i] = factory.createValue(lower);
+            }
+        }
+        return values;
+    }
+
+    /**
+     * Returns the values of the given upper case operand for the given node.
+     *
+     * @param operand upper case operand
+     * @param node node
+     * @return values of the operand for the given node
+     * @throws RepositoryException if the operand can't be evaluated
+     */
+    private Value[] getUpperCaseValues(UpperCase operand, Node node)
+            throws RepositoryException {
+        Value[] values = getValues(operand.getOperand(), node);
+        for (int i = 0; i < values.length; i++) {
+            String value = values[i].getString();
+            String upper = value.toUpperCase(locale);
+            if (!value.equals(upper)) {
+                values[i] = factory.createValue(upper);
+            }
+        }
+        return values;
+    }
+
+    /**
-        String name = row.getNode(operand.getSelectorName()).getName();
+        return getNodeLocalNameValues(operand,
+                row.getNode(operand.getSelectorName()));
+    }
+
+    /**
+     * Returns the value of the given local name operand for the given node.
+     * 
+     * @param operand
+     *            local name operand
+     * @param node
+     *            node
+     * @return value of the operand for the given node
+     * @throws RepositoryException
+     */
+    private Value[] getNodeLocalNameValues(NodeLocalName operand, Node node)
+            throws RepositoryException {
+        String name = node.getName();
+    private Value[] getPropertyValues(PropertyValue operand, Node node)
+            throws RepositoryException {
+        Property property = getProperty(operand, node);
+        if (property == null) {
+            return new Value[0];
+        } else if (property.isMultiple()) {
+            return property.getValues();
+        } else {
+            return new Value[] { property.getValue() };
+        }
+    }
+
-        Node node = row.getNode(operand.getSelectorName());
-        if (node != null) {
-            try {
-                return node.getProperty(operand.getPropertyName());
-            } catch (PathNotFoundException e) {
-                return null;
-            }
-        } else {
+        return getProperty(operand, row.getNode(operand.getSelectorName()));
+    }
+
+    /**
+     * Returns the identified property from the given node.
+     * 
+     * Can return <code>null</code> is the property doesn't exist or it is not
+     * accessible.
+     * 
+     * @param operand
+     * @param node
+     * @return identified property
+     * @throws RepositoryException
+     */
+    private Property getProperty(PropertyValue operand, Node node)
+            throws RepositoryException {
+        if (node == null) {
+            return null;
+        }
+        try {
+            return node.getProperty(operand.getPropertyName());
+        } catch (PathNotFoundException e) {
-

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS44 INS43 INS8 MOV29 INS83 INS5 INS42 INS44 MOV44 INS43 INS8 INS29 INS44 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 MOV8 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS43 INS42 INS42 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS53 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 MOV43 INS42 INS42 INS60 INS25 INS25 INS60 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS24 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS24 INS41 INS43 INS85 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS62 INS8 INS62 INS8 INS62 INS8 INS62 INS8 INS62 INS8 INS62 INS8 INS62 INS8 INS62 INS8 INS14 INS66 INS66 INS66 INS42 INS66 INS42 INS62 INS8 INS62 INS8 INS62 INS8 INS62 INS8 INS62 INS8 INS62 INS8 INS62 MOV8 INS62 INS8 INS33 INS66 INS68 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS8 INS39 INS59 INS3 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS25 MOV32 MOV32 INS66 INS66 INS66 INS42 INS42 INS66 INS42 INS42 INS42 INS27 INS8 INS42 INS43 INS60 INS41 INS42 INS43 INS60 INS41 INS42 INS43 INS60 INS41 INS42 INS43 INS41 INS42 INS43 INS41 INS42 INS43 INS41 INS42 INS43 INS41 INS42 INS43 INS41 INS43 INS27 INS42 INS43 INS41 INS42 INS43 INS41 INS42 INS43 INS41 INS42 INS43 INS41 INS42 INS43 INS41 INS42 INS43 INS41 INS42 INS43 INS42 INS43 INS41 INS42 INS69 INS69 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS60 INS60 INS24 INS41 INS42 INS32 INS5 INS4 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS32 INS8 INS8 UPD42 INS42 INS42 INS33 INS41 INS42 INS43 INS59 INS3 INS42 INS83 INS39 INS59 INS3 INS42 INS43 INS59 INS3 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS3 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS43 INS85 INS32 INS42 INS42 INS32 INS42 INS42 INS34 MOV43 INS59 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS41 INS41 INS33 INS42 INS42 INS11 INS5 INS4 INS42 INS34 INS5 INS4 INS42 INS42 INS32 INS5 INS4 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS36 INS42 INS42 INS42 INS42 INS42 INS5 INS34 INS39 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS5 INS34 INS32 INS3 INS43 INS42 INS43 INS85 INS32 INS43 INS85 INS32 INS42 INS42 INS32 INS40 INS43 INS85 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS11 INS43 INS85 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS85 INS42 INS42 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS11 INS11 INS43 INS42 INS42 INS43 INS85 INS2 INS32 INS42 INS42 INS2 INS32 INS42 INS42 INS2 INS32 INS42 INS43 INS85 INS32 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25