- adding more standard implementation for cnd writer that allows write(NodeTypeDef) calls.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@383856 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.QName;
-import javax.jcr.NamespaceException;
+import javax.jcr.NamespaceException;
+import java.io.StringWriter;
-import java.util.*;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Iterator;
-     * The list of NodeTypeDefs to write
-     */
-    private final List nodeTypeDefList;
-
-    /**
-    private final Writer out;
+    private Writer out;
-     * The namespaces to be written out.
+     * special writer used for namespaces
-    private final Map namespaceMap = new HashMap();
+    private Writer nsWriter;
+     * namespaces(prefixes) that are used
+     */
+    private HashSet usedNamespaces = new HashSet();
+
+    /**
+     * Creates a new nodetype writer
+     *
+     * @param out the underlying writer
+     * @param r the namespace resolver
+     */
+    public CompactNodeTypeDefWriter(Writer out, NamespaceResolver r) {
+        this(out, r, false);
+    }
+
+    /**
+     * Creates a new nodetype writer
+     *
+     * @param out the underlaying writer
+     * @param r the naespace resolver
+     * @param includeNS if <code>true</code> all used namespace decl. are also
+     *        written.
+     */
+    public CompactNodeTypeDefWriter(Writer out, NamespaceResolver r, boolean includeNS) {
+        this.resolver = r;
+        if (includeNS) {
+            this.out = new StringWriter();
+            this.nsWriter = out;
+        } else {
+            this.out = out;
+            this.nsWriter = null;
+        }
+    }
+
+    /**
+     * Writes the given list of NodeTypeDefs to the output writer including the
+     * used namespaces.
-     * @param w
-     */
-    public CompactNodeTypeDefWriter(List l, NamespaceResolver r, Writer w) throws NamespaceException {
-        nodeTypeDefList = l;
-        out = w;
-        resolver = r;
-        buildNamespaceMap();
-    }
-
-    /**
-     *
+     * @param out
-    public void write() throws IOException, NamespaceException {
-        for (Iterator i = namespaceMap.entrySet().iterator(); i.hasNext();){
-            Map.Entry e = (Map.Entry)i.next();
-            String prefix = (String)e.getKey();
-            String uri = (String)e.getValue();
-            out.write("<");
-            out.write(prefix);
-            out.write(" = \"");
-            out.write(uri);
-            out.write("\">\n");
+    public static void write(List l, NamespaceResolver r, Writer out)
+            throws IOException {
+        CompactNodeTypeDefWriter w = new CompactNodeTypeDefWriter(out, r, true);
+        Iterator iter = l.iterator();
+        while (iter.hasNext()) {
+            NodeTypeDef def = (NodeTypeDef) iter.next();
+            w.write(def);
-        for (Iterator i = nodeTypeDefList.iterator(); i.hasNext();){
-            NodeTypeDef ntd = (NodeTypeDef)i.next();
-            writeName(ntd);
-            writeSupertypes(ntd);
-            writeOptions(ntd);
-            writePropDefs(ntd);
-            writeChildNodeDefs(ntd);
-        }
+        w.close();
-     * closes this writer but not the underlying stream
+     * Write one NodeTypeDef to this writer
+     *
+     * @param d
+     * @throws IOException
+     */
+    public void write(NodeTypeDef d) throws IOException {
+        writeName(d);
+        writeSupertypes(d);
+        writeOptions(d);
+        writePropDefs(d);
+        writeNodeDefs(d);
+        out.write("\n\n");
+    }
+
+    /**
+     * Flushes all pending write operations and Closes this writer. please note,
+     * that the underlying writer remains open.
+        if (nsWriter != null) {
+            nsWriter.write("\n");
+            out.close();
+            nsWriter.write(((StringWriter) out).getBuffer().toString());
+            out = nsWriter;
+            nsWriter = null;
+        }
+        out = null;
-     * buildNamespaceMap
+     * write name
-    private void buildNamespaceMap() throws NamespaceException {
-        for (Iterator i = nodeTypeDefList.iterator(); i.hasNext();){
-            NodeTypeDef ntd = (NodeTypeDef)i.next();
-            addNamespace(ntd.getName());
-            addNamespace(ntd.getSupertypes());
-            PropDef[] pda = ntd.getPropertyDefs();
-            for (int j = 0; j < pda.length; j++){
-                PropDef pd = pda[j];
-                addNamespace(pd.getName());
-            }
-
-            NodeDef[] nda = ntd.getChildNodeDefs();
-            for (int j = 0; j < nda.length; j++){
-                NodeDef nd = nda[j];
-                addNamespace(nd.getName());
-                addNamespace(nd.getRequiredPrimaryTypes());
-                addNamespace(nd.getDefaultPrimaryType());
-            }
-        }
-    }
-
-    private void addNamespace(QName qn) throws NamespaceException {
-        String uri = qn.getNamespaceURI();
-        String prefix = resolver.getPrefix(uri);
-        namespaceMap.put(prefix, uri);
-    }
-
-    private void addNamespace(QName[] qna) throws NamespaceException {
-        for(int i = 0; i < qna.length; i++){
-            QName qn = qna[i];
-            addNamespace(qn);
-        }
-    }
-
-    /**
-     * writeName
-     */
-    private void writeName(NodeTypeDef ntd) throws IOException, NamespaceException {
+    private void writeName(NodeTypeDef ntd) throws IOException {
-     * writeSupertypes
+     * write supertypes
-    private void writeSupertypes(NodeTypeDef ntd) throws IOException, NamespaceException {
+    private void writeSupertypes(NodeTypeDef ntd) throws IOException {
-                delim = ", ";
+                delim=", ";
-     * writeOptions
+     * write options
-     * writePropDefs
+     * write prop defs
-    private void writePropDefs(NodeTypeDef ntd) throws IOException, NamespaceException {
+    private void writePropDefs(NodeTypeDef ntd) throws IOException {
-     * writeNodeDefs
+     * write node defs
-    private void writeChildNodeDefs(NodeTypeDef ntd) throws IOException, NamespaceException {
+    private void writeNodeDefs(NodeTypeDef ntd) throws IOException {
-     * writePropDef
+     * write prop def
-    private void writePropDef(NodeTypeDef ntd, PropDef pd) throws IOException, NamespaceException {
+    private void writePropDef(NodeTypeDef ntd, PropDef pd) throws IOException {
-     * writeDefaultValues
+     * write default values
-     * writeValueConstraints
+     * write value constraints
-        out.write(" < '");
+        out.write("\n" + INDENT + INDENT + "< '");
-     * writeNodeDef
+     * write node def
-    private void writeNodeDef(NodeTypeDef ntd, NodeDef nd) throws IOException, NamespaceException {
+    private void writeNodeDef(NodeTypeDef ntd, NodeDef nd) throws IOException {
-    private void writeItemDefName(QName name) throws IOException, NamespaceException {
+    /**
+     * Write item def name
+     * @param name
+     * @throws IOException
+     */
+    private void writeItemDefName(QName name) throws IOException {
-     * putRequiredTypes
+     * write required types
-    private void writeRequiredTypes(QName[] reqTypes) throws IOException, NamespaceException {
+    private void writeRequiredTypes(QName[] reqTypes) throws IOException {
-     * putDefaultType
+     * write default types
-    private void writeDefaultType(QName defType) throws IOException, NamespaceException {
+    private void writeDefaultType(QName defType) throws IOException {
-    private String resolve(QName qname) throws NamespaceException {
+    private String resolve(QName qname) throws IOException {
-        String prefix = resolver.getPrefix(qname.getNamespaceURI());
-        if (prefix != null && !prefix.equals(QName.NS_EMPTY_PREFIX)) {
-            prefix += ":";
+        try {
+            String prefix = resolver.getPrefix(qname.getNamespaceURI());
+            if (prefix != null && !prefix.equals(QName.NS_EMPTY_PREFIX)) {
+                // check for writing namespaces
+                if (nsWriter != null) {
+                    if (!usedNamespaces.contains(prefix)) {
+                        usedNamespaces.add(prefix);
+                        nsWriter.write('<');
+                        nsWriter.write(prefix);
+                        nsWriter.write("='");
+                        nsWriter.write(escape(qname.getNamespaceURI()));
+                        nsWriter.write("'>\n");
+                    }
+                }
+                prefix += ":";
+            }
+            return prefix + qname.getLocalName();
+        } catch (NamespaceException e) {
+            return qname.toString();
-        return prefix + qname.getLocalName();

MOV26 MOV26 MOV26 INS26 INS26 INS26 MOV23 INS40 INS40 UPD40 INS40 INS31 INS31 INS31 INS31 UPD43 UPD43 INS29 MOV83 MOV42 MOV44 INS44 INS8 INS29 MOV83 UPD42 MOV42 INS44 INS44 INS44 INS8 MOV29 INS83 INS83 INS39 INS42 MOV44 MOV44 INS44 INS43 INS8 MOV29 UPD83 INS42 INS44 MOV43 INS8 INS29 UPD83 MOV83 MOV39 INS42 MOV43 INS8 UPD42 INS29 INS43 UPD42 UPD42 UPD42 UPD42 INS65 INS65 INS65 UPD42 INS43 INS42 INS17 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS21 INS25 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS61 MOV21 INS65 INS65 MOV43 INS42 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS65 MOV65 INS25 MOV21 MOV21 INS65 INS65 INS65 INS42 INS54 UPD66 UPD66 UPD43 INS66 INS42 INS66 INS42 INS66 UPD42 MOV42 INS42 INS42 INS9 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 MOV42 UPD42 MOV42 INS7 INS42 INS8 INS8 INS66 INS66 UPD42 INS42 INS42 INS43 INS59 MOV43 INS59 INS32 INS8 INS66 INS42 INS32 INS66 INS66 INS27 INS8 INS7 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS42 INS42 UPD66 UPD66 INS8 INS12 UPD42 INS22 INS42 INS21 INS21 MOV21 INS21 INS42 INS42 INS14 UPD42 MOV42 MOV32 UPD42 MOV42 MOV42 MOV60 MOV21 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS33 INS21 MOV21 INS21 INS21 INS21 INS42 INS33 INS27 MOV60 INS25 MOV41 INS44 INS8 INS52 INS42 INS7 INS7 INS7 INS7 INS43 INS42 INS42 INS9 UPD42 MOV43 INS32 INS32 INS7 INS7 INS45 INS42 INS42 INS45 MOV27 INS8 MOV43 INS42 INS41 INS22 INS14 INS22 INS42 INS22 INS42 INS22 INS33 INS42 UPD42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS25 MOV21 INS32 INS52 INS42 INS43 INS52 INS42 INS52 INS42 INS52 INS42 MOV43 INS32 INS42 INS27 INS8 INS42 INS42 UPD42 MOV42 UPD42 INS36 INS42 INS42 INS33 MOV25 INS11 INS38 INS43 INS42 INS32 INS21 INS21 INS21 INS21 INS21 INS21 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 DEL83 DEL83 DEL83 DEL42 DEL42 DEL45 DEL32 DEL43 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL31 DEL39 DEL42 DEL43 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL24 DEL59 DEL58 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL8 DEL24 DEL8 DEL24 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL43 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL8 DEL24 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL45 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43