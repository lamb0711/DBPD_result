JCR-2076: JSR 283: Joins
- orderings (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@782644 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.query.qom.OrderingImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.QOMTreeVisitor;
+import org.apache.jackrabbit.spi.commons.query.qom.DefaultTraversingQOMTreeVisitor;
+import org.apache.jackrabbit.spi.commons.query.qom.LengthImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.LowerCaseImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.UpperCaseImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.FullTextSearchScoreImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.NodeLocalNameImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.NodeNameImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.PropertyValueImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.DynamicOperandImpl;
-                    new Integer(getIndexFormatVersion().getVersion()));
+                    getIndexFormatVersion().getVersion());
-     * @param orderProps      name of the properties for sort order.
-     * @param orderSpecs      the order specs for the sort order properties.
-     *                        <code>true</code> indicates ascending order,
-     *                        <code>false</code> indicates descending.
+     * @param orderings       the order specs for the sort order.
-                                             Path[] orderProps,
-                                             boolean[] orderSpecs,
+                                             OrderingImpl[] orderings,
-        Sort sort = new Sort(createSortFields(orderProps, orderSpecs));
+        Sort sort = new Sort(createSortFields(orderings));
+     * Creates sort fields for the ordering specifications.
+     *
+     * @param orderings the ordering specifications.
+     * @return the sort fields.
+     */
+    protected SortField[] createSortFields(OrderingImpl[] orderings) {
+        List<SortField> sortFields = new ArrayList<SortField>();
+        for (final OrderingImpl ordering : orderings) {
+            QOMTreeVisitor visitor = new DefaultTraversingQOMTreeVisitor() {
+
+                public Object visit(LengthImpl node, Object data) throws Exception {
+                    PropertyValueImpl propValue = (PropertyValueImpl) node.getPropertyValue();
+                    return new SortField(propValue.getPropertyQName().toString(),
+                            new LengthSortComparator(),
+                            !ordering.isAscending());
+                }
+
+                public Object visit(LowerCaseImpl node, Object data)
+                        throws Exception {
+                    SortField sf = (SortField) super.visit(node, data);
+                    return new SortField(sf.getField(),
+                            new LowerCaseSortComparator(sf.getFactory()),
+                            sf.getReverse());
+                }
+
+                public Object visit(UpperCaseImpl node, Object data)
+                        throws Exception {
+                    SortField sf = (SortField) super.visit(node, data);
+                    return new SortField(sf.getField(),
+                            new UpperCaseSortComparator(sf.getFactory()),
+                            sf.getReverse());
+                }
+
+                public Object visit(FullTextSearchScoreImpl node, Object data)
+                        throws Exception {
+                    // TODO: selector ignored
+                    return new SortField(null, SortField.SCORE,
+                            ordering.isAscending());
+                }
+
+                public Object visit(NodeLocalNameImpl node, Object data) throws Exception {
+                    return new SortField(FieldNames.LOCAL_NAME,
+                           SortField.STRING, !ordering.isAscending());
+                }
+
+                public Object visit(NodeNameImpl node, Object data) throws Exception {
+                    return new SortField(FieldNames.LABEL,
+                           SortField.STRING, !ordering.isAscending());
+                }
+
+                public Object visit(PropertyValueImpl node, Object data)
+                        throws Exception {
+                    return new SortField(node.getPropertyQName().toString(),
+                            scs, !ordering.isAscending());
+                }
+
+                public Object visit(OrderingImpl node, Object data)
+                        throws Exception {
+                    return ((DynamicOperandImpl) node.getOperand()).accept(this, data);
+                }
+            };
+            try {
+                sortFields.add((SortField) ordering.accept(visitor, null));
+            } catch (Exception e) {
+                // TODO
+            }
+        }
+        return sortFields.toArray(new SortField[sortFields.size()]);
+    }
+
+    /**
-                for (int i = 0; i < aggregateRules.length; i++) {
+                for (AggregateRule aggregateRule : aggregateRules) {
-                    NodeState[] aggregates = aggregateRules[i].getAggregatedNodeStates(state);
+                    NodeState[] aggregates = aggregateRule.getAggregatedNodeStates(state);
-                        for (int j = 0; j < aggregates.length; j++) {
-                            Document aDoc = createDocument(aggregates[j],
-                                    getNamespaceMappings(),
-                                    index.getIndexFormatVersion());
+                        for (NodeState aggregate : aggregates) {
+                            Document aDoc = createDocument(aggregate, getNamespaceMappings(), index.getIndexFormatVersion());
-                                for (int k = 0; k < fulltextFields.length; k++) {
-                                    doc.add(fulltextFields[k]);
+                                for (Fieldable fulltextField : fulltextFields) {
+                                    doc.add(fulltextField);
-                                doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID,
-                                        aggregates[j].getNodeId().getUUID().toString(),
-                                        Field.Store.NO,
-                                        Field.Index.NOT_ANALYZED_NO_NORMS));
+                                doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID, aggregate.getNodeId().getUUID().toString(), Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
-                    PropertyState[] propStates = aggregateRules[i].getAggregatedPropertyStates(state);
+                    PropertyState[] propStates = aggregateRule.getAggregatedPropertyStates(state);
-                        for (int j = 0; j < propStates.length; j++) {
-                            PropertyState propState = propStates[j];
-                            String namePrefix = FieldNames.createNamedValue(
-                                    getNamespaceMappings().translateName(propState.getName()), "");
+                        for (PropertyState propState : propStates) {
+                            String namePrefix = FieldNames.createNamedValue(getNamespaceMappings().translateName(propState.getName()), "");
-                            for (int k = 0; k < fields.length; k++) {
-                                Fieldable field = fields[k];
+                            for (Fieldable field : fields) {
-                                    doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID,
-                                            parent.getNodeId().getUUID().toString(),
-                                            Field.Store.NO,
-                                            Field.Index.NOT_ANALYZED_NO_NORMS));
+                                    doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID, parent.getNodeId().getUUID().toString(), Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
-                for (int i = 0; i < aggregateRules.length; i++) {
-                    NodeState root = aggregateRules[i].getAggregateRoot(state);
+                for (AggregateRule aggregateRule : aggregateRules) {
+                    NodeState root = aggregateRule.getAggregateRoot(state);
-            for (int i = 0; i < subReaders.length; i++) {
-                subReaders[i].release();
+            for (CachingMultiIndexReader subReader : subReaders) {
+                subReader.release();
-            for (int i = 0; i < subReaders.length; i++) {
-                hash = 31 * hash + subReaders[i].hashCode();
+            for (CachingMultiIndexReader subReader : subReaders) {
+                hash = 31 * hash + subReader.hashCode();
-            for (int i = 0; i < subReaders.length; i++) {
-                CachingMultiIndexReader subReader = subReaders[i];
+            for (CachingMultiIndexReader subReader : subReaders) {

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS5 INS42 INS44 INS8 UPD5 UPD42 INS65 INS65 INS65 INS43 INS85 INS5 INS42 INS60 INS70 INS41 UPD42 UPD66 UPD43 MOV43 INS66 INS42 INS66 INS66 INS42 INS43 INS85 INS74 INS59 INS44 INS42 INS8 INS32 INS70 INS70 INS70 UPD42 INS42 INS43 INS43 INS42 INS14 INS83 INS43 INS42 INS60 INS54 INS42 INS42 INS3 INS44 INS42 INS8 INS44 INS42 INS8 INS44 INS42 MOV8 MOV43 INS42 INS42 INS74 INS42 INS43 INS59 INS8 INS12 INS5 INS32 MOV43 INS42 MOV21 INS43 INS42 MOV21 INS43 INS42 MOV32 UPD42 INS43 INS43 INS42 INS42 INS14 INS21 INS44 INS8 INS43 INS85 INS42 INS42 INS70 INS70 INS42 INS42 INS42 INS42 INS43 INS1 INS32 INS43 INS42 INS42 INS44 INS42 MOV8 INS44 INS42 MOV8 INS42 INS42 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS11 INS42 INS43 INS42 INS43 INS42 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS33 INS70 INS70 INS42 INS42 INS43 INS59 INS14 INS42 INS42 INS43 INS59 INS14 INS42 INS42 INS43 INS59 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS44 INS42 INS8 INS42 INS44 INS42 MOV8 INS42 INS42 INS42 INS11 INS43 INS32 INS14 INS38 INS42 INS42 INS11 INS43 INS32 INS14 INS32 INS42 INS42 INS11 INS43 INS32 INS14 INS32 INS43 INS33 INS40 INS32 INS43 INS40 INS40 INS38 INS43 INS40 INS40 INS38 INS43 INS32 INS42 INS38 INS36 INS42 INS52 INS42 INS43 INS42 MOV60 MOV60 MOV25 MOV43 INS42 INS70 INS43 INS32 INS42 INS32 INS42 INS43 INS32 INS43 INS48 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS48 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS11 INS42 INS44 INS42 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS70 INS43 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 MOV43 INS42 MOV21 INS42 INS42 DEL42 DEL43 DEL14 DEL42 DEL66 DEL65 DEL66 DEL66 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24