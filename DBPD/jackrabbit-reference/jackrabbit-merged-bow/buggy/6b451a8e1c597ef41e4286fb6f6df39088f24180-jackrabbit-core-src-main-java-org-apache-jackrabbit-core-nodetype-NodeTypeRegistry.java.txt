JCR-1483: Move common node type functionality to jackrabbit-spi-commons
- replaced NodeTypeDef (jackrabbit-core) with QNodeTypeDefinition
- QNodeTypeDefinitionImpl is not immutable, hence no cloning needed anymore
- introduced QNodeTypeDefinitionBuilder
- moved constructors of Q*DefinitionImpl classes in spi2jcr to spi-commons
- fixed a bug in RepositoryServiceImpl in spi2jcr

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816551 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import java.util.ArrayList;
+import org.apache.jackrabbit.spi.QNodeTypeDefinition;
+import org.apache.jackrabbit.spi.commons.QNodeTypeDefinitionImpl;
-    private final Map<Name, NodeTypeDef> registeredNTDefs;
+    private final Map<Name, QNodeTypeDefinition> registeredNTDefs;
-        NodeTypeRegistry ntMgr = new NodeTypeRegistry(nsReg, ntStore);
-        return ntMgr;
+        return new NodeTypeRegistry(nsReg, ntStore);
-    public synchronized EffectiveNodeType registerNodeType(NodeTypeDef ntd)
+    public synchronized EffectiveNodeType registerNodeType(QNodeTypeDefinition ntd)
-            Set<NodeTypeDef> ntDefs = new HashSet<NodeTypeDef>();
+            Set<QNodeTypeDefinition> ntDefs = new HashSet<QNodeTypeDefinition>();
-     * Same as <code>{@link #registerNodeType(NodeTypeDef)}</code> except
+     * Same as <code>{@link #registerNodeType(QNodeTypeDefinition)}</code> except
-     * @param ntDefs a collection of <code>NodeTypeDef<code> objects
+     * @param ntDefs a collection of <code>QNodeTypeDefinition<code> objects
-    public void registerNodeTypes(Collection<NodeTypeDef> ntDefs)
+    public void registerNodeTypes(Collection<QNodeTypeDefinition> ntDefs)
-     * @param ntDefs a collection of <code>NodeTypeDef<code> objects
+     * @param ntDefs a collection of <code>QNodeTypeDefinition<code> objects
-    private synchronized void registerNodeTypes(Collection<NodeTypeDef> ntDefs,
+    private synchronized void registerNodeTypes(Collection<QNodeTypeDefinition> ntDefs,
-        for (NodeTypeDef ntDef: ntDefs) {
+        for (QNodeTypeDefinition ntDef: ntDefs) {
-        for (NodeTypeDef ntDef : ntDefs) {
+        for (QNodeTypeDefinition ntDef : ntDefs) {
-    public EffectiveNodeType reregisterNodeType(NodeTypeDef ntd)
+    public EffectiveNodeType reregisterNodeType(QNodeTypeDefinition ntd)
-     * Internal implementation of {@link #reregisterNodeType(NodeTypeDef)}.
+     * Internal implementation of {@link #reregisterNodeType(QNodeTypeDefinition)}.
-    private synchronized EffectiveNodeType reregisterNodeType(NodeTypeDef ntd,
+    private synchronized EffectiveNodeType reregisterNodeType(QNodeTypeDefinition ntd,
-        checkNtBaseSubtyping(ntd, registeredNTDefs);
+        ntd = checkNtBaseSubtyping(ntd, registeredNTDefs);
-        NodeTypeDef ntdOld = registeredNTDefs.get(name);
+        QNodeTypeDefinition ntdOld = registeredNTDefs.get(name);
-        for (NodeTypeDef ntd : registeredNTDefs.values()) {
+        for (QNodeTypeDefinition ntd : registeredNTDefs.values()) {
-    public NodeTypeDef getNodeTypeDef(Name nodeTypeName)
+    public QNodeTypeDefinition getNodeTypeDef(Name nodeTypeName)
-        NodeTypeDef def = registeredNTDefs.get(nodeTypeName);
+        QNodeTypeDefinition def = registeredNTDefs.get(nodeTypeName);
-        // return clone to make sure nobody messes around with the 'live' definition
-        return (NodeTypeDef) def.clone();
+        return def;
-        for (NodeTypeDef ntd : registeredNTDefs.values()) {
+        for (QNodeTypeDefinition ntd : registeredNTDefs.values()) {
-    public void externalRegistered(Collection ntDefs)
+    public void externalRegistered(Collection<QNodeTypeDefinition> ntDefs)
-    public void externalReregistered(NodeTypeDef ntDef)
+    public void externalReregistered(QNodeTypeDefinition ntDef)
-    public void externalUnregistered(Collection ntNames)
+    public void externalUnregistered(Collection<Name> ntNames)
-    protected void checkForConflictingContent(NodeTypeDef ntd)
+    protected void checkForConflictingContent(QNodeTypeDefinition ntd)
-                                                  Map<Name, NodeTypeDef> ntdCache)
+                                                  Map<Name, QNodeTypeDefinition> ntdCache)
-        NodeTypeDef ntd = ntdCache.get(ntName);
+        QNodeTypeDefinition ntd = ntdCache.get(ntName);
-                                                  Map<Name, NodeTypeDef> ntdCache)
+                                                  Map<Name, QNodeTypeDefinition> ntdCache)
-                        NodeTypeDef ntd = ntdCache.get(aRemainder);
+                        QNodeTypeDefinition ntd = ntdCache.get(aRemainder);
-                                            Map<Name, NodeTypeDef> ntDefCache)
+                                            Map<Name, QNodeTypeDefinition> ntDefCache)
-                NodeTypeDef ntd = ntDefCache.get(nt);
+                QNodeTypeDefinition ntd = ntDefCache.get(nt);
-                                                 Map<Name, NodeTypeDef> ntDefCache)
+                                                 Map<Name, QNodeTypeDefinition> ntDefCache)
-    private EffectiveNodeType internalRegister(NodeTypeDef ntd)
+    private EffectiveNodeType internalRegister(QNodeTypeDefinition ntd)
-        checkNtBaseSubtyping(ntd, registeredNTDefs);
+        ntd = checkNtBaseSubtyping(ntd, registeredNTDefs);
-        // register clone of node type definition
-        ntd = (NodeTypeDef) ntd.clone();
-    private void internalRegister(Collection<NodeTypeDef> ntDefs)
+    private void internalRegister(Collection<QNodeTypeDefinition> ntDefs)
-    private void internalRegister(Collection<NodeTypeDef> ntDefs, boolean lenient)
+    private void internalRegister(Collection<QNodeTypeDefinition> ntDefs, boolean lenient)
+        // need a list/collection that can be modified
+        List<QNodeTypeDefinition> defs = new ArrayList<QNodeTypeDefinition>(ntDefs);
+
-        Map<Name, NodeTypeDef> tmpNTDefCache = new HashMap<Name, NodeTypeDef>(registeredNTDefs);
+        Map<Name, QNodeTypeDefinition> tmpNTDefCache = new HashMap<Name, QNodeTypeDefinition>(registeredNTDefs);
-        for (NodeTypeDef ntd : ntDefs) {
+        for (QNodeTypeDefinition ntd : defs) {
-        for (NodeTypeDef ntd : ntDefs) {
-            checkNtBaseSubtyping(ntd, tmpNTDefCache);
+        for (int i = 0; i < defs.size(); i++) {
+            QNodeTypeDefinition ntd = defs.get(i);
+            QNodeTypeDefinition mod = checkNtBaseSubtyping(ntd, tmpNTDefCache);
+            if (mod != ntd) {
+                // check fixed subtyping
+                // -> update cache and list of defs
+                tmpNTDefCache.put(mod.getName(), mod);
+                defs.set(i, mod);
+            }
-        for (NodeTypeDef ntd : ntDefs) {
+        for (QNodeTypeDefinition ntd : defs) {
-        for (NodeTypeDef ntd : ntDefs) {
-            // register clone of node type definition
-            ntd = (NodeTypeDef) ntd.clone();
+        for (QNodeTypeDefinition ntd : defs) {
-        NodeTypeDef ntd = registeredNTDefs.get(name);
+        QNodeTypeDefinition ntd = registeredNTDefs.get(name);
-     * @return <code>true</code> if the ntd was modified
+     * @return the node type definition that was given to check or a new
+     *          instance if it had to be fixed up.
-    private static boolean checkNtBaseSubtyping(NodeTypeDef ntd, Map<Name, NodeTypeDef> ntdCache) {
+    private static QNodeTypeDefinition checkNtBaseSubtyping(QNodeTypeDefinition ntd, Map<Name, QNodeTypeDefinition> ntdCache) {
-            return false;
+            return ntd;
-            return false;
+            return ntd;
-                    NodeTypeDef def = ntdCache.get(name);
+                    QNodeTypeDefinition def = ntdCache.get(name);
-                // in the NodeTypeDef directly
+                // in the QNodeTypeDefinition directly
-            ntd.setSupertypes(supertypes.toArray(new Name[supertypes.size()]));
+            ntd = new QNodeTypeDefinitionImpl(ntd.getName(),
+                    supertypes.toArray(new Name[supertypes.size()]),
+                    ntd.getSupportedMixinTypes(), ntd.isMixin(),
+                    ntd.isAbstract(), ntd.isQueryable(),
+                    ntd.hasOrderableChildNodes(), ntd.getPrimaryItemName(),
+                    ntd.getPropertyDefs(), ntd.getChildNodeDefs());
-        return modified;
+        return ntd;
-     * @return an effective node type representation of the specified <code>NodeTypeDef</code>
+     * @return an effective node type representation of the specified <code>QNodeTypeDefinition</code>
-    private static EffectiveNodeType validateNodeTypeDef(NodeTypeDef ntd,
+    private static EffectiveNodeType validateNodeTypeDef(QNodeTypeDefinition ntd,
-                                                         Map<Name, NodeTypeDef> ntdCache,
+                                                         Map<Name, QNodeTypeDefinition> ntdCache,

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD74 UPD43 INS43 UPD43 UPD43 UPD74 UPD74 UPD43 UPD43 UPD42 INS74 UPD43 INS74 UPD43 UPD74 UPD74 UPD74 UPD74 UPD43 UPD74 UPD74 INS60 INS24 INS42 UPD43 UPD74 UPD43 UPD74 UPD42 MOV14 UPD42 UPD66 UPD43 UPD66 UPD43 UPD42 UPD42 INS7 UPD43 UPD43 INS42 MOV43 INS43 UPD42 MOV43 INS43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 INS7 UPD43 UPD43 INS74 INS59 UPD74 UPD42 INS58 INS27 INS37 INS8 UPD42 UPD42 UPD43 UPD66 INS66 UPD42 UPD43 UPD42 UPD66 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 INS42 MOV32 UPD42 UPD43 UPD42 UPD43 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 MOV32 UPD42 UPD42 INS43 INS43 INS42 INS14 UPD43 UPD43 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS25 UPD43 UPD43 UPD42 UPD42 UPD42 UPD74 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS74 INS42 UPD42 UPD74 UPD42 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 UPD42 UPD42 INS42 INS42 INS7 UPD43 UPD43 UPD43 INS43 INS43 UPD43 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 MOV21 INS21 INS42 INS14 UPD42 UPD74 UPD42 UPD42 UPD43 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 INS32 INS43 INS32 MOV32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD43 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD43 UPD42 UPD43 UPD42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL39 DEL9 DEL9 DEL32