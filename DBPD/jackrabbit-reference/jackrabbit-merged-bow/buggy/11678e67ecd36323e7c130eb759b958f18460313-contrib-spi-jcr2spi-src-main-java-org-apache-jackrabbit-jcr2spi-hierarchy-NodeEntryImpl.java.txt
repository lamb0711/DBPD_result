- remove cachebehaviour flag from ChangeLog.persisted
- minor improvement

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@521356 13f79535-47bb-0310-9956-ffa450edef68

-        ItemState state = internalGetItemState();
-        if (state != null) {
-            if (state.getStatus() == Status.NEW) {
-                state.setStatus(Status.REMOVED);
-            } else {
-                state.getWorkspaceState().setStatus(Status.REMOVED);
-            }
-        }
-        if (parent.childNodeEntries != null) {
+        removeEntry(this);
+        if (getStatus() != Status.STALE_DESTROYED && parent.childNodeEntries != null) {
-            state = ce.internalGetItemState();
-            if (state != null) {
-                if (state.getStatus() == Status.NEW) {
-                    state.setStatus(Status.REMOVED);
-                } else {
-                    state.getWorkspaceState().setStatus(Status.REMOVED);
-                }
-            }
+            removeEntry(ce);
-    public void collectStates(ChangeLog changeLog, boolean throwOnStale) throws InvalidItemStateException {
+    public synchronized void collectStates(ChangeLog changeLog, boolean throwOnStale) throws InvalidItemStateException {
-        ItemState state = internalGetItemState();
-        if (state != null && state.getStatus() == Status.EXISTING_MODIFIED) {
+        if (getStatus() == Status.EXISTING_MODIFIED) {
-        // TODO: check if correct, that check for existing prop can be omitted.
+        // TODO: check for existing prop.
+        return internalAddPropertyEntry(propName);
+    }
+
+    /**
+     * Internal method that adds a PropertyEntry without checking of that entry
+     * exists.
+     *
+     * @param propName
+     * @return
+     */
+    private PropertyEntry internalAddPropertyEntry(QName propName) {
-                pEntry.remove();
+                if (pEntry != null) {
+                    pEntry.remove();
+                }
-    public synchronized void refresh(Event childEvent) {
-        boolean modified = false; // TODO: see todo below
+    public void refresh(Event childEvent) {
-                    cne = internalAddNodeEntry(eventName, uniqueChildID, index, childNodeEntries());
-                    modified = true;
+                    internalAddNodeEntry(eventName, uniqueChildID, index, childNodeEntries());
-
-                if (!hasPropertyEntry(eventName)) {
-                    try {
-                        addPropertyEntry(eventName);
-                        modified = true;
-                    } catch (ItemExistsException e) {
-                        log.warn("Internal error", e);
-                        // TODO
-                    }
+                HierarchyEntry child = lookupEntry(childEvent.getItemId(), childEvent.getQPath());
+                if (child == null) {
+                    internalAddPropertyEntry(eventName);
-                    // TODO: TOBEFIXED deal with NEW entries
+                    child.reload(false, true);
-                HierarchyEntry child = lookupEntry(childEvent.getItemId(), childEvent.getQPath());
+                child = lookupEntry(childEvent.getItemId(), childEvent.getQPath());
-                    modified = true;
-                        modified = true;
-                    try {
-                        addPropertyEntry(eventName);
-                        modified = true;
-                    } catch (ItemExistsException e) {
-                        log.warn("Internal error", e);
-                        // TODO
-                    }
+                    internalAddPropertyEntry(eventName);
-
-        // TODO: check if status of THIS_state must be marked modified...
-    private static void buildPath(Path.PathBuilder builder, NodeEntryImpl nEntry, boolean wspPath) {
+    private static void buildPath(Path.PathBuilder builder, NodeEntryImpl nEntry, boolean wspPath) throws RepositoryException {
+        if (index == Path.INDEX_UNDEFINED) {
+            throw new RepositoryException("Invalid index " + index + " with nodeEntry " + nEntry);
+        }
+
+        // TODO: check again. special treatment for index 0 for consistency with PathFormat.parse
+        } catch (ItemNotFoundException e) {
+            log.debug("Property with name " + child.getQName() + " does not exist (anymore)");
-            log.error("Internal Error", e);
+            log.debug("Unable to access child property " + child.getQName(), e.getMessage());

INS31 INS83 MOV29 INS83 INS43 INS42 INS44 MOV43 INS8 INS29 UPD83 UPD42 INS43 MOV21 INS42 INS43 INS42 INS41 INS65 INS65 INS65 MOV10 MOV60 MOV10 INS42 INS25 INS27 INS8 INS27 INS42 INS32 INS66 INS66 INS42 INS25 INS10 INS21 INS27 INS8 INS12 UPD42 INS52 INS27 MOV27 MOV60 MOV21 MOV32 MOV40 INS42 INS42 INS27 INS8 INS8 INS7 INS8 INS42 INS40 INS53 INS44 INS8 INS32 INS40 INS32 INS42 INS33 MOV21 MOV21 INS42 INS32 MOV21 INS14 INS43 INS42 INS21 INS42 UPD42 MOV42 UPD42 MOV42 INS25 MOV32 INS32 UPD42 MOV42 INS32 INS32 INS43 INS27 INS42 INS32 INS27 INS8 UPD42 INS42 INS42 INS9 INS9 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS27 UPD42 INS27 INS32 INS42 INS33 MOV21 INS45 INS32 INS45 INS45 INS32 MOV42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL40 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL40 DEL27 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL27 DEL27 DEL83 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL7 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL42 DEL42 DEL32 DEL38 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL10 DEL45