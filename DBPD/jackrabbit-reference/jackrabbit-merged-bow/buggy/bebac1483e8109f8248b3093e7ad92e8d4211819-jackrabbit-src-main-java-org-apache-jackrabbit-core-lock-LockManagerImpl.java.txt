JCR-623 Clustering


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@471760 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.cluster.LockEventChannel;
+import org.apache.jackrabbit.core.cluster.LockEventListener;
-
-public class LockManagerImpl implements LockManager, SynchronousEventListener {
+public class LockManagerImpl implements LockManager, SynchronousEventListener, LockEventListener {
+     * Lock event channel.
+     */
+    private LockEventChannel eventChannel;
+
+    /**
+                if (eventChannel != null) {
+                    eventChannel.locked(node.getNodeId(), isDeep, session.getUserID());
+                }
+                if (eventChannel != null) {
+                    eventChannel.unlocked(node.getNodeId());
+                }
+
+
+    //----------------------------------------------------< LockEventListener >
+
+    /**
+     * Set a lock event channel
+     *
+     * @param eventChannel lock event channel
+     */
+    public void setEventChannel(LockEventChannel eventChannel) {
+        this.eventChannel = eventChannel;
+        eventChannel.setListener(this);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void externalLock(NodeId nodeId, boolean isDeep, String userId) throws RepositoryException {
+        acquire();
+
+        try {
+            Path path = getPath(nodeId);
+
+            // create lock token
+            LockInfo info = new LockInfo(new LockToken(nodeId), false, isDeep, userId);
+            info.setLive(true);
+            lockMap.put(path, info);
+
+            save();
+        } finally {
+            release();
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void externalUnlock(NodeId nodeId) throws RepositoryException {
+        acquire();
+
+        try {
+            Path path = getPath(nodeId);
+            PathMap.Element element = lockMap.map(path, true);
+            if (element == null) {
+                throw new LockException("Node not locked: " + path.toString());
+            }
+            AbstractLockInfo info = (AbstractLockInfo) element.get();
+            if (info == null) {
+                throw new LockException("Node not locked: " + path.toString());
+            }
+            element.set(null);
+            info.setLive(false);
+
+            save();
+
+        } finally {
+            release();
+        }
+    }

INS26 INS26 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS42 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS21 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS21 INS54 INS65 INS43 INS42 INS42 INS21 INS54 INS66 INS66 INS42 INS66 INS42 INS7 INS32 INS65 INS42 INS42 INS32 INS8 INS8 INS65 INS42 INS32 INS8 INS8 INS25 INS25 INS22 INS42 INS42 INS42 INS52 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS42 INS60 INS60 INS25 INS60 INS25 INS21 INS21 INS21 INS21 MOV38 INS8 MOV38 INS8 INS52 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS32 MOV25 MOV21 MOV25 MOV21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS11 INS42 INS33 INS53 INS42 INS42 INS33 INS42 INS42 INS9 INS42 INS42 INS27 INS27 INS42 INS42 INS43 INS14 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS14 INS43 INS32 INS14 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS43 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS27 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42