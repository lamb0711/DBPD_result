JCR-2076: JSR 283: QOM and SQL2
- change return type of QueryInfo.getColumnNames() from Name[] to String[]
- jcr2spi, spi2dav, spi2jcr implementation (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@789269 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+import java.util.HashMap;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Arrays;
+
-import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
+import javax.jcr.Node;
-     * The node id of the underlying row.
+     * The node ids of the underlying row.
-    private final NodeId nodeId;
+    private final Map<Name, NodeId> nodeIds = new HashMap<Name, NodeId>();
-     * The score value for this row.
+     * The score values for this row.
-    private final double score;
+    private final Map<Name, Double> scores = new HashMap<Name, Double>();
-     * @param scoreName     the name of the jcr:score column.
-     * @param pathName      the name of the jcr:path column
+     * @param selectorNames the selector names.
-     * @param resolver
+     * @param resolver      the name path resolver.
-                              String scoreName,
-                              String pathName,
+                              Name[] selectorNames,
-        String jcrPath = row.getValue(pathName).getString();
-        Path path;
-        try {
-            path = resolver.getQPath(jcrPath);
-        } catch (NameException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
-        this.nodeId = idFactory.createNodeId((String) null, path);
-        this.score = row.getValue(scoreName).getDouble();
+        List<Name> selNames = new ArrayList<Name>();
+        selNames.addAll(Arrays.asList(selectorNames));
+        if (selNames.isEmpty()) {
+            selNames.add(null); // default selector
+        }
+        for (Name sn : selNames) {
+            Node n;
+            double score;
+            if (sn == null) {
+                n = row.getNode();
+                score = row.getScore();
+            } else {
+                String selName = resolver.getJCRName(sn);
+                n = row.getNode(selName);
+                score = row.getScore(selName);
+            }
+            NodeId id = null;
+            if (n != null) {
+                id = idFactory.fromJcrIdentifier(n.getIdentifier());
+            }
+            nodeIds.put(sn, id);
+            scores.put(sn, score);
+        }
-    /**
-     * {@inheritDoc}
-     */
-    public NodeId getNodeId() {
-        return nodeId;
+    public NodeId getNodeId(Name selectorName) {
+        NodeId id = nodeIds.get(selectorName);
+        if (id == null) {
+            if (nodeIds.size() == 1) {
+                return nodeIds.values().iterator().next();
+            } else {
+                throw new IllegalArgumentException(selectorName + " is not a valid selectorName");
+            }
+        }
+        return id;
-    /**
-     * {@inheritDoc}
-     */
-    public double getScore() {
+    public double getScore(Name selectorName) {
+        Double score = scores.get(selectorName);
+        if (score == null) {
+            if (scores.size() == 1) {
+                return scores.values().iterator().next();
+            } else {
+                throw new IllegalArgumentException(selectorName + " is not a valid selectorName");
+            }
+        }

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS74 INS74 INS59 MOV65 INS8 INS43 INS44 INS8 INS44 INS8 INS43 INS43 MOV43 UPD42 INS14 INS43 INS43 INS43 INS42 INS14 INS5 UPD42 MOV21 MOV24 INS60 INS21 INS25 INS70 INS42 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS60 INS25 MOV41 UPD66 INS42 INS42 INS74 UPD66 INS42 INS42 INS42 INS74 UPD42 UPD66 UPD42 UPD66 INS43 INS85 INS74 INS59 INS32 INS32 INS8 INS44 INS42 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS43 MOV43 INS43 INS43 INS43 UPD42 MOV42 INS43 INS43 INS42 INS14 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS21 INS43 INS42 MOV60 INS60 INS25 INS60 INS25 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS74 UPD42 UPD42 UPD42 INS32 INS42 UPD43 INS39 MOV59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS27 INS8 INS8 INS43 INS43 INS42 INS42 INS33 UPD42 UPD42 INS42 INS33 MOV21 INS21 INS60 MOV21 MOV21 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 MOV41 INS53 INS32 INS34 INS41 INS53 UPD42 MOV42 INS42 INS7 MOV43 INS59 INS7 INS42 INS42 INS32 INS14 INS42 INS42 INS32 INS14 UPD42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS43 INS27 INS32 INS42 INS43 INS27 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL65 DEL43 DEL43 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL33 DEL11 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL65 DEL65 DEL29 DEL42 DEL8 DEL65 DEL65 DEL29 DEL8