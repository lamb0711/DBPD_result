JCR-2620 -  Authorizable#getProperty and #setProperty should deal with relativePath

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@987435 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Node;
-            if (isAuthorizableProperty(prop)) {
+            if (isAuthorizableProperty(prop, false)) {
+     * @see Authorizable#getPropertyNames(String)
+     */
+    public Iterator<String> getPropertyNames(String relPath) throws RepositoryException {
+        Node n = node.getNode(relPath);
+        if (n.isSame(node)) {
+            // same as #getPropertyNames()
+            return getPropertyNames();
+        } else if (Text.isDescendant(node.getPath(), n.getPath())) {
+            List<String> l = new ArrayList<String>();
+            for (PropertyIterator it = n.getProperties(); it.hasNext();) {
+                Property prop = it.nextProperty();
+                if (isAuthorizableProperty(prop, false)) {
+                    l.add(prop.getName());
+                }
+            }
+            return l.iterator();
+        } else {
+            throw new IllegalArgumentException("Relative path " + relPath + " refers to items outside of scope of authorizable " + getID());
+        }
+    }
+
+    /**
-    public boolean hasProperty(String name) throws RepositoryException {
-        return node.hasProperty(name) && isAuthorizableProperty(node.getProperty(name));
+    public boolean hasProperty(String relPath) throws RepositoryException {
+        return node.hasProperty(relPath) && isAuthorizableProperty(node.getProperty(relPath), true);
-    public Value[] getProperty(String name) throws RepositoryException {
-        if (hasProperty(name)) {
-            Property prop = node.getProperty(name);
-            if (isAuthorizableProperty(prop)) {
+    public Value[] getProperty(String relPath) throws RepositoryException {
+        if (node.hasProperty(relPath)) {
+            Property prop = node.getProperty(relPath);
+            if (isAuthorizableProperty(prop, true)) {
-     * @param name The property name.
+     * @param relPath The relative path to the property or the property name.
-    public synchronized void setProperty(String name, Value value) throws RepositoryException {
+    public synchronized void setProperty(String relPath, Value value) throws RepositoryException {
+        String name = Text.getName(relPath);
+        String intermediate = (relPath.equals(name)) ? null : Text.getRelativeParent(relPath, 1);
+            Node n = getOrCreateTargetNode(intermediate);
-            if (node.hasProperty(name)) {
-                Property p = node.getProperty(name);
+            if (n.hasProperty(name)) {
+                Property p = n.getProperty(name);
-            node.setProperty(name, value);
+            n.setProperty(name, value);
-     * @param name The property name.
+     * @param relPath The relative path to the property or the property name.
-    public synchronized void setProperty(String name, Value[] values) throws RepositoryException {
+    public synchronized void setProperty(String relPath, Value[] values) throws RepositoryException {
+        String name = Text.getName(relPath);
+        String intermediate = (relPath.equals(name)) ? null : Text.getRelativeParent(relPath, 1);
+            Node n = getOrCreateTargetNode(intermediate);
-            if (node.hasProperty(name)) {
-                Property p = node.getProperty(name);
+            if (n.hasProperty(name)) {
+                Property p = n.getProperty(name);
-            node.setProperty(name, values);
+            n.setProperty(name, values);
-    public synchronized boolean removeProperty(String name) throws RepositoryException {
+    public synchronized boolean removeProperty(String relPath) throws RepositoryException {
+        String name = Text.getName(relPath);        
-            if (node.hasProperty(name)) {
-                // 'node' is protected -> use setValue instead of Property.remove()
-                Property p = node.getProperty(name);
-                if (p.isMultiple()) {
-                    p.setValue((Value[]) null);
-                } else {
-                    p.setValue((Value) null);
+            if (node.hasProperty(relPath)) {
+                Property p = node.getProperty(relPath);
+                if (isAuthorizableProperty(p, true)) {
+                    p.remove();
+                    if (userManager.isAutoSave()) {
+                        node.save();
+                    }
+                    return true;
-                if (userManager.isAutoSave()) {
-                    node.save();
-                }
-                return true;
-            } else {
-                return false;
+            // no such property or wasn't a property of this authorizable.
+            return false;
-            log.warn("Failed to remove Property " + name + " from " + this, e);
+            log.warn("Failed to remove Property " + relPath + " from " + this, e);
-     * non-protected properties defined by the rep:authorizable.
+     * non-protected properties defined by the rep:Authorizable node type or a
+     * some other descendant of the authorizable node.
+     * @param verifyAncestor If true the property is tested to be a descendant
+     * of the node of this authorizable; otherwise it is expected that this
+     * test has been executed by the caller.
-    private static boolean isAuthorizableProperty(Property prop) throws RepositoryException {
+    private boolean isAuthorizableProperty(Property prop, boolean verifyAncestor) throws RepositoryException {
+        if (verifyAncestor && !Text.isDescendant(node.getPath(), prop.getPath())) {
+            log.debug("Attempt to access property outside of authorizable scope.");
+            return false;
+        }
+
-        } else {
+        } else if (node.isSame(prop.getParent())) {
+        } else {
+            // another non-protected property somewhere in the subtree of this
+            // authorizable node -> is a property that can be set using #setProperty.
+            return true;
+    /**
+     * 
+     * @param relPath
+     * @return
+     * @throws RepositoryException
+     */
+    private Node getOrCreateTargetNode(String relPath) throws RepositoryException {
+        Node n;
+        if (relPath != null) {
+            if (node.hasNode(relPath)) {
+                n = node.getNode(relPath);
+            } else {
+                n = node;
+                for (String segment : Text.explode(relPath, '/')) {
+                    if (n.hasNode(segment)) {
+                        n = n.getNode(segment);
+                    } else {
+                        n = n.addNode(segment);
+                    }
+                }
+            }
+            if (!Text.isDescendantOrEqual(node.getPath(), n.getPath())) {
+                node.refresh(false);
+                throw new RepositoryException("Relative path " + relPath + " outside of scope of " + this);
+            }
+        } else {
+            n = node;
+        }
+        return n;
+    }
+

INS26 INS40 INS31 INS31 INS29 INS83 INS74 INS42 MOV44 INS43 INS8 MOV44 INS44 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS43 INS43 UPD42 INS42 INS60 INS25 UPD42 INS43 INS42 INS43 INS42 INS60 INS60 UPD42 INS60 INS60 UPD42 INS60 INS65 INS39 INS42 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS68 INS42 INS42 INS43 INS59 INS32 INS8 INS25 INS42 UPD42 UPD66 INS42 INS43 INS59 INS43 INS59 UPD42 UPD66 INS43 INS59 INS43 INS59 INS43 INS59 UPD66 INS66 INS42 INS66 INS66 INS66 INS27 INS8 INS25 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS69 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS32 INS8 INS8 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS16 INS60 INS42 INS42 INS32 INS42 INS42 INS16 INS60 INS42 INS42 INS32 INS25 MOV41 INS42 INS38 INS21 INS41 INS32 MOV8 INS8 INS42 INS42 INS42 INS33 INS25 INS25 INS21 MOV43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS60 INS24 INS41 INS53 UPD42 INS9 INS43 INS42 INS42 INS42 INS36 INS33 INS32 INS43 INS59 INS42 INS42 INS42 INS36 INS33 INS32 INS43 INS59 INS42 INS42 INS42 MOV32 MOV8 INS32 INS32 INS9 INS42 INS42 INS32 INS41 INS32 INS8 INS8 INS38 INS8 INS7 INS9 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS58 INS32 INS8 INS32 INS14 UPD42 INS42 INS9 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS9 INS42 INS42 INS42 INS21 INS21 INS70 INS32 INS21 INS53 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS43 INS27 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS7 INS7 INS44 INS32 INS8 INS42 INS42 INS32 INS32 INS32 INS14 INS42 INS42 INS74 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS45 INS42 INS45 INS32 MOV42 UPD42 MOV42 MOV42 INS9 MOV25 MOV41 UPD42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS13 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS27 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS21 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS45 INS42 INS45 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS32 INS7 INS7 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL33 DEL11 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL33 DEL11 DEL8 DEL25 DEL83