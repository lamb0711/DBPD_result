JCR-1589: JSR 283 Retention & Hold Management (work in progress)
JCR-1957: Move common validation checks to a single place

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@738422 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.retention.RetentionRegistry;
+     * Internal helper class for common validation checks (lock status, checkout
+     * status, protection etc. etc.)
+     */
+    private ItemValidator validator;
+
+    /**
+     * @return ItemValidator instance for this session.
+     * @throws RepositoryException If an error occurs.
+     */
+    public synchronized ItemValidator getValidator() throws RepositoryException {
+        if (validator == null) {
+            validator = new ItemValidator(rep.getNodeTypeRegistry(), getHierarchyManager(), this);
+        }
+        return validator;
+    }
+
+    /**
+
+    /**
+     * Returns the internal retention manager used for evaluation of effective
+     * retention policies and holds.
+     * 
+     * @return internal retention manager
+     * @throws RepositoryException
+     */
+    protected RetentionRegistry getRetentionRegistry() throws RepositoryException {
+        return wsp.getRetentionRegistry();
+    }
+
-     * Determines if there are pending unsaved changes either on the passed
-     * item or on any item in it's subtree.
-     *
-     * @param item Item start of the subtree to be tested for pending changes.
-     * @return <code>true</code> if there are pending unsaved changes,
-     *         <code>false</code> otherwise.
-     * @throws RepositoryException if an error occurred
-     */
-    public boolean hasPendingChanges(Item item) throws RepositoryException {
-        if (!(item instanceof ItemImpl) || ((ItemImpl) item).session != this) {
-            throw new IllegalArgumentException();
-        }
-        sanityCheck();
-        ItemImpl itemImpl = (ItemImpl) item;
-        if (itemImpl.isTransient()) {
-            return true;
-        } else {
-            return item.isNode() && ((NodeImpl) item).hasPendingChanges();
-        }
-    }
-
-    /**
-        // verify that both source and destination parent nodes are checked-out
-        if (!srcParentNode.internalIsCheckedOut()) {
-            String msg = srcAbsPath + ": cannot move a child of a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-        if (!destParentNode.internalIsCheckedOut()) {
-            String msg = destAbsPath + ": cannot move a target to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-
-        // check constraints
+        // verify for both source and destination parent nodes that
+        // - they are checked-out
+        // - are not protected neither by node type constraints nor by retention/hold
+        int options = ItemValidator.CHECK_VERSIONING | ItemValidator.CHECK_LOCK |
+                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD | ItemValidator.CHECK_RETENTION;
+        getValidator().checkRemove(srcParentNode, options, Permission.NONE);
+        getValidator().checkModify(destParentNode, options, Permission.NONE);
+        // check constraints
-        // check protected flag of old & new parent
-        if (destParentNode.getDefinition().isProtected()) {
-            String msg = destAbsPath + ": cannot add a child node to a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-        if (srcParentNode.getDefinition().isProtected()) {
-            String msg = srcAbsPath + ": cannot remove a child node from a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check lock status
-        srcParentNode.checkLock();
-        destParentNode.checkLock();
-
-        // verify that parent node is checked-out
-        if (!parent.internalIsCheckedOut()) {
-            String msg = parentAbsPath + ": cannot add a child to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag of parent node
-        if (parent.getDefinition().isProtected()) {
-            String msg = parentAbsPath + ": cannot add a child to a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check lock status
-        parent.checkLock();
+        // verify that parent node is checked-out, not locked and not protected
+        // by either node type constraints nor by some retention or hold.
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
+                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD | ItemValidator.CHECK_RETENTION;
+        getValidator().checkModify(parent, options, Permission.NONE);
-    public synchronized RetentionManager getRetentionManager()
+    public RetentionManager getRetentionManager()
+        // check sanity of this session
+        sanityCheck();
+            // make sure the internal retention manager exists.
+            getRetentionRegistry();
+            // create the api level retention manager.

INS26 INS40 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS29 MOV83 INS83 INS43 INS42 MOV43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 MOV65 INS42 INS42 MOV65 MOV65 UPD42 MOV42 MOV25 INS41 INS65 INS65 INS65 UPD42 MOV42 INS42 MOV41 MOV60 INS21 INS21 MOV60 INS21 MOV21 UPD66 UPD66 UPD66 UPD66 INS27 INS8 INS42 INS66 INS66 INS66 INS42 INS32 INS39 INS32 INS32 INS39 INS32 INS42 INS33 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 UPD27 MOV32 UPD42 MOV42 MOV42 UPD42 MOV42 INS40 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 INS40 UPD42 UPD27 MOV32 UPD42 MOV42 MOV42 UPD42 MOV42 INS40 INS21 INS7 INS40 INS40 INS40 INS40 INS40 UPD42 UPD42 MOV42 INS40 INS40 INS40 INS40 INS40 UPD42 INS32 INS42 INS14 INS42 INS43 INS32 INS32 INS52 UPD42 MOV42 INS42 INS42 INS42 DEL66 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL43 DEL42 DEL11 DEL36 DEL42 DEL22 DEL52 DEL27 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL27 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL45 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL32 DEL21 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL21 DEL83