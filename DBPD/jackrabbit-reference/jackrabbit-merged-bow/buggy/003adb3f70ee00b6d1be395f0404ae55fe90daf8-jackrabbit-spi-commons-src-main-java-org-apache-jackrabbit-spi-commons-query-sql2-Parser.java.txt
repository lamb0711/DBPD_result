JCR-1104: JSR 283 support / SQL2 parser (upgrade to the current spec)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772583 13f79535-47bb-0310-9956-ffa450edef68

-    // Page 125
-    // Page 127
-            return factory.selector(nodeTypeName, null /* TODO */);
+            return factory.selector(nodeTypeName, nodeTypeName);
-    // Page 128
-    // Page 129
-    // Page 130
-                    c = factory.sameNodeJoinCondition(selector1, selector2, null /* TODO */);
+                    // TODO verify "." is correct
+                    c = factory.sameNodeJoinCondition(selector1, selector2, ".");
-    // Page 136
-    // Page 138
-                a = parseCondition(factory.propertyValue(identifier, null /* TODO */));
+                a = parseCondition(factory.propertyValue(getOnlySelectorName(), identifier));
-    // Page 141
-                this.getSyntaxError("propertyName (NOT NULL is only supported for properties)");
+                throw getSyntaxError("propertyName (NOT NULL is only supported for properties)");
-        if (p.getSelectorName() == null) {
-            return factory.propertyExistence(p.getPropertyName(), null /* TODO */);
-        } else {
-            return factory.propertyExistence(p.getSelectorName(), p.getPropertyName());
-        }
+        return factory.propertyExistence(p.getSelectorName(), p.getPropertyName());
-    // Page 144
-                c = factory.fullTextSearch(name, readString(), null /* TODO */);
+                c = factory.fullTextSearch(getOnlySelectorName(), name, readString());
-                c = factory.sameNode(name, null /* TODO */);
+                c = factory.sameNode(getOnlySelectorName(), name);
-                c = factory.childNode(name, null /* TODO */);
+                c = factory.childNode(getOnlySelectorName(), name);
-                c = factory.descendantNode(name, null /* TODO */);
+                c = factory.descendantNode(getOnlySelectorName(), name);
-    // Page 148
-    // Page 149
-                op = factory.nodeName(null /* TODO */);
+                op = factory.nodeName(getOnlySelectorName());
-                op = factory.nodeLocalName(null /* TODO */);
+                op = factory.nodeLocalName(getOnlySelectorName());
-                op = factory.fullTextSearchScore(null /* TODO */);
+                op = factory.fullTextSearchScore(getOnlySelectorName());
-            throw getSyntaxError("LENGTH, NAME, LOCALNAME, SCORE, LOWER, or UPPER");
+            throw getSyntaxError("LENGTH, NAME, LOCALNAME, SCORE, LOWER, UPPER, or CAST");
-    // Page 150
-            return factory.propertyValue(name, null /* TODO */);
+            return factory.propertyValue(getOnlySelectorName(), name);
-    // Page 155
-            if (currentValue.getType() == PropertyType.LONG) {
+            int valueType = currentValue.getType();
+            switch (valueType) {
+            case PropertyType.LONG:
-            } else if (currentValue.getType() == PropertyType.DOUBLE) {
+                break;
+            case PropertyType.DOUBLE:
-            } else {
-                // TODO decimal
-                throw getSyntaxError("number");
+                break;
+            case PropertyType.BOOLEAN:
+                currentValue = valueFactory.createValue(!currentValue.getBoolean());
+                break;
+            case PropertyType.DECIMAL:
+                currentValue = valueFactory.createValue(currentValue.getDecimal().negate());
+                break;
+            default:
+                throw getSyntaxError("Illegal operation: -" + currentValue);
+        } else if (readIf("CAST")) {
+            read("(");
+            StaticOperand op = parseStaticOperand();
+            if (!(op instanceof Literal)) {
+                throw getSyntaxError("literal");
+            }
+            Literal literal = (Literal) op;
+            Value value = literal.getLiteralValue();
+            read("AS");
+            value = parseCastAs(value);
+            read(")");
+            literal = factory.literal(value);
+            return literal;
+    
+    private Value parseCastAs(Value value) throws RepositoryException {
+        if (readIf("STRING")) {
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("BINARY")) {
+            // TODO getBinary
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("DATE")) {
+            // TODO getDate
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("LONG")) {
+            // TODO getLong
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("DOUBLE")) {
+            // TODO getDouble
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("DECIMAL")) {
+            // TODO getDecimal
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("BOOLEAN")) {
+            return valueFactory.createValue(value.getBoolean());
+        } else if(readIf("NAME")) {
+            // TODO getName
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("PATH")) {
+            // TODO getPath
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("REFERENCE")) {
+            // TODO getReference
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("WEAKREFERENCE")) {
+            // TODO getWeakReference
+            return valueFactory.createValue(value.getString());
+        } else if(readIf("URI")) {
+            // TODO getURI
+            return valueFactory.createValue(value.getString());
+        } else {
+            throw getSyntaxError("data type (STRING|BINARY|...)");
+        }
+    }
-    // Page 157
-    // Page 159
-                    column = factory.column(c.propertyName, c.columnName, null /* TODO */);
+                    column = factory.column(getOnlySelectorName(), c.propertyName, c.columnName);
-                    column = factory.column(c.propertyName, null /* TODO */, null /* TODO */);
+                    column = factory.column(getOnlySelectorName(), c.propertyName, c.propertyName);
-        String result;
-        case CHAR_QUOTED:
-            result = null;
-            while (true) {
-                for (int begin = i;; i++) {
-                    if (chars[i] == '\"') {
-                        if (result == null) {
-                            result = statement.substring(begin, i);
-                        } else {
-                            result += statement.substring(begin - 1, i);
-                        }
-                        break;
-                    }
-                }
-                if (chars[++i] != '\"') {
-                    break;
-                }
-                i++;
-            }
-            currentToken = result;
-            parseIndex = i;
-            currentTokenQuoted = true;
-            currentTokenType = IDENTIFIER;
-            return;
-                    currentValue = valueFactory.createValue((int) number);
+                    currentValue = valueFactory.createValue((long) number);
-            result = null;
-            while (true) {
-                for (int begin = i;; i++) {
-                    if (chars[i] == '\'') {
-                        if (result == null) {
-                            result = statement.substring(begin, i);
-                        } else {
-                            result += statement.substring(begin - 1, i);
-                        }
-                        break;
-                    }
-                }
-                if (chars[++i] != '\'') {
-                    break;
-                }
-                i++;
-            }
-            currentToken = "'";
-            checkLiterals(false);
-            currentValue = valueFactory.createValue(result);
-            parseIndex = i;
-            currentTokenType = VALUE;
+            readString(i, '\'');
+            return;
+        case CHAR_QUOTED:
+            readString(i, '\"');
+    
+    private void readString(int i, char end) throws RepositoryException {
+        char[] chars = statementChars;
+        String result = null;
+        while (true) {
+            for (int begin = i;; i++) {
+                if (chars[i] == end) {
+                    if (result == null) {
+                        result = statement.substring(begin, i);
+                    } else {
+                        result += statement.substring(begin - 1, i);
+                    }
+                    break;
+                }
+            }
+            if (chars[++i] != end) {
+                break;
+            }
+            i++;
+        }
+        currentToken = "'";
+        checkLiterals(false);
+        currentValue = valueFactory.createValue(result);
+        parseIndex = i;
+        currentTokenType = VALUE;
+    }
-        // TODO BigDecimal or double?
+        
+        // TODO createValue(BigDecimal) is not yet implemented
+        // currentValue = valueFactory.createValue(bd);
+        
+    
+    /**
+     * Get the selector name if only one selector exists in the query.
+     * If more than one selector exists, an exception is thrown.
+     * 
+     * @return the selector name
+     */
+    private String getOnlySelectorName() throws RepositoryException {
+        if (selectors.size() > 1) {
+            throw getSyntaxError("Need to specify the selector name because the query contains more than one selector.");
+        }
+        return selectors.get(0).getSelectorName();
+    }

INS31 INS31 INS31 MOV8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS42 INS43 INS42 INS42 INS25 MOV49 MOV21 MOV41 MOV41 MOV21 INS39 INS42 INS39 INS42 INS42 INS60 INS60 MOV61 MOV21 MOV21 MOV21 MOV21 MOV21 INS65 INS65 INS42 INS42 INS25 INS41 INS42 INS32 INS8 INS25 INS41 INS41 INS41 INS21 INS41 INS21 INS5 INS59 MOV43 INS59 INS66 INS66 INS66 INS27 INS8 INS32 INS42 INS45 INS41 INS32 INS8 INS25 INS32 INS32 INS39 INS85 INS42 INS42 INS42 INS33 INS32 INS34 INS53 INS32 INS42 INS60 INS50 INS25 INS32 INS42 INS45 INS41 INS32 INS8 INS25 UPD42 MOV42 MOV42 INS13 UPD42 MOV42 MOV42 INS13 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS32 INS39 INS59 INS42 INS49 MOV21 INS10 INS49 MOV21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 MOV32 MOV8 INS25 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS32 INS8 INS25 INS42 INS42 INS45 INS42 INS42 MOV32 INS40 INS40 INS40 INS7 INS40 INS7 MOV32 INS32 INS8 MOV8 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS32 INS8 INS25 INS42 INS32 INS42 INS32 INS27 INS42 INS45 INS21 INS60 INS25 INS60 INS60 INS21 INS21 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS32 INS8 INS25 INS42 INS32 INS42 INS42 INS38 INS42 INS42 INS32 INS45 INS42 INS32 INS43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS32 INS7 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS32 INS8 INS25 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS36 INS53 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS32 INS8 INS25 INS45 INS42 INS32 INS42 INS32 UPD45 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS62 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS32 INS8 INS25 UPD39 INS42 INS32 INS42 INS32 INS42 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS32 INS8 INS25 INS32 INS32 INS40 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS32 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS32 INS8 INS8 MOV42 MOV45 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS41 INS53 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 DEL33 DEL33 DEL33 DEL52 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL32 DEL41 DEL8 DEL25 DEL8 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL45 DEL40 DEL27 DEL8 DEL32 DEL40 DEL27 DEL8 DEL53 DEL8 DEL25 DEL25 DEL25 DEL33 DEL33 DEL33 DEL42 DEL59 DEL60 DEL42 DEL33 DEL7 DEL21 DEL9 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL37 DEL42 DEL42 DEL2 DEL13 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL38 DEL2 DEL13 DEL27 DEL10 DEL8 DEL25 DEL42 DEL37 DEL21 DEL8 DEL61 DEL42 DEL42 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL41 DEL41 DEL42 DEL33 DEL7 DEL21 DEL41 DEL42 DEL42 DEL7 DEL21 DEL41 DEL13 DEL13