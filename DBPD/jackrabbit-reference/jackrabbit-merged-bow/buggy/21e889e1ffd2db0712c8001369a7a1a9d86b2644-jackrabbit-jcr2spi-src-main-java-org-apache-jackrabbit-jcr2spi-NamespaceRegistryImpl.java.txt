JCR-1612: Reintroduce NamespaceStorage and namespace-caching

Hmm, the namespace cache I restored actually wasn't repository-level but per-session, which caused a test failure.

In fact, with the current SPI RepositoryService design it's impossible to do a proper repository-level namespace cache without making extra assumptions about the repository as all the namespace methods in RepositoryService take a SessionInfo argument.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@705937 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.Collection;
-import javax.jcr.NamespaceException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.jcr.NamespaceException;
+import javax.jcr.UnsupportedRepositoryOperationException;
-    /**
-     * The namespace storage.
-     */
+    private static Logger log = LoggerFactory.getLogger(NamespaceRegistryImpl.class);
+
-    private final Map prefixToUri = new HashMap();
-
-    private final Map uriToPrefix = new HashMap();
-
-    public synchronized void registerNamespace(String prefix, String uri)
-            throws RepositoryException {
+    public void registerNamespace(String prefix, String uri) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {
-        reloadNamespaces();
-    public synchronized void unregisterNamespace(String prefix)
-            throws RepositoryException {
+    public void unregisterNamespace(String prefix) throws NamespaceException, UnsupportedRepositoryOperationException, RepositoryException {
-        reloadNamespaces();
-    public synchronized String[] getPrefixes() throws RepositoryException {
-        reloadNamespaces();
-        return (String[]) prefixToUri.keySet().toArray(new String[prefixToUri.size()]);
+    public String[] getPrefixes() throws RepositoryException {
+        Collection prefixes = storage.getRegisteredNamespaces().keySet();
+        return (String[]) prefixes.toArray(new String[prefixes.size()]);
-    public synchronized String[] getURIs() throws RepositoryException {
-        reloadNamespaces();
-        return (String[]) uriToPrefix.keySet().toArray(new String[uriToPrefix.size()]);
+    public String[] getURIs() throws RepositoryException {
+        Collection uris = storage.getRegisteredNamespaces().values();
+        return (String[]) uris.toArray(new String[uris.size()]);
-    public synchronized String getURI(String prefix)
-            throws RepositoryException {
-        String uri = (String) prefixToUri.get(prefix);
-        if (uri == null) {
-            // Not found, try loading latest state from storage
-            reloadNamespaces();
-            uri = (String) prefixToUri.get(prefix);
+    public String getURI(String prefix) throws NamespaceException {
+        // try to load the uri
+        try {
+            return storage.getURI(prefix);
+        } catch (RepositoryException ex) {
+            log.debug("Internal error while loading registered namespaces.");
+            throw new NamespaceException(prefix + ": is not a registered namespace prefix.");
-        if (uri == null) {
-            // Still not found, it's not a known prefix
-            throw new NamespaceException("Namespace not found: " + prefix);
-        }
-        return uri;
-    public synchronized String getPrefix(String uri) throws RepositoryException {
-        String prefix = (String) uriToPrefix.get(uri);
-        if (prefix == null) {
-            // Not found, try loading latest state from storage
-            reloadNamespaces();
-            prefix = (String) uriToPrefix.get(uri);
-        }
-        if (prefix == null) {
-            // Still not found, it's not a known URI
-            throw new NamespaceException("Namespace not found: " + uri);
-        }
-        return prefix;
-    }
-
-    //-------------------------------------------------------------< private >
-
-    /**
-     * Clears the current namespace cache and loads new mappings from
-     * the underlying namespace storage.
-     *
-     * @throws RepositoryException if new mappings could not be loaded
-     */
-    private synchronized void reloadNamespaces() throws RepositoryException {
-        Map namespaces = storage.getRegisteredNamespaces();
-
-        prefixToUri.clear();
-        uriToPrefix.clear();
-
-        Iterator iterator = namespaces.entrySet().iterator();
-        while (iterator.hasNext()) {
-            Map.Entry entry = (Map.Entry) iterator.next();
-            prefixToUri.put(entry.getKey(), entry.getValue());
-            uriToPrefix.put(entry.getValue(), entry.getKey());
+    public String getPrefix(String uri) throws NamespaceException {
+        // try to load the prefix
+        try {
+            return storage.getPrefix(uri);
+        } catch (RepositoryException ex) {
+            log.debug("Internal error while loading registered namespaces.");
+            throw new NamespaceException(uri + ": is not a registered namespace uri.");

MOV26 MOV26 INS26 MOV23 UPD40 UPD40 INS40 UPD40 UPD83 UPD43 INS43 INS43 INS43 INS43 INS43 INS8 UPD43 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS60 INS60 UPD42 MOV42 INS54 UPD42 INS54 INS42 INS42 INS57 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS12 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS41 INS44 INS8 INS41 INS44 INS8 UPD42 MOV42 INS32 INS42 UPD42 MOV42 MOV32 INS42 UPD42 MOV42 INS32 MOV43 INS42 MOV21 MOV53 INS32 MOV43 INS42 MOV21 MOV53 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 INS45 INS45 INS45 DEL43 DEL14 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL42 DEL32 DEL21 DEL83 DEL42 DEL32 DEL21 DEL83 DEL32 DEL21 DEL42 DEL32 DEL83 DEL32 DEL21 DEL42 DEL32 DEL83 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL7 DEL45 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL41 DEL8 DEL83 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL7 DEL45 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL41 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL61 DEL8 DEL31