JCR-2468: Indexing configuration not refreshed after node type registration

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@900314 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.nodetype.NodeTypeRegistryListener;
-public class IndexingConfigurationImpl implements IndexingConfiguration {
+public class IndexingConfigurationImpl
+        implements IndexingConfiguration, NodeTypeRegistryListener {
+     * The indexing configuration.
+     */
+    private Element configuration;
+
+    /**
+     * The node type registry.
+     */
+    private NodeTypeRegistry ntReg;
+
+    /**
-    public void init(Element config, QueryHandlerContext context, NamespaceMappings nsMappings) throws Exception {
+    public void init(Element config,
+                     QueryHandlerContext context,
+                     NamespaceMappings nsMappings) throws Exception {
+        configuration = config;
-
+        ntReg = context.getNodeTypeRegistry();
+        ntReg.addListener(this);
-        NodeTypeRegistry ntReg = context.getNodeTypeRegistry();
-        Name[] ntNames = ntReg.getRegisteredNodeTypes();
+        refreshIndexRules();
-            if (configNode.getNodeName().equals("index-rule")) {
-                IndexingRule element = new IndexingRule(configNode);
-                // register under node type and all its sub types
-                log.debug("Found rule '{}' for NodeType '{}'", element, element.getNodeTypeName());
-                for (Name ntName : ntNames) {
-                    if (ntReg.getEffectiveNodeType(ntName).includesNodeType(element.getNodeTypeName())) {
-                        List<IndexingRule> perNtConfig = configElements.get(ntName);
-                        if (perNtConfig == null) {
-                            perNtConfig = new ArrayList<IndexingRule>();
-                            configElements.put(ntName, perNtConfig);
-                        }
-                        log.debug("Registering it for name '{}'", ntName);
-                        perNtConfig.add(new IndexingRule(element, ntName));
-                    }
-                }
-            } else if (configNode.getNodeName().equals("aggregate")) {
+            if (configNode.getNodeName().equals("aggregate")) {
+
+    //--------------------------< NodeTypeRegistryListener >--------------------
+
+    public void nodeTypeRegistered(Name ntName) {
+        try {
+            refreshIndexRules();
+        } catch (Exception e) {
+            log.warn("Unable to refresh index rules", e);
+        }
+    }
+
+    public void nodeTypeReRegistered(Name ntName) {
+        // not interested
+    }
+
+    public void nodeTypeUnregistered(Name ntName) {
+        // not interested
+    }
+
+     * Refreshes the index rules in {@link #configElements} based on the current
+     * node types available in the node type registry.
+     *
+     * @throws Exception if an error occurs while refreshing the rules.
+     */
+    private void refreshIndexRules() throws Exception {
+        Map<Name, List<IndexingRule>> nt2rules = new HashMap<Name, List<IndexingRule>>();
+        Name[] ntNames = ntReg.getRegisteredNodeTypes();
+        NodeList indexingConfigs = configuration.getChildNodes();
+        for (int i = 0; i < indexingConfigs.getLength(); i++) {
+            Node configNode = indexingConfigs.item(i);
+            if (configNode.getNodeName().equals("index-rule")) {
+                IndexingRule element = new IndexingRule(configNode);
+                // register under node type and all its sub types
+                log.debug("Found rule '{}' for NodeType '{}'", element, element.getNodeTypeName());
+                for (Name ntName : ntNames) {
+                    if (ntReg.getEffectiveNodeType(ntName).includesNodeType(element.getNodeTypeName())) {
+                        List<IndexingRule> perNtConfig = nt2rules.get(ntName);
+                        if (perNtConfig == null) {
+                            perNtConfig = new ArrayList<IndexingRule>();
+                            nt2rules.put(ntName, perNtConfig);
+                        }
+                        log.debug("Registering it for name '{}'", ntName);
+                        perNtConfig.add(new IndexingRule(element, ntName));
+                    }
+                }
+            }
+        }
+        configElements = nt2rules;
+    }
+
+
+    /**

INS26 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS29 INS83 INS43 INS59 INS29 INS83 MOV43 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS65 INS42 INS42 INS65 INS42 INS21 INS21 INS21 INS21 INS43 INS42 INS54 INS43 INS42 INS43 INS42 INS65 INS65 INS42 INS60 MOV60 INS60 INS24 INS21 INS66 INS66 INS7 INS7 INS32 INS32 INS42 INS8 INS12 INS42 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS74 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS7 INS42 INS42 INS42 MOV32 INS42 INS42 INS52 INS42 MOV25 INS21 INS44 INS8 INS67 INS43 INS43 INS74 INS42 INS14 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 MOV32 MOV8 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL42 DEL59 DEL60 DEL25