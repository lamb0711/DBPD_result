JCR-1483: Move common node type functionality to jackrabbit-spi-commons
- replaced NodeTypeDef (jackrabbit-core) with QNodeTypeDefinition
- QNodeTypeDefinitionImpl is not immutable, hence no cloning needed anymore
- introduced QNodeTypeDefinitionBuilder
- moved constructors of Q*DefinitionImpl classes in spi2jcr to spi-commons
- fixed a bug in RepositoryServiceImpl in spi2jcr

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816551 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QValueFactory;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.commons.nodetype.constraint.ValueConstraint;
+import org.apache.jackrabbit.spi.commons.value.ValueFormat;
+import javax.jcr.RepositoryException;
+import javax.jcr.Value;
+import javax.jcr.nodetype.PropertyDefinition;
+
+    private static final long serialVersionUID = 1064686456661663541L;
+
-
-     * @throws NullPointerException if <code>valueConstraints</code> is
+     * @throws NullPointerException if <code>valueConstraints</code> or
+     *                              <code>availableQueryOperators</code> is
+        if (availableQueryOperators == null) {
+            throw new NullPointerException("availableQueryOperators");
+        }
+    /**
+     * Creates a new property definition based on <code>propDef</code>.
+     *
+     * @param propDef       the JCR property definition.
+     * @param resolver      the name/path resolver of the session that provided
+     *                      the property definition.
+     * @param qValueFactory the QValue factory.
+     * @throws RepositoryException if an error occurs while reading from
+     *                             <code>propDef</code>.
+     */
+    public QPropertyDefinitionImpl(PropertyDefinition propDef,
+                                   NamePathResolver resolver,
+                                   QValueFactory qValueFactory)
+            throws RepositoryException {
+        this(propDef.getName().equals(NameConstants.ANY_NAME.getLocalName()) ? NameConstants.ANY_NAME : resolver.getQName(propDef.getName()),
+                resolver.getQName(propDef.getDeclaringNodeType().getName()),
+                propDef.isAutoCreated(), propDef.isMandatory(),
+                propDef.getOnParentVersion(), propDef.isProtected(),
+                convertValues(propDef.getDefaultValues(), resolver, qValueFactory),
+                propDef.isMultiple(), propDef.getRequiredType(),
+                ValueConstraint.create(propDef.getRequiredType(), propDef.getValueConstraints(), resolver),
+                propDef.getAvailableQueryOperators(),
+                propDef.isFullTextSearchable(), propDef.isQueryOrderable());
+    }
+
+
+    //-------------------------------< internal >-------------------------------
+
+    /**
+     * Convers JCR {@link Value}s to {@link QValue}s.
+     *
+     * @param values   the JCR values.
+     * @param resolver the name/path resolver of the session that provided the
+     *                 values.
+     * @param factory  the QValue factory.
+     * @return the converted values.
+     * @throws RepositoryException if an error occurs while converting the
+     *                             values.
+     */
+    private static QValue[] convertValues(Value[] values,
+                                          NamePathResolver resolver,
+                                          QValueFactory factory)
+            throws RepositoryException {
+        QValue[] defaultValues = null;
+        if (values != null) {
+            defaultValues = new QValue[values.length];
+            for (int i = 0; i < values.length; i++) {
+                defaultValues[i] = ValueFormat.getQValue(values[i], resolver, factory);
+            }
+        }
+        return defaultValues;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS34 INS25 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS5 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 UPD66 INS66 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS16 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS85 INS42 INS42 INS5 INS59 INS27 INS8 INS42 INS42 INS33 INS53 INS32 INS40 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS33 INS42 INS33 INS21 INS24 INS14 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS58 INS27 INS37 INS8 INS43 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS5 INS40 INS42 INS34 INS7 INS43 INS85 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42