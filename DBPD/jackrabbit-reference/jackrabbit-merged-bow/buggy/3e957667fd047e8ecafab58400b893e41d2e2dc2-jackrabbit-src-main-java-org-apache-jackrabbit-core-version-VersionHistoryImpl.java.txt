Make versioning transactional
- Added specialized XAVersion and XAVersionHistory objects that refresh their internal state when needed
- Defined new observation interface in order to have VersionManagerImpl use standard event dispatching
  instead of writing its own
- Added test cases verifying isolation of versioning operations in transactions


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368026 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.name.IllegalNameException;
-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.UnknownPrefixException;
-import org.apache.log4j.Logger;
-import javax.jcr.Item;
-import javax.jcr.RepositoryException;
-import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.NodeIterator;
-import javax.jcr.nodetype.ConstraintViolationException;
-import javax.jcr.version.Version;
-import javax.jcr.version.VersionException;
-import javax.jcr.version.VersionHistory;
-import javax.jcr.version.VersionIterator;
-public class VersionHistoryImpl extends NodeImpl implements VersionHistory {
-
-    /**
-     * the default logger.
-     */
-    private static Logger log = Logger.getLogger(VersionHistoryImpl.class);
+public class VersionHistoryImpl extends AbstractVersionHistory {
-     * @see VersionHistory#getRootVersion()
+     * {@inheritDoc}
-    public Version getRootVersion() throws RepositoryException {
-        return (Version) session.getNodeByUUID(history.getRootVersion().getId());
-    }
-
-    /**
-     * @see VersionHistory#getAllVersions()
-     */
-    public VersionIterator getAllVersions() throws RepositoryException {
-        return new VersionIteratorImpl(session, history.getRootVersion());
-    }
-
-    /**
-     * @see VersionHistory#getVersion(String)
-     */
-    public Version getVersion(String versionName)
-            throws VersionException, RepositoryException {
-        try {
-            QName name = QName.fromJCRName(versionName, session.getNamespaceResolver());
-            InternalVersion v = history.getVersion(name);
-            if (v == null) {
-                throw new VersionException("No version with name '" + versionName + "' exists in this version history.");
-            }
-            return (Version) session.getNodeByUUID(v.getId());
-        } catch (IllegalNameException e) {
-            throw new VersionException(e);
-        } catch (UnknownPrefixException e) {
-            throw new VersionException(e);
-        }
-    }
-
-    /**
-     * @see VersionHistory#getVersionByLabel(String)
-     */
-    public Version getVersionByLabel(String label) throws RepositoryException {
-        try {
-            QName qLabel = QName.fromJCRName(label, session.getNamespaceResolver());
-            InternalVersion v = history.getVersionByLabel(qLabel);
-            if (v == null) {
-                throw new VersionException("No version with label '" + label + "' exists in this version history.");
-            }
-            return (Version) session.getNodeByUUID(v.getId());
-        } catch (IllegalNameException e) {
-            throw new VersionException(e);
-        } catch (UnknownPrefixException e) {
-            throw new VersionException(e);
-        }
-    }
-
-    /**
-     * @see VersionHistory#addVersionLabel(String, String, boolean)
-     */
-    public void addVersionLabel(String versionName, String label, boolean move)
-            throws VersionException, RepositoryException {
-        try {
-            session.getVersionManager().setVersionLabel(this,
-                    QName.fromJCRName(versionName, session.getNamespaceResolver()),
-                    QName.fromJCRName(label, session.getNamespaceResolver()),
-                    move);
-        } catch (IllegalNameException e) {
-            throw new VersionException(e);
-        } catch (UnknownPrefixException e) {
-            throw new VersionException(e);
-        }
-    }
-
-    /**
-     * @see VersionHistory#removeVersionLabel(String)
-     */
-    public void removeVersionLabel(String label) throws RepositoryException {
-        try {
-            Version existing = session.getVersionManager().setVersionLabel(this,
-                    null,
-                    QName.fromJCRName(label, session.getNamespaceResolver()),
-                    true);
-            if (existing == null) {
-                throw new VersionException("No version with label '" + label + "' exists in this version history.");
-            }
-        } catch (IllegalNameException e) {
-            throw new VersionException(e);
-        } catch (UnknownPrefixException e) {
-            throw new VersionException(e);
-        }
-    }
-
-
-    /**
-     * @see VersionHistory#getVersionLabels
-     */
-    public String[] getVersionLabels() {
-        try {
-            QName[] labels = history.getVersionLabels();
-            String[] ret = new String[labels.length];
-            for (int i = 0; i < labels.length; i++) {
-                ret[i] = labels[i].toJCRName(session.getNamespaceResolver());
-            }
-            return ret;
-        } catch (NoPrefixDeclaredException e) {
-            throw new IllegalArgumentException("Unable to resolve label name: " + e.toString());
-        }
-    }
-
-    /**
-     * @see VersionHistory#getVersionLabels(Version)
-     */
-    public String[] getVersionLabels(Version version)
-            throws VersionException, RepositoryException {
-        checkOwnVersion(version);
-        try {
-            QName[] labels = ((VersionImpl) version).getInternalVersion().getLabels();
-            String[] ret = new String[labels.length];
-            for (int i = 0; i < labels.length; i++) {
-                ret[i] = labels[i].toJCRName(session.getNamespaceResolver());
-            }
-            return ret;
-        } catch (NoPrefixDeclaredException e) {
-            throw new IllegalArgumentException("Unable to resolve label name: " + e.toString());
-        }
-    }
-
-    /**
-     * @see VersionHistory#hasVersionLabel(String)
-     */
-    public boolean hasVersionLabel(String label) {
-        try {
-            QName qLabel = QName.fromJCRName(label, session.getNamespaceResolver());
-            return history.getVersionByLabel(qLabel) != null;
-        } catch (IllegalNameException e) {
-            throw new IllegalArgumentException("Unable to resolve label: " + e);
-        } catch (UnknownPrefixException e) {
-            throw new IllegalArgumentException("Unable to resolve label: " + e);
-        }
-    }
-
-    /**
-     * @see VersionHistory#hasVersionLabel(Version, String)
-     */
-    public boolean hasVersionLabel(Version version, String label)
-            throws VersionException, RepositoryException {
-        checkOwnVersion(version);
-        try {
-            QName qLabel = QName.fromJCRName(label, session.getNamespaceResolver());
-            return ((VersionImpl) version).getInternalVersion().hasLabel(qLabel);
-        } catch (IllegalNameException e) {
-            throw new VersionException(e);
-        } catch (UnknownPrefixException e) {
-            throw new VersionException(e);
-        }
-    }
-
-    /**
-     * @see VersionHistory#removeVersion(String)
-     */
-    public void removeVersion(String versionName)
-            throws UnsupportedRepositoryOperationException, VersionException,
-            RepositoryException {
-        try {
-            session.getVersionManager().removeVersion(this,
-                    QName.fromJCRName(versionName, session.getNamespaceResolver()));
-        } catch (IllegalNameException e) {
-            throw new RepositoryException(e);
-        } catch (UnknownPrefixException e) {
-            throw new RepositoryException(e);
-        }
-    }
-
-    /**
-     * @see javax.jcr.Node#getUUID()
-     */
-    public String getUUID()
-            throws UnsupportedRepositoryOperationException, RepositoryException {
-        return history.getId();
-    }
-
-    /**
-     * @see javax.jcr.Item#isSame(javax.jcr.Item)
-     */
-    public boolean isSame(Item otherItem) {
-        if (otherItem instanceof VersionHistoryImpl) {
-            // since all version histories live in the same workspace, we can compare the uuids
-            return ((VersionHistoryImpl) otherItem).history.getId().equals(history.getId());
-        } else {
-            return false;
-        }
-    }
-
-    /**
-     * Returns the UUID of the node that was versioned.
-     *
-     * @return
-     */
-    public String getVersionableUUID() throws RepositoryException {
-        return history.getVersionableUUID();
-    }
-
-    /**
-     * Checks if the given version belongs to this history
-     *
-     * @param version
-     * @throws VersionException
-     * @throws RepositoryException
-     */
-    private void checkOwnVersion(Version version)
-            throws VersionException, RepositoryException {
-        if (!version.getParent().isSame(this)) {
-            throw new VersionException("Specified version not contained in this history.");
-        }
-    }
-
-    /**
-     * Returns the internal version history
-     *
-     * @return
-     */
-    public InternalVersionHistory getInternalVersionHistory() {
+    protected InternalVersionHistory getInternalVersionHistory() {
-
-    //--------------------------------------< Overwrite "protected" methods >---
-
-
-    /**
-     * Always throws a {@link javax.jcr.nodetype.ConstraintViolationException} since this node
-     * is protected.
-     *
-     * @throws javax.jcr.nodetype.ConstraintViolationException
-     */
-    public void update(String srcWorkspaceName) throws ConstraintViolationException {
-        String msg = "update operation not allowed on a version history node: " + safeGetJCRPath();
-        log.debug(msg);
-        throw new ConstraintViolationException(msg);
-    }
-
-    /**
-     * Always throws a {@link javax.jcr.nodetype.ConstraintViolationException} since this node
-     * is protected.
-     *
-     * @throws javax.jcr.nodetype.ConstraintViolationException
-     */
-    public NodeIterator merge(String srcWorkspace, boolean bestEffort)
-            throws ConstraintViolationException {
-        String msg = "merge operation not allowed on a version history node: " + safeGetJCRPath();
-        log.debug(msg);
-        throw new ConstraintViolationException(msg);
-    }

UPD43 UPD42 UPD83 INS65 INS65 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL11 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL52 DEL33 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL67 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL40 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL40 DEL42 DEL40 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL9 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL52 DEL32 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL65 DEL66 DEL40 DEL65 DEL66 DEL66 DEL65 DEL40 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL45 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL31 DEL66 DEL40 DEL65 DEL66 DEL66 DEL65 DEL40 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL45 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL31