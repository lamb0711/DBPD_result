JCR-73: Improved o.a.j.core.jndi javadocs.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160274 13f79535-47bb-0310-9956-ffa450edef68

- * <code>BindableRepository</code> ...
+ * A referenceable and serializable content repository proxy.
+ * This class implements the Proxy design pattern (GoF) for the
+ * Jackrabbit Repository implementation. The proxy implementation
+ * delays the instantiation of the actual Repository instance and
+ * implements serialization and JNDI referenceability by keeping
+ * track of the repository configuration parameters.
+ * <p>
+ * A BindableRepository instance contains the configuration file
+ * and home directory paths of a Jackrabbit repository. The separate
+ * {@link #init() init()} method is used to create a transient
+ * {@link RepositoryImpl RepositoryImpl} instance to which all the
+ * JCR API calls are delegated.
+ * <p>
+ * An instance of this class is normally always also initialized.
+ * The uninitialized state is only used briefly during the static
+ * {@link #create(String, String) create} method and during
+ * serialization and JNDI "referenciation".
+    /** The serialization UID of this class. */
-    /**
-     * path to the configuration file of the repository
-     */
+    /** The repository configuration file path. */
-    /**
-     * repository home directory
-     */
+
+    /** The repository home directory path. */
+    /** The delegate repository instance. Created by {@link #init() init}. */
+    /**
+     * Creates a BindableRepository instance with the given configuration
+     * information, but does not create the underlying repository instance.
+     *
+     * @param configFilePath repository configuration file path
+     * @param repHomeDir repository home directory path
+     */
+    /**
+     * Creates an initialized BindableRepository instance using the given
+     * configuration information.
+     *
+     * @param configFilePath repository configuration file path
+     * @param repHomeDir repository home directory path
+     * @return initialized repository instance
+     * @throws RepositoryException if the repository cannot be created
+     */
+    /**
+     * Creates the underlying repository instance.
+     *
+     * @throws RepositoryException if the repository cannot be created
+     */
-        RepositoryConfig config = RepositoryConfig.create(configFilePath, repHomeDir);
+        RepositoryConfig config =
+            RepositoryConfig.create(configFilePath, repHomeDir);
+
+     * Delegated to the underlying repository instance.
+     * Delegated to the underlying repository instance.
+     * Delegated to the underlying repository instance.
+     * Delegated to the underlying repository instance.
+     * Delegated to the underlying repository instance.
+     * Delegated to the underlying repository instance.
+
-     * {@inheritDoc}
+     * Creates a JNDI reference for this content repository. The returned
+     * reference holds the configuration information required to create a
+     * copy of this instance.
+     *
+     * @return the created JNDI reference
+     * @throws NamingException on JNDI errors
-        Reference ref = new Reference(BindableRepository.class.getName(),
+        Reference ref = new Reference(
+                BindableRepository.class.getName(),
-                null);  // factory location
+                null); // no classpath defined
+
+    /**
+     * Serializes the repository configuration. The default serialization
+     * mechanism is used, as the underlying delegate repository is referenced
+     * using a transient variable.
+     *
+     * @param out the serialization stream
+     * @throws IOException on IO errors
+     * @see Serializable
+     */
+    /**
+     * Deserializes a repository instance. The repository configuration
+     * is deserialized using the standard deserialization mechanism, and
+     * the underlying delegate repository is created using the
+     * {@link #init() init} method.
+     *
+     * @param in the serialization stream
+     * @throws IOException if configuration information cannot be deserialized
+     *                     or if the configured repository cannot be created
+     * @throws ClassNotFoundException on deserialization errors
+     */

INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS68 INS66 INS42 INS66 INS68 INS66 INS66 UPD66 UPD66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS69 INS69 INS68 INS66 INS68 INS66 INS43 INS43 INS42 INS42 INS42 INS42 DEL65 DEL65