JCR-4066: spi2dav: use HttpClient4 based WebDAV API in remoting code

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1774468 13f79535-47bb-0310-9956-ffa450edef68

+import java.nio.charset.Charset;
+import java.util.Collections;
+
-import org.apache.commons.httpclient.HttpClient;
-import org.apache.commons.httpclient.HttpException;
-import org.apache.commons.httpclient.HttpMethod;
-import org.apache.commons.httpclient.methods.RequestEntity;
-import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
-import org.apache.commons.httpclient.methods.multipart.Part;
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.entity.UrlEncodedFormEntity;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.entity.ContentType;
+import org.apache.http.entity.mime.FormBodyPart;
+import org.apache.http.entity.mime.MultipartEntityBuilder;
+import org.apache.http.message.BasicNameValuePair;
-import org.apache.jackrabbit.webdav.client.methods.PropFindMethod;
+import org.apache.jackrabbit.webdav.client.methods.HttpPropfind;
-            ValueLoader loader = new ValueLoader(getClient(sessionInfo));
+            ValueLoader loader = new ValueLoader(getClient(sessionInfo), getContext(sessionInfo));
-            GetMethod method = new GetMethod(uri + "." + depth + ".json");
+            HttpGet request = new HttpGet(uri + "." + depth + ".json");
+            HttpResponse response = null;
-                int statusCode = getClient(sessionInfo).executeMethod(method);
+                response = executeRequest(sessionInfo, request);
+                int statusCode = response.getStatusLine().getStatusCode();
-                    if (method.getResponseContentLength() == 0) {
+                    HttpEntity entity = response.getEntity();
+                    if (entity.getContentLength() == 0) {
-                    ps.parse(method.getResponseBodyAsStream(), method.getResponseCharSet());
+                    ps.parse(entity.getContent(), ContentType.get(entity).getCharset().name());
-                    throw ExceptionConverter.generate(new DavException(statusCode, "Unable to retrieve NodeInfo for " + uri), method);
+                    throw ExceptionConverter.generate(new DavException(statusCode, "Unable to retrieve NodeInfo for " + uri), request);
-            } catch (HttpException e) {
-                throw ExceptionConverter.generate(new DavException(method.getStatusCode(), "Unable to retrieve NodeInfo for " + uri));
-                method.releaseConnection();
+                request.releaseConnection();
-        PropFindMethod method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uri, LAZY_PROPERTY_NAME_SET, DavConstants.DEPTH_0);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpPropfind(uri, LAZY_PROPERTY_NAME_SET, DavConstants.DEPTH_0);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length != 1) {
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length != 1) {
-            MultiStatusResponse response = responses[0];
-            DavPropertySet props = response.getProperties(DavServletResponse.SC_OK);
+            MultiStatusResponse mresponse = mresponses[0];
+            DavPropertySet props = mresponse.getProperties(DavServletResponse.SC_OK);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        PostMethod method = null;
+        HttpPost request = null;
-            method = new PostMethod(getWorkspaceURI(sessionInfo));
+            request = new HttpPost(getWorkspaceURI(sessionInfo));
+            request.setHeader("Referer", request.getURI().toASCIIString());
+            addIfHeader(sessionInfo, request);
+
-
-            method.addParameter(PARAM_COPY, args.toString());
-            addIfHeader(sessionInfo, method);
-            getClient(sessionInfo).executeMethod(method);
-
-            method.checkSuccess();
+            List<BasicNameValuePair> nvps = Collections.singletonList(new BasicNameValuePair(PARAM_COPY, args.toString()));
+            HttpEntity entity = new UrlEncodedFormEntity(nvps, Charset.forName("UTF-8"));
+            request.setEntity(entity);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            throw ExceptionConverter.generate(e, method);
+            throw ExceptionConverter.generate(e, request);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        PostMethod method = null;
+        HttpPost request = null;
-            method = new PostMethod(getWorkspaceURI(sessionInfo));
+            request = new HttpPost(getWorkspaceURI(sessionInfo));
+            request.setHeader("Referer", request.getURI().toASCIIString());
+            addIfHeader(sessionInfo, request);
-
-            method.addParameter(PARAM_CLONE, args.toString());
-            addIfHeader(sessionInfo, method);
-            getClient(sessionInfo).executeMethod(method);
-
-            method.checkSuccess();
+            List<BasicNameValuePair> nvps = Collections.singletonList(new BasicNameValuePair(PARAM_CLONE, args.toString()));
+            HttpEntity entity = new UrlEncodedFormEntity(nvps, Charset.forName("UTF-8"));
+            request.setEntity(entity);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            throw ExceptionConverter.generate(e, method);
+            throw ExceptionConverter.generate(e, request);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-    private static void addIfHeader(SessionInfo sInfo, HttpMethod method) {
+    private static void addIfHeader(SessionInfo sInfo, HttpUriRequest request) {
-            initMethod(method, sInfo, true);
+            initMethod(request, sInfo, true);
-        private final List<Part> parts;
+        private final List<FormBodyPart> parts;
+        private final List<QValue> binaries;
-        private PostMethod method; // TODO: use PATCH request instead.
+        private HttpPost request; // TODO: use PATCH request instead.
-            parts = new ArrayList<Part>();
-            diff = new ArrayList<String>();
+            this.parts = new ArrayList<FormBodyPart>();
+            this.binaries = new ArrayList<QValue>();
+            this.diff = new ArrayList<String>();
+            request.setHeader("Referer", request.getURI().toASCIIString());
+
-            addIfHeader(sessionInfo, method);
+            addIfHeader(sessionInfo, request);
-            Part[] partArr = parts.toArray(new Part[parts.size()]);
-            RequestEntity entity = new MultipartRequestEntity(partArr, method.getParams());
-            method.setRequestEntity(entity);
-            HttpClient client = getClient(sessionInfo);
+            MultipartEntityBuilder b = MultipartEntityBuilder.create();
+            for (FormBodyPart p : parts) {
+                b.addPart(p.getName(), p.getBody());
+            }
+            request.setEntity(b.build());
+
+            org.apache.http.client.HttpClient client = getClient(sessionInfo);
-                client.executeMethod(method);
-                method.checkSuccess();
+                HttpResponse response = client.execute(request, getContext(sessionInfo));
+                request.checkSuccess(response);
-                throw ExceptionConverter.generate(e, method);
+                throw ExceptionConverter.generate(e, request);
-                method.releaseConnection();
+                request.releaseConnection();
-            method = null;
+            request = null;
-            for (Part part : parts) {
-                if (part instanceof BinaryPart) {
-                    ((BinaryPart) part).dispose();
+            for (QValue bin : binaries) {
+                if (bin instanceof ValueLoader.Target) {
+                    ((ValueLoader.Target) bin).reset();
-            return method == null;
+            return request == null;
-            if (method == null) {
+            if (request == null) {
-                method = new PostMethod(uri);
+                request = new HttpPost(uri);
-                    method.setRequestHeader(ifH.getHeaderName(), ifH.getHeaderValue());
+                    request.setHeader(ifH.getHeaderName(), ifH.getHeaderValue());
-            appendDiff(SYMBOL_ADD_NODE, jcrPath, ((JsonTree) contentTree).toJsonString(parts));
+            appendDiff(SYMBOL_ADD_NODE, jcrPath, ((JsonTree) contentTree).toJsonString(parts, binaries));
-                Utils.addPart(jcrPropPath, value, resolver, parts);
+                Utils.addPart(jcrPropPath, value, resolver, parts, binaries);
-                    Utils.addPart(jcrPropPath, values[i], resolver, parts);
+                    Utils.addPart(jcrPropPath, values[i], resolver, parts, binaries);
-        private final List<Part> parts = new ArrayList<Part>();
+        private final List<FormBodyPart> parts = new ArrayList<FormBodyPart>();
+        private final List<QValue> binaries = new ArrayList<QValue>();
-                Utils.addPart(jcrPropPath, value, getResolver(), parts);
+                Utils.addPart(jcrPropPath, value, getResolver(), parts, binaries);
-                    Utils.addPart(jcrPropPath, value, getResolver(), parts);
+                    Utils.addPart(jcrPropPath, value, getResolver(), parts, binaries);
-        String toJsonString(List<Part> batchParts) throws RepositoryException {
+        String toJsonString(List<FormBodyPart> batchParts, List<QValue> bins) throws RepositoryException {
+            bins.addAll(this.binaries);
+                bins.addAll(((JsonTree) child).getBinaries());
-        private List<Part> getParts() {
+        private List<FormBodyPart> getParts() {
-    }
+
+        private List<QValue> getBinaries() {
+            return binaries;
+        }
+}

INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 UPD40 INS40 UPD40 UPD40 INS40 INS40 UPD40 UPD40 UPD40 INS23 INS23 INS31 UPD43 UPD42 UPD74 INS83 INS83 INS74 INS59 UPD43 UPD74 INS83 INS83 INS74 INS59 MOV8 INS44 UPD74 INS83 INS74 INS42 INS8 UPD43 UPD43 MOV21 MOV21 MOV21 MOV21 UPD43 MOV21 MOV21 MOV21 MOV21 MOV21 UPD42 UPD43 INS43 INS43 INS42 UPD42 UPD42 INS21 INS21 INS60 INS70 UPD43 INS43 INS43 INS42 INS14 INS25 MOV60 MOV21 MOV21 MOV60 MOV21 INS70 MOV21 UPD74 INS74 INS42 INS21 UPD43 INS43 INS43 INS41 INS60 UPD42 UPD42 INS60 UPD42 UPD42 INS60 INS60 INS21 INS60 UPD42 UPD42 INS60 INS60 INS21 INS60 UPD42 INS42 INS42 INS7 INS32 INS43 INS59 INS44 INS42 INS8 UPD43 UPD42 UPD42 UPD74 INS42 INS42 INS74 MOV27 INS8 MOV8 MOV44 INS42 MOV8 MOV32 UPD43 INS43 INS43 INS32 UPD42 INS42 INS42 INS42 MOV43 UPD43 INS43 INS59 INS43 INS59 INS74 INS59 INS43 INS59 INS32 INS43 INS59 INS74 INS59 INS43 INS59 INS32 INS43 INS59 INS22 INS22 INS14 INS22 INS42 INS42 INS45 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS42 INS21 UPD42 UPD42 INS32 INS40 INS60 UPD42 UPD43 UPD42 UPD42 UPD42 UPD43 INS43 INS43 MOV60 INS21 MOV60 MOV25 MOV42 UPD42 MOV13 UPD42 INS42 INS42 INS42 INS42 INS22 INS21 UPD42 UPD42 INS42 INS42 INS33 INS21 UPD42 INS42 INS42 INS32 UPD42 INS42 UPD42 UPD40 UPD42 UPD42 UPD42 UPD42 UPD42 INS45 INS32 UPD42 INS43 INS43 INS42 INS32 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS45 INS32 UPD42 INS43 INS43 INS42 INS32 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 INS42 UPD42 UPD42 INS52 INS42 UPD74 INS52 INS42 INS74 INS52 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS43 INS59 UPD42 INS42 UPD42 INS42 INS42 INS32 MOV27 INS8 INS52 INS42 INS32 MOV43 INS32 UPD43 INS7 UPD43 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD43 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD43 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD43 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 UPD42 INS42 UPD42 UPD42 UPD43 UPD42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 MOV60 MOV21 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS32 INS60 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 MOV42 INS42 INS43 INS42 MOV32 INS42 INS42 INS42 INS45 UPD42 UPD42 UPD42 MOV42 INS42 INS43 INS42 MOV32 INS42 INS42 INS42 INS45 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS40 UPD43 INS36 INS42 INS42 INS42 INS42 UPD42 INS43 INS59 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS11 UPD42 UPD42 INS42 INS42 INS32 INS32 UPD42 INS43 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV32 INS42 UPD43 UPD42 INS42 INS32 UPD42 INS40 UPD42 MOV42 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL14 DEL32 DEL53 DEL8 DEL12 DEL32 DEL42 DEL32 DEL21 DEL32 DEL32 DEL21 DEL32 DEL32 DEL21 DEL42 DEL42 DEL43 DEL85 DEL5 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL8 DEL25 DEL42 DEL70 DEL8