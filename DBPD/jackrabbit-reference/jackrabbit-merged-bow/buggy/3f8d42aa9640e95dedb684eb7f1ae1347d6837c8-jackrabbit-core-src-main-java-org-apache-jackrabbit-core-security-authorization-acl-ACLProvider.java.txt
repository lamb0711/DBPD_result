JCR-2268 Generify Security API


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@806534 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.security.AccessControlPolicy;
-import javax.jcr.security.Privilege;
-import javax.jcr.security.AccessControlList;
-import javax.jcr.security.AccessControlManager;
-import org.apache.jackrabbit.api.security.principal.PrincipalManager;
-import org.apache.jackrabbit.core.id.NodeId;
-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.PropertyImpl;
-import org.apache.jackrabbit.core.ItemImpl;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.observation.SynchronousEventListener;
-import org.apache.jackrabbit.core.security.SecurityConstants;
-import org.apache.jackrabbit.core.security.authorization.AbstractAccessControlProvider;
-import org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions;
-import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
-import org.apache.jackrabbit.core.security.authorization.AccessControlEditor;
-import org.apache.jackrabbit.core.security.authorization.CompiledPermissions;
-import org.apache.jackrabbit.core.security.authorization.Permission;
-import org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry;
-import org.apache.jackrabbit.core.security.authorization.UnmodifiableAccessControlList;
-import org.apache.jackrabbit.core.security.authorization.AccessControlEntryIterator;
-import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
-import org.apache.jackrabbit.util.Text;
-import org.apache.commons.collections.map.ListOrderedMap;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import java.security.Principal;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
-import java.security.Principal;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Arrays;
+import javax.jcr.security.AccessControlEntry;
+import javax.jcr.security.AccessControlList;
+import javax.jcr.security.AccessControlManager;
+import javax.jcr.security.AccessControlPolicy;
+import javax.jcr.security.Privilege;
+
+import org.apache.jackrabbit.api.security.principal.PrincipalManager;
+import org.apache.jackrabbit.core.ItemImpl;
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.core.PropertyImpl;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.id.NodeId;
+import org.apache.jackrabbit.core.observation.SynchronousEventListener;
+import org.apache.jackrabbit.core.security.SecurityConstants;
+import org.apache.jackrabbit.core.security.authorization.AbstractAccessControlProvider;
+import org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions;
+import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
+import org.apache.jackrabbit.core.security.authorization.AccessControlEditor;
+import org.apache.jackrabbit.core.security.authorization.AccessControlEntryIterator;
+import org.apache.jackrabbit.core.security.authorization.CompiledPermissions;
+import org.apache.jackrabbit.core.security.authorization.Permission;
+import org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry;
+import org.apache.jackrabbit.core.security.authorization.UnmodifiableAccessControlList;
+import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
+import org.apache.jackrabbit.util.Text;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-        for (int i = 0; i < elems.length; i++) {
-            if (N_POLICY.equals(elems[i].getName())) {
+        for (Path.Element elem : elems) {
+            if (N_POLICY.equals(elem.getName())) {
-     * @param absPath
+     * @param absPath absolute path
-        List acls = new ArrayList();
+        List<AccessControlList> acls = new ArrayList<AccessControlList>();
-        return (AccessControlList[]) acls.toArray(new AccessControlList[acls.size()]);
+        return acls.toArray(new AccessControlList[acls.size()]);
-     * @return
-     * @throws RepositoryException
+     * @return the node
+     * @throws RepositoryException if an error occurs
-     * @throws RepositoryException
+     * @throws RepositoryException if an error occurs
-    private void collectAcls(NodeImpl node, List acls) throws RepositoryException {
+    private void collectAcls(NodeImpl node, List<AccessControlList> acls) throws RepositoryException {
-     * @param node
+     * @param node hte node
-     * @throws RepositoryException
+     * @throws RepositoryException if an error occurs
-        private final List principalNames;
+        private final List<String> principalNames;
-            principalNames = new ArrayList(principals.size());
+            principalNames = new ArrayList<String>(principals.size());
-         * @param principalnames
+         * @param principalnames names of the principals
-                    Iterator itr = principalnames.iterator();
-                    while (itr.hasNext()) {
+                    for (String principalname : principalnames) {
-                        stmt.append("'").append(itr.next().toString()).append("'");
+                        stmt.append("'").append(principalname).append("'");
-         * @param absPath
-         * @param permissions
-         * @return
+         * @param absPath absolute path
+         * @param permissions permission bits
+         * @return <code>true</code> if the permissions are granted
-                                    for (int i = 0; i < vs.length; i++) {
-                                        if (jcrReadPrivilegeName.equals(vs[i].getString())) {
+                                    for (Value v : vs) {
+                                        if (jcrReadPrivilegeName.equals(v.getString())) {
-        private final ListOrderedMap principalNamesToEntries;
+        private final Map<String, List<AccessControlEntry>> principalNamesToEntries;
-        private Entries(NodeImpl node, Collection principalNames) throws RepositoryException {
-            principalNamesToEntries = new ListOrderedMap();
-            for (Iterator it = principalNames.iterator(); it.hasNext();) {
-                principalNamesToEntries.put(it.next(), new ArrayList());
+        private Entries(NodeImpl node, Collection<String> principalNames) throws RepositoryException {
+            principalNamesToEntries = new LinkedHashMap<String, List<AccessControlEntry>>();
+            for (String name : principalNames) {
+                principalNamesToEntries.put(name, new ArrayList<AccessControlEntry>());
-            List entries = new ArrayList();
-            for (Iterator it =
-                    principalNamesToEntries.asList().iterator(); it.hasNext();) {
-                Object key = it.next();
-                entries.addAll((List) principalNamesToEntries.get(key));
+            List<AccessControlEntry> entries = new ArrayList<AccessControlEntry>();
+            for (List<AccessControlEntry> list: principalNamesToEntries.values()) {
+                entries.addAll(list);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 INS70 INS74 INS74 INS74 INS44 INS42 INS8 INS66 INS74 MOV32 INS66 INS66 INS66 MOV43 INS43 INS66 INS66 MOV43 INS43 INS43 INS43 INS74 INS74 INS70 INS70 INS43 INS42 MOV25 MOV43 INS43 INS42 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS43 MOV43 INS43 INS44 INS42 INS8 INS74 INS44 INS32 INS8 INS40 INS42 INS74 UPD42 MOV42 INS42 INS42 INS43 INS42 MOV21 MOV43 INS43 INS74 INS42 MOV42 UPD42 MOV42 MOV21 MOV43 MOV43 INS74 INS74 UPD42 MOV42 INS42 INS74 MOV43 INS43 INS42 MOV43 INS43 INS70 INS43 INS43 INS74 UPD42 MOV42 MOV43 INS43 UPD42 MOV42 UPD42 MOV42 INS42 INS44 INS42 MOV8 INS42 INS42 INS43 INS43 INS74 INS42 INS43 INS42 UPD42 MOV42 INS42 MOV43 INS43 UPD42 MOV42 INS42 UPD42 MOV42 INS70 INS44 INS42 INS8 INS43 INS42 MOV25 INS42 INS42 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL85 DEL5 DEL11 DEL42 DEL42 DEL32 DEL32 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL43 DEL43 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL8 DEL24 DEL42 DEL42 DEL32 DEL11 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL24