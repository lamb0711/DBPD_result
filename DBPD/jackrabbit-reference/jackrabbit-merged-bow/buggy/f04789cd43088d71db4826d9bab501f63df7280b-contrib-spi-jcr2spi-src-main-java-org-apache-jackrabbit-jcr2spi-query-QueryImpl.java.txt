work in progress

jcr2spi
- HierarchyManager: fixing methods with ItemId param
- HierarchyManagerImpl(s): removing unused methods
- ItemManagerImpl: replacing NodeId as cacheKey
- ItemImpl: remove ISM field

jcr2spi/xml
- ImporterImpl renamed to SessionImporter (used for s-import only)
- xml import: Use UUID String instead of creating NodeIds
- ReferenceChangeTracker: remove usage of spi NodeId

jcr2spi/state
- SessionItemStateManager: ValueFactory not needed since QPropertyDefinition returns qualified values.

jcr2spi/util
- LogUtil: add 'saveGetJCRName' utility method

jcr2spi/locking
- locking: LockManager to use NodeState instead of NodeId
- locking: removing locktoken from Session checks if Session is lock holder

jcr2spi/query
- NodeIteratorImpl: fix commented code, that allows to retrieve
  search results from IdIterator returned from QueryInfo
- minor reformatting, javadoc

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430791 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.SessionImpl;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
+import org.apache.jackrabbit.spi.QueryInfo;
+import javax.jcr.Session;
-    protected SessionImpl session;
+    private final Session session;
-     * The namespace resolver of the session that executes this query.
+     * The namespace nsResolver of the session that executes this query.
-    protected NamespaceResolver resolver;
+    private final NamespaceResolver nsResolver;
-    protected ItemManager itemManager;
+    private final ItemManager itemManager;
+
+    /**
+     * The item state manager of the session that executes this query.
+     */
+    private final ItemStateManager itemStateManager;
-    protected String statement;
+    private String statement;
-    protected String language;
+    private String language;
-    protected Node node;
+    private Node node;
-    protected WorkspaceManager wspManager;
+    private WorkspaceManager wspManager;
-     * Flag indicating whether this query is initialized.
-     */
-    private boolean initialized = false;
-
-    /**
-     * Initializes this query.
+     * Creates a new query.
+     * @param nsResolver the namespace resolver to be used.
+     * @param itemStateManager the item state manager of that session.
-    public void init(SessionImpl session,
-                     NamespaceResolver resolver,
-                     ItemManager itemMgr,
+    public QueryImpl(Session session, NamespaceResolver nsResolver,
+                     ItemManager itemMgr, ItemStateManager itemStateManager,
-                     String statement,
-                     String language) throws InvalidQueryException {
-        checkNotInitialized();
+                     String statement, String language) throws InvalidQueryException {
-        this.resolver = resolver;
+        this.nsResolver = nsResolver;
+        this.itemStateManager = itemStateManager;
-        initialized = true;
-     * Initializes this query from a node.
+     * Creates a query from a node.
+     * @param nsResolver the namespace resolver to be used.
-    public void init(SessionImpl session,
-                     NamespaceResolver resolver,
-                     ItemManager itemMgr,
-                     WorkspaceManager wspManager,
-                     Node node)
-            throws InvalidQueryException, RepositoryException {
-        checkNotInitialized();
+    public QueryImpl(Session session, NamespaceResolver nsResolver,
+                     ItemManager itemMgr, ItemStateManager itemStateManager,
+                     WorkspaceManager wspManager, Node node)
+        throws InvalidQueryException, RepositoryException {
+
-        this.resolver = resolver;
+        this.nsResolver = nsResolver;
+        this.itemStateManager = itemStateManager;
-            if (!node.isNodeType(NameFormat.format(QName.NT_QUERY, resolver))) {
-                throw new InvalidQueryException("node is not of type nt:query");
+            if (!node.isNodeType(NameFormat.format(QName.NT_QUERY, nsResolver))) {
+                throw new InvalidQueryException("Node is not of type nt:query");
-            statement = node.getProperty(NameFormat.format(QName.JCR_STATEMENT, resolver)).getString();
-            language = node.getProperty(NameFormat.format(QName.JCR_LANGUAGE, resolver)).getString();
+            statement = node.getProperty(NameFormat.format(QName.JCR_STATEMENT, nsResolver)).getString();
+            language = node.getProperty(NameFormat.format(QName.JCR_LANGUAGE, nsResolver)).getString();
-        initialized = true;
-     * {@inheritDoc}
+     * @see Query#execute() 
-        checkInitialized();
-        return new QueryResultImpl(itemManager,
-                wspManager.executeQuery(statement, language), resolver);
+        QueryInfo qI = wspManager.executeQuery(statement, language);
+        return new QueryResultImpl(itemManager, itemStateManager, qI, nsResolver);
-     * {@inheritDoc}
+     * @see Query#getStatement()
-        checkInitialized();
-     * {@inheritDoc}
+     * @see Query#getLanguage()
-        checkInitialized();
-     * {@inheritDoc}
+     * @see Query#getStoredQueryPath()
-    public String getStoredQueryPath()
-            throws ItemNotFoundException, RepositoryException {
-        checkInitialized();
+    public String getStoredQueryPath() throws ItemNotFoundException, RepositoryException {
-            throw new ItemNotFoundException("not a persistent query");
+            throw new ItemNotFoundException("Not a persistent query.");
-     * {@inheritDoc}
+     * @see Query#storeAsNode(String)
-    public Node storeAsNode(String absPath)
-            throws ItemExistsException,
-            PathNotFoundException,
-            VersionException,
-            ConstraintViolationException,
-            LockException,
-            UnsupportedRepositoryOperationException,
-            RepositoryException {
+    public Node storeAsNode(String absPath) throws ItemExistsException,
+        PathNotFoundException, VersionException, ConstraintViolationException,
+        LockException, UnsupportedRepositoryOperationException, RepositoryException {
-        checkInitialized();
-            Path p = PathFormat.parse(absPath, resolver).getNormalizedPath();
+            Path p = PathFormat.parse(absPath, nsResolver).getNormalizedPath();
-            String jcrParent = PathFormat.format(p.getAncestor(1), resolver);
+            String jcrParent = PathFormat.format(p.getAncestor(1), nsResolver);
-            String relPath = PathFormat.format(p, resolver).substring(1);
-            String ntName = NameFormat.format(QName.NT_QUERY, resolver);
+            String relPath = PathFormat.format(p, nsResolver).substring(1);
+            String ntName = NameFormat.format(QName.NT_QUERY, nsResolver);
-            queryNode.setProperty(NameFormat.format(QName.JCR_LANGUAGE, resolver), language);
-            queryNode.setProperty(NameFormat.format(QName.JCR_STATEMENT, resolver), statement);
+            queryNode.setProperty(NameFormat.format(QName.JCR_LANGUAGE, nsResolver), language);
+            queryNode.setProperty(NameFormat.format(QName.JCR_STATEMENT, nsResolver), statement);
-
-    //-----------------------------< internal >---------------------------------
-
-    /**
-     * Checks if this query is not yet initialized and throws an
-     * <code>IllegalStateException</code> if it is already initialized.
-     */
-    protected void checkNotInitialized() {
-        if (initialized) {
-            throw new IllegalStateException("already initialized");
-        }
-    }
-
-    /**
-     * Checks if this query is initialized and throws an
-     * <code>IllegalStateException</code> if it is not yet initialized.
-     */
-    protected void checkInitialized() {
-        if (!initialized) {
-            throw new IllegalStateException("not initialized");
-        }
-    }

MOV26 INS26 INS26 MOV23 UPD40 INS40 INS40 UPD83 INS83 UPD43 UPD83 INS83 UPD83 INS83 INS83 INS43 UPD83 UPD83 UPD83 UPD83 UPD42 INS44 MOV21 UPD42 INS44 MOV21 MOV21 UPD42 UPD42 INS42 UPD42 INS65 INS65 UPD43 UPD42 INS43 INS42 INS65 UPD43 UPD42 INS43 INS42 INS65 INS60 INS65 INS65 INS65 INS65 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS66 UPD42 INS42 UPD66 INS42 INS66 UPD42 INS42 INS7 INS68 INS66 INS43 INS59 INS68 INS68 INS68 INS68 UPD42 INS22 INS42 INS22 INS42 UPD42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 UPD42 INS52 INS42 INS52 INS42 UPD42 INS43 MOV43 MOV43 UPD45 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 UPD42 UPD42 UPD42 UPD42 DEL39 DEL9 DEL39 DEL42 DEL32 DEL21 DEL42 DEL9 DEL39 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL65 DEL65 DEL42 DEL32 DEL21 DEL65 DEL65 DEL42 DEL32 DEL21 DEL65 DEL65 DEL42 DEL32 DEL21 DEL65 DEL65 DEL42 DEL32 DEL21 DEL65 DEL65 DEL42 DEL32 DEL21 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31