redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-    protected final SessionItemStateManager itemStateMgr;
+    protected final SessionItemStateManager stateMgr;
-        itemStateMgr = session.getItemStateManager();
+        stateMgr = session.getItemStateManager();
-    protected abstract void makePersistent() throws RepositoryException;
+    protected abstract void makePersistent(UpdateOperation update);
-            itemStateMgr.disposeTransientItemState(transientState);
+            stateMgr.disposeTransientItemState(transientState);
-            itemStateMgr.moveTransientItemStateToAttic(transientState);
+            stateMgr.moveTransientItemStateToAttic(transientState);
-            Iterator iter = itemStateMgr.getDescendantTransientItemStates(id);
+            Iterator iter = stateMgr.getDescendantTransientItemStates(id);
-            Iterator iter = itemStateMgr.getDescendantTransientItemStatesInAttic(id);
+            Iterator iter = stateMgr.getDescendantTransientItemStatesInAttic(id);
-    private void checkReferences(Iterator iterDirty, Iterator iterRemoved,
-                                 ReferenceManager refMgr)
+    private Collection checkReferences(Iterator iterDirty, Iterator iterRemoved)
+
-                                refs = refMgr.get(targetId);
+                                try {
+                                    refs = stateMgr.getNodeReferences(targetId);
+                                } catch (ItemStateException e) {
+                                    String msg = itemMgr.safeGetJCRPath(targetId)
+                                            + ": failed to load node references";
+                                    log.error(msg, e);
+                                    throw new RepositoryException(msg, e);
+                                }
-                            refs = refMgr.get(targetId);
+                            try {
+                                refs = stateMgr.getNodeReferences(targetId);
+                            } catch (ItemStateException e) {
+                                String msg = itemMgr.safeGetJCRPath(targetId)
+                                        + ": failed to load node references";
+                                log.error(msg, e);
+                                throw new RepositoryException(msg, e);
+                            }
-                            refs = refMgr.get(targetId);
+                            try {
+                                refs = stateMgr.getNodeReferences(targetId);
+                            } catch (ItemStateException e) {
+                                String msg = itemMgr.safeGetJCRPath(targetId)
+                                        + ": failed to load node references";
+                                log.error(msg, e);
+                                throw new RepositoryException(msg, e);
+                            }
-                refs = refMgr.get(targetId);
+                try {
+                    refs = stateMgr.getNodeReferences(targetId);
+                } catch (ItemStateException e) {
+                    String msg = itemMgr.safeGetJCRPath(targetId)
+                            + ": failed to load node references";
+                    log.error(msg, e);
+                    throw new RepositoryException(msg, e);
+                }
-        // persist dirty NodeReferences objects
-        iter = dirtyNodeRefs.values().iterator();
-        while (iter.hasNext()) {
-            NodeReferences refs = (NodeReferences) iter.next();
-            refMgr.save(refs);
-        }
+        // return dirty NodeReferences objects
+        return dirtyNodeRefs.values();
-    private void removeTransientItems(Iterator iter) throws RepositoryException {
+    private void removeTransientItems(UpdateOperation update,
+                                      Iterator iter) {
+
-            PersistableItemState persistentState = (PersistableItemState) transientState.getOverlayedState();
+            ItemState persistentState = transientState.getOverlayedState();
-             * remove persistent state (incl. descendents, if there are any)
+             * remove persistent state
-            try {
-                persistentState.destroy();
-            } catch (ItemStateException ise) {
-                String msg = "failed to remove item " + transientState.getId();
-                log.error(msg, ise);
-                throw new RepositoryException(msg, ise);
-            }
+            update.destroy(persistentState);
-    private void persistTransientItems(Iterator iter) throws RepositoryException {
+    private void persistTransientItems(UpdateOperation update,
+                                       Iterator iter)
+            throws RepositoryException {
+
-            item.makePersistent();
+            item.makePersistent(update);
-                itemStateMgr.enablePathCaching(true);
+                stateMgr.enablePathCaching(true);
-                                parentState = (NodeState) itemStateMgr.getTransientItemState(id);
+                                parentState = (NodeState) stateMgr.getTransientItemState(id);
-                 * we need to make sure that we are not interrupted while
-                 * verifying/persisting node references
+                 * build list of transient descendents in the attic
+                 * (i.e. those marked as 'removed')
-                ReferenceManager refMgr = wsp.getReferenceManager();
-                synchronized (refMgr) {
-                    /**
-                     * build list of transient descendents in the attic
-                     * (i.e. those marked as 'removed')
-                     */
-                    Collection removed = getRemovedStates();
+                Collection removed = getRemovedStates();
-                    /**
-                     * referential integrity checks:
-                     * make sure that a referenced node cannot be removed and
-                     * that all references are updated and persisted
-                     */
-                    checkReferences(dirty.iterator(), removed.iterator(), refMgr);
+                /**
+                 * referential integrity checks:
+                 * make sure that a referenced node cannot be removed and
+                 * that all references are updated and persisted
+                 */
+                Collection dirtyRefs =
+                        checkReferences(dirty.iterator(), removed.iterator());
-                    /**
-                     * create event states for the affected item states and
-                     * prepare them for event dispatch (this step is necessary in order
-                     * to check access rights on items that will be removed)
-                     *
-                     * todo consolidate event generating and dispatching code (ideally one method call after save has succeeded)
-                     */
-                    events.createEventStates(dirty);
-                    events.createEventStates(removed);
-                    events.prepare();
+                /**
+                 * create event states for the affected item states and
+                 * prepare them for event dispatch (this step is necessary in order
+                 * to check access rights on items that will be removed)
+                 *
+                 * todo consolidate event generating and dispatching code (ideally one method call after save has succeeded)
+                 */
+                events.createEventStates(removed);
+                events.createEventStates(dirty);
+                events.prepare();
-                    // definitively remove transient items marked as 'removed'
-                    removeTransientItems(removed.iterator());
+                try {
+                    // start the update operation
+                    UpdateOperation update = stateMgr.beginUpdate();
-                    // dispose the transient states marked 'removed'
-                    iter = removed.iterator();
-                    while (iter.hasNext()) {
-                        transientState = (ItemState) iter.next();
-                        /**
-                         * dispose the transient state, it is no longer used
-                         * this will indirectly (through stateDiscarded listener method)
-                         * permanently invalidate the wrapping Item instance
-                         */
-                        itemStateMgr.disposeTransientItemStateInAttic(transientState);
-                    }
+                    // process transient items marked as 'removed'
+                    removeTransientItems(update, removed.iterator());
-                    // persist 'new' or 'modified' transient states
-                    persistTransientItems(dirty.iterator());
-                } // synchronized(refMgr)
+                    // process 'new' or 'modified' transient states
+                    persistTransientItems(update, dirty.iterator());
-                // now it is safe to dispose the transient states
+                    // store the references calculated above
+                    for (Iterator it = dirtyRefs.iterator(); it.hasNext();) {
+                        update.store((NodeReferences) it.next());
+                    }
+
+                    // end update operation
+                    update.end();
+
+                } catch (ItemStateException e) {
+
+                    String msg = safeGetJCRPath() + ": unable to update item.";
+                    log.error(msg);
+                    throw new RepositoryException(msg, e);
+
+                }
+
+                // now it is safe to dispose the transient states:
+                // dispose the transient states marked 'removed'
+                iter = removed.iterator();
+                while (iter.hasNext()) {
+                    transientState = (ItemState) iter.next();
+                    // dispose the transient state, it is no longer used
+                    stateMgr.disposeTransientItemStateInAttic(transientState);
+                }
+                // dispose the transient states marked 'new' or 'modified'
-                    itemStateMgr.disposeTransientItemState(transientState);
+                    stateMgr.disposeTransientItemState(transientState);
+
-                itemStateMgr.enablePathCaching(false);
+                stateMgr.enablePathCaching(false);
-                itemStateMgr.disposeAllTransientItemStates();
+                stateMgr.disposeAllTransientItemStates();
-            transientState = (ItemState) state;
+            transientState = state;
-            Iterator iter = itemStateMgr.getDescendantTransientItemStates(id);
+            Iterator iter = stateMgr.getDescendantTransientItemStates(id);
-            itemStateMgr.disposeTransientItemState(transientState);
+            stateMgr.disposeTransientItemState(transientState);
-        iter = itemStateMgr.getDescendantTransientItemStatesInAttic(id);
+        iter = stateMgr.getDescendantTransientItemStatesInAttic(id);
-            itemStateMgr.disposeTransientItemStateInAttic(transientState);
+            stateMgr.disposeTransientItemStateInAttic(transientState);

INS44 INS43 INS42 INS44 INS44 MOV21 UPD42 INS43 INS42 UPD42 MOV42 INS41 INS43 INS42 INS43 INS42 MOV61 INS42 MOV32 UPD42 MOV42 INS42 UPD42 MOV21 MOV32 MOV8 INS8 MOV43 MOV21 UPD42 UPD42 UPD42 INS54 UPD42 MOV42 MOV32 UPD42 INS42 INS42 MOV60 INS60 MOV21 MOV21 MOV21 INS54 MOV21 INS61 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS8 INS12 INS43 INS59 INS8 INS12 MOV32 INS8 UPD42 MOV21 INS44 INS8 UPD42 INS42 INS42 MOV32 MOV60 MOV21 MOV25 MOV21 INS24 INS21 INS44 INS8 MOV21 INS21 UPD42 UPD42 MOV43 INS42 INS60 INS21 INS53 UPD42 MOV32 UPD43 MOV32 INS58 INS32 INS8 INS32 INS43 INS42 INS60 INS21 INS53 MOV7 INS32 INS32 MOV43 INS59 INS32 INS14 UPD42 UPD42 INS42 UPD42 UPD42 INS43 INS59 INS42 INS42 INS21 INS42 INS42 INS42 INS43 INS59 INS32 INS14 UPD42 UPD42 INS42 INS42 INS42 INS8 MOV32 MOV8 INS8 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS27 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS54 MOV21 MOV21 INS54 MOV21 INS32 INS45 INS42 INS42 INS42 INS42 INS11 INS32 INS45 INS42 INS8 INS8 INS12 INS8 INS12 UPD42 MOV42 UPD42 MOV42 MOV42 MOV43 INS32 INS42 INS54 MOV21 MOV21 INS44 INS8 MOV11 INS21 INS44 INS8 INS42 INS42 INS8 INS12 INS43 INS42 INS60 INS21 INS53 INS7 INS43 INS42 INS60 INS21 INS53 MOV21 INS44 INS8 INS42 INS43 INS59 INS32 INS14 UPD42 MOV42 MOV42 MOV42 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS43 INS42 INS60 INS21 INS53 UPD42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS32 INS45 INS42 INS32 INS45 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS42 DEL39 DEL42 DEL43 DEL42 DEL44 DEL8 DEL8 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL11 DEL8 DEL42 DEL44 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL8 DEL51 DEL42 DEL11 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61