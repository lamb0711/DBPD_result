migrating to v0.15 of the jsr 170 spec

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55516 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.access.AccessDeniedException;
+import java.security.AccessControlException;
+     * prededfined action constants in checkPermission
+     */
+    public static final String READ_ACTION = "read";
+    public static final String REMOVE_ACTION = "remove";
+    public static final String ADD_NODE_ACTION = "add_node";
+    public static final String SET_PROPERTY_ACTION = "set_property";
+
+    /**
-        return new AccessManagerImpl(credentials, hierMgr, getNamespaceResolver());
+        return new AccessManagerImpl(credentials, hierMgr);
-    protected AccessManagerImpl getAccessManager() {
+    public AccessManagerImpl getAccessManager() {
+     * @see Session#checkPermission(String, String)
+     */
+    public void checkPermission(String absPath, String actions)
+            throws AccessControlException {
+        // build the set of actions to be checked
+        String[] strings = actions.split(",");
+        HashSet set = new HashSet();
+        for (int i = 0; i < strings.length; i++) {
+            set.add(strings[i]);
+        }
+
+        Path targetPath = null;
+        ItemId targetId = null;
+
+        /**
+         * "read" action:
+         * requires READ permission on target item
+         */
+        if (set.contains(READ_ACTION)) {
+            try {
+                targetPath = Path.create(absPath, getNamespaceResolver(), true);
+                targetId = hierMgr.resolvePath(targetPath);
+                accessMgr.checkPermission(targetId, AccessManager.READ);
+            } catch (PathNotFoundException pnfe) {
+                // target does not exist, throw exception
+                throw new AccessControlException(READ_ACTION);
+            } catch (MalformedPathException mpe) {
+                String msg = "invalid path: " + absPath;
+                log.warn(msg, mpe);
+                throw new AccessControlException(READ_ACTION);
+            } catch (RepositoryException re) {
+                String msg = "failed to check READ permission on " + absPath;
+                log.warn(msg, re);
+                throw new AccessControlException(READ_ACTION);
+            }
+        }
+
+        Path parentPath = null;
+        ItemId parentId = null;
+
+        /**
+         * "add_node" action:
+         * requires WRITE permission on parent item
+         */
+        if (set.contains(ADD_NODE_ACTION)) {
+            try {
+                if (targetPath == null) {
+                    targetPath = Path.create(absPath, getNamespaceResolver(), true);
+                }
+                parentPath = targetPath.getAncestor(1);
+                parentId = hierMgr.resolvePath(parentPath);
+                accessMgr.checkPermission(parentId, AccessManager.WRITE);
+            } catch (PathNotFoundException pnfe) {
+                // parent does not exist, throw exception
+                throw new AccessControlException(ADD_NODE_ACTION);
+            } catch (MalformedPathException mpe) {
+                String msg = "invalid path: " + absPath;
+                log.warn(msg, mpe);
+                throw new AccessControlException(ADD_NODE_ACTION);
+            } catch (RepositoryException re) {
+                String msg = "failed to check WRITE permission on parent of " + absPath;
+                log.warn(msg, re);
+                throw new AccessControlException(ADD_NODE_ACTION);
+            }
+        }
+
+        /**
+         * "remove" action:
+         * requires WRITE permission on parent item
+         */
+        if (set.contains(REMOVE_ACTION)) {
+            try {
+                if (targetPath == null) {
+                    targetPath = Path.create(absPath, getNamespaceResolver(), true);
+                }
+                if (parentPath == null) {
+                    parentPath = targetPath.getAncestor(1);
+                }
+                if (parentId == null) {
+                    parentId = hierMgr.resolvePath(parentPath);
+                }
+                accessMgr.checkPermission(parentId, AccessManager.WRITE);
+            } catch (PathNotFoundException pnfe) {
+                // parent does not exist, throw exception
+                throw new AccessControlException(REMOVE_ACTION);
+            } catch (MalformedPathException mpe) {
+                String msg = "invalid path: " + absPath;
+                log.warn(msg, mpe);
+                throw new AccessControlException(REMOVE_ACTION);
+            } catch (RepositoryException re) {
+                String msg = "failed to check WRITE permission on parent of " + absPath;
+                log.warn(msg, re);
+                throw new AccessControlException(REMOVE_ACTION);
+            }
+        }
+
+        /**
+         * "set_property" action:
+         * requires WRITE permission on parent item if property is going to be
+         * added or WRITE permission on target item if property is going to be
+         * modified
+         */
+        if (set.contains(SET_PROPERTY_ACTION)) {
+            try {
+                if (targetPath == null) {
+                    targetPath = Path.create(absPath, getNamespaceResolver(), true);
+                }
+                if (targetId == null) {
+                    try {
+                        targetId = hierMgr.resolvePath(targetPath);
+                        // property does already exist,
+                        // check WRITE permission on target
+                        accessMgr.checkPermission(targetId, AccessManager.WRITE);
+                    } catch (PathNotFoundException pnfe) {
+                        // property does not exist yet,
+                        // check WRITE permission on parent
+                        if (parentPath == null) {
+                            parentPath = targetPath.getAncestor(1);
+                        }
+                        if (parentId == null) {
+                            parentId = hierMgr.resolvePath(parentPath);
+                        }
+                        accessMgr.checkPermission(parentId, AccessManager.WRITE);
+                    }
+                }
+            } catch (PathNotFoundException pnfe) {
+                // parent does not exist, throw exception
+                throw new AccessControlException(SET_PROPERTY_ACTION);
+            } catch (MalformedPathException mpe) {
+                String msg = "invalid path: " + absPath;
+                log.warn(msg, mpe);
+                throw new AccessControlException(SET_PROPERTY_ACTION);
+            } catch (RepositoryException re) {
+                String msg = "failed to check WRITE permission on parent of " + absPath;
+                log.warn(msg, re);
+                throw new AccessControlException(SET_PROPERTY_ACTION);
+            }
+        }
+    }
+
+    /**
-            return rep.login(otherCredentials, null);
+            return rep.login(otherCredentials, getWorkspace().getName());
-    public void save() throws AccessDeniedException, LockException, ConstraintViolationException, InvalidItemStateException, RepositoryException {
+    public void save() throws AccessDeniedException, LockException,
+            ConstraintViolationException, InvalidItemStateException,
+            RepositoryException {

MOV26 UPD40 INS23 INS23 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 UPD83 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS24 INS60 INS60 INS25 INS60 INS60 INS25 INS25 INS25 INS66 INS68 INS42 INS42 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS8 INS42 INS42 INS69 INS69 INS43 INS85 INS42 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS54 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS54 INS42 INS42 INS42 INS54 INS42 INS42 INS42 INS54 INS43 INS43 INS42 INS42 INS42 INS45 INS43 INS42 INS34 INS32 INS8 INS12 INS12 INS12 INS8 INS12 INS12 INS12 INS8 INS12 INS12 INS12 INS8 INS12 INS12 INS12 INS42 INS42 INS42 INS42 INS42 INS2 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS25 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS25 INS25 INS25 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS25 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS32 INS42 INS42 INS7 INS7 INS32 INS43 INS42 INS53 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS27 INS8 INS7 INS7 INS32 INS43 INS42 INS53 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS43 INS42 INS53 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS27 INS8 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS33 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS40 INS42 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS33 INS21 INS42 INS33 INS54 INS42 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 MOV32 INS9 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS7 INS42 INS42 INS34 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS7 INS7 INS7 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS7 INS8 INS12 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS21 INS21 INS44 INS8 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS7 INS32 INS43 INS42 INS25 INS25 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS27 INS8 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS40 INS7 INS7 INS42 INS32 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 DEL33