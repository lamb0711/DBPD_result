port to jcr api v0.16.4.1

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@165156 13f79535-47bb-0310-9956-ffa450edef68

-        if (prop.getType() == PropertyType.BINARY && skipBinary) {
-            return;
-        }
-
-        boolean multiValued = prop.getDefinition().isMultiple();
-        Value[] vals;
-        if (multiValued) {
-            vals = prop.getValues();
-        } else {
-            vals = new Value[]{prop.getValue()};
-        }
-        for (int i = 0; i < vals.length; i++) {
-            Value val = vals[i];
-
-            // start value element
+        if (prop.getType() == PropertyType.BINARY && skipBinary) {
+            // empty value element
-
-            // characters
-            Writer writer = new Writer() {
-                public void close() /*throws IOException*/ {
-                }
-
-                public void flush() /*throws IOException*/ {
-                }
-
-                public void write(char[] cbuf, int off, int len) throws IOException {
-                    try {
-                        contentHandler.characters(cbuf, off, len);
-                    } catch (SAXException se) {
-                        throw new IOException(se.toString());
-                    }
-                }
-            };
-            try {
-                ValueHelper.serialize(val, false, writer);
-                // no need to close our Writer implementation
-                //writer.close();
-            } catch (IOException ioe) {
-                // check if the exception wraps a SAXException
-                // (see Writer.write(char[], int, int) above)
-                Throwable t = ioe.getCause();
-                if (t != null && t instanceof SAXException) {
-                    throw (SAXException) t;
-                } else {
-                    throw new SAXException(ioe);
-                }
-            }
-
-            // end value element
+        } else {
+            boolean multiValued = prop.getDefinition().isMultiple();
+            Value[] vals;
+            if (multiValued) {
+                vals = prop.getValues();
+            } else {
+                vals = new Value[]{prop.getValue()};
+            }
+            for (int i = 0; i < vals.length; i++) {
+                Value val = vals[i];
+
+                // start value element
+                contentHandler.startElement(NS_SV_URI, VALUE_ELEMENT,
+                        PREFIXED_VALUE_ELEMENT, new AttributesImpl());
+
+                // characters
+                Writer writer = new Writer() {
+                    public void close() /*throws IOException*/ {
+                    }
+
+                    public void flush() /*throws IOException*/ {
+                    }
+
+                    public void write(char[] cbuf, int off, int len) throws IOException {
+                        try {
+                            contentHandler.characters(cbuf, off, len);
+                        } catch (SAXException se) {
+                            throw new IOException(se.toString());
+                        }
+                    }
+                };
+                try {
+                    ValueHelper.serialize(val, false, writer);
+                    // no need to close our Writer implementation
+                    //writer.close();
+                } catch (IOException ioe) {
+                    // check if the exception wraps a SAXException
+                    // (see Writer.write(char[], int, int) above)
+                    Throwable t = ioe.getCause();
+                    if (t != null && t instanceof SAXException) {
+                        throw (SAXException) t;
+                    } else {
+                        throw new SAXException(ioe);
+                    }
+                }
+
+                // end value element
+                contentHandler.endElement(NS_SV_URI, VALUE_ELEMENT,
+                        PREFIXED_VALUE_ELEMENT);
+            }
-        if (prop.getType() == PropertyType.BINARY && skipBinary) {
-            return;
-        }

MOV25 INS8 INS21 INS21 MOV60 MOV60 MOV25 MOV24 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42 DEL41 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL27 DEL41 DEL8 DEL25