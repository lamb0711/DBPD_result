redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
-import org.apache.jackrabbit.core.version.*;
-import org.apache.jackrabbit.core.*;
-import org.apache.jackrabbit.core.util.uuid.UUID;
-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
-import org.apache.jackrabbit.core.state.*;
+import org.apache.jackrabbit.core.*;
+import org.apache.jackrabbit.core.nodetype.NodeDefId;
+import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
+import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.ItemStateManager;
+import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.UpdateOperation;
+import org.apache.jackrabbit.core.util.uuid.UUID;
+import org.apache.jackrabbit.core.version.*;
+import org.apache.log4j.Logger;
+import java.util.Iterator;
-import java.util.Iterator;
- * <p>
+ * <p/>
- * <p>
+ * <p/>
- * <p>
+ * <p/>
-    private PersistentItemStateProvider stateMgr;
+    private ItemStateManager stateMgr;
+
+    /**
+     * the nodetype manager for the version storage
+     */
+    private NodeTypeManagerImpl ntMgr;
-    private HashMap idsByInternal= new HashMap();
+    private HashMap idsByInternal = new HashMap();
-     * @param pMgr
-     * @param ntReg
+     * @param session
-    public NativePVM(PersistenceManager pMgr, NodeTypeRegistry ntReg) throws RepositoryException {
+    public NativePVM(SessionImpl session) throws RepositoryException {
+        this.stateMgr = ((WorkspaceImpl) session.getWorkspace()).getItemStateManager();
+        this.ntMgr = session.getNodeTypeManager();
+
-            this.stateMgr = new PersistentItemStateManager(pMgr, PERSISTENT_ROOT_ID.getUUID(), ntReg);
-            PersistentNodeState nodeState = (PersistentNodeState) stateMgr.getItemState(PERSISTENT_ROOT_ID);
-            historyRoot = new PersistentNode(stateMgr, nodeState);
+            NodeImpl systemRoot = ((RepositoryImpl) session.getRepository()).getSystemRootNode(session);
+            // enable this to make the persistence storage visible
+            if (true) {
+                // check for versionhistory root
+                if (!systemRoot.hasNode(VERSION_HISTORY_ROOT_NAME)) {
+                    // if not exist, create
+                    systemRoot.addNode(VERSION_HISTORY_ROOT_NAME, NodeTypeRegistry.NT_UNSTRUCTURED);
+                    systemRoot.save();
+                }
+                NodeState nodeState = (NodeState) stateMgr.getItemState(new NodeId(systemRoot.getNode(VERSION_HISTORY_ROOT_NAME).internalGetUUID()));
+                historyRoot = new PersistentNode(stateMgr, ntMgr, nodeState);
+            } else {
+                if (!stateMgr.hasItemState(PERSISTENT_ROOT_ID)) {
+                    UpdateOperation update = stateMgr.beginUpdate();
+                    NodeState nodeState = update.createNew(PERSISTENT_ROOT_ID.getUUID(), NodeTypeRegistry.NT_UNSTRUCTURED, null);
+                    nodeState.setDefinitionId(new NodeDefId(ntMgr.getRootNodeDefinition().unwrap()));
+                    // persist state
+                    update.store(nodeState);
+                    // finish update operation
+                    update.end();
+                    historyRoot = new PersistentNode(stateMgr, ntMgr, nodeState);
+                } else {
+                    NodeState nodeState = (NodeState) stateMgr.getItemState(PERSISTENT_ROOT_ID);
+                    historyRoot = new PersistentNode(stateMgr, ntMgr, nodeState);
+                }
+            }
+     *
+     *
-            synchronized(idsByExternal) {
+            synchronized (idsByExternal) {
+     *
-        synchronized(idsByExternal) {
+        synchronized (idsByExternal) {
+     *
+     *
-        synchronized(idsByExternal) {
+        synchronized (idsByExternal) {
-        if (hist!=null) {
+        if (hist != null) {
-        for (int i=0; i<3; i++) {
-            QName name = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, uuid.substring(i*2, i*2+2));
+        for (int i = 0; i < 3; i++) {
+            QName name = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, uuid.substring(i * 2, i * 2 + 2));
-        return pid==null ? null : (InternalVersionHistory) getItem(pid);
+        return pid == null ? null : (InternalVersionHistory) getItem(pid);
-        return pid==null ? null : (InternalVersion) getItem(pid);
+        return pid == null ? null : (InternalVersion) getItem(pid);
+     *
+     *
-        return pid==null ? null : getItem(pid);
+        return pid == null ? null : getItem(pid);
+     *
-        return pid==null ? null : getItem(pid);
+        return pid == null ? null : getItem(pid);
+     *
-        InternalVersionItem item =(InternalVersionItem) items.get(pid);
-        if (item==null) {
+        InternalVersionItem item = (InternalVersionItem) items.get(pid);
+        if (item == null) {
-            if (pNode!=null) {
+            if (pNode != null) {
-            if (item!=null) {
+            if (item != null) {
-        /** the type of the persistent node */
+        /**
+         * the type of the persistent node
+         */
-        /** the persistent uuid of the node */
+        /**
+         * the persistent uuid of the node
+         */
-        /** the persistent uuid of the node */
+        /**
+         * the persistent uuid of the node
+         */

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 INS23 UPD43 INS29 INS83 INS43 INS59 INS8 UPD66 UPD66 UPD66 UPD42 INS65 INS42 INS42 UPD43 UPD42 INS21 INS21 MOV54 INS66 UPD42 UPD42 INS7 INS7 INS8 MOV22 INS32 INS22 INS32 INS60 INS25 MOV21 MOV21 UPD66 UPD66 UPD66 INS36 INS42 INS52 INS42 INS42 INS42 INS43 INS59 INS9 INS8 INS8 INS11 INS42 INS42 INS32 INS25 INS60 INS21 INS25 INS43 INS32 INS36 INS42 INS42 INS38 INS8 INS43 INS59 INS7 INS38 INS8 INS8 UPD42 MOV42 INS42 INS42 INS11 INS32 INS21 INS21 INS42 INS42 INS11 INS42 INS14 INS32 INS60 INS60 INS21 INS21 INS21 MOV21 MOV60 MOV21 INS43 INS32 INS42 INS42 INS42 INS32 INS32 INS43 INS32 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 INS32 INS42 INS42 INS42 INS42 MOV32 INS40 INS33 INS43 INS32 UPD43 UPD42 UPD42 INS42 UPD43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL65 DEL43 DEL42 DEL44 DEL8 DEL8