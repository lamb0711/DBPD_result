JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Element;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
-import java.util.Iterator;
-public class OrderPatch implements OrderingConstants{
+public class OrderPatch implements OrderingConstants, XmlSerializable {
-     * @param orderPatchElement
-     * @throws IllegalArgumentException if the specified Xml element was not valid.
+     * @param orderingType
+     * @param instruction
-    public OrderPatch(Element orderPatchElement) {
-        if (!OrderingConstants.XML_ORDERPATCH.equals(orderPatchElement.getName()) ||
-                orderPatchElement.getChild(OrderingConstants.XML_ORDERING_TYPE) == null) {
-            throw new IllegalArgumentException("ORDERPATH request body must start with an 'orderpatch' element, which must contain an 'ordering-type' child element.");
-        }
-        // retrieve the orderingtype element
-        orderingType = orderPatchElement.getChild(OrderingConstants.XML_ORDERING_TYPE).getChildText(DavConstants.XML_HREF);
-
-        // set build the list of ordering instructions
-        List oMembers = orderPatchElement.getChildren(OrderingConstants.XML_ORDER_MEMBER, DavConstants.NAMESPACE);
-        Iterator it = oMembers.iterator();
-        int cnt = 0;
-        List tmpInst = new ArrayList();
-        while (it.hasNext()) {
-            Element member = (Element) it.next();
-            try {
-                String segment = member.getChildText(OrderingConstants.XML_SEGMENT);
-                Position pos = new Position(member.getChild(OrderingConstants.XML_POSITION));
-                Member om = new Member(segment, pos);
-                tmpInst.add(om);
-                cnt++;
-            } catch (IllegalArgumentException e) {
-                log.error("Invalid element in 'orderpatch' request body: " + e.getMessage());
-            }
-        }
-        instructions = (Member[]) tmpInst.toArray(new Member[cnt]);
+    public OrderPatch(String orderingType, Member instruction) {
+        this(orderingType, new Member[] {instruction});
+        if (orderingType == null || instructions == null) {
+            throw new IllegalArgumentException("ordering type and instructions cannot be null.");
+        }
+    //------------------------------------------< XmlSerializable interface >---
+    /**
+     *
+     * @return
+     * @param document
+     */
+    public Element toXml(Document document) {
+        Element orderPatch = DomUtil.createElement(document, XML_ORDERPATCH, NAMESPACE);
+        // add DAV:ordering-type below DAV:orderpatch
+        Element otype = DomUtil.addChildElement(orderPatch, XML_ORDERING_TYPE, NAMESPACE);
+        otype.appendChild(DomUtil.hrefToXml(orderingType, document));
+        // add DAV:member elements below DAV:orderpatch
+        for (int i = 0; i < instructions.length; i++) {
+            orderPatch.appendChild(instructions[i].toXml(document));
+        }
+        return null;
+    }
+
+    //------------------------------------------------------< static method >---
+    /**
+     * Create a new <code>OrderPath</code> object.
+     *
+     * @param orderPatchElement
+     * @throws IllegalArgumentException if the specified Xml element was not valid.
+     */
+    public static OrderPatch createFromXml(Element orderPatchElement) {
+        if (!DomUtil.matches(orderPatchElement, XML_ORDERPATCH, NAMESPACE)) {
+            throw new IllegalArgumentException("ORDERPATH request body must start with an 'orderpatch' element.");
+        }
+
+        // retrieve the href of the orderingtype element
+        String orderingType;
+        Element otype = DomUtil.getChildElement(orderPatchElement, XML_ORDERING_TYPE, NAMESPACE);
+        if (otype != null) {
+            orderingType = DomUtil.getChildText(otype, DavConstants.XML_HREF, DavConstants.NAMESPACE);
+        } else {
+            throw new IllegalArgumentException("ORDERPATH request body must contain an 'ordering-type' child element.");
+        }
+
+        // set build the list of ordering instructions
+        List tmpList = new ArrayList();
+        ElementIterator it = DomUtil.getChildren(orderPatchElement, XML_ORDER_MEMBER, NAMESPACE);
+        while (it.hasNext()) {
+            Element el = it.nextElement();
+            try {
+                // retrieve text 'DAV:segment' child of this DAV:order-member element
+                String segment = DomUtil.getChildText(el, XML_SEGMENT, NAMESPACE);
+                // retrieve the 'DAV:position' child element
+                Position pos = Position.createFromXml(DomUtil.getChildElement(el, XML_POSITION, NAMESPACE));
+                Member om = new Member(segment, pos);
+                tmpList.add(om);
+            } catch (IllegalArgumentException e) {
+                log.error("Invalid element in 'orderpatch' request body: " + e.getMessage());
+            }
+        }
+        Member[] instructions = (Member[]) tmpList.toArray(new Member[tmpList.size()]);
+        return new OrderPatch(orderingType, instructions);
+    }
+
-    public class Member {
+    public static class Member implements XmlSerializable {
+
+        //--------------------------------------< XmlSerializable interface >---
+        /**
+         * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+         */
+        public Element toXml(Document document) {
+            Element memberElem = DomUtil.createElement(document, XML_ORDER_MEMBER, NAMESPACE);
+            DomUtil.addChildElement(memberElem, XML_SEGMENT, NAMESPACE, memberHandle);
+            memberElem.appendChild(position.toXml(document));
+            return memberElem;
+        }
+

MOV26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 UPD40 UPD40 INS43 INS31 INS31 INS42 INS29 INS83 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 MOV60 INS83 INS43 INS31 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS17 INS25 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS21 INS24 INS41 INS42 INS25 INS60 INS60 INS25 INS60 INS41 INS42 INS29 INS83 INS43 INS42 INS44 INS8 INS66 INS42 INS42 INS42 INS42 INS42 INS3 INS27 MOV8 INS42 INS42 MOV43 INS59 MOV43 INS59 INS32 INS58 INS27 INS37 INS8 INS33 INS38 INS8 MOV43 INS59 INS43 INS59 INS27 INS8 INS8 UPD43 MOV5 INS59 INS14 INS65 INS42 INS43 INS42 INS60 INS21 INS21 INS41 MOV5 INS4 INS27 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 MOV32 INS53 INS42 INS42 INS42 INS32 INS42 MOV33 MOV21 INS53 UPD42 UPD42 INS42 INS11 INS43 INS42 INS42 INS68 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS14 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS14 INS42 INS42 UPD42 UPD42 INS42 INS43 INS5 MOV32 INS42 INS40 INS42 INS69 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD45 INS42 INS42 INS32 INS43 INS45 INS43 INS45 INS42 UPD42 INS32 INS43 INS85 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 UPD42 MOV42 MOV42 UPD42 MOV42 INS43 MOV43 INS59 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS43 INS85 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 DEL42 DEL40 DEL32 DEL40 DEL32 DEL38 DEL40 DEL32 DEL27 DEL27 DEL25 DEL43 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL32 DEL11 DEL40 DEL42 DEL43 DEL42 DEL40 DEL32 DEL14 DEL59 DEL42 DEL37 DEL21 DEL42 DEL42 DEL11 DEL7 DEL21