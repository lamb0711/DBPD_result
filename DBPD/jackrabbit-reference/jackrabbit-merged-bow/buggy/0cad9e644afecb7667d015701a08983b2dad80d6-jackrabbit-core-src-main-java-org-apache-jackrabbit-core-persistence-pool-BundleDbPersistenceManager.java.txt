JCR-2762: Optimize bundle serialization

Remove duplicate code by merging the checkBundle() and readBundle() functionality

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1004239 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-                NodePropBundle child = loadBundle(entry.getId(), true);
+                NodePropBundle child = loadBundle(entry.getId());
-
-                        // checkBundle will log any problems itself
-                        if (binding.checkBundle(new ByteArrayInputStream(data))) {
-                            NodePropBundle bundle = binding.readBundle(
-                                    new ByteArrayInputStream(data), id);
-                            checkBundleConsistency(id, bundle, fix, modifications);
-                        } else {
-                            log.error("invalid bundle '" + id + "', see previous BundleBinding error log entry");
-                        }
-                    } catch (Exception e) {
-                        log.error("Error in bundle " + id + ": " + e);
+                        NodePropBundle bundle = binding.readBundle(
+                                new ByteArrayInputStream(data), id);
+                        checkBundleConsistency(id, bundle, fix, modifications);
+                    } catch (IOException e) {
+                        log.error("Unable to parse bundle " + id
+                                + ": " + Arrays.toString(data), e);
-                    NodePropBundle bundle = loadBundle(id, true);
+                    NodePropBundle bundle = loadBundle(id);
-        return loadBundle(id, false);
+        ResultSet rs = null;
+        try {
+            rs = conHelper.exec(bundleSelectSQL, getKey(id), false, 0);
+            if (!rs.next()) {
+                return null;
+            }
+            byte[] bytes = getBytes(rs.getBlob(1));
+
+            try {
+                NodePropBundle bundle =
+                    binding.readBundle(new ByteArrayInputStream(bytes), id);
+                bundle.setSize(bytes.length);
+                return bundle;
+            } catch (IOException e) {
+                log.error("Unable to parse serialization of bundle " + id
+                        + ": " + Arrays.toString(bytes), e);
+                throw e;
+            }
+        } catch (Exception e) {
+            String msg = "failed to read bundle: " + id + ": " + e;
+            log.error(msg);
+            throw new ItemStateException(msg, e);
+        } finally {
+            DbUtility.close(rs);
+        }
-     * Loads a bundle from the underlying system and optionally performs
-     * a check on the bundle first.
-     *
-     * @param id the node id of the bundle
-     * @param checkBeforeLoading check the bundle before loading it and log
-     *                           detailed information about it (slower)
-     * @return the loaded bundle or <code>null</code> if the bundle does not
-     *         exist.
-     * @throws ItemStateException if an error while loading occurs.
-     */
-    protected NodePropBundle loadBundle(NodeId id, boolean checkBeforeLoading)
-            throws ItemStateException {
-        ResultSet rs = null;
-        
-        try {
-            rs = conHelper.exec(bundleSelectSQL, getKey(id), false, 0);
-            if (!rs.next()) {
-                return null;
-            }
-            Blob b = rs.getBlob(1);
-            byte[] bytes = getBytes(b);
-
-            if (checkBeforeLoading) {
-                if (!binding.checkBundle(new ByteArrayInputStream(bytes))) {
-                    // gets wrapped as proper ItemStateException below
-                    throw new Exception("invalid bundle, see previous BundleBinding error log entry");
-                }
-            }
-
-            NodePropBundle bundle =
-                binding.readBundle(new ByteArrayInputStream(bytes), id);
-            bundle.setSize(bytes.length);
-            return bundle;
-        } catch (Exception e) {
-            String msg = "failed to read bundle: " + id + ": " + e;
-            log.error(msg);
-            throw new ItemStateException(msg, e);
-        } finally {
-            DbUtility.close(rs);
-        }
-    }
-
-    /**

INS26 MOV31 INS40 MOV29 INS54 MOV5 INS8 INS12 UPD42 INS32 MOV60 MOV21 MOV41 INS44 INS8 INS42 MOV32 INS43 INS42 INS21 MOV53 INS42 INS32 INS42 MOV8 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS45 INS42 INS45 INS32 UPD43 INS42 INS42 INS42 UPD42 INS42 UPD45 INS32 INS42 INS42 INS42 DEL9 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL9 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL38 DEL8 DEL25 DEL8 DEL25