JCR-2062: JSR 283: Repository Compliance
JCR-1591: JSR 283: NodeType Management


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@797139 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import javax.jcr.ValueFactory;
+import javax.jcr.Repository;
+import javax.jcr.PropertyType;
+import javax.jcr.ValueFormatException;
-import javax.jcr.observation.EventIterator;
-import javax.jcr.observation.EventListener;
+import org.apache.jackrabbit.value.ValueFactoryImpl;
-        implements javax.jcr.Repository, JackrabbitRepository, SessionListener, EventListener, WorkspaceListener {
+        implements javax.jcr.Repository, JackrabbitRepository, SessionListener, WorkspaceListener {
-     * the name of the file system resource containing the properties of the
-     * repository.
+     * the name of the resource containing customized descriptors of the repository.
-    private static final String PROPERTIES_RESOURCE = "rep.properties";
+    private static final String PROPERTIES_RESOURCE = "repository.properties";
-     * the repository properties.
+     * the repository descriptors, maps String keys to Value/Value[] objects
-    private final Properties repProps;
-
-    // names of well-known repository properties
-    public static final String STATS_NODE_COUNT_PROPERTY = "jcr.repository.stats.nodes.count";
-    public static final String STATS_PROP_COUNT_PROPERTY = "jcr.repository.stats.properties.count";
+    private final Map<String, DescriptorValue> repDescriptors = new HashMap<String, DescriptorValue>();
-    // misc. statistics
-    private long nodesCount;
-    private long propsCount;
-
-            // load repository properties
-            repProps = loadRepProps();
-            nodesCount = Long.parseLong(repProps.getProperty(STATS_NODE_COUNT_PROPERTY, "0"));
-            propsCount = Long.parseLong(repProps.getProperty(STATS_PROP_COUNT_PROPERTY, "0"));
+            // initialize repository descriptors
+            initRepositoryDescriptors();
-        if (repProps != null) {
-            // persist repository properties
-            try {
-                storeRepProps(repProps);
-            } catch (RepositoryException e) {
-                log.error("failed to persist repository properties", e);
-            }
-        }
+        repDescriptors.clear();
+    InternalVersionManagerImpl getVersionManagerImpl() {
+        return vMgr;
+    }
+
-     * Sets the default properties of the repository.
-     * <p/>
-     * This method loads the <code>Properties</code> from the
-     * <code>org/apache/jackrabbit/core/repository.properties</code> resource
-     * found in the class path and (re)sets the statistics properties, if not
-     * present.
+     * Initializes the repository descriptors by executing the following steps:
+     * <ul>
+     * <li>Sets standard descriptors</li>
+     * <li>{@link #getCustomRepositoryDescriptors()} is called
+     * afterwards in order to add custom/overwrite standard repository decriptors.</li>
+     * </ul>
-     * @param props the properties object to load
+     * @throws RepositoryException
+     */
+    protected void initRepositoryDescriptors() throws RepositoryException {
+
+        ValueFactory valFactory = ValueFactoryImpl.getInstance();
+        Value valTrue = valFactory.createValue(true);
+        Value valFalse = valFactory.createValue(false);
+
+        setDescriptor(Repository.REP_NAME_DESC, "Jackrabbit");
+        setDescriptor(Repository.REP_VENDOR_DESC, "Apache Software Foundation");
+        setDescriptor(Repository.REP_VENDOR_URL_DESC, "http://jackrabbit.apache.org/");
+        setDescriptor(Repository.SPEC_NAME_DESC, "Content Repository API for Java(TM) Technology Specification");
+        setDescriptor(Repository.SPEC_VERSION_DESC, "2.0");
+
+        setDescriptor(Repository.IDENTIFIER_STABILITY, Repository.IDENTIFIER_STABILITY_INDEFINITE_DURATION);
+        setDescriptor(Repository.LEVEL_1_SUPPORTED, valTrue);
+        setDescriptor(Repository.LEVEL_2_SUPPORTED, valTrue);
+        setDescriptor(Repository.WRITE_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_NODE_TYPE_MANAGEMENT_SUPPORTED, valTrue);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_AUTOCREATED_DEFINITIONS_SUPPORTED, valTrue);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_INHERITANCE, Repository.NODE_TYPE_MANAGEMENT_INHERITANCE_MULTIPLE);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_MULTIPLE_BINARY_PROPERTIES_SUPPORTED, valTrue);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_MULTIVALUED_PROPERTIES_SUPPORTED, valTrue);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_ORDERABLE_CHILD_NODES_SUPPORTED, valTrue);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_OVERRIDES_SUPPORTED, valFalse);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_PRIMARY_ITEM_NAME_SUPPORTED, valTrue);
+
+        Value[] types = new Value[] {
+                valFactory.createValue(PropertyType.BINARY),
+                valFactory.createValue(PropertyType.BOOLEAN),
+                valFactory.createValue(PropertyType.DATE),
+                valFactory.createValue(PropertyType.DECIMAL),
+                valFactory.createValue(PropertyType.DOUBLE),
+                valFactory.createValue(PropertyType.LONG),
+                valFactory.createValue(PropertyType.NAME),
+                valFactory.createValue(PropertyType.PATH),
+                valFactory.createValue(PropertyType.REFERENCE),
+                valFactory.createValue(PropertyType.STRING),
+                valFactory.createValue(PropertyType.URI),
+                valFactory.createValue(PropertyType.WEAKREFERENCE),
+                valFactory.createValue(PropertyType.UNDEFINED)
+        };
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_PROPERTY_TYPES, types);
+
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_RESIDUAL_DEFINITIONS_SUPPORTED, valTrue);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_SAME_NAME_SIBLINGS_SUPPORTED, valTrue);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_VALUE_CONSTRAINTS_SUPPORTED, valTrue);
+        setDescriptor(Repository.NODE_TYPE_MANAGEMENT_UPDATE_IN_USE_SUPORTED, valFalse);
+        setDescriptor(Repository.OPTION_ACCESS_CONTROL_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_JOURNALED_OBSERVATION_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_LIFECYCLE_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_LOCKING_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_OBSERVATION_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_NODE_AND_PROPERTY_WITH_SAME_NAME_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_QUERY_SQL_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_RETENTION_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_SHAREABLE_NODES_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_SIMPLE_VERSIONING_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_TRANSACTIONS_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_UNFILED_CONTENT_SUPPORTED, valFalse);
+        setDescriptor(Repository.OPTION_UPDATE_MIXIN_NODE_TYPES_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_UPDATE_PRIMARY_NODE_TYPE_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_VERSIONING_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_WORKSPACE_MANAGEMENT_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_XML_EXPORT_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_XML_IMPORT_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_ACTIVITIES_SUPPORTED, valTrue);
+        setDescriptor(Repository.OPTION_BASELINES_SUPPORTED, valTrue);
+
+        setDescriptor(Repository.QUERY_FULL_TEXT_SEARCH_SUPPORTED, valTrue);
+        setDescriptor(Repository.QUERY_JOINS, Repository.QUERY_JOINS_INNER_OUTER);
+
+        Value[] languages = new Value[] {
+                valFactory.createValue("javax.jcr.query.JCR-JQOM"),
+                valFactory.createValue("javax.jcr.query.JCR-SQL2")
+        };
+        setDescriptor(Repository.QUERY_LANGUAGES, languages);
+
+        setDescriptor(Repository.QUERY_STORED_QUERIES_SUPPORTED, valTrue);
+        setDescriptor(Repository.QUERY_XPATH_POS_INDEX, valTrue);
+        // Disabled since in default configuration document order is not supported.
+        // See https://issues.apache.org/jira/browse/JCR-1237 for details
+        setDescriptor(Repository.QUERY_XPATH_DOC_ORDER, valFalse);
+
+        // now set customized repository descriptor values (if any exist)
+        Properties props = getCustomRepositoryDescriptors();
+        if (props != null) {
+            for (Iterator it = props.keySet().iterator(); it.hasNext();) {
+                String key = (String) it.next();
+                setDescriptor(key, props.getProperty(key));
+            }
+        }
+    }
+
+    /**
+     * Returns a <code>Properties</code> object containing custom repository
+     * descriptors or <code>null</code> if none exist.
+     * <p/>
+     * Overridable to allow subclasses to add custom descriptors or to
+     * override standard descriptor values.
+     * <p/>
+     * Note that the properties entries will be set as single-valued <code>STRING</code>
+     * descriptor values.
+     * <p/>
+     * This method tries to load the <code>Properties</code> from the
+     * <code>org/apache/jackrabbit/core/repository.properties</code> resource
+     * found in the class path.
-    protected void setDefaultRepositoryProperties(Properties props)
-            throws RepositoryException {
-        InputStream in = RepositoryImpl.class.getResourceAsStream("repository.properties");
-        try {
-            props.load(in);
-            in.close();
-
-            // set counts
-            if (!props.containsKey(STATS_NODE_COUNT_PROPERTY)) {
-                props.setProperty(STATS_NODE_COUNT_PROPERTY, Long.toString(nodesCount));
-            }
-            if (!props.containsKey(STATS_PROP_COUNT_PROPERTY)) {
-                props.setProperty(STATS_PROP_COUNT_PROPERTY, Long.toString(propsCount));
-            }
-        } catch (IOException e) {
-            String msg = "Failed to load repository properties: " + e.toString();
-            log.error(msg);
-            throw new RepositoryException(msg, e);
-        }
-    }
-
-    /**
-     * Loads the repository properties by executing the following steps:
-     * <ul>
-     * <li> if the {@link #PROPERTIES_RESOURCE} exists in the meta data store,
-     * the properties are loaded from that resource.</li>
-     * <li> {@link #setDefaultRepositoryProperties(Properties)} is called
-     * afterwards in order to initialize/update the repository properties
-     * since some default properties might have changed and need updating.</li>
-     * <li> finally {@link #storeRepProps(Properties)} is called in order to
-     * persist the newly generated properties.</li>
-     * </ul>
-     *
-     * @return the newly loaded/initialized repository properties
-     *
-     * @throws RepositoryException
-     */
-    protected Properties loadRepProps() throws RepositoryException {
-        FileSystemResource propFile = new FileSystemResource(metaDataStore, PROPERTIES_RESOURCE);
-        try {
-            Properties props = new Properties();
-            if (propFile.exists()) {
-                InputStream in = propFile.getInputStream();
-                try {
-                    props.load(in);
-                } finally {
-                    in.close();
-                }
-            }
-            // now set the default props
-            setDefaultRepositoryProperties(props);
-
-            // and store
-            storeRepProps(props);
-
-            return props;
-
-        } catch (Exception e) {
-            String msg = "failed to load repository properties";
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
-        }
-    }
-
-    /**
-     * Stores the properties to a persistent resource in the meta filesytem.
-     *
-     * @throws RepositoryException
-     */
-    protected void storeRepProps(Properties props) throws RepositoryException {
-        FileSystemResource propFile = new FileSystemResource(metaDataStore, PROPERTIES_RESOURCE);
-        try {
-            propFile.makeParentDirs();
-            OutputStream os = propFile.getOutputStream();
+    protected Properties getCustomRepositoryDescriptors() throws RepositoryException {
+        InputStream in = RepositoryImpl.class.getResourceAsStream(PROPERTIES_RESOURCE);
+        if (in != null) {
-                props.store(os, null);
+                Properties props = new Properties();
+                props.load(in);
+                return props;
+            } catch (IOException e) {
+                String msg = "Failed to load customized repository properties: " + e.toString();
+                log.error(msg);
+                throw new RepositoryException(msg, e);
-                // make sure stream is closed
-                os.close();
+                IOUtils.closeQuietly(in);
-        } catch (Exception e) {
-            String msg = "failed to persist repository properties";
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
+        } else {
+            return null;
+    protected void setDescriptor(String desc, String value) {
+        setDescriptor(desc, ValueFactoryImpl.getInstance().createValue(value));
+    }
+
+    protected void setDescriptor(String desc, Value value) {
+        repDescriptors.put(desc, new DescriptorValue(value));
+    }
+
+    protected void setDescriptor(String desc, Value[] values) {
+        repDescriptors.put(desc, new DescriptorValue(values));
+    }
+
-        return repProps.getProperty(key);
+        Value v = getDescriptorValue(key);
+        try {
+            return (v == null) ? null : v.getString();
+        } catch (RepositoryException e) {
+            log.error("corrupt descriptor value: " + key, e);
+            return null;
+        }
-        String[] keys = repProps.keySet().toArray(new String[repProps.keySet().size()]);
+        String[] keys = repDescriptors.keySet().toArray(new String[repDescriptors.keySet().size()]);
+    /**
+     * {@inheritDoc}
+     */
-        throw new UnsupportedOperationException(
-                "not implemented yet - see JCR-2062");
+        DescriptorValue descVal = repDescriptors.get(key);
+        return (descVal != null) ? descVal.getValue() : null;
+    /**
+     * {@inheritDoc}
+     */
-        throw new UnsupportedOperationException(
-                "not implemented yet - see JCR-2062");
+        DescriptorValue descVal = repDescriptors.get(key);
+        return (descVal != null) ? descVal.getValues() : null;
+    /**
+     * {@inheritDoc}
+     */
-        throw new UnsupportedOperationException(
-                "not implemented yet - see JCR-2062");
+        DescriptorValue descVal = repDescriptors.get(key);
+        return (descVal != null && descVal.getValue() != null);
-    //--------------------------------------------------------< EventListener >
-    /**
-     * {@inheritDoc}
-     */
-    public void onEvent(EventIterator events) {
-        // check status of this instance
-        if (disposed) {
-            // ignore, repository instance has been shut down
-            return;
-        }
-
-        synchronized (repProps) {
-            while (events.hasNext()) {
-                Event event = events.nextEvent();
-                long type = event.getType();
-                if ((type & Event.NODE_ADDED) == Event.NODE_ADDED) {
-                    nodesCount++;
-                    repProps.setProperty(STATS_NODE_COUNT_PROPERTY, Long.toString(nodesCount));
-                }
-                if ((type & Event.NODE_REMOVED) == Event.NODE_REMOVED) {
-                    nodesCount--;
-                    repProps.setProperty(STATS_NODE_COUNT_PROPERTY, Long.toString(nodesCount));
-                }
-                if ((type & Event.PROPERTY_ADDED) == Event.PROPERTY_ADDED) {
-                    propsCount++;
-                    repProps.setProperty(STATS_PROP_COUNT_PROPERTY, Long.toString(propsCount));
-                }
-                if ((type & Event.PROPERTY_REMOVED) == Event.PROPERTY_REMOVED) {
-                    propsCount--;
-                    repProps.setProperty(STATS_PROP_COUNT_PROPERTY, Long.toString(propsCount));
-                }
-            }
-        }
-    }
-
-            // register the repository as event listener for keeping repository statistics
-            wsp.getObservationManager().addEventListener(RepositoryImpl.this,
-                    Event.NODE_ADDED | Event.NODE_REMOVED
-                    | Event.PROPERTY_ADDED | Event.PROPERTY_REMOVED,
-                    "/", true, null, null, false);
-
-    InternalVersionManagerImpl getVersionManagerImpl() {
-        return vMgr;
-    }
+    /**
+     * Represents a Repository Descriptor Value (either Value or Value[])
+     */
+    protected final class DescriptorValue {
+        private Value val;
+        private Value[] vals;
+
+        protected DescriptorValue(Value val) {
+            this.val = val;
+        }
+
+        protected DescriptorValue(Value[] vals) {
+            this.vals = vals;
+        }
+
+        protected Value getValue() {
+            return val;
+        }
+
+        protected Value[] getValues() {
+            return vals != null ? vals : new Value[] {val};
+        }
+    }

MOV26 MOV26 INS26 INS26 INS26 INS26 MOV31 MOV31 UPD40 INS40 INS40 INS40 UPD40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS55 MOV29 MOV83 MOV83 INS74 INS59 MOV29 MOV83 INS39 INS42 MOV43 INS8 MOV43 INS42 UPD83 MOV83 INS39 UPD42 MOV42 INS44 INS44 MOV8 UPD83 UPD39 UPD42 INS44 INS44 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 INS8 MOV29 INS83 MOV43 INS42 MOV44 INS8 MOV29 INS83 INS43 INS42 MOV44 INS8 INS29 INS83 INS5 INS42 MOV44 INS8 INS29 INS83 INS39 INS42 MOV44 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 UPD45 INS43 MOV43 INS43 UPD42 MOV42 INS14 MOV21 MOV65 INS60 MOV60 MOV60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV60 MOV21 INS21 INS21 INS21 MOV21 MOV21 MOV21 INS21 INS21 INS21 MOV21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV21 INS21 INS21 INS21 INS21 INS21 INS21 MOV60 MOV21 MOV21 INS21 INS21 MOV60 INS25 MOV42 INS25 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS21 UPD43 UPD42 INS5 INS42 INS21 MOV60 INS54 INS42 MOV60 INS41 INS65 INS43 INS85 INS60 INS41 INS65 INS60 INS41 INS65 INS83 MOV43 INS59 INS83 MOV5 INS59 INS83 INS42 INS44 INS8 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS5 INS42 INS8 UPD66 UPD66 UPD42 MOV42 INS42 INS74 UPD66 UPD66 UPD66 UPD66 INS43 INS59 UPD43 UPD43 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS5 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS5 INS32 INS32 MOV43 INS27 INS8 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS27 INS8 INS8 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 UPD42 INS43 INS85 INS32 UPD43 INS8 INS12 MOV5 INS43 INS16 INS65 INS42 INS43 INS59 INS16 INS65 INS43 INS59 INS36 INS66 INS42 INS42 INS43 INS42 INS21 INS5 INS42 MOV21 INS42 INS41 INS43 INS85 INS41 INS43 MOV43 INS43 UPD42 UPD42 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS32 UPD42 UPD42 INS32 INS42 INS40 INS45 INS42 INS40 INS45 INS42 INS40 INS45 INS42 INS40 INS45 INS42 INS40 INS45 INS42 INS40 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS43 INS85 UPD42 INS3 UPD42 INS40 UPD42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 UPD42 INS40 UPD42 UPD42 INS40 UPD42 UPD42 INS40 UPD42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 UPD42 INS40 UPD42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 UPD42 INS40 UPD42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS43 INS85 UPD42 INS3 UPD42 INS40 UPD42 UPD42 INS40 UPD42 INS42 INS40 INS42 INS42 INS40 INS42 UPD42 INS32 INS42 INS33 INS24 INS42 INS33 MOV54 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS14 UPD42 UPD42 INS41 MOV44 INS8 INS42 UPD42 INS36 INS32 INS33 INS42 INS42 INS32 INS36 INS32 INS33 INS42 INS42 INS32 UPD27 MOV27 INS42 INS7 INS43 INS85 INS7 INS42 INS42 INS16 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 UPD42 MOV42 INS5 INS4 UPD42 MOV42 INS5 INS4 INS42 INS58 INS32 INS8 INS42 INS8 INS8 INS33 INS32 INS42 INS42 UPD43 MOV43 INS42 INS43 INS42 UPD42 UPD42 INS16 INS21 INS41 UPD42 UPD42 INS42 UPD27 MOV27 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD27 MOV27 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS27 INS22 INS42 INS42 INS22 INS42 INS27 INS42 INS3 UPD42 MOV42 INS43 INS85 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS85 INS32 INS32 INS43 INS59 INS42 INS42 INS60 INS21 INS60 MOV21 MOV41 MOV21 INS42 INS42 UPD42 INS42 INS36 INS33 INS32 INS32 INS33 UPD42 MOV5 UPD42 INS33 UPD42 INS33 INS42 INS33 INS32 INS33 INS52 INS42 INS52 INS42 INS42 INS33 INS5 INS4 INS42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 MOV43 INS59 INS32 INS43 INS59 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS85 INS42 INS32 UPD42 MOV42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 MOV14 UPD42 UPD42 UPD42 INS42 INS33 INS45 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 MOV43 INS32 UPD42 MOV42 MOV42 MOV42 INS42 INS42 UPD45 DEL42 DEL43 DEL66 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL7 DEL21 DEL45 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL67 DEL65 DEL66 DEL66 DEL42 DEL43 DEL69 DEL66 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL42 DEL14 DEL43 DEL32 DEL42 DEL42 DEL43 DEL32 DEL42 DEL33 DEL45 DEL66 DEL42 DEL66 DEL65 DEL39 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL45 DEL14 DEL53 DEL42 DEL32 DEL8 DEL8 DEL54 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL8 DEL8 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL40 DEL40 DEL42 DEL40 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL31 DEL42 DEL41 DEL8 DEL25 DEL42 DEL32 DEL36 DEL40 DEL27 DEL42 DEL37 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL36 DEL40 DEL27 DEL42 DEL37 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL36 DEL40 DEL27 DEL42 DEL37 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL27 DEL36 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL51 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL52 DEL40 DEL40 DEL40 DEL40 DEL27 DEL45 DEL9 DEL33 DEL33 DEL9 DEL32 DEL21 DEL42 DEL37