- Implemented a lucene Directory which works on top of the jackrabbit FileSystem abstraction.
- Changed location of lucene locks to index directory, instead of user temp dir.
- Changed order of module shutdown in RepositryImpl. shutdown sequence is now: observation, search, filesystem.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@53863 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.fs.FileSystem;
+import org.apache.jackrabbit.core.fs.FileSystemResource;
-import java.io.File;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Collections;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.Iterator;
+                         FileSystem fs,
-        index = new SearchIndex(indexPath, new StandardAnalyzer());
-        nsMappings = new NamespaceMappings(new File(indexPath, "ns_mappings.properties"));
+        index = new SearchIndex(fs, indexPath, new StandardAnalyzer());
+        String mapFileName = indexPath + FileSystem.SEPARATOR + "ns_mappings.properties";
+        FileSystemResource mapFile = new FileSystemResource(fs, mapFileName);
+        nsMappings = new NamespaceMappings(mapFile);
+        log.debug("onEvent: indexing started");
+        long time = System.currentTimeMillis();
-        // FIXME optimize operations on index.
-        // only one cycle of document removes and document adds
+        // remember nodes we have to index at the end.
+        Set pendingNodes = new HashSet();
+        // delete removed and modified nodes from index
-
-                    path = getIndexlessPath(path);
-
-                    ItemId id = new NodeId(e.getChildUUID());
-                    addNode((NodeState) stateProvider.getItemState(id), path);
-
-
+                    pendingNodes.add(path);
-                    modified.add(path);
+                    if (!modified.contains(e.getParentUUID())) {
+                        deleteNode(path, e.getParentUUID());
+                        modified.add(e.getParentUUID());
+                        pendingNodes.add(path);
+                    } else {
+                        // already deleted
+                    }
-            } catch (ItemStateException e) {
-                log.error("error indexing node.", e);
-        for (Iterator it = modified.iterator(); it.hasNext();) {
+        for (Iterator it = pendingNodes.iterator(); it.hasNext();) {
-                updateNode((NodeState) stateProvider.getItemState(id), path);
+                addNode((NodeState) stateProvider.getItemState(id), path);
+        if (log.isDebugEnabled()) {
+            log.debug("onEvent: indexing finished in "
+                    + String.valueOf(System.currentTimeMillis() - time) 
+                    + " ms.");
+        }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 UPD40 INS40 INS40 INS44 INS43 INS42 INS60 INS60 INS21 INS60 INS60 INS25 INS42 INS43 INS59 INS43 INS59 INS32 INS39 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS27 INS42 INS42 INS14 INS14 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS21 INS42 INS42 INS40 INS45 INS43 INS42 INS42 MOV43 INS42 INS42 INS42 INS43 INS32 INS42 INS42 UPD42 MOV21 INS42 INS42 INS27 INS45 INS32 INS45 INS42 INS42 INS27 INS32 INS32 INS42 INS42 UPD42 MOV42 MOV42 INS25 INS42 INS42 INS38 INS8 INS8 INS32 INS21 MOV21 INS21 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL14 DEL42 DEL32 DEL7 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL32 DEL21