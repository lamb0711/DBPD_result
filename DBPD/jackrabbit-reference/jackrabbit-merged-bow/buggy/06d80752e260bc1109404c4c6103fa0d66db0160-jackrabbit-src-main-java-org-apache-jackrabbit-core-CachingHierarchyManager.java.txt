JCR-454: Query with document order fails when result set size > caching hierarchy manager size

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@412712 13f79535-47bb-0310-9956-ffa450edef68

-                    evict(child);
+                    remove(child);
-                    evict(child);
+                    remove(child);
-        evict(destroyed.getId());
+        remove(destroyed.getId());
-        evict(discarded.getId());
+        if (discarded.isTransient() && !discarded.hasOverlayedState()) {
+            // a new node has been discarded -> remove from cache
+            remove(discarded.getId());
+        } else if (provider.hasItemState(discarded.getId())) {
+            evict(discarded.getId());
+        } else {
+            remove(discarded.getId());
+        }
+            if (element.get() != null) {
+                if (!id.equals(((LRUEntry) element.get()).getId())) {
+                    log.warn("overwriting PathMap.Element");
+                }
+            }
+     * Remove item from cache. Removes the associated <code>LRUEntry</code>
+     * and the <code>PathMap.Element</code> with it. Indexes of same name
+     * sibling elements are shifted!
+     *
+     * @param id item id
+     */
+    private void remove(ItemId id) {
+        synchronized (cacheMonitor) {
+            LRUEntry entry = (LRUEntry) idCache.get(id);
+            if (entry != null) {
+                remove(entry, true);
+            }
+        }
+    }
+
+    /**
+     * Remove item from cache. Index of same name sibling items are shifted!
+     *
+     * @param entry               LRU entry
+     * @param removeFromPathCache whether to remove from path cache
+     */
+    private void remove(LRUEntry entry, boolean removeFromPathCache) {
+        synchronized (cacheMonitor) {
+            if (removeFromPathCache) {
+                PathMap.Element element = entry.getElement();
+                remove(element);
+                element.remove();
+            } else {
+                idCache.remove(entry.getId());
+                entry.remove();
+            }
+        }
+    }
+
+    /**
+     * Evict item from cache. Index of same name sibling items are <b>not</b>
+     * shifted!
+     *
+     * @param entry               LRU entry
+     * @param removeFromPathCache whether to remove from path cache
+     */
+    private void evict(LRUEntry entry, boolean removeFromPathCache) {
+        synchronized (cacheMonitor) {
+            if (removeFromPathCache) {
+                PathMap.Element element = entry.getElement();
+                element.traverse(new PathMap.ElementVisitor() {
+                    public void elementVisited(PathMap.Element element) {
+                        evict((LRUEntry) element.get(), false);
+                    }
+                }, false);
+                element.remove(false);
+            } else {
+                idCache.remove(entry.getId());
+                entry.remove();
+            }
+        }
+    }
+
+    /**
+     * and the <code>PathMap.Element</code> with it. Indexes of same name
+     * sibling elements are <b>not</b> shifted!
-     * Evict item from cache
-     *
-     * @param entry               LRU entry
-     * @param removeFromPathCache whether to remove from path cache
-     */
-    private void evict(LRUEntry entry, boolean removeFromPathCache) {
-        synchronized (cacheMonitor) {
-            if (removeFromPathCache) {
-                PathMap.Element element = entry.getElement();
-                evict(element);
-                element.remove();
-            } else {
-                idCache.remove(entry.getId());
-                entry.remove();
-            }
-        }
-    }
-
-    /**
-     * Evict path map element from cache. This will traverse all children
-     * of this element and evict the objects associated with them
+     * Remove path map element from cache. This will traverse all children
+     * of this element and remove the objects associated with them.
+     * Index of same name sibling items are shifted!
-    private void evict(PathMap.Element element) {
+    private void remove(PathMap.Element element) {
-                    evict((LRUEntry) element.get(), false);
+                    remove((LRUEntry) element.get(), false);
-                    evict(element);
+                    remove(element);

MOV31 INS31 INS31 INS8 MOV29 INS83 INS39 INS42 INS44 INS8 UPD42 INS29 INS44 INS44 INS29 MOV29 INS83 INS39 INS42 MOV44 INS8 MOV21 INS25 INS43 INS42 INS51 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS65 INS65 INS51 INS27 INS8 INS25 UPD66 INS66 INS66 INS42 INS42 INS8 UPD66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS8 INS66 INS66 INS66 INS42 INS66 UPD66 UPD66 INS66 INS42 INS8 UPD42 INS32 INS38 INS21 INS32 MOV8 INS8 INS25 INS60 INS25 INS25 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS21 INS27 INS8 INS43 INS59 INS27 INS8 INS42 MOV8 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS25 INS42 INS42 INS11 INS42 INS33 INS21 INS60 INS21 INS21 INS21 INS42 INS42 INS14 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS38 INS8 INS43 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS43 INS1 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 INS40 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS40 INS31 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS83 INS39 INS42 INS44 INS8 UPD42 UPD42 INS36 INS42 INS42 INS42 INS45 INS43 INS42 INS21 UPD42 INS11 INS40 INS32 INS43 INS32 INS42 INS11 INS9 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42