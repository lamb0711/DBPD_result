JCR-1775: Transaction-safe versioning

Extract common path handling code to a utility method.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@702388 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.InvalidItemStateException;
-     * {@inheritDoc}
+     * Returns the version history associated with the given node.
+     *
+     * @param session 
+     * @param node the node whose version history's id is to be returned.
+     * @return the version history associated with the given node
+     *         or <code>null</code> if that node doesn't have a version history.
+     * @throws RepositoryException if an error occurs
-            NodeId vhId = getVersionHistoryId(node);
-            if (vhId == null) {
+            String uuid = node.getNodeId().getUUID().toString();
+            Name name = getName(uuid);
+
+            NodeStateEx parent = getParentNode(uuid, false);
+            if (parent != null && parent.hasNode(name)) {
+                NodeId id =
+                    parent.getState().getChildNodeEntry(name, 1).getId();
+                return (VersionHistory) ((SessionImpl) session).getNodeById(id);
+            } else {
-            return (VersionHistory) ((SessionImpl) session).getNodeById(vhId);
-            NodeStateEx root = historyRoot;
-            for (int i = 0; i < 3; i++) {
-                Name name = NameFactoryImpl.getInstance().create(Name.NS_DEFAULT_URI, uuid.substring(i * 2, i * 2 + 2));
-                if (!root.hasNode(name)) {
-                    root.addNode(name, NameConstants.REP_VERSIONSTORAGE, null, false);
-                    root.store();
-                }
-                root = root.getNode(name, 1);
-                if (root == null) {
-                    throw new InvalidItemStateException();
-                }
-            }
-            Name historyNodeName = NameFactoryImpl.getInstance().create(Name.NS_DEFAULT_URI, uuid);
-            if (root.hasNode(historyNodeName)) {
+            NodeStateEx parent = getParentNode(uuid, true);
+            Name name = getName(uuid);
+            if (parent.hasNode(name)) {
-            InternalVersionHistoryImpl hist = InternalVersionHistoryImpl.create(
-                    this, root, historyNodeName, node);
+            InternalVersionHistoryImpl hist =
+                InternalVersionHistoryImpl.create(this, parent, name, node);
-     * Returns the id of the version history associated with the given node
-     * or <code>null</code> if that node doesn't have a version history.
+     * Utility method that returns the given string as a name in the default
+     * namespace.
-     * @param node the node whose version history's id is to be returned.
-     * @return the the id of the version history associated with the given node
-     *         or <code>null</code> if that node doesn't have a version history.
-     * @throws javax.jcr.RepositoryException if an error occurs
+     * @param name string name
+     * @return qualified name
-    private NodeId getVersionHistoryId(NodeState node)
+    private Name getName(String name) {
+        return NameFactoryImpl.getInstance().create(Name.NS_DEFAULT_URI, name);
+    }
+
+    /**
+     * Utility method that returns the parent node under which the version
+     * history of the identified versionable node is or will be stored. If
+     * the create flag is set, then the returned parent node and any ancestor
+     * nodes are automatically created if they do not already exist. Otherwise
+     * <code>null</code> is returned if the parent node does not exist.
+     *
+     * @param uuid UUID of a versionable node
+     * @param create whether to create missing nodes
+     * @return parent node of the version history, or <code>null</code>
+     * @throws RepositoryException if an error occurs
+     */
+    private NodeStateEx getParentNode(String uuid, boolean create)
-        // build and traverse path
-        String uuid = node.getNodeId().getUUID().toString();
-            Name name = NameFactoryImpl.getInstance().create(Name.NS_DEFAULT_URI, uuid.substring(i * 2, i * 2 + 2));
-            if (!n.hasNode(name)) {
+            Name name = getName(uuid.substring(i * 2, i * 2 + 2));
+            if (n.hasNode(name)) {
+                n = n.getNode(name, 1);
+            } else if (create) {
+                n.addNode(name, NameConstants.REP_VERSIONSTORAGE, null, false);
+                n.store();
+                n = n.getNode(name, 1);
+            } else {
-            n = n.getNode(name, 1);
-        Name historyNodeName = NameFactoryImpl.getInstance().create(Name.NS_DEFAULT_URI, uuid);
-        if (!n.hasNode(historyNodeName)) {
-            return null;
-        }
-        return n.getNode(historyNodeName, 1).getNodeId();
+        return n;

INS31 INS29 INS83 MOV43 INS42 INS44 INS8 UPD43 UPD42 INS44 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS41 INS65 UPD42 UPD43 UPD42 INS39 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS8 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS66 UPD66 INS66 INS66 UPD66 INS42 INS66 UPD42 UPD66 UPD66 INS42 UPD42 INS42 MOV60 INS60 INS60 INS25 MOV60 MOV32 INS42 INS40 INS42 INS25 MOV43 INS59 INS43 INS59 INS27 MOV8 MOV8 MOV43 MOV32 INS8 INS25 INS42 INS32 INS42 INS42 INS32 INS27 INS32 UPD42 UPD42 UPD42 UPD42 INS21 INS42 INS8 MOV8 INS42 INS42 INS42 INS42 INS9 INS42 INS33 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS9 UPD42 MOV42 UPD42 UPD42 UPD42 INS7 INS21 INS21 MOV21 MOV41 UPD42 INS32 INS42 INS32 INS32 INS32 INS32 INS42 UPD42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS40 INS33 INS9 INS42 INS42 INS32 INS42 UPD42 MOV42 INS34 INS42 UPD42 MOV42 DEL40 DEL26 DEL65 DEL65 DEL32 DEL42 DEL33 DEL27 DEL25 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL34 DEL27 DEL32 DEL42 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL40 DEL33 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL8 DEL24 DEL42 DEL32 DEL42 DEL40 DEL66 DEL40 DEL40 DEL38 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL25 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32