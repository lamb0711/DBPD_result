JCR-1588: 283 Access Control

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@689499 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.jsr283.security.AccessControlPolicy;
+import org.apache.jackrabbit.core.ItemImpl;
+import org.apache.jackrabbit.core.security.authorization.AccessControlEditor;
+import org.apache.jackrabbit.core.security.authorization.NamedAccessControlPolicyImpl;
-import javax.jcr.PathNotFoundException;
-import javax.jcr.Property;
-import java.util.Arrays;
-import java.util.List;
- *
- * TODO: allow for editing of additional ac that extends the default permission evaluted by this provided.
+    private final AccessControlPolicy policy;
+
-        super("Access control policy for the 'security' workspace.",
-              "Policy that defines the general access control rules for the security workspace.");
+        policy = new NamedAccessControlPolicyImpl("userPolicy");
-    //--------------------------------------< AbstractAccessControlProvider >---
+    //-------------------------------------------------< AccessControlUtils >---
-     * @see AbstractAccessControlProvider#isAcItem(Path)
+     * @see org.apache.jackrabbit.core.security.authorization.AccessControlUtils#isAcItem(Path)
-    protected boolean isAcItem(Path absPath) throws RepositoryException {
+    public boolean isAcItem(Path absPath) throws RepositoryException {
+        return false;
+    }
+
+    /**
+     * Always returns false, since this ac provider does not use content stored
+     * in items to evaluate AC information.
+     *
+     * @see org.apache.jackrabbit.core.security.authorization.AccessControlUtils#isAcItem(ItemImpl)
+     */
+    public boolean isAcItem(ItemImpl item) throws RepositoryException {
-    public void init(Session systemSession, Map options) throws RepositoryException {
-        super.init(systemSession, options);
+    public void init(Session systemSession, Map configuration) throws RepositoryException {
+        super.init(systemSession, configuration);
-             userAdminGroup = (options.containsKey(USER_ADMIN_GROUP_NAME)) ? options.get(USER_ADMIN_GROUP_NAME).toString() : USER_ADMIN_GROUP_NAME;
-             groupAdminGroup = (options.containsKey(GROUP_ADMIN_GROUP_NAME)) ? options.get(GROUP_ADMIN_GROUP_NAME).toString() : GROUP_ADMIN_GROUP_NAME;
+             userAdminGroup = (configuration.containsKey(USER_ADMIN_GROUP_NAME)) ? configuration.get(USER_ADMIN_GROUP_NAME).toString() : USER_ADMIN_GROUP_NAME;
+             groupAdminGroup = (configuration.containsKey(GROUP_ADMIN_GROUP_NAME)) ? configuration.get(GROUP_ADMIN_GROUP_NAME).toString() : GROUP_ADMIN_GROUP_NAME;
-             // TODO: review again.
-
+    /**
+     * @see AccessControlProvider#getEffectivePolicies(Path)
+     */
+    public AccessControlPolicy[] getEffectivePolicies(Path absPath) throws ItemNotFoundException, RepositoryException {
+        checkInitialized();
+        return new AccessControlPolicy[] {policy};
+    }
+
+    /**
+     * Always returns <code>null</code>.
+     *
+     * @see AccessControlProvider#getEditor(Session)
+     */
+    public AccessControlEditor getEditor(Session session) {
+        checkInitialized();
+        // not editable at all: policy is always the default and cannot be
+        // changed using the JCR API.
+        return null;
+    }
+
+    /**
+     * @see AccessControlProvider#compilePermissions(Set)
+     */
+    /**
+     * @see AccessControlProvider#canAccessRoot(Set)
+     */
-    private boolean isMember(Node userNode, Path memberPath) throws RepositoryException, PathNotFoundException {
-        // precondition: memberPath points to a rep:members property
-        String propPath = session.getJCRPath(memberPath);
-        if (session.propertyExists(propPath)) {
-            // check if any of the ref-values equals to the value created from
-            // the user-Node (which must be present if the user is member of the group)
-            Property membersProp = session.getProperty(propPath);
-            List values = Arrays.asList(membersProp.getValues());
-            return values.contains(session.getValueFactory().createValue(userNode));
-        } else {
-            return false;
-        }
-    }
-
-    /**
-     * Determine if for the given <code>path</code>, the set of privileges
-     * must be calculated.
-     *
-     * @param path
-     * @return true if <code>path</code> denotes an existing <code>Node</code>,
-     * false otherwise.
-     * @throws RepositoryException
-     */
-    private boolean doCalculatePrivileges(Path path) throws RepositoryException {
-        String absPath = resolver.getJCRPath(path.getNormalizedPath());
-        // privileges can only be determined for existing nodes.
-        // not for properties and neither for non-existing nodes.
-        return session.nodeExists(absPath);
-    }
-
-            // default permission and default privileges
-            int perms = Permission.READ;
+            // no explicit denied permissions:
+            int denies = Permission.NONE;
+            // default allow permission and default privileges
+            int allows = Permission.READ;
-            boolean calcPrivs = doCalculatePrivileges(path);
+            // Determine if for path, the set of privileges must be calculated:
+            // Generally, privileges can only be determined for existing nodes.
+            boolean calcPrivs = session.nodeExists(resolver.getJCRPath(path.getNormalizedPath()));
-                privs = 0;
+                privs = PrivilegeRegistry.NO_PRIVILEGE;
-            //
-                                perms = Permission.ALL;
+                                allows = Permission.ALL;
-                                perms |= (Permission.SET_PROPERTY | Permission.REMOVE_PROPERTY);
+                                allows |= (Permission.SET_PROPERTY | Permission.REMOVE_PROPERTY);
-                                perms = Permission.ALL;
+                                allows = Permission.ALL;
-                    perms = Permission.ALL;
+                    allows = Permission.ALL;
-
-            return new Result(perms, privs);
+            return new Result(allows, denies, privs, PrivilegeRegistry.NO_PRIVILEGE);
-                                // TODO: improve

MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS83 INS83 INS43 INS59 UPD83 INS29 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 MOV43 MOV8 INS29 INS83 INS5 INS42 INS44 INS43 MOV43 INS8 UPD83 INS43 INS42 INS29 INS29 INS42 INS42 INS21 INS65 INS65 UPD43 UPD42 UPD42 INS65 INS43 INS85 INS43 INS42 UPD42 MOV42 INS21 MOV41 UPD65 UPD65 INS42 UPD43 UPD42 INS21 INS41 INS65 INS65 MOV60 INS7 INS66 INS66 INS68 UPD42 INS68 UPD42 MOV42 UPD42 MOV42 INS32 INS3 UPD66 INS68 UPD42 INS32 INS33 INS68 INS68 MOV60 INS42 INS14 INS40 INS40 INS42 INS69 UPD42 INS42 INS42 INS69 UPD42 MOV42 INS5 INS4 INS42 INS42 INS69 UPD42 MOV42 INS42 INS42 INS69 INS42 INS42 INS69 UPD39 INS39 INS25 INS43 INS45 INS43 INS43 INS43 INS85 INS42 INS43 INS43 INS43 UPD42 UPD40 UPD42 INS40 UPD42 INS32 MOV32 MOV8 UPD42 INS42 INS40 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 MOV25 INS40 UPD42 INS25 UPD42 UPD42 UPD42 UPD42 INS42 INS8 INS21 MOV25 UPD42 INS7 INS8 UPD42 INS42 INS40 MOV21 UPD42 DEL66 DEL45 DEL45 DEL46 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL66 DEL66 DEL65 DEL42 DEL65 DEL66 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL44 DEL43 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL43 DEL34 DEL42 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25