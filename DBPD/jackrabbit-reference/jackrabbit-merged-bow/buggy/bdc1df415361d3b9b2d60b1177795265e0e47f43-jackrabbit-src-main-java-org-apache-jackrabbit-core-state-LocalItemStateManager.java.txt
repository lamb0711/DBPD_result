JCR-552 Move listeners from item state to item state managers


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@438851 13f79535-47bb-0310-9956-ffa450edef68

-        implements UpdatableItemStateManager, ItemStateListener {
+        implements UpdatableItemStateManager, NodeStateListener {
+     * State change dispatcher.
+     */
+    private final transient StateChangeDispatcher dispatcher = new StateChangeDispatcher();
+
+    /**
+
+        sharedStateMgr.addListener(this);
-        // register as listener
-        state.addListener(this);
+        // set parent container
+        state.setContainer(this);
-        // register as listener
-        state.addListener(this);
+        // set parent container
+        state.setContainer(this);
+        state.setContainer(this);
+        state.setContainer(this);
+        sharedStateMgr.removeListener(this);
+
-            // we're no longer interested in status changes of this item state
-            state.removeListener(this);
-            // discard item state; any remaining listeners will be informed
-            // about this status change
-            state.discard();
+            dispatcher.notifyStateDiscarded(state);
+    /**
+     * Add an <code>ItemStateListener</code>
+     * @param listener the new listener to be informed on modifications
+     */
+    public void addListener(ItemStateListener listener) {
+        dispatcher.addListener(listener);
+    }
+
+    /**
+     * Remove an <code>ItemStateListener</code>
+     * @param listener an existing listener
+     */
+    public void removeListener(ItemStateListener listener) {
+        dispatcher.removeListener(listener);
+    }
+
+
+     * <p/>
+     * Notification handler gets called for both local states that this state manager
+     * has created, as well as states that were created by the shared state manager
+     * we're listening to.
+        ItemState local = null;
+        if (created.getContainer() != this) {
+            // shared state was created
+            try {
+                local = changeLog.get(created.getId());
+                if (local != null) {
+                    // underlying state has been permanently created
+                    local.pull();
+                    local.setStatus(ItemState.STATUS_EXISTING);
+                    cache.cache(local);
+                }
+            } catch (NoSuchItemStateException e) {
+                /* ignore */
+            }
+        } else {
+            // local state was created
+            local = created;
+        }
+        if (local != null) {
+            dispatcher.notifyStateCreated(created);
+        }
+     * <p/>
+     * Notification handler gets called for both local states that this state manager
+     * has created, as well as states that were created by the shared state manager
+     * we're listening to.
+        ItemState local = null;
+        if (modified.getContainer() != this) {
+            // shared state was modified
+            local = cache.retrieve(modified.getId());
+            if (local != null && local.isConnected()) {
+                // this instance represents existing state, update it
+                local.pull();
+            }
+        } else {
+            // local state was modified
+            local = modified;
+        }
+        if (local != null) {
+            dispatcher.notifyStateModified(local);
+        }
+     * <p/>
+     * Notification handler gets called for both local states that this state manager
+     * has created, as well as states that were created by the shared state manager
+     * we're listening to.
-        destroyed.removeListener(this);
-
+        ItemState local = null;
+        if (destroyed.getContainer() != this) {
+            // shared state was destroyed
+            local = cache.retrieve(destroyed.getId());
+            if (local != null && local.isConnected()) {
+                local.setStatus(ItemState.STATUS_EXISTING_REMOVED);
+            }
+        } else {
+            // local state was destroyed
+            local = destroyed;
+        }
+        if (local != null) {
+            dispatcher.notifyStateDestroyed(local);
+        }
+     * <p/>
+     * Notification handler gets called for both local states that this state manager
+     * has created, as well as states that were created by the shared state manager
+     * we're listening to.
-        discarded.removeListener(this);
-
+        ItemState local = null;
+        if (discarded.getContainer() != this) {
+            // shared state was discarded
+            local = cache.retrieve(discarded.getId());
+            if (local != null && local.isConnected()) {
+                local.setStatus(ItemState.STATUS_UNDEFINED);
+            }
+        } else {
+            // local state was discarded
+            local = discarded;
+        }
+        if (local != null) {
+            dispatcher.notifyStateDiscarded(local);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p/>
+     * Optimization: shared state manager we're listening to does not deliver node state changes, therefore the state
+     * concerned must be a local state.
+     */
+    public void nodeAdded(NodeState state, QName name, int index, NodeId id) {
+        dispatcher.notifyNodeAdded(state, name, index, id);
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p/>
+     * Optimization: shared state manager we're listening to does not deliver node state changes, therefore the state
+     * concerned must be a local state.
+     */
+    public void nodesReplaced(NodeState state) {
+        dispatcher.notifyNodesReplaced(state);
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p/>
+     * Optimization: shared state manager we're listening to does not deliver node state changes, therefore the state
+     * concerned must be a local state.
+     */
+    public void nodeRemoved(NodeState state, QName name, int index, NodeId id) {
+        dispatcher.notifyNodeRemoved(state, name, index, id);

INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS8 INS8 INS8 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS65 INS42 INS42 INS14 INS21 INS21 INS21 INS21 INS65 INS65 MOV43 INS42 INS21 INS65 INS65 INS43 INS42 INS21 INS60 INS25 INS25 INS60 INS25 INS25 INS60 INS25 MOV21 INS25 INS60 INS25 MOV21 INS25 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS21 INS65 INS43 INS42 INS21 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS21 INS66 INS43 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS32 INS66 INS42 INS66 INS42 INS32 INS66 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS66 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS66 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS66 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS65 INS66 INS66 INS66 INS42 INS42 INS42 INS32 INS65 INS66 INS66 INS66 INS42 INS32 INS65 INS66 INS66 INS66 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS52 UPD42 UPD42 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS52 INS54 INS21 INS42 INS33 INS21 INS42 INS42 INS33 INS32 INS52 INS21 INS25 INS21 INS42 INS33 INS21 INS42 INS42 INS33 INS32 INS52 MOV21 INS25 INS21 INS42 INS33 INS21 INS42 INS42 INS33 INS32 INS52 MOV21 INS25 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS7 INS32 INS42 INS42 INS7 INS27 INS8 INS7 INS32 INS42 INS42 INS7 INS27 INS8 INS7 INS32 INS42 INS42 INS7 INS27 INS8 INS7 INS32 UPD42 UPD42 INS42 INS21 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS7 INS27 INS8 INS43 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS40 MOV42 UPD42 MOV42 INS42 INS42 INS40 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL8 DEL52 DEL32 DEL8 DEL52 DEL32 DEL8