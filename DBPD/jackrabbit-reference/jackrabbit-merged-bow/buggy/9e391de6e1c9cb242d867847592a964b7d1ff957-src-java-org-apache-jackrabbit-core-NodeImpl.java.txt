versioning implementation is now stores directly in persistence state.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@53784 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.version.*;
+import org.apache.jackrabbit.core.util.uuid.UUID;
-import org.apache.jackrabbit.core.util.uuid.UUID;
-import org.apache.jackrabbit.core.version.FrozenNode;
-import org.apache.jackrabbit.core.version.GenericVersionSelector;
-import org.apache.jackrabbit.core.version.VersionImpl;
-import org.apache.jackrabbit.core.version.VersionSelector;
-import javax.jcr.version.OnParentVersionAction;
-	    if (name.equals(VersionImpl.PROPNAME_VERSION_HISTORY)) {
+	    if (name.equals(InternalVersion.PROPNAME_VERSION_HISTORY)) {
-	    } else if (name.equals(VersionImpl.PROPNAME_BASE_VERSION)) {
+	    } else if (name.equals(InternalVersion.PROPNAME_BASE_VERSION)) {
-	    } else if (name.equals(VersionImpl.PROPNAME_IS_CHECKED_OUT)) {
+	    } else if (name.equals(InternalVersion.PROPNAME_IS_CHECKED_OUT)) {
-	    } else if (name.equals(VersionImpl.PROPNAME_PREDECESSORS)) {
+	    } else if (name.equals(InternalVersion.PROPNAME_PREDECESSORS)) {
-                internalSetProperty(VersionImpl.PROPNAME_VERSION_HISTORY, InternalValue.create(new UUID(hist.getUUID())));
-                internalSetProperty(VersionImpl.PROPNAME_BASE_VERSION, InternalValue.create(new UUID(hist.getRootVersion().getUUID())));
-                internalSetProperty(VersionImpl.PROPNAME_IS_CHECKED_OUT, InternalValue.create(true));
-                internalSetProperty(VersionImpl.PROPNAME_PREDECESSORS, new InternalValue[]{InternalValue.create(new UUID(hist.getRootVersion().getUUID()))});
+                internalSetProperty(VersionManager.PROPNAME_VERSION_HISTORY, InternalValue.create(new UUID(hist.getUUID())));
+                internalSetProperty(VersionManager.PROPNAME_BASE_VERSION, InternalValue.create(new UUID(hist.getRootVersion().getUUID())));
+                internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(true));
+                internalSetProperty(VersionManager.PROPNAME_PREDECESSORS, new InternalValue[]{InternalValue.create(new UUID(hist.getRootVersion().getUUID()))});
+    /**
+     * @see Node#getUUID()
+     */
+    public String internalGetUUID() throws RepositoryException {
+        // check state of this instance
+        checkItemState();
+        return ((NodeState) state).getUUID();
+    }
+
-        Property prop = internalSetProperty(VersionImpl.PROPNAME_IS_CHECKED_OUT, InternalValue.create(false));
+        Property prop = internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(false));
-        prop = internalSetProperty(VersionImpl.PROPNAME_BASE_VERSION, InternalValue.create(new UUID(v.getUUID())));
+        prop = internalSetProperty(VersionManager.PROPNAME_BASE_VERSION, InternalValue.create(new UUID(v.getUUID())));
-        prop = internalSetProperty(VersionImpl.PROPNAME_PREDECESSORS, new InternalValue[0]);
+        prop = internalSetProperty(VersionManager.PROPNAME_PREDECESSORS, new InternalValue[0]);
-        Property prop = internalSetProperty(VersionImpl.PROPNAME_IS_CHECKED_OUT, InternalValue.create(true));
+        Property prop = internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(true));
-        prop = internalSetProperty(VersionImpl.PROPNAME_PREDECESSORS,
+        prop = internalSetProperty(VersionManager.PROPNAME_PREDECESSORS,
-
-        Value[] values = getProperty(VersionImpl.PROPNAME_PREDECESSORS).getValues();
+        Value[] values = getProperty(VersionManager.PROPNAME_PREDECESSORS).getValues();
-        Property prop = internalSetProperty(VersionImpl.PROPNAME_PREDECESSORS, preds);
+        Property prop = internalSetProperty(VersionManager.PROPNAME_PREDECESSORS, preds);
-        Value[] values = getProperty(VersionImpl.PROPNAME_PREDECESSORS).getValues();
+        Value[] values = getProperty(VersionManager.PROPNAME_PREDECESSORS).getValues();
-                Property prop = internalSetProperty(VersionImpl.PROPNAME_PREDECESSORS, preds);
+                Property prop = internalSetProperty(VersionManager.PROPNAME_PREDECESSORS, preds);
-        if (hasProperty(VersionImpl.PROPNAME_PREDECESSORS)) {
-            Value[] values = getProperty(VersionImpl.PROPNAME_PREDECESSORS).getValues();
+        if (hasProperty(VersionManager.PROPNAME_PREDECESSORS)) {
+            Value[] values = getProperty(VersionManager.PROPNAME_PREDECESSORS).getValues();
-        VersionImpl v = (VersionImpl) getBaseVersion();
-        VersionImpl vp = (VersionImpl) srcNode.getBaseVersion();
+        InternalVersion v = ((VersionImpl) getBaseVersion()).getInternalVersion();
+        InternalVersion vp = ((VersionImpl) srcNode.getBaseVersion()).getInternalVersion();
-        } else if (v.isSame(vp) || v.isMoreRecent(vp)) {
+        } else if (v.equals(vp) || v.isMoreRecent(vp)) {
-                values.add(new ReferenceValue(vp));
+                values.add(new ReferenceValue(srcNode.getBaseVersion()));
-        return getProperty(VersionImpl.PROPNAME_IS_CHECKED_OUT).getBoolean();
+        return getProperty(VersionManager.PROPNAME_IS_CHECKED_OUT).getBoolean();
-        return hasProperty(VersionImpl.PROPNAME_IS_CHECKED_OUT)
-                ? getProperty(VersionImpl.PROPNAME_IS_CHECKED_OUT).getBoolean()
+        return hasProperty(VersionManager.PROPNAME_IS_CHECKED_OUT)
+                ? getProperty(VersionManager.PROPNAME_IS_CHECKED_OUT).getBoolean()
-        internalRestore((VersionImpl) getVersionHistory().getVersion(versionName), gvs);
+        internalRestore(getVersionHistory().getVersion(versionName), gvs);
-        internalRestore((VersionImpl) version, new GenericVersionSelector(version.getCreated()));
+        internalRestore(version, new GenericVersionSelector(version.getCreated()));
-        NodeImpl node = addNode(relPath, (VersionImpl) version);
+        NodeImpl node = addNode(relPath, ((VersionImpl) version).getFrozenNode());
-        node.internalRestore((VersionImpl) version, new GenericVersionSelector(version.getCreated()));
+        node.internalRestore(version, new GenericVersionSelector(version.getCreated()));
-
-        VersionImpl v = (VersionImpl) getVersionHistory().getVersionByLabel(versionLabel);
+        Version v = getVersionHistory().getVersionByLabel(versionLabel);
-     * @param relPath The path of the new <code>Node</code> that is to be created,
-     *                the last item of this pathwill be the name of the new <code>Node</code>.
+     * @param name   The name of the new <code>Node</code> that is to be created.
+     * @param frozen The frozen node that contains the creation information
+     * @return The node that was added.
+     * @throws ItemExistsException          If an item at the
+     *                                      specified path already exists(and same-name siblings are not allowed).
+     * @throws PathNotFoundException        If specified path implies intermediary
+     *                                      <code>Node</code>s that do not exist.
+     * @throws NoSuchNodeTypeException      If the specified <code>nodeTypeName</code>
+     *                                      is not recognized.
+     * @throws ConstraintViolationException If an attempt is made to add a node as the
+     *                                      child of a <code>Property</code>
+     * @throws RepositoryException          if another error occurs.
+     */
+    private NodeImpl addNode(QName name, InternalFrozenNode frozen)
+            throws ItemExistsException, PathNotFoundException,
+            ConstraintViolationException, NoSuchNodeTypeException,
+            RepositoryException {
+
+        // get frozen node type
+        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
+        NodeTypeImpl nt = (NodeTypeImpl) ntMgr.getNodeType(frozen.getFrozenPrimaryType());
+
+        // get frozen uuid
+        String uuid = frozen.getFrozenUUID();
+
+        NodeImpl node = internalAddChildNode(name, nt, uuid);
+
+        // get frozen mixin
+        // todo: also respect mixing types on creation?
+        QName[] mxNames = frozen.getFrozenMixinTypes();
+        for (int i = 0; i < mxNames.length; i++) {
+            try {
+                node.addMixin(mxNames[i].toJCRName(session.getNamespaceResolver()));
+            } catch (NoPrefixDeclaredException e) {
+                throw new NoSuchNodeTypeException("Unable to resolve mixin: " + e.toString());
+            }
+        }
+        return node;
+    }
+
+    /**
+     * Creates a new node at <code>relPath</code> of the node type, uuid and
+     * eventual mixin types stored in the frozen node. The same as
+     * <code>{@link #addNode(String relPath)}</code> except that the primary
+     * node type type, the uuid and evt. mixin type of the new node is
+     * explictly specified in the nt:frozen node.
+     * <p/>
+     *
+     * @param relPath The path of the new <code>Node</code> that is to be created.
-    private NodeImpl addNode(String relPath, FrozenNode frozen)
+    private NodeImpl addNode(String relPath, InternalFrozenNode frozen)
-        String ntName = frozen.getProperty(VersionImpl.PROPNAME_FROZEN_PRIMARY_TYPE).getString();
-        NodeTypeImpl nt = (NodeTypeImpl) ntMgr.getNodeType(ntName);
+        NodeTypeImpl nt = (NodeTypeImpl) ntMgr.getNodeType(frozen.getFrozenPrimaryType());
-        String uuid = frozen.hasProperty(VersionImpl.PROPNAME_FROZEN_UUID)
-                ? frozen.getProperty(VersionImpl.PROPNAME_FROZEN_UUID).getString()
-                : null;
+        String uuid = frozen.getFrozenUUID();
-        // get frozen mixin
+        // get frozen mixin
-        if (frozen.hasProperty(VersionImpl.PROPNAME_FROZEN_MIXIN_TYPES)) {
-            Value[] mxNames = frozen.getProperty(VersionImpl.PROPNAME_FROZEN_MIXIN_TYPES).getValues();
-            for (int i = 0; i < mxNames.length; i++) {
-                node.addMixin(mxNames[i].getString());
+        QName[] mxNames = frozen.getFrozenMixinTypes();
+        for (int i = 0; i < mxNames.length; i++) {
+            try {
+                node.addMixin(mxNames[i].toJCRName(session.getNamespaceResolver()));
+            } catch (NoPrefixDeclaredException e) {
+                throw new NoSuchNodeTypeException("Unable to resolve mixin: " + e.toString());
+
+    /**
+     * Internal method to restore a version.
+     *
+     * @param version
+     * @param vsel    the version selector that will select the correct version for
+     *                OPV=Version childnodes.
+     * @throws UnsupportedRepositoryOperationException
+     *
+     * @throws RepositoryException
+     */
+    private void internalRestore(Version version, VersionSelector vsel)
+            throws UnsupportedRepositoryOperationException, RepositoryException {
+        internalRestore(((VersionImpl) version).getInternalVersion(), vsel);
+    }
+
-    private void internalRestore(VersionImpl version, VersionSelector vsel)
+    private void internalRestore(InternalVersion version, VersionSelector vsel)
-        restoreFrozenState(version, vsel);
+        restoreFrozenState(version.getFrozenNode(), vsel);
-        internalSetProperty(VersionImpl.PROPNAME_BASE_VERSION, InternalValue.create(new UUID(version.getUUID())));
+        internalSetProperty(VersionManager.PROPNAME_BASE_VERSION, InternalValue.create(new UUID(version.getUUID())));
-        internalSetProperty(VersionImpl.PROPNAME_IS_CHECKED_OUT, InternalValue.create(false));
+        internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(false));
-        internalSetProperty(VersionImpl.PROPNAME_PREDECESSORS, new InternalValue[0]);
+        internalSetProperty(VersionManager.PROPNAME_PREDECESSORS, new InternalValue[0]);
-    /**
-     * Little helper to retrieve the opv value for a property. depends on the
-     * implementaion. if nt:frozen is used, need to lookup prop def.
-     *
-     * @param name
-     * @param type
-     * @param multiValued
-     * @return
-     * @throws RepositoryException
-     */
-    private int guessOPV(QName name, int type, boolean multiValued) throws RepositoryException {
-        PropertyDefImpl def = getApplicablePropertyDef(name, type, multiValued);
-        return def.getOnParentVersion();
-    }
-    void restoreFrozenState(FrozenNode freeze, VersionSelector vsel)
+    void restoreFrozenState(InternalFrozenNode freeze, VersionSelector vsel)
-        PropertyIterator piter = freeze.getProperties();
-        while (piter.hasNext()) {
-            PropertyImpl prop = (PropertyImpl) piter.nextProperty();
-            // check for special property
-            if (prop.getQName().equals(VersionImpl.PROPNAME_FROZEN_UUID)) {
-                // check if uuid is the same as 'this' one.
-                if (!isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
-                    throw new ItemExistsException("Unable to restore version of " + safeGetJCRPath() + ". Not referenceable.");
+        // check uuid
+        if (!isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+            throw new ItemExistsException("Unable to restore version of " + safeGetJCRPath() + ". Not referenceable.");
+        }
+        if (!freeze.getFrozenUUID().equals(getUUID())) {
+            throw new ItemExistsException("Unable to restore version of " + safeGetJCRPath() + ". UUID changed.");
+        }
+        // check primarty type
+        if (!freeze.getFrozenPrimaryType().equals(nodeType.getQName())) {
+            // todo: check with spec what should happen here
+            throw new ItemExistsException("Unable to restore version of " + safeGetJCRPath() + ". PrimaryType changed.");
+        }
+        // adjust mixins
+        QName[] values = freeze.getFrozenMixinTypes();
+        NodeType[] mixins = getMixinNodeTypes();
+        for (int i = 0; i < values.length; i++) {
+            boolean found = false;
+            for (int j = 0; j < mixins.length; j++) {
+                if (values[i].equals(((NodeTypeImpl) mixins[j]).getQName())) {
+                    // clear
+                    mixins[j] = null;
+                    found = true;
+                    break;
-                if (!prop.getString().equals(this.getUUID())) {
-                    throw new ItemExistsException("Unable to restore version of " + safeGetJCRPath() + ". UUID changed.");
-                }
-            } else if (prop.getQName().equals(VersionImpl.PROPNAME_FROZEN_PRIMARY_TYPE)) {
-                // check if primaryType is the same as 'this' one.
-                if (!prop.getString().equals(this.getPrimaryNodeType().getName())) {
-                    // todo: check with spec what should happen here
-                    throw new ItemExistsException("Unable to restore version of " + safeGetJCRPath() + ". PrimaryType changed.");
-                }
-            } else if (prop.getQName().equals(VersionImpl.PROPNAME_FROZEN_MIXIN_TYPES)) {
-                // add mixins
-                Value[] values = prop.getValues();
-                NodeType[] mixins = getMixinNodeTypes();
-                for (int i = 0; i < values.length; i++) {
-                    String name = values[i].getString();
-                    boolean found = false;
-                    for (int j = 0; j < mixins.length; j++) {
-                        if (name.equals(mixins[j].getName())) {
-                            // clear
-                            mixins[j] = null;
-                            found = true;
-                            break;
-                        }
-                    }
-                    if (!found) {
-                        addMixin(name);
-                    }
-                }
-                // remove additional
-                for (int i = 0; i < mixins.length; i++) {
-                    if (mixins[i] != null) {
-                        removeMixin(mixins[i].getName());
-                    }
-                }
-            } else if (prop.getQName().equals(VersionImpl.PROPNAME_SUCCESSORS)) {
-                // ignore
-            } else if (prop.getQName().equals(VersionImpl.PROPNAME_CREATED)) {
-                // ignore
-            } else if (prop.getQName().equals(VersionImpl.PROPNAME_VERSION_LABELS)) {
-                // ignore
-            } else if (prop.getQName().equals(VersionImpl.PROPNAME_VERSION_HISTORY)) {
-                // ignore
-            } else if (prop.getQName().equals(VersionImpl.PROPNAME_PRIMARYTYPE)) {
-                // ignore
-            } else if (prop.getQName().equals(VersionImpl.PROPNAME_MIXINTYPES)) {
-                // ignore
-            } else if (prop.getQName().equals(VersionImpl.PROPNAME_UUID)) {
-                // ignore
-            } else {
-                // normal property
-                int type = PropertyType.UNDEFINED;
-                if (prop.getDefinition().isMultiple()) {
-                    Value[] values = prop.getValues();
-                    if (values.length != 0) {
-                        type = values[0].getType();
-                    }
-                } else {
-                    type = prop.getValue().getType();
-                }
-                int opv = guessOPV(prop.getQName(), type, prop.getDefinition().isMultiple());
-                switch (opv) {
-                    case OnParentVersionAction.ABORT:
-                        throw new RepositoryException("Checkin aborted due to OPV in " + prop.safeGetJCRPath());
-                    case OnParentVersionAction.COMPUTE:
-                    case OnParentVersionAction.IGNORE:
-                    case OnParentVersionAction.INITIALIZE:
-                        break;
-                    case OnParentVersionAction.VERSION:
-                    case OnParentVersionAction.COPY:
-                        internalCopyPropertyFrom(prop);
-                        break;
+            }
+            if (!found) {
+                try {
+                    addMixin(values[i].toJCRName(session.getNamespaceResolver()));
+                } catch (NoPrefixDeclaredException e) {
+                    String msg = "Unable to add mixin for restored node: " + e.getMessage();
+                    log.error(msg);
+                    throw new RepositoryException(msg);
+        // remove additional
+        for (int i = 0; i < mixins.length; i++) {
+            if (mixins[i] != null) {
+                removeMixin(mixins[i].getName());
+            }
+        }
-        // iterate over the nodes
-        NodeIterator niter = freeze.getNodes();
-        while (niter.hasNext()) {
-            NodeImpl child = (NodeImpl) niter.nextNode();
-            if (child.isNodeType(NodeTypeRegistry.NT_FROZEN)) {
-                FrozenNode f = (FrozenNode) child;
+        // copy frozen properties
+        PersistentProperty[] props = freeze.getFrozenProperties();
+        for (int i = 0; i < props.length; i++) {
+            PersistentProperty prop = props[i];
+            if (prop.getValues().length == 1) {
+                try {
+                    internalSetProperty(props[i].getName(), prop.getValues()[0]);
+                    continue;
+                } catch (RepositoryException e) {
+// ignore and try multiple below
+                }
+            }
+            internalSetProperty(props[i].getName(), prop.getValues());
+
+        }
+
+        // restore the frozen nodes
+        InternalFreeze[] frozenNodes = freeze.getFrozenChildNodes();
+        for (int i = 0; i < frozenNodes.length; i++) {
+            InternalFreeze child = frozenNodes[i];
+            if (child instanceof InternalFrozenNode) {
+                InternalFrozenNode f = (InternalFrozenNode) child;
-                if (hasNode(child.getName())) {
-                    remove(child.getName());
+                if (hasNode(f.getName())) {
+                    getNode(f.getName()).remove(".");
-                NodeImpl n = addNode(child.getName(), f);
+                NodeImpl n = addNode(f.getName(), f);
-            } else if (child.isNodeType(NodeTypeRegistry.NT_FROZEN_VERSIONABLE_CHILD)) {
+            } else if (child instanceof InternalFrozenVersionHistory) {
-                    VersionHistory vh = (VersionHistory) child.getProperty(VersionImpl.PROPNAME_VERSION_HISTORY).getNode();
-                    VersionImpl v = (VersionImpl) vsel.select(vh);
-                    NodeImpl node = addNode(child.getName(), v);
+                    VersionHistory history = ((InternalFrozenVersionHistory) child).getVersionHistory(session);
+                    InternalVersion v = ((VersionImpl) vsel.select(history)).getInternalVersion();
+                    NodeImpl node = addNode(child.getName(), v.getFrozenNode());

MOV26 MOV26 MOV31 UPD40 INS31 INS31 INS29 INS83 INS43 INS42 INS43 INS8 MOV43 UPD42 INS43 INS43 INS43 INS43 INS43 MOV60 INS29 INS83 INS39 INS42 INS44 INS44 INS43 MOV43 INS8 INS65 INS42 INS42 INS21 INS41 INS65 UPD65 UPD65 INS65 INS65 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 MOV24 INS41 UPD43 INS24 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS21 UPD43 UPD43 MOV25 MOV25 MOV25 MOV60 MOV24 MOV24 MOV60 INS24 INS60 INS24 INS68 INS32 INS32 UPD43 UPD43 UPD43 INS66 INS66 INS66 INS65 INS66 UPD66 UPD66 INS66 INS66 UPD42 INS66 INS66 UPD42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 UPD43 MOV43 INS59 MOV43 INS59 MOV43 INS59 MOV43 MOV59 INS5 INS59 INS8 INS42 UPD66 UPD42 INS43 MOV43 INS5 INS59 INS58 INS27 INS37 INS8 INS66 INS42 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS5 INS5 INS58 INS27 INS37 INS8 UPD5 MOV5 INS59 INS58 INS27 INS37 MOV8 INS42 INS42 INS42 INS36 INS42 UPD40 UPD42 INS32 UPD42 INS32 MOV32 INS42 INS42 UPD42 MOV32 INS68 UPD42 INS42 INS32 INS42 INS11 INS42 INS32 UPD42 INS43 INS85 INS42 INS32 INS54 INS42 UPD42 INS11 INS42 UPD42 INS32 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS54 INS42 INS32 INS42 INS32 UPD40 UPD40 UPD40 INS43 INS85 UPD42 INS25 INS43 INS85 UPD42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS21 UPD43 UPD42 MOV42 INS32 INS39 INS59 INS42 INS40 INS42 INS11 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS36 INS42 INS36 INS42 UPD40 UPD40 INS32 INS42 INS69 INS42 INS42 MOV43 INS32 INS42 INS42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 MOV8 INS12 INS43 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 INS34 INS8 INS12 INS36 INS42 MOV42 INS42 UPD42 MOV42 UPD42 MOV38 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS43 INS59 INS27 INS8 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS43 INS62 INS43 INS42 UPD40 UPD40 MOV11 MOV11 UPD42 UPD40 INS36 INS42 INS43 INS42 INS42 INS42 INS32 INS44 INS8 INS42 INS42 INS42 MOV32 INS21 INS44 INS8 MOV11 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 INS54 UPD42 MOV42 INS42 INS2 INS22 INS34 INS54 UPD42 MOV42 INS32 MOV32 INS42 INS2 INS42 INS43 INS62 INS42 MOV11 INS42 INS42 INS42 INS43 INS42 INS53 UPD42 INS32 INS43 INS42 INS53 INS8 INS12 INS42 INS42 MOV32 INS42 INS8 INS12 INS2 UPD42 MOV42 INS42 INS42 INS42 UPD43 MOV43 INS42 INS43 UPD40 UPD40 UPD40 UPD40 UPD40 INS42 INS14 INS42 INS42 INS32 INS42 INS14 MOV2 INS21 INS44 INS8 INS21 INS18 INS44 INS8 INS42 INS42 UPD42 INS42 UPD40 INS42 INS32 INS43 INS27 INS2 INS42 MOV32 INS43 INS27 INS36 UPD42 INS32 INS43 INS42 INS60 MOV21 INS53 INS32 INS43 INS42 UPD43 UPD42 INS32 INS32 INS42 UPD42 MOV42 INS42 INS45 INS32 INS42 INS42 UPD42 UPD42 INS42 INS45 INS32 INS11 INS42 INS32 UPD42 MOV42 MOV43 MOV59 INS14 UPD42 MOV42 INS32 INS2 INS42 UPD42 INS32 INS42 INS45 UPD42 MOV43 INS59 UPD43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV2 INS2 INS42 INS32 UPD42 INS27 UPD42 UPD42 INS42 MOV43 INS42 INS2 UPD42 MOV42 INS32 INS34 UPD42 MOV42 MOV32 INS42 INS32 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 MOV42 UPD42 MOV42 UPD42 INS36 UPD42 MOV42 UPD42 MOV42 INS36 INS42 INS32 INS42 UPD42 MOV42 INS11 INS11 MOV42 INS42 INS43 INS42 MOV43 MOV32 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL11 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL11 DEL39 DEL39 DEL42 DEL39 DEL42 DEL44 DEL60 DEL32 DEL41 DEL66 DEL40 DEL42 DEL32 DEL42 DEL32 DEL11 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL32 DEL33 DEL16 DEL59 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL52 DEL52 DEL32 DEL43 DEL60 DEL42 DEL32 DEL8 DEL25 DEL43 DEL42 DEL43 DEL32 DEL11 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL40 DEL32 DEL32 DEL42 DEL42 DEL40 DEL32 DEL43 DEL42 DEL42 DEL40 DEL32 DEL32 DEL11 DEL59 DEL11 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL40 DEL32 DEL8 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL40 DEL49 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL40 DEL49 DEL40 DEL49 DEL40 DEL49 DEL10 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL32 DEL21 DEL10 DEL50 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61