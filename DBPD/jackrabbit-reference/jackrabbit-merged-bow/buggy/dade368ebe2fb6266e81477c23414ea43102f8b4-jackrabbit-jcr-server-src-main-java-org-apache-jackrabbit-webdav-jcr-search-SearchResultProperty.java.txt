JCR-2076: JSR 283: QOM and SQL2
- change return type of QueryInfo.getColumnNames() from Name[] to String[]
- jcr2spi, spi2dav, spi2jcr implementation (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@789269 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+    private final String[] selectorNames;
-     * @param columnNames the column names of the search row represented by this
-     * dav property.
-     * @param values the values present in the columns
+     * @param columnNames   the column names of the search row represented by
+     *                      this dav property.
+     * @param selectorNames the selecotr names of the row represented by this
+     *                      dav property.
+     * @param values        the values present in the columns
-    public SearchResultProperty(String[] columnNames, Value[] values) {
+    public SearchResultProperty(String[] columnNames,
+                                String[] selectorNames,
+                                Value[] values) {
+        this.selectorNames = selectorNames;
-        List colList = new ArrayList();
-        List valList = new ArrayList();
+        List<String> colList = new ArrayList<String>();
+        List<String> selList = new ArrayList<String>();
+        List<Value> valList = new ArrayList<Value>();
-            Iterator elemIt = ((List)propValue).iterator();
-            while (elemIt.hasNext()) {
-                Object el = elemIt.next();
-                if (el instanceof Element) {
-                    parseColumnElement((Element)el, colList, valList, valueFactory);
+            for (Object o : ((List) propValue)) {
+                if (o instanceof Element) {
+                    parseColumnElement((Element) o, colList, selList, valList, valueFactory);
-            parseColumnElement((Element)property.getValue(), colList, valList, valueFactory);
+            parseColumnElement((Element)property.getValue(), colList, selList, valList, valueFactory);
-        columnNames = (String[]) colList.toArray(new String[colList.size()]);
-        values = (Value[]) valList.toArray(new Value[valList.size()]);
+        columnNames = colList.toArray(new String[colList.size()]);
+        selectorNames = selList.toArray(new String[selList.size()]);
+        values = valList.toArray(new Value[valList.size()]);
-    private void parseColumnElement(Element columnElement, List columnNames,
-                                    List values, ValueFactory valueFactory)
+    private void parseColumnElement(Element columnElement,
+                                    List<String> columnNames,
+                                    List<String> selectorNames,
+                                    List<Value> values,
+                                    ValueFactory valueFactory)
+        selectorNames.add(DomUtil.getChildText(columnElement, JCR_SELECTOR_NAME.getName(), JCR_SELECTOR_NAME.getNamespace()));
+     * @return the selector name for each of the columns in the result property.
+     */
+    public String[] getSelectorNames() {
+        return selectorNames;
+    }
+
+    /**
-     * the query result row a dcr:name, dcr:value and dcr:type element is created.
+     * the query result row a dcr:name, dcr:value, dcr:type and an optional
+     * dcr:selectorName element is created.
+     *   sel-name  |         |         |     S      |    S
+     *       &lt;dcr:selectorName&gt;S&lt;dcr:selectorName/&gt;
+     *       &lt;dcr:selectorName&gt;S&lt;dcr:selectorName/&gt;
+            String selectorName = selectorNames[i];
+            if (selectorName != null) {
+                DomUtil.addChildElement(columnEl, JCR_SELECTOR_NAME.getName(), JCR_SELECTOR_NAME.getNamespace(), selectorName);
+            }

INS23 INS31 INS83 INS83 INS5 INS59 INS44 MOV60 INS44 INS29 INS83 INS5 INS42 INS8 INS43 INS85 INS42 INS65 INS5 INS42 INS21 INS60 INS21 INS74 INS74 INS42 INS74 INS21 INS65 INS43 INS85 INS41 INS42 UPD66 UPD66 INS42 INS66 INS66 UPD66 INS43 INS85 INS7 INS74 INS74 INS74 INS59 INS7 MOV43 INS43 MOV43 INS43 INS43 INS43 INS32 INS66 INS42 INS42 UPD66 INS66 INS66 INS66 INS66 INS42 INS22 INS42 MOV43 INS43 UPD42 MOV43 INS43 UPD42 INS43 INS43 INS42 INS14 INS70 MOV32 INS42 INS32 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS25 INS52 INS42 INS42 INS74 INS42 INS74 INS42 INS42 INS74 INS44 MOV36 MOV8 INS42 INS42 INS3 INS42 INS42 INS42 INS32 INS32 INS43 INS59 INS27 INS8 MOV43 INS43 MOV43 INS43 INS43 MOV43 MOV43 INS42 MOV5 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL11 DEL85 DEL5 DEL11