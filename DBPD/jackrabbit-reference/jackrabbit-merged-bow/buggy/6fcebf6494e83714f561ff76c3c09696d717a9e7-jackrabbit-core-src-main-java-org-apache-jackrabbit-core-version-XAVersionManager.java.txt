JCR-2000: Deadlock on concurrent commits

Use DefaultISMLocking as the versioning lock to get the same JCR-1334 support for versioning as was already implemented for default workspace locking.

Make all transactions acquire the versioning lock regardless of whether versioning changes are included in the transaction. This prevents potential deadlocks as even a non-versioning commit will access the version store for reference checks.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@750011 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.ISMLocking.ReadLock;
+import org.apache.jackrabbit.core.state.ISMLocking.WriteLock;
+     * The global write lock on the version manager.
+     */
+    private WriteLock vmgrLock;
+
+    /**
-     * version manager in {@link InternalXAResource#prepare(TransactionContext)}
-     * if there are any version related items involved in this transaction.
+     * version manager in {@link InternalXAResource#prepare(TransactionContext)}.
-                Map vItems = (Map) tx.getAttribute(ITEMS_ATTRIBUTE_NAME);
-                if (!vItems.isEmpty()) {
-                    vMgr.acquireWriteLock();
-                    vmgrLocked = true;
-                }
+                vmgrLock = vMgr.acquireWriteLock();
+                vmgrLocked = true;
-                    vMgr.releaseWriteLock();
+                    vmgrLock.release();
-        acquireReadLock();
+        ReadLock lock = acquireReadLock();
-            releaseReadLock();
+            lock.release();

INS26 INS26 INS40 INS40 INS23 INS29 INS83 INS43 INS59 INS65 INS42 INS42 INS60 INS66 UPD66 INS43 INS59 INS42 INS42 MOV32 MOV8 INS42 UPD42 INS7 INS42 MOV32 UPD42 UPD42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL25 DEL8 DEL21