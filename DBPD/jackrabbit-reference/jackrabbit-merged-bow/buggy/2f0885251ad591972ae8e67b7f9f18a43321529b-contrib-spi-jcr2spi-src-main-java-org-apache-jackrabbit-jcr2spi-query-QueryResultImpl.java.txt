Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyManager;
-     * The item state manager of the session executing the query
+     * The HierarchyManager of the session executing the query
-    private final ItemStateManager itemStateMgr;
+    private final HierarchyManager hierarchyMgr;
-     * @param itemStateMgr the item state manager of the session executing the query.
+     * @param hierarchyMgr the HierarchyManager of the session executing the query.
-    QueryResultImpl(ItemManager itemMgr, ItemStateManager itemStateMgr,
+    QueryResultImpl(ItemManager itemMgr, HierarchyManager hierarchyMgr,
-        this.itemStateMgr = itemStateMgr;
+        this.hierarchyMgr = hierarchyMgr;
-    private ScoreNodeIterator getNodeIterator() throws RepositoryException {
-        return new NodeIteratorImpl(itemMgr, itemStateMgr, queryInfo);
+    private ScoreNodeIterator getNodeIterator() {
+        return new NodeIteratorImpl(itemMgr, hierarchyMgr, queryInfo);

UPD40 UPD43 UPD42 UPD42 UPD43 UPD42 UPD66 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43