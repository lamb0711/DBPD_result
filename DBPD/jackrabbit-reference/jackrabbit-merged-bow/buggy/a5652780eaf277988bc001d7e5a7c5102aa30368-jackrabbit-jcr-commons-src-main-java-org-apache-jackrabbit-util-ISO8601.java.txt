JCR-2515: ISO8601 uses default DecimalFormat constructor using locale specific digits

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915772 13f79535-47bb-0310-9956-ffa450edef68

-import java.text.DecimalFormat;
-     * misc. numeric formats used in formatting
-     */
-    private static final DecimalFormat XX_FORMAT = new DecimalFormat("00");
-    private static final DecimalFormat XXX_FORMAT = new DecimalFormat("000");
-    private static final DecimalFormat XXXX_FORMAT = new DecimalFormat("0000");
-
-    /**
-        buf.append(XXXX_FORMAT.format(getYear(cal)));
+        appendZeroPaddedInt(buf, getYear(cal), 4);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.MONTH) + 1));
+        appendZeroPaddedInt(buf, cal.get(Calendar.MONTH) + 1, 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.DAY_OF_MONTH)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.DAY_OF_MONTH), 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.HOUR_OF_DAY)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.HOUR_OF_DAY), 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.MINUTE)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.MINUTE), 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.SECOND)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.SECOND), 2);
-        buf.append(XXX_FORMAT.format(cal.get(Calendar.MILLISECOND)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.MILLISECOND), 3);
-            buf.append(XX_FORMAT.format(hours));
+            appendZeroPaddedInt(buf, hours, 2);
-            buf.append(XX_FORMAT.format(minutes));
+            appendZeroPaddedInt(buf, minutes, 2);
-     * Returns the astonomical year of the given calendar.
+     * Returns the astronomical year of the given calendar.
+
+    /**
+     * Appends a zero-padded number to the given string buffer.
+     * <p/>
+     * This is an internal helper method which doesn't perform any
+     * validation on the given arguments.
+     *
+     * @param buf String buffer to append to
+     * @param n number to append
+     * @param precision number of digits to append
+     */
+    private static void appendZeroPaddedInt(StringBuffer buf, int n, int precision) {
+        if (n < 0) {
+            buf.append('-');
+            n = -n;
+        }
+
+        int exp = 1;
+        while (exp < precision) {
+            if (n < Math.pow(10, exp)) {
+                buf.append('0');
+            }
+            exp++;
+        }
+        buf.append(n);
+    }

INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS65 INS65 INS65 UPD65 MOV65 INS43 INS42 INS39 INS42 INS39 INS42 INS25 INS60 INS61 INS21 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 UPD66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 UPD66 UPD42 MOV42 INS27 INS8 INS39 INS59 INS27 INS8 INS32 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 UPD42 UPD42 INS34 INS42 INS34 INS21 INS21 INS42 INS34 INS42 INS42 INS25 INS21 INS42 INS42 INS42 INS32 INS7 INS27 INS8 INS37 UPD42 UPD42 MOV42 MOV42 INS34 UPD42 UPD42 MOV42 MOV42 INS34 INS42 INS42 INS13 INS42 INS38 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS13 DEL40 DEL26 DEL29 DEL83 DEL83 DEL83 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32