JCR-2393: Index migration fails for property names that are prefixes of others

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@881299 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.TermEnum;
-import org.apache.lucene.index.FilterIndexReader;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.CorruptIndexException;
-import org.apache.lucene.index.TermPositions;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.store.Directory;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Queue;
+import java.util.SortedMap;
+import java.util.TreeMap;
+
+import org.apache.jackrabbit.core.query.lucene.directory.DirectoryManager;
+import org.apache.lucene.document.Field;
-import org.apache.lucene.document.Field;
-import org.apache.jackrabbit.core.query.lucene.directory.DirectoryManager;
-import org.slf4j.LoggerFactory;
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.lucene.index.FilterIndexReader;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermEnum;
+import org.apache.lucene.index.TermPositions;
+import org.apache.lucene.store.Directory;
-
-import java.io.IOException;
+import org.slf4j.LoggerFactory;
+     * @param oldSeparatorChar the old separator char that needs to be replaced.
-                               DirectoryManager directoryManager)
+                               DirectoryManager directoryManager,
+                               char oldSeparatorChar)
-                if (t.text().indexOf('\uFFFF') == -1) {
+                if (t.text().indexOf(oldSeparatorChar) == -1) {
-                        IndexReader.open(index.getDirectory()));
+                        IndexReader.open(index.getDirectory()),
+                        oldSeparatorChar);
-        public MigrationIndexReader(IndexReader in) {
+        private final char oldSepChar;
+
+        public MigrationIndexReader(IndexReader in, char oldSepChar) {
+            this.oldSepChar = oldSepChar;
-                    value = value.replace('\uFFFF', '[');
+                    value = value.replace(oldSepChar, '[');
-            return new MigrationTermEnum(in.terms());
+            List<TermEnum> enums = new ArrayList<TermEnum>();
+            List<String> fieldNames = new ArrayList<String>();
+            for (Object obj : in.getFieldNames(FieldOption.ALL)) {
+                fieldNames.add((String) obj);
+            }
+            Collections.sort(fieldNames);
+            for (String fieldName : fieldNames) {
+                if (fieldName.equals(FieldNames.PROPERTIES)) {
+                    addPropertyTerms(enums);
+                } else {
+                    enums.add(new RangeScan(in, new Term(fieldName, ""), new Term(fieldName, "\uFFFF")));
+                }
+            }
+            return new MigrationTermEnum(new ChainedTermEnum(enums), oldSepChar);
-            return new MigrationTermPositions(in.termPositions());
+            return new MigrationTermPositions(in.termPositions(), oldSepChar);
+        }
+
+        private void addPropertyTerms(List<TermEnum> enums) throws IOException {
+            SortedMap<String, TermEnum> termEnums = new TreeMap<String, TermEnum>(
+                    new Comparator<String>() {
+                        public int compare(String s1, String s2) {
+                            s1 = s1.replace(oldSepChar, '[');
+                            s2 = s2.replace(oldSepChar, '[');
+                            return s1.compareTo(s2);
+                        }
+            });
+            // scan through terms and find embedded field names
+            TermEnum terms = new RangeScan(in,
+                    new Term(FieldNames.PROPERTIES, ""),
+                    new Term(FieldNames.PROPERTIES, "\uFFFF"));
+            String previous = null;
+            while (terms.next()) {
+                Term t = terms.term();
+                String name = t.text().substring(0, t.text().indexOf(oldSepChar) + 1);
+                if (!name.equals(previous)) {
+                    termEnums.put(name, new RangeScan(in,
+                            new Term(FieldNames.PROPERTIES, name),
+                            new Term(FieldNames.PROPERTIES, name + "\uFFFF")));
+                }
+                previous = name;
+            }
+            enums.addAll(termEnums.values());
-            public MigrationTermEnum(TermEnum in) {
+            private final char oldSepChar;
+
+            public MigrationTermEnum(TermEnum in, char oldSepChar) {
+                this.oldSepChar = oldSepChar;
-                    return t.createTerm(text.replace('\uFFFF', '['));
+                    return t.createTerm(text.replace(oldSepChar, '['));
-            public MigrationTermPositions(TermPositions in) {
+            private final char oldSepChar;
+
+            public MigrationTermPositions(TermPositions in, char oldSepChar) {
+                this.oldSepChar = oldSepChar;
-                    text[term.text().indexOf('[')] = '\uFFFF';
+                    text[term.text().indexOf('[')] = oldSepChar;
+
+    private static final class ChainedTermEnum extends TermEnum {
+
+        private Queue<TermEnum> queue = new LinkedList<TermEnum>();
+
+        public ChainedTermEnum(Collection<TermEnum> enums) {
+            super();
+            queue.addAll(enums);
+        }
+
+        public boolean next() throws IOException {
+            for (;;) {
+                TermEnum terms = queue.peek();
+                if (terms == null) {
+                    // no more enums
+                    break;
+                }
+                if (terms.next()) {
+                    return true;
+                } else {
+                    queue.remove();
+                    terms.close();
+                }
+            }
+            return false;
+        }
+
+        public Term term() {
+            TermEnum terms = queue.peek();
+            if (terms != null) {
+                return terms.term();
+            }
+            return null;
+        }
+
+        public int docFreq() {
+            TermEnum terms = queue.peek();
+            if (terms != null) {
+                return terms.docFreq();
+            }
+            return 0;
+        }
+
+        public void close() throws IOException {
+            // close remaining
+            while (!queue.isEmpty()) {
+                queue.remove().close();
+            }
+        }
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS44 INS23 INS31 INS83 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS65 INS39 INS42 INS83 INS83 INS39 INS59 INS44 INS83 INS39 INS42 INS44 INS43 INS8 INS23 INS23 INS42 INS83 INS74 INS59 INS83 INS42 INS44 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS43 INS8 INS42 INS66 INS42 INS39 INS42 INS21 INS60 INS60 INS70 INS21 INS70 INS74 INS42 INS42 INS60 INS60 INS60 INS61 INS21 INS83 INS83 INS39 INS59 INS44 INS83 INS83 INS39 INS59 INS44 INS43 INS43 INS42 INS14 INS74 INS42 INS46 INS21 INS42 INS24 INS41 INS42 INS60 INS25 INS41 INS60 INS25 INS41 INS42 INS61 INS7 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS32 INS44 INS42 INS8 INS14 INS43 INS43 INS74 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS42 INS39 INS42 MOV46 INS21 INS42 INS39 INS42 MOV46 INS21 INS42 INS42 INS74 INS43 INS43 INS32 INS8 INS9 INS43 INS59 INS27 INS8 INS33 INS43 INS59 INS27 INS8 INS34 INS38 INS8 INS22 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS40 INS21 INS42 INS42 INS42 INS43 INS42 INS25 MOV43 INS14 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS60 INS60 INS25 INS21 INS42 INS42 INS32 INS7 INS7 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS25 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS32 INS21 INS52 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS32 INS42 INS32 INS8 INS8 INS43 INS42 INS42 INS42 INS42 INS74 INS14 INS43 INS42 INS14 INS14 INS43 INS59 INS43 INS59 INS38 INS8 INS7 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS43 INS43 INS42 INS42 INS11 INS42 INS42 INS40 INS21 INS21 INS42 INS43 INS43 INS43 INS74 INS1 INS42 INS43 INS40 INS45 INS43 INS40 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS33 INS10 INS42 INS42 INS41 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS14 INS14 INS43 INS42 INS43 INS42 INS21 INS21 INS41 INS32 INS42 INS42 INS43 INS42 INS14 INS14 INS42 INS43 INS42 INS45 INS43 INS42 INS45 INS42 INS42 INS7 INS7 INS32 INS42 INS42 INS42 INS43 INS40 INS42 INS43 INS40 INS27 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS13 DEL13 DEL13 DEL42 DEL42 DEL32 DEL14 DEL13 DEL13