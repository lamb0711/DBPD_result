- decouple InternalValue from ValueHelper
- some javadoc improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@419916 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.value.ValueHelper;
-     * @param targetType
-     * @param nsResolver
-     * @return
-     * @throws ValueFormatException
-     * @throws RepositoryException
-     */
-    public static InternalValue create(Value value, int targetType,
-                                       NamespaceResolver nsResolver)
-            throws ValueFormatException, RepositoryException {
-        if (value == null) {
-            throw new IllegalArgumentException("null value");
-        }
-        return create(ValueHelper.convert(value, targetType), nsResolver);
-    }
-
-    /**
-     * @param value
-     * @param targetType
-     * @param nsResolver
-     * @return
-     * @throws ValueFormatException
-     * @throws RepositoryException
-     */
-    public static InternalValue create(String value, int targetType,
-                                       NamespaceResolver nsResolver)
-            throws ValueFormatException, RepositoryException {
-        if (value == null) {
-            throw new IllegalArgumentException("null value");
-        }
-        return create(ValueHelper.convert(value, targetType), nsResolver);
-    }
-
-    /**
-     * @param value
-        switch (type) {
-            case PropertyType.BINARY:
+        if (type == PropertyType.BINARY) {
+            // return a copy since the wrapped BLOBFileValue instance is mutable
+            try {
+                InputStream stream = ((BLOBFileValue) val).getStream();
-                    InputStream stream = ((BLOBFileValue) val).getStream();
+                    return new InternalValue(new BLOBFileValue(stream));
+                } finally {
-                        return new InternalValue(new BLOBFileValue(stream));
-                    } finally {
-                        try {
-                            stream.close();
-                        } catch (IOException e) {
-                            // ignore
-                        }
+                        stream.close();
+                    } catch (IOException e) {
+                        // ignore
-                } catch (IOException ioe) {
-                    throw new RepositoryException("failed to copy binary value", ioe);
-            case PropertyType.BOOLEAN:
-                return new InternalValue(((Boolean) val).booleanValue());
-            case PropertyType.DATE:
-                return new InternalValue((Calendar) val);
-            case PropertyType.DOUBLE:
-                return new InternalValue(((Double) val).doubleValue());
-            case PropertyType.LONG:
-                return new InternalValue(((Long) val).longValue());
-            case PropertyType.REFERENCE:
-                return new InternalValue((UUID) val);
-            case PropertyType.PATH:
-                return new InternalValue((Path) val);
-            case PropertyType.NAME:
-                return new InternalValue((QName) val);
-            case PropertyType.STRING:
-                return new InternalValue((String) val);
-            default:
-                throw new RepositoryException("illegal internal value type");
+            } catch (IOException ioe) {
+                throw new RepositoryException("failed to copy binary value", ioe);
+            }
+        } else {
+            // for all other types it's safe to return 'this' because the
+            // wrapped value is immutable (and therefore this instance as well)
+            return this;
-     * @param s
+     * Parses the given string as an <code>InternalValue</code> of the
+     * specified type. The string must be in the format returned by the
+     * <code>InternalValue.toString()</code> method.
+     *
+     * @param s a <code>String</code> containing the <code>InternalValue</code>
+     *          representation to be parsed.
-     * @return
+     * @return the <code>InternalValue</code> represented by the arguments
+     * @throws IllegalArgumentException if the specified string can not be parsed
+     *                                  as an <code>InternalValue</code> of the
+     *                                  specified type.
+     * @see #toString()
-                throw new IllegalArgumentException("this method does not support the type PropertyType.BINARY");
+                throw new IllegalArgumentException(
+                        "this method does not support the type PropertyType.BINARY");

INS8 INS25 INS65 INS65 INS65 INS27 MOV8 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS68 INS42 INS40 MOV54 INS41 INS42 INS52 DEL40 DEL26 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL40 DEL49 DEL40 DEL49 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL41 DEL49 DEL42 DEL43 DEL45 DEL14 DEL53 DEL50