JCR-2000: Deadlock on concurrent commits

Use DefaultISMLocking as the versioning lock to get the same JCR-1334 support for versioning as was already implemented for default workspace locking.

Make all transactions acquire the versioning lock regardless of whether versioning changes are included in the transaction. This prevents potential deadlocks as even a non-versioning commit will access the version store for reference checks.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@750011 13f79535-47bb-0310-9956-ffa450edef68

-import EDU.oswego.cs.dl.util.concurrent.ReadWriteLock;
-import EDU.oswego.cs.dl.util.concurrent.ReentrantWriterPreferenceReadWriteLock;
+import org.apache.jackrabbit.core.state.DefaultISMLocking;
+import org.apache.jackrabbit.core.state.ISMLocking.ReadLock;
+import org.apache.jackrabbit.core.state.ISMLocking.WriteLock;
-    private final ReadWriteLock rwLock =
-            new ReentrantWriterPreferenceReadWriteLock() {
-                /**
-                 * Allow reader when there is no active writer, or current
-                 * thread owns the write lock (reentrant).
-                 */
-                protected boolean allowReader() {
-                    return activeWriter_ == null
-                        || activeWriter_ == Thread.currentThread();
-                }
-            };
+    private final DefaultISMLocking rwLock = new DefaultISMLocking();
-     * aquires the write lock on this version manager.
+     * Acquires the write lock on this version manager.
-    protected void acquireWriteLock() {
+    protected WriteLock acquireWriteLock() {
-                rwLock.writeLock().acquire();
-                return;
+                return rwLock.acquireWriteLock(null);
-     * releases the write lock on this version manager.
+     * acquires the read lock on this version manager.
-    protected void releaseWriteLock() {
-        rwLock.writeLock().release();
-    }
-
-    /**
-     * aquires the read lock on this version manager.
-     */
-    protected void acquireReadLock() {
+    protected ReadLock acquireReadLock() {
-                rwLock.readLock().acquire();
-                return;
+                return rwLock.acquireReadLock(null);
-     * releases the read lock on this version manager.
-     */
-    protected void releaseReadLock() {
-        rwLock.readLock().release();
-    }
-
-    /**
+        private final WriteLock lock;
+
+        public WriteOperation(WriteLock lock) {
+            this.lock = lock;
+        }
+
-                releaseWriteLock();
+                lock.release();
-        acquireWriteLock();
+        WriteLock lock = acquireWriteLock();
-            return new WriteOperation();
+            return new WriteOperation(lock);
-                releaseWriteLock();
+                lock.release();
-        acquireReadLock();
+        ReadLock lock = acquireReadLock();
-            releaseReadLock();
+            lock.release();

MOV26 MOV26 INS26 MOV31 INS40 UPD40 UPD40 UPD43 INS43 UPD42 INS43 UPD42 INS23 INS31 UPD42 INS42 INS42 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS60 INS60 UPD43 UPD66 UPD66 INS42 INS42 INS43 INS42 INS21 INS43 INS59 INS43 INS59 UPD42 INS42 INS7 INS42 INS42 MOV32 INS42 INS42 MOV32 INS22 INS42 INS41 INS41 INS52 INS42 INS42 INS42 UPD42 INS32 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS33 MOV42 UPD42 MOV42 INS33 INS42 UPD42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL27 DEL41 DEL8 DEL31 DEL1 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL39 DEL42 DEL32 DEL32 DEL21 DEL41 DEL39 DEL42 DEL32 DEL32 DEL21 DEL41 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL21 DEL21