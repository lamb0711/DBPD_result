work in progress

- replace ItemImpl by Item in ItemManager interface and adjust
  usages.
- change all setters on ItemState and derived classes from public to
  package private
- NodeState: use collection return value instead of set/list whereever possible
- WorkspaceManager: put ItemStateFactory to a separate class and
  remove unused inner class NodeReferenceImpl 
- add methods to NodeState/PropertyState that avoids return a null
  QItemDefinition and remove corresponding methods from NodeTypeManagerImpl
- remove ItemDefinitionManager.
- VersionHistoryImpl: add safety check if cne for root version really exists
- Fix ImporterImpl: ItemState.getDefinition() may return 'null' value.
  use method instead, that sets the definition if it is still missing.
- javadoc and code formatting


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430031 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.RepositoryException;
+
+import org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeRegistry;
+import org.apache.jackrabbit.jcr2spi.nodetype.EffectiveNodeType;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+    private static Logger log = LoggerFactory.getLogger(PropertyState.class);
+
-            def = propState.getDefinition();
+            def = propState.def;
-    //-------------------------------------------------------< public methods >
+    //----------------------< public READ methods and package private WRITE >---
-     * Sets the type of the property value(s)
-     *
-     * @param type the type to be set
-     * @see PropertyType
-     */
-    public void setType(int type) {
-        this.type = type;
-    }
-
-    /**
-     * Sets the flag indicating whether this property is multi-valued.
-     *
-     * @param multiValued flag indicating whether this property is multi-valued
-     */
-    public void setMultiValued(boolean multiValued) {
-        this.multiValued = multiValued;
-    }
-
-    /**
+     * Sets the type of the property value(s)
+     *
+     * @param type the type to be set
+     * @see PropertyType
+     */
+    void setType(int type) {
+        this.type = type;
+    }
+
+
+    /**
-     * Returns the id of the definition applicable to this property state.
+     * Sets the flag indicating whether this property is multi-valued.
-     * @return the id of the definition
+     * @param multiValued flag indicating whether this property is multi-valued
+     */
+    void setMultiValued(boolean multiValued) {
+        this.multiValued = multiValued;
+    }
+
+
+    /**
+     * Returns the {@link QPropertyDefinition definition} defined for this
+     * property state or <code>null</code> if the definition has not been
+     * set before (i.e. the corresponding item has not been accessed before).
+     *
+     * @return definition of this state
+     * @see #getDefinition(NodeTypeRegistry) for the corresponding method
+     * that never returns <code>null</code>.
+     * Returns the definition applicable to this property state. Since the definition
+     * is not defined upon state creation this state may have to retrieve
+     * the definition from the given <code>NodeTypeRegistry</code> first.
+     *
+     * @param ntRegistry
+     * @return definition of this state
+     * @see #getDefinition()
+     */
+    public QPropertyDefinition getDefinition(NodeTypeRegistry ntRegistry)
+        throws RepositoryException {
+        if (def == null) {
+            try {
+                NodeState parentState = getParent();
+                EffectiveNodeType ent = ntRegistry.getEffectiveNodeType(parentState.getNodeTypeNames());
+                setDefinition(ent.getApplicablePropertyDefinition(getQName(), getType(), isMultiValued()));
+            } catch (NodeTypeConflictException e) {
+                String msg = "internal error: failed to build effective node type.";
+                log.debug(msg);
+                throw new RepositoryException(msg, e);
+            }
+        }
+        return def;
+    }
+
+    /**
-    public void setDefinition(QPropertyDefinition def) {
+    void setDefinition(QPropertyDefinition def) {
+     * Returns the value(s) of this property.
+     *
+     * @return the value(s) of this property.
+     */
+    public QValue[] getValues() {
+        return values;
+    }
+
+    /**
-    public void setValues(QValue[] values) {
+    void setValues(QValue[] values) {
-    public void internalSetValues(QValue[] values) {
+    void internalSetValues(QValue[] values) {
-     * Returns the value(s) of this property.
-     *
-     * @return the value(s) of this property.
-     */
-    public QValue[] getValues() {
-        return values;
-    }
-
-    /**

INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS43 INS59 INS29 INS83 MOV43 INS42 MOV8 INS43 INS44 INS43 INS8 INS42 INS42 INS32 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS41 INS42 INS42 INS57 INS66 INS65 INS66 INS66 INS66 INS66 INS68 INS66 INS66 UPD66 INS66 INS66 INS42 UPD66 INS68 INS42 INS27 INS8 INS42 INS43 INS42 INS66 INS42 INS69 INS42 INS42 INS33 INS54 INS42 INS43 INS8 INS12 INS40 INS42 INS60 INS60 INS21 INS44 INS8 INS43 INS59 INS43 INS59 INS32 INS43 INS42 INS60 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL83 DEL83 DEL83 DEL83 DEL83