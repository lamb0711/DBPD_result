JCR-2076: JSR 283: QOM and SQL2
- jcr2spi, spi2dav, spi2jcr implementation (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@789307 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.query.qom.Source;
+import javax.jcr.query.qom.Join;
+import javax.jcr.query.qom.Selector;
+import javax.jcr.query.qom.QueryObjectModel;
+
-            Query q = getQuery(sInfo);
-            QueryResult qR = q.execute();
-            return queryResultToMultiStatus(qR);
+            return queryResultToMultiStatus(getQuery(sInfo));
-     * @param qResult <code>QueryResult</code> as obtained from {@link javax.jcr.query.Query#execute()}.
+     * @param query the query to execute.
-    private MultiStatus queryResultToMultiStatus(QueryResult qResult)
+    private MultiStatus queryResultToMultiStatus(Query query)
+        QueryResult qResult = query.execute();
-        // TODO
-        // sn.addAll(Arrays.asList(qResult.getSelectorNames()));
-        if (sn.isEmpty()) {
-            sn.add(null); // default selector
-        }
+        collectSelectorNames(query, qResult, sn);
+
+    private static void collectSelectorNames(Query query,
+                                             QueryResult result,
+                                             List<String> sn) {
+        if (query instanceof QueryObjectModel) {
+            QueryObjectModel qom = (QueryObjectModel) query;
+            collectSelectorNames(qom.getSource(), sn);
+        } else {
+            // TODO
+            // sn.addAll(Arrays.asList(qResult.getSelectorNames()));
+            // TODO: remove once getSelectorNames() is available
+            sn.add(null); // default selector
+        }
+    }
+
+    private static void collectSelectorNames(Source source, List<String> sn) {
+        if (source instanceof Join) {
+            collectSelectorNames((Join) source, sn);
+        } else {
+            collectSelectorNames((Selector) source, sn);
+        }
+    }
+
+    private static void collectSelectorNames(Join join, List<String> sn) {
+        collectSelectorNames(join.getLeft(), sn);
+        collectSelectorNames(join.getRight(), sn);
+    }
+
+    private static void collectSelectorNames(Selector s, List<String> sn) {
+        sn.add(s.getSelectorName());
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 MOV43 UPD42 INS60 INS21 INS43 INS42 MOV43 INS42 INS74 INS42 INS25 INS43 INS42 INS74 INS42 INS25 INS43 INS42 INS74 INS42 INS21 INS21 INS43 INS42 INS74 INS42 INS21 UPD42 UPD66 MOV43 INS59 INS32 INS42 INS43 INS43 INS62 INS8 MOV8 INS42 INS43 INS43 INS62 INS8 INS8 INS42 INS43 INS43 INS32 INS32 INS42 INS43 INS43 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS21 INS42 INS42 INS42 INS43 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL42 DEL68 DEL65 DEL66 DEL32 DEL25