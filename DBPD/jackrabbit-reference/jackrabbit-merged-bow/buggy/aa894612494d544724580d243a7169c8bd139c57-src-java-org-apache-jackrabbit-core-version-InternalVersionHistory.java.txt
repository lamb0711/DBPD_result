- adapted versioning again to spec 0.15
- added VirtualItemStateManager for reflecting virtual content


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55615 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.ItemImpl;
-     * key = UUID (String)
+     * key = versionId (String)
+     * the id of this history
+     */
+    private String historyId;
+
+    /**
+     * the version manager
+     */
+    private final PersistentVersionManager vMgr;
+
+    /**
-    InternalVersionHistory(PersistentNode node) throws RepositoryException {
+    InternalVersionHistory(PersistentVersionManager vMgr, PersistentNode node) throws RepositoryException {
+        this.vMgr = vMgr;
+        // get id
+        historyId = (String) node.getPropertyValue(PersistentVersionManager.PROPNAME_HISTORY_ID).internalValue();
+
-            if (child.getName().equals(VersionManager.NODENAME_VERSION_LABELS)) {
+            if (child.getName().equals(PersistentVersionManager.NODENAME_VERSION_LABELS)) {
-            versionCache.put(child.getUUID(), v);
-            if (child.getName().equals(VersionManager.NODENAME_ROOTVERSION)) {
+            versionCache.put(v.getId(), v);
+            if (v.isRootVersion()) {
-            String name = (String) lNode.getPropertyValue(VersionManager.PROPNAME_NAME).internalValue();
-            String ref = ((UUID) lNode.getPropertyValue(VersionManager.PROPNAME_VERSION).internalValue()).toString();
+            String name = (String) lNode.getPropertyValue(PersistentVersionManager.PROPNAME_NAME).internalValue();
+            String ref = (String) lNode.getPropertyValue(PersistentVersionManager.PROPNAME_VERSION).internalValue();
-     * Returns the uuid of this version history
+     * returns the version manager
+     * @return
+     */
+    public PersistentVersionManager getVersionManager() {
+        return vMgr;
+    }
+
+    /**
+     * Returns the id of this version history
-    public String getUUID() {
-        return node.getUUID();
+    public String getId() {
+        return historyId;
-        versionCache.remove(v.getUUID());
+        versionCache.remove(v.getId());
-    public void addVersionLabel(InternalVersion version, String label, boolean move) throws RepositoryException {
+    public void addVersionLabel(InternalVersion version, String label, boolean move)
+            throws VersionException, RepositoryException {
-            throw new RepositoryException("Version label " + label + " already defined for version " + prev);
+            throw new VersionException("Version label " + label + " already defined for version " + prev.getName());
-        lNode.setPropertyValue(VersionManager.PROPNAME_NAME, InternalValue.create(label));
-        lNode.setPropertyValue(VersionManager.PROPNAME_VERSION, InternalValue.create(new UUID(version.getUUID())));
-        lNode.store();
+        lNode.setPropertyValue(PersistentVersionManager.PROPNAME_NAME, InternalValue.create(label));
+        lNode.setPropertyValue(PersistentVersionManager.PROPNAME_VERSION, InternalValue.create(version.getId()));
+        labelNode.store();
+        // inform manager
+        vMgr.onVersionModified(version);
+
+        // inform manager
+        vMgr.onVersionModified(v);
-            String uuid = preds[i].getString();
+            String predId = preds[i].getString();
-            if (!versionCache.containsKey(uuid)) {
+            if (!versionCache.containsKey(predId)) {
-            predecessors[i] = InternalValue.create(new UUID(uuid));
+            predecessors[i] = InternalValue.create(predId);
-        vNode.setPropertyValue(ItemImpl.PROPNAME_UUID, InternalValue.create(vNode.getUUID()));
-        vNode.setMixinNodeTypes(new QName[]{NodeTypeRegistry.MIX_REFERENCEABLE});
+        String versionId = UUID.randomUUID().toString();
+        vNode.setPropertyValue(PersistentVersionManager.PROPNAME_VERSION_ID, InternalValue.create(versionId));
-        vNode.setPropertyValues(VersionManager.PROPNAME_PREDECESSORS, PropertyType.REFERENCE, predecessors);
-
+        vNode.setPropertyValues(VersionManager.PROPNAME_PREDECESSORS, PropertyType.STRING, predecessors);
-        InternalFrozenNode.checkin(vNode, VersionManager.NODENAME_FROZEN, src);
+        InternalFrozenNode.checkin(vNode, PersistentVersionManager.NODENAME_FROZEN, src, false);
-        versionCache.put(version.getUUID(), version);
+        versionCache.put(version.getId(), version);
+     * Returns an iterator over all versions (not ordered yet)
+     * @return
+     */
+    protected Iterator getVersions() {
+        return versionCache.values().iterator();
+    }
+
+    /**
-    protected static InternalVersionHistory create(PersistentNode parent, QName name)
+    protected static InternalVersionHistory create(PersistentVersionManager vMgr, PersistentNode parent, String historyId, QName name, NodeImpl src)
-        pNode.setPropertyValue(ItemImpl.PROPNAME_UUID, InternalValue.create(pNode.getUUID()));
-        pNode.setMixinNodeTypes(new QName[]{NodeTypeRegistry.MIX_REFERENCEABLE});
+        pNode.setPropertyValue(PersistentVersionManager.PROPNAME_HISTORY_ID, InternalValue.create(historyId));
-        pNode.addNode(VersionManager.NODENAME_VERSION_LABELS, NodeTypeRegistry.NT_UNSTRUCTURED);
+        pNode.addNode(PersistentVersionManager.NODENAME_VERSION_LABELS, NodeTypeRegistry.NT_UNSTRUCTURED);
+        String versionId = UUID.randomUUID().toString();
-        vNode.setPropertyValue(ItemImpl.PROPNAME_UUID, InternalValue.create(vNode.getUUID()));
-        vNode.setMixinNodeTypes(new QName[]{NodeTypeRegistry.MIX_REFERENCEABLE});
+        vNode.setPropertyValue(PersistentVersionManager.PROPNAME_VERSION_ID, InternalValue.create(versionId));
+        // add also an empty frozen node to the root version
+        InternalFrozenNode.checkin(vNode, PersistentVersionManager.NODENAME_FROZEN, src, true);
+
-        return new InternalVersionHistory(pNode);
+        return new InternalVersionHistory(vMgr, pNode);

INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS43 INS42 INS8 MOV29 MOV83 MOV43 UPD42 MOV42 INS8 INS43 INS29 INS83 INS43 INS42 MOV8 INS44 INS44 INS44 MOV21 INS65 INS42 INS42 INS65 INS42 INS42 INS43 INS42 INS21 INS21 INS65 INS65 INS42 INS41 INS41 INS42 INS21 INS21 INS60 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 UPD66 INS66 INS66 INS42 INS7 INS7 INS66 INS42 UPD66 INS42 INS32 INS32 INS43 INS59 INS66 INS32 INS42 INS42 INS42 INS43 INS59 INS22 INS42 INS42 INS11 UPD40 UPD40 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD40 UPD40 UPD40 INS9 INS32 INS42 UPD40 UPD40 INS42 INS42 INS32 UPD40 UPD42 UPD42 INS42 INS40 INS42 INS9 INS42 INS52 INS42 INS43 INS32 INS32 MOV43 MOV43 UPD42 INS32 INS32 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS42 INS32 INS42 MOV32 UPD40 UPD42 MOV42 UPD42 MOV42 INS11 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 MOV42 MOV42 UPD42 UPD42 UPD43 MOV43 MOV32 UPD43 UPD42 INS42 UPD42 UPD42 INS32 UPD40 UPD40 INS42 INS42 DEL40 DEL26 DEL42 DEL40 DEL32 DEL11 DEL36 DEL42 DEL32 DEL31 DEL42 DEL42 DEL43 DEL32 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL4 DEL3 DEL32 DEL21 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL4 DEL3 DEL32 DEL21 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL40 DEL4 DEL3