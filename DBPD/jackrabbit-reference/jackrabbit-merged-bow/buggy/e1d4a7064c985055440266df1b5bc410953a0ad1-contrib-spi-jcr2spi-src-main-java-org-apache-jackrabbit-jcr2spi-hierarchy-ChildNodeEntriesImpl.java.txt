JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.Path;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
-     * @see ChildNodeEntries#get(QName)
+     * @see ChildNodeEntries#get(Name)
-    public List get(QName nodeName) {
+    public List get(Name nodeName) {
-     * @see ChildNodeEntries#get(QName, int)
+     * @see ChildNodeEntries#get(Name, int)
-    public NodeEntry get(QName nodeName, int index) {
+    public NodeEntry get(Name nodeName, int index) {
-     * @see ChildNodeEntries#get(QName, String)
+     * @see ChildNodeEntries#get(Name, String)
-    public NodeEntry get(QName nodeName, String uniqueID) {
+    public NodeEntry get(Name nodeName, String uniqueID) {
-        QName nodeName = entry.getQName();
+        Name nodeName = entry.getName();
-            reorder(entry.getQName(), insertLN, beforeLN);
+            reorder(entry.getName(), insertLN, beforeLN);
-            entriesByName.remove(childEntry.getQName(), ln);
+            entriesByName.remove(childEntry.getName(), ln);
-            reorder(insertEntry.getQName(), insertLN, beforeLN);
+            reorder(insertEntry.getName(), insertLN, beforeLN);
-    private void reorder(QName insertName, LinkedEntries.LinkNode insertLN, LinkedEntries.LinkNode beforeLN) {
+    private void reorder(Name insertName, LinkedEntries.LinkNode insertLN, LinkedEntries.LinkNode beforeLN) {
-                    } else if (ln != insertLN && ln.getNodeEntry().getQName().equals(insertName)) {
+                    } else if (ln != insertLN && ln.getNodeEntry().getName().equals(insertName)) {
-            private final QName qName;
+            private final Name qName;
-                qName = ((NodeEntry) value).getQName();
+                qName = ((NodeEntry) value).getName();
-     * Mapping of QName to LinkNode OR List of LinkNode(s) in case of SNSiblings.
+     * Mapping of Name to LinkNode OR List of LinkNode(s) in case of SNSiblings.
-        public boolean containsSiblings(QName qName) {
+        public boolean containsSiblings(Name qName) {
-        private Object get(QName qName) {
+        private Object get(Name qName) {
-        public List getList(QName qName) {
+        public List getList(Name qName) {
-        public NodeEntry getNodeEntry(QName qName, int index) {
+        public NodeEntry getNodeEntry(Name qName, int index) {
-        public LinkedEntries.LinkNode getLinkNode(QName qName, int index) {
+        public LinkedEntries.LinkNode getLinkNode(Name qName, int index) {
-        public void put(QName qName, LinkedEntries.LinkNode value) {
+        public void put(Name qName, LinkedEntries.LinkNode value) {
-        public LinkedEntries.LinkNode remove(QName qName, LinkedEntries.LinkNode value) {
+        public LinkedEntries.LinkNode remove(Name qName, LinkedEntries.LinkNode value) {
-        public void reorder(QName qName, LinkedEntries.LinkNode insertValue, int position) {
+        public void reorder(Name qName, LinkedEntries.LinkNode insertValue, int position) {

UPD40 UPD40 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD66 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42