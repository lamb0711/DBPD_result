JCR-1334 Deadlock due different Thread access in same Transaction

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@734400 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.TimeBomb;
+    private boolean distributedThreadAccess = false;
+    
+        this(session, false);
+    }
+
+    /**
+     * Create a new instance of this class. Takes a session as parameter.
+     * @param session session. If session is not of type
+     * {@link XASession}, an <code>IllegalArgumentException</code>
+     * is thrown
+     */
+    public UserTransactionImpl(Session session, boolean distributedThreadAccess) {
+            this.distributedThreadAccess = distributedThreadAccess; 
-            xares.commit(xid, false);
+            if (distributedThreadAccess) {
+                try {
+                    final Thread t = Thread.currentThread();
+                    final TimeBomb tb = new TimeBomb(100) {
+                        public void explode() {
+                            t.interrupt();
+                        }
+                    };
+                    tb.arm();
+                    Thread distributedThread = new Thread() {
+                        public void run() {
+                            try {
+                                xares.commit(xid, false);
+                                tb.disarm();                
+                            } catch (Exception e) {
+                                throw new RuntimeException(e.getMessage());
+                            }
+                        }
+                    };
+                    distributedThread.start();
+                    Thread.sleep(200);
+                } catch (InterruptedException e) {
+                    throw new SystemException("commit from different thread but same XID must not block");
+                }
+            } else {
+                xares.commit(xid, false);
+            }
+            
-    public void setTransactionTimeout(int seconds) throws SystemException {}
+    public void setTransactionTimeout(int seconds) throws SystemException {
+        try {
+            xares.setTransactionTimeout(seconds);
+        } catch (XAException e) {
+            SystemException se = new SystemException(
+                    "Unable to set the TransactionTiomeout: XA_ERR=" + e.errorCode);
+            se.initCause(e.getCause());
+            throw se;
+        }
+    }

INS26 INS40 INS23 INS31 INS83 INS39 INS59 INS29 INS83 INS42 INS44 INS8 INS44 INS8 INS42 INS9 INS65 INS65 INS43 INS42 INS17 INS39 INS42 INS54 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS42 INS9 INS8 INS8 INS12 INS42 INS21 MOV21 MOV21 MOV21 MOV21 MOV21 INS25 MOV21 INS21 INS44 INS8 INS7 INS42 INS8 INS8 INS32 INS43 INS42 INS60 INS21 INS53 INS22 INS42 INS54 INS21 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS52 INS42 INS8 INS12 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS60 INS60 INS21 INS60 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS9 INS43 INS27 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS43 INS42 INS53 INS42 INS45 INS40 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS34 INS42 INS14 INS42 INS42 INS43 INS34 INS1 INS43 INS1 INS43 INS45 INS42 INS31 INS42 INS31 INS42 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS21 INS54 INS32 MOV8 INS12 INS42 INS42 INS21 INS44 INS8 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS14 INS43 INS32 INS42 INS42 INS42 DEL8