JCR-2108: JSR 283 Observation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@790826 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.ItemId;
-import org.apache.jackrabbit.spi.NodeId;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.QValue;
-import org.apache.jackrabbit.spi.commons.EventImpl;
-import org.apache.jackrabbit.spi.commons.value.ValueFormat;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
-import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
-import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
-import javax.jcr.Session;
-import javax.jcr.Node;
-import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.NamespaceException;
-import javax.jcr.PropertyType;
-import javax.jcr.nodetype.NodeType;
-import java.util.HashMap;
-import java.util.Map;
-    private final List eventBundles = new ArrayList();
-
-    private final IdFactory idFactory;
-
-    private final QValueFactory qValueFactory;
+    private final List<EventBundle> eventBundles = new ArrayList<EventBundle>();
-    private volatile List filters;
-
-    /**
-     * The resolver of the underlying session.
-     */
-    private final NamePathResolver resolver;
+    private volatile List<EventFilter> filters;
+     * The event factory.
+     */
+    private final EventFactory eventFactory;
+
+    /**
-     * @param idFactory   the id factory.
-     * @param qValueFactory
-     * @param sessionInfo the session info.
-     * @param filters     the filters that should be applied to the generated
-     *                    events.
+     * @param idFactory     the id factory.
+     * @param qValueFactory the QValueFactory.
+     * @param sessionInfo   the session info.
+     * @param filters       the filters that should be applied to the generated
+     *                      events.
-        this.idFactory = idFactory;
-        this.qValueFactory = qValueFactory;
-        this.resolver = sessionInfo.getNamePathResolver();
+        this.eventFactory = new EventFactory(sessionInfo.getSession(),
+                sessionInfo.getNamePathResolver(), idFactory, qValueFactory);
-        obsMgr.addEventListener(this, EventSubscription.ALL_EVENTS,
-                "/", true, null, null, true);
+        obsMgr.addEventListener(this, EventSubscription.ALL_EVENTS, "/", true, null, null, true);
-        for (int i = 0; i < filters.length; i++) {
-            if (!(filters[i] instanceof EventFilterImpl)) {
+        for (EventFilter filter : filters) {
+            if (!(filter instanceof EventFilterImpl)) {
-        List tmp = new ArrayList(Arrays.asList(filters));
+        List<EventFilter> tmp = new ArrayList<EventFilter>(Arrays.asList(filters));
-        List spiEvents = new ArrayList();
+        List<Event> spiEvents = new ArrayList<Event>();
-                Session session = sessionInfo.getSession();
-                javax.jcr.observation.Event e = events.nextEvent();
-                Path p = resolver.getQPath(e.getPath());
-                Path parent = p.getAncestor(1);
-                int type = e.getType();
-
-                NodeId parentId = idFactory.createNodeId((String) null, parent);
-                String identifier = e.getIdentifier();
-                ItemId itemId;
-                Node node = null;
-                if (identifier != null) {
-                    itemId = idFactory.fromJcrIdentifier(e.getIdentifier());
-                    try {
-                        node = session.getItem(e.getPath()).getParent();
-                    } catch (RepositoryException re) {
-                        // ignore. TODO improve
-                    }
-                } else {
-                    switch (type) {
-                        case Event.NODE_ADDED:
-                        case Event.NODE_MOVED:
-                            node = session.getItem(e.getPath()).getParent();
-                        case Event.NODE_REMOVED:
-                            itemId = idFactory.createNodeId((String) null, p);
-                            break;
-                        case Event.PROPERTY_ADDED:
-                        case Event.PROPERTY_CHANGED:
-                            node = session.getItem(e.getPath()).getParent();
-                        case Event.PROPERTY_REMOVED:
-                            itemId = idFactory.createPropertyId(parentId,
-                                    p.getNameElement().getName());
-                            break;
-                        case Event.PERSIST:
-                        default:
-                            itemId = null;
-                    }
-                }
-
-                Name nodeTypeName = null;
-                Name[] mixinTypes = new Name[0];
-                if (node != null) {
-                    try {
-                        parentId = idFactory.createNodeId(node.getUUID(), null);
-                    } catch (UnsupportedRepositoryOperationException ex) {
-                        // not referenceable
-                    }
-                    nodeTypeName = resolver.getQName(node.getPrimaryNodeType().getName());
-                    mixinTypes = getNodeTypeNames(node.getMixinNodeTypes(), resolver);
-                }
-                Map<Name, QValue> info = new HashMap();
-                Map jcrInfo = e.getInfo();
-                for (Iterator it = jcrInfo.keySet().iterator(); it.hasNext();) {
-                    String key = it.next().toString();
-                    Object value = jcrInfo.get(key);
-
-                    Name name = resolver.getQName(key);
-                    if (value != null) {
-                        // event information is generated for NODE_MOVED only in which
-                        // case all values are of type PATH.
-                        QValue v = ValueFormat.getQValue(value.toString(), PropertyType.PATH, resolver, qValueFactory);
-                        info.put(name, v);
-                    } else {
-                        info.put(name, null);
-                    }
-                }
-                Event spiEvent = new EventImpl(e.getType(), p, itemId, parentId,
-                        nodeTypeName, mixinTypes, e.getUserID(), e.getUserData(), e.getDate(), info);
+                Event spiEvent = eventFactory.fromJCREvent(events.nextEvent());
-
-    /**
-     * Returns the names of the passed node types using the namespace
-     * resolver to parse the names.
-     *
-     * @param nt         the node types
-     * @param resolver
-     * @return the names of the node types.
-     * @throws NameException if a node type returns an illegal name.
-     * @throws NamespaceException if the name of a node type contains a
-     * prefix that is not known to <code>resolver</code>.
-     */
-    private static Name[] getNodeTypeNames(NodeType[] nt, NameResolver resolver)
-            throws NameException, NamespaceException {
-        Name[] names = new Name[nt.length];
-        for (int i = 0; i < nt.length; i++) {
-            Name ntName = resolver.getQName(nt[i].getName());
-            names[i] = ntName;
-        }
-        return names;
-    }

MOV23 INS74 MOV59 INS74 UPD43 MOV43 INS43 MOV43 INS43 UPD42 UPD42 INS21 INS70 UPD42 MOV42 INS74 INS42 UPD66 UPD66 INS66 UPD66 UPD66 INS7 INS44 INS42 MOV8 INS74 INS74 INS8 MOV43 INS43 MOV22 INS14 INS43 INS42 MOV43 INS43 MOV43 INS43 MOV54 INS42 UPD42 INS43 MOV32 MOV32 INS42 INS42 INS42 INS42 INS74 INS42 INS74 MOV12 INS42 MOV43 INS43 MOV43 INS43 MOV60 MOV21 INS42 INS42 MOV43 INS42 INS42 INS32 INS42 INS42 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL23 DEL43 DEL42 DEL59 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL33 DEL11 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL21 DEL40 DEL49 DEL42 DEL42 DEL42 DEL42 DEL43 DEL33 DEL11 DEL42 DEL32 DEL7 DEL21 DEL10 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL21 DEL40 DEL49 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL10 DEL40 DEL49 DEL49 DEL42 DEL33 DEL7 DEL21 DEL50 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL14 DEL59 DEL60 DEL8 DEL54 DEL8 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31