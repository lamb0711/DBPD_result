Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.config.CacheBehaviour;
+import org.apache.jackrabbit.jcr2spi.version.VersionManager;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+    private static Logger log = LoggerFactory.getLogger(Merge.class);
+
+    private final VersionManager mgr;
-    private Merge(NodeState nodeState, String srcWorkspaceName, boolean bestEffort) {
+    private Merge(NodeState nodeState, String srcWorkspaceName, boolean bestEffort, VersionManager mgr) {
+        this.mgr = mgr;
-     * @see Operation#persisted()
+     * @see Operation#persisted(CacheBehaviour)
+     * @param cacheBehaviour
-    public void persisted() {
-        nodeState.invalidate(true);
-        // TODO: invalidate the corresponding part of the version storage
+    public void persisted(CacheBehaviour cacheBehaviour) {
+        if (cacheBehaviour == CacheBehaviour.INVALIDATE) {
+            try {
+                mgr.getVersionHistoryNodeState(nodeState).invalidate(true);
+            } catch (RepositoryException e) {
+                log.warn("Internal error", e);
+            }
+            nodeState.getHierarchyEntry().invalidate(true);
+        }
-    public static Merge create(NodeState nodeState, String srcWorkspaceName, boolean bestEffort) {
-        return new Merge(nodeState, srcWorkspaceName, bestEffort);
+    public static Merge create(NodeState nodeState, String srcWorkspaceName, boolean bestEffort, VersionManager mgr) {
+        return new Merge(nodeState, srcWorkspaceName, bestEffort, mgr);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS44 INS8 INS44 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS21 INS65 INS43 INS42 INS25 INS43 INS42 INS42 INS42 INS57 INS42 INS7 INS42 INS42 INS27 INS8 INS42 INS43 INS22 INS42 INS69 INS42 INS40 INS54 INS21 INS42 INS42 INS52 INS42 INS43 INS8 INS12 INS32 INS42 MOV21 INS44 INS8 INS32 INS42 INS9 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 MOV42 INS42 INS42 INS45 INS42 DEL8