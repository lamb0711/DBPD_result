JCR-3516 also report and fix wrong parent relation in the index

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1444501 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.persistence.check.ConsistencyChecker;
+import org.apache.jackrabbit.core.state.ItemState;
-                String parentUUIDString = d.get(FieldNames.PARENT);
-                NodeId parentId = null;
-                if (parentUUIDString.length() > 0) {
-                    parentId = new NodeId(parentUUIDString);
-                }
-
-                boolean parentExists = parentId != null && nodeIds.containsKey(parentId);
-                boolean parentIndexed = parentExists && nodeIds.get(parentId);
-                if (parentId == null || parentIndexed) {
+                String parent = d.get(FieldNames.PARENT);
+                NodeId parentId;
+                if (parent != null && !parent.isEmpty()) {
+                    parentId = new NodeId(parent);
+                } else {
-                // parent is missing
+                boolean parentExists = nodeIds.containsKey(parentId);
+                boolean parentIndexed = parentExists && nodeIds.get(parentId);
+                if (parentIndexed) {
+                    continue;
+                }
+
+                // parent is missing from index
-                    errors.add(new UnknownParent(id, parentId));
+                    try {
+                        final ItemState itemState = stateMgr.getItemState(id);
+                        if (parentId.equals(itemState.getParentId())) {
+                            // orphaned node
+                            errors.add(new UnknownParent(id, parentId));
+                        } else {
+                            errors.add(new WrongParent(id, parentId, itemState.getParentId()));
+                        }
+                    } catch (ItemStateException ignored) {
+                    }
-                    log.info("Reparing missing node " + getPath(n) + " (" + ancestorId + ")");
+                    log.info("Repairing missing node " + getPath(n) + " (" + ancestorId + ")");
-     * The parent of a node is not available through the ItemStateManager.
+     * The parent of a node is not in the repository
+     * The parent as indexed does not correspond with the actual parent in the repository
+     */
+    private class WrongParent extends ConsistencyCheckError {
+
+        private WrongParent(NodeId id, NodeId indexedParentId, NodeId actualParentId) {
+            super("Node " + id + " has wrong parent: " + indexedParentId + ", should be : " + actualParentId, id);
+        }
+
+        @Override
+        public boolean repairable() {
+            return true;
+        }
+
+        /**
+         * Reindex node.
+         */
+        @Override
+        void repair() throws IOException {
+            index.removeAllDocuments(id);
+            try {
+                NodeState node = (NodeState) stateMgr.getItemState(id);
+                log.info("Re-indexing node with wrong parent in index: " + getPath(node));
+                Document d = index.createDocument(node);
+                index.addDocument(d);
+                nodeIds.put(node.getNodeId(), Boolean.TRUE);
+            } catch (NoSuchItemStateException e) {
+                log.info("Not re-indexing node with wrong parent because node no longer exists");
+            } catch (ItemStateException e) {
+                throw new IOException(e.toString());
+            } catch (RepositoryException e) {
+                throw new IOException(e.toString());
+            }
+        }
+
+    }
+
+    /**
+            } catch (NoSuchItemStateException e) {
+                log.info("Not re-indexing node with multiple occurrences because node no longer exists");
+                log.info("Adding missing node to index: " + getPath(nodeState));
+            } catch (NoSuchItemStateException e) {
+                log.info("Not adding missing node because node no longer exists");

UPD40 INS55 INS29 INS83 INS42 INS43 INS31 INS31 INS31 INS65 INS42 INS83 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS39 INS42 INS43 INS8 UPD66 INS66 INS43 INS42 INS43 INS42 INS43 INS42 INS46 INS42 INS41 INS65 INS42 INS42 INS21 INS54 INS42 INS42 INS42 INS27 INS42 INS9 INS66 INS32 INS8 INS12 INS12 INS12 INS12 INS12 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS60 INS21 INS60 INS21 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS21 INS44 INS8 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS43 INS42 INS21 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS21 INS32 INS43 INS42 INS21 UPD27 INS8 INS42 INS8 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS32 INS42 INS42 INS27 INS42 INS32 UPD42 INS27 INS38 INS18 MOV32 INS54 INS43 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS32 INS43 INS32 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS45 INS42 INS33 INS32 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS60 INS25 INS44 INS8 UPD45 UPD42 INS83 INS43 INS59 INS32 MOV8 INS8 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS42 INS32 INS42 INS42 INS42 DEL33 DEL32 DEL34 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL27