Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.hierarchy.NodeEntry;
-import org.apache.jackrabbit.spi.ItemId;
-import org.apache.jackrabbit.spi.IdFactory;
-import java.util.Collection;
- * <code>TransientItemStateManager</code> implements a {@link ItemStateManager}
- * and adds support for transient changes on {@link ItemState}s. This item
- * state manager also returns item states that are transiently deleted. It is
- * the responsiblity of the caller to check whether a certain item state is
- * still valid. This item state manager also provides methods to create new
- * item states. While all other modifications can be invoked on the item state
- * instances itself, creating a new node state is done using
+ * <code>TransientItemStateManager</code> adds support for transient changes on
+ * {@link ItemState}s and also provides methods to create new item states.
+ * While all other modifications can be invoked on the item state instances itself,
+ * creating a new node state is done using
- * and {@link #createNewPropertyState(QName, NodeState, QPropertyDefinition, QValue[], int)}.
+ * and
+ * {@link #createNewPropertyState(QName, NodeState, QPropertyDefinition, QValue[], int)}.
-public class TransientItemStateManager extends CachingItemStateManager
-    implements ItemStateCreationListener {
+public class TransientItemStateManager implements ItemStateCreationListener {
-     * The root node state or <code>null</code> if it hasn't been retrieved yet.
-     */
-    private NodeState rootNodeState;
-
-    /**
-     * @param idFactory
-     * @param parent
-    TransientItemStateManager(IdFactory idFactory, ItemStateManager parent) {
-        super(new TransientISFactory(idFactory, parent), idFactory);
+    TransientItemStateManager() {
-        getTransientFactory().setListener(this);
-    }
-
-
-    private TransientItemStateFactory getTransientFactory() {
-        return (TransientItemStateFactory) getItemStateFactory();
-                                 QNodeDefinition definition, NodeState parent) {
-        NodeState nodeState = getTransientFactory().createNewNodeState(nodeName, uniqueID, parent, nodeTypeName, definition);
+                                 QNodeDefinition definition, NodeState parent)
+        throws ItemExistsException {
-        parent.addChildNodeState(nodeState);
-        changeLog.added(nodeState);
+        parent.checkIsSessionState();
+        NodeState nodeState = ((NodeEntry) parent.getHierarchyEntry()).addNewNodeEntry(nodeName, uniqueID, nodeTypeName, definition);
+        nodeState.addListener(this);
+
+        parent.markModified();
+
-        PropertyState propState = getTransientFactory().createNewPropertyState(propName, parent, definition);
+
+        parent.checkIsSessionState();
+        PropertyState propState = ((NodeEntry) parent.getHierarchyEntry()).addNewPropertyEntry(propName, definition);
+        propState.addListener(this);
-        parent.addPropertyState(propState);
-        changeLog.added(propState);
+        parent.markModified();
+
-    //---------------------------------------------------< ItemStateManager >---
-    /**
-     * Return the root node state.
-     *
-     * @return the root node state.
-     * @throws ItemStateException if an error occurs while retrieving the root
-     *                            node state.
-     * @see ItemStateManager#getRootState()
-     */
-    public NodeState getRootState() throws ItemStateException {
-        if (rootNodeState == null) {
-            rootNodeState = getItemStateFactory().createRootState(this);
-        }
-        return rootNodeState;
-    }
-
-    /**
-     * Return an item state given its id. Please note that this implementation
-     * also returns item states that are in removed state ({@link
-     * Status#EXISTING_REMOVED} but not yet saved.
-     *
-     * @return item state.
-     * @throws NoSuchItemStateException if there is no item state (not even a
-     *                                  removed item state) with the given id.
-     * @see ItemStateManager#getItemState(ItemId)
-     */
-    public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {
-        return super.getItemState(id);
-    }
-
-    /**
-     * Return a flag indicating whether a given item state exists.
-     *
-     * @return <code>true</code> if item state exists within this item state
-     *         manager; <code>false</code> otherwise
-     * @see ItemStateManager#hasItemState(ItemId)
-     */
-    public boolean hasItemState(ItemId id) {
-        return super.hasItemState(id);
-    }
-
-    /**
-     * Always throws an {@link UnsupportedOperationException}. A transient item
-     * state manager cannot not maintain node references.
-     *
-     * @param nodeState
-     * @throws UnsupportedOperationException
-     * @see ItemStateManager#getReferingStates(NodeState)
-     */
-    public Collection getReferingStates(NodeState nodeState) {
-        throw new UnsupportedOperationException("getNodeReferences() not implemented");
-    }
-
-    /**
-     * Always throws an {@link UnsupportedOperationException}. A transient item
-     * state manager cannot not maintain node references.
-     *
-     * @param nodeState
-     * @throws UnsupportedOperationException
-     * @see ItemStateManager#hasReferingStates(NodeState)
-     */
-    public boolean hasReferingStates(NodeState nodeState) {
-        throw new UnsupportedOperationException("hasNodeReferences() not implemented");
-    }
-
+        if (changeLog.isEmpty()) {
+            return;
+        }
-                // only non transient states can change their status to
-                // invalidated -> nothing to do here.
+                // -> nothing to do here.
-

MOV26 UPD40 INS43 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS21 INS21 INS25 INS32 INS32 INS32 INS8 INS42 INS42 UPD42 UPD42 INS52 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS52 UPD42 UPD42 INS42 INS42 INS41 INS36 UPD42 INS36 UPD42 INS11 INS11 INS43 INS32 INS43 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL65 DEL66 DEL66 DEL66 DEL66 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL46 DEL42 DEL32 DEL42 DEL52 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL52 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL48 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL48 DEL41 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31