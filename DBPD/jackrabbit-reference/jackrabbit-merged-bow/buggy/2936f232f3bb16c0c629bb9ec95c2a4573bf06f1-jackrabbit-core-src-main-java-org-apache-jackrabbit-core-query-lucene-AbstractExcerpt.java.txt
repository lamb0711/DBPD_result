JCR-920: rep:excerpt() should also work on properties

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@537791 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.lucene.index.TermVectorOffsetInfo;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.Token;
+import java.io.StringReader;
+import java.io.Reader;
+import java.util.TreeMap;
+import java.util.SortedMap;
+import java.util.Arrays;
-public abstract class AbstractExcerpt implements ExcerptProvider {
+public abstract class AbstractExcerpt implements HighlightingExcerptProvider {
+     * {@inheritDoc}
+     */
+    public String highlight(String text) throws IOException {
+        return createExcerpt(createTermPositionVector(text),
+                text, 1, (text.length() + 1) * 2);
+    }
+
+    /**
+
+    /**
+     * @param text the text.
+     * @return a <code>TermPositionVector</code> for the given text.
+     */
+    private TermPositionVector createTermPositionVector(String text) {
+        // term -> TermVectorOffsetInfo[]
+        final SortedMap termMap = new TreeMap();
+        Reader r = new StringReader(text);
+        TokenStream ts = index.getTextAnalyzer().tokenStream("", r);
+        Token t;
+        try {
+            while ((t = ts.next()) != null) {
+                TermVectorOffsetInfo[] info =
+                        (TermVectorOffsetInfo[]) termMap.get(t.termText());
+                if (info == null) {
+                    info = new TermVectorOffsetInfo[1];
+                } else {
+                    TermVectorOffsetInfo[] tmp = info;
+                    info = new TermVectorOffsetInfo[tmp.length + 1];
+                    System.arraycopy(tmp, 0, info, 0, tmp.length);
+                }
+                info[info.length - 1] = new TermVectorOffsetInfo(
+                        t.startOffset(), t.endOffset());
+                termMap.put(t.termText(), info);
+            }
+        } catch (IOException e) {
+            // should never happen, we are reading from a string
+        }
+
+        return new TermPositionVector() {
+
+            private String[] terms =
+                    (String[]) termMap.keySet().toArray(new String[termMap.size()]);
+
+            public int[] getTermPositions(int index) {
+                return null;
+            }
+
+            public TermVectorOffsetInfo[] getOffsets(int index) {
+                TermVectorOffsetInfo[] info = TermVectorOffsetInfo.EMPTY_OFFSET_INFO;
+                if (index >= 0 && index < terms.length) {
+                    info = (TermVectorOffsetInfo[]) termMap.get(terms[index]);
+                }
+                return info;
+            }
+
+            public String getField() {
+                return "";
+            }
+
+            public int size() {
+                return terms.length;
+            }
+
+            public String[] getTerms() {
+                return terms;
+            }
+
+            public int[] getTermFrequencies() {
+                int[] freqs = new int[terms.length];
+                for (int i = 0; i < terms.length; i++) {
+                    freqs[i] = ((TermVectorOffsetInfo[]) termMap.get(terms[i])).length;
+                }
+                return freqs;
+            }
+
+            public int indexOf(String term) {
+                int res = Arrays.binarySearch(terms, term);
+                return res >= 0 ? res : -1;
+            }
+
+            public int[] indexesOf(String[] terms, int start, int len) {
+                int res[] = new int[len];
+                for (int i = 0; i < len; i++) {
+                    res[i] = indexOf(terms[i]);
+                }
+                return res;
+            }
+        };
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD43 INS31 INS31 UPD42 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS54 INS41 INS65 INS42 INS32 INS42 INS66 INS66 INS42 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS14 INS42 INS32 INS42 INS34 INS27 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS61 INS44 INS8 INS43 INS1 INS42 INS42 INS36 INS34 INS43 INS43 INS42 INS32 INS42 INS45 INS42 INS27 INS8 INS43 INS42 INS42 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS27 INS42 INS42 INS42 INS42 INS36 INS33 INS60 INS25 INS21 INS21 INS42 INS83 INS5 INS59 INS83 INS5 INS42 INS44 INS8 INS83 INS5 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS5 INS42 INS8 INS83 INS5 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS5 INS42 INS44 INS44 INS44 INS8 INS32 INS34 INS7 INS5 INS59 INS27 INS8 INS8 INS7 INS32 INS43 INS85 INS42 INS11 INS39 INS85 INS39 INS42 INS41 INS43 INS85 INS39 INS42 INS60 INS25 INS41 INS42 INS41 INS41 INS43 INS85 INS41 INS39 INS85 INS60 INS24 INS41 INS43 INS42 INS60 INS41 INS39 INS85 INS5 INS42 INS39 INS42 INS39 INS42 INS60 INS24 INS41 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS11 INS42 INS33 INS21 INS60 INS21 INS21 INS2 INS14 INS42 INS42 INS32 INS42 INS42 INS5 INS32 INS33 INS42 INS5 INS59 INS27 INS8 INS42 INS45 INS40 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS39 INS59 INS16 INS43 INS85 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS5 INS32 INS7 INS5 INS59 INS7 INS32 INS42 INS27 INS43 INS32 INS32 INS42 INS42 INS43 INS85 INS32 INS42 INS3 INS43 INS85 INS42 INS40 INS27 INS27 INS21 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS32 INS27 INS42 INS38 INS42 INS42 INS85 INS3 INS39 INS59 INS42 INS42 INS42 INS21 INS43 INS85 INS42 INS42 INS32 INS42 INS3 INS43 INS85 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS40 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS42 INS34 INS42 INS40 INS7 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS42 INS42 INS42 INS34 INS34 INS5 INS42 INS42 INS34 INS7 INS42 INS42 INS42 INS5 INS34 INS42 INS5 INS27 INS43 INS85 INS42 INS42 INS42 INS11 INS39 INS85 INS2 INS22 INS39 INS85 INS2 INS32 INS43 INS85 INS43 INS85 INS40 INS34 INS42 INS5 INS32 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS43 INS85 INS42 INS42 INS2 INS11 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS43 INS85 INS42 INS42 INS2 INS42 INS42 INS42