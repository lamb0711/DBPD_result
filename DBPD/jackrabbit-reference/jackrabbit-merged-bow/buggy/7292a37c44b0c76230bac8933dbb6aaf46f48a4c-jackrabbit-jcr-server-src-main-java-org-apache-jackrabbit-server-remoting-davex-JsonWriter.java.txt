JCR-3005: Make it possible to get multiple nodes in one call via davex

Simplify JsonWriter by using non-static references to the writer object

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1180845 13f79535-47bb-0310-9956-ffa450edef68

-    
+
-     * 
+     *
-        writeKey(writer, "nodes");
+        writeKey("nodes");
-            writeKey(writer, node.getPath());
+            writeKey(node.getPath());
-        PropertyIterator props = node.getProperties();        
+        PropertyIterator props = node.getProperties();
-            writeProperty(writer, prop);
+            writeProperty(prop);
-            writeKeyValue(writer, "::NodeIteratorSize", 0);
+            writeKeyValue("::NodeIteratorSize", 0);
-                    writeKey(writer, name + "[" + index + "]");
+                    writeKey(name + "[" + index + "]");
-                    writeKey(writer, name);
+                    writeKey(name);
-                    writeChildInfo(writer, n);
+                    writeChildInfo(n);
-     * 
-     * @param w
+     *
-    private static void writeChildInfo(Writer w, Node n) throws RepositoryException, IOException {
+    private void writeChildInfo(Node n) throws RepositoryException, IOException {
-        w.write('{');
+        writer.write('{');
-            writeProperty(w, n.getProperty(JcrConstants.JCR_UUID));
+            writeProperty(n.getProperty(JcrConstants.JCR_UUID));
-        w.write('}');
+        writer.write('}');
-     * @param w
-    private static void writeProperty(Writer w, Property p) throws RepositoryException, IOException {
+    private void writeProperty(Property p) throws RepositoryException, IOException {
-                writeKeyArray(w, key, binLengths);
+                writeKeyArray(key, binLengths);
-                writeKeyValue(w, key, p.getLength());
+                writeKeyValue(key, p.getLength());
-                writeKeyValue(w, ":" +  p.getName(), PropertyType.nameFromValue(type), true);
+                writeKeyValue(":" +  p.getName(), PropertyType.nameFromValue(type), true);
-                writeKeyArray(w, p.getName(), p.getValues());
+                writeKeyArray(p.getName(), p.getValues());
-                writeKeyValue(w, p.getName(), p.getValue());
+                writeKeyValue(p.getName(), p.getValue());
-    private static void writeKeyValue(Writer w, String key, String value, boolean hasNext) throws IOException {
-        writeKey(w, key);
-        w.write(JsonUtil.getJsonString(value));
+    private void writeKeyValue(String key, String value, boolean hasNext) throws IOException {
+        writeKey(key);
+        writer.write(JsonUtil.getJsonString(value));
-            w.write(',');           
+            writer.write(',');
-    private static void writeKeyValue(Writer w, String key, Value value) throws RepositoryException, IOException {
-        writeKey(w, key);
-        w.write(getJsonValue(value));
+    private void writeKeyValue(String key, Value value) throws RepositoryException, IOException {
+        writeKey(key);
+        writeJsonValue(value);
-    private static void writeKeyArray(Writer w, String key, Value[] values) throws RepositoryException, IOException {
-        writeKey(w, key);
-        w.write('[');
+    private void writeKeyArray(String key, Value[] values) throws RepositoryException, IOException {
+        writeKey(key);
+        writer.write('[');
-                w.write(',');
+                writer.write(',');
-            w.write(getJsonValue(values[i]));
+            writeJsonValue(values[i]);
-        w.write(']');
+        writer.write(']');
-    
-    private static void writeKeyValue(Writer w, String key, long binLength) throws IOException {
-        writeKey(w, key);
-        w.write(binLength + "");
+
+    private void writeKeyValue(String key, long binLength) throws IOException {
+        writeKey(key);
+        writer.write(String.valueOf(binLength));
-    
-    private static void writeKeyArray(Writer w, String key, long[] binLengths) throws RepositoryException, IOException {
-        writeKey(w, key);
-        w.write('[');
+
+    private void writeKeyArray(String key, long[] binLengths) throws RepositoryException, IOException {
+        writeKey(key);
+        writer.write('[');
-            String delim = (i == 0) ? "" : ",";
-            w.write(delim + binLengths[i]);
+            if (i > 0) {
+                writer.write(',');
+            }
+            writer.write(String.valueOf(binLengths[i]));
-        w.write(']');
+        writer.write(']');
-     * @param w
-    private static void writeKey(Writer w, String key) throws IOException {
-        w.write(JsonUtil.getJsonString(key));
-        w.write(':');
+   private void writeKey(String key) throws IOException {
+        writer.write(JsonUtil.getJsonString(key));
+        writer.write(':');
-    private static String getJsonValue(Value v) throws RepositoryException, IOException {
+    private void writeJsonValue(Value v) throws RepositoryException, IOException {
-                return v.getString();
+                writer.write(v.getString());
-                return JsonUtil.getJsonString(v.getString());
+                writer.write(JsonUtil.getJsonString(v.getString()));

INS39 UPD42 INS32 INS8 INS21 INS21 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 INS32 UPD42 INS25 MOV21 UPD42 UPD42 UPD42 INS32 INS32 INS27 MOV32 INS42 INS42 INS42 MOV27 INS8 INS32 INS42 INS42 MOV32 INS42 INS42 MOV32 UPD42 INS42 INS34 UPD42 INS21 INS42 INS42 MOV32 INS32 UPD42 UPD42 MOV2 UPD42 INS42 INS42 INS13 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL65 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL65 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL27 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL34 DEL27 DEL36 DEL45 DEL45 DEL16 DEL59 DEL60 DEL8 DEL42 DEL65 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL41 DEL41