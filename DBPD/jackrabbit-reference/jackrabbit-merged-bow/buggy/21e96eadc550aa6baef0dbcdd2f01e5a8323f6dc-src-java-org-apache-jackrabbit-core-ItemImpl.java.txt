migrating to v0.15 of the jsr 170 spec

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55516 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.access.AccessDeniedException;
-import javax.jcr.access.Permission;
+import javax.jcr.version.VersionException;
-         *   check the ADD_NODE permission
+         *   check the WRITE permission
-         *   check the REMOVE_ITEM permission
+         *   check the WRITE permission
-         * - check the SET_PROPERTY permission
+         * - check the WRITE permission
-                    // check REMOVE_ITEM permission
-                    if (!accessMgr.isGranted(id, Permission.REMOVE_ITEM)) {
+                    // check WRITE permission
+                    if (!accessMgr.isGranted(id, AccessManager.WRITE)) {
-                        // check ADD_NODE permission
-                        if (!accessMgr.isGranted(id, Permission.ADD_NODE)) {
+                        // check WRITE permission
+                        if (!accessMgr.isGranted(id, AccessManager.WRITE)) {
-                    // check SET_PROPERTY permission
-                    if (!accessMgr.isGranted(nodeId, Permission.SET_PROPERTY)) {
+                    // check WRITE permission on property
+                    if (!accessMgr.isGranted(propId, AccessManager.WRITE)) {
+                    if (propState.getOverlayedState() == null) {
+                        // property has been added, check WRITE permission on parent
+                        if (!accessMgr.isGranted(nodeId, AccessManager.WRITE)) {
+                            String msg = itemMgr.safeGetJCRPath(nodeId) + ": not allowed to set property " + prop.getName();
+                            log.error(msg);
+                            throw new AccessDeniedException(msg);
+                        }
+                    }
-                    if (def.getValueConstraint() != null) {
+                    if (def.getValueConstraints() != null) {
-            throws ConstraintViolationException, RepositoryException {
+            throws ReferentialIntegrityException, RepositoryException {
-                            throw new ConstraintViolationException(msg);
+                            throw new ReferentialIntegrityException(msg);
-                                    throw new ConstraintViolationException(msg);
+                                    throw new ReferentialIntegrityException(msg);
-                throw new ConstraintViolationException(msg);
+                throw new ReferentialIntegrityException(msg);
+     * @see Item#remove
+     */
+    public void remove() throws RepositoryException {
+        // check state of this instance
+        checkItemState();
+
+        Path.PathElement thisName = getPrimaryPath().getNameElement();
+
+        // check if protected
+        if (isNode()) {
+            NodeImpl node = (NodeImpl) this;
+            NodeDef def = node.getDefinition();
+            // check protected flag
+            if (def.isProtected()) {
+                String msg = safeGetJCRPath() + ": cannot remove a protected node";
+                log.error(msg);
+                throw new ConstraintViolationException(msg);
+            }
+        } else {
+            PropertyImpl prop = (PropertyImpl) this;
+            PropertyDef def = prop.getDefinition();
+            // check protected flag
+            if (def.isProtected()) {
+                String msg = safeGetJCRPath() + ": cannot remove a protected property";
+                log.error(msg);
+                throw new ConstraintViolationException(msg);
+            }
+        }
+
+        NodeImpl parentNode = (NodeImpl) getParent();
+
+        // check if versioning allows write
+        if (!parentNode.safeIsCheckedOut()) {
+            String msg = parentNode.safeGetJCRPath() + ": cannot remove a child of a checked-in node";
+            log.error(msg);
+            throw new VersionException(msg);
+        }
+
+        // check protected flag of parent node
+        if (parentNode.getDefinition().isProtected()) {
+            String msg = parentNode.safeGetJCRPath() + ": cannot remove a child of a protected node";
+            log.error(msg);
+            throw new ConstraintViolationException(msg);
+        }
+
+        // delegate the removal of the child item to the parent node
+        if (isNode()) {
+            parentNode.removeChildNode(thisName.getName(), thisName.getIndex());
+        } else {
+            parentNode.removeChildProperty(thisName.getName());
+        }
+    }
+
+    /**
-            RepositoryException {
+            ReferentialIntegrityException, RepositoryException {
-     * @see Item#isGranted
-     */
-    public boolean isGranted(long permissions)
-            throws UnsupportedRepositoryOperationException, RepositoryException {
-        checkItemState();
-
-        try {
-            // check state of this instance
-            checkItemState();
-
-            Permission[] perms = session.getAccessManager().getSupportedPermissions();
-            // check each permission separately
-            AccessManagerImpl accessMgr = session.getAccessManager();
-            for (int i = 0; i < perms.length; i++) {
-                Permission perm = perms[i];
-                if ((permissions & perm.getValue()) == perm.getValue()) {
-                    if (!accessMgr.isGranted(id, perm.getValue())) {
-                        return false;
-                    }
-                }
-                permissions &= ~perm.getValue();
-            }
-            if (permissions > 0) {
-                log.warn("unsupported/unknown permissions: " + permissions);
-            }
-            return true;
-        } catch (PathNotFoundException pnfe) {
-            String msg = "failed to check permissions on " + safeGetJCRPath();
-            log.error(msg, pnfe);
-            throw new RepositoryException(msg, pnfe);
-        }
-    }
-
-    /**

MOV26 MOV31 UPD40 UPD43 UPD39 UPD42 INS8 INS43 UPD42 MOV21 INS60 INS25 INS60 INS25 INS25 INS25 INS42 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS38 INS8 INS32 INS8 INS32 INS8 INS8 UPD42 INS40 INS42 INS32 UPD42 MOV42 MOV60 MOV60 INS25 MOV60 INS60 INS25 INS42 INS42 INS11 MOV32 INS60 MOV21 INS53 INS32 INS42 INS60 MOV21 MOV53 INS42 INS21 INS21 INS32 INS42 INS43 UPD43 INS32 INS8 UPD43 INS43 INS59 INS32 INS8 INS43 INS32 UPD42 UPD42 INS43 INS59 INS14 INS42 INS42 MOV43 INS59 INS32 INS32 INS53 INS42 UPD42 MOV42 UPD42 INS11 UPD42 UPD42 INS42 INS42 INS60 INS21 MOV53 UPD42 UPD42 INS11 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV60 INS21 MOV53 INS42 INS42 INS42 INS42 INS27 UPD42 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS14 INS43 INS52 UPD42 UPD42 INS43 INS59 INS32 INS43 INS52 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS32 INS45 UPD42 MOV42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS43 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 MOV45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS32 INS45 UPD45 INS32 INS33 INS25 INS42 UPD40 UPD42 UPD40 INS42 INS42 INS38 INS8 UPD42 INS32 INS60 INS21 INS53 INS53 UPD40 INS42 INS42 INS42 INS40 INS43 INS59 INS32 INS14 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS53 INS14 INS43 INS42 INS42 DEL40 DEL26 DEL39 DEL42 DEL44 DEL42 DEL43 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL2 DEL45 DEL42 DEL27 DEL42 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL32 DEL27 DEL36 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL38 DEL7 DEL21 DEL8 DEL24 DEL42 DEL34 DEL27 DEL8 DEL25 DEL9 DEL41 DEL8 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8