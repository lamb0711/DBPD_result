JCR-2453 - Break the spi2dav dependency to jcr-server

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1002639 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.webdav.EventUtil;
+import org.apache.jackrabbit.commons.webdav.JcrRemotingConstants;
+import org.apache.jackrabbit.commons.webdav.JcrValueType;
+import org.apache.jackrabbit.commons.webdav.NodeTypeConstants;
+import org.apache.jackrabbit.commons.webdav.NodeTypeUtil;
+import org.apache.jackrabbit.commons.webdav.ValueUtil;
-import org.apache.jackrabbit.webdav.jcr.ItemResourceConstants;
-import org.apache.jackrabbit.webdav.jcr.JcrValueType;
-import org.apache.jackrabbit.webdav.jcr.nodetype.NodeTypeConstants;
-import org.apache.jackrabbit.webdav.jcr.nodetype.NodeTypeProperty;
-import org.apache.jackrabbit.webdav.jcr.observation.SubscriptionImpl;
-import org.apache.jackrabbit.webdav.jcr.property.NamespacesProperty;
-import org.apache.jackrabbit.webdav.jcr.property.ValuesProperty;
-import org.apache.jackrabbit.webdav.jcr.version.report.JcrPrivilegeReport;
-import org.apache.jackrabbit.webdav.jcr.version.report.NodeTypesReport;
-import org.apache.jackrabbit.webdav.jcr.version.report.RegisteredNamespacesReport;
-import org.apache.jackrabbit.webdav.jcr.version.report.RepositoryDescriptorsReport;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
-    private static final SubscriptionInfo S_INFO = new SubscriptionInfo(SubscriptionImpl.getAllEventTypes(), true, INFINITE_TIMEOUT);
+    private static final SubscriptionInfo S_INFO = new SubscriptionInfo(DefaultEventType.create(EventUtil.EVENT_ALL, ItemResourceConstants.NAMESPACE), true, INFINITE_TIMEOUT);
-        if (propSet.contains(ItemResourceConstants.JCR_PARENT)) {
-            HrefProperty parentProp = new HrefProperty(propSet.get(ItemResourceConstants.JCR_PARENT));
+        DavProperty<?> p = propSet.get(JcrRemotingConstants.JCR_PARENT_LN, ItemResourceConstants.NAMESPACE);
+        if (p != null) {
+            HrefProperty parentProp = new HrefProperty(p);
-        if (propSet.contains(ItemResourceConstants.JCR_UUID)) {
-            return propSet.get(ItemResourceConstants.JCR_UUID).getValue().toString();
+        DavProperty<?> prop = propSet.get(JcrRemotingConstants.JCR_UUID_LN, ItemResourceConstants.NAMESPACE);
+        if (prop != null) {
+            return prop.getValue().toString();
-        DavProperty<?> nameProp = propSet.get(ItemResourceConstants.JCR_NAME);
+        DavProperty<?> nameProp = propSet.get(JcrRemotingConstants.JCR_NAME_LN, ItemResourceConstants.NAMESPACE);
-        DavProperty<?> indexProp = propSet.get(ItemResourceConstants.JCR_INDEX);
+        DavProperty<?> indexProp = propSet.get(JcrRemotingConstants.JCR_INDEX_LN, ItemResourceConstants.NAMESPACE);
-            ReportInfo info = new ReportInfo(RepositoryDescriptorsReport.REPOSITORY_DESCRIPTORS_REPORT, DEPTH_0);
+            ReportInfo info = new ReportInfo(JcrRemotingConstants.REPORT_REPOSITORY_DESCRIPTORS, ItemResourceConstants.NAMESPACE);
-                    ElementIterator nsElems = DomUtil.getChildren(rootElement, ItemResourceConstants.XML_DESCRIPTOR, ItemResourceConstants.NAMESPACE);
+                    ElementIterator nsElems = DomUtil.getChildren(rootElement, JcrRemotingConstants.XML_DESCRIPTOR, ItemResourceConstants.NAMESPACE);
-                        String key = DomUtil.getChildText(elem, ItemResourceConstants.XML_DESCRIPTORKEY, ItemResourceConstants.NAMESPACE);
-                        ElementIterator it = DomUtil.getChildren(elem, ItemResourceConstants.XML_DESCRIPTORVALUE, ItemResourceConstants.NAMESPACE);
+                        String key = DomUtil.getChildText(elem, JcrRemotingConstants.XML_DESCRIPTORKEY, ItemResourceConstants.NAMESPACE);
+                        ElementIterator it = DomUtil.getChildren(elem, JcrRemotingConstants.XML_DESCRIPTORVALUE, ItemResourceConstants.NAMESPACE);
-                                String typeStr = (DomUtil.getAttribute(dv, ItemResourceConstants.ATTR_VALUE_TYPE, null));
+                                String typeStr = (DomUtil.getAttribute(dv, JcrRemotingConstants.ATTR_VALUE_TYPE, null));
-            nameSet.add(ItemResourceConstants.JCR_WORKSPACE_NAME);
+            nameSet.add(JcrRemotingConstants.JCR_WORKSPACE_NAME_LN, ItemResourceConstants.NAMESPACE);
-            if (props.contains(ItemResourceConstants.JCR_WORKSPACE_NAME)) {
-                String wspName = props.get(ItemResourceConstants.JCR_WORKSPACE_NAME).getValue().toString();
+            DavProperty<?> prop = props.get(JcrRemotingConstants.JCR_WORKSPACE_NAME_LN, ItemResourceConstants.NAMESPACE);
+            if (prop != null) {
+                String wspName = prop.getValue().toString();
-            ReportInfo reportInfo = new ReportInfo(JcrPrivilegeReport.PRIVILEGES_REPORT);
+            ReportInfo reportInfo = new ReportInfo(JcrRemotingConstants.REPORT_PRIVILEGES, ItemResourceConstants.NAMESPACE);
-        nameSet.add(ItemResourceConstants.JCR_DEFINITION);
+        nameSet.add(JcrRemotingConstants.JCR_DEFINITION_LN, ItemResourceConstants.NAMESPACE);
-            if (propertySet.contains(ItemResourceConstants.JCR_DEFINITION)) {
-                DavProperty<?> prop = propertySet.get(ItemResourceConstants.JCR_DEFINITION);
+            DavProperty<?> prop = propertySet.get(JcrRemotingConstants.JCR_DEFINITION_LN, ItemResourceConstants.NAMESPACE);
+            if (prop != null) {
-        nameSet.add(ItemResourceConstants.JCR_INDEX);
-        nameSet.add(ItemResourceConstants.JCR_PARENT);
-        nameSet.add(ItemResourceConstants.JCR_NAME);
-        nameSet.add(ItemResourceConstants.JCR_PRIMARYNODETYPE);
-        nameSet.add(ItemResourceConstants.JCR_MIXINNODETYPES);
-        nameSet.add(ItemResourceConstants.JCR_REFERENCES);
-        nameSet.add(ItemResourceConstants.JCR_UUID);
-        nameSet.add(ItemResourceConstants.JCR_PATH);
+        nameSet.add(JcrRemotingConstants.JCR_INDEX_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_PARENT_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_NAME_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_PRIMARYNODETYPE_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_MIXINNODETYPES_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_REFERENCES_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_UUID_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_PATH_LN, ItemResourceConstants.NAMESPACE);
-        if (propSet.contains(ItemResourceConstants.JCR_REFERENCES)) {
-            HrefProperty refProp = new HrefProperty(propSet.get(ItemResourceConstants.JCR_REFERENCES));
+        DavProperty p = propSet.get(JcrRemotingConstants.JCR_REFERENCES_LN, ItemResourceConstants.NAMESPACE);
+        if (p != null) {
+            HrefProperty refProp = new HrefProperty(p);
-        nameSet.add(ItemResourceConstants.JCR_NAME);
-        nameSet.add(ItemResourceConstants.JCR_INDEX);
-        nameSet.add(ItemResourceConstants.JCR_PARENT);
-        nameSet.add(ItemResourceConstants.JCR_UUID);
+        nameSet.add(JcrRemotingConstants.JCR_NAME_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_INDEX_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_PARENT_LN, ItemResourceConstants.NAMESPACE);
+        nameSet.add(JcrRemotingConstants.JCR_UUID_LN, ItemResourceConstants.NAMESPACE);
-            nameSet.add(ItemResourceConstants.JCR_WEAK_REFERENCES);
+            nameSet.add(JcrRemotingConstants.JCR_WEAK_REFERENCES_LN, ItemResourceConstants.NAMESPACE);
-            nameSet.add(ItemResourceConstants.JCR_REFERENCES);
+            nameSet.add(JcrRemotingConstants.JCR_REFERENCES_LN, ItemResourceConstants.NAMESPACE);
-                        p = props.get(ItemResourceConstants.JCR_WEAK_REFERENCES);
+                        p = props.get(JcrRemotingConstants.JCR_WEAK_REFERENCES_LN, ItemResourceConstants.NAMESPACE);
-                        p = props.get(ItemResourceConstants.JCR_REFERENCES);
+                        p = props.get(JcrRemotingConstants.JCR_REFERENCES_LN, ItemResourceConstants.NAMESPACE);
-            Element prop = DomUtil.getChildElement(doc, ItemResourceConstants.JCR_VALUES.getName(), ItemResourceConstants.JCR_VALUES.getNamespace());
+            Element prop = DomUtil.getChildElement(doc, JcrRemotingConstants.JCR_VALUES_LN, ItemResourceConstants.NAMESPACE);
-                ValuesProperty vp = new ValuesProperty(p, PropertyType.STRING, valueFactory);
-
-                Value[] jcrVs = vp.getJcrValues();
+                Value[] jcrVs = ValueUtil.valuesFromXml(p.getValue(), PropertyType.STRING, valueFactory);
-        } catch (DavException e) {
-            throw ExceptionConverter.generate(e);
-        nameSet.add(ItemResourceConstants.JCR_TYPE);
+        nameSet.add(JcrRemotingConstants.JCR_TYPE_LN, ItemResourceConstants.NAMESPACE);
-                DavProperty<?> type = props.get(ItemResourceConstants.JCR_TYPE);
+                DavProperty<?> type = props.get(JcrRemotingConstants.JCR_TYPE_LN, ItemResourceConstants.NAMESPACE);
-        method.addRequestHeader(ItemResourceConstants.IMPORT_UUID_BEHAVIOR, Integer.toString(uuidBehaviour));
+        method.addRequestHeader(JcrRemotingConstants.IMPORT_UUID_BEHAVIOR, Integer.toString(uuidBehaviour));
-        nameSet.add(ItemResourceConstants.JCR_PARENT);
+        nameSet.add(JcrRemotingConstants.JCR_PARENT_LN, ItemResourceConstants.NAMESPACE);
-            if (l.getType() == Type.WRITE && (sc == Scope.EXCLUSIVE || sc == ItemResourceConstants.EXCLUSIVE_SESSION)) {
+            if (l.getType() == Type.WRITE && (Scope.EXCLUSIVE.equals(sc) || sc == ItemResourceConstants.EXCLUSIVE_SESSION)) {
-                    DomUtil.addChildElement(uElem, ItemResourceConstants.XML_REMOVEEXISTING, ItemResourceConstants.NAMESPACE);
+                    DomUtil.addChildElement(uElem, JcrRemotingConstants.XML_REMOVEEXISTING, ItemResourceConstants.NAMESPACE);
-                    DomUtil.addChildElement(uElem, ItemResourceConstants.XML_RELPATH, ItemResourceConstants.NAMESPACE, getNamePathResolver(sessionInfo).getJCRPath(relPath));
+                    DomUtil.addChildElement(uElem, JcrRemotingConstants.XML_RELPATH, ItemResourceConstants.NAMESPACE, getNamePathResolver(sessionInfo).getJCRPath(relPath));
-                log.error("Ambigous event type definition: expected one single eventtype.");
+                log.error("Ambiguous event type definition: expected one single event type.");
-            int type;
+            int type = EventUtil.getJcrEventType(et[0].getName());
-                type = SubscriptionImpl.getJcrEventType(et[0]);
-            } catch (DavException e) {
-                // should not occur
-                log.error("Internal error while building Event", e.getMessage());
-                continue;
-        ReportInfo info = new ReportInfo(RegisteredNamespacesReport.REGISTERED_NAMESPACES_REPORT, DEPTH_0);
+        ReportInfo info = new ReportInfo(JcrRemotingConstants.REPORT_REGISTERED_NAMESPACES, ItemResourceConstants.NAMESPACE);
-                ElementIterator nsElems = DomUtil.getChildren(rootElement, ItemResourceConstants.XML_NAMESPACE, ItemResourceConstants.NAMESPACE);
+                ElementIterator nsElems = DomUtil.getChildren(rootElement, JcrRemotingConstants.XML_NAMESPACE, ItemResourceConstants.NAMESPACE);
-                    String prefix = DomUtil.getChildText(elem, ItemResourceConstants.XML_PREFIX, ItemResourceConstants.NAMESPACE);
-                    String uri = DomUtil.getChildText(elem, ItemResourceConstants.XML_URI, ItemResourceConstants.NAMESPACE);
+                    String prefix = DomUtil.getChildText(elem, JcrRemotingConstants.XML_PREFIX, ItemResourceConstants.NAMESPACE);
+                    String uri = DomUtil.getChildText(elem, JcrRemotingConstants.XML_URI, ItemResourceConstants.NAMESPACE);
-        setProperties.add(new NamespacesProperty(namespaces));
+        setProperties.add(createNamespaceProperty(namespaces));
-        ReportInfo info = new ReportInfo(NodeTypesReport.NODETYPES_REPORT, DEPTH_0);
-        info.setContentElement(DomUtil.createElement(domFactory, NodeTypeConstants.XML_REPORT_ALLNODETYPES, NodeTypeConstants.NAMESPACE));
+        ReportInfo info = new ReportInfo(JcrRemotingConstants.REPORT_NODETYPES, ItemResourceConstants.NAMESPACE);
+        info.setContentElement(DomUtil.createElement(domFactory, NodeTypeConstants.XML_REPORT_ALLNODETYPES, ItemResourceConstants.NAMESPACE));
+    private static DavProperty<List<XmlSerializable>> createValuesProperty(Value[] jcrValues) {
+        // convert the specified jcr values to a xml-serializable value
+        List<XmlSerializable> val = new ArrayList<XmlSerializable>();
+        for (final Value jcrValue : jcrValues) {
+            val.add(new XmlSerializable() {
+                public Element toXml(Document document) {
+                    try {
+                        return ValueUtil.valueToXml(jcrValue, document);
+                    } catch (RepositoryException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+            });
+        }
+        return new DefaultDavProperty<List<XmlSerializable>>(JcrRemotingConstants.JCR_VALUES_LN, val, ItemResourceConstants.NAMESPACE, false);
+    }
+
+    private static DavProperty<List<XmlSerializable>> createNamespaceProperty(final Map<String, String> namespaces) {
+        // convert the specified namespace to a xml-serializable value
+        List<XmlSerializable> val = new ArrayList<XmlSerializable>();
+        for (final String prefix : namespaces.keySet()) {
+            val.add(new XmlSerializable() {
+
+                public Element toXml(Document document) {
+                    Element nsElem = document.createElementNS(JcrRemotingConstants.NS_URI, JcrRemotingConstants.NS_PREFIX + ":" + JcrRemotingConstants.XML_NAMESPACE);
+                    Element prefixElem = document.createElementNS(JcrRemotingConstants.NS_URI, JcrRemotingConstants.NS_PREFIX + ":" + JcrRemotingConstants.XML_PREFIX);
+                    org.w3c.dom.Text txt = document.createTextNode(prefix);
+                    prefixElem.appendChild(txt);
+
+                    final String uri = namespaces.get(prefix);
+                    Element uriElem = document.createElementNS(JcrRemotingConstants.NS_URI, JcrRemotingConstants.NS_PREFIX + ":" + JcrRemotingConstants.XML_URI);
+                    org.w3c.dom.Text txt2 = document.createTextNode(uri);
+                    uriElem.appendChild(txt2);
+
+
+                    nsElem.appendChild(prefixElem);
+                    nsElem.appendChild(uriElem);
+
+                    return nsElem;
+                }
+            });
+        }
+        return new DefaultDavProperty<List<XmlSerializable>>(JcrRemotingConstants.JCR_NAMESPACES_LN, val, ItemResourceConstants.NAMESPACE, false);
+    }
+
+
+    private static DavProperty<List<XmlSerializable>> createNodeTypeProperty(String localName, String[] ntNames) {
+        // convert the specified node type names to a xml-serializable value
+        List<XmlSerializable> val = new ArrayList<XmlSerializable>();
+        for (final String ntName : ntNames) {
+            val.add(new XmlSerializable() {
+                public Element toXml(Document document) {
+                    return NodeTypeUtil.ntNameToXml(ntName, document);
+                }
+            });
+        }
+        return new DefaultDavProperty<List<XmlSerializable>>(localName, val, ItemResourceConstants.NAMESPACE, false);
+    }
+
-                ValuesProperty vp = new ValuesProperty(jcrValues);
+                DavProperty<List<XmlSerializable>> vp = createValuesProperty(jcrValues);
-                setProperties.add(new ValuesProperty(jcrValues));
+                setProperties.add(createValuesProperty(jcrValues));
-                    removeProperties.add(ItemResourceConstants.JCR_MIXINNODETYPES);
+                    removeProperties.add(JcrRemotingConstants.JCR_MIXINNODETYPES_LN, ItemResourceConstants.NAMESPACE);
-                    setProperties.add(new NodeTypeProperty(ItemResourceConstants.JCR_MIXINNODETYPES, ntNames, false));
+                    setProperties.add(createNodeTypeProperty(JcrRemotingConstants.JCR_MIXINNODETYPES_LN, ntNames));
-                setProperties.add(new NodeTypeProperty(ItemResourceConstants.JCR_PRIMARYNODETYPE, new String[] {resolver.getJCRName(primaryNodeTypeName)}, false));
+                setProperties.add(createNodeTypeProperty(JcrRemotingConstants.JCR_PRIMARYNODETYPE_LN, new String[] {resolver.getJCRName(primaryNodeTypeName)}));

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS60 INS60 INS25 INS60 INS43 INS74 INS5 INS42 INS60 INS70 INS41 INS43 INS74 INS83 INS74 INS42 INS60 INS70 INS41 INS43 INS74 INS43 INS42 INS5 INS42 INS60 INS70 INS41 INS74 INS59 INS27 INS74 INS59 INS27 MOV8 MOV8 INS43 INS59 INS27 MOV43 MOV43 INS42 INS43 INS43 INS43 INS85 INS74 INS59 INS44 INS42 INS8 INS14 INS42 INS43 INS43 INS43 INS43 INS43 INS74 INS59 INS44 INS32 INS8 INS14 INS42 INS43 INS43 INS42 INS43 INS85 INS74 INS59 INS44 INS42 INS8 INS14 UPD42 UPD42 INS40 INS40 INS43 INS76 INS42 INS32 INS42 INS33 INS43 INS76 INS42 INS32 INS42 INS33 INS60 INS40 UPD40 INS60 INS40 UPD40 INS40 UPD40 INS40 UPD40 UPD40 INS40 UPD40 INS40 INS40 UPD40 INS40 UPD40 INS40 UPD40 INS42 INS42 INS32 INS42 INS33 INS40 UPD40 INS40 UPD40 INS40 UPD40 INS40 UPD40 INS40 UPD40 UPD40 INS40 UPD40 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS83 INS43 INS42 INS21 INS74 INS40 INS42 INS40 INS9 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS83 INS43 INS42 INS42 INS42 INS21 INS74 INS40 INS42 INS40 INS9 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS83 INS43 INS42 INS21 INS74 INS42 INS42 INS40 INS9 INS42 INS42 INS42 INS40 INS40 MOV43 INS42 MOV42 UPD42 MOV42 INS40 UPD40 MOV40 INS40 UPD40 INS40 UPD40 MOV43 INS74 INS59 INS27 MOV43 MOV74 INS59 INS27 INS42 INS42 INS40 INS40 MOV43 MOV43 UPD40 INS40 INS42 INS42 MOV43 UPD40 INS40 UPD40 INS42 INS42 INS74 INS42 INS32 INS43 INS74 INS42 INS42 INS74 INS42 INS32 INS43 INS74 INS42 INS42 INS74 INS42 INS32 INS43 INS74 INS40 UPD40 INS43 INS76 INS42 INS32 INS42 INS33 INS42 INS32 INS42 INS33 UPD40 INS40 INS40 UPD40 INS32 INS43 INS43 INS42 INS42 INS14 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS14 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS14 INS42 INS43 INS43 INS74 INS32 MOV43 INS42 UPD42 MOV42 MOV43 UPD40 INS40 INS42 INS42 INS42 INS40 INS40 MOV43 UPD40 INS40 INS42 INS42 INS40 INS40 MOV43 INS42 UPD40 MOV40 UPD40 MOV40 MOV5 INS42 INS42 MOV32 MOV42 INS42 INS42 INS43 INS1 INS42 INS42 INS42 INS42 INS43 INS1 INS42 INS42 INS42 INS42 INS43 INS1 INS42 INS42 INS43 INS74 INS32 INS32 INS42 INS42 MOV32 UPD42 INS32 INS32 UPD45 UPD42 INS42 INS31 INS42 INS31 INS42 INS31 UPD42 MOV42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS40 MOV3 INS42 INS42 INS32 INS40 INS42 INS40 UPD40 INS40 INS42 INS42 UPD40 MOV43 MOV43 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 UPD40 INS40 INS32 UPD42 MOV42 INS42 INS42 UPD40 UPD40 INS42 INS43 INS42 INS54 INS42 INS43 INS42 INS60 INS60 INS60 INS21 INS60 INS60 INS60 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS41 INS42 INS40 INS42 UPD40 UPD40 UPD40 INS42 INS8 INS12 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS32 INS41 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 UPD40 UPD40 INS40 INS40 UPD40 INS32 INS43 INS42 INS53 INS42 INS42 INS40 INS27 INS42 INS42 INS40 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS45 INS40 INS40 INS45 INS40 INS40 INS45 INS40 INS43 INS42 INS42 UPD40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL32 DEL25 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL53 DEL8 DEL12 DEL42 DEL40 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL18 DEL8 DEL12 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL40 DEL42 DEL9 DEL14 DEL42 DEL42 DEL42 DEL43 DEL40 DEL9 DEL14