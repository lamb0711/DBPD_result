JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.nodetype.InvalidNodeTypeDefException;
+import org.apache.jackrabbit.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.name.NameConstants;
-    public QName[] getRegisteredNodeTypes() throws RepositoryException {
+    public Name[] getRegisteredNodeTypes() throws RepositoryException {
-        return (QName[]) qNames.toArray(new QName[registeredNTDefs.size()]);
+        return (Name[]) qNames.toArray(new Name[registeredNTDefs.size()]);
-     * @see NodeTypeRegistry#isRegistered(QName)
+     * @see NodeTypeRegistry#isRegistered(Name)
-    public boolean isRegistered(QName nodeTypeName) {
+    public boolean isRegistered(Name nodeTypeName) {
-        notifyRegistered(ntDef.getQName());
+        notifyRegistered(ntDef.getName());
-            QName ntName = ((QNodeTypeDefinition)iter.next()).getQName();
+            Name ntName = ((QNodeTypeDefinition)iter.next()).getName();
-     * @see NodeTypeRegistry#unregisterNodeType(QName)
+     * @see NodeTypeRegistry#unregisterNodeType(Name)
-    public void unregisterNodeType(QName nodeTypeName) throws NoSuchNodeTypeException, RepositoryException {
+    public void unregisterNodeType(Name nodeTypeName) throws NoSuchNodeTypeException, RepositoryException {
-            QName ntName = (QName) iter.next();
+            Name ntName = (Name) iter.next();
-        storage.unregisterNodeTypes((QName[]) nodeTypeNames.toArray(new QName[nodeTypeNames.size()]));
+        storage.unregisterNodeTypes((Name[]) nodeTypeNames.toArray(new Name[nodeTypeNames.size()]));
-            QName ntName = (QName) iter.next();
+            Name ntName = (Name) iter.next();
-        QName name = ntd.getQName();
+        Name name = ntd.getName();
-     * @see NodeTypeRegistry#getNodeTypeDefinition(QName)
+     * @see NodeTypeRegistry#getNodeTypeDefinition(Name)
-    public QNodeTypeDefinition getNodeTypeDefinition(QName nodeTypeName)
+    public QNodeTypeDefinition getNodeTypeDefinition(Name nodeTypeName)
-     * @see EffectiveNodeTypeProvider#getEffectiveNodeType(QName)
+     * @see EffectiveNodeTypeProvider#getEffectiveNodeType(Name)
-    public synchronized EffectiveNodeType getEffectiveNodeType(QName ntName)
+    public synchronized EffectiveNodeType getEffectiveNodeType(Name ntName)
-     * @see EffectiveNodeTypeProvider#getEffectiveNodeType(QName[])
+     * @see EffectiveNodeTypeProvider#getEffectiveNodeType(Name[])
-    public synchronized EffectiveNodeType getEffectiveNodeType(QName[] ntNames)
+    public synchronized EffectiveNodeType getEffectiveNodeType(Name[] ntNames)
-     * @see EffectiveNodeTypeProvider#getEffectiveNodeType(QName[], Map)
+     * @see EffectiveNodeTypeProvider#getEffectiveNodeType(Name[], Map)
-    public EffectiveNodeType getEffectiveNodeType(QName[] ntNames, Map ntdMap)
+    public EffectiveNodeType getEffectiveNodeType(Name[] ntNames, Map ntdMap)
-            QName[] allNtNames;
+            Name[] allNtNames;
-                QName primaryType = nodeState.getNodeTypeName();
-                allNtNames = new QName[] { primaryType }; // default
+                Name primaryType = nodeState.getNodeTypeName();
+                allNtNames = new Name[] { primaryType }; // default
-                    PropertyEntry pe = nodeState.getNodeEntry().getPropertyEntry(QName.JCR_MIXINTYPES, true);
+                    PropertyEntry pe = nodeState.getNodeEntry().getPropertyEntry(NameConstants.JCR_MIXINTYPES, true);
-                        allNtNames = new QName[values.length + 1];
+                        allNtNames = new Name[values.length + 1];
-                            allNtNames[i] = values[i].getQName();
+                            allNtNames[i] = values[i].getName();
-    private EffectiveNodeType getEffectiveNodeType(QName ntName,
+    private EffectiveNodeType getEffectiveNodeType(Name ntName,
-        EffectiveNodeTypeCache.Key key = entCache.getKey(new QName[]{ntName});
+        EffectiveNodeTypeCache.Key key = entCache.getKey(new Name[]{ntName});
-    private EffectiveNodeType getEffectiveNodeType(QName[] ntNames,
+    private EffectiveNodeType getEffectiveNodeType(Name[] ntNames,
-                    QName[] remainder = key.getNames();
+                    Name[] remainder = key.getNames();
-    private void notifyRegistered(QName ntName) {
+    private void notifyRegistered(Name ntName) {
-    private void notifyReRegistered(QName ntName) {
+    private void notifyReRegistered(Name ntName) {
-    private void notifyUnregistered(QName ntName) {
+    private void notifyUnregistered(Name ntName) {
-        registeredNTDefs.put(ntd.getQName(), ntd);
+        registeredNTDefs.put(ntd.getName(), ntd);
-    private void internalUnregister(QName name) {
+    private void internalUnregister(Name name) {
-            QName name = (QName) iter.next();
+            Name name = (Name) iter.next();
-         * @return a set of node type <code>QName</code>s
+         * @return a set of node type <code>Name</code>s
-        private Set getDependentNodeTypes(QName nodeTypeName) throws NoSuchNodeTypeException {
+        private Set getDependentNodeTypes(Name nodeTypeName) throws NoSuchNodeTypeException {
-                    names.add(ntd.getQName());
+                    names.add(ntd.getName());
-            if (!(key instanceof QName)) {
+            if (!(key instanceof Name)) {
-            return get(((QNodeTypeDefinition)value).getQName()) != null;
+            return get(((QNodeTypeDefinition)value).getName()) != null;
-            if (!(key instanceof QName)) {
+            if (!(key instanceof Name)) {
-                    Iterator it = storage.getDefinitions(new QName[] {(QName) key});
+                    Iterator it = storage.getDefinitions(new Name[] {(Name) key});
-                ps.println(ntd.getQName());
-                QName[] supertypes = ntd.getSupertypes();
+                ps.println(ntd.getName());
+                Name[] supertypes = ntd.getSupertypes();
-                    ps.println("\t\tName\t\t" + (pd[i].definesResidual() ? "*" : pd[i].getQName().toString()));
+                    ps.println("\t\tName\t\t" + (pd[i].definesResidual() ? "*" : pd[i].getName().toString()));
-                    ps.println("\t\tName\t\t" + (nd[i].definesResidual() ? "*" : nd[i].getQName().toString()));
-                    QName[] reqPrimaryTypes = nd[i].getRequiredPrimaryTypes();
+                    ps.println("\t\tName\t\t" + (nd[i].definesResidual() ? "*" : nd[i].getName().toString()));
+                    Name[] reqPrimaryTypes = nd[i].getRequiredPrimaryTypes();
-                    QName defPrimaryType = nd[i].getDefaultPrimaryType();
+                    Name defPrimaryType = nd[i].getDefaultPrimaryType();

INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD5 UPD43 UPD43 UPD43 UPD43 UPD43 UPD5 UPD5 UPD43 UPD5 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD43 UPD5 UPD42 UPD42 UPD42 UPD42 UPD66 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD5 UPD43 UPD42 UPD43 UPD43 UPD5 UPD5 UPD5 UPD42 UPD43 UPD42 UPD5 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD5 UPD42 UPD5 UPD43 UPD42 UPD43 UPD42 UPD5 UPD43 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD5 UPD43 UPD42 UPD5 UPD5 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD40 UPD42 UPD5 UPD43 UPD5 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42