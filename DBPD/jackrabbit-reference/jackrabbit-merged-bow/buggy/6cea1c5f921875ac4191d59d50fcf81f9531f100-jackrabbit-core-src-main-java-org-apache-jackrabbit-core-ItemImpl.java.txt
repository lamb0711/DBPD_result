JCR-1104 - JSR 283 support
- shareble nodes (work in progress)
- prepare for returning stable paths on shareable nodes or their descendants

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@647767 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.map.ReferenceMap;
-import java.util.Collections;
-import java.util.Map;
-    protected int status;
+    //protected int status;
-     * <code>ItemState</code> associated with this <code>Item</code>
+     * Item data associated with this item.
-    protected ItemState state;
+    protected final ItemData data;
-     * Listeners (weak references)
-     */
-    protected final Map listeners =
-            Collections.synchronizedMap(new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK));
-
-    /**
-    ItemImpl(ItemManager itemMgr, SessionImpl session, ItemId id, ItemState state,
-             ItemLifeCycleListener[] listeners) {
+    ItemImpl(ItemManager itemMgr, SessionImpl session, ItemData data) {
-        this.id = id;
+        this.id = data.getId();
-        this.state = state;
-        status = STATUS_NORMAL;
-
-        if (listeners != null) {
-            for (int i = 0; i < listeners.length; i++) {
-                addLifeCycleListener(listeners[i]);
-            }
-        }
+        this.data = data;
+        data.setStatus(STATUS_NORMAL);
+        final int status = data.getStatus();
-        return state.isTransient();
+        return getItemState().isTransient();
+        final int status = data.getStatus();
-            status = STATUS_INVALIDATED;
-            // notify the listeners that this instance has been
+            data.setStatus(STATUS_INVALIDATED);
+            // notify the manager that this instance has been
-            notifyInvalidated();
+            itemMgr.itemInvalidated(id, data);
-        return state;
-    }
-
-    /**
-     * Notify the listeners that this instance has been created.
-     */
-    protected void notifyCreated() {
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemLifeCycleListener[] la =
-                (ItemLifeCycleListener[]) listeners.values().toArray(
-                        new ItemLifeCycleListener[listeners.size()]);
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].itemCreated(this);
-            }
-        }
-    }
-
-    /**
-     * Notify the listeners that this instance has been invalidated
-     * (i.e. it has been temporarily rendered 'invalid').
-     */
-    protected void notifyInvalidated() {
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemLifeCycleListener[] la =
-                (ItemLifeCycleListener[]) listeners.values().toArray(
-                        new ItemLifeCycleListener[listeners.size()]);
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].itemInvalidated(id, this);
-            }
-        }
-    }
-
-    /**
-     * Notify the listeners that this instance has been destroyed
-     * (i.e. it has been permanently rendered 'invalid').
-     */
-    protected void notifyDestroyed() {
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemLifeCycleListener[] la =
-                (ItemLifeCycleListener[]) listeners.values().toArray(
-                        new ItemLifeCycleListener[listeners.size()]);
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].itemDestroyed(id, this);
-            }
-        }
-    }
-
-    /**
-     * Add an <code>ItemLifeCycleListener</code>
-     *
-     * @param listener the new listener to be informed on life cycle changes
-     */
-    void addLifeCycleListener(ItemLifeCycleListener listener) {
-        if (!listeners.containsKey(listener)) {
-            listeners.put(listener, listener);
-        }
-    }
-
-    /**
-     * Remove an <code>ItemLifeCycleListener</code>
-     *
-     * @param listener an existing listener
-     */
-    void removeLifeCycleListener(ItemLifeCycleListener listener) {
-        listeners.remove(listener);
+        return data.getState();
+            final ItemState state = getItemState();
-            ItemState itemState = (ItemState) iter.next();
-            ItemImpl item = itemMgr.getItem(itemState);
+            ItemState state = (ItemState) iter.next();
+            ItemImpl item = itemMgr.getItem(state.getId(),
+                    state.getStatus() == ItemState.STATUS_NEW);
-
-                    if (itemState.isNode()) {
-                        item = itemMgr.createNodeInstance((NodeState) itemState);
-                    } else {
-                        item = itemMgr.createPropertyInstance((PropertyState) itemState);
-                    }
+                    item = itemMgr.createItemInstance(itemState);
-                        if (itemState.isNode()) {
-                            item = itemMgr.createNodeInstance((NodeState) itemState);
-                        } else {
-                            item = itemMgr.createPropertyInstance((PropertyState) itemState);
-                        }
+                        item = itemMgr.createItemInstance(itemState);
-    //----------------------------------------------------< ItemStateListener >
-    /**
-     * {@inheritDoc}
-     */
-    public void stateCreated(ItemState created) {
-        status = STATUS_NORMAL;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDestroyed(ItemState destroyed) {
-        if (state == destroyed) {
-            // set state of this instance to 'destroyed'
-            status = STATUS_DESTROYED;
-            // dispose state
-            if (state == destroyed) {
-                state = null;
-            }
-            /**
-             * notify the listeners that this instance has been
-             * permanently invalidated
-             */
-            notifyDestroyed();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateModified(ItemState modified) {
-        if (state == modified) {
-            status = STATUS_MODIFIED;
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDiscarded(ItemState discarded) {
-        if (state == discarded) {
-            /**
-             * the state of this item has been discarded, probably as a result
-             * of calling Item.refresh(false) or ItemImpl.setRemoved()
-             */
-            if (isTransient()) {
-                switch (state.getStatus()) {
-                    /**
-                     * persistent item that has been transiently removed
-                     */
-                    case ItemState.STATUS_EXISTING_REMOVED:
-                        /**
-                         * persistent item that has been transiently modified
-                         */
-                    case ItemState.STATUS_EXISTING_MODIFIED:
-                        /**
-                         * persistent item that has been transiently modified or removed
-                         * and the underlying persistent state has been externally
-                         * modified since the transient modification/removal.
-                         */
-                    case ItemState.STATUS_STALE_MODIFIED:
-                        ItemState persistentState = state.getOverlayedState();
-                        /**
-                         * the state is a transient wrapper for the underlying
-                         * persistent state, therefore restore the
-                         * persistent state and resurrect this item instance
-                         * if necessary
-                         */
-                        stateMgr.disconnectTransientItemState(state);
-                        state = persistentState;
-
-                        return;
-
-                        /**
-                         * persistent item that has been transiently modified or removed
-                         * and the underlying persistent state has been externally
-                         * destroyed since the transient modification/removal.
-                         */
-                    case ItemState.STATUS_STALE_DESTROYED:
-                        /**
-                         * first notify the listeners that this instance has been
-                         * permanently invalidated
-                         */
-                        notifyDestroyed();
-                        // now set state of this instance to 'destroyed'
-                        status = STATUS_DESTROYED;
-                        state = null;
-                        return;
-
-                        /**
-                         * new item that has been transiently added
-                         */
-                    case ItemState.STATUS_NEW:
-                        /**
-                         * first notify the listeners that this instance has been
-                         * permanently invalidated
-                         */
-                        notifyDestroyed();
-                        // now set state of this instance to 'destroyed'
-                        status = STATUS_DESTROYED;
-                        // finally dispose state
-                        state = null;
-                        return;
-                }
-            }
-
-            /**
-             * first notify the listeners that this instance has been
-             * invalidated
-             */
-            notifyInvalidated();
-            // now render this instance 'invalid'
-            status = STATUS_INVALIDATED;
-        }
-    }
-
+
+        final ItemState state = getItemState();
+        final ItemState state = getItemState();
+        final ItemState state = getItemState();
-            transientState = state;
+            transientState = getItemState();
+        final ItemState state = getItemState();

MOV23 UPD43 UPD42 UPD42 UPD43 UPD42 MOV21 INS60 INS60 INS60 INS60 INS60 INS60 UPD66 UPD42 INS83 INS39 INS59 INS83 INS39 INS59 INS32 INS83 MOV43 INS59 INS83 MOV43 INS59 INS83 MOV43 INS59 INS83 MOV43 INS59 INS32 UPD42 UPD42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS60 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS83 MOV43 INS59 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 UPD42 INS32 INS42 MOV43 INS32 INS27 MOV8 INS42 UPD42 MOV42 INS42 MOV32 INS40 MOV21 INS8 UPD42 INS42 MOV21 MOV21 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL43 DEL40 DEL40 DEL14 DEL32 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL7 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL42 DEL42 DEL2 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL42 DEL42 DEL2 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL42 DEL42 DEL2 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL32 DEL8 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL42 DEL27 DEL42 DEL32 DEL40 DEL49 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL41 DEL40 DEL49 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL41 DEL40 DEL49 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL41 DEL50 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42