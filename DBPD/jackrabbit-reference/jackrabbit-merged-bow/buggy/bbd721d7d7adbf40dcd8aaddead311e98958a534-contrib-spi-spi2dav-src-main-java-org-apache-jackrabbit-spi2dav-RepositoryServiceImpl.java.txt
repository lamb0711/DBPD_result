JCR-999  SPI: provide batch read functionality
JCR-1000 JCR2SPI: remove duplicate item states

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552873 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NodeInfo;
+import org.apache.jackrabbit.spi.NodeInfo;
+     * @see RepositoryService#getItemInfos(SessionInfo, NodeId)
+     */
+    public Iterator getItemInfos(SessionInfo sessionInfo, NodeId nodeId) throws ItemNotFoundException, RepositoryException {
+        // set of properties to be retrieved
+        DavPropertyNameSet nameSet = new DavPropertyNameSet();
+        nameSet.add(ItemResourceConstants.JCR_NAME);
+        nameSet.add(ItemResourceConstants.JCR_INDEX);
+        nameSet.add(ItemResourceConstants.JCR_PARENT);
+        nameSet.add(ItemResourceConstants.JCR_PRIMARYNODETYPE);
+        nameSet.add(ItemResourceConstants.JCR_MIXINNODETYPES);
+        nameSet.add(ItemResourceConstants.JCR_REFERENCES);
+        nameSet.add(ItemResourceConstants.JCR_UUID);
+        nameSet.add(ItemResourceConstants.JCR_PATH);
+        nameSet.add(DavPropertyName.RESOURCETYPE);
+
+        DavMethodBase method = null;
+        try {
+            String uri = getItemUri(nodeId, sessionInfo);
+            method = new PropFindMethod(uri, nameSet, DEPTH_1);
+            getClient(sessionInfo).executeMethod(method);
+            method.checkSuccess();
+
+            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            if (responses.length < 1) {
+                throw new ItemNotFoundException("Unable to retrieve the node with id " + nodeId);
+            }
+
+            MultiStatusResponse nodeResponse = null;
+            List childResponses = new ArrayList();
+            for (int i = 0; i < responses.length; i++) {
+                if (isSameResource(uri, responses[i])) {
+                    nodeResponse = responses[i];
+                } else {
+                    childResponses.add(responses[i]);
+                }
+            }
+
+            if (nodeResponse == null) {
+                throw new ItemNotFoundException("Unable to retrieve the node " + nodeId);
+            }
+
+            DavPropertySet propSet = nodeResponse.getProperties(DavServletResponse.SC_OK);
+            Object type = propSet.get(DavPropertyName.RESOURCETYPE).getValue();
+            if (type == null) {
+                // the given id points to a Property instead of a Node
+                throw new ItemNotFoundException("No node for id " + nodeId);
+            }
+
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+
+            NodeId parentId = getParentId(propSet, sessionInfo);
+            NodeId id = uriResolver.buildNodeId(parentId, nodeResponse, sessionInfo.getWorkspaceName());
+            NodeInfoImpl nInfo = new NodeInfoImpl(id, parentId, propSet, resolver);
+            if (propSet.contains(ItemResourceConstants.JCR_REFERENCES)) {
+                HrefProperty refProp = new HrefProperty(propSet.get(ItemResourceConstants.JCR_REFERENCES));
+                Iterator hrefIter = refProp.getHrefs().iterator();
+                while(hrefIter.hasNext()) {
+                    String propertyHref = hrefIter.next().toString();
+                    PropertyId propertyId = uriResolver.getPropertyId(propertyHref, sessionInfo);
+                    nInfo.addReference(propertyId);
+                }
+            }
+
+            List infos = new ArrayList(responses.length);
+            infos.add(nInfo);
+
+            for (Iterator it = childResponses.iterator(); it.hasNext();) {
+                MultiStatusResponse resp = (MultiStatusResponse) it.next();
+                DavPropertySet childProps = resp.getProperties(DavServletResponse.SC_OK);
+                if (childProps.contains(DavPropertyName.RESOURCETYPE) &&
+                    childProps.get(DavPropertyName.RESOURCETYPE).getValue() != null) {
+                    // any other resource type than default (empty) is represented by a node item
+                    parentId = getParentId(childProps, sessionInfo);
+                    id = uriResolver.buildNodeId(parentId, resp, sessionInfo.getWorkspaceName());
+                    nInfo = new NodeInfoImpl(id, parentId, childProps, resolver);
+                    if (childProps.contains(ItemResourceConstants.JCR_REFERENCES)) {
+                        HrefProperty refProp = new HrefProperty(childProps.get(ItemResourceConstants.JCR_REFERENCES));
+                        Iterator hrefIter = refProp.getHrefs().iterator();
+                        while(hrefIter.hasNext()) {
+                            String propertyHref = hrefIter.next().toString();
+                            PropertyId propertyId = uriResolver.getPropertyId(propertyHref, sessionInfo);
+                            nInfo.addReference(propertyId);
+                        }
+                    }
+                    infos.add(nInfo);
+                } else {
+                    PropertyId childId = uriResolver.buildPropertyId(nInfo.getId(), resp, sessionInfo.getWorkspaceName());
+                    nInfo.addPropertyId(childId);
+                    // TODO: due to missing 'value/values' property PropertyInfo cannot be built
+                }
+            }
+            return infos.iterator();
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } catch (MalformedPathException e) {
+            throw new RepositoryException(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
+    }
+
+    /**

MOV26 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS54 INS68 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS8 INS12 INS12 INS12 INS8 INS42 INS42 INS69 INS69 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS33 INS60 INS21 INS21 INS21 INS60 INS25 INS60 INS60 INS24 INS25 INS60 INS60 INS25 INS60 INS60 INS60 INS60 INS25 INS60 INS21 INS24 INS41 INS44 INS8 INS44 INS8 INS44 INS8 INS25 INS43 INS43 INS43 INS43 INS59 INS7 INS32 INS32 INS5 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS58 INS32 INS8 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS40 INS34 INS53 INS42 INS42 INS33 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS40 INS60 INS60 INS61 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS14 INS42 INS33 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS43 INS42 INS34 INS32 INS8 INS8 INS14 INS42 INS42 INS40 INS32 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS40 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS2 INS21 INS21 INS43 INS27 INS42 INS42 INS40 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS27 INS21 INS21 INS21 INS25 INS21 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS7 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS43 INS32 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS33 INS7 INS7 INS7 INS32 INS8 INS32 INS43 INS59 INS32 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS40 INS60 INS60 INS61 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42