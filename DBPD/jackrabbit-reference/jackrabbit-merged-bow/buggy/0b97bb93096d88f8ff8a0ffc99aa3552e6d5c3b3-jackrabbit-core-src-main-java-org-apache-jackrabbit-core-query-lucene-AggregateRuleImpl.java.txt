JCR-2087: Upgrade to Java 5 as the base platform

Some more Java 5 cleanups.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@794743 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-            List nodeStates = new ArrayList();
+            List<NodeState> nodeStates = new ArrayList<NodeState>();
-                return (NodeState[]) nodeStates.toArray(new NodeState[nodeStates.size()]);
+                return nodeStates.toArray(new NodeState[nodeStates.size()]);
-            List propStates = new ArrayList();
+            List<PropertyState> propStates = new ArrayList<PropertyState>();
-                return (PropertyState[]) propStates.toArray(
-                        new PropertyState[propStates.size()]);
+                return propStates.toArray(new PropertyState[propStates.size()]);
-        List includes = new ArrayList();
+        List<NodeInclude> includes = new ArrayList<NodeInclude>();
-                String[] elements = Text.explode(getTextContent(n), '/');
-                for (int j = 0; j < elements.length; j++) {
-                    if (elements[j].equals("*")) {
+                for (String element : Text.explode(getTextContent(n), '/')) {
+                    if (element.equals("*")) {
-                        builder.addLast(resolver.getQName(elements[j]));
+                        builder.addLast(resolver.getQName(element));
-        return (NodeInclude[]) includes.toArray(new NodeInclude[includes.size()]);
+        return includes.toArray(new NodeInclude[includes.size()]);
-        List includes = new ArrayList();
+        List<PropertyInclude> includes = new ArrayList<PropertyInclude>();
-                String[] elements = Text.explode(getTextContent(n), '/');
-                for (int j = 0; j < elements.length; j++) {
-                    if (elements[j].equals("*")) {
+                for (String element : Text.explode(getTextContent(n), '/')) {
+                    if (element.equals("*")) {
-                    builder.addLast(resolver.getQName(elements[j]));
+                    builder.addLast(resolver.getQName(element));
-        return (PropertyInclude[]) includes.toArray(new PropertyInclude[includes.size()]);
+        return includes.toArray(new PropertyInclude[includes.size()]);
-        protected void resolve(NodeState nodeState, List collector, int offset)
+        protected void resolve(NodeState nodeState, List<NodeState> collector, int offset)
-            List cne;
+            List<ChildNodeEntry> cne;
-                Iterator it = cne.iterator();
-                while (it.hasNext()) {
-                    NodeId id = ((ChildNodeEntry) it.next()).getId();
-                    NodeState ns = (NodeState) ism.getItemState(id);
+                for (ChildNodeEntry entry : cne) {
+                    NodeState ns = (NodeState) ism.getItemState(entry.getId());
-                Iterator it = cne.iterator();
-                while (it.hasNext()) {
-                    NodeId id = ((ChildNodeEntry) it.next()).getId();
+                for (ChildNodeEntry entry : cne) {
+                    NodeId id = entry.getId();
-            List nodeStates = new ArrayList();
+            List<NodeState> nodeStates = new ArrayList<NodeState>();
-            return (NodeState[]) nodeStates.toArray(new NodeState[nodeStates.size()]);
+            return nodeStates.toArray(new NodeState[nodeStates.size()]);
-            List nodeStates = new ArrayList();
+            List<NodeState> nodeStates = new ArrayList<NodeState>();
-            List propStates = new ArrayList();
-            for (Iterator it = nodeStates.iterator(); it.hasNext(); ) {
-                NodeState state = (NodeState) it.next();
+            List<PropertyState> propStates = new ArrayList<PropertyState>();
+            for (NodeState state : nodeStates) {
-                    propStates.add(ism.getItemState(propId));
+                    propStates.add((PropertyState) ism.getItemState(propId));
-            return (PropertyState[]) propStates.toArray(
-                    new PropertyState[propStates.size()]);
+            return propStates.toArray(new PropertyState[propStates.size()]);

MOV60 INS74 MOV32 INS74 MOV32 INS74 INS60 MOV60 INS70 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS74 INS74 INS59 MOV32 INS74 INS74 INS44 INS42 MOV8 MOV32 INS74 INS74 INS42 INS74 INS42 INS74 INS42 MOV43 INS43 INS70 INS70 MOV43 INS43 INS42 INS14 MOV43 INS43 MOV43 INS43 UPD42 MOV43 INS42 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS70 MOV43 INS43 INS70 INS42 INS44 INS42 MOV8 INS44 INS42 MOV8 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS74 MOV32 INS42 INS74 MOV32 INS42 INS44 MOV32 INS8 INS42 INS44 MOV32 MOV8 MOV43 INS42 MOV43 INS42 MOV43 INS43 MOV43 MOV43 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS42 MOV25 MOV43 INS42 MOV43 MOV43 INS42 INS42 INS42 INS42 INS11 INS42 INS42 MOV43 INS42 INS43 MOV32 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 DEL40 DEL26 DEL42 DEL43 DEL85 DEL5 DEL11 DEL42 DEL43 DEL85 DEL5 DEL11 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL11 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43 DEL85 DEL5 DEL11 DEL42 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL85 DEL5 DEL11 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL85 DEL5 DEL11