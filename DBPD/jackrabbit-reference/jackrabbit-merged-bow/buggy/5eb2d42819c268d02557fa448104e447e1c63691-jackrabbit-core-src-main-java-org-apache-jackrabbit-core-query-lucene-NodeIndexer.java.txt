JSR 283: Shareable nodes support in query

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@763188 13f79535-47bb-0310-9956-ffa450edef68

-                Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));
+                Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));
-                doc.add(new Field(FieldNames.PARENT, "", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));
+                doc.add(new Field(FieldNames.PARENT, "", Field.Store.YES,
+                        Field.Index.NOT_ANALYZED_NO_NORMS));
+            } else if (node.getSharedSet().isEmpty()) {
+                addParentChildRelation(doc, node.getParentId());
-                doc.add(new Field(
-                        FieldNames.PARENT, node.getParentId().toString(),
-                        Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));
-                NodeState parent = (NodeState) stateProvider.getItemState(node.getParentId());
-                ChildNodeEntry child = parent.getChildNodeEntry(node.getNodeId());
-                if (child == null) {
-                    // this can only happen when jackrabbit
-                    // is running in a cluster.
-                    throw new RepositoryException(
-                            "Missing child node entry for node with id: "
-                            + node.getNodeId());
+                // shareable node
+                for (Iterator it = node.getSharedSet().iterator(); it.hasNext(); ) {
+                    addParentChildRelation(doc, (NodeId) it.next());
-                Name name = child.getName();
-                addNodeName(doc, name.getNamespaceURI(), name.getLocalName());
+                // mark shareable nodes
+                doc.add(new Field(FieldNames.SHAREABLE_NODE, "",
+                        Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
+
+    /**
+     * Adds a parent child relation to the given <code>doc</code>.
+     *
+     * @param doc      the document.
+     * @param parentId the id of the parent node.
+     * @throws ItemStateException  if the parent node cannot be read.
+     * @throws RepositoryException if the parent node does not have a child node
+     *                             entry for the current node.
+     */
+    protected void addParentChildRelation(Document doc,
+                                          NodeId parentId)
+            throws ItemStateException, RepositoryException {
+        doc.add(new Field(
+                FieldNames.PARENT, parentId.toString(),
+                Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));
+        NodeState parent = (NodeState) stateProvider.getItemState(parentId);
+        ChildNodeEntry child = parent.getChildNodeEntry(node.getNodeId());
+        if (child == null) {
+            // this can only happen when jackrabbit
+            // is running in a cluster.
+            throw new RepositoryException(
+                    "Missing child node entry for node with id: "
+                    + node.getNodeId());
+        }
+        Name name = child.getName();
+        addNodeName(doc, name.getNamespaceURI(), name.getLocalName());
+    }

INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 MOV8 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 MOV43 INS25 INS43 MOV43 INS32 INS32 INS8 INS8 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS21 INS24 INS21 INS42 INS42 MOV32 INS58 INS32 INS8 INS32 UPD42 UPD42 INS43 INS59 INS42 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS32 MOV43 INS40 INS45 INS40 INS40 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL40 DEL40 DEL42 DEL32