porting to v0.16.4 of the jsr170 specification

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161260 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.ChildNodeDef;
+import org.apache.jackrabbit.core.nodetype.NodeDef;
-import org.apache.jackrabbit.core.nodetype.NodeDefImpl;
+import org.apache.jackrabbit.core.nodetype.NodeDefinitionImpl;
-import org.apache.jackrabbit.core.nodetype.PropertyDefImpl;
+import org.apache.jackrabbit.core.nodetype.PropertyDefinitionImpl;
-import javax.jcr.nodetype.NodeDef;
+import javax.jcr.nodetype.NodeDefinition;
-import javax.jcr.nodetype.PropertyDef;
+import javax.jcr.nodetype.PropertyDefinition;
-    protected NodeDef definition;
+    protected NodeDefinition definition;
-                       NodeState state, NodeDef definition,
+                       NodeState state, NodeDefinition definition,
-                                                                   PropertyDefImpl def)
+                                                                   PropertyDefinitionImpl def)
-     *
-     * @throws RepositoryException if another error occurs
-     */ 
+     * @throws RepositoryException          if another error occurs
+     */
-     *
-     * @throws RepositoryException if another error occurs
+     * @throws RepositoryException          if another error occurs
-        PropertyDefImpl def = getApplicablePropertyDef(name, type, multiValued);
+        PropertyDefinitionImpl def = getApplicablePropertyDefinition(name, type, multiValued);
-                                                            PropertyDefImpl def)
+                                                            PropertyDefinitionImpl def)
-    protected synchronized NodeImpl createChildNode(QName name, NodeDefImpl def,
+    protected synchronized NodeImpl createChildNode(QName name, NodeDefinitionImpl def,
-        PropertyDef[] pda = nodeType.getAutoCreatePropertyDefs();
+        PropertyDefinition[] pda = nodeType.getAutoCreatedPropertyDefinitions();
-            PropertyDefImpl pd = (PropertyDefImpl) pda[i];
+            PropertyDefinitionImpl pd = (PropertyDefinitionImpl) pda[i];
-        NodeDef[] nda = nodeType.getAutoCreateNodeDefs();
+        NodeDefinition[] nda = nodeType.getAutoCreatedNodeDefinitions();
-            NodeDefImpl nd = (NodeDefImpl) nda[i];
+            NodeDefinitionImpl nd = (NodeDefinitionImpl) nda[i];
-        NodeDefImpl newDef = session.getNodeTypeManager().getNodeDef(defId);
+        NodeDefinitionImpl newDef = session.getNodeTypeManager().getNodeDefinition(defId);
-        NodeDefImpl def;
+        NodeDefinitionImpl def;
-            def = getApplicableChildNodeDef(nodeName, nodeType == null ? null : nodeType.getQName());
+            def = getApplicableChildNodeDefinition(nodeName, nodeType == null ? null : nodeType.getQName());
-/*
-        try {
-            Item item = itemMgr.getItem(nodePath);
-            if (!item.isNode()) {
-                // there's already a property with that name
-                throw new ItemExistsException(itemMgr.safeGetJCRPath(nodePath));
-            } else {
-                // there's already a node with that name
-                // check same-name sibling setting of both new and existing node
-                if (!def.allowSameNameSibs()
-                        || !((NodeImpl) item).getDefinition().allowSameNameSibs()) {
-                    throw new ItemExistsException(itemMgr.safeGetJCRPath(nodePath));
-                }
-            }
-        } catch (PathNotFoundException pnfe) {
-            // no name collision
-        }
-*/
-            if (!def.allowSameNameSibs()) {
+            if (!def.allowsSameNameSiblings()) {
-            if (!((NodeImpl) itemMgr.getItem(newId)).getDefinition().allowSameNameSibs()) {
+            if (!((NodeImpl) itemMgr.getItem(newId)).getDefinition().allowsSameNameSiblings()) {
-            PropertyDefImpl def = getApplicablePropertyDef(JCR_MIXINTYPES, PropertyType.NAME, true);
+            PropertyDefinitionImpl def = getApplicablePropertyDefinition(JCR_MIXINTYPES, PropertyType.NAME, true);
-     * @throws RepositoryException if another error occurs
+     * @throws RepositoryException          if another error occurs
-    protected NodeDefImpl getApplicableChildNodeDef(QName nodeName, QName nodeTypeName)
+    protected NodeDefinitionImpl getApplicableChildNodeDefinition(QName nodeName,
+                                                                  QName nodeTypeName)
-        ChildNodeDef cnd = getEffectiveNodeType().getApplicableChildNodeDef(nodeName, nodeTypeName);
-        return session.getNodeTypeManager().getNodeDef(new NodeDefId(cnd));
+        NodeDef cnd = getEffectiveNodeType().getApplicableChildNodeDef(nodeName, nodeTypeName);
+        return session.getNodeTypeManager().getNodeDefinition(new NodeDefId(cnd));
-     * @throws RepositoryException if another error occurs
+     * @throws RepositoryException          if another error occurs
-    protected PropertyDefImpl getApplicablePropertyDef(QName propertyName,
-                                                       int type,
-                                                       boolean multiValued)
+    protected PropertyDefinitionImpl getApplicablePropertyDefinition(QName propertyName,
+                                                                     int type,
+                                                                     boolean multiValued)
-        return session.getNodeTypeManager().getPropDef(new PropDefId(pd));
+        return session.getNodeTypeManager().getPropertyDefinition(new PropDefId(pd));
-            PropertyDef[] pda = mixin.getAutoCreatePropertyDefs();
+            PropertyDefinition[] pda = mixin.getAutoCreatedPropertyDefinitions();
-                PropertyDefImpl pd = (PropertyDefImpl) pda[i];
+                PropertyDefinitionImpl pd = (PropertyDefinitionImpl) pda[i];
-            NodeDef[] nda = mixin.getAutoCreateNodeDefs();
+            NodeDefinition[] nda = mixin.getAutoCreatedNodeDefinitions();
-                NodeDefImpl nd = (NodeDefImpl) nda[i];
+                NodeDefinitionImpl nd = (NodeDefinitionImpl) nda[i];
-        if (mixin.getChildNodeDefs().length == 0
-                && mixin.getPropertyDefs().length == 0) {
+        if (mixin.getChildNodeDefinitions().length == 0
+                && mixin.getPropertyDefinitions().length == 0) {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
+        /**
+         * if the target property is not of type STRING then a
+         * best-effort conversion is tried
+         */
+        return setProperty(name, value, PropertyType.UNDEFINED);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, String value, int type)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.UNDEFINED, false, status);
+        PropertyImpl prop = getOrCreateProperty(name, type, false, status);
-    public Property setProperty(String name, Value value)
+    public Property setProperty(String name, Value value, int type)
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-        int type = (value == null) ? PropertyType.UNDEFINED : value.getType();
-
+    public Property setProperty(String name, Value value)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
+        int type = (value == null) ? PropertyType.UNDEFINED : value.getType();
+        return setProperty(name, value, type);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-            RepositoryException {
+            ConstraintViolationException, RepositoryException {
-/*
-        Path nodePath;
-        try {
-            nodePath = Path.create(getPrimaryPath(), relPath, session.getNamespaceResolver(), true);
-        } catch (MalformedPathException e) {
-            String msg = "failed to resolve path " + relPath + " relative to " + safeGetJCRPath();
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
-        }
-
-        try {
-            Item item = itemMgr.getItem(nodePath);
-            if (item.isNode()) {
-                return (Node) item;
-            } else {
-                // there's a property with that name, no child node though
-                throw new PathNotFoundException(relPath);
-            }
-        } catch (AccessDeniedException ade) {
-            throw new PathNotFoundException(relPath);
-        }
-*/
-/*
-        Path propPath;
-        try {
-            propPath = Path.create(getPrimaryPath(), relPath, session.getNamespaceResolver(), true);
-        } catch (MalformedPathException e) {
-            String msg = "failed to resolve path " + relPath + " relative to " + safeGetJCRPath();
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
-        }
-
-        try {
-            Item item = itemMgr.getItem(propPath);
-            if (!item.isNode()) {
-                return (Property) item;
-            } else {
-                // there's a child node with that name, no property though
-                throw new PathNotFoundException(relPath);
-            }
-        } catch (AccessDeniedException ade) {
-            throw new PathNotFoundException(relPath);
-        }
-*/
-/*
-        try {
-            getNode(relPath);
-            return true;
-        } catch (PathNotFoundException pnfe) {
-            return false;
-        }
-*/
-    public boolean canAddMixin(String mixinName) throws RepositoryException {
+    public boolean canAddMixin(String mixinName)
+            throws NoSuchNodeTypeException, RepositoryException {
-/*
-        try {
-            getProperty(relPath);
-            return true;
-        } catch (PathNotFoundException pnfe) {
-            return false;
-        }
-*/
-    public NodeDef getDefinition() throws RepositoryException {
+    public NodeDefinition getDefinition() throws RepositoryException {
-    public void merge(String srcWorkspace, boolean bestEffort)
-            throws UnsupportedRepositoryOperationException,
-            NoSuchWorkspaceException, AccessDeniedException, VersionException,
-            LockException, InvalidItemStateException, RepositoryException {
+    public NodeIterator merge(String srcWorkspace, boolean bestEffort)
+            throws NoSuchWorkspaceException, AccessDeniedException,
+            VersionException, LockException, InvalidItemStateException,
+            RepositoryException {
-        // enable for 0.16.4
-        // return new LazyItemIterator(itemMgr, failedIds);
+        return new LazyItemIterator(itemMgr, failedIds);
-        if (!((VersionImpl) version).getContainingVersionHistory().isSame(getVersionHistory())) {
+        if (!((VersionImpl) version).getContainingHistory().isSame(getVersionHistory())) {
-            PropertyDef[] pda = mixin.getAutoCreatePropertyDefs();
+            PropertyDefinition[] pda = mixin.getAutoCreatedPropertyDefinitions();
-                PropertyDefImpl pd = (PropertyDefImpl) pda[i];
+                PropertyDefinitionImpl pd = (PropertyDefinitionImpl) pda[i];

MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 MOV43 UPD43 UPD43 UPD42 UPD43 UPD42 INS43 INS43 INS43 INS43 INS43 MOV29 INS83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 MOV43 INS43 MOV43 INS8 INS29 INS43 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS29 INS43 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS43 MOV29 INS83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 MOV43 INS43 MOV43 INS8 INS43 INS43 INS43 INS43 INS43 INS43 INS43 UPD43 UPD43 INS42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV60 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS41 UPD42 UPD42 UPD66 UPD66 UPD43 UPD42 UPD42 UPD5 UPD5 UPD43 UPD43 UPD66 UPD43 UPD66 INS32 INS65 INS42 INS42 INS65 INS42 INS42 INS32 INS14 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS42 INS42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD5 UPD5 INS42 INS42 UPD5 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 DEL40 DEL39 DEL42