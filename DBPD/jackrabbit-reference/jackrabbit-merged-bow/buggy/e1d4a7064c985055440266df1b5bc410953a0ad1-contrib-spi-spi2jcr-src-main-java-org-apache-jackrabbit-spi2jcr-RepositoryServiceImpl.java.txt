JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.PathFactory;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.PathFormat;
-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.NameException;
+import org.apache.jackrabbit.name.NameFactoryImpl;
+import org.apache.jackrabbit.name.PathFactoryImpl;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.name.PathBuilder;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.conversion.NamePathResolver;
+import org.apache.jackrabbit.conversion.MalformedPathException;
+    public NameFactory getNameFactory() {
+        return NameFactoryImpl.getInstance();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public PathFactory getPathFactory() {
+        return PathFactoryImpl.getInstance();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
-        return new SessionInfoImpl(repository.login(credentials, workspaceName), duplicate);
+        return new SessionInfoImpl(repository.login(credentials, workspaceName), duplicate, getNameFactory(), getPathFactory());
-        return new SessionInfoImpl(s, sInfo.getCredentials());
+        return new SessionInfoImpl(s, sInfo.getCredentials(), getNameFactory(), getPathFactory());
-        return new SessionInfoImpl(sInfo.getSession().impersonate(credentials), duplicate);
+        return new SessionInfoImpl(sInfo.getSession().impersonate(credentials), duplicate, getNameFactory(), getPathFactory());
+
-                sInfo.getNamespaceResolver());
+                sInfo.getNamePathResolver());
-                    sInfo.getNamespaceResolver());
-        } catch (NameException e) {
+                    sInfo.getNamePathResolver());
+        } catch (org.apache.jackrabbit.conversion.NameException e) {
-                    sInfo.getNamespaceResolver(),
+                    sInfo.getNamePathResolver(),
-            return new NodeInfoImpl(node, idFactory, sInfo.getNamespaceResolver());
-        } catch (NameException e) {
+            return new NodeInfoImpl(node, idFactory, sInfo.getNamePathResolver());
+        } catch (org.apache.jackrabbit.conversion.NameException e) {
-        QName ntName = null;
+        Name ntName = null;
-            ntName = NameFormat.parse(node.getProperty(JcrConstants.JCR_PRIMARYTYPE).getString(), sInfo.getNamespaceResolver());
+            ntName = sInfo.getNamePathResolver().getQName(node.getProperty(JcrConstants.JCR_PRIMARYTYPE).getString());
-                info = new NodeInfoImpl(node, idFactory, sInfo.getNamespaceResolver());
-            } catch (NameException e) {
+                info = new NodeInfoImpl(node, idFactory, sInfo.getNamePathResolver());
+            } catch (org.apache.jackrabbit.conversion.NameException e) {
-                        itemInfos.add(new PropertyInfoImpl(property, idFactory, sInfo.getNamespaceResolver(), getQValueFactory()));
-                    } catch (NameException e) {
+                        itemInfos.add(new PropertyInfoImpl(property, idFactory, sInfo.getNamePathResolver(), getQValueFactory()));
+                    } catch (org.apache.jackrabbit.conversion.NameException e) {
-                        itemInfos.add(new NodeInfoImpl(node, idFactory, sInfo.getNamespaceResolver()));
-                    } catch (NameException e) {
+                        itemInfos.add(new NodeInfoImpl(node, idFactory, sInfo.getNamePathResolver()));
+                    } catch (org.apache.jackrabbit.conversion.NameException e) {
-                        sInfo.getNamespaceResolver()));
+                        sInfo.getNamePathResolver()));
-        } catch (NameException e) {
+        } catch (org.apache.jackrabbit.conversion.NameException e) {
-                    sInfo.getNamespaceResolver(), getQValueFactory());
-        } catch (NameException e) {
+                    sInfo.getNamePathResolver(), getQValueFactory());
+        } catch (org.apache.jackrabbit.conversion.NameException e) {
-                     final QName destName) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+                     final Name destName) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                try {
-                    if (destPath.length() > 1) {
-                        destPath.append("/");
-                    }
-                    destPath.append(NameFormat.format(destName, sInfo.getNamespaceResolver()));
-                } catch (NoPrefixDeclaredException e) {
-                    throw new RepositoryException(e.getMessage(), e);
+                if (destPath.length() > 1) {
+                    destPath.append("/");
+                destPath.append(sInfo.getNamePathResolver().getJCRName(destName));
-                     final QName destName) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
+                     final Name destName) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
-                      final QName destName,
+                      final Name destName,
-            return new LockInfoImpl(lock, idFactory, sInfo.getNamespaceResolver());
+            return new LockInfoImpl(lock, idFactory, sInfo.getNamePathResolver());
-                return new LockInfoImpl(lock, idFactory, sInfo.getNamespaceResolver());
+                return new LockInfoImpl(lock, idFactory, sInfo.getNamePathResolver());
-                    try {
-                        // restore with rel-Path part
-                        Node n = null;
-                        Path relPath = null;
-                        Path path = nodeId.getPath();
-                        if (nodeId.getUniqueID() != null) {
-                            n = getNode(idFactory.createNodeId(nodeId.getUniqueID()), sInfo);
-                            relPath = (path.isAbsolute()) ? Path.ROOT.computeRelativePath(nodeId.getPath()) : path;
-                        } else {
-                            int degree = 0;
-                            while (degree < path.getLength()) {
-                                Path ancestorPath = path.getAncestor(degree);
-                                NodeId parentId = idFactory.createNodeId(nodeId.getUniqueID(), ancestorPath);
-                                if (exists(sessionInfo, parentId)) {
-                                    n = getNode(parentId, sInfo);
-                                    relPath = ancestorPath.computeRelativePath(path);
-                                }
-                                degree++;
+                    // restore with rel-Path part
+                    Node n = null;
+                    Path relPath = null;
+                    Path path = nodeId.getPath();
+                    if (nodeId.getUniqueID() != null) {
+                        n = getNode(idFactory.createNodeId(nodeId.getUniqueID()), sInfo);
+                        relPath = (path.isAbsolute()) ? getPathFactory().getRootPath().computeRelativePath(nodeId.getPath()) : path;
+                    } else {
+                        int degree = 0;
+                        while (degree < path.getLength()) {
+                            Path ancestorPath = path.getAncestor(degree);
+                            NodeId parentId = idFactory.createNodeId(nodeId.getUniqueID(), ancestorPath);
+                            if (exists(sessionInfo, parentId)) {
+                                n = getNode(parentId, sInfo);
+                                relPath = ancestorPath.computeRelativePath(path);
+                            degree++;
-                        if (n == null) {
-                            throw new PathNotFoundException("Path not found " + nodeId);
-                        } else {
-                            n.restore(v, PathFormat.format(relPath, sInfo.getNamespaceResolver()), removeExisting);
-                        }
-                    } catch (MalformedPathException e) {
-                        throw new RepositoryException(e);
-                    } catch (NoPrefixDeclaredException e) {
-                        throw new RepositoryException(e);
+                    }
+                    if (n == null) {
+                        throw new PathNotFoundException("Path not found " + nodeId);
+                    } else {
+                        n.restore(v, sInfo.getNamePathResolver().getJCRPath(relPath), removeExisting);
-                            sInfo.getNamespaceResolver()));
+                            sInfo.getNamePathResolver()));
-                try {
-                    List l = Arrays.asList(mergeFailedIds);
-                    Property mergeFailed = node.getProperty(NameFormat.format(QName.JCR_MERGEFAILED, sInfo.getNamespaceResolver()));
-                    Value[] values = mergeFailed.getValues();
-                    for (int i = 0; i < values.length; i++) {
-                        String uuid = values[i].getString();
-                        if (!l.contains(idFactory.createNodeId(uuid))) {
-                            version = (Version) sInfo.getSession().getNodeByUUID(uuid);
-                            break;
-                        }
+                NamePathResolver resolver = sInfo.getNamePathResolver();
+                List l = Arrays.asList(mergeFailedIds);
+                Property mergeFailed = node.getProperty(resolver.getJCRName(NameConstants.JCR_MERGEFAILED));
+                Value[] values = mergeFailed.getValues();
+                for (int i = 0; i < values.length; i++) {
+                    String uuid = values[i].getString();
+                    if (!l.contains(idFactory.createNodeId(uuid))) {
+                        version = (Version) sInfo.getSession().getNodeByUUID(uuid);
+                        break;
-
-                    l =  new ArrayList(predecessorIds.length);
-                    l.addAll(Arrays.asList(predecessorIds));
-                    Property predecessors = node.getProperty(NameFormat.format(QName.JCR_PREDECESSORS, sInfo.getNamespaceResolver()));
-                    values = predecessors.getValues();
-                    for (int i = 0; i < values.length; i++) {
-                        NodeId vId = idFactory.createNodeId(values[i].getString());
-                        l.remove(vId);
-                    }
-                    cancel = l.isEmpty();
-                } catch (NoPrefixDeclaredException e) {
-                    throw new RepositoryException (e);
+
+                l = new ArrayList(predecessorIds.length);
+                l.addAll(Arrays.asList(predecessorIds));
+                Property predecessors = node.getProperty(resolver.getJCRName(NameConstants.JCR_PREDECESSORS));
+                values = predecessors.getValues();
+                for (int i = 0; i < values.length; i++) {
+                    NodeId vId = idFactory.createNodeId(values[i].getString());
+                    l.remove(vId);
+                }
+                cancel = l.isEmpty();
-                                final QName label,
+                                final Name label,
-                try {
-                    jcrLabel = NameFormat.format(label, sInfo.getNamespaceResolver());
-                } catch (NoPrefixDeclaredException e) {
-                    throw new RepositoryException(e.getMessage(), e);
-                }
+                jcrLabel = sInfo.getNamePathResolver().getJCRName(label);
-                                   final QName label) throws VersionException, RepositoryException {
+                                   final Name label) throws VersionException, RepositoryException {
-                try {
-                    jcrLabel = NameFormat.format(label, sInfo.getNamespaceResolver());
-                } catch (NoPrefixDeclaredException e) {
-                    throw new RepositoryException(e.getMessage(), e);
-                }
+                jcrLabel = sInfo.getNamePathResolver().getJCRName((label));
-                sInfo.getNamespaceResolver(), getQValueFactory());
+                sInfo.getNamePathResolver(), getQValueFactory());
-                                         QName[] nodeTypeName,
+                                         Name[] nodeTypeName,
-                        sInfo.getNamespaceResolver(), getQValueFactory()));
+                        sInfo.getNamePathResolver(), getQValueFactory()));
-        } catch (NameException e) {
+        } catch (org.apache.jackrabbit.conversion.NameException e) {
-    public Iterator getQNodeTypeDefinitions(SessionInfo sessionInfo, QName[] nodetypeNames) throws RepositoryException {
+    public Iterator getQNodeTypeDefinitions(SessionInfo sessionInfo, Name[] nodetypeNames) throws RepositoryException {
-                String ntName = NameFormat.format(nodetypeNames[i], sInfo.getNamespaceResolver());
+                String ntName = sInfo.getNamePathResolver().getJCRName(nodetypeNames[i]);
-                defs.add(new QNodeTypeDefinitionImpl(nt, sInfo.getNamespaceResolver(), getQValueFactory()));
+                defs.add(new QNodeTypeDefinitionImpl(nt, sInfo.getNamePathResolver(), getQValueFactory()));
-                    defs.add(new QNodeTypeDefinitionImpl(supertypes[i], sInfo.getNamespaceResolver(), getQValueFactory()));
+                    defs.add(new QNodeTypeDefinitionImpl(supertypes[i], sInfo.getNamePathResolver(), getQValueFactory()));
-                            final QName nodeName,
-                            final QName nodetypeName,
+                            final Name nodeName,
+                            final Name nodetypeName,
-                                final QName propertyName,
+                                final Name propertyName,
-                            sInfo.getNamespaceResolver(), s.getValueFactory());
+                            sInfo.getNamePathResolver(), s.getValueFactory());
-                                final QName propertyName,
+                                final Name propertyName,
-                                sInfo.getNamespaceResolver(), s.getValueFactory());
+                                sInfo.getNamePathResolver(), s.getValueFactory());
-                            sInfo.getNamespaceResolver(), s.getValueFactory());
+                            sInfo.getNamePathResolver(), s.getValueFactory());
-                                sInfo.getNamespaceResolver(), s.getValueFactory());
+                                sInfo.getNamePathResolver(), s.getValueFactory());
-        private NodeId calcRemoveNodeId(ItemId itemId) {
+        private NodeId calcRemoveNodeId(ItemId itemId) throws MalformedPathException {
-            try {
-                Path p = itemId.getPath();
-                if (p != null) {
-                    removedNodeIds.add(itemId);
-                    int index = p.getNameElement().getNormalizedIndex();
-                    if (index > Path.INDEX_DEFAULT && !removedNodeIds.isEmpty()) {
-                        Path.PathElement[] elems = p.getElements();
-                        Path.PathBuilder pb = new Path.PathBuilder();
-                        for (int i = 0; i <= elems.length - 2; i++) {
-                            pb.addLast(elems[i]);
-                        }
-                        pb.addLast(p.getNameElement().getName(), index - 1);
-                        NodeId prevSibling = idFactory.createNodeId(itemId.getUniqueID(), pb.getPath());
-                        if (removedNodeIds.contains(prevSibling)) {
-                            nodeId = prevSibling;
-                        }
+            Path p = itemId.getPath();
+            if (p != null) {
+                removedNodeIds.add(itemId);
+                int index = p.getNameElement().getNormalizedIndex();
+                if (index > Path.INDEX_DEFAULT && !removedNodeIds.isEmpty()) {
+                    Path.Element[] elems = p.getElements();
+                    PathBuilder pb = new PathBuilder();
+                    for (int i = 0; i <= elems.length - 2; i++) {
+                        pb.addLast(elems[i]);
+                    }
+                    pb.addLast(p.getNameElement().getName(), index - 1);
+
+                    NodeId prevSibling = idFactory.createNodeId(itemId.getUniqueID(), pb.getPath());
+                    if (removedNodeIds.contains(prevSibling)) {
+                        nodeId = prevSibling;
-            } catch (MalformedPathException e) {
-                // ignore
-                              final QName[] mixinNodeTypeIds)
+                              final Name[] mixinNodeTypeIds)
-                         final QName destName) throws RepositoryException {
+                         final Name destName) throws RepositoryException {
-        private String getJcrName(QName name) throws RepositoryException {
+        private String getJcrName(Name name) throws RepositoryException {
-            try {
-                return NameFormat.format(name, sInfo.getNamespaceResolver());
-            } catch (NoPrefixDeclaredException e) {
-                throw new RepositoryException(e.getMessage(), e);
-            }
+            return sInfo.getNamePathResolver().getJCRName((name));
-    private String getDestinationPath(NodeId destParentNodeId, QName destName, SessionInfoImpl sessionInfo) throws RepositoryException {
+    private String getDestinationPath(NodeId destParentNodeId, Name destName, SessionInfoImpl sessionInfo) throws RepositoryException {
-        try {
-            if (destPath.length() > 1) {
-                destPath.append("/");
-            }
-            destPath.append(NameFormat.format(destName, sessionInfo.getNamespaceResolver()));
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e.getMessage(), e);
+        if (destPath.length() > 1) {
+            destPath.append("/");
+        destPath.append(sessionInfo.getNamePathResolver().getJCRName(destName));
-        try {
-            if (id.getPath().isAbsolute()) {
-                if (path.length() == 1) {
-                    // root path ends with slash
-                    path.setLength(0);
-                }
-            } else {
-                // path is relative
-                if (path.length() > 1) {
-                    path.append("/");
-                }
+        if (id.getPath().isAbsolute()) {
+            if (path.length() == 1) {
+                // root path ends with slash
+                path.setLength(0);
-            path.append(PathFormat.format(id.getPath(),
-                    sessionInfo.getNamespaceResolver()));
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e.getMessage());
+        } else {
+            // path is relative
+            if (path.length() > 1) {
+                path.append("/");
+            }
+        path.append(sessionInfo.getNamePathResolver().getJCRPath(id.getPath()));
-        try {
-            jcrPath = PathFormat.format(path, sessionInfo.getNamespaceResolver());
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
+        jcrPath = sessionInfo.getNamePathResolver().getJCRPath(path);
-        String jcrPath;
-        try {
-            jcrPath = PathFormat.format(path, sessionInfo.getNamespaceResolver());
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e.getMessage(), e);
-        }
+        String jcrPath = sessionInfo.getNamePathResolver().getJCRPath(path);

MOV26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS40 MOV31 MOV31 INS29 INS43 INS42 INS29 INS43 INS42 MOV29 INS39 UPD42 MOV44 MOV44 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV29 INS39 UPD42 MOV44 MOV44 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV8 INS65 INS42 INS41 INS65 INS42 INS41 UPD43 UPD43 UPD43 MOV60 INS21 MOV60 MOV21 UPD43 UPD43 UPD5 UPD5 MOV43 MOV8 UPD43 MOV25 MOV21 MOV60 MOV60 MOV25 MOV25 MOV41 MOV21 INS60 INS65 INS32 INS65 INS32 UPD43 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD43 MOV12 UPD43 UPD43 UPD43 UPD43 UPD43 MOV60 MOV41 UPD5 UPD43 UPD43 INS41 UPD42 MOV43 INS59 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS32 INS32 UPD42 INS42 INS14 INS42 UPD42 INS14 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 INS32 MOV32 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD43 UPD43 UPD43 MOV53 UPD43 MOV43 INS1 MOV43 INS1 UPD42 UPD43 UPD42 MOV32 UPD42 MOV42 INS36 INS42 INS42 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS40 INS40 MOV32 INS40 MOV14 INS40 INS31 INS31 INS40 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD43 MOV42 UPD42 MOV43 UPD42 INS83 MOV43 INS42 MOV43 MOV8 INS83 MOV43 INS42 MOV43 MOV8 UPD42 INS40 MOV42 MOV42 MOV25 MOV21 MOV60 INS25 MOV41 MOV60 MOV60 MOV60 INS60 MOV25 MOV41 MOV21 MOV21 MOV2 UPD5 UPD43 MOV32 MOV8 MOV8 INS43 INS59 INS42 UPD43 INS42 UPD42 UPD42 INS42 INS42 INS32 INS21 UPD42 UPD42 UPD42 UPD40 UPD43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS36 INS42 UPD42 UPD42 UPD42 UPD42 UPD40 UPD42 UPD42 UPD40 INS42 MOV42 INS42 UPD42 UPD42 INS42 UPD42 MOV32 UPD43 UPD43 UPD42 UPD42 INS40 INS40 MOV32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 INS32 INS42 INS42 DEL39 DEL42 DEL1 DEL14 DEL32 DEL21 DEL39 DEL42 DEL1 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL40 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL12 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL54 DEL42 DEL42 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL40 DEL40 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54