Speed up indexing using a volatile index with redo log.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156632 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.PrintStream;
+import java.io.OutputStream;
+    /** The logger instance for this class */
+    /** PrintStream that pipes all calls to println(String) into log.info() */
+    private static final LoggingPrintStream STREAM_LOGGER = new LoggingPrintStream();
+
+    /** The currently set IndexWriter or <code>null</code> if none is set */
+    /** The currently set IndexReader of <code>null</code> if none is set */
+    /** The underlying Directory where the index is stored */
+    /** Analyzer we use to tokenize text */
+    /** Compound file flag */
+    /** minMergeDocs config parameter */
+    /** maxMergeDocs config parameter */
+    /** mergeFactor config parameter */
+    /**
+     * Constructs an index with an <code>analyzer</code> and a
+     * <code>directory</code>.
+     * @param analyzer the analyzer for text tokenizing.
+     * @param directory the underlying directory.
+     * @throws IOException if the index cannot be initialized.
+     */
+            indexWriter.infoStream = STREAM_LOGGER;
-        return this.directory;
+        return directory;
+    /**
+     * Returns an <code>IndexSearcher</code> based on the <code>IndexReader</code>
+     * returned by {@link #getIndexReader()}.
+     * @return an <code>IndexSearcher</code> on this index.
+     * @throws IOException if an error occurs.
+     */
+    /**
+     * Adds a document to this index.
+     * @param doc the document to add.
+     * @throws IOException if an error occurs while writing to the index.
+     */
-    void removeDocument(Term idTerm) throws IOException {
-        getIndexReader().delete(idTerm);
+    /**
+     * Removes the document from this index.
+     * @param idTerm the id term of the document to remove.
+     * @throws IOException if an error occurs while removing the document.
+     * @return number of documents deleted
+     */
+    int removeDocument(Term idTerm) throws IOException {
+        return getIndexReader().delete(idTerm);
+    /**
+     * Returns an <code>IndexReader</code> on this index.
+     * @return an <code>IndexReader</code> on this index.
+     * @throws IOException if the reader cannot be obtained.
+     */
+    /**
+     * Returns an <code>IndexWriter</code> on this index.
+     * @return an <code>IndexWriter</code> on this index.
+     * @throws IOException if the writer cannot be obtained.
+     */
+            indexWriter.infoStream = STREAM_LOGGER;
+    /**
+     * Commits all pending changes to the underlying <code>Directory</code>.
+     * After commit both <code>IndexReader</code> and <code>IndexWriter</code>
+     * are released.
+     * @throws IOException if an error occurs while commiting changes.
+     */
+    protected synchronized void commit() throws IOException {
+        if (indexReader != null) {
+            indexReader.close();
+            log.debug("closing IndexReader.");
+            indexReader = null;
+        }
+        if (indexWriter != null) {
+            indexWriter.close();
+            log.debug("closing IndexWriter.");
+            indexWriter = null;
+        }
+    }
+
+    /**
+     * Closes this index, releasing all held resources.
+     */
+    //-------------------------< properties >-----------------------------------
+
+    /**
+     * The lucene index writer property: useCompountFile
+     */
+    /**
+     * The lucene index writer property: minMergeDocs
+     */
+    /**
+     * The lucene index writer property: maxMergeDocs
+     */
+    /**
+     * The lucene index writer property: mergeFactor
+     */
+
+    /**
+     * Adapter to pipe info messages from lucene into log messages.
+     */
+    private static final class LoggingPrintStream extends PrintStream {
+
+        /** Buffer print calls until a newline is written */
+        private StringBuffer buffer = new StringBuffer();
+
+        public LoggingPrintStream() {
+            super(new OutputStream() {
+                public void write(int b) {
+                    // do nothing
+                }
+            });
+        }
+
+        public void print(String s) {
+            buffer.append(s);
+        }
+
+        public void println(String s) {
+            buffer.append(s);
+            log.debug(buffer.toString());
+            buffer.setLength(0);
+        }
+    }

INS26 INS26 INS40 INS40 INS23 INS31 INS55 INS29 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 UPD39 INS29 INS29 INS29 INS83 INS83 INS39 INS42 INS43 INS8 INS29 INS29 INS29 INS29 INS29 INS29 INS83 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS65 INS65 INS42 INS42 INS14 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS25 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS29 INS83 INS43 INS59 INS83 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS66 INS66 INS43 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 MOV32 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS27 INS8 INS27 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS42 INS42 INS14 INS46 INS43 INS42 INS21 INS43 INS42 INS21 INS21 INS21 INS42 INS21 INS68 INS21 INS42 INS33 INS21 INS21 INS21 INS42 INS33 INS21 INS21 INS21 INS66 INS43 INS14 INS42 INS32 INS42 INS32 INS32 INS32 INS7 INS42 INS7 INS32 INS32 INS7 INS32 INS32 INS7 INS42 INS43 INS1 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS33 INS42 INS42 INS42 INS42 INS45 INS42 INS33 INS42 INS31 INS42 INS42 INS83 INS39 INS42 INS44 INS8 INS39 INS42 DEL52 DEL42 DEL22 DEL21