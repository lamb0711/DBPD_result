- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.39 $, $Date: 2004/09/09 15:23:43 $
-	this.ntReg = ntReg;
-	mergedNodeTypes = new TreeSet();
-	inheritedNodeTypes = new TreeSet();
-	allNodeTypes = new TreeSet();
-	namedItemDefs = new HashMap();
-	unnamedItemDefs = new ArrayList();
+        this.ntReg = ntReg;
+        mergedNodeTypes = new TreeSet();
+        inheritedNodeTypes = new TreeSet();
+        allNodeTypes = new TreeSet();
+        namedItemDefs = new HashMap();
+        unnamedItemDefs = new ArrayList();
-	    throws NodeTypeConflictException, NoSuchNodeTypeException {
-	return create(ntReg, ntReg.getNodeTypeDef(nodeTypeName));
+            throws NodeTypeConflictException, NoSuchNodeTypeException {
+        return create(ntReg, ntReg.getNodeTypeDef(nodeTypeName));
-	    throws NodeTypeConflictException, NoSuchNodeTypeException {
-	// create empty effective node type instance
-	EffectiveNodeType ent = new EffectiveNodeType(ntReg);
-	QName ntName = ntd.getName();
+            throws NodeTypeConflictException, NoSuchNodeTypeException {
+        // create empty effective node type instance
+        EffectiveNodeType ent = new EffectiveNodeType(ntReg);
+        QName ntName = ntd.getName();
-	// prepare new instance
-	ent.mergedNodeTypes.add(ntName);
-	ent.allNodeTypes.add(ntName);
+        // prepare new instance
+        ent.mergedNodeTypes.add(ntName);
+        ent.allNodeTypes.add(ntName);
-	ChildNodeDef[] cnda = ntd.getChildNodeDefs();
-	for (int i = 0; i < cnda.length; i++) {
-	    if (cnda[i].definesResidual()) {
-		// residual node definition
-		ent.unnamedItemDefs.add(cnda[i]);
-	    } else {
-		// named node definition
-		QName name = cnda[i].getName();
-		ent.namedItemDefs.put(name, cnda[i]);
-	    }
-	}
-	PropDef[] pda = ntd.getPropertyDefs();
-	for (int i = 0; i < pda.length; i++) {
-	    if (pda[i].definesResidual()) {
-		// residual property definition
-		ent.unnamedItemDefs.add(pda[i]);
-	    } else {
-		// named property definition
-		QName name = pda[i].getName();
-		ent.namedItemDefs.put(name, pda[i]);
-	    }
-	}
+        ChildNodeDef[] cnda = ntd.getChildNodeDefs();
+        for (int i = 0; i < cnda.length; i++) {
+            if (cnda[i].definesResidual()) {
+                // residual node definition
+                ent.unnamedItemDefs.add(cnda[i]);
+            } else {
+                // named node definition
+                QName name = cnda[i].getName();
+                ent.namedItemDefs.put(name, cnda[i]);
+            }
+        }
+        PropDef[] pda = ntd.getPropertyDefs();
+        for (int i = 0; i < pda.length; i++) {
+            if (pda[i].definesResidual()) {
+                // residual property definition
+                ent.unnamedItemDefs.add(pda[i]);
+            } else {
+                // named property definition
+                QName name = pda[i].getName();
+                ent.namedItemDefs.put(name, pda[i]);
+            }
+        }
-	// resolve supertypes recursively
-	QName[] supertypes = ntd.getSupertypes();
-	if (supertypes != null && supertypes.length > 0) {
-	    ent.internalMerge(ntReg.buildEffectiveNodeType(supertypes), true);
-	}
+        // resolve supertypes recursively
+        QName[] supertypes = ntd.getSupertypes();
+        if (supertypes != null && supertypes.length > 0) {
+            ent.internalMerge(ntReg.buildEffectiveNodeType(supertypes), true);
+        }
-	// we're done
-	return ent;
+        // we're done
+        return ent;
-	return new EffectiveNodeType(ntReg);
+        return new EffectiveNodeType(ntReg);
-	return (QName[]) mergedNodeTypes.toArray(new QName[mergedNodeTypes.size()]);
+        return (QName[]) mergedNodeTypes.toArray(new QName[mergedNodeTypes.size()]);
-	return (QName[]) inheritedNodeTypes.toArray(new QName[inheritedNodeTypes.size()]);
+        return (QName[]) inheritedNodeTypes.toArray(new QName[inheritedNodeTypes.size()]);
-	return (QName[]) allNodeTypes.toArray(new QName[allNodeTypes.size()]);
+        return (QName[]) allNodeTypes.toArray(new QName[allNodeTypes.size()]);
-	ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
-	defs.addAll(namedItemDefs.values());
-	defs.addAll(unnamedItemDefs);
-	return (ChildItemDef[]) defs.toArray(new ChildItemDef[defs.size()]);
+        ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
+        defs.addAll(namedItemDefs.values());
+        defs.addAll(unnamedItemDefs);
+        return (ChildItemDef[]) defs.toArray(new ChildItemDef[defs.size()]);
-	return (ChildItemDef[]) namedItemDefs.values().toArray(new ChildItemDef[namedItemDefs.size()]);
+        return (ChildItemDef[]) namedItemDefs.values().toArray(new ChildItemDef[namedItemDefs.size()]);
-	return (ChildItemDef[]) unnamedItemDefs.toArray(new ChildItemDef[unnamedItemDefs.size()]);
+        return (ChildItemDef[]) unnamedItemDefs.toArray(new ChildItemDef[unnamedItemDefs.size()]);
-	return namedItemDefs.containsKey(name);
+        return namedItemDefs.containsKey(name);
-	return (ChildItemDef) namedItemDefs.get(name);
+        return (ChildItemDef) namedItemDefs.get(name);
-	ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
-	Iterator iter = unnamedItemDefs.iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (def.definesNode()) {
-		defs.add(def);
-	    }
-	}
-	iter = namedItemDefs.values().iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (def.definesNode()) {
-		defs.add(def);
-	    }
-	}
-	return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
+        ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
+        Iterator iter = unnamedItemDefs.iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        iter = namedItemDefs.values().iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
-	ArrayList defs = new ArrayList(namedItemDefs.size());
-	Iterator iter = namedItemDefs.values().iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (def.definesNode()) {
-		defs.add(def);
-	    }
-	}
-	return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
+        ArrayList defs = new ArrayList(namedItemDefs.size());
+        Iterator iter = namedItemDefs.values().iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
-	ArrayList defs = new ArrayList(unnamedItemDefs.size());
-	Iterator iter = unnamedItemDefs.iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (def.definesNode()) {
-		defs.add(def);
-	    }
-	}
-	return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
+        ArrayList defs = new ArrayList(unnamedItemDefs.size());
+        Iterator iter = unnamedItemDefs.iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
-	// since auto-create items must have a name,
-	// we're only searching the named item definitions
-	ArrayList defs = new ArrayList(namedItemDefs.size());
-	Iterator iter = namedItemDefs.values().iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (def.definesNode() && def.isAutoCreate()) {
-		defs.add(def);
-	    }
-	}
-	return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
+        // since auto-create items must have a name,
+        // we're only searching the named item definitions
+        ArrayList defs = new ArrayList(namedItemDefs.size());
+        Iterator iter = namedItemDefs.values().iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (def.definesNode() && def.isAutoCreate()) {
+                defs.add(def);
+            }
+        }
+        return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
-	ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
-	Iterator iter = unnamedItemDefs.iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (!def.definesNode()) {
-		defs.add(def);
-	    }
-	}
-	iter = namedItemDefs.values().iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (!def.definesNode()) {
-		defs.add(def);
-	    }
-	}
-	return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
+        ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
+        Iterator iter = unnamedItemDefs.iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (!def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        iter = namedItemDefs.values().iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (!def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
-	ArrayList defs = new ArrayList(namedItemDefs.size());
-	Iterator iter = namedItemDefs.values().iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (!def.definesNode()) {
-		defs.add(def);
-	    }
-	}
-	return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
+        ArrayList defs = new ArrayList(namedItemDefs.size());
+        Iterator iter = namedItemDefs.values().iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (!def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
-	ArrayList defs = new ArrayList(unnamedItemDefs.size());
-	Iterator iter = unnamedItemDefs.iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (!def.definesNode()) {
-		defs.add(def);
-	    }
-	}
-	return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
+        ArrayList defs = new ArrayList(unnamedItemDefs.size());
+        Iterator iter = unnamedItemDefs.iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (!def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
-	// since auto-create items must have a name,
-	// we're only searching the named item definitions
-	ArrayList defs = new ArrayList(namedItemDefs.size());
-	Iterator iter = namedItemDefs.values().iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (!def.definesNode() && def.isAutoCreate()) {
-		defs.add(def);
-	    }
-	}
-	return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
+        // since auto-create items must have a name,
+        // we're only searching the named item definitions
+        ArrayList defs = new ArrayList(namedItemDefs.size());
+        Iterator iter = namedItemDefs.values().iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (!def.definesNode() && def.isAutoCreate()) {
+                defs.add(def);
+            }
+        }
+        return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
-	// since mandatory items must have a name,
-	// we're only searching the named item definitions
-	ArrayList defs = new ArrayList(namedItemDefs.size());
-	Iterator iter = namedItemDefs.values().iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (!def.definesNode() && def.isMandatory()) {
-		defs.add(def);
-	    }
-	}
-	return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
+        // since mandatory items must have a name,
+        // we're only searching the named item definitions
+        ArrayList defs = new ArrayList(namedItemDefs.size());
+        Iterator iter = namedItemDefs.values().iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (!def.definesNode() && def.isMandatory()) {
+                defs.add(def);
+            }
+        }
+        return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
-	// since mandatory items must have a name,
-	// we're only searching the named item definitions
-	ArrayList defs = new ArrayList(namedItemDefs.size());
-	Iterator iter = namedItemDefs.values().iterator();
-	while (iter.hasNext()) {
-	    ChildItemDef def = (ChildItemDef) iter.next();
-	    if (def.definesNode() && def.isMandatory()) {
-		defs.add(def);
-	    }
-	}
-	return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
+        // since mandatory items must have a name,
+        // we're only searching the named item definitions
+        ArrayList defs = new ArrayList(namedItemDefs.size());
+        Iterator iter = namedItemDefs.values().iterator();
+        while (iter.hasNext()) {
+            ChildItemDef def = (ChildItemDef) iter.next();
+            if (def.definesNode() && def.isMandatory()) {
+                defs.add(def);
+            }
+        }
+        return (ChildNodeDef[]) defs.toArray(new ChildNodeDef[defs.size()]);
-	return allNodeTypes.contains(nodeTypeName);
+        return allNodeTypes.contains(nodeTypeName);
-	    throws ConstraintViolationException, ValueFormatException, RepositoryException {
-	// check multi-value flag
-	if (!pd.isMultiple() && values != null && values.length > 1) {
-	    throw new ConstraintViolationException("the property is not multi-valued");
-	}
+            throws ConstraintViolationException, ValueFormatException, RepositoryException {
+        // check multi-value flag
+        if (!pd.isMultiple() && values != null && values.length > 1) {
+            throw new ConstraintViolationException("the property is not multi-valued");
+        }
-	// check value constraints
-	ValueConstraint[] constraints = pd.getValueConstraints();
-	if (constraints != null && constraints.length != 0) {
-	    for (int i = 0; i < constraints.length; i++) {
-		if (values == null || values.length == 0) {
-		    constraints[i].check(null);
-		} else {
-		    for (int j = 0; j < values.length; j++) {
-			constraints[i].check(values[j]);
-		    }
-		}
-	    }
-	}
+        // check value constraints
+        ValueConstraint[] constraints = pd.getValueConstraints();
+        if (constraints != null && constraints.length != 0) {
+            for (int i = 0; i < constraints.length; i++) {
+                if (values == null || values.length == 0) {
+                    constraints[i].check(null);
+                } else {
+                    for (int j = 0; j < values.length; j++) {
+                        constraints[i].check(values[j]);
+                    }
+                }
+            }
+        }
-	    throws ConstraintViolationException {
-	try {
-	    getApplicableChildNodeDef(name, null);
-	} catch (NoSuchNodeTypeException nsnte) {
-	    String msg = "internal eror: inconsistent node type";
-	    log.error(msg, nsnte);
-	    throw new ConstraintViolationException(msg, nsnte);
-	}
+            throws ConstraintViolationException {
+        try {
+            getApplicableChildNodeDef(name, null);
+        } catch (NoSuchNodeTypeException nsnte) {
+            String msg = "internal eror: inconsistent node type";
+            log.error(msg, nsnte);
+            throw new ConstraintViolationException(msg, nsnte);
+        }
-	    throws ConstraintViolationException, NoSuchNodeTypeException {
-	ChildNodeDef nd = getApplicableChildNodeDef(name, nodeTypeName);
-	if (nd.isProtected()) {
-	    throw new ConstraintViolationException(name + " is protected");
-	}
-	if (nd.isAutoCreate()) {
-	    throw new ConstraintViolationException(name + " is auto-created and can not be manually added");
-	}
+            throws ConstraintViolationException, NoSuchNodeTypeException {
+        ChildNodeDef nd = getApplicableChildNodeDef(name, nodeTypeName);
+        if (nd.isProtected()) {
+            throw new ConstraintViolationException(name + " is protected");
+        }
+        if (nd.isAutoCreate()) {
+            throw new ConstraintViolationException(name + " is auto-created and can not be manually added");
+        }
-	    throws NoSuchNodeTypeException, ConstraintViolationException {
-	ChildItemDef def = (ChildItemDef) namedItemDefs.get(name);
-	if (def == null) {
-	    // no item with that name defined;
-	    // try residual node definitions
-	    ChildNodeDef[] nda = getUnnamedNodeDefs();
-	    for (int i = 0; i < nda.length; i++) {
-		ChildNodeDef nd = nda[i];
-		if (nodeTypeName != null) {
-		    try {
-			// check node type constraint
-			checkRequiredPrimaryType(nodeTypeName, nd.getRequiredPrimaryTypes());
-		    } catch (ConstraintViolationException e) {
-			// ignore and try next
-			continue;
-		    }
-		    return nd;
-		} else {
-		    // since no node type has been specified for the new node,
-		    // it must be determined from the default node type;
-		    if (nd.getDefaultPrimaryType() != null) {
-			// found residual node definition with default node type
-			return nd;
-		    }
-		}
-	    }
-	} else {
-	    if (def.definesNode()) {
-		ChildNodeDef nd = (ChildNodeDef) def;
-		// node definition with that name exists
-		if (nodeTypeName != null) {
-		    // check node type constraints
-		    checkRequiredPrimaryType(nodeTypeName, nd.getRequiredPrimaryTypes());
-		    return nd;
-		} else {
-		    if (nd.getDefaultPrimaryType() == null) {
-			// no default node type defined
-			throw new ConstraintViolationException("node type for " + name + " can not be determined");
-		    }
-		}
-	    }
-	}
-	throw new ConstraintViolationException("no matching child node definition found for " + name);
+            throws NoSuchNodeTypeException, ConstraintViolationException {
+        ChildItemDef def = (ChildItemDef) namedItemDefs.get(name);
+        if (def == null) {
+            // no item with that name defined;
+            // try residual node definitions
+            ChildNodeDef[] nda = getUnnamedNodeDefs();
+            for (int i = 0; i < nda.length; i++) {
+                ChildNodeDef nd = nda[i];
+                if (nodeTypeName != null) {
+                    try {
+                        // check node type constraint
+                        checkRequiredPrimaryType(nodeTypeName, nd.getRequiredPrimaryTypes());
+                    } catch (ConstraintViolationException e) {
+                        // ignore and try next
+                        continue;
+                    }
+                    return nd;
+                } else {
+                    // since no node type has been specified for the new node,
+                    // it must be determined from the default node type;
+                    if (nd.getDefaultPrimaryType() != null) {
+                        // found residual node definition with default node type
+                        return nd;
+                    }
+                }
+            }
+        } else {
+            if (def.definesNode()) {
+                ChildNodeDef nd = (ChildNodeDef) def;
+                // node definition with that name exists
+                if (nodeTypeName != null) {
+                    // check node type constraints
+                    checkRequiredPrimaryType(nodeTypeName, nd.getRequiredPrimaryTypes());
+                    return nd;
+                } else {
+                    if (nd.getDefaultPrimaryType() == null) {
+                        // no default node type defined
+                        throw new ConstraintViolationException("node type for " + name + " can not be determined");
+                    }
+                }
+            }
+        }
+        throw new ConstraintViolationException("no matching child node definition found for " + name);
-	    throws ConstraintViolationException {
-	ChildItemDef def = (ChildItemDef) namedItemDefs.get(name);
-	if (def == null) {
-	    // no item with that name defined;
-	    // try residual property definitions
-	    PropDef[] pda = getUnnamedPropDefs();
-	    for (int i = 0; i < pda.length; i++) {
-		PropDef pd = pda[i];
-		int reqType = pd.getRequiredType();
-		// match type
-		if (reqType == PropertyType.UNDEFINED
-			|| type == PropertyType.UNDEFINED
-			|| reqType == type) {
-		    // match multiValued flag
-		    if (multiValued == pd.isMultiple()) {
-			// found match
-			return pd;
-		    }
-		}
-	    }
-	} else {
-	    if (!def.definesNode()) {
-		PropDef pd = (PropDef) def;
-		int reqType = pd.getRequiredType();
-		// property definition with that name exists
-		// match type
-		if (reqType == PropertyType.UNDEFINED
-			|| type == PropertyType.UNDEFINED
-			|| reqType == type) {
-		    // match multiValued flag
-		    if (multiValued == pd.isMultiple()) {
-			// found match
-			return pd;
-		    }
-		}
-	    }
-	}
-	throw new ConstraintViolationException("no matching property definition found for " + name);
+            throws ConstraintViolationException {
+        ChildItemDef def = (ChildItemDef) namedItemDefs.get(name);
+        if (def == null) {
+            // no item with that name defined;
+            // try residual property definitions
+            PropDef[] pda = getUnnamedPropDefs();
+            for (int i = 0; i < pda.length; i++) {
+                PropDef pd = pda[i];
+                int reqType = pd.getRequiredType();
+                // match type
+                if (reqType == PropertyType.UNDEFINED
+                        || type == PropertyType.UNDEFINED
+                        || reqType == type) {
+                    // match multiValued flag
+                    if (multiValued == pd.isMultiple()) {
+                        // found match
+                        return pd;
+                    }
+                }
+            }
+        } else {
+            if (!def.definesNode()) {
+                PropDef pd = (PropDef) def;
+                int reqType = pd.getRequiredType();
+                // property definition with that name exists
+                // match type
+                if (reqType == PropertyType.UNDEFINED
+                        || type == PropertyType.UNDEFINED
+                        || reqType == type) {
+                    // match multiValued flag
+                    if (multiValued == pd.isMultiple()) {
+                        // found match
+                        return pd;
+                    }
+                }
+            }
+        }
+        throw new ConstraintViolationException("no matching property definition found for " + name);
-	ChildItemDef def = getNamedItemDef(name);
-	if (def != null) {
-	    if (def.isMandatory()) {
-		throw new ConstraintViolationException("can't remove mandatory item");
-	    }
-	    if (def.isProtected()) {
-		throw new ConstraintViolationException("can't remove protected item");
-	    }
-	}
+        ChildItemDef def = getNamedItemDef(name);
+        if (def != null) {
+            if (def.isMandatory()) {
+                throw new ConstraintViolationException("can't remove mandatory item");
+            }
+            if (def.isProtected()) {
+                throw new ConstraintViolationException("can't remove protected item");
+            }
+        }
-	    throws ConstraintViolationException, NoSuchNodeTypeException {
-	if (requiredPrimaryTypes == null) {
-	    // no constraint
-	    return;
-	}
-	EffectiveNodeType ent;
-	try {
-	    ent = ntReg.getEffectiveNodeType(nodeTypeName);
-	} catch (RepositoryException re) {
-	    String msg = "failed to check node type constraint";
-	    log.error(msg, re);
-	    throw new ConstraintViolationException(msg, re);
-	}
-	for (int i = 0; i < requiredPrimaryTypes.length; i++) {
-	    if (!ent.includesNodeType(requiredPrimaryTypes[i])) {
-		throw new ConstraintViolationException("node type constraint not satisfied: " + requiredPrimaryTypes[i]);
-	    }
-	}
+            throws ConstraintViolationException, NoSuchNodeTypeException {
+        if (requiredPrimaryTypes == null) {
+            // no constraint
+            return;
+        }
+        EffectiveNodeType ent;
+        try {
+            ent = ntReg.getEffectiveNodeType(nodeTypeName);
+        } catch (RepositoryException re) {
+            String msg = "failed to check node type constraint";
+            log.error(msg, re);
+            throw new ConstraintViolationException(msg, re);
+        }
+        for (int i = 0; i < requiredPrimaryTypes.length; i++) {
+            if (!ent.includesNodeType(requiredPrimaryTypes[i])) {
+                throw new ConstraintViolationException("node type constraint not satisfied: " + requiredPrimaryTypes[i]);
+            }
+        }
-	    throws NodeTypeConflictException {
-	// create a clone of this instance and perform the merge on
-	// the 'clone' to avoid a potentially inconsistant state
-	// of this instance if an exception is thrown during
-	// the merge.
-	EffectiveNodeType copy = (EffectiveNodeType) clone();
-	copy.internalMerge(other, false);
-	return copy;
+            throws NodeTypeConflictException {
+        // create a clone of this instance and perform the merge on
+        // the 'clone' to avoid a potentially inconsistant state
+        // of this instance if an exception is thrown during
+        // the merge.
+        EffectiveNodeType copy = (EffectiveNodeType) clone();
+        copy.internalMerge(other, false);
+        return copy;
-	    throws NodeTypeConflictException {
-	QName[] nta = other.getAllNodeTypes();
-	int includedCount = 0;
-	for (int i = 0; i < nta.length; i++) {
-	    if (includesNodeType(nta[i])) {
-		// redundant node type
-		log.warn("node type '" + nta[i] + "' is already contained.");
-		includedCount++;
-	    }
-	}
-	if (includedCount == nta.length) {
-	    // total overlap, ignore
-	    return;
-	}
+            throws NodeTypeConflictException {
+        QName[] nta = other.getAllNodeTypes();
+        int includedCount = 0;
+        for (int i = 0; i < nta.length; i++) {
+            if (includesNodeType(nta[i])) {
+                // redundant node type
+                log.warn("node type '" + nta[i] + "' is already contained.");
+                includedCount++;
+            }
+        }
+        if (includedCount == nta.length) {
+            // total overlap, ignore
+            return;
+        }
-	// named item definitions
-	ChildItemDef[] defs = other.getNamedItemDefs();
-	for (int i = 0; i < defs.length; i++) {
-	    ChildItemDef def = defs[i];
-	    if (includesNodeType(def.getDeclaringNodeType())) {
-		// ignore redundant definitions
-		continue;
-	    }
-	    QName name = def.getName();
-	    ChildItemDef existing = getNamedItemDef(name);
-	    if (existing != null) {
-		// conflict
-		String msg = "The item definition for '" + name + "' in node type '" + def.getDeclaringNodeType() + "' conflicts with node type '" + existing.getDeclaringNodeType() + "': name collision";
-		log.error(msg);
-		throw new NodeTypeConflictException(msg);
-	    }
-	    namedItemDefs.put(name, def);
-	}
+        // named item definitions
+        ChildItemDef[] defs = other.getNamedItemDefs();
+        for (int i = 0; i < defs.length; i++) {
+            ChildItemDef def = defs[i];
+            if (includesNodeType(def.getDeclaringNodeType())) {
+                // ignore redundant definitions
+                continue;
+            }
+            QName name = def.getName();
+            ChildItemDef existing = getNamedItemDef(name);
+            if (existing != null) {
+                // conflict
+                String msg = "The item definition for '" + name + "' in node type '" + def.getDeclaringNodeType() + "' conflicts with node type '" + existing.getDeclaringNodeType() + "': name collision";
+                log.error(msg);
+                throw new NodeTypeConflictException(msg);
+            }
+            namedItemDefs.put(name, def);
+        }
-	// residual item definitions
-	defs = other.getUnnamedItemDefs();
-	for (int i = 0; i < defs.length; i++) {
-	    ChildItemDef def = defs[i];
-	    if (includesNodeType(def.getDeclaringNodeType())) {
-		// ignore redundant definitions
-		continue;
-	    }
-	    Iterator iter = unnamedItemDefs.iterator();
-	    while (iter.hasNext()) {
-		ChildItemDef existing = (ChildItemDef) iter.next();
-		// compare with existing definition
-		if (def.definesNode() == existing.definesNode()) {
-		    if (!def.definesNode()) {
-			// property definition
-			PropDef pd = (PropDef) def;
-			PropDef epd = (PropDef) existing;
-			// compare type & multiValued flag
-			if (pd.getRequiredType() == epd.getRequiredType()
-				&& pd.isMultiple() == epd.isMultiple()) {
-			    // conflict
-			    String msg = "A property definition in node type '" + def.getDeclaringNodeType() + "' conflicts with node type '" + existing.getDeclaringNodeType() + "': ambiguos residual property definition";
-			    log.error(msg);
-			    throw new NodeTypeConflictException(msg);
-			}
-		    } else {
-			// child node definition
-			// conflict
-			String msg = "A child node definition in node type '" + def.getDeclaringNodeType() + "' conflicts with node type '" + existing.getDeclaringNodeType() + "': ambiguos residual child node definition";
-			log.error(msg);
-			throw new NodeTypeConflictException(msg);
-		    }
-		}
-	    }
-	    // @todo do further checks for ambiguous definitions & other conflicts
-	    unnamedItemDefs.add(def);
-	}
-	// @todo implement further validations
+        // residual item definitions
+        defs = other.getUnnamedItemDefs();
+        for (int i = 0; i < defs.length; i++) {
+            ChildItemDef def = defs[i];
+            if (includesNodeType(def.getDeclaringNodeType())) {
+                // ignore redundant definitions
+                continue;
+            }
+            Iterator iter = unnamedItemDefs.iterator();
+            while (iter.hasNext()) {
+                ChildItemDef existing = (ChildItemDef) iter.next();
+                // compare with existing definition
+                if (def.definesNode() == existing.definesNode()) {
+                    if (!def.definesNode()) {
+                        // property definition
+                        PropDef pd = (PropDef) def;
+                        PropDef epd = (PropDef) existing;
+                        // compare type & multiValued flag
+                        if (pd.getRequiredType() == epd.getRequiredType()
+                                && pd.isMultiple() == epd.isMultiple()) {
+                            // conflict
+                            String msg = "A property definition in node type '" + def.getDeclaringNodeType() + "' conflicts with node type '" + existing.getDeclaringNodeType() + "': ambiguos residual property definition";
+                            log.error(msg);
+                            throw new NodeTypeConflictException(msg);
+                        }
+                    } else {
+                        // child node definition
+                        // conflict
+                        String msg = "A child node definition in node type '" + def.getDeclaringNodeType() + "' conflicts with node type '" + existing.getDeclaringNodeType() + "': ambiguos residual child node definition";
+                        log.error(msg);
+                        throw new NodeTypeConflictException(msg);
+                    }
+                }
+            }
+            // @todo do further checks for ambiguous definitions & other conflicts
+            unnamedItemDefs.add(def);
+        }
+        // @todo implement further validations
-	for (int i = 0; i < nta.length; i++) {
-	    allNodeTypes.add(nta[i]);
-	}
+        for (int i = 0; i < nta.length; i++) {
+            allNodeTypes.add(nta[i]);
+        }
-	if (supertype) {
-	    // implicit merge as result of inheritance
+        if (supertype) {
+            // implicit merge as result of inheritance
-	    // add other merged node types as supertypes
-	    nta = other.getMergedNodeTypes();
-	    for (int i = 0; i < nta.length; i++) {
-		inheritedNodeTypes.add(nta[i]);
-	    }
-	    // add supertypes of other merged node types as supertypes
-	    nta = other.getInheritedNodeTypes();
-	    for (int i = 0; i < nta.length; i++) {
-		inheritedNodeTypes.add(nta[i]);
-	    }
-	} else {
-	    // explicit merge
+            // add other merged node types as supertypes
+            nta = other.getMergedNodeTypes();
+            for (int i = 0; i < nta.length; i++) {
+                inheritedNodeTypes.add(nta[i]);
+            }
+            // add supertypes of other merged node types as supertypes
+            nta = other.getInheritedNodeTypes();
+            for (int i = 0; i < nta.length; i++) {
+                inheritedNodeTypes.add(nta[i]);
+            }
+        } else {
+            // explicit merge
-	    // merge with other merged node types
-	    nta = other.getMergedNodeTypes();
-	    for (int i = 0; i < nta.length; i++) {
-		mergedNodeTypes.add(nta[i]);
-	    }
-	    // add supertypes of other merged node types as supertypes
-	    nta = other.getInheritedNodeTypes();
-	    for (int i = 0; i < nta.length; i++) {
-		inheritedNodeTypes.add(nta[i]);
-	    }
-	}
+            // merge with other merged node types
+            nta = other.getMergedNodeTypes();
+            for (int i = 0; i < nta.length; i++) {
+                mergedNodeTypes.add(nta[i]);
+            }
+            // add supertypes of other merged node types as supertypes
+            nta = other.getInheritedNodeTypes();
+            for (int i = 0; i < nta.length; i++) {
+                inheritedNodeTypes.add(nta[i]);
+            }
+        }
-	EffectiveNodeType clone = new EffectiveNodeType(ntReg);
+        EffectiveNodeType clone = new EffectiveNodeType(ntReg);
-	clone.mergedNodeTypes.addAll(mergedNodeTypes);
-	clone.inheritedNodeTypes.addAll(inheritedNodeTypes);
-	clone.allNodeTypes.addAll(allNodeTypes);
-	clone.namedItemDefs.putAll(namedItemDefs);
-	clone.unnamedItemDefs.addAll(unnamedItemDefs);
+        clone.mergedNodeTypes.addAll(mergedNodeTypes);
+        clone.inheritedNodeTypes.addAll(inheritedNodeTypes);
+        clone.allNodeTypes.addAll(allNodeTypes);
+        clone.namedItemDefs.putAll(namedItemDefs);
+        clone.unnamedItemDefs.addAll(unnamedItemDefs);
-	return clone;
+        return clone;

MOV26 DEL66 DEL65 DEL66 DEL65