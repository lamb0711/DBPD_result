JCR-2087 Upgrade to Java 5 as the base platform

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785116 13f79535-47bb-0310-9956-ffa450edef68

-    private Collection getTransientStates()
+    private Collection<ItemState> getTransientStates()
-        ArrayList dirty = new ArrayList();
+        ArrayList<ItemState> dirty = new ArrayList<ItemState>();
-            Iterator iter = stateMgr.getDescendantTransientItemStates((NodeId) id);
+            Iterator<ItemState> iter = stateMgr.getDescendantTransientItemStates((NodeId) id);
-                transientState = (ItemState) iter.next();
+                transientState = iter.next();
-    private Collection getRemovedStates()
+    private Collection<ItemState> getRemovedStates()
-        ArrayList removed = new ArrayList();
+        ArrayList<ItemState> removed = new ArrayList<ItemState>();
-            Iterator iter = stateMgr.getDescendantTransientItemStatesInAttic((NodeId) id);
+            Iterator<ItemState> iter = stateMgr.getDescendantTransientItemStatesInAttic((NodeId) id);
-                transientState = (ItemState) iter.next();
+                transientState = iter.next();
-    private void validateTransientItems(Iterator dirtyIter, Iterator removedIter)
+    private void validateTransientItems(Iterator<ItemState> dirtyIter, Iterator<ItemState> removedIter)
-            ItemState itemState = (ItemState) dirtyIter.next();
+            ItemState itemState = dirtyIter.next();
-            ItemState itemState = (ItemState) removedIter.next();
+            ItemState itemState = removedIter.next();
-    private void removeTransientItems(Iterator iter) {
+    private void removeTransientItems(Iterator<ItemState> iter) {
-            ItemState transientState = (ItemState) iter.next();
+            ItemState transientState = iter.next();
-    private void persistTransientItems(Iterator iter)
+    private void persistTransientItems(Iterator<ItemState> iter)
-            ItemState state = (ItemState) iter.next();
+            ItemState state = iter.next();
-    private void restoreTransientItems(Iterator iter) {
+    private void restoreTransientItems(Iterator<ItemState> iter) {
-            ItemState itemState = (ItemState) iter.next();
+            ItemState itemState = iter.next();
-    private void processShareableNodes(Iterator iter) throws RepositoryException {
+    private void processShareableNodes(Iterator<ItemState> iter) throws RepositoryException {
-            ItemState is = (ItemState) iter.next();
+            ItemState is = iter.next();
-    private boolean initVersionHistories(Iterator iter) throws RepositoryException {
+    private boolean initVersionHistories(Iterator<ItemState> iter) throws RepositoryException {
-            ItemState itemState = (ItemState) iter.next();
+            ItemState itemState = iter.next();
-            Collection dirty = getTransientStates();
+            Collection<ItemState> dirty = getTransientStates();
-            Collection removed = getRemovedStates();
+            Collection<ItemState> removed = getRemovedStates();
-            Set affectedIds = new HashSet(dirty.size() + removed.size());
-            for (Iterator it =
+            Set<ItemId> affectedIds = new HashSet<ItemId>(dirty.size() + removed.size());
+            for (Iterator<ItemState> it =
-                affectedIds.add(((ItemState) it.next()).getId());
+                affectedIds.add(it.next().getId());
-            for (Iterator it =
+            for (Iterator<ItemState> it =
-                ItemState transientState = (ItemState) it.next();
+                ItemState transientState = it.next();
-                    Set dependentIDs = new HashSet();
+                    Set<NodeId> dependentIDs = new HashSet<NodeId>();
-                                            for (Iterator cneIt =
+                                            for (Iterator<ChildNodeEntry> cneIt =
-                                                        (ChildNodeEntry) cneIt.next();
+                                                        cneIt.next();
-                    for (Iterator cneIt =
+                    for (Iterator<ChildNodeEntry> cneIt =
-                        ChildNodeEntry cne = (ChildNodeEntry) cneIt.next();
+                        ChildNodeEntry cne = cneIt.next();
-                    for (Iterator cneIt =
+                    for (Iterator<ChildNodeEntry> cneIt =
-                        ChildNodeEntry cne = (ChildNodeEntry) cneIt.next();
+                        ChildNodeEntry cne = cneIt.next();
-                    Iterator depIt = dependentIDs.iterator();
+                    Iterator<NodeId> depIt = dependentIDs.iterator();
-                        NodeId id = (NodeId) depIt.next();
+                        NodeId id = depIt.next();
-                for (Iterator it = dirty.iterator(); it.hasNext();) {
-                    ItemState transientState = (ItemState) it.next();
+                for (Iterator<ItemState> it = dirty.iterator(); it.hasNext();) {
+                    ItemState transientState = it.next();
-            for (Iterator it = removed.iterator(); it.hasNext();) {
-                ItemState transientState = (ItemState) it.next();
+            for (Iterator<ItemState> it = removed.iterator(); it.hasNext();) {
+                ItemState transientState = it.next();
-        ArrayList list = new ArrayList();
+        ArrayList<ItemState> list = new ArrayList<ItemState>();
-            Iterator iter = stateMgr.getDescendantTransientItemStates((NodeId) id);
+            Iterator<ItemState> iter = stateMgr.getDescendantTransientItemStates((NodeId) id);
-                transientState = (ItemState) iter.next();
+                transientState = iter.next();
-        Iterator iter = list.iterator();
+        Iterator<ItemState> iter = list.iterator();
-            transientState = (ItemState) iter.next();
+            transientState = iter.next();
-                transientState = (ItemState) iter.next();
+                transientState = iter.next();

INS74 INS74 MOV43 INS43 MOV43 INS43 INS74 INS74 INS74 INS74 INS74 INS74 INS74 MOV61 INS42 INS74 INS42 INS74 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS74 INS74 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 MOV43 MOV21 INS61 INS42 INS74 INS74 INS42 INS74 INS74 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS74 INS74 INS74 INS58 MOV58 INS42 INS74 INS74 UPD42 MOV42 MOV32 INS8 MOV43 INS43 MOV43 MOV43 MOV43 INS43 MOV43 MOV43 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS74 MOV59 INS74 INS74 MOV43 MOV43 MOV43 MOV43 INS21 MOV32 MOV21 MOV21 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS74 MOV43 MOV43 MOV43 MOV43 MOV43 MOV24 MOV43 MOV43 MOV43 INS42 INS7 MOV32 MOV32 MOV43 INS43 MOV32 INS74 MOV32 INS42 MOV32 MOV32 INS42 MOV32 INS74 MOV58 MOV32 MOV58 MOV32 INS74 MOV43 MOV43 MOV43 MOV43 INS43 INS74 INS74 MOV60 MOV43 MOV43 MOV32 INS42 INS74 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 MOV42 MOV32 MOV42 MOV32 MOV32 INS42 INS74 INS60 MOV43 MOV43 MOV43 INS59 INS42 INS42 MOV32 DEL11 DEL11 DEL11 DEL11 DEL11 DEL11 DEL11 DEL11 DEL11 DEL11 DEL36 DEL58 DEL11 DEL11 DEL11 DEL42 DEL11 DEL59 DEL60 DEL11 DEL11 DEL11 DEL11 DEL42 DEL11 DEL7 DEL21 DEL8 DEL61 DEL11