JCR-2076: JSR 283: Joins

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@768954 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.search.Query;
- * Implements the <code>javax.jcr.query.QueryResult</code> interface.
+ * Implements the <code>QueryResult</code> interface.
-public class QueryResultImpl implements QueryResult {
+public abstract class QueryResultImpl implements QueryResult {
-    private final SearchIndex index;
+    protected final SearchIndex index;
-    private final ItemManager itemMgr;
+    protected final ItemManager itemMgr;
-    private final AccessManager accessMgr;
+    protected final AccessManager accessMgr;
-     * The lucene query to execute.
-     */
-    protected final Query query;
-
-    /**
+     * The selector names associated with the score nodes. The selector names
+     * are set when the query is executed via {@link #getResults(long)}.
+     */
+    private Name[] selectorNames;
+
+    /**
-    private final boolean docOrder;
+    protected final boolean docOrder;
-     * Creates a new query result.
+     * Creates a new query result. The concrete sub class is responsible for
+     * calling {@link #getResults(long)} after this constructor had been called.
-     * @param query           the lucene query to execute on the index.
-                           Query query,
-        this.query = query;
-        // if document order is requested get all results right away
-        getResults(docOrder ? Integer.MAX_VALUE : index.getResultFetchSize());
-                excerptProvider = index.createExcerptProvider(query);
+                excerptProvider = createExcerptProvider();
-                queryImpl.getSelectorNames(), itemMgr,
+                selectorNames, itemMgr,
-    protected MultiColumnQueryHits executeQuery(long resultFetchHint) throws IOException {
-        return index.executeQuery(session, queryImpl,
-                query, orderProps, orderSpecs, resultFetchHint);
-    }
+    protected abstract MultiColumnQueryHits executeQuery(long resultFetchHint)
+            throws IOException;
+
+    /**
+     * Creates an excerpt provider for this result set.
+     *
+     * @return an excerpt provider.
+     * @throws IOException if an error occurs.
+     */
+    protected abstract ExcerptProvider createExcerptProvider()
+            throws IOException;
-    private void getResults(long size) throws RepositoryException {
+    protected void getResults(long size) throws RepositoryException {
+            // set selector names
+            selectorNames = result.getSelectorNames();

MOV23 INS83 INS31 UPD83 UPD83 UPD83 UPD83 INS5 UPD83 INS83 INS29 INS83 INS83 INS43 INS42 INS43 UPD83 UPD66 INS43 INS85 UPD42 INS65 INS65 INS65 INS65 INS42 INS42 INS66 UPD66 INS65 INS66 UPD42 MOV42 UPD66 MOV66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS68 INS68 INS42 INS21 INS42 INS69 INS42 INS69 INS7 INS39 INS39 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL83 DEL43 DEL65 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL16 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8