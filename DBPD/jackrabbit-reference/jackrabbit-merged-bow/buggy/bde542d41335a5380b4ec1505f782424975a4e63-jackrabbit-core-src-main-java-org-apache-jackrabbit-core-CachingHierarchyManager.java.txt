JCR-1104 - JSR 283 support
- shareble nodes (work in progress)
- add consistency check to CachingHierarchyManager

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@651246 13f79535-47bb-0310-9956-ffa450edef68

+     * Flag indicating whether consistency checking is enabled.
+     */
+    private boolean consistencyCheckEnabled;
+
+    /**
+    /**
+     * Enable or disable consistency checks in this instance.
+     *
+     * @param enable <code>true</code> to enable consistency checks;
+     *               <code>false</code> to disable
+     */
+    public void enableConsistencyChecks(boolean enable) {
+        this.consistencyCheckEnabled = enable;
+    }
+
-                        return;
+                        continue;
+            checkConsistency();
+                    checkConsistency();
+            checkConsistency();
+                    checkConsistency();
+
+            checkConsistency();
+            checkConsistency();
-        synchronized (cacheMonitor) {
-            PathMap.Element element = null;
+        // assert: synchronized (cacheMonitor)
+        PathMap.Element element = null;
-            LRUEntry entry = (LRUEntry) idCache.get(id);
-            if (entry != null) {
-                // child node already cached: this can have the following
-                // reasons:
-                //    1) node was moved, cached path is outdated
-                //    2) node was cloned, cached path is still valid
-                NodeState child = null;
-                if (hasItemState(id)) {
-                    child = (NodeState) getItemState(id);
-                }
-                if (child == null || !child.isShareable()) {
-                    PathMap.Element[] elements = entry.getElements();
-                    element = elements[0];
-                    for (int i = 0; i < elements.length; i++) {
-                        elements[i].remove();
-                    }
+        LRUEntry entry = (LRUEntry) idCache.get(id);
+        if (entry != null) {
+            // child node already cached: this can have the following
+            // reasons:
+            //    1) node was moved, cached path is outdated
+            //    2) node was cloned, cached path is still valid
+            NodeState child = null;
+            if (hasItemState(id)) {
+                child = (NodeState) getItemState(id);
+            }
+            if (child == null || !child.isShareable()) {
+                PathMap.Element[] elements = entry.getElements();
+                element = elements[0];
+                for (int i = 0; i < elements.length; i++) {
+                    elements[i].remove();
-            PathMap.Element parent = pathCache.map(path.getAncestor(1), true);
-            if (parent != null) {
-                parent.insert(path.getNameElement());
-            }
-            if (element != null) {
-                // store remembered element at new position
-                pathCache.put(path, element);
-            }
+        }
+        PathMap.Element parent = pathCache.map(path.getAncestor(1), true);
+        if (parent != null) {
+            parent.insert(path.getNameElement());
+        }
+        if (element != null) {
+            // store remembered element at new position
+            pathCache.put(path, element);
-        synchronized (cacheMonitor) {
-            PathMap.Element parent = pathCache.map(path.getAncestor(1), true);
-            if (parent == null) {
+        // assert: synchronized (cacheMonitor)
+        PathMap.Element parent = pathCache.map(path.getAncestor(1), true);
+        if (parent == null) {
+            return;
+        }
+        PathMap.Element element = parent.getDescendant(PathFactoryImpl.getInstance().create(
+                new Path.Element[] { path.getNameElement() }), true);
+        if (element != null) {
+            // with SNS, this might evict a child that is NOT the one
+            // having <code>id</code>, check first whether item has
+            // the id passed as argument
+            LRUEntry entry = (LRUEntry) element.get();
+            if (entry != null && !entry.getId().equals(id)) {
-            PathMap.Element element = parent.getDescendant(PathFactoryImpl.getInstance().create(
-                    new Path.Element[] { path.getNameElement() }), true);
-            if (element != null) {
-                // with SNS, this might evict a child that is NOT the one
-                // having <code>id</code>, check first whether item has
-                // the id passed as argument
-                LRUEntry entry = (LRUEntry) element.get();
-                if (entry != null && !entry.getId().equals(id)) {
-                    return;
-                }
-                // if item is shareable, remove this path only, otherwise
-                // every path this item has been mapped to
-                NodeState child = null;
-                if (hasItemState(id)) {
-                    child = (NodeState) getItemState(id);
-                }
-                if (child == null || !child.isShareable()) {
-                    evictAll(id, true);
-                } else {
-                    evict(element, true);
-                }
-            } else {
-                // element itself is not cached, but removal might cause SNS
-                // index shifting
-                parent.remove(path.getNameElement());
+            // if item is shareable, remove this path only, otherwise
+            // every path this item has been mapped to
+            NodeState child = null;
+            if (hasItemState(id)) {
+                child = (NodeState) getItemState(id);
+            if (child == null || !child.isShareable()) {
+                evictAll(id, true);
+            } else {
+                evict(element, true);
+            }
+        } else {
+            // element itself is not cached, but removal might cause SNS
+            // index shifting
+            parent.remove(path.getNameElement());
+     * Check consistency.
+     */
+    private void checkConsistency() throws IllegalStateException {
+        // assert: synchronized (cacheMonitor)
+        if (!consistencyCheckEnabled) {
+            return;
+        }
+
+        int elementsInCache = 0;
+
+        Iterator iter = idCache.values().iterator();
+        while (iter.hasNext()) {
+            LRUEntry entry = (LRUEntry) iter.next();
+            elementsInCache += entry.getElements().length;
+        }
+
+        class PathMapElementCounter implements PathMap.ElementVisitor {
+            int count;
+            public void elementVisited(PathMap.Element element) {
+                LRUEntry mappedEntry = (LRUEntry) element.get();
+                LRUEntry cachedEntry = (LRUEntry) idCache.get(mappedEntry.getId());
+                if (cachedEntry == null) {
+                    String msg = "Path element (" + element +
+                        " ) cached in path map, associated id (" +
+                        mappedEntry.getId() + ") isn't.";
+                    throw new IllegalStateException(msg);
+                }
+                if (cachedEntry != mappedEntry) {
+                    String msg = "LRUEntry associated with element (" + element +
+                        " ) in path map is not equal to cached LRUEntry (" +
+                        cachedEntry.getId() + ").";
+                    throw new IllegalStateException(msg);
+                }
+                PathMap.Element[] elements = cachedEntry.getElements();
+                for (int i = 0; i < elements.length; i++) {
+                    if (elements[i] == element) {
+                        count++;
+                        return;
+                    }
+                }
+                String msg = "Element (" + element +
+                    ") cached in path map, but not in associated LRUEntry (" +
+                    cachedEntry.getId() + ").";
+                throw new IllegalStateException(msg);
+            }
+        }
+
+        PathMapElementCounter counter = new PathMapElementCounter();
+        pathCache.traverse(counter, false);
+        if (counter.count != elementsInCache) {
+            String msg = "PathMap element and cached element count don't match (" +
+                counter.count + " != " + elementsInCache + ")";
+            throw new IllegalStateException(msg);
+        }
+    }
+
+    /**

INS23 INS31 INS31 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS44 INS8 MOV8 MOV8 INS29 INS83 INS39 INS42 INS43 INS8 INS65 INS42 INS65 INS65 INS39 INS42 INS21 INS65 INS42 INS25 INS60 INS60 INS61 INS56 INS60 INS21 INS25 INS66 INS66 INS42 INS66 INS66 INS7 INS66 INS38 INS8 INS39 INS59 INS43 INS59 INS32 INS8 INS55 INS43 INS59 INS32 INS27 INS8 INS22 INS42 INS21 INS21 INS21 INS21 INS42 INS41 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS43 INS23 INS31 INS42 INS42 INS14 INS42 INS42 INS42 INS9 INS40 INS42 INS60 INS53 INS52 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS43 INS59 INS7 INS40 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS59 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS22 INS42 INS43 INS42 INS60 INS60 INS25 INS25 INS60 INS24 INS60 INS53 INS42 INS42 INS42 INS27 INS43 INS42 INS43 INS32 INS32 INS42 INS40 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS14 INS45 INS40 INS45 INS42 INS45 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS33 INS60 INS53 INS42 INS42 INS60 INS53 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS27 INS43 INS42 INS32 INS32 INS43 INS32 INS43 INS32 INS43 INS59 INS14 INS43 INS59 INS14 INS40 INS42 INS42 INS42 INS34 INS27 INS8 INS45 INS42 INS45 INS32 INS45 INS42 INS18 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS27 INS43 INS42 INS2 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS37 INS42 INS42 INS42 INS42 INS42 DEL41 DEL42 DEL51 DEL8 DEL42 DEL51 DEL8