work in progress

- SPI: replace String/Stream for values by QValue interface
- SPI: add factory for QValue
  > adjust commons and add implementation
  > adjust usages of former QValue object with jcr2spi, spi2dav
- RepositoryService.getChildInfos returns Iterator instead of Collection
- spi2dav: add implementation for new query interfaces

- TODO: 
  improve conversion of jcr-value to q-value and vice-versa




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497885 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.httpclient.HttpConnectionManager;
+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.QValueFactory;
-import org.apache.jackrabbit.value.QValue;
+import org.apache.jackrabbit.value.QValueFactoryImpl;
-        if (clients.containsKey(sessionInfo)) {
-            return (HttpClient) clients.get(sessionInfo);
-        } else {
-            HttpClient client = new HttpClient(new MultiThreadedHttpConnectionManager());
+        HttpClient client = (HttpClient) clients.get(sessionInfo);
+        if (client == null) {
+            HttpConnectionManager connMgr = new MultiThreadedHttpConnectionManager();
+            client = new HttpClient(connMgr);
-
-            return client;
+            log.debug("Created Client " + client + " for SessionInfo " + sessionInfo);
+        return client;
+    }
+
+    private void removeClient(SessionInfo sessionInfo) {
+        HttpClient cl = (HttpClient) clients.remove(sessionInfo);
+        if (cl != null) {
+            ((MultiThreadedHttpConnectionManager) cl.getHttpConnectionManager()).shutdown();
+        }
+        log.debug("Removed Client " + cl + " for SessionInfo " + sessionInfo);
+    public QValueFactory getQValueFactory() {
+        return QValueFactoryImpl.getInstance();
+    }
+
+        removeClient(sessionInfo);
-                        definition = new QPropertyDefinitionImpl(null, idfElem, nsResolver);
+                        definition = new QPropertyDefinitionImpl(null, idfElem, nsResolver, getQValueFactory());
-    public Collection getChildInfos(SessionInfo sessionInfo, NodeId parentId) throws ItemNotFoundException, RepositoryException {
+    public Iterator getChildInfos(SessionInfo sessionInfo, NodeId parentId) throws ItemNotFoundException, RepositoryException {
-                return Collections.EMPTY_LIST;
+                return Collections.EMPTY_LIST.iterator();
-            Set childEntries = new HashSet();
+            List childEntries = new ArrayList();
-            return childEntries;
+            return childEntries.iterator();
-            PropertyInfo pInfo = new PropertyInfoImpl(id, parentId, propSet, nsResolver, valueFactory);
+            PropertyInfo pInfo = new PropertyInfoImpl(id, parentId, propSet, nsResolver, valueFactory, getQValueFactory());
-                nsResolver, valueFactory);
+                nsResolver, valueFactory, getQValueFactory());
-                ntDefs.add(new QNodeTypeDefinitionImpl(it.nextElement(), nsResolver));
+                ntDefs.add(new QNodeTypeDefinitionImpl(it.nextElement(), nsResolver, getQValueFactory()));
-         * @see Batch#addProperty(NodeId, QName, String, int)
+         * @see Batch#addProperty(NodeId, QName, QValue)
-        public void addProperty(NodeId parentId, QName propertyName, String value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void addProperty(NodeId parentId, QName propertyName, QValue value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            QValue qV = QValue.create(value, propertyType);
-            Value jcrValue = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
+            Value jcrValue = ValueFormat.getJCRValue(value, nsResolver, valueFactory);
-         * @see Batch#addProperty(NodeId, QName, String[], int)
+         * @see Batch#addProperty(NodeId, QName, QValue[])
-        public void addProperty(NodeId parentId, QName propertyName, String[] values, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void addProperty(NodeId parentId, QName propertyName, QValue[] values) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                QValue v = QValue.create(values[i], propertyType);
-                jcrValues[i] = ValueFormat.getJCRValue(v, nsResolver, valueFactory);
+                jcrValues[i] = ValueFormat.getJCRValue(values[i], nsResolver, valueFactory);
-        /**
-         * @see Batch#addProperty(NodeId, QName, InputStream, int)
-         */
-        public void addProperty(NodeId parentId, QName propertyName, InputStream value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            checkConsumed();
-            try {
-                QValue qV = QValue.create(value, propertyType);
-                Value jcrValue = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
-                ValuesProperty vp = new ValuesProperty(jcrValue);
-                internalAddProperty(parentId, propertyName, vp);
-            } catch (IOException e) {
-                throw new ValueFormatException(e);
-            }
-        }
-
-        /**
-         * @see Batch#addProperty(NodeId, QName, InputStream[], int)
-         */
-        public void addProperty(NodeId parentId, QName propertyName, InputStream[] values, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            checkConsumed();
-            try {
-                Value[] jcrValues = new Value[values.length];
-                for (int i = 0; i < values.length; i++) {
-                    QValue qV = QValue.create(values[i], propertyType);
-                    jcrValues[i] = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
-                }
-                ValuesProperty vp = new ValuesProperty(jcrValues);
-                internalAddProperty(parentId, propertyName, vp);
-            } catch (IOException e) {
-                throw new ValueFormatException(e);
-            }
-        }
-
-         * @see Batch#setValue(PropertyId, String, int)
+         * @see Batch#setValue(PropertyId, QValue)
-        public void setValue(PropertyId propertyId, String value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void setValue(PropertyId propertyId, QValue value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                QValue qV = QValue.create(value, propertyType);
-                Value jcrValue = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
+                Value jcrValue = ValueFormat.getJCRValue(value, nsResolver, valueFactory);
-         * @see Batch#setValue(PropertyId, String[], int)
+         * @see Batch#setValue(PropertyId, QValue[])
-        public void setValue(PropertyId propertyId, String[] values, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void setValue(PropertyId propertyId, QValue[] values) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                    QValue qV = QValue.create(values[i], propertyType);
-                    jcrValues[i] = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
+                    jcrValues[i] = ValueFormat.getJCRValue(values[i], nsResolver, valueFactory);
-         * @see Batch#setValue(PropertyId, InputStream, int)
-         */
-        public void setValue(PropertyId propertyId, InputStream value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            checkConsumed();
-            try {
-                DavPropertySet setProperties = new DavPropertySet();
-                if (value == null) {
-                    // setting property value to 'null' is identical to a removal
-                    remove(propertyId);
-                } else {
-                    // qualified value must be converted to jcr value
-                    QValue qV = QValue.create(value, propertyType);
-                    Value jcrValue = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
-                    ValuesProperty vp = new ValuesProperty(jcrValue);
-                    setProperties.add(vp);
-                }
-                internalSetValue(propertyId, setProperties);
-            } catch (IOException e) {
-                throw new ValueFormatException(e);
-            }
-        }
-
-        /**
-         * @see Batch#setValue(PropertyId, InputStream[], int)
-         */
-        public void setValue(PropertyId propertyId, InputStream[] values, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            checkConsumed();
-            try {
-                DavPropertySet setProperties = new DavPropertySet();
-                if (values == null) {
-                    // setting property value to 'null' is identical to a removal
-                    remove(propertyId);
-                } else {
-                    // qualified values must be converted to jcr values
-                    Value[] jcrValues = new Value[values.length];
-                    for (int i = 0; i < values.length; i++) {
-                        QValue qV = QValue.create(values[i], propertyType);
-                        jcrValues[i] = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
-                    }
-                    setProperties.add(new ValuesProperty(jcrValues));
-                }
-                internalSetValue(propertyId, setProperties);
-            }   catch (IOException e) {
-                throw new ValueFormatException(e);
-            }
-        }
-
-        /**

MOV26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 UPD43 INS60 MOV41 INS43 INS42 INS60 INS25 INS21 INS42 INS41 INS21 UPD42 MOV29 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV8 INS29 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV8 MOV43 INS59 INS27 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS32 MOV43 MOV21 INS65 UPD5 MOV21 UPD43 MOV42 MOV43 UPD42 MOV42 MOV42 MOV21 MOV60 MOV21 UPD5 MOV21 INS60 INS25 INS21 INS42 MOV11 INS42 INS33 INS21 INS21 INS42 INS42 INS11 INS42 INS33 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 MOV43 INS68 UPD43 MOV42 MOV43 MOV8 MOV32 MOV43 INS43 INS59 MOV27 INS8 MOV8 INS32 INS43 INS7 INS32 INS43 INS32 INS32 INS45 INS42 INS45 INS42 UPD43 INS32 INS42 INS42 MOV69 MOV69 INS69 MOV42 MOV42 MOV42 MOV69 UPD42 MOV42 INS42 INS14 INS21 MOV21 INS42 INS42 INS42 INS42 UPD42 MOV14 INS42 MOV14 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS36 INS42 UPD42 INS42 INS42 INS32 MOV43 UPD42 INS5 UPD43 MOV43 MOV43 MOV32 MOV43 UPD5 UPD43 MOV43 INS32 INS42 INS45 INS42 INS45 INS42 INS11 UPD43 INS32 INS42 MOV43 INS85 MOV32 MOV42 UPD42 MOV42 MOV43 UPD42 INS42 INS42 INS43 INS32 INS32 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV43 INS42 INS42 INS42 INS40 INS42 INS32 MOV32 MOV42 MOV42 INS42 INS42 UPD42 UPD42 UPD42 INS32 INS42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL39 DEL69 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL39 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL85 DEL5 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL31 DEL39 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL39 DEL69 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL44 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL39 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL85 DEL5 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31