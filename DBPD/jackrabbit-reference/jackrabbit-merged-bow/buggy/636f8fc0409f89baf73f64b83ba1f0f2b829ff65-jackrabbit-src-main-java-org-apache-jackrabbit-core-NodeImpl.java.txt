JCR-444 Error while restoring OPV=Version childnodes (Restore of root version not allowed)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@410311 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.version.GenericVersionSelector;
+import org.apache.jackrabbit.core.version.LabelVersionSelector;
+import org.apache.jackrabbit.core.version.DateVersionSelector;
+import javax.jcr.version.VersionIterator;
-        GenericVersionSelector gvs = new GenericVersionSelector();
-        gvs.setName(versionName);
-        internalRestore(getVersionHistory().getVersion(versionName), gvs, removeExisting);
+        Version v = getVersionHistory().getVersion(versionName);
+        DateVersionSelector gvs = new DateVersionSelector(v.getCreated());
+        internalRestore(v, gvs, removeExisting);
-        internalRestore(version, new GenericVersionSelector(version.getCreated()), removeExisting);
+        internalRestore(version, new DateVersionSelector(version.getCreated()), removeExisting);
-            node.internalRestore(version, new GenericVersionSelector(version.getCreated()), removeExisting);
+            node.internalRestore(version, new DateVersionSelector(version.getCreated()), removeExisting);
-        internalRestore(v, new GenericVersionSelector(versionLabel), removeExisting);
+        internalRestore(v, new LabelVersionSelector(versionLabel), removeExisting);
+                String oldVersion = "jcr:dummy";
-                        session.move(n.getPath(), getPath() + "/" + n.getName());
+                        String dstPath = getPath() + "/" + n.getName();
+                        if (!n.getPath().equals(dstPath)) {
+                            session.move(n.getPath(), dstPath);
+                        }
+                        oldVersion = n.getBaseVersion().getName();
+                // get desired version from version selector
+                AbstractVersion v = (AbstractVersion) vsel.select(history);
+
+                // check existing version of item exists
+                NodeImpl node;
-                    // get desired version from version selector
-                    AbstractVersion v = (AbstractVersion) vsel.select(history);
-                    NodeImpl node = addNode(child.getName(), v.getFrozenNode());
-                    node.internalRestore(v, vsel, removeExisting);
+                    if (v == null) {
+                        // if version selector was unable to select version,
+                        // choose the initial one
+                        Version[] vs = history.getRootVersion().getSuccessors();
+                        if (vs.length == 0) {
+                            String msg = "Unable to select appropariate version for " +
+                                    child.getName() + " using " + vsel;
+                            log.error(msg);
+                            throw new VersionException(msg);
+                        }
+                        v = (AbstractVersion) vs[0];
+                    }
+                    node = addNode(child.getName(), v.getFrozenNode());
+                } else {
+                    node = session.getNodeById(nodeId);
+                    if (v == null || oldVersion == null || v.getName().equals(oldVersion)) {
+                        v = null;
+                    }
+                }
+                if (v != null) {
+                    try {
+                        node.internalRestore(v, vsel, removeExisting);
+                    } catch (RepositoryException e) {
+                        log.error("Error while restoring node: " + e.toString());
+                        log.error("  child path: " + node.safeGetJCRPath());
+                        log.error("  selected version: " + v.getName());
+                        StringBuffer avail = new StringBuffer();
+                        VersionIterator vi = history.getAllVersions();
+                        while (vi.hasNext()) {
+                            avail.append(vi.nextVersion().getName());
+                            if (vi.hasNext()) {
+                                avail.append(", ");
+                            }
+                        }
+                        log.error("  available versions: " + avail);
+                        log.error("  versionselector: " + vsel);
+                        throw e;
+                    }

MOV26 INS26 INS26 INS40 UPD40 INS40 INS60 INS43 INS59 UPD43 INS42 INS42 MOV32 UPD42 INS42 UPD43 INS32 UPD43 UPD43 UPD42 INS42 INS42 UPD42 UPD42 UPD43 INS60 MOV60 MOV60 INS25 INS25 UPD42 INS43 INS59 MOV38 INS8 INS8 INS27 INS8 INS42 INS42 INS45 INS25 INS21 INS21 INS25 INS42 INS33 INS54 MOV21 INS8 INS27 INS8 INS7 INS7 INS27 INS8 INS8 INS12 INS60 INS25 INS21 INS42 INS33 INS60 INS25 INS21 INS42 MOV32 INS42 INS32 INS27 INS32 INS21 MOV21 INS44 INS8 INS43 INS59 INS38 MOV8 INS7 INS5 INS59 INS27 INS8 INS7 INS42 INS42 INS42 INS27 INS27 INS32 INS42 INS42 INS7 INS43 INS42 INS21 INS21 INS21 INS60 INS60 INS61 INS21 INS21 INS53 INS42 INS42 MOV27 INS32 INS42 INS32 INS43 INS85 INS42 INS32 INS40 INS34 INS60 INS21 INS53 INS42 INS11 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS32 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS43 INS2 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS21 INS25 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS34 INS45 INS32 INS45 INS32 INS45 INS32 INS43 INS42 INS42 INS32 INS32 INS8 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25