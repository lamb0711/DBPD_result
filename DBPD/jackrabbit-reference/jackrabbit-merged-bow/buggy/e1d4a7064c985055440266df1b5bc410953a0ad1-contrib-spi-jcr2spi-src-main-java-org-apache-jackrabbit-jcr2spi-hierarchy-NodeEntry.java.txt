JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.Path;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
-     * {@link org.apache.jackrabbit.name.Path#INDEX_UNDEFINED} is returned.
+     * {@link org.apache.jackrabbit.spi.Path#INDEX_UNDEFINED} is returned.
-     * @param nodeName <code>QName</code> object specifying a node name
+     * @param nodeName <code>Name</code> object specifying a node name
-    public boolean hasNodeEntry(QName nodeName);
+    public boolean hasNodeEntry(Name nodeName);
-     * @param nodeName  <code>QName</code> object specifying a node name.
+     * @param nodeName  <code>Name</code> object specifying a node name.
-    public boolean hasNodeEntry(QName nodeName, int index);
+    public boolean hasNodeEntry(Name nodeName, int index);
-     * @param nodeName <code>QName</code> object specifying a node name.
+     * @param nodeName <code>Name</code> object specifying a node name.
-    public NodeEntry getNodeEntry(QName nodeName, int index) throws RepositoryException;
+    public NodeEntry getNodeEntry(Name nodeName, int index) throws RepositoryException;
-     * @param nodeName <code>QName</code> object specifying a node name.
+     * @param nodeName <code>Name</code> object specifying a node name.
-    public NodeEntry getNodeEntry(QName nodeName, int index, boolean loadIfNotFound) throws RepositoryException;
+    public NodeEntry getNodeEntry(Name nodeName, int index, boolean loadIfNotFound) throws RepositoryException;
-    public List getNodeEntries(QName nodeName) throws RepositoryException;
+    public List getNodeEntries(Name nodeName) throws RepositoryException;
-    public NodeEntry addNodeEntry(QName nodeName, String uniqueID, int index) throws RepositoryException;
+    public NodeEntry addNodeEntry(Name nodeName, String uniqueID, int index) throws RepositoryException;
-    public NodeState addNewNodeEntry(QName nodeName, String uniqueID, QName primaryNodeType, QNodeDefinition definition) throws RepositoryException;
+    public NodeState addNewNodeEntry(Name nodeName, String uniqueID, Name primaryNodeType, QNodeDefinition definition) throws RepositoryException;
-     * Determines if there is a property entry with the specified <code>QName</code>.
+     * Determines if there is a property entry with the specified <code>Name</code>.
-     * @param propName <code>QName</code> object specifying a property name
+     * @param propName <code>Name</code> object specifying a property name
-     * <code>QName</code>.
+     * <code>Name</code>.
-    public boolean hasPropertyEntry(QName propName);
+    public boolean hasPropertyEntry(Name propName);
-     * @param propName <code>QName</code> object specifying a property name.
+     * @param propName <code>Name</code> object specifying a property name.
-    public PropertyEntry getPropertyEntry(QName propName) throws RepositoryException;
+    public PropertyEntry getPropertyEntry(Name propName) throws RepositoryException;
-     * @param propName <code>QName</code> object specifying a property name.
+     * @param propName <code>Name</code> object specifying a property name.
-    public PropertyEntry getPropertyEntry(QName propName,  boolean loadIfNotFound) throws RepositoryException;
+    public PropertyEntry getPropertyEntry(Name propName,  boolean loadIfNotFound) throws RepositoryException;
-     * Please note the difference to {@link #addNewPropertyEntry(QName, QPropertyDefinition)}
+     * Please note the difference to {@link #addNewPropertyEntry(Name, QPropertyDefinition)}
-    public PropertyEntry addPropertyEntry(QName propName) throws ItemExistsException, RepositoryException;
+    public PropertyEntry addPropertyEntry(Name propName) throws ItemExistsException, RepositoryException;
-     * Adds property entries for the given <code>QName</code>s. It depends on
+     * Adds property entries for the given <code>Name</code>s. It depends on
-    public PropertyState addNewPropertyEntry(QName propName, QPropertyDefinition definition) throws ItemExistsException, RepositoryException;
+    public PropertyState addNewPropertyEntry(Name propName, QPropertyDefinition definition) throws ItemExistsException, RepositoryException;
-    public NodeEntry move(QName newName, NodeEntry newParent, boolean transientMove) throws RepositoryException;
+    public NodeEntry move(Name newName, NodeEntry newParent, boolean transientMove) throws RepositoryException;

UPD40 UPD40 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD66 UPD66 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 UPD42 UPD40 UPD43 UPD42