Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.jcr2spi.state;
+package org.apache.jackrabbit.jcr2spi.hierarchy;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-import org.apache.jackrabbit.spi.IdFactory;
+import org.apache.jackrabbit.spi.EventFilter;
-import org.apache.jackrabbit.spi.EventFilter;
+import org.apache.jackrabbit.spi.NodeId;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import java.util.Collection;
+import java.util.Collections;
-import java.util.Collection;
-import java.util.Collections;
- * <code>WorkspaceItemStateManager</code>
+ * <code>HierarchyEventListener</code>...
-public class WorkspaceItemStateManager extends CachingItemStateManager
-    implements InternalEventListener {
+public class HierarchyEventListener implements InternalEventListener {
-    private static Logger log = LoggerFactory.getLogger(WorkspaceItemStateManager.class);
+    private static Logger log = LoggerFactory.getLogger(HierarchyEventListener.class);
+    private final HierarchyManager hierarchyMgr;
-    public WorkspaceItemStateManager(WorkspaceManager wspManager,
-                                     CacheBehaviour cacheBehaviour,
-                                     ItemStateFactory isf, IdFactory idFactory) {
-        super(isf, idFactory);
+    public HierarchyEventListener(WorkspaceManager wspManager,
+                                  HierarchyManager hierarchyMgr,
+                                  CacheBehaviour cacheBehaviour) {
+        this.hierarchyMgr = hierarchyMgr;
-    //-------------------------------< InternalEventListener >------------------
+    //----------------------------------------------< InternalEventListener >---
-                NodeState parent = (ev.getParentId() != null) ? (NodeState) lookup(ev.getParentId()) : null;
+                NodeEntry parent = (ev.getParentId() != null) ? (NodeEntry) hierarchyMgr.lookup(ev.getParentId()) : null;
-            ItemState state = lookup(event.getItemId());
-            NodeState parent = (event.getParentId() != null) ? (NodeState) lookup(event.getParentId()) : null;
-
+            NodeId parentId = event.getParentId();
+            NodeEntry parent = (parentId != null) ? (NodeEntry) hierarchyMgr.lookup(parentId) : null;
-                if (state != null) {
-                    state.refresh(event);
-                }
-                if (parent != null) {
-                    // invalidate parent only if it has not been removed
-                    // with the same event bundle.
-                    if (!removedEvents.contains(event.getParentId())) {
-                        parent.refresh(event);
-                    }
+                // notify parent about removal if its child-entry.
+                // - if parent is 'null' (i.e. not yet loaded) the child-entry does
+                //   not exist either -> no need to inform child-entry
+                // - if parent got removed with the same event-bundle
+                //   only remove the parent an skip this event.
+                if (parent != null && !removedEvents.contains(parentId)) {
+                    parent.refresh(event);
-                if (state != null) {
-                    state.refresh(event);
-                }
-                // parent must be notified in case jcr:mixintypes or jcr:uuid
-                // was changed.
+                // notify parent in case jcr:mixintypes or jcr:uuid was changed.
+                // if parent is 'null' (i.e. not yet loaded) the prop-entry does
+                // not exist either -> no need to inform propEntry
-}
+}

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 INS42 INS23 MOV44 INS83 INS83 INS43 INS59 UPD42 UPD66 INS42 INS42 UPD43 UPD42 INS21 UPD42 INS7 UPD43 INS22 INS42 UPD42 INS52 INS42 UPD43 UPD43 UPD42 INS42 MOV32 UPD42 UPD43 INS27 MOV8 UPD42 UPD43 MOV27 INS38 INS42 UPD42 INS42 INS42 MOV32 UPD43 UPD42 MOV42 UPD42 INS42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL46 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL38 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25