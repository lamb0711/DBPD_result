JCR-2459: Improved error reporting from JcrUtils.getRepository

Report some more details when failing to access repositories

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@901228 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.rmi.NotBoundException;
+import java.rmi.RemoteException;
+import javax.naming.NamingException;
-            Object parameter = parameters.get(REPOSITORY_URI);
+            URI uri;
-                URI uri = new URI(parameter.toString().trim());
-                String scheme = uri.getScheme();
-                if ("rmi".equalsIgnoreCase(scheme)) {
-                    return getRepository((RemoteRepository) Naming.lookup(
-                            uri.getSchemeSpecificPart()));
-                } else if ("jndi".equalsIgnoreCase(scheme)) {
-                    Hashtable environment = new Hashtable(parameters);
-                    environment.remove(REPOSITORY_URI);
-                    Object value = new InitialContext(environment).lookup(
-                            uri.getSchemeSpecificPart());
-                    if (value instanceof RemoteRepository) {
-                        return getRepository((RemoteRepository) value);
-                    } else {
-                        return null;
-                    }
-                } else {
-                    InputStream stream = uri.toURL().openStream();
-                    try {
-                        Object remote =
-                            new ObjectInputStream(stream).readObject();
-                        if (remote instanceof RemoteRepository) {
-                            return getRepository((RemoteRepository) remote);
-                        } else {
-                            return null;
-                        }
-                    } finally {
-                        stream.close();
-                    }
-                }
-            } catch (Exception e) {
+                uri = new URI(parameters.get(REPOSITORY_URI).toString().trim());
+            } catch (URISyntaxException e) {
+
+            String scheme = uri.getScheme();
+            if ("rmi".equalsIgnoreCase(scheme)) {
+                return getRmiRepository(uri.getSchemeSpecificPart());
+            } else if ("jndi".equalsIgnoreCase(scheme)) {
+                Hashtable environment = new Hashtable(parameters);
+                environment.remove(REPOSITORY_URI);
+                return getJndiRepository(
+                        uri.getSchemeSpecificPart(), environment);
+            } else {
+                try {
+                    return getUrlRepository(uri.toURL());
+                } catch (MalformedURLException e) {
+                    return null;
+                }
+            }
+    private Repository getUrlRepository(URL url) throws RepositoryException {
+        try {
+            InputStream stream = url.openStream();
+            try {
+                Object remote = new ObjectInputStream(stream).readObject();
+                if (remote instanceof RemoteRepository) {
+                    return getRepository((RemoteRepository) remote);
+                } else {
+                    throw new RepositoryException(
+                            "The resource at URL " + url
+                            + " is not a remote repository stub: "
+                            + remote);
+                }
+            } finally {
+                stream.close();
+            }
+        } catch (ClassNotFoundException e) {
+            throw new RepositoryException(
+                    "The resource at URL " + url
+                    + " requires a class that is not available", e);
+        } catch (IOException e) {
+            throw new RepositoryException(
+                    "Failed to read the resource at URL " + url, e);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private Repository getJndiRepository(String name, Hashtable environment)
+            throws RepositoryException {
+        try {
+            Object value = new InitialContext(environment).lookup(name);
+            if (value instanceof RemoteRepository) {
+                return getRepository((RemoteRepository) value);
+            } else {
+                throw new RepositoryException(
+                        "The JNDI resource " + name
+                        + " is not a remote repository stub: " + value);
+            }
+        } catch (NamingException e) {
+            throw new RepositoryException(
+                    "Failed to look up the JNDI resource " + name, e);
+        }
+    }
+
+    private Repository getRmiRepository(String name)
+            throws RepositoryException {
+        try {
+            Object value = Naming.lookup(name);
+            if (value instanceof RemoteRepository) {
+                return getRepository((RemoteRepository) value);
+            } else {
+                throw new RepositoryException(
+                        "The RMI resource " + name
+                        + " is not a remote repository stub: " + value);
+            }
+        } catch (NotBoundException e) {
+            throw new RepositoryException(
+                    "RMI resource " + name + " not found", e);
+        } catch (MalformedURLException e) {
+            throw new RepositoryException(
+                    "Invalid RMI name: " + name, e);
+        } catch (RemoteException e) {
+            throw new RepositoryException(
+                    "Failed to look up the RMI resource " + name, e);
+        }
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS43 INS8 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS43 INS42 INS42 INS54 INS42 INS45 INS42 INS43 INS42 INS43 INS42 INS42 INS54 INS42 INS43 INS42 INS42 INS54 INS42 MOV8 INS12 INS12 INS42 INS42 MOV8 INS12 INS42 INS8 INS12 INS12 INS12 MOV60 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS60 INS25 INS44 INS8 INS44 INS8 INS44 INS8 MOV43 MOV32 MOV8 INS25 INS43 INS42 INS53 INS43 INS42 INS53 INS8 INS43 INS42 INS53 MOV43 INS59 INS62 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 UPD42 INS21 MOV8 MOV32 INS8 INS8 INS32 INS42 INS14 INS42 INS14 INS53 INS42 INS14 INS42 INS32 INS42 INS43 INS41 INS53 INS42 INS14 INS42 INS14 INS42 INS14 INS7 UPD43 MOV32 MOV60 MOV21 INS41 INS54 INS42 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS42 INS14 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS43 INS27 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS42 INS14 UPD42 UPD42 INS32 INS8 INS12 INS53 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS27 INS42 INS45 INS42 INS42 INS11 INS43 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 MOV43 MOV32 INS42 MOV32 INS42 INS41 INS44 MOV8 INS14 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS42 INS45 INS42 INS45 INS42 MOV32 MOV32 INS43 INS42 INS43 INS27 INS42 MOV32 UPD42 INS42 INS42 INS45 INS42 INS45 INS42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL25 DEL25 DEL42 DEL42 DEL42 DEL43 DEL11 DEL32 DEL33 DEL41