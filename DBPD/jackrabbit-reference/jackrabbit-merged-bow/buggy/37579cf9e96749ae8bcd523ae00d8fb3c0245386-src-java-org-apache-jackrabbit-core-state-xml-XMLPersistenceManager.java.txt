JCR-54: Replaced JDOM with standard DOM (using the DOMWalker utility class) in XMLPersistenceManager.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160451 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.DOMWalker;
-import org.jdom.Element;
-import org.jdom.JDOMException;
-import org.jdom.filter.ContentFilter;
-import org.jdom.filter.Filter;
-import org.jdom.input.SAXBuilder;
-    private void readState(Element nodeElement, NodeState state)
+    private void readState(DOMWalker walker, NodeState state)
-        if (!nodeElement.getName().equals(NODE_ELEMENT)) {
-            String msg = "invalid serialization format (unexpected element: " + nodeElement.getName() + ")";
+        if (!walker.getName().equals(NODE_ELEMENT)) {
+            String msg = "invalid serialization format (unexpected element: " + walker.getName() + ")";
-        if (!state.getUUID().equals(nodeElement.getAttributeValue(UUID_ATTRIBUTE))) {
+        if (!state.getUUID().equals(walker.getAttribute(UUID_ATTRIBUTE))) {
-        String ntName = nodeElement.getAttributeValue(NODETYPE_ATTRIBUTE);
+        String ntName = walker.getAttribute(NODETYPE_ATTRIBUTE);
-        String parentUUID = nodeElement.getAttributeValue(PARENTUUID_ATTRIBUTE);
+        String parentUUID = walker.getAttribute(PARENTUUID_ATTRIBUTE);
-        String definitionId = nodeElement.getAttributeValue(DEFINITIONID_ATTRIBUTE);
+        String definitionId = walker.getAttribute(DEFINITIONID_ATTRIBUTE);
-        Iterator iter = nodeElement.getChild(PARENTS_ELEMENT).getChildren(PARENT_ELEMENT).iterator();
-        ArrayList parentUUIDs = new ArrayList();
-        while (iter.hasNext()) {
-            Element parentElement = (Element) iter.next();
-            parentUUIDs.add(parentElement.getAttributeValue(UUID_ATTRIBUTE));
-        }
-        if (parentUUIDs.size() > 0) {
-            state.setParentUUIDs(parentUUIDs);
+        if (walker.enterElement(PARENTS_ELEMENT)) {
+            ArrayList parentUUIDs = new ArrayList();
+            while (walker.iterateElements(PARENT_ELEMENT)) {
+                parentUUIDs.add(walker.getAttribute(UUID_ATTRIBUTE));
+            }
+            if (parentUUIDs.size() > 0) {
+                state.setParentUUIDs(parentUUIDs);
+            }
+            walker.leaveElement();
-        Element mixinsElement = nodeElement.getChild(MIXINTYPES_ELEMENT);
-        if (mixinsElement != null) {
-            iter = mixinsElement.getChildren(MIXINTYPE_ELEMENT).iterator();
+        if (walker.enterElement(MIXINTYPES_ELEMENT)) {
-            while (iter.hasNext()) {
-                Element mixinElement = (Element) iter.next();
-                mixins.add(QName.valueOf(mixinElement.getAttributeValue(NAME_ATTRIBUTE)));
+            while (walker.iterateElements(MIXINTYPE_ELEMENT)) {
+                mixins.add(QName.valueOf(walker.getAttribute(NAME_ATTRIBUTE)));
+            walker.leaveElement();
-        iter = nodeElement.getChild(PROPERTIES_ELEMENT).getChildren(PROPERTY_ELEMENT).iterator();
-        while (iter.hasNext()) {
-            Element propElement = (Element) iter.next();
-            String propName = propElement.getAttributeValue(NAME_ATTRIBUTE);
-            // @todo deserialize type and values
-            state.addPropertyEntry(QName.valueOf(propName));
+        if (walker.enterElement(PROPERTIES_ELEMENT)) {
+            while (walker.iterateElements(PROPERTY_ELEMENT)) {
+                String propName = walker.getAttribute(NAME_ATTRIBUTE);
+                // @todo deserialize type and values
+                state.addPropertyEntry(QName.valueOf(propName));
+            }
+            walker.leaveElement();
-        iter = nodeElement.getChild(NODES_ELEMENT).getChildren(NODE_ELEMENT).iterator();
-        while (iter.hasNext()) {
-            Element childNodeElement = (Element) iter.next();
-            String childName = childNodeElement.getAttributeValue(NAME_ATTRIBUTE);
-            String childUUID = childNodeElement.getAttributeValue(UUID_ATTRIBUTE);
-            state.addChildNodeEntry(QName.valueOf(childName), childUUID);
+        if (walker.enterElement(NODES_ELEMENT)) {
+            while (walker.iterateElements(NODE_ELEMENT)) {
+                String childName = walker.getAttribute(NAME_ATTRIBUTE);
+                String childUUID = walker.getAttribute(UUID_ATTRIBUTE);
+                state.addChildNodeEntry(QName.valueOf(childName), childUUID);
+            }
+            walker.leaveElement();
-    private void readState(Element propElement, PropertyState state)
+    private void readState(DOMWalker walker, PropertyState state)
-        if (!propElement.getName().equals(PROPERTY_ELEMENT)) {
-            String msg = "invalid serialization format (unexpected element: " + propElement.getName() + ")";
+        if (!walker.getName().equals(PROPERTY_ELEMENT)) {
+            String msg = "invalid serialization format (unexpected element: " + walker.getName() + ")";
-        if (!state.getName().equals(QName.valueOf(propElement.getAttributeValue(NAME_ATTRIBUTE)))) {
+        if (!state.getName().equals(QName.valueOf(walker.getAttribute(NAME_ATTRIBUTE)))) {
-        String parentUUID = propElement.getAttributeValue(PARENTUUID_ATTRIBUTE);
+        String parentUUID = walker.getAttribute(PARENTUUID_ATTRIBUTE);
-        String typeName = propElement.getAttributeValue(TYPE_ATTRIBUTE);
+        String typeName = walker.getAttribute(TYPE_ATTRIBUTE);
-        String multiValued = propElement.getAttributeValue(MULTIVALUED_ATTRIBUTE);
+        String multiValued = walker.getAttribute(MULTIVALUED_ATTRIBUTE);
-        String definitionId = propElement.getAttributeValue(DEFINITIONID_ATTRIBUTE);
+        String definitionId = walker.getAttribute(DEFINITIONID_ATTRIBUTE);
-        Iterator iter = propElement.getChild(VALUES_ELEMENT).getChildren(VALUE_ELEMENT).iterator();
-        while (iter.hasNext()) {
-            Element valueElement = (Element) iter.next();
-            Filter filter = new ContentFilter(ContentFilter.TEXT | ContentFilter.CDATA);
-            List content = valueElement.getContent(filter);
-
-            InternalValue val;
-            if (!content.isEmpty()) {
+        if (walker.enterElement(VALUES_ELEMENT)) {
+            while (walker.iterateElements(VALUE_ELEMENT)) {
-                String text = valueElement.getText();
-                if (type == PropertyType.BINARY) {
-                    // special handling required for binary value:
-                    // the value stores the path to the actual binary file in the blob store
-                    try {
-                        val = InternalValue.create(new FileSystemResource(blobStore, text));
-                    } catch (IOException ioe) {
-                        String msg = "error while reading serialized binary value";
-                        log.debug(msg);
-                        throw new ItemStateException(msg, ioe);
+                String content = walker.getContent();
+                InternalValue val;
+                if (content.length() > 0) {
+                    if (type == PropertyType.BINARY) {
+                        // special handling required for binary value:
+                        // the value stores the path to the actual binary file in the blob store
+                        try {
+                            values.add(InternalValue.create(new FileSystemResource(blobStore, content)));
+                        } catch (IOException ioe) {
+                            String msg = "error while reading serialized binary value";
+                            log.debug(msg);
+                            throw new ItemStateException(msg, ioe);
+                        }
+                    } else {
+                        values.add(InternalValue.valueOf(content, type));
-                } else {
-                    val = InternalValue.valueOf(text, type);
-                values.add(val);
-            } else {
-                continue;
+            walker.leaveElement();
-        state.setValues((InternalValue[]) values.toArray(new InternalValue[values.size()]));
+        state.setValues((InternalValue[])
+                values.toArray(new InternalValue[values.size()]));
-    private void readState(Element refsElement, NodeReferences refs)
+    private void readState(DOMWalker walker, NodeReferences refs)
-        if (!refsElement.getName().equals(NODEREFERENCES_ELEMENT)) {
-            String msg = "invalid serialization format (unexpected element: " + refsElement.getName() + ")";
+        if (!walker.getName().equals(NODEREFERENCES_ELEMENT)) {
+            String msg = "invalid serialization format (unexpected element: " + walker.getName() + ")";
-        if (!refs.getTargetId().equals(NodeReferencesId.valueOf(refsElement.getAttributeValue(TARGETID_ATTRIBUTE)))) {
+        if (!refs.getTargetId().equals(NodeReferencesId.valueOf(walker.getAttribute(TARGETID_ATTRIBUTE)))) {
-        Iterator iter = refsElement.getChildren(NODEREFERENCE_ELEMENT).iterator();
-        while (iter.hasNext()) {
-            Element elem = (Element) iter.next();
-            refs.addReference(PropertyId.valueOf(elem.getAttributeValue(PROPERTYID_ATTRIBUTE)));
+        while (walker.iterateElements(NODEREFERENCE_ELEMENT)) {
+            refs.addReference(PropertyId.valueOf(walker.getAttribute(PROPERTYID_ATTRIBUTE)));
-                SAXBuilder builder = new SAXBuilder();
-                Element rootElement = builder.build(in).getRootElement();
-                String ntName = rootElement.getAttributeValue(NODETYPE_ATTRIBUTE);
+                DOMWalker walker = new DOMWalker(in);
+                String ntName = walker.getAttribute(NODETYPE_ATTRIBUTE);
-                readState(rootElement, state);
+                readState(walker, state);
-        } catch (JDOMException jde) {
-            e = jde;
-            // fall through
-                SAXBuilder builder = new SAXBuilder();
-                Element rootElement = builder.build(in).getRootElement();
-
+                DOMWalker walker = new DOMWalker(in);
-                readState(rootElement, state);
+                readState(walker, state);
-        } catch (JDOMException jde) {
-            e = jde;
-            // fall through
-                SAXBuilder builder = new SAXBuilder();
-                Element rootElement = builder.build(in).getRootElement();
-
+                DOMWalker walker = new DOMWalker(in);
-                readState(rootElement, refs);
+                readState(walker, refs);
-        } catch (JDOMException jde) {
-            e = jde;
-            // fall through

MOV26 UPD40 UPD43 UPD42 INS25 INS25 INS25 INS25 UPD43 UPD42 INS25 UPD43 UPD42 INS61 UPD42 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 UPD42 MOV43 MOV43 MOV43 MOV43 INS32 INS8 UPD42 INS32 MOV8 UPD42 MOV42 UPD42 MOV42 MOV42 MOV60 MOV61 MOV25 INS21 UPD42 MOV42 UPD42 MOV42 MOV42 MOV60 INS61 MOV25 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV61 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV61 INS21 UPD42 MOV42 UPD42 MOV42 MOV42 MOV61 INS21 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS32 MOV8 INS32 INS32 INS32 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 MOV43 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS60 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS60 INS42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV43 MOV59 MOV43 MOV59 MOV43 UPD42 UPD42 MOV43 INS27 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS34 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD43 INS42 UPD42 UPD42 UPD43 INS42 UPD43 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS32 INS32 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL60 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL61 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL40 DEL27 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL7 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL32 DEL21 DEL18 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12