JCR-2408: Mixin removal exception

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@884535 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+import java.util.HashMap;
+import org.apache.jackrabbit.core.state.NoSuchItemStateException;
-
-        // modify the state of this node
-        thisState.setMixinTypeNames(remainingMixins);
-        // set jcr:mixinTypes property
-        setMixinTypesProperty(remainingMixins);
-
-        // shortcut
-        if (mixin.getChildNodeDefinitions().length == 0
-                && mixin.getPropertyDefinitions().length == 0) {
-            // the node type has neither property nor child node definitions,
-            // i.e. we're done
-            return;
-        }
-
-        // walk through properties and child nodes and remove those that aren't
-        // accomodated by the resulting new effective node type (see JCR-2130)
-        boolean success = false;
+        // collect information about properties and nodes which require
+        // further action as a result of the mixin removal;
+        // we need to do this *before* actually changing the assigned the mixin types,
+        // otherwise we wouldn't be able to retrieve the current definition
+        // of an item.
+        Map<PropertyId, PropertyDefinition> affectedProps = new HashMap<PropertyId, PropertyDefinition>();
+        Map<ChildNodeEntry, NodeDefinition> affectedNodes = new HashMap<ChildNodeEntry, NodeDefinition>();
-            // use temp set to avoid ConcurrentModificationException
-            HashSet<Name> set = new HashSet<Name>(thisState.getPropertyNames());
-            for (Name propName : set) {
-                PropertyState propState = (PropertyState) stateMgr.getItemState(new PropertyId(thisState.getNodeId(), propName));
+            Set<Name> names = thisState.getPropertyNames();
+            for (Name propName : names) {
+                PropertyId propId = new PropertyId(thisState.getNodeId(), propName);
+                PropertyState propState = (PropertyState) stateMgr.getItemState(propId);
+                PropertyDefinition oldDef = itemMgr.getDefinition(propState);
-                PropertyDefinition def = itemMgr.getDefinition(propState);
-                NodeTypeImpl declaringNT = (NodeTypeImpl) def.getDeclaringNodeType();
+                NodeTypeImpl declaringNT = (NodeTypeImpl) oldDef.getDeclaringNodeType();
-
-                    // try to find new applicable definition first and
-                    // redefine property if possible (JCR-2130)
-                    try {
-                        PropertyImpl prop = (PropertyImpl) itemMgr.getItem(propState.getId());
-                        if (prop.getDefinition().isProtected()) {
-                            // remove 'orphaned' protected properties immediately
-                            removeChildProperty(propName);
-                            continue;
-                        }
-                        PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
-                                propName, propState.getType(),
-                                propState.isMultiValued(), false);
-                        if (pdi.getRequiredType() != PropertyType.UNDEFINED
-                                && pdi.getRequiredType() != propState.getType()) {
-                            // value conversion required
-                            if (propState.isMultiValued()) {
-                                // convert value
-                                Value[] values =
-                                        ValueHelper.convert(
-                                                prop.getValues(),
-                                                pdi.getRequiredType(),
-                                                session.getValueFactory());
-                                // redefine property
-                                prop.onRedefine(pdi.unwrap());
-                                // set converted values
-                                prop.setValue(values);
-                            } else {
-                                // convert value
-                                Value value =
-                                        ValueHelper.convert(
-                                                prop.getValue(),
-                                                pdi.getRequiredType(),
-                                                session.getValueFactory());
-                                // redefine property
-                                prop.onRedefine(pdi.unwrap());
-                                // set converted values
-                                prop.setValue(value);
-                            }
-                        } else {
-                            // redefine property
-                            prop.onRedefine(pdi.unwrap());
-                        }
-                    } catch (ValueFormatException vfe) {
-                        // value conversion failed, remove it
-                        removeChildProperty(propName);
-                    } catch (ConstraintViolationException cve) {
-                        // no suitable definition found for this property,
-                        // remove it
-                        removeChildProperty(propName);
-                    }
+                    affectedProps.put(propId, oldDef);
-            // use temp array to avoid ConcurrentModificationException
-            ArrayList<ChildNodeEntry> list = new ArrayList<ChildNodeEntry>(thisState.getChildNodeEntries());
-            // start from tail to avoid problems with same-name siblings
-            for (int i = list.size() - 1; i >= 0; i--) {
-                ChildNodeEntry entry = list.get(i);
+
+            List<ChildNodeEntry> entries = thisState.getChildNodeEntries();
+            for (ChildNodeEntry entry : entries) {
-                NodeDefinition def = itemMgr.getDefinition(nodeState);
+                NodeDefinition oldDef = itemMgr.getDefinition(nodeState);
-                NodeTypeImpl declaringNT = (NodeTypeImpl) def.getDeclaringNodeType();
+                NodeTypeImpl declaringNT = (NodeTypeImpl) oldDef.getDeclaringNodeType();
+                    affectedNodes.put(entry, oldDef);
+                }
+            }
+        } catch (ItemStateException e) {
+            throw new RepositoryException("Internal Error: Failed to determine effect of removing mixin " + session.getJCRName(mixinName), e);
+        }
-                    try {
-                        NodeImpl node = (NodeImpl) itemMgr.getItem(nodeState.getId());
-                        if (node.getDefinition().isProtected()) {
-                            // remove 'orphaned' protected child node immediately
-                            removeChildNode(entry.getName(), entry.getIndex());
-                            continue;
+        // modify the state of this node
+        thisState.setMixinTypeNames(remainingMixins);
+        // set jcr:mixinTypes property
+        setMixinTypesProperty(remainingMixins);
+
+        // process affected nodes & properties:
+        // 1. try to redefine item based on the resulting
+        //    new effective node type (see JCR-2130)
+        // 2. remove item if 1. fails
+        boolean success = false;
+        try {
+            for (PropertyId id : affectedProps.keySet()) {
+                PropertyImpl prop = (PropertyImpl) itemMgr.getItem(id);
+                PropertyDefinition oldDef = affectedProps.get(id);
+
+                if (prop.getDefinition().isProtected()) {
+                    // remove 'orphaned' protected properties immediately
+                    removeChildProperty(id.getName());
+                    continue;
+                }
+                // try to find new applicable definition first and
+                // redefine property if possible (JCR-2130)
+                try {
+                    PropertyDefinitionImpl newDef = getApplicablePropertyDefinition(
+                            id.getName(), prop.getType(),
+                            oldDef.isMultiple(), false);
+                    if (newDef.getRequiredType() != PropertyType.UNDEFINED
+                            && newDef.getRequiredType() != prop.getType()) {
+                        // value conversion required
+                        if (oldDef.isMultiple()) {
+                            // convert value
+                            Value[] values =
+                                    ValueHelper.convert(
+                                            prop.getValues(),
+                                            newDef.getRequiredType(),
+                                            session.getValueFactory());
+                            // redefine property
+                            prop.onRedefine(newDef.unwrap());
+                            // set converted values
+                            prop.setValue(values);
+                        } else {
+                            // convert value
+                            Value value =
+                                    ValueHelper.convert(
+                                            prop.getValue(),
+                                            newDef.getRequiredType(),
+                                            session.getValueFactory());
+                            // redefine property
+                            prop.onRedefine(newDef.unwrap());
+                            // set converted values
+                            prop.setValue(value);
-                        NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
-                                entry.getName(),
-                                nodeState.getNodeTypeName());
-                        // redefine node
-                        node.onRedefine(ndi.unwrap());
-                    } catch (ConstraintViolationException cve) {
-                        // no suitable definition found for this child node,
-                        // remove it
-                        removeChildNode(entry.getName(), entry.getIndex());
+                    } else {
+                        // redefine property
+                        prop.onRedefine(newDef.unwrap());
+                } catch (ValueFormatException vfe) {
+                    // value conversion failed, remove it
+                    removeChildProperty(id.getName());
+                } catch (ConstraintViolationException cve) {
+                    // no suitable definition found for this property,
+                    // remove it
+                    removeChildProperty(id.getName());
+                }
+            }
+
+            for (ChildNodeEntry entry : affectedNodes.keySet()) {
+                NodeState nodeState = (NodeState) stateMgr.getItemState(entry.getId());
+                NodeImpl node = (NodeImpl) itemMgr.getItem(entry.getId());
+                NodeDefinition oldDef = affectedNodes.get(entry);
+
+                if (oldDef.isProtected()) {
+                    // remove 'orphaned' protected child node immediately
+                    removeChildNode(entry.getName(), entry.getIndex());
+                    continue;
+                }
+
+                // try to find new applicable definition first and
+                // redefine node if possible (JCR-2130)
+                try {
+                    NodeDefinitionImpl newDef = getApplicableChildNodeDefinition(
+                            entry.getName(),
+                            nodeState.getNodeTypeName());
+                    // redefine node
+                    node.onRedefine(newDef.unwrap());
+                } catch (ConstraintViolationException cve) {
+                    // no suitable definition found for this child node,
+                    // remove it
+                    removeChildNode(entry.getName(), entry.getIndex());
-            throw new RepositoryException("Failed to clean up child items defined by removed mixin " + session.getJCRName(mixinName));
+            throw new RepositoryException("Failed to clean up child items defined by removed mixin " + session.getJCRName(mixinName), e);
-                // TODO JCR-1914: revert changes made to jcr:mixinTypes
+                // TODO JCR-1914: revert any changes made so far

INS26 INS26 INS26 INS40 INS40 INS40 MOV8 MOV21 MOV60 MOV60 MOV21 MOV60 MOV25 MOV60 MOV60 MOV60 MOV21 MOV60 MOV54 MOV60 MOV25 MOV25 MOV60 INS60 MOV60 INS54 MOV21 MOV21 MOV60 INS54 INS74 INS59 INS74 INS59 INS8 INS12 MOV8 MOV12 MOV8 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 MOV60 INS70 MOV60 INS70 INS44 INS8 INS70 INS70 MOV21 INS42 INS42 INS42 INS74 INS42 MOV42 INS42 INS74 UPD74 MOV74 MOV44 INS42 INS8 UPD74 INS44 INS42 INS8 INS43 INS42 INS53 INS44 INS32 MOV8 INS44 INS32 INS8 MOV43 MOV42 INS53 INS43 INS43 INS43 INS43 MOV43 INS43 UPD43 UPD42 MOV32 MOV60 INS60 MOV60 MOV60 INS25 UPD43 UPD42 MOV32 INS43 INS42 MOV60 MOV60 INS60 INS25 UPD42 MOV42 INS14 INS43 INS42 INS42 INS42 INS60 INS60 INS25 MOV43 INS42 INS42 INS42 MOV60 INS60 INS60 MOV25 INS54 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 MOV43 MOV59 MOV43 MOV38 INS8 UPD42 INS42 UPD43 MOV43 INS59 MOV38 MOV8 INS43 INS27 INS42 INS42 MOV43 INS59 INS43 INS59 MOV32 INS8 INS42 MOV43 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS12 MOV43 MOV27 INS42 INS42 UPD42 MOV14 UPD42 UPD42 INS21 UPD42 UPD42 UPD42 INS42 INS11 INS42 INS45 INS32 INS42 INS11 INS42 INS42 INS32 INS21 INS18 UPD42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS21 MOV18 INS60 INS21 INS44 INS8 MOV43 MOV43 INS32 UPD43 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS32 INS42 INS42 INS42 INS32 MOV43 INS43 INS32 INS42 INS42 INS42 INS32 MOV43 INS59 INS32 INS43 INS42 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV32 INS42 INS42 INS42 INS32 INS42 MOV32 MOV32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL74 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL18 DEL8 DEL25 DEL42 DEL70 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL32 DEL42 DEL32 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL27 DEL41 DEL8 DEL25 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8