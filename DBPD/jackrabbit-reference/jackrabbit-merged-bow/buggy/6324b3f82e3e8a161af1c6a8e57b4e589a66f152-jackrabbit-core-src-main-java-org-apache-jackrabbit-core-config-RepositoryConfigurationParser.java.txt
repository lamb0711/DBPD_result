JCR-1438: Replace Config classes with factories

Replace JournalConfig with a JournalFactory.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816237 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.io.FileUtils;
+import org.apache.jackrabbit.core.cluster.ClusterNode;
+import org.apache.jackrabbit.core.journal.AbstractJournal;
+import org.apache.jackrabbit.core.journal.Journal;
+import org.apache.jackrabbit.core.journal.JournalException;
+import org.apache.jackrabbit.core.journal.JournalFactory;
+import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
+import java.io.IOException;
+import java.util.UUID;
+     * Name of the cluster node id file.
+     */
+    private static final String CLUSTER_NODE_ID_FILE = "cluster_node.id";
+
+    /**
-        ClusterConfig cc = parseClusterConfig(root);
+        ClusterConfig cc = parseClusterConfig(root, new File(home));
+     * @param home repository home directory
-    protected ClusterConfig parseClusterConfig(Element parent)
+    protected ClusterConfig parseClusterConfig(Element parent, File home)
-                String id = null;
-
+                // Find the cluster node id
+                String id =
+                    System.getProperty(ClusterNode.SYSTEM_PROPERTY_NODE_ID);
+                } else if (id == null) {
+                    File file = new File(home, CLUSTER_NODE_ID_FILE);
+                    try {
+                        if (file.exists() && file.canRead()) {
+                            id = FileUtils.readFileToString(file);
+                        } else {
+                            id = UUID.randomUUID().toString();
+                            FileUtils.writeStringToFile(file, id);
+                        }
+                    } catch (IOException e) {
+                        throw new ConfigurationException(
+                                "Failed to access cluster node id: " + file, e);
+                    }
-                value = getAttribute(element, SYNC_DELAY_ATTRIBUTE, DEFAULT_SYNC_DELAY);
-                long syncDelay = Long.parseLong(replaceVariables(value));
-                JournalConfig jc = parseJournalConfig(element);
-                return new ClusterConfig(id, syncDelay, jc);
+                long syncDelay = Long.parseLong(replaceVariables(getAttribute(
+                        element, SYNC_DELAY_ATTRIBUTE, DEFAULT_SYNC_DELAY)));
+
+                JournalFactory jf = getJournalFactory(element, home, id);
+                return new ClusterConfig(id, syncDelay, jf);
-     * @return journal configuration, or <code>null</code>
+     * @param home repository home directory
+     * @param id cluster node id
+     * @return journal factory
-    protected JournalConfig parseJournalConfig(Element cluster)
+    protected JournalFactory getJournalFactory(
+            final Element cluster, final File home, final String id)
-
-        return new JournalConfig(
-                parseBeanConfig(cluster, JOURNAL_ELEMENT));
+        return new JournalFactory() {
+            public Journal getJournal(NamespaceResolver resolver)
+                    throws RepositoryException {
+                BeanConfig config = parseBeanConfig(cluster, JOURNAL_ELEMENT);
+                Object object = config.newInstance();
+                if (object instanceof Journal) {
+                    Journal journal = (Journal) object;
+                    if (journal instanceof AbstractJournal) {
+                        ((AbstractJournal) journal).setRepositoryHome(home);
+                    }
+                    try {
+                        journal.init(id, resolver);
+                    } catch (JournalException e) {
+                        // TODO: Should JournalException extend RepositoryException?
+                        throw new RepositoryException(
+                                "Journal initialization failed: " + journal, e);
+                    }
+                    return journal;
+                } else {
+                    throw new RepositoryException(
+                            "Invalid Journal implementation class: "
+                            + config.getClassName());
+                }
+            }
+        };

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS29 INS83 INS83 INS83 INS43 INS59 INS44 UPD43 UPD42 INS44 INS44 INS65 INS42 INS42 INS45 INS65 INS43 INS42 INS65 INS65 UPD42 INS83 INS83 INS43 INS42 INS83 INS43 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS42 INS66 UPD66 INS42 INS42 INS43 INS1 INS14 INS42 INS31 INS43 INS42 INS25 INS83 INS43 INS42 INS44 INS43 INS8 INS42 MOV27 MOV8 INS25 UPD43 UPD42 MOV42 INS43 INS42 INS42 INS60 INS60 INS25 INS32 INS27 INS8 UPD42 UPD42 UPD42 INS42 INS43 INS59 INS43 INS59 INS62 INS8 INS8 INS42 INS42 INS40 INS42 INS33 INS60 INS54 UPD42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS43 INS60 INS25 INS54 INS41 INS53 INS43 INS59 INS8 INS12 MOV32 INS42 INS42 INS42 INS43 INS59 INS62 INS8 INS8 INS12 INS42 INS14 INS42 INS42 INS14 INS25 INS44 INS8 INS42 INS42 INS11 INS42 INS43 INS21 INS21 INS44 INS8 INS43 INS27 INS43 INS42 INS42 INS27 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS42 INS32 INS32 INS43 INS42 INS53 INS42 INS45 INS32 INS42 INS32 INS32 MOV21 INS21 INS21 INS42 INS14 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS43 INS27 INS42 INS11 INS43 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL33 DEL42 DEL25 DEL42 DEL43