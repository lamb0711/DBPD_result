JCR-2672 - Cache also failed principal lookups

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@964362 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.observation.SynchronousEventListener;
+import java.util.Properties;
- * content (user/group) represention.
+ * content (user/group) representation.
+ * <p/>
+ * Unless explicitly configured (see {@link #NEGATIVE_ENTRY_KEY negative entry
+ * option} this implementation of the <code>PrincipalProvider</code> interface
+ * caches both positive and negative (null) results of the {@link #providePrincipal}
+ * method. The cache is kept up to date by observation listening to creation
+ * and removal of users and groups.
+ * <p/>
+ * Membership cache:<br>
+ * In addition to the caching provided by <code>AbstractPrincipalProvider</code>
+ * this implementation keeps an extra membership cache, which is notified in
+ * case of changes made to the members of any group.
-public class DefaultPrincipalProvider extends AbstractPrincipalProvider implements EventListener {
+public class DefaultPrincipalProvider extends AbstractPrincipalProvider implements SynchronousEventListener {
-        String[] ntNames = new String[1];
+        String[] ntNames = new String[2];
+            ntNames[1] = resolver.getJCRName(UserManagerImpl.NT_REP_AUTHORIZABLE_FOLDER);
+            ntNames[1] = "rep:AuthorizableFolder";
+        String userPath = userManager.getUsersPath();
+        String targetPath = groupPath;
+        while (!Text.isDescendantOrEqual(targetPath, userPath)) {
+            targetPath = Text.getRelativeParent(targetPath, 1);
+        }
-                Event.NODE_REMOVED | Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED,
-                groupPath,
+                Event.NODE_ADDED | Event.NODE_REMOVED | Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED,
+                targetPath,
+    /**
+     * Sets the {@link #NEGATIVE_ENTRY_KEY} option value to <code>true</code> if
+     * it isn't included yet in the passed options, before calling the init
+     * method of the base class.
+     * 
+     * @param options
+     */
+    @Override
+    public void init(Properties options) {
+        if (!options.containsKey(NEGATIVE_ENTRY_KEY)) {
+            options.put(NEGATIVE_ENTRY_KEY, "true");
+        }
+        super.init(options);
+    }
+

INS26 INS26 INS40 INS40 UPD43 INS31 UPD42 INS29 INS78 INS83 INS39 INS42 INS44 INS8 UPD66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS60 INS60 INS61 INS65 INS65 INS42 INS43 INS42 INS25 INS21 INS67 INS66 INS66 INS67 MOV5 INS43 INS59 INS43 INS59 INS38 INS8 INS66 INS65 INS66 INS66 INS66 INS42 INS42 INS38 INS8 INS48 INS42 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS21 UPD42 INS67 INS32 INS21 INS42 INS42 MOV5 UPD34 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS40 INS42 INS42 INS42 INS42 INS32 INS2 INS32 INS2 INS45 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS40 INS42 INS34 INS42 INS42 INS42 INS34