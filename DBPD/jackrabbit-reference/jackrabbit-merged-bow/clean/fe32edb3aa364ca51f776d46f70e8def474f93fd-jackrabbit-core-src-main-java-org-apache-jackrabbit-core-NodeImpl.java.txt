JCR-1055: Incorrect node position after import

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@565399 13f79535-47bb-0310-9956-ffa450edef68

+    /**
+     * Replaces the child node with the specified <code>id</code>
+     * by a new child node with the same id and specified <code>nodeName</code>,
+     * <code>nodeTypeName</code> and <code>mixinNames</code>.
+     *
+     * @param id           id of the child node to be replaced
+     * @param nodeName     name of the new node
+     * @param nodeTypeName name of the new node's node type
+     * @param mixinNames   name of the new node's mixin types
+     *
+     * @return the new child node replacing the existing child
+     * @throws ItemNotFoundException
+     * @throws NoSuchNodeTypeException
+     * @throws VersionException
+     * @throws ConstraintViolationException
+     * @throws LockException
+     * @throws RepositoryException
+     */
+    public synchronized NodeImpl replaceChildNode(NodeId id, QName nodeName,
+                                                  QName nodeTypeName,
+                                                  QName[] mixinNames)
+            throws ItemNotFoundException, NoSuchNodeTypeException, VersionException,
+            ConstraintViolationException, LockException, RepositoryException {
+        // check state of this instance
+        sanityCheck();
+
+        Node existing = (Node) itemMgr.getItem(id);
+
+        // 'replace' is actually a 'remove existing/add new' operation;
+        // this unfortunately changes the order of this node's
+        // child node entries (JCR-1055);
+        // => backup list of child node entries beforehand in order
+        // to restore it afterwards
+        NodeState.ChildNodeEntry cneExisting = ((NodeState) state).getChildNodeEntry(id);
+        if (cneExisting == null) {
+            throw new ItemNotFoundException(safeGetJCRPath()
+                    + ": no child node entry with id " + id);
+        }
+        List cneList = new ArrayList(((NodeState) state).getChildNodeEntries());
+
+        // remove existing
+        existing.remove();
+
+        // create new child node
+        NodeImpl node = addNode(nodeName, nodeTypeName, id.getUUID());
+        if (mixinNames != null) {
+            for (int i = 0; i < mixinNames.length; i++) {
+                node.addMixin(mixinNames[i]);
+            }
+        }
+
+        // restore list of child node entries (JCR-1055)
+        if (cneExisting.getName().equals(nodeName)) {
+            // restore original child node list
+            ((NodeState) state).setChildNodeEntries(cneList);
+        } else {
+            // replace child node entry with different name
+            // but preserving original position
+            ((NodeState) state).removeAllChildNodeEntries();
+            for (Iterator iter = cneList.iterator(); iter.hasNext();) {
+                NodeState.ChildNodeEntry cne = (NodeState.ChildNodeEntry) iter.next();
+                if (cne.getId().equals(id)) {
+                    // replace entry with different name
+                    ((NodeState) state).addChildNodeEntry(nodeName, id);
+                } else {
+                    ((NodeState) state).addChildNodeEntry(cne.getName(), cne.getId());
+                }
+            }
+        }
+
+        return node;
+    }
+

INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS60 INS25 INS60 INS21 INS60 INS25 INS25 INS41 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS11 INS40 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS24 INS32 INS42 INS42 INS21 INS21 INS24 INS43 INS32 INS36 INS42 INS42 INS14 INS43 INS32 INS42 INS42 INS42 INS32 INS58 INS27 INS37 INS8 INS42 INS42 INS32 INS32 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS11 INS43 INS27 INS42 INS36 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS36 INS42 INS42 INS36 INS42 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS42 INS42 INS32 INS45 INS42 INS11 INS42 INS34 INS32 INS11 INS11 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS2 INS43 INS42 INS43 INS42 INS42 INS42 INS40 INS42 INS11 INS32 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS32 INS40 INS42 INS42 INS36 INS42 INS42 INS42 INS36 INS42 INS32 INS32 INS11 INS11 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42