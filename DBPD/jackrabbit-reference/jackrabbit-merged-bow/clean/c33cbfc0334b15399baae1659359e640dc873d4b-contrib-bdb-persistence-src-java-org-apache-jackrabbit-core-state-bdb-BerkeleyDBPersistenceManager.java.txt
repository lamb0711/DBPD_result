simplified and adapted bdb-persistence to latest modifications in core (r329224)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@329242 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.BufferedOutputStream;
-import java.io.File;
-import java.io.InputStream;
-import java.io.OutputStream;
-
+import com.sleepycat.je.Database;
+import com.sleepycat.je.DatabaseConfig;
+import com.sleepycat.je.DatabaseEntry;
+import com.sleepycat.je.Environment;
+import com.sleepycat.je.EnvironmentConfig;
+import com.sleepycat.je.LockMode;
+import com.sleepycat.je.OperationStatus;
+import com.sleepycat.je.Transaction;
-import org.apache.jackrabbit.core.fs.FileSystemPathUtil;
-import org.apache.jackrabbit.core.fs.FileSystemResource;
-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.core.state.util.BLOBStore;
+import org.apache.jackrabbit.core.state.util.FileSystemBLOBStore;
-import com.sleepycat.je.Database;
-import com.sleepycat.je.DatabaseConfig;
-import com.sleepycat.je.DatabaseEntry;
-import com.sleepycat.je.Environment;
-import com.sleepycat.je.EnvironmentConfig;
-import com.sleepycat.je.LockMode;
-import com.sleepycat.je.OperationStatus;
-import com.sleepycat.je.Transaction;
+import java.io.File;
-public class BerkeleyDBPersistenceManager extends AbstractPersistenceManager implements BLOBStore {
+public class BerkeleyDBPersistenceManager extends AbstractPersistenceManager {
+    // file system where BLOB data is stored
+    // BLOBStore that manages BLOB data in the file system
+    private BLOBStore blobStore;
+
-        if (!envDir.exists())
+        if (!envDir.exists()) {
+        }
-         * store blob's in local file system in a sub directory
+         * store BLOB data in local file system in a sub directory
+        blobStore = new FileSystemBLOBStore(blobFS);
-        // close blob store
+        // close BLOB file system
+        blobStore = null;
-            key.setData(id.toString().getBytes("UTF-8"));
+            key.setData(id.toString().getBytes(ENCODING));
-            if (operationStatus.equals(OperationStatus.NOTFOUND))
+            if (operationStatus.equals(OperationStatus.NOTFOUND)) {
+            }
-            PropertyStateTupleBinding tupleBinding = new PropertyStateTupleBinding(id, this);
-            key.setData(id.toString().getBytes("UTF-8"));
+            PropertyStateTupleBinding tupleBinding = new PropertyStateTupleBinding(id, blobStore);
+            key.setData(id.toString().getBytes(ENCODING));
-            if (operationStatus.equals(OperationStatus.NOTFOUND))
+            if (operationStatus.equals(OperationStatus.NOTFOUND)) {
+            }
-            key.setData((id.toString() + ".references").getBytes("UTF-8"));
+            key.setData((id.toString() + ".references").getBytes(ENCODING));
-            if (operationStatus.equals(OperationStatus.NOTFOUND))
+            if (operationStatus.equals(OperationStatus.NOTFOUND)) {
+            }
-            key.setData(id.toString().getBytes("UTF-8"));
+            key.setData(id.toString().getBytes(ENCODING));
-            key.setData(id.toString().getBytes("UTF-8"));
+            key.setData(id.toString().getBytes(ENCODING));
-            key.setData((targetId.toString() + ".references").getBytes("UTF-8"));
+            key.setData((targetId.toString() + ".references").getBytes(ENCODING));
-            key.setData(state.getId().toString().getBytes("UTF-8"));
+            key.setData(state.getId().toString().getBytes(ENCODING));
-            if (!operationStatus.equals(OperationStatus.SUCCESS))
+            if (!operationStatus.equals(OperationStatus.SUCCESS)) {
+            }
-            PropertyStateTupleBinding tupleBinding = new PropertyStateTupleBinding(this);
-            key.setData(state.getId().toString().getBytes("UTF-8"));
+            PropertyStateTupleBinding tupleBinding = new PropertyStateTupleBinding(blobStore);
+            key.setData(state.getId().toString().getBytes(ENCODING));
-            if (!operationStatus.equals(OperationStatus.SUCCESS))
+            if (!operationStatus.equals(OperationStatus.SUCCESS)) {
+            }
-            key.setData((refs.getTargetId().toString() + ".references").getBytes("UTF-8"));
+            key.setData((refs.getTargetId().toString() + ".references").getBytes(ENCODING));
-            if (!operationStatus.equals(OperationStatus.SUCCESS))
+            if (!operationStatus.equals(OperationStatus.SUCCESS)) {
+            }
-            key.setData(state.getId().toString().getBytes("UTF-8"));
+            key.setData(state.getId().toString().getBytes(ENCODING));
-            if (!operationStatus.equals(OperationStatus.SUCCESS))
+            if (!operationStatus.equals(OperationStatus.SUCCESS)) {
+            }
-            key.setData(state.getId().toString().getBytes("UTF-8"));
+            key.setData(state.getId().toString().getBytes(ENCODING));
-            if (!operationStatus.equals(OperationStatus.SUCCESS))
+            if (!operationStatus.equals(OperationStatus.SUCCESS)) {
+            }
-            key.setData((refs.getTargetId().toString() + ".references").getBytes("UTF-8"));
+            key.setData((refs.getTargetId().toString() + ".references").getBytes(ENCODING));
-            if (!operationStatus.equals(OperationStatus.SUCCESS))
+            if (!operationStatus.equals(OperationStatus.SUCCESS)) {
+            }
-
-    // blobs
-
-    public FileSystemResource get(String blobId) throws Exception {
-        return new FileSystemResource(blobFS, blobId);
-    }
-
-    public String put(PropertyId id, int index, InputStream in, long size) throws Exception {
-        String path = buildBlobFilePath(id.getParentUUID(), id.getName(), index);
-        OutputStream out = null;
-        FileSystemResource internalBlobFile = new FileSystemResource(blobFS, path);
-        internalBlobFile.makeParentDirs();
-        try {
-            out = new BufferedOutputStream(internalBlobFile.getOutputStream());
-            byte[] buffer = new byte[8192];
-            int read;
-            while ((read = in.read(buffer)) > 0) {
-                out.write(buffer, 0, read);
-            }
-        } finally {
-            out.close();
-        }
-        return path;
-    }
-
-    public boolean remove(String blobId) throws Exception {
-        FileSystemResource res = new FileSystemResource(blobFS, blobId);
-        if (!res.exists()) {
-            return false;
-        }
-        // delete resource and prune empty parent folders
-        res.delete(true);
-        return true;
-    }
-
-    private static String buildBlobFilePath(String parentUUID, QName propName, int it) {
-        StringBuffer sb = new StringBuffer();
-        char[] chars = parentUUID.toCharArray();
-        int cnt = 0;
-        for (int i = 0; i < chars.length; i++) {
-            if (chars[i] == '-') {
-                continue;
-            }
-            if (cnt == 2 || cnt == 4) {
-                sb.append(FileSystem.SEPARATOR_CHAR);
-            }
-            sb.append(chars[i]);
-            cnt++;
-        }
-        return sb.toString() + FileSystem.SEPARATOR + FileSystemPathUtil.escapeName(propName.toString()) + "." + it + ".bin";
-    }
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 INS23 INS83 MOV43 INS59 UPD42 MOV42 INS21 INS21 INS8 INS7 INS7 MOV21 INS42 INS14 INS42 INS33 INS43 INS42 INS8 MOV43 INS8 INS8 INS8 MOV43 INS8 INS8 INS8 INS8 INS8 INS42 MOV53 MOV53 MOV53 MOV53 MOV53 MOV53 MOV53 MOV53 MOV53 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL45 DEL52 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL52 DEL45 DEL45 DEL45 DEL45 DEL45 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL21 DEL9 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL13 DEL27 DEL18 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL45 DEL42 DEL45 DEL27 DEL41 DEL8 DEL31