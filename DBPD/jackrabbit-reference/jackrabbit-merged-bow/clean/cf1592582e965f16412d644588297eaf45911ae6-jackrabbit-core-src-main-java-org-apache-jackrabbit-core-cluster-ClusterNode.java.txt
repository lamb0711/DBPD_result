JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

- clustering support
- move definition & def-reader/writer to spi-commons

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1095338 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.privilege.PrivilegeDefinition;
-        ClusterRecordProcessor, WorkspaceEventChannel  {
+        ClusterRecordProcessor, WorkspaceEventChannel, PrivilegeEventChannel  {
+     * Privilege listener.
+     */
+    private PrivilegeEventListener privilegeListener;
+
+    /**
+    //----------------------------------------------< PrivilegeEventChannel >---
+    /**
+     * {@inheritDoc}
+     * @see PrivilegeEventChannel#registeredPrivileges(java.util.Collection)
+     */
+    public void registeredPrivileges(Collection<PrivilegeDefinition> definitions) {
+        if (status != STARTED) {
+            log.info("not started: nodetype operation ignored.");
+            return;
+        }
+        ClusterRecord record = null;
+        boolean succeeded = false;
+
+        try {
+            record = new PrivilegeRecord(definitions, producer.append());
+            record.write();
+            record.update();
+            setRevision(record.getRevision());
+            succeeded = true;
+        } catch (JournalException e) {
+            String msg = "Unable to create log entry: " + e.getMessage();
+            log.error(msg);
+        } catch (Throwable e) {
+            String msg = "Unexpected error while creating log entry.";
+            log.error(msg, e);
+        } finally {
+            if (!succeeded && record != null) {
+                record.cancelUpdate();
+            }
+        }
+    }
+
+    public void setListener(PrivilegeEventListener listener) {
+        privilegeListener = listener;
+    }
+
+    //--------------------------------------------------------------------------
+    public void process(PrivilegeRecord record) {
+        if (privilegeListener == null) {
+            String msg = "Privilege listener unavailable.";
+            log.error(msg);
+            return;
+        }
+        try {
+            privilegeListener.externalRegisteredPrivileges(record.getDefinitions());
+        } catch (RepositoryException e) {
+            String msg = "Unable to deliver privilege registration operation: " + e.getMessage();
+            log.error(msg);
+        }
+    }
+

INS26 INS40 INS43 INS23 INS31 INS31 INS31 INS42 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS42 INS65 INS65 INS74 INS42 INS25 INS60 INS60 INS54 INS43 INS42 INS21 INS43 INS42 INS25 INS54 INS66 INS65 INS68 INS43 INS43 INS27 INS8 INS43 INS59 INS39 INS59 INS8 INS12 INS12 INS8 INS42 INS7 INS42 INS27 INS8 INS8 INS12 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS33 INS42 INS9 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS25 INS42 INS42 INS42 INS33 INS60 INS21 INS41 INS21 INS44 INS8 INS43 INS32 INS7 INS32 INS32 INS32 INS7 INS43 INS42 INS60 INS21 INS43 INS42 INS60 INS21 INS27 INS8 INS43 INS59 INS32 INS32 INS43 INS42 INS60 INS21 INS40 INS42 INS42 INS45 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS38 INS27 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42