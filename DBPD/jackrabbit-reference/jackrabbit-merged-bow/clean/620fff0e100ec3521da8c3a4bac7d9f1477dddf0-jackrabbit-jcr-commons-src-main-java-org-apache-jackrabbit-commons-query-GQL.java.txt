JCR-1888: Add customizable filtering to GQL

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@722068 13f79535-47bb-0310-9956-ffa450edef68

+     * An optional filter that may include/exclude result rows.
+     */
+    private final Filter filter;
+
+    /**
+     * @param filter an optional filter that may include/exclude result rows.
-    private GQL(String statement, Session session, String commonPathPrefix) {
+    private GQL(String statement, Session session,
+                String commonPathPrefix, Filter filter) {
+        this.filter = filter;
-        GQL query = new GQL(statement, session, commonPathPrefix);
+        return execute(statement, session, commonPathPrefix, null);
+    }
+
+    /**
+     * Executes the GQL query and returns the result as a row iterator.
+     *
+     * @param statement the GQL query.
+     * @param session the session that will execute the query.
+     * @param commonPathPrefix a common path prefix for the GQL query.
+     * @param filter an optional filter that may include/exclude result rows.
+     * @return the result.
+     */
+    public static RowIterator execute(String statement,
+                                      Session session,
+                                      String commonPathPrefix,
+                                      Filter filter) {
+        GQL query = new GQL(statement, session, commonPathPrefix, filter);
+     * Defines a filter for query result rows.
+     */
+    public interface Filter {
+
+        /**
+         * Returns <code>true</code> if the given <code>row</code> should be
+         * included in the result.
+         *
+         * @param row the row to check.
+         * @return <code>true</code> if the row should be included,
+         *         <code>false</code> otherwise.
+         * @throws RepositoryException if an error occurs while reading from the
+         *                             repository.
+         */
+        public boolean include(Row row) throws RepositoryException;
+    }
+
+    //-----------------------------< internal >---------------------------------
+
+    /**
+            if (filter != null) {
+                nodes = new FilteredRowIterator(nodes);
+            }
+
+    /**
+     * A row iterator that applies a {@link GQL#filter} on the underlying rows.
+     */
+    private final class FilteredRowIterator implements RowIterator {
+
+        /**
+         * The underlying rows.
+         */
+        private final RowIterator rows;
+
+        /**
+         * The next row to return or <code>null</code> if there is none.
+         */
+        private Row next;
+
+        /**
+         * The current position.
+         */
+        private long position = 0;
+
+        /**
+         * Filters the given <code>rows</code>.
+         *
+         * @param rows the rows to filter.
+         */
+        public FilteredRowIterator(RowIterator rows) {
+            this.rows = rows;
+            fetchNext();
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public void skip(long skipNum) {
+            while (skipNum-- > 0 && hasNext()) {
+                nextRow();
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public long getSize() {
+            return -1;
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public long getPosition() {
+            return position;
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public Object next() {
+            return nextRow();
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public Row nextRow() {
+            if (next == null) {
+                throw new NoSuchElementException();
+            } else {
+                try {
+                    return next;
+                } finally {
+                    position++;
+                    fetchNext();
+                }
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public boolean hasNext() {
+            return next != null;
+        }
+
+        /**
+         * Fetches the next {@link Row}.
+         */
+        private void fetchNext() {
+            next = null;
+            while (next == null && rows.hasNext()) {
+                Row r = rows.nextRow();
+                try {
+                    if (filter.include(r)) {
+                        next = r;
+                        return;
+                    }
+                } catch (RepositoryException e) {
+                    // ignore
+                }
+            }
+        }
+    }
+

INS23 INS31 INS55 INS55 INS29 INS83 INS83 INS43 INS59 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 MOV8 INS29 INS83 INS42 INS31 INS29 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS42 INS42 INS65 INS43 INS42 INS21 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS65 INS29 INS83 INS39 INS42 INS44 INS43 INS65 INS42 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS66 INS42 INS66 INS42 INS7 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 MOV43 INS66 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS66 INS65 INS66 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS34 INS65 INS65 INS43 INS42 INS21 INS21 INS65 INS39 INS42 INS61 INS65 INS41 INS65 INS41 INS65 INS42 INS41 INS65 INS53 INS65 INS42 INS25 INS65 INS41 INS65 INS21 INS61 INS22 INS42 INS42 INS42 INS42 INS42 INS33 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS25 INS67 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS7 INS32 INS65 INS27 INS8 INS65 INS38 INS65 INS42 INS65 INS32 INS65 INS14 INS65 INS27 INS8 INS8 INS65 INS27 INS66 INS65 INS66 INS7 INS27 INS8 INS52 INS42 MOV43 INS42 INS27 INS8 INS42 INS42 INS22 INS42 INS42 INS27 INS32 INS21 INS34 INS42 INS43 INS42 INS33 INS53 INS54 INS42 INS33 INS42 INS42 INS33 INS27 INS32 INS60 INS54 INS42 INS33 INS21 INS52 INS42 INS37 INS34 INS42 INS32 INS42 INS14 INS8 INS8 INS42 INS33 INS42 INS42 INS43 INS59 INS8 INS12 INS7 INS42 INS42 INS43 INS41 INS21 INS21 INS42 INS42 INS32 INS25 INS44 INS8 INS42 INS14 INS42 INS42 INS37 INS32 INS42 INS42 INS32 INS8 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS7 INS42 INS42