- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.jackrabbit.core.IllegalNameException;
-import org.apache.jackrabbit.core.IllegalNameException;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.54 $, $Date: 2004/08/27 15:48:20 $
-	this.nsResolver = nsResolver;
-	this.ntReg = ntReg;
-	this.ntReg.addListener(this);
+        this.nsResolver = nsResolver;
+        this.ntReg = ntReg;
+        this.ntReg.addListener(this);
-	// setup item cache with soft references to node type instances
-	ntCache = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
+        // setup item cache with soft references to node type instances
+        ntCache = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
-	rootNodeDef = new RootNodeDefinition(ntReg.getRootNodeDef(), this, nsResolver);
+        rootNodeDef = new RootNodeDefinition(ntReg.getRootNodeDef(), this, nsResolver);
-	return rootNodeDef;
+        return rootNodeDef;
-	ChildNodeDef cnd = ntReg.getNodeDef(id);
-	if (cnd == null) {
-	    return null;
-	}
-	return new NodeDefImpl(cnd, this, nsResolver);
+        ChildNodeDef cnd = ntReg.getNodeDef(id);
+        if (cnd == null) {
+            return null;
+        }
+        return new NodeDefImpl(cnd, this, nsResolver);
-	PropDef pd = ntReg.getPropDef(id);
-	if (pd == null) {
-	    return null;
-	}
-	return new PropertyDefImpl(pd, this, nsResolver);
+        PropDef pd = ntReg.getPropDef(id);
+        if (pd == null) {
+            return null;
+        }
+        return new PropertyDefImpl(pd, this, nsResolver);
-	NodeTypeImpl nt = (NodeTypeImpl) ntCache.get(name);
-	if (nt != null) {
-	    return nt;
-	}
+        NodeTypeImpl nt = (NodeTypeImpl) ntCache.get(name);
+        if (nt != null) {
+            return nt;
+        }
-	EffectiveNodeType ent = ntReg.getEffectiveNodeType(name);
-	NodeTypeDef def = ntReg.getNodeTypeDef(name);
-	nt = new NodeTypeImpl(ent, def, this, nsResolver);
-	ntCache.put(name, nt);
+        EffectiveNodeType ent = ntReg.getEffectiveNodeType(name);
+        NodeTypeDef def = ntReg.getNodeTypeDef(name);
+        nt = new NodeTypeImpl(ent, def, this, nsResolver);
+        ntCache.put(name, nt);
-	return nt;
+        return nt;
-	return ntReg;
+        return ntReg;
-	// ignore
+        // ignore
-	// sync cache
-	ntCache.remove(ntName);
+        // sync cache
+        ntCache.remove(ntName);
-	QName[] ntNames = ntReg.getRegisteredNodeTypes();
-	ArrayList list = new ArrayList(ntNames.length);
-	for (int i = 0; i < ntNames.length; i++) {
-	    list.add(getNodeType(ntNames[i]));
-	}
-	return new IteratorHelper(Collections.unmodifiableCollection(list));
+        QName[] ntNames = ntReg.getRegisteredNodeTypes();
+        ArrayList list = new ArrayList(ntNames.length);
+        for (int i = 0; i < ntNames.length; i++) {
+            list.add(getNodeType(ntNames[i]));
+        }
+        return new IteratorHelper(Collections.unmodifiableCollection(list));
-	QName[] ntNames = ntReg.getRegisteredNodeTypes();
-	ArrayList list = new ArrayList(ntNames.length);
-	for (int i = 0; i < ntNames.length; i++) {
-	    NodeType nt = getNodeType(ntNames[i]);
-	    if (!nt.isMixin()) {
-		list.add(nt);
-	    }
-	}
-	return new IteratorHelper(Collections.unmodifiableCollection(list));
+        QName[] ntNames = ntReg.getRegisteredNodeTypes();
+        ArrayList list = new ArrayList(ntNames.length);
+        for (int i = 0; i < ntNames.length; i++) {
+            NodeType nt = getNodeType(ntNames[i]);
+            if (!nt.isMixin()) {
+                list.add(nt);
+            }
+        }
+        return new IteratorHelper(Collections.unmodifiableCollection(list));
-	QName[] ntNames = ntReg.getRegisteredNodeTypes();
-	ArrayList list = new ArrayList(ntNames.length);
-	for (int i = 0; i < ntNames.length; i++) {
-	    NodeType nt = getNodeType(ntNames[i]);
-	    if (nt.isMixin()) {
-		list.add(nt);
-	    }
-	}
-	return new IteratorHelper(Collections.unmodifiableCollection(list));
+        QName[] ntNames = ntReg.getRegisteredNodeTypes();
+        ArrayList list = new ArrayList(ntNames.length);
+        for (int i = 0; i < ntNames.length; i++) {
+            NodeType nt = getNodeType(ntNames[i]);
+            if (nt.isMixin()) {
+                list.add(nt);
+            }
+        }
+        return new IteratorHelper(Collections.unmodifiableCollection(list));
-	try {
-	    return getNodeType(QName.fromJCRName(nodeTypeName, nsResolver));
-	} catch (UnknownPrefixException upe) {
-	    throw new NoSuchNodeTypeException(nodeTypeName, upe);
-	} catch (IllegalNameException ine) {
-	    throw new NoSuchNodeTypeException(nodeTypeName, ine);
-	}
+        try {
+            return getNodeType(QName.fromJCRName(nodeTypeName, nsResolver));
+        } catch (UnknownPrefixException upe) {
+            throw new NoSuchNodeTypeException(nodeTypeName, upe);
+        } catch (IllegalNameException ine) {
+            throw new NoSuchNodeTypeException(nodeTypeName, ine);
+        }
-	ps.println("NodeTypeManager (" + this + ")");
-	ps.println();
-	ntReg.dump(ps);
+        ps.println("NodeTypeManager (" + this + ")");
+        ps.println();
+        ntReg.dump(ps);
-	/**
-	 * Creates a new <code>RootNodeDefinition</code>.
-	 */
-	RootNodeDefinition(ChildNodeDef def, NodeTypeManagerImpl ntMgr, NamespaceResolver nsResolver) {
-	    super(def, ntMgr, nsResolver);
-	}
+        /**
+         * Creates a new <code>RootNodeDefinition</code>.
+         */
+        RootNodeDefinition(ChildNodeDef def, NodeTypeManagerImpl ntMgr, NamespaceResolver nsResolver) {
+            super(def, ntMgr, nsResolver);
+        }
-	/**
-	 * @see NodeDef#getName
-	 */
-	public String getName() {
-	    // not applicable
-	    return "";
-	}
+        /**
+         * @see NodeDef#getName
+         */
+        public String getName() {
+            // not applicable
+            return "";
+        }
-	/**
-	 * @see NodeDef#getDeclaringNodeType
-	 */
-	public NodeType getDeclaringNodeType() {
-	    // not applicable
-	    return null;
-	}
+        /**
+         * @see NodeDef#getDeclaringNodeType
+         */
+        public NodeType getDeclaringNodeType() {
+            // not applicable
+            return null;
+        }

MOV26 MOV26 DEL66 DEL65 DEL66 DEL65