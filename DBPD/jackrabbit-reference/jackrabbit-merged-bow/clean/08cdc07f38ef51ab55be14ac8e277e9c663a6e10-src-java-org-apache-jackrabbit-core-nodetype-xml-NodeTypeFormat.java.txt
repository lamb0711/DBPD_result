Removed JDOM dependency from nodetype XML handling (JCR-54)
 - converted all JDOM references to the equivalent standard DOM code
 - Moved the rest of XML references out of the NodeTypeDefStore class
 - Added the NodeTypeFormatter facade class
 - Made a number of small changes and restructurings to better match the DOM API
 - Added a mostly complete test case in src/test/o.a.j/core/nodetype/xml
   (the tests in .../test/api/nodetype are more concerned with the nodetype
   API than the XML handling)
 - Added a simple ValueConstraint.equals() method to simplify the test cases
   (fixes a problem in NodeTypeDef.equals())


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157940 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
-import org.jdom.Element;
+import org.w3c.dom.Element;
-public class NodeTypeFormat extends CommonFormat {
+class NodeTypeFormat extends CommonFormat {
-    /** Name of the node type definition element. */
-    public static final String NODETYPE_ELEMENT = "nodeType";
+    /** Name of the child node definition element. */
+    private static final String CHILDNODEDEF_ELEMENT = "childNodeDef";
+
+    /** Name of the property definition element. */
+    private static final String PROPERTYDEF_ELEMENT = "propertyDef";
-     * Creates a node type definition format object. This constructor
-     * is used internally by the public reader and writer constructors.
+     * Creates a node type definition format object.
-    private NodeTypeFormat(
+    protected NodeTypeFormat(
-     * Creates a node type definition reader. An empty node type definition
-     * instance is created. The instance properties are filled in by the
-     * {@link #read() read} method.
-     *
-     * @param resolver namespace resolver
-     * @param element node type definition element
-     */
-    public NodeTypeFormat(NamespaceResolver resolver, Element element) {
-        this(resolver, element, new NodeTypeDef());
-    }
-
-    /**
-     * Creates a node type definition writer. The node type definition
-     * element is instantiated as an empty <code>nodeType</code> element.
-     * The element is filled in by the {@link #write() write} method.
-     *
-     * @param resolver namespace resolver
-     * @param def node type definition
-     */
-    public NodeTypeFormat(NamespaceResolver resolver, NodeTypeDef def) {
-        this(resolver, new Element(NODETYPE_ELEMENT), def);
-    }
-
-    /**
-     * Returns the node type definition object.
-     *
-     * @return node type definition
-     */
-    public NodeTypeDef getNodeType() {
-        return def;
-    }
-
-    /**
-    public void read() throws InvalidNodeTypeDefException {
+    protected void read() throws InvalidNodeTypeDefException {
-    public void write() {
+    protected void write() {
-        Vector vector = new Vector();
-
-        Element types = getChild(SUPERTYPES_ELEMENT);
+        Collection types =
+            getGrandChildContents(SUPERTYPES_ELEMENT, SUPERTYPE_ELEMENT);
-            Iterator iterator = types.getChildren(SUPERTYPE_ELEMENT).iterator();
-            while (iterator.hasNext()) {
-                Element type = (Element) iterator.next();
-                vector.add(fromJCRName(type.getTextTrim()));
-            }
-        }
+            Vector vector = new Vector();
-        def.setSupertypes((QName[]) vector.toArray(new QName[0]));
+            Iterator iterator = types.iterator();
+            while (iterator.hasNext()) {
+                vector.add(fromJCRName((String) iterator.next()));
+            }
+
+            def.setSupertypes((QName[]) vector.toArray(new QName[0]));
+        }
-        if (values.length > 0) {
-            Element types = new Element(SUPERTYPES_ELEMENT);
+        if (values != null && values.length > 0) {
+            Vector types = new Vector();
-                Element type = new Element(SUPERTYPE_ELEMENT);
-                type.setText(toJCRName(values[i]));
-                types.addContent(type);
+                types.add(toJCRName(values[i]));
-            addChild(types);
+            setGrandChildContents(
+                    SUPERTYPES_ELEMENT, SUPERTYPE_ELEMENT, types);
-        Iterator iterator = getChildIterator(PropDefFormat.PROPERTYDEF_ELEMENT);
+        Iterator iterator = getChildElements(PROPERTYDEF_ELEMENT);
-            PropDefFormat format = new PropDefFormat(
-                    getNamespaceResolver(), (Element) iterator.next());
+            PropDef property = new PropDef();
+            Element element = (Element) iterator.next();
+            PropDefFormat format =
+                new PropDefFormat(getNamespaceResolver(), element, property);
-            vector.add(format.getPropDef());
+            vector.add(property);
+            PropDef property = defs[i];
+            Element element = newElement(PROPERTYDEF_ELEMENT);
-                new PropDefFormat(getNamespaceResolver(), defs[i]);
+                new PropDefFormat(getNamespaceResolver(), element, property);
-            addChild(format.getElement());
+            addChild(element);
-        Iterator iterator =
-            getChildIterator(NodeDefFormat.CHILDNODEDEF_ELEMENT);
+        Iterator iterator = getChildElements(CHILDNODEDEF_ELEMENT);
-            NodeDefFormat format = new NodeDefFormat(
-                    getNamespaceResolver(), (Element) iterator.next());
+            ChildNodeDef node = new ChildNodeDef();
+            Element element = (Element) iterator.next();
+            NodeDefFormat format =
+                new NodeDefFormat(getNamespaceResolver(), element, node);
-            vector.add(format.getNodeDef());
+            vector.add(node);
+            ChildNodeDef node = defs[i];
+            Element element = newElement(CHILDNODEDEF_ELEMENT);
-                new NodeDefFormat(getNamespaceResolver(), defs[i]);
+                new NodeDefFormat(getNamespaceResolver(), element, node);
-            addChild(format.getElement());
+            addChild(element);

INS26 INS40 UPD40 INS23 UPD83 INS29 INS83 INS83 INS83 INS43 INS59 UPD83 UPD83 UPD83 INS8 UPD42 UPD45 UPD65 MOV65 UPD42 MOV42 INS42 INS45 INS60 INS25 UPD66 UPD66 UPD66 INS43 INS59 MOV27 MOV8 INS27 INS42 INS42 INS32 MOV60 MOV61 INS27 MOV27 INS60 MOV60 INS60 INS60 MOV60 INS60 INS60 INS60 INS60 INS42 INS42 INS42 INS42 INS33 INS43 UPD42 INS42 INS43 INS59 MOV43 INS59 UPD43 MOV43 INS59 MOV43 UPD42 INS42 INS43 INS59 MOV43 MOV43 INS59 INS43 MOV43 INS59 MOV43 INS59 INS42 UPD42 INS42 INS42 INS42 INS42 INS14 MOV42 UPD42 INS42 INS14 UPD42 MOV42 UPD42 INS42 MOV2 INS42 INS32 UPD42 MOV42 INS42 INS42 INS14 UPD42 MOV11 INS42 INS14 UPD42 MOV42 INS42 UPD42 MOV2 INS42 INS32 INS42 INS14 UPD42 MOV42 MOV42 INS43 INS43 INS43 MOV32 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS43 MOV43 MOV32 INS42 INS42 INS42 INS42 MOV43 MOV32 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS11 INS43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 DEL83 DEL42 DEL66 DEL66 DEL66 DEL42 DEL68 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL14 DEL17 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL68 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL17 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL32 DEL40 DEL14 DEL42 DEL32 DEL14 DEL42 DEL32