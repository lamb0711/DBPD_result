work in progress

- version always protected
- versionHistory always protected
- fix Node.getReferences && reference properties
- mixinTypes are 'active' upon save only (and not before). therefore
  cleanup after removeMixin is done only after save.
  adding new states defined by a new mixin are only added after the
  node has been saved.
- nodestates identified by a uuid only were created a second time upon
  ChildNodeEntry.resolve => fix needs to be improved
- Events/ChangeLog are processed by the save-target state
- ChangeLog.persisted not used any more

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@467956 13f79535-47bb-0310-9956-ffa450edef68

-    private ItemStateLifeCycleListener listener;
+    private ItemStateCache cache;
+    private ItemStateCreationListener listener;
-    void setListener(ItemStateLifeCycleListener listener) {
-        this.listener = listener;
-    }
-        // get a notification when this item state is saved or invalidated
+
+        // notify listeners when this item state is saved or invalidated
+        nodeState.addListener(cache);
-        // notify listener that a node state has been created
-        listener.statusChanged(nodeState, Status.NEW);
+
+        // notify listeners that a node state has been created
+        cache.created(nodeState);
+        listener.created(nodeState);
+
-            definition, Status.NEW, idFactory, false);
+            definition, Status.NEW, this, idFactory, false);
+
+        propState.addListener(cache);
-        // notify listener that a property state has been created
-        listener.statusChanged(propState, Status.NEW);
+
+        // notify listeners that a property state has been created
+        cache.created(propState);
+        listener.created(propState);
+
+    /**
+     * @inheritDoc
+     * @see TransientItemStateFactory#setListener(ItemStateCreationListener)
+     */
+    public void setListener(ItemStateCreationListener listener) {
+        this.listener = listener;
+    }
+
-        NodeState nodeState = new NodeState(overlayedState, null,
-            Status.EXISTING, this, idFactory);
-        nodeState.addListener(listener);
+        NodeState nodeState = new NodeState(overlayedState, null, Status.EXISTING, this, idFactory);
+
+        nodeState.addListener(cache);
+        cache.created(nodeState);
-        // retrieve state to overlay
-        NodeState overlayedState = (NodeState) parent.getItemState(nodeId);
-        NodeState overlayedParent = overlayedState.getParent();
-        NodeState parentState = null;
-        if (overlayedParent != null) {
-            parentState = (NodeState) ism.getItemState(overlayedParent.getId());
+
+        NodeState nodeState = cache.getNodeState(nodeId);
+        if (nodeState == null) {
+            // retrieve state to overlay
+            NodeState overlayedState = (NodeState) parent.getItemState(nodeId);
+            NodeState overlayedParent = overlayedState.getParent();
+
+            NodeState parentState = null;
+            if (overlayedParent != null) {
+                parentState = (NodeState) ism.getItemState(overlayedParent.getId());
+            }
+
+            nodeState = new NodeState(overlayedState, parentState, Status.EXISTING, this, idFactory);
+            nodeState.addListener(cache);
+            cache.created(nodeState);
-        NodeState nodeState = new NodeState(overlayedState, parentState,
-            Status.EXISTING, this, idFactory);
-        nodeState.addListener(listener);
-        // retrieve state to overlay
-        NodeState overlayedState = (NodeState) parent.getItemState(nodeId);
-        NodeState nodeState = new NodeState(overlayedState, parentState,
-            Status.EXISTING, this, idFactory);
-        nodeState.addListener(listener);
+
+        NodeState nodeState = cache.getNodeState(nodeId);
+        if (nodeState == null) {
+            // retrieve state to overlay
+            NodeState overlayedState = (NodeState) parent.getItemState(nodeId);
+            nodeState = new NodeState(overlayedState, parentState, Status.EXISTING, this, idFactory);
+
+            nodeState.addListener(cache);
+            cache.created(nodeState);
+        }
-        // retrieve state to overlay
-        PropertyState overlayedState = (PropertyState) parent.getItemState(propertyId);
-        PropertyState propState = new PropertyState(overlayedState, parentState,
-            Status.EXISTING, idFactory);
-        propState.addListener(listener);
+
+        PropertyState propState = cache.getPropertyState(propertyId);
+        if (propState == null) {
+            // retrieve state to overlay
+            PropertyState overlayedState = (PropertyState) parent.getItemState(propertyId);
+            propState = new PropertyState(overlayedState, parentState, Status.EXISTING, this, idFactory);
+
+            propState.addListener(cache);
+            cache.created(propState);
+        }
+
+    /**
+     * @inheritDoc
+     * @see ItemStateFactory#setCache(ItemStateCache)
+     */
+    public void setCache(ItemStateCache cache) {
+        this.cache = cache;
+    }

MOV31 INS23 INS31 INS83 INS43 INS59 UPD43 INS29 INS83 INS8 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 UPD42 INS21 INS21 INS21 INS21 INS65 INS65 UPD43 INS21 INS60 INS25 MOV41 INS25 INS60 INS25 MOV41 INS65 INS65 INS43 INS42 INS21 INS32 INS32 INS32 INS32 INS68 UPD42 INS32 MOV43 INS59 INS27 MOV8 INS27 INS8 MOV43 INS59 INS27 INS8 INS68 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS69 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS32 INS42 INS33 MOV60 INS21 MOV21 INS21 INS42 INS32 INS42 INS33 MOV60 INS21 MOV21 INS21 INS42 INS42 INS69 INS22 INS42 INS52 INS43 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS7 INS32 INS43 INS52 INS42 INS42 INS42 MOV14 UPD42 INS42 INS42 INS42 INS42 MOV14 UPD42 INS42 INS42 INS42 INS42 INS14 UPD42 INS42 INS42 INS42 INS42 MOV43 MOV42 MOV42 MOV40 INS52 MOV42 DEL40 DEL40 DEL42 DEL59 DEL60 DEL42 DEL14 DEL59 DEL60 DEL8