JCR-3263 load in structural node information immediately for better performance and add option to load the complete node graph first before checking for consistency. performance is boosted dozens of times on large repositories when enabling this option but requires more memory

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1351240 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.apache.jackrabbit.core.persistence.util.NodeInfo;
+    protected String bundleSelectAllBundlesFromSQL;
+    protected String bundleSelectAllBundlesSQL;
+    public synchronized Map<NodeId, NodeInfo> getAllNodeInfos(NodeId bigger, int maxCount) throws ItemStateException {
+        ResultSet rs = null;
+        try {
+            String sql = bundleSelectAllBundlesSQL;
+            NodeId lowId = null;
+            Object[] keys = new Object[0];
+            if (bigger != null) {
+                sql = bundleSelectAllBundlesFromSQL;
+                lowId = bigger;
+                keys = getKey(bigger);
+            }
+            if (getStorageModel() == SM_LONGLONG_KEYS && maxCount > 0) {
+                // get some more rows, in case the first row is smaller
+                // only required for SM_LONGLONG_KEYS
+                // probability is very low to get get the wrong first key, < 1 : 2^64
+                // see also bundleSelectAllIdsFrom SQL statement
+                maxCount += 10;
+            }
+            rs = conHelper.exec(sql, keys, false, maxCount);
+            Map<NodeId, NodeInfo> result = new LinkedHashMap<NodeId, NodeInfo>(maxCount);
+            while ((maxCount == 0 || result.size() < maxCount) && rs.next()) {
+                NodeId current;
+                if (getStorageModel() == SM_BINARY_KEYS) {
+                    current = new NodeId(rs.getBytes(1));
+                } else {
+                    long high = rs.getLong(1);
+                    long low = rs.getLong(2);
+                    current = new NodeId(high, low);
+                }
+                if (getStorageModel() == SM_LONGLONG_KEYS && lowId != null) {
+                    // skip the keys that are smaller or equal (see above, maxCount += 10)
+                    if (current.compareTo(lowId) <= 0) {
+                        continue;
+                    }
+                }
+                NodePropBundle bundle = readBundle(current, rs, getStorageModel() == SM_LONGLONG_KEYS ? 3 : 2);
+                NodeInfo nodeInfo = new NodeInfo(bundle);
+                result.put(nodeInfo.getId(), nodeInfo);
+            }
+            return result;
+        } catch (SQLException e) {
+            String msg = "getAllNodeIds failed.";
+            log.error(msg, e);
+            throw new ItemStateException(msg, e);
+        } finally {
+            DbUtility.close(rs);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+            bundleSelectAllBundlesSQL = "select NODE_ID, BUNDLE_DATA from " + schemaObjectPrefix + "BUNDLE ORDER BY NODE_ID";
+            bundleSelectAllBundlesFromSQL = "select NODE_ID, BUNDLE_DATA from " + schemaObjectPrefix + "BUNDLE WHERE NODE_ID > ? ORDER BY NODE_ID";
+
+            bundleSelectAllBundlesSQL = "select NODE_ID_HI, NODE_ID_LO, BUNDLE_DATA from " + schemaObjectPrefix
+                    + "BUNDLE ORDER BY NODE_ID_HI, NODE_ID_LO";
+            // need to use HI and LO parameters
+            // this is not the exact statement, but not all databases support WHERE (NODE_ID_HI, NODE_ID_LOW) >= (?, ?)
+            bundleSelectAllBundlesFromSQL =
+                    "select NODE_ID_HI, NODE_ID_LO, BUNDLE_DATA from " + schemaObjectPrefix + "BUNDLE"
+                            + " WHERE (NODE_ID_HI >= ?) AND (? IS NOT NULL)"
+                            + " ORDER BY NODE_ID_HI, NODE_ID_LO";
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS42 INS42 INS65 INS43 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS60 INS54 INS65 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS33 INS60 INS60 INS60 INS25 INS25 INS21 INS60 INS61 INS41 INS44 INS8 INS21 INS21 INS21 INS21 INS21 INS43 INS59 INS43 INS59 INS5 INS59 INS27 INS8 INS27 INS8 INS7 INS74 INS59 INS27 INS8 INS42 INS43 INS42 INS60 INS21 INS53 INS32 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS85 INS42 INS3 INS42 INS33 INS21 INS21 INS21 INS27 INS27 INS21 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS36 INS32 INS60 INS25 INS25 INS60 INS60 INS21 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS5 INS34 INS7 INS7 INS7 INS32 INS42 INS42 INS34 INS7 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS74 INS42 INS27 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS45 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS43 INS43 INS43 INS27 INS27 INS42 INS42 INS32 INS42 INS21 INS60 INS60 INS21 INS27 INS27 INS25 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS7 INS39 INS59 INS39 INS59 INS7 INS32 INS42 INS42 INS33 INS27 INS8 INS42 INS42 INS42 INS16 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS32 INS34 INS18 INS27 INS34 INS34 INS42 INS43 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS42