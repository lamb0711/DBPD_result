Adding JCR-Name escaping (by jukka)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@415645 13f79535-47bb-0310-9956-ffa450edef68

+     * Escapes all illegal JCR name characters of a string.
+     * use {@link #unescapeIllegalJcrChars(String)} for decoding.
+     * <p/>
+     * QName EBNF:<br>
+     * <xmp>
+     * simplename ::= onecharsimplename | twocharsimplename | threeormorecharname
+     * onecharsimplename ::= (* Any Unicode character except: '.', '/', ':', '[', ']', '*', ''', '"', '|' or any whitespace character *)
+     * twocharsimplename ::= '.' onecharsimplename | onecharsimplename '.' | onecharsimplename onecharsimplename
+     * threeormorecharname ::= nonspace string nonspace
+     * string ::= char | string char
+     * char ::= nonspace | ' '
+     * nonspace ::= (* Any Unicode character except: '/', ':', '[', ']', '*', ''', '"', '|' or any whitespace character *)
+     * </xmp>
+     *
+     * @param name the name to escape
+     * @return the escaped name
+     */
+    public static String escapeIllegalJcrChars(String name) {
+        StringBuffer buffer = new StringBuffer(name.length() * 2);
+        for (int i = 0; i < name.length(); i++) {
+            char ch = name.charAt(i);
+            if (ch == '%' || ch == '/' || ch == ':' || ch == '[' || ch == ']'
+                || ch == '*' || ch == '\'' || ch == '"' || ch == '|'
+                || (ch == '.' && name.length() < 3)
+                || (ch == ' ' && (i == 0 || i == name.length() - 1))
+                || ch == '\t' || ch == '\r' || ch == '\n') {
+                buffer.append('%');
+                buffer.append(Character.toUpperCase(Character.forDigit(ch / 16, 16)));
+                buffer.append(Character.toUpperCase(Character.forDigit(ch % 16, 16)));
+            } else {
+                buffer.append(ch);
+            }
+        }
+        return buffer.toString();
+    }
+
+    /**
+     * Unescapes previously escaped jcr chars.
+     * <p/>
+     * Please note, that this does not exactly the same as the url related
+     * {@link #unescape(String)}, since it handles the byte-encoding
+     * differently.
+     *
+     * @param name the name to unescape
+     * @return the unescaped name
+     */
+    public static String unescapeIllegalJcrChars(String name) {
+        StringBuffer buffer = new StringBuffer(name.length());
+        int i = name.indexOf('%');
+        while (i > -1 && i + 2 < name.length()) {
+            buffer.append(name.toCharArray(), 0, i);
+            int a = Character.digit(name.charAt(i + 1), 16);
+            int b = Character.digit(name.charAt(i + 2), 16);
+            if (a > -1 && b > -1) {
+                buffer.append((char) a * 16 + b);
+                name = name.substring(i + 3);
+            } else {
+                buffer.append('%');
+                name = name.substring(i + 1);
+            }
+            i = name.indexOf('%');
+        }
+        buffer.append(name);
+        return buffer.toString();
+    }
+    
+    /**

INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS24 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS61 INS21 INS41 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS39 INS59 INS27 INS8 INS32 INS32 INS68 INS42 INS42 INS14 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS42 INS42 INS68 INS42 INS42 INS14 INS42 INS32 INS27 INS27 INS21 INS60 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS43 INS27 INS42 INS34 INS42 INS42 INS39 INS59 INS27 INS8 INS8 INS42 INS69 INS43 INS32 INS42 INS42 INS13 INS42 INS38 INS27 INS32 INS32 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS7 INS43 INS42 INS32 INS34 INS42 INS32 INS27 INS27 INS21 INS21 INS21 INS21 INS43 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS42 INS32 INS27 INS27 INS21 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS13 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS34 INS42 INS38 INS42 INS38 INS32 INS7 INS32 INS7 INS42 INS42 INS13 INS27 INS27 INS42 INS13 INS42 INS42 INS13 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS34 INS34 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS13 INS42 INS32 INS27 INS36 INS42 INS13 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS42 INS34 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS27 INS36 INS27 INS42 INS42 INS27 INS34 INS42 INS42 INS27 INS34 INS11 INS34 INS42 INS34 INS42 INS34 INS27 INS27 INS27 INS27 INS36 INS42 INS34 INS42 INS34 INS39 INS42 INS27 INS27 INS42 INS13 INS27 INS27 INS42 INS13 INS27 INS27 INS27 INS42 INS13 INS42 INS13 INS32 INS34 INS27 INS27 INS27 INS27 INS42 INS13 INS42 INS42 INS42 INS34 INS42 INS27 INS27 INS27 INS42 INS13 INS32 INS34 INS27 INS27 INS42 INS13 INS42 INS42 INS27 INS27 INS42 INS13 INS27 INS27 INS42 INS13 INS42 INS13 INS42 INS13