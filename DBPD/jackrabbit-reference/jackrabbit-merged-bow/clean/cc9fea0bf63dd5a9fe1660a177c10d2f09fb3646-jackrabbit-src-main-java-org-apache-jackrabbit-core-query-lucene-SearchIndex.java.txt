JCR-257: Use separate index for jcr:system tree

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@357961 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.QueryHandler;
+import org.apache.lucene.index.MultiReader;
+import java.util.HashSet;
+import java.util.Set;
+
+        Set excludedUUIDs = new HashSet();
+        if (context.getExcludedNodeUUID() != null) {
+            excludedUUIDs.add(context.getExcludedNodeUUID());
+        }
+
-                context.getItemStateManager(), context.getRootUUID());
+                context.getItemStateManager(), context.getRootUUID(), excludedUUIDs);
+        QueryHandler parentHandler = getContext().getParentHandler();
+        IndexReader parentReader = null;
+        if (parentHandler instanceof SearchIndex) {
+            parentReader = ((SearchIndex) parentHandler).index.getIndexReader();
+        }
+
+        if (parentReader != null) {
+            // todo FIXME not type safe
+            CachingMultiReader[] readers = {(CachingMultiReader) reader,
+                                            (CachingMultiReader) parentReader};
+            reader = new CombinedIndexReader(readers);
+        }
+
+    //----------------------------< internal >----------------------------------
+
+    /**
+     * Combines multiple {@link CachingMultiReader} into a <code>MultiReader</code>
+     * with {@link HierarchyResolver} support.
+     */
+    protected static final class CombinedIndexReader extends MultiReader implements HierarchyResolver {
+
+        /**
+         * The sub readers.
+         */
+        private CachingMultiReader[] subReaders;
+
+        /**
+         * Doc number starts for each sub reader
+         */
+        private int[] starts;
+
+        public CombinedIndexReader(CachingMultiReader[] indexReaders) throws IOException {
+            super(indexReaders);
+            this.subReaders = indexReaders;
+            this.starts = new int[subReaders.length + 1];
+
+            int maxDoc = 0;
+            for (int i = 0; i < subReaders.length; i++) {
+                starts[i] = maxDoc;
+                maxDoc += subReaders[i].maxDoc();
+            }
+            starts[subReaders.length] = maxDoc;
+        }
+
+        /**
+         * @inheritDoc
+         */
+        public int getParent(int n) throws IOException {
+            int i = readerIndex(n);
+            DocId id = subReaders[i].getParentDocId(n - starts[i]);
+            id = id.applyOffset(starts[i]);
+            return id.getDocumentNumber(this);
+        }
+
+        /**
+         * Returns the reader index for document <code>n</code>.
+         * Implementation copied from lucene MultiReader class.
+         *
+         * @param n document number.
+         * @return the reader index.
+         */
+        final private int readerIndex(int n) {
+            int lo = 0;                                      // search starts array
+            int hi = subReaders.length - 1;                  // for first element less
+
+            while (hi >= lo) {
+                int mid = (lo + hi) >> 1;
+                int midValue = starts[mid];
+                if (n < midValue) {
+                    hi = mid - 1;
+                } else if (n > midValue) {
+                    lo = mid + 1;
+                } else {                                      // found a match
+                    while (mid + 1 < subReaders.length && starts[mid + 1] == midValue) {
+                        mid++;                                  // scan to last match
+                    }
+                    return mid;
+                }
+            }
+            return hi;
+        }
+
+    }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS55 INS29 INS83 INS83 INS83 INS42 INS43 INS43 INS23 INS23 INS31 INS31 INS31 INS60 INS25 INS60 INS60 INS25 INS25 INS65 INS42 INS42 INS29 INS83 INS5 INS59 INS29 INS83 INS5 INS59 INS83 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS62 INS8 INS27 INS8 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS43 INS85 INS42 INS65 INS39 INS85 INS42 INS5 INS42 INS42 INS46 INS21 INS21 INS60 INS24 INS21 INS65 INS39 INS42 INS42 INS60 INS60 INS21 INS41 INS65 INS65 INS65 INS39 INS42 INS60 INS60 INS61 INS41 INS42 INS42 INS14 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS43 INS21 INS42 INS33 INS60 INS21 INS42 INS42 INS66 INS42 INS66 INS43 INS85 INS42 INS7 INS7 INS39 INS59 INS58 INS27 INS37 INS8 INS7 INS39 INS59 INS43 INS59 INS7 INS32 INS66 INS66 INS42 INS66 INS66 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS7 INS5 INS59 INS7 INS42 INS22 INS42 INS22 INS3 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS2 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS52 INS42 INS34 INS42 INS27 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS4 INS42 INS14 INS52 INS42 INS52 INS42 INS5 INS27 INS42 INS34 INS7 INS7 INS42 INS40 INS42 INS42 INS2 INS42 INS27 INS42 INS42 INS2 INS40 INS34 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS42 INS42 INS22 INS42 INS42 INS11 INS11 INS43 INS42 INS39 INS85 INS40 INS34 INS2 INS42 INS42 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS27 INS42 INS2 INS42 INS42 INS21 INS27 INS8 INS8 INS36 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS36 INS34 INS42 INS42 INS7 INS42 INS42 INS21 INS61 INS41 INS11 INS42 INS42 INS42 INS42 INS27 INS42 INS27 INS7 INS27 INS8 INS42 INS43 INS42 INS42 INS42 INS42 INS34 INS42 INS27 INS27 INS27 INS21 INS42 INS42 INS34 INS27 INS40 INS2 INS42 INS37 INS42 INS34 INS42 INS27 INS42 INS42 INS34