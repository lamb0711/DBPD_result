JCR-3005: Make it possible to get multiple nodes in one call via davex

Use :include parameters in a normal batch read request to signal a multi-read request.

Add a -DJCR-3005=true feature flag for enabling this functionality until finalized.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1181746 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.nodetype.NodeType;
- * <li><a href="#mread">Multi read</a></li>
+ * <!-- <li><a href="#mread">Multi read</a></li> -->
+ * <!--
- * in a single request. This is done by sending a GET or a POST request to
- * a workspace request and specifying the paths of the selected subtrees
- * as ":path" parameters of the request. The response is a JSON object
- * whose "nodes" property contains all the selected nodes keyed by
- * path. Missing nodes are not included in the response. Each included
- * node is serialized as defined above for <a href="#bread">batch read</a>.
- * The configured default subtree depth can be overridden by specifying the
- * optional ":depth" parameter.
+ * in a single request. This is done by adding one or more ":include"
+ * parameters to a batch read request describe above. These extra parameters
+ * specify the (relative) paths of all the nodes to be included in the
+ * response. The response is a JSON object whose "nodes" property contains
+ * all the selected nodes keyed by path. Missing nodes are not included in
+ * the response. Each included node is serialized as defined above for
+ * <a href="#bread">batch read</a>.
- * $ curl 'http://localhost:8080/server/default?:path=/node1&:path=/node2'
- * {"nodes":{"/node1":{...},"/node2":{...}}}
+ * $ curl 'http://.../parent.json?:path=child1&:path=child2'
+ * {"nodes":{"/parent/child1":{...},"/parent/child2":{...}}}
+ * -->
+    /** Temporary feature switch, remove when JCR-3005 is resolved. */
+    private static final boolean JCR_3005 = Boolean.getBoolean("JCR-3005");
+
-    private static final String PARAM_PATH = ":path";
-    private static final String PARAM_DEPTH = ":depth";
+    private static final String PARAM_INCLUDE = ":include";
-        if (doGetMultiple(webdavRequest, webdavResponse, davResource)) {
-            // request was handled by the multi-get handler
-        } else if (canHandle(DavMethods.DAV_GET, webdavRequest, davResource)) {
+        if (canHandle(DavMethods.DAV_GET, webdavRequest, davResource)) {
-            try {
-                Item item = ((JcrDavSession) webdavRequest.getDavSession()).getRepositorySession().getItem(davResource.getLocator().getRepositoryPath());
-                if (item.isNode()) {
-                    webdavResponse.setContentType("text/plain;charset=utf-8");
-                    webdavResponse.setStatus(DavServletResponse.SC_OK);
+            DavResourceLocator locator = davResource.getLocator();
+            String path = locator.getRepositoryPath();
-                    JsonWriter writer = new JsonWriter(webdavResponse.getWriter());
-                    int depth = ((WrappingLocator) davResource.getLocator()).getDepth();
-                    if (depth < BatchReadConfig.DEPTH_INFINITE) {
-                        depth = getDepth((Node) item);
-                    }
-                    writer.write((Node) item, depth);
-                } else {
-                    // properties cannot be requested as json object.
-                    throw new JcrDavException(new ItemNotFoundException("No node at " + item.getPath()), DavServletResponse.SC_NOT_FOUND);
+            Session session = JcrDavSession.getRepositorySession(
+                    webdavRequest.getDavSession());
+            try {
+                Node node = session.getNode(path);
+                int depth = ((WrappingLocator) locator).getDepth();
+                if (depth < BatchReadConfig.DEPTH_INFINITE) {
+                    NodeType type = node.getPrimaryNodeType();
+                    depth = brConfig.getDepth(type.getName());
+
+                webdavResponse.setContentType("text/plain;charset=utf-8");
+                webdavResponse.setStatus(DavServletResponse.SC_OK);
+                JsonWriter writer = new JsonWriter(webdavResponse.getWriter());
+
+                String[] includes =
+                        webdavRequest.getParameterValues(PARAM_INCLUDE);
+                if (includes == null || !JCR_3005) {
+                    writer.write(node, depth);
+                } else {
+                    Collection<Node> nodes = new ArrayList<Node>();
+                    Set<String> alreadyAdded = new HashSet<String>();
+                    for (int i = 0; i < includes.length; i++) {
+                        try {
+                            Node n;
+                            if (includes[i].startsWith("/")) {
+                                n = session.getNode(includes[i]);
+                            } else {
+                                n = node.getNode(includes[i]);
+                            }
+                            if (!alreadyAdded.contains(n.getPath())) {
+                                nodes.add(n);
+                                alreadyAdded.add(n.getPath());
+                            }
+                        } catch (PathNotFoundException e) {
+                            // skip missing node
+                        }
+                    }
+                    writer.write(nodes, depth);
+                }
+            } catch (PathNotFoundException e) {
+                // properties cannot be requested as json object.
+                throw new JcrDavException(
+                        new ItemNotFoundException("No node at " + path),
+                        DavServletResponse.SC_NOT_FOUND);
-        if (doGetMultiple(webdavRequest, webdavResponse, davResource)) {
-            // request was handled by the multi-get handler
-        } else if (canHandle(DavMethods.DAV_POST, webdavRequest, davResource)) {
+        if (canHandle(DavMethods.DAV_POST, webdavRequest, davResource)) {
-    private int getDepth(Node node) throws RepositoryException {
-        return brConfig.getDepth(node.getPrimaryNodeType().getName());
-    }
-
-    /**
-     * Conditionally processes a multi read request.
-     *
-     * @since Apache Jackrabbit 2.3.1
-     * @param request request object
-     * @param response response object
-     * @param resource resource object
-     * @return <code>true</code> if this was a multi read request,
-     *         <code>false</code> otherwise
-     * @throws IOException if the response could not be written
-     * @throws DavException if another error occurred
-     */
-    protected boolean doGetMultiple(
-            WebdavRequest request, WebdavResponse response,
-            DavResource resource) throws IOException, DavException {
-        // Check if this is a multi-GET request
-        String[] paths = request.getParameterValues(PARAM_PATH);
-        if (paths == null
-                || resource.getLocator().getWorkspaceName() == null
-                || resource.getLocator().getRepositoryPath() != null) {
-            return false;
-        }
-
-        // Get the depth (TODO: support depth per node type)
-        int depth = brConfig.getDefaultDepth();
-        String depthParam = request.getParameter(PARAM_DEPTH);
-        if (depthParam != null) {
-            try {
-                depth = Integer.parseInt(depthParam);
-            } catch (NumberFormatException e) {
-                throw new DavException(
-                        DavServletResponse.SC_BAD_REQUEST,
-                        "Invalid depth parameter: " + depthParam);
-            }
-        }
-
-        // Collect all requested nodes
-        Collection<Node> nodes = new ArrayList<Node>(paths.length);
-        Set<String> alreadyAdded = new HashSet<String>();
-        Session session =
-                JcrDavSession.getRepositorySession(resource.getSession());
-        for (String path : paths) {
-            if (!alreadyAdded.contains(path)) {
-                try {
-                    nodes.add(session.getNode(path));
-                    alreadyAdded.add(path);
-                } catch (PathNotFoundException ignore) {
-                    // skip a missing node
-                } catch (RepositoryException e) {
-                    throw new DavException(
-                            WebdavResponse.SC_INTERNAL_SERVER_ERROR,
-                            "Unable to access path " + path, e, null);
-                }
-            }
-        }
-
-        // Send the response
-        response.setContentType("text/plain;charset=utf-8");
-        response.setStatus(DavServletResponse.SC_OK);
-        try {
-            new JsonWriter(response.getWriter()).write(nodes, depth);
-        } catch (RepositoryException e) {
-            throw new DavException(WebdavResponse.SC_INTERNAL_SERVER_ERROR, e);
-        }
-        return true;
-    }
-

INS26 MOV23 INS40 INS31 INS29 INS39 INS59 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV43 MOV43 INS8 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS65 INS42 INS32 UPD42 UPD45 INS25 MOV25 INS66 INS42 INS42 INS45 MOV32 INS8 MOV8 INS60 MOV60 INS60 INS54 INS43 INS59 MOV43 MOV43 INS59 INS8 MOV12 MOV12 INS42 INS42 MOV32 UPD42 INS32 INS42 MOV32 INS60 MOV60 INS25 MOV21 MOV21 MOV60 MOV60 INS25 MOV44 UPD42 MOV42 MOV42 INS42 MOV32 MOV43 INS59 MOV27 INS8 INS27 INS8 INS8 UPD42 INS42 MOV32 INS60 INS21 UPD42 MOV27 INS38 INS21 MOV60 MOV60 INS24 MOV21 INS43 INS59 INS7 UPD42 UPD42 UPD42 INS42 INS32 INS58 INS27 INS37 INS8 MOV43 INS14 UPD40 UPD42 MOV42 INS42 MOV32 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS39 INS59 INS42 INS40 INS42 INS54 UPD42 MOV42 MOV43 INS27 INS42 MOV42 MOV42 MOV32 UPD42 MOV42 INS34 INS8 MOV12 INS45 INS42 INS42 INS60 INS25 INS25 MOV43 INS59 INS32 INS8 INS8 MOV38 INS8 UPD43 UPD42 MOV42 INS2 UPD42 MOV42 INS45 MOV21 INS21 MOV21 MOV21 UPD42 INS42 INS42 INS7 INS32 UPD42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS2 UPD42 MOV42 UPD42 MOV42 INS2 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL66 DEL42 DEL43 DEL42 DEL45 DEL59 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL43 DEL11 DEL36 DEL40 DEL42 DEL42 DEL43 DEL40 DEL45 DEL42 DEL27 DEL42 DEL33 DEL14 DEL53 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL11 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL11 DEL42 DEL32 DEL21 DEL8 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL40 DEL14 DEL53 DEL8 DEL25 DEL8 DEL54 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL32 DEL32 DEL33 DEL27 DEL27 DEL9 DEL41 DEL8 DEL25 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL54 DEL9 DEL41 DEL8 DEL31