JCR-861 Connector should support LocalTransaction as well as XATransaction

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1436323 13f79535-47bb-0310-9956-ffa450edef68

+import javax.transaction.xa.XAException;
+import javax.transaction.xa.Xid;
+
+import java.util.concurrent.atomic.AtomicInteger;
+     * The LocalTransactionAdapter wraps the internal XAResource and uses the XA Method's to
+     * fulfill the LocalTransaction calls.
+     */
+    private static class LocalTransactionAdapter implements javax.resource.spi.LocalTransaction {
+
+        /**
+         * Internal {@link Xid} implementation.
+         */
+        class XidImpl implements Xid {
+        
+            private final byte[] globalTxId;
+        
+            public XidImpl(byte[] globalTxId) {
+                this.globalTxId = globalTxId;
+            }
+        
+            /**
+             * {@inheritDoc}
+             */
+            public int getFormatId() {
+                return 0;
+            }
+        
+            /**
+             * {@inheritDoc}
+             */
+            public byte[] getBranchQualifier() {
+                return new byte[0];
+            }
+        
+            /**
+             * {@inheritDoc}
+             */
+            public byte[] getGlobalTransactionId() {
+                return globalTxId;
+            }
+        }
+
+        /**
+         * Global static counter for the internal Xid's
+         */
+        private static AtomicInteger globalCounter = new AtomicInteger();
+
+        private XAResource resource;
+        private Xid xid;
+
+        public LocalTransactionAdapter(XAResource xaResource) {
+            this.resource = xaResource;
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        @Override
+        public void begin() throws ResourceException {
+            try {
+                this.xid = new XidImpl(intToByteArray(globalCounter.getAndIncrement()));
+                resource.start(xid, XAResource.TMNOFLAGS);
+            } catch (XAException e) {
+                throw new ResourceException(e.getMessage());
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        @Override
+        public void commit() throws ResourceException {
+            try {
+                resource.end(xid, XAResource.TMSUCCESS);
+                resource.commit(xid, true);
+            } catch (XAException e) {
+                throw new ResourceException(e.getMessage());
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        @Override
+        public void rollback() throws ResourceException {
+            try {
+                resource.end(xid, XAResource.TMFAIL);
+                resource.rollback(xid);
+            } catch (XAException e) {
+                throw new ResourceException(e.getMessage());
+            }
+        }
+        
+        /**
+         * Converts the given int (global transaction id) to a byte[]
+         * 
+         * @param value
+         * @return byte[]
+         */
+        private static byte[] intToByteArray(int value) {
+            byte[] b = new byte[4];
+            for (int i = 0; i < 4; i++) {
+                int offset = (b.length - 1 - i) * 8;
+                b[i] = (byte) ((value >>> offset) & 0xFF);
+            }
+            return b;
+        }
+    }
+
+    /**
+    private LocalTransactionAdapter localTransactionAdapter;
+
-            this.xaResource =  new TransactionBoundXAResource(this, (XAResource) session);
+            this.xaResource = new TransactionBoundXAResource(this, (XAResource) session);
+        this.localTransactionAdapter = new LocalTransactionAdapter(xaResource);
-        throw new UnsupportedOperationException("Local transaction is not supported");
+        return localTransactionAdapter;

INS26 INS26 INS26 INS40 INS40 INS40 INS55 INS23 INS29 INS83 INS83 INS42 INS43 INS55 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS65 INS40 INS29 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS42 INS42 INS21 INS41 INS66 INS66 INS65 INS42 INS83 INS83 INS5 INS59 INS83 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS5 INS42 INS8 INS29 INS83 INS5 INS42 INS8 INS65 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS65 INS42 INS42 INS54 INS65 INS42 INS42 INS54 INS65 INS42 INS42 INS54 INS65 INS65 INS65 INS39 INS85 INS39 INS42 INS60 INS24 INS41 INS7 INS42 INS66 INS65 INS66 INS39 INS85 INS42 INS5 INS42 INS21 INS65 INS41 INS65 INS39 INS85 INS41 INS65 INS39 INS85 INS41 INS66 INS43 INS42 INS7 INS65 INS8 INS12 INS65 INS8 INS12 INS65 INS8 INS12 INS66 INS42 INS66 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS22 INS14 INS42 INS39 INS85 INS7 INS65 INS34 INS65 INS3 INS65 INS42 INS42 INS22 INS42 INS21 INS21 INS44 INS8 INS21 INS21 INS44 INS8 INS21 INS21 INS44 INS8 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS34 INS42 INS60 INS21 INS52 INS42 INS43 INS42 INS22 INS42 INS5 INS34 INS52 INS42 INS7 INS32 INS43 INS42 INS53 INS32 INS32 INS43 INS42 INS53 INS32 INS32 INS43 INS42 INS53 INS5 INS34 INS42 INS34 INS39 INS59 INS7 INS42 INS52 INS42 INS39 INS85 INS22 INS14 INS42 INS42 INS42 INS40 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS39 INS85 INS42 INS27 INS2 INS11 INS52 INS42 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS36 INS34 INS42 INS42 INS39 INS36 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS40 INS34 INS42 INS36 INS34 INS27 INS42 INS42 DEL42 DEL43 DEL45 DEL14 DEL53