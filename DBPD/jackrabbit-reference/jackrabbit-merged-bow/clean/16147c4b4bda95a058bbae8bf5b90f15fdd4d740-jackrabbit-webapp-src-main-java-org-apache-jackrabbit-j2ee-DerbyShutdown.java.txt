JCR-1301: Trouble undeploying jackrabbit-webapp from Tomcat

Avoid problems in the DerbyShutdown class when Derby is not used.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1055164 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.Method;
-import java.util.Properties;
+import java.util.Enumeration;
-        try {
-            String shutdown = "jdbc:derby:;shutdown=true";
-            // Try to find the Derby JDBC driver
-            Driver driver = DriverManager.getDriver(shutdown);
-            // Check if the Derby driver comes from this webapp
-            if (driver.getClass().getClassLoader()
-                    == DerbyShutdown.class.getClassLoader()) {
-                // Unregister the automatically loaded driver
-                DriverManager.deregisterDriver(driver);
-                // Tell Derby to release all remaining resources
-                driver.connect(shutdown, new Properties());
+        ClassLoader loader = DerbyShutdown.class.getClassLoader();
+
+        // Deregister all JDBC drivers loaded from this webapp
+        Enumeration<Driver> drivers = DriverManager.getDrivers();
+        while (drivers.hasMoreElements()) {
+            Driver driver = drivers.nextElement();
+            // Check if this driver comes from this webapp
+            if (driver.getClass().getClassLoader() == loader) {
+                try {
+                    DriverManager.deregisterDriver(driver);
+                } catch (SQLException ignore) {
+                }
-        } catch (SQLException ignore) {
+        }
+
+        // Explicitly tell Derby to release all remaining resources.
+        // Use reflection to avoid problems when the Derby is not used.
+        try {
+            Class<?> monitorClass =
+                loader.loadClass("org.apache.derby.iapi.services.monitor.Monitor");
+            if (monitorClass.getClassLoader() == loader) {
+                Method getMonitorMethod =
+                    monitorClass.getMethod("getMonitor", new Class<?>[0]);
+                Object monitor =
+                    getMonitorMethod.invoke(null, new Object[0]);
+                if (monitor != null) {
+                    Method shutdownMethod =
+                        monitor.getClass().getMethod("shutdown", new Class<?>[0]);
+                    shutdownMethod.invoke(monitor, new Object[0]);
+                }
+            }
+        } catch (Exception ignore) {

INS26 INS40 UPD40 INS8 INS60 INS60 INS61 INS54 INS43 INS59 INS74 INS59 INS32 MOV8 INS8 INS12 INS42 INS42 MOV32 INS43 INS43 INS42 INS32 INS42 INS42 MOV60 MOV25 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS8 INS74 INS59 INS27 INS8 INS43 INS42 INS42 INS54 INS43 INS76 INS42 INS32 INS32 INS42 INS60 INS60 INS25 INS42 UPD42 UPD42 MOV8 MOV12 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS42 INS42 INS45 INS3 INS42 INS42 INS33 INS3 INS43 INS59 INS32 INS5 INS34 INS5 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS3 INS74 INS85 INS43 INS85 INS32 INS42 INS45 INS3 INS5 INS34 INS43 INS76 INS42 INS42 INS42 INS5 INS34 INS43 INS85 INS42 INS74 INS85 INS42 INS43 INS76 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL8 DEL54