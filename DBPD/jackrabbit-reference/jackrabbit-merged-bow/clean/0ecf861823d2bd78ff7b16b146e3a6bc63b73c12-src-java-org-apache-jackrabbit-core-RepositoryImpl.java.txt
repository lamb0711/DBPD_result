fixed potential deadlock problem with repository shutdown

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@76142 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.ReferenceMap;
-import org.apache.jackrabbit.core.state.*;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.PersistentItemStateManager;
+import org.apache.jackrabbit.core.state.PersistentItemStateProvider;
+import org.apache.jackrabbit.core.state.ReferenceManager;
-import org.apache.commons.collections.ReferenceMap;
-    synchronized PersistentItemStateProvider getWorkspaceStateManager(String workspaceName)
+    PersistentItemStateProvider getWorkspaceStateManager(String workspaceName)
-        // get/create per named workspace (i.e. per physical storage) item state manager
-        PersistentItemStateProvider stateMgr =
-                (PersistentItemStateProvider) wspStateMgrs.get(workspaceName);
-        if (stateMgr == null) {
-            // create state manager
-            try {
-                stateMgr = new PersistentItemStateManager(wspConfig.getPersistenceManager(), rootNodeUUID, ntReg);
-            } catch (ItemStateException ise) {
-                String msg = "failed to instantiate the persistent state manager";
-                log.error(msg, ise);
-                throw new RepositoryException(msg, ise);
+
+        synchronized (wspStateMgrs) {
+            // get/create per named workspace (i.e. per physical storage) item state manager
+            PersistentItemStateProvider stateMgr =
+                    (PersistentItemStateProvider) wspStateMgrs.get(workspaceName);
+            if (stateMgr == null) {
+                // create state manager
+                try {
+                    stateMgr = new PersistentItemStateManager(wspConfig.getPersistenceManager(), rootNodeUUID, ntReg);
+                } catch (ItemStateException ise) {
+                    String msg = "failed to instantiate the persistent state manager";
+                    log.error(msg, ise);
+                    throw new RepositoryException(msg, ise);
+                }
+                wspStateMgrs.put(workspaceName, stateMgr);
-            wspStateMgrs.put(workspaceName, stateMgr);
+            return stateMgr;
-        return stateMgr;
-    synchronized ReferenceManager getWorkspaceReferenceManager(String workspaceName)
+    ReferenceManager getWorkspaceReferenceManager(String workspaceName)
-        ReferenceManager refMgr
-                = (ReferenceManager) wspRefMgrs.get(workspaceName);
-        if (refMgr == null) {
-            // create reference mgr that uses the perstistence mgr configured
-            // in the workspace definition
-            refMgr = new ReferenceManager(wspConfig.getPersistenceManager());
-            wspRefMgrs.put(workspaceName, refMgr);
+
+        synchronized (wspRefMgrs) {
+            ReferenceManager refMgr
+                    = (ReferenceManager) wspRefMgrs.get(workspaceName);
+            if (refMgr == null) {
+                // create reference mgr that uses the perstistence mgr configured
+                // in the workspace definition
+                refMgr = new ReferenceManager(wspConfig.getPersistenceManager());
+                wspRefMgrs.put(workspaceName, refMgr);
+            }
+            return refMgr;
-        return refMgr;
-    synchronized ObservationManagerFactory getObservationManagerFactory(String workspaceName)
+    ObservationManagerFactory getObservationManagerFactory(String workspaceName)
-        ObservationManagerFactory obsMgr
-                = (ObservationManagerFactory) wspObsMgrFactory.get(workspaceName);
-        if (obsMgr == null) {
-            obsMgr = new ObservationManagerFactory();
-            wspObsMgrFactory.put(workspaceName, obsMgr);
+
+        synchronized (wspObsMgrFactory) {
+            ObservationManagerFactory obsMgr
+                    = (ObservationManagerFactory) wspObsMgrFactory.get(workspaceName);
+            if (obsMgr == null) {
+                obsMgr = new ObservationManagerFactory();
+                wspObsMgrFactory.put(workspaceName, obsMgr);
+            }
+            return obsMgr;
-        return obsMgr;
-    synchronized SearchManager getSearchManager(String workspaceName)
-            throws NoSuchWorkspaceException, RepositoryException {
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
-
-        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
-        SearchManager searchMgr
-                = (SearchManager) wspSearchMgrs.get(workspaceName);
-        if (searchMgr == null) {
-            try {
-                if (wspConfig.getSearchConfig() == null) {
-                    // no search index configured
-                    return null;
-                }
-                SystemSession s = getSystemSession(workspaceName);
-                searchMgr = new SearchManager(s, wspConfig.getSearchConfig());
-            } catch (IOException e) {
-                throw new RepositoryException("Exception opening search index.", e);
-            }
-            wspSearchMgrs.put(workspaceName, searchMgr);
-        }
-        return searchMgr;
-    }
-
-    synchronized SystemSession getSystemSession(String workspaceName)
+    SearchManager getSearchManager(String workspaceName)
-        SystemSession systemSession
-                = (SystemSession) wspSystemSessions.get(workspaceName);
-        if (systemSession == null) {
-            systemSession = new SystemSession(this, wspConfig);
-            wspSystemSessions.put(workspaceName, systemSession);
+
+        synchronized (wspSearchMgrs) {
+            SearchManager searchMgr
+                    = (SearchManager) wspSearchMgrs.get(workspaceName);
+            if (searchMgr == null) {
+                try {
+                    if (wspConfig.getSearchConfig() == null) {
+                        // no search index configured
+                        return null;
+                    }
+                    SystemSession s = getSystemSession(workspaceName);
+                    searchMgr = new SearchManager(s, wspConfig.getSearchConfig());
+                } catch (IOException e) {
+                    throw new RepositoryException("Exception opening search index.", e);
+                }
+                wspSearchMgrs.put(workspaceName, searchMgr);
+            }
+            return searchMgr;
-        return systemSession;
+    }
+
+    SystemSession getSystemSession(String workspaceName)
+            throws NoSuchWorkspaceException, RepositoryException {
+        // check state
+        if (disposed) {
+            throw new IllegalStateException("repository instance has been shut down");
+        }
+
+        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
+        if (wspConfig == null) {
+            throw new NoSuchWorkspaceException(workspaceName);
+        }
+
+        synchronized (wspSystemSessions) {
+            SystemSession systemSession
+                    = (SystemSession) wspSystemSessions.get(workspaceName);
+            if (systemSession == null) {
+                systemSession = new SystemSession(this, wspConfig);
+                wspSystemSessions.put(workspaceName, systemSession);
+            }
+            return systemSession;
+        }
-    public synchronized void onEvent(EventIterator events) {
+    public void onEvent(EventIterator events) {
-        while (events.hasNext()) {
-            Event event = events.nextEvent();
-            long type = event.getType();
-            if ((type & Event.NODE_ADDED) == Event.NODE_ADDED) {
-                nodesCount++;
-                repProps.setProperty(STATS_NODE_COUNT_PROPERTY, Long.toString(nodesCount));
-            }
-            if ((type & Event.NODE_REMOVED) == Event.NODE_REMOVED) {
-                nodesCount--;
-                repProps.setProperty(STATS_NODE_COUNT_PROPERTY, Long.toString(nodesCount));
-            }
-            if ((type & Event.PROPERTY_ADDED) == Event.PROPERTY_ADDED) {
-                propsCount++;
-                repProps.setProperty(STATS_PROP_COUNT_PROPERTY, Long.toString(propsCount));
-            }
-            if ((type & Event.PROPERTY_REMOVED) == Event.PROPERTY_REMOVED) {
-                propsCount--;
-                repProps.setProperty(STATS_PROP_COUNT_PROPERTY, Long.toString(propsCount));
+        synchronized (repProps) {
+            while (events.hasNext()) {
+                Event event = events.nextEvent();
+                long type = event.getType();
+                if ((type & Event.NODE_ADDED) == Event.NODE_ADDED) {
+                    nodesCount++;
+                    repProps.setProperty(STATS_NODE_COUNT_PROPERTY, Long.toString(nodesCount));
+                }
+                if ((type & Event.NODE_REMOVED) == Event.NODE_REMOVED) {
+                    nodesCount--;
+                    repProps.setProperty(STATS_NODE_COUNT_PROPERTY, Long.toString(nodesCount));
+                }
+                if ((type & Event.PROPERTY_ADDED) == Event.PROPERTY_ADDED) {
+                    propsCount++;
+                    repProps.setProperty(STATS_PROP_COUNT_PROPERTY, Long.toString(propsCount));
+                }
+                if ((type & Event.PROPERTY_REMOVED) == Event.PROPERTY_REMOVED) {
+                    propsCount--;
+                    repProps.setProperty(STATS_PROP_COUNT_PROPERTY, Long.toString(propsCount));
+                }

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS51 INS51 INS51 INS25 INS51 INS51 INS51 INS42 INS8 INS42 INS8 INS42 INS8 INS27 INS8 INS42 INS8 INS42 INS8 INS42 INS8 MOV60 MOV25 MOV41 MOV60 MOV25 MOV41 MOV60 MOV25 MOV41 INS42 INS33 INS53 MOV60 MOV25 MOV41 MOV60 MOV25 MOV41 MOV61 INS14 INS43 INS42 INS42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83