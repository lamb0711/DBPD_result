JCR-2116 JSR 283: Built-In Node Types
- adding autocreated to mix:created and mix:lastModified
- adding more test cases


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@798847 13f79535-47bb-0310-9956-ffa450edef68

-     * Computes the values of well-known system (i.e. protected) properties.
-     * todo: duplicate code in BatchedItemOperations: consolidate and delegate to NodeTypeInstanceHandler
-     *
-     * @param name
-     * @param def
-     * @return
-     * @throws RepositoryException
-     */
-    protected InternalValue[] computeSystemGeneratedPropertyValues(Name name,
-                                                                   PropertyDefinitionImpl def)
-            throws RepositoryException {
-        InternalValue[] genValues = null;
-
-        /**
-         * todo: need to come up with some callback mechanism for applying system generated values
-         * (e.g. using a NodeTypeInstanceHandler interface)
-         */
-
-        NodeState thisState = data.getNodeState();
-
-        // compute system generated values
-        NodeTypeImpl nt = (NodeTypeImpl) def.getDeclaringNodeType();
-        // TODO JCR-2116: Built-In Node Types; => adapt to JCR 2.0 built-in node types (mix:created, etc)
-        if (nt.getQName().equals(NameConstants.MIX_REFERENCEABLE)) {
-            // mix:referenceable node type
-            if (name.equals(NameConstants.JCR_UUID)) {
-                // jcr:uuid property
-                genValues = new InternalValue[]{
-                        InternalValue.create(thisState.getNodeId().toString())
-                };
-            }
-/*
-       todo consolidate version history creation code (currently in ItemImpl.initVersionHistories)
-       } else if (nt.getQName().equals(MIX_VERSIONABLE)) {
-           // mix:versionable node type
-           VersionHistory hist = session.getVersionManager().getOrCreateVersionHistory(this);
-           if (name.equals(JCR_VERSIONHISTORY)) {
-               // jcr:versionHistory property
-               genValues = new InternalValue[]{InternalValue.create(new UUID(hist.getUUID()))};
-           } else if (name.equals(JCR_BASEVERSION)) {
-               // jcr:baseVersion property
-               genValues = new InternalValue[]{InternalValue.create(new UUID(hist.getRootVersion().getUUID()))};
-           } else if (name.equals(JCR_ISCHECKEDOUT)) {
-               // jcr:isCheckedOut property
-               genValues = new InternalValue[]{InternalValue.create(true)};
-           } else if (name.equals(JCR_PREDECESSORS)) {
-               // jcr:predecessors property
-               genValues = new InternalValue[]{InternalValue.create(new UUID(hist.getRootVersion().getUUID()))};
-           }
-*/
-        } else if (nt.getQName().equals(NameConstants.NT_HIERARCHYNODE)
-                || nt.getQName().equals(NameConstants.MIX_CREATED)) {
-            // nt:hierarchyNode node type
-            if (name.equals(NameConstants.JCR_CREATED)) {
-                // jcr:created property
-                genValues = new InternalValue[]{InternalValue.create(Calendar.getInstance())};
-            }
-        } else if (nt.getQName().equals(NameConstants.NT_RESOURCE)) {
-            // nt:resource node type
-            if (name.equals(NameConstants.JCR_LASTMODIFIED)) {
-                // jcr:lastModified property
-                genValues = new InternalValue[]{InternalValue.create(Calendar.getInstance())};
-            }
-        } else if (nt.getQName().equals(NameConstants.NT_VERSION)) {
-            // nt:version node type
-            if (name.equals(NameConstants.JCR_CREATED)) {
-                // jcr:created property
-                genValues = new InternalValue[]{InternalValue.create(Calendar.getInstance())};
-            }
-        } else if (nt.getQName().equals(NameConstants.NT_BASE)) {
-            // nt:base node type
-            if (name.equals(NameConstants.JCR_PRIMARYTYPE)) {
-                // jcr:primaryType property
-                genValues = new InternalValue[]{InternalValue.create(thisState.getNodeTypeName())};
-            } else if (name.equals(NameConstants.JCR_MIXINTYPES)) {
-                // jcr:mixinTypes property
-                Set<Name> mixins = thisState.getMixinTypeNames();
-                ArrayList<InternalValue> values = new ArrayList<InternalValue>(mixins.size());
-                for (Name n : mixins) {
-                    values.add(InternalValue.create(n));
-                }
-                genValues = values.toArray(new InternalValue[values.size()]);
-            }
-        }
-
-        return genValues;
-    }
-
-    /**
+            PropDef propDef = def.unwrap();
-            propState.setMultiValued(def.isMultiple());
-            propState.setDefinitionId(def.unwrap().getId());
+            propState.setMultiValued(propDef.isMultiple());
+            propState.setDefinitionId(propDef.getId());
-            InternalValue[] genValues =
-                    computeSystemGeneratedPropertyValues(name, def);
-            InternalValue[] defValues = def.unwrap().getDefaultValues();
+            InternalValue[] genValues = session.getNodeTypeInstanceHandler()
+                    .computeSystemGeneratedPropertyValues(data.getNodeState(), propDef);
+            if (genValues == null) {
+                genValues = propDef.getDefaultValues();
+            }
-            } else if (defValues != null) {
-                propState.setValues(defValues);

INS60 INS25 INS43 INS59 MOV5 INS27 INS8 INS42 INS42 MOV32 INS42 INS33 INS21 UPD42 INS42 INS32 MOV32 UPD42 INS7 INS42 INS42 INS42 INS32 UPD42 MOV42 MOV42 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL7 DEL21 DEL8 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL3 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25