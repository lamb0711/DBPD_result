JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1092723 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.security.AccessControlException;
-import java.util.Collections;
-import java.util.HashSet;
-    /**
-     * Adds the given <code>privileges</code> to the specified
-     * <code>target</code> set if they are not present in the specified
-     * <code>complement</code> set.
-     * 
-     * @param privileges
-     * @param target
-     * @param complement
-     */
-    protected static void updatePrivileges(Collection<Privilege> privileges, Set<Privilege> target, Set<Privilege> complement) {
-        for (Privilege p : privileges) {
-            if (!complement.contains(p)) {
-                target.add(p);
-            }
-        }
-    }
-
-        return getResult(absPath).getPrivileges();
+        Set<Privilege> pvs = getPrivilegeSet(absPath);
+        return PrivilegeRegistry.getBits(pvs.toArray(new Privilege[pvs.size()]));
-        int builtin = getPrivilegeManagerImpl().getBits(privileges);
-        if ((result.allowPrivileges | ~builtin) == -1) {
-            // in addition check all custom privileges
-            for (Privilege p : privileges) {
-                if (getPrivilegeManagerImpl().isCustomPrivilege(p)) {
-                    if (!result.customAllow.contains(p)) {
-                        if (p.isAggregate()) {
-                            // test if aggregated privs were granted individually.
-                            for (Privilege aggr : p.getAggregatePrivileges()) {
-                                if (!aggr.isAggregate() && !result.customAllow.contains(aggr)) {
-                                    // an aggregated custom priv is not allowed -> return false
-                                    return false;
-                                }
-                            }
-                        } else {
-                            // simple custom allow not allowed -> return false
-                            return false;
-                        }
-                    } // else: custom privilege allowed -> continue.
-                } // else: not a custom priv -> already covered.
-            }
-            return true;
-        } else {
-            return false;
-        }
+        PrivilegeBits bits = getPrivilegeManagerImpl().getBits(privileges);
+        return result.allowPrivileges.includes(bits);
-        Set<Privilege> privileges = new HashSet<Privilege>();
-        privileges.addAll(getPrivilegeManagerImpl().getPrivileges(result.getPrivileges()));
-        privileges.addAll(result.customAllow);
-        return privileges;
+        return getPrivilegeManagerImpl().getPrivileges(result.allowPrivileges);
-        public static final Result EMPTY = new Result(Permission.NONE, Permission.NONE, PrivilegeRegistry.NO_PRIVILEGE, PrivilegeRegistry.NO_PRIVILEGE);
+        public static final Result EMPTY = new Result(Permission.NONE, Permission.NONE, PrivilegeBits.EMPTY, PrivilegeBits.EMPTY);
-        private final int allowPrivileges;
-        private final int denyPrivileges;
-
-        private final Set<Privilege> customAllow;
-        private final Set<Privilege> customDeny;
+        private final PrivilegeBits allowPrivileges;
+        private final PrivilegeBits denyPrivileges;
+        /**
+         * @deprecated
+         */
-            this(allows, denies, allowPrivileges, denyPrivileges, Collections.<Privilege>emptySet(), Collections.<Privilege>emptySet());
+            this(allows, denies, PrivilegeBits.getInstance(allowPrivileges), PrivilegeBits.getInstance(denyPrivileges));
-        public Result(int allows, int denies, int allowPrivileges, int denyPrivileges,
-                      Set<Privilege> customAllow, Set<Privilege> customDeny) {
+        public Result(int allows, int denies, PrivilegeBits allowPrivileges, PrivilegeBits denyPrivileges) {
-
-            this.customAllow = customAllow;
-            this.customDeny = customDeny;
+        /**
+         * @deprecated jackrabbit 2.3 (throws UnsupportedOperationException, use getPrivilegeBits instead)
+         */
+            throw new UnsupportedOperationException("use #getPrivilegeBits instead.");
+        }
+
+        public PrivilegeBits getPrivilegeBits() {
-            int cAPrivs = allowPrivileges | Permission.diff(other.allowPrivileges, denyPrivileges);
-            int cDPrivs = denyPrivileges | Permission.diff(other.denyPrivileges, allowPrivileges);
-            Set<Privilege> combinedAllow = new HashSet<Privilege>();
-            combinedAllow.addAll(customAllow);
-            updatePrivileges(other.customAllow, combinedAllow, customDeny);
+            PrivilegeBits cAPrivs = PrivilegeBits.getInstance(allowPrivileges);
+            cAPrivs.addDifference(other.allowPrivileges, denyPrivileges);
+            PrivilegeBits cdPrivs = PrivilegeBits.getInstance(denyPrivileges);
+            cdPrivs.addDifference(other.denyPrivileges, allowPrivileges);
-            Set<Privilege> combinedDeny = new HashSet<Privilege>();
-            combinedDeny.addAll(customDeny);
-            updatePrivileges(other.customDeny, combinedDeny, customAllow);
-            return new Result(cAllows, cDenies, cAPrivs, cDPrivs, customAllow, customDeny);
+            return new Result(cAllows, cDenies, allowPrivileges, denyPrivileges);
-                h = 37 * h + allowPrivileges;
-                h = 37 * h + denyPrivileges;
-                h = 37 * h + customAllow.hashCode();
-                h = 37 * h + customDeny.hashCode();
+                h = 37 * h + allowPrivileges.hashCode();
+                h = 37 * h + denyPrivileges.hashCode();
-                       allowPrivileges == other.allowPrivileges &&
-                       denyPrivileges == other.denyPrivileges &&
-                       customAllow.equals(other.customAllow) &&
-                       customDeny.equals(other.customDeny);
+                       allowPrivileges.equals(other.allowPrivileges) &&
+                       denyPrivileges.equals(other.denyPrivileges);

MOV26 MOV31 UPD40 MOV29 UPD83 UPD39 UPD42 MOV44 MOV43 INS8 INS8 INS31 INS31 INS60 INS41 MOV60 MOV60 INS41 INS43 MOV59 INS43 MOV59 INS29 MOV44 MOV44 INS29 MOV83 INS39 INS42 INS8 INS43 UPD42 INS83 MOV43 INS42 MOV44 INS8 MOV74 INS59 INS32 INS43 INS32 MOV32 UPD42 MOV42 UPD42 MOV42 INS65 INS43 UPD42 INS43 UPD42 INS65 INS53 INS42 MOV60 MOV60 INS60 MOV21 MOV60 MOV21 MOV41 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 MOV43 UPD40 UPD40 UPD42 MOV42 UPD42 MOV42 INS66 INS14 INS43 MOV59 INS43 MOV21 INS42 INS42 INS42 INS42 INS3 UPD42 INS42 UPD42 UPD42 INS42 UPD42 INS43 INS45 INS42 UPD42 INS32 UPD42 INS42 UPD40 UPD42 UPD42 MOV42 UPD42 INS32 UPD42 INS42 UPD40 UPD42 MOV43 UPD42 UPD42 INS5 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 MOV27 MOV43 INS85 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS40 DEL40 DEL26 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL40 DEL42 DEL38 DEL27 DEL36 DEL34 DEL38 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL32 DEL38 DEL27 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL8 DEL9 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL9 DEL41 DEL8 DEL9 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL83 DEL83 DEL39 DEL23 DEL83 DEL83 DEL39 DEL23 DEL42 DEL43 DEL43 DEL74 DEL42 DEL59 DEL42 DEL43 DEL43 DEL74 DEL42 DEL59 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL43 DEL74 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL39 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL27 DEL59 DEL60 DEL39 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL34 DEL42 DEL27 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL34 DEL42 DEL27 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL40 DEL32 DEL27