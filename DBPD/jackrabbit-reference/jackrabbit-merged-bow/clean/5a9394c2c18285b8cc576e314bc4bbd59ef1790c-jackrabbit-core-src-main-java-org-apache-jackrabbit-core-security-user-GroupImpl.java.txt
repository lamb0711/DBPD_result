JCR-2313 - Improvements to user management (2) [work in progress] 
-> see issue for details

JCR-2333 - ItemImpl#validateTransientItems: Incomplete validation of mandatory child item
-> patch2

JCR-2195 - Provide possibility to import protected items using Session/Workspace import functionality
-> deal with reference properties
-> make import handlers configurable
-> add userimporter

JCR-171 - Make the extraction of Session UserIDs from Subjects configurable
-> extend SecurityManagerConfig and retrieve uid from principal name if configured
     class is present in the subject

JCR-2351 - Make Authorizable.setProperty more noisy in case of failure

JCR-2331 - Configurable DefaultPolicy replacing Initialization within the ACProvider
-> initial steps. remove code that relies on the default-init
-> add TODOs

JCR-2291 - Issues with compiled permissions of ACL provider
-> remove code searching for DENY-read entries in case of default initialization of ac entries

and here and there minor improvement, usage of generics etc....

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@828791 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.security.user.UserManager;
-import org.apache.jackrabbit.util.Text;
+import org.apache.jackrabbit.core.PropertyImpl;
-import javax.jcr.PropertyIterator;
+import javax.jcr.Value;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.PropertyType;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Arrays;
-    private GroupImpl(NodeImpl node, UserManagerImpl userManager) throws RepositoryException {
+    protected GroupImpl(NodeImpl node, UserManagerImpl userManager) throws RepositoryException {
-    static Group create(NodeImpl node, UserManagerImpl userManager) throws RepositoryException {
-        if (node == null || !node.isNodeType(NT_REP_GROUP)) {
-            throw new IllegalArgumentException();
-        }
-        if (!Text.isDescendant(userManager.getGroupsPath(), node.getPath())) {
-            throw new IllegalArgumentException("Group has to be within the Group Path");
-        }
-        return new GroupImpl(node, userManager);
-    }
-
-
-        return getMembers(false).iterator();
+        return getMembers(false, UserManager.SEARCH_TYPE_AUTHORIZABLE).iterator();
-        return getMembers(true).iterator();
+        return getMembers(true, UserManager.SEARCH_TYPE_AUTHORIZABLE).iterator();
-        if (authorizable == null || !(authorizable instanceof AuthorizableImpl)) {
+        if (authorizable == null || !(authorizable instanceof AuthorizableImpl)
+                || getNode().isSame(((AuthorizableImpl) authorizable).getNode())) {
-            for (Iterator it = impl.memberOf(); it.hasNext();) {
-                if (thisID.equals(((GroupImpl) it.next()).getID())) {
+            for (Iterator<Group> it = impl.memberOf(); it.hasNext();) {
+                if (thisID.equals(it.next().getID())) {
-        if (authorizable == null || !(authorizable instanceof AuthorizableImpl)
-                || isMember(authorizable)) {
-            return false;
-        }
-        if (isCyclicMembership(authorizable)) {
-            log.warn("Attempt to create circular group membership.");
+        if (authorizable == null || !(authorizable instanceof AuthorizableImpl)) {
-        // preconditions are met -> delegate to authorizableImpl
-        return authImpl.addToGroup(this);
+        if (isCyclicMembership(authImpl)) {
+            log.warn("Attempt to create circular group membership.");
+            return false;
+        }
+
+        Value[] values;
+        Value toAdd = getSession().getValueFactory().createValue(memberNode, true);
+        NodeImpl node = getNode();
+        if (node.hasProperty(P_MEMBERS)) {
+            Value[] old = node.getProperty(P_MEMBERS).getValues();
+            for (Value v : old) {
+                if (v.equals(toAdd)) {
+                    log.debug("Authorizable " + authImpl + " is already member of " + this);
+                    return false;
+                }
+            }
+
+            values = new Value[old.length + 1];
+            System.arraycopy(old, 0, values, 0, old.length);
+        } else {
+            values = new Value[1];
+        }
+        values[values.length - 1] = toAdd;
+
+        userManager.setProtectedProperty(node, P_MEMBERS, values, PropertyType.WEAKREFERENCE);
+        return true;
-        if (!isMember(authorizable) || !(authorizable instanceof AuthorizableImpl)) {
+        if (!(authorizable instanceof AuthorizableImpl)) {
-        return ((AuthorizableImpl) authorizable).removeFromGroup(this);
+        NodeImpl node = getNode();
+        if (!node.hasProperty(P_MEMBERS)) {
+            log.debug("Group has no members -> cannot remove member " + authorizable.getID());
+            return false;
+        }
+
+        Value toRemove = getSession().getValueFactory().createValue(((AuthorizableImpl)authorizable).getNode(), true);
+
+        PropertyImpl property = node.getProperty(P_MEMBERS);
+        List<Value> valList = new ArrayList<Value>(Arrays.asList(property.getValues()));
+
+        if (valList.remove(toRemove)) {
+            try {
+                if (valList.isEmpty()) {
+                    userManager.removeProtectedItem(property, node);
+                } else {
+                    Value[] values = valList.toArray(new Value[valList.size()]);
+                    userManager.setProtectedProperty(node, P_MEMBERS, values);
+                }
+                return true;
+            } catch (RepositoryException e) {
+                // modification failed -> revert all pending changes.
+                node.refresh(false);
+                throw e;
+            }
+        } else {
+            // nothing changed
+            log.debug("Authorizable " + authorizable.getID() + " was not member of " + getID());
+            return false;
+        }
+     * @param type Any of {@link UserManager#SEARCH_TYPE_AUTHORIZABLE},
+     * {@link UserManager#SEARCH_TYPE_GROUP}, {@link UserManager#SEARCH_TYPE_USER}.
-    private Collection<Authorizable> getMembers(boolean includeIndirect) throws RepositoryException {
-        PropertyIterator itr = getNode().getWeakReferences(getSession().getJCRName(P_GROUPS));
-        Collection<Authorizable> members = new HashSet<Authorizable>((int) itr.getSize());
-        while (itr.hasNext()) {
-            NodeImpl n = (NodeImpl) itr.nextProperty().getParent();
-            if (n.isNodeType(NT_REP_GROUP)) {
-                Group group = userManager.createGroup(n);
-                // only retrieve indirect group-members if the group is not
-                // yet present (detected eventual circular membership).
-                if (members.add(group) && includeIndirect) {
-                    members.addAll(((GroupImpl) group).getMembers(true));
+    private Collection<Authorizable> getMembers(boolean includeIndirect, int type) throws RepositoryException {
+        Collection<Authorizable> members = new HashSet<Authorizable>();
+        if (getNode().hasProperty(P_MEMBERS)) {
+            Value[] vs = getNode().getProperty(P_MEMBERS).getValues();
+            for (Value v : vs) {
+                try {
+                    NodeImpl n = (NodeImpl) getSession().getNodeByIdentifier(v.getString());
+                    if (n.isNodeType(NT_REP_GROUP)) {
+                        if (type != UserManager.SEARCH_TYPE_USER) {
+                            Group group = userManager.createGroup(n);
+                            // only retrieve indirect group-members if the group is not
+                            // yet present (detected eventual circular membership).
+                            if (members.add(group) && includeIndirect) {
+                                members.addAll(((GroupImpl) group).getMembers(true, type));
+                            }
+                        } // else: groups are ignored
+                    } else if (n.isNodeType(NT_REP_USER)) {
+                        if (type != UserManager.SEARCH_TYPE_GROUP) {
+                            User user = userManager.createUser(n);
+                            members.add(user);
+                        }
+                    } else {
+                        // reference does point to an authorizable node -> not a
+                        // member of this group -> ignore
+                        log.debug("Group member entry with invalid node type " + n.getPrimaryNodeType().getName() + " -> Not included in member set.");
+                    }
+                } catch (ItemNotFoundException e) {
+                    // dangling weak reference -> clean upon next write.
+                    log.debug("Authorizable node referenced by " + getID() + " doesn't exist any more -> Ignored from member list.");
-            } else if (n.isNodeType(NT_REP_USER)) {
-                User user = userManager.createUser(n);
-                members.add(user);
-            } else {
-                // weak-ref property 'rep:groups' that doesn't reside under an
-                // authorizable node -> doesn't represent a member of this group.
-                log.debug("Undefined reference to group '" + getID() + "' -> Not included in member set.");
-        }
+        } // no rep:member property
-     * Since {@link #isMember(Authorizable)} detects declared and inherited
-     * membership this method simply checks if the potential new member is
-     * a group that would in turn have <code>this</code> as a member.
+     * Returns <code>true</code> if the given <code>newMember</code> is a Group
+     * and contains <code>this</code> Group as declared or inherited member.
-    private boolean isCyclicMembership(Authorizable newMember) throws RepositoryException {
-        boolean cyclic = false;
+    private boolean isCyclicMembership(AuthorizableImpl newMember) throws RepositoryException {
-            Group gr = (Group) newMember;
-            cyclic = gr.isMember(this);
+            GroupImpl gr = (GroupImpl) newMember;
+            for (Authorizable member : gr.getMembers(true, UserManager.SEARCH_TYPE_GROUP)) {
+                GroupImpl grMemberImpl = (GroupImpl) member;
+                if (getNode().getUUID().equals(grMemberImpl.getNode().getUUID())) {
+                    // found cyclic group membership
+                    return true;
+                }
+
+            }
-        return cyclic;
+        return false;
-                    for (Iterator it = GroupImpl.this.getMembers(); it.hasNext();) {
-                        Authorizable authrz = (Authorizable) it.next();
-                        members.add(authrz.getPrincipal());
+                    for (Iterator<Authorizable> it = GroupImpl.this.getMembers(); it.hasNext();) {
+                        members.add(it.next().getPrincipal());

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS40 INS31 UPD83 MOV25 MOV29 UPD83 MOV83 INS39 INS42 MOV44 MOV43 INS8 INS44 INS60 INS60 INS60 INS25 INS21 INS21 INS41 MOV25 INS60 INS25 INS60 INS60 INS60 INS25 INS65 INS39 INS42 INS25 UPD43 INS25 INS27 MOV27 INS5 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS7 INS32 INS9 MOV38 MOV43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS8 INS8 INS42 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS32 INS8 UPD66 UPD66 UPD42 MOV32 INS8 INS9 MOV27 INS32 UPD42 INS43 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS70 INS21 INS21 INS21 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS21 INS41 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS54 INS21 MOV41 INS67 INS67 INS67 MOV32 INS42 INS42 MOV60 INS70 MOV60 INS70 INS40 INS40 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS9 INS42 INS5 INS59 INS44 INS42 INS8 INS7 INS32 INS7 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS9 MOV32 INS42 MOV32 INS9 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS74 INS32 INS8 INS12 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS44 INS42 MOV8 MOV43 INS44 INS32 INS8 INS42 INS36 INS42 INS74 INS32 INS42 INS43 INS85 INS42 INS32 INS43 INS42 INS25 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS42 INS3 INS40 INS34 INS42 INS42 INS27 UPD42 UPD42 INS43 INS43 INS42 INS42 INS32 MOV25 INS41 INS44 INS8 INS42 INS42 INS27 INS43 INS85 UPD42 INS43 INS42 INS54 UPD42 INS11 MOV43 INS42 INS42 INS42 INS9 INS40 MOV60 INS25 INS11 MOV43 MOV43 INS42 INS42 INS32 INS42 INS42 INS32 INS8 INS5 INS27 INS5 INS34 INS45 INS32 UPD42 MOV42 INS42 INS42 INS42 INS32 INS8 INS8 INS9 MOV43 INS42 INS21 INS53 INS45 INS32 INS45 INS32 UPD42 MOV42 INS32 UPD42 INS42 INS8 INS12 MOV43 INS42 UPD43 INS32 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS43 INS85 INS40 INS34 INS43 INS85 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS21 INS60 INS21 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV60 MOV25 INS44 MOV8 UPD42 UPD42 INS32 INS42 INS32 INS41 INS42 MOV32 INS32 INS9 INS42 INS42 INS32 INS5 INS59 INS32 INS42 INS42 INS9 INS42 INS8 INS25 INS43 INS42 UPD43 UPD42 INS32 INS42 INS32 INS42 INS9 INS74 UPD42 MOV42 INS42 INS27 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS25 MOV32 INS8 INS8 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS45 INS42 INS45 INS52 INS42 INS42 INS42 INS3 INS43 INS27 MOV8 MOV25 INS21 MOV42 INS42 INS5 INS32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS40 INS27 INS32 UPD45 UPD45 MOV32 INS43 INS85 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS42 INS42 INS27 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL11 DEL36 DEL42 DEL42 DEL32 DEL27 DEL42 DEL52 DEL32 DEL41 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL52 DEL32 DEL42 DEL32 DEL32 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL83 DEL39 DEL42 DEL8 DEL31 DEL39 DEL42 DEL42 DEL32 DEL11 DEL43 DEL32 DEL42 DEL42 DEL32 DEL61 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL39 DEL9 DEL42 DEL52 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42