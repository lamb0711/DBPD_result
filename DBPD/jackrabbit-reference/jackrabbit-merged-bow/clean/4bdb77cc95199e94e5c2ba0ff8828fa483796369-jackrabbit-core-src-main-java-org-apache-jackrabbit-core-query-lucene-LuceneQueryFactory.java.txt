JCR-2715: Improved join query performance

Extend LuceneQueryFactory to handle more QOM constraints.
Simplify handling of bind variables.
Improve OperandEvaluator, including its javadocs.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1026361 13f79535-47bb-0310-9956-ffa450edef68

+import static javax.jcr.PropertyType.DATE;
+import static javax.jcr.PropertyType.DOUBLE;
+import static javax.jcr.PropertyType.LONG;
+import static javax.jcr.PropertyType.NAME;
+import static javax.jcr.PropertyType.STRING;
+import static javax.jcr.PropertyType.UNDEFINED;
+import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_OPERATOR_EQUAL_TO;
+import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN;
+import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO;
+import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN;
+import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO;
+import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_OPERATOR_LIKE;
+import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_OPERATOR_NOT_EQUAL_TO;
+import static org.apache.lucene.search.BooleanClause.Occur.MUST;
+import javax.jcr.PropertyType;
+import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.query.InvalidQueryException;
-import javax.jcr.query.qom.Literal;
+import javax.jcr.nodetype.PropertyDefinition;
+import javax.jcr.query.qom.And;
+import javax.jcr.query.qom.ChildNode;
+import javax.jcr.query.qom.Comparison;
+import javax.jcr.query.qom.Constraint;
+import javax.jcr.query.qom.DescendantNode;
+import javax.jcr.query.qom.DynamicOperand;
+import javax.jcr.query.qom.FullTextSearch;
+import javax.jcr.query.qom.Not;
+import javax.jcr.query.qom.Or;
+import javax.jcr.query.qom.PropertyExistence;
+import javax.jcr.query.qom.PropertyValue;
+import javax.jcr.query.qom.SameNode;
+import org.apache.jackrabbit.core.HierarchyManager;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.query.lucene.join.OperandEvaluator;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.query.qom.DefaultQOMTreeVisitor;
+import org.apache.jackrabbit.spi.commons.query.qom.FullTextSearchImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.JoinConditionImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.JoinImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.PropertyExistenceImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.SelectorImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.SourceImpl;
+import org.apache.lucene.search.BooleanClause.Occur;
-import org.apache.jackrabbit.core.HierarchyManager;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
-import org.apache.jackrabbit.spi.commons.query.qom.BindVariableValueImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.DefaultQOMTreeVisitor;
-import org.apache.jackrabbit.spi.commons.query.qom.JoinConditionImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.SelectorImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.FullTextSearchImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.PropertyExistenceImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.SourceImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.JoinImpl;
-    /**
-     * The Bind Variable values.
-     */
-    private final Map<Name, Value> bindVariables;
+    /** Operand evaluator */
+    private final OperandEvaluator evaluator;
-            Map<Name, Value> bindVariables) throws RepositoryException {
+            Map<String, Value> bindVariables) throws RepositoryException {
-        this.bindVariables = bindVariables;
+        this.evaluator =
+            new OperandEvaluator(session.getValueFactory(), bindVariables);
-            if (expr instanceof Literal) {
-                return parser.parse(
-                        ((Literal) expr).getLiteralValue().getString());
-            } else if (expr instanceof BindVariableValueImpl) {
-                Value value = this.bindVariables.get(
-                        ((BindVariableValueImpl) expr).getBindVariableQName());
-                if (value == null) {
-                    throw new InvalidQueryException("Bind variable not bound");
-                }
-                return parser.parse(value.getString());
-            } else {
-                throw new RepositoryException(
-                        "Unknown static operand type: " + expr);
-            }
+            return parser.parse(evaluator.getValue(expr).getString());
+    public Query create(
+            Constraint constraint, Map<String, NodeType> selectorMap)
+            throws RepositoryException {
+        if (constraint instanceof And) {
+            return getAndQuery((And) constraint, selectorMap);
+        } else if (constraint instanceof Or) {
+            return getOrQuery((Or) constraint, selectorMap);
+        } else if (constraint instanceof Not) {
+            return getNotQuery((Not) constraint, selectorMap);
+        } else if (constraint instanceof PropertyExistence) {
+            return getPropertyExistenceQuery((PropertyExistence) constraint);
+        } else if (constraint instanceof Comparison) {
+            return getComparisonQuery((Comparison) constraint, selectorMap);
+        } else if (constraint instanceof FullTextSearch) {
+            return null; // FIXME
+        } else if (constraint instanceof SameNode) {
+            return null; // FIXME
+        } else if (constraint instanceof ChildNode) {
+            return null; // FIXME
+        } else if (constraint instanceof DescendantNode) {
+            return null; // FIXME
+        } else {
+            throw new UnsupportedRepositoryOperationException(
+                    "Unknown constraint type: " + constraint);
+        }
+    }
+
+    private BooleanQuery getAndQuery(
+            And and, Map<String, NodeType> selectorMap)
+            throws RepositoryException {
+        BooleanQuery query = new BooleanQuery();
+        addBooleanConstraint(query, and.getConstraint1(), MUST, selectorMap);
+        addBooleanConstraint(query, and.getConstraint2(), MUST, selectorMap);
+        return query;
+    }
+
+    private BooleanQuery getOrQuery(Or or, Map<String, NodeType> selectorMap)
+            throws RepositoryException {
+        BooleanQuery query = new BooleanQuery();
+        addBooleanConstraint(query, or.getConstraint1(), SHOULD, selectorMap);
+        addBooleanConstraint(query, or.getConstraint2(), SHOULD, selectorMap);
+        return query;
+    }
+
+    private void addBooleanConstraint(
+            BooleanQuery query, Constraint constraint, Occur occur,
+            Map<String, NodeType> selectorMap) throws RepositoryException {
+        if (occur == MUST && constraint instanceof And) {
+            And and = (And) constraint;
+            addBooleanConstraint(query, and.getConstraint1(), occur, selectorMap);
+            addBooleanConstraint(query, and.getConstraint2(), occur, selectorMap);
+        } else if (occur == SHOULD && constraint instanceof Or) {
+            Or or = (Or) constraint;
+            addBooleanConstraint(query, or.getConstraint1(), occur, selectorMap);
+            addBooleanConstraint(query, or.getConstraint2(), occur, selectorMap);
+        } else {
+            query.add(create(constraint, selectorMap), occur);
+        }
+    }
+
+    private NotQuery getNotQuery(Not not, Map<String, NodeType> selectorMap)
+            throws RepositoryException {
+        return new NotQuery(create(not.getConstraint(), selectorMap));
+    }
+
+    private Query getPropertyExistenceQuery(PropertyExistence property)
+            throws RepositoryException {
+        String name = npResolver.getJCRName(session.getQName(
+                property.getPropertyName()));
+        return Util.createMatchAllQuery(name, version);
+    }
+
+    private Query getComparisonQuery(
+            Comparison comparison, Map<String, NodeType> selectorMap)
+            throws RepositoryException {
+        DynamicOperand operand = comparison.getOperand1();
+        if (operand instanceof PropertyValue) {
+            PropertyValue property = (PropertyValue) operand;
+            String field = npResolver.getJCRName(session.getQName(
+                    property.getPropertyName()));
+            int type = PropertyType.UNDEFINED;
+            NodeType nt = selectorMap.get(property.getSelectorName());
+            if (nt != null) {
+                for (PropertyDefinition pd : nt.getPropertyDefinitions()) {
+                    if (pd.getName().equals(property.getPropertyName())) {
+                        type = pd.getRequiredType();
+                    }
+                }
+            }
+            return getPropertyValueQuery(
+                    field, comparison.getOperator(),
+                    evaluator.getValue(comparison.getOperand2()), type);
+        } else {
+            throw new UnsupportedRepositoryOperationException(); // FIXME
+        }
+    }
+
+    private Query getPropertyValueQuery(
+            String field, String operator, Value value, int type)
+            throws RepositoryException {
+        Term term = getTerm(field, getValueString(value, type));
+        if (JCR_OPERATOR_EQUAL_TO.equals(operator)) {
+            return new JackrabbitTermQuery(term);
+        } else if (JCR_OPERATOR_GREATER_THAN.equals(operator)) {
+            return new RangeQuery(term, getTerm(field, "\uFFFF"), false);
+        } else if (JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO.equals(operator)) {
+            return new RangeQuery(term, getTerm(field, "\uFFFF"), true);
+        } else if (JCR_OPERATOR_LESS_THAN.equals(operator)) {
+            return new RangeQuery(getTerm(field, ""), term, false);
+        } else if (JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO.equals(operator)) {
+            return new RangeQuery(getTerm(field, ""), term, true);
+        } else if (JCR_OPERATOR_NOT_EQUAL_TO.equals(operator)) {
+            BooleanQuery or = new BooleanQuery();
+            or.add(new RangeQuery(getTerm(field, ""), term, false), SHOULD);
+            or.add(new RangeQuery(term, getTerm(field, "\uFFFF"), false), SHOULD);
+            return or;
+        } else if (JCR_OPERATOR_LIKE.equals(operator)) {
+            throw new UnsupportedRepositoryOperationException(); // FIXME
+        } else {
+            throw new UnsupportedRepositoryOperationException(); // FIXME
+        }
+    }
+
+    private Term getTerm(String field, String value) {
+        return new Term(PROPERTIES, FieldNames.createNamedValue(field, value));
+    }
+
+    private String getValueString(Value value, int type)
+            throws RepositoryException {
+        switch (value.getType()) {
+        case DATE:
+            return DateField.dateToString(value.getDate().getTime());
+        case DOUBLE:
+            return DoubleField.doubleToString(value.getDouble());
+        case LONG:
+            return LongField.longToString(value.getLong());
+        case NAME:
+            return npResolver.getJCRName(session.getQName(value.getString()));
+        default:
+            String string = value.getString();
+            if (type != UNDEFINED && type != STRING) {
+                return getValueString(
+                        session.getValueFactory().createValue(string, type),
+                        UNDEFINED);
+            } else {
+                return string;
+            }
+        }
+    }
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 UPD40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV29 MOV83 MOV83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 MOV43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 UPD74 INS42 INS43 INS42 INS74 INS42 INS42 INS25 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS21 INS21 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS25 INS42 INS43 INS42 INS74 INS42 INS42 INS41 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 INS39 INS42 INS42 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS41 INS42 MOV43 INS42 INS39 INS42 INS42 INS50 UPD66 UPD43 INS8 INS42 MOV43 INS43 UPD43 MOV43 INS62 INS8 INS25 INS42 INS43 INS43 INS43 INS43 INS59 INS32 INS32 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS27 INS8 INS25 INS42 INS43 INS43 INS43 INS14 INS42 INS43 INS59 INS32 INS42 INS43 INS43 INS43 INS43 INS59 INS62 INS8 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS14 INS32 INS49 INS41 INS49 INS41 INS49 INS41 INS49 MOV41 INS49 INS60 INS25 UPD42 INS14 MOV60 MOV41 INS42 UPD42 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS62 INS60 INS21 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS60 INS60 INS60 INS60 INS25 INS41 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS59 INS27 INS8 INS8 UPD42 INS43 INS32 INS42 INS42 INS32 INS42 INS43 INS41 INS62 INS8 INS25 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS59 INS32 INS32 INS27 INS62 INS60 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS32 INS14 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS27 INS27 INS41 INS41 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS14 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS43 INS41 INS62 INS8 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS32 INS9 INS14 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS32 INS9 INS14 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS42 INS32 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS45 INS43 INS32 INS42 INS9 INS14 INS42 INS42 INS42 INS60 INS21 INS21 INS41 INS32 INS8 INS8 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS42 INS42 INS33 INS42 INS43 INS41 INS62 INS8 INS25 INS32 INS42 INS32 INS21 INS42 INS42 INS42 INS45 INS43 INS32 INS42 INS9 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS53 INS53 INS42 INS43 INS42 INS42 INS33 INS42 INS43 INS41 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS14 INS14 INS42 INS42 INS33 INS42 INS43 INS41 INS53 INS42 INS32 INS43 INS43 INS32 INS42 INS9 INS43 INS42 INS32 INS9 INS43 INS43 INS42 INS33 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS27 INS42 INS45 INS42 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL43 DEL62 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8