JCR-2076: JSR 283: QOM and SQL2
- orderings (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@784061 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.commons.query.qom.QOMTreeVisitor;
-import org.apache.jackrabbit.spi.commons.query.qom.DefaultTraversingQOMTreeVisitor;
-import org.apache.jackrabbit.spi.commons.query.qom.LengthImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.LowerCaseImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.UpperCaseImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.FullTextSearchScoreImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.NodeLocalNameImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.NodeNameImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.PropertyValueImpl;
-import org.apache.jackrabbit.spi.commons.query.qom.DynamicOperandImpl;
-                                             OrderingImpl[] orderings,
+                                             Ordering[] orderings,
-        Sort sort = new Sort(createSortFields(orderings));
-
-                query.execute(searcher, sort, resultFetchHint)) {
+                query.execute(searcher, orderings, resultFetchHint)) {
-     * Creates sort fields for the ordering specifications.
+     * Creates internal orderings for the QOM ordering specifications.
-     * @param orderings the ordering specifications.
-     * @return the sort fields.
+     * @param orderings the QOM ordering specifications.
+     * @return the internal orderings.
+     * @throws RepositoryException if an error occurs.
-    protected SortField[] createSortFields(OrderingImpl[] orderings) {
-        List<SortField> sortFields = new ArrayList<SortField>();
-        for (final OrderingImpl ordering : orderings) {
-            QOMTreeVisitor visitor = new DefaultTraversingQOMTreeVisitor() {
-
-                public Object visit(LengthImpl node, Object data) throws Exception {
-                    PropertyValueImpl propValue = (PropertyValueImpl) node.getPropertyValue();
-                    return new SortField(propValue.getPropertyQName().toString(),
-                            new LengthSortComparator(nsMappings),
-                            !ordering.isAscending());
-                }
-
-                public Object visit(LowerCaseImpl node, Object data)
-                        throws Exception {
-                    SortField sf = (SortField) ((DynamicOperandImpl) node.getOperand()).accept(this, data);
-                    return new SortField(sf.getField(),
-                            new LowerCaseSortComparator(sf.getFactory()),
-                            !ordering.isAscending());
-                }
-
-                public Object visit(UpperCaseImpl node, Object data)
-                        throws Exception {
-                    SortField sf = (SortField) ((DynamicOperandImpl) node.getOperand()).accept(this, data);
-                    return new SortField(sf.getField(),
-                            new UpperCaseSortComparator(sf.getFactory()),
-                            !ordering.isAscending());
-                }
-
-                public Object visit(FullTextSearchScoreImpl node, Object data)
-                        throws Exception {
-                    // TODO: selector ignored
-                    return new SortField(null, SortField.SCORE,
-                            ordering.isAscending());
-                }
-
-                public Object visit(NodeLocalNameImpl node, Object data) throws Exception {
-                    return new SortField(FieldNames.LOCAL_NAME,
-                           SortField.STRING, !ordering.isAscending());
-                }
-
-                public Object visit(NodeNameImpl node, Object data) throws Exception {
-                    return new SortField(FieldNames.LABEL,
-                           SortField.STRING, !ordering.isAscending());
-                }
-
-                public Object visit(PropertyValueImpl node, Object data)
-                        throws Exception {
-                    return new SortField(node.getPropertyQName().toString(),
-                            scs, !ordering.isAscending());
-                }
-
-                public Object visit(OrderingImpl node, Object data)
-                        throws Exception {
-                    return ((DynamicOperandImpl) node.getOperand()).accept(this, data);
-                }
-            };
-            try {
-                sortFields.add((SortField) ordering.accept(visitor, null));
-            } catch (Exception e) {
-                // TODO
-            }
+    protected Ordering[] createOrderings(OrderingImpl[] orderings)
+            throws RepositoryException {
+        Ordering[] ords = new Ordering[orderings.length];
+        for (int i = 0; i < orderings.length; i++) {
+            ords[i] = Ordering.fromQOM(orderings[i], scs, nsMappings);
-        return sortFields.toArray(new SortField[sortFields.size()]);
+        return ords;

UPD5 INS42 UPD43 MOV43 INS8 UPD5 INS65 UPD43 UPD42 MOV60 INS24 MOV41 UPD43 UPD66 UPD66 UPD66 INS42 INS66 UPD42 INS5 INS58 INS27 INS37 INS8 INS42 UPD42 INS43 INS85 UPD42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 UPD42 UPD42 MOV42 INS5 INS40 UPD42 MOV42 INS34 INS7 INS43 INS85 INS2 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS2 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL32 DEL38 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL52 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL42 DEL42 DEL32 DEL38 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL52 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL42 DEL42 DEL32 DEL38 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL33 DEL40 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL40 DEL40 DEL32 DEL38 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL40 DEL40 DEL42 DEL42 DEL32 DEL38 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL38 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL52 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL32 DEL11 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8