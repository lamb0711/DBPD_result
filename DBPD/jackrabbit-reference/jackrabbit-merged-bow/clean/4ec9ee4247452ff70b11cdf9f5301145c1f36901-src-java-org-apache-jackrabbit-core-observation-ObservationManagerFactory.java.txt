- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.state.ItemStateProvider;
-import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
+import org.apache.jackrabbit.core.*;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.ItemManager;
-import org.apache.jackrabbit.core.HierarchyManager;
-import org.apache.jackrabbit.core.Path;
-import org.apache.jackrabbit.core.MalformedPathException;
+import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
+import org.apache.jackrabbit.core.state.ItemStateProvider;
- *
- * @author Marcel Reutegger
- * @version $Revision:  $, $Date:  $
-	    = Logger.getLogger(ObservationManagerFactory.class);
+            = Logger.getLogger(ObservationManagerFactory.class);
-	    = BufferUtils.blockingBuffer(new UnboundedFifoBuffer());
+            = BufferUtils.blockingBuffer(new UnboundedFifoBuffer());
-	notificationThread = new Thread(this, "ObservationManager");
-	notificationThread.setDaemon(true);
-	notificationThread.start();
+        notificationThread = new Thread(this, "ObservationManager");
+        notificationThread.setDaemon(true);
+        notificationThread.start();
-	// dispatch dummy event to mark end of notification
-	eventQueue.add(DISPOSE_MARKER);
-	try {
-	    notificationThread.join();
-	} catch (InterruptedException e) {
-	    // FIXME log exception ?
-	}
-	log.info("Notification of EventListeners stopped.");
+        // dispatch dummy event to mark end of notification
+        eventQueue.add(DISPOSE_MARKER);
+        try {
+            notificationThread.join();
+        } catch (InterruptedException e) {
+            // FIXME log exception ?
+        }
+        log.info("Notification of EventListeners stopped.");
-	synchronized (consumerChange) {
-	    if (readOnlyConsumers == null) {
-		readOnlyConsumers = Collections.unmodifiableSet(new HashSet(activeConsumers));
-	    }
-	    return readOnlyConsumers;
-	}
+        synchronized (consumerChange) {
+            if (readOnlyConsumers == null) {
+                readOnlyConsumers = Collections.unmodifiableSet(new HashSet(activeConsumers));
+            }
+            return readOnlyConsumers;
+        }
-	synchronized (consumerChange) {
-	    if (synchronousReadOnlyConsumers == null) {
-		synchronousReadOnlyConsumers = Collections.unmodifiableSet(new HashSet(synchronousConsumers));
-	    }
-	    return synchronousReadOnlyConsumers;
-	}
+        synchronized (consumerChange) {
+            if (synchronousReadOnlyConsumers == null) {
+                synchronousReadOnlyConsumers = Collections.unmodifiableSet(new HashSet(synchronousConsumers));
+            }
+            return synchronousReadOnlyConsumers;
+        }
-						       ItemManager itemMgr) {
-	return new SessionLocalObservationManager(session, itemMgr);
+                                                       ItemManager itemMgr) {
+        return new SessionLocalObservationManager(session, itemMgr);
-    public EventStateCollection createEventStateCollection(
-	    SessionImpl session,
-	    ItemStateProvider provider,
-	    HierarchyManager hmgr) {
-	return new EventStateCollection(this, session, provider, hmgr);
+    public EventStateCollection createEventStateCollection(SessionImpl session,
+                                                           ItemStateProvider provider,
+                                                           HierarchyManager hmgr) {
+        return new EventStateCollection(this, session, provider, hmgr);
-	DispatchAction action;
-	while ((action = (DispatchAction) eventQueue.remove()) != DISPOSE_MARKER) {
+        DispatchAction action;
+        while ((action = (DispatchAction) eventQueue.remove()) != DISPOSE_MARKER) {
-	    log.debug("got EventStateCollection");
-	    log.debug("event delivery to " + action.getEventConsumers().size() + " consumers started...");
-	    for (Iterator it = action.getEventConsumers().iterator(); it.hasNext();) {
-		EventConsumer c = (EventConsumer) it.next();
-		try {
-		    c.consumeEvents(action.getEventStates());
-		} catch (Throwable t) {
-		    log.warn("EventConsumer threw exception.", t);
-		    // move on to the next consumer
-		}
-	    }
-	    log.debug("event delivery finished.");
+            log.debug("got EventStateCollection");
+            log.debug("event delivery to " + action.getEventConsumers().size() + " consumers started...");
+            for (Iterator it = action.getEventConsumers().iterator(); it.hasNext();) {
+                EventConsumer c = (EventConsumer) it.next();
+                try {
+                    c.consumeEvents(action.getEventStates());
+                } catch (Throwable t) {
+                    log.warn("EventConsumer threw exception.", t);
+                    // move on to the next consumer
+                }
+            }
+            log.debug("event delivery finished.");
-	}
+        }
-	    throws RepositoryException {
-	Set consumers = new HashSet();
-	consumers.addAll(getSynchronousConsumers());
-	consumers.addAll(getAsynchronousConsumers());
-	for (Iterator it = consumers.iterator(); it.hasNext();) {
-	    EventConsumer c = (EventConsumer) it.next();
-	    c.prepareEvents(events);
-	}
+            throws RepositoryException {
+        Set consumers = new HashSet();
+        consumers.addAll(getSynchronousConsumers());
+        consumers.addAll(getAsynchronousConsumers());
+        for (Iterator it = consumers.iterator(); it.hasNext();) {
+            EventConsumer c = (EventConsumer) it.next();
+            c.prepareEvents(events);
+        }
-	// notify synchronous listeners
-	Set synchronous = getSynchronousConsumers();
-	if (log.isDebugEnabled()) {
-	    log.debug("notifying " + synchronous.size() + " synchronous listeners.");
-	}
-	for (Iterator it = synchronous.iterator(); it.hasNext();) {
-	    EventConsumer c = (EventConsumer) it.next();
-	    try {
-		c.consumeEvents(events);
-	    } catch (Throwable t) {
-		log.error("Synchronous EventConsumer threw exception.", t);
-		// move on to next consumer
-	    }
-	}
-	eventQueue.add(new DispatchAction(events, getAsynchronousConsumers()));
+        // notify synchronous listeners
+        Set synchronous = getSynchronousConsumers();
+        if (log.isDebugEnabled()) {
+            log.debug("notifying " + synchronous.size() + " synchronous listeners.");
+        }
+        for (Iterator it = synchronous.iterator(); it.hasNext();) {
+            EventConsumer c = (EventConsumer) it.next();
+            try {
+                c.consumeEvents(events);
+            } catch (Throwable t) {
+                log.error("Synchronous EventConsumer threw exception.", t);
+                // move on to next consumer
+            }
+        }
+        eventQueue.add(new DispatchAction(events, getAsynchronousConsumers()));
-	/**
-	 * The <code>Session</code> this <code>ObservationManager</code>
-	 * belongs to.
-	 */
-	private SessionImpl session;
+        /**
+         * The <code>Session</code> this <code>ObservationManager</code>
+         * belongs to.
+         */
+        private SessionImpl session;
-	/**
-	 * The <code>ItemManager</code> for this <code>ObservationManager</code>.
-	 */
-	private ItemManager itemMgr;
+        /**
+         * The <code>ItemManager</code> for this <code>ObservationManager</code>.
+         */
+        private ItemManager itemMgr;
-	/**
-	 * Creates an <code>ObservationManager</code> instance.
-	 *
-	 * @param session the <code>Session</code> this ObservationManager
-	 *                belongs to.
-	 * @param itemMgr {@link org.apache.jackrabbit.core.ItemManager} of the passed
-	 *                <code>Session</code>.
-	 * @throws NullPointerException if <code>session</code> or <code>itemMgr</code>
-	 *                              is <code>null</code>.
-	 */
-	SessionLocalObservationManager(SessionImpl session,
-				       ItemManager itemMgr) {
-	    if (session == null) {
-		throw new NullPointerException("session");
-	    }
-	    if (itemMgr == null) {
-		throw new NullPointerException("itemMgr");
-	    }
+        /**
+         * Creates an <code>ObservationManager</code> instance.
+         *
+         * @param session the <code>Session</code> this ObservationManager
+         *                belongs to.
+         * @param itemMgr {@link org.apache.jackrabbit.core.ItemManager} of the passed
+         *                <code>Session</code>.
+         * @throws NullPointerException if <code>session</code> or <code>itemMgr</code>
+         *                              is <code>null</code>.
+         */
+        SessionLocalObservationManager(SessionImpl session,
+                                       ItemManager itemMgr) {
+            if (session == null) {
+                throw new NullPointerException("session");
+            }
+            if (itemMgr == null) {
+                throw new NullPointerException("itemMgr");
+            }
-	    this.session = session;
-	    this.itemMgr = itemMgr;
-	}
+            this.session = session;
+            this.itemMgr = itemMgr;
+        }
-	/**
-	 * @see ObservationManager#addEventListener
-	 */
-	public void addEventListener(EventListener listener,
-				     long eventTypes,
-				     String absPath,
-				     boolean isDeep,
-				     String[] uuid,
-				     String[] nodeTypeName,
-				     boolean noLocal)
-		throws RepositoryException {
+        /**
+         * @see ObservationManager#addEventListener
+         */
+        public void addEventListener(EventListener listener,
+                                     long eventTypes,
+                                     String absPath,
+                                     boolean isDeep,
+                                     String[] uuid,
+                                     String[] nodeTypeName,
+                                     boolean noLocal)
+                throws RepositoryException {
-	    // create NodeType instances from names
-	    NodeTypeImpl[] nodeTypes;
-	    if (nodeTypeName == null) {
-		nodeTypes = null;
-	    } else {
-		NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
-		nodeTypes = new NodeTypeImpl[nodeTypeName.length];
-		for (int i = 0; i < nodeTypes.length; i++) {
-		    nodeTypes[i] = (NodeTypeImpl) ntMgr.getNodeType(nodeTypeName[i]);
-		}
-	    }
+            // create NodeType instances from names
+            NodeTypeImpl[] nodeTypes;
+            if (nodeTypeName == null) {
+                nodeTypes = null;
+            } else {
+                NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
+                nodeTypes = new NodeTypeImpl[nodeTypeName.length];
+                for (int i = 0; i < nodeTypes.length; i++) {
+                    nodeTypes[i] = (NodeTypeImpl) ntMgr.getNodeType(nodeTypeName[i]);
+                }
+            }
-	    Path path;
-	    try {
-		path = Path.create(absPath, session.getNamespaceResolver(), true);
-	    } catch (MalformedPathException mpe) {
-		String msg = "invalid path syntax: " + absPath;
-		log.error(msg, mpe);
-		throw new RepositoryException(msg, mpe);
-	    }
-	    // create filter
-	    EventFilter filter = new EventFilter(itemMgr,
-		    session,
-		    eventTypes,
-		    path,
-		    isDeep,
-		    uuid,
-		    nodeTypes,
-		    noLocal);
+            Path path;
+            try {
+                path = Path.create(absPath, session.getNamespaceResolver(), true);
+            } catch (MalformedPathException mpe) {
+                String msg = "invalid path syntax: " + absPath;
+                log.error(msg, mpe);
+                throw new RepositoryException(msg, mpe);
+            }
+            // create filter
+            EventFilter filter = new EventFilter(itemMgr,
+                    session,
+                    eventTypes,
+                    path,
+                    isDeep,
+                    uuid,
+                    nodeTypes,
+                    noLocal);
-	    EventConsumer consumer =
-		    new EventConsumer(session, listener, filter);
+            EventConsumer consumer =
+                    new EventConsumer(session, listener, filter);
-	    synchronized (consumerChange) {
+            synchronized (consumerChange) {
-		    // remove existing if any
-		    synchronousConsumers.remove(consumer);
-		    // re-add it
-		    synchronousConsumers.add(consumer);
-		    // reset read only consumer set
-		    synchronousReadOnlyConsumers = null;
-		} else {
-		    // remove existing if any
-		    activeConsumers.remove(consumer);
-		    // re-add it
-		    activeConsumers.add(consumer);
-		    // reset read only consumer set
-		    readOnlyConsumers = null;
-		}
-	    }
-	}
+                    // remove existing if any
+                    synchronousConsumers.remove(consumer);
+                    // re-add it
+                    synchronousConsumers.add(consumer);
+                    // reset read only consumer set
+                    synchronousReadOnlyConsumers = null;
+                } else {
+                    // remove existing if any
+                    activeConsumers.remove(consumer);
+                    // re-add it
+                    activeConsumers.add(consumer);
+                    // reset read only consumer set
+                    readOnlyConsumers = null;
+                }
+            }
+        }
-	/**
-	 * @see ObservationManager#removeEventListener(javax.jcr.observation.EventListener)
-	 */
-	public void removeEventListener(EventListener listener)
-		throws RepositoryException {
-	    EventConsumer consumer =
-		    new EventConsumer(session, listener, EventFilter.BLOCK_ALL);
+        /**
+         * @see ObservationManager#removeEventListener(javax.jcr.observation.EventListener)
+         */
+        public void removeEventListener(EventListener listener)
+                throws RepositoryException {
+            EventConsumer consumer =
+                    new EventConsumer(session, listener, EventFilter.BLOCK_ALL);
-	    synchronized (consumerChange) {
-		if (listener instanceof SynchronousEventListener) {
-		    synchronousConsumers.remove(consumer);
-		    // reset read only listener set
-		    synchronousReadOnlyConsumers = null;
-		} else {
-		    activeConsumers.remove(consumer);
-		    // reset read only listener set
-		    readOnlyConsumers = null;
-		}
-	    }
-	}
+            synchronized (consumerChange) {
+                if (listener instanceof SynchronousEventListener) {
+                    synchronousConsumers.remove(consumer);
+                    // reset read only listener set
+                    synchronousReadOnlyConsumers = null;
+                } else {
+                    activeConsumers.remove(consumer);
+                    // reset read only listener set
+                    readOnlyConsumers = null;
+                }
+            }
+        }
-	/**
-	 * @see ObservationManager#getRegisteredEventListeners()
-	 */
-	public EventListenerIterator getRegisteredEventListeners()
-		throws RepositoryException {
-	    return new EventListenerIteratorImpl(session,
-		    getSynchronousConsumers(),
-		    getAsynchronousConsumers());
-	}
+        /**
+         * @see ObservationManager#getRegisteredEventListeners()
+         */
+        public EventListenerIterator getRegisteredEventListeners()
+                throws RepositoryException {
+            return new EventListenerIteratorImpl(session,
+                    getSynchronousConsumers(),
+                    getAsynchronousConsumers());
+        }

MOV26 MOV26 MOV26 UPD40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL66 DEL65