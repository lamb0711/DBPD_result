JCR-860: Add relative path parameter to rep:excerpt()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@531167 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.name.NoPrefixDeclaredException;
+import org.apache.jackrabbit.util.ISO9075;
+import javax.jcr.PathNotFoundException;
+     * The name of the excerpt function without prefix but with left parenthesis.
+     */
+    private static final String EXCERPT_FUNC_LPAR = "excerpt(";
+
+    /**
+     * The start QName for the rep:excerpt function: rep:excerpt(
+     */
+    private static final QName REP_EXCERPT_LPAR = new QName(
+            QName.NS_REP_URI, EXCERPT_FUNC_LPAR);
+
+    /**
-                throw new RepositoryException(e.getMessage(), e);
+                if (isExcerptFunction(propertyName)) {
+                    // excerpt function with parameter
+                    return getExcerpt(propertyName);
+                } else {
+                    throw new RepositoryException(e.getMessage(), e);
+                }
-                    name.getLocalName().startsWith("excerpt(");
+                    name.getLocalName().startsWith(EXCERPT_FUNC_LPAR);
+        }
+
+        /**
+         * @param name a String.
+         * @return <code>true</code> if <code>name</code> is the rep:excerpt
+         *         function, <code>false</code> otherwise.
+         */
+        private boolean isExcerptFunction(String name) {
+            try {
+                return name.startsWith(
+                        NameFormat.format(REP_EXCERPT_LPAR, resolver));
+            } catch (NoPrefixDeclaredException e) {
+                // will never happen
+                return false;
+            }
+            return createExcerpt(node.getNodeId());
+        }
+
+        /**
+         * Returns an excerpt for the node indicated by the relative path
+         * parameter of the rep:excerpt function. The relative path is resolved
+         * against the node associated with this row.
+         *
+         * @param excerptCall the rep:excerpt function with the parameter as
+         *                    string.
+         * @return a StringValue or <code>null</code> if the excerpt cannot be
+         *         created or an error occurs.
+         * @throws RepositoryException if the function call is not well-formed.
+         */
+        private Value getExcerpt(String excerptCall) throws RepositoryException {
+            int idx = excerptCall.indexOf(EXCERPT_FUNC_LPAR);
+            int end = excerptCall.lastIndexOf(')');
+            if (end == -1) {
+                throw new RepositoryException("Missing right parenthesis");
+            }
+            String pathStr = excerptCall.substring(
+                    idx + EXCERPT_FUNC_LPAR.length(), end).trim();
+            try {
+                NodeImpl n = (NodeImpl) node.getNode(ISO9075.decode(pathStr));
+                return createExcerpt(n.getNodeId());
+            } catch (PathNotFoundException e) {
+                // does not exist
+                return null;
+            }
+        }
+
+        /**
+         * Creates an excerpt for node with the given <code>id</code>.
+         *
+         * @return a StringValue or <code>null</code> if the excerpt cannot be
+         *         created or an error occurs.
+         */
+        private Value createExcerpt(NodeId id) {
-                String excerpt = excerptProvider.getExcerpt(node.getNodeId(), 3, 150);
+                String excerpt = excerptProvider.getExcerpt(id, 3, 150);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS31 INS31 INS31 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS14 INS29 INS83 INS39 INS42 INS44 INS8 MOV29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 UPD42 INS44 INS66 INS66 INS43 INS40 INS42 INS65 INS65 MOV43 INS42 INS54 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS54 INS65 INS65 INS43 INS42 INS42 INS42 INS66 INS66 INS66 INS8 INS12 MOV32 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS66 INS66 INS66 INS42 INS8 INS41 INS44 INS8 UPD42 INS42 INS32 INS42 INS32 INS42 INS38 INS53 INS42 INS42 INS32 INS60 INS41 INS44 INS8 INS25 INS42 INS32 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS13 INS34 INS14 INS32 INS42 INS43 INS59 INS32 INS43 INS42 INS41 INS43 INS32 INS8 MOV8 INS42 INS42 INS32 INS42 INS9 INS43 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS33 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL45 DEL42 DEL34 DEL34