JCR-2625: spi2davex: reduce memory footprint of Node/PropertyInfoImpl

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@945164 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.LinkedHashSet;
-import java.util.Set;
-import org.apache.jackrabbit.spi.PropertyInfo;
+    // data deduced from property values
-    private String uniqueID;
-    private final Set<PropertyInfo> propertyInfos = new LinkedHashSet<PropertyInfo>();
-    private Set<ChildInfo> childInfos = null;
+    private final List<PropertyId> propertyIds = new ArrayList<PropertyId>(8);
+    private List<ChildInfo> childInfos = null;
-        List<PropertyId> l = new ArrayList<PropertyId>();
-        for (PropertyInfo propertyInfo : propertyInfos) {
-            l.add(propertyInfo.getId());
-        }
-        return l.iterator();
+        return propertyIds.iterator();
-    void addPropertyInfo(PropertyInfoImpl propInfo, IdFactory idFactory) throws RepositoryException {
-        propertyInfos.add(propInfo);
-
-        Name pn = propInfo.getId().getName();
-        if (NameConstants.JCR_UUID.equals(pn)) {
-            uniqueID = propInfo.getValues()[0].getString();
-            id = idFactory.createNodeId(uniqueID);
-        } else if (NameConstants.JCR_PRIMARYTYPE.equals(pn)) {
-            primaryNodeTypeName = propInfo.getValues()[0].getName();
-        } else if (NameConstants.JCR_MIXINTYPES.equals(pn)) {
-            QValue[] vs = propInfo.getValues();
-            Name[] mixins = new Name[vs.length];
-            for (int i = 0; i < vs.length; i++) {
-                mixins[i] = vs[i].getName();
+    void setPropertyInfos(PropertyInfoImpl[] propInfos, IdFactory idFactory) throws RepositoryException {
+        boolean resolveUUID = false;
+        for (PropertyInfoImpl propInfo : propInfos) {
+            Name pn = propInfo.getId().getName();
+            if (NameConstants.JCR_UUID.equals(pn)) {
+                id = idFactory.createNodeId(propInfo.getValues()[0].getString());
+                resolveUUID = true;
+            } else if (NameConstants.JCR_PRIMARYTYPE.equals(pn)) {
+                primaryNodeTypeName = propInfo.getValues()[0].getName();
+            } else if (NameConstants.JCR_MIXINTYPES.equals(pn)) {
+                QValue[] vs = propInfo.getValues();
+                Name[] mixins = new Name[vs.length];
+                for (int i = 0; i < vs.length; i++) {
+                    mixins[i] = vs[i].getName();
+                }
+                mixinNodeTypeNames = mixins;
-            mixinNodeTypeNames = mixins;
-    }
-    void resolveUUID(IdFactory idFactory) {
-        if (uniqueID != null) {
-            for (Object o : propertyInfos) {
-                PropertyInfoImpl propInfo = (PropertyInfoImpl) o;
+        propertyIds.clear();
+        for (PropertyInfoImpl propInfo : propInfos) {
+            if (resolveUUID) {
+            propertyIds.add(propInfo.getId());
+
-            childInfos = new LinkedHashSet<ChildInfo>();
+            childInfos = new ArrayList<ChildInfo>();
-    void setNumberOfChildNodes(long numberOfChildNodes) {
-        if (numberOfChildNodes == 0) {
-            childInfos = Collections.<ChildInfo>emptySet();
-        } // else: wait for calls to #addChildInfo
+    void markAsLeafNode() {
+        childInfos = Collections.emptyList();
-        return !(id == null || primaryNodeTypeName == null || propertyInfos.isEmpty());
-    }
-
-    void checkCompleted() throws RepositoryException {
-        if (!isCompleted()) {
-            throw new RepositoryException("Incomplete NodeInfo");
-        }
+        return (id != null && primaryNodeTypeName != null && !propertyIds.isEmpty());
-        return uniqueID;
+        if (id.getUniqueID() != null && id.getPath() == null) {
+            return id.getUniqueID();
+        } else {
+            return null;
+        }

INS31 MOV74 MOV59 UPD74 UPD42 INS44 INS8 INS42 INS8 MOV43 INS42 INS8 UPD42 UPD43 INS5 INS42 INS60 INS70 INS21 INS70 MOV21 INS25 INS34 UPD42 MOV43 INS85 INS39 INS59 MOV44 INS42 MOV8 INS32 INS44 INS42 INS8 INS36 INS27 INS8 INS8 UPD42 INS42 INS9 INS42 INS42 INS43 INS42 INS25 INS21 UPD27 MOV27 INS27 INS27 INS41 MOV41 INS42 INS42 INS8 INS32 UPD42 UPD27 INS38 INS32 INS33 INS32 INS33 INS32 INS33 MOV21 INS42 INS42 INS32 UPD27 UPD27 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD74 UPD42 MOV42 MOV42 UPD42 INS32 INS42 INS9 UPD43 INS42 INS42 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL8 DEL25 DEL8 DEL32 DEL36 DEL38 DEL42 DEL39 DEL42 DEL42 DEL43 DEL32 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL8 DEL31