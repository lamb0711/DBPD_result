- improved versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@122838 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.ReferenceMap;
-import org.apache.jackrabbit.core.nodetype.NodeDefId;
-import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
-import org.apache.jackrabbit.core.state.ItemStateException;
-import org.apache.jackrabbit.core.state.PersistentItemStateProvider;
-import org.apache.jackrabbit.core.state.PersistentNodeState;
-import org.apache.jackrabbit.core.util.uuid.UUID;
-import org.apache.log4j.Logger;
-import javax.jcr.Value;
-import javax.jcr.Workspace;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.*;
- * This Class provides implements the persistent part of the versionin. the
- * current implementation uses the 'normal' repository content as storage.
+ * This interface defines the access to the persistence layer of the
+ * versioning. The way how the versions are stored may totaly differ from
+ * the way they are exposed to the client.
-public class PersistentVersionManager {
-
-
-    /**
-     * the logger
-     */
-    private static Logger log = Logger.getLogger(PersistentVersionManager.class);
-
-    /**
-     * root path for version storage
-     */
-    public static final QName VERSION_HISTORY_ROOT_NAME = new QName(NamespaceRegistryImpl.NS_JCR_URI, "persistentVersionStorage");
-
-    /**
-     * name of the 'jcr:historyId' property
-     */
-    public static final QName PROPNAME_HISTORY_ID = new QName(NamespaceRegistryImpl.NS_JCR_URI, "historyId");
-    /**
-     * name of the 'jcr:versionId' property
-     */
-    public static final QName PROPNAME_VERSION_ID = new QName(NamespaceRegistryImpl.NS_JCR_URI, "versionId");
-    /**
-     * name of the 'jcr:versionLabels' node
-     */
-    public static final QName NODENAME_VERSION_LABELS = new QName(NamespaceRegistryImpl.NS_JCR_URI, "versionLabels");
-    /**
-     * name of the 'jcr:frozen' property
-     */
-    public static final QName NODENAME_FROZEN = new QName(NamespaceRegistryImpl.NS_JCR_URI, "frozen");
-    /**
-     * name of the 'jcr:name' property
-     */
-    public static final QName PROPNAME_NAME = new QName(NamespaceRegistryImpl.NS_JCR_URI, "name");
-    /**
-     * name of the 'jcr:version' property
-     */
-    public static final QName PROPNAME_VERSION = new QName(NamespaceRegistryImpl.NS_JCR_URI, "version");
-
-    /**
-     * the id of the persisten root node
-     */
-    private static final NodeId PERSISTENT_ROOT_ID = new NodeId("faceface-ab3b-48a9-b31b-e7d0a9c1c3b1");
-
-    /**
-     * the persistent root node of the version histories
-     */
-    private final PersistentNode historyRoot;
-
-    /**
-     * the state manager for the version storage
-     */
-    private PersistentItemStateProvider stateMgr;
-
-    /**
-     * the nodetype manager for the version storage
-     */
-    private NodeTypeManagerImpl ntMgr;
-
-    /**
-     * The representation version managers (per workspace)
-     */
-    private HashMap versionManagers = new HashMap();
-
-    /**
-     * the version histories. key=uuid, value=version history
-     */
-    private Map histories = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
-
-    /**
-     * Creates a new PersistentVersionManager.
-     *
-     * @param session
-     * @throws RepositoryException
-     */
-    public PersistentVersionManager(SessionImpl session) throws RepositoryException {
-        this.stateMgr = ((WorkspaceImpl) session.getWorkspace()).getPersistentStateManager();
-        this.ntMgr = session.getNodeTypeManager();
-
-        try {
-            NodeImpl systemRoot = ((RepositoryImpl) session.getRepository()).getSystemRootNode(session);
-            // enable this to make the persistence storage visible
-            if (true) {
-                // check for versionhistory root
-                if (!systemRoot.hasNode(VERSION_HISTORY_ROOT_NAME)) {
-                    // if not exist, create
-                    systemRoot.addNode(VERSION_HISTORY_ROOT_NAME, NodeTypeRegistry.NT_UNSTRUCTURED);
-                    systemRoot.save();
-                }
-                PersistentNodeState nodeState = (PersistentNodeState) stateMgr.getItemState(new NodeId(systemRoot.getNode(VERSION_HISTORY_ROOT_NAME).internalGetUUID()));
-                historyRoot = new PersistentNode(stateMgr, ntMgr, nodeState);
-            } else {
-                if (!stateMgr.hasItemState(PERSISTENT_ROOT_ID)) {
-                    PersistentNodeState nodeState = stateMgr.createNodeState(PERSISTENT_ROOT_ID.getUUID(), NodeTypeRegistry.NT_UNSTRUCTURED, null);
-                    nodeState.setDefinitionId(new NodeDefId(ntMgr.getRootNodeDefinition().unwrap()));
-                    nodeState.store();
-                    historyRoot = new PersistentNode(stateMgr, ntMgr, nodeState);
-                } else {
-                    PersistentNodeState nodeState = (PersistentNodeState) stateMgr.getItemState(PERSISTENT_ROOT_ID);
-                    historyRoot = new PersistentNode(stateMgr, ntMgr, nodeState);
-                }
-            }
-        } catch (ItemStateException e) {
-            throw new RepositoryException("Unable to initialize PersistentVersionManager: " + e.toString());
-        }
-    }
-
-    /**
-     * returns the version manager
-     *
-     * @return
-     */
-    public synchronized VersionManager getVersionManager(Workspace wsp) {
-        VersionManager vm = (VersionManager) versionManagers.get(wsp.getName());
-        if (vm == null) {
-            vm = new VersionManager(this);
-            versionManagers.put(wsp.getName(), vm);
-        }
-        return vm;
-    }
-
+public interface PersistentVersionManager {
-    synchronized InternalVersionHistory createVersionHistory(NodeImpl node)
-            throws RepositoryException {
-
-        // create deep path
-        String uuid = UUID.randomUUID().toString();
-        QName historyNodeName = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, uuid);
-        if (historyRoot.hasNode(historyNodeName)) {
-            historyRoot.removeNode(historyNodeName);
-            historyRoot.store();
-        }
-
-        // create new history node in the persistent state
-        InternalVersionHistory hist = InternalVersionHistory.create(this, historyRoot, uuid, historyNodeName, node);
-        histories.put(hist.getId(), hist);
-
-        // notify version managers
-        onVersionHistoryModified(hist);
-        return hist;
-    }
+    public InternalVersionHistory createVersionHistory(NodeImpl node)
+            throws RepositoryException;
-    synchronized InternalVersionHistory getVersionHistory(String histId)
-            throws RepositoryException {
-
-        InternalVersionHistory hist = (InternalVersionHistory) histories.get(histId);
-        if (hist == null) {
-            // we cannot used the uuid, since the persistent state do not share the same ids
-            QName historyNodeName = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, histId);
-            PersistentNode hNode = historyRoot.getNode(historyNodeName, 1);
-            if (hNode != null) {
-                hist = new InternalVersionHistory(this, hNode);
-                histories.put(histId, hist);
-            }
-        }
-        return hist;
-    }
+    public InternalVersionHistory getVersionHistory(String histId)
+            throws RepositoryException;
-    synchronized boolean hasVersionHistory(String histId) {
-        if (histories.containsKey(histId)) {
-            return true;
-        } else {
-            return historyRoot.hasNode(new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, histId));
-        }
-    }
+    public boolean hasVersionHistory(String histId);
-     * returns an iterator over all existing version histories
+     * returns an iterator over the external ids of the version histories
-    synchronized Iterator getVersionHistories() throws RepositoryException {
-        PersistentNode[] ph = historyRoot.getChildNodes();
-        ArrayList list = new ArrayList(ph.length);
-        for (int i = 0; i < ph.length; i++) {
-            list.add(getVersionHistory(ph[i].getName().getLocalName()));
-        }
-        return list.iterator();
-    }
+    public Iterator getVersionHistoryIds() throws RepositoryException;
-    synchronized int getNumVersionHistories() throws RepositoryException {
-        return historyRoot.getChildNodes().length;
-    }
+    public int getNumVersionHistories() throws RepositoryException;
-    synchronized InternalVersion getVersion(String histId, String versionId)
-            throws RepositoryException {
-        InternalVersionHistory history = getVersionHistory(histId);
-        return history.getVersion(versionId);
-    }
+    public InternalVersion getVersion(String histId, String versionId)
+            throws RepositoryException;
-    synchronized InternalVersion getVersion(String versionId)
-            throws RepositoryException {
-
-        // todo: implement better
-        PersistentNode[] ph = historyRoot.getChildNodes();
-        for (int i = 0; i < ph.length; i++) {
-            InternalVersionHistory vh = getVersionHistory(ph[i].getName().getLocalName());
-            InternalVersion v = vh.getVersion(versionId);
-            if (v != null) {
-                return v;
-            }
-        }
-        return null;
-    }
+    public InternalVersion getVersion(String versionId)
+            throws RepositoryException;
-    synchronized boolean hasVersion(String versionId) {
-        // todo: implement better
-        try {
-            PersistentNode[] ph = historyRoot.getChildNodes();
-            for (int i = 0; i < ph.length; i++) {
-                InternalVersionHistory vh = getVersionHistory(ph[i].getName().getLocalName());
-                if (vh.hasVersion(versionId)) {
-                    return true;
-                }
-            }
-        } catch (RepositoryException e) {
-            // ignore
-        }
-        return false;
-    }
+    public boolean hasVersion(String versionId);
-     * is informed by the versions if they were modified
-     *
-     * @param version
+     * checks, if the item with the given external id exists
+     * @param externalId
+     * @return
-    void onVersionModified(InternalVersion version) throws RepositoryException {
-        // check if version manager already generated item states
-        Iterator iter = versionManagers.values().iterator();
-        while (iter.hasNext()) {
-            ((VersionManager) iter.next()).onVersionModified(version);
-        }
-    }
+    public boolean hasItem(String externalId);
-     * is informed by the versions if they were modified
-     *
-     * @param vh
+     * returns the item referred by the external id
+     * @param externalId
+     * @return
+     * @throws RepositoryException
-    void onVersionHistoryModified(InternalVersionHistory vh) throws RepositoryException {
-        // check if version manager already generated item states
-        Iterator iter = versionManagers.values().iterator();
-        while (iter.hasNext()) {
-            ((VersionManager) iter.next()).onVersionHistoryModified(vh);
-        }
-    }
+    public InternalVersionItem getItemByExternal(String externalId)
+            throws RepositoryException;
+
+    /**
+     * returns the item referred by the internal id
+     * @param internalId
+     * @return
+     * @throws RepositoryException
+     */
+    public InternalVersionItem getItemByInternal(String internalId)
+            throws RepositoryException;
-    synchronized InternalVersion checkin(NodeImpl node) throws RepositoryException {
-        // assuming node is versionable and checkout (check in nodeimpl)
-        // To create a new version of a versionable node N, the client calls N.checkin.
-        // This causes the following series of events:
-        String histUUID = node.getProperty(VersionManager.PROPNAME_VERSION_HISTORY).getString();
-        InternalVersionHistory history = getVersionHistory(histUUID);
-
-        // 0. resolve the predecessors
-        Value[] values = node.getProperty(VersionManager.PROPNAME_PREDECESSORS).getValues();
-        InternalVersion[] preds = new InternalVersion[values.length];
-        for (int i = 0; i < values.length; i++) {
-            preds[i] = history.getVersion(values[i].getString());
-        }
-
-        // 0.1 search a predecessor, suitable for generating the new name
-        String versionName = null;
-        int maxDots = Integer.MAX_VALUE;
-        for (int i = 0; i < preds.length; i++) {
-            // take the first pred. without a successor
-            if (preds[i].getSuccessors().length == 0) {
-                versionName = preds[i].getName().getLocalName(); //assuming no namespaces in version names
-                // need to count the dots
-                int pos = -1;
-                int numDots = 0;
-                while (versionName.indexOf('.', pos + 1) >= 0) {
-                    pos = versionName.indexOf('.', pos + 1);
-                    numDots++;
-                }
-                if (numDots < maxDots) {
-                    maxDots = numDots;
-                    versionName = pos < 0 ? "1.0" : versionName.substring(0, pos + 1) + (Integer.parseInt(versionName.substring(pos + 1)) + 1);
-                }
-                break;
-            }
-        }
-        // if no empty found, generate new name
-        if (versionName == null) {
-            versionName = preds[0].getName().getLocalName();
-            do {
-                versionName += ".1";
-            } while (history.hasVersion(new QName("", versionName)));
-        }
-
-        return history.checkin(new QName("", versionName), node);
-    }
+    public InternalVersion checkin(NodeImpl node) throws RepositoryException;

MOV31 MOV31 UPD40 INS31 INS31 INS31 MOV29 INS83 MOV43 INS42 MOV44 MOV43 MOV29 INS83 MOV43 INS42 MOV44 MOV43 MOV29 INS39 INS42 MOV44 MOV43 UPD42 MOV43 UPD83 UPD83 MOV29 UPD83 MOV43 UPD42 MOV44 MOV43 MOV29 UPD83 UPD42 MOV44 MOV29 UPD83 MOV83 MOV39 UPD42 MOV42 INS44 INS29 INS83 INS43 INS42 INS44 INS83 INS43 INS42 INS44 MOV43 UPD83 UPD66 INS66 UPD66 MOV65 INS65 MOV43 UPD42 MOV42 MOV65 MOV65 INS65 INS65 UPD42 MOV42 MOV43 INS42 INS65 MOV65 UPD42 MOV42 MOV43 INS42 UPD66 UPD66 INS42 UPD66 UPD42 INS42 UPD66 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL40 DEL14 DEL59 DEL23 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL59 DEL60 DEL9 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL52 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL52 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL22 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL52 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL42 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL32 DEL41 DEL8 DEL25 DEL8 DEL83 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL24 DEL33 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL8 DEL24 DEL8 DEL42 DEL43 DEL44 DEL8 DEL12 DEL54 DEL9 DEL41 DEL8 DEL31 DEL29 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL40 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL13 DEL42 DEL34 DEL27 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL13 DEL42 DEL34 DEL27 DEL32 DEL7 DEL21 DEL42 DEL37 DEL21 DEL8 DEL61 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL45 DEL42 DEL42 DEL34 DEL42 DEL34 DEL27 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL32 DEL34 DEL27 DEL36 DEL27 DEL16 DEL7 DEL21 DEL8 DEL25 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL33 DEL27 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL43 DEL45 DEL42 DEL14 DEL32 DEL19 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL45 DEL42 DEL14 DEL42 DEL32 DEL41 DEL8