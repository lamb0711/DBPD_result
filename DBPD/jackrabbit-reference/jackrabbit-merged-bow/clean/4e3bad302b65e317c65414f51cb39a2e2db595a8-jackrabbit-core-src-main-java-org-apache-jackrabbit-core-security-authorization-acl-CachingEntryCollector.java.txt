JCR-2950: remove synchronized block scope and special case root node in CachingEntryCollector 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1350686 13f79535-47bb-0310-9956-ffa450edef68

-    private final Map<NodeId, Entries> cache;
-    private final Object monitor = new Object();
+    private final EntryCache cache;
-     *
+     * 
-    @SuppressWarnings("unchecked")    
-
-        int maxsize = 5000;
-        String propname = "org.apache.jackrabbit.core.security.authorization.acl.CachingEntryCollector.maxsize";
-        try {
-            maxsize = Integer.parseInt(System.getProperty(propname,
-                    Integer.toString(maxsize)));
-        } catch (NumberFormatException ex) {
-            log.error("Parsing system property " + propname + " with value: "
-                    + System.getProperty(propname), ex);
-        }
-
-        log.info("Creating cache with max size of: " + maxsize);
-
-        cache = new GrowingLRUMap(1024, maxsize);
+        cache = new EntryCache();
-        synchronized (monitor) {
-            cache.clear();
-        }
+        cache.clear();
-    @Override    
+    @Override
-        Entries entries;
-        synchronized (monitor) {
-            entries = cache.get(nodeId);
-            if (entries == null) {
-                // fetch entries and update the cache
-                entries = updateCache(node);
-            } else {
-                log.debug("Cache hit for nodeId {}", nodeId);
-            }
+        Entries entries = cache.get(nodeId);
+        if (entries == null) {
+            // fetch entries and update the cache
+            entries = updateCache(node);
-    
+
-        Entries entries;
-        synchronized (monitor) {
-            entries = cache.get(nodeId);
-            if (entries == null) {
-                // fetch entries and update the cache
-                NodeImpl n = getNodeById(nodeId);
-                entries = updateCache(n);
-            } else {
-                log.debug("Cache hit for nodeId {}", nodeId);
-            }
+        Entries entries = cache.get(nodeId);
+        if (entries == null) {
+            // fetch entries and update the cache
+            NodeImpl n = getNodeById(nodeId);
+            entries = updateCache(n);
-     *
+     * 
-            // find the next access control ancestor in the hierarchy
-            // 'null' indicates that there is no ac-controlled ancestor.
-            NodeId nextId = null;
-            NodeImpl n = node;            
-            while (nextId == null && !rootID.equals(n.getNodeId())) {
-                if (cache.containsKey(n.getNodeId())) {
-                    nextId = n.getNodeId();
-                } else if (cache.containsKey(n.getParentId())) {
-                    nextId = n.getParentId();
-                } else {
-                    n = (NodeImpl) n.getParent();
-                    if (hasEntries(n)) {
-                        nextId = n.getNodeId();
-                    } // else: not access controlled -> test next ancestors
-                }
-            }
-
-            entries.setNextId(nextId);
+            entries.setNextId(getNextID(node));
-
-            log.debug("Update cache for node {}: {}", node, entries);
+     * Find the next access control ancestor in the hierarchy 'null' indicates
+     * that there is no ac-controlled ancestor.
+     *
+     * @param node The target node for which the cache needs to be updated.
+     * @return The NodeId of the next access controlled ancestor in the hierarchy
+     * or null
+     */
+    private NodeId getNextID(NodeImpl node) throws RepositoryException {
+        NodeImpl n = node;
+        NodeId nextId = null;
+        while (nextId == null && !isRootId(n.getNodeId())) {
+            NodeId parentId = n.getParentId();
+            if (cache.containsKey(parentId)) {
+                nextId = parentId;
+            } else {
+                NodeImpl parent = (NodeImpl) n.getParent();
+                if (hasEntries(parent)) {
+                    nextId = parentId;
+                } else {
+                    // try next ancestor
+                    n = parent;
+                }
+            }
+        }
+        return nextId;
+    }
+
+    /**
+     * Returns {@code true} if the specified {@code nodeId} is the ID of the
+     * root node; false otherwise.
+     *
+     * @param nodeId The identifier of the node to be tested.
+     * @return {@code true} if the given id is the identifier of the root node.
+     */
+    private boolean isRootId(NodeId nodeId) {
+        return rootID.equals(nodeId);
+    }
+
+    /**
-        // no acl defined here
+        // no ACL defined here
-            synchronized (monitor) {
-                if ((type & POLICY_ADDED) == POLICY_ADDED) {
-                    // clear the complete cache since the nextAcNodeId may
-                    // have changed due to the added acl.
-                    log.debug("Policy added, clearing the cache");
-                    cache.clear();
-                    break; // no need for further processing.
-                } else if ((type & POLICY_REMOVED) == POLICY_REMOVED) {
-                    // clear the entry and change the entries having a nextID
-                    // pointing to this node.
-                    Entries ce = cache.remove(nodeId);
-                    if (ce != null) {
-                        NodeId nextId = ce.getNextId();
-                        for (Entries entry : cache.values()) {
-                            if (nodeId.equals(entry.getNextId())) {
-                                entry.setNextId(nextId);
-                            }
-                        }
-                    }
-                } else if ((type & POLICY_MODIFIED) == POLICY_MODIFIED) {
-                    // simply clear the cache entry -> reload upon next access.
-                    cache.remove(nodeId);
-                } else if ((type & MOVE) == MOVE) {
-                    // some sort of move operation that may affect the cache
-                    log.debug("Move operation, clearing the cache");
-                    cache.clear();
-                    break; // no need for further processing.
-                }
+            if ((type & POLICY_ADDED) == POLICY_ADDED) {
+                // clear the complete cache since the nextAcNodeId may
+                // have changed due to the added ACL.
+                log.debug("Policy added, clearing the cache");
+                cache.clear();
+                break; // no need for further processing.
+            } else if ((type & POLICY_REMOVED) == POLICY_REMOVED) {
+                // clear the entry and change the entries having a nextID
+                // pointing to this node.
+                cache.remove(nodeId, true);
+            } else if ((type & POLICY_MODIFIED) == POLICY_MODIFIED) {
+                // simply clear the cache entry -> reload upon next access.
+                cache.remove(nodeId, false);
+            } else if ((type & MOVE) == MOVE) {
+                // some sort of move operation that may affect the cache
+                log.debug("Move operation, clearing the cache");
+                cache.clear();
+                break; // no need for further processing.
+
+    //--------------------------------------------------------------------------
+    /**
+     * A cache to lookup the ACEs defined on a given (access controlled)
+     * node. The internal map uses the ID of the node as key while the value
+     * consists of {@Entries} objects that not only provide the ACEs defined
+     * for that node but also the ID of the next access controlled parent node.
+     */
+    private class EntryCache {
+
+        private final Map<NodeId, Entries> cache;
+        private Entries rootEntries;
+
+        @SuppressWarnings("unchecked")
+        public EntryCache() {
+            int maxsize = 5000;
+            String propname = "org.apache.jackrabbit.core.security.authorization.acl.CachingEntryCollector.maxsize";
+            try {
+                maxsize = Integer.parseInt(System.getProperty(propname, Integer.toString(maxsize)));
+            } catch (NumberFormatException ex) {
+                log.debug("Parsing system property " + propname + " with value: " + System.getProperty(propname), ex);
+            }
+
+            log.info("Creating cache with max size of: " + maxsize);
+
+            cache = new GrowingLRUMap(1024, maxsize);
+        }
+
+        public boolean containsKey(NodeId id) {
+            if (isRootId(id)) {
+                return rootEntries != null;
+            } else {
+                synchronized (cache) {
+                    return cache.containsKey(id);
+                }
+            }
+        }
+
+        public void clear() {
+            rootEntries = null;
+            synchronized (cache) {
+                cache.clear();
+            }
+        }
+
+        public Entries get(NodeId id) {
+            Entries result;
+
+            if (isRootId(id)) {
+                result = rootEntries;
+            } else {
+                synchronized (cache) {
+                    result = cache.get(id);
+                }
+            }
+
+            if (result != null) {
+                log.debug("Cache hit for nodeId {}", id);
+            } else {
+                log.debug("Cache miss for nodeId {}", id);
+            }
+
+            return result;
+        }
+
+        public void put(NodeId id, Entries entries) {
+            log.debug("Updating cache for nodeId {}", id);
+
+            // fail early on potential cache corruption
+            if (id.equals(entries.getNextId())) {
+                throw new IllegalArgumentException("Trying to update cache entry for " + id + " with a circular reference");
+            }
+
+            if (isRootId(id)) {
+                rootEntries = entries;
+            } else {
+                synchronized (cache) {
+                    cache.put(id, entries);
+                }
+            }
+        }
+
+        public void remove(NodeId id, boolean adjustNextIds) {
+            log.debug("Removing nodeId {} from cache", id);
+            Entries result;
+            synchronized (cache) {
+                if (isRootId(id)) {
+                    result = rootEntries;
+                    rootEntries = null;
+                } else {
+                    result = cache.remove(id);
+                }
+
+                if (adjustNextIds && result != null) {
+                    NodeId nextId = result.getNextId();
+                    for (Entries entry : cache.values()) {
+                        if (id.equals(entry.getNextId())) {
+                            // fail early on potential cache corruption
+                            if (id.equals(nextId)) {
+                                throw new IllegalArgumentException("Trying to update cache entry for " + id + " with a circular reference");
+                            }
+                            entry.setNextId(nextId);
+                        }
+                    }
+                }
+            }
+        }
+    }

INS23 INS31 INS31 INS31 INS31 INS31 INS55 MOV29 MOV83 MOV83 UPD43 MOV43 INS59 MOV29 INS42 MOV44 MOV44 MOV43 INS8 MOV78 INS83 INS39 INS42 INS8 MOV60 MOV8 MOV29 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 MOV8 INS29 INS83 INS42 MOV23 INS23 MOV31 INS31 MOV31 INS31 INS31 INS31 UPD42 INS42 MOV46 INS21 MOV21 INS21 MOV25 INS60 MOV41 MOV60 INS25 MOV41 INS65 INS65 INS65 INS42 INS43 INS42 INS42 MOV60 MOV60 INS61 INS41 INS65 INS65 INS65 INS43 INS42 INS41 INS70 MOV21 INS65 INS83 INS43 INS59 INS83 UPD42 INS83 INS39 INS42 INS44 INS8 UPD83 UPD42 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS7 INS32 MOV43 MOV43 INS59 MOV38 INS8 INS66 INS66 INS42 INS66 INS66 INS66 INS42 MOV27 INS8 INS42 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS32 MOV44 MOV32 MOV8 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS42 MOV43 INS42 INS25 INS21 INS42 INS43 INS42 INS60 MOV25 INS25 INS41 INS43 INS42 INS43 INS42 INS21 INS25 INS25 INS43 INS42 INS39 INS42 INS21 INS60 INS51 INS42 INS14 INS42 INS42 MOV32 INS42 MOV32 INS21 MOV21 INS60 INS25 INS66 INS66 INS66 INS42 INS42 INS42 MOV25 MOV60 MOV60 INS32 INS8 INS8 INS7 UPD42 INS42 MOV43 INS59 INS8 INS8 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS32 INS8 INS32 INS8 INS8 INS42 INS32 INS43 INS59 INS42 MOV8 UPD43 MOV43 INS32 INS43 INS59 MOV32 MOV8 INS8 INS42 INS42 INS41 INS51 INS42 INS33 INS42 UPD42 UPD42 INS21 INS51 INS42 INS33 MOV21 INS21 INS42 INS42 UPD45 MOV45 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS21 INS51 INS42 INS42 INS45 INS42 INS42 INS42 INS25 UPD42 INS42 INS42 INS32 UPD42 MOV32 INS42 INS42 MOV32 UPD42 MOV42 INS60 INS25 INS8 INS27 INS42 INS8 INS7 INS42 INS8 INS32 INS42 INS42 INS14 INS7 INS42 INS8 INS32 INS8 INS8 INS27 INS42 INS42 INS43 INS59 INS32 MOV8 INS8 INS21 INS42 INS33 INS41 INS42 INS42 MOV21 UPD42 UPD42 INS45 UPD42 MOV42 MOV42 INS45 INS42 INS43 INS27 INS42 INS42 INS21 INS42 INS42 INS21 INS21 INS21 INS42 INS27 INS42 INS42 INS42 MOV11 UPD42 MOV42 UPD42 MOV42 MOV21 INS32 UPD42 INS32 INS42 INS45 INS42 INS45 INS32 INS7 INS7 INS7 UPD42 MOV42 MOV33 INS43 INS42 INS42 INS42 INS9 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS42 INS42 INS9 UPD42 UPD42 INS42 MOV42 MOV42 UPD42 MOV42 UPD42 INS8 UPD42 INS25 MOV21 INS32 MOV8 INS42 INS42 INS42 INS53 INS14 INS43 INS27 INS42 INS45 INS42 INS45 DEL42 DEL14 DEL59 DEL23 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL51 DEL42 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL42 DEL59 DEL60 DEL42 DEL51 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL8 DEL25 DEL25 DEL8 DEL61 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL51 DEL70 DEL8 DEL8 DEL42 DEL32 DEL59 DEL60 DEL27