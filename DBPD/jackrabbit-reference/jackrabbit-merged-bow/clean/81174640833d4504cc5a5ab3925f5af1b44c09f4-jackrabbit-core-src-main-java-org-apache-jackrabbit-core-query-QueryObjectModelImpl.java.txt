JCR-1104: JSR 283 support
- support for prepared queries has been moved to existing Query interface
- removed PreparedQuery again

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@632309 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.query.qom.QueryObjectModelTree;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.ItemManager;
+
+import javax.jcr.query.InvalidQueryException;
+import javax.jcr.Node;
+import javax.jcr.RepositoryException;
-public class QueryObjectModelImpl
-        extends PreparedQueryImpl
-        implements QueryObjectModel {
+public class QueryObjectModelImpl extends QueryImpl implements QueryObjectModel {
+
+    /**
+     * The query object model tree.
+     */
+    protected QueryObjectModelTree qomTree;
+
+    /**
+     * @inheritDoc
+     */
+    public void init(SessionImpl session,
+                     ItemManager itemMgr,
+                     QueryHandler handler,
+                     String statement,
+                     String language) throws InvalidQueryException {
+        checkNotInitialized();
+        this.session = session;
+        this.language = language;
+        this.handler = handler;
+        this.statement = statement;
+        this.query = handler.createExecutableQuery(session, itemMgr,
+                createQOMTree(statement, language));
+        setInitialized();
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public void init(SessionImpl session,
+                     ItemManager itemMgr,
+                     QueryHandler handler,
+                     Node node) throws InvalidQueryException, RepositoryException {
+        checkNotInitialized();
+        this.session = session;
+        this.node = node;
+        this.handler = handler;
+
+        if (!node.isNodeType(session.getJCRName(NameConstants.NT_QUERY))) {
+            throw new InvalidQueryException("node is not of type nt:query");
+        }
+        this.statement = node.getProperty(session.getJCRName(NameConstants.JCR_STATEMENT)).getString();
+        this.language = node.getProperty(session.getJCRName(NameConstants.JCR_LANGUAGE)).getString();
+        this.query = handler.createExecutableQuery(session, itemMgr,
+                createQOMTree(statement, language));
+        setInitialized();
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public void init(SessionImpl session,
+                     ItemManager itemMgr,
+                     QueryHandler handler,
+                     QueryObjectModelTree qomTree,
+                     String language)
+            throws InvalidQueryException, RepositoryException {
+        checkNotInitialized();
+        this.session = session;
+        this.language = language;
+        this.handler = handler;
+        this.qomTree = qomTree;
+        this.statement = null; // TODO: format qomTree into a SQL2 statement
+        this.query = handler.createExecutableQuery(session, itemMgr, qomTree);
+        setInitialized();
+    }
+
+
+    //------------------------------< internal >--------------------------------
+
+    /**
+     * Creates a {@link QueryObjectModelTree} representation for the query
+     * <code>statement</code>.
+     *
+     * @param statement the query statement.
+     * @param language  the language of the query statement.
+     * @return the {@link QueryObjectModelTree} representation.
+     * @throws InvalidQueryException if the query statement is malformed.
+     */
+    private QueryObjectModelTree createQOMTree(String statement,
+                                               String language)
+            throws InvalidQueryException {
+        // TODO: implement
+        return null;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD43 INS23 INS31 INS31 INS31 INS31 UPD42 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS42 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS66 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS7 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS7 INS38 INS8 INS7 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS7 INS7 INS7 INS7 INS32 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS42 INS33 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS32 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS32 INS53 INS22 INS32 INS22 INS32 INS22 INS32 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS33 INS22 INS32 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS52 INS42 INS32 INS42 INS52 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40