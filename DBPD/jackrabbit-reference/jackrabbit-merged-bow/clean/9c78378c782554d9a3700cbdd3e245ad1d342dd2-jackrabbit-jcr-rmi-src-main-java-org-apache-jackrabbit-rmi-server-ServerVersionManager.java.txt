JCR-3206 JSR-283 support for RMI / Implementation of the missing versioning parts

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1377571 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Node;
+import javax.jcr.Session;
+import javax.jcr.version.Version;
+    private final Session session;    
+    
-
-    public ServerVersionManager(
+    
+    public ServerVersionManager(Session session,
+        this.session = session;
-            return getFactory().getRemoteNode(manager.getActivity());
+            Node activity = manager.getActivity();
+            if (activity == null) {
+                return null;
+            } else {
+                return getFactory().getRemoteNode(activity);
+            }
-	public void cancelMerge(String absPath, RemoteVersion version)
-			throws RepositoryException, RemoteException {
-	}
+    public void cancelMerge(String absPath, String versionIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Version version = (Version) session.getNodeByIdentifier(versionIdentifier);
+            manager.cancelMerge(absPath, version);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
-	public void doneMerge(String absPath, RemoteVersion version)
-			throws RepositoryException, RemoteException {
-	}
+    public void doneMerge(String absPath, String versionIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Version version = (Version) session.getNodeByIdentifier(versionIdentifier);
+            manager.doneMerge(absPath, version);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public void restore(String[] versionIdentifiers, boolean removeExisting)
+            throws RepositoryException, RemoteException {
+        try {
+            Version[] versions = new Version[versionIdentifiers.length];
+            for (int i = 0; i < versions.length; i++) {
+                Version version = (Version) session.getNodeByIdentifier(versionIdentifiers[i]);
+                versions[i] = version;
+            }
+            manager.restore(versions, removeExisting);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public void restore(String versionIdentifier, boolean removeExisting)
+            throws RepositoryException, RemoteException {
+        try {
+            Version version = (Version) session.getNodeByIdentifier(versionIdentifier);
+            manager.restore(version, removeExisting);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public RemoteNode setActivity(String activityNodeIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Node newActivityNode;
+            if (activityNodeIdentifier == null) {
+                newActivityNode = null;
+            } else {
+                newActivityNode = session.getNodeByIdentifier(activityNodeIdentifier);
+            }
+            Node oldActivityNode = manager.setActivity(newActivityNode);
+            if (oldActivityNode == null) {
+                return null;
+            } else {
+                return getFactory().getRemoteNode(oldActivityNode);
+            }
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public void removeActivity(String activityNodeIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Node activityNode = session.getNodeByIdentifier(activityNodeIdentifier);
+            manager.removeActivity(activityNode);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public RemoteIterator merge(String activityNodeIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Node activityNode = session.getNodeByIdentifier(activityNodeIdentifier);
+            return getFactory().getRemoteNodeIterator(manager.merge(activityNode));
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public void restoreVI(String absPath, String versionIdentifier,
+            boolean removeExisting) throws RepositoryException, RemoteException {
+        try {
+            Version version = (Version) session.getNodeByIdentifier(versionIdentifier);
+            manager.restore(absPath, version, removeExisting);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS44 MOV44 INS44 MOV43 MOV43 INS8 MOV44 INS44 MOV43 MOV43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS43 INS42 INS21 INS43 INS42 INS54 INS43 INS42 INS54 INS42 INS5 INS42 INS39 INS42 INS42 INS42 INS54 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS54 INS42 INS42 INS43 INS42 INS42 INS42 INS54 INS42 INS43 INS42 INS42 INS42 INS54 INS42 INS42 INS43 INS42 INS42 INS42 INS54 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS54 INS42 INS7 INS8 INS42 INS8 INS12 INS42 INS8 INS12 INS43 INS85 INS8 INS12 INS42 INS8 INS12 INS42 INS8 INS12 INS42 INS8 INS12 INS42 INS8 INS12 INS42 INS42 INS8 INS12 INS22 INS42 INS60 INS25 INS60 INS21 INS44 INS8 INS60 INS21 INS44 INS8 INS42 INS60 INS24 INS21 INS44 INS8 INS60 INS21 INS44 INS8 INS60 INS25 INS60 INS25 INS44 INS8 INS60 INS21 INS44 INS8 INS60 INS41 INS44 INS8 INS60 INS21 INS44 INS8 INS52 INS42 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS59 INS32 INS43 INS42 INS53 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS43 INS42 INS53 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS53 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS59 INS32 INS43 INS42 INS53 INS42 INS42 MOV32 INS42 INS33 INS41 MOV41 UPD42 MOV42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS43 INS59 INS7 INS42 INS42 INS43 INS32 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS11 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 DEL8 DEL43 DEL42 DEL44 DEL8 DEL43 DEL42 DEL44 DEL8