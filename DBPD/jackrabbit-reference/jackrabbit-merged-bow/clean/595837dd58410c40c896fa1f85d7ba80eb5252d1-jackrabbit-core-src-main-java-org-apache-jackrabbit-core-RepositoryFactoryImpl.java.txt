JCR-2555: Improved reusability of the JCA package

Fixed handing of repository map in RepositoryFactoryImpl. It turns out that RepositoryImpl.shutdown() will close the ConnectionFactory instance referenced by the RepositoryConfig object, so reusing the config for more than one repository instance will not work. A better fix would probably be to remove the ConnectionFactory reference from RepositoryConfig.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@923744 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.jackrabbit.core.config.RepositoryConfigurationParser.REPOSITORY_HOME_VARIABLE;
+
-import org.apache.jackrabbit.core.config.RepositoryConfigurationParser;
-     * Map of repository instances. Key = repository home, value = repository
-     * instance.
+     * Map of repository instances.
+     * Key = repository parameters, value = repository instance.
-    private static final Map<String, JackrabbitRepository> REPOSITORY_INSTANCES = new HashMap<String, JackrabbitRepository>();
+    private static final Map<Properties, TransientRepository> REPOSITORIES =
+        new HashMap<Properties, TransientRepository>();
-    private final Set<TransientRepository> ownRepositories = new HashSet<TransientRepository>();
+    private final Set<TransientRepository> ownRepositories =
+        new HashSet<TransientRepository>();
-        synchronized (REPOSITORY_INSTANCES) {
-            if (parameters == null) {
-                return getOrCreateRepository(null, Collections.emptyMap());
-            } else if (parameters.containsKey(REPOSITORY_HOME)) {
-                String home = parameters.get(REPOSITORY_HOME).toString();
-                return getOrCreateRepository(home, parameters);
-            } else if (parameters.containsKey(JcrUtils.REPOSITORY_URI)) {
-                Object parameter = parameters.get(JcrUtils.REPOSITORY_URI);
-                try {
-                    URI uri = new URI(parameter.toString().trim());
-                    String scheme = uri.getScheme();
-                    if (("file".equalsIgnoreCase(scheme)
-                            || "jcr-jackrabbit".equalsIgnoreCase(scheme))
-                            && uri.getAuthority() == null) {
-                        File file = new File(uri.getPath());
-                        if (file.isFile()) {
-                            return null; // Not a (possibly missing) directory
-                        } else {
-                            return getOrCreateRepository(
-                                    file.getPath(), parameters);
-                        }
+        if (parameters == null) {
+            return getRepository(null, Collections.emptyMap());
+        } else if (parameters.containsKey(REPOSITORY_HOME)) {
+            String home = parameters.get(REPOSITORY_HOME).toString();
+            return getRepository(home, parameters);
+        } else if (parameters.containsKey(JcrUtils.REPOSITORY_URI)) {
+            Object parameter = parameters.get(JcrUtils.REPOSITORY_URI);
+            try {
+                URI uri = new URI(parameter.toString().trim());
+                String scheme = uri.getScheme();
+                if (("file".equalsIgnoreCase(scheme)
+                        || "jcr-jackrabbit".equalsIgnoreCase(scheme))
+                        && uri.getAuthority() == null) {
+                    File file = new File(uri.getPath());
+                    if (file.isFile()) {
+                        return null; // Not a (possibly missing) directory
-                        return null; // not a file: or jcr-jackrabbit: URI
+                        return getRepository(file.getPath(), parameters);
-                } catch (URISyntaxException e) {
-                    return null; // not a valid URI
+                } else {
+                    return null; // not a file: or jcr-jackrabbit: URI
-            } else {
-                return null; // unknown or insufficient parameters
+            } catch (URISyntaxException e) {
+                return null; // not a valid URI
+        } else {
+            return null; // unknown or insufficient parameters
+    private Repository getRepository(String home, Map<?, ?> parameters)
+            throws RepositoryException {
+        TransientRepository repository =
+            getOrCreateRepository(home, parameters);
+        ownRepositories.add(repository);
+        return repository;
+    }
+
-     * puts it into the {@link #REPOSITORY_INSTANCES} cache.
+     * puts it into the {@link #REPOSITORIES} cache.
-    private JackrabbitRepository getOrCreateRepository(
+    private static synchronized TransientRepository getOrCreateRepository(
-        JackrabbitRepository repo = REPOSITORY_INSTANCES.get(home);
-        if (repo == null) {
-            // Prepare the repository properties
-            Properties properties = new Properties(System.getProperties());
-            for (Map.Entry<?, ?> entry : parameters.entrySet()) {
-                Object key = entry.getKey();
-                if (key != null) {
-                    Object value = entry.getValue();
-                    if (value != null) {
-                        properties.setProperty(
-                                key.toString(), value.toString());
-                    } else {
-                        properties.remove(key.toString());
-                    }
+        // Prepare the repository properties
+        Properties properties = new Properties(System.getProperties());
+        for (Map.Entry<?, ?> entry : parameters.entrySet()) {
+            Object key = entry.getKey();
+            if (key != null) {
+                Object value = entry.getValue();
+                if (value != null) {
+                    properties.setProperty(
+                            key.toString(), value.toString());
+                } else {
+                    properties.remove(key.toString());
+        }
+        if (home != null) {
+            properties.put(REPOSITORY_HOME_VARIABLE, home);
+        }
-            properties.put(
-                    RepositoryConfigurationParser.REPOSITORY_HOME_VARIABLE,
-                    home);
-
+        TransientRepository repository = REPOSITORIES.get(properties);
+        if (repository == null) {
-                    REPOSITORY_INSTANCES.put(null, tr);
+                    REPOSITORIES.put(null, tr);
-                REPOSITORY_INSTANCES.put(tr.getHomeDir(), tr);
-                ownRepositories.add(tr);
-                repo = tr;
+                REPOSITORIES.put(properties, tr);
+                repository = tr;
-        return repo;
+        return repository;
+

MOV26 UPD40 INS31 UPD74 MOV8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 UPD43 MOV8 UPD43 UPD43 UPD42 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS21 INS41 UPD42 INS25 INS60 INS25 INS41 UPD66 UPD66 UPD42 UPD42 UPD74 INS42 INS43 INS76 INS76 INS43 INS59 INS32 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS42 UPD43 UPD43 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS33 MOV21 INS42 INS42 INS32 INS42 INS33 MOV54 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 DEL42 DEL51 DEL8 DEL40 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL41 DEL8