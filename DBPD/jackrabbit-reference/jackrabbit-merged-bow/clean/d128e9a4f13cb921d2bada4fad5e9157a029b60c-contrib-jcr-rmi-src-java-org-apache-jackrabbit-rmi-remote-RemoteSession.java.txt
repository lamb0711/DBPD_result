Added template documentation of the remote methods.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155815 13f79535-47bb-0310-9956-ffa450edef68

-     * @see javax.jcr.Session#getUserId()
+     * Remote version of the
+     * {@link javax.jcr.Session#getUserId() Session.getUserId()} method.
+     *
+     * @return user id
+     * @see javax.jcr.Session#getUserId()
-     * @see javax.jcr.Session#getAttribute(java.lang.String)
+     * @param name attribute name
+     * @return attribute value
+     * @see javax.jcr.Session#getAttribute(java.lang.String)
-     * @see javax.jcr.Session#getAttributeNames()
+     * Remote version of the
+     * {@link javax.jcr.Session#getAttributeNames() Session.getAttributeNames()}
+     * method.
+     *
+     * @return attribute names
+     * Remote version of the
+     * {@link javax.jcr.Session#getWorkspace() Session.getWorkspace()} method.
+     *
+     * @return workspace
-     * @see javax.jcr.Session#impersonate(javax.jcr.Credentials)
+     * Remote version of the
+     * {@link javax.jcr.Session#impersonate(Credentials) Session.impersonate(Credentials)}
+     * method.
+     *
+     * @param credentials credentials for the new session
+     * @return new session
+     * @throws RepositoryException on repository errors
-     * @see javax.jcr.Session#getNodeByUUID(java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#getNodeByUUID(String) Session.getNodeByUUID(String)}
+     * method.
+     *
+     * @param uuid node uuid
+     * @return node
+     * @throws RepositoryException on repository errors
-     * @see javax.jcr.Session#getItem(java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#getItem(String) Session.getItem(String)}
+     * method.
+     *
+     * @param path item path
+     * @return item
+     * @throws RepositoryException on repository errors
-    
+
-     * @see javax.jcr.Session#itemExists(java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#itemExists(String) Session.itemExists(String)}
+     * method.
+     *
+     * @param path item path
+     * @return <code>true</code> if the item exists,
+     *         <code>false</code> otherwise
-     * @see javax.jcr.Session#move(java.lang.String, java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#move(String,String) Session.move(String,String)}
+     * method.
+     *
+     * @param from source path
+     * @param to destination path
+     * @throws RepositoryException on repository errors
-     * @see javax.jcr.Session#save()
+     * Remote version of the
+     * {@link javax.jcr.Session#save() Session.save()} method.
+     *
+     * @throws RepositoryException on repository errors
-    
+
-     * @see javax.jcr.Session#refresh(boolean)
+     * Remote version of the
+     * {@link javax.jcr.Session#refresh(boolean) Session.refresh(boolean)}
+     * method.
+     *
+     * @param keepChanges flag to keep transient changes
+     * @throws RepositoryException on repository errors
-    
+
-     * @see javax.jcr.Session#logout()
+     * Remote version of the
+     * {@link javax.jcr.Session#logout() Session.logout()}
+     * method.
+     *
-     * @see javax.jcr.Session#getRootNode()
+     * Remote version of the
+     * {@link javax.jcr.Session#getRootNode() Session.getRootNode()} method.
+     *
+     * @return root node
+     * @throws RepositoryException on repository errors
-    
+
-     * @see javax.jcr.Session#hasPendingChanges()
+     * Remote version of the
+     * {@link javax.jcr.Session#hasPendingChanges() Session.hasPendingChanges()}
+     * method.
+     *
+     * @return <code>true</code> if the session has pending changes,
+     *         <code>false</code> otherwise
+     * @throws RepositoryException on repository errors
-     * @see javax.jcr.Session#checkPermission(java.lang.String, java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#checkPermission(String,String) Session.checkPermission(String,String)}
+     * method.
+     *
+     * @param path item path
+     * @param actions actions
+     * @throws AccessControlException if permission is denied
-     * 
-     * @see javax.jcr.Session#importXML(java.lang.String, java.io.InputStream)
+     *
+     * @param path node path
+     * @param xml imported XML document
+     * @throws IOException on IO errors
+     * @throws RepositoryException on repository errors
+     * @see javax.jcr.Session#importXML(java.lang.String, java.io.InputStream)
-    
+
-     * @see javax.jcr.Session#setNamespacePrefix(java.lang.String, java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#setNamespacePrefix(String,String) Session.setNamespacePrefix(String,String)}
+     * method.
+     *
+     * @param prefix namespace prefix
+     * @param uri namespace uri
+     * @throws RepositoryException on repository errors
-    
+
-     * @see javax.jcr.Session#getNamespacePrefixes()
+     * Remote version of the
+     * {@link javax.jcr.Session#getNamespacePrefixes() Session.getNamespacePrefixes()}
+     * method.
+     *
+     * @return namespace prefixes
+     * @throws RepositoryException on repository errors
-    
+
-     * @see javax.jcr.Session#getNamespaceURI(java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#getNamespaceURI(String) Session.getNamespaceURI(String)}
+     * method.
+     *
+     * @param prefix namespace prefix
+     * @return namespace uri
+     * @throws RepositoryException on repository errors
-    
+
-     * @see javax.jcr.Session#getNamespacePrefix(java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#getNamespacePrefix(String) Session.getNamespacePrefix(String)}
+     * method.
+     *
+     * @param uri namespace uri
+     * @return namespace prefix
+     * @throws RepositoryException on repository errors
-    
+
-     * @see javax.jcr.Session#addLockToken(java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#addLockToken(String) Session.addLockToken(String)}
+     * method.
+     *
+     * @param name lock token
-    
+
-     * @see javax.jcr.Session#getLockTokens()
+     * Remote version of the
+     * {@link javax.jcr.Session#getLockTokens() Session.getLockTokens()}
+     * method.
+     *
+     * @return lock tokens
-    
+
-     * @see javax.jcr.Session#removeLockToken(java.lang.String)
+     * Remote version of the
+     * {@link javax.jcr.Session#removeLockToken(String) Session.removeLockToken(String)}
+     * method.
+     *
+     * @param name lock token
-     * @see javax.jcr.Workspace#exportSysView(java.lang.String, java.io.OutputStream, boolean, boolean)
+     * @param path node path
+     * @param binaryAsLink TODO
+     * @param noRecurse TODO
+     * @return exported XML document
+     * @throws IOException on IO errors
+     * @throws RepositoryException on repository errors
+     * @see javax.jcr.Workspace#exportSysView(java.lang.String, java.io.OutputStream, boolean, boolean)
-     * @see javax.jcr.Workspace#exportDocView(java.lang.String, java.io.OutputStream, boolean, boolean)
+     * @param path node path
+     * @param binaryAsLink TODO
+     * @param noRecurse TODO
+     * @return exported XML document
+     * @throws IOException on IO errors
+     * @throws RepositoryException on repository errors
+     * @see javax.jcr.Workspace#exportDocView(java.lang.String, java.io.OutputStream, boolean, boolean)

MOV65 MOV65 MOV65 MOV44 MOV43 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV44 MOV43 MOV44 MOV43 MOV65 MOV65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV65 INS65 INS65 INS65 INS65 MOV65 INS65 INS65 INS65 INS65 MOV65 INS65 INS65 INS65 MOV65 INS65 INS65 INS65 INS65 MOV65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV65 INS65 INS65 INS65 INS65 MOV65 INS65 INS65 MOV65 INS65 INS65 INS65 INS65 MOV65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS66 UPD65 MOV65 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 UPD65 MOV65 INS66 INS42 INS66 INS66 UPD65 MOV65 INS66 INS42 INS66 INS42 INS66 INS66 UPD65 MOV65 INS66 INS66 UPD65 MOV65 INS66 INS66 INS42 INS66 INS66 UPD65 MOV65 INS66 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 UPD65 MOV65 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 UPD65 MOV65 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS68 INS66 INS66 INS68 INS66 MOV68 INS66 MOV68 INS66 MOV68 INS66 MOV68 INS66 MOV68 INS66 INS66 INS66 INS66 INS66 INS66 MOV68 INS66 MOV68 INS66 INS66 MOV68 INS66 MOV68 INS66 MOV68 INS66 INS66 MOV68 INS66 INS40 INS42 INS40 INS42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL65 DEL40 DEL65 DEL40 DEL65 DEL40 DEL65 DEL40 DEL40 DEL65 DEL40 DEL40 DEL65 DEL40 DEL40 DEL65 DEL40 DEL65 DEL40 DEL65 DEL40 DEL65 DEL40 DEL65