Implemented proper support for IS [NOT] NULL queries.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126276 13f79535-47bb-0310-9956-ffa450edef68

+ * Implements a query builder that takes an abstract query tree and creates
+ * a lucene {@link org.apache.lucene.search.Query} tree that can be executed
+ * on an index.
+ * todo introduce a node type hierarchy for efficient translation of NodeTypeQueryNode
+    /** Logger for this class */
+    /** QName for jcr:primaryType */
+    /** Root node of the abstract query tree */
+    /** Session of the user executing this query */
+    /** Namespace mappings to internal prefixes */
+    /** The analyzer instance to use for contains function query parsing */
+    /** Exceptions thrown during tree translation */
+    /**
+     * Creates a new <code>LuceneQueryBuilder</code> instance.
+     * @param root the root node of the abstract query tree.
+     * @param session of the user executing this query.
+     * @param nsMappings namespace resolver for internal prefixes.
+     * @param analyzer for parsing the query statement of the contains function.
+     */
+    /**
+     * Creates a lucene {@link org.apache.lucene.search.Query} tree from an
+     * abstract query tree.
+     * @param root the root node of the abstract query tree.
+     * @param session of the user executing the query.
+     * @param nsMappings namespace resolver for internal prefixes.
+     * @param analyzer for parsing the query statement of the contains function.
+     * @return the lucene query tree.
+     * @throws RepositoryException if an error occurs during the translation.
+     */
-            throw new RepositoryException("Exception parsing query: " + msg.toString());
+            throw new RepositoryException("Exception building query: " + msg.toString());
+    /**
+     * Starts the tree traversal and returns the lucene
+     * {@link org.apache.lucene.search.Query}.
+     * @return the lucene <code>Query</code>.
+     */
+    //---------------------< QueryNodeVisitor interface >-----------------------
+
-        String stringValue;
+        String stringValue = null;
+            case 0:
+                // not set: either IS NULL or IS NOT NULL
+                break;
+        String primaryTypeField = "";
+            primaryTypeField = primaryType.toJCRName(nsMappings);
+            case Constants.OPERATION_NULL:
+                notQuery = new BooleanQuery();
+                notQuery.add(new MatchAllQuery(primaryTypeField), false, false);
+                notQuery.add(new MatchAllQuery(field), false, true);
+                query = notQuery;
+                break;
+            case Constants.OPERATION_NOT_NULL:
+                query = new MatchAllQuery(field);
+                break;

INS65 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV10 MOV10 MOV10 MOV10 INS60 INS40 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS49 INS10 INS43 INS59 INS21 INS21 INS21 INS21 INS10 INS49 INS21 INS10 INS49 INS40 INS40 INS33 INS34 INS42 INS42 INS45 INS21 INS40 INS7 INS32 INS32 INS7 INS40 INS7 INS7 INS42 INS14 INS42 INS42 INS14 INS9 INS9 INS42 INS42 INS14 INS9 INS9 INS42 INS42 INS42 INS14 INS42 INS32 INS43 INS43 INS42 INS43 INS42 INS43 INS42 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 INS42