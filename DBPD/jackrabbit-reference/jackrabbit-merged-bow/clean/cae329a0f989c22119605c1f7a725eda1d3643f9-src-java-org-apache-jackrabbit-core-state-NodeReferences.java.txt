reworked transaction support, contributed by dominique

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151380 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeId;
-    protected NodeId targetId;
+    protected NodeReferencesId targetId;
-     * New state
-     */
-    public static final int STATUS_NEW = 0;
-
-    /**
-     * Existing state
-     */
-    public static final int STATUS_EXISTING = 1;
-
-    /**
-     * Destroyed state
-     */
-    public static final int STATUS_DESTROYED = 2;
-
-    /**
-     * the internal status of this item state
-     */
-    protected int status = STATUS_NEW;
-
-    /**
-     * Backing state (may be null)
-     */
-    private NodeReferences overlayed;
-
-    /**
-    public NodeReferences(NodeId targetId) {
+    public NodeReferences(NodeReferencesId targetId) {
-     * Package private constructor
-     *
-     * @param overlayed overlayed state
+     * Return the target id of this node references object.
+     * @return target id
-    public NodeReferences(NodeReferences overlayed) {
-        this.overlayed = overlayed;
-
-        pull();
-    }
-
-    /**
-     * Copy information from another references object into this object
-     * @param refs source references object
-     */
-    void copy(NodeReferences refs) {
-        targetId = refs.targetId;
-        references.clear();
-        references.addAll(refs.getReferences());
-    }
-
-    /**
-     * Pull information from overlayed object.
-     */
-    void pull() {
-        if (overlayed != null) {
-            copy(overlayed);
-        }
-    }
-
-    /**
-     * Push information into overlayed object.
-     */
-    void push() {
-        if (overlayed != null) {
-            overlayed.copy(this);
-        }
-    }
-
-    /**
-     * Connect this object to an underlying overlayed object
-     */
-    void connect(NodeReferences overlayed) {
-        if (this.overlayed != null) {
-            throw new IllegalStateException(
-                    "References object already connected: " + this);
-        }
-        this.overlayed = overlayed;
-    }
-
-    /**
-     * Disconnect this object from the underlying overlayed object.
-     */
-    void disconnect() {
-        if (overlayed != null) {
-            overlayed = null;
-        }
-    }
-
-    /**
-     * @return
-     */
-    public NodeId getTargetId() {
+    public NodeReferencesId getTargetId() {
-     * @return
+     * Return the UUID of the target id
+     * @return UUID of the target id
+     */
+    public String getUUID() {
+        return targetId.getUUID();
+    }
+
+    /**
+     * Return a flag indicating whether this object holds any references
+     * @return <code>true</code> if this object holds references,
+     * <code>false</code> otherwise
-
-    /**
-     * Returns the status of this item.
-     *
-     * @return the status of this item.
-     */
-    public int getStatus() {
-        return status;
-    }
-
-    /**
-     * Sets the new status of this item.
-     *
-     * @param newStatus the new status
-     */
-    public void setStatus(int newStatus) {
-        switch (newStatus) {
-            case STATUS_NEW:
-            case STATUS_EXISTING:
-            case STATUS_DESTROYED:
-                status = newStatus;
-                return;
-        }
-        String msg = "illegal status: " + newStatus;
-        log.debug(msg);
-        throw new IllegalArgumentException(msg);
-    }

MOV31 UPD43 INS43 INS42 MOV8 MOV43 UPD42 UPD42 UPD43 UPD65 UPD42 MOV42 INS65 UPD42 UPD66 UPD66 UPD66 UPD66 INS32 INS66 INS66 INS66 INS42 INS42 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL39 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL43 DEL45 DEL52 DEL27 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL49 DEL42 DEL49 DEL42 DEL49 DEL42 DEL42 DEL7 DEL21 DEL41 DEL50 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL31