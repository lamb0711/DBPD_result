use virtual workspace file system to persist locks rather than physical file system

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@348201 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.ItemId;
-import org.apache.jackrabbit.core.ItemId;
+import org.apache.jackrabbit.core.fs.FileSystem;
+import org.apache.jackrabbit.core.fs.FileSystemException;
+import org.apache.jackrabbit.core.fs.FileSystemResource;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.ItemNotFoundException;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.AccessDeniedException;
-import java.io.File;
-import java.io.FileReader;
-import java.io.FileWriter;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+     * Name of the lock file
+     */
+    private static final String LOCKS_FILE = "locks";
+
+    /**
-    private final File locksFile;
+    private final FileSystemResource locksFile;
+     *
-     * @param locksFile file locks file to use
+     * @param fs      file system for persisting locks
-    public LockManagerImpl(SessionImpl session, File locksFile)
+    public LockManagerImpl(SessionImpl session, FileSystem fs)
-        this.locksFile = locksFile;
+        this.locksFile = new FileSystemResource(fs, FileSystem.SEPARATOR + LOCKS_FILE);
-        if (locksFile.exists()) {
-            try {
+        try {
+            if (locksFile.exists()) {
-            } catch (IOException e) {
-                throw new RepositoryException(
-                        "I/O error while reading locks from '"
-                        + locksFile.getPath() + "'", e);
+        } catch (FileSystemException e) {
+            throw new RepositoryException("I/O error while reading locks from '"
+                    + locksFile.getPath() + "'", e);
-    private void load() throws IOException {
+    private void load() throws FileSystemException {
-            reader = new BufferedReader(new FileReader(locksFile));
+            reader = new BufferedReader(
+                    new InputStreamReader(locksFile.getInputStream()));
+        } catch (IOException e) {
+            throw new FileSystemException("error while reading locks file", e);
+     *
-            writer = new BufferedWriter(new FileWriter(locksFile));
+            writer = new BufferedWriter(
+                    new OutputStreamWriter(locksFile.getOutputStream()));
-        } catch (IOException e) {
+        } catch (FileSystemException fse) {
-                    + locksFile.getPath() + "': " + e.getMessage());
-            log.debug("Root cause: ", e);
+                    + locksFile.getPath() + "': " + fse.getMessage());
+            log.debug("Root cause: ", fse);
+        } catch (IOException ioe) {
+            log.warn("I/O error while saving locks to '"
+                    + locksFile.getPath() + "': " + ioe.getMessage());
+            log.debug("Root cause: ", ioe);
+     *
-     * @throws LockException if the node is already locked
-     * @throws RepositoryException if another error occurs
+     * @throws LockException       if the node is already locked
+     * @throws RepositoryException if another error occurs
-            throws LockException,  RepositoryException {
+            throws LockException, RepositoryException {
+     *
-                NodeImpl node = (NodeImpl) session.getItemManager().getItem(
-                        new NodeId(info.getUUID()));
+                NodeImpl node = (NodeImpl) session.getItemManager().getItem(new NodeId(info.getUUID()));
-                Node lockHolder = (Node) session.getItemManager().getItem(
-                        new NodeId(info.getUUID()));
+                Node lockHolder = (Node) session.getItemManager().getItem(new NodeId(info.getUUID()));
-     *
+     * <p/>
-                   RepositoryException {
+            RepositoryException {
+         *
+         *
+         *
+         *
+         *
+     *
+     *
+     *

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 INS40 UPD40 UPD40 UPD40 INS23 INS29 INS83 INS83 INS83 INS43 INS59 UPD43 INS43 MOV65 INS65 INS42 INS42 INS45 UPD42 UPD43 UPD42 MOV54 INS42 INS66 UPD42 UPD66 UPD42 INS8 INS12 INS12 UPD66 INS66 INS14 INS25 INS44 MOV44 INS8 INS44 INS8 INS43 INS42 INS27 MOV32 MOV8 INS43 INS42 INS53 UPD43 UPD42 MOV43 INS42 INS21 INS21 INS42 INS40 INS42 INS42 INS14 UPD42 INS32 INS32 INS43 INS45 INS42 UPD42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 UPD43 INS32 INS42 UPD43 INS32 INS45 INS32 INS45 INS32 UPD42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 DEL42 DEL8 DEL25 DEL42 DEL42