- Remove node id from NodeState
- Add node name and uuid to NodeState
- Remove unnecessary calls to getId()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431348 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.MalformedPathException;
+     * A current element Path instance.
+     */
+    private static final Path CURRENT_PATH;
+
+    static {
+        try {
+            Path.PathBuilder builder = new Path.PathBuilder();
+            builder.addFirst(Path.CURRENT_ELEMENT);
+            CURRENT_PATH = builder.getPath();
+        } catch (MalformedPathException e) {
+            // path is always valid
+            throw new InternalError("unable to create path from '.'");
+        }
+    }
+
+    /**
-     * TODO: id is not stable unless sole uuid.
-     * The id of this node state.
+     * The UUID of this node state or <code>null</code> if this node state
+     * cannot be identified with a uuid.
-    private NodeId id;
+    private String uuid;
+
+    /**
+     * The name of this node
+     */
+    private QName name;
-     * @param id            id of this NodeState
+     * @param name          the name of this NodeState
+     * @param uuid          the uuid of this NodeState or <code>null</code> if
+     *                      this node state cannot be identified with a UUID.
-    public NodeState(NodeId id, NodeState parent, QName nodeTypeName,
-                     int initialStatus, boolean isTransient,
+    public NodeState(QName name, String uuid, NodeState parent,
+                     QName nodeTypeName, int initialStatus, boolean isTransient,
-        this.id = id;
+        this.name = name;
+        this.uuid = uuid;
-            id = nodeState.id;
+            name = nodeState.name;
+            uuid = nodeState.uuid;
-        return id;
+        return getNodeId();
+     *
-        return id;
+        if (uuid != null) {
+            return idFactory.createNodeId(uuid);
+        } else if (parent != null) {
+            // find this in parent child node entries
+            for (Iterator it = parent.getChildNodeEntries(name).iterator(); it.hasNext(); ) {
+                ChildNodeEntry cne = (ChildNodeEntry) it.next();
+                try {
+                    if (cne.getNodeState() == this) {
+                        Path relPath = Path.create(cne.getName(), cne.getIndex());
+                        return idFactory.createNodeId(parent.getNodeId(), relPath);
+                    }
+                } catch (ItemStateException e) {
+                    log.warn("Unable to access child node entry: " + cne.getId());
+                }
+            }
+        } else {
+            // root node
+            return idFactory.createNodeId((String) null, CURRENT_PATH);
+        }
+        // TODO: replace with ItemStateException instead of error.
+        throw new InternalError("Unable to retrieve NodeId for NodeState");

INS26 INS40 INS23 INS28 INS23 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS8 UPD43 INS29 INS83 INS43 INS59 INS44 INS8 INS65 INS42 INS42 INS54 UPD42 UPD42 INS65 INS42 INS42 INS65 INS43 INS42 UPD43 UPD42 INS21 INS25 INS53 INS66 INS8 INS12 UPD66 UPD66 INS66 INS42 INS66 UPD42 UPD66 INS66 INS42 UPD42 INS7 INS32 INS27 INS8 INS25 INS14 INS60 INS21 INS21 INS44 INS8 INS22 INS42 UPD42 INS21 INS42 INS42 INS33 MOV41 INS27 INS8 INS8 INS43 INS45 INS43 INS59 INS32 INS7 INS43 INS42 INS53 INS52 INS42 UPD42 INS7 INS32 INS42 INS33 INS24 INS41 INS42 INS40 INS42 INS14 INS42 INS42 INS40 INS42 INS32 INS42 INS14 INS42 INS40 UPD42 UPD40 INS42 INS42 INS42 INS58 INS32 INS8 INS32 INS43 INS42 INS42 INS43 INS45 INS43 INS59 INS42 INS42 INS60 INS54 INS42 INS42 INS11 INS42 INS40 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS43 INS33 INS32 INS42 INS42 INS42 INS11 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS32 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS32 INS52 INS60 INS41 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL8