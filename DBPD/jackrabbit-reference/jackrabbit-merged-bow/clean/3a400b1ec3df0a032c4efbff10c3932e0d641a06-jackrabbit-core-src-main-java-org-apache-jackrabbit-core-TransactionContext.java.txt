JCR-3067: Remove timeout handling from TransactionContext

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1169737 13f79535-47bb-0310-9956-ffa450edef68

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.jackrabbit.util.Timer;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-public class TransactionContext extends Timer.Task {
+public class TransactionContext {
-     * Timer for all transaction contexts.
-     */
-    private final Timer timer;
-
-    /**
-     * Timeout, in seconds.
-     */
-    private final int timeout;
-
-    /**
-     * Indicates if this {@link TransactionContext} has timed out internally
-     */
-    private boolean timedOut = false;
-
-    /**
+     *
-     * @param timeout timeout, in seconds
-    public TransactionContext(
-            Xid xid, InternalXAResource[] resources,
-            int timeout, Timer timer) {
+    public TransactionContext(Xid xid, InternalXAResource[] resources) {
-        this.timeout = timeout;
-        this.timer = timer;
-     * @param onePhaseOptimized if true this prepare comes from a onePhase optimized Transaction.
-     * 			Internal Timeout-Task will be started.
+     *
-    public synchronized void prepare(boolean onePhaseOptimized) throws XAException {
+    public synchronized void prepare() throws XAException {
-
-        if (onePhaseOptimized) {
-            // start rollback task in case the commit is never issued
-            timer.schedule(this, timeout * 1000, Integer.MAX_VALUE);
-        }
-     * @param true if the commit comes from a onePhase optimized Transaction.
+     *
-    public synchronized void commit(boolean onePhase) throws XAException {
+    public synchronized void commit() throws XAException {
-        	if (onePhase && timedOut) {
-        		throw new XAException(XAException.XA_RBTIMEOUT);
-        	} else {
-        		throw new XAException(XAException.XA_HEURRB);
-        	}
+            throw new XAException(XAException.XA_HEURRB);
+
-        if (onePhase) {
-        	// cancel the rollback task only in onePhase Transactions
-        	cancel();
-        }
-        	XAException e = null;
-        	if (heuristicCommit) {
-        		e = new XAException(XAException.XA_HEURMIX);
-        	} else {
-        		e = new XAException(XAException.XA_HEURRB);
-        	}
-    		e.initCause(txe);
-    		throw e;
+            XAException e = null;
+            if (heuristicCommit) {
+                e = new XAException(XAException.XA_HEURMIX);
+            } else {
+                e = new XAException(XAException.XA_HEURRB);
+            }
+            e.initCause(txe);
+            throw e;
-        // cancel the rollback task
-        cancel();
-     * Rolls back the transaction if still prepared and marks the transaction
-     * rolled back.
-     */
-    public void run() {
-        synchronized (this) {
-            if (status == STATUS_PREPARED) {
-                try {
-                    rollback();
-                } catch (XAException e) {
-                    /* ignore */
-                }
-                timedOut = true;
-                log.warn("Transaction rolled back because timeout expired.");
-            }
-            // cancel the rollback task
-            cancel();
-        }
-    }
-
-    /**

MOV26 MOV26 MOV26 MOV26 MOV25 MOV27 DEL40 DEL26 DEL40 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL66 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL52 DEL42 DEL34 DEL27 DEL40 DEL32 DEL21 DEL8 DEL25 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL42 DEL43 DEL40 DEL14 DEL53 DEL8 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL52 DEL42 DEL42 DEL27 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL31