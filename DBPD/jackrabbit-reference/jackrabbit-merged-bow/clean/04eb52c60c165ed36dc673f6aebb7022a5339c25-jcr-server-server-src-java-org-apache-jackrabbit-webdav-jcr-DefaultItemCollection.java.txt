JCR-405: PROPPATCH doesn't respect document order
minor improvements within 'jcr' package:
- reorder nodes
- fixing creation/replacement of multivalued JCR properties
- contentlength for single value JCR properties
- improve spooling of resource content

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@397835 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.server.io.IOUtil;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.jackrabbit.webdav.io.OutputContext;
+import org.apache.jackrabbit.webdav.jcr.property.ValuesProperty;
-import org.apache.jackrabbit.webdav.property.DavPropertyIterator;
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+import javax.jcr.PathNotFoundException;
+import javax.xml.parsers.ParserConfigurationException;
-import java.io.FileNotFoundException;
+
+import java.io.OutputStream;
+import java.util.List;
-
-    private File content;
+    private static final String TMP_PREFIX = "_tmp_";
-
-     * Returns an {@link java.io.InputStream} to the content of this collection.
+     * If this resource represents an existing <code>Node</code> the system
+     * view is spooled as resource content.
+     *
+     * @param outputContext
+     * @throws IOException
+     * @see Session#exportSystemView(String, OutputStream, boolean, boolean)
-    public InputStream getStream() {
-        if (!initedProps)  {
-            initProperties();
-        }
-        if (content != null) {
-            try {
-                return new FileInputStream(content);
-            } catch (FileNotFoundException e) {
-                // should not occur
-                log.error(e.getMessage());
+    public void spool(OutputContext outputContext) throws IOException {
+        // spool properties
+        super.spool(outputContext);
+        // spool data
+        try {
+            OutputStream out = outputContext.getOutputStream();
+            if (out != null && exists()) {
+                getRepositorySession().exportSystemView(item.getPath(), out, false, true);
+        } catch (PathNotFoundException e) {
+            log.error("Error while spooling resource content: " + e.getMessage());
+        } catch (RepositoryException e) {
+            log.error("Error while spooling resource content: " + e.getMessage());
-        return null;
-     * Loops over the given <code>Set</code>s and alters the properties accordingly.
+     * Loops over the given <code>List</code>s and alters the properties accordingly.
-     * @param setProperties
-     * @param removePropertyNames
+     * @param changeList
-    public MultiStatusResponse alterProperties(DavPropertySet setProperties,
-                                DavPropertyNameSet removePropertyNames)
-        throws DavException {
-        DavPropertyIterator setIter = setProperties.iterator();
-        while (setIter.hasNext()) {
-            DavProperty prop = setIter.nextProperty();
-            // use the internal set method in order to prevent premature 'save'
-            internalSetProperty(prop);
-        }
-        Iterator remNameIter = removePropertyNames.iterator();
-        while (remNameIter.hasNext()) {
-            DavPropertyName propName = (DavPropertyName) remNameIter.next();
-            // use the internal set method in order to prevent premature 'save'
-            internalRemoveProperty(propName);
+    public MultiStatusResponse alterProperties(List changeList) throws DavException {
+        Iterator it = changeList.iterator();
+        while (it.hasNext()) {
+            Object propEntry = it.next();
+            if (propEntry instanceof DavPropertyName) {
+                // use the internal remove method in order to prevent premature 'save'
+                DavPropertyName propName = (DavPropertyName) propEntry;
+                internalRemoveProperty(propName);
+            } else if (propEntry instanceof DavProperty) {
+                // use the internal set method in order to prevent premature 'save'
+                DavProperty prop = (DavProperty) propEntry;
+                internalSetProperty(prop);
+            } else {
+                throw new IllegalArgumentException("unknown object in change list: " + propEntry.getClass().getName());
+            }
+        File tmpFile = null;
-                    // PUT: not possible
+                    // PUT: not possible without request body
-                    // TODO: find a way to create non-binary and multivalue properties
-                    // NOTE: will fail for multivalue properties.
-                    n.setProperty(memberName, in);
+                    tmpFile = File.createTempFile(TMP_PREFIX + memberName, null, null);
+                    FileOutputStream out = new FileOutputStream(tmpFile);
+                    IOUtil.spool(in, out);
+                    out.close();
+                    // try to parse the request body into a 'values' property.
+                    ValuesProperty vp = buildValuesProperty(new FileInputStream(tmpFile));
+                    if (vp != null) {
+                        if (JCR_VALUE.equals(vp.getName())) {
+                            n.setProperty(memberName, vp.getJcrValue());
+                        } else {
+                            n.setProperty(memberName, vp.getJcrValues());
+                        }
+                    } else {
+                        // request body cannot be parsed into a 'values' property.
+                        // fallback: try to import as single value from stream.
+                        n.setProperty(memberName, new FileInputStream(tmpFile));
+                    }
-            complete();
+            if (resource.exists() && resource instanceof AbstractItemResource) {
+                // PUT may modify value of existing jcr property. thus, this
+                // node is not modified by the 'addMember' call.
+                ((AbstractItemResource)resource).complete();
+            } else {
+                complete();
+            }
+        } finally {
+            if (tmpFile != null) {
+                tmpFile.delete();
+            }
-                String srcRelPath = Text.getName(instructions[i].getMemberHandle());
+                String srcRelPath = instructions[i].getMemberHandle();
+            complete();
-        String destPath = null;
+        String destRelPath = null;
-                destPath = firstChild.getPath();
+                // use last segment of node-path instead of name.
+                destRelPath = Text.getName(firstChild.getPath());
-            if (destPath == null) {
+            if (destRelPath == null) {
-            String afterRelPath = Text.getName(position.getSegment());
+            String afterRelPath = position.getSegment();
-            while (childNodes.hasNext() && destPath == null) {
-                String childPath = childNodes.nextNode().getPath();
+            while (childNodes.hasNext() && destRelPath == null) {
+                // compare to last segment of node-path instead of name.
+                String childRelPath = Text.getName(childNodes.nextNode().getPath());
-                    destPath = childPath;
+                    destRelPath = childRelPath;
-                    found = afterRelPath.equals(Text.getName(childPath));
+                    found = afterRelPath.equals(childRelPath);
-            destPath = position.getSegment();
+            // before or last. in the latter case the segmet is 'null'
+            destRelPath = position.getSegment();
-
-        return (destPath != null) ? Text.getName(destPath) : destPath;
+        return destRelPath;
-            try {
-                String prefix = "_tmp_" + item.getName();
-                // create tmpFile in default system-tmp directory
-                content = File.createTempFile(prefix, null, null);
-                content.deleteOnExit();
-                FileOutputStream out = new FileOutputStream(content);
-                getRepositorySession().exportSystemView(item.getPath(), out, false, true);
-                out.close();
-                properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTLENGTH, new Long(content.length())));
-                properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTTYPE, "text/xml"));
-
-            } catch (IOException e) {
-                log.error("Error while property initialization: "+e.getMessage());
-            } catch (RepositoryException e) {
-                log.error("Error while property initialization: "+e.getMessage());
-            }
-
+            // resource is serialized as system-view (xml)
+            properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTTYPE, "text/xml"));
+
+    /**
+     * Tries to parse the given input stream as xml document and build a
+     * {@link ValuesProperty} out of it.
+     *
+     * @param in
+     * @return values property or 'null' if the given stream cannot be parsed
+     * into an XML document or if build the property fails.
+     */
+    private ValuesProperty buildValuesProperty(InputStream in) {
+        String errorMsg = "Cannot parse stream into a 'ValuesProperty'.";
+        try {
+            Document reqBody = DomUtil.BUILDER_FACTORY.newDocumentBuilder().parse(in);
+            DavProperty defaultProp = DefaultDavProperty.createFromXml(reqBody.getDocumentElement());
+            ValuesProperty vp = new ValuesProperty(defaultProp, PropertyType.STRING);
+            return vp;
+        } catch (IOException e) {
+            log.debug(errorMsg, e);
+        } catch (ParserConfigurationException e) {
+            log.debug(errorMsg, e);
+        } catch (SAXException e) {
+            log.debug(errorMsg, e);
+        } catch (DavException e) {
+            log.debug(errorMsg, e);
+        } catch (RepositoryException e) {
+            log.debug(errorMsg, e);
+        }
+        // cannot parse request body into a 'values' property
+        return null;
+    }

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS40 INS31 INS31 INS83 INS83 INS43 MOV29 MOV83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS42 UPD42 INS45 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS54 UPD43 UPD42 INS61 INS60 INS65 INS65 INS65 INS42 MOV43 INS42 INS60 MOV54 MOV41 UPD66 UPD66 INS42 INS42 INS68 INS42 INS48 INS8 MOV12 MOV12 UPD66 UPD42 UPD42 MOV43 MOV32 INS8 MOV43 INS59 INS8 MOV43 INS42 INS66 INS65 INS66 INS42 INS66 INS66 MOV43 INS59 INS12 INS12 INS12 INS12 INS42 INS42 INS69 INS69 INS69 INS69 INS42 INS42 INS60 INS25 INS44 INS44 UPD42 UPD42 MOV60 INS25 INS42 INS33 INS25 INS25 MOV21 UPD42 MOV21 INS42 INS42 INS45 INS60 INS60 INS60 MOV44 INS8 INS44 INS8 INS44 INS8 MOV44 INS8 INS43 INS43 INS39 INS39 INS43 INS59 INS27 INS8 INS43 INS42 INS43 INS42 UPD42 INS43 INS62 MOV8 INS25 INS8 INS27 INS8 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS21 INS43 INS42 INS21 UPD43 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS27 INS32 MOV21 INS42 INS42 INS42 UPD42 INS42 INS43 INS62 MOV8 INS8 INS25 INS32 INS62 INS21 INS21 INS42 INS33 INS21 UPD42 MOV43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS32 UPD42 INS42 INS32 INS32 UPD42 MOV42 INS42 UPD42 MOV42 MOV33 INS42 UPD42 UPD42 INS42 MOV43 INS42 INS43 INS53 MOV27 MOV8 INS8 INS42 INS42 INS42 INS43 INS32 INS32 INS32 MOV32 UPD42 MOV32 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 UPD45 INS42 INS14 INS21 INS60 INS21 MOV21 INS60 INS25 INS42 INS36 INS42 INS42 INS42 INS42 MOV32 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 INS42 INS42 INS42 INS42 MOV43 INS42 INS11 INS43 INS27 INS7 MOV43 INS59 INS32 INS43 INS59 INS27 MOV8 INS8 INS11 INS42 INS42 MOV32 UPD42 INS32 INS43 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS27 INS33 INS33 MOV43 INS42 INS42 MOV14 INS32 INS8 INS32 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS14 UPD42 MOV42 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 DEL40 DEL65 DEL42 DEL42 DEL38 DEL32 DEL21 DEL8 DEL25 DEL27 DEL8 DEL25 DEL8 DEL31 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL61 DEL32 DEL61 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL42 DEL16 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL33 DEL33 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL40 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL14 DEL32 DEL21 DEL8 DEL54 DEL42 DEL32