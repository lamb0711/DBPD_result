work in progress

jcr2spi
- HierarchyManager: fixing methods with ItemId param
- HierarchyManagerImpl(s): removing unused methods
- ItemManagerImpl: replacing NodeId as cacheKey
- ItemImpl: remove ISM field

jcr2spi/xml
- ImporterImpl renamed to SessionImporter (used for s-import only)
- xml import: Use UUID String instead of creating NodeIds
- ReferenceChangeTracker: remove usage of spi NodeId

jcr2spi/state
- SessionItemStateManager: ValueFactory not needed since QPropertyDefinition returns qualified values.

jcr2spi/util
- LogUtil: add 'saveGetJCRName' utility method

jcr2spi/locking
- locking: LockManager to use NodeState instead of NodeId
- locking: removing locktoken from Session checks if Session is lock holder

jcr2spi/query
- NodeIteratorImpl: fix commented code, that allows to retrieve
  search results from IdIterator returned from QueryInfo
- minor reformatting, javadoc

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430791 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
+import org.apache.jackrabbit.spi.ItemId;
+import javax.jcr.Item;
+import java.util.Iterator;
-class NodeIteratorImpl implements ScoreNodeIterator {
+public class NodeIteratorImpl implements ScoreNodeIterator {
-    protected final ItemManager itemMgr;
+    private final ItemManager itemMgr;
-    /** The namespace resolver */
-    protected final NamespaceResolver resolver;
+    /** ItemManager to turn Ids into Node instances */
+    private final ItemStateManager itemStateMgr;
-    protected final QueryInfo queryInfo;
+    private final QueryInfo queryInfo;
-    protected final IdIterator ids;
+    private final IdIterator ids;
-    protected final int scoreIndex;
+    private final int scoreIndex;
-    protected int pos = -1;
+    private int pos = -1;
-    protected int invalid = 0;
+    private int invalid = 0;
-     * @param itemMgr   the <code>ItemManager</code> to turn Id's into
-     *                  <code>Node</code> instances.
-     * @param resolver  the namespace resolver.
+     * @param itemMgr The <code>ItemManager</code> to build <code>Node</code> instances.
+     * @param itemStateMgr The <code>ItemStateManager</code> used to build
+     * <code>ItemState</code>s from the ids returned by the query.
-     * @throws RepositoryException if an error occurs while creating a node
-     *                             iterator.
+     * @throws RepositoryException if an error occurs while creating a node iterator.
-    NodeIteratorImpl(ItemManager itemMgr,
-                     NamespaceResolver resolver,
-                     QueryInfo queryInfo) throws RepositoryException {
+    public NodeIteratorImpl(ItemManager itemMgr, ItemStateManager itemStateMgr,
+                            QueryInfo queryInfo) throws RepositoryException {
-        this.resolver = resolver;
+        this.itemStateMgr = itemStateMgr;
+        
-                    && columnNames[i].getLocalName().startsWith(QName.JCR_SCORE.getLocalName())) {
+                && columnNames[i].getLocalName().startsWith(QName.JCR_SCORE.getLocalName())) {
+    //------------------------------------------------------< ScoreIterator >---
+    /**
+     * Returns the score of the node returned by {@link #nextNode()}. In other
+     * words, this method returns the score value of the next <code>Node</code>.
+     *
+     * @return the score of the node returned by {@link #nextNode()}.
+     * @throws NoSuchElementException if there is no next node.
+     * @see ScoreNodeIterator#getScore()
+     */
+    public float getScore() throws NoSuchElementException {
+        if (!hasNext()) {
+            throw new NoSuchElementException();
+        }
+        String scoreString = queryInfo.getValues(nextId)[scoreIndex];
+        try {
+            return Float.parseFloat(scoreString);
+        } catch (NumberFormatException e) {
+            throw new NoSuchElementException();
+        }
+    }
+
+    //-------------------------------------------------------< NodeIterator >---
-     * @throws NoSuchElementException if iteration has no more
-     *   <code>Node</code>s.
+     * @throws NoSuchElementException if iteration has no more <code>Node</code>s.
+     * @see javax.jcr.NodeIterator#nextNode()
-    /**
-     * Returns the next <code>Node</code> in the result set.
-     *
-     * @return the next <code>Node</code> in the result set.
-     * @throws NoSuchElementException if iteration has no more
-     *   <code>Node</code>s.
-     */
-    public Object next() throws NoSuchElementException {
-        return nextNode();
-    }
-
+    //------------------------------------------------------< RangeIterator >---
-     * @throws NoSuchElementException
-     *          if skipped past the last <code>Node</code> in this iterator.
+     * @throws NoSuchElementException if skipped past the last <code>Node</code>
+     * in this iterator.
+     * @see javax.jcr.NodeIterator#skip(long)
+     * @see javax.jcr.RangeIterator#getSize()
+     * @see javax.jcr.RangeIterator#getPosition()
+     * Returns the next <code>Node</code> in the result set.
+     *
+     * @return the next <code>Node</code> in the result set.
+     * @throws NoSuchElementException if iteration has no more <code>Node</code>s.
+     * @see java.util.Iterator#next()
+     */
+    public Object next() throws NoSuchElementException {
+        return nextNode();
+    }
+
+    /**
+     * @see java.util.Iterator#hasNext()
+     * @see Iterator#remove()
-    /**
-     * Returns the score of the node returned by {@link #nextNode()}. In other
-     * words, this method returns the score value of the next <code>Node</code>.
-     * 
-     * @return the score of the node returned by {@link #nextNode()}.
-     * @throws NoSuchElementException if there is no next node.
-     */
-    public float getScore() throws NoSuchElementException {
-        if (!hasNext()) {
-            throw new NoSuchElementException();
-        }
-        String scoreString = queryInfo.getValues(nextId)[scoreIndex];
-        try {
-            return Float.parseFloat(scoreString);
-        } catch (NumberFormatException e) {
-            throw new NoSuchElementException();
-        }
-    }
-
+    //------------------------------------------------------------< private >---
-        // TODO
-        /*
-                Item tmp = itemMgr.getItem(nextId);
+                Item tmp = itemMgr.getItem(itemStateMgr.getItemState(nextId));
-        */

MOV26 INS26 INS26 INS26 MOV31 MOV31 INS40 UPD40 INS40 INS40 INS83 UPD83 UPD83 UPD43 UPD83 UPD83 UPD83 UPD83 UPD83 INS83 INS8 UPD42 UPD42 UPD43 UPD42 INS65 MOV65 MOV65 INS65 INS65 INS65 INS65 MOV65 MOV65 INS65 INS65 INS65 INS21 INS61 INS21 UPD66 UPD66 UPD42 INS66 UPD66 UPD66 UPD42 INS68 UPD66 INS68 UPD66 INS66 INS68 INS68 INS68 UPD66 INS68 INS68 INS68 INS7 INS27 INS8 INS37 UPD42 INS42 INS42 INS40 INS42 INS40 INS42 INS69 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS33 INS27 INS32 INS54 INS42 UPD42 INS39 INS42 INS33 INS42 INS42 INS8 INS12 INS60 INS25 INS21 INS60 INS25 INS44 INS8 INS43 INS59 INS38 INS8 INS7 INS43 INS59 INS32 INS8 INS8 INS43 INS42 INS21 INS21 INS21 INS42 INS42 INS32 INS32 INS21 INS18 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS32 INS37 INS37 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS7 INS32 INS37 INS37 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS45 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL8