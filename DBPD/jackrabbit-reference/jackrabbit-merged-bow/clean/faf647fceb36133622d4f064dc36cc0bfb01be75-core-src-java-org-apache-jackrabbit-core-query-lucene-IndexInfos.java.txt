JCR-189: QueryHandler should use lucene Input-/OutputStream implementations

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@233174 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.FileSystem;
-import org.apache.jackrabbit.core.fs.FileSystemException;
-
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.FileOutputStream;
+import java.io.OutputStream;
+ * Stores a sequence of index names.
+     * Returns <code>true</code> if this index infos exists in
+     * <code>dir</code>.
+     *
+     * @param dir the directory where to look for the index infos.
+     * @return <code>true</code> if it exists; <code>false</code> otherwise.
+     */
+    boolean exists(File dir) {
+        return new File(dir, name).exists();
+    }
+
+    /**
-     * @param fs the base file system
-     * @throws FileSystemException if an error occurs.
+     *
+     * @param dir the directory from where to read the index infos.
-    void read(FileSystem fs) throws FileSystemException, IOException {
-        DataInputStream input = new DataInputStream(fs.getInputStream(name));
+    void read(File dir) throws IOException {
+        InputStream in = new FileInputStream(new File(dir, name));
-            counter = input.readInt();
-            for (int i = input.readInt(); i > 0; i--) {
-                indexes.add(input.readUTF());
+            DataInputStream di = new DataInputStream(in);
+            counter = di.readInt();
+            for (int i = di.readInt(); i > 0; i--) {
+                indexes.add(di.readUTF());
-            input.close();
+            in.close();
-     * @param fs the base file system
-     * @throws FileSystemException if an error occurs.
+     *
+     * @param dir the directory where to write the index infos.
-    void write(FileSystem fs) throws FileSystemException, IOException {
+    void write(File dir) throws IOException {
-        DataOutputStream output = new DataOutputStream(fs.getOutputStream(name + ".new"));
+        File nu = new File(dir, name + ".new");
+        OutputStream out = new FileOutputStream(nu);
-            output.writeInt(counter);
-            output.writeInt(indexes.size());
+            DataOutputStream dataOut = new DataOutputStream(out);
+            dataOut.writeInt(counter);
+            dataOut.writeInt(indexes.size());
-                output.writeUTF(getName(i));
+                dataOut.writeUTF(getName(i));
-            output.close();
+            out.close();
-        fs.move(name + ".new", name);
+        // delete old
+        File old = new File(dir, name);
+        if (old.exists() && !old.delete()) {
+            throw new IOException("Unable to delete file: " + old.getAbsolutePath());
+        }
+        if (!nu.renameTo(old)) {
+            throw new IOException("Unable to rename file: " + nu.getAbsolutePath());
+        }

MOV26 MOV26 INS26 INS26 INS26 INS40 UPD40 INS40 UPD40 INS40 INS31 INS65 INS29 INS39 INS42 INS44 INS8 INS8 MOV60 INS66 INS65 INS65 INS65 INS43 INS42 INS41 UPD43 UPD42 INS60 MOV54 UPD43 UPD42 INS60 INS60 INS25 INS25 INS66 INS66 INS42 INS66 INS66 INS42 INS32 UPD42 UPD66 UPD42 INS43 MOV59 UPD42 UPD66 UPD42 INS43 INS59 INS43 INS59 INS43 INS27 INS8 INS38 INS8 INS14 INS42 UPD42 MOV42 UPD42 INS14 INS60 INS42 INS42 INS14 INS42 INS42 INS14 INS60 INS42 UPD42 INS32 INS38 INS53 INS32 INS53 INS43 INS42 INS42 INS43 INS14 MOV43 INS59 INS43 INS42 MOV27 INS43 INS42 MOV43 INS59 INS43 INS42 INS42 INS42 INS42 INS32 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 INS42 INS42 INS43 INS42 INS42 INS42 INS14 UPD42 INS42 INS42 INS42 INS14 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS43 INS27 INS43 INS27 INS42 MOV43 INS42 UPD42 MOV43 INS42 INS42 INS45 INS32 INS42 INS45 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 DEL42 DEL66 DEL65 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL60 DEL8 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL27 DEL32 DEL32 DEL21