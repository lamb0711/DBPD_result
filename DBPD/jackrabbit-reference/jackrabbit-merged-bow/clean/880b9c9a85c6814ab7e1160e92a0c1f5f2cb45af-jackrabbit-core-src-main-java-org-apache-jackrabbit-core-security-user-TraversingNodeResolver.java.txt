JCR-2620 -  Authorizable#getProperty and #setProperty should deal with relativePath

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@987435 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.security.user.UserManager;
+import org.apache.jackrabbit.commons.predicate.Predicate;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.spi.Path;
+import java.util.HashMap;
+import java.util.Map;
-                NodeIterator nodes = collectNodes(value,
-                        Collections.singleton(propertyName), ntName,
-                        root.getNodes(), true, 1);
-                if (nodes.hasNext()) {
-                    return nodes.nextNode();
+                Set<Node> matchSet = new HashSet<Node>();
+                collectNodes(value, Collections.singleton(propertyName), ntName, root.getNodes(), matchSet, true, 1);
+
+                NodeIterator it = new NodeIteratorAdapter(matchSet);
+                if (it.hasNext()) {
+                    return it.nextNode();
-                return collectNodes(value, propertyNames, ntName, root.getNodes(), exact, maxSize);
+                Set<Node> matchSet = new HashSet<Node>();
+                collectNodes(value, propertyNames, ntName, root.getNodes(), matchSet, exact, maxSize);
+                return new NodeIteratorAdapter(matchSet);
+            } catch (PathNotFoundException e) {
+                // should not get here
+                log.warn("Error while retrieving node " + sr);
+            }
+        } // else: searchRoot does not exist yet -> omit the search
+        return NodeIteratorAdapter.EMPTY;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    @Override
+    public NodeIterator findNodes(Path relPath, String value, int authorizableType, boolean exact, long maxSize) throws RepositoryException {
+        String sr = getSearchRoot(authorizableType);
+        if (getSession().nodeExists(sr)) {
+            try {
+                String path = getNamePathResolver().getJCRPath(relPath);
+                AuthorizableTypePredicate pred = getAuthorizableTypePredicate(authorizableType, relPath.getLength() > 1);
+
+                Node root = getSession().getNode(sr);
+                Map<String, Node> matchingNodes = new HashMap<String, Node>();
+                collectNodes(value, path, pred, root.getNodes(), matchingNodes, exact, maxSize);
+
+                return new NodeIteratorAdapter(matchingNodes.values());
-     * searches the given value in the range of the given NodeIterator.
-     * recurses unitll all matching values in all configured props are found.
-     *
-     * @param value   the value to be found in the nodes
-     * @param props   property to be searched, or null if {@link javax.jcr.Item#getName()}
-     * @param ntName  to filter search
-     * @param nodes   range of nodes and descendants to be searched
-     * @param exact   if set to true the value has to match exactly else a
-     * substring is searched
-     * @param maxSize
-     * @return
-     */
-    private NodeIterator collectNodes(String value, Set<Name> props, Name ntName,
-                                      NodeIterator nodes, boolean exact,
-                                      long maxSize) {
-        Set<Node> matchSet = new HashSet<Node>();
-        collectNodes(value, props, ntName, nodes, matchSet, exact, maxSize);
-        return new NodeIteratorAdapter(matchSet);
-    }
-
-    /**
-     * searches the given value in the range of the given NodeIterator.
-     * recurses unitll all matching values in all configured properties are found.
+     * Searches the given value in the range of the given NodeIterator.
+     * This method is called recursively to look within the complete tree
+     * of authorizable nodes.
-     * @param nodeTypeName  name of nodetypes to search
+     * @param nodeTypeName  name of node types to search
+    private void collectNodes(String value, String relPath,
+                              AuthorizableTypePredicate predicate, NodeIterator itr,
+                              Map<String, Node> matchingNodes, boolean exact, long maxSize) {
+        while (itr.hasNext()) {
+            NodeImpl node = (NodeImpl) itr.nextNode();
+            try {
+                Node authNode = getMatchingNode(node, predicate, relPath, value, exact);
+                if (authNode != null) {
+                    matchingNodes.put(authNode.getIdentifier(), authNode);
+                    maxSize--;
+                } else if (node.hasNodes() && maxSize > 0) {
+                    collectNodes(value, relPath, predicate, node.getNodes(), matchingNodes, exact, maxSize);
+                }
+            } catch (RepositoryException e) {
+                log.warn("Internal error while accessing node", e);
+            }
+        }
+    }
+
+    /**
+     *
+     * @param node
+     * @param predicate
+     * @param relPath
+     * @param value
+     * @param exact
+     * @return
+     * @throws RepositoryException
+     */
+    private static Node getMatchingNode(NodeImpl node, AuthorizableTypePredicate predicate,
+                                        String relPath, String value,
+                                        boolean exact) throws RepositoryException {
+        boolean match = false;
+        Node authNode = predicate.getAuthorizableNode(node);
+        if (authNode != null && node.hasProperty(relPath)) {
+            try {
+                Property prop = node.getProperty(relPath);
+                if (prop.isMultiple()) {
+                    Value[] values = prop.getValues();
+                    for (int i = 0; i < values.length && !match; i++) {
+                        match = matches(value, values[i].getString(), exact);
+                    }
+                } else {
+                    match = matches(value, prop.getString(), exact);
+                }
+            } catch (PatternSyntaxException pe) {
+                log.debug("couldn't search for {}, pattern invalid: {}", value, pe.getMessage());
+            }
+        }
+        return (match) ? authNode : null;
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 MOV43 INS44 INS44 INS44 INS29 INS78 INS83 MOV43 INS42 INS44 MOV44 INS44 MOV44 MOV44 INS43 INS8 INS83 INS39 MOV42 MOV44 INS44 INS44 MOV44 MOV44 MOV44 MOV44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS39 INS42 INS39 INS42 UPD65 MOV65 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS41 INS43 INS42 INS43 UPD42 MOV42 UPD43 UPD42 INS74 UPD42 INS61 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS25 INS41 INS42 INS42 INS43 INS59 INS32 INS8 INS40 UPD66 UPD66 INS66 UPD66 UPD42 MOV42 UPD42 MOV42 UPD42 INS43 INS43 INS43 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS16 INS42 INS42 INS32 INS32 INS42 INS42 INS54 INS42 INS42 UPD42 MOV42 INS42 INS42 INS60 INS54 INS42 INS9 INS42 INS42 INS32 INS27 INS32 INS54 INS36 INS42 INS33 INS42 INS42 INS42 INS8 INS12 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS8 INS12 INS42 INS21 INS60 MOV60 INS21 MOV41 INS60 INS60 INS60 INS60 INS21 INS41 INS44 INS8 UPD42 MOV42 UPD42 MOV42 INS11 INS60 INS25 INS44 INS8 INS60 INS25 INS44 INS8 INS74 MOV32 MOV43 INS59 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS14 INS43 INS42 INS21 INS43 INS32 INS43 INS59 INS27 INS8 INS25 INS43 INS42 INS21 INS43 INS59 INS32 INS8 INS8 INS43 INS42 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS14 UPD42 INS42 MOV42 MOV42 MOV42 MOV42 MOV32 INS42 MOV42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS32 UPD42 MOV42 INS42 INS42 MOV42 INS42 INS32 INS42 INS33 INS21 INS21 INS27 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS24 INS21 INS42 INS32 INS42 INS42 INS74 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS37 INS32 INS27 MOV21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS42 INS42 INS45 INS42 INS32 INS43 INS43 INS42 UPD42 INS42 INS32 INS34 INS42 INS43 INS43 INS43 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS38 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 UPD42 INS42 INS42 INS42 INS42 INS34 INS42 INS40 INS42 INS7 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS42 DEL42 DEL32 DEL41 DEL66 DEL66 DEL42 DEL66 DEL65 DEL42 DEL66 DEL40 DEL42 DEL68 DEL65 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL65 DEL65 DEL29 DEL83 DEL43 DEL43 DEL74 DEL44 DEL8 DEL31 DEL43