- Changed name escaping. Underscore is only escaped if it is followed by xHHHH where H is a hex digit.
- Added more test cases.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159481 13f79535-47bb-0310-9956-ffa450edef68

- * todo change implementation to latest spec. only encode _x when followed by XXXX_
-    private static Pattern ENCODE_PATTERN = Pattern.compile("_x\\p{XDigit}{4}_");
+    private static final Pattern ENCODE_PATTERN = Pattern.compile("_x\\p{XDigit}{4}_");
-    private static char[] PADDING = new char[] {'0', '0', '0'};
+    private static final char[] PADDING = new char[] {'0', '0', '0'};
+
+    /** All the possible hex digits */
+    private static final String HEX_DIGITS = "0123456789abcdefABCDEF";
-                        if (name.charAt(i) == '_'
-                                && name.length() > (i + 1)
-                                && name.charAt(i + 1) == 'x') {
+                        if (needsEscaping(name, i)) {
-                    if (name.charAt(i) == '_'
-                            && name.length() > (i + 1)
-                            && name.charAt(i + 1) == 'x') {
+                    if (needsEscaping(name, i)) {
-     * <code>"_x" + hex value of c + "_"</code>. Where the hex value has always
-     * four digits with possibly leading zeros.
+     * <code>"_x" + hex value of c + "_"</code>. Where the hex value has
+     * four digits if the character with possibly leading zeros.
+    /**
+     * Returns true if <code>name.charAt(location)</code> is the underscore
+     * character and the following character sequence is 'xHHHH_' where H
+     * is a hex digit.
+     * @param name the name to check.
+     * @param location the location to look at.
+     * @throws ArrayIndexOutOfBoundsException if location > name.length()
+     */
+    private static boolean needsEscaping(String name, int location) {
+        if (name.charAt(location) == '_' && name.length() >= location + 6) {
+            if (name.charAt(location + 1) == 'x'
+                    && HEX_DIGITS.indexOf(name.charAt(location + 2)) != -1
+                    && HEX_DIGITS.indexOf(name.charAt(location + 3)) != -1
+                    && HEX_DIGITS.indexOf(name.charAt(location + 4)) != -1
+                    && HEX_DIGITS.indexOf(name.charAt(location + 5)) != -1) {
+                return true;
+            } else {
+                return false;
+            }
+        } else {
+            return false;
+        }
+    }

INS23 INS31 INS83 INS83 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS42 INS42 INS45 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 INS66 UPD66 UPD66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS8 INS27 UPD27 MOV27 INS25 INS41 INS32 INS13 INS27 INS27 INS8 INS8 INS9 INS42 INS42 INS42 UPD42 MOV42 UPD34 MOV34 INS27 INS27 INS41 INS41 INS27 INS27 INS32 INS38 INS9 INS9 INS27 INS27 INS32 INS38 INS42 INS42 INS32 INS34 INS27 INS27 INS32 INS38 INS42 INS42 INS32 INS34 INS42 INS42 INS27 INS32 INS32 INS13 INS32 INS38 INS42 INS42 INS32 INS34 INS42 INS42 INS27 INS42 INS34 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS27 INS42 INS42 INS32 INS34 INS42 INS42 INS27 INS42 INS34 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS34 INS42 INS42 INS27 INS42 INS34 INS42 INS34 DEL66 DEL32 DEL13 DEL27 DEL42 DEL42 DEL32 DEL42 DEL34 DEL27 DEL36 DEL27 DEL27 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL13 DEL27 DEL27 DEL32 DEL13 DEL27 DEL27 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL13 DEL27 DEL27 DEL27 DEL36