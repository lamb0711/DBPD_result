JCR-1976: Text.unescape() should should preserve 'unicode' 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@747096 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.UnsupportedEncodingException;
+import java.io.UnsupportedEncodingException;
-     * @throws ArrayIndexOutOfBoundsException if not enough character follow an
-     *                                        escape character
-     *                                        character do not represent a hex-number.
+     *                                        character do not represent a hex-number
+     *                                        or if not enough characters follow an
+     *                                        escape character
-    public static String unescape(String string, char escape) {
-        ByteArrayOutputStream out = new ByteArrayOutputStream(string.length());
-        for (int i = 0; i < string.length(); i++) {
-            char c = string.charAt(i);
-            if (c != escape) {
-                out.write(c);
-            } else if (i + 2 < string.length()) {
-                try {
-                    out.write(Integer.parseInt(string.substring(i + 1, i + 3), 16));
-                } catch (NumberFormatException e) {
-                    throw new IllegalArgumentException(
-                            "Escape sequence is not hexadecimal: " + string);
-                }
-                i += 2;
-            } else {
-                throw new IllegalArgumentException(
-                        "Escape sequence is too short: " + string);
-            }
-        }
-
+    public static String unescape(String string, char escape)  {
+            byte[] utf8 = string.getBytes("utf-8");
+
+            // Check whether escape occurs at invalid position
+            if ((utf8.length >= 1 && utf8[utf8.length - 1] == escape) ||
+                (utf8.length >= 2 && utf8[utf8.length - 2] == escape)) {
+                throw new IllegalArgumentException("Premature end of escape sequence at end of input");
+            }
+
+            ByteArrayOutputStream out = new ByteArrayOutputStream(utf8.length);
+            for (int k = 0; k < utf8.length; k++) {
+                byte b = utf8[k];
+                if (b == escape) {
+                    out.write((decodeDigit(utf8[++k]) << 4) + decodeDigit(utf8[++k]));
+                }
+                else {
+                    out.write(b);
+                }
+            }
+
-        } catch (UnsupportedEncodingException e) {
+        }
+        catch (UnsupportedEncodingException e) {
-     * 
+     *
-        if (c == '!' || c == '(' || c == ':' || c == '^' 
-            || c == '[' || c == ']' || c == '\"' || c == '{' 
+        if (c == '!' || c == '(' || c == ':' || c == '^'
+            || c == '[' || c == ']' || c == '\"' || c == '{'
-                ? null 
+                ? null
+
+    private static byte decodeDigit(byte b) {
+        if (b >= 0x30 && b <= 0x39) {
+            return (byte) (b - 0x30);
+        }
+        else if (b >= 0x41 && b <= 0x46) {
+            return (byte) (b - 0x37);
+        }
+        else if (b >= 0x61 && b <= 0x66) {
+            return (byte) (b - 0x57);
+        }
+        else {
+            throw new IllegalArgumentException("Escape sequence is not hexadecimal: " + (char)b);
+        }
+    }
+

MOV26 INS31 INS31 MOV29 MOV83 MOV83 MOV43 MOV42 MOV44 MOV44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS54 INS39 INS42 INS25 UPD66 INS66 INS66 INS8 MOV12 INS27 INS8 INS25 MOV60 INS25 INS60 INS24 MOV41 INS27 INS27 INS41 INS27 INS8 INS25 INS5 INS27 MOV8 MOV43 INS59 MOV58 MOV27 MOV37 INS8 INS42 INS34 INS42 INS34 INS11 INS27 INS27 INS41 INS27 INS8 MOV8 INS39 INS85 UPD42 INS32 INS36 INS36 INS42 INS14 UPD42 INS40 UPD42 MOV60 INS25 INS39 INS36 UPD42 MOV42 UPD34 MOV34 UPD42 MOV42 UPD34 MOV34 INS11 INS27 INS27 INS41 MOV42 UPD42 MOV42 INS45 INS27 INS27 MOV43 INS40 UPD42 UPD39 UPD27 MOV27 INS8 INS8 INS27 INS39 INS36 INS42 INS34 INS42 INS34 INS11 INS27 INS27 INS27 INS27 INS45 UPD42 INS2 UPD42 INS21 INS21 INS42 INS34 INS27 INS39 INS36 INS40 INS34 INS2 INS42 INS40 INS34 INS2 INS42 INS42 INS42 INS32 INS32 INS42 INS34 INS27 UPD45 INS11 INS42 INS27 INS42 INS27 MOV42 MOV42 INS27 MOV42 MOV42 UPD42 MOV42 INS42 INS34 INS39 INS42 INS40 INS34 INS40 INS34 INS36 MOV32 INS27 UPD42 INS2 INS32 UPD34 MOV34 INS42 INS38 INS42 INS2 INS42 INS42 INS38 INS42 DEL42 DEL66 DEL66 DEL65 DEL32 DEL14 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL27 DEL27 DEL32 DEL34 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL24 DEL8 DEL54 DEL8 DEL31 DEL42