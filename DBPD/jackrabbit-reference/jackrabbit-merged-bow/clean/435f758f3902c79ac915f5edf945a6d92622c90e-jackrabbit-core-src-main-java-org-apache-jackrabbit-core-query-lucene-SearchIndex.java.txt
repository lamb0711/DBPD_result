JCR-415: Enhance indexing of binary content
- Use text-extractor module in jackrabbit-core

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@489000 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.query.TextFilter;
+import org.apache.jackrabbit.extractor.DefaultTextExtractor;
+import org.apache.jackrabbit.extractor.TextExtractor;
-import java.util.StringTokenizer;
-import java.util.Collections;
-     * Default text filters.
-     */
-    public static final String DEFAULT_TEXT_FILTERS = TextPlainTextFilter.class.getName();
-
-    /**
-     * List of {@link org.apache.jackrabbit.core.query.TextFilter} instance.
+     * List of text extractor and text filter class names. The configured
+     * classes will be instantiated and used to extract text content from
+     * binary properties.
-    private List textFilters;
+    private String textFilterClasses =
+        DefaultTextExtractor.class.getName();
+
+    /**
+     * Text extractor for extracting text content of binary properties.
+     */
+    private TextExtractor extractor;
-        setTextFilterClasses(DEFAULT_TEXT_FILTERS);
+        extractor = new JackrabbitTextExtractor(textFilterClasses);
+
-     * Returns an unmodifiable list of {@link TextFilter} configured for
-     * this search index.
+     * Returns the text extractor in use for indexing.
-     * @return unmodifiable list of text filters.
+     * @return the text extractor in use for indexing.
-    protected List getTextFilters() {
-        return textFilters;
+    public TextExtractor getTextExtractor() {
+        return extractor;
-                nsMappings, textFilters);
+                nsMappings, extractor);
-     * Sets a new set of text filter classes that are in use for indexing
-     * binary properties. The <code>filterClasses</code> must be a comma
-     * separated <code>String</code> of fully qualified class names implementing
-     * {@link org.apache.jackrabbit.core.query.TextFilter}. Each class must
-     * provide a default constructor.
-     * </p>
-     * Filter class names that cannot be resolved are skipped and a warn message
-     * is logged.
+     * Sets the list of text extractors (and text filters) to use for
+     * extracting text content from binary properties. The list must be
+     * comma (or whitespace) separated, and contain fully qualified class
+     * names of the {@link TextExtractor} (and {@link org.apache.jackrabbit.core.query.TextFilter}) classes
+     * to be used. The configured classes must all have a public default
+     * constructor.
-     * @param filterClasses comma separated list of filter class names
+     * @param filterClasses comma separated list of class names
-        List filters = new ArrayList();
-        StringTokenizer tokenizer = new StringTokenizer(filterClasses, ", \t\n\r\f");
-        while (tokenizer.hasMoreTokens()) {
-            String className = tokenizer.nextToken();
-            try {
-                Class filterClass = Class.forName(className);
-                TextFilter filter = (TextFilter) filterClass.newInstance();
-                filters.add(filter);
-            } catch (Exception e) {
-                log.warn("Invalid TextFilter class: " + className, e);
-            } catch (LinkageError e) {
-                log.warn("Missing dependency for text filter: " + className);
-                log.warn(e.toString());
-            }
-        }
-        textFilters = Collections.unmodifiableList(filters);
+        this.textFilterClasses = filterClasses;
-        StringBuffer names = new StringBuffer();
-        String delim = "";
-        for (Iterator it = textFilters.iterator(); it.hasNext();) {
-            names.append(delim);
-            names.append(it.next().getClass().getName());
-            delim = ",";
-        }
-        return names.toString();
+        return textFilterClasses;

MOV26 MOV26 MOV23 UPD40 UPD40 UPD83 UPD43 UPD83 UPD43 UPD42 UPD42 UPD42 UPD42 INS21 UPD42 MOV65 UPD66 INS66 INS66 UPD66 INS7 UPD66 UPD66 UPD42 UPD66 UPD66 UPD66 UPD66 INS65 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 UPD43 INS42 INS14 UPD42 INS42 INS22 INS42 UPD42 INS43 INS42 INS52 INS42 INS42 DEL40 DEL26 DEL83 DEL83 DEL40 DEL65 DEL66 DEL42 DEL42 DEL32 DEL21 DEL42 DEL65 DEL66 DEL66 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32