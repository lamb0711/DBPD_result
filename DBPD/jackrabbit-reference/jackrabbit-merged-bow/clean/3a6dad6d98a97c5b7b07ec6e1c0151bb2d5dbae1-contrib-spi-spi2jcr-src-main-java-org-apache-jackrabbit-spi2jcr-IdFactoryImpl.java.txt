minor improvements:
- make usage of commons IdFactory
- make ItemInfoImpl abstract
- get rid of Item field with ItemInfo

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552861 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.ItemId;
+import org.apache.jackrabbit.identifier.AbstractIdFactory;
- * TODO: copied from spi2dav, move common part to spi-commons.
-class IdFactoryImpl implements IdFactory {
+class IdFactoryImpl extends AbstractIdFactory {
-    private static final IdFactory idFactory = new IdFactoryImpl();
+    private static final IdFactory INSTANCE = new IdFactoryImpl();
-    private IdFactoryImpl() {};
+    private IdFactoryImpl() {}
-        return idFactory;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public PropertyId createPropertyId(NodeId parentId, QName propertyName) {
-        try {
-            return new PropertyIdImpl(parentId, propertyName);
-        } catch (MalformedPathException e) {
-            throw new IllegalArgumentException(e.getMessage());
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NodeId createNodeId(NodeId parentId, Path path) {
-        try {
-            return new NodeIdImpl(parentId, path);
-        } catch (MalformedPathException e) {
-            throw new IllegalArgumentException(e.getMessage());
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NodeId createNodeId(String uniqueID, Path path) {
-        return new NodeIdImpl(uniqueID, path);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NodeId createNodeId(String uniqueID) {
-        return new NodeIdImpl(uniqueID);
+        return INSTANCE;
-                return new NodeIdImpl(uniqueId, builder.getPath());
+                return createNodeId(uniqueId, builder.getPath());
-            return new NodeIdImpl(uniqueId);
+            return createNodeId(uniqueId);
-
-    //------------------------------------------------------< Inner classes >---
-    private static abstract class ItemIdImpl implements ItemId {
-
-        private final String uniqueID;
-        private final Path path;
-
-        private int hashCode = 0;
-
-        private ItemIdImpl(String uniqueID, Path path) {
-            if (uniqueID == null && path == null) {
-                throw new IllegalArgumentException("Only uniqueID or relative path might be null.");
-            }
-            this.uniqueID = uniqueID;
-            this.path = path;
-        }
-
-        private ItemIdImpl(NodeId parentId, QName name) throws MalformedPathException {
-            if (parentId == null || name == null) {
-                throw new IllegalArgumentException("Invalid ItemIdImpl: parentId and name must not be null.");
-            }
-            this.uniqueID = parentId.getUniqueID();
-            Path parentPath = parentId.getPath();
-            if (parentPath != null) {
-                this.path = Path.create(parentPath, name, true);
-            } else {
-                this.path = Path.create(name, Path.INDEX_UNDEFINED);
-            }
-        }
-
-        public abstract boolean denotesNode();
-
-        public String getUniqueID() {
-            return uniqueID;
-        }
-
-        public Path getPath() {
-            return path;
-        }
-
-        /**
-         * ItemIdImpl objects are equal if the have the same uuid and relative path.
-         *
-         * @param obj
-         * @return
-         */
-        public boolean equals(Object obj) {
-            if (obj == this) {
-                return true;
-            }
-            if (obj instanceof ItemId) {
-                ItemId other = (ItemId) obj;
-                return equals(other);
-            }
-            return false;
-        }
-
-        boolean equals(ItemId other) {
-            return (uniqueID == null ? other.getUniqueID() == null : uniqueID.equals(other.getUniqueID()))
-                && (path == null ? other.getPath() == null : path.equals(other.getPath()));
-        }
-
-        /**
-         * Returns the hash code of the uuid and the path. The computed hash code
-         * is memorized for better performance.
-         *
-         * @return hash code
-         * @see Object#hashCode()
-         */
-        public int hashCode() {
-            // since the ItemIdImpl is immutable, store the computed hash code value
-            if (hashCode == 0) {
-                hashCode = toString().hashCode();
-            }
-            return hashCode;
-        }
-
-        /**
-         * Combination of uuid and relative path
-         *
-         * @return
-         */
-        public String toString() {
-            StringBuffer b = new StringBuffer();
-            if (uniqueID != null) {
-                b.append(uniqueID);
-            }
-            if (path != null) {
-                b.append(path.toString());
-            }
-            return b.toString();
-        }
-    }
-
-    private static class NodeIdImpl extends ItemIdImpl implements NodeId {
-
-        public NodeIdImpl(String uniqueID) {
-            super(uniqueID, null);
-        }
-
-        public NodeIdImpl(String uniqueID, Path path) {
-            super(uniqueID, path);
-        }
-
-        public NodeIdImpl(NodeId parentId, Path path) throws MalformedPathException {
-            super(parentId.getUniqueID(), (parentId.getPath() != null) ? Path.create(parentId.getPath(), path, true) : path);
-        }
-
-        public boolean denotesNode() {
-            return true;
-        }
-
-        public boolean equals(Object obj) {
-            if (obj == this) {
-                return true;
-            }
-            if (obj instanceof NodeId) {
-                return super.equals((NodeId)obj);
-            }
-            return false;
-        }
-    }
-
-    private static class PropertyIdImpl extends ItemIdImpl implements PropertyId {
-
-        private final NodeId parentId;
-
-        private PropertyIdImpl(NodeId parentId, QName name) throws MalformedPathException {
-            super(parentId, name);
-            this.parentId = parentId;
-        }
-
-        public boolean denotesNode() {
-            return false;
-        }
-
-        public NodeId getParentId() {
-            return parentId;
-        }
-
-        public QName getQName() {
-            return getPath().getNameElement().getName();
-        }
-
-        public boolean equals(Object obj) {
-            if (obj == this) {
-                return true;
-            }
-            if (obj instanceof PropertyId) {
-                return super.equals((PropertyId)obj);
-            }
-            return false;
-        }
-    }

MOV26 UPD40 UPD43 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 MOV32 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL83 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL16 DEL36 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL16 DEL36 DEL27 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL42 DEL16 DEL46 DEL8 DEL31 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL48 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL55 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL48 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL55