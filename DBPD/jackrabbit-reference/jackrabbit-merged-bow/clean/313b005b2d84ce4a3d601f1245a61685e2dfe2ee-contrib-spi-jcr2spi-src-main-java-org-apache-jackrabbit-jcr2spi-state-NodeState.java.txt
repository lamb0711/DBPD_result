SPI:
- remove ItemStateFactory parameter from resolve methods
- add create[Node|Property]State methods to ItemStateFactory which take a parent NodeState
- use PropertyReference in NodeState instead of plain property QNames
- add getNodeState() and getPropertyState() on NodeState for state traversal

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@426582 13f79535-47bb-0310-9956-ffa450edef68

-     * set of property names (QName objects)
+     * Map of properties. Key = {@link QName} of property. Value = {@link
+     * PropertyReference}.
-    private HashSet propertyNames = new HashSet();
+    private HashMap properties = new HashMap();
-     * Set to <code>true</code> if {@link #propertyNames} is shared between
+     * Set to <code>true</code> if {@link #properties} is shared between
+     * The <code>ItemStateFactory</code> which is used to create new
+     * <code>ItemState</code> instances.
+     */
+    private final ItemStateFactory isf;
+
+    /**
+     * Constructs a new node state that is not connected.
+     *
+     * @param id            id of this NodeState
+     * @param parent        the parent of this NodeState
+     * @param nodeTypeName  node type of this node
+     * @param initialStatus the initial status of the node state object
+     * @param isTransient   flag indicating whether this state is transient or
+     *                      not.
+     * @param isf           the item state factory responsible for creating node
+     *                      states.
+     */
+    public NodeState(NodeId id, NodeState parent, QName nodeTypeName,
+                     int initialStatus, boolean isTransient, ItemStateFactory isf) {
+        super(initialStatus, isTransient);
+        this.id = id;
+        this.idFactory = parent.idFactory;
+        this.nodeTypeName = nodeTypeName;
+        this.isf = isf;
+    }
+
+    /**
+        // TODO: remove this constructor
+        this.isf = null;
+        // TODO: remove this constructor
+        this.isf = null;
-            propertyNames = nodeState.propertyNames;
+            properties = nodeState.properties;
-        return propertyNames.contains(propName);
+        return properties.containsKey(propName);
-        return Collections.unmodifiableSet(propertyNames);
+        return Collections.unmodifiableSet(properties.keySet());
-            propertyNames = (HashSet) propertyNames.clone();
+            properties = (HashMap) properties.clone();
-        propertyNames.add(propName);
+        properties.put(propName, new PropertyReference(this, propName, isf, idFactory));
-            propertyNames = (HashSet) propertyNames.clone();
+            properties = (HashMap) properties.clone();
-        return propertyNames.remove(propName);
+        return properties.remove(propName) != null;
-            propertyNames = new HashSet();
+            properties = new HashMap();
-            propertyNames.clear();
+            properties.clear();
-        if (propNames instanceof HashSet) {
-            HashSet names = (HashSet) propNames;
-            propertyNames = (HashSet) names.clone();
-            sharedPropertyNames = false;
-        } else {
-            if (sharedPropertyNames) {
-                propertyNames = new HashSet();
-                sharedPropertyNames = false;
-            } else {
-                propertyNames.clear();
-            }
-            propertyNames.addAll(propNames);
+        removeAllPropertyNames();
+        for (Iterator it = propNames.iterator(); it.hasNext(); ) {
+            addPropertyName((QName) it.next());
+    /**
+     * Returns the property state with the given name.
+     *
+     * @param propertyName the name of the property state to return.
+     * @throws NoSuchItemStateException if there is no property state with the
+     *                                  given name.
+     * @throws ItemStateException       if an error occurs while retrieving the
+     *                                  property state.
+     */
+    public synchronized PropertyState getPropertyState(QName propertyName)
+            throws NoSuchItemStateException, ItemStateException {
+        PropertyReference propRef = (PropertyReference) properties.get(propertyName);
+        if (propRef == null) {
+            throw new NoSuchItemStateException(idFactory.createPropertyId(getNodeId(), propertyName).toString());
+        }
+        return (PropertyState) propRef.resolve(isf);
+    }
+
+    /**
+     * Returns the node state with the given relative path.
+     *
+     * @param relPath the relative path (actually PathElement) of the child node
+     *                state.
+     * @return the child node state
+     * @throws NoSuchItemStateException if there is no node state with the given
+     *                                  <code>relPath</code>.
+     * @throws ItemStateException       if an error occurs while retrieving the
+     *                                  node state.
+     */
+    public synchronized NodeState getNodeState(Path.PathElement relPath)
+            throws NoSuchItemStateException, ItemStateException {
+        ChildNodeEntry cne = childNodeEntries.get(relPath.getName(), relPath.getNormalizedIndex());
+        if (cne == null) {
+            Path p = Path.create(relPath.getName(), relPath.getIndex());
+            NodeId id = idFactory.createNodeId(getNodeId(), p);
+            throw new NoSuchItemStateException(id.toString());
+        }
+        return cne.getNodeState();
+    }
+
+
-            return Collections.unmodifiableSet(propertyNames);
+            return Collections.unmodifiableSet(properties.keySet());
-        HashSet set = new HashSet(propertyNames);
-        set.removeAll(other.propertyNames);
+        HashSet set = new HashSet(properties.keySet());
+        set.removeAll(other.properties.keySet());
-        HashSet set = new HashSet(other.propertyNames);
-        set.removeAll(propertyNames);
+        HashSet set = new HashSet(other.properties.keySet());
+        set.removeAll(properties.keySet());
-                return new PathElementReference(NodeState.this, nodeName, NodeState.this.idFactory);
+                return new PathElementReference(NodeState.this, nodeName, NodeState.this.isf, NodeState.this.idFactory);
-                return new UUIDReference(NodeState.this, id, nodeName);
+                return new UUIDReference(NodeState.this, id, NodeState.this.isf, nodeName);

INS23 INS31 INS31 INS31 INS31 UPD43 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 MOV29 MOV83 MOV83 MOV39 MOV42 MOV44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS43 INS8 UPD42 UPD42 INS65 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS46 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS24 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 MOV60 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS41 INS66 INS65 UPD66 INS65 INS66 UPD43 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS27 INS32 INS58 INS32 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 UPD43 INS27 INS8 INS11 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS40 INS43 INS59 INS27 INS8 INS32 MOV43 MOV43 INS42 INS42 UPD42 INS22 INS42 INS22 INS40 INS22 INS42 INS22 INS42 INS22 INS33 INS22 INS33 UPD42 UPD42 INS32 MOV21 UPD42 UPD42 INS14 MOV21 INS32 INS33 MOV21 INS42 INS43 INS59 INS42 INS42 INS21 UPD42 UPD42 INS42 INS33 INS53 UPD43 MOV43 MOV32 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS53 INS42 INS42 INS32 INS32 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 MOV42 INS42 INS43 INS52 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS32 INS32 UPD43 INS32 INS14 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS32 INS43 INS59 INS43 INS59 INS14 MOV43 INS32 UPD40 MOV40 INS42 MOV43 INS32 UPD42 MOV42 INS42 UPD42 UPD40 UPD42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS11 UPD42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS43 INS32 INS32 INS42 INS42 INS40 INS42 UPD43 UPD43 UPD43 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS22 INS22 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 DEL42 DEL9 DEL7 DEL21 DEL32 DEL42 DEL43 DEL62 DEL42 DEL11 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL32 DEL21 DEL8 DEL25 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL40