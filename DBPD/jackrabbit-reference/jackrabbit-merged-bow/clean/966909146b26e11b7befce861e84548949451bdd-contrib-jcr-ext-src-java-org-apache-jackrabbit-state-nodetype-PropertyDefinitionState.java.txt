JCR-EXT: Cleanups and improvements for the simple node type state implementation.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@328809 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
-import java.util.Vector;
-
-    private int requiredType;
-
-    /** List of value constraint strings. */
-    private List valueConstraints;
+    private int requiredType = PropertyType.UNDEFINED;
-    private boolean multiple;
-
-    /** Creates an empty property definition state instance. */
-    public PropertyDefinitionState() {
-        super();
-        requiredType = PropertyType.UNDEFINED;
-        valueConstraints = new Vector();
-        multiple = false;
-    }
+    private boolean multiple = false;
-     * Returns the property value constraint strings. The returned
-     * array can be modified freely as it is freshly instantiated and
-     * not a part of the property definition state.
-     *
-     * @return value constraints
-     */
-    public String[] getValueConstraints() {
-        return (String[])
-            valueConstraints.toArray(new String[valueConstraints.size()]);
-    }
-
-    /**
-     * Adds a constraint string to the list of property value constraints.
-     *
-     * @param constraint constraint string
-     */
-    public void addValueConstraints(String constraint) {
-        valueConstraints.add(constraint);
-    }
-
-    /**
+    public boolean equals(Object object) {
+        if (this == object) {
+            return true;
+        } else if (object instanceof PropertyDefinitionState) {
+            PropertyDefinitionState that = (PropertyDefinitionState) object;
+            return super.equals(that)
+                && this.multiple == that.multiple
+                && this.requiredType == that.requiredType;
+        } else {
+            return false;
+        }
+    }
+
+    public int hashCode() {
+        int code = super.hashCode();
+        code = code * 17 + (multiple ? 1 : 0);
+        code = code * 17 + requiredType;
+        return code;
+    }
+

MOV31 INS31 MOV83 INS39 INS42 INS44 INS8 UPD39 UPD42 INS8 INS40 INS9 INS43 INS42 INS25 INS60 INS21 MOV21 INS41 UPD42 MOV42 INS27 INS8 INS25 INS39 INS59 INS7 INS7 INS42 INS52 INS42 INS41 INS62 INS8 INS8 INS42 INS48 INS42 INS27 INS42 INS27 INS9 INS42 INS43 INS60 INS41 INS41 INS42 INS27 INS36 INS27 INS42 UPD42 MOV42 INS43 INS59 INS27 INS9 INS42 INS34 INS16 INS42 INS34 UPD42 MOV42 INS42 INS11 INS27 INS27 INS42 INS34 INS34 INS43 INS42 INS48 INS27 INS22 INS40 UPD42 MOV42 INS42 INS42 INS22 INS40 INS52 INS42 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL42 DEL46 DEL42 DEL40 DEL7 DEL21 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL8