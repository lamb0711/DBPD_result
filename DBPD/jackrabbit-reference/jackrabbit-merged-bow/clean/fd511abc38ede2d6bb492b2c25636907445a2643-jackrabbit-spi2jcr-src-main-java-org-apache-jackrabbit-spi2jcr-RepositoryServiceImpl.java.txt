JCR-3054: Deprecate RepositoryService.getPropertyInfo method

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1159182 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.iterator.Iterators;
-    public Iterator<? extends ItemInfo> getItemInfos(SessionInfo sessionInfo, NodeId nodeId)
+    public Iterator<? extends ItemInfo> getItemInfos(SessionInfo sessionInfo, ItemId itemId)
-        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        Node node = getNode(nodeId, sInfo);
-        Name ntName = null;
-        try {
-            ntName = sInfo.getNamePathResolver().getQName(node.getProperty(JcrConstants.JCR_PRIMARYTYPE).getString());
-        } catch (NameException e) {
-            // ignore. should never occur
+
+        if (!itemId.denotesNode()) {
+            PropertyId propertyId = (PropertyId) itemId;
+            PropertyInfo propertyInfo = getPropertyInfo(sessionInfo, propertyId);
+            return Iterators.singleton(propertyInfo);
-        int depth = batchReadConfig.getDepth(ntName);
-        if (depth == BatchReadConfig.DEPTH_DEFAULT) {
-            NodeInfo info;
+        else {
+            NodeId nodeId = (NodeId) itemId;
+            final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+            Node node = getNode(nodeId, sInfo);
+            Name ntName = null;
-                info = new NodeInfoImpl(node, idFactory, sInfo.getNamePathResolver());
+                ntName = sInfo.getNamePathResolver().getQName(node.getProperty(JcrConstants.JCR_PRIMARYTYPE).getString());
-                throw new RepositoryException(e);
+                // ignore. should never occur
-            return Collections.singletonList(info).iterator();
-        } else {
-            final List<ItemInfo> itemInfos = new ArrayList<ItemInfo>();
-            ItemVisitor visitor = new TraversingItemVisitor(false, depth) {
-                @Override
-                protected void entering(Property property, int i) throws RepositoryException {
-                    try {
-                        itemInfos.add(new PropertyInfoImpl(property, idFactory, sInfo.getNamePathResolver(), getQValueFactory()));
-                    } catch (NameException e) {
-                        throw new RepositoryException(e);
+            int depth = batchReadConfig.getDepth(ntName);
+            if (depth == BatchReadConfig.DEPTH_DEFAULT) {
+                NodeInfo info;
+                try {
+                    info = new NodeInfoImpl(node, idFactory, sInfo.getNamePathResolver());
+                } catch (NameException e) {
+                    throw new RepositoryException(e);
+                }
+                return Collections.singletonList(info).iterator();
+            } else {
+                final List<ItemInfo> itemInfos = new ArrayList<ItemInfo>();
+                ItemVisitor visitor = new TraversingItemVisitor(false, depth) {
+                    @Override
+                    protected void entering(Property property, int i) throws RepositoryException {
+                        try {
+                            itemInfos.add(new PropertyInfoImpl(property, idFactory, sInfo.getNamePathResolver(), getQValueFactory()));
+                        } catch (NameException e) {
+                            throw new RepositoryException(e);
+                        }
-                }
-                @Override
-                protected void entering(Node node, int i) throws RepositoryException {
-                    try {
-                        itemInfos.add(new NodeInfoImpl(node, idFactory, sInfo.getNamePathResolver()));
-                    } catch (NameException e) {
-                        throw new RepositoryException(e);
+                    @Override
+                    protected void entering(Node node, int i) throws RepositoryException {
+                        try {
+                            itemInfos.add(new NodeInfoImpl(node, idFactory, sInfo.getNamePathResolver()));
+                        } catch (NameException e) {
+                            throw new RepositoryException(e);
+                        }
-                }
-                @Override
-                protected void leaving(Property property, int i) {
-                    // nothing to do
-                }
-                @Override
-                protected void leaving(Node node, int i) {
-                    // nothing to do
-                }
-            };
-            visitor.visit(node);
-            return itemInfos.iterator();
+                    @Override
+                    protected void leaving(Property property, int i) {
+                        // nothing to do
+                    }
+                    @Override
+                    protected void leaving(Node node, int i) {
+                        // nothing to do
+                    }
+                };
+                visitor.visit(node);
+                return itemInfos.iterator();
+            }

INS26 INS40 INS8 INS43 INS42 INS25 INS42 INS38 INS8 MOV8 INS32 INS60 INS60 INS41 INS60 INS42 INS42 INS43 INS59 INS43 INS59 INS32 MOV43 INS59 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 DEL42