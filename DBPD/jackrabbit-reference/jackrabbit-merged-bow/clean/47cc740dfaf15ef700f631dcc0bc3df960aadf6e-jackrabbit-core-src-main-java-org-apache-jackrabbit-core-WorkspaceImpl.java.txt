JCR-1849: EventJournal

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@713964 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.jsr283.observation.EventJournal;
+import org.apache.jackrabbit.core.observation.EventJournalImpl;
+import org.apache.jackrabbit.core.observation.EventFilter;
+import org.apache.jackrabbit.core.cluster.ClusterNode;
+import org.apache.jackrabbit.core.security.principal.AdminPrincipal;
+import javax.security.auth.Subject;
+     * Returns the event journal for this workspace. The events are filtered
+     * according to the passed criteria.
+     *
+     * @param eventTypes A combination of one or more event type constants encoded as a bitmask.
+     * @param absPath an absolute path.
+     * @param isDeep a <code>boolean</code>.
+     * @param uuid array of UUIDs.
+     * @param nodeTypeName array of node type names.
+     * @return the event journal for this repository.
+     * @throws UnsupportedRepositoryOperationException if this repository does
+     *          not support an event journal (cluster journal disabled).
+     * @throws RepositoryException if another error occurs.
+     */
+    public EventJournal getEventJournal(int eventTypes,
+                                        String absPath,
+                                        boolean isDeep,
+                                        String[] uuid,
+                                        String[] nodeTypeName)
+            throws RepositoryException {
+        Subject subject = ((SessionImpl) getSession()).getSubject();
+        if (subject.getPrincipals(AdminPrincipal.class).isEmpty()) {
+            throw new RepositoryException("Only administrator session may " +
+                    "access EventJournal");
+        }
+        ClusterNode clusterNode = rep.getClusterNode();
+        if (clusterNode == null) {
+            throw new UnsupportedRepositoryOperationException();
+        }
+
+        ObservationManagerImpl obsMgr = (ObservationManagerImpl) session.getWorkspace().getObservationManager();
+        EventFilter filter = obsMgr.createEventFilter(eventTypes, absPath,
+                isDeep, uuid, nodeTypeName, false);
+        return new EventJournalImpl(filter, clusterNode.getJournal(),
+                clusterNode.getId());
+    }
+
+    /**

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS5 INS42 INS5 INS42 INS42 INS60 INS25 INS60 INS25 INS60 INS60 INS41 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS85 INS43 INS85 INS43 INS59 INS32 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS42 INS32 INS32 INS36 INS42 INS42 INS42 INS57 INS14 INS42 INS42 INS14 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS43 INS27 INS43 INS42 INS32 INS42 INS43 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42