JCR-890: concurrent read-only access to a session

Simplify use of SessionOperations. Turn Session.refresh() into a managed operation.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@956901 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.session.SanityCheck;
-        state.perform(SanityCheck.INSTANCE);
+        state.perform(new SessionOperation("sanity check"));
-    public void save()
-            throws AccessDeniedException, ItemExistsException,
-            ConstraintViolationException, InvalidItemStateException,
-            VersionException, LockException, NoSuchNodeTypeException,
-            RepositoryException {
-        state.perform(new SessionOperation() {
+    public void save() throws RepositoryException {
+        state.perform(new SessionOperation("save") {
+            @Override
-    public void refresh(boolean keepChanges) throws RepositoryException {
-        // check sanity of this session
-        sanityCheck();
+    public void refresh(final boolean keepChanges) throws RepositoryException {
+        state.perform(new SessionOperation("refresh") {
+            @Override
+            public void perform() throws RepositoryException {
+                // JCR-1753: Ensure that we are up to date with cluster changes
+                ClusterNode cluster = repositoryContext.getClusterNode();
+                if (cluster != null && clusterSyncOnRefresh()) {
+                    try {
+                        cluster.sync();
+                    } catch (ClusterException e) {
+                        throw new RepositoryException(
+                                "Unable to synchronize with the cluster", e);
+                    }
+                }
-        // JCR-1753: Ensure that we are up to date with cluster changes
-        ClusterNode cluster = repositoryContext.getClusterNode();
-        if (cluster != null && clusterSyncOnRefresh()) {
-            try {
-                cluster.sync();
-            } catch (ClusterException e) {
-                throw new RepositoryException(
-                        "Unable to synchronize with the cluster", e);
+                if (!keepChanges) {
+                    itemStateMgr.disposeAllTransientItemStates();
+                } else {
+                    // FIXME should reset Item#status field to STATUS_NORMAL
+                    // of all non-transient instances; maybe also
+                    // have to reset stale ItemState instances
+                }
-        }
-
-        if (!keepChanges) {
-            itemStateMgr.disposeAllTransientItemStates();
-        } else {
-            /** todo FIXME should reset Item#status field to STATUS_NORMAL
-             * of all non-transient instances; maybe also
-             * have to reset stale ItemState instances */
-        }
+        });

INS31 MOV29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS42 INS21 INS32 INS14 INS42 INS42 INS14 INS43 INS45 INS45 INS43 INS45 INS1 INS42 INS42 MOV31 INS78 INS78 UPD42 INS42 INS42 DEL40 DEL26 DEL40 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL44 DEL42 DEL32 DEL21