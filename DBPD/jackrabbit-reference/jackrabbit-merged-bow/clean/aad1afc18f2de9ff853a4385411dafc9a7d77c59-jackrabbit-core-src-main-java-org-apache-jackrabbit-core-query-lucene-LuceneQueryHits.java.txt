JCR-1855: Update to Lucene 2.4.1

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@756444 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.search.Hits;
-import org.apache.lucene.index.IndexReader;
-import org.apache.jackrabbit.core.NodeId;
-
-/**
- * Wraps the lucene <code>Hits</code> object and adds a close method that allows
- * to release resources after a query has been executed and the results have
- * been read completely.
- */
-public class LuceneQueryHits extends AbstractQueryHits {
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Scorer;
+import org.apache.lucene.index.IndexReader;
+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.uuid.UUID;
-    /**
-     * The lucene hits we wrap.
-     */
-    private final Hits hits;
+/**
+ * Wraps a lucene query result and adds a close method that allows to release
+ * resources after a query has been executed and the results have been read
+ * completely.
+ */
+public class LuceneQueryHits implements QueryHits {
-     * The index of the current hit. Initially invalid.
+     * The scorer for the query.
-    private int hitIndex = -1;
+    private final Scorer scorer;
-    /**
-     * Creates a new <code>QueryHits</code> instance wrapping <code>hits</code>.
-     * @param hits the lucene hits.
-     * @param reader the IndexReader in use by <code>hits</code>.
-     */
-    public LuceneQueryHits(Hits hits, IndexReader reader) {
-        this.hits = hits;
+    public LuceneQueryHits(IndexReader reader,
+                           IndexSearcher searcher,
+                           Query query)
+            throws IOException {
+        this.scorer = query.weight(searcher).scorer(reader);
-    public final int getSize() {
-      return hits.length();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public final ScoreNode nextScoreNode() throws IOException {
-        if (++hitIndex >= hits.length()) {
+    public ScoreNode nextScoreNode() throws IOException {
+        if (!scorer.next()) {
-        String uuid = reader.document(id(hitIndex), FieldSelectors.UUID).get(FieldNames.UUID);
-        return new ScoreNode(NodeId.valueOf(uuid), hits.score(hitIndex));
+        String uuid = reader.document(scorer.doc()).get(FieldNames.UUID);
+        NodeId id = new NodeId(UUID.fromString(uuid));
+        return new ScoreNode(id, scorer.score());
-     * Skips <code>n</code> hits.
-     *
-     * @param n the number of hits to skip.
-     * @throws IOException if an error occurs while skipping.
+     * {@inheritDoc}
+     */
+    public void close() throws IOException {
+        // make sure scorer frees resources
+        scorer.skipTo(Integer.MAX_VALUE);
+    }
+
+    /**
+     * @return always -1.
+     */
+    public int getSize() {
+        return -1;
+    }
+
+    /**
+     * {@inheritDoc}
-        hitIndex += n;
-    }
-
-    //-------------------------------< internal >-------------------------------
-
-    /**
-     * Returns the document number for the <code>n</code><sup>th</sup> document
-     * in this QueryHits.
-     *
-     * @param n index.
-     * @return the document number for the <code>n</code><sup>th</sup>
-     *         document.
-     * @throws IOException if an error occurs.
-     */
-    private final int id(int n) throws IOException {
-        return hits.id(n);
+        while (n-- > 0) {
+            if (nextScoreNode() == null) {
+                return;
+            }
+        }

MOV26 INS26 INS26 INS26 MOV23 UPD40 INS40 INS40 INS40 UPD43 MOV44 INS31 INS31 UPD42 UPD43 INS44 MOV43 MOV21 MOV29 UPD42 INS43 MOV29 UPD83 MOV83 MOV39 UPD42 MOV42 INS8 INS29 INS83 INS39 INS42 MOV44 MOV43 INS8 UPD66 UPD66 UPD66 UPD42 UPD42 UPD43 UPD42 INS43 INS42 INS60 INS41 INS42 INS41 INS65 INS61 UPD66 UPD42 INS42 INS38 INS43 INS59 INS14 INS32 UPD66 MOV38 INS65 INS27 INS8 INS32 INS32 INS42 INS42 INS14 MOV43 INS42 MOV32 INS42 INS42 INS40 INS37 INS34 INS25 UPD42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS32 UPD42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS32 INS33 INS41 UPD42 UPD42 UPD42 MOV42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL38 DEL32 DEL27 DEL40 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL7 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL66 DEL65 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31