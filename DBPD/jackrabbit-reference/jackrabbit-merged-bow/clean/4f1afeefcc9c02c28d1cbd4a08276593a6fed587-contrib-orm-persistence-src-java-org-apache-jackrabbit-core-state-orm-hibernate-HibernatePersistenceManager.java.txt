committing as-is Patch for ORM-Persistence posted by serge

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160306 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.PersistenceManager;
+import org.apache.ojb.broker.PersistenceBroker;
+import org.apache.jackrabbit.core.state.ChangeLog;
+import org.apache.ojb.broker.PersistenceBrokerFactory;
+import org.apache.ojb.broker.PersistenceBrokerException;
-public class HibernatePersistenceManager extends AbstractPersistenceManager {
+public class HibernatePersistenceManager implements PersistenceManager {
-                            BLOBFileValue blobValue = new BLOBFileValue(in);
-                            internalValueList.add(blobValue);
+                            internalValueList.add(InternalValue.create(in));
-    public void store(NodeState state) throws ItemStateException {
+    public void store(NodeState state, Session session) throws ItemStateException, HibernateException {
-        Session session = null;
-        Transaction tx = null;
-        try {
-            session = sessionFactory.openSession();
-            tx = session.beginTransaction();
-            tx.commit();
-        } catch (HibernateException he) {
-            try {
-                if (tx != null)
-                    tx.rollback();
-            } catch (HibernateException he2) {
-                log.error("Error while rolling back transaction", he2);
-            }
-            throw new ItemStateException("Error saving " + state.getId(), he);
-        } finally {
-            if (session != null) {
-                try {
-                    session.close();
-                } catch (HibernateException he) {
-                    throw new ItemStateException(
-                        "Error while closing hibernate session", he);
-                }
-            }
-        }
-    public void store(PropertyState state) throws ItemStateException {
+    public void store(PropertyState state, Session session) throws ItemStateException, HibernateException {
-        Session session = null;
-        Transaction tx = null;
-        try {
-            session = sessionFactory.openSession();
-            tx = session.beginTransaction();
-                                tx.rollback();
-                                session.close();
-            tx.commit();
-        } catch (HibernateException he) {
-            try {
-                if (tx != null)
-                    tx.rollback();
-            } catch (HibernateException he2) {
-                log.error("Error while rolling back transaction", he2);
-            }
-            throw new ItemStateException("Error saving " + state.getId(), he);
-        } finally {
-            if (session != null) {
-                try {
-                    session.close();
-                } catch (HibernateException he) {
-                    throw new ItemStateException(
-                        "Error while closing hibernate session", he);
-                }
-            }
-        }
-    public void store(NodeReferences refs) throws ItemStateException {
+    public void store(NodeReferences refs, Session session) throws ItemStateException, HibernateException {
-        Session session = null;
-        Transaction tx = null;
-        try {
-            session = sessionFactory.openSession();
-            tx = session.beginTransaction();
+        // destroy all the references before saving
+        destroy(refs, session);
+
-            tx.commit();
-        } catch (HibernateException he) {
-            try {
-                if (tx != null)
-                    tx.rollback();
-            } catch (HibernateException he2) {
-                log.error("Error while rolling back transaction", he2);
-            }
-            throw new ItemStateException(
-                "Error storing node references for targetId=" +
-                refs.getTargetId(), he);
-        } finally {
-            if (session != null) {
-                try {
-                    session.close();
-                } catch (HibernateException he) {
-                    throw new ItemStateException(
-                        "Error while closing hibernate session", he);
-                }
-            }
-        }
-    public void destroy(NodeState state) throws ItemStateException {
+    public void destroy(NodeState state, Session session) throws ItemStateException, HibernateException {
-        Session session = null;
-        Transaction tx = null;
-        try {
-            session = sessionFactory.openSession();
-            tx = session.beginTransaction();
-            tx.commit();
-        } catch (HibernateException he) {
-            try {
-                if (tx != null)
-                    tx.rollback();
-            } catch (HibernateException he2) {
-                log.error("Error while rolling back transaction", he2);
-            }
-            throw new ItemStateException("Error deleting " + state.getId(), he);
-        } finally {
-            if (session != null) {
-                try {
-                    session.close();
-                } catch (HibernateException he) {
-                    throw new ItemStateException(
-                        "Error while closing hibernate session", he);
-                }
-            }
-        }
-    public void destroy(PropertyState state) throws ItemStateException {
+    public void destroy(PropertyState state, Session session) throws ItemStateException, HibernateException {
-        Session session = null;
-        Transaction tx = null;
-        try {
-            session = sessionFactory.openSession();
-            tx = session.beginTransaction();
-            tx.commit();
-        } catch (HibernateException he) {
-            try {
-                if (tx != null)
-                    tx.rollback();
-            } catch (HibernateException he2) {
-                log.error("Error while rolling back transaction", he2);
-            }
-            throw new ItemStateException("Error deleting " + state.getId(), he);
-        } finally {
-            if (session != null) {
-                try {
-                    session.close();
-                } catch (HibernateException he) {
-                    throw new ItemStateException(
-                        "Error while closing hibernate session", he);
-                }
-            }
-        }
-    public void destroy(NodeReferences refs) throws ItemStateException {
+    public void destroy(NodeReferences refs, Session session) throws ItemStateException, HibernateException {
-        Session session = null;
-        Transaction tx = null;
-        try {
-            session = sessionFactory.openSession();
-            tx = session.beginTransaction();
-            tx.commit();
-        } catch (HibernateException he) {
-            try {
-                if (tx != null)
-                    tx.rollback();
-            } catch (HibernateException he2) {
-                log.error("Error while rolling back transaction", he2);
+    }
+
+    /**
+     * @see PersistenceManager#createNew
+     */
+    public NodeState createNew(NodeId id)
+    {
+        return new NodeState(id.getUUID(), null, null, NodeState.STATUS_NEW,
+                false);
+    }
+
+    /**
+     * @see PersistenceManager#createNew
+     */
+    public PropertyState createNew(PropertyId id)
+    {
+        return new PropertyState(id.getName(), id.getParentUUID(),
+                PropertyState.STATUS_NEW, false);
+    }
+
+    /**
+     * @see PersistenceManager#store(ChangeLog)
+     *
+     * This method ensures that changes are either written completely to the
+     * underlying persistence layer, or not at all.
+     */
+    public void store(ChangeLog changeLog) throws ItemStateException
+    {
+        Session session = null;
+        Transaction tx = null;
+        try
+        {
+            session = sessionFactory.openSession();
+            tx = session.beginTransaction();
+            Iterator iter = changeLog.deletedStates();
+            while (iter.hasNext())
+            {
+                ItemState state = (ItemState) iter.next();
+                if (state.isNode())
+                {
+                    destroy((NodeState) state, session);
+                } else
+                {
+                    destroy((PropertyState) state, session);
+                }
-            throw new ItemStateException(
-                "Error deleting node references for targetId=" +
-                refs.getTargetId().toString(), he);
-        } finally {
+            iter = changeLog.addedStates();
+            while (iter.hasNext())
+            {
+                ItemState state = (ItemState) iter.next();
+                if (state.isNode())
+                {
+                    store((NodeState) state, session);
+                } else
+                {
+                    store((PropertyState) state, session);
+                }
+            }
+            iter = changeLog.modifiedStates();
+            while (iter.hasNext())
+            {
+                ItemState state = (ItemState) iter.next();
+                if (state.isNode())
+                {
+                    store((NodeState) state, session);
+                } else
+                {
+                    store((PropertyState) state, session);
+                }
+            }
+            iter = changeLog.modifiedRefs();
+            while (iter.hasNext())
+            {
+                NodeReferences refs = (NodeReferences) iter.next();
+                if (refs.hasReferences())
+                {
+                    store(refs, session);
+                } else
+                {
+                    destroy(refs, session);
+                }
+            }
+            tx.commit() ;
+        } catch (ItemStateException e)
+        {
+            if (tx != null) {
+                try {
+                    tx.rollback();
+                } catch (HibernateException ex) {
+                    throw new ItemStateException("Error while rolling back", ex);
+                }
+            }
+            throw e;
+        } catch (HibernateException e)
+        {
+            if (tx != null) {
+                try {
+                    tx.rollback();
+                } catch (HibernateException ex) {
+                    throw new ItemStateException("Error while rolling back", ex);
+                }
+            }
+            throw new ItemStateException("Unable to store", e);
+        } finally
+        {
-                } catch (HibernateException he) {
-                    throw new ItemStateException(
-                        "Error while closing hibernate session", he);
+                } catch (HibernateException ex) {
+                    throw new ItemStateException("Error while closing session", ex);
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD43 INS31 INS31 INS31 INS31 UPD42 INS44 MOV43 MOV8 INS44 MOV43 MOV8 INS44 MOV43 MOV8 INS44 MOV43 MOV8 INS44 MOV43 MOV8 MOV29 MOV83 MOV39 MOV42 MOV44 INS44 MOV43 MOV43 MOV8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 MOV43 INS8 INS43 INS42 MOV21 MOV60 INS43 INS42 MOV21 MOV60 INS43 INS42 MOV60 MOV21 UPD43 MOV43 UPD42 MOV42 MOV21 INS43 INS42 MOV21 INS43 INS42 MOV21 INS65 INS42 INS43 INS42 INS41 INS65 INS42 INS43 INS42 INS41 INS65 INS43 INS42 MOV60 MOV60 INS54 MOV42 MOV42 MOV42 INS32 UPD42 MOV42 MOV42 INS67 INS42 INS14 INS67 INS42 INS14 INS68 INS66 INS66 INS42 INS8 INS12 MOV12 MOV8 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS43 INS32 INS33 INS33 INS40 INS9 INS42 INS42 INS43 INS32 INS32 INS40 INS9 INS42 INS42 INS69 MOV21 MOV21 MOV60 INS61 INS21 INS61 INS21 INS61 INS21 INS61 MOV21 INS44 INS8 MOV44 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 UPD43 INS32 INS8 INS7 INS32 INS8 INS7 INS32 INS8 INS7 INS32 INS8 MOV43 INS42 INS25 INS53 UPD42 MOV25 INS42 UPD42 UPD42 INS32 INS42 INS42 INS60 MOV25 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS32 INS42 INS42 INS60 INS25 MOV27 INS8 INS42 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS54 INS54 INS45 UPD42 INS42 INS42 INS11 INS42 INS42 INS21 INS21 INS42 INS42 INS11 INS42 INS42 MOV21 INS21 INS42 INS42 INS11 INS42 INS42 INS21 INS21 INS42 INS42 INS11 MOV42 UPD42 MOV42 INS21 INS21 INS8 INS12 INS8 INS12 MOV21 MOV44 INS43 INS32 MOV32 INS32 INS43 INS32 INS32 INS43 INS32 INS32 INS32 INS43 INS32 INS32 INS32 MOV21 MOV44 INS8 MOV21 MOV44 INS8 UPD42 INS42 INS42 INS42 UPD42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 UPD42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 INS53 UPD42 INS53 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS14 INS14 MOV43 UPD45 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS45 INS42 MOV43 INS45 INS42 INS32 UPD42 MOV42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL42 DEL32 DEL21 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL33 DEL42 DEL21 DEL42 DEL45 DEL42 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL43 DEL42 DEL33 DEL59 DEL60 DEL8 DEL8 DEL12 DEL54 DEL45 DEL32 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31