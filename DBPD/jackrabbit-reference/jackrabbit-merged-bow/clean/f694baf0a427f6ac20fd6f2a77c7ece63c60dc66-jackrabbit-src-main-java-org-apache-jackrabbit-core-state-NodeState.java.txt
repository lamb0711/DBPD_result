- use copy-on-write in NodeState for: child node entries, mixin type names and property names.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378574 13f79535-47bb-0310-9956-ffa450edef68

-    private HashSet mixinTypeNames = new HashSet();
+    private Set mixinTypeNames = Collections.EMPTY_SET;
+     * Set to <code>true</code> if {@link #childNodeEntries} are shared between
+     * different <code>NodeState</code> instance.
+     */
+    private boolean sharedChildNodeEntries = false;
+
+    /**
+     * Set to <code>true</code> if {@link #propertyNames} is shared between
+     * different <code>NodeState</code> instances.
+     */
+    private boolean sharedPropertyNames = false;
+
+    /**
-            mixinTypeNames = (HashSet) nodeState.mixinTypeNames.clone();
+            mixinTypeNames = nodeState.mixinTypeNames;
-            propertyNames = (HashSet) nodeState.propertyNames.clone();
-            childNodeEntries = (ChildNodeEntries) nodeState.childNodeEntries.clone();
+            propertyNames = nodeState.propertyNames;
+            sharedPropertyNames = nodeState.sharedPropertyNames = true;
+            childNodeEntries = nodeState.childNodeEntries;
+            sharedChildNodeEntries = nodeState.sharedChildNodeEntries = true;
-        mixinTypeNames.clear();
-        mixinTypeNames.addAll(names);
+        if (names instanceof HashSet) {
+            mixinTypeNames = (Set) ((HashSet) names).clone();
+        } else {
+            mixinTypeNames = new HashSet(names);
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+            sharedChildNodeEntries = false;
-            childNodeEntries.removeAll();
+            if (sharedChildNodeEntries) {
+                childNodeEntries = new ChildNodeEntries();
+                sharedChildNodeEntries = false;
+            } else {
+                childNodeEntries.removeAll();
+            }
+
+        if (sharedPropertyNames) {
+            propertyNames = (HashSet) propertyNames.clone();
+            sharedPropertyNames = false;
+        }
+        if (sharedPropertyNames) {
+            propertyNames = (HashSet) propertyNames.clone();
+            sharedPropertyNames = false;
+        }
-        propertyNames.clear();
+        if (sharedPropertyNames) {
+            propertyNames = new HashSet();
+            sharedPropertyNames = false;
+        } else {
+            propertyNames.clear();
+        }
-            propNames = (HashSet) names.clone();
+            propertyNames = (HashSet) names.clone();
+            sharedPropertyNames = false;
+        } else {
+            if (sharedPropertyNames) {
+                propertyNames = new HashSet();
+                sharedPropertyNames = false;
+            } else {
+                propertyNames.clear();
+            }
+            propertyNames.addAll(propNames);
-        propertyNames.clear();
-        propertyNames.addAll(propNames);

INS23 INS23 INS43 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS8 INS8 INS8 INS8 INS42 INS40 INS65 INS42 INS9 INS65 INS42 INS9 INS25 INS25 INS25 INS25 INS25 INS25 MOV21 INS25 MOV21 INS25 MOV41 INS25 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS62 INS8 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS8 INS42 INS8 INS42 INS8 INS42 INS8 MOV8 INS8 INS67 INS67 INS21 INS21 INS42 MOV43 MOV21 MOV21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS25 MOV21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS25 MOV21 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS42 MOV8 MOV8 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS8 INS8 INS40 INS40 INS42 INS7 INS40 INS42 INS7 INS42 INS11 INS42 INS14 INS42 INS11 INS42 INS9 INS42 INS11 INS42 INS9 INS42 INS11 INS42 INS9 INS42 INS11 INS42 INS9 INS42 INS11 INS42 INS9 INS42 INS9 INS21 INS21 INS42 INS11 INS42 INS9 INS42 INS11 INS42 INS9 INS42 MOV14 INS42 INS9 UPD42 INS42 INS9 INS21 INS21 INS21 INS40 INS9 INS40 INS9 INS43 INS32 MOV43 INS42 MOV43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS7 INS7 INS43 INS32 INS43 INS32 INS7 INS7 INS32 INS42 INS36 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS9 INS42 INS42 MOV11 INS43 INS43 INS42 INS42 INS42 DEL40 DEL42 DEL32 DEL11 DEL40 DEL42 DEL32 DEL11 DEL40 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL8 DEL8 DEL42 DEL42 DEL32 DEL21