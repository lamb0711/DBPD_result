JCR-2028: JSR 283 JCR Path

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772659 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.QValueFactory;
+import org.apache.jackrabbit.util.ISO8601;
+import org.apache.jackrabbit.util.TransientFileFactory;
+
+import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
+import javax.jcr.ValueFormatException;
-import java.util.TimeZone;
-
-import javax.jcr.PropertyType;
-import javax.jcr.RepositoryException;
-import javax.jcr.ValueFormatException;
-
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.NameFactory;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.PathFactory;
-import org.apache.jackrabbit.spi.QPropertyDefinition;
-import org.apache.jackrabbit.spi.QValue;
-import org.apache.jackrabbit.spi.QValueFactory;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
-import org.apache.jackrabbit.util.ISO8601;
-import org.apache.jackrabbit.util.TransientFileFactory;
-import org.apache.jackrabbit.uuid.UUID;
-public final class QValueFactoryImpl implements QValueFactory {
+public final class QValueFactoryImpl extends AbstractQValueFactory {
-    private static final PathFactory PATH_FACTORY = PathFactoryImpl.getInstance();
-    private static final NameFactory NAME_FACTORY = NameFactoryImpl.getInstance();
-
-    /**
-     * the default encoding
-     */
-    private static final String DEFAULT_ENCODING = "UTF-8";
-
-        return new QValueImpl(new Double(value));
+        return new QValueImpl(Double.valueOf(value));
-        return new QValueImpl(new Long(value));
+        return new QValueImpl(Long.valueOf(value));
-    /**
-     * @see QValueFactory#computeAutoValues(QPropertyDefinition)
-     */
-    public QValue[] computeAutoValues(QPropertyDefinition propertyDefinition) throws RepositoryException {
-        Name nodeType = propertyDefinition.getDeclaringNodeType();
-        Name name = propertyDefinition.getName();
-
-        if (NameConstants.NT_HIERARCHYNODE.equals(nodeType) && NameConstants.JCR_CREATED.equals(name)) {
-            return new QValue[] { create(Calendar.getInstance()) };
-        } else if (NameConstants.NT_RESOURCE.equals(nodeType) && NameConstants.JCR_LASTMODIFIED.equals(name)) {
-            return new QValue[] { create(Calendar.getInstance()) };
-        } else if (NameConstants.MIX_REFERENCEABLE.equals(nodeType) && NameConstants.JCR_UUID.equals(name)) {
-            return new QValue[] { create(UUID.randomUUID().toString(), PropertyType.STRING) };
-        } else {
-            throw new RepositoryException("createFromDefinition not implemented for: " + name);
-        }
-    }
-     * except for BINARY.
+     * except for BINARY and DATE.
-    private static class QValueImpl implements QValue, Serializable {
+    private static class QValueImpl extends AbstractQValue implements Serializable {
-
-        private final Object val;
-        private final int type;
-            val = value;
-            this.type = type;
+            super(value, type);
-            if (!(type == PropertyType.STRING || type == PropertyType.REFERENCE)) {
-                throw new IllegalArgumentException();
-            }
-            val = value;
-            this.type = type;
+            super(value, type);
-            val = value;
-            type = PropertyType.LONG;
+            super(value);
-            val = value;
-            type = PropertyType.DOUBLE;
+            super(value);
-            val = value;
-            type = PropertyType.BOOLEAN;
+            super(value);
-            val = value;
-            type = PropertyType.NAME;
+            super(value);
-            val = value;
-            type = PropertyType.PATH;
+            super(value);
-         * @see QValue#getType()
-         */
-        public int getType() {
-            return type;
-        }
-
-        /**
-         * @see QValue#getLength()
-         */
-        public long getLength() throws RepositoryException {
-            return getString().length();
-        }
-
-        /**
-        public String getString() throws RepositoryException {
+        public String getString() {
-                return new ByteArrayInputStream(getString().getBytes(QValueFactoryImpl.DEFAULT_ENCODING));
+                return new ByteArrayInputStream(getString().getBytes(DEFAULT_ENCODING));
-        }
-
-        /**
-         * @see QValue#getName()
-         */
-        public Name getName() throws RepositoryException {
-            if (type == PropertyType.NAME) {
-                return (Name) val;
-            } else {
-                try {
-                    return NAME_FACTORY.create(getString());
-                } catch (IllegalArgumentException e) {
-                    throw new ValueFormatException("not a valid Name value: " + getString(), e);
-                }
-            }
-        }
-
-        /**
-         * @see QValue#getCalendar()
-         */
-        public Calendar getCalendar() throws RepositoryException {
-            if (type == PropertyType.DATE) {
-                return (Calendar) ((Calendar) val).clone();
-            } else if (type == PropertyType.DOUBLE) {
-                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
-                cal.setTimeInMillis(((Double) val).longValue());
-                return cal;
-            } else if (type == PropertyType.LONG) {
-                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
-                cal.setTimeInMillis(((Long) val).longValue());
-                return cal;
-            } else {
-                Calendar cal = ISO8601.parse(getString());
-                if (cal == null) {
-                    throw new ValueFormatException("not a date string: " + getString());
-                }
-                else {
-                    return cal;
-                }
-            }
-        }
-
-        /**
-         * @see QValue#getDouble()
-         */
-        public double getDouble() throws RepositoryException {
-            if (type == PropertyType.DOUBLE) {
-                return ((Double) val).doubleValue();
-            } else if (type == PropertyType.DATE) {
-                return ((Calendar) val).getTimeInMillis();
-            } else {
-                try {
-                    return Double.parseDouble(getString());
-                } catch (NumberFormatException ex) {
-                    throw new ValueFormatException("not a double: " + getString(), ex);
-                }
-            }
-        }
-
-        /**
-         * @see QValue#getLong()
-         */
-        public long getLong() throws RepositoryException {
-            if (type == PropertyType.LONG) {
-                return ((Long) val).longValue();
-            } else if (type == PropertyType.DOUBLE) {
-                return ((Double) val).longValue();
-            } else if (type == PropertyType.DATE) {
-                return ((Calendar) val).getTimeInMillis();
-            } else {
-                try {
-                    return Long.parseLong(getString());
-                } catch (NumberFormatException ex) {
-                    throw new ValueFormatException("not a long: " + getString(), ex);
-                }
-            }
-        }
-
-        /**
-         * @throws RepositoryException
-         * @see QValue#getBoolean()
-         */
-        public boolean getBoolean() throws RepositoryException {
-            if (type == PropertyType.BOOLEAN) {
-                return ((Boolean) val).booleanValue();
-            } else {
-                return Boolean.valueOf(getString()).booleanValue();
-            }
-        }
-
-        /**
-         * @see QValue#getPath()
-         */
-        public Path getPath() throws RepositoryException {
-            if (type == PropertyType.PATH) {
-                return (Path) val;
-            } else {
-                try {
-                    return PATH_FACTORY.create(getString());
-                } catch (IllegalArgumentException e) {
-                    throw new ValueFormatException("not a valid Path: " + getString(), e);
-                }
-            }
-        }
-
-        /**
-         * @see QValue#discard()
-         */
-        public void discard() {
-            // nothing to do
-        }
-
-        //---------------------------------------------------------< Object >---
-        /**
-         * Returns the string representation of this internal value.
-         *
-         * @return string representation of this internal value
-         */
-        public String toString() {
-            return val.toString();
-        }
-
-        /**
-         *
-         * @param obj
-         * @see Object#equals(Object)
-         */
-        public boolean equals(Object obj) {
-            if (this == obj) {
-                return true;
-            }
-            if (obj instanceof QValueImpl) {
-                QValueImpl other = (QValueImpl) obj;
-                return type == other.type && val.equals(other.val);
-            }
-            return false;
-        }
-
-        /**
-         * @return the hashCode of the internal value object.
-         * @see Object#hashCode()
-         */
-        public int hashCode() {
-            return val.hashCode();
-        }
-
+    }
-         * @throws RepositoryException
-        public String getString() throws RepositoryException {
+        public String getString() {

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD43 UPD42 UPD43 UPD42 INS14 INS14 UPD66 INS46 INS46 INS46 INS46 INS46 INS46 INS46 MOV43 INS32 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS14 MOV43 MOV32 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL43 DEL42 DEL14 DEL14 DEL42 DEL43 DEL42 DEL14 DEL14 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL41 DEL8 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL41 DEL8 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL4 DEL3 DEL41 DEL8 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL25 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL36 DEL38 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL31 DEL42 DEL43 DEL42 DEL32 DEL42 DEL40 DEL32 DEL14 DEL41 DEL8 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL11 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL25 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL25 DEL8 DEL31 DEL42 DEL65 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL40 DEL32 DEL27 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL65 DEL42 DEL43