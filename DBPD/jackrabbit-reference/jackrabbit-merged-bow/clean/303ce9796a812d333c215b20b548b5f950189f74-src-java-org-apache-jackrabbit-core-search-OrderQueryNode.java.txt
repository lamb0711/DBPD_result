Implement 'order by' syntax for XPath and SQL. Actual ordering on the query result is not yet done.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126598 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import java.util.ArrayList;
+
-     * The name of the properties to order
+     * The order spects
-    private QName[] properties;
-
-    /**
-     * Array of flag indicating whether a node is ordered ascending or descending
-     */
-    private boolean[] orderSpecs;
+    private List specs = new ArrayList();
-     * @param properties the names of the properties to sort the result nodes.
-     * @param orderSpecs if <code>true</code> a result node is orderd ascending;
-     *                   otherwise descending.
-    public OrderQueryNode(QueryNode parent, QName[] properties, boolean[] orderSpecs) {
+    public OrderQueryNode(QueryNode parent) {
-        if (properties.length != orderSpecs.length) {
-            throw new IllegalArgumentException("Number of propertes and orderSpecs must be the same");
-        }
-        this.properties = properties;
-        this.orderSpecs = orderSpecs;
+    /**
+     * Adds an order specification to this query node.
+     * @param property the name of the property.
+     * @param ascending if <code>true</code> values of this properties are
+     *   ordered ascending; descending if <code>false</code>.
+     */
+    public void addOrderSpec(QName property, boolean ascending) {
+        specs.add(new OrderSpec(property, ascending));
+    }
+
+    /**
+     * Adds an order specification to this query node.
+     * @param spec the order spec.
+     */
+    public void addOrderSpec(OrderSpec spec) {
+        specs.add(spec);
+    }
-     * @exception ArrayIndexOutOfBoundsException if there is no property with
+     * @exception IndexOutOfBoundsException if there is no property with
-        return orderSpecs[i];
+        return ((OrderSpec) specs.get(i)).ascending;
-     * Returns a <code>QName</code> array that contains the name of the properties
-     * to sort the result nodes.
+     * Returns a <code>OrderSpec</code> array that contains order by
+     * specifications.
-     * @return names of order properties.
+     * @return order by specs.
-    public QName[] getOrderByProperties() {
-        return properties;
+    public OrderSpec[] getOrderSpecs() {
+        return (OrderSpec[]) specs.toArray(new OrderSpec[specs.size()]);
+    //------------------< OrderSpec class >-------------------------------------
+
-     * Returns a boolean array that contains the sort order specification
-     * for each property returned by {@link #getOrderByProperties()}.
-     * @return the sort specification.
+     * Implements a single order specification. Contains a property name
+     * and whether it is ordered ascending or descending.
-    public boolean[] getOrderBySpecs() {
-        return orderSpecs;
-    }
+    public static final class OrderSpec {
+        /** The name of the property */
+        private QName property;
+
+        /** If <code>true</code> this property is orderd ascending */
+        private boolean ascending;
+
+        /**
+         * Creates a new <code>OrderSpec</code> for <code>property</code>.
+         * @param property the name of the property.
+         * @param ascending if <code>true</code> the property is ordered
+         * ascending, otherwise descending.
+         */
+        public OrderSpec(QName property, boolean ascending) {
+            this.property = property;
+            this.ascending = ascending;
+        }
+
+        /**
+         * Returns the name of the property.
+         * @return the name of the property.
+         */
+        public QName getProperty() {
+            return property;
+        }
+
+        /**
+         * If <code>true</code> the property is ordered ascending, otherwise
+         * descending.
+         * @return <code>true</code> for ascending; <code>false</code> for
+         * descending.
+         */
+        public boolean isAscending() {
+            return ascending;
+        }
+
+        /**
+         * Sets the new value for the ascending property.
+         * @param ascending <code>true</code> for ascending; <code>false</code>
+         * for descending.
+         */
+        public void setAscending(boolean ascending) {
+            this.ascending = ascending;
+        }
+    }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS55 MOV29 MOV83 INS43 INS59 MOV29 INS83 INS42 MOV44 INS8 INS29 INS83 INS39 INS42 MOV44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS5 INS42 INS8 INS29 INS83 INS83 INS83 INS42 INS23 MOV23 MOV31 MOV31 MOV31 INS31 INS42 INS42 INS14 MOV46 INS65 INS65 INS65 MOV43 UPD42 INS39 INS42 INS21 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS43 MOV85 INS41 INS65 INS29 INS83 INS43 MOV59 INS39 INS29 UPD42 INS44 MOV43 UPD42 INS39 UPD42 INS29 INS83 INS39 INS42 INS44 INS8 UPD66 INS43 INS66 INS42 INS66 INS42 INS66 INS66 INS32 INS66 INS42 INS66 INS42 INS32 UPD42 INS22 INS66 INS66 INS66 INS42 INS11 INS66 INS66 INS65 INS42 UPD42 UPD42 INS65 INS65 INS65 MOV43 INS42 INS39 UPD42 INS65 INS65 INS39 INS42 INS21 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS36 INS42 INS5 INS32 INS66 UPD66 INS66 INS42 INS66 INS42 INS66 INS66 UPD66 UPD66 UPD42 UPD66 UPD66 INS66 UPD66 UPD42 INS66 INS42 INS66 INS66 INS7 INS43 INS42 INS42 INS11 INS43 INS85 INS42 INS42 INS3 UPD42 UPD42 INS22 INS42 INS42 INS43 INS32 INS42 INS5 INS32 UPD42 UPD42 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL85 DEL5 DEL5 DEL23 DEL42 DEL42 DEL2 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL40 DEL40 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL66 DEL85 DEL5 DEL66 DEL42 DEL68 DEL65 DEL39 DEL85 DEL5