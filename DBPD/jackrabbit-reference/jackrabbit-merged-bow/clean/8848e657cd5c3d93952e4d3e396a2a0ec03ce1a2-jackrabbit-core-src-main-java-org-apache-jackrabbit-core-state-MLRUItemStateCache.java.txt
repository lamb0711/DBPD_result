JCR-2699: Improve read/write concurrency

Use a LinkedHashMap instead of LinkedMap from Commons Collections to optimize the LRU data structure.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1002066 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
-    private long totalMem;
+    private volatile long totalMem;
-    private long maxMem;
+    private volatile long maxMem;
-    private long numWrites;
+    private volatile long numWrites;
-    private long accessCount;
+    private volatile long accessCount;
-    private final LinkedMap cache = new LinkedMap();
+    private final Map<ItemId, Entry> cache;
+    @SuppressWarnings("serial")
+        this.cache = new LinkedHashMap<ItemId, MLRUItemStateCache.Entry>(
+                maxMem / 1024, 0.75f, true /* access-ordered */) {
+            @Override
+            protected boolean removeEldestEntry(Map.Entry<ItemId, Entry> e) {
+                if (totalMem > MLRUItemStateCache.this.maxMem) {
+                    totalMem -= e.getValue().size;
+                    return true;
+                } else {
+                    return false;
+                }
+            }
+        };
-            Entry entry = (Entry) cache.remove(id);
+            Entry entry = cache.get(id);
-                // 'touch' item, by adding at end of list
-                cache.put(id, entry);
-            return (ItemState[]) cache.values().toArray(new ItemState[cache.size()]);
+            ItemState[] states = new ItemState[cache.size()];
+            int i = 0;
+            for (Entry entry : cache.values()) {
+                states[i++] = entry.state;
+            }
+            return states;
-            Entry entry = (Entry) cache.get(id);
+            Entry entry = cache.get(id);
-            cache.put(id, entry);
-            shrinkIfRequired();
+            cache.put(id, entry);
-    private void shrinkIfRequired() {
-        // remove items, if too many
-        synchronized (cache) {
-            while (totalMem > maxMem) {
-                ItemId id = (ItemId) cache.firstKey();
-                Entry entry = (Entry) cache.remove(id);
-                totalMem -= entry.size;
-            }
-        }
-    }
-
-            Entry entry = (Entry) cache.remove(id);
+            Entry entry = cache.remove(id);
-        synchronized (cache) {
-            totalMem = 0;
-            Iterator iter = cache.values().iterator();
-            while (iter.hasNext()) {
-                Entry entry = (Entry) iter.next();
-                entry.recalc();
-                totalMem += entry.size;
-            }
-        }
-            shrinkIfRequired();
+
+            // remove items, if too many
+            if (totalMem > maxMem) {
+                totalMem = 0;
+                List<Map.Entry<ItemId, Entry>> entries =
+                    new ArrayList<Map.Entry<ItemId, Entry>>(cache.entrySet());
+                for (Map.Entry<ItemId, Entry> entry : entries) {
+                    long entrySize = entry.getValue().size;
+                    if (totalMem + entrySize > maxMem) {
+                        cache.remove(entry.getKey());
+                    } else {
+                        totalMem += entrySize;
+                    }
+                }
+            }

INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS31 INS31 INS31 INS83 INS83 INS83 INS83 INS74 MOV29 INS79 MOV83 MOV42 MOV44 MOV8 MOV29 MOV83 MOV39 MOV42 INS8 MOV29 INS83 INS39 INS42 MOV44 MOV8 INS43 INS43 MOV43 INS42 INS45 MOV21 INS21 MOV41 UPD42 MOV42 INS42 INS7 MOV21 INS8 INS22 INS14 INS60 INS60 INS70 MOV21 INS25 INS52 INS42 INS74 INS27 INS34 INS9 INS1 INS43 MOV5 INS59 INS39 INS59 INS44 MOV32 INS8 INS42 MOV43 MOV43 MOV27 INS8 INS43 MOV43 INS43 INS42 INS34 INS31 INS42 MOV32 INS42 MOV3 INS42 INS34 MOV43 INS42 INS21 INS32 MOV32 MOV21 MOV60 INS70 INS42 INS40 INS78 INS83 INS39 INS42 INS44 INS8 MOV42 UPD42 MOV42 MOV42 INS7 MOV42 MOV42 MOV42 INS74 INS44 INS42 INS8 INS42 INS74 INS42 INS25 INS2 INS40 INS43 INS74 UPD42 INS14 INS74 INS42 MOV60 INS25 INS43 MOV43 MOV43 INS27 INS8 INS8 INS42 INS37 INS42 INS43 INS43 MOV43 INS74 INS32 INS43 INS43 MOV43 INS39 INS27 INS8 INS8 INS40 INS42 INS22 MOV21 INS41 INS41 INS42 INS40 UPD42 MOV42 INS43 INS74 MOV42 UPD42 MOV42 INS40 INS42 UPD42 INS22 INS27 INS42 MOV21 MOV21 INS52 INS42 INS9 INS9 INS42 INS43 INS43 MOV43 INS32 INS42 INS42 INS42 INS32 INS42 INS22 INS40 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS42 INS42 DEL43 DEL42 DEL43 DEL14 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL61 DEL8 DEL51 DEL8 DEL31 DEL32 DEL11 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL11 DEL11 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL31 DEL11 DEL31 DEL43 DEL32 DEL42 DEL32 DEL32 DEL11 DEL32 DEL40 DEL42 DEL42 DEL32 DEL8 DEL61 DEL8 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL31