JCR-2199: Improvements to user management

- gracefully handle conflicts that may arise from enabling the auto-expand option (+ add test) with existing
   authorizable nodes.
- add minimal validation of the config parameters and reset them to default
- improve javadoc

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@797488 13f79535-47bb-0310-9956-ffa450edef68

- * levels that are used by default store authorizable nodes.<br>The default
+ * levels that are used by default store authorizable nodes.<br>The value is
+ * expected to be a positive integer greater than zero. The default
- * if {@link #PARAM_AUTO_EXPAND_TREE} is enabled.<br>The default value is
- * 1000.</li>
+ * if {@link #PARAM_AUTO_EXPAND_TREE} is enabled.<br>The value is expected to be
+ * a positive long greater than zero. The default value is 1000.</li>
+     * <li>Special case: If <code>autoExpandTree</code> is enabled later on
+     * AND any of the existing authorizable nodes collides with an intermediate
+     * folder to be created the auto-expansion is aborted and the new
+     * authorizable is inserted at the last valid level irrespective of
+     * max-size being reached.
+     * </li>
-     * <code>integer</code> defining the depth of the default structure that is
-     * always created.<br>
+     * A positive <code>integer</code> greater than zero defining the depth of
+     * the default structure that is always created.<br>
-     * <code>long</code> defining the maximum number of child nodes that are
-     * allowed at a given level.<br>
+     * A positive <code>long</code> greater than zero defining the maximum
+     * number of child nodes that are allowed at a given level.<br>
+                        if (d <= 0) {
+                           log.warn("Invalid defaultDepth '" + d + "' -> using default.");
+                           d = DEFAULT_DEPTH;
+                        }
-                        log.warn("Unable to parse defaultDepth config option", e);
+                        log.warn("Unable to parse defaultDepth config parameter -> using default.", e);
+                        if (expand && size <= 0) {
+                            log.warn("Invalid autoExpandSize '" + size + "' -> using default.");
+                            size = DEFAULT_SIZE;
+                        }
-                        log.warn("Unable to parse autoExpandSize config option", e);
+                        log.warn("Unable to parse autoExpandSize config parameter -> using default.", e);
-                        folder.save();
-            checkExists(escapedId, folder);
+            checkAuthorizableNodeExists(escapedId, folder);
-                // validation check on each intermediate level if authorizable
-                // to be created doesn't conflict.
-                checkExists(folderName, folder);
-
-                    folder = folder.getNode(folderName);
+                    NodeImpl n = (NodeImpl) folder.getNode(folderName);
+                    // validation check: folder must be of type rep:AuthorizableFolder
+                    // and not an authorizable node.
+                    if (n.isNodeType(NT_REP_AUTHORIZABLE_FOLDER)) {
+                        // expected nodetype -> no violation
+                        folder = n;
+                    } else if (n.isNodeType(NT_REP_AUTHORIZABLE)){
+                        /*
+                         an authorizable node has been created before with the
+                         name of the intermediate folder to be created.
+                         this may only occur if the 'autoExpandTree' option has
+                         been enabled later on.
+                         Resolution:
+                         - abort auto-expanding and create the authorizable
+                           at the current level, ignoring that max-size is reached.
+                         - note, that this behavior has been preferred over tmp.
+                           removing and recreating the colliding authorizable node.
+                        */
+                        log.warn("Auto-expanding aborted. An existing authorizable node '" + n.getName() +"'conflicts with intermediate folder to be created.");
+                        break;
+                    } else {
+                        // should never get here: some other, unexpected node type
+                        String msg = "Failed to create authorizable node: Detected conflict with node of unexpected nodetype '" + n.getPrimaryNodeType().getName() + "'.";
+                        log.error(msg);
+                        throw new RepositoryException(msg);
+                    }
+                    // folder doesn't exist nor does another colliding child node.
-            checkExists(escapedId, folder);
+            checkAuthorizableNodeExists(escapedId, folder);
-        private void checkExists(String nodeName, Node folder) throws RepositoryException {
+        private void checkAuthorizableNodeExists(String nodeName, Node folder) throws AuthorizableExistsException, RepositoryException {
-                    folder.getNode(nodeName).isNodeType(session.getJCRName(NT_REP_AUTHORIZABLE))) {
+                    ((NodeImpl) folder.getNode(nodeName)).isNodeType(NT_REP_AUTHORIZABLE)) {

UPD66 INS66 UPD66 UPD66 UPD42 INS43 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 INS42 UPD42 INS25 UPD42 MOV32 INS8 MOV8 INS36 UPD42 MOV42 MOV42 INS60 INS25 INS11 INS43 INS59 INS32 MOV8 INS25 INS43 MOV32 INS25 INS25 INS42 INS42 INS11 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS8 INS8 INS42 INS27 INS8 INS27 INS8 INS43 MOV32 INS42 INS42 INS42 INS21 INS10 INS60 INS21 INS53 INS42 INS34 INS21 INS21 INS42 INS27 INS21 INS21 INS42 INS42 INS32 INS43 INS59 INS32 INS14 INS32 INS7 UPD45 INS42 INS34 INS32 INS7 UPD45 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS45 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL25 DEL42 DEL42 DEL32