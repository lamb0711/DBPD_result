JCR-623 - Clustering
+ Transmit namespace registrations
+ Transmit nodetype registrations


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@482707 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.nodetype.NodeTypeDef;
+import org.apache.jackrabbit.core.nodetype.compact.ParseException;
+import java.util.Collection;
-            if (workspace.equals("")) {
-                workspace = null;
-            }
-                    boolean isDeep = in.readBoolean();
-                    String owner = in.readString();
-
-                    processor.process(nodeId, isDeep, owner);
-                } else if (c == 'U') {
-                    NodeId nodeId = in.readNodeId();
-                    processor.process(nodeId);
+                    boolean isLock = in.readBoolean();
+                    if (isLock) {
+                        boolean isDeep = in.readBoolean();
+                        String owner = in.readString();
+                        processor.process(nodeId, isDeep, owner);
+                    } else {
+                        processor.process(nodeId);
+                    }
+                } else if (c == 'S') {
+                    String oldPrefix = in.readString();
+                    String newPrefix = in.readString();
+                    String uri = in.readString();
+                    processor.process(oldPrefix, newPrefix, uri);
+                } else if (c == 'T') {
+                    int size = in.readInt();
+                    HashSet ntDefs = new HashSet();
+                    for (int i = 0; i < size; i++) {
+                        ntDefs.add(in.readNodeTypeDef());
+                    }
+                    processor.process(ntDefs);
+        } catch (ParseException e) {
+            String msg = "Unable to read revision " + record.getRevision() +
+                    ": " + e.getMessage();
+            throw new JournalException(msg);
-            out.writeString(workspace != null ? workspace : "");
+            out.writeString(workspace);
-    public void log(NodeId nodeId, boolean isDeep, String owner) throws JournalException {
+    public void log(String oldPrefix, String newPrefix, String uri) throws JournalException {
-            out.writeChar('L');
-            out.writeNodeId(nodeId);
-            out.writeBoolean(isDeep);
-            out.writeString(owner);
+            out.writeChar('S');
+            out.writeString(oldPrefix);
+            out.writeString(newPrefix);
+            out.writeString(uri);
+    public void log(NodeId nodeId, boolean isDeep, String owner) throws JournalException {
+        log(nodeId, true, isDeep, owner);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+        log(nodeId, false, false, null);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void log(Collection ntDefs) throws JournalException {
-            out.writeChar('U');
-            out.writeNodeId(nodeId);
+            out.writeChar('T');
+            out.writeInt(ntDefs.size());
+
+            Iterator iter = ntDefs.iterator();
+            while (iter.hasNext()) {
+                out.writeNodeTypeDef((NodeTypeDef) iter.next());
+            }
+
+     * Log either a lock or an unlock operation.
+     *
+     * @param nodeId node id
+     * @param isLock <code>true</code> if this is a lock;
+     *               <code>false</code> if this is an unlock
+     * @param isDeep flag indicating whether lock is deep
+     * @param owner lock owner
+     */
+    protected void log(NodeId nodeId, boolean isLock, boolean isDeep, String owner)
+            throws JournalException {
+
+        try {
+            out.writeChar('L');
+            out.writeNodeId(nodeId);
+            out.writeBoolean(isLock);
+            if (isLock) {
+                out.writeBoolean(isDeep);
+                out.writeString(owner);
+            }
+        } catch (IOException e) {
+            String msg = "Unable to write to journal log " + tempLog + ": " + e.getMessage();
+            throw new JournalException(msg);
+        }
+    }
+
+    /**

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS31 INS31 INS31 INS44 INS44 INS44 INS43 MOV29 INS83 INS39 INS42 MOV44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 UPD83 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS39 INS42 INS43 INS42 INS42 INS21 INS65 INS43 INS42 INS21 INS65 INS43 INS42 INS42 INS54 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS12 INS42 INS42 INS42 INS42 INS32 INS65 INS42 INS32 INS65 INS42 INS8 INS12 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS44 INS8 INS21 INS21 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS9 INS33 INS21 INS21 INS60 INS61 INS44 INS8 INS21 INS25 INS43 INS42 INS60 INS53 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS8 INS43 INS42 INS60 INS53 INS32 INS42 INS8 INS42 INS43 INS59 INS14 INS42 UPD13 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS43 INS59 INS14 INS42 INS42 INS42 MOV21 MOV21 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS11 INS45 INS42 INS45 INS32 INS42 INS25 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 MOV27 INS8 INS25 INS42 INS42 INS42 MOV60 INS60 MOV25 INS27 INS8 INS25 INS39 INS59 INS42 MOV8 INS42 INS13 INS60 INS60 INS60 INS21 INS27 INS8 MOV8 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS13 INS60 INS60 INS24 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS34 INS32 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL13 DEL27 DEL25 DEL42 DEL33 DEL27 DEL42 DEL45 DEL16