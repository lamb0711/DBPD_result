JCR-1337: Optimize first execution queries for DescendantSelfAxisWeight/ChildAxisQuery

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@615223 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.uuid.UUID;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.text.NumberFormat;
+     * @throws IOException if an error occurs while reading from the index.
-    CachingIndexReader(IndexReader delegatee, DocNumberCache cache) {
+    CachingIndexReader(IndexReader delegatee, DocNumberCache cache)
+            throws IOException {
+        initializeParents(delegatee);
+     * Initializes the {@link #parents} <code>DocId</code> array.
+     *
+     * @param reader the underlying index reader.
+     * @throws IOException if an error occurs while reading from the index.
+     */
+    private void initializeParents(IndexReader reader) throws IOException {
+        long time = System.currentTimeMillis();
+        Map docs = new HashMap();
+        for (int i = 0; i < reader.maxDoc(); i++) {
+            if (!reader.isDeleted(i)) {
+                Document doc = reader.document(i, FieldSelectors.UUID_AND_PARENT);
+                UUID uuid = UUID.fromString(doc.get(FieldNames.UUID));
+                UUID parent = null;
+                try {
+                    parent = UUID.fromString(doc.get(FieldNames.PARENT));
+                } catch (IllegalArgumentException e) {
+                    // root node does not have a parent
+                }
+                NodeInfo info = new NodeInfo(i, uuid, parent);
+                docs.put(uuid, info);
+            }
+        }
+        double foreignParents = 0;
+        for (Iterator it = docs.values().iterator(); it.hasNext(); ) {
+            NodeInfo info = (NodeInfo) it.next();
+            NodeInfo parent = (NodeInfo) docs.get(info.parent);
+            if (parent != null) {
+                parents[info.docId] = DocId.create(parent.docId);
+            } else if (info.parent != null) {
+                foreignParents++;
+                parents[info.docId] = DocId.create(info.parent);
+            } else {
+                // no parent -> root node
+                parents[info.docId] = DocId.NULL;
+            }
+        }
+        if (log.isDebugEnabled()) {
+            NumberFormat nf = NumberFormat.getPercentInstance();
+            nf.setMaximumFractionDigits(1);
+            time = System.currentTimeMillis() - time;
+            if (parents.length > 0) {
+                foreignParents /= parents.length;
+            }
+            log.debug("initialized {} DocIds in {} ms, {} foreign parents",
+                    new Object[]{
+                        new Integer(parents.length),
+                        new Long(time),
+                        nf.format(foreignParents)
+                    });
+        }
+    }
+
+    private static class NodeInfo {
+
+        final int docId;
+
+        final UUID uuid;
+
+        final UUID parent;
+
+        public NodeInfo(int docId, UUID uuid, UUID parent) {
+            this.docId = docId;
+            this.uuid = uuid;
+            this.parent = parent;
+        }
+    }
+
+    /**

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS55 INS43 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS65 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS24 INS60 INS24 INS25 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS42 INS66 INS32 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS39 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS39 INS59 INS58 INS32 INS8 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS42 INS67 INS42 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS32 INS42 INS25 INS42 INS34 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS60 INS21 INS21 INS25 INS21 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS42 INS43 INS42 INS34 INS42 INS42 INS38 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS43 INS59 INS32 INS7 INS27 INS8 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS32 INS60 INS60 INS60 INS54 INS60 INS21 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS33 INS21 INS27 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS27 INS40 INS34 INS21 INS42 INS42 INS45 INS3 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS42 INS42 INS43 INS32 INS43 INS32 INS7 INS40 INS33 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS7 INS5 INS4 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS2 INS32 INS37 INS7 INS7 INS42 INS42 INS42 INS40 INS43 INS85 INS14 INS14 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS7 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS2 INS32 INS2 INS40 INS42 INS43 INS40 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40