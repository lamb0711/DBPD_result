work in progress

- adjust nodetypedef according to API
- rs: retrieve descriptors once.
- rs: cache client by sessionInfo

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@469831 13f79535-47bb-0310-9956-ffa450edef68

-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj instanceof QNodeTypeDefinition) {
-            QNodeTypeDefinition other = (QNodeTypeDefinition) obj;
-            return (name == null ? other.getQName() == null : name.equals(other.getQName()))
-                    && (primaryItemName == null ? other.getPrimaryItemName() == null : primaryItemName.equals(other.getPrimaryItemName()))
-                    && Arrays.equals(supertypes, other.getSupertypes())
-                    && mixin == other.isMixin()
-                    && orderableChildNodes == other.hasOrderableChildNodes()
-                    && Arrays.equals(propDefs, other.getPropertyDefs())
-                    && Arrays.equals(nodeDefs, other.getChildNodeDefs());
-        }
-        return false;
-    }
-
+    //------------------------------------------------< QNodeTypeDefinition >---
-     * Always returns 0
-     *
-     * @see Object#hashCode()
-     */
-    public int hashCode() {
-        // TODO: can be calculated for the definition is immutable
-        return 0;
-    }
-
-    /**
-     * Returns the name of the node type being defined or
-     * <code>null</code> if not set.
-     *
-     * @return the name of the node type or <code>null</code> if not set.
+     * @see QNodeTypeDefinition#getQName() 
-     * Returns an array containing the names of the supertypes or
-     * <code>null</code> if not set.
-     *
-     * @return an array listing the names of the supertypes or
-     *         <code>null</code> if not set.
+     * @see QNodeTypeDefinition#getSupertypes()
-        return supertypes;
+        if (supertypes.length > 0
+                || isMixin() || QName.NT_BASE.equals(getQName())) {
+            return supertypes;
+        } else {
+            return new QName[] { QName.NT_BASE };
+        }
-     * Returns the value of the mixin flag.
-     *
-     * @return true if this is a mixin node type; false otherwise.
+     * @see QNodeTypeDefinition#isMixin() 
-     * Returns the value of the orderableChildNodes flag.
-     *
-     * @return true if nodes of this node type can have orderable child nodes; false otherwise.
+     * @see QNodeTypeDefinition#hasOrderableChildNodes()
-     * Returns the name of the primary item (one of the child items of the
-     * node's of this node type) or <code>null</code> if not set.
-     *
-     * @return the name of the primary item or <code>null</code> if not set.
+     * @see QNodeTypeDefinition#getPrimaryItemName()
-     * Returns an array containing the property definitions or
-     * <code>null</code> if not set.
-     *
-     * @return an array containing the property definitions or
-     *         <code>null</code> if not set.
+     * @see QNodeTypeDefinition#getPropertyDefs() 
-     * Returns an array containing the child node definitions or
-     * <code>null</code> if not set.
-     *
-     * @return an array containing the child node definitions or
-     *         <code>null</code> if not set.
+     * @see QNodeTypeDefinition#getChildNodeDefs() 
-     * @inheritDoc
+     * @see QNodeTypeDefinition#getDependencies() 
+
+    //-------------------------------------------------------------< Object >---
+    /**
+     * @see Object#equals(Object) 
+     */
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof QNodeTypeDefinition) {
+            QNodeTypeDefinition other = (QNodeTypeDefinition) obj;
+            return (name == null ? other.getQName() == null : name.equals(other.getQName()))
+                && (primaryItemName == null ? other.getPrimaryItemName() == null : primaryItemName.equals(other.getPrimaryItemName()))
+                && Arrays.equals(supertypes, other.getSupertypes())
+                && mixin == other.isMixin()
+                && orderableChildNodes == other.hasOrderableChildNodes()
+                && Arrays.equals(propDefs, other.getPropertyDefs())
+                && Arrays.equals(nodeDefs, other.getChildNodeDefs());
+        }
+        return false;
+    }
+
+    /**
+     * Always returns 0
+     *
+     * @see Object#hashCode()
+     */
+    public int hashCode() {
+        // TODO: can be calculated for the definition is immutable
+        return 0;
+    }

MOV31 MOV31 INS8 INS29 UPD65 UPD65 INS25 UPD65 UPD65 UPD65 UPD65 UPD65 UPD65 INS65 INS68 UPD66 INS68 INS27 MOV8 INS8 INS68 UPD66 INS68 INS68 INS68 UPD66 INS68 UPD66 INS68 INS66 INS68 INS66 INS42 INS42 INS42 INS42 INS27 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS27 INS32 INS40 INS42 INS32 INS3 INS43 INS40 INS34 INS42 INS42 INS5 INS4 INS42 INS43 INS85 INS40 INS42 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL66