JCR-890: concurrent read-only access to a session

Leverage SessionContext in more places.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@957229 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.lock.LockManager;
-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
+import org.apache.jackrabbit.core.session.SessionContext;
-    public BatchedItemOperations(UpdatableItemStateManager stateMgr,
-                                 NodeTypeRegistry ntReg,
-                                 LockManager lockMgr,
-                                 SessionImpl session,
-                                 HierarchyManager hierMgr) throws RepositoryException {
-        super(ntReg, hierMgr, session, lockMgr, session.getAccessManager(),
-                session.getRetentionRegistry(), session.getItemManager());
+    public BatchedItemOperations(
+            UpdatableItemStateManager stateMgr, SessionContext sessionContext)
+            throws RepositoryException {
+        super(sessionContext);
-        this.session = session;
+        this.session = sessionContext.getSessionImpl();
-     * @throws ConstraintViolationException
-     * @throws AccessDeniedException
-     * @throws VersionException
-     * @throws PathNotFoundException
-     * @throws ItemExistsException
-     * @throws LockException
-     * @throws RepositoryException
+     * @throws RepositoryException if the copy operation fails
-            throws ConstraintViolationException, AccessDeniedException,
-            VersionException, PathNotFoundException, ItemExistsException,
-            LockException, RepositoryException {
-        return copy(srcPath, stateMgr, hierMgr, session.getAccessManager(), destPath, flag);
+            throws RepositoryException {
+        return copy(
+                srcPath, stateMgr, hierMgr, sessionContext.getAccessManager(),
+                destPath, flag);
+            AccessManager accessMgr = sessionContext.getAccessManager();
-            QItemDefinition parentDef = itemMgr.getDefinition(parentState).unwrap();
+            QItemDefinition parentDef =
+                sessionContext.getItemManager().getDefinition(parentState).unwrap();
-                QNodeDefinition conflictingTargetDef = itemMgr.getDefinition(conflictingState).unwrap();
+                QNodeDefinition conflictingTargetDef =
+                    sessionContext.getItemManager().getDefinition(conflictingState).unwrap();
+                AccessManager accessMgr = sessionContext.getAccessManager();
-            QItemDefinition parentDef = itemMgr.getDefinition(parentState).unwrap();
+            QItemDefinition parentDef =
+                sessionContext.getItemManager().getDefinition(parentState).unwrap();
-            QItemDefinition targetDef = itemMgr.getDefinition(targetState).unwrap();
+            QItemDefinition targetDef =
+                sessionContext.getItemManager().getDefinition(targetState).unwrap();
+        AccessManager accessMgr = sessionContext.getAccessManager();
+        AccessManager accessMgr = sessionContext.getAccessManager();
-        if (itemMgr.getDefinition(node).isProtected()) {
+        if (sessionContext.getItemManager().getDefinition(node).isProtected()) {

MOV26 UPD40 UPD43 UPD42 INS60 INS60 UPD42 UPD42 INS66 INS43 INS59 INS43 INS59 INS32 INS60 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 INS43 INS59 MOV43 MOV43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS42 UPD42 MOV42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS32 INS32 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43