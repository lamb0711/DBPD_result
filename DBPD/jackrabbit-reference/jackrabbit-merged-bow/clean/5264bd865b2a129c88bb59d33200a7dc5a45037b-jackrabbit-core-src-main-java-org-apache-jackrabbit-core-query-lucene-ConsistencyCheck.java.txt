JCR-3517 double check capability for eliminating false positives due to concurrent updates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1444515 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.cluster.ClusterException;
+import org.apache.jackrabbit.core.cluster.ClusterNode;
-
+    public void doubleCheckErrors() {
+        if (!errors.isEmpty()) {
+            log.info("Double checking errors");
+            final ClusterNode clusterNode = handler.getContext().getClusterNode();
+            if (clusterNode != null) {
+                try {
+                    clusterNode.sync();
+                } catch (ClusterException e) {
+                    log.error("Could not sync cluster node for double checking errors");
+                }
+            }
+            final Iterator<ConsistencyCheckError> iterator = errors.iterator();
+            while (iterator.hasNext()) {
+                try {
+                    final ConsistencyCheckError error = iterator.next();
+                    if (!error.doubleCheck(handler, stateMgr)) {
+                        log.info("False positive: " + error.toString());
+                        iterator.remove();
+                    }
+                } catch (RepositoryException e) {
+                    log.error("Failed to double check consistency error", e);
+                } catch (IOException e) {
+                    log.error("Failed to double check consistency error", e);
+                }
+            }
+        }
+    }
+
-                NodeId parentId;
-                if (parent != null && !parent.isEmpty()) {
-                    parentId = new NodeId(parent);
-                } else {
+                if (parent == null || parent.isEmpty()) {
+                final NodeId parentId = new NodeId(parent);
+
+        @Override
+        boolean doubleCheck(SearchIndex handler, ItemStateManager stateManager)
+                throws RepositoryException, IOException {
+            final List<Document> documents = handler.getNodeDocuments(id);
+            for (Document document : documents) {
+                final String parent = document.get(FieldNames.PARENT);
+                if (parent != null && !parent.isEmpty()) {
+                    final NodeId parentId = new NodeId(parent);
+                    if (handler.getNodeDocuments(parentId).isEmpty()) {
+                        return true;
+                    }
+                }
+            }
+            return false;
+
+        }
+        private NodeId parentId;
+
+            this.parentId = parentId;
+
+        @Override
+        boolean doubleCheck(SearchIndex handler, ItemStateManager stateManager)
+                throws IOException, RepositoryException {
+            final List<Document> documents = handler.getNodeDocuments(id);
+            for (Document document : documents) {
+                final String parent = document.get(FieldNames.PARENT);
+                if (parent != null && !parent.isEmpty()) {
+                    final NodeId parentId = new NodeId(parent);
+                    if (parentId.equals(this.parentId) && !stateManager.hasItemState(parentId)) {
+                        return true;
+                    }
+                }
+            }
+            return false;
+        }
+        private NodeId indexedParentId;
+
+            this.indexedParentId = indexedParentId;
+        @Override
+        boolean doubleCheck(final SearchIndex handler, final ItemStateManager stateManager)
+                throws RepositoryException, IOException {
+            final List<Document> documents = handler.getNodeDocuments(id);
+            for (Document document : documents) {
+                final String parent = document.get(FieldNames.PARENT);
+                if (parent != null && !parent.isEmpty()) {
+                    final NodeId parentId = new NodeId(parent);
+                    if (parentId.equals(indexedParentId) && !stateManager.hasItemState(parentId)) {
+                        return true;
+                    }
+                }
+            }
+            return false;
+        }
+
+
+        @Override
+        boolean doubleCheck(SearchIndex handler, ItemStateManager stateManager)
+                throws RepositoryException, IOException {
+            return handler.getNodeDocuments(id).size() > 1;
+        }
+
+        @Override
+        boolean doubleCheck(SearchIndex handler, ItemStateManager stateManager)
+                throws RepositoryException, IOException {
+            final List<Document> documents = handler.getNodeDocuments(id);
+            if (!documents.isEmpty()) {
+                if (!stateManager.hasItemState(id)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+        @Override
+        boolean doubleCheck(SearchIndex handler, ItemStateManager stateManager)
+                throws RepositoryException, IOException {
+            final List<Document> documents = handler.getNodeDocuments(id);
+            if (documents.isEmpty()) {
+                if (stateManager.hasItemState(id)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+

INS26 INS26 INS40 INS40 INS31 INS83 INS39 INS42 INS8 INS31 INS23 INS31 INS23 INS31 INS31 INS31 INS31 INS25 INS78 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS83 MOV43 MOV59 INS78 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS43 INS59 INS78 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS38 INS8 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS70 INS41 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS70 INS41 INS42 INS42 INS21 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS60 INS70 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS41 INS32 INS21 INS60 INS25 INS60 INS61 INS42 INS42 INS83 INS74 INS59 INS44 INS42 INS8 INS9 INS7 INS42 INS42 INS83 INS74 INS59 INS44 INS42 INS8 INS9 INS7 INS42 INS42 INS83 INS74 INS59 INS44 INS42 INS8 INS9 INS42 INS42 INS27 INS42 INS42 INS83 INS74 INS59 INS38 INS8 INS9 INS42 INS42 INS83 INS74 INS59 INS32 INS8 INS9 INS42 INS42 INS32 INS83 INS43 INS59 INS27 INS8 INS83 INS74 INS59 INS32 INS8 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS22 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS22 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS32 INS34 INS43 INS43 INS42 INS32 INS32 INS25 INS43 INS43 INS42 INS32 INS42 INS42 INS25 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS33 INS54 INS43 INS43 INS42 INS32 INS42 INS42 INS54 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 MOV27 INS8 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS8 INS12 INS12 INS27 INS83 INS43 INS59 INS42 INS42 INS32 INS60 INS25 INS42 INS42 INS32 INS27 INS38 INS60 INS25 INS42 INS42 INS32 INS27 INS38 INS60 INS25 INS42 INS42 INS42 INS32 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS21 INS44 INS8 INS60 INS25 INS44 INS8 INS44 INS8 INS27 INS32 INS42 INS42 MOV14 INS42 INS42 INS40 INS83 INS43 INS59 INS32 INS8 INS42 INS42 INS40 INS42 INS33 INS32 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS40 INS42 INS33 INS32 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS9 INS9 INS32 INS43 INS42 INS21 INS83 INS43 INS59 INS38 INS8 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS33 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS41 INS42 INS42 INS42 INS42 INS14 INS32 INS38 INS41 INS42 INS42 INS42 INS42 INS14 INS32 INS38 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS21 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS9 INS43 INS42 INS42 INS42 INS22 INS32 INS9 INS43 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS42 INS42 DEL60 DEL42 DEL7 DEL21 DEL8