- Use ItemStateLifeCycleListener instead of ItemStateListener in ItemImpl.
- Remove usage of ItemState.dispose() and the method itself.
- Remove method ItemStateListener.stateDiscarded() and all implementations of that method.
- Remove unused methods in ChangeLog: disconnect() and undo()
- Remove ItemState.discard() and related methods
- Rename ItemState.copy() to ItemState.copyFrom()
- Remove ItemState.STATUS_UNDEFINED. An ItemState always has a defined status!
- Rename TransientItemStateManager.disposeAllItemStates() to simply dispose().
- Introduce method ItemState.refresh() which is called instead of discard(). (Not yet implemented!)
- Clarify useage of WorkspaceManager.onEventReceived()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@433998 13f79535-47bb-0310-9956-ffa450edef68

-                    onEventReceived(null, events, false); // external
+                    // external change
+                    onEventReceived(null, events);
-     * changes have been applied to the repository.
+     * changes have been applied to the repository. Depending on <code>changeLog</code>
+     * this method is called as a result of:
+     * <ul>
+     * <li>a local <code>save</code> of transient changes. In this case
+     * <code>changeLog</code> is non-<code>null</code>.</li>
+     * <li>an execution of a workspace operation. In this case
+     * <code>changeLog</code> is <code>null</code></li>
+     * <li>an external change to the workspace (another session modified the
+     * workspace). In this case <code>changeLog</code> is <code>null</code></li>
+     * </ul>
-     * @param changeLog
-     * @param events the events.
-     * @param isLocal <code>true</code> if changes were local.
+     * @param changeLog the local <code>ChangeLog</code> which contains the
+     *                  affected transient <code>ItemState</code>s and the
+     *                  relevant {@link Operation}s that lead to the
+     *                  modifications. If <code>null</code> this method is
+     *                  called as a consequence of an external change or a call
+     *                  of a workspace operation. In that case there are no
+     *                  local transient changes.
+     * @param events    the events generated by the repository service as a
+     *                  response to the changes.
-    private void onEventReceived(ChangeLog changeLog, EventIterator events, boolean isLocal) {
+    private void onEventReceived(ChangeLog changeLog, EventIterator events) {
-            // use current change log for notification
+            // now we need to apply the transient changes in changeLog to
+            // the ItemStates in the workspace layer
+            changeLog.push();
-           lstnrs[i].onEvent(new EventIteratorImpl(eventList), isLocal);
+           lstnrs[i].onEvent(new EventIteratorImpl(eventList), changeLog != null);
-                    onEventReceived(changeLog, events, true);
+                    onEventReceived(changeLog, events);
-                    onEventReceived(null, events, true);
+                    // a workspace operation is like an external change
+                    onEventReceived(null, events);

UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS42 INS21 INS32 INS42 INS42 INS27 INS42 INS33 DEL9 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL9 DEL9