JCR-1487 - Transient states should be persisted in depth-first traversal order


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@638783 13f79535-47bb-0310-9956-ffa450edef68

-     * within the scope of <code>this.{@link #save()}</code>.
+     * within the scope of <code>this.{@link #save()}</code>. The collection
+     * returned is ordered depth-first, i.e. the item itself (if transient)
+     * comes last.
-        // fail-fast test: check status of this item's state
-        if (isTransient()) {
-            String msg;
-            switch (state.getStatus()) {
-                case ItemState.STATUS_EXISTING_MODIFIED:
-                    // add this item's state to the list
-                    dirty.add(state);
-                    break;
-
-                case ItemState.STATUS_NEW:
-                    msg = safeGetJCRPath() + ": cannot save a new item.";
-                    log.debug(msg);
-                    throw new RepositoryException(msg);
-
-                case ItemState.STATUS_STALE_MODIFIED:
-                    msg = safeGetJCRPath()
-                        + ": the item cannot be saved because it has been modified externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
-
-                case ItemState.STATUS_STALE_DESTROYED:
-                    msg = safeGetJCRPath()
-                        + ": the item cannot be saved because it has been deleted externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
-
-                case ItemState.STATUS_UNDEFINED:
-                    msg = safeGetJCRPath()
-                        + ": the item cannot be saved; it seems to have been removed externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
-
-                default:
-                    log.debug("unexpected state status (" + state.getStatus() + ")");
-                    // ignore
-                    break;
-            }
-        }
-
+        // fail-fast test: check status of this item's state
+        if (isTransient()) {
+            String msg;
+            switch (state.getStatus()) {
+                case ItemState.STATUS_EXISTING_MODIFIED:
+                    // add this item's state to the list
+                    dirty.add(state);
+                    break;
+
+                case ItemState.STATUS_NEW:
+                    msg = safeGetJCRPath() + ": cannot save a new item.";
+                    log.debug(msg);
+                    throw new RepositoryException(msg);
+
+                case ItemState.STATUS_STALE_MODIFIED:
+                    msg = safeGetJCRPath()
+                        + ": the item cannot be saved because it has been modified externally.";
+                    log.debug(msg);
+                    throw new InvalidItemStateException(msg);
+
+                case ItemState.STATUS_STALE_DESTROYED:
+                    msg = safeGetJCRPath()
+                        + ": the item cannot be saved because it has been deleted externally.";
+                    log.debug(msg);
+                    throw new InvalidItemStateException(msg);
+
+                case ItemState.STATUS_UNDEFINED:
+                    msg = safeGetJCRPath()
+                        + ": the item cannot be saved; it seems to have been removed externally.";
+                    log.debug(msg);
+                    throw new InvalidItemStateException(msg);
+
+                default:
+                    log.debug("unexpected state status (" + state.getStatus() + ")");
+                    // ignore
+                    break;
+            }
+        }
+

MOV25 UPD66 INS66 INS66