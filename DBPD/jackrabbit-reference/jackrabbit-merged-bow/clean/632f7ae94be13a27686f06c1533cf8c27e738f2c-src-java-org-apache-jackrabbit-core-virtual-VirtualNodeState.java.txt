- improved versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@122838 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.RepositoryException;
+import java.util.HashMap;
+import java.util.HashSet;
-    protected VirtualItemStateProvider provider;
+    /**
+     * The virtual item state provide that created this node state
+     */
+    protected final VirtualItemStateProvider stateMgr;
+     * map of property states of this node state
+     * key=propname, value={@link VirtualPropertyState}
+     */
+    private final HashMap properties = new HashMap();
+
+    /**
+     * creates a new virtual node state
+     * @param stateMgr
+     * @param parentUUID
-     * @param parentUUID
+     * @param mixins
+     * @throws RepositoryException
-    protected VirtualNodeState(VirtualItemStateProvider provider,
-                               String uuid, QName nodeTypeName, String parentUUID) {
+    public VirtualNodeState(VirtualItemStateProvider stateMgr,
+                                   String parentUUID,
+                                   String uuid,
+                                   QName nodeTypeName,
+                                   QName[] mixins)
+            throws RepositoryException {
+        this.stateMgr = stateMgr;
-        this.provider = provider;
-
-        // add some props
-        addPropertyEntry(ItemImpl.PROPNAME_PRIMARYTYPE);
-        addPropertyEntry(ItemImpl.PROPNAME_MIXINTYPES);
+        // add default properties
+        setPropertyValue(ItemImpl.PROPNAME_PRIMARYTYPE, InternalValue.create(nodeTypeName));
+        setMixinNodeTypes(mixins);
-    public VirtualPropertyState getPropertyState(QName name)
-            throws NoSuchItemStateException {
-        if (name.equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
-            VirtualPropertyState state = new VirtualPropertyState(name, getUUID());
-            state.setDefinitionId(provider.getPropDefId(ItemImpl.PROPNAME_PRIMARYTYPE));
-            state.setType(PropertyType.NAME);
-            state.setValues(InternalValue.create(new QName[]{getNodeTypeName()}));
-            return state;
-        } else if (name.equals(ItemImpl.PROPNAME_MIXINTYPES)) {
-            VirtualPropertyState state = new VirtualPropertyState(name, getUUID());
-            state.setDefinitionId(provider.getPropDefId(ItemImpl.PROPNAME_MIXINTYPES));
-            state.setType(PropertyType.NAME);
-            state.setValues(InternalValue.create((QName[]) getMixinTypeNames().toArray(new QName[getMixinTypeNames().size()])));
-            return state;
-        } else if (name.equals(ItemImpl.PROPNAME_UUID)) {
-            VirtualPropertyState state = new VirtualPropertyState(name, getUUID());
-            state.setDefinitionId(provider.getPropDefId(ItemImpl.PROPNAME_UUID));
-            state.setType(PropertyType.STRING);
-            state.setValues(InternalValue.create(new String[]{getUUID()}));
-            return state;
+    /**
+     * Returns the properties of this node
+     *
+     * @return
+     */
+    public VirtualPropertyState[] getProperties() {
+        return (VirtualPropertyState[]) properties.values().toArray(new VirtualPropertyState[properties.size()]);
+    }
+
+
+    /**
+     * Returns the values of the given property of <code>null</code>
+     *
+     * @param name
+     * @return
+     */
+    public InternalValue[] getPropertyValues(QName name) throws NoSuchItemStateException {
+        VirtualPropertyState ps = getProperty(name);
+        return ps==null ? null : ps.getValues();
+    }
+
+    /**
+     * Returns the value of the given property or <code>null</code>
+     *
+     * @param name
+     * @return
+     */
+    public InternalValue getPropertyValue(QName name) throws NoSuchItemStateException {
+        VirtualPropertyState ps = getProperty(name);
+        return ps==null || ps.getValues().length==0 ? null : ps.getValues()[0];
+    }
+
+    /**
+     * returns the property state of the given name
+     * @param name
+     * @return
+     * @throws NoSuchItemStateException
+     */
+    public VirtualPropertyState getProperty(QName name) throws NoSuchItemStateException {
+        return (VirtualPropertyState) properties.get(name);
+    }
+
+    /**
+     * Sets the property value
+     *
+     * @param name
+     * @param value
+     * @throws javax.jcr.RepositoryException
+     */
+    public void setPropertyValue(QName name, InternalValue value)
+            throws RepositoryException {
+        setPropertyValues(name, value.getType(), new InternalValue[]{value}, false);
+    }
+
+    /**
+     * Sets the property values
+     *
+     * @param name
+     * @param type
+     * @param values
+     * @throws RepositoryException
+     */
+    public void setPropertyValues(QName name, int type, InternalValue[] values)
+            throws RepositoryException {
+        setPropertyValues(name, type, values, true);
+    }
+
+    /**
+     * Sets the property values
+     *
+     * @param name
+     * @param type
+     * @param values
+     * @throws RepositoryException
+     */
+    public void setPropertyValues(QName name, int type, InternalValue[] values, boolean multiple)
+            throws RepositoryException {
+        VirtualPropertyState prop = getOrCreatePropertyState(name, type, multiple);
+        prop.setValues(values);
+    }
+
+    /**
+     * Retrieves or creates a new property state as child property of this node
+     *
+     * @param name
+     * @param type
+     * @param multiValued
+     * @return
+     * @throws RepositoryException
+     */
+    private VirtualPropertyState getOrCreatePropertyState(QName name, int type, boolean multiValued)
+            throws RepositoryException {
+
+        VirtualPropertyState prop = (VirtualPropertyState) properties.get(name);
+        if (prop==null) {
+            prop = stateMgr.createPropertyState(this, name, type, multiValued);
+            properties.put(name, prop);
+            addPropertyEntry(name);
-        throw new NoSuchItemStateException(name.toString());
+        return prop;
+    }
+
+    /**
+     * sets the mixing node type and adds the respective property
+     *
+     * @param mixins
+     * @throws RepositoryException
+     */
+    public void setMixinNodeTypes(QName[] mixins) throws RepositoryException {
+        HashSet set = new HashSet();
+        InternalValue[] values = new InternalValue[mixins.length];
+        for (int i = 0; i < mixins.length; i++) {
+            set.add(mixins[i]);
+            values[i] = InternalValue.create(mixins[i]);
+        }
+        setMixinTypeNames(set);
+        setPropertyValues(ItemImpl.PROPNAME_MIXINTYPES, PropertyType.NAME, values);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 MOV44 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS29 INS83 INS83 INS43 INS59 MOV65 UPD83 INS44 INS43 INS29 MOV83 INS5 UPD42 MOV42 INS8 INS29 INS83 INS5 INS42 INS44 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 MOV44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 MOV43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS65 UPD42 INS65 INS42 INS42 INS14 INS65 INS65 INS65 INS65 UPD42 MOV5 INS42 INS42 INS65 INS65 MOV43 INS85 INS41 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS60 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 MOV41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 MOV21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS5 INS42 INS42 MOV21 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS5 INS42 INS39 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS42 MOV60 INS25 INS41 INS65 INS65 INS65 MOV5 INS42 INS42 INS60 INS60 INS24 INS21 INS21 INS66 INS66 INS66 INS65 INS43 INS66 INS42 INS42 INS42 INS66 INS11 INS66 INS42 INS42 INS42 MOV43 INS59 INS16 INS66 INS42 INS42 MOV43 INS59 INS16 INS66 INS42 INS42 MOV42 INS11 INS66 INS42 INS42 INS40 INS42 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS66 INS42 INS42 INS42 INS42 UPD43 MOV43 MOV85 INS43 INS59 INS32 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS8 INS42 INS66 INS42 INS42 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS32 INS42 INS42 INS42 UPD42 UPD42 INS32 UPD42 INS42 INS5 INS32 INS42 INS32 INS27 INS33 INS32 INS42 INS32 INS27 INS33 INS2 MOV43 INS32 UPD42 UPD42 INS3 INS9 INS42 INS42 UPD42 UPD42 INS42 INS9 UPD42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 UPD42 INS11 INS42 INS33 MOV21 MOV21 INS21 INS42 INS42 INS14 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS40 INS42 UPD42 INS42 INS42 INS42 MOV43 INS85 INS32 INS42 INS3 INS42 INS42 INS42 INS33 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS27 INS32 INS34 INS42 INS42 INS42 UPD42 UPD42 INS5 INS4 INS42 INS42 UPD42 MOV42 INS42 INS43 INS32 INS7 INS32 INS43 INS42 UPD5 MOV5 INS40 INS42 INS34 INS32 INS7 UPD42 MOV42 UPD42 MOV42 INS5 INS32 INS42 INS33 INS22 INS34 INS42 UPD42 MOV42 INS43 INS85 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 INS42 UPD42 MOV42 INS42 UPD43 UPD42 MOV42 INS42 INS2 INS2 INS32 MOV43 INS85 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS52 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL40 DEL42 DEL40 DEL40 DEL42 DEL32 DEL14 DEL40 DEL32 DEL32 DEL40 DEL40 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL4 DEL3 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL5 DEL42 DEL32 DEL32 DEL42 DEL32 DEL3 DEL32 DEL11 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL4 DEL3 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL25 DEL25 DEL25 DEL32 DEL14 DEL53 DEL8 DEL31