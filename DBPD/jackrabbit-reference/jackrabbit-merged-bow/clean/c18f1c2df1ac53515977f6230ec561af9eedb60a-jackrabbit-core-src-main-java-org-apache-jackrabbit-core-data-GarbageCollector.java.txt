JCR-3490 instead of individually loading every node in the repository load batches of node infos at once. node states are now only loaded when the node in question indeed has a blob property in the data store

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1427374 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.persistence.util.NodeInfo;
+import java.util.Map;
+    /**
+     * The number of nodes to fetch at once from the persistence manager. Defaults to 8kb
+     */
+    private static final int NODESATONCE = Integer.getInteger("org.apache.jackrabbit.garbagecollector.nodesatonce", 1024 * 8);
+
-    /**
-     * @deprecated use setMarkEventListener().
-     */
-    public void setScanEventListener(ScanEventListener callback) {
-        setMarkEventListener(callback);
-    }
-
-    /**
-     * @deprecated use mark().
-     */
-    public void scan() throws RepositoryException {
-        mark();
-    }
-
-    /**
-     * @deprecated use isPersistenceManagerScan().
-     */
-    public boolean getPersistenceManagerScan() {
-        return isPersistenceManagerScan();
-    }
-
-            for (NodeId id : pm.getAllNodeIds(null, 0)) {
-                if (callback != null) {
-                    callback.beforeScanning(null);
-                }
-                try {
-                    NodeState state = pm.load(id);
-                    Set<Name> propertyNames = state.getPropertyNames();
-                    for (Name name : propertyNames) {
-                        PropertyId pid = new PropertyId(id, name);
-                        PropertyState ps = pm.load(pid);
-                        if (ps.getType() == PropertyType.BINARY) {
-                            for (InternalValue v : ps.getValues()) {
-                                // getLength will update the last modified date
-                                // if the persistence manager scan is running
-                                v.getLength();
+            Map<NodeId,NodeInfo> batch = pm.getAllNodeInfos(null, NODESATONCE);
+            while (!batch.isEmpty()) {
+                NodeId lastId = null;
+                for (NodeInfo info : batch.values()) {
+                    lastId = info.getId();
+                    if (callback != null) {
+                        callback.beforeScanning(null);
+                    }
+                    if (info.hasBlobsInDataStore()) {
+                        try {
+                            NodeState state = pm.load(info.getId());
+                            Set<Name> propertyNames = state.getPropertyNames();
+                            for (Name name : propertyNames) {
+                                PropertyId pid = new PropertyId(info.getId(), name);
+                                PropertyState ps = pm.load(pid);
+                                if (ps.getType() == PropertyType.BINARY) {
+                                    for (InternalValue v : ps.getValues()) {
+                                        // getLength will update the last modified date
+                                        // if the persistence manager scan is running
+                                        v.getLength();
+                                    }
+                                }
+                        } catch (NoSuchItemStateException ignored) {
+                            // the node may have been deleted in the meantime
-                } catch (NoSuchItemStateException e) {
-                    // the node may have been deleted or moved in the meantime
-                    // ignore it
+                batch = pm.getAllNodeInfos(lastId, NODESATONCE);
+        NodeInfo.clearPool();
-    /**
-     * @deprecated use sweep().
-     */
-    public int deleteUnused() throws RepositoryException {
-        return sweep();
-    }
-

INS26 INS26 INS40 INS40 INS23 INS29 INS83 INS83 INS83 INS39 INS59 UPD65 MOV65 INS42 INS32 INS21 UPD66 INS42 UPD42 MOV42 INS45 INS27 INS8 INS32 INS34 INS34 INS60 INS61 INS42 INS42 INS74 INS59 INS38 MOV8 INS43 INS43 INS43 INS42 INS32 INS32 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 MOV43 INS59 INS7 INS42 INS33 INS43 UPD42 UPD42 UPD42 INS21 INS25 INS42 INS32 INS42 INS7 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV54 INS42 INS42 UPD42 INS32 MOV43 UPD42 MOV42 INS42 MOV43 INS32 INS42 INS42 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL33 DEL34 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL32 DEL41 DEL8 DEL31