- Removed JCRQL implementation
- Added proper QName support to search
- redesigned parsing and formating of queries (better separation of abstract query tree and concrete syntax)
- Some improvements in SQL: colon is now supported in identifier without having to use double quotes, LIKE now supports escaping

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@125778 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.QName;
+
-import java.util.Iterator;
-     * The list of nodeType constraints. Might be null
-     * @todo not used anymore, node types can be specified in any predicate.
-     */
-    private List nodeTypes = new ArrayList();
-
-    /**
-     * The list of property names to select. Might be null
+     * The list of property names (as {@link org.apache.jackrabbit.core.QName}s
+     * to select.
-    public void addSelectProperty(String propName) {
+    public void addSelectProperty(QName propName) {
-    public String[] getSelectProperties() {
-        return (String[]) selectProperties.toArray(new String[selectProperties.size()]);
+    public QName[] getSelectProperties() {
+        return (QName[]) selectProperties.toArray(new QName[selectProperties.size()]);
-    //--------------------------------------------------------------------------
-
-    /**
-     * Returns a string representation of this query node including its sub-nodes.
-     * The returned string is formatted in JCRQL syntax.
-     *
-     * @return a string representation of this query node including its sub-nodes.
-     */
-    public String toJCRQLString() {
-        StringBuffer sb = new StringBuffer("SELECT *");
-        String comma = "";
-        if (nodeTypes.size() > 0) {
-            sb.append(" FROM");
-        }
-        for (Iterator it = nodeTypes.iterator(); it.hasNext();) {
-            NodeTypeQueryNode nodeType = (NodeTypeQueryNode) it.next();
-            sb.append(comma);
-            sb.append(" ").append(nodeType.getValue());
-            comma = ",";
-        }
-        if (locationNode != null) {
-            sb.append(" ").append(locationNode.toJCRQLString());
-        }
-        LocationStepQueryNode[] steps = locationNode.getPathSteps();
-        QueryNode[] predicates = steps[steps.length - 1].getPredicates();
-        String and = "";
-        for (int i = 0; i < predicates.length; i++) {
-            if (i == 0) {
-                sb.append(" WHERE ");
-            }
-            sb.append(and).append(predicates[i].toJCRQLString());
-            and = " AND ";
-        }
-        return sb.toString();
-    }
-
-    /**
-     * Returns a string representation of this query node including its sub-nodes.
-     * The returned string is formatted in JCR SQL syntax.
-     *
-     * @return a string representation of this query node including its sub-nodes.
-     */
-    public String toJCRSQLString() {
-        StringBuffer sb = new StringBuffer("SELECT *");
-        sb.append(" FROM");
-        String comma = "";
-        if (nodeTypes.size() > 0) {
-            for (Iterator it = nodeTypes.iterator(); it.hasNext();) {
-                NodeTypeQueryNode nodeType = (NodeTypeQueryNode) it.next();
-                sb.append(comma);
-                sb.append(" \"").append(nodeType.getValue()).append("\"");
-                comma = ",";
-            }
-        } else {
-            sb.append(" nt:base");
-        }
-        LocationStepQueryNode[] steps = locationNode.getPathSteps();
-        QueryNode[] predicates = steps[steps.length - 1].getPredicates();
-        String and = "";
-        for (int i = 0; i < predicates.length; i++) {
-            if (i == 0) {
-                sb.append(" WHERE ");
-            }
-            sb.append(and).append(predicates[i].toJCRSQLString());
-            and = " AND ";
-        }
-
-        if (steps.length == 2
-                && steps[1].getIncludeDescendants()
-                && steps[1].getNameTest() == null) {
-            // then this query selects all paths
-        } else {
-            sb.append(" AND ").append(locationNode.toJCRSQLString());
-        }
-        return sb.toString();
-    }
-
-    /**
-     * Returns a string representation of this query node including its sub-nodes.
-     * The returned string is formatted in XPath syntax.
-     *
-     * @return a string representation of this query node including its sub-nodes.
-     */
-    public String toXPathString() {
-        return locationNode.toXPathString();
-    }

MOV26 UPD40 UPD5 UPD43 UPD43 UPD66 INS65 INS66 INS66 UPD42 UPD42 INS40 UPD5 UPD43 UPD42 UPD5 UPD43 UPD42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL24 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL24 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL24 DEL40 DEL34 DEL27 DEL42 DEL34 DEL2 DEL42 DEL32 DEL27 DEL42 DEL34 DEL2 DEL42 DEL32 DEL33 DEL27 DEL27 DEL8 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31