JCR-2718: Incorrect results from joins on multivalued properties

Improve performance by avoiding repeated walks over the index

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@986715 13f79535-47bb-0310-9956-ffa450edef68

-import static org.apache.jackrabbit.core.query.lucene.FieldNames.PROPERTIES;
-
+import java.util.HashSet;
+import java.util.Set;
-    private final Term outerTerm;
-
+    private final Map<Integer, Set<String>> valuesByOuterNodeDocument =
+        new HashMap<Integer, Set<String>>();
+
-        Term innerTerm = new Term(PROPERTIES, FieldNames.createNamedValue(
-                nsMappings.translateName(innerProperty), ""));
-        this.outerTerm = new Term(PROPERTIES, FieldNames.createNamedValue(
-                nsMappings.translateName(outerProperty), ""));
-
-        TermEnum terms = reader.terms(innerTerm);
-        do {
-            Term term = terms.term();
-            if (term == null
-                    || !term.field().equals(innerTerm.field())
-                    || !term.text().startsWith(innerTerm.text())) {
-                break;
-            }
-
-            String value = term.text().substring(innerTerm.text().length());
-            TermDocs docs = reader.termDocs(terms.term());
+        String innerName = nsMappings.translateName(innerProperty);
+        for (Map.Entry<Term, String> entry : getPropertyTerms(innerName)) {
+            String value = entry.getValue();
+            TermDocs docs = reader.termDocs(entry.getKey());
-        } while (terms.next());
+        }
+
+        // Build the valuesByOuterNodeDocument map for efficient lookup in
+        // the getMatchingScoreNodes() method
+        String outerName = nsMappings.translateName(outerProperty);
+        for (Map.Entry<Term, String> entry : getPropertyTerms(outerName)) {
+            String value = entry.getValue();
+            TermDocs docs = reader.termDocs(entry.getKey());
+            while (docs.next()) {
+                Set<String> values = valuesByOuterNodeDocument.get(docs.doc());
+                if (values == null) {
+                    values = new HashSet<String>();
+                    valuesByOuterNodeDocument.put(docs.doc(), values);
+                }
+                values.add(value);
+            }
+        }
-        int document = outer.getDoc(reader);
-        TermEnum terms = reader.terms(outerTerm);
+        Set<String> values = valuesByOuterNodeDocument.get(outer.getDoc(reader));
+        if (values != null) {
+            for (String value : values) {
+                List<ScoreNode[]> rows = rowsByInnerNodeValue.get(value);
+                if (rows != null) {
+                    list.addAll(rows);
+                }
+            }
+        }
+
+        return list.toArray(new ScoreNode[list.size()][]);
+    }
+
+    private Set<Map.Entry<Term, String>> getPropertyTerms(String property)
+            throws IOException {
+        Map<Term, String> map = new HashMap<Term, String>();
+
+        Term prefix = new Term(
+                FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(property, ""));
+        TermEnum terms = reader.terms(prefix);
-                    || !term.field().equals(outerTerm.field())
-                    || !term.text().startsWith(outerTerm.text())) {
+                    || !term.field().equals(prefix.field())
+                    || !term.text().startsWith(prefix.text())) {
-
-            List<ScoreNode[]> rows = rowsByInnerNodeValue.get(
-                    terms.term().text().substring(outerTerm.text().length()));
-            if (rows != null) {
-                TermDocs docs = reader.termDocs(terms.term());
-                while (docs.next()) {
-                    if (docs.doc() == document) {
-                        list.addAll(rows);
-                        break;
-                    }
-                }
-            }
+            map.put(term, term.text().substring(prefix.text().length()));
-        return list.toArray(new ScoreNode[list.size()][]);
+        return map.entrySet();

MOV26 INS26 MOV23 UPD40 INS40 INS31 INS74 INS83 INS74 INS42 INS44 INS43 INS8 INS43 INS43 INS74 UPD42 INS14 INS60 INS70 INS60 INS70 INS25 INS43 INS74 INS43 INS42 INS42 INS60 INS60 INS60 MOV19 INS41 INS42 INS42 INS43 INS43 INS74 INS43 INS59 INS44 INS32 MOV8 INS43 INS59 INS44 INS32 INS8 INS74 INS27 INS8 INS42 INS43 INS43 INS43 INS42 INS74 INS59 MOV43 INS59 MOV43 INS59 INS32 INS42 INS42 INS43 INS43 INS74 INS42 UPD42 MOV42 MOV32 INS74 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 INS74 INS42 INS42 INS42 INS60 MOV60 INS61 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS40 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS14 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 INS59 UPD43 MOV32 INS8 INS42 INS42 INS42 INS42 MOV32 INS44 INS42 INS8 INS42 INS42 INS42 INS74 MOV43 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS40 INS42 INS42 INS42 INS32 MOV42 UPD42 UPD42 MOV42 INS60 INS25 INS21 INS43 INS42 MOV60 MOV25 INS43 INS43 INS43 INS42 INS42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS74 INS59 INS27 INS8 INS32 INS42 MOV74 MOV27 INS42 INS42 INS42 MOV32 MOV42 MOV32 UPD42 UPD42 UPD42 MOV42 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS14 INS42 INS42 MOV32 INS42 UPD42 INS74 INS43 INS43 INS42 INS42 DEL42 DEL45 DEL32 DEL14 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL45 DEL32 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL27 DEL10 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL19 DEL39 DEL42 DEL42 DEL27 DEL10 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL61 DEL8 DEL25