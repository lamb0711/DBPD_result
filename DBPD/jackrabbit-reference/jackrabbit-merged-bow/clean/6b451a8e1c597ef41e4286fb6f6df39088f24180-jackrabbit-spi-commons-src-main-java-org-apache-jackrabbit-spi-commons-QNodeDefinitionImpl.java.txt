JCR-1483: Move common node type functionality to jackrabbit-spi-commons
- replaced NodeTypeDef (jackrabbit-core) with QNodeTypeDefinition
- QNodeTypeDefinitionImpl is not immutable, hence no cloning needed anymore
- introduced QNodeTypeDefinitionBuilder
- moved constructors of Q*DefinitionImpl classes in spi2jcr to spi-commons
- fixed a bug in RepositoryServiceImpl in spi2jcr

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816551 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.conversion.NameException;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import javax.jcr.NamespaceException;
+import javax.jcr.nodetype.NodeDefinition;
+import javax.jcr.nodetype.NodeType;
+
+    private static final long serialVersionUID = -3671882394577685657L;
+
-
+    /**
+     * Creates a new node definition based on a JCR <code>NodeDefinition</code>.
+     *
+     * @param nodeDef  the node definition.
+     * @param resolver the name/path resolver of the session that provided the
+     *                 node definition
+     * @throws NameException      if <code>nodeDef</code> contains an illegal
+     *                            name.
+     * @throws NamespaceException if <code>nodeDef</code> contains a name with
+     *                            an namespace prefix that is unknown to
+     *                            <code>resolver</code>.
+     */
+    public QNodeDefinitionImpl(NodeDefinition nodeDef,
+                               NamePathResolver resolver)
+            throws NameException, NamespaceException {
+        this(nodeDef.getName().equals(NameConstants.ANY_NAME.getLocalName()) ? NameConstants.ANY_NAME : resolver.getQName(nodeDef.getName()),
+                nodeDef.getDeclaringNodeType() != null ? resolver.getQName(nodeDef.getDeclaringNodeType().getName()) : null,
+                nodeDef.isAutoCreated(), nodeDef.isMandatory(),
+                nodeDef.getOnParentVersion(), nodeDef.isProtected(),
+                nodeDef.getDefaultPrimaryType() != null ? resolver.getQName(nodeDef.getDefaultPrimaryType().getName()) : null,
+                getNodeTypeNames(nodeDef.getRequiredPrimaryTypes(), resolver),
+                nodeDef.allowsSameNameSiblings());
+    }
+
+
+
+    //-----------------------------< internal >---------------------------------
+
+    /**
+     * Returns the names of the passed node types using the namespace resolver
+     * to parse the names.
+     *
+     * @param nt       the node types
+     * @param resolver the name/path resolver of the session that provided
+     *                 <code>nt</code>.
+     * @return the names of the node types.
+     * @throws NameException      if a node type returns an illegal name.
+     * @throws NamespaceException if the name of a node type contains a prefix
+     *                            that is not known to <code>resolver</code>.
+     */
+    private static Name[] getNodeTypeNames(NodeType[] nt,
+                                           NamePathResolver resolver)
+            throws NameException, NamespaceException {
+        Name[] names = new Name[nt.length];
+        for (int i = 0; i < nt.length; i++) {
+            Name ntName = resolver.getQName(nt[i].getName());
+            names[i] = ntName;
+        }
+        return names;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS38 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS5 INS42 INS43 INS42 INS42 INS42 INS60 INS24 INS41 INS34 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS16 INS16 INS32 INS32 INS32 INS32 INS16 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS85 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS32 INS40 INS32 INS27 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS33 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS42 INS42 INS32 INS32 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS43 INS59 INS7 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS85 INS42 INS42 INS32 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS42