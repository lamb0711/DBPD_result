- Remove node id from NodeState
- Add node name and uuid to NodeState
- Remove unnecessary calls to getId()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431348 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.Path;
-        NodeId id;
-        if (uuid == null) {
-            id = idFactory.createNodeId(parent.getNodeId(), Path.create(name, 0));
-        } else {
-            id = idFactory.createNodeId(uuid);
-        }
-        NodeState nodeState = new NodeState(id, parent, null,
+        NodeState nodeState = new NodeState(name, uuid, parent, null,
-        // TODO: remove from added set of change log
+        addedStates.remove(created);
-        // TODO: remove from modified set of change log
+        modifiedStates.remove(modified);
-        // TODO: remove from deleted set of change log
+        deletedStates.remove(destroyed);
+        switch (state.getStatus()) {
+            case ItemState.STATUS_EXISTING:
+                if (previousStatus == ItemState.STATUS_EXISTING_MODIFIED) {
+                    // was modified and is now refreshed
+                    modifiedStates.remove(state);
+                } else if (previousStatus == ItemState.STATUS_EXISTING_REMOVED) {
+                    // was removed and is now refreshed
+                    deletedStates.remove(state);
+                } else if (previousStatus == ItemState.STATUS_STALE_MODIFIED) {
+                    // was modified and state and is now refreshed
+                    modifiedStates.remove(state);
+                }
+                break;
+            case ItemState.STATUS_EXISTING_MODIFIED:
+                modifiedStates.add(state);
+                break;
+            case ItemState.STATUS_EXISTING_REMOVED:
+                // check if modified earlier
+                if (previousStatus == ItemState.STATUS_EXISTING_MODIFIED) {
+                    modifiedStates.remove(state);
+                }
+                deletedStates.add(state);
+                break;
+            case ItemState.STATUS_REMOVED:
+                // remove from added
+                addedStates.remove(state);
+                break;
+            case ItemState.STATUS_STALE_DESTROYED:
+                // state is now stale. keep in modified. wait until refreshed.
+                // TODO: how is a stale destroyed state refreshed?
+                break;
+            case ItemState.STATUS_STALE_MODIFIED:
+                // state is now stale. keep in modified. wait until refreshed
+                break;
+            case ItemState.STATUS_NEW:
+                // should never happen
+                log.warn("ItemState changed status to 'new'");
+                break;
+            case ItemState.STATUS_UNDEFINED:
+                // should never happen
+                log.warn("ItemState changed status to 'undefined'");
+                break;
+            default:
+                log.warn("ItemState has invalid status: " + state.getStatus());
+        }

INS8 INS21 INS21 INS21 INS50 MOV43 INS32 INS32 INS32 INS32 INS49 INS25 INS10 INS49 INS21 INS10 INS49 INS25 INS21 INS10 INS49 INS21 INS10 INS49 INS10 INS49 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS8 INS25 INS40 INS32 INS40 INS27 INS8 INS32 INS40 INS32 INS40 INS40 INS40 INS32 INS40 INS32 INS32 MOV43 INS42 UPD42 INS42 INS40 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS40 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS27 INS32 INS42 INS40 INS21 INS27 INS8 INS32 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS40 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8