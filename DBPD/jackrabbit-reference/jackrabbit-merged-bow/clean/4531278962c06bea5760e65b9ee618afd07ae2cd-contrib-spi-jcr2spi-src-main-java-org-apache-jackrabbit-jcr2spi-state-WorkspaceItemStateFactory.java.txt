work in progress

- LazyItemIterator: fixing wrong usage in ItemManagerImpl
- LazyItemIterator: removing TODOs and workaround

- ItemStateFactory: remove unused method 
  'createPropertyState(PropertyId propertyId, ItemStateManager ism)'

- TransientItemStateFactory: slightly modify methods, adding additional
  parameters that are already known upon creation of the states and must
  not be changed later on (-> removing setters on NodeState/PropertyState)

- TransientItemStateManager:
  > rename create-methods to createNew...
  > adjust parameters according to modifications in TransientISF

- NodeState:
  > set QNodeDefinition upon creation
  > modify 'moveChildNodeEntry': additing 'newDefinition' parameter
  > remove 'setParent'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- PropertyState:
  > set QPropertyDefinition upon creation
  > 'multiValued' field is therefore redundant -> remove
  > remove 'setMultiValued'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- SetPropertyValue: 'isMultiValued()' is redundant. removed and replaced
  usage with 'getPropertyState().isMultiValued()'

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432630 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.spi.QPropertyDefinition;
+import org.apache.jackrabbit.spi.QNodeDefinition;
+import org.apache.jackrabbit.jcr2spi.WorkspaceManager;
+import org.apache.jackrabbit.jcr2spi.nodetype.EffectiveNodeType;
+import org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeConflictException;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.nodetype.NoSuchNodeTypeException;
+    private final WorkspaceManager wspManager;
-    public WorkspaceItemStateFactory(RepositoryService service, SessionInfo sessionInfo) {
+    public WorkspaceItemStateFactory(RepositoryService service, SessionInfo sessionInfo, WorkspaceManager wspManager) {
+        this.wspManager = wspManager;
-            QName ntName = info.getNodetype();
+            // retrieve definition
+            QNodeDefinition definition;
+            if (parent == null) {
+                // special case for root state
+                definition = wspManager.getNodeTypeRegistry().getRootNodeDef();
+            } else {
+                EffectiveNodeType ent = wspManager.getNodeTypeRegistry().getEffectiveNodeType(parent.getNodeTypeNames());
+                definition = ent.getApplicableNodeDefinition(info.getQName(), info.getNodetype());
+            }
-            // NOTE: unable to retrieve definitionId -> needs to be retrieved
-            // by the itemManager upon Node creation.
-            NodeState state = new NodeState(info.getQName(), uuid, parent, ntName,
-                    ItemState.STATUS_EXISTING, false, this, service.getIdFactory());
+            NodeState state = new NodeState(info.getQName(), uuid, parent, info.getNodetype(),
+                definition, ItemState.STATUS_EXISTING, false, this, service.getIdFactory());
+
-        } catch (RepositoryException e) {
-            throw new ItemStateException(e.getMessage(), e);
-        }
-    }
-
-    /**
-     * Creates the property with information retrieved from the
-     * <code>RepositoryService</code>.
-     *
-     * @inheritDoc
-     * @see ItemStateFactory#createPropertyState(PropertyId, ItemStateManager)
-     */
-    public PropertyState createPropertyState(PropertyId propertyId,
-                                             ItemStateManager ism)
-            throws NoSuchItemStateException, ItemStateException {
-        try {
-            PropertyInfo info = service.getPropertyInfo(sessionInfo, propertyId);
-            NodeState parent = (NodeState) ism.getItemState(info.getParentId());
-            return createPropertyState(info, parent);
-        } catch (PathNotFoundException e) {
-            throw new NoSuchItemStateException(e.getMessage(), e);
+        } catch (NodeTypeConflictException e) {
+            String msg = "internal error: failed to retrieve node definition.";
+            log.debug(msg);
+            throw new ItemStateException(msg, e);
+        } catch (ConstraintViolationException e) {
+            String msg = "internal error: failed to retrieve node definition.";
+            log.debug(msg);
+            throw new ItemStateException(msg, e);
+        } catch (NoSuchNodeTypeException e) {
+            String msg = "internal error: failed to retrieve node definition.";
+            log.debug(msg);
+            throw new ItemStateException(msg, e);
+
+            // retrieve property definition
+            EffectiveNodeType ent = wspManager.getNodeTypeRegistry().getEffectiveNodeType(parent.getNodeTypeNames());
+            QPropertyDefinition def = ent.getApplicablePropertyDefinition(info.getQName(), info.getType(), info.isMultiValued());
+
-            // NOTE: unable to retrieve definitionId -> needs to be retrieved
-            // by the itemManager upon Property creation.
-                    ItemState.STATUS_EXISTING, false, service.getIdFactory());
-            state.setMultiValued(info.isMultiValued());
+                def, ItemState.STATUS_EXISTING, false, service.getIdFactory());
+        } catch (NodeTypeConflictException e) {
+            String msg = "internal error: failed to retrieve property definition.";
+            log.debug(msg);
+            throw new ItemStateException(msg, e);
+        } catch (ConstraintViolationException e) {
+            String msg = "internal error: failed to retrieve property definition.";
+            log.debug(msg);
+            throw new ItemStateException(msg, e);
+        } catch (NoSuchNodeTypeException e) {
+            String msg = "internal error: failed to retrieve property definition.";
+            log.debug(msg);
+            throw new ItemStateException(msg, e);

INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS23 INS83 INS83 INS43 INS59 INS44 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS21 INS42 INS7 INS12 INS12 INS12 INS12 INS12 INS12 INS22 INS42 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS60 INS60 INS44 INS8 INS44 INS8 INS44 INS8 INS52 INS42 UPD43 INS27 INS8 INS8 MOV43 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS43 INS59 INS43 INS59 MOV43 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 UPD42 UPD42 INS42 INS33 INS21 INS60 INS21 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS7 INS43 INS59 INS7 MOV43 MOV32 UPD42 INS42 INS42 INS45 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 MOV32 MOV43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL65 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL32 DEL21