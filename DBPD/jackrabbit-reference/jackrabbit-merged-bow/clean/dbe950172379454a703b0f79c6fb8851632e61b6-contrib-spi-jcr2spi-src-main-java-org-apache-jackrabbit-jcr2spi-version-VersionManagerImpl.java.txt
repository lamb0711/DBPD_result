remove ItemStateException (and subclasses) and replace their usage with RepositoryException and subclasses respectively

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@520315 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.ItemStateException;
+import javax.jcr.ItemNotFoundException;
-        } catch (ItemStateException e) {
+        } catch (ItemNotFoundException e) {
-        try {
-            PropertyState mergeFailedState = wspState.getPropertyState(QName.JCR_MERGEFAILED);
-            QValue[] vs = mergeFailedState.getValues();
-            NodeId[] mergeFailedIds = new NodeId[vs.length - 1];
-            for (int i = 0, j = 0; i < vs.length; i++) {
-                NodeId id = workspaceManager.getIdFactory().createNodeId(vs[i].getString());
-                if (!id.equals(vId)) {
-                    mergeFailedIds[j] = id;
-                    j++;
-                }
-                // else: the version id is being solved by this call and not
-                // part of 'jcr:mergefailed' any more
+        PropertyState mergeFailedState = wspState.getPropertyState(QName.JCR_MERGEFAILED);
+        QValue[] vs = mergeFailedState.getValues();
+
+        NodeId[] mergeFailedIds = new NodeId[vs.length - 1];
+        for (int i = 0, j = 0; i < vs.length; i++) {
+            NodeId id = workspaceManager.getIdFactory().createNodeId(vs[i].getString());
+            if (!id.equals(vId)) {
+                mergeFailedIds[j] = id;
+                j++;
-
-            PropertyState predecessorState = wspState.getPropertyState(QName.JCR_PREDECESSORS);
-            vs = predecessorState.getValues();
-
-            int noOfPredecessors = (done) ? vs.length + 1 : vs.length;
-            NodeId[] predecessorIds = new NodeId[noOfPredecessors];
-
-            int i = 0;
-            while (i < vs.length) {
-                predecessorIds[i] = workspaceManager.getIdFactory().createNodeId(vs[i].getString());
-                i++;
-            }
-            if (done) {
-                predecessorIds[i] = vId;
-            }
-            Operation op = ResolveMergeConflict.create(wspState, mergeFailedIds, predecessorIds, done);
-            workspaceManager.execute(op);
-
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
+            // else: the version id is being solved by this call and not
+            // part of 'jcr:mergefailed' any more
+
+        PropertyState predecessorState = wspState.getPropertyState(QName.JCR_PREDECESSORS);
+        vs = predecessorState.getValues();
+
+        int noOfPredecessors = (done) ? vs.length + 1 : vs.length;
+        NodeId[] predecessorIds = new NodeId[noOfPredecessors];
+
+        int i = 0;
+        while (i < vs.length) {
+            predecessorIds[i] = workspaceManager.getIdFactory().createNodeId(vs[i].getString());
+            i++;
+        }
+        if (done) {
+            predecessorIds[i] = vId;
+        }
+        Operation op = ResolveMergeConflict.create(wspState, mergeFailedIds, predecessorIds, done);
+        workspaceManager.execute(op);
-        try {
-            NodeState ns = versionState.getChildNodeState(QName.JCR_FROZENNODE, Path.INDEX_DEFAULT);
-            PropertyState ps = ns.getPropertyState(QName.JCR_FROZENUUID);
-            String uniqueID = ps.getValue().toString();
+        NodeState ns = versionState.getChildNodeState(QName.JCR_FROZENNODE, Path.INDEX_DEFAULT);
+        PropertyState ps = ns.getPropertyState(QName.JCR_FROZENUUID);
+        String uniqueID = ps.getValue().toString();
-            NodeId versionableId = workspaceManager.getIdFactory().createNodeId(uniqueID);
-            return (NodeEntry) workspaceManager.getHierarchyManager().getHierarchyEntry(versionableId);
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
-        }
+        NodeId versionableId = workspaceManager.getIdFactory().createNodeId(uniqueID);
+        return (NodeEntry) workspaceManager.getHierarchyManager().getHierarchyEntry(versionableId);
-        try {
-            PropertyState ps = versionableState.getPropertyState(QName.JCR_VERSIONHISTORY);
-            String uniqueID = ps.getValue().getString();
-            NodeId vhId = workspaceManager.getIdFactory().createNodeId(uniqueID);
-            return (NodeEntry) workspaceManager.getHierarchyManager().getHierarchyEntry(vhId);
-        } catch (ItemStateException e) {
-            // should not occur
-            throw new RepositoryException(e);
-        }
+        PropertyState ps = versionableState.getPropertyState(QName.JCR_VERSIONHISTORY);
+        String uniqueID = ps.getValue().getString();
+        NodeId vhId = workspaceManager.getIdFactory().createNodeId(uniqueID);
+        return (NodeEntry) workspaceManager.getHierarchyManager().getHierarchyEntry(vhId);

MOV26 UPD40 MOV8 MOV8 MOV8 MOV60 MOV60 UPD43 UPD42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8