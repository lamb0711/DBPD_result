JCR-2715: Improved join query performance

Extend LuceneQueryFactory to handle more QOM constraints.
Simplify handling of bind variables.
Improve OperandEvaluator, including its javadocs.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1026361 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.query.ExecutableQuery;
-import org.apache.jackrabbit.core.query.PropertyTypeRegistry;
-import org.apache.jackrabbit.core.session.SessionContext;
-import org.apache.jackrabbit.spi.Name;
+import java.util.Map;
-import javax.jcr.Value;
+import javax.jcr.Value;
-import java.util.Set;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.Collections;
+import org.apache.jackrabbit.core.query.ExecutableQuery;
+import org.apache.jackrabbit.core.query.PropertyTypeRegistry;
+import org.apache.jackrabbit.core.session.SessionContext;
-    /**
-     * Set&lt;Name>, where Name is a variable name in the query statement.
-     */
-    private final Set<Name> variableNames = new HashSet<Name>();
-
-    /**
-     * Binding of variable name to value. Maps {@link Name} to {@link Value}.
-     */
-    private final Map<Name, Value> bindValues = new HashMap<Name, Value>();
+    /** Bind variables of this query */
+    private final Map<String, Value> variables;
-            PropertyTypeRegistry propReg) {
+            PropertyTypeRegistry propReg, Map<String, Value> variables) {
+        this.variables = variables;
-    public void bindValue(Name varName, Value value)
+    public void bindValue(String varName, Value value)
-        if (!variableNames.contains(varName)) {
-            throw new IllegalArgumentException("not a valid variable in this query");
+        if (variables.containsKey(varName)) {
+            variables.put(varName, value);
-            bindValues.put(varName, value);
+            throw new IllegalArgumentException(
+                    varName + " is not a valid variable in this query");
-    public Name[] getBindVariableNames() throws RepositoryException {
-        return variableNames.toArray(new Name[variableNames.size()]);
-    }
-
-    /**
-     * Adds a name to the set of variables.
-     *
-     * @param varName the name of the variable.
-     */
-    protected void addVariableName(Name varName) {
-        variableNames.add(varName);
-    }
-
-    /**
-     * @return an unmodifieable map, which contains the variable names and their
-     *         respective value.
-     */
-    protected Map<Name, Value> getBindVariableValues() {
-        return Collections.unmodifiableMap(bindValues);
+    public Map<String, Value> getBindVariables() {
+        return variables;

MOV26 MOV26 MOV26 MOV26 MOV26 UPD74 INS44 UPD74 MOV74 UPD42 UPD43 UPD43 MOV43 UPD42 UPD74 MOV74 INS42 INS21 UPD43 MOV8 UPD43 UPD66 UPD42 UPD42 UPD43 INS7 UPD42 INS32 UPD42 INS42 UPD42 INS22 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS52 INS42 UPD42 INS27 INS42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL32 DEL38 DEL45 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31