JCR-2115 new property types
JCR-1609  new Property Types

add constructor, create methods and special getters for Decimal and URI type

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@779658 13f79535-47bb-0310-9956-ffa450edef68

+                    return new QValueImpl(new BigDecimal(value));
-                    // TODO implement
-                    throw new UnsupportedOperationException("Not implemented yet, see JCR-1609: new Property Types");
+                    return new QValueImpl(URI.create(value));
-        // TODO implement
-        throw new UnsupportedOperationException("Not implemented yet, see JCR-1609: new Property Types");
+        return new QValueImpl(value);
-        // TODO implement
-        throw new UnsupportedOperationException("Not implemented yet, see JCR-1609: new Property Types");
+        return new QValueImpl(value);
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
+        protected QValueImpl(BigDecimal value) {
+            super(value);
+        }
+
+        protected QValueImpl(URI value) {
+            super(value);
+        }
+
+         * @see org.apache.jackrabbit.spi.QValue#getDecimal()
+         */
+        public BigDecimal getDecimal() throws RepositoryException {
+            if (val instanceof BigDecimal) {
+                return (BigDecimal) val;
+            } else if (val instanceof Double) {
+                return new BigDecimal((Double) val);
+            } else if (val instanceof Long) {
+                return new BigDecimal((Long) val);
+            } else if (val instanceof Calendar) {
+                return new BigDecimal(((Calendar) val).getTimeInMillis());
+            } else {
+                try {
+                    return new BigDecimal(getString());
+                } catch (NumberFormatException e) {
+                    throw new ValueFormatException("not a valid decimal string: " + getString(), e);
+                }
+            }
+        }
+
+        /**
+            } else if (val instanceof BigDecimal) {
+                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
+                cal.setTimeInMillis(((BigDecimal) val).longValue());
+                return cal;
+            } else if (val instanceof BigDecimal) {
+                return ((BigDecimal) val).doubleValue();
+            } else if (val instanceof BigDecimal) {
+                return ((BigDecimal) val).longValue();

INS31 INS31 INS31 INS41 INS41 INS83 INS42 INS44 INS8 INS83 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS14 INS14 INS43 INS42 INS46 INS43 INS42 INS46 INS65 INS42 INS42 INS25 UPD43 MOV43 INS42 UPD43 MOV43 INS42 INS42 INS42 INS42 INS42 INS68 INS62 INS8 INS25 INS25 INS41 INS41 UPD42 UPD42 INS40 INS42 INS42 INS43 INS41 INS62 INS8 INS25 INS62 INS8 MOV25 INS25 INS14 INS14 INS42 INS11 INS42 INS43 INS41 INS62 INS8 INS25 INS25 INS42 INS43 INS41 INS62 INS8 MOV25 INS43 INS14 INS43 INS32 INS43 INS42 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS8 INS62 INS8 MOV8 INS42 INS32 INS42 INS43 INS41 INS42 UPD43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS11 INS42 INS14 INS42 INS43 INS41 INS54 INS42 INS43 INS60 INS21 INS41 INS36 INS42 INS42 INS32 UPD42 INS42 INS43 INS42 INS43 INS11 INS42 INS14 INS8 INS12 INS42 INS43 INS59 INS32 INS42 INS11 INS36 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS41 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS11 INS42 INS42 INS36 INS42 INS14 INS43 INS42 INS53 INS42 INS42 INS32 INS36 INS42 INS42 INS43 INS42 INS11 INS43 INS32 INS42 INS14 INS42 INS42 INS45 INS11 INS42 INS43 INS42 INS42 INS42 INS43 INS27 INS42 INS43 INS42 INS42 INS42 INS45 INS32 INS42 INS42 DEL45 DEL14 DEL53 DEL45 DEL14 DEL53 DEL45 DEL14 DEL53 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25