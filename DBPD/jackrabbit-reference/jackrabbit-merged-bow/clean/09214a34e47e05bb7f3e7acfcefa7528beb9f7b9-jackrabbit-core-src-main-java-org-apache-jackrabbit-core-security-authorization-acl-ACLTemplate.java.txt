JCR-2397 - AccessControlEntries should be orderable

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@881752 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.LinkedHashMap;
- * Implementation of the {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlList} interface that
- * is detached from the effective access control content. Consequently, any
- * modifications applied to this ACL only take effect, if the policy gets
+ * Implementation of the
+ * {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlList}
+ * interface that is detached from the effective access control content.
+ * Consequently, any modifications applied to this ACL only take effect, if
+ * the policy gets
-     * Map containing the entries of this ACL Template using the principal
-     * name as key. The value represents a List containing maximal one grant
-     * and one deny ACE per principal.
+     * List containing the entries of this ACL Template with maximal one
+     * grant and one deny ACE per principal.
-    private final Map<String, List<Entry>> entries = new LinkedHashMap<String, List<Entry>>();
+    private final List<Entry> entries = new ArrayList<Entry>();
-    private List<? extends AccessControlEntry> internalGetEntries() {
-        List<Entry> l = new ArrayList<Entry>();
-        for (List<Entry> o : entries.values()) {
-            l.addAll(o);
-        }
-        return l;
-    }
-
-        if (entries.containsKey(principalName)) {
-            return entries.get(principalName);
-        } else {
-            return new ArrayList<Entry>(2);
+        List entriesPerPrincipal = new ArrayList(2);
+        for (Entry entry : entries) {
+            if (principalName.equals(entry.getPrincipal().getName())) {
+                entriesPerPrincipal.add(entry);
+            }
+        return entriesPerPrincipal;
-        List<Entry> l = internalGetEntries(principal);
-        if (l.isEmpty()) {
-            // simple case: just add the new entry
-            l.add(entry);
-            entries.put(principal.getName(), l);
+        List<Entry> entriesPerPrincipal = internalGetEntries(principal);
+        if (entriesPerPrincipal.isEmpty()) {
+            // simple case: just add the new entry at the end of the list.
+            entries.add(entry);
-            if (l.contains(entry)) {
+            if (entriesPerPrincipal.contains(entry)) {
+            int updateIndex = -1;
-            Entry[] entries = l.toArray(new Entry[l.size()]);
-            for (int i = 0; i < entries.length; i++) {
-                if (entry.isAllow() == entries[i].isAllow()) {
-                    int existingPrivs = entries[i].getPrivilegeBits();
+
+            for (Entry e : entriesPerPrincipal) {
+                if (entry.isAllow() == e.isAllow()) {
+                    int existingPrivs = e.getPrivilegeBits();
+                    // remember the index of the existing entry to be updated later on.
+                    updateIndex = entries.indexOf(e);
+
-                    l.remove(i);
-                    int mergedBits = entries[i].getPrivilegeBits() | entry.getPrivilegeBits();
+                    entries.remove(e);
+                    int mergedBits = e.getPrivilegeBits() | entry.getPrivilegeBits();
-                    complementEntry = entries[i];
+                    complementEntry = e;
+
+
-                    l.remove(complementEntry);
+                    // remove the complement entry as the new entry covers
+                    // all privileges granted by the existing entry.
+                    entries.remove(complementEntry);
+                    updateIndex--;
+                    
-                    l.remove(complementEntry);
-                    // omit validation check
+                    // replace the existing entry having the privileges adjusted
+                    int index = entries.indexOf(complementEntry);
+                    entries.remove(complementEntry);
-                    l.add(tmpl);
+                    entries.add(index, tmpl);
-            // finally add the new entry at the end.
-            l.add(entry);
+            // finally update the existing entry or add the new entry passed
+            // to this method at the end.
+            if (updateIndex < 0) {
+                entries.add(entry);
+            } else {
+                entries.add(updateIndex, entry);
+            }
+    /**
+     * @see org.apache.jackrabbit.core.security.authorization.AbstractACLTemplate#getEntries()
+     */
+    protected List<? extends AccessControlEntry> getEntries() {
+        return entries;
+    }
+
-        List<? extends AccessControlEntry> l = internalGetEntries();
+        List<? extends AccessControlEntry> l = getEntries();
-        List<Entry> l = internalGetEntries(ace.getPrincipal());
-        if (l.remove(ace)) {
-            if (l.isEmpty()) {
-                entries.remove(ace.getPrincipal().getName());
-            }
+        if (entries.contains(ace)) {
+            entries.remove(ace);
-        return internalGetEntries().size();
+        return getEntries().size();

MOV31 MOV74 MOV59 MOV74 MOV44 INS29 INS83 MOV74 INS42 INS8 UPD66 UPD66 UPD66 UPD66 UPD42 MOV60 INS60 INS70 INS65 MOV41 UPD66 UPD66 INS43 INS59 INS44 INS42 INS8 UPD42 INS68 INS42 MOV8 MOV42 INS42 INS14 INS43 UPD42 MOV42 INS25 UPD42 UPD42 INS60 INS70 INS25 INS40 INS42 UPD42 UPD42 MOV43 INS34 MOV42 INS32 INS8 INS39 INS59 INS44 INS42 MOV8 INS27 INS8 INS8 UPD42 UPD42 INS42 INS42 INS32 MOV21 UPD42 UPD42 UPD42 MOV42 INS38 MOV43 INS42 UPD42 MOV42 INS34 INS21 MOV21 MOV42 INS32 INS42 INS34 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS21 INS21 INS42 INS42 INS42 UPD42 INS42 INS42 INS7 INS37 INS60 INS42 INS32 UPD42 UPD42 INS42 UPD42 INS42 INS39 INS59 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL66 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL43 DEL43 DEL74 DEL44 DEL32 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL59 DEL60 DEL39 DEL34 DEL59 DEL58 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL8 DEL42 DEL43 DEL74 DEL34 DEL14 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL25 DEL8