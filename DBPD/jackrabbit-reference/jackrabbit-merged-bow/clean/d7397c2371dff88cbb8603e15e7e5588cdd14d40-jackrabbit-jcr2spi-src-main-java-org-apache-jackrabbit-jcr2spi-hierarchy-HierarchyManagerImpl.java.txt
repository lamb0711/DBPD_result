JCR-1819 : Add specific deep loading of Nodes and Properties
JCR-1843 : wrong status change upon conflicting removal (CacheBehaviour.OBSERVATION)
JCR-1293 : ReorderReferenceableSNSTest failure
JCR-1811 : ExportSysViewTest#testExportSysView_handler_session_saveBinary_occasionally failing


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@709211 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.ItemState;
+import org.apache.jackrabbit.jcr2spi.state.NodeState;
+import org.apache.jackrabbit.jcr2spi.state.PropertyState;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.ItemId;
+import org.apache.jackrabbit.spi.ItemId;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.PropertyId;
+import javax.jcr.ItemNotFoundException;
-import javax.jcr.ItemNotFoundException;
-            NodeEntry nEntry = uniqueIdResolver.lookup(idFactory.createNodeId(uniqueID));
+            NodeEntry nEntry = uniqueIdResolver.lookup(uniqueID);
-     * @see HierarchyManager#getHierarchyEntry(ItemId)
+     * @see HierarchyManager#getNodeEntry(NodeId)
-    public HierarchyEntry getHierarchyEntry(ItemId itemId) throws ItemNotFoundException, RepositoryException {
-        String uniqueID = itemId.getUniqueID();
+    public NodeEntry getNodeEntry(NodeId nodeId)
+            throws ItemNotFoundException, RepositoryException {
+        String uniqueID = nodeId.getUniqueID();
-            return getHierarchyEntry(itemId.getPath());
+            return getNodeEntry(nodeId.getPath());
-            if (itemId.getPath() == null) {
-                NodeEntry nEntry = uniqueIdResolver.resolve((NodeId) itemId, rootEntry);
+            if (nodeId.getPath() == null) {
+                NodeEntry nEntry = uniqueIdResolver.resolve(nodeId, rootEntry);
-                return nEntry.getDeepEntry(itemId.getPath());
+                return nEntry.getDeepNodeEntry(nodeId.getPath());
-     * @see HierarchyManager#getHierarchyEntry(Path)
+     * @see HierarchyManager#getNodeEntry(Path)
-    public HierarchyEntry getHierarchyEntry(Path qPath) throws PathNotFoundException, RepositoryException {
+    public NodeEntry getNodeEntry(Path qPath) throws PathNotFoundException, RepositoryException {
-
-
-        return rootEntry.getDeepEntry(qPath);
+        return rootEntry.getDeepNodeEntry(qPath);
-     * @see HierarchyManager#getItemState(Path)
+     * @see HierarchyManager#getPropertyEntry(PropertyId)
-    public ItemState getItemState(Path qPath) throws PathNotFoundException, RepositoryException {
-        HierarchyEntry entry = getHierarchyEntry(qPath);
+    public PropertyEntry getPropertyEntry(PropertyId propertyId)
+            throws ItemNotFoundException, RepositoryException {
+        String uniqueID = propertyId.getUniqueID();
+        if (uniqueID == null) {
+            return getPropertyEntry(propertyId.getPath());
+        } else {
+            if (propertyId.getPath() == null) {
+                // a property id always contains a Path part.
+                throw new ItemNotFoundException();
+            } else {
+                NodeEntry nEntry = uniqueIdResolver.resolve(idFactory.createNodeId(uniqueID), rootEntry);
+                return nEntry.getDeepPropertyEntry(propertyId.getPath());
+            }
+        }
+    }
+
+    /**
+     * @see HierarchyManager#getPropertyEntry(Path)
+     */
+    public PropertyEntry getPropertyEntry(Path qPath)
+            throws PathNotFoundException, RepositoryException {
+        // shortcut
+        if (qPath.denotesRoot()) {
+            throw new PathNotFoundException("The root path never points to a Property.");
+        }
+        if (!qPath.isCanonical()) {
+            String msg = "Path is not canonical";
+            log.debug(msg);
+            throw new RepositoryException(msg);
+        }
+        return getRootEntry().getDeepPropertyEntry(qPath);
+    }
+
+    /**
+     * @see HierarchyManager#getNodeState(Path)
+     */
+    public NodeState getNodeState(Path qPath) throws PathNotFoundException, RepositoryException {
+        NodeEntry entry = getNodeEntry(qPath);
-            ItemState state = entry.getItemState();
+            NodeState state = entry.getNodeState();
+            if (state.isValid()) {
+                return state;
+            } else {
+                throw new PathNotFoundException();
+            }
+        } catch (ItemNotFoundException e) {
+            throw new PathNotFoundException(e);
+        }
+    }
+
+    /**
+     * @see HierarchyManager#getPropertyState(Path)
+     */
+    public PropertyState getPropertyState(Path qPath) throws PathNotFoundException, RepositoryException {
+        PropertyEntry entry = getPropertyEntry(qPath);
+        try {
+            PropertyState state = entry.getPropertyState();

MOV26 MOV26 MOV26 INS26 INS26 UPD40 INS40 INS40 INS31 INS31 INS31 UPD43 UPD42 UPD43 UPD42 INS29 INS83 INS43 INS42 INS44 INS43 MOV43 INS8 MOV29 INS83 INS43 INS42 MOV44 MOV43 INS43 INS8 INS29 UPD43 UPD42 INS44 INS43 INS43 INS29 INS83 INS43 INS42 INS44 INS43 INS43 INS8 UPD42 MOV43 INS42 UPD42 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS42 INS42 INS25 INS25 INS41 INS65 UPD42 INS43 INS42 INS42 INS42 INS65 INS42 INS43 INS42 INS42 INS42 INS60 INS54 INS68 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS8 INS38 INS8 INS32 INS68 INS42 UPD43 INS68 INS42 INS43 INS59 INS8 INS12 UPD42 UPD42 UPD42 INS42 INS42 INS69 INS42 INS42 INS32 INS42 INS33 INS41 INS25 UPD42 INS42 INS42 INS53 INS32 INS60 INS21 INS53 INS32 INS42 INS42 INS42 INS42 INS69 UPD42 INS42 INS42 INS69 INS42 INS42 INS32 INS60 INS25 INS44 INS8 UPD43 UPD42 INS43 INS42 INS42 INS32 INS27 INS8 INS8 INS14 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS43 UPD42 UPD43 INS43 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS43 INS42 INS53 UPD42 UPD42 INS42 INS42 INS32 INS32 INS33 INS53 INS60 INS41 INS43 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS41 INS53 INS42 INS14 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS14 INS43 INS59 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS14 INS43 INS42 UPD42 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL11