JCR-2120: java.lang.Iterable support for RangeIterators

Use a PropertyIterable adapter for PropertyIterators

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@776691 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.iterator.PropertyIterable;
-     * Returns the properties of the given node as an {@link Iterable}
-     * for use in a Java 5 for-each loop. The return value encapsulates
-     * the {@link Node#getProperties()} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getProperties()} on the given node and returns the
+     * resulting {@link NodeIterator} as an {@link Iterable<Node>} instance
+     * for use in a Java 5 for-each loop.
+     * @see PropertyIterable
+     * @throws RepositoryException
+     *         if the {@link Node#getProperties()} call fails
-    public static Iterable<Property> getProperties(final Node node) {
-        return new Iterable<Property>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Property> iterator() {
-                try {
-                    return node.getProperties();
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access properties of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Property> getProperties(Node node)
+            throws RepositoryException {
+        return new PropertyIterable(node.getProperties());
-     * Returns matching properties of the given node as an {@link Iterable}
-     * for use in a Java 5 for-each loop. The return value encapsulates
-     * the {@link Node#getProperties(String)} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getProperties(String)} on the given node with the
+     * given name pattern and returns the resulting {@link PropertyIterator}
+     * as an {@link Iterable<Property>} instance for use in a Java 5
+     * for-each loop.
+     * @see PropertyIterable
+     * @throws RepositoryException
+     *         if the {@link Node#getProperties(String)} call fails
-    public static Iterable<Property> getProperties(
-            final Node node, final String pattern) {
-        return new Iterable<Property>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Property> iterator() {
-                try {
-                    return node.getProperties(pattern);
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access properties of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Property> getProperties(Node node, String pattern)
+            throws RepositoryException {
+        return new PropertyIterable(node.getProperties(pattern));
-     * Returns matching properties of the given node as an {@link Iterable}
-     * for use in a Java 5 for-each loop. The return value encapsulates
-     * the {@link Node#getProperty(String[])} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getProperty(String[])} on the given node with the
+     * given name globs and returns the resulting {@link PropertyIterator}
+     * as an {@link Iterable<Property>} instance for use in a Java 5
+     * for-each loop.
+     * @see PropertyIterable
-     * @param globs property name globs
+     * @param pattern property name globs
+     * @throws RepositoryException
+     *         if the {@link Node#getProperty(String[])} call fails
-    public static Iterable<Property> getProperties(
-            final Node node, final String[] globs) {
-        return new Iterable<Property>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Property> iterator() {
-                try {
-                    // TODO: method name will be changed in JCR 2.0
-                    return node.getProperty(globs);
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access properties of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Property> getProperties(Node node, String[] globs)
+            throws RepositoryException {
+        return new PropertyIterable(node.getProperty(globs));
-     * Returns the references that point to the given node as an
-     * {@link Iterable} for use in a Java 5 for-each loop. The return value
-     * encapsulates the {@link Node#getReferences()} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getReferences()} on the given node and returns the
+     * resulting {@link PropertyIterator} as an {@link Iterable<Property>}
+     * instance for use in a Java 5 for-each loop.
+     * @see PropertyIterable
+     * @throws RepositoryException
+     *         if the {@link Node#getReferences()} call fails
-    public static Iterable<Property> getReferences(final Node node) {
-        return new Iterable<Property>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Property> iterator() {
-                try {
-                    return node.getReferences();
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access references of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Property> getReferences(Node node)
+            throws RepositoryException {
+        return new PropertyIterable(node.getReferences());
-     * Returns specifically named references that point to the given node as
-     * an {@link Iterable} for use in a Java 5 for-each loop. The return value
-     * encapsulates the {@link Node#getReferences(String)} method call.
-     * Potential {@link RepositoryException}s are converted to
-     * {@link RuntimeException}s.
+     * Calls {@link Node#getReferences(String)} on the given node and returns
+     * the resulting {@link PropertyIterator} as an {@link Iterable<Property>}
+     * instance for use in a Java 5 for-each loop.
+     * @see PropertyIterable
+     * @throws RepositoryException
+     *         if the {@link Node#getReferences(String)} call fails
-    public static Iterable<Property> getReferences(
-            final Node node, final String name) {
-        return new Iterable<Property>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Property> iterator() {
-                try {
-                    return node.getReferences(name);
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access references of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Property> getReferences(Node node, String name)
+            throws RepositoryException {
+        return new PropertyIterable(node.getReferences(name));
-     * Returns the weak references that point to the given node as an
-     * {@link Iterable} for use in a Java 5 for-each loop. The return value
-     * encapsulates the {@link Node#getWeakReferences()} method call.
-     * Potential {@link RepositoryException}s are converted to
-     * {@link RuntimeException}s.
+     * Calls {@link Node#getWeakReferences()} on the given node and returns the
+     * resulting {@link PropertyIterator} as an {@link Iterable<Property>}
+     * instance for use in a Java 5 for-each loop.
+     * @see PropertyIterable
+     * @throws RepositoryException
+     *         if the {@link Node#getWeakReferences()} call fails
-    public static Iterable<Property> getWeakReferences(final Node node) {
-        return new Iterable<Property>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Property> iterator() {
-                try {
-                    return node.getWeakReferences();
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access references of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Property> getWeakReferences(Node node)
+            throws RepositoryException {
+        return new PropertyIterable(node.getWeakReferences());
-     * Returns specifically named weak references that point to the given node
-     * as an {@link Iterable} for use in a Java 5 for-each loop. The return
-     * value encapsulates the {@link Node#getWeakReferences(String)} method
-     * call. Potential {@link RepositoryException}s are converted to
-     * {@link RuntimeException}s.
+     * Calls {@link Node#getReferences(String)} on the given node and returns
+     * the resulting {@link PropertyIterator} as an {@link Iterable<Property>}
+     * instance for use in a Java 5 for-each loop.
+     * @see PropertyIterable
+     * @throws RepositoryException
+     *         if the {@link Node#getWeakReferences(String)} call fails
-    public static Iterable<Property> getWeakReferences(
-            final Node node, final String name) {
-        return new Iterable<Property>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Property> iterator() {
-                try {
-                    return node.getWeakReferences(name);
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access references of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Property> getWeakReferences(Node node, String name)
+            throws RepositoryException {
+        return new PropertyIterable(node.getWeakReferences(name));

INS26 INS40 INS31 INS31 MOV43 MOV8 MOV65 MOV43 MOV8 MOV65 INS44 MOV43 MOV8 MOV29 MOV83 MOV83 MOV74 MOV42 MOV44 MOV43 MOV8 INS29 MOV83 MOV83 MOV74 MOV42 MOV44 MOV44 MOV43 MOV8 MOV44 MOV43 MOV8 MOV44 MOV44 MOV43 MOV8 INS65 INS65 INS65 INS65 UPD65 MOV65 INS65 INS65 UPD65 MOV65 MOV43 UPD42 MOV42 INS65 INS65 INS65 INS65 MOV65 MOV65 MOV65 INS65 INS65 INS65 INS65 INS65 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS42 INS42 INS66 MOV65 INS66 INS14 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS42 MOV42 UPD66 UPD66 INS14 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS42 UPD42 MOV42 UPD66 UPD66 INS14 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS66 MOV65 INS66 INS14 INS66 INS65 UPD66 MOV66 UPD66 MOV66 MOV65 UPD66 MOV66 INS65 UPD66 MOV66 UPD42 MOV42 UPD42 MOV42 INS66 MOV65 INS66 INS14 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS66 MOV65 INS66 INS14 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS66 MOV65 INS66 INS14 INS68 UPD42 INS66 INS43 MOV32 INS68 INS42 INS66 INS43 MOV32 INS68 INS42 INS66 INS43 MOV32 INS68 UPD42 INS66 INS43 MOV32 INS68 UPD42 UPD66 MOV66 INS43 MOV32 INS68 UPD42 INS66 INS43 MOV32 INS68 UPD42 INS66 INS43 MOV32 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS43 INS5 INS43 INS43 INS42 INS43 INS85 UPD42 MOV42 INS42 INS42 DEL42 DEL66 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL83 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL42 DEL66 DEL42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL42 DEL66 DEL66 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL66 DEL42 DEL66 DEL66 DEL42 DEL83 DEL83 DEL83 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8