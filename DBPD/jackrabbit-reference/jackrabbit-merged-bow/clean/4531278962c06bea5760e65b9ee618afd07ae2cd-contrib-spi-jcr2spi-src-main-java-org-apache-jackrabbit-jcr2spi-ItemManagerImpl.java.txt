work in progress

- LazyItemIterator: fixing wrong usage in ItemManagerImpl
- LazyItemIterator: removing TODOs and workaround

- ItemStateFactory: remove unused method 
  'createPropertyState(PropertyId propertyId, ItemStateManager ism)'

- TransientItemStateFactory: slightly modify methods, adding additional
  parameters that are already known upon creation of the states and must
  not be changed later on (-> removing setters on NodeState/PropertyState)

- TransientItemStateManager:
  > rename create-methods to createNew...
  > adjust parameters according to modifications in TransientISF

- NodeState:
  > set QNodeDefinition upon creation
  > modify 'moveChildNodeEntry': additing 'newDefinition' parameter
  > remove 'setParent'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- PropertyState:
  > set QPropertyDefinition upon creation
  > 'multiValued' field is therefore redundant -> remove
  > remove 'setMultiValued'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- SetPropertyValue: 'isMultiValued()' is redundant. removed and replaced
  usage with 'getPropertyState().isMultiValued()'

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432630 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.ArrayList;
+import java.util.List;
-        return new LazyItemIterator(this, parentState.getChildNodeEntries());
+        Collection nodeEntries = parentState.getChildNodeEntries();
+        List childStates = new ArrayList(nodeEntries.size());
+        for (Iterator it = nodeEntries.iterator(); it.hasNext();) {
+            try {
+                childStates.add(((ChildNodeEntry) it.next()).getNodeState());
+            } catch (ItemStateException e) {
+                // should not occur
+                throw new RepositoryException(e);
+            }
+        }
+        return new LazyItemIterator(this, childStates);
-        return new LazyItemIterator(this, parentState.getPropertyEntries());
+        Collection propEntries = parentState.getPropertyEntries();
+        List childStates = new ArrayList(propEntries.size());
+        for (Iterator it = propEntries.iterator(); it.hasNext();) {
+            try {
+                childStates.add(((ChildPropertyEntry)it.next()).getPropertyState());
+            } catch (ItemStateException e) {
+                // should not occur
+                throw new RepositoryException(e);
+            }
+        }
+        return new LazyItemIterator(this, childStates);
-        QNodeDefinition qnd = state.getDefinition(session.getNodeTypeRegistry());
+        QNodeDefinition qnd = state.getDefinition();
-        QPropertyDefinition qpd = state.getDefinition(session.getNodeTypeRegistry());
+        QPropertyDefinition qpd = state.getDefinition();

INS26 INS26 INS26 INS40 INS40 INS40 INS60 INS60 INS24 INS60 INS60 INS24 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS42 INS42 MOV32 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS54 INS42 INS42 INS42 MOV32 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS54 INS42 INS43 INS32 INS42 INS42 INS32 INS8 INS12 INS43 INS32 INS42 INS42 INS32 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS36 INS42 INS43 INS42 INS36 INS42 INS43 INS42 INS11 INS42 INS11 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32