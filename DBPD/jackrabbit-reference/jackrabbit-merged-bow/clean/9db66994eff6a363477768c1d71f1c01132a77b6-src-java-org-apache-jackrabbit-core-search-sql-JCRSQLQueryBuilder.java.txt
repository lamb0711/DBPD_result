Changed semantics of SQL operators: <, >, <=, >=, <>, = to general comparison.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159585 13f79535-47bb-0310-9956-ffa450edef68

-        QueryNode predicateNode = null;
+        QueryNode predicateNode;
-            final QName[] tmp = new QName[1];
+            final QName[] tmp = new QName[2];
+            final ASTLiteral[] value = new ASTLiteral[1];
-                    // only assign first identifier
-                    tmp[0] = (tmp[0] == null) ? node.getName() : tmp[0];
+                    if (tmp[0] == null) {
+                        tmp[0] = node.getName();
+                    } else if (tmp[1] == null) {
+                        tmp[1] = node.getName();
+                    }
+                    return data;
+                }
+
+                public Object visit(ASTLiteral node, Object data) {
+                    value[0] = node;
-                if (node.children[1] instanceof ASTIdentifier) {
+                if (tmp[1] != null) {
-                    createPathQuery(((ASTLiteral) node.children[1]).getValue(), parent.getType());
+                    createPathQuery(value[0].getValue(), parent.getType());
-                        identifier, QueryConstants.OPERATION_GE_VALUE, (ASTLiteral) node.children[1]);
+                        identifier, QueryConstants.OPERATION_GE_GENERAL, (ASTLiteral) node.children[1]);
-                        identifier, QueryConstants.OPERATION_LE_VALUE, (ASTLiteral) node.children[2]);
+                        identifier, QueryConstants.OPERATION_LE_GENERAL, (ASTLiteral) node.children[2]);
-            } else if (type == QueryConstants.OPERATION_EQ_VALUE) {
-                if (node.children[1] instanceof ASTIdentifier) {
-                    // simply ignore, this is a join of a mixin node type
-                } else {
-                    predicateNode = createRelationQueryNode(parent,
-                            identifier, type, (ASTLiteral) node.children[1]);
-                }
-            } else if (type == QueryConstants.OPERATION_GE_VALUE
-                    || type == QueryConstants.OPERATION_GT_VALUE
-                    || type == QueryConstants.OPERATION_LE_VALUE
-                    || type == QueryConstants.OPERATION_LT_VALUE
-                    || type == QueryConstants.OPERATION_NE_VALUE) {
+            } else if (type == QueryConstants.OPERATION_GE_GENERAL
+                    || type == QueryConstants.OPERATION_GT_GENERAL
+                    || type == QueryConstants.OPERATION_LE_GENERAL
+                    || type == QueryConstants.OPERATION_LT_GENERAL
+                    || type == QueryConstants.OPERATION_NE_GENERAL
+                    || type == QueryConstants.OPERATION_EQ_GENERAL) {
-                        identifier, type, (ASTLiteral) node.children[1]);
-            } else if (type == QueryConstants.OPERATION_EQ_GENERAL
-                    || type == QueryConstants.OPERATION_NE_GENERAL) {
-                predicateNode = createRelationQueryNode(parent,
-                        identifier, type, (ASTLiteral) node.children[0]);
+                        identifier, type, value[0]);
-                ASTLiteral pattern = (ASTLiteral) node.children[1];
+                ASTLiteral pattern = value[0];

INS60 INS25 MOV25 INS83 INS5 INS59 MOV32 MOV8 MOV27 MOV8 INS43 INS85 INS42 INS3 MOV41 INS27 UPD34 UPD42 MOV42 INS5 INS34 INS27 INS27 MOV27 INS43 INS85 INS31 INS2 INS33 INS27 MOV27 MOV42 INS83 INS43 INS42 INS44 INS44 INS8 INS42 MOV34 INS32 UPD40 MOV11 UPD40 INS27 INS27 INS25 INS42 MOV43 INS42 INS43 INS42 INS21 INS41 UPD42 MOV42 INS32 MOV32 MOV43 INS27 INS27 INS42 INS40 INS2 INS2 MOV27 INS8 INS25 INS42 INS7 INS42 INS2 INS42 MOV40 INS27 INS27 INS42 INS40 INS42 MOV34 INS42 UPD34 MOV34 MOV21 INS27 INS8 INS2 INS42 INS42 INS34 INS42 INS40 INS42 INS40 INS2 INS33 INS21 INS42 INS34 MOV32 INS42 INS34 INS7 INS2 INS32 INS42 INS34 INS42 INS42 DEL33 DEL36 DEL42 DEL34 DEL2 DEL16 DEL40 DEL2 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL40 DEL34 DEL2 DEL11 DEL32 DEL7 DEL21 DEL8 DEL27 DEL40 DEL2 DEL11 DEL42 DEL43 DEL40 DEL2 DEL11 DEL40 DEL34 DEL2 DEL43 DEL62 DEL8 DEL42 DEL43 DEL40 DEL34 DEL2 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL40 DEL27 DEL25 DEL25