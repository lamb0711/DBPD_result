JCR-2670: Optimize ReadOnlyIndexReader.read(int[] docs, int[] freqs)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@959982 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.index.TermDocs;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.TermPositions;
-
-import java.util.BitSet;
+import java.util.BitSet;
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermDocs;
+import org.apache.lucene.index.TermPositions;
-        public boolean next() throws IOException {
-            boolean hasNext = super.next();
-            while (hasNext && deleted.get(super.doc())) {
-                hasNext = super.next();
+        public final boolean next() throws IOException {
+            boolean hasNext = in.next();
+            while (hasNext && deleted.get(in.doc())) {
+                hasNext = in.next();
-        public int read(int[] docs, int[] freqs) throws IOException {
-            int count;
-            for (count = 0; count < docs.length && next(); count++) {
-                docs[count] = doc();
-                freqs[count] = freq();
+        public final int read(int[] docs, int[] freqs) throws IOException {
+            for (;;) {
+                int num = in.read(docs, freqs);
+                if (num == 0) {
+                    // no more docs
+                    return 0;
+                }
+                // need to check for deleted docs
+                int numDeleted = 0;
+                for (int i = 0; i < num; i++) {
+                    if (deleted.get(docs[i])) {
+                        numDeleted++;
+                        continue;
+                    }
+                    // check if we need to shift
+                    if (numDeleted > 0) {
+                        docs[i - numDeleted] = docs[i];
+                        freqs[i - numDeleted] = freqs[i];
+                    }
+                }
+                if (num != numDeleted) {
+                    return num - numDeleted;
+                }
-            return count;
-        public boolean skipTo(int i) throws IOException {
-            boolean exists = super.skipTo(i);
+        public final boolean skipTo(int i) throws IOException {
+            boolean exists = in.skipTo(i);

MOV26 MOV26 MOV26 INS83 INS83 INS8 INS83 INS24 INS8 INS32 MOV60 INS25 INS60 MOV24 INS25 INS32 INS42 INS42 INS32 INS27 INS8 INS39 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS32 INS42 INS34 INS41 INS42 INS34 INS39 INS59 UPD42 MOV42 INS42 INS42 INS25 INS25 INS42 INS42 MOV41 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS32 INS8 INS27 INS8 INS27 INS42 UPD42 MOV42 INS2 INS21 INS18 INS42 INS34 MOV21 MOV21 INS42 INS42 INS42 INS42 INS37 UPD42 MOV42 INS2 INS2 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL48 DEL42 DEL48 DEL42 DEL48 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL34 DEL7 DEL40 DEL27 DEL32 DEL27 DEL37 DEL8 DEL42 DEL8 DEL42 DEL42 DEL48