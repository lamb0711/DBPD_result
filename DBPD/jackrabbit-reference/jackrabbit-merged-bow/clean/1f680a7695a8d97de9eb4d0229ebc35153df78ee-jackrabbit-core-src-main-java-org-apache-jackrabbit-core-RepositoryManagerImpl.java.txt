JCR-2640: Internal repository context

Decouple SessionImpl from the details of workspace and data store handling in RepositoryImpl.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@948851 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-
-import javax.jcr.Session;
-import org.apache.jackrabbit.core.RepositoryImpl.WorkspaceInfo;
-import org.apache.jackrabbit.core.data.GarbageCollector;
-import org.apache.jackrabbit.core.persistence.IterablePersistenceManager;
-import org.apache.jackrabbit.core.persistence.PersistenceManager;
-import org.apache.jackrabbit.core.version.InternalVersionManagerImpl;
-        if (rep == null) {
+        if (rep != null) {
+            return rep.createDataStoreGarbageCollector();
+        } else {
-        ArrayList<PersistenceManager> pmList = new ArrayList<PersistenceManager>();
-        InternalVersionManagerImpl vm =
-            rep.getRepositoryContext().getInternalVersionManager();
-        PersistenceManager pm = vm.getPersistenceManager();
-        pmList.add(pm);
-        String[] wspNames = rep.getWorkspaceNames();
-        Session[] sessions = new Session[wspNames.length];
-        for (int i = 0; i < wspNames.length; i++) {
-            String wspName = wspNames[i];
-            WorkspaceInfo wspInfo = rep.getWorkspaceInfo(wspName);
-            // this will initialize the workspace if required
-            SessionImpl session = SystemSession.create(
-                    rep.getRepositoryContext(), wspInfo.getConfig());
-            // mark this session as 'active' so the workspace does not get disposed
-            // by the workspace-janitor until the garbage collector is done
-            rep.onSessionCreated(session);
-            // the workspace could be disposed again, so re-initialize if required
-            // afterwards it will not be disposed because a session is registered
-            wspInfo.initialize();
-            sessions[i] = session;
-            pm = wspInfo.getPersistenceManager();
-            pmList.add(pm);
-        }
-        IterablePersistenceManager[] ipmList = new IterablePersistenceManager[pmList.size()];
-        for (int i = 0; i < pmList.size(); i++) {
-            pm = pmList.get(i);
-            if (!(pm instanceof IterablePersistenceManager)) {
-                ipmList = null;
-                break;
-            }
-            ipmList[i] = (IterablePersistenceManager) pm;
-        }
-        GarbageCollector gc = new GarbageCollector(
-                rep.getRepositoryContext().getDataStore(),
-                null, ipmList, sessions);
-        return gc;

INS8 MOV60 MOV25 UPD27 INS8 INS41 INS32 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL42 DEL33 DEL7 DEL21 DEL10 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8