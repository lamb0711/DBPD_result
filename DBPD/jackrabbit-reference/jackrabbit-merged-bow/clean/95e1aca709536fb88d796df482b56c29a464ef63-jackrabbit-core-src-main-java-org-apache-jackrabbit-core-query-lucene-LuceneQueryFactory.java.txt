JCR-2715: Improved join query performance

Simplify selector query construction in LuceneQueryFactory

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1024260 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.jackrabbit.core.query.lucene.FieldNames.PROPERTIES;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_MIXINTYPES;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_PRIMARYTYPE;
+import static org.apache.lucene.search.BooleanClause.Occur.SHOULD;
+
+import javax.jcr.query.qom.Selector;
+import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
+     * Node type manager
+     */
+    private final NodeTypeManager ntManager;
+
+    /**
+    private final String mixinTypesField;
+
+    private final String primaryTypeField;
+
-            Map<Name, Value> bindVariables) {
+            Map<Name, Value> bindVariables) throws RepositoryException {
+        this.ntManager = session.getWorkspace().getNodeTypeManager();
+        this.mixinTypesField = nsMappings.translateName(JCR_MIXINTYPES);
+        this.primaryTypeField = nsMappings.translateName(JCR_PRIMARYTYPE);
-        List<Term> terms = new ArrayList<Term>();
-        String mixinTypesField = npResolver.getJCRName(NameConstants.JCR_MIXINTYPES);
-        String primaryTypeField = npResolver.getJCRName(NameConstants.JCR_PRIMARYTYPE);
+        return create(ntManager.getNodeType(selector.getNodeTypeName()));
+    }
-        NodeTypeManager ntMgr = session.getWorkspace().getNodeTypeManager();
-        NodeType base = null;
-        try {
-            base = ntMgr.getNodeType(session.getJCRName(selector.getNodeTypeQName()));
-        } catch (RepositoryException e) {
-            // node type does not exist
-        }
-
-        if (base != null && base.isMixin()) {
+    private Term createNodeTypeTerm(NodeType type) throws RepositoryException {
+        String field;
+        if (type.isMixin()) {
-            Term t = new Term(FieldNames.PROPERTIES,
-                    FieldNames.createNamedValue(mixinTypesField,
-                            npResolver.getJCRName(selector.getNodeTypeQName())));
-            terms.add(t);
+            field = mixinTypesField;
-            Term t = new Term(FieldNames.PROPERTIES,
-                    FieldNames.createNamedValue(primaryTypeField,
-                            npResolver.getJCRName(selector.getNodeTypeQName())));
-            terms.add(t);
+            field = primaryTypeField;
+        String name = nsMappings.translateName(session.getQName(type.getName()));
+        return new Term(PROPERTIES, FieldNames.createNamedValue(field, name));
+    }
-        // now search for all node types that are derived from base
-        if (base != null) {
-            NodeTypeIterator allTypes = ntMgr.getAllNodeTypes();
-            while (allTypes.hasNext()) {
-                NodeType nt = allTypes.nextNodeType();
-                NodeType[] superTypes = nt.getSupertypes();
-                if (Arrays.asList(superTypes).contains(base)) {
-                    Name n = session.getQName(nt.getName());
-                    String ntName = nsMappings.translateName(n);
-                    Term t;
-                    if (nt.isMixin()) {
-                        // search on jcr:mixinTypes
-                        t = new Term(FieldNames.PROPERTIES,
-                                FieldNames.createNamedValue(mixinTypesField, ntName));
-                    } else {
-                        // search on jcr:primaryType
-                        t = new Term(FieldNames.PROPERTIES,
-                                FieldNames.createNamedValue(primaryTypeField, ntName));
-                    }
-                    terms.add(t);
-                }
+    private Query create(NodeType type) throws RepositoryException {
+        List<Term> terms = new ArrayList<Term>();
+
+        String name = type.getName();
+        NodeTypeIterator allTypes = ntManager.getAllNodeTypes();
+        while (allTypes.hasNext()) {
+            NodeType nt = allTypes.nextNodeType();
+            if (nt.isNodeType(name)) {
+                terms.add(createNodeTypeTerm(nt));
-        Query q;
+
-            q = new JackrabbitTermQuery(terms.get(0));
+            return new JackrabbitTermQuery(terms.get(0));
-                b.add(new JackrabbitTermQuery(term), BooleanClause.Occur.SHOULD);
+                b.add(new JackrabbitTermQuery(term), SHOULD);
-            q = b;
+            return b;
-        return q;

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 MOV43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS43 MOV29 INS83 MOV43 INS42 MOV44 INS43 INS8 INS83 MOV43 INS42 INS44 MOV43 INS8 INS83 MOV43 INS42 INS44 MOV43 INS8 INS65 INS42 INS42 MOV42 INS42 MOV42 INS42 INS21 INS21 INS21 INS42 INS41 MOV43 UPD42 MOV42 INS60 INS25 MOV60 INS41 MOV43 INS42 MOV60 MOV60 MOV60 INS61 MOV25 INS66 INS7 INS7 INS7 INS32 MOV43 INS59 INS32 INS8 INS8 MOV43 INS14 MOV43 MOV43 MOV32 INS8 INS22 MOV32 INS22 INS32 INS22 INS32 INS42 INS32 INS42 UPD42 MOV42 MOV42 INS21 MOV21 UPD42 INS32 MOV43 INS42 INS32 INS42 INS32 UPD42 MOV60 MOV25 INS41 INS41 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV32 INS7 INS7 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 INS32 MOV14 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32 DEL14 DEL7 DEL42 DEL7 DEL21 DEL40 DEL42 DEL42 DEL7 DEL21 DEL83 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL44 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL14 DEL59 DEL60 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL32 DEL59 DEL60 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31