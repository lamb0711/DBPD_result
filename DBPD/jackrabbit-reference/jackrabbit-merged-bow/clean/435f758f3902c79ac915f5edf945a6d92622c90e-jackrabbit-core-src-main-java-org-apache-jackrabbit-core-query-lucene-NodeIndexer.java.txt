JCR-415: Enhance indexing of binary content
- Use text-extractor module in jackrabbit-core

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@489000 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.query.TextFilter;
+import org.apache.jackrabbit.core.value.BLOBFileValue;
+import org.apache.jackrabbit.extractor.TextExtractor;
+
+import java.io.InputStream;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-     * List of text filters in use.
+     * Content extractor.
-    protected final List textFilters;
+    protected final TextExtractor extractor;
-     * @param textFilters   List of {@link org.apache.jackrabbit.core.query.TextFilter}s.
+     * @param extractor     content extractor
-                          List textFilters) {
+                          TextExtractor extractor) {
-        this.textFilters = textFilters;
+        this.extractor = extractor;
-     * @param textFilters   list of text filters to use for indexing binary
-     *                      properties.
+     * @param extractor     text extractor
-                                          List textFilters)
+                                          TextExtractor extractor)
-        NodeIndexer indexer = new NodeIndexer(node, stateProvider, mappings, textFilters);
+        NodeIndexer indexer = new NodeIndexer(node, stateProvider, mappings, extractor);
-     * and if that is the case, tries to extract text from the data atom using
-     * the {@link #textFilters}.
+     * and if that is the case, tries to extract text from the binary property
+     * using the {@link #extractor}.
-    protected void addBinaryValue(Document doc, String fieldName, Object internalValue) {
+    protected void addBinaryValue(Document doc,
+                                  String fieldName,
+                                  Object internalValue) {
-            if (node.hasPropertyName(QName.JCR_MIMETYPE)) {
-                PropertyState dataProp = (PropertyState) stateProvider.getItemState(
-                        new PropertyId(node.getNodeId(), QName.JCR_DATA));
-                PropertyState mimeTypeProp =
-                        (PropertyState) stateProvider.getItemState(
-                                new PropertyId(node.getNodeId(), QName.JCR_MIMETYPE));
+
+            InternalValue typeValue = getValue(QName.JCR_MIMETYPE);
+            if (typeValue != null) {
+                String type = typeValue.internalValue().toString();
-                if (node.hasPropertyName(QName.JCR_ENCODING)) {
-                    PropertyState encodingProp =
-                            (PropertyState) stateProvider.getItemState(
-                                    new PropertyId(node.getNodeId(), QName.JCR_ENCODING));
-                    encoding = encodingProp.getValues()[0].internalValue().toString();
+                InternalValue encodingValue = getValue(QName.JCR_ENCODING);
+                if (encodingValue != null) {
+                    encoding = encodingValue.internalValue().toString();
-                String mimeType = mimeTypeProp.getValues()[0].internalValue().toString();
-                Map fields = Collections.EMPTY_MAP;
-                for (Iterator it = textFilters.iterator(); it.hasNext();) {
-                    TextFilter filter = (TextFilter) it.next();
-                    // use the first filter that can handle the mimeType
-                    if (filter.canFilter(mimeType)) {
-                        fields = filter.doFilter(dataProp, encoding);
-                        break;
-                    }
-                }
-
-                for (Iterator it = fields.keySet().iterator(); it.hasNext();) {
-                    String field = (String) it.next();
-                    Reader r = (Reader) fields.get(field);
-                    doc.add(new Field(field, r));
-                }
+                InputStream stream =
+                        ((BLOBFileValue) internalValue).getStream();
+                Reader reader =
+                        new TextExtractorReader(extractor, stream, type, encoding);
+                doc.add(new Field(FieldNames.FULLTEXT, reader));
+     * Utility method that extracts the first value of the named property
+     * of the current node. Returns <code>null</code> if the property does
+     * not exist or contains no values.
+     *
+     * @param name property name
+     * @return value of the named property, or <code>null</code>
+     * @throws ItemStateException if the property can not be accessed
+     */
+    protected InternalValue getValue(QName name) throws ItemStateException {
+        try {
+            PropertyId id = new PropertyId(node.getNodeId(), name);
+            PropertyState property =
+                (PropertyState) stateProvider.getItemState(id);
+            InternalValue[] values = property.getValues();
+            if (values.length > 0) {
+                return values[0];
+            } else {
+                return null;
+            }
+        } catch (NoSuchItemStateException e) {
+            return null;
+        }
+    }
+
+    /**

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS31 INS31 UPD43 MOV29 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 INS54 INS65 INS65 INS65 INS65 UPD42 MOV42 INS43 INS42 UPD42 MOV42 INS54 UPD66 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 MOV43 UPD66 UPD66 INS8 MOV12 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 UPD42 MOV42 INS8 INS12 UPD42 MOV60 MOV25 INS60 INS25 INS60 INS60 MOV60 INS25 INS44 INS8 UPD42 MOV43 UPD42 UPD42 INS43 INS59 INS27 INS8 MOV43 INS59 MOV43 INS59 INS5 INS27 INS8 INS8 INS43 INS42 INS41 INS42 INS42 INS32 INS42 INS33 INS60 MOV60 MOV60 MOV25 MOV60 INS60 MOV21 INS42 MOV14 UPD42 MOV42 INS11 INS43 INS85 UPD42 INS32 INS40 INS34 INS41 INS41 UPD42 MOV42 INS33 UPD42 MOV42 MOV40 MOV43 MOV59 UPD43 INS27 INS43 MOV43 INS59 MOV43 INS42 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS2 INS33 INS42 INS32 UPD42 INS42 INS32 INS42 INS33 INS42 UPD42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS32 UPD42 MOV42 UPD42 MOV42 INS40 INS36 UPD42 INS43 INS42 INS42 INS42 INS42 INS40 UPD42 UPD42 MOV42 UPD42 MOV42 INS11 UPD42 MOV42 INS43 INS42 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL65 DEL66 DEL66 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL40 DEL14 DEL32 DEL11 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL40 DEL14 DEL32 DEL11 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL34 DEL2 DEL42 DEL42 DEL32 DEL34 DEL2 DEL42 DEL32 DEL42 DEL40 DEL43 DEL42 DEL43 DEL32 DEL11 DEL42 DEL32 DEL42 DEL43 DEL60 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL43 DEL32 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL24 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31