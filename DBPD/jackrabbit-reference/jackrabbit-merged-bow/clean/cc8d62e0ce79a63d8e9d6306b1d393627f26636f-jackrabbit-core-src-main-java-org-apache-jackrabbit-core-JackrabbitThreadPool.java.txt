JCR-3146 Text extraction may congest thread pool in the repository

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1202192 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+     * The logger instance for this class.
+     */
+    private static final Logger log = LoggerFactory
+            .getLogger(JackrabbitThreadPool.class);
+
+    /**
-    private static final RejectedExecutionHandler handler =
-            new ThreadPoolExecutor.CallerRunsPolicy();
+    private static final RejectedExecutionHandler handler = new CallerRunsPolicy();
+
+    /**
+     * Property to control the value at which the thread pool starts to schedule
+     * the {@link LowPriorityTask} tasks for later execution.
+     * 
+     * Set to <code>0</code> to disable the check
+     * 
+     * Default value is 0 (check is disabled).
+     * 
+     */
+    public static final String MAX_LOAD_FOR_LOW_PRIORITY_TASKS_PROPERTY = "org.apache.jackrabbit.core.JackrabbitThreadPool.maxLoadForLowPriorityTasks";
+
+    /**
+     * @see #MAX_LOAD_FOR_LOW_PRIORITY_TASKS_PROPERTY
+     */
+    private final static Integer maxLoadForLowPriorityTasks = getMaxLoadForLowPriorityTasks();
+
+    private static int getMaxLoadForLowPriorityTasks() {
+        final int defaultMaxLoad = 75;
+        int max = Integer.getInteger(MAX_LOAD_FOR_LOW_PRIORITY_TASKS_PROPERTY,
+                defaultMaxLoad);
+        if (max < 0 || max > 100) {
+            return defaultMaxLoad;
+        }
+        return max;
+    }
+
+    /**
+     * Queue where all the {@link LowPriorityTask} tasks go for later execution
+     */
+    private final BlockingQueue<Runnable> lowPriorityTasksQueue = new LinkedBlockingQueue<Runnable>();
+
+    /**
+     * Tasks that handles the scheduling and the execution of
+     * {@link LowPriorityTask} tasks
+     */
+    private final RetryLowPriorityTask retryTask;
+        retryTask = new RetryLowPriorityTask(this, lowPriorityTasksQueue);
+    @Override
+    public void execute(Runnable command) {
+        if (command instanceof LowPriorityTask) {
+            scheduleLowPriority(command);
+            return;
+        }
+        super.execute(command);
+    }
+
+    private void scheduleLowPriority(Runnable command) {
+        if (isOverDefinedMaxLoad()) {
+            lowPriorityTasksQueue.add(command);
+            retryTask.retryLater();
+            return;
+        }
+        super.execute(command);
+    }
+
+    /**
+     * compares the current load of the executor with the defined
+     * <code>{@link #maxLoadForLowPriorityTasks}</code> parameter.
+     * 
+     * Used to determine if the executor can handle additional
+     * {@link LowPriorityTask} tasks.
+     * 
+     * @return true if the load is under the
+     *         <code>{@link #maxLoadForLowPriorityTasks}</code> parameter
+     */
+    private boolean isOverDefinedMaxLoad() {
+        if (maxLoadForLowPriorityTasks == 0) {
+            return false;
+        }
+        double currentLoad = ((double) getActiveCount()) / getPoolSize() * 100;
+        return currentLoad > maxLoadForLowPriorityTasks;
+    }
+
+    /**
+     * TEST ONLY
+     * 
+     * @return the number of low priority tasks that are waiting in the queue
+     */
+    int getPendingLowPriorityTaskCount() {
+        return lowPriorityTasksQueue.size();
+    }
+
+    private static final class RetryLowPriorityTask implements Runnable {
+
+        /**
+         * schedule interval in ms for delayed tasks
+         */
+        private static final int LATER_MS = 50;
+
+        private final JackrabbitThreadPool executor;
+        private final BlockingQueue<Runnable> lowPriorityTasksQueue;
+
+        /**
+         * flag to indicate that another execute has been scheduled or is
+         * currently running.
+         */
+        private final AtomicBoolean retryPending;
+
+        public RetryLowPriorityTask(JackrabbitThreadPool executor,
+                BlockingQueue<Runnable> lowPriorityTasksQueue) {
+            this.executor = executor;
+            this.lowPriorityTasksQueue = lowPriorityTasksQueue;
+            this.retryPending = new AtomicBoolean(false);
+        }
+
+        public void retryLater() {
+            if (!retryPending.getAndSet(true)) {
+                executor.schedule(this, LATER_MS, TimeUnit.MILLISECONDS);
+            }
+        }
+
+        public void run() {
+            int count = 0;
+            while (!executor.isOverDefinedMaxLoad()) {
+                Runnable r = lowPriorityTasksQueue.poll();
+                if (r == null) {
+                    log.debug("Executed {} low priority tasks.", count);
+                    break;
+                }
+                count++;
+                executor.execute(r);
+            }
+            retryPending.set(false);
+            if (!lowPriorityTasksQueue.isEmpty()) {
+                log.debug(
+                        "Executor is under load, will schedule {} remaining tasks for {} ms later",
+                        lowPriorityTasksQueue.size(), LATER_MS);
+                retryLater();
+            }
+        }
+    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS23 INS23 INS31 INS31 INS31 INS31 INS55 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS83 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS65 INS42 INS42 INS32 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS32 INS60 INS60 INS25 INS41 INS65 INS43 INS43 INS42 INS14 INS65 INS42 INS42 INS21 INS42 INS43 INS42 INS25 INS21 INS43 INS42 INS25 INS21 INS65 INS65 INS25 INS60 INS41 INS65 INS65 INS41 INS42 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS66 INS42 INS42 INS57 UPD43 INS66 INS66 INS65 INS66 INS66 INS66 INS67 INS42 INS83 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS66 INS65 INS66 INS42 INS42 INS74 INS66 INS65 INS66 INS7 INS42 INS62 INS8 INS48 INS42 INS32 INS8 INS48 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS27 INS8 INS39 INS59 INS27 INS66 INS66 INS32 INS65 INS42 INS34 INS42 INS42 INS43 INS43 INS42 INS65 INS42 INS42 INS43 INS42 INS74 INS42 INS21 INS21 INS21 INS25 INS60 INS61 INS21 INS25 INS43 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS27 INS27 INS41 INS42 INS43 INS43 INS42 INS42 INS14 INS42 INS43 INS21 INS41 INS42 INS42 INS42 INS21 INS21 INS41 INS42 INS42 INS67 INS42 INS67 INS42 INS34 INS41 INS42 INS27 INS42 INS42 INS42 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS43 INS43 INS7 INS7 INS7 INS38 INS8 INS39 INS59 INS38 INS8 INS32 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS43 INS52 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS9 INS27 INS34 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS14 INS32 INS21 INS42 INS34 INS32 INS60 INS25 INS21 INS21 INS42 INS42 INS9 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS9 INS42 INS42 INS9 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS37 INS32 INS42 INS42 INS32 INS32 INS11 INS42 INS42 INS42 INS42 INS52 INS42 INS40 INS42 INS42 INS32 INS42 INS33 INS21 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS39 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 DEL40