JCR-3236: Can not instantiate lucene Analyzer in SearchIndex

Support also Analyzer classes that require a Version instance to be passed to a constructor

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1291424 13f79535-47bb-0310-9956-ffa450edef68

-                        String analyzerClassName = analyzerNode.getAttributes().getNamedItem("class").getNodeValue();
-                        try {
-                            @SuppressWarnings("rawtypes")
-                            Class clazz = Class.forName(analyzerClassName);
-                            if (clazz == JackrabbitAnalyzer.class) {
-                                log.warn("Not allowed to configure " + JackrabbitAnalyzer.class.getName() +  " for a property. "
-                                        + "Using default analyzer for that property.");
-                            }
-                            else if (Analyzer.class.isAssignableFrom(clazz)) {
-                                Analyzer analyzer = (Analyzer) clazz.newInstance();
-                                NodeList propertyChildNodes = analyzerNode.getChildNodes();
-                                for (int k = 0; k < propertyChildNodes.getLength(); k++) {
-                                    Node propertyNode = propertyChildNodes.item(k);
-                                    if (propertyNode.getNodeName().equals("property")) {
-                                        // get property name
-                                        Name propName = resolver.getQName(getTextContent(propertyNode));
-                                        String fieldName = nsMappings.translateName(propName);
-                                        // set analyzer for the fulltext property fieldname
-                                        int idx = fieldName.indexOf(':');
-                                        fieldName = fieldName.substring(0, idx + 1)
-                                                    + FieldNames.FULLTEXT_PREFIX + fieldName.substring(idx + 1);
-                                        Object prevAnalyzer = analyzers.put(fieldName, analyzer);
-                                        if (prevAnalyzer != null) {
-                                            log.warn("Property " + propName.getLocalName()
-                                                    + " has been configured for multiple analyzers. "
-                                                    + " Last configured analyzer is used");
-                                        }
-                                    }
+                        Analyzer analyzer = JackrabbitAnalyzer.getAnalyzerInstance(
+                                analyzerNode.getAttributes().getNamedItem("class").getNodeValue());
+                        NodeList propertyChildNodes = analyzerNode.getChildNodes();
+                        for (int k = 0; k < propertyChildNodes.getLength(); k++) {
+                            Node propertyNode = propertyChildNodes.item(k);
+                            if (propertyNode.getNodeName().equals("property")) {
+                                // get property name
+                                Name propName = resolver.getQName(getTextContent(propertyNode));
+                                String fieldName = nsMappings.translateName(propName);
+                                // set analyzer for the fulltext property fieldname
+                                int idx = fieldName.indexOf(':');
+                                fieldName = fieldName.substring(0, idx + 1)
+                                        + FieldNames.FULLTEXT_PREFIX + fieldName.substring(idx + 1);
+                                Object prevAnalyzer = analyzers.put(fieldName, analyzer);
+                                if (prevAnalyzer != null) {
+                                    log.warn("Property " + propName.getLocalName()
+                                            + " has been configured for multiple analyzers. "
+                                            + " Last configured analyzer is used");
-                            } else {
-                                log.warn("org.apache.lucene.analysis.Analyzer is not a superclass of "
-                                        + analyzerClassName + ". Ignoring this configure analyzer" );
-                        } catch (ClassNotFoundException e) {
-                            log.warn("Analyzer class not found: " + analyzerClassName, e);

MOV8 MOV21 MOV21 MOV21 MOV60 MOV21 MOV21 MOV21 MOV21 MOV60 MOV60 INS24 MOV21 MOV58 MOV27 MOV37 MOV8 MOV60 INS25 MOV32 MOV8 MOV25 UPD42 MOV42 MOV32 INS8 MOV60 INS24 UPD42 MOV42 MOV58 MOV27 MOV37 INS8 MOV60 MOV25 MOV32 MOV60 MOV43 UPD42 MOV42 UPD42 INS32 INS42 INS42 MOV32 DEL57 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL57 DEL27 DEL42 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL27 DEL32 DEL8 DEL12 DEL54 DEL25 DEL8 DEL24 DEL8 DEL25 DEL25 DEL8 DEL24 DEL8