- Speedup RangeQuery

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@239645 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.log4j.Logger;
+import org.apache.commons.collections.map.LRUMap;
+import java.util.Map;
+import java.util.WeakHashMap;
+     * Logger instance for this class.
+     */
+    private static final Logger log = Logger.getLogger(RangeQuery.class);
+
+    /**
+     * Simple result cache for previously calculated hits.
+     * key=IndexReader value=Map{key=String:range,value=BitSet:hits}
+     */
+    private static final Map cache = new WeakHashMap();
+
+    /**
+            log.debug("Too many terms to enumerate, using custom RangeQuery");
+         * The cache key to use to store the results.
+         */
+        private final String cacheKey;
+
+        /**
+         * The map to store the results.
+         */
+        private final Map resultMap;
+
+        /**
-            hits = new BitSet(reader.maxDoc());
+            StringBuffer key = new StringBuffer();
+            key.append(lowerTerm != null ? lowerTerm.field() : upperTerm.field());
+            key.append('\uFFFF');
+            key.append(lowerTerm != null ? lowerTerm.text() : "");
+            key.append('\uFFFF');
+            key.append(upperTerm != null ? upperTerm.text() : "");
+            key.append('\uFFFF');
+            key.append(inclusive);
+            this.cacheKey = key.toString();
+            // check cache
+            synchronized (cache) {
+                Map m = (Map) cache.get(reader);
+                if (m == null) {
+                    m = new LRUMap(10);
+                    cache.put(reader, m);
+                }
+                resultMap = m;
+            }
+            synchronized (resultMap) {
+                BitSet result = (BitSet) resultMap.get(cacheKey);
+                if (result == null) {
+                    result = new BitSet(reader.maxDoc());
+                } else {
+                    hitsCalculated = true;
+                }
+                hits = result;
+            }
-                do {
-                    Term term = enumerator.term();
-                    if (term != null && term.field() == testField) {
-                        if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {
-                            checkLower = false;
-                            if (upperTerm != null) {
-                                int compare = upperTerm.text().compareTo(term.text());
-                                // if beyond the upper term, or is exclusive and
-                                // this is equal to the upper term, break out
-                                if ((compare < 0) || (!inclusive && compare == 0)) {
-                                    break;
+                TermDocs docs = reader.termDocs();
+                try {
+                    do {
+                        Term term = enumerator.term();
+                        if (term != null && term.field() == testField) {
+                            if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {
+                                checkLower = false;
+                                if (upperTerm != null) {
+                                    int compare = upperTerm.text().compareTo(term.text());
+                                    // if beyond the upper term, or is exclusive and
+                                    // this is equal to the upper term, break out
+                                    if ((compare < 0) || (!inclusive && compare == 0)) {
+                                        break;
+                                    }
-                            }
-                            TermDocs td = reader.termDocs(term);
-                            try {
-                                while (td.next()) {
-                                    hits.set(td.doc());
+                                docs.seek(enumerator);
+                                while (docs.next()) {
+                                    hits.set(docs.doc());
-                            } finally {
-                                td.close();
+                        } else {
+                            break;
-                    } else {
-                        break;
-                    }
-                } while (enumerator.next());
+                    } while (enumerator.next());
+                } finally {
+                    docs.close();
+                }
+            // put to cache
+            synchronized (resultMap) {
+                resultMap.put(cacheKey, hits);
+            }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS23 INS23 INS65 INS42 INS42 INS32 INS65 INS42 INS42 INS14 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS8 INS66 INS42 INS42 INS57 INS66 INS66 INS43 INS65 INS42 INS42 INS65 INS42 INS42 MOV46 MOV21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS51 INS51 INS51 INS43 INS42 INS66 INS66 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS7 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS16 INS42 INS42 INS13 INS42 INS42 INS16 INS42 INS42 INS13 INS42 INS42 INS16 INS42 INS42 INS13 INS42 INS42 INS42 INS22 INS32 INS60 INS25 INS21 INS60 INS25 INS21 INS60 INS54 INS21 INS32 INS43 INS27 INS32 INS32 INS27 INS32 INS45 INS27 INS32 INS45 INS52 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS7 INS43 INS59 INS27 MOV8 INS8 INS7 MOV43 INS59 INS8 INS8 INS32 INS42 INS42 INS45 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS21 INS42 INS42 INS42 INS32 MOV19 INS21 INS42 INS42 INS42 INS42 INS43 INS32 INS7 INS32 INS43 INS32 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS9 INS42 INS42 INS43 INS34 INS42 INS21 MOV61 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54