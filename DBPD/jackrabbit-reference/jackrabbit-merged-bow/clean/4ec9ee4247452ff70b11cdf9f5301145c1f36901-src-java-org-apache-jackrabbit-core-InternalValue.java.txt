- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.15 $
-	    throws ValueFormatException, RepositoryException {
-	if (value == null) {
-	    throw new IllegalArgumentException("null value");
-	}
+            throws ValueFormatException, RepositoryException {
+        if (value == null) {
+            throw new IllegalArgumentException("null value");
+        }
-	switch (value.getType()) {
-	    case PropertyType.BINARY:
-		try {
-		    if (value instanceof BLOBFileValue) {
-			return new InternalValue((BLOBFileValue) value);
-		    } else {
-			return new InternalValue(new BLOBFileValue(value.getStream()));
-		    }
-		} catch (IOException ioe) {
-		    throw new ValueFormatException(ioe.getMessage());
-		}
-	    case PropertyType.BOOLEAN:
-		return new InternalValue(value.getBoolean());
-	    case PropertyType.DATE:
-		return new InternalValue(value.getDate());
-	    case PropertyType.DOUBLE:
-		return new InternalValue(value.getDouble());
-	    case PropertyType.LONG:
-		return new InternalValue(value.getLong());
-	    case PropertyType.REFERENCE:
-		return new InternalValue(new UUID(value.getString()));
-	    case PropertyType.NAME:
-		try {
-		    return new InternalValue(QName.fromJCRName(value.getString(), nsResolver));
-		} catch (IllegalNameException ine) {
-		    throw new ValueFormatException(ine.getMessage());
-		} catch (UnknownPrefixException upe) {
-		    throw new ValueFormatException(upe.getMessage());
-		}
-	    case PropertyType.PATH:
-		try {
-		    return new InternalValue(Path.create(value.getString(), nsResolver, false));
-		} catch (MalformedPathException mpe) {
-		    throw new ValueFormatException(mpe.getMessage());
-		}
-	    case PropertyType.STRING:
-		return new InternalValue(value.getString());
+        switch (value.getType()) {
+            case PropertyType.BINARY:
+                try {
+                    if (value instanceof BLOBFileValue) {
+                        return new InternalValue((BLOBFileValue) value);
+                    } else {
+                        return new InternalValue(new BLOBFileValue(value.getStream()));
+                    }
+                } catch (IOException ioe) {
+                    throw new ValueFormatException(ioe.getMessage());
+                }
+            case PropertyType.BOOLEAN:
+                return new InternalValue(value.getBoolean());
+            case PropertyType.DATE:
+                return new InternalValue(value.getDate());
+            case PropertyType.DOUBLE:
+                return new InternalValue(value.getDouble());
+            case PropertyType.LONG:
+                return new InternalValue(value.getLong());
+            case PropertyType.REFERENCE:
+                return new InternalValue(new UUID(value.getString()));
+            case PropertyType.NAME:
+                try {
+                    return new InternalValue(QName.fromJCRName(value.getString(), nsResolver));
+                } catch (IllegalNameException ine) {
+                    throw new ValueFormatException(ine.getMessage());
+                } catch (UnknownPrefixException upe) {
+                    throw new ValueFormatException(upe.getMessage());
+                }
+            case PropertyType.PATH:
+                try {
+                    return new InternalValue(Path.create(value.getString(), nsResolver, false));
+                } catch (MalformedPathException mpe) {
+                    throw new ValueFormatException(mpe.getMessage());
+                }
+            case PropertyType.STRING:
+                return new InternalValue(value.getString());
-	    default:
-		throw new IllegalArgumentException("illegal value");
-	}
+            default:
+                throw new IllegalArgumentException("illegal value");
+        }
-	    throws ValueFormatException, RepositoryException {
-	if (value == null) {
-	    throw new IllegalArgumentException("null value");
-	}
-	return create(ValueHelper.convert(value, targetType), nsResolver);
+            throws ValueFormatException, RepositoryException {
+        if (value == null) {
+            throw new IllegalArgumentException("null value");
+        }
+        return create(ValueHelper.convert(value, targetType), nsResolver);
-	    throws ValueFormatException, RepositoryException {
-	if (value == null) {
-	    throw new IllegalArgumentException("null value");
-	}
-	return create(ValueHelper.convert(value, targetType), nsResolver);
+            throws ValueFormatException, RepositoryException {
+        if (value == null) {
+            throw new IllegalArgumentException("null value");
+        }
+        return create(ValueHelper.convert(value, targetType), nsResolver);
-	return new InternalValue(value);
+        return new InternalValue(value);
-	return new InternalValue(value);
+        return new InternalValue(value);
-	return new InternalValue(value);
+        return new InternalValue(value);
-	return new InternalValue(value);
+        return new InternalValue(value);
-	return new InternalValue(value);
+        return new InternalValue(value);
-	return new InternalValue(new BLOBFileValue(value));
+        return new InternalValue(new BLOBFileValue(value));
-	return new InternalValue(new BLOBFileValue(value));
+        return new InternalValue(new BLOBFileValue(value));
-	return new InternalValue(new BLOBFileValue(value));
+        return new InternalValue(new BLOBFileValue(value));
-	return new InternalValue(value);
+        return new InternalValue(value);
-	return new InternalValue(value);
+        return new InternalValue(value);
-	return new InternalValue(value);
+        return new InternalValue(value);
-	switch (type) {
-	    case PropertyType.BINARY:
-		return new BinaryValue(((BLOBFileValue) val).getStream());
-	    case PropertyType.BOOLEAN:
-		return new BooleanValue(((Boolean) val));
-	    case PropertyType.DATE:
-		return new DateValue((Calendar) val);
-	    case PropertyType.DOUBLE:
-		return new DoubleValue((Double) val);
-	    case PropertyType.LONG:
-		return new LongValue((Long) val);
-	    case PropertyType.REFERENCE:
-		return ReferenceValue.valueOf(((UUID) val).toString());
-	    case PropertyType.PATH:
-		try {
-		    return PathValue.valueOf(((Path) val).toJCRPath(nsResolver));
-		} catch (NoPrefixDeclaredException npde) {
-		    // should never get here...
-		    throw new RepositoryException("internal error: encountered unregistered namespace", npde);
-		}
-	    case PropertyType.NAME:
-		try {
-		    return NameValue.valueOf(((QName) val).toJCRName(nsResolver));
-		} catch (NoPrefixDeclaredException npde) {
-		    // should never get here...
-		    throw new RepositoryException("internal error: encountered unregistered namespace", npde);
-		}
-	    case PropertyType.STRING:
-		return new StringValue((String) val);
-	    default:
-		throw new RepositoryException("illegal internal value type");
-	}
+        switch (type) {
+            case PropertyType.BINARY:
+                return new BinaryValue(((BLOBFileValue) val).getStream());
+            case PropertyType.BOOLEAN:
+                return new BooleanValue(((Boolean) val));
+            case PropertyType.DATE:
+                return new DateValue((Calendar) val);
+            case PropertyType.DOUBLE:
+                return new DoubleValue((Double) val);
+            case PropertyType.LONG:
+                return new LongValue((Long) val);
+            case PropertyType.REFERENCE:
+                return ReferenceValue.valueOf(((UUID) val).toString());
+            case PropertyType.PATH:
+                try {
+                    return PathValue.valueOf(((Path) val).toJCRPath(nsResolver));
+                } catch (NoPrefixDeclaredException npde) {
+                    // should never get here...
+                    throw new RepositoryException("internal error: encountered unregistered namespace", npde);
+                }
+            case PropertyType.NAME:
+                try {
+                    return NameValue.valueOf(((QName) val).toJCRName(nsResolver));
+                } catch (NoPrefixDeclaredException npde) {
+                    // should never get here...
+                    throw new RepositoryException("internal error: encountered unregistered namespace", npde);
+                }
+            case PropertyType.STRING:
+                return new StringValue((String) val);
+            default:
+                throw new RepositoryException("illegal internal value type");
+        }
-	return val;
+        return val;
-	return type;
+        return type;
-	switch (type) {
-	    case PropertyType.BINARY:
-		try {
-		    return new InternalValue(new BLOBFileValue(((BLOBFileValue) val).getStream()));
-		} catch (IOException ioe) {
-		    throw new RepositoryException("failed to copy binary value", ioe);
-		}
-	    case PropertyType.BOOLEAN:
-		return new InternalValue(((Boolean) val).booleanValue());
-	    case PropertyType.DATE:
-		return new InternalValue((Calendar) val);
-	    case PropertyType.DOUBLE:
-		return new InternalValue(((Double) val).doubleValue());
-	    case PropertyType.LONG:
-		return new InternalValue(((Long) val).longValue());
-	    case PropertyType.REFERENCE:
-		return new InternalValue((UUID) val);
-	    case PropertyType.PATH:
-		return new InternalValue((Path) val);
-	    case PropertyType.NAME:
-		return new InternalValue((QName) val);
-	    case PropertyType.STRING:
-		return new InternalValue((String) val);
-	    default:
-		throw new RepositoryException("illegal internal value type");
-	}
+        switch (type) {
+            case PropertyType.BINARY:
+                try {
+                    return new InternalValue(new BLOBFileValue(((BLOBFileValue) val).getStream()));
+                } catch (IOException ioe) {
+                    throw new RepositoryException("failed to copy binary value", ioe);
+                }
+            case PropertyType.BOOLEAN:
+                return new InternalValue(((Boolean) val).booleanValue());
+            case PropertyType.DATE:
+                return new InternalValue((Calendar) val);
+            case PropertyType.DOUBLE:
+                return new InternalValue(((Double) val).doubleValue());
+            case PropertyType.LONG:
+                return new InternalValue(((Long) val).longValue());
+            case PropertyType.REFERENCE:
+                return new InternalValue((UUID) val);
+            case PropertyType.PATH:
+                return new InternalValue((Path) val);
+            case PropertyType.NAME:
+                return new InternalValue((QName) val);
+            case PropertyType.STRING:
+                return new InternalValue((String) val);
+            default:
+                throw new RepositoryException("illegal internal value type");
+        }
-	if (type == PropertyType.DATE) {
-	    return ISO8601.format((Calendar) val);
-	} else {
-	    return val.toString();
-	}
+        if (type == PropertyType.DATE) {
+            return ISO8601.format((Calendar) val);
+        } else {
+            return val.toString();
+        }
-	if (this == obj) {
-	    return true;
-	}
-	if (obj instanceof InternalValue) {
-	    InternalValue other = (InternalValue) obj;
-	    return val.equals(other.val);
-	}
-	return false;
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof InternalValue) {
+            InternalValue other = (InternalValue) obj;
+            return val.equals(other.val);
+        }
+        return false;
-	switch (type) {
-	    case PropertyType.BOOLEAN:
-		return new InternalValue(Boolean.valueOf(s).booleanValue());
-	    case PropertyType.DATE:
-		return new InternalValue(ISO8601.parse(s));
-	    case PropertyType.DOUBLE:
-		return new InternalValue(Double.valueOf(s).doubleValue());
-	    case PropertyType.LONG:
-		return new InternalValue(Long.valueOf(s).longValue());
-	    case PropertyType.REFERENCE:
-		return new InternalValue(new UUID(s));
-	    case PropertyType.PATH:
-		return new InternalValue(Path.valueOf(s));
-	    case PropertyType.NAME:
-		return new InternalValue(QName.valueOf(s));
-	    case PropertyType.STRING:
-		return new InternalValue(s);
+        switch (type) {
+            case PropertyType.BOOLEAN:
+                return new InternalValue(Boolean.valueOf(s).booleanValue());
+            case PropertyType.DATE:
+                return new InternalValue(ISO8601.parse(s));
+            case PropertyType.DOUBLE:
+                return new InternalValue(Double.valueOf(s).doubleValue());
+            case PropertyType.LONG:
+                return new InternalValue(Long.valueOf(s).longValue());
+            case PropertyType.REFERENCE:
+                return new InternalValue(new UUID(s));
+            case PropertyType.PATH:
+                return new InternalValue(Path.valueOf(s));
+            case PropertyType.NAME:
+                return new InternalValue(QName.valueOf(s));
+            case PropertyType.STRING:
+                return new InternalValue(s);
-	    case PropertyType.BINARY:
-		throw new IllegalArgumentException("this method does not support the type PropertyType.BINARY");
-	    default:
-		throw new IllegalArgumentException("illegal type");
-	}
+            case PropertyType.BINARY:
+                throw new IllegalArgumentException("this method does not support the type PropertyType.BINARY");
+            default:
+                throw new IllegalArgumentException("illegal type");
+        }
-	val = value;
-	type = PropertyType.STRING;
+        val = value;
+        type = PropertyType.STRING;
-	val = value;
-	type = PropertyType.NAME;
+        val = value;
+        type = PropertyType.NAME;
-	val = new Long(value);
-	type = PropertyType.LONG;
+        val = new Long(value);
+        type = PropertyType.LONG;
-	val = new Double(value);
-	type = PropertyType.DOUBLE;
+        val = new Double(value);
+        type = PropertyType.DOUBLE;
-	val = value;
-	type = PropertyType.DATE;
+        val = value;
+        type = PropertyType.DATE;
-	val = new Boolean(value);
-	type = PropertyType.BOOLEAN;
+        val = new Boolean(value);
+        type = PropertyType.BOOLEAN;
-	val = value;
-	type = PropertyType.BINARY;
+        val = value;
+        type = PropertyType.BINARY;
-	val = value;
-	type = PropertyType.PATH;
+        val = value;
+        type = PropertyType.PATH;
-	val = value;
-	type = PropertyType.REFERENCE;
+        val = value;
+        type = PropertyType.REFERENCE;

DEL66 DEL65 DEL66 DEL65