work in progress

- Completeness/Freshness of Namespace Registry

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477172 13f79535-47bb-0310-9956-ffa450edef68

+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+    private static Logger log = LoggerFactory.getLogger(NamespaceRegistryImpl.class);
+
-    public NamespaceRegistryImpl(NamespaceStorage storage, Map nsValues, boolean level2Repository) {
+    /**
+     * Create a new <code>NamespaceRegistryImpl</code>.
+     *
+     * @param storage
+     * @param level2Repository
+     * @throws RepositoryException
+     */
+    public NamespaceRegistryImpl(NamespaceStorage storage, boolean level2Repository)
+        throws RepositoryException {
+
-        load(nsValues);
+
+        load();
-    private void load(Map nsValues) {
+    /**
+     * Load all mappings from the <code>NamespaceStorage</code> and update this
+     * registry.
+     *
+     * @throws RepositoryException
+     */
+    private void load() throws RepositoryException {
+        Map nsValues = storage.getRegisteredNamespaces();
-            if (!prefixToURI.containsKey(prefix)) {
-                String uri = (String) nsValues.get(prefix);
-                prefixToURI.put(prefix, uri);
-                uriToPrefix.put(uri, prefix);
-            }
+            String uri = (String) nsValues.get(prefix);
+            addMapping(prefix, uri);
+     * Add a namespace with the given uri and prefix. If for the given
+     * <code>uri</code> is already registered with a different prefix, the
+     * existing mapping gets replaced.
+     *
+     * @param prefix
+     * @param uri
+     */
+    private void addMapping(String prefix, String uri) {
+        if (uriToPrefix.containsKey(uri)) {
+            String oldPrefix = (String) uriToPrefix.get(uri);
+            replaceMapping(oldPrefix, prefix, uri);
+        } else {
+            prefixToURI.put(prefix, uri);
+            uriToPrefix.put(uri, prefix);
+            notifyNamespaceAdded(prefix, uri);
+        }
+    }
+
+    /**
+     * Remove the entries with the given prefix and uri from the registry
+     * and inform all listeners.
+     *
+     * @param prefix
+     * @param uri
+     */
+    private void removeMapping(String prefix, String uri) {
+        prefixToURI.remove(prefix).toString();
+        uriToPrefix.remove(uri);
+        // notify listeners
+        notifyNamespaceRemoved(uri);
+    }
+
+    /**
+     * Replace an existing registered namespace with the given <code>oldPrefix</code>
+     * by an entry with the new prefix. Subsequently all listeners are informed
+     * about the remapped namespace.
+     *
+     * @param oldPrefix
+     * @param prefix
+     * @param uri
+     */
+    private void replaceMapping(String oldPrefix, String prefix, String uri) {
+        if (oldPrefix.equals(prefix)) {
+            // mapping already existing -> nothing to do.
+            return;
+        }
+        prefixToURI.remove(oldPrefix);
+        prefixToURI.put(prefix, uri);
+        uriToPrefix.put(uri, prefix);
+        // notify: remapped existing namespace uri to new prefix
+        notifyNamespaceRemapped(oldPrefix, prefix, uri);
+    }
+
+    //--------------------------------------------------< NamespaceRegistry >---
+    /**
-
-        // remove old prefix mapping
-        if (oldPrefix != null) {
-            prefixToURI.remove(oldPrefix);
-            uriToPrefix.remove(uri);
-        }
-        // add new prefix mapping
-        prefixToURI.put(prefix, uri);
-        uriToPrefix.put(uri, prefix);
-
-        // notify listeners
-        if (oldPrefix != null) {
-            // remapped existing namespace uri to new prefix
-            notifyNamespaceRemapped(oldPrefix, prefix, uri);
+        if (oldPrefix == null) {
+            addMapping(prefix, uri);
-            // added new namespace uri mapped to prefix
-            notifyNamespaceAdded(prefix, uri);
+            replaceMapping(oldPrefix, prefix, uri);
-        storage.unregisterNamespace(prefixToURI.get(prefix).toString());
+        String uri = prefixToURI.get(prefix).toString();
+        storage.unregisterNamespace(uri);
-        // update caches
-        String uri = prefixToURI.remove(prefix).toString();
-        uriToPrefix.remove(uri);
-
-        // notify listeners
-        notifyNamespaceRemoved(uri);
+        // update caches and notify listeners
+        removeMapping(prefix, uri);
-
+        if (!prefixToURI.containsKey(prefix)) {
+            // reload mappings in order to make sure, the NamespaceRegistry is
+            // up to date, and try to retrieve the uri again.
+            try {
+                load();
+            } catch (RepositoryException ex) {
+                log.warn("Internal error while loading registered namespaces.");
+            }
+        }
+
+
+        if (!uriToPrefix.containsKey(uri)) {
+            // reload mappings in order to make sure, the NamespaceRegistry is
+            // up to date, and try to retrieve the prefix again.
+            try {
+                load();
+            } catch (RepositoryException ex) {
+                log.warn("Internal error while loading registered namespaces.");
+            }
+        }
+
+    /**
+     * {@inheritDoc}
+     */
+    /**
+     * {@inheritDoc}
+     */
+    /**
+     * {@inheritDoc}
+     */
-}
+}

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS29 INS43 INS29 INS43 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS29 INS29 INS42 INS42 INS32 INS65 INS65 INS65 INS65 UPD42 MOV42 INS65 INS65 INS42 INS60 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS21 MOV21 MOV21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS25 MOV21 MOV21 MOV21 MOV21 INS25 INS60 INS21 INS25 INS25 INS65 INS65 INS65 INS42 INS42 INS57 INS66 INS42 INS42 INS42 INS66 INS66 INS42 MOV43 INS59 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS8 MOV8 INS66 INS66 INS42 INS42 INS42 INS42 MOV32 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 UPD27 MOV27 MOV8 MOV8 MOV43 INS59 INS32 MOV38 INS8 INS38 INS8 INS65 INS65 INS65 INS43 INS42 INS32 MOV60 INS21 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS41 INS42 MOV32 INS42 INS42 INS42 INS42 INS54 INS32 INS54 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS8 INS12 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS21 INS44 INS8 INS21 INS44 INS8 INS43 INS32 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 DEL43 DEL42 DEL44 DEL42 DEL42 DEL44 DEL25 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL59 DEL60