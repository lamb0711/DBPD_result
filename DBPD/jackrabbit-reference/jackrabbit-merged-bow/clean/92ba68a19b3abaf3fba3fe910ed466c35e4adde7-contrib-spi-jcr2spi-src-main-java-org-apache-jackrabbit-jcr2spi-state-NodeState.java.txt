- Remove TransientItemStateListener
- Create property states and child node states on NodeState

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430020 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ItemExistsException;
+     * TODO: id is not stable unless sole uuid.
+     * TODO: move this method to a node state implementation which contains all transient related methods?
+     *
+     * Adds a child node state to this node state.
+     *
+     * @param child the node state to add.
+     * @param uuid  the uuid of the child node state or <code>null</code> if
+     *              <code>child</code> cannot be identified with a uuid.
+     * @throws IllegalArgumentException if <code>this</code> is not the parent
+     *                                  of <code>child</code>.
+     */
+    synchronized void addChildNodeState(NodeState child, String uuid) {
+        if (child.getParent() != this) {
+            throw new IllegalArgumentException("This NodeState is not the parent of child");
+        }
+        ChildNodeEntry cne;
+        if (uuid != null) {
+            cne = new UUIDReference(child, isf);
+        } else {
+            cne = new PathElementReference(child, isf, idFactory);
+        }
+        childNodeEntries.add(cne);
+        markModified();
+    }
+
+    /**
-     * Adds a property name entry.
+     * Adds a property name entry. This method will not create a property!
+     * TODO: move this method to a node state implementation which contains all transient related methods?
+     *
+     * Adds a property state to this node state.
+     *
+     * @param propState the property state to add.
+     * @throws ItemExistsException      if <code>this</code> node state already
+     *                                  contains a property state with the same
+     *                                  name as <code>propState</code>.
+     * @throws IllegalArgumentException if <code>this</code> is not the parent
+     *                                  of <code>propState</code>.
+     */
+    synchronized void addPropertyState(PropertyState propState) throws ItemExistsException {
+        if (propState.getParent() != this) {
+            throw new IllegalArgumentException("This NodeState is not the parent of propState");
+        }
+        QName propertyName = propState.getQName();
+        if (properties.containsKey(propertyName)) {
+            throw new ItemExistsException(propertyName.toString());
+        }
+        properties.put(propertyName, new PropertyReference(propState, isf, idFactory));
+        markModified();
+    }
+
+    /**
+        // TODO: turn this into a linked set. NodeId cannot be use as key!
+        void add(ChildNodeEntry cne) {
+            QName nodeName = cne.getName();
+            List siblings = null;
+            Object obj = nameMap.get(nodeName);
+            if (obj != null) {
+                if (obj instanceof ArrayList) {
+                    // map entry is a list of siblings
+                    siblings = (ArrayList) obj;
+                } else {
+                    // map entry is a single child node entry,
+                    // convert to siblings list
+                    siblings = new ArrayList();
+                    siblings.add(obj);
+                    nameMap.put(nodeName, siblings);
+                }
+            }
+
+            if (siblings != null) {
+                siblings.add(cne);
+            } else {
+                nameMap.put(nodeName, cne);
+            }
+            entries.put(cne.getId(), cne);
+        }
+

INS26 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS31 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS60 INS25 INS21 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS25 INS60 INS25 INS21 INS21 INS39 INS42 INS44 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS32 INS32 UPD66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS43 INS59 INS32 INS8 INS32 INS32 INS43 INS42 INS60 INS60 INS60 INS25 INS25 INS21 INS32 INS52 INS53 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS52 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS32 INS42 INS42 INS14 INS7 INS7 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS43 INS45 INS42 INS14 INS42 INS14 INS43 INS45 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS62 INS8 INS8 INS32 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS32 INS32 INS42 INS11 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42