- make search manager configurable
- improve indexing performance

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@71500 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.fs.FileSystemException;
+import org.apache.jackrabbit.core.config.SearchConfig;
+import org.apache.commons.collections.BeanMap;
+    /** Logger instance for this class */
+    /** Name of the file to persist search internal namespace mappings */
+    /** The actual search index */
+    /** State manager to retrieve content */
+    /** HierarchyManager for path resolution */
+    /** Session for accessing Nodes */
+    /** Storage for search index */
+    private final FileSystem fs;
+
+    /** Namespace resolver for search internal prefixes */
-    public SearchManager(ItemStateProvider stateProvider,
-                         HierarchyManager hmgr,
-                         SessionImpl session,
-                         FileSystem fs) throws IOException {
-        this.stateProvider = stateProvider;
-        this.hmgr = hmgr;
+    public SearchManager(SessionImpl session, SearchConfig config)
+            throws IOException {
+        this.stateProvider = session.getItemStateManager();
+        this.hmgr = session.getHierarchyManager();
+        this.fs = config.getFileSystem();
+
+        // set properties
+        BeanMap bm = new BeanMap(this);
+        try {
+            bm.putAll(config.getParameters());
+        } catch (IllegalArgumentException e) {
+            log.error("Invalid configuration: " + e.getMessage());
+        }
+    /**
+     * Adds a <code>Node</code> to the search index.
+     * @param node the NodeState to add.
+     * @param path the path of the node.
+     * @throws IOException if an error occurs while adding the node to
+     * the search index.
+     */
-        // FIXME rather throw RepositoryException?
-        log.debug("add node to index: " + path);
+        if (log.isDebugEnabled()) {
+            log.debug("add node to index: " + path);
+        }
-    public void updateNode(NodeState node, Path path) throws IOException {
-        log.debug("update index for node: " + path);
-        deleteNode(path, node.getUUID());
-        addNode(node, path);
-    }
-
+    /**
+     * Deletes the Node with <code>UUID</code> from the search index.
+     * @param path the path of the node to delete.
+     * @param uuid the <code>UUID</code> of the node to delete.
+     * @throws IOException if an error occurs while deleting the node.
+     */
+    /**
+     * Closes this <code>SearchManager</code> and also closes the
+     * {@link org.apache.jackrabbit.core.fs.FileSystem} passed in the
+     * constructor of this <code>SearchManager</code>.
+     */
+        try {
+            fs.close();
+        } catch (FileSystemException e) {
+            log.error("Exception closing FileSystem.", e);
+        }
+        Set added = new HashSet();
+                    added.add(e.getChildUUID());
-                    if (!modified.contains(e.getParentUUID())) {
-                        deleteNode(path, e.getParentUUID());
-                        modified.add(e.getParentUUID());
-                        pendingNodes.add(path);
+
+                    if (type == Event.PROPERTY_ADDED) {
+                        // do not delete and re-add if associated node got added too
+                        if (!added.contains(e.getParentUUID())) {
+                            deleteNode(path, e.getParentUUID());
+                            modified.add(e.getParentUUID());
+                            pendingNodes.add(path);
+                        }
-                        // already deleted
+                        if (!modified.contains(e.getParentUUID())) {
+                            deleteNode(path, e.getParentUUID());
+                            modified.add(e.getParentUUID());
+                            pendingNodes.add(path);
+                        } else {
+                            // already deleted
+                        }
+
+    //---------------------< properties >---------------------------------------
+
+    public void setUseCompoundFile(boolean b) {
+        index.setUseCompoundFile(b);
+    }
+
+    public void setMinMergeDocs(int minMergeDocs) {
+        index.setMinMergeDocs(minMergeDocs);
+    }
+
+    public void setMaxMergeDocs(int maxMergeDocs) {
+        index.setMaxMergeDocs(maxMergeDocs);
+    }
+
+    public void setMergeFactor(int mergeFactor) {
+        index.setMergeFactor(mergeFactor);
+    }
+

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS23 MOV44 INS31 INS31 INS31 INS31 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS83 INS83 MOV43 INS59 INS29 MOV21 INS29 INS29 INS29 MOV83 MOV39 UPD42 MOV42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 UPD42 INS44 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS65 UPD43 UPD42 INS21 INS60 INS54 INS65 INS65 INS65 INS65 INS25 INS65 INS65 INS65 INS65 INS65 MOV21 INS54 INS60 INS39 INS42 INS21 INS39 INS42 MOV21 INS39 INS42 INS21 INS39 INS42 INS21 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD42 INS7 INS43 INS59 INS8 INS12 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS32 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS8 INS12 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS22 INS32 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 MOV21 INS40 INS21 INS44 INS8 INS42 INS42 INS14 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS52 INS32 INS43 INS42 INS21 INS32 UPD43 MOV43 UPD42 MOV42 MOV21 INS43 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 INS45 INS42 INS45 INS32 INS21 INS42 INS42 INS32 INS8 INS42 INS42 INS32 MOV60 INS25 INS42 INS42 INS27 INS8 MOV8 INS42 INS40 INS25 INS38 INS8 INS32 INS21 INS21 INS21 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL45 DEL42 DEL27