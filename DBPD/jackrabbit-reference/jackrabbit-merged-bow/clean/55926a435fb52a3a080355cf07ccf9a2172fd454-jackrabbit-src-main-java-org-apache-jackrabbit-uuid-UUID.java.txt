Removing internal toString() caching in order to avoid memory problems for large repos. This is ok, since the toString() is no longer performance critical.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@417739 13f79535-47bb-0310-9956-ffa450edef68

- * <p><code>UUID</code> represents a Universally Unique Identifier per IETF
+ * <code>UUID</code> represents a Universally Unique Identifier per IETF
- * specification</p>
+ * specification
- * <p>See: http://www.ietf.org/internet-drafts/draft-mealling-uuid-urn-01.txt</p>
+ * See: http://www.ietf.org/internet-drafts/draft-mealling-uuid-urn-01.txt
-     * the cached string value
-     */
-    transient private String stringValue;
-
-    /**
-    private static VersionFourGenerator versionFourGenereator = new VersionFourGenerator();
+    private static VersionFourGenerator versionFourGenereator =
+            new VersionFourGenerator();
-     * <p>Constructs a UUID from a 16 byte array.</p>
+     * Constructs a UUID from a 16 byte array.
-            throw new IllegalArgumentException("UUID must be contructed using a 16 byte array.");
+            throw new IllegalArgumentException(
+                    "UUID must be contructed using a 16 byte array.");
-     * <p>Constructs a UUID from a DataInput. Note if 16 bytes are not available this method will block.</p>
+     * Constructs a UUID from a DataInput. Note if 16 bytes are not available
+     * this method will block.
-     * @throws java.io.IOException exception if there is an IO problem also argument must contain 16 bytes.
+     * @throws java.io.IOException exception if there is an IO problem also
+     *         argument must contain 16 bytes.
-     * <p>Constructs a UUID from two long values in most significant byte, and least significant bytes order.</p>
+     * Constructs a UUID from two long values in most significant byte, and
+     * least significant bytes order.
-     * @param mostSignificant  - the most significant 8 bytes of the uuid to be constructed.
-     * @param leastSignificant - the least significant 8 bytes of the uuid to be constructed.
+     * @param mostSignificant the most significant 8 bytes of the uuid to be
+     *        constructed.
+     * @param leastSignificant the least significant 8 bytes of the uuid to be
+     *        constructed.
-     * <p>Constructs a UUID from a UUID formatted String.</p>
+     * Constructs a UUID from a UUID formatted String.
-     * @throws IllegalArgumentException String must be a properly formatted UUID string
+     * @throws IllegalArgumentException String must be a properly formatted UUID
+     *         string
-     * <p>Parses a string for a UUID.</p>
+     * Parses a string for a UUID.
-     * @return Returns a UUID or null if the formatted string could not be parsed.
-     * @throws IllegalArgumentException the String must be a properly formatted UUID String.
+     * @return Returns a UUID or <code>null</code> if the formatted string could
+     *         not be parsed.
+     * @throws IllegalArgumentException the String must be a properly formatted
+     *         UUID String.
-    public static UUID fromString(String uuidString) throws IllegalArgumentException {
+    public static UUID fromString(String uuidString)
+            throws IllegalArgumentException {
-     * <p>Returns a string representation of the UUID.</p>
+     * Returns a string representation of the UUID.
-     * @return a string representation of the UUID formatted according to the specification.
+     * @return a string representation of the UUID formatted according to the
+     *         specification.
-        if (stringValue == null) {
-            char[] chars = new char[UUID_FORMATTED_LENGTH];
-            for (int i = 60, j = 0; i >= 0; i-=4) {
-                chars[j++] = hexDigits[(int) (msb >> i) & 0x0f];
-                if (j == 8 || j == 13 || j == 18) {
-                    chars[j++] = '-';
-                }
+        char[] chars = new char[UUID_FORMATTED_LENGTH];
+        for (int i = 60, j = 0; i >= 0; i-=4) {
+            chars[j++] = hexDigits[(int) (msb >> i) & 0x0f];
+            if (j == 8 || j == 13 || j == 18) {
+                chars[j++] = '-';
-            for (int i = 60, j = 19; i >= 0; i-=4) {
-                chars[j++] = hexDigits[(int) (lsb >> i) & 0x0f];
-                if (j == 23) {
-                    chars[j++] = '-';
-                }
-            }
-            stringValue = new String(chars);
-        return stringValue;
+        for (int i = 60, j = 19; i >= 0; i-=4) {
+            chars[j++] = hexDigits[(int) (lsb >> i) & 0x0f];
+            if (j == 23) {
+                chars[j++] = '-';
+            }
+        }
+        return new String(chars);
-     * <p>Compares two UUID for equality.</p>
+     * Compares two UUID for equality.
-     * <p>Returns a hash code value for the object.</p>
+     * Returns a hash code value for the object.
-     * <p>Compares two UUID's for equality</p>
+     * Compares two UUID's for equality
-     * <p>Returns the least significant bits stored in the uuid's internal structure.</p>
+     * Returns the least significant bits stored in the uuid's internal structure.
-     * <p>Returns the most significant bits stored in the uuid's internal structure.</p>
+     * Returns the most significant bits stored in the uuid's internal structure.
-     * <p>Returns a copy of the byte values contained in this UUID.
+     * Returns a copy of the byte values contained in this UUID.
-     * <p>Returns a new version 4 UUID, based upon Random bits.</p>
+     * Returns a new version 4 UUID, based upon Random bits.

MOV8 UPD66 UPD66 UPD66 INS41 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 INS66 MOV14 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL42 DEL41 DEL8