JCR-2896 : WebdavResponseImpl should cache TransformerFactory

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1071571 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.xml.SerializingContentHandler;
+import javax.xml.transform.Result;
+import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.sax.SAXResult;
+import javax.xml.transform.stream.StreamResult;
+import java.io.OutputStream;
+import java.io.Writer;
+     * Transformer factory
+     */
+    private static TransformerFactory TRANSFORMER_FACTORY = TransformerFactory.newInstance();
+
+    /**
+
+    /**
+     * Uses a new Transformer instance to transform the specified xml document
+     * to the specified writer output target.
+     *
+     * @param xmlDoc XML document to create the transformation
+     * <code>Source</code> for.
+     * @param writer The writer used to create a new transformation
+     * <code>Result </code>for.
+     * @throws TransformerException
+     */
+    public static void transformDocument(Document xmlDoc, Writer writer) throws TransformerException, SAXException {
+        Transformer transformer = TRANSFORMER_FACTORY.newTransformer();
+        transformer.transform(new DOMSource(xmlDoc), new SAXResult(SerializingContentHandler.getSerializer(new StreamResult(writer))));
+    }
+
+    /**
+     * Uses a new Transformer instance to transform the specified xml document
+     * to the specified writer output target.
+     *
+     * @param xmlDoc XML document to create the transformation
+     * <code>Source</code> for.
+     * @param out The stream used to create a new transformation
+     * <code>Result </code>for.
+     * @throws TransformerException
+     */
+    public static void transformDocument(Document xmlDoc, OutputStream out) throws TransformerException, SAXException {
+        Transformer transformer = TRANSFORMER_FACTORY.newTransformer();
+        transformer.transform(new DOMSource(xmlDoc), new SAXResult(SerializingContentHandler.getSerializer(new StreamResult(out))));
+    }
+
+    /**
+     * Uses a new Transformer instance to transform the given source to the
+     * specified result.
+     *
+     * @param source the transformation source.
+     * @param result the transformation result.
+     * @throws TransformerException
+     */
+    private static void transformDocument(Source source, Result result) throws TransformerException {
+        Transformer transformer = TRANSFORMER_FACTORY.newTransformer();
+        transformer.transform(source, result);
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS42 INS32 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS43 INS42 INS42 INS42