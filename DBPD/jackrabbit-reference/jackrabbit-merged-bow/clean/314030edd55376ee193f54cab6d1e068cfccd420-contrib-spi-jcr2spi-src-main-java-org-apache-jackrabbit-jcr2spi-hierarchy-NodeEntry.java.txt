improve memory consumption of the current hierarchy implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@542571 13f79535-47bb-0310-9956-ffa450edef68

-     * Returns the <code>NodeEntry</code> with the specified
-     * <code>NodeId</code> or <code>null</code> if there's no matching
-     * entry.
+     * Returns the valid <code>NodeEntry</code> with the specified name
+     * and index or <code>null</code> if there's no matching entry. If
+     * <code>loadIfNotFound</code> is true, the implementation must make
+     * sure, that it's list of child entries is up to date and eventually
+     * try to load the node entry.
-     * @param childId the id of the child entry.
-     * @return the <code>NodeEntry</code> with the specified
-     * <code>NodeId</code> or <code>null</code> if there's no matching entry.
+     * @param nodeName <code>QName</code> object specifying a node name.
+     * @param index 1-based index if there are same-name child node entries.
+     * @param loadIfNotFound
+     * @return The <code>NodeEntry</code> with the specified name and index
+     * or <code>null</code> if there's no matching entry.
-    public NodeEntry getNodeEntry(NodeId childId) throws RepositoryException;
+    public NodeEntry getNodeEntry(QName nodeName, int index, boolean loadIfNotFound) throws RepositoryException;
+     * @throws RepositoryException If an unexpected error occurs.
-    public PropertyEntry getPropertyEntry(QName propName);
+    public PropertyEntry getPropertyEntry(QName propName) throws RepositoryException;
+
+    /**
+     * Returns the valid <code>PropertyEntry</code> with the specified name
+     * or <code>null</code> if no matching entry exists.  If
+     * <code>loadIfNotFound</code> is true, the implementation must make
+     * sure, that it's list of property entries is up to date and eventually
+     * try to load the property entry with the given name.
+     *
+     * @param propName <code>QName</code> object specifying a property name.
+     * @param loadIfNotFound
+     * @return The <code>PropertyEntry</code> with the specified name or
+     * <code>null</code> if no matching entry exists.
+     * @throws RepositoryException If an unexpected error occurs.
+     */
+    public PropertyEntry getPropertyEntry(QName propName,  boolean loadIfNotFound) throws RepositoryException;
+     * Add an existing <code>PropertyEntry</code> with the given name.
+     * Please note the difference to {@link #addNewPropertyEntry(QName, QPropertyDefinition)
+     * which adds a new, transient entry.
-     * @return
+     * @return the <code>PropertyEntry</code>
+     * Add a new, transient <code>PropertyEntry</code> to this <code>NodeEntry</code>
+     * and return the <code>PropertyState</code> associated with the new entry.
+     * Moves this <code>NodeEntry</code> as new child entry of the
+     * <code>NodeEntry</code> identified by <code>newParent</code> and/or renames
+     * it to <code>newName</code>. If <code>transientMove</code> is true, an
+     * implementation must make sure, that reverting this modification by calling
+     * {@link HierarchyEntry#revert()} on the common ancestor of both parents
+     * moves this NodeEntry back and resets the name to its original value.
+     *

INS31 INS44 INS44 INS43 MOV43 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS65 INS65 INS65 UPD43 UPD42 INS39 INS42 INS39 INS42 INS42 MOV65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS65 INS65 INS65 UPD66 UPD66 INS66 INS66 UPD66 INS42 INS66 UPD42 UPD66 INS42 UPD66 UPD66 INS42 INS66 UPD42 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS68 INS66 INS68 INS42 INS69 INS69 INS42 INS42 INS43 INS43 INS42 INS42