redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

- * Copyright 2004-2005 The Apache Software Foundation or its licensors,
- *                     as applicable.
+ * Copyright 2004 The Apache Software Foundation.
+import javax.jcr.nodetype.NodeDef;
+import javax.jcr.nodetype.PropertyDef;
-class PersistentNode {
+public class PersistentNode {
-    private PersistentNodeState nodeState;
+    private NodeState nodeState;
-    private final PersistentItemStateProvider stateMgr;
+    private final ItemStateManager stateMgr;
+
+    /**
+     * the node type manager
+     */
+    private final NodeTypeManagerImpl ntMgr;
-     * @param statemgr
+     * @param stateMgr
+     * @param ntMgr
-    protected PersistentNode(PersistentItemStateProvider statemgr,
-                             PersistentNodeState nodeState) {
+    protected PersistentNode(ItemStateManager stateMgr,
+                             NodeTypeManagerImpl ntMgr,
+                             NodeState nodeState) {
-        this.stateMgr = statemgr;
+        this.stateMgr = stateMgr;
+        this.ntMgr = ntMgr;
-    protected PersistentNodeState getState() {
+    protected NodeState getState() {
-        PersistentPropertyState prop = getOrCreatePropertyState(name, type, multiple);
+
+        PropertyState prop = getOrCreatePropertyState(name, type, multiple);
-    private PersistentPropertyState getOrCreatePropertyState(QName name, int type, boolean multiValued)
+    private PropertyState getOrCreatePropertyState(QName name, int type, boolean multiValued)
-                PersistentPropertyState propState = (PersistentPropertyState) stateMgr.getItemState(propId);
+                PropertyState propState = (PropertyState) stateMgr.getItemState(propId);
-                if (propState.getStatus()==ItemState.STATUS_EXISTING) {
-                    propState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-                }
-                // although this is not quite correct, we mark node as modified aswell
-                if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
-                    nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-                }
+                propState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-            try {
-                PersistentPropertyState propState = stateMgr.createPropertyState(nodeState.getUUID(), name);
-                propState.setType(type);
-                propState.setMultiValued(multiValued);
-                propState.setDefinitionId(PropDefId.valueOf("0"));
-                // need to store nodestate
-                nodeState.addPropertyEntry(name);
-                if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
-                    nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-                }
-                return propState;
-            } catch (ItemStateException e) {
-                throw new RepositoryException("Unable to store property: " + e.toString());
-            }
+            PropertyDefImpl def = getApplicablePropertyDef(name, type, multiValued);
+            //@todo create property state inside an update
+            PropertyState propState = new PropertyState(name, nodeState.getUUID(),
+                    PropertyState.STATUS_NEW, false);
+            propState.setType(type);
+            propState.setMultiValued(multiValued);
+            propState.setDefinitionId(new PropDefId(def.unwrap()));
+
+            // need to store nodestate
+            nodeState.addPropertyEntry(name);
+            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+            return propState;
+        }
+    }
+
+    /**
+     * retrieves the property definition for the given contraints
+     *
+     * @param propertyName
+     * @param type
+     * @param multiValued
+     * @return
+     * @throws RepositoryException
+     */
+    protected PropertyDefImpl getApplicablePropertyDef(QName propertyName,
+                                                       int type, boolean multiValued)
+            throws RepositoryException {
+        PropDef pd = getEffectiveNodeType().getApplicablePropertyDef(propertyName, type, multiValued);
+        return ntMgr.getPropDef(new PropDefId(pd));
+    }
+
+    /**
+     * Retrieves the node definition for the given contraints.
+     *
+     * @param nodeName
+     * @param nodeTypeName
+     * @return
+     * @throws RepositoryException
+     */
+    protected NodeDefImpl getApplicableChildNodeDef(QName nodeName, QName nodeTypeName)
+            throws RepositoryException {
+        ChildNodeDef cnd = getEffectiveNodeType().getApplicableChildNodeDef(nodeName, nodeTypeName);
+        return ntMgr.getNodeDef(new NodeDefId(cnd));
+    }
+
+    /**
+     * Returns the effective (i.e. merged and resolved) node type representation
+     * of this node's primary and mixin node types.
+     *
+     * @return the effective node type
+     * @throws RepositoryException
+     */
+    protected EffectiveNodeType getEffectiveNodeType() throws RepositoryException {
+        // build effective node type of mixins & primary type
+        NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
+        // existing mixin's
+        HashSet set = new HashSet(nodeState.getMixinTypeNames());
+        // primary type
+        set.add(nodeState.getNodeTypeName());
+        try {
+            return ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+        } catch (NodeTypeConflictException ntce) {
+            String msg = "internal error: failed to build effective node type for node " + nodeState.getUUID();
+            throw new RepositoryException(msg, ntce);
-            if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
-                nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-            }
+            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-            PersistentNodeState state = (PersistentNodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
-            return new PersistentNode(stateMgr, state);
+            NodeState state = (NodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
+            return new PersistentNode(stateMgr, ntMgr, state);
-            PersistentNodeState state = (PersistentNodeState) stateMgr.getItemState(new NodeId(uuid));
-            return new PersistentNode(stateMgr, state);
+            NodeState state = (NodeState) stateMgr.getItemState(new NodeId(uuid));
+            return new PersistentNode(stateMgr, ntMgr, state);
-        return createChildNode(nodeName, nodeTypeName, null);
+        NodeTypeImpl nodeType = ntMgr.getNodeType(nodeTypeName);
+        NodeDefImpl def;
+        try {
+            def = getApplicableChildNodeDef(name, nodeType == null ? null : nodeType.getQName());
+        } catch (RepositoryException re) {
+            // hack, use nt:unstructured as parent
+            try {
+                NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
+                EffectiveNodeType ent = ntReg.getEffectiveNodeType(new QName[]{NodeTypeRegistry.NT_UNSTRUCTURED});
+                ChildNodeDef cnd = ent.getApplicableChildNodeDef(name, nodeTypeName);
+                def = ntMgr.getNodeDef(new NodeDefId(cnd));
+            } catch (NodeTypeConflictException e) {
+                String msg = "no definition found in parent node's node type for new node";
+                throw new ConstraintViolationException(msg, re);
+            }
+        }
+
+        if (nodeType == null) {
+            // use default node type
+            nodeType = (NodeTypeImpl) def.getDefaultPrimaryType();
+        }
+        return createChildNode(nodeName, def, nodeType, null);
+     * @param def
+     * @param nodeType
-    private PersistentNode createChildNode(QName name, QName nodeTypeName, String uuid)
+    private PersistentNode createChildNode(QName name, NodeDefImpl def,
+                                           NodeTypeImpl nodeType, String uuid)
-        PersistentNodeState state = null;
-        try {
-            if (uuid == null) {
-                uuid = UUID.randomUUID().toString();	// version 4 uuid
-            }
-            state = stateMgr.createNodeState(uuid, nodeTypeName, parentUUID);
-            state.setDefinitionId(NodeDefId.valueOf("0"));
-        } catch (ItemStateException ise) {
-            String msg = "failed to add child node " + name + " to " + parentUUID;
-            throw new RepositoryException(msg, ise);
+        NodeState state = null;
+        if (uuid == null) {
+            uuid = UUID.randomUUID().toString();	// version 4 uuid
+        //@todo create node state inside an update
+        state = new NodeState(uuid, nodeType.getQName(), parentUUID,
+                NodeState.STATUS_NEW, false);
+        state.setDefinitionId(new NodeDefId(def.unwrap()));
-        PersistentNode node = new PersistentNode(stateMgr, state);
+        PersistentNode node = new PersistentNode(stateMgr, ntMgr, state);
-        if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
-            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+        nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+
+        // add 'auto-create' properties defined in node type
+        PropertyDef[] pda = nodeType.getAutoCreatePropertyDefs();
+        for (int i = 0; i < pda.length; i++) {
+            PropertyDefImpl pd = (PropertyDefImpl) pda[i];
+            node.getOrCreatePropertyState(pd.getQName(), pd.getRequiredType(), pd.isMultiple());
+
+        // recursively add 'auto-create' child nodes defined in node type
+        NodeDef[] nda = nodeType.getAutoCreateNodeDefs();
+        for (int i = 0; i < nda.length; i++) {
+            NodeDefImpl nd = (NodeDefImpl) nda[i];
+            node.createChildNode(nd.getQName(), nd, (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
+        }
+
+        // store primary type
+        node.setPropertyValue(ItemImpl.PROPNAME_PRIMARYTYPE, InternalValue.create(nodeType.getQName()));
-                PersistentNodeState state = (PersistentNodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
-                children[i] = new PersistentNode(stateMgr, state);
+                NodeState state = (NodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
+                children[i] = new PersistentNode(stateMgr, ntMgr, state);
-            store(nodeState);
+            UpdateOperation update = stateMgr.beginUpdate();
+            store(nodeState, update);
+            update.end();
+     * @param update update operation
-    private void store(PersistentNodeState state) throws ItemStateException {
+    private void store(NodeState state, UpdateOperation update)
+            throws ItemStateException {
+
-                PersistentPropertyState pstate = (PersistentPropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), entry.getName()));
+                PropertyState pstate = (PropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), entry.getName()));
-                    pstate.store();
+                    update.store(pstate);
-                PersistentNodeState nstate = (PersistentNodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
-                store(nstate);
+                NodeState nstate = (NodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
+                store(nstate, update);
-            state.store();
+            update.store(state);
-            nodeState = (PersistentNodeState) stateMgr.getItemState(nodeState.getId());
+            nodeState = (NodeState) stateMgr.getItemState(nodeState.getId());
-    private void reload(PersistentNodeState state) throws ItemStateException {
+    private void reload(NodeState state) throws ItemStateException {
-                PersistentPropertyState pstate = (PersistentPropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), entry.getName()));
+                PropertyState pstate = (PropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), entry.getName()));
-                PersistentNodeState nstate = (PersistentNodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
+                NodeState nstate = (NodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
-            setPropertyValues(prop.getQName(), values[0].getType(), values);
+            int type = values.length>0 ? values[0].getType() : prop.getDefinition().getRequiredType();
+            setPropertyValues(prop.getQName(), type, values);

INS26 INS26 INS40 INS40 INS83 INS23 INS31 INS31 INS31 UPD43 UPD43 INS29 INS83 INS83 INS43 INS59 INS44 UPD43 UPD43 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 MOV44 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS44 INS44 INS44 UPD42 UPD42 INS65 INS42 INS42 INS65 UPD43 UPD42 INS43 INS42 UPD43 INS21 UPD42 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS41 INS65 INS65 INS65 INS42 INS42 INS60 INS60 INS21 INS54 INS60 INS60 INS54 INS25 INS65 INS65 INS43 INS42 INS43 INS42 MOV25 MOV21 MOV21 INS60 MOV21 INS60 INS24 INS60 INS24 MOV21 INS65 UPD43 INS43 INS42 UPD43 INS66 UPD42 INS42 UPD42 INS42 UPD42 INS7 UPD43 MOV8 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS66 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS66 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS27 INS8 INS42 INS42 INS42 INS42 UPD43 MOV43 INS59 INS5 INS59 MOV58 INS27 MOV37 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS66 UPD42 INS42 UPD42 UPD42 INS22 INS42 UPD42 INS60 MOV21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS41 INS44 INS8 INS21 INS60 INS41 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS21 INS42 UPD42 UPD42 INS14 INS14 INS42 INS14 INS43 INS85 INS42 INS32 INS42 INS40 MOV60 INS21 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 MOV60 INS21 UPD42 UPD42 UPD40 INS32 INS60 INS21 INS24 INS21 MOV24 INS60 INS52 INS42 INS43 INS59 UPD43 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS43 INS42 INS60 INS53 INS32 INS43 INS59 INS14 UPD43 INS42 INS42 INS42 INS7 MOV43 INS42 INS54 INS7 INS43 INS42 INS32 INS42 INS40 INS9 INS43 INS32 MOV43 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS34 UPD43 INS32 INS42 INS42 INS32 INS43 INS59 INS32 MOV58 MOV27 MOV37 INS8 INS58 INS37 INS32 MOV58 MOV27 MOV37 MOV8 INS39 INS59 MOV21 INS42 INS42 INS32 UPD42 INS14 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS43 INS59 INS14 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS11 INS43 INS42 INS42 INS42 UPD42 MOV43 INS42 INS42 INS32 INS8 INS12 INS42 INS11 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 INS11 INS42 INS42 INS32 INS32 INS32 UPD42 UPD42 INS11 UPD42 MOV42 INS42 INS32 INS42 INS11 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 MOV60 INS60 INS25 INS39 INS59 INS42 INS42 INS42 INS42 MOV60 MOV60 MOV21 INS42 INS16 INS42 UPD43 INS42 INS42 INS42 INS42 INS43 INS42 MOV32 INS40 INS9 INS43 INS32 INS5 INS32 INS42 INS42 INS27 MOV43 INS42 INS42 INS43 INS32 INS42 UPD43 INS42 INS42 INS42 INS16 INS60 INS60 INS60 INS21 INS44 INS8 INS43 INS32 INS43 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS2 INS42 UPD42 MOV42 INS43 INS32 UPD43 INS42 INS42 INS43 INS59 MOV32 INS8 INS42 INS34 UPD43 UPD43 UPD43 MOV32 UPD43 INS27 MOV32 INS32 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS43 INS85 INS42 INS42 INS3 INS45 INS32 INS42 INS42 INS42 INS14 UPD42 INS27 INS33 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS7 INS43 INS42 INS60 INS53 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS11 MOV21 UPD42 INS42 UPD42 UPD42 MOV21 UPD42 UPD42 INS40 INS34 INS32 INS42 UPD43 INS42 INS5 INS32 INS42 INS42 INS43 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 MOV43 INS59 INS14 UPD43 MOV43 INS42 INS43 MOV32 UPD43 UPD43 MOV32 UPD43 INS42 INS42 UPD42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS45 INS43 INS42 INS42 UPD42 MOV42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS5 INS4 INS43 INS42 INS42 MOV43 MOV32 INS43 INS85 INS40 INS42 MOV42 INS42 DEL42 DEL42 DEL32 DEL40 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL40 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL32 DEL40 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL14 DEL32 DEL40 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL11 DEL59 DEL60 DEL8 DEL24 DEL42 DEL42 DEL14 DEL41 DEL42 DEL43 DEL42 DEL42 DEL43 DEL11 DEL59 DEL60 DEL8