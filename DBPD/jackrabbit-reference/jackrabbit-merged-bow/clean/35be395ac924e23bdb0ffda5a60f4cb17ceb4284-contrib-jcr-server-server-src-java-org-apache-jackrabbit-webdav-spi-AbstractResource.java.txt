- [JCR-84] WebDAV LocatorFactoryImpl$Locator.getHref() constructs root resource URLs incorrectly
- adapting for jcr-locking support
- adding nodetype reports

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159607 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.version.SupportedMethodSetProperty;
+import org.apache.jackrabbit.webdav.version.*;
+import org.apache.jackrabbit.webdav.version.report.Report;
+import org.apache.jackrabbit.webdav.version.report.ReportInfo;
+import org.apache.jackrabbit.webdav.version.report.ReportType;
+import org.apache.jackrabbit.webdav.version.report.SupportedReportSetProperty;
+import org.apache.jackrabbit.webdav.property.ResourceType;
+import javax.jcr.Session;
-        TransactionResource {
+        TransactionResource, DeltaVResource {
+    protected SupportedReportSetProperty supportedReports = new SupportedReportSetProperty();
+
+	// initialize the supported locks and reports
+        initLockSupport();
+        initSupportedReports();
+    //-------------------------------------------< DeltaVResource interface >---
+    /**
+     * @param optionsInfo
+     * @return object to be used in the OPTIONS response body or <code>null</code>
+     * @see DeltaVResource#getOptionResponse(org.apache.jackrabbit.webdav.version.OptionsInfo)
+     */
+    public OptionsResponse getOptionResponse(OptionsInfo optionsInfo) {
+        OptionsResponse oR = null;
+        if (optionsInfo != null) {
+            oR = new OptionsResponse();
+            // currently on DAV:version-history-collection-set and
+            // DAV:workspace-collection-set is supported.
+            if (optionsInfo.containsElement(DeltaVConstants.XML_VH_COLLECTION_SET, DeltaVConstants.NAMESPACE)) {
+                String[] hrefs = new String[] { getLocatorFromResourcePath(ItemResourceConstants.VERSIONSTORAGE_PATH).getHref(true)};
+                oR.addEntry(DeltaVConstants.XML_VH_COLLECTION_SET, DeltaVConstants.NAMESPACE, hrefs);
+            } else if (optionsInfo.containsElement(DeltaVConstants.XML_WSP_COLLECTION_SET, DeltaVConstants.NAMESPACE)) {
+                // workspaces cannot be created anywhere.
+                oR.addEntry(DeltaVConstants.XML_WSP_COLLECTION_SET, DeltaVConstants.NAMESPACE, new String[0]);
+            }
+        }
+        return oR;
+    }
+
+    /**
+     * @param reportInfo
+     * @return the requested report
+     * @throws DavException
+     * @see DeltaVResource#getReport(org.apache.jackrabbit.webdav.version.report.ReportInfo)
+     */
+    public Report getReport(ReportInfo reportInfo) throws DavException {
+        if (reportInfo == null) {
+            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "A REPORT request must provide a valid XML request body.");
+        }
+        if (!exists()) {
+            throw new DavException(DavServletResponse.SC_NOT_FOUND);
+        }
+
+        if (supportedReports.isSupportedReport(reportInfo)) {
+            try {
+                Report report = ReportType.getType(reportInfo).createReport();
+                report.setInfo(reportInfo);
+                report.setResource(this);
+                return report;
+            } catch (IllegalArgumentException e) {
+                // should never occur.
+                throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
+            }
+        } else {
+            throw new DavException(DavServletResponse.SC_UNPROCESSABLE_ENTITY, "Unkown report "+ reportInfo.getReportElement().getNamespacePrefix() + reportInfo.getReportElement().getName() +"requested.");
+        }
+    }
+
+    /**
+     * The JCR api does not provide methods to create new workspaces. Calling
+     * <code>addWorkspace</code> on this resource will always fail.
+     *
+     * @param workspace
+     * @throws DavException Always throws.
+     * @see DeltaVResource#addWorkspace(org.apache.jackrabbit.webdav.DavResource)
+     */
+    public void addWorkspace(DavResource workspace) throws DavException {
+        throw new DavException(DavServletResponse.SC_FORBIDDEN);
+    }
+
+    /**
+     * Return an array of <code>DavResource</code> objects that are referenced
+     * by the property with the specified name.
+     *
+     * @param hrefPropertyName
+     * @return array of <code>DavResource</code>s
+     * @throws DavException
+     * @see DeltaVResource#getReferenceResources(org.apache.jackrabbit.webdav.property.DavPropertyName)
+     */
+    public DavResource[] getReferenceResources(DavPropertyName hrefPropertyName) throws DavException {
+        DavProperty prop = getProperty(hrefPropertyName);
+        if (prop == null || !(prop instanceof HrefProperty)) {
+            throw new DavException(DavServletResponse.SC_CONFLICT, "Unknown Href-Property '"+hrefPropertyName+"' on resource "+getResourcePath());
+        }
+
+        List hrefs = ((HrefProperty)prop).getHrefs();
+        DavResource[] refResources = new DavResource[hrefs.size()];
+        Iterator hrefIter = hrefs.iterator();
+        int i = 0;
+        while (hrefIter.hasNext()) {
+            refResources[i] = getResourceFromHref((String)hrefIter.next());
+            i++;
+        }
+        return refResources;
+    }
+
+    /**
+     * Retrieve the <code>DavResource</code> object that is represented by
+     * the given href String.
+     *
+     * @param href
+     * @return <code>DavResource</code> object
+     */
+    private DavResource getResourceFromHref(String href) throws DavException {
+        // build a new locator: remove trailing prefix
+        DavResourceLocator locator = getLocator();
+        String prefix = locator.getPrefix();
+        if (href.startsWith(prefix)) {
+            href = href.substring(prefix.length());
+        }
+        DavResourceLocator loc = locator.getFactory().createResourceLocator(prefix, href);
+
+        // create a new resource object
+        DavResource res;
+        if (getRepositorySession().itemExists(loc.getResourcePath())) {
+            res = createResourceFromLocator(loc);
+        } else {
+            throw new DavException(DavServletResponse.SC_NOT_FOUND);
+        }
+        return res;
+    }
+
+
+	// DeltaV properties
+	properties.add(supportedReports);
+	// creator-displayname, comment: not value available from jcr
+	properties.add(new DefaultDavProperty(DeltaVConstants.CREATOR_DISPLAYNAME, null, true));
+	properties.add(new DefaultDavProperty(DeltaVConstants.COMMENT, null, true));
+
+	// 'workspace' property as defined by RFC 3253
+	String workspaceHref = getWorkspaceHref();
+	if (workspaceHref != null) {
+	    properties.add(new HrefProperty(DeltaVConstants.WORKSPACE, workspaceHref, true));
+	}
+	// TODO: required supported-live-property-set
+
+    /**
+     * Shortcut for <code>getSession().getRepositorySession()</code>
+     *
+     * @return repository session present in the {@link #session}.
+     */
+    protected Session getRepositorySession() {
+        return getSession().getRepositorySession();
+    }
+
+    /**
+     * Define the set of locks supported by this resource.
+     *
+     * @see org.apache.jackrabbit.webdav.lock.SupportedLock
+     */
+    abstract protected void initLockSupport();
+
+    /**
+     * Define the set of reports supported by this resource.
+     *
+     * @see org.apache.jackrabbit.webdav.version.report.SupportedReportSetProperty
+     */
+    abstract protected void initSupportedReports();
+
+    /**
+     * Retrieve the href of the workspace the current session belongs to.
+     *
+     * @return href of the workspace
+     */
+    abstract protected String getWorkspaceHref();

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS29 INS83 INS83 INS39 INS42 INS29 INS83 INS83 INS43 INS42 INS42 INS42 INS14 INS21 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS25 INS25 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS53 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS42 INS60 INS25 INS60 INS60 INS60 INS60 INS61 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS25 INS41 INS21 INS21 INS21 INS60 INS25 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS32 INS32 INS42 INS66 INS68 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS66 INS42 INS68 INS42 INS27 INS8 INS38 INS8 INS32 INS8 INS8 INS66 INS66 INS42 INS42 INS66 INS68 INS42 INS14 INS66 INS66 INS42 INS66 INS42 INS68 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS5 INS59 INS43 INS59 INS39 INS59 INS32 INS8 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS66 INS66 INS65 INS66 INS32 INS66 INS40 INS66 INS40 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS33 INS42 INS33 INS21 INS25 INS42 INS42 INS69 INS42 INS33 INS53 INS32 INS53 INS42 INS42 INS42 INS54 INS53 INS42 INS42 INS69 INS43 INS40 INS42 INS42 INS69 INS42 INS42 INS32 INS27 INS38 INS53 INS42 INS42 INS32 INS43 INS85 INS42 INS3 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS67 INS32 INS42 INS43 INS7 INS32 INS8 INS25 INS43 INS14 INS42 INS14 INS8 INS12 INS14 INS43 INS42 INS43 INS42 INS42 INS42 INS33 INS36 INS14 INS36 INS42 INS42 INS5 INS32 INS42 INS42 INS7 INS37 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS14 INS43 INS40 INS33 INS9 INS43 INS40 INS33 INS9 INS42 INS32 INS42 INS42 INS40 INS42 INS14 INS42 INS42 INS40 INS40 INS60 INS21 INS32 INS8 INS40 INS43 INS40 INS45 INS43 INS40 INS60 INS21 INS21 INS41 INS44 INS8 INS43 INS40 INS27 INS40 INS40 INS62 INS43 INS40 INS27 INS11 INS43 INS85 INS42 INS42 INS2 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS40 INS42 INS42 INS42 INS42 INS14 INS43 INS5 INS59 INS32 INS42 INS42 INS40 INS40 INS21 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS43 INS42 INS53 INS42 INS45 INS32 INS32 INS45 INS42 INS43 INS42 INS45 INS42 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS40 INS42 INS9 INS42 INS43 INS85 INS42 INS3 INS42 INS42 INS40 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS14 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS5 INS4 INS42 INS42 INS40 INS40 INS3 INS32 INS42 INS43 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS5 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS43 INS85 INS42 INS40 INS42