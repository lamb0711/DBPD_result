JCR-3275: Audit log
- add log on external update

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1329195 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.spi.commons.conversion.CachingPathResolver;
+import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.apache.jackrabbit.spi.commons.conversion.ParsingPathResolver;
+import org.apache.jackrabbit.spi.commons.conversion.PathResolver;
+import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
+
+import javax.jcr.NamespaceException;
+import java.util.List;
+     * The caching path resolver.
+     */
+    private static CachingPathResolver cachingPathResolver;
+
+    /**
+
+    /**
+     * Get the longest common path of all event state paths.
+     *
+     * @param events The list of EventState
+     * @param session The associated session; it can be null
+     * @return the longest common path
+     */
+    public static String getCommonPath(List<EventState> events, SessionImpl session) {
+        String common = null;
+        try {
+            for (int i = 0; i < events.size(); i++) {
+                EventState state = events.get(i);
+                Path parentPath = state.getParentPath();
+                String s;
+                if (session == null) {
+                    s = getJCRPath(parentPath);
+                } else {
+                    s = session.getJCRPath(parentPath);
+                }
+
+                if (common == null) {
+                    common = s;
+                } else if (!common.equals(s)) {
+
+                    // Assign the shorter path to common.
+                    if (s.length() < common.length()) {
+                        String temp = common;
+                        common = s;
+                        s = temp;
+                    }
+
+                    // Find the real common.
+                    while (!s.startsWith(common)) {
+                        int idx = s.lastIndexOf('/');
+                        if (idx < 0) {
+                            break;
+                        }
+                        common = s.substring(0, idx + 1);
+                    }
+                }
+            }
+        } catch (NamespaceException e) {
+            log.debug("Problem in retrieving JCR path", e);
+        }
+        return common;
+    }
+
+    private static String getJCRPath(Path path) {
+ 
+        setupCachingPathResolver();
+
+        String jcrPath;
+        try {
+            jcrPath = cachingPathResolver.getJCRPath(path);
+        } catch (NamespaceException e) {
+            jcrPath = "";
+            log.debug("Problem in retrieving JCR path", e);
+        }
+        return jcrPath;
+    }
+
+    private static void setupCachingPathResolver() {
+        if (cachingPathResolver != null) {
+            return;
+        }
+
+        PathResolver pathResolver = new ParsingPathResolver(PathFactoryImpl.getInstance(), new NameResolver() {
+            public Name getQName(String name) throws IllegalNameException, NamespaceException {
+                return null;
+            }
+
+            public String getJCRName(Name name) throws NamespaceException {
+                return name.getLocalName();
+            }
+        });
+
+        cachingPathResolver = new CachingPathResolver(pathResolver);
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS8 INS65 INS42 INS42 INS65 INS65 INS65 INS65 INS42 INS74 INS42 INS43 INS42 INS60 INS54 INS41 INS42 INS43 INS42 INS21 INS60 INS54 INS41 INS25 INS60 INS21 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS43 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS42 INS27 INS8 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS33 INS24 INS44 INS8 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS41 INS42 INS42 INS14 INS42 INS14 INS58 INS27 INS37 INS8 INS43 INS42 INS21 INS7 INS43 INS42 INS21 INS21 INS43 INS32 INS14 INS43 INS42 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS60 INS25 INS25 INS42 INS32 INS42 INS32 INS42 INS7 INS32 INS42 INS42 INS42 INS43 INS1 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS31 INS31 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS38 INS8 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS32 INS25 INS61 INS42 INS43 INS42 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS41 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS38 INS8 INS42 INS33 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS60 INS21 INS21 INS32 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS7 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS10 INS42 INS32 INS42 INS42 INS13 INS42 INS42 INS34 INS27 INS42 INS34