Replace tabs with spaces

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@790939 13f79535-47bb-0310-9956-ffa450edef68

-            	AbstractLockInfo info = (AbstractLockInfo) element.get();
+                AbstractLockInfo info = (AbstractLockInfo) element.get();
-            	AbstractLockInfo info = list.get(i);
+                AbstractLockInfo info = list.get(i);
-            	checkLock(info, session);
+                checkLock(info, session);
-     * 
+     *
-    protected void checkLock(LockInfo info, Session session) 
-    		throws LockException, RepositoryException {
-    	
-    	if (!info.isLockHolder(session)) {
+    protected void checkLock(LockInfo info, Session session)
+            throws LockException, RepositoryException {
+
+        if (!info.isLockHolder(session)) {
-    		throws LockException, RepositoryException {
+            throws LockException, RepositoryException {
-	    // check whether node is locked by this session
-	    PathMap.Element element = lockMap.map(
-	    		getPath((SessionImpl) session, node.getId()), true);
-	    if (element == null) {
-	        throw new LockException("Node not locked: " + node);
-	    }
-	    AbstractLockInfo info = (AbstractLockInfo) element.get();
-	    if (info == null) {
-	        throw new LockException("Node not locked: " + node);
-	    }
-	    checkUnlock(info, session);
+        // check whether node is locked by this session
+        PathMap.Element element = lockMap.map(getPath((SessionImpl) session,
+                node.getId()), true);
+        if (element == null) {
+            throw new LockException("Node not locked: " + node);
+        }
+        AbstractLockInfo info = (AbstractLockInfo) element.get();
+        if (info == null) {
+            throw new LockException("Node not locked: " + node);
+        }
+        checkUnlock(info, session);
-     * 
+     *
-    		throws LockException, RepositoryException {
-    	
-	    if (!info.isLockHolder(session)) {
-	        throw new LockException("Node not locked by session: " + info.getId());
-	    }
+            throws LockException, RepositoryException {
+
+        if (!info.isLockHolder(session)) {
+            throw new LockException("Node not locked by session: "
+                    + info.getId());
+        }
-    
+
-                	if (info.isLockHolder(session)) {
-                		// nothing to do
-                	} else if (info.getLockHolder() == null) {
+                    if (info.isLockHolder(session)) {
+                        // nothing to do
+                    } else if (info.getLockHolder() == null) {
-    public void removeLockToken(SessionImpl session, String lt) 
-    		throws LockException, RepositoryException {
-    	
+    public void removeLockToken(SessionImpl session, String lt)
+            throws LockException, RepositoryException {
+
-            NodeImpl node = (NodeImpl)
-                this.sysSession.getItemManager().getItem(lockToken.getId());
+            NodeImpl node = (NodeImpl) this.sysSession.getItemManager()
+                    .getItem(lockToken.getId());
-                	if (info.isLockHolder(session)) {
+                    if (info.isLockHolder(session)) {
-                	} else if (info.getLockHolder() == null) {
-                		// nothing to do
+                    } else if (info.getLockHolder() == null) {
+                        // nothing to do
-            	AbstractLockInfo info = (AbstractLockInfo) element.get();
+                AbstractLockInfo info = (AbstractLockInfo) element.get();
-        	AbstractLockInfo info = infos.get(i);
+            AbstractLockInfo info = infos.get(i);
-                NodeImpl node = (NodeImpl) sysSession.getItemManager().
-                        getItem(info.getId());
+                NodeImpl node = (NodeImpl) sysSession.getItemManager().getItem(
+                        info.getId());
-        
+

