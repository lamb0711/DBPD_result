- Use ItemStateLifeCycleListener instead of ItemStateListener in ItemImpl.
- Remove usage of ItemState.dispose() and the method itself.
- Remove method ItemStateListener.stateDiscarded() and all implementations of that method.
- Remove unused methods in ChangeLog: disconnect() and undo()
- Remove ItemState.discard() and related methods
- Rename ItemState.copy() to ItemState.copyFrom()
- Remove ItemState.STATUS_UNDEFINED. An ItemState always has a defined status!
- Rename TransientItemStateManager.disposeAllItemStates() to simply dispose().
- Introduce method ItemState.refresh() which is called instead of discard(). (Not yet implemented!)
- Clarify useage of WorkspaceManager.onEventReceived()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@433998 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.ItemStateListener;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateLifeCycleListener;
-public abstract class ItemImpl implements Item, ItemStateListener {
+public abstract class ItemImpl implements Item, ItemStateLifeCycleListener {
-    //--------------------------------------------------< ItemStateListener >---
+    //-----------------------------------------< ItemStateLifeCycleListener >---
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDiscarded(ItemState discarded) {
-        /**
-         * the state of this item has been discarded, probably as a result
-         * of calling Node.revert() or ItemImpl.setRemoved()
-         */
-        if (isTransient()) {
-            switch (state.getStatus()) {
-                /**
-                 * persistent item that has been transiently removed
-                 */
-                case ItemState.STATUS_EXISTING_REMOVED:
-                    /**
-                     * persistent item that has been transiently modified
-                     */
-                case ItemState.STATUS_EXISTING_MODIFIED:
-                    /**
-                     * persistent item that has been transiently modified or removed
-                     * and the underlying persistent state has been externally
-                     * modified since the transient modification/removal.
-                     */
-                case ItemState.STATUS_STALE_MODIFIED:
-                    ItemState persistentState = state.getOverlayedState();
-                    /**
-                     * the state is a transient wrapper for the underlying
-                     * persistent state, therefore restore the
-                     * persistent state and resurrect this item instance
-                     * if necessary
-                     */
-                    // DIFF JACKRABBIT: this is now done in stateUncovering()
-//                    state.removeListener(this);
-//                    persistentState.addListener(this);
-//                    itemStateMgr.disconnectTransientItemState(state);
-//                    state = persistentState;
-
-                    return;
-
-                    /**
-                     * persistent item that has been transiently modified or removed
-                     * and the underlying persistent state has been externally
-                     * destroyed since the transient modification/removal.
-                     */
-                case ItemState.STATUS_STALE_DESTROYED:
-                    /**
-                     * first notify the listeners that this instance has been
-                     * permanently invalidated
-                     */
-                    notifyDestroyed();
-                    // finally dispose state
-                    state.removeListener(this);
-                    state = null;
-                    return;
-
-                    /**
-                     * new item that has been transiently added
-                     */
-                case ItemState.STATUS_NEW:
-                    /**
-                     * first notify the listeners that this instance has been
-                     * permanently invalidated
-                     */
-                    notifyDestroyed();
-                    // finally dispose state
-                    state.removeListener(this);
-                    state = null;
-                    return;
-            }
+    public void statusChanged(ItemState state, int previousStatus) {
+        // TODO: remove this ItemImpl as listener from ItemState when it is destroyed?
+        switch (state.getStatus()) {
+            case ItemState.STATUS_EXISTING:
+                // this item was modified and is now reverted or has been saved
+                // -> nothing to do
+                break;
+            case ItemState.STATUS_EXISTING_MODIFIED:
+                // item was modified and is not existing-modified
+                // -> nothing to do
+                break;
+            case ItemState.STATUS_EXISTING_REMOVED:
+                // item is transiently removed
+                // notify listeners of this item that this item has been destroyed
+                notifyDestroyed();
+                break;
+            case ItemState.STATUS_NEW:
+                // should never happen. an item cannot change its state to new
+                log.warn("invalid state change to STATUS_NEW");
+                break;
+            case ItemState.STATUS_REMOVED:
+                // item has been removed permanently
+                notifyDestroyed();
+                break;
+            case ItemState.STATUS_STALE_DESTROYED:
+                // item has been removed permanently while there were transient
+                // changes pending
+                notifyDestroyed();
+                break;
+            case ItemState.STATUS_STALE_MODIFIED:
+                // item has been modified externaly while there were transient
+                // changes pending
+                // -> nothing to do
+                break;
-
-        /**
-         * first notify the listeners that this instance has been
-         * invalidated
-         */
-        notifyInvalidated();

UPD40 UPD43 UPD42 UPD42 INS44 INS8 UPD42 INS39 INS42 MOV50 MOV49 MOV49 MOV49 MOV21 INS49 INS10 INS10 INS10 INS10 INS49 INS10 INS10 INS10 INS40 INS40 UPD42 UPD42 INS45 UPD42 DEL65 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL41 DEL42 DEL33 DEL7 DEL21 DEL41 DEL52 DEL42 DEL52 DEL42 DEL33 DEL7 DEL21 DEL41 DEL42 DEL32 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8