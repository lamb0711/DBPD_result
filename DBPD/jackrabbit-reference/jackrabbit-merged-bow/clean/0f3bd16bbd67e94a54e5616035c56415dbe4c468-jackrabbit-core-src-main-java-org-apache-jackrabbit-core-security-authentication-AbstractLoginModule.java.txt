JCR-2355 Add support for pre-authenticated repository access

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@825125 13f79535-47bb-0310-9956-ffa450edef68

+    /**
+     * The name of the login module configuration option providing the name
+     * of the SimpleCredentials attribute used to identify a pre-authenticated
+     * login.
+     *
+     * @see #isPreAuthenticated(Credentials)
+     */
+    private static final String PRE_AUTHENTICATED_ATTRIBUTE_OPTION = "trust_credentials_attribute";
+
-    private boolean initialized; 
+    private boolean initialized;
+    /**
+     * The name of the credentials attribute providing a hint that the
+     * credentials should be taken as is and the user requesting access
+     * has already been authenticated outside of this LoginModule.
+     *
+     * @see #getTrustedCredentialsAttributeName()
+     */
+    private String preAuthAttributeName;
+
+
+            // trusted credentials attribute name (may be missing to not
+            // support) (normalized to null aka missing aka unset if an empty
+            // string)
+            preAuthAttributeName = (String) options.get(PRE_AUTHENTICATED_ATTRIBUTE_OPTION);
+            if (preAuthAttributeName != null
+                && preAuthAttributeName.length() == 0) {
+                preAuthAttributeName = null;
+            }
-     * There are two cases, how the User-ID can be verfied:
-     * Either the login is the result of an impersonation request (see
-     * {@link javax.jcr.Session#impersonate(Credentials)} or of a login to the Repository ({@link
-     * javax.jcr.Repository#login(Credentials)}). The concrete implementation
-     * of the LoginModule is responsible for both impersonation and login:
+     * There are four cases, how the User-ID can be verfied:
+     * The login is anonymous, preauthenticated or the login is the result of
+     * an impersonation request (see {@link javax.jcr.Session#impersonate(Credentials)}
+     * or of a login to the Repository ({@link javax.jcr.Repository#login(Credentials)}).
+     * The concrete implementation of the LoginModule is responsible for all
+     * four cases:
+     * <li>{@link #isAnonymous(Credentials)}</li>
+     * <li>{@link #isPreAuthenticated(Credentials)}</li>
-            // test for anonymous, impersonation or common authentication.
-            if (isAnonymous(creds)) {
+            // test for anonymous, pre-authentication, impersonation or common authentication.
+            if (isAnonymous(creds) || isPreAuthenticated(creds)) {
+
+    /**
+     * The name of the credentials attribute providing a hint that the
+     * credentials should be taken as is and the user requesting access
+     * has already been authenticated outside of this LoginModule.
+     * <p>
+     * This name is configured as the value of the LoginModule configuration
+     * parameter <code>trust_credentials_attribute</code>. If the configuration
+     * parameter is missing (or empty) the name is not set and this method
+     * returns <code>null</code>.
+     *
+     * @see #isPreAuthenticated(Credentials)
+     */
+    protected final String getPreAuthAttributeName() {
+        return preAuthAttributeName;
+    }
+
+    /**
+     * Returns <code>true</code> if the credentials should be considered as
+     * pre-authenticated and a password check is not required.
+     * <p>
+     * This base class implementation returns <code>true</code> if the
+     * <code>creds</code> object is a SimpleCredentials instance and the
+     * configured {@link #getTrustedCredentialsAttributeName() trusted
+     * credentials property} is set to a non-<code>null</code> value in the
+     * credentials attributes.
+     * <p>
+     * Extensions of this class may overwrite this method to apply more or
+     * different checks to the credentials.
+     *
+     * @param creds The Credentials to check
+     *
+     * @see #getPreAuthAttributeName()
+     */
+    protected boolean isPreAuthenticated(final Credentials creds) {
+        final String preAuthAttrName = getPreAuthAttributeName();
+        return preAuthAttrName != null
+            && (creds instanceof SimpleCredentials)
+            && ((SimpleCredentials) creds).getAttribute(preAuthAttrName) != null;
+    }

INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS42 INS42 INS45 INS65 INS65 INS42 INS42 MOV65 MOV65 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS83 INS43 INS42 INS60 INS41 INS66 INS66 INS66 INS68 INS66 INS66 INS66 INS68 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 INS65 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS68 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS68 INS42 INS83 INS43 INS59 INS27 INS42 INS69 INS42 INS21 INS25 INS68 INS68 INS42 INS69 INS68 INS66 INS66 INS42 INS42 INS42 INS32 INS27 INS27 INS43 INS7 INS27 INS8 INS42 INS69 INS42 INS69 INS27 INS43 INS42 INS42 INS27 INS36 INS32 INS33 INS42 INS42 INS11 INS27 INS27 INS21 INS43 INS43 MOV32 INS32 INS42 INS42 INS33 INS62 INS36 INS42 INS42 INS43 INS32 INS42 INS33 INS32 INS34 INS7 INS42 INS42 INS42 INS42 INS42 INS43 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS42 INS42