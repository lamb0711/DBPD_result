JCR-2087: parametrize generic types

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816660 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
+import org.apache.jackrabbit.spi.ChildInfo;
-            Iterator infos = service.getItemInfos(sessionInfo, nodeId);
+            Iterator<? extends ItemInfo> infos = service.getItemInfos(sessionInfo, nodeId);
-            Iterator infos = service.getItemInfos(sessionInfo, nodeId);
+            Iterator<? extends ItemInfo> infos = service.getItemInfos(sessionInfo, nodeId);
-    public Iterator getChildNodeInfos(NodeId nodeId)
+    public Iterator<ChildInfo> getChildNodeInfos(NodeId nodeId)
-            return Collections.EMPTY_SET.iterator();
+            Set<PropertyId> t = Collections.emptySet();
+            return t.iterator();
-            return Collections.EMPTY_SET.iterator();
+            Set<PropertyId> t = Collections.emptySet();
+            return t.iterator();
-    private synchronized NodeState createItemStates(NodeId nodeId, Iterator itemInfos,
+    private synchronized NodeState createItemStates(NodeId nodeId, Iterator<? extends ItemInfo> itemInfos,
-            ItemInfo info = (ItemInfo) infos.next();
+            ItemInfo info = infos.next();
-        List propNames = new ArrayList();
-        for (Iterator it = info.getPropertyIds(); it.hasNext(); ) {
-            PropertyId pId = (PropertyId) it.next();
+        List<Name> propNames = new ArrayList<Name>();
+        for (Iterator<PropertyId> it = info.getPropertyIds(); it.hasNext(); ) {
+            PropertyId pId = it.next();
-        Iterator childInfos = info.getChildInfos();
+        Iterator<ChildInfo> childInfos = info.getChildInfos();
-            Iterator childInfos = infos.getChildInfos(parentEntry.getWorkspaceId());
+            Iterator<ChildInfo> childInfos = infos.getChildInfos(parentEntry.getWorkspaceId());
-    private class ItemInfos implements Iterator {
+    private class ItemInfos implements Iterator<ItemInfo> {
-        private final List prefetchQueue = new ArrayList();
-        private final Map nodeInfos = new HashMap();
-        private final Iterator infos;
+        private final List<ItemInfo> prefetchQueue = new ArrayList<ItemInfo>();
+        private final Map<NodeId, NodeInfo> nodeInfos = new HashMap<NodeId, NodeInfo>();
+        private final Iterator<? extends ItemInfo> infos;
-        private ItemInfos(Iterator infos) {
+        private ItemInfos(Iterator<? extends ItemInfo> infos) {
-        public Object next() {
+        public ItemInfo next() {
-                Object next = prefetchQueue.remove(0);
+                ItemInfo next = prefetchQueue.remove(0);
-        private Iterator getChildInfos(NodeId parentId) {
-            NodeInfo nodeInfo = (NodeInfo) nodeInfos.get(parentId);
+        private Iterator<ChildInfo> getChildInfos(NodeId parentId) {
+            NodeInfo nodeInfo = nodeInfos.get(parentId);
-                nodeInfo = (NodeInfo) nodeInfos.get(parentId);
+                nodeInfo = nodeInfos.get(parentId);
-                ItemInfo info = (ItemInfo) infos.next();
+                ItemInfo info = infos.next();

INS26 INS26 INS40 INS40 INS74 INS74 MOV43 INS43 INS74 MOV43 INS43 INS74 INS74 INS74 UPD43 INS74 INS42 INS42 MOV43 INS76 INS74 INS74 INS42 MOV43 INS43 MOV43 INS43 MOV43 MOV43 INS76 INS74 UPD42 MOV43 INS43 INS60 MOV43 MOV43 INS43 INS74 MOV43 INS43 INS42 INS74 INS42 INS74 INS43 MOV43 INS76 INS42 MOV43 INS74 INS74 INS74 INS59 INS60 MOV43 INS42 INS74 INS43 INS43 MOV43 INS42 INS74 MOV43 INS43 MOV43 INS43 MOV43 UPD42 MOV42 INS43 MOV32 MOV43 INS76 MOV43 INS76 INS43 INS43 INS42 INS32 INS42 INS74 INS59 MOV32 MOV43 INS43 MOV42 INS42 MOV32 MOV43 INS43 INS42 INS42 INS42 UPD43 MOV43 INS43 INS43 INS42 INS42 INS42 INS42 INS43 MOV43 INS42 INS32 INS42 INS42 INS42 MOV42 MOV32 MOV32 INS42 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL11 DEL11 DEL43 DEL11 DEL11 DEL11