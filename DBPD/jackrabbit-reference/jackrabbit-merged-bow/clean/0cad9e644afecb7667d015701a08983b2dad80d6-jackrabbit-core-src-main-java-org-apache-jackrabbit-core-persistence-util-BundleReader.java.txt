JCR-2762: Optimize bundle serialization

Remove duplicate code by merging the checkBundle() and readBundle() functionality

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1004239 13f79535-47bb-0310-9956-ffa450edef68

-     * Checks a <code>NodePropBundle</code> from a data input stream.
-     *
-     * @return <code>true</code> if the data is valid;
-     *         <code>false</code> otherwise.
-     */
-    public boolean checkBundle() {
-        int version;
-        // primaryType & version
-        try {
-            // read version and primary type...special handling
-            int index = in.readInt();
-
-            // get version
-            version = (index >> 24) & 0xff;
-            index &= 0x00ffffff;
-            String uri = binding.nsIndex.indexToString(index);
-            String local = binding.nameIndex.indexToString(in.readInt());
-            Name nodeTypeName = NameFactoryImpl.getInstance().create(uri, local);
-
-            log.debug("Serialzation Version: " + version);
-            log.debug("NodeTypeName: " + nodeTypeName);
-        } catch (IOException e) {
-            log.error("Error while reading NodeTypeName: " + e);
-            return false;
-        }
-        try {
-            NodeId parentId = readNodeId();
-            log.debug("ParentUUID: " + parentId);
-        } catch (IOException e) {
-            log.error("Error while reading ParentUUID: " + e);
-            return false;
-        }
-        try {
-            String definitionId = in.readUTF();
-            log.debug("DefinitionId: " + definitionId);
-        } catch (IOException e) {
-            log.error("Error while reading DefinitionId: " + e);
-            return false;
-        }
-        try {
-            Name mixinName = readIndexedQName();
-            while (mixinName != null) {
-                log.debug("MixinTypeName: " + mixinName);
-                mixinName = readIndexedQName();
-            }
-        } catch (IOException e) {
-            log.error("Error while reading MixinTypes: " + e);
-            return false;
-        }
-        try {
-            Name propName = readIndexedQName();
-            while (propName != null) {
-                log.debug("PropertyName: " + propName);
-                if (!checkPropertyState()) {
-                    return false;
-                }
-                propName = readIndexedQName();
-            }
-        } catch (IOException e) {
-            log.error("Error while reading property names: " + e);
-            return false;
-        }
-        try {
-            boolean hasUUID = in.readBoolean();
-            log.debug("hasUUID: " + hasUUID);
-        } catch (IOException e) {
-            log.error("Error while reading 'hasUUID': " + e);
-            return false;
-        }
-        try {
-            NodeId cneId = readNodeId();
-            while (cneId != null) {
-                Name cneName = readQName();
-                log.debug("ChildNodentry: " + cneId + ":" + cneName);
-                cneId = readNodeId();
-            }
-        } catch (IOException e) {
-            log.error("Error while reading child node entry: " + e);
-            return false;
-        }
-
-        if (version >= BundleBinding.VERSION_1) {
-            try {
-                short modCount = readModCount();
-                log.debug("modCount: " + modCount);
-            } catch (IOException e) {
-                log.error("Error while reading mod cout: " + e);
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    /**
-     * Checks a <code>PropertyState</code> from the data input stream.
-     *
-     * @return <code>true</code> if the data is valid;
-     *         <code>false</code> otherwise.
-     */
-    private boolean checkPropertyState() {
-        int type;
-        try {
-            type = in.readInt();
-            short modCount = (short) ((type >> 16) | 0xffff);
-            type &= 0xffff;
-            log.debug("  PropertyType: " + PropertyType.nameFromValue(type));
-            log.debug("  ModCount: " + modCount);
-        } catch (IOException e) {
-            log.error("Error while reading property type: " + e);
-            return false;
-        }
-        try {
-            boolean isMV = in.readBoolean();
-            log.debug("  MultiValued: " + isMV);
-        } catch (IOException e) {
-            log.error("Error while reading multivalued: " + e);
-            return false;
-        }
-        try {
-            String defintionId = in.readUTF();
-            log.debug("  DefinitionId: " + defintionId);
-        } catch (IOException e) {
-            log.error("Error while reading definition id: " + e);
-            return false;
-        }
-
-        int count;
-        try {
-            count = in.readInt();
-            log.debug("  num values: " + count);
-        } catch (IOException e) {
-            log.error("Error while reading number of values: " + e);
-            return false;
-        }
-        for (int i = 0; i < count; i++) {
-            switch (type) {
-                case PropertyType.BINARY:
-                    int size;
-                    try {
-                        size = in.readInt();
-                        log.debug("  binary size: " + size);
-                    } catch (IOException e) {
-                        log.error("Error while reading size of binary: " + e);
-                        return false;
-                    }
-                    if (size == BundleBinding.BINARY_IN_DATA_STORE) {
-                        try {
-                            String s = in.readUTF();
-                            // truncate log output
-                            if (s.length() > 80) {
-                                s = s.substring(80) + "...";
-                            }
-                            log.debug("  global data store id: " + s);
-                        } catch (IOException e) {
-                            log.error("Error while reading blob id: " + e);
-                            return false;
-                        }
-                    } else if (size == BundleBinding.BINARY_IN_BLOB_STORE) {
-                        try {
-                            String s = in.readUTF();
-                            log.debug("  blobid: " + s);
-                        } catch (IOException e) {
-                            log.error("Error while reading blob id: " + e);
-                            return false;
-                        }
-                    } else {
-                        // short values into memory
-                        byte[] data = new byte[size];
-                        try {
-                            in.readFully(data);
-                            log.debug("  binary: " + data.length + " bytes");
-                        } catch (IOException e) {
-                            log.error("Error while reading inlined binary: " + e);
-                            return false;
-                        }
-                    }
-                    break;
-                case PropertyType.DOUBLE:
-                    try {
-                        double d = in.readDouble();
-                        log.debug("  double: " + d);
-                    } catch (IOException e) {
-                        log.error("Error while reading double value: " + e);
-                        return false;
-                    }
-                    break;
-                case PropertyType.DECIMAL:
-                    try {
-                        BigDecimal d = readDecimal();
-                        log.debug("  decimal: " + d);
-                    } catch (IOException e) {
-                        log.error("Error while reading decimal value: " + e);
-                        return false;
-                    }
-                    break;
-                case PropertyType.LONG:
-                    try {
-                        double l = in.readLong();
-                        log.debug("  long: " + l);
-                    } catch (IOException e) {
-                        log.error("Error while reading long value: " + e);
-                        return false;
-                    }
-                    break;
-                case PropertyType.BOOLEAN:
-                    try {
-                        boolean b = in.readBoolean();
-                        log.debug("  boolean: " + b);
-                    } catch (IOException e) {
-                        log.error("Error while reading boolean value: " + e);
-                        return false;
-                    }
-                    break;
-                case PropertyType.NAME:
-                    try {
-                        Name name = readQName();
-                        log.debug("  name: " + name);
-                    } catch (IOException e) {
-                        log.error("Error while reading name value: " + e);
-                        return false;
-                    }
-                    break;
-                case PropertyType.WEAKREFERENCE:
-                case PropertyType.REFERENCE:
-                    try {
-                        NodeId id = readNodeId();
-                        log.debug("  reference: " + id);
-                    } catch (IOException e) {
-                        log.error("Error while reading reference value: " + e);
-                        return false;
-                    }
-                    break;
-                default:
-                    // because writeUTF(String) has a size limit of 64k,
-                    // Strings are serialized as <length><byte[]>
-                    int len;
-                    try {
-                        len = in.readInt();
-                        log.debug("  size of string value: " + len);
-                    } catch (IOException e) {
-                        log.error("Error while reading size of string value: " + e);
-                        return false;
-                    }
-                    try {
-                        byte[] bytes = new byte[len];
-                        in.readFully(bytes);
-                        String s = new String(bytes, "UTF-8");
-                        // truncate log output
-                        if (s.length() > 80) {
-                            s = s.substring(80) + "...";
-                        }
-                        log.debug("  string: " + s);
-                    } catch (IOException e) {
-                        log.error("Error while reading string value: " + e);
-                        return false;
-                    }
-            }
-        }
-        return true;
-    }
-
-    /**

DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL40 DEL27 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL39 DEL42 DEL39 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL11 DEL59 DEL60 DEL42 DEL34 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL40 DEL49 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL32 DEL45 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL10 DEL40 DEL49 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL10 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL10 DEL40 DEL49 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL10 DEL40 DEL49 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL10 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL10 DEL40 DEL49 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL10 DEL49 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL32 DEL45 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL50 DEL8 DEL24 DEL9 DEL41 DEL8 DEL31