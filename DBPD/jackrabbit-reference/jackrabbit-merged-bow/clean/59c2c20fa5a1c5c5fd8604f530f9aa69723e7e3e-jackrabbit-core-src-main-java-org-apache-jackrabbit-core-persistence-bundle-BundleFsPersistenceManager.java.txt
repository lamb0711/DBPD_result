JCR-1138: Add AbstractBundlePersistenceManager.getAllNodeIds

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@577297 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.fs.FileSystemException;
+import org.apache.jackrabbit.core.NodeIdIterator;
+import org.apache.jackrabbit.uuid.UUID;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.NoSuchElementException;
-}
+    /**
+     * {@inheritDoc}
+     */
+    public NodeIdIterator getAllNodeIds(NodeId bigger, int maxCount)
+            throws ItemStateException {
+        ArrayList list = new ArrayList();
+        try {
+            getListRecursive(list, "", bigger == null ? null : bigger.getUUID(), maxCount);
+            return new FileNodeIdIterator(list);
+        } catch (FileSystemException e) {
+            String msg = "failed to read node list: " + bigger + ": " + e;
+            log.error(msg);
+            throw new ItemStateException(msg, e);
+        }
+    }
+    
+    /**
+     * {@inheritDoc}
+     */    
+    protected UUID getUUIDFromFileName(String fileName) {
+        StringBuffer buff = new StringBuffer(35);
+        if (!fileName.endsWith("." + NODEFILENAME)) {
+            return null;
+        }
+        for (int i = 0; i < fileName.length(); i++) {
+            char c = fileName.charAt(i);
+            if (c == '.') {
+                break;
+            }
+            if (c != '/') {
+                buff.append(c);
+                int len = buff.length();
+                if (len == 8 || len == 13 || len == 18 || len == 23) {
+                    buff.append('-');
+                }
+            }
+        }
+        String u = buff.toString();
+        return new UUID(u);
+    }    
+    
+    private void getListRecursive(ArrayList list, String path, UUID bigger,
+            int maxCount) throws FileSystemException {
+        if (maxCount > 0 && list.size() >= maxCount) {
+            return;
+        }
+        String[] files = itemFs.listFiles(path);
+        Arrays.sort(files);
+        for (int i = 0; i < files.length; i++) {
+            String f = files[i];
+            UUID u = getUUIDFromFileName(path + FileSystem.SEPARATOR + f);
+            if (u == null) {
+                continue;
+            }
+            if (bigger != null && bigger.toString().compareTo(u.toString()) < 0) {
+                continue;
+            }
+            NodeId n = new NodeId(u);
+            list.add(n);
+            if (maxCount > 0 && list.size() >= maxCount) {
+                return;
+            }
+        }
+        String[] dirs = itemFs.listFolders(path);
+        Arrays.sort(dirs);
+        for (int i = 0; i < dirs.length; i++) {
+            getListRecursive(list, path + FileSystem.SEPARATOR + dirs[i],
+                    bigger, maxCount);
+        }
+    }
+    
+    private static class FileNodeIdIterator implements NodeIdIterator {
+
+        private final ArrayList list;
+        private int pos;
+
+        FileNodeIdIterator(ArrayList list) {
+            this.list = list;
+        }
+
+        public NodeId nextNodeId() throws NoSuchElementException {
+            if (pos < list.size()) {
+                return (NodeId) list.get(pos++);
+            }
+            throw new NoSuchElementException();
+        }
+
+        public boolean hasNext() {
+            return pos < list.size();
+        }
+
+        public Object next() {
+            return nextNodeId();
+        }
+
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+        
+    }
+
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS55 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS54 INS65 INS42 INS43 INS42 INS60 INS25 INS24 INS60 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS60 INS21 INS24 INS60 INS21 INS24 INS42 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS42 INS44 INS8 INS83 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS65 INS42 INS43 INS59 INS8 INS12 INS65 INS42 INS43 INS59 INS38 INS8 INS58 INS27 INS37 INS8 INS43 INS59 INS14 INS42 INS42 INS42 INS27 INS8 INS5 INS59 INS32 INS58 INS27 INS37 INS8 INS5 INS59 INS32 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS25 INS53 INS41 INS42 INS41 INS53 INS42 INS42 INS14 INS21 INS41 INS44 INS8 INS42 INS42 INS14 INS32 INS41 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS25 INS42 INS42 INS32 INS43 INS42 INS27 INS27 INS41 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS25 INS60 INS21 INS25 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS7 INS27 INS8 INS14 INS27 INS32 INS14 INS43 INS32 INS14 INS43 INS42 INS60 INS21 INS53 INS43 INS34 INS42 INS42 INS27 INS33 INS42 INS34 INS42 INS42 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS22 INS42 INS42 INS32 INS41 INS43 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS45 INS16 INS42 INS43 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS45 INS42 INS42 INS32 INS42 INS13 INS10 INS42 INS13 INS21 INS60 INS25 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS33 INS18 INS27 INS27 INS18 INS42 INS42 INS14 INS42 INS42 INS42 INS27 INS27 INS41 INS42 INS42 INS27 INS42 INS42 INS52 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS27 INS33 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS27 INS42 INS33 INS32 INS34 INS43 INS42 INS42 INS34 INS32 INS42 INS42 INS40 INS2 INS43 INS32 INS42 INS33 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS21 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS37 INS42 INS42 INS27 INS27 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS34 INS42 INS42 INS13 INS42 INS34 INS42 INS34