JCR-3172: implement PERSIST events for the EventJournal

Add PERSIST events to EventJournal, add a minimal test case

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1212472 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.NoSuchElementException;
+import javax.jcr.observation.Event;
+     * @param includePersistEvent whether or not to include the {@link Event#PERSIST} event
-            SessionImpl session, Iterator<?> eventStates,
+            SessionImpl session, Iterator<EventState> eventStates,
-            final EventFilter filter, final Set<?> denied) {
-        super(new FilteredRangeIterator(eventStates, new Predicate() {
+            final EventFilter filter, final Set<?> denied, boolean includePersistEvent) {
+        super(new FilteredRangeIterator(wrapAndAddPersist(eventStates, includePersistEvent), new Predicate() {
+    /**
+     * Optionally wrap the iterator into one that adds PERSIST events
+     */
+    private static Iterator<EventState> wrapAndAddPersist(final Iterator<EventState> states,
+            boolean includePersistEvents) {
+        if (includePersistEvents) {
+            return new PersistEventAddingWrapper(states);
+        }
+        else {
+            return states;
+        }
+    }
+
+    /**
+     * A wrapper around {@link Iterator} that adds a "PERSIST" event at the end.
+     */
+    private static class PersistEventAddingWrapper implements Iterator<EventState> {
+
+        private Iterator<EventState> states;
+        private boolean persistSent = false;
+        private EventState previous = null;
+
+        public PersistEventAddingWrapper(Iterator<EventState> states) {
+            this.states = states;
+        }
+
+        public boolean hasNext() {
+            if (states.hasNext()) {
+                return true;
+            } else {
+                return !persistSent;
+            }
+        }
+
+        public EventState next() {
+            if (states.hasNext()) {
+                previous = states.next();
+                return previous;
+            }
+            else if (persistSent || previous == null) {
+                // we are at the end; either because we already sent
+                // PERSIST, or because the iterator was empty anyway
+                throw new NoSuchElementException();
+            }
+            else {
+                persistSent = true;
+                return EventState.persist(previous.getSession(), previous.isExternal());
+            }
+        }
+
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    }

INS26 INS26 INS40 INS40 INS31 INS55 INS44 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS42 INS74 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS65 UPD74 INS39 INS42 INS65 INS43 INS43 INS83 INS74 INS42 INS39 INS42 INS25 INS65 INS43 INS43 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS66 INS65 INS66 INS43 INS66 INS42 INS42 INS43 INS43 INS42 INS8 INS8 INS66 INS65 INS66 INS42 INS42 INS43 INS43 INS42 INS42 INS9 INS42 INS42 INS33 INS74 INS42 INS21 INS25 INS42 INS25 INS53 INS67 INS42 INS32 INS42 INS42 INS41 INS41 INS42 INS42 INS42 INS43 INS43 INS7 INS32 INS8 INS8 INS32 INS8 INS25 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS41 INS41 INS42 INS42 INS21 INS41 INS27 INS8 INS8 INS43 INS43 INS42 INS52 INS42 INS9 INS38 INS7 INS42 INS42 INS27 INS53 INS21 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS14 INS7 INS32 INS42 INS42 INS43 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 DEL76 DEL42