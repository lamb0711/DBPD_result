JCR-73: Improved QName javadocs

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159705 13f79535-47bb-0310-9956-ffa450edef68

- * <code>QName</code> represents the qualified name of a repository item
- * (i.e. <code>Node</code> or <code>Property</code>) or a node type.
- * <p/>
- * The external string representation is specified as follows:
- * <xmp>
+ * Qualified name. A qualified name is a combination of a namespace URI
+ * and a local part. Instances of this class are used by Jackrabbit to
+ * represent the names of JCR content items and other objects.
+ * <p>
+ * A qualified name is immutable once created, although the prefixed JCR
+ * name representation of the qualified name can change depending on the
+ * namespace mappings in effect.
+ *
+ * <h2>String representations</h2>
+ * <p>
+ * The prefixed JCR name format of a qualified name is specified by
+ * JSR 170 as follows:
+ * <pre>
- * </xmp>
+ * </pre>
+ * <p>
+ * In addition to the prefixed JCR name format, a qualified name can also
+ * be represented using the format "<code>{namespaceURI}localPart</code>".
+    /** Serialization UID of this class. */
-     * Pattern used to validate and parse name:<p>
+     * The reqular expression pattern used to validate and parse
+     * qualified names.
+     * <p>
+     * The pattern contains the following groups:
-    private static final Pattern NAME_PATTERN =
-            Pattern.compile("(([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?):)?([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?)");
+    private static final Pattern NAME_PATTERN = Pattern.compile(
+            "(([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?):)?"
+            + "([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?)");
+    /** The memorized hash code of this qualified name. */
+
+    /** The memorized string representation of this qualified name. */
+    /** The namespace URI of this qualified name. */
+
+    /** The local part of this qualified name. */
-
-     * Creates a new <code>QName</code> instance with the given <code>namespaceURI</code>
-     * and <code>localName</code>.
+     * Creates a new qualified name with the given namespace URI and
+     * local part.
-     * @param namespaceURI
-     * @param localName
+     * @param namespaceURI namespace uri
+     * @param localName local part
+
-     * @param rawName
-     * @param resolver
-     * @return
-     * @throws IllegalNameException
-     * @throws UnknownPrefixException
+     * Parses the given prefixed JCR name into a qualified name using the
+     * given namespace resolver.
+     *
+     * @param rawName prefixed JCR name
+     * @param resolver namespace resolver
+     * @return qualified name
+     * @throws IllegalNameException if the given name is not a valid JCR name
+     * @throws UnknownPrefixException if the JCR name prefix does not resolve
-    public static QName valueOf(String s) {
+    public static QName valueOf(String s) throws IllegalArgumentException {
-     * @return
+     * Returns the local part of the qualified name.
+     *
+     * @return local name
-     * @return
+     * Returns the namespace URI of the qualified name.
+     *
+     * @return namespace URI
-     * @param resolver
-     * @return
-     * @throws NoPrefixDeclaredException
+     * Returns the qualified name in the prefixed JCR name format.
+     * The namespace URI is mapped to a prefix using the given
+     * namespace resolver.
+     *
+     * @param resolver namespace resolver
+     * @return prefixed name
+     * @throws NoPrefixDeclaredException if the namespace fails to resolve
+    /**
+     * Compares two qualified names for equality. Returns <code>true</code>
+     * if the given object is a qualified name and has the same namespace URI
+     * and local part as this qualified name.
+     *
+     * @param obj the object to compare this qualified name with
+     * @return <code>true</code> if the object is equal to this qualified name,
+     *         <code>false</code> otherwise
+     * @see Object#equals(Object)
+     */
+    /**
+     * Returns the hash code of this qualified name. The hash code is
+     * computed from the namespace URI and local part of the qualified
+     * name and memorized for better performance.
+     *
+     * @return hash code
+     * @see Object#hashCode()
+     */
-     * Creates a clone of this <code>QName</code>.
+     * Creates a clone of this qualified name.
-     * @throws CloneNotSupportedException
+     * @throws CloneNotSupportedException never thrown
+     * @see Object#clone()
-    public int compareTo(Object o) {
+    /**
+     * Compares two qualified names.
+     *
+     * @param o the object to compare this qualified name with
+     * @return comparison result
+     * @throws ClassCastException if the given object is not a qualified name
+     * @see Comparable#compareTo(Object)
+     */
+    public int compareTo(Object o) throws ClassCastException {

INS29 INS29 INS29 INS29 INS29 INS43 INS29 INS29 INS29 INS43 UPD66 INS66 UPD66 UPD66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS66 UPD66 INS66 INS66 INS66 INS27 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS68 INS66 INS66 INS66 INS66 INS68 UPD66 INS66 INS68 INS66 INS42 INS66 INS66 INS42 INS66 INS68 INS45 INS45 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS43 INS43 INS42 INS42 DEL45