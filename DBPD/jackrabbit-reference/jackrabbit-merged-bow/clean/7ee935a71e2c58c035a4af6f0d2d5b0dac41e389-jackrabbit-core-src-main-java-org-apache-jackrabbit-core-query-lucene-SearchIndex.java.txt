JCR-97: Improve Checkstyle conformance
    - Various Checkstyle improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@615680 13f79535-47bb-0310-9956-ffa450edef68

-     * @see QueryHandler#createExecutablePreparedQuery(org.apache.jackrabbit.core.SessionImpl, org.apache.jackrabbit.core.ItemManager, org.apache.jackrabbit.core.query.qom.QueryObjectModelTree)
+     * @see QueryHandler#createExecutablePreparedQuery(SessionImpl, ItemManager, QueryObjectModelTree)
-            log.warn("Exception initializing indexing configuration from: " +
-                    indexingConfigPath, e);
+            log.warn("Exception initializing indexing configuration from: "
+                    + indexingConfigPath, e);
-                log.warn("Exception initializing synonym provider: " +
-                        synonymProviderClass, e);
+                log.warn("Exception initializing synonym provider: "
+                        + synonymProviderClass, e);
-                        "Invalid synonymProviderConfigPath: " +
-                        synonymProviderConfigPath);
+                        "Invalid synonymProviderConfigPath: "
+                        + synonymProviderConfigPath);
-                log.warn("Exception initializing spell checker: " +
-                        spellCheckerClass, e);
+                log.warn("Exception initializing spell checker: "
+                        + spellCheckerClass, e);
-            AggregateRule aggregateRules[] = indexingConfig.getAggregateRules();
+            AggregateRule[] aggregateRules = indexingConfig.getAggregateRules();
-                log.warn("Exception while building indexing aggregate for " +
-                        "node with UUID: " + state.getNodeId().getUUID(), e);
+                log.warn("Exception while building indexing aggregate for"
+                        + " node with UUID: " + state.getNodeId().getUUID(), e);
-            AggregateRule aggregateRules[] = indexingConfig.getAggregateRules();
+            AggregateRule[] aggregateRules = indexingConfig.getAggregateRules();
-                log.warn("Unable to get aggregate root for " +
-                        state.getNodeId().getUUID(), e);
+                log.warn("Unable to get aggregate root for "
+                        + state.getNodeId().getUUID(), e);
-        final private CachingMultiIndexReader[] subReaders;
+        private final CachingMultiIndexReader[] subReaders;
-            IndexReader readers[] = new IndexReader[subReaders.length];
+            IndexReader[] readers = new IndexReader[subReaders.length];
-                log.warn("Invalid value for excerptProviderClass, {} does " +
-                        "not implement ExcerptProvider interface.", className);
+                log.warn("Invalid value for excerptProviderClass, {} does "
+                        + "not implement ExcerptProvider interface.", className);
-            log.warn("Invalid value for excerptProviderClass, class {} not " +
-                    "found.", className);
+            log.warn("Invalid value for excerptProviderClass, class {} not found.",
+                    className);
-                log.warn("Invalid value for indexingConfigurationClass, {} " +
-                        "does not implement IndexingConfiguration interface.",
+                log.warn("Invalid value for indexingConfigurationClass, {} "
+                        + "does not implement IndexingConfiguration interface.",
-            log.warn("Invalid value for indexingConfigurationClass, class {} " +
-                    "not found.", className);
+            log.warn("Invalid value for indexingConfigurationClass, class {} not found.",
+                    className);
-                log.warn("Invalid value for synonymProviderClass, {} " +
-                        "does not implement SynonymProvider interface.",
+                log.warn("Invalid value for synonymProviderClass, {} "
+                        + "does not implement SynonymProvider interface.",
-            log.warn("Invalid value for synonymProviderClass, class {} " +
-                    "not found.", className);
+            log.warn("Invalid value for synonymProviderClass, class {} not found.",
+                    className);
-        return synonymProviderClass != null ?
-                synonymProviderClass.getName() : null;
+        if (synonymProviderClass != null) {
+            return synonymProviderClass.getName();
+        } else {
+            return null;
+        }
-                log.warn("Invalid value for spellCheckerClass, {} " +
-                        "does not implement SpellChecker interface.",
+                log.warn("Invalid value for spellCheckerClass, {} "
+                        + "does not implement SpellChecker interface.",
-            log.warn("Invalid value for spellCheckerClass, class {} " +
-                    "not found.", className);
+            log.warn("Invalid value for spellCheckerClass,"
+                    + " class {} not found.", className);
-        return spellCheckerClass != null ?
-                spellCheckerClass.getName() : null;
+        if (spellCheckerClass != null) {
+            return spellCheckerClass.getName();
+        } else {
+            return null;
+        }

INS83 INS25 INS25 MOV27 INS8 INS8 MOV27 INS8 INS8 INS5 MOV41 INS41 MOV41 INS41 UPD43 UPD43 UPD43 INS5 INS5 INS43 INS85 MOV32 INS33 MOV32 INS33 INS42 INS42 INS42 MOV43 INS85 MOV43 INS85 MOV42 INS45 INS45 INS45 UPD45 UPD45 UPD45 UPD45 DEL40 DEL40 DEL40 DEL85 DEL85 DEL83 DEL43 DEL85 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL33 DEL16 DEL33 DEL16