SPI:
- remove ItemStateFactory parameter from resolve methods
- add create[Node|Property]State methods to ItemStateFactory which take a parent NodeState
- use PropertyReference in NodeState instead of plain property QNames
- add getNodeState() and getPropertyState() on NodeState for state traversal

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@426582 13f79535-47bb-0310-9956-ffa450edef68

-            QName ntName = info.getNodetype();
-            NodeId parentId = (info.getParentId() != null) ? info.getParentId() : null;
+            NodeId parentId = (info.getParentId() != null) ? info.getParentId() : null;
+
+            return createNodeState(info, parent);
+        } catch (PathNotFoundException e) {
+            throw new NoSuchItemStateException(e.getMessage(), e);
+        } catch (RepositoryException e) {
+            throw new ItemStateException(e.getMessage(), e);
+        }
+    }
+
+    /**
+     * Creates the node with information retrieved from the
+     * <code>RepositoryService</code>.
+     *
+     * @inheritDoc
+     * @see ItemStateFactory#createNodeState(NodeId, NodeState)
+     */
+    public NodeState createNodeState(NodeId nodeId, NodeState parent)
+            throws NoSuchItemStateException, ItemStateException {
+        try {
+            NodeInfo info = service.getNodeInfo(sessionInfo, nodeId);
+            return createNodeState(info, parent);
+        } catch (PathNotFoundException e) {
+            throw new NoSuchItemStateException(e.getMessage(), e);
+        } catch (RepositoryException e) {
+            throw new ItemStateException(e.getMessage(), e);
+        }
+    }
+
+    /**
+     * Creates the node with information retrieved from <code>info</code>.
+     *
+     * @param info   the <code>NodeInfo</code> to use to create the
+     *               <code>NodeState</code>.
+     * @param parent the parent <code>NodeState</code>.
+     * @return the new <code>NodeState</code>.
+     */
+    private NodeState createNodeState(NodeInfo info, NodeState parent)
+            throws NoSuchItemStateException, ItemStateException {
+        try {
+            QName ntName = info.getNodetype();
+
-            NodeState state = new NodeState(info.getId(), ntName, parentId, ItemState.STATUS_EXISTING, false, getIdFactory());
+            NodeState state = new NodeState(info.getId(), ntName, parent.getNodeId(), ItemState.STATUS_EXISTING, false, getIdFactory());
-
-            // get parent
+            return createPropertyState(info, parent);
+        } catch (PathNotFoundException e) {
+            throw new NoSuchItemStateException(e.getMessage(), e);
+        } catch (RepositoryException e) {
+            throw new ItemStateException(e.getMessage(), e);
+        }
+    }
+
+    /**
+     * Creates the property with information retrieved from the
+     * <code>RepositoryService</code>.
+     *
+     * @inheritDoc
+     * @see ItemStateFactory#createPropertyState(PropertyId, NodeState)
+     */
+    public PropertyState createPropertyState(PropertyId propertyId,
+                                             NodeState parent)
+            throws NoSuchItemStateException, ItemStateException {
+        try {
+            PropertyInfo info = service.getPropertyInfo(sessionInfo, propertyId);
+            return createPropertyState(info, parent);
+        } catch (PathNotFoundException e) {
+            throw new NoSuchItemStateException(e.getMessage(), e);
+        } catch (RepositoryException e) {
+            throw new ItemStateException(e.getMessage(), e);
+        }
+    }
+
+    /**
+     * Creates the property with information retrieved from <code>info</code>.
+     *
+     * @param info   the <code>PropertyInfo</code> to use to create the
+     *               <code>PropertyState</code>.
+     * @param parent the parent <code>NodeState</code>.
+     * @return the new <code>PropertyState</code>.
+     * @throws ItemStateException if an error occurs while retrieving the
+     *                            <code>PropertyState</code>.
+     */
+    private PropertyState createPropertyState(PropertyInfo info,
+                                              NodeState parent)
+            throws ItemStateException {
+        try {
-        } catch (PathNotFoundException e) {
-            throw new NoSuchItemStateException(e.getMessage(), e);
-        } catch (RepositoryException e) {
-            throw new ItemStateException(e.getMessage(), e);

INS31 INS31 INS31 INS31 MOV29 INS83 INS43 INS42 MOV44 MOV44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS29 UPD83 INS44 INS44 MOV29 INS83 INS43 INS42 MOV44 MOV44 MOV43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS29 UPD83 INS44 INS44 INS42 INS42 INS42 INS54 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS54 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS54 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS54 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS8 INS12 INS12 INS66 INS66 INS68 INS42 INS42 INS8 INS12 INS12 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS8 MOV12 MOV12 INS66 INS66 INS68 INS42 INS42 INS8 INS12 INS12 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 MOV60 MOV60 MOV60 INS41 INS44 INS8 INS44 INS8 INS42 INS42 INS69 INS69 INS60 INS41 INS44 INS8 INS44 INS8 MOV60 MOV60 INS41 INS42 INS42 INS69 INS69 INS60 INS41 INS44 INS8 INS44 INS8 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS43 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS32 INS43 INS43 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42