jcr-97: Improve Checkstyle conformance

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@312896 13f79535-47bb-0310-9956-ffa450edef68

-public class JcrParser
-{
+public class JcrParser {
-    static
-    {
-        try
-        {
+    static {
+        try {
-        } catch (Exception e)
-        {
+        } catch (Exception e) {
-    public JcrParser()
-    {
+    public JcrParser() {
-     * 
-     * @return a Command
+     *        user's input
-     *             if the input is illegal
+     *         if the input is illegal
-     *             if the mapped command can't be mapped to a Commons Chain
-     *             Command
+     *         if the mapped command can't be mapped to a Commons Chain Command
-            ConfigurationException
-    {
+            ConfigurationException {
-        if (input == null || input.length() == 0)
-        {
+        if (input == null || input.length() == 0) {
-        if (impl == null)
-        {
+        if (impl == null) {
-        if (cmd == null)
-        {
+        if (cmd == null) {
-     * 
-     * @return
+     *        the user's input
+     * @return a <code>List</code> containing the arguments
-    private LinkedList getArguments(String input)
-    {
+    private LinkedList getArguments(String input) {
-        for (int i = 0; i < length; ++i)
-        {
+        for (int i = 0; i < length; ++i) {
-                .isWhitespace(c)))
-            {
-                if (arg.toString().trim().length() > 0)
-                {
+                .isWhitespace(c))) {
+                if (arg.toString().trim().length() > 0) {
-            if (i == escape)
-            { // escaped char
+            if (i == escape) { // escaped char
-            } else
-            { // unescaped char
-                switch (c)
-                {
+            } else { // unescaped char
+                switch (c) {
-        if (arg.toString().trim().length() > 0)
-        {
+        if (arg.toString().trim().length() > 0) {
-     * Populate the context with the attributes needed by the Command
+     * Populate the <code>Context</code> with the attributes needed by the
+     * <code>Command</code>
+     * @param ctx
+     *        the <code>Context</code>
-    public void populateContext(Context ctx)
-    {
+    public void populateContext(Context ctx) {
-        while (iter.hasNext())
-        {
+        while (iter.hasNext()) {
-            log.debug("add ctx attr: " + param.getContextKey() + "=" + param.getValue());
+            log.debug("add ctx attr: " + param.getContextKey() + "="
+                    + param.getValue());
-     * Remove context attribute specific to the parsed command
+     * Remove <code>Context</code> attribute specific to the parsed
+     * <code>Command</code>
+     * @param ctx
+     *        the <code>Context</code>
-    public void depopulateContext(Context ctx)
-    {
+    public void depopulateContext(Context ctx) {
-        while (iter.hasNext())
-        {
+        while (iter.hasNext()) {
-            String ctxKey = param.getContextKey() ;
+            String ctxKey = param.getContextKey();
-     * @return the Command
+     * @return the <code>Command</code>
-    public Command getCommand()
-    {
+    public Command getCommand() {
-     * Populate the CommandLine with the given parameters
-     * 
+     * Populate the <code>CommandLine</code> with the given parameters
-     * @param values
+     *        the <code>CommandLine</code>
+     * @param valList
+     *        the arguments
+     *         if the user's input is illegal
-            throws JcrParserException
-    {
+            throws JcrParserException {
-        for (int i = 0; i < values.length; i++)
-        {
+        for (int i = 0; i < values.length; i++) {
-            if (value.startsWith("-"))
-            {
+            if (value.startsWith("-")) {
-                if (i + 1 < values.length && !values[i + 1].startsWith("-"))
-                {
+                if (i + 1 < values.length && !values[i + 1].startsWith("-")) {
-                    if (opt == null)
-                    {
-                        throw new JcrParserException("no.opt.for.name",
-                            new String[]
-                            {
+                    if (opt == null) {
+                        throw new JcrParserException("exception.no.opt.for.name",
+                            new String[] {
-                } else
-                {
+                } else {
-                    if (flag == null)
-                    {
-                        throw new JcrParserException("no.flag.for.name",
-                            new String[]
-                            {
+                    if (flag == null) {
+                        throw new JcrParserException("exception.no.flag.for.name",
+                            new String[] {
-            } else
-            {
+            } else {
-        for (int j = 0; j < argValues.length; j++)
-        {
+        for (int j = 0; j < argValues.length; j++) {
-            if (arg == null)
-            {
-                throw new JcrParserException("more.arguments.than.expected");
+            if (arg == null) {
+                throw new JcrParserException("exception.more.arguments.than.expected");
-     * Validate the CommandLine.
-     * 
+     * Validate the <code>CommandLine</code>
+     *        the <code>CommandLine</code>
+     *         if a required parameter is not present in the user's input
-    private void validate(CommandLine cl) throws JcrParserException
-    {
+    private void validate(CommandLine cl) throws JcrParserException {
-        while (iter.hasNext())
-        {
+        while (iter.hasNext()) {
-            if (param.getValue() == null)
-            {
-                throw new JcrParserException("missing.paramater", new String[]
-                {
+            if (param.getValue() == null) {
+                throw new JcrParserException("exception.missing.paramater", new String[] {

INS65 INS65 INS66 UPD66 INS66 INS66 UPD66 INS66 INS42 INS66 UPD66 INS66 INS42 INS66 UPD66 UPD66 INS66 UPD42 INS66 INS66 UPD66 INS66 INS66 UPD45 UPD45 UPD45 UPD45 DEL66 DEL65 DEL66