JCR-1967: Impossible comparison in NodeTypeImpl

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@741509 13f79535-47bb-0310-9956-ffa450edef68

- * A <code>NodeTypeImpl</code> ...
+ * <code>NodeTypeImpl</code> ...
-     * @param mgrProvider
+     * @param mgrProvider the manager provider
-     * ValueFactory used to convert JCR values to qualified ones in order to
-     * determine whether a property specified by name and value(s) would be allowed.
+     * ValueFactory used to convert JCR values from one type to another in order
+     * to determine whether a property specified by name and value(s) would be
+     * allowed.
+     * @return ValueFactory used to convert JCR values.
+     * @throws javax.jcr.RepositoryException If an error occurs.
+     *
+     * @return ValueFactory used to convert JCR values to qualified ones.
+     * @throws javax.jcr.RepositoryException If an error occurs.
-     * Checks if this node type's name equals the given name or if this nodetype
-     * is directly or indirectly derived from the specified node type.
+     * Test if this nodetype equals or is directly or indirectly derived from
+     * the node type with the specified <code>nodeTypeName</code>, without
+     * checking of a node type of that name really exists.
-     * @param nodeTypeName
-     * @return true if this node type is equal or directly or indirectly derived
-     * from the specified node type, otherwise false.
+     * @param nodeTypeName A node type name.
+     * @return true if this node type represents the type with the given
+     * <code>nodeTypeName</code> or if it is directly or indirectly derived
+     * from it; otherwise <code>false</code>. If no node type exists with the
+     * specified name this method will also return <code>false</code>.
-        return getName().equals(nodeTypeName) ||  ent.includesNodeType(nodeTypeName);
+        return ent.includesNodeType(nodeTypeName);
+    }
+
+    /**
+     * Returns the 'internal', i.e. the fully qualified name.
+     *
+     * @return the qualified name
+     */
+    private Name getQName() {
+        return ntd.getName();
-     * @throws ConstraintViolationException
-     * @throws RepositoryException
+     * @throws ConstraintViolationException If a constraint is violated.
+     * @throws RepositoryException If another error occurs.
-
-    /**
-     * Returns the 'internal', i.e. the fully qualified name.
-     *
-     * @return the qualified name
-     */
-    private Name getQName() {
-        return ntd.getName();
-    }
-
+    
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#getName()
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#getPrimaryItemName()
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#isMixin()
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#isNodeType(String)
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#hasOrderableChildNodes()
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#getSupertypes()
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#getChildNodeDefinitions()
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#getPropertyDefinitions()
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#getDeclaredPropertyDefinitions()
+     */
+    public PropertyDefinition[] getDeclaredPropertyDefinitions() {
+        QPropertyDefinition[] pda = ntd.getPropertyDefs();
+        PropertyDefinition[] propDefs = new PropertyDefinition[pda.length];
+        for (int i = 0; i < pda.length; i++) {
+            propDefs[i] = ntMgr.getPropertyDefinition(pda[i]);
+        }
+        return propDefs;
+    }
+
+    /**
+     * @see javax.jcr.nodetype.NodeType#getDeclaredSupertypes()
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#getDeclaredChildNodeDefinitions()
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#canSetProperty(String, Value)
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#canSetProperty(String, Value[])
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#canAddChildNode(String)
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#canAddChildNode(String, String) 
-     * {@inheritDoc}
+     * @see javax.jcr.nodetype.NodeType#canRemoveItem(String) 
-
-    /**
-     * {@inheritDoc}
-     */
-    public PropertyDefinition[] getDeclaredPropertyDefinitions() {
-        QPropertyDefinition[] pda = ntd.getPropertyDefs();
-        PropertyDefinition[] propDefs = new PropertyDefinition[pda.length];
-        for (int i = 0; i < pda.length; i++) {
-            propDefs[i] = ntMgr.getPropertyDefinition(pda[i]);
-        }
-        return propDefs;
-    }

MOV31 MOV31 UPD66 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS66 UPD66 UPD66 INS66 INS66 INS40 INS66 INS66 INS40 INS66 UPD66 UPD66 INS66 INS66 INS66 UPD66 UPD66 INS66 MOV32 INS66 INS66 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS66 INS68 INS66 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS69 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS69 INS69 INS40 INS42 INS69 INS69 INS40 INS42 INS69 INS40 INS42 INS69 INS69 INS40 INS42 INS69 INS43 INS43 INS43 INS43 INS5 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65 DEL65