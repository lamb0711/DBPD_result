Simplify ChildNodeEntries in NodeState.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431870 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ListIterator;
-     * Returns a list of child node entries that do not exist in the overlayed
-     * node state but have been added to <i>this</i> node state.
+     * Returns a collection of child node entries that do not exist in the
+     * overlayed node state but have been added to <i>this</i> node state.
-     * @return list of added child node entries
+     * @return collection of added child node entries
-    public synchronized List getAddedChildNodeEntries() {
+    public synchronized Collection getAddedChildNodeEntries() {
-     * Returns a list of child node entries, that exist in the overlayed node state
+     * Returns a collection of child node entries, that exist in the overlayed node state
-     * @return list of removed child node entries
+     * @return collection of removed child node entries
-    public synchronized List getRemovedChildNodeEntries() {
+    public synchronized Collection getRemovedChildNodeEntries() {
+
-    private class ChildNodeEntries implements List, Cloneable {
+    private class ChildNodeEntries implements Collection {
-         * Returns a list of <code>ChildNodeEntry</code>s who do only exist in
+         * Returns a Collection of <code>ChildNodeEntry</code>s who do only exist in
-        List removeAll(ChildNodeEntries other) {
+        Collection removeAll(ChildNodeEntries other) {
-        public Object get(int index) {
-            return entries.getValue(index);
-        }
-
-        public int indexOf(Object o) {
-            if (o instanceof ChildNodeEntry) {
-                return entries.indexOf(((ChildNodeEntry) o).getId());
-            } else {
-                return -1;
-            }
-        }
-
-        public int lastIndexOf(Object o) {
-            // entries are unique
-            return indexOf(o);
-        }
-
-        public ListIterator listIterator() {
-            return new EntriesIterator();
-        }
-
-        public ListIterator listIterator(int index) {
-            if (index < 0 || index >= entries.size()) {
-                throw new IndexOutOfBoundsException();
-            }
-            ListIterator iter = new EntriesIterator();
-            while (index-- > 0) {
-                iter.next();
-            }
-            return iter;
-        }
-
-        public List subList(int fromIndex, int toIndex) {
-            // @todo FIXME does not fulfil the contract of List.subList(int,int)
-            return Collections.unmodifiableList(new ArrayList(this).subList(fromIndex, toIndex));
-        }
-
-        public void add(int index, Object element) {
-            throw new UnsupportedOperationException();
-        }
-
-        public boolean addAll(int index, Collection c) {
-            throw new UnsupportedOperationException();
-        }
-
-        public Object remove(int index) {
-            throw new UnsupportedOperationException();
-        }
-
-        public boolean remove(Object o) {
+       public boolean remove(Object o) {
-        public Object set(int index, Object element) {
-            throw new UnsupportedOperationException();
-        }
-
-        //------------------------------------------------< Cloneable support >
-        /**
-         * Returns a shallow copy of this <code>ChildNodeEntries</code> instance;
-         * the entries themselves are not cloned.
-         *
-         * @return a shallow copy of this instance.
-         */
-        protected Object clone() {
-            ChildNodeEntries clone = new ChildNodeEntries();
-            clone.entries = (LinkedMap) entries.clone();
-            clone.nameMap = new HashMap(nameMap.size());
-            for (Iterator it = nameMap.keySet().iterator(); it.hasNext();) {
-                Object key = it.next();
-                Object obj = nameMap.get(key);
-                if (obj instanceof ArrayList) {
-                    // clone List
-                    obj = ((ArrayList) obj).clone();
-                }
-                clone.nameMap.put(key, obj);
-            }
-            return clone;
-        }
-
-        class EntriesIterator implements ListIterator {
+
+        class EntriesIterator implements Iterator {
-            public boolean hasPrevious() {
-                return mapIter.hasPrevious();
-            }
-
-            public int nextIndex() {
-                return entries.indexOf(mapIter.getKey()) + 1;
-            }
-
-            public Object previous() {
-                mapIter.previous();
-                return mapIter.getValue();
-            }
-
-            public int previousIndex() {
-                return entries.indexOf(mapIter.getKey()) - 1;
-            }
-
-            public void add(Object o) {
-                throw new UnsupportedOperationException();
-            }
-
-
-            public void set(Object o) {
-                throw new UnsupportedOperationException();
-            }

UPD43 UPD43 MOV43 UPD42 UPD42 UPD43 MOV43 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 UPD66 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL41 DEL8 DEL34 DEL38 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL37 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL52 DEL14 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL40 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL40 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL34 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL34 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31