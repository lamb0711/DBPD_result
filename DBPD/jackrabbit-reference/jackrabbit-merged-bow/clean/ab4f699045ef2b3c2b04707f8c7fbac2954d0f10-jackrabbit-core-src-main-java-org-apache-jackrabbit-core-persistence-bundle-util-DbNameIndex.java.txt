JCR-1612: Reintroduce NamespaceStorage and namespace-caching

Make NamespaceRegistryImpl implement StringIndex and simplify the downstream classes accordingly.

To make this happen I modified the StringIndex contract a bit, allowing (and, for indexToString, requiring) implementations to throw exceptions if an unknown index is requested. Modified implementing classes accordingly.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@681121 13f79535-47bb-0310-9956-ffa450edef68

-    public String indexToString(int idx) {
+    public String indexToString(int idx) throws IllegalArgumentException {
-            if (s == null) {
-                throw new IllegalStateException("String empty???");
-            }
-        ResultSet rs = null;
+        int result = -1;
-            Statement stmt = connectionManager.executeStmt(nameInsertSQL, new Object[]{string}, true, 0);
-            rs = stmt.getGeneratedKeys();
-            if (!rs.next()) {
-                return -1;
-            } else {
-                return rs.getInt(1);
+            Statement stmt = connectionManager.executeStmt(
+                    nameInsertSQL, new Object[] { string }, true, 0);
+            ResultSet rs = stmt.getGeneratedKeys();
+            try {
+                if (rs.next()) {
+                    result = rs.getInt(1);
+                }
+            } finally {
+                rs.close();
-            IllegalStateException ise = new IllegalStateException("Unable to insert index for string: " + string);
+            IllegalStateException ise = new IllegalStateException(
+                    "Unable to insert index for string: " + string);
-        } finally {
-            closeResultSet(rs);
+        }
+        if (result != -1) {
+            return result;
+        } else {
+            // Could not get the index with getGeneratedKeys, try with SELECT
+            return getIndex(string);
-        ResultSet rs = null;
-            Statement stmt = connectionManager.executeStmt(indexSelectSQL, new Object[]{string});
-            rs = stmt.getResultSet();
-            if (!rs.next()) {
-                return -1;
-            } else {
-                return rs.getInt(1);
+            Statement stmt = connectionManager.executeStmt(
+                    indexSelectSQL, new Object[] { string });
+            ResultSet rs = stmt.getResultSet();
+            try {
+                if (rs.next()) {
+                    return rs.getInt(1);
+                } else {
+                    return -1;
+                }
+            } finally {
+                rs.close();
-            IllegalStateException ise = new IllegalStateException("Unable to read index for string: " + string);
+            IllegalStateException ise = new IllegalStateException(
+                    "Unable to read index for string: " + string);
-        } finally {
-            closeResultSet(rs);
-     * @return the string or <code>null</code> if not found.
+     * @return the string
+     * @throws IllegalArgumentException if the string is not found
-    protected String getString(int index) {
-        ResultSet rs = null;
+    protected String getString(int index)
+            throws IllegalArgumentException, IllegalStateException {
+        String result = null;
-            Statement stmt = connectionManager.executeStmt(nameSelectSQL, new Object[]{new Integer(index)});
-            rs = stmt.getResultSet();
-            if (!rs.next()) {
-                return null;
-            } else {
-                return rs.getString(1);
+            Statement stmt = connectionManager.executeStmt(
+                    nameSelectSQL, new Object[] { new Integer(index) });
+            ResultSet rs = stmt.getResultSet();
+            try {
+                if (rs.next()) {
+                    result = rs.getString(1);
+                }
+            } finally {
+                rs.close();
-            IllegalStateException ise = new IllegalStateException("Unable to read name for index: " + index);
+            IllegalStateException ise = new IllegalStateException(
+                    "Unable to read name for index: " + index);
-        } finally {
-            closeResultSet(rs);
+        if (result == null) {
+            throw new IllegalArgumentException("Index not found: " + index);
+        }
+        return result;
-    /**
-     * Closes the result set
-     * @param rs the result set.
-     */
-    protected void closeResultSet(ResultSet rs) {
-        if (rs != null) {
-            try {
-                rs.close();
-            } catch (SQLException se) {
-                // ignore
-            }
-        }
-    }

INS43 INS43 MOV43 INS42 INS25 INS65 INS42 INS25 INS41 INS39 INS27 INS8 INS8 UPD66 INS42 INS66 INS43 INS27 INS8 INS42 UPD42 INS38 INS60 INS54 INS42 INS38 INS41 INS41 INS60 INS54 INS42 UPD42 INS60 INS54 INS42 INS33 INS53 INS34 MOV43 INS59 INS8 INS8 INS34 INS42 INS32 MOV43 INS59 INS8 INS8 MOV43 INS59 INS8 MOV8 INS14 INS42 MOV32 MOV25 INS21 INS42 INS42 INS42 MOV32 MOV25 MOV8 MOV21 INS42 MOV32 MOV25 INS43 INS27 MOV32 INS32 MOV32 INS32 MOV32 INS42 INS45 INS42 INS21 INS42 INS42 INS42 INS42 INS21 INS7 INS7 INS42 INS32 INS42 MOV32 MOV42 MOV42 MOV34 DEL42 DEL33 DEL27 DEL45 DEL14 DEL53 DEL8 DEL25 DEL33 DEL38 DEL34 DEL38 DEL41 DEL8 DEL32 DEL41 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL33 DEL59 DEL60 DEL38 DEL42 DEL7 DEL42 DEL42 DEL32 DEL21 DEL8 DEL38 DEL33 DEL41 DEL8 DEL41 DEL42 DEL7 DEL42 DEL42 DEL32 DEL21 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31