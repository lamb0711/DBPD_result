- fixed (JCR-69) removing source parent node after session move throws on save
  http://issues.apache.org/jira/browse/JCR-69
- fixed Session.move(): lock on source parent was not checked
  

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157745 13f79535-47bb-0310-9956-ffa450edef68

-        ArrayList list = new ArrayList();
-        Iterator iter = childNodeEntries.iterator();
-        while (iter.hasNext()) {
-            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
-            if (entry.getUUID().equals(uuid)) {
-                list.add(entry);
-            }
-        }
-        return Collections.unmodifiableList(list);
+        return childNodeEntries.get(uuid);
-        ArrayList list = new ArrayList();
-        Iterator iter = childNodeEntries.iterator();
-        while (iter.hasNext()) {
-            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
-            if (entry.getName().equals(nodeName)) {
-                list.add(entry);
-            }
-        }
-        return Collections.unmodifiableList(list);
+        return childNodeEntries.get(nodeName);
-        ArrayList list = new ArrayList(parentUUIDs);
-
-        Iterator i = other.parentUUIDs.iterator();
-        while (i.hasNext()) {
-            list.remove(i.next());
-        }
-
+        ArrayList list = new ArrayList(parentUUIDs);
+        list.removeAll(other.parentUUIDs);
-        ArrayList list = new ArrayList(propertyEntries);
-
-        Iterator i = other.propertyEntries.iterator();
-        while (i.hasNext()) {
-            list.remove(i.next());
-        }
-
+        ArrayList list = new ArrayList(propertyEntries);
+        list.removeAll(other.propertyEntries);
-        ArrayList list = new ArrayList(childNodeEntries.entries());
-
-        Iterator i = other.childNodeEntries.entries().iterator();
-        while (i.hasNext()) {
-            list.remove(i.next());
-        }
-
-        return list;
+        return childNodeEntries.removeAll(other.childNodeEntries);
-
-        Iterator i = parentUUIDs.iterator();
-        while (i.hasNext()) {
-            list.remove(i.next());
-        }
-
+        list.removeAll(parentUUIDs);
-
-        Iterator i = propertyEntries.iterator();
-        while (i.hasNext()) {
-            list.remove(i.next());
-        }
-
+        list.removeAll(propertyEntries);
-        ArrayList list = new ArrayList(other.childNodeEntries.entries());
-
-        Iterator i = childNodeEntries.entries().iterator();
-        while (i.hasNext()) {
-            list.remove(i.next());
-        }
-
-        return list;
+        return other.childNodeEntries.removeAll(childNodeEntries);
-     * @param parentUUID the parent <code>NodeState</code>'s UUID or <code>null</code>
-     *                   if either this item state should represent the root node or this item state
-     *                   should be 'free floating', i.e. detached from the repository's hierarchy.
+     * @param parentUUID the parent <code>NodeState</code>'s UUID or
+     *                   <code>null</code> if either this item state should
+     *                   represent the root node or this item state should
+     *                   be 'free floating', i.e. detached from the repository's
+     *                   hierarchy.
-        // @todo is this correct?
-    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
+    private void readObject(ObjectInputStream in)
+            throws IOException, ClassNotFoundException {
+        List get(QName nodeName) {
+            List siblings = (List) names.get(nodeName);
+            if (siblings == null) {
+                return Collections.EMPTY_LIST;
+            } else {
+                return Collections.unmodifiableList(siblings);
+            }
+        }
+
+        boolean remove(QName nodeName, String uuid) {
+            List siblings = (List) names.get(nodeName);
+            if (siblings == null || siblings.isEmpty()) {
+                return false;
+            }
+
+            Iterator iter = siblings.iterator();
+            while (iter.hasNext()) {
+                ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+                if (entry.getUUID().equals(uuid)) {
+                    return remove(entry);
+                }
+            }
+            return false;
+        }
+
+        List get(String uuid) {
+            if (entries.isEmpty()) {
+                return Collections.EMPTY_LIST;
+            }
+            ArrayList list = new ArrayList();
+            Iterator iter = entries.iterator();
+            while (iter.hasNext()) {
+                ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+                if (entry.getUUID().equals(uuid)) {
+                    list.add(entry);
+                }
+            }
+            return Collections.unmodifiableList(list);
+        }
+
+
+        /**
+         * Returns a list of <code>ChildNodeEntry</code>s who do only exist in
+         * <code>this</code> but not in <code>other</code>
+         * <p/>
+         * Note that two entries are considered identical in this context if
+         * they have the same name and uuid, i.e. the index is disregarded,
+         * whereas <code>ChildNodeEntry.equals(Object)</code> also compares
+         * the index.
+         *
+         * @param other entries to be removed
+         * @return a new list of entries who do only exist in <code>this</code>
+         *         but not in <code>other</code>
+         */
+        List removeAll(ChildNodeEntries other) {
+            if (entries.isEmpty()) {
+                return Collections.EMPTY_LIST;
+            }
+            if (other.entries.isEmpty()) {
+                return Collections.unmodifiableList(entries);
+            }
+
+            ChildNodeEntries result = new ChildNodeEntries();
+            result.addAll(entries);
+
+            Iterator iter = other.entries.iterator();
+            while (iter.hasNext()) {
+                ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+                result.remove(entry.getName(), entry.getUUID());
+            }
+            return result.entries;
+        }

INS31 INS31 MOV29 MOV83 MOV83 INS43 INS42 INS44 INS8 MOV29 INS83 INS83 MOV43 INS42 MOV44 INS8 MOV60 MOV60 INS31 INS31 MOV31 INS31 UPD42 MOV42 INS43 INS42 INS41 MOV41 MOV21 MOV21 INS41 MOV21 MOV21 INS41 INS43 INS42 INS44 INS8 INS39 INS42 INS44 INS44 INS8 UPD42 INS29 INS43 INS42 INS44 INS8 UPD42 MOV42 INS32 INS32 INS32 UPD66 INS66 UPD66 UPD66 INS66 INS42 INS43 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS61 INS41 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS25 INS60 INS21 INS60 MOV61 INS41 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 INS40 UPD42 INS40 MOV42 UPD42 MOV42 MOV40 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 MOV40 UPD42 MOV42 MOV42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS43 INS59 INS27 INS8 MOV43 INS59 INS32 INS8 INS9 INS32 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS32 INS8 INS32 INS8 INS43 INS59 INS32 MOV43 INS59 INS40 INS42 INS42 INS11 INS42 INS33 INS41 INS41 INS42 INS42 INS11 INS27 INS32 INS41 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS41 MOV42 INS42 INS42 INS41 INS40 INS42 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 MOV21 INS43 INS32 INS40 INS32 INS43 INS32 INS42 INS33 INS42 INS42 INS9 INS42 INS42 INS43 INS59 INS32 INS8 INS40 UPD42 INS40 INS32 INS43 INS40 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL41 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL41 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25