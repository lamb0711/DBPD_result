JCR-4005: TestVFSDataStore.testDeleteRecord() fails occasionally

Apply patch by Woonsan Ko

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1757309 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
-    private ThreadPoolExecutor asyncWriteExecuter;
+    private Executor asyncWriteExecutor;
-        asyncWriteExecuter = createAsyncWriteExecuter();
+        asyncWriteExecutor = createAsyncWriteExecutor();
-        getAsyncWriteExecuter().execute(new AsyncUploadJob(identifier, file, callback));
+        getAsyncWriteExecutor().execute(new AsyncUploadJob(identifier, file, callback));
-        getAsyncWriteExecuter().execute(new AsyncTouchJob(identifier, minModifiedDate, callback));
+        getAsyncWriteExecutor().execute(new AsyncTouchJob(identifier, minModifiedDate, callback));
-        getAsyncWriteExecuter().shutdownNow();
+        Executor asyncExecutor = getAsyncWriteExecutor();
+
+        if (asyncExecutor != null && asyncExecutor instanceof ExecutorService) {
+            ((ExecutorService) asyncExecutor).shutdownNow();
+        }
-    protected ThreadPoolExecutor createAsyncWriteExecuter() {
-        return (ThreadPoolExecutor) Executors.newFixedThreadPool(asyncWritePoolSize,
-                new NamedThreadFactory("vfs-write-worker"));
+    protected Executor createAsyncWriteExecutor() {
+        Executor asyncExecutor;
+
+        if (getAsyncWritePoolSize() > 0) {
+            asyncExecutor = (ThreadPoolExecutor) Executors.newFixedThreadPool(getAsyncWritePoolSize(),
+                    new NamedThreadFactory("vfs-write-worker"));
+        } else {
+            asyncExecutor = new ImmediateExecutor();
+        }
+
+        return asyncExecutor;
-    protected ThreadPoolExecutor getAsyncWriteExecuter() {
-        return asyncWriteExecuter;
+    protected Executor getAsyncWriteExecutor() {
+        return asyncWriteExecutor;
+    }
+
+    /**
+     * Returns the approximate number of threads that are actively executing asynchronous writing tasks.
+     * @return the approximate number of threads that are actively executing asynchronous writing tasks
+     */
+    protected int getAsyncWriteExecutorActiveCount() {
+        Executor asyncExecutor = getAsyncWriteExecutor();
+
+        if (asyncExecutor != null && asyncExecutor instanceof ThreadPoolExecutor) {
+            return ((ThreadPoolExecutor) asyncExecutor).getActiveCount();
+        }
+
+        return 0;
+     * This class implements {@link Executor} interface to run {@code command} right away,
+     * resulting in non-asynchronous mode executions.
+     */
+    private class ImmediateExecutor implements Executor {
+        @Override
+        public void execute(Runnable command) {
+            command.run();
+        }
+    }
+
+    /**

INS26 INS26 INS40 INS40 INS31 INS55 UPD43 INS8 INS43 UPD42 INS8 INS43 UPD42 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS42 INS43 INS31 UPD42 UPD42 INS60 INS25 INS42 INS60 INS25 INS41 INS42 INS65 INS65 INS60 INS25 INS41 INS65 INS42 INS78 INS83 INS39 INS42 INS44 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 MOV8 INS8 INS42 UPD42 INS66 INS66 INS43 INS59 INS27 INS8 INS34 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS43 INS42 INS21 UPD42 INS42 INS42 INS32 INS27 INS62 MOV21 INS42 INS42 INS32 INS34 INS21 INS21 INS42 INS42 INS32 INS27 INS62 INS41 INS42 INS66 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS33 INS42 INS43 INS42 INS7 INS7 INS42 INS42 INS33 INS42 MOV43 INS32 INS42 INS42 INS42 INS36 INS42 MOV11 INS42 INS14 INS36 INS42 INS11 INS43 INS11 INS43 INS42 INS32 INS42 MOV43 INS42 INS42 UPD42 MOV42 DEL42 DEL32 DEL8 DEL41