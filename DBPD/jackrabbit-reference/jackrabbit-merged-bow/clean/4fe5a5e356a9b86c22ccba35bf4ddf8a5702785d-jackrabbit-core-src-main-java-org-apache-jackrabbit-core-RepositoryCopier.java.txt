JCR-2640: Internal repository context

Address Stefan's point about not accessing the context variable directly from external classes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@948770 13f79535-47bb-0310-9956-ffa450edef68

-     * Source repository.
+     * Source repository context.
-    private final RepositoryImpl source;
+    private final RepositoryContext source;
-     * Target repository.
+     * Target repository context.
-    private final RepositoryImpl target;
+    private final RepositoryContext target;
-        this.source = source;
-        this.target = target;
+        // TODO: It would be better if we were given the RepositoryContext
+        // instances directly. Perhaps we should use something like
+        // RepositoryImpl.getRepositoryCopier(RepositoryImpl target)
+        // instead of this public constructor to achieve that.
+        this.source = source.getRepositoryContext();
+        this.target = target.getRepositoryContext();
-                source.repConfig.getHomeDir(),
-                target.repConfig.getHomeDir());
+                source.getRepository().repConfig.getHomeDir(),
+                target.getRepository().repConfig.getHomeDir());
-        NamespaceRegistry sourceRegistry = source.context.getNamespaceRegistry();
-        NamespaceRegistry targetRegistry = target.context.getNamespaceRegistry();
+        NamespaceRegistry sourceRegistry = source.getNamespaceRegistry();
+        NamespaceRegistry targetRegistry = target.getNamespaceRegistry();
-        NodeTypeRegistry sourceRegistry = source.context.getNodeTypeRegistry();
-        NodeTypeRegistry targetRegistry = target.context.getNodeTypeRegistry();
+        NodeTypeRegistry sourceRegistry = source.getNodeTypeRegistry();
+        NodeTypeRegistry targetRegistry = target.getNodeTypeRegistry();
-                source.context.getInternalVersionManager().getPersistenceManager(),
-                target.context.getInternalVersionManager().getPersistenceManager(),
-                target.getDataStore());
+                source.getInternalVersionManager().getPersistenceManager(),
+                target.getInternalVersionManager().getPersistenceManager(),
+                target.getRepository().getDataStore());
-        Collection<String> existing = Arrays.asList(target.getWorkspaceNames());
-        for (String name : source.getWorkspaceNames()) {
+        Collection<String> existing =
+            Arrays.asList(target.getRepository().getWorkspaceNames());
+        for (String name : source.getRepository().getWorkspaceNames()) {
-                target.createWorkspace(name);
+                target.getRepository().createWorkspace(name);
-                    source.getWorkspaceInfo(name).getPersistenceManager(),
-                    target.getWorkspaceInfo(name).getPersistenceManager(),
-                    target.getDataStore());
+                    source.getRepository().getWorkspaceInfo(name).getPersistenceManager(),
+                    target.getRepository().getWorkspaceInfo(name).getPersistenceManager(),
+                    target.getRepository().getDataStore());
-            LockManagerImpl sourceLockManager = source.getLockManager(name);
-            LockManagerImpl targetLockManager = target.getLockManager(name);
+            LockManagerImpl sourceLockManager =
+                source.getRepository().getLockManager(name);
+            LockManagerImpl targetLockManager =
+                target.getRepository().getLockManager(name);

UPD43 UPD43 UPD42 UPD42 UPD66 UPD66 MOV43 MOV43 MOV43 MOV43 MOV43 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS22 INS22 INS42 INS42 INS42 INS42 MOV43 MOV42 INS42 MOV43 MOV43 MOV43 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 MOV42 INS42 MOV43 INS32 INS32 INS32 INS32 MOV42 INS42 MOV42 INS42 MOV42 INS42 INS32 INS32 MOV42 INS42 MOV42 INS42 MOV42 INS42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40