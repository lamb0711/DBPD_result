replacing deprecated calls in NamespaceResolver

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@425032 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.PathFormat;
-import org.apache.jackrabbit.name.Path;
+import org.apache.jackrabbit.name.NameCache;
-class CachingNamespaceResolver implements NamespaceResolver, NamespaceListener {
+class CachingNamespaceResolver implements NamespaceResolver, NamespaceListener, NameCache {
-     * @inheritDoc
+     * Disposes this <code>CachingNamespaceResolver</code>.
+     */
+    public void dispose() {
+        base.removeListener(this);
+    }
+
+    //--------------------------------------------------< NamespaceResolver >---
+    /**
+     * @see NamespaceResolver#getURI(String)
-     * @inheritDoc
+     * @see NamespaceResolver#getPrefix(String)
-     * @inheritDoc
+     * @see NamespaceResolver#getQName(String)
+     * @deprecated
-     * @inheritDoc
+     * @see NamespaceResolver#getJCRName(QName)
+     * @deprecated
-    /**
-     * @inheritDoc
-     * As currently paths are not cached, the call is delegated to
-     * {@link PathFormat#parse(String, NamespaceResolver)}.
-     */
-    public Path getQPath(String jcrPath) throws MalformedPathException {
-        return PathFormat.parse(jcrPath, this);
-    }
-
-    /**
-     * @inheritDoc
-     * As currently paths are not cached, the call is delegated to
-     * {@link PathFormat#format(Path, NamespaceResolver)}.
-     */
-    public String getJCRPath(Path qPath) throws NoPrefixDeclaredException {
-        return PathFormat.format(qPath, this);
-    }
-
-    /**
-     * Disposes this <code>CachingNamespaceResolver</code>.
-     */
-    public void dispose() {
-        base.removeListener(this);
-    }
-
+
+    //----------------------------------------------------------< NameCache >---
+    /**
+     * @inheritDoc
+     */
+    public synchronized QName retrieveName(String jcrName) {
+        return (QName) jcrNameToQName.get(jcrName);
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public synchronized String retrieveName(QName name) {
+        return (String) qnameToJCRName.get(name);
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public synchronized void cacheName(String jcrName, QName name) {
+        qnameToJCRName.put(name, jcrName);
+        jcrNameToQName.put(jcrName, name);
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public synchronized void evictAllNames() {
+        qnameToJCRName.clear();
+        jcrNameToQName.clear();
+    }

MOV31 MOV31 UPD40 INS43 INS31 INS31 INS31 INS42 INS29 INS29 INS29 INS29 MOV29 INS83 INS83 INS43 INS42 INS44 INS8 MOV29 INS83 INS83 MOV43 INS42 INS44 MOV8 MOV29 INS83 INS39 UPD42 INS44 MOV29 INS83 INS83 INS39 INS42 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS43 INS42 UPD43 UPD42 INS43 INS42 INS21 INS21 INS21 INS21 INS68 INS68 INS68 INS68 MOV42 INS11 UPD42 MOV42 INS11 UPD42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 MOV69 INS42 INS42 INS69 INS43 INS32 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL43 DEL31 DEL52 DEL32 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL43 DEL52 DEL32 DEL41