- Use ItemStateLifeCycleListener instead of ItemStateListener in ItemImpl.
- Remove usage of ItemState.dispose() and the method itself.
- Remove method ItemStateListener.stateDiscarded() and all implementations of that method.
- Remove unused methods in ChangeLog: disconnect() and undo()
- Remove ItemState.discard() and related methods
- Rename ItemState.copy() to ItemState.copyFrom()
- Remove ItemState.STATUS_UNDEFINED. An ItemState always has a defined status!
- Rename TransientItemStateManager.disposeAllItemStates() to simply dispose().
- Introduce method ItemState.refresh() which is called instead of discard(). (Not yet implemented!)
- Clarify useage of WorkspaceManager.onEventReceived()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@433998 13f79535-47bb-0310-9956-ffa450edef68

-     * the status is undefined
-     */
-    public static final int STATUS_UNDEFINED = 0;
-    /**
-    protected int status = STATUS_UNDEFINED;
+    protected int status;
-    abstract void copy(ItemState state);
+    abstract void copyFrom(ItemState state);
-            copy(overlayedState);
+            copyFrom(overlayedState);
-            overlayedState.copy(this);
-        }
-    }
-
-    /**
-     * Called by <code>TransientItemStateManager</code> and
-     * <code>LocalItemStateManager</code> when this item state has been disposed.
-     */
-    void onDisposed() {
-        disconnect();
-        overlayedState = null;
-        setStatus(STATUS_UNDEFINED);
-        // prepare this instance so it can be gc'ed
-        synchronized (listeners) {
-            listeners.clear();
+            overlayedState.copyFrom(this);
-
-     * Discards this instance, i.e. renders it 'invalid'.
+     * Refreshes this item state
-    protected void discard() {
-        if (status != STATUS_UNDEFINED) {
-            // notify listeners
-            notifyStateDiscarded();
-            // reset status
-            setStatus(STATUS_UNDEFINED);
-        }
-    }
-
-    /**
-     * Notify the listeners that the persistent state this object is
-     * representing has been discarded.
-     */
-    protected void notifyStateDiscarded() {
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDiscarded(this);
-            }
-        }
+    protected void refresh() {
+        // TODO: how is this done? where is the new state retrieved from???
+        // TODO: pass in as argument?
-            case STATUS_UNDEFINED:
-            case STATUS_UNDEFINED:
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDiscarded(ItemState discarded) {
-        // underlying persistent state has been discarded, discard this instance too
-        discard();
-    }

UPD42 UPD42 INS8 MOV27 MOV27 UPD66 UPD42 UPD42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL31 DEL42 DEL42 DEL27 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL42 DEL42 DEL2 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL42 DEL49 DEL42 DEL49 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL8 DEL31