- improved versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@122838 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.version.VersionManager;
+import org.apache.jackrabbit.core.version.InternalVersionHistory;
-import java.util.Iterator;
+import java.util.Iterator;
- * This Class implements...
+ * The history root node state represents the root node of all version histories.
+ * the version histories are dynamically exposed. since there could be very many,
+ * it does not return all the child nodes by the {@link #getChildNodeEntries()}}
+ * method. this implies, that the version storage is not browsable, but the
+ * nodes are nevertheless correctly exposed (this behaviour can be changed, by
+ * modifying the compile-time constant {@link #LIST_ALL_HISTORIES}.
-    private VersionManager vm;
+    /**
+     * flag for listing all histories
+     */
+    private static final boolean LIST_ALL_HISTORIES = true;
-    public HistoryRootNodeState(VersionItemStateProvider vm, String uuid, String parentUUID) {
-        super(vm, uuid, NodeTypeRegistry.NT_UNSTRUCTURED, parentUUID);
-        this.vm = vm.getVersionManager();
+    /**
+     * the version manager
+     */
+    private final VersionManager vm;
-        setDefinitionId(vm.getNodeDefId(VersionManager.NODENAME_HISTORY_ROOT));
+    /**
+     * creates a new history root state
+     * @param stateMgr
+     * @param parentUUID
+     * @param uuid
+     * @throws RepositoryException
+     */
+    protected HistoryRootNodeState(VersionItemStateProvider stateMgr,
+                                   VersionManager vm,
+                                String parentUUID,
+                                String uuid) throws RepositoryException {
+        super(stateMgr, parentUUID, uuid, NodeTypeRegistry.NT_UNSTRUCTURED, new QName[0]);
+        this.vm = vm;
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#hasChildNodeEntry(org.apache.jackrabbit.core.QName)
+     */
-        return vm.hasVersionHistory(name);
+        return vm.hasVersionHistory(name.getLocalName());
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#hasChildNodeEntry(org.apache.jackrabbit.core.QName, int)
+     */
-        return index <= 1 ? vm.hasVersionHistory(name) : false;
+        return index <= 1 ? vm.hasVersionHistory(name.getLocalName()) : false;
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#getChildNodeEntry(org.apache.jackrabbit.core.QName, int)
+     */
-                InternalVersionHistory hist = vm.getVersionHistory(nodeName);
+                InternalVersionHistory hist = vm.getVersionHistory(nodeName.getLocalName());
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#getChildNodeEntries()
+     */
-        try {
-            ArrayList list = new ArrayList(vm.getNumVersionHistories());
-            Iterator iter = vm.getVersionHistories();
-            while (iter.hasNext()) {
-                InternalVersionHistory vh = (InternalVersionHistory) iter.next();
-                QName name = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, vh.getId());
-                list.add(new ChildNodeEntry(name, vh.getId(), 1));
+        if (LIST_ALL_HISTORIES) {
+            try {
+                ArrayList list = new ArrayList(vm.getNumVersionHistories());
+                Iterator iter = vm.getVersionHistoryIds();
+                while (iter.hasNext()) {
+                    String id = (String) iter.next();
+                    QName name = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, id);
+                    list.add(new ChildNodeEntry(name, id, 1));
+                }
+                return list;
+            } catch (RepositoryException e) {
+                // ignore
-            return list;
-        } catch (RepositoryException e) {
-            // ignore
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#getChildNodeEntries(String)
+     */
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#getChildNodeEntries(org.apache.jackrabbit.core.QName)
+     */
-
-

MOV26 INS26 INS26 INS40 INS40 INS23 MOV44 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS29 UPD83 INS44 INS43 INS29 INS29 INS29 INS29 INS8 INS29 INS29 INS66 INS66 INS66 INS65 INS66 UPD66 INS66 INS66 INS65 INS66 INS65 INS42 INS9 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS25 MOV41 INS65 INS65 INS68 INS67 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS3 INS68 INS68 INS68 INS68 INS42 MOV8 INS68 INS68 INS42 INS42 INS5 INS34 INS42 INS40 INS42 INS69 INS32 INS40 INS42 INS69 INS69 INS40 INS42 INS69 INS69 INS40 INS42 INS40 INS42 INS69 INS40 INS42 INS69 INS43 INS85 INS43 MOV42 INS42 INS43 INS39 INS32 INS43 INS39 INS43 INS43 INS42 INS40 INS40 MOV42 INS42 INS40 INS42 INS40 INS32 UPD42 UPD43 MOV43 MOV42 INS42 UPD42 UPD42 UPD43 MOV43 INS42 INS42 UPD42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32