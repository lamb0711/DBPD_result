JCR-2453 - Break the spi2dav dependency to jcr-server

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1002639 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.webdav.NodeTypeConstants;
+import org.apache.jackrabbit.commons.webdav.NodeTypeUtil;
-import org.apache.jackrabbit.webdav.xml.DomUtil;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import java.util.List;
-    private static Logger log = LoggerFactory.getLogger(NodeTypeProperty.class);
-
-            // assume property has be built from xml
-            Object propValue = property.getValue();
-            if (propValue instanceof List) {
-                retrieveNodeTypeNames(((List<?>)propValue));
-            } else if (propValue instanceof Element) {
-                List<Element> l = Collections.singletonList((Element) propValue);
-                retrieveNodeTypeNames(l);
-            } else {
-                log.debug("NodeTypeProperty '" + property.getName() + "' has no/unparsable value.");
-            }
-        }
-    }
-
-    private void retrieveNodeTypeNames(List<?> elementList) {
-        for (Object content : elementList) {
-            if (!(content instanceof Element)) {
-                continue;
-            }
-            Element el = (Element) content;
-            if (XML_NODETYPE.equals(el.getLocalName()) && NodeTypeConstants.NAMESPACE.isSame(el.getNamespaceURI())) {
-                String nodetypeName = DomUtil.getChildText(el, XML_NODETYPENAME, NodeTypeConstants.NAMESPACE);
-                if (nodetypeName != null && !"".equals(nodetypeName)) {
-                    nodetypeNames.add(nodetypeName);
-                }
-            } else {
-                log.debug("'dcr:nodetype' element expected -> ignoring element '" + ((Element) content).getNodeName() + "'");
-            }
+            nodetypeNames.addAll(NodeTypeUtil.ntNamesFromXml(property.getValue()));
-     * Return a set of nodetype names present in this property.
+     * Return a set of node type names present in this property.
-     * @return set of nodetype names
+     * @return set of node type names
-        return nodetypeNames;
+        return Collections.unmodifiableSet(nodetypeNames);
-        return nodetypeNames;
+        return Collections.unmodifiableSet(nodetypeNames);
-            Element ntElem = DomUtil.addChildElement(elem, XML_NODETYPE, NodeTypeConstants.NAMESPACE);
-            DomUtil.addChildElement(ntElem, XML_NODETYPENAME, NodeTypeConstants.NAMESPACE, name);
+            elem.appendChild(NodeTypeUtil.ntNameToXml(name, document));

MOV26 MOV26 UPD40 UPD40 INS8 MOV46 INS25 MOV62 MOV8 MOV8 UPD66 UPD66 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS32 UPD42 UPD42 INS32 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL45 DEL32 DEL45 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL11 DEL36 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL45 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21