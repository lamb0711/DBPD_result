JCR-2699: Improve read/write concurrency

Refactor the LRU cache handling from MLRUItemStateCache and BundleCache to a new LRUCache class. Add a test case for the cache.

Switch from LinkedHashMap to ConcurrentHashMap with explicitly managed LRU linked list to reduce the size of the synchronized blocks.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1003542 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.jackrabbit.core.cache.Cache;
-import org.apache.jackrabbit.core.cache.CacheAccessListener;
+import org.apache.jackrabbit.core.cache.CacheManager;
+import org.apache.jackrabbit.core.cache.LRUCache;
-public class MLRUItemStateCache implements ItemStateCache, Cache {
+public class MLRUItemStateCache implements ItemStateCache {
+
-    /** the amount of memory the entries use */
-    private volatile long totalMem;
-
-    /** the maximum of memory the cache may use */
-    private volatile long maxMem;
-
-    private volatile long numWrites;
+    private volatile long numWrites = 0;
-    /** the access count */
-    private volatile long accessCount;
+    private final LRUCache<ItemId, ItemState> cache =
+        new LRUCache<ItemId, ItemState>(DEFAULT_MAX_MEM);
-    /** the cache access listeners */
-    private CacheAccessListener accessListener;
-
-    /**
-     * A cache for <code>ItemState</code> instances
-     */
-    private final Map<ItemId, Entry> cache;
-
-    /**
-     * Constructs a new, empty <code>ItemStateCache</code> with a maximum amount
-     * of memory of {@link #DEFAULT_MAX_MEM}.
-     */
-    public MLRUItemStateCache() {
-        this(DEFAULT_MAX_MEM);
-    }
-
-    /**
-     * Constructs a new, empty <code>ItemStateCache</code> with the specified
-     * maximum memory.
-     *
-     * @param maxMem the maximum amount of memory this cache may use.
-     */
-    @SuppressWarnings("serial")
-    private MLRUItemStateCache(int maxMem) {
-        this.maxMem = maxMem;
-        this.cache = new LinkedHashMap<ItemId, MLRUItemStateCache.Entry>(
-                maxMem / 1024, 0.75f, true /* access-ordered */) {
-            @Override
-            protected boolean removeEldestEntry(Map.Entry<ItemId, Entry> e) {
-                long maxMem = MLRUItemStateCache.this.maxMem;
-                if (totalMem <= maxMem) {
-                    return false;
-                } else if (totalMem - e.getValue().size <= maxMem) {
-                    totalMem -= e.getValue().size;
-                    return true;
-                } else {
-                    shrink();
-                    return false;
-                }
-            }
-        };
+    public MLRUItemStateCache(CacheManager cacheMgr) {
+        cacheMgr.add(cache);
+        cache.setAccessListener(cacheMgr);
+
-        synchronized (cache) {
-            return cache.containsKey(id);
-        }
+        return cache.containsKey(id);
-        touch();
-        synchronized (cache) {
-            Entry entry = cache.get(id);
-            if (entry != null) {
-                return entry.state;
-            } else {
-                return null;
-            }
-        }
+        return cache.get(id);
-        synchronized (cache) {
-            ItemState[] states = new ItemState[cache.size()];
-            int i = 0;
-            for (Entry entry : cache.values()) {
-                states[i++] = entry.state;
-            }
-            return states;
-        }
+        return cache.values();
-    public void update(ItemId id) {
-        touch();
-        synchronized (cache) {
-            Entry entry = cache.get(id);
-            if (entry != null) {
-                totalMem -= entry.size;
-                entry.recalc();
-                totalMem += entry.size;
-            }
-        }
-    }
+    public synchronized void cache(ItemState state) {
+        cache.put(state.getId(), state, state.calculateMemoryFootprint());
-    /**
-     * {@inheritDoc}
-     */
-    public void cache(ItemState state) {
-        touch();
-        synchronized (cache) {
-            ItemId id = state.getId();
-            if (cache.containsKey(id)) {
-                log.warn("overwriting cached entry " + id);
-                evict(id);
-            }
-            Entry entry = new Entry(state);
-            totalMem += entry.size;
-            cache.put(id, entry);
-            if (numWrites++ % 10000 == 0 && log.isDebugEnabled()) {
-                log.debug(this + " size=" + cache.size() + ", " + totalMem + "/" + maxMem);
-            }
+        if (numWrites++ % 10000 == 0 && log.isDebugEnabled()) {
+            log.debug("Item state cache size: {}% of {} bytes",
+                    cache.getMemoryUsed() * 100 / cache.getMaxMemorySize(),
+                    cache.getMaxMemorySize());
-        touch();
-        synchronized (cache) {
-            Entry entry = cache.remove(id);
-            if (entry != null) {
-                totalMem -= entry.size;
-            }
-        }
+        cache.remove(id);
-        synchronized (cache) {
-            cache.clear();
-            totalMem = 0;
-        }
+        cache.clear();
-        synchronized (cache) {
-            return cache.isEmpty();
-        }
-    }
-
-    private void touch() {
-        accessCount++;
-        if ((accessCount % CacheAccessListener.ACCESS_INTERVAL) == 0) {
-            if (accessListener != null) {
-                accessListener.cacheAccessed();
-            }
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public long getAccessCount() {
-        return accessCount;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public long getMaxMemorySize() {
-        return maxMem;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public long getMemoryUsed() {
-        return totalMem;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void resetAccessCount() {
-        synchronized (cache) {
-            accessCount = 0;
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void setMaxMemorySize(long size) {
-        synchronized (cache) {
-            this.maxMem = size;
-
-            // remove items, if too many
-            if (totalMem > maxMem) {
-                shrink();
-            }
-        }
-    }
-
-    private void shrink() {
-        List<Map.Entry<ItemId, Entry>> list =
-            new ArrayList<Map.Entry<ItemId, Entry>>(cache.entrySet());
-        for (int i = list.size() - 1; totalMem > maxMem && i >= 0; i--) {
-            Map.Entry<ItemId, Entry> last = list.get(i);
-            totalMem -= last.getValue().size;
-            cache.remove(last.getKey());
-        }
-    }
-
-    /**
-     * Set the cache access listener. Only one listener per cache is supported.
-     *
-     * @param listener the new listener
-     */
-    public void setAccessListener(CacheAccessListener listener) {
-        this.accessListener = listener;
+        return cache.isEmpty();
-        synchronized (cache) {
-            if (accessListener != null) {
-                accessListener.disposeCache(this);
-            }
-        }
-    }
-
-
-    /**
-     * Internal cache entry.
-     */
-    private static class Entry {
-
-        private final ItemState state;
-
-        private long size;
-
-        public Entry(ItemState state) {
-            this.state = state;
-            this.size = 64 + state.calculateMemoryFootprint();
-        }
-
-        public void recalc() {
-            size = 64 + state.calculateMemoryFootprint();
-        }
+        cache.dispose();

MOV31 UPD40 UPD40 INS23 INS31 INS31 MOV83 MOV83 UPD74 MOV74 INS59 UPD83 MOV83 UPD42 MOV42 MOV44 MOV8 MOV8 MOV29 INS8 INS8 MOV29 MOV83 UPD83 MOV83 MOV39 MOV42 MOV44 INS8 MOV29 UPD42 MOV44 MOV8 MOV8 MOV29 INS8 INS34 UPD43 MOV43 UPD43 MOV42 INS14 INS43 INS42 INS21 MOV21 MOV41 MOV41 MOV21 INS25 MOV21 UPD42 UPD42 UPD74 MOV74 INS42 UPD42 MOV42 INS32 INS32 MOV32 MOV32 MOV27 INS8 MOV32 UPD43 MOV43 MOV43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 UPD42 MOV32 INS21 UPD42 UPD42 UPD42 INS32 MOV42 MOV42 INS45 INS27 INS32 INS27 INS32 MOV42 UPD42 MOV42 MOV32 UPD34 MOV34 MOV42 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL40 DEL43 DEL40 DEL43 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL22 DEL7 DEL39 DEL42 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL42 DEL27 DEL9 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL22 DEL27 DEL42 DEL27 DEL9 DEL41 DEL8 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL25 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL59 DEL23 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL17 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL45 DEL79 DEL83 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL34 DEL27 DEL34 DEL9 DEL42 DEL78 DEL39 DEL31 DEL1 DEL14 DEL7 DEL21 DEL8 DEL31 DEL42 DEL51 DEL8 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL51 DEL8 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL37 DEL2 DEL40 DEL7 DEL21 DEL8 DEL70 DEL8 DEL51 DEL8 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL31 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL40 DEL7 DEL21 DEL52 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL31 DEL42 DEL34 DEL7 DEL21 DEL42 DEL51 DEL8 DEL42 DEL51 DEL8 DEL83 DEL39 DEL42 DEL42 DEL37 DEL21 DEL42 DEL40 DEL27 DEL36 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL34 DEL7 DEL21 DEL8 DEL51 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL32 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL37 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31 DEL65 DEL65 DEL29 DEL52 DEL42 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL51 DEL8 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL83 DEL83 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL34 DEL27 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL31 DEL55