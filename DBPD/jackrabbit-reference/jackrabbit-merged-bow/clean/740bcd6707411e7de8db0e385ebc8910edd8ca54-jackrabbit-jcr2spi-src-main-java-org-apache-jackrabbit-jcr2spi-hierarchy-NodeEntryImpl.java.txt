JCR-2218: NodeEntryImpl.getWorkspaceId() very inefficient 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803164 13f79535-47bb-0310-9956-ffa450edef68

-        IdFactory idFactory = getIdFactory();
-        if (uniqueID != null) {
-            return idFactory.createNodeId(uniqueID);
-        } else {
-            PathFactory pf = getPathFactory();
-            if (parent == null) {
-                // root node
-                return idFactory.createNodeId((String) null, pf.getRootPath());
-            } else {
-                Path p = pf.create(getName(), getIndex());
-                return idFactory.createNodeId(parent.getId(), p);
-            }
-        }
+        return getId(false);
-        if (uniqueID != null || parent == null) {
-            // uniqueID and root-node -> internal id is always the same as getId().
-            return getId();
-        } else {
-            NodeId parentId = (revertInfo != null)
-                ? revertInfo.oldParent.getWorkspaceId()
-                : parent.getWorkspaceId();
-            return getIdFactory().createNodeId(parentId,
-                    getPathFactory().create(getName(true), getIndex(true)));
+        return getId(true);
+    }
+
+    private NodeId getId(boolean wspId) throws RepositoryException {
+        if (parent == null) { // shortcut for root
+            return getIdFactory().createNodeId((String) null, getPathFactory().getRootPath());  // fixme: cache root
+        }
+        else if (uniqueID != null) { // shortcut for uniqueID based IDs
+            return getIdFactory().createNodeId(uniqueID);
+        }
+        else {
+            return buildNodeId(this, getPathFactory(), getIdFactory(), wspId);
+        }
+    }
+
+    private static NodeId buildNodeId(NodeEntryImpl entry, PathFactory pathFactory, IdFactory idFactory,
+            boolean wspId) throws RepositoryException {
+
+        PathBuilder pathBuilder = new PathBuilder(pathFactory);
+        while (entry.getParent() != null && entry.getUniqueID() == null) {
+            pathBuilder.addFirst(entry.getName(wspId), entry.getIndex(wspId));
+            entry = (wspId && entry.revertInfo != null)
+                ? entry.revertInfo.oldParent
+                : entry.parent;
+        }
+
+        // We either walked up to an entry below root or up to an uniqueID. In the former
+        // case we construct an NodeId with an absolute path. In the latter case we construct
+        // a NodeId from an uuid and a relative path.
+        if (entry.getParent() == null) {
+            pathBuilder.addRoot();
+            return idFactory.createNodeId((String) null, pathBuilder.getPath());
+        }
+        else {
+            return idFactory.createNodeId(entry.getUniqueID(), pathBuilder.getPath());

INS31 INS31 INS31 MOV29 MOV83 MOV43 MOV42 MOV43 MOV43 INS8 MOV29 INS83 MOV43 INS42 MOV43 MOV43 INS8 INS83 MOV43 INS42 INS44 INS43 INS8 INS83 UPD83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS41 MOV41 INS39 INS42 INS42 MOV25 INS42 INS43 INS42 MOV43 INS42 MOV43 INS42 INS39 INS42 INS42 INS60 INS61 INS25 INS32 INS25 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS42 INS9 UPD42 INS9 MOV27 INS8 INS8 INS42 INS42 INS14 INS27 MOV27 INS21 INS21 INS32 INS33 INS21 INS41 INS41 INS41 MOV41 INS43 INS42 INS32 INS33 INS32 INS32 INS7 INS42 UPD42 MOV42 INS32 INS32 INS32 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS16 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS11 INS32 INS42 UPD42 MOV42 MOV32 MOV32 MOV32 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 INS52 MOV32 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV36 INS40 INS40 INS43 INS33 UPD42 MOV42 INS42 INS42 UPD42 INS42 UPD42 UPD42 INS27 INS42 INS42 INS27 INS40 MOV33 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL42 DEL59 DEL60 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL27 DEL9 DEL9 DEL27 DEL32 DEL41 DEL8 DEL42 DEL40 DEL32 DEL32 DEL16 DEL59 DEL60 DEL32 DEL32 DEL41 DEL8 DEL25