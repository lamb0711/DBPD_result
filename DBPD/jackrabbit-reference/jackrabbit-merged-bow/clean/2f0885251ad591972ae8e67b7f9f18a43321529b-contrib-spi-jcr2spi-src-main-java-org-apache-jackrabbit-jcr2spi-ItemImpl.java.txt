Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.state.NodeState;
+import org.apache.jackrabbit.jcr2spi.hierarchy.NodeEntry;
-     * @see javax.jcr.Item#getParent()
+     * @see Item#getParent()
-    public abstract Node getParent() throws ItemNotFoundException, AccessDeniedException, RepositoryException;
+    public Node getParent() throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+        checkStatus();
+
+        // special treatment for root node
+        if (state.isNode() && ((NodeState)state).isRoot()) {
+            String msg = "Root node doesn't have a parent.";
+            log.debug(msg);
+            throw new ItemNotFoundException(msg);
+        }
+
+        NodeEntry parentEntry = getItemState().getHierarchyEntry().getParent();
+        return (Node) itemMgr.getItem(parentEntry);
+    }
-        if (state.getParent() == null) {
+        if (state.isNode() && ((NodeState)state).isRoot()) {
-        return session.getHierarchyManager().getDepth(state);
+        return session.getHierarchyManager().getDepth(state.getHierarchyEntry());
-        if (Status.isTerminal(state.getStatus())) {
+        if (Status.isTerminal(state.getStatus()) || Status.EXISTING_REMOVED == state.getStatus()) {
-                state.reload(true);
+                state.getHierarchyEntry().reload(true, true);
-                state.invalidate(true);
+                state.getHierarchyEntry().invalidate(true);
-            state.reload(false);
+            state.getHierarchyEntry().reload(false, false);
+    /**
+     * Returns true if the repository supports level 2 (writing). Note, that
+     * this method does not perform any additional validation tests such as
+     * access restrictions, locking, checkin status or protection that affect
+     * the writing to nodes and properties.
+     *
+     * @throws UnsupportedRepositoryOperationException
+     * @throws RepositoryException if the sanity check on this item fails.
+     * See {@link ItemImpl#checkStatus()}. 
+     * @see ItemStateValidator
+     */
+    protected boolean isWritable() throws RepositoryException {
+        checkStatus();
+        return session.isSupportedOption(Repository.LEVEL_2_SUPPORTED);
+    }
+

INS26 INS26 INS40 INS40 INS31 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS21 INS25 INS60 INS41 INS65 INS65 INS65 INS65 INS42 INS21 INS41 INS32 INS27 INS8 INS43 INS59 INS11 UPD27 INS27 INS66 INS66 INS66 INS66 INS42 INS42 INS66 INS66 INS65 INS66 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS60 INS21 INS53 INS42 INS42 INS32 INS43 INS32 INS32 INS32 MOV32 INS27 INS68 INS42 INS42 INS42 INS40 INS42 INS42 INS36 INS42 INS43 INS59 INS32 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 UPD42 MOV42 INS42 INS40 INS32 INS42 INS42 INS11 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS11 INS42 INS42 INS32 INS9 INS43 INS42 INS42 INS42 INS43 INS42 MOV42 INS42 INS42 INS42 INS32 INS9 INS32 MOV42 INS42 MOV42 INS42 DEL40 DEL83 DEL42 DEL33