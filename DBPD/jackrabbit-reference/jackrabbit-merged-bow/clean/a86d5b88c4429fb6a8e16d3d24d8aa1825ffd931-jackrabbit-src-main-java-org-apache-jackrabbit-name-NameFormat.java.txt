- improve Path and QName classes
- improve PathElement handling 
- add convenience methods to NameFormat


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@424258 13f79535-47bb-0310-9956-ffa450edef68

+     * Parses an array of <code>jcrName</code> and returns the respective
+     * array of <code>QName</code>. If the passed <code>resolver</code> also an
+     * instance of {@link NameCache} then the parsing is first read from the cache.
+     *
+     * @param jcrNames the array of names to be parsed
+     * @param resolver <code>NamespaceResolver</code> use to retrieve the
+     * namespace URI from the prefix contained in the given JCR name.
+     * @return the new array of <code>QName</code>
+     * @throws IllegalNameException If <code>jcrName</code> is not a valid
+     * JCR-style name.
+     */
+    public static QName[] parse(String jcrNames[], NamespaceResolver resolver)
+            throws IllegalNameException, UnknownPrefixException {
+
+        QName[] ret = new QName[jcrNames.length];
+        if (resolver instanceof NameCache) {
+            for (int i=0; i<ret.length; i++) {
+                QName name = ((NameCache) resolver).retrieveName(jcrNames[i]);
+                if (name == null) {
+                    name = parseNoCache(jcrNames[i], resolver);
+                    ((NameCache) resolver).cacheName(jcrNames[i], name);
+                }
+                ret[i] = name;
+            }
+        } else {
+            for (int i=0; i<ret.length; i++) {
+                ret[i] = parseNoCache(jcrNames[i], resolver);
+            }
+        }
+        return ret;
+    }
+
+    /**
+     * Optimized convenience method that returns an array of string
+     * representations of the given qualified <code>name</code> in the JCR name
+     * format. If the passed <code>resolver</code> also an instance of
+     * {@link NameCache} then the formatting is first read from the cache.
+     *
+     * @param qNames the array of qualified name to resolve.
+     * @param resolver the namespace resolver.
+     * @return the array of jcr names
+     * @throws NoPrefixDeclaredException if a namespace can not be resolved
+     * @see #format(QName, NamespaceResolver, StringBuffer)
+     */
+    public static String[] format(QName[] qNames, NamespaceResolver resolver)
+            throws NoPrefixDeclaredException {
+        String[] ret = new String[qNames.length];
+        if (resolver instanceof NameCache) {
+            for (int i=0; i<ret.length; i++) {
+                String jcrName = ((NameCache) resolver).retrieveName(qNames[i]);
+                if (jcrName == null) {
+                    StringBuffer buf = new StringBuffer();
+                    formatNoCache(qNames[i], resolver, buf);
+                    jcrName = buf.toString();
+                    ((NameCache) resolver).cacheName(jcrName, qNames[i]);
+                }
+                ret[i] = jcrName;
+            }
+        } else {
+            for (int i=0; i<ret.length; i++) {
+                StringBuffer buf = new StringBuffer();
+                formatNoCache(qNames[i], resolver, buf);
+                ret[i] = buf.toString();
+            }
+        }
+        return ret;
+    }
+
+    /**

INS31 INS31 INS29 INS83 INS83 INS5 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS85 INS43 INS42 INS42 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS5 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS5 INS59 INS62 INS8 INS8 INS42 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS68 INS42 INS43 INS85 INS42 INS5 INS59 INS62 INS8 INS8 INS42 INS42 INS43 INS85 INS42 INS3 INS42 INS43 INS24 INS24 INS42 INS42 INS69 INS69 INS69 INS42 INS43 INS85 INS42 INS3 INS42 INS43 INS24 INS24 INS42 INS5 INS40 INS42 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS43 INS43 INS43 INS42 INS5 INS40 INS42 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS43 INS85 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS21 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS43 INS85 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS21 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS21 INS42 INS42 INS34 INS43 INS59 INS27 INS8 INS7 INS42 INS34 INS7 INS42 INS42 INS34 INS43 INS59 INS27 INS8 INS7 INS42 INS34 INS43 INS59 INS32 INS7 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS2 INS42 INS2 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS21 INS2 INS42 INS42 INS42 INS14 INS42 INS2 INS42 INS42 INS2 INS32 INS36 INS42 INS2 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS36 INS42 INS2 INS43 INS59 INS32 INS7 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS32 INS36 INS42 INS2 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS14 INS42 INS2 INS42 INS42 INS42 INS32 INS36 INS42 INS42 INS2 INS42 INS43 INS42 INS42 INS2 INS42 INS11 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42