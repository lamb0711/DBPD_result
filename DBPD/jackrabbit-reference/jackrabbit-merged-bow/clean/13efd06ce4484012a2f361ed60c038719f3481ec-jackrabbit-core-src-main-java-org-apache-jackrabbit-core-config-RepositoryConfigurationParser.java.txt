JCR-1605 RepositoryLock does not work on NFS sometimes (configurable repository lock)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@744956 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.RepositoryLock;
+import org.apache.jackrabbit.core.util.RepositoryLockMechanism;
+import org.apache.jackrabbit.core.util.RepositoryLockMechanismFactory;
+    /** Name of the repository lock mechanism configuration element. */
+    public static final String REPOSITORY_LOCK_MECHANISM_ELEMENT = 
+        "RepositoryLockMechanism";
+
+        
+        RepositoryLockMechanismFactory rlf = getRepositoryLockMechanismFactory(root);
-                maxIdleTime, template, vc, sc, cc, dsf, this);
+                maxIdleTime, template, vc, sc, cc, dsf, rlf, this);
-            if (provFact !=null ) {
+            if (provFact != null) {
-     * @param parent cluster element
-     * @return journal configuration, or <code>null</code>
+     * @param parent configuration element
+     * @param directory the repository directory
+     * @return data store factory
+     * Parses repository lock mechanism configuration. Repository lock mechanism
+     * configuration uses the following format:
+     * <pre>
+     *   &lt;RepositoryLockMechanism class=&quot;...&quot; &gt;
+     *     &lt;param name=&quot;...&quot; value=&quot;...&quot;&gt;
+     *     ...
+     *   &lt;/RepositoryLockMechanism&gt;
+     * </pre>
+     * <p/>
+     * <code>RepositoryLockMechanism</code> is a
+     * {@link #parseBeanConfig(Element,String) bean configuration} element.
+     * 
+     * @param root the root configuration element
+     * @return repository lock mechanism factory
+     * @throws ConfigurationException if the configuration is broken
+     */    
+    protected RepositoryLockMechanismFactory getRepositoryLockMechanismFactory(final Element root) {
+        return new RepositoryLockMechanismFactory() {
+            public RepositoryLockMechanism getRepositoryLockMechanism() throws RepositoryException {
+                RepositoryLockMechanism lock = null;
+                NodeList children = root.getChildNodes();
+                for (int i = 0; i < children.getLength(); i++) {
+                    Node child = children.item(i);
+                    if (child.getNodeType() == Node.ELEMENT_NODE
+                            && REPOSITORY_LOCK_MECHANISM_ELEMENT.equals(child.getNodeName())) {
+                        BeanConfig bc =
+                            parseBeanConfig(root, REPOSITORY_LOCK_MECHANISM_ELEMENT);
+                        lock = (RepositoryLockMechanism) bc.newInstance();
+                        break;
+                    }
+                }
+                if (lock == null) {
+                    lock = new RepositoryLock();
+                }
+                return lock;
+            }
+        };
+    }
+
+    /**

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS42 INS45 INS60 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS41 INS66 INS43 INS59 UPD66 INS42 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS14 INS42 INS42 INS32 INS42 INS68 INS66 INS43 INS1 INS42 INS42 INS42 INS69 INS69 INS42 INS31 INS43 INS43 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS60 INS60 INS24 INS25 INS41 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS42 INS33 INS21 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS27 INS8 INS7 INS42 INS42 INS32 INS27 INS32 INS60 INS21 INS10 INS42 INS14 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS43 INS59 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS11 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42