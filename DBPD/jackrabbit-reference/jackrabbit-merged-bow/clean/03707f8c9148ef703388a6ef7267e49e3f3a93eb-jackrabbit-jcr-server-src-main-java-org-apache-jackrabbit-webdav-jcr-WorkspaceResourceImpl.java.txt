JCR-2454 : spi2dav: JSR 283 NodeType Management

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1092393 13f79535-47bb-0310-9956-ffa450edef68

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.jackrabbit.webdav.version.WorkspaceResource;
-import org.apache.jackrabbit.webdav.version.DeltaVResource;
-import org.apache.jackrabbit.webdav.version.UpdateInfo;
-import org.apache.jackrabbit.webdav.version.VersionControlledResource;
-import org.apache.jackrabbit.webdav.version.MergeInfo;
-import org.apache.jackrabbit.webdav.version.LabelInfo;
-import org.apache.jackrabbit.webdav.version.VersionHistoryResource;
-import org.apache.jackrabbit.webdav.DavResource;
+import org.apache.jackrabbit.commons.cnd.CompactNodeTypeDefReader;
+import org.apache.jackrabbit.commons.cnd.DefinitionBuilderFactory;
+import org.apache.jackrabbit.commons.cnd.ParseException;
+import org.apache.jackrabbit.commons.cnd.TemplateBuilderFactory;
-import org.apache.jackrabbit.webdav.DavResourceIterator;
-import org.apache.jackrabbit.webdav.DavResourceLocator;
-import org.apache.jackrabbit.webdav.MultiStatusResponse;
-import org.apache.jackrabbit.webdav.DavServletResponse;
-import org.apache.jackrabbit.webdav.DavResourceIteratorImpl;
-import org.apache.jackrabbit.webdav.DavResourceFactory;
-import org.apache.jackrabbit.webdav.MultiStatus;
-import org.apache.jackrabbit.webdav.xml.DomUtil;
-import org.apache.jackrabbit.webdav.search.SearchResource;
+import org.apache.jackrabbit.webdav.DavResource;
+import org.apache.jackrabbit.webdav.DavResourceFactory;
+import org.apache.jackrabbit.webdav.DavResourceIterator;
+import org.apache.jackrabbit.webdav.DavResourceIteratorImpl;
+import org.apache.jackrabbit.webdav.DavResourceLocator;
+import org.apache.jackrabbit.webdav.DavServletResponse;
+import org.apache.jackrabbit.webdav.MultiStatus;
+import org.apache.jackrabbit.webdav.MultiStatusResponse;
+import org.apache.jackrabbit.webdav.io.InputContext;
+import org.apache.jackrabbit.webdav.io.OutputContext;
-import org.apache.jackrabbit.webdav.io.InputContext;
-import org.apache.jackrabbit.webdav.io.OutputContext;
+import org.apache.jackrabbit.webdav.search.SearchResource;
+import org.apache.jackrabbit.webdav.version.DeltaVResource;
+import org.apache.jackrabbit.webdav.version.LabelInfo;
+import org.apache.jackrabbit.webdav.version.MergeInfo;
+import org.apache.jackrabbit.webdav.version.UpdateInfo;
+import org.apache.jackrabbit.webdav.version.VersionControlledResource;
+import org.apache.jackrabbit.webdav.version.VersionHistoryResource;
+import org.apache.jackrabbit.webdav.version.WorkspaceResource;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-import javax.jcr.NamespaceRegistry;
-import javax.jcr.RepositoryException;
-import javax.jcr.Workspace;
-import javax.jcr.Session;
+import javax.jcr.NamespaceRegistry;
-import javax.jcr.version.Version;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+import javax.jcr.Workspace;
+import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.nodetype.NodeTypeTemplate;
-import java.util.List;
-import java.util.Date;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.Collections;
+import javax.jcr.version.Version;
-import java.io.PrintWriter;
+import java.io.PrintWriter;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
-     * Allows to alter the registered namespaces ({@link ItemResourceConstants#JCR_NAMESPACES}) and
-     * forwards any other property to the super class.<p/>
+     * Allows to alter the registered namespaces ({@link ItemResourceConstants#JCR_NAMESPACES})
+     * or register node types ({@link ItemResourceConstants#JCR_NODETYPES_CND)
+     * where the passed value is a cnd string containing the definition
+     * and forwards any other property to the super class.<p/>
+        } else if (ItemResourceConstants.JCR_NODETYPES_CND.equals(property.getName())) {
+            try {
+                Object value = property.getValue();
+                List<?> cmds;
+                if (value instanceof List) {
+                    cmds = (List) value;
+                } else  if (value instanceof Element) {
+                    cmds = Collections.singletonList(value);
+                } else {
+                    log.warn("Unexpected structure of dcr:nodetypes-cnd property.");
+                    throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR);
+                }
+
+                String registerCnd = null;
+                boolean allowUpdate = false;
+                List<String> unregisterNames = new ArrayList<String>();
+
+                for (Object listEntry : cmds) {
+                    if (listEntry instanceof Element) {
+                        Element e = (Element) listEntry;
+                        String localName = e.getLocalName();
+                        if (ItemResourceConstants.XML_CND.equals(localName)) {
+                            registerCnd = DomUtil.getText(e);
+                        } else if (ItemResourceConstants.XML_ALLOWUPDATE.equals(localName)) {
+                            String allow = DomUtil.getTextTrim(e);
+                            allowUpdate = Boolean.parseBoolean(allow);
+                        } else if (ItemResourceConstants.XML_NODETYPENAME.equals(localName)) {
+                            unregisterNames.add(DomUtil.getTextTrim(e));
+                        }
+                    }
+                }
+
+                // TODO: for simplicity it's currently it's either registration or unregistration as nt-modifications are immediately persisted.
+                Session s = getRepositorySession();
+                NodeTypeManager ntMgr = s.getWorkspace().getNodeTypeManager();
+                if (registerCnd != null) {
+                    StringReader reader = new StringReader(registerCnd);
+                    DefinitionBuilderFactory<NodeTypeTemplate, NamespaceRegistry> factory =
+                            new TemplateBuilderFactory(ntMgr, s.getValueFactory(), s.getWorkspace().getNamespaceRegistry());
+
+                    CompactNodeTypeDefReader<NodeTypeTemplate, NamespaceRegistry> cndReader =
+                            new CompactNodeTypeDefReader<NodeTypeTemplate, NamespaceRegistry>(reader, "davex", factory);
+
+                    List<NodeTypeTemplate> ntts = cndReader.getNodeTypeDefinitions();
+                    ntMgr.registerNodeTypes(ntts.toArray(new NodeTypeTemplate[ntts.size()]), allowUpdate);
+                } else if (!unregisterNames.isEmpty()) {
+                    ntMgr.unregisterNodeTypes(unregisterNames.toArray(new String[unregisterNames.size()]));
+                }
+                
+            } catch (ParseException e) {
+                throw new DavException(DavServletResponse.SC_BAD_REQUEST, e);
+            }
+            catch (RepositoryException e) {
+                throw new JcrDavException(e);
+            }
-            // only jcr:namespace can be modified
+            // only jcr:namespace or node types can be modified
-                && ItemResourceConstants.JCR_NAMESPACES.equals(((DavProperty<?>)propEntry).getName())) {
+                    && (ItemResourceConstants.JCR_NAMESPACES.equals(((DavProperty<?>)propEntry).getName())
+                    || ItemResourceConstants.JCR_NODETYPES_CND.equals(((DavProperty<?>)propEntry).getName()))) {
+        // TODO: create node type cnd property only if explicitly requested (see JCR-2946 and patch at JCR-2454) 

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS8 INS25 UPD66 INS66 INS65 MOV32 MOV8 INS25 INS66 INS66 UPD66 MOV66 MOV66 MOV66 INS32 INS8 MOV8 INS40 INS42 INS32 INS54 INS42 INS42 INS8 INS12 INS12 INS36 INS60 INS60 INS25 INS60 INS60 INS60 INS70 INS60 INS60 INS25 INS44 INS8 INS44 INS8 INS27 INS43 INS59 INS74 INS59 INS62 INS8 INS25 INS43 INS59 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS43 INS42 INS53 INS43 INS42 INS53 MOV32 INS32 INS42 INS42 INS32 INS43 INS76 INS42 INS42 INS43 INS21 INS62 INS8 INS8 INS42 INS42 INS33 INS42 INS9 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS60 INS60 INS21 INS38 INS8 INS42 INS14 INS42 INS14 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS42 INS43 INS21 INS21 INS53 INS42 INS42 INS74 INS42 INS62 INS8 INS42 INS32 INS42 INS43 INS59 INS74 INS59 INS74 INS59 INS74 INS59 INS32 INS32 INS21 INS43 INS40 INS42 INS43 INS42 INS36 INS42 INS42 INS11 INS42 INS7 INS32 INS14 INS43 INS43 INS42 INS43 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS43 INS42 INS42 INS32 INS42 INS42 INS45 INS43 INS40 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS74 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS32 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS40 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS5 INS32 INS42 INS42 INS3 INS43 INS76 INS43 INS42 INS42 INS42 INS7 INS40 INS42 INS42 INS60 INS21 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS5 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS7 INS40 INS42 INS42 INS21 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL25 DEL8