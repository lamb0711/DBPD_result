JCR-1705: Reduce memory usage of transient nodes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@691603 13f79535-47bb-0310-9956-ffa450edef68

-    private Set mixinTypeNames = Collections.EMPTY_SET;
+    private NameSet mixinTypeNames = new NameSet();
-     * Set to <code>true</code> if {@link #childNodeEntries} are shared between
-     * different <code>NodeState</code> instance.
-     */
-    private boolean sharedChildNodeEntries = false;
-
-    /**
-    private HashSet propertyNames = new HashSet();
-
-    /**
-     * Set to <code>true</code> if {@link #propertyNames} is shared between
-     * different <code>NodeState</code> instances.
-     */
-    private boolean sharedPropertyNames = false;
+    private NameSet propertyNames = new NameSet();
-            mixinTypeNames = nodeState.mixinTypeNames;
+            mixinTypeNames = (NameSet) nodeState.mixinTypeNames.clone();
-            propertyNames = nodeState.propertyNames;
-            sharedPropertyNames = true;
-            nodeState.sharedPropertyNames = true;
-            childNodeEntries = nodeState.childNodeEntries;
-            sharedChildNodeEntries = true;
-            nodeState.sharedChildNodeEntries = true;
+            propertyNames = (NameSet) nodeState.propertyNames.clone();
+            childNodeEntries = (ChildNodeEntries) nodeState.childNodeEntries.clone();
-        return Collections.unmodifiableSet(mixinTypeNames);
+        return mixinTypeNames;
-        if (names instanceof HashSet) {
-            mixinTypeNames = (Set) ((HashSet) names).clone();
-        } else {
-            mixinTypeNames = new HashSet(names);
-        }
+        mixinTypeNames.replaceAll(names);
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-            sharedChildNodeEntries = false;
-            if (sharedChildNodeEntries) {
-                childNodeEntries = new ChildNodeEntries();
-                sharedChildNodeEntries = false;
-            } else {
-                childNodeEntries.removeAll();
-            }
+            childNodeEntries.removeAll();
-        return Collections.unmodifiableSet(propertyNames);
+        return propertyNames;
-        if (sharedPropertyNames) {
-            propertyNames = (HashSet) propertyNames.clone();
-            sharedPropertyNames = false;
-        }
-        if (sharedPropertyNames) {
-            propertyNames = (HashSet) propertyNames.clone();
-            sharedPropertyNames = false;
-        }
-        if (sharedPropertyNames) {
-            propertyNames = new HashSet();
-            sharedPropertyNames = false;
-        } else {
-            propertyNames.clear();
-        }
+        propertyNames.removeAll();
-        if (propNames instanceof HashSet) {
-            HashSet names = (HashSet) propNames;
-            propertyNames = (HashSet) names.clone();
-            sharedPropertyNames = false;
-        } else {
-            if (sharedPropertyNames) {
-                propertyNames = new HashSet();
-                sharedPropertyNames = false;
-            } else {
-                propertyNames.clear();
-            }
-            propertyNames.addAll(propNames);
-        }
+        propertyNames.replaceAll(propNames);
-            return Collections.unmodifiableSet(propertyNames);
+            return propertyNames;

UPD43 UPD43 INS8 INS8 INS8 INS8 INS8 UPD42 INS14 UPD42 MOV21 MOV21 MOV41 MOV21 MOV21 INS43 UPD43 INS42 INS32 MOV8 INS42 INS42 UPD42 INS42 INS42 INS42 MOV21 UPD42 UPD42 INS42 INS11 INS11 INS11 INS43 INS32 INS43 INS32 MOV43 INS32 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 DEL40 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL40 DEL40 DEL42 DEL9 DEL7 DEL21 DEL40 DEL9 DEL7 DEL21 DEL40 DEL42 DEL9 DEL7 DEL21 DEL40 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL11 DEL7 DEL42 DEL42 DEL43 DEL62 DEL8 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL8 DEL25 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32