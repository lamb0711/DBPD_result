JCR-890: concurrent read-only access to a session

Clean up PropertyImpl.setValue methods

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@957530 13f79535-47bb-0310-9956-ffa450edef68

+import static javax.jcr.PropertyType.BINARY;
+import static javax.jcr.PropertyType.NAME;
+import static javax.jcr.PropertyType.PATH;
+import static javax.jcr.PropertyType.REFERENCE;
+import static javax.jcr.PropertyType.STRING;
+import static javax.jcr.PropertyType.UNDEFINED;
+import static javax.jcr.PropertyType.WEAKREFERENCE;
+
+import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.ValueFactory;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-            case PropertyType.NAME:
-            case PropertyType.PATH:
+            case NAME:
+            case PATH:
-                if (old != null && old.getType() == PropertyType.BINARY) {
+                if (old != null && old.getType() == BINARY) {
-        if (type == PropertyType.UNDEFINED) {
+        if (type == UNDEFINED) {
-            type = PropertyType.STRING;
+            type = STRING;
-        if (reqType == PropertyType.UNDEFINED) {
-            reqType = PropertyType.NAME;
+        if (reqType == UNDEFINED) {
+            reqType = NAME;
-        if (reqType != PropertyType.NAME) {
+        if (reqType != NAME) {
-        if (reqType == PropertyType.UNDEFINED) {
-            reqType = PropertyType.NAME;
+        if (reqType == UNDEFINED) {
+            reqType = NAME;
-                    if (reqType != PropertyType.NAME) {
+                    if (reqType != NAME) {
+    /** Wrapper around {@link #getValue()} */
+    /** Wrapper around {@link #getValue()} */
-        final Binary bin = getValue().getBinary();
+        final Binary binary = getValue().getBinary();
-        return new AutoCloseInputStream(bin.getStream()) {
+        return new AutoCloseInputStream(binary.getStream()) {
-                bin.dispose();
+                binary.dispose();
+    /** Wrapper around {@link #getValue()} */
+    /** Wrapper around {@link #getValue()} */
+    /** Wrapper around {@link #getValue()} */
+    /** Wrapper around {@link #getValue()} */
-            case PropertyType.REFERENCE:
-            case PropertyType.WEAKREFERENCE:
+            case REFERENCE:
+            case WEAKREFERENCE:
-            case PropertyType.PATH:
-            case PropertyType.NAME:
+            case PATH:
+            case NAME:
-            case PropertyType.STRING:
+            case STRING:
-                    Value refValue = ValueHelper.convert(value, PropertyType.REFERENCE, session.getValueFactory());
+                    Value refValue = ValueHelper.convert(value, REFERENCE, session.getValueFactory());
-                    Value pathValue = ValueHelper.convert(value, PropertyType.PATH, session.getValueFactory());
+                    Value pathValue = ValueHelper.convert(value, PATH, session.getValueFactory());
-        Value pathValue = ValueHelper.convert(value, PropertyType.PATH, session.getValueFactory());
+        Value pathValue = ValueHelper.convert(value, PATH, session.getValueFactory());
+    /** Wrapper around {@link #getValue()} */
+    /** Wrapper around {@link #setValue(Value)} */
-        setValue(session.getValueFactory().createValue(value));
+        if (value != null) {
+            setValue(getValueFactory().createValue(value));
+        } else {
+            setValue((Value) null);
+        }
+    /** Wrapper around {@link #getValue()} */
+    /** Wrapper around {@link #setValue(Value)} */
-        setValue(session.getValueFactory().createValue(value));
+        if (value != null) {
+            setValue(getValueFactory().createValue(value));
+        } else {
+            setValue((Value) null);
+        }
+    /** Wrapper around {@link #setValue(Value)} */
-                throw new ValueFormatException(e.getMessage());
+                throw new ValueFormatException(
+                        "Value is not an ISO8601 date: " + value, e);
-            remove();
+            setValue((Value) null);
+    /** Wrapper around {@link #setValue(Value)} */
-        setValue(session.getValueFactory().createValue(value));
+        setValue(getValueFactory().createValue(value));
+    /** Wrapper around {@link #setValue(Value)} */
-            setValue(session.getValueFactory().createValue(value));
+            Binary binary = getValueFactory().createBinary(value);
+            try {
+                setValue(getValueFactory().createValue(binary));
+            } finally {
+                binary.dispose();
+            }
-            remove();
+            setValue((Value) null);
+    /** Wrapper around {@link #setValue(Value)} */
-            setValue(session.getValueFactory().createValue(value));
+            setValue(getValueFactory().createValue(value));
-            remove();
+            setValue((Value) null);
+    /** Wrapper around {@link #setValue(Value[])} */
-            ValueFactory factory = session.getValueFactory();
-            Value[] values = new Value[strings.length];
-            for (int i = 0; i < strings.length; i++) {
-                if (strings[i] != null) {
-                    values[i] = factory.createValue(strings[i]);
-                }
-            }
-            setValue(values);
+            setValue(getValues(strings, STRING));
-            remove();
+            setValue((Value[]) null);
+    /** Wrapper around {@link #setValue(Value)} */
-        setValue(session.getValueFactory().createValue(value));
+        setValue(getValueFactory().createValue(value));
-    public void setValue(Node target)
-            throws ValueFormatException, RepositoryException {
-        if (target == null) {
-            remove();
-        } else if (((NodeImpl) target).isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-            setValue(session.getValueFactory().createValue(
-                    target.getUUID(), PropertyType.REFERENCE));
+    /** Wrapper around {@link #setValue(Value)} */
+    public void setValue(Node value) throws RepositoryException {
+        if (value != null) {
+            try {
+                setValue(getValueFactory().createValue(value));
+            } catch (UnsupportedRepositoryOperationException e) {
+                throw new ValueFormatException(
+                        "Node is not referenceable: " + value, e);
+            }
-            throw new ValueFormatException(
-                    "target node must be of node type mix:referenceable");
+            setValue((Value) null);
+    /** Wrapper around {@link #setValue(Value)} */
-        setValue(session.getValueFactory().createValue(value));
+        setValue(getValueFactory().createValue(value));
-        if (reqType == PropertyType.UNDEFINED) {
+        if (reqType == UNDEFINED) {
-                reqType = PropertyType.STRING;
+                reqType = STRING;
-    public void setValue(Value[] values)
-            throws ValueFormatException, VersionException,
-            LockException, ConstraintViolationException,
-            RepositoryException {
-        setValue(values, PropertyType.UNDEFINED);
+    public void setValue(Value[] values) throws RepositoryException {
+        setValue(values, UNDEFINED);
-            int firstValueType = PropertyType.UNDEFINED;
+            int firstValueType = UNDEFINED;
-                    if (firstValueType == PropertyType.UNDEFINED) {
+                    if (firstValueType == UNDEFINED) {
-        if (reqType == PropertyType.UNDEFINED) {
+        if (reqType == UNDEFINED) {
-                    if (reqType == PropertyType.UNDEFINED) {
+                    if (reqType == UNDEFINED) {

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS8 INS29 INS29 INS8 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS25 INS65 INS65 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 MOV43 INS66 INS65 INS66 INS66 INS65 INS66 MOV27 INS8 INS8 INS66 INS65 INS66 INS66 INS65 INS66 MOV27 INS8 INS8 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS27 INS8 INS66 INS65 INS66 MOV27 INS66 INS65 INS66 MOV8 INS66 INS65 INS66 INS66 INS65 INS66 UPD27 INS8 INS8 INS66 INS65 INS66 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS68 INS68 UPD42 INS68 INS68 INS68 INS68 INS42 INS42 INS42 INS42 INS42 INS68 INS68 MOV21 INS21 INS68 INS68 MOV21 INS21 INS68 INS68 INS68 INS42 INS33 INS60 INS54 INS68 INS68 INS68 INS68 UPD42 INS54 INS21 INS68 INS42 INS25 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV32 INS42 INS42 INS69 INS32 INS42 INS42 INS69 INS32 INS42 INS69 INS42 INS69 INS42 INS69 INS43 INS59 INS8 INS8 INS42 INS69 INS42 INS69 INS32 INS42 INS69 INS42 INS69 INS8 INS12 INS32 INS42 INS69 INS27 MOV8 INS8 INS42 INS42 INS42 MOV43 INS43 INS42 INS11 INS43 INS42 INS11 INS43 INS42 INS11 INS43 INS43 INS42 INS42 INS32 MOV21 INS21 INS42 INS11 INS43 INS42 INS11 MOV5 INS42 INS32 UPD42 INS11 INS43 INS43 MOV21 INS44 INS8 INS42 INS11 INS43 INS42 INS33 MOV21 INS21 INS42 MOV43 INS42 INS43 INS33 INS42 INS43 INS33 INS42 INS43 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS33 INS42 INS43 INS33 UPD42 MOV42 INS42 INS42 MOV5 INS33 INS42 INS42 INS43 INS42 MOV53 INS43 INS33 INS42 INS7 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV25 INS42 UPD42 INS42 MOV32 MOV43 INS27 INS42 UPD42 UPD42 MOV42 MOV43 INS27 INS42 INS27 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL8 DEL42 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL25 DEL8 DEL24 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL40 DEL45 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL40 DEL32 DEL8 DEL8 DEL25 DEL42 DEL40 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL40 DEL40 DEL40 DEL40 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL40 DEL27 DEL25