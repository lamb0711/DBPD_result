jcr-97: Improve Checkstyle conformance

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@312896 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.Repository;
-import javax.jcr.Session;
+import javax.jcr.RepositoryException;
+import org.apache.jackrabbit.command.CommandException;
-public class JcrClient
-{
-	/** logger */
-	private static Log log = LogFactory.getLog(JcrClient.class);
+public class JcrClient {
+    /** logger */
+    private static Log log = LogFactory.getLog(JcrClient.class);
-	/** Resource bundle */
-	private ResourceBundle bundle = CommandHelper.getBundle();
+    /** Resource bundle */
+    private ResourceBundle bundle = CommandHelper.getBundle();
-	/** exit control variable */
-	private boolean exit = false;
+    /** exit control variable */
+    private boolean exit = false;
-	/** Execution context */
-	private Context ctx;
+    /** Execution context */
+    private Context ctx;
-	/** run options */
-	private Options options;
+    /** run options */
+    private Options options;
-	/**
-	 * Constructor
-	 */
-	JcrClient()
-	{
-		super();
-		ctx = new ContextBase();
-		initOptions();
-		initContext();
-	}
+    /**
+     * Constructor
+     */
+    JcrClient() {
+        super();
+        ctx = new ContextBase();
+        initOptions();
+        initContext();
+    }
-	/**
-	 * Constructor
-	 */
-	JcrClient(Context ctx)
-	{
-		super();
-		this.ctx = ctx;
-	}
+    /**
+     * Constructor
+     * @param ctx
+     *        the <code>Context</code>
+     */
+    JcrClient(Context ctx) {
+        super();
+        this.ctx = ctx;
+    }
-	/**
-	 * @param args
-	 */
-	public static void main(String[] args)
-	{
-		JcrClient client = new JcrClient();
-		client.run(args);
-	}
+    /**
+     * @param args
+     *        the arguments
+     */
+    public static void main(String[] args) {
+        JcrClient client = new JcrClient();
+        client.run(args);
+    }
-	/**
-	 * Run client
-	 * 
-	 * @param args
-	 */
-	private void run(String[] args)
-	{
-		try
-		{
-			// parse arguments
-			Parser parser = new BasicParser();
-			CommandLine cl = parser.parse(options, args);
+    /**
+     * Run client
+     * @param args
+     *        the arguments
+     */
+    private void run(String[] args) {
+        try {
+            // parse arguments
+            Parser parser = new BasicParser();
+            CommandLine cl = parser.parse(options, args);
-			// Set locale
-			this.setLocale(cl);
+            // Set locale
+            this.setLocale(cl);
-			// Welcome message
-			System.out.println(bundle.getString("word.welcome"));
+            // Welcome message
+            System.out.println(bundle.getString("word.welcome"));
-			// check interactive mode
-			if (cl.hasOption("source"))
-			{
-				this.runNonInteractive(cl);
-			} else
-			{
-				this.runInteractive(cl);
-			}
-		} catch (Exception e)
-		{
-			HelpFormatter hf = new HelpFormatter();
-			hf.printHelp("jcrclient", options);
-			e.printStackTrace();
-			return;
-		}
-	}
+            // check interactive mode
+            if (cl.hasOption("source")) {
+                this.runNonInteractive(cl);
+            } else {
+                this.runInteractive(cl);
+            }
+        } catch (Exception e) {
+            HelpFormatter hf = new HelpFormatter();
+            hf.printHelp("jcrclient", options);
+            e.printStackTrace();
+            return;
+        }
+    }
-	/**
-	 * Run in interactive mode
-	 * 
-	 * @param command
-	 *            line
-	 * @throws Exception
-	 */
-	private void runInteractive(CommandLine cl) throws Exception
-	{
-		// Prompt command
-		while (!exit)
-		{
-			try
-			{
-				System.out.print(this.getPrompt() + ">");
-				// Read input
-				BufferedReader br = new BufferedReader(new InputStreamReader(
-						System.in));
-				String input = br.readLine();
-				log.debug("running: " + input);
-				if (input.trim().equals("exit") || input.trim().equals("quit"))
-				{ // exit?
-					exit = true;
-					System.out.println("Good bye..");
-				} else if (input.trim().length() == 0)
-				{
-					// Do nothing
-				} else
-				{
-					this.runCommand(input);
-				}
-			} catch (JcrParserException e)
-			{
-				System.out.println(e.getLocalizedMessage());
-				System.out.println();
-			} catch (Exception e)
-			{
-				handleException(e);
-			}
-		}
-	}
+    /**
+     * Run in interactive mode
+     * @param cl
+     *        the <code>CommandLine</code>
+     * @throws Exception
+     *         if an Exception occurs
+     */
+    private void runInteractive(CommandLine cl) throws Exception {
+        // Prompt command
+        while (!exit) {
+            try {
+                System.out.print(this.getPrompt() + ">");
+                // Read input
+                BufferedReader br = new BufferedReader(new InputStreamReader(
+                    System.in));
+                String input = br.readLine();
+                log.debug("running: " + input);
+                if (input.trim().equals("exit") || input.trim().equals("quit")) { // exit?
+                    exit = true;
+                    System.out.println("Good bye..");
+                } else if (input.trim().length() == 0) {
+                    // Do nothing
+                } else {
+                    this.runCommand(input);
+                }
+            } catch (JcrParserException e) {
+                System.out.println(e.getLocalizedMessage());
+                System.out.println();
+            } catch (Exception e) {
+                handleException(e);
+            }
+        }
+    }
-	/**
-	 * Run in non interactive mode
-	 * 
-	 * @param command
-	 *            line
-	 * @throws Exception
-	 */
-	private void runNonInteractive(CommandLine cl) throws Exception
-	{
-		this.runCommand("source " + cl.getOptionValue("source"));
-	}
+    /**
+     * Run in non interactive mode
+     * @param cl
+     *        the <code>CommandLine</code>
+     * @throws Exception
+     *         if an <code>Exception</code> occurs while running the
+     *         <code>Command</code>
+     */
+    private void runNonInteractive(CommandLine cl) throws Exception {
+        this.runCommand("source " + cl.getOptionValue("source"));
+    }
-	/**
-	 * Parses the input and runs the specified command
-	 * 
-	 * @param input
-	 * @throws Exception
-	 */
-	void runCommand(String input) throws Exception
-	{
-		if (input.startsWith("#") || input.length() == 0)
-		{
-			return;
-		}
+    /**
+     * Parses the input and runs the specified command
+     * @param input
+     *        the user's input
+     * @throws Exception
+     *         if an <code>Exception</code> occurs while running the
+     *         <code>Command</code>
+     */
+    void runCommand(String input) throws Exception {
+        if (input.startsWith("#") || input.length() == 0) {
+            return;
+        }
-		// Process user input
-		JcrParser parser = new JcrParser();
-		parser.parse(input);
+        // Process user input
+        JcrParser parser = new JcrParser();
+        parser.parse(input);
-		// populate ctx
-		parser.populateContext(ctx);
+        // populate ctx
+        parser.populateContext(ctx);
-		// Execute command
-		long start = System.currentTimeMillis();
-		parser.getCommand().execute(ctx);
-		long elapsed = System.currentTimeMillis() - start;
+        // Execute command
+        long start = System.currentTimeMillis();
+        parser.getCommand().execute(ctx);
+        long elapsed = System.currentTimeMillis() - start;
-		// depopulate ctx
-		parser.depopulateContext(ctx);
+        // depopulate ctx
+        parser.depopulateContext(ctx);
-		// Display elapsed timed
-		System.out.println();
-		System.out.println(bundle.getString("phrase.elapsedtime") + ": "
-				+ elapsed + " ms.");
-		System.out.println();
-	}
+        // Display elapsed timed
+        System.out.println();
+        System.out.println(bundle.getString("phrase.elapsedtime") + ": "
+                + elapsed + " ms.");
+        System.out.println();
+    }
-	/**
-	 * Handle the Exception. <br>
-	 * Shows a short message and prompt the user to show the entire stacktrace.
-	 * 
-	 * @param e
-	 */
-	private void handleException(Exception ex)
-	{
-		System.out.println();
-		System.out.println(bundle.getString("exception.occurred"));
-		System.out.println();
-		System.out.println(bundle.getString("exception") + ": "
-				+ ex.getClass().getName());
-		System.out.println(bundle.getString("word.message") + ": "
-				+ ex.getLocalizedMessage());
-		System.out.println();
-		String prompt = bundle.getString("phrase.display.stacktrace")
-				+ "? [y/n]";
-		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
-		String str = "";
-		int tries = 0;
-		while (!str.equals("y") && !str.equals("n") && tries < 3)
-		{
-			tries++;
-			System.out.print(prompt);
-			try
-			{
-				str = in.readLine();
-			} catch (IOException e)
-			{
-				e.printStackTrace();
-			}
-		}
-		if (str.equals("y"))
-		{
-			ex.printStackTrace();
-		}
-	}
+    /**
+     * Handle the Exception. <br>
+     * Shows a short message and prompt the user to show the entire stacktrace.
+     * @param ex
+     *        the <code>Exception</code> to handle
+     */
+    private void handleException(Exception ex) {
+        System.out.println();
+        System.out.println(bundle.getString("exception.occurred"));
+        System.out.println();
+        System.out.println(bundle.getString("exception") + ": "
+                + ex.getClass().getName());
+        System.out.println(bundle.getString("word.message") + ": "
+                + ex.getLocalizedMessage());
+        System.out.println();
+        String prompt = bundle.getString("phrase.display.stacktrace")
+                + "? [y/n]";
+        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
+        String str = "";
+        int tries = 0;
+        while (!str.equals("y") && !str.equals("n") && tries < 3) {
+            tries++;
+            System.out.print(prompt);
+            try {
+                str = in.readLine();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        if (str.equals("y")) {
+            ex.printStackTrace();
+        }
+    }
-	/**
-	 * Prompt message
-	 * 
-	 * @return prompt
-	 * @throws Exception
-	 */
-	private String getPrompt() throws Exception
-	{
+    /**
+     * Prompt message
+     * @return prompt the prompt message
+     * @throws RepositoryException
+     *         if the current <code>Repository</code> throws a
+     *         <code>RepositoryException</code>
+     */
+    private String getPrompt() throws RepositoryException {
-		Repository r = CommandHelper.getRepository(ctx);
-		if (r == null)
-		{
-			return bundle.getString("phrase.not.connected");
-		}
+        try {
+            CommandHelper.getRepository(ctx);
+        } catch (CommandException e) {
+            return bundle.getString("phrase.not.connected");
+        }
-		Session s = CommandHelper.getSession(ctx);
-		if (s == null)
-		{
-			return bundle.getString("phrase.not.logged.in");
-		}
+        try {
+            CommandHelper.getSession(ctx);
+        } catch (CommandException e) {
+            return bundle.getString("phrase.not.logged.in");
+        }
-		Node n = CommandHelper.getCurrentNode(ctx);
+        try {
+            Node n = CommandHelper.getCurrentNode(ctx);
+            return n.getPath();
+        } catch (CommandException e) {
+            return bundle.getString("phrase.not.logged.in");
+        }
-		return n.getPath();
-	}
+    }
-	/**
-	 * Init allowed CommandLine options
-	 */
-	private void initOptions()
-	{
-		options = new Options();
-		options.addOption("lang", "code", true, "Language code");
-		options.addOption("country", "code", true, "Country code");
-		options.addOption("source", "path", true,
-				"Script for noninteractive mode");
-	}
+    /**
+     * Init allowed CommandLine options
+     */
+    private void initOptions() {
+        options = new Options();
+        options.addOption("lang", "code", true, "Language code");
+        options.addOption("country", "code", true, "Country code");
+        options.addOption("source", "path", true,
+            "Script for noninteractive mode");
+    }
-	/**
-	 * Sets the default Locale for the given CommandLine
-	 * 
-	 * @param cl
-	 * @throws ParseException
-	 */
-	private void setLocale(CommandLine cl) throws ParseException
-	{
-		Locale locale = null;
-		if (cl.hasOption("lang") && cl.hasOption("country"))
-		{
-			locale = new Locale(cl.getOptionValue("lang"), cl
-					.getOptionValue("country"));
-		}
-		if (cl.hasOption("lang") && !cl.hasOption("country"))
-		{
-			locale = new Locale(cl.getOptionValue("lang"));
-		}
-		if (locale != null)
-		{
-			Locale.setDefault(locale);
-		}
-	}
+    /**
+     * Sets the default Locale for the given CommandLine
+     * @param cl
+     *        the CLI <code>CommandLine</code>
+     * @throws ParseException
+     *         if cl can't be parsed
+     */
+    private void setLocale(CommandLine cl) throws ParseException {
+        Locale locale = null;
+        if (cl.hasOption("lang") && cl.hasOption("country")) {
+            locale = new Locale(cl.getOptionValue("lang"), cl
+                .getOptionValue("country"));
+        }
+        if (cl.hasOption("lang") && !cl.hasOption("country")) {
+            locale = new Locale(cl.getOptionValue("lang"));
+        }
+        if (locale != null) {
+            Locale.setDefault(locale);
+        }
+    }
-	/**
-	 * Init context. <br>
-	 * Sets the Context Output to the console
-	 */
-	private void initContext()
-	{
-		CommandHelper.setOutput(ctx, new PrintWriter(System.out, true));
-	}
+    /**
+     * Init context. <br>
+     * Sets the Context Output to the console
+     */
+    private void initContext() {
+        CommandHelper.setOutput(ctx, new PrintWriter(System.out, true));
+    }

MOV26 UPD40 UPD40 UPD43 INS65 UPD42 INS54 INS54 INS54 INS42 INS66 INS66 INS66 UPD42 UPD66 INS66 UPD42 UPD66 INS66 INS66 INS66 INS66 INS66 UPD42 INS66 UPD66 UPD42 INS66 INS66 INS8 INS12 INS8 INS12 INS8 INS12 INS66 INS66 INS21 INS44 MOV8 INS21 INS44 MOV8 MOV60 MOV41 INS44 INS8 MOV32 INS43 INS42 MOV32 INS43 INS42 INS43 INS42 INS41 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS45 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25