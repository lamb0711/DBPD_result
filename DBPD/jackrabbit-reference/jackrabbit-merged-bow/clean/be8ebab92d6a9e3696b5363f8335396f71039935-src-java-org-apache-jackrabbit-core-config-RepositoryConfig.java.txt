Refactoring step 8 (JCR-53)
 - Fixed createWorkspaceProblem() (not adding the created configuration)
 - Added package documentation and a simple class diagram
 - Simplified workspace template handling
 - Javadocs and cleanups in RepositoryConfig


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156506 13f79535-47bb-0310-9956-ffa450edef68

- * A <code>RepositoryConfig</code> ...
+ * Repository configuration. This configuration class is used to
+ * create configured repository objects.
+ * <p>
+ * The contained configuration information are: the home directory and name
+ * of the repository, the access manager, file system, and versioning
+ * configurations, the workspace directory, the default workspace name, and
+ * the workspace configuration template. In addition the workspace
+ * configuration object keeps track of all configured workspaces.
-     * Creates a new <code>RepositoryFactory</code> instance. The configuration
-     * is read from the specified configuration file.
+     * Parses the given repository configuration file and returns the parsed
+     * repository configuration. The given repository home directory path
+     * will be used as the ${rep.home} parser variable.
-     * @param file path to the configuration file
+     * @param file repository configuration file
-     * @return a new <code>RepositoryConfig</code> instance
-     * @throws ConfigurationException if an error occurs
+     * @return repository configuration
+     * @throws ConfigurationException on configuration errors
-            throw new ConfigurationException("TODO", e);
+            throw new ConfigurationException(
+                    "The repository configuration file " + file
+                    + " could not be found.", e);
+    /**
+     * Parses the given repository configuration document and returns the
+     * parsed repository configuration. The given repository home directory
+     * path will be used as the ${rep.home} parser variable.
+     *
+     * @param xml repository configuration document
+     * @param home repository home directory
+     * @return repository configuration
+     * @throws ConfigurationException on configuration errors
+     */
-    private Element config;
-    private ConfigurationParser parser;
-
-    private Map wspConfigs;
+    private Map workspaces;
-     * repository home directory
+     * Repository home directory.
-    private String repHomeDir;
+    private final String home;
-     * virtual file system where the repository stores global state
+     * Repository name for a JAAS app-entry configuration.
-    private FileSystemConfig fsc;
+    private final String name;
-     * the name of the JAAS configuration app-entry for this repository
+     * Repository access manager configuration;
-    private String appName;
+    private final AccessManagerConfig amc;
-     * workspaces config root directory (i.e. folder that contains
-     * a subfolder with a workspace configuration file for every workspace
-     * in the repository)
+     * Repository file system configuration.
-    private String workspaceDirectory;
+    private final FileSystemConfig fsc;
-     * name of default workspace
+     * Name of the default workspace.
-    private String defaultWspName;
+    private final String defaultWorkspace;
-     * configuration for the access manager
+     * Workspace root directory. This directory contains a subdirectory for
+     * each workspace in this repository. Each workspace is configured by
+     * a workspace configuration file contained in the workspace subdirectory.
-    private AccessManagerConfig amConfig;
+    private final String workspaceDirectory;
-     * the versioning config
+     * The workspace configuration template. Used in creating new workspace
+     * configuration files.
-    private VersioningConfig vc;
+    private final Element template;
-    public RepositoryConfig(
-            Element config, ConfigurationParser parser,
-            String home, String name, FileSystemConfig fsc,
-            String root, String defaultWspName, AccessManagerConfig amc,
-            VersioningConfig vc) {
-        this.config = config;
-        this.parser = parser;
-        this.repHomeDir = home;
-        this.appName = name;
-        this.wspConfigs = new HashMap();
+    /**
+     * Repository versioning configuration.
+     */
+    private final VersioningConfig vc;
+
+    /**
+     * Creates a repository configuration object.
+     *
+     * @param template workspace configuration template
+     * @param home repository home directory
+     * @param name repository name for a JAAS app-entry configuration
+     * @param amc access manager configuration
+     * @param fsc file system configuration
+     * @param workspaceDirectory workspace root directory
+     * @param defaultWorkspace name of the default workspace
+     * @param vc versioning configuration
+     */
+    public RepositoryConfig(String home, String name,
+            AccessManagerConfig amc, FileSystemConfig fsc,
+            String workspaceDirectory, String defaultWorkspace,
+            Element template, VersioningConfig vc) {
+        this.workspaces = new HashMap();
+        this.home = home;
+        this.name = name;
+        this.amc = amc;
-        this.workspaceDirectory = root;
-        this.defaultWspName = defaultWspName;
-        this.amConfig = amc;
+        this.workspaceDirectory = workspaceDirectory;
+        this.defaultWorkspace = defaultWorkspace;
+        this.template = template;
+    /**
+     * Initializes the repository configuration. This method first initializes
+     * the repository file system and versioning configurations and then
+     * loads and initializes the configurations for all available workspaces.
+     *
+     * @throws ConfigurationException on initialization errors
+     */
-            WorkspaceConfig config = loadWorkspaceConfig(files[i]);
-            if (config != null) {
-                config.init();
-                addWorkspaceConfig(config);
+            WorkspaceConfig wc = loadWorkspaceConfig(files[i]);
+            if (wc != null) {
+                wc.init();
+                addWorkspaceConfig(wc);
-        if (wspConfigs.isEmpty()) {
+        if (workspaces.isEmpty()) {
-            createWorkspaceConfig(defaultWspName);
-        } else if (!wspConfigs.containsKey(defaultWspName)) {
+            createWorkspaceConfig(defaultWorkspace);
+        } else if (!workspaces.containsKey(defaultWorkspace)) {
-                    + defaultWspName);
+                    + defaultWorkspace);
+    /**
+     * Attempts to load a workspace configuration from the given workspace
+     * subdirectory. If the directory contains a valid workspace configuration
+     * file, then the configuration is parsed and returned as a workspace
+     * configuration object. The returned configuration object has not been
+     * initialized.
+     * <p>
+     * This method returns <code>null</code>, if the given directory does
+     * not exist or does not contain a workspace configuration file. If an
+     * invalid configuration file is found, then a
+     * {@link ConfigurationException ConfigurationException} is thrown.
+     *
+     * @param directory workspace configuration directory
+     * @return workspace configuration
+     * @throws ConfigurationException if the workspace configuration is invalid
+     */
-            WorkspaceConfig config = parser.parseWorkspaceConfig(xml);
-            return config;
+            return parser.parseWorkspaceConfig(xml);
-    private void addWorkspaceConfig(WorkspaceConfig config)
+    /**
+     * Adds the given workspace configuration to the repository.
+     *
+     * @param wc workspace configuration
+     * @throws ConfigurationException if a workspace with the same name
+     *                                already exists
+     */
+    private void addWorkspaceConfig(WorkspaceConfig wc)
-        String name = config.getName();
-        if (!wspConfigs.containsKey(name)) {
-            wspConfigs.put(name, config);
+        String name = wc.getName();
+        if (!workspaces.containsKey(name)) {
+            workspaces.put(name, wc);
+     * This method creates a workspace configuration subdirectory,
+     * copies the workspace configuration template into it, and finally
+     * adds the created workspace configuration to the repository.
+     * The initialized workspace configuration object is returned to
+     * the caller.
-     * @return a new <code>WorkspaceConfig</code> object.
-     * @throws ConfigurationException if the specified name already exists or
-     *                             if an error occured during the creation.
+     * @return created workspace configuration
+     * @throws ConfigurationException if creating the workspace configuration
+     *                                failed
-        // create the workspace folder (i.e. the workspace home directory)
-        File wspFolder = new File(workspaceDirectory, name);
-        if (!wspFolder.mkdir()) {
-            String msg = "Failed to create the workspace home directory: " + wspFolder.getPath();
-            throw new ConfigurationException(msg);
-        }
-        // clone the workspace definition template
-        Element wspCongigElem = (Element) config.getChild("Workspace").clone();
-        wspCongigElem.setAttribute("name", name);
+        // The workspace directory (TODO encode name?)
+        File directory = new File(workspaceDirectory, name);
-        // create workspace.xml file
-/*
-        DocType docType = new DocType(WORKSPACE_ELEMENT, null, WorkspaceConfig.PUBLIC_ID);
-        Document doc = new Document(wspCongigElem, docType);
-*/
-        Document doc = new Document(wspCongigElem);
-        XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
-        File configFile = new File(wspFolder, WORKSPACE_XML);
-        FileOutputStream fos = null;
+        // Create the directory, fail if it exists or cannot be created
+        if (!directory.mkdir()) {
+            throw new ConfigurationException(
+                    "Failed to create configuration directory for workspace "
+                    + name + ".");
+        }
+
+        // Create the workspace.xml file from the configuration template.
-            fos = new FileOutputStream(configFile);
-            out.output(doc, fos);
-        } catch (IOException ioe) {
-            String msg = "Failed to create workspace configuration file: " + configFile.getPath();
-            throw new ConfigurationException(msg, ioe);
-        } finally {
-            if (fos != null) {
-                try {
-                    fos.close();
-                } catch (IOException e) {
-                    // ignore
-                }
+            Element element = (Element) template.getChild("Workspace").clone();
+            element.setAttribute("name", name);
+            Document document = new Document(element);
+            XMLOutputter outputter =
+                new XMLOutputter(Format.getPrettyFormat());
+
+            FileOutputStream fos =
+                new FileOutputStream(new File(directory, WORKSPACE_XML));
+            try {
+                outputter.output(document, fos);
+            } finally {
+                try { fos.close(); } catch (Exception e) { }
+        } catch (IOException e) {
+            throw new ConfigurationException(
+                    "Failed to create a configuration file for workspace "
+                    + name + ".", e);
-        try {
-            // create workspace config object
-            Properties newVariables = new Properties();
-            newVariables.setProperty(
-                    ConfigurationParser.WORKSPACE_HOME_VARIABLE,
-                    configFile.getParent());
-            ConfigurationParser parser = new ConfigurationParser(newVariables);
-
-            InputSource xml = new InputSource(new FileReader(configFile));
-            xml.setSystemId(configFile.toURI().toString());
-
-            return parser.parseWorkspaceConfig(xml);
-        } catch (FileNotFoundException e) {
-            throw new ConfigurationException("TODO", e);
+        // Load the created workspace configuration.
+        WorkspaceConfig wc = loadWorkspaceConfig(directory);
+        if (wc != null) {
+            wc.init();
+            addWorkspaceConfig(wc);
+            return wc;
+        } else {
+            throw new ConfigurationException(
+                    "Failed to load the created configuration for workspace "
+                    + name + ".");
+
-     * Returns the home directory of the repository.
+     * Returns the repository home directory.
-     * @return the home directory of the repository
+     * @return repository home directory
-        return repHomeDir;
+        return home;
-     * Returns the virtual file system where the repository stores global state.
+     * Returns the repository file system implementation.
-     * @return the virtual file system where the repository stores global state
+     * @return file system implementation
-     * Returns the name of the JAAS configuration app-entry for this repository.
+     * Returns the repository name. The repository name can be used for
+     * JAAS app-entry configuration.
-     * @return the name of the JAAS configuration app-entry for this repository
+     * @return repository name
-        return appName;
+        return name;
-     * Returns workspaces config root directory (i.e. the folder that contains
-     * a subfolder with a workspace configuration file for every workspace
-     * in the repository).
+     * Returns the repository access manager configuration.
-     * @return the workspaces config root directory
+     * @return access manager configuration
+     */
+    public AccessManagerConfig getAccessManagerConfig() {
+        return amc;
+    }
+
+    /**
+     * Returns the workspace root directory.
+     *
+     * @return workspace root directory
-     * @return the name of the default workspace
+     * @return name of the default workspace
-        return defaultWspName;
+        return defaultWorkspace;
-     * @return a collection of <code>WorkspaceConfig</code> objects.
+     * @return workspace configurations
-        return wspConfigs.values();
+        return workspaces.values();
-     * @return a <code>WorkspaceConfig</code> object or <code>null</code>
-     *         if no such workspace exists.
+     * @return workspace configuration, or <code>null</code> if the named
+     *         workspace does not exist
-        return (WorkspaceConfig) wspConfigs.get(name);
+        return (WorkspaceConfig) workspaces.get(name);
-     * Returns the configuration for the versioning
+     * Returns the repository versioning configuration.
-     * @return a <code>VersioningConfig</code> object
+     * @return versioning configuration
-    /**
-     * Returns the access manager configuration
-     *
-     * @return an <code>AccessManagerConfig</code> object
-     */
-    public AccessManagerConfig getAccessManagerConfig() {
-        return amConfig;
-    }
-

MOV23 MOV31 MOV44 MOV44 MOV44 INS31 INS29 INS29 INS83 MOV43 INS29 INS83 MOV43 INS83 MOV43 INS83 INS83 MOV43 INS83 INS83 MOV43 INS83 INS29 INS83 INS42 INS8 INS29 INS29 INS29 MOV83 MOV39 MOV42 MOV44 MOV43 MOV8 MOV43 MOV43 MOV43 UPD42 INS8 MOV43 UPD42 MOV8 MOV43 UPD42 MOV8 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS65 INS65 INS65 INS65 UPD42 INS65 UPD42 INS65 UPD42 UPD42 UPD42 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 UPD42 UPD42 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD65 MOV65 INS65 UPD42 INS54 INS60 INS25 INS41 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 UPD66 INS42 INS66 INS66 MOV43 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 INS8 INS12 MOV43 INS59 MOV27 INS8 INS8 UPD66 UPD66 UPD42 UPD66 UPD66 INS66 UPD66 UPD66 UPD42 UPD66 UPD66 INS42 UPD66 UPD66 UPD66 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS66 INS41 UPD42 INS53 MOV60 MOV21 MOV60 MOV60 MOV60 INS54 MOV44 MOV8 INS42 INS32 UPD42 MOV21 MOV21 MOV41 MOV53 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD42 INS14 MOV43 MOV43 UPD43 MOV8 INS8 INS53 INS42 INS42 INS32 INS32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV43 INS27 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS14 INS54 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS27 INS27 UPD45 MOV45 INS42 INS45 MOV43 MOV43 UPD42 MOV43 MOV14 MOV8 INS12 MOV43 INS27 UPD42 MOV42 INS45 INS42 INS45 INS45 INS42 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV44 INS8 UPD45 MOV45 INS42 INS45 UPD42 UPD43 UPD42 UPD42 DEL45 DEL42 DEL43 DEL29 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL42 DEL43 DEL31 DEL42 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL14 DEL53 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL14 DEL53 DEL42 DEL42 DEL40 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL45 DEL42 DEL42 DEL33 DEL59 DEL60 DEL12 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL66 DEL66 DEL42 DEL41 DEL8