JCR-199: Use a sequence of smaller byte arrays instead of one large
byte array to avoid memory problems when serializing binary values.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@290458 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.OutputStream;
-     * <code>ObjectOutputStream</code> by first copying to an internal byte
-     * array.
+     * <code>ObjectOutputStream</code>.
-     *
-     * @throws OutOfMemoryError If not enough memory is available to store the
-     *      binary data in the internal byte array.
-        // read the input into a byte array - limited by memory available !!
-        ByteArrayOutputStream bos =
-            new ByteArrayOutputStream(stream.available());
-        byte[] buf = new byte[2048];
-        int rd = 0;
-        while ((rd = stream.read(buf)) >= 0) {
-            bos.write(buf, 0, rd);
+        byte[] buffer = new byte[4096];
+        int bytes = 0;
+        while ((bytes = stream.read(buffer)) >= 0) {
+            // Write a segment of the input stream
+            out.writeInt(bytes);
+            out.write(buffer, 0, bytes);
-
-        // stream the data to the object output
-        out.writeInt(bos.size());
-        out.write(bos.toByteArray());
+        // Write the end of stream marker
+        out.writeInt(0);
-     * Reads the binary data from the <code>ObjectInputStream</code> into an
-     * internal byte array, which is then provided through a
-     * <code>ByteArrayInputStream</code>.
+     * Reads the binary data from the <code>ObjectInputStream</code> into
+     * a temporary file that is used to back up the binary stream contents
+     * of the constructed value instance. The temporary file gets deleted
+     * when the binary stream is closed or garbage collected.
-     *
-     * @throws OutOfMemoryError If not enouhg memory is available to store the
-     *      binary data in the internal byte array.
-        int size = in.readInt();
-        byte[] buf = new byte[size];
-        in.readFully(buf);
-        stream = new ByteArrayInputStream(buf);
+        final File file = File.createTempFile("jcr-value", "bin");
+
+        OutputStream out = new FileOutputStream(file);
+        byte[] buffer = new byte[4096];
+        for (int bytes = in.readInt(); bytes > 0; bytes = in.readInt()) {
+            if (buffer.length < bytes) {
+                buffer = new byte[bytes];
+            }
+            in.readFully(buffer, 0, bytes);
+            out.write(buffer, 0, bytes);
+        }
+        out.close();
+
+        stream = new FileInputStream(file) {
+
+            private boolean closed = false;
+
+            public void close() throws IOException {
+                super.close();
+                closed = true;
+                file.delete();
+            }
+
+            protected void finalize() throws IOException {
+                try {
+                    if (!closed) {
+                        file.delete();
+                    }
+                } finally {
+                    super.finalize();
+                }
+            }
+        };

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS61 INS65 INS60 INS60 INS24 INS21 UPD66 MOV5 MOV27 INS8 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS83 INS43 INS59 INS43 INS59 MOV5 INS58 INS27 INS7 INS8 INS32 UPD42 UPD42 MOV21 MOV21 UPD42 INS34 INS42 INS42 INS32 INS42 INS42 INS14 UPD42 INS39 MOV59 INS42 INS34 INS42 INS32 INS25 MOV21 INS21 INS42 INS42 MOV5 UPD34 INS42 INS42 INS45 INS45 INS43 INS42 MOV5 INS34 UPD42 INS42 INS42 INS27 INS8 INS32 UPD43 UPD42 INS1 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS34 UPD42 MOV42 INS42 INS40 INS42 INS21 UPD42 INS34 INS42 INS42 INS42 INS42 INS34 INS42 UPD42 INS23 INS31 INS31 UPD42 INS7 INS83 INS39 INS59 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS42 INS3 INS42 INS9 INS42 INS21 INS21 INS21 INS42 INS54 INS5 INS42 INS48 INS7 INS32 INS8 INS8 INS39 INS85 INS42 INS42 INS9 INS42 INS42 INS25 INS21 INS38 INS8 INS48 INS42 INS21 INS42 INS32 INS42 INS42 DEL66 DEL42 DEL66 DEL66 DEL65 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL34 DEL42 DEL32 DEL8 DEL61 DEL42 DEL42 DEL32 DEL66 DEL65 DEL42 DEL65 DEL39 DEL60 DEL42