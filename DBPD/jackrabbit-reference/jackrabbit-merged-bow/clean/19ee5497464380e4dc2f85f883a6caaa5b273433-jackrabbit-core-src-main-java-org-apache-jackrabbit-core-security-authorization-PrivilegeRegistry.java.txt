JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1082239 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.iterator.Iterators;
+     * A custom privilege for which bits were not calculated
+     */
+    private static final int UNDEFINED = -1;
+
+    /**
-    private int nextBits = RETENTION_MNGMT << 1;
-
-            Map<Name, Definition> definitions = createPrivilegeDefinitions(customDefs);
+            Map<Name, Definition> definitions = createCustomDefinitions(customDefs);
-        return new PrivilegeManagerImpl(this, resolver).getPrivileges(bits);
+        Set<Privilege> prvs = new PrivilegeManagerImpl(this, resolver).getPrivileges(bits);
+        return prvs.toArray(new Privilege[prvs.size()]);
-     * Note, that the bits calculated for jcr:all does not include any
-     * registered custom privileges.
-     *
+     * 
-        int bits = PrivilegeRegistry.NO_PRIVILEGE;
+        int bits = NO_PRIVILEGE;
-            Map<Name, DefinitionStub> stubs = Collections.singletonMap(privilegeName, new DefinitionStub(privilegeName, isAbstract, declaredAggregateNames, true));
-            Map<Name, Definition> definitions = createPrivilegeDefinitions(stubs);
+            Map<Name, DefinitionStub> stubs = Collections.singletonMap(privilegeName, new DefinitionStub(privilegeName, isAbstract, declaredAggregateNames));
+            Map<Name, Definition> definitions = createCustomDefinitions(stubs);
+     * Calculates the bits of the specified definitions. Note, that custom
+     * privileges don't have a integer representation as they are not used
+     * for permission calculation.
+     *
+     * @param defs
+     * @return
+     */
+    int getBits(Definition[] defs) {
+        int bits = NO_PRIVILEGE;
+        for (Definition def : defs) {
+            bits |= def.bits;
+        }
+        return bits;
+    }
+
+    /**
+     * Returns the names of the privileges identified by the specified bits.
+     * Note, that custom privileges don't have a integer representation as they
+     * are not used for permission calculation.
+     * 
-        if (bitsToNames.containsKey(bits)) {
+        if (bits <= NO_PRIVILEGE) {
+            return Name.EMPTY_ARRAY;
+        } else if (bitsToNames.containsKey(bits)) {
+            // matches all built-in aggregates and single built-in privileges
+            // bits are a combination of built-in privileges.
-            // include matching custom privilege names 
-            for (Definition def : registeredPrivileges.values()) {
-                if (def.isCustom && ((bits & def.bits) == def.bits)) {
-                    names.add(def.name);
-                }
-            }
-
-            bitsToNames.put(def.bits, Collections.singleton(def.name));
+            if (def.bits > NO_PRIVILEGE) {
+                bitsToNames.put(def.bits, Collections.singleton(def.name));
+            }
-            int allBits = all.bits;
-            for (Definition def : definitions.values()) {
-                allBits |= def.bits;
-            }
-
-            all = new Definition(NameConstants.JCR_ALL, false, allAggrNames, allBits);
+            all = new Definition(NameConstants.JCR_ALL, false, allAggrNames, all.bits);
-     * new <code>PrivilegeDefinition</code>s. The validation includes name
+     * new custom <code>PrivilegeDefinition</code>s. The validation includes name
-    private Map<Name, Definition> createPrivilegeDefinitions(Map<Name, DefinitionStub> toRegister) throws RepositoryException {
+    private Map<Name, Definition> createCustomDefinitions(Map<Name, DefinitionStub> toRegister) throws RepositoryException {
-                definitions.put(name, new Definition(stub, nextBits()));
+                definitions.put(name, new Definition(stub, NO_PRIVILEGE));
-                int bts = getAggregateBits(stub.declaredAggregateNames, definitions);
-                if (bitsToNames.containsKey(bts) && bitsToNames.get(bts).size() == 1) {
-                    Name existingName = bitsToNames.get(bts).iterator().next();
-                    throw new RepositoryException("Custom aggregate privilege '" + stub.name + "' is already covered by '" + existingName.toString() + "'");
+
+                int bts = NO_PRIVILEGE;
+                for (Name n : stub.declaredAggregateNames) {
+                    Definition aggr = null;
+                    if (registeredPrivileges.containsKey(n)) {
+                        aggr = registeredPrivileges.get(n);
+                    } else if (definitions.containsKey(n)) {
+                        aggr = definitions.get(n);
+                    }
+
+                    if (aggr == null) {
+                        // unknown dependency
+                        bts = UNDEFINED;
+                        break;
+                    } else if (!aggr.isCustom()) {
+                        throw new RepositoryException("Custom privileges may only aggregate custom privileges.");
+                    } // else: a known custom privilege -> try next.
-                if (bts != NO_PRIVILEGE) {
+
+                if (bts == NO_PRIVILEGE) {
+
+                    // final validation if a custom aggregated has not yet been defined.
+                    Iterator<Definition> it = Iterators.iteratorChain(registeredPrivileges.values().iterator(), definitions.values().iterator());
+                    while (it.hasNext()) {
+                        Definition d = it.next();
+                        if (isEquivalentAggregate(d, def, definitions)) {
+                            throw new RepositoryException("Custom aggregate privilege '" + def.name + "' is already defined by '"+ d.name+"'");
+                        }
+                    }
+
-                }
+                } // unresolvable bts -> postpone to next iterator.
-    /**
-     *
-     * @return
-     */
-    private int nextBits() {
-        int b = nextBits;
-        nextBits = nextBits << 1;
-        return b;
+    private boolean isEquivalentAggregate(Definition d, Definition otherDef,
+                                          Map<Name, Definition> unregistered) {
+        // either of the definitions isn't an aggregate.
+        if (d.declaredAggregateNames.isEmpty() || otherDef.declaredAggregateNames.isEmpty()) {
+            return false;
+        }
+        // two aggregates that defined the same declared aggregate names
+        if (d.declaredAggregateNames.equals(otherDef.declaredAggregateNames)) {
+            return true;
+        }
+        // two aggregates that defined the same aggregation of simple definitions.
+        Set<Name> aggrNames = getAggrNames(d, unregistered);
+        Set<Name> otherAggrNames = getAggrNames(otherDef, unregistered);
+        return aggrNames.size() == otherAggrNames.size() && aggrNames.containsAll(otherAggrNames);
-    /**
-     *
-     * @param declaredAggregateNames
-     * @param toRegister
-     * @return
-     */
-    private int getAggregateBits(Set<Name> declaredAggregateNames, Map<Name, Definition> toRegister) {
-        int bts = NO_PRIVILEGE;
-        for (Name n : declaredAggregateNames) {
-            if (registeredPrivileges.containsKey(n)) {
-                bts |= registeredPrivileges.get(n).bits;
-            } else if (toRegister.containsKey(n)) {
-                Definition def = toRegister.get(n);
-                if (def.bits == NO_PRIVILEGE) {
-                    // not yet processed dependency -> wait for next iteration.
-                    return NO_PRIVILEGE;
-                } else {
-                    bts |= def.bits;
-                }
+    private Set<Name> getAggrNames(Definition def, Map<Name, Definition> unregistered) {
+        Set<Name> names = new HashSet<Name>();
+        for (Name n : def.declaredAggregateNames) {
+            Definition a = (unregistered.containsKey(n)) ? unregistered.get(n) : registeredPrivileges.get(n);
+            if (a.declaredAggregateNames.isEmpty()) {
+                names.add(a.name);
-                // unknown dependency (should not get here)
-                return NO_PRIVILEGE;
+                names.addAll(getAggrNames(a, unregistered));
-        return bts;
+        return names;
-        protected final boolean isCustom;
-        
+
-        private DefinitionStub(Name name, boolean isAbstract, Set<Name> declaredAggregateNames, boolean isCustom) {
+        private DefinitionStub(Name name, boolean isAbstract, Set<Name> declaredAggregateNames) {
-            this.isCustom = isCustom;
+                /* NOTE: evaluation of decl-aggr-names is sufficient as
+                   uniqueness is asserted upon registration */
+                        /* NOTE: comparison of decl-aggr-names is sufficient as
+                           uniqueness is asserted upon registration */
-            this(stub.name, stub.isAbstract, stub.declaredAggregateNames, bits, stub.isCustom);
+            this(stub.name, stub.isAbstract, stub.declaredAggregateNames, bits);
-            this(name, isAbstract, Collections.<Name>emptySet(), bits, false);
+            this(name, isAbstract, Collections.<Name>emptySet(), bits);
-            this(name, isAbstract, declaredAggregateNames, bits, false);
-        }
-
-        private Definition(Name name, boolean isAbstract, Set<Name> declaredAggregateNames, int bits, boolean isCustom) {
-            super(name, isAbstract, declaredAggregateNames, isCustom);
-            if (bits == NO_PRIVILEGE) {
+            super(name, isAbstract, declaredAggregateNames);
+            if (bits < NO_PRIVILEGE) {
-        int getBits() {
-            return bits;
-        }
-
+
+        boolean isCustom() {
+            return bits == NO_PRIVILEGE;
+        }
-                        stubs.put(privName, new DefinitionStub(privName, isAbstract, declaredAggrNames, true));
+                        stubs.put(privName, new DefinitionStub(privName, isAbstract, declaredAggrNames));

INS26 MOV23 MOV31 INS40 INS31 INS31 MOV31 INS29 INS83 INS83 UPD42 INS44 UPD42 INS83 INS39 INS42 INS44 INS44 MOV44 INS8 MOV83 INS74 INS42 MOV44 INS44 MOV8 INS65 UPD42 INS38 INS60 INS65 INS65 INS5 INS42 INS70 MOV41 INS65 INS25 MOV43 INS42 INS43 INS42 UPD42 INS25 INS25 INS60 INS60 INS41 MOV43 MOV43 INS74 INS42 INS39 INS42 INS66 INS34 INS74 INS59 INS32 INS66 INS66 INS66 INS42 INS43 INS85 MOV44 INS42 INS8 INS66 INS66 INS66 INS27 INS8 MOV25 INS8 UPD66 INS42 INS27 INS8 INS32 INS8 INS74 INS59 INS74 INS59 INS27 INS43 INS43 INS43 INS74 INS40 UPD42 INS41 INS43 INS43 INS42 MOV32 INS42 INS42 INS3 INS42 INS42 UPD42 UPD42 MOV21 INS42 INS42 INS41 INS25 INS32 INS32 INS41 INS40 INS42 INS40 INS41 INS43 MOV43 INS42 INS32 INS43 INS43 INS42 INS32 INS27 INS32 INS42 INS42 INS42 INS43 INS43 UPD42 INS14 INS60 MOV25 INS27 MOV27 INS42 INS42 INS5 INS32 UPD7 INS40 INS27 MOV8 INS40 INS42 INS40 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS59 INS32 INS42 INS42 INS43 INS85 INS42 INS42 UPD42 INS40 INS40 INS42 INS60 INS70 INS25 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS16 INS40 INS42 INS21 UPD42 INS42 UPD42 INS40 MOV39 INS59 INS44 INS40 INS8 INS27 MOV8 INS42 INS42 INS36 INS32 INS32 INS32 INS32 MOV42 MOV42 INS43 INS42 INS60 INS25 INS25 INS42 INS42 MOV60 INS60 INS61 MOV21 MOV21 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS43 INS59 MOV32 INS8 INS25 INS27 INS8 INS25 INS74 INS59 INS32 INS8 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS33 UPD42 MOV42 INS21 INS32 INS8 INS42 INS33 INS21 INS10 INS38 INS8 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS7 UPD42 MOV42 INS42 INS42 INS21 INS7 INS32 INS53 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS43 INS59 INS32 INS8 INS42 MOV32 INS7 INS42 INS42 INS42 INS42 INS14 MOV32 UPD42 MOV42 MOV32 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV53 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS32 MOV43 INS45 INS42 MOV42 INS42 INS42 INS42 INS43 INS42 UPD40 UPD45 INS40 DEL42 DEL34 DEL27 DEL66 DEL66 DEL40 DEL9 DEL83 DEL42 DEL34 DEL27 DEL42 DEL41 DEL40 DEL42 DEL40 DEL27 DEL36 DEL40 DEL27 DEL36 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL40 DEL7 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL32 DEL32 DEL32 DEL34 DEL27 DEL27 DEL25 DEL42 DEL42 DEL27 DEL8 DEL25 DEL42 DEL40 DEL42 DEL27 DEL42 DEL41 DEL42 DEL40 DEL7 DEL42 DEL42 DEL22 DEL7 DEL21 DEL8 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL65 DEL42 DEL65 DEL65 DEL29 DEL39 DEL42 DEL74 DEL42 DEL44 DEL31 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL40 DEL9 DEL39 DEL42 DEL44 DEL42 DEL39 DEL42 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL9 DEL17 DEL9