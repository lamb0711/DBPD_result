JCR-890: concurrent read-only access to a session

Handle Session.logout() in a way that prevents concurrent session access.

Also move the SessionContext argument from perform() to a member variable of SessionOperation.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@957626 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.session.ActiveSessionState;
-import org.apache.jackrabbit.core.session.ClosedSessionState;
-        this.context.setSessionState(new ActiveSessionState(context));
-        perform(new SessionSaveOperation());
+        perform(new SessionSaveOperation(context));
-        perform(new SessionRefreshOperation(keepChanges, clusterSyncOnRefresh()));
+        perform(new SessionRefreshOperation(
+                context, keepChanges, clusterSyncOnRefresh()));
-        perform(new SessionMoveOperation(this, srcAbsPath, destAbsPath));
+        perform(new SessionMoveOperation(
+                context, this, srcAbsPath, destAbsPath));
-     * {@inheritDoc}
+     * Invalidates this session and releases all associated resources.
-    public synchronized void logout() {
-        if (!isLive()) {
-            // ignore
-            return;
-        }
+    public void logout() {
+        if (context.getSessionState().close()) {
+            // JCR-798: Remove all registered event listeners to avoid concurrent
+            // access to session internals by the event delivery or even listeners
+            removeRegisteredEventListeners();
-        // JCR-798: Remove all registered event listeners to avoid concurrent
-        // access to session internals by the event delivery or even listeners
-        removeRegisteredEventListeners();
+            // discard any pending changes first as those might
+            // interfere with subsequent operations
+            context.getItemStateManager().disposeAllTransientItemStates();
-        // discard any pending changes first as those might
-        // interfere with subsequent operations
-        context.getItemStateManager().disposeAllTransientItemStates();
+            // notify listeners that session is about to be closed
+            notifyLoggingOut();
-        // notify listeners that session is about to be closed
-        notifyLoggingOut();
+            // dispose session item state manager
+            context.getItemStateManager().dispose();
+            // dispose item manager
+            context.getItemManager().dispose();
+            // dispose workspace
+            wsp.dispose();
-        // dispose session item state manager
-        context.getItemStateManager().dispose();
-        // dispose item manager
-        context.getItemManager().dispose();
-        // dispose workspace
-        wsp.dispose();
-
-        // invalidate session
-        context.setSessionState(new ClosedSessionState());
-
-        // logout JAAS subject
-        if (loginContext != null) {
-            try {
-                loginContext.logout();
-            } catch (javax.security.auth.login.LoginException le) {
-                log.warn("failed to logout current subject: " + le.getMessage());
+            // logout JAAS subject
+            if (loginContext != null) {
+                try {
+                    loginContext.logout();
+                } catch (javax.security.auth.login.LoginException le) {
+                    log.warn("failed to logout current subject: " + le.getMessage());
+                }
+                loginContext = null;
-            loginContext = null;
-        }
-        try {
-            context.getAccessManager().close();
-        } catch (Exception e) {
-            log.warn("error while closing AccessManager", e);
-        }
+            try {
+                context.getAccessManager().close();
+            } catch (Exception e) {
+                log.warn("error while closing AccessManager", e);
+            }
-        // finally notify listeners that session has been closed
-        notifyLoggedOut();
+            // finally notify listeners that session has been closed
+            notifyLoggedOut();
+        }
+

INS8 INS65 INS25 INS66 INS32 MOV8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL65 DEL65 DEL83 DEL42 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21