JCR-2989 Support for embedded index aggregates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1182367 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-import org.apache.jackrabbit.spi.commons.name.PathBuilder;
-import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
-import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
-import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
-import org.apache.jackrabbit.core.state.NodeState;
-import org.apache.jackrabbit.core.state.ItemStateManager;
-import org.apache.jackrabbit.core.state.ItemStateException;
-import org.apache.jackrabbit.core.state.ChildNodeEntry;
-import org.apache.jackrabbit.core.state.PropertyState;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import javax.jcr.NamespaceException;
+import javax.jcr.RepositoryException;
+
+import org.apache.jackrabbit.core.state.ChildNodeEntry;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.ItemStateManager;
+import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
+import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.commons.name.PathBuilder;
+import org.w3c.dom.CharacterData;
-import org.w3c.dom.CharacterData;
-
-import javax.jcr.RepositoryException;
-import javax.jcr.NamespaceException;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Arrays;
+     * recursive aggregation (for same type nodes) default value.
+     */
+    private static final boolean RECURSIVE_AGGREGATION_DEFAULT = false;
+
+    /**
+     * flag to enable recursive aggregation (for same type nodes).
+     */
+    private final boolean recursiveAggregation;
+
+    /**
+     * recursive aggregation (for same type nodes) limit default value.
+     */
+
+    protected static final long RECURSIVE_AGGREGATION_LIMIT_DEFAULT = 100;
+
+    /**
+     * recursive aggregation (for same type nodes) limit. embedded aggregation
+     * of nodes that have the same type can go only this levels up.
+     * 
+     * A value eq to 0 gives unlimited aggregation.
+     */
+    private final long recursiveAggregationLimit;
+
+    /**
+        this.recursiveAggregation = getRecursiveAggregation(config);
+        this.recursiveAggregationLimit = getRecursiveAggregationLimit(config);
-                return aggregateRoot;
+                boolean sameNodeTypeAsRoot = nodeState.getNodeTypeName().equals(aggregateRoot.getNodeTypeName());
+                if(!sameNodeTypeAsRoot || (sameNodeTypeAsRoot && recursiveAggregation)){
+                    return aggregateRoot;
+                }
+        
-                return aggregateRoot;
+                boolean sameNodeTypeAsRoot = nodeState.getNodeTypeName().equals(aggregateRoot.getNodeTypeName());
+                if(!sameNodeTypeAsRoot || (sameNodeTypeAsRoot && recursiveAggregation)){
+                    return aggregateRoot;
+                }
-                nodeStates.addAll(Arrays.asList(nodeInclude.resolve(nodeState)));
+                for (NodeState childNs : nodeInclude.resolve(nodeState)) {
+                    boolean sameNodeTypeAsRoot = nodeState.getNodeTypeName().equals(childNs.getNodeTypeName());
+                    if (!sameNodeTypeAsRoot || (sameNodeTypeAsRoot && recursiveAggregation)) {
+                        nodeStates.add(childNs);
+                    }
+                }
+    /**
+     * {@inheritDoc}
+     */
+    public long getRecursiveAggregationLimit() {
+        return recursiveAggregationLimit;
+    }
+
+    
+    private boolean getRecursiveAggregation(Node config) {
+        Node rAttr = config.getAttributes().getNamedItem("recursive");
+        if (rAttr == null) {
+            return RECURSIVE_AGGREGATION_DEFAULT;
+        }
+        return Boolean.valueOf(rAttr.getNodeValue());
+    }
+    private long getRecursiveAggregationLimit(Node config)
+            throws RepositoryException {
+        Node rAttr = config.getAttributes().getNamedItem("recursiveLimit");
+        if (rAttr == null) {
+            return RECURSIVE_AGGREGATION_LIMIT_DEFAULT;
+        }
+        try {
+            return Long.valueOf(rAttr.getNodeValue());
+        } catch (NumberFormatException e) {
+            throw new RepositoryException(
+                    "Unable to read indexing configuration (recursiveLimit).",
+                    e);
+        }
+    }
+    

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS42 INS9 INS65 INS42 INS65 INS42 INS34 INS65 INS42 INS21 INS21 INS65 INS41 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS42 INS60 INS25 INS54 INS66 INS66 INS66 INS66 INS66 INS66 INS7 INS7 INS65 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS43 INS59 INS27 INS8 INS8 INS12 INS22 INS32 INS22 INS32 MOV25 MOV25 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS44 INS8 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS8 INS8 INS8 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS43 INS42 INS53 INS60 INS25 INS60 INS25 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS39 INS59 INS27 MOV8 INS39 INS59 INS27 MOV8 INS44 MOV32 MOV8 INS42 INS42 INS43 INS45 INS42 INS42 INS32 INS38 INS36 INS42 INS32 INS38 INS36 INS43 INS42 INS60 INS25 INS42 INS32 INS42 INS32 INS42 INS27 INS32 INS42 INS32 INS42 INS27 INS42 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS38 INS36 INS21 INS32 INS42 MOV32 INS42 INS27 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 DEL32 DEL21