JCR-3005: Make it possible to get multiple nodes in one call via davex

Add support for using POST for requesting multiple nodes.
Don't use automatic node type -based depth configuration when requesting multiple nodes.

Drop the conditional feature flag. I think this is ready for use as an official API.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1221335 13f79535-47bb-0310-9956-ffa450edef68

- * <!--
- * Since Jackrabbit 2.3.1 it is also possible to request multiple subtrees
+ * Since Jackrabbit 2.3.6 it is also possible to request multiple subtrees
- * -->
-    /** Temporary feature switch, remove when JCR-3005 is resolved. */
-    private static final boolean JCR_3005 = Boolean.getBoolean("JCR-3005");
-
-            Session session = JcrDavSession.getRepositorySession(
-                    webdavRequest.getDavSession());
+            Session session = getRepositorySession(webdavRequest);
-                if (depth < BatchReadConfig.DEPTH_INFINITE) {
-                    NodeType type = node.getPrimaryNodeType();
-                    depth = brConfig.getDepth(type.getName());
-                }
-                if (includes == null || !JCR_3005) {
+                if (includes == null) {
+                    if (depth < BatchReadConfig.DEPTH_INFINITE) {
+                        NodeType type = node.getPrimaryNodeType();
+                        depth = brConfig.getDepth(type.getName());
+                    }
-                    Collection<Node> nodes = new ArrayList<Node>();
-                    Set<String> alreadyAdded = new HashSet<String>();
-                    for (String include : includes) {
-                        try {
-                            Node n;
-                            if (include.startsWith("/")) {
-                                n = session.getNode(include);
-                            } else {
-                                n = node.getNode(include);
-                            }
-                            String np = n.getPath();
-                            if (!alreadyAdded.contains(np)) {
-                                nodes.add(n);
-                                alreadyAdded.add(np);
-                            }
-                        } catch (PathNotFoundException e) {
-                            // skip missing node
-                        }
-                    }
-                    writer.write(nodes, depth);
+                    writeMultiple(writer, node, includes, depth);
+    private void writeMultiple(
+            JsonWriter writer, Node node, String[] includes, int depth)
+            throws RepositoryException, IOException {
+        Collection<Node> nodes = new ArrayList<Node>();
+        Set<String> alreadyAdded = new HashSet<String>();
+        for (String include : includes) {
+            try {
+                Node n;
+                if (include.startsWith("/")) {
+                    n = node.getSession().getNode(include);
+                } else {
+                    n = node.getNode(include);
+                }
+                String np = n.getPath();
+                if (!alreadyAdded.contains(np)) {
+                    nodes.add(n);
+                    alreadyAdded.add(np);
+                }
+            } catch (PathNotFoundException e) {
+                // skip missing node
+            }
+        }
+        writer.write(nodes, depth);
+    }
+
+                String[] includes = null; // multi-read over POST
+                } else if ((pValues = data.getParameterValues(PARAM_INCLUDE)) != null
+                        && canHandle(DavMethods.DAV_GET, webdavRequest, davResource)) {
+                    includes = pValues;
+                    if (includes != null) {
+                        webdavResponse.setContentType("text/plain;charset=utf-8");
+                        JsonWriter writer = new JsonWriter(webdavResponse.getWriter());
+
+                        DavResourceLocator locator = davResource.getLocator();
+                        String path = locator.getRepositoryPath();
+
+                        Node node = session.getNode(path);
+                        int depth = ((WrappingLocator) locator).getDepth();
+
+                        writeMultiple(writer, node, includes, depth);
+                    }

INS31 INS43 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 MOV43 MOV8 UPD66 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS39 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS60 INS25 MOV42 MOV27 INS8 INS8 INS5 INS59 MOV27 INS8 MOV8 MOV25 MOV21 INS21 INS43 INS85 INS42 INS33 MOV21 MOV25 INS32 INS42 INS25 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS8 MOV8 INS42 INS33 INS21 INS60 INS60 INS60 INS60 INS60 INS21 INS32 INS27 INS32 INS21 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS42 UPD42 MOV42 INS36 INS33 INS42 INS40 INS42 INS42 INS7 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS42 INS42 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL42 DEL42 DEL32 DEL42 DEL38 DEL27 DEL8