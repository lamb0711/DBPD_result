JCR-2919 : Security of token base authentication

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1129585 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.security.SecurityConstants;
+import java.io.UnsupportedEncodingException;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+    private static final String TOKEN_ATTRIBUTE_KEY = TOKEN_ATTRIBUTE + ".key";
+    private static final char DELIM = '_';
+    private final String key;
+        String keyV = null;
-            Node n = session.getNodeByIdentifier(token);
+            Node n = getTokenNode(token, session);
+                } else if (TOKEN_ATTRIBUTE_KEY.equals(name)) {
+                    keyV = p.getString();
+        key = keyV;
+
+            // test for matching key
+            if (key != null && !key.equals(getDigestedKey(tokenCredentials))) {
+                return false;
+            }
+
+            // generate key part of the login token
+            String key = generateKey(8);
+
+            // create the token node
-            String token = tokenNode.getIdentifier();
+            StringBuilder sb = new StringBuilder(tokenNode.getIdentifier());
+            sb.append(DELIM).append(key);
+
+            String token = sb.toString();
+            // add key property
+            tokenNode.setProperty(TOKEN_ATTRIBUTE_KEY, getDigestedKey(key));
+
+
+    public static Node getTokenNode(TokenCredentials credentials, Session session) throws RepositoryException {
+        return getTokenNode(credentials.getToken(), session);
+    }
+
+    private static Node getTokenNode(String token, Session session) throws RepositoryException {
+        int pos = token.indexOf(DELIM);
+        String id = (pos == -1) ? token : token.substring(0, pos);
+        return session.getNodeByIdentifier(id);
+    }
+
+    private static String generateKey(int size) {
+        SecureRandom random = new SecureRandom();
+        byte key[] = new byte[size];
+        random.nextBytes(key);
+
+        StringBuffer res = new StringBuffer(key.length * 2);
+        for (byte b : key) {
+            res.append(Text.hexTable[(b >> 4) & 15]);
+            res.append(Text.hexTable[b & 15]);
+        }
+        return res.toString();
+    }
+
+    private static String getDigestedKey(TokenCredentials tc) throws RepositoryException {
+        String tk = tc.getToken();
+        int pos = tk.indexOf(DELIM);
+        if (pos > -1) {
+            return getDigestedKey(tk.substring(pos+1));
+        }     
+        return null;
+    }
+
+    private static String getDigestedKey(String key) throws RepositoryException {
+        try {
+            StringBuilder sb = new StringBuilder();
+            sb.append("{").append(SecurityConstants.DEFAULT_DIGEST).append("}");
+            sb.append(Text.digest(SecurityConstants.DEFAULT_DIGEST, key, "UTF-8"));
+            return sb.toString();
+        } catch (NoSuchAlgorithmException e) {
+            throw new RepositoryException("Failed to generate login token.");
+        } catch (UnsupportedEncodingException e) {
+            throw new RepositoryException("Failed to generate login token.");
+        }
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS27 INS42 INS13 INS42 INS42 INS60 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS41 INS42 INS39 INS42 INS60 INS60 INS21 INS60 INS70 INS41 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS42 INS54 INS42 INS45 INS43 INS59 INS7 INS42 INS42 INS32 INS42 INS42 INS39 INS59 INS43 INS59 INS32 INS43 INS59 INS39 INS59 INS32 INS43 INS59 INS44 INS42 INS8 INS32 INS42 INS43 INS59 INS39 INS59 INS27 INS8 INS33 INS42 INS8 INS12 INS12 INS42 INS42 INS33 INS42 INS42 INS25 INS60 INS21 INS60 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS85 INS3 INS42 INS42 INS42 INS42 INS42 INS14 INS39 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS38 INS41 INS60 INS21 INS21 INS41 INS44 INS8 INS44 INS8 INS27 INS8 MOV43 INS59 INS43 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS32 INS43 INS5 INS42 INS43 INS27 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS43 INS59 INS32 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS27 INS38 INS41 INS42 INS32 INS42 UPD42 INS14 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS34 INS42 INS42 INS39 INS85 INS42 INS40 INS34 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS14 UPD42 INS42 INS25 INS42 INS33 INS32 INS9 INS42 INS34 INS43 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS40 INS27 INS40 INS27 INS42 INS42 INS27 INS43 INS32 INS42 INS40 INS42 INS42 INS40 INS42 INS45 INS43 INS45 INS43 INS45 INS32 INS8 MOV25 INS42 INS42 INS32 INS42 INS34 INS36 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS27 INS7 INS42 INS34 INS42 INS32 INS42 INS42 DEL42