- some minor nodetype enhancements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@377806 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import java.util.HashSet;
+
-        private final TreeSet set;
+        private final QName[] names;
+
+        /**
+         * the weight of this key
+         */
-
-            set = new TreeSet();
-            for (int i = 0; i < ntNames.length; i++) {
-                // add name to this sorted set
-                set.add(ntNames[i]);
-            }
+            names = new QName[ntNames.length];
+            System.arraycopy(ntNames, 0, names, 0, names.length);
+            Arrays.sort(names);
-            this.weight = weight;
-            set = new TreeSet(ntNames);
+            this((QName[]) ntNames.toArray(new QName[ntNames.size()]), weight);
-        String getKey() {
-            return set.toString();
+        Object getKey() {
+            return names;
-         * @return
+         * @return the weight of this key
-            return set.size();
-        }
-
-        Iterator iterator() {
-            return Collections.unmodifiableSortedSet(set).iterator();
-        }
-
-        Set getSet() {
-            return Collections.unmodifiableSortedSet(set);
+            return names.length;
-            return (QName[]) set.toArray(new QName[set.size()]);
+            return names;
-            return set.containsAll(otherKey.getSet());
+            Set tmp = new HashSet(Arrays.asList(names));
+            for (int i=0; i<otherKey.names.length; i++) {
+                if (!tmp.contains(otherKey.names[i])) {
+                    return false;
+                }
+            }
+            return true;
-            Set tmp = (Set) set.clone();
-            tmp.removeAll(otherKey.getSet());
+            Set tmp = new HashSet(Arrays.asList(names));
+            tmp.removeAll(Arrays.asList(otherKey.names));
-         * @return
+         * @return the result of the comparison
-            if (getWeight() > other.getWeight()) {
+            if (weight > other.weight) {
-            } else if (getWeight() < other.getWeight()) {
+            } else if (weight < other.weight) {
-            return getKey().compareTo(other.getKey());
+            if (Arrays.equals(names, other.names)) {
+                return 0;
+            } else {
+                return -1;
+            }
-            Iterator i = set.iterator();
-            while (i.hasNext()) {
+            for (int i=0; i<names.length; i++) {
-                Object obj = i.next();
-                if (obj != null) {
-                    h += obj.hashCode();
-                }
+                h += names[i].hashCode();
-                return set.equals(other.set);
+                return Arrays.equals(names, other.names);
-            return set.toString() + " (" + weight + ")";
+            return names.toString() + " (" + weight + ")";

INS26 INS26 INS40 INS40 MOV31 INS31 INS31 INS5 INS29 MOV29 MOV42 MOV44 MOV44 INS8 MOV29 UPD42 MOV44 MOV44 UPD43 MOV5 INS42 INS39 INS42 MOV44 INS8 INS43 INS85 UPD42 INS65 MOV21 MOV21 MOV21 MOV21 INS17 UPD42 INS60 INS24 INS41 INS25 INS24 UPD42 MOV42 INS66 INS32 MOV11 INS42 INS42 INS66 INS40 INS42 MOV43 INS59 MOV58 INS27 MOV37 INS8 INS9 MOV43 INS66 INS32 INS8 INS8 INS58 INS27 INS37 INS8 UPD42 INS3 UPD42 UPD42 INS42 INS34 INS42 INS34 INS40 INS42 INS42 INS42 MOV5 INS42 INS14 INS42 INS40 INS25 INS14 INS42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS41 INS41 INS39 INS59 INS42 INS40 INS42 MOV21 MOV21 INS5 INS40 UPD42 INS43 INS32 INS38 INS8 INS43 INS32 UPD42 UPD42 INS40 INS42 INS40 INS34 INS38 MOV42 INS34 UPD42 INS43 INS85 MOV5 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS41 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS34 UPD42 INS42 UPD40 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS2 INS9 INS2 INS40 INS42 INS42 INS42 DEL43 DEL43 DEL14 DEL42 DEL42 DEL2 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL42 DEL40 DEL27 DEL8 DEL24 DEL8 DEL31 DEL41 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL32 DEL11 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL41 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL61