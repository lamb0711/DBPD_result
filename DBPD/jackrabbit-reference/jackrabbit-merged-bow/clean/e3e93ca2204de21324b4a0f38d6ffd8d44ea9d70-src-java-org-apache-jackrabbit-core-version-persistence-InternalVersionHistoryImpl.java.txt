- adding indexing of nodetype 
- fixing indexing of versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159669 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ReferentialIntegrityException;
-    public void removeVersion(QName versionName) throws VersionException {
+    public void removeVersion(QName versionName) throws RepositoryException {
-            throw new VersionException("Unable to remove version. At least once referenced.");
+            throw new ReferentialIntegrityException("Unable to remove version. At least once referenced.");
-                notifyModifed();
-    public InternalVersion addVersionLabel(QName versionName, QName label, boolean move)
+    public InternalVersion setVersionLabel(QName versionName, QName label, boolean move)
-        InternalVersion version = getVersion(versionName);
-        if (version == null) {
+        InternalVersion version = versionName == null ? null : getVersion(versionName);
+        if (versionName !=null && version == null) {
-
-        if (version.equals(prev)) {
-            // ignore
-            return version;
-        } else if (prev != null && !move) {
-            // already defined elsewhere, throw
-            throw new VersionException("Version label " + label + " already defined for version " + prev.getName());
-        } else if (prev != null) {
-            // if already defined, but move, remove old label first
-            removeVersionLabel(label);
-        }
-        labelCache.put(label, version);
-        ((InternalVersionImpl) version).internalAddLabel(label);
-        UpdatableItemStateManager stateMgr = getVersionManager().getItemStateMgr();
-        boolean succeeded = false;
-        try {
-            stateMgr.edit();
-            PersistentNode lNode = labelNode.addNode(label, NT_UNSTRUCTURED, null);
-            lNode.setPropertyValue(NativePVM.PROPNAME_NAME, InternalValue.create(label));
-            lNode.setPropertyValue(NativePVM.PROPNAME_VERSION, InternalValue.create(version.getId()));
-            labelNode.store();
-
-            stateMgr.update();
-            succeeded = true;
-        } catch (ItemStateException e) {
-            throw new VersionException("Error while storing modifications", e);
-        } catch (RepositoryException e) {
-            throw new VersionException("Error while storing modifications", e);
-        } finally {
-            if (!succeeded) {
-                // update operation failed, cancel all modifications
-                stateMgr.cancel();
+        if (prev == null) {
+            if (version == null) {
+                return null;
+            }
+        } else {
+            if (prev.equals(version)) {
+                return version;
+            } else if (!move) {
+                // already defined elsewhere, throw
+                throw new VersionException("Version label " + label + " already defined for version " + prev.getName());
-        notifyModifed();
+
+        // update persistence
+        UpdatableItemStateManager stateMgr = getVersionManager().getItemStateMgr();
+        try {
+            stateMgr.edit();
+
+            if (prev != null) {
+                labelNode.removeNode(label);
+            }
+            if (version != null) {
+                PersistentNode lNode = labelNode.addNode(label, NT_UNSTRUCTURED, null);
+                lNode.setPropertyValue(NativePVM.PROPNAME_NAME, InternalValue.create(label));
+                lNode.setPropertyValue(NativePVM.PROPNAME_VERSION, InternalValue.create(version.getId()));
+            }
+            labelNode.store();
+            stateMgr.update();
+        } catch (ItemStateException e) {
+            stateMgr.cancel();
+            throw new VersionException("Error while storing modifications", e);
+        } catch (RepositoryException e) {
+            stateMgr.cancel();
+            throw new VersionException("Error while storing modifications", e);
+        }
+
+        // update internal structures
+        if (prev != null) {
+            prev.internalRemoveLabel(label);
+            labelCache.remove(label);
+        }
+        if (version != null) {
+            labelCache.put(label, version);
+            ((InternalVersionImpl) version).internalAddLabel(label);
+        }
-     * {@inheritDoc}
-     */
-    public InternalVersion removeVersionLabel(QName label) throws VersionException {
-
-
-        InternalVersionImpl v = (InternalVersionImpl) labelCache.remove(label);
-        if (v == null) {
-            throw new VersionException("Version label " + label + " is not in version history.");
-        }
-        v.internalRemoveLabel(label);
-        UpdatableItemStateManager stateMgr = getVersionManager().getItemStateMgr();
-        boolean succeeded = false;
-        try {
-            stateMgr.edit();
-            labelNode.removeNode(label);
-            labelNode.store();
-            stateMgr.update();
-            succeeded = true;
-        } catch (ItemStateException e) {
-            throw new VersionException("Unable to store modifications", e);
-        } catch (RepositoryException e) {
-            throw new VersionException("Unable to store modifications", e);
-        } finally {
-            if (!succeeded) {
-                // update operation failed, cancel all modifications
-                stateMgr.cancel();
-            }
-        }
-        notifyModifed();
-        return v;
-    }
-
-    /**
-        pNode.addNode(NativePVM.NODENAME_VERSION_LABELS, NT_UNSTRUCTURED, null);
+        pNode.addNode(NativePVM.NODENAME_VERSION_LABELS, NativePVM.NT_REP_VERSION_LABELS, null);

INS26 INS40 UPD43 UPD42 UPD42 INS25 INS25 INS25 INS27 INS27 INS8 INS8 MOV27 INS8 INS27 INS8 INS16 INS27 INS27 INS42 INS33 INS25 MOV25 INS25 INS25 INS21 MOV21 INS42 INS33 MOV21 MOV21 INS40 INS27 INS33 MOV32 INS42 INS33 INS42 INS33 MOV27 INS8 MOV27 INS8 INS27 INS8 INS21 INS21 INS32 MOV32 UPD43 INS42 INS33 INS41 UPD42 UPD42 MOV38 MOV21 INS42 INS33 MOV60 MOV21 MOV21 INS32 INS32 INS42 INS42 INS42 UPD42 INS33 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL21 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL42 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42