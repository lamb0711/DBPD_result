JCR-3369: Garbage collector improvements
- applying patch from Mete Atamel

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1356612 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.SessionImpl;
-    private static final Logger LOG = LoggerFactory.getLogger(GarbageCollector.class);
+    static final Logger LOG = LoggerFactory.getLogger(GarbageCollector.class);
-    private final Session[] sessionList;
+    private final SessionImpl[] sessionList;
+    private volatile RepositoryException observationException;
+
-            Session[] sessionList) {
+            SessionImpl[] sessionList) {
-            for (Session s : sessionList) {
+            for (SessionImpl s : sessionList) {
-    private void scanNodes(Session session) throws RepositoryException {
+    private void scanNodes(SessionImpl session) throws RepositoryException {
-        // add a listener to get 'new' nodes
-        // actually, new nodes are not the problem, but moved nodes
-        listeners.add(new Listener(session));
+        // add a listener to get 'moved' nodes
+        Session clonedSession = session.createSession(session.getWorkspace().getName());
+        listeners.add(new Listener(this, clonedSession));
-                try {
-                    listener.stop();
-                } catch (Exception e) {
-                    throw new RepositoryException(e);
-                }
+                listener.stop();
+        checkObservationException();
+        checkObservationException();
+    private void checkObservationException() throws RepositoryException {
+        RepositoryException e = observationException;
+        if (e != null) {
+            observationException = null;
+            String message = "Exception while processing concurrent events";
+            LOG.warn(message, e);
+            e = new RepositoryException(message, e);
+        }
+    }
+
+    void onObservationException(Exception e) {
+        if (e instanceof RepositoryException) {
+            observationException = (RepositoryException) e;
+        } else {
+            observationException = new RepositoryException(e);
+        }
+    }
+
+        private final GarbageCollector gc;
-
-        private Exception lastException;
-
-        Listener(Session session)
+        Listener(GarbageCollector gc, Session session)
+            this.gc = gc;
-            manager.addEventListener(this, Event.NODE_ADDED, "/", true, null,
+            manager.addEventListener(this, Event.NODE_MOVED, "/", true, null,
-        void stop() throws Exception {
-            if (lastException != null) {
-                throw lastException;
-            }
+        void stop() throws RepositoryException {
-                    lastException = e;
+                    gc.onObservationException(e);
+                    try {
+                        stop();
+                    } catch (RepositoryException e2) {
+                        LOG.warn("Exception removing the observation listener - ignored", e2);
+                    }

INS26 INS40 INS23 INS31 INS31 MOV23 UPD5 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS43 INS8 INS39 INS42 MOV44 INS8 UPD43 INS42 INS42 UPD5 UPD43 INS60 INS21 INS21 INS42 INS60 INS25 INS25 INS83 UPD43 INS44 UPD43 UPD42 UPD43 UPD42 MOV43 INS59 INS32 INS32 INS43 INS59 INS27 INS8 INS62 INS8 MOV8 UPD42 UPD42 INS43 INS42 INS21 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS60 INS21 INS21 INS42 INS43 INS21 INS21 INS42 INS7 INS42 INS42 INS32 INS52 UPD42 MOV8 INS7 INS43 INS59 INS32 INS7 INS42 INS7 INS7 INS22 INS42 UPD40 INS43 INS32 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS11 INS42 MOV14 INS52 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS54 INS32 INS8 INS12 INS42 INS42 INS42 INS21 INS44 INS8 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS42 DEL83 DEL12 DEL54 DEL8 DEL53 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL25 DEL42 DEL42 DEL7