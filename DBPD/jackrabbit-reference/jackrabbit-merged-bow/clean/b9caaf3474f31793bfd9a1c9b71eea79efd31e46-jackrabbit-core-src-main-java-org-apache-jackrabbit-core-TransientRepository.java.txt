JCR-2119: Method to create default RepositoryConfig from just the repository directory

Use the new RepositoryConfig.install() method in TransientRepository. Add new TransientRepository constructor signatures for convenience.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@776313 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FileOutputStream;
-import java.io.OutputStream;
-import org.apache.commons.io.IOUtils;
-     * Resource path of the default repository configuration file.
-     */
-    private static final String DEFAULT_REPOSITORY_XML = "repository.xml";
-
-    /**
-         * Creates and intializes a repository instance. The returned instance
+         * Creates and initializes a repository instance. The returned instance
-     * @throws IOException if the static repository descriptors cannot be loaded
-    public TransientRepository(RepositoryFactory factory) throws IOException {
+    public TransientRepository(RepositoryFactory factory) {
-        InputStream in =
-            RepositoryImpl.class.getResourceAsStream("repository.properties");
-            descriptors.load(in);
-        } finally {
-            in.close();
+            InputStream in = RepositoryImpl.class.getResourceAsStream(
+                    "repository.properties");
+            try {
+                descriptors.load(in);
+            } finally {
+                in.close();
+            }
+        } catch (IOException e) {
+            logger.warn("Unable to load static repository descriptors", e);
+     * repository instances.
+     *
+     * @see #TransientRepository(File, File)
+     * @param config repository configuration file
+     * @param home repository home directory
+     * @throws IOException if the static repository descriptors cannot be loaded
+     */
+    public TransientRepository(String config, String home) {
+        this(new File(config), new File(home));
+    }
+
+    /**
+     * Creates a transient repository proxy based on the given repository
+     * home directory and the repository configuration file "repository.xml"
+     * contained in that directory.
+     *
+     * @since Apache Jackrabbit 1.6
+     * @param dir repository home directory
+     */
+    public TransientRepository(File dir) {
+        this(new File(dir, "repository.xml"), dir);
+    }
+
+    /**
+     * Creates a transient repository proxy that will use the given repository
+     * configuration file and home directory paths to initialize the underlying
-     * @param config repository configuration file
-     * @param home repository home directory
-     * @throws IOException if the static repository descriptors cannot be loaded
+     * @since Apache Jackrabbit 1.6
+     * @param xml repository configuration file
+     * @param dir repository home directory
-    public TransientRepository(final String config, final String home)
-            throws IOException {
+    public TransientRepository(final File xml, final File dir) {
-                    // Make sure that the repository configuration file exists
-                    File configFile = new File(config);
-                    if (!configFile.exists()) {
-                        logger.info("Copying default configuration to " + config);
-                        OutputStream output = new FileOutputStream(configFile);
-                        try {
-                            InputStream input =
-                                TransientRepository.class.getResourceAsStream(
-                                        DEFAULT_REPOSITORY_XML);
-                            try {
-                                IOUtils.copy(input, output);
-                            } finally {
-                               input.close();
-                            }
-                        } finally {
-                            output.close();
-                        }
-                    }
-                    // Make sure that the repository home directory exists
-                    File homeDir = new File(home);
-                    if (!homeDir.exists()) {
-                        logger.info("Creating repository home directory " + home);
-                        homeDir.mkdirs();
-                    }
-                    // Load the configuration and create the repository
-                    RepositoryConfig rc = RepositoryConfig.create(config, home);
-                    return RepositoryImpl.create(rc);
+                    return RepositoryImpl.create(
+                            RepositoryConfig.install(xml, dir));
-                            "Invalid repository configuration: " + config, e);
+                            "Invalid repository configuration file: " + xml, e);

INS31 INS31 INS29 INS83 INS42 MOV44 MOV44 INS8 INS29 INS83 INS42 INS44 INS8 INS44 INS44 INS54 MOV65 INS65 MOV65 MOV65 MOV65 UPD42 UPD42 INS17 INS65 INS65 INS65 MOV43 INS42 INS17 INS65 INS65 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS8 INS12 INS66 UPD66 INS66 INS68 MOV14 MOV14 INS66 INS66 INS66 INS66 INS42 INS66 INS14 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 MOV42 INS42 UPD66 MOV60 MOV54 INS44 INS8 INS42 INS69 INS69 MOV43 INS42 INS45 MOV43 INS42 INS21 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS41 INS32 INS42 UPD42 MOV42 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD45 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL66 DEL65 DEL83 DEL83 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41