work in progress

- event processing upon saving transient modifications
- extend ItemState.refresh: add Event and ev. ChangeLog as param
- EventImpl: parentId missing
- remove ItemStateListener
- all state changes are covered by ItemStateLifeCycleListener.statusChanged(ItemState, int)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@453514 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Event;
+import org.apache.jackrabbit.spi.PropertyId;
-    protected synchronized void copyFrom(ItemState state) {
-        synchronized (state) {
-            NodeState nodeState = (NodeState) state;
-            name = nodeState.name;
-            uuid = nodeState.uuid;
-            //parent = nodeState.parent; // TODO: parent from wrong ism layer
-            nodeTypeName = nodeState.nodeTypeName;
-            definition = nodeState.definition;
+    protected synchronized void pull() {
+        if (overlayedState != null) {
+            synchronized (overlayedState) {
+                NodeState nodeState = (NodeState) overlayedState;
+                name = nodeState.name;
+                uuid = nodeState.uuid;
+                nodeTypeName = nodeState.nodeTypeName;
+                definition = nodeState.definition;
-            init(nodeState.getMixinTypeNames(), nodeState.getChildNodeEntries(), nodeState.getPropertyNames(), nodeState.getNodeReferences());
+                init(nodeState.getMixinTypeNames(), nodeState.getChildNodeEntries(), nodeState.getPropertyNames(), nodeState.getNodeReferences());
+            }
+        }
+    }
+
+    protected synchronized void refresh(Event event, ChangeLog changeLog) {
+        NodeId id = getNodeId();
+        switch (event.getType()) {
+            case Event.NODE_ADDED:
+            case Event.PROPERTY_ADDED:
+                if (id.equals(event.getParentId())) {
+                    ItemId evId = event.getItemId();
+                    ItemState newState = null;
+
+                    if (evId.denotesNode()) {
+                        QName name = event.getQPath().getNameElement().getName();
+                        String uuid = (((NodeId)evId).getRelativePath() != null) ? null : ((NodeId)evId).getUUID();
+                        ChildNodeEntry cne = childNodeEntries.add(name, uuid);
+                        try {
+                            newState = cne.getNodeState();
+                        } catch (ItemStateException e) {
+                            log.error("Internal error", e);
+                        }
+                    } else {
+                        PropertyId pId = (PropertyId) event.getItemId();
+                        PropertyReference re = new PropertyReference(this, pId.getQName(), isf, idFactory);
+                        properties.put(pId.getQName(), re);
+                        try {
+                            newState = re.getPropertyState();
+                        } catch (ItemStateException e) {
+                            log.error("Internal error", e);
+                        }
+                    }
+
+                    // connect the transient state to this state and make
+                    // sure its data are updated
+                    if (newState != null && changeLog != null) {
+                        for (Iterator it = changeLog.addedStates(); it.hasNext();) {
+                            ItemState added = (ItemState) it.next();
+                            if (added.getId().equals(evId)) {
+                                added.connect(newState);
+                                added.pull();
+                                break;
+                            }
+                        }
+                    }
+                } else {
+                    // ILLEGAL
+                    throw new IllegalArgumentException("Illegal event type " + event.getType() + " for NodeState.");
+                }
+                break;
+
+            case Event.NODE_REMOVED:
+                if (id.equals(event.getParentId())) {
+                    QName qName = event.getQPath().getNameElement().getName();
+                    int index = event.getQPath().getNameElement().getNormalizedIndex();
+                    childNodeEntries.remove(qName, index);
+                    setStatus(STATUS_MODIFIED);
+                } else if (id.equals(event.getItemId())) {
+                    setStatus(STATUS_REMOVED);
+                } else {
+                    // ILLEGAL
+                    throw new IllegalArgumentException("Illegal event type " + event.getType() + " for NodeState.");
+                }
+                break;
+
+            case Event.PROPERTY_REMOVED:
+                if (id.equals(event.getParentId())) {
+                    PropertyId pId = (PropertyId) event.getItemId();
+                    properties.remove(pId.getQName());
+                    setStatus(STATUS_MODIFIED);
+                } else {
+                    // ILLEGAL
+                    throw new IllegalArgumentException("Illegal event type " + event.getType() + " for NodeState.");
+                }
+                break;
+
+            case Event.PROPERTY_CHANGED:
+            default:
+                // ILLEGAL
+                throw new IllegalArgumentException("Illegal event type " + event.getType() + " for NodeState.");
-     * @see #addPropertyName
-     * @see #addPropertyName

INS26 INS26 INS40 INS40 INS31 UPD42 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS25 INS43 INS42 INS43 INS42 INS60 INS50 INS27 MOV8 INS42 INS42 INS43 INS59 INS32 INS49 INS49 INS25 INS10 INS49 INS25 INS10 INS49 INS25 INS10 INS49 INS49 INS53 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS40 INS40 INS32 INS8 INS8 INS40 INS32 INS8 INS25 INS40 INS32 INS8 INS8 INS40 INS14 UPD42 INS42 INS42 INS42 INS32 INS60 INS60 INS25 INS25 INS53 INS42 INS42 INS32 INS60 INS60 INS21 INS21 INS32 INS8 INS8 INS42 INS42 INS32 INS60 INS21 INS21 INS53 INS43 INS27 INS42 INS42 INS43 INS59 MOV43 INS59 INS32 INS8 INS8 INS27 INS8 INS14 INS42 INS42 INS43 INS59 INS39 INS59 INS32 INS32 INS42 INS42 INS32 INS21 INS53 INS42 INS42 INS43 INS59 INS32 INS32 INS14 INS42 INS45 INS32 INS45 MOV43 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS60 INS60 INS60 INS54 INS60 INS60 INS21 INS54 INS27 INS27 INS24 INS43 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS42 INS33 INS42 INS33 INS58 INS32 INS8 INS42 INS45 INS32 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS43 INS32 INS42 INS42 INS42 INS45 INS32 INS45 MOV43 UPD42 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS21 INS44 INS8 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS36 INS33 INS32 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS43 INS32 INS43 INS52 INS32 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS36 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS32 INS42 INS42 INS21 INS21 INS10 INS42 INS42 INS32 INS33 INS11 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS32 INS42 INS42 INS32 INS32 INS36 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS43 INS42 INS42 DEL42 DEL44 DEL42 DEL67 DEL65 DEL42 DEL67 DEL65