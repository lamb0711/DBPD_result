JCR-2852: Support multi-selector OR constraints in join queries

Patch by Alex Parvulescu

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1080186 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.List;
- * Returns a mapped constraint that only refers to the given set of
- * selectors. The returned constraint is guaranteed to match an as small
- * as possible superset of the node tuples matched by the given original
- * constraints.
+ * Returns a mapped constraint that only refers to the given set of selectors.
+ * The returned constraint is guaranteed to match an as small as possible
+ * superset of the node tuples matched by the given original constraints.
- * @param constraint original constraint
- * @param selectors target selectors
+ * @param constraint
+ *            original constraint
+ * @param selectors
+ *            target selectors
- * @throws RepositoryException if the constraint mapping fails
+ * @throws RepositoryException
+ *             if the constraint mapping fails
-    private final List<Constraint> leftConstraints =
-        new ArrayList<Constraint>();
+    private final ConstraintSplitInfo constraintSplitInfo;
-    private final List<Constraint> rightConstraints =
-        new ArrayList<Constraint>();
-
-    public ConstraintSplitter(
-            Constraint constraint, QueryObjectModelFactory factory,
-            Set<String> leftSelectors, Set<String> rightSelectors)
-            throws RepositoryException {
+    public ConstraintSplitter(Constraint constraint,
+            QueryObjectModelFactory factory, Set<String> leftSelectors,
+            Set<String> rightSelectors) throws RepositoryException {
+        constraintSplitInfo = new ConstraintSplitInfo(this.factory);
-    /**
-     * @return the left constraint
-     */
-    public Constraint getLeftConstraint() throws RepositoryException {
-        return Constraints.and(factory, leftConstraints);
-    }
-
-    /**
-     * @return the right constraint
-     */
-    public Constraint getRightConstraint() throws RepositoryException {
-        return Constraints.and(factory, rightConstraints);
-    }
-
+        } else if (constraint instanceof Or) {
+            if (isReferencingBothSides(getSelectorNames(constraint))) {
+                constraintSplitInfo.split((Or) constraint);
+            } else {
+                splitBySelectors(constraint, getSelectorNames(constraint));
+            }
+    private boolean isReferencingBothSides(Set<String> selectors) {
+        return !leftSelectors.containsAll(selectors)
+                && !rightSelectors.containsAll(selectors);
+    }
+
-            split(factory.or(
-                    factory.not(and.getConstraint1()),
+            split(factory.or(factory.not(and.getConstraint1()),
-            split(factory.and(
-                    factory.not(or.getConstraint1()),
+            split(factory.and(factory.not(or.getConstraint1()),
-            leftConstraints.add(constraint);
+            constraintSplitInfo.addLeftConstraint(constraint);
-            rightConstraints.add(constraint);
+            constraintSplitInfo.addRightConstraint(constraint);
-                    + " both sides of a join: " + constraint);
+                            + " both sides of a join: " + constraint);
-     * @param constraint constraint
+     * @param constraint
+     *            constraint
-     *         if the constraint type is unknown
+     *             if the constraint type is unknown
-     * Returns the combined set of selector names referenced by the given
-     * two constraint.
+     * Returns the combined set of selector names referenced by the given two
+     * constraint.
-     * @param a first constraint
-     * @param b second constraint
+     * @param a
+     *            first constraint
+     * @param b
+     *            second constraint
-     *         if the constraint types are unknown
+     *             if the constraint types are unknown
-     * @param operand dynamic operand
+     * @param operand
+     *            dynamic operand
-     *         if the operand type is unknown
+     *             if the operand type is unknown
+    public ConstraintSplitInfo getConstraintSplitInfo() {
+        return constraintSplitInfo;
+    }
+

MOV31 INS31 INS43 INS83 INS39 INS42 INS44 INS8 UPD43 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 MOV42 INS42 INS21 INS74 INS42 INS41 UPD42 INS7 UPD43 MOV43 UPD43 MOV43 INS27 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS14 INS25 UPD42 UPD42 INS38 INS38 INS43 INS22 INS62 INS8 MOV8 INS32 INS32 INS42 INS52 INS42 INS42 INS43 INS25 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS32 INS8 INS8 UPD42 UPD42 INS42 INS32 INS21 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL83 DEL83 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32