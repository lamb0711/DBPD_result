div

- get rid of rootId stored with ISM, HierarchyManagers etc.
- remove corresponding method with WorkspaceManager and WorkspaceImpl

jcr2spi/state/ItemState

- move parent field from Node/PropertyState to ItemState
- move idFactory field from NodeState to ItemState
- let PropertyState build its id instead of calling parentstate method.
- minor reordering of status related methods
- remove modCount and its usage

jcr2spi/state/ItemStateManager

- add method getRootNode()

jcr2spi/security/AccessManager

- replace ItemId by ItemState

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431352 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.IdFactory;
-     * The parent state
-     */
-    private NodeState parent;
-
-    /**
-    public PropertyState(PropertyState overlayedState, NodeState parent, int initialStatus,
-                         boolean isTransient) {
-        super(overlayedState, initialStatus, isTransient);
+    protected PropertyState(PropertyState overlayedState, NodeState parent, int initialStatus,
+                         boolean isTransient, IdFactory idFactory) {
+        super(overlayedState, parent, initialStatus, isTransient, idFactory);
-        this.parent = parent;
-    public PropertyState(QName name, NodeState parent, int initialStatus, boolean isTransient) {
-        super(initialStatus, isTransient);
+    protected PropertyState(QName name, NodeState parent, int initialStatus,
+                            boolean isTransient, IdFactory idFactory) {
+        super(parent, initialStatus, isTransient, idFactory);
-        this.parent = parent;
-    //----------------------< public READ methods and package private WRITE >---
+    //--------------------< public READ methods and package private Setters >---
-     * Determines if this item state represents a node.
+     * Always returns false.
-
+    
-     * 
+     *
-        return parent.getPropertyId(name);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NodeState getParent() {
-        return parent;
+        return idFactory.createPropertyId(parent.getNodeId(), getQName());
+                if (parentState == null) {
+                    String msg = "Internal error: cannot determine definition for orphaned state.";
+                    log.debug(msg);
+                    throw new RepositoryException(msg);
+                }

INS26 INS40 UPD83 INS44 UPD83 INS44 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD66 INS42 INS42 INS32 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 INS25 INS27 INS8 INS42 INS33 INS60 INS21 INS53 INS43 INS59 INS32 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31