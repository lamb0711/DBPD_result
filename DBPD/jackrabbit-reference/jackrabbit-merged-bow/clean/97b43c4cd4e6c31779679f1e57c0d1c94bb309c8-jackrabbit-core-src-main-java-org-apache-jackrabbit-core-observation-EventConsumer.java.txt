replace deprecated AccessManager.isGranted(ItemId, int) by  AccessManager.canRead(Path)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@651184 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.security.AccessManager;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.PathFactory;
+import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
+    private final PathFactory pathFactory = PathFactoryImpl.getInstance();
+
-                    granted = canRead(targetId);
+                    granted = canRead(state);
+        Set deletedIds = new HashSet();
-            ItemState item = (ItemState) deletedItems.next();
-            // check read permission
-            boolean granted = false;
-            try {
-                granted = canRead(item.getId());
-            } catch (RepositoryException e) {
-                log.warn("Unable to check access rights for item: " + item.getId());
-            }
-            if (!granted) {
-                if (denied == null) {
-                    denied = new HashSet();
+            deletedIds.add(((ItemState) deletedItems.next()).getId());
+        }
+
+        for (Iterator it = events.iterator(); it.hasNext();) {
+            EventState evState = (EventState) it.next();
+            ItemId targetId = evState.getTargetId();
+            if (deletedIds.contains(targetId)) {
+                // check read permission
+                boolean granted = false;
+                try {
+                    granted = canRead(evState);
+                } catch (RepositoryException e) {
+                    log.warn("Unable to check access rights for item: " + targetId);
-                denied.add(item.getId());
+                if (!granted) {
+                    if (denied == null) {
+                        denied = new HashSet();
+                    }
+                    denied.add(targetId);
+                }
-                if (!canRead(targetId)) {
+                if (!canRead(state)) {
-    private boolean canRead(ItemId itemId) throws RepositoryException {
-        return session.getAccessManager().isGranted(itemId, AccessManager.READ);
+    /**
+     * Returns <code>true</code> if the item corresponding to the specified
+     * <code>eventState</code> can be read the the current session.
+     *
+     * @param eventState
+     * @return
+     * @throws RepositoryException
+     */
+    private boolean canRead(EventState eventState) throws RepositoryException {
+        Path targetPath = pathFactory.create(eventState.getParentPath(), eventState.getChildRelPath().getName(), eventState.getChildRelPath().getNormalizedIndex(), true);
+        return session.getAccessManager().canRead(targetPath);

MOV26 INS26 INS26 UPD40 INS40 INS40 INS23 INS83 INS83 INS43 INS59 INS29 INS42 INS42 INS32 INS60 INS61 INS24 INS65 INS65 INS65 INS65 INS43 INS42 INS60 INS42 INS42 INS43 INS59 MOV32 INS8 INS58 INS32 INS8 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS42 INS42 MOV14 INS21 INS43 INS59 INS42 INS42 MOV60 INS60 INS25 INS42 INS42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS32 UPD43 MOV43 INS59 INS32 INS8 INS42 INS42 INS32 INS32 INS32 INS9 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS11 INS42 INS32 INS42 INS42 INS42 MOV60 MOV54 MOV25 INS42 INS42 INS32 INS42 INS32 INS42 INS36 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV11 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 INS42 INS14 INS43 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL8 DEL61 DEL42 DEL40