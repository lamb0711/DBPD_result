simplified and adapted bdb-persistence to latest modifications in core (r329224)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@329242 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
-import java.io.InputStream;
-
-import javax.jcr.PropertyType;
-
-import org.apache.jackrabbit.core.PropertyId;
-import org.apache.jackrabbit.core.nodetype.PropDefId;
-import org.apache.jackrabbit.core.state.PropertyState;
-import org.apache.jackrabbit.core.value.BLOBFileValue;
-import org.apache.jackrabbit.core.value.InternalValue;
-
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.jackrabbit.core.PropertyId;
+import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.state.util.BLOBStore;
+import org.apache.jackrabbit.core.state.util.Serializer;
+    private Log log = LogFactory.getLog(PropertyStateTupleBinding.class);
+
+
+        PropertyState state = new PropertyState(id.getName(), id.getParentUUID(), PropertyState.STATUS_NEW, false);
+
-            PropertyState state = new PropertyState(id.getName(), id.getParentUUID(), PropertyState.STATUS_NEW, false);
-
-            // type
-            int type = in.readInt();
-            state.setType(type);
-            // multiValued
-            boolean multiValued = in.readBoolean();
-            state.setMultiValued(multiValued);
-            // definitionId
-            String s = in.readString();
-            state.setDefinitionId(PropDefId.valueOf(s));
-            // values
-            int count = in.readInt(); // count
-            InternalValue[] values = new InternalValue[count];
-            for (int i = 0; i < count; i++) {
-                InternalValue val;
-                if (type == PropertyType.BINARY) {
-                    s = in.readString(); // value (i.e. blobId)
-                    // special handling required for binary value:
-                    // the value stores the id of the blob resource in the blob store
-                    val = InternalValue.create(blobStore.get(s));
-                } else {
-                    int len = in.readInt(); // lenght of byte[]
-                    byte[] bytes = new byte[len];
-                    in.read(bytes); // byte[]
-                    s = new String(bytes, BerkeleyDBPersistenceManager.ENCODING);
-                    val = InternalValue.valueOf(s, type);
-                }
-                values[i] = val;
-            }
-            state.setValues(values);
-
-            return state;
+            Serializer.deserialize(state, in, blobStore);
-            throw new RuntimeException(e);
+            // since the TupleInput methods do not throw any
+            // exceptions the above call should neither...
+            String msg = "error while deserializing property state";
+            log.debug(msg);
+            throw new RuntimeException(msg, e);
+
+        return state;
-            PropertyState state = (PropertyState) o;
-
-            // type
-            out.writeInt(state.getType());
-            // multiValued
-            out.writeBoolean(state.isMultiValued());
-            // definitionId
-            out.writeString(state.getDefinitionId().toString());
-            // values
-            InternalValue[] values = state.getValues();
-            out.writeInt(values.length); // count
-            for (int i = 0; i < values.length; i++) {
-                InternalValue val = values[i];
-                if (state.getType() == PropertyType.BINARY) {
-                    // special handling required for binary value:
-                    // spool binary value to file in blob store
-                    BLOBFileValue blobVal = (BLOBFileValue) val.internalValue();
-                    InputStream in = blobVal.getStream();
-                    String blobId;
-                    try {
-                        blobId = blobStore.put((PropertyId) state.getId(), i, in, blobVal.getLength());
-                    } finally {
-                        try {
-                            in.close();
-                        } catch (IOException e) {
-                            // ignore
-                        }
-                    }
-                    // store id of blob as property value
-                    out.writeString(blobId); // value
-                    // replace value instance with value
-                    // backed by resource in blob store and delete temp file
-                    values[i] = InternalValue.create(blobStore.get(blobId));
-                    blobVal.discard();
-                    blobVal = null; // gc hint
-                } else {
-                    byte[] bytes = val.toString().getBytes(BerkeleyDBPersistenceManager.ENCODING);
-                    out.writeInt(bytes.length); // lenght of byte[]
-                    out.write(bytes); // byte[]
-                }
-            }
+            Serializer.serialize((PropertyState) o, out, blobStore);
-            throw new RuntimeException(e);
+            // since the TupleOutput methods do not throw any
+            // exceptions the above call should neither...
+            String msg = "error while serializing property state";
+            log.debug(msg);
+            throw new RuntimeException(msg, e);
-

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS83 INS43 INS59 INS83 MOV43 INS42 MOV44 INS8 INS42 INS42 INS32 MOV60 INS54 MOV41 UPD42 MOV42 UPD42 MOV42 INS57 INS8 MOV12 INS8 MOV12 INS43 MOV21 MOV21 INS42 INS32 INS60 INS21 INS32 INS60 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS32 UPD42 MOV42 UPD42 MOV42 MOV11 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL32 DEL32 DEL7 DEL83 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL7 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL54 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8