JCR-1104 - JSR 283 support

- improved Node#setPrimaryType implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@652800 13f79535-47bb-0310-9956-ffa450edef68

-    /** same as ((NodeState) state).getNodeTypeName(); cached to avoid type casts */
-    protected final Name primaryTypeName;
-
-    /** the definition of this node */
-    protected NodeDefinition definition;
-
-        if (ntReg.isRegistered(state.getNodeTypeName())) {
-            primaryTypeName = state.getNodeTypeName();
-        } else {
+        if (!ntReg.isRegistered(state.getNodeTypeName())) {
-            primaryTypeName = NameConstants.NT_UNSTRUCTURED;
+            data.getNodeState().setNodeTypeName(NameConstants.NT_UNSTRUCTURED);
-                genValues = new InternalValue[]{InternalValue.create(primaryTypeName)};
+                genValues = new InternalValue[]{InternalValue.create(thisState.getNodeTypeName())};
-        types[types.length - 1] = primaryTypeName;
+        types[types.length - 1] = data.getNodeState().getNodeTypeName();
+            // primary type
+            persistentState.setNodeTypeName(transientState.getNodeTypeName());
+        thisState.setNodeTypeName(transientState.getNodeTypeName());
+        final Name primaryTypeName = data.getNodeState().getNodeTypeName();
-            set.add(primaryTypeName);
+            set.add(state.getNodeTypeName());
-        if (ntName.equals(primaryTypeName)) {
+        if (ntName.equals(data.getNodeState().getNodeTypeName())) {
-        return session.getNodeTypeManager().getNodeType(primaryTypeName);
+        return session.getNodeTypeManager().getNodeType(
+                data.getNodeState().getNodeTypeName());
+
+        final Name primaryTypeName = data.getNodeState().getNodeTypeName();
+
-        if (!freeze.getFrozenPrimaryType().equals(primaryTypeName)) {
+        if (!freeze.getFrozenPrimaryType().equals(data.getNodeState().getNodeTypeName())) {
-        if (ntName.equals(primaryTypeName)) {
+        if (ntName.equals(state.getNodeTypeName())) {
-            entOld = ntReg.getEffectiveNodeType(primaryTypeName);
+            entOld = ntReg.getEffectiveNodeType(state.getNodeTypeName());
-
-        // build change set: removed/added child items
-        Set removedDefs = new HashSet(oldDefs);
-        removedDefs.removeAll(newDefs);
-
+        // added child item definitions
-        // walk through properties and child nodes and remove those that
-        // are not included in the new node type
-        if (!removedDefs.isEmpty()) {
-            // use temp set to avoid ConcurrentModificationException
-            HashSet set = new HashSet(thisState.getPropertyNames());
-            for (Iterator iter = set.iterator(); iter.hasNext();) {
-                Name propName = (Name) iter.next();
-                try {
-                    PropertyState propState =
-                            (PropertyState) stateMgr.getItemState(
-                                    new PropertyId(thisState.getNodeId(), propName));
-                    if (removedDefs.contains(ntReg.getPropDef(propState.getDefinitionId()))) {
+        // walk through properties and child nodes and change definition as necessary
+
+        // use temp set to avoid ConcurrentModificationException
+        HashSet set = new HashSet(thisState.getPropertyNames());
+        for (Iterator iter = set.iterator(); iter.hasNext();) {
+            Name propName = (Name) iter.next();
+            try {
+                PropertyState propState =
+                        (PropertyState) stateMgr.getItemState(
+                                new PropertyId(thisState.getNodeId(), propName));
+                if (!newDefs.contains(ntReg.getPropDef(propState.getDefinitionId()))) {
+                    // try to find new applicable definition first and
+                    // redefine property if possible
+
+                    PropertyDefinitionImpl pdi = null;
+                    try {
+                        PropertyImpl prop = (PropertyImpl) itemMgr.getItem(propState.getId());
+                        pdi = getApplicablePropertyDefinition(
+                                propName, propState.getType(),
+                                propState.isMultiValued(), false);
+                        if (pdi.getRequiredType() != PropertyType.UNDEFINED
+                                && pdi.getRequiredType() != propState.getType()) {
+                            // value conversion required
+                            if (propState.isMultiValued()) {
+                                // convert value
+                                Value[] values =
+                                        ValueHelper.convert(
+                                                prop.getValues(),
+                                                pdi.getRequiredType(),
+                                                session.getValueFactory());
+                                // redefine property
+                                prop.onRedefine(pdi.unwrap().getId());
+                                // set converted values
+                                prop.setValue(values);
+                            } else {
+                                // convert value
+                                Value value =
+                                        ValueHelper.convert(
+                                                prop.getValue(),
+                                                pdi.getRequiredType(),
+                                                session.getValueFactory());
+                                // redefine property
+                                prop.onRedefine(pdi.unwrap().getId());
+                                // set converted values
+                                prop.setValue(value);
+                            }
+                        } else {
+                            // redefine property
+                            prop.onRedefine(pdi.unwrap().getId());
+                        }
+                        // update collection of added definitions
+                        addedDefs.remove(pdi.unwrap());
+                    } catch (ValueFormatException vfe) {
+                        // value conversion failed,
+                        // remove it
+                        removeChildProperty(propName);
+                    } catch (ConstraintViolationException cve) {
+                        // no suitable definition found for this property,
+                        // remove it
-                } catch (ItemStateException ise) {
-                    String msg = propName + ": failed to retrieve property state";
-                    log.error(msg, ise);
-                    throw new RepositoryException(msg, ise);
+            } catch (ItemStateException ise) {
+                String msg = propName + ": failed to retrieve property state";
+                log.error(msg, ise);
+                throw new RepositoryException(msg, ise);
-            // use temp array to avoid ConcurrentModificationException
-            ArrayList list = new ArrayList(thisState.getChildNodeEntries());
-            // start from tail to avoid problems with same-name siblings
-            for (int i = list.size() - 1; i >= 0; i--) {
-                NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) list.get(i);
-                try {
-                    NodeState nodeState =
-                            (NodeState) stateMgr.getItemState(entry.getId());
-                    if (removedDefs.contains(ntReg.getNodeDef(nodeState.getDefinitionId()))) {
+        }
+
+        // use temp array to avoid ConcurrentModificationException
+        ArrayList list = new ArrayList(thisState.getChildNodeEntries());
+        // start from tail to avoid problems with same-name siblings
+        for (int i = list.size() - 1; i >= 0; i--) {
+            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) list.get(i);
+            try {
+                NodeState nodeState =
+                        (NodeState) stateMgr.getItemState(entry.getId());
+                if (!newDefs.contains(ntReg.getNodeDef(nodeState.getDefinitionId()))) {
+                    // try to find new applicable definition first and
+                    // redefine node if possible
+
+                    NodeDefinitionImpl ndi = null;
+                    try {
+                        NodeImpl node = (NodeImpl) itemMgr.getItem(nodeState.getId());
+                        ndi = getApplicableChildNodeDefinition(
+                                entry.getName(),
+                                nodeState.getNodeTypeName());
+                        // redefine property
+                        node.onRedefine(ndi.unwrap().getId());
+                        // update collection of added definitions
+                        addedDefs.remove(ndi.unwrap());
+                    } catch (ConstraintViolationException cve) {
+                        // no suitable definition found for this child node,
+                        // remove it
-                } catch (ItemStateException ise) {
-                    String msg = entry.getName() + ": failed to retrieve node state";
-                    log.error(msg, ise);
-                    throw new RepositoryException(msg, ise);
+            } catch (ItemStateException ise) {
+                String msg = entry.getName() + ": failed to retrieve node state";
+                log.error(msg, ise);
+                throw new RepositoryException(msg, ise);
-                    NodeDefinitionImpl nd = ntMgr.getNodeDefinition(((NodeDef) def).getId());
-                    createChildNode(nd.getQName(), nd, (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
+                    NodeDefinitionImpl ndi = ntMgr.getNodeDefinition(((NodeDef) def).getId());
+                    createChildNode(ndi.getQName(), ndi, (NodeTypeImpl) ndi.getDefaultPrimaryType(), null);
-                    PropertyDefinitionImpl pd = ntMgr.getPropertyDefinition(((PropDef) def).getId());
-                    createChildProperty(pd.getQName(), pd.getRequiredType(), pd);
+                    PropertyDefinitionImpl pdi = ntMgr.getPropertyDefinition(((PropDef) def).getId());
+                    createChildProperty(pdi.getQName(), pdi.getRequiredType(), pdi);

INS21 INS60 INS60 MOV60 MOV24 MOV60 MOV24 INS38 INS32 INS83 MOV43 INS59 INS83 INS43 INS59 MOV32 INS32 INS21 INS42 INS42 INS32 INS42 INS32 MOV21 INS32 INS32 INS42 INS42 INS32 INS32 INS54 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS8 MOV12 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 MOV60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS38 INS8 INS38 INS8 INS42 UPD42 MOV42 MOV32 INS60 MOV54 MOV32 INS60 INS54 UPD42 INS43 INS59 INS8 INS12 INS12 UPD42 INS43 INS59 INS8 INS12 INS42 INS42 INS33 INS60 INS21 INS25 INS21 INS44 MOV8 INS44 INS8 INS42 INS42 INS33 INS60 INS21 INS21 INS21 INS44 MOV8 UPD42 UPD42 UPD42 UPD42 INS43 INS59 INS7 INS27 INS8 INS8 INS32 INS43 INS42 INS43 INS42 INS21 INS43 INS59 INS7 INS32 INS32 INS43 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS11 INS42 INS32 INS27 INS27 MOV25 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 INS43 INS32 INS42 INS42 INS32 INS32 INS9 INS32 INS40 INS32 INS32 INS32 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS5 INS59 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL8 DEL42 DEL40 DEL7 DEL42 DEL42 DEL7 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25