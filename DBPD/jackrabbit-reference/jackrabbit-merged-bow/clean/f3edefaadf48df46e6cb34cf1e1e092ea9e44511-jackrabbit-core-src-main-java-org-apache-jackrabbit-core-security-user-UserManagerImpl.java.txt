Improvements for UserManagement implementation:

- move configuration code to UserManagerConfig
- rename public method getGroupMembershipSplitSize to getMemberSplitSize
- add method hasMemberSplitSize and replace usage of getGroupMembershipSplitSize() > 0
- remove old class name from javadoc in NodeCreationTest

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1370326 13f79535-47bb-0310-9956-ffa450edef68

-     * If this parameter is present group memberships are collected in a node
+     * If this parameter is present group members are collected in a node
-     * are inserted. Valid values are integers > 4.
+     * are inserted. Valid values are integers &gt; 4. The default value is 0 and
+     * indicates that the {@link UserConstants#P_MEMBERS} property is used to
+     * record group members.
+    private final UserManagerConfig config;
-    /**
-     * Configuration value defining the node where User nodes will be created.
-     * Default value is {@link UserConstants#USERS_PATH}.
-     */
-
-    /**
-     * Configuration value defining the node where Group nodes will be created.
-     * Default value is {@link UserConstants#GROUPS_PATH}.
-     */
-
-    /**
-     * Flag indicating if {@link #getAuthorizable(String)} should be able to deal
-     * with users or groups created with Jackrabbit < 2.0.<br>
-     * As of 2.0 authorizables are created using a defined logic that allows
-     * to retrieve them without searching/traversing. If this flag is
-     * <code>true</code> this method will try to find authorizables using the
-     * <code>authResolver</code> if not found otherwise.
-     */
-    private final boolean compatibleJR16;
-
-    /**
-     * Maximum number of properties on the group membership node structure under
-     * {@link UserConstants#N_MEMBERS} until additional intermediate nodes are inserted.
-     * If 0 (default), {@link UserConstants#P_MEMBERS} is used to record group
-     * memberships.
-     */
-    private final int groupMembershipSplitSize;
-
-    /**
-     * The membership cache.
-     */
-     * Authorizable actions that will all be executed upon creation and removal
-     * of authorizables in the order they are contained in the array.<p/>
-     * Note, that if {@link #isAutoSave() autosave} is turned on, the configured
-     * actions are executed before persisting the creation or removal.
-     */
-    private AuthorizableAction[] authorizableActions = new AuthorizableAction[0];
-
-    /**
+        this(session, new UserManagerConfig(config, adminId, null), mCache);
+    }
+
+    /**
+     * Create a new <code>UserManager</code> for the given <code>session</code>.
+     *
+     * @param session The editing/reading session.
+     * @param config The user manager configuration.
+     * @param mCache The shared membership cache.
+     * @throws RepositoryException If an error occurs.
+     */
+    private UserManagerImpl(SessionImpl session, UserManagerConfig config, MembershipCache mCache) throws RepositoryException {
-        this.adminId = adminId;
+        this.adminId = config.getAdminId();
+        this.config = config;
-        Object param = (config != null) ? config.get(PARAM_USERS_PATH) : null;
-        usersPath = (param != null) ? param.toString() : USERS_PATH;
-
-        param = (config != null) ? config.get(PARAM_GROUPS_PATH) : null;
-        groupsPath = (param != null) ? param.toString() : GROUPS_PATH;
-
-        param = (config != null) ? config.get(PARAM_COMPATIBLE_JR16) : null;
-        compatibleJR16 = (param != null) && Boolean.parseBoolean(param.toString());
-
-        param = (config != null) ? config.get(PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE) : null;
-        groupMembershipSplitSize = parseMembershipSplitSize(param);
+        this.usersPath = config.getConfigValue(PARAM_USERS_PATH, USERS_PATH);
+        this.groupsPath = config.getConfigValue(PARAM_GROUPS_PATH, GROUPS_PATH);
-            membershipCache = new MembershipCache(session, groupsPath, groupMembershipSplitSize > 0);
+            membershipCache = new MembershipCache(session, groupsPath, hasMemberSplitSize());
-    public int getGroupMembershipSplitSize() {
-        return groupMembershipSplitSize;
+    public int getMemberSplitSize() {
+        int splitSize = config.getConfigValue(PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE, 0);
+        if (splitSize < 4) {
+            log.warn("Invalid value {} for {}. Expected integer >= 4", splitSize, PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE);
+            splitSize = 0;
+        }
+        return splitSize;
+    }
+
+    /**
+     * Returns <code>true</code> if the split-member configuration parameter
+     * is greater or equal than 4 indicating that group members should be stored
+     * in a tree instead of a single multivalued property.
+     *
+     * @return true if group members are being stored in a tree instead of a
+     * single multivalued property.
+     */
+    public boolean hasMemberSplitSize() {
+        return getMemberSplitSize() >= 4;
-        if (authorizableActions != null) {
-            this.authorizableActions = authorizableActions;
-        }
+        config.setAuthorizableActions(authorizableActions);
-    public Group createGroup(String groupID)
-    		throws AuthorizableExistsException, RepositoryException {
+    public Group createGroup(String groupID) throws AuthorizableExistsException, RepositoryException {
+            boolean compatibleJR16 = config.getConfigValue(PARAM_COMPATIBLE_JR16, false);
-    private static int parseMembershipSplitSize(Object param) {
-        int n = 0;
-        if (param != null) {
-            try {
-                n = Integer.parseInt(param.toString());
-                if (n < 4) {
-                    n = 0;
-                }
-            }
-            catch (NumberFormatException e) {
-                n = 0;
-            }
-            if (n == 0) {
-                log.warn("Invalid value {} for {}. Expected integer >= 4",
-                        param.toString(), PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE);
-            }
-        }
-
-        return n;
-    }
-
-        for (AuthorizableAction action : authorizableActions) {
+        for (AuthorizableAction action : config.getAuthorizableActions()) {
-        for (AuthorizableAction action : authorizableActions) {
+        for (AuthorizableAction action : config.getAuthorizableActions()) {
-        for (AuthorizableAction action : authorizableActions) {
+        for (AuthorizableAction action : config.getAuthorizableActions()) {
-        for (AuthorizableAction action : authorizableActions) {
+        for (AuthorizableAction action : config.getAuthorizableActions()) {
-        private NodeCreator(Properties config) {
+        private NodeCreator(UserManagerConfig config) {
-                if (config.containsKey(PARAM_DEFAULT_DEPTH)) {
-                    try {
-                        d = Integer.parseInt(config.get(PARAM_DEFAULT_DEPTH).toString());
-                        if (d <= 0) {
-                           log.warn("Invalid defaultDepth '" + d + "' -> using default.");
-                           d = DEFAULT_DEPTH;
-                        }
-                    } catch (NumberFormatException e) {
-                        log.warn("Unable to parse defaultDepth config parameter -> using default.", e);
-                    }
+                d = config.getConfigValue(PARAM_DEFAULT_DEPTH, DEFAULT_DEPTH);
+                if (d <= 0) {
+                    log.warn("Invalid defaultDepth '" + d + "' -> using default.");
+                    d = DEFAULT_DEPTH;
-                if (config.containsKey(PARAM_AUTO_EXPAND_TREE)) {
-                    expand = Boolean.parseBoolean(config.get(PARAM_AUTO_EXPAND_TREE).toString());
-                }
-                if (config.containsKey(PARAM_AUTO_EXPAND_SIZE)) {
-                    try {
-                        size = Integer.parseInt(config.get(PARAM_AUTO_EXPAND_SIZE).toString());
-                        if (expand && size <= 0) {
-                            log.warn("Invalid autoExpandSize '" + size + "' -> using default.");
-                            size = DEFAULT_SIZE;
-                        }
-                    } catch (NumberFormatException e) {
-                        log.warn("Unable to parse autoExpandSize config parameter -> using default.", e);
-                    }
+                expand = config.getConfigValue(PARAM_AUTO_EXPAND_TREE, false);
+                size = config.getConfigValue(PARAM_AUTO_EXPAND_SIZE, DEFAULT_SIZE);
+                if (expand && size <= 0) {
+                    log.warn("Invalid autoExpandSize '" + size + "' -> using default.");
+                    size = DEFAULT_SIZE;

INS23 INS23 INS31 INS31 MOV83 MOV83 INS43 INS59 MOV83 MOV83 MOV43 MOV59 MOV43 MOV59 INS8 INS29 INS83 INS42 INS44 MOV44 INS44 INS43 MOV8 MOV21 UPD42 INS29 INS83 INS39 INS42 INS8 INS8 INS42 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS43 INS42 UPD43 UPD42 UPD43 MOV43 UPD42 MOV42 INS42 INS60 INS25 INS65 INS65 INS41 MOV21 UPD66 UPD66 INS66 MOV65 INS66 INS66 INS42 INS14 INS42 UPD66 MOV66 INS42 INS66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 UPD42 MOV42 UPD42 UPD42 INS39 INS59 INS27 INS8 UPD42 INS66 INS66 INS66 INS66 INS66 INS27 INS32 INS32 INS32 INS32 INS32 UPD43 INS43 INS42 INS42 INS33 INS32 INS22 INS42 INS22 INS32 INS22 INS32 INS42 INS32 INS42 INS34 INS21 INS21 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS52 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS34 INS32 INS7 UPD42 MOV42 INS60 MOV21 MOV25 MOV21 MOV21 MOV25 INS42 INS42 INS45 INS42 INS42 INS42 INS34 INS39 INS59 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS9 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS9 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 DEL66 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL23 DEL66 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL23 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL59 DEL42 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL66 DEL66 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL33 DEL16 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL16 DEL7 DEL21 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL33 DEL16 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL16 DEL7 DEL21 DEL42 DEL42 DEL33 DEL27 DEL36 DEL32 DEL33 DEL16 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL33 DEL27 DEL36 DEL32 DEL33 DEL16 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL27 DEL52 DEL42 DEL22 DEL42 DEL7 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL8 DEL44 DEL42 DEL34 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25