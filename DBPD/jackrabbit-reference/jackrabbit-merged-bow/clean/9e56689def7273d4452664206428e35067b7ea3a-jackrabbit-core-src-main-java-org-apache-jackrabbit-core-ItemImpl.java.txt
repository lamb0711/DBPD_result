JCR-890: concurrent read-only access to a session

Clean up PropertyImpl.setValue methods

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@957530 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.PropertyType;
+import javax.jcr.Value;
+import javax.jcr.ValueFactory;
+import org.apache.jackrabbit.value.ValueHelper;
+    /**
+     * Utility method that converts the given string into a qualified JCR name.
+     *
+     * @param name name string
+     * @return qualified name
+     * @throws RepositoryException if the given name is invalid
+     */
+    protected Name getQName(String name) throws RepositoryException {
+        return session.getQName(name);
+    }
+
+    /**
+     * Utility method that returns the value factory of this session.
+     *
+     * @return value factory
+     * @throws RepositoryException if the value factory is not available
+     */
+    protected ValueFactory getValueFactory() throws RepositoryException {
+        return getSession().getValueFactory();
+    }
+
+    /**
+     * Utility method that converts the given strings into JCR values of the
+     * given type
+     *
+     * @param values value strings
+     * @param type value type
+     * @return JCR values
+     * @throws RepositoryException if the values can not be converted
+     */
+    protected Value[] getValues(String[] values, int type)
+            throws RepositoryException {
+        if (values != null) {
+            return ValueHelper.convert(values, type, getValueFactory());
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * Utility method that returns the type of the first of the given values,
+     * or {@link PropertyType#UNDEFINED} when given no values.
+     *
+     * @param values given values, or <code>null</code>
+     * @return value type, or {@link PropertyType#UNDEFINED}
+     */
+    protected int getType(Value[] values) {
+        if (values != null) {
+            for (Value value : values) {
+                if (value != null) {
+                    return value.getType();
+                }
+            }
+        }
+        return PropertyType.UNDEFINED;
+    }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS5 INS42 INS39 INS42 INS42 INS25 INS65 INS65 INS65 INS5 INS42 INS25 INS41 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS66 INS66 INS42 INS66 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS85 INS27 INS8 INS8 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS65 INS43 INS85 INS27 INS8 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS41 INS41 INS67 INS67 INS42 INS42 INS33 INS70 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS27 INS8 INS42 INS33 INS41 INS32 INS42 INS42