JCR-3420: Improving Jackrabbit integration within OSGi and other managed environment
delegate instance creation to a bean factory 
Thanks Chetan Mehrotra for the patch

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1383976 13f79535-47bb-0310-9956-ffa450edef68

+     * Factory to create instance from Bean className
+     */
+    private BeanFactory instanceFactory = new SimpleBeanFactory();
+
+    /**
+     *
+     * @param instanceFactory the {@link BeanFactory} to use to create bean instance
+     */
+    public void setInstanceFactory(BeanFactory instanceFactory) {
+        this.instanceFactory = instanceFactory;
+    }
+
+    /**
-        try {
-            Class<?> objectClass = Class.forName(cname, true, getClassLoader());
-            if (!klass.isAssignableFrom(objectClass)) {
+        // Instantiate the object using the default constructor
+        Object instance = instanceFactory.newInstance(klass,this);
+        Class<?> objectClass = instance.getClass();
+
+        // Set all configured bean properties
+        Map<String, Method> setters = getSetters(objectClass);
+        Enumeration<?> enumeration = properties.propertyNames();
+        while (enumeration.hasMoreElements()) {
+            String name = enumeration.nextElement().toString();
+            Method setter = setters.get(name);
+            if (setter != null) {
+                if (setter.getAnnotation(Deprecated.class) != null) {
+                    log.warn("Parameter {} of {} has been deprecated",
+                            name, cname);
+                }
+                String value = properties.getProperty(name);
+                setProperty(instance, name, setter, value);
+            } else if (validate) {
-                        + " does not implement " + klass.getName()
-                        + ". Please fix the repository configuration.");
+                        + " does not contain a property named " + name);
-            if (objectClass.getAnnotation(Deprecated.class) != null) {
-                log.warn("{} has been deprecated", cname);
-            }
-
-            // Instantiate the object using the default constructor
-            Object instance = objectClass.newInstance();
-
-            // Set all configured bean properties
-            Map<String, Method> setters = getSetters(objectClass);
-            Enumeration<?> enumeration = properties.propertyNames();
-            while (enumeration.hasMoreElements()) {
-                String name = enumeration.nextElement().toString();
-                Method setter = setters.get(name);
-                if (setter != null) {
-                    if (setter.getAnnotation(Deprecated.class) != null) {
-                        log.warn("Parameter {} of {} has been deprecated",
-                                name, cname);
-                    }
-                    String value = properties.getProperty(name);
-                    setProperty(instance, name, setter, value);
-                } else if (validate) {
-                    throw new ConfigurationException(
-                            "Configured class " + cname
-                            + " does not contain a property named " + name);
-                }
-            }
-
-            if (instance instanceof DatabaseAware) {
-                ((DatabaseAware) instance).setConnectionFactory(connectionFactory);
-            }
-
-            return (T) instance;
-        } catch (ClassNotFoundException e) {
-            throw new ConfigurationException(
-                    "Configured bean implementation class " + cname
-                    + " was not found.", e);
-        } catch (InstantiationException e) {
-            throw new ConfigurationException(
-                    "Configured bean implementation class " + cname
-                    + " can not be instantiated.", e);
-        } catch (IllegalAccessException e) {
-            throw new ConfigurationException(
-                    "Configured bean implementation class " + cname
-                    + " is protected.", e);
+
+        if (instance instanceof DatabaseAware) {
+            ((DatabaseAware) instance).setConnectionFactory(connectionFactory);
+        }
+
+        return (T) instance;

INS23 INS31 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 MOV8 INS65 INS42 INS42 INS14 INS65 INS43 INS42 INS21 MOV60 INS66 INS43 INS42 INS66 INS65 INS66 INS42 INS7 MOV43 MOV74 INS42 INS42 INS22 INS42 UPD42 UPD42 INS52 INS42 UPD42 UPD42 UPD42 MOV42 INS52 UPD42 UPD42 DEL42 DEL9 DEL32 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8