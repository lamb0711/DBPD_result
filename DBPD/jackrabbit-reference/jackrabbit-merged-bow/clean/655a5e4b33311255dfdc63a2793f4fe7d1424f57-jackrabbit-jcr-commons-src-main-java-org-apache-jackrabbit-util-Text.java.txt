- JCR-1958: Enhanced JCR remoting (work in progress)
- javadoc issue with Text.escapeIllegalXpathSearchChars

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@738474 13f79535-47bb-0310-9956-ffa450edef68

-     * @param string the string to encode
+     * @param s the string to encode
-                                   boolean ignoreMissing)
+                                          boolean ignoreMissing)
+    /**
+     * Generate a valid JSON string from the given <code>str</code>.
+     * 
+     * @param str A String
+     * @return JSON string surrounded by double quotes.
+     * @see <a href="http://tools.ietf.org/html/rfc4627">RFC 4627</a>
+     */
+    public static String getJSONString(String str) {
+        if (str == null || str.length() == 0) {
+            return "\"\"";
+        }
+
+        int len = str.length();
+        StringBuffer sb = new StringBuffer(len + 2);
+        // leading quote
+        sb.append('"');
+        // append passed string escaping characters as required
+        for (int i = 0; i < len; i++) {
+            char c = str.charAt(i);
+            switch (c) {
+                // reverse solidus and double quote
+                case '\\':
+                case '"':
+                    sb.append('\\').append(c);
+                    break;
+                // tab, line breaking chars and backspace
+                case '\b':
+                    sb.append("\\b");
+                    break;
+                case '\f':
+                    sb.append("\\f");
+                    break;
+                case '\n':
+                    sb.append("\\n");
+                    break;
+                case '\r':
+                    sb.append("\\r");
+                    break;
+                case '\t':
+                    sb.append("\\t");
+                    break;
+                // other control characters and 'unescaped'
+                default:
+                    if (c < 32) {
+                        // control characters except those already covered above.
+                        String uc = Integer.toHexString(c);
+                        sb.append("\\u");
+                        int uLen = uc.length();
+                        while (uLen++ < 4) {
+                            sb.append('0');
+                        }
+                        sb.append(uc);
+                    } else {
+                        // unescaped = %x20-21 / %x23-5B / %x5D-10FFFF
+                        sb.append(c);
+                    }
+            }
+        }
+        // trailing quote
+        sb.append('"');
+        return sb.toString();
+    }

INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS60 INS60 INS21 INS24 INS21 INS41 UPD42 INS66 INS42 INS66 INS66 INS66 INS42 INS27 INS8 INS39 INS59 INS43 INS59 INS32 INS58 INS27 INS37 INS8 INS32 INS32 INS27 INS27 INS41 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS13 INS39 INS59 INS42 INS42 INS42 INS60 INS50 INS42 INS42 INS13 INS42 INS42 INS42 INS33 INS32 INS34 INS45 INS42 INS42 INS43 INS27 INS42 INS34 INS39 INS59 INS42 INS49 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS25 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS13 INS13 INS32 INS13 INS32 INS13 INS32 INS13 INS32 INS13 INS32 INS13 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS34 INS60 INS21 INS60 INS61 INS21 INS21 INS42 INS42 INS13 INS43 INS59 INS32 INS39 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS37 INS34 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS13