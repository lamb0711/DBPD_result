JCR-1309 Refactor DBMS support for JNDI datasources

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@613914 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.persistence.bundle.util.ConnectionFactory;
-import java.sql.DriverManager;
+import javax.jcr.RepositoryException;
+
+ * <p>
+ * JNDI can be used to get the connection. In this case, use the javax.naming.InitialContext as the driver,
+ * and the JNDI name as the URL. If the user and password are configured in the JNDI resource,
+ * they should not be configured here. Example JNDI settings:
+ * <pre>
+ * &lt;param name="driver" value="javax.naming.InitialContext" />
+ * &lt;param name="url" value="java:comp/env/jdbc/Test" />
+ * </pre> * 
-            String msg = "Unable to load JDBC driver class.";
+            String msg = "Unable to load driver class.";
-     * @throws SQLException if an error occurs
+     * @throws JournalException if the driver could not be loaded
+     * @throws SQLException if the connection could not be established
-    protected Connection getConnection() throws SQLException {
-        return DriverManager.getConnection(url, user, password);
+    protected Connection getConnection() throws SQLException, JournalException {
+        try {
+            return ConnectionFactory.getConnection(driver, url, user, password);
+        } catch (RepositoryException e) {
+            String msg = "Unable to load driver class.";
+            throw new JournalException(msg, e);        
+        }
-    private void checkConnection() throws SQLException {
+    private void checkConnection() throws SQLException, JournalException {

MOV26 INS26 INS40 UPD40 INS43 INS8 INS43 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS42 INS54 INS42 INS42 INS66 UPD66 INS8 INS12 MOV41 INS44 INS8 INS43 INS42 INS60 INS53 UPD42 INS42 INS42 INS43 INS59 INS14 UPD45 INS42 INS42 INS45 INS43 INS42 INS42 INS42 DEL8