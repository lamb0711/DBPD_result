JCR-EXT: Improvements in node type handling.
	* SessionHelper.java: Added proper equals and hashCode implementations.
	* SessionItemDefinition.java: Added proper equals and hashCode implementations.
	* SessionNodeType.java: Added proper equals and hashCode implementations.
	* SessionNodeTypeManager.java: Added proper equals and hashCode implementations.
	* package.html: Removed note about state caching.
	* Switched to using the generic node type base classes for general functionality.
	* Protected and finalized implementation classes.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@169256 13f79535-47bb-0310-9956-ffa450edef68

-public class SessionNodeDefinition extends SessionItemDefinition
+final class SessionNodeDefinition extends SessionItemDefinition
-    /** Memorized default primary node type. Initially <code>null</code>. */
-    private NodeType defaultPrimaryType;
-
-    /** Memorized set of required node types. Initially <code>null</code>. */
-    private Set requiredPrimaryTypes;
-
-        this.defaultPrimaryType = null;
-        this.requiredPrimaryTypes = null;
-     * <p>
-     * The return value is memorized to improve performance, and will
-     * therefore not change even if the underlying state changes!
-        if (defaultPrimaryType == null) {
-            defaultPrimaryType =
-                helper.getNodeType(state.getDefaultPrimaryTypeName());
-        }
-        return defaultPrimaryType;
+        return helper.getNodeType(state.getDefaultPrimaryTypeName());
-     * <p>
-     * The set of required primary types is memorized to improve performance,
-     * and will therefore not change even if the underlying state changes!
-        if (requiredPrimaryTypes == null) {
-            Set types = new HashSet();
-            Name[] names = state.getRequiredPrimaryTypeNames();
-            for (int i = 0; i < names.length; i++) {
-                types.add(helper.getNodeType(names[i]));
-            }
-            requiredPrimaryTypes = types;
+        Set types = new HashSet();
+        Name[] names = state.getRequiredPrimaryTypeNames();
+        for (int i = 0; i < names.length; i++) {
+            types.add(helper.getNodeType(names[i]));
-        return (NodeType[]) requiredPrimaryTypes.toArray(
-                new NodeType[requiredPrimaryTypes.size()]);
+        return (NodeType[]) types.toArray(new NodeType[types.size()]);
-     * @return AlloswSameNameSiblings property value
+     * @return AllowsSameNameSiblings property value
-        return state.isAllowsSameNameSiblings();
+        return state.allowsSameNameSiblings();

UPD83 MOV8 MOV8 INS41 INS41 MOV32 INS11 UPD66 MOV5 INS32 UPD42 INS42 INS42 INS3 MOV5 INS32 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL66 DEL66 DEL66 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL42 DEL41 DEL8 DEL66 DEL66 DEL66 DEL42 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8