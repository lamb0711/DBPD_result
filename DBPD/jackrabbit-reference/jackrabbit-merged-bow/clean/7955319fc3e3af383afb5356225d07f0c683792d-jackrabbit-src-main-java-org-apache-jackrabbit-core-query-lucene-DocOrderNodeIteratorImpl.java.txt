JCR-651: Improve performance for queries with large result sets

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@480138 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeId;
-    /** The DIs of the nodes in the result set */
-    protected NodeId[] ids;
-
-    /** The score values for the nodes in the result set */
-    protected Float[] scores;
+    /** Unordered list of {@link ScoreNode}s. */
+    private final List scoreNodes;
-     * Creates a <code>DocOrderNodeIteratorImpl</code> that orders the nodes
-     * with <code>uuids</code> in document order.
-     * @param itemMgr the item manager of the session executing the query.
-     * @param ids the uuids of the nodes.
-     * @param scores the score values of the nodes.
+     * Creates a <code>DocOrderNodeIteratorImpl</code> that orders the nodes in
+     * <code>scoreNodes</code> in document order.
+     *
+     * @param itemMgr    the item manager of the session executing the query.
+     * @param scoreNodes the ids of the matching nodes with their score value.
-    DocOrderNodeIteratorImpl(final ItemManager itemMgr, NodeId[] ids, Float[] scores) {
+    DocOrderNodeIteratorImpl(final ItemManager itemMgr, List scoreNodes) {
-        this.ids = ids;
-        this.scores = scores;
+        this.scoreNodes = scoreNodes;
-            return ids.length;
+            return scoreNodes.size();
-        ScoreNode[] nodes = new ScoreNode[ids.length];
-        for (int i = 0; i < ids.length; i++) {
-            nodes[i] = new ScoreNode(ids[i], scores[i]);
-        }
+        ScoreNode[] nodes = (ScoreNode[]) scoreNodes.toArray(new ScoreNode[scoreNodes.size()]);
-                    if (!invalidIDs.contains(nodes[i].id)) {
+                    if (!invalidIDs.contains(nodes[i].getNodeId())) {
-                                node1 = (NodeImpl) itemMgr.getItem(n1.id);
+                                node1 = (NodeImpl) itemMgr.getItem(n1.getNodeId());
-                                log.warn("Node " + n1.id + " does not exist anymore: " + e);
+                                log.warn("Node " + n1.getNodeId() + " does not exist anymore: " + e);
-                                invalidIDs.add(n1.id);
+                                invalidIDs.add(n1.getNodeId());
-                                node2 = (NodeImpl) itemMgr.getItem(n2.id);
+                                node2 = (NodeImpl) itemMgr.getItem(n2.getNodeId());
-                                log.warn("Node " + n2.id + " does not exist anymore: " + e);
+                                log.warn("Node " + n2.getNodeId() + " does not exist anymore: " + e);
-                                invalidIDs.add(n2.id);
+                                invalidIDs.add(n2.getNodeId());
-                        invalidIDs.add(n1.id);
-                        invalidIDs.add(n2.id);
+                        invalidIDs.add(n1.getNodeId());
+                        invalidIDs.add(n2.getNodeId());
-        // resize uuids and scores array if we had to remove some uuids
-        if (ids.length != nodes.length) {
-            ids = new NodeId[nodes.length];
-            scores = new Float[nodes.length];
-        }
-
-        for (int i = 0; i < nodes.length; i++) {
-            ids[i] = nodes[i].id;
-            scores[i] = nodes[i].score;
-        }
-            log.debug("" + ids.length + " node(s) ordered in " + (System.currentTimeMillis() - time) + " ms");
+            log.debug("" + nodes.length + " node(s) ordered in " + (System.currentTimeMillis() - time) + " ms");
-        orderedNodes = new NodeIteratorImpl(itemMgr, ids, scores);
-    }
-
-    /**
-     * Simple helper class that associates a score with each node uuid.
-     */
-    private static final class ScoreNode {
-
-        final NodeId id;
-
-        final Float score;
-
-        ScoreNode(NodeId id, Float score) {
-            this.id = id;
-            this.score = score;
-        }
+        orderedNodes = new NodeIteratorImpl(itemMgr, nodes);

INS23 MOV29 UPD83 MOV83 UPD83 MOV83 INS43 MOV59 UPD42 MOV42 UPD42 INS43 UPD42 UPD66 INS65 INS66 UPD66 UPD66 UPD66 UPD42 UPD66 UPD42 MOV42 INS5 INS42 UPD42 INS43 INS85 INS11 UPD42 INS32 INS42 MOV5 INS32 UPD42 INS42 INS42 INS42 INS42 INS3 MOV5 INS32 UPD40 INS42 INS42 INS32 MOV2 INS42 INS32 INS32 INS42 INS42 INS42 INS42 MOV44 MOV44 MOV53 MOV53 MOV43 INS32 MOV43 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL43 DEL85 DEL5 DEL23 DEL42 DEL66 DEL65 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL43 DEL85 DEL5 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL40 DEL40 DEL3 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL14 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL2 DEL42 DEL22 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL22 DEL7 DEL21 DEL8 DEL24 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL55