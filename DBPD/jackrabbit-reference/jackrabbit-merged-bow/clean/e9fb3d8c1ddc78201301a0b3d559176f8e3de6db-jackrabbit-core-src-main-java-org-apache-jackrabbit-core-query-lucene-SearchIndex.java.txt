JCR-1184: Introduce spellchecker functionality based on content in the workspace

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@587866 13f79535-47bb-0310-9956-ffa450edef68

+     * The class that implements {@link SpellChecker}.
+     */
+    private Class spellCheckerClass;
+
+    /**
+     * The spell checker for this query handler or <code>null</code> if none is
+     * configured.
+     */
+    private SpellChecker spellChecker;
+
+    /**
+
+        // initialize spell checker
+        spellChecker = createSpellChecker();
+
+        if (spellChecker != null) {
+            spellChecker.close();
+        }
+     * @return the spell checker of this search index. If none is configured
+     *         this method returns <code>null</code>.
+     */
+    public SpellChecker getSpellChecker() {
+        return spellChecker;
+    }
+
+    /**
+     * Creates a spell checker for this query handler.
+     *
+     * @return the spell checker or <code>null</code> if none is configured or
+     *         an error occurs.
+     */
+    protected SpellChecker createSpellChecker() {
+        SpellChecker spCheck = null;
+        if (spellCheckerClass != null) {
+            try {
+                spCheck = (SpellChecker) spellCheckerClass.newInstance();
+                spCheck.init(this);
+            } catch (Exception e) {
+                log.warn("Exception initializing spell checker: " +
+                        spellCheckerClass, e);
+            }
+        }
+        return spCheck;
+    }
+
+    /**
+     * Sets the name of the class that implements {@link SpellChecker}. The
+     * default value is <code>null</code> (none set).
+     *
+     * @param className name of the class that implements {@link SpellChecker}.
+     */
+    public void setSpellCheckerClass(String className) {
+        try {
+            Class clazz = Class.forName(className);
+            if (SpellChecker.class.isAssignableFrom(clazz)) {
+                spellCheckerClass = clazz;
+            } else {
+                log.warn("Invalid value for spellCheckerClass, {} " +
+                        "does not implement SpellChecker interface.",
+                        className);
+            }
+        } catch (ClassNotFoundException e) {
+            log.warn("Invalid value for spellCheckerClass, class {} " +
+                    "not found.", className);
+        }
+    }
+
+    /**
+     * @return the class name of the spell checker implementation or
+     *         <code>null</code> if none is set.
+     */
+    public String getSpellCheckerClass() {
+        return spellCheckerClass != null ?
+                spellCheckerClass.getName() : null;
+    }
+
+    /**

INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS65 INS42 INS42 INS65 INS42 INS42 INS21 INS25 INS65 INS42 INS41 INS65 INS65 INS42 INS60 INS25 INS41 INS65 INS65 INS43 INS42 INS54 INS65 INS42 INS41 INS66 INS65 INS66 INS66 INS66 INS7 INS27 INS8 INS66 INS66 INS42 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS8 INS12 INS66 INS66 INS16 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS33 INS42 INS33 INS54 INS42 INS42 INS60 INS25 INS44 INS8 INS27 INS32 INS33 INS42 INS32 INS8 INS12 INS43 INS59 INS32 INS8 INS8 INS43 INS42 INS21 INS42 INS33 INS42 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS42 INS42 INS32 INS57 INS42 INS42 INS21 INS21 INS42 INS32 INS7 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS43 INS7 INS32 INS42 INS42 INS27 INS42 INS42 INS11 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS45 INS43 INS32 INS42 INS42 INS27 INS42 INS45 INS45 INS42 INS42 INS42 INS45 INS42