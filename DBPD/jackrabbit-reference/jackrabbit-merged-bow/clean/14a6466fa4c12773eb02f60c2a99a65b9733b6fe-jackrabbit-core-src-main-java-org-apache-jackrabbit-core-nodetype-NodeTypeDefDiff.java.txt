JCR-808: Applied patch from Christoph Kiehl to get better error messages for non-trivial nodetype changes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@526703 13f79535-47bb-0310-9956-ffa450edef68

-            // check supertypes (MAJOR modification)
-            if (supertypesChanged()) {
-                type = MAJOR;
+            // check supertypes
+            int tmpType = supertypesDiff(); 
+            if (tmpType > type) {
+                type = tmpType;
-            if (oldDef.isMixin() != newDef.isMixin()) {
-                type = MAJOR;
+            tmpType = mixinFlagDiff();
+            if (tmpType > type) {
+                type = tmpType;
-            int tmpType = buildPropDefDiffs();
+            tmpType = buildPropDefDiffs();
-    public boolean supertypesChanged() {
-        return !Arrays.equals(oldDef.getSupertypes(), newDef.getSupertypes());
+    public int mixinFlagDiff() {
+        return oldDef.isMixin() != newDef.isMixin() ? MAJOR : NONE;
-    public boolean propertyDefsChanged() {
-        return !Arrays.equals(oldDef.getPropertyDefs(), newDef.getPropertyDefs());
-    }
-
-    /**
-     * @return
-     */
-    public boolean childNodeDefsChanged() {
-        return !Arrays.equals(oldDef.getChildNodeDefs(), newDef.getChildNodeDefs());
+    public int supertypesDiff() {
+        return !Arrays.equals(oldDef.getSupertypes(), newDef.getSupertypes()) ? MAJOR : NONE;
+    
+    public String toString() {
+        String result = this.getClass().getSimpleName() + "[\n\tnodeTypeName="
+                + oldDef.getName();
+        
+        result += ",\n\tmixinFlagDiff=" + modificationTypeToString(mixinFlagDiff());
+        result += ",\n\tsupertypesDiff=" + modificationTypeToString(supertypesDiff());
+
+        result += ",\n\tpropertyDifferences=[\n";
+        result += toString(propDefDiffs);
+        result += "\t]";
+
+        result += ",\n\tchildNodeDifferences=[\n";
+        result += toString(childNodeDefDiffs);
+        result += "\t]\n";
+        result += "]\n";
+
+        return result;
+    }
+
+    private String toString(List childItemDefDiffs) {
+        String result = "";
+        for (Iterator iter = childItemDefDiffs.iterator(); iter.hasNext();) {
+            ChildItemDefDiff propDefDiff = (ChildItemDefDiff) iter.next();
+            result += "\t\t" + propDefDiff;
+            if (iter.hasNext()) {
+                result += ",";
+            }
+            result += "\n";
+        }
+        return result;
+    }
+
+    private String modificationTypeToString(int modifcationType) {
+        String typeString = "unknown";
+        switch (modifcationType) {
+            case NONE:
+                typeString = "NONE";
+                break;
+            case TRIVIAL:
+                typeString = "TRIVIAL";
+                break;
+            case MINOR:
+                typeString = "MINOR";
+                break;
+            case MAJOR:
+                typeString = "MAJOR";
+                break;
+        }
+        return typeString;
+    }
+
+
+
+        public String toString() {
+            String typeString = modificationTypeToString(getType());
+
+            String operationString;
+            if (isAdded()) {
+                operationString = "ADDED";
+            } else if (isModified()) {
+                operationString = "MODIFIED";
+            } else if (isRemoved()) {
+                operationString = "REMOVED";
+            } else {
+                operationString = "NONE";
+            }
+
+            ItemDef itemDefinition = (oldDef != null) ? oldDef : newDef;
+
+            return getClass().getSimpleName() + "[itemName="
+                    + itemDefinition.getName() + ", type=" + typeString
+                    + ", operation=" + operationString + "]";
+        }
+

MOV31 INS31 INS31 INS31 MOV29 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 UPD39 UPD42 INS83 INS43 INS42 MOV8 UPD83 INS43 INS42 INS44 INS83 INS43 INS42 INS44 INS8 INS31 INS41 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS60 INS24 INS41 INS42 INS39 INS42 INS60 INS50 INS41 INS83 INS43 INS42 INS8 MOV25 MOV21 INS16 INS16 INS43 INS59 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS43 INS59 INS58 INS32 INS8 INS42 INS43 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS42 INS42 INS60 INS60 INS25 INS60 INS41 INS60 INS25 INS21 INS21 MOV27 INS42 INS42 MOV38 INS42 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS43 INS59 UPD42 MOV42 UPD42 MOV42 INS60 INS21 INS25 INS21 INS42 INS42 INS45 INS42 INS7 INS42 INS7 INS42 INS7 INS42 INS7 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS43 INS59 INS27 INS39 INS59 INS27 MOV8 INS7 INS7 INS27 INS32 INS45 INS32 INS45 INS32 INS45 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS7 INS32 INS8 INS7 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS42 INS16 INS32 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS42 MOV32 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS11 INS42 INS27 INS42 INS42 INS21 INS42 INS45 INS42 INS32 INS7 INS42 INS21 INS32 INS8 INS8 INS36 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS52 UPD42 MOV42 INS42 INS42 INS43 INS32 INS45 INS42 INS7 INS42 INS42 INS45 INS7 INS42 INS21 INS21 INS27 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS7 INS7 INS42 INS33 INS42 INS45 INS42 INS45 DEL32 DEL25 DEL39 DEL42 DEL59 DEL60 DEL31 DEL42 DEL32 DEL32 DEL32 DEL38 DEL41 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL38 DEL41