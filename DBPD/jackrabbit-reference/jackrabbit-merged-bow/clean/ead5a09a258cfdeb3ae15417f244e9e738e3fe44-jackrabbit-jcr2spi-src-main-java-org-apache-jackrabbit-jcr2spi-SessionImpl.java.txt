JCR-1181: Reverted XML import/export changes due to a regression noticed by Angela.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@599409 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.commons.AbstractSession;
+import org.xml.sax.InputSource;
+import javax.xml.transform.sax.SAXTransformerFactory;
+import javax.xml.transform.sax.TransformerHandler;
+import javax.xml.transform.stream.StreamResult;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.TransformerException;
+import javax.xml.parsers.SAXParserFactory;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
-public class SessionImpl extends AbstractSession implements ManagerProvider {
+public class SessionImpl implements Session, ManagerProvider {
+     * @see javax.jcr.Session#importXML(String, java.io.InputStream, int)
+     */
+    public void importXML(String parentAbsPath, InputStream in, int uuidBehavior) throws IOException, PathNotFoundException, ItemExistsException, ConstraintViolationException, VersionException, InvalidSerializedDataException, LockException, RepositoryException {
+        // NOTE: checks are performed by 'getImportContentHandler'
+        ImportHandler handler = (ImportHandler) getImportContentHandler(parentAbsPath, uuidBehavior);
+        try {
+            SAXParserFactory factory = SAXParserFactory.newInstance();
+            factory.setNamespaceAware(true);
+            factory.setFeature(
+                    "http://xml.org/sax/features/namespace-prefixes", false);
+
+            SAXParser parser = factory.newSAXParser();
+            parser.parse(new InputSource(in), handler);
+        } catch (SAXException se) {
+            // check for wrapped repository exception
+            Exception e = se.getException();
+            if (e != null && e instanceof RepositoryException) {
+                throw (RepositoryException) e;
+            } else {
+                String msg = "failed to parse XML stream";
+                log.debug(msg);
+                throw new InvalidSerializedDataException(msg, se);
+            }
+        } catch (ParserConfigurationException e) {
+            throw new RepositoryException("SAX parser configuration error", e);
+        }
+    }
+
+    /**
+     * @see javax.jcr.Session#exportSystemView(String, OutputStream, boolean, boolean)
+     */
+    public void exportSystemView(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse) throws IOException, PathNotFoundException, RepositoryException {
+        SAXTransformerFactory stf = (SAXTransformerFactory) SAXTransformerFactory.newInstance();
+        try {
+            TransformerHandler th = stf.newTransformerHandler();
+            th.getTransformer().setOutputProperty(OutputKeys.METHOD, "xml");
+            th.getTransformer().setOutputProperty(OutputKeys.ENCODING, "UTF-8");
+            th.getTransformer().setOutputProperty(OutputKeys.INDENT, "no");
+            th.setResult(new StreamResult(out));
+
+            exportSystemView(absPath, th, skipBinary, noRecurse);
+        } catch (TransformerException te) {
+            throw new RepositoryException(te);
+        } catch (SAXException se) {
+            throw new RepositoryException(se);
+        }
+    }
+
+    /**
+     * @see javax.jcr.Session#exportDocumentView(String, OutputStream, boolean, boolean)
+     */
+    public void exportDocumentView(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse) throws InvalidSerializedDataException, IOException, PathNotFoundException, RepositoryException {
+        SAXTransformerFactory stf = (SAXTransformerFactory) SAXTransformerFactory.newInstance();
+        try {
+            TransformerHandler th = stf.newTransformerHandler();
+            th.getTransformer().setOutputProperty(OutputKeys.METHOD, "xml");
+            th.getTransformer().setOutputProperty(OutputKeys.ENCODING, "UTF-8");
+            th.getTransformer().setOutputProperty(OutputKeys.INDENT, "no");
+            th.setResult(new StreamResult(out));
+
+            exportDocumentView(absPath, th, skipBinary, noRecurse);
+        } catch (TransformerException te) {
+            throw new RepositoryException(te);
+        } catch (SAXException se) {
+            throw new RepositoryException(se);
+        }
+    }
+
+    /**

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD43 INS31 INS31 INS31 UPD42 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS54 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS42 INS60 INS54 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS60 INS54 INS68 INS42 INS42 INS43 INS59 INS8 INS12 INS12 INS68 INS42 INS42 INS43 INS59 INS8 INS12 INS12 INS68 INS42 INS42 INS43 INS59 INS8 INS12 INS12 INS40 INS42 INS69 INS69 INS69 INS42 INS42 INS11 INS60 INS21 INS21 INS60 INS21 INS44 INS8 INS44 INS8 INS40 INS42 INS69 INS69 INS69 INS69 INS42 INS42 INS11 INS60 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS40 INS42 INS69 INS69 INS69 INS69 INS42 INS42 INS11 INS60 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS43 INS43 INS39 INS43 INS32 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS43 INS42 INS60 INS25 INS43 INS42 INS53 INS43 INS43 INS39 INS39 INS43 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS43 INS39 INS39 INS43 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS45 INS9 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS40 INS45 INS32 INS42 INS40 INS45 INS32 INS42 INS40 INS45 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS40 INS45 INS32 INS42 INS40 INS45 INS32 INS42 INS40 INS45 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS27 INS62 INS53 INS60 INS21 INS53 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS11 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42