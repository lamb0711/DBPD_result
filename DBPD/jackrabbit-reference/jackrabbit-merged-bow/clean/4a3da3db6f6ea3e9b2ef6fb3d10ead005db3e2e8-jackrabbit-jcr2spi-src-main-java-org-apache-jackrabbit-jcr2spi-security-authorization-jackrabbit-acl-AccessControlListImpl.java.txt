JCR-2113 : JSR 283 Access Control Management (contribution by Alfusainey Jallow)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1656464 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.commons.value.ValueFormat;
-                Map<String, QValue> restrictions = null;
+                Map<Name, QValue> restrictions = null;
-                    restrictions = Collections.singletonMap(jcrRepGlob, ps.getValue());
+                    restrictions = Collections.singletonMap(ps.getName(), ps.getValue());
-                AccessControlEntry ace = new AccessControlEntryImpl(principal, privileges, isAllow, restrictions, resolver, qValueFactory);
+                AccessControlEntry ace = new AccessControlEntryImpl(principal, privileges, isAllow, restrictions, Collections.EMPTY_MAP, resolver, qValueFactory);
-        if (mvRestrictions != null && !mvRestrictions.isEmpty()) {
-            throw new UnsupportedRepositoryOperationException("Jackrabbit 2.x does not support multi-valued restrictions");
-        }
-        return addEntry(principal, privileges, isAllow, restrictions);
+
+
+        // create entry to be added
+        Map<Name, QValue> rs = createRestrictions(restrictions);
+        Map<Name, Iterable<QValue>> mvRs = createMvRestrictions(mvRestrictions);
+        AccessControlEntry entry = createEntry(principal, privileges, isAllow, rs, mvRs);
+
+        return entries.add(entry);
+
-
-        // create entry to be added
-        Map<String, QValue> rs = createRestrictions(restrictions);
-        AccessControlEntry entry = createEntry(principal, privileges, isAllow, rs);
-
-        return entries.add(entry);
+        return addEntry(principal, privileges, isAllow, restrictions, Collections.EMPTY_MAP);
-    //------------------------------------------------------------< private >---
-    private AccessControlEntry createEntry(Principal principal, Privilege[] privileges, boolean isAllow, Map<String, QValue> restrictions) throws RepositoryException {
-        return new AccessControlEntryImpl(principal, privileges, isAllow, restrictions, resolver, qValueFactory);
+    //-------------------------------------------------------------< Object >---
+    /**
+     * Returns zero to satisfy the Object equals/hashCode contract.
+     * This class is mutable and not meant to be used as a hash key.
+     *
+     * @return always zero
+     * @see Object#hashCode()
+     */
+    @Override
+    public int hashCode() {
+        return 0;
-    private Map<String, QValue> createRestrictions(Map<String, Value> restrictions) throws RepositoryException {
-        Map<String, QValue> rs = new HashMap<String, QValue>(restrictions.size());
+    /**
+     * Returns true if the path and the entries are equal; false otherwise.
+     *
+     * @param obj Object to be tested.
+     * @return true if the path and the entries are equal; false otherwise.
+     * @see Object#equals(Object)
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (obj == this) {
+            return true;
+        }
+
+        if (obj instanceof AccessControlListImpl) {
+            AccessControlListImpl acl = (AccessControlListImpl) obj;
+            return jcrPath.equals(acl.jcrPath) && entries.equals(acl.entries);
+        }
+        return false;
+    }
+
+    //------------------------------------------------------------< private >---
+    private AccessControlEntry createEntry(Principal principal, Privilege[] privileges, boolean isAllow,
+                                           Map<Name, QValue> restrictions, Map<Name, Iterable<QValue>> mvRestrictions) throws RepositoryException {
+        return new AccessControlEntryImpl(principal, privileges, isAllow, restrictions, mvRestrictions, resolver, qValueFactory);
+    }
+
+    private Map<Name, QValue> createRestrictions(Map<String, Value> restrictions) throws RepositoryException {
+        Map<Name, QValue> rs = new HashMap<Name, QValue>(restrictions.size());
-            QValue restValue = qValueFactory.create(restrictions.get(restName).getString(), PropertyType.STRING);
-            rs.put(restName, restValue);
+            Value v = restrictions.get(restName);
+            rs.put(resolver.getQName(restName), ValueFormat.getQValue(v, resolver, qValueFactory));
+    private Map<Name, Iterable<QValue>> createMvRestrictions(Map<String, Value[]> restrictions) throws RepositoryException {
+            Map<Name, Iterable<QValue>> rs = new HashMap<Name, Iterable<QValue>>(restrictions.size());
+            for (String restName : restrictions.keySet()) {
+                QValue[] qvs = ValueFormat.getQValues(restrictions.get(restName), resolver, qValueFactory);
+                rs.put(resolver.getQName(restName), Arrays.asList(qvs));
+            }
+            return rs;
+        }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS8 INS44 UPD74 INS83 INS74 INS42 INS44 INS43 INS8 INS60 INS60 INS60 MOV41 INS41 INS65 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS25 INS41 UPD74 INS74 INS42 MOV43 UPD43 MOV43 INS43 INS43 INS74 INS74 INS42 INS42 INS60 INS70 INS41 INS74 MOV59 INS74 INS59 MOV43 INS59 INS32 INS66 INS66 INS66 INS68 INS34 INS66 INS42 INS66 INS66 INS68 INS42 INS27 INS8 INS62 INS8 INS9 MOV43 UPD43 MOV43 MOV43 INS43 INS74 UPD42 UPD74 INS42 INS42 INS43 INS43 INS43 MOV43 INS5 INS74 INS59 INS44 INS32 INS8 INS42 INS43 INS43 MOV43 MOV43 INS43 INS74 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS42 INS42 INS69 INS42 INS52 INS41 INS42 INS43 INS60 INS41 UPD42 INS42 INS43 INS43 INS42 UPD43 INS43 MOV43 INS60 INS42 INS42 INS42 INS43 INS85 INS43 INS43 INS74 INS42 INS14 INS43 INS42 INS42 INS42 MOV60 INS21 INS42 INS42 INS42 INS43 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 INS42 INS43 INS9 INS42 INS43 INS59 INS27 INS42 INS42 UPD42 INS42 UPD74 INS43 INS59 INS42 INS42 INS42 INS43 INS43 INS74 INS32 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS32 INS43 MOV43 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS43 INS43 INS74 INS42 INS42 MOV43 INS85 INS42 MOV32 MOV32 INS42 INS42 INS32 INS32 UPD74 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 UPD42 INS40 INS32 UPD42 MOV42 INS42 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL32 DEL41 DEL42 DEL43 DEL74 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL32