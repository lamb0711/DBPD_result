JCR-1591: JSR 283: NodeType Management
JCR-2091: Searchability settings in PropertyDefinition


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@774303 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.query.qom.QueryObjectModelConstants;
+    /*
+     * The 'fulltext searchable' flag.
+     */
+    private boolean fullTextSearchable = true;
+
+    /*
+     * The 'query orderable' flag.
+     */
+    private boolean queryOrderable = true;
+
+    /*
+     * The 'query operators.
+     */
+    private String[] queryOperators = new String[]{
+            QueryObjectModelConstants.JCR_OPERATOR_EQUAL_TO,
+            QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN,
+            QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO,
+            QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN,
+            QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO,
+            QueryObjectModelConstants.JCR_OPERATOR_LIKE,
+            QueryObjectModelConstants.JCR_OPERATOR_NOT_EQUAL_TO
+    };
+
+
+    /**
+     * Sets the 'fulltext searchable' flag.
+     *
+     * @param fullTextSearchable
+     */
+    public void setFullTextSearchable(boolean fullTextSearchable) {
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
+        this.fullTextSearchable = fullTextSearchable;
+    }
+
+    /**
+     * Sets the 'fulltext searchable' flag.
+     *
+     * @param queryOrderable
+     */
+    public void setQueryOrderable(boolean queryOrderable) {
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
+        this.queryOrderable = queryOrderable;
+    }
+
+    /**
+     * Sets the 'available' query operators.
+     *
+     * @param queryOperators
+     */
+    public void setAvailableQueryOperators(String[] queryOperators) {
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
+        if (queryOperators != null) {
+            this.queryOperators = queryOperators;
+        } else {
+            this.queryOperators = new String[0];
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public String[] getAvailableQueryOperators() {
+        return queryOperators;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public boolean isFullTextSearchable() {
+        return fullTextSearchable;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public boolean isQueryOrderable() {
+        return queryOrderable;
+    }
+
-                    && multiple == other.multiple;
+                    && multiple == other.multiple
+                    && Arrays.equals(queryOperators, other.queryOperators)
+                    && queryOrderable == other.queryOrderable
+                    && fullTextSearchable == other.fullTextSearchable;

INS26 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS5 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS5 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS42 INS9 INS42 INS9 INS43 INS85 INS42 INS3 INS65 INS65 INS39 INS42 INS21 INS21 INS65 INS65 INS39 INS42 INS21 INS21 INS65 INS65 INS5 INS42 INS21 INS25 INS65 INS43 INS85 INS41 INS65 INS41 INS65 INS41 INS42 INS5 INS4 INS66 INS42 INS7 INS7 INS66 INS42 INS7 INS7 INS66 INS42 INS43 INS85 INS7 INS27 INS8 INS8 INS65 INS42 INS42 INS65 INS42 INS65 INS42 INS43 INS85 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS33 INS22 INS42 INS42 INS33 INS22 INS42 INS42 INS42 INS33 INS42 INS33 INS21 INS21 INS42 INS52 INS42 INS52 INS42 INS7 INS7 INS27 INS22 INS42 INS22 INS3 INS27 INS27 INS52 INS42 INS52 INS42 INS5 INS34 INS27 INS27 INS42 INS40 INS43 INS85 MOV27 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS40