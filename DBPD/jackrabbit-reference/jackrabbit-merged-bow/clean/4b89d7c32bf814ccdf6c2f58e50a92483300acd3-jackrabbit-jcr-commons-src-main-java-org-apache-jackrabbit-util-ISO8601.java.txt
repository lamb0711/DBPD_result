JCR-4502: ISO8601: add convenience methods that do not require passing a Calendar

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1869804 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Date;
+import java.util.SimpleTimeZone;
+    private static TimeZone UTC = TimeZone.getTimeZone("UTC");
+
+     * Formats a time instant into an ISO8601-compliant date/time string using
+     * the UTC timezone.
+     *
+     * @param date
+     *            date to be formatted
+     * @return the formatted date/time string.
+     * @throws IllegalArgumentException
+     *             if the calendar cannot be represented as defined by ISO 8601
+     *             (i.e. year with more than four digits).
+     */
+    public static String format(Date date) throws IllegalArgumentException {
+        return format(date, 0);
+    }
+
+    /**
+     * Formats a time instant into an ISO8601-compliant date/time string using
+     * the UTC timezone.
+     *
+     * @param millisSinceEpoch
+     *            milliseconds since the epoch
+     * @return the formatted date/time string.
+     * @throws IllegalArgumentException
+     *             if the calendar cannot be represented as defined by ISO 8601
+     *             (i.e. year with more than four digits).
+     */
+    public static String format(long millisSinceEpoch) throws IllegalArgumentException {
+        return format(millisSinceEpoch, 0);
+    }
+
+    /**
+     * Formats a time instant and a timezone offset into an ISO8601-compliant
+     * date/time string.
+     *
+     * @param date
+     *            date to be formatted
+     * @param tzOffsetInMillis
+     *            timezone offset from UTC in milliseconds
+     * @return the formatted date/time string.
+     * @throws IllegalArgumentException
+     *             if the calendar cannot be represented as defined by ISO 8601
+     *             (i.e. year with more than four digits).
+     */
+    public static String format(Date date, int tzOffsetInMillis) throws IllegalArgumentException {
+        if (date == null) {
+            throw new IllegalArgumentException("argument can not be null");
+        }
+        return format(date.getTime(), tzOffsetInMillis);
+    }
+
+    /**
+     * Formats a time instant and a timezone offset into an ISO8601-compliant
+     * date/time string.
+     *
+     * @param millisSinceEpoch
+     *            milliseconds since the epoch
+     * @param tzOffsetInMillis
+     *            timezone offset from UTC in milliseconds
+     * @return the formatted date/time string.
+     * @throws IllegalArgumentException
+     *             if a <code>null</code> argument is passed the calendar cannot
+     *             be represented as defined by ISO 8601 (i.e. year with more
+     *             than four digits).
+     */
+    public static String format(long millisSinceEpoch, int tzOffsetInMillis) throws IllegalArgumentException {
+        Calendar cal = Calendar.getInstance();
+        cal.setTimeZone(tzOffsetInMillis == 0 ? UTC : new SimpleTimeZone(tzOffsetInMillis, ""));
+        cal.setTimeInMillis(millisSinceEpoch);
+        return format(cal);
+    }
+
+    /**

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS32 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS41 INS42 INS42 INS45 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS27 INS42 INS14 INS43 INS45 INS42 INS34 INS43 INS42 INS45 INS42 INS42