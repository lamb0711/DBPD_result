JCR-999  SPI: provide batch read functionality
JCR-1000 JCR2SPI: remove duplicate item states

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552873 13f79535-47bb-0310-9956-ffa450edef68

-public abstract class ItemState implements ItemStateLifeCycleListener {
+public abstract class ItemState {
-     * Flag used to distinguish workspace states from session states. The latter
-     * will be able to handle the various methods related to transient
-     * modifications.
-     */
-    private final boolean isWorkspaceState;
-
-    /**
-     * the backing persistent item state (may be null)
-     */
-    transient ItemState overlayedState;
-
-    /**
-     * Constructs a new unconnected item state
+     * Constructs an item state
-     * @param initialStatus
-     * @param isWorkspaceState
+     * @param entry
+     * @param isf
+     * @param definitionProvider
-    protected ItemState(int initialStatus, boolean isWorkspaceState,
-                        HierarchyEntry entry, ItemStateFactory isf,
+    protected ItemState(HierarchyEntry entry, ItemStateFactory isf,
-        switch (initialStatus) {
-            case Status.EXISTING:
-            case Status.NEW:
-                status = initialStatus;
-                break;
-            default:
-                String msg = "illegal status: " + initialStatus;
-                log.debug(msg);
-                throw new IllegalArgumentException(msg);
-        }
-        if (entry == null) {
-            throw new IllegalArgumentException("Cannot build ItemState from 'null' HierarchyEntry");
-        }
-        this.hierarchyEntry = entry;
-        this.isf = isf;
-        this.definitionProvider = definitionProvider;
-        this.isWorkspaceState = isWorkspaceState;
-
-        overlayedState = null;
+        this(getInitialStatus(entry.getParent()), entry, isf, definitionProvider);
-     * Constructs a new item state that is initially connected to an overlayed
-     * state.
+     * Constructs an item state
-     * @param overlayedState
-     * @param initialStatus
+     * @param entry
+     * @param isf
+     * @param definitionProvider
-    protected ItemState(ItemState overlayedState, int initialStatus, ItemStateFactory isf) {
+    protected ItemState(int initialStatus, HierarchyEntry entry,
+                        ItemStateFactory isf,
+                        ItemDefinitionProvider definitionProvider) {
+        if (entry == null) {
+            throw new IllegalArgumentException("Cannot build ItemState from 'null' HierarchyEntry");
+        }
-            case Status.EXISTING_MODIFIED:
+            case Status.NEW:
-        if (overlayedState.getHierarchyEntry() == null) {
-            throw new IllegalArgumentException("Cannot build ItemState from 'null' HierarchyEntry");
-        }
-        this.hierarchyEntry = overlayedState.getHierarchyEntry();
+        this.hierarchyEntry = entry;
-        this.isWorkspaceState = false;
-        this.definitionProvider = overlayedState.definitionProvider;
-        connect(overlayedState);
+        this.definitionProvider = definitionProvider;
+
+        if (!entry.isAvailable()) {
+            entry.setItemState(this);
+        }
+    }
+
+    /**
+     *
+     * @param parent
+     * @return
+     */
+    private static int getInitialStatus(NodeEntry parent) {
+        int status = Status.EXISTING;
+        // walk up hiearchy and check if any of the parents is transiently
+        // removed, in which case the status must be set to EXISTING_REMOVED.
+        while (parent != null) {
+            if (parent.getStatus() == Status.EXISTING_REMOVED) {
+                status = Status.EXISTING_REMOVED;
+                break;
+            }
+            parent = parent.getParent();
+        }
+        return status;
+     * Returns the identifier of this item state. Shortcut for calling 'getWorkspaceId'
+     * on the NodeEntry or PropertyEntry respectively.
+     *
+     * @return the identifier of this item state..
+     */
+    public abstract ItemId getWorkspaceId();
+
+    /**
+     * Utility method:
-        if (Status.isValidStatusChange(oldStatus, newStatus, isWorkspaceState)) {
-            status = newStatus;
+        if (Status.isValidStatusChange(oldStatus, newStatus)) {
+            status = Status.getNewStatus(oldStatus, newStatus);
-            change back tmp MODIFIED status, that is used as marker only to
-            force the overlaying state to synchronize as well as to inform
-            other listeners about changes.
+            change back tmp MODIFIED status, that is used as marker only
+            inform listeners about (external) changes.
-     public abstract boolean merge(ItemState another, boolean keepChanges);
+    public abstract boolean merge(ItemState another, boolean keepChanges);
+
+    /**
+     * Revert all transient modifications made to this ItemState.
+     *
+     * @return true if this state has been modified i.e. if there was anything
+     * to revert.
+     */
+    public abstract boolean revert();
-    //-----------------------------------------< ItemStateLifeCycleListener >---
-    /**
-     *
-     * @param overlayed
-     * @param previousStatus
-     */
-    public void statusChanged(ItemState overlayed, int previousStatus) {
-        checkIsSessionState();
-        overlayed.checkIsWorkspaceState();
-
-        // the given state is the overlayed state this state (session) is listening to.
-        if (overlayed == overlayedState) {
-            switch (overlayed.getStatus()) {
-                case Status.MODIFIED:
-                    // underlying state has been modified by external changes
-                    if (status == Status.EXISTING || status == Status.INVALIDATED) {
-                        // temporarily set the state to MODIFIED in order to inform listeners.
-                        setStatus(Status.MODIFIED);
-                    } else if (status == Status.EXISTING_MODIFIED) {
-                        // TODO: try to merge changes
-                        setStatus(Status.STALE_MODIFIED);
-                    }
-                    // else: this status is EXISTING_REMOVED => ignore.
-                    // no other status is possible.
-                    break;
-                case Status.REMOVED:
-                    if (status == Status.EXISTING_MODIFIED) {
-                        setStatus(Status.STALE_DESTROYED);
-                    } else {
-                        setStatus(Status.REMOVED);
-                    }
-                    break;
-                case Status.INVALIDATED:
-                    // invalidate this session state if it is EXISTING.
-                    if (status == Status.EXISTING) {
-                        setStatus(Status.INVALIDATED);
-                    }
-                    break;
-                default:
-                    // Should never occur, since 'setStatus(int)' already validates
-                    log.error("Workspace state cannot have its state changed to " + overlayed.getStatus());
-                    break;
-            }
-        }
-    }
-
-    //--------------------------------------------------------< State types >---
-    /**
-     * @return true if this state is a workspace state.
-     */
-    public boolean isWorkspaceState() {
-        return isWorkspaceState;
-    }
-
-    /**
-     * Returns <i>this</i>, if {@link #isWorkspaceState()} returns <code>true</code>.
-     * Otherwise this method returns the workspace state backing <i>this</i>
-     * 'session' state or <code>null</code> if this state is new.
-     *
-     * @return the workspace state or <code>null</code> if this state is new.
-     */
-    public ItemState getWorkspaceState() {
-        if (isWorkspaceState) {
-            return this;
-        } else {
-            return overlayedState;
-        }
-    }
-
-    /**
-     * @throws IllegalStateException if this state is a 'session' state.
-     */
-    public void checkIsWorkspaceState() {
-        if (!isWorkspaceState) {
-            throw new IllegalStateException("State " + this + " is not a 'workspace' state.");
-        }
-    }
-
-    /**
-     * @throws IllegalStateException if this state is a 'workspace' state.
-     */
-    public void checkIsSessionState() {
-        if (isWorkspaceState) {
-            throw new IllegalStateException("State " + this + " is not a 'session' state.");
-        }
-    }
-
-    /**
-     * @return true, if this state is overlaying a workspace state.
-     */
-    public boolean hasOverlayedState() {
-        return overlayedState != null;
-    }
-
-    //----------------------------------------------------< Session - State >---
-
-     * Connect this state to some underlying overlayed state.
-     */
-    private void connect(ItemState overlayedState) {
-        checkIsSessionState();
-        overlayedState.checkIsWorkspaceState();
-
-        if (this.overlayedState == null) {
-            setOverLayedState(overlayedState);
-        } else if (this.overlayedState != overlayedState) {
-            throw new IllegalStateException("Item state already connected to another underlying state: " + this);
-        } // attempt to connect state to its ol-state again -> nothing to do.
-    }
-
-    /**
-     * Replaces the overlayedState with a new instance retrieved from the
-     * persistent layer thus forcing a reload of this ItemState or in case
-     * of a NEW state, retrieves the overlayed state after the state has been
-     * persisted and connects the NEW state. Note, that in the latter case,
-     * the parent must already be connected to its overlayed state.
+     * Retrieved a fresh ItemState from the persistent layer and merge its
+     * data with this state in order to reload it. In case of a NEW state retrieving
+     * the state from the persistent layer is only possible if the state has
+     * been persisted.
-     * @throws ItemNotFoundException
-     * @throws RepositoryException
-    public void reconnect(boolean keepChanges) throws ItemNotFoundException, RepositoryException {
-        checkIsSessionState();
-        // Need to use the workspace-ISF in order not to create a session-state.
-        ItemStateFactory wspIsf;
-        if (overlayedState != null) {
-            wspIsf = overlayedState.isf;
-        } else {
-            wspIsf = getParent().overlayedState.isf;
+    public void reload(boolean keepChanges) {
+        ItemId id = getWorkspaceId();
+        ItemState tmp;
+        try {
+            if (isNode()) {
+                tmp = isf.createNodeState((NodeId) id, (NodeEntry) getHierarchyEntry());
+            } else {
+                tmp = isf.createPropertyState((PropertyId) id, (PropertyEntry) getHierarchyEntry());
+            }
+        } catch (ItemNotFoundException e) {
+            // TODO: deal with moved items separately
+            // remove hierarchyEntry (including all children and set
+            // state-status to REMOVED (or STALE_DESTROYED)
+            log.debug("Item '" + id + "' cannot be found on the persistent layer -> remove.");
+            getHierarchyEntry().remove();
+            return;
+        } catch (RepositoryException e) {
+            // TODO: rather throw? remove from parent?
+            log.warn("Exception while reloading item state: " + e);
+            log.debug("Stacktrace: ", e);
+            return;
-        ItemId id = (overlayedState == null) ? getId() : overlayedState.getId();
-        ItemState overlayed;
-        if (isNode()) {
-            overlayed = wspIsf.createNodeState((NodeId) id, (NodeEntry) getHierarchyEntry());
-        } else {
-            overlayed = wspIsf.createPropertyState((PropertyId) id, (PropertyEntry) getHierarchyEntry());
-        }
-        setOverLayedState(overlayed);
-        boolean modified = merge(overlayed, keepChanges);
+
+        boolean modified = merge(tmp, keepChanges);
-            // start notification by marking ol-state modified.
-            overlayed.setStatus(Status.MODIFIED);
+            // start notification by marking this state modified.
+            setStatus(Status.MODIFIED);
-     *
-     * @param overlayedState
-     */
-    private void setOverLayedState(ItemState overlayedState) {
-        if (this.overlayedState != null) {
-           this.overlayedState.removeListener(this);
-        }
-        this.overlayedState = overlayedState;
-        this.overlayedState.addListener(this);
-    }
-
-    /**
-        checkIsSessionState();
-

MOV31 MOV31 MOV31 MOV44 INS31 INS31 MOV50 MOV29 INS83 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 INS8 INS83 UPD43 UPD42 INS83 UPD39 UPD42 MOV29 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS65 UPD43 UPD42 INS43 UPD42 INS17 INS65 INS25 UPD65 INS43 INS42 INS60 INS61 MOV41 UPD42 INS65 UPD65 UPD65 MOV65 INS60 INS60 INS54 INS60 MOV25 UPD66 UPD42 INS42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 UPD66 UPD42 UPD42 INS42 MOV49 MOV21 MOV60 MOV21 MOV53 INS38 INS8 UPD42 INS42 INS39 INS59 INS27 INS8 UPD42 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 INS66 INS66 UPD66 INS66 MOV43 INS59 MOV43 INS59 MOV8 INS12 INS12 INS39 INS59 INS42 INS32 MOV43 MOV32 MOV14 INS32 MOV21 INS42 INS40 UPD42 MOV42 INS33 INS25 INS21 INS42 INS32 INS42 INS44 INS8 INS44 INS8 INS42 INS32 MOV8 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV27 MOV42 MOV42 INS42 INS42 INS32 MOV27 MOV8 INS7 INS42 MOV43 INS42 MOV21 MOV21 INS41 MOV43 INS42 INS21 INS21 INS41 INS42 INS42 INS42 MOV45 INS42 INS42 INS52 INS32 UPD40 INS10 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS27 INS32 UPD42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS40 UPD42 UPD42 INS45 INS42 INS45 UPD42 MOV42 UPD45 MOV45 INS42 UPD42 UPD42 DEL42 DEL43 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL39 DEL42 DEL40 DEL49 DEL40 DEL49 DEL10 DEL49 DEL50 DEL32 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL33 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL68 DEL65 DEL66 DEL42 DEL52 DEL41 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL38 DEL42 DEL43 DEL45 DEL52 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL39 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL40 DEL49 DEL42 DEL40 DEL27 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL25 DEL10 DEL40 DEL49 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL10 DEL40 DEL49 DEL42 DEL40 DEL27 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL10 DEL49 DEL42 DEL42 DEL45 DEL32 DEL27 DEL32 DEL21 DEL10 DEL50 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL42 DEL43 DEL45 DEL52 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL22 DEL42 DEL22 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL52 DEL42 DEL22 DEL42 DEL27 DEL42 DEL43 DEL52 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL52 DEL32 DEL21 DEL8 DEL31 DEL42 DEL32 DEL21