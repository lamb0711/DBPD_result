JCR-2327: java.util.UUID.fromString() too slow

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@831891 13f79535-47bb-0310-9956-ffa450edef68

+     * Chars in a UUID String.
+     */
+    public static final int UUID_FORMATTED_LENGTH = 36;
+
+    /**
-     * @see UUID#fromString(String)
+     * @see #fromString(String)
-        this(UUID.fromString(uuid));
+        this(fromString(uuid));
+    //------------------------------------------------------------< internal >
+
+    /**
+     * Constructs a UUID from a UUID formatted String.
+     *
+     * @param uuidString the String representing a UUID to construct this UUID
+     * @return the UUID created from the given string.
+     * @throws IllegalArgumentException String must be a properly formatted UUID
+     *                                  string
+     */
+    private static UUID fromString(String uuidString)
+            throws IllegalArgumentException {
+        // e.g. f81d4fae-7dec-11d0-a765-00a0c91e6bf6
+        //      012345678901234567890123456789012345
+        int len = uuidString.length();
+        if (len != UUID_FORMATTED_LENGTH) {
+            throw new IllegalArgumentException();
+        }
+        long[] words = new long[2];
+        int b = 0;
+        for (int i = 0; i < UUID_FORMATTED_LENGTH; i++) {
+            int c = uuidString.charAt(i) | 0x20; // to lowercase (will lose some error checking)
+            if (i == 8 || i == 13 || i == 23) {
+                if (c != '-') {
+                    throw new IllegalArgumentException(String.valueOf(i));
+                }
+            } else if (i == 18) {
+                if (c != '-') {
+                    throw new IllegalArgumentException(String.valueOf(i));
+                }
+                b = 1;
+            } else {
+                byte h = (byte) (c & 0x0f);
+                if (c >= 'a' && c <= 'f') {
+                    h += 9;
+                } else if (c < '0' || c > '9') {
+                    throw new IllegalArgumentException();
+                }
+                words[b] = words[b] << 4 | h;
+            }
+        }
+        return new UUID(words[0], words[1]);
+    }

INS23 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS34 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS60 INS24 INS41 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS27 INS8 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS14 INS42 INS32 INS42 INS42 INS53 INS39 INS85 INS42 INS3 INS42 INS34 INS39 INS59 INS42 INS42 INS42 INS60 INS25 INS43 INS2 INS2 INS42 INS42 INS14 INS5 INS34 INS42 INS34 INS39 INS59 INS27 INS8 INS25 INS42 INS42 INS34 INS42 INS34 INS43 INS39 INS85 INS42 INS27 INS27 INS27 INS25 INS27 INS8 INS8 INS42 INS32 INS34 INS27 INS27 INS42 INS34 INS27 INS8 INS42 INS34 INS25 INS21 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS13 INS53 INS27 INS8 INS7 INS39 INS59 INS27 INS8 INS25 INS7 INS14 INS42 INS13 INS53 INS42 INS34 INS42 INS11 INS27 INS27 INS21 INS27 INS8 INS2 INS27 INS43 INS32 INS14 INS39 INS36 INS42 INS13 INS42 INS13 INS7 INS27 INS27 INS53 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS27 INS42 INS34 INS42 INS13 INS42 INS13 INS14 INS2 INS34 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS42 INS42 DEL42 DEL42