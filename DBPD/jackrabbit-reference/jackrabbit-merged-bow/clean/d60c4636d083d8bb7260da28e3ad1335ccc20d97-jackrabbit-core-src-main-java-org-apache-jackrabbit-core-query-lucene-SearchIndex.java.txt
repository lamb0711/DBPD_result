JCR-2087: Upgrade to Java 5 as the base platform

Generify MultiIndex.update()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@777541 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.iterators.TransformIterator;
-import org.apache.commons.collections.collection.TransformedCollection;
-import org.apache.commons.collections.IteratorUtils;
-import org.apache.commons.collections.Transformer;
-        final Map aggregateRoots = new HashMap();
-        final HashSet removedUUIDs = new HashSet();
-        final Set addedUUIDs = new HashSet();
-        index.update(IteratorUtils.toList(new TransformIterator(remove,
-                new Transformer() {
-                    public Object transform(Object input) {
-                        UUID uuid = ((NodeId) input).getUUID();
-                        removedUUIDs.add(uuid);
-                        return uuid;
-                    }
-                })), IteratorUtils.toList(new TransformIterator(add,
-                new Transformer() {
-                    public Object transform(Object input) {
-                        NodeState state = (NodeState) input;
-                        if (state == null) {
-                            return null;
-                        }
-                        UUID uuid = state.getNodeId().getUUID();
-                        addedUUIDs.add(uuid);
-                        removedUUIDs.remove(uuid);
-                        Document doc = null;
-                        try {
-                            doc = createDocument(state, getNamespaceMappings(),
-                                    index.getIndexFormatVersion());
-                            retrieveAggregateRoot(state, aggregateRoots);
-                        } catch (RepositoryException e) {
-                            log.warn("Exception while creating document for node: "
-                                    + state.getNodeId() + ": " + e.toString());
-                        }
-                        return doc;
-                    }
-                })));
+        Map<UUID, NodeState> aggregateRoots = new HashMap<UUID, NodeState>();
+        Set<UUID> removedUUIDs = new HashSet<UUID>();
+        Set<UUID> addedUUIDs = new HashSet<UUID>();
+
+        Collection<UUID> removeCollection = new ArrayList<UUID>();
+        while (remove.hasNext()) {
+            UUID uuid = remove.nextNodeId().getUUID();
+            removeCollection.add(uuid);
+            removedUUIDs.add(uuid);
+        }
+
+        Collection<Document> addCollection = new ArrayList<Document>();
+        while (add.hasNext()) {
+            NodeState state = add.nextNodeState();
+            if (state != null) {
+                UUID uuid = state.getNodeId().getUUID();
+                addedUUIDs.add(uuid);
+                removedUUIDs.remove(uuid);
+                retrieveAggregateRoot(state, aggregateRoots);
+
+                try {
+                    addCollection.add(createDocument(
+                            state, getNamespaceMappings(),
+                            index.getIndexFormatVersion()));
+                } catch (RepositoryException e) {
+                    log.warn("Exception while creating document for node: "
+                            + state.getNodeId() + ": " + e.toString());
+                }
+            }
+        }
+
+        index.update(removeCollection, addCollection);
-        if (aggregateRoots.size() > 0) {
-            Collection modified = TransformedCollection.decorate(
-                    new ArrayList(),
-                    new Transformer() {
-                        public Object transform(Object input) {
-                            NodeState state = (NodeState) input;
-                            try {
-                                return createDocument(state,
-                                        getNamespaceMappings(),
-                                        index.getIndexFormatVersion());
-                            } catch (RepositoryException e) {
-                                log.warn("Exception while creating document for node: "
-                                        + state.getNodeId() + ": " + e.toString());
-                            }
-                            return null;
-                        }
-                    });
-            modified.addAll(aggregateRoots.values());
+        if (!aggregateRoots.isEmpty()) {
+            Collection<Document> modified =
+                new ArrayList<Document>(aggregateRoots.size());
+
+            for (NodeState state : aggregateRoots.values()) {
+                try {
+                    modified.add(createDocument(
+                            state, getNamespaceMappings(),
+                            index.getIndexFormatVersion()));
+                } catch (RepositoryException e) {
+                    log.warn("Exception while creating document for node: "
+                            + state.getNodeId(), e);
+                }
+            }
+
-    protected void retrieveAggregateRoot(NodeState state, Map map) {
+    protected void retrieveAggregateRoot(
+            NodeState state, Map<UUID, NodeState> map) {
-     * @param map            aggregate roots are collected in this map.
-     *                       Key=UUID, value=NodeState.
+     * @param map            aggregate roots are collected in this map
-    protected void retrieveAggregateRoot(Set removedUUIDs, Map map) {
+    protected void retrieveAggregateRoot(
+            Set<UUID> removedUUIDs, Map<UUID, NodeState> map) {
-                    Term aggregateUUIDs = new Term(
-                            FieldNames.AGGREGATED_NODE_UUID, "");
+                    Term aggregateUUIDs =
+                        new Term(FieldNames.AGGREGATED_NODE_UUID, "");
-                        Iterator it = removedUUIDs.iterator();
-                        while (it.hasNext()) {
-                            UUID uuid = (UUID) it.next();
-                            aggregateUUIDs = aggregateUUIDs.createTerm(
-                                    uuid.toString());
+                        for (UUID uuid : removedUUIDs) {
+                            aggregateUUIDs =
+                                aggregateUUIDs.createTerm(uuid.toString());
-                                Document doc = reader.document(tDocs.doc(), FieldSelectors.UUID);
-                                NodeId nId = new NodeId(UUID.fromString(
-                                        doc.get(FieldNames.UUID)));
-                                map.put(nId.getUUID(), ism.getItemState(nId));
+                                Document doc = reader.document(
+                                        tDocs.doc(), FieldSelectors.UUID);
+                                NodeId nId = new NodeId(
+                                        UUID.fromString(doc.get(FieldNames.UUID)));
+                                map.put(nId.getUUID(), (NodeState) ism.getItemState(nId));
-            log.debug("Retrieved {} aggregate roots in {} ms.",
-                    new Integer(found), new Long(time));
+            log.debug("Retrieved {} aggregate roots in {} ms.", found, time);

INS60 INS61 INS60 INS61 INS21 INS25 INS74 INS74 INS74 INS74 INS74 INS74 INS74 INS59 INS32 INS8 INS74 INS59 INS32 INS8 INS32 INS38 INS8 MOV43 INS43 INS43 UPD66 MOV43 INS43 MOV43 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 INS43 INS42 INS14 INS42 INS42 MOV60 INS21 MOV21 INS43 INS43 INS42 INS14 INS42 INS42 INS60 INS25 INS42 INS42 INS42 UPD42 MOV42 INS32 INS60 INS70 MOV21 INS42 INS42 INS42 INS42 INS42 INS74 UPD42 MOV42 INS42 INS74 INS42 INS74 INS42 UPD42 MOV42 INS74 INS32 INS42 UPD42 MOV42 INS74 MOV43 INS59 UPD27 MOV27 MOV8 UPD42 MOV42 INS42 INS74 INS59 INS44 MOV32 INS8 MOV43 INS43 MOV43 MOV43 INS43 MOV43 INS43 INS43 INS43 INS42 INS42 INS42 INS43 MOV43 INS42 INS32 INS42 INS33 MOV21 MOV43 INS43 INS42 INS14 INS43 INS42 MOV54 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS74 MOV32 INS42 INS42 INS42 MOV43 INS43 INS21 INS32 UPD42 MOV42 INS32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS70 INS27 MOV42 INS44 INS42 MOV8 MOV45 MOV32 MOV43 INS42 INS11 MOV43 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL43 DEL83 DEL42 DEL43 DEL42 DEL11 DEL36 DEL34 DEL42 DEL42 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL42 DEL41 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL14 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL1 DEL14 DEL14 DEL32 DEL32 DEL21 DEL41 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL42 DEL43 DEL83 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL11 DEL59 DEL60 DEL33 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL66 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14