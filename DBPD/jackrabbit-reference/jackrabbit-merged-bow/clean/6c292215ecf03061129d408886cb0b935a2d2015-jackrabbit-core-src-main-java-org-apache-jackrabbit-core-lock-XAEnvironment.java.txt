JCR-1634: In XA transaction session.addLockToken() does not have effect

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@775868 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Workspace;
+     * @param session 
+     * @throws RepositoryException 
-    public void addLockToken(String lt) {
+    public void addLockToken(SessionImpl session, String lt) throws RepositoryException {
+        try {
+            LockToken lockToken = LockToken.parse(lt);
+            NodeImpl node = (NodeImpl) session.getItemManager().getItem(lockToken.getId());
+            AbstractLockInfo info = getLockInfo(node);
+            if (info != null) {
+                if (info.getLockHolder() == null) {
+                    info.setLockHolder(session);
+                } else {
+                    String msg = "Cannot add lock token: lock already held by other session.";
+                    log.warn(msg);
+                    throw new LockException(msg);
+                }
+            }
+            // inform SessionLockManager
+            getSessionLockManager(session).lockTokenAdded(lt);
+        } catch (IllegalArgumentException e) {
+            String msg = "Bad lock token: " + e.getMessage();
+            log.warn(msg);
+            throw new LockException(msg);
+        }
+     * @param session 
+     * @throws RepositoryException 
-    public void removeLockToken(String lt) {
+    public void removeLockToken(SessionImpl session, String lt) throws RepositoryException {
+        try {
+            LockToken lockToken = LockToken.parse(lt);
+
+            NodeImpl node = (NodeImpl) session.getItemManager().getItem(lockToken.getId());
+            AbstractLockInfo info = getLockInfo(node);
+            if (info != null) {
+                if (session == info.getLockHolder()) {
+                    info.setLockHolder(null);
+                } else {
+                    String msg = "Cannot remove lock token: lock held by other session.";
+                    log.warn(msg);
+                    throw new LockException(msg);
+                }
+            }
+            // inform SessionLockManager
+            getSessionLockManager(session).lockTokenRemoved(lt);
+        } catch (IllegalArgumentException e) {
+            String msg = "Bad lock token: " + e.getMessage();
+            log.warn(msg);
+            throw new LockException(msg);
+        }
+    }
+
+    static SessionLockManager getSessionLockManager(SessionImpl session) throws RepositoryException {
+        Workspace wsp = (Workspace) session.getWorkspace();
+        return (SessionLockManager) wsp.getLockManager();
-                lockMgr.internalLock(node, deep, sessionScoped, getSecondsRemaining(), lockOwner);
+                AbstractLockInfo internalLock = lockMgr.internalLock(node, deep, sessionScoped, getSecondsRemaining(), lockOwner);
+                AbstractLockInfo xaEnvLock = getLockInfo(node);
+                // Check if the lockToken has been removed in the transaction ...
+                if (xaEnvLock != null && xaEnvLock.getLockHolder() == null) {
+                    internalLock.setLockHolder(null);
+                }

INS26 INS40 INS31 INS44 INS43 INS8 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS43 INS42 INS42 INS54 INS65 INS65 INS43 INS42 INS42 INS54 INS42 INS43 INS42 INS42 INS60 INS41 INS42 INS66 INS42 INS66 INS42 INS8 INS12 INS42 INS66 INS42 INS66 INS42 INS8 INS12 INS42 INS43 INS59 INS11 INS60 INS60 INS60 INS25 INS21 INS44 INS8 INS60 INS60 INS60 INS25 INS21 INS44 INS8 INS42 INS42 INS11 INS43 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS43 INS42 INS60 INS21 INS53 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS43 INS42 INS60 INS21 INS53 INS43 INS32 INS42 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS25 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS25 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 MOV8 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS27 INS27 INS42 INS32 INS42 INS32 INS32 INS33 INS21 INS60 INS21 INS53 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS21 INS60 INS21 INS53 INS45 INS32 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 DEL8 DEL8