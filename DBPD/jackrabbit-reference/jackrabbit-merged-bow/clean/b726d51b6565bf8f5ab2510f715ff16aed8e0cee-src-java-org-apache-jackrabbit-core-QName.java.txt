reimplementing Session.importXML & friends due to spec changes 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@154700 13f79535-47bb-0310-9956-ffa450edef68

-        return internalFromJCRName(rawName, resolver);
+
+        if (rawName == null || rawName.length() == 0) {
+            throw new IllegalNameException("empty name");
+        }
+
+        // parts[0]: prefix
+        // parts[1]: localName
+        String[] parts = parse(rawName);
+
+        String uri;
+        try {
+            uri = resolver.getURI(parts[0]);
+        } catch (NamespaceException nse) {
+            throw new UnknownPrefixException(parts[0]);
+        }
+
+        return new QName(uri, parts[1]);
-        try {
-            internalFromJCRName(jcrName, null);
-        } catch (UnknownPrefixException e) {
-            // ignore, will never happen
-        }
+        parse(jcrName);
-     * Parses the <code>jcrName</code>, resolves the prefix using the namespace
-     * resolver and returns a new QName instance. this method is also used
-     * internally just to check the format of the given string by passing a
-     * <code>null</code> value as <code>resolver</code>
+     * Parses the <code>jcrName</code> and returns an array of two strings:
+     * the first array element contains the prefix (or empty string),
+     * the second the local name.     
-     * @param rawName  the jcr name to parse
-     * @param resolver the namespace resolver or <code>null</code>
-     * @return a new resolved QName
-     * @throws IllegalNameException
-     * @throws UnknownPrefixException
+     * @param jcrName the name to be parsed
+     * @return An array holding two strings: the first array element contains
+     *         the prefix (or empty string), the second the local name.
+     * @throws IllegalNameException If <code>jcrName</code> is not a valid
+     *                              JCR-style name.
-    public static QName internalFromJCRName(String rawName, NamespaceResolver resolver)
-            throws IllegalNameException, UnknownPrefixException {
-
-        if (rawName == null || rawName.length() == 0) {
+    public static String[] parse(String jcrName) throws IllegalNameException {
+        if (jcrName == null || jcrName.length() == 0) {
-        String prefix = null;
-        String localName = null;
+        String prefix;
+        String localName;
-        Matcher matcher = NAME_PATTERN.matcher(rawName);
+        Matcher matcher = NAME_PATTERN.matcher(jcrName);
-            throw new IllegalNameException("'" + rawName + "' is not a valid name");
+            throw new IllegalNameException("'" + jcrName + "' is not a valid name");
-        if (resolver == null) {
-            return null;
-        } else {
-            String uri;
-            try {
-                uri = resolver.getURI(prefix);
-            } catch (NamespaceException nse) {
-                throw new UnknownPrefixException(prefix);
-            }
-
-            return new QName(uri, localName);
-        }
+        return new String[]{prefix, localName};
-

INS8 INS5 INS42 INS25 INS60 MOV60 INS54 INS41 MOV21 MOV43 INS85 UPD42 INS41 INS27 INS8 INS5 INS59 INS8 INS12 INS14 UPD66 UPD66 UPD66 UPD42 UPD66 INS66 UPD66 INS66 INS66 INS43 INS3 INS27 INS27 INS53 INS43 INS85 INS42 INS32 INS42 INS21 MOV44 INS8 MOV43 INS42 INS2 UPD42 INS42 INS5 INS4 INS42 INS33 INS32 INS34 INS14 INS42 INS42 INS42 INS7 INS53 INS42 INS34 UPD42 UPD42 INS43 INS85 INS42 INS42 MOV42 INS42 MOV43 INS45 INS42 INS32 INS14 UPD42 MOV43 INS43 MOV42 MOV42 INS42 INS2 MOV43 INS2 INS42 UPD42 INS42 INS34 INS42 INS34 DEL42 DEL32 DEL41 DEL33 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL66 DEL42 DEL66 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL33 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL14 DEL41 DEL8 DEL25