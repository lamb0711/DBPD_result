jcr-97: Improve Checkstyle conformance

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@312896 13f79535-47bb-0310-9956-ffa450edef68

- * Exports a node of type nt:file or nt:folder to the given file system path.
+ * Export a <code>Node</code> of type nt:file or nt:folder to the given file
+ * system path.
-public class ExportFileSystem implements Command
-{
-	/** logger */
-	private static Log log = LogFactory.getLog(ExportFileSystem.class);
+public class ExportFileSystem implements Command {
+    /** logger */
+    private static Log log = LogFactory.getLog(ExportFileSystem.class);
-	// ---------------------------- < keys >
+    // ---------------------------- < keys >
-	/** Node path key */
-	private String srcJcrPathKey = "srcJcrPath";
+    /** Node path key */
+    private String srcJcrPathKey = "srcJcrPath";
-	/** File system path key */
-	private String destFsPathKey = "destFsPath";
+    /** File system path key */
+    private String destFsPathKey = "destFsPath";
-	/** Overwrite flag key */
-	private String overwriteKey = "overwrite";
+    /** Overwrite flag key */
+    private String overwriteKey = "overwrite";
-	/**
-	 * @inheritDoc
-	 */
-	public boolean execute(Context ctx) throws Exception
-	{
-		String from = (String) ctx.get(this.srcJcrPathKey);
-		String to = (String) ctx.get(this.destFsPathKey);
-		boolean overwrite = Boolean
-				.valueOf((String) ctx.get(this.overwriteKey)).booleanValue();
+    /**
+     * {@inheritDoc}
+     */
+    public boolean execute(Context ctx) throws Exception {
+        String from = (String) ctx.get(this.srcJcrPathKey);
+        String to = (String) ctx.get(this.destFsPathKey);
+        boolean overwrite = Boolean
+            .valueOf((String) ctx.get(this.overwriteKey)).booleanValue();
-		if (log.isDebugEnabled())
-		{
-			log.debug("exporting node at " + from + " to the filesystem (" + to
-					+ ") overwrite=" + overwrite);
-		}
+        if (log.isDebugEnabled()) {
+            log.debug("exporting node at " + from + " to the filesystem (" + to
+                    + ") overwrite=" + overwrite);
+        }
-		Node node = CommandHelper.getNode(ctx, from);
+        Node node = CommandHelper.getNode(ctx, from);
-		File f = new File(to);
+        File f = new File(to);
-		// check if the file exists
-		if (f.exists() && !overwrite)
-		{
-			throw new CommandException("exception.file.exists", new String[]
-			{ to });
-		}
+        // check if the file exists
+        if (f.exists() && !overwrite) {
+            throw new CommandException("exception.file.exists", new String[] {
+                to
+            });
+        }
-		// export either a file or a folder
-		if (node.isNodeType("nt:file"))
-		{
-			this.createFile(node, f);
-		} else if (node.isNodeType("nt:folder"))
-		{
-			this.addFolder(node, f);
-		} else
-		{
-			throw new CommandException("exception.not.file.or.folder", new String[]
-			{ node.getPrimaryNodeType().getName() });
-		}
+        // export either a file or a folder
+        if (node.isNodeType("nt:file")) {
+            this.createFile(node, f);
+        } else if (node.isNodeType("nt:folder")) {
+            this.addFolder(node, f);
+        } else {
+            throw new CommandException("exception.not.file.or.folder",
+                new String[] {
+                    node.getPrimaryNodeType().getName()
+                });
+        }
-		return false;
-	}
+        return false;
+    }
-	/**
-	 * Exports a nt:file to the file system
-	 * 
-	 * @param node
-	 * @param file
-	 * @throws IOException
-	 * @throws CommandException
-	 * @throws ValueFormatException
-	 * @throws PathNotFoundException
-	 * @throws RepositoryException
-	 */
-	private void createFile(Node node, File file) throws IOException,
-			CommandException, ValueFormatException, PathNotFoundException,
-			RepositoryException
-	{
+    /**
+     * Exports an nt:file to the file system
+     * @param node
+     *        the <code>Node</code>
+     * @param file
+     *        the <code>File</code>
+     * @throws IOException
+     *         if an IOException occurs
+     * @throws CommandException
+     *         if the <code>File</code> can't be created
+     * @throws ValueFormatException
+     *         if a <code>Value</code> can't be retrieved
+     * @throws PathNotFoundException
+     *         if the <code>Node</code> can't be found
+     * @throws RepositoryException
+     *         if the current working <code>Repository</code> throws an
+     *         <code>Exception</code>
+     */
+    private void createFile(Node node, File file) throws IOException,
+            CommandException, ValueFormatException, PathNotFoundException,
+            RepositoryException {
-		boolean created = file.createNewFile();
-		if (!created)
-		{
-			throw new CommandException("exception.file.not.created", new String[]
-			{ file.getPath() });
-		}
-		BufferedOutputStream out = new BufferedOutputStream(
-				new FileOutputStream(file));
-		InputStream in = node.getNode("jcr:content").getProperty("jcr:data")
-				.getStream();
+        boolean created = file.createNewFile();
+        if (!created) {
+            throw new CommandException("exception.file.not.created",
+                new String[] {
+                    file.getPath()
+                });
+        }
+        BufferedOutputStream out = new BufferedOutputStream(
+            new FileOutputStream(file));
+        InputStream in = node.getNode("jcr:content").getProperty("jcr:data")
+            .getStream();
-		int c;
+        int c;
-		while ((c = in.read()) != -1)
-		{
-			out.write(c);
-		}
-		in.close();
-		out.flush();
-		out.close();
-	}
+        while ((c = in.read()) != -1) {
+            out.write(c);
+        }
+        in.close();
+        out.flush();
+        out.close();
+    }
-	/**
-	 * Exports a nt:folder and all its children to the file system
-	 * 
-	 * @param node
-	 * @param file
-	 * @throws CommandException
-	 * @throws RepositoryException
-	 * @throws IOException
-	 */
-	private void addFolder(Node node, File file) throws CommandException,
-			RepositoryException, IOException
-	{
-		boolean created = file.mkdir();
+    /**
+     * Exports a nt:folder and all its children to the file system
+     * @param node
+     *        the <code>Node</code>
+     * @param file
+     *        <code>File</code>
+     * @throws CommandException
+     *         if the <code>File</code> can't be created
+     * @throws RepositoryException
+     *         if the current working <code>Repository</code> throws an
+     *         <code>Exception</code>
+     * @throws IOException
+     *         if an IOException occurs
+     */
+    private void addFolder(Node node, File file) throws CommandException,
+            RepositoryException, IOException {
+        boolean created = file.mkdir();
-		if (!created)
-		{
-			throw new CommandException("exception.folder.not.created", new String[]
-			{ file.getPath() });
-		}
+        if (!created) {
+            throw new CommandException("exception.folder.not.created",
+                new String[] {
+                    file.getPath()
+                });
+        }
-		NodeIterator iter = node.getNodes();
-		while (iter.hasNext())
-		{
-			Node child = iter.nextNode();
-			// File
-			if (child.isNodeType("nt:file"))
-			{
-				File childFile = new File(file, child.getName());
-				createFile(child, childFile);
-			} else if (child.isNodeType("nt:folder"))
-			{
-				File childFolder = new File(file, child.getName());
-				addFolder(child, childFolder);
-			}
-		}
-	}
+        NodeIterator iter = node.getNodes();
+        while (iter.hasNext()) {
+            Node child = iter.nextNode();
+            // File
+            if (child.isNodeType("nt:file")) {
+                File childFile = new File(file, child.getName());
+                createFile(child, childFile);
+            } else if (child.isNodeType("nt:folder")) {
+                File childFolder = new File(file, child.getName());
+                addFolder(child, childFolder);
+            }
+        }
+    }
-	/**
-	 * @return Returns the overwriteKey.
-	 */
-	public String getOverwriteKey()
-	{
-		return overwriteKey;
-	}
+    /**
+     * @return the overwrite key
+     */
+    public String getOverwriteKey() {
+        return overwriteKey;
+    }
-	/**
-	 * @param overwriteKey
-	 *            Set the context attribute key for the overwrite attribute
-	 */
-	public void setOverwriteKey(String overwriteKey)
-	{
-		this.overwriteKey = overwriteKey;
-	}
+    /**
+     * @param overwriteKey
+     *        the overwrite key to set
+     */
+    public void setOverwriteKey(String overwriteKey) {
+        this.overwriteKey = overwriteKey;
+    }
-	public String getSrcJcrPathKey()
-	{
-		return srcJcrPathKey;
-	}
+    /**
+     * @return the source jcr path key
+     */
+    public String getSrcJcrPathKey() {
+        return srcJcrPathKey;
+    }
-	public void setSrcJcrPathKey(String srcJcrPathKey)
-	{
-		this.srcJcrPathKey = srcJcrPathKey;
-	}
+    /**
+     * @param srcJcrPathKey
+     *        the source jcr path key to set
+     */
+    public void setSrcJcrPathKey(String srcJcrPathKey) {
+        this.srcJcrPathKey = srcJcrPathKey;
+    }
-	public String getDestFsPathKey()
-	{
-		return destFsPathKey;
-	}
+    /**
+     * @return the destination file system path key
+     */
+    public String getDestFsPathKey() {
+        return destFsPathKey;
+    }
-	public void setDestFsPathKey(String toFsPathKey)
-	{
-		this.destFsPathKey = toFsPathKey;
-	}
+    /**
+     * @param toFsPathKey
+     *        the destination file system path key to set
+     */
+    public void setDestFsPathKey(String toFsPathKey) {
+        this.destFsPathKey = toFsPathKey;
+    }

INS29 INS29 INS29 INS29 UPD66 INS66 INS65 INS65 INS65 INS65 INS65 INS65 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS42 INS66 INS66 INS42 INS66 DEL65