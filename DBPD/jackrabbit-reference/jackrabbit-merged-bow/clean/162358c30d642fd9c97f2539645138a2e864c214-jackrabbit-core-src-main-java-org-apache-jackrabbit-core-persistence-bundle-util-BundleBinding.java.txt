JCR-1563: Data Store: UTFDataFormatException when using large minRecordLength

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@653367 13f79535-47bb-0310-9956-ffa450edef68

+    private static final int BINARY_IN_BLOB_STORE = -1;
+    private static final int BINARY_IN_DATA_STORE = -2;
+
-        
+
-        
+
-        
+
-                    if (InternalValue.USE_DATA_STORE && size == -2) {
+                    if (size == BINARY_IN_DATA_STORE) {
-                    } else if (size == -1) {
+                    } else if (size == BINARY_IN_BLOB_STORE) {
-                    if (InternalValue.USE_DATA_STORE && size == -2) {
+                    if (size == BINARY_IN_DATA_STORE) {
-                    } else if (size == -1) {
+                    } else if (size == BINARY_IN_BLOB_STORE) {
+                    BLOBFileValue blobVal = val.getBLOBFileValue();
-                        out.writeInt(-2);
-                        try {
-                            val.store(dataStore);
-                        } catch (RepositoryException e) {
-                            String msg = "Error while storing blob. id="
-                                + state.getId() + " idx=" + i + " size=" + val.getBLOBFileValue().getLength();
-                            log.error(msg, e);
-                            throw new IOException(msg);
+                        if (blobVal.isSmall()) {
+                            writeSmallBinary(out, blobVal, state, i);
+                        } else {
+                            out.writeInt(BINARY_IN_DATA_STORE);
+                            try {
+                                val.store(dataStore);
+                            } catch (RepositoryException e) {
+                                String msg = "Error while storing blob. id="
+                                    + state.getId() + " idx=" + i + " size=" + val.getBLOBFileValue().getLength();
+                                log.error(msg, e);
+                                throw new IOException(msg);
+                            }
+                            out.writeUTF(val.toString());
-                        out.writeUTF(val.toString());
-                    BLOBFileValue blobVal = val.getBLOBFileValue();
-                        out.writeInt(-1);
+                        out.writeInt(BINARY_IN_BLOB_STORE);
-                        out.writeInt((int) size);
-                        byte[] data = new byte[(int) size];
-                        try {
-                            DataInputStream in =
-                                new DataInputStream(blobVal.getStream());
-                            try {
-                                in.readFully(data);
-                            } finally {
-                                IOUtils.closeQuietly(in);
-                            }
-                        } catch (Exception e) {
-                            String msg = "Error while storing blob. id="
-                                    + state.getId() + " idx=" + i + " size=" + size;
-                            log.error(msg, e);
-                            throw new IOException(msg);
-                        }
-                        out.write(data, 0, data.length);
+                        byte[] data = writeSmallBinary(out, blobVal, state, i);
+
+    /**
+     * Write a small binary value and return the data.
+     *
+     * @param out the output stream to write
+     * @param size the size
+     * @param blobVal the binary value
+     * @param state the property state (for error messages)
+     * @param i the index (for error messages)
+     * @return the data
+     * @throws IOException if the data could not be read
+     */
+    private byte[] writeSmallBinary(DataOutputStream out, BLOBFileValue blobVal, NodePropBundle.PropertyEntry state, int i) throws IOException {
+        int size = (int) blobVal.getLength();
+        out.writeInt(size);
+        byte[] data = new byte[size];
+        try {
+            DataInputStream in =
+                new DataInputStream(blobVal.getStream());
+            try {
+                in.readFully(data);
+            } finally {
+                IOUtils.closeQuietly(in);
+            }
+        } catch (Exception e) {
+            String msg = "Error while storing blob. id="
+                    + state.getId() + " idx=" + i + " size=" + size;
+            log.error(msg, e);
+            throw new IOException(msg);
+        }
+        out.write(data, 0, data.length);
+        return data;
+    }

INS23 INS23 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS5 INS42 INS44 INS44 INS44 INS44 INS43 MOV8 INS42 MOV38 INS42 MOV38 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS85 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS41 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS40 INS39 INS59 INS42 MOV25 INS42 INS11 INS42 INS39 INS32 INS5 INS42 INS27 INS27 INS8 INS42 INS42 INS39 INS85 MOV42 INS42 MOV42 INS42 INS25 INS10 INS8 INS42 INS42 INS32 INS8 MOV8 INS60 MOV21 MOV21 INS42 INS42 INS21 MOV5 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL27 DEL27 DEL40 DEL34 DEL38 DEL27 DEL27 DEL34 DEL38 DEL34 DEL38 DEL10 DEL34 DEL38 DEL39 DEL42 DEL11 DEL39 DEL42 DEL11