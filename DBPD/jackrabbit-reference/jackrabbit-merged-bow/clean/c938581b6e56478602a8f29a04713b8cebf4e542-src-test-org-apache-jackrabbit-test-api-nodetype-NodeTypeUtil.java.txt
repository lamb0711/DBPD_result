Test cases for NodeType.canRemoveItem().

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157417 13f79535-47bb-0310-9956-ffa450edef68

+    /**
+     * Locate a child node def parsing all node types
+     *
+     * @param session:      the session to access the node types
+     * @param regardDefaultPrimaryType:
+     *                      if true, the default primary type of the returned
+     *                      <code>NodeDef</code> is according to param
+     *                      <code>defaultPrimaryType</code>. If false, the returned
+     *                      <code>NodeDef</code> might have a default primary type
+     *                      or not.
+     * @param defaultPrimaryType:
+     *                      if <code>regardDefaultPrimaryType</code> is true:
+     *                      if true, the returned <code>NodeDef</code> has a
+     *                      default primary type, else not
+     * @param residual:     if true, the returned <code>NodeDef</code> is of
+     *                      the residual name "*", else not
+     * @return
+     * @throws RepositoryException
+     */
+     * Locate a child node def parsing all node types
+     *
+     * @param session:      the session to access the node types
+     * @param isProtected:  if true, the returned <code>NodeDef</code> is
+     *                      protected, else not
+     * @param mandatory:    if true, the returned <code>NodeDef</code> is
+     *                      mandatory, else not
+     * @return the first <code>NodeDef</code> found fitting the
+     *         requirements
+     */
+    public static NodeDef locateChildNodeDef(Session session,
+                                             boolean isProtected,
+                                             boolean mandatory)
+        throws RepositoryException {
+
+        NodeTypeManager manager = session.getWorkspace().getNodeTypeManager();
+        NodeTypeIterator types = manager.getAllNodeTypes();
+
+        while (types.hasNext()) {
+            NodeType type = types.nextNodeType();
+            NodeDef nodeDefs[] = type.getDeclaredChildNodeDefs();
+
+            for (int i = 0; i < nodeDefs.length; i++) {
+                NodeDef nodeDef = nodeDefs[i];
+
+                if (nodeDef.getName().equals("*")) {
+                    continue;
+                }
+
+                if (isProtected && !nodeDef.isProtected()) {
+                    continue;
+                }
+                if (!isProtected && nodeDef.isProtected()) {
+                    continue;
+                }
+
+                if (mandatory && !nodeDef.isMandatory()) {
+                    continue;
+                }
+                if (!mandatory && nodeDef.isMandatory()) {
+                    continue;
+                }
+
+                return nodeDef;
+            }
+        }
+        return null;
+    }
+
+    /**
+                if (residual && !propDef.getName().equals("*")) {
+                    continue;
+                }
+
+                return propDef;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Locate a property def parsing all node types
+     *
+     * @param session:      the session to access the node types
+     * @param isProtected:  if true, the returned <code>PropertyDef</code> is
+     *                      protected, else not
+     * @param mandatory:    if true, the returned <code>PropertyDef</code> is
+     *                      mandatory, else not
+     * @return the first <code>PropertyDef</code> found fitting the
+     *         requirements
+     */
+    public static PropertyDef locatePropertyDef(Session session,
+                                                boolean isProtected,
+                                                boolean mandatory)
+            throws RepositoryException {
+
+        NodeTypeManager manager = session.getWorkspace().getNodeTypeManager();
+        NodeTypeIterator types = manager.getAllNodeTypes();
+
+        while (types.hasNext()) {
+            NodeType type = types.nextNodeType();
+            PropertyDef propDefs[] = type.getDeclaredPropertyDefs();
+            for (int i = 0; i < propDefs.length; i++) {
+                PropertyDef propDef = propDefs[i];
+
+                if (propDef.getName().equals("*")) {
+                    continue;
+                }
+
+                if (isProtected && !propDef.isProtected()) {
+                    continue;
+                }
+                if (!isProtected && propDef.isProtected()) {
+                    continue;
+                }
+
+                if (mandatory && !propDef.isMandatory()) {
+                    continue;
+                }
+                if (!mandatory && propDef.isMandatory()) {
+                    continue;
+                }
+

INS31 INS31 INS29 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS60 INS61 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS60 INS61 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS33 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS24 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS24 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS85 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS25 INS25 INS25 INS25 INS41 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS85 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS25 INS25 INS25 INS25 INS41 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS2 INS32 INS42 INS45 INS18 INS42 INS38 INS18 INS38 INS32 INS18 INS42 INS38 INS18 INS38 INS32 INS18 INS42 INS38 INS18 INS42 INS42 INS2 INS32 INS42 INS45 INS18 INS42 INS38 INS18 INS38 INS32 INS18 INS42 INS38 INS18 INS38 INS32 INS18 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42