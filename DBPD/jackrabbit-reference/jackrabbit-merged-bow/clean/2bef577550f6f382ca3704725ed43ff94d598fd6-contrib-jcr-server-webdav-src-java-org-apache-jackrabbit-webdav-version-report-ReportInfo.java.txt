JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Element;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.apache.jackrabbit.webdav.xml.Namespace;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+
+import java.util.Iterator;
+import java.util.ArrayList;
+import java.util.List;
-public class ReportInfo {
+public class ReportInfo implements XmlSerializable {
-    private final Element reportElement;
+    private final String typeLocalName;
+    private final Namespace typeNamespace;
+    private final DavPropertyNameSet propertyNames;
+    private final List content = new ArrayList();
-     * Create a new <code>ReportInfo</code> object.
+     * Create a new <code>ReportInfo</code>
+     *
+     * @param type
+     */
+    public ReportInfo(ReportType type) {
+        this(type, DavConstants.DEPTH_0, null);
+    }
+
+    /**
+     * Create a new <code>ReportInfo</code>
+     *
+     * @param type
+     * @param depth
+     */
+    public ReportInfo(ReportType type, int depth) {
+        this(type, depth, null);
+    }
+
+    /**
+     * Create a new <code>ReportInfo</code>
+     *
+     * @param type
+     * @param depth
+     * @param propertyNames
+     */
+    public ReportInfo(ReportType type, int depth, DavPropertyNameSet propertyNames) {
+        this.typeLocalName = type.getLocalName();
+        this.typeNamespace = type.getNamespace();
+        this.depth = depth;
+        if (propertyNames != null) {
+            this.propertyNames = new DavPropertyNameSet(propertyNames);
+        } else {
+            this.propertyNames = new DavPropertyNameSet();
+        }
+    }
+
+    /**
+     * Create a new <code>ReportInfo</code> object from the given Xml element.
-        this.reportElement = reportElement;
+        if (reportElement == null) {
+            throw new IllegalArgumentException("Report request body must not be null.");
+        }
+
+        this.typeLocalName = reportElement.getLocalName();
+        this.typeNamespace = DomUtil.getNamespace(reportElement);
+        Element propElement = DomUtil.getChildElement(reportElement, DavConstants.XML_PROP, DavConstants.NAMESPACE);
+        if (propElement != null) {
+            propertyNames = new DavPropertyNameSet(propElement);
+            reportElement.removeChild(propElement);
+        } else {
+            propertyNames = new DavPropertyNameSet();
-    /**
-     * Returns the Xml element specifying the requested report.
-     *
-     * @return reportElement
-     */
-    public Element getReportElement() {
-        return reportElement;
+        ElementIterator it = DomUtil.getChildren(reportElement);
+        while (it.hasNext()) {
+            Element el = it.nextElement();
+            if (!DavConstants.XML_PROP.equals(el.getLocalName())) {
+                content.add(el);
+            }
+        }
+     * Name of the report type that will be / has been requested.
+     *
+     * @return Name of the report type
+     */
+    public String getReportName() {
+        return DomUtil.getQualifiedName(typeLocalName, typeNamespace);
+    }
+
+    /**
+     * Indicates whether this info contains an element with the given name/namespace.
+     *
+     * @param localName
+     * @param namespace
+     * @return true if an element with the given name/namespace is present in the
+     * body of the request info.
+     */
+    public boolean containsContentElement(String localName, Namespace namespace) {
+        if (content.isEmpty()) {
+            return false;
+        }
+        Iterator it = content.iterator();
+        while (it.hasNext()) {
+            Element elem = (Element)it.next();
+            boolean sameNamespace = (namespace == null) ? elem.getNamespaceURI() == null : namespace.isSame(elem.getNamespaceURI());
+            if (sameNamespace && elem.getLocalName().equals(localName)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Retrieves the Xml element with the given name/namespace that is a child
+     * of this info. If no such child exists <code>null</code> is returned. If
+     * multiple elements with the same name exist, the first one is returned.
+     *
+     * @param localName
+     * @param namespace
+     * @return Xml element with the given name/namespace or <code>null</code>
+     */
+    public Element getContentElement(String localName, Namespace namespace) {
+        List values = getContentElements(localName, namespace);
+        if (values.isEmpty()) {
+            return null;
+        } else {
+            return (Element)values.get(0);
+        }
+    }
+
+    /**
+     * Returns a list containing all child Xml elements of this info that have
+     * the specified name/namespace. If this info contains no such element,
+     * an empty list is returned.
+     *
+     * @param localName
+     * @param namespace
+     * @return List contain all child elements with the given name/namespace
+     * or an empty list.
+     */
+    public List getContentElements(String localName, Namespace namespace) {
+        List l = new ArrayList();
+        Iterator it = content.iterator();
+        while (it.hasNext()) {
+            Element elem = (Element)it.next();
+            if (DomUtil.matches(elem, localName, namespace)) {
+                l.add(elem);
+            }
+        }
+        return l;
+    }
+
+    /**
+     * Add the specified Xml element as child of this info.
+     *
+     * @param contentElement
+     */
+    public void setContentElement(Element contentElement) {
+        content.add(contentElement);
+    }
+
+    /**
-        Element propElement = reportElement.getChild(DavConstants.XML_PROP, DavConstants.NAMESPACE);
-        if (propElement != null) {
-            return new DavPropertyNameSet(propElement);
-        } else {
-            return new DavPropertyNameSet();
-        }
+        return propertyNames;
+
+
+    /**
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     * @param document
+     */
+    public Element toXml(Document document) {
+        Element reportElement = DomUtil.createElement(document, typeLocalName, typeNamespace);
+        if (!content.isEmpty()) {
+            Iterator it = content.iterator();
+            while (it.hasNext()) {
+                Object contentEntry = it.next();
+                if (contentEntry instanceof Node) {
+                    Node n = document.importNode((Node)contentEntry, true);
+                    reportElement.appendChild(n);
+                }
+                // else: another object. this should never occure and is therefore ignored.
+            }
+        }
+        if (!propertyNames.isEmpty()) {
+            reportElement.appendChild(propertyNames.toXml(document));
+        }
+        return reportElement;
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS43 INS29 INS83 INS42 INS44 INS8 INS29 INS83 INS42 INS44 INS44 INS8 INS29 INS83 INS42 INS44 INS44 INS44 INS8 INS43 UPD42 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 MOV43 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 MOV43 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS14 INS65 INS65 INS43 INS42 INS17 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS17 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS21 INS21 MOV21 INS25 INS25 INS21 INS21 INS60 INS25 INS60 INS61 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS60 INS61 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS25 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS61 INS41 INS65 INS65 INS43 INS42 INS21 INS41 INS65 INS65 INS43 INS42 INS60 INS25 INS25 MOV41 INS43 INS66 INS42 INS42 INS42 INS40 INS33 INS66 INS42 INS42 INS42 INS42 INS42 INS33 INS66 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS27 INS8 MOV8 UPD66 INS27 INS8 INS7 INS7 MOV43 INS59 MOV27 MOV8 INS8 INS43 INS59 INS32 INS8 UPD66 UPD66 INS32 INS66 INS42 INS42 INS66 INS66 INS42 INS42 INS32 INS8 INS43 INS59 INS32 INS8 INS9 INS66 INS66 INS66 INS42 INS42 INS66 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS66 INS66 INS66 INS42 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS66 INS42 INS42 INS32 INS42 INS68 INS42 INS42 INS43 INS59 INS38 INS8 INS38 INS8 INS42 INS22 INS32 INS22 INS32 INS42 INS33 INS21 INS21 INS42 INS33 INS53 INS32 INS22 INS32 INS22 INS42 INS42 INS32 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS41 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS40 INS42 INS69 INS42 INS42 INS32 INS32 INS60 INS61 INS32 INS21 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS7 INS7 INS14 UPD42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS40 INS40 INS7 INS32 INS7 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS9 INS42 INS42 INS43 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS33 INS11 INS43 INS42 INS42 INS43 INS59 INS32 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS22 INS14 INS22 MOV14 INS43 INS45 INS42 MOV14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS11 INS42 INS16 INS42 INS32 INS41 INS43 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS52 INS42 INS43 INS42 INS52 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS32 INS32 INS43 INS32 INS36 INS27 INS32 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS34 INS43 INS32 INS32 INS42 INS42 INS43 INS59 INS62 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS60 INS21 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS9 INS43 INS42 INS42 DEL41 DEL42 DEL41 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL25