work in progress

- sync (JCR-482)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@447377 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.SessionNamespaceResolver;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.SessionNamespaceResolver;
+
+import org.xml.sax.helpers.AttributesImpl;
+import java.util.HashMap;
+import java.util.Map;
+
+     * the set of namespace declarations that have already been serialized
+     */
+    protected NamespaceStack namespaces;
+
+    /**
+        // start with an empty set of known prefixes
+        this.namespaces = new NamespaceStack(null);
+     * Adds explicit <code>xmlns:prefix="uri"</code> attributes to the
+     * XML element as required (e.g., normally just on the root
+     * element). The effect is the same as setting the
+     * "<code>http://xml.org/sax/features/namespace-prefixes</code>"
+     * property on an SAX parser.
+     *
+     * @param level level of the current XML element
+     * @param attributes attributes of the current XML element
+     * @throws RepositoryException on a repository error
+     */
+    protected void addNamespacePrefixes(int level, AttributesImpl attributes)
+            throws RepositoryException {
+        String[] prefixes = session.getNamespacePrefixes();
+        NamespaceStack newNamespaces = null;
+
+        for (int i = 0; i < prefixes.length; i++) {
+            String prefix = prefixes[i];
+
+            if (prefix.length() > 0
+                    && !QName.NS_XML_PREFIX.equals(prefix)) {
+                String uri = session.getNamespaceURI(prefix);
+
+                // get the matching namespace from previous declarations
+                String mappedToNs = this.namespaces.getNamespaceURI(prefix);
+
+                if (!uri.equals(mappedToNs)) {
+                    // when not the same, add a declaration
+                    attributes.addAttribute(
+                        QName.NS_XMLNS_URI,
+                        prefix,
+                        QName.NS_XMLNS_PREFIX + ":" + prefix,
+                        "CDATA",
+                        uri);
+
+                    if (newNamespaces == null) {
+                        // replace current namespace stack when needed
+                        newNamespaces = new NamespaceStack(this.namespaces);
+                        this.namespaces = newNamespaces;
+                    }
+
+                    // remember the new declaration
+                    newNamespaces.setNamespacePrefix(prefix, uri);
+                }
+            }
+        }
+    }
+
+    /**
-                Node childNode = nodeIter.nextNode();
+                Node childNode = nodeIter.nextNode();
+                // remember the current namespace declarations
+                NamespaceStack previousNamespaces = this.namespaces;
+
+
+                // restore the effective namespace declarations
+                // (from before visiting the child node)
+                this.namespaces = previousNamespaces;
+    /**
+     * Implements a simple stack of namespace declarations.
+     */
+    private static class NamespaceStack {
+
+        /**
+         * Parent stack (may be <code>null</code>)
+         */
+        private final NamespaceStack parent;
+
+        /**
+         * Local namespace declarations.
+         */
+        private final Map namespaces;
+
+        /**
+         * Instantiate a new stack
+         *
+         * @param parent parent stack (may be <code>null</code> for the initial stack)
+         */
+        public NamespaceStack(NamespaceStack parent) {
+            this.parent = parent;
+            this.namespaces = new HashMap();
+        }
+
+        /**
+         * Obtain namespace URI for a prefix
+         *
+         * @param prefix prefix
+         * @return namespace URI (or <code>null</code> when unknown)
+         */
+        public String getNamespaceURI(String prefix) {
+            String namespace = (String) namespaces.get(prefix);
+            if (namespace != null) {
+                // found in this element, return right away
+                return namespace;
+            } else if (parent != null) {
+                // ask parent, when present
+                return parent.getNamespaceURI(prefix);
+            } else {
+                return null;
+            }
+        }
+
+        /**
+         * Add a new prefix mapping
+         *
+         * @param prefix namespace prefix
+         * @param uri namespace URI
+         */
+        public void setNamespacePrefix(String prefix, String uri) {
+            namespaces.put(prefix, uri);
+        }
+
+    }
+

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS55 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS65 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS42 INS60 INS60 INS24 INS65 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS66 INS7 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS66 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS25 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS22 INS14 INS43 INS85 INS42 INS32 INS42 INS42 INS33 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS66 INS66 INS66 INS42 INS66 INS42 INS7 INS7 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS25 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS52 INS42 INS43 INS33 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS27 INS8 INS22 INS42 INS22 INS14 INS42 INS42 INS11 INS42 INS33 INS41 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS27 INS38 INS60 INS60 INS25 INS60 INS21 INS52 INS42 INS52 INS42 INS43 INS43 INS32 INS42 INS42 INS33 INS41 INS41 INS42 INS42 INS32 INS34 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS25 INS21 INS42 INS42 INS22 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS40 INS42 INS27 INS45 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS7 INS7 INS42 INS14 INS22 INS42 INS43 INS22 INS52 INS42 INS42 INS52 INS42