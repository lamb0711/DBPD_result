JCR-3115: add test case for breaking and fixing version storage (also add hook for running consistency check in "fix" mode)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1185228 13f79535-47bb-0310-9956-ffa450edef68

+import java.sql.SQLException;
+import javax.jcr.ItemNotFoundException;
-        // remove the bundle for /test/missing directly in the database
-        Connection conn = DriverManager.getConnection("jdbc:derby:" + TEST_DIR
-                + "/workspaces/default/db");
-        PreparedStatement prep = conn
-                .prepareStatement("delete from DEFAULT_BUNDLE  where NODE_ID_HI=? and NODE_ID_LO=?");
-        prep.setLong(1, id.getMostSignificantBits());
-        prep.setLong(2, id.getLeastSignificantBits());
-        prep.executeUpdate();
-        conn.close();
+        destroyBundle(id, "workspaces/default");
-            ConsistencyReport r = TestHelper.checkConsistency(s);
+            ConsistencyReport r = TestHelper.checkConsistency(s, false);
+    }
+    public void testMissingVHR() throws Exception {
+
+        // new repository
+        TransientRepository rep = new TransientRepository(new File(TEST_DIR));
+        Session s = openSession(rep, false);
+
+        String oldVersionRecoveryProp = System
+                .getProperty("org.apache.jackrabbit.version.recovery");
+
+        try {
+            Node root = s.getRootNode();
+
+            // add nodes /test and /test/missing
+            Node test = root.addNode("test");
+            test.addMixin("mix:versionable");
+
+            s.save();
+
+            Node vhr = s.getWorkspace().getVersionManager()
+                    .getVersionHistory(test.getPath());
+
+            assertNotNull(vhr);
+
+            Node brokenNode = vhr;
+            String vhrRootVersionId = vhr.getNode("jcr:rootVersion").getIdentifier();
+            
+            UUID destroy = UUID.fromString(brokenNode.getIdentifier());
+            s.logout();
+            
+            destroyBundle(destroy, "version");
+
+            s = openSession(rep, false);
+
+            ConsistencyReport report = TestHelper.checkVersionStoreConsistency(s, false);
+            assertTrue("Report should have reported broken nodes", !report.getItems().isEmpty());
+            
+            try {
+                test = s.getRootNode().getNode("test");
+                vhr = s.getWorkspace().getVersionManager()
+                        .getVersionHistory(test.getPath());
+                fail("should not get here");
+            } catch (Exception ex) {
+                // expected
+            }
+
+            s.logout();
+
+            System.setProperty("org.apache.jackrabbit.version.recovery", "true");
+
+            s = openSession(rep, false);
+
+            test = s.getRootNode().getNode("test");
+            // versioning should be disabled now
+            assertFalse(test.isNodeType("mix:versionable"));
+            
+            try {
+                // try to enable versioning again
+                test.addMixin("mix:versionable");
+                s.save();
+                
+                fail("enabling versioning succeeded unexpectedly");
+            }
+            catch (Exception e) {
+                // we expect this to fail
+            }
+            
+            s.logout();
+            
+            // now redo after running fixup on versioning storage
+            s = openSession(rep, false);
+
+            report = TestHelper.checkVersionStoreConsistency(s, true);
+            assertTrue("Report should have reported broken nodes", !report.getItems().isEmpty());
+            int reportitems = report.getItems().size();
+            
+            // problems should now be fixed
+            report = TestHelper.checkVersionStoreConsistency(s, false);
+            assertTrue("Some problems should have been fixed but are not: " + report, report.getItems().size() < reportitems);
+            
+            test = s.getRootNode().getNode("test");
+            // versioning should be disabled now
+            assertFalse(test.isNodeType("mix:versionable"));
+            
+            // try to enable versioning again
+            test.addMixin("mix:versionable");
+            s.save();
+            
+            Node oldRootVersion = s.getNodeByIdentifier(vhrRootVersionId);
+            try {
+                String path = oldRootVersion.getPath();
+                fail("got path " + path + " for a node believed to be orphaned");
+            }
+            catch (ItemNotFoundException ex) {
+                // orphaned
+            }
+            
+            Node newRootVersion = s.getWorkspace().getVersionManager()
+                    .getVersionHistory(test.getPath()).getRootVersion();
+            assertFalse(
+                    "new root version should be a different node than the one destroyed by the test case",
+                    newRootVersion.getIdentifier().equals(vhrRootVersionId));
+            assertNotNull("new root version should have a intact path",
+                    newRootVersion.getPath());
+        } finally {
+            s.logout();
+            System.setProperty("org.apache.jackrabbit.version.recovery",
+                    oldVersionRecoveryProp == null ? ""
+                            : oldVersionRecoveryProp);
+        }
-        // remove the bundle for /test/missing directly in the database
-        Connection conn = DriverManager.getConnection("jdbc:derby:" + TEST_DIR
-                + "/workspaces/default/db");
-        PreparedStatement prep = conn
-                .prepareStatement("delete from DEFAULT_BUNDLE  where NODE_ID_HI=? and NODE_ID_LO=?");
-        prep.setLong(1, id.getMostSignificantBits());
-        prep.setLong(2, id.getLeastSignificantBits());
-        prep.executeUpdate();
-        conn.close();
+        destroyBundle(id, "workspaces/default");
+    }
+    private void destroyBundle(UUID id, String where) throws SQLException {
+        Connection conn = DriverManager.getConnection("jdbc:derby:" + TEST_DIR
+                + "/" + where + "/db");
+        String table = where.equals("version") ? "VERSION_BUNDLE" : "DEFAULT_BUNDLE";
+        PreparedStatement prep = conn.prepareStatement("delete from " + table
+                + " where NODE_ID_HI=? and NODE_ID_LO=?");
+        prep.setLong(1, id.getMostSignificantBits());
+        prep.setLong(2, id.getLeastSignificantBits());
+        prep.executeUpdate();
+        conn.close();
-

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS43 INS8 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS60 INS60 INS60 INS54 INS21 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 MOV21 MOV21 MOV21 MOV21 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS32 INS42 INS42 MOV43 INS59 INS43 INS59 MOV43 INS59 UPD42 MOV42 INS45 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS21 INS21 INS60 INS21 INS60 INS60 INS60 INS21 INS21 INS21 INS60 INS21 INS54 INS21 INS21 INS21 INS21 INS21 INS54 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS54 INS60 INS21 INS21 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS32 INS42 INS42 INS16 INS42 INS32 INS43 INS14 INS42 INS42 INS9 INS42 INS42 INS45 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS7 INS43 INS59 INS32 INS8 INS12 INS32 INS32 INS7 INS7 INS32 INS8 INS12 INS32 INS7 INS7 INS32 INS39 INS59 INS7 INS32 INS7 INS32 INS32 INS32 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS42 INS27 INS32 INS45 INS45 INS42 INS42 INS27 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS38 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS32 INS42 INS32 INS42 INS32 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS38 INS42 INS32 INS42 INS32 INS42 INS27 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS60 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS45 INS16 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS45 INS42 INS45 INS9 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS32 INS7 INS7 INS32 INS43 INS42 INS42 INS42 INS9 INS32 INS42 INS45 INS42 INS42 INS45 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL34 DEL42 DEL32 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60