Clean up exceptions thrown by a remote repository to avoid deserialization problems.
(applying patch supplied by jukka)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@152652 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.AccessDeniedException;
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.InvalidSerializedDataException;
+import javax.jcr.ItemExistsException;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.LoginException;
+import javax.jcr.MergeException;
+import javax.jcr.NamespaceException;
+import javax.jcr.NoSuchWorkspaceException;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.ReferentialIntegrityException;
+import javax.jcr.RepositoryException;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.ValueFormatException;
+import javax.jcr.lock.LockException;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.nodetype.NoSuchNodeTypeException;
+import javax.jcr.query.InvalidQueryException;
+import javax.jcr.version.VersionException;
+    
+    /**
+     * Returns a cleaned version of the given exception. In some cases
+     * the underlying repository implementation may throw exceptions
+     * that are either unserializable, use exception subclasses that are
+     * only locally available, contain references to unserializable or
+     * only locally available classes. This method returns a cleaned
+     * version of such an exception. The returned exception contains only
+     * the message string from the original exception, and uses the public
+     * JCR exception class that most specifically matches the original
+     * exception.
+     * 
+     * @param ex the original exception
+     * @return clean exception
+     */
+    protected RepositoryException getRepositoryException(
+            RepositoryException ex) {
+        if (ex instanceof AccessDeniedException) {
+            return new AccessDeniedException(ex.getMessage());
+        } else if (ex instanceof ConstraintViolationException) {
+            return new ConstraintViolationException(ex.getMessage());
+        } else if (ex instanceof InvalidItemStateException) {
+            return new InvalidItemStateException(ex.getMessage());
+        } else if (ex instanceof InvalidQueryException) {
+            return new InvalidQueryException(ex.getMessage());
+        } else if (ex instanceof InvalidSerializedDataException) {
+            return new InvalidSerializedDataException(ex.getMessage());
+        } else if (ex instanceof ItemExistsException) {
+            return new ItemExistsException(ex.getMessage());
+        } else if (ex instanceof ItemNotFoundException) {
+            return new ItemNotFoundException(ex.getMessage());
+        } else if (ex instanceof LockException) {
+            return new LockException(ex.getMessage());
+        } else if (ex instanceof LoginException) {
+            return new LoginException(ex.getMessage());
+        } else if (ex instanceof MergeException) {
+            return new MergeException(ex.getMessage());
+        } else if (ex instanceof NamespaceException) {
+            return new NamespaceException(ex.getMessage());
+        } else if (ex instanceof NoSuchNodeTypeException) {
+            return new NoSuchNodeTypeException(ex.getMessage());
+        } else if (ex instanceof NoSuchWorkspaceException) {
+            return new NoSuchWorkspaceException(ex.getMessage());
+        } else if (ex instanceof PathNotFoundException) {
+            return new PathNotFoundException(ex.getMessage());
+        } else if (ex instanceof ReferentialIntegrityException) {
+            return new ReferentialIntegrityException(ex.getMessage());
+        } else if (ex instanceof UnsupportedRepositoryOperationException) {
+            return new UnsupportedRepositoryOperationException(ex.getMessage());
+        } else if (ex instanceof ValueFormatException) {
+            return new ValueFormatException(ex.getMessage());
+        } else if (ex instanceof VersionException) {
+            return new VersionException(ex.getMessage());
+        } else {
+            return new RepositoryException(ex.getMessage());
+        }
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS62 INS8 INS25 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS25 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS62 INS8 INS8 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS43 INS41 INS41 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS14 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42