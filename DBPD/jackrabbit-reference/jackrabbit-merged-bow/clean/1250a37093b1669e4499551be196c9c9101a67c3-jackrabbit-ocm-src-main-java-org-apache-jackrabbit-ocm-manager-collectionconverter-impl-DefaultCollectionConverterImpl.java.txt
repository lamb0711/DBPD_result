Add better suppport of Map. From now, it is not necessary to use an id for object that will be used inside a map. 

See the AnnotationHashMapTest to get an example. 



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@689932 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ItemExistsException;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.lock.LockException;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.version.VersionException;
-        Iterator collectionIterator = objects.getIterator();
+        if (objects instanceof ManageableCollection)
+           insertManageableCollection(session, objects, collectionNode, elementClassDescriptor);
+        else 
+           insertManageableMap(session, objects, collectionNode);
+        	
+    }
+
+	private void insertManageableCollection(Session session,
+			ManageableObjects objects, Node collectionNode,
+			ClassDescriptor elementClassDescriptor) {
+		Iterator collectionIterator = objects.getIterator();
-    }
+	}
+	
+	private void insertManageableMap(Session session, ManageableObjects objects, Node collectionNode) {
+
+		
+		Map map = (Map) objects.getObjects(); 
+		for (Object key : map.keySet())
+		{
+			Object item = map.get(key);
+			objectConverter.insert(session, collectionNode, key.toString(), item);
+			
+		}
+	}
+    	if (objects instanceof ManageableCollection)
+           updateManagableCollection(session, parentNode, collectionDescriptor, objects, jcrName);
+    	else
+    	   updateManagableMap(session, parentNode, collectionDescriptor, objects, jcrName);
+    		
+    }
-        ClassDescriptor elementClassDescriptor = mapper.getClassDescriptorByClass( ReflectionUtils.forName(collectionDescriptor.getElementClassName()));
+	private void updateManagableCollection(Session session, Node parentNode,
+			CollectionDescriptor collectionDescriptor,
+			ManageableObjects objects, String jcrName)
+			throws PathNotFoundException, RepositoryException,
+			VersionException, LockException, ConstraintViolationException,
+			ItemExistsException {
+		ClassDescriptor elementClassDescriptor = mapper.getClassDescriptorByClass( ReflectionUtils.forName(collectionDescriptor.getElementClassName()));
-        //  If the collection elements have not an id, it is not possible to find the matching JCR nodes => delete the complete collection
+        //  If the collection elements have not an id, it is not possible to find the matching JCR nodes 
+        //  => delete the complete collection
-    }
+	}
+	
+	
+	private void updateManagableMap(Session session, Node parentNode,
+									CollectionDescriptor collectionDescriptor,
+									ManageableObjects objects, String jcrName)
+									throws PathNotFoundException, RepositoryException,
+									VersionException, LockException, ConstraintViolationException,
+									ItemExistsException {
+		
+		
+		ClassDescriptor elementClassDescriptor = mapper.getClassDescriptorByClass( ReflectionUtils.forName(collectionDescriptor.getElementClassName()));
+        Node collectionNode = parentNode.getNode(jcrName);
+
+        Map map = (Map) objects.getObjects(); 
+        Map updatedItems = new HashMap();
+		for (Object key : map.keySet())
+		{
+			Object item = map.get(key);
+			// Update existing JCR Nodes
+            if (collectionNode.hasNode(key.toString())) {
+                objectConverter.update(session, collectionNode, key.toString(), item);
+            }
+            else {
+                // Add new collection elements
+                objectConverter.insert(session, collectionNode, key.toString(), item);
+            } 
+            updatedItems.put(key.toString(), item);
+		}
+
+		// Delete the nodes that are not present in the Map 
+        NodeIterator nodeIterator = collectionNode.getNodes();
+        List removeNodes = new ArrayList();
+        while (nodeIterator.hasNext()) {
+            Node child = nodeIterator.nextNode();
+            if (!updatedItems.containsKey(child.getName())) {
+                    removeNodes.add(child);
+            }
+        }
+        for(int i = 0; i < removeNodes.size(); i++) {
+            ((Node) removeNodes.get(i)).remove();
+        }
+
+	}
-            else {
-            	ClassDescriptor elementClassDescriptor = mapper.getClassDescriptorByClass(elementClass);
-            	if (!elementClassDescriptor.hasIdField())
-            	{
-            		throw new JcrMappingException("Impossible to use a map for the field : "
-            				                      + collectionDescriptor.getFieldName()
-            				                      + " in the class : " + collectionDescriptor.getCollectionClassName()
-            				                      + ". The element objects have no id field (check their OCM mapping).");
-            	}
-            	Object elementId = ReflectionUtils.getNestedProperty(item,
-            			                           elementClassDescriptor.getIdFieldDescriptor().getFieldName());
-                ((ManageableMap) objects).addObject(elementId, item);
-            }
+            else 
+            	((ManageableMap) objects).addObject(itemNode.getName(), item);
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS44 INS8 INS83 INS39 INS42 MOV44 INS44 INS44 INS44 MOV8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 MOV29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 UPD83 UPD42 INS44 INS43 INS43 INS43 INS43 INS43 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS8 INS43 INS42 MOV25 MOV60 MOV25 MOV60 MOV60 INS25 INS43 INS42 INS43 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS70 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 MOV60 MOV25 MOV25 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS70 INS60 INS60 INS61 INS24 INS42 INS62 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS62 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS44 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS58 INS27 INS37 INS8 INS42 INS43 INS32 INS32 INS42 INS42 INS11 INS43 INS42 INS42 INS42 INS60 INS21 INS42 INS43 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS14 MOV43 INS42 INS42 INS42 INS60 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS60 INS25 INS39 INS59 INS42 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS43 INS43 INS59 INS32 INS8 INS8 INS32 INS42 INS42 INS43 INS43 INS59 INS38 INS8 INS42 INS34 INS42 INS42 INS32 MOV21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS11 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8