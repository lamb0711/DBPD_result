JCR-94: Versioning support for JCR-RMI, contributed by Felix Meschberger.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159670 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Session;
+import javax.jcr.version.Version;
+import org.apache.jackrabbit.rmi.remote.RemoteVersion;
+import org.apache.jackrabbit.rmi.remote.RemoteVersionHistory;
-            return getFactory().getRemoteNode(node.addNode(path));
+            return getRemoteNode(node.addNode(path));
-            return getFactory().getRemoteNode(node.addNode(path, type));
+            return getRemoteNode(node.addNode(path, type));
-            return getFactory().getRemoteNode(node.getNode(path));
+            return getRemoteNode(node.getNode(path));
+    public RemoteVersion checkin() throws RepositoryException, RemoteException {
+        try {
+            return getFactory().getRemoteVersion(node.checkin());
+        } catch (RepositoryException ex) {
+            throw getRepositoryException(ex);
+        }
+    }
+
+    /** {@inheritDoc} */
+    public void cancelMerge(String versionUUID)
+            throws RepositoryException, RemoteException {
+        try {
+            node.cancelMerge(getVersionByUUID(versionUUID));
+        } catch (RepositoryException ex) {
+            throw getRepositoryException(ex);
+        }
+    }
+
+    /** {@inheritDoc} */
+    public void doneMerge(String versionUUID)
+            throws RepositoryException, RemoteException {
+        try {
+            node.doneMerge(getVersionByUUID(versionUUID));
+        } catch (RepositoryException ex) {
+            throw getRepositoryException(ex);
+        }
+    }
+
+    /** {@inheritDoc} */
+    public void restoreByUUID(String versionUUID, boolean removeExisting)
+            throws RepositoryException, RemoteException {
+        try {
+            node.restore(getVersionByUUID(versionUUID), removeExisting);
+        } catch (RepositoryException ex) {
+            throw getRepositoryException(ex);
+        }
+    }
+
+    /** {@inheritDoc} */
+    public void restore(String versionUUID, String path, boolean removeExisting)
+            throws RepositoryException, RemoteException {
+        try {
+            node.restore(getVersionByUUID(versionUUID), path, removeExisting);
+        } catch (RepositoryException ex) {
+            throw getRepositoryException(ex);
+        }
+    }
+
+    /** {@inheritDoc} */
+    public RemoteVersionHistory getVersionHistory()
+            throws RepositoryException, RemoteException {
+        try {
+            return getFactory().getRemoteVersionHistory(node.getVersionHistory());
+        } catch (RepositoryException ex) {
+            throw getRepositoryException(ex);
+        }
+    }
+    
+    /** {@inheritDoc} */
+    public RemoteVersion getBaseVersion()
+            throws RepositoryException, RemoteException {
+        try {
+            return getFactory().getRemoteVersion(node.getBaseVersion());
+        } catch (RepositoryException ex) {
+            throw getRepositoryException(ex);
+        }
+    }
+    
+    /** {@inheritDoc} */
+    //---------- Implementation helper -----------------------------------------
+    
+    /**
+     * Returns the {@link Version} instance for the given UUID.
+     * 
+     * @param versionUUID The UUID of the version.
+     * 
+     * @return The version node.
+     * 
+     * @throws RepositoryException if an error occurrs accessing the version
+     *      node or if the UUID does not denote a version.
+     */
+    protected Version getVersionByUUID(String versionUUID)
+            throws RepositoryException {
+        
+        // get the version node by its UUID from the version history's session
+        Session session = node.getSession();
+        Node versionNode = session.getNodeByUUID(versionUUID);
+        
+        // check whether the node is a session, which it should be according
+        // to the spec (methods returning nodes should automatically return
+        // the correct type).
+        if (versionNode instanceof Version) {
+            return (Version) versionNode;
+        }
+        
+        // otherwise fail
+        throw new RepositoryException("Cannot find version " + versionUUID);
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS42 INS54 INS65 INS43 INS42 INS42 INS42 INS54 INS65 INS43 INS42 INS42 INS42 INS54 INS65 INS43 INS42 INS39 INS42 INS42 INS42 INS54 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS54 INS65 INS42 INS42 INS42 INS54 INS65 INS42 INS42 INS42 INS54 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS53 INS65 INS66 INS8 INS12 INS65 INS66 INS42 INS8 INS12 INS65 INS66 INS42 INS8 INS12 INS65 INS66 INS42 INS8 INS12 INS65 INS66 INS42 INS42 INS8 INS12 INS65 INS66 INS8 INS12 INS65 INS66 INS8 INS12 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS62 INS8 INS14 INS41 INS44 INS8 INS21 INS44 INS8 INS21 INS44 INS8 INS21 INS44 INS8 INS21 INS44 INS8 INS41 INS44 INS8 INS41 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS41 INS43 INS27 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS45 INS42 MOV32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 MOV32 INS42 INS32 INS42 INS32 MOV32 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42