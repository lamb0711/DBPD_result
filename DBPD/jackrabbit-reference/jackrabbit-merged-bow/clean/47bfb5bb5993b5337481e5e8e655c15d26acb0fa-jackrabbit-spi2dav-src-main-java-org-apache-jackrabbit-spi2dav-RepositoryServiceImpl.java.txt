JCR-2113 : WIP (Contribution by Alfusainey Jallow)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1640892 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.PathNotFoundException;
+import org.apache.jackrabbit.spi.PrivilegeDefinition;
+import org.apache.jackrabbit.spi.commons.privilege.PrivilegeDefinitionImpl;
+import org.apache.jackrabbit.webdav.security.SupportedPrivilege;
+import org.apache.jackrabbit.webdav.security.SupportedPrivilegeSetProperty;
+    @Override
+    public PrivilegeDefinition[] getPrivilegeDefinitions(SessionInfo sessionInfo) throws RepositoryException {
+        return internalGetPrivilegeDefinitions(sessionInfo, uriResolver.getRepositoryUri());
+    }
+
+    @Override
+    public PrivilegeDefinition[] getSupportedPrivileges(SessionInfo sessionInfo, NodeId nodeId) throws RepositoryException {
+        String uri = (nodeId == null) ? uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()) : getItemUri(nodeId, sessionInfo);
+        return internalGetPrivilegeDefinitions(sessionInfo, uri);
+    }
+
+    private PrivilegeDefinition[] internalGetPrivilegeDefinitions(SessionInfo sessionInfo, String uri) throws RepositoryException {
+        DavPropertyNameSet nameSet = new DavPropertyNameSet();
+        nameSet.add(SecurityConstants.SUPPORTED_PRIVILEGE_SET);
+        DavMethodBase method = null;
+        try {
+            method = new PropFindMethod(uri, nameSet, DEPTH_0);
+            getClient(sessionInfo).executeMethod(method);
+
+            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            if (responses.length < 1) {
+                throw new PathNotFoundException("Unable to retrieve privileges definitions.");
+            }
+
+            DavPropertyName displayName = SecurityConstants.SUPPORTED_PRIVILEGE_SET;
+            DavProperty<?> p = responses[0].getProperties(DavServletResponse.SC_OK).get(displayName);
+            if (p == null) {
+                return new PrivilegeDefinition[0];
+            } else {
+                // build PrivilegeDefinition(s) from the supported-privileges dav property
+                NamePathResolver npResolver = getNamePathResolver(sessionInfo);
+                Map<Name, SupportedPrivilege> spMap = new HashMap<Name, SupportedPrivilege>();
+                fillSupportedPrivilegeMap(new SupportedPrivilegeSetProperty(p).getValue(), spMap, npResolver);
+
+                List<PrivilegeDefinition> pDefs = new ArrayList<PrivilegeDefinition>();
+                for (Name privilegeName : spMap.keySet()) {
+                    SupportedPrivilege sp = spMap.get(privilegeName);
+                    Set<Name> aggrnames = null;
+                    SupportedPrivilege[] aggregates = sp.getSupportedPrivileges();
+                    if (aggregates != null && aggregates.length > 0) {
+                        aggrnames = new HashSet<Name>();
+                        for (SupportedPrivilege aggregate : aggregates) {
+                            aggrnames.add(npResolver.getQName(aggregate.getPrivilege().getName()));
+                        }
+                    }
+                    PrivilegeDefinition def = new PrivilegeDefinitionImpl(privilegeName, sp.isAbstract(), aggrnames);
+                    pDefs.add(def);
+                }
+                return pDefs.toArray(new PrivilegeDefinition[pDefs.size()]);
+            }
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
+    }
+
+    private static void fillSupportedPrivilegeMap(List<SupportedPrivilege> sps, Map<Name, SupportedPrivilege> spMap, NamePathResolver npResolver) throws NamespaceException, IllegalNameException {
+        for (SupportedPrivilege sp : sps) {
+            spMap.put(npResolver.getQName(sp.getPrivilege().getName()), sp);
+            List<SupportedPrivilege> agg = Arrays.asList(sp.getSupportedPrivileges());
+            if (!agg.isEmpty()) {
+                fillSupportedPrivilegeMap(agg, spMap, npResolver);
+            }
+        }
+    }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS78 INS83 INS5 INS42 INS44 INS43 INS8 INS78 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS42 INS43 INS85 INS43 INS42 INS42 INS41 INS42 INS43 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS41 INS43 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS54 INS74 INS42 INS74 INS42 INS43 INS42 INS42 INS42 INS70 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS8 INS12 INS12 INS8 INS43 INS43 INS43 INS43 INS43 INS42 INS44 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS33 INS21 INS21 INS60 INS25 INS60 INS60 INS25 INS44 INS8 INS44 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS60 INS25 INS42 INS42 INS36 INS32 INS32 INS43 INS7 INS32 INS5 INS59 INS27 INS8 INS43 INS59 INS74 INS59 INS27 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS27 INS8 INS42 INS32 INS74 INS59 INS38 INS8 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS43 INS85 INS42 INS32 INS40 INS34 INS53 INS42 INS42 INS40 INS43 INS76 INS42 INS32 INS42 INS33 INS41 INS60 INS60 INS21 INS60 INS70 INS41 INS42 INS14 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS32 INS32 INS21 INS42 INS33 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS42 INS3 INS43 INS59 INS74 INS59 INS32 INS74 INS59 INS44 INS32 INS8 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS45 INS2 INS42 INS40 INS5 INS34 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS60 INS21 INS42 INS42 INS3 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS74 INS14 INS42 INS42 INS42 INS74 INS42 INS43 INS59 INS74 INS59 INS5 INS59 INS27 INS8 INS43 INS59 INS32 INS5 INS32 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS32 INS43 INS43 INS42 INS33 INS43 INS85 INS42 INS32 INS27 INS27 INS21 INS70 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS7 INS44 INS42 INS8 INS43 INS42 INS32 INS42 INS42 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS42 INS74 INS42 INS32 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42