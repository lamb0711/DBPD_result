JCR-1749 Do not depend on nt:file and nt:resource node types when
trying to connect to a ClassLoader resource. Rather make assumptions
on the actual data in terms of jcr:content and jcr:data.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@697778 13f79535-47bb-0310-9956-ffa450edef68

- * The <code>Util</code> provides helper methods for the repository classloader
- * and its class path entry and resource classes.
+ * The <code>Util</code> provides helper methods for the repository
+ * classloader and its class path entry and resource classes.
- *
- * @author Felix Meschberger
-    private Util() {}
+    private Util() {
+    }
-     * Resolves the given <code>item</code> to a <code>Property</code>. If the
-     * <code>item</code> is a node, the <code>getPrimaryItem</code> method is
-     * called repeatedly until a property is returned or until no more primary
-     * item is available. If the resulting property is a multivalue property,
-     * <code>null</code> is returned. Otherwise if the resulting property is
-     * a <code>REFERENCE</code> property, the node referred to is retrieved
-     * and this method is called recursively with the node. Otherwise, the
-     * resulting property is returned.
-     *
+     * Resolves the given <code>item</code> to a <code>Property</code> from
+     * which contents can be read.
+     * <p>
+     * The following mechanism is used to derive the contents:
+     * <ol>
+     * <li>If the <code>item</code> is a property, this property is used</li>
+     * <li>If the <code>item</code> is a node, three steps are tested:
+     * <ol>
+     * <li>If the node has a <code>jcr:content</code> child node, use that
+     * child node in the next steps. Otherwise continue with the node.</li>
+     * <li>Check for a <code>jcr:data</code> property and use that property
+     * if existing.</li>
+     * <li>Otherwise call <code>getPrimaryItem</code> method repeatedly until
+     * a property is returned or until no more primary item is available.</li>
+     * </ol>
+     * </ol>
+     * If no property can be resolved using the above algorithm or if the
+     * resulting property is a multivalue property, <code>null</code> is
+     * returned. Otherwise if the resulting property is a <code>REFERENCE</code>
+     * property, the node referred to is retrieved and this method is called
+     * recursively with the node. Otherwise, the resulting property is returned.
+     * 
-     *
-     * @return The resolved <code>Property</code> or <code>null</code> if the
-     *      resolved property is a multi-valued property.
-     *
-     * @throws ItemNotFoundException If the <code>item</code> is a node which
-     *      cannot be resolved to a property through (repeated) calls to
-     *      <code>Node.getPrimaryItem</code>.
+     * @return The resolved <code>Property</code> or <code>null</code> if
+     *         the resolved property is a multi-valued property or the
+     *         <code>item</code> is a node which cannot be resolved to a data
+     *         property.
-     *      single-valued <code>REFERENCE</code> type property which cannot
-     *      be resolved to the node referred to.
+     *             single-valued <code>REFERENCE</code> type property which
+     *             cannot be resolved to the node referred to.
-     *      repository.
+     *             repository.
-    public static Property getProperty(Item item)
-            throws ItemNotFoundException, ValueFormatException,
+    public static Property getProperty(Item item) throws ValueFormatException,
-        // if the item is a node, get its primary item until either
-        // no primary item exists any more or an ItemNotFoundException is thrown
-        while (item.isNode()) {
-            item = ((Node) item).getPrimaryItem();
+        Property prop;
+        if (item.isNode()) {
+
+            // check whether the node has a jcr:content node (e.g. nt:file)
+            Node node = (Node) item;
+            if (node.hasNode("jcr:content")) {
+                node = node.getNode("jcr:content");
+            }
+
+            // if the node has a jcr:data property, use that property
+            if (node.hasProperty("jcr:data")) {
+                
+                prop = node.getProperty("jcr:data");
+
+            } else {
+
+                // otherwise try to follow default item trail
+                try {
+                    item = node.getPrimaryItem();
+                    while (item.isNode()) {
+                        item = ((Node) item).getPrimaryItem();
+                    }
+                    prop = (Property) item;
+                } catch (ItemNotFoundException infe) {
+                    // we don't actually care, but log for completeness
+                    log.debug("getProperty: No primary items for "
+                        + node.getPath(), infe);
+                    return null;
+                }
+            }
+
+        } else {
+
+            prop = (Property) item;
+
-        Property prop = (Property) item;
-     * Returns the last modification time of the property. If the property's
-     * parent node is a <code>nt:resource</code> the <code>long</code> value
-     * of the <code>jcr:lastModified</code> property of the parent node is
-     * returned. Otherwise the current system time is returned.
-     *
-     * @param prop The property for which to return the last modification
-     *      time.
-     *
-     * @return The last modification time of the resource or the current time
-     *      if the property is not a child of an <code>nt:resource</code> node.
-     *
+     * Returns the last modification time of the property, which is the long
+     * value of the <code>jcr:lastModified</code> property of the parent node
+     * of <code>prop</code>. If the parent node does not have a
+     * <code>jcr:lastModified</code> property the current system time is
+     * returned.
+     * 
+     * @param prop The property for which to return the last modification time.
+     * @return The last modification time of the resource or the current time if
+     *         the parent node of the property does not have a
+     *         <code>jcr:lastModified</code> property.
-     *      be retrieved.
-     * @throws PathNotFoundException If the "jcr:lastModified" property of the
-     *      parent node cannot be retrieved. This exception is unlikely in a
-     *      correctly configured repository as the jcr:lastModified property
-     *      has to be present in a node of type nt:resource.
+     *             be retrieved.
-     *      denied.
+     *             denied.
-     *      repository to retrieve the last modification time.
+     *             repository to retrieve the last modification time.
-        if (parent.isNodeType("nt:resource")) {
+        if (parent.hasProperty("jcr:lastModified")) {

UPD66 UPD66 INS65 INS25 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 UPD66 INS32 INS8 INS8 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS42 INS42 INS60 INS25 INS25 INS21 UPD42 UPD45 INS43 INS59 INS32 INS8 INS32 INS8 INS8 INS7 INS42 INS42 INS11 INS42 INS42 INS45 INS21 INS42 INS42 INS45 INS21 INS54 INS42 INS11 INS43 INS42 INS7 INS7 INS8 INS12 INS43 INS42 INS42 INS42 INS32 INS42 INS32 INS21 MOV61 INS21 INS44 INS8 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS7 MOV43 INS42 INS21 INS41 INS42 INS32 INS42 MOV11 INS32 INS33 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS32 INS42 INS42 DEL66 DEL65 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL66 DEL66 DEL66 DEL66 DEL65