JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1082239 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.security.AccessControlException;
+import javax.jcr.security.Privilege;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+     * 
+     * @return
+     */
+    protected abstract PrivilegeManagerImpl getPrivilegeManagerImpl() throws RepositoryException;
+
+    /**
+    /**
+     * Adds the given <code>privileges</code> to the specified
+     * <code>target</code> set if they are not present in the specified
+     * <code>complement</code> set.
+     * 
+     * @param privileges
+     * @param target
+     * @param complement
+     */
+    protected static void updatePrivileges(Collection<Privilege> privileges, Set<Privilege> target, Set<Privilege> complement) {
+        for (Privilege p : privileges) {
+            if (!complement.contains(p)) {
+                target.add(p);
+            }
+        }
+    }
+
+     * @see CompiledPermissions#hasPrivileges(Path, Privilege[])
+     */
+    public boolean hasPrivileges(Path absPath, Privilege[] privileges) throws RepositoryException {
+        Result result = getResult(absPath);
+        int builtin = getPrivilegeManagerImpl().getBits(privileges);
+
+        if ((result.allowPrivileges | ~builtin) == -1) {
+            // in addition check all custom privileges
+            for (Privilege p : privileges) {
+                if (getPrivilegeManagerImpl().isCustomPrivilege(p)) {
+                    if (!result.customAllow.contains(p)) {
+                        if (p.isAggregate()) {
+                            // test if aggregated privs were granted individually.
+                            for (Privilege aggr : p.getAggregatePrivileges()) {
+                                if (!aggr.isAggregate() && !result.customAllow.contains(aggr)) {
+                                    // an aggregated custom priv is not allowed -> return false
+                                    return false;
+                                }
+                            }
+                        } else {
+                            // simple custom allow not allowed -> return false
+                            return false;
+                        }
+                    } // else: custom privilege allowed -> continue.
+                } // else: not a custom priv -> already covered.
+            }
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    /**
+     * @see CompiledPermissions#getPrivilegeSet(Path)
+     */
+    public Set<Privilege> getPrivilegeSet(Path absPath) throws RepositoryException {
+        Result result = getResult(absPath);
+        Set<Privilege> privileges = new HashSet<Privilege>();
+        privileges.addAll(getPrivilegeManagerImpl().getPrivileges(result.getPrivileges()));
+        privileges.addAll(result.customAllow);
+        return privileges;
+    }
+
+    /**
-     *
+     * Result of permission (and optionally privilege) evaluation for a given path.
+        private final Set<Privilege> customAllow;
+        private final Set<Privilege> customDeny;
+
+            this(allows, denies, allowPrivileges, denyPrivileges, Collections.<Privilege>emptySet(), Collections.<Privilege>emptySet());
+        }
+
+        public Result(int allows, int denies, int allowPrivileges, int denyPrivileges,
+                      Set<Privilege> customAllow, Set<Privilege> customDeny) {
+
+            this.customAllow = customAllow;
+            this.customDeny = customDeny;
-            return new Result(cAllows, cDenies, cAPrivs, cDPrivs);
+
+            Set<Privilege> combinedAllow = new HashSet<Privilege>();
+            combinedAllow.addAll(customAllow);
+            updatePrivileges(other.customAllow, combinedAllow, customDeny);
+
+            Set<Privilege> combinedDeny = new HashSet<Privilege>();
+            combinedDeny.addAll(customDeny);
+            updatePrivileges(other.customDeny, combinedDeny, customAllow);
+            return new Result(cAllows, cDenies, cAPrivs, cDPrivs, customAllow, customDeny);
+                h = 37 * h + customAllow.hashCode();
+                h = 37 * h + customDeny.hashCode();
-                       denyPrivileges == other.denyPrivileges;
+                       denyPrivileges == other.denyPrivileges &&
+                       customAllow.equals(other.customAllow) &&
+                       customDeny.equals(other.customDeny);

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS43 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS43 INS8 INS23 INS23 INS31 INS65 INS42 INS42 INS65 INS65 INS65 INS65 INS74 INS42 INS74 INS42 INS74 INS42 INS70 INS65 INS43 INS42 INS5 INS42 INS42 INS60 INS60 INS25 INS65 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS21 INS21 INS41 INS65 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS8 INS44 INS44 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS44 INS42 INS8 INS68 INS42 INS43 INS85 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS68 INS42 INS42 INS42 MOV43 INS59 INS74 INS59 INS32 INS32 INS42 INS66 INS43 INS43 INS42 INS43 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS17 INS74 INS42 INS74 INS42 INS21 INS21 INS60 INS21 INS21 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS42 INS42 INS69 INS69 INS42 INS42 INS42 INS32 INS42 INS32 INS36 INS38 INS70 INS41 INS41 INS42 INS42 INS69 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS43 INS43 INS43 INS7 INS7 INS74 INS59 INS32 INS32 INS74 INS59 INS32 INS32 INS42 INS38 INS8 INS43 INS5 INS42 INS42 INS32 INS42 INS42 INS27 INS34 INS44 INS42 INS8 INS9 INS9 INS43 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS32 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS42 INS42 INS21 INS21 INS32 INS21 INS42 INS43 INS85 INS42 INS40 INS38 INS43 INS42 INS25 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS7 INS7 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS27 INS42 INS27 INS27 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS27 INS32 INS27 INS32 MOV27 INS32 INS42 INS42 INS40 INS42 INS38 INS8 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS25 INS40 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS70 INS41 INS44 INS32 INS8 INS9 INS43 INS42 INS42 INS42 INS25 INS42 INS27 INS8 INS38 INS38 INS41 INS32 INS32 INS9 INS42 INS42 INS40 INS42 INS42