JCR-RMI: Added svn:eol-style properties.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161938 13f79535-47bb-0310-9956-ffa450edef68

-/*
- * Copyright 2004-2005 The Apache Software Foundation or its licensors,
- *                     as applicable.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.jackrabbit.rmi.server;
-
-import java.rmi.RemoteException;
-
-import javax.jcr.Node;
-import javax.jcr.RepositoryException;
-import javax.jcr.query.Query;
-import javax.jcr.query.QueryManager;
-
-import org.apache.jackrabbit.rmi.remote.RemoteQuery;
-import org.apache.jackrabbit.rmi.remote.RemoteQueryManager;
-
-/**
- * Remote adapter for the JCR {@link javax.jcr.query.QueryManager QueryManager}
- * interface. This class makes a local query manager available as an RMI
- * service using the
- * {@link org.apache.jackrabbit.rmi.remote.RemoteQueryManager RemoteQueryManager}
- * interface.
- *
- * @author Philipp Koch
- * @see javax.jcr.query.QueryManager
- * @see org.apache.jackrabbit.rmi.remote.RemoteQueryManager
- */
-public class ServerQueryManager extends ServerObject
-        implements RemoteQueryManager {
-
-    /** The adapted local query manager. */
-    private QueryManager manager;
-
-    /**
-     * Creates a remote adapter for the given local query manager.
-     *
-     * @param manager local query manager
-     * @param factory remote adapter factory
-     * @throws RemoteException on RMI errors
-     */
-    public ServerQueryManager(
-            QueryManager manager, ServerAdapterFactory factory)
-            throws RemoteException {
-        super(factory);
-        this.manager = manager;
-    }
-
-    /** {@inheritDoc} */
-    public RemoteQuery createQuery(String statement, String language)
-            throws RepositoryException, RemoteException {
-        try {
-            Query query = manager.createQuery(statement, language);
-            return getFactory().getRemoteQuery(query);
-        } catch (RepositoryException ex) {
-            throw getRepositoryException(ex);
-        }
-    }
-
-    /** {@inheritDoc} */
-    public RemoteQuery getQuery(String absPath)
-            throws RepositoryException, RemoteException {
-        try {
-            Node node = null; // TODO
-            return getFactory().getRemoteQuery(manager.getQuery(node));
-        } catch (RepositoryException ex) {
-            throw getRepositoryException(ex);
-        }
-    }
-
-    /** {@inheritDoc} */
-    public String[] getSupportedQueryLanguages() throws RemoteException {
-        return manager.getSupportedQueryLanguages();
-    }
-
-}
+/*
+ * Copyright 2004-2005 The Apache Software Foundation or its licensors,
+ *                     as applicable.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.rmi.server;
+
+import java.rmi.RemoteException;
+
+import javax.jcr.Node;
+import javax.jcr.RepositoryException;
+import javax.jcr.query.Query;
+import javax.jcr.query.QueryManager;
+
+import org.apache.jackrabbit.rmi.remote.RemoteQuery;
+import org.apache.jackrabbit.rmi.remote.RemoteQueryManager;
+
+/**
+ * Remote adapter for the JCR {@link javax.jcr.query.QueryManager QueryManager}
+ * interface. This class makes a local query manager available as an RMI
+ * service using the
+ * {@link org.apache.jackrabbit.rmi.remote.RemoteQueryManager RemoteQueryManager}
+ * interface.
+ *
+ * @author Philipp Koch
+ * @see javax.jcr.query.QueryManager
+ * @see org.apache.jackrabbit.rmi.remote.RemoteQueryManager
+ */
+public class ServerQueryManager extends ServerObject
+        implements RemoteQueryManager {
+
+    /** The adapted local query manager. */
+    private QueryManager manager;
+
+    /**
+     * Creates a remote adapter for the given local query manager.
+     *
+     * @param manager local query manager
+     * @param factory remote adapter factory
+     * @throws RemoteException on RMI errors
+     */
+    public ServerQueryManager(
+            QueryManager manager, ServerAdapterFactory factory)
+            throws RemoteException {
+        super(factory);
+        this.manager = manager;
+    }
+
+    /** {@inheritDoc} */
+    public RemoteQuery createQuery(String statement, String language)
+            throws RepositoryException, RemoteException {
+        try {
+            Query query = manager.createQuery(statement, language);
+            return getFactory().getRemoteQuery(query);
+        } catch (RepositoryException ex) {
+            throw getRepositoryException(ex);
+        }
+    }
+
+    /** {@inheritDoc} */
+    public RemoteQuery getQuery(String absPath)
+            throws RepositoryException, RemoteException {
+        try {
+            Node node = null; // TODO
+            return getFactory().getRemoteQuery(manager.getQuery(node));
+        } catch (RepositoryException ex) {
+            throw getRepositoryException(ex);
+        }
+    }
+
+    /** {@inheritDoc} */
+    public String[] getSupportedQueryLanguages() throws RemoteException {
+        return manager.getSupportedQueryLanguages();
+    }
+
+}

