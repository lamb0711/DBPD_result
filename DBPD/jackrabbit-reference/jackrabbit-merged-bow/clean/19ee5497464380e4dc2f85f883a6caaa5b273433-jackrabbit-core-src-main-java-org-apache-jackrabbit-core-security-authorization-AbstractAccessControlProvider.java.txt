JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1082239 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+     * @return the PrivilegeManager
+     * @throws RepositoryException
+     */
+    protected PrivilegeManagerImpl getPrivilegeManagerImpl() throws RepositoryException {
+        return (PrivilegeManagerImpl) ((JackrabbitWorkspace) session.getWorkspace()).getPrivilegeManager();
+    }
+
+    /**
-                return getPrivilegeManagerImpl().getBits(new String[] {Privilege.JCR_ALL});
+                return getPrivilegeManagerImpl().getBits(new Privilege[] {getAllPrivilege()});
+            }
+            public boolean hasPrivileges(Path absPath, Privilege[] privileges) {
+                return true;
+            }
+            public Set<Privilege> getPrivilegeSet(Path absPath) throws RepositoryException {
+                return Collections.singleton(getAllPrivilege());
-            public boolean canRead(Path itemPath, ItemId itemId) throws RepositoryException {
+            public boolean canRead(Path itemPath, ItemId itemId) {
+
+            private Privilege getAllPrivilege() throws RepositoryException {
+                return getPrivilegeManagerImpl().getPrivilege(Privilege.JCR_ALL);
+            }
-                    return getPrivilegeManagerImpl().getBits(new String[] {Privilege.JCR_READ});
+                    return getPrivilegeManagerImpl().getBits(new Privilege[] {getReadPrivilege()});
+                }
+            }
+            public boolean hasPrivileges(Path absPath, Privilege[] privileges) throws RepositoryException {
+                if (isAcItem(absPath)) {
+                    return false;
+                } else {
+                    return privileges != null && privileges.length == 1 && getReadPrivilege().equals(privileges[0]);
+                }
+            }
+            public Set<Privilege> getPrivilegeSet(Path absPath) throws RepositoryException {
+                if (isAcItem(absPath)) {
+                    return Collections.emptySet();
+                } else {
+                    return Collections.singleton(getReadPrivilege());
+
+            private Privilege getReadPrivilege() throws RepositoryException {
+                return getPrivilegeManagerImpl().getPrivilege(Privilege.JCR_READ);
+            }
-    private PrivilegeManagerImpl getPrivilegeManagerImpl() throws RepositoryException {
-        return (PrivilegeManagerImpl) ((JackrabbitWorkspace) session.getWorkspace()).getPrivilegeManager();
-    }

INS26 MOV31 INS40 INS29 UPD83 INS65 INS65 INS66 INS42 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS83 INS74 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS43 INS8 INS43 INS42 INS5 INS42 INS41 INS43 INS43 INS43 INS42 INS42 INS41 INS42 INS42 INS41 INS43 INS42 INS5 INS42 INS25 INS43 INS43 INS43 INS42 INS42 INS25 INS42 INS42 INS41 INS42 INS43 INS85 INS9 INS42 INS42 INS42 INS32 INS32 INS42 INS43 INS85 INS32 INS8 INS8 INS42 INS42 INS42 INS32 INS8 INS8 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS41 INS41 INS42 INS42 INS41 INS41 INS32 INS42 INS40 UPD5 INS42 INS42 INS9 INS27 INS32 INS32 INS42 UPD43 INS32 INS27 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 UPD5 INS27 INS27 INS32 INS42 INS2 INS42 UPD43 INS32 INS42 INS33 INS40 INS34 INS42 INS42 INS34 UPD42 INS42 DEL40 DEL40