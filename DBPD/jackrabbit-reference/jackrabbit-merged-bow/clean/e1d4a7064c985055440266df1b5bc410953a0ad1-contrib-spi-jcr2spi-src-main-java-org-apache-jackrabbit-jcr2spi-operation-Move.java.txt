JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.conversion.PathResolver;
-    private final QName destName;
+    private final Name destName;
-    private Move(NodeState srcNodeState, NodeState srcParentState, NodeState destParentState, QName destName, boolean sessionMove) {
+    private Move(NodeState srcNodeState, NodeState srcParentState, NodeState destParentState, Name destName, boolean sessionMove) {
+
-    public QName getDestinationName() {
+    public Name getDestinationName() {
-                                   NamespaceResolver nsResolver,
-                                   boolean sessionMove)
+                                                    PathResolver resolver,
+                                                    boolean sessionMove)
-        try {
-            if (srcPath.isAncestorOf(destPath)) {
-                String msg = "Invalid destination path: cannot be descendant of source path (" + LogUtil.safeGetJCRPath(destPath, nsResolver) + "," + LogUtil.safeGetJCRPath(srcPath, nsResolver) + ")";
-                log.debug(msg);
-                throw new RepositoryException(msg);
-            }
-        } catch (MalformedPathException e) {
-            String msg = "Invalid destination path: cannot be descendant of source path (" +LogUtil.safeGetJCRPath(destPath, nsResolver) + "," + LogUtil.safeGetJCRPath(srcPath, nsResolver) + ")";
+        if (srcPath.isAncestorOf(destPath)) {
+            String msg = "Invalid destination path: cannot be descendant of source path (" + LogUtil.safeGetJCRPath(destPath, resolver) + "," + LogUtil.safeGetJCRPath(srcPath, resolver) + ")";
-            throw new RepositoryException(msg, e);
+            throw new RepositoryException(msg);
-        Path.PathElement destElement = destPath.getNameElement();
+        Path.Element destElement = destPath.getNameElement();
-            String msg = "Invalid destination path: subscript in name element is not allowed (" + LogUtil.safeGetJCRPath(destPath, nsResolver) + ")";
+            String msg = "Invalid destination path: subscript in name element is not allowed (" + LogUtil.safeGetJCRPath(destPath, resolver) + ")";
-        if (Path.ROOT.equals(srcPath) || Path.ROOT.equals(destPath)) {
+        if (srcPath.denotesRoot() || destPath.denotesRoot()) {
-        NodeState srcState = getNodeState(srcPath, hierMgr, nsResolver);
-        NodeState srcParentState = getNodeState(srcPath.getAncestor(1), hierMgr, nsResolver);
-        NodeState destParentState = getNodeState(destPath.getAncestor(1), hierMgr, nsResolver);
-        QName destName = destElement.getName();
+        NodeState srcState = getNodeState(srcPath, hierMgr, resolver);
+        NodeState srcParentState = getNodeState(srcPath.getAncestor(1), hierMgr, resolver);
+        NodeState destParentState = getNodeState(destPath.getAncestor(1), hierMgr, resolver);
+        Name destName = destElement.getName();

MOV26 UPD40 UPD40 UPD40 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 MOV25 UPD42 UPD42 UPD43 UPD43 UPD40 MOV21 UPD42 MOV43 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL40