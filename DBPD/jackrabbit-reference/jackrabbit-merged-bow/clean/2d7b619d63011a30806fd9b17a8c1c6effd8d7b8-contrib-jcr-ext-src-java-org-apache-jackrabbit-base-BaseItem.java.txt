JCR-EXT: Cleaning up and upgrading to 0.16.4.1 (work in progress, does not compile!)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@169146 13f79535-47bb-0310-9956-ffa450edef68

- * TODO
+ * Item base class.
-    
-    private Item item;
+    /** Protected constructor. This class is only useful when extended. */
-        this.item = null;
-    protected BaseItem(Item item) {
-        this.item = item;
-    }
-
-    protected void setProxyItem(Item item) {
-        this.item = item;
-    }
-
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getParent().getPath()</code> and
+     * appending <code>getName()</code> to the returned parent path.
+     * Returns the root path <code>/</code> if an
+     * {@link ItemNotFoundException ItemNotFoundException} is thrown by
+     * <code>getParent()</code> (indicating that this is the root node).
+     * {@inheritDoc}
+     */
-        if (item != null) {
-            return item.getPath();
-        } else {
-            try {
-                Node parent = getParent();
-                String path = parent.getPath();
-                if (path.equals("/")) {
-                    return path + getName();
-                } else {
-                    return path + "/" + getName();
-                }
-            } catch (ItemNotFoundException e) {
-                return "/";
+        try {
+            String path = getParent().getPath();
+            if (path.equals("/")) {
+                return path + getName();
+            } else {
+                return path + "/" + getName();
+        } catch (ItemNotFoundException e) {
+            return "/";
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-        if (item != null) {
-            return item.getName();
-        } else {
-            throw new UnsupportedRepositoryOperationException();
-        }
+        throw new UnsupportedRepositoryOperationException();
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getDepth()</code> and returning either
+     * this item, <code>getSession().getRootNode()</code>, or
+     * <code>getParent().getAncestor()</code>, or throwing an
+     * {@link ItemNotFoundException ItemNotFoundException} depending on the
+     * given depth.
+     * {@inheritDoc}
+     */
-        if (item != null) {
-            return item.getAncestor(depth);
+        int thisDepth = getDepth();
+        if (thisDepth == depth) {
+            return this;
+        } else if (depth == 0) {
+            return getSession().getRootNode();
+        } else if (depth > 0 && depth < thisDepth) {
+            return getParent().getAncestor(depth);
-            int thisDepth = getDepth();
-            if (depth >= 0 || depth < thisDepth) {
-                return getParent().getAncestor(depth);
-            } else if (thisDepth == depth) {
-                return this;
-            } else {
-                throw new ItemNotFoundException(
-                        "Invalid ancestor depth " + depth);
-            }
+            throw new ItemNotFoundException("Invalid ancestor depth " + depth);
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-        if (item != null) {
-            return item.getParent();
-        } else {
-            throw new UnsupportedRepositoryOperationException();
-        }
+        throw new UnsupportedRepositoryOperationException();
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getParent().getDepth() + 1</code> and
+     * returning <code>0</code> if an
+     * {@link ItemNotFoundException ItemNotFoundException} is thrown by
+     * <code>getParent()</code> (indicating that this is the root node).
+     * {@inheritDoc}
+     */
-        if (item != null) {
-            return item.getDepth();
-        } else {
-            try {
-                return getParent().getDepth() + 1;
-            } catch (ItemNotFoundException e) {
-                return 0;
-            }
-        }
-    }
-
-    /** {@inheritDoc} */
-    public Session getSession() throws RepositoryException {
-        if (item != null) {
-            return item.getSession();
-        } else {
-            throw new UnsupportedRepositoryOperationException();
-        }
-    }
-
-    /** {@inheritDoc} */
-    public boolean isNode() {
-        if (item != null) {
-            return item.isNode();
-        } else {
-            return this instanceof Node;
-        }
-    }
-
-    /** {@inheritDoc} */
-    public boolean isNew() {
-        if (item != null) {
-            return item.isNew();
-        } else {
-            throw new UnsupportedOperationException();
-        }
-    }
-
-    /** {@inheritDoc} */
-    public boolean isModified() {
-        if (item != null) {
-            return item.isModified();
-        } else {
-            throw new UnsupportedOperationException();
-        }
-    }
-
-    /** {@inheritDoc} */
-    public boolean isSame(Item otherItem) {
-            if (item != null) {
-                return item.isSame(otherItem);
-            } else if (otherItem == this) {
-                return true;
-            } else {
-                return getPath().equals(otherItem.getPath());
-            }
-        } catch (RepositoryException e) {
-            throw new RuntimeException(e);
+            return getParent().getDepth() + 1;
+        } catch (ItemNotFoundException e) {
+            return 0;
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
+    public Session getSession() throws RepositoryException {
+        throw new UnsupportedRepositoryOperationException();
+    }
+
+    /** Always returns <code>false</code>. {@inheritDoc} */
+    public boolean isNode() {
+        return false;
+    }
+
+    /** Not implemented. {@inheritDoc} */
+    public boolean isNew() {
+        throw new UnsupportedOperationException();
+    }
+
+    /** Not implemented. {@inheritDoc} */
+    public boolean isModified() {
+        throw new UnsupportedOperationException();
+    }
+
+    /** Not implemented. {@inheritDoc} */
+    public boolean isSame(Item otherItem) {
+        throw new UnsupportedOperationException();
+    }
+
+    /** Does nothing. {@inheritDoc} */
-        if (item != null) {
-            item.accept(visitor);
-        } else {
-            throw new UnsupportedRepositoryOperationException();
-        }
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-        if (item != null) {
-            item.save();
-        } else {
-            throw new UnsupportedRepositoryOperationException();
-        }
+        throw new UnsupportedRepositoryOperationException();
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-        if (item != null) {
-            item.refresh(keepChanges);
-        } else {
-            throw new UnsupportedRepositoryOperationException();
-        }
+        throw new UnsupportedRepositoryOperationException();
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-        if (item != null) {
-            item.remove();
-        } else {
-            throw new UnsupportedRepositoryOperationException();
-        }
+        throw new UnsupportedRepositoryOperationException();

INS29 MOV8 MOV8 MOV8 MOV8 MOV8 MOV8 INS8 MOV8 MOV8 INS8 INS8 MOV8 MOV8 MOV8 UPD66 INS65 MOV25 MOV41 MOV53 INS66 INS66 INS66 INS66 UPD65 UPD66 INS66 INS65 INS66 INS66 INS66 INS66 UPD65 UPD66 INS66 INS65 INS25 INS66 INS66 INS66 UPD65 UPD66 INS66 INS65 INS66 INS66 INS9 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS27 INS8 INS25 INS42 INS66 UPD43 MOV43 INS42 INS34 INS41 UPD27 MOV27 MOV8 MOV8 UPD42 UPD42 INS32 INS32 UPD27 MOV32 INS42 INS32 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL8 DEL52 DEL42 DEL43 DEL62 DEL41 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL52 DEL27 DEL9 DEL41 DEL8 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL8