JCR-189: QueryHandler should use lucene Input-/OutputStream implementations

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@233174 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.FileSystemException;
-import org.apache.jackrabbit.core.fs.FileSystemResource;
-import org.apache.jackrabbit.core.fs.RandomAccessOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.OutputStream;
+import java.io.FileOutputStream;
-    private final FileSystemResource logFile;
+    private final File logFile;
-    RedoLog(FileSystemResource log) throws FileSystemException {
+    RedoLog(File log) throws IOException {
-            log.makeParentDirs();
-            try {
-                log.getOutputStream().close();
-            } catch (IOException e) {
-                throw new FileSystemException("Unable to create redo log file:", e);
-            }
+            log.getParentFile().mkdirs();
+            log.createNewFile();
-     * @throws FileSystemException if an error occurs while reading from the
+     * @throws IOException if an error occurs while reading from the
-    Collection getEntries() throws FileSystemException {
+    Collection getEntries() throws IOException {
-     * @throws FileSystemException if the node cannot be written to the redo
+     * @throws IOException if the node cannot be written to the redo
-    void nodeAdded(String uuid) throws FileSystemException {
+    void nodeAdded(String uuid) throws IOException {
-        try {
-            out.write(new Entry(uuid, Entry.NODE_ADDED).toString());
-            out.write('\n');
-            entryCount++;
-        } catch (IOException e) {
-            throw new FileSystemException(e.getMessage(), e);
-        }
+        out.write(new Entry(uuid, Entry.NODE_ADDED).toString() + "\n");
+        entryCount++;
-     * @throws FileSystemException if the node cannot be written to the redo
+     * @throws IOException if the node cannot be written to the redo
-    void nodeRemoved(String uuid) throws FileSystemException {
+    void nodeRemoved(String uuid) throws IOException {
-        try {
-            out.write(new Entry(uuid, Entry.NODE_REMOVED).toString());
-            out.write('\n');
-            entryCount++;
-        } catch (IOException e) {
-            throw new FileSystemException(e.getMessage(), e);
-        }
+        out.write(new Entry(uuid, Entry.NODE_REMOVED).toString() + "\n");
+        entryCount++;
-     * @throws FileSystemException if an error occurs while writing.
+     * @throws IOException if an error occurs while writing.
-    void flush() throws FileSystemException {
-        try {
-            if (out != null) {
-                out.flush();
-            }
-        } catch (IOException e) {
-            throw new FileSystemException(e.getMessage(), e);
+    void flush() throws IOException {
+        if (out != null) {
+            out.flush();
-     * @throws FileSystemException if the redo log cannot be cleared.
+     * @throws IOException if the redo log cannot be cleared.
-    void clear() throws FileSystemException {
-        try {
-            if (out != null) {
-                out.close();
-                out = null;
-            }
-            // truncate file
-            logFile.getOutputStream().close();
-            entryCount = 0;
-        } catch (IOException e) {
-            throw new FileSystemException(e.getMessage(), e);
+    void clear() throws IOException {
+        if (out != null) {
+            out.close();
+            out = null;
+        // truncate file
+        new FileOutputStream(logFile).close();
+        entryCount = 0;
-     * @throws FileSystemException if an error occurs while creating the
+     * @throws IOException if an error occurs while creating the
-    private void initOut() throws FileSystemException {
+    private void initOut() throws IOException {
-            RandomAccessOutputStream raf = logFile.getRandomAccessOutputStream();
-            // seek to the end of the file
-            try {
-                raf.seek(logFile.length());
-            } catch (IOException e) {
-                throw new FileSystemException(e.getMessage(), e);
-            }
-            out = new BufferedWriter(new OutputStreamWriter(raf));
+            OutputStream os = new FileOutputStream(logFile, true);
+            out = new BufferedWriter(new OutputStreamWriter(os));
-     * @throws FileSystemException if an error occurs while reading from the
+     * @throws IOException if an error occurs while reading from the
-    private void read(EntryCollector collector) throws FileSystemException {
-        InputStream in = logFile.getInputStream();
+    private void read(EntryCollector collector) throws IOException {
+        InputStream in = new FileInputStream(logFile);
-            String line = null;
+            String line;
-        } catch (IOException e) {
-            throw new FileSystemException(e.getMessage(), e);

MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 INS40 UPD43 MOV43 MOV43 MOV43 MOV8 UPD43 MOV8 MOV43 MOV8 MOV43 MOV8 MOV43 UPD43 UPD42 UPD43 UPD42 MOV42 UPD42 MOV42 MOV21 UPD42 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV21 INS27 INS27 INS14 INS60 INS14 MOV32 INS45 MOV32 INS45 INS43 INS42 UPD43 MOV43 INS59 INS43 INS42 INS32 UPD42 MOV42 UPD42 INS42 UPD42 UPD42 MOV42 INS14 INS42 MOV42 INS42 UPD43 MOV43 INS42 INS9 UPD42 UPD42 DEL42 DEL43 DEL42 DEL32 DEL8 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL33 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12