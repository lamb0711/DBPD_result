JCR-EXT: Cleaning up and upgrading to 0.16.4.1 (work in progress, does not compile!)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@169146 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.BinaryValue;
-import javax.jcr.BooleanValue;
-import javax.jcr.DateValue;
-import javax.jcr.DoubleValue;
-import javax.jcr.LongValue;
-import javax.jcr.ReferenceValue;
+import javax.jcr.PropertyType;
-import javax.jcr.StringValue;
+import javax.jcr.ValueFactory;
-import javax.jcr.nodetype.NodeDef;
+import javax.jcr.nodetype.NodeDefinition;
+import org.apache.jackrabbit.name.Path;
+
- * TODO
+ * Node base class.
+    /** Protected constructor. This class is only useful when extended. */
-    protected BaseNode(Item item) {
-        super(item);
-    }
-
+    /**
+     * Implemented by calling <code>super.getPath()</code>
+     * (see {@link BaseItem#getPath() BaseItem.getPath()} and appending
+     * <code>"[" + getIndex() + "]"</code> if
+     * <code>getDefinition().allowsSameNameSiblings()</code> returns
+     * <code>true</code>.
+     * {@inheritDoc}
+     */
-        if (getDefinition().allowSameNameSibs()) {
+        if (getDefinition().allowsSameNameSiblings()) {
+    /**
+     * Implemented by calling <code>visitor.visit(this)</code>.
+     * {@inheritDoc}
+     */
+    /** Always returns <code>true</code>. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>addNode(relPath).setProperty(prefix + ":primaryType", primaryNodeTypeName)</code>
+     * and returning the created node. The prefix is acquired by calling
+     * <code>getSession().getNamespacePrefix("http://www.jcp.org/jcr/1.0")</code>.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        Node node = addNode(relPath);
+        String prefix =
+            getSession().getNamespacePrefix("http://www.jcp.org/jcr/1.0");
+        node.setProperty(prefix + ":primaryType", primaryNodeTypeName);
+        return node;
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getProperty(name).setValue(value)</code>
+     * and returning the retrieved property. Adding new properties is not
+     * implemented.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        try {
+            Property property = getProperty(name);
+            property.setValue(value);
+            return property;
+        } catch (PathNotFoundException e) {
+            throw new UnsupportedRepositoryOperationException();
+        }
-    /** {@inheritDoc} */
+    /**
+     * Converts a value to the given type. A new value instance is
+     * created using the current value factory
+     * (<code>getSession().getValueFactory()</code>) unless the given
+     * value already is of the given type or the given type is undefined.
+     * <p>
+     * This internal utility method is used by the property setters
+     * in this class.
+     *
+     * @param value original value
+     * @param type  value type
+     * @return converted value
+     * @throws ValueFormatException if the value can not be converted
+     * @throws RepositoryException  if another error occurs
+     */
+    private Value convert(Value value, int type)
+            throws ValueFormatException, RepositoryException {
+        if (type == PropertyType.UNDEFINED || value.getType() == type) {
+            return value;
+        } else {
+            ValueFactory factory = getSession().getValueFactory();
+            switch (type) {
+            case PropertyType.BINARY:
+                return factory.createValue(value.getStream());
+            case PropertyType.BOOLEAN:
+                return factory.createValue(value.getBoolean());
+            case PropertyType.DATE:
+                return factory.createValue(value.getDate());
+            case PropertyType.DOUBLE:
+                return factory.createValue(value.getDouble());
+            case PropertyType.LONG:
+                return factory.createValue(value.getLong());
+            case PropertyType.STRING:
+                return factory.createValue(value.getString());
+            default:
+                return factory.createValue(value.getString(), type);
+            }
+        }
+    }
+
+    /**
+     * Implemented by calling
+     * <code>setProperty(name, value)</code> after converting the given
+     * value to the given type.
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, Value value, int type)
+            throws ValueFormatException, VersionException, LockException,
+            RepositoryException {
+        return setProperty(name, convert(value, type));
+    }
+
+    /**
+     * Implemented by calling <code>getProperty(name).setValue(values)</code>
+     * and returning the retrieved property. Adding new properties is not
+     * implemented.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        try {
+            Property property = getProperty(name);
+            property.setValue(values);
+            return property;
+        } catch (PathNotFoundException e) {
+            throw new UnsupportedRepositoryOperationException();
+        }
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>setProperty(name, convertedValues)</code>
+     * with an array of values that were converted from the given values to
+     * the given type.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        ValueFactory factory = getSession().getValueFactory();
+        Value[] convertedValues = new Value[values.length];
+        for (int i = 0; i < values.length; i++) {
+            convertedValues[i] = convert(values[i], type);
+        }
+        return setProperty(name, convertedValues);
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>setProperty(name, stringValues)</code>
+     * with an array of values that were created from the given strings by
+     * <code>getSession().getValueFactory().createValue(values[i]))</code>.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        ValueFactory factory = getSession().getValueFactory();
+        Value[] stringValues = new Value[values.length];
+        for (int i = 0; i < values.length; i++) {
+            stringValues[i] = factory.createValue(values[i]);
+        }
+        return setProperty(name, stringValues);
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>setProperty(name, stringValues, type)</code>
+     * with an array of Values that were created from the given strings by
+     * <code>getSession().getValueFactory().createValue(values[i]))</code>.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        ValueFactory factory = getSession().getValueFactory();
+        Value[] stringValues = new Value[values.length];
+        for (int i = 0; i < values.length; i++) {
+            stringValues[i] = factory.createValue(values[i]);
+        }
+        return setProperty(name, stringValues, type);
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
+     * {@inheritDoc}
+     */
-        return setProperty(name, new StringValue(value));
+        ValueFactory factory = getSession().getValueFactory();
+        return setProperty(name, factory.createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setProperty(name, getSession().getValueFactory().createValue(value, type)</code>.
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, String value, int type)
+            throws ValueFormatException, VersionException, LockException,
+            RepositoryException {
+        ValueFactory factory = getSession().getValueFactory();
+        return setProperty(name, factory.createValue(value, type));
+    }
+
+    /**
+     * Implemented by calling
+     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
+     * {@inheritDoc}
+     */
-        return setProperty(name, new BinaryValue(value));
+        ValueFactory factory = getSession().getValueFactory();
+        return setProperty(name, factory.createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
+     * {@inheritDoc}
+     */
-        return setProperty(name, new BooleanValue(value));
+        ValueFactory factory = getSession().getValueFactory();
+        return setProperty(name, factory.createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
+     * {@inheritDoc}
+     */
-        return setProperty(name, new DoubleValue(value));
+        ValueFactory factory = getSession().getValueFactory();
+        return setProperty(name, factory.createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
+     * {@inheritDoc}
+     */
-        return setProperty(name, new LongValue(value));
+        ValueFactory factory = getSession().getValueFactory();
+        return setProperty(name, factory.createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
+     * {@inheritDoc}
+     */
-        return setProperty(name, new DateValue(value));
+        ValueFactory factory = getSession().getValueFactory();
+        return setProperty(name, factory.createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setProperty(name, getSession().getValueFactory().createValue(value)</code>.
+     * {@inheritDoc}
+     */
-        return setProperty(name, new ReferenceValue(value));
+        ValueFactory factory = getSession().getValueFactory();
+        return setProperty(name, factory.createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>Path.resolve(this, relPath)</code> from
+     * the {@link Path Path} utility class. If the given path resolves to
+     * a property, then a {@link PathNotFoundException PathNotFoundException}
+     * is thrown.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        Item item = Path.resolve(this, relPath);
+        if (item.isNode()) {
+            return (Node) item;
+        } else {
+            throw new PathNotFoundException("Node not found: " + relPath);
+        }
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>Path.resolve(this, relPath)</code> from
+     * the {@link Path Path} utility class. If the given path resolves to
+     * a node, then a {@link PathNotFoundException PathNotFoundException}
+     * is thrown.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        Item item = Path.resolve(this, relPath);
+        if (item.isNode()) {
+            throw new PathNotFoundException("Property not found: " + relPath);
+        } else {
+            return (Property) item;
+        }
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Always returns <code>1</code>. {@inheritDoc} */
-        throw new UnsupportedRepositoryOperationException();
+        return 1;
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getNode(relPath)</code> and returning
+     * <code>true</code> unless a
+     * {@link PathNotFoundException PathNotFoundException} is thrown.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getProperty(relPath)</code> and returning
+     * <code>true</code> unless a
+     * {@link PathNotFoundException PathNotFoundException} is thrown.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getNodes().hasNext()</code>.
+     * {@inheritDoc}
+     */
-        return getNodes().getSize() > 0;
+        return getNodes().hasNext();
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getProperties().hasNext()</code>.
+     * {@inheritDoc}
+     */
-        return getProperties().getSize() > 0;
+        return getProperties().hasNext();
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>type.isNodeType(nodeTypeName)</code>
+     * for the primary type and all mixin types of this node. Returns
+     * <code>true</code> if any of these calls return <code>true</code>.
+     * Returns <code>false</code> otherwise.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
-    public NodeDef getDefinition() throws RepositoryException {
+    /** Not implemented. {@inheritDoc} */
+    public NodeDefinition getDefinition() throws RepositoryException {
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
-    public void merge(String srcWorkspace, boolean bestEffort)
+    /** Not implemented. {@inheritDoc} */
+    public NodeIterator merge(String srcWorkspace, boolean bestEffort)
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */

MOV26 MOV26 MOV26 MOV26 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS29 INS29 INS29 INS29 INS83 INS39 INS42 MOV8 INS29 INS83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 INS8 INS29 UPD83 INS43 INS42 INS44 MOV43 INS43 INS8 INS29 MOV43 INS42 MOV44 INS44 MOV44 MOV43 MOV43 MOV43 MOV43 INS8 MOV43 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV44 INS44 INS43 INS43 INS43 INS43 MOV43 INS44 MOV44 INS43 MOV43 MOV43 MOV43 INS43 INS44 INS44 INS44 INS43 INS43 MOV43 MOV43 MOV44 MOV43 MOV43 INS8 MOV43 MOV43 MOV8 MOV43 MOV44 MOV43 MOV8 INS43 MOV44 MOV43 INS8 MOV43 UPD42 MOV43 MOV44 MOV43 MOV8 MOV43 UPD42 INS39 UPD42 MOV43 INS8 MOV43 UPD42 UPD42 MOV44 MOV43 INS39 UPD42 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV8 UPD39 UPD42 MOV44 MOV43 MOV8 INS43 INS42 MOV43 UPD42 MOV43 MOV43 MOV43 MOV43 MOV43 MOV8 UPD42 MOV43 MOV43 MOV43 MOV8 UPD39 INS42 MOV44 MOV43 MOV43 MOV43 MOV43 MOV8 INS39 INS42 MOV44 MOV43 MOV43 MOV43 MOV43 MOV8 INS43 INS39 UPD42 MOV43 MOV8 UPD42 MOV44 MOV44 MOV43 MOV43 MOV43 INS43 INS43 MOV8 MOV44 MOV43 UPD42 MOV43 MOV43 MOV8 MOV43 MOV43 UPD42 MOV43 MOV43 MOV43 MOV43 MOV43 MOV8 UPD39 UPD42 MOV43 MOV8 UPD39 UPD42 MOV43 MOV8 UPD66 INS65 INS65 INS65 INS65 INS60 INS60 INS21 INS41 INS65 INS54 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS65 INS43 INS42 INS41 INS54 INS60 INS60 INS24 INS41 INS60 INS60 INS24 INS41 INS39 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS24 INS41 INS43 INS42 INS42 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS42 INS60 INS25 INS41 INS42 INS42 INS42 INS42 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS59 INS43 INS59 INS32 INS42 INS66 INS66 INS66 INS66 INS65 INS8 INS12 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS8 INS66 INS66 INS66 INS65 INS42 INS32 INS66 INS66 INS66 INS8 INS12 INS66 INS66 INS66 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS66 INS66 INS66 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS66 INS66 INS66 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS66 INS66 INS42 INS43 INS59 INS32 INS66 INS66 INS42 INS42 INS43 INS59 INS66 INS66 INS43 INS59 INS66 INS66 INS43 INS59 INS66 INS66 INS43 INS59 INS66 INS66 INS43 INS59 INS66 INS66 INS43 INS59 INS66 INS66 INS43 INS59 INS66 INS66 UPD65 INS66 UPD66 INS65 INS66 INS65 MOV43 INS59 INS32 INS8 INS8 INS66 INS66 INS66 INS66 UPD65 INS66 UPD66 INS65 INS66 INS65 INS43 INS59 INS32 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS34 INS66 INS66 INS66 UPD65 UPD66 INS65 INS66 INS66 UPD65 UPD66 INS65 INS66 MOV32 INS66 MOV32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS68 INS66 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS60 INS21 INS41 INS44 MOV8 INS27 INS27 INS41 INS60 INS50 INS42 INS42 INS32 INS60 INS21 INS41 INS44 MOV8 UPD42 MOV42 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS66 INS42 INS66 INS42 INS32 INS42 INS42 INS41 INS53 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS42 INS42 MOV53 INS41 INS42 INS66 INS42 INS66 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS43 INS59 INS32 INS42 INS43 INS42 INS42 INS40 INS32 INS42 INS42 INS43 INS59 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS43 INS42 INS32 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS32 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS32 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS11 INS14 INS42 INS42 INS52 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS43 INS85 INS2 INS32 INS42 INS43 INS85 INS2 INS32 INS42 INS43 INS85 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS27 UPD43 INS27 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS45 INS42 UPD42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL43 DEL14 DEL53 DEL42 DEL42 DEL42 DEL46 DEL8 DEL39 DEL42 DEL66 DEL43 DEL14 DEL53 DEL66 DEL43 DEL14 DEL53 DEL66 DEL43 DEL14 DEL53 DEL66 DEL43 DEL14 DEL53 DEL66 DEL43 DEL14 DEL53 DEL66 DEL42 DEL43 DEL42 DEL14 DEL66 DEL42 DEL43 DEL42 DEL14 DEL66 DEL42 DEL43 DEL42 DEL14 DEL66 DEL42 DEL43 DEL42 DEL14 DEL66 DEL42 DEL43 DEL42 DEL14 DEL66 DEL42 DEL43 DEL42 DEL14 DEL66 DEL42 DEL43 DEL42 DEL14 DEL8 DEL39 DEL39 DEL66 DEL34 DEL27 DEL66 DEL34 DEL27 DEL66 DEL39 DEL42 DEL42 DEL42 DEL43 DEL42 DEL39 DEL39