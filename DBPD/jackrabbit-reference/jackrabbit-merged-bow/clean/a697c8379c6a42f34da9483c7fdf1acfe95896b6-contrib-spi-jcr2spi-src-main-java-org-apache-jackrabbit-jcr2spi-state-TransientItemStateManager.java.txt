work in progress

- version always protected
- versionHistory always protected
- fix Node.getReferences && reference properties
- mixinTypes are 'active' upon save only (and not before). therefore
  cleanup after removeMixin is done only after save.
  adding new states defined by a new mixin are only added after the
  node has been saved.
- nodestates identified by a uuid only were created a second time upon
  ChildNodeEntry.resolve => fix needs to be improved
- Events/ChangeLog are processed by the save-target state
- ChangeLog.persisted not used any more

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@467956 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.value.QValue;
+import javax.jcr.RepositoryException;
+import javax.jcr.nodetype.ConstraintViolationException;
- * and {@link #createNewPropertyState(QName, NodeState, QPropertyDefinition)}.
+ * and {@link #createNewPropertyState(QName, NodeState, QPropertyDefinition, QValue[], int)}.
-        implements ItemStateLifeCycleListener {
+    implements ItemStateCreationListener {
-     * The parent item state manager, which return item states that are then
-     * overlayed by transient item states created by this TransientItemStateManager.
-     */
-    private final ItemStateManager parent;
-
-    /**
+    /**
+     *
+     * @param idFactory
+     * @param parent
+     */
-        this.parent = parent;
-        ((TransientISFactory) getTransientFactory()).setListener(this);
+        getTransientFactory().setListener(this);
-        parent.addChildNodeState(nodeState, uuid);
+        parent.addChildNodeState(nodeState);
-        nodeState.addListener(this);
-     *                             with the given name.
+     * with the given name.
+     * @throws ConstraintViolationException
+     * @throws RepositoryException
-    PropertyState createNewPropertyState(QName propName, NodeState parent, QPropertyDefinition definition)
-            throws ItemExistsException {
+    PropertyState createNewPropertyState(QName propName, NodeState parent,
+                                         QPropertyDefinition definition,
+                                         QValue[] values, int propertyType)
+        throws ItemExistsException, ConstraintViolationException, RepositoryException {
+        // NOTE: callers must make sure, the property type is not 'undefined'
+        propState.init(propertyType, values);
-        propState.addListener(this);
-            rootNodeState.addListener(this);
+        if (!Status.isValidStatusChange(previousStatus, state.getStatus(), false)) {
+            log.error("ItemState has invalid status: " + state.getStatus());
+            return;
+        }
+
-            case Status.NEW:
-                // new state has been created
-                changeLog.added(state);
-                break;
+
+    //-----------------------------------------< ItemStateCreationListener >---
+
+    /**
+     * @see ItemStateCreationListener#created(ItemState)
+     */
+    public void created(ItemState state) {
+        // new state has been created
+        if (state.getStatus() == Status.NEW) {
+            changeLog.added(state);
+        }
+    }

INS26 INS26 INS26 INS40 INS40 INS40 UPD43 INS31 UPD42 INS29 INS44 INS44 INS43 INS43 MOV21 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS5 INS42 INS39 INS42 INS42 INS42 INS25 UPD65 MOV65 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS43 INS85 INS38 INS8 INS68 UPD42 MOV42 INS27 INS8 INS69 INS69 MOV32 INS42 UPD42 INS42 INS42 INS32 INS21 INS41 INS42 INS42 INS69 INS32 INS40 MOV21 INS5 INS39 INS42 INS42 INS42 INS32 INS9 INS32 INS43 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS42 INS42 DEL29 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL11 DEL36 DEL42 DEL42 DEL42 DEL52 DEL32 DEL21 DEL52 DEL42 DEL42 DEL52 DEL32 DEL21 DEL40 DEL10 DEL49 DEL66 DEL66