added optional attribute (configRootPath) to <workspaces/> element in repository.xml;
if this attribute is present the virtual file system of the repository is used to read/write workspace configurations rather than the physical workspace home directory on disk (default behaviour)


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@348763 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Reader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Writer;
+import java.io.OutputStreamWriter;
+import java.io.FileWriter;
+import org.apache.jackrabbit.core.fs.FileSystemException;
+import org.apache.jackrabbit.core.fs.FileSystemPathUtil;
-     * Workspace root directory. This directory contains a subdirectory for
-     * each workspace in this repository. Each workspace is configured by
-     * a workspace configuration file contained in the workspace subdirectory.
+     * Workspace physical root directory. This directory contains a subdirectory
+     * for each workspace in this repository, i.e. the physical workspace home
+     * directory. Each workspace is configured by a workspace configuration file
+     * either contained in the workspace home directory or, optionally, located
+     * in a subdirectory of {@link #workspaceConfigDirectory} within the
+     * repository file system if such has been specified.
+     * Path to workspace configuration root directory within the
+     * repository file system or null if none was specified.
+     */
+    private final String workspaceConfigDirectory;
+
+    /**
+     * @param workspaceConfigDirectory optional workspace configuration directory
-            String workspaceDirectory, String defaultWorkspace,
-            Element template, VersioningConfig vc, ConfigurationParser parser) {
+            String workspaceDirectory, String workspaceConfigDirectory,
+            String defaultWorkspace, Element template, VersioningConfig vc,
+            ConfigurationParser parser) {
+        this.workspaceConfigDirectory = workspaceConfigDirectory;
-        // Get the workspace root directory (create it if not found)
+        // Get the physical workspace root directory (create it if not found)
-        File[] files = directory.listFiles();
-        if (files == null) {
-            throw new ConfigurationException(
-                    "Invalid workspace root directory: " + workspaceDirectory);
-        }
+        if (workspaceConfigDirectory != null) {
+            // a configuration directoy had been specified; search for
+            // workspace configurations in virtual repository file system
+            // rather than in physical workspace root directory on disk
+            FileSystem fs = fsc.getFileSystem();
+            try {
+                if (!fs.exists(workspaceConfigDirectory)) {
+                    fs.createFolder(workspaceConfigDirectory);
+                } else {
+                    String[] dirNames = fs.listFolders(workspaceConfigDirectory);
+                    for (int i = 0; i < dirNames.length; i++) {
+                        String configDir = workspaceConfigDirectory
+                                + FileSystem.SEPARATOR + dirNames[i];
+                        WorkspaceConfig wc = loadWorkspaceConfig(fs, configDir);
+                        if (wc != null) {
+                            wc.init();
+                            addWorkspaceConfig(wc);
+                        }
+                    }
-        for (int i = 0; i < files.length; i++) {
-            WorkspaceConfig wc = loadWorkspaceConfig(files[i]);
-            if (wc != null) {
-                wc.init();
-                addWorkspaceConfig(wc);
+                }
+            } catch (FileSystemException e) {
+                throw new ConfigurationException(
+                        "error while loading workspace configurations from path "
+                        + workspaceConfigDirectory, e);
+            }
+        } else {
+            // search for workspace configurations in physical workspace root
+            // directory on disk
+            File[] files = directory.listFiles();
+            if (files == null) {
+                throw new ConfigurationException(
+                        "Invalid workspace root directory: " + workspaceDirectory);
+            }
+
+            for (int i = 0; i < files.length; i++) {
+                WorkspaceConfig wc = loadWorkspaceConfig(files[i]);
+                if (wc != null) {
+                    wc.init();
+                    addWorkspaceConfig(wc);
+                }
-     * Attempts to load a workspace configuration from the given workspace
-     * subdirectory. If the directory contains a valid workspace configuration
-     * file, then the configuration is parsed and returned as a workspace
-     * configuration object. The returned configuration object has not been
-     * initialized.
+     * Attempts to load a workspace configuration from the given physical
+     * workspace subdirectory. If the directory contains a valid workspace
+     * configuration file, then the configuration is parsed and returned as a
+     * workspace configuration object. The returned configuration object has not
+     * been initialized.
-     * @param directory workspace configuration directory
+     * @param directory physical workspace configuration directory on disk
+     * Attempts to load a workspace configuration from the given workspace
+     * subdirectory within the repository file system. If the directory contains
+     * a valid workspace configuration file, then the configuration is parsed
+     * and returned as a workspace configuration object. The returned
+     * configuration object has not been initialized.
+     * <p>
+     * This method returns <code>null</code>, if the given directory does
+     * not exist or does not contain a workspace configuration file. If an
+     * invalid configuration file is found, then a
+     * {@link ConfigurationException ConfigurationException} is thrown.
+     *
+     * @param fs virtual file system where to look for the configuration file
+     * @param configDir workspace configuration directory in virtual file system
+     * @return workspace configuration
+     * @throws ConfigurationException if the workspace configuration is invalid
+     */
+    private WorkspaceConfig loadWorkspaceConfig(FileSystem fs, String configDir)
+            throws ConfigurationException {
+        Reader configReader = null;
+        try {
+            String configPath = configDir + FileSystem.SEPARATOR + WORKSPACE_XML;
+            if (!fs.exists(configPath)) {
+                // no configuration file in this directory
+                return null;
+            }
+
+            configReader = new InputStreamReader(fs.getInputStream(configPath));
+            InputSource xml = new InputSource(configReader);
+            xml.setSystemId(configPath);
+
+            // the physical workspace home directory (TODO encode name?)
+            File homeDir = new File(
+                    workspaceDirectory, FileSystemPathUtil.getName(configDir));
+            if (!homeDir.exists()) {
+                homeDir.mkdir();
+            }
+            Properties variables = new Properties();
+            variables.setProperty(
+                    ConfigurationParser.WORKSPACE_HOME_VARIABLE,
+                    homeDir.getPath());
+            ConfigurationParser localParser = parser.createSubParser(variables);
+            return localParser.parseWorkspaceConfig(xml);
+        } catch (FileSystemException e) {
+            throw new ConfigurationException("Failed to load workspace configuration", e);
+        } finally {
+            if (configReader != null) {
+                try {
+                    configReader.close();
+                } catch (IOException ignore) {}
+            }
+        }
+    }
+
+    /**
-        // The workspace directory (TODO encode name?)
+
+        // The physical workspace home directory on disk (TODO encode name?)
-        // Create the directory, fail if it exists or cannot be created
+        // Create the physical workspace directory, fail if it exists
+        // or cannot be created
-        // Create the workspace.xml file using the configuration template.
+        Writer configWriter;
+
+        // get a writer for the workspace configuration file
+        if (workspaceConfigDirectory != null) {
+            // a configuration directoy had been specified; create workspace
+            // configuration in virtual repository file system rather than
+            // on disk
+            FileSystem fs = fsc.getFileSystem();
+            String configDir = workspaceConfigDirectory
+                    + FileSystem.SEPARATOR + name;
+            String configFile = configDir + FileSystem.SEPARATOR + WORKSPACE_XML;
+            try {
+                // Create the directory
+                fs.createFolder(configDir);
+                configWriter = new OutputStreamWriter(
+                        fs.getOutputStream(configFile));
+            } catch (FileSystemException e) {
+                throw new ConfigurationException(
+                        "failed to create workspace configuration at path "
+                        + configFile, e);
+            }
+        } else {
+            File file = new File(directory, WORKSPACE_XML);
+            try {
+                configWriter = new FileWriter(file);
+            } catch (IOException e) {
+                throw new ConfigurationException(
+                        "failed to create workspace configuration at path "
+                        + file.getPath(), e);
+            }
+        }
+
+        // Create the workspace.xml file using the configuration template and
+        // the configuration writer.
-            File xml = new File(directory, WORKSPACE_XML);
-            // NOTE: The StreamResult instance below is constructed using the
-            // file path instead of the file object. See JCR-222 for details.
-                    new DOMSource(template), new StreamResult(xml.getPath()));
+                    new DOMSource(template), new StreamResult(configWriter));
+        } finally {
+            try {
+                configWriter.close();
+            } catch (IOException ignore) {}
-        WorkspaceConfig wc = loadWorkspaceConfig(directory);
+        WorkspaceConfig wc;
+        if (workspaceConfigDirectory != null) {
+            FileSystem fs = fsc.getFileSystem();
+            String configDir = workspaceConfigDirectory
+                    + FileSystem.SEPARATOR + name;
+            wc = loadWorkspaceConfig(fs, configDir);
+        } else {
+            wc = loadWorkspaceConfig(directory);
+        }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS29 INS83 INS83 INS43 INS59 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS42 INS65 INS43 INS42 INS21 MOV21 MOV21 MOV60 MOV25 INS25 MOV25 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS60 INS25 INS25 UPD66 UPD66 UPD66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS7 INS27 INS8 MOV8 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS8 INS12 INS8 INS43 INS59 INS27 INS8 INS8 INS8 INS27 INS8 INS8 INS67 INS22 INS42 INS42 INS33 INS60 INS54 INS42 INS66 INS42 INS42 INS33 INS60 INS25 INS21 INS60 INS21 INS60 INS25 INS60 INS21 INS60 INS41 INS44 INS8 INS25 INS42 INS42 INS42 INS33 INS60 INS60 INS60 INS54 MOV60 INS54 INS54 INS42 INS33 INS60 INS60 INS21 INS21 INS42 INS52 INS42 INS43 INS59 INS8 INS12 INS43 INS59 INS38 INS8 INS7 INS43 INS59 INS32 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS42 INS53 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS12 INS8 INS12 INS43 INS59 INS43 INS59 INS7 INS7 INS42 INS42 INS32 INS25 INS44 INS8 INS42 INS42 INS27 INS32 INS41 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS40 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS54 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS21 INS21 INS44 INS8 UPD42 INS21 INS44 INS8 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 MOV32 INS42 INS42 INS38 INS8 INS8 INS43 INS42 INS53 INS42 INS40 INS42 INS42 INS42 INS42 INS33 INS43 INS32 INS43 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS8 INS12 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS7 INS43 INS42 INS53 INS7 INS43 INS42 INS53 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS21 INS60 INS24 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS27 INS42 INS32 INS43 INS42 INS43 INS32 INS43 INS27 INS42 INS43 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS40 INS2 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32