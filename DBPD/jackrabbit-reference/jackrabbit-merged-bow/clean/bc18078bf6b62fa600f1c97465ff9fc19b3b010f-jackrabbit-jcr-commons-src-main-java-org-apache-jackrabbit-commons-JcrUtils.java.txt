JCR-2120: java.lang.Iterable support for RangeIterators

Use a NodeIterable adapter on the result of the NodeIterator return value. This way potential RepositoryExceptions are thrown directly and don't need to be encapsulated in RuntimeExceptions. And the code is cleaner!

The only downside is that the returned Iterable always returns the same Iterator from the iterator() method, but that "feature" has been documented in the NodeIterable javadoc.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@776681 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.NodeIterator;
+import org.apache.jackrabbit.commons.iterator.NodeIterable;
+
-     * Returns the nodes in the shared set of the given node as an
-     * {@link Iterable} for use in a Java 5 for-each loop. The return value
-     * encapsulates the {@link Node#getSharedSet()} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getSharedSet()} on the given node and returns
+     * the resulting {@link NodeIterator} as an {@link Iterable<Node>} instance
+     * for use in a Java 5 for-each loop.
+     * @see NodeIterable
+     * @throws RepositoryException if the {@link Node#getSharedSet()} call fails
-    public static Iterable<Node> getSharedSet(final Node node) {
-        return new Iterable<Node>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Node> iterator() {
-                try {
-                    return node.getSharedSet();
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access child nodes of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Node> getSharedSet(Node node)
+            throws RepositoryException {
+        return new NodeIterable(node.getSharedSet());
-     * Returns the child nodes of the given node as an {@link Iterable}
-     * for use in a Java 5 for-each loop. The return value encapsulates
-     * the {@link Node#getNodes()} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getNodes()} on the given node and returns the
+     * resulting {@link NodeIterator} as an {@link Iterable<Node>} instance
+     * for use in a Java 5 for-each loop.
+     * @see NodeIterable
+     * @throws RepositoryException if the {@link Node#getNodes()} call fails
-    public static Iterable<Node> getChildNodes(final Node node) {
-        return new Iterable<Node>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Node> iterator() {
-                try {
-                    return node.getNodes();
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access child nodes of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Node> getChildNodes(Node node)
+            throws RepositoryException {
+        return new NodeIterable(node.getNodes());
-     * Returns matching child nodes of the given node as an {@link Iterable}
-     * for use in a Java 5 for-each loop. The return value encapsulates
-     * the {@link Node#getNodes(String)} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getNodes(String)} on the given node with the given
+     * name pattern and returns the resulting {@link NodeIterator} as an
+     * {@link Iterable<Node>} instance for use in a Java 5 for-each loop.
+     * @see NodeIterable
+     * @throws RepositoryException
+     *         if the {@link Node#getNodes(String)} call fails
-    public static Iterable<Node> getChildNodes(
-            final Node node, final String pattern) {
-        return new Iterable<Node>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Node> iterator() {
-                try {
-                    return node.getNodes(pattern);
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access child nodes of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Node> getChildNodes(Node node, String pattern)
+            throws RepositoryException {
+        return new NodeIterable(node.getNodes(pattern));
-     * Returns matching child nodes of the given node as an {@link Iterable}
-     * for use in a Java 5 for-each loop. The return value encapsulates
-     * the {@link Node#getNodes(String[])} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getNodes(String[])} on the given node with the given
+     * name globs and returns the resulting {@link NodeIterator} as an
+     * {@link Iterable<Node>} instance for use in a Java 5 for-each loop.
+     * @see NodeIterable
-     * @param globs node name globs
+     * @param pattern node name pattern
+     * @throws RepositoryException
+     *         if the {@link Node#getNodes(String[])} call fails
-    public static Iterable<Node> getChildNodes(
-            final Node node, final String[] globs) {
-        return new Iterable<Node>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Node> iterator() {
-                try {
-                    return node.getNodes(globs);
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access child nodes of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Node> getChildNodes(Node node, String[] globs)
+            throws RepositoryException {
+        return new NodeIterable(node.getNodes(globs));

INS26 INS26 INS40 INS40 INS31 INS31 INS31 MOV43 MOV8 MOV29 MOV83 MOV83 MOV74 MOV42 MOV44 MOV43 MOV8 INS29 MOV83 MOV83 MOV74 MOV42 MOV44 MOV44 MOV43 MOV8 INS29 MOV83 MOV83 MOV74 MOV42 MOV44 MOV44 MOV43 MOV8 INS65 INS65 INS65 INS65 INS65 INS65 MOV65 INS65 MOV65 UPD65 MOV65 MOV65 INS65 INS65 MOV65 MOV65 MOV65 UPD65 MOV65 MOV65 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS42 INS42 INS66 MOV65 INS66 INS14 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS42 INS42 INS66 MOV65 INS66 INS14 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS66 MOV42 UPD66 UPD66 INS14 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS42 MOV42 UPD66 UPD66 INS14 INS68 UPD42 INS66 INS43 MOV32 INS68 UPD42 INS66 INS43 MOV32 INS68 INS42 INS66 INS43 MOV32 INS68 INS42 UPD66 MOV66 INS43 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS42 INS69 INS42 INS43 INS5 UPD42 MOV42 INS43 INS85 UPD42 MOV42 DEL42 DEL66 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL42 DEL66 DEL42 DEL83 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL83 DEL83 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL29 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31