JCR-4166: support GZIP content coding in requests

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1878706 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.zip.GZIPInputStream;
+import javax.servlet.http.HttpServletResponse;
+import javax.xml.parsers.DocumentBuilderFactory;
+import org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;
-public class WebdavRequestImpl implements WebdavRequest, DavConstants {
+public class WebdavRequestImpl implements WebdavRequest, DavConstants, ContentCodingAwareRequest {
-            InputStream in = httpRequest.getInputStream();
+            InputStream in = getDecodedInputStream(httpRequest);
-            throw new DavException(DavServletResponse.SC_BAD_REQUEST);
+            Throwable cause = e.getCause();
+            throw (cause instanceof DavException) ? (DavException) cause : new DavException(DavServletResponse.SC_BAD_REQUEST);
+    private static InputStream getDecodedInputStream(HttpServletRequest request) throws IOException {
+        List<String> contentCodings = AbstractWebdavServlet.getContentCodings(request);
+        int len = contentCodings.size();
+
+        log.trace("content codings: " + contentCodings);
+        InputStream result = request.getInputStream();
+ 
+        for (int i = 1; i <= len; i++) {
+            String s = contentCodings.get(len - i);
+            log.trace("decoding: " + s);
+            if ("gzip".equals(s)) {
+                result = new GZIPInputStream(result);
+            } else {
+                String message = "Unsupported content coding: " + s;
+                try {
+                    Element condition = DomUtil.createElement(
+                            DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument(), PRECONDITION_SUPPORTED);
+                    throw new IOException(
+                            new DavException(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE, message, null, condition));
+                } catch (ParserConfigurationException ex) {
+                    throw new IOException(message);
+                }
+            }
+        }
+
+        return result;
+    }
+
+    @Override
+    public String getAcceptableCodings() {
+        return "gzip";
+    }
+
-        return httpRequest.getInputStream();
+        return new MyServletInputStream(getDecodedInputStream(httpRequest));
+
+    private static class MyServletInputStream extends ServletInputStream {
+
+        private final InputStream delegate;
+
+        public MyServletInputStream(InputStream delegate) {
+            this.delegate = delegate;
+        }
+
+        @Override
+        public int available() throws IOException {
+            return delegate.available();
+        }
+
+        @Override
+        public void close() throws IOException {
+            delegate.close();
+        }
+
+        @Override
+        public boolean equals(Object other) {
+            return delegate.equals(other);
+        }
+
+        @Override
+        public int hashCode() {
+            return delegate.hashCode();
+        }
+
+        @Override
+        public void mark(int readlimit) {
+            delegate.mark(readlimit);
+        }
+
+        @Override
+        public boolean markSupported() {
+            return delegate.markSupported();
+        }
+
+        @Override
+        public int read() throws IOException {
+            return delegate.read();
+        }
+
+        @Override
+        public int read(byte[] b, int off, int len) throws IOException {
+            return delegate.read(b, off, len);
+        }
+
+        @Override
+        public int read(byte[] b) throws IOException {
+            return delegate.read(b);
+        }
+
+        @Override
+        public int readLine(byte[] b, int off, int len) throws IOException {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public void reset() throws IOException {
+            delegate.reset();
+        }
+
+        @Override
+        public long skip(long n) throws IOException {
+            return delegate.skip(n);
+        }
+
+        @Override
+        public String toString() {
+            return delegate.toString();
+        }
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS43 INS31 INS31 INS55 INS42 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS43 INS42 INS42 INS60 INS60 INS21 INS60 INS24 INS41 INS42 INS42 INS41 INS42 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS74 INS59 INS39 INS59 INS32 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS45 INS14 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS41 INS42 INS42 INS21 INS42 INS43 INS42 INS41 INS42 INS41 INS42 INS39 INS42 INS21 INS42 INS41 INS42 INS42 INS41 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS41 INS42 INS5 INS42 INS42 INS41 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS53 INS42 INS42 INS21 INS42 INS39 INS42 INS42 INS41 INS42 INS42 INS41 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS21 INS25 INS43 INS32 INS42 INS7 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS39 INS85 INS32 INS39 INS85 INS32 INS39 INS85 INS14 INS32 INS32 INS32 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS32 INS8 INS8 INS42 INS42 MOV42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS16 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS42 INS21 INS60 INS54 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS36 INS11 MOV14 INS42 INS42 INS27 INS45 INS42 INS7 INS43 INS59 INS8 INS12 INS42 INS42 INS62 INS43 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS60 INS53 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS45 INS42 INS43 INS59 INS14 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS32 INS43 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS43 INS40 INS42 INS33 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32