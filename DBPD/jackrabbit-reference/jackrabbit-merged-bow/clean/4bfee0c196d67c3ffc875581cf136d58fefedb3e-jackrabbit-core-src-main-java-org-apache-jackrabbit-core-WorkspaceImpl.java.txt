JCR-890: concurrent read-only access to a session

Add WorkspaceImpl into SessionContext

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@985296 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.jackrabbit.core.lock.LockManagerImpl;
+import org.apache.jackrabbit.core.lock.XALockManager;
+import org.apache.jackrabbit.core.state.ItemStateCacheFactory;
+import org.apache.jackrabbit.core.state.XAItemStateManager;
+     * The component context of this session.
+     */
+    protected final SessionContext context;
+
+    /**
-     * The component context of the repository that created this workspace.
-     */
-    protected final RepositoryContext repositoryContext;
-
-    /**
-     * The component context of this session.
-     */
-    protected final SessionContext sessionContext;
-
-    /**
-     * Protected constructor.
+     * Creates a new workspace instance
+     * @param context component context of this session
-     * @param sessionContext component context of this session
+     * @throws RepositoryException if the workspace can not be accessed 
-    protected WorkspaceImpl(
-            WorkspaceConfig wspConfig, SessionContext sessionContext)
+    public WorkspaceImpl(
+            SessionContext context, WorkspaceConfig wspConfig)
+        this.context = context;
-        this.sessionContext = sessionContext;
-        this.repositoryContext = sessionContext.getRepositoryContext();
-                repositoryContext.getRootNodeId(), this.stateMgr);
+                context.getRootNodeId(), this.stateMgr);
-        this.session = sessionContext.getSessionImpl();
+        this.session = context.getSessionImpl();
-        sessionContext.getSessionState().checkAlive();
+        context.getSessionState().checkAlive();
-            throws AccessDeniedException, UnsupportedRepositoryOperationException,
-            RepositoryException {
+            throws AccessDeniedException, RepositoryException {
-        session.createWorkspace(name);
+        WorkspaceManager manager =
+            context.getRepositoryContext().getWorkspaceManager();
+
+        // TODO verify that this session has the right privileges
+        // for this operation
+        manager.createWorkspace(name);
-            tmpSession = repositoryContext.getWorkspaceManager().createSession(
-                    session.getSubject(), name);
+            tmpSession = manager.createSession(session.getSubject(), name);
-           Node root = session.getRootNode();
+           Node root = getSession().getRootNode();
-        repositoryContext.getRepository().getWorkspaceInfo(name);
+        context.getRepository().getWorkspaceInfo(name);
-                new SessionLockManager(sessionContext, session.getLockManager());
+                new SessionLockManager(context, getInternalLockManager());
-            versionMgr = new VersionManagerImpl(sessionContext, stateMgr, hierMgr);
+            versionMgr = new VersionManagerImpl(context, stateMgr, hierMgr);
-     * @throws UnsupportedRepositoryOperationException if the repository does
-     * not support the creation of workspaces.
-            throws AccessDeniedException,
-            UnsupportedRepositoryOperationException,
-            RepositoryException {
+            throws AccessDeniedException, RepositoryException {
-        session.createWorkspace(name);
+        // TODO verify that this session has the right privileges
+        // for this operation
+        context.getRepositoryContext().getWorkspaceManager().createWorkspace(name);
-    public void createWorkspace(String workspaceName, InputSource configTemplate)
+    public void createWorkspace(
+            String workspaceName, InputSource configTemplate)
-        session.createWorkspace(workspaceName, configTemplate);
+        // TODO verify that this session has the right privileges
+        // for this operation
+        context.getRepositoryContext().getWorkspaceManager().createWorkspace(
+                workspaceName, configTemplate);
+
-            srcPath = session.getQPath(srcAbsPath).getNormalizedPath();
+            srcPath = context.getQPath(srcAbsPath).getNormalizedPath();
-            destPath = session.getQPath(destAbsPath).getNormalizedPath();
+            destPath = context.getQPath(destAbsPath).getNormalizedPath();
-            new BatchedItemOperations(stateMgr, sessionContext);
+            new BatchedItemOperations(stateMgr, context);
-                    srcWsp.sessionContext.getAccessManager(),
+                    srcWsp.context.getAccessManager(),
-            return session.getJCRPath(hierMgr.getPath(id));
+            return context.getJCRPath(hierMgr.getPath(id));
-            srcPath = session.getQPath(srcAbsPath).getNormalizedPath();
+            srcPath = context.getQPath(srcAbsPath).getNormalizedPath();
-            destPath = session.getQPath(destAbsPath).getNormalizedPath();
+            destPath = context.getQPath(destAbsPath).getNormalizedPath();
-            new BatchedItemOperations(stateMgr, sessionContext);
+            new BatchedItemOperations(stateMgr, context);
-            return session.getJCRPath(hierMgr.getPath(id));
+            return context.getJCRPath(hierMgr.getPath(id));
-            lockMgr = repositoryContext.getRepository().getLockManager(
-                    wspConfig.getName());
+            lockMgr =
+                context.getRepository().getLockManager(wspConfig.getName());
+            // FIXME Shouldn't need to use instanceof here
+            if (context.getSessionImpl() instanceof XASessionImpl) {
+                lockMgr = new XALockManager((LockManagerImpl) lockMgr);
+            }
-                repositoryContext.getRepository().getRetentionRegistry(wspConfig.getName());
+                context.getRepository().getRetentionRegistry(wspConfig.getName());
-        // check state of this instance
-        sanityCheck();
-
-        return repositoryContext.getNamespaceRegistry();
+        return context.getRepositoryContext().getNamespaceRegistry();
-        return sessionContext.getNodeTypeManager();
+        return context.getNodeTypeManager();
-        if (!sessionContext.getAccessManager().canAccess(srcWorkspace)) {
+        if (!context.getAccessManager().canAccess(srcWorkspace)) {
-            srcSession = repositoryContext.getWorkspaceManager().createSession(
-                    session.getSubject(), srcWorkspace);
+            WorkspaceManager manager =
+                context.getRepositoryContext().getWorkspaceManager();
+            srcSession = manager.createSession(session.getSubject(), srcWorkspace);
-        if (!sessionContext.getAccessManager().canAccess(srcWorkspace)) {
+        if (!context.getAccessManager().canAccess(srcWorkspace)) {
-            srcSession = repositoryContext.getWorkspaceManager().createSession(
-                    session.getSubject(), srcWorkspace);
+            WorkspaceManager manager =
+                context.getRepositoryContext().getWorkspaceManager();
+            srcSession = manager.createSession(session.getSubject(), srcWorkspace);
-            srcPath = session.getQPath(srcAbsPath).getNormalizedPath();
+            srcPath = context.getQPath(srcAbsPath).getNormalizedPath();
-            destPath = session.getQPath(destAbsPath).getNormalizedPath();
+            destPath = context.getQPath(destAbsPath).getNormalizedPath();
-            new BatchedItemOperations(stateMgr, sessionContext);
+            new BatchedItemOperations(stateMgr, context);
-        return sessionContext.getObservationManager();
+        return context.getObservationManager();
-                searchManager = repositoryContext.getRepository().getSearchManager(wspConfig.getName());
+                searchManager =
+                    context.getRepository().getSearchManager(wspConfig.getName());
-            queryManager = new QueryManagerImpl(sessionContext, searchManager);
+            queryManager = new QueryManagerImpl(context, searchManager);
-     * {@inheritDoc}
+     * Returns the names of all workspaces of this repository with respect of the
+     * access rights of this session.
+     *
+     * @return the names of all accessible workspaces
+     * @throws RepositoryException if an error occurs
-        return session.getWorkspaceNames();
+        // filter workspaces according to access rights
+        List<String> names = new ArrayList<String>();
+        WorkspaceManager manager =
+            context.getRepositoryContext().getWorkspaceManager();
+        for (String name : manager.getWorkspaceNames()) {
+            try {
+                if (context.getAccessManager().canAccess(name)) {
+                    names.add(name);
+                }
+            } catch (NoSuchWorkspaceException e) {
+                log.warn("Workspace disappeared unexpectedly: " + name, e);
+            }
+        }
+        return names.toArray(new String[names.size()]);
+
-            parentPath = session.getQPath(parentAbsPath).getNormalizedPath();
+            parentPath = context.getQPath(parentAbsPath).getNormalizedPath();
-                parentPath, this, sessionContext,
+                parentPath, this, context,
-        return new ImportHandler(importer, session);
+        return new ImportHandler(importer, getSession());
-        WorkspaceManager manager = repositoryContext.getWorkspaceManager();
+        WorkspaceManager manager =
+            context.getRepositoryContext().getWorkspaceManager();
-     * state manager. May be overridden by subclasses.
-     * @param shared shared item state manager
+     * state manager.
+     *
+     * @throws RepositoryException if the workspace can not be accessed 
-        return LocalItemStateManager.createInstance(
-                getSharedItemStateManager(), this,
-                repositoryContext.getItemStateCacheFactory());
+        SharedItemStateManager sism = getSharedItemStateManager();
+        ItemStateCacheFactory iscf =
+            context.getRepositoryContext().getItemStateCacheFactory();
+
+        // FIXME We should be able to avoid the instanceof operator here
+        if (context.getSessionImpl() instanceof XASessionImpl) {
+            return XAItemStateManager.createInstance(
+                    sism, this, null, iscf);
+        } else {
+            return LocalItemStateManager.createInstance(
+                    sism, this, iscf);
+        }
+

INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 MOV44 MOV65 UPD83 MOV21 MOV65 INS8 UPD42 INS65 UPD42 INS60 INS65 INS65 INS65 INS60 INS60 INS70 UPD65 INS60 INS60 INS25 UPD66 UPD42 INS42 INS66 INS43 INS59 MOV43 MOV43 MOV43 INS66 INS66 INS66 INS42 INS66 INS74 INS59 MOV43 INS59 INS44 INS32 INS8 INS43 UPD66 UPD42 UPD66 INS43 INS59 INS43 INS59 INS62 INS8 INS8 UPD42 INS42 INS42 INS32 UPD42 INS32 INS32 INS25 INS32 UPD42 INS60 INS60 UPD42 INS43 INS43 INS42 INS14 INS42 INS32 INS43 INS42 INS42 INS42 INS54 UPD42 INS42 INS3 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS32 INS43 INS41 MOV41 UPD42 UPD42 UPD42 INS32 INS42 UPD42 INS32 INS42 INS32 INS42 MOV43 UPD42 MOV43 UPD42 INS62 INS8 INS42 UPD42 MOV42 INS43 INS59 INS43 INS59 MOV43 UPD42 INS42 INS42 INS74 INS32 INS42 INS42 INS8 INS12 INS5 INS32 UPD42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS32 INS43 INS21 UPD42 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS25 INS44 INS8 INS43 INS85 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS52 INS33 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS7 INS32 INS42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS32 INS8 INS43 INS42 INS21 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD40 UPD42 UPD42 UPD42 INS42 INS14 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS21 INS42 INS32 UPD42 INS43 INS11 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS43 INS42 UPD42 INS42 INS42 INS42 INS45 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL66 DEL66 DEL65 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL65 DEL65 DEL42 DEL42 DEL32 DEL8