work in progress

- SPI: replace String/Stream for values by QValue interface
- SPI: add factory for QValue
  > adjust commons and add implementation
  > adjust usages of former QValue object with jcr2spi, spi2dav
- RepositoryService.getChildInfos returns Iterator instead of Collection
- spi2dav: add implementation for new query interfaces

- TODO: 
  improve conversion of jcr-value to q-value and vice-versa




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497885 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.QValueFactory;
-import org.apache.jackrabbit.value.QValue;
+import javax.jcr.Value;
-import java.io.InputStream;
-    QPropertyDefinitionImpl(QName declaringNodeType, Element pdefElement, NamespaceResolver nsResolver)
+    QPropertyDefinitionImpl(QName declaringNodeType, Element pdefElement,
+                            NamespaceResolver nsResolver, QValueFactory qValueFactory)
-            defaultValues = new QValue[0];
+            // No default value defined at all.
+            defaultValues = null;
-                QValue qValue = ValueFormat.getQValue(DomUtil.getText(it.nextElement()), requiredType, nsResolver);
+                String jcrVal = DomUtil.getText(it.nextElement());
+                QValue qValue;
+                if (requiredType == PropertyType.BINARY) {
+                    // TODO: improve
+                    Value v = ValueFactoryImpl.getInstance().createValue(jcrVal, requiredType);
+                    qValue = ValueFormat.getQValue(v, nsResolver, qValueFactory);
+                } else {
+                    qValue = ValueFormat.getQValue(jcrVal, requiredType, nsResolver, qValueFactory);
+                }
+                // in case of name and path constraint, the value must be
+                // converted to be in qualified format
-                   qValue = ValueFormat.getQValue(qValue, constType, nsResolver).getString();
+                   qValue = ValueFormat.getQValue(qValue, constType, nsResolver, qValueFactory).getString();
-    public String[] getDefaultValues() {
-        String[] strs = new String[defaultValues.length];
-        for (int i = 0; i < defaultValues.length; i++) {
-            try {
-                strs[i] = defaultValues[i].getString();
-            } catch (RepositoryException e) {
-                log.error("Internal error while retrieving default values.", e);
-            }
-        }
-        return strs;
-    }
-
-    public InputStream[] getDefaultValuesAsStream() {
-        InputStream[] ins = new InputStream[defaultValues.length];
-        for (int i = 0; i < defaultValues.length; i++) {
-            try {
-                ins[i] = defaultValues[i].getStream();
-            } catch (RepositoryException e) {
-                log.error("Internal error while retrieving default values.", e);
-            }
-        }
-        return ins;
+    public QValue[] getDefaultValues() {
+        return defaultValues;

MOV26 MOV26 INS26 UPD40 INS40 UPD40 INS44 MOV5 INS43 INS42 INS42 UPD42 INS8 INS33 MOV60 INS60 INS25 MOV21 MOV43 MOV43 INS59 INS27 INS8 INS8 UPD42 MOV32 INS42 INS42 INS40 INS60 INS21 INS21 INS43 INS59 INS7 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL34 DEL3 DEL42 DEL42 DEL42 DEL42 DEL32 DEL8 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31