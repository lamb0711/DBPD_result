JCR-1775: Transaction-safe versioning

Modified the NodeTypeRegistry.getEffectiveNodeType method to simplify calling code that always starts with the primary type name and a set of mixin types.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@701127 13f79535-47bb-0310-9956-ffa450edef68

-        return getEffectiveNodeType(data.getNodeState().getMixinTypeNames());
-    }
-
-    /**
-     * Small optimization to void double call for mixin types.
-     *
-     * @param mixins the set of mixins
-     * @return the effective node type
-     * @throws RepositoryException if an error occurs
-     */
-    private EffectiveNodeType getEffectiveNodeType(Set mixins)
-            throws RepositoryException {
-
-        // build effective node type of mixins & primary type
-        NodeTypeRegistry ntReg = session.getNodeTypeManager().getNodeTypeRegistry();
-
-        Name[] types = new Name[mixins.size() + 1];
-        mixins.toArray(types);
-        // primary type
-        types[types.length - 1] = data.getNodeState().getNodeTypeName();
-            return ntReg.getEffectiveNodeType(types);
+            NodeTypeRegistry registry =
+                session.getNodeTypeManager().getNodeTypeRegistry();
+            return registry.getEffectiveNodeType(
+                    data.getNodeState().getNodeTypeName(),
+                    data.getNodeState().getMixinTypeNames());
-            HashSet set = new HashSet(data.getNodeState().getMixinTypeNames());
-            // primary type
-            set.add(primaryTypeName);
+            Set mixins = new HashSet(data.getNodeState().getMixinTypeNames());
+
-            entExisting = ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
+            entExisting = ntReg.getEffectiveNodeType(primaryTypeName, mixins);
-            set.add(mixinName);
+            mixins.add(mixinName);
-            ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
-        } catch (NodeTypeConflictException ntce) {
-            throw new ConstraintViolationException(ntce.getMessage());
+            ntReg.getEffectiveNodeType(primaryTypeName, mixins);
+        } catch (NodeTypeConflictException e) {
+            throw new ConstraintViolationException(e.getMessage(), e);
-            // remaining mixin's
-            HashSet set = new HashSet(remainingMixins);
-            // primary type
-            set.add(state.getNodeTypeName());
-            entRemaining = ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
-        } catch (NodeTypeConflictException ntce) {
-            throw new ConstraintViolationException(ntce.getMessage());
+            entRemaining = ntReg.getEffectiveNodeType(
+                    state.getNodeTypeName(), remainingMixins);
+        } catch (NodeTypeConflictException e) {
+            throw new ConstraintViolationException(e.getMessage(), e);
-        if (ntName.equals(data.getNodeState().getNodeTypeName())) {
+        Name primary = data.getNodeState().getNodeTypeName();
+        if (ntName.equals(primary)) {
-        return getEffectiveNodeType(mixins).includesNodeType(ntName);
+        try {
+            NodeTypeRegistry registry =
+                session.getNodeTypeManager().getNodeTypeRegistry();
+            EffectiveNodeType type =
+                registry.getEffectiveNodeType(primary, mixins);
+            return type.includesNodeType(ntName);
+        } catch (NodeTypeConflictException e) {
+            String msg = "Failed to build effective node type for " + this;
+            log.debug(msg);
+            throw new RepositoryException(msg, e);
+        }
-            HashSet set = new HashSet(data.getNodeState().getMixinTypeNames());
-            // primary type
-            set.add(primaryTypeName);
+            Set mixins = new HashSet(data.getNodeState().getMixinTypeNames());
+
-            entExisting = ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
+            entExisting = ntReg.getEffectiveNodeType(primaryTypeName, mixins);
+
-            set.add(ntName);
+            mixins.add(ntName);
-            ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
+            ntReg.getEffectiveNodeType(primaryTypeName, mixins);
-            // existing mixin's
-            HashSet set = new HashSet(state.getMixinTypeNames());
-            // new primary type
-            set.add(ntName);
-            ntReg.getEffectiveNodeType((Name[]) set.toArray(new Name[set.size()]));
+            ntReg.getEffectiveNodeType(ntName, state.getMixinTypeNames());

INS8 INS54 INS60 INS25 INS54 MOV8 MOV12 MOV43 INS59 INS32 MOV8 INS8 INS12 INS60 INS42 MOV32 MOV42 MOV42 INS42 INS60 INS60 INS41 INS44 INS8 MOV43 INS59 MOV43 UPD42 INS7 UPD42 INS43 INS59 MOV43 INS59 INS32 INS43 INS42 INS60 INS21 INS53 UPD43 INS42 MOV32 INS42 MOV32 UPD42 UPD42 INS42 UPD42 MOV42 INS42 MOV32 INS42 INS42 INS32 INS42 INS32 INS42 MOV42 MOV42 INS42 INS43 INS59 INS32 INS14 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 INS42 MOV32 INS32 INS42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 MOV32 UPD42 MOV42 INS42 MOV42 INS42 MOV42 INS42 INS42 INS27 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS45 INS52 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL34 DEL27 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL34 DEL27 DEL2 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL32 DEL7 DEL21 DEL32 DEL25 DEL32 DEL32 DEL41 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11