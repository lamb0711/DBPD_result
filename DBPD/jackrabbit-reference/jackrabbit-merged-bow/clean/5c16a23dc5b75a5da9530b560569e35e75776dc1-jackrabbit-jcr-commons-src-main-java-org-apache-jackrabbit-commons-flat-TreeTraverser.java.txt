JCR-2711: BTreeManager needs more flexible mechanism for ignoring (internal) properties

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@984729 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.predicate.Predicate;
+
-    private final InclusionPolicy inclusionPolicy;
+    private final InclusionPolicy<? super Node> inclusionPolicy;
-    public TreeTraverser(Node root, ErrorHandler errorHandler, InclusionPolicy inclusionPolicy) {
+    public TreeTraverser(Node root, ErrorHandler errorHandler, InclusionPolicy<? super Node> inclusionPolicy) {
-     * Inclusion policy to determine which nodes to include when traversing.
+     * Inclusion policy to determine which itmes to include when traversing.
-     * <li>{@link #ALL} includes all nodes.</li>
+     * <li>{@link #ALL} includes all items.</li>
-     * which does not have childe nodes.</li>
+     * which does not have child nodes.</li>
-    public interface InclusionPolicy {
+    public interface InclusionPolicy<T extends Item> {
-         * This inclusions policy includes all nodes.
+         * This inclusions policy includes all items.
-        public static InclusionPolicy ALL = new InclusionPolicy() {
-            public boolean include(Node node) {
+        public static InclusionPolicy<Item> ALL = new InclusionPolicy<Item>() {
+            public boolean include(Item item) {
-         * This inclusion policy only includes leave nodes. A leaf node is a
-         * node which does not have child nodes.
+         * This inclusion policy includes leave nodes only. A leaf
+         * node is a node which does not have child nodes.
-        public static InclusionPolicy LEAVES = new InclusionPolicy() {
+        public static InclusionPolicy<Node> LEAVES = new InclusionPolicy<Node>() {
-         * Call back method to determine whether to include a given node.
+         * Call back method to determine whether to include a given item.
-         * @param node The node under consideration
-         * @return <code>true</code> when <code>node</code> should be included.
+         * @param item The item under consideration
+         * @return <code>true</code> when <code>item</code> should be included.
-        boolean include(Node node) throws RepositoryException;
+        boolean include(T item) throws RepositoryException;
-            InclusionPolicy inclusionPolicy) {
+            InclusionPolicy<? super Node> inclusionPolicy) {
+     * @param inclusionPolicy inclusion policy to determine properties items to include
+     *
-    public static Iterator<Property> propertyIterator(Iterator<Node> nodes, ErrorHandler errorHandler) {
-        return chain(propertyIterators(nodes, errorHandler));
+    public static Iterator<Property> propertyIterator(Iterator<Node> nodes, ErrorHandler errorHandler,
+            InclusionPolicy<? super Property> inclusionPolicy) {
+
+        return filter(chain(propertyIterators(nodes, errorHandler)), inclusionPolicy);
+
-        return propertyIterator(nodes, ErrorHandler.IGNORE);
+        return propertyIterator(nodes, ErrorHandler.IGNORE, InclusionPolicy.ALL);
-     * @param inclusionPolicy inclusion policy to determine which nodes to
+     * @param inclusionPolicy inclusion policy to determine which items to
-            InclusionPolicy inclusionPolicy) {
+            InclusionPolicy<Item> inclusionPolicy) {
-        return propertyIterator(nodeIterator(root, errorHandler, inclusionPolicy), errorHandler);
+        return propertyIterator(nodeIterator(root, errorHandler, inclusionPolicy), errorHandler,
+                inclusionPolicy);
+    /**
+     * Filtering items not matching the <code>inclusionPolicy</code> from
+     * <code>iterator</code>.
+     */
+    private static <T extends Item> Iterator<T> filter(final Iterator<T> iterator,
+            final InclusionPolicy<? super T> inclusionPolicy) {
+
+        return new FilterIterator<T>(iterator, new Predicate() {
+            @SuppressWarnings("unchecked")
+            public boolean evaluate(Object object) {
+                try {
+                    return inclusionPolicy.include((T) object);
+                }
+                catch (RepositoryException ignore) {
+                    return true;
+                }
+            }
+        });
+    }

INS26 INS40 INS31 INS74 INS73 INS44 INS29 INS83 INS83 INS73 INS74 INS42 INS44 INS44 INS8 MOV43 INS76 INS74 INS42 INS43 INS74 INS74 INS74 INS65 INS74 INS42 INS74 INS65 INS42 INS43 INS43 INS43 INS83 INS74 INS42 INS83 INS74 INS42 INS41 INS43 MOV43 INS76 UPD66 UPD66 UPD66 INS42 MOV43 INS43 MOV43 INS43 INS43 INS42 MOV43 INS76 INS42 INS66 INS43 INS76 INS32 UPD66 MOV43 INS43 INS66 INS66 INS42 INS42 INS42 INS43 INS43 INS43 INS76 INS14 INS42 INS43 UPD66 INS42 INS74 UPD66 UPD66 INS42 INS74 UPD66 UPD42 UPD66 UPD66 INS42 MOV43 INS42 INS43 INS42 MOV32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS14 INS42 MOV43 INS43 MOV43 INS43 INS42 INS42 INS43 INS43 INS43 INS1 INS42 INS42 INS42 INS42 INS42 INS31 UPD43 UPD42 INS79 INS83 INS39 INS42 INS44 INS8 UPD42 INS42 INS45 INS43 INS42 INS54 INS42 INS8 INS12 INS41 INS44 INS8 INS32 INS43 INS42 INS41 INS42 INS42 INS11 INS42 INS9 INS43 INS42 INS42 DEL42