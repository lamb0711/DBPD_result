JCR-2113 : WIP (Contribution by Alfusainey Jallow)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1640892 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.jackrabbit.webdav.DavException;
+import org.apache.jackrabbit.webdav.DavServletResponse;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+
+    public Privilege getPrivilege() {
+        return privilege;
+    }
+    
+    public boolean isAbstract() {
+        return isAbstract;
+    }
+    
+    public SupportedPrivilege[] getSupportedPrivileges() {
+        return supportedPrivileges;
+    }
+    
+    /**
+     * Factory method to create/retrieve a <code>SupportedPrivilege</code> from the given
+     * DAV:privilege element.
+     *
+     * @param privilege
+     * @return
+     */
+    static SupportedPrivilege getSupportedPrivilege(Element supportedPrivilege) throws DavException {
+        if (!DomUtil.matches(supportedPrivilege, XML_SUPPORTED_PRIVILEGE, SecurityConstants.NAMESPACE)) {
+            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "DAV:supported-privilege element expected.");
+        }
+        boolean isAbstract = false;
+        Privilege privilege = null;
+        String description = null;
+        String descriptionLanguage = null;
+        List<SupportedPrivilege> sp = new ArrayList<SupportedPrivilege>();
+
+        ElementIterator children = DomUtil.getChildren(supportedPrivilege);
+        while (children.hasNext()) {
+            Element child = children.next();
+            if (child.getLocalName().equals(XML_ABSTRACT)) {
+                isAbstract = true;
+            } else if (child.getLocalName().equals(Privilege.XML_PRIVILEGE)) {
+                privilege = Privilege.getPrivilege(child);
+            } else if (child.getLocalName().equals(XML_DESCRIPTION)) {
+                description = child.getLocalName();
+                if (child.hasAttribute(descriptionLanguage)) {
+                    descriptionLanguage = child.getAttribute(descriptionLanguage);
+                }
+            } else if (child.getLocalName().equals(XML_SUPPORTED_PRIVILEGE)) {
+                sp.add(getSupportedPrivilege(child));
+            }
+        }
+        return new SupportedPrivilege(privilege, description,
+                                     descriptionLanguage, isAbstract,
+                                     sp.toArray(new SupportedPrivilege[sp.size()]));
+    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS5 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS41 INS41 INS43 INS85 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS60 INS60 INS60 INS60 INS60 INS60 INS61 INS41 INS42 INS42 INS42 INS42 INS66 INS66 INS42 INS42 INS38 INS8 INS39 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS43 INS59 INS32 INS8 INS14 INS32 INS53 INS42 INS9 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS14 INS42 INS42 INS74 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS42 INS3 INS43 INS40 INS45 INS43 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS21 INS32 INS8 INS25 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS40 INS21 INS32 INS8 INS25 INS43 INS85 INS42 INS42 INS42 INS9 INS42 INS42 INS7 INS32 INS42 INS42 INS21 INS25 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS7 INS32 INS8 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42