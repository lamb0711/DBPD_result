JCR-3045 - ResourceConfig: read additional parameters for IOHandler and PropertyHandler that are covered by public setters

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1155390 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.jackrabbit.webdav.xml.Namespace;
+    private static final String ELEMENT_IOMANAGER = "iomanager";
+    private static final String ELEMENT_IOHANDLER = "iohandler";
+
+    private static final String ELEMENT_PROPERTYMANAGER = "propertymanager";
+    private static final String ELEMENT_PROPERTYHANDLER = "propertyhandler";
+
+    private static final String ELEMENT_CLASS = "class";
+
+    private static final String ELEMENT_PARAM = "param";
+    private static final String ATTR_NAME = "name";
+    private static final String ATTR_VALUE = "value";
+
-            InputStream in = configURL.openStream();
-            Element config = DomUtil.parseDocument(in).getDocumentElement();
+            parse(configURL.openStream());
+        } catch (IOException e) {
+            log.debug("Invalid resource configuration: " + e.getMessage());
+        }
+    }
+    /**
+     * Parses the given input stream into the xml configuration file.
+     * The xml must match the following structure:<br>
+     * <pre>
+     * &lt;!ELEMENT config (iomanager, propertymanager, (collection | noncollection)?, filter?, mimetypeproperties?) &gt;
+     * &lt;!ELEMENT iomanager (class, iohandler*) &gt;
+     * &lt;!ELEMENT iohandler (class) &gt;
+     * &lt;!ELEMENT propertymanager (class, propertyhandler*) &gt;
+     * &lt;!ELEMENT propertyhandler (class) &gt;
+     * &lt;!ELEMENT collection (nodetypes) &gt;
+     * &lt;!ELEMENT noncollection (nodetypes) &gt;
+     * &lt;!ELEMENT filter (class, namespaces?, nodetypes?) &gt;
+     * &lt;!ELEMENT class &gt;
+     *    &lt;!ATTLIST class
+     *      name  CDATA #REQUIRED
+     *    &gt;
+     * &lt;!ELEMENT namespaces (prefix|uri)* &gt;
+     * &lt;!ELEMENT prefix (CDATA) &gt;
+     * &lt;!ELEMENT uri (CDATA) &gt;
+     * &lt;!ELEMENT nodetypes (nodetype)* &gt;
+     * &lt;!ELEMENT nodetype (CDATA) &gt;
+     * &lt;!ELEMENT mimetypeproperties (mimemapping*, defaultmimetype) &gt;
+     * &lt;!ELEMENT mimemapping &gt;
+     *    &lt;!ATTLIST mimemapping
+     *      extension  CDATA #REQUIRED
+     *      mimetype  CDATA #REQUIRED
+     *    &gt;
+     * &lt;!ELEMENT defaultmimetype (CDATA) &gt;
+     * </pre>
+     * <p>
+     * The &lt;mimetypeproperties/&gt; settings have been deprecated and will
+     * be ignored with a warning. Instead you can use the
+     * {@link SimpleWebdavServlet#INIT_PARAM_MIME_INFO mime-info}
+     * servlet initialization parameter to customize the media type settings.
+     *
+     * @param stream
+     */
+    public void parse(InputStream stream) {
+        try {
+            Element config = DomUtil.parseDocument(stream).getDocumentElement();
-            Element el = DomUtil.getChildElement(config, "iomanager", null);
+            Element el = DomUtil.getChildElement(config, ELEMENT_IOMANAGER, null);
-                    ElementIterator iohElements = DomUtil.getChildren(el, "iohandler", null);
+                    ElementIterator iohElements = DomUtil.getChildren(el, ELEMENT_IOHANDLER, null);
-                            ioManager.addIOHandler((IOHandler) inst);
+                            IOHandler handler = (IOHandler) inst;
+                            setParameters(handler, iohEl);
+                            ioManager.addIOHandler(handler);
-            el = DomUtil.getChildElement(config, "propertymanager", null);
+            el = DomUtil.getChildElement(config, ELEMENT_PROPERTYMANAGER, null);
-                    ElementIterator iohElements = DomUtil.getChildren(el, "propertyhandler", null);
+                    ElementIterator iohElements = DomUtil.getChildren(el, ELEMENT_PROPERTYHANDLER, null);
-                            propManager.addPropertyHandler((PropertyHandler) inst);
+                            PropertyHandler handler = (PropertyHandler) inst;
+                            setParameters(handler, iohEl);
+                            propManager.addPropertyHandler(handler);
-                log.warn("Ignoring deprecated mimetypeproperties settings: {}",
-                        configURL);
+                log.warn("Ignoring deprecated mimetypeproperties settings");
+     * Retrieve 'param' elements for the specified <code>xmlElement</code> and
+     * use the public setter methods of the given <code>instance</code> to set
+     * the corresponding instance fields.
+     *
+     * @param instance
+     * @param xmlElement
+     */
+    private static void setParameters(Object instance, Element xmlElement) {
+        ElementIterator paramElems = DomUtil.getChildren(xmlElement, ELEMENT_PARAM, Namespace.EMPTY_NAMESPACE);
+        if (paramElems.hasNext()) {
+            Map<String, Method> setters = getSetters(instance.getClass());
+            if (!setters.isEmpty()) {
+                while (paramElems.hasNext()) {
+                    Element parameter = paramElems.next();
+                    String name = DomUtil.getAttribute(parameter, ATTR_NAME, null);
+                    String value = DomUtil.getAttribute(parameter, ATTR_VALUE, null);
+                    if (name == null || value == null) {
+                        log.error("Parameter name or value missing -> ignore.");
+                        continue;
+                    }
+                    Method setter = setters.get(name);
+                    if (setter != null) {
+                        Class<?> type = setter.getParameterTypes()[0];
+                        try {
+                            if (type.isAssignableFrom(String.class)
+                                    || type.isAssignableFrom(Object.class)) {
+                                setter.invoke(instance, value);
+                            } else if (type.isAssignableFrom(Boolean.TYPE)
+                                    || type.isAssignableFrom(Boolean.class)) {
+                                setter.invoke(instance, Boolean.valueOf(value));
+                            } else if (type.isAssignableFrom(Integer.TYPE)
+                                    || type.isAssignableFrom(Integer.class)) {
+                                setter.invoke(instance, Integer.valueOf(value));
+                            } else if (type.isAssignableFrom(Long.TYPE)
+                                    || type.isAssignableFrom(Long.class)) {
+                                setter.invoke(instance, Long.valueOf(value));
+                            } else if (type.isAssignableFrom(Double.TYPE)
+                                    || type.isAssignableFrom(Double.class)) {
+                                setter.invoke(instance, Double.valueOf(value));
+                            } else {
+                                log.error("Cannot set configuration property " + name);
+                            }
+                        } catch (Exception e) {
+                            log.error("Invalid format (" + value + ") for property " + name + " of class " + instance.getClass().getName(), e);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    private static Map<String, Method> getSetters(Class<?> cl) {
+        Map<String, Method> methods = new HashMap<String, Method>();
+        for (Method method : cl.getMethods()) {
+            String name = method.getName();
+            if (name.startsWith("set") && name.length() > 3
+                    && Modifier.isPublic(method.getModifiers())
+                    && !Modifier.isStatic(method.getModifiers())
+                    && Void.TYPE.equals(method.getReturnType())
+                    && method.getParameterTypes().length == 1) {
+                methods.put(name.substring(3, 4).toLowerCase() + name.substring(4), method);
+            }
+        }
+        return methods;
+    }
+
+    /**

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV29 INS83 INS39 INS42 MOV44 INS8 INS29 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS54 INS65 INS65 MOV43 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS25 INS43 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS8 INS12 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS43 INS76 INS74 INS59 INS44 INS32 INS8 INS42 INS21 INS44 INS8 INS67 INS66 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS25 INS32 INS43 INS42 INS21 INS42 INS42 MOV43 MOV43 INS42 INS42 INS42 INS42 INS40 INS74 INS59 INS38 INS8 INS42 INS42 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS42 MOV32 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS32 INS61 INS43 INS43 INS43 INS42 INS42 INS32 INS27 INS27 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS22 INS34 INS32 INS45 INS32 UPD42 UPD45 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS60 INS25 INS27 INS38 INS40 INS42 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 MOV43 MOV43 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS21 INS18 INS42 INS42 INS32 INS42 INS33 INS60 INS54 INS32 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS32 INS42 INS42 INS42 INS74 INS59 INS8 INS12 INS42 INS42 INS45 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS34 INS60 INS21 INS60 INS21 INS42 INS42 INS45 INS43 INS76 INS42 INS2 INS25 INS44 INS8 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS32 INS34 INS27 INS8 INS25 INS43 INS42 INS21 INS42 INS42 MOV11 INS42 INS42 INS42 INS42 INS42 INS42 MOV11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS27 INS8 INS25 INS42 INS32 INS42 INS42 INS57 INS42 INS42 INS57 INS32 INS32 INS32 INS21 INS27 INS8 INS25 INS42 INS42 INS27 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS57 INS32 INS32 INS32 INS21 INS27 INS8 INS25 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS57 INS32 INS32 INS32 INS21 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS57 INS32 INS32 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS57 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS42 DEL42 DEL59 DEL60 DEL45 DEL45 DEL45 DEL45 DEL42