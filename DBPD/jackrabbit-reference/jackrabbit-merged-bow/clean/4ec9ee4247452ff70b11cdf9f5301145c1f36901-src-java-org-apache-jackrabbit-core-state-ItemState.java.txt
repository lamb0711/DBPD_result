- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
-import java.util.*;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.Map;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.19 $, $Date: 2004/08/02 16:19:48 $
-	switch (initialStatus) {
-	    case STATUS_EXISTING:
-	    case STATUS_NEW:
-		status = initialStatus;
-		break;
-	    default:
-		String msg = "illegal status: " + initialStatus;
-		log.error(msg);
-		throw new IllegalArgumentException(msg);
-	}
-	this.id = id;
-	this.parentUUID = parentUUID;
-	baseVersionID = "v0.0";
-	// @todo use modification count instead of ms (not precise enough)
-	lastModified = System.currentTimeMillis();
-	overlayedState = null;
+        switch (initialStatus) {
+            case STATUS_EXISTING:
+            case STATUS_NEW:
+                status = initialStatus;
+                break;
+            default:
+                String msg = "illegal status: " + initialStatus;
+                log.error(msg);
+                throw new IllegalArgumentException(msg);
+        }
+        this.id = id;
+        this.parentUUID = parentUUID;
+        baseVersionID = "v0.0";
+        // @todo use modification count instead of ms (not precise enough)
+        lastModified = System.currentTimeMillis();
+        overlayedState = null;
-	switch (initialStatus) {
-	    case STATUS_EXISTING_MODIFIED:
-	    case STATUS_EXISTING_REMOVED:
-		status = initialStatus;
-		break;
-	    default:
-		String msg = "illegal status: " + initialStatus;
-		log.error(msg);
-		throw new IllegalArgumentException(msg);
-	}
-	parentUUID = overlayedState.parentUUID;
-	baseVersionID = overlayedState.getBaseVersionID();
-	lastModified = overlayedState.getLastModified();
-	id = overlayedState.getId();
-	this.overlayedState = overlayedState;
-	// add this transient state as a listener on the overlayed state
-	this.overlayedState.addListener(this);
+        switch (initialStatus) {
+            case STATUS_EXISTING_MODIFIED:
+            case STATUS_EXISTING_REMOVED:
+                status = initialStatus;
+                break;
+            default:
+                String msg = "illegal status: " + initialStatus;
+                log.error(msg);
+                throw new IllegalArgumentException(msg);
+        }
+        parentUUID = overlayedState.parentUUID;
+        baseVersionID = overlayedState.getBaseVersionID();
+        lastModified = overlayedState.getLastModified();
+        id = overlayedState.getId();
+        this.overlayedState = overlayedState;
+        // add this transient state as a listener on the overlayed state
+        this.overlayedState.addListener(this);
-	// prepare this instance so it can be gc'ed
-	listeners.clear();
-	if (overlayedState != null) {
-	    overlayedState.removeListener(this);
-	    overlayedState = null;
-	}
-	status = STATUS_UNDEFINED;
+        // prepare this instance so it can be gc'ed
+        listeners.clear();
+        if (overlayedState != null) {
+            overlayedState.removeListener(this);
+            overlayedState = null;
+        }
+        status = STATUS_UNDEFINED;
-	// copy listeners to array to avoid ConcurrentModificationException
-	ItemStateListener[] la = new ItemStateListener[listeners.size()];
-	Iterator iter = listeners.values().iterator();
-	int cnt = 0;
-	while (iter.hasNext()) {
-	    la[cnt++] = (ItemStateListener) iter.next();
-	}
-	for (int i = 0; i < la.length; i++) {
-	    if (la[i] != null) {
-		la[i].stateDiscarded(this);
-	    }
-	}
+        // copy listeners to array to avoid ConcurrentModificationException
+        ItemStateListener[] la = new ItemStateListener[listeners.size()];
+        Iterator iter = listeners.values().iterator();
+        int cnt = 0;
+        while (iter.hasNext()) {
+            la[cnt++] = (ItemStateListener) iter.next();
+        }
+        for (int i = 0; i < la.length; i++) {
+            if (la[i] != null) {
+                la[i].stateDiscarded(this);
+            }
+        }
-	// copy listeners to array to avoid ConcurrentModificationException
-	ItemStateListener[] la = new ItemStateListener[listeners.size()];
-	Iterator iter = listeners.values().iterator();
-	int cnt = 0;
-	while (iter.hasNext()) {
-	    la[cnt++] = (ItemStateListener) iter.next();
-	}
-	for (int i = 0; i < la.length; i++) {
-	    if (la[i] != null) {
-		la[i].stateCreated(this);
-	    }
-	}
+        // copy listeners to array to avoid ConcurrentModificationException
+        ItemStateListener[] la = new ItemStateListener[listeners.size()];
+        Iterator iter = listeners.values().iterator();
+        int cnt = 0;
+        while (iter.hasNext()) {
+            la[cnt++] = (ItemStateListener) iter.next();
+        }
+        for (int i = 0; i < la.length; i++) {
+            if (la[i] != null) {
+                la[i].stateCreated(this);
+            }
+        }
-	// copy listeners to array to avoid ConcurrentModificationException
-	ItemStateListener[] la = new ItemStateListener[listeners.size()];
-	Iterator iter = listeners.values().iterator();
-	int cnt = 0;
-	while (iter.hasNext()) {
-	    la[cnt++] = (ItemStateListener) iter.next();
-	}
-	for (int i = 0; i < la.length; i++) {
-	    if (la[i] != null) {
-		la[i].stateModified(this);
-	    }
-	}
+        // copy listeners to array to avoid ConcurrentModificationException
+        ItemStateListener[] la = new ItemStateListener[listeners.size()];
+        Iterator iter = listeners.values().iterator();
+        int cnt = 0;
+        while (iter.hasNext()) {
+            la[cnt++] = (ItemStateListener) iter.next();
+        }
+        for (int i = 0; i < la.length; i++) {
+            if (la[i] != null) {
+                la[i].stateModified(this);
+            }
+        }
-	// copy listeners to array to avoid ConcurrentModificationException
-	ItemStateListener[] la = new ItemStateListener[listeners.size()];
-	Iterator iter = listeners.values().iterator();
-	int cnt = 0;
-	while (iter.hasNext()) {
-	    la[cnt++] = (ItemStateListener) iter.next();
-	}
-	for (int i = 0; i < la.length; i++) {
-	    if (la[i] != null) {
-		la[i].stateDestroyed(this);
-	    }
-	}
+        // copy listeners to array to avoid ConcurrentModificationException
+        ItemStateListener[] la = new ItemStateListener[listeners.size()];
+        Iterator iter = listeners.values().iterator();
+        int cnt = 0;
+        while (iter.hasNext()) {
+            la[cnt++] = (ItemStateListener) iter.next();
+        }
+        for (int i = 0; i < la.length; i++) {
+            if (la[i] != null) {
+                la[i].stateDestroyed(this);
+            }
+        }
-	return id;
+        return id;
-	return status != STATUS_EXISTING;
+        return status != STATUS_EXISTING;
-	return parentUUID;
+        return parentUUID;
-	this.parentUUID = parentUUID;
+        this.parentUUID = parentUUID;
-	return status;
+        return status;
-	switch (newStatus) {
-	    case ItemState.STATUS_NEW:
-	    case ItemState.STATUS_EXISTING:
-	    case ItemState.STATUS_EXISTING_REMOVED:
-	    case ItemState.STATUS_EXISTING_MODIFIED:
-	    case ItemState.STATUS_STALE_MODIFIED:
-	    case ItemState.STATUS_STALE_DESTROYED:
-	    case ItemState.STATUS_UNDEFINED:
-		status = newStatus;
-		return;
-	}
-	String msg = "illegal status: " + newStatus;
-	log.error(msg);
-	throw new IllegalArgumentException(msg);
+        switch (newStatus) {
+            case ItemState.STATUS_NEW:
+            case ItemState.STATUS_EXISTING:
+            case ItemState.STATUS_EXISTING_REMOVED:
+            case ItemState.STATUS_EXISTING_MODIFIED:
+            case ItemState.STATUS_STALE_MODIFIED:
+            case ItemState.STATUS_STALE_DESTROYED:
+            case ItemState.STATUS_UNDEFINED:
+                status = newStatus;
+                return;
+        }
+        String msg = "illegal status: " + newStatus;
+        log.error(msg);
+        throw new IllegalArgumentException(msg);
-	if (status != STATUS_UNDEFINED) {
-	    // notify listeners
-	    notifyStateDiscarded();
-	    // reset status
-	    status = STATUS_UNDEFINED;
-	}
+        if (status != STATUS_UNDEFINED) {
+            // notify listeners
+            notifyStateDiscarded();
+            // reset status
+            status = STATUS_UNDEFINED;
+        }
-	return overlayedState != null;
+        return overlayedState != null;
-	return overlayedState;
+        return overlayedState;
-	return lastModified;
+        return lastModified;
-	return baseVersionID;
+        return baseVersionID;
-	if (!listeners.containsKey(listener)) {
-	    listeners.put(listener, listener);
-	}
+        if (!listeners.containsKey(listener)) {
+            listeners.put(listener, listener);
+        }
-	listeners.remove(listener);
+        listeners.remove(listener);
-	// underlying persistent state has been permanently destroyed
-	status = STATUS_STALE_DESTROYED;
+        // underlying persistent state has been permanently destroyed
+        status = STATUS_STALE_DESTROYED;
-	// underlying state has been modified
-	status = STATUS_STALE_MODIFIED;
+        // underlying state has been modified
+        status = STATUS_STALE_MODIFIED;
-	// delegate to default implementation
-	out.defaultWriteObject();
+        // delegate to default implementation
+        out.defaultWriteObject();
-	// delegate to default implementation
-	in.defaultReadObject();
+        // delegate to default implementation
+        in.defaultReadObject();

MOV26 INS26 INS26 INS40 INS40 UPD40 DEL66 DEL65 DEL66 DEL65