JCR-415: Enhance indexing of binary content
- Remove workaround with TextExtractorReader. Binary content is now indexed (text extracted) when really needed.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@489112 13f79535-47bb-0310-9956-ffa450edef68

-     * @param add    Iterator of <code>Document</code>s to add. Calls to
-     *               <code>next()</code> on this iterator may return
-     *               <code>null</code>, to indicate that a node could not be
-     *               indexed successfully.
+     * @param add    Iterator of <code>NodeIndexer</code>s to add.
-                Document doc = (Document) add.next();
-                if (doc != null) {
-                    executeAndLog(new AddNode(transactionId, doc));
-                    // commit volatile index if needed
-                    flush |= checkVolatileCommit();
-                }
+                NodeIndexer nodeIdx = (NodeIndexer) add.next();
+                executeAndLog(new AddNode(transactionId, nodeIdx));
+                // commit volatile index if needed
+                flush |= checkVolatileCommit();
-     * Returns a lucene Document for the <code>node</code>.
+     * Returns a <code>NodeIndexer</code> for the <code>node</code>.
-     * @return the index document.
+     * @return the node indexer.
-    Document createDocument(NodeState node) throws RepositoryException {
-        return handler.createDocument(node, nsMappings);
+    NodeIndexer createNodeIndexer(NodeState node) throws RepositoryException {
+        return handler.createNodeIndexer(node, nsMappings);
-     * Returns a lucene Document for the Node with <code>id</code>.
+     * Returns a <code>NodeIndexer</code> for the Node with <code>id</code>.
-     * @return the index document.
+     * @return the node indexer.
-    private Document createDocument(NodeId id) throws RepositoryException {
+    private NodeIndexer createNodeIndexer(NodeId id) throws RepositoryException {
-            return createDocument(state);
+            return createNodeIndexer(state);
-         * The document to add to the index, or <code>null</code> if not available.
+         * The node indexer for a node to add to the index, or <code>null</code>
+         * if not available.
-        private Document doc;
+        private NodeIndexer nodeIndexer;
-         * @param doc the document to add.
+         * @param nodeIdx the node indexer to add.
-        AddNode(long transactionId, Document doc) {
-            this(transactionId, UUID.fromString(doc.get(FieldNames.UUID)));
-            this.doc = doc;
+        AddNode(long transactionId, NodeIndexer nodeIdx) {
+            this(transactionId, nodeIdx.getNodeId().getUUID());
+            this.nodeIndexer = nodeIdx;
-            if (doc == null) {
+            if (nodeIndexer == null) {
-                    doc = index.createDocument(new NodeId(uuid));
+                    nodeIndexer = index.createNodeIndexer(new NodeId(uuid));
-            if (doc != null) {
-                index.volatileIndex.addDocument(doc);
+            if (nodeIndexer != null) {
+                index.volatileIndex.addNode(nodeIndexer);

MOV8 UPD43 UPD42 UPD43 UPD42 MOV51 INS54 UPD42 UPD42 UPD43 UPD66 MOV8 MOV8 UPD66 UPD66 UPD66 UPD66 UPD42 UPD42 UPD43 UPD42 MOV60 MOV21 MOV60 MOV61 INS61 INS21 UPD42 UPD66 INS66 UPD42 UPD66 UPD42 MOV32 MOV8 INS32 MOV42 INS8 INS32 UPD42 MOV42 UPD42 UPD42 UPD42 MOV60 INS42 MOV14 INS21 MOV21 MOV25 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD43 INS32 MOV32 MOV27 UPD42 UPD42 UPD42 UPD42 INS42 MOV21 MOV21 UPD43 UPD42 UPD42 UPD42 UPD42 DEL66 DEL66 DEL66 DEL42 DEL33 DEL27 DEL61 DEL54 DEL8 DEL42 DEL40 DEL32