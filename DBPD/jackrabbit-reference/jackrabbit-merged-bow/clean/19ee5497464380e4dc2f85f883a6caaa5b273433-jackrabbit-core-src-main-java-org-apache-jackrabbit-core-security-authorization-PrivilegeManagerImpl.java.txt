JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1082239 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
-     * 
+     * The privilege registry
-     * Returns all registered privileges.
-     *
-     * @return all registered privileges.
+     * @see PrivilegeManager#getRegisteredPrivileges()
-     * Returns the privilege with the specified <code>privilegeName</code>.
-     *
-     * @param privilegeName Name of the principal.
-     * @return the privilege with the specified <code>privilegeName</code>.
-     * @throws javax.jcr.security.AccessControlException If no privilege with the given name exists.
-     * @throws javax.jcr.RepositoryException If another error occurs.
+     * @see PrivilegeManager#getPrivilege(String)
-     * names can be resolved to registered privileges and if there exists no
-     * registered privilege with the same aggregated privileges.</li>
+     * names can be resolved to registered custom privileges and if there exists
+     * no registered privilege with the same aggregated privileges.</li>
-     * This also implies that the {@link Permission}s are not effected by
+     * This also implies that the {@link Permission}s are not affected by
+     * @see PrivilegeManager#registerPrivilege(String, boolean, String[])
-    //-----------------------------< implementation specific public methods >---
+    //-----------------------------< implementation specific public methods >---       
+    /**
+     * Returns <code>true</code> if the specified privilege is a custom
+     * privilege that has been
+     * {@link #registerPrivilege(String, boolean, String[]) registered} before.
+     *
+     * @param privilege
+     * @return <code>true</code> if the specified privilege is a custom
+     * privilege; <code>false</code> otherwise.
+     * @throws AccessControlException If the specified privilege is
+     * <code>null</code> or unknown to this manager.
+     */
+    public boolean isCustomPrivilege(Privilege privilege) throws AccessControlException {
+        if (privilege instanceof PrivilegeImpl) {
+            return ((PrivilegeImpl) privilege).definition.isCustom();
+        } else {
+            throw new AccessControlException("Invalid privilege instance.");
+        }
+    }
+
-     * @return The privilege bits.
+     * @return The bits of the built-in privileges contained in the specified
+     * array.
-     * @see #getPrivileges(int)
-        int bits = PrivilegeRegistry.NO_PRIVILEGE;
-        for (Privilege priv : privileges) {
+        PrivilegeRegistry.Definition[] defs = new PrivilegeRegistry.Definition[privileges.length];
+        for (int i = 0; i < privileges.length; i++) {
+            Privilege priv = privileges[i];
-                bits |= ((PrivilegeImpl) priv).definition.getBits();
+                defs[i] = ((PrivilegeImpl) priv).definition;
-        return bits;
+        return registry.getBits(defs);
-     * 
-     * @param privilegeNames
-     * @return
-     * @throws AccessControlException
-     * @throws RepositoryException
-     */
-    public int getBits(String[] privilegeNames) throws AccessControlException {
-        if (privilegeNames == null || privilegeNames.length == 0) {
-            throw new AccessControlException("Privilege name array is null or empty.");
-        }
-        int bits = PrivilegeRegistry.NO_PRIVILEGE;
-        for (String privName : privilegeNames) {
-            try {
-                PrivilegeRegistry.Definition def = registry.get(resolver.getQName(privName));
-                if (def == null) {
-                    throw new AccessControlException("Unknown privilege name '" + privName + "'.");
-                } else {
-                    bits |= def.getBits();
-                }
-            } catch (NamespaceException e) {
-                throw new AccessControlException("Invalid privilege name '" + privName + "'.");
-            } catch (IllegalNameException e) {
-                throw new AccessControlException("Invalid privilege name '" + privName + "'.");
-            }
-        }
-        return bits;
-    }
-        
-    /**
-     * @see #getBits(String[])
-    public Privilege[] getPrivileges(int bits) {
+    public Set<Privilege> getPrivileges(int bits) {
-            return EMPTY_ARRAY;
+            return Collections.emptySet();
-            Privilege[] privs = new Privilege[names.length];
-            for (int i = 0; i < names.length; i++) {
+            Set<Privilege> privs = new HashSet<Privilege>(names.length);
+            for (Name n : names) {
-                    privs[i] = getPrivilege(names[i]);
+                    privs.add(getPrivilege(n));
-                    log.error("Internal error: invalid privilege name " + names[i].toString());
+                    log.error("Internal error: invalid privilege name " + n.toString());
+    //------------------------------------------------------------< private >---
+    /**
+     * @param name
+     * @return The privilege with the specified name.
+     * @throws AccessControlException
+     * @throws RepositoryException
+     */
-
-            Name[] aggrNames = definition.getDeclaredAggregateNames();
-            if (aggrNames.length == 0) {
+            Name[] declAggrNames = definition.getDeclaredAggregateNames();
+            if (declAggrNames.length == 0) {
-                declaredAggregates = new Privilege[aggrNames.length];
-                for (int i = 0; i < aggrNames.length; i++) {
-                    declaredAggregates[i] = getPrivilege(aggrNames[i]);
+                declaredAggregates = new Privilege[declAggrNames.length];
+                for (int i = 0; i < declAggrNames.length; i++) {
+                    declaredAggregates[i] = getPrivilege(declAggrNames[i]);

MOV31 INS29 UPD39 INS42 MOV44 INS74 MOV29 INS65 UPD65 UPD65 INS65 INS65 INS65 INS65 INS65 UPD42 INS25 INS24 INS43 INS43 INS66 INS68 INS68 UPD66 UPD66 UPD66 INS68 INS66 INS66 UPD65 MOV65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS62 INS8 MOV8 UPD66 INS66 INS5 MOV58 INS27 MOV37 MOV8 INS32 INS42 MOV42 UPD42 INS66 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS69 INS69 INS69 INS66 INS42 INS43 INS41 INS43 INS85 UPD42 INS3 INS42 INS40 INS60 INS42 INS42 INS42 INS70 INS43 MOV43 INS39 INS5 UPD42 INS69 INS69 UPD42 MOV42 INS32 INS40 INS5 INS40 INS43 INS59 INS32 INS74 INS44 INS42 INS8 UPD42 UPD40 INS42 INS42 INS43 INS85 MOV43 INS39 INS22 UPD42 MOV42 UPD45 MOV43 INS85 INS42 INS42 INS2 INS42 INS42 INS43 INS43 INS14 INS43 INS42 MOV54 INS42 INS36 INS42 INS42 INS42 UPD7 INS42 MOV42 INS74 INS40 INS42 UPD40 INS11 INS2 MOV22 INS43 INS43 UPD40 INS43 INS42 INS42 INS42 INS42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS32 MOV42 INS42 UPD42 INS42 DEL40 DEL26 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL40 DEL66 DEL65 DEL40 DEL66 DEL65 DEL42 DEL85 DEL5 DEL42 DEL44 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL25 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL41 DEL42 DEL39 DEL69 DEL68 DEL65 DEL39 DEL40 DEL42 DEL42 DEL32 DEL42 DEL70 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL43 DEL85 DEL5 DEL40 DEL3 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL32 DEL7 DEL42 DEL42 DEL2 DEL42 DEL40 DEL27 DEL8 DEL24