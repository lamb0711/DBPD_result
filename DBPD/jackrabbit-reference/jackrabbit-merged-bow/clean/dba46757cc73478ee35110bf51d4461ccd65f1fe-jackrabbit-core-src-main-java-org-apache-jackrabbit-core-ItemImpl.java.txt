JCR-1775: Transaction-safe versioning

Remove the ItemImpl -> ItemValidator dependency.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@701130 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
-            String msg;
-        ItemValidator validator = new ItemValidator(ntMgr.getNodeTypeRegistry(),
-                session.getHierarchyManager(), session);
-                EffectiveNodeType ent = validator.getEffectiveNodeType(nodeState);
+                EffectiveNodeType ent = getEffectiveNodeType(nodeState);
-        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
-        ItemValidator validator = new ItemValidator(ntMgr.getNodeTypeRegistry(),
-                session.getHierarchyManager(), session);
-                    EffectiveNodeType ntOld = validator.getEffectiveNodeType(old);
+                    EffectiveNodeType ntOld = getEffectiveNodeType(old);
-                EffectiveNodeType ntNew = validator.getEffectiveNodeType(ns);
+                EffectiveNodeType ntNew = getEffectiveNodeType(ns);
-        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
-        ItemValidator validator = new ItemValidator(ntMgr.getNodeTypeRegistry(),
-                session.getHierarchyManager(), session);
-                EffectiveNodeType nt = validator.getEffectiveNodeType(nodeState);
+                EffectiveNodeType nt = getEffectiveNodeType(nodeState);
+     * Helper method that builds the effective (i.e. merged and resolved)
+     * node type representation of the specified node's primary and mixin
+     * node types.
+     *
+     * @param state
+     * @return the effective node type
+     * @throws RepositoryException
+     */
+    private EffectiveNodeType getEffectiveNodeType(NodeState state)
+            throws RepositoryException {
+        try {
+            NodeTypeRegistry registry =
+                session.getNodeTypeManager().getNodeTypeRegistry();
+            return registry.getEffectiveNodeType(
+                    state.getNodeTypeName(), state.getMixinTypeNames());
+        } catch (NodeTypeConflictException e) {
+            throw new RepositoryException(
+                    "Failed to build effective node type of node state "
+                    + state.getId(), e);
+        }
+    }
+
+    /**

INS26 INS26 INS40 INS40 INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS54 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS8 INS12 INS60 INS41 INS44 INS8 INS43 INS59 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS14 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS32 MOV43 INS42 INS42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL14 DEL59 DEL60 DEL42