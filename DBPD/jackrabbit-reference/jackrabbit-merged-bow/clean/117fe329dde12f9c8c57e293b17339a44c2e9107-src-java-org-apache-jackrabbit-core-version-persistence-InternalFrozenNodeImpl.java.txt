- adding correct mix:versionable handle for workspaceimporter

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@165408 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.value.InternalValue;
-     * checkin mode init. specifies, that node is only initialized
+     * checkin mode version.
-    public static final int MODE_INIT = 0;
-
-    /**
-     * checkin mode version. specifies, that the OPV value should be used to
-     * determine the checkin behaviour.
-     */
-    public static final int MODE_VERSION = 1;
+    private static final int MODE_VERSION = 0;
-    private static final int MODE_COPY = 2;
+    private static final int MODE_COPY = 1;
-    private static final int MODE_COPY_RECURSIVE = 6;
+    private static final int MODE_COPY_RECURSIVE = 3;
+                                            NodeImpl src)
+            throws RepositoryException {
+        return checkin(parent, name, src, MODE_VERSION);
+    }
+
+    /**
+     * Checks-in a <code>src</code> node. It creates a new child node of
+     * <code>parent</code> with the given <code>name</code> and adds the
+     * source nodes properties according to their OPV value to the
+     * list of frozen properties. It creates frozen child nodes for each child
+     * node of <code>src</code> according to its OPV value.
+     *
+     * @param parent
+     * @param name
+     * @param src
+     * @return
+     * @throws RepositoryException
+     */
+    private static PersistentNode checkin(PersistentNode parent, QName name,
-        PersistentNode node;
-
-        node = parent.addNode(name, NativePVM.NT_REP_FROZEN, null);
+        PersistentNode node = parent.addNode(name, NativePVM.NT_REP_FROZEN, null);
-
-
-        if (mode != MODE_INIT) {
-            // add the properties
-            PropertyIterator piter = src.getProperties();
-            while (piter.hasNext()) {
-                PropertyImpl prop = (PropertyImpl) piter.nextProperty();
-                int opv;
-                if ((mode & MODE_COPY) > 0) {
-                    opv = OnParentVersionAction.COPY;
-                } else {
-                    opv = prop.getDefinition().getOnParentVersion();
-                }
-                switch (opv) {
-                    case OnParentVersionAction.ABORT:
-                        parent.reload();
-                        throw new VersionException("Checkin aborted due to OPV in " + prop.safeGetJCRPath());
-                    case OnParentVersionAction.COMPUTE:
-                    case OnParentVersionAction.IGNORE:
-                    case OnParentVersionAction.INITIALIZE:
-                        break;
-                    case OnParentVersionAction.VERSION:
-                    case OnParentVersionAction.COPY:
-                        node.copyFrom(prop);
-                        break;
-                }
+
+        // add the properties
+        PropertyIterator piter = src.getProperties();
+        while (piter.hasNext()) {
+            PropertyImpl prop = (PropertyImpl) piter.nextProperty();
+            int opv;
+            if ((mode & MODE_COPY) > 0) {
+                opv = OnParentVersionAction.COPY;
+            } else {
+                opv = prop.getDefinition().getOnParentVersion();
+            switch (opv) {
+                case OnParentVersionAction.ABORT:
+                    parent.reload();
+                    throw new VersionException("Checkin aborted due to OPV in " + prop.safeGetJCRPath());
+                case OnParentVersionAction.COMPUTE:
+                case OnParentVersionAction.IGNORE:
+                case OnParentVersionAction.INITIALIZE:
+                    break;
+                case OnParentVersionAction.VERSION:
+                case OnParentVersionAction.COPY:
+                    node.copyFrom(prop);
+                    break;
+            }
+        }
-
-            // add the frozen children and vistories
-            NodeIterator niter = src.getNodes();
-            while (niter.hasNext()) {
-                NodeImpl child = (NodeImpl) niter.nextNode();
-                int opv;
-                if ((mode & MODE_COPY_RECURSIVE) > 0) {
-                    opv = OnParentVersionAction.COPY;
-                } else {
-                    opv = child.getDefinition().getOnParentVersion();
-                }
-                switch (opv) {
-                    case OnParentVersionAction.ABORT:
-                        throw new VersionException("Checkin aborted due to OPV in " + child.safeGetJCRPath());
-                    case OnParentVersionAction.COMPUTE:
-                    case OnParentVersionAction.IGNORE:
-                    case OnParentVersionAction.INITIALIZE:
+        // add the frozen children and vistories
+        NodeIterator niter = src.getNodes();
+        while (niter.hasNext()) {
+            NodeImpl child = (NodeImpl) niter.nextNode();
+            int opv;
+            if ((mode & MODE_COPY_RECURSIVE) > 0) {
+                opv = OnParentVersionAction.COPY;
+            } else {
+                opv = child.getDefinition().getOnParentVersion();
+            }
+            switch (opv) {
+                case OnParentVersionAction.ABORT:
+                    throw new VersionException("Checkin aborted due to OPV in " + child.safeGetJCRPath());
+                case OnParentVersionAction.COMPUTE:
+                case OnParentVersionAction.IGNORE:
+                case OnParentVersionAction.INITIALIZE:
+                    break;
+                case OnParentVersionAction.VERSION:
+                    if (child.isNodeType(MIX_VERSIONABLE)) {
+                        // create frozen versionable child
+                        PersistentNode newChild = node.addNode(child.getQName(), NativePVM.NT_REP_FROZEN_HISTORY, null);
+                        newChild.setPropertyValue(JCR_VERSIONHISTORY,
+                                InternalValue.create(child.getVersionHistory().getUUID()));
+                        newChild.setPropertyValue(JCR_BASEVERSION,
+                                InternalValue.create(child.getBaseVersion().getUUID()));
-                    case OnParentVersionAction.VERSION:
-                        if (child.isNodeType(MIX_VERSIONABLE)) {
-                            // create frozen versionable child
-                            PersistentNode newChild = node.addNode(child.getQName(), NativePVM.NT_REP_FROZEN_HISTORY, null);
-                            newChild.setPropertyValue(JCR_VERSIONHISTORY,
-                                    InternalValue.create(child.getVersionHistory().getUUID()));
-                            newChild.setPropertyValue(JCR_BASEVERSION,
-                                    InternalValue.create(child.getBaseVersion().getUUID()));
-                            break;
-                        }
-                        // else copy but do not recurse
-                        checkin(node, child.getQName(), child, MODE_COPY);
-                        break;
-                    case OnParentVersionAction.COPY:
-                        checkin(node, child.getQName(), child, MODE_COPY_RECURSIVE);
-                        break;
-                }
+                    }
+                    // else copy but do not recurse
+                    checkin(node, child.getQName(), child, MODE_COPY);
+                    break;
+                case OnParentVersionAction.COPY:
+                    checkin(node, child.getQName(), child, MODE_COPY_RECURSIVE);
+                    break;

INS31 UPD83 MOV29 UPD83 MOV29 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 UPD83 MOV8 UPD42 UPD42 UPD42 UPD34 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS60 MOV25 MOV21 MOV25 MOV41 UPD66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 DEL40 DEL26 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL27 DEL25 DEL8