JCR-1104: JSR 283 support
- support for prepared queries has been moved to existing Query interface
- removed PreparedQuery again

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@632309 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.query.PreparedQueryImpl;
-import org.apache.jackrabbit.spi.commons.query.jsr283.PreparedQuery;
-     * Name of the parameter that indicates the prepared query implementation
-     * class.
-     */
-    private static final String PARAM_PREPARED_QUERY_IMPL = "preparedQueryClass";
-
-    /**
-     * Name of the default prepared query implementation class.
-     */
-    private static final String DEFAULT_PREPARED_QUERY_IMPL_CLASS = PreparedQueryImpl.class.getName();
-
-    /**
-     * Fully qualified name of the prepared query implementation class.
-     * This class must extend {@link org.apache.jackrabbit.core.query.AbstractQueryImpl}
-     * and implement {@link PreparedQuery}!
-     */
-    private final String preparedQueryImplClassName;
-
-    /**
-        preparedQueryImplClassName = params.getProperty(PARAM_PREPARED_QUERY_IMPL, DEFAULT_PREPARED_QUERY_IMPL_CLASS);
-     * Creates a prepared query object that can be executed on the workspace.
-     *
-     * @param session   the session of the user executing the query.
-     * @param itemMgr   the item manager of the user executing the query. Needed
-     *                  to return <code>Node</code> instances in the result set.
-     * @param statement the actual query statement.
-     * @param language  the syntax of the query statement.
-     * @return a <code>Query</code> instance to execute.
-     * @throws InvalidQueryException if the query is malformed or the
-     *                               <code>language</code> is unknown.
-     * @throws RepositoryException   if any other error occurs.
-     */
-    public PreparedQuery createPreparedQuery(SessionImpl session,
-                                             ItemManager itemMgr,
-                                             String statement,
-                                             String language)
-            throws InvalidQueryException, RepositoryException {
-        AbstractQueryImpl query = createPreparedQueryInstance();
-        query.init(session, itemMgr, handler, statement, language);
-        return (PreparedQuery) query;
-    }
-
-    /**
-    /**
-     * Creates a new instance of an {@link AbstractQueryImpl}, which also
-     * implements {@link PreparedQuery} and is not initialized.
-     *
-     * @return an new query instance.
-     * @throws RepositoryException if an error occurs while creating a new query
-     *                             instance.
-     */
-    protected AbstractQueryImpl createPreparedQueryInstance()
-            throws RepositoryException {
-        try {
-            Object obj = Class.forName(preparedQueryImplClassName).newInstance();
-            if (!(obj instanceof AbstractQueryImpl)) {
-                throw new IllegalArgumentException(preparedQueryImplClassName
-                        + " is not of type " + AbstractQueryImpl.class.getName());
-            } else if (!(obj instanceof PreparedQuery)) {
-                throw new IllegalArgumentException(preparedQueryImplClassName
-                        + " is not of type " + PreparedQuery.class.getName());
-            } else {
-                return (AbstractQueryImpl) obj;
-            }
-        } catch (Throwable t) {
-            throw new RepositoryException("Unable to create prepared query: "
-                    + t.toString(), t);
-        }
-    }
-

DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL59 DEL23 DEL66 DEL66 DEL40 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL42 DEL43 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL42 DEL43 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL25 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31