JCR-3389 Implement a MultiDataStore

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1414155 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
+import java.util.UUID;
+
+import javax.jcr.RepositoryException;
+import javax.xml.parsers.DocumentBuilderFactory;
+
-import org.w3c.dom.Attr;
-import org.w3c.dom.DOMException;
-import org.w3c.dom.TypeInfo;
-import org.w3c.dom.UserDataHandler;
-import java.io.File;
-import java.io.IOException;
-import java.util.Properties;
-import java.util.UUID;
-import java.util.List;
-import java.util.ArrayList;
-
-import javax.jcr.RepositoryException;
-
-                        BeanConfig bc = 
-                        		parseBeanConfig(parent, DATA_STORE_ELEMENT);
+                        BeanConfig bc = parseBeanConfig(parent, DATA_STORE_ELEMENT);
-                        	DataStore primary = null;
-                        	DataStore archive = null;
-                        	NodeList subParamNodes = child.getChildNodes();
+                            DataStore primary = null;
+                            DataStore archive = null;
+                            NodeList subParamNodes = child.getChildNodes();
-                                		&& (PRIMARY_DATASTORE_ATTRIBUTE.equals(paramNode.getAttributes().getNamedItem("name").getNodeValue())
-                                		|| ARCHIVE_DATASTORE_ATTRIBUTE.equals(paramNode.getAttributes().getNamedItem("name").getNodeValue()))) {
-                                    final ElementImpl datastoreElement = new ElementImpl(DATA_STORE_ELEMENT, Node.ELEMENT_NODE, paramNode.getAttributes(), paramNode.getChildNodes());
-                                	ElementImpl parent = new ElementImpl("parent", Node.ELEMENT_NODE, null, new NodeList() {
-										
-										@Override
-										public Node item(int index) {
-											return datastoreElement;
-										}
-										
-										@Override
-										public int getLength() {
-											return 1;
-										}
-									});
-                                	DataStore subDataStore = getDataStoreFactory(parent, directory).getDataStore();
-                                	if (!MultiDataStoreAware.class.isAssignableFrom(subDataStore.getClass())) {
-                                		throw new ConfigurationException("Only MultiDataStoreAware datastore's can be used within a MultiDataStore.");
-                                	}
-                                	String type = getAttribute((Element) paramNode, NAME_ATTRIBUTE);
-                                	if (PRIMARY_DATASTORE_ATTRIBUTE.equals(type)) {
-                                        primary = subDataStore;
-                                	} else if (ARCHIVE_DATASTORE_ATTRIBUTE.equals(type)) {
-                                        archive = subDataStore;
-                                	}
+                                        && (PRIMARY_DATASTORE_ATTRIBUTE.equals(paramNode.getAttributes().getNamedItem("name").getNodeValue())
+                                                || ARCHIVE_DATASTORE_ATTRIBUTE.equals(paramNode.getAttributes().getNamedItem("name").getNodeValue()))) {
+                                    try {
+                                        Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
+                                        Element newParent = document.createElement("parent");
+                                        document.appendChild(newParent);
+                                        Element datastoreElement = document.createElement(DATA_STORE_ELEMENT);
+                                        newParent.appendChild(datastoreElement);
+                                        NodeList childNodes = paramNode.getChildNodes();
+                                        for (int y = 0; childNodes.getLength() > y; y++) {
+                                            datastoreElement.appendChild(document.importNode(childNodes.item(y), true));
+                                        }
+                                        NamedNodeMap attributes = paramNode.getAttributes();
+                                        for (int z = 0; attributes.getLength() > z; z++) {
+                                            Node item = attributes.item(z);
+                                            datastoreElement.setAttribute(CLASS_ATTRIBUTE, item.getNodeValue());
+                                        }
+                                        DataStore subDataStore = getDataStoreFactory(newParent, directory).getDataStore();
+                                        if (!MultiDataStoreAware.class.isAssignableFrom(subDataStore.getClass())) {
+                                            throw new ConfigurationException("Only MultiDataStoreAware datastore's can be used within a MultiDataStore.");
+                                        }
+                                        String type = getAttribute((Element) paramNode, NAME_ATTRIBUTE);
+                                        if (PRIMARY_DATASTORE_ATTRIBUTE.equals(type)) {
+                                            primary = subDataStore;
+                                        } else if (ARCHIVE_DATASTORE_ATTRIBUTE.equals(type)) {
+                                            archive = subDataStore;
+                                        }
+                                    } catch (Exception e) {
+                                        throw new ConfigurationException("Failed to parse the MultiDataStore element.", e);
+                                    }
-                        		throw new ConfigurationException("A MultiDataStore must have configured a primary and archive datastore");
+                                throw new ConfigurationException("A MultiDataStore must have configured a primary and archive datastore");
-                        	((MultiDataStore) store).setPrimaryDataStore(primary);
-                        	((MultiDataStore) store).setArchiveDataStore(archive);
+                            ((MultiDataStore) store).setPrimaryDataStore(primary);
+                            ((MultiDataStore) store).setArchiveDataStore(archive);
-    
-    private class ElementImpl implements org.w3c.dom.Element {
-
-    	private String nodeName;
-    	private short nodeType;
-    	private NodeList childNodes;
-    	private NamedNodeMap params;
-    	
-    	public ElementImpl(String nodeName, short nodeType, NamedNodeMap params, NodeList nodeList) {
-    		this.nodeName = nodeName;
-    		this.nodeType = nodeType;
-    		this.childNodes = nodeList;
-    		this.params = params;
-    	}
-    	
-		@Override
-		public Node appendChild(Node newChild) throws DOMException {
-			return null;
-		}
-
-		@Override
-		public Node cloneNode(boolean deep) {
-			return null;
-		}
-
-		@Override
-		public short compareDocumentPosition(Node other) throws DOMException {
-			return 0;
-		}
-
-		@Override
-		public NamedNodeMap getAttributes() {
-			return null;
-		}
-
-		@Override
-		public String getBaseURI() {
-			return null;
-		}
-
-		@Override
-		public NodeList getChildNodes() {
-			return childNodes;
-		}
-
-		@Override
-		public Object getFeature(String feature, String version) {
-			return null;
-		}
-
-		@Override
-		public Node getFirstChild() {
-			return null;
-		}
-
-		@Override
-		public Node getLastChild() {
-			return null;
-		}
-
-		@Override
-		public String getLocalName() {
-			return null;
-		}
-
-		@Override
-		public String getNamespaceURI() {
-			return null;
-		}
-
-		@Override
-		public Node getNextSibling() {
-			return null;
-		}
-
-		@Override
-		public String getNodeName() {
-			return nodeName;
-		}
-
-		@Override
-		public short getNodeType() {
-			return nodeType;
-		}
-
-		@Override
-		public String getNodeValue() throws DOMException {
-			return null;
-		}
-
-		@Override
-		public Document getOwnerDocument() {
-			return null;
-		}
-
-		@Override
-		public Node getParentNode() {
-			return null;
-		}
-
-		@Override
-		public String getPrefix() {
-			return null;
-		}
-
-		@Override
-		public Node getPreviousSibling() {
-			return null;
-		}
-
-		@Override
-		public String getTextContent() throws DOMException {
-			return null;
-		}
-
-		@Override
-		public Object getUserData(String key) {
-			return null;
-		}
-
-		@Override
-		public boolean hasAttributes() {
-			return false;
-		}
-
-		@Override
-		public boolean hasChildNodes() {
-			return false;
-		}
-
-		@Override
-		public Node insertBefore(Node newChild, Node refChild)
-				throws DOMException {
-			return null;
-		}
-
-		@Override
-		public boolean isDefaultNamespace(String namespaceURI) {
-			return false;
-		}
-
-		@Override
-		public boolean isEqualNode(Node arg) {
-			return false;
-		}
-
-		@Override
-		public boolean isSameNode(Node other) {
-			return false;
-		}
-
-		@Override
-		public boolean isSupported(String feature, String version) {
-			return false;
-		}
-
-		@Override
-		public String lookupNamespaceURI(String prefix) {
-			return null;
-		}
-
-		@Override
-		public String lookupPrefix(String namespaceURI) {
-			return null;
-		}
-
-		@Override
-		public void normalize() {
-		}
-
-		@Override
-		public Node removeChild(Node oldChild) throws DOMException {
-			return null;
-		}
-
-		@Override
-		public Node replaceChild(Node newChild, Node oldChild)
-				throws DOMException {
-			return null;
-		}
-
-		@Override
-		public void setNodeValue(String nodeValue) throws DOMException {
-		}
-
-		@Override
-		public void setPrefix(String prefix) throws DOMException {
-		}
-
-		@Override
-		public void setTextContent(String textContent) throws DOMException {
-		}
-
-		@Override
-		public Object setUserData(String key, Object data,
-				UserDataHandler handler) {
-			return null;
-		}
-
-		@Override
-		public String getAttribute(String name) {
-			return null;
-		}
-
-		@Override
-		public String getAttributeNS(String namespaceURI, String localName)
-				throws DOMException {
-			return null;
-		}
-
-		@Override
-		public Attr getAttributeNode(String name) {
-			return (Attr) params.getNamedItem(VALUE_ATTRIBUTE);
-		}
-
-		@Override
-		public Attr getAttributeNodeNS(String namespaceURI, String localName)
-				throws DOMException {
-			return null;
-		}
-
-		@Override
-		public NodeList getElementsByTagName(String name) {
-			return null;
-		}
-
-		@Override
-		public NodeList getElementsByTagNameNS(String namespaceURI,
-				String localName) throws DOMException {
-			return null;
-		}
-
-		@Override
-		public TypeInfo getSchemaTypeInfo() {
-			return null;
-		}
-
-		@Override
-		public String getTagName() {
-			return null;
-		}
-
-		@Override
-		public boolean hasAttribute(String name) {
-			return false;
-		}
-
-		@Override
-		public boolean hasAttributeNS(String namespaceURI, String localName)
-				throws DOMException {
-			return false;
-		}
-
-		@Override
-		public void removeAttribute(String name) throws DOMException {
-		}
-
-		@Override
-		public void removeAttributeNS(String namespaceURI, String localName)
-				throws DOMException {
-		}
-
-		@Override
-		public Attr removeAttributeNode(Attr oldAttr) throws DOMException {
-			return null;
-		}
-
-		@Override
-		public void setAttribute(String name, String value) throws DOMException {
-		}
-
-		@Override
-		public void setAttributeNS(String namespaceURI, String qualifiedName,
-				String value) throws DOMException {
-		}
-
-		@Override
-		public Attr setAttributeNode(Attr newAttr) throws DOMException {
-			return null;
-		}
-
-		@Override
-		public Attr setAttributeNodeNS(Attr newAttr) throws DOMException {
-			return null;
-		}
-
-		@Override
-		public void setIdAttribute(String name, boolean isId)
-				throws DOMException {
-		}
-
-		@Override
-		public void setIdAttributeNS(String namespaceURI, String localName,
-				boolean isId) throws DOMException {
-		}
-
-		@Override
-		public void setIdAttributeNode(Attr idAttr, boolean isId)
-				throws DOMException {
-		}
-    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 INS8 INS54 INS8 INS12 MOV60 INS60 INS21 INS60 INS21 INS60 INS24 INS60 INS24 MOV60 MOV25 MOV60 MOV25 INS44 INS8 MOV43 UPD43 MOV43 INS59 INS32 INS43 INS59 INS32 MOV43 INS59 INS58 INS27 INS37 INS8 MOV43 INS59 INS58 INS27 INS37 INS8 INS43 INS42 INS53 UPD42 MOV42 UPD42 INS32 UPD42 UPD42 MOV42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 INS39 INS59 INS32 INS42 INS42 INS21 INS42 MOV32 INS39 INS59 INS32 INS42 INS42 INS60 INS21 INS42 INS14 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS42 MOV43 INS59 INS32 INS43 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL40 DEL14 DEL42 DEL43 DEL45 DEL40 DEL33 DEL42 DEL78 DEL83 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL34 DEL41 DEL8 DEL31 DEL1 DEL14 DEL14 DEL59 DEL60 DEL8 DEL83 DEL42 DEL40 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL34 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL55