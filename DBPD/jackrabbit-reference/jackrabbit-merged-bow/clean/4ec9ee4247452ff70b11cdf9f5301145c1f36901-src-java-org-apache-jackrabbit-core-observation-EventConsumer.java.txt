- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.Path;
-import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.Path;
+import org.apache.jackrabbit.core.SessionImpl;
-import javax.jcr.Session;
+import javax.jcr.Session;
-import java.util.Map;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Set;
-import java.util.HashSet;
+import java.util.*;
- *
- * @author Marcel Reutegger
- * @version $Revision: 1.7 $, $Date: 2004/08/25 16:44:50 $
-	if (session == null) {
-	    throw new NullPointerException("session");
-	}
-	if (listener == null) {
-	    throw new NullPointerException("listener");
-	}
-	if (filter == null) {
-	    throw new NullPointerException("filter");
-	}
+        if (session == null) {
+            throw new NullPointerException("session");
+        }
+        if (listener == null) {
+            throw new NullPointerException("listener");
+        }
+        if (filter == null) {
+            throw new NullPointerException("filter");
+        }
-	this.session = session;
-	this.listener = listener;
-	this.filter = filter;
+        this.session = session;
+        this.listener = listener;
+        this.filter = filter;
-	return session;
+        return session;
-	return listener;
+        return listener;
-     *   rights on the {@link EventStateCollection}.
+     *                             rights on the {@link EventStateCollection}.
-	Iterator it = events.iterator();
-	Set denied = null;
-	while (it.hasNext()) {
-	    EventState state = (EventState) it.next();
-	    if (state.getType() == EventType.CHILD_NODE_REMOVED
-		    || state.getType() == EventType.PROPERTY_REMOVED) {
+        Iterator it = events.iterator();
+        Set denied = null;
+        while (it.hasNext()) {
+            EventState state = (EventState) it.next();
+            if (state.getType() == EventType.CHILD_NODE_REMOVED
+                    || state.getType() == EventType.PROPERTY_REMOVED) {
-		if (session.equals(state.getSession())) {
-		    // if we created the event, we can be sure that
-		    // we have enough access rights to see the event
-		    continue;
-		}
+                if (session.equals(state.getSession())) {
+                    // if we created the event, we can be sure that
+                    // we have enough access rights to see the event
+                    continue;
+                }
-		try {
-		    // FIXME is there a better way to check access right
-		    // without transforming path
-		    Path p = Path.create(state.getParentPath(), state.getChildItemQName(), false);
-		    if (!session.getWorkspace().getAccessManager().isGranted(
-			    p.toJCRPath(session.getNamespaceResolver()),
-			    Permission.READ_ITEM)) {
-			if (denied == null) {
-			    denied = new HashSet();
-			}
-			denied.add(state);
-		    }
-		} catch (MalformedPathException e) {
-		    // should actually never happen
-		    log.error("internal error: malformed path exception", e);
-		} catch (NoPrefixDeclaredException e) {
-		    // should actually never happen
-		    log.error("internal error: no prefix declared", e);
-		}
-	    }
-	}
-	if (denied != null) {
-	    accessDenied.put(events, denied);
-	}
+                try {
+                    // FIXME is there a better way to check access right
+                    // without transforming path
+                    Path p = Path.create(state.getParentPath(), state.getChildItemQName(), false);
+                    if (!session.getWorkspace().getAccessManager().isGranted(p.toJCRPath(session.getNamespaceResolver()),
+                            Permission.READ_ITEM)) {
+                        if (denied == null) {
+                            denied = new HashSet();
+                        }
+                        denied.add(state);
+                    }
+                } catch (MalformedPathException e) {
+                    // should actually never happen
+                    log.error("internal error: malformed path exception", e);
+                } catch (NoPrefixDeclaredException e) {
+                    // should actually never happen
+                    log.error("internal error: no prefix declared", e);
+                }
+            }
+        }
+        if (denied != null) {
+            accessDenied.put(events, denied);
+        }
-	Set denied = (Set) accessDenied.remove(events);
-	// check permissions
-	for (Iterator it = events.iterator(); it.hasNext();) {
-	    EventState state = (EventState) it.next();
-	    if (state.getType() == EventType.CHILD_NODE_ADDED
-		    || state.getType() == EventType.PROPERTY_ADDED
-		    || state.getType() == EventType.PROPERTY_CHANGED) {
-		try {
-		    // FIXME is there a better way to check access right
-		    // without transforming path
-		    Path p = Path.create(state.getParentPath(), state.getChildItemQName(), false);
-		    if (!session.getWorkspace().getAccessManager().isGranted(
-			    p.toJCRPath(session.getNamespaceResolver()),
-			    Permission.READ_ITEM)) {
-			if (denied == null) {
-			    denied = new HashSet();
-			}
-			denied.add(state);
-		    }
-		} catch (MalformedPathException e) {
-		    // should actually never happen
-		    log.error("internal error: malformed path exception", e);
-		} catch (NoPrefixDeclaredException e) {
-		    // should actually never happen
-		    log.error("internal error: no prefix declared", e);
-		}
-	    }
-	}
-	// check if filtered iterator has at least one event
-	EventIterator it = new FilteredEventIterator(events, filter, denied);
-	if (it.hasNext()) {
-	    listener.onEvent(it);
-	} else {
-	    // otherwise skip this listener
-	}
+        Set denied = (Set) accessDenied.remove(events);
+        // check permissions
+        for (Iterator it = events.iterator(); it.hasNext();) {
+            EventState state = (EventState) it.next();
+            if (state.getType() == EventType.CHILD_NODE_ADDED
+                    || state.getType() == EventType.PROPERTY_ADDED
+                    || state.getType() == EventType.PROPERTY_CHANGED) {
+                try {
+                    // FIXME is there a better way to check access right
+                    // without transforming path
+                    Path p = Path.create(state.getParentPath(), state.getChildItemQName(), false);
+                    if (!session.getWorkspace().getAccessManager().isGranted(p.toJCRPath(session.getNamespaceResolver()),
+                            Permission.READ_ITEM)) {
+                        if (denied == null) {
+                            denied = new HashSet();
+                        }
+                        denied.add(state);
+                    }
+                } catch (MalformedPathException e) {
+                    // should actually never happen
+                    log.error("internal error: malformed path exception", e);
+                } catch (NoPrefixDeclaredException e) {
+                    // should actually never happen
+                    log.error("internal error: no prefix declared", e);
+                }
+            }
+        }
+        // check if filtered iterator has at least one event
+        EventIterator it = new FilteredEventIterator(events, filter, denied);
+        if (it.hasNext()) {
+            listener.onEvent(it);
+        } else {
+            // otherwise skip this listener
+        }
-	if (this == obj) {
-	    return true;
-	}
-	if (obj instanceof EventConsumer) {
-	    EventConsumer other = (EventConsumer) obj;
-	    return session.equals(other.session)
-		    && listener.equals(other.listener);
-	}
-	return false;
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof EventConsumer) {
+            EventConsumer other = (EventConsumer) obj;
+            return session.equals(other.session)
+                    && listener.equals(other.listener);
+        }
+        return false;
-	if (hashCode == 0) {
-	    hashCode = session.hashCode() ^ listener.hashCode();
-	}
-	return hashCode;
+        if (hashCode == 0) {
+            hashCode = session.hashCode() ^ listener.hashCode();
+        }
+        return hashCode;

MOV26 MOV26 MOV26 UPD40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL66 DEL65