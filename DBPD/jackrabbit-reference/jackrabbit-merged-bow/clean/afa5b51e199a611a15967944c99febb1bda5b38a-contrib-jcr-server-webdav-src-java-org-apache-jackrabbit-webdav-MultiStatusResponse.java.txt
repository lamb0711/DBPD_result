[JCR-000] Adjusting to spec 0.16.4 changes
[JCR-107] Typos in jcr-server io package javadocs
[JCR-104] Contrib/Jcr-Server: Improve package structure


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161660 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.log4j.Logger;
+// todo: the propstat element may also contain a responsedescription (currently ignored)
+    private static Logger log = Logger.getLogger(MultiStatusResponse.class);
+
+     * Returns the href
+     *
+     * @return href
+     */
+    public String getHref() {
+        return href;
+    }
+
+    /**
-     * @param prop the property to add
+     * @param propertyElem the property to add
-    private void add(Element prop, int status) {
+    private void add(Element propertyElem, int status) {
-        propsContainer.addContent(prop);
+        propsContainer.addContent(propertyElem.detach());
-     * @param prop the property to add
+     * @param property the property to add
-    public void add(DavProperty prop) {
-        status200.addContent(prop.toXml());
+    public void add(DavProperty property) {
+        status200.addContent(property.toXml());
-     * @param name the property name to add
+     * @param propertyName the property name to add
-    public void add(DavPropertyName name) {
-        status200.addContent(name.toXml());
+    public void add(DavPropertyName propertyName) {
+        status200.addContent(propertyName.toXml());
-     * @param prop the property to add
+     * @param property the property to add
-    public void add(DavProperty prop, int status) {
-        add(prop.toXml(), status);
+    public void add(DavProperty property, int status) {
+        add(property.toXml(), status);
-     * @param name the property name to add
+     * @param propertyName the property name to add
-    public void add(DavPropertyName name, int status) {
-        add(name.toXml(), status);
+    public void add(DavPropertyName propertyName, int status) {
+        add(propertyName.toXml(), status);
+    }
+
+    /**
+     * Get properties present in this response for the given status code.
+     * @param status
+     * @return property set
+     */
+    public DavPropertySet getProperties(int status) {
+        DavPropertySet set = new DavPropertySet();
+        Integer key = new Integer(status);
+        if (statusMap.containsKey(key)) {
+            Element propElem = (Element) statusMap.get(key);
+            if (propElem != null) {
+                Iterator it = propElem.getChildren().iterator();
+                while (it.hasNext()) {
+                    Element propEntry = (Element) it.next();
+                    DavProperty prop = DefaultDavProperty.createFromXml(propEntry);
+                    set.add(prop);
+                }
+            }
+        }
+        return set;
+    }
+
+    /**
+     * Get property names present in this response for the given status code.
+     *
+     * @param status
+     * @return property names
+     */
+    public DavPropertyNameSet getPropertyNames(int status) {
+        DavPropertyNameSet set = new DavPropertyNameSet();
+        Integer key = new Integer(status);
+        if (statusMap.containsKey(key)) {
+            Element propElem = (Element) statusMap.get(key);
+            if (propElem != null) {
+                Iterator it = propElem.getChildren().iterator();
+                while (it.hasNext()) {
+                    Element propEntry = (Element) it.next();
+                    set.add(DavPropertyName.createFromXml(propEntry));
+                }
+            }
+        }
+        return set;
+    }
+
+    /**
+     * @return responseDescription
+     */
+    public String getResponseDescription() {
+	return responseDescription;
-
-
-
-                Element status = new Element(XML_STATUS, NAMESPACE);
-                status.setText("HTTP/1.1 " + statusKey + " " + DavException.getStatusPhrase(statusKey.intValue()));
-
+                Status status = new Status(statusKey.intValue());
-                        propstat.addContent(status);
+                        propstat.addContent(status.toXml());
-                    response.addContent(status);
+                    response.addContent(status.toXml());
+
+    /**
+     * Build a new response object from the given xml element.
+     *
+     * @param responseElement
+     * @return new <code>MultiStatusResponse</code> instance
+     * @throws  IllegalArgumentException if the specified element is <code>null</code>
+     */
+    public static MultiStatusResponse createFromXml(Element responseElement) {
+        if (responseElement == null) {
+	    throw new IllegalArgumentException("The response element must not be null.");
+	}
+        String href = responseElement.getChildText(XML_HREF, NAMESPACE);
+        String statusLine = responseElement.getChildText(XML_STATUS, NAMESPACE);
+        MultiStatusResponse response = (statusLine != null) ? new MultiStatusResponse(href, Status.createFromStatusLine(statusLine).getStatusCode()) : new MultiStatusResponse(href);
+
+        // read propstat elements
+        Iterator it = responseElement.getChildren(XML_PROPSTAT, NAMESPACE).iterator();
+	while (it.hasNext()) {
+	    Element propstat = (Element)it.next();
+            Element prop = propstat.getChild(XML_PROP, NAMESPACE);
+            String propstatus = propstat.getChildText(XML_STATUS, NAMESPACE);
+            if (propstatus != null) {
+                Status st = Status.createFromStatusLine(propstatus);
+                Element[] propertyElems = (Element[]) prop.getChildren().toArray(new Element[0]);
+                for (int i = 0; i < propertyElems.length; i++) {
+                    response.add(propertyElems[i], st.getStatusCode());
+                }
+            }
+            // todo: propstat may also contain a responsedescription
+	}
+
+        response.setResponseDescription(responseElement.getChildText(XML_RESPONSEDESCRIPTION, NAMESPACE));
+        return response;
+    }
+
+    /**
+     * Inner class encapsulating the 'status' present in the multistatus response.
+     */
+    private static class Status {
+
+        private String version = "HTTP/1.1";
+        private int code;
+        private String phrase = "";
+
+        private Status(int code) {
+            this.code = code;
+            phrase = DavException.getStatusPhrase(code);
+        }
+
+        private Status(String version, int code, String phrase) {
+            this.version = version;
+            this.code = code;
+            this.phrase = phrase;
+        }
+
+        private int getStatusCode() {
+            return code;
+        }
+
+        private Element toXml() {
+            String statusLine = version + " " + code + " " + phrase;
+            return new Element(XML_STATUS, NAMESPACE).setText(statusLine);
+        }
+
+        private static Status createFromStatusLine(String statusLine) {
+            if (statusLine == null) {
+                throw new IllegalArgumentException("Unable to parse status line from null xml element.");
+            }
+            Status status;
+
+            // code copied from org.apache.commons.httpclient.StatusLine
+            int length = statusLine.length();
+            int at = 0;
+            int start = 0;
+            try {
+                while (Character.isWhitespace(statusLine.charAt(at))) {
+                    ++at;
+                    ++start;
+                }
+                if (!"HTTP".equals(statusLine.substring(at, at += 4))) {
+                    log.warn("Status-Line '" + statusLine + "' does not start with HTTP");
+                }
+                //handle the HTTP-Version
+                at = statusLine.indexOf(" ", at);
+                if (at <= 0) {
+                    log.warn("Unable to parse HTTP-Version from the status line: '"+ statusLine + "'");
+                }
+                String version = (statusLine.substring(start, at)).toUpperCase();
+                //advance through spaces
+                while (statusLine.charAt(at) == ' ') {
+                    at++;
+                }
+                //handle the Status-Code
+                int to = statusLine.indexOf(" ", at);
+                if (to < 0) {
+                    to = length;
+                }
+                try {
+                    int code = Integer.parseInt(statusLine.substring(at, to));
+                    status = new Status(code);
+                } catch (NumberFormatException e) {
+                    throw new IllegalArgumentException("Unable to parse status code from status line: '"+ statusLine + "'");
+                }
+                //handle the Reason-Phrase
+                String phrase = "";
+                at = to + 1;
+                if (at < length) {
+                    phrase = statusLine.substring(at).trim();
+                }
+
+                status.version = version;
+                status.phrase = phrase;
+
+            } catch (StringIndexOutOfBoundsException e) {
+                throw new IllegalArgumentException("Status-Line '" + statusLine + "' is not valid");
+            }
+            return status;
+        }
+    }

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS55 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS8 MOV44 MOV44 MOV44 MOV44 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS32 INS65 INS65 INS42 INS41 UPD42 UPD42 UPD42 UPD42 UPD42 INS65 INS65 INS65 INS42 INS39 INS42 INS60 INS60 INS25 INS41 INS65 INS65 INS65 INS42 INS39 INS42 INS60 INS60 INS25 INS41 INS65 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS60 INS60 INS60 INS60 INS61 INS21 INS41 INS65 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 MOV43 INS42 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS57 INS66 INS66 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS66 INS42 INS66 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS66 INS42 INS66 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS42 INS66 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS39 INS42 INS21 INS21 INS43 INS42 INS39 INS42 INS43 INS42 INS21 INS21 INS21 INS41 INS60 INS41 INS42 INS43 INS42 INS25 INS60 INS60 INS60 INS60 INS54 INS41 INS43 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS60 INS25 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS25 INS42 INS42 INS32 INS7 INS7 INS42 INS42 INS7 INS7 INS7 INS42 INS43 INS59 INS32 INS42 INS27 INS8 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS8 INS12 INS42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 INS43 INS43 INS42 INS43 INS59 INS27 INS8 INS43 INS43 INS42 INS43 INS59 INS27 INS8 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS14 INS14 INS32 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS27 MOV14 INS42 INS42 INS42 INS33 INS53 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS34 INS61 INS25 INS21 INS25 INS60 INS61 INS60 INS25 INS54 INS60 INS21 INS25 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS60 INS61 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS60 INS61 INS60 INS43 INS45 INS27 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS24 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS45 INS42 INS45 INS42 INS14 INS42 INS42 INS32 INS8 INS38 INS8 INS7 INS27 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS8 INS12 INS43 INS59 INS7 INS27 INS8 INS7 INS7 INS43 INS42 INS53 INS43 INS32 INS43 INS59 INS32 INS8 INS43 INS32 INS43 INS59 INS32 INS8 INS43 INS59 INS42 INS42 INS33 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS45 INS42 INS42 INS32 INS21 INS21 INS32 INS21 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS32 INS32 INS13 INS21 INS42 INS32 INS42 INS34 INS21 INS60 INS21 INS44 INS8 INS42 INS42 INS45 INS42 INS27 INS42 INS42 INS21 INS40 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS11 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS42 INS38 INS38 INS45 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS32 INS36 INS42 INS42 INS42 INS42 INS37 INS42 INS42 INS45 INS42 INS7 INS39 INS59 INS7 INS43 INS42 INS53 INS42 INS34 INS7 INS43 INS27 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS43 INS59 INS32 INS43 MOV32 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS43 INS85 INS32 INS42 INS3 INS42 INS42 INS2 INS32 INS42 INS34 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS43 INS27 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS5 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 MOV42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21