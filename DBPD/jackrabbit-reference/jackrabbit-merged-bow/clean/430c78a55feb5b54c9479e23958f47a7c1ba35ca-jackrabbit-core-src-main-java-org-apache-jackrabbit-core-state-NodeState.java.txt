JCR-890: concurrent read-only access to a session

Inline NodeTypeInstanceHandler into NodeState to avoid the extra instance variable in SessionImpl

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@985273 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.value.InternalValue;
+import org.apache.jackrabbit.spi.QPropertyDefinition;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import java.util.Calendar;
+import javax.jcr.RepositoryException;
+
+     * Computes the values of well-known system (i.e. protected) properties.
+     *
+     * @param def the definition of the property to compute
+     * @return the computed values
+     */
+    public InternalValue[] computeGeneratedValues(
+            QPropertyDefinition def, String userId) {
+        if (userId == null) {
+            userId = "system";
+        }
+
+        Name name = def.getName();
+        Name declaringNT = def.getDeclaringNodeType();
+
+        if (NameConstants.JCR_UUID.equals(name)) {
+            // jcr:uuid property of the mix:referenceable node type
+            if (NameConstants.MIX_REFERENCEABLE.equals(declaringNT)) {
+                return new InternalValue[]{InternalValue.create(getNodeId().toString())};
+            }
+        } else if (NameConstants.JCR_PRIMARYTYPE.equals(name)) {
+            // jcr:primaryType property (of any node type)
+            return new InternalValue[]{InternalValue.create(getNodeTypeName())};
+        } else if (NameConstants.JCR_MIXINTYPES.equals(name)) {
+            // jcr:mixinTypes property (of any node type)
+            Set<Name> mixins = getMixinTypeNames();
+            InternalValue[] values = new InternalValue[mixins.size()];
+            int i = 0;
+            for (Name n : mixins) {
+                values[i++] = InternalValue.create(n);
+            }
+            return values;
+        } else if (NameConstants.JCR_CREATED.equals(name)) {
+            // jcr:created property of a version or a mix:created
+            if (NameConstants.MIX_CREATED.equals(declaringNT)
+                    || NameConstants.NT_VERSION.equals(declaringNT)) {
+                return new InternalValue[]{InternalValue.create(Calendar.getInstance())};
+            }
+        } else if (NameConstants.JCR_CREATEDBY.equals(name)) {
+            // jcr:createdBy property of a mix:created
+            if (NameConstants.MIX_CREATED.equals(declaringNT)) {
+                return new InternalValue[]{InternalValue.create(userId)};
+            }
+        } else if (NameConstants.JCR_LASTMODIFIED.equals(name)) {
+            // jcr:lastModified property of a mix:lastModified
+            if (NameConstants.MIX_LASTMODIFIED.equals(declaringNT)) {
+                return new InternalValue[]{InternalValue.create(Calendar.getInstance())};
+            }
+        } else if (NameConstants.JCR_LASTMODIFIEDBY.equals(name)) {
+            // jcr:lastModifiedBy property of a mix:lastModified
+            if (NameConstants.MIX_LASTMODIFIED.equals(declaringNT)) {
+                return new InternalValue[]{InternalValue.create(userId)};
+            }
+        } else if (NameConstants.JCR_ETAG.equals(name)) {
+            // jcr:etag property of a mix:etag
+            if (NameConstants.MIX_ETAG.equals(declaringNT)) {
+                // TODO: provide real implementation
+                return new InternalValue[]{InternalValue.create("")};
+            }
+        }
+
+        return null;
+    }
+
+    /**

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS5 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS25 INS41 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS33 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS42 INS25 INS32 INS8 INS25 INS7 INS42 INS42 INS42 INS42 INS32 INS8 INS40 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS45 INS40 INS42 INS42 INS41 INS3 INS40 INS42 INS42 INS60 INS60 INS60 INS70 INS41 INS32 INS8 INS25 INS3 INS5 INS4 INS74 INS59 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS40 INS42 INS42 INS25 INS32 INS8 INS25 INS5 INS4 INS43 INS85 INS32 INS43 INS43 INS42 INS32 INS43 INS85 INS42 INS3 INS42 INS34 INS43 INS42 INS21 INS27 INS8 INS40 INS42 INS42 INS25 INS32 INS8 INS25 INS43 INS85 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS7 INS32 INS32 INS41 INS32 INS8 INS40 INS42 INS42 INS25 INS32 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS43 INS85 INS42 INS42 INS2 INS32 INS40 INS42 INS42 INS40 INS42 INS42 INS3 INS40 INS42 INS42 INS41 INS32 INS8 INS40 INS42 INS42 INS25 INS32 INS8 INS32 INS42 INS42 INS42 INS37 INS42 INS42 INS42 INS5 INS4 INS3 INS40 INS42 INS42 INS41 INS32 INS8 INS40 INS42 INS42 INS25 INS42 INS42 INS43 INS85 INS32 INS5 INS4 INS3 INS40 INS42 INS42 INS41 INS32 INS8 INS42 INS42 INS42 INS32 INS43 INS85 INS32 INS5 INS4 INS3 INS40 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS5 INS4 INS3 INS42 INS42 INS42 INS32 INS43 INS85 INS32 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS42 INS42 INS42 INS45