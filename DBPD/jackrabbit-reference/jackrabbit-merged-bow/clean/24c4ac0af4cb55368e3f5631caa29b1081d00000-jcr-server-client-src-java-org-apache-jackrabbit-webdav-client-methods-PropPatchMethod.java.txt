- DavMethod: common interface for webdav extension of HttpClient methods.
- minor improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@397929 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.property.DavPropertyName;
+import org.apache.jackrabbit.webdav.property.DavPropertyNameIterator;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.webdav.DavServletResponse;
+import org.apache.jackrabbit.webdav.MultiStatus;
+import org.apache.jackrabbit.webdav.MultiStatusResponse;
+import org.apache.jackrabbit.webdav.DavException;
+import org.apache.jackrabbit.webdav.Status;
-import org.apache.xml.serialize.OutputFormat;
-import org.apache.xml.serialize.XMLSerializer;
+import org.apache.commons.httpclient.HttpState;
+import org.apache.commons.httpclient.HttpConnection;
-import java.io.ByteArrayOutputStream;
+import java.util.List;
+import java.util.Iterator;
+    private final DavPropertyNameSet propertyNames = new DavPropertyNameSet();
+
+    private DavException responseException;
+
+    /**
+     *
+     * @param uri
+     * @param changeList list of DavProperty (for 'set') and DavPropertyName
+     * (for 'remove') entries.
+     * @throws IOException
+     */
+    public PropPatchMethod(String uri, List changeList) throws IOException {
+        super(uri);
+        if (changeList == null || changeList.isEmpty()) {
+            throw new IllegalArgumentException("PROPPATCH cannot be executed without properties to be set or removed.");
+        }
+        try {
+            Document document = BUILDER_FACTORY.newDocumentBuilder().newDocument();
+            Element propUpdateElement = DomUtil.addChildElement(document, XML_PROPERTYUPDATE, NAMESPACE);
+
+            Element propElement = null;
+            boolean isSet = false;
+            Iterator it = changeList.iterator();
+            while (it.hasNext()) {
+                Object entry = it.next();
+                if (entry instanceof DavPropertyName) {
+                    // DAV:remove
+                    DavPropertyName removeName = (DavPropertyName)entry;
+                    if (propElement == null || isSet) {
+                        isSet = false;
+                        propElement = getPropElement(propUpdateElement, isSet);
+                    }
+                    propElement.appendChild(removeName.toXml(document));
+                    propertyNames.add(removeName);
+                } else if (entry instanceof DavProperty) {
+                    // DAV:set
+                    DavProperty setProperty = (DavProperty)entry;
+                    if (propElement == null || !isSet) {
+                        isSet = true;
+                        propElement = getPropElement(propUpdateElement, isSet);
+                    }
+                    propElement.appendChild(setProperty.toXml(document));
+                    propertyNames.add(setProperty.getName());
+                } else {
+                    throw new IllegalArgumentException("ChangeList may only contain DavPropertyName and DavProperty elements.");
+                }
+            }
+            setRequestBody(document);
+        } catch (ParserConfigurationException e) {
+            throw new IOException(e.getMessage());
+        }
+    }
+
+        if (setProperties.isEmpty() && removeProperties.isEmpty()) {
+            throw new IllegalArgumentException("Either setProperties or removeProperties can be empty; not both of them.");
+        }
+
+        propertyNames.addAll(removeProperties);
+        DavPropertyName[] setNames = setProperties.getPropertyNames();
+        for (int i = 0; i < setNames.length; i++) {
+            propertyNames.add(setNames[i]);
+        }
-            Element propupdate = DomUtil.createElement(document, XML_PROPERTYUPDATE, NAMESPACE);
+            Element propupdate = DomUtil.addChildElement(document, XML_PROPERTYUPDATE, NAMESPACE);
-            Element set = DomUtil.createElement(document, XML_SET, NAMESPACE);
-            set.appendChild(setProperties.toXml(document));
+            if (!setProperties.isEmpty()) {
+                Element set = DomUtil.addChildElement(propupdate, XML_SET, NAMESPACE);
+                set.appendChild(setProperties.toXml(document));
+            }
-            Element remove = DomUtil.createElement(document, XML_REMOVE, NAMESPACE);
-            remove.appendChild(removeProperties.toXml(document));
-
-            propupdate.appendChild(set);
-            propupdate.appendChild(remove);
-            document.appendChild(propupdate);
-
-            ByteArrayOutputStream out = new ByteArrayOutputStream();
-            OutputFormat format = new OutputFormat("xml", "UTF-8", true);
-            XMLSerializer serializer = new XMLSerializer(out, format);
-            serializer.setNamespaces(true);
-            serializer.asDOMSerializer().serialize(document);
-            setRequestBody(out.toString());
+            if (!removeProperties.isEmpty()) {
+                Element remove = DomUtil.addChildElement(propupdate, XML_REMOVE, NAMESPACE);
+                remove.appendChild(removeProperties.toXml(document));
+            }
+            setRequestBody(document);
+    private Element getPropElement(Element propUpdate, boolean isSet) {
+        Element updateEntry = DomUtil.addChildElement(propUpdate, (isSet) ? XML_SET : XML_REMOVE , NAMESPACE);
+        return DomUtil.addChildElement(updateEntry, XML_PROP, NAMESPACE);
+    }
+
+    //---------------------------------------------------------< HttpMethod >---
+
+    //------------------------------------------------------< DavMethodBase >---
+    /**
+     *
+     * @param statusCode
+     * @return true if status code is {@link DavServletResponse#SC_MULTI_STATUS 207 (Multi-Status)}.
+     * For compliance reason {@link DavServletResponse#SC_OK 200 (OK)} is
+     * interpreted as successful response as well.
+     */
+    protected boolean isSuccess(int statusCode) {
+        return statusCode == DavServletResponse.SC_MULTI_STATUS || statusCode == DavServletResponse.SC_OK;
+    }
+
+    /**
+     * 
+     * @param multiStatus
+     * @param httpState
+     * @param httpConnection
+     */
+    protected void processMultiStatusBody(MultiStatus multiStatus, HttpState httpState, HttpConnection httpConnection) {
+        // check of OK response contains all set/remove properties
+        MultiStatusResponse[] resp = multiStatus.getResponses();
+        if (resp.length != 1) {
+            log.warn("Expected a single multi-status response in PROPPATCH.");
+        }
+        boolean success = true;
+        // only check the first ms-response
+        for (int i = 0; i < 1; i++) {
+            DavPropertyNameSet okSet = resp[i].getPropertyNames(DavServletResponse.SC_OK);
+            if (okSet.isEmpty()) {
+                log.debug("PROPPATCH failed: No 'OK' response found for resource " + resp[i].getHref());
+                success = false;
+            } else {
+                DavPropertyNameIterator it = propertyNames.iterator();
+                while (it.hasNext()) {
+                    DavPropertyName pn = it.nextPropertyName();
+                    success = okSet.remove(pn);
+                }
+            }
+            if (!okSet.isEmpty()) {
+                StringBuffer b = new StringBuffer("The following properties outside of the original request where set or removed: ");
+                DavPropertyNameIterator it = okSet.iterator();
+                while (it.hasNext()) {
+                    b.append(it.nextPropertyName().toString()).append("; ");
+                }
+                log.warn(b.toString());
+            }
+        }
+        // if  build the error message
+        if (!success) {
+            Status[] st = resp[0].getStatus();
+            // TODO: respect multiple error reasons (not only the first one)
+            for (int i = 0; i < st.length && responseException == null; i ++) {
+                switch (st[i].getStatusCode()) {
+                    case DavServletResponse.SC_FAILED_DEPENDENCY:
+                        // ignore
+                        break;
+                    default:
+                        responseException = new DavException(st[i].getStatusCode());
+                }
+            }
+        }
+    }
+
+    /**
+     *
+     * @return
+     * @throws IOException
+     * @see DavMethod#getResponseException() 
+     */
+    public DavException getResponseException() throws IOException {
+        checkUsed();
+        if (getSuccess()) {
+            String msg = "Cannot retrieve exception from successful response.";
+            log.warn(msg);
+            throw new IllegalStateException(msg);
+        }
+        if (responseException != null) {
+            return responseException;
+        } else {
+            return super.getResponseException();
+        }
+    }

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 UPD40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS29 MOV83 MOV42 INS44 INS44 INS43 INS8 INS83 INS42 MOV44 MOV44 MOV44 MOV43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS14 INS42 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS46 INS25 INS54 MOV46 MOV25 INS25 INS21 INS60 INS24 INS54 INS42 INS43 INS42 INS39 INS42 INS60 INS41 INS65 INS65 INS39 INS42 INS41 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS24 INS25 INS65 INS65 INS65 INS42 INS42 INS21 INS25 INS25 INS43 INS42 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS12 INS27 INS8 INS32 INS5 INS59 INS58 INS27 INS37 INS8 INS8 MOV12 INS42 INS43 INS59 INS32 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS59 INS27 INS8 INS39 INS59 INS58 INS27 INS37 INS8 INS38 INS8 INS42 INS68 INS66 INS32 INS32 INS8 INS27 INS8 INS8 INS42 INS27 INS32 INS53 INS60 INS60 INS60 INS60 INS60 INS61 INS21 INS44 INS8 INS32 INS32 INS53 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 MOV60 MOV60 INS25 INS25 INS21 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS67 INS66 INS67 INS66 INS27 INS27 INS43 INS85 INS42 INS32 INS40 INS34 INS21 INS42 INS9 INS39 INS59 INS42 INS34 INS42 INS60 INS25 INS25 INS42 INS60 INS24 INS42 INS42 INS42 INS42 INS60 INS21 INS53 INS42 INS33 INS41 INS41 INS42 INS33 INS42 INS42 INS14 INS43 INS59 MOV43 INS59 MOV43 INS59 INS39 INS59 INS43 INS59 INS32 INS8 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS34 INS32 INS38 INS8 INS38 INS8 INS32 INS42 INS42 UPD42 MOV42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS34 INS43 INS59 INS32 INS8 INS8 INS38 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS32 INS14 INS42 INS48 INS43 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS14 INS43 INS45 INS42 INS42 INS2 INS32 MOV60 MOV21 INS32 MOV60 MOV21 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 MOV21 INS21 MOV60 INS61 INS32 MOV60 MOV60 INS61 MOV21 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS27 INS42 INS50 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS62 INS8 INS25 INS43 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS2 INS42 INS40 INS7 UPD43 INS32 INS8 INS42 INS42 UPD43 UPD43 INS32 INS8 INS42 INS2 INS42 INS42 INS34 INS42 INS40 INS42 INS33 INS32 INS49 INS10 INS49 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS60 INS25 INS21 INS21 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS27 INS42 INS9 UPD42 UPD42 INS32 INS42 INS42 INS60 INS21 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV21 UPD42 INS42 INS42 INS34 INS2 INS42 INS40 INS7 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS43 INS60 INS25 INS21 INS21 INS53 UPD42 UPD42 UPD42 UPD42 INS45 INS32 INS42 INS42 INS43 INS59 INS7 UPD43 UPD45 INS42 INS42 UPD42 INS42 INS42 INS42 INS14 INS42 INS42 INS11 INS27 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS14 INS2 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 INS32 UPD42 INS45 INS43 INS32 INS43 INS42 INS42 INS33 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS11 INS27 INS38 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS42 INS9 INS42 INS32 INS43 INS42 INS42 INS33 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL9 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL14 DEL45 DEL9 DEL42 DEL43 DEL42 DEL42 DEL14