JCR-4166: support GZIP content coding in requests

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1878706 13f79535-47bb-0310-9956-ffa450edef68

+     * Create a new DOM element with the specified local name and namespace.
+     *
+     * @param factory
+     * @param qName
+     * @return a new DOM element
+     * @see Document#createElement(String)
+     * @see Document#createElementNS(String, String)
+     */
+    public static Element createElement(Document factory, QName elementName) {
+        return factory.createElementNS(elementName.getNamespaceURI(), getPrefixedName(elementName));
+    }
+
+    /**
-        if (namespace == null
-            || Namespace.EMPTY_NAMESPACE.equals(namespace)
-            || Namespace.EMPTY_NAMESPACE.getPrefix().equals(namespace.getPrefix())) {
+        return getPrefixName(namespace.getURI(), namespace.getPrefix(), localName);
+    }
+
+    /**
+     * Return the qualified name of a DOM node consisting of
+     * namespace prefix + ":" + local name. If the specified namespace is <code>null</code>
+     * or contains an empty prefix, the local name is returned.<br>
+     * NOTE, that this is the value to be used for the 'qualified Name' parameter
+     * expected with the namespace sensitive factory methods.
+     *
+     * @param qName
+     * @return qualified name consisting of prefix, ':' and local name.
+     * @see Document#createAttributeNS(String, String)
+     * @see Document#createElementNS(String, String)
+     */
+    public static String getPrefixedName(QName name) {
+        return getPrefixName(name.getNamespaceURI(), name.getPrefix(), name.getLocalPart());
+    }
+
+    private static String getPrefixName(String namespaceURI, String prefix, String localName) {
+        if (namespaceURI == null || prefix == null || "".equals(namespaceURI) || "".equals(prefix)) {
+        } else {
+            StringBuffer buf = new StringBuffer(prefix);
+            buf.append(":");
+            buf.append(localName);
+            return buf.toString();
-        StringBuffer buf = new StringBuffer(namespace.getPrefix());
-        buf.append(":");
-        buf.append(localName);
-        return buf.toString();

INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS41 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS66 INS42 INS42 INS66 INS68 INS68 INS42 INS42 INS32 INS32 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS68 INS68 INS42 INS32 INS42 INS42 INS42 INS27 MOV8 MOV8 INS42 INS42 INS69 INS42 INS42 INS69 INS69 INS42 INS42 INS32 INS32 INS42 INS32 MOV32 INS42 INS42 INS42 INS69 INS69 INS42 INS42 INS69 INS69 INS42 INS32 INS32 INS32 INS27 INS32 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS45 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS45 INS42 INS42 INS42 INS33 INS42 INS33 MOV43 INS42 DEL42 DEL33 DEL27 DEL40 DEL42 DEL42 DEL32 DEL27 DEL40 DEL42 DEL32 DEL42 DEL32 DEL27 DEL25 DEL42 DEL42 DEL32