JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.util.XmlUtil;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.Namespace;
+import org.apache.jackrabbit.webdav.DavConstants;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.xml.Namespace;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.ArrayList;
+import java.util.List;
+ *
+ * Please note, that <code>OptionsResponse</code> represents a simplified implementation
+ * of the given structure. We assume, that there may only entries that consist
+ * of a qualified name and a set of href child elements.
+ *
+ * @see DeltaVConstants#XML_ACTIVITY_COLLECTION_SET
+ * @see DeltaVConstants#XML_VH_COLLECTION_SET
+ * @see DeltaVConstants#XML_WSP_COLLECTION_SET
-public class OptionsResponse implements DeltaVConstants {
+public class OptionsResponse implements DeltaVConstants, XmlSerializable {
-    private final Element optionsResponse = new Element(XML_OPTIONS_RESPONSE, NAMESPACE);
-
-    /**
-     * Add a new entry to this <code>OptionsResponse</code>
-     *
-     * @param elem
-     */
-    public void addEntry(Element elem) {
-        optionsResponse.addContent(elem.detach());
-    }
+    private final Map entries = new HashMap();
-     * @param name
+     * @param localName
-    public void addEntry(String name, Namespace namespace, String[] hrefs) {
-        Element elem = new Element(name, namespace);
-        for (int i = 0; i < hrefs.length; i++) {
-            elem.addContent(XmlUtil.hrefToXml(hrefs[i]));
+    public void addEntry(String localName, Namespace namespace, String[] hrefs) {
+        Entry entry = new Entry(localName, namespace, hrefs);
+        entries.put(DomUtil.getQualifiedName(localName, namespace), entry);
+    }
+
+    /**
+     *
+     * @param localName
+     * @param namespace
+     * @return
+     */
+    public String[] getHrefs(String localName, Namespace namespace) {
+        String key = DomUtil.getQualifiedName(localName, namespace);
+        if (entries.containsKey(key)) {
+            return ((Entry)entries.get(key)).hrefs;
+        } else {
+            return new String[0];
-        optionsResponse.addContent(elem);
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     * @param document
-    public Document toXml() {
-        return new Document(optionsResponse);
+    public Element toXml(Document document) {
+        Element optionsResponse = DomUtil.createElement(document, XML_OPTIONS_RESPONSE, NAMESPACE);
+        Iterator it = entries.values().iterator();
+        while (it.hasNext()) {
+            Entry entry = (Entry)it.next();
+            Element elem = DomUtil.addChildElement(optionsResponse, entry.localName, entry.namespace);
+            for (int i = 0; i < entry.hrefs.length; i++) {
+                elem.appendChild(DomUtil.hrefToXml(entry.hrefs[i], document));
+            }
+        }
+        return optionsResponse;
+    }
+
+    /**
+     * Build a new <code>OptionsResponse</code> object from the given xml element.
+     *
+     * @param orElem
+     * @return a new <code>OptionsResponse</code> object
+     * @throws IllegalArgumentException if the specified element is <code>null</code>
+     * or if its name is other than 'DAV:options-response'.
+     */
+    public static OptionsResponse createFromXml(Element orElem) {
+        if (!DomUtil.matches(orElem, XML_OPTIONS_RESPONSE, NAMESPACE)) {
+            throw new IllegalArgumentException("DAV:options-response element expected");
+        }
+        OptionsResponse oResponse = new OptionsResponse();
+        ElementIterator it = DomUtil.getChildren(orElem);
+        while (it.hasNext()) {
+            Element el = it.nextElement();
+            List hrefs = new ArrayList();
+            ElementIterator hrefIt = DomUtil.getChildren(el, DavConstants.XML_HREF, DavConstants.NAMESPACE);
+            while (hrefIt.hasNext()) {
+                hrefs.add(DomUtil.getTextTrim(hrefIt.nextElement()));
+            }
+            oResponse.addEntry(el.getLocalName(), DomUtil.getNamespace(el), (String[])hrefs.toArray(new String[hrefs.size()]));
+        }
+        return oResponse;
+    }
+
+    private static class Entry {
+
+        private final String localName;
+        private final Namespace namespace;
+        private final String[] hrefs;
+
+        private Entry(String localName, Namespace namespace, String[] hrefs) {
+            this.localName = localName;
+            this.namespace = namespace;
+            this.hrefs = hrefs;
+        }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS55 INS65 INS65 INS65 INS42 MOV83 MOV83 INS43 INS59 INS29 INS83 INS5 INS42 INS44 INS44 INS8 MOV29 INS83 MOV43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS83 INS42 INS23 INS23 INS23 MOV31 INS66 INS66 INS66 INS67 INS67 INS67 INS42 INS42 INS14 UPD42 MOV21 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS43 INS42 INS60 INS25 INS65 INS65 MOV43 INS42 INS60 INS60 INS61 INS41 INS65 INS65 INS42 UPD42 INS25 INS60 INS60 INS61 INS41 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS5 INS59 UPD83 UPD42 INS44 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS68 INS42 MOV43 INS59 INS43 INS59 INS32 INS8 INS42 UPD66 UPD42 INS66 INS42 INS66 INS66 INS38 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS21 INS21 INS21 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS41 INS40 INS42 INS69 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS24 INS32 INS53 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS61 MOV21 INS42 UPD42 MOV42 INS42 INS43 INS85 INS7 INS7 INS7 INS43 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS3 MOV43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 MOV43 INS59 MOV58 INS27 MOV37 INS8 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 MOV43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS36 INS42 INS5 INS34 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS40 INS21 INS43 INS45 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS21 UPD42 UPD42 INS32 INS11 INS52 INS42 INS52 INS42 INS52 INS42 INS11 INS43 INS85 INS43 INS32 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS40 INS40 INS32 UPD42 UPD42 INS42 INS42 INS42 INS5 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS32 INS42 INS5 INS32 INS40 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 DEL42 DEL42 DEL14 DEL59 DEL23 DEL42 DEL42 DEL2 DEL42 DEL40 DEL27 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL8 DEL42 DEL14 DEL41 DEL8