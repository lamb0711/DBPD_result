JSR-1530: MsPowerPointTextExtractor does not extract from PPTs with â‚¬ sign

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@647114 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.poi.poifs.eventfilesystem.POIFSReaderListener;
-import org.apache.poi.poifs.eventfilesystem.POIFSReaderEvent;
-import org.apache.poi.poifs.filesystem.DocumentInputStream;
-import org.apache.poi.util.LittleEndian;
+import org.apache.poi.hslf.extractor.PowerPointExtractor;
-import java.io.OutputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.InputStreamReader;
-import java.io.ByteArrayInputStream;
-            ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            MsPowerPointListener listener = new MsPowerPointListener(baos);
-            POIFSReader reader = new POIFSReader();
-            reader.registerListener(listener);
-            reader.read(stream);
-            return new InputStreamReader(
-                    new ByteArrayInputStream(baos.toByteArray()));
+            PowerPointExtractor extractor = new PowerPointExtractor(stream);
+            return new StringReader(extractor.getText(true, true));
-            stream.close();
-        }
-    }
-
-    //------------------------------------------------< MsPowerPointListener >
-
-    /**
-     * Reader listener.
-     */
-    private class MsPowerPointListener implements POIFSReaderListener {
-        private OutputStream os;
-
-        MsPowerPointListener(OutputStream os) {
-            this.os = os;
-        }
-
-        public void processPOIFSReaderEvent(POIFSReaderEvent event) {
-                if (!event.getName().equalsIgnoreCase("PowerPoint Document")) {
-                    return;
-                }
-                DocumentInputStream input = event.getStream();
-                byte[] buffer = new byte[input.available()];
-                input.read(buffer, 0, input.available());
-                for (int i = 0; i < buffer.length - 20; i++) {
-                    long type = LittleEndian.getUShort(buffer, i + 2);
-                    long size = LittleEndian.getUInt(buffer, i + 4);
-                    if (type == 4008) {
-                        os.write(buffer, i + 4 + 1, (int) size + 3);
-                        i = i + 4 + 1 + (int) size - 1;
-                    }
-                }
-            } catch (Exception e) {
-
+                stream.close();
+            } catch (IOException ignored) {

UPD40 INS8 INS8 MOV60 INS41 INS54 UPD43 INS14 MOV8 INS12 UPD42 UPD42 INS43 INS32 INS44 INS8 UPD43 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 INS9 INS43 INS42 UPD42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL14 DEL41 DEL8 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL34 DEL27 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL34 DEL34 DEL27 DEL39 DEL42 DEL11 DEL34 DEL27 DEL32 DEL21 DEL42 DEL42 DEL34 DEL34 DEL39 DEL42 DEL11 DEL27 DEL34 DEL27 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL55