JCR-1104: JSR 283 support (work in progress)
- NodeLocalName

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@647798 13f79535-47bb-0310-9956-ffa450edef68

-    public Object visit(NodeLocalNameImpl node, Object data) {
-        // TODO: implement
-        throw new UnsupportedOperationException("not yet implemented");
+    public Object visit(NodeLocalNameImpl node, Object data) throws Exception {
+        if (version.getVersion() < IndexFormatVersion.V3.getVersion()) {
+            throw new InvalidQueryException("NodeLocalName operand is only " +
+                    "available with index version >= 3. Please re-index " +
+                    "repository and execute query again.");
+        }
+        if (data instanceof ComparisonImpl) {
+            ComparisonImpl comp = ((ComparisonImpl) data);
+            int operator = comp.getOperator();
+            Value v = (Value) ((StaticOperandImpl) comp.getOperand2()).accept(this, data);
+            String value = v.getString();
+
+            switch (operator) {
+                case OPERATOR_EQUAL_TO:
+                    return new TermQuery(new Term(FieldNames.LOCAL_NAME, value));
+                case OPERATOR_GREATER_THAN:
+                    return new LocalNameRangeQuery(value, null, false);
+                case OPERATOR_GREATER_THAN_OR_EQUAL_TO:
+                    return new LocalNameRangeQuery(value, null, true);
+                case OPERATOR_LESS_THAN:
+                    return new LocalNameRangeQuery(null, value, false);
+                case OPERATOR_LESS_THAN_OR_EQUAL_TO:
+                    return new LocalNameRangeQuery(null, value, true);
+                case OPERATOR_LIKE:
+                    if (value.equals("%")) {
+                        return new MatchAllDocsQuery();
+                    } else {
+                        return new WildcardQuery(FieldNames.LOCAL_NAME, null, value);
+                    }
+                case OPERATOR_NOT_EQUAL_TO:
+                    MatchAllDocsQuery all = new MatchAllDocsQuery();
+                    BooleanQuery b = new BooleanQuery();
+                    b.add(all, BooleanClause.Occur.SHOULD);
+                    b.add(new TermQuery(new Term(FieldNames.LOCAL_NAME, value)),
+                            BooleanClause.Occur.MUST_NOT);
+                    return b;
+                default:
+                    throw new InvalidQueryException(
+                            "Unknown operator " + operator);
+            }
+        } else {
+            // TODO
+            throw new InvalidQueryException("not yet implemented");
+        }
-            String stringValue = npResolver.getJCRName(value);
-            // the prefix including colon
-            String prefix = stringValue.substring(0, stringValue.indexOf(':') + 1);
-                    return new TermQuery(new Term(FieldNames.LABEL, stringValue));
+                    return new NameQuery(value, version, nsMappings);
-                    Term lower = new Term(FieldNames.LABEL, stringValue);
-                    Term upper = new Term(FieldNames.LABEL,
-                            prefix + "\uFFFF");
-                    return new RangeQuery(lower, upper, false);
+                    return new NameRangeQuery(value, null, false, version, nsMappings);
-                    lower = new Term(FieldNames.LABEL, stringValue);
-                    upper = new Term(FieldNames.LABEL,
-                            prefix + "\uFFFF");
-                    return new RangeQuery(lower, upper, true);
+                    return new NameRangeQuery(value, null, true, version, nsMappings);
-                    lower = new Term(FieldNames.LABEL, prefix);
-                    upper = new Term(FieldNames.LABEL, stringValue);
-                    return new RangeQuery(lower, upper, false);
+                    return new NameRangeQuery(null, value, false, version, nsMappings);
-                    lower = new Term(FieldNames.LABEL, prefix);
-                    upper = new Term(FieldNames.LABEL, stringValue);
-                    return new RangeQuery(lower, upper, true);
+                    return new NameRangeQuery(null, value, true, version, nsMappings);
-                    if (stringValue.equals("%")) {
-                        return new MatchAllDocsQuery();
-                    } else {
-                        return new WildcardQuery(FieldNames.LABEL,
-                                null, stringValue);
-                    }
+                    throw new InvalidQueryException("Operator LIKE is not supported with NAME operands");
-                    b.add(new TermQuery(new Term(FieldNames.LABEL, stringValue)),
+                    b.add(new NameQuery(value, version, nsMappings),

INS31 INS31 MOV83 MOV43 MOV42 MOV44 MOV44 INS43 INS8 INS83 MOV43 INS42 MOV44 MOV44 MOV43 INS8 INS42 INS25 INS25 INS25 INS27 INS8 INS62 INS8 INS8 MOV62 INS8 MOV8 INS32 INS32 MOV53 INS42 INS43 MOV60 MOV60 INS60 INS60 INS50 INS53 MOV60 MOV60 MOV60 MOV50 MOV60 MOV54 INS50 INS42 INS42 INS40 INS42 INS42 INS43 INS59 INS39 UPD43 MOV43 MOV59 MOV43 MOV59 INS42 MOV49 MOV41 MOV49 MOV41 MOV49 INS41 MOV49 INS41 MOV49 MOV41 MOV49 INS25 MOV49 MOV60 MOV60 MOV21 MOV21 MOV41 INS49 MOV53 INS14 INS42 INS49 INS41 INS49 MOV41 INS49 INS41 INS49 INS41 INS49 MOV41 INS49 INS53 INS49 INS60 INS60 INS21 MOV21 INS41 MOV49 INS53 UPD43 INS27 INS42 INS42 INS36 UPD42 INS32 UPD42 UPD42 INS11 UPD42 INS32 INS14 INS14 INS32 MOV8 INS8 INS32 INS43 INS45 INS42 INS14 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS14 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS14 UPD42 INS45 INS45 INS45 INS11 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS42 INS42 INS43 UPD43 UPD42 INS33 UPD43 MOV43 UPD42 MOV42 INS33 INS9 UPD43 MOV43 INS33 INS42 INS9 UPD43 INS33 UPD42 INS42 INS42 INS45 INS41 INS42 INS42 INS14 INS40 INS42 UPD43 MOV43 UPD42 MOV42 INS42 INS42 UPD43 UPD42 INS33 INS42 INS42 UPD43 MOV43 UPD42 MOV42 INS33 INS9 INS42 INS42 UPD43 MOV43 INS33 UPD42 MOV42 INS9 INS42 INS42 UPD43 INS33 UPD42 INS42 INS42 INS43 INS45 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS43 INS27 INS43 INS42 UPD42 MOV42 INS36 INS42 INS52 INS42 INS42 UPD40 UPD42 UPD42 UPD42 UPD42 UPD42 INS14 MOV43 INS14 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS43 INS43 UPD43 INS42 INS42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS11 MOV43 INS40 INS33 INS42 MOV43 UPD40 MOV40 UPD42 MOV42 INS42 INS42 UPD42 INS43 INS32 INS42 INS42 INS42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL42 DEL43 DEL42 DEL42 DEL34 DEL13 DEL32 DEL34 DEL27 DEL32 DEL43 DEL40 DEL42 DEL14 DEL42 DEL43 DEL40 DEL42 DEL45 DEL27 DEL14 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL7 DEL42 DEL42 DEL42 DEL43 DEL40 DEL14 DEL8 DEL31 DEL83 DEL42 DEL42 DEL60 DEL60 DEL42 DEL40 DEL14 DEL7 DEL21 DEL42 DEL40 DEL42 DEL45 DEL27 DEL14 DEL7 DEL21 DEL42 DEL40 DEL14 DEL7 DEL21 DEL42 DEL40 DEL14 DEL7 DEL21 DEL42 DEL40 DEL14 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL40 DEL33 DEL42 DEL14 DEL41 DEL8 DEL25 DEL50 DEL8 DEL25 DEL8 DEL31