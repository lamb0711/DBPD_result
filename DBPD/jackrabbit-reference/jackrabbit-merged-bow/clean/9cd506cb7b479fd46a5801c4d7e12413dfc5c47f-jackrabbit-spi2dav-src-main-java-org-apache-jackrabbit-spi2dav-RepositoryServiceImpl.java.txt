JCR-2003: JCR2SPI / SPI: Add support for JCR 2.0

- Node.getReferences(String)
- Node.getWeakReferences()
- Node.getWeakReferences(String)

JCR-1418: Redesign NodeInfo.getReferences()

- deprecated getReferences on NodeInfo
- added method to RepositoryService as suggested by marcel but including support for the variants in JCR 2.0
   > weakrefs vs refs
   > name-filter

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@779555 13f79535-47bb-0310-9956-ffa450edef68

+     * @see RepositoryService#getReferences(SessionInfo, NodeId, Name, boolean)
+     */
+    public Iterator<PropertyId> getReferences(SessionInfo sessionInfo, NodeId nodeId, Name propertyName, boolean weakReferences) throws ItemNotFoundException, RepositoryException {
+        // set of properties to be retrieved
+        DavPropertyNameSet nameSet = new DavPropertyNameSet();
+        if (weakReferences) {
+            nameSet.add(ItemResourceConstants.JCR_WEAK_REFERENCES);
+        } else {
+            nameSet.add(ItemResourceConstants.JCR_REFERENCES);
+        }
+
+        DavMethodBase method = null;
+        try {
+            String uri = getItemUri(nodeId, sessionInfo);
+            method = new PropFindMethod(uri, nameSet, DEPTH_0);
+            getClient(sessionInfo).executeMethod(method);
+            method.checkSuccess();
+
+            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            if (responses.length < 1) {
+                throw new ItemNotFoundException("Unable to retrieve the node with id " + saveGetIdString(nodeId, sessionInfo));
+            }
+
+            List<PropertyId> refIds = new ArrayList<PropertyId>();
+            for (int i = 0; i < responses.length; i++) {
+                if (isSameResource(uri, responses[i])) {
+                    MultiStatusResponse resp = responses[i];
+                    DavPropertySet props = resp.getProperties(DavServletResponse.SC_OK);
+                    DavProperty p;
+                    if (weakReferences) {
+                        p = props.get(ItemResourceConstants.JCR_WEAK_REFERENCES);
+                    } else {
+                        p = props.get(ItemResourceConstants.JCR_REFERENCES);
+                    }
+
+                    if (p == null) {
+                        return Collections.EMPTY_LIST.iterator();
+                    } else {
+                        HrefProperty hp = new HrefProperty(p);
+                        for (Iterator it = hp.getHrefs().iterator(); it.hasNext();) {
+                            String propHref = it.next().toString();
+                            PropertyId propId = uriResolver.getPropertyId(propHref, sessionInfo);
+                            if (propertyName == null || propertyName.equals(propId.getName())) {
+                                refIds.add(propId);
+                            }
+                        }
+                    }
+                }
+            }
+            return refIds.iterator();
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
+    }
+
+    /**

INS31 INS29 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS60 INS25 INS60 INS54 INS68 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS8 INS8 INS43 INS59 INS8 INS12 INS12 INS8 INS42 INS42 INS69 INS69 INS69 INS69 INS42 INS42 INS14 INS21 INS21 INS42 INS42 INS33 INS60 INS21 INS21 INS21 INS60 INS25 INS60 INS24 INS41 INS44 INS8 INS44 INS8 INS25 INS43 INS43 INS43 INS39 INS43 INS32 INS32 INS43 INS59 INS7 INS32 INS32 INS5 INS59 INS27 INS8 INS74 INS59 INS58 INS27 INS37 INS8 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS40 INS34 INS53 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS74 INS42 INS34 INS32 INS8 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS43 INS43 INS42 INS42 INS2 INS60 INS60 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS8 INS8 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS33 INS41 INS60 INS24 INS42 INS42 INS42 INS42 INS40 INS7 INS7 INS32 INS43 INS59 INS58 INS32 INS8 INS42 INS32 INS42 INS32 INS40 INS42 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42