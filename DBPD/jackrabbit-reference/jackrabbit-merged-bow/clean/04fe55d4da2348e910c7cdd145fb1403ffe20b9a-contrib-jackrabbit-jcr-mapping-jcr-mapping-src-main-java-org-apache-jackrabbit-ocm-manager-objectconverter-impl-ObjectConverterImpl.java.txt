JCR-1145 ObjectConverterImpl.getObject(Session, Class, String) may not resolve mapping correctly for incompletely described mappings

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@579995 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.Modifier;
- * 
+ *
-	
+
-	
-	private ObjectCache requestObjectCache; 
+
+	private ObjectCache requestObjectCache;
-	 * 
+	 *
-	 * 
+	 *
-	 * 
+	 *
-	 * 
+	 *
-		this.requestObjectCache = requestObjectCache; 
-	}	
+		this.requestObjectCache = requestObjectCache;
+	}
-	 * 
+	 *
-	 * 
+	 *
-	 * 
+	 *
-			// Add mixin types defined in the associated interfaces 
+			// Add mixin types defined in the associated interfaces
-			// If required, add the discriminator node type 
+			// If required, add the discriminator node type
-					
-			
+
+
-	 * 
+	 *
-		        return requestObjectCache.getObject(path);	  
-		    }			
-			
+		        return requestObjectCache.getObject(path);
+		    }
+
-			
+
-			simpleFieldsHelp.retrieveSimpleFields(session, classDescriptor, node, object);				
+			simpleFieldsHelp.retrieveSimpleFields(session, classDescriptor, node, object);
-			
+
-		
+
-	public Object getObject(Session session, Class clazz, String path) 
+	public Object getObject(Session session, Class clazz, String path)
-			
+
-		        return requestObjectCache.getObject(path);	  
-		    }			
+		        return requestObjectCache.getObject(path);
+		    }
+
+					    // in case we an alternative could not be found by walking
+					    // the class descriptor hierarchy, check whether we would
+					    // have a descriptor for the node type directly (which
+					    // may the case if the class descriptor hierarchy is
+					    // incomplete due to missing configuration. See JCR-1145
+					    // for details.
+					    if (alternativeDescriptor == null) {
+					        alternativeDescriptor = mapper.getClassDescriptorByNodeType(nodeType);
+					    }
-			// extends (or is the same) as the requested class. 
+			// extends (or is the same) as the requested class.
+			        clazz = alternativeClazz;
-			
+
+			// ensure class is concrete (neither interface nor abstract)
+			if (clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())) {
+			    throw new JcrMappingException( "Cannot instantiate non-concrete class " + clazz.getName()
+                        + " for node " + path + " of type " + node.getPrimaryNodeType().getName());
+			}
+
-            
+
-			
-            simpleFieldsHelp.retrieveSimpleFields(session, classDescriptor, node, object);			
+
+            simpleFieldsHelp.retrieveSimpleFields(session, classDescriptor, node, object);
-			
+
-			
+
-				this.retrieveBeanField(session, beanDescriptor, node, path, object, true);				
+				this.retrieveBeanField(session, beanDescriptor, node, path, object, true);
-					throw new ObjectContentManagerException("Impossible to retrieve the mapped attribute. The attribute '" + 
+					throw new ObjectContentManagerException("Impossible to retrieve the mapped attribute. The attribute '" +
-			
+
-	 * 
+	 *
-	 * 
+	 *
-	 * 
+	 *
-	 * 
+	 *
-	
+
-		if (!beanDescriptor.isAutoRetrieve() && !forceToRetrieve) 
+		if (!beanDescriptor.isAutoRetrieve() && !forceToRetrieve)
-		
+
-	    
+
-	        bean = requestObjectCache.getObject(beanPath);	
-	    	ReflectionUtils.setNestedProperty(object, beanName, bean);  	
+	        bean = requestObjectCache.getObject(beanPath);
+	    	ReflectionUtils.setNestedProperty(object, beanName, bean);
-		else 
+		else
-			
-			
-			String converterClassName = null;		
-			if (null == beanDescriptor.getConverter() || "".equals(beanDescriptor.getConverter())) 
+
+
+			String converterClassName = null;
+			if (null == beanDescriptor.getConverter() || "".equals(beanDescriptor.getConverter()))
-						
-			Object[] param = {this.mapper, this, this.atomicTypeConverterProvider};			
+
+			Object[] param = {this.mapper, this, this.atomicTypeConverterProvider};
-			if (beanDescriptor.isProxy()) 
+			if (beanDescriptor.isProxy())
-			} 
+			}
-			}			
-			requestObjectCache.cache(beanPath, bean);			
+			}
+			requestObjectCache.cache(beanPath, bean);
-	
-	
-	
+
+
+
-			this.retrieveCollectionField(session, collectionDescriptor, parentNode, object, forceToRetrieve);			
+			this.retrieveCollectionField(session, collectionDescriptor, parentNode, object, forceToRetrieve);
-		ReflectionUtils.setNestedProperty(object, collectionDescriptor.getFieldName(), collection);		
+		ReflectionUtils.setNestedProperty(object, collectionDescriptor.getFieldName(), collection);
-	
+
-			if (bean != null) 
+			if (bean != null)
-				
-				if (null == beanDescriptor.getConverter() || "".equals(beanDescriptor.getConverter())) 
+
+				if (null == beanDescriptor.getConverter() || "".equals(beanDescriptor.getConverter()))
-                
+
-		while (beanDescriptorIterator.hasNext()) 
+		while (beanDescriptorIterator.hasNext())
-			
+
-			if (null == beanDescriptor.getConverter() || "".equals(beanDescriptor.getConverter())) 
+			if (null == beanDescriptor.getConverter() || "".equals(beanDescriptor.getConverter()))
-			} 
-			else 
+			}
+			else
-			
+
-			if ((bean == null)) 
+			if ((bean == null))
-				
+
-			} else 
+			} else

INS26 INS40 INS25 INS27 INS8 INS32 INS32 INS53 INS42 INS42 INS42 INS42 INS32 INS14 INS21 INS42 INS42 INS43 INS27 INS7 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS8 INS42 INS42 INS42 INS33 INS21 INS7 INS42 INS32 INS42 INS42 INS42