JCR-1365: Query path constraints like foo//*/bar do not scale
- more performance improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@629453 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Arrays;
+import java.util.Collections;
-     * Creates query hits that consist of the nodes that are traversed from
-     * a given <code>start</code> node.
+     * Creates query hits that consist of the nodes that are traversed from a
+     * given <code>start</code> node.
-     * @param start the start node of the traversal.
+     * @param start        the start node of the traversal.
-        this.nodes = new TraversingNodeIterator(start);
+        this(start, includeStart, Integer.MAX_VALUE);
+    }
+
+    /**
+     * Creates query hits that consist of the nodes that are traversed from a
+     * given <code>start</code> node.
+     *
+     * @param start        the start node of the traversal.
+     * @param includeStart whether to include the start node in the result.
+     * @param maxDepth     the maximum depth of nodes to traverse.
+     */
+    public NodeTraversingQueryHits(Node start,
+                                   boolean includeStart,
+                                   int maxDepth) {
+        this.nodes = new TraversingNodeIterator(start, maxDepth);
-     * <p/>
-     * Does nothing.
-     */
-    protected void doClose() throws IOException {
-        // nothing to do
-    }
-
-    /**
-     * {@inheritDoc}
-     * <p/>
-     * This implementation always returns <code>-1</code>.
-     */
-    public int getSize() {
-        // don't know
-        return -1;
-    }
-
-    /**
-     * {@inheritDoc}
+         * The maximum depth of the traversal.
+         */
+        private final int maxDepth;
+
+        /**
-        private IteratorChain selfAndChildren;
+        private Iterator selfAndChildren;
-         * @param start the node from where to start the traversal.
+         *
+         * @param start    the node from where to start the traversal.
+         * @param maxDepth the maximum depth of nodes to traverse.
-        TraversingNodeIterator(Node start) {
+        TraversingNodeIterator(Node start, int maxDepth) {
+            if (maxDepth < 0) {
+                throw new IllegalArgumentException("maxDepth must be >= 0");
+            }
+            this.maxDepth = maxDepth;
-                Iterator current = Arrays.asList(new Node[]{currentNode}).iterator();
+                Iterator current = Collections.singletonList(currentNode).iterator();
-
-                // create new TraversingNodeIterator for each child
-                try {
-                    NodeIterator children = currentNode.getNodes();
-                    while (children.hasNext()) {
-                        allIterators.add(new TraversingNodeIterator(children.nextNode()));
+                if (maxDepth == 0) {
+                    // only current node
+                } else if (maxDepth == 1) {
+                    try {
+                        allIterators.add(currentNode.getNodes());
+                    } catch (RepositoryException e) {
+                        // currentNode is probably stale
-                } catch (RepositoryException e) {
-                    // currentNode is probably stale
+                } else {
+                    // create new TraversingNodeIterator for each child
+                    try {
+                        NodeIterator children = currentNode.getNodes();
+                        while (children.hasNext()) {
+                            allIterators.add(new TraversingNodeIterator(children.nextNode(), maxDepth - 1));
+                        }
+                    } catch (RepositoryException e) {
+                        // currentNode is probably stale
+                    }

MOV26 UPD40 INS31 MOV29 UPD83 MOV83 UPD42 MOV42 INS44 INS44 MOV8 INS44 INS23 INS65 MOV65 INS43 INS42 INS39 INS42 INS17 INS65 INS65 INS39 INS42 INS29 INS83 INS83 INS39 INS59 UPD43 INS44 INS8 UPD66 UPD66 INS42 INS66 UPD42 MOV42 INS42 INS42 INS40 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS66 INS65 INS42 UPD42 INS65 INS39 INS42 INS25 MOV21 INS21 INS66 UPD66 INS42 INS66 INS27 INS8 INS7 MOV60 INS42 INS42 INS34 INS53 INS22 INS42 INS25 INS14 INS52 INS42 INS27 INS8 INS25 INS43 INS45 INS42 INS34 INS27 INS8 INS8 INS42 INS42 INS34 INS54 MOV54 UPD42 UPD42 INS42 INS8 INS12 INS21 INS44 INS8 INS32 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS34 DEL65 DEL34 DEL38 DEL41 DEL39 DEL43 DEL8 DEL31 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3