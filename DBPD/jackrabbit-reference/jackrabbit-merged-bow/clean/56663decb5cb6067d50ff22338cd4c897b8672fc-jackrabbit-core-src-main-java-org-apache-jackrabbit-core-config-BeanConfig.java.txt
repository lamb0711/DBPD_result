JCR-1438: Replace Config classes with factories

Revert previous change (r826653) to avoid conflicts with uncommitted changes from Angela.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@826668 13f79535-47bb-0310-9956-ffa450edef68

-import java.beans.BeanInfo;
-import java.beans.IntrospectionException;
-import java.beans.Introspector;
-import java.beans.PropertyDescriptor;
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-
+import org.apache.commons.collections.BeanMap;
+import java.util.Properties;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Collections;
+import java.io.InputStream;
+import java.io.IOException;
+
-public class BeanConfig {
+public class BeanConfig<T> {
-    @SuppressWarnings("unchecked")
-    public <T> T newInstance(Class<T> klass) throws ConfigurationException {
+    public Object newInstance() throws ConfigurationException {
+            // Instantiate the object using the default constructor
-            if (!klass.isAssignableFrom(objectClass)) {
-                throw new ConfigurationException(
-                        "Configured class "+getClassName()
-                        + " does not implement " + klass.getName()
-                        + ". Please fix the repository configuration.");
-            }
-
-            // Instantiate the object using the default constructor
-            Object instance = objectClass.newInstance();
+            Object object = objectClass.newInstance();
-            List<?> names = Collections.list(properties.propertyNames());
-            BeanInfo info = Introspector.getBeanInfo(objectClass, Object.class);
-            for (PropertyDescriptor property : info.getPropertyDescriptors()) {
-                String value = properties.getProperty(property.getName());
+            BeanMap map = new BeanMap(object);
+            for (Object key : map.keySet()) {
+                String value = properties.getProperty(key.toString());
-                    setProperty(instance, property, value);
-                    names.remove(property.getName());
+                    map.put(key, value);
-            // Check that no invalid property names were configured
-            if (validate && !names.isEmpty()) {
-                throw new ConfigurationException(
-                        "Configured class " + getClassName()
-                        + " does not contain the properties " + names);
+            if (validate) {
+                // Check that no invalid property names were configured
+                for (Object key : properties.keySet()) {
+                    if (!map.containsKey(key)
+                            && properties.getProperty(key.toString()) != null) {
+                        String msg =
+                            "Configured class " + object.getClass().getName()
+                            + " does not contain the property " + key
+                            + ". Please fix the repository configuration.";
+                        log.error(msg);
+                        throw new ConfigurationException(msg);
+                    }
+                }
-            return (T) instance;
+            return (T) object;
-        } catch (IntrospectionException e) {
-            throw new ConfigurationException(
-                    "Configured bean implementation class " + getClassName()
-                    + " can not be introspected", e);
-        }
-    }
-
-    private void setProperty(
-            Object instance, PropertyDescriptor property, String value)
-            throws ConfigurationException {
-        Method method = property.getWriteMethod();
-        if (method == null) {
-            throw new ConfigurationException(
-                    "Property " + property.getName() + " of class "
-                    + getClassName() + " can not be written"); 
-        }
-
-        Class<?>[] types = method.getParameterTypes();
-        if (types.length != 1) {
-            throw new ConfigurationException(
-                    "Property " + property.getName() + " of class "
-                    + getClassName() + " has an invalid setter");
-        }
-
-        Class<?> type = types[0];
-        try {
-            if (types[0].isAssignableFrom(String.class)
-                || types[0].isAssignableFrom(Object.class)) {
-                method.invoke(instance, value);
-            } else if (types[0].isAssignableFrom(Boolean.TYPE)
-                    || types[0].isAssignableFrom(Boolean.class)) {
-                method.invoke(instance, Boolean.valueOf(value));
-            } else if (types[0].isAssignableFrom(Integer.TYPE)
-                    || types[0].isAssignableFrom(Integer.class)) {
-                method.invoke(instance, Integer.valueOf(value));
-            } else if (types[0].isAssignableFrom(Long.TYPE)
-                    || types[0].isAssignableFrom(Long.class)) {
-                method.invoke(instance, Long.valueOf(value));
-            } else if (types[0].isAssignableFrom(Double.TYPE)
-                    || types[0].isAssignableFrom(Double.class)) {
-                method.invoke(instance, Double.valueOf(value));
-            } else {
-                throw new ConfigurationException(
-                        "The type (" + type.getName()
-                        + ") of property " + property.getName() + " of class "
-                        + getClassName() + " is not supported");
-            }
-        } catch (NumberFormatException e) {
-            throw new ConfigurationException(
-                    "Invalid number format (" + value + ") for property "
-                    + property.getName() + " of class " + getClassName(), e);
-        } catch (InvocationTargetException e) {
-            throw new ConfigurationException(
-                    "Property " + property.getName() + " of class "
-                    + getClassName() + " can not be set to \"" + value + "\"",
-                    e);
-        } catch (IllegalAccessException e) {
-            throw new ConfigurationException(
-                    "The setter of property " + property.getName()
-                    + " of class " + getClassName() + " can not be accessed",
-                    e);
-        } catch (IllegalArgumentException e) {
-            throw new ConfigurationException(
-                    "Unable to call the setter of property "
-                    + property.getName() + " of class " + getClassName(), e);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 MOV73 MOV43 UPD42 MOV42 INS8 MOV60 MOV60 MOV60 INS70 INS25 MOV41 UPD43 MOV44 MOV32 INS8 INS42 INS8 UPD42 UPD42 UPD42 INS14 MOV43 UPD42 UPD42 UPD42 MOV60 INS25 INS70 UPD42 INS43 INS42 UPD42 MOV42 MOV43 MOV27 INS8 INS44 INS32 INS8 INS42 MOV21 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS25 MOV27 INS8 UPD42 UPD42 UPD42 UPD42 UPD42 INS27 INS60 INS21 MOV53 INS32 INS33 MOV43 INS59 INS32 UPD42 INS42 UPD42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 MOV45 INS32 UPD45 MOV45 UPD42 MOV42 INS45 INS32 INS42 INS42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL57 DEL32 DEL42 DEL42 DEL43 DEL45 DEL42 DEL32 DEL45 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL76 DEL74 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL34 DEL2 DEL59 DEL60 DEL42 DEL34 DEL2 DEL42 DEL42 DEL43 DEL57 DEL32 DEL42 DEL34 DEL2 DEL42 DEL57 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL34 DEL2 DEL42 DEL40 DEL32 DEL42 DEL34 DEL2 DEL42 DEL42 DEL43 DEL57 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL34 DEL2 DEL42 DEL40 DEL32 DEL42 DEL34 DEL2 DEL42 DEL42 DEL43 DEL57 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL34 DEL2 DEL42 DEL40 DEL32 DEL42 DEL34 DEL2 DEL42 DEL42 DEL43 DEL57 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL34 DEL2 DEL42 DEL40 DEL32 DEL42 DEL34 DEL2 DEL42 DEL42 DEL43 DEL57 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31