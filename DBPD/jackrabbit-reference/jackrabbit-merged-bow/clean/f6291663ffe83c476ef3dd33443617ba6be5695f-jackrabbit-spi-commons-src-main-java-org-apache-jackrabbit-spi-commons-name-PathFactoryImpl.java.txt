JCR-2028: JSR 283 JCR Path

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772659 13f79535-47bb-0310-9956-ffa450edef68

-     * @see PathFactory#create(Path.Element[])
+     * @see PathFactory#create(org.apache.jackrabbit.spi.Path.Element[])
-                elem = createElement(pathString.substring(lastPos, pos));
+                elem = createElementFromString(pathString.substring(lastPos, pos));
-                elem = createElement(pathString.substring(lastPos));
+                elem = createElementFromString(pathString.substring(lastPos));
+    public Path.Element createElement(String identifier) throws IllegalArgumentException {
+        if (identifier == null) {
+            throw new IllegalArgumentException("The id must not be null.");
+        } else {
+            return new IdentifierElement(identifier);
+        }
+    }
+
-    private Path.Element createElement(String elementString) {
+    private Path.Element createElementFromString(String elementString) {
+        } else if (elementString.startsWith("[") && elementString.endsWith("]") && elementString.length() > 2) {
+            return new IdentifierElement(elementString.substring(1, elementString.length()-1));
-            this.absolute = elements[0].denotesRoot();
+            this.absolute = elements[0].denotesRoot() || elements[0].denotesIdentifier();
-            return absolute && elements.length == 1;
+            return absolute && elements.length == 1 && elements[0].denotesRoot();
+        }
+
+        /**
+         * @see Path#denotesIdentifier()
+         */
+        public boolean denotesIdentifier() {
+            return elements.length == 1 && elements[0].denotesIdentifier();
-        public Path getNormalizedPath() {
+        public Path getNormalizedPath() throws RepositoryException {
+            if (denotesIdentifier()) {
+                throw new RepositoryException("Identifier-based path cannot be normalized.");                 
+            }
+            if (denotesIdentifier()) {
+                throw new RepositoryException("Identifier-based path cannot be canonicalized.");
+            }
-            // make sure both paths are absolute
+            // make sure both paths are absolute and not id-based
+            if (denotesIdentifier() || other.denotesIdentifier()) {
+                throw new RepositoryException("Cannot compute relative path from identifier-based paths");                
+            }
-        public Path getAncestor(int degree) throws IllegalArgumentException, PathNotFoundException {
+        public Path getAncestor(int degree) throws IllegalArgumentException, PathNotFoundException, RepositoryException {
-                return this.getNormalizedPath();
+                return getNormalizedPath();
-            return (isAbsolute()) ? getDepth() : -1;
+            try {
+                return (isAbsolute() && !denotesIdentifier()) ? getDepth() : -1;
+            } catch (RepositoryException e) {
+                // never gets here.
+                return -1;
+            }
-        public int getDepth() {
+        public int getDepth() throws RepositoryException {
+            if (denotesIdentifier()) {
+                throw new RepositoryException("Cannot determine depth of an identifier based path.");
+            }
+         * @return always returns false.
+         * @see Path.Element#denotesIdentifier()
+         */
+        public boolean denotesIdentifier() {
+            return false;
+        }
+
+        /**
+     * 
+     */
+    private static final class IdentifierElement extends Element {
+
+        private final String identifier;
+        /**
+         * 
+         * @param identifier
+         */
+        private IdentifierElement(String identifier) {
+            super(null, Path.INDEX_UNDEFINED);
+            this.identifier = identifier;
+        }
+
+        /**
+         * @return Always returns true.
+         * @see Path.Element#denotesIdentifier()
+         */
+        public boolean denotesIdentifier() {
+            return true;
+        }
+
+        /**
+         * @return Always returns false.
+         * @see Path.Element#denotesName()
+         */
+        public boolean denotesName() {
+            return false;
+        }
+
+        /**
+         * Returns a string representation of this path element. Note that
+         * the path element name is expressed using the <code>{uri}name</code>
+         * syntax.
+         *
+         * @return string representation of the path element
+         * @see Object#toString()
+         */
+        public String toString() {
+            StringBuffer sb = new StringBuffer();
+            sb.append('[');
+            sb.append(identifier);
+            sb.append(']');
+            return sb.toString();
+        }
+
+        /**
+         * Computes a hash code for this path element.
+         *
+         * @return hash code
+         * @see Object#hashCode()
+         */
+        public int hashCode() {
+            int h = 37 * 17 + identifier.hashCode();
+            return h;
+        }
+
+        /**
+         * Check for path element equality. Returns true if the given
+         * object is a PathElement and contains the same name and index
+         * as this one.
+         *
+         * @param obj the object to compare with
+         * @return <code>true</code> if the path elements are equal
+         * @see Object#equals(Object)
+         */
+        public boolean equals(Object obj) {
+            if (this == obj) {
+                return true;
+            }
+            if (obj instanceof IdentifierElement) {
+                return identifier.equals(((IdentifierElement) obj).identifier);
+            } if (obj instanceof Path.Element) {
+                Path.Element other = (Path.Element) obj;
+                return other.denotesIdentifier() && getString().equals(other.getString());
+            }
+            return false;
+        }
+    }
+    /**
-                isNormalized = true;
+                isNormalized = !elements[0].denotesIdentifier();
+                    } else if (elem.denotesIdentifier()) {
+                        throw new IllegalArgumentException("Invalid path: The identifier element may only occur at the beginning of a single element path.");

INS31 INS55 INS83 INS43 INS42 INS44 INS43 INS8 UPD42 INS31 INS31 INS29 INS83 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS40 INS43 INS42 INS42 INS25 INS29 INS83 INS39 INS42 INS8 INS43 INS43 INS8 INS43 INS29 INS83 INS39 INS42 INS8 INS42 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS27 INS8 INS8 INS65 INS41 INS42 INS25 INS25 INS25 INS42 INS54 INS42 INS25 INS65 INS65 INS41 INS42 INS42 INS65 INS43 INS42 INS46 INS21 INS65 INS65 INS41 INS65 INS65 INS41 INS65 INS65 INS65 INS42 INS60 INS21 INS21 INS21 INS41 INS65 INS65 INS65 INS60 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS25 INS25 INS25 INS41 INS42 INS33 INS53 INS41 INS25 INS27 INS68 INS27 INS32 INS8 INS32 INS8 INS27 INS8 MOV8 INS12 INS32 INS8 INS66 INS68 INS9 INS42 INS42 INS33 INS40 INS7 INS66 INS68 INS9 INS66 INS68 INS9 INS66 INS66 INS66 INS66 INS68 INS43 INS59 INS32 INS32 INS32 INS32 INS66 INS66 INS68 INS39 INS59 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS68 INS42 INS27 INS8 INS62 INS8 INS62 INS8 INS9 UPD5 INS14 INS14 MOV32 MOV8 MOV25 INS27 MOV27 MOV32 INS42 INS42 INS27 INS32 INS42 INS53 INS42 INS53 INS32 INS32 INS53 INS44 INS8 INS42 INS53 INS40 INS42 INS22 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS69 INS52 INS42 INS41 INS42 INS43 INS41 INS42 INS43 INS60 INS41 INS43 INS43 INS45 INS43 INS42 INS27 INS8 INS32 INS32 INS40 INS34 INS2 INS42 INS14 INS14 INS42 INS42 INS42 INS14 INS43 INS42 INS41 INS14 INS52 INS42 INS43 INS27 INS32 INS43 INS9 INS42 INS32 INS40 MOV43 INS59 INS27 INS40 INS42 INS42 INS32 INS32 INS27 INS41 INS2 INS42 INS2 INS42 INS42 INS34 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS38 INS43 INS45 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS11 INS32 INS32 INS38 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS34 INS14 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS27 INS34 INS42 INS36 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS32 INS32 UPD42 UPD42 INS42 INS42 INS43 INS32 MOV32 INS38 INS11 INS40 INS42 INS42 INS42 INS2 INS42 INS25 INS42 INS42 INS42 INS34 INS27 INS32 INS43 INS42 INS42 INS34 INS32 INS8 MOV25 INS32 INS34 INS42 INS42 INS42 INS42 INS53 INS42 INS42 INS14 INS43 INS45 INS42 DEL52 DEL9