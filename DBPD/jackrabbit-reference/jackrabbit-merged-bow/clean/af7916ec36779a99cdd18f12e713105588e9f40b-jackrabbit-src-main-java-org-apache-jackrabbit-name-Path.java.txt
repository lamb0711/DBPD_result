reverting some too enthusiastic changes :-)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@424290 13f79535-47bb-0310-9956-ffa450edef68

-
-    /**
-     * Creates a new <code>Path</code> from the given path elements.
-     *
-     * @param elements the path elements that will form the path
-     * @return a new <code>Path</code>
-     */
-    public static Path create(PathElement[] elements) {
-        PathElement[] tmp = new PathElement[elements.length];
-        boolean isNormalized = true;
-        boolean leadingParent = true;
-        for (int i = 0; i < elements.length; i++) {
-            PathElement elem = tmp[i] = elements[i];
-            if (elem.denotesCurrent() || elem.denotesParent()) {
-                leadingParent &= elem.denotesParent();
-                isNormalized &= !elem.denotesCurrent() && (leadingParent || !elem.denotesParent());
-            }
-        }
-        return new Path(tmp, isNormalized);
-    }
-
-    /**
-     * Creates a new <code>Path</code> from the given path elements but does
-     * not check if the path is normalized or not.
-     * <p/>
-     * Please note that this method should only be called, if the normalized
-     * state is known. Further is the element array not duplicated. Basically
-     * this method should only be called from {@link PathFormat}.
-     *
-     * @param elements     the path elements that will form the path
-     * @param isNormalized flag
-     * @return a new <code>Path</code>
-     */
-    protected static Path create(PathElement[] elements, boolean isNormalized) {
-        return new Path(elements, isNormalized);
-    }
-
-        return normalize
-                ? PathFormat.parse(null, jcrPath, resolver).getNormalizedPath()
-                : PathFormat.parse(null, jcrPath, resolver);
+        Path path = PathFormat.parse(jcrPath, resolver);
+        if (normalize) {
+            return path.getNormalizedPath();
+        } else {
+            return path;
+        }
-        return canonicalize
-                ? PathFormat.parse(parent, relJCRPath, resolver).getCanonicalPath()
-                : PathFormat.parse(parent, relJCRPath, resolver);
+        Path path = PathFormat.parse(parent, relJCRPath, resolver);
+        if (canonicalize) {
+            return path.getCanonicalPath();
+        } else {
+            return path;
+        }
+
-        return normalize
-                ? pb.getPath().getNormalizedPath()
-                : pb.getPath();
+
+        Path path = pb.getPath();
+        if (normalize) {
+            return path.getNormalizedPath();
+        } else {
+            return path;
+        }
-     * @param parent    the parent path
-     * @param name      the name of the new path element.
+     * @param parent the parent path
+     * @param name the name of the new path element.
-        return normalize
-                ? pb.getPath().getNormalizedPath()
-                : pb.getPath();
+
+        Path path = pb.getPath();
+        if (normalize) {
+            return path.getNormalizedPath();
+        } else {
+            return path;
+        }
-        return normalize
-                ? pb.getPath().getNormalizedPath()
-                : pb.getPath();
+
+        Path path = pb.getPath();
+        if (normalize) {
+            return path.getNormalizedPath();
+        } else {
+            return path;
+        }
-        PathElement elem = createPathElement(name, index);
-        return new Path(new PathElement[]{elem}, !elem.denotesCurrent());
-    }
-
-    /**
-     * Create a PathElement from the given QName and index.
-     *
-     * @param qName
-     * @param index
-     * @return new path element
-     * @throws IllegalArgumentException if the index is less than {@link Path#INDEX_UNDEFINED}.
-     */
-    public static PathElement createPathElement(QName qName, int index) {
+        PathElement elem;
-            return PathElement.create(qName);
+            elem = PathElement.create(name);
-            return PathElement.create(qName, index);
+            elem = PathElement.create(name, index);
+        return new Path(new PathElement[]{elem}, !elem.denotesCurrent());
-
-
-        for (int i = 0; i < p0.getElements().length && i < p1.getElements().length; i++)
-        {
+        for (int i = 0; i < p0.getElements().length && i < p1.getElements().length; i++) {
-     * @throws PathNotFoundException
-     *                                  if there is no ancestor of the specified
-     *                                  degree
+     * @throws PathNotFoundException if there is no ancestor of the specified degree
-
-

INS8 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 MOV25 INS60 INS25 MOV41 MOV43 INS59 INS42 INS8 INS8 MOV43 INS59 INS42 INS8 INS8 MOV43 INS59 INS42 INS8 INS8 UPD66 UPD66 MOV43 INS59 INS42 INS8 INS8 INS43 INS59 INS42 INS8 INS8 MOV43 INS59 MOV27 INS8 INS8 UPD66 INS42 INS32 INS41 INS41 INS42 MOV32 INS41 INS41 INS42 MOV32 INS41 INS41 INS42 MOV32 INS41 INS41 INS42 INS42 MOV32 INS41 INS41 INS42 INS21 INS21 MOV42 MOV42 MOV42 MOV42 INS32 INS42 INS32 INS42 MOV42 INS32 INS42 INS32 INS42 INS32 INS42 INS7 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 MOV42 MOV42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL36 DEL27 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL33 DEL32 DEL42 DEL32 DEL42 DEL33 DEL42 DEL32 DEL16 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL16 DEL41 DEL42 DEL32 DEL32 DEL16 DEL41 DEL42 DEL32 DEL42 DEL32 DEL16 DEL41 DEL42 DEL42 DEL32 DEL32 DEL16 DEL41 DEL42 DEL32 DEL59 DEL60 DEL8 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66