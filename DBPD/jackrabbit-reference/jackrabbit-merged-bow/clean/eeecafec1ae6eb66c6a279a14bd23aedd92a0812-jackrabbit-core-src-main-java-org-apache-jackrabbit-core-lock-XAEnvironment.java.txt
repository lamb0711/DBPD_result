JCR-1590: JSR 283: Locking

Another code cleanup step: Use LockInfo instead of AbstractLockInfo when referring to lock infos.

Perhaps we should simply make LockInfo an abstract class and merge the current AbstractLockInfo into it? There doesn't seem to be much benefit in having a separate interface for code that's only used within a single package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803505 13f79535-47bb-0310-9956-ffa450edef68

-    public AbstractLockInfo lock(NodeImpl node, boolean isDeep, boolean isSessionScoped)
+    public LockInfo lock(NodeImpl node, boolean isDeep, boolean isSessionScoped)
-    public AbstractLockInfo lock(NodeImpl node, boolean isDeep, boolean isSessionScoped, long timeoutHint, String ownerInfo)
+    public LockInfo lock(NodeImpl node, boolean isDeep, boolean isSessionScoped, long timeoutHint, String ownerInfo)
-        AbstractLockInfo info = lockedNodesMap.get(id);
+        LockInfo info = lockedNodesMap.get(id);
-    public AbstractLockInfo getLockInfo(NodeImpl node) throws RepositoryException {
+    public LockInfo getLockInfo(NodeImpl node) throws RepositoryException {
-     * Returns all <code>AbstractLockInfo</code>s associated with the specified
-     * session.
+     * Returns all locks associated with the specified session.
-     * @return an array of <code>AbstractLockInfo</code>s
+     * @return locks associated with the session
-    public AbstractLockInfo[] getLockInfos(SessionImpl session)
+    public LockInfo[] getLockInfos(SessionImpl session)
-
-        ArrayList<AbstractLockInfo> result = new ArrayList<AbstractLockInfo>();
+        ArrayList<LockInfo> result = new ArrayList<LockInfo>();
-        AbstractLockInfo[] infos = lockMgr.getLockInfos(session);
-        for (int i = 0; i < infos.length; i++) {
-            AbstractLockInfo info = infos[i];
+        for (LockInfo info : lockMgr.getLockInfos(session)) {
-        return (AbstractLockInfo[]) result.toArray(new AbstractLockInfo[result.size()]);
+        return (LockInfo[]) result.toArray(new LockInfo[result.size()]);
-            AbstractLockInfo info = getLockInfo(node);
+            LockInfo info = getLockInfo(node);
-            AbstractLockInfo info = getLockInfo(node);
+            LockInfo info = getLockInfo(node);
-    public boolean differentXAEnv(AbstractLockInfo info) {
+    public boolean differentXAEnv(LockInfo info) {
-        public XALockInfo(NodeImpl node, AbstractLockInfo info) {
-            super(info.lockToken, info.sessionScoped, info.deep, info.lockOwner, info.getSecondsRemaining());
+        public XALockInfo(NodeImpl node, LockInfo info) {
+            super(info.getLockToken(), info.isSessionScoped(), info.isDeep(),
+                    info.getLockOwner(), info.getSecondsRemaining());
-                AbstractLockInfo internalLock = lockMgr.internalLock(node, deep, sessionScoped, getSecondsRemaining(), lockOwner);
-                AbstractLockInfo xaEnvLock = getLockInfo(node);
+                LockInfo internalLock = lockMgr.internalLock(node, deep, sessionScoped, getSecondsRemaining(), lockOwner);
+                LockInfo xaEnvLock = getLockInfo(node);

UPD43 UPD43 UPD43 UPD5 UPD42 UPD42 UPD42 UPD43 INS70 UPD43 UPD43 UPD66 UPD66 UPD42 UPD74 INS44 MOV32 MOV8 UPD42 UPD43 UPD42 UPD43 INS43 INS42 UPD5 UPD42 INS32 INS32 INS32 INS32 UPD42 UPD74 UPD42 MOV42 UPD43 UPD43 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 UPD42 UPD5 UPD42 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 DEL66 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL40 DEL40 DEL40 DEL40