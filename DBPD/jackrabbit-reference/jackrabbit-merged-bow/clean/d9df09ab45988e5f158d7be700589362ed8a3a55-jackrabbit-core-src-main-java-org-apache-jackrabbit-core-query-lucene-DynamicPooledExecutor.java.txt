JCR-2836: Unclosed threads in Jackrabbit

Automatically close the DynamicPooledExecutor threads when no longer used.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1055068 13f79535-47bb-0310-9956-ffa450edef68

+     * Number of instances that access the underlying executor.
+     * Used to automatically shutdown the thread pool when unused.
+     */
+    private static int instances = 0;
+
+    /**
-    private final ThreadPoolExecutor executor;
+    private static ThreadPoolExecutor executor = null;
-    private long lastCheck;
+    private static long lastCheck;
-        ThreadFactory f = new ThreadFactory() {
-            public Thread newThread(Runnable r) {
-                Thread t = new Thread(r, "DynamicPooledExecutor");
-                t.setDaemon(true);
-                return t;
-            }
-        };
-        this.executor = new ThreadPoolExecutor(
-                1, Runtime.getRuntime().availableProcessors(),
-                500, TimeUnit.MILLISECONDS,
-                new LinkedBlockingQueue<Runnable>(), f);
-        this.lastCheck = System.currentTimeMillis();
+        startInstance();
-    private synchronized void adjustPoolSize() {
+    private static synchronized ThreadPoolExecutor adjustPoolSize() {
+        return executor;
-        adjustPoolSize();
+        ThreadPoolExecutor executor = adjustPoolSize();
+    public void close() {
+        stopInstance();
+    }
+
+    private static synchronized void startInstance() {
+        instances++;
+        if (executor == null) {
+            ThreadFactory f = new ThreadFactory() {
+                public Thread newThread(Runnable r) {
+                    Thread t = new Thread(r, "DynamicPooledExecutor");
+                    t.setDaemon(true);
+                    return t;
+                }
+            };
+            executor = new ThreadPoolExecutor(
+                    1, Runtime.getRuntime().availableProcessors(),
+                    500, TimeUnit.MILLISECONDS,
+                    new LinkedBlockingQueue<Runnable>(), f);
+            lastCheck = System.currentTimeMillis();
+        }
+    }
+
+    private static synchronized void stopInstance() {
+        instances--;
+        if (instances == 0) {
+            executor.shutdown();
+            try {
+                executor.awaitTermination(10, TimeUnit.SECONDS);
+            } catch (InterruptedException e) {
+                // ignore and continue
+            }
+            executor = null;
+        }
+    }
+

MOV31 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS59 UPD83 INS83 MOV29 INS83 INS42 INS8 INS83 INS43 INS83 INS39 INS42 INS8 INS83 UPD83 INS83 INS39 INS42 INS8 INS83 INS83 INS83 INS39 INS42 INS8 INS65 INS42 INS34 INS33 INS21 INS42 INS41 INS60 INS21 INS21 INS25 INS21 INS25 INS66 INS66 INS32 INS42 INS43 INS59 INS32 INS37 INS27 MOV8 INS37 INS27 INS8 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS33 INS42 INS42 INS34 INS21 INS54 INS21 INS32 INS8 INS12 INS7 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS32 INS43 INS42 INS42 INS42 INS34 INS40 INS42 DEL39 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42