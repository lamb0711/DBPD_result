JCR-390: Move text extraction into a background thread
- minimize memory usage of text extractors

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497449 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.util.LazyFileInputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
+import java.io.BufferedWriter;
+import java.io.InputStreamReader;
+import java.io.StringReader;
+     * UTF-8 encoding.
+     */
+    private static final String ENCODING_UTF8 = "UTF-8";
+
+    /**
+     * Set to <code>true</code> if this job timed out.
+     */
+    private transient boolean timedOut = false;
+
+    /**
-                if (discarded && r != null) {
-                    r.close();
-                    r = null;
+                if (r != null) {
+                    if (discarded) {
+                        r.close();
+                        r = null;
+                    } else if (timedOut) {
+                        // spool a temp file to save memory
+                        r = getSwappedOutReader(r);
+                    }
+                timedOut = true;
+
+    //----------------------------< internal >----------------------------------
+
+    /**
+     * Returns a <code>Reader</code> for <code>r</code> using a temp file.
+     *
+     * @param r the reader to swap out into a temp file.
+     * @return a reader to the temp file.
+     */
+    private Reader getSwappedOutReader(Reader r) {
+        final File temp;
+        try {
+            temp = File.createTempFile("extractor", null);
+        } catch (IOException e) {
+            // unable to create temp file
+            // return reader as is
+            return r;
+        }
+        Writer out;
+        try {
+            out = new BufferedWriter(new OutputStreamWriter(
+                            new FileOutputStream(temp), ENCODING_UTF8));
+        } catch (IOException e) {
+            // should never happend actually
+            if (!temp.delete()) {
+                temp.deleteOnExit();
+            }
+            return r;
+        }
+
+        // spool into temp file
+        char[] buffer = new char[1024];
+        int len;
+        InputStream in = null;
+        try {
+            try {
+                while ((len = r.read(buffer)) >= 0) {
+                    out.write(buffer, 0, len);
+                }
+                out.close();
+            } finally {
+                r.close();
+            }
+            in = new LazyFileInputStream(temp);
+
+            return new InputStreamReader(in, ENCODING_UTF8) {
+                public void close() throws IOException {
+                    super.close();
+                    // delete file
+                    if (!temp.delete()) {
+                        temp.deleteOnExit();
+                    }
+                }
+            };
+        } catch (IOException e) {
+            // do some clean up
+            try {
+                out.close();
+            } catch (IOException e1) {
+                // ignore
+            }
+
+            if (in != null) {
+                try {
+                    in.close();
+                } catch (IOException e1) {
+                    // ignore
+                }
+            }
+
+            if (!temp.delete()) {
+                temp.deleteOnExit();
+            }
+            // use empty string reader as fallback
+            return new StringReader("");
+        }
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS42 INS45 INS65 INS42 INS9 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS54 INS60 INS54 INS60 INS60 INS60 INS54 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS83 INS43 INS59 INS8 INS12 INS43 INS59 INS8 INS12 INS5 INS59 INS39 INS59 INS43 INS59 INS8 INS12 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS21 INS44 INS8 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS33 INS54 INS21 INS41 INS44 INS8 INS7 INS43 INS42 INS41 INS7 INS43 INS42 INS25 INS41 INS5 INS34 INS8 INS8 INS7 INS14 INS43 INS42 INS54 INS25 INS25 INS41 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS38 INS8 INS42 INS39 INS85 INS61 INS21 INS21 INS42 INS14 INS43 INS42 INS42 INS1 INS42 INS8 INS12 INS27 INS8 INS38 INS8 INS14 INS21 INS42 INS42 INS45 INS33 INS43 INS14 INS32 INS21 INS27 INS8 INS32 INS32 INS43 INS42 INS42 INS31 INS21 INS44 INS8 INS42 INS33 INS54 INS32 INS21 INS43 INS45 INS7 INS42 INS43 INS14 INS42 INS42 INS42 INS32 INS36 INS34 INS21 INS42 INS42 INS42 INS42 INS42 INS83 INS39 INS42 INS43 INS8 INS32 INS43 INS42 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS43 INS42 INS42 INS42 INS7 INS32 INS42 INS21 INS25 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 MOV27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS48 INS38 INS8 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 MOV8 INS25 INS42 INS42 INS32 INS42 INS8 INS42 INS42 INS21 INS7 INS42 INS32 INS42 INS42 DEL42 DEL27