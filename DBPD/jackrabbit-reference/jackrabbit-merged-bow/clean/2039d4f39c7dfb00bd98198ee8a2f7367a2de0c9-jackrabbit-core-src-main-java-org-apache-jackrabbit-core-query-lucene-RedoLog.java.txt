JCR-1854: Use Journal as index redo log when available
- introduce a factory for redo logs
- expose ConsistencyCheck on SearchIndex

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803825 13f79535-47bb-0310-9956-ffa450edef68

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.lucene.store.Directory;
-import org.apache.jackrabbit.core.query.lucene.directory.IndexOutputStream;
-import org.apache.jackrabbit.core.query.lucene.directory.IndexInputStream;
-
-import java.io.BufferedReader;
-import java.io.BufferedWriter;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.Writer;
-import java.io.OutputStream;
-import java.util.ArrayList;
- * Implements a redo log for changes that have not been committed to disk. While
+ * Defines a redo log for changes that have not been committed to disk. While
- * redo log is written to keep track of the changes. In case the Jackrabbit
+ * redo log is maintained to keep track of the changes. In case the Jackrabbit
- * <p/>
- * This class is not thread-safe.
-class RedoLog {
-
-    /**
-     * Logger instance for this class
-     */
-    private static final Logger log = LoggerFactory.getLogger(RedoLog.class);
-
-    /**
-     * Default name of the redo log file
-     */
-    static final String REDO_LOG = "redo.log";
-
-    /**
-     * Prefix of the redo log files.
-     */
-    static final String REDO_LOG_PREFIX = "redo_";
-
-    /**
-     * The .log extension.
-     */
-    static final String DOT_LOG = ".log";
-
-    /**
-     * Implements a {@link ActionCollector} that counts all entries and sets
-     * {@link #entryCount}.
-     */
-    private final ActionCollector ENTRY_COUNTER = new ActionCollector() {
-        public void collect(MultiIndex.Action a) {
-            entryCount++;
-        }
-    };
-
-    /**
-     * The directory where the log file is stored.
-     */
-    private final Directory dir;
-
-    /**
-     * The name of the log file.
-     */
-    private final String fileName;
-
-    /**
-     * The number of log entries in the log file
-     */
-    private int entryCount = 0;
-
-    /**
-     * Writer to the log file
-     */
-    private Writer out;
-
-    /**
-     * Creates a new <code>RedoLog</code> instance, which stores its log in the
-     * given directory.
-     *
-     * @param dir the directory where the redo log file is located.
-     * @param fileName the name of the redo log file.
-     * @throws IOException if an error occurs while reading the redo log.
-     */
-    private RedoLog(Directory dir, String fileName) throws IOException {
-        this.dir = dir;
-        this.fileName = fileName;
-        read(ENTRY_COUNTER);
-    }
-
-    /**
-     * Creates a new <code>RedoLog</code> instance, which stores its log in the
-     * given directory.
-     *
-     * @param dir        the directory where the redo log file is located.
-     * @param generation the redo log generation number.
-     * @return the redo log.
-     * @throws IOException if the redo log cannot be created.
-     */
-    static RedoLog create(Directory dir, long generation) throws IOException {
-        String fileName;
-        if (generation == 0) {
-            fileName = RedoLog.REDO_LOG;
-        } else {
-            fileName = RedoLog.REDO_LOG_PREFIX + Long.toString(
-                    generation, Character.MAX_RADIX) + RedoLog.DOT_LOG;
-        }
-        return new RedoLog(dir, fileName);
-    }
+public interface RedoLog {
-    boolean hasEntries() {
-        return entryCount > 0;
-    }
+    boolean hasEntries();
-    int getSize() {
-        return entryCount;
-    }
+    int getSize();
-    List<MultiIndex.Action> getActions() throws IOException {
-        final List<MultiIndex.Action> actions = new ArrayList<MultiIndex.Action>();
-        read(new ActionCollector() {
-            public void collect(MultiIndex.Action a) {
-                actions.add(a);
-            }
-        });
-        return actions;
-    }
+    List<MultiIndex.Action> getActions() throws IOException;
-    void append(MultiIndex.Action action) throws IOException {
-        initOut();
-        out.write(action.toString() + "\n");
-        entryCount++;
-    }
+    void append(MultiIndex.Action action) throws IOException;
-     * Flushes all pending writes to the underlying file.
+     * Flushes all pending writes to the redo log.
+     *
-    void flush() throws IOException {
-        if (out != null) {
-            out.flush();
-        }
-    }
+    void flush() throws IOException;
-     * Closes this redo log.
+     * Flushes all pending writes to the redo log and closes it.
-     * @throws IOException if an error occurs while flushing pending writes.
+     * @throws IOException if an error occurs while writing.
-    void close() throws IOException {
-        if (out != null) {
-            out.close();
-            out = null;
-        }
-    }
-
-    /**
-     * Initializes the {@link #out} stream if it is not yet set.
-     * @throws IOException if an error occurs while creating the
-     * output stream.
-     */
-    private void initOut() throws IOException {
-        if (out == null) {
-            OutputStream os = new IndexOutputStream(dir.createOutput(fileName));
-            out = new BufferedWriter(new OutputStreamWriter(os));
-        }
-    }
-
-    /**
-     * Reads the log file and calls back {@link RedoLog.ActionCollector}.
-     *
-     * @param collector called back for each {@link MultiIndex.Action} read.
-     * @throws IOException if an error occurs while reading from the
-     * log file.
-     */
-    private void read(ActionCollector collector) throws IOException {
-        if (!dir.fileExists(fileName)) {
-            return;
-        }
-        InputStream in = new IndexInputStream(dir.openInput(fileName));
-        try {
-            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
-            String line;
-            while ((line = reader.readLine()) != null) {
-                try {
-                    collector.collect(MultiIndex.Action.fromString(line));
-                } catch (IllegalArgumentException e) {
-                    log.warn("Malformed redo entry: " + e.getMessage());
-                }
-            }
-        } finally {
-            if (in != null) {
-                try {
-                    in.close();
-                } catch (IOException e) {
-                    log.warn("Exception while closing redo log: " + e.toString());
-                }
-            }
-        }
-    }
-
-    //-----------------------< internal >---------------------------------------
-
-    /**
-     * Helper interface to collect Actions read from the redo log.
-     */
-    interface ActionCollector {
-
-        /** Called when an action is created */
-        void collect(MultiIndex.Action action);
-    }
+    void close() throws IOException;

MOV31 INS83 INS42 UPD42 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL42 DEL65 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL37 DEL21 DEL8 DEL31 DEL1 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL40 DEL42 DEL42 DEL42 DEL40 DEL32 DEL40 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL34 DEL27 DEL41 DEL8 DEL42 DEL41 DEL8 DEL83 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL42 DEL43 DEL40 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL40 DEL65 DEL66 DEL65 DEL42 DEL66 DEL40 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL31 DEL55