JCR-699: Clustering: re-registration of nodetypes is not synchronized


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@541585 13f79535-47bb-0310-9956-ffa450edef68

+     * Bit indicating this is a registration operation.
+     */
+    private static final int NTREG_REGISTER = 0;
+
+    /**
+     * Bit indicating this is a reregistration operation.
+     */
+    private static final int NTREG_REREGISTER = (1 << 30);
+
+    /**
+     * Bit indicating this is an unregistration operation.
+     */
+    private static final int NTREG_UNREGISTER = (1 << 31);
+
+    /**
+     * Mask used in node type registration operations.
+     */
+    private static final int NTREG_MASK = (NTREG_REREGISTER | NTREG_UNREGISTER);
+
+    /**
-            write(record, ntDefs);
+            write(record, ntDefs, true);
+            record.writeChar('\0');
+            record.update();
+            setRevision(record.getRevision());
+            succeeded = true;
+        } catch (JournalException e) {
+            String msg = "Unable to create log entry: " + e.getMessage();
+            log.error(msg);
+        } catch (Throwable e) {
+            String msg = "Unexpected error while creating log entry.";
+            log.error(msg, e);
+        } finally {
+            if (!succeeded && record != null) {
+                record.cancelUpdate();
+            }
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void reregistered(NodeTypeDef ntDef) {
+        if (status != STARTED) {
+            log.info("not started: nodetype operation ignored.");
+            return;
+        }
+        Record record = null;
+        boolean succeeded = false;
+
+        try {
+            record = journal.getProducer(PRODUCER_ID).append();
+            record.writeString(null);
+            write(record, ntDef);
+            record.writeChar('\0');
+            record.update();
+            setRevision(record.getRevision());
+            succeeded = true;
+        } catch (JournalException e) {
+            String msg = "Unable to create log entry: " + e.getMessage();
+            log.error(msg);
+        } catch (Throwable e) {
+            String msg = "Unexpected error while creating log entry.";
+            log.error(msg, e);
+        } finally {
+            if (!succeeded && record != null) {
+                record.cancelUpdate();
+            }
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void unregistered(Collection qnames) {
+        if (status != STARTED) {
+            log.info("not started: nodetype operation ignored.");
+            return;
+        }
+        Record record = null;
+        boolean succeeded = false;
+
+        try {
+            record = journal.getProducer(PRODUCER_ID).append();
+            record.writeString(null);
+            write(record, qnames, false);
-     * @param ntDefs node type definition
+     * @param c collection of node type definitions, if this is a register
+     *          operation; collection of <code>QName</code>s if this is
+     *          an unregister operation
+     * @param register <code>true</code>, if this is a register operation;
+     *                 <code>false</code> otherwise
-    private void process(Collection ntDefs) {
+    private void process(Collection c, boolean register) {
-            nodeTypeListener.externalRegistered(ntDefs);
+            if (register) {
+                nodeTypeListener.externalRegistered(c);
+            } else {
+                nodeTypeListener.externalUnregistered(c);
+            }
+        } catch (InvalidNodeTypeDefException e) {
+            String msg = "Unable to deliver node type operation: " + e.getMessage();
+            log.error(msg);
+        } catch (RepositoryException e) {
+            String msg = "Unable to deliver node type operation: " + e.getMessage();
+            log.error(msg);
+        }
+    }
+
+    /**
+     * Process a node type re-registration.
+     *
+     * @param ntDef node type definition
+     */
+    private void process(NodeTypeDef ntDef) {
+        if (nodeTypeListener == null) {
+            String msg = "NodeType listener unavailable.";
+            log.error(msg);
+            return;
+        }
+        try {
+            nodeTypeListener.externalReregistered(ntDef);
-                    HashSet ntDefs = new HashSet();
-                    for (int i = 0; i < size; i++) {
-                        ntDefs.add(record.readNodeTypeDef());
+                    int opcode = size & NTREG_MASK;
+                    size &= ~NTREG_MASK;
+
+                    switch (opcode) {
+                        case NTREG_REGISTER:
+                            HashSet ntDefs = new HashSet();
+                            for (int i = 0; i < size; i++) {
+                                ntDefs.add(record.readNodeTypeDef());
+                            }
+                            process(ntDefs, true);
+                            break;
+                        case NTREG_REREGISTER:
+                            process(record.readNodeTypeDef());
+                            break;
+                        case NTREG_UNREGISTER:
+                            HashSet ntNames = new HashSet();
+                            for (int i = 0; i < size; i++) {
+                                ntNames.add(record.readQName());
+                            }
+                            process(ntNames, false);
+                            break;
+                        default:
+                            throw new IllegalArgumentException("Unknown opcode: " + opcode);
-                    process(ntDefs);
-    private static void write(Record record, Collection ntDefs)
+    private static void write(Record record, Collection c, boolean register)
-        record.writeInt(ntDefs.size());
-        Iterator iter = ntDefs.iterator();
-        while (iter.hasNext()) {
-            record.writeNodeTypeDef((NodeTypeDef) iter.next());
+        int size = c.size();
+        if (!register) {
+            size |= NTREG_UNREGISTER;
+        record.writeInt(size);
+
+        Iterator iter = c.iterator();
+        while (iter.hasNext()) {
+            if (register) {
+                record.writeNodeTypeDef((NodeTypeDef) iter.next());
+            } else {
+                record.writeQName((QName) iter.next());
+            }
+        }
+    }
+
+    private static void write(Record record, NodeTypeDef ntDef)
+            throws JournalException {
+
+        record.writeChar('T');
+
+        int size = 1;
+        size |= NTREG_REREGISTER;
+        record.writeInt(size);
+
+        record.writeNodeTypeDef(ntDef);

INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS44 INS29 INS83 INS39 INS42 INS44 INS8 INS44 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS34 INS65 INS42 INS36 INS65 INS42 INS36 INS65 INS42 INS36 INS65 INS43 INS42 INS25 INS60 INS60 INS54 INS65 INS43 INS42 INS25 INS60 INS60 INS54 INS65 UPD42 INS39 INS42 INS65 INS65 INS43 INS42 INS25 INS54 UPD42 INS39 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS21 INS21 INS66 INS66 INS27 INS66 INS27 INS66 INS27 INS65 INS42 INS27 INS8 INS43 INS59 INS39 INS59 INS8 INS12 INS12 INS8 INS65 INS42 INS27 INS8 INS43 INS59 INS39 INS59 INS8 INS12 INS12 INS8 UPD42 UPD66 INS66 INS66 INS42 INS66 INS66 INS8 INS66 INS42 INS66 INS42 INS27 INS8 INS8 INS12 INS12 INS39 INS59 INS38 INS8 INS8 INS42 INS42 INS32 INS39 INS59 INS7 INS32 INS32 INS34 INS34 INS34 INS34 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS33 INS42 INS9 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS25 INS42 INS42 INS21 INS41 INS42 INS42 INS33 INS42 INS9 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS25 INS25 INS42 INS33 INS60 INS21 INS41 INS21 INS44 INS8 INS44 INS8 INS42 INS32 INS42 INS21 MOV42 INS25 INS42 INS42 INS13 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS32 INS32 INS32 INS32 INS7 INS43 INS42 INS60 INS21 INS43 INS42 INS60 INS21 INS27 INS8 INS32 INS7 INS32 INS32 INS32 INS32 INS32 INS7 INS43 INS42 INS60 INS21 INS43 INS42 INS60 INS21 INS27 INS8 INS42 INS8 INS8 INS43 INS59 INS32 INS32 INS43 INS42 INS60 INS21 INS43 INS42 INS60 INS21 INS42 INS42 INS7 UPD42 INS42 MOV8 INS8 INS9 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS38 INS27 INS21 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS9 INS42 INS42 INS13 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS38 INS27 INS21 MOV21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS60 INS21 INS50 INS39 INS59 INS7 INS42 INS49 MOV60 MOV24 INS21 INS10 INS49 INS21 INS10 INS49 INS60 INS24 INS21 INS10 INS49 INS53 INS42 INS27 INS42 INS38 INS42 MOV32 INS42 INS32 INS42 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS14 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS9 INS43 INS27 INS42 INS42 INS43 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL8 DEL21 DEL42 DEL32