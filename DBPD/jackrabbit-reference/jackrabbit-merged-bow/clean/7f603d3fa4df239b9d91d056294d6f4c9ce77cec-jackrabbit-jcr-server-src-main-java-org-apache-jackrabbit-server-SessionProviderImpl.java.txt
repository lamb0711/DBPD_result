JCR-3222: Allow servlet filters to specify custom session providers

Extend SessionProviderImpl to support custom session providers made available through an request attribute.

Export the org.apache.jackrabbit.server package to OSGi clients so they can implement the SessionProvider interface.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1236819 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
- * This Class implements a default session provider uses a credentials provider.
+ * This class implements a default session provider based on a given
+ * {@link CredentialsProvider credentials provider}. Additionally,
+ * since Jackrabbit 2.4, if another session provider is available as
+ * the "org.apache.jackrabbit.server.SessionProvider" request attribute,
+ * then that provider is asked first for a session before the default
+ * credential-based login mechanism is used.
+     * Map of sessions acquired from custom session providers looked up
+     * from request attributes. We need to keep track of such providers
+     * so we can route the {@link #releaseSession(Session)} call to the
+     * correct provider.
+     */
+    private final Map<Session, SessionProvider> externalSessions =
+            Collections.synchronizedMap(new HashMap<Session, SessionProvider>());
+
+    /**
-        Credentials creds = cp.getCredentials(request);
-        Session s;
-        if (creds == null) {
-            s = repository.login(workspace);
-        } else {
-            s = repository.login(creds, workspace);
+        Session s = null;
+
+        // JCR-3222: Check if a custom session provider is available as a
+        // request attribute. If one is available, ask it first for a session.
+        Object object = request.getAttribute(SessionProvider.class.getName());
+        if (object instanceof SessionProvider) {
+            SessionProvider provider = (SessionProvider) object;
+            s = provider.getSession(request, repository, workspace);
+            if (s != null) {
+                externalSessions.put(s, provider);
+            }
+        }
+
+        if (s == null) {
+            Credentials creds = cp.getCredentials(request);
+            if (creds == null) {
+                s = repository.login(workspace);
+            } else {
+                s = repository.login(creds, workspace);
+            }
-        session.logout();
+        // JCR-3222: If the session was acquired from a custom session
+        // provider, we need to ask that provider to release the session.
+        SessionProvider provider = externalSessions.remove(session);
+        if (provider != null) {
+            provider.releaseSession(session);
+        } else {
+            session.logout();
+        }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS29 INS83 INS83 INS74 INS59 INS8 UPD66 INS65 INS66 INS66 INS66 INS66 INS66 INS65 INS43 INS43 INS43 INS42 INS32 INS60 INS25 INS25 INS60 INS25 INS42 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS59 INS62 INS8 INS27 INS8 INS43 INS59 INS27 INS8 MOV8 INS68 INS74 INS42 INS33 INS42 INS42 INS32 INS42 INS43 INS60 INS21 INS25 INS42 INS33 MOV60 MOV25 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS69 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS43 INS59 INS7 INS27 INS8 INS42 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42