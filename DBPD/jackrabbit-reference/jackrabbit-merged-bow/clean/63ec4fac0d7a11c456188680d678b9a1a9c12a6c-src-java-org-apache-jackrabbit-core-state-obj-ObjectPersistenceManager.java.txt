redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-public class ObjectPersistenceManager implements BLOBStore, PersistenceManager {
+public class ObjectPersistenceManager extends AbstractPersistenceManager
+        implements BLOBStore {
-     * @see #deserialize(PersistentNodeState, InputStream)
+     * @see #deserialize(NodeState, InputStream)
-    public static void serialize(PersistentNodeState state, OutputStream stream)
+    public static void serialize(NodeState state, OutputStream stream)
-     * @see #serialize(PersistentNodeState, OutputStream)
+     * @see #serialize(NodeState, OutputStream)
-    public static void deserialize(PersistentNodeState state, InputStream stream)
+    public static void deserialize(NodeState state, InputStream stream)
-     * @see #deserialize(PersistentPropertyState, InputStream, BLOBStore)
+     * @see #deserialize(PropertyState, InputStream, BLOBStore)
-    public static void serialize(PersistentPropertyState state,
+    public static void serialize(PropertyState state,
-     * @see #serialize(PersistentPropertyState, OutputStream, BLOBStore)
+     * @see #serialize(PropertyState, OutputStream, BLOBStore)
-    public static void deserialize(PersistentPropertyState state,
+    public static void deserialize(PropertyState state,
-     * @see PersistenceManager#load(PersistentNodeState)
+     * @see PersistenceManager#load
-    public synchronized void load(PersistentNodeState state)
+    public synchronized NodeState load(String uuid)
-        String nodeFilePath = buildNodeFilePath(state.getUUID());
+        String nodeFilePath = buildNodeFilePath(uuid);
-                throw new NoSuchItemStateException(state.getId().toString());
+                throw new NoSuchItemStateException(nodeFilePath);
-            String msg = "failed to read node state: " + state.getId();
+            String msg = "failed to read node state: " + nodeFilePath;
+                NodeState state = createNew(uuid, null, null);
-                return;
+                return state;
-                String msg = "failed to read node state: " + state.getId();
+                String msg = "failed to read node state: " + uuid;
-            String msg = "failed to read node state: " + state.getId();
+            String msg = "failed to read node state: " + nodeFilePath;
-     * @see PersistenceManager#load(PersistentPropertyState)
+     * @see PersistenceManager#load
-    public synchronized void load(PersistentPropertyState state)
+    public synchronized PropertyState load(QName name, String parentUUID)
-        String propFilePath = buildPropFilePath(state.getParentUUID(), state.getName());
+        String propFilePath = buildPropFilePath(parentUUID, name);
-                throw new NoSuchItemStateException(state.getId().toString());
+                throw new NoSuchItemStateException(propFilePath);
-            String msg = "failed to read property state: " + state.getId();
+            String msg = "failed to read property state: " + propFilePath;
+                PropertyState state = createNew(name, parentUUID);
-                return;
+                return state;
-            String msg = "failed to read property state: " + state.getId();
+            String msg = "failed to read property state: " + propFilePath;
-     * @see PersistenceManager#store
+     * @see PersistenceManager#load
-    public synchronized void store(PersistentNodeState state) throws ItemStateException {
+    public synchronized NodeReferences load(NodeId targetId)
+            throws NoSuchItemStateException, ItemStateException {
+        if (!initialized) {
+            throw new IllegalStateException("not initialized");
+        }
+
+        String refsFilePath = buildNodeReferencesFilePath(targetId.getUUID());
+
+        try {
+            if (!itemStateFS.isFile(refsFilePath)) {
+                throw new NoSuchItemStateException(targetId.toString());
+            }
+        } catch (FileSystemException fse) {
+            String msg = "failed to load references: " + targetId;
+            log.error(msg, fse);
+            throw new ItemStateException(msg, fse);
+        }
+
+        try {
+            BufferedInputStream in =
+                    new BufferedInputStream(itemStateFS.getInputStream(refsFilePath));
+            try {
+                NodeReferences refs = new NodeReferences(targetId);
+                deserialize(refs, in);
+                return refs;
+            } finally {
+                in.close();
+            }
+        } catch (Exception e) {
+            String msg = "failed to load references: " + targetId;
+            log.error(msg, e);
+            throw new ItemStateException(msg, e);
+        }
+    }
+
+    /**
+     * @see AbstractPersistenceManager#store
+     */
+    protected void store(NodeState state) throws ItemStateException {
-     * @see PersistenceManager#store
+     * @see AbstractPersistenceManager#store
-    public synchronized void store(PersistentPropertyState state) throws ItemStateException {
+    protected void store(PropertyState state) throws ItemStateException {
-     * @see PersistenceManager#destroy
+     * @see AbstractPersistenceManager#store
-    public synchronized void destroy(PersistentNodeState state) throws ItemStateException {
+    protected void store(NodeReferences refs) throws ItemStateException {
+        if (!initialized) {
+            throw new IllegalStateException("not initialized");
+        }
+
+        String uuid = refs.getTargetId().getUUID();
+        String refsFilePath = buildNodeReferencesFilePath(uuid);
+        FileSystemResource refsFile = new FileSystemResource(itemStateFS, refsFilePath);
+        try {
+            refsFile.makeParentDirs();
+            OutputStream out = new BufferedOutputStream(refsFile.getOutputStream());
+            try {
+                serialize(refs, out);
+            } finally {
+                out.close();
+            }
+        } catch (Exception e) {
+            String msg = "failed to store references: " + uuid;
+            log.error(msg, e);
+            throw new ItemStateException(msg, e);
+        }
+    }
+
+    /**
+     * @see AbstractPersistenceManager#destroy
+     */
+    protected void destroy(NodeState state) throws ItemStateException {
-     * @see PersistenceManager#destroy
+     * @see AbstractPersistenceManager#destroy
-    public synchronized void destroy(PersistentPropertyState state) throws ItemStateException {
+    protected void destroy(PropertyState state) throws ItemStateException {
-     * @see PersistenceManager#load(NodeReferences)
+     * @see AbstractPersistenceManager#destroy
-    public synchronized void load(NodeReferences refs)
-            throws NoSuchItemStateException, ItemStateException {
-        if (!initialized) {
-            throw new IllegalStateException("not initialized");
-        }
-
-        String refsFilePath = buildNodeReferencesFilePath(refs.getTargetId().getUUID());
-
-        try {
-            if (!itemStateFS.isFile(refsFilePath)) {
-                throw new NoSuchItemStateException(refs.getTargetId().toString());
-            }
-        } catch (FileSystemException fse) {
-            String msg = "failed to load references: " + refs.getTargetId();
-            log.error(msg, fse);
-            throw new ItemStateException(msg, fse);
-        }
-
-        try {
-            BufferedInputStream in =
-                    new BufferedInputStream(itemStateFS.getInputStream(refsFilePath));
-            try {
-                deserialize(refs, in);
-                return;
-            } finally {
-                in.close();
-            }
-        } catch (Exception e) {
-            String msg = "failed to load references: " + refs.getTargetId();
-            log.error(msg, e);
-            throw new ItemStateException(msg, e);
-        }
-    }
-
-    /**
-     * @see PersistenceManager#store(NodeReferences)
-     */
-    public synchronized void store(NodeReferences refs) throws ItemStateException {
-        if (!initialized) {
-            throw new IllegalStateException("not initialized");
-        }
-
-        String uuid = refs.getTargetId().getUUID();
-        String refsFilePath = buildNodeReferencesFilePath(uuid);
-        FileSystemResource refsFile = new FileSystemResource(itemStateFS, refsFilePath);
-        try {
-            refsFile.makeParentDirs();
-            OutputStream out = new BufferedOutputStream(refsFile.getOutputStream());
-            try {
-                serialize(refs, out);
-            } finally {
-                out.close();
-            }
-        } catch (Exception e) {
-            String msg = "failed to store references: " + uuid;
-            log.error(msg, e);
-            throw new ItemStateException(msg, e);
-        }
-    }
-
-    /**
-     * @see PersistenceManager#destroy(NodeReferences)
-     */
-    public synchronized void destroy(NodeReferences refs) throws ItemStateException {
+    protected void destroy(NodeReferences refs) throws ItemStateException {

MOV43 MOV31 MOV31 UPD43 UPD42 INS43 INS43 INS44 MOV43 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD43 UPD43 UPD43 UPD43 INS42 UPD43 UPD42 INS42 UPD43 UPD42 INS43 INS42 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 INS67 UPD42 INS67 UPD42 INS42 INS67 UPD42 MOV43 UPD42 UPD42 INS67 UPD42 UPD42 INS67 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD43 UPD43 UPD43 UPD43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS60 INS60 UPD42 MOV42 INS60 MOV43 INS43 INS59 INS42 INS43 INS59 INS42 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS33 INS33 INS42 INS42 INS42 UPD42 MOV42 MOV43 INS42 INS42 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL39 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL39 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL69 DEL68 DEL39 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL83 DEL42 DEL42 DEL69 DEL68 DEL83 DEL83 DEL83 DEL42 DEL42 DEL69 DEL68 DEL83