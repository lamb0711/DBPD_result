JCR-2715: Improved join query performance

Inline LuceneQueryFactoryImpl into LuceneQueryFactory to simplify things since it's the only implementation of the interface.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1024259 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.RepositoryException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import javax.jcr.RepositoryException;
+import javax.jcr.Value;
+import javax.jcr.nodetype.NodeType;
+import javax.jcr.nodetype.NodeTypeIterator;
+import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.query.InvalidQueryException;
+import javax.jcr.query.qom.Literal;
+import javax.jcr.query.qom.StaticOperand;
+
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.queryParser.ParseException;
+import org.apache.lucene.queryParser.QueryParser;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.jackrabbit.core.HierarchyManager;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.commons.query.qom.BindVariableValueImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.DefaultQOMTreeVisitor;
+import org.apache.jackrabbit.spi.commons.query.qom.JoinConditionImpl;
- * <code>LuceneQueryFactory</code> implements a factory that creates lucene
- * queries from given QOM elements.
+ * Factory that creates Lucene queries from QOM elements.
-public interface LuceneQueryFactory {
+public class LuceneQueryFactory {
+
+    /**
+     * Session of the user executing this query
+     */
+    private final SessionImpl session;
+
+    /**
+     * The hierarchy manager.
+     */
+    private final HierarchyManager hmgr;
+
+    /**
+     * Namespace mappings to internal prefixes
+     */
+    private final NamespaceMappings nsMappings;
+
+    /**
+     * NamePathResolver to map namespace mappings to internal prefixes
+     */
+    private final NamePathResolver npResolver;
+
+    /**
+     * The analyzer instance to use for contains function query parsing
+     */
+    private final Analyzer analyzer;
+
+    /**
+     * The synonym provider or <code>null</code> if none is configured.
+     */
+    private final SynonymProvider synonymProvider;
+
+    /**
+     * The index format version.
+     */
+    private final IndexFormatVersion version;
+
+    /**
+     * The Bind Variable values.
+     */
+    private final Map<Name, Value> bindVariables;
+
+    /**
+     * Creates a new lucene query factory.
+     *
+     * @param session         the session that executes the query.
+     * @param scs             the sort comparator source of the index.
+     * @param hmgr            the hierarchy manager of the workspace.
+     * @param nsMappings      the index internal namespace mappings.
+     * @param analyzer        the analyzer of the index.
+     * @param synonymProvider the synonym provider of the index.
+     * @param version         the version of the index format.
+     * @param bindVariables   the bind variable values of the query
+     */
+    public LuceneQueryFactory(
+            SessionImpl session, HierarchyManager hmgr,
+            NamespaceMappings nsMappings, Analyzer analyzer,
+            SynonymProvider synonymProvider, IndexFormatVersion version,
+            Map<Name, Value> bindVariables) {
+        this.session = session;
+        this.hmgr = hmgr;
+        this.nsMappings = nsMappings;
+        this.analyzer = analyzer;
+        this.synonymProvider = synonymProvider;
+        this.version = version;
+        this.npResolver = NamePathResolverImpl.create(nsMappings);
+        this.bindVariables = bindVariables;
+    }
-    public Query create(SelectorImpl selector) throws RepositoryException;
+    public Query create(SelectorImpl selector) throws RepositoryException {
+        List<Term> terms = new ArrayList<Term>();
+        String mixinTypesField = npResolver.getJCRName(NameConstants.JCR_MIXINTYPES);
+        String primaryTypeField = npResolver.getJCRName(NameConstants.JCR_PRIMARYTYPE);
+
+        NodeTypeManager ntMgr = session.getWorkspace().getNodeTypeManager();
+        NodeType base = null;
+        try {
+            base = ntMgr.getNodeType(session.getJCRName(selector.getNodeTypeQName()));
+        } catch (RepositoryException e) {
+            // node type does not exist
+        }
+
+        if (base != null && base.isMixin()) {
+            // search for nodes where jcr:mixinTypes is set to this mixin
+            Term t = new Term(FieldNames.PROPERTIES,
+                    FieldNames.createNamedValue(mixinTypesField,
+                            npResolver.getJCRName(selector.getNodeTypeQName())));
+            terms.add(t);
+        } else {
+            // search for nodes where jcr:primaryType is set to this type
+            Term t = new Term(FieldNames.PROPERTIES,
+                    FieldNames.createNamedValue(primaryTypeField,
+                            npResolver.getJCRName(selector.getNodeTypeQName())));
+            terms.add(t);
+        }
+
+        // now search for all node types that are derived from base
+        if (base != null) {
+            NodeTypeIterator allTypes = ntMgr.getAllNodeTypes();
+            while (allTypes.hasNext()) {
+                NodeType nt = allTypes.nextNodeType();
+                NodeType[] superTypes = nt.getSupertypes();
+                if (Arrays.asList(superTypes).contains(base)) {
+                    Name n = session.getQName(nt.getName());
+                    String ntName = nsMappings.translateName(n);
+                    Term t;
+                    if (nt.isMixin()) {
+                        // search on jcr:mixinTypes
+                        t = new Term(FieldNames.PROPERTIES,
+                                FieldNames.createNamedValue(mixinTypesField, ntName));
+                    } else {
+                        // search on jcr:primaryType
+                        t = new Term(FieldNames.PROPERTIES,
+                                FieldNames.createNamedValue(primaryTypeField, ntName));
+                    }
+                    terms.add(t);
+                }
+            }
+        }
+        Query q;
+        if (terms.size() == 1) {
+            q = new JackrabbitTermQuery(terms.get(0));
+        } else {
+            BooleanQuery b = new BooleanQuery();
+            for (Term term : terms) {
+                b.add(new JackrabbitTermQuery(term), BooleanClause.Occur.SHOULD);
+            }
+            q = b;
+        }
+        return q;
+    }
-    public Query create(FullTextSearchImpl constraint) throws RepositoryException;
+    public Query create(FullTextSearchImpl fts) throws RepositoryException {
+        String fieldname;
+        if (fts.getPropertyName() == null) {
+            // fulltext on node
+            fieldname = FieldNames.FULLTEXT;
+        } else {
+            // final path element is a property name
+            Name propName = fts.getPropertyQName();
+            StringBuffer tmp = new StringBuffer();
+            tmp.append(nsMappings.getPrefix(propName.getNamespaceURI()));
+            tmp.append(":").append(FieldNames.FULLTEXT_PREFIX);
+            tmp.append(propName.getLocalName());
+            fieldname = tmp.toString();
+        }
+        QueryParser parser = new JackrabbitQueryParser(
+                fieldname, analyzer, synonymProvider);
+        try {
+            StaticOperand expr = fts.getFullTextSearchExpression();
+            if (expr instanceof Literal) {
+                return parser.parse(
+                        ((Literal) expr).getLiteralValue().getString());
+            } else if (expr instanceof BindVariableValueImpl) {
+                Value value = this.bindVariables.get(
+                        ((BindVariableValueImpl) expr).getBindVariableQName());
+                if (value == null) {
+                    throw new InvalidQueryException("Bind variable not bound");
+                }
+                return parser.parse(value.getString());
+            } else {
+                throw new RepositoryException(
+                        "Unknown static operand type: " + expr);
+            }
+        } catch (ParseException e) {
+            throw new RepositoryException(e);
+        }
+    }
-    public Query create(PropertyExistenceImpl constraint) throws RepositoryException;
+    public Query create(PropertyExistenceImpl prop) throws RepositoryException {
+        String propName = npResolver.getJCRName(prop.getPropertyQName());
+        return Util.createMatchAllQuery(propName, version);
+    }
-    public MultiColumnQuery create(SourceImpl source) throws RepositoryException;
+    public MultiColumnQuery create(SourceImpl source) throws RepositoryException {
+        // source is either selector or join
+        try {
+            return (MultiColumnQuery) source.accept(new DefaultQOMTreeVisitor() {
+                public Object visit(JoinImpl node, Object data) throws Exception {
+                    return create(node);
+                }
+
+                public Object visit(SelectorImpl node, Object data) throws Exception {
+                    return MultiColumnQueryAdapter.adapt(
+                            create(node), node.getSelectorQName());
+                }
+            }, null);
+        } catch (RepositoryException e) {
+            throw e;
+        } catch (Exception e) {
+            throw new RepositoryException(e);
+        }
+    }
-    public MultiColumnQuery create(JoinImpl join) throws RepositoryException;
+    public MultiColumnQuery create(JoinImpl join) throws RepositoryException {
+        MultiColumnQuery left = create((SourceImpl) join.getLeft());
+        MultiColumnQuery right = create((SourceImpl) join.getRight());
+        return new JoinQuery(left, right, join.getJoinTypeInstance(),
+                (JoinConditionImpl) join.getJoinCondition(), nsMappings, hmgr);
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS74 INS59 INS29 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 MOV29 MOV43 MOV44 MOV43 INS8 MOV29 MOV43 MOV44 MOV43 INS8 INS8 MOV29 INS83 MOV43 INS42 MOV44 MOV43 INS8 MOV29 INS83 MOV43 INS42 MOV44 MOV43 INS8 UPD66 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS43 INS43 INS43 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS60 INS60 INS60 INS54 INS25 INS25 INS60 INS25 INS41 UPD42 INS60 INS25 INS60 INS54 UPD42 INS60 INS41 INS54 INS60 INS60 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS74 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS27 INS8 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS42 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS8 INS12 INS12 INS43 INS59 INS43 INS59 INS14 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS32 INS22 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS27 INS32 INS60 INS21 INS60 INS21 INS42 INS33 INS60 INS61 INS42 INS42 INS32 INS34 INS21 INS60 INS70 INS21 INS42 INS42 INS32 INS33 INS21 INS60 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS14 INS60 INS25 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS41 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS11 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS74 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS42 INS7 INS43 INS42 INS42 INS33 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS8 INS42 INS42 INS7 INS43 INS59 INS44 INS42 INS8 INS7 INS42 INS42 INS7 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS7 INS43 INS42 INS42 INS42 INS43 INS59 INS62 INS8 INS25 INS43 INS42 INS53 INS42 INS42 INS32 INS11 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS11 INS42 INS11 INS42 INS42 INS42 INS43 INS32 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS41 INS62 INS8 INS8 INS42 INS14 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS14 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS40 INS32 INS43 INS40 INS32 INS42 INS42 INS43 INS59 INS5 INS59 INS32 INS8 INS43 INS32 INS43 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS60 INS25 INS41 INS53 INS43 INS42 INS42 INS42 INS42 INS14 INS33 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS32 INS42 INS42 INS60 INS60 INS60 INS25 INS21 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS14 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS32 INS14 INS42 INS43 INS1 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS43 INS27 INS42 INS31 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS36 INS42 INS22 INS42 INS32 INS14 INS42 INS42 INS42 INS45 INS42 MOV83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS7 INS11 INS52 INS42 INS36 INS42 INS43 INS45 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS42 INS14 INS42 INS14 INS43 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS40 INS32 INS43 INS40 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL42 DEL42 DEL31