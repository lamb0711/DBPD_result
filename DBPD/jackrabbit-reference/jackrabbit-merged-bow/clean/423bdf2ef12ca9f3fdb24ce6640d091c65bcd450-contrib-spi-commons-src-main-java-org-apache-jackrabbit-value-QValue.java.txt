work in progress

- QName.create: only partial check for 'null' value
- QName.equals: fixed for values of type DATE
- QName.equals: also compare type

TODO: check hashCode() again.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@483124 13f79535-47bb-0310-9956-ffa450edef68

-        return new QValue(value);
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        return new QValue(value, PropertyType.STRING);
-            ret[i] = new QValue(values[i]);
+            ret[i] = create(values[i]);
-                return new QValue(value, true);
+                return new QValue(value, PropertyType.REFERENCE);
-                return new QValue(value);
+                return new QValue(value, PropertyType.STRING);
-        return new QValue(value);
+        return new QValue(ISO8601.format(value), PropertyType.DATE);
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
-            
+
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
-            ret[i] = new QValue(values[i]);
+            ret[i] = create(values[i]);
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
-        if (type == PropertyType.DATE) {
-            return ISO8601.format((Calendar) val);
-        } else if (type == PropertyType.BINARY) {
+        if (type == PropertyType.BINARY) {
-                return new QValue((Calendar) val);
+                return new QValue((String) val, PropertyType.DATE);
-                return new QValue((String) val, true);
+                return new QValue((String) val, PropertyType.REFERENCE);
-                return new QValue((String) val);
+                return new QValue((String) val, PropertyType.STRING);
-        if (type == PropertyType.DATE) {
-            return ISO8601.format((Calendar) val);
-        } else {
-            return val.toString();
-        }
+        return val.toString();
-            return val.equals(other.val);
+            return val.equals(other.val) && type == other.type;
-    //-------------------------------------------------------< implementation >
-    private QValue(String value) {
+    //-----------------------------------------------------< implementation >---
+    private QValue(String value, int type) {
-        type = PropertyType.STRING;
-    }
-
-    private QValue(String value, boolean isReference) {
-        val = value;
-        type = (isReference) ? PropertyType.REFERENCE : PropertyType.STRING;
+        this.type = type;
-        val = value;
+        val = ISO8601.format(value);
-        val = (value == null) ? null : value.toString();
+        val = value.toString();
-         *
-         * @see #delete()
-         * @see #delete(boolean)
-         * Deletes the persistent resource backing this <code>BLOBFileValue</code>.
-         *
-         * @param pruneEmptyParentDirs if <code>true</code>, empty parent directories
-         *                             will automatically be deleted
-         */
-        private void delete(boolean pruneEmptyParentDirs) {
-            if (file != null) {
-                // this instance is backed by a 'real' file
-                file.delete();
-                if (pruneEmptyParentDirs) {
-                    // prune empty parent directories
-                    File parent = file.getParentFile();
-                    while (parent != null && parent.delete()) {
-                        parent = parent.getParentFile();
-                    }
-                }
-            } else {
-                // this instance is backed by an in-memory buffer
-                buffer = EMPTY_BYTE_ARRAY;
-            }
-        }
-
-        /**
-}
+}

MOV8 MOV8 MOV8 MOV8 MOV8 MOV8 INS25 INS41 INS25 INS25 INS25 INS25 INS25 INS25 INS25 MOV25 MOV41 MOV41 UPD39 UPD42 MOV21 INS21 INS27 INS8 INS14 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS7 INS42 INS33 INS53 MOV43 MOV42 INS40 MOV43 INS32 INS40 INS42 INS33 INS53 INS42 INS33 INS53 INS42 INS33 INS53 INS42 INS33 INS53 INS42 INS33 INS53 INS42 INS33 INS53 INS42 INS33 INS53 INS22 INS42 INS42 INS32 MOV32 INS14 INS40 INS40 INS42 INS42 INS42 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS40 INS40 INS40 INS27 INS52 INS42 INS42 INS42 INS42 UPD43 MOV43 INS45 INS32 INS43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 INS32 INS43 INS45 INS43 INS45 UPD43 MOV32 INS27 UPD42 INS42 MOV2 INS42 INS42 INS42 INS42 INS42 INS42 MOV2 INS42 INS42 UPD42 INS42 INS40 DEL14 DEL41 DEL14 DEL9 DEL42 DEL14 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL41 DEL8 DEL25 DEL9 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL41 DEL8 DEL25 DEL8 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL36 DEL40 DEL40 DEL16 DEL42 DEL33 DEL27 DEL36 DEL33 DEL16 DEL42 DEL68 DEL65 DEL42 DEL39 DEL69 DEL68 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8 DEL25 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31