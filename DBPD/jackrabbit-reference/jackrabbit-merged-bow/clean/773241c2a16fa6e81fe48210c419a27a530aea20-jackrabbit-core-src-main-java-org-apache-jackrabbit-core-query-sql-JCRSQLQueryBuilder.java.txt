JCR-1066: Exclude system index for queries that restrict the result set to nodetypes not availble in the "jcr:system" subtree

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@570095 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.QueryNodeFactory;
-
-    private final AndQueryNode constraintNode = new AndQueryNode(null);
+    private final AndQueryNode constraintNode;
+     * The query node factory.
+     */
+    private final QueryNodeFactory factory;
+
+    /**
+     * @param factory   the query node factory.
-    private JCRSQLQueryBuilder(ASTQuery statement, NamespaceResolver resolver) {
+    private JCRSQLQueryBuilder(ASTQuery statement,
+                               NamespaceResolver resolver,
+                               QueryNodeFactory factory) {
+        this.factory = factory;
+        this.constraintNode =  factory.createAndQueryNode(null);
-     * Creates a <code>QueryNode</code> tree from a SQL <code>statement</code>.
+     * Creates a <code>QueryNode</code> tree from a SQL <code>statement</code>
+     * using the passed query node <code>factory</code>.
-    public static QueryRootNode createQuery(String statement, NamespaceResolver resolver)
+    public static QueryRootNode createQuery(String statement,
+                                            NamespaceResolver resolver,
+                                            QueryNodeFactory factory)
-                builder = new JCRSQLQueryBuilder(parser.Query(), resolver);
+                builder = new JCRSQLQueryBuilder(parser.Query(), resolver, factory);
-        root = new QueryRootNode();
-        root.setLocationNode(new PathQueryNode(root));
+        root = factory.createQueryRootNode();
+        root.setLocationNode(factory.createPathQueryNode(root));
-            pathNode.addPathStep(new LocationStepQueryNode(pathNode, null, true));
+            LocationStepQueryNode step = factory.createLocationStepQueryNode(pathNode);
+            step.setNameTest(null);
+            step.setIncludeDescendants(true);
+            pathNode.addPathStep(step);
-                LocationStepQueryNode step = new LocationStepQueryNode(pathNode, steps[i].getNameTest(), steps[i].getIncludeDescendants());
+                LocationStepQueryNode step = factory.createLocationStepQueryNode(pathNode);
+                step.setNameTest(steps[i].getNameTest());
+                step.setIncludeDescendants(steps[i].getIncludeDescendants());
-                    = new NodeTypeQueryNode(steps[steps.length - 1], nodeTypeName);
+                    = factory.createNodeTypeQueryNode(steps[steps.length - 1], nodeTypeName);
-                AndQueryNode between = new AndQueryNode(parent);
+                AndQueryNode between = factory.createAndQueryNode(parent);
-                OrQueryNode in = new OrQueryNode(parent);
+                OrQueryNode in = factory.createOrQueryNode(parent);
-        OrQueryNode orQuery = new OrQueryNode(parent);
+        OrQueryNode orQuery = factory.createOrQueryNode(parent);
-        AndQueryNode andQuery = new AndQueryNode(parent);
+        AndQueryNode andQuery = factory.createAndQueryNode(parent);
-        NotQueryNode notQuery = new NotQueryNode(parent);
+        NotQueryNode notQuery = factory.createNotQueryNode(parent);
-        OrderQueryNode order = new OrderQueryNode(root);
+        OrderQueryNode order = factory.createOrderQueryNode(root);
-            parent.addOperand(new TextsearchQueryNode(parent, node.getQuery(), relPath, true));
+            TextsearchQueryNode tsNode = factory.createTextsearchQueryNode(parent, node.getQuery());
+            tsNode.setRelativePath(relPath);
+            tsNode.setReferencesProperty(true);
+            parent.addOperand(tsNode);
-        parent.addOperand(new PropertyFunctionQueryNode(parent, PropertyFunctionQueryNode.LOWER_CASE));
+        parent.addOperand(factory.createPropertyFunctionQueryNode(parent, PropertyFunctionQueryNode.LOWER_CASE));
-        parent.addOperand(new PropertyFunctionQueryNode(parent, PropertyFunctionQueryNode.UPPER_CASE));
+        parent.addOperand(factory.createPropertyFunctionQueryNode(parent, PropertyFunctionQueryNode.UPPER_CASE));
-                node = new RelationQueryNode(parent, relPath, date, operationType);
+                node = factory.createRelationQueryNode(parent, operationType);
+                node.setRelativePath(relPath);
+                node.setDateValue(date);
-                node = new RelationQueryNode(parent, relPath, d, operationType);
+                node = factory.createRelationQueryNode(parent, operationType);
+                node.setRelativePath(relPath);
+                node.setDoubleValue(d);
-                node = new RelationQueryNode(parent, relPath, l, operationType);
+                node = factory.createRelationQueryNode(parent, operationType);
+                node.setRelativePath(relPath);
+                node.setLongValue(l);
-                node = new RelationQueryNode(parent, relPath, stringValue, operationType);
+                node = factory.createRelationQueryNode(parent, operationType);
+                node.setRelativePath(relPath);
+                node.setStringValue(stringValue);
-                node = new RelationQueryNode(parent, relPath, c.getTime(), operationType);
+                node = factory.createRelationQueryNode(parent, operationType);
+                node.setRelativePath(relPath);
+                node.setDateValue(c.getTime());
-        MergingPathQueryNode pathNode = new MergingPathQueryNode(operation);
+        MergingPathQueryNode pathNode = new MergingPathQueryNode(operation,
+                factory.createPathQueryNode(null).getValidJcrSystemNodeTypeNames());
-            pathNode.addPathStep(new LocationStepQueryNode(pathNode));
+            pathNode.addPathStep(factory.createLocationStepQueryNode(pathNode));
-                    pathNode.addPathStep(new LocationStepQueryNode(pathNode));
+                    pathNode.addPathStep(factory.createLocationStepQueryNode(pathNode));
-                    pathNode.addPathStep(new LocationStepQueryNode(pathNode));
+                    pathNode.addPathStep(factory.createLocationStepQueryNode(pathNode));
-                LocationStepQueryNode step = new LocationStepQueryNode(pathNode, qName, descendant);
+                LocationStepQueryNode step = factory.createLocationStepQueryNode(pathNode);
+                step.setNameTest(qName);
+                step.setIncludeDescendants(descendant);
+         * @param validJcrSystemNodeTypeNames names of valid node types under
+         *        /jcr:system.
-        MergingPathQueryNode(int operation) {
-            super(null);
+        MergingPathQueryNode(int operation, List validJcrSystemNodeTypeNames) {
+            super(null, validJcrSystemNodeTypeNames);
-            MergingPathQueryNode compacted = new MergingPathQueryNode(QueryNode.TYPE_OR);
+            MergingPathQueryNode compacted = new MergingPathQueryNode(
+                    QueryNode.TYPE_OR, getValidJcrSystemNodeTypeNames());

INS26 INS40 INS23 INS23 MOV29 MOV83 MOV83 MOV43 INS59 INS29 INS83 INS83 INS43 INS59 INS44 INS44 MOV42 INS65 UPD42 MOV42 INS42 INS65 INS43 INS42 INS21 INS21 INS43 INS42 INS44 INS66 INS42 INS66 INS42 INS7 INS7 UPD66 INS66 INS42 MOV43 MOV43 MOV43 MOV43 MOV43 INS65 INS43 INS42 INS22 INS42 INS22 INS32 INS32 INS32 INS60 INS21 INS21 INS21 INS32 INS32 INS32 INS32 INS60 INS21 INS21 INS21 INS32 INS32 INS42 INS66 INS66 INS42 INS42 MOV43 INS52 INS42 INS52 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 MOV43 INS59 INS32 INS32 INS32 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 MOV43 INS32 INS42 INS32 UPD42 MOV42 INS42 INS33 INS42 INS42 INS9 INS42 INS42 INS42 INS21 INS21 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS21 INS21 INS32 INS42 INS32 INS60 INS21 INS21 MOV43 INS32 INS42 INS42 MOV42 MOV43 INS32 INS32 INS42 INS42 MOV2 INS42 MOV43 UPD42 MOV42 INS42 INS42 MOV32 INS32 INS32 INS21 INS21 INS42 INS42 INS33 INS42 INS42 INS42 MOV43 INS59 INS32 INS32 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 DEL43 DEL33 DEL14 DEL59 DEL23 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL33 DEL9 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL9 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL40 DEL14 DEL42 DEL43 DEL42 DEL40 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60