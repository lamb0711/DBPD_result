div

- get rid of rootId stored with ISM, HierarchyManagers etc.
- remove corresponding method with WorkspaceManager and WorkspaceImpl

jcr2spi/state/ItemState

- move parent field from Node/PropertyState to ItemState
- move idFactory field from NodeState to ItemState
- let PropertyState build its id instead of calling parentstate method.
- minor reordering of status related methods
- remove modCount and its usage

jcr2spi/state/ItemStateManager

- add method getRootNode()

jcr2spi/security/AccessManager

- replace ItemId by ItemState

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431352 13f79535-47bb-0310-9956-ffa450edef68

-    // DIFF JR: store root id. since 'CachingItemStateManager' not used any more
-    // TODO: TO-BE-FIXED. With SPI_ItemId rootId must not be stored separately
-    private NodeId rootId;
-
-     * @param rootId
-    public SessionItemStateManager(NodeId rootId,
-                                   UpdatableItemStateManager workspaceItemStateMgr,
+    public SessionItemStateManager(UpdatableItemStateManager workspaceItemStateMgr,
-        this.rootId = rootId;
-        hierMgr = new HierarchyManagerImpl(rootId, this, nsResolver);
+        hierMgr = new HierarchyManagerImpl(this, nsResolver);
+     * @see ItemStateManager#getRootState()
+     */
+    public NodeState getRootState() throws ItemStateException {
+        // TODO
+        return null;
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see ItemStateManager#getItemState(ItemId)
+     * @see ItemStateManager#hasItemState(ItemId)
+     * @see ItemStateManager#getNodeReferences(NodeId)
+     * @see ItemStateManager#hasNodeReferences(NodeId)
-     * @param state the root state of the cancel operation.
+     * @param itemState the root state of the cancel operation.
-    public void undo(ItemState state) throws ItemStateException {
-        if (state.getParent() == null) {
+    public void undo(ItemState itemState) throws ItemStateException {
+        if (itemState.getParent() == null) {
-        if (state.isTransient()) {
-            switch (state.getStatus()) {
+        if (itemState.isTransient()) {
+            switch (itemState.getStatus()) {
-                    changeLog.modified(state);
+                    changeLog.modified(itemState);
-                    log.debug("unexpected state status (" + state.getStatus() + ")");
+                    log.debug("unexpected state status (" + itemState.getStatus() + ")");
-        if (state.isNode()) {
-            NodeState nodeState = (NodeState)state;
+        if (itemState.isNode()) {
+            NodeState nodeState = (NodeState)itemState;
-                    depth = getHierarchyManager().getRelativeDepth(parent, state);
+                    depth = hierMgr.getRelativeDepth(parent, state);
-                new ZombieHierarchyManager(rootId,
-                        this,
-                        transientStateMgr.getAttic(),
-                        nsResolver);
+                new ZombieHierarchyManager(this, transientStateMgr.getAttic(), nsResolver);
-                        String msg = LogUtil.safeGetJCRPath(state, nsResolver, getHierarchyManager()) + ": cannot save a new item.";
+                        String msg = LogUtil.safeGetJCRPath(state, nsResolver, hierMgr) + ": cannot save a new item.";
-                        String msg = LogUtil.safeGetJCRPath(state, nsResolver, getHierarchyManager()) + ": the item cannot be saved because it has been modified externally.";
+                        String msg = LogUtil.safeGetJCRPath(state, nsResolver, hierMgr) + ": the item cannot be saved because it has been modified externally.";
-                        String msg = LogUtil.safeGetJCRPath(state, nsResolver, getHierarchyManager()) + ": the item cannot be saved because it has been deleted externally.";
+                        String msg = LogUtil.safeGetJCRPath(state, nsResolver, hierMgr) + ": the item cannot be saved because it has been deleted externally.";
-                        String msg = LogUtil.safeGetJCRPath(state, nsResolver, getHierarchyManager()) + ": the item cannot be saved; it seems to have been removed externally.";
+                        String msg = LogUtil.safeGetJCRPath(state, nsResolver, hierMgr) + ": the item cannot be saved; it seems to have been removed externally.";
-        // TODO: TO-BE-FIXED. Move with SPI id       
+        // TODO: TO-BE-FIXED. Move with SPI id
-        // now actually do unlink target state
-        targetState.setParent(null);

INS31 INS29 INS83 INS43 INS42 INS43 INS8 INS65 INS65 INS42 INS42 INS41 INS65 INS65 MOV65 INS65 MOV65 INS65 UPD42 INS65 INS68 INS33 INS68 INS68 INS68 INS68 UPD42 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 UPD42 UPD42 MOV8 MOV49 MOV49 INS43 INS43 MOV43 MOV43 UPD42 MOV43 INS42 INS42 UPD42 UPD42 MOV43 UPD42 MOV43 MOV43 UPD42 UPD45 UPD45 UPD45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL83 DEL42 DEL59 DEL23 DEL42 DEL65 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL32 DEL42 DEL42 DEL33 DEL32 DEL21