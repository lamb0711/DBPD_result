work in progress

- HierarchyManager: changes methods to take ItemState instead of ItemId
- HierarchyManager: remove log-utility methods (saveGetJCRPath)
- HierarchyManager: remove CachingHierachyManager. not used
- ItemManager: changes methods to take ItemState instead of ItemId
- ItemStateValidator: remove utility methods not related to validation
- new class LogUtil that provides static saveGetJCRPath methods previously
  present on HierarchyManager, ItemStateValidator
- NodeState: add method 'getPropertyEntries()'
- create interface ChildPropertyEntry
- let PropertyReference implement ChildPropertyEntry

TODO: query/NodeIteratorImpl needs to be fixed. 


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429652 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.util.LogUtil;
-import org.apache.jackrabbit.spi.PropertyId;
-import javax.jcr.Item;
-    // DIFF JR: QName.ROOT replaces the EMPTY_NAME QName defined in JR....
-
-    // TODO: TO-BE-FIXED. With SPI_ItemId rootId must not be stored separately    
+    // TODO: TO-BE-FIXED. With SPI_ItemId rootId must not be stored separately
-    public NamespaceResolver getNamespaceResolver() {
-        return nsResolver;
-    }
-
+     *
+     * @param state
+     * @return
+     */
+    protected NodeState getParentState(ItemState state) {
+        return state.getParent();
+    }
+
+    /**
-     * Resolve a path into an item id. Recursively invoked method that may be
-     * overridden by some subclass to either return cached responses or add
-     * response to cache.
-     *
-     * @param path full path of item to resolve
-     * @param id   intermediate item id
-     * @param next next path element index to resolve
-     * @return the id of the item denoted by <code>path</code>
-     */
-    protected ItemId resolvePath(Path path, ItemId id, int next)
-            throws RepositoryException {
-
-        try {
-            return resolvePath(path, getItemState(id), next);
-        } catch (NoSuchItemStateException e) {
-            String msg = "failed to retrieve state of intermediary node";
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
-        } catch (ItemStateException e) {
-            String msg = "failed to retrieve state of intermediary node";
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
-        }
-    }
-
-    /**
-     * Resolve a path into an item id. Recursively invoked method that may be
+     * Resolve a path into an item state. Recursively invoked method that may be
-     * @return the id of the item denoted by <code>path</code>
+     * @return the state of the item denoted by <code>path</code>
-    protected ItemId resolvePath(Path path, ItemState state, int next)
-            throws PathNotFoundException, ItemStateException {
+    protected ItemState resolvePath(Path path, ItemState state, int next)
+        throws PathNotFoundException, RepositoryException {
-            return state.getId();
+            return state;
-        ItemId childId;
+        ItemState childState;
-            childId = nodeEntry.getId();
+            try {
+                childState = nodeEntry.getNodeState();
+            } catch (ItemStateException e) {
+                // should never occur
+                throw new RepositoryException(e);
+            }
-            if (index > org.apache.jackrabbit.name.Path.INDEX_DEFAULT) {
+            if (index > Path.INDEX_DEFAULT) {
-                throw new PathNotFoundException(safeGetJCRPath(path));
+                throw new PathNotFoundException(LogUtil.safeGetJCRPath(path, nsResolver));
-                throw new PathNotFoundException(safeGetJCRPath(path));
+                throw new PathNotFoundException(LogUtil.safeGetJCRPath(path, nsResolver));
-            childId = parentState.getPropertyState(name).getId();
+            try {
+                childState = parentState.getPropertyState(name);
+            } catch (ItemStateException e) {
+                // should never occur
+                throw new RepositoryException(e);
+            }
-            throw new PathNotFoundException(safeGetJCRPath(path));
+            throw new PathNotFoundException(LogUtil.safeGetJCRPath(path, nsResolver));
-        return resolvePath(path, getItemState(childId), next + 1);
+        return resolvePath(path, childState, next + 1);
-    //-----------------------------------------------------< HierarchyManager >
+    //---------------------------------------------------< HierarchyManager >---
-     * {@inheritDoc}
+     * @see HierarchyManager#getItemState(Path)
-    public ItemId getItemId(Item item) throws PathNotFoundException, RepositoryException {
-        if (item instanceof ItemImpl) {
-            return ((ItemImpl)item).getId();
-        } else {
-            try {
-                return getItemId(PathFormat.parse(item.getPath(), nsResolver));
-            } catch (MalformedPathException e) {
-                // should not occur.
-                throw new RepositoryException(e);
+    public ItemState getItemState(Path qPath) throws PathNotFoundException, RepositoryException {
+        try {
+            ItemState rootState = itemStateManager.getItemState(rootNodeId);
+            // shortcut
+            if (qPath.denotesRoot()) {
+                return rootState;
+
+            if (!qPath.isCanonical()) {
+                String msg = "path is not canonical";
+                log.debug(msg);
+                throw new RepositoryException(msg);
+            }
+
+            return resolvePath(qPath, rootState, 1);
+        } catch (ItemStateException e) {
+            // should never occur
+            throw new RepositoryException(e);
-     * {@inheritDoc}
+     * @see HierarchyManager#getQPath(ItemState)
-    public ItemId getItemId(Path qPath)
-            throws PathNotFoundException, RepositoryException {
-        // shortcut
-        if (qPath.denotesRoot()) {
-            return rootNodeId;
-        }
-
-        if (!qPath.isCanonical()) {
-            String msg = "path is not canonical";
-            log.debug(msg);
-            throw new RepositoryException(msg);
-        }
-
-        return resolvePath(qPath, rootNodeId, 1);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Path getQPath(ItemId id)
-            throws ItemNotFoundException, RepositoryException {
-        // shortcut
-        if (id.equals(rootNodeId)) {
-            return Path.ROOT;
-        }
+    public Path getQPath(ItemState itemState) throws ItemNotFoundException, RepositoryException {
-
-            buildPath(builder, getItemState(id));
+            buildPath(builder, itemState);
-        } catch (NoSuchItemStateException nsise) {
-            String msg = "failed to build path of " + id;
+        } catch (NoSuchItemStateException e) {
+            String msg = "failed to build path of " + itemState.getId();
-            throw new ItemNotFoundException(msg, nsise);
-        } catch (ItemStateException ise) {
-            String msg = "failed to build path of " + id;
+            throw new ItemNotFoundException(msg, e);
+        } catch (ItemStateException e) {
+            String msg = "failed to build path of " + itemState.getId();
-            throw new RepositoryException(msg, ise);
+            throw new RepositoryException(msg, e);
-            String msg = "failed to build path of " + id;
+            String msg = "failed to build path of " + itemState.getId();
-     * {@inheritDoc}
+     * @see HierarchyManager#getQName(ItemState)
-    public QName getQName(ItemId itemId)
+    public QName getQName(ItemState itemState)
-        if (itemId.denotesNode()) {
-            NodeId nodeId = (NodeId) itemId;
-            NodeState parentState;
-            try {
-                NodeState nodeState = (NodeState) getItemState(nodeId);
-                NodeId parentId= getParentId(nodeState);
-                if (parentId == null) {
-                    // this is the root or an orphaned node
-                    return QName.ROOT;
-                }
-                parentState = (NodeState) getItemState(parentId);
-            } catch (NoSuchItemStateException nsis) {
-                String msg = "failed to resolve name of " + nodeId;
-                log.debug(msg);
-                throw new ItemNotFoundException(nodeId.toString());
-            } catch (ItemStateException ise) {
-                String msg = "failed to resolve name of " + nodeId;
-                log.debug(msg);
-                throw new RepositoryException(msg, ise);
+        if (itemState.isNode()) {
+            NodeState parentState = itemState.getParent();
+            if (parentState == null) {
+                // shortcut. the given state represents the root or an orphaned node
+                return QName.ROOT;
-            ChildNodeEntry entry =
-                    getChildNodeEntry(parentState, nodeId);
+            NodeId nodeId = ((NodeState)itemState).getNodeId();
+            ChildNodeEntry entry = getChildNodeEntry(parentState, nodeId);
-            return ((PropertyId) itemId).getQName();
+            return ((PropertyState)itemState).getQName();
-     * {@inheritDoc}
+     * @see HierarchyManager#getDepth(ItemState)
-    public int getDepth(ItemId id)
-            throws ItemNotFoundException, RepositoryException {
-        int depth = org.apache.jackrabbit.name.Path.ROOT_DEPTH;
-        // shortcut
-        if (id.equals(rootNodeId)) {
-            return depth;
+    public int getDepth(ItemState itemState) throws ItemNotFoundException, RepositoryException {
+        int depth = Path.ROOT_DEPTH;
+        NodeState parentState = getParentState(itemState);
+        while (parentState != null) {
+            depth++;
+            itemState = parentState;
+            parentState = getParentState(itemState);
-        try {
-            ItemState state = getItemState(id);
-            NodeId parentId = getParentId(state);
-            while (parentId != null) {
-                depth++;
-                state = getItemState(parentId);
-                parentId = getParentId(state);
-            }
-            return depth;
-        } catch (NoSuchItemStateException nsise) {
-            String msg = "failed to determine depth of " + id;
-            log.debug(msg);
-            throw new ItemNotFoundException(msg, nsise);
-        } catch (ItemStateException ise) {
-            String msg = "failed to determine depth of " + id;
-            log.debug(msg);
-            throw new RepositoryException(msg, ise);
-        }
+        return depth;
-
-    /**
-     * @see HierarchyManager#safeGetJCRPath(ItemId)
-     */
-    public String safeGetJCRPath(ItemId itemId) {
-        try {
-            return safeGetJCRPath(getQPath(itemId));
-        } catch (RepositoryException e) {
-            log.error("failed to convert " + itemId + " to JCR path.");
-            return itemId.toString();
-        }
-    }
-
-    /**
-     * @see HierarchyManager#safeGetJCRPath(Path)
-     */
-    public String safeGetJCRPath(Path qPath) {
-        try {
-            return PathFormat.format(qPath, nsResolver);
-        } catch (NoPrefixDeclaredException npde) {
-            log.error("failed to convert " + qPath + " to JCR path.");
-            // return string representation of internal path as a fallback
-            return qPath.toString();
-        }
-    }

MOV26 MOV31 UPD40 INS31 MOV43 INS42 INS8 UPD43 MOV43 UPD43 UPD42 INS8 INS29 MOV83 MOV43 MOV42 MOV44 MOV43 MOV43 MOV8 UPD43 UPD42 MOV41 UPD42 INS65 UPD42 INS54 INS65 UPD43 UPD42 INS65 UPD43 UPD42 INS65 MOV43 UPD42 MOV60 MOV61 MOV41 UPD42 UPD42 UPD66 UPD66 UPD43 INS8 INS68 MOV8 MOV12 INS68 UPD42 INS68 UPD42 INS68 MOV43 UPD42 MOV42 UPD42 UPD42 UPD42 MOV60 INS54 UPD42 MOV42 INS42 INS42 MOV69 INS60 INS44 INS42 INS42 INS69 MOV44 MOV44 INS42 INS42 INS69 UPD42 UPD42 MOV60 MOV25 MOV60 INS42 INS42 INS69 UPD40 UPD42 UPD42 INS42 INS8 INS12 INS54 INS43 INS59 INS43 INS42 INS43 MOV21 UPD42 MOV21 MOV53 INS43 MOV43 INS43 UPD42 UPD42 MOV21 MOV44 INS8 INS8 INS12 INS42 INS42 INS32 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 MOV43 MOV43 INS42 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS53 UPD40 MOV21 INS44 INS8 MOV43 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS36 UPD42 UPD42 UPD42 UPD42 INS14 INS43 INS42 INS53 INS42 MOV42 MOV42 INS42 INS32 INS32 INS32 INS11 UPD43 UPD42 UPD42 INS43 INS42 MOV43 UPD42 MOV32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 UPD42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL66 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL44 DEL8 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL42 DEL32 DEL8 DEL42 DEL32 DEL32 DEL42 DEL32 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31 DEL65 DEL65 DEL42 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL42 DEL43 DEL42 DEL44 DEL42 DEL65 DEL65 DEL29 DEL31 DEL65 DEL65 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL65 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31