JCR-474: Introduce 'SecurityConfig' for better extensability


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@418779 13f79535-47bb-0310-9956-ffa450edef68

-            "org.apache.jackrabbit.core.query.lucene.SearchIndex";
+            "com.day.crx.core.query.lucene.SearchIndex";
-        String appName = getAttribute(security, APP_NAME_ATTRIBUTE);
-        AccessManagerConfig amc = new AccessManagerConfig(
-                parseBeanConfig(security, ACCESS_MANAGER_ELEMENT));
-
-        // Optional login module
-        Element loginModule = getElement(security, LOGIN_MODULE_ELEMENT, false);
-
-        LoginModuleConfig lmc = null;
-        if (loginModule != null) {
-            lmc = new LoginModuleConfig(parseBeanConfig(security, LOGIN_MODULE_ELEMENT));
-        }
+        SecurityConfig securityConfig = parseSecurityConfig(security);
-        return new RepositoryConfig(home, appName, amc, lmc, fsc,
+        return new RepositoryConfig(home, securityConfig, fsc,
+     * Parses security configuration. Security configuration
+     * uses the following format:
+     * <pre>
+     *   &lt;Security appName="..."&gt;
+     *     &lt;AccessManager ...&gt;
+     *     &lt;LoginModule ... (optional)&gt;
+     *   &lt;/Security&gt;
+     * </pre>
+     * <p/>
+     * Both the <code>AccessManager</code> and <code>LoginModule</code>
+     * elements are {@link #parseBeanConfig(Element,String) bean configuration}
+     * elements.
+     * <p/>
+     * The login module is an optional feature of repository configuration.
+     *
+     * @param security the &lt;security> element.
+     * @return the security configuration.
+     * @throws ConfigurationException
+     */
+    public SecurityConfig parseSecurityConfig(Element security)
+            throws ConfigurationException {
+        String appName = getAttribute(security, APP_NAME_ATTRIBUTE);
+        AccessManagerConfig amc = parseAccessManagerConfig(security);
+        LoginModuleConfig lmc = parseLoginModuleConfig(security);
+        return new SecurityConfig(appName, amc, lmc);
+    }
+
+    /**
+     * Parses the access manager configuration.
+     *
+     * @param security the &lt;security> element.
+     * @return the access manager configuration.
+     * @throws ConfigurationException
+     */
+    public AccessManagerConfig parseAccessManagerConfig(Element security)
+            throws ConfigurationException {
+        return new AccessManagerConfig(
+                parseBeanConfig(security, ACCESS_MANAGER_ELEMENT));
+    }
+
+    /**
+     * Parses the login module configuration.
+     *
+     * @param security the &lt;security> element.
+     * @return the login module configuration.
+     * @throws ConfigurationException
+     */
+    public LoginModuleConfig parseLoginModuleConfig(Element security)
+            throws ConfigurationException {
+        // Optional login module
+        Element loginModule = getElement(security, LOGIN_MODULE_ELEMENT, false);
+
+        if (loginModule != null) {
+            return new LoginModuleConfig(parseBeanConfig(security, LOGIN_MODULE_ELEMENT));
+        } else {
+            return null;
+        }
+    }
+
+    /**

INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 MOV43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 UPD45 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 MOV60 INS60 INS60 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 MOV60 MOV25 INS43 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 MOV43 INS59 INS14 INS66 INS42 INS66 INS66 INS42 INS42 MOV14 INS66 INS42 INS66 INS66 INS42 INS42 INS8 INS42 UPD42 INS32 UPD42 INS68 INS66 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS41 INS41 INS42 INS42 INS42 INS69 INS69 INS42 INS42 INS42 INS42 INS42 MOV14 INS33 INS43 INS43 INS42 INS42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL7 DEL21