optimized performance of Item.save() if a large number of items 
were removed

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@202365 13f79535-47bb-0310-9956-ffa450edef68

-     * @param id
-     * @return
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
+     * Return an item state, given its item id.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
+     *
+     * @param id item id
+     * @return item state
+     * @throws NoSuchItemStateException if the item does not exist
+     * @throws ItemStateException       if an error occurs
+     * @see ZombieHierarchyManager#getItemState(ItemId)
-     * @param id
-     * @return
+     * Determines whether an item state for a given item id exists.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
+     *
+     * @param id item id
+     * @return <code>true</code> if an item state exists, otherwise
+     *         <code>false</code>
+     * @see ZombieHierarchyManager#hasItemState(ItemId)
+     * Returns the <code>parentUUID</code> of the given item.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
-     * @param state
-     * @return
+     * @param state item state
+     * @return <code>parentUUID</code> of the given item
+     * @see ZombieHierarchyManager#getParentUUID(ItemState)
+     * Returns the <code>ChildNodeEntry</code> of <code>parent</code> with the
+     * specified <code>uuid</code> or <code>null</code> if there's no such entry.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
-     * @param parent
-     * @return
+     * @param parent node state
+     * @param uuid   uuid of child node entry
+     * @return the <code>ChildNodeEntry</code> of <code>parent</code> with
+     *         the specified <code>uuid</code> or <code>null</code> if there's
+     *         no such entry.
+     * @see ZombieHierarchyManager#getChildNodeEntry(NodeState, String)
+     * Returns the <code>ChildNodeEntry</code> of <code>parent</code> with the
+     * specified <code>name</code> and <code>index</code> or <code>null</code>
+     * if there's no such entry.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
-     * @param parent
-     * @param name
-     * @param index
-     * @return
+     * @param parent node state
+     * @param name   name of child node entry
+     * @param index  name of child node entry
+     * @return the <code>ChildNodeEntry</code> of <code>parent</code> with
+     *         the specified <code>name</code> and <code>index</code> or
+     *         <code>null</code> if there's no such entry.
+     * @see ZombieHierarchyManager#getChildNodeEntry(NodeState, QName, int)
-     * @param id   item id
+     * @param id   intermediate item id
+     * @return the id of the item denoted by <code>path</code>
+     * @return the id of the item denoted by <code>path</code>
+        // shortcut
+        if (id.equals(rootNodeId)) {
+            return 0;
+        }
-            if (parentUUID != null) {
-                return getDepth(new NodeId(parentUUID)) + 1;
+            int depth = 0;
+            while (parentUUID != null) {
+                depth++;
+                state = getItemState(new NodeId(parentUUID));
+                parentUUID = getParentUUID(state);
-            return 0;
+            return depth;
+    public int getRelativeDepth(NodeId ancestorId, ItemId descendantId)
+            throws ItemNotFoundException, RepositoryException {
+        if (ancestorId.equals(descendantId)) {
+            return 0;
+        }
+        int depth = 1;
+        try {
+            ItemState state = getItemState(descendantId);
+            String parentUUID = getParentUUID(state);
+            while (parentUUID != null) {
+                if (parentUUID.equals(ancestorId.getUUID())) {
+                    return depth;
+                }
+                depth++;
+                state = getItemState(new NodeId(parentUUID));
+                parentUUID = getParentUUID(state);
+            }
+            // not an ancestor
+            return -1;
+        } catch (NoSuchItemStateException nsise) {
+            String msg = "failed to determine depth of " + descendantId
+                    + " relative to " + ancestorId;
+            log.debug(msg);
+            throw new ItemNotFoundException(msg, nsise);
+        } catch (ItemStateException ise) {
+            String msg = "failed to determine depth of " + descendantId
+                    + " relative to " + ancestorId;
+            log.debug(msg);
+            throw new RepositoryException(msg, ise);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+        if (nodeId.equals(itemId)) {
+            // can't be ancestor of self
+            return false;
+        }
-            if (parentUUID != null) {
+            while (parentUUID != null) {
-                return isAncestor(nodeId, new NodeId(parentUUID));
+                state = getItemState(new NodeId(parentUUID));
+                parentUUID = getParentUUID(state);
+            // not an ancestor

INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS25 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS60 INS54 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS68 INS66 INS66 INS66 INS66 INS66 INS66 INS68 INS66 INS66 INS66 INS66 INS66 INS68 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS68 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS68 UPD66 INS66 INS66 INS32 INS8 INS65 INS42 INS42 INS32 INS8 INS39 INS59 INS8 INS12 INS12 INS32 INS8 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS69 INS42 INS42 INS69 INS69 INS69 INS42 INS42 INS42 MOV41 INS60 INS61 INS41 INS42 INS42 INS42 INS41 INS42 INS34 INS60 INS60 INS61 INS41 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS41 INS61 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS39 INS39 INS59 MOV27 INS8 INS42 INS34 INS43 INS59 INS43 INS59 INS27 INS8 INS38 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS9 MOV27 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS21 INS21 INS21 INS34 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS21 INS21 INS37 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS8 INS37 INS7 INS7 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS7 INS7 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS32 INS41 INS42 INS42 MOV32 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS42 INS42 DEL34 DEL27 DEL41 DEL8 DEL25 DEL42 DEL41 DEL25