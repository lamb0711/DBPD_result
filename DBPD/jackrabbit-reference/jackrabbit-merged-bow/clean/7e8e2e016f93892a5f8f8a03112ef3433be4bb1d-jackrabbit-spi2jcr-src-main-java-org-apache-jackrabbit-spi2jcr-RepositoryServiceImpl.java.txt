JCR-1204: Redesign SPI observation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@592356 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Subscription;
-import java.util.IdentityHashMap;
+import java.util.Collection;
-     * Maps session info instances to {@link EventSubscription}s.
-     */
-    private final Map subscriptions = Collections.synchronizedMap(new IdentityHashMap());
-
-    /**
-        synchronized (sessionInfo) {
-            subscriptions.remove(sessionInfo);
-            getSessionInfoImpl(sessionInfo).getSession().logout();
+        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        for (Iterator it = sInfo.getSubscriptions().iterator(); it.hasNext(); ) {
+            EventSubscription s = (EventSubscription) it.next();
+            s.dispose();
+        sInfo.getSession().logout();
-        // make sure there is an event subscription for this session info
-        getSubscription(sessionInfo);
-
-    public EventBundle[] getEvents(SessionInfo sessionInfo,
-                                   long timeout,
-                                   EventFilter[] filters)
+    public Subscription createSubscription(SessionInfo sessionInfo,
+                                           EventFilter[] filters)
+            throws UnsupportedRepositoryOperationException, RepositoryException {
+        return getSessionInfoImpl(sessionInfo).createSubscription(idFactory, filters);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public EventBundle[] getEvents(Subscription subscription, long timeout)
-        return getSubscription(sessionInfo).getEventBundles(filters, timeout);
+        if (subscription instanceof EventSubscription) {
+            return ((EventSubscription) subscription).getEventBundles(timeout);
+        } else {
+            throw new RepositoryException("Unknown subscription implementation: "
+                    + subscription.getClass().getName());
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void updateEventFilters(Subscription subscription,
+                                   EventFilter[] filters)
+            throws RepositoryException {
+        getEventSubscription(subscription).setFilters(filters);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void dispose(Subscription subscription) throws RepositoryException {
+        getEventSubscription(subscription).dispose();
-    private EventSubscription getSubscription(SessionInfo sessionInfo)
-            throws RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        EventSubscription subscr;
-        synchronized (sInfo) {
-            subscr = (EventSubscription) subscriptions.get(sInfo);
-            if (subscr == null) {
-                subscr = new EventSubscription(idFactory, sInfo);
-                if (sInfo.getSession().isLive()) {
-                    ObservationManager obsMgr = sInfo.getSession().getWorkspace().getObservationManager();
-                    obsMgr.addEventListener(subscr, EventSubscription.ALL_EVENTS,
-                            "/", true, null, null, true);
-                }
-                subscriptions.put(sInfo, subscr);
-            }
-        }
-        return subscr;
-    }
-
+    private EventSubscription getEventSubscription(Subscription subscription)
+            throws RepositoryException {
+        if (subscription instanceof EventSubscription) {
+            return (EventSubscription) subscription;
+        } else {
+            throw new RepositoryException("Unknown Subscription implementation: "
+                    + subscription.getClass().getName());
+        }
+    }
+
-            EventSubscription subscr = (EventSubscription) subscriptions.get(sInfo);
-            if (subscr != null) {
+            Collection subscr = sInfo.getSubscriptions();
+            if (subscr.size() != 0) {
-                EventListener listener = subscr.getLocalEventListener();
-                obsMgr.addEventListener(listener, EventSubscription.ALL_EVENTS,
-                        "/", true, null, null, false);
+                List listeners = new ArrayList(subscr.size());
+                    for (Iterator it = subscr.iterator(); it.hasNext(); ) {
+                        EventSubscription s = (EventSubscription) it.next();
+                        EventListener listener = s.getLocalEventListener();
+                        listeners.add(listener);
+                        obsMgr.addEventListener(listener, EventSubscription.ALL_EVENTS,
+                                "/", true, null, null, false);
+                    }
-                    obsMgr.removeEventListener(listener);
+                    for (Iterator it = listeners.iterator(); it.hasNext(); ) {
+                        try {
+                            obsMgr.removeEventListener((EventListener) it.next());
+                        } catch (RepositoryException e) {
+                            // ignore and remove next
+                        }
+                    }

MOV26 INS26 MOV31 INS40 UPD40 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 MOV44 MOV43 INS8 INS43 INS42 INS44 INS43 MOV8 MOV29 INS83 MOV5 INS42 INS44 MOV44 MOV43 MOV43 MOV43 INS8 INS29 INS39 UPD42 INS43 INS29 UPD83 MOV83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 MOV65 MOV60 INS24 INS21 INS42 INS5 INS42 INS42 INS41 INS43 INS42 INS25 INS65 UPD43 UPD42 INS42 INS21 INS65 INS43 INS42 INS42 MOV21 INS42 INS43 INS42 UPD42 MOV42 INS25 MOV41 UPD65 INS58 INS32 INS8 MOV32 INS43 INS85 MOV32 UPD42 MOV42 INS62 INS8 INS8 INS65 UPD42 INS32 INS65 INS42 INS32 INS42 INS62 INS8 INS8 INS43 INS59 INS42 INS42 INS60 INS21 UPD42 INS42 UPD42 INS42 INS42 INS42 MOV43 INS41 INS53 MOV32 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 INS42 INS43 INS41 INS53 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS14 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS11 INS14 INS43 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS36 INS42 INS42 UPD43 MOV43 INS27 MOV43 INS42 INS43 INS27 INS42 INS32 INS32 INS34 INS42 INS42 MOV43 INS32 INS11 UPD42 INS45 INS32 INS42 INS45 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS8 INS8 INS42 INS42 MOV43 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 UPD42 INS14 INS24 MOV41 INS24 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS58 INS32 INS8 INS58 INS32 INS8 INS42 MOV42 UPD42 MOV42 INS43 INS59 INS42 INS42 INS60 INS60 INS21 MOV21 INS43 INS59 INS42 INS42 INS54 INS42 INS42 INS32 MOV43 INS59 MOV43 INS59 INS32 INS42 INS42 INS32 MOV8 INS12 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS44 INS8 MOV43 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS11 INS42 INS43 INS32 INS42 INS42 INS42 DEL29 DEL83 DEL83 DEL43 DEL42 DEL42 DEL42 DEL14 DEL32 DEL59 DEL23 DEL66 DEL42 DEL66 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL51 DEL8 DEL42 DEL32 DEL41 DEL42 DEL32 DEL11 DEL7 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL45 DEL9 DEL33 DEL33 DEL9 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL11 DEL42 DEL33 DEL32 DEL42 DEL8