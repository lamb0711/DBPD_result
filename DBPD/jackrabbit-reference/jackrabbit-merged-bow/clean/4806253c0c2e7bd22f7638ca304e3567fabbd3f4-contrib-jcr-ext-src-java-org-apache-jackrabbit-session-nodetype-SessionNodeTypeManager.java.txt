JCR-EXT: Improvements in node type handling.
	* SessionHelper.java: Added proper equals and hashCode implementations.
	* SessionItemDefinition.java: Added proper equals and hashCode implementations.
	* SessionNodeType.java: Added proper equals and hashCode implementations.
	* SessionNodeTypeManager.java: Added proper equals and hashCode implementations.
	* package.html: Removed note about state caching.
	* Switched to using the generic node type base classes for general functionality.
	* Protected and finalized implementation classes.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@169256 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.nodetype.NoSuchNodeTypeException;
-import javax.jcr.nodetype.NodeType;
+import org.apache.jackrabbit.base.nodetype.BaseNodeTypeManager;
-public class SessionNodeTypeManager implements NodeTypeManager {
+public final class SessionNodeTypeManager extends BaseNodeTypeManager
+        implements NodeTypeManager {
-    /** Memorized set of all node types. Initially <code>null</code>. */
-    private NodeType[] allTypes;
-
-    /** Memorized set of primary node types. Initially <code>null</code>. */
-    private NodeType[] primaryTypes;
-
-    /** Memorized set of mixin node types. Initially <code>null</code>. */
-    private NodeType[] mixinTypes;
-
-        this.allTypes = null;
-        this.primaryTypes = null;
-        this.mixinTypes = null;
-    }
-
-    /**
-     * Returns the named node type. This implementation iterates through
-     * all the available node types and returns the one that matches the
-     * given name. If no matching node type is found, then a
-     * NoSuchNodeTypeException is thrown.
-     *
-     * @param name node type name
-     * @return named node type
-     * @throws NoSuchNodeTypeException if the named node type does not exist
-     * @see NodeTypeManager#getNodeType(String)
-     */
-    public NodeType getNodeType(String name) throws NoSuchNodeTypeException {
-        NodeTypeIterator iterator = getAllNodeTypes();
-        while (iterator.hasNext()) {
-            NodeType type = iterator.nextNodeType();
-            if (name.equals(type.getName())) {
-                return type;
-            }
-        }
-        throw new NoSuchNodeTypeException("Node type " + name + " not found");
-     * <p>
-     * The set of all node types is memorized to improve performance,
-     * and will therefore not change even if the underlying state changes!
+     * @see NodeTypeManagerState#getNodeTypeStates()
-        if (allTypes == null) {
-            Set types = new HashSet();
-            NodeTypeState[] states = state.getNodeTypeStates();
-            for (int i = 0; i < states.length; i++) {
-                types.add(new SessionNodeType(helper, states[i]));
-            }
-            allTypes = (NodeType[]) types.toArray(new NodeType[types.size()]);
+        Set types = new HashSet();
+        NodeTypeState[] states = state.getNodeTypeStates();
+        for (int i = 0; i < states.length; i++) {
+            types.add(new SessionNodeType(helper, states[i]));
-        return new ArrayNodeTypeIterator(allTypes);
+        return new ArrayNodeTypeIterator(types);
-     * Returns all primary node types. This method is implemented by
-     * listing all available node types and selecting only the primary
-     * node types.
+     * Compares objects for equality. Returns <code>true</code> if the
+     * given object is a SessionNodeTypeManager with the same underlying node
+     * type manager state and session.
-     * The set of primary node types is memorized to improve performance,
-     * and will therefore not change even if the underlying state changes!
+     * Note that the node type manager state class does not override the
+     * equals method and thus the mutable state instances are compared for
+     * reference equality.
-     * @return primary node types
-     * @see NodeTypeManager#getPrimaryNodeTypes()
+     * @param that the object to compare this object with
+     * @return <code>true</code> if the objects are equal,
+     *         <code>false</code> otherwise
+     * @see Object#equals(Object)
-    public NodeTypeIterator getPrimaryNodeTypes() {
-        if (primaryTypes == null) {
-            Set types = new HashSet();
-            NodeTypeIterator iterator = getAllNodeTypes();
-            while (iterator.hasNext()) {
-                NodeType type = iterator.nextNodeType();
-                if (!type.isMixin()) {
-                    types.add(type);
-                }
-            }
-            primaryTypes =
-                (NodeType[]) types.toArray(new NodeType[types.size()]);
+    public boolean equals(Object that) {
+        if (this == that) {
+            return true;
+        } else if (that instanceof SessionNodeTypeManager) {
+            return state.equals(((SessionNodeTypeManager) that).state)
+                && helper.equals(((SessionNodeTypeManager) that).helper);
+        } else {
+            return false;
-        return new ArrayNodeTypeIterator(primaryTypes);
-     * Returns all mixin node types. This method is implemented by
-     * listing all available node types and selecting only the mixin
-     * node types.
-     * <p>
-     * The set of mixin node types is memorized to improve performance,
-     * and will therefore not change even if the underlying state changes!
+     * Returns a hash code for this object. To satisfy the equality
+     * constraints the returned hash code is a combination of the
+     * hash codes of the underlying node type manager state and session.
-     * @return mixin node types
-     * @see NodeTypeManager#getMixinNodeTypes()
+     * @return hash code
+     * @see Object#hashCode()
-    public NodeTypeIterator getMixinNodeTypes() {
-        if (mixinTypes == null) {
-            Set types = new HashSet();
-            NodeTypeIterator iterator = getAllNodeTypes();
-            while (iterator.hasNext()) {
-                NodeType type = iterator.nextNodeType();
-                if (type.isMixin()) {
-                    types.add(type);
-                }
-            }
-            mixinTypes =
-                (NodeType[]) types.toArray(new NodeType[types.size()]);
-        }
-        return new ArrayNodeTypeIterator(mixinTypes);
+    public int hashCode() {
+        int code = 17;
+        code = code * 37 + state.hashCode();
+        code = code * 37 + helper.hashCode();
+        return code;

MOV26 UPD40 INS83 INS42 INS43 INS31 UPD42 MOV42 MOV8 MOV29 MOV83 INS39 INS42 MOV44 INS8 INS39 INS42 INS65 INS41 UPD43 UPD42 INS25 MOV60 INS21 MOV21 INS68 INS14 UPD66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD42 UPD66 INS66 UPD66 UPD42 INS27 MOV8 INS25 UPD66 UPD66 UPD66 UPD66 INS39 INS7 INS42 INS42 INS42 MOV43 INS42 UPD42 UPD42 INS52 INS42 INS62 MOV8 INS8 UPD42 UPD42 INS42 INS34 INS42 INS27 INS42 INS27 UPD43 INS9 INS42 INS43 INS41 MOV41 INS27 INS32 INS27 INS32 UPD42 UPD42 MOV42 INS27 INS9 INS42 INS34 UPD42 MOV42 UPD42 MOV42 INS42 INS34 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS22 UPD42 MOV42 UPD42 MOV42 INS22 INS36 INS42 INS36 INS42 INS11 INS11 INS43 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL25 DEL8 DEL61 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL42 DEL14 DEL41 DEL8 DEL42 DEL66 DEL65 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL43 DEL85 DEL5 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL42 DEL43 DEL42 DEL14 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL43 DEL42 DEL42 DEL33 DEL27 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL32 DEL3 DEL32 DEL11 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14