JCR-1990: Optimize queries with relative path in order by clause

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@746946 13f79535-47bb-0310-9956-ffa450edef68

- * <p/>
- * <b>Important:</b> The ScoreDocComparator returned by {@link #newComparator}
- * does not implement the contract for {@link ScoreDocComparator#sortValue(ScoreDoc)}
- * properly. The method will always return an empty String to save memory consumption
- * on large property ranges. Those values are only of relevance when queries
- * are executed with a <code>MultiSearcher</code>, which is currently not the
- * case in Jackrabbit.
-        if (p.getLength() == 1) {
-            try {
-                return new SimpleScoreDocComparator(reader,
-                        nsMappings.translatePropertyName(p.getNameElement().getName()));
-            } catch (IllegalNameException e) {
-                throw Util.createIOException(e);
+        try {
+            ScoreDocComparator simple = new SimpleScoreDocComparator(
+                    reader, nsMappings.translatePath(p));
+            if (p.getLength() == 1) {
+                return simple;
+            } else {
+                return new CompoundScoreDocComparator(reader,
+                        new ScoreDocComparator[]{
+                                simple,
+                                new RelPathScoreDocComparator(reader, p)
+                        });
-        } else {
-            return new RelPathScoreDocComparator(reader, p);
+        } catch (IllegalNameException e) {
+            throw Util.createIOException(e);
-        protected final SharedFieldCache.StringIndex[] indexes;
+        protected final SharedFieldCache.ValueIndex[] indexes;
-            this.indexes = new SharedFieldCache.StringIndex[readers.size()];
+            this.indexes = new SharedFieldCache.ValueIndex[readers.size()];
-                indexes[i] = SharedFieldCache.INSTANCE.getStringIndex(r, field,
+                indexes[i] = SharedFieldCache.INSTANCE.getValueIndex(r, field,
-            return indexes[idx].getTerm(i.doc - starts[idx]);
+            return indexes[idx].getValue(i.doc - starts[idx]);
-     * Represents a boolean that implement {@link Comparable}. This class can
-     * be removed when we move to Java 5.
+     * Implements a compound score doc comparator that delegates to several
+     * other comparators. The comparators are asked for a sort value in the
+     * sequence they are passed to the constructor. The first non-null value
+     * will be returned by {@link #sortValue(ScoreDoc)}.
-    private static final class ComparableBoolean implements Comparable {
+    private final class CompoundScoreDocComparator
+            extends AbstractScoreDocComparator {
-        private static final ComparableBoolean TRUE = new ComparableBoolean(true);
+        private final ScoreDocComparator[] comparators;
-        private static final ComparableBoolean FALSE = new ComparableBoolean(false);
-
-        private final boolean value;
-
-        private ComparableBoolean(boolean value) {
-            this.value = value;
+        public CompoundScoreDocComparator(IndexReader reader,
+                                          ScoreDocComparator[] comparators)
+                throws IOException {
+            super(reader);
+            this.comparators = comparators;
-        public int compareTo(Object o) {
-            ComparableBoolean b = (ComparableBoolean) o;
-            return (b.value == value ? 0 : (value ? 1 : -1));
-        }
-
-        static ComparableBoolean valueOf(boolean value) {
-            return value ? TRUE : FALSE;
+        /**
+         * {@inheritDoc}
+         */
+        public Comparable sortValue(ScoreDoc i) {
+            for (int j = 0; j < comparators.length; j++) {
+                Comparable c = comparators[j].sortValue(i);
+                if (c != null) {
+                    return c;
+                }
+            }
+            return null;

UPD42 INS43 INS31 INS31 MOV54 UPD5 INS42 INS5 INS83 INS42 INS44 INS44 INS43 MOV8 INS29 MOV83 MOV43 UPD42 MOV42 MOV44 INS8 UPD43 UPD66 INS66 UPD66 UPD66 MOV65 INS66 INS43 INS85 INS42 INS43 INS42 INS5 INS42 INS42 INS46 INS65 UPD43 UPD42 INS24 INS41 INS60 INS25 UPD40 UPD42 MOV42 UPD42 MOV42 INS43 INS85 INS42 INS65 UPD42 INS58 INS27 INS37 INS8 INS33 INS43 INS59 MOV27 INS8 MOV8 UPD42 UPD42 MOV42 UPD42 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS42 INS42 INS14 INS41 UPD5 UPD42 INS42 INS34 INS43 INS59 INS27 INS8 MOV43 MOV42 MOV32 INS42 INS14 UPD43 UPD42 MOV42 INS42 INS32 INS42 INS33 MOV41 UPD42 MOV42 INS43 INS42 INS3 UPD40 UPD42 INS2 INS42 INS42 INS42 INS42 INS5 INS4 INS42 INS42 INS43 INS85 INS42 MOV14 INS42 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL32 DEL42 DEL32 DEL14 DEL41 DEL8 DEL25 DEL42 DEL65 DEL42 DEL83 DEL83 DEL43 DEL42 DEL42 DEL43 DEL9 DEL14 DEL42 DEL42 DEL42 DEL16 DEL83 DEL83 DEL83 DEL43 DEL42 DEL43 DEL9 DEL14 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL39 DEL42 DEL44 DEL31 DEL39 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL40 DEL42 DEL27 DEL34 DEL42 DEL34 DEL34 DEL38 DEL16 DEL36 DEL16 DEL36 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL8 DEL31