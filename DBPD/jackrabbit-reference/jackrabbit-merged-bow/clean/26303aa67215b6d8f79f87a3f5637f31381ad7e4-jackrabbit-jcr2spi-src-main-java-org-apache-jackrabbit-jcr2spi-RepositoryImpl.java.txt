JCR-2256: JSR 283 Repository Descriptors

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@804296 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import javax.jcr.ValueFactory;
+import javax.jcr.NamespaceException;
+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.conversion.DefaultNamePathResolver;
+import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
+import org.apache.jackrabbit.spi.commons.value.ValueFormat;
+import org.apache.jackrabbit.value.ValueFactoryImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+    private static Logger log = LoggerFactory.getLogger(RepositoryImpl.class);
+
-    private final Map descriptors;
+    private final Map<String, Value[]> descriptors;
-        descriptors = config.getRepositoryService().getRepositoryDescriptors();
+
+        // dummy value factory and dummy resolver as descriptors are not
+        // expected contain Name or Path values.
+        ValueFactory vf = ValueFactoryImpl.getInstance(); 
+        NamePathResolver resolver = new DefaultNamePathResolver(new NamespaceResolver() {
+            public String getURI(String prefix) throws NamespaceException {
+                return prefix;
+            }
+            public String getPrefix(String uri) throws NamespaceException {
+                return uri;
+            }
+        });
+
+        Map<String, QValue[]> descr = config.getRepositoryService().getRepositoryDescriptors();       
+        descriptors = new HashMap(descr.size());
+        for (String key : descr.keySet()) {
+            QValue[] qvs = descr.get(key);
+            Value[] vs = new Value[qvs.length];
+            for (int i = 0; i < qvs.length; i++) {
+                vs[i] = ValueFormat.getJCRValue(qvs[i], resolver, vf);
+            }
+            descriptors.put(key, vs);
+        }
-        String[] keys = (String[]) descriptors.keySet().toArray(new String[descriptors.keySet().size()]);
-        return keys;
+        return descriptors.keySet().toArray(new String[descriptors.keySet().size()]);
-    public String getDescriptor(String descriptorKey) {
-        return (String) descriptors.get(descriptorKey);
+    public String getDescriptor(String key) {
+        Value v = getDescriptorValue(key);
+        try {
+            return (v == null) ? null : v.getString();
+        } catch (RepositoryException e) {
+            log.error("corrupt descriptor value: " + key, e);
+            return null;
+        }
-        String value = getDescriptor(key);
-        if (value != null) {
-            // TODO implementation missing
-            throw new UnsupportedOperationException("not implemented yet - see JCR-2062");
-        } else {
-            return null;
-        }
+        Value[] vs = getDescriptorValues(key);
+        return (vs == null || vs.length != 1) ? null : vs[0];
-        Value value = getDescriptorValue(key);
-        if (value != null) {
-            return new Value[] { value };
-        } else {
+        if (!descriptors.containsKey(key)) {
+        } else {
+            return descriptors.get(key);
+
-        return descriptors.containsKey(key);
+        Value[] vs = descriptors.get(key);
+        return (vs != null && vs.length == 1);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS83 INS83 INS43 INS59 INS74 MOV5 INS44 INS8 INS42 INS42 INS32 MOV43 INS43 INS5 INS60 INS60 INS60 INS70 INS43 INS42 MOV60 INS54 INS41 MOV8 INS60 INS41 INS42 INS42 INS57 INS42 INS43 INS85 INS43 INS59 INS43 INS59 INS74 INS59 INS44 INS32 INS8 MOV32 INS42 INS8 INS12 INS5 INS16 INS38 INS5 INS59 INS36 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS5 INS42 MOV32 INS14 INS43 INS42 INS42 INS42 INS60 INS60 INS24 INS21 UPD42 MOV41 INS44 INS8 INS43 INS85 UPD42 INS36 INS33 INS2 MOV32 INS43 INS85 INS42 INS32 INS27 INS42 INS42 INS42 INS43 INS14 INS42 INS42 INS43 INS85 INS43 INS32 INS42 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS16 INS43 INS42 INS21 INS41 INS42 UPD42 INS27 INS42 INS34 INS42 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 MOV42 INS27 INS27 INS42 INS43 INS1 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS43 INS85 INS42 MOV3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS42 INS36 INS33 INS32 INS42 INS32 INS33 INS27 INS27 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS42 INS31 INS31 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS34 INS7 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS42 UPD42 MOV42 MOV33 INS40 INS34 INS83 INS43 INS42 INS44 INS43 INS8 INS83 MOV43 INS42 MOV44 INS43 INS8 INS2 INS32 INS42 INS33 INS45 INS42 INS42 MOV43 INS42 INS42 INS41 UPD42 INS42 INS41 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL4 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL11 DEL8 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL33 DEL41 DEL8 DEL25 DEL42 DEL33 DEL27 DEL41