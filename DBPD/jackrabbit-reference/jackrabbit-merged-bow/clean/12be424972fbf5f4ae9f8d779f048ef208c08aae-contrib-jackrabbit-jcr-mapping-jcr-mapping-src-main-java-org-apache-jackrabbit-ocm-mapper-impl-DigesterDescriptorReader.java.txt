Refactor Mapper & reader (issue 1113). 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@573060 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import org.apache.jackrabbit.ocm.mapper.DescriptorReader;
-public class DigesterDescriptorReader
+public class DigesterDescriptorReader implements DescriptorReader
+    private Collection configFileStreams = new ArrayList();
+    
+    public DigesterDescriptorReader(InputStream stream)
+    {
+        configFileStreams.add(stream);	
+    }
+    
+    public DigesterDescriptorReader(InputStream[] streams)
+    {
+        for (int i = 0; i < streams.length; i++) 
+        {
+        	configFileStreams.add(streams[i]);	
+		}
+    	
+    }
+    
+    public DigesterDescriptorReader(String xmlFile)
+    {
+    	try
+		{
+    		configFileStreams.add(new FileInputStream(xmlFile));
+		}		
+		catch (FileNotFoundException e)
+		{
+			throw new InitMapperException("Mapping file not found : " + xmlFile,e);
+		}
+    } 
+    
+    public DigesterDescriptorReader(String[] xmlFiles)
+    {
+   	
+    	for (int i = 0; i < xmlFiles.length; i++) 
+    	{
+        	try
+    		{
+        		configFileStreams.add(new FileInputStream(xmlFiles[i]));
+    		}
+    		
+    		catch (FileNotFoundException e)
+    		{
+    			throw new InitMapperException("Mapping file not found : " + xmlFiles[i],e);
+    		}    				
+		}
+    } 
+    
+    
-	 * @param stream the xml mapping file reference
-	public MappingDescriptor loadClassDescriptors(InputStream stream)
+	public MappingDescriptor loadClassDescriptors()
-			Digester digester = new Digester();
-			digester.setValidating(this.validating);
-			if (null != this.dtdResolver) {
-                digester.register("-//The Apache Software Foundation//DTD Repository//EN",
-                                  this.dtdResolver.toString());
-            }
-	        digester.setClassLoader(getClass().getClassLoader());
-			
-	        MappingDescriptor mappingDescriptor = new MappingDescriptor();
-	        digester.push(mappingDescriptor);
-			
+			MappingDescriptor mappingDescriptor = new MappingDescriptor();
+			for (Iterator iter = configFileStreams.iterator(); iter.hasNext();) 
+			{
+				InputStream xmlMappingDescriptorFile = (InputStream) iter.next();
+				Digester digester = new Digester();
+				digester.setValidating(this.validating);
+				if (null != this.dtdResolver) 
+				{
+	                digester.register("-//The Apache Software Foundation//DTD Repository//EN",
+	                                  this.dtdResolver.toString());
+	            }
+		        digester.setClassLoader(getClass().getClassLoader());
+				
+		        MappingDescriptor currentMappingDescriptor = new MappingDescriptor();
+		        digester.push(currentMappingDescriptor);
+				
-			// --------------------------------------------------------------------------------
-			// Rules used for the class-descriptor element
-			// --------------------------------------------------------------------------------	                        
-			digester.addObjectCreate("jackrabbit-ocm/class-descriptor", ClassDescriptor.class);
-			digester.addSetProperties("jackrabbit-ocm/class-descriptor");
-			digester.addSetNext("jackrabbit-ocm/class-descriptor", "addClassDescriptor");		
+				// --------------------------------------------------------------------------------
+				// Rules used for the class-descriptor element
+				// --------------------------------------------------------------------------------	                        
+				digester.addObjectCreate("jackrabbit-ocm/class-descriptor", ClassDescriptor.class);
+				digester.addSetProperties("jackrabbit-ocm/class-descriptor");
+				digester.addSetNext("jackrabbit-ocm/class-descriptor", "addClassDescriptor");		
-			// --------------------------------------------------------------------------------
-			// Rules used for the implement-descriptor element
-			// --------------------------------------------------------------------------------
-			digester.addObjectCreate("jackrabbit-ocm/class-descriptor/implement-descriptor", ImplementDescriptor.class);
-			digester.addSetProperties("jackrabbit-ocm/class-descriptor/implement-descriptor");
-            digester.addSetNext("jackrabbit-ocm/class-descriptor/implement-descriptor", "addImplementDescriptor");
-			
-			// --------------------------------------------------------------------------------
-			// Rules used for the field-descriptor element
-			// --------------------------------------------------------------------------------
-			digester.addObjectCreate("jackrabbit-ocm/class-descriptor/field-descriptor", FieldDescriptor.class);
-			digester.addSetProperties("jackrabbit-ocm/class-descriptor/field-descriptor");
-            digester.addSetNext("jackrabbit-ocm/class-descriptor/field-descriptor", "addFieldDescriptor");
+				// --------------------------------------------------------------------------------
+				// Rules used for the implement-descriptor element
+				// --------------------------------------------------------------------------------
+				digester.addObjectCreate("jackrabbit-ocm/class-descriptor/implement-descriptor", ImplementDescriptor.class);
+				digester.addSetProperties("jackrabbit-ocm/class-descriptor/implement-descriptor");
+	            digester.addSetNext("jackrabbit-ocm/class-descriptor/implement-descriptor", "addImplementDescriptor");
+				
+				// --------------------------------------------------------------------------------
+				// Rules used for the field-descriptor element
+				// --------------------------------------------------------------------------------
+				digester.addObjectCreate("jackrabbit-ocm/class-descriptor/field-descriptor", FieldDescriptor.class);
+				digester.addSetProperties("jackrabbit-ocm/class-descriptor/field-descriptor");
+	            digester.addSetNext("jackrabbit-ocm/class-descriptor/field-descriptor", "addFieldDescriptor");
-			// --------------------------------------------------------------------------------
-			// Rules used for the bean-descriptor element
-			// --------------------------------------------------------------------------------
-			digester.addObjectCreate("jackrabbit-ocm/class-descriptor/bean-descriptor", BeanDescriptor.class);
-			digester.addSetProperties("jackrabbit-ocm/class-descriptor/bean-descriptor");
-            digester.addSetNext("jackrabbit-ocm/class-descriptor/bean-descriptor", "addBeanDescriptor");
+				// --------------------------------------------------------------------------------
+				// Rules used for the bean-descriptor element
+				// --------------------------------------------------------------------------------
+				digester.addObjectCreate("jackrabbit-ocm/class-descriptor/bean-descriptor", BeanDescriptor.class);
+				digester.addSetProperties("jackrabbit-ocm/class-descriptor/bean-descriptor");
+	            digester.addSetNext("jackrabbit-ocm/class-descriptor/bean-descriptor", "addBeanDescriptor");
-			// --------------------------------------------------------------------------------
-			// Rules used for the collection-descriptor element
-			// --------------------------------------------------------------------------------
-			digester.addObjectCreate("jackrabbit-ocm/class-descriptor/collection-descriptor", CollectionDescriptor.class);
-			digester.addSetProperties("jackrabbit-ocm/class-descriptor/collection-descriptor");
-            digester.addSetNext("jackrabbit-ocm/class-descriptor/collection-descriptor", "addCollectionDescriptor");			
+				// --------------------------------------------------------------------------------
+				// Rules used for the collection-descriptor element
+				// --------------------------------------------------------------------------------
+				digester.addObjectCreate("jackrabbit-ocm/class-descriptor/collection-descriptor", CollectionDescriptor.class);
+				digester.addSetProperties("jackrabbit-ocm/class-descriptor/collection-descriptor");
+	            digester.addSetNext("jackrabbit-ocm/class-descriptor/collection-descriptor", "addCollectionDescriptor");			
-            return (MappingDescriptor) digester.parse(stream);
+	            currentMappingDescriptor = (MappingDescriptor) digester.parse(xmlMappingDescriptorFile);
+				
+				mappingDescriptor.getClassDescriptorsByClassName().putAll(currentMappingDescriptor.getClassDescriptorsByClassName());
+				mappingDescriptor.getClassDescriptorsByNodeType().putAll(currentMappingDescriptor.getClassDescriptorsByNodeType());
+                
+			}
+			return mappingDescriptor;
-			throw new InitMapperException("Impossible to read the xml mapping file", e);
+			throw new InitMapperException("Impossible to read the xml mapping descriptor file(s)", e);
-	/**
-	 * Load all class descriptors found in the xml mapping file.
-	 * 
-	 * @param xmlFile the xml mapping file reference
-	 * @return a {@link MappingDescriptor}
-	 * 
-	 */	
-	public MappingDescriptor loadClassDescriptors(String xmlFile)
-	{
-		try
-		{
-			return loadClassDescriptors(new FileInputStream(xmlFile));
-		}
-		
-		catch (FileNotFoundException e)
-		{
-			throw new InitMapperException("Mapping file not found : " + xmlFile,e);
-		}
-	}
+

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS42 INS83 INS43 INS59 INS83 INS42 MOV44 INS8 INS83 INS42 INS44 INS8 INS42 INS83 INS42 INS44 INS8 INS42 INS42 INS14 INS21 INS5 INS42 INS24 INS5 INS42 INS24 MOV65 INS43 INS32 INS43 INS85 INS58 INS27 INS37 INS8 INS43 INS85 INS58 INS27 INS37 INS8 MOV66 MOV66 MOV65 INS8 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS42 INS39 INS59 INS42 INS40 INS42 INS54 MOV60 INS24 INS41 INS42 INS34 INS32 MOV32 INS42 INS34 INS8 INS12 INS58 INS32 MOV8 INS42 INS42 INS42 INS2 UPD42 INS42 INS21 INS44 INS8 INS43 INS59 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS43 INS59 MOV43 INS59 INS7 INS32 INS32 INS43 UPD45 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS11 INS42 INS14 UPD42 INS42 INS11 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS43 INS2 MOV43 INS27 INS42 INS43 INS32 MOV43 INS43 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS2 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 DEL42 DEL66 DEL65 DEL29 DEL42 DEL41 DEL42 DEL66 DEL65 DEL11 DEL41