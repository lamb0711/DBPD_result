JCR-2003: JCR2SPI / SPI: Add support for JCR 2.0

- initial implementation for Node.setPrimaryType
   needs more careful testing in case of 
   > changing node definition
   > batch utilities present in spi-commons

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@779227 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.operation.SetPrimaryType;
-    private Name primaryTypeName;
-
-        if (session.getNodeTypeManager().hasNodeType(nodeTypeName)) {
-            primaryTypeName = nodeTypeName;
-        } else {
+        if (!session.getNodeTypeManager().hasNodeType(nodeTypeName)) {
-        return session.getNodeTypeManager().getNodeType(primaryTypeName);
+        return session.getNodeTypeManager().getNodeType(getPrimaryNodeTypeName());
-        // TODO: implementation missing
-        throw new UnsupportedRepositoryOperationException("JCR-1104");
+        checkStatus();
+
+        if (getNodeState().isRoot()) {
+            String msg = "The primary type of the root node may not be changed.";
+            log.debug(msg);
+            throw new RepositoryException(msg);
+        }
+
+        Name ntName = getQName(nodeTypeName);
+        if (ntName.equals(getPrimaryNodeTypeName())) {
+            log.debug("Changing the primary type has no effect: '" + nodeTypeName + "' already is the primary node type.");
+            return;
+        }
+
+        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
+        NodeType nt = ntMgr.getNodeType(ntName);
+        if (nt.isMixin() || nt.isAbstract()) {
+            throw new ConstraintViolationException("Cannot change the primary type: '" + nodeTypeName + "' is a mixin type or abstract.");
+        }
+        
+        // perform the operation
+        Operation op = SetPrimaryType.create(getNodeState(), ntName);
+        session.getSessionItemStateManager().execute(op);
-        if (session.getNameResolver().getJCRName(primaryTypeName).equals(nodeTypeName)) {
+        if (session.getNameResolver().getJCRName(getPrimaryNodeTypeName()).equals(nodeTypeName)) {
-        allRemaining[remainingMixins.size()] = primaryTypeName;
+        allRemaining[remainingMixins.size()] = getPrimaryNodeTypeName();
-        if (qName.equals(primaryTypeName)) {
+        if (qName.equals(getPrimaryNodeTypeName())) {
-        NodeTypeImpl primaryType = ntMgr.getNodeType(primaryTypeName);
+        NodeTypeImpl primaryType = ntMgr.getNodeType(getPrimaryNodeTypeName());
-            log.debug(mixin.getName() + ": not supported on node type " + primaryTypeName);
+            log.debug(mixin.getName() + ": not supported on node type " + getPrimaryNodeTypeName());
+
+    /**
+     * @return the primary node type name.
+     */
+    private Name getPrimaryNodeTypeName() {
+        return getNodeState().getNodeTypeName();
+    }

INS26 INS40 INS31 INS8 INS29 INS83 MOV43 INS42 INS8 INS21 INS25 INS60 INS25 INS60 INS60 INS25 INS60 INS21 INS65 INS41 INS38 INS32 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS66 INS32 MOV32 INS32 INS42 INS32 INS42 INS60 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 MOV53 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS42 UPD42 MOV42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 UPD43 INS27 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS45 UPD42 INS45 INS42 INS45 INS32 INS42 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL7 DEL21 DEL8 DEL45 DEL8 DEL42 DEL42