JCR-2113 : JSR 283 Access Control Management (contribution by Alfusainey Jallow)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1656464 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Set;
+    private final Map<Name, Iterable<QValue>> mvRestrictions;
+    private int hashCode = -1;
+    private int privsHashCode = -1;
+
-                           Map<String, QValue> restrictions, NamePathResolver resolver,
-                           QValueFactory qvf)
-                                    throws RepositoryException {
+                           Map<Name, QValue> restrictions, Map<Name, Iterable<QValue>> mvRestrictions,
+                           NamePathResolver resolver, QValueFactory qvf) throws RepositoryException {
-        if (restrictions == null || (restrictions.size() == 0)) {
+        if (restrictions == null) {
-            this.restrictions = new HashMap<Name, QValue>(restrictions.size());
-            for (String restName : restrictions.keySet()) {
-                this.restrictions.put(resolver.getQName(restName), restrictions.get(restName));
-            }
+            this.restrictions = restrictions;
+        }
+        if (mvRestrictions == null) {
+            this.mvRestrictions = Collections.emptyMap();
+        } else {
+            this.mvRestrictions = mvRestrictions;
-    
+
+    //-------------------------------------------------------------< Object >---
+    @Override
+    public int hashCode() {
+        if (hashCode == -1) {
+            hashCode = buildHashCode();
+        }
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (obj == this) {
+            return true;
+        }
+        if (obj instanceof AccessControlEntryImpl) {
+            AccessControlEntryImpl other = (AccessControlEntryImpl) obj;
+            return principal.getName().equals(other.principal.getName()) &&
+                    isAllow == other.isAllow &&
+                    restrictions.equals(other.restrictions) &&
+                    mvRestrictions.equals(other.mvRestrictions) &&
+                    getPrivilegesHashCode() == other.getPrivilegesHashCode();
+        }
+        return false;
+    }
+
+    private int buildHashCode() {
+        int h = 17;
+        h = 37 * h + principal.getName().hashCode();
+        h = 37 * h + getPrivilegesHashCode();
+        h = 37 * h + Boolean.valueOf(isAllow).hashCode();
+        h = 37 * h + restrictions.hashCode();
+        h = 37 * h + mvRestrictions.hashCode();
+        return h;
+    }
+
+    private int getPrivilegesHashCode() {
+        if (privsHashCode == -1) {
+            Set<Privilege> prvs = new HashSet<Privilege>(Arrays.asList(privileges));
+            for (Privilege p : privileges) {
+                if (p.isAggregate()) {
+                    prvs.addAll(Arrays.asList(p.getAggregatePrivileges()));
+                }
+            }
+            privsHashCode = prvs.hashCode();
+        }
+        return privsHashCode;
+    }
+

INS26 INS26 INS40 UPD40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS44 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS43 INS43 INS74 INS42 INS42 INS38 INS42 INS38 UPD74 UPD74 MOV74 INS42 INS25 INS42 INS25 INS41 INS42 INS43 INS42 INS25 INS25 INS41 INS60 INS21 INS21 INS21 INS21 INS21 INS41 INS25 INS41 INS42 INS42 INS43 INS43 INS34 INS34 UPD43 UPD43 INS74 MOV27 MOV8 INS8 INS27 INS8 INS8 INS27 INS8 INS42 INS42 INS27 INS8 INS62 INS8 INS9 INS39 INS59 INS7 INS7 INS7 INS7 INS7 INS42 INS27 INS8 INS42 INS42 INS42 UPD42 UPD42 INS43 MOV43 INS21 INS42 INS33 MOV21 MOV21 INS42 INS38 INS21 INS42 INS52 INS41 INS42 INS43 INS60 INS41 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS38 INS60 INS70 INS21 INS42 INS7 INS7 INS34 INS7 INS9 INS42 INS43 INS59 INS27 INS27 INS32 INS27 INS32 INS27 INS32 INS27 INS32 INS27 INS32 INS34 INS74 INS59 INS44 INS42 INS8 INS7 MOV22 INS42 INS32 INS22 INS42 INS42 INS32 INS42 INS42 INS11 INS27 INS27 INS34 INS42 INS32 INS42 INS34 INS42 INS42 INS34 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS42 INS43 INS42 INS27 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS32 INS8 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS32 INS27 INS42 INS42 INS40 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 DEL32 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL36 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL8 DEL70 DEL8