JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1082239 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashSet;
+import java.util.Set;
-     * Privileges contained in this entry
+     * All privileges contained in this entry
-     * PrivilegeBits calculated from the privileges
+     * PrivilegeBits calculated from built-in privileges
+     * Calculated set of non-aggregate custom privileges (see also privilegeBits
+     * above for the built-in privileges) used upon ac evaluation.
+     */
+    private Set<Privilege> customPrivs;
+
+    /**
-     * 
+     *
-    protected AccessControlEntryImpl(AccessControlEntryImpl base, Privilege[] privileges, boolean isAllow) throws AccessControlException {
-        // make sure no abstract privileges are passed.
-        for (Privilege privilege : privileges) {
-            if (privilege.isAbstract()) {
-                throw new AccessControlException("Privilege " + privilege + " is abstract.");
-            }
-        }
-        this.principal = base.principal;
-        this.privileges = privileges;
-        this.privilegeBits = getPrivilegeManager().getBits(privileges);
-        this.allow = isAllow;
+    protected AccessControlEntryImpl(AccessControlEntryImpl base, Privilege[] privileges, boolean isAllow)
+            throws AccessControlException, RepositoryException {
+        this(base.principal, privileges, isAllow, (base.restrictions.isEmpty()) ? null : Collections.<String, Value>emptyMap());
-        if (base.restrictions == null) {
-            this.restrictions = Collections.emptyMap();
-        } else {
-            this.restrictions = new HashMap<Name, Value>(base.restrictions.size());
+        if (!base.restrictions.isEmpty()) {
-            for (Name name : restrictions.keySet()) {
-                Value value = restrictions.get(name);
+            for (Name name : base.restrictions.keySet()) {
+                Value value = base.restrictions.get(name);
-     * @return the int representation of the privileges defined for this entry.
+     * @return the permission bits that correspond to the privileges defined by this entry.
+     * @return A collection of all non-aggregate custom privileges defined by
+     * this entry including those contained in the aggregated custom privileges.
+     */
+    public Set<Privilege> getCustomPrivileges() {
+        if (customPrivs == null) {
+            customPrivs = new HashSet<Privilege>();
+            for (Privilege p : privileges) {
+                try {
+                    if (getPrivilegeManager().isCustomPrivilege(p)) {
+                        if (p.isAggregate()) {
+                            for (Privilege aggr : p.getAggregatePrivileges()) {
+                                if (!aggr.isAggregate()) {
+                                    customPrivs.add(p);
+                                }
+                            }
+                        } else {
+                            customPrivs.add(p);
+
+                        }
+                    }
+                } catch (AccessControlException e) {
+                    // ignore.
+                }
+            }
+        }
+        return customPrivs;
+    }
+
+    /**
-        h = 37 * h + privilegeBits;
+        for (Privilege p : privileges) {
+            h = 37 * h + p.hashCode();
+        }
-            AccessControlEntryImpl tmpl = (AccessControlEntryImpl) obj;
-            return principal.getName().equals(tmpl.principal.getName()) &&
-                   privilegeBits == tmpl.privilegeBits && allow == tmpl.allow &&
-                   restrictions.equals(tmpl.restrictions);
+            AccessControlEntryImpl other = (AccessControlEntryImpl) obj;
+            return principal.getName().equals(other.principal.getName()) &&
+                   privilegeBits == other.privilegeBits &&
+                   allow == other.allow &&
+                   restrictions.equals(other.restrictions) &&
+                   equalCustomPrivileges(other);
+
+    private boolean equalCustomPrivileges(AccessControlEntryImpl other) {
+        Set<Privilege> a1 = getCustomPrivileges();
+        Set<Privilege> a2 = other.getCustomPrivileges();
+        return a1.size() == a2.size() && a1.containsAll(a2);
+    }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS29 INS83 INS74 INS59 INS43 INS29 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS65 INS43 INS43 INS42 INS42 INS17 INS65 INS43 INS43 INS25 INS41 INS70 INS43 INS42 INS60 INS60 INS41 UPD66 UPD66 INS66 INS66 INS42 INS42 INS40 INS42 INS42 INS16 INS38 UPD66 INS66 INS66 INS42 INS42 INS27 INS8 INS42 INS44 INS42 INS8 INS42 INS74 INS59 INS74 INS59 INS27 INS36 INS33 INS32 INS32 INS42 INS33 INS21 INS70 INS43 INS42 MOV21 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS27 INS32 INS32 INS42 INS43 MOV43 INS42 INS40 UPD42 MOV42 INS7 MOV44 INS42 INS8 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS14 UPD42 INS54 UPD42 INS27 INS32 INS42 INS42 INS42 INS42 INS74 INS8 INS12 INS32 MOV27 MOV32 INS42 INS42 INS43 INS43 INS25 INS44 INS8 INS42 INS42 UPD40 INS40 INS42 INS42 MOV32 INS8 MOV43 INS42 UPD40 UPD42 UPD42 INS25 UPD40 INS32 INS8 INS8 UPD40 INS42 INS42 INS70 INS21 INS44 INS32 INS8 INS32 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS38 INS8 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL70 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL40 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL40 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27