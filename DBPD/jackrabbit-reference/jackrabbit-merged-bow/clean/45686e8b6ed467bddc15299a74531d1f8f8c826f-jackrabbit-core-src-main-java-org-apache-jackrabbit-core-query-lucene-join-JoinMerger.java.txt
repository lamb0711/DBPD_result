JCR-2715: Improved join query performance

Fix all remaining TCK test failures with the new QOM/SQL2 implementation
and enable it for all QOM/SQL2 queries

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1039888 13f79535-47bb-0310-9956-ffa450edef68

-import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_JOIN_TYPE_RIGHT_OUTER;
-        if (JCR_JOIN_TYPE_RIGHT_OUTER.equals(type)) {
-            Map<String, List<Row>> map = new HashMap<String, List<Row>>();
-            for (Row row : new RowIterable(leftRows)) {
-                for (String value : getLeftValues(row)) {
-                    List<Row> rows = map.get(value);
-                    if (rows == null) {
-                        rows = new ArrayList<Row>();
-                        map.put(value, rows);
-                    }
-                    rows.add(row);
-                }
-            }
-            joinRows = mergeRight(map, rightRows);
-        } else {
-            Map<String, List<Row>> map = new HashMap<String, List<Row>>();
-            for (Row row : new RowIterable(rightRows)) {
-                for (String value : getRightValues(row)) {
-                    List<Row> rows = map.get(value);
-                    if (rows == null) {
-                        rows = new ArrayList<Row>();
-                        map.put(value, rows);
-                    }
-                    rows.add(row);
-                }
-            }
-            boolean outer = JCR_JOIN_TYPE_LEFT_OUTER.equals(type);
-            joinRows = mergeLeft(leftRows, map, outer);
-        }
-        return new SimpleQueryResult(columnNames, selectorNames, joinRows);
-    }
-    private RowIterator mergeLeft(
-            RowIterator leftRows, Map<String, List<Row>> rightRowMap,
-            boolean outer) throws RepositoryException {
-        if (!rightRowMap.isEmpty()) {
+        Map<String, List<Row>> map = new HashMap<String, List<Row>>();
+        for (Row row : new RowIterable(rightRows)) {
+            for (String value : getRightValues(row)) {
+                List<Row> rows = map.get(value);
+                if (rows == null) {
+                    rows = new ArrayList<Row>();
+                    map.put(value, rows);
+                }
+                rows.add(row);
+            }
+        }
+
+        if (!map.isEmpty()) {
-                    List<Row> rightRows = rightRowMap.get(value);
-                    if (rightRows != null) {
-                        for (Row rightRow : rightRows) {
+                    List<Row> matchingRows = map.get(value);
+                    if (matchingRows != null) {
+                        for (Row rightRow : matchingRows) {
-                    } else if (outer) {
+                    } else if (JCR_JOIN_TYPE_LEFT_OUTER.equals(type)) {
+                        // No matches in an outer join -> add a null row
-            return new RowIteratorAdapter(rows);
-        } else if (outer) {
-            return new RowIteratorAdapter(leftRows) {
+            joinRows = new RowIteratorAdapter(rows);
+        } else if (JCR_JOIN_TYPE_LEFT_OUTER.equals(type)) {
+            joinRows = new RowIteratorAdapter(leftRows) {
-            return new RowIteratorAdapter(Collections.emptySet());
+            joinRows = new RowIteratorAdapter(Collections.emptySet());
-    }
-    private RowIterator mergeRight(
-            Map<String, List<Row>> leftRowMap, RowIterator rightRows)
-            throws RepositoryException {
-        if (leftRowMap.isEmpty()) {
-            List<Row> rows = new ArrayList<Row>();
-            for (Row rightRow : new RowIterable(rightRows)) {
-                for (String value : getRightValues(rightRow)) {
-                    List<Row> leftRows = leftRowMap.get(value);
-                    if (leftRows != null) {
-                        for (Row leftRow : leftRows) {
-                            rows.add(mergeRow(leftRow, rightRow));
-                        }
-                    } else {
-                        rows.add(mergeRow(null, rightRow));
-                    }
-                }
-            }
-            return new RowIteratorAdapter(rows);
-        } else {
-            return new RowIteratorAdapter(rightRows) {
-                @Override
-                public Object next() {
-                    return mergeRow(null, (Row) super.next());
-                }
-            };
-        }
+        return new SimpleQueryResult(columnNames, selectorNames, joinRows);

MOV8 MOV60 INS25 MOV41 INS38 INS8 INS25 INS32 MOV60 INS70 INS21 MOV32 INS8 INS8 INS42 INS42 MOV59 MOV44 MOV14 INS8 INS7 MOV21 INS21 UPD42 MOV14 INS70 INS42 MOV14 INS7 MOV44 MOV32 INS8 MOV14 INS42 MOV14 MOV60 INS25 INS27 INS8 INS25 UPD42 INS42 INS33 INS70 INS32 MOV8 MOV44 INS42 MOV8 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL70 DEL8 DEL42 DEL25 DEL25 DEL8 DEL70 DEL8 DEL70 DEL41 DEL8 DEL42 DEL41 DEL8 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL42 DEL42 DEL42 DEL33 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL42 DEL43 DEL42 DEL48 DEL11 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL25 DEL8 DEL31