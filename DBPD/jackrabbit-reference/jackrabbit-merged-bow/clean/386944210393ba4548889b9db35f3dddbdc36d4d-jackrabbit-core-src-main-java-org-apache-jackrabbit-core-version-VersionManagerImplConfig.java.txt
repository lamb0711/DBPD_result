JCR-2140: Baselines


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@796899 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashSet;
-import java.util.Set;
-
-import javax.jcr.ItemNotFoundException;
+import javax.jcr.PropertyType;
-import javax.jcr.version.Version;
+import org.apache.jackrabbit.core.RepositoryImpl;
+import org.apache.jackrabbit.core.value.InternalValue;
-     * @return the configuration
+     * @return the node id of the configuration
-    protected InternalConfiguration restore(NodeStateEx parent, Name name, InternalBaseline baseline)
+    protected NodeId restore(NodeStateEx parent, Name name, InternalBaseline baseline)
-        InternalConfiguration config = baseline.getConfiguration();
-        NodeId rootId = config.getRootId();
+        NodeStateEx config = parent.getNode(baseline.getVersionHistory().getVersionableId());
+        NodeId rootId = config.getPropertyValue(NameConstants.JCR_ROOT).getNodeId();
-            return config;
+            return config.getNodeId();
-     * Performs a configuration checkin
-     * @param config the config
-     * @return the id of the new base version
-     * @throws RepositoryException if an error occurs
-     */
-    protected NodeId checkin(InternalConfiguration config) throws RepositoryException {
-        NodeStateEx root = getRootNode(config);
-        Set<NodeId> baseVersions = new HashSet<NodeId>();
-        baseVersions.add(root.getPropertyValue(NameConstants.JCR_BASEVERSION).getNodeId());
-        collectBaseVersions(root, baseVersions);
-        return vMgr.checkin(session, config, baseVersions).getId();
-    }
-
-    /**
-     * Recursivly collects all base versions of this configuration tree.
-     * @param root node to traverse
-     * @param baseVersions set of base versions to fill
-     * @throws RepositoryException if an error occurs
-     */
-    private void collectBaseVersions(NodeStateEx root, Set<NodeId> baseVersions)
-            throws RepositoryException {
-        for (NodeStateEx child: root.getChildNodes()) {
-            if (child.getEffectiveNodeType().includesNodeType(NameConstants.MIX_VERSIONABLE)) {
-                if (child.hasProperty(NameConstants.JCR_CONFIGURATION)) {
-                    // don't traverse into child nodes that have a jcr:configuration
-                    // property as they belong to a different configuration.
-                    continue;
-                }
-                baseVersions.add(child.getPropertyValue(NameConstants.JCR_BASEVERSION).getNodeId());
-            }
-            collectBaseVersions(child, baseVersions);
-        }
-    }
-
-    /**
-    protected void restore(InternalConfiguration config, Name name, boolean removeExisting)
-            throws RepositoryException {
-        throw new UnsupportedRepositoryOperationException("not implemented, yet");
-    }
+//    protected void restore(InternalConfiguration config, Name name, boolean removeExisting)
+//            throws RepositoryException {
+//        throw new UnsupportedRepositoryOperationException("not implemented, yet");
+//    }
-    protected void restoreByLabel(InternalConfiguration config, Name name, boolean removeExisting)
-            throws RepositoryException {
-        throw new UnsupportedRepositoryOperationException("not implemented, yet");
-    }
+//    protected void restoreByLabel(InternalConfiguration config, Name name, boolean removeExisting)
+//            throws RepositoryException {
+//        throw new UnsupportedRepositoryOperationException("not implemented, yet");
+//    }
-    protected void restore(InternalConfiguration config, Version version, boolean removeExisting)
+//    protected void restore(InternalConfiguration config, Version version, boolean removeExisting)
+//            throws RepositoryException {
+//        throw new UnsupportedRepositoryOperationException("not implemented, yet");
+//    }
+
+    /**
+     * Creates a new configuration node.
+     * <p/>
+     * The nt:confguration is stored within the nt:configurations storage using
+     * the nodeid of the configuration root (rootId) as path.
+     *
+     * @param state the node of the workspace configuration
+     * @return the node id of the created configuration
+     * @throws RepositoryException if an error occurs
+     */
+    protected NodeId createConfiguration(NodeStateEx state)
-        throw new UnsupportedRepositoryOperationException("not implemented, yet");
+
+        WriteOperation ops = startWriteOperation();
+        try {
+            NodeId rootId = state.getNodeId();
+            NodeStateEx configRoot = internalGetConfigRoot();
+            NodeStateEx configParent = InternalVersionManagerBase.getParentNode(
+                    configRoot,
+                    rootId.toString(),
+                    NameConstants.REP_CONFIGURATIONS);
+            Name name = InternalVersionManagerBase.getName(rootId.toString());
+
+            NodeId configId = new NodeId();
+            NodeStateEx config = configParent.addNode(name, NameConstants.NT_CONFIGURATION, configId, true);
+            config.setPropertyValue(NameConstants.JCR_ROOT, InternalValue.create(rootId));
+
+            // init mix:versionable flags
+            VersionHistoryInfo vh = vMgr.getVersionHistory(session, config.getState(), null);
+
+            // and set the base version and history to the config
+            InternalValue historyId = InternalValue.create(vh.getVersionHistoryId());
+            InternalValue versionId = InternalValue.create(vh.getRootVersionId());
+
+            config.setPropertyValue(NameConstants.JCR_BASEVERSION, versionId);
+            config.setPropertyValue(NameConstants.JCR_VERSIONHISTORY, historyId);
+            config.setPropertyValue(NameConstants.JCR_ISCHECKEDOUT, InternalValue.create(true));
+            config.setPropertyValues(NameConstants.JCR_PREDECESSORS, PropertyType.REFERENCE, new InternalValue[]{versionId});
+            configParent.store();
+
+            // set configuration reference in state
+            state.setPropertyValue(NameConstants.JCR_CONFIGURATION, InternalValue.create(configId));
+            state.store();
+
+            ops.save();
+
+            return configId;
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        } finally {
+            ops.close();
+        }
-     * Returns the configuration root node for the given config.
-     * @param config the config
+     * Returns the root node of the configurations storage located at
+     * "/jcr:system/jcr:configurations"
+     *
-     * @throws RepositoryException if an error occurs or the root node does not exist
+     * @throws RepositoryException if an error occurs
-    private NodeStateEx getRootNode(InternalConfiguration config) throws RepositoryException {
-        NodeStateEx root = getNodeStateEx(config.getRootId());
+    private NodeStateEx internalGetConfigRoot() throws RepositoryException {
+        NodeStateEx system = getNodeStateEx(RepositoryImpl.SYSTEM_ROOT_NODE_ID);
+        NodeStateEx root = system.getNode(NameConstants.JCR_CONFIGURATIONS, 1);
-            throw new ItemNotFoundException("Configuration root node for " + config.getId() + " not found.");
+            root = system.addNode(
+                    NameConstants.JCR_CONFIGURATIONS,
+                    NameConstants.REP_CONFIGURATIONS,
+                    RepositoryImpl.CONFIGURATIONS_NODE_ID, false);
+            system.store();

MOV26 MOV26 UPD40 UPD40 UPD40 INS31 UPD43 MOV29 MOV83 MOV43 UPD42 MOV42 INS44 MOV43 INS8 UPD42 INS8 UPD42 MOV43 INS42 INS60 INS54 INS65 MOV65 INS60 MOV60 MOV25 MOV41 UPD66 UPD43 UPD66 INS66 INS66 INS66 UPD42 UPD66 UPD66 INS43 INS59 INS8 INS12 INS8 UPD66 MOV66 UPD66 MOV66 INS43 INS59 UPD42 INS32 UPD42 MOV42 INS42 INS32 INS60 INS60 MOV60 INS60 INS60 INS60 MOV21 INS60 INS60 INS60 INS21 MOV21 MOV21 INS21 INS21 INS21 INS21 INS21 INS41 INS44 INS8 INS21 UPD42 MOV42 INS42 INS32 INS32 INS21 INS21 INS42 INS42 INS32 INS32 UPD42 INS32 INS42 MOV43 INS59 INS43 INS59 MOV43 INS43 INS59 INS43 MOV59 MOV43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 UPD43 MOV43 UPD42 MOV42 MOV53 INS32 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS34 INS7 INS32 INS32 UPD42 MOV42 MOV42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS42 INS32 MOV42 UPD42 INS42 INS32 UPD42 UPD42 INS40 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS42 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 UPD42 MOV42 UPD42 UPD42 INS40 INS32 INS42 INS42 INS40 INS40 INS3 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS40 INS42 INS42 INS32 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 UPD42 MOV42 INS9 UPD42 MOV42 INS42 INS42 MOV42 UPD42 MOV42 MOV42 INS32 INS33 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 INS42 INS9 INS5 INS4 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 INS40 INS40 INS40 INS9 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS43 INS85 INS42 UPD42 UPD42 MOV42 DEL40 DEL26 DEL32 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL32 DEL32 DEL45 DEL43 DEL42 DEL44 DEL43 DEL74 DEL60 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL74 DEL42 DEL44 DEL43 DEL42 DEL44 DEL32 DEL42 DEL40 DEL32 DEL32 DEL18 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL43 DEL42 DEL44 DEL42 DEL32 DEL32 DEL42 DEL43 DEL45 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8