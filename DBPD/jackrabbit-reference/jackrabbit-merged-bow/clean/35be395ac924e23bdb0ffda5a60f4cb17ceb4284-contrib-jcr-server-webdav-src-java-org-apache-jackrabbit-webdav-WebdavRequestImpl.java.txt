- [JCR-84] WebDAV LocatorFactoryImpl$Locator.getHref() constructs root resource URLs incorrectly
- adapting for jcr-locking support
- adding nodetype reports

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159607 13f79535-47bb-0310-9956-ffa450edef68

-public class WebdavRequestImpl implements WebdavRequest {
+public class WebdavRequestImpl implements WebdavRequest, DavConstants {
-    private int propfindType = DavConstants.PROPFIND_ALL_PROP;
+    private int propfindType = PROPFIND_ALL_PROP;
-     * @see DavConstants#HEADER_DESTINATION
+     * @see #HEADER_DESTINATION
-        String destination = httpRequest.getHeader(DavConstants.HEADER_DESTINATION);
+        String destination = httpRequest.getHeader(HEADER_DESTINATION);
-     * @see DavConstants#HEADER_OVERWRITE
+     * @see #HEADER_OVERWRITE
-	String overwriteHeader = httpRequest.getHeader(DavConstants.HEADER_OVERWRITE);
-	if (overwriteHeader != null && !overwriteHeader.equalsIgnoreCase(DavConstants.NO_OVERWRITE)){
+	String overwriteHeader = httpRequest.getHeader(HEADER_OVERWRITE);
+	if (overwriteHeader != null && !overwriteHeader.equalsIgnoreCase(NO_OVERWRITE)){
-	return DepthHeader.parse(httpRequest.getHeader(DavConstants.HEADER_DEPTH), defaultValue).getDepth();
+	return DepthHeader.parse(httpRequest.getHeader(HEADER_DEPTH), defaultValue).getDepth();
-        return getDepth(DavConstants.DEPTH_INFINITY);
+        return getDepth(DEPTH_INFINITY);
-	String timeoutStr = httpRequest.getHeader(DavConstants.HEADER_TIMEOUT);
-	long timeout = DavConstants.UNDEFINED_TIMEOUT;
+	String timeoutStr = httpRequest.getHeader(HEADER_TIMEOUT);
+	long timeout = UNDEFINED_TIMEOUT;
-	    } else if (timeoutStr.equalsIgnoreCase(DavConstants.TIMEOUT_INFINITE)) {
-		timeout = DavConstants.INFINITE_TIMEOUT;
+	    } else if (timeoutStr.equalsIgnoreCase(TIMEOUT_INFINITE)) {
+		timeout = INFINITE_TIMEOUT;
-     * @see DavConstants#HEADER_LOCK_TOKEN
+     * @see #HEADER_LOCK_TOKEN
-	return getCodedURLHeader(DavConstants.HEADER_LOCK_TOKEN);
+	return getCodedURLHeader(HEADER_LOCK_TOKEN);
-     * @return type of the PROPFIND request. Default value is
-     * {@link DavConstants#PROPFIND_ALL_PROP allprops}
+     * @return type of the PROPFIND request. Default value is {@link #PROPFIND_ALL_PROP allprops}
-	if (!root.getName().equals(DavConstants.XML_PROPFIND)) {
+	if (!root.getName().equals(XML_PROPFIND)) {
-	    if (DavConstants.XML_PROP.equals(nodeName)) {
-		propfindType = DavConstants.PROPFIND_BY_PROPERTY;
+	    if (XML_PROP.equals(nodeName)) {
+		propfindType = PROPFIND_BY_PROPERTY;
-	    } else if (DavConstants.XML_PROPNAME.equals(nodeName)) {
-		propfindType = DavConstants.PROPFIND_PROPERTY_NAMES;
+	    } else if (XML_PROPNAME.equals(nodeName)) {
+		propfindType = PROPFIND_PROPERTY_NAMES;
-	    } else if (DavConstants.XML_ALLPROP.equals(nodeName)) {
-		propfindType = DavConstants.PROPFIND_ALL_PROP;
+	    } else if (XML_ALLPROP.equals(nodeName)) {
+		propfindType = PROPFIND_ALL_PROP;
-        if (!root.getName().equals(DavConstants.XML_PROPERTYUPDATE)) {
+        if (!root.getName().equals(XML_PROPERTYUPDATE)) {
-        List setList = root.getChildren(DavConstants.XML_SET, DavConstants.NAMESPACE);
+        List setList = root.getChildren(XML_SET, NAMESPACE);
-                Element propElem = ((Element) setIter.next()).getChild(DavConstants.XML_PROP, DavConstants.NAMESPACE);
-                List properties = propElem.getChildren();
-                for (int i = 0; i < properties.size(); i++) {
-                    Element property = (Element) properties.get(i);
-                    proppatchSet.add(new DefaultDavProperty(property.getName(), property.getContent(), property.getNamespace()));
+                Element propElem = ((Element) setIter.next()).getChild(XML_PROP, NAMESPACE);
+                Iterator it = propElem.getChildren().iterator();
+                while (it.hasNext()) {
+                    Element propertyElem = (Element) it.next();
+                    proppatchSet.add(DefaultDavProperty.createFromXml(propertyElem));
-        List removeList = root.getChildren(DavConstants.XML_REMOVE, DavConstants.NAMESPACE);
+        List removeList = root.getChildren(XML_REMOVE, NAMESPACE);
-                Element propElem = ((Element) removeIter.next()).getChild(DavConstants.XML_PROP, DavConstants.NAMESPACE);
-                Iterator propIter = propElem.getChildren().iterator();
-                while (propIter.hasNext()) {
-                    Element property = (Element) propIter.next();
-                    proppatchRemove.add(DavPropertyName.create(property.getName(), property.getNamespace()));
+                Element propElem = ((Element) removeIter.next()).getChild(XML_PROP, NAMESPACE);
+                Iterator it = propElem.getChildren().iterator();
+                while (it.hasNext()) {
+                    Element propertyElem = (Element) it.next();
+                    proppatchRemove.add(DavPropertyName.createFromXml(propertyElem));
-        boolean isDeep = getDepth(DavConstants.DEPTH_INFINITY) == DavConstants.DEPTH_INFINITY;
+        boolean isDeep = (getDepth(DEPTH_INFINITY) == DEPTH_INFINITY);
-	    if (root.getName().equals(DavConstants.XML_LOCKINFO)) {
+	    if (root.getName().equals(XML_LOCKINFO)) {
-                int depth = getDepth(DavConstants.DEPTH_0);
-                return new SubscriptionInfo(root, getTimeout(), depth == DavConstants.DEPTH_INFINITY);
+                int depth = getDepth(DEPTH_0);
+                return new SubscriptionInfo(root, getTimeout(), depth == DEPTH_INFINITY);
-            int depth = getDepth(DavConstants.DEPTH_0);
+            int depth = getDepth(DEPTH_0);
-            rInfo = new ReportInfo(requestDocument.getRootElement(), getDepth(DavConstants.DEPTH_0));
+            rInfo = new ReportInfo(requestDocument.getRootElement(), getDepth(DEPTH_0));

INS43 INS42 INS42 UPD66 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS61 MOV32 INS42 INS42 INS42 INS42 UPD43 INS32 INS8 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV60 MOV21 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV43 INS42 INS42 MOV43 INS42 INS42 INS42 MOV42 MOV42 UPD42 INS32 UPD42 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 MOV43 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 DEL40 DEL42 DEL40 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL40 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24 DEL40 DEL40 DEL40 DEL40 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL40 DEL27 DEL40 DEL40 DEL40 DEL40 DEL40