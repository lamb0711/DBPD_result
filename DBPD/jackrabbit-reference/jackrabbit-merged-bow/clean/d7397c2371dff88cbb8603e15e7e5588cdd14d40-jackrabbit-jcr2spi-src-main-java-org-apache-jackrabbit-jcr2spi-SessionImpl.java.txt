JCR-1819 : Add specific deep loading of Nodes and Properties
JCR-1843 : wrong status change upon conflicting removal (CacheBehaviour.OBSERVATION)
JCR-1293 : ReorderReferenceableSNSTest failure
JCR-1811 : ExportSysViewTest#testExportSysView_handler_session_saveBinary_occasionally failing


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@709211 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.map.ReferenceMap;
+import org.apache.jackrabbit.jcr2spi.config.CacheBehaviour;
+import org.apache.jackrabbit.jcr2spi.config.RepositoryConfig;
+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyEntry;
-import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyEntry;
-import org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeManagerImpl;
-import org.apache.jackrabbit.jcr2spi.nodetype.ItemDefinitionProvider;
-import org.apache.jackrabbit.jcr2spi.nodetype.EffectiveNodeTypeProvider;
-import org.apache.jackrabbit.jcr2spi.security.AccessManager;
-import org.apache.jackrabbit.jcr2spi.state.SessionItemStateManager;
-import org.apache.jackrabbit.jcr2spi.state.UpdatableItemStateManager;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateValidator;
-import org.apache.jackrabbit.jcr2spi.state.ItemState;
-import org.apache.jackrabbit.jcr2spi.state.NodeState;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateFactory;
-import org.apache.jackrabbit.jcr2spi.xml.ImportHandler;
-import org.apache.jackrabbit.jcr2spi.xml.SessionImporter;
-import org.apache.jackrabbit.jcr2spi.xml.Importer;
-import org.apache.jackrabbit.jcr2spi.version.VersionManager;
+import org.apache.jackrabbit.jcr2spi.nodetype.EffectiveNodeTypeProvider;
+import org.apache.jackrabbit.jcr2spi.nodetype.ItemDefinitionProvider;
+import org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeManagerImpl;
-import org.apache.jackrabbit.jcr2spi.config.RepositoryConfig;
-import org.apache.jackrabbit.jcr2spi.config.CacheBehaviour;
-import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-import org.apache.jackrabbit.spi.SessionInfo;
-import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.jcr2spi.security.AccessManager;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateFactory;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateValidator;
+import org.apache.jackrabbit.jcr2spi.state.NodeState;
+import org.apache.jackrabbit.jcr2spi.state.PropertyState;
+import org.apache.jackrabbit.jcr2spi.state.SessionItemStateManager;
+import org.apache.jackrabbit.jcr2spi.state.UpdatableItemStateManager;
+import org.apache.jackrabbit.jcr2spi.version.VersionManager;
+import org.apache.jackrabbit.jcr2spi.xml.ImportHandler;
+import org.apache.jackrabbit.jcr2spi.xml.Importer;
+import org.apache.jackrabbit.jcr2spi.xml.SessionImporter;
-import org.apache.jackrabbit.spi.XASessionInfo;
-import org.apache.jackrabbit.spi.QValueFactory;
+import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.commons.value.ValueFactoryQImpl;
-import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
-import org.apache.jackrabbit.spi.commons.conversion.PathResolver;
-import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.apache.jackrabbit.spi.QValueFactory;
+import org.apache.jackrabbit.spi.SessionInfo;
+import org.apache.jackrabbit.spi.XASessionInfo;
-import org.apache.commons.collections.map.ReferenceMap;
-import org.slf4j.LoggerFactory;
+import org.apache.jackrabbit.spi.commons.conversion.NameException;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.apache.jackrabbit.spi.commons.conversion.PathResolver;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
+import org.apache.jackrabbit.spi.commons.value.ValueFactoryQImpl;
+import org.slf4j.LoggerFactory;
-import javax.jcr.version.VersionException;
-import javax.xml.parsers.SAXParserFactory;
-import javax.xml.parsers.SAXParser;
+import javax.jcr.version.VersionException;
-
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
-            HierarchyEntry hierarchyEntry = getHierarchyManager().getHierarchyEntry(id);
-            Item item = getItemManager().getItem(hierarchyEntry);
+            NodeEntry nodeEntry = getHierarchyManager().getNodeEntry(id);
+            Item item = getItemManager().getItem(nodeEntry);
-            Path qPath = getQPath(absPath);
-            return getItemManager().getItem(qPath.getNormalizedPath());
+            Path qPath = getQPath(absPath).getNormalizedPath();
+            ItemManager itemMgr = getItemManager();
+            if (itemMgr.nodeExists(qPath)) {
+                return itemMgr.getNode(qPath);
+            } else {
+                return itemMgr.getProperty(qPath);
+            }
-        Path qPath = getQPath(absPath);
-        return getItemManager().itemExists(qPath.getNormalizedPath());
+        Path qPath = getQPath(absPath).getNormalizedPath();
+        ItemManager itemMgr = getItemManager();
+        return (itemMgr.nodeExists(qPath)) ? true : itemMgr.propertyExists(qPath);
-        if (itemExists(absPath)) {
-            ItemState itemState = getHierarchyManager().getItemState(targetPath);
-            isGranted = getAccessManager().isGranted(itemState, actionsArr);
+        if (itemManager.nodeExists(targetPath)) {
+            NodeState nState = getHierarchyManager().getNodeState(targetPath);
+            isGranted = getAccessManager().isGranted(nState, actionsArr);
+        } else if (itemManager.propertyExists(targetPath)) {
+            PropertyState pState = getHierarchyManager().getPropertyState(targetPath);
+            isGranted = getAccessManager().isGranted(pState, actionsArr);
-                if (itemManager.itemExists(parentPath)) {
-                    ItemState itemState = getHierarchyManager().getItemState(parentPath);
-                    if (itemState.isNode()) {
-                        parentState = (NodeState) itemState;
-                    }
+                if (itemManager.nodeExists(parentPath)) {
+                    parentState = getHierarchyManager().getNodeState(parentPath);
-        ItemState itemState;
+        NodeState nodeState;
-            itemState = ((NodeImpl) version).getItemState();
+            nodeState = (NodeState) ((NodeImpl) version).getItemState();
-            itemState = getHierarchyManager().getItemState(p);
+            nodeState = getHierarchyManager().getNodeState(p);
-        return (NodeState) itemState;
+        return nodeState;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 INS60 INS8 INS43 INS59 INS16 INS25 UPD43 INS42 MOV60 INS60 INS25 INS32 INS42 INS42 MOV32 INS36 INS9 INS32 INS42 UPD42 UPD42 INS32 MOV8 MOV8 UPD42 UPD42 UPD43 INS43 INS59 INS32 INS8 INS8 MOV32 INS42 INS32 INS42 INS42 UPD42 MOV42 MOV43 INS42 INS42 INS42 MOV21 UPD42 UPD42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 MOV41 INS41 INS42 UPD42 MOV42 MOV42 UPD42 UPD43 UPD42 INS11 UPD42 UPD42 UPD42 MOV32 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 MOV43 MOV32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS8 INS42 UPD42 INS21 INS7 INS42 INS32 INS32 INS42 INS42 INS42 DEL32 DEL8 DEL32 DEL32 DEL42 DEL11 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL11