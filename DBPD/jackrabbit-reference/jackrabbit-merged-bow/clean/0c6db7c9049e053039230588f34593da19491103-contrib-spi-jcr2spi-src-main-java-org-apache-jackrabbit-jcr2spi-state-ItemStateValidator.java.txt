work in progress

- remove 'add' and 'set' methods on NodeState/PropertyState, that were
  used for initialization and did not mark the state modified. this
  was confusing, since similar methods called 'markmodified'.
  replaced by an 'init' method.
- SessionISM: fix options for addMixin (should not check for protected)
- move validation of PropertyState from ItemStateValidator to state.
- add TODO: TransientISM must clean up operations upon status changes.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@453120 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.nodetype.ValueConstraint;
-import javax.jcr.PropertyType;
-import org.apache.jackrabbit.value.QValue;
-    /**
-     * Checks whether the given property parameters are consistent and satisfy
-     * the constraints specified by the given definition. The following
-     * validations/checks are performed:
-     * <ul>
-     * <li>make sure the type is not undefined and matches the type of all
-     * values given</li>
-     * <li>make sure all values have the same type.</li>
-     * <li>check if the type of the property values does comply with the
-     * requiredType specified in the property's definition</li>
-     * <li>check if the property values satisfy the value constraints
-     * specified in the property's definition</li>
-     * </ul>
-     *
-     * @param propertyType
-     * @param values
-     * @param definition
-     * @throws ConstraintViolationException If any of the validations fails.
-     * @throws RepositoryException If another error occurs.
-     */
-    public void validate(int propertyType, QValue[] values, QPropertyDefinition definition)
-        throws ConstraintViolationException, RepositoryException {
-        if (propertyType == PropertyType.UNDEFINED) {
-            throw new RepositoryException("'Undefined' is not a valid property type for existing values.");
-        }
-        if (definition.getRequiredType() != PropertyType.UNDEFINED && definition.getRequiredType() != propertyType) {
-            throw new ConstraintViolationException("RequiredType constraint is not satisfied");
-        }
-        for (int i = 0; i < values.length; i++) {
-            if (propertyType != values[i].getType()) {
-                throw new ConstraintViolationException("Inconsistent value types: Required type = " + PropertyType.nameFromValue(propertyType) + "; Found value with type = " + PropertyType.nameFromValue(values[i].getType()));
-            }
-        }
-        ValueConstraint.checkValueConstraints(definition, values);
-    }
-

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL42 DEL27 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31