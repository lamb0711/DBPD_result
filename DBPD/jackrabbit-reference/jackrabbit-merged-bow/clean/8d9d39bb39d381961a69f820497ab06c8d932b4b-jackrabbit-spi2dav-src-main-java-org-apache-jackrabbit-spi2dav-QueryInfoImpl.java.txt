JCR-3198: Broken handling of outer join results over davex

Return the set of selector names as a part of the response description field along with column names.

For compatibility with earlier clients/servers this new functionality (and extensible) functionality is only enabled when the search request is made with the query language qualified with the JCR WebDAV extension namespace.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1227240 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Set;
-import java.util.HashSet;
-import org.apache.jackrabbit.spi.Name;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-    /**
-     * Logger instance for this class.
-     */
-    private static final Logger log = LoggerFactory.getLogger(QueryInfoImpl.class);
+    private static final String COLUMNS = "Columns: ";
-    private final String[] columnNames;
+    private static final String SELECTORS = "Selectors: ";
+
+    private final List<String> columnNames = new ArrayList<String>();
+
+    private final List<String> selectorNames = new ArrayList<String>();
-        if (responseDescription != null) {
-            String[] cn = responseDescription.split(" ");
-            this.columnNames = new String[cn.length];
-            for (int i = 0; i < cn.length; i++) {
-                columnNames[i] = ISO9075.decode(cn[i]);
+        if (responseDescription == null) {
+            throw new RepositoryException(
+                    "Missing column infos: Unable to build QueryInfo object.");
+        }
+        if (responseDescription.startsWith(COLUMNS)) {
+            for (String line : responseDescription.split("\n")) {
+                if (line.startsWith(COLUMNS)) {
+                    decode(line.substring(COLUMNS.length()), columnNames);
+                } else if (line.startsWith(SELECTORS)) {
+                    decode(line.substring(SELECTORS.length()), selectorNames);
+                }
-            throw new RepositoryException("Missing column infos: Unable to build QueryInfo object.");
+            // Backwards compatibility with old servers that only provide
+            // the list of columns as the response description
+            decode(responseDescription, columnNames);
-            results.add(new QueryResultRowImpl(response, columnNames, resolver,
+            results.add(new QueryResultRowImpl(
+                    response, getColumnNames(), resolver,
+     * Splits the given string at spaces and ISO9075-decodes the parts.
+     *
+     * @param string source string
+     * @param list where the decoded parts get added
+     */
+    private void decode(String string, List<String> list) {
+        String[] parts = string.split(" ");
+        for (int i = 0; i < parts.length; i++) {
+            list.add(ISO9075.decode(parts[i]));
+        }
+    }
+
+    /**
-        String[] names = new String[columnNames.length];
-        System.arraycopy(columnNames, 0, names, 0, columnNames.length);
-        return names;
+        return columnNames.toArray(new String[columnNames.size()]);
-    public Name[] getSelectorNames() {
-        if (results.isEmpty()) {
-            // TODO: this is not correct
-            return Name.EMPTY_ARRAY;
-        } else {
-            Set<Name> uniqueNames = new HashSet<Name>();
-            QueryResultRowImpl row = (QueryResultRowImpl) results.get(0);
-            for (Name n : row.getSelectorNames()) {
-                if (n != null) {
-                    uniqueNames.add(n);
-                }
-            }
-            return uniqueNames.toArray(new Name[uniqueNames.size()]);
-        }
+    public String[] getSelectorNames() {
+        return selectorNames.toArray(new String[selectorNames.size()]);

INS23 INS23 INS23 INS31 INS31 INS31 MOV83 MOV83 MOV83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS74 INS29 UPD83 MOV83 INS39 INS42 INS44 INS44 INS8 MOV29 INS83 MOV5 INS42 INS8 MOV29 INS83 MOV5 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS42 INS14 INS43 INS43 UPD42 INS14 INS25 INS25 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS60 INS24 MOV41 INS41 UPD42 MOV42 INS42 INS74 INS42 INS42 INS74 UPD27 MOV27 MOV8 INS32 MOV8 INS8 INS66 INS42 INS66 INS42 INS66 UPD42 MOV42 UPD43 MOV43 UPD43 MOV43 MOV5 MOV59 MOV58 INS27 MOV37 INS8 INS32 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS70 INS21 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 INS40 MOV21 UPD42 INS42 INS42 MOV3 INS42 UPD42 MOV42 INS42 INS42 INS44 INS32 INS8 INS32 UPD42 MOV42 UPD42 MOV42 INS45 MOV5 INS32 INS43 INS42 MOV42 MOV42 UPD45 MOV45 INS25 INS42 INS42 INS42 UPD42 INS32 UPD42 INS42 INS42 MOV42 INS32 INS8 INS25 INS32 UPD42 MOV42 INS42 INS2 INS42 INS42 INS42 MOV21 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 MOV21 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL43 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL52 DEL42 DEL22 DEL7 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL32 DEL7 DEL43 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL8 DEL24 DEL25 DEL42 DEL42 DEL43 DEL34 DEL32 DEL11 DEL42 DEL43 DEL85 DEL5 DEL40 DEL83 DEL42 DEL42 DEL40 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL43 DEL42 DEL43 DEL74 DEL42 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31