JCR-231: Avoid using the RangedIterator.getSize() method that might return -1.
Made some small cleanups in the getRemoteXxxArray methods.
Moved a part of the code from ServerQueryResult.getRows() up to ServerObject.getRemotRowArray() for consistency.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@293078 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import javax.jcr.query.RowIterator;
+import org.apache.jackrabbit.rmi.remote.RemoteRow;
-        if (iterator == null) {
+        if (iterator != null) {
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(factory.getRemoteProperty(iterator.nextProperty()));
+            }
+            return (RemoteProperty[]) remotes.toArray(new RemoteProperty[remotes.size()]);
+        } else {
-
-        RemoteProperty[] remotes = new RemoteProperty[(int) iterator.getSize()];
-        for (int i = 0; iterator.hasNext(); i++) {
-            remotes[i] = factory.getRemoteProperty(iterator.nextProperty());
-        }
-        return remotes;
-            RemoteNode[] remotes = new RemoteNode[(int) iterator.getSize()];
-            for (int i = 0; iterator.hasNext(); i++) {
-                remotes[i] = getRemoteNode(iterator.nextNode());
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(getRemoteNode(iterator.nextNode()));
-            return remotes;
+            return (RemoteNode[]) remotes.toArray(new RemoteNode[remotes.size()]);
-            RemoteVersion[] remotes = new RemoteVersion[(int) iterator.getSize()];
-            for (int i = 0; iterator.hasNext(); i++) {
-                remotes[i] = factory.getRemoteVersion(iterator.nextVersion());
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(factory.getRemoteVersion(iterator.nextVersion()));
-            return remotes;
+            return (RemoteVersion[]) remotes.toArray(new RemoteVersion[remotes.size()]);
-            RemoteNodeType[] remotes =
-                new RemoteNodeType[(int) iterator.getSize()];
-            for (int i = 0; iterator.hasNext(); i++) {
-                remotes[i] = factory.getRemoteNodeType(iterator.nextNodeType());
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(factory.getRemoteNodeType(iterator.nextNodeType()));
-            return remotes;
+            return (RemoteNodeType[]) remotes.toArray(new RemoteNodeType[remotes.size()]);
+    /**
+     * Utility method for creating an array of remote references for
+     * local query result rows. The remote references are created using the
+     * remote adapter factory.
+     * <p>
+     * A <code>null</code> input is treated as an empty iterator.
+     *
+     * @param iterator local query result row iterator
+     * @return remote query result row array
+     * @throws RemoteException on RMI errors
+     */
+    protected RemoteRow[] getRemoteRowArray(RowIterator iterator)
+            throws RemoteException {
+        if (iterator != null) {
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(getFactory().getRemoteRow(iterator.nextRow()));
+            }
+            return (RemoteRow[]) remotes.toArray(new RemoteRow[remotes.size()]);
+        } else {
+            return new RemoteRow[0]; // for safety
+        }
+    }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS25 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS42 INS25 UPD27 MOV27 INS8 MOV8 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS8 MOV60 INS61 INS41 INS61 INS41 INS61 INS41 INS61 INS41 INS42 INS33 INS60 INS61 INS41 INS41 INS43 MOV32 MOV8 INS11 INS43 MOV32 MOV8 INS11 INS43 MOV32 MOV8 INS11 INS43 MOV32 MOV8 INS11 INS43 INS59 INS32 INS8 INS11 INS3 INS42 INS14 MOV5 INS32 INS42 INS14 MOV5 INS32 INS42 INS14 MOV5 INS32 INS42 INS14 MOV5 INS32 INS42 INS42 INS14 INS42 INS42 INS21 INS5 INS32 INS5 INS34 INS43 INS32 INS42 INS42 INS3 INS43 INS32 INS42 INS42 INS3 INS43 INS32 INS42 INS42 INS3 INS43 INS32 INS42 INS42 INS3 INS43 INS32 INS43 INS85 INS42 INS42 INS3 INS43 INS85 INS42 INS42 INS42 MOV32 MOV5 INS32 INS42 INS42 INS42 MOV32 MOV5 INS32 INS42 INS42 INS42 MOV32 MOV5 INS32 INS42 INS42 INS42 MOV32 MOV5 INS32 INS42 INS42 INS42 INS32 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL42 DEL32 DEL11 DEL3 DEL42 DEL42 DEL2 DEL7 DEL25 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL37 DEL24 DEL42 DEL41 DEL39 DEL42 DEL42 DEL32 DEL11 DEL3 DEL42 DEL42 DEL2 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL37 DEL24 DEL42 DEL41 DEL39 DEL42 DEL42 DEL32 DEL11 DEL3 DEL42 DEL42 DEL2 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL37 DEL24 DEL42 DEL41 DEL39 DEL42 DEL42 DEL32 DEL11 DEL3 DEL42 DEL42 DEL2 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL37 DEL24 DEL42 DEL41