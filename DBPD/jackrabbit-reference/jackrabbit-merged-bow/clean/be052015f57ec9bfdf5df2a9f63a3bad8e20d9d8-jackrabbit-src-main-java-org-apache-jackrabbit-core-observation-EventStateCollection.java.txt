JCR-257: Use separate index for jcr:system tree

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@388123 13f79535-47bb-0310-9956-ffa450edef68

+     * The prefix to use for the event paths or <code>null</code> if no prefix
+     * should be used.
+     */
+    private final Path pathPrefix;
+
+    /**
+     * <p/>
+     * Because the item state manager in {@link #createEventStates} may represent
+     * only a subset of the over all item state hierarchy, this constructor
+     * also takes a path prefix argument. If non <code>null</code> all events
+     * created by this collection are prefixed with this path.
-     * @param session the session that created these events.
+     * @param session    the session that created these events.
+     * @param pathPrefix the path to prefix the event paths or <code>null</code>
+     *                   if no prefix should be used.
-                         SessionImpl session) {
+                         SessionImpl session,
+                         Path pathPrefix) {
+        this.pathPrefix = pathPrefix;
-     * @param provider     an <code>ItemStateProvider</code> to provide <code>ItemState</code>
+     * @param stateMgr     an <code>ItemStateManager</code> to provide <code>ItemState</code>
-    public void createEventStates(NodeId rootNodeId, ChangeLog changes, ItemStateManager provider) throws ItemStateException {
+    public void createEventStates(NodeId rootNodeId, ChangeLog changes, ItemStateManager stateMgr) throws ItemStateException {
-                new ChangeLogBasedHierarchyMgr(rootNodeId, provider, changes,
+                new ChangeLogBasedHierarchyMgr(rootNodeId, stateMgr, changes,
-                            oldParent = (NodeState) provider.getItemState(oldParentId);
+                            oldParent = (NodeState) stateMgr.getItemState(oldParentId);
-                NodeState parent = (NodeState) provider.getItemState(state.getParentId());
+                NodeState parent = (NodeState) stateMgr.getItemState(state.getParentId());
-                NodeState parent = (NodeState) provider.getItemState(n.getParentId());
+                NodeState parent = (NodeState) stateMgr.getItemState(n.getParentId());
-                if (provider.hasItemState(parentId)) {
-                    parent = (NodeState) provider.getItemState(parentId);
+                if (stateMgr.hasItemState(parentId)) {
+                    parent = (NodeState) stateMgr.getItemState(parentId);
+     * Returns the path prefix for this event state collection or <code>null</code>
+     * if no path prefix was set in the constructor of this collection. See
+     * also {@link EventStateCollection#EventStateCollection}.
+     *
+     * @return the path prefix for this event state collection.
+     */
+    public Path getPathPrefix() {
+        return pathPrefix;
+    }
+
+    /**
-            return hmgr.getPath(itemId);
+            return prefixPath(hmgr.getPath(itemId));
-            return hmgr.getZombiePath(itemId);
+            return prefixPath(hmgr.getZombiePath(itemId));
+
+    /**
+     * Prefixes the Path <code>p</code> with {@link #pathPrefix}.
+     *
+     * @param p the Path to prefix.
+     * @return the prefixed path or <code>p</code> itself if {@link #pathPrefix}
+     *         is <code>null</code>.
+     * @throws RepositoryException if the path cannot be prefixed.
+     */
+    private Path prefixPath(Path p) throws RepositoryException {
+        if (pathPrefix == null) {
+            return p;
+        }
+        Path.PathBuilder builder = new Path.PathBuilder(pathPrefix.getElements());
+        Path.PathElement[] elements = p.getElements();
+        for (int i = 0; i < elements.length; i++) {
+            if (elements[i].denotesRoot()) {
+                continue;
+            }
+            builder.addLast(elements[i]);
+        }
+        try {
+            return builder.getPath();
+        } catch (MalformedPathException e) {
+            throw new RepositoryException(e);
+        }
+    }

INS23 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS65 INS43 INS42 INS21 UPD42 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS60 INS60 INS24 INS54 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 UPD66 INS42 INS66 INS66 INS42 INS7 UPD42 UPD66 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS27 INS8 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS8 INS12 INS67 INS22 INS42 INS67 INS67 INS67 INS42 INS33 INS41 INS40 INS42 INS14 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS25 INS21 INS41 INS44 INS8 INS42 INS52 INS42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS32 INS40 INS42 INS42 INS42 INS34 INS32 INS8 INS32 INS32 INS43 INS42 INS53 INS42 MOV32 INS42 MOV32 INS40 INS42 INS42 INS2 INS42 INS18 INS42 INS42 INS2 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42