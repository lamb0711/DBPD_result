comparing node type definitions (analyzing type of change)
some reformatting (removing tab characters

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@112006 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.version.VersionManager;
+import org.apache.jackrabbit.core.version.VersionManager;
+import javax.jcr.nodetype.ConstraintViolationException;
-import javax.jcr.nodetype.ConstraintViolationException;
-    /** list of all reference properties that need to be adjusted */
+    /**
+     * list of all reference properties that need to be adjusted
+     */
-    /** list of all mix:referenceable */
+    /**
+     * list of all mix:referenceable
+     */
-	ImportState state = new ImportState();
-	state.node = importTargetNode;
-	this.session = session;
-	stateStack.push(state);
+        ImportState state = new ImportState();
+        state.node = importTargetNode;
+        this.session = session;
+        stateStack.push(state);
-	try {
-	    String elemName;
-	    String nsURI;
-	    if (namespaceURI != null && !"".equals(namespaceURI)) {
-		nsURI = namespaceURI;
-		elemName = localName;
-	    } else {
-		try {
-		    nsURI = QName.fromJCRName(qName, session.getNamespaceResolver()).getNamespaceURI();
-		    elemName = QName.fromJCRName(qName, session.getNamespaceResolver()).getLocalName();
-		} catch (BaseException e) {
-		    // should never happen...
-		    String msg = "internal error: failed to parse/resolve element name " + qName;
-		    log.error(msg, e);
-		    throw new SAXException(msg, e);
-		}
-	    }
-	    // check namespace
-	    if (!NamespaceRegistryImpl.NS_SV_URI.equals(nsURI)) {
-		throw new SAXException(new InvalidSerializedDataException("invalid namespace for element in system view xml document: " + nsURI));
-	    }
-	    // check element name
-	    if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
-		// sv:node element
+        try {
+            String elemName;
+            String nsURI;
+            if (namespaceURI != null && !"".equals(namespaceURI)) {
+                nsURI = namespaceURI;
+                elemName = localName;
+            } else {
+                try {
+                    nsURI = QName.fromJCRName(qName, session.getNamespaceResolver()).getNamespaceURI();
+                    elemName = QName.fromJCRName(qName, session.getNamespaceResolver()).getLocalName();
+                } catch (BaseException e) {
+                    // should never happen...
+                    String msg = "internal error: failed to parse/resolve element name " + qName;
+                    log.error(msg, e);
+                    throw new SAXException(msg, e);
+                }
+            }
+            // check namespace
+            if (!NamespaceRegistryImpl.NS_SV_URI.equals(nsURI)) {
+                throw new SAXException(new InvalidSerializedDataException("invalid namespace for element in system view xml document: " + nsURI));
+            }
+            // check element name
+            if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
+                // sv:node element
-		// node name (value of sv:name attribute)
-		String name = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-		if (name == null) {
-		    // try qualified name
-		    name = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-		}
-		if (name == null) {
-		    throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:name attributeof element sv:node"));
-		}
+                // node name (value of sv:name attribute)
+                String name = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.NAME_ATTRIBUTE);
+                if (name == null) {
+                    // try qualified name
+                    name = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.NAME_ATTRIBUTE);
+                }
+                if (name == null) {
+                    throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:name attributeof element sv:node"));
+                }
-		ImportState current = (ImportState) stateStack.peek();
-		if (current.node == null) {
-		    // need to create current node first
-		    createNode(current);
-		}
+                ImportState current = (ImportState) stateStack.peek();
+                if (current.node == null) {
+                    // need to create current node first
+                    createNode(current);
+                }
-		// push new ImportState instance onto the stack
-		ImportState state = new ImportState();
-		state.parent = current.node;
-		try {
-		    state.nodeName = QName.fromJCRName(name, session.getNamespaceResolver());
-		} catch (IllegalNameException ine) {
-		    throw new SAXException(new InvalidSerializedDataException("illegal node name: " + name, ine));
-		} catch (UnknownPrefixException upe) {
-		    throw new SAXException(new InvalidSerializedDataException("illegal node name: " + name, upe));
-		}
-		stateStack.push(state);
-	    } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
-		// sv:property element
+                // push new ImportState instance onto the stack
+                ImportState state = new ImportState();
+                state.parent = current.node;
+                try {
+                    state.nodeName = QName.fromJCRName(name, session.getNamespaceResolver());
+                } catch (IllegalNameException ine) {
+                    throw new SAXException(new InvalidSerializedDataException("illegal node name: " + name, ine));
+                } catch (UnknownPrefixException upe) {
+                    throw new SAXException(new InvalidSerializedDataException("illegal node name: " + name, upe));
+                }
+                stateStack.push(state);
+            } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
+                // sv:property element
-		// reset temp fields
-		currentPropValues = new ArrayList();
+                // reset temp fields
+                currentPropValues = new ArrayList();
-		// property name (value of sv:name attribute)
-		String name = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-		if (name == null) {
-		    // try qualified name
-		    name = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-		}
-		if (name == null) {
-		    throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:name attributeof element sv:property"));
-		}
-		try {
-		    currentPropName = QName.fromJCRName(name, session.getNamespaceResolver());
-		} catch (IllegalNameException ine) {
-		    throw new SAXException(new InvalidSerializedDataException("illegal property name: " + name, ine));
-		} catch (UnknownPrefixException upe) {
-		    throw new SAXException(new InvalidSerializedDataException("illegal property name: " + name, upe));
-		}
-		// property type (sv:type attribute)
-		String type = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.TYPE_ATTRIBUTE);
-		if (type == null) {
-		    // try qualified name
-		    type = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.TYPE_ATTRIBUTE);
-		}
-		if (type == null) {
-		    throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:type attributeof element sv:property"));
-		}
-		currentPropType = PropertyType.valueFromName(type);
-	    } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
-		// sv:value element
+                // property name (value of sv:name attribute)
+                String name = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.NAME_ATTRIBUTE);
+                if (name == null) {
+                    // try qualified name
+                    name = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.NAME_ATTRIBUTE);
+                }
+                if (name == null) {
+                    throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:name attributeof element sv:property"));
+                }
+                try {
+                    currentPropName = QName.fromJCRName(name, session.getNamespaceResolver());
+                } catch (IllegalNameException ine) {
+                    throw new SAXException(new InvalidSerializedDataException("illegal property name: " + name, ine));
+                } catch (UnknownPrefixException upe) {
+                    throw new SAXException(new InvalidSerializedDataException("illegal property name: " + name, upe));
+                }
+                // property type (sv:type attribute)
+                String type = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.TYPE_ATTRIBUTE);
+                if (type == null) {
+                    // try qualified name
+                    type = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.TYPE_ATTRIBUTE);
+                }
+                if (type == null) {
+                    throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:type attributeof element sv:property"));
+                }
+                currentPropType = PropertyType.valueFromName(type);
+            } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
+                // sv:value element
-		// reset temp fields
-		currentPropValue = new StringBuffer();
-	    } else {
-		throw new SAXException(new InvalidSerializedDataException("unexpected element found in system view xml document: " + elemName));
-	    }
-	} catch (RepositoryException re) {
-	    throw new SAXException(re);
-	}
+                // reset temp fields
+                currentPropValue = new StringBuffer();
+            } else {
+                throw new SAXException(new InvalidSerializedDataException("unexpected element found in system view xml document: " + elemName));
+            }
+        } catch (RepositoryException re) {
+            throw new SAXException(re);
+        }
-	if (currentPropValue != null) {
-	    // property value (character data of sv:value element)
-	    currentPropValue.append(ch, start, length);
-	}
+        if (currentPropValue != null) {
+            // property value (character data of sv:value element)
+            currentPropValue.append(ch, start, length);
+        }
-	try {
-	    String elemName;
-	    if (localName != null && !"".equals(localName)) {
-		elemName = localName;
-	    } else {
-		try {
-		    elemName = QName.fromJCRName(qName, session.getNamespaceResolver()).getLocalName();
-		} catch (BaseException e) {
-		    // should never happen...
-		    String msg = "internal error: failed to parse/resolve element name " + qName;
-		    log.error(msg, e);
-		    throw new SAXException(msg, e);
-		}
-	    }
-	    // check element name
-	    ImportState current = (ImportState) stateStack.peek();
-	    if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
-		// sv:node element
-		if (current.node == null) {
-		    // need to create current node first
-		    createNode(current);
-		}
-		// pop current state from stack
-		stateStack.pop();
-	    } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
-		// sv:property element
+        try {
+            String elemName;
+            if (localName != null && !"".equals(localName)) {
+                elemName = localName;
+            } else {
+                try {
+                    elemName = QName.fromJCRName(qName, session.getNamespaceResolver()).getLocalName();
+                } catch (BaseException e) {
+                    // should never happen...
+                    String msg = "internal error: failed to parse/resolve element name " + qName;
+                    log.error(msg, e);
+                    throw new SAXException(msg, e);
+                }
+            }
+            // check element name
+            ImportState current = (ImportState) stateStack.peek();
+            if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
+                // sv:node element
+                if (current.node == null) {
+                    // need to create current node first
+                    createNode(current);
+                }
+                // pop current state from stack
+                stateStack.pop();
+            } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
+                // sv:property element
-		// check if all system properties (jcr:primaryType, jcr:uuid etc.)
-		// have been collected and create node as necessary
-		if (currentPropName.equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
-		    try {
-			current.primaryType = QName.fromJCRName((String) currentPropValues.get(0), session.getNamespaceResolver());
-		    } catch (IllegalNameException ine) {
-			throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + currentPropValues.get(0), ine));
-		    } catch (UnknownPrefixException upe) {
-			throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + currentPropValues.get(0), upe));
-		    }
-		} else if (currentPropName.equals(ItemImpl.PROPNAME_MIXINTYPES)) {
-		    if (current.mixinTypes == null) {
-			current.mixinTypes = new ArrayList(currentPropValues.size());
-		    }
-		    for (int i = 0; i < currentPropValues.size(); i++) {
-			try {
-			    QName mixin = QName.fromJCRName((String) currentPropValues.get(i), session.getNamespaceResolver());
-			    current.mixinTypes.add(mixin);
-			} catch (IllegalNameException ine) {
-			    throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + currentPropValues.get(i), ine));
-			} catch (UnknownPrefixException upe) {
-			    throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + currentPropValues.get(i), upe));
-			}
-		    }
-		} else if (currentPropName.equals(ItemImpl.PROPNAME_UUID)) {
-		    current.uuid = (String) currentPropValues.get(0);
-		    // jcr:uuid is the last system property; we can assume that all
-		    // required system properties have been collected by now
-		    if (current.node == null) {
-			// now that we're collected all required system properties
-			// we're ready to create the node
-			createNode(current);
-		    }
-		} else if (currentPropName.equals(VersionManager.PROPNAME_BASE_VERSION)) {
-                    // ignore so far
-		} else if (currentPropName.equals(VersionManager.PROPNAME_VERSION_HISTORY)) {
-                    // ignore so far
-		} else if (currentPropName.equals(VersionManager.PROPNAME_PREDECESSORS)) {
-                    // ignore so far
-		} else if (currentPropName.equals(VersionManager.PROPNAME_IS_CHECKED_OUT)) {
-                    // ignore so far
-		} else {
-		    // non-system property encountered; we can assume that all
-		    // required system properties have been collected by now
-		    if (current.node == null) {
-			// now that we're collected all required system properties
-			// we're ready to create the node
-			createNode(current);
-		    }
+                // check if all system properties (jcr:primaryType, jcr:uuid etc.)
+                // have been collected and create node as necessary
+                if (currentPropName.equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
+                    try {
+                        current.primaryType = QName.fromJCRName((String) currentPropValues.get(0), session.getNamespaceResolver());
+                    } catch (IllegalNameException ine) {
+                        throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + currentPropValues.get(0), ine));
+                    } catch (UnknownPrefixException upe) {
+                        throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + currentPropValues.get(0), upe));
+                    }
+                } else if (currentPropName.equals(ItemImpl.PROPNAME_MIXINTYPES)) {
+                    if (current.mixinTypes == null) {
+                        current.mixinTypes = new ArrayList(currentPropValues.size());
+                    }
+                    for (int i = 0; i < currentPropValues.size(); i++) {
+                        try {
+                            QName mixin = QName.fromJCRName((String) currentPropValues.get(i), session.getNamespaceResolver());
+                            current.mixinTypes.add(mixin);
+                        } catch (IllegalNameException ine) {
+                            throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + currentPropValues.get(i), ine));
+                        } catch (UnknownPrefixException upe) {
+                            throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + currentPropValues.get(i), upe));
+                        }
+                    }
+                } else if (currentPropName.equals(ItemImpl.PROPNAME_UUID)) {
+                    current.uuid = (String) currentPropValues.get(0);
+                    // jcr:uuid is the last system property; we can assume that all
+                    // required system properties have been collected by now
+                    if (current.node == null) {
+                        // now that we're collected all required system properties
+                        // we're ready to create the node
+                        createNode(current);
+                    }
+                } else if (currentPropName.equals(VersionManager.PROPNAME_BASE_VERSION)) {
+// ignore so far
+                } else if (currentPropName.equals(VersionManager.PROPNAME_VERSION_HISTORY)) {
+// ignore so far
+                } else if (currentPropName.equals(VersionManager.PROPNAME_PREDECESSORS)) {
+// ignore so far
+                } else if (currentPropName.equals(VersionManager.PROPNAME_IS_CHECKED_OUT)) {
+// ignore so far
+                } else {
+                    // non-system property encountered; we can assume that all
+                    // required system properties have been collected by now
+                    if (current.node == null) {
+                        // now that we're collected all required system properties
+                        // we're ready to create the node
+                        createNode(current);
+                    }
-		    // convert values to native type and set property
-		    Value[] vals = new Value[currentPropValues.size()];
-		    for (int i = 0; i < currentPropValues.size(); i++) {
-			String value = (String) currentPropValues.get(i);
-			if (currentPropType == PropertyType.BINARY) {
-			    // base64 encoded binary value
-			    ByteArrayOutputStream baos = new ByteArrayOutputStream();
-			    try {
-				Base64.decode(value, baos);
-				baos.close();
-			    } catch (IOException ioe) {
-				throw new SAXException("failed to decode binary value", ioe);
-			    }
-			    vals[i] = new BinaryValue(baos.toByteArray());
-			} else {
-			    vals[i] = ValueHelper.convert(value, currentPropType);
-			}
-		    }
-		    if (current.node.hasProperty(currentPropName)) {
-			PropertyDef def = current.node.getProperty(currentPropName).getDefinition();
-			if (def.isProtected()) {
-			    // ignore protected property
-			    // reset temp fields and get outta here
-			    currentPropValues = null;
-			    return;
-			}
-		    }
-		    // multi- or single-valued property?
-		    if (vals.length == 1) {
-			// could be single- or multi-valued (n == 1)
-			try {
-			    // try setting single-value
-			    current.node.setProperty(currentPropName, vals[0]);
-			} catch (ValueFormatException vfe) {
+                    // convert values to native type and set property
+                    Value[] vals = new Value[currentPropValues.size()];
+                    for (int i = 0; i < currentPropValues.size(); i++) {
+                        String value = (String) currentPropValues.get(i);
+                        if (currentPropType == PropertyType.BINARY) {
+                            // base64 encoded binary value
+                            ByteArrayOutputStream baos = new ByteArrayOutputStream();
+                            try {
+                                Base64.decode(value, baos);
+                                baos.close();
+                            } catch (IOException ioe) {
+                                throw new SAXException("failed to decode binary value", ioe);
+                            }
+                            vals[i] = new BinaryValue(baos.toByteArray());
+                        } else {
+                            vals[i] = ValueHelper.convert(value, currentPropType);
+                        }
+                    }
+                    if (current.node.hasProperty(currentPropName)) {
+                        PropertyDef def = current.node.getProperty(currentPropName).getDefinition();
+                        if (def.isProtected()) {
+                            // ignore protected property
+                            // reset temp fields and get outta here
+                            currentPropValues = null;
+                            return;
+                        }
+                    }
+                    // multi- or single-valued property?
+                    if (vals.length == 1) {
+                        // could be single- or multi-valued (n == 1)
+                        try {
+                            // try setting single-value
+                            current.node.setProperty(currentPropName, vals[0]);
+                        } catch (ValueFormatException vfe) {
+// try setting value array
+                            current.node.setProperty(currentPropName, vals);
+                        } catch (ConstraintViolationException vfe) {
-			} catch (ConstraintViolationException vfe) {
-			    // try setting value array
-			    current.node.setProperty(currentPropName, vals);
-			}
-		    } else {
-			// can only be multi-valued (n == 0 || n > 1)
-			current.node.setProperty(currentPropName, vals);
-		    }
-                    // check if reference for later resolution
-                    if (currentPropType==PropertyType.REFERENCE) {
+                        }
+                    } else {
+                        // can only be multi-valued (n == 0 || n > 1)
+                        current.node.setProperty(currentPropName, vals);
+                    }
+// check if reference for later resolution
+                    if (currentPropType == PropertyType.REFERENCE) {
-		}
+                }
-		// reset temp fields
-		currentPropValues = null;
-	    } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
-		// sv:value element
-		currentPropValues.add(currentPropValue.toString());
-		// reset temp fields
-		currentPropValue = null;
-	    } else {
-		throw new SAXException(new InvalidSerializedDataException("invalid element in system view xml document: " + elemName));
-	    }
-	} catch (RepositoryException re) {
-	    throw new SAXException(re);
-	}
+                // reset temp fields
+                currentPropValues = null;
+            } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
+                // sv:value element
+                currentPropValues.add(currentPropValue.toString());
+                // reset temp fields
+                currentPropValue = null;
+            } else {
+                throw new SAXException(new InvalidSerializedDataException("invalid element in system view xml document: " + elemName));
+            }
+        } catch (RepositoryException re) {
+            throw new SAXException(re);
+        }
-	if (state.primaryType == null) {
-	    throw new InvalidSerializedDataException("missing mandatory jcr:primaryType property");
-	}
-	if (state.uuid != null) {
-	    // @todo what are the semantics of the uuid with respect to import?
-	    // move existing node with given uuid to current position?
-	    // create with new uuid? what about reference values refering to given uuid?
-	}
-	if (state.parent.hasNode(state.nodeName)) {
+        if (state.primaryType == null) {
+            throw new InvalidSerializedDataException("missing mandatory jcr:primaryType property");
+        }
+        if (state.uuid != null) {
+            // @todo what are the semantics of the uuid with respect to import?
+            // move existing node with given uuid to current position?
+            // create with new uuid? what about reference values refering to given uuid?
+        }
+        if (state.parent.hasNode(state.nodeName)) {
-	    NodeDef def = state.node.getDefinition();
-	    if (def.isProtected()) {
-                // @todo how to handle protected/auto-created child node?
+            NodeDef def = state.node.getDefinition();
+            if (def.isProtected()) {
+// @todo how to handle protected/auto-created child node?
-		// @todo how to handle protected/auto-created child node?
+                // @todo how to handle protected/auto-created child node?
-	    }
-	} else {
+            }
+        } else {
-                    for (int i=0; i<values.length; i++) {
+                    for (int i = 0; i < values.length; i++) {
-                        if (val.getType()==PropertyType.REFERENCE) {
+                        if (val.getType() == PropertyType.REFERENCE) {
-                            if (adjusted==null) {
+                            if (adjusted == null) {
-                    if (val.getType()==PropertyType.REFERENCE) {
+                    if (val.getType() == PropertyType.REFERENCE) {
-                        if (adjusted==null) {
+                        if (adjusted == null) {
-	QName primaryType = null;
-	ArrayList mixinTypes = null;
-	String uuid = null;
+        QName primaryType = null;
+        ArrayList mixinTypes = null;
+        String uuid = null;
-	QName nodeName = null;
-	NodeImpl parent = null;
-	NodeImpl node = null;
+        QName nodeName = null;
+        NodeImpl parent = null;
+        NodeImpl node = null;

MOV26 MOV26 UPD66 UPD66