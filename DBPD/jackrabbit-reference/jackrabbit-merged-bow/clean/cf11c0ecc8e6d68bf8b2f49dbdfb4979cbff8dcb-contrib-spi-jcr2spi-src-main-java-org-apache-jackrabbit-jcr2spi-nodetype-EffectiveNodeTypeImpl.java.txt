work in progress

- minor improvement and some sync



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497068 13f79535-47bb-0310-9956-ffa450edef68

-    // node type registry
-    private final NodeTypeRegistry ntReg;
-
-    private EffectiveNodeTypeImpl(NodeTypeRegistry ntReg) {
-        this.ntReg = ntReg;
+    private EffectiveNodeTypeImpl() {
-     * @param ntdMap
+     * @param ntdMap 
-        EffectiveNodeTypeImpl ent = new EffectiveNodeTypeImpl(ntReg);
+        EffectiveNodeTypeImpl ent = new EffectiveNodeTypeImpl();
-     * @return
+     * @return a new EffectiveNodeType
-    static EffectiveNodeType create(NodeTypeRegistryImpl ntReg) {
-        return new EffectiveNodeTypeImpl(ntReg);
+    static EffectiveNodeType create() {
+        return new EffectiveNodeTypeImpl();
-    public void checkAddNodeConstraints(QName name)
+    public boolean includesNodeTypes(QName[] nodeTypeNames) {
+        return allNodeTypes.containsAll(Arrays.asList(nodeTypeNames));
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public void checkAddNodeConstraints(QName name, NodeTypeRegistry ntReg)
-            getApplicableNodeDefinition(name, null);
+            getApplicableNodeDefinition(name, null, ntReg);
-    public void checkAddNodeConstraints(QName name, QName nodeTypeName)
+    public void checkAddNodeConstraints(QName name, QName nodeTypeName, NodeTypeRegistry ntReg)
-        QNodeDefinition nd = getApplicableNodeDefinition(name, nodeTypeName);
+        QNodeDefinition nd = getApplicableNodeDefinition(name, nodeTypeName, ntReg);
-    public QNodeDefinition getApplicableNodeDefinition(QName name, QName nodeTypeName)
+    public QNodeDefinition getApplicableNodeDefinition(QName name, QName nodeTypeName,
+                                                       NodeTypeRegistry ntReg)
+        EffectiveNodeType entTarget;
+        if (nodeTypeName != null) {
+            entTarget = ntReg.getEffectiveNodeType(nodeTypeName);
+        } else {
+            entTarget = null;
+        }
+
-                QItemDefinition qDef = defs[i];
-                if (qDef.definesNode()) {
-                    QNodeDefinition nd = (QNodeDefinition) qDef;
+                QItemDefinition def = defs[i];
+                if (def.definesNode()) {
+                    QNodeDefinition nd = (QNodeDefinition) def;
-                    if (nodeTypeName != null) {
-                        try {
-                            // check node type constraints
-                            checkRequiredPrimaryType(nodeTypeName, nd.getRequiredPrimaryTypes());
-                        } catch (ConstraintViolationException cve) {
-                            // ignore and try next
-                            continue;
+                    if (entTarget != null && nd.getRequiredPrimaryTypes() != null) {
+                        // check 'required primary types' constraint
+                        if (entTarget.includesNodeTypes(nd.getRequiredPrimaryTypes())) {
+                            // found named node definition
+                            return nd;
-                        // found node definition
-                        return nd;
-            if (nodeTypeName != null) {
-                try {
-                    // check node type constraint
-                    checkRequiredPrimaryType(nodeTypeName, nd.getRequiredPrimaryTypes());
-                } catch (ConstraintViolationException e) {
-                    // ignore and try next
-                    continue;
+            if (entTarget != null && nd.getRequiredPrimaryTypes() != null) {
+                // check 'required primary types' constraint
+                if (entTarget.includesNodeTypes(nd.getRequiredPrimaryTypes())) {
+                    // found residual node definition
+                    return nd;
-                // found residual node definition
-                return nd;
-                                            boolean multiValued)
-            throws ConstraintViolationException {
+                                                               boolean multiValued)
+        throws ConstraintViolationException {
-    private QItemDefinition[] getAllItemDefs() {
-        if (namedItemDefs.size() == 0 && unnamedItemDefs.size() == 0) {
-            return QItemDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            defs.addAll((List) iter.next());
-        }
-        defs.addAll(unnamedItemDefs);
-        if (defs.size() == 0) {
-            return QItemDefinition.EMPTY_ARRAY;
-        }
-        return (QItemDefinition[]) defs.toArray(new QItemDefinition[defs.size()]);
-    }
-    private boolean hasNamedItemDef(QName name) {
-        return namedItemDefs.containsKey(name);
-    }
-
-    private QNodeDefinition[] getNamedNodeDefs() {
-        if (namedItemDefs.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(namedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
-                if (qDef.definesNode()) {
-                    defs.add(qDef);
-                }
-            }
-        }
-        if (defs.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
-    }
-
-    private QNodeDefinition[] getNamedNodeDefs(QName name) {
-        List list = (List) namedItemDefs.get(name);
-        if (list == null || list.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(list.size());
-        Iterator iter = list.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
-            if (qDef.definesNode()) {
-                defs.add(qDef);
-            }
-        }
-        if (defs.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
-    }
-
-    private QPropertyDefinition[] getNamedPropDefs() {
-        if (namedItemDefs.size() == 0) {
-            return QPropertyDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(namedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
-                if (!qDef.definesNode()) {
-                    defs.add(qDef);
-                }
-            }
-        }
-        if (defs.size() == 0) {
-            return QPropertyDefinition.EMPTY_ARRAY;
-        }
-        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
-    }
-
-     * @param nodeTypeName
-     * @param requiredPrimaryTypes
-     * @throws ConstraintViolationException
-     * @throws NoSuchNodeTypeException
-     */
-    private void checkRequiredPrimaryType(QName nodeTypeName, QName[] requiredPrimaryTypes)
-            throws ConstraintViolationException, NoSuchNodeTypeException {
-        if (requiredPrimaryTypes == null) {
-            // no constraint
-            return;
-        }
-        EffectiveNodeType ent = ntReg.getEffectiveNodeType(nodeTypeName);
-        for (int i = 0; i < requiredPrimaryTypes.length; i++) {
-            if (!ent.includesNodeType(requiredPrimaryTypes[i])) {
-                throw new ConstraintViolationException("node type constraint not satisfied: " + requiredPrimaryTypes[i]);
-            }
-        }
-    }
-
-    /**
-        EffectiveNodeTypeImpl clone = new EffectiveNodeTypeImpl(ntReg);
+        EffectiveNodeTypeImpl clone = new EffectiveNodeTypeImpl();

MOV31 UPD83 UPD39 INS42 MOV44 INS44 INS44 UPD65 UPD42 INS41 INS43 INS42 INS43 INS42 INS60 INS25 INS66 MOV43 INS66 INS32 INS42 INS42 MOV43 INS59 MOV27 INS8 INS8 INS8 MOV43 INS42 INS42 INS32 INS42 INS21 INS21 MOV60 MOV25 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS7 INS7 INS27 MOV8 MOV43 INS42 INS42 MOV32 INS42 INS33 INS27 INS27 INS25 INS42 INS42 INS42 MOV8 INS42 INS33 INS32 INS33 MOV32 INS8 UPD42 UPD42 MOV60 INS42 INS42 UPD42 UPD42 MOV41 MOV43 INS27 MOV8 INS27 INS27 INS25 MOV43 UPD42 UPD42 MOV42 MOV33 INS32 INS33 MOV32 INS8 INS42 INS42 UPD42 UPD42 MOV41 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL42 DEL2 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL24 DEL21 DEL27 DEL42 DEL43 DEL42 DEL44 DEL18 DEL8 DEL12 DEL54 DEL8 DEL8 DEL21 DEL42 DEL43 DEL42 DEL44 DEL18 DEL8 DEL12 DEL54 DEL8 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL34 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL61 DEL42 DEL42 DEL32 DEL34 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL32 DEL34 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL61 DEL42 DEL42 DEL32 DEL34 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL31 DEL42