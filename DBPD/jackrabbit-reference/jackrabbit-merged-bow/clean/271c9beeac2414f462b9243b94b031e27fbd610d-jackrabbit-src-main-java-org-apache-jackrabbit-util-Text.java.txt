- moving convenience method to commons.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@372500 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Properties;
-     * @return
+     * @return the concatenated string
+    /**
+     * Performs variable replacement on the given string value.
+     * Each <code>${...}</code> sequence within the given value is replaced
+     * with the value of the named parser variable. If a variable is not found
+     * in the properties an IllegalArgumentException is thrown unless
+     * <code>ignoreMissing</code> is <code>true</code>. In the later case, the
+     * missing variable is replaced by the empty string.
+     *
+     * @param value         the original value
+     * @param ignoreMissing if <code>true</code>, missing variables are replaced
+     *                      by the empty string.
+     * @return value after variable replacements
+     * @throws IllegalArgumentException if the replacement of a referenced
+     *                                  variable is not found
+     */
+    public static String replaceVariables(Properties variables, String value,
+                                   boolean ignoreMissing)
+            throws IllegalArgumentException {
+        StringBuffer result = new StringBuffer();
+
+        // Value:
+        // +--+-+--------+-+-----------------+
+        // |  |p|-->     |q|-->              |
+        // +--+-+--------+-+-----------------+
+        int p = 0, q = value.indexOf("${");                // Find first ${
+        while (q != -1) {
+            result.append(value.substring(p, q));          // Text before ${
+            p = q;
+            q = value.indexOf("}", q + 2);                 // Find }
+            if (q != -1) {
+                String variable = value.substring(p + 2, q);
+                String replacement = variables.getProperty(variable);
+                if (replacement == null) {
+                    if (ignoreMissing) {
+                        replacement = "";
+                    } else {
+                        throw new IllegalArgumentException(
+                                "Replacement not found for ${" + variable + "}.");
+                    }
+                }
+                result.append(replacement);
+                p = q + 1;
+                q = value.indexOf("${", p);                // Find next ${
+            }
+        }
+        result.append(value.substring(p, value.length())); // Trailing text
+
+        return result.toString();
+    }
+

INS26 INS40 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS61 INS21 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS39 INS59 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS14 INS42 INS34 INS42 INS32 INS42 INS38 INS21 INS21 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS45 INS34 INS32 INS7 INS7 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS38 INS60 INS60 INS25 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS27 INS34 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS7 INS7 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS8 INS8 INS42 INS34 INS42 INS42 INS45 INS42 INS42 INS34 INS21 INS53 INS7 INS14 INS42 INS45 INS43 INS27 INS42 INS45 INS42 INS45