JCR-2113 : JSR 283 Access Control Management (contribution by Alfusainey Jallow)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1656464 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.FileInputStream;
-import org.apache.jackrabbit.spi.RepositoryService;
- * Stub class that provide clients with access to a concrete AccessControlProvider implementation.
- * TODO: Explain the way the concrete provider is located, loaded and instantiated.
+ * Stub class that provide clients with access to a concrete
+ * AccessControlProvider implementation. TODO: Explain the way the concrete
+ * provider is located, loaded and instantiated.
-    private static Logger log = LoggerFactory.getLogger(AccessControlProviderStub.class);
+	private static Logger log = LoggerFactory.getLogger(AccessControlProviderStub.class);
-    /**
-     * The class property parameter determines the {@link AccessControlProvider}
-     * to load and instantiate. This is a fall-back parameter if the SYS_PROP_AC_PROVIDER_IMPL is not set.
-     */
-    private static final String ACCESS_CONTROL_PROVIDER_PROPERTIES = "accessControlProvider.properties";
+	/**
+	 * The class property parameter determines the {@link AccessControlProvider}
+	 * to load and instantiate. This is a fall-back parameter if the
+	 * SYS_PROP_AC_PROVIDER_IMPL is not set.
+	 */
+	private static final String ACCESS_CONTROL_PROVIDER_PROPERTIES = "accessControlProvider.properties";
-    /**
-     * Key look-up.
-     */
-    private static final String PROPERTY_ACCESSCONTROL_PROVIDER_CLASS = "org.apache.jackrabbit.jcr2spi.AccessControlProvider.class";
+	/**
+	 * Key look-up.
+	 */
+	private static final String PROPERTY_ACCESSCONTROL_PROVIDER_CLASS = "org.apache.jackrabbit.jcr2spi.AccessControlProvider.class";
-    /**
-     * Avoid instantiation.
-     */
-    private AccessControlProviderStub() {}
+	/**
+	 * Avoid instantiation.
+	 */
+	private AccessControlProviderStub() {
+	}
-    /**
-     * Instantiates and returns a concrete AccessControlProvider implementation.
-     * @param service     The repository service.
-     * @param config      The RepositoryConfig to read configuration parameters.
-     * @return
-     * @throws RepositoryException
-     */
-    public static AccessControlProvider newInstance(RepositoryConfig config, RepositoryService service) throws RepositoryException {
-        String className = getProviderClass(config);
-        if (className != null) {
-            try {
-                Class<?> acProviderClass = Class.forName(className);
-                if (AccessControlProvider.class.isAssignableFrom(acProviderClass)) {
-                    AccessControlProvider acProvider = (AccessControlProvider) acProviderClass.newInstance();
-                    acProvider.init(config, service);
-                    return acProvider;
-                } else {
-                    throw new RepositoryException("Fail to create AccessControlProvider from configuration.");
-                }
-            } catch (Exception e) {
-                throw new RepositoryException("Fail to create AccessControlProvider from configuration.");
-            }
-        }
+	/**
+	 * Instantiates and returns a concrete AccessControlProvider implementation.
+	 * 
+	 * @param service
+	 *            The repository service.
+	 * @param config
+	 *            The RepositoryConfig to read configuration parameters.
+	 * @return
+	 * @throws RepositoryException
+	 */
+	public static AccessControlProvider newInstance(RepositoryConfig config) throws RepositoryException {
-        // ac not supported in this setup.
-        throw new UnsupportedRepositoryOperationException("Access control is not supported");
-    }
-    
-    private static String getProviderClass(RepositoryConfig config) throws RepositoryException {
-        Properties prop = new Properties();
-        String providerImplProp = config.getConfiguration(ACCESS_CONTROL_PROVIDER_PROPERTIES, null);
-        try {
-            if (providerImplProp == null) {
-                // not configured try to load as resource
-                InputStream is = AccessControlProviderStub.class.getResourceAsStream(ACCESS_CONTROL_PROVIDER_PROPERTIES);
-                if (is != null) {
-                    prop.load(is);
-                } else {
-                    log.debug("Fail to locate the access control provider properties file.");
-                }
-            } else {
-                File file = new File(providerImplProp);
-                if (file.exists()) { // check that path actually exist.
-                    prop.load(new FileInputStream(file));
-                } else {
-                    log.debug("Fail to locate the access control provider properties file.");
-                }
-            }
+		String className = getProviderClass(config);
+		if (className != null) {
+			try {
+				Class<?> acProviderClass = Class.forName(className);
+				if (AccessControlProvider.class.isAssignableFrom(acProviderClass)) {
+					AccessControlProvider acProvider = (AccessControlProvider) acProviderClass.newInstance();
+					acProvider.init(config);
+					return acProvider;
+				} else {
+					throw new RepositoryException("Fail to create AccessControlProvider from configuration.");
+				}
+			} catch (Exception e) {
+				throw new RepositoryException("Fail to create AccessControlProvider from configuration.");
+			}
+		}
-            // loads the concrete class to instantiate.
-            if (prop.contains(PROPERTY_ACCESSCONTROL_PROVIDER_CLASS)) {
-                return prop.getProperty(PROPERTY_ACCESSCONTROL_PROVIDER_CLASS, null);
-            } else {
-                log.debug("Missing AccessControlProvider configuration.");
-                return null;
-            }
-        } catch (IOException e) {
-            throw new RepositoryException("Fail to load AccessControlProvider configuration.");
-        }
-    }
+		// ac not supported in this setup.
+		throw new UnsupportedRepositoryOperationException("Access control is not supported");
+	}
+
+	private static String getProviderClass(RepositoryConfig config) throws RepositoryException {
+
+		String implClass = config.getConfiguration(PROPERTY_ACCESSCONTROL_PROVIDER_CLASS, null);
+
+		if (implClass != null) {
+			return implClass;
+		} else {
+			try {
+				// not configured try to load as resource
+				Properties prop = new Properties();
+				InputStream is = AccessControlProviderStub.class.getResourceAsStream(ACCESS_CONTROL_PROVIDER_PROPERTIES);
+				if (is != null) {
+					prop.load(is);
+					// loads the concrete class to instantiate.
+					if (prop.containsKey(PROPERTY_ACCESSCONTROL_PROVIDER_CLASS)) {
+						return prop.getProperty(PROPERTY_ACCESSCONTROL_PROVIDER_CLASS);
+					} else {
+						log.debug("Missing AccessControlProvider configuration.");
+					}
+				} else {
+					log.debug("Fail to locate the access control provider properties file.");
+				}
+			} catch (IOException e) {
+				throw new RepositoryException("Fail to load AccessControlProvider configuration.");
+			}
+		}
+		return null;
+	}

INS8 UPD66 INS66 UPD66 INS60 INS25 MOV41 UPD66 INS66 UPD66 UPD66 MOV43 INS59 INS27 INS8 MOV8 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS33 INS42 MOV8 MOV60 INS8 MOV21 INS25 INS32 MOV8 INS8 INS42 INS42 INS42 INS41 MOV21 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL8 DEL25 DEL8