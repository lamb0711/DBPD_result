JCR-4018: Consistent Async Upload Executor handling in Backend implementations

Slightly modified patch from Woonsan Ko

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1760825 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
+import org.apache.jackrabbit.core.data.AbstractBackend;
-import org.apache.jackrabbit.core.data.Backend;
-import org.apache.jackrabbit.core.data.util.NamedThreadFactory;
-public class VFSBackend implements Backend {
+public class VFSBackend extends AbstractBackend {
-     * {@link CachingDataStore} instance using this backend.
-     */
-    private CachingDataStore store;
-
-    /**
-     * The pool size of asynchronous write pooling executor.
-     */
-    private int asyncWritePoolSize = DEFAULT_ASYNC_WRITE_POOL_SIZE;
-
-    /**
-     * Asynchronous write pooling executor.
-     */
-    private Executor asyncWriteExecutor;
-
-    /**
-     * Returns the pool size of the async write pool executor.
-     * @return the pool size of the async write pool executor
-     */
-    public int getAsyncWritePoolSize() {
-        return asyncWritePoolSize;
-    }
-
-    /**
-     * Sets the pool size of the async write pool executor.
-     * @param asyncWritePoolSize pool size of the async write pool executor
-     */
-    public void setAsyncWritePoolSize(int asyncWritePoolSize) {
-        this.asyncWritePoolSize = asyncWritePoolSize;
-    }
-
-    /**
-        this.store = store;
+        super.init(store, homeDir, config);
-
-        asyncWriteExecutor = createAsyncWriteExecutor();
-    public void close() throws DataStoreException {
-        Executor asyncExecutor = getAsyncWriteExecutor();
-
-        if (asyncExecutor != null && asyncExecutor instanceof ExecutorService) {
-            ((ExecutorService) asyncExecutor).shutdownNow();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-     * Creates a {@link ThreadPoolExecutor}.
-     * This method is invoked during the initialization for asynchronous write/touch job executions.
-     * @return a {@link ThreadPoolExecutor}
-     */
-    protected Executor createAsyncWriteExecutor() {
-        Executor asyncExecutor;
-
-        if (getAsyncWritePoolSize() > 0) {
-            asyncExecutor = (ThreadPoolExecutor) Executors.newFixedThreadPool(getAsyncWritePoolSize(),
-                    new NamedThreadFactory("vfs-write-worker"));
-        } else {
-            asyncExecutor = new ImmediateExecutor();
-        }
-
-        return asyncExecutor;
-    }
-
-    /**
-     * Returns ThreadPoolExecutor used to execute asynchronous write or touch jobs.
-     * @return ThreadPoolExecutor used to execute asynchronous write or touch jobs
-     */
-    protected Executor getAsyncWriteExecutor() {
-        return asyncWriteExecutor;
-    }
-
-    /**
-     * @param time the new last modified date
-     * @param file the file object
+     * @param fileObject the file object
-                    if (store.confirmDelete(identifier)) {
-                        store.deleteFromCache(identifier);
+                    if (getDataStore().confirmDelete(identifier)) {
+                        getDataStore().deleteFromCache(identifier);
-     * This class implements {@link Executor} interface to run {@code command} right away,
-     * resulting in non-asynchronous mode executions.
-     */
-    private class ImmediateExecutor implements Executor {
-        @Override
-        public void execute(Runnable command) {
-            command.run();
-        }
-    }
-
-    /**

MOV26 UPD40 UPD43 UPD42 INS21 INS48 UPD42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL66 DEL42 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL55