JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.version.report.*;
+import org.apache.jackrabbit.webdav.version.report.Report;
+import org.apache.jackrabbit.webdav.version.report.ReportType;
+import org.apache.jackrabbit.webdav.version.report.ReportInfo;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.JDOMException;
-import org.jdom.input.SAXBuilder;
+import org.xml.sax.SAXException;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
-import java.io.*;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
-     * @param resource The resource this report is generated from. NOTE: the
-     * {@link org.apache.jackrabbit.webdav.DavResource#getResourcePath() resource path}
-     * of the resource is used as 'absPath' argument for exporting the specified
-     * view.
-     * @throws IllegalArgumentException if the resource is <code>null</code> or
-     * if the session object provided with the resource is <code>null</code>.
-     * @see Report#setResource(org.apache.jackrabbit.webdav.version.DeltaVResource)
+     * Always returns <code>false</code>.
+     *
+     * @return false
-    public void setResource(DeltaVResource resource) {
-        if (resource == null) {
-            throw new IllegalArgumentException("Resource must not be null.");
-        }
-        DavSession davSession = resource.getSession();
-        if (davSession == null || davSession.getRepositorySession() == null) {
-            throw new IllegalArgumentException("The resource must provide a non-null session object in order to create the exportview report.");
-        }
-        session = davSession.getRepositorySession();
-        absItemPath = resource.getLocator().getJcrPath();
+    public boolean isMultiStatusReport() {
+        return false;
-     * @param info
-     * @throws IllegalArgumentException if the specified {@link ReportInfo info}
-     * object does not contain a {@link ItemResourceConstants#NAMESPACE dcr}:exportview element.
-     * @see Report#setInfo(org.apache.jackrabbit.webdav.version.report.ReportInfo)
+     * @see Report#init(org.apache.jackrabbit.webdav.version.DeltaVResource, org.apache.jackrabbit.webdav.version.report.ReportInfo)
-    public void setInfo(ReportInfo info) {
-        if (info == null || !REPORT_NAME.equals(info.getReportElement().getName())) {
-            throw new IllegalArgumentException("dcr:exportview element expected.");
+    public void init(DeltaVResource resource, ReportInfo info) throws DavException {
+        if (!getType().isRequestedReportType(info)) {
+            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "dcr:exportview element expected.");
+        if (resource == null) {
+            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "Resource must not be null.");
+        }
+
+
+        DavSession davSession = resource.getSession();
+        if (davSession == null || davSession.getRepositorySession() == null) {
+            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "The resource must provide a non-null session object in order to create the exportview report.");
+        }
+        session = davSession.getRepositorySession();
+        absItemPath = resource.getLocator().getJcrPath();
+        try {
+            if (!session.itemExists(absItemPath)) {
+                throw new JcrDavException(new PathNotFoundException(absItemPath + " does not exist."));
+    }
+        } catch (RepositoryException e) {
+            throw new JcrDavException(e);
+        }
-     * @return Xml document representing the output of the specified view.
-     * @throws DavException if the report document could not be created.
-     * @see org.apache.jackrabbit.webdav.version.report.Report#toXml()
+     * @param document
+     * @return Xml element representing the output of the specified view.
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
-    public Document toXml() throws DavException {
-        Element reportElem = info.getReportElement();
-        boolean skipBinary = reportElem.getChild("skipbinary", ItemResourceConstants.NAMESPACE) != null;
-        boolean noRecurse = reportElem.getChild("norecurse", ItemResourceConstants.NAMESPACE) != null;
+    public Element toXml(Document document) {
+        boolean skipBinary = info.containsContentElement("skipbinary", ItemResourceConstants.NAMESPACE);
+        boolean noRecurse = info.containsContentElement("norecurse", ItemResourceConstants.NAMESPACE);
+        // todo improve...
-            FileOutputStream out = new FileOutputStream(tmpfile);
-            if (reportElem.getChild("sysview", ItemResourceConstants.NAMESPACE) != null) {
+            FileOutputStream out = new FileOutputStream(tmpfile);
+            if (info.containsContentElement("sysview", ItemResourceConstants.NAMESPACE)) {
-            SAXBuilder builder = new SAXBuilder(false);
-            return builder.build(in);
+            Document tmpDoc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in);
-        } catch (FileNotFoundException e) {
-            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR);
-        } catch (IOException e) {
-            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR);
-        } catch (PathNotFoundException e) {
-            throw new DavException(DavServletResponse.SC_NOT_FOUND);
+            // import the root node of the generated xml to the given document.
+            Element rootElem = (Element)document.importNode(tmpDoc.getDocumentElement(), true);
+            return rootElem;
+
-            throw new JcrDavException(e);
-        } catch (JDOMException e) {
-            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR);
+            log.error(e.getMessage());
+        } catch (FileNotFoundException e) {
+            log.error(e.getMessage());
+        } catch (IOException e) {
+            log.error(e.getMessage());
+        } catch (ParserConfigurationException e) {
+            log.error(e.getMessage());
+        } catch (SAXException e) {
+            log.error(e.getMessage());
+        return null;

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 UPD40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 UPD39 INS42 INS8 UPD42 MOV44 MOV43 INS43 INS44 INS65 INS65 INS41 INS42 INS25 MOV21 INS54 INS65 INS42 INS43 INS42 INS41 UPD66 MOV66 UPD66 MOV66 INS9 INS38 INS8 INS8 INS12 INS42 UPD66 UPD42 MOV42 MOV60 INS33 UPD42 MOV69 INS32 INS53 INS25 INS44 INS8 UPD40 INS69 INS32 INS32 INS60 INS41 INS44 INS8 MOV44 MOV44 INS8 INS32 INS42 INS42 INS14 INS38 INS8 INS43 INS42 MOV53 MOV43 UPD42 MOV42 UPD42 MOV42 MOV45 MOV40 UPD42 MOV42 UPD42 MOV42 MOV45 MOV40 INS32 UPD43 MOV43 INS59 INS42 INS43 INS42 INS21 INS21 INS21 UPD43 INS21 UPD43 INS21 INS42 MOV43 INS40 INS45 UPD43 INS40 MOV43 INS40 INS32 INS53 INS42 UPD42 MOV42 UPD42 MOV42 MOV45 MOV40 UPD42 INS42 INS32 INS42 INS11 UPD42 MOV42 INS32 INS32 INS32 UPD42 INS32 UPD42 INS32 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS14 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS27 INS42 INS42 UPD42 MOV42 INS42 INS42 INS45 DEL42 DEL65 DEL42 DEL66 DEL42 DEL65 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL38 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL66 DEL40 DEL42 DEL68 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL33 DEL27 DEL32 DEL33 DEL27 DEL32 DEL33 DEL27 DEL42 DEL42 DEL43 DEL9 DEL14 DEL32 DEL41 DEL40 DEL14 DEL53 DEL8 DEL40 DEL14 DEL53 DEL42 DEL44 DEL40 DEL14 DEL53 DEL8 DEL42 DEL43 DEL40 DEL14 DEL53