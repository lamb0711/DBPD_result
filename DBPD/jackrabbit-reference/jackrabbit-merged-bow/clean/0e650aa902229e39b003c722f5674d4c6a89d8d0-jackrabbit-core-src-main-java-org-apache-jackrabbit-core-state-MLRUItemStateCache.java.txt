JCR-2699: Improve read/write concurrency

Revert revision 1003542 until I have time to solve the NPE issue.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1003773 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
-import org.apache.jackrabbit.core.cache.CacheManager;
-import org.apache.jackrabbit.core.cache.LRUCache;
+import org.apache.jackrabbit.core.cache.Cache;
+import org.apache.jackrabbit.core.cache.CacheAccessListener;
-public class MLRUItemStateCache implements ItemStateCache {
-
+public class MLRUItemStateCache implements ItemStateCache, Cache {
+    /** the amount of memory the entries use */
+    private volatile long totalMem;
+
+    /** the maximum of memory the cache may use */
+    private volatile long maxMem;
+
-    private volatile long numWrites = 0;
+    private volatile long numWrites;
-    private final LRUCache<ItemId, ItemState> cache =
-        new LRUCache<ItemId, ItemState>(DEFAULT_MAX_MEM);
+    /** the access count */
+    private volatile long accessCount;
-    public MLRUItemStateCache(CacheManager cacheMgr) {
-        cacheMgr.add(cache);
-        cache.setAccessListener(cacheMgr);
+    /** the cache access listeners */
+    private CacheAccessListener accessListener;
+
+    /**
+     * A cache for <code>ItemState</code> instances
+     */
+    private final Map<ItemId, Entry> cache;
+
+    /**
+     * Constructs a new, empty <code>ItemStateCache</code> with a maximum amount
+     * of memory of {@link #DEFAULT_MAX_MEM}.
+     */
+    public MLRUItemStateCache() {
+        this(DEFAULT_MAX_MEM);
+    }
+
+    /**
+     * Constructs a new, empty <code>ItemStateCache</code> with the specified
+     * maximum memory.
+     *
+     * @param maxMem the maximum amount of memory this cache may use.
+     */
+    @SuppressWarnings("serial")
+    private MLRUItemStateCache(int maxMem) {
+        this.maxMem = maxMem;
+        this.cache = new LinkedHashMap<ItemId, MLRUItemStateCache.Entry>(
+                maxMem / 1024, 0.75f, true /* access-ordered */) {
+            @Override
+            protected boolean removeEldestEntry(Map.Entry<ItemId, Entry> e) {
+                long maxMem = MLRUItemStateCache.this.maxMem;
+                if (totalMem <= maxMem) {
+                    return false;
+                } else if (totalMem - e.getValue().size <= maxMem) {
+                    totalMem -= e.getValue().size;
+                    return true;
+                } else {
+                    shrink();
+                    return false;
+                }
+            }
+        };
-
-        return cache.containsKey(id);
+        synchronized (cache) {
+            return cache.containsKey(id);
+        }
-        return cache.get(id);
+        touch();
+        synchronized (cache) {
+            Entry entry = cache.get(id);
+            if (entry != null) {
+                return entry.state;
+            } else {
+                return null;
+            }
+        }
-        return cache.values();
+        synchronized (cache) {
+            ItemState[] states = new ItemState[cache.size()];
+            int i = 0;
+            for (Entry entry : cache.values()) {
+                states[i++] = entry.state;
+            }
+            return states;
+        }
-    public synchronized void cache(ItemState state) {
-        cache.put(state.getId(), state, state.calculateMemoryFootprint());
+    public void update(ItemId id) {
+        touch();
+        synchronized (cache) {
+            Entry entry = cache.get(id);
+            if (entry != null) {
+                totalMem -= entry.size;
+                entry.recalc();
+                totalMem += entry.size;
+            }
+        }
+    }
-        if (numWrites++ % 10000 == 0 && log.isDebugEnabled()) {
-            log.debug("Item state cache size: {}% of {} bytes",
-                    cache.getMemoryUsed() * 100 / cache.getMaxMemorySize(),
-                    cache.getMaxMemorySize());
+    /**
+     * {@inheritDoc}
+     */
+    public void cache(ItemState state) {
+        touch();
+        synchronized (cache) {
+            ItemId id = state.getId();
+            if (cache.containsKey(id)) {
+                log.warn("overwriting cached entry " + id);
+                evict(id);
+            }
+            Entry entry = new Entry(state);
+            totalMem += entry.size;
+            cache.put(id, entry);
+            if (numWrites++ % 10000 == 0 && log.isDebugEnabled()) {
+                log.debug(this + " size=" + cache.size() + ", " + totalMem + "/" + maxMem);
+            }
-        cache.remove(id);
+        touch();
+        synchronized (cache) {
+            Entry entry = cache.remove(id);
+            if (entry != null) {
+                totalMem -= entry.size;
+            }
+        }
-        cache.clear();
+        synchronized (cache) {
+            cache.clear();
+            totalMem = 0;
+        }
-        return cache.isEmpty();
+        synchronized (cache) {
+            return cache.isEmpty();
+        }
+    }
+
+    private void touch() {
+        accessCount++;
+        if ((accessCount % CacheAccessListener.ACCESS_INTERVAL) == 0) {
+            if (accessListener != null) {
+                accessListener.cacheAccessed();
+            }
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public long getAccessCount() {
+        return accessCount;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public long getMaxMemorySize() {
+        return maxMem;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public long getMemoryUsed() {
+        return totalMem;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void resetAccessCount() {
+        synchronized (cache) {
+            accessCount = 0;
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void setMaxMemorySize(long size) {
+        synchronized (cache) {
+            this.maxMem = size;
+
+            // remove items, if too many
+            if (totalMem > maxMem) {
+                shrink();
+            }
+        }
+    }
+
+    private void shrink() {
+        List<Map.Entry<ItemId, Entry>> list =
+            new ArrayList<Map.Entry<ItemId, Entry>>(cache.entrySet());
+        for (int i = list.size() - 1; totalMem > maxMem && i >= 0; i--) {
+            Map.Entry<ItemId, Entry> last = list.get(i);
+            totalMem -= last.getValue().size;
+            cache.remove(last.getKey());
+        }
+    }
+
+    /**
+     * Set the cache access listener. Only one listener per cache is supported.
+     *
+     * @param listener the new listener
+     */
+    public void setAccessListener(CacheAccessListener listener) {
+        this.accessListener = listener;
-        cache.dispose();
+        synchronized (cache) {
+            if (accessListener != null) {
+                accessListener.disposeCache(this);
+            }
+        }
+    }
+
+
+    /**
+     * Internal cache entry.
+     */
+    private static class Entry {
+
+        private final ItemState state;
+
+        private long size;
+
+        public Entry(ItemState state) {
+            this.state = state;
+            this.size = 64 + state.calculateMemoryFootprint();
+        }
+
+        public void recalc() {
+            size = 64 + state.calculateMemoryFootprint();
+        }

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 UPD40 UPD40 INS43 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS42 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS59 INS29 MOV83 INS83 INS39 INS59 INS29 INS83 INS43 INS59 INS29 INS83 MOV83 UPD74 MOV74 INS59 INS29 INS83 INS42 INS8 INS29 INS79 INS83 INS42 INS44 INS8 INS8 MOV29 INS8 INS8 MOV29 MOV83 INS39 INS42 INS44 INS8 MOV29 UPD83 MOV83 MOV39 MOV42 MOV44 INS8 MOV29 INS83 INS39 INS42 MOV44 INS8 INS8 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS29 UPD42 INS44 INS29 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS65 INS42 INS65 INS42 INS65 INS42 INS65 INS42 INS42 INS65 UPD43 MOV43 UPD43 MOV42 INS65 INS17 INS65 INS65 INS42 INS45 INS39 INS42 INS21 INS21 INS51 INS21 INS51 INS51 INS43 INS42 INS21 INS51 INS21 INS51 INS21 INS51 INS51 INS51 INS21 INS25 INS65 INS41 INS65 INS41 INS65 INS41 INS65 INS51 INS65 INS39 INS42 INS51 INS60 INS24 INS65 INS65 INS43 INS42 INS65 INS51 INS65 INS83 INS83 MOV43 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS66 INS66 INS66 INS66 INS66 UPD42 UPD42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS7 INS7 INS42 MOV8 INS32 INS42 INS8 INS42 INS8 INS42 INS32 INS42 INS8 INS32 INS42 INS8 INS32 INS42 INS8 INS42 MOV8 INS42 MOV8 INS37 INS27 INS8 INS65 INS42 INS65 INS42 INS65 INS42 INS65 INS42 INS8 INS65 INS42 INS8 INS74 INS59 INS58 INS27 INS37 INS8 INS66 INS42 INS66 INS42 INS7 INS65 INS42 INS8 INS66 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS67 INS22 INS42 INS22 INS14 INS42 INS60 INS25 INS60 INS60 INS70 MOV41 INS42 INS60 INS25 INS42 INS60 INS25 INS60 INS21 MOV21 INS25 INS42 INS60 INS25 INS21 INS42 INS36 UPD34 MOV34 INS25 INS21 INS21 INS25 INS43 INS74 INS42 INS14 INS39 INS59 INS27 INS27 INS42 INS60 INS21 INS21 INS22 INS42 INS25 INS42 INS7 INS7 INS7 INS42 INS52 INS42 INS52 INS42 UPD74 MOV74 INS27 INS34 INS9 INS1 INS43 INS59 INS27 INS8 INS8 INS5 INS59 INS39 INS59 INS44 MOV32 INS8 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS7 MOV27 INS8 INS43 INS59 INS27 INS8 INS7 INS27 INS27 INS8 INS7 INS7 INS27 INS8 INS42 INS43 INS43 INS43 INS74 INS32 INS42 INS27 INS42 INS42 INS42 INS34 INS74 INS59 INS7 INS32 INS52 INS42 INS27 INS8 INS22 INS42 INS22 INS27 INS42 INS27 UPD43 MOV43 INS43 INS42 INS34 INS31 INS42 INS42 MOV32 INS42 INS33 MOV41 INS41 INS43 INS85 INS42 INS3 INS42 INS34 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS42 MOV32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS14 INS42 INS40 UPD42 INS42 INS21 INS42 INS42 MOV32 INS42 INS33 INS21 INS42 INS34 INS42 INS40 INS42 INS33 INS21 INS42 INS34 INS22 INS42 INS42 INS42 INS21 INS40 INS42 INS42 INS43 INS74 MOV42 UPD42 MOV42 INS32 INS34 INS43 INS43 INS43 INS42 INS32 INS42 INS22 MOV42 INS42 INS32 INS42 INS33 MOV21 INS52 INS42 INS52 INS42 INS34 MOV32 INS34 INS32 UPD42 INS40 INS78 UPD83 MOV83 INS39 UPD42 MOV42 MOV44 MOV8 INS40 INS33 INS42 INS5 INS32 INS42 INS7 INS42 INS42 INS42 INS7 INS32 INS7 INS32 INS32 INS43 INS42 INS32 INS7 INS32 INS52 INS42 INS32 INS42 INS43 INS43 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS74 INS42 INS60 INS25 INS43 INS85 INS42 INS42 INS2 INS40 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS42 MOV42 MOV42 INS27 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 UPD42 UPD42 INS52 INS43 INS43 INS43 INS39 INS59 INS27 INS8 INS25 INS42 INS42 INS37 INS45 INS42 INS52 INS45 MOV32 INS45 INS42 INS45 INS42 INS40 UPD42 MOV42 INS42 INS42 INS22 INS42 INS42 INS41 INS27 INS8 INS8 INS42 UPD42 INS52 INS42 INS9 INS27 INS42 MOV21 INS41 INS21 INS41 INS42 INS42 INS22 INS7 INS9 INS32 INS9 INS32 INS42 INS42 INS22 INS42 UPD42 MOV42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 DEL34 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL59 DEL23 DEL31 DEL8 DEL8 DEL45 DEL27 DEL32 DEL27 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL8