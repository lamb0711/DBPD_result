JCR-4502: ISO8601: add variants outputting 'SHORT' format (no milliseconds)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1870756 13f79535-47bb-0310-9956-ffa450edef68

+        return format(cal, true);
+    }
+
+    private static String format(Calendar cal, boolean includeMs) throws IllegalArgumentException {
-        buf.append('.');
-        // millisecond (SSS)
-        appendZeroPaddedInt(buf, cal.get(Calendar.MILLISECOND), 3);
+        if (includeMs) {
+            buf.append('.');
+            // millisecond (SSS)
+            appendZeroPaddedInt(buf, cal.get(Calendar.MILLISECOND), 3);
+        }
+
+    /**
+     * Variants that exclude the milliseconds from the formatted string.
+     *
+     */
+    public static class SHORT {
+
+        /**
+         * @see ISO8601#format(Date)
+         */
+        public static String format(Date date) throws IllegalArgumentException {
+            return format(date, 0);
+        }
+
+        /**
+         * @see ISO8601#format(Clock)
+         */
+        public static String format(Clock clock) throws IllegalArgumentException {
+            return format(clock.millis(), clock.getZone().getRules().getOffset(clock.instant()).getTotalSeconds());
+        }
+
+        /**
+         * @see ISO8601#format(long)
+         */
+        public static String format(long millisSinceEpoch) throws IllegalArgumentException {
+            return format(millisSinceEpoch, 0);
+        }
+
+        /**
+         * @see ISO8601#format(Date, int)
+         */
+        public static String format(Date date, int tzOffsetInSeconds) throws IllegalArgumentException {
+            if (date == null) {
+                throw new IllegalArgumentException("argument can not be null");
+            }
+            return format(date.getTime(), tzOffsetInSeconds);
+        }
+
+        /**
+         * @see ISO8601#format(long, int)
+         */
+        public static String format(long millisSinceEpoch, int tzOffsetInSeconds) throws IllegalArgumentException {
+            Calendar cal = Calendar.getInstance();
+            cal.setTimeZone(tzOffsetInSeconds == 0 ? UTC : new SimpleTimeZone(tzOffsetInSeconds * 1000, ""));
+            cal.setTimeInMillis(millisSinceEpoch);
+            return format(cal);
+        }
+
+        /**
+         * @see ISO8601#format(Calendar)
+         */
+        public static String format(Calendar cal) throws IllegalArgumentException {
+            return ISO8601.format(cal, false);
+        }
+    }
+

INS31 INS55 MOV29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 UPD83 INS44 INS29 INS83 INS83 INS42 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS43 INS42 INS42 INS41 INS39 INS42 INS25 INS65 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS32 INS42 INS8 INS66 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS42 INS39 INS42 INS42 INS41 INS65 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS41 INS65 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS41 INS65 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS9 MOV21 MOV21 INS68 INS42 INS32 INS68 INS42 INS32 INS68 INS32 INS68 INS42 INS27 INS8 INS32 INS68 INS43 INS59 INS32 INS32 INS32 INS68 INS42 INS32 INS42 INS42 INS69 INS42 INS42 INS34 INS42 INS42 INS69 INS42 INS32 INS32 INS42 INS42 INS69 INS42 INS42 INS34 INS42 INS42 INS69 INS69 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS42 INS69 INS69 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS42 INS9 INS43 INS43 INS42 INS42 INS32 INS42 INS39 INS43 INS39 INS14 INS42 INS42 INS39 INS39 INS42 INS42 INS27 INS42 INS14 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS45 INS42 INS34 INS43 INS27 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42