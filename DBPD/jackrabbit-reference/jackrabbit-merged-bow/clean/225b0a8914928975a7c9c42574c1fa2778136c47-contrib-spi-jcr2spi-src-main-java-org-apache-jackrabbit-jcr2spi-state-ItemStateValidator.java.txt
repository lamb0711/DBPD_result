work in progress

- HierarchyManager: changes methods to take ItemState instead of ItemId
- HierarchyManager: remove log-utility methods (saveGetJCRPath)
- HierarchyManager: remove CachingHierachyManager. not used
- ItemManager: changes methods to take ItemState instead of ItemId
- ItemStateValidator: remove utility methods not related to validation
- new class LogUtil that provides static saveGetJCRPath methods previously
  present on HierarchyManager, ItemStateValidator
- NodeState: add method 'getPropertyEntries()'
- create interface ChildPropertyEntry
- let PropertyReference implement ChildPropertyEntry

TODO: query/NodeIteratorImpl needs to be fixed. 


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429652 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.util.LogUtil;
-import org.apache.jackrabbit.spi.PropertyId;
+import org.apache.jackrabbit.name.NamespaceResolver;
-                String msg = safeGetJCRPath(nodeState.getNodeId())
+                String msg = safeGetJCRPath(nodeState)
-                String msg = safeGetJCRPath(nodeState.getNodeId())
+                String msg = safeGetJCRPath(nodeState)
-                String msg = safeGetJCRPath(nodeState.getNodeId())
+                String msg = safeGetJCRPath(nodeState)
-            String msg = "Internal error: failed to build effective node type from node types defined with " + safeGetJCRPath(nodeState.getId());
+            String msg = "Internal error: failed to build effective node type from node types defined with " + safeGetJCRPath(nodeState);
-     * Failsafe conversion of internal <code>Path</code> to JCR path for use in
-     * error messages etc.
-     *
-     * @param path path to convert
-     * @return JCR path
-     */
-    public String safeGetJCRPath(Path path) {
-        return mgrProvider.getHierarchyManager().safeGetJCRPath(path);
-    }
-
-    /**
-     * Failsafe translation of internal <code>ItemId</code> to JCR path for use
+     * Failsafe translation of internal <code>ItemState</code> to JCR path for use
-     * @param id id to translate
+     * @param itemState
-     * @see HierarchyManager#safeGetJCRPath(ItemId)
+     * @see LogUtil#safeGetJCRPath(ItemState, NamespaceResolver, HierarchyManager)
-    public String safeGetJCRPath(ItemId id) {
-        return mgrProvider.getHierarchyManager().safeGetJCRPath(id);
+    private String safeGetJCRPath(ItemState itemState) {
+        return LogUtil.safeGetJCRPath(itemState, mgrProvider.getNamespaceResolver(), mgrProvider.getHierarchyManager());
-                throw new ItemNotFoundException(safeGetJCRPath(parentState.getNodeId()));
+                throw new ItemNotFoundException(safeGetJCRPath(parentState));
-                throw new AccessDeniedException(safeGetJCRPath(parentState.getId()) + ": not allowed to create property with name " + propertyName);
+                throw new AccessDeniedException(safeGetJCRPath(parentState) + ": not allowed to create property with name " + propertyName);
-                throw new AccessDeniedException(safeGetJCRPath(parentState.getNodeId()) + ": not allowed to add child node '" + nodeName +"'");
+                throw new AccessDeniedException(safeGetJCRPath(parentState) + ": not allowed to add child node '" + nodeName +"'");
-                    throw new PathNotFoundException(safeGetJCRPath(targetId));
+                    throw new PathNotFoundException(safeGetJCRPath(targetState));
-                    throw new AccessDeniedException(safeGetJCRPath(targetId)
+                    throw new AccessDeniedException(safeGetJCRPath(targetState)
-                        + safeGetJCRPath(targetId);
+                        + safeGetJCRPath(targetState);
-            throw new VersionException(safeGetJCRPath(nodeState.getNodeId()) + " is checked-in");
+            throw new VersionException(safeGetJCRPath(nodeState) + " is checked-in");
-            PropertyId errorId = null;
+            PropertyState errorState = null;
-                errorId = parentState.getPropertyState(propertyName).getPropertyId();
+                errorState = parentState.getPropertyState(propertyName);
-            throw new ItemExistsException(safeGetJCRPath(errorId));
+            throw new ItemExistsException(safeGetJCRPath(errorState));
-                + nodeName.getLocalName() + "' to " + safeGetJCRPath(parentState.getNodeId())
+                + nodeName.getLocalName() + "' to " + safeGetJCRPath(parentState)
-                        + safeGetJCRPath(parentState.getNodeId())
+                        + safeGetJCRPath(parentState)
-                        throw new ReferentialIntegrityException(safeGetJCRPath(targetId)
+                        throw new ReferentialIntegrityException(safeGetJCRPath(targetState)
-                    String msg = "internal error: failed to check references on " + safeGetJCRPath(targetId);
+                    String msg = "internal error: failed to check references on " + safeGetJCRPath(targetState);
-
-    //--------------------------------------------------------------------------
-
-    public NodeId getNodeId(Path nodePath) throws PathNotFoundException, RepositoryException {
-        try {
-            ItemId id = mgrProvider.getHierarchyManager().getItemId(nodePath);
-            if (!id.denotesNode()) {
-                throw new PathNotFoundException(safeGetJCRPath(nodePath));
-            }
-            return (NodeId)id;
-        } catch (ItemNotFoundException infe) {
-            throw new PathNotFoundException(safeGetJCRPath(nodePath));
-        }
-    }
-
-    /**
-     * Retrieves the state of the item with the specified id using the given
-     * item state manager.
-     * <p/>
-     * Note that access rights are <b><i>not</i></b> enforced!
-     *
-     * @param id
-     * @return
-     * @throws ItemNotFoundException
-     * @throws RepositoryException
-     */
-    public NodeState getNodeState(NodeId id) throws ItemNotFoundException, RepositoryException {
-        try {
-            return (NodeState) mgrProvider.getItemStateManager().getItemState(id);
-        } catch (NoSuchItemStateException nsise) {
-            throw new ItemNotFoundException(safeGetJCRPath(id));
-        } catch (ItemStateException ise) {
-            String msg = "internal error: failed to retrieve state of " + safeGetJCRPath(id);
-            log.debug(msg);
-            throw new RepositoryException(msg, ise);
-        }
-    }

MOV26 INS26 UPD40 INS40 INS31 INS29 UPD83 MOV83 MOV43 INS42 INS44 INS8 MOV65 MOV65 MOV65 INS65 UPD43 MOV43 UPD42 MOV42 INS41 UPD66 UPD42 INS68 UPD42 INS32 UPD42 MOV42 MOV42 MOV69 INS69 INS69 INS42 MOV42 UPD42 MOV42 INS32 MOV32 UPD43 INS43 INS43 UPD42 MOV42 UPD42 MOV42 UPD43 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV43 MOV43 UPD42 MOV32 MOV42 UPD42 MOV32 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 UPD42 MOV43 UPD42 MOV32 MOV42 UPD42 UPD42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL83 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL44 DEL42 DEL43 DEL42 DEL45 DEL32 DEL27 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31