JCR-890: concurrent read-only access to a session

Move SessionItemStateManager and HierarchyManager into SessionContext.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@957133 13f79535-47bb-0310-9956-ffa450edef68

-     * the item state mgr associated with this session
-     */
-    protected final SessionItemStateManager itemStateMgr;
-
-    /**
-     * the HierarchyManager associated with this session
-     */
-    protected final HierarchyManager hierMgr;
-
-    /**
-        itemStateMgr = createSessionItemStateManager(wsp.getItemStateManager());
-        hierMgr = itemStateMgr.getHierarchyMgr();
-        itemMgr = createItemManager(itemStateMgr, hierMgr);
-        accessMgr = createAccessManager(subject, itemStateMgr.getHierarchyMgr());
+        context.setItemStateManager(
+                createSessionItemStateManager(wsp.getItemStateManager()));
+        itemMgr = createItemManager();
+        accessMgr = createAccessManager(subject);
-    protected ItemManager createItemManager(SessionItemStateManager itemStateMgr,
-                                            HierarchyManager hierMgr) {
+    protected ItemManager createItemManager() {
-                itemStateMgr, hierMgr, context,
-                ntMgr.getRootNodeDefinition(),
+                context, ntMgr.getRootNodeDefinition(),
-     * @param hierarchyManager
-    protected AccessManager createAccessManager(Subject subject,
-                                                HierarchyManager hierarchyManager)
+    protected AccessManager createAccessManager(Subject subject)
-                hierarchyManager,
+                context.getHierarchyManager(),
-     * Returns the <code>SessionItemStateManager</code> associated with this session.
-     *
-     * @return the <code>SessionItemStateManager</code> associated with this session
-     */
-    protected SessionItemStateManager getItemStateManager() {
-        return itemStateMgr;
-    }
-
-    /**
-        return hierMgr;
+        return context.getHierarchyManager();
-                    NodeId id = getItemStateManager().getIdOfRootTransientNodeState();
+                    NodeId id = context.getItemStateManager().getIdOfRootTransientNodeState();
-                    itemStateMgr.disposeAllTransientItemStates();
+                    context.getItemStateManager().disposeAllTransientItemStates();
-        return itemStateMgr.hasAnyTransientItemStates();
+        return context.getItemStateManager().hasAnyTransientItemStates();
-        if (hierMgr.isShareAncestor(targetNode.getNodeId(), destParentNode.getNodeId())) {
+        if (context.getHierarchyManager().isShareAncestor(targetNode.getNodeId(), destParentNode.getNodeId())) {
-        itemStateMgr.disposeAllTransientItemStates();
+        context.getItemStateManager().disposeAllTransientItemStates();
-        itemStateMgr.dispose();
+        context.getItemStateManager().dispose();
-        itemStateMgr.dump(ps);
+        context.getItemStateManager().dump(ps);

INS32 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL7 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42