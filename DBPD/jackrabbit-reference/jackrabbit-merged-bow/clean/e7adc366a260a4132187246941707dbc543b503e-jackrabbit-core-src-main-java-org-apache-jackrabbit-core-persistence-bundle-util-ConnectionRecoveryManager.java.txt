JCR-1154 A database data store implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@597027 13f79535-47bb-0310-9956-ffa450edef68

-    private static final int TRIALS = 20;
+    public static final int TRIALS = 20;
-    public Statement executeStmt(String sql, Object[] params) throws SQLException, RepositoryException {
+    public PreparedStatement executeStmt(String sql, Object[] params) throws SQLException, RepositoryException {
-    public synchronized Statement executeStmt(String sql, Object[] params, boolean returnGeneratedKeys, int maxRows) throws SQLException, RepositoryException {
+    public synchronized PreparedStatement executeStmt(String sql, Object[] params, boolean returnGeneratedKeys, int maxRows) throws SQLException, RepositoryException {
-    private Statement executeStmtInternal(String sql, Object[] params, boolean returnGeneratedKeys, int maxRows) throws SQLException, RepositoryException {
+    private PreparedStatement executeStmtInternal(String sql, Object[] params, boolean returnGeneratedKeys, int maxRows) throws SQLException, RepositoryException {
-            Class driverClass = Class.forName(driver);
-            // Workaround for Apache Derby:
-            // The JDBC specification recommends the Class.ForName method without the .newInstance() method call, 
-            // but adding the newInstance() guarantees that Derby will be booted on any Java Virtual Machine.
-            driverClass.newInstance();
+            if (driver != null && driver.length() > 0) {
+                Class driverClass = Class.forName(driver);
+                // Workaround for Apache Derby:
+                // The JDBC specification recommends the Class.ForName method without the .newInstance() method call, 
+                // but adding the newInstance() guarantees that Derby will be booted on any Java Virtual Machine.
+                driverClass.newInstance();
+            }
-    private Statement executeStmtInternal(Object[] params, PreparedStatement stmt) throws SQLException {
-        for (int i = 0; i < params.length; i++) {
-            if (params[i] instanceof StreamWrapper) {
-                StreamWrapper wrapper = (StreamWrapper) params[i];
+    private PreparedStatement executeStmtInternal(Object[] params, PreparedStatement stmt) throws SQLException {
+        for (int i = 0; params != null && i < params.length; i++) {
+            Object p = params[i];
+            if (p instanceof StreamWrapper) {
+                StreamWrapper wrapper = (StreamWrapper) p;
+            } else if (p instanceof InputStream) {
+                InputStream stream = (InputStream) p;
+                stmt.setBinaryStream(i + 1, stream, -1);
-                stmt.setObject(i + 1, params[i]);
+                stmt.setObject(i + 1, p);
-         * savely be passed as a parameter to the <code>executeStmt</code>
+         * safely be passed as a parameter to the <code>executeStmt</code>
+
+    public void closeSilently(ResultSet rs) {
+        if (rs != null) {
+            try {
+                rs.close();
+            } catch (SQLException e) {
+                // ignore
+            }
+        }
+    }

INS31 UPD83 UPD43 UPD43 UPD43 UPD43 INS83 INS39 INS42 INS44 INS8 UPD42 UPD42 UPD42 UPD42 INS43 INS42 INS25 INS8 INS27 INS42 INS27 INS8 INS25 INS27 MOV27 MOV60 INS25 UPD66 INS42 INS33 INS54 INS27 MOV8 INS42 INS33 INS43 MOV62 MOV8 INS25 INS8 INS12 INS27 INS27 INS42 UPD42 MOV2 INS42 INS60 INS62 INS8 MOV8 INS21 INS44 INS8 INS42 INS33 INS32 INS34 MOV43 INS59 INS42 INS43 INS60 INS21 INS32 INS43 INS42 INS42 INS42 INS42 INS11 INS42 INS43 INS59 INS32 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS11 INS42 INS42 MOV27 INS42 INS38 INS27 INS42 INS43 INS42 INS34 INS42 INS34 INS42 DEL11 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL25