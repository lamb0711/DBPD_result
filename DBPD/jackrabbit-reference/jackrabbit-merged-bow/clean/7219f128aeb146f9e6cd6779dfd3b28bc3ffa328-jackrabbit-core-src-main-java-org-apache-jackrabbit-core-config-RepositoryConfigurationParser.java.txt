JCR-1441 - Support workspace event listeners that will be created/registered on initialization time


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633546 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import javax.jcr.observation.Event;
+
+    /** Name of the event listener configuration element. */
+    public static final String EVENT_LISTENER_ELEMENT = "EventListener";
+    
+    /** Name of the eventTypes attribute */
+    public static final String EVENT_TYPES_ATTRIBUTE = "eventTypes";
+    
+    /** Default value of the eventTypes attribute */
+    public static final int EVENT_TYPES_VALUE = 
+        Event.NODE_ADDED | Event.NODE_REMOVED | Event.PROPERTY_ADDED |
+        Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED;
+
+    /** Name of the absPath attribute */
+    public static final String ABS_PATH_ATTRIBUTE = "absPath";
+
+    /** Name of the isDeep attribute */
+    public static final String IS_DEEP_ATTRIBUTE = "isDeep";
+
+    /** Name of the uuid attribute */
+    public static final String UUID_ATTRIBUTE = "uuid";
+
+    /** Name of the nodeTypeName attribute */
+    public static final String NODE_TYPE_NAME_ATTRIBUTE = "nodeTypeName";
+    
+    /** Name of the noLocal attribute */
+    public static final String NO_LOCAL_ATTRIBUTE = "noLocal";
+    
+    /** Name of the workspace property */
+    public static final String WORKSPACE_PROP_NAME = "workspace";
+    
-        return new WorkspaceConfig(home, name, clustered, fsc, pmc, sc, ismLockingConfig);
+        // Event listeners configuration (optional)
+        EventListenerConfig[] elcs = tmpParser.parseEventListenersConfig(root);
+        
+        return new WorkspaceConfig(home, name, clustered, fsc, pmc, sc, ismLockingConfig, elcs);
+    
+    /**
+     * Parse event listeners config.
+     * 
+     * @param parent parent of the <code>EventListener</code> elements.
+     * @return event listener configuration array
+     * @throws ConfigurationException if the configuration is broken
+     */
+    protected EventListenerConfig[] parseEventListenersConfig(Element parent)
+            throws ConfigurationException {
+        
+        ArrayList configs = new ArrayList();
+        
+        NodeList children = parent.getChildNodes();
+        for (int i = 0; i < children.getLength(); i++) {
+            Node child = children.item(i);
+            if (child.getNodeType() == Node.ELEMENT_NODE
+                    && EVENT_LISTENER_ELEMENT.equals(child.getNodeName())) {
+                Element element = (Element) child;
+                configs.add(parseEventListenerConfig(element));
+            }
+        }
+        EventListenerConfig[] rv = new EventListenerConfig[configs.size()];
+        configs.toArray(rv);
+        return rv;
+    }
+
+    /**
+     * Parse event listener config.
+     * 
+     * @param element an  <code>EventListener</code> element.
+     * @return event listener configuration
+     * @throws ConfigurationException if the configuration is broken
+     */
+    protected EventListenerConfig parseEventListenerConfig(Element element)
+            throws ConfigurationException {
+        
+        String className = getAttribute(element, CLASS_ATTRIBUTE);
+        Properties parameters = parseParameters(element);
+        
+        // Provide a meaningful default for the workspace property
+        if (!parameters.containsKey(WORKSPACE_PROP_NAME)) {
+            parameters.put(WORKSPACE_PROP_NAME, 
+                    replaceVariables("${" + WORKSPACE_NAME_VARIABLE + "}"));
+        }
+
+        EventListenerConfig config = new EventListenerConfig(className, parameters);
+        config.setEventTypes(getAttribute(element, 
+                EVENT_TYPES_ATTRIBUTE, EVENT_TYPES_VALUE));
+        config.setAbsPath(getAttribute(element, ABS_PATH_ATTRIBUTE, "/"));
+        config.setDeep(getAttribute(element, IS_DEEP_ATTRIBUTE, true));
+        
+        String s = getAttribute(element, UUID_ATTRIBUTE, null);
+        if (s != null) {
+            config.setUUID(s.split(","));
+        }
+        s = getAttribute(element, NODE_TYPE_NAME_ATTRIBUTE, null);
+        if (s != null) {
+            config.setNodeTypeName(s.split(","));
+        }
+        config.setNoLocal(getAttribute(element, NO_LOCAL_ATTRIBUTE, false));
+        return config;
+    }
+    

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS27 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS60 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS42 INS60 INS60 INS24 INS60 INS21 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS21 INS21 INS21 INS60 INS25 INS21 INS25 INS21 INS41 INS66 INS66 INS66 INS40 INS40 INS40 INS40 INS40 INS66 INS66 INS66 INS66 INS66 INS66 INS5 INS59 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS5 INS59 INS32 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS32 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS27 INS32 INS60 INS21 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS45 INS42 INS45 INS43 INS42 INS42 INS42 INS42