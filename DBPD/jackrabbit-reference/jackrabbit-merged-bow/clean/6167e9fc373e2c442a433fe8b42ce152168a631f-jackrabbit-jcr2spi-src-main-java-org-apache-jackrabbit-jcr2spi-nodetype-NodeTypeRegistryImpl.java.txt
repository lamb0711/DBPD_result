code cleanup and minor improvement

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1158308 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-    //private final ConcurrentReaderHashMap registeredNTDefs;
-    // set of property definitions
-    private final Set<QPropertyDefinition> propDefs;
-    // set of node definitions
-    private final Set<QNodeDefinition> nodeDefs;
-
-        propDefs.clear();
-        nodeDefs.clear();
-        //registeredNTDefs = new ConcurrentReaderHashMap();
-
-        propDefs = new HashSet<QPropertyDefinition>();
-        nodeDefs = new HashSet<QNodeDefinition>();
-            for (int i = 0; i < smixins.length; i++) {
-                supportedMixins.add(smixins[i]);
-            }
+            supportedMixins.addAll(Arrays.asList(smixins));
-        QNodeDefinition[] cnda = ntd.getChildNodeDefs();
-        for (int i = 0; i < cnda.length; i++) {
+        for (QNodeDefinition nd : ntd.getChildNodeDefs()) {
-            if (itemDefIds.contains(cnda[i])) {
+            if (itemDefIds.contains(nd)) {
-                if (cnda[i].definesResidual()) {
+                if (nd.definesResidual()) {
-                            + cnda[i].getName();
+                            + nd.getName();
-                itemDefIds.add(cnda[i]);
+                itemDefIds.add(nd);
-            if (cnda[i].definesResidual()) {
+            if (nd.definesResidual()) {
-                unnamedItemDefs.add(cnda[i]);
+                unnamedItemDefs.add(nd);
-                Name name = cnda[i].getName();
+                Name name = nd.getName();
-                    for (int j = 0; j < defs.size(); j++) {
-                        QItemDefinition qDef = defs.get(j);
-                        if (cnda[i].isAutoCreated() || qDef.isAutoCreated()) {
+                    for (QItemDefinition qDef : defs) {
+                        if (nd.isAutoCreated() || qDef.isAutoCreated()) {
-                defs.add(cnda[i]);
+                defs.add(nd);
-        QPropertyDefinition[] pda = ntd.getPropertyDefs();
-        for (int i = 0; i < pda.length; i++) {
+        for (QPropertyDefinition pd : ntd.getPropertyDefs()) {
-            if (itemDefIds.contains(pda[i])) {
+            if (itemDefIds.contains(pd)) {
-                if (pda[i].definesResidual()) {
+                if (pd.definesResidual()) {
-                            + pda[i].getName();
+                            + pd.getName();
-                itemDefIds.add(pda[i]);
+                itemDefIds.add(pd);
-            if (pda[i].definesResidual()) {
+            if (pd.definesResidual()) {
-                unnamedItemDefs.add(pda[i]);
+                unnamedItemDefs.add(pd);
-                Name name = pda[i].getName();
+                Name name = pd.getName();
-                    for (int j = 0; j < defs.size(); j++) {
-                        QItemDefinition qDef = defs.get(j);
-                        if (pda[i].isAutoCreated() || qDef.isAutoCreated()) {
+                    for (QItemDefinition qDef : defs) {
+                        if (pd.isAutoCreated() || qDef.isAutoCreated()) {
-                defs.add(pda[i]);
+                defs.add(pd);
-        for (int i = 0; i < ntNames.length; i++) {
-            if (!ntdCache.containsKey(ntNames[i])) {
-                throw new NoSuchNodeTypeException(ntNames[i].toString());
+        for (Name ntName : ntNames) {
+            if (!ntdCache.containsKey(ntName)) {
+                throw new NoSuchNodeTypeException(ntName.toString());
-                    Name[] remainder = key.getNames();
-                    for (int i = 0; i < remainder.length; i++) {
-                        QNodeTypeDefinition ntd = ntdCache.get(remainder[i]);
+                    for (Name remainder : key.getNames()) {
+                        QNodeTypeDefinition ntd = ntdCache.get(remainder);
-        // copy listeners to array to avoid ConcurrentModificationException
-        NodeTypeRegistryListener[] la =
-                new NodeTypeRegistryListener[listeners.size()];
-        int cnt = 0;
-        for (NodeTypeRegistryListener ntrl : listeners.values()) {
-            la[cnt++] = ntrl;
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].nodeTypeRegistered(ntName);
+        for (NodeTypeRegistryListener ntrl : copyListeners()) {
+            if (ntrl != null) {
+                ntrl.nodeTypeRegistered(ntName);
-        // copy listeners to array to avoid ConcurrentModificationException
-        NodeTypeRegistryListener[] la = new NodeTypeRegistryListener[listeners.size()];
-        int cnt = 0;
-        for (NodeTypeRegistryListener ntrl : listeners.values()) {
-            la[cnt++] = ntrl;
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].nodeTypeReRegistered(ntName);
+        for (NodeTypeRegistryListener ntrl : copyListeners()) {
+            if (ntrl != null) {
+                ntrl.nodeTypeReRegistered(ntName);
-        // copy listeners to array to avoid ConcurrentModificationException
-        NodeTypeRegistryListener[] la = new NodeTypeRegistryListener[listeners.size()];
-        int cnt = 0;
-        for (NodeTypeRegistryListener ntrl : listeners.values()) {
-            la[cnt++] = ntrl;
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].nodeTypeUnregistered(ntName);
+        for (NodeTypeRegistryListener ntrl : copyListeners()) {
+            if (ntrl != null) {
+                ntrl.nodeTypeUnregistered(ntName);
+    private NodeTypeRegistryListener[] copyListeners() {
+        // copy listeners to array to avoid ConcurrentModificationException
+        NodeTypeRegistryListener[] lstnrs = new NodeTypeRegistryListener[listeners.size()];
+        int cnt = 0;
+        for (NodeTypeRegistryListener ntrl : listeners.values()) {
+            lstnrs[cnt++] = ntrl;
+        }
+        return lstnrs;
+    }
+
-
-        // store property & child node definitions of new node type by id
-        QPropertyDefinition[] pda = ntd.getPropertyDefs();
-        synchronized (propDefs) {
-            for (int i = 0; i < pda.length; i++) {
-                propDefs.add(pda[i]);
-            }
-        }
-        QNodeDefinition[] nda = ntd.getChildNodeDefs();
-        synchronized (nodeDefs) {
-            for (int i = 0; i < nda.length; i++) {
-                nodeDefs.add(nda[i]);
-            }
-        }
-
-        if (ntd != null) {
-            // remove property & child node definitions
-            QPropertyDefinition[] pda = ntd.getPropertyDefs();
-            synchronized (propDefs) {
-                for (int i = 0; i < pda.length; i++) {
-                    propDefs.remove(pda[i]);
-                }
-            }
-            synchronized (nodeDefs) {
-                QNodeDefinition[] nda = ntd.getChildNodeDefs();
-                for (int i = 0; i < nda.length; i++) {
-                    nodeDefs.remove(nda[i]);
-                }
-            }
-        }
-        builder.append("NodeTypeRegistry (" + this + ")\n");
+        builder.append("NodeTypeRegistry (").append(this).append(")\n");
-                for (int i = 0; i < supertypes.length; i++) {
-                    builder.append("\n\t\t" + supertypes[i]);
+                for (Name supertype : ntd.getSupertypes()) {
+                    builder.append("\n\t\t").append(supertype);
-                builder.append("\n\tMixin\t" + ntd.isMixin());
-                builder.append("\n\tOrderableChildNodes\t" + ntd.hasOrderableChildNodes());
-                builder.append("\n\tPrimaryItemName\t" + (ntd.getPrimaryItemName() == null ? "<null>" : ntd.getPrimaryItemName().toString()));
+                builder.append("\n\tMixin\t").append(ntd.isMixin());
+                builder.append("\n\tOrderableChildNodes\t").append(ntd.hasOrderableChildNodes());
+                builder.append("\n\tPrimaryItemName\t").append(ntd.getPrimaryItemName() == null ? "<null>" : ntd.getPrimaryItemName().toString());
-                    builder.append(" (declared in " + pd.getDeclaringNodeType() + ") ");
-                    builder.append("\n\t\tName\t\t" + (pd.definesResidual() ? "*" : pd.getName().toString()));
+                    builder.append(" (declared in ").append(pd.getDeclaringNodeType()).append(") ");
+                    builder.append("\n\t\tName\t\t").append(pd.definesResidual() ? "*" : pd.getName().toString());
-                    builder.append("\n\t\tRequiredType\t" + type);
+                    builder.append("\n\t\tRequiredType\t").append(type);
-                    builder.append("\n\t\tDefaultValue\t" + defaultValues.toString());
-                    builder.append("\n\t\tAutoCreated\t" + pd.isAutoCreated());
-                    builder.append("\n\t\tMandatory\t" + pd.isMandatory());
-                    builder.append("\n\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(pd.getOnParentVersion()));
-                    builder.append("\n\t\tProtected\t" + pd.isProtected());
-                    builder.append("\n\t\tMultiple\t" + pd.isMultiple());
+                    builder.append("\n\t\tDefaultValue\t").append(defaultValues.toString());
+                    builder.append("\n\t\tAutoCreated\t").append(pd.isAutoCreated());
+                    builder.append("\n\t\tMandatory\t").append(pd.isMandatory());
+                    builder.append("\n\t\tOnVersion\t").append(OnParentVersionAction.nameFromValue(pd.getOnParentVersion()));
+                    builder.append("\n\t\tProtected\t").append(pd.isProtected());
+                    builder.append("\n\t\tMultiple\t").append(pd.isMultiple());
-                    builder.append(" (declared in " + aNd.getDeclaringNodeType() + ") ");
-                    builder.append("\n\t\tName\t\t" + (aNd.definesResidual() ? "*" : aNd.getName().toString()));
+                    builder.append(" (declared in ").append(aNd.getDeclaringNodeType()).append(") ");
+                    builder.append("\n\t\tName\t\t").append(aNd.definesResidual() ? "*" : aNd.getName().toString());
-                        for (int n = 0; n < reqPrimaryTypes.length; n++) {
-                            builder.append("\n\t\tRequiredPrimaryType\t" + reqPrimaryTypes[n]);
+                        for (Name reqPrimaryType : reqPrimaryTypes) {
+                            builder.append("\n\t\tRequiredPrimaryType\t").append(reqPrimaryType);
-                        builder.append("\n\t\tDefaultPrimaryType\t" + defPrimaryType);
+                        builder.append("\n\t\tDefaultPrimaryType\t").append(defPrimaryType);
-                    builder.append("\n\t\tAutoCreated\t" + aNd.isAutoCreated());
-                    builder.append("\n\t\tMandatory\t" + aNd.isMandatory());
-                    builder.append("\n\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(aNd.getOnParentVersion()));
-                    builder.append("\n\t\tProtected\t" + aNd.isProtected());
-                    builder.append("\n\t\tAllowsSameNameSiblings\t" + aNd.allowsSameNameSiblings());
+                    builder.append("\n\t\tAutoCreated\t").append(aNd.isAutoCreated());
+                    builder.append("\n\t\tMandatory\t").append(aNd.isMandatory());
+                    builder.append("\n\t\tOnVersion\t").append(OnParentVersionAction.nameFromValue(aNd.getOnParentVersion()));
+                    builder.append("\n\t\tProtected\t").append(aNd.isProtected());
+                    builder.append("\n\t\tAllowsSameNameSiblings\t").append(aNd.allowsSameNameSiblings());

INS26 MOV31 INS40 INS31 INS31 MOV29 UPD42 MOV44 MOV29 UPD42 MOV44 MOV29 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 MOV5 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS70 INS70 INS70 INS70 INS70 INS70 INS41 MOV25 MOV21 MOV60 MOV21 INS8 INS44 MOV32 MOV8 INS44 MOV32 MOV8 INS44 INS42 INS8 INS44 INS32 INS8 MOV44 INS32 INS8 MOV44 INS32 INS8 INS42 INS42 MOV21 MOV21 MOV43 INS42 MOV25 INS43 INS42 INS25 INS43 INS42 MOV25 INS43 INS42 UPD42 MOV42 MOV25 UPD42 MOV42 MOV25 UPD42 MOV42 INS25 UPD42 INS32 INS42 INS45 MOV42 INS32 INS8 INS8 INS42 MOV42 INS27 INS8 INS32 INS42 INS52 INS70 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 MOV60 INS25 MOV21 MOV53 INS21 INS42 INS42 INS42 UPD42 MOV42 INS33 MOV21 MOV42 MOV42 INS45 INS44 INS32 INS8 INS32 INS32 INS42 INS42 INS42 INS32 MOV8 INS8 INS32 INS42 UPD42 INS43 INS42 INS42 INS42 MOV21 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV16 INS42 INS42 INS42 INS70 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS70 INS42 INS70 INS42 UPD42 INS42 UPD42 UPD42 UPD42 INS42 INS42 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS44 INS42 MOV8 INS7 INS42 INS44 INS42 MOV8 INS42 INS44 MOV32 MOV8 INS32 INS42 INS42 INS32 INS42 INS45 INS32 INS42 MOV16 INS32 INS42 INS42 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 INS45 INS32 INS42 MOV16 INS70 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV32 MOV43 INS42 INS42 INS27 MOV43 INS42 MOV43 INS42 MOV42 MOV42 INS45 INS32 INS42 MOV32 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 INS32 INS42 MOV32 MOV42 MOV42 INS45 INS44 INS42 INS8 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 INS42 INS45 INS32 MOV42 MOV42 INS45 MOV42 MOV42 INS45 INS43 INS42 MOV21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 MOV42 MOV42 INS45 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL2 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL2 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL37 DEL2 DEL42 DEL7 DEL21 DEL8 DEL70 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL37 DEL2 DEL42 DEL7 DEL21 DEL8 DEL70 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL8 DEL51 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL8 DEL51 DEL8 DEL42 DEL33 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL51 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL8 DEL51 DEL8 DEL25 DEL8 DEL31 DEL45 DEL52 DEL45 DEL27 DEL45 DEL42 DEL42 DEL2 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL45 DEL27 DEL32 DEL45 DEL27 DEL32 DEL45 DEL36 DEL27 DEL45 DEL45 DEL27 DEL45 DEL36 DEL27 DEL45 DEL42 DEL27 DEL45 DEL27 DEL32 DEL45 DEL27 DEL32 DEL45 DEL27 DEL32 DEL45 DEL27 DEL45 DEL27 DEL32 DEL45 DEL27 DEL32 DEL45 DEL45 DEL27 DEL45 DEL36 DEL27 DEL45 DEL42 DEL42 DEL2 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL45 DEL42 DEL27 DEL45 DEL27 DEL32 DEL45 DEL27 DEL32 DEL45 DEL27 DEL45 DEL27 DEL32 DEL45 DEL27 DEL32