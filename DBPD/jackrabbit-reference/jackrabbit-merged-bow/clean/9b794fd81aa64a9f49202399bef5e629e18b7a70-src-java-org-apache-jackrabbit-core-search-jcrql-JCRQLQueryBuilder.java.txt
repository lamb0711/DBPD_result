Added SQL and XPath query implementation. The implementation is not complete yet. Only basic operations are supported.
Also added postGoals to the maven.xml to generate the parser classes for SQL XPath.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@123135 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.log4j.Logger;
+import java.util.Arrays;
+    private static final Logger log = Logger.getLogger(JCRQLQueryBuilder.class);
+
+    /**
+     * Match path exact
+     */
+    public static final int TYPE_EXACT = 1;
+
+    /**
+     * Match child nodes of path
+     */
+    public static final int TYPE_CHILDREN = 2;
+
+    /**
+     * Match descendant nodes or self of path
+     */
+    public static final int TYPE_DESCENDANT_SELF = 3;
+
+    private AndQueryNode constraintNode = new AndQueryNode(null);
+
+        root.setLocationNode(new PathQueryNode(root));
-        node.childrenAccept(this, root);
+        node.childrenAccept(this, root);
+
+        // use //* if no path has been set
+        PathQueryNode pathNode = root.getLocationNode();
+        if (pathNode.getPathSteps().length == 0) {
+            pathNode.addPathStep(new LocationStepQueryNode(pathNode, "", false));
+            pathNode.addPathStep(new LocationStepQueryNode(pathNode, null, true));
+        }
+
+        // attach constraint to last path step
+        LocationStepQueryNode[] steps = pathNode.getPathSteps();
+        steps[steps.length - 1].addPredicate(constraintNode);
+
-        QueryRootNode root = (QueryRootNode) data;
-        // add node type query to parent
-        node.childrenAccept(this, root.getConstraintNode());
+        node.childrenAccept(this, constraintNode);
-        root.setLocationNode(new PathQueryNode(root, node.getStringLocation(),
-                node.getType()));
+        PathQueryNode pathNode = root.getLocationNode();
+
+        String path = node.getStringLocation();
+        String[] names = path.split("/");
+        for (int i = 0; i < names.length; i++) {
+            if (names[i].length() == 0) {
+                if (i == 0) {
+                    // root
+                    pathNode.addPathStep(new LocationStepQueryNode(pathNode, "", false));
+                } else {
+                    log.error("Internal error: descendant-or-self axis not allowed here");
+                }
+            } else {
+                int idx = names[i].indexOf('[');
+                String name = null;
+                int index = 0;
+                if (idx > -1) {
+                    // contains index
+                    name = names[i].substring(0, idx);
+                    String suffix = names[i].substring(idx);
+                    try {
+                        index = Integer.parseInt(suffix.substring(1, suffix.length() - 1));
+                    } catch (NumberFormatException e) {
+                        log.warn("Unable to parse index for path element: " + names[i]);
+                    }
+                } else {
+                    // no index
+                    name = names[i];
+                }
+                if (name.equals("%") || name.equals("*")) {
+                    name = null;
+                }
+                LocationStepQueryNode step = new LocationStepQueryNode(pathNode, name, false);
+                if (index > 0) {
+                    step.setIndex(index);
+                }
+                pathNode.addPathStep(step);
+            }
+        }
+
+        if (node.getType() == TYPE_CHILDREN) {
+            pathNode.addPathStep(new LocationStepQueryNode(pathNode, null, false));
+        } else if (node.getType() == TYPE_DESCENDANT_SELF) {
+            //LocationStepQueryNode[] steps = pathNode.getPathSteps();
+            //steps[steps.length - 1].setIncludeDescendants(true);
+            pathNode.addPathStep(new LocationStepQueryNode(pathNode, null, true));
+        }
+
-        QueryRootNode root = (QueryRootNode) data;
-        return node.childrenAccept(this, root.getConstraintNode());
+        return node.childrenAccept(this, constraintNode);
-        if (type == Constants.TYPE_DATE) {
+        if (type == Constants.TYPE_TIMESTAMP) {
-        QueryRootNode root = (QueryRootNode) data;
-        root.setTextsearchNode(new TextsearchQueryNode(root, node.getQuery()));
-        return root;
+        constraintNode.addOperand(new TextsearchQueryNode(constraintNode, node.getQuery()));
+        return data;
-        root.setOrderNode(new OrderQueryNode(root, node.getProperties(), node.isAscending()));
+        String[] props = node.getProperties();
+        boolean[] orders = new boolean[props.length];
+        Arrays.fill(orders, node.isAscending());
+        root.setOrderNode(new OrderQueryNode(root, props, orders));

INS26 INS26 MOV31 MOV31 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS59 MOV43 MOV44 MOV44 MOV43 MOV44 MOV44 MOV83 MOV43 MOV42 MOV44 MOV44 INS8 INS83 MOV43 INS42 MOV44 MOV44 INS8 INS42 INS42 INS32 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS42 INS34 INS42 INS42 INS14 MOV60 INS21 MOV21 INS60 INS25 INS60 INS21 MOV41 MOV41 MOV60 INS60 INS60 INS60 INS24 INS25 MOV41 MOV41 INS41 INS60 INS60 INS21 INS42 INS42 INS57 INS66 INS66 INS66 INS43 INS33 INS32 MOV43 INS59 INS27 INS8 INS5 INS59 INS32 INS43 INS59 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS25 INS42 INS5 INS59 INS5 INS59 INS32 INS43 INS42 INS42 INS42 INS14 INS42 INS32 INS22 INS34 INS21 MOV21 INS43 INS85 INS42 INS32 INS2 INS42 INS42 UPD42 UPD42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS25 MOV32 INS42 INS21 INS27 INS8 UPD42 MOV42 UPD40 UPD42 UPD42 INS43 INS85 INS42 MOV32 INS39 INS85 INS42 INS3 INS42 INS42 INS42 MOV32 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS34 INS27 INS8 INS8 INS32 INS32 INS42 INS21 UPD42 INS42 INS5 INS40 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS14 UPD42 UPD42 INS14 INS40 INS34 INS32 INS34 INS25 INS60 INS60 INS60 INS25 INS25 MOV60 INS25 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS39 INS85 INS43 INS42 INS45 INS9 INS43 INS42 INS33 INS9 INS2 INS42 INS27 INS8 INS8 INS39 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS27 INS8 UPD43 INS27 INS8 INS32 INS43 INS42 INS33 INS9 INS42 INS42 INS14 UPD42 MOV42 INS42 INS42 INS42 INS42 INS34 INS21 INS21 INS42 INS32 INS42 INS42 INS33 INS42 INS34 INS42 INS38 INS21 INS60 INS54 INS21 INS32 INS32 INS21 UPD42 UPD42 INS14 INS42 INS34 INS21 INS42 INS42 INS42 INS42 INS43 INS42 INS33 INS9 INS32 INS32 INS2 INS42 INS13 INS34 INS7 INS43 INS59 INS8 INS12 INS7 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS43 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS2 INS42 INS33 UPD42 MOV42 INS42 INS42 INS42 INS43 INS42 INS45 INS9 INS2 INS42 INS34 INS42 INS2 INS42 INS42 INS7 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS34 INS27 INS45 INS2 INS32 INS34 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL8 DEL31 DEL52 DEL42 DEL42 DEL32 DEL43 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL14 DEL43 DEL42 DEL11 DEL42 DEL32 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL41