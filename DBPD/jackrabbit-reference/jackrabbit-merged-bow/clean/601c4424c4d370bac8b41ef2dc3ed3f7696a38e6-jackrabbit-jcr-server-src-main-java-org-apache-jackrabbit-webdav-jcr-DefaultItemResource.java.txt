JCR-2344: ClassCastException org.apache.xerces.parsers.XIncludeAwareParserConfiguration cannot be cast to org.apache.xerces.xni.parser.XMLParserConfiguration when deploying in JBoss 5.1

Replace our last Xerces dependency with the SerializingContentHandler class.

Tested against regressions with the litmus and jcr2dav test suites.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@935544 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.xml.SerializingContentHandler;
-import org.apache.xml.serialize.OutputFormat;
-import org.apache.xml.serialize.XMLSerializer;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.SAXException;
+import javax.jcr.Binary;
-import javax.jcr.ValueFormatException;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.sax.SAXResult;
+
-        InputStream in = null;
+        OutputStream out = outputContext.getOutputStream();
+        if (out != null && exists()) {
+            if (isMultiple()) {
+                spoolMultiValued(out);
+            } else {
+                spoolSingleValued(out);
+            }
+        }
+    }
+
+    private void spoolMultiValued(OutputStream out) {
-            OutputStream out = outputContext.getOutputStream();
-            if (out != null && exists()) {
-                if (isMultiple()) {
-                    Document doc = DomUtil.BUILDER_FACTORY.newDocumentBuilder().newDocument();
-                    doc.appendChild(getProperty(JCR_VALUES).toXml(doc));
-                    OutputFormat format = new OutputFormat("xml", "UTF-8", false);
-                    XMLSerializer serializer = new XMLSerializer(out, format);
-                    serializer.setNamespaces(true);
-                    serializer.asDOMSerializer().serialize(doc);
-                } else {
-                    in = ((Property)item).getStream();
-                    if (in != null) {
-                        IOUtil.spool(in, out);
-                    }
-                }
-            }
+            Document doc =
+                DomUtil.BUILDER_FACTORY.newDocumentBuilder().newDocument();
+            doc.appendChild(getProperty(JCR_VALUES).toXml(doc));
+
+            ContentHandler handler =
+                SerializingContentHandler.getSerializer(out);
+
+            Transformer transformer =
+                TransformerFactory.newInstance().newTransformer();
+            transformer.transform(
+                    new DOMSource(doc), new SAXResult(handler));
+        } catch (SAXException e) {
+            log.error("Failed to set up XML serializer for " + item, e);
+        } catch (TransformerConfigurationException e) {
+            log.error("Failed to set up XML transformer for " + item, e);
-            log.error("Error while spooling multivalued resource: " + e.getMessage());
-        } catch (ValueFormatException e) {
-            // should not occur
-            log.error("Cannot obtain stream from resource: " + e.getMessage());
-        } catch (RepositoryException e) {
-            log.error("Cannot obtain stream from resource: " + e.getMessage());
-        } finally {
-            if (in != null) {
-                in.close();
+            log.error("Failed to set up XML document for " + item, e);
+        } catch (TransformerException e) {
+            log.error("Failed to serialize the values of " + item, e);
+        }
+    }
+
+    private void spoolSingleValued(OutputStream out) throws IOException {
+        try {
+            Binary binary = ((Property) item).getBinary();
+            try {
+                InputStream in = binary.getStream();
+                try {
+                    IOUtil.spool(in, out);
+                } finally {
+                    in.close();
+                }
+            } finally {
+                binary.dispose();
+        } catch (RepositoryException e) {
+            log.error("Cannot obtain stream from " + item, e);
-            } else if (propEntry instanceof DavProperty) {
+            } else if (propEntry instanceof DavProperty<?>) {

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS31 INS31 INS31 MOV29 MOV78 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS8 MOV21 MOV60 INS25 INS43 INS42 INS54 INS43 INS42 INS42 INS54 MOV27 INS8 INS42 INS8 INS12 INS12 MOV12 MOV12 INS42 INS8 MOV12 INS25 MOV60 MOV21 MOV60 MOV60 MOV21 INS44 INS8 INS44 INS8 INS60 INS54 MOV32 INS8 INS8 UPD43 UPD43 INS43 INS42 MOV21 INS43 INS42 INS21 UPD43 INS43 INS59 INS8 INS8 INS21 INS21 UPD42 UPD42 INS32 UPD42 UPD42 INS32 UPD42 UPD42 INS14 INS14 INS42 INS42 INS32 UPD42 INS42 INS42 MOV32 INS60 INS54 INS21 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 UPD42 MOV43 INS59 MOV8 MOV8 INS32 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 UPD42 MOV42 UPD45 INS42 UPD45 INS42 INS42 INS32 INS42 INS42 UPD45 INS42 MOV43 INS76 INS42 INS42 DEL42 DEL43 DEL45 DEL45 DEL9 DEL14 DEL42 DEL43 DEL42 DEL42 DEL14 DEL9 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL59 DEL60 DEL8 DEL42 DEL7 DEL21 DEL33 DEL27 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL25 DEL8 DEL54 DEL8 DEL31