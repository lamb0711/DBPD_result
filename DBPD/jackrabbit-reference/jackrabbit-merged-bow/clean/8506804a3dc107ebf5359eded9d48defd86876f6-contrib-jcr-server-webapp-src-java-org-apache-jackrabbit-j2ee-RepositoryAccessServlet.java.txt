webapp: adding some better error reporting  (tobi)
webapp: adding support for late repository retrieval (tobi)
server: workspace not passed to Repository.login in webdav/simple/DavSessionProviderImpl
JCR-280 - IllegalArgumentException when retrieving DateHeader 
JCR-282 - respect maximal value for timeout
JCR-276 - SimpleWebdavServlet: avoid 404 on the root collection after successful connection to it.


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@349905 13f79535-47bb-0310-9956-ffa450edef68

-    // todo: implement correctly
-    public final static String INIT_PARAM_LOG4J_CONFIG = "log4j-config";
-
-    public final static String INIT_PARAM_MISSING_AUTH_MAPPING = "missing-auth-mapping";
+    //public final static String INIT_PARAM_MISSING_AUTH_MAPPING = "missing-auth-mapping";
-    private String repositoryName;
+    private static final String CTX_ATTR_REPOSITORY_NAME = "jcr.repository.name";
+
+    private static final String CTX_ATTR_REPOSITORY_RMI_URI = "jcr.repository.rmiURI";
+
+    private static final String CTX_ATTR_REPOSITORY_JNDI_CONTEXT = "jcr.repository.jndiContext";
-        repositoryName = getServletConfig().getInitParameter(INIT_PARAM_REPOSITORY_NAME);
+        // fetching the name
+        String repositoryName = getServletConfig().getInitParameter(INIT_PARAM_REPOSITORY_NAME);
-        Repository repository = null;
+        getServletContext().setAttribute(CTX_ATTR_REPOSITORY_NAME, repositoryName);
-        // try to retrieve via rmi
-        if (repository == null) {
-            String rmiURI = getRMIUri();
-            if (rmiURI != null) {
-                repository = getRepositoryByRMI(rmiURI);
-            }
-        }
-        // try to retrieve via jndi
-        if (repository == null) {
-            InitialContext context = getInitialContext();
-            if (context != null) {
-                repository = getRepositoryByJNDI(context);
-            }
-        }
-        // error
-        if (repository == null) {
-            log.error("Unable to retrieve repository");
-            throw new ServletException("Unable to retrieve repository");
-        }
-        getServletContext().setAttribute(CTX_ATTR_REPOSITORY, repository);
-        log.info(repository.getDescriptor(Repository.REP_NAME_DESC) + " v" + repository.getDescriptor(Repository.REP_VERSION_DESC));
+        // fetching the rmiuri
+        getServletContext().setAttribute(CTX_ATTR_REPOSITORY_RMI_URI, getRMIUri());
+
+        // setup initial context
+        getServletContext().setAttribute(CTX_ATTR_REPOSITORY_JNDI_CONTEXT, getInitialContext());
-    private InitialContext getInitialContext() throws ServletException {
+    private InitialContext getInitialContext() {
-	    throw new ServletException(e);
+	    return null;
-    private Repository getRepositoryByJNDI(InitialContext jndiContext) {
+    private static Repository getRepositoryByJNDI(ServletContext ctx) {
+        String repositoryName = (String) ctx.getAttribute(CTX_ATTR_REPOSITORY_NAME);
+        InitialContext jndiContext = (InitialContext) ctx.getAttribute(CTX_ATTR_REPOSITORY_JNDI_CONTEXT);
+        if (jndiContext == null) {
+            return null;
+        }
-    private Repository getRepositoryByRMI(String rmiURI) {
+    private static Repository getRepositoryByRMI(ServletContext ctx) {
+        String rmiURI = (String) ctx.getAttribute(CTX_ATTR_REPOSITORY_RMI_URI);
+        if (rmiURI == null) {
+            return null;
+        }
+     * @throws IllegalStateException if the repository is not available in the context.
-	return (Repository) ctx.getAttribute(CTX_ATTR_REPOSITORY);
+        Repository repository = (Repository) ctx.getAttribute(CTX_ATTR_REPOSITORY);
+        if (repository != null) {
+            return repository;
+        } else {
+            repository = getRepositoryByRMI(ctx);
+        }
+        // try to retrieve via jndi
+        if (repository == null) {
+            repository = getRepositoryByJNDI(ctx);
+        }
+        // error
+        if (repository == null) {
+            log.fatal("The repository is not available. Check config of 'RepositoryAccessServlet'.");
+            throw new IllegalStateException("The repository is not available.");
+        } else {
+            ctx.setAttribute(CTX_ATTR_REPOSITORY, repository);
+            log.info(repository.getDescriptor(Repository.REP_NAME_DESC) + " v" + repository.getDescriptor(Repository.REP_VERSION_DESC));
+            return repository;
+        }

MOV23 MOV23 INS31 INS31 MOV29 INS83 UPD83 INS83 UPD83 INS83 INS83 INS43 MOV29 MOV83 MOV39 MOV42 MOV43 INS8 INS83 INS83 MOV29 INS83 INS83 MOV43 INS42 MOV44 INS8 UPD42 UPD45 UPD42 UPD45 INS42 UPD42 INS45 MOV21 INS60 MOV25 MOV21 INS21 INS21 MOV21 INS43 INS42 INS60 INS60 INS25 INS43 INS42 INS60 INS25 INS65 MOV60 MOV25 MOV25 INS25 MOV43 INS59 INS32 INS32 INS32 INS42 MOV43 INS59 MOV43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS66 MOV43 INS8 MOV27 MOV27 MOV8 INS8 INS42 MOV32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 MOV32 INS42 INS42 MOV32 INS42 INS11 INS42 INS11 INS42 INS33 INS41 INS42 INS42 INS11 INS42 INS33 INS41 UPD42 MOV11 UPD42 INS41 MOV21 MOV21 INS41 INS42 INS42 INS41 INS43 INS32 MOV43 INS32 INS33 MOV43 INS32 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD45 UPD43 UPD45 INS42 UPD42 UPD42 UPD42 DEL83 DEL83 DEL42 DEL7 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL59 DEL60 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL53 DEL42 DEL42 DEL42 DEL33 DEL27 DEL83 DEL83 DEL42 DEL41 DEL8 DEL31