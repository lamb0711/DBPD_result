JCR-2156: Usage of "qualified name" in JavaDoc and Comments

- spi-commons/nodetype/constraints package (omitted yesterday in order to avoid conflicts)

JCR-2153: Introduce QValueConstraint and change return type of QPropertyDefinition.getValueConstraints()

- introduce constants for the wildcards
- fixing creation of PathConstraint from /*
- fixing testcases (still used to previous internal form for path constraint)
- minor improvement to constraint tests in general



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@786019 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.PathFactory;
+    static final String WILDCARD = Path.DELIMITER + NameConstants.ANY_NAME.toString();
+    static final String JCR_WILDCARD = "/*";
+    // TODO improve. don't rely on a specific factory impl
+    private static final PathFactory PATH_FACTORY = PathFactoryImpl.getInstance();
+
-    static PathConstraint create(String qualifiedDefinition) throws InvalidConstraintException {
-        // constraint format: qualified absolute or relative path with optional trailing wildcard
-        boolean deep = qualifiedDefinition.endsWith("\t{}*");
-        Path path;
-        // TODO improve. don't rely on a specific factory impl
-        if (deep) {
-            path = PathFactoryImpl.getInstance().create(qualifiedDefinition.substring(0, qualifiedDefinition.length() - 4));
+    static PathConstraint create(String pathString) throws InvalidConstraintException {
+        // constraint format: String representation of an absolute or relative
+        // Path object with optionally having a trailing wildcard
+        if (WILDCARD.equals(pathString)) {
+            return new PathConstraint(pathString, PATH_FACTORY.getRootPath(), true);
-            path = PathFactoryImpl.getInstance().create(qualifiedDefinition);
+            boolean deep = pathString.endsWith(WILDCARD);
+            Path path;
+            if (deep) {
+                path = PATH_FACTORY.create(pathString.substring(0, pathString.length() - WILDCARD.length()));
+            } else {
+                path = PATH_FACTORY.create(pathString);
+            }
+            return new PathConstraint(pathString, path, deep);
-        return new PathConstraint(qualifiedDefinition, path, deep);
-    static PathConstraint create(String definition, PathResolver resolver)
+    static PathConstraint create(String jcrPath, PathResolver resolver)
-            boolean deep = definition.endsWith("/*");
-            if (deep) {
-                // trim trailing wildcard before building path
-                if (definition.equals("/*")) {
-                    definition = "/";
-                } else {
-                    definition = definition.substring(0, definition.length() - 2);
+            boolean deep = jcrPath.endsWith(JCR_WILDCARD);
+            Path path;
+            if (JCR_WILDCARD.equals(jcrPath)) {
+                path = PATH_FACTORY.getRootPath();
+            } else {
+                if (deep) {
+                    // trim trailing wildcard before building path
+                    jcrPath = jcrPath.substring(0, jcrPath.length() - JCR_WILDCARD.length());
+                path = resolver.getQPath(jcrPath);
-            Path path = resolver.getQPath(definition);
-            StringBuffer qualifiedDefinition = new StringBuffer(path.getString());
+            StringBuffer definition = new StringBuffer(path.getString());
-                qualifiedDefinition.append(Path.DELIMITER);
-                qualifiedDefinition.append(NameConstants.ANY_NAME);
+                definition.append(WILDCARD);
-            return new PathConstraint(qualifiedDefinition.toString(), path, deep);
+            return new PathConstraint(definition.toString(), path, deep);
-            String msg = "Invalid path expression specified as value constraint: " + definition;
+            String msg = "Invalid path expression specified as value constraint: " + jcrPath;
-            String msg = "Invalid path expression specified as value constraint: " + definition;
+            String msg = "Invalid path expression specified as value constraint: " + jcrPath;
-    private PathConstraint(String qualifiedDefinition, Path path, boolean deep) throws InvalidConstraintException {
-        super(qualifiedDefinition);
+    private PathConstraint(String pathString, Path path, boolean deep) throws InvalidConstraintException {
+        super(pathString);
-     * qualified <code>Path</code> into a JCR path.
+     * <code>Path</code> present with this constraint into a JCR path.
-     * @see ValueConstraint#check(QValue)
+     * @see org.apache.jackrabbit.spi.QValueConstraint#check(QValue)

INS26 INS40 INS23 INS23 INS23 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV44 INS8 INS44 MOV44 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 MOV32 UPD42 INS25 MOV43 INS42 MOV12 UPD42 INS40 INS32 INS32 INS8 INS8 UPD42 UPD66 INS40 INS42 INS42 INS42 INS42 INS41 MOV60 MOV60 MOV25 MOV41 INS60 INS25 MOV44 MOV44 INS40 INS14 INS43 INS59 MOV32 MOV8 INS8 MOV43 INS42 INS32 INS9 MOV43 UPD42 INS42 INS42 UPD42 INS42 INS25 INS21 UPD42 INS43 MOV43 INS43 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 MOV8 INS7 INS42 UPD42 INS42 UPD42 INS32 INS42 INS32 UPD42 INS42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS32 UPD42 INS42 INS42 DEL45 DEL34 DEL42 DEL32 DEL8 DEL45 DEL45 DEL45 DEL34 DEL42 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL44 DEL42