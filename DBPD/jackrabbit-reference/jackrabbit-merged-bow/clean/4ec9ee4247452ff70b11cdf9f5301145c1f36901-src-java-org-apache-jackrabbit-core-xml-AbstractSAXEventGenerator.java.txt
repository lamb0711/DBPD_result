- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.*;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.ItemStateProvider;
-import org.apache.jackrabbit.core.state.ItemStateProvider;
-import org.apache.jackrabbit.core.state.ItemStateException;
-import org.apache.jackrabbit.core.*;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.1 $, $Date: 2004/08/24 09:30:55 $
-	    new QName(NamespaceRegistryImpl.NS_JCR_URI, "root");
+            new QName(NamespaceRegistryImpl.NS_JCR_URI, "root");
-					boolean noRecurse, boolean binaryAsLink,
-					ItemStateProvider stateProvider,
-					NamespaceRegistryImpl nsReg,
-					AccessManagerImpl accessMgr,
-					ContentHandler contentHandler) {
-	this.stateProvider = stateProvider;
-	this.nsReg = nsReg;
-	this.accessMgr = accessMgr;
-	startNodeState = nodeState;
-	startNodeName = nodeName;
-	this.contentHandler = contentHandler;
-	this.binaryAsLink = binaryAsLink;
-	this.noRecurse = noRecurse;
+                                        boolean noRecurse, boolean binaryAsLink,
+                                        ItemStateProvider stateProvider,
+                                        NamespaceRegistryImpl nsReg,
+                                        AccessManagerImpl accessMgr,
+                                        ContentHandler contentHandler) {
+        this.stateProvider = stateProvider;
+        this.nsReg = nsReg;
+        this.accessMgr = accessMgr;
+        startNodeState = nodeState;
+        startNodeName = nodeName;
+        this.contentHandler = contentHandler;
+        this.binaryAsLink = binaryAsLink;
+        this.noRecurse = noRecurse;
-	contentHandler.startDocument();
-	// namespace declarations
-	documentPrefixMappings();
-	// start serializing node state(s)
-	process(startNodeState, startNodeName, 0);
+        contentHandler.startDocument();
+        // namespace declarations
+        documentPrefixMappings();
+        // start serializing node state(s)
+        process(startNodeState, startNodeName, 0);
-	contentHandler.endDocument();
+        contentHandler.endDocument();
-     *
-	// namespace declarations
-	String[] prefixes = nsReg.getPrefixes();
-	for (int i = 0; i < prefixes.length; i++) {
-	    String prefix = prefixes[i];
-	    String uri = nsReg.getURI(prefix);
-	    contentHandler.startPrefixMapping(prefix, uri);
-	}
+        // namespace declarations
+        String[] prefixes = nsReg.getPrefixes();
+        for (int i = 0; i < prefixes.length; i++) {
+            String prefix = prefixes[i];
+            String uri = nsReg.getURI(prefix);
+            contentHandler.startPrefixMapping(prefix, uri);
+        }
-	    throws RepositoryException, SAXException {
+            throws RepositoryException, SAXException {
-	// enter node
-	entering(nodeState, nodeName, level);
+        // enter node
+        entering(nodeState, nodeName, level);
-	// enter properties
-	enteringProperties(nodeState, nodeName, level);
+        // enter properties
+        enteringProperties(nodeState, nodeName, level);
-	// serialize jcr:primaryType, jcr:mixinTypes & jcr:uuid first:
-	// jcr:primaryType
-	if (nodeState.hasPropertyEntry(PROPNAME_PRIMARYTYPE)) {
-	    process(nodeState.getPropertyEntry(PROPNAME_PRIMARYTYPE), nodeState.getUUID(), level + 1);
-	} else {
-	    String msg = "internal error: missing jcr:primaryType property on node " + nodeState.getUUID();
-	    log.error(msg);
-	    throw new RepositoryException(msg);
-	}
-	// jcr:mixinTypes
-	if (nodeState.hasPropertyEntry(PROPNAME_MIXINTYPES)) {
-	    process(nodeState.getPropertyEntry(PROPNAME_MIXINTYPES), nodeState.getUUID(), level + 1);
-	}
-	// jcr:uuid
-	if (nodeState.hasPropertyEntry(PROPNAME_UUID)) {
-	    process(nodeState.getPropertyEntry(PROPNAME_UUID), nodeState.getUUID(), level + 1);
-	}
+        // serialize jcr:primaryType, jcr:mixinTypes & jcr:uuid first:
+        // jcr:primaryType
+        if (nodeState.hasPropertyEntry(PROPNAME_PRIMARYTYPE)) {
+            process(nodeState.getPropertyEntry(PROPNAME_PRIMARYTYPE), nodeState.getUUID(), level + 1);
+        } else {
+            String msg = "internal error: missing jcr:primaryType property on node " + nodeState.getUUID();
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+        // jcr:mixinTypes
+        if (nodeState.hasPropertyEntry(PROPNAME_MIXINTYPES)) {
+            process(nodeState.getPropertyEntry(PROPNAME_MIXINTYPES), nodeState.getUUID(), level + 1);
+        }
+        // jcr:uuid
+        if (nodeState.hasPropertyEntry(PROPNAME_UUID)) {
+            process(nodeState.getPropertyEntry(PROPNAME_UUID), nodeState.getUUID(), level + 1);
+        }
-	// serialize remaining properties
-	Iterator iter = nodeState.getPropertyEntries().iterator();
-	while (iter.hasNext()) {
-	    NodeState.PropertyEntry pe = (NodeState.PropertyEntry) iter.next();
-	    if (PROPNAME_PRIMARYTYPE.equals(pe.getName())
-		    || PROPNAME_MIXINTYPES.equals(pe.getName())
-		    || PROPNAME_UUID.equals(pe.getName())) {
-		continue;
-	    }
-	    PropertyId propId = new PropertyId(nodeState.getUUID(), pe.getName());
-	    // check read access
-	    if (accessMgr.isGranted(propId, Permission.READ_ITEM)) {
-		// serialize property
-		process(pe, nodeState.getUUID(), level + 1);
-	    }
-	}
+        // serialize remaining properties
+        Iterator iter = nodeState.getPropertyEntries().iterator();
+        while (iter.hasNext()) {
+            NodeState.PropertyEntry pe = (NodeState.PropertyEntry) iter.next();
+            if (PROPNAME_PRIMARYTYPE.equals(pe.getName())
+                    || PROPNAME_MIXINTYPES.equals(pe.getName())
+                    || PROPNAME_UUID.equals(pe.getName())) {
+                continue;
+            }
+            PropertyId propId = new PropertyId(nodeState.getUUID(), pe.getName());
+            // check read access
+            if (accessMgr.isGranted(propId, Permission.READ_ITEM)) {
+                // serialize property
+                process(pe, nodeState.getUUID(), level + 1);
+            }
+        }
-	// leaving properties
-	leavingProperties(nodeState, nodeName, level);
+        // leaving properties
+        leavingProperties(nodeState, nodeName, level);
-	if (!noRecurse) {
-	    // child nodes
-	    iter = nodeState.getChildNodeEntries().iterator();
-	    while (iter.hasNext()) {
-		NodeState.ChildNodeEntry cne = (NodeState.ChildNodeEntry) iter.next();
-		NodeId childId = new NodeId(cne.getUUID());
-		// check read access
-		if (accessMgr.isGranted(childId, Permission.READ_ITEM)) {
-		    NodeState childState;
-		    try {
-			childState = (NodeState) stateProvider.getItemState(childId);
-		    } catch (ItemStateException ise) {
-			String msg = "internal error: failed to retrieve state of node " + childId;
-			log.error(msg, ise);
-			throw new RepositoryException(msg, ise);
-		    }
-		    // recurse
-		    process(childState, cne.getName(), level + 1);
-		}
-	    }
-	}
+        if (!noRecurse) {
+            // child nodes
+            iter = nodeState.getChildNodeEntries().iterator();
+            while (iter.hasNext()) {
+                NodeState.ChildNodeEntry cne = (NodeState.ChildNodeEntry) iter.next();
+                NodeId childId = new NodeId(cne.getUUID());
+                // check read access
+                if (accessMgr.isGranted(childId, Permission.READ_ITEM)) {
+                    NodeState childState;
+                    try {
+                        childState = (NodeState) stateProvider.getItemState(childId);
+                    } catch (ItemStateException ise) {
+                        String msg = "internal error: failed to retrieve state of node " + childId;
+                        log.error(msg, ise);
+                        throw new RepositoryException(msg, ise);
+                    }
+                    // recurse
+                    process(childState, cne.getName(), level + 1);
+                }
+            }
+        }
-	// leaving node
-	leaving(nodeState, nodeName, level);
+        // leaving node
+        leaving(nodeState, nodeName, level);
-     *
-	    throws RepositoryException, SAXException {
-	PropertyId propId = new PropertyId(parentUUID, propEntry.getName());
-	try {
-	    PropertyState propState = (PropertyState) stateProvider.getItemState(propId);
-	    // serialize property
-	    entering(propState, level);
-	    leaving(propState, level);
-	} catch (ItemStateException ise) {
-	    String msg = "internal error: failed to retrieve state of property " + propId;
-	    log.error(msg, ise);
-	    throw new RepositoryException(msg, ise);
-	}
+            throws RepositoryException, SAXException {
+        PropertyId propId = new PropertyId(parentUUID, propEntry.getName());
+        try {
+            PropertyState propState = (PropertyState) stateProvider.getItemState(propId);
+            // serialize property
+            entering(propState, level);
+            leaving(propState, level);
+        } catch (ItemStateException ise) {
+            String msg = "internal error: failed to retrieve state of property " + propId;
+            log.error(msg, ise);
+            throw new RepositoryException(msg, ise);
+        }
-     *
-	    throws RepositoryException, SAXException;
+            throws RepositoryException, SAXException;
-     *
-	    throws RepositoryException, SAXException;
+            throws RepositoryException, SAXException;
-     *
-	    throws RepositoryException, SAXException;
+            throws RepositoryException, SAXException;
-     *
-	    throws RepositoryException, SAXException;
+            throws RepositoryException, SAXException;
-     *
-	    throws RepositoryException, SAXException;
+            throws RepositoryException, SAXException;
-     *
-	    throws RepositoryException, SAXException;
+            throws RepositoryException, SAXException;

MOV26 MOV26 MOV26 DEL66 DEL65 DEL66 DEL65