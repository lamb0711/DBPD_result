work in progress.

- nodestates must always be connected to their cne upon creation
  TODO: add some sort of caching to avoid traffic overhead
- add TODO for refresh, that currently doesn't work properly
- ItemState.refresh only takes changelog and returns the ids of the
  processed states. cleanup of events is left to caller.
- move of NodeStates does not work
- PathResolver: force start to be an NodeState
- all MODIFIED status for SessionStates as well in order to make sure
  that listeners are informed about external changes even if the 
  state is EXISTING.

next TODO: make sure, that public getChildNodeEntry/ies and hasChildNodeEntry check for validity of the connected NodeState. don't return entries, where the nodestate is (transiently) removed or stale.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@472818 13f79535-47bb-0310-9956-ffa450edef68

-    private final ItemState start;
+    private final NodeState start;
-    private PathResolver(ItemState start, Path relPath) {
+    private PathResolver(NodeState start, Path relPath) {
-    public static ItemState resolve(ItemState start, Path path)
+    public static ItemState resolve(NodeState start, Path path)
-    public static ItemState lookup(ItemState start, Path path)
+    public static ItemState lookup(NodeState start, Path path)
-     * @throws ItemStateException       if an error occurs while retrieving the
-     *                                  item state.
+     * @throws ItemStateException if an error occurs while retrieving the item state.
-        if (!start.isNode()) {
-            throw new NoSuchItemStateException(path.toString());
-        }
-        NodeState state = (NodeState) start;
+        NodeState state = start;
-                state = state.getChildNodeEntry(elem.getName(),
-                        elem.getNormalizedIndex()).getNodeState();
+                ChildNodeEntry cne = state.getChildNodeEntry(elem.getName(), elem.getNormalizedIndex());
+                state = cne.getNodeState();
-     * Resolves the path but does not the <code>ItemState</code> if it is not
-     * yet loaded.
+     * Resolves the path but does not return the <code>ItemState</code> if it
+     * has not yet been loaded.
-     *         available.
+     * available.
-     * @throws ItemStateException       if an error occurs while retrieving the
-     *                                  item state.
+     * @throws ItemStateException if an error occurs while retrieving the
+     * item state.
-        if (!start.isNode()) {
-            throw new NoSuchItemStateException(path.toString());
-        }
-        NodeState state = (NodeState) start;
+        NodeState state = start;

UPD43 UPD42 UPD43 UPD43 UPD43 UPD42 MOV42 MOV42 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS60 INS43 INS59 INS42 INS42 MOV32 INS42 DEL66 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL11 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL11