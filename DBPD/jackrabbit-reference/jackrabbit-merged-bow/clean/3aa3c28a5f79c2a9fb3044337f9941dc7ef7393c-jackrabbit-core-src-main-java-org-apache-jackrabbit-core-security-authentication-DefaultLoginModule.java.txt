JCR-2851 : Authentication Mechanism Based on Login Token (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1051522 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.security.authentication.token.TokenCredentials;
+import org.apache.jackrabbit.api.security.principal.ItemBasedPrincipal;
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.core.security.authentication.token.TokenBasedAuthentication;
+import org.apache.jackrabbit.core.security.user.UserImpl;
+import javax.jcr.Node;
- * This Module can deal only with <code>SimpleCredentials</code> since it
- * uses by default the {@link SimpleCredentialsAuthentication}. Impersonation is
- * delegated to the <code>User</code>'s {@link User#getImpersonation()
- * Impersonation} object
+ * This Module can deal with the following credentials
+ * <ul>
+ * <li><code>SimpleCredentials</code> -&gt; handled by {@link SimpleCredentialsAuthentication}.</li>
+ * <li><code>TokenCredentials</code> -&gt; handled by {@link TokenBasedAuthentication}.</li>
+ * </ul>
+ * In both cases the login is successful if the system contains a non-disabled,
+ * valid user that matches the given credentials.
+ * <p/>
+ * Correspondingly impersonation is delegated to the <code>User</code>'s
+ * {@link User#getImpersonation() Impersonation} object.
+    /**
+     * Flag indicating if Token-based authentication is disabled by the
+     * LoginModule configuration.
+     */
+    private boolean disableTokenAuth;
+
+    /**
+     * The expiration time for login tokens as set by the LoginModule configuration.
+     */
+    private long tokenExpiration = TokenBasedAuthentication.TOKEN_EXPIRATION;
+
+    /**
+     * The user object retrieved during the authentication process.
+     */
+    private SessionImpl session;
+     * The login token extracted from TokenCredentials or null in case of
+     * another credentials.
+     */
+    private String loginToken;
+
+    //--------------------------------------------------------< LoginModule >---
+    /**
+     * @see javax.security.auth.spi.LoginModule#commit()
+     */
+    @Override
+    public boolean commit() throws LoginException {
+        boolean success = super.commit();
+        if (success && !disableTokenAuth && TokenBasedAuthentication.doCreateToken(credentials)) {
+            Session s = null;
+            try {
+                /*
+                use a different session instance to create the token
+                node in order to prevent concurrent modifications with
+                the shared system session.
+                */
+                s = session.createSession(session.getWorkspace().getName());
+                Credentials tc = TokenBasedAuthentication.createToken(user, credentials, tokenExpiration, s);
+                if (tc != null) {
+                    subject.getPublicCredentials().add(tc);
+                }
+            } catch (RepositoryException e) {
+                LoginException le = new LoginException("Failed to commit: " + e.getMessage());
+                le.initCause(e);
+                throw le;
+            } finally {
+                if (s != null) {
+                    s.logout();
+                }
+            }
+        }
+        return success;
+    }
+
+    //------------------------------------------------< AbstractLoginModule >---
+    /**
-            userManager = ((SessionImpl) session).getUserManager();
+            this.session = (SessionImpl) session;
+            userManager = this.session.getUserManager();
+     * @see AbstractLoginModule#supportsCredentials(javax.jcr.Credentials)
+     */
+    @Override
+    protected boolean supportsCredentials(Credentials creds) {
+        if (creds instanceof TokenCredentials) {
+            return !disableTokenAuth;
+        } else {
+            return super.supportsCredentials(creds);
+        }
+    }
+
+    /**
+     * @see AbstractLoginModule#getUserID(javax.jcr.Credentials)
+     */
+    @Override
+    protected String getUserID(Credentials credentials) {
+        // shortcut to avoid duplicate evaluation.
+        if (user != null) {
+            try {
+                return user.getID();
+            } catch (RepositoryException e) {
+                log.warn("Failed to retrieve userID from user", e);
+                // ignore and re-evaluate credentials.
+            }
+        }
+
+        // handle TokenCredentials
+        if (!disableTokenAuth && TokenBasedAuthentication.isTokenBasedLogin(credentials)) {
+            // special token based login
+            loginToken = ((TokenCredentials) credentials).getToken();
+            try {
+                Node n = session.getNodeByIdentifier(loginToken);
+                final NodeImpl userNode = (NodeImpl) n.getParent().getParent();
+                final String principalName = userNode.getProperty(UserImpl.P_PRINCIPAL_NAME).getString();
+                if (userNode.isNodeType(UserImpl.NT_REP_USER)) {
+                    Authorizable a = userManager.getAuthorizable(new ItemBasedPrincipal() {
+                        public String getPath() throws RepositoryException {
+                            return userNode.getPath();
+                        }
+                        public String getName() {
+                            return principalName;
+                        }
+                    });
+                    return a.getID();
+                }
+            } catch (RepositoryException e) {
+                if (log.isDebugEnabled()) {
+                    log.warn("Failed to retrieve UserID from token-based credentials", e);
+                } else {
+                    log.warn("Failed to retrieve UserID from token-based credentials: {}", e.toString());
+                }
+            }
+            // failed to retrieve the user from loginToken.
+            return null;
+        } else {
+            // regular login -> extraction of userID is handled by the super class.
+            return super.getUserID(credentials);
+        }
+    }
+
+    /**
+        if (!disableTokenAuth && loginToken != null) {
+            Authentication authentication = new TokenBasedAuthentication(loginToken, tokenExpiration, session);
+            if (authentication.canHandle(creds)) {
+                return authentication;
+            }
+        }
+
+
+    //--------------------------------------------------------------------------
+    // methods used for token based login
+    //--------------------------------------------------------------------------
+    /**
+     * Return a flag indicating if token based authentication is disabled.
+     *
+     * @return <code>true</code> if token based authentication is disabled;
+     * <code>false</code> otherwise.
+     */
+    public boolean isDisableTokenAuth() {
+        return disableTokenAuth;
+    }
+
+    /**
+     * Set a flag indicating if token based authentication is disabled.
+     *
+     * @param disableTokenAuth <code>true</code> to disable token based
+     * authentication; <code>false</code> otherwise
+     */
+    public void setDisableTokenAuth(boolean disableTokenAuth) {
+        this.disableTokenAuth = disableTokenAuth;
+    }
+
+    /**
+     * @return The configured expiration time for login tokens in milliseconds.
+     */
+    public long getTokenExpiration() {
+        return tokenExpiration;
+    }
+
+    /**
+     * @param tokenExpiration Sets the configured expiration time (in milliseconds)
+     * of login tokens.
+     */
+    public void setTokenExpiration(long tokenExpiration) {
+        this.tokenExpiration = tokenExpiration;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV66 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD66 INS66 INS66 INS66 UPD66 INS65 UPD66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS65 INS42 INS65 INS42 INS40 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS60 INS25 INS41 INS65 INS42 INS43 INS42 INS25 INS65 INS42 INS42 INS43 INS42 INS25 INS25 INS25 INS65 INS65 INS41 INS65 INS65 INS39 INS42 INS21 INS65 INS41 INS65 INS39 INS42 INS21 INS42 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS68 INS39 INS59 INS27 INS8 INS42 INS68 INS42 INS62 INS8 INS8 INS68 INS42 INS27 INS8 INS27 INS8 INS8 INS27 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS7 INS66 INS42 INS42 INS66 INS66 INS7 INS40 INS42 INS42 INS48 INS42 INS38 INS32 INS60 INS54 INS21 INS42 INS42 INS69 INS42 INS43 INS41 INS41 INS42 INS42 INS69 INS42 INS33 INS54 INS38 INS32 INS21 INS54 INS41 INS41 INS38 INS27 INS60 INS25 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS8 INS7 INS43 INS42 INS38 INS48 INS43 INS8 INS12 INS42 INS42 INS42 INS42 INS7 INS8 INS12 INS33 INS48 INS42 INS42 INS33 INS43 INS59 INS32 INS8 INS52 INS42 INS52 INS42 INS42 INS42 INS33 INS21 INS60 INS25 INS44 INS8 INS25 INS22 MOV11 INS42 INS32 INS40 INS42 INS42 INS42 INS40 INS41 INS44 INS8 INS42 INS32 INS60 INS60 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS41 INS7 INS43 INS59 INS27 INS8 INS43 INS42 INS60 INS21 INS53 INS27 INS8 INS52 INS42 INS22 INS42 INS32 INS43 INS42 INS21 INS36 INS42 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS8 INS43 INS42 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS43 INS59 INS32 INS42 INS42 INS33 INS21 INS52 INS42 INS42 INS42 INS42 INS32 INS11 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS40 INS60 INS41 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS21 INS21 INS32 INS42 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS43 INS1 INS42 INS42 INS42 INS31 INS31 INS83 INS43 INS42 INS43 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS41 INS42 INS41 INS32 INS42 INS42 INS42 DEL42 DEL36 DEL42 DEL32