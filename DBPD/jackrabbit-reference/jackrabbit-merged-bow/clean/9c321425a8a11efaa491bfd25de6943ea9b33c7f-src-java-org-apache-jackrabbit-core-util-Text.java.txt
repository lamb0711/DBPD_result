reimplemented Session.export* according to latest spec

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151373 13f79535-47bb-0310-9956-ffa450edef68

-     * @param ch the character to use a split pattern
+     * @param ch  the character to use a split pattern
-        return explode(str,ch,false);
+        return explode(str, ch, false);
-     * @param str the string to decompose
-     * @param ch the character to use a split pattern
+     *
+     * @param str          the string to decompose
+     * @param ch           the character to use a split pattern
-        if (str == null || str.length()==0) {
+        if (str == null || str.length() == 0) {
-        int pos     = 0;
+        int pos = 0;
-            if (pos-lastpos>0 || respectEmpty)
+            if (pos - lastpos > 0 || respectEmpty) {
-            lastpos = pos+1;
+            }
+            lastpos = pos + 1;
-        } else if (respectEmpty && lastpos==str.length()) {
+        } else if (respectEmpty && lastpos == str.length()) {
+    /**
+     * Replaces all occurences of <code>oldString</code> in <code>text</code>
+     * with <code>newString</code>.
+     *
+     * @param text
+     * @param oldString old substring to be replaced with <code>newString</code>
+     * @param newString new substring to replace occurences of <code>oldString</code>
+     * @return a string
+     */
+    public static String replace(String text, String oldString, String newString) {
+        if (text == null || oldString == null || newString == null) {
+            throw new IllegalArgumentException("null argument");
+        }
+        int pos = text.indexOf(oldString);
+        if (pos == -1) {
+            return text;
+        }
+        int lastPos = 0;
+        StringBuffer sb = new StringBuffer(text.length());
+        while (pos != -1) {
+            sb.append(text.substring(lastPos, pos));
+            sb.append(newString);
+            lastPos = pos + oldString.length();
+            pos = text.indexOf(oldString, lastPos);
+        }
+        if (lastPos < text.length()) {
+            sb.append(text.substring(lastPos));
+        }
+        return sb.toString();
+    }
+

INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS25 INS60 INS60 INS61 INS25 INS41 UPD66 UPD66 UPD66 INS66 INS66 INS42 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS27 INS8 INS39 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS27 INS27 INS53 INS42 INS32 INS42 INS38 INS41 INS42 INS34 INS42 INS42 INS14 INS42 INS38 INS21 INS21 INS21 INS21 INS42 INS32 INS21 INS42 INS42 INS8 INS27 INS27 INS42 INS33 INS14 INS42 INS42 INS42 INS34 INS42 INS43 INS32 INS34 INS32 INS32 INS7 INS7 INS42 INS42 INS32 MOV21 INS42 INS33 INS42 INS33 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42