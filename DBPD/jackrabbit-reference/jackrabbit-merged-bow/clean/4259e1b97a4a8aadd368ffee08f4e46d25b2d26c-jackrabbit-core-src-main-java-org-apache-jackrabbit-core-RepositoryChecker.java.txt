JCR-3115: Versioning fixup leaves persistence in a state where the node can't be made versionable again

Modify checker to also inspect "candidate" version histories.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1187344 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ItemNotFoundException;
-        if (node.hasPropertyName(JCR_VERSIONHISTORY)) {
-            String message = null;
-            NodeId nid = node.getNodeId();
-            NodeId vhid = null;
+        String message = null;
+        NodeId nid = node.getNodeId();
+        boolean isVersioned = node.hasPropertyName(JCR_VERSIONHISTORY);
+
+        NodeId vhid = null;
+
+        try {
+            String type = isVersioned ? "in-use" : "candidate";
+            
+            log.debug("Checking " + type + " version history of node {}", nid);
+
+            String intro = "Removing references to an inconsistent " + type
+                    + " version history of node " + nid;
+
+            message = intro + " (getting the VersionInfo)";
+            VersionHistoryInfo vhi = versionManager.getVersionHistoryInfoForNode(node);
+            if (vhi != null) {
+                // get the version history's node ID as early as possible
+                // so we can attempt a fixup even when the next call fails
+                vhid = vhi.getVersionHistoryId();
+            }
+
+            message = intro + " (getting the InternalVersionHistory)";
+
+            InternalVersionHistory vh = null;
+            
-                log.debug("Checking version history of node {}", nid);
-
-                String intro = "Removing references to an inconsistent version history of node "
-                    + nid;
-
-                message = intro + " (getting the VersionInfo)";
-                VersionHistoryInfo vhi = versionManager.getVersionHistoryInfoForNode(node);
-                if (vhi != null) {
-                    // get the version history's node ID as early as possible
-                    // so we can attempt a fixup even when the next call fails
-                    vhid = vhi.getVersionHistoryId();
+                vh = versionManager.getVersionHistoryOfNode(nid);
+            }
+            catch (ItemNotFoundException ex) {
+                // it's ok if we get here if the node didn't claim to be versioned
+                if (isVersioned) {
+                    throw ex;
+            }
-                message = intro + " (getting the InternalVersionHistory)";
-                InternalVersionHistory vh = versionManager.getVersionHistoryOfNode(nid);
-
+            if (vh == null) {
+                if (isVersioned) {
+                    message = intro + "getVersionHistoryOfNode returned null";
+                    throw new InconsistentVersioningState(message);    
+                }
+            } else { 
-                        throw new InconsistentVersioningState("frozen node of "
-                                + v.getId() + " is missing.");
+                        throw new InconsistentVersioningState(message);
-                    throw new InconsistentVersioningState("root version of " + nid +" is missing.");
+                    throw new InconsistentVersioningState(message);
-            } catch (InconsistentVersioningState e) {
-                log.info(message, e);
-                NodeId nvhid = e.getVersionHistoryNodeId();
-                if (nvhid != null) {
-                    if (vhid != null && !nvhid.equals(vhid)) {
-                        log.error("vhrid returned with InconsistentVersioningState does not match the id we already had: "
-                                + vhid + " vs " + nvhid);
-                    }
-                    vhid = nvhid; 
-                }
-                removeVersionHistoryReferences(node, vhid);
-            } catch (Exception e) {
-                log.info(message, e);
-                removeVersionHistoryReferences(node, vhid);
+        } catch (InconsistentVersioningState e) {
+            log.info(message, e);
+            NodeId nvhid = e.getVersionHistoryNodeId();
+            if (nvhid != null) {
+                if (vhid != null && !nvhid.equals(vhid)) {
+                    log.error("vhrid returned with InconsistentVersioningState does not match the id we already had: "
+                            + vhid + " vs " + nvhid);
+                }
+                vhid = nvhid; 
+            }
+            removeVersionHistoryReferences(node, vhid);
+        } catch (Exception e) {
+            log.info(message, e);
+            removeVersionHistoryReferences(node, vhid);
-    private void removeVersionHistoryReferences(NodeState node, NodeId vhid) {
+    // un-versions the node, and potentially moves the version history away
+    private void removeVersionHistoryReferences(NodeState node,  NodeId vhid) {

INS26 INS40 MOV8 INS60 INS39 INS59 INS42 MOV32 INS60 INS54 INS25 MOV43 INS59 INS43 INS8 INS12 INS27 INS8 INS8 INS42 INS16 INS27 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS25 MOV21 MOV21 MOV60 MOV60 MOV70 MOV25 INS42 INS45 INS45 INS45 INS42 INS45 UPD45 INS42 INS45 INS7 INS43 INS42 INS25 INS42 INS8 INS42 MOV32 INS42 INS42 INS8 INS21 INS53 INS53 INS7 INS14 INS42 INS42 INS27 MOV43 INS42 INS42 INS42 INS45 INS43 INS42 INS42 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL45 DEL42 DEL45 DEL27 DEL25 DEL8