JCR-1576  Remove RepositoryService exists()  
JCR-1577  Remove RepositoryService.getRootId()  
JCR-1405  SPI: Introduce NodeInfo.getChildInfos()  

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@654826 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NodeInfo;
-import org.apache.jackrabbit.spi.NodeId;
-import org.apache.jackrabbit.spi.PropertyId;
+import org.apache.jackrabbit.spi.ChildInfo;
+import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.spi.NodeInfo;
+import org.apache.jackrabbit.spi.PropertyId;
-import java.util.List;
+import java.io.Serializable;
-import java.io.Serializable;
+import java.util.List;
+     * The list of {@link ChildInfo}s of this node info.
+     */
+    private final List childInfos;
+
+    /**
+            final Iterator childInfos = nodeInfo.getChildInfos();
-                    });
+                    },
+                    ((childInfos == null) ? null :
+                    new Iterator() {
+                        public boolean hasNext() {
+                            return childInfos.hasNext();
+                        }
+                        public Object next() {
+                            ChildInfo cInfo = (ChildInfo) childInfos.next();
+                            if (cInfo instanceof Serializable) {
+                                return cInfo;
+                            } else {
+                                return new ChildInfoImpl(cInfo.getName(), cInfo.getUniqueID(), cInfo.getIndex());
+                            }
+                        }
+                        public void remove() {
+                            throw new UnsupportedOperationException();
+                        }
+                    })
+            );
+     * @param childInfos      the child infos of this node or <code>null</code>.
-                        Iterator references, Iterator propertyIds) {
-         this(path, id, index, primaryTypeName, mixinNames, references, propertyIds);
+                        Iterator references, Iterator propertyIds,
+                        Iterator childInfos) {
+         this(path, id, index, primaryTypeName, mixinNames, references, propertyIds, childInfos);
-                        Name[] mixinNames, Iterator references, Iterator propertyIds) {
+                        Name[] mixinNames, Iterator references, Iterator propertyIds,
+                        Iterator childInfos) {
+        if (childInfos == null) {
+            this.childInfos = null;
+        } else {
+            this.childInfos = new ArrayList();
+            while (childInfos.hasNext()) {
+                this.childInfos.add(childInfos.next());
+            }
+        }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Iterator getChildInfos() {
+        return (childInfos == null) ? null : childInfos.iterator();
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 INS23 INS31 INS29 INS83 INS83 INS43 INS59 INS44 INS44 INS29 INS83 INS43 INS42 INS8 INS65 INS42 INS42 INS65 INS43 INS42 INS43 INS42 INS25 INS65 INS42 INS41 INS66 INS65 INS66 INS42 INS66 INS42 INS42 INS42 INS27 INS8 INS8 INS65 INS16 INS42 INS60 INS42 INS33 INS21 INS21 INS61 INS36 INS33 INS32 INS83 INS43 INS59 INS7 INS7 INS32 INS8 INS27 INS42 INS42 INS42 INS42 INS32 INS36 INS22 INS33 INS22 INS14 INS42 INS42 INS21 INS42 INS33 INS42 INS42 INS16 INS52 INS42 INS52 INS42 INS43 INS32 INS36 INS33 INS14 INS42 INS22 INS42 INS32 INS27 INS43 INS1 INS52 INS42 INS42 INS42 INS42 INS33 INS42 INS31 INS31 INS31 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS41 INS42 INS60 INS25 INS53 INS32 INS43 INS59 INS62 INS8 INS8 INS14 INS42 INS42 INS42 INS42 INS11 INS42 INS43 INS41 INS41 INS43 INS43 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42