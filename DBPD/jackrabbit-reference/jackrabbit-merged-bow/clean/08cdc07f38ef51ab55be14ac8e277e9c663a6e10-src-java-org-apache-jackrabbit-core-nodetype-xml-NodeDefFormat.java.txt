Removed JDOM dependency from nodetype XML handling (JCR-54)
 - converted all JDOM references to the equivalent standard DOM code
 - Moved the rest of XML references out of the NodeTypeDefStore class
 - Added the NodeTypeFormatter facade class
 - Made a number of small changes and restructurings to better match the DOM API
 - Added a mostly complete test case in src/test/o.a.j/core/nodetype/xml
   (the tests in .../test/api/nodetype are more concerned with the nodetype
   API than the XML handling)
 - Added a simple ValueConstraint.equals() method to simplify the test cases
   (fixes a problem in NodeTypeDef.equals())


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157940 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
-import org.jdom.Element;
+import org.w3c.dom.Element;
-    /** Name of the child node definition element. */
-    public static final String CHILDNODEDEF_ELEMENT = "childNodeDef";
-
-     * Creates a node definition format object. This constructor
-     * is used internally by the public reader and writer constructors.
+     * Creates a node definition format object.
-    private NodeDefFormat(
+    protected NodeDefFormat(
-     * Creates a node definition reader. An empty node definition instance
-     * is created. The instance properties are filled in by the
-     * {@link #read(QName) read} method.
-     *
-     * @param resolver namespace resolver
-     * @param element node definition element
-     */
-    public NodeDefFormat(NamespaceResolver resolver, Element element) {
-        this(resolver, element, new ChildNodeDef());
-    }
-
-    /**
-     * Creates a node definition writer. The node definition element is
-     * instantiated as an empty <code>childNodeDef</code> element.
-     * The element is filled in by the {@link #write() write} method.
-     *
-     * @param resolver namespace resolver
-     * @param def node definition
-     */
-    public NodeDefFormat(NamespaceResolver resolver, ChildNodeDef def) {
-        this(resolver, new Element(CHILDNODEDEF_ELEMENT), def);
-    }
-
-    /**
-     * Returns the node definition object.
-     *
-     * @return node definition
-     */
-    public ChildNodeDef getNodeDef() {
-        return def;
-    }
-
-    /**
-    public void read(QName type) throws InvalidNodeTypeDefException {
+    protected void read(QName type) throws InvalidNodeTypeDefException {
-    public void write() {
+    protected void write() {
-        Vector vector = new Vector();
-
-        Element types = getChild(REQUIREDPRIMARYTYPES_ELEMENT);
+        Collection types = getGrandChildContents(
+                REQUIREDPRIMARYTYPES_ELEMENT, REQUIREDPRIMARYTYPE_ELEMENT);
-            Iterator iterator =
-                types.getChildren(REQUIREDPRIMARYTYPE_ELEMENT).iterator();
-            while (iterator.hasNext()) {
-                Element type = (Element) iterator.next();
-                vector.add(fromJCRName(type.getTextTrim()));
-            }
-        }
+            Vector vector = new Vector();
-        def.setRequiredPrimaryTypes((QName[]) vector.toArray(new QName[0]));
+            Iterator iterator = types.iterator();
+            while (iterator.hasNext()) {
+                String type = (String) iterator.next();
+                vector.add(fromJCRName(type));
+            }
+
+            def.setRequiredPrimaryTypes((QName[]) vector.toArray(new QName[0]));
+        } else {
+            /* Default to nt:base?
+            throw new InvalidNodeTypeDefException(
+                    "Required primary type(s) not defined for child node "
+                    + def.getName() + " of node type "
+                    + def.getDeclaringNodeType());
+            */
+        }
-        Element types = new Element(REQUIREDPRIMARYTYPES_ELEMENT);
-
+        Vector types = new Vector();
-            Element type = new Element(REQUIREDPRIMARYTYPE_ELEMENT);
-            type.setText(toJCRName(values[i]));
-            types.addContent(type);
+            types.add(toJCRName(values[i]));
-
-        addChild(types);
+        setGrandChildContents(
+                REQUIREDPRIMARYTYPES_ELEMENT, REQUIREDPRIMARYTYPE_ELEMENT,
+                types);

INS26 INS40 UPD40 UPD83 UPD83 UPD83 MOV60 UPD66 UPD43 INS8 UPD43 UPD42 MOV60 MOV21 UPD42 UPD42 INS42 INS42 UPD42 INS42 UPD43 UPD42 UPD42 UPD42 MOV42 MOV43 UPD43 MOV42 UPD42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL66 DEL66 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL14 DEL17 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL68 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL17 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21