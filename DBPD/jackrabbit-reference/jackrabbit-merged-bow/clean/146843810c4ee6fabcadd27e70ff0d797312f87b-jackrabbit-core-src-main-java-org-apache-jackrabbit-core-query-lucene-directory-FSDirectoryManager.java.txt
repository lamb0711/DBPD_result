JCR-2376: Add basic I/O counters to query handler

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@831865 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.FSDirectory;
-import org.apache.lucene.store.NativeFSLockFactory;
-import org.apache.lucene.store.IndexOutput;
-import org.apache.lucene.store.IndexInput;
-import org.apache.lucene.store.Lock;
-import org.apache.lucene.store.LockFactory;
-import org.apache.jackrabbit.core.query.lucene.SearchIndex;
-
-import java.io.IOException;
+import java.io.IOException;
+
+import org.apache.jackrabbit.core.query.lucene.IOCounters;
+import org.apache.jackrabbit.core.query.lucene.SearchIndex;
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.FSDirectory;
+import org.apache.lucene.store.IndexInput;
+import org.apache.lucene.store.IndexOutput;
+import org.apache.lucene.store.Lock;
+import org.apache.lucene.store.LockFactory;
+import org.apache.lucene.store.NativeFSLockFactory;
-            return directory.openInput(name);
+            IndexInput in = directory.openInput(name);
+            return new IndexInputLogWrapper(in);
-            return directory.openInput(name, bufferSize);
+            IndexInput in = directory.openInput(name, bufferSize);
+            return new IndexInputLogWrapper(in);
+
+    /**
+     * Implements an index input wrapper that logs the number of time bytes
+     * are read from storage.
+     */
+    private static final class IndexInputLogWrapper extends IndexInput {
+
+        private IndexInput in;
+
+        IndexInputLogWrapper(IndexInput in) {
+            this.in = in;
+        }
+
+        public byte readByte() throws IOException {
+            return in.readByte();
+        }
+
+        public void readBytes(byte[] b, int offset, int len) throws IOException {
+            IOCounters.incrRead();
+            in.readBytes(b, offset, len);
+        }
+
+        public void close() throws IOException {
+            in.close();
+        }
+
+        public long getFilePointer() {
+            return in.getFilePointer();
+        }
+
+        public void seek(long pos) throws IOException {
+            in.seek(pos);
+        }
+
+        public long length() {
+            return in.length();
+        }
+
+        @Override
+        public Object clone() {
+            IndexInputLogWrapper clone = (IndexInputLogWrapper) super.clone();
+            clone.in = (IndexInput) in.clone();
+            return clone;
+        }
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 INS55 INS29 INS83 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS65 INS42 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS60 INS60 INS66 INS66 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS21 INS42 INS21 INS41 INS39 INS42 INS42 INS21 INS41 INS42 INS42 INS60 INS21 INS41 MOV43 INS59 INS14 INS43 INS59 INS14 INS42 INS7 INS32 INS39 INS85 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS7 INS42 INS42 MOV32 INS43 INS42 INS42 INS42 MOV32 INS43 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS40 INS11 INS42 INS42 INS52 INS42 INS43 INS48 INS43 INS32 INS42 INS42 INS42 INS42 INS42