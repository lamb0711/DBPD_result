Implement location step with context position index.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156923 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.search.QueryConstants;
+     * QName for true function.
+     */
+    static final QName FN_TRUE = new QName("", "true");
+
+    /**
+     * QName for false function.
+     */
+    static final QName FN_FALSE = new QName("", "false");
+
+    /**
+     * QName for position function.
+     */
+    static final QName FN_POSITION = new QName("", "position");
+
+    /**
+     * QName for the full position function including bracket
+     */
+    static final QName FN_POSITION_FULL = new QName("", "position()");
+
+    /**
+     * QName for last function.
+     */
+    static final QName FN_LAST = new QName("", "last");
+
+    /**
+     * QName for first function.
+     */
+    static final QName FN_FIRST = new QName("", "first");
+
+    /**
+     * QName for jcrfn:deref
+     */
+    static final QName JCRFN_DEREF = new QName(SearchManager.NS_JCRFN_URI, "deref");
+
+    /**
-            queryNode.setLongValue(Long.parseLong(node.getValue()));
+            // if this is an expression that contains position() do not change
+            // the type.
+            if (queryNode.getValueType() == QueryConstants.TYPE_POSITION) {
+                queryNode.setPositionValue(Integer.parseInt(node.getValue()));
+            } else {
+                queryNode.setLongValue(Long.parseLong(node.getValue()));
+            }
+            } else if (FN_TRUE.toJCRName(resolver).equals(fName)) {
+                if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                    RelationQueryNode rel = (RelationQueryNode) queryNode;
+                    rel.setStringValue("true");
+                } else {
+                    exceptions.add(new InvalidQueryException("Unsupported location for true()"));
+                }
+            } else if (FN_FALSE.toJCRName(resolver).equals(fName)) {
+                if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                    RelationQueryNode rel = (RelationQueryNode) queryNode;
+                    rel.setStringValue("false");
+                } else {
+                    exceptions.add(new InvalidQueryException("Unsupported location for false()"));
+                }
+            } else if (FN_POSITION.toJCRName(resolver).equals(fName)) {
+                if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                    RelationQueryNode rel = (RelationQueryNode) queryNode;
+                    if (rel.getOperation() == RelationQueryNode.OPERATION_EQ_GENERAL) {
+                        // set dummy value to set type of relation query node
+                        // will be overwritten when the tree is furhter parsed.
+                        rel.setPositionValue(1);
+                        rel.setProperty(FN_POSITION_FULL);
+                    } else {
+                        exceptions.add(new InvalidQueryException("Unsupported expression with position(). Only = is supported."));
+                    }
+                } else {
+                    exceptions.add(new InvalidQueryException("Unsupported location for position()"));
+                }
+            } else if (FN_FIRST.toJCRName(resolver).equals(fName)) {
+                if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                    ((RelationQueryNode) queryNode).setPositionValue(1);
+                } else if (queryNode.getType() == QueryNode.TYPE_LOCATION) {
+                    ((LocationStepQueryNode) queryNode).setIndex(1);
+                } else {
+                    exceptions.add(new InvalidQueryException("Unsupported location for first()"));
+                }
+            } else if (FN_LAST.toJCRName(resolver).equals(fName)) {
+                if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                    ((RelationQueryNode) queryNode).setPositionValue(LocationStepQueryNode.LAST);
+                } else if (queryNode.getType() == QueryNode.TYPE_LOCATION) {
+                    ((LocationStepQueryNode) queryNode).setIndex(LocationStepQueryNode.LAST);
+                } else {
+                    exceptions.add(new InvalidQueryException("Unsupported location for last()"));
+                }
+            } else if (JCRFN_DEREF.toJCRName(resolver).equals(fName)) {
+                exceptions.add(new InvalidQueryException("Unsupported function: " + fName));

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS14 INS66 INS43 INS45 INS45 INS66 INS43 INS45 INS45 INS66 INS43 INS45 INS45 INS66 INS43 INS45 INS45 INS66 INS43 INS45 INS45 INS66 INS43 INS45 INS45 INS66 INS43 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS25 INS27 INS8 MOV8 INS25 INS32 INS40 INS21 INS32 INS8 INS25 INS42 INS42 INS32 INS32 INS42 INS42 INS25 INS32 INS8 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS25 INS32 INS8 INS25 INS42 INS42 INS32 INS32 INS40 INS60 INS21 INS21 INS42 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS25 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS40 INS60 INS21 INS21 INS42 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS25 INS32 INS8 INS25 INS42 INS42 INS11 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS40 INS60 INS25 INS21 INS42 INS42 INS42 INS27 INS8 INS25 INS32 INS42 INS42 INS25 INS32 INS8 MOV8 INS43 INS42 INS43 INS45 INS42 INS42 INS11 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS40 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS27 INS8 INS25 INS32 INS42 INS42 INS21 INS42 INS42 INS43 INS42 INS43 INS45 INS42 INS42 INS11 INS32 INS40 INS21 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS40 INS21 INS21 INS32 INS40 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS45 INS36 INS42 INS34 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS40 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS11 INS36 INS42 INS34 INS42 INS42 INS14 INS36 INS42 INS40 INS42 INS42 INS32 INS32 INS43 INS27 INS43 INS45 INS43 INS42 INS11 INS43 INS45 INS11 INS36 INS42 INS40 INS42 INS42 INS14 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS11 INS43 INS45 INS42 INS42 INS43 INS42 INS42 INS42