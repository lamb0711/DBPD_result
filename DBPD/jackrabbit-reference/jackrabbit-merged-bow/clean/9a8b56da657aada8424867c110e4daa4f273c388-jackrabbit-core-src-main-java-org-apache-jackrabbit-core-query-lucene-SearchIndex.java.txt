JCR-2989 Support for embedded index aggregates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1182367 13f79535-47bb-0310-9956-ffa450edef68

-     * puts it into <code>map</code>.
+     * puts it into <code>aggregates</code>  map.
-     * @param map   aggregate roots are collected in this map.
+     * @param aggregates aggregate roots are collected in this map.
-    protected void retrieveAggregateRoot(
-            NodeState state, Map<NodeId, NodeState> map) {
-        if (indexingConfig != null) {
-            AggregateRule[] aggregateRules = indexingConfig.getAggregateRules();
-            if (aggregateRules == null) {
-                return;
-            }
+    protected void retrieveAggregateRoot(NodeState state,
+            Map<NodeId, NodeState> aggregates) {
+        retrieveAggregateRoot(state, aggregates, state.getNodeId().toString(), 0);
+    }
+    
+    /**
+     * Retrieves the root of the indexing aggregate for <code>state</code> and
+     * puts it into <code>aggregates</code> map.
+     * 
+     * @param state
+     *            the node state for which we want to retrieve the aggregate
+     *            root.
+     * @param aggregates
+     *            aggregate roots are collected in this map.
+     * @param originNodeId
+     *            the originating node, used for reporting only
+     * @param level
+     *            current aggregation level, used to limit recursive aggregation
+     *            of nodes that have the same type
+     */
+    private void retrieveAggregateRoot(NodeState state,
+            Map<NodeId, NodeState> aggregates, String originNodeId, long level) {
+        if (indexingConfig == null) {
+            return;
+        }
+        AggregateRule[] aggregateRules = indexingConfig.getAggregateRules();
+        if (aggregateRules == null) {
+            return;
+        }
+        for (AggregateRule aggregateRule : aggregateRules) {
+            NodeState root = null;
-                for (AggregateRule aggregateRule : aggregateRules) {
-                    NodeState root = aggregateRule.getAggregateRoot(state);
-                    if (root != null) {
-                        map.put(root.getNodeId(), root);
-                    }
-                }
+                root = aggregateRule.getAggregateRoot(state);
-                log.warn("Unable to get aggregate root for "
-                        + state.getNodeId(), e);
+                log.warn("Unable to get aggregate root for " + state.getNodeId(), e);
+            }
+            if (root == null) {
+                continue;
+            }
+            if (root.getNodeTypeName().equals(state.getNodeTypeName())) {
+                level++;
+            } else {
+                level = 0;
+            }
+
+            // JCR-2989 Support for embedded index aggregates
+            if ((aggregateRule.getRecursiveAggregationLimit() == 0)
+                    || (aggregateRule.getRecursiveAggregationLimit() != 0 && level <= aggregateRule
+                            .getRecursiveAggregationLimit())) {
+
+                // check if the update parent is already in the
+                // map, then all its parents are already there so I can
+                // skip this update subtree
+                if (aggregates.put(root.getNodeId(), root) == null) {
+                    retrieveAggregateRoot(root, aggregates, originNodeId, level);
+                }
+            } else {
+                log.warn(
+                        "Reached {} levels of recursive aggregation for nodeId {}, type {}, will stop at nodeId {}. Are you sure this did not occur by mistake? Please check the indexing-configuration.xml.",
+                        new Object[] { level, originNodeId,
+                                root.getNodeTypeName(), root.getNodeId() });
-     * @param removedIds     the ids of removed nodes.
-     * @param map            aggregate roots are collected in this map
+     * @param removedIds the ids of removed nodes.
+     * @param aggregates aggregate roots are collected in this map
-            Set<NodeId> removedIds, Map<NodeId, NodeState> map) {
+            Set<NodeId> removedIds, Map<NodeId, NodeState> aggregates) {
-                            map.put(nId, (NodeState) ism.getItemState(nId));
+                            NodeState nodeState = (NodeState) ism.getItemState(nId);
+                            aggregates.put(nId, nodeState);
+
+                            // JCR-2989 Support for embedded index aggregates
+                            int sizeBefore = aggregates.size();
+                            retrieveAggregateRoot(nodeState, aggregates);
+                            found += aggregates.size() - sizeBefore;

INS31 INS44 INS29 INS83 INS39 INS42 MOV44 MOV44 INS44 INS44 MOV8 INS44 INS43 INS42 UPD42 INS21 INS65 INS65 INS65 INS65 INS65 UPD42 INS43 INS42 INS39 INS42 INS25 INS70 INS74 INS42 UPD66 UPD42 UPD66 INS42 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS27 INS8 MOV44 INS42 INS8 UPD66 UPD42 UPD66 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS34 INS42 INS33 INS41 INS60 MOV54 INS25 INS25 INS25 INS42 INS42 INS42 INS32 INS42 MOV43 INS59 INS8 INS27 INS8 INS32 INS8 INS8 INS27 MOV8 INS8 INS42 INS42 INS42 INS33 INS21 INS42 INS33 INS18 INS32 INS42 INS32 INS21 INS21 INS36 INS36 INS25 INS21 INS7 INS42 INS42 INS42 INS42 INS37 INS7 INS27 INS27 INS27 INS8 INS32 INS42 MOV32 INS42 INS42 INS34 INS32 INS34 INS27 INS27 MOV32 INS33 MOV21 INS42 INS42 INS45 INS3 INS42 INS42 INS32 INS34 INS42 INS32 UPD42 INS32 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS21 INS21 INS43 INS59 INS39 INS59 INS32 INS7 INS42 INS42 MOV11 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8 DEL70 DEL8