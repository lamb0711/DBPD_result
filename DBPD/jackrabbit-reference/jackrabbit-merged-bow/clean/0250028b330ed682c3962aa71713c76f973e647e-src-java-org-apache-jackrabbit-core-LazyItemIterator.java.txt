JCR-45 fixes:
- fixing references into version storage
- fixing inter-version storage references

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156188 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import java.util.ArrayList;
+import java.util.Iterator;
-public class LazyItemIterator implements NodeIterator, PropertyIterator {
+class LazyItemIterator implements NodeIterator, PropertyIterator {
+    /**
+     * the item manager that is used to fetch the items
+     */
+
+    /**
+     * the list of item ids
+     */
-    private int pos;
+
+    /**
+     * the position of the next item
+     */
+    private int pos = 0;
-    LazyItemIterator(ItemManager itemMgr, List idList) {
-        this.itemMgr = itemMgr;
-        this.idList = new ArrayList(idList);
-        pos = -1;
+    public LazyItemIterator(ItemManager itemMgr, List idList) {
+        this(itemMgr, idList, false);
-    //---------------------------------------------------------< NodeIterator >
+    /**
+     * Creates a new <code>LazyItemIterator</code> instance.
+     *
+     * @param itemMgr item manager
+     * @param idList  list of item id's
+     */
+    public LazyItemIterator(ItemManager itemMgr, List idList, boolean skipInexistent) {
+        this.itemMgr = itemMgr;
+        if (skipInexistent) {
+            // check all items first
+            this.idList = new ArrayList();
+            Iterator iter = idList.iterator();
+            while (iter.hasNext()) {
+                ItemId id = (ItemId) iter.next();
+                if (itemMgr.itemExists(id)) {
+                    this.idList.add(id);
+                }
+            }
+        } else {
+            this.idList = idList;
+        }
+    }
+
+    //-------------------------------------------------------< NodeIterator >---
+    /**
+     * {@inheritDoc}
+     */
-    //-----------------------------------------------------< PropertyIterator >
+    //---------------------------------------------------< PropertyIterator >---
+    /**
+     * {@inheritDoc}
+     */
-    //--------------------------------------------------------< RangeIterator >
+    //------------------------------------------------------< RangeIterator >---
+    /**
+     * {@inheritDoc}
+     */
-        return pos + 1;
+        return pos;
+    /**
+     * {@inheritDoc}
+     */
+    /**
+     * {@inheritDoc}
+     */
-        if (pos + skipNum >= idList.size()) {
-            pos = idList.size() - 1;
-            throw new NoSuchElementException();
+        if (pos + skipNum > idList.size()) {
+            throw new NoSuchElementException("skipNum + pos greater than size");
-    //-------------------------------------------------------------< Iterator >
+    //-----------------------------------------------------------< Iterator >---
+    /**
+     * {@inheritDoc}
+     */
-        return pos < idList.size() - 1;
+        return pos < idList.size();
+    /**
+     * {@inheritDoc}
+     */
-        if (pos >= idList.size() - 1) {
+        if (pos >= idList.size()) {
-        while (true) {
-            pos++;
-            try {
-                return itemMgr.getItem((ItemId) idList.get(pos));
-            } catch (AccessDeniedException ade) {
-                // silently ignore and try next
-                continue;
-            } catch (RepositoryException re) {
-                // FIXME: not quite correct
-                throw new NoSuchElementException(re.getMessage());
-            }
+        try {
+            return itemMgr.getItem((ItemId) idList.get(pos++));
+        } catch (RepositoryException e) {
+            throw new NoSuchElementException(e.getMessage());
+    /**
+     * {@inheritDoc}
+     *
+     * @throws UnsupportedOperationException allways, since not implemented
+     */

MOV26 INS26 INS40 INS31 INS29 INS29 INS29 INS29 INS83 INS42 INS44 INS44 INS8 INS83 INS44 INS8 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS65 INS65 INS65 INS34 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS17 INS39 INS42 MOV21 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV54 INS65 INS65 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS9 INS42 INS8 INS8 INS65 INS65 INS65 INS42 INS65 INS65 UPD27 INS65 UPD27 MOV27 INS65 UPD27 MOV27 INS65 INS42 INS66 MOV21 INS60 INS61 MOV21 INS53 INS42 INS42 MOV44 INS43 INS59 INS32 INS8 INS14 UPD42 MOV53 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS22 INS42 MOV43 INS45 INS42 INS42 INS43 INS59 INS32 INS8 INS52 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS21 MOV37 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS22 INS42 INS42 INS52 INS42 DEL83 DEL42 DEL42 DEL34 DEL38 DEL8 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL7 DEL21 DEL34 DEL42 DEL27 DEL34 DEL42 DEL27 DEL42 DEL42 DEL43 DEL42 DEL44 DEL18 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL9 DEL21 DEL8 DEL61