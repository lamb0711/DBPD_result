JCR-2156: Usage of "qualified name" in JavaDoc and Comments



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785631 13f79535-47bb-0310-9956-ffa450edef68

-         * exists for the given qualified name an empty list is returned.
+         * exists for the given <code>Name</code> an empty list is returned.
-         * @param qName
+         * @param name
-        public List getList(Name qName) {
-            Object obj = get(qName);
+        public List getList(Name name) {
+            Object obj = get(name);
-        public NodeEntry getNodeEntry(Name qName, int index) {
-            Object obj = get(qName);
+        public NodeEntry getNodeEntry(Name name, int index) {
+            Object obj = get(name);
-        public LinkedEntries.LinkNode getLinkNode(Name qName, int index) {
+        public LinkedEntries.LinkNode getLinkNode(Name name, int index) {
-            LinkedEntries.LinkNode val = (LinkedEntries.LinkNode) nameMap.get(qName);
+            LinkedEntries.LinkNode val = (LinkedEntries.LinkNode) nameMap.get(name);
-                List l = (List) snsMap.get(qName);
+                List l = (List) snsMap.get(name);
-        public LinkedEntries.LinkNode getLinkNode(Name qName, int index, String uniqueID) {
+        public LinkedEntries.LinkNode getLinkNode(Name name, int index, String uniqueID) {
-                LinkedEntries.LinkNode val = (LinkedEntries.LinkNode) nameMap.get(qName);
+                LinkedEntries.LinkNode val = (LinkedEntries.LinkNode) nameMap.get(name);
-                    List l = (List) snsMap.get(qName);
+                    List l = (List) snsMap.get(name);
-            return getLinkNode(qName, index);
+            return getLinkNode(name, index);
-        public void put(Name qName, int index, LinkedEntries.LinkNode value) {
+        public void put(Name name, int index, LinkedEntries.LinkNode value) {
-            LinkedEntries.LinkNode single = (LinkedEntries.LinkNode) nameMap.remove(qName);
+            LinkedEntries.LinkNode single = (LinkedEntries.LinkNode) nameMap.remove(name);
-                snsMap.put(qName, l);
+                snsMap.put(name, l);
-                l = (List) snsMap.get(qName);
+                l = (List) snsMap.get(name);
-                nameMap.put(qName, value);
+                nameMap.put(name, value);
-        public LinkedEntries.LinkNode remove(Name qName, LinkedEntries.LinkNode value) {
-            Object rm = nameMap.remove(qName);
+        public LinkedEntries.LinkNode remove(Name name, LinkedEntries.LinkNode value) {
+            Object rm = nameMap.remove(name);
-                List l = (List) snsMap.get(qName);
+                List l = (List) snsMap.get(name);
-        public void reorder(Name qName, LinkedEntries.LinkNode insertValue, int position) {
-            List sns = (List) snsMap.get(qName);
+        public void reorder(Name name, LinkedEntries.LinkNode insertValue, int position) {
+            List sns = (List) snsMap.get(name);

UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42