- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.10 $, $Date: 2004/09/09 15:23:43 $
-	super(nodeDef, ntMgr, nsResolver);
-	this.nodeDef = nodeDef;
+        super(nodeDef, ntMgr, nsResolver);
+        this.nodeDef = nodeDef;
-	return nodeDef;
+        return nodeDef;
-	QName ntName = nodeDef.getDefaultPrimaryType();
-	try {
-	    if (ntName == null) {
-		// return "nt:unstructured"
-		return ntMgr.getNodeType(NodeTypeRegistry.NT_UNSTRUCTURED);
-	    } else {
-		return ntMgr.getNodeType(ntName);
-	    }
-	} catch (NoSuchNodeTypeException e) {
-	    // should never get here
-	    log.error("default node type does not exist", e);
-	    return null;
-	}
+        QName ntName = nodeDef.getDefaultPrimaryType();
+        try {
+            if (ntName == null) {
+                // return "nt:unstructured"
+                return ntMgr.getNodeType(NodeTypeRegistry.NT_UNSTRUCTURED);
+            } else {
+                return ntMgr.getNodeType(ntName);
+            }
+        } catch (NoSuchNodeTypeException e) {
+            // should never get here
+            log.error("default node type does not exist", e);
+            return null;
+        }
-	QName[] ntNames = nodeDef.getRequiredPrimaryTypes();
-	try {
-	    if (ntNames == null || ntNames.length == 0) {
-		// return "nt:base"
-		return new NodeType[]{ntMgr.getNodeType(NodeTypeRegistry.NT_BASE)};
-	    } else {
-		NodeType[] nodeTypes = new NodeType[ntNames.length];
-		for (int i = 0; i < ntNames.length; i++) {
-		    nodeTypes[i] = ntMgr.getNodeType(ntNames[i]);
-		}
-		return nodeTypes;
-	    }
-	} catch (NoSuchNodeTypeException e) {
-	    // should never get here
-	    log.error("required node type does not exist", e);
-	    return new NodeType[0];
-	}
+        QName[] ntNames = nodeDef.getRequiredPrimaryTypes();
+        try {
+            if (ntNames == null || ntNames.length == 0) {
+                // return "nt:base"
+                return new NodeType[]{ntMgr.getNodeType(NodeTypeRegistry.NT_BASE)};
+            } else {
+                NodeType[] nodeTypes = new NodeType[ntNames.length];
+                for (int i = 0; i < ntNames.length; i++) {
+                    nodeTypes[i] = ntMgr.getNodeType(ntNames[i]);
+                }
+                return nodeTypes;
+            }
+        } catch (NoSuchNodeTypeException e) {
+            // should never get here
+            log.error("required node type does not exist", e);
+            return new NodeType[0];
+        }
-	return nodeDef.allowSameNameSibs();
+        return nodeDef.allowSameNameSibs();

MOV26 DEL66 DEL65 DEL66 DEL65