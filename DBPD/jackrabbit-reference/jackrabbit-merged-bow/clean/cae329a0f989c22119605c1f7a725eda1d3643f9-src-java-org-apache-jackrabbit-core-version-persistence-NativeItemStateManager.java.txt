reworked transaction support, contributed by dominique

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151380 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.ReferenceMap;
-import java.util.*;
-import java.io.PrintStream;
-        implements ItemStateManager, ItemStateListener {
+        implements UpdatableItemStateManager, ItemStateListener {
-     * A cache for <code>NodeReferences</code> objects.
+     * Flag indicating whether this item state manager is in edit mode
-    private Map refsCache = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
+    private boolean editMode;
+
+    /**
+     * Change log
+     */
+    private ChangeLog changeLog;
-        ArrayList states = new ArrayList();
-        states.add(rootState);
-        states.add(prop);
-
-        // do persist root node (incl. properties)
-        store(states, Collections.EMPTY_LIST);
+        ChangeLog changeLog = new ChangeLog();
+        changeLog.added(rootState);
+        changeLog.added(prop);
+        store(changeLog);
-        NodeState state = persistMgr.load(id.getUUID());
+        NodeState state = persistMgr.load(id);
-        PropertyState state = persistMgr.load(id.getName(), id.getParentUUID());
+        PropertyState state = persistMgr.load(id);
-            return persistMgr.exists(id);
+            if (id.denotesNode()) {
+                return persistMgr.exists((NodeId) id);
+            } else {
+                return persistMgr.exists((PropertyId) id);
+            }
-    public synchronized NodeReferences getNodeReferences(NodeId targetId)
+    public synchronized NodeReferences getNodeReferences(NodeReferencesId id)
-        if (refsCache.containsKey(targetId)) {
-            return (NodeReferences) refsCache.get(targetId);
-        }
-
-            refs = persistMgr.load(targetId);
+            refs = persistMgr.load(id);
-            refs = new NodeReferences(targetId);
+            refs = new NodeReferences(id);
-        refsCache.put(targetId, refs);
-     * @see ItemStateManager#beginUpdate
+     * @see UpdatableItemStateManager#edit
-    public UpdateOperation beginUpdate() throws ItemStateException {
-        return new Update();
+    public void edit() throws ItemStateException {
+        if (editMode) {
+            throw new ItemStateException("Already in edit mode.");
+        }
+        editMode = true;
+
+        changeLog = new ChangeLog();
+    }
+
+    /**
+     * @see UpdatableItemStateManager#createNew
+     */
+    public NodeState createNew(String uuid, QName nodeTypeName,
+                               String parentUUID) {
+
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        return createInstance(uuid, nodeTypeName, parentUUID);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#createNew
+     */
+    public PropertyState createNew(QName propName, String parentUUID) {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        return createInstance(propName, parentUUID);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#store
+     */
+    public void store(ItemState state) {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        changeLog.modified(state);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#store
+     */
+    public void store(NodeReferences refs) {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        changeLog.modified(refs);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#destroy
+     */
+    public void destroy(ItemState state) {
+        if (!editMode) {
+            throw new IllegalStateException("Not in edit mode");
+        }
+        changeLog.deleted(state);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#cancel
+     */
+    public void cancel() {
+        editMode = false;
+
+        changeLog.discard();
+    }
+
+    /**
+     * @see UpdatableItemStateManager#update
+     */
+    public void update() throws ItemStateException {
+        store(changeLog);
+
+        editMode = false;
-        NodeState state = persistMgr.createNew(uuid, nodeTypeName, parentUUID);
+        NodeState state = persistMgr.createNew(new NodeId(uuid));
+        state.setNodeTypeName(nodeTypeName);
+        state.setParentUUID(parentUUID);
-        PropertyState state = persistMgr.createNew(propName, parentUUID);
+        PropertyState state = persistMgr.createNew(new PropertyId(parentUUID, propName));
-     * Store modified states and node references, atomically.
-     *
-     * @param states         states that have been modified
-     * @param refsCollection collection of refs to store
+     * Save all states and node references, atomically.
+     * @param changeLog change log containing states that were changed
-    private void store(Collection states, Collection refsCollection)
+    private synchronized void store(ChangeLog changeLog)
-        persistMgr.store(states.iterator(), refsCollection.iterator());
-
-        Iterator iter = states.iterator();
-        while (iter.hasNext()) {
-            ItemState state = (ItemState) iter.next();
-            int status = state.getStatus();
-
-            switch (status) {
-                case ItemState.STATUS_NEW:
-                    //state.notifyStateCreated();
-                    state.setStatus(ItemState.STATUS_EXISTING);
-                    break;
-
-                case ItemState.STATUS_EXISTING_REMOVED:
-                    //state.notifyStateDestroyed();
-                    state.discard();
-                    break;
-
-                default:
-                    //state.notifyStateUpdated();
-                    state.setStatus(ItemState.STATUS_EXISTING);
-                    break;
-            }
-        }
+        persistMgr.store(changeLog);
+        changeLog.persisted();
-
-
-    class Update implements UpdateOperation {
-
-        /**
-         * Modified states
-         */
-        private final List states = new ArrayList();
-
-        /**
-         * Modified references
-         */
-        private final List refsCollection = new ArrayList();
-
-        /**
-         * @see UpdateOperation#createNew
-         */
-        public NodeState createNew(String uuid, QName nodeTypeName,
-                                   String parentUUID) {
-            return createInstance(uuid, nodeTypeName, parentUUID);
-        }
-
-        /**
-         * @see UpdateOperation#createNew
-         */
-        public PropertyState createNew(QName propName, String parentUUID) {
-            return createInstance(propName, parentUUID);
-        }
-
-        /**
-         * @see UpdateOperation#store
-         */
-        public void store(ItemState state) {
-            states.add(state);
-        }
-
-        /**
-         * @see UpdateOperation#store
-         */
-        public void store(NodeReferences refs) {
-            refsCollection.add(refs);
-        }
-
-        /**
-         * @see UpdateOperation#destroy
-         */
-        public void destroy(ItemState state) {
-            state.setStatus(ItemState.STATUS_EXISTING_REMOVED);
-            states.add(state);
-        }
-
-        /**
-         * @see UpdateOperation#end
-         */
-        public void end() throws ItemStateException {
-            NativeItemStateManager.this.store(states, refsCollection);
-        }
-    }
-

MOV31 UPD43 INS23 MOV31 MOV31 INS31 MOV31 MOV31 MOV31 MOV31 UPD42 INS29 INS83 INS39 INS59 UPD43 INS39 INS42 INS8 UPD83 MOV44 INS8 INS29 INS83 INS39 INS42 MOV44 INS8 UPD42 UPD42 UPD42 MOV43 UPD83 INS83 UPD42 INS44 MOV43 INS65 INS42 UPD42 UPD42 UPD43 UPD42 INS25 INS21 INS21 INS25 INS25 UPD65 INS25 MOV21 INS65 INS25 INS21 INS25 INS21 INS60 INS21 INS21 INS65 UPD65 MOV65 INS43 INS42 INS21 INS66 UPD66 UPD43 INS8 UPD42 INS42 INS8 INS7 INS7 INS38 INS8 INS38 INS8 INS67 INS38 INS8 INS67 INS38 INS8 INS32 INS38 INS8 INS7 INS7 MOV43 INS59 INS32 INS32 INS66 INS42 INS66 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS25 UPD42 UPD42 INS53 INS42 INS9 INS42 INS14 UPD42 INS42 INS53 UPD42 INS42 INS53 INS42 INS42 INS42 INS53 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS53 INS42 INS42 INS42 UPD42 UPD42 INS42 INS53 UPD42 UPD42 UPD42 UPD42 INS42 INS9 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS9 MOV42 INS32 INS42 INS42 MOV42 INS42 INS42 MOV42 INS42 UPD42 INS42 INS42 UPD43 MOV42 MOV42 INS32 INS8 INS8 INS14 UPD43 MOV43 INS14 INS14 INS14 INS14 INS14 MOV42 MOV42 INS14 INS14 UPD42 INS42 INS42 MOV41 INS41 INS43 INS45 UPD42 INS43 INS45 INS43 INS45 INS43 INS45 UPD43 MOV43 INS45 INS43 INS45 INS43 INS42 INS43 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 UPD42 INS43 INS42 INS43 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL40 DEL40 DEL14 DEL40 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL14 DEL41 DEL8 DEL66 DEL65 DEL42 DEL66 DEL42 DEL66 DEL65 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL49 DEL42 DEL42 DEL40 DEL32 DEL21 DEL10 DEL40 DEL49 DEL42 DEL42 DEL32 DEL21 DEL10 DEL49 DEL42 DEL42 DEL40 DEL32 DEL21 DEL10 DEL50 DEL8 DEL61 DEL8 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL67 DEL42 DEL52 DEL42 DEL42 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL55