JCR-1714: QueryImpl result offSet must be considered after security class grant the item

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@685139 13f79535-47bb-0310-9956-ffa450edef68

-            int start = resultNodes.size() + invalid + (int) offset;
-            time = System.currentTimeMillis();
-            result.skip(start);
-            for (ScoreNode[] sn = result.nextScoreNodes();
-                 sn != null && resultNodes.size() < maxResultSize;
-                 sn = result.nextScoreNodes()) {
-                // check access
-                if (isAccessGranted(sn)) {
-                    resultNodes.add(sn);
-                } else {
-                    invalid++;
-                }
+            if (resultNodes.isEmpty() && offset > 0) {
+                // collect result offset into dummy list
+                collectScoreNodes(result, new ArrayList(), offset);
+            } else {
+                int start = resultNodes.size() + invalid + (int) offset;
+                result.skip(start);
+
+            time = System.currentTimeMillis();
+            collectScoreNodes(result, resultNodes, maxResultSize);
+     * Collect score nodes from <code>hits</code> into the <code>collector</code>
+     * list until the size of <code>collector</code> reaches <code>maxResults</code>
+     * or there are not more results.
+     *
+     * @param hits the raw hits.
+     * @param collector where the access checked score nodes are collected.
+     * @param maxResults the maximum number of results in the collector.
+     * @throws IOException if an error occurs while reading from hits.
+     * @throws RepositoryException if an error occurs while checking access rights.
+     */
+    private void collectScoreNodes(MultiColumnQueryHits hits,
+                                   List collector,
+                                   long maxResults)
+            throws IOException, RepositoryException {
+        while (collector.size() < maxResults) {
+            ScoreNode[] sn = hits.nextScoreNodes();
+            if (sn == null) {
+                // no more results
+                break;
+            }
+            // check access
+            if (isAccessGranted(sn)) {
+                collector.add(sn);
+            } else {
+                invalid++;
+            }
+        }
+    }
+
+    /**

INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS61 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS27 MOV8 INS25 INS21 INS32 INS42 INS60 INS25 INS27 INS8 INS8 INS32 INS42 INS42 MOV5 INS59 INS27 INS8 INS32 UPD27 MOV27 INS21 MOV60 MOV21 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS33 INS10 UPD42 MOV42 UPD42 MOV42 UPD42 INS34 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS14 INS42 UPD42 INS43 INS42 DEL33 DEL42 DEL32 DEL59 DEL58 DEL32 DEL42 DEL27 DEL27 DEL42 DEL32 DEL7 DEL24