work in progress

- adjust nodetypedef according to API
- rs: retrieve descriptors once.
- rs: cache client by sessionInfo

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@469831 13f79535-47bb-0310-9956-ffa450edef68

+    private Map descriptors;
+
-    private HttpClient getClient(org.apache.commons.httpclient.Credentials credentials) {
-        if (clients.containsKey(credentials)) {
-            return (HttpClient) clients.get(credentials);
+    HttpClient getClient(SessionInfo sessionInfo) throws RepositoryException {
+        if (clients.containsKey(sessionInfo)) {
+            return (HttpClient) clients.get(sessionInfo);
-            client.getState().setCredentials(AuthScope.ANY, credentials);
+            org.apache.commons.httpclient.Credentials creds = null;
+            if (sessionInfo != null) {
+                checkSessionInfo(sessionInfo);
+                creds = ((SessionInfoImpl) sessionInfo).getCredentials().getCredentials();
+            }
+            client.getState().setCredentials(AuthScope.ANY, creds);
-            clients.put(credentials, client);
+            clients.put(sessionInfo, client);
-    HttpClient getClient(SessionInfo sessionInfo) throws RepositoryException {
-        checkSessionInfo(sessionInfo);
-        return getClient(((SessionInfoImpl) sessionInfo).getCredentials().getCredentials());
-    }
-
-        ReportInfo info = new ReportInfo(RepositoryDescriptorsReport.REPOSITORY_DESCRIPTORS_REPORT, DavConstants.DEPTH_0);
-        ReportMethod method = null;
-        try {
-            method = new ReportMethod(uriResolver.getRepositoryUri(), info);
+        if (descriptors == null) {
+            ReportInfo info = new ReportInfo(RepositoryDescriptorsReport.REPOSITORY_DESCRIPTORS_REPORT, DavConstants.DEPTH_0);
+            ReportMethod method = null;
+            try {
+                method = new ReportMethod(uriResolver.getRepositoryUri(), info);
+                getClient(null).executeMethod(method);
+                method.checkSuccess();
+                Document doc = method.getResponseBodyAsDocument();
-            getClient((org.apache.commons.httpclient.Credentials) null).executeMethod(method);
-            method.checkSuccess();
-            Document doc = method.getResponseBodyAsDocument();
-            Map descriptors = new HashMap();
-            if (doc != null) {
-                Element rootElement = doc.getDocumentElement();
-                ElementIterator nsElems = DomUtil.getChildren(rootElement, ItemResourceConstants.XML_DESCRIPTOR, ItemResourceConstants.NAMESPACE);
-                while (nsElems.hasNext()) {
-                    Element elem = nsElems.nextElement();
-                    String key = DomUtil.getChildText(elem, ItemResourceConstants.XML_DESCRIPTORKEY, ItemResourceConstants.NAMESPACE);
-                    String descriptor = DomUtil.getChildText(elem, ItemResourceConstants.XML_DESCRIPTORVALUE, ItemResourceConstants.NAMESPACE);
-                    if (key != null && descriptor != null) {
-                        descriptors.put(key, descriptor);
-                    } else {
-                        log.error("Invalid descriptor key / value pair: " + key + " -> " + descriptor);
+                descriptors = new HashMap();
+                if (doc != null) {
+                    Element rootElement = doc.getDocumentElement();
+                    ElementIterator nsElems = DomUtil.getChildren(rootElement, ItemResourceConstants.XML_DESCRIPTOR, ItemResourceConstants.NAMESPACE);
+                    while (nsElems.hasNext()) {
+                        Element elem = nsElems.nextElement();
+                        String key = DomUtil.getChildText(elem, ItemResourceConstants.XML_DESCRIPTORKEY, ItemResourceConstants.NAMESPACE);
+                        String descriptor = DomUtil.getChildText(elem, ItemResourceConstants.XML_DESCRIPTORVALUE, ItemResourceConstants.NAMESPACE);
+                        if (key != null && descriptor != null) {
+                            descriptors.put(key, descriptor);
+                        } else {
+                            log.error("Invalid descriptor key / value pair: " + key + " -> " + descriptor);
+                        }
-            }
-            return descriptors;
-        } catch (IOException e) {
-            throw new RepositoryException(e);
-        } catch (DavException e) {
-            throw ExceptionConverter.generate(e);
-        } finally {
-            if (method != null) {
-                method.releaseConnection();
+            } catch (IOException e) {
+                throw new RepositoryException(e);
+            } catch (DavException e) {
+                throw ExceptionConverter.generate(e);
+            } finally {
+                if (method != null) {
+                    method.releaseConnection();
+                }
+        return descriptors;
+            SessionInfo sessionInfo = new SessionInfoImpl(credentials, workspaceName);
+
-            getClient(credentials.getCredentials()).executeMethod(method);
+            getClient(sessionInfo).executeMethod(method);
-                return new SessionInfoImpl(credentials, workspaceName);
+                return sessionInfo;
-            initMethod(method, sessionInfo, true);

INS23 INS83 MOV43 INS59 MOV43 INS8 INS42 MOV43 MOV42 INS25 MOV41 INS27 MOV8 UPD42 INS60 INS25 INS42 INS33 INS60 MOV43 INS59 INS27 INS8 INS43 INS59 INS42 INS33 INS42 INS33 MOV21 INS21 UPD42 UPD42 INS21 INS42 INS42 MOV14 UPD42 INS7 INS7 UPD42 MOV42 INS42 INS42 MOV32 INS42 MOV14 INS33 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL40 DEL43 DEL33 DEL11 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21