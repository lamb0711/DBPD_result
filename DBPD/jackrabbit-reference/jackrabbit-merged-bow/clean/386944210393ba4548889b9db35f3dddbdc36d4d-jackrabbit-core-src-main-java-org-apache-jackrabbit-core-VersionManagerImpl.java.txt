JCR-2140: Baselines


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@796899 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.value.InternalValue;
-import org.apache.jackrabbit.core.version.InternalConfiguration;
-import org.apache.jackrabbit.core.version.VersionManagerImplConfig;
+import org.apache.jackrabbit.core.version.VersionManagerImplConfig;
-        NodeId baseId;
-        if (isConfiguration(state)) {
-            InternalConfiguration config = vMgr.getConfiguration(state.getNodeId());
-            baseId = checkin(config);
-        } else {
-            baseId = checkoutCheckin(state, true, false);
-        }
+        NodeId baseId = checkoutCheckin(state, true, false);
-        if (isConfiguration(state)) {
-            // currently has no effect
-        } else {
-            checkoutCheckin(state, false, true);
-        }
+        checkoutCheckin(state, false, true);
-        NodeId baseId;
-        if (isConfiguration(state)) {
-            InternalConfiguration config = vMgr.getConfiguration(state.getNodeId());
-            baseId = checkin(config);
-        } else {
-            baseId = checkoutCheckin(state, true, true);
-        }
+        NodeId baseId = checkoutCheckin(state, true, true);
-            if (v instanceof InternalBaseline) {
-                // do simple explode, ignore restoring of nt:configuration node for now.
-                for (InternalVersion bv: ((InternalBaseline) v).getBaseVersions().versions().values()) {
-                    // check for collision
-                    NodeId historyId = bv.getVersionHistory().getId();
-                    if (toRestore.containsKey(historyId)) {
-                        throw new VersionException("Unable to restore. Two or more versions have same version history.");
-                    }
-                    toRestore.put(historyId, bv);
-                }
-            } else {
-                // check for collision
-                NodeId historyId = v.getVersionHistory().getId();
-                if (toRestore.containsKey(historyId)) {
-                    throw new VersionException("Unable to restore. Two or more versions have same version history.");
-                }
-                toRestore.put(historyId, v);
+            // check for collision
+            NodeId historyId = v.getVersionHistory().getId();
+            if (toRestore.containsKey(historyId)) {
+                throw new VersionException("Unable to restore. Two or more versions have same version history.");
+            toRestore.put(historyId, v);
-        if (isConfiguration(state)) {
-            InternalConfiguration config = vMgr.getConfiguration(state.getNodeId());
-            restore(config, session.getQName(versionName), removeExisting);
-        } else {
-            restore(state, session.getQName(versionName), removeExisting);
-        }
+        restore(state, session.getQName(versionName), removeExisting);
-            if (isConfiguration(state)) {
-                InternalConfiguration config = vMgr.getConfiguration(state.getNodeId());
-                restore(config, version, removeExisting);
-            } else {
-                restore(state, version, removeExisting);
-            }
+            restore(state, version, removeExisting);
-        if (isConfiguration(state)) {
-            InternalConfiguration config = vMgr.getConfiguration(state.getNodeId());
-            restoreByLabel(config, session.getQName(versionLabel), removeExisting);
-        } else {
-            restoreByLabel(state, session.getQName(versionLabel), removeExisting);
-        }
+        restoreByLabel(state, session.getQName(versionLabel), removeExisting);
-
-            WriteOperation ops = startWriteOperation();
-            try {
-                NodeId configId = vMgr.createConfiguration(session, state.getNodeId());
-                state.setPropertyValue(NameConstants.JCR_CONFIGURATION, InternalValue.create(configId));
-                state.store();
-                ops.save();
-                return session.getNodeById(configId);
-            } catch (ItemStateException e) {
-                throw new RepositoryException(e);
-            } finally {
-                ops.close();
-            }
+            NodeId configId = createConfiguration(state);
+            return session.getNodeById(configId);
-            InternalConfiguration config = restore(state, name, bl);
-            return session.getNodeById(config.getId());
+            NodeId configId = restore(state, name, bl);
+            return session.getNodeById(configId);
-    /**
-     * Checks if the given node state is a nt:configuration. Note that this check
-     * is currently used to either avoid versioning operations on nt:configuration
-     * nodes or to use a differnt strategy for such nodes.
-     *
-     * @param state the state to check
-     * @return <code>true</code> if it is a configuration
-     * @throws RepositoryException if an error occurs
-     */
-    private boolean isConfiguration(NodeStateEx state) throws RepositoryException {
-        return state.getEffectiveNodeType().includesNodeType(NameConstants.NT_CONFIGURATION);
-    }
-
-

MOV26 MOV8 MOV8 MOV8 MOV60 MOV60 MOV60 INS42 MOV8 MOV8 MOV32 MOV32 MOV60 MOV60 MOV60 MOV41 MOV43 MOV43 UPD42 UPD42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL43 DEL42 DEL32 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31