JCR-2067 FileDataStore: only open a stream when really necessary - close() can throw a NullPointerException

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@779081 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileDescriptor;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-    private static Logger log = LoggerFactory.getLogger(LazyFileInputStream.class);
+    /**
+     * The file descriptor to use.
+     */
+    protected final FileDescriptor fd;
-     * Create a lazy input stream for the given file.
+     * Creates a new <code>LazyFileInputStream</code> for the given file. If the
+     * file is unreadable, a FileNotFoundException is thrown.
-     * 
+     *
+     * @throws java.io.FileNotFoundException
-    public LazyFileInputStream(File file) throws FileNotFoundException {
+    public LazyFileInputStream(File file)
+            throws FileNotFoundException {
-        }        
+        }
+        this.fd = null;
+    }
+
+    /**
+     * Creates a new <code>LazyFileInputStream</code> for the given file
+     * descriptor.
+     * The file is not opened until the first byte is read from the stream.
+     *
+     * @param fdObj
+     */
+    public LazyFileInputStream(FileDescriptor fd) {
+        super(null);
+        this.file = null;
+        this.fd = fd;
+    }
+
+    /**
+     * Creates a new <code>LazyFileInputStream</code> for the given file. If the
+     * file is unreadable, a FileNotFoundException is thrown.
+     *
+     * @param name
+     * @throws java.io.FileNotFoundException
+     */
+    public LazyFileInputStream(String name) throws FileNotFoundException {
+        this(new File(name));
-     * 
-     * @throws IOException
+     *
+     * @throws java.io.IOException
-    protected void openStream() throws IOException {
+    protected void open() throws IOException {
-            in = new FileInputStream(file);
+            if (fd != null) {
+                in = new FileInputStream(fd);
+            } else {
+                in = new FileInputStream(file);
+            }
-    
+
-        openStream();
+        open();
-    public int read(byte[] b) throws IOException {
-        return read(b, 0, b.length);
-    }
-
-    public int read(byte[] b, int off, int len) throws IOException {
-        openStream();
-        return super.read(b, off, len);
+    public int available() throws IOException {
+        open();
+        return super.available();
-        super.close();
-    }
-
-    public long skip(long n) throws IOException {
-        openStream();
-        return super.skip(n);
-    }
-
-    public int available() throws IOException {
-        openStream();
-        return super.available();
-    }
-
-    public void mark(int readlimit) {
-        try {
-            openStream();
-        } catch (IOException e) {
-            log.info("Error getting underlying stream: ", e);
+        
+        // only close the file if it was in fact opened
+        if (in != null) {
+            super.close();
-        super.mark(readlimit);
-    public void reset() throws IOException {
-        openStream();
+    public synchronized void reset() throws IOException {
+        open();
-            openStream();
+            open();
-            log.info("Error getting underlying stream: ", e);
-            return false;
+            throw new IllegalStateException(e.toString());
+    public synchronized void mark(int readlimit) {
+        try {
+            open();
+        } catch (IOException e) {
+            throw new IllegalStateException(e.toString());
+        }
+        super.mark(readlimit);
+    }
+
+    public long skip(long n) throws IOException {
+        open();
+        return super.skip(n);
+    }
+
+    public int read(byte[] b) throws IOException {
+        open();
+        return super.read(b, 0, b.length);
+    }
+
+    public int read(byte[] b, int off, int len) throws IOException {
+        open();
+        return super.read(b, off, len);
+    }
+

MOV26 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 INS23 INS31 INS31 INS29 UPD83 MOV83 UPD83 MOV83 UPD43 MOV43 INS59 INS29 INS83 INS42 INS44 INS8 INS29 UPD42 INS44 INS43 UPD42 INS83 UPD39 UPD42 INS83 UPD39 UPD42 MOV44 INS83 INS39 INS42 MOV44 MOV43 INS8 INS65 UPD42 UPD42 MOV42 INS65 INS21 INS65 INS65 INS43 INS42 INS46 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS17 INS25 MOV41 MOV21 INS21 INS41 INS66 UPD66 INS66 INS40 INS7 INS66 INS66 INS66 INS42 UPD42 MOV42 INS33 INS7 INS7 INS66 INS66 INS42 INS40 INS42 INS14 INS40 INS8 INS27 INS8 INS32 INS48 INS22 INS33 INS22 INS33 INS22 INS42 INS43 INS42 MOV21 INS25 UPD42 UPD42 INS42 INS33 MOV21 UPD42 UPD42 INS42 INS42 INS42 INS34 INS40 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS27 INS8 MOV8 INS53 INS53 INS42 INS33 INS21 UPD42 INS14 UPD42 INS14 INS7 INS43 INS32 INS43 INS32 INS42 INS14 INS42 MOV42 INS42 INS42 MOV42 INS42 INS43 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL39 DEL42 DEL42 DEL34 DEL40 DEL32 DEL41 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL9 DEL41