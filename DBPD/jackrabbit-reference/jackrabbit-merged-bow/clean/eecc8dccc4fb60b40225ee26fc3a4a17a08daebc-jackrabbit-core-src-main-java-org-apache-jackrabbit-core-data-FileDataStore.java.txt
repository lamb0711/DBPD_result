JCR-926: garbage collection implementation for the global data store 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@570033 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Random;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+     * Must be at least 3 characters.
-     * Temporary file counter used to guarantee that concurrent threads
-     * in this JVM do not accidentally use the same temporary file names.
-     * <p>
-     * This variable is static to allow multiple separate data store
-     * instances in the same JVM to access the same data store directory
-     * on disk. The counter is initialized to a random number based on the
-     * time when this class was first loaded to minimize the chance of two
-     * separate JVM processes (or class loaders within the same JVM) using
-     * the same temporary file names. 
+     * The minimum modified date. If a file is accessed (read or write) with a modified date 
+     * older than this value, the modified date is updated to the current time.
-    private static long counter = new Random().nextLong();
-    
-     * Returns the next value of the internal temporary file counter.
-     *
-     * @return next counter value
-     */
-    private static synchronized long nextCount() {
-        return counter++;
-    }
-
-    /**
-     * Creates a new record based on the given input stream. The stream
-     * is first consumed and the contents are saved in a temporary file
+     * Creates a new data record. 
+     * The stream is first consumed and the contents are saved in a temporary file
-     * data record. A synchronized counter value and the current time are
-     * used to construct the name of the temporary file in a way that
-     * minimizes the chance of collisions across concurrent threads or
-     * processes.
+     * data record. 
+     * @throws IOException 
-    private File newTemporaryFile() {
-        File temporary = new File(directory, TMP);
-
-        if (!temporary.isDirectory()) {
-            temporary.mkdirs();
+    private File newTemporaryFile() throws IOException {
+        if (!directory.isDirectory()) {
+            directory.mkdirs();
-        String name = TMP + "-" + nextCount() + "-" + System.currentTimeMillis();
-        return new File(temporary, name);
+        File temporary = File.createTempFile(TMP, null, directory);
+        return temporary;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void updateModifiedDateOnRead(long before) {
+        minModifiedDate = before;
+    }
+    
+    /**
+     * {@inheritDoc}
+     */    
+    public int deleteAllOlderThan(long min) {
+        return deleteOlderRecursive(directory, min);
+    }
+
+    private int deleteOlderRecursive(File file, long min) {
+        int count = 0;
+        if(file.isFile() && file.exists() && file.canWrite()) {
+            if(file.lastModified() < min) {
+                file.delete();
+                count++;
+            }
+        } else if(file.isDirectory()) {
+            File[] list = file.listFiles();
+            for(int i=0; i<list.length; i++) {
+                count += deleteOlderRecursive(list[i], min);
+            }
+        }
+        return count;
+    }
+    
+    private void listRecursive(List list, File file) {
+        File[] l = file.listFiles();
+        for(int i=0; l != null && i<l.length; i++) {
+            File f = l[i];
+            if(f.isDirectory()) {
+                listRecursive(list, f);
+            } else {
+                list.add(f);
+            }
+        }
+    }
+    
+    /**
+     * {@inheritDoc}
+     */
+    public Iterator getAllIdentifiers() {
+        ArrayList files = new ArrayList();
+        listRecursive(files, directory);
+        ArrayList identifiers = new ArrayList();
+        for(int i=0; i<files.size(); i++) {
+            File f = (File) files.get(i);
+            String name = f.getName();
+            if(!name.startsWith(TMP)) {
+                DataIdentifier id = new DataIdentifier(name);
+                identifiers.add(id);
+            }
+        }
+        return identifiers.iterator();

INS26 INS26 INS40 INS40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 MOV29 MOV83 MOV39 MOV59 INS29 INS83 MOV43 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 MOV29 UPD83 MOV83 INS39 INS42 INS44 INS8 UPD83 MOV83 INS39 INS42 INS44 INS44 INS8 MOV83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS65 MOV65 INS65 INS42 INS25 INS60 INS41 INS65 INS39 INS42 INS21 INS65 INS39 INS42 INS41 MOV43 INS42 INS39 INS42 INS60 INS25 INS41 INS43 INS42 INS43 INS42 MOV60 INS24 INS65 INS42 INS60 INS21 INS60 INS24 INS41 INS66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS42 INS66 INS38 INS8 MOV43 INS59 INS42 INS65 INS7 INS65 INS32 INS39 INS59 INS27 INS8 INS25 INS42 INS42 INS42 INS5 INS58 INS27 INS37 INS8 INS65 INS43 INS59 INS32 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS32 INS21 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS32 INS32 INS25 INS32 INS8 INS43 INS85 UPD42 INS32 INS39 INS59 INS27 INS27 INS42 INS60 MOV25 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS60 INS24 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS40 INS43 INS59 INS32 INS8 INS43 INS43 INS42 INS34 INS42 INS42 INS43 INS59 MOV43 INS59 INS38 INS8 INS42 INS42 INS32 INS42 INS21 INS21 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS2 UPD42 MOV42 MOV42 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS32 INS60 INS21 INS42 INS42 INS32 INS37 MOV43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS32 INS43 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS34 INS7 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS43 MOV42 INS42 INS2 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL83 DEL59 DEL23 DEL83 DEL39 DEL23 DEL83 DEL39 DEL42 DEL37 DEL41 DEL8 DEL31 DEL42 DEL43 DEL14 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL14 DEL32 DEL38 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL42 DEL42 DEL45 DEL32 DEL45 DEL32 DEL27 DEL59 DEL60 DEL42 DEL14 DEL41 DEL8 DEL31