JCR-2247: Remove duplicate code in QValueFactoryImpl (spi2dav)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@802697 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.QValueFactory;
-import org.apache.jackrabbit.spi.commons.value.AbstractQValueFactory;
-import org.apache.jackrabbit.spi.commons.value.AbstractQValue;
-import org.apache.jackrabbit.util.ISO8601;
+import org.apache.jackrabbit.spi.commons.value.AbstractQValue;
-import javax.jcr.ValueFormatException;
-import java.io.ByteArrayOutputStream;
-import java.io.UnsupportedEncodingException;
-import java.util.Calendar;
-import java.util.TimeZone;
-import java.math.BigDecimal;
-import java.net.URI;
-import java.net.URISyntaxException;
-class QValueFactoryImpl extends AbstractQValueFactory {
+class QValueFactoryImpl extends org.apache.jackrabbit.spi.commons.value.QValueFactoryImpl {
+
+    /**
+     * A dummy value for calling the constructor of AbstractQValue
+     */
+    private static final Object DUMMY_VALUE = new Serializable() {
+        private static final long serialVersionUID = -5667366239976271493L;
+    };
-    //------------------------------------------------------< QValueFactory >---
-    /**
-     * @see QValueFactory#create(String, int)
-     */
-    public QValue create(String value, int type) throws RepositoryException {
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
-        try {
-            switch (type) {
-                case PropertyType.BOOLEAN:
-                    return (Boolean.valueOf(value).booleanValue()) ?
-                            QValueImpl.TRUE :
-                            QValueImpl.FALSE;
-                case PropertyType.DATE: {
-                        Calendar cal = ISO8601.parse(value);
-                        if (cal == null) {
-                            throw new ValueFormatException("not a valid date: " + value);
-                        }
-                        return new DateQValue(cal);
-                    }
-                case PropertyType.DOUBLE:
-                    return new QValueImpl(Double.valueOf(value));
-                case PropertyType.LONG:
-                    return new QValueImpl(Long.valueOf(value));
-                case PropertyType.PATH:
-                    return new QValueImpl(PATH_FACTORY.create(value));
-                case PropertyType.NAME:
-                    return new QValueImpl(NAME_FACTORY.create(value));
-                case PropertyType.STRING:
-                case PropertyType.REFERENCE:
-                case PropertyType.WEAKREFERENCE:
-                    return new QValueImpl(value, type);
-                case PropertyType.BINARY:
-                    return new BinaryQValue(value.getBytes(DEFAULT_ENCODING));
-                case PropertyType.DECIMAL:
-                    return new QValueImpl(new BigDecimal(value));
-                case PropertyType.URI:
-                    return new QValueImpl(URI.create(value));
-            }
-        } catch (IllegalArgumentException ex) {
-            // given String value cannot be converted to Long/Double/Path/Name
-            throw new ValueFormatException(ex);
-        } catch (UnsupportedEncodingException ex) {
-            throw new RepositoryException(ex);
-        }
-
-        // none of the legal types:
-        throw new IllegalArgumentException("illegal type");
-    }
-
-    /**
-     * @see QValueFactory#create(Calendar)
-     */
-    public QValue create(Calendar value) {
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
-        // Calendar is not constant, must create a clone
-        return new DateQValue((Calendar) value.clone());
-    }
-
-    /**
-     * @see QValueFactory#create(double)
-     */
-    public QValue create(double value) {
-        return new QValueImpl(Double.valueOf(value));
-    }
-
-    /**
-     * @see QValueFactory#create(long)
-     */
-    public QValue create(long value) {
-        return new QValueImpl(Long.valueOf(value));
-    }
-
-    /**
-     * @see QValueFactory#create(boolean)
-     */
-    public QValue create(boolean value) throws RepositoryException {
-        return (value) ? QValueImpl.TRUE : QValueImpl.FALSE;
-    }
-
-    /**
-     * @see QValueFactory#create(URI)
-     */
-    public QValue create(URI value) {
-        return new QValueImpl(value);
-    }
-
-    /**
-     * @see QValueFactory#create(URI)
-     */
-    public QValue create(BigDecimal value) {
-        return new QValueImpl(value);
-    }
-
-    /**
-     * @see QValueFactory#create(Name)
-     */
-    public QValue create(Name value) {
-        return new QValueImpl(value);
-    }
-
-    /**
-     * @see QValueFactory#create(Path)
-     */
-    public QValue create(Path value) {
-        return new QValueImpl(value);
-    }
-
-    /**
-     * @see QValueFactory#create(byte[])
-     */
-    public QValue create(byte[] value) {
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
-        return new BinaryQValue(value);
-    }
-
-    /**
-     * @see QValueFactory#create(InputStream)
-     */
-    public QValue create(InputStream value) throws IOException {
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
-        return new BinaryQValue(value);
-    }
-
-    /**
-     * @see QValueFactory#create(File)
-     */
-    public QValue create(File value) throws IOException {
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
-        return new BinaryQValue(value);
-    }
-
-    /**
-     * <code>QValue</code> implementation for all valid <code>PropertyType</code>s
-     * except for BINARY.
-     * @see QValueFactoryImpl.BinaryQValue
-     */
-    private static class QValueImpl extends AbstractQValue implements Serializable {
-
-        private static final QValue TRUE = new QValueImpl(Boolean.TRUE);
-        private static final QValue FALSE = new QValueImpl(Boolean.FALSE);
-
-        private QValueImpl(String value, int type) {
-            super(value, type);
-        }
-
-        private QValueImpl(Long value) {
-            super(value);
-        }
-
-        private QValueImpl(Double value) {
-            super(value);
-        }
-
-        private QValueImpl(Boolean value) {
-            super(value);
-        }
-
-        private QValueImpl(Calendar value) {
-            super(value);
-        }
-
-        private QValueImpl(Name value) {
-            super(value);
-        }
-
-        private QValueImpl(Path value) {
-            super(value);
-        }
-
-        protected QValueImpl(BigDecimal value) {
-            super(value);
-        }
-
-        protected QValueImpl(URI value) {
-            super(value);
-        }
-
-        //---------------------------------------------------------< QValue >---
-        /**
-         * @see QValue#getString()
-         */
-        public String getString() {
-            return val.toString();
-        }
-         * @see QValue#getStream()
-         */
-        public InputStream getStream() throws RepositoryException {
-            try {
-                // convert via string
-                return new ByteArrayInputStream(getString().getBytes(DEFAULT_ENCODING));
-            } catch (UnsupportedEncodingException e) {
-                throw new RepositoryException(QValueFactoryImpl.DEFAULT_ENCODING + " is not supported encoding on this platform", e);
-            }
-        }
-
-        /**
-         * @see org.apache.jackrabbit.spi.QValue#getDecimal()
-         */
-        public BigDecimal getDecimal() throws RepositoryException {
-            if (val instanceof BigDecimal) {
-                return (BigDecimal) val;
-            } else if (val instanceof Double) {
-                return new BigDecimal((Double) val);
-            } else if (val instanceof Long) {
-                return new BigDecimal((Long) val);
-            } else if (val instanceof Calendar) {
-                return new BigDecimal(((Calendar) val).getTimeInMillis());
-            } else {
-                try {
-                    return new BigDecimal(getString());
-                } catch (NumberFormatException e) {
-                    throw new ValueFormatException("not a valid decimal string: " + getString(), e);
-                }
-            }
-        }
-
-        /**
-         * @see QValue#getCalendar()
-         */
-        public Calendar getCalendar() throws RepositoryException {
-            if (val instanceof Calendar) {
-                return (Calendar) ((Calendar) val).clone();
-            } else if (val instanceof Double) {
-                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
-                cal.setTimeInMillis(((Double) val).longValue());
-                return cal;
-            } else if (val instanceof Long) {
-                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
-                cal.setTimeInMillis(((Long) val).longValue());
-                return cal;
-            } else if (val instanceof BigDecimal) {
-                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
-                cal.setTimeInMillis(((BigDecimal) val).longValue());
-                return cal;
-            } else {
-                String str = getString();
-                Calendar cal = ISO8601.parse(str);
-                if (cal == null) {
-                    int type = getType();
-                    if (type == PropertyType.LONG) {
-                        cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
-                        cal.setTimeInMillis(new Long(str).longValue());
-                    } else if (type == PropertyType.DOUBLE) {
-                        cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
-                        cal.setTimeInMillis(new Double(str).longValue());
-                    } else {
-                        throw new ValueFormatException("not a date string: " + getString());
-                    }
-                }
-                return cal;
-            }
-        }
-
-        /**
-         * @see QValue#getDouble()
-         */
-        public double getDouble() throws RepositoryException {
-            if (val instanceof Double) {
-                return ((Double) val).doubleValue();
-            } else if (val instanceof BigDecimal) {
-                return ((BigDecimal) val).doubleValue();
-            } else if (val instanceof Calendar) {
-                return ((Calendar) val).getTimeInMillis();
-            } else {
-                try {
-                    return Double.parseDouble(getString());
-                } catch (NumberFormatException ex) {
-                    int type = getType();
-                    if (type == PropertyType.DATE) {
-                        Calendar cal = ISO8601.parse(getString());
-                        if (cal != null) {
-                            return cal.getTimeInMillis();
-                        }
-                    }
-                    throw new ValueFormatException("not a double: " + getString(), ex);
-                }
-            }
-        }
-
-        /**
-         * @see QValue#getLong()
-         */
-        public long getLong() throws RepositoryException {
-            if (val instanceof Long) {
-                return ((Long) val).longValue();
-            } else if (val instanceof Double) {
-                return ((Double) val).longValue();
-            } else if (val instanceof BigDecimal) {
-                return ((BigDecimal) val).longValue();
-            } else if (val instanceof Calendar) {
-                return ((Calendar) val).getTimeInMillis();
-            } else {
-                String str = getString();
-                try {
-                    return Long.parseLong(str);
-                } catch (NumberFormatException ex) {
-                    int type = getType();
-                    if (type == PropertyType.DOUBLE) {
-                        return new Double(str).longValue();
-                    } else if (type == PropertyType.DATE) {
-                        Calendar cal = ISO8601.parse(getString());
-                        if (cal != null) {
-                            return cal.getTimeInMillis();
-                        }
-                    }
-                    throw new ValueFormatException("not a long: " + getString(), ex);
-                }
-            }
-        }
-
-        /**
-         * @see QValue#getBinary()
-         */
-        public Binary getBinary() throws RepositoryException {
-            // TODO FIXME consolidate Binary implementations
-            return new Binary() {
-                public InputStream getStream() throws RepositoryException {
-                    return QValueImpl.this.getStream();
-                }
-
-                public int read(byte[] b, long position) throws IOException, RepositoryException {
-                    InputStream in = getStream();
-                    try {
-                        in.skip(position);
-                        return in.read(b);
-                    } finally {
-                        in.close();
-                    }
-                }
-
-                public long getSize() throws RepositoryException {
-                    return getLength();
-                }
-
-                public void dispose() {
-                }
-
-            };
-        }
-
-    }
-
-    //--------------------------------------------------------< Inner Class >---
-    /**
-     * Extension for values of type {@link PropertyType#DATE}.
-     */
-    private class DateQValue extends QValueImpl {
-
-        private final String formattedStr;
-
-        private DateQValue(Calendar value) {
-            super(value);
-            formattedStr = ISO8601.format(value);
-        }
-
-        /**
-         * @return The formatted String of the internal Calendar value.
-         * @see QValue#getString()
-         * @see ISO8601#format(Calendar)
-         */
-        public String getString() {
-            return formattedStr;
-        }
-
-        //---------------------------------------------------------< Object >---
-        /**
-         * @param obj The object to be checked for equality.
-         * @return true if the given Object is a <code>DateQValue</code> with an
-         * equal String representation.
-         * @see Object#equals(Object)
-         */
-        public boolean equals(Object obj) {
-            if (this == obj) {
-                return true;
-            }
-            if (obj instanceof DateQValue) {
-                DateQValue other = (DateQValue) obj;
-                return formattedStr.equals(other.formattedStr);
-            } else if (obj instanceof QValueImpl) {
-                QValueImpl other = (QValueImpl) obj;
-                return other.getType() == PropertyType.DATE && formattedStr.equals(other.getString());
-            }
-            return false;
-        }
-
-        /**
-         * @return the hashCode of the formatted String of the Calender value.
-         * @see Object#hashCode()
-         */
-        public int hashCode() {
-            return formattedStr.hashCode();
-        }
-    }
-
-    //--------------------------------------------------------< Inner Class >---
-    /**
-    private class BinaryQValue implements QValue, Serializable, ValueLoader.Target {
+    private class BinaryQValue extends AbstractQValue implements ValueLoader.Target {
+
+        private static final long serialVersionUID = 2736654000266713469L;
+
-         * Converted text
-         */
-        private transient String text = null;
-
-        /**
+            super(DUMMY_VALUE, PropertyType.BINARY);
-         * The new instance represents a <i>temporary</i> value whose dynamically
-         * allocated resources will be freed explicitly on {@link #discard()}.
-         *
-         * @param in stream to be represented as a <code>BinaryQValue</code> instance
-         * @throws IOException if an error occurs while reading from the stream or
-         *                     writing to the temporary file
-         */
-        private BinaryQValue(InputStream in) throws IOException {
-            init(in, true);
-        }
-
-
-        /**
-         * Creates a new <code>BinaryQValue</code> instance from a
-         * <code>byte[]</code> array.
-         *
-         * @param bytes byte array to be represented as a <code>BinaryQValue</code>
-         *              instance
-         */
-        private BinaryQValue(byte[] bytes) {
-            buffer = bytes;
-            file = null;
-            // this instance is not backed by a temporarily allocated buffer
-            temp = false;
-        }
-
-        /**
-         * Creates a new <code>BinaryQValue</code> instance from a <code>File</code>.
-         *
-         * @param file file to be represented as a <code>BinaryQValue</code> instance
-         * @throws IOException if the file can not be read
-         */
-        private BinaryQValue(File file) throws IOException {
-            String path = file.getCanonicalPath();
-            if (!file.isFile()) {
-                throw new IOException(path + ": the specified file does not exist");
-            }
-            if (!file.canRead()) {
-                throw new IOException(path + ": the specified file can not be read");
-            }
-            // this instance is backed by a 'real' file
-            this.file = file;
-            // this instance is not backed by temporarily allocated resource/buffer
-            temp = false;
-        }
-
-        /**
-         * Creates a new <code>BinaryQValue</code> instance from an
-         * <code>InputStream</code>. The contents of the stream is spooled
-         * to a temporary file or to a byte buffer if its size is smaller than
-         * {@link #MAX_BUFFER_SIZE}.
-         * <p/>
+                in.close();
-        /**
-         * @see QValue#getType()
-         */
-        public int getType() {
-            return PropertyType.BINARY;
-        }
-         * @see QValue#getString()
-         */
-        public String getString() throws RepositoryException {
-            if (text == null) {
-                ByteArrayOutputStream out = new ByteArrayOutputStream();
-                try {
-                    spool(out);
-                    byte[] data = out.toByteArray();
-                    text = new String(data, QValueFactoryImpl.DEFAULT_ENCODING);
-                } catch (UnsupportedEncodingException e) {
-                    throw new RepositoryException(QValueFactoryImpl.DEFAULT_ENCODING
-                        + " not supported on this platform", e);
-                } catch (IOException e) {
-                    throw new ValueFormatException("conversion from stream to string failed", e);
-                } finally {
-                    try {
-                        out.close();
-                    } catch (IOException e) {
-                        // ignore
-                    }
-                }
-            }
-            return text;
-        }
-
-        /**
-         * @see QValue#getCalendar()
-         */
-        public Calendar getCalendar() throws RepositoryException {
-             Calendar cal = ISO8601.parse(getString());
-             if (cal == null) {
-                 throw new ValueFormatException("not a date string: " + getString());
-             } else {
-                 return cal;
-             }
-        }
-
-        /**
-         * @see QValue#getDouble()
-         */
-        public double getDouble() throws RepositoryException {
-            try {
-                return Double.parseDouble(getString());
-            } catch (NumberFormatException ex) {
-                throw new ValueFormatException(ex);
-            }
-        }
-
-        /**
-         * @see QValue#getLong()
-         */
-        public long getLong() throws RepositoryException {
-            try {
-                return Long.parseLong(getString());
-            } catch (NumberFormatException ex) {
-                throw new ValueFormatException(ex);
-            }
-        }
-
-        public boolean getBoolean() throws RepositoryException {
-            return new Boolean(getString()).booleanValue();
-        }
-
-        /**
-         * @see QValue#getDecimal()
-         */
-        public BigDecimal getDecimal() throws RepositoryException {
-            try {
-                return new BigDecimal(getString());
-            } catch (NumberFormatException ex) {
-                throw new ValueFormatException(ex);
-            }
-        }
-
-        /**
-         * @see QValue#getURI()
-         */
-        public URI getURI() throws RepositoryException {
-            try {
-                return new URI(getString());
-            } catch (URISyntaxException ex) {
-                throw new ValueFormatException(ex);
-            }
-        }
-
-        /**
-        /**
-         * Spools the contents of this <code>BinaryQValue</code> to the given
-         * output stream.
-         *
-         * @param out output stream
-         * @throws RepositoryException if the input stream for this
-         *                             <code>BinaryQValue</code> could not be obtained
-         * @throws IOException         if an error occurs while while spooling
-         */
-        private void spool(OutputStream out) throws RepositoryException, IOException {
-            InputStream in;
-            if (file != null) {
-                // this instance is backed by a 'real' file
-                try {
-                    in = new FileInputStream(file);
-                } catch (FileNotFoundException fnfe) {
-                    throw new RepositoryException("file backing binary value not found",
-                        fnfe);
-                }
-            } else if (buffer != null) {
-                // this instance is backed by an in-memory buffer
-                in = new ByteArrayInputStream(buffer);
-            } else {
-                // only uri present:
-                loadBinary();
-                if (buffer == null) {
-                    in = new FileInputStream(file);
-                } else {
-                    in = new ByteArrayInputStream(buffer);
-                }
-            }
-            try {
-                byte[] buffer = new byte[0x2000];
-                int read;
-                while ((read = in.read(buffer)) > 0) {
-                    out.write(buffer, 0, read);
-                }
-            } finally {
-                try {
-                    in.close();
-                } catch (IOException ignore) {
-                }
-            }
-        }

MOV26 UPD43 INS23 INS40 INS29 INS83 INS83 MOV83 MOV43 INS59 MOV43 INS23 MOV65 UPD42 MOV42 INS14 MOV83 INS83 INS83 INS39 INS59 UPD66 MOV43 INS1 UPD42 MOV42 INS34 INS46 INS23 INS42 INS40 MOV8 MOV83 MOV83 MOV83 INS39 INS59 MOV25 UPD42 MOV42 INS38 INS34 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL40 DEL49 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL36 DEL40 DEL40 DEL16 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL40 DEL49 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL41 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL50 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL36 DEL40 DEL40 DEL16 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL39 DEL85 DEL5 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL40 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL40 DEL14 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL40 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL11 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL25 DEL25 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL25 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL52 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL55 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL46 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL42 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL41 DEL8 DEL25 DEL25 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL66 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL66 DEL42 DEL68 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL31 DEL8 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL40 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL40 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL54 DEL8 DEL31