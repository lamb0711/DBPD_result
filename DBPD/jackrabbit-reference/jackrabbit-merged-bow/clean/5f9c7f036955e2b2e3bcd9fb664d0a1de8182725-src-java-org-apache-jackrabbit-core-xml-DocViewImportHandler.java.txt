re-implemented handling of values on import to allow import of large binary properties 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160072 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.Constants;
-import org.apache.jackrabbit.core.InternalValue;
-import org.xml.sax.helpers.DefaultHandler;
-class DocViewImportHandler extends DefaultHandler implements Constants {
+class DocViewImportHandler extends TargetImportHandler {
-    private final Importer importer;
-    private final NamespaceResolver nsContext;
-
-    private final StringBuffer text = new StringBuffer();
+    private StringBufferValue textHandler = new StringBufferValue();
+    /**
+     * Constructs a new <code>DocViewImportHandler</code>.
+     *
+     * @param importer
+     * @param nsContext
+     */
-        this.importer = importer;
-        this.nsContext = nsContext;
+        super(importer, nsContext);
-    private void onTextNode(String text)
+    private void onTextNode(StringBufferValue text)
-        if (text.trim().length() == 0) {
+        String s = textHandler.retrieve();
+        if (s.trim().length() == 0) {
-            log.debug("ignoring withespace character data: " + text);
+            log.debug("ignoring withespace character data: " + s);
-        if (text.length() > 0) {
-            try {
-                Importer.NodeInfo node =
-                        new Importer.NodeInfo(JCR_XMLTEXT, null, null, null);
-                InternalValue[] values = new InternalValue[1];
-                values[0] = InternalValue.create(text.toString());
-                ArrayList props = new ArrayList();
-                Importer.PropInfo prop =
-                        new Importer.PropInfo(JCR_XMLCHARACTERS,
-                                PropertyType.STRING, values);
-                props.add(prop);
-                // call Importer
-                importer.startNode(node, props, nsContext);
-                importer.endNode(node);
-            } catch (RepositoryException re) {
-                throw new SAXException(re);
-            }
+        try {
+            Importer.NodeInfo node =
+                    new Importer.NodeInfo(JCR_XMLTEXT, null, null, null);
+            Importer.TextValue[] values = new Importer.TextValue[]{text};
+            ArrayList props = new ArrayList();
+            Importer.PropInfo prop =
+                    new Importer.PropInfo(JCR_XMLCHARACTERS,
+                            PropertyType.STRING, values);
+            props.add(prop);
+            // call Importer
+            importer.startNode(node, props, nsContext);
+            importer.endNode(node);
+        } catch (RepositoryException re) {
+            throw new SAXException(re);
-        if (text.length() > 0) {
+        if (textHandler != null && textHandler.length() > 0) {
-            onTextNode(text.toString());
-            // reset buffer
-            text.setLength(0);
+            onTextNode(textHandler);
+            // reset handler
+            textHandler.dispose();
+            textHandler = null;
-                InternalValue[] propValues;
+                Importer.TextValue[] propValues;
-                    propValues = new InternalValue[1];
-                    propValues[0] = InternalValue.create(atts.getValue(i));
+                    propValues = new Importer.TextValue[1];
+                    propValues[0] = new StringValue(atts.getValue(i));
-            Importer.NodeInfo nodeInfo =
+            Importer.NodeInfo node =
-            importer.startNode(nodeInfo, props, nsContext);
+            importer.startNode(node, props, nsContext);
-            stack.push(nodeInfo);
+            stack.push(node);
-    public void characters(char[] ch, int start, int length) throws SAXException {
+    public void characters(char[] ch, int start, int length)
+            throws SAXException {
-        text.append(ch, start, length);
+        if (textHandler == null) {
+            textHandler = new StringBufferValue();
+        }
+        textHandler.append(ch, start, length);
-    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
-        if (text.length() > 0) {
+    public void endElement(String namespaceURI, String localName, String qName)
+            throws SAXException {
+        if (textHandler != null && textHandler.length() > 0) {
-            onTextNode(text.toString());
-            // reset buffer
-            text.setLength(0);
+            onTextNode(textHandler);
+            // reset handler
+            textHandler.dispose();
+            textHandler = null;

UPD43 UPD42 UPD43 INS29 INS44 MOV8 UPD42 UPD42 INS65 INS65 INS65 INS46 INS43 INS42 INS60 INS25 INS25 UPD43 INS66 INS42 INS42 INS42 INS42 INS42 MOV43 INS59 INS27 INS8 INS27 INS27 INS8 INS27 UPD42 INS42 INS32 INS32 INS34 INS21 INS41 INS27 INS27 INS21 INS42 INS33 INS21 UPD42 INS27 INS27 INS21 INS42 INS42 INS32 INS42 INS32 UPD5 INS42 INS33 MOV32 MOV34 INS7 INS7 INS42 INS33 MOV32 MOV34 INS7 INS42 INS42 INS42 INS42 INS27 UPD43 UPD42 UPD42 MOV42 UPD42 UPD42 INS42 INS33 UPD42 UPD42 UPD42 INS42 INS14 UPD42 UPD42 MOV42 UPD42 UPD42 INS42 INS33 INS45 INS42 INS40 UPD5 INS4 UPD5 INS43 UPD43 INS42 UPD43 INS42 INS40 INS40 INS14 UPD5 INS43 MOV32 UPD43 INS42 INS40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL44 DEL42 DEL42 DEL34 DEL42 DEL34 DEL2 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL25 DEL8 DEL27 DEL42 DEL32 DEL34 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL34