JCR-2734: Inconsistencies in BitSetKey comparison

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@995406 13f79535-47bb-0310-9956-ffa450edef68

-public class BitsetENTCacheImpl implements EffectiveNodeTypeCache {
+public class BitSetENTCacheImpl implements EffectiveNodeTypeCache {
-    BitsetENTCacheImpl() {
+    BitSetENTCacheImpl() {
-        return new BitsetKey(ntNames, nameIndex.size() + ntNames.length);
+        return new BitSetKey(ntNames, nameIndex.size() + ntNames.length);
-        BitsetENTCacheImpl clone = new BitsetENTCacheImpl();
+        BitSetENTCacheImpl clone = new BitSetENTCacheImpl();
-     * does not suite all our needs. Every node type is represented by a bit
+     * does not suit all our requirements. Every node type is represented by a bit
-    private class BitsetKey implements Key {
+    private class BitSetKey implements Key {
-         * the hashcode, only calculated once
+         * the hash code, only calculated once
-         * Creates a ew bitset key.
+         * Creates a new bit set key.
-         * @param maxBit the approximative number of the geatest bit
+         * @param maxBit the approximative number of the greatest bit
-        public BitsetKey(Name[] names, int maxBit) {
+        public BitSetKey(Name[] names, int maxBit) {
-         * Creates new bitset key.
-         * @param bits the array if bits
-         * @param numBits the number of bits that are '1' in the given bis
+         * Creates a new bit set key.
+         * @param bits the array of bits
+         * @param numBits the number of bits that are '1' in the given bits
-        private BitsetKey(long[] bits, int numBits) {
+        private BitSetKey(long[] bits, int numBits) {
-                names[j++] = BitsetENTCacheImpl.this.getName(i);
+                names[j++] = BitSetENTCacheImpl.this.getName(i);
-            BitsetKey other = (BitsetKey) otherKey;
+            BitSetKey other = (BitSetKey) otherKey;
-            BitsetKey other = (BitsetKey) otherKey;
+            BitSetKey other = (BitSetKey) otherKey;
-            return new BitsetKey(newBits, numBits);
+            return new BitSetKey(newBits, numBits);
-         * <code>fromIndex</code> inclusieve.
+         * <code>fromIndex</code> inclusive.
-         * This compares 1. the cardinailty (number of set bits) and 2. the
-         * nummeric value of the bitsets in descending order.
+         * This compares 1. the cardinality (number of set bits) and 2. the
+         * numeric value of the bit sets in descending order.
-            BitsetKey o = (BitsetKey) other;
+            BitSetKey o = (BitSetKey) other;
-                        return (int) (h2 - h1);
+                        return Long.signum(h2 - h1);
-            if (obj instanceof BitsetKey) {
-                BitsetKey o = (BitsetKey) obj;
+            if (obj instanceof BitSetKey) {
+                BitSetKey o = (BitSetKey) obj;
-         * Calculates the hashcode.
-         * @return the calculated hashcode
+         * Calculates the hash code.
+         * @return the calculated hash code
-                buf.append(BitsetENTCacheImpl.this.getName(i));
+                buf.append(BitSetENTCacheImpl.this.getName(i));

UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD66 UPD43 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD43 UPD43 UPD66 UPD66 UPD66 UPD43 UPD66 UPD66 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 INS32 INS42 INS42 MOV27 DEL39 DEL36 DEL11