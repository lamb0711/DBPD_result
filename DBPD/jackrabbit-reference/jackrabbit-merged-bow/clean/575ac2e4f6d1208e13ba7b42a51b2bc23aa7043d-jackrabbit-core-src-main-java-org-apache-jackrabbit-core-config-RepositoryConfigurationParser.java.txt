JCR-1441 - Support workspace event listeners that will be created/registered on initialization time
- reverting commit


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633899 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import javax.jcr.observation.Event;
-
-    /** Name of the event listener configuration element. */
-    public static final String EVENT_LISTENER_ELEMENT = "EventListener";
-    
-    /** Name of the eventTypes attribute */
-    public static final String EVENT_TYPES_ATTRIBUTE = "eventTypes";
-    
-    /** Default value of the eventTypes attribute */
-    public static final int EVENT_TYPES_VALUE = 
-        Event.NODE_ADDED | Event.NODE_REMOVED | Event.PROPERTY_ADDED |
-        Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED;
-
-    /** Name of the absPath attribute */
-    public static final String ABS_PATH_ATTRIBUTE = "absPath";
-
-    /** Name of the isDeep attribute */
-    public static final String IS_DEEP_ATTRIBUTE = "isDeep";
-
-    /** Name of the uuid attribute */
-    public static final String UUID_ATTRIBUTE = "uuid";
-
-    /** Name of the nodeTypeName attribute */
-    public static final String NODE_TYPE_NAME_ATTRIBUTE = "nodeTypeName";
-    
-    /** Name of the noLocal attribute */
-    public static final String NO_LOCAL_ATTRIBUTE = "noLocal";
-    
-    /** Name of the workspace property */
-    public static final String WORKSPACE_PROP_NAME = "workspace";
-    
-        // Event listeners configuration (optional)
-        EventListenerConfig[] elcs = tmpParser.parseEventListenersConfig(root);
-        
-        return new WorkspaceConfig(home, name, clustered, fsc, pmc, sc, ismLockingConfig, elcs);
+        return new WorkspaceConfig(home, name, clustered, fsc, pmc, sc, ismLockingConfig);
-    
-    /**
-     * Parse event listeners config.
-     * 
-     * @param parent parent of the <code>EventListener</code> elements.
-     * @return event listener configuration array
-     * @throws ConfigurationException if the configuration is broken
-     */
-    protected EventListenerConfig[] parseEventListenersConfig(Element parent)
-            throws ConfigurationException {
-        
-        ArrayList configs = new ArrayList();
-        
-        NodeList children = parent.getChildNodes();
-        for (int i = 0; i < children.getLength(); i++) {
-            Node child = children.item(i);
-            if (child.getNodeType() == Node.ELEMENT_NODE
-                    && EVENT_LISTENER_ELEMENT.equals(child.getNodeName())) {
-                Element element = (Element) child;
-                configs.add(parseEventListenerConfig(element));
-            }
-        }
-        EventListenerConfig[] rv = new EventListenerConfig[configs.size()];
-        configs.toArray(rv);
-        return rv;
-    }
-
-    /**
-     * Parse event listener config.
-     * 
-     * @param element an  <code>EventListener</code> element.
-     * @return event listener configuration
-     * @throws ConfigurationException if the configuration is broken
-     */
-    protected EventListenerConfig parseEventListenerConfig(Element element)
-            throws ConfigurationException {
-        
-        String className = getAttribute(element, CLASS_ATTRIBUTE);
-        Properties parameters = parseParameters(element);
-        
-        // Provide a meaningful default for the workspace property
-        if (!parameters.containsKey(WORKSPACE_PROP_NAME)) {
-            parameters.put(WORKSPACE_PROP_NAME, 
-                    replaceVariables("${" + WORKSPACE_NAME_VARIABLE + "}"));
-        }
-
-        EventListenerConfig config = new EventListenerConfig(className, parameters);
-        config.setEventTypes(getAttribute(element, 
-                EVENT_TYPES_ATTRIBUTE, EVENT_TYPES_VALUE));
-        config.setAbsPath(getAttribute(element, ABS_PATH_ATTRIBUTE, "/"));
-        config.setDeep(getAttribute(element, IS_DEEP_ATTRIBUTE, true));
-        
-        String s = getAttribute(element, UUID_ATTRIBUTE, null);
-        if (s != null) {
-            config.setUUID(s.split(","));
-        }
-        s = getAttribute(element, NODE_TYPE_NAME_ATTRIBUTE, null);
-        if (s != null) {
-            config.setNodeTypeName(s.split(","));
-        }
-        config.setNoLocal(getAttribute(element, NO_LOCAL_ATTRIBUTE, false));
-        return config;
-    }
-    

DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL27 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31