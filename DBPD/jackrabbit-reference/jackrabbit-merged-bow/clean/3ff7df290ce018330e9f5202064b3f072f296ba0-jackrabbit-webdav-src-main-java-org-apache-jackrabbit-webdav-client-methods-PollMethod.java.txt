JCR-4064: Refactor WebDAV related code out of HttpClient3-specific classes for better future re-use

use separate classes for XML parsing/serialization

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1771999 13f79535-47bb-0310-9956-ffa450edef68

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.jackrabbit.webdav.DavMethods;
-import org.apache.jackrabbit.webdav.DavServletResponse;
-import org.apache.jackrabbit.webdav.DavException;
-import org.apache.jackrabbit.webdav.header.PollTimeoutHeader;
-import org.apache.jackrabbit.webdav.xml.DomUtil;
-import org.apache.jackrabbit.webdav.xml.ElementIterator;
-import org.apache.jackrabbit.webdav.observation.ObservationConstants;
-import org.apache.jackrabbit.webdav.observation.EventDiscovery;
-import org.apache.jackrabbit.webdav.observation.EventBundle;
+import java.io.IOException;
+
+import org.apache.commons.httpclient.HttpConnection;
-import org.apache.commons.httpclient.HttpConnection;
+import org.apache.jackrabbit.webdav.DavException;
+import org.apache.jackrabbit.webdav.DavMethods;
+import org.apache.jackrabbit.webdav.DavServletResponse;
+import org.apache.jackrabbit.webdav.header.PollTimeoutHeader;
+import org.apache.jackrabbit.webdav.observation.EventDiscovery;
+import org.apache.jackrabbit.webdav.observation.ObservationConstants;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-import org.w3c.dom.Document;
-
-import java.io.IOException;
-     private boolean buildDiscoveryFromRoot(Element root) {
-         if (DomUtil.matches(root, XML_EVENTDISCOVERY, ObservationConstants.NAMESPACE)) {
-             eventDiscovery = new EventDiscovery();
-             ElementIterator it = DomUtil.getChildren(root, XML_EVENTBUNDLE, ObservationConstants.NAMESPACE);
-             while (it.hasNext()) {
-                 final Element ebElement = it.nextElement();
-                 EventBundle eb = new EventBundle() {
-                     public Element toXml(Document document) {
-                         return (Element) document.importNode(ebElement, true);
-                     }
-                 };
-                 eventDiscovery.addEventBundle(eb);
-             }
-             return true;
-         } else {
-             log.debug("Missing 'eventdiscovery' response body in POLL method.");
-         }
-         return false;
-     }
+    private boolean buildDiscoveryFromRoot(Element root) {
+        try {
+            eventDiscovery = EventDiscovery.createFromXml(root);
+            return true;
+        } catch (IllegalArgumentException ex) {
+            log.debug("Missing 'eventdiscovery' response body in POLL method.", ex);
+            return false;
+        }
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS54 INS8 INS12 INS21 MOV41 INS44 INS8 INS7 UPD43 MOV43 UPD42 MOV42 MOV21 MOV41 MOV42 INS32 UPD42 INS42 UPD42 MOV42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL9 DEL32 DEL11 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL8 DEL25