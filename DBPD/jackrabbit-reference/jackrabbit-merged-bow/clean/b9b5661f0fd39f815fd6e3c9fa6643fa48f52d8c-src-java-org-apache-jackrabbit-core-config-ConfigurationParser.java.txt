Refactoring step 5 (JCR-53)
 - Started restructuring and documenting the XML handling
 - Created the ConfigurationException class
 - Added many sanity checks (I hope this doesn't break anything...)
 - Minor cleanups and clarifications

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156158 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
-import java.util.Enumeration;
+import org.apache.jackrabbit.core.RepositoryImpl;
-import org.apache.jackrabbit.core.util.Text;
+import org.apache.log4j.Logger;
+    private static Logger log = Logger.getLogger(ConfigurationParser.class);
+
-    public static final String REPOSITORY_HOME_VARIABLE = "${rep.home}";
+    public static final String REPOSITORY_HOME_VARIABLE = "rep.home";
-    public static final String WORKSPACE_HOME_VARIABLE = "${wsp.home}";
-    public static final String WORKSPACE_NAME_VARIABLE = "${wsp.name}";
+    public static final String WORKSPACE_HOME_VARIABLE = "wsp.home";
+    public static final String WORKSPACE_NAME_VARIABLE = "wsp.name";
-                    WorkspaceConfig wspConfig = parseWorkspaceConfig(
-                                configFile.getPath(), configFile.getParent());
+                    Properties newVariables = new Properties(variables);
+                    newVariables.setProperty(
+                            WORKSPACE_HOME_VARIABLE, configFile.getParent());
+                    ConfigurationParser parser =
+                        new ConfigurationParser(newVariables);
+
+                    InputSource wsxml =
+                        new InputSource(new FileReader(configFile));
+                    wsxml.setSystemId(configFile.toURI().toString());
+                    WorkspaceConfig wspConfig =
+                        parser.parseWorkspaceConfig(wsxml);
-        // create workspace config object
-        return parseWorkspaceConfig(configFile.getPath(), configFile.getParent());
-    }
-
-    /**
-     * Initializes this <code>RepositoryConfig</code> object.
-     *
-     * @param config
-     * @throws RepositoryException
-     */
-    protected void init(Document config) throws RepositoryException {
-    }
-
-    /**
-     * Creates a new <code>WorkspaceConfig</code> instance. The configuration
-     * is read from the specified configuration file.
-     *
-     * @param configFilePath path to the configuration file
-     * @param wspHomeDir     workspace home directory
-     * @return a new <code>WorkspaceConfig</code> instance
-     * @throws RepositoryException If an error occurs
-     */
-    public WorkspaceConfig parseWorkspaceConfig(
-            String configFilePath, String wspHomeDir)
-            throws RepositoryException {
-            File config = new File(configFilePath);
-            InputSource is = new InputSource(new FileReader(config));
-            is.setSystemId(config.toURI().toString());
-            return parseWorkspaceConfig(is, wspHomeDir);
-        } catch (IOException ioe) {
-            String msg = "error while reading config file " + configFilePath;
-            throw new RepositoryException(msg, ioe);
-        }
-    }
-
-    /**
-     * Creates a new <code>WorkspaceConfig</code> instance. The configuration
-     * is read from the specified input source.
-     *
-     * @param is         <code>InputSource</code> where the configuration is read from
-     * @param wspHomeDir workspace home directory
-     * @return a new <code>WorkspaceConfig</code> instance
-     * @throws RepositoryException If an error occurs
-     */
-    public WorkspaceConfig parseWorkspaceConfig(
-            InputSource xml, String home)
-            throws RepositoryException {
-        try {
-            Document config = parse(xml);
-
+            // create workspace config object
-            newVariables.setProperty(WORKSPACE_HOME_VARIABLE, home);
+            newVariables.setProperty(
+                    WORKSPACE_HOME_VARIABLE, configFile.getParent());
-            return parser.parseWorkspaceConfig(config);
-        } catch (JDOMException ex) {
-            throw new RepositoryException(ex);
-        } catch (IOException ex) {
-            throw new RepositoryException(ex);
+
+            InputSource xml = new InputSource(new FileReader(configFile));
+            xml.setSystemId(configFile.toURI().toString());
+
+            return parser.parseWorkspaceConfig(xml);
+        } catch (FileNotFoundException e) {
+            throw new ConfigurationException("TODO", e);
-     * Initializes this <code>WorkspaceConfig</code> object.
+     * Parses workspace configuration. Workspace configuration uses the
+     * following format:
+     * <pre>
+     *   &lt;Workspace name="..."&gt;
+     *     &lt;FileSystem ...&gt;
+     *     &lt;PersistenceManager ...&gt;
+     *     &lt;SearchIndex ...&gt;
+     *   &lt;/Search&gt;
+     * </pre>
+     * <p>
+     * All the child elements (<code>FileSystem</code>,
+     * <code>PersistenceManager</code>, and <code>SearchIndex</code>) are
+     * {@link #parseBeanConfig(Element,String) bean configuration} elements.
+     * In addition to bean configuration, the
+     * {@link #parseSearchConfig(Element) search element} also contains
+     * configuration for the search file system.
+     * <p>
+     * In addition to the configured information, the returned workspace
+     * configuration object also contains the workspace home directory path
+     * that is given as the ${wsp.home} parser variable.
+     * <p>
+     * Variable replacement is performed on the optional workspace name
+     * attribute. If the name is not given, then the name of the workspace
+     * home directory is used as the workspace name. Once the name has been
+     * determined, it will be added as the ${wsp.name} variable in a temporary
+     * configuration parser that is used to parse the contained configuration
+     * elements.
+     * <p>
+     * The search index configuration element is optional. If it is not given,
+     * then the workspace will not have search capabilities.
-     * @param config
-     * @throws RepositoryException
+     * @param xml workspace configuration document
+     * @return workspace configuration
+     * @throws ConfigurationException if the configuration is broken
+     * @see #parseBeanConfig(Element, String)
+     * @see #parseSearchConfig(Element)
-    public WorkspaceConfig parseWorkspaceConfig(Document config)
-            throws RepositoryException {
+    public WorkspaceConfig parseWorkspaceConfig(InputSource xml)
+            throws ConfigurationException {
-            String wspHomeDir = variables.getProperty(WORKSPACE_HOME_VARIABLE);
+            Document document = parse(xml);
+            Element element = document.getRootElement();
-            Element wspElem = config.getRootElement();
-            // name
-            String wspName = wspElem.getAttributeValue(NAME_ATTRIBUTE);
-            if (wspName == null) {
-                // init with wsp home dirname
-                wspName = new File(wspHomeDir).getName();
+            // Workspace home directory
+            String home = variables.getProperty(WORKSPACE_HOME_VARIABLE);
+
+            // Workspace name
+            String name = element.getAttributeValue(NAME_ATTRIBUTE);
+            if (name != null) {
+                name = replaceVariables(name);
-                wspName = replaceVariables(wspName);
+                name = new File(home).getName();
-            // set name variable
+            // Create a temporary parser that contains the ${wsp.name} variable
-            newVariables.put(WORKSPACE_NAME_VARIABLE, wspName);
+            newVariables.put(WORKSPACE_NAME_VARIABLE, name);
-            // file system
-            BeanConfig fsc = parser.parseBeanConfig(wspElem, FILE_SYSTEM_ELEMENT);
-            FileSystem wspFS = (FileSystem) fsc.newInstance();
-            wspFS.init();
+            // File system implementation
+            BeanConfig fsc =
+                parser.parseBeanConfig(element, FILE_SYSTEM_ELEMENT);
-            // persistence manager config
+            // Persistence manager implementation
-                parser.parseBeanConfig(wspElem, PERSISTENCE_MANAGER_ELEMENT);
+                parser.parseBeanConfig(element, PERSISTENCE_MANAGER_ELEMENT);
-            // search config (optional)
-            Element searchElem = wspElem.getChild(SEARCH_INDEX_ELEMENT);
+            // Search implementation (optional)
-            if (searchElem != null) {
-                sc = parser.parseSearchConfig(searchElem);
+            Element search = element.getChild(SEARCH_INDEX_ELEMENT);
+            if (search != null) {
+                sc = parser.parseSearchConfig(search);
-            return new WorkspaceConfig(wspHomeDir, wspName, wspFS, pmc, sc);
-        } catch (FileSystemException ex) {
-            throw new RepositoryException(ex);
-        } catch (ClassNotFoundException ex) {
-            throw new RepositoryException(ex);
-        } catch (InstantiationException ex) {
-            throw new RepositoryException(ex);
-        } catch (IllegalAccessException ex) {
-            throw new RepositoryException(ex);
-        } catch (ClassCastException ex) {
-            throw new RepositoryException(ex);
+            return new WorkspaceConfig(home, name, createFileSystem(fsc), pmc, sc);
+        } catch (JDOMException e) {
+            throw new ConfigurationException(
+                    "Workspace configuration syntax error.", e);
+        } catch (IOException e) {
+            throw new ConfigurationException(
+                    "Workspace configuration could not be read.", e);
-     * Creates a new <code>SearchConfig</code>.
-     * @param config the config root element for this <code>SearchConfig</code>.
-     * @throws RepositoryException if an error occurs while creating the
-     *  <code>SearchConfig</code>.
+     * Parses search index configuration. Search index configuration
+     * uses the following format:
+     * <pre>
+     *   &lt;SearchIndex class="..."&gt;
+     *     &lt;param name="..." value="..."&gt;
+     *     ...
+     *     &lt;FileSystem ...&gt;
+     *   &lt;/Search&gt;
+     * </pre>
+     * <p>
+     * Both the <code>SearchIndex</code> and <code>FileSystem</code>
+     * elements are {@link #parseBeanConfig(Element,String) bean configuration}
+     * elements. If the search implementation class is not given, then
+     * a default implementation is used.
+     *
+     * @param element search configuration element
+     * @return search configuration
+     * @throws ConfigurationException if the configuration is broken
-    public SearchConfig parseSearchConfig(Element config) throws RepositoryException {
+    private SearchConfig parseSearchConfig(Element element)
+            throws ConfigurationException {
+        // Search implementation class
+        String className = element.getAttributeValue(CLASS_ATTRIBUTE);
+        if (className == null) {
+            className = DEFAULT_QUERY_HANDLER;
+        }
+
+        // Search parameters
+        Properties parameters = parseParameters(element);
+
+        // File system implementation
+        BeanConfig fsc = parseBeanConfig(element, FILE_SYSTEM_ELEMENT);
+
+        return new SearchConfig(className, parameters, createFileSystem(fsc));
+    }
+
+    /**
+     * Parses versioning configuration. Versioning configuration uses the
+     * following format:
+     * <pre>
+     *   &lt;Versioning rootPath="..."&gt;
+     *     &lt;FileSystem ...&gt;
+     *     &lt;PersistenceManager ...&gt;
+     *   &lt;/Versioning&gt;
+     * </pre>
+     * <p>
+     * Both the <code>FileSystem</code> and <code>PersistenceManager</code>
+     * elements are {@link #parseBeanConfig(Element,String) bean configuration}
+     * elements. In addition to the bean parameter values,
+     * {@link #replaceVariables(String) variable replacement} is performed
+     * also on the versioning root path attribute.
+     *
+     * @param element versioning configuration element
+     * @return versioning configuration
+     * @throws ConfigurationException if the configuration is broken
+     */
+    private VersioningConfig parseVersioningConfig(Element element)
+            throws ConfigurationException {
+        // Versioning home directory
+        String home = element.getAttributeValue(ROOTPATH_ATTRIBUTE);
+        if (home == null) {
+            throw new ConfigurationException("Versioning root path not set.");
+        }
+
+        // File system implementation
+        BeanConfig fsc = parseBeanConfig(element, FILE_SYSTEM_ELEMENT);
+
+        // Persistence manager implementation
+        BeanConfig pmc = parseBeanConfig(element, PERSISTENCE_MANAGER_ELEMENT);
+
+        return new VersioningConfig(
+                replaceVariables(home), createFileSystem(fsc), pmc);
+    }
+
+    /**
+     * Instantiates and initializes the file system implementation class
+     * configured by the given bean configuration object.
+     *
+     * @param config file system configuration
+     * @return initialized file system implementation
+     * @throws ConfigurationException if the file system could not be created
+     */
+    private FileSystem createFileSystem(BeanConfig config)
+            throws ConfigurationException {
-            // create FileSystem
-            BeanConfig fsc = parseBeanConfig(config, FILE_SYSTEM_ELEMENT);
-            FileSystem fs = (FileSystem) fsc.newInstance();
-            fs.init();
-
-            // handler class name
-            String handlerClassName = config.getAttributeValue(CLASS_ATTRIBUTE,
-                    DEFAULT_QUERY_HANDLER);
-
-            // gather params
-            Properties params = parseParameters(config);
-
-            return new SearchConfig(fs, handlerClassName, params);
-        } catch (FileSystemException ex) {
-            throw new RepositoryException(ex);
-        } catch (ClassNotFoundException ex) {
-            throw new RepositoryException(ex);
-        } catch (InstantiationException ex) {
-            throw new RepositoryException(ex);
-        } catch (IllegalAccessException ex) {
-            throw new RepositoryException(ex);
-        } catch (ClassCastException ex) {
-            throw new RepositoryException(ex);
+            FileSystem filesystem = (FileSystem) config.newInstance();
+            filesystem.init();
+            return filesystem;
+        } catch (ClassNotFoundException e) {
+            throw new ConfigurationException(
+                    "File system implementation class not found.", e);
+        } catch (InstantiationException e) {
+            throw new ConfigurationException(
+                    "File system implementation can not be instantiated.", e);
+        } catch (IllegalAccessException e) {
+            throw new ConfigurationException(
+                    "File system implementation class is protected.", e);
+        } catch (ClassCastException e) {
+            throw new ConfigurationException(
+                    "Invalid file system implementation class.", e);
+        } catch (FileSystemException e) {
+            throw new ConfigurationException(
+                    "File system initialization failure.", e);
-     * Creates a new <code>VersioningConfig</code>.
-     * @param config the config root element for this <code>VersioningConfig</code>.
-     * @param vars map of variable values.
-     * @throws RepositoryException if an error occurs while creating the
-     *  <code>SearchConfig</code>.
+     * Parses a named bean configuration from the given element.
+     * Bean configuration uses the following format:
+     * <pre>
+     *   &lt;BeanName class="..."&gt;
+     *     &lt;param name="..." value="..."/&gt;
+     *     ...
+     *   &lt;/BeanName&gt;
+     * </pre>
+     * <p>
+     * The returned bean configuration object contains the configured
+     * class name and configuration parameters. Variable replacement
+     * is performed on the parameter values.
+     *
+     * @param parent parent element
+     * @param name name of the bean configuration element
+     * @return bean configuration,
+     * @throws ConfigurationException if the configuration element does not
+     *                                exist or is broken
-    public VersioningConfig parseVersioningConfig(Element config) throws RepositoryException {
-        try {
-            // home dir
-            File homeDir = new File(replaceVariables(config.getAttributeValue(ROOTPATH_ATTRIBUTE)));
-
-            // create FileSystem
-            BeanConfig fsc = parseBeanConfig(config, FILE_SYSTEM_ELEMENT);
-            FileSystem fs = (FileSystem) fsc.newInstance();
-            fs.init();
-
-            // persistence manager config
-            BeanConfig pmc = parseBeanConfig(config, PERSISTENCE_MANAGER_ELEMENT);
-
-            return new VersioningConfig(homeDir, fs, pmc);
-        } catch (FileSystemException ex) {
-            throw new RepositoryException(ex);
-        } catch (ClassNotFoundException ex) {
-            throw new RepositoryException(ex);
-        } catch (InstantiationException ex) {
-            throw new RepositoryException(ex);
-        } catch (IllegalAccessException ex) {
-            throw new RepositoryException(ex);
-        } catch (ClassCastException ex) {
-            throw new RepositoryException(ex);
-        }
-    }
-
-    public BeanConfig parseBeanConfig(Element parent, String name)
-            throws RepositoryException {
+    private BeanConfig parseBeanConfig(Element parent, String name)
+            throws ConfigurationException {
+        // Bean configuration element
-        if (element != null) {
-            String className = element.getAttributeValue(CLASS_ATTRIBUTE);
-            Properties properties = parseParameters(element);
-            return new BeanConfig(className, properties);
-        } else {
-            throw new IllegalArgumentException(name);
-            // return null;
+        if (element == null) {
+            throw new ConfigurationException(
+                    "Configuration element not found: " + name);
+
+        // Bean implementation class
+        String className = element.getAttributeValue(CLASS_ATTRIBUTE);
+        if (className == null) {
+            throw new ConfigurationException(
+                    "Class attribute not set: " + name);
+        }
+
+        // Bean properties
+        Properties properties = parseParameters(element);
+
+        return new BeanConfig(className, properties);
-    public Properties parseParameters(Element element) {
+    /**
+     * Parses the configuration parameters of the given element.
+     * Parameters are stored as
+     * <code>&lt;param name="..." value="..."/&gt;</code>
+     * child elements. This method parses all param elements,
+     * performs {@link #replaceVariables(String) variable replacement}
+     * on parameter values, and returns the resulting name-value pairs.
+     *
+     * @param element configuration element
+     * @return configuration parameters
+     * @throws ConfigurationException if a <code>param</code> element does
+     *                                not contain the <code>name</code> and
+     *                                <code>value</code> attributes
+     */
+    private Properties parseParameters(Element element)
+            throws ConfigurationException {
+            if (name == null) {
+                throw new ConfigurationException("Parameter name not set.");
+            }
-            // replace variables in param value
+            if (value == null) {
+                throw new ConfigurationException("Parameter value not set.");
+            }
-     * Helper method that replaces in the given string any occurences of the keys
-     * in the specified map with their associated values.
+     * Performs variable replacement on the given string value.
+     * Each <code>${...}</code> sequence within the given value is replaced
+     * with the value of the named parser variable. The replacement is not
+     * done if the named variable does not exist.
-     * @param s
-     * @param vars
-     * @return
+     * @param value original value
+     * @return value after variable replacements
+     * @throws ConfigurationException if the replacement of a referenced
+     *                                variable is not found
-    public String replaceVariables(String value) {
-        String ovalue = value;
-        Enumeration e = variables.propertyNames();
-        while (e.hasMoreElements()) {
-            String varName = (String) e.nextElement();
-            String varValue = variables.getProperty(varName);
-            value = Text.replace(value, varName, varValue);
+    private String replaceVariables(String value)
+            throws ConfigurationException {
+        StringBuffer result = new StringBuffer();
+
+        // Value:
+        // +--+-+--------+-+-----------------+
+        // |  |p|-->     |q|-->              |
+        // +--+-+--------+-+-----------------+
+        int p = 0, q = value.indexOf("${");              // Find first ${
+        while (q != -1) {
+            result.append(value, p, q);                  // Text before ${
+            p = q;
+            q = value.indexOf("}", q + 2);               // Find }
+            if (q != -1) {
+                String variable = value.substring(p + 2, q);
+                String replacement = variables.getProperty(variable);
+                if (replacement == null) {
+                    throw new ConfigurationException(
+                            "Variable replacement not found: " + variable);
+                }
+                result.append(replacement);
+                p = q + 1;
+                q = value.indexOf("${", p);              // Find next ${
+            }
-        return value;
+        result.append(value, p, value.length());         // Trailing text
+
+        return result.toString();

MOV26 MOV26 INS26 MOV31 UPD40 UPD40 INS40 INS23 INS31 INS83 INS83 INS43 INS59 INS29 INS83 INS42 MOV44 UPD43 UPD83 MOV43 UPD42 UPD43 UPD83 MOV43 UPD42 UPD43 UPD83 MOV43 UPD42 UPD43 INS29 INS83 INS42 INS43 MOV8 INS29 UPD83 INS43 MOV29 UPD83 MOV83 MOV43 UPD42 MOV42 MOV44 UPD43 MOV43 INS8 INS42 INS42 INS32 UPD45 UPD45 UPD45 INS54 MOV65 MOV65 INS65 MOV65 INS65 INS65 UPD42 INS65 INS43 INS42 UPD42 MOV60 INS25 INS60 INS60 INS41 INS65 INS43 INS42 UPD42 MOV60 INS25 MOV60 INS60 INS41 INS65 MOV43 UPD42 INS65 INS65 INS65 INS65 INS65 UPD42 MOV42 MOV60 INS25 INS25 INS65 INS65 INS65 INS65 INS42 UPD65 UPD42 MOV60 INS60 INS61 MOV21 MOV41 INS42 INS42 INS57 INS8 INS12 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD42 INS66 INS66 UPD42 INS66 INS68 INS68 MOV60 MOV60 UPD66 MOV66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 UPD42 UPD66 UPD66 UPD42 UPD66 INS42 UPD43 INS27 INS8 MOV43 INS59 MOV43 INS59 INS14 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 MOV66 INS66 INS65 INS66 INS65 INS66 INS66 UPD42 UPD66 UPD66 UPD42 UPD66 INS42 MOV43 INS27 INS8 UPD43 MOV43 INS59 INS14 INS66 UPD66 UPD66 INS66 UPD42 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS27 INS8 INS27 INS8 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 UPD42 UPD66 UPD66 UPD42 UPD66 UPD66 UPD43 INS39 MOV59 MOV59 INS27 INS8 INS32 INS32 INS43 INS60 INS21 INS60 INS60 INS21 MOV41 INS44 INS8 INS68 INS66 INS68 INS66 INS42 INS69 INS69 INS42 INS69 INS60 MOV8 MOV44 INS68 UPD66 MOV66 UPD42 UPD42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS32 MOV43 INS42 INS42 INS32 INS68 UPD66 MOV66 INS68 INS66 UPD42 INS42 INS33 INS53 UPD42 INS42 INS32 INS42 INS32 MOV43 INS32 INS32 UPD42 MOV42 INS42 INS33 INS53 INS42 INS33 INS53 INS68 INS66 INS25 INS25 UPD42 UPD42 INS42 INS34 UPD42 INS32 INS42 INS38 INS21 INS21 INS21 INS25 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS43 INS59 MOV32 INS43 INS59 MOV43 INS59 INS32 INS32 INS43 INS42 INS53 INS42 INS69 INS69 INS42 INS69 INS43 MOV43 INS43 INS43 INS59 UPD27 MOV43 MOV43 UPD43 UPD42 UPD42 INS42 INS69 INS69 INS42 INS42 INS42 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS69 INS69 INS42 INS69 INS42 UPD42 UPD42 INS14 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 INS14 INS14 INS42 INS69 INS27 INS8 INS27 INS8 UPD43 UPD42 MOV42 UPD42 MOV42 INS45 INS34 INS32 INS7 INS7 INS27 INS8 UPD42 MOV42 INS42 INS42 INS42 INS14 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS43 MOV43 INS43 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV43 MOV43 INS42 INS42 MOV43 MOV43 MOV43 UPD43 MOV43 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS27 INS43 INS27 MOV43 INS42 INS33 INS53 INS42 INS33 INS53 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS38 INS60 INS60 INS25 INS21 INS21 INS21 INS43 INS42 INS43 INS42 MOV43 INS14 INS32 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD43 INS45 UPD42 UPD43 INS45 UPD42 UPD42 MOV43 UPD43 INS45 UPD42 UPD43 INS45 UPD42 UPD43 INS45 UPD42 UPD43 INS45 UPD42 UPD43 INS45 UPD42 INS42 INS45 INS42 INS42 INS45 INS42 INS14 INS14 INS42 INS42 INS45 INS27 INS34 MOV43 INS59 MOV43 INS59 INS27 INS8 INS32 INS7 INS7 MOV60 INS21 INS60 INS60 INS21 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS45 INS43 INS45 INS42 INS34 INS42 INS32 INS42 INS32 INS42 INS33 MOV53 INS42 INS42 INS42 INS42 INS27 INS42 INS32 MOV32 INS43 INS59 INS43 INS59 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS34 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 MOV14 INS42 INS42 INS14 INS42 INS42 INS32 INS32 UPD42 INS42 INS34 UPD43 INS27 INS43 INS43 INS14 INS32 INS42 INS42 INS42 INS42 UPD42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL32 DEL32 DEL29 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL14 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL32 DEL41 DEL8 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL12 DEL54 DEL66 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL14 DEL42 DEL44 DEL60 DEL60 DEL42 DEL32 DEL21 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL42 DEL42 DEL32 DEL7 DEL42 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL29 DEL83 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL8 DEL31