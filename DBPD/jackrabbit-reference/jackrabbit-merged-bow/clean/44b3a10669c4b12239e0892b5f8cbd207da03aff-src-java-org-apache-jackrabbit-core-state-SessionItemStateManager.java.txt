optimized performance of Item.save() if a large number of items 
were removed

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@202365 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.iterators.IteratorChain;
+import java.util.ArrayList;
+import java.util.List;
-
-        // collection of descendant transient states in attic:
+/*
+        // build ordered collection of descendant transient states in attic:
-        // we have to use a special attic-aware hierarchy manager
+        // use a special attic-aware hierarchy manager
-/*
-        TreeMap descendants = new TreeMap();
-        Iterator iter = transientStateMgr.getEntriesInAttic();
-        while (iter.hasNext()) {
-            ItemState state = (ItemState) iter.next();
-            int depth = getAncestorCount(state, parentId.getUUID());
-            if (depth >= 0) {
-                descendants.put(new ItemStateKey(state, depth), state);
+        return descendants.values().iterator();
+*/
+        // build ordered collection of descendant transient states in attic
+        // sorted by decreasing relative depth
+
+        // use a special attic-aware hierarchy manager
+        ZombieHierarchyManager zombieHierMgr =
+                new ZombieHierarchyManager(hierMgr.getRootNodeId().getUUID(),
+                        this,
+                        transientStateMgr.getAttic(),
+                        hierMgr.getNamespaceResolver());
+
+        // use an array of lists to group the descendants by relative depth;
+        // the depth is used as array index
+        List[] la = new List[10];
+        try {
+            Iterator iter = transientStateMgr.getEntriesInAttic();
+            while (iter.hasNext()) {
+                ItemState state = (ItemState) iter.next();
+                // determine relative depth: > 0 means it's a descendant
+                int depth = zombieHierMgr.getRelativeDepth(parentId, state.getId());
+                if (depth < 1) {
+                    // not a descendant
+                    continue;
+                }
+
+                // ensure capacity
+                if (depth > la.length) {
+                    List old[] = la;
+                    la = new List[depth + 10];
+                    System.arraycopy(old, 0, la, 0, old.length);
+                }
+
+                List list = la[depth - 1];
+                if (list == null) {
+                    list = new ArrayList();
+                    la[depth - 1] = list;
+                }
+                list.add(state);
+            }
+        } catch (RepositoryException re) {
+            log.warn("inconsistent hierarchy state", re);
+        }
+        // create an iterator over the collected descendants
+        // in decreasing depth order
+        IteratorChain resultIter = new IteratorChain();
+        for (int i = la.length - 1; i >= 0; i--) {
+            List list = la[i];
+            if (list != null) {
+                resultIter.addIterator(list.iterator());
-*/
-        return descendants.values().iterator();
+        return resultIter;
+

INS26 INS26 INS26 INS40 INS40 INS40 INS54 INS60 INS24 INS41 INS5 INS8 MOV12 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS85 UPD42 INS3 MOV60 INS61 UPD42 MOV42 INS42 INS14 INS39 INS59 INS42 INS34 INS42 INS60 INS25 UPD42 MOV42 INS5 INS34 MOV32 INS8 INS43 INS42 INS27 INS43 INS59 INS27 INS8 INS43 INS85 MOV60 MOV60 INS25 INS25 MOV60 INS25 MOV21 INS42 INS40 INS34 INS42 INS42 INS2 INS42 INS33 INS21 UPD42 MOV42 INS39 INS27 INS8 INS27 INS8 UPD43 INS27 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS18 INS42 INS40 INS60 INS21 INS21 UPD42 UPD42 INS2 INS42 INS33 INS21 INS21 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 MOV32 UPD43 MOV43 INS59 INS7 INS32 INS42 INS27 INS7 INS7 INS42 MOV42 UPD42 INS42 INS85 INS42 INS42 INS3 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS34 INS42 INS34 INS40 INS42 INS34 INS42 INS14 INS2 INS42 INS5 INS27 INS43 INS42 INS27 INS43 INS85 INS42 INS34 INS42 INS42 INS34 INS42 DEL43 DEL43 DEL42 DEL43 DEL14 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL61 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL32 DEL32 DEL41