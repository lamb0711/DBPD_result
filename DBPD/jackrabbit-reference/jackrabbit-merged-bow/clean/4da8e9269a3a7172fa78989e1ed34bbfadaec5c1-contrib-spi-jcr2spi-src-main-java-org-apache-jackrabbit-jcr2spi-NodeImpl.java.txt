work in progress

- operations: rename getAffectedIds to getAffectedStates
- operations: return ItemState params instead of ids whereever possible and
  let OperationVisitor deal with all kind of issues arising with SPI ids.
- AddNode/AddProperty operations: don't list state to be created as affected. Not required since operations are collected upon refresh/save, in which case a 'new' item can never be the starting point.
- transient move: let parent NodeState handle the move/renaming of child states
- transient reorder: let parent NodeState handle the reorder logic
- NodeState: remove unused methods and mark setParent private
- NodeImpl: protected getNodeId() no more used by subclasses in version package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431887 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.PropertyId;
-    public void orderBefore(String srcChildRelPath, String destChildRelPath) throws UnsupportedRepositoryOperationException, VersionException, ConstraintViolationException, ItemNotFoundException, LockException, RepositoryException {
+    public synchronized void orderBefore(String srcChildRelPath,
+                                         String destChildRelPath)
+        throws UnsupportedRepositoryOperationException, VersionException, ConstraintViolationException, ItemNotFoundException, LockException, RepositoryException {
-        NodeState nState = getNodeState();
-        Operation op = ReorderNodes.create(nState, srcName, beforeName);
+        Operation op = ReorderNodes.create(getNodeState(), srcName, beforeName);
-        PropertyId mixinPId = session.getIdFactory().createPropertyId(getNodeId(), QName.JCR_MIXINTYPES);
-        Operation op = SetMixin.create(mixinPId, allMixins);
+        Operation op = SetMixin.create(getNodeState(), allMixins);
-        PropertyId mixinPId = session.getIdFactory().createPropertyId(getNodeId(), QName.JCR_MIXINTYPES);
-        Operation op = SetMixin.create(mixinPId, mixins);
+        Operation op = SetMixin.create(getNodeState(), mixins);
-            NodeId versionId = ((VersionImpl)version).getNodeId();
-            session.getVersionManager().resolveMergeConflict(getNodeId(), versionId, done);
+            NodeState versionState = ((NodeImpl)version).getNodeState();
+            session.getVersionManager().resolveMergeConflict(getNodeState(), versionState, done);
-        Operation op = Update.create(getNodeId(), srcWorkspaceName);
+        Operation op = Update.create(getNodeState(), srcWorkspaceName);
-        Collection failedIds = session.getVersionManager().merge(getNodeId(), srcWorkspace, bestEffort);
+        Collection failedIds = session.getVersionManager().merge(getNodeState(), srcWorkspace, bestEffort);
-            NodeId versionId = ((VersionImpl)version).getNodeId();
+            NodeId versionId = ((NodeImpl)version).getNodeId();
-        PropertyId newPId = session.getIdFactory().createPropertyId(getNodeId(), qName);
-        Operation op = AddProperty.create(newPId, type, def, qvs);
+        Operation op = AddProperty.create(getNodeState(), qName, type, def, qvs);
-     * Return the id of this <code>Node</code>. Protected for usage within
-     * <code>VersionImpl</code> and <code>VersionHistoryImpl</code>.
+     * Return the id of this <code>Node</code>.
-    protected NodeId getNodeId() {
+    private NodeId getNodeId() {

INS83 UPD83 UPD66 MOV32 INS32 INS32 MOV43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 DEL40 DEL26 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL66