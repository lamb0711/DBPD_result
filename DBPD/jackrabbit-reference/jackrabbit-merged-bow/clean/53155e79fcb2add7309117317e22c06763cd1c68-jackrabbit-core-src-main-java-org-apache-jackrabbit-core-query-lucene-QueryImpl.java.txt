JCR-2076: JSR 283: Joins
- columns

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@781369 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
+import java.util.Map;
+import java.util.LinkedHashMap;
+import javax.jcr.query.qom.QueryObjectModelFactory;
+import org.apache.jackrabbit.spi.commons.query.qom.ColumnImpl;
-                getSelectProperties(), orderProperties, ascSpecs,
+                getColumns(), orderProperties, ascSpecs,
-     * Returns the select properties for this query.
+     * Returns the columns for this query.
-     * @return array of select property names.
+     * @return array of columns.
-    protected Name[] getSelectProperties() throws RepositoryException {
-        // get select properties
-        List selectProps = new ArrayList();
-        selectProps.addAll(Arrays.asList(root.getSelectProperties()));
-        if (selectProps.size() == 0) {
+    protected ColumnImpl[] getColumns() throws RepositoryException {
+        QueryObjectModelFactory qomFactory = session.getWorkspace().getQueryManager().getQOMFactory();
+        // get columns
+        Map<Name, ColumnImpl> columns = new LinkedHashMap<Name, ColumnImpl>();
+        for (Name name : root.getSelectProperties()) {
+            String pn = session.getJCRName(name);
+            ColumnImpl col = (ColumnImpl) qomFactory.column(
+                    session.getJCRName(DEFAULT_SELECTOR_NAME), pn, pn);
+            columns.put(name, col);
+        }
+        if (columns.size() == 0) {
-            for (int i = 0; i < propDefs.length; i++) {
-                PropertyDefinitionImpl propDef = (PropertyDefinitionImpl) propDefs[i];
+            for (PropertyDefinition pd : propDefs) {
+                PropertyDefinitionImpl propDef = (PropertyDefinitionImpl) pd;
-                    selectProps.add(propDef.getQName());
+                    columns.put(propDef.getQName(), columnForName(propDef.getQName()));
-        if (!selectProps.contains(NameConstants.JCR_PATH)) {
-            selectProps.add(NameConstants.JCR_PATH);
+        if (!columns.containsKey(NameConstants.JCR_PATH)) {
+            columns.put(NameConstants.JCR_PATH, columnForName(NameConstants.JCR_PATH));
-        if (!selectProps.contains(NameConstants.JCR_SCORE)) {
-            selectProps.add(NameConstants.JCR_SCORE);
+        if (!columns.containsKey(NameConstants.JCR_SCORE)) {
+            columns.put(NameConstants.JCR_SCORE, columnForName(NameConstants.JCR_SCORE));
-        return (Name[]) selectProps.toArray(new Name[selectProps.size()]);
+        return columns.values().toArray(new ColumnImpl[columns.size()]);
+    /**
+     * Returns a column for the given property name and the default selector
+     * name.
+     *
+     * @param propertyName the name of the property as well as the column.
+     * @return a column.
+     * @throws RepositoryException if an error occurs while creating the column.
+     */
+    protected ColumnImpl columnForName(Name propertyName) throws RepositoryException {
+        QueryObjectModelFactory qomFactory = session.getWorkspace().getQueryManager().getQOMFactory();
+        String name = session.getJCRName(propertyName);
+        return (ColumnImpl) qomFactory.column(
+                session.getJCRName(DEFAULT_SELECTOR_NAME), name, name);
+    }

MOV26 INS26 UPD40 UPD40 UPD40 INS40 INS31 UPD5 UPD42 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS43 INS60 INS70 INS65 INS65 INS65 INS65 INS42 MOV43 INS42 INS42 INS60 INS60 INS41 UPD66 UPD66 INS42 INS43 INS59 INS74 INS44 MOV32 INS8 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS43 INS59 INS43 INS59 INS11 INS42 INS42 INS32 INS43 INS43 INS43 UPD42 MOV43 INS42 INS60 INS60 MOV21 INS70 INS32 MOV42 MOV3 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS32 UPD42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS74 INS43 INS59 INS43 INS59 UPD42 INS44 INS42 MOV8 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD5 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 MOV43 INS43 INS42 INS42 INS32 INS42 INS42 INS11 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 UPD42 UPD42 INS32 UPD42 UPD42 INS32 INS43 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 MOV43 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS32 INS42 INS42 MOV32 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 DEL43 DEL43 DEL32 DEL42 DEL42 DEL2 DEL32 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL85 DEL5 DEL32 DEL11