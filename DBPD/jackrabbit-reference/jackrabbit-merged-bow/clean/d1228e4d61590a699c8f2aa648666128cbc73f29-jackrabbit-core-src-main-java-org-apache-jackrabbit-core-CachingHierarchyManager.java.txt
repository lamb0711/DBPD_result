JCR-1276: A Property and a Node Can Have the Same Name

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@605622 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.commons.name.PathMap;
+import org.apache.jackrabbit.spi.commons.name.PathMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Set;
-import java.util.HashMap;
-import java.io.PrintStream;
-
+import java.io.PrintStream;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
-    protected ItemId resolvePath(Path path, ItemState state, int next)
-            throws ItemStateException {
+    protected void beforeResolvePath(Path path, ItemState state, int next) {
-                cache((NodeState) state, parentPath);
+                cache(((NodeState) state).getNodeId(), parentPath);
-        return super.resolvePath(path, state, next);
-                cache((NodeState) state, builder.getPath());
+                cache(((NodeState) state).getNodeId(), builder.getPath());
-
+        ItemId id;
-            return super.resolvePath(path);
+            id = super.resolvePath(path);
+        } else {
+            LRUEntry entry = (LRUEntry) element.get();
+            if (element.hasPath(path)) {
+                entry.touch();
+                return entry.getId();
+            }
+            // first try to resolve node path, then property path
+            id = super.resolvePath(path, entry.getId(), element.getDepth() + 1, true);
+            if (id == null) {
+                id = super.resolvePath(path, entry.getId(), element.getDepth() + 1, false);
+            }
-        LRUEntry entry = (LRUEntry) element.get();
-        if (element.hasPath(path)) {
-            entry.touch();
-            return entry.getId();
+
+        if (id != null && id.denotesNode() && !isCached(id)) {
+            // cache result
+            cache((NodeId) id, path);
-        return super.resolvePath(path, entry.getId(), element.getDepth() + 1);
+
+        return id;
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p/>
+     * Check the path indicated inside our cache first.
+     */
+    public NodeId resolveNodePath(Path path) throws RepositoryException {
+        ItemId id = resolvePath(path);
+        return id != null && id.denotesNode() ? (NodeId) id : null;
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p/>
+     * Check the path indicated inside our cache first.
+     */
+    public PropertyId resolvePropertyPath(Path path) throws RepositoryException {
+        // Run base class shortcut and sanity checks first
+        if (path.denotesRoot()) {
+            return null;
+        } else if (!path.isCanonical()) {
+            String msg = "path is not canonical";
+            log.debug(msg);
+            throw new RepositoryException(msg);
+        }
+
+        // check cache for parent path
+        PathMap.Element element = map(path.getAncestor(1));
+        if (element == null) {
+            return super.resolvePropertyPath(path);
+        } else {
+            LRUEntry entry = (LRUEntry) element.get();
+            return (PropertyId) super.resolvePath(path, entry.getId(), element.getDepth() + 1, false);
+        }
-     * Cache an item in the hierarchy given its id and path. Adds a listener
-     * for this item state to get notified about changes.
+     * Cache an item in the hierarchy given its id and path.
-     * @param state node state
-     * @param path  path to item
+     * @param id   node id
+     * @param path path to item
-    private void cache(NodeState state, Path path) {
-        NodeId id = state.getNodeId();
-
+    private void cache(NodeId id, Path path) {

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS31 INS31 INS39 UPD42 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS60 INS25 INS25 INS65 INS42 INS43 INS42 INS42 INS60 INS41 INS65 INS42 INS43 INS42 INS42 INS25 INS60 INS25 MOV43 INS42 MOV43 INS59 MOV27 MOV8 INS8 INS27 INS8 INS42 INS65 INS66 INS66 INS42 INS43 INS59 INS16 INS65 INS66 INS66 INS42 INS32 INS8 INS25 INS43 INS59 INS27 INS8 INS8 UPD66 UPD42 UPD66 UPD66 INS42 INS21 MOV60 MOV25 INS21 MOV25 INS27 INS38 INS21 INS42 INS42 INS32 INS27 INS11 INS33 INS42 INS42 INS41 INS38 INS8 INS40 INS42 INS32 INS42 INS33 INS41 INS60 INS41 INS7 INS7 INS27 INS8 INS27 INS32 INS32 INS32 INS42 INS42 INS27 INS32 INS43 INS42 INS33 INS32 INS60 INS21 INS53 INS42 INS32 INS48 INS43 INS59 INS11 INS42 MOV48 INS42 MOV48 INS42 INS33 INS21 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS11 INS43 INS48 INS32 INS9 INS7 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS27 INS9 INS42 MOV32 INS42 INS32 INS42 INS48 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS36 UPD42 INS36 INS42 INS42 INS42 INS32 INS27 INS9 INS42 INS42 MOV11 MOV11 INS42 INS42 INS32 INS34 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL48 DEL41 DEL41 DEL66 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60