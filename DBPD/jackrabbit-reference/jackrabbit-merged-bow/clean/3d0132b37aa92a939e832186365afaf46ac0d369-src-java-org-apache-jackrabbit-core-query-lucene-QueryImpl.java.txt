Update to spec 0.16.4:
- Selecting jcr:score and jcr:path is not required anymore. jcr:path is always added to the select list and jcr:score appears as the last column if there is a contains function in the query statement.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161751 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.OrQueryNode;
+import org.apache.jackrabbit.core.query.AndQueryNode;
+import org.apache.jackrabbit.core.query.NotQueryNode;
+import org.apache.jackrabbit.core.query.TextsearchQueryNode;
+import org.apache.jackrabbit.core.query.PathQueryNode;
+import org.apache.jackrabbit.core.query.QueryConstants;
+import java.util.Arrays;
-        QName[] selectProps = root.getSelectProperties();
-        if (selectProps.length == 0) {
+        List selectProps = new ArrayList();
+        selectProps.addAll(Arrays.asList(root.getSelectProperties()));
+        if (selectProps.size() == 0) {
-            List tmp = new ArrayList();
-                    tmp.add(((PropertyDefinitionImpl) propDefs[i]).getQName());
+                    selectProps.add(((PropertyDefinitionImpl) propDefs[i]).getQName());
-            selectProps = (QName[]) tmp.toArray(new QName[tmp.size()]);
+        }
+
+        // add jcr:path
+        selectProps.add(QueryConstants.JCR_PATH);
+
+        // add jcr:score if necessary
+        if(hasTextsearchNode(root.getLocationNode())) {
+            selectProps.add(QueryConstants.JCR_SCORE);
-                selectProps,
+                (QName[]) selectProps.toArray(new QName[selectProps.size()]),
+
+    //-----------------------------< internal >---------------------------------
+
+    /**
+     * Returns <code>true</code> if <code>node</code> has a
+     * {@link org.apache.jackrabbit.core.query.TextsearchQueryNode} somewhere
+     * down the query tree; <code>false</code> otherwise.
+     * @param node the path node.
+     * @return <code>true</code> if the query tree contains a textsearch
+     *  node, <code>false</code> otherwise.
+     */
+    private static boolean hasTextsearchNode(PathQueryNode node) {
+        final boolean[] textsearch = new boolean[1];
+        node.acceptOperands(new DefaultQueryNodeVisitor() {
+            public Object visit(OrQueryNode node, Object data) {
+                return node.acceptOperands(this, data);
+            }
+
+            public Object visit(AndQueryNode node, Object data) {
+                return node.acceptOperands(this, data);
+            }
+
+            public Object visit(NotQueryNode node, Object data) {
+                return node.acceptOperands(this, data);
+            }
+
+            public Object visit(TextsearchQueryNode node, Object data) {
+                textsearch[0] = true;
+                return data;
+            }
+
+            public Object visit(LocationStepQueryNode node, Object data) {
+                return node.acceptOperands(this, data);
+            }
+        }, null);
+        return textsearch[0];
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 MOV60 INS21 INS21 INS25 INS65 INS65 INS65 INS43 INS42 INS60 INS21 INS41 INS32 INS32 INS32 INS8 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS83 INS5 INS59 INS32 INS2 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS40 INS42 INS32 INS21 MOV11 INS40 INS39 INS85 INS42 INS3 INS42 INS42 INS14 INS33 INS42 INS34 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 MOV5 INS5 INS34 INS43 INS1 INS42 INS42 INS40 UPD42 INS39 INS85 INS42 INS31 INS31 INS31 INS31 INS31 MOV5 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 UPD42 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS2 INS9 INS42 INS42 INS52 INS42 INS42 INS34 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL40 DEL42 DEL7 DEL21 DEL42