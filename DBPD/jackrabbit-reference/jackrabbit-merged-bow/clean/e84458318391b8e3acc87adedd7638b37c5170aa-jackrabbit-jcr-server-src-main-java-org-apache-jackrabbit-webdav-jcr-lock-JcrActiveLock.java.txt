JCR-1590 JSR 283: Locking

- getSecondsRemaining is negative if lock is expired or released
- getLockToken always returns null if lock is sessionscoped

JCR-2004 Update SPI locking to match JCR 2.0

- extend spi/LockInfo.java
- add JCR 2.0 variant of RepositoryService#lock that takes timeoutHint and ownerHint
- adjust jcr2spi
- adjust spi implementation(s)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@753244 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.JcrConstants;
-import javax.jcr.Node;
-    private final boolean sessionScoped;
-        this (lock, lock.isSessionScoped());
-    }
-
-    /**
-     * Create a new <code>ActiveLock</code> object with type '{@link Type#WRITE write}'
-     * and scope '{@link Scope#EXCLUSIVE exclusive}'.
-     *
-     * @param lock
-     */
-    public JcrActiveLock(Lock lock, boolean sessionScoped) {
-        this.sessionScoped = sessionScoped;
+     * <p/>
+     * In case of session-scoped JCR 2.0 locks, the token is never exposed even
+     * if the current session is lock holder. In order to cope with DAV specific
+     * requirements and the fulfill the requirement stated above, the node's
+     * identifier is subsequently exposed as DAV-token.
-        return lock.getLockToken();
+        String token = lock.getLockToken();
+        if (token == null && lock.isSessionScoped()
+                && lock instanceof org.apache.jackrabbit.api.jsr283.lock.Lock
+                && ((org.apache.jackrabbit.api.jsr283.lock.Lock)lock).isLockOwningSession()) {
+            // special handling for session scoped locks that are owned by the
+            // current session but never expose their token with jsr 283.
+            try {
+                token = ((org.apache.jackrabbit.api.jsr283.Node)lock.getNode()).getIdentifier();
+            } catch (RepositoryException e) {
+                // should never get here
+                log.warn("Unexpected error while retrieving node identifier for building a DAV specific lock token.",e.getMessage());
+            }
+        }
+        // default behaviour: just return the token exposed by the lock.
+        return token;
-        boolean isDeep = true;
-        Node n = lock.getNode();
-        try {
-            // find out about deepness. if node does not hold the lock its deep anyway
-            if (n.holdsLock() && n.hasProperty(JcrConstants.JCR_LOCKISDEEP)) {
-                isDeep = n.getProperty(JcrConstants.JCR_LOCKISDEEP).getBoolean();
-            }
-        } catch (RepositoryException e) {
-            // ignore and keep default depth settings
-        }
-        return isDeep;
+        return lock.isDeep();
-        return (sessionScoped) ? ItemResourceConstants.EXCLUSIVE_SESSION : Scope.EXCLUSIVE;
+        return (lock.isSessionScoped()) ? ItemResourceConstants.EXCLUSIVE_SESSION : Scope.EXCLUSIVE;

INS31 INS31 MOV29 MOV83 MOV43 MOV42 INS8 MOV29 INS83 INS39 INS42 INS8 MOV60 INS25 INS41 MOV41 INS66 INS66 INS66 INS66 INS66 UPD43 MOV27 INS8 INS42 INS32 UPD42 UPD42 MOV32 INS27 INS54 INS42 INS42 INS27 INS62 INS36 UPD42 INS8 MOV12 INS32 INS27 MOV32 INS42 INS43 INS11 MOV21 INS42 INS42 INS42 INS33 INS40 INS43 INS42 INS21 INS40 UPD42 INS32 INS36 UPD42 INS42 INS42 INS45 INS32 INS11 INS42 INS42 INS43 MOV32 INS40 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL42 DEL42 DEL67 DEL66 DEL65 DEL66 DEL66 DEL42 DEL42 DEL67 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL17 DEL8 DEL31 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL42 DEL83 DEL39 DEL42 DEL39 DEL42 DEL9 DEL59 DEL60 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL42