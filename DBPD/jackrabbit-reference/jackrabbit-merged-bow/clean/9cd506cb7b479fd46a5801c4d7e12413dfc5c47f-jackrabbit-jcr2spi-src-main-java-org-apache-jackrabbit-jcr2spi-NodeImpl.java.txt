JCR-2003: JCR2SPI / SPI: Add support for JCR 2.0

- Node.getReferences(String)
- Node.getWeakReferences()
- Node.getWeakReferences(String)

JCR-1418: Redesign NodeInfo.getReferences()

- deprecated getReferences on NodeInfo
- added method to RepositoryService as suggested by marcel but including support for the variants in JCR 2.0
   > weakrefs vs refs
   > name-filter

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@779555 13f79535-47bb-0310-9956-ffa450edef68

-        checkStatus();
-        List refs = Arrays.asList(getNodeState().getNodeReferences());
-        if (name != null) {
-            // remove property ids that don't match the given name
-            Name qName = getQName(name);
-            refs = new ArrayList(refs);
-            for (Iterator iter = refs.iterator(); iter.hasNext();) {
-                PropertyId propId = (PropertyId) iter.next();
-                if (!propId.getName().equals(qName)) {
-                    refs.remove(propId);
-                }
-            }
-        } // else: name == null -> return all references
-
-        // create an property iterator for all or the matching property ids
-        // according to the specified name.
-        return new LazyItemIterator(getItemManager(), session.getHierarchyManager(), refs.iterator());
+        return getReferences(name, false);
-        // TODO: implementation missing
-        throw new UnsupportedRepositoryOperationException("JCR-1104");
+        return getReferences(name, true);
+    /**
+     * @return the primary node type name.
+     */
+    private Name getPrimaryNodeTypeName() {
+        return getNodeState().getNodeTypeName();
+    }
+
+    /**
+     * 
+     * @param name
+     * @param weak
+     * @return
+     * @throws RepositoryException
+     */
+    private LazyItemIterator getReferences(String name, boolean weak) throws RepositoryException {
+        checkStatus();
+        Name propName = (name == null) ? null : getQName(name);
+        Iterator<PropertyId> itr = getNodeState().getNodeReferences(propName, weak);
+        return new LazyItemIterator(getItemManager(), session.getHierarchyManager(), itr);
+    }
+
+    /**
+     *
+     * @param mixinName
+     * @return
+     * @throws NoSuchNodeTypeException
+     * @throws ConstraintViolationException
+     */
-
-    /**
-     * @return the primary node type name.
-     */
-    private Name getPrimaryNodeTypeName() {
-        return getNodeState().getNodeTypeName();
-    }

MOV31 MOV31 INS31 MOV29 INS83 MOV43 INS42 INS44 INS43 INS8 INS29 UPD83 INS43 INS44 INS29 INS43 INS42 INS42 INS41 INS41 INS65 INS65 INS65 INS65 INS42 INS39 INS42 MOV60 INS65 INS65 INS65 INS65 INS42 INS32 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 UPD42 INS16 MOV43 MOV43 UPD42 MOV32 INS42 INS36 INS33 MOV32 UPD42 MOV42 INS42 INS42 INS27 INS42 INS33 DEL42 DEL43 DEL45 DEL14 DEL53 DEL43 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL32