JCR-2511: Value#getBinary() and #getStream() return internal representation for type PATH and NAME

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@918915 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
-        return qvalue.getBinary();
+        // JCR-2511 Value#getBinary() and #getStream() return internal representation for type PATH and NAME
+        if (getType() == PropertyType.NAME || getType() == PropertyType.PATH) {
+            // qualified name/path value needs to be resolved,
+            // delegate conversion to getString() method
+            try {
+                final byte[] value = getString().getBytes("UTF-8");
+                return new Binary() {
+                    public int read(byte[] b, long position) {
+                        if (position >= value.length) {
+                            return -1;
+                        } else {
+                            int p = (int) position;
+                            int n = Math.min(b.length, value.length - p);
+                            System.arraycopy(value, p, b, 0, n);
+                            return n;
+                        }
+                    }
+                    public InputStream getStream() {
+                        return new ByteArrayInputStream(value);
+                    }
+                    public long getSize() {
+                        return value.length;
+                    }
+                    public void dispose() {
+                    }
+                };
+            } catch (UnsupportedEncodingException ex) {
+                throw new RepositoryException("UTF-8 is not supported", ex);
+            }
+        } else {
+            return qvalue.getBinary();
+        }
-                // needs namespace mapping
+                // qualified name/path value needs to be resolved
-                    String l_s = getType() == PropertyType.NAME
-                      ? resolver.getJCRName(qvalue.getName())
-                      : resolver.getJCRPath(qvalue.getPath());
-                    stream = new ByteArrayInputStream(l_s.getBytes("UTF-8"));
+                    stream = new ByteArrayInputStream(getString().getBytes("UTF-8"));
-                    throw new RepositoryException(ex);
+                    throw new RepositoryException("UTF-8 is not supported", ex);
-            // needs formatting
+            // qualified name value needs to be resolved
-            // needs formatting
+            // qualified path value needs to be resolved

INS26 INS40 INS31 INS31 MOV29 MOV83 MOV43 MOV42 MOV43 INS8 MOV29 INS83 MOV43 INS42 MOV43 MOV43 INS8 INS25 INS25 MOV41 INS27 INS8 MOV8 MOV27 INS8 INS27 INS27 INS54 INS25 INS32 INS40 INS32 INS40 INS8 MOV12 MOV27 INS8 MOV8 INS42 INS42 INS60 INS41 INS54 INS83 INS5 INS59 INS14 INS8 INS12 INS39 INS85 INS42 INS32 INS43 INS1 MOV21 INS44 INS8 INS32 INS42 INS45 UPD42 MOV42 INS31 INS31 INS31 INS31 INS45 INS43 INS42 INS53 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS14 INS5 INS42 INS39 INS42 INS25 INS42 INS41 INS41 INS43 INS43 INS45 INS42 INS39 INS85 INS27 INS8 INS8 INS14 INS40 INS42 INS32 INS42 INS42 UPD40 MOV40 INS41 INS60 INS60 INS21 INS41 MOV43 INS42 UPD42 MOV42 INS38 INS39 INS59 INS39 INS59 INS32 INS42 INS34 INS42 INS11 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS42 INS39 INS42 INS42 INS42 INS40 INS27 INS40 INS42 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL16 DEL59 DEL60 DEL8 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31