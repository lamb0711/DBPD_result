- implement an ItemStateFactory (ISF) for transient space
- extends ISF with transient specific methods to create new item states
- remove ItemStateManager interface from ChangeLog again

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429615 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.IdKeyMap;
-import org.apache.jackrabbit.jcr2spi.DefaultIdKeyMap;
-import org.apache.jackrabbit.spi.ItemId;
-import org.apache.jackrabbit.spi.NodeId;
+import java.util.Set;
+import java.util.LinkedHashSet;
-// DIFF JR: implements ItemStateManager instead of separate 'get' 'has'
-public class ChangeLog implements ItemStateManager {
+public class ChangeLog {
-    // TODO: TO-BE-FIXED. With SPI_ItemId simple map cannot be used any more
-    protected final IdKeyMap addedStates = new DefaultIdKeyMap(); // JR: new LinkedMap();
+    protected final Set addedStates = new LinkedHashSet();
-    // TODO: TO-BE-FIXED. With SPI_ItemId simple map cannot be used any more
-    protected final IdKeyMap modifiedStates = new DefaultIdKeyMap(); // JR: new LinkedMap();
+    protected final Set modifiedStates = new LinkedHashSet();
-    // TODO: TO-BE-FIXED. With SPI_ItemId simple map cannot be used any more
-    protected final IdKeyMap deletedStates = new DefaultIdKeyMap(); // JR: new LinkedMap();
+    protected final Set deletedStates = new LinkedHashSet();
-    // TODO: TO-BE-FIXED. With SPI_ItemId simple map cannot be used any more
-    protected final IdKeyMap modifiedRefs = new DefaultIdKeyMap(); // JR: new LinkedMap();
+    protected final Set modifiedRefs = new LinkedHashSet();
-        addedStates.put(state.getId(), state);
+        addedStates.add(state);
-        if (!addedStates.containsKey(state.getId())) {
+        if (!addedStates.contains(state)) {
-            modifiedStates.put(state.getId(), state);
+            modifiedStates.add(state);
-        if (addedStates.remove(state.getId()) == null) {
+        if (addedStates.remove(state)) {
-            modifiedStates.remove(state.getId());
-            deletedStates.put(state.getId(), state);
+            modifiedStates.remove(state);
+            deletedStates.add(state);
-        modifiedRefs.put(refs.getId(), refs);
+        modifiedRefs.add(refs);
-        return addedStates.values().iterator();
+        return addedStates.iterator();
-        return modifiedStates.values().iterator();
+        return modifiedStates.iterator();
-        return deletedStates.values().iterator();
+        return deletedStates.iterator();
-        return modifiedRefs.values().iterator();
+        return modifiedRefs.iterator();
-    //---------------------------------------------------< ItemStateManager >---
-    /**
-     * Return an item state given its id. Returns <code>null</code>
-     * if the item state is neither in the added nor in the modified
-     * section. Throws a <code>NoSuchItemStateException</code> if
-     * the item state is in the deleted section.
-     *
-     * @return item state or <code>null</code>
-     * @throws NoSuchItemStateException if the item has been deleted
-     * @see ItemStateManager#getItemState(ItemId)
-     */
-    public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {
-        ItemState state = (ItemState) addedStates.get(id);
-        if (state == null) {
-            state = (ItemState) modifiedStates.get(id);
-            if (state == null) {
-                if (deletedStates.containsKey(id)) {
-                    throw new NoSuchItemStateException("State has been marked destroyed: " + id);
-                }
-            }
-        }
-        return state;
-    }
-
-    /**
-     * Return a flag indicating whether a given item state exists.
-     *
-     * @return <code>true</code> if item state exists within this
-     *         log; <code>false</code> otherwise
-     * @see ItemStateManager#hasItemState(ItemId)
-     */
-    public boolean hasItemState(ItemId id) {
-        return addedStates.containsKey(id) || modifiedStates.containsKey(id);
-    }
-
-    /**
-     * Return a node references object given its id. Returns
-     * <code>null</code> if the node reference is not in the modified
-     * section.
-     *
-     * @return node references or <code>null</code>
-     * @see ItemStateManager#getNodeReferences(NodeId)
-     */
-    public NodeReferences getNodeReferences(NodeId id) throws NoSuchItemStateException, ItemStateException {
-        return (NodeReferences) modifiedRefs.get(id);
-    }
-
-    /**
-     * Returns <code>false</code> if the node reference is not in the modified
-     * section.
-     *
-     * @return false if no references are present in this changelog for the
-     * given id.
-     * @see ItemStateManager#hasNodeReferences(NodeId)
-     */
-    public boolean hasNodeReferences(NodeId id) {
-        return modifiedRefs.get(id) != null;
-    }
-

MOV26 MOV26 UPD40 UPD40 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL33 DEL27 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31