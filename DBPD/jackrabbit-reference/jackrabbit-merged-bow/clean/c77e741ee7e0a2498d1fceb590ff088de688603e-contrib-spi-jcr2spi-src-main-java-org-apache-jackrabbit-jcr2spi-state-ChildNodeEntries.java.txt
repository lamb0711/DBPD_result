work in progress

- ChildNodeEntry.getIndex() not required within ChildNodeEntries.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@483015 13f79535-47bb-0310-9956-ffa450edef68

-            ChildNodeEntry cne = (ChildNodeEntry) it.next();
-            add(cne.getName(), cne.getUUID(), cne.getIndex());
+            ChildNodeEntry baseCne = (ChildNodeEntry) it.next();
+            ChildNodeEntry cne = ChildNodeReference.create(nodeState, baseCne.getName(), baseCne.getUUID(), nodeState.isf, nodeState.idFactory);
+            add(cne);
+     * Returns true, if this ChildNodeEntries contains a entry that matches
+     * the given name and either index or uuid:<br>
+     * If <code>uuid</code> is not <code>null</code> the given index is
+     * ignored since it is not required to identify a child node entry.
+     * Otherwise the given index is used.
+        if (uuid == null) {
+            return contains(name, index);
+        } else {
+            return contains(name, uuid);
+        }
+    }
+
+    /**
+     *
+     * @param name
+     * @param index
+     * @return
+     */
+    private boolean contains(QName name, int index) {
+        if (!nameMap.containsKey(name) || index < Path.INDEX_DEFAULT) {
+            // no matching child node entry
+            return false;
+        }
+        Object o = nameMap.get(name);
+        if (o instanceof List) {
+            // SNS
+            int listIndex = index - 1;
+            return listIndex < ((List) o).size();
+        } else {
+            // single child node with this name -> matches only if request
+            // index equals the default-index
+            return index == Path.INDEX_DEFAULT;
+        }
+    }
+
+    /**
+     *
+     * @param name
+     * @param uuid
+     * @return
+     */
+    private boolean contains(QName name, String uuid) {
+        if (uuid == null) {
+            throw new IllegalArgumentException();
+        }
-                if (uuid == null) {
-                    if (cne.getIndex() == index) {
-                        return true;
-                    }
-                } else if (uuid.equals(cne.getUUID())) {
+                if (uuid.equals(cne.getUUID())) {
-            // no matching entry found
-            return false;
-            if (uuid == null) {
-                return cne.getUUID() == null;
-            } else {
-                return uuid.equals(cne.getUUID());
-            }
+            return uuid.equals(cne.getUUID());
+        // no matching entry found
+        return false;

INS31 INS31 INS29 INS39 INS42 INS44 MOV44 INS44 INS8 MOV29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS65 INS65 INS65 MOV65 INS65 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS39 INS42 INS25 INS60 INS25 INS65 INS65 INS65 INS25 MOV41 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 MOV27 INS8 INS8 INS42 INS27 INS8 INS43 INS59 INS62 INS8 INS8 INS42 INS42 MOV27 INS8 MOV8 INS60 INS21 INS41 INS41 INS38 INS27 INS41 INS42 INS42 INS32 INS42 INS43 INS60 INS41 INS41 INS53 MOV60 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS40 INS9 INS42 INS42 INS42 INS42 INS39 INS59 INS27 INS27 INS14 UPD42 INS42 INS42 INS32 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS40 INS43 MOV25 INS42 INS42 INS42 MOV32 MOV32 INS40 INS40 INS42 INS34 INS36 INS42 INS42 UPD42 UPD42 INS11 INS43 INS42 INS42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL25 DEL8