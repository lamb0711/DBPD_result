JCR-3296 Indexing ignored file types creates some garbage

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1327116 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.tika.sax.BodyContentHandler;
+import org.apache.tika.sax.WriteOutContentHandler;
-import org.xml.sax.SAXException;
-import org.xml.sax.helpers.DefaultHandler;
-     * The exception used to forcibly terminate the extraction process
-     * when the maximum field length is reached.
-     */
-    private static final SAXException STOP =
-        new SAXException("max field length reached");
-
-    /**
-        executor.execute(
-                new ParsingTask(parser, value, metadata, maxFieldLength));
+        executor.execute(new ParsingTask(parser, value, metadata,
+                maxFieldLength) {
+            public void setExtractedText(String value) {
+                LazyTextExtractorField.this.setExtractedText(value);
+            }
+        });
-    private class ParsingTask extends DefaultHandler implements LowPriorityTask {
+    abstract static class ParsingTask extends BodyContentHandler implements LowPriorityTask {
-        private final int maxFieldLength;
+        private final WriteOutContentHandler writeOutContentHandler;
-        private final StringBuilder builder = new StringBuilder();
+        public ParsingTask(Parser parser, InternalValue value,
+                Metadata metadata, int maxFieldLength) {
+            this(new WriteOutContentHandler(maxFieldLength), parser, value,
+                    metadata);
+        }
-        public ParsingTask(
-                Parser parser, InternalValue value, Metadata metadata,
-                int maxFieldLength) {
+        private ParsingTask(WriteOutContentHandler writeOutContentHandler,
+                Parser parser, InternalValue value, Metadata metadata) {
+            super(writeOutContentHandler);
+            this.writeOutContentHandler = writeOutContentHandler;
-            this.maxFieldLength = maxFieldLength;
-                if (t != STOP) {
+                if (!writeOutContentHandler.isWriteLimitReached(t)) {
-                    builder.replace(0, builder.length(), "TextExtractionError");
+                    setExtractedText("TextExtractionError");
+                    return;
-            setExtractedText(builder.toString());
+            setExtractedText(writeOutContentHandler.toString());
-        @Override
-        public void characters(char[] ch, int start, int length)
-                throws SAXException {
-            builder.append(
-                    ch, start,
-                    Math.min(length, maxFieldLength - builder.length()));
-            if (builder.length() >= maxFieldLength) {
-                throw STOP;
-            }
-        }
-
-        @Override
-        public void ignorableWhitespace(char[] ch, int start, int length)
-                throws SAXException {
-            characters(ch, start, length);
-        }
-
+        protected abstract void setExtractedText(String value);
-

MOV26 MOV26 UPD40 UPD40 MOV31 UPD83 INS83 UPD43 UPD42 UPD43 UPD42 INS44 INS44 INS44 MOV44 INS8 UPD83 INS44 MOV21 UPD83 INS83 INS42 INS44 UPD42 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS43 INS42 INS46 INS43 INS42 UPD42 MOV42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS1 INS43 INS42 UPD42 INS31 INS42 UPD42 UPD42 INS83 INS39 INS42 INS44 INS8 INS38 INS43 INS42 INS21 INS32 INS41 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS42 UPD42 INS42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL43 DEL14 DEL42 DEL78 DEL39 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL27 DEL42 DEL34 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8