JCR-2313 - Improvements to user management (2) [work in progress] 
-> see issue for details

JCR-2333 - ItemImpl#validateTransientItems: Incomplete validation of mandatory child item
-> patch2

JCR-2195 - Provide possibility to import protected items using Session/Workspace import functionality
-> deal with reference properties
-> make import handlers configurable
-> add userimporter

JCR-171 - Make the extraction of Session UserIDs from Subjects configurable
-> extend SecurityManagerConfig and retrieve uid from principal name if configured
     class is present in the subject

JCR-2351 - Make Authorizable.setProperty more noisy in case of failure

JCR-2331 - Configurable DefaultPolicy replacing Initialization within the ACProvider
-> initial steps. remove code that relies on the default-init
-> add TODOs

JCR-2291 - Issues with compiled permissions of ACL provider
-> remove code searching for DENY-read entries in case of default initialization of ac entries

and here and there minor improvement, usage of generics etc....

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@828791 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import java.util.ArrayList;
+     * Element specifying the class of principals used to retrieve the userID
+     * in the 'class' attribute.
+     */
+    private static final String USERID_CLASS = "UserIdClass";
+
+    /**
+     * Name of the optional XmlImport config entry inside the workspace configuration.
+     */
+    private static final String IMPORT_ELEMENT = "Import";
+    private static final String IMPORT_PNI_ELEMENT = "ProtectedNodeImporter";
+    private static final String IMPORT_PPI_ELEMENT = "ProtectedPropertyImporter";
+
+    /**
-            BeanConfig umc = null;
+            UserManagerConfig umc = null;
-                umc = parseBeanConfig(smElement, USER_MANAGER_ELEMENT);
+                umc = new UserManagerConfig(parseBeanConfig(smElement, USER_MANAGER_ELEMENT));
-            return new SecurityManagerConfig(bc, wspAttr, wac, umc);
+
+            BeanConfig uidcc = null;
+            element = getElement(smElement, USERID_CLASS, false);
+            if (element != null) {
+                uidcc = parseBeanConfig(element);
+            }
+
+            return new SecurityManagerConfig(bc, wspAttr, wac, umc, uidcc);
-     * @see #parseSearchConfig(Element)
-                getAttribute(root, CLUSTERED_ATTRIBUTE, "true")).booleanValue();
+                getAttribute(root, CLUSTERED_ATTRIBUTE, "true"));
+        // optinal config for import handling
+        ImportConfig importConfig = tmpParser.parseImportConfig(root);
+
-                ismLockingFactory, workspaceSecurityConfig);
+                ismLockingFactory, workspaceSecurityConfig, importConfig);
+     * Read the optional XmlImport Element of Workspace's configuration. It uses
+     * the following format:
+     * <pre>
+     *   &lt;XmlImport&gt;
+     *     &lt;ProtectedNodeImporter class="..." (optional)&gt;
+     *     &lt;ProtectedNodeImporter class="..." (optional)&gt;
+     *     ...
+     *     &lt;ProtectedPropertyImporter class="..." (optional)&gt;
+     *   &lt;/XmlImport&gt;
+     * </pre>
+     *
+     * @param parent Workspace-Root-Element
+     * @return a new <code>XmlImportConfig</code>
+     * @throws ConfigurationException
+     */
+    public ImportConfig parseImportConfig(Element parent) throws ConfigurationException {
+        List<BeanConfig> protectedNodeImporters = new ArrayList();
+        List<BeanConfig> protectedPropertyImporters = new ArrayList();
+
+        Element element = getElement(parent, IMPORT_ELEMENT, false);
+        if (element != null) {
+            NodeList children = element.getChildNodes();
+            for (int i = 0; i < children.getLength(); i++) {
+                Node child = children.item(i);
+                if (child.getNodeType() == Node.ELEMENT_NODE) {
+                    if (IMPORT_PNI_ELEMENT.equals(child.getNodeName())) {
+                        String className = getAttribute((Element) child, CLASS_ATTRIBUTE);
+                        BeanConfig bc = new BeanConfig(className, parseParameters((Element) child));
+                        bc.setValidate(false);
+                        protectedNodeImporters.add(bc);
+                    } else if (IMPORT_PPI_ELEMENT.equals(child.getNodeName())) {
+                        String className = getAttribute((Element) child, CLASS_ATTRIBUTE);
+                        BeanConfig bc = new BeanConfig(className, parseParameters((Element) child));
+                        bc.setValidate(false);
+                        protectedPropertyImporters.add(bc);
+                    } // else: some other entry -> ignore.
+                }
+            }
+        }
+        return new ImportConfig(protectedNodeImporters, protectedPropertyImporters);
+    }
+
+    /**

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS60 INS65 INS65 INS65 INS65 INS42 MOV43 INS42 INS42 INS60 INS60 INS60 INS25 INS41 INS66 INS66 INS66 INS43 INS59 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS74 INS59 INS74 INS59 INS43 INS59 INS27 INS8 INS14 INS60 INS21 INS25 MOV32 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS60 INS24 INS43 INS42 INS42 INS43 MOV43 INS59 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS9 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS42 INS42 INS42 INS9 INS7 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS27 INS8 INS14 INS42 INS32 INS42 INS42 INS32 INS32 INS40 INS25 INS43 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS25 INS42 INS42 INS42 INS32 INS60 INS60 INS21 INS21 INS32 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS60 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS11 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS11 INS42 INS11 INS42 INS43 INS42 INS32 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS11 INS42 INS42 INS43 INS42 INS42 DEL42 DEL69 DEL68 DEL65 DEL42 DEL32