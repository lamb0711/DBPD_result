Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyManager;
+import org.apache.jackrabbit.jcr2spi.hierarchy.NodeEntry;
+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyEntry;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
-import org.apache.jackrabbit.jcr2spi.state.NoSuchItemStateException;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateException;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateFactory;
-    private final HierarchyManager hierarchyManager;
-
-        itemStateManager = createSessionItemStateManager(workspace.getUpdatableItemStateManager());
-        hierarchyManager = createHierarchyManager();
-        itemManager = createItemManager();
+        itemStateManager = createSessionItemStateManager(workspace.getUpdatableItemStateManager(), workspace.getItemStateFactory());
+        itemManager = createItemManager(getHierarchyManager());
-        try {
-            ItemState state = getItemStateManager().getRootState();
-            return (Node) itemManager.getItem(state);
-        } catch (ItemStateException e) {
-            String msg = "Failed to retrieve root node.";
-            log.error(msg, e);
-            throw new RepositoryException(msg, e);
-        }
+
+        NodeEntry re = getHierarchyManager().getRootEntry();
+        return (Node) itemManager.getItem(re);
-            ItemState state = getItemStateManager().getItemState(id);
-            Item item = getItemManager().getItem(state);
+            HierarchyEntry hierarchyEntry = getHierarchyManager().getHierarchyEntry(id);
+            Item item = getItemManager().getItem(hierarchyEntry);
-        } catch (AccessDeniedException ade) {
+        } catch (PathNotFoundException e) {
-        } catch (NoSuchItemStateException e) {
+        } catch (AccessDeniedException e) {
-        } catch (ItemStateException e) {
-            String msg = "Failed to retrieve item state of item " + id;
-            log.error(msg, e);
-            throw new RepositoryException(msg, e);
-            log.warn("Unable to remove lock token '" +lt+ "' from this session.", e);
+            log.warn("Unable to remove lock token '" +lt+ "' from this session. (" + e.getMessage() + ")");
-    protected SessionItemStateManager createSessionItemStateManager(UpdatableItemStateManager workspaceStateManager) throws RepositoryException {
-        return new SessionItemStateManager(workspaceStateManager, getIdFactory(), getValidator(), getQValueFactory());
+    protected SessionItemStateManager createSessionItemStateManager(UpdatableItemStateManager workspaceStateManager, ItemStateFactory isf) throws RepositoryException {
+        return new SessionItemStateManager(workspaceStateManager, getValidator(), getQValueFactory(), isf);
-
-    protected HierarchyManager createHierarchyManager() {
-        return new HierarchyManagerImpl(getItemStateManager(), getNamespaceResolver());
-    }
-
-    protected ItemManager createItemManager() {
-        return new ItemManagerImpl(getHierarchyManager(), this);
+    
+    protected ItemManager createItemManager(HierarchyManager hierarchyManager) {
+        return new ItemManagerImpl(hierarchyManager, this);
+    /**
+     * @see ManagerProvider#getNamespaceResolver()
+     */
+    /**
+     * @see ManagerProvider#getHierarchyManager()
+     */
-        return hierarchyManager;
+        return workspace.getHierarchyManager();
-    public ItemStateManager getItemStateManager() {
-        return itemStateManager;
-    }
-
+    /**
+     * @see ManagerProvider#getLockManager()
+     */
+     * @see ManagerProvider#getAccessManager()
+     * @see ManagerProvider#getVersionManager()

MOV26 MOV26 MOV26 INS26 UPD40 UPD40 INS40 UPD40 INS31 INS31 INS8 INS44 MOV83 MOV43 UPD42 MOV42 INS44 MOV8 INS29 INS29 MOV83 MOV43 UPD42 MOV42 MOV8 INS29 MOV21 MOV60 MOV41 MOV12 INS43 INS42 MOV43 INS42 INS65 INS65 INS65 INS65 INS65 UPD43 INS42 INS68 INS68 INS32 INS68 INS68 INS68 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV32 UPD42 UPD42 UPD43 UPD43 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 INS32 INS45 INS42 INS42 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL31 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL31