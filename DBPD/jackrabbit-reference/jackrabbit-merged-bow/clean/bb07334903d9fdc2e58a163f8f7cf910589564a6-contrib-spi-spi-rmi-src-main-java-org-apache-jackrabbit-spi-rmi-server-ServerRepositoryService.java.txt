- observation support in spi-rmi

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@512985 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.rmi.common.EventImpl;
+import org.apache.jackrabbit.spi.rmi.common.EventBundleImpl;
+import org.apache.jackrabbit.spi.rmi.common.EventFilterImpl;
+import org.apache.jackrabbit.spi.EventIterator;
+import org.apache.jackrabbit.spi.Event;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.Arrays;
-            return service.createEventFilter(getSessionInfo(sessionInfo),
-                    eventTypes, absPath, isDeep, uuid, nodeTypeName, noLocal);
+            // some implementations may rely on createEventFilter being called
+            service.createEventFilter(getSessionInfo(sessionInfo), eventTypes,
+                    absPath, isDeep, uuid, nodeTypeName, noLocal);
+            Set ntNames = null;
+            if (nodeTypeName != null) {
+                ntNames = new HashSet(Arrays.asList(nodeTypeName));
+            }
+            return new EventFilterImpl(eventTypes, absPath, isDeep, uuid, ntNames, noLocal);
-            EventBundle[] bundles = service.getEvents(
-                    getSessionInfo(sessionInfo), timeout, filters);
-            // TODO
-            return new EventBundle[0];
+            SessionInfo sInfo = getSessionInfo(sessionInfo);
+            // create local event filter instances
+            filters = createLocalEventFilters(sInfo, filters);
+            EventBundle[] bundles = service.getEvents(sInfo, timeout, filters);
+            EventBundle[] serBundles = new EventBundle[bundles.length];
+            for (int i = 0; i < bundles.length; i++) {
+                List events = new ArrayList();
+                for (EventIterator it = bundles[i].getEvents(); it.hasNext(); ) {
+                    Event e = it.nextEvent();
+                    ItemId id;
+                    if (e.getItemId().denotesNode()) {
+                        id = createSerializableNodeId((NodeId) e.getItemId());
+                    } else {
+                        id = createSerializablePropertyId((PropertyId) e.getItemId());
+                    }
+                    Event serEvent = new EventImpl(e.getType(),
+                            e.getQPath(), id,
+                            createSerializableNodeId(e.getParentId()),
+                            e.getPrimaryNodeTypeName(),
+                            e.getMixinTypeNames(), e.getUserID());
+                    events.add(serEvent);
+                }
+                serBundles[i] = new EventBundleImpl(events,
+                        bundles[i].isLocal(), bundles[i].getBundleId());
+            }
+            return serBundles;
+
+    /**
+     * Creates filter instances created by the underlying repository service.
+     *
+     * @param sInfo   the session info.
+     * @param filters the event filters created by this server repository
+     *                service.
+     * @return array of filter instances created by the underlying repository
+     *         service.
+     * @throws RepositoryException if an error occurs.
+     */
+    private EventFilter[] createLocalEventFilters(SessionInfo sInfo,
+                                                  EventFilter[] filters)
+            throws RepositoryException {
+        if (filters == null) {
+            return null;
+        }
+        for (int i = 0; i < filters.length; i++) {
+            if (filters[i] instanceof EventFilterImpl) {
+                EventFilterImpl e = (EventFilterImpl) filters[i];
+                Set nodeTypeNames = e.getNodeTypeNames();
+                QName[] ntNames = null;
+                if (nodeTypeNames != null) {
+                    ntNames = (QName[]) nodeTypeNames.toArray(
+                            new QName[nodeTypeNames.size()]);
+                }
+                filters[i] = service.createEventFilter(sInfo,
+                        e.getEventTypes(), e.getAbsPath(), e.isDeep(),
+                        e.getUUIDs(), ntNames, e.getNoLocal());
+            } else {
+                throw new RepositoryException("Unknown EventFilter implementation: " +
+                        filters[i].getClass().getName());
+            }
+        }
+        return filters;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS5 INS42 INS42 INS25 INS24 INS41 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS85 INS27 INS8 INS58 INS27 INS37 INS8 INS42 INS21 INS60 INS25 INS21 INS60 INS60 INS24 INS41 INS42 INS42 INS33 INS41 INS39 INS59 INS42 INS40 INS42 INS25 MOV32 INS43 INS59 INS27 INS8 INS14 INS43 INS7 MOV5 INS59 MOV5 INS59 INS58 INS27 INS37 INS8 INS42 INS33 INS42 INS34 INS62 INS8 INS8 INS42 INS42 INS33 INS42 INS33 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS32 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS24 INS21 INS2 INS43 INS60 INS60 INS60 INS25 INS21 INS53 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS43 INS59 INS58 INS32 INS8 INS7 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS5 INS59 INS27 INS8 INS7 INS14 INS42 INS14 INS43 INS85 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS60 INS21 INS2 INS14 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS85 INS42 INS33 INS42 INS33 INS21 INS2 INS32 INS43 INS27 INS43 INS32 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS32 INS42 INS42 INS43 INS42 INS32 INS32 INS43 INS2 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS2 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS43 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS5 INS32 INS2 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS3 INS42 INS42 INS42 INS11 INS42 INS11 INS42 INS42 INS42 INS5 INS32 INS43 INS32 INS43 INS32 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL3 DEL41