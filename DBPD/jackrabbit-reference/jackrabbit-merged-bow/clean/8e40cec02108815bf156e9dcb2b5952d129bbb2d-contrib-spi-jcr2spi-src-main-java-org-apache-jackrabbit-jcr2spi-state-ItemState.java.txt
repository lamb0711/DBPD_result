div

- get rid of rootId stored with ISM, HierarchyManagers etc.
- remove corresponding method with WorkspaceManager and WorkspaceImpl

jcr2spi/state/ItemState

- move parent field from Node/PropertyState to ItemState
- move idFactory field from NodeState to ItemState
- let PropertyState build its id instead of calling parentstate method.
- minor reordering of status related methods
- remove modCount and its usage

jcr2spi/state/ItemStateManager

- add method getRootNode()

jcr2spi/security/AccessManager

- replace ItemId by ItemState

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431352 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.IdFactory;
-     * a modification counter used to prevent concurrent modifications
-     */
-    private short modCount;
-
-    /**
+    // TODO: check again...
+    /**
+     *  IdFactory used to build id of the states
+     */
+    final IdFactory idFactory;
+
+    // DIFF JR
+    /**
+     * The parent <code>NodeState</code> or <code>null</code> if this
+     * instance represents the root node.
+     */
+    NodeState parent;
+
-    protected transient ItemState overlayedState;
+    transient ItemState overlayedState;
+     * @param parent
-    protected ItemState(int initialStatus, boolean isTransient) {
+    protected ItemState(NodeState parent, int initialStatus, boolean isTransient,
+                        IdFactory idFactory) {
-        modCount = 0;
+        this.parent = parent;
+        this.idFactory = idFactory;
-    protected ItemState(ItemState overlayedState, int initialStatus, boolean isTransient) {
+    protected ItemState(ItemState overlayedState, NodeState parent, int initialStatus,
+                        boolean isTransient, IdFactory idFactory) {
+        this.parent = parent;
+        this.idFactory = idFactory;
-    
+
-            // sync modification count
-            modCount = overlayedState.getModCount();
+
+    /**
+     * Discards this instance, i.e. renders it 'invalid'.
+     */
+    protected void discard() {
+        if (status != STATUS_UNDEFINED) {
+            // notify listeners
+            notifyStateDiscarded();
+            // reset status
+            setStatus(STATUS_UNDEFINED);
+        }
+    }
+
-    public void notifyStateUpdated() {
+    protected void notifyStateUpdated() {
-    public void notifyStateDestroyed() {
+    protected void notifyStateDestroyed() {
-                String msg = "Cannot mark item state with status " +
-                        status + " modified.";
+                String msg = "Cannot mark item state with status " + status + " modified.";
-    //-------------------------------------------------------< public methods >
+    //--------------------< public READ methods and package private Setters >---
-     * Determines whether this item state has become stale.
-     * @return true if this item state has become stale, false otherwise.
-     */
-    public boolean isStale() {
-        if (isTransient) {
-            return status == STATUS_STALE_MODIFIED
-                || status == STATUS_STALE_DESTROYED;
-        } else {
-            return overlayedState != null
-                && modCount != overlayedState.getModCount();
-        }
-    }
-
-    /**
-    public abstract NodeState getParent();
+    public NodeState getParent() {
+        return parent;
+    }
-     * TODO: this method should be at least protected. the outside should not
-     * TODO: control the status of an item state
-    public void setStatus(int newStatus) {
+    void setStatus(int newStatus) {
-     * Returns the modification count.
-     *
-     * @return the modification count.
-     */
-    public short getModCount() {
-        return modCount;
-    }
-
-    /**
-     * Sets the modification count.
-     *
-     * @param modCount the modification count of this item
-     */
-    public void setModCount(short modCount) {
-        this.modCount = modCount;
-    }
-
-    /**
-     * Updates the modification count.
-     */
-    synchronized void touch() {
-        modCount++;
-    }
-
-    /**
-     * Discards this instance, i.e. renders it 'invalid'.
-     */
-    public void discard() {
-        if (status != STATUS_UNDEFINED) {
-            // notify listeners
-            notifyStateDiscarded();
-            // reset status
-            setStatus(STATUS_UNDEFINED);
-        }
-    }
-
-    /**

INS26 MOV23 MOV31 INS40 INS23 UPD83 INS43 INS29 INS43 INS59 INS44 INS44 INS44 INS44 UPD83 UPD83 UPD83 INS8 INS42 UPD42 INS65 INS42 INS42 INS65 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS21 INS21 INS41 UPD66 UPD66 MOV66 UPD66 MOV66 INS42 INS42 INS42 INS7 INS42 INS42 INS7 INS7 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 DEL39 DEL83 DEL42 DEL34 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL27 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL27 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL66 DEL66 DEL83 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL37 DEL21 DEL8 DEL31