JCR-1225: ReadOnlyIndexReaders are re-created on every access

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@597706 13f79535-47bb-0310-9956-ffa450edef68

+     * The most recent read-only reader if there is any.
+     */
+    private ReadOnlyIndexReader readOnlyReader;
+
+    /**
-    protected synchronized IndexReader getIndexReader() throws IOException {
+    protected synchronized CommittableIndexReader getIndexReader() throws IOException {
-        IndexReader modifiableReader = getIndexReader();
+        CommittableIndexReader modifiableReader = getIndexReader();
+        long modCount = modifiableReader.getModificationCount();
+        if (readOnlyReader != null) {
+            if (readOnlyReader.getDeletedDocsVersion() == modCount) {
+                // reader up-to-date
+                readOnlyReader.incrementRefCount();
+                return readOnlyReader;
+            } else {
+                // reader outdated
+                if (readOnlyReader.getRefCount() == 1) {
+                    // not in use, except by this index
+                    // update the reader
+                    readOnlyReader.updateDeletedDocs(modifiableReader);
+                    readOnlyReader.incrementRefCount();
+                    return readOnlyReader;
+                } else {
+                    // cannot update reader, it is still in use
+                    // need to create a new instance
+                    readOnlyReader.close();
+                    readOnlyReader = null;
+                }
+            }
+        }
+        // if we get here there is no up-to-date read-only reader
-        return new ReadOnlyIndexReader(sharedReader, deleted);
+        readOnlyReader = new ReadOnlyIndexReader(sharedReader, deleted, modCount);
+        readOnlyReader.incrementRefCount();
+        return readOnlyReader;
+        if (readOnlyReader != null) {
+            try {
+                readOnlyReader.close();
+            } catch (IOException e) {
+                log.warn("Exception closing index reader: " + e.toString());
+            }
+        }
+        // also close the read-only reader
+        if (readOnlyReader != null) {
+            readOnlyReader.close();
+            readOnlyReader = null;
+        }

INS23 INS29 INS83 INS43 INS59 UPD43 INS65 INS42 INS42 UPD42 INS60 INS25 INS21 INS21 INS41 INS25 INS25 INS66 UPD43 INS39 INS59 INS27 INS8 INS7 INS32 INS42 INS27 INS8 INS27 INS8 UPD42 INS42 INS32 INS42 INS33 INS25 INS42 INS14 INS42 INS42 INS42 INS33 INS54 INS42 INS33 INS21 INS21 INS42 INS42 INS27 INS8 INS8 MOV43 MOV42 MOV42 INS42 INS8 INS12 INS32 INS7 INS32 INS42 INS21 INS41 INS25 INS21 INS44 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS27 INS8 INS8 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS34 INS21 INS21 INS41 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS7 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS45 INS32 INS42 INS42 DEL14 DEL41