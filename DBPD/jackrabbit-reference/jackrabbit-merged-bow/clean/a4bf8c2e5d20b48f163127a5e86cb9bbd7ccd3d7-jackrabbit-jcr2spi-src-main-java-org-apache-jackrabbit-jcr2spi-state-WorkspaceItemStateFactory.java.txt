JCR-2528: spi2dav: ItemInfoCache causes failure of (Workspace)RestoreTest#testRestoreWithUUIDConflict and variants 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@919107 13f79535-47bb-0310-9956-ffa450edef68

-            // Get item info from cache and use it if up to date
-            long generation = entry.getGeneration();
-            if (isUpToDate(cached, generation)) {
+            if (isUpToDate(cached, entry)) {
-                info = first(infos, cache, generation);
+                info = first(infos, cache, entry.getGeneration());
-                if (isOutdated(cached, generation)) {
+                if (isOutdated(cached, entry)) {
-            if (isUpToDate(cached, entry.getGeneration())) {
+            if (isUpToDate(cached, entry)) {
-                // Now we can check wheter the item info from the cache is up to date
-                long generation = entry.getGeneration();
-                if (isOutdated(cached, generation)) {
+                if (isOutdated(cached, entry)) {
-                    cache.put(info, generation);
+                    cache.put(info, entry.getGeneration());
-        if (isUpToDate(cached, parentEntry.getGeneration())) {
+        if (isUpToDate(cached, parentEntry)) {
+     * @throws RepositoryException
-    private static boolean isUpToDate(Entry<?> cacheEntry, long generation) {
-        return cacheEntry != null && cacheEntry.generation >= generation;
+    private static boolean isUpToDate(Entry<?> cacheEntry, HierarchyEntry entry) throws RepositoryException {
+        return cacheEntry != null &&
+            cacheEntry.generation >= entry.getGeneration() &&
+            isMatchingPath(cacheEntry.info, entry);
+     * @throws RepositoryException
-    private static boolean isOutdated(Entry<?> cacheEntry, long generation) {
-        return cacheEntry != null && cacheEntry.generation < generation;
+    private static boolean isOutdated(Entry<?> cacheEntry, HierarchyEntry entry) throws RepositoryException {
+        return cacheEntry != null &&
+            (cacheEntry.generation < entry.getGeneration() ||
+            !isMatchingPath(cacheEntry.info, entry));
+    }
+
+    private static boolean isMatchingPath(ItemInfo info, HierarchyEntry entry) throws RepositoryException {
+        Path infoPath = info.getPath();
+        Path wspPath = entry.getWorkspacePath();
+        return infoPath.equals(wspPath);
-        Path infoPath = info.getPath();
-        Path wspPath = entry.getWorkspacePath();
-        if (!infoPath.equals(wspPath)) {
+        if (!isMatchingPath(info, entry)) {
-            throw new ItemNotFoundException("HierarchyEntry " + infoPath + " does not match ItemInfo " + wspPath);
+            throw new ItemNotFoundException("HierarchyEntry " + entry.getWorkspacePath() + " does not match ItemInfo " + info.getPath());

INS31 INS43 INS43 UPD39 UPD42 MOV29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS43 INS42 INS42 INS65 INS43 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS42 INS25 INS42 INS42 INS27 INS42 INS42 MOV32 INS42 INS42 INS38 INS8 MOV42 INS27 INS32 INS36 INS32 INS53 MOV27 MOV27 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS14 UPD42 MOV42 INS32 MOV27 INS38 MOV43 INS27 INS42 INS42 INS32 INS32 INS45 INS32 INS45 INS32 UPD42 UPD42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL39 DEL42 DEL42 DEL27 DEL39 DEL42 DEL42 DEL38 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25