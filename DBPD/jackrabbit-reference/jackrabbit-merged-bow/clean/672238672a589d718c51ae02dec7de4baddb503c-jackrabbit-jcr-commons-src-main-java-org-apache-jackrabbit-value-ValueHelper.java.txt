JCR-1609:  new Property Types (WIP...)
JCR-2061: References and Dereferencing of Property Values (WIP...)



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@776757 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.URI;
-     * "6.2.6 Property Type Conversion" in the JSR 170 specification.
+     * "3.6.4 Property Type Conversion" in the JSR 283 specification.
+            case PropertyType.DECIMAL:
+                // convert to DECIMAL
+                try {
+                    val = factory.createValue(srcValue.getDecimal());
+                } catch (RepositoryException re) {
+                    throw new ValueFormatException("conversion failed: "
+                            + PropertyType.nameFromValue(srcType) + " to "
+                            + PropertyType.nameFromValue(targetType), re);
+                }
+                break;
+
+                    case PropertyType.URI:
+                        URI uri;
+                        try {
+                            uri = URI.create(srcValue.getString());
+                        } catch (RepositoryException re) {
+                            // should never happen
+                            throw new ValueFormatException("failed to convert source value to PATH value",
+                                    re);
+                        }
+                        if (uri.isAbsolute()) {
+                            // uri contains scheme...
+                            throw new ValueFormatException("failed to convert URI value to PATH value");
+                        }
+                        String p = uri.getPath();
+
+                        if (p.startsWith("./")) {
+                            p = p.substring(2);
+                        }
+
+                        val = factory.createValue(p, targetType);
+                        break;
+
+                    case PropertyType.DECIMAL:
+                    case PropertyType.WEAKREFERENCE:
+                    case PropertyType.DECIMAL:
+                    case PropertyType.WEAKREFERENCE:
+                    case PropertyType.WEAKREFERENCE:
+                    case PropertyType.DECIMAL:
+            case PropertyType.WEAKREFERENCE:
+                // convert to WEAKREFERENCE
+                switch (srcType) {
+                    case PropertyType.WEAKREFERENCE:
+                        // no conversion needed, return original value
+                        // (redundant code, just here for the sake of clarity)
+                        return srcValue;
+
+                    case PropertyType.BINARY:
+                    case PropertyType.STRING:
+                    case PropertyType.REFERENCE:
+                        // try conversion via string
+                        String uuid;
+                        try {
+                            // get string value
+                            uuid = srcValue.getString();
+                        } catch (RepositoryException re) {
+                            // should never happen
+                            throw new ValueFormatException("failed to convert source value to WEAKREFERENCE value", re);
+                        }
+                        val = factory.createValue(uuid, targetType);
+                        break;
+
+                    case PropertyType.BOOLEAN:
+                    case PropertyType.DATE:
+                    case PropertyType.DOUBLE:
+                    case PropertyType.LONG:
+                    case PropertyType.DECIMAL:
+                    case PropertyType.PATH:
+                    case PropertyType.NAME:
+                        throw new ValueFormatException("conversion failed: "
+                                + PropertyType.nameFromValue(srcType) + " to "
+                                + PropertyType.nameFromValue(targetType));
+
+                    default:
+                        throw new IllegalArgumentException("not a valid type constant: " + srcType);
+                }
+                break;
+
+            case PropertyType.URI:
+                // convert to URI
+                switch (srcType) {
+                    case PropertyType.URI:
+                        // no conversion needed, return original value
+                        // (redundant code, just here for the sake of clarity)
+                        return srcValue;
+
+                    case PropertyType.BINARY:
+                    case PropertyType.STRING:
+                        // try conversion via string
+                        String uuid;
+                        try {
+                            // get string value
+                            uuid = srcValue.getString();
+                        } catch (RepositoryException re) {
+                            // should never happen
+                            throw new ValueFormatException("failed to convert source value to URI value", re);
+                        }
+                        val = factory.createValue(uuid, targetType);
+                        break;
+
+                    case PropertyType.NAME:
+                        String name;
+                        try {
+                            // get string value
+                            name = srcValue.getString();
+                        } catch (RepositoryException re) {
+                            // should never happen
+                            throw new ValueFormatException("failed to convert source value to URI value", re);
+                        }
+                        // prefix name with "./" (jsr 283 spec 3.6.4.8)
+                        val = factory.createValue("./" + name, targetType);
+                        break;
+
+                    case PropertyType.PATH:
+                        String path;
+                        try {
+                            // get string value
+                            path = srcValue.getString();
+                        } catch (RepositoryException re) {
+                            // should never happen
+                            throw new ValueFormatException("failed to convert source value to URI value", re);
+                        }
+                        if (!path.startsWith("/")) {
+                            // prefix non-absolute path with "./" (jsr 283 spec 3.6.4.9)
+                            path = "./" + path;
+                        }
+                        val = factory.createValue(path, targetType);
+                        break;
+
+                    case PropertyType.BOOLEAN:
+                    case PropertyType.DATE:
+                    case PropertyType.DOUBLE:
+                    case PropertyType.LONG:
+                    case PropertyType.DECIMAL:
+                    case PropertyType.REFERENCE:
+                    case PropertyType.WEAKREFERENCE:
+                        throw new ValueFormatException("conversion failed: "
+                                + PropertyType.nameFromValue(srcType) + " to "
+                                + PropertyType.nameFromValue(targetType));
+
+                    default:
+                        throw new IllegalArgumentException("not a valid type constant: " + srcType);
+                }
+                break;
+

INS26 INS40 MOV10 MOV10 MOV10 UPD66 INS49 INS54 MOV49 MOV49 MOV49 INS10 INS50 INS10 INS49 INS50 INS10 INS49 INS40 INS8 INS12 INS60 INS54 INS25 INS60 INS25 INS21 INS10 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS40 INS42 INS49 INS41 INS49 INS49 INS49 INS60 INS54 INS21 INS10 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS53 INS49 INS53 INS40 INS42 INS49 INS41 INS49 INS49 INS60 INS54 INS21 INS10 INS49 INS60 INS54 INS21 INS10 INS49 INS60 INS54 INS25 INS21 INS10 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS53 INS49 INS53 INS21 INS44 INS8 INS40 INS43 INS59 INS8 INS12 INS32 INS8 INS43 INS59 INS32 INS8 INS7 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS40 INS40 INS40 INS43 INS59 INS8 INS12 INS7 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS14 INS14 INS40 INS42 INS40 INS40 INS43 INS59 INS8 INS12 INS7 INS40 INS43 INS59 INS8 INS12 INS7 INS40 INS43 INS59 INS8 INS12 INS38 INS8 INS7 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS14 INS14 INS7 INS43 INS42 INS53 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS32 INS43 INS27 INS43 INS27 INS42 INS42 INS21 INS44 INS8 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS32 INS21 INS42 INS32 INS43 INS27 INS43 INS27 INS42 INS32 INS42 INS14 INS7 INS43 INS42 INS53 INS14 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS45 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS27 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS45 INS7 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS32 INS42 INS14 INS43 INS45 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS14 INS45 INS42 INS42 INS32 INS42 INS14 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS43 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42