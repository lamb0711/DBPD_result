JCR-555: Improved reusability of the JCA package

Merge the classpath: repository config code from jca to core. Streamline the remaining jca code.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@923678 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.io.IOUtils;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.Collection;
-import java.util.Iterator;
-    private final Map<Reference, Reference> references;
+    private final Map<Map<String, String>, Repository> repositories =
+        new HashMap<Map<String, String>, Repository>();
-        this.references = new HashMap<Reference, Reference>();
-     * @param homeDir   The location of the repository.
-     * @param configFile The path to the repository configuration file. If the file is located on
-     *                   the classpath, the path should be prepended with
-     *                   JCARepositoryManager.CLASSPATH_CONFIG_PREFIX.
+     * @param parameters repository parameters
-    public Repository createRepository(String homeDir, String configFile)
-            throws RepositoryException {
-        Reference ref = getReference(homeDir, configFile);
-        return ref.create();
+    public synchronized Repository createRepository(
+            Map<String, String> parameters) throws RepositoryException {
+        Repository repository = repositories.get(parameters);
+        if (repository == null) {
+            repository =  JcrUtils.getRepository(parameters);
+            repositories.put(parameters, repository);
+        }
+        return repository;
-    public void shutdown() {
-        Collection<Reference> references = this.references.values();
-        Iterator<Reference> iter = references.iterator();
-        while (iter.hasNext()) {
-            Reference ref = iter.next();
-            ref.shutdown();
+    public synchronized void shutdown() {
+        for (Repository repository : repositories.values()) {
+            if (repository instanceof JackrabbitRepository) {
+                ((JackrabbitRepository) repository).shutdown();
+            }
-        this.references.clear();
-    }
-
-    /**
-     * Return the reference.
-     *
-     * @param homeDir   The location of the repository.
-     * @param configFile The path to the repository configuration file.
-     */
-    private synchronized Reference getReference(String homeDir, String configFile) {
-        Reference ref = new Reference(homeDir, configFile);
-        Reference other = references.get(ref);
-
-        if (other == null) {
-            references.put(ref, ref);
-            return ref;
-        } else {
-            return other;
-        }
+        repositories.clear();
-    /**
-     * Repository reference implementation.
-     */
-    private final class Reference {
-        /**
-         * Home directory.
-         */
-        private final String homeDir;
-
-        /**
-         * Configuration file.
-         *
-         * Configuration files located on the classpath begin with
-         * JCARepositoryManager.CLASSPATH_CONFIG_PREFIX.
-         */
-        private String configFile;
-
-        /**
-         * Repository instance.
-         */
-        private Repository repository;
-
-        /**
-         * Construct the manager.
-         */
-        private Reference(String homeDir, String configFile) {
-            this.homeDir = homeDir;
-            this.configFile = configFile;
-            this.repository = null;
-        }
-
-        /**
-         * Return the repository.
-         */
-        public Repository create() throws RepositoryException {
-            if (repository == null) {
-                File dir = new File(homeDir);
-                dir.mkdirs();
-
-                File xml;
-                if (configFile.startsWith(CLASSPATH_CONFIG_PREFIX)) {
-                    String source =
-                        configFile.substring(CLASSPATH_CONFIG_PREFIX.length());
-                    xml = new File(homeDir, "repository.xml");
-                    copyConfigFile(source, xml);
-                } else {
-                    xml = new File(configFile);
-                }
-
-                Map<String, String> parameters = new HashMap<String, String>();
-                parameters.put(
-                        "org.apache.jackrabbit.repository.home",
-                        dir.getPath());
-                parameters.put(
-                        "org.apache.jackrabbit.repository.conf",
-                        xml.getPath());
-                repository = JcrUtils.getRepository(parameters);
-            }
-
-            return repository;
-        }
-
-        private void copyConfigFile(String source, File target)
-                throws RepositoryException {
-            ClassLoader cl = Thread.currentThread().getContextClassLoader();
-            if (cl == null) {
-                cl = this.getClass().getClassLoader();
-            }
-
-            InputStream input = cl.getResourceAsStream(source);
-            if (input != null) {
-                try {
-                    try {
-                        OutputStream output = new FileOutputStream(target);
-                        try {
-                            IOUtils.copy(input, output);
-                        } finally {
-                            output.close();
-                        }
-                    } finally {
-                        input.close();
-                    }
-                } catch (IOException e) {
-                    throw new RepositoryException(
-                            "Failed to copy configuration to " + target, e);
-                }
-            } else {
-                throw new RepositoryException(
-                        "Repository configuration not found: " + source);
-            }
-        }
-
-        /**
-         * Shutdown the repository.
-         */
-        public void shutdown() {
-            if (repository instanceof JackrabbitRepository) {
-                ((JackrabbitRepository) repository).shutdown();
-            }
-        }
-
-        /**
-         * Return the hash code.
-         */
-        public int hashCode() {
-            int result = homeDir != null ? homeDir.hashCode() : 0;
-            result = 37 * result + (configFile != null ? configFile.hashCode() : 0);
-            return result;
-        }
-
-        /**
-         * Return true if equals.
-         */
-        public boolean equals(Object o) {
-            if (o == this) {
-                return true;
-            } else if (o instanceof Reference) {
-                return equals((Reference) o);
-            } else {
-                return false;
-            }
-        }
-
-        /**
-         * Return true if equals.
-         */
-        private boolean equals(Reference o) {
-            return equals(homeDir, o.homeDir)
-                && equals(configFile, o.configFile);
-        }
-
-        /**
-         * Return true if equals.
-         */
-        private boolean equals(String s1, String s2) {
-            if (s1 == s2) {
-                return true;
-            } else if ((s1 == null) || (s2 == null)) {
-                return false;
-            } else {
-                return s1.equals(s2);
-            }
-        }
-    }
-
-    public void autoShutdownRepository(String homeDir, String configFile) {
+    public synchronized void autoShutdownRepository(
+            Map<String, String> parameters) {
-            Reference ref = getReference(homeDir, configFile);
-            ref.shutdown();
+            Repository repository = repositories.get(parameters);
+            if (repository instanceof JackrabbitRepository) {
+                ((JackrabbitRepository) repository).shutdown();
+            }

INS23 MOV31 INS31 MOV31 INS31 MOV29 MOV83 MOV83 INS74 INS59 MOV29 INS42 MOV29 MOV83 INS83 MOV43 UPD42 MOV42 INS44 MOV43 MOV8 MOV29 INS83 INS8 MOV29 MOV83 UPD83 MOV83 MOV39 MOV42 MOV44 MOV8 MOV43 INS74 MOV43 INS42 INS14 MOV65 UPD65 MOV65 INS74 INS42 MOV41 INS70 INS21 MOV74 INS42 UPD43 MOV43 INS43 INS43 INS74 INS42 UPD66 UPD43 MOV43 MOV43 MOV43 UPD43 MOV27 INS8 INS44 INS32 MOV8 INS32 UPD42 MOV42 MOV42 MOV43 INS74 MOV43 UPD42 UPD42 UPD42 MOV21 MOV21 INS43 INS42 INS42 INS42 INS42 INS42 INS25 INS43 INS43 INS43 UPD42 UPD42 UPD42 INS42 UPD43 INS62 INS8 UPD42 MOV42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS43 MOV21 UPD42 UPD42 UPD42 INS42 INS36 INS11 INS43 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL52 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL66 DEL65 DEL29 DEL83 DEL42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL16 DEL59 DEL60 DEL42 DEL34 DEL42 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL27 DEL9 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL41 DEL8 DEL9 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL27 DEL9 DEL41 DEL8 DEL42 DEL33 DEL27 DEL36 DEL42 DEL33 DEL27 DEL36 DEL27 DEL9 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL55 DEL42 DEL43 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL31