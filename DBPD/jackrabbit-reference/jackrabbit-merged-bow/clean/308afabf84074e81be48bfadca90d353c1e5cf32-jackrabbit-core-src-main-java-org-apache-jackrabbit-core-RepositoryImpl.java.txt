JCR-2640: Internal repository context

Streamline loadRootNodeId()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@948810 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.OutputStreamWriter;
-            // init root node uuid
-            context.setRootNodeId(loadRootNodeId(repStore));
+            // Load root node identifier
+            context.setRootNodeId(loadRootNodeId());
-     * Returns the root node uuid.
-     * @param fs
-     * @return
-     * @throws RepositoryException
+     * Returns the root node identifier. The identifier is loaded from
+     * the <code>meta/rootUUID</code> file within the repository file system.
+     * If such a file does not yet exist, the hardcoded default root node
+     * identifier ({@link #ROOT_NODE_ID}) is used and written to that file.
+     * <p>
+     * This utility method should only be used by the constructor after the
+     * repository file system has been initialised.
+     *
+     * @return root node identifier
+     * @throws RepositoryException if the identifier can not be loaded or saved
-    protected NodeId loadRootNodeId(FileSystem fs) throws RepositoryException {
-        String fsRootPath = "/meta";
+    private NodeId loadRootNodeId() throws RepositoryException {
-            if (!fs.exists(fsRootPath) || !fs.isFolder(fsRootPath)) {
-                fs.createFolder(fsRootPath);
-            }
-        } catch (FileSystemException fse) {
-            String msg = "failed to create folder for repository meta data";
-            log.error(msg, fse);
-            throw new RepositoryException(msg, fse);
-        }
-        fs = new BasedFileSystem(fs, fsRootPath);
-
-        FileSystemResource uuidFile = new FileSystemResource(fs, "rootUUID");
-        try {
+            FileSystemResource uuidFile = new FileSystemResource(
+                    context.getFileSystem(), "meta/rootUUID");
+                // Load uuid of the repository's root node. It is stored in
+                // text format (36 characters) for better readability.
+                InputStream in = uuidFile.getInputStream();
-                    // load uuid of the repository's root node
-                    InputStream in = uuidFile.getInputStream();
-/*
-                   // uuid is stored in binary format (16 bytes)
-                   byte[] bytes = new byte[16];
-                   try {
-                       in.read(bytes);
-                   } finally {
-                       try {
-                           in.close();
-                       } catch (IOException ioe) {
-                           // ignore
-                       }
-                   }
-                   rootNodeUUID = new UUID(bytes).toString();            // uuid is stored in binary format (16 bytes)
-*/
-                    // uuid is stored in text format (36 characters) for better readability
-
-                    char[] chars;
-                    try {
-                        chars = IOUtils.toCharArray(in);
-                    } finally {
-                        IOUtils.closeQuietly(in);
-                    }
-                    return NodeId.valueOf(new String(chars));
-                } catch (Exception e) {
-                    String msg = "failed to load persisted repository state";
-                    log.debug(msg);
-                    throw new RepositoryException(msg, e);
+                    return NodeId.valueOf(IOUtils.toString(in, "US-ASCII"));
+                } finally {
+                    IOUtils.closeQuietly(in);
-                // create new uuid
-/*
-                UUID rootUUID = UUID.randomUUID();     // version 4 uuid
-                rootNodeUUID = rootUUID.toString();
-*/
-                /**
-                 * use hard-coded uuid for root node rather than generating
-                 * a different uuid per repository instance; using a
-                 * hard-coded uuid makes it easier to copy/move entire
-                 * workspaces from one repository instance to another.
-                 */
+                // Use hard-coded uuid for root node rather than generating
+                // a different uuid per repository instance; using a
+                // hard-coded uuid makes it easier to copy/move entire
+                // workspaces from one repository instance to another.
+                uuidFile.makeParentDirs();
+                OutputStream out = uuidFile.getOutputStream();
-                    // persist uuid of the repository's root node
-                    OutputStream out = uuidFile.getOutputStream();
-/*
-                    // store uuid in binary format
-                    try {
-                        out.write(rootUUID.getBytes());
-                    } finally {
-                        try {
-                            out.close();
-                        } catch (IOException ioe) {
-                            // ignore
-                        }
-                    }
-*/
-                    // store uuid in text format for better readability
-                    OutputStreamWriter writer = new OutputStreamWriter(out);
-                    try {
-                        writer.write(ROOT_NODE_ID.toString());
-                    } finally {
-                        IOUtils.closeQuietly(writer);
-                    }
+                    out.write(ROOT_NODE_ID.toString().getBytes("US-ASCII"));
-                } catch (Exception e) {
-                    String msg = "failed to persist repository state";
-                    log.debug(msg);
-                    throw new RepositoryException(msg, e);
+                } finally {
+                    IOUtils.closeQuietly(out);
+        } catch (IOException e) {
+            throw new RepositoryException(
+                    "Failed to load or persist the root node identifier", e);
-            String msg = "failed to access repository state";
-            log.debug(msg);
-            throw new RepositoryException(msg, fse);
+            throw new RepositoryException(
+                    "Failed to access the root node identifier", fse);

UPD83 INS65 INS54 UPD66 MOV66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS8 MOV12 MOV12 INS67 MOV60 INS25 MOV44 INS42 MOV43 MOV32 MOV8 MOV8 UPD43 MOV53 MOV53 MOV60 INS21 UPD42 MOV43 INS32 UPD45 MOV8 INS32 INS45 UPD42 INS45 UPD42 INS42 INS42 INS42 INS42 MOV41 INS32 INS32 INS42 INS42 MOV32 MOV42 UPD42 INS42 INS42 INS42 INS45 UPD42 INS45 DEL40 DEL26 DEL42 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL39 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL54 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL54 DEL8 DEL25 DEL8 DEL54