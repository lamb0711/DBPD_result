JCR-2087: Upgrade to Java 5 as the base platform

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@787219 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ChildInfo;
+import org.apache.jackrabbit.spi.ItemInfo;
-    public Map getRepositoryDescriptors() throws RepositoryException {
-        return (Map) execute(new Callable() {
+    public Map<String, String> getRepositoryDescriptors() throws RepositoryException {
+        return (Map<String, String>) execute(new Callable() {
-        return ((Boolean) execute(new Callable() {
+        return (Boolean) execute(new Callable() {
-        }, "isGranted(SessionInfo, ItemId, String[])", new Object[] { unwrap(sessionInfo), itemId, actions }))
-                .booleanValue();
+        }, "isGranted(SessionInfo, ItemId, String[])", new Object[] { unwrap(sessionInfo), itemId, actions });
-    public Iterator getItemInfos(final SessionInfo sessionInfo, final NodeId nodeId)
+    public Iterator<? extends ItemInfo> getItemInfos(final SessionInfo sessionInfo, final NodeId nodeId)
-        return (Iterator) execute(new Callable() {
+        return (Iterator<? extends ItemInfo>) execute(new Callable() {
-    public Iterator getChildInfos(final SessionInfo sessionInfo, final NodeId parentId)
+    public Iterator<ChildInfo> getChildInfos(final SessionInfo sessionInfo, final NodeId parentId)
-        return (Iterator) execute(new Callable() {
+        return (Iterator<ChildInfo>) execute(new Callable() {
-        return (Iterator) execute(new Callable() {
+        return (Iterator<PropertyId>) execute(new Callable() {
-                new Object[]{unwrap(sessionInfo), parentId, xmlStream, new Integer(uuidBehaviour)});
+                new Object[]{unwrap(sessionInfo), parentId, xmlStream, uuidBehaviour});
-                new Object[] { unwrap(sessionInfo), srcWorkspaceName, srcNodeId, destParentNodeId, destName,
-                Boolean.valueOf(removeExisting) });
+                new Object[] { unwrap(sessionInfo), srcWorkspaceName, srcNodeId, destParentNodeId, destName, removeExisting});
-                new Object[]{unwrap(sessionInfo), nodeId, Boolean.valueOf(deep), Boolean.valueOf(sessionScoped)});
+                new Object[]{unwrap(sessionInfo), nodeId, deep, sessionScoped});
-                nodeId, Boolean.valueOf(deep), Boolean.valueOf(sessionScoped), new Long(timeoutHint),
+                nodeId, deep, sessionScoped, timeoutHint,
-                new Object[]{unwrap(sessionInfo), nodeId, versionId, Boolean.valueOf(removeExisting)});
+                new Object[]{unwrap(sessionInfo), nodeId, versionId, removeExisting});
-                new Object[]{unwrap(sessionInfo), nodeIds, Boolean.valueOf(removeExisting)});
+                new Object[]{unwrap(sessionInfo), nodeIds, removeExisting});
-    public Iterator merge(final SessionInfo sessionInfo, final NodeId nodeId, final String srcWorkspaceName,
+    public Iterator<NodeId> merge(final SessionInfo sessionInfo, final NodeId nodeId, final String srcWorkspaceName,
-        return (Iterator) execute(new Callable() {
+        return (Iterator<NodeId>) execute(new Callable() {
-                new Object[]{unwrap(sessionInfo), nodeId, srcWorkspaceName, Boolean.valueOf(bestEffort)});
+                new Object[]{unwrap(sessionInfo), nodeId, srcWorkspaceName, bestEffort});
-    public Iterator merge(final SessionInfo sessionInfo, final NodeId nodeId, final String srcWorkspaceName,
+    public Iterator<NodeId> merge(final SessionInfo sessionInfo, final NodeId nodeId, final String srcWorkspaceName,
-        return (Iterator) execute(new Callable() {
+        return (Iterator<NodeId>) execute(new Callable() {
-                new Object[]{unwrap(sessionInfo), nodeId, srcWorkspaceName, Boolean.valueOf(bestEffort)});
+                new Object[]{unwrap(sessionInfo), nodeId, srcWorkspaceName, bestEffort});
-                new Object[]{unwrap(sessionInfo), versionHistoryId, versionId, label, Boolean.valueOf(moveLabel)});
+                new Object[]{unwrap(sessionInfo), versionHistoryId, versionId, label, moveLabel});
-            final String language, final Map namespaces) throws RepositoryException {
+            final String language, final Map<String, String> namespaces) throws RepositoryException {
-            final String language, final Map namespaces) throws RepositoryException {
+            final String language, final Map<String, String> namespaces) throws RepositoryException {
-                                  final String language, final Map namespaces, final long limit, final long offset, final Map<String, QValue> values) throws RepositoryException {
+                                  final String language, final Map<String, String> namespaces, final long limit, final long offset, final Map<String, QValue> values) throws RepositoryException {
-                new Object[]{unwrap(sessionInfo), new Integer(eventTypes), absPath, Boolean.valueOf(isDeep), uuid,
-                qnodeTypeName, Boolean.valueOf(noLocal)});
+                new Object[]{unwrap(sessionInfo), eventTypes, absPath, isDeep, uuid,
+                qnodeTypeName, noLocal});
-        final Object[] args = new Object[]{subscription, new Long(timeout)};
+        final Object[] args = new Object[]{subscription, timeout};
-    public Map getRegisteredNamespaces(final SessionInfo sessionInfo) throws RepositoryException {
-        return (Map) execute(new Callable() {
+    public Map<String, String> getRegisteredNamespaces(final SessionInfo sessionInfo) throws RepositoryException {
+        return (Map<String, String>) execute(new Callable() {
-    public Iterator getQNodeTypeDefinitions(final SessionInfo sessionInfo) throws RepositoryException {
-        return (Iterator) execute(new Callable() {
+    public Iterator<QNodeTypeDefinition> getQNodeTypeDefinitions(final SessionInfo sessionInfo) throws RepositoryException {
+        return (Iterator<QNodeTypeDefinition>) execute(new Callable() {
-    public Iterator getQNodeTypeDefinitions(final SessionInfo sessionInfo, final Name[] nodetypeNames)
+    public Iterator<QNodeTypeDefinition> getQNodeTypeDefinitions(final SessionInfo sessionInfo, final Name[] nodetypeNames)

INS26 INS26 INS40 INS40 INS74 INS74 INS74 INS74 INS74 INS74 INS74 INS74 INS74 MOV43 INS43 INS43 MOV43 INS76 MOV43 INS43 INS43 INS43 MOV43 INS43 MOV43 INS43 INS74 INS74 INS74 MOV43 INS43 INS43 MOV43 INS43 MOV43 INS43 INS42 INS42 MOV11 INS43 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 INS42 INS42 INS42 UPD42 MOV42 INS74 UPD42 MOV42 INS74 INS74 MOV74 INS74 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS74 MOV43 INS43 INS43 MOV43 INS76 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL36 DEL42 DEL32 DEL43 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14