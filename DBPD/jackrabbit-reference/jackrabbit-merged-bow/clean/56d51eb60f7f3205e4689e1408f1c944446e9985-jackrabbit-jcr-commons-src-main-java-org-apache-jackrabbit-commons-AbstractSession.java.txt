JCR-1104: JSR 283 support

Add default implementations of some new Session methods in JCR 2.0

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@771687 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Property;
+    private String toRelativePath(String absPath) throws PathNotFoundException {
+        if (absPath.startsWith("/") && absPath.length() > 1) {
+            return absPath.substring(1);
+        } else {
+            throw new PathNotFoundException("Not an absolute path: " + absPath);
+        }
+    }
+
+     * @see Session#getItem(String)
-        if (!absPath.startsWith("/")) {
-            throw new PathNotFoundException("Not an absolute path: " + absPath);
-        }
-
-        String relPath = absPath.substring(1);
-        if (relPath.length() == 0) {
+        if (absPath.equals("/")) {
-        }
-
-        try {
-            return root.getNode(relPath);
-        } catch (PathNotFoundException e) {
-            return root.getProperty(relPath);
+        } else {
+            String relPath = toRelativePath(absPath);
+            if (root.hasNode(relPath)) {
+                return root.getNode(relPath);
+            } else {
+                return root.getProperty(relPath);
+            }
+     * @see Session#itemExists(String)
-        try {
-            getItem(absPath);
+        if (absPath.equals("/")) {
-        } catch (PathNotFoundException e) {
+        } else {
+            Node root = getRootNode();
+            String relPath = toRelativePath(absPath);
+            return root.hasNode(relPath) || root.hasProperty(relPath);
+        }
+    }
+
+    /**
+     * Removes the identified item. Implemented by calling
+     * {@link Item#remove()} on the item removed by {@link #getItem(String)}.
+     *
+     * @see Session#removeItem(String)
+     * @param absolute path of the item to be removed
+     * @throws RepositoryException if the item can not be removed
+     */
+    public void removeItem(String absPath) throws RepositoryException {
+        getItem(absPath).remove();
+    }
+
+    /**
+     * Returns the node with the given absolute path.
+     *
+     * @see Session#getNode(String)
+     * @param absPath absolute path
+     * @return node at the given path
+     * @throws RepositoryException if the node can not be accessed
+     */
+    public Node getNode(String absPath) throws RepositoryException {
+        Node root = getRootNode();
+        if (absPath.equals("/")) {
+            return root;
+        } else {
+            return root.getNode(toRelativePath(absPath));
+        }
+    }
+
+    /**
+     * Checks whether a node with the given absolute path exists.
+     *
+     * @see Session#nodeExists(String)
+     * @param absPath absolute path
+     * @return <code>true</code> if a node with the given path exists,
+     *         <code>false</code> otherwise
+     * @throws RepositoryException if the path is invalid
+     */
+    public boolean nodeExists(String absPath) throws RepositoryException {
+        if (absPath.equals("/")) {
+            return true;
+        } else {
+            return getRootNode().hasNode(toRelativePath(absPath));
+        }
+    }
+
+    /**
+     * Returns the property with the given absolute path.
+     *
+     * @see Session#getProperty(String)
+     * @param absPath absolute path
+     * @return node at the given path
+     * @throws RepositoryException if the property can not be accessed
+     */
+    public Property getProperty(String absPath) throws RepositoryException {
+        if (absPath.equals("/")) {
+            throw new RepositoryException("The root node is not a property");
+        } else {
+            return getRootNode().getProperty(toRelativePath(absPath));
+        }
+    }
+
+    /**
+     * Checks whether a property with the given absolute path exists.
+     *
+     * @see Session#propertyExists(String)
+     * @param absPath absolute path
+     * @return <code>true</code> if a property with the given path exists,
+     *         <code>false</code> otherwise
+     * @throws RepositoryException if the path is invalid
+     */
+    public boolean propertyExists(String absPath) throws RepositoryException {
+        if (absPath.equals("/")) {
+        } else {
+            return getRootNode().hasProperty(toRelativePath(absPath));

INS26 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS83 MOV43 INS42 INS44 MOV43 INS8 INS8 INS8 INS29 INS83 INS39 INS42 INS44 INS43 MOV8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS43 INS42 MOV25 INS65 MOV60 INS25 INS65 INS25 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS25 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS25 INS42 INS27 INS8 INS68 INS32 MOV8 INS8 INS68 INS32 INS8 INS8 INS66 INS65 INS66 INS65 INS66 INS68 INS42 INS66 INS42 INS66 INS42 INS32 INS66 INS68 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS32 INS8 INS8 INS66 INS68 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS32 INS8 INS8 INS66 INS68 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS8 INS8 INS66 INS68 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS32 MOV8 INS8 MOV32 INS27 INS41 INS42 INS42 INS69 INS42 INS42 INS45 MOV60 MOV25 INS42 INS42 INS69 INS42 INS42 INS45 MOV41 INS60 INS60 INS41 INS68 INS68 INS42 INS42 INS69 MOV32 INS42 INS42 INS42 INS69 INS42 INS42 INS32 INS42 INS42 INS45 INS41 INS41 INS42 INS42 INS69 INS42 INS42 INS45 INS41 INS41 INS42 INS42 INS69 INS42 INS42 INS45 INS53 INS41 INS42 INS42 INS69 INS42 INS42 INS45 INS41 INS32 INS34 INS32 INS43 INS43 INS32 MOV8 MOV8 INS43 INS43 INS59 INS43 INS59 INS27 INS42 INS42 INS42 INS69 INS43 INS43 INS42 INS42 INS32 INS43 INS9 INS32 INS43 INS14 INS32 INS43 INS32 INS42 INS42 INS42 INS42 MOV34 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS43 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL38 DEL32 DEL34 DEL27 DEL42 DEL44 DEL12 DEL54 DEL8 DEL43 DEL42 DEL44 DEL12 DEL54 DEL8