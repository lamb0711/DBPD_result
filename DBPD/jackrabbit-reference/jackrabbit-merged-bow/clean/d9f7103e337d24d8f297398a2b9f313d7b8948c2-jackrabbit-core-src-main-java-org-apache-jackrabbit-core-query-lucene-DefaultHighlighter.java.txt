JCR-3075 incorrect HTML excerpt generation for queries on japanese text content

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1173694 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-import java.util.Set;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Set;
+import org.apache.jackrabbit.util.Text;
+import org.apache.lucene.index.Term;
-import org.apache.lucene.index.Term;
-import org.apache.jackrabbit.util.Text;
-                                   Set<Term> queryTerms,
+                                   Set<Term[]> queryTerms,
-                                   Set<Term> queryTerms,
+                                   Set<Term[]> queryTerms,
-                                 Set<Term> queryTerms,
+                                 Set<Term[]> queryTerms,
-        String[] terms = new String[queryTerms.size()];
-        Iterator<Term> it = queryTerms.iterator();
-        for (int i = 0; it.hasNext(); i++) {
-            terms[i] = it.next().text();
-        }
-        List<TermVectorOffsetInfo> list = new ArrayList<TermVectorOffsetInfo>();
-        int[] tvecindexes = tvec.indexesOf(terms, 0, terms.length);
-        for (int tvecindex : tvecindexes) {
-            TermVectorOffsetInfo[] termoffsets = tvec.getOffsets(tvecindex);
-            list.addAll(Arrays.asList(termoffsets));
+
+        List<TermVectorOffsetInfo> termOffsetInfo = new ArrayList<TermVectorOffsetInfo>();
+
+        Iterator<Term[]> it = queryTerms.iterator();
+        while (it.hasNext()) {
+            Term[] qt = it.next();
+            final int qtLen = qt.length;
+            if (qt == null || qtLen == 0) {
+                continue;
+            }
+            String[] qtText = new String[qtLen];
+            for (int i = 0; i < qtLen; i++) {
+                qtText[i] = qt[i].text();
+            }
+            int[] tvecindexes = tvec.indexesOf(qtText, 0, qtText.length);
+            Map<Integer, TermVectorOffsetInfo[]> localTermOffsetInfo = new HashMap<Integer, TermVectorOffsetInfo[]>();
+            for (int tvecindex : tvecindexes) {
+                TermVectorOffsetInfo[] termoffsets = tvec.getOffsets(tvecindex);
+                if (termoffsets == null || termoffsets.length == 0) {
+                    continue;
+                }
+                localTermOffsetInfo.put(tvecindex, termoffsets);
+            }
+
+            // to keep the order of the keys, use tvecindexes,
+            // if a term is not found tvecindexes[] = -1
+            // when dealing with multiple terms that have to exist, just check
+            // if the first one is there
+            if (tvecindexes.length > 0 && tvecindexes[0] >= 0) {
+                // we have to build one interval TermVectorOffsetInfo for each
+                // hit;
+                List<TermVectorOffsetInfo> intervalTermOffsetInfo = new ArrayList<TermVectorOffsetInfo>();
+
+                // pick all the first key's hist as interval start
+                TermVectorOffsetInfo[] firstKeyTermOffsets = localTermOffsetInfo
+                        .get(tvecindexes[0]);
+                Arrays.sort(firstKeyTermOffsets,
+                        new TermVectorOffsetInfoSorter());
+                intervalTermOffsetInfo.addAll(Arrays
+                        .asList(firstKeyTermOffsets));                
+
+                // check if each key is part of an interval, if not, it is
+                // dropped from the list
+                for (int i = 1; i < tvecindexes.length; i++) {
+                    final Integer key = tvecindexes[i];
+                    TermVectorOffsetInfo[] termoffsets = localTermOffsetInfo
+                            .get(key);
+                    if (termoffsets == null) {
+                        continue;
+                    }
+                    Arrays.sort(termoffsets, new TermVectorOffsetInfoSorter());
+
+                    Iterator<TermVectorOffsetInfo> intervalIterator = intervalTermOffsetInfo
+                            .iterator();
+
+                    int index = 0;
+                    while (intervalIterator.hasNext()) {
+                        TermVectorOffsetInfo intervalOI = intervalIterator
+                                .next();
+                        if (index >= termoffsets.length) {
+                            intervalIterator.remove();
+                            continue;
+                        }
+                        boolean matchSearch = true;
+                        boolean matchFound = false;
+                        while (matchSearch) {
+                            TermVectorOffsetInfo localOI = termoffsets[index];
+                            // check interval match
+                            // CJK languages will have the tokens from the PhraseQuery glued together (see LUCENE-2458)
+                            int diff = localOI.getStartOffset()
+                                    - intervalOI.getEndOffset();
+                            // TODO we'll probably have to remove 'diff == 0'
+                            // after upgrading to lucene 3.1
+                            if (diff == 1 || diff == 0) {
+                                intervalOI.setEndOffset(localOI.getEndOffset());
+                                matchSearch = false;
+                                matchFound = true;
+                            }
+                            index++;
+                            if (index >= termoffsets.length) {
+                                matchSearch = false;
+                            }
+                        }
+                        if (!matchFound) {
+                            index--;
+                            intervalIterator.remove();
+                        }
+                    }
+                }
+                termOffsetInfo.addAll(intervalTermOffsetInfo);
+            }
-        TermVectorOffsetInfo[] offsets = list.toArray(new TermVectorOffsetInfo[list.size()]);
+        TermVectorOffsetInfo[] offsets = termOffsetInfo.toArray(new TermVectorOffsetInfo[termOffsetInfo.size()]);
-        if (terms.length > 1) {
+        if (offsets != null && offsets.length > 1) {

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 INS40 MOV60 UPD74 UPD74 UPD74 INS61 INS5 INS5 INS5 UPD74 MOV32 INS8 INS5 INS27 MOV43 INS85 MOV43 INS85 MOV43 INS85 UPD42 INS5 INS60 INS60 INS25 MOV60 MOV24 MOV60 INS60 MOV70 INS25 INS43 INS85 INS27 INS27 MOV43 INS85 INS5 INS59 INS83 INS39 INS59 INS27 INS8 MOV5 INS27 INS74 INS59 INS27 INS8 INS42 UPD42 INS42 INS33 UPD40 MOV40 MOV34 INS43 INS85 INS42 MOV32 INS42 INS40 INS27 INS27 INS18 UPD42 INS42 INS42 INS43 INS43 INS5 INS42 INS14 INS25 INS27 INS27 INS60 INS60 INS21 INS21 INS24 INS21 INS5 INS42 INS42 INS33 INS42 INS34 MOV5 INS42 UPD42 UPD40 INS42 INS42 INS43 INS85 INS74 INS27 INS8 INS40 INS34 INS2 INS34 INS74 INS59 MOV5 INS59 INS32 INS32 INS58 INS27 INS37 INS8 INS32 INS43 INS85 UPD42 INS42 INS43 INS43 INS5 INS27 INS27 INS18 UPD42 UPD42 UPD42 MOV42 MOV42 INS42 INS34 INS43 INS43 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS21 INS60 INS60 INS61 INS42 INS42 INS42 INS42 UPD42 INS2 INS42 INS42 INS43 INS85 INS42 INS33 INS40 INS34 INS42 INS42 INS74 INS42 INS42 INS2 INS43 INS42 INS42 INS42 INS42 INS34 INS83 INS43 INS59 MOV5 INS59 INS27 INS8 INS32 INS74 INS59 INS39 INS59 INS32 INS8 INS42 INS42 INS42 INS43 INS43 INS42 INS34 INS42 INS42 INS42 INS2 INS42 INS32 INS42 INS33 INS18 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS34 INS42 INS42 INS60 INS25 INS60 INS60 INS61 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS42 INS8 INS38 INS8 INS42 INS42 INS42 INS32 INS42 INS40 INS21 INS18 INS42 INS9 INS42 INS9 INS60 INS60 INS25 INS21 INS25 INS42 INS21 INS21 INS42 INS42 INS32 INS43 INS59 INS39 INS59 INS27 INS8 INS37 INS27 INS8 INS37 INS32 INS42 INS42 INS42 INS42 INS2 INS42 INS27 INS27 INS27 INS21 INS21 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS34 INS42 INS34 INS32 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27