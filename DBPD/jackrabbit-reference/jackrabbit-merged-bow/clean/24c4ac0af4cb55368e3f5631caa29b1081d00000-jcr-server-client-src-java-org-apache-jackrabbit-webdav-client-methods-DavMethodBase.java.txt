- DavMethod: common interface for webdav extension of HttpClient methods.
- minor improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@397929 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.httpclient.methods.GetMethod;
+import org.apache.commons.httpclient.HttpState;
+import org.apache.commons.httpclient.HttpConnection;
+import org.apache.commons.httpclient.HttpMethodBase;
+import org.apache.commons.httpclient.HttpMethod;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
-public abstract class DavMethodBase extends EntityEnclosingMethod implements DavConstants {
+public abstract class DavMethodBase extends EntityEnclosingMethod implements DavMethod, DavConstants {
-    static final DocumentBuilderFactory BUILDER_FACTORY = DocumentBuilderFactory.newInstance();
-    static {
-       BUILDER_FACTORY.setNamespaceAware(true);
-    }
+
+    static final DocumentBuilderFactory BUILDER_FACTORY = DomUtil.BUILDER_FACTORY;
+
+    private boolean success;
+    private MultiStatus multiStatus;
+    //---------------------------------------------------------< HttpMethod >---
+     * Reset method to 'abstract' in order to force subclasses to change the
+     * name (inherited value is {@link GetMethod#getName()}).
-     * @param header
+     * @return Name of the method.
+     * @see HttpMethod#getName() 
+     */
+    public abstract String getName();
+
+    //----------------------------------------------------------< DavMethod >---
+    /**
+     * @see DavMethod#addRequestHeader(Header)
+     */
+    public void addRequestHeader(Header header) {
+        addRequestHeader(header.getHeaderName(), header.getHeaderValue());
+    }
+
+    /**
+     * @see DavMethod#setRequestHeader(Header)
+     * @see DavMethod#getResponseBodyAsMultiStatus()
+     */
+    public MultiStatus getResponseBodyAsMultiStatus() throws IOException, DavException {
+        checkUsed();
+        if (multiStatus != null) {
+            return multiStatus;
+        } else {
+            DavException dx = getResponseException();
+            if (dx != null) {
+                throw dx;
+            } else {
+                throw new DavException(getStatusCode(), getName() + " resulted with unexpected status: " + getStatusLine());
+            }
+        }
+    }
+
+    /**
+     * @see DavMethod#getResponseBodyAsDocument()
+     */
+    public Document getResponseBodyAsDocument() throws IOException {
+        InputStream in = getResponseBodyAsStream();
+        if (in == null) {
+            return null;
+        }
+        try {
+            DocumentBuilder docBuilder = BUILDER_FACTORY.newDocumentBuilder();
+            Document document = docBuilder.parse(in);
+            return document;
+        } catch (ParserConfigurationException e) {
+            throw new IOException(e.getMessage());
+        } catch (SAXException e) {
+            throw new IOException(e.getMessage());
+        }
+    }
+
+    /**
+     *
+     * @return
+     * @throws IOException
+     */
+    Element getRootElement() throws IOException {
+        Document document = getResponseBodyAsDocument();
+        if (document != null) {
+            return document.getDocumentElement();
+        }
+        return null;
+    }
+
+    /**
+     * @see DavMethod#getResponseException()
+     */
+    public DavException getResponseException() throws IOException {
+	checkUsed();
+	if (success) {
+            String msg = "Cannot retrieve exception from successful response.";
+	    log.warn(msg);
+	    throw new IllegalStateException(msg);
+	}
+
+        Element responseRoot = getRootElement();
+        if (responseRoot != null) {
+            return new DavException(getStatusCode(), getStatusText(), null, responseRoot);
+        } else {           
+            // fallback: no or unparsable response body
+            return new DavException(getStatusCode(), getStatusText());
+        }
+    }
+
+    /**
+     * @see DavMethod#checkSuccess()
+     */
+    public void checkSuccess() throws DavException, IOException {
+        if (!succeeded()) {
+            throw getResponseException();
+        }
+    }
+
+    /**
+     * @see DavMethod#succeeded()
+     */
+    public boolean succeeded() {
+        checkUsed();
+        return success;
+    }
+
+    //--------------------------------------------------------------------------
+    /**
+     *
+     * @param requestBody
+     * @throws IOException
+     */
+    public void setRequestBody(Document requestBody) throws IOException {
+        ByteArrayOutputStream out = new ByteArrayOutputStream();
+        OutputFormat format = new OutputFormat("xml", "UTF-8", false);
+        XMLSerializer serializer = new XMLSerializer(out, format);
+        serializer.setNamespaces(true);
+        serializer.asDOMSerializer().serialize(requestBody);
+        setRequestBody(out.toString());
+    }
+
+    /**
-            ByteArrayOutputStream out = new ByteArrayOutputStream();
-
-            OutputFormat format = new OutputFormat("xml", "UTF-8", true);
-            XMLSerializer serializer = new XMLSerializer(out, format);
-            serializer.setNamespaces(true);
-            serializer.asDOMSerializer().serialize(doc);
-            setRequestBody(out.toString());
+            setRequestBody(doc);
-     * Return the response body as <code>MultiStatus</code> object.
+     *
+     * @param statusCode
+     * @return
+     */
+    abstract protected boolean isSuccess(int statusCode);
+
+    /**
+     *
+     * @param success
+     */
+    protected void setSuccess(boolean success) {
+        this.success = success;
+    }
+
+    /**
-     * @throws IOException if the response body could not be parsed
-     * @throws DavException if the status code is other than MultiStatus
-    public MultiStatus getResponseBodyAsMultiStatus() throws IOException, DavException {
-	checkUsed();
+    protected boolean getSuccess() {
+        return success;
+    }
+
+    /**
+     * This method is invoked during the {@link #processResponseBody(HttpState, HttpConnection)},
+     * which in this implementation parses the response body into a <code>MultiStatus</code>
+     * object if the status code indicates 207 (MultiStatus).<br>
+     * Subclasses may want to override this method in order to apply specific
+     * validation of the multi-status.<p/>
+     * This implementation does nothing.
+     *
+     * @param multiStatus
+     * @param httpState
+     * @param httpConnection
+     * @see #processResponseBody(HttpState, HttpConnection)
+     */
+    protected void processMultiStatusBody(MultiStatus multiStatus, HttpState httpState, HttpConnection httpConnection) {
+        // does nothing
+    }
+
+    //-----------------------------------------------------< HttpMethodBase >---
+    /**
+     *
+     * @param httpState
+     * @param httpConnection
+     */
+    protected void processStatusLine(HttpState httpState, HttpConnection httpConnection) {
+        super.processStatusLine(httpState, httpConnection);
+        int code = getStatusCode();
+        // default
+        success = code < DavServletResponse.SC_BAD_REQUEST;
+        // sub classes overwrites
+        success = isSuccess(code);
+    }
+
+    /**
+     * In case of a MultiStatus response code, this method parses the response
+     * body and resets the 'success' flag depending on the multistatus content,
+     * which could indicate method failure as well.
+     *
+     * @param httpState
+     * @param httpConnection
+     * @see HttpMethodBase#processResponseBody(HttpState, HttpConnection)
+     */
+    protected final void processResponseBody(HttpState httpState, HttpConnection httpConnection) {
+        // in case of multi-status response
-            return MultiStatus.createFromXml(getRootElement());
-        } else {
-            throw new DavException(getStatusCode(), getName() + " resulted with unexpected status code: " + getStatusCode());
-        }
-    }
-
-    /**
-     * Parse the response body into an Xml <code>Document</code>.
-     *
-     * @return Xml document or <code>null</code> if the response stream is
-     * <code>null</code>.
-     * @throws IOException if the parsing fails.
-     */
-    public Document getResponseBodyAsDocument() throws IOException {
-        InputStream in = getResponseBodyAsStream();
-        if (in == null) {
-	    return null;
-	}
-	    try {
-            DocumentBuilder docBuilder = BUILDER_FACTORY.newDocumentBuilder();
-            Document document = docBuilder.parse(in);
-            return document;
-        } catch (ParserConfigurationException e) {
-            throw new IOException(e.getMessage());
-        } catch (SAXException e) {
-            throw new IOException(e.getMessage());
-	    }
-	}
-
-    /**
-     * 
-     * @return
-     * @throws IOException
-     */
-    Element getRootElement() throws IOException {
-        Document document = getResponseBodyAsDocument();
-        if (document != null) {
-            return document.getDocumentElement();
-    }
-        return null;
-    }
-
-    /**
-     *
-     * @return
-     * @throws IOException
-     */
-    public DavException getResponseException() throws IOException {
-        checkUsed();
-	if (getStatusCode() < DavServletResponse.SC_BAD_REQUEST) {
-	    log.warn("Cannot retrieve exception from successful response.");
-                return null;
+            try {
+                multiStatus = MultiStatus.createFromXml(getRootElement());
+                // sub-class processing/validation of the multiStatus
+                processMultiStatusBody(multiStatus, httpState, httpConnection);
+            } catch (IOException e) {
+                log.error("Error while parsing multistatus response: " + e);
+                success = false;
-
-        // todo: build exception from response body if present.
-
-	// fallback: no or unparsable response body
-	return new DavException(getStatusCode(), getStatusText());
+        }

INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 MOV83 MOV83 MOV43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 MOV43 INS42 MOV43 MOV43 INS8 INS29 INS83 MOV43 INS42 MOV43 INS8 INS29 INS83 INS39 INS42 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS44 INS43 MOV8 MOV29 INS83 INS39 INS42 MOV44 MOV43 MOV8 INS29 INS83 INS83 INS39 INS42 INS44 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 UPD83 INS39 INS42 INS44 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 INS83 INS39 INS42 INS44 INS44 INS8 MOV42 INS40 INS42 INS42 INS42 INS65 INS65 INS65 INS42 INS65 INS43 INS42 INS21 UPD65 INS65 MOV21 INS25 UPD65 INS65 MOV21 INS25 INS60 INS25 INS65 INS42 INS42 INS25 INS65 INS21 INS41 INS65 INS65 INS43 INS42 INS42 INS65 INS65 INS39 INS42 INS65 INS39 INS42 INS21 INS65 INS41 UPD65 INS65 UPD65 UPD65 INS43 INS42 INS43 INS42 INS43 INS42 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS60 INS21 INS21 INS65 UPD65 INS65 UPD65 INS43 INS42 INS43 INS42 INS25 INS66 INS66 INS65 INS66 INS66 INS68 INS66 INS68 INS42 INS32 INS68 INS68 INS27 INS8 INS8 INS68 INS68 INS42 INS8 INS43 INS59 INS27 INS8 MOV8 INS68 INS38 INS8 INS68 INS32 INS42 INS42 INS42 INS42 MOV43 INS8 INS42 INS42 INS7 INS42 INS66 INS65 INS66 UPD66 INS66 INS66 INS66 INS66 INS42 INS42 UPD42 INS68 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS48 INS39 INS59 INS7 INS7 INS66 INS66 INS66 INS42 INS42 INS68 INS42 INS42 MOV27 INS8 INS68 INS42 INS42 INS42 INS42 INS69 INS42 INS32 INS32 INS42 INS42 INS69 INS42 INS42 INS42 INS33 INS41 INS60 MOV25 INS42 INS42 INS42 INS42 INS60 MOV21 INS53 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS53 INS42 INS42 INS42 UPD42 MOV60 MOV21 INS21 INS22 INS42 INS68 INS42 INS69 INS69 INS42 INS42 INS42 INS42 MOV32 INS42 INS27 INS42 INS32 INS42 INS42 INS69 INS69 INS54 INS42 INS42 INS43 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS14 INS42 INS14 INS42 INS32 MOV43 UPD9 INS32 INS52 INS42 INS42 INS69 INS69 INS43 INS43 INS42 INS40 INS42 INS42 INS43 INS43 MOV8 INS12 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS45 UPD42 UPD42 INS42 INS43 INS42 INS43 MOV32 INS32 INS33 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS43 INS42 INS21 INS21 MOV32 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS7 UPD45 INS32 INS42 INS42 INS27 INS42 INS9 INS42 INS45 INS42 DEL32 DEL59 DEL23 DEL83 DEL8 DEL28 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL9 DEL40 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL33 DEL41 DEL8 DEL25 DEL66 DEL42 DEL66 DEL42 DEL42 DEL41 DEL42