minor improvement: remove unused instance fields
minor improvement: let TransientISFactory listen to states created by the WorkspaceItemStateFactory
JCR-1004 SPI: Add RepositoryService.getQNodeTypeDefinition 
         >> modify to RepositoryService.getQNodeTypeDefinitions(QName)
         >> adjust SPI implementations
         >> change NodeTypeRegistry to load definitions upon demand.



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@555209 13f79535-47bb-0310-9956-ffa450edef68

-            ElementIterator it = DomUtil.getChildren(reportDoc.getDocumentElement(), NodeTypeConstants.NODETYPE_ELEMENT, null);
-            List ntDefs = new ArrayList();
-            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
-            while (it.hasNext()) {
-                ntDefs.add(new QNodeTypeDefinitionImpl(it.nextElement(), resolver, getQValueFactory()));
-            }
-            // refresh node type definitions map
-            synchronized (nodeTypeDefinitions) {
-                nodeTypeDefinitions.clear();
-                for (Iterator defIt = ntDefs.iterator(); defIt.hasNext(); ) {
-                    QNodeTypeDefinition def = (QNodeTypeDefinition) defIt.next();
-                    nodeTypeDefinitions.put(def.getQName(), def);
-                }
-            }
-            return ntDefs.iterator();
+            return retrieveQNodeTypeDefinitions(sessionInfo, reportDoc);
-    public QNodeTypeDefinition getQNodeTypeDefinition(SessionInfo sessionInfo, QName nodetypeName) throws RepositoryException {
+    public Iterator getQNodeTypeDefinitions(SessionInfo sessionInfo, QName[] nodetypeNames) throws RepositoryException {
-            Element el = DomUtil.createElement(domFactory, NodeTypeConstants.XML_NODETYPE, NodeTypeConstants.NAMESPACE);
-            String jcrName = NameFormat.format(nodetypeName, resolver);
-            DomUtil.addChildElement(el, NodeTypeConstants.XML_NODETYPENAME, NodeTypeConstants.NAMESPACE, jcrName);
-            info.setContentElement(el);
+            for (int i = 0; i < nodetypeNames.length; i++) {
+                Element el = DomUtil.createElement(domFactory, NodeTypeConstants.XML_NODETYPE, NodeTypeConstants.NAMESPACE);
+                String jcrName = NameFormat.format(nodetypeNames[i], resolver);
+                DomUtil.addChildElement(el, NodeTypeConstants.XML_NODETYPENAME, NodeTypeConstants.NAMESPACE, jcrName);
+                info.setContentElement(el);
+            }
-            Element ntDefEl = DomUtil.getChildElement(reportDoc.getDocumentElement(), NodeTypeConstants.NODETYPE_ELEMENT, null);
-            QNodeTypeDefinition def = new QNodeTypeDefinitionImpl(ntDefEl, resolver, getQValueFactory());
-            // refresh node type definitions map
-            synchronized (nodeTypeDefinitions) {
-                nodeTypeDefinitions.put(def.getQName(), def);
-            }
-            return def;
+            return retrieveQNodeTypeDefinitions(sessionInfo, reportDoc);
+     * 
+     * @param sessionInfo
+     * @param reportDoc
+     * @return
+     * @throws RepositoryException
+     */
+    private Iterator retrieveQNodeTypeDefinitions(SessionInfo sessionInfo, Document reportDoc) throws RepositoryException {
+        ElementIterator it = DomUtil.getChildren(reportDoc.getDocumentElement(), NodeTypeConstants.NODETYPE_ELEMENT, null);
+            List ntDefs = new ArrayList();
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            while (it.hasNext()) {
+                ntDefs.add(new QNodeTypeDefinitionImpl(it.nextElement(), resolver, getQValueFactory()));
+            }
+            // refresh node type definitions map
+            synchronized (nodeTypeDefinitions) {
+                nodeTypeDefinitions.clear();
+                for (Iterator defIt = ntDefs.iterator(); defIt.hasNext(); ) {
+                    QNodeTypeDefinition def = (QNodeTypeDefinition) defIt.next();
+                    nodeTypeDefinitions.put(def.getQName(), def);
+                }
+            }
+            return ntDefs.iterator();
+    }
+
+    /**

INS31 INS43 INS44 INS43 UPD43 UPD42 INS29 INS83 MOV43 INS42 MOV44 INS44 MOV43 MOV8 INS42 INS43 INS42 INS42 UPD42 INS5 UPD42 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS8 MOV43 INS85 INS42 INS42 INS42 INS42 MOV60 MOV21 MOV21 MOV21 MOV60 INS41 INS24 INS41 INS32 INS58 INS27 INS37 INS8 INS32 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 MOV60 MOV60 MOV21 MOV21 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS34 INS2 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL40 DEL33 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL51 DEL42 DEL41