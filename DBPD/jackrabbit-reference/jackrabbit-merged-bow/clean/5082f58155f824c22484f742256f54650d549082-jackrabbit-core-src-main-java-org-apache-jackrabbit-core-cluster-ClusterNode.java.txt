JCR-929: Under Heavy load in a Cluster HTTP Threads Block and stall requests


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@546038 13f79535-47bb-0310-9956-ffa450edef68

-        public void locked(NodeId nodeId, boolean deep, String owner) {
+        public ClusterOperation create(NodeId nodeId, boolean deep, String owner) {
-                return;
+                return null;
-            Record record = null;
-            boolean succeeded = false;
-
-                record = journal.getProducer(PRODUCER_ID).append();
-                record.writeString(workspace);
-                write(record, nodeId, deep, owner);
-                record.writeChar('\0');
-                record.update();
-                setRevision(record.getRevision());
-                succeeded = true;
+                Record record = journal.getProducer(PRODUCER_ID).append();
+                return new LockOperation(ClusterNode.this, workspace, record,
+                        nodeId, deep, owner);
+                return null;
-            } finally {
-                if (!succeeded && record != null) {
-                    record.cancelUpdate();
-                }
+                return null;
-        public void unlocked(NodeId nodeId) {
+        public ClusterOperation create(NodeId nodeId) {
-                return;
+                return null;
-            Record record = null;
-            boolean succeeded = false;
-
-                record = journal.getProducer(PRODUCER_ID).append();
-                record.writeString(workspace);
-                write(record, nodeId);
-                record.writeChar('\0');
-                record.update();
-                setRevision(record.getRevision());
-                succeeded = true;
+                Record record = journal.getProducer(PRODUCER_ID).append();
+                return new LockOperation(ClusterNode.this, workspace, record,
+                        nodeId);
+                return null;
-            } finally {
-                if (!succeeded && record != null) {
-                    record.cancelUpdate();
-                }
+                return null;
-    private static void write(Record record, NodeId nodeId, boolean isDeep, String owner)
-            throws JournalException {
-
-        write(record, nodeId, true, isDeep, owner);
-    }
-
-    private static void write(Record record, NodeId nodeId)
-            throws JournalException {
-
-        write(record, nodeId, false, false, null);
-    }
-
-    private static void write(Record record, NodeId nodeId, boolean isLock,
-                              boolean isDeep, String owner)
-            throws JournalException {
+    /**
+     * Invoked when a cluster operation has ended. If <code>successful</code>,
+     * attempts to fill the journal record and update it, otherwise cancels
+     * the update.
+     *
+     * @param operation cluster operation
+     * @param successful <code>true</code> if the operation was successful and
+     *                   the journal record should be updated;
+     *                   <code>false</code> to revoke changes
+     */
+    public void ended(AbstractClusterOperation operation, boolean successful) {
+        Record record = operation.getRecord();
+        boolean succeeded = false;
-        record.writeChar('L');
-        record.writeNodeId(nodeId);
-        record.writeBoolean(isLock);
-        if (isLock) {
-            record.writeBoolean(isDeep);
-            record.writeString(owner);
+        try {
+            if (successful) {
+                record = operation.getRecord();
+                record.writeString(operation.getWorkspace());
+                operation.write();
+                record.writeChar('\0');
+                record.update();
+                setRevision(record.getRevision());
+                succeeded = true;
+            }
+        } catch (JournalException e) {
+            String msg = "Unable to create log entry: " + e.getMessage();
+            log.error(msg);
+        } catch (Throwable e) {
+            String msg = "Unexpected error while creating log entry.";
+            log.error(msg, e);
+        } finally {
+            if (!succeeded) {
+                record.cancelUpdate();
+            }

INS55 MOV31 MOV29 MOV42 MOV43 MOV23 MOV31 MOV31 INS31 MOV31 INS29 UPD42 INS44 INS44 INS43 INS42 INS8 MOV29 UPD83 MOV83 INS43 INS42 MOV44 INS8 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS42 MOV25 MOV54 UPD42 MOV42 MOV25 INS54 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 MOV43 INS8 INS8 INS12 INS12 INS32 INS25 INS60 INS41 INS60 INS41 INS44 INS8 INS44 INS8 INS42 INS42 INS42 MOV8 MOV38 INS33 MOV43 INS59 INS14 MOV43 INS41 INS41 INS33 MOV43 INS59 INS14 MOV43 INS42 INS60 MOV21 INS41 INS43 INS42 INS60 MOV21 INS41 INS42 MOV32 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS42 MOV32 INS43 INS52 INS42 INS42 INS42 INS43 INS59 INS33 INS42 INS43 INS59 INS33 INS42 INS42 UPD42 MOV42 INS42 MOV42 INS42 INS27 UPD42 UPD42 UPD42 INS42 INS42 INS45 UPD42 INS42 UPD42 UPD42 INS32 INS32 INS42 INS45 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL39 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL43 DEL42 DEL38 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL8 DEL55 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL9 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL9 DEL9 DEL33 DEL32 DEL21 DEL8 DEL31 DEL33 DEL42 DEL42 DEL42 DEL33 DEL27 DEL27 DEL83 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL13 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31