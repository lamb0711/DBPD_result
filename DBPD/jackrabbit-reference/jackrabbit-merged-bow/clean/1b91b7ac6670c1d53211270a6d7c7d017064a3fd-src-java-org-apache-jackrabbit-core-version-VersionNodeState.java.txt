- fixing some versioning issues. all versioning tests now pass.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@164980 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.state.NoSuchItemStateException;
+import org.apache.jackrabbit.core.virtual.VirtualValueProvider;
-public class VersionNodeState extends VirtualNodeState {
+public class VersionNodeState extends VirtualNodeState implements VirtualValueProvider {
+     *
+     * Additionally set this as virtual value provider for the 'predecessors'
+     * and 'successors' properties.
-    public VirtualPropertyState getProperty(QName name)
-            throws NoSuchItemStateException {
-        VirtualPropertyState state = super.getProperty(name);
-        if (state != null) {
-            if (name.equals(JCR_VERSIONLABELS)) {
-                state.setValues(InternalValue.create(v.getLabels()));
-            } else if (name.equals(JCR_PREDECESSORS)) {
-                InternalVersion[] preds = v.getPredecessors();
-                InternalValue[] predV = new InternalValue[preds.length];
-                for (int i = 0; i < preds.length; i++) {
-                    predV[i] = InternalValue.create(new UUID(preds[i].getId()));
-                }
-                state.setValues(predV);
-            } else if (name.equals(JCR_SUCCESSORS)) {
-                InternalVersion[] succs = v.getSuccessors();
-                InternalValue[] succV = new InternalValue[succs.length];
-                for (int i = 0; i < succs.length; i++) {
-                    succV[i] = InternalValue.create(new UUID(succs[i].getId()));
-                }
-                state.setValues(succV);
-            }
+    protected VirtualPropertyState getOrCreatePropertyState(QName name, int type, boolean multiValued) throws RepositoryException {
+        VirtualPropertyState prop =
+                super.getOrCreatePropertyState(name, type, multiValued);
+        // attach us as value provider
+        if (name.equals(JCR_PREDECESSORS) || name.equals(JCR_SUCCESSORS)) {
+            prop.setValueProvider(this);
-        return state;
+        return prop;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public InternalValue[] getVirtualValues(QName name) {
+        if (name.equals(JCR_PREDECESSORS)) {
+            InternalVersion[] preds = v.getPredecessors();
+            InternalValue[] predV = new InternalValue[preds.length];
+            for (int i = 0; i < preds.length; i++) {
+                predV[i] = InternalValue.create(new UUID(preds[i].getId()));
+            }
+            return predV;
+        } else if (name.equals(JCR_SUCCESSORS)) {
+            InternalVersion[] succs = v.getSuccessors();
+            InternalValue[] succV = new InternalValue[succs.length];
+            for (int i = 0; i < succs.length; i++) {
+                succV[i] = InternalValue.create(new UUID(succs[i].getId()));
+            }
+            return succV;
+        } else {
+            return null;
+        }

MOV26 UPD40 INS43 INS31 INS42 INS29 INS83 MOV43 INS42 INS44 INS44 INS44 INS43 INS8 INS5 INS42 MOV8 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS25 INS41 INS43 INS85 MOV25 INS65 INS66 INS66 INS42 MOV43 INS59 INS27 INS8 INS42 UPD42 MOV42 INS42 INS48 INS32 INS32 INS21 INS41 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS41 INS41 INS42 INS42 INS52 INS42 INS33 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL43 DEL42 DEL42 DEL42 DEL48 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL41 DEL8