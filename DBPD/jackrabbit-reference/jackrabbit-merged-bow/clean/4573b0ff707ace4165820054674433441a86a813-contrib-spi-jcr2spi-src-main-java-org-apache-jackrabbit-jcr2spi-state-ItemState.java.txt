work in progress

- move getPath from HierarchyManager to ItemState
- remove unused ZombieHierarchyManager
- remove protected methods in HierarchyManagerImpl, that were used by Zombie-HM.
- ItemStateFactory: add method createRootState(ItemStateManager)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@448191 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.Path;
+import org.apache.jackrabbit.name.MalformedPathException;
+import org.apache.jackrabbit.name.QName;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.RepositoryException;
+     * Returns the qualified path of this item state.
+     *
+     * @return qualified path
+     * @throws ItemNotFoundException
+     * @throws RepositoryException
+     */
+    public Path getQPath() throws ItemNotFoundException, RepositoryException {
+        // shortcut for root state
+        if (getParent() == null) {
+            return Path.ROOT;
+        }
+
+        // build path otherwise
+        try {
+            Path.PathBuilder builder = new Path.PathBuilder();
+            buildPath(builder, this);
+            return builder.getPath();
+        } catch (NoSuchItemStateException e) {
+            String msg = "Failed to build path of " + this;
+            log.debug(msg);
+            throw new ItemNotFoundException(msg, e);
+        } catch (ItemStateException e) {
+            String msg = "Failed to build path of " + this;
+            log.debug(msg);
+            throw new RepositoryException(msg, e);
+        } catch (MalformedPathException e) {
+            String msg = "Failed to build path of " + this;
+            throw new RepositoryException(msg, e);
+        }
+    }
+
+    /**
+     * Adds the path element of an item id to the path currently being built.
+     * On exit, <code>builder</code> contains the path of <code>state</code>.
+     *
+     * @param builder builder currently being used
+     * @param state   item to find path of
+     */
+    private void buildPath(Path.PathBuilder builder, ItemState state)
+            throws ItemStateException, RepositoryException {
+        NodeState parentState = state.getParent();
+        // shortcut for root state
+        if (parentState == null) {
+            builder.addRoot();
+            return;
+        }
+
+        // recursively build path of parent
+        buildPath(builder, parentState);
+
+        if (state.isNode()) {
+            NodeState nodeState = (NodeState) state;
+            ChildNodeEntry entry = parentState.getChildNodeEntry(nodeState);
+            if (entry == null) {
+                String msg = "Failed to build path of " + state + ": parent has no such child entry.";
+                log.debug(msg);
+                throw new ItemNotFoundException(msg);
+            }
+            // add to path
+            if (entry.getIndex() == Path.INDEX_DEFAULT) {
+                builder.addLast(entry.getName());
+            } else {
+                builder.addLast(entry.getName(), entry.getIndex());
+            }
+        } else {
+            PropertyState propState = (PropertyState) state;
+            QName name = propState.getQName();
+            // add to path
+            builder.addLast(name);
+        }
+    }
+
+    /**

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS43 INS42 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS42 INS42 INS25 INS54 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS21 INS25 INS66 INS66 INS42 INS42 INS27 INS8 INS8 INS12 INS12 INS12 INS66 INS66 INS42 INS66 INS42 INS66 INS40 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS8 INS8 INS32 INS33 INS41 INS60 INS21 INS41 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS25 INS25 INS60 INS60 INS21 INS42 INS40 INS43 INS59 INS32 INS32 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS53 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS43 INS59 INS43 INS59 INS32 INS40 INS42 INS14 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS14 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS53 INS32 INS40 INS21 INS21 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS40 INS45 INS52 INS42 INS45 INS52 INS42 INS45 INS52 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42