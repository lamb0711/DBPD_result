JCR-287 session.setNamespacePrefix() creates ambiguous mappings
(also simplified implementation while at it :)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@351708 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Set;
+import java.util.Arrays;
-    /** The global namespace prefixes hidden by local namespace mappings. */
-    private Set hiddenPrefixes = new HashSet();
-
-        // check if namespace exists (the following call will
+        // verify that namespace exists (the following call will
-        String globalPrefix = nsReg.getPrefix(uri);
+        nsReg.getPrefix(uri);
-        String globalURI = null;
-        try {
-            globalURI = nsReg.getURI(prefix);
-        } catch (NamespaceException nse) {
-            // ignore
-        }
-        if (globalURI != null) {
-            // prefix is already mapped in global namespace registry;
-            // check if it is redundant or if it refers to a namespace
-            // that has been locally remapped, thus hiding it
-            if (!hiddenPrefixes.contains(prefix)) {
-                if (uri.equals(globalURI) && prefix.equals(globalPrefix)) {
-                    // redundant mapping, silently ignore
-                    return;
-                }
-                // we don't allow to hide a namespace because we can't
-                // guarantee that there are no references to it
-                // (in names of nodes/properties/node types etc.)
-                throw new NamespaceException(prefix
-                        + ": prefix is already mapped to the namespace: "
-                        + globalURI);
+        if (Arrays.asList(getPrefixes()).contains(prefix)) {
+            // prefix is already in use
+            if (getURI(prefix).equals(uri)) {
+                // redundant mapping, silently ignore
+                return;
+            throw new NamespaceException("prefix already in use: " + prefix);
-            if (oldPrefix.equals(prefix)) {
-                // redundant mapping, silently ignore
-                return;
-            }
-            // resurrect hidden global prefix
-            hiddenPrefixes.remove(nsReg.getPrefix(uri));
-        // check if prefix is already locally mapped
-        String oldURI = (String) prefixToURI.get(prefix);
-        if (oldURI != null) {
-            // resurrect hidden global prefix
-            hiddenPrefixes.remove(nsReg.getPrefix(oldURI));
-            // remove old mapping
-            uriToPrefix.remove(oldURI);
-            prefixToURI.remove(prefix);
-        }
-
-        if (!prefix.equals(globalPrefix)) {
-            // store new mapping
-            prefixToURI.put(prefix, uri);
-            uriToPrefix.put(uri, prefix);
-            hiddenPrefixes.add(globalPrefix);
-        }
+        // store new mapping
+        prefixToURI.put(prefix, uri);
+        uriToPrefix.put(uri, prefix);
-     * Returns all prefixes.
+     * Returns all prefixes currently mapped.
-     * @return
-     * @throws RepositoryException
+     * @return an array holding all currently mapped prefixes
+     * @throws RepositoryException if an error occurs
-        // global prefixes
-        String[] globalPrefixes = nsReg.getPrefixes();
-        for (int i = 0; i < globalPrefixes.length; i++) {
-            if (!hiddenPrefixes.contains(globalPrefixes[i])) {
-                prefixes.add(globalPrefixes[i]);
+        String[] uris = nsReg.getURIs();
+        for (int i = 0; i < uris.length; i++) {
+            // check local mapping
+            String prefix = (String) uriToPrefix.get(uris[i]);
+            if (prefix == null) {
+                // globally mapped
+                prefix = nsReg.getPrefix(uris[i]);
+            prefixes.add(prefix);
-        // local prefixes
-        prefixes.addAll(prefixToURI.keySet());
-            // check if valid
-            String prefix = nsReg.getPrefix(candidate.getNamespaceURI());
-            if (!hiddenPrefixes.contains(prefix)) {
+            // make sure global prefix is not hidden because of
+            // locally remapped uri
+            if (!uriToPrefix.containsKey(candidate.getNamespaceURI())) {
-        } catch (NamespaceException e) {
-            // may be thrown by nsReg.getPrefix() but should never happend
-            // because we got the namespace from the nsReg itself
-            throw new UnknownPrefixException(name);
-        if (!hiddenPrefixes.contains(prefix)) {
-            return nsReg.getURI(prefix);
+        uri = nsReg.getURI(prefix);
+        if (uri != null) {
+            // make sure global prefix is not hidden because of
+            // locally remapped uri
+            if (!uriToPrefix.containsKey(uri)) {
+                return uri;
+            }
-            // locally re-mappped
+            // locally remappped

UPD40 INS21 MOV25 MOV21 MOV21 INS24 MOV21 INS25 MOV32 INS32 UPD66 INS66 INS66 MOV58 MOV27 MOV37 INS8 INS27 INS8 INS32 MOV42 MOV42 UPD42 UPD40 INS60 INS25 MOV21 UPD42 INS42 INS33 MOV25 INS42 INS42 INS32 INS32 UPD42 MOV43 INS59 INS27 MOV8 UPD42 MOV42 INS32 MOV42 UPD42 MOV42 MOV43 INS42 INS11 INS42 INS33 UPD42 UPD42 MOV42 MOV32 UPD42 MOV42 MOV42 UPD45 UPD42 MOV43 INS32 INS7 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 MOV2 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV2 UPD42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL32 DEL38 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL32 DEL42 DEL32 DEL32 DEL38 DEL25 DEL8 DEL24 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32