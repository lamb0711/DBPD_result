JCR-1591: JSR 283: NodeType Management (WIP...)
JCR-2091: Searchability settings in PropertyDefinition (WIP...)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@774397 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.query.qom.QueryObjectModelConstants;
+            ntd.setAbstract(false);
+            ntd.setQueryable(true);
-                // ntd.setNoQuery(true);
+                ntd.setQueryable(false);
+                pdi.setFullTextSearchable(true);
+                pdi.setQueryOrderable(true);
+                pdi.setAvailableQueryOperators(new String[]{
+                        QueryObjectModelConstants.JCR_OPERATOR_EQUAL_TO,
+                        QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN,
+                        QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO,
+                        QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN,
+                        QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO,
+                        QueryObjectModelConstants.JCR_OPERATOR_LIKE,
+                        QueryObjectModelConstants.JCR_OPERATOR_NOT_EQUAL_TO
+                });
+
+        } else if (currentTokenEquals(Lexer.WEAKREFERENCE)) {
+            pdi.setRequiredType(PropertyType.WEAKREFERENCE);
+        } else if (currentTokenEquals(Lexer.URI)) {
+            pdi.setRequiredType(PropertyType.URI);
+        } else if (currentTokenEquals(Lexer.DECIMAL)) {
+            pdi.setRequiredType(PropertyType.DECIMAL);
+            } else if (currentTokenEquals(Lexer.NOFULLTEXT)) {
+                pdi.setFullTextSearchable(false);
+            } else if (currentTokenEquals(Lexer.NOQUERYORDER)) {
+                pdi.setQueryOrderable(false);
+            } else if (currentTokenEquals(Lexer.QUERYOPS)) {
+                doPropertyQueryOperators(pdi);
+     * processes the property value constraints
+     *
+     * @param pdi
+     * @throws ParseException
+     */
+    private void doPropertyQueryOperators(PropDefImpl pdi) throws ParseException {
+        if (!currentTokenEquals(Lexer.QUERYOPS)) {
+            return;
+        }
+        nextToken();
+        if (!currentTokenEquals(Lexer.SINGLE_QUOTE)) {
+            lexer.fail("Missing \' delimiter for beginning of query operators list");
+        }
+        List queryOps = new ArrayList();
+        do {
+            nextToken();
+            if (currentTokenEquals(Lexer.QUEROPS_EQUAL)) {
+                queryOps.add(QueryObjectModelConstants.JCR_OPERATOR_EQUAL_TO);
+            } else if (currentTokenEquals(Lexer.QUEROPS_NOTEQUAL)) {
+                queryOps.add(QueryObjectModelConstants.JCR_OPERATOR_NOT_EQUAL_TO);
+            } else if (currentTokenEquals(Lexer.QUEROPS_LESSTHAN)) {
+                queryOps.add(QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN);
+            } else if (currentTokenEquals(Lexer.QUEROPS_LESSTHANOREQUAL)) {
+                queryOps.add(QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO);
+            } else if (currentTokenEquals(Lexer.QUEROPS_GREATERTHAN)) {
+                queryOps.add(QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN);
+            } else if (currentTokenEquals(Lexer.QUEROPS_GREATERTHANOREQUAL)) {
+                queryOps.add(QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO);
+            } else if (currentTokenEquals(Lexer.QUEROPS_LIKE)) {
+                queryOps.add(QueryObjectModelConstants.JCR_OPERATOR_LIKE);
+            } else if (currentTokenEquals(Lexer.SINGLE_QUOTE)) {
+                nextToken();
+                break;
+            } else {
+                lexer.fail("'" + currentToken + "' is not a valid query operator");
+            }
+            nextToken();
+        } while (currentTokenEquals(Lexer.LIST_DELIMITER));
+        pdi.setAvailableQueryOperators((String[]) queryOps.toArray(new String[queryOps.size()]));
+    }
+
+    /**

INS26 INS40 INS31 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS43 INS42 INS42 INS25 INS21 INS25 INS60 INS19 INS21 INS66 INS42 INS42 INS42 INS38 INS8 INS32 INS38 INS8 INS43 INS59 INS8 INS32 INS32 INS21 INS21 INS32 INS41 INS42 INS32 INS21 INS42 INS42 INS14 INS21 INS25 INS21 INS42 INS40 INS42 INS42 INS11 INS32 INS32 INS42 INS40 INS42 INS40 INS32 INS43 INS32 INS32 INS8 INS25 INS32 INS5 INS32 INS42 INS42 INS9 INS42 INS42 INS9 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS43 INS85 INS42 INS42 INS3 INS32 INS32 INS32 INS32 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS5 INS32 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS3 INS42 INS42 INS40 INS32 INS42 INS40 INS21 INS32 INS8 INS25 INS43 INS85 INS42 INS42 INS21 INS5 INS4 INS42 INS42 INS40 INS32 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS32 INS43 INS85 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS25 INS42 INS42 INS40 INS32 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS42 INS9 INS42 MOV32 MOV8 INS25 INS42 INS42 INS40 INS32 INS42 INS40 INS21 INS32 INS8 INS25 INS32 INS8 INS25 INS42 INS42 INS40 INS32 INS42 INS40 INS21 INS32 INS8 INS8 INS42 INS40 INS21 INS32 INS8 MOV25 INS42 INS42 INS40 INS32 INS42 INS40 INS21 INS10 INS21 INS32 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS42 INS40 INS32 INS32 INS42 INS42 INS40 INS32 INS42 INS40 INS21 MOV32 MOV8 INS25 INS42 INS42 INS42 INS27 INS42 INS42 INS40 INS32 INS32 INS8 INS25 INS45 INS42 INS45 INS42 INS42 INS40 INS42 INS40 INS21 INS32 INS8 MOV25 INS32 INS42 INS40 INS21 INS32 INS8 INS42 INS42 INS9 INS32 INS42 INS40 INS21 INS42 INS42 INS9 INS32 INS42 INS42