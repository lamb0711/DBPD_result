JCR-2744: Avoid element arrays in PathImpl

Use new path construction mechanisms in PathBuilder and PathFactoryImpl

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@995787 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.PathFactory;
-import org.apache.jackrabbit.spi.NameFactory;
+import java.util.ArrayList;
-import java.util.List;
-import java.util.ArrayList;
-import java.util.Arrays;
+
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.PathFactory;
-    /**
-     * the root path
-     */
-    private static final Path ROOT = RootPath.INSTANCE;
-
-        }
-        List<Path.Element> l = new ArrayList<Path.Element>();
-        l.addAll(Arrays.asList(parent.getElements()));
-        l.addAll(Arrays.asList(relPath.getElements()));
-
-        Builder pb;
-        try {
-            pb = new Builder(l);
-        } catch (IllegalArgumentException iae) {
-             throw new RepositoryException(iae.getMessage());
-        }
-        Path path = pb.getPath();
-        if (normalize) {
-            return path.getNormalizedPath();
-            return path;
+            Path path = parent.resolve(relPath);
+            if (normalize) {
+                return path.getNormalizedPath();
+            } else {
+                return path;
+            }
-        List<Path.Element> elements = new ArrayList<Path.Element>();
-        elements.addAll(Arrays.asList(parent.getElements()));
-        elements.add(createElement(name));
-
-        Builder pb;
-        try {
-            pb = new Builder(elements);
-        } catch (IllegalArgumentException iae) {
-             throw new RepositoryException(iae.getMessage());
-        }
-        Path path = pb.getPath();
-        if (normalize) {
-            return path.getNormalizedPath();
-        } else {
-            return path;
-        }
+        return create(parent, name, Path.INDEX_UNDEFINED, normalize);
-        List<Path.Element> elements = new ArrayList<Path.Element>();
-        elements.addAll(Arrays.asList(parent.getElements()));
-        elements.add(createElement(name, index));
-
-        Builder pb;
-        try {
-            pb = new Builder(elements);
-        } catch (IllegalArgumentException iae) {
-             throw new RepositoryException(iae.getMessage());
+        if (ROOT_NAME.equals(name)) {
+            throw new IllegalArgumentException();
-        Path path = pb.getPath();
+        NameElement element = NameElement.create(name, index);
+        Path path = new NamePath(parent, element).getNormalizedPath();
-        Path.Element elem = createElement(name);
-        return new Builder(new Path.Element[]{elem}).getPath();
+        return create(name, Path.INDEX_UNDEFINED);
+        } else if (CURRENT_NAME.equals(name)) {
+            if (index == Path.INDEX_UNDEFINED) {
+                return new CurrentPath(null);
+            } else {
+                throw new IllegalArgumentException();
+            }
+        } else if (PARENT_NAME.equals(name)) {
+            if (index == Path.INDEX_UNDEFINED) {
+                return new ParentPath(null);
+            } else {
+                throw new IllegalArgumentException();
+            }
+        } else if (ROOT_NAME.equals(name)) {
+            if (index == Path.INDEX_UNDEFINED) {
+                return RootPath.INSTANCE;
+            } else {
+                throw new IllegalArgumentException();
+            }
+        } else {
+            return new NamePath(null, NameElement.create(name, index));
-        Path.Element elem = createElement(name, index);
-        return new Builder(new Path.Element[]{elem}).getPath();
+    }
+
+    public Path create(Path.Element element) {
+        if (element.denotesCurrent()) {
+            return new CurrentPath(null);
+        } else if (element.denotesIdentifier()) {
+            return new IdentifierPath(element);
+        } else if (element.denotesName()) {
+            return new NamePath(null, element);
+        } else if (element.denotesParent()) {
+            return new ParentPath(null);
+        } else if (element.denotesRoot()) {
+            return RootPath.INSTANCE;
+        } else {
+            throw new IllegalArgumentException(
+                    "Unknown path element type: " + element);
+        }
-        return new Builder(elements).getPath();
+        Path path = null;
+        for (Path.Element element : elements) {
+            if (element.denotesCurrent()) {
+                path = new CurrentPath(path);
+            } else if (element.denotesIdentifier()) {
+                if (path != null) {
+                    throw new IllegalArgumentException();
+                }
+                path = new IdentifierPath(element);
+            } else if (element.denotesName()) {
+                path = new NamePath(path, element);
+            } else if (element.denotesParent()) {
+                if (path != null && path.isAbsolute() && path.getDepth() == 0) {
+                    throw new IllegalArgumentException();
+                }
+                path = new ParentPath(path);
+            } else if (element.denotesRoot()) {
+                if (path != null) {
+                    throw new IllegalArgumentException();
+                }
+                path = RootPath.INSTANCE;
+            }
+        }
+        return path;
-        return new Builder(list).getPath();
+        return create(list.toArray(new Path.Element[list.size()]));
-        return ROOT;
-    }
-
-    /**
-     * Builder internal class
-     */
-    private static final class Builder {
-
-        /**
-         * the lpath elements of the constructed path
-         */
-        private final Path.Element[] elements;
-
-        /**
-         * Creates a new Builder and initialized it with the given path
-         * elements.
-         *
-         * @param elemList
-         * @throws IllegalArgumentException if the given elements array is null
-         * or has a zero length or would otherwise constitute an invalid path
-         */
-        private Builder(List<Path.Element> elemList) throws IllegalArgumentException {
-            this(elemList.toArray(new Path.Element[elemList.size()]));
-        }
-
-        /**
-         * Creates a new Builder and initialized it with the given path
-         * elements.
-         *
-         * @param elements
-         * @throws IllegalArgumentException if the given elements array is null
-         * or has a zero length or would otherwise constitute an invalid path
-         */
-        private Builder(Path.Element[] elements) throws IllegalArgumentException {
-            if (elements == null || elements.length == 0) {
-                throw new IllegalArgumentException("Cannot build path from null or 0 elements.");
-            }
-
-            this.elements = elements;
-            if (elements.length > 1) {
-                boolean absolute = elements[0].denotesRoot();
-                int depth = 0;
-                for (int i = 0; i < elements.length; i++) {
-                    Path.Element elem = elements[i];
-                    if (elem.denotesName()) {
-                        depth++;
-                    } else if (elem.denotesRoot()) {
-                        if (i > 0) {
-                            throw new IllegalArgumentException("Invalid path: The root element may only occur at the beginning.");
-                        }
-                    } else if (elem.denotesIdentifier()) {
-                        throw new IllegalArgumentException("Invalid path: The identifier element may only occur at the beginning of a single element path.");
-                    } else  if (elem.denotesParent()) {
-                        depth--;
-                        if (absolute && depth < 0) {
-                            throw new IllegalArgumentException("Invalid path: Too many parent elements.");
-                        }
-                    }
-                }
-            }
-        }
-
-        /**
-         * Assembles the built path and returns a new {@link Path}.
-         *
-         * @return a new {@link Path}
-         */
-        private Path getPath() {
-            Path path = null;
-            for (Path.Element element : elements) {
-                if (element.denotesCurrent()) {
-                    path = new CurrentPath(path);
-                } else if (element.denotesIdentifier()) {
-                    path = new IdentifierPath(element);
-                } else if (element.denotesName()) {
-                    path = new NamePath(path, element);
-                } else if (element.denotesParent()) {
-                    path = new ParentPath(path);
-                } else if (element.denotesRoot()) {
-                    path = RootPath.INSTANCE;
-                }
-            }
-            return path;
-        }
+        return RootPath.INSTANCE;

MOV26 MOV26 MOV26 MOV26 INS31 INS31 MOV31 MOV31 MOV29 INS83 MOV43 INS42 MOV44 MOV44 MOV44 MOV43 MOV43 INS8 MOV29 MOV43 MOV44 MOV44 MOV44 MOV43 MOV29 MOV43 MOV44 MOV44 MOV44 MOV44 MOV43 MOV43 MOV29 MOV83 MOV43 MOV42 MOV44 MOV44 MOV43 INS8 UPD83 MOV43 UPD42 MOV29 UPD83 UPD42 MOV44 MOV43 MOV25 INS41 INS25 INS60 INS41 INS25 INS43 UPD42 MOV41 INS8 INS32 INS32 INS8 UPD43 MOV43 INS59 MOV43 INS59 INS32 MOV27 MOV8 INS25 MOV40 INS32 INS8 INS25 INS32 INS40 INS60 INS25 INS42 INS42 INS42 INS40 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS53 UPD42 INS42 INS32 INS42 INS32 UPD42 MOV42 MOV42 INS40 INS32 INS8 INS25 INS42 UPD42 MOV42 INS41 INS32 INS8 INS25 INS42 MOV32 MOV43 INS59 MOV42 INS8 INS8 INS14 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 INS42 INS42 MOV42 INS25 INS32 INS8 INS25 INS14 INS42 INS42 INS41 MOV32 MOV8 MOV25 INS42 UPD42 MOV3 INS42 INS42 INS32 INS41 MOV41 MOV43 INS43 INS42 INS42 INS27 INS8 INS8 INS42 INS42 UPD42 MOV42 MOV25 INS32 INS8 INS8 INS43 INS33 INS14 UPD42 INS41 MOV25 INS32 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS40 INS41 MOV53 INS27 INS42 INS42 MOV42 INS25 INS41 INS42 INS43 INS42 INS14 UPD42 UPD42 INS41 MOV8 INS25 INS42 INS42 INS14 INS42 INS40 INS53 INS27 INS8 INS8 INS14 INS42 INS43 INS33 INS42 INS14 UPD42 UPD42 INS41 INS27 MOV8 UPD43 MOV43 INS33 MOV43 INS14 INS14 INS42 INS40 MOV41 INS53 INS43 INS33 INS32 INS42 INS43 INS33 INS40 INS42 INS33 INS25 UPD42 INS43 INS33 MOV43 INS40 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS27 MOV8 MOV25 INS42 MOV43 INS45 INS42 INS27 INS27 INS27 INS27 INS32 INS32 INS34 UPD42 MOV42 MOV33 INS42 INS33 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL40 DEL59 DEL23 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL42 DEL43 DEL40 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL42 DEL43 DEL40 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL44 DEL42 DEL43 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL59 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL42 DEL43 DEL40 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL40 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL40 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL14 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL43 DEL85 DEL5 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL37 DEL21 DEL42 DEL34 DEL27 DEL25 DEL42 DEL37 DEL21 DEL42 DEL42 DEL34 DEL27 DEL27 DEL25 DEL45 DEL42 DEL42 DEL32 DEL25 DEL40 DEL34 DEL27 DEL39 DEL42 DEL42 DEL34 DEL2 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL40 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL25 DEL8 DEL24 DEL8 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL42 DEL65 DEL65 DEL29 DEL45 DEL45 DEL27 DEL40 DEL34 DEL27 DEL27 DEL45 DEL83 DEL42 DEL25 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL83 DEL42 DEL8 DEL31 DEL42 DEL43 DEL14 DEL42 DEL4 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL41 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL40 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL44 DEL40 DEL43 DEL85 DEL5 DEL32 DEL3 DEL32 DEL17 DEL8 DEL31 DEL55