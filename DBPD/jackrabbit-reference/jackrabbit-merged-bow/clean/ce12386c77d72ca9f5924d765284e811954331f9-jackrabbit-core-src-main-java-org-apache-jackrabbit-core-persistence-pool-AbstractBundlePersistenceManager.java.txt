JCR-2699: Improve read/write concurrency

Even the tiny synchronized block in the LRU cache becomes a source of lock contention, so replace it with a segmented cache that has now single synchronization block over the entire cache. The downside is a slight deviation from the LRU eviction policy.

Replaced the BundleCache and LRUNodeIdCache classes with the new ConcurrentCache implementation. Instead of using a separate data structure, a special MISSING sentinel bundle is used to to mark non-existent bundles.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1004182 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.cache.ConcurrentCache;
-import org.apache.jackrabbit.core.persistence.util.BundleCache;
-import org.apache.jackrabbit.core.persistence.util.LRUNodeIdCache;
- * {@link BundleCache} that caches already loaded bundles. The other is the
+ * bundle cache that caches already loaded bundles. The other is the
+    /** Sentinel instance used to mark a non-existent bundle in the cache */
+    private static final NodePropBundle MISSING =
+        new NodePropBundle(new NodeId());
+
-    private BundleCache bundles;
-
-    /** the cache of non-existent bundles */
-    private LRUNodeIdCache missing;
+    private ConcurrentCache<NodeId, NodePropBundle> bundles;
-            if (state.isNode()) {
-                bundles.remove((NodeId) state.getId());
-            } else {
-                bundles.remove(state.getParentId());
-            }
+            bundles.remove(getBundleId(state));
-            if (state.isNode()) {
-                bundles.remove((NodeId) state.getId());
-            } else {
-                bundles.remove(state.getParentId());
-            }
+            bundles.remove(getBundleId(state));
-            if (state.isNode()) {
-                missing.remove((NodeId) state.getId());
-            } else {
-                missing.remove(state.getParentId());
-            }
+            // There may have been a cache miss entry
+            bundles.remove(getBundleId(state));
+        }
+    }
+
+    private NodeId getBundleId(ItemState state) {
+        if (state.isNode()) {
+            return (NodeId) state.getId();
+        } else {
+            return state.getParentId();
-        bundles = new BundleCache(bundleCacheSize);
-        missing = new LRUNodeIdCache();
+        bundles = new ConcurrentCache<NodeId, NodePropBundle>();
+        bundles.setMaxMemorySize(bundleCacheSize);
-     *  Closes the persistence manager, release acquired resourecs.
+     *  Closes the persistence manager, release acquired resources.
-        missing.clear();
-                missing.clear();
-        if (missing.contains(id)) {
-            return null;
-        }
-        if (bundle == null) {
+        if (bundle == MISSING) {
+            return null;
+        } else if (bundle == null) {
-                    bundles.put(bundle);
+                    bundles.put(id, bundle, bundle.getSize());
-                    missing.put(id);
+                    bundles.put(id, MISSING, 16);
-        missing.put(bundle.getId());
+        bundles.put(bundle.getId(), MISSING, 16);
-        missing.remove(bundle.getId());
-        // only put to cache if already exists. this is to ensure proper overwrite
-        // and not creating big contention during bulk loads
-        if (bundles.contains(bundle.getId())) {
-            bundles.put(bundle);
+        // only put to cache if already exists. this is to ensure proper
+        // overwrite and not creating big contention during bulk loads
+        if (bundles.containsKey(bundle.getId())) {
+            bundles.remove(bundle.getId());
+            bundles.put(bundle.getId(), bundle, bundle.getSize());

MOV26 MOV23 UPD40 INS31 INS31 INS83 INS83 UPD43 INS74 MOV29 MOV83 MOV83 MOV39 MOV42 MOV44 INS8 INS83 INS43 INS42 INS44 MOV8 UPD66 UPD42 UPD42 INS14 INS43 INS43 INS43 INS70 INS70 INS70 INS42 INS43 INS42 INS25 INS25 UPD66 INS43 INS14 INS42 INS42 UPD42 MOV42 MOV44 MOV32 INS8 MOV44 MOV32 INS8 MOV44 MOV32 INS8 INS42 INS32 UPD66 INS27 MOV8 INS25 MOV32 INS8 INS42 INS43 MOV21 MOV21 MOV21 INS41 INS41 INS42 INS42 INS42 INS42 INS42 MOV27 MOV8 UPD42 INS42 INS34 UPD42 MOV21 MOV21 INS42 MOV11 MOV32 INS74 INS32 INS32 INS43 INS43 INS43 UPD42 INS32 MOV32 INS32 INS42 MOV42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS34 INS42 INS42 DEL40 DEL26 DEL42 DEL65 DEL43 DEL42 DEL43 DEL42 DEL32 DEL11 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL8 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL32 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL70 DEL8 DEL31 DEL43 DEL42 DEL42 DEL42 DEL43 DEL14 DEL7 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL25 DEL25 DEL8 DEL25