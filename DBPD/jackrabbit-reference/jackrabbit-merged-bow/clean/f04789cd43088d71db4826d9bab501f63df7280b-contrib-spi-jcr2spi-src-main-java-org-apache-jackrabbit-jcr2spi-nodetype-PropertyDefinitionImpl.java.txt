work in progress

jcr2spi
- HierarchyManager: fixing methods with ItemId param
- HierarchyManagerImpl(s): removing unused methods
- ItemManagerImpl: replacing NodeId as cacheKey
- ItemImpl: remove ISM field

jcr2spi/xml
- ImporterImpl renamed to SessionImporter (used for s-import only)
- xml import: Use UUID String instead of creating NodeIds
- ReferenceChangeTracker: remove usage of spi NodeId

jcr2spi/state
- SessionItemStateManager: ValueFactory not needed since QPropertyDefinition returns qualified values.

jcr2spi/util
- LogUtil: add 'saveGetJCRName' utility method

jcr2spi/locking
- locking: LockManager to use NodeState instead of NodeId
- locking: removing locktoken from Session checks if Session is lock holder

jcr2spi/query
- NodeIteratorImpl: fix commented code, that allows to retrieve
  search results from IdIterator returned from QueryInfo
- minor reformatting, javadoc

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430791 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.PropertyType;
+import java.io.IOException;
-    
+
-        QValue[] defVals = QValue.create(((QPropertyDefinition) itemDef).getDefaultValues());
-        if (defVals == null) {
-            return null;
+        QPropertyDefinition pDef = ((QPropertyDefinition) itemDef);
+        QValue[] defVals;
+        if (pDef.getRequiredType() == PropertyType.BINARY) {
+            try {
+                defVals = QValue.create(pDef.getDefaultValuesAsStream(), pDef.getRequiredType());
+            } catch (IOException e) {
+                String propName = (getName() == null) ? "[null]" : getName();
+                log.error("Illegal default value specified for property " + propName + " in node type " + getDeclaringNodeType(), e);
+                return null;
+            }
+        } else {
+            defVals = QValue.create(pDef.getDefaultValues(), pDef.getRequiredType());
+
-            } catch (RepositoryException re) {
+            } catch (RepositoryException e) {
-                log.error("illegal default value specified for property "
-                        + propName + " in node type " + getDeclaringNodeType(),
-                        re);
+                log.error("illegal default value specified for property " + propName + " in node type " + getDeclaringNodeType(), e);

INS26 INS26 INS40 INS40 INS60 INS43 MOV5 INS59 INS27 INS8 INS42 INS42 MOV36 INS42 INS32 INS40 INS54 INS21 INS42 INS42 INS8 INS12 INS7 INS21 INS44 INS8 INS42 INS32 INS7 INS43 INS42 INS60 INS21 MOV41 INS42 INS42 INS32 INS32 UPD42 INS42 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS16 INS42 INS42 INS27 INS42 UPD42 INS42 INS42 INS42 INS42 INS36 INS45 INS32 INS45 INS42 INS45 INS32 INS27 INS42 INS42 INS32 MOV33 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL27