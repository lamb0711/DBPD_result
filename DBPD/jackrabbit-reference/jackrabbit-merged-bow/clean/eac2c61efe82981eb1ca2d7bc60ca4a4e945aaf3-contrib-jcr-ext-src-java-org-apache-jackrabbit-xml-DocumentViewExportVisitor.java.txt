JCR-EXT: Drop the custom qualified name implementation in favor of the jackrabbit-commons one.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@326962 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.Name;
+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.NoPrefixDeclaredException;
+import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.SessionNamespaceResolver;
+import org.apache.jackrabbit.name.UnknownPrefixException;
-    /** The JCR namespace URI. */
-    private static final String JCR_URI = "http://www.jcp.org/jcr/1.0";
-
-    /** The special jcr:xmltext property name. */
-    private static final Name XMLTEXT = new Name(JCR_URI, "xmltext");
-
-    /** The special jcr:xmlcharacters property name. */
-    private static final Name XMLCHARACTERS = new Name(JCR_URI, "xmlcharacters");
-
-            if (!node.getName().equals(XMLTEXT)) {
+            if (!node.getName().equals(QName.JCR_XMLTEXT)) {
-            Property property =
-                node.getProperty(XMLCHARACTERS.toJCRName(node.getSession()));
+            Property property = node.getProperty(
+                    QName.JCR_XMLCHARACTERS.toJCRName(
+                            new SessionNamespaceResolver(node.getSession())));
+        } catch (NoPrefixDeclaredException ex) {
+            throw new RepositoryException(
+                    "The JCR namespace prefix is not available", ex);
-        Name name = getName(node);
-        String localName = escapeName(name.getLocalPart());
+        QName name = getName(node);
+        String localName = escapeName(name.getLocalName());
-                name.getNamespaceURI(), name.getLocalPart(), node.getName());
+                name.getNamespaceURI(), name.getLocalName(), node.getName());
-        AttributesImpl attributes = new AttributesImpl();
-
-        PropertyIterator properties = node.getProperties();
-        while (properties.hasNext()) {
-            Property property = properties.nextProperty();
-            /*
-            return !property.getName().equals(XMLCHARACTERS)
-            && (!skipBinary || property.getType() != PropertyType.BINARY);
-            */
-            if (includeProperty(property)) {
-                Name name = getName(property);
-                attributes.addAttribute(
-                        name.getNamespaceURI(),
-                        escapeName(name.getLocalPart()),
-                        escapeName(name.toJCRName(property.getSession())),
-                        "CDATA", escapeValue(property));
+        try {
+            AttributesImpl attributes = new AttributesImpl();
+            
+            PropertyIterator properties = node.getProperties();
+            while (properties.hasNext()) {
+                Property property = properties.nextProperty();
+                /*
+                 return !property.getName().equals(XMLCHARACTERS)
+                 && (!skipBinary || property.getType() != PropertyType.BINARY);
+                 */
+                if (includeProperty(property)) {
+                    QName name = getName(property);
+                    attributes.addAttribute(
+                            name.getNamespaceURI(),
+                            escapeName(name.getLocalName()),
+                            escapeName(name.toJCRName(
+                                    new SessionNamespaceResolver(property.getSession()))),
+                                    "CDATA", escapeValue(property));
+                }
+            
+            return attributes;
+        } catch (NoPrefixDeclaredException e) {
+            throw new RepositoryException(e);
-
-        return attributes;
-    private Name getName(Item item) throws RepositoryException {
-        String name = item.getName();
-        if (name.length() > 0) {
-            return Name.fromJCRName(item.getSession(), name);
-        } else {
-            return new Name("http://www.jcp.org/jcr/1.0", "root");
+    private QName getName(Item item) throws RepositoryException {
+        try {
+            String name = item.getName();
+            if (name.length() > 0) {
+                return QName.fromJCRName(name, new SessionNamespaceResolver(item.getSession()));
+            } else {
+                return QName.JCR_ROOT;
+            }
+        } catch (IllegalNameException e) {
+            throw new RepositoryException(e);
+        } catch (UnknownPrefixException e) {
+            throw new RepositoryException(e);

INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS8 UPD43 INS8 INS54 UPD42 INS54 INS12 UPD43 MOV8 INS12 MOV8 INS12 INS12 INS44 INS8 UPD42 INS44 INS8 INS44 INS8 INS44 INS8 INS43 INS42 INS53 UPD42 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS14 UPD42 INS42 INS14 INS42 INS14 INS42 INS14 INS40 INS43 INS45 INS42 INS43 INS42 INS40 INS43 INS42 INS43 INS42 INS40 UPD42 INS14 INS42 INS42 UPD42 INS14 INS42 INS42 INS43 MOV32 UPD43 INS43 MOV32 INS42 UPD42 INS42 UPD42 INS14 INS43 MOV32 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL23 DEL42 DEL42 DEL42 DEL43 DEL45 DEL45 DEL14