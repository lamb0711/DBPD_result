work in progress

JCR2SPI
--------------------------------------------------------------

- reorder ItemState/NodeState/PropertyState in order to group
  methods by state types (overlayed workspace state vs. session/transient states)
- add utility methods that allow to determine and validate the
  type of ItemState.
- move childitementry classes to separate package and force usage
  of interface methods
- add checks for state type to ItemManager implementation
- add checks for state type to LockManager
- fix Node.getMixinTypes()
- rename ItemState.pull to 'reset'. remove todo asking for a careful
  merging of wsp-State and introduce a new method 'merge'.

SPI
--------------------------------------------------------------------

- rename login as suggested by julian
- add method dispose(SessionInfo) 
- rename ItemId.getRelativePath to getPath

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@454423 13f79535-47bb-0310-9956-ffa450edef68

-    public NodeId createNodeId(NodeId parentId, Path relativePath) {
+    public NodeId createNodeId(NodeId parentId, Path path) {
-            return new NodeIdImpl(parentId, relativePath);
+            return new NodeIdImpl(parentId, path);
-    public NodeId createNodeId(String uuid, Path relativePath) {
-        return new NodeIdImpl(uuid, relativePath);
+    public NodeId createNodeId(String uuid, Path path) {
+        return new NodeIdImpl(uuid, path);
-        private final Path relativePath;
+        private final Path path;
-        private ItemIdImpl(String uuid, Path relativePath) {
-            if (uuid == null && relativePath == null) {
+        private ItemIdImpl(String uuid, Path path) {
+            if (uuid == null && path == null) {
-            this.relativePath = relativePath;
+            this.path = path;
-            Path parent = parentId.getRelativePath();
-            if (parent != null) {
-                this.relativePath = Path.create(parent, name, true);
+            Path parentPath = parentId.getPath();
+            if (parentPath != null) {
+                this.path = Path.create(parentPath, name, true);
-                this.relativePath = Path.create(name, Path.INDEX_UNDEFINED);
+                this.path = Path.create(name, Path.INDEX_UNDEFINED);
-        public Path getRelativePath() {
-            return relativePath;
+        public Path getPath() {
+            return path;
-                && (relativePath == null) ? other.getRelativePath() == null : relativePath.equals(other.getRelativePath());
+                && (path == null) ? other.getPath() == null : path.equals(other.getPath());
-         * Returns the hash code of the uuid and the relativePath. The computed hash code
+         * Returns the hash code of the uuid and the path. The computed hash code
-            if (relativePath != null) {
-                b.append(relativePath.toString());
+            if (path != null) {
+                b.append(path.toString());
-        public NodeIdImpl(String uuid, Path relativePath) {
-            super(uuid, relativePath);
+        public NodeIdImpl(String uuid, Path path) {
+            super(uuid, path);
-        public NodeIdImpl(NodeId parentId, Path relativePath) throws MalformedPathException {
-            super(parentId.getUUID(), (parentId.getRelativePath() != null) ? Path.create(parentId.getRelativePath(), relativePath, true) : relativePath);
+        public NodeIdImpl(NodeId parentId, Path path) throws MalformedPathException {
+            super(parentId.getUUID(), (parentId.getPath() != null) ? Path.create(parentId.getPath(), path, true) : path);
-            return getRelativePath().getNameElement().getName();
+            return getPath().getNameElement().getName();

UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42