JCR-2092: remove more old interfaces

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@770256 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.Selector;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.Ordering;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.Source;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.Join;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.JoinCondition;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.DescendantNodeJoinCondition;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.Comparison;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.PropertyExistence;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.PropertyValue;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.Length;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.QueryObjectModelConstants;
+import javax.jcr.query.qom.Comparison;
+import javax.jcr.query.qom.DescendantNodeJoinCondition;
+import javax.jcr.query.qom.Join;
+import javax.jcr.query.qom.JoinCondition;
+import javax.jcr.query.qom.Length;
+import javax.jcr.query.qom.Ordering;
+import javax.jcr.query.qom.PropertyExistence;
+import javax.jcr.query.qom.PropertyValue;
+import javax.jcr.query.qom.QueryObjectModelConstants;
+import javax.jcr.query.qom.Selector;
+import javax.jcr.query.qom.Source;
-import java.util.BitSet;
+import java.util.HashSet;
+import java.util.Set;
-    private static final BitSet VALID_OPERATORS = new BitSet();
+    private static final Set<String> VALID_OPERATORS = new HashSet<String>();
-    private static final BitSet VALID_JOIN_TYPES = new BitSet();
+    private static final Set<String> VALID_JOIN_TYPES = new HashSet<String>();
-    private static final BitSet VALID_ORDERS = new BitSet();
+    private static final Set<String> VALID_ORDERS = new HashSet<String>();
-        VALID_OPERATORS.set(QueryObjectModelConstants.OPERATOR_EQUAL_TO);
-        VALID_OPERATORS.set(QueryObjectModelConstants.OPERATOR_GREATER_THAN);
-        VALID_OPERATORS.set(QueryObjectModelConstants.OPERATOR_GREATER_THAN_OR_EQUAL_TO);
-        VALID_OPERATORS.set(QueryObjectModelConstants.OPERATOR_LESS_THAN);
-        VALID_OPERATORS.set(QueryObjectModelConstants.OPERATOR_LESS_THAN_OR_EQUAL_TO);
-        VALID_OPERATORS.set(QueryObjectModelConstants.OPERATOR_LIKE);
-        VALID_OPERATORS.set(QueryObjectModelConstants.OPERATOR_NOT_EQUAL_TO);
+        VALID_OPERATORS.add(QueryObjectModelConstants.JCR_OPERATOR_EQUAL_TO);
+        VALID_OPERATORS.add(QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN);
+        VALID_OPERATORS.add(QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO);
+        VALID_OPERATORS.add(QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN);
+        VALID_OPERATORS.add(QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO);
+        VALID_OPERATORS.add(QueryObjectModelConstants.JCR_OPERATOR_LIKE);
+        VALID_OPERATORS.add(QueryObjectModelConstants.JCR_OPERATOR_NOT_EQUAL_TO);
-        VALID_JOIN_TYPES.set(QueryObjectModelConstants.JOIN_TYPE_INNER);
-        VALID_JOIN_TYPES.set(QueryObjectModelConstants.JOIN_TYPE_LEFT_OUTER);
-        VALID_JOIN_TYPES.set(QueryObjectModelConstants.JOIN_TYPE_RIGHT_OUTER);
+        VALID_JOIN_TYPES.add(QueryObjectModelConstants.JCR_JOIN_TYPE_INNER);
+        VALID_JOIN_TYPES.add(QueryObjectModelConstants.JCR_JOIN_TYPE_LEFT_OUTER);
+        VALID_JOIN_TYPES.add(QueryObjectModelConstants.JCR_JOIN_TYPE_RIGHT_OUTER);
-        VALID_ORDERS.set(QueryObjectModelConstants.ORDER_ASCENDING);
-        VALID_ORDERS.set(QueryObjectModelConstants.ORDER_DESCENDING);
+        VALID_ORDERS.add(QueryObjectModelConstants.JCR_ORDER_ASCENDING);
+        VALID_ORDERS.add(QueryObjectModelConstants.JCR_ORDER_DESCENDING);
-     * @param joinType      either <ul> <li>{@link org.apache.jackrabbit.spi.commons.query.jsr283.qom.QueryObjectModelConstants#JOIN_TYPE_INNER},</li>
-     *                      <li>{@link org.apache.jackrabbit.spi.commons.query.jsr283.qom.QueryObjectModelConstants#JOIN_TYPE_LEFT_OUTER},</li>
-     *                      <li>{@link org.apache.jackrabbit.spi.commons.query.jsr283.qom.QueryObjectModelConstants#JOIN_TYPE_RIGHT_OUTER}</li>
+     * @param joinType      either <ul> <li>{@link QueryObjectModelConstants#JCR_JOIN_TYPE_INNER},</li>
+     *                      <li>{@link QueryObjectModelConstants#JCR_JOIN_TYPE_LEFT_OUTER},</li>
+     *                      <li>{@link QueryObjectModelConstants#JCR_JOIN_TYPE_RIGHT_OUTER}</li>
-                     int joinType,
+                     String joinType,
-        if (!VALID_JOIN_TYPES.get(joinType)) {
+        if (!VALID_JOIN_TYPES.contains(joinType)) {
-     * @param operator the operator; either <ul> <li>{@link #OPERATOR_EQUAL_TO},</li>
-     *                 <li>{@link #OPERATOR_NOT_EQUAL_TO},</li> <li>{@link
-     *                 #OPERATOR_LESS_THAN},</li> <li>{@link #OPERATOR_LESS_THAN_OR_EQUAL_TO},</li>
-     *                 <li>{@link #OPERATOR_GREATER_THAN},</li> <li>{@link
-     *                 #OPERATOR_GREATER_THAN_OR_EQUAL_TO}, or</li> <li>{@link
-     *                 #OPERATOR_LIKE}</li> </ul>
+     * @param operator the operator; either <ul> <li>{@link #JCR_OPERATOR_EQUAL_TO},</li>
+     *                 <li>{@link #JCR_OPERATOR_NOT_EQUAL_TO},</li> <li>{@link
+     *                 #JCR_OPERATOR_LESS_THAN},</li> <li>{@link #JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO},</li>
+     *                 <li>{@link #JCR_OPERATOR_GREATER_THAN},</li> <li>{@link
+     *                 #JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO}, or</li> <li>{@link
+     *                 #JCR_OPERATOR_LIKE}</li> </ul>
-                                 int operator,
+                                 String operator,
-        if (!VALID_OPERATORS.get(operator)) {
+        if (!VALID_OPERATORS.contains(operator)) {
-                QueryObjectModelConstants.ORDER_ASCENDING);
+                QueryObjectModelConstants.JCR_ORDER_ASCENDING);
-                QueryObjectModelConstants.ORDER_DESCENDING);
+                QueryObjectModelConstants.JCR_ORDER_DESCENDING);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 INS74 INS74 INS74 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 UPD42 MOV42 INS42 INS74 UPD42 MOV42 INS42 INS74 UPD42 MOV42 INS42 INS74 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD40 UPD40 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 UPD42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL43 DEL43 DEL43 DEL43 DEL43 DEL43 DEL40 DEL40 DEL40 DEL39 DEL39