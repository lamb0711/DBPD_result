security: work in progress

- change ACEditor to take jcr path
- extract common, abstract policy entry impl
- add more tests
- add JackrabbitAccessControlManager for policy editing
- various minor changes, fixes, improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@644215 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.ItemNotFoundException;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.AccessDeniedException;
-     * @param id the id of the Node to retrievethe PolicyTemplate for.
+     * @param nodePath Absolute path to an existing node object.
-     * @throws AccessControlException If the Node identified by the given id does
-     * not allow ACL modifications.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws AccessControlException If the Node identified by the given
+     * <code>nodePath</code> does not allow access control modifications (e.g.
+     * the node itself stores the access control information for its parent).
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
-    PolicyTemplate getPolicyTemplate(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    PolicyTemplate getPolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException;
-     * Retrieves an editable policy template for the Node identified by the given
+     * Retrieves the policy template for the Node identified by the given
-     * new (empty) template is created (see also {@link #getPolicyTemplate(NodeId)}.<br>
+     * new (empty) template is created (see also {@link #getPolicyTemplate(String)}.<br>
-     * @param id the id of the Node to retrieve (or create) the PolicyTemplate for.
-     * @return the PolicyTemplate
-     * @throws AccessControlException If the Node identified by the given id does
-     * not allow ACL modifications.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @param nodePath Absolute path to an existing node object.
+     * @return policy template
+     * @throws AccessControlException If the Node identified by the given
+     * <code>nodePath</code> does not allow access control modifications.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
-    PolicyTemplate editPolicyTemplate(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    PolicyTemplate editPolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException;
+
+    /**
+     * Returns a policy template for the given <code>principal</code>.
+     *
+     * @return policy template for the specified <code>principal.</code>.
+     * @throws AccessControlException if the specified principal does not exist,
+     * if this implementation does provide policy tempates for principals or
+     * if same other access control related exception occurs.
+     * @throws RepositoryException if another error occurs.
+     */
+    PolicyTemplate editPolicyTemplate(Principal principal) throws AccessDeniedException, AccessControlException, RepositoryException;
-     * @param id the id of the node to write the template for. Note, that a
-     * {@link javax.jcr.Session#save()} is required to persist the changes. Upon
-     * 'setPolicyTemplate' the modifications are applied in the transient space only.
+     * @param nodePath Absolute path to an existing node object.
-     * if it is not applicable to the Node identified by the given id.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * if it is not applicable to the Node identified by the given
+     * <code>nodePath</code>.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
-    void setPolicyTemplate(NodeId id, PolicyTemplate template) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    void setPolicyTemplate(String nodePath, PolicyTemplate template) throws AccessControlException, PathNotFoundException, RepositoryException;
-     * @param id the id of the node to remove the acl from.
+     * @param nodePath Absolute path to an existing node object.
-     * @throws AccessControlException If the Node identified by the given id
-     * does not allow policy modifications.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws AccessControlException If the Node identified by the given
+     * <code>nodePath</code> does not allow policy modifications.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
-    PolicyTemplate removePolicyTemplate(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    PolicyTemplate removePolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException;
-     * been added using {@link #addAccessControlEntry(NodeId,Principal,Privilege[])}.
+     * been added using {@link #addAccessControlEntry(String,Principal,Privilege[])}.
-     * using {@link #removeAccessControlEntry(NodeId,AccessControlEntry)}.
+     * using {@link #removeAccessControlEntry(String,AccessControlEntry)}.
-     * @param id
+     * @param nodePath Absolute path to an existing node object.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
+     * @throws UnsupportedRepositoryOperationException if only simple access
+     * control is supported.
-    AccessControlEntry[] getAccessControlEntries(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    AccessControlEntry[] getAccessControlEntries(String nodePath) throws AccessControlException, PathNotFoundException, UnsupportedRepositoryOperationException, RepositoryException;
-     * method as short-cut for {@link #editPolicyTemplate(NodeId)} and
+     * method as short-cut for {@link #editPolicyTemplate(String)} and
-     * @param id
+     * @param nodePath Absolute path to an existing node object.
-     * @throws AccessControlException If the Node identified by the given id
+     * @throws AccessControlException If the Node identified by the given nodePath.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
+     * @throws UnsupportedRepositoryOperationException if only simple access
+     * control is supported.
-    AccessControlEntry addAccessControlEntry(NodeId id, Principal principal, Privilege[] privileges) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    AccessControlEntry addAccessControlEntry(String nodePath, Principal principal, Privilege[] privileges) throws AccessControlException, PathNotFoundException, UnsupportedRepositoryOperationException, RepositoryException;
-     * method as short-cut for {@link #getPolicyTemplate(NodeId)} and
+     * method as short-cut for {@link #getPolicyTemplate(String)} and
-     * {@link #getAccessControlEntries(NodeId)} can be removed by this call.
+     * {@link #getAccessControlEntries(String)} can be removed by this call.
-     * @param id
-     * @param entry
+     * @param nodePath Absolute path to an existing node object.
+     * @param entry The access control entry to be removed.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
+     * @throws UnsupportedRepositoryOperationException if only simple access
+     * control is supported.
-    boolean removeAccessControlEntry(NodeId id, AccessControlEntry entry) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    boolean removeAccessControlEntry(String nodePath, AccessControlEntry entry) throws AccessControlException, PathNotFoundException, UnsupportedRepositoryOperationException, RepositoryException;

INS26 INS26 INS40 UPD40 INS40 INS31 UPD43 UPD43 INS29 INS43 INS42 INS44 INS43 INS43 INS43 UPD43 UPD43 UPD43 INS43 UPD43 INS43 UPD43 INS43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 INS65 UPD43 UPD42 UPD42 INS42 INS65 UPD43 UPD42 UPD42 INS42 INS65 UPD43 UPD42 UPD42 INS42 UPD42 UPD66 UPD66 UPD66 INS66 UPD42 UPD66 INS66 UPD42 UPD66 UPD42 UPD66 UPD66 UPD66 UPD66 UPD42 UPD66 INS66 UPD42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 UPD42 UPD66 UPD66 INS66 UPD42 UPD66 INS66 UPD42 UPD42 UPD66 UPD66 UPD66 UPD42 UPD66 INS66 UPD42 UPD42 INS66 UPD42 UPD66 INS66 INS42 INS66 INS66 UPD42 UPD42 INS66 UPD66 UPD42 UPD66 INS66 INS42 INS66 INS66 UPD42 UPD42 INS66 INS66 UPD42 UPD66 INS66 INS42 INS66 INS66 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL42 DEL68 DEL65 DEL66 DEL66