port to jcr api v0.16.4.1

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@165309 13f79535-47bb-0310-9956-ffa450edef68

-            // @todo special handling required for nodes with special semantics (e.g. those defined by mix:versionable, et.al.)
-            // FIXME delegate to 'node type instance handler'
+
+                /**
+                 * special handling required for child nodes with special semantics
+                 * (e.g. those defined by nt:version,  et.al.)
+                 *
+                 * todo FIXME delegate to 'node type instance handler'
+                 */
+
+
+                /**
+                 * special handling required for properties with special semantics
+                 * (e.g. those defined by mix:referenceable, mix:versionable,
+                 * mix:lockable, et.al.)
+                 *
+                 * todo FIXME delegate to 'node type instance handler'
+                 */
+                PropDefId defId = srcChildState.getDefinitionId();
+                PropDef def = ntReg.getPropDef(defId);
+                if (def.getDeclaringNodeType().equals(MIX_LOCKABLE)) {
+                    // skip properties defined by mix:lockable
+                    continue;
+                }
+
-        // @todo special handling required for properties with special semantics
-        // (e.g. those defined by mix:versionable, mix:lockable, et.al.)
-        PropertyState newState = stateMgr.createNew(propName, parentUUID);
+        PropDef def = ntReg.getPropDef(defId);
+
+        PropertyState newState = stateMgr.createNew(propName, parentUUID);
+
-            InternalValue[] newValues = new InternalValue[values.length];
-            for (int i = 0; i < values.length; i++) {
-                if (values[i] != null) {
+            /**
+             * special handling required for properties with special semantics
+             * (e.g. those defined by mix:referenceable, mix:versionable,
+             * mix:lockable, et.al.)
+             *
+             * todo FIXME delegate to 'node type instance handler'
+             */
+            if (def.getDeclaringNodeType().equals(MIX_REFERENCEABLE)
+                    && propName.equals(JCR_UUID)) {
+                // set correct value of jcr:uuid property
+                newState.setValues(new InternalValue[]{InternalValue.create(parentUUID)});
+            } else {
+                InternalValue[] newValues = new InternalValue[values.length];
+                for (int i = 0; i < values.length; i++) {
-                } else {
-                    newValues[i] = null;
-            // FIXME delegate to 'node type instance handler'
-            if (defId != null) {
-                PropDef def = ntReg.getPropDef(defId);
-                if (def.getDeclaringNodeType().equals(MIX_REFERENCEABLE)) {
-                    if (propName.equals(JCR_UUID)) {
-                        // set correct value of jcr:uuid property
-                        newState.setValues(new InternalValue[]{InternalValue.create(parentUUID)});
-                    }
-                }
-            }

MOV8 MOV60 MOV60 MOV60 MOV21 MOV21 MOV21 MOV60 MOV25 MOV41 MOV27 MOV21 INS27 INS8 INS60 INS60 INS25 MOV32 MOV32 MOV60 MOV24 INS43 INS59 INS43 INS59 INS32 INS8 MOV8 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS18 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL2 DEL33 DEL27 DEL42 DEL42 DEL2 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL8 DEL25 DEL25 DEL8