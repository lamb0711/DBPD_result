JCR-1104: JSR 283 support
- Implemented SameNode, ChildNode and DescendantNode
- Added test cases

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633394 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.PathNotFoundException;
+import javax.jcr.NodeIterator;
+import javax.jcr.Node;
+import java.util.Collections;
-        // TODO: implement
-        throw new UnsupportedOperationException("not yet implemented");
+        Name ntName = qomTree.getSelector(node.getSelectorQName()).getNodeTypeQName();
+        List scoreNodes = new ArrayList();
+        try {
+            Node parent = session.getNode(node.getPath());
+            for (NodeIterator it = parent.getNodes(); it.hasNext(); ) {
+                NodeImpl n = (NodeImpl) it.nextNode();
+                if (n.isNodeType(ntName)) {
+                    scoreNodes.add(new ScoreNode(n.getNodeId(), 1.0f));
+                }
+            }
+            return new QueryHitsQuery(new DefaultQueryHits(scoreNodes));
+        } catch (PathNotFoundException e) {
+            // node does not exist
+        } catch (RepositoryException e) {
+            log.warn("Exception while constructing query: " + e);
+            log.debug("Stacktrace: ", e);
+        }
+        // return a dummy query, which does not match any nodes
+        return new BooleanQuery();
-    public Object visit(DescendantNodeImpl node, Object data) {
-        // TODO: implement
-        throw new UnsupportedOperationException("not yet implemented");
+    public Object visit(DescendantNodeImpl node, Object data) throws Exception {
+        // TODO simplify, is there a way to aggregate constraints for the same selector?
+        Query selectorQuery = (Query) qomTree.getSelector(node.getSelectorQName()).accept(this, null);
+        try {
+            NodeImpl n = (NodeImpl) session.getNode(node.getPath());
+            ScoreNode sn = new ScoreNode(n.getNodeId(), 1.0f);
+            Query context = new QueryHitsQuery(new DefaultQueryHits(
+                    Collections.singletonList(sn)));
+            return new DescendantSelfAxisQuery(context, selectorQuery, false);
+        } catch (PathNotFoundException e) {
+            // node does not exist
+        } catch (RepositoryException e) {
+            log.warn("Exception while constructing query: " + e);
+            log.debug("Stacktrace: ", e);
+        }
+        // return a dummy query, which does not match any nodes
+        return new BooleanQuery();
-        // TODO: implement
-        throw new UnsupportedOperationException("not yet implemented");
+        Name ntName = qomTree.getSelector(node.getSelectorQName()).getNodeTypeQName();
+        try {
+            NodeImpl n = (NodeImpl) session.getNode(node.getPath());
+            if (n.isNodeType(ntName)) {
+                ScoreNode sn = new ScoreNode(n.getNodeId(), 1.0f);
+                return new QueryHitsQuery(new DefaultQueryHits(
+                        Collections.singletonList(sn)));
+            }
+        } catch (PathNotFoundException e) {
+            // node does not exist
+        } catch (RepositoryException e) {
+            log.warn("Exception while constructing query: " + e);
+            log.debug("Stacktrace: ", e);
+        }
+        // return a dummy query, which does not match any nodes
+        return new BooleanQuery();

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS43 INS60 INS60 INS54 INS41 INS42 INS60 INS54 INS41 INS60 INS54 INS41 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS14 INS43 INS59 INS8 INS12 INS12 INS14 INS43 INS59 INS8 INS12 INS12 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS60 INS24 INS41 INS44 INS8 INS44 INS8 INS43 INS42 INS42 INS11 INS60 INS60 INS60 INS41 INS44 INS8 INS44 INS8 INS43 INS42 INS42 INS32 INS60 INS25 INS44 INS8 INS44 INS8 INS43 INS32 INS42 INS43 INS43 INS59 INS58 INS32 INS8 INS14 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS14 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS32 INS42 INS43 INS59 INS32 INS8 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS14 INS42 UPD42 MOV42 INS32 INS32 INS42 INS32 INS42 INS52 INS33 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 INS9 INS42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS60 INS41 INS42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS32 INS43 INS32 INS34 INS43 INS14 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS32 INS43 INS59 INS14 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS21 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS14 INS45 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS34 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS34 INS42 INS42 INS42 DEL43 DEL45 DEL14 DEL53 DEL43 DEL45 DEL14 DEL53 DEL43 DEL45 DEL14 DEL53