jcr-97: Improve Checkstyle conformance

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@312896 13f79535-47bb-0310-9956-ffa450edef68

- * Helper class for getting and setting context attributes.
+ * Utility class for getting and setting context attributes.
-public class CommandHelper
-{
-	/** bundle */
-	private static ResourceBundle bundle = ResourceBundle
-			.getBundle(CommandHelper.class.getPackage().getName()
-					+ ".resources");
+public final class CommandHelper {
+    /** bundle */
+    private static ResourceBundle bundle = ResourceBundle
+        .getBundle(CommandHelper.class.getPackage().getName() + ".resources");
-	/** Current node key */
-	private static String CURRENT_NODE_KEY = "jcr.current";
+    /** Current node key */
+    private static final String CURRENT_NODE_KEY = "jcr.current";
-	/** repository key */
-	private static String REPOSITORY_KEY = "jcr.repository";
+    /** repository key */
+    private static final String REPOSITORY_KEY = "jcr.repository";
-	/** session key */
-	private static String SESSION_KEY = "jcr.session";
+    /** session key */
+    private static final String SESSION_KEY = "jcr.session";
-	/** session key */
-	private static String OUTPUT_KEY = "jcr.output";
+    /** session key */
+    private static final String OUTPUT_KEY = "jcr.output";
-	/**
-	 * Sets the current output
-	 * 
-	 * @param ctx
-	 * @param output
-	 */
-	public static void setOutput(Context ctx, PrintWriter out)
-	{
-		if (out == null)
-		{
-			ctx.remove(OUTPUT_KEY);
-		} else
-		{
-			ctx.put(OUTPUT_KEY, out);
-		}
-	}
+    /**
+     * should never get called
+     */
+    private CommandHelper() {
+        super();
+    }
-	/**
-	 * Sets the current working Node
-	 * 
-	 * @param ctx
-	 * @param node
-	 * @throws CommandException
-	 */
-	public static void setCurrentNode(Context ctx, Node node)
-			throws CommandException
-	{
-		if (node == null)
-		{
-			ctx.remove(CURRENT_NODE_KEY);
-		} else
-		{
-			ctx.put(CURRENT_NODE_KEY, node);
-		}
-	}
+    /**
+     * Sets the current <code>PrintWriter</code>.
+     * @param ctx
+     *        the <code>Context</code>
+     * @param out
+     *        the <code>PrintWriter</code>
+     */
+    public static void setOutput(Context ctx, PrintWriter out) {
+        if (out == null) {
+            ctx.remove(OUTPUT_KEY);
+        } else {
+            ctx.put(OUTPUT_KEY, out);
+        }
+    }
-	/**
-	 * Sets the current working Repository
-	 * 
-	 * @param ctx
-	 * @param repository
-	 */
-	public static void setRepository(Context ctx, Repository repository)
-	{
-		if (repository == null)
-		{
-			ctx.remove(REPOSITORY_KEY);
-		} else
-		{
-			ctx.put(REPOSITORY_KEY, repository);
-		}
+    /**
+     * Sets the current working <code>Node</code>.
+     * @param ctx
+     *        the <code>Context</code>
+     * @param node
+     *        the current working <code>Node</code>.
+     */
+    public static void setCurrentNode(Context ctx, Node node) {
+        if (node == null) {
+            ctx.remove(CURRENT_NODE_KEY);
+        } else {
+            ctx.put(CURRENT_NODE_KEY, node);
+        }
+    }
-	}
+    /**
+     * Sets the current working <code>Repository</code>
+     * @param ctx
+     *        the <code>Context</code>
+     * @param repository
+     *        the current working <code>Repository</code>
+     */
+    public static void setRepository(Context ctx, Repository repository) {
+        if (repository == null) {
+            ctx.remove(REPOSITORY_KEY);
+        } else {
+            ctx.put(REPOSITORY_KEY, repository);
+        }
+    }
-	/**
-	 * Sets the current working Session
-	 * 
-	 * @param ctx
-	 * @param session
-	 */
-	public static void setSession(Context ctx, Session session)
-	{
-		if (session == null)
-		{
-			ctx.remove(SESSION_KEY);
-		} else
-		{
-			ctx.put(SESSION_KEY, session);
-		}
-	}
+    /**
+     * Sets the current working <code>Session</code>
+     * @param ctx
+     *        the <code>Context</code>
+     * @param session
+     *        the current working <code>Session</code>
+     * @throws CommandException if there's an open working <code>Session</code>
+     */
+    public static void setSession(Context ctx, Session session) throws CommandException {
+        if (session == null) {
+            ctx.remove(SESSION_KEY);
+        } else {
+            if (ctx.get(SESSION_KEY) != null) {
+                throw new CommandException("exception.already.logged.in");
+            }
+            ctx.put(SESSION_KEY, session);
+        }
+    }
-	/**
-	 * Gets the current working Node
-	 * 
-	 * @param ctx
-	 * @return
-	 */
-	public static PrintWriter getOutput(Context ctx)
-	{
-		PrintWriter out = (PrintWriter) ctx.get(OUTPUT_KEY);
-		if (out == null)
-		{
-			out = new PrintWriter(System.out, true);
-		}
-		return out;
-	}
+    /**
+     * Gets the current <code>PrintWriter</code>
+     * @param ctx
+     *        the <code>Context</code>
+     * @return the current <code>PrintWriter</code>
+     */
+    public static PrintWriter getOutput(Context ctx) {
+        PrintWriter out = (PrintWriter) ctx.get(OUTPUT_KEY);
+        if (out == null) {
+            out = new PrintWriter(System.out, true);
+        }
+        return out;
+    }
-	/**
-	 * Gets the current working Node
-	 * 
-	 * @param ctx
-	 * @return
-	 * @throws CommandException
-	 */
-	public static Node getCurrentNode(Context ctx) throws CommandException
-	{
-		Node n = (Node) ctx.get(CURRENT_NODE_KEY);
-		if (n == null)
-		{
-			throw new CommandException("exception.no.current.node");
-		}
-		return n;
-	}
+    /**
+     * Gets the current working <code>Node</code>
+     * @param ctx
+     *        the <code>Context</code>
+     * @return the current working <code>Node</code>
+     * @throws CommandException
+     *         if the current working <code>Node</code> can't be found.
+     */
+    public static Node getCurrentNode(Context ctx) throws CommandException {
+        Node n = (Node) ctx.get(CURRENT_NODE_KEY);
+        if (n == null) {
+            throw new CommandException("exception.no.current.node");
+        }
+        return n;
+    }
-	/**
-	 * Gets the current working Repository
-	 * 
-	 * @param ctx
-	 * @return
-	 * @throws CommandException
-	 */
-	public static Repository getRepository(Context ctx) throws CommandException
-	{
-		return (Repository) ctx.get(REPOSITORY_KEY);
-	}
+    /**
+     * Gets the current working <code>Repository</code>
+     * @param ctx
+     *        the <code>Context</code>
+     * @return the current working <code>Repository</code>
+     * @throws CommandException
+     *         if the current working <code>Repository</code> is unset.
+     */
+    public static Repository getRepository(Context ctx) throws CommandException {
+        Repository r = (Repository) ctx.get(REPOSITORY_KEY);
+        if (r == null) {
+            throw new CommandException("exception.no.current.repository");
+        }
+        return r;
+    }
-	/**
-	 * Gets the current working Session
-	 * 
-	 * @param ctx
-	 * @return
-	 * @throws CommandException
-	 */
-	public static Session getSession(Context ctx) throws CommandException
-	{
-		return (Session) ctx.get(SESSION_KEY);
-	}
+    /**
+     * Gets the current working <code>Session</code>
+     * @param ctx
+     *        the <code>Context</code>
+     * @return the current working <code>Session</code>
+     * @throws CommandException
+     *         if the current working <code>Session</code> is unset.
+     */
+    public static Session getSession(Context ctx) throws CommandException {
+        Session s = (Session) ctx.get(SESSION_KEY);
+        if (s == null) {
+            throw new CommandException("exception.no.current.session");
+        }
+        return s;
+    }
-	/**
-	 * Gets node at the given path.
-	 * 
-	 * @param ctx
-	 * @param path
-	 * @return
-	 * @throws CommandException
-	 * @throws PathNotFoundException
-	 * @throws RepositoryException
-	 */
-	public static Node getNode(Context ctx, String path)
-			throws CommandException, PathNotFoundException, RepositoryException
-	{
-		Item i = getItem(ctx, path);
-		if (!i.isNode())
-		{
-			throw new PathNotFoundException("the path " + i.getPath()
-					+ "refers to a Property");
-		}
-		return (Node) i;
-	}
+    /**
+     * Gets the <code>Node</code> at the given path.
+     * @param ctx
+     *        the <code>Context</code>
+     * @param path
+     *        the path to the <code>Node</code>
+     * @return the <code>Node</code> at the given path
+     * @throws CommandException
+     *         if the <code>Node</code> isn't found.
+     * @throws RepositoryException
+     *         if the underlying repository throws a
+     *         <code>RepositoryException</code>
+     */
+    public static Node getNode(Context ctx, String path)
+            throws CommandException, RepositoryException {
+        try {
+            Item i = getItem(ctx, path);
+            if (!i.isNode()) {
+                throw new CommandException("exception.no.node.at",
+                    new String[] {
+                        path
+                    });
+            }
+            return (Node) i;
+        } catch (PathNotFoundException e) {
+            throw new CommandException("exception.no.node.at", new String[] {
+                path
+            });
+        }
+    }
-	/**
-	 * Gets the Item at the given path. <br>
-	 * If the path is null it returns the current working node.
-	 * 
-	 * @param ctx
-	 * @param path
-	 * @return the Item for the given path
-	 * @throws CommandException
-	 * @throws PathNotFoundException
-	 * @throws RepositoryException
-	 */
-	public static Item getItem(Context ctx, String path)
-			throws CommandException, PathNotFoundException, RepositoryException
-	{
-		Node current = (Node) ctx.get(CURRENT_NODE_KEY);
-		Item i = null;
+    /**
+     * Gets the <code>Item</code> at the given path. <br>
+     * If the path is null it returns the current working <code>Node</code>.
+     * @param ctx
+     *        the <code>Context</code>
+     * @param path
+     *        the path to the <code>Item</code>
+     * @return the <code>Item</code> at the given path
+     * @throws CommandException
+     *         if a <code>Command</code> internal error occurs.
+     * @throws PathNotFoundException
+     *         if there's no <code>Node</code> at the given path.
+     * @throws RepositoryException
+     *         if the underlying repository throws a
+     *         <code>RepositoryException</code>
+     */
+    public static Item getItem(Context ctx, String path)
+            throws CommandException, PathNotFoundException, RepositoryException {
+        Node current = getCurrentNode(ctx);
+        Item i = null;
-		if (path == null)
-		{
-			i = current;
-		} else if (path.equals("/"))
-		{
-			i = current.getSession().getRootNode();
-		} else if (path.startsWith("/"))
-		{
-			i = current.getSession().getItem(path);
-		} else
-		{
-			String newPath = current.getPath();
-			// handle the root node
-			if (!newPath.endsWith("/"))
-			{
-				newPath += "/";
-			}
-			newPath += path;
-			i = current.getSession().getItem(newPath);
-		}
+        if (path == null) {
+            i = current;
+        } else if (path.equals("/")) {
+            i = current.getSession().getRootNode();
+        } else if (path.startsWith("/")) {
+            i = current.getSession().getItem(path);
+        } else {
+            String newPath = current.getPath();
+            // handle the root node
+            if (!newPath.endsWith("/")) {
+                newPath += "/";
+            }
+            newPath += path;
+            i = current.getSession().getItem(newPath);
+        }
-		return i;
-	}
+        return i;
+    }
-	/**
-	 * Returns true if the node exists at the given path
-	 * 
-	 * @param ctx
-	 * @param path
-	 * @return
-	 * @throws CommandException
-	 * @throws RepositoryException
-	 */
-	public static boolean hasNode(Context ctx, String path)
-			throws CommandException, RepositoryException
-	{
-		if (path.equals("/"))
-		{
-			return true;
-		} else if (path.startsWith("/"))
-		{
-			return getSession(ctx).getRootNode().hasNode(path.substring(1));
-		} else
-		{
-			Node current = (Node) ctx.get(CURRENT_NODE_KEY);
-			return current.hasNode(path);
-		}
-	}
+    /**
+     * Checks <code>Node</code> existence.
+     * @param ctx
+     *        the <code>Context</code>
+     * @param path
+     *        the path to the <code>Node</code>
+     * @return true if the <code>Node</code> exists at the given path
+     * @throws CommandException
+     *         if the current working <code>Session</code> is unset.
+     * @throws RepositoryException
+     *         if the underlying repository throws a
+     *         <code>RepositoryException</code>
+     */
+    public static boolean hasNode(Context ctx, String path)
+            throws CommandException, RepositoryException {
+        Session s = getSession(ctx);
+        if (path.equals("/")) {
+            return true;
+        } else if (path.startsWith("/")) {
+            return s.getRootNode().hasNode(path.substring(1));
+        } else {
+            Node current = (Node) ctx.get(CURRENT_NODE_KEY);
+            return current.hasNode(path);
+        }
+    }
-	/**
-	 * Get the nodes under the given node that match the given pattern.
-	 * 
-	 * @param ctx
-	 *            Command Context
-	 * @param node
-	 *            Parent node
-	 * @param pattern
-	 * @return an Iterator that contains the matching nodes
-	 * @throws CommandException
-	 * @throws RepositoryException
-	 */
-	public static NodeIterator getNodes(Context ctx, Node node, String pattern)
-			throws CommandException, RepositoryException
-	{
-		if (pattern != null)
-		{
-			return node.getNodes(pattern);
-		} else
-		{
-			return node.getNodes();
-		}
-	}
+    /**
+     * Gets the <code>Node</code> s under the given <code>Node</code> that
+     * match the given pattern.
+     * @param ctx
+     *        the <code>Context</code>
+     * @param node
+     *        the parent <code>Node</code>
+     * @param pattern
+     *        the pattern
+     * @return an <code>Iterator</code> that contains the matching nodes
+     * @throws RepositoryException
+     *         if the underlying repository throws a
+     *         <code>RepositoryException</code>
+     */
+    public static NodeIterator getNodes(Context ctx, Node node, String pattern)
+            throws RepositoryException {
+        if (pattern != null) {
+            return node.getNodes(pattern);
+        } else {
+            return node.getNodes();
+        }
+    }
-	/**
-	 * Get the properties under the current working node for the given pattern
-	 * 
-	 * @param ctx
-	 * @param node
-	 *            Parent node
-	 * @param pattern
-	 * @return
-	 * @throws CommandException
-	 * @throws RepositoryException
-	 */
-	public static PropertyIterator getProperties(Context ctx, Node node,
-			String pattern) throws CommandException, RepositoryException
-	{
-		if (pattern != null)
-		{
-			return node.getProperties(pattern);
-		} else
-		{
-			return node.getProperties();
-		}
-	}
+    /**
+     * Gets the <code>Property</code> s under the current working node for the
+     * given pattern
+     * @param ctx
+     *        the <code>Context</code>
+     * @param node
+     *        the parent <code>Node</code>
+     * @param pattern
+     *        the pattern
+     * @return a <code>PropertyIterator</code>
+     * @throws RepositoryException
+     *         if the underlying repository throws a
+     *         <code>RepositoryException</code>
+     */
+    public static PropertyIterator getProperties(
+        Context ctx,
+        Node node,
+        String pattern) throws RepositoryException {
+        if (pattern != null) {
+            return node.getProperties(pattern);
+        } else {
+            return node.getProperties();
+        }
+    }
-	/**
-	 * @return default resource bundle
-	 */
-	public static ResourceBundle getBundle()
-	{
-		return bundle;
-	}
+    /**
+     * @return the default <code>ResourceBundle</code>
+     */
+    public static ResourceBundle getBundle() {
+        return bundle;
+    }
-	/**
-	 * Get the items under the given node that match the pattern
-	 * 
-	 * @param ctx
-	 * @return
-	 * @throws CommandException
-	 * @throws RepositoryException
-	 */
-	public static Iterator getItems(Context ctx, Node node, String pattern)
-			throws CommandException, RepositoryException
-	{
-		return IteratorUtils.chainedIterator(getNodes(ctx, node, pattern),
-				getProperties(ctx, node, pattern));
-	}
+    /**
+     * Gets the <code>Item</code> s under the given <code>Node</code> that
+     * match the pattern
+     * @param ctx
+     *        the <code>Context</code>
+     * @param node
+     *        the parent <code>Node</code>
+     * @param pattern
+     *        the pattern
+     * @return an <code>Iterator</code> with the <code>Item</code> s that
+     *         match the given pattern.
+     * @throws RepositoryException
+     *         if the underlying repository throws a
+     *         <code>RepositoryException</code>
+     */
+    public static Iterator getItems(Context ctx, Node node, String pattern)
+            throws RepositoryException {
+        return IteratorUtils.chainedIterator(getNodes(ctx, node, pattern),
+            getProperties(ctx, node, pattern));
+    }

INS83 INS31 INS83 INS83 INS83 INS83 INS29 INS83 INS42 INS8 MOV43 INS43 INS43 INS8 UPD66 INS65 INS46 INS65 INS42 INS60 INS25 INS42 INS60 INS25 INS54 INS60 UPD65 UPD65 INS65 INS66 UPD66 INS66 UPD42 INS66 UPD66 INS66 INS66 UPD66 INS66 INS66 UPD66 INS66 INS66 INS42 INS66 UPD66 INS66 INS66 UPD66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 MOV43 INS59 INS27 INS8 INS42 UPD66 INS66 INS66 INS66 MOV43 INS59 INS27 INS8 INS42 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 MOV8 INS12 UPD66 UPD66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 MOV43 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS59 INS66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 INS66 UPD66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 UPD66 INS66 UPD66 INS66 INS42 INS66 UPD42 INS66 INS66 INS66 INS66 INS66 INS25 INS42 MOV11 INS42 INS33 INS53 INS42 MOV11 INS42 INS33 INS53 INS44 INS8 INS32 INS42 INS42 MOV32 INS27 INS8 INS14 INS14 MOV43 INS42 INS53 UPD42 MOV42 UPD42 MOV42 INS32 INS33 INS53 INS43 INS45 MOV43 INS45 INS14 INS42 INS42 INS42 INS14 INS42 MOV43 INS45 INS3 INS43 INS45 MOV43 INS45 INS3 UPD42 MOV42 INS5 INS4 INS42 INS42 INS5 INS4 INS43 INS85 INS42 INS43 INS85 INS42 INS42 INS42 DEL42 DEL65 DEL42 DEL65 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL43 DEL42 DEL32 DEL11 DEL42 DEL65 DEL42 DEL65