JCR-2698: Consolidate type safe wrappers for commons-collection classes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@982181 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.iterators.EmptyIterator;
-import org.apache.commons.collections.iterators.IteratorChain;
-import org.apache.commons.collections.iterators.SingletonIterator;
+import static org.apache.jackrabbit.commons.iterator.Iterators.empty;
+import static org.apache.jackrabbit.commons.iterator.Iterators.iteratorChain;
+import static org.apache.jackrabbit.commons.iterator.Iterators.properties;
+import static org.apache.jackrabbit.commons.iterator.Iterators.singleton;
+import static org.apache.jackrabbit.commons.iterator.LazyIteratorChain.chain;
-import java.util.NoSuchElementException;
-                return chain(singleton(node), childIterators(node));
+                return iteratorChain(singleton(node), chain(childIterators(node)));
-     * Returns an iterator containing the single element <code>element</code>.
-     */
-    @SuppressWarnings("unchecked")
-    private static <T> Iterator<T> singleton(T element) {
-        return new SingletonIterator(element);
-    }
-
-    /**
-            @SuppressWarnings("unchecked")
-                    return n.getProperties();
+                    return properties(n.getProperties());
-    /**
-     * Returns the concatenation of <code>iterator</code> with the concatenation
-     * of all iterators in <code>iterators</code>.
-     */
-    @SuppressWarnings("unchecked")
-    private static <T> Iterator<T> chain(Iterator<T> iterator, Iterator<Iterator<T>> iterators) {
-        return new IteratorChain(iterator, new LazyIteratorChain<T>(iterators));
-    }
-
-    /**
-     * Returns the concatenation of all iterators in <code>iterators</code>.
-     */
-    private static <T> Iterator<T> chain(Iterator<Iterator<T>> iterators) {
-        return new LazyIteratorChain<T>(iterators);
-    }
-
-    /**
-     * Returns an empty iterator.
-     */
-    @SuppressWarnings("unchecked")
-    private static <T> Iterator<T> empty() {
-        return EmptyIterator.INSTANCE;
-    }
-
-    /**
-     * The class implements the concatenation of iterators. The implementation
-     * is lazy in the sense that advancing off all iterators is deferred as much
-     * as possible. Specifically no iterator is fully unwrapped at one single
-     * point of time.
-     */
-    private static final class LazyIteratorChain<T> implements Iterator<T> {
-        private final Iterator<Iterator<T>> iterators;
-        private Iterator<T> currentIterator;
-
-        private LazyIteratorChain(Iterator<Iterator<T>> iterators) {
-            super();
-            this.iterators = iterators;
-        }
-
-        public boolean hasNext() {
-            while ((currentIterator == null || !currentIterator.hasNext()) && iterators.hasNext()) {
-                currentIterator = iterators.next();
-            }
-            return currentIterator != null && currentIterator.hasNext();
-        }
-
-        public T next() {
-            if (hasNext()) {
-                return currentIterator.next();
-            }
-            else {
-                throw new NoSuchElementException();
-            }
-        }
-
-        public void remove() {
-            throw new UnsupportedOperationException();
-        }
-    }
-

MOV26 INS26 UPD40 UPD40 INS40 UPD40 UPD40 INS42 INS32 MOV42 MOV32 INS32 INS42 MOV32 DEL66 DEL65 DEL29 DEL42 DEL45 DEL79 DEL83 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL45 DEL79 DEL66 DEL66 DEL65 DEL29 DEL42 DEL45 DEL79 DEL83 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL14 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL45 DEL79 DEL83 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL40 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL46 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL36 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL55