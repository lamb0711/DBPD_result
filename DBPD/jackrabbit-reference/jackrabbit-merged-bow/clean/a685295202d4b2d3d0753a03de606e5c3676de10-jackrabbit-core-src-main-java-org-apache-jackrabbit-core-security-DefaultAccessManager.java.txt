security: work in progress

- change ACEditor to take jcr path
- extract common, abstract policy entry impl
- add more tests
- add JackrabbitAccessControlManager for policy editing
- various minor changes, fixes, improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@644215 13f79535-47bb-0310-9956-ffa450edef68

- * @version $Rev$, $Date$
-        Path path = getValidNodePath(absPath);
+        checkValidNodePath(absPath);
-            return internalHasPrivileges(path, privs);
+            return internalHasPrivileges(absPath, privs);
-        Path path = getValidNodePath(absPath);
-        int privs = compiledPermissions.getPrivileges(path);
+        checkValidNodePath(absPath);
+        int privs = compiledPermissions.getPrivileges(resolver.getQPath(absPath));
-        Path path = getValidNodePath(absPath);
-        checkPrivileges(path, PrivilegeRegistry.READ_AC);
+        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
-            policy = editor.getPolicyTemplate(getNodeId(path));
+            policy = editor.getPolicyTemplate(absPath);
-        Path path = getValidNodePath(absPath);
-        checkPrivileges(path, PrivilegeRegistry.READ_AC);
+        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
-        return acProvider.getPolicy(getNodeId(path));
+        return acProvider.getPolicy(getNodeId(absPath));
-        Path path = getValidNodePath(absPath);
-        checkPrivileges(path, PrivilegeRegistry.READ_AC);
+        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
-            PolicyTemplate applicable = editor.editPolicyTemplate(getNodeId(path));
+            PolicyTemplate applicable = editor.editPolicyTemplate(absPath);
-            Path path = getValidNodePath(absPath);
-            checkPrivileges(path, PrivilegeRegistry.MODIFY_AC);
+            checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
-            editor.setPolicyTemplate(getNodeId(path), (PolicyTemplate) policy);
+            editor.setPolicyTemplate(absPath, (PolicyTemplate) policy);
-        Path path = getValidNodePath(absPath);
-        checkPrivileges(path, PrivilegeRegistry.MODIFY_AC);
+        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
-        return editor.removePolicyTemplate(getNodeId(path));
+        return editor.removePolicyTemplate(absPath);
-        Path path = getValidNodePath(absPath);
-        checkPrivileges(path, PrivilegeRegistry.READ_AC);
+        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
-            entries = editor.getAccessControlEntries(getNodeId(path));
+            entries = editor.getAccessControlEntries(absPath);
-        Path path = getValidNodePath(absPath);
-        checkPrivileges(path, PrivilegeRegistry.READ_AC);
+        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
-        return acProvider.getAccessControlEntries(getNodeId(path));
+        return acProvider.getAccessControlEntries(getNodeId(absPath));
-        Path path = getValidNodePath(absPath);
-        checkPrivileges(path, PrivilegeRegistry.MODIFY_AC);
+        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
-            NodeId id = getNodeId(path);
-            return editor.addAccessControlEntry(id, principal, privileges);
+            return editor.addAccessControlEntry(absPath, principal, privileges);
-        Path path = getValidNodePath(absPath);
-        checkPrivileges(path, PrivilegeRegistry.MODIFY_AC);
+        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
-        NodeId id = getNodeId(path);
-        if (!editor.removeAccessControlEntry(id, ace)) {
+        if (!editor.removeAccessControlEntry(absPath, ace)) {
+    //-------------------------------------< JackrabbitAccessControlManager >---
+    /**
+     * @see JackrabbitAccessControlManager#editPolicy(String)
+     */
+    public PolicyTemplate editPolicy(String absPath) throws AccessDeniedException, AccessControlException, RepositoryException {
+        checkInitialized();
+        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
+        if (editor == null) {
+            throw new UnsupportedRepositoryOperationException("Editing of access control policies is not supported.");
+        }
+
+        return editor.editPolicyTemplate(absPath);
+    }
+
+    public PolicyTemplate editPolicy(Principal principal) throws AccessDeniedException, AccessControlException, UnsupportedRepositoryOperationException, RepositoryException {
+        checkInitialized();
+        if (editor == null) {
+            throw new UnsupportedRepositoryOperationException("Editing of access control policies is not supported.");
+        }
+        return editor.editPolicyTemplate(principal);
+    }
+
-     * @see AbstractAccessControlManager#getValidNodePath(String)
+     * @see AbstractAccessControlManager#checkValidNodePath(String)
-    protected Path getValidNodePath(String absPath) throws PathNotFoundException, RepositoryException {
+    protected void checkValidNodePath(String absPath) throws PathNotFoundException, RepositoryException {
-        if (hierMgr.resolveNodePath(p) != null) {
-            return p;
-        } else {
+        if (hierMgr.resolveNodePath(p) == null) {
-     * @see AbstractAccessControlManager#checkPrivileges(Path, int)
+     * @see AbstractAccessControlManager#checkPrivileges(String, int)
-    protected void checkPrivileges(Path absPath, int privileges) throws AccessDeniedException, RepositoryException {
+    protected void checkPrivileges(String absPath, int privileges) throws AccessDeniedException, RepositoryException {
+        checkValidNodePath(absPath);
-            throw new AccessDeniedException("No privilege " + privileges + " at " + resolver.getJCRPath(absPath));
+            throw new AccessDeniedException("No privilege " + privileges + " at " + absPath);
-    private boolean internalHasPrivileges(Path path, int privileges) throws RepositoryException {
-        return (compiledPermissions.getPrivileges(path) | ~privileges) == -1;
+    /**
+     *
+     * @param absPath
+     * @param privileges
+     * @return
+     * @throws RepositoryException
+     */
+    private boolean internalHasPrivileges(String absPath, int privileges) throws RepositoryException {
+        Path p = resolver.getQPath(absPath);
+        return (compiledPermissions.getPrivileges(p) | ~privileges) == -1;
-    private NodeId getNodeId(Path absPath) throws RepositoryException {
-        NodeId id = hierMgr.resolveNodePath(absPath);
+    private NodeId getNodeId(String absPath) throws RepositoryException {
+        NodeId id = hierMgr.resolveNodePath(resolver.getQPath(absPath));
-            throw new PathNotFoundException(resolver.getJCRPath(absPath));
+            throw new PathNotFoundException(absPath);

INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS43 INS8 INS39 UPD42 INS29 INS44 INS8 INS21 INS21 INS65 INS42 INS43 INS42 INS42 INS42 INS42 INS21 INS21 INS25 INS41 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS25 INS41 UPD43 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS60 MOV41 UPD43 INS32 INS32 INS68 INS42 INS32 INS32 INS27 INS8 INS32 INS42 INS32 INS27 INS8 INS32 UPD27 UPD42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS69 INS42 INS42 INS42 INS40 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS42 INS33 INS53 INS42 INS42 INS42 UPD42 INS42 INS42 MOV42 INS42 INS32 INS32 UPD42 UPD42 UPD42 INS43 INS14 INS14 UPD43 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 INS42 INS43 INS45 INS43 INS45 UPD42 INS42 INS42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL43 DEL42 DEL44 DEL8 DEL42 DEL42 DEL42 DEL32