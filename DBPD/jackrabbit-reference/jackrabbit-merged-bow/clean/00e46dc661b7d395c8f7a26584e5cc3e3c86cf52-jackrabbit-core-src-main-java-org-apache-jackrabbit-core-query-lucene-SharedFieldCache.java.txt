JCR-1931 replacement of string arrays with hashmap in case of sparse array (<1% non null)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@734092 13f79535-47bb-0310-9956-ffa450edef68

+         * Some heuristic factor that determines whether the array is sparse. Note that if less then
+         * 1% is set, we already count the array as sparse. This is because it will become memory consuming
+         * quickly by keeping the (sparse) arrays 
+         */
+        private static final int SPARSE_FACTOR = 100;
+
+        /**
-        public final String[] terms;
+        private final String[] terms;
+
+        /**
+         * Terms map indexed by document id.
+         */
+        public final Map termsMap;
+
+        /**
+         * Boolean indicating whether the hashMap impl has to be used
+         */
+        public final boolean sparse;
-        public StringIndex(String[] terms, String[] lookup) {
-            this.terms = terms;
+        public StringIndex(String[] terms, String[] lookup, int setValues) {
+            if (isSparse(terms, setValues)) {
+                this.sparse = true;
+                this.terms = null;
+                if (setValues == 0) {
+                    this.termsMap = null;
+                } else {
+                    this.termsMap = getTermsMap(terms, setValues);
+                }
+            } else {
+                this.sparse = false;
+                this.terms = terms;
+                this.termsMap = null;
+            }
+
+        public String getTerm(int i) {
+            if (sparse) {
+                return termsMap == null ? null : (String) termsMap.get(new Integer(i));
+            } else {
+                return terms[i];
+            }
+        }
+
+        private Map getTermsMap(String[] terms, int setValues) {
+            Map map = new HashMap(setValues);
+            for (int i = 0; i < terms.length && setValues > 0; i++) {
+                if (terms[i] != null) {
+                    map.put(new Integer(i), terms[i]);
+                    setValues--;
+                }
+            }
+            return map;
+        }
+
+        private boolean isSparse(String[] terms, int setValues) {
+            // some really simple test to test whether the array is sparse. Currently, when less then 1% is set, the array is already sparse 
+            // for this typical cache to avoid memory issues
+            if (setValues * SPARSE_FACTOR < terms.length) {
+                return true;
+            }
+            return false;
+        }
+            int setValues = 0;
+                            setValues++;
-            SharedFieldCache.StringIndex value = new SharedFieldCache.StringIndex(retArray, lookup);
+            SharedFieldCache.StringIndex value = new SharedFieldCache.StringIndex(retArray, lookup, setValues);

INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS39 INS59 UPD83 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS59 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS42 INS34 INS65 INS42 INS42 INS65 INS42 INS39 INS42 INS25 MOV21 INS42 INS39 INS42 INS25 INS42 INS5 INS42 INS39 INS42 INS60 INS24 INS41 INS5 INS42 INS39 INS42 INS25 INS41 INS66 INS66 INS66 INS66 INS66 INS32 INS8 INS8 INS42 INS8 INS8 INS43 INS85 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS85 INS27 INS8 INS9 INS60 INS42 INS42 INS42 INS21 INS21 INS25 INS21 MOV21 INS21 INS41 INS41 INS42 INS42 INS42 INS14 INS39 INS59 INS27 INS27 INS42 INS25 INS42 INS27 INS40 INS41 INS39 INS59 MOV43 INS7 INS7 INS27 INS8 INS8 INS7 INS7 INS16 INS2 INS43 INS42 INS42 INS34 INS42 INS40 INS42 INS34 INS27 INS8 INS42 INS42 INS9 INS42 INS34 INS22 INS9 INS22 INS33 INS42 INS34 INS21 INS21 INS22 INS9 INS22 INS33 INS27 INS33 INS11 INS42 INS42 INS42 INS2 INS33 INS21 INS21 MOV43 INS42 INS52 INS42 INS52 INS42 INS7 INS7 INS52 INS42 INS52 INS42 INS42 INS33 INS43 INS32 INS42 INS42 INS32 INS37 INS22 INS33 INS22 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS2 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS37 INS42 DEL8