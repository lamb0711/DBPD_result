JCR-2060: JSR 283: Access Nodes and Properties by Array of "NameGlob"

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@773588 13f79535-47bb-0310-9956-ffa450edef68

+    // namePattern and nameGlobs fields are used mutually exclusive
+    private final String[] nameGlobs;
-     * @param maxLevel          umber of hierarchy levels to traverse
+     * @param maxLevel          number of hierarchy levels to traverse
+        nameGlobs = null;
+        this.children = children;
+        this.collectNodes = collectNodes;
+        this.collectProperties = collectProperties;
+    }
+
+    /**
+     * Constructs a <code>ChildrenCollectorFilter</code>
+     *
+     * @param nameGlobs         an array of globbing strings which should be
+     *                          applied to the names of the children
+     * @param children          where the matching children should be added
+     * @param collectNodes      true, if child nodes should be collected; otherwise false
+     * @param collectProperties true, if child properties should be collected; otherwise false
+     * @param maxLevel          number of hierarchy levels to traverse
+     *                          (e.g. 1 for direct children only, 2 for children and their children, and so on)
+     */
+    public ChildrenCollectorFilter(
+            String[] nameGlobs, Collection children,
+            boolean collectNodes, boolean collectProperties, int maxLevel) {
+        super(false, maxLevel);
+        this.nameGlobs = nameGlobs;
+        namePattern = null;
-            if (matches(node.getName(), namePattern)) {
-                children.add(node);
+            if (namePattern != null) {
+                if (matches(node.getName(), namePattern)) {
+                    children.add(node);
+                }
+            } else {
+                if (matches(node.getName(), nameGlobs)) {
+                    children.add(node);
+                }
-            if (matches(property.getName(), namePattern)) {
-                children.add(property);
+            if (namePattern != null) {
+                if (matches(property.getName(), namePattern)) {
+                    children.add(property);
+                }
+            } else {
+                if (matches(property.getName(), nameGlobs)) {
+                    children.add(property);
+                }
+     * Note that leading and trailing whitespace around a pattern <i>is</i> ignored.
+     * Matches the <code>nameGlob</code> strings in the passed array against
+     * the specified name.
+     * <p>
+     * A glob may be a full name or a partial name with one or more
+     * wildcard characters ("<code>*</code>").
+     * <p>
+     * Note that unlike in the case of the {@link #matches(String, String)}
+     * leading and trailing whitespace around a glob is <i>not</i> ignored.
+     *
+     * @param name the name to test the pattern with
+     * @param nameGlobs an array of globbing strings
+     * @return true if the specified name matches any of the globs
+     * @see javax.jcr.Node#getNodes(String[])
+     */
+    public static boolean matches(String name, String[] nameGlobs) {
+        for (int i = 0; i < nameGlobs.length; i++) {
+            // use globbing string as-is, i.e. don't trim any leading/trailing
+            // whitespace
+            if (internalMatches(name, nameGlobs[i], 0, 0)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**

INS23 INS31 INS31 INS83 INS83 INS5 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS85 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS5 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS46 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS5 INS42 INS24 INS41 INS42 UPD66 INS7 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS85 INS42 INS9 INS42 INS7 INS7 INS7 INS7 INS7 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS68 INS42 INS43 INS85 INS58 INS27 INS37 INS8 INS9 INS42 INS33 INS42 INS22 INS42 INS42 INS33 INS22 INS42 INS22 INS42 INS22 INS42 INS25 INS25 INS68 INS40 INS42 INS69 INS42 INS39 INS59 INS42 INS40 INS42 INS25 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS27 MOV8 INS8 INS27 MOV8 INS8 INS42 INS69 INS69 INS5 INS42 INS34 INS32 INS8 INS42 INS33 INS25 INS42 INS33 INS25 INS43 INS43 INS43 INS85 INS42 INS42 INS2 INS34 INS34 INS41 INS32 INS8 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS21 INS42 INS32 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42