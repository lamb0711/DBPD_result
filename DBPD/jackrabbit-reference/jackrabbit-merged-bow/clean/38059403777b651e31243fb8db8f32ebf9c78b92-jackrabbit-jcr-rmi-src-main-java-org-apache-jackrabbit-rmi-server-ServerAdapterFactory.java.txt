JCRRMI-27: JSR-283: Support AccessControlManager

Merged revisions 925218 and 925223 (by Felix) from commons/jcr-rmi/trunk to trunk/jackrabbit-jcr-rmi.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@927849 13f79535-47bb-0310-9956-ffa450edef68

+import java.security.Principal;
+import java.security.acl.Group;
+import java.util.Iterator;
+import javax.jcr.security.AccessControlEntry;
+import javax.jcr.security.AccessControlList;
+import javax.jcr.security.AccessControlManager;
+import javax.jcr.security.AccessControlPolicy;
+import javax.jcr.security.AccessControlPolicyIterator;
+import javax.jcr.security.Privilege;
+import org.apache.jackrabbit.rmi.remote.principal.RemotePrincipal;
+import org.apache.jackrabbit.rmi.remote.security.RemoteAccessControlEntry;
+import org.apache.jackrabbit.rmi.remote.security.RemoteAccessControlManager;
+import org.apache.jackrabbit.rmi.remote.security.RemoteAccessControlPolicy;
+import org.apache.jackrabbit.rmi.remote.security.RemotePrivilege;
+import org.apache.jackrabbit.rmi.server.principal.ServerGroup;
+import org.apache.jackrabbit.rmi.server.principal.ServerPrincipal;
+import org.apache.jackrabbit.rmi.server.principal.ServerPrincipalIterator;
+import org.apache.jackrabbit.rmi.server.security.ServerAccessControlEntry;
+import org.apache.jackrabbit.rmi.server.security.ServerAccessControlList;
+import org.apache.jackrabbit.rmi.server.security.ServerAccessControlPolicyIterator;
+import org.apache.jackrabbit.rmi.server.security.ServerAccessControlManager;
+import org.apache.jackrabbit.rmi.server.security.ServerAccessControlPolicy;
+import org.apache.jackrabbit.rmi.server.security.ServerPrivilege;
- * Default implementation of the
- * {@link RemoteAdapterFactory RemoteAdapterFactory} interface.
- * This factory uses the server adapters defined in this package as
- * the default adapter implementations. Subclasses can override or extend
- * the default adapters by implementing the corresponding factory methods.
+ * Default implementation of the {@link RemoteAdapterFactory
+ * RemoteAdapterFactory} interface. This factory uses the server adapters
+ * defined in this package as the default adapter implementations. Subclasses
+ * can override or extend the default adapters by implementing the corresponding
+ * factory methods.
- * The <code>bufferSize</code> property can be used to configure the
- * size of the buffer used by iterators to speed up iterator traversal
- * over the network.
+ * The <code>bufferSize</code> property can be used to configure the size of the
+ * buffer used by iterators to speed up iterator traversal over the network.
-     * The port number for server objects. Initializes to the value of
-     * the <code>org.apache.jackrabbit.rmi.port</code> system property,
-     * or to 0 if the property is not set. Value 0 means that the server
-     * objects should use a random anonymous port.
+     * The port number for server objects. Initializes to the value of the
+     * <code>org.apache.jackrabbit.rmi.port</code> system property, or to 0 if
+     * the property is not set. Value 0 means that the server objects should use
+     * a random anonymous port.
-    private int portNumber =
-        Integer.getInteger("org.apache.jackrabbit.rmi.port", 0).intValue();
+    private int portNumber = Integer.getInteger(
+        "org.apache.jackrabbit.rmi.port", 0).intValue();
-     * Creates a {@link ServerSession ServerSession} instance.
-     * In case the underlying session is transaction enabled, the
-     * remote interface is will be transaction enabled too through
-     * the {@link ServerXASession}.
-     *
+     * Creates a {@link ServerSession ServerSession} instance. In case the
+     * underlying session is transaction enabled, the remote interface is will
+     * be transaction enabled too through the {@link ServerXASession}.
-     * Creates a {@link ServerWorkspace ServerWorkspace} instance.
-     * {@inheritDoc}
+     * Creates a {@link ServerWorkspace ServerWorkspace} instance. {@inheritDoc}
-     * instance.
-     * {@inheritDoc}
+     * instance. {@inheritDoc}
-        ObservationManager observationManager) throws RemoteException {
+            ObservationManager observationManager) throws RemoteException {
-     * instance.
-     * {@inheritDoc}
+     * instance. {@inheritDoc}
-            NamespaceRegistry registry)
-            throws RemoteException {
+            NamespaceRegistry registry) throws RemoteException {
-            NodeTypeManager manager)
-            throws RemoteException {
+            NodeTypeManager manager) throws RemoteException {
-     * Creates a {@link ServerItem ServerItem} instance.
-     * {@inheritDoc}
+     * Creates a {@link ServerItem ServerItem} instance. {@inheritDoc}
-     * Creates a {@link ServerProperty ServerProperty} instance.
-     * {@inheritDoc}
+     * Creates a {@link ServerProperty ServerProperty} instance. {@inheritDoc}
-     * Creates a {@link ServerNode ServerNode} instance.
-     * {@inheritDoc}
+     * Creates a {@link ServerNode ServerNode} instance. {@inheritDoc}
-     * Creates a {@link ServerVersion ServerVersion} instance.
-     * {@inheritDoc}
+     * Creates a {@link ServerVersion ServerVersion} instance. {@inheritDoc}
-    public RemoteVersion getRemoteVersion(Version version) throws RemoteException {
+    public RemoteVersion getRemoteVersion(Version version)
+            throws RemoteException {
-    public RemoteVersionHistory getRemoteVersionHistory(VersionHistory versionHistory)
-            throws RemoteException {
+    public RemoteVersionHistory getRemoteVersionHistory(
+            VersionHistory versionHistory) throws RemoteException {
-     * Creates a {@link ServerNodeType ServerNodeType} instance.
-     * {@inheritDoc}
+     * Creates a {@link ServerNodeType ServerNodeType} instance. {@inheritDoc}
-     * Creates a {@link ServerPropertyDefinition ServerPropertyDefinition} instance.
-     * {@inheritDoc}
+     * Creates a {@link ServerPropertyDefinition ServerPropertyDefinition}
+     * instance. {@inheritDoc}
-    public RemotePropertyDefinition getRemotePropertyDefinition(PropertyDefinition def)
-            throws RemoteException {
+    public RemotePropertyDefinition getRemotePropertyDefinition(
+            PropertyDefinition def) throws RemoteException {
-     * Creates a {@link ServerLock ServerLock} instance.
-     * {@inheritDoc}
+     * Creates a {@link ServerLock ServerLock} instance. {@inheritDoc}
-    public RemoteQueryManager getRemoteQueryManager(
-            Session session, QueryManager manager) throws RemoteException {
+    public RemoteQueryManager getRemoteQueryManager(Session session,
+            QueryManager manager) throws RemoteException {
-     * Creates a {@link ServerQuery ServerQuery} instance.
-     * {@inheritDoc}
+     * Creates a {@link ServerQuery ServerQuery} instance. {@inheritDoc}
-    public RemoteEventCollection getRemoteEvent(long listenerId, EventIterator events)
-            throws RemoteException {
+    public RemoteEventCollection getRemoteEvent(long listenerId,
+            EventIterator events) throws RemoteException {
-                            event.getType(), event.getPath(), event.getUserID(), this));
+                        event.getType(), event.getPath(), event.getUserID(),
+                        this));
-            remoteEvents = (RemoteEventCollection.RemoteEvent[])
-                eventList.toArray(new RemoteEventCollection.RemoteEvent[eventList.size()]);
+            remoteEvents = (RemoteEventCollection.RemoteEvent[]) eventList.toArray(new RemoteEventCollection.RemoteEvent[eventList.size()]);
-            remoteEvents = new RemoteEventCollection.RemoteEvent[0]; // for safety
+            remoteEvents = new RemoteEventCollection.RemoteEvent[0]; // for
+            // safety
-     * Optimizes the given remote iterator for transmission across the
-     * network. This method retrieves the first set of elements from
-     * the iterator by calling {@link RemoteIterator#nextObjects()} and
-     * then asks for the total size of the iterator. If the size is unkown
-     * or greater than the length of the retrieved array, then the elements,
-     * the size, and the remote iterator reference are wrapped into a
-     * {@link BufferIterator} instance that gets passed over the network.
-     * If the retrieved array of elements contains all the elements in the
-     * iterator, then the iterator instance is discarded and just the elements
-     * are wrapped into a {@link ArrayIterator} instance to be passed to the
-     * client.
+     * Optimizes the given remote iterator for transmission across the network.
+     * This method retrieves the first set of elements from the iterator by
+     * calling {@link RemoteIterator#nextObjects()} and then asks for the total
+     * size of the iterator. If the size is unkown or greater than the length of
+     * the retrieved array, then the elements, the size, and the remote iterator
+     * reference are wrapped into a {@link BufferIterator} instance that gets
+     * passed over the network. If the retrieved array of elements contains all
+     * the elements in the iterator, then the iterator instance is discarded and
+     * just the elements are wrapped into a {@link ArrayIterator} instance to be
+     * passed to the client.
-        return optimizeIterator(
-                new ServerNodeIterator(iterator, this, bufferSize));
+        return optimizeIterator(new ServerNodeIterator(iterator, this,
+            bufferSize));
-        return optimizeIterator(
-                new ServerPropertyIterator(iterator, this, bufferSize));
+        return optimizeIterator(new ServerPropertyIterator(iterator, this,
+            bufferSize));
-        return optimizeIterator(
-                new ServerVersionIterator(iterator, this, bufferSize));
+        return optimizeIterator(new ServerVersionIterator(iterator, this,
+            bufferSize));
-        return optimizeIterator(
-                new ServerNodeTypeIterator(iterator, this, bufferSize));
+        return optimizeIterator(new ServerNodeTypeIterator(iterator, this,
+            bufferSize));
-        return optimizeIterator(
-                new ServerRowIterator(iterator, this, bufferSize));
+        return optimizeIterator(new ServerRowIterator(iterator, this,
+            bufferSize));
+    /**
+     * Creates a
+     * {@link org.apache.jackrabbit.rmi.server.security.ServerAccessControlManager}
+     * instance. {@inheritDoc}
+     */
+    public RemoteAccessControlManager getRemoteAccessControlManager(
+            AccessControlManager acm) throws RemoteException {
+        return new ServerAccessControlManager(acm, this);
+    }
+
+    public RemotePrivilege getRemotePrivilege(final Privilege local)
+            throws RemoteException {
+        return new ServerPrivilege(local, this);
+    }
+
+    public RemotePrivilege[] getRemotePrivilege(final Privilege[] local)
+            throws RemoteException {
+        RemotePrivilege[] remote = new RemotePrivilege[local.length];
+        for (int i = 0; i < remote.length; i++) {
+            remote[i] = getRemotePrivilege(local[i]);
+        }
+        return remote;
+    }
+
+    public RemoteAccessControlPolicy getRemoteAccessControlPolicy(
+            final AccessControlPolicy local) throws RemoteException {
+        if (local instanceof AccessControlList) {
+            return new ServerAccessControlList((AccessControlList) local, this);
+        }
+        return new ServerAccessControlPolicy(local, this);
+    }
+
+    public RemoteAccessControlPolicy[] getRemoteAccessControlPolicy(
+            final AccessControlPolicy[] local) throws RemoteException {
+        RemoteAccessControlPolicy[] remote = new RemoteAccessControlPolicy[local.length];
+        for (int i = 0; i < remote.length; i++) {
+            remote[i] = getRemoteAccessControlPolicy(local[i]);
+        }
+        return remote;
+    }
+
+    /**
+     * Creates a {@link ServerNodeIterator} instance. {@inheritDoc}
+     */
+    public RemoteIterator getRemoteAccessControlPolicyIterator(
+            AccessControlPolicyIterator iterator) throws RemoteException {
+        return optimizeIterator(new ServerAccessControlPolicyIterator(iterator,
+            this, bufferSize));
+    }
+
+    public RemoteAccessControlEntry getRemoteAccessControlEntry(
+            final AccessControlEntry local) throws RemoteException {
+        return new ServerAccessControlEntry(local, this);
+    }
+
+    public RemoteAccessControlEntry[] getRemoteAccessControlEntry(
+            final AccessControlEntry[] local) throws RemoteException {
+        RemoteAccessControlEntry[] remote = new RemoteAccessControlEntry[local.length];
+        for (int i = 0; i < remote.length; i++) {
+            remote[i] = getRemoteAccessControlEntry(local[i]);
+        }
+        return remote;
+    }
+
+    public RemotePrincipal getRemotePrincipal(final Principal principal) throws RemoteException {
+        if (principal instanceof Group) {
+            return new ServerGroup((Group) principal, this);
+        }
+
+        return new ServerPrincipal(principal, this);
+    }
+
+    public RemoteIterator getRemotePrincipalIterator(
+            Iterator<Principal> principals) throws RemoteException {
+        return optimizeIterator(new ServerPrincipalIterator(principals, this,
+            bufferSize));
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS65 INS42 INS43 INS42 INS42 INS41 INS42 INS83 INS43 INS42 INS42 INS41 INS43 INS85 INS83 INS5 INS42 INS42 INS60 INS24 INS41 INS42 INS83 INS43 INS42 INS42 INS25 INS41 INS43 INS85 INS83 INS5 INS42 INS42 INS60 INS24 INS41 INS65 INS42 INS43 INS42 INS42 INS41 INS42 INS83 INS43 INS42 INS42 INS41 INS43 INS85 INS83 INS5 INS42 INS42 INS60 INS24 INS41 INS42 INS83 INS43 INS42 INS42 INS25 INS41 INS42 INS74 INS42 INS42 INS41 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS65 INS66 INS65 INS42 INS14 INS42 INS14 INS42 INS43 INS85 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS62 INS8 INS14 INS42 INS43 INS85 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS65 INS66 INS65 INS42 INS32 INS42 INS14 INS42 INS43 INS85 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS62 INS8 INS14 INS43 INS43 INS32 INS40 INS43 INS42 INS52 INS43 INS42 INS52 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS43 INS41 INS43 INS42 INS52 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS14 INS43 INS42 INS52 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS43 INS41 INS43 INS42 INS52 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS14 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS43 INS42 INS52 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS14 INS42 INS43 INS42 INS52 INS42 INS43 INS85 INS2 INS32 INS43 INS11 INS52 INS43 INS85 INS2 INS32 INS42 INS43 INS85 INS2 INS32 INS43 INS11 INS52 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS2 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66