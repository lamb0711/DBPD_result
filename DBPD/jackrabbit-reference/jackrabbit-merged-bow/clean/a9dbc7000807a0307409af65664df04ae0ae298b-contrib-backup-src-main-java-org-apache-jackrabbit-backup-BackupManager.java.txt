JCR-442: Committed patch-060808-backup.txt from Nicolas.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429606 13f79535-47bb-0310-9956-ffa450edef68

- * This class manages the backup/restore process. It is responsible to transmit it to the BackupIOHandler and to add the repository to the 
+ * This class manages the backup/restore process. It is responsible to send to/fetch from the BackupIOHandler and to add the repository to the
- * 
- * It extends Backup since it is based on the same semantics. However it is not at the same type as a ResourceBackup (indicated by different names)
- * 
+ *
+ * It extends Backup since it is based on the same semantics. However it is not the same type as a ResourceBackup
+ * (the different semantics are indicated by different names)
+ *
- * 
+ *
-    
-    public BackupManager(RepositoryImpl repo, BackupConfig conf) throws LoginException, RepositoryException {
-        super(repo, conf);
-        
+
+
+    public BackupManager(RepositoryImpl repo, BackupConfig conf, String login, String password) throws LoginException, RepositoryException {
+        super(repo, conf, login , password);
+
+
-        Iterator it = this.conf.getAllResources().iterator();
-        
-        while(it.hasNext()) {
+        Iterator it = this.getConf().getAllResources().iterator();
+        while ( it.hasNext() ) {
-            b.init(repo, conf);
+            b.init(repo, conf, login, password);
-    
-    
-    public static BackupManager create(RepositoryImpl impl, BackupConfig conf2) throws LoginException, RepositoryException {
-		return new BackupManager(impl, conf2);
+
+    public BackupManager() {
+        super();
+    }
+
+
+    public static BackupManager create(RepositoryImpl impl, BackupConfig conf2, String login, String password) throws LoginException, RepositoryException {
+		return new BackupManager(impl, conf2, login, password);
-     * TODO visibility of the conf is huge: each ResourceBackup can get and set others resources modifiers. Is it really bad?
-        
-        h.initBackup();
+
+        //We need to put those two Backup resources here for backup since they are handled differently
+        //for restore
+        this.addResource(new RepositoryBackup());
+        this.addResource(new BackupConfigurationBackup());
+
-            
-           
-            Collection resources = this.conf.getAllResources();
-            
-         
+            Collection resources = this.getConf().getAllResources();
-            
+
-    
-    public void restore(BackupIOHandler h) {
-        // TODO Auto-generated method stub
-        
+    /**
+     * TODO commment
+     * @param backup
+     * @throws RepositoryException 
+     * @throws LoginException 
+     */
+    private void addResource(Backup backup) throws LoginException, RepositoryException {
+        String login = this.getCredentials().getUserID();
+        String password = this.getCredentials().getPassword().toString();
+        backup.init(this.getRepo(), this.getConf(), login, password);
+        this.getConf().addResource(backup);
-   
- 
+    /**
+     * Same method as backup but for restore.
+     * TODO Comment
+     * @throws IllegalAccessException 
+     * @throws InstantiationException 
+     * @throws ClassNotFoundException 
+     *
+     */
+    public void restore(BackupIOHandler h) throws RepositoryException, IOException {
+        /*
+         * There is a dissimetry in the restore operation compared to the backup one.
+         * It is because of the need to first restore the repository and launch it where during the backup we can
+         * backup the repository and the configuration file the same way as the other.
+         *
+         * (to make repository + backup file mandatory, they are added automatically in BAckupManager)
+         *
+         *
+         * Ignore any repository or backupConfig restore orders...
+         *
+         */
+        try {
+           Collection resources = this.getConf().getAllResources();
+           Iterator it = resources.iterator();
+
+           while (it.hasNext()) {
+               Backup b = (Backup) it.next();
+               b.restore(h);
+           }
+       }
+       finally  {
+           h.close();
+       }
+   }

INS31 INS31 INS44 INS44 INS83 INS42 INS8 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS29 INS43 INS43 INS8 UPD66 UPD66 INS66 INS43 INS42 INS43 INS42 INS46 INS43 INS42 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS42 INS60 INS60 INS21 INS21 INS65 INS65 INS65 INS65 INS42 INS42 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS8 INS8 INS42 INS42 INS52 UPD42 INS14 INS52 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS61 INS21 INS43 INS43 INS32 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS42 INS52 INS42 INS32 INS52 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL66 DEL42 DEL52 DEL42 DEL22 DEL8