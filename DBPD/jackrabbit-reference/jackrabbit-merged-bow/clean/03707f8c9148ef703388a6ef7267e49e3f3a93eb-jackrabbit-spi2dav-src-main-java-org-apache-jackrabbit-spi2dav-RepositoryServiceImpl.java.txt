JCR-2454 : spi2dav: JSR 283 NodeType Management

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1092393 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.StringWriter;
+import java.util.Arrays;
+import org.apache.jackrabbit.spi.commons.nodetype.compact.CompactNodeTypeDefWriter;
-        // TODO
-        throw new UnsupportedOperationException("JCR-2003. Implementation missing");
+        PropPatchMethod method = null;
+     	try {
+             DavPropertySet setProperties = new DavPropertySet();
+             setProperties.add(createRegisterNodeTypesProperty(sessionInfo, nodeTypeDefinitions, allowUpdate));
+             String uri = uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName());
+             method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
+             initMethod(method, sessionInfo, true);
+             getClient(sessionInfo).executeMethod(method);
+             method.checkSuccess();
+         } catch (IOException e) {
+             throw new RepositoryException(e);
+         } catch (DavException e) {
+             throw ExceptionConverter.generate(e);
+         } finally {
+             if (method != null) {
+                 method.releaseConnection();
+             }
+         }
-        // TODO
-        throw new UnsupportedOperationException("JCR-2003. Implementation missing");
+        PropPatchMethod method = null;
+     	try {
+             DavPropertySet setProperties = new DavPropertySet();
+             setProperties.add(createUnRegisterNodeTypesProperty(sessionInfo, nodeTypeNames));
+             String uri = uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName());
+             method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
+             initMethod(method, sessionInfo, true);
+             getClient(sessionInfo).executeMethod(method);
+             method.checkSuccess();
+         } catch (IOException e) {
+             throw new RepositoryException(e);
+         } catch (DavException e) {
+             throw ExceptionConverter.generate(e);
+         } finally {
+             if (method != null) {
+                 method.releaseConnection();
+             }
+         }
+    private DavProperty<List<XmlSerializable>> createRegisterNodeTypesProperty(SessionInfo sessionInfo, QNodeTypeDefinition[] nodeTypeDefinitions, final boolean allowUpdate) throws IOException {
+        // create xml elements for both cnd and allow update value.
+        List<XmlSerializable> val = new ArrayList<XmlSerializable>();
+
+        StringWriter sw = new StringWriter();
+        CompactNodeTypeDefWriter writer = new CompactNodeTypeDefWriter(sw, new NamespaceResolverImpl(sessionInfo), true);
+        writer.write(Arrays.asList(nodeTypeDefinitions));
+        writer.close();
+
+        final String cnd = sw.toString();
+        val.add(new XmlSerializable() {
+            public Element toXml(Document document) {
+                Element cndElem = document.createElementNS(JcrRemotingConstants.NS_URI, JcrRemotingConstants.NS_PREFIX +  ":" + JcrRemotingConstants.XML_CND);
+                DomUtil.setText(cndElem, cnd);
+                return cndElem;
+            }
+        });
+        val.add(new XmlSerializable() {
+            public Element toXml(Document document) {
+                Element allowElem = document.createElementNS(JcrRemotingConstants.NS_URI, JcrRemotingConstants.NS_PREFIX  + ":" + JcrRemotingConstants.XML_ALLOWUPDATE);
+                DomUtil.setText(allowElem, Boolean.toString(allowUpdate));
+                return allowElem;
+            }
+        });
+
+        return new DefaultDavProperty<List<XmlSerializable>>(JcrRemotingConstants.JCR_NODETYPES_CND_LN, val, ItemResourceConstants.NAMESPACE, false);
+    }
+
+    private DavProperty<List<XmlSerializable>> createUnRegisterNodeTypesProperty(SessionInfo sessionInfo, Name[] nodeTypeNames) throws IOException, RepositoryException {
+        NamePathResolver resolver = getNamePathResolver(sessionInfo);
+        List<XmlSerializable> val = new ArrayList<XmlSerializable>();
+        for (Name ntName : nodeTypeNames) {
+            final String jcrName = resolver.getJCRName(ntName);
+            val.add(new XmlSerializable() {
+                public Element toXml(Document document) {
+                    Element ntNameElem = document.createElementNS(JcrRemotingConstants.NS_URI, JcrRemotingConstants.NS_PREFIX + ":" + JcrRemotingConstants.XML_NODETYPENAME);
+                    org.w3c.dom.Text txt = document.createTextNode(jcrName);
+                    ntNameElem.appendChild(txt);
+                    return ntNameElem;
+                }
+            });
+        }
+        return new DefaultDavProperty<List<XmlSerializable>>(JcrRemotingConstants.JCR_NODETYPES_CND_LN, val, ItemResourceConstants.NAMESPACE, false);
+    }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS8 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS8 INS60 INS54 INS60 INS54 INS43 INS74 INS43 INS42 INS5 INS42 INS83 INS39 INS42 INS42 INS60 INS60 INS60 INS21 INS21 INS60 INS21 INS21 INS41 INS43 INS74 INS43 INS42 INS5 INS42 INS42 INS42 INS60 INS60 INS70 INS41 INS43 INS59 INS8 INS12 INS12 INS8 INS43 INS59 INS8 INS12 INS12 INS8 INS42 INS43 INS43 INS42 INS43 INS85 INS74 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS83 INS43 INS59 INS32 INS32 INS14 INS42 INS43 INS43 INS42 INS43 INS85 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS14 INS42 INS42 INS33 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS25 INS42 INS42 INS33 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS25 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS74 INS40 INS42 INS40 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS21 INS74 INS40 INS42 INS40 INS9 INS43 INS59 INS32 INS43 INS59 INS7 INS32 INS32 INS32 INS43 INS42 MOV53 INS43 INS42 INS53 INS27 INS8 INS43 INS59 INS32 INS43 INS59 INS7 INS32 INS32 INS32 INS43 INS42 MOV53 INS43 INS42 INS53 INS27 INS8 INS42 INS42 INS74 INS43 INS43 INS42 INS14 INS9 INS42 INS42 INS42 INS42 INS42 INS43 INS1 INS43 INS1 INS43 INS74 INS42 INS42 INS42 INS42 INS74 INS42 INS83 INS43 INS59 INS32 INS43 INS74 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS43 INS42 INS42 INS43 INS42 INS42 INS31 INS42 INS31 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS14 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS14 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS1 INS42 INS42 INS42 INS42 INS42 INS42 INS43 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 UPD42 INS42 INS42 INS42 INS43 INS42 INS60 INS21 INS41 INS42 INS43 INS42 INS60 INS21 INS41 INS42 INS31 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS32 INS42 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS60 INS60 INS21 INS41 INS42 INS42 INS40 INS27 INS42 INS42 INS40 INS27 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS40 INS45 INS40 INS40 INS45 INS40 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS42 INS42 INS42 INS40 INS45 INS40 DEL45 DEL8 DEL45 DEL8