JCR-189: QueryHandler should use lucene Input-/OutputStream implementations

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@233174 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.BasedFileSystem;
-import org.apache.jackrabbit.core.fs.FileSystem;
-import org.apache.jackrabbit.core.fs.FileSystemException;
-import org.apache.jackrabbit.core.fs.FileSystemResource;
+import java.io.File;
-    private final FileSystem fs;
+    private final File indexDir;
-     * @param fs the base file system
+     * @param indexDir the base file system
-     * @throws FileSystemException if an error occurs
-    MultiIndex(FileSystem fs,
+    MultiIndex(File indexDir,
-               String rootUUID) throws FileSystemException, IOException {
+               String rootUUID) throws IOException {
-        this.fs = fs;
+        this.indexDir = indexDir;
-        if (fs.exists(indexNames.getFileName())) {
-            indexNames.read(fs);
+        if (indexNames.exists(indexDir)) {
+            indexNames.read(indexDir);
-        if (fs.exists(deletable.getFileName())) {
-            deletable.read(fs);
+        if (deletable.exists(indexDir)) {
+            deletable.read(indexDir);
-        FileSystemResource mapFile = new FileSystemResource(fs, NS_MAPPING_FILE);
+        File mapFile = new File(indexDir, NS_MAPPING_FILE);
-                FileSystem sub = new BasedFileSystem(fs, indexNames.getName(i));
-                sub.init();
+                File sub = new File(indexDir, indexNames.getName(i));
+                if (!sub.exists() && !sub.mkdir()) {
+                    throw new IOException("Unable to create directory: " + sub.getAbsolutePath());
+                }
-            RedoLog redoLog = new RedoLog(new FileSystemResource(fs, REDO_LOG));
+            RedoLog redoLog = new RedoLog(new File(indexDir, REDO_LOG));
-        } catch (FileSystemException e) {
-            throw new IOException(e.getMessage());
-            // create new index folder
-            String name = indexNames.newName();
-            FileSystem sub = new BasedFileSystem(fs, name);
-            PersistentIndex index;
-            try {
-                sub.init();
-                index = new PersistentIndex(name, sub, true, handler.getAnalyzer());
-                index.setMaxMergeDocs(handler.getMaxMergeDocs());
-                index.setMergeFactor(handler.getMergeFactor());
-                index.setMinMergeDocs(handler.getMinMergeDocs());
-                index.setUseCompoundFile(handler.getUseCompoundFile());
-            } catch (FileSystemException e) {
-                throw new IOException(e.getMessage());
-            }
+
+            File sub = newIndexFolder();
+            String name = sub.getName();
+            PersistentIndex index = new PersistentIndex(name, sub, true, handler.getAnalyzer());
+            index.setMaxMergeDocs(handler.getMaxMergeDocs());
+            index.setMergeFactor(handler.getMergeFactor());
+            index.setMinMergeDocs(handler.getMinMergeDocs());
+            index.setUseCompoundFile(handler.getUseCompoundFile());
-            try {
-                indexes.add(index);
-                indexNames.addName(name);
-                indexNames.write(fs);
-            } catch (FileSystemException e) {
-                throw new IOException(e.getMessage());
-            }
+            indexes.add(index);
+            indexNames.addName(name);
+            indexNames.write(indexDir);
-        try {
-            volatileIndex.getRedoLog().clear();
-        } catch (FileSystemException e) {
-            log.error("Internal error: Unable to clear redo log.", e);
-        }
+        volatileIndex.getRedoLog().clear();
+
-            try {
-                String name = indexNames.newName();
-                FileSystem sub = new BasedFileSystem(fs, name);
-                sub.init();
-                PersistentIndex index = new PersistentIndex(name, sub, true, handler.getAnalyzer());
-                index.setMaxMergeDocs(handler.getMaxMergeDocs());
-                index.setMergeFactor(handler.getMergeFactor());
-                index.setMinMergeDocs(handler.getMinMergeDocs());
-                index.setUseCompoundFile(handler.getUseCompoundFile());
-                indexes.add(index);
-                indexNames.addName(name);
-                indexNames.write(fs);
-            } catch (FileSystemException e) {
-                throw new IOException(e.getMessage());
-            }
+            File sub = newIndexFolder();
+            String name = sub.getName();
+            PersistentIndex index = new PersistentIndex(name, sub, true, handler.getAnalyzer());
+            index.setMaxMergeDocs(handler.getMaxMergeDocs());
+            index.setMergeFactor(handler.getMergeFactor());
+            index.setMinMergeDocs(handler.getMinMergeDocs());
+            index.setUseCompoundFile(handler.getUseCompoundFile());
+            indexes.add(index);
+            indexNames.addName(name);
+            indexNames.write(indexDir);
+                indexNames.write(indexDir);
-                try {
-                    fs.deleteFolder(index.getName());
-                } catch (FileSystemException e) {
+                File dir = new File(indexDir, index.getName());
+                if (!deleteIndex(dir)) {
-                    try {
-                        deletable.write(fs);
-                    } catch (FileSystemException e1) {
-                        throw new IOException(e.getMessage());
-                    }
+                    deletable.write(indexDir);
-        try {
-            indexNames.write(fs);
-        } catch (FileSystemException e) {
-            throw new IOException(e.getMessage());
-        }
-        String name = indexNames.newName();
-        FileSystem sub = new BasedFileSystem(fs, name);
-        PersistentIndex index;
-        try {
-            sub.init();
-            index = new PersistentIndex(name, sub, true, handler.getAnalyzer());
-            index.setMaxMergeDocs(handler.getMaxMergeDocs());
-            index.setMergeFactor(handler.getMergeFactor());
-            index.setMinMergeDocs(handler.getMinMergeDocs());
-            index.setUseCompoundFile(handler.getUseCompoundFile());
-        } catch (FileSystemException e) {
-            throw new IOException(e.getMessage());
-        }
+        File sub = newIndexFolder();
+        String name = sub.getName();
+        PersistentIndex index = new PersistentIndex(name, sub, true, handler.getAnalyzer());
+        index.setMaxMergeDocs(handler.getMaxMergeDocs());
+        index.setMergeFactor(handler.getMergeFactor());
+        index.setMinMergeDocs(handler.getMinMergeDocs());
+        index.setUseCompoundFile(handler.getUseCompoundFile());
+
+
-            try {
-                fs.deleteFolder(pi.getName());
-            } catch (FileSystemException e) {
+            File dir = new File(indexDir, pi.getName());
+            if (!deleteIndex(dir)) {
-                try {
-                    deletable.write(fs);
-                } catch (FileSystemException e1) {
-                    throw new IOException(e.getMessage());
-                }
-        try {
-            indexNames.write(fs);
-        } catch (FileSystemException e) {
-            throw new IOException(e.getMessage());
-        }
+        indexNames.write(indexDir);
+        deletable.write(indexDir);
-            try {
-                fs.deleteFolder(indexName);
+            File dir = new File(indexDir, indexName);
+            if (deleteIndex(dir)) {
-            } catch (FileSystemException e) {
+            } else {
-            deletable.write(fs);
-        } catch (Exception e) {
-            // catches IOException and FileSystemException
+            deletable.write(indexDir);
+        } catch (IOException e) {
+     * Deletes the index <code>directory</code>.
+     *
+     * @param directory the index directory to delete.
+     * @return <code>true</code> if the delete was successful,
+     *         <code>false</code> otherwise.
+     */
+    private boolean deleteIndex(File directory) {
+        // trivial if it does not exist anymore
+        if (!directory.exists()) {
+            return true;
+        }
+        // delete files first
+        File[] files = directory.listFiles();
+        for (int i = 0; i < files.length; i++) {
+            if (!files[i].delete()) {
+                return false;
+            }
+        }
+        // now delete directory itself
+        return directory.delete();
+    }
+
+    /**
+     * Returns an new index folder which is empty.
+     *
+     * @return the new index folder.
+     * @throws IOException if the folder cannot be created.
+     */
+    private File newIndexFolder() throws IOException {
+        // create new index folder. make sure it does not exist
+        File sub;
+        do {
+            sub = new File(indexDir, indexNames.newName());
+        } while (sub.exists());
+
+        if (!sub.mkdir()) {
+            throw new IOException("Unable to create directory: " + sub.getAbsolutePath());
+        }
+        return sub;
+    }
+
+    /**

MOV26 UPD40 INS31 INS31 UPD43 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 MOV43 INS8 UPD42 UPD42 UPD43 UPD42 MOV21 INS60 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS65 INS65 INS65 INS43 INS42 INS25 INS60 INS24 INS41 INS65 INS65 INS65 INS42 INS60 INS19 INS25 INS41 UPD42 UPD42 UPD43 INS8 UPD43 MOV43 INS59 INS32 INS66 INS42 INS66 INS66 INS66 INS42 INS38 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS66 INS66 INS42 INS66 INS43 INS59 INS8 INS32 INS38 INS8 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 INS60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS60 MOV60 INS60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 UPD42 INS32 INS42 INS32 INS60 INS25 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS60 INS25 INS32 INS41 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS53 UPD42 UPD43 UPD42 INS43 MOV43 INS59 MOV43 INS59 INS43 INS59 UPD43 MOV43 INS59 INS42 MOV42 UPD42 MOV42 INS43 INS59 INS38 INS8 INS43 INS59 INS32 MOV8 MOV8 MOV43 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS34 INS38 INS8 INS7 INS42 INS42 INS14 UPD42 UPD42 UPD42 INS25 INS42 UPD42 INS42 INS32 MOV42 INS14 INS42 INS42 UPD42 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS14 UPD42 MOV21 INS60 INS25 UPD42 MOV42 INS42 INS14 INS32 MOV21 UPD42 MOV42 INS42 INS14 INS42 INS42 UPD42 INS32 INS41 INS42 INS14 MOV43 INS27 UPD43 INS27 INS8 UPD42 INS42 INS42 MOV43 MOV42 MOV42 MOV9 MOV32 INS42 UPD42 UPD42 UPD43 MOV43 MOV42 INS42 INS9 INS32 INS43 INS59 INS38 INS8 INS43 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS42 INS2 INS42 INS9 INS43 INS42 MOV32 INS45 INS32 UPD42 INS38 INS38 INS53 UPD43 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 UPD42 MOV42 INS42 INS14 INS32 MOV21 INS21 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 UPD42 INS32 INS32 INS14 UPD42 INS43 INS42 MOV32 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 MOV43 INS27 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS32 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL59 DEL60 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL12 DEL54 DEL42 DEL42 DEL43 DEL42 DEL42 DEL9 DEL42 DEL32 DEL14 DEL7 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL44 DEL12 DEL54 DEL42 DEL43