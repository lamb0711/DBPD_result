JCR-1588: JSR 283 Access Control
JCR-1104: JSR 283 support
          > add implemented methods to jsr283.Node.java, 
          > add jsr283.Session.java,
          > let SessionImpl implement jsr283.Session
          > add Session.removeItem

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@712984 13f79535-47bb-0310-9956-ffa450edef68

-        implements JackrabbitSession, NamespaceResolver, NamePathResolver, Dumpable {
+        implements org.apache.jackrabbit.api.jsr283.Session, JackrabbitSession, NamespaceResolver, NamePathResolver, Dumpable {
-     * TODO deprecate as soon as present with Session interface (JSR 283)
+     * @deprecated Use {@link org.apache.jackrabbit.api.jsr283.Session#ACTION_READ} instead.
-    public static final String READ_ACTION = "read";
+    public static final String READ_ACTION = org.apache.jackrabbit.api.jsr283.Session.ACTION_READ;
-     * TODO deprecate as soon as present with Session interface (JSR 283)
+     * @deprecated Use {@link org.apache.jackrabbit.api.jsr283.Session#ACTION_REMOVE} instead.
-    public static final String REMOVE_ACTION = "remove";
+    public static final String REMOVE_ACTION = org.apache.jackrabbit.api.jsr283.Session.ACTION_REMOVE;
-     * TODO deprecate as soon as present with Session interface (JSR 283)
+     * @deprecated Use {@link org.apache.jackrabbit.api.jsr283.Session#ACTION_ADD_NODE} instead.
-    public static final String ADD_NODE_ACTION = "add_node";
+    public static final String ADD_NODE_ACTION = org.apache.jackrabbit.api.jsr283.Session.ACTION_ADD_NODE;
-     * TODO deprecate as soon as present with Session interface (JSR 283)
+     * @deprecated Use {@link org.apache.jackrabbit.api.jsr283.Session#ACTION_SET_PROPERTY} instead.
-    public static final String SET_PROPERTY_ACTION = "set_property";
+    public static final String SET_PROPERTY_ACTION = org.apache.jackrabbit.api.jsr283.Session.ACTION_SET_PROPERTY;
-     * Returns the node specified by the given identifier. Applies to both
-     * referenceable and non-referenceable nodes.
-     * <p/>
-     * An <code>ItemNotFoundException</code> is thrown if no node with the
-     * specified identifier exists. This exception is also thrown if this
-     * <code>Session<code> does not have read access to the node with the
-     * specified identifier.
-     * <p/>
-     * A <code>RepositoryException</code> is thrown if another error occurs.
-     *
-     * @param id An identifier.
-     * @return A <code>Node</code>.
-     * @throws ItemNotFoundException if the specified identifier is not found.
-     * @throws RepositoryException if another error occurs.
+     * @see org.apache.jackrabbit.api.jsr283.Session#getNodeByIdentifier(String) 
-     * Returns the node at the specified absolute path in the workspace.
-     * If no node exists, then a <code>PathNotFoundException</code> is thrown.
-     *
-     * @param absPath An absolute path.
-     * @return the specified <code>Node</code>.
-     * @throws PathNotFoundException If no node exists.
-     * @throws RepositoryException If another error occurs.
+     * @see org.apache.jackrabbit.api.jsr283.Session#getNode(String)
-     * Returns the property at the specified absolute path in the workspace.
-     * If no property exists, then a <code>PathNotFoundException</code> is thrown.
-     *
-     * @param absPath An absolute path.
-     * @return the specified <code>Property</code>.
-     * @throws PathNotFoundException If no property exists.
-     * @throws RepositoryException if another error occurs.
+     * @see org.apache.jackrabbit.api.jsr283.Session#getProperty(String)
-     * Returns <code>true</code> if a node exists at <code>absPath</code>
-     * and this <code>Session</code> has read access to it; otherwise returns
-     * <code>false</code>.
-     * <p/>
-     * Throws a <code>RepositoryException</code> if <code>absPath</code>
-     * is not a well-formed absolute path.
-     *
-     * @param absPath An absolute path.
-     * @return a <code>boolean</code>
-     * @throws RepositoryException if <code>absPath</code> is not a well-formed
-     *         absolute path.
+     * @see org.apache.jackrabbit.api.jsr283.Session#nodeExists(String)
-     * Returns <code>true</code> if a property exists at <code>absPath</code>
-     * and this <code>Session</code> has read access to it; otherwise returns
-     * <code>false</code>.
-     * <p/>
-     * Throws a <code>RepositoryException</code> if <code>absPath</code>
-     * is not a well-formed absolute path.
-     *
-     * @param absPath An absolute path.
-     * @return a <code>boolean</code>
-     * @throws RepositoryException if <code>absPath</code> is not a well-formed
-     *         absolute path.
+     * @see org.apache.jackrabbit.api.jsr283.Session#propertyExists(String)
-     * @see Session#hasPermission(String, String)
+     * @see org.apache.jackrabbit.api.jsr283.Session#removeItem(String)
+     * @since JCR 2.0
+     */
+    public void removeItem(String absPath) throws VersionException,
+            LockException, ConstraintViolationException, RepositoryException {
+        // check sanity of this session
+        sanityCheck();
+        Item item;
+        try {
+            Path p = getQPath(absPath).getNormalizedPath();
+            if (!p.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + absPath);
+            }
+            item = getItemManager().getItem(p);
+        } catch (AccessDeniedException e) {
+            throw new PathNotFoundException(absPath);
+        } catch (NameException e) {
+            String msg = "invalid path:" + absPath;
+            log.debug(msg);
+            throw new RepositoryException(msg, e);
+        }
+        item.remove();
+    }
+
+    /**
+     * @see org.apache.jackrabbit.api.jsr283.Session#hasPermission(String, String)
-        if (s.remove(SessionImpl.READ_ACTION)) {
+        if (s.remove(ACTION_READ)) {
-        if (s.remove(SessionImpl.ADD_NODE_ACTION)) {
+        if (s.remove(ACTION_ADD_NODE)) {
-        if (s.remove(SessionImpl.SET_PROPERTY_ACTION)) {
+        if (s.remove(ACTION_SET_PROPERTY)) {
-        if (s.remove(SessionImpl.REMOVE_ACTION)) {
+        if (s.remove(ACTION_REMOVE)) {
-     * @see Session#getAccessControlManager()
+     * @see org.apache.jackrabbit.api.jsr283.Session#checkCapability(String, Object, Map)
+     * @since JCR 2.0
+     */
+    public boolean checkCapability(String methodType, Object target, Map arguments)
+            throws RepositoryException {
+        //TODO
+        throw new UnsupportedRepositoryOperationException("Not yet implemented");
+    }
+
+    /**
+     * @see org.apache.jackrabbit.api.jsr283.Session#getAccessControlManager()
-     * @see Session#getRetentionManager()
+     * @see org.apache.jackrabbit.api.jsr283.Session#getRetentionManager()

INS43 INS31 INS31 INS40 MOV43 MOV43 MOV43 MOV43 MOV29 INS83 INS39 INS42 INS44 INS43 INS43 INS43 INS43 INS8 INS29 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 UPD65 INS40 UPD65 INS40 UPD65 INS40 UPD65 INS40 UPD65 UPD65 UPD65 UPD65 UPD65 INS65 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS54 INS21 INS65 MOV65 INS65 MOV65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS53 INS65 INS66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS68 UPD66 INS68 INS68 INS68 INS68 INS66 INS42 INS32 INS43 INS59 INS8 INS12 INS12 INS32 INS68 INS68 INS42 INS42 INS42 INS14 INS66 INS67 INS67 INS67 INS67 INS40 INS42 INS69 INS40 INS42 INS69 INS40 INS42 INS69 INS40 INS42 INS69 INS40 INS42 INS69 INS40 UPD42 INS42 INS42 INS42 INS60 INS25 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS40 INS42 INS69 MOV69 INS42 INS42 INS42 INS42 INS40 INS42 INS69 INS69 INS69 INS43 INS45 INS40 INS40 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS59 INS38 INS8 INS7 INS43 INS42 INS53 INS43 INS42 INS60 INS21 INS53 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS53 INS42 INS32 INS42 INS14 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 DEL45 DEL45 DEL45 DEL45 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL42 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42