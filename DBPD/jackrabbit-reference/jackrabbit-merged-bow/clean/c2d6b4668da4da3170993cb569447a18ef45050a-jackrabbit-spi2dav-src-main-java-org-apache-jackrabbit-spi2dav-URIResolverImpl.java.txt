JCR-2540: spi2dav : move/reorder not properly handled by observation 

Add fallback when nodeId can't be computed due to removed node, avoid PROPFINDs on nodes that we know are gone


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1205029 13f79535-47bb-0310-9956-ffa450edef68

-    //-------------------------------------------------------< URI resolver >---
-    /**
-     * @inheritDoc
-     */
-    public Path getQPath(String uri, SessionInfo sessionInfo) throws RepositoryException {
-        String rootUri = getRootItemUri(sessionInfo.getWorkspaceName());
-        String jcrPath;
-        if (uri.startsWith(rootUri)) {
-            jcrPath = uri.substring(rootUri.length());
-        } else {
-            // todo: probably rather an error?
-            jcrPath = uri;
-        }
-        try {
-            return service.getNamePathResolver(sessionInfo).getQPath(Text.unescape(jcrPath));
-        } catch (NameException e) {
-            throw new RepositoryException(e);
-        }
-    }
-    /**
-     * @inheritDoc
-     */
-    public NodeId getNodeId(String uri, SessionInfo sessionInfo) throws RepositoryException {
+    private NodeId getNodeId(String uri, SessionInfo sessionInfo, boolean nodeIsGone) throws RepositoryException {
+        if (nodeIsGone) {
+            throw new RepositoryException("Can't reconstruct nodeId from URI when the remote node is gone.");
+        }
+        
-            parentId = getNodeId(parentUri, sessionInfo);
+            parentId = getNodeId(parentUri, sessionInfo, false);
+    //-------------------------------------------------------< URI resolver >---
+    /**
+     * @inheritDoc
+     */
+    public Path getQPath(String uri, SessionInfo sessionInfo) throws RepositoryException {
+        String rootUri = getRootItemUri(sessionInfo.getWorkspaceName());
+        String jcrPath;
+        if (uri.startsWith(rootUri)) {
+            jcrPath = uri.substring(rootUri.length());
+        } else {
+            // todo: probably rather an error?
+            jcrPath = uri;
+        }
+        try {
+            return service.getNamePathResolver(sessionInfo).getQPath(Text.unescape(jcrPath));
+        } catch (NameException e) {
+            throw new RepositoryException(e);
+        }
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public NodeId getNodeId(String uri, SessionInfo sessionInfo) throws RepositoryException {
+        return getNodeId(uri, sessionInfo, false);
+    }
+    
+    /**
+     * @inheritDoc
+     */
+    public NodeId getNodeIdAfterEvent(String uri, SessionInfo sessionInfo, boolean nodeIsGone) throws RepositoryException {
+        return getNodeId(uri, sessionInfo, nodeIsGone);
+    }
+    
-        NodeId parentId = getNodeId(parentUri, sessionInfo);
+        NodeId parentId = getNodeId(parentUri, sessionInfo, false);

MOV31 INS31 INS31 UPD83 INS44 MOV29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS39 INS42 INS25 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS41 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS53 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS14 INS9 INS43 INS45 INS42 INS9