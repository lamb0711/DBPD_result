JCR-1609:  new Property Types (WIP...)
JCR-2061: References and Dereferencing of Property Values (WIP...)



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@776687 13f79535-47bb-0310-9956-ffa450edef68

+import java.math.BigDecimal;
+import java.net.URI;
+    /**
+     * Create a new <code>AbstractQValue</code>.
+     *
+     * @param value
+     * @throws IllegalArgumentException if the passed <code>value</code>
+     * is <code>null</code>.
+     */
+    protected AbstractQValue(BigDecimal value) {
+        this(value, PropertyType.DECIMAL);
+    }
+
+    /**
+     * Create a new <code>AbstractQValue</code>.
+     *
+     * @param value
+     * @throws IllegalArgumentException if the passed <code>value</code>
+     * is <code>null</code>.
+     */
+    protected AbstractQValue(URI value) {
+        this(value, PropertyType.URI);
+    }
+
+        } else if (type == PropertyType.DECIMAL) {
+            Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
+            cal.setTimeInMillis(((BigDecimal) val).longValue());
+            return cal;
+     * @see QValue#getDecimal()
+     */
+    public BigDecimal getDecimal() throws RepositoryException {
+        if (type == PropertyType.DECIMAL) {
+            return (BigDecimal) val;
+        } else {
+            try {
+                return new BigDecimal(getString());
+            } catch (NumberFormatException e) {
+                throw new ValueFormatException("not a valid decimal string: " + getString(), e);
+            }
+        }
+    }
+
+    /**
+     * @see QValue#getURI()
+     */
+    public URI getURI() throws RepositoryException {
+        if (type == PropertyType.URI) {
+            return (URI) val;
+        } else {
+            try {
+                return URI.create(getString());
+            } catch (IllegalArgumentException e) {
+                throw new ValueFormatException("not a valid uri: " + getString(), e);
+            }
+        }
+    }
+
+    /**
+        } else if (type == PropertyType.DECIMAL) {
+            return ((BigDecimal) val).doubleValue();
+        } else if (type == PropertyType.DECIMAL) {
+            return ((BigDecimal) val).longValue();

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS44 INS8 INS29 INS83 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS65 INS65 INS65 INS43 INS42 INS17 INS65 INS65 INS65 INS43 INS42 INS17 INS65 INS42 INS42 INS25 INS65 INS42 INS42 INS25 INS66 INS42 INS42 INS66 INS66 INS42 INS42 INS40 INS66 INS42 INS42 INS66 INS66 INS42 INS42 INS40 INS68 INS27 INS8 INS8 INS68 INS27 INS8 INS8 INS42 INS42 INS42 INS40 INS41 INS54 INS42 INS42 INS42 INS40 INS41 INS54 INS25 INS25 INS25 INS11 INS8 INS12 INS11 INS8 INS12 INS27 INS8 MOV8 INS27 INS8 MOV25 INS27 INS8 MOV8 INS43 INS42 INS41 INS44 INS8 INS43 INS42 INS41 INS44 INS8 INS42 INS40 INS41 INS42 INS40 INS41 INS42 INS40 INS60 INS21 INS41 INS42 INS14 INS43 INS42 INS53 INS42 INS32 INS43 INS42 INS53 INS32 INS32 INS43 INS59 INS32 INS42 INS43 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS36 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS11 INS11 INS42 INS42 INS32 INS36 INS42 INS42 INS45 INS32 INS42 INS45 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS45 INS11 INS42 INS42 INS42 INS42 INS43 INS42 INS42