JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Element;
-import org.jdom.Namespace;
+import org.apache.jackrabbit.webdav.xml.Namespace;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
-import java.util.List;
-import java.util.ArrayList;
+import java.util.Set;
+import java.util.HashSet;
-    private List queryLanguages = new ArrayList();
+    private final Set queryGrammers = new HashSet();
-       this(null);
-    }
-
-    /**
-     * Create a new <code>QueryGrammerSet</code> from the given query languages
-     * string array. The default {@link SearchConstants#NAMESPACE} is assumed.
-     * @param qLanguages
-     */
-    public QueryGrammerSet(String[] qLanguages) {
-        if (qLanguages != null) {
-            for (int i = 0; i < qLanguages.length; i++) {
-                queryLanguages.add(new Element(qLanguages[i], SearchConstants.NAMESPACE));
-            }
-        }
-     * Add another query language to this set.
+     * Add another query queryGrammer to this set.
-     * @param qLanguage
+     * @param grammerName
-    public void addQueryLanguage(String qLanguage, Namespace namespace) {
-        if (namespace == null) {
-            namespace = SearchConstants.NAMESPACE;
-        }
-        queryLanguages.add(new Element(qLanguage, namespace));
+    public void addQueryLanguage(String grammerName, Namespace namespace) {
+        queryGrammers.add(new Grammer(grammerName, namespace));
-        int size = queryLanguages.size();
+        int size = queryGrammers.size();
-            Element[] elements = (Element[]) queryLanguages.toArray(new Element[size]);
-            for (int i = 0; i < elements.length; i++) {
-                qLangStr[i] = elements[i].getNamespaceURI() + elements[i].getName();
+            Grammer[] grammers = (Grammer[]) queryGrammers.toArray(new Grammer[size]);
+            for (int i = 0; i < grammers.length; i++) {
+                qLangStr[i] = grammers[i].namespace.getURI() + grammers[i].localName;
-     * @see org.apache.jackrabbit.webdav.property.DavProperty#toXml()
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     * @param document
-    public Element toXml() {
-        Element elem = getName().toXml();
-        Iterator qlIter = queryLanguages.iterator();
+    public Element toXml(Document document) {
+        Element elem = getName().toXml(document);
+        Iterator qlIter = queryGrammers.iterator();
-            Element grammer = new Element(XML_GRAMMER, SearchConstants.NAMESPACE).addContent((Element)qlIter.next());
-            Element sqg = new Element(XML_QUERY_GRAMMAR, SearchConstants.NAMESPACE).addContent(grammer);
-            elem.addContent(sqg);
+            Element sqg = DomUtil.addChildElement(elem, XML_QUERY_GRAMMAR, SearchConstants.NAMESPACE);
+            Element grammer = DomUtil.addChildElement(sqg, XML_GRAMMER, SearchConstants.NAMESPACE);
+            Grammer qGrammer = (Grammer)qlIter.next();
+            DomUtil.addChildElement(grammer, qGrammer.localName, qGrammer.namespace);
-     * Returns the list of supported query languages.
+     * Returns the set of supported query grammers.
-        return queryLanguages;
+        return queryGrammers;
+    }
+
+
+    private class Grammer {
+
+        private final String localName;
+        private final Namespace namespace;
+        private final int hashCode;
+
+        Grammer(String localName, Namespace namespace) {
+            this.localName = localName;
+            this.namespace = namespace;
+            hashCode = DomUtil.getQualifiedName(localName, namespace).hashCode();
+        }
+
+        public int hashCode() {
+            return hashCode;
+        }
+
+        public boolean equals(Object obj) {
+            if (obj == this) {
+                return true;
+            }
+            if (obj instanceof Grammer) {
+                return obj.hashCode() == hashCode();
+            }
+            return false;
+        }

MOV26 INS26 INS26 INS40 INS40 UPD40 UPD40 UPD40 UPD40 INS31 INS55 INS83 UPD43 MOV29 MOV83 INS39 INS42 MOV44 MOV44 INS8 INS44 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 UPD42 UPD42 MOV46 MOV65 UPD42 INS21 INS65 INS43 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 MOV83 UPD39 MOV39 UPD42 MOV42 INS44 MOV8 UPD43 UPD66 UPD42 INS32 INS42 INS42 MOV60 UPD66 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS43 INS42 INS43 INS42 INS21 INS21 MOV21 INS41 INS43 INS42 INS25 INS41 UPD42 INS42 INS42 INS14 UPD40 INS69 INS60 INS21 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS62 INS8 INS9 INS43 INS42 INS42 UPD42 UPD5 INS43 INS42 UPD42 MOV43 MOV43 INS59 INS43 INS32 INS22 INS42 INS22 INS42 INS42 INS32 UPD42 INS52 INS41 INS42 INS43 INS41 INS42 UPD43 UPD42 UPD40 INS42 INS42 INS32 INS42 UPD42 MOV11 INS42 INS42 INS42 INS40 INS40 INS52 INS42 INS52 INS42 INS32 INS42 INS9 INS42 INS27 UPD42 UPD5 INS42 INS42 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS40 UPD43 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 UPD43 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD5 INS22 UPD43 INS22 UPD42 INS2 INS42 UPD42 INS2 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 DEL33 DEL17 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL33 DEL27 DEL39 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL29 DEL31 DEL2 DEL2 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL14 DEL42 DEL42 DEL42 DEL40 DEL14 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL2 DEL40 DEL14 DEL32 DEL33 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL21