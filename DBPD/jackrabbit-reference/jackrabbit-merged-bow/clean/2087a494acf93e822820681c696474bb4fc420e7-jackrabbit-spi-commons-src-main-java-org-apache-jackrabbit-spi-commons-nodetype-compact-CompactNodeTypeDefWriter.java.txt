JCR-2064 Add new JSR283 features to CND reader/writer
JCR-2153 Introduce QValueConstraint and change return type of QPropertyDefinition.getValueConstraints()
JCR-2158 Consolidate CND related classes from SPI and Core


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785777 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
-import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.Set;
-import javax.jcr.ValueFactory;
+import javax.jcr.query.qom.QueryObjectModelConstants;
+import org.apache.jackrabbit.spi.QValueConstraint;
-import org.apache.jackrabbit.spi.commons.value.QValueFactoryImpl;
+import org.apache.jackrabbit.spi.commons.nodetype.InvalidConstraintException;
+import org.apache.jackrabbit.spi.commons.nodetype.constraint.ValueConstraint;
+import org.apache.jackrabbit.spi.commons.query.qom.Operator;
-    private final HashSet usedNamespaces = new HashSet();
+    private final Set<String> usedNamespaces = new HashSet<String>();
-     * Creates a new nodetype writer
+     * Creates a new nodetype writer that does not include namepsaces.
-     * @param out the underlying writer
-     * @param r the namespace resolver
-     * @param npResolver
-     * @param valueFactory
+     * @param out the underlaying writer
+     * @param r the naespace resolver
+     * @param npResolver name-path resolver
-    public CompactNodeTypeDefWriter(Writer out, NamespaceResolver r, NamePathResolver npResolver,
-            ValueFactory valueFactory) {
-        this(out, r, npResolver, valueFactory, false);
+    public CompactNodeTypeDefWriter(Writer out,
+                                    NamespaceResolver r,
+                                    NamePathResolver npResolver) {
+        this(out, r, npResolver, false);
-     * @param npResolver
-     * @param valueFactory
+     * @param npResolver name-path resolver
-    public CompactNodeTypeDefWriter(Writer out, NamespaceResolver r, NamePathResolver npResolver,
-            ValueFactory valueFactory, boolean includeNS) {
+    public CompactNodeTypeDefWriter(Writer out,
+                                    NamespaceResolver r,
+                                    NamePathResolver npResolver,
+                                    boolean includeNS) {
-     * @param l
-     * @param r
-     * @param npResolver
-     * @param valueFactory
-     * @param out
-     * @throws IOException
+     * @param defs collection of definitions
+     * @param r namespace resolver
+     * @param npResolver name-path resolver
+     * @param out output writer
+     * @throws IOException if an I/O error occurs
-    public static void write(List l, NamespaceResolver r, NamePathResolver npResolver,
-            ValueFactory valueFactory, Writer out)
+    public static void write(Collection<QNodeTypeDefinition> defs,
+                             NamespaceResolver r,
+                             NamePathResolver npResolver,
+                             Writer out)
-        CompactNodeTypeDefWriter w = new CompactNodeTypeDefWriter(out, r, npResolver, valueFactory, true);
-        Iterator iter = l.iterator();
-        while (iter.hasNext()) {
-            QNodeTypeDefinition def = (QNodeTypeDefinition) iter.next();
+        CompactNodeTypeDefWriter w = new CompactNodeTypeDefWriter(out, r, npResolver, true);
+        for (QNodeTypeDefinition def : defs) {
-     * @param ntd
-     * @throws IOException
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
+     * Write one QNodeTypeDefinition to this writer
+     *
+     * @param defs node type definitions
+     * @throws IOException if an I/O error occurs
+     */
+    public void write(Collection<QNodeTypeDefinition> defs) throws IOException {
+        for (QNodeTypeDefinition def : defs) {
+            write(def);
+        }
+    }
+
+    /**
-     * @throws IOException
+     * @throws IOException if an I/O error occurs
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
-        Name[] sta = ntd.getSupertypes();
-        for (int i = 0; i < sta.length; i++) {
+        for (Name name : ntd.getSupertypes()) {
-            out.write(resolve(sta[i]));
+            out.write(resolve(name));
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
+        List<String> options = new LinkedList<String>();
+        if (ntd.isAbstract()) {
+            options.add(Lexer.ABSTRACT[0]);
+        }
-            out.write("\n" + INDENT);
-            out.write("orderable");
-            if (ntd.isMixin()) {
-                out.write(" mixin");
+            options.add(Lexer.ORDERABLE[0]);
+        }
+        if (ntd.isMixin()) {
+            options.add(Lexer.MIXIN[0]);
+        }
+        if (!ntd.isQueryable()) {
+            options.add(Lexer.NOQUERY[0]);
+        }
+        if (ntd.getPrimaryItemName() != null) {
+            options.add(Lexer.PRIMARYITEM[0]);
+            options.add(resolve(ntd.getPrimaryItemName()));
+        }
+        for (int i = 0; i < options.size(); i++) {
+            if (i == 0) {
+                out.write("\n" + INDENT);
+            } else {
+                out.write(" ");
-        } else if (ntd.isMixin()) {
-            out.write("\n" + INDENT);
-            out.write("mixin");
+            out.write(options.get(i));
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
-        QPropertyDefinition[] pda = ntd.getPropertyDefs();
-        for (int i = 0; i < pda.length; i++) {
-            QPropertyDefinition pd = pda[i];
-            writePropDef(ntd, pd);
+        for (QPropertyDefinition pd : ntd.getPropertyDefs()) {
+            writePropDef(pd);
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
-        QNodeDefinition[] nda = ntd.getChildNodeDefs();
-        for (int i = 0; i < nda.length; i++) {
-            QNodeDefinition nd = nda[i];
-            writeNodeDef(ntd, nd);
+        for (QNodeDefinition nd : ntd.getChildNodeDefs()) {
+            writeNodeDef(nd);
-     * @param pd
+     * @param pd property definition
+     * @throws IOException if an I/O error occurs
-    private void writePropDef(QNodeTypeDefinition ntd, QPropertyDefinition pd) throws IOException {
+    private void writePropDef(QPropertyDefinition pd) throws IOException {
-        out.write(ntd.getPrimaryItemName() != null && ntd.getPrimaryItemName().equals(pd.getName()) ? " primary" : "");
+        if (!pd.isFullTextSearchable()) {
+            out.write(" nofulltext");
+        }
+        if (!pd.isQueryOrderable()) {
+            out.write(" noqueryorder");
+        }
+        String[] qops = pd.getAvailableQueryOperators();
+        if (qops != null && qops.length > 0) {
+            List<String> opts = new ArrayList<String>(Arrays.asList(qops));
+            List<String> defaultOps = Arrays.asList(Operator.getAllQueryOperators());
+            if (!opts.containsAll(defaultOps)) {
+                out.write(" queryops '");
+                String delim = "";
+                for (String opt: opts) {
+                    out.write(delim);
+                    delim= ", ";
+                    if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_EQUAL_TO)) {
+                        out.write(Lexer.QUEROPS_EQUAL);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_NOT_EQUAL_TO)) {
+                        out.write(Lexer.QUEROPS_NOTEQUAL);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN)) {
+                        out.write(Lexer.QUEROPS_GREATERTHAN);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO)) {
+                        out.write(Lexer.QUEROPS_GREATERTHANOREQUAL);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN)) {
+                        out.write(Lexer.QUEROPS_LESSTHAN);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO)) {
+                        out.write(Lexer.QUEROPS_LESSTHANOREQUAL);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_LIKE)) {
+                        out.write(Lexer.QUEROPS_LIKE);
+                    }
+                }
+                out.write("'");
+            }
+        }
-     * @param dva
+     * @param dva default value
+     * @throws IOException if an I/O error occurs
-            for (int i = 0; i < dva.length; i++) {
+            for (QValue value : dva) {
-                    String str = ValueFormat.getJCRString(dva[i], npResolver);
+                    String str = ValueFormat.getJCRString(value, npResolver);
-                    out.write(escape(dva[i].toString()));
+                    out.write(escape(value.toString()));
-     * @param vca
+     * @param vca value constraint
+     * @param type value type
+     * @throws IOException if an I/O error occurs
-    private void writeValueConstraints(String[] vca, int type) throws IOException {
+    private void writeValueConstraints(QValueConstraint[] vca, int type) throws IOException {
-    private String convertConstraint(String vc, int type) {
-        if (type == PropertyType.REFERENCE
-                || type == PropertyType.WEAKREFERENCE
-                || type == PropertyType.NAME
-                || type == PropertyType.PATH) {
-            if (type == PropertyType.REFERENCE
-                    || type == PropertyType.WEAKREFERENCE) {
-                type = PropertyType.NAME;
-            }
-
-            try {
-                QValue qv = QValueFactoryImpl.getInstance().create(vc, type);
-                vc = ValueFormat.getJCRString(qv, npResolver);
-            }
-            catch (RepositoryException e) {
-                // ignore -> return unconverted constraint
-            }
+    /**
+     * Converts the constraint to a jcr value
+     * @param vc value constraint string
+     * @param type value type
+     * @return converted value
+     */
+    private String convertConstraint(QValueConstraint vc, int type) {
+        try {
+            ValueConstraint c = ValueConstraint.create(type, vc.getString());
+            return c.getDefinition(npResolver);
+        } catch (InvalidConstraintException e) {
+            // ignore -> return unconverted constraint
+            return vc.getString();
-
-        return vc;
-     * @param nd
+     * @param nd node definition
+     * @throws IOException if an I/O error occurs
-    private void writeNodeDef(QNodeTypeDefinition ntd, QNodeDefinition nd) throws IOException {
+    private void writeNodeDef(QNodeDefinition nd) throws IOException {
-        out.write(ntd.getPrimaryItemName() != null && ntd.getPrimaryItemName().equals(nd.getName()) ? " primary" : "");
-     * @param name
-     * @throws IOException
+     * @param name name
+     * @throws IOException if an I/O error occurs
-     * @param reqTypes
+     * @param reqTypes required type names
+     * @throws IOException if an I/O error occurs
-            for (int i = 0; i < reqTypes.length; i++) {
+            for (Name reqType : reqTypes) {
-                out.write(resolve(reqTypes[i]));
+                out.write(resolve(reqType));
-     * @param defType
+     * @param defType default type name
+     * @throws IOException if an I/O error occurs
-     * @param name
+     * @param name name to resolve
+     * @throws IOException if an I/O error occurs
-     * @param s
+     * @param s string

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS31 INS31 INS74 MOV29 MOV83 MOV83 MOV39 MOV42 INS44 MOV44 MOV44 MOV44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS8 INS29 INS8 INS43 INS43 INS74 UPD42 MOV42 MOV60 INS70 MOV21 INS65 INS65 INS65 INS74 INS42 INS42 INS70 INS65 INS65 INS65 INS65 INS70 INS65 INS65 INS60 INS25 INS25 INS25 INS25 INS25 INS24 INS65 INS65 INS70 INS65 INS65 INS70 INS65 INS25 INS25 INS60 INS25 INS65 INS65 INS65 UPD5 INS65 INS65 INS65 INS65 UPD43 MOV54 INS65 INS65 INS65 INS65 UPD42 MOV42 INS42 INS74 UPD66 UPD66 UPD66 INS66 INS66 UPD42 INS66 INS66 INS66 INS66 INS66 INS43 INS43 MOV43 INS44 INS42 MOV8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS44 INS42 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS44 MOV32 MOV8 INS42 INS66 INS42 INS66 INS74 INS59 INS32 INS8 MOV32 INS8 MOV32 INS8 INS38 INS8 MOV27 INS8 MOV58 INS27 MOV37 INS8 INS42 INS66 INS42 INS66 INS44 MOV32 INS8 INS42 INS66 INS42 INS66 INS44 MOV32 INS8 INS66 INS42 INS66 INS38 INS8 INS38 INS8 INS5 INS59 INS27 INS8 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 UPD43 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 MOV43 INS43 INS42 UPD42 MOV42 MOV43 INS42 UPD42 MOV42 INS42 MOV43 INS42 INS21 INS43 INS42 MOV43 INS43 INS42 INS14 INS42 INS42 MOV21 MOV21 INS21 INS32 INS21 INS21 INS21 INS42 INS32 MOV25 MOV21 INS43 INS42 MOV21 INS43 INS42 MOV21 INS32 INS21 INS32 INS21 INS43 INS85 INS42 INS32 INS27 INS27 INS60 INS60 INS25 INS70 UPD42 INS41 INS70 INS42 MOV43 INS32 INS42 INS42 INS74 INS32 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS42 INS42 INS27 INS8 MOV42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS74 INS59 INS74 INS59 INS38 INS8 INS44 INS42 INS8 UPD43 INS32 UPD43 INS41 INS44 INS42 MOV8 UPD42 MOV42 UPD42 MOV42 INS43 INS43 UPD42 UPD42 INS2 UPD42 UPD42 INS2 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 MOV32 INS42 INS34 INS21 INS32 MOV42 MOV42 INS45 INS42 INS42 INS45 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS32 INS21 INS60 INS70 INS21 INS43 INS42 MOV21 MOV54 MOV21 MOV21 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 INS32 MOV43 INS42 INS42 INS42 INS42 INS40 INS34 INS40 INS34 INS40 INS34 INS40 INS34 INS40 INS34 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS44 INS42 INS8 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 INS42 INS42 INS42 INS45 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS42 INS21 INS21 INS25 INS42 INS42 INS45 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS7 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS32 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS21 INS32 INS8 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS32 INS42 INS42 INS40 DEL43 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL65 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL44 DEL43 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL61 DEL8 DEL31 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL45 DEL42 DEL27 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL45 DEL32 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL8 DEL24 DEL42 DEL43 DEL42 DEL44 DEL27 DEL45 DEL45 DEL16 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL45 DEL45 DEL16 DEL32 DEL21 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24