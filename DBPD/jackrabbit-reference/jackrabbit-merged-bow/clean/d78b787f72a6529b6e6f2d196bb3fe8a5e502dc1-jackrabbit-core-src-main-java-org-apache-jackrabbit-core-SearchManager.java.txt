JCR-1104: JSR 283 support
- JQOM work in progress

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@572945 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.PreparedQueryImpl;
+import org.apache.jackrabbit.core.query.qom.QueryObjectModelTree;
+import org.apache.jackrabbit.core.query.qom.QueryObjectModelImpl;
+import org.apache.jackrabbit.core.query.jsr283.PreparedQuery;
+import org.apache.jackrabbit.core.query.jsr283.qom.QueryObjectModel;
+     * Name of the parameter that indicates the prepared query implementation
+     * class.
+     */
+    private static final String PARAM_PREPARED_QUERY_IMPL = "preparedQueryClass";
+
+    /**
+     * Name of the default prepared query implementation class.
+     */
+    private static final String DEFAULT_PREPARED_QUERY_IMPL_CLASS = PreparedQueryImpl.class.getName();
+
+    /**
+     * Fully qualified name of the prepared query implementation class.
+     * This class must extend {@link org.apache.jackrabbit.core.query.AbstractQueryImpl}
+     * and implement {@link PreparedQuery}!
+     */
+    private final String preparedQueryImplClassName;
+
+    /**
+        preparedQueryImplClassName = params.getProperty(PARAM_PREPARED_QUERY_IMPL, DEFAULT_PREPARED_QUERY_IMPL_CLASS);
+     * Creates a prepared query object that can be executed on the workspace.
+     *
+     * @param session   the session of the user executing the query.
+     * @param itemMgr   the item manager of the user executing the query. Needed
+     *                  to return <code>Node</code> instances in the result set.
+     * @param statement the actual query statement.
+     * @param language  the syntax of the query statement.
+     * @return a <code>Query</code> instance to execute.
+     * @throws InvalidQueryException if the query is malformed or the
+     *                               <code>language</code> is unknown.
+     * @throws RepositoryException   if any other error occurs.
+     */
+    public PreparedQuery createPreparedQuery(SessionImpl session,
+                                             ItemManager itemMgr,
+                                             String statement,
+                                             String language)
+            throws InvalidQueryException, RepositoryException {
+        AbstractQueryImpl query = createPreparedQueryInstance();
+        query.init(session, itemMgr, handler, statement, language);
+        return (PreparedQuery) query;
+    }
+
+    /**
+     * Creates a query object model that can be executed on the workspace.
+     *
+     * @param session   the session of the user executing the query.
+     * @param qomTree   the query object model tree, representing the query.
+     * @param langugage the original language of the query statement.
+     * @return the query object model for the query.
+     * @throws InvalidQueryException the the query object model tree is
+     *                               considered invalid by the query handler
+     *                               implementation.
+     * @throws RepositoryException   if any other error occurs.
+     */
+    public QueryObjectModel createQueryObjectModel(SessionImpl session,
+                                                   QueryObjectModelTree qomTree,
+                                                   String langugage)
+            throws InvalidQueryException, RepositoryException {
+        QueryObjectModelImpl qom = new QueryObjectModelImpl();
+        qom.init(session, session.getItemManager(), handler, qomTree, langugage);
+        return qom;
+    }
+
+    /**
+    /**
+     * Creates a new instance of an {@link AbstractQueryImpl}, which also
+     * implements {@link PreparedQuery} and is not initialized.
+     *
+     * @return an new query instance.
+     * @throws RepositoryException if an error occurs while creating a new query
+     *                             instance.
+     */
+    protected AbstractQueryImpl createPreparedQueryInstance()
+            throws RepositoryException {
+        try {
+            Object obj = Class.forName(preparedQueryImplClassName).newInstance();
+            if (!(obj instanceof AbstractQueryImpl)) {
+                throw new IllegalArgumentException(preparedQueryImplClassName
+                        + " is not of type " + AbstractQueryImpl.class.getName());
+            } else if (!(obj instanceof PreparedQuery)) {
+                throw new IllegalArgumentException(preparedQueryImplClassName
+                        + " is not of type " + PreparedQuery.class.getName());
+            } else {
+                return (AbstractQueryImpl) obj;
+            }
+        } catch (Throwable t) {
+            throw new RepositoryException("Unable to create prepared query: "
+                    + t.toString(), t);
+        }
+    }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS32 INS65 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS41 INS65 INS65 INS65 INS42 INS42 INS54 INS66 INS66 INS66 INS57 INS42 INS66 INS66 INS65 INS66 INS65 INS66 INS7 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS11 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS8 INS12 INS43 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS59 INS38 INS8 INS25 INS43 INS42 INS53 INS42 INS42 INS42 INS32 INS36 INS53 INS38 INS8 INS8 INS42 INS14 INS32 INS42 INS62 INS14 INS36 INS53 INS41 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS27 INS62 INS14 INS11 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS43 INS43 INS27 INS43 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS43 INS57 INS42 INS42 INS43 INS42