JCR-1483: Move common node type functionality to jackrabbit-spi-commons
- replaced NodeTypeDef (jackrabbit-core) with QNodeTypeDefinition
- QNodeTypeDefinitionImpl is not immutable, hence no cloning needed anymore
- introduced QNodeTypeDefinitionBuilder
- moved constructors of Q*DefinitionImpl classes in spi2jcr to spi-commons
- fixed a bug in RepositoryServiceImpl in spi2jcr

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816551 13f79535-47bb-0310-9956-ffa450edef68

-public class QNodeTypeDefinitionImpl implements QNodeTypeDefinition, Serializable, Cloneable {
+public class QNodeTypeDefinitionImpl implements QNodeTypeDefinition, Serializable {
-    private Name name;
+    private final Name name;
-    private Name[] supertypes;
+    private final Name[] supertypes;
-    private boolean isMixin;
+    private final boolean isMixin;
-    private boolean isAbstract;
+    private final boolean isAbstract;
-    private boolean isQueryable;
+    private final boolean isQueryable;
-    private boolean hasOrderableChildNodes;
+    private final boolean hasOrderableChildNodes;
-    private Name primaryItemName;
+    private final Name primaryItemName;
+
+     * Calculated on demand.
+     *
-    private transient Collection<Name> dependencies;
+    private transient volatile Collection<Name> dependencies;
-        setSupertypes(supertypes); // make sure supertypes are sorted
+        // make sure supertypes are sorted
+        SortedSet<Name> types = new TreeSet<Name>();
+        types.addAll(Arrays.asList(supertypes));
+        this.supertypes = types.toArray(new Name[types.size()]);
-    /**
-     * Sets the name of the node type being defined.
-     *
-     * @param name The name of the node type.
-     */
-    public void setName(Name name) {
-        this.name = name;
-    }
-
-    /**
-     * Sets the supertypes.
-     *
-     * @param names the names of the supertypes.
-     */
-    public void setSupertypes(Name[] names) {
-        resetDependencies();
-        // Optimize common cases (zero or one supertypes)
-        if (names.length == 0) {
-            supertypes = Name.EMPTY_ARRAY;
-        } else if (names.length == 1) {
-            supertypes = new Name[] { names[0] };
-        } else {
-            // Sort and remove duplicates
-            SortedSet<Name> types = new TreeSet<Name>();
-            types.addAll(Arrays.asList(names));
-            supertypes = types.toArray(new Name[types.size()]);
-        }
-    }
-
-    /**
-     * Sets the mixin flag.
-     *
-     * @param mixin flag
-     */
-    public void setMixin(boolean mixin) {
-        this.isMixin = mixin;
-    }
-
-    /**
-     * Sets the orderableChildNodes flag.
-     *
-     * @param orderableChildNodes flag
-     */
-    public void setOrderableChildNodes(boolean orderableChildNodes) {
-        this.hasOrderableChildNodes = orderableChildNodes;
-    }
-
-    /**
-     * Sets the 'abstract' flag.
-     *
-     * @param abstractStatus flag
-     */
-    public void setAbstract(boolean abstractStatus) {
-        this.isAbstract = abstractStatus;
-    }
-
-    /**
-     * Sets the 'queryable' flag.
-     *
-     * @param queryable flag
-     */
-    public void setQueryable(boolean queryable) {
-        this.isQueryable = queryable;
-    }
-
-    /**
-     * Sets the name of the primary item (one of the child items of the node's
-     * of this node type)
-     *
-     * @param primaryItemName The name of the primary item.
-     */
-    public void setPrimaryItemName(Name primaryItemName) {
-        this.primaryItemName = primaryItemName;
-    }
-
-    /**
-     * Sets the property definitions.
-     *
-     * @param defs An array of <code>QPropertyDefinition</code> objects.
-     */
-    public void setPropertyDefs(QPropertyDefinition[] defs) {
-        resetDependencies();
-        propertyDefs.clear();
-        propertyDefs.addAll(Arrays.asList(defs));
-    }
-
-    /**
-     * Sets the child node definitions.
-     *
-     * @param defs An array of <code>QNodeDefinition</code> objects
-     */
-    public void setChildNodeDefs(QNodeDefinition[] defs) {
-        resetDependencies();
-        childNodeDefs.clear();
-        childNodeDefs.addAll(Arrays.asList(defs));
-    }
-
+    /**
+     * {@inheritDoc}
+     */
-    public QNodeTypeDefinitionImpl clone() {
-        try {
-            // todo: itemdefs should be cloned as well, since mutable
-            return (QNodeTypeDefinitionImpl) super.clone();
-        } catch (CloneNotSupportedException e) {
-            // does not happen, this class is cloneable
-            throw new InternalError();
-        }
-    }
-
-    private void resetDependencies() {
-        dependencies = null;
-    }
-

INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS29 MOV60 INS21 INS65 INS66 INS7 INS65 UPD42 INS42 INS32 INS22 MOV32 INS42 INS42 MOV42 INS52 INS42 DEL42 DEL43 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL32 DEL21 DEL40 DEL34 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL40 DEL34 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL34 DEL2 DEL4 DEL3 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL48 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL33 DEL7 DEL21 DEL8 DEL31