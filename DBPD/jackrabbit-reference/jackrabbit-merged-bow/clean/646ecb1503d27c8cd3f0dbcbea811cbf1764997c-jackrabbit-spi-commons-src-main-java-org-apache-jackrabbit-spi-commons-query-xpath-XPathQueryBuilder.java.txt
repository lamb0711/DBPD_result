JCR-952: Support lower and upper case functions in "order by" clause

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1051916 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.List;
-import java.util.Map;
-
-import javax.jcr.NamespaceException;
-import javax.jcr.RepositoryException;
-import javax.jcr.query.InvalidQueryException;
-
+import javax.jcr.NamespaceException;
+import javax.jcr.RepositoryException;
+import javax.jcr.query.InvalidQueryException;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Map;
+
-                    createOrderSpec(node, (OrderQueryNode) queryNode);
+                    setOrderSpecPath(node, (OrderQueryNode) queryNode);
+            case JJTORDERSPEC:
+                OrderQueryNode orderQueryNode = (OrderQueryNode) queryNode;
+                orderQueryNode.newOrderSpec();
+                node.childrenAccept(this, queryNode);
+                if (!orderQueryNode.isValid()) {
+                    exceptions.add(new InvalidQueryException("Invalid order specification. (Missing @?)"));
+                }
+                break;
-                    OrderQueryNode.OrderSpec[] specs = ((OrderQueryNode) queryNode).getOrderSpecs();
-                    specs[specs.length - 1].setAscending(false);
+                    ((OrderQueryNode) queryNode).setAscending(false);
-                    createOrderSpec(node, (OrderQueryNode) queryNode);
+                    setOrderSpecPath(node, (OrderQueryNode) queryNode);
+                    } else if (queryNode.getType() == QueryNode.TYPE_ORDER) {
+                        ((OrderQueryNode) queryNode).setFunction(FN_LOWER_CASE.getLocalName());
+                        node.childrenAccept(this, queryNode);
+                    } else if (queryNode.getType() == QueryNode.TYPE_ORDER) {
+                        ((OrderQueryNode) queryNode).setFunction(FN_UPPER_CASE.getLocalName());
+                        node.childrenAccept(this, queryNode);
-    private OrderQueryNode.OrderSpec createOrderSpec(SimpleNode node,
-                                                     OrderQueryNode queryNode) {
+    private void setOrderSpecPath(SimpleNode node, OrderQueryNode queryNode) {
-        OrderQueryNode.OrderSpec spec = null;
-            spec = new OrderQueryNode.OrderSpec(path, true);
-            queryNode.addOrderSpec(spec);
+            queryNode.setPath(path);
-        return spec;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS39 UPD42 MOV10 MOV21 MOV10 MOV10 MOV10 MOV21 INS49 INS60 INS21 INS25 INS10 INS21 INS42 INS43 INS59 INS32 INS38 INS8 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS21 INS42 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS32 MOV32 UPD42 UPD42 INS42 INS42 INS42 INS14 UPD42 INS9 UPD42 INS43 INS45 INS42 MOV8 MOV27 INS8 UPD42 INS25 INS25 INS27 INS8 MOV8 MOV27 MOV8 INS25 INS32 INS40 INS21 INS21 INS27 INS8 MOV8 INS42 INS42 INS32 INS32 INS32 INS40 INS21 INS21 INS36 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS32 INS11 INS42 INS42 INS36 INS42 INS32 INS42 INS42 INS52 INS42 INS43 INS42 INS11 INS42 INS42 INS42 INS43 INS42 INS42 DEL40 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL9 DEL32 DEL25 DEL8 DEL40 DEL43 DEL40 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL40 DEL43 DEL42 DEL9 DEL14 DEL7 DEL21 DEL42 DEL41