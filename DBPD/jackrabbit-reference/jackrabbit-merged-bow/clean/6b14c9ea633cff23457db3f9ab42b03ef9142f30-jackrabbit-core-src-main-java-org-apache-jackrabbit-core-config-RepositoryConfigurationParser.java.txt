JCR-1104 : JSR 283 support
JCR-1171 : Contribute Pluggable Permission and User Management to Jackrabbit

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@638834 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.util.Properties;
-
+import java.io.File;
+import java.util.Properties;
+
+    /** Name of the security manager configuration element. */
+    public static final String SECURITY_MANAGER_ELEMENT = "SecurityManager";
+
+    /**
+     * Name of the optional WorkspaceAccessManager element defining which
+     * implementation of WorkspaceAccessManager to be used.
+     */
+    private static final String WORKSPACE_ACCESS_ELEMENT = "WorkspaceAccessManager";
+
+    /** Name of the workspace conaining security data. */
+    public static final String WSP_NAME_ATTRIBUTE = "workspaceName";
+
+    /** Name of the workspace specific security configuration element */
+    private static final String WSP_SECURITY_ELEMENT = "WorkspaceSecurity";
+
+    /**
+     * Name of the optional AccessControlProvider element defining which
+     * implementation of AccessControlProvider should be used.
+     */
+    private static final String AC_PROVIDER_ELEMENT = "AccessControlProvider";
+
+     *       &lt;SecurityManager ...&gt;
+     *     &lt;SecurityManager ...&gt;
-     * Both the <code>AccessManager</code> and <code>LoginModule</code>
-     * elements are {@link #parseBeanConfig(Element,String) bean configuration}
+     * The <code>SecurityManager</code>, the <code>AccessManager</code>
+     * and <code>LoginModule</code> are all
+     * {@link #parseBeanConfig(Element,String) bean configuration}
+
+        SecurityManagerConfig smc = parseSecurityManagerConfig(security);
-        return new SecurityConfig(appName, amc, lmc);
+
+        return new SecurityConfig(appName, smc, amc, lmc);
+    }
+
+    /**
+     * Parses the security manager configuration.
+     *
+     * @param security the &lt;security> element.
+     * @return the security manager configuration.
+     * @throws ConfigurationException if the configuration is broken
+     */
+    public SecurityManagerConfig parseSecurityManagerConfig(Element security)
+            throws ConfigurationException {
+
+        BeanConfig bc = parseBeanConfig(security, SECURITY_MANAGER_ELEMENT);
+
+        Element smElement = getElement(security, SECURITY_MANAGER_ELEMENT);
+        String wspAttr = getAttribute(smElement, WSP_NAME_ATTRIBUTE, null);
+
+        BeanConfig wac = null;
+        Element element = getElement(smElement, WORKSPACE_ACCESS_ELEMENT, false);
+        if (element != null) {
+            wac = parseBeanConfig(smElement, WORKSPACE_ACCESS_ELEMENT);
+        }
+        return new SecurityManagerConfig(bc, wspAttr, wac);
+     *     &lt;WorkspaceSecurity ...&gt;
+     *     &lt;ISMLocking ...&gt;
+     * @see #parseWorkspaceSecurityConfig(Element)
-        return new WorkspaceConfig(home, name, clustered, fsc, pmc, sc, ismLockingConfig);
+        // workspace specific security configuration
+        WorkspaceSecurityConfig workspaceSecurityConfig = tmpParser.parseWorkspaceSecurityConfig(root);
+
+        return new WorkspaceConfig(home, name, clustered, fsc, pmc, sc, ismLockingConfig, workspaceSecurityConfig);
+
+    /**
+     * Read the WorkspaceSecurity Element of Workspace's configuration. It uses
+     * the following format:
+     * <pre>
+     *   &lt;WorkspaceSecurity&gt;
+     *     &lt;AccessControlProvider class="..." (optional)&gt;
+     *   &lt;/WorkspaceSecurity&gt;
+     * </pre>
+     *
+     * @param parent Workspace-Root-Element
+     * @return
+     * @throws ConfigurationException
+     */
+    public WorkspaceSecurityConfig parseWorkspaceSecurityConfig(Element parent)
+        throws ConfigurationException {
+
+        BeanConfig factConf = null;
+        Element element = getElement(parent, WSP_SECURITY_ELEMENT, false);
+        if (element != null) {
+            Element provFact = getElement(element, AC_PROVIDER_ELEMENT, false);
+            if (provFact !=null ) {
+                factConf = parseBeanConfig(element, AC_PROVIDER_ELEMENT);
+            }
+        }
+        return new WorkspaceSecurityConfig(factConf);
+    }
+
-     * @param cluster parent cluster element
+     * @param parent cluster element

MOV26 MOV26 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS60 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS41 INS65 INS60 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS43 INS59 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS14 INS66 INS66 INS68 INS43 INS59 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS14 UPD42 UPD66 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS9 INS7 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS7 INS42 INS32 INS42 INS42 INS42