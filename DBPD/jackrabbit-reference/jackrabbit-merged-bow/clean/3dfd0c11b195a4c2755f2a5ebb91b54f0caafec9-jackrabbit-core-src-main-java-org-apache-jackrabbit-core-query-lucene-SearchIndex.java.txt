JCR-3162 Index update overhead on cluster slave due to JCR-905

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1214329 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.cluster.ChangeLogRecord;
+import org.apache.jackrabbit.core.cluster.ClusterNode;
+import org.apache.jackrabbit.core.cluster.ClusterRecord;
+import org.apache.jackrabbit.core.cluster.ClusterRecordDeserializer;
+import org.apache.jackrabbit.core.cluster.ClusterRecordProcessor;
+import org.apache.jackrabbit.core.cluster.LockRecord;
+import org.apache.jackrabbit.core.cluster.NamespaceRecord;
+import org.apache.jackrabbit.core.cluster.NodeTypeRecord;
+import org.apache.jackrabbit.core.cluster.PrivilegeRecord;
+import org.apache.jackrabbit.core.cluster.WorkspaceRecord;
+import org.apache.jackrabbit.core.journal.Journal;
+import org.apache.jackrabbit.core.journal.JournalException;
+import org.apache.jackrabbit.core.journal.Record;
+import org.apache.jackrabbit.core.journal.RecordIterator;
+import org.apache.jackrabbit.core.state.ItemState;
+            checkPendingJournalChanges(context);
+    /**
+     * In the case of an initial index build operation, this checks if there are
+     * some new nodes pending in the journal and tries to preemptively delete
+     * them, to keep the index consistent.
+     * 
+     * See JCR-3162
+     * 
+     * @param context
+     * @throws IOException
+     */
+    private void checkPendingJournalChanges(QueryHandlerContext context) {
+        ClusterNode cn = context.getClusterNode();
+        if (cn == null) {
+            return;
+        }
+
+        List<NodeId> addedIds = new ArrayList<NodeId>();
+        long rev = cn.getRevision();
+
+        List<ChangeLogRecord> changes = getChangeLogRecords(rev, context.getWorkspace());
+        Iterator<ChangeLogRecord> iterator = changes.iterator();
+        while (iterator.hasNext()) {
+            ChangeLogRecord record = iterator.next();
+            for (ItemState state : record.getChanges().addedStates()) {
+                if (!state.isNode()) {
+                    continue;
+                }
+                addedIds.add((NodeId) state.getId());
+            }
+        }
+        if (!addedIds.isEmpty()) {
+            Collection<NodeState> empty = Collections.emptyList();
+            try {
+                updateNodes(addedIds.iterator(), empty.iterator());
+            } catch (Exception e) {
+                log.error(e.getMessage(), e);
+            }
+        }
+    }
+
+
+    /**
+     * Polls the underlying journal for events of the type ChangeLogRecord that
+     * happened after a given revision, on a given workspace.
+     *
+     * @param revision
+     *            starting revision
+     * @param workspace
+     *            the workspace name
+     * @return
+     */
+    private List<ChangeLogRecord> getChangeLogRecords(long revision,
+            final String workspace) {
+        log.debug(
+                "Get changes from the Journal for revision {} and workspace {}.",
+                revision, workspace);
+        ClusterNode cn = getContext().getClusterNode();
+        if (cn == null) {
+            return Collections.emptyList();
+        }
+        Journal journal = cn.getJournal();
+        final List<ChangeLogRecord> events = new ArrayList<ChangeLogRecord>();
+        ClusterRecordDeserializer deserializer = new ClusterRecordDeserializer();
+        RecordIterator records = null;
+        try {
+            records = journal.getRecords(revision);
+            while (records.hasNext()) {
+                Record record = records.nextRecord();
+                if (!record.getProducerId().equals(cn.getId())) {
+                    continue;
+                }
+                ClusterRecord r = null;
+                try {
+                    r = deserializer.deserialize(record);
+                } catch (JournalException e) {
+                    log.error(
+                            "Unable to read revision '" + record.getRevision()
+                                    + "'.", e);
+                }
+                if (r == null) {
+                    continue;
+                }
+                r.process(new ClusterRecordProcessor() {
+                    public void process(ChangeLogRecord record) {
+                        String eventW = record.getWorkspace();
+                        if (eventW != null ? eventW.equals(workspace) : workspace == null) {
+                            events.add(record);
+                        }
+                    }
+
+                    public void process(LockRecord record) {
+                    }
+
+                    public void process(NamespaceRecord record) {
+                    }
+
+                    public void process(NodeTypeRecord record) {
+                    }
+
+                    public void process(PrivilegeRecord record) {
+                    }
+
+                    public void process(WorkspaceRecord record) {
+                    }
+                });
+            }
+        } catch (JournalException e1) {
+            log.error(e1.getMessage(), e1);
+        } finally {
+            if (records != null) {
+                records.close();
+            }
+        }
+        return events;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS43 INS42 INS60 INS25 INS60 INS60 INS60 INS60 INS61 INS25 INS65 INS65 INS65 INS65 INS43 INS43 INS39 INS42 INS83 INS43 INS42 INS21 INS60 INS25 INS60 INS60 INS60 INS60 INS54 INS41 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS74 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS32 INS8 INS38 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS83 INS74 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS43 INS43 INS42 INS14 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS70 INS32 INS60 INS54 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS33 INS21 INS61 INS44 INS8 INS25 INS32 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS74 INS59 INS8 INS12 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS74 INS43 INS7 INS32 INS8 INS43 INS42 INS21 INS27 INS8 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS25 INS21 INS43 INS43 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS60 INS54 INS25 INS21 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS18 INS42 INS42 INS11 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS18 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS18 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS7 INS43 INS42 INS21 INS43 INS1 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS45 INS32 INS45 INS43 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS16 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS27 INS21 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42