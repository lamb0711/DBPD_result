JCR-2238: Binary throws NullPointerException

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@802676 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.io.IOUtils;
-                InternalValue result;
-                    blob = getBLOBFileValue(store, value.getBinary().getStream(), true);
+                    Binary b = value.getBinary();
+                    boolean dispose = false;
+                    try {
+                        if (b instanceof BLOBFileValue) {
+                            // use as is
+                            blob = (BLOBFileValue) b;
+                        } else {
+                            // create a copy from the stream
+                            dispose = true;
+                            blob = getBLOBFileValue(store, b.getStream(), true);
+                        }
+                    } finally {
+                        if (dispose) {
+                            b.dispose();
+                        }
+                    }
-                result = new InternalValue(blob);
-                return result;
+                return new InternalValue(blob);
-        return new InternalValue(getBLOBFileValue(null, value, false));
+        return create(value, null);
-        BLOBFileValue v = (BLOBFileValue) val;
-        if (v.isImmutable()) {
-            return this;
-        }
-        // return a copy since the wrapped BLOBFileValue instance is mutable
-        InputStream stream = v.getStream();
-        try {
-            return createTemporary(stream);
-        } finally {
-            try {
-                stream.close();
-            } catch (IOException e) {
-                // ignore
-            }
-        }
+        // return a copy of the wrapped BLOBFileValue
+        return new InternalValue(((BLOBFileValue) val).copy());
-            return ((BLOBFileValue) val).getSize();
+            return ((Binary) val).getSize();
-            return ((BLOBFileValue) val).getString();
+            InputStream stream = getStream();
+            try {
+                return IOUtils.toString(stream, "UTF-8");
+            } catch (IOException e) {
+                throw new RepositoryException("conversion from stream to string failed", e);
+            } finally {
+                IOUtils.closeQuietly(stream);
+            }
-            return ((BLOBFileValue) val).getStream();
+            return ((Binary) val).getStream();
-            return (BLOBFileValue) val;
+            // return an independent copy that can be disposed without
+            // affecting this value
+            return ((BLOBFileValue) val).copy();
-            bfv.discard();
+            bfv.dispose();

INS26 INS40 MOV8 MOV25 INS25 INS32 INS14 INS8 INS8 INS8 MOV8 MOV27 INS8 MOV14 UPD42 MOV42 MOV42 INS33 MOV43 MOV32 INS41 INS60 INS54 INS41 INS60 INS60 INS54 UPD42 INS32 MOV43 INS59 INS8 MOV12 INS8 INS32 UPD43 MOV43 MOV59 INS39 INS59 INS8 INS8 INS36 INS42 INS42 INS32 MOV41 INS21 INS36 INS42 UPD42 UPD42 UPD42 UPD42 MOV32 INS42 INS9 INS25 INS25 INS11 INS42 INS53 INS32 INS11 INS62 INS8 MOV8 INS42 INS8 INS43 INS42 INS42 INS42 UPD42 INS45 INS14 INS42 INS42 INS42 INS43 INS42 INS42 MOV43 INS21 INS21 INS21 INS42 INS43 INS45 INS42 INS42 INS7 INS7 INS32 INS42 INS42 INS11 INS42 INS9 INS42 INS42 MOV43 INS42 INS42 DEL60 DEL25 DEL42 DEL7 DEL21 DEL42 DEL33 DEL9 DEL32 DEL14 DEL42 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL52 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL54 DEL8 DEL42 DEL43 DEL42 DEL11 DEL36 DEL8 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8