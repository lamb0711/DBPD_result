JCR-3064 - modified patch originally posted by alex parvulescu, omitting some calls to SystemSession.getNode during ac-evaluation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1181648 13f79535-47bb-0310-9956-ffa450edef68

-                List<AccessControlEntry> entries = new ACLTemplate(aclNode).getEntries();
-                if (!entries.isEmpty() && filter != null) {
-                    filter.filterEntries(entries, userAces, groupAces);
-                }
+                filterEntries(filter, new ACLTemplate(aclNode).getEntries(), userAces, groupAces);
-            NodeId next = node.getNodeId();
+            filterEntries(filter, getEntries(node).getACEs(), userAces, groupAces);
+            NodeId next = node.getParentId();
-                List<AccessControlEntry> entries = getEntries(next);
-                if (!entries.isEmpty() && filter != null) {
-                    filter.filterEntries(entries, userAces, groupAces);
-                }
-                next = getParentId(next);
+                Entries entries = getEntries(next);
+                filterEntries(filter, entries.getACEs(), userAces, groupAces);
+                next = entries.getNextId();
-        
+
+     * Filter the specified access control <code>entries</code>
+     *
+     * @param filter
+     * @param aces
+     * @param userAces
+     * @param groupAces
+     */
+    @SuppressWarnings("unchecked")
+    private static void filterEntries(EntryFilter filter, List<AccessControlEntry> aces,
+                                      LinkedList<AccessControlEntry> userAces,
+                                      LinkedList<AccessControlEntry> groupAces) {
+        if (!aces.isEmpty() && filter != null) {
+            filter.filterEntries(aces, userAces, groupAces);
+        }
+    }
+
+    /**
-    protected List<AccessControlEntry> getEntries(NodeImpl node) throws RepositoryException {
-        List<AccessControlEntry> entries;
+    protected Entries getEntries(NodeImpl node) throws RepositoryException {
+        List<AccessControlEntry> aces;
-            entries = new ACLTemplate(aclNode).getEntries();
+            aces = new ACLTemplate(aclNode).getEntries();
-            entries = Collections.emptyList();
+            aces = Collections.emptyList();
-        return entries;
+        return new Entries(aces, node.getParentId());
-    protected List<AccessControlEntry> getEntries(NodeId nodeId) throws RepositoryException {
+    protected Entries getEntries(NodeId nodeId) throws RepositoryException {
-     * Returns the parentId of the given nodeId.
-     *
-     * @param nodeId
-     * @return
-     * @throws RepositoryException
-     */
-    protected NodeId getParentId(NodeId nodeId) throws RepositoryException {
-        NodeId parentId;
-        if (rootID.equals(nodeId)) {
-            parentId = null; // root node reached.
-        } else {
-            parentId = getNodeById(nodeId).getParentId();
-        }
-        return parentId;
-    }
-
-    /**
-}
+
+    //--------------------------------------------------------------------------
+    /**
+     * Inner class combining a list of access control entries with the information
+     * where to start looking for inherited entries.
+     *
+     * Thus <code>nextId</code> either points to the parent of the access
+     * controlled node associated with <code>aces</code> or to the next
+     * access controlled ancestor. It is <code>null</code> if the root node has
+     * been reached and there is no additional ancestor to retrieve access control
+     * entries from.
+     */
+    static class Entries {
+
+        private final List<AccessControlEntry> aces;
+        private NodeId nextId;
+
+        Entries(List<AccessControlEntry> aces, NodeId nextId) {
+            this.aces = aces;
+            this.nextId = nextId;
+        }
+
+        List<AccessControlEntry> getACEs() {
+            return aces;
+        }
+
+        NodeId getNextId() {
+            return nextId;
+        }
+
+        void setNextId(NodeId nextId) {
+            this.nextId = nextId;
+        }
+
+        boolean isEmpty() {
+            return aces.isEmpty();
+        }
+
+        @Override
+        public String toString() {
+            StringBuilder sb = new StringBuilder();
+            sb.append("size = ").append(aces.size()).append(", ");
+            sb.append("nextNodeId = ").append(nextId);
+            return sb.toString();
+        }
+    }
+}

INS31 INS55 MOV29 INS79 UPD83 MOV83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS43 INS43 INS29 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 UPD65 UPD65 INS65 INS42 INS45 INS43 INS42 MOV74 INS42 INS74 INS42 INS74 INS42 INS25 INS42 MOV60 INS41 INS42 INS65 INS83 INS83 MOV74 INS59 INS83 MOV43 INS59 INS42 INS44 INS44 INS8 MOV74 INS42 INS8 INS43 UPD42 MOV42 INS8 INS39 INS42 MOV44 INS8 INS39 INS42 INS8 INS78 INS83 UPD43 MOV43 INS42 MOV8 UPD66 UPD42 INS42 UPD42 INS42 INS42 INS43 INS43 INS43 INS43 INS27 INS8 INS59 INS14 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 MOV74 INS42 MOV43 INS42 INS21 INS21 INS41 INS42 INS41 UPD42 INS21 INS41 INS42 UPD42 INS21 MOV21 INS21 INS42 INS42 INS42 INS42 INS38 MOV27 INS21 INS42 INS43 INS42 INS32 INS7 INS7 INS42 INS42 INS7 INS32 INS43 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 UPD42 INS14 INS32 INS42 INS45 MOV32 INS42 UPD42 MOV42 INS42 INS42 MOV21 INS42 INS42 INS32 INS42 INS42 INS60 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS32 INS42 INS32 UPD42 UPD42 INS45 INS32 INS42 UPD42 INS43 MOV59 INS42 UPD42 MOV42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV32 INS42 INS42 INS42 UPD42 UPD42 INS32 MOV42 INS42 UPD42 UPD42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL33 DEL27 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL27 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL41 DEL31 DEL42 DEL32 DEL7 DEL32 DEL42 DEL33 DEL7 DEL21 DEL8 DEL8 DEL25 DEL42