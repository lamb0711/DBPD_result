implement resolveMergeConflict

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@515089 13f79535-47bb-0310-9956-ffa450edef68

-     * TODO: implement
+     * {@inheritDoc}
-    public void resolveMergeConflict(SessionInfo sessionInfo,
-                                     NodeId nodeId,
-                                     NodeId[] mergeFailedIds,
-                                     NodeId[] predecessorIds)
+    public void resolveMergeConflict(final SessionInfo sessionInfo,
+                                     final NodeId nodeId,
+                                     final NodeId[] mergeFailedIds,
+                                     final NodeId[] predecessorIds)
-        throw new UnsupportedRepositoryOperationException("not yet implemented");
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        executeWithLocalEvents(new Callable() {
+            public Object run() throws RepositoryException {
+                Node node = getNode(nodeId, sInfo);
+                Version version = null;
+                boolean cancel;
+                try {
+                    List l = Arrays.asList(mergeFailedIds);
+                    Property mergeFailed = node.getProperty(NameFormat.format(QName.JCR_MERGEFAILED, sInfo.getNamespaceResolver()));
+                    Value[] values = mergeFailed.getValues();
+                    for (int i = 0; i < values.length; i++) {
+                        String uuid = values[i].getString();
+                        if (!l.contains(idFactory.createNodeId(uuid))) {
+                            version = (Version) sInfo.getSession().getNodeByUUID(uuid);
+                            break;
+                        }
+                    }
+
+                    l =  new ArrayList(predecessorIds.length);
+                    l.addAll(Arrays.asList(predecessorIds));
+                    Property predecessors = node.getProperty(NameFormat.format(QName.JCR_PREDECESSORS, sInfo.getNamespaceResolver()));
+                    values = predecessors.getValues();
+                    for (int i = 0; i < values.length; i++) {
+                        NodeId vId = idFactory.createNodeId(values[i].getString());
+                        l.remove(vId);
+                    }
+                    cancel = l.isEmpty();
+                } catch (NoPrefixDeclaredException e) {
+                    throw new RepositoryException (e);
+                }
+                if (cancel) {
+                    node.cancelMerge(version);
+                } else {
+                    node.doneMerge(version);
+                }
+                return null;
+            }
+        }, sInfo);

INS8 INS65 INS83 INS83 INS43 INS83 INS83 INS60 INS21 INS65 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS1 INS42 INS31 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS60 INS60 INS60 INS54 INS25 INS41 INS43 INS59 INS43 INS59 INS39 INS59 INS8 INS12 INS42 INS8 INS8 INS33 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS60 INS60 INS60 INS24 INS21 INS21 INS60 INS21 INS24 INS21 INS44 INS8 INS21 INS21 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS32 INS43 INS59 INS7 INS58 INS27 INS37 INS8 INS7 INS43 INS42 MOV53 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS38 INS8 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS34 MOV43 INS59 INS32 INS42 INS42 UPD43 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS32 INS32 INS21 INS10 INS42 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS2 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS2 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL45 DEL8