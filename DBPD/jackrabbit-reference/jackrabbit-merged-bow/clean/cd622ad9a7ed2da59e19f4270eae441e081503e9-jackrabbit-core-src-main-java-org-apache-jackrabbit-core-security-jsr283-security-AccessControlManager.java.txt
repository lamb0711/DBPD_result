JCR-1588: JSR 283 Access Control (work in progress)
JCR-1589: JSR 283: Retention & Hold Management (work in progress)

- sync ac/r&h interfaces


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@656178 13f79535-47bb-0310-9956-ffa450edef68

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import javax.jcr.AccessDeniedException;
-import javax.jcr.AccessDeniedException;
+import javax.jcr.lock.LockException;
+import javax.jcr.version.VersionException;
+ * <li>Retention and hold discovery</li>
+ * <li>Adding hold(s) to existing nodes and removing them</li>
+ * <li>Adding retention policies to existing nodes and removing them.</li>
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     *                               or the session does not have privilege to 
+     *                               or the session does not have privilege to
-     * Testing an aggregate privilege is equivalent to testing each nonaggregate
+     * Testing an aggregate privilege is equivalent to testing each non aggregate
+     * <p/>
+     * The results reported by the this method reflect the net
+     * <i>effect</i> of the currently applied control mechanisms. It does not reflect
+     * unsaved access control policies or unsaved access control entries.
+     * Changes to access control status caused by these mechanisms only take effect
+     * on <code>Session.save()</code> and are only then reflected in the results of
+     * the privilege test methods.
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     *                               or the session does not have privilege to 
+     *                               or the session does not have privilege to
-     * 
+     * <p/>
+     * The results reported by the this method reflect the net
+     * <i>effect</i> of the currently applied control mechanisms. It does not reflect
+     * unsaved access control policies or unsaved access control entries.
+     * Changes to access control status caused by these mechanisms only take effect
+     * on <code>Session.save()</code> and are only then reflected in the results of
+     * the privilege test methods.
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
+     *
-     *                               or the session does not have privilege to 
+     *                               or the session does not have privilege to
-     * policy has been set. This method reflects the binding state including
+     * policy has been set. This method reflects the binding state, including
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the session lacks
+     * <code>READ_ACCESS_CONTROL</code> privilege for the <code>absPath</code> node.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     *                               or the session does not have privilege to 
+     *                               or the session does not have privilege to
-     *                               <code>READ_ACCESS_CONTROL</code> privilege 
+     *                               <code>READ_ACCESS_CONTROL</code> privilege
-     * Returns the <code>AccessControlPolicy</code> that currently is in effect 
-     * at the node at <code>absPath</code>. This may be an 
-     * <code>AccessControlPolicy</code> set through this API or some 
+     * Returns the <code>AccessControlPolicy</code> that currently is in effect
+     * at the node at <code>absPath</code>. This may be an
+     * <code>AccessControlPolicy</code> set through this API or some
-     * </p>
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the session lacks
+     * <code>READ_ACCESS_CONTROL</code> privilege for the <code>absPath</code> node.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     *                               or the session does not have privilege to 
+     *                               or the session does not have privilege to
-     *                               <code>READ_ACCESS_CONTROL</code> privilege 
+     *                               <code>READ_ACCESS_CONTROL</code> privilege
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the session lacks
+     * <code>READ_ACCESS_CONTROL</code> privilege for the <code>absPath</code> node.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     *                               or the session does not have privilege to 
+     *                               or the session does not have privilege to
-     *                               <code>READ_ACCESS_CONTROL</code> privilege 
+     *                               <code>READ_ACCESS_CONTROL</code> privilege
-     * Only one policy may be bound at a time. If more than one policy per node 
-     * is required, the implementation should provide an appropriate aggregate 
+     * Only one policy may be bound at a time. If more than one policy per node
+     * is required, the implementation should provide an appropriate aggregate
-     * The access control policy does not take effect until a <code>save</code> 
+     * The access control policy does not take effect until a <code>save</code>
-     * If the node has access control entries that were bound to it through the 
-     * JCR API prior to the <code>setPolicy</code> call, then these entries may 
-     * be deleted. Any implementation-specific (non-JCR) access control 
-     * settings may be changed in response to a successful call to 
+     * If the node has access control entries that were bound to it through the
+     * JCR API prior to the <code>setPolicy</code> call, then these entries may
+     * be deleted. Any implementation-specific (non-JCR) access control
+     * settings may be changed in response to a successful call to
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessControlException</code> is thrown if the policy is not applicable.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the session lacks
+     * <code>MODIFY_ACCESS_CONTROL</code> privilege for the <code>absPath</code>
+     * node.
+     * <p/>
+     * An <code>LockException</code> is thrown if the node at <code>absPath</code>
+     * is locked and this implementation performs this validation immediately
+     * instead of waiting until <code>save</code>.
+     * <p/>
+     * An <code>VersionException</code> is thrown if the node at <code>absPath</code>
+     * is versionable and checked-in or is non-versionable but its nearest
+     * versionable ancestor is checked-in and this implementation performs this
+     * validation immediately instead of waiting until <code>save</code>.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     * @throws PathNotFoundException   if no node at <code>absPath</code> exists
-     *                                 or the session does not have privilege to 
-     *                                 retrieve the node.
-     * @throws AccessControlException  if the policy is not applicable.
-     * @throws AccessDeniedException   if the session lacks
-     *                                 <code>MODIFY_ACCESS_CONTROL</code> 
-     *                                 privilege for the <code>absPath</code> node.
-     * @throws RepositoryException     if another error occurs.
+     * @throws PathNotFoundException  if no node at <code>absPath</code> exists
+     *                                or the session does not have privilege to
+     *                                retrieve the node.
+     * @throws AccessControlException if the policy is not applicable.
+     * @throws AccessDeniedException  if the session lacks
+     *                                <code>MODIFY_ACCESS_CONTROL</code>
+     *                                privilege for the <code>absPath</code> node.
+     * @throws LockException          if a lock applies at the node at
+     *                                <code>absPath</code> and this implementation
+     *                                performs this validation immediately instead
+     *                                of waiting until <code>save</code>.
+     * @throws VersionException       if the node at <code>absPath</code> is
+     *                                versionable and checked-in or is non-versionable
+     *                                but its nearest versionable ancestor is
+     *                                checked-in and this implementation performs
+     *                                this validation immediately instead of
+     *                                waiting until <code>save</code>.
+     * @throws RepositoryException    if another error occurs.
-            AccessDeniedException, RepositoryException;
+            AccessDeniedException, LockException, VersionException, RepositoryException;
-     * 
-     * bound to the specified node through this API before. The effect of the 
-     * removal only takes place upon <code>Session.save()</code>. Whichever 
+     * bound to the specified node through this API before. The effect of the
+     * removal only takes place upon <code>Session.save()</code>. Whichever
-     * Note, that an implementation default or any other effective 
+     * Note, that an implementation default or any other effective
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessControlException</code> is thrown if no policy exists.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the session lacks
+     * <code>MODIFY_ACCESS_CONTROL</code> privilege for the <code>absPath</code>
+     * node.
+     * <p/>
+     * An <code>LockException</code> is thrown if the node at <code>absPath</code>
+     * is locked and this implementation performs this validation immediately
+     * instead of waiting until <code>save</code>.
+     * <p/>
+     * An <code>VersionException</code> is thrown if the node at <code>absPath</code>
+     * is versionable and checked-in or is non-versionable but its nearest
+     * versionable ancestor is checked-in and this implementation performs this
+     * validation immediately instead of waiting until <code>save</code>.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     * @throws PathNotFoundException   if no node at <code>absPath</code> exists
-     *                                 or the session does not have privilege to 
-     *                                 retrieve the node.
-     * @throws AccessControlException  if no policy exists.
-     * @throws AccessDeniedException   if the session lacks
-     *                                 <code>MODIFY_ACCESS_CONTROL</code> 
-     *                                 privilege for the <code>absPath</code> node.
-     * @throws RepositoryException     if another error occurs.
+     * @throws PathNotFoundException  if no node at <code>absPath</code> exists
+     *                                or the session does not have privilege to
+     *                                retrieve the node.
+     * @throws AccessControlException if no policy exists.
+     * @throws AccessDeniedException  if the session lacks
+     *                                <code>MODIFY_ACCESS_CONTROL</code>
+     *                                privilege for the <code>absPath</code> node.
+     * @throws LockException          if a lock applies at the node at
+     *                                <code>absPath</code> and this implementation
+     *                                performs this validation immediately instead
+     *                                of waiting until <code>save</code>.
+     * @throws VersionException       if the node at <code>absPath</code> is
+     *                                versionable and checked-in or is non-versionable
+     *                                but its nearest versionable ancestor is
+     *                                checked-in and this implementation performs
+     *                                this validation immediately instead of
+     *                                waiting until <code>save</code>.
+     * @throws RepositoryException    if another error occurs.
-            AccessDeniedException, RepositoryException;
+            AccessDeniedException, LockException, VersionException, RepositoryException;
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the session lacks
+     * <code>READ_ACCESS_CONTROL</code> privilege for the <code>absPath</code> node.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * access control entries are not supported.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     *                               or the session does not have privilege to 
+     *                               or the session does not have privilege to
-     *                               <code>READ_ACCESS_CONTROL</code> privilege 
+     *                               <code>READ_ACCESS_CONTROL</code> privilege
-     * @throws UnsupportedRepositoryOperationException if access control
-     *         is not supported.
+     * @throws UnsupportedRepositoryOperationException
+     *                               if access control entries
+     *                               are not supported.
-     * This method is intended for information purpose only and should allow
-     * the user to determine which entries are currently used for access control
-     * evaluation.
+     * This method performs a best-effort search for all access control entries in
+     * effect on the node at <code>absPath</code>.
-     * present at the given node it returns <code>null</code> in order to indicate
-     * that entries exists but the implementation cannot find them. If there
-     * are no entries present at the given node an empty array will be returned.
+     * present at the given node it returns <code>null</code>. If the implementation
+     * positively determines that no entries present at the given node then an empty
+     * array is returned.
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the session lacks
+     * <code>READ_ACCESS_CONTROL</code> privilege for the <code>absPath</code> node.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * access control entries are not supported.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     *         or the session does not have privilege to retrieve the node.
+     *                               or the session does not have privilege to retrieve the node.
-     *         <code>READ_ACCESS_CONTROL</code> privilege for the
-     *         <code>absPath</code> node.
-     * @throws UnsupportedRepositoryOperationException if access control
-     *         is not supported.
-     * @throws RepositoryException if another error occurs.
+     *                               <code>READ_ACCESS_CONTROL</code> privilege for the
+     *                               <code>absPath</code> node.
+     * @throws UnsupportedRepositoryOperationException
+     *                               if access control entries
+     *                               are not supported.
+     * @throws RepositoryException   if another error occurs.
-            throws PathNotFoundException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException;
+            throws PathNotFoundException, AccessDeniedException,
+            UnsupportedRepositoryOperationException, RepositoryException;
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessControlException</code> is thrown if the specified principal
+     * does not exist, if any of the specified privileges is not supported at
+     * <code>absPath</code> or if some other access control related exception occurs.
+     * <p/>
+     * An <code>AccessDeniedException</code>  is thrown if the session lacks
+     * <code>MODIFY_ACCESS_CONTROL</code> privilege for the <code>absPath</code>
+     * node.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * access control entries are not supported.
+     * <p/>
+     * An <code>LockException</code> is thrown if the node at <code>absPath</code>
+     * is locked and this implementation performs this validation immediately
+     * instead of waiting until <code>save</code>.
+     * <p/>
+     * An <code>VersionException</code> is thrown if the node at <code>absPath</code>
+     * is versionable and checked-in or is non-versionable but its nearest
+     * versionable ancestor is checked-in and this implementation performs this
+     * validation immediately instead of waiting until <code>save</code>.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     * @throws PathNotFoundException      if no node at <code>absPath</code> exists
-     *                                    or the session does not have privilege to retrieve the node.
-     * @throws AccessControlException     if the specified principal does not exist,
-     *                                    if any of the specified privileges is not supported at
-     *                                    <code>absPath</code> or if some other access control related
-     *                                    exception occurs.
-     * @throws AccessDeniedException      if the session lacks
-     *                                    <code>MODIFY_ACCESS_CONTROL</code> privilege for the
-     *                                    <code>absPath</code> node.
-     * @throws UnsupportedRepositoryOperationException if access control
-     *         is not supported.
-     * @throws RepositoryException        if another error occurs.
+     * @throws PathNotFoundException  if no node at <code>absPath</code> exists
+     *                                or the session does not have privilege to
+     *                                retrieve the node.
+     * @throws AccessControlException if the specified principal does not exist,
+     *                                if any of the specified privileges is not supported at
+     *                                <code>absPath</code> or if some other access control related
+     *                                exception occurs.
+     * @throws AccessDeniedException  if the session lacks
+     *                                <code>MODIFY_ACCESS_CONTROL</code> privilege for the
+     *                                <code>absPath</code> node.
+     * @throws UnsupportedRepositoryOperationException
+     *                                if access control entries
+     *                                are not supported.
+     * @throws LockException          if a lock applies at the node at
+     *                                <code>absPath</code> and this implementation
+     *                                performs this validation immediately instead
+     *                                of waiting until <code>save</code>.
+     * @throws VersionException       if the node at <code>absPath</code> is
+     *                                versionable and checked-in or is non-versionable
+     *                                but its nearest versionable ancestor is
+     *                                checked-in and this implementation performs
+     *                                this validation immediately instead of
+     *                                waiting until <code>save</code>.
+     * @throws RepositoryException    if another error occurs.
-            RepositoryException;
+            LockException, VersionException, RepositoryException;
-     * Only exactly those entries obtained through 
-     * <code>getAccessControlEntries<code> can be removed. The effect of the 
+     * Only exactly those entries obtained through
+     * <code>getAccessControlEntries<code> can be removed. The effect of the
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessControlException</code> is thrown if the specified entry
+     * is not present on the specified node.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the session lacks
+     * <code>MODIFY_ACCESS_CONTROL</code> privilege for the <code>absPath</code>
+     * node.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * access control entries are not supported.
+     * <p/>
+     * An <code>LockException</code> is thrown if the node at <code>absPath</code>
+     * is locked and this implementation performs this validation immediately
+     * instead of waiting until <code>save</code>.
+     * <p/>
+     * An <code>VersionException</code> is thrown if the node at <code>absPath</code>
+     * is versionable and checked-in or is non-versionable but its nearest
+     * versionable ancestor is checked-in and this implementation performs this
+     * validation immediately instead of waiting until <code>save</code>.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
-     * @throws PathNotFoundException if no node at <code>absPath</code> exists
-     *                               or the session does not have privilege to retrieve the node.
-     * @throws AccessControlException
-     *                               if the specified entry is not
-     *                               present on the specified node.
-     * @throws AccessDeniedException if the session lacks
-     *                               <code>MODIFY_ACCESS_CONTROL</code> privilege for the
-     *                               <code>absPath</code> node.
-     * @throws UnsupportedRepositoryOperationException if access control
-     *         is not supported.
-     * @throws RepositoryException   if another error occurs.
+     * @throws PathNotFoundException  if no node at <code>absPath</code> exists
+     *                                or the session does not have privilege to
+     *                                retrieve the node.
+     * @throws AccessControlException if the specified entry is not
+     *                                present on the specified node.
+     * @throws AccessDeniedException  if the session lacks
+     *                                <code>MODIFY_ACCESS_CONTROL</code> privilege
+     *                                for the <code>absPath</code> node.
+     * @throws UnsupportedRepositoryOperationException
+     *                                if access control entries
+     *                                are not supported.
+     * @throws LockException          if a lock applies at the node at
+     *                                <code>absPath</code> and this implementation
+     *                                performs this validation immediately instead
+     *                                of waiting until <code>save</code>.
+     * @throws VersionException       if the node at <code>absPath</code> is
+     *                                versionable and checked-in or is non-versionable
+     *                                but its nearest versionable ancestor is
+     *                                checked-in and this implementation performs
+     *                                this validation immediately instead of
+     *                                waiting until <code>save</code>.
+     * @throws RepositoryException    if another error occurs.
+            LockException, VersionException, RepositoryException;
+
+    /**
+     * Returns all hold objects that have been added through this API to the
+     * existing node at <code>absPath</code>. If no hold has been set before,
+     * this method returns an empty array.
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the current session
+     * does not have sufficient rights to retrieve the holds.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * retention and hold are not supported.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
+     *
+     * @param absPath an absolute path.
+     * @return All hold objects that have been added to the existing node at
+     *         <code>absPath</code> through this API or an empty array if no
+     *         hold has been set.
+     * @throws PathNotFoundException  if no node at <code>absPath</code> exists
+     *                                or the session does not have privilege to
+     *                                retrieve the node.
+     * @throws AccessDeniedException if the current session does not have
+     *                               sufficient rights to retrieve the holds.
+     * @throws UnsupportedRepositoryOperationException
+     *                               if retention and hold are not supported.
+     * @throws RepositoryException   if another error occurs.
+     */
+    public Hold[] getHolds(String absPath) throws PathNotFoundException,
+            AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException;
+
+    /**
+     * Places a hold on the existing node at <code>absPath</code>. If
+     * <code>isDeep</code> is <code>true</code>) the hold applies to this node
+     * and its subtree. The hold does not take effect until a <code>save</code>
+     * is performed. A node may have more than one hold.
+     * <p/>
+     * The format and interpretation of the <code>name</code> are not specified.
+     * They are application-dependent.
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessControlException</code> is thrown if the
+     * node at <code>absPath</code> cannot have a hold set.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the current session
+     * does not have sufficient rights to perform the operation.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * retention and hold are not supported.
+     * <p/>
+     * An <code>LockException</code> is thrown if the node at <code>absPath</code>
+     * is locked and this implementation performs this validation immediately
+     * instead of waiting until <code>save</code>.
+     * <p/>
+     * An <code>VersionException</code> is thrown if the node at <code>absPath</code>
+     * is versionable and checked-in or is non-versionable but its nearest
+     * versionable ancestor is checked-in and this implementation performs this
+     * validation immediately instead of waiting until <code>save</code>.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
+     *
+     * @param absPath an absolute path.
+     * @param name  an application-dependent string.
+     * @param isDeep  a boolean indicating if the hold applies to the subtree.
+     * @return The <code>Hold</code> applied.
+     * @throws PathNotFoundException  if no node at <code>absPath</code> exists
+     *                                or the session does not have privilege to
+     *                                retrieve the node.
+     * @throws AccessControlException if the node at
+     *                                <code>absPath</code> cannot have a hold set.
+     * @throws AccessDeniedException  if the current session does not have
+     *                                sufficient rights to perform the operation.
+     * @throws UnsupportedRepositoryOperationException
+     *                                if retention and hold are not supported.
+     * @throws LockException          if a lock applies at the node at
+     *                                <code>absPath</code> and this implementation
+     *                                performs this validation immediately instead
+     *                                of waiting until <code>save</code>.
+     * @throws VersionException       if the node at <code>absPath</code> is
+     *                                versionable and checked-in or is non-versionable
+     *                                but its nearest versionable ancestor is
+     *                                checked-in and this implementation performs
+     *                                this validation immediately instead of
+     *                                waiting until <code>save</code>.
+     * @throws RepositoryException    if another error occurs.
+     */
+    public Hold addHold(String absPath, String name, boolean isDeep)
+            throws PathNotFoundException, AccessControlException, AccessDeniedException,
+            UnsupportedRepositoryOperationException, LockException, VersionException, RepositoryException;
+
+    /**
+     * Removes the specified <code>hold</code> from the node at
+     * <code>absPath</code>. The removal does not take effect until a
+     * <code>save</code> is performed.
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessControlException</code> is thrown if the specified
+     * <code>hold</code> does not apply to the node at <code>absPath</code>.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the current session
+     * does not have sufficient rights to perform the operation.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * retention and hold are not supported.
+     * <p/>
+     * An <code>LockException</code> is thrown if the node at <code>absPath</code>
+     * is locked and this implementation performs this validation immediately
+     * instead of waiting until <code>save</code>.
+     * <p/>
+     * An <code>VersionException</code> is thrown if the node at <code>absPath</code>
+     * is versionable and checked-in or is non-versionable but its nearest
+     * versionable ancestor is checked-in and this implementation performs this
+     * validation immediately instead of waiting until <code>save</code>.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
+     *
+     * @param absPath an absolute path.
+     * @param hold    the hold to be removed.
+     * @throws PathNotFoundException  if no node at <code>absPath</code> exists
+     *                                or the session does not have privilege to
+     *                                retrieve the node.
+     * @throws AccessControlException if the specified <code>hold</code> is not
+     *                                present at the node at <code>absPath</code>.
+     * @throws AccessDeniedException  if the current session does not have
+     *                                sufficient rights to perform the operation.
+     * @throws UnsupportedRepositoryOperationException
+     *                                if retention and hold are not supported.
+     * @throws LockException          if a lock applies at the node at
+     *                                <code>absPath</code> and this implementation
+     *                                performs this validation immediately instead
+     *                                of waiting until <code>save</code>.
+     * @throws VersionException       if the node at <code>absPath</code> is
+     *                                versionable and checked-in or is non-versionable
+     *                                but its nearest versionable ancestor is
+     *                                checked-in and this implementation performs
+     *                                this validation immediately instead of
+     *                                waiting until <code>save</code>.
+     * @throws RepositoryException    if another error occurs.
+     */
+    public void removeHold(String absPath, Hold hold)
+            throws PathNotFoundException, AccessControlException, AccessDeniedException,
+            UnsupportedRepositoryOperationException, LockException, VersionException,
+
+    /**
+     * Returns the retention policy that has been set using {@link #setRetentionPolicy}
+     * on the node at <code>absPath</code> or <code>null</code> if no policy has been set.
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the current session
+     * does not have sufficient rights to retrieve the retention policy.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * retention and hold are not supported.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
+     *
+     * @param absPath an absolute path to an existing node.
+     * @return The retention policy that applies to the existing node at
+     *         <code>absPath</code> or <code>null</code> if no policy applies.
+     * @throws PathNotFoundException if no node at <code>absPath</code> exists
+     *                               or the session does not have privilege to
+     *                               retrieve the node.
+     * @throws AccessDeniedException if the current session does not have
+     *                               sufficient rights to retrieve the policy.
+     * @throws UnsupportedRepositoryOperationException
+     *                               if retention and hold are not supported.
+     * @throws RepositoryException   if another error occurs.
+     */
+    public RetentionPolicy getRetentionPolicy(String absPath)
+            throws PathNotFoundException, AccessDeniedException,
+            UnsupportedRepositoryOperationException, RepositoryException;
+
+    /**
+     * Sets the retention policy of the node at <code>absPath</code> to
+     * that defined in the specified policy node. Interpretation and enforcement
+     * of this policy is an implementation issue. In any case the policy does
+     * does not take effect until a <code>save</code> is performed.
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessControlException</code> is thrown if the specified
+     * node is not a valid retention policy node.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the current session
+     * does not have sufficient rights to perform the operation.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * retention and hold are not supported.
+     * <p/>
+     * An <code>LockException</code> is thrown if the node at <code>absPath</code>
+     * is locked and this implementation performs this validation immediately
+     * instead of waiting until <code>save</code>.
+     * <p/>
+     * An <code>VersionException</code> is thrown if the node at <code>absPath</code>
+     * is versionable and checked-in or is non-versionable but its nearest
+     * versionable ancestor is checked-in and this implementation performs this
+     * validation immediately instead of waiting until <code>save</code>.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
+     *
+     * @param absPath         an absolute path to an existing node.
+     * @param retentionPolicy a retention policy.
+     * @throws PathNotFoundException  if no node at <code>absPath</code> exists
+     *                                or the session does not have privilege to
+     *                                retrieve the node.
+     * @throws AccessControlException if the specified retention policy is not
+     *                                valid on the specified node.
+     * @throws AccessDeniedException  if the current session does not have
+     *                                sufficient rights to perform the operation.
+     * @throws UnsupportedRepositoryOperationException
+     *                                if retention and hold are not supported.
+     * @throws LockException          if a lock applies at the node at
+     *                                <code>absPath</code> and this implementation
+     *                                performs this validation immediately instead
+     *                                of waiting until <code>save</code>.
+     * @throws VersionException       if the node at <code>absPath</code> is
+     *                                versionable and checked-in or is non-versionable
+     *                                but its nearest versionable ancestor is
+     *                                checked-in and this implementation performs
+     *                                this validation immediately instead of
+     *                                waiting until <code>save</code>.
+     * @throws RepositoryException    if another error occurs.
+     */
+    public void setRetentionPolicy(String absPath, RetentionPolicy retentionPolicy)
+            throws PathNotFoundException, AccessControlException, AccessDeniedException,
+            UnsupportedRepositoryOperationException, LockException, VersionException,
+            RepositoryException;
+
+    /**
+     * Causes the current retention policy on the node at
+     * <code>absPath</code> to no longer apply. The removal does not take effect
+     * until a <code>save</code> is performed.
+     * <p/>
+     * A <code>PathNotFoundException</code> is thrown if no node at
+     * <code>absPath</code> exists or the session does not have privilege to
+     * retrieve the node.
+     * <p/>
+     * An <code>AccessControlException</code> is thrown if this node does
+     * not have a retention policy currently assigned.
+     * <p/>
+     * An <code>AccessDeniedException</code> is thrown if the current session
+     * does not have sufficient rights to perform the operation.
+     * <p/>
+     * An <code>UnsupportedRepositoryOperationException</code> is thrown if
+     * retention and hold are not supported.
+     * <p/>
+     * An <code>LockException</code> is thrown if the node at <code>absPath</code>
+     * is locked and this implementation performs this validation immediately
+     * instead of waiting until <code>save</code>.
+     * <p/>
+     * An <code>VersionException</code> is thrown if the node at <code>absPath</code>
+     * is versionable and checked-in or is non-versionable but its nearest
+     * versionable ancestor is checked-in and this implementation performs this
+     * validation immediately instead of waiting until <code>save</code>.
+     * <p/>
+     * A <code>RepositoryException</code> is thrown if another error occurs.
+     *
+     * @param absPath an absolute path to an existing node.
+     * @throws PathNotFoundException  if no node at <code>absPath</code> exists
+     *                                or the session does not have privilege to
+     *                                retrieve the node.
+     * @throws AccessControlException if this node does not have a
+     *                                retention policy currently assigned.
+     * @throws AccessDeniedException  if the current session does not have
+     *                                sufficient rights to perform the operation.
+     * @throws UnsupportedRepositoryOperationException
+     *                                if retention and hold are not supported.
+     * @throws LockException          if a lock applies at the node at
+     *                                <code>absPath</code> and this implementation
+     *                                performs this validation immediately instead
+     *                                of waiting until <code>save</code>.
+     * @throws VersionException       if the node at <code>absPath</code> is
+     *                                versionable and checked-in or is non-versionable
+     *                                but its nearest versionable ancestor is
+     *                                checked-in and this implementation performs
+     *                                this validation immediately instead of
+     *                                waiting until <code>save</code>.
+     * @throws RepositoryException    if another error occurs.
+     */
+    public void removeRetentionPolicy(String absPath)
+            throws PathNotFoundException, AccessControlException, AccessDeniedException,
+            UnsupportedRepositoryOperationException, LockException, VersionException, RepositoryException;

MOV26 INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS29 INS83 INS5 INS42 INS44 INS43 INS43 INS43 MOV43 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS29 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS43 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS66 INS66 INS66 INS65 INS65 INS42 INS42 INS65 INS65 INS42 INS42 INS42 INS65 INS65 INS42 INS42 INS65 INS65 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS67 INS42 DEL66