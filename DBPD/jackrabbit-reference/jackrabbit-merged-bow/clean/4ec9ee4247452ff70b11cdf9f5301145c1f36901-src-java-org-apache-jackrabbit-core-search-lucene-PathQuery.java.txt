- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.search.PathQueryNode;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Weight;
-import org.apache.lucene.search.Searcher;
-import org.apache.lucene.search.Scorer;
-import org.apache.lucene.search.Explanation;
-import org.apache.lucene.search.Similarity;
-import org.apache.lucene.search.HitCollector;
-import org.apache.jackrabbit.core.search.PathQueryNode;
+import org.apache.lucene.search.*;
- * @author Marcel Reutegger
- * @version $Revision:  $, $Date:  $
-    /** The path to query */
+    /**
+     * The path to query
+     */
-     * <p>
+     * <p/>
-	if (path == null) {
-	    throw new NullPointerException("path");
-	}
-	if (type < PathQueryNode.TYPE_EXACT || type > PathQueryNode.TYPE_DESCENDANT) {
-	    throw new IllegalArgumentException("type: " + type);
-	}
-	this.path = path;
-	this.type = type;
-	index = -1;
+        if (path == null) {
+            throw new NullPointerException("path");
+        }
+        if (type < PathQueryNode.TYPE_EXACT || type > PathQueryNode.TYPE_DESCENDANT) {
+            throw new IllegalArgumentException("type: " + type);
+        }
+        this.path = path;
+        this.type = type;
+        index = -1;
-     * <p>
+     * <p/>
-     * @param path the base path
-     * @param type the path type.
+     * @param path  the base path
+     * @param type  the path type.
-     *
-     * @throws NullPointerException if path is null.
+     * @throws NullPointerException     if path is null.
-     *   in {@link org.apache.jackrabbit.core.search.PathQueryNode}. Or if
-     *   <code>index</code> &lt; 1.
+     *                                  in {@link org.apache.jackrabbit.core.search.PathQueryNode}. Or if
+     *                                  <code>index</code> &lt; 1.
-	if (path == null) {
-	    throw new NullPointerException("path");
-	}
-	if (type < PathQueryNode.TYPE_EXACT || type > PathQueryNode.TYPE_DESCENDANT) {
-	    throw new IllegalArgumentException("type: " + type);
-	}
-	if (index < 1) {
-	    throw new IllegalArgumentException("index: " + index);
-	}
-	this.path = path;
-	this.type = type;
-	this.index = index;
+        if (path == null) {
+            throw new NullPointerException("path");
+        }
+        if (type < PathQueryNode.TYPE_EXACT || type > PathQueryNode.TYPE_DESCENDANT) {
+            throw new IllegalArgumentException("type: " + type);
+        }
+        if (index < 1) {
+            throw new IllegalArgumentException("index: " + index);
+        }
+        this.path = path;
+        this.type = type;
+        this.index = index;
+     *
-	return new PathQueryWeight(searcher);
+        return new PathQueryWeight(searcher);
-	return "";
+        return "";
-	private final Searcher searcher;
-	private float value;
-	private float idf;
-	private float queryNorm;
-	private float queryWeight;
+        private final Searcher searcher;
+        private float value;
+        private float idf;
+        private float queryNorm;
+        private float queryWeight;
-	public PathQueryWeight(Searcher searcher) {
-	    this.searcher = searcher;
-	}
+        public PathQueryWeight(Searcher searcher) {
+            this.searcher = searcher;
+        }
-	public Query getQuery() {
-	    return PathQuery.this;
-	}
+        public Query getQuery() {
+            return PathQuery.this;
+        }
-	public float getValue() {
-	    return value;
-	}
+        public float getValue() {
+            return value;
+        }
-	public float sumOfSquaredWeights() throws IOException {
-	    idf = searcher.getSimilarity().idf(searcher.maxDoc(), searcher.maxDoc()); // compute idf
-	    queryWeight = idf * getBoost();             // compute query weight
-	    return queryWeight * queryWeight;           // square it
-	}
+        public float sumOfSquaredWeights() throws IOException {
+            idf = searcher.getSimilarity().idf(searcher.maxDoc(), searcher.maxDoc()); // compute idf
+            queryWeight = idf * getBoost();             // compute query weight
+            return queryWeight * queryWeight;           // square it
+        }
-	public void normalize(float norm) {
-	    this.queryNorm = norm;
-	    queryWeight *= queryNorm;                   // normalize query weight
-	    value = queryWeight * idf;                  // idf for document
-	}
+        public void normalize(float norm) {
+            this.queryNorm = norm;
+            queryWeight *= queryNorm;                   // normalize query weight
+            value = queryWeight * idf;                  // idf for document
+        }
-	public Scorer scorer(IndexReader reader) throws IOException {
-	    return new PathQueryScorer(this, reader, searcher.getSimilarity());
-	}
+        public Scorer scorer(IndexReader reader) throws IOException {
+            return new PathQueryScorer(this, reader, searcher.getSimilarity());
+        }
-	public Explanation explain(IndexReader reader, int doc) throws IOException {
-	    throw new UnsupportedOperationException();
-	}
+        public Explanation explain(IndexReader reader, int doc) throws IOException {
+            throw new UnsupportedOperationException();
+        }
-	private final Weight weight;
+        private final Weight weight;
-	private final IndexReader reader;
+        private final IndexReader reader;
-	private final float score;
+        private final float score;
-	protected PathQueryScorer(Weight weight,
-				  IndexReader reader,
-				  Similarity similarity) {
-	    super(similarity);
-	    this.weight = weight;
-	    this.reader = reader;
-	    score = similarity.tf(1) * weight.getValue();
-	}
+        protected PathQueryScorer(Weight weight,
+                                  IndexReader reader,
+                                  Similarity similarity) {
+            super(similarity);
+            this.weight = weight;
+            this.reader = reader;
+            score = similarity.tf(1) * weight.getValue();
+        }
-	public void score(HitCollector hc, int maxDoc) throws IOException {
-	    TermDocs docs = reader.termDocs();
-	    //hc.collect();
-	}
+        public void score(HitCollector hc, int maxDoc) throws IOException {
+            TermDocs docs = reader.termDocs();
+            //hc.collect();
+        }
-	public Explanation explain(int doc) throws IOException {
-	    throw new UnsupportedOperationException();
-	}
+        public Explanation explain(int doc) throws IOException {
+            throw new UnsupportedOperationException();
+        }

MOV26 UPD40 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL66 DEL65