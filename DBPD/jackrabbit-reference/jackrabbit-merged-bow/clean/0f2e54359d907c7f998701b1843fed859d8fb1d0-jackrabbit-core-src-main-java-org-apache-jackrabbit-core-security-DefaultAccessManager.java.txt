JCR-1588 - JSR 283: Access Control (work in progress)
JCR-1590 - JSR 283: Locking
JCR-1915 - Node.setPrimaryNodeType should only redefine child-definitions that are not covered by the new effective nt
JCR-1875 - Failing Node.unlock() might leave inconsistent transient state
JCR-538 - Failing Node.checkin() or Node.checkout() might leave inconsistent transient state

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@732693 13f79535-47bb-0310-9956-ffa450edef68

-            throw new AccessDeniedException("Not sufficient privileges for permissions : " + permissions + " on " + id);
+            throw new AccessDeniedException("Access denied.");
+        }
+    }
+
+    /**
+     * @see AccessManager#checkPermission(Path, int)
+     */
+    public void checkPermission(Path absPath, int permissions) throws AccessDeniedException, RepositoryException {
+        if (!isGranted(absPath, permissions)) {
+            throw new AccessDeniedException("Access denied.");
-            log.debug("No privileges defined for hasPrivilege test.");
+            log.debug("No privileges passed -> allowed.");
-            int privs = privilegeRegistry.getBits(privileges);
-            return internalHasPrivileges(absPath, privs);
+            int privs = PrivilegeRegistry.getBits(privileges);
+            Path p = resolver.getQPath(absPath);
+            return (compiledPermissions.getPrivileges(p) | ~privs) == -1;
-        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
+        checkPermission(absPath, Permission.READ_AC);
-        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
+        checkPermission(absPath, Permission.READ_AC);
-        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
+        checkPermission(absPath, Permission.READ_AC);
-        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
+        checkPermission(absPath, Permission.MODIFY_AC);
-        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
+        checkPermission(absPath, Permission.MODIFY_AC);
-     * @see AbstractAccessControlManager#checkPrivileges(String, int)
+     * @see AbstractAccessControlManager#checkPermission(String,int)
-    protected void checkPrivileges(String absPath, int privileges) throws AccessDeniedException, RepositoryException {
+    protected void checkPermission(String absPath, int permission) throws AccessDeniedException, RepositoryException {
-        if (!internalHasPrivileges(absPath, privileges)) {
+        Path p = resolver.getQPath(absPath);
+        if (!compiledPermissions.grants(p, permission)) {
-    /**
-     *
-     * @param absPath
-     * @param privileges
-     * @return
-     * @throws RepositoryException
-     */
-    private boolean internalHasPrivileges(String absPath, int privileges) throws RepositoryException {
-        Path p = resolver.getQPath(absPath);
-        return (compiledPermissions.getPrivileges(p) | ~privileges) == -1;
-    }
-

MOV31 UPD83 UPD39 UPD42 INS43 INS8 UPD42 INS65 UPD43 UPD42 UPD42 MOV42 INS25 UPD42 INS60 INS68 UPD42 INS38 INS8 INS43 INS59 INS42 INS42 INS69 INS69 INS32 INS53 MOV60 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 INS42 INS42 INS32 INS43 INS39 INS42 MOV42 UPD42 MOV42 INS14 INS27 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS45 INS42 INS43 INS45 UPD45 INS42 INS36 MOV38 INS42 UPD42 INS42 INS27 MOV32 INS38 INS42 INS42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL42 DEL38 DEL27 DEL36 DEL27 DEL41 DEL8 DEL42 DEL32