JCR-1104 : JSR 283 support (security work in progress)

> introduce AccessManager.canRead(Path)
> retrieve Policy/ACE from ACProvider by Path rather than by ID
> add CompiledPermission.canReadAll for optimization
> fix ACLTemplate (various bugs) and add additional tests
> get rid of deprecated AccessManager.isGranted(ItemId, int) wherever possible
  and mark/simplify other usages
  - ItemManager
  - BatchedItemOperations
  - add TODO with QueryResultImpl that still uses the isGranted method.
  - EventConsumer: still uses isGranted. but various calls were replaced by private
    canRead -> simplify later optimization.
> remove unused ACLCache.java
> ItemManager:
  - make getItem consistent with itemExists (check perm even if obtained from cache)
  - replace getItemState by getItemData
  - get rid of duplicate code
  - add canRead(ItemData, Path) which is used (almost) everywhere and avoid permission
    check for NEW,non-protected items
  - consequently getItem(ItemId, boolean) is not required any more.
  - upon building LazyItemIterator for children: omit the duplicate permission
    check while building the set of childIds.
    the perm-check is executed upon the subsequent ItemManager.getItem call anyway 
> NodeImpl: createChildNode called ItemManager.getItem for an new item that has
  not yet been added as CNE to its parent -> replace by ItemManager.createItemInstance
  which omits the permission check.
> ItemImpl: 
  - fix javadoc
  - replace removed method ItemMgr.getItem(ItemId, boolean) by getItem(ItemId)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@649172 13f79535-47bb-0310-9956-ffa450edef68

-     * @param id         id of this <code>Node</code>
-     * @param state      state associated with this <code>Node</code>
-     * @param definition definition of <i>this</i> <code>Node</code>
-     * @param listeners  listeners on life cylce changes of this <code>NodeImpl</code>
+     * @param data       the node data
-            node = (NodeImpl) itemMgr.getItem(id);
+            // NOTE: since the node is not yet connected to its parent, avoid
+            // calling ItemManager#getItem(ItemId) which may include a permission
+            // check (with subsequent usage of the hierarachy-mgr -> error).
+            // just let the mgr create the new node that is known to exist and
+            // which has not been accessed before.
+            node = (NodeImpl) itemMgr.createItemInstance(nodeState);

UPD42 UPD66 UPD42 UPD42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65