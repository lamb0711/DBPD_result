JCR-1138: Add AbstractBundlePersistenceManager.getAllNodeIds

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@577297 13f79535-47bb-0310-9956-ffa450edef68

-        try {
-            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(sql);
-            if (stmt == null) {
-                stmt = getConnection().prepareStatement(sql);
-                preparedStatements.put(sql, stmt);
-            }
-            return executeStmtInternal(params, stmt);
-        } catch (SQLException e) {
-            logException("could not execute statement", e);
-            close();
-            throw e;
-        }
-    }
+        return executeStmt(sql, params, false, 0);
+    }    
-     * @param autoGeneratedKeys the constant that tells the driver to make auto generated keys available
+     * @param returnGeneratedKeys if the statement should return auto generated keys
+     * @param maxRows the maximum number of rows to return (0 for all rows)
-    public synchronized Statement executeStmt(String sql, Object[] params, int autoGeneratedKeys) throws SQLException {
+    public synchronized Statement executeStmt(String sql, Object[] params, boolean returnGeneratedKeys, int maxRows) throws SQLException {
-            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(sql + "_" + autoGeneratedKeys);
-            if (stmt == null) {
-                stmt = getConnection().prepareStatement(sql, autoGeneratedKeys);
-                preparedStatements.put(sql + "_" + autoGeneratedKeys, stmt);
+            String key = sql;
+            if (returnGeneratedKeys) {
+                key += " RETURN_GENERATED_KEYS";
+            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(key);
+            if (stmt == null) {
+                if (returnGeneratedKeys) {
+                    stmt = getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
+                } else {
+                    stmt = getConnection().prepareStatement(sql);
+                }
+                preparedStatements.put(key, stmt);
+            }
+            stmt.setMaxRows(maxRows);

INS8 INS44 MOV8 INS41 INS65 UPD39 UPD42 INS39 INS42 INS32 UPD42 UPD66 INS42 INS66 INS42 INS42 INS42 INS9 INS34 INS60 INS25 INS21 INS43 INS59 INS42 INS8 INS8 INS32 INS42 INS42 INS42 INS21 INS25 INS21 INS42 INS42 INS42 INS7 MOV43 INS42 INS8 MOV8 INS32 INS42 INS45 MOV42 UPD42 INS21 INS42 INS42 INS42 INS42 INS7 INS42 INS32 MOV32 INS42 INS42 INS40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8