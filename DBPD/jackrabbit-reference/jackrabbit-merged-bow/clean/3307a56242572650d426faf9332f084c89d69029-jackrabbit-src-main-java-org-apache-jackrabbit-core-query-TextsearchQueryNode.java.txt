JCR-247: Child axis support for XPath predicates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477599 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.Path;
+import org.apache.jackrabbit.name.MalformedPathException;
-     * Limits the scope of this textsearch clause to properties with this name.
+     * Limits the scope of this textsearch clause to a node or a property with
+     * the given relative path.
-     * index of all properties of a node.
+     * index of all properties of the context node.
-    private QName propertyName;
+    private Path relPath;
+
+    /**
+     * If set to <code>true</code> {@link #relPath} references a property,
+     * otherwise references a node.
+     */
+    private boolean propertyRef;
-        this(parent, query, null);
+        this(parent, query, null, false);
-     * and a textsearch <code>query</code> statement. The scope of the query
-     * is property with name <code>propertyName</code>.
+     * and a textsearch <code>query</code> statement. The scope of the query is
+     * the property or node referenced by <code>relPath</code>.
-     * @param parent the parent node of this query node.
-     * @param query  the textsearch statement.
-     * @param propertyName scope of the fulltext search.
+     * @param parent     the parent node of this query node.
+     * @param query      the textsearch statement.
+     * @param relPath    scope of the fulltext search. If <code>null</code> the
+     *                   context node is searched.
+     * @param isProperty if <code>relPath</code> references a property or a
+     *                   node.
-    public TextsearchQueryNode(QueryNode parent, String query, QName propertyName) {
+    public TextsearchQueryNode(QueryNode parent, String query, Path relPath, boolean isProperty) {
-        this.propertyName = propertyName;
+        this.relPath = relPath;
+        this.propertyRef = isProperty;
-     * node.
+     * node. Please note that this method does not return the full relative path
+     * that reference the item to match, but only the name of the final name
+     * element of the path returned by {@link #getRelativePath()}.
+     * @deprecated Use {@link #getRelativePath()} instead.
-        return propertyName;
+        return relPath == null ? null : relPath.getNameElement().getName();
+     * @deprecated Use {@link #setRelativePath(Path)} instead.
-        this.propertyName = property;
+        Path.PathBuilder builder = new Path.PathBuilder();
+        builder.addLast(property);
+        try {
+            this.relPath = builder.getPath();
+            this.propertyRef = true;
+        } catch (MalformedPathException e) {
+            // path is always valid
+        }
+    }
+
+    /**
+     * @return the relative path that references the item where the textsearch
+     *         is performed. Returns <code>null</code> if the textsearch is
+     *         performed on the context node.
+     */
+    public Path getRelativePath() {
+        return relPath;
+    }
+
+    /**
+     * Sets the relative path to the item where the textsearch is performed. If
+     * <code>relPath</code> is <code>null</code> the textsearch is performed on
+     * the context node.
+     *
+     * @param relPath the relative path to an item.
+     * @throws IllegalArgumentException if <code>relPath</code> is absolute.
+     */
+    public void setRelativePath(Path relPath) {
+        if (relPath != null && relPath.isAbsolute()) {
+            throw new IllegalArgumentException("relPath must be relative");
+        }
+        this.relPath = relPath;
+        if (relPath == null) {
+            // context node is never a property
+            propertyRef = false;
+        }
+    }
+
+    /**
+     * Adds a path element to the existing relative path. To add a path element
+     * which matches all node names use {@link RelationQueryNode#STAR_NAME_TEST}.
+     *
+     * @param element the path element to append.
+     */
+    public void addPathElement(Path.PathElement element) {
+        Path.PathBuilder builder = new Path.PathBuilder();
+        if (relPath != null) {
+            builder.addAll(relPath.getElements());
+        }
+        builder.addLast(element);
+        try {
+            relPath = builder.getPath();
+        } catch (MalformedPathException e) {
+            // path is always valid
+        }
+    }
+
+    /**
+     * @return <code>true</code> if {@link #getRelativePath()} references a
+     *         property, returns <code>false</code> if it references a node.
+     */
+    public boolean getReferencesProperty() {
+        return propertyRef;
+    }
+
+    /**
+     * Is set to <code>true</code>, indicates that {@link #getRelativePath()}
+     * references a property, if set to <code>false</code> indicates that it
+     * references a node.
+     *
+     * @param b flag whether a property is referenced.
+     */
+    public void setReferencesProperty(boolean b) {
+        propertyRef = b;
-                    && (propertyName == null ? other.propertyName == null : propertyName.equals(other.propertyName));
+                    && (relPath == null ? other.relPath == null : relPath.equals(other.relPath)
+                    && propertyRef == other.propertyRef);

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 UPD43 INS29 INS83 INS39 INS59 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD42 UPD42 INS65 INS42 INS65 UPD43 UPD42 INS39 INS42 INS21 INS65 INS65 INS60 INS21 INS54 INS65 INS42 INS41 INS65 INS65 INS65 INS43 INS42 INS25 INS21 INS25 INS65 INS65 INS43 INS42 INS60 INS25 INS21 INS54 INS65 INS41 INS65 INS65 INS39 INS42 INS21 UPD66 INS66 UPD66 INS66 INS65 INS66 INS66 INS9 UPD66 UPD66 UPD66 UPD66 UPD42 UPD66 INS66 INS42 INS66 INS66 UPD42 INS7 INS66 INS66 INS66 INS65 UPD66 INS66 INS65 INS66 INS16 INS66 INS65 INS66 INS43 INS59 INS32 INS8 INS12 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS7 INS27 INS8 INS66 INS66 INS65 INS66 INS42 INS66 INS40 INS43 INS59 INS27 INS8 INS32 INS8 INS12 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS7 INS67 INS22 INS42 UPD42 INS68 INS68 INS27 INS33 INS32 INS68 INS40 INS42 INS14 INS42 INS42 INS42 MOV21 INS21 INS44 INS8 INS27 INS32 INS53 INS22 INS42 INS42 INS33 INS21 INS67 INS40 INS42 INS14 INS42 INS33 INS21 INS42 INS42 INS42 INS21 INS44 INS8 INS68 INS68 INS42 INS42 INS42 INS52 INS42 UPD42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS69 INS43 INS7 INS43 INS42 INS42 INS33 INS42 INS42 INS14 INS52 INS42 INS7 INS42 INS42 INS43 INS32 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS40 INS32 INS22 INS9 INS42 INS43 INS45 INS42 INS9 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 UPD40 INS32 INS27 UPD42 MOV42 MOV42 UPD40 MOV40 INS42 INS40 DEL42 DEL42 DEL8 DEL32