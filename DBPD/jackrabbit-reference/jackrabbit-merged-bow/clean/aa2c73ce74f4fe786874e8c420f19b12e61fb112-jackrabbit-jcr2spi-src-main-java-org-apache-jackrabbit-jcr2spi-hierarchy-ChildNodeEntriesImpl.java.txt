JCR-2482: Reduce number of compiler warning by adding @Override and generics where appropriate 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@905699 13f79535-47bb-0310-9956-ffa450edef68

+        @Override
+        @Override
-                super(index > Path.INDEX_DEFAULT ? value : new SoftReference(value));
+                super(index > Path.INDEX_DEFAULT ? value : new SoftReference<Object>(value));
+            @Override
+            @Override
-        private final Map<Name, List> snsMap = new HashMap<Name, List>();
+        private final Map<Name, List<LinkedEntries.LinkNode>> snsMap = new HashMap<Name, List<LinkedEntries.LinkNode>>();
-            Object val = nameMap.get(qName);
+            LinkedEntries.LinkNode val = nameMap.get(qName);
-                return ((LinkedEntries.LinkNode) val).getNodeEntry();
+                return val.getNodeEntry();
-                List l = snsMap.get(qName);
+                List<LinkedEntries.LinkNode> l = snsMap.get(qName);
-                    for (Iterator it = l.iterator(); it.hasNext();) {
-                        LinkedEntries.LinkNode ln = (LinkedEntries.LinkNode) it.next();
+                    for (Iterator<LinkedEntries.LinkNode> it = l.iterator(); it.hasNext();) {
+                        LinkedEntries.LinkNode ln = it.next();
+        @SuppressWarnings("unchecked")
-                List<NodeEntry> l = new ArrayList<NodeEntry>((List)obj);
+                List<NodeEntry> l = new ArrayList<NodeEntry>((List<NodeEntry>) obj);
+        @SuppressWarnings("unchecked")
-                return findMatchingEntry((List) obj, index);
+                return findMatchingEntry((List<NodeEntry>) obj, index);
-                List l = snsMap.get(name);
+                List<LinkedEntries.LinkNode> l = snsMap.get(name);
-                return (l != null && pos < l.size()) ? (LinkedEntries.LinkNode) l.get(pos) : null;
+                return (l != null && pos < l.size()) ? l.get(pos) : null;
-                    List l = snsMap.get(name);
+                    List<LinkedEntries.LinkNode> l = snsMap.get(name);
-                        for (Iterator it = l.iterator(); it.hasNext();) {
-                            LinkedEntries.LinkNode ln = (LinkedEntries.LinkNode) it.next();
+                        for (Iterator<LinkedEntries.LinkNode> it = l.iterator(); it.hasNext();) {
+                            LinkedEntries.LinkNode ln = it.next();
-                List l = snsMap.get(name);
+                List<LinkedEntries.LinkNode> l = snsMap.get(name);
-            List sns = snsMap.get(name);
+            List<LinkedEntries.LinkNode> sns = snsMap.get(name);

INS78 INS78 UPD74 INS79 INS79 INS42 INS42 INS78 INS78 INS74 INS42 INS45 INS42 INS45 INS42 INS42 MOV43 INS43 UPD74 UPD43 INS74 MOV42 INS40 INS74 MOV40 MOV43 INS43 MOV43 INS43 INS74 INS74 INS74 INS40 INS74 MOV42 INS40 INS42 MOV43 INS43 MOV43 MOV43 MOV32 MOV43 INS43 MOV43 INS43 INS40 INS74 INS74 INS40 MOV42 INS74 INS43 INS43 MOV43 MOV43 MOV43 MOV43 MOV43 INS74 MOV42 INS42 MOV32 INS43 INS43 INS74 MOV42 INS42 MOV43 INS43 MOV43 INS40 MOV32 DEL42 DEL11 DEL36 DEL11 DEL11 DEL11