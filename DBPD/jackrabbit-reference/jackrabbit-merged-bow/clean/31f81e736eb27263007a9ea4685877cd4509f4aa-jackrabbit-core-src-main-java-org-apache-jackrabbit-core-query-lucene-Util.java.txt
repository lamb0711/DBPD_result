JCR-2076: JSR 283: Joins

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@768954 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.value.InternalValue;
+import java.util.regex.Pattern;
+import javax.jcr.PropertyType;
+import javax.jcr.Value;
+import javax.jcr.ValueFormatException;
+import javax.jcr.RepositoryException;
+
+
+    /**
+     * Returns a comparable for the internal <code>value</code>.
+     *
+     * @param value an internal value.
+     * @return a comparable for the given <code>value</code>.
+     */
+    public static Comparable getComparable(InternalValue value) {
+        switch (value.getType()) {
+            case PropertyType.BINARY:
+                return null;
+            case PropertyType.BOOLEAN:
+                return ComparableBoolean.valueOf(value.getBoolean());
+            case PropertyType.DATE:
+                return new Long(value.getDate().getTimeInMillis());
+            case PropertyType.DOUBLE:
+                return new Double(value.getDouble());
+            case PropertyType.LONG:
+                return new Long(value.getLong());
+            case PropertyType.NAME:
+                return value.getQName().toString();
+            case PropertyType.PATH:
+                return value.getPath().toString();
+            case PropertyType.REFERENCE:
+            case PropertyType.STRING:
+                return value.getString();
+            // TODO: JSR 283 now node types
+            default:
+                return null;
+        }
+    }
+
+    /**
+     * Returns a comparable for the internal <code>value</code>.
+     *
+     * @param value an internal value.
+     * @return a comparable for the given <code>value</code>.
+     * @throws ValueFormatException if the given <code>value</code> cannot be
+     *                              converted into a comparable (i.e.
+     *                              unsupported type).
+     * @throws RepositoryException  if an error occurs while converting the
+     *                              value.
+     */
+    public static Comparable getComparable(Value value)
+            throws ValueFormatException, RepositoryException {
+        switch (value.getType()) {
+            case PropertyType.BOOLEAN:
+                return ComparableBoolean.valueOf(value.getBoolean());
+            case PropertyType.DATE:
+                return new Long(value.getDate().getTimeInMillis());
+            case PropertyType.DOUBLE:
+                return new Double(value.getDouble());
+            case PropertyType.LONG:
+                return new Long(value.getLong());
+            case PropertyType.NAME:
+            case PropertyType.PATH:
+            case PropertyType.REFERENCE:
+            case PropertyType.STRING:
+                return value.getString();
+                // TODO: JSR 283 now node types
+            default:
+                throw new RepositoryException("Unsupported type: "
+                        + PropertyType.nameFromValue(value.getType()));
+        }
+    }
+
+    /**
+     * Compares values <code>c1</code> and <code>c2</code>. If the
+     * values have differing types, then the order is defined on
+     * the type itself by calling <code>compareTo()</code> on the respective
+     * type class names.
+     *
+     * @param c1 the first value.
+     * @param c2 the second value.
+     * @return a negative integer if <code>c1</code> should come before
+     *         <code>c2</code><br> a positive integer if <code>c1</code>
+     *         should come after <code>c2</code><br> <code>0</code> if they
+     *         are equal.
+     */
+    public static int compare(Comparable c1, Comparable c2) {
+        if (c1 == c2) {
+            return 0;
+        } else if (c1 == null) {
+            return -1;
+        } else if (c2 == null) {
+            return 1;
+        } else if (c1.getClass() == c2.getClass()) {
+            return c1.compareTo(c2);
+        } else {
+            // differing types -> compare class names
+            String name1 = c1.getClass().getName();
+            String name2 = c2.getClass().getName();
+            return name1.compareTo(name2);
+        }
+    }
+
+    /**
+     * Compares the two values. If the values have differing types, then an
+     * attempt is made to convert the second value into the type of the first
+     * value.
+     * <p/>
+     * Comparison of binary values is not supported.
+     *
+     * @param v1 the first value.
+     * @param v2 the second value.
+     * @return result of the comparison as specified in
+     *         {@link Comparable#compareTo(Object)}.
+     * @throws ValueFormatException if the given <code>value</code> cannot be
+     *                              converted into a comparable (i.e.
+     *                              unsupported type).
+     * @throws RepositoryException  if an error occurs while converting the
+     *                              value.
+     */
+    public static int compare(Value v1, Value v2)
+            throws ValueFormatException, RepositoryException {
+        Comparable c1 = getComparable(v1);
+        Comparable c2;
+        switch (v1.getType()) {
+            case PropertyType.BOOLEAN:
+                c2 = ComparableBoolean.valueOf(v2.getBoolean());
+                break;
+            case PropertyType.DATE:
+                c2 = new Long(v2.getDate().getTimeInMillis());
+                break;
+            case PropertyType.DOUBLE:
+                c2 = new Double(v2.getDouble());
+                break;
+            case PropertyType.LONG:
+                c2 = new Long(v2.getLong());
+                break;
+            case PropertyType.NAME:
+            case PropertyType.PATH:
+            case PropertyType.REFERENCE:
+            case PropertyType.STRING:
+                c2 = v2.getString();
+                break;
+                // TODO: JSR 283 now node types
+            default:
+                throw new RepositoryException("Unsupported type: "
+                        + PropertyType.nameFromValue(v2.getType()));
+        }
+        return compare(c1, c2);
+    }
+
+    /**
+     * Creates a regexp from <code>likePattern</code>.
+     *
+     * @param likePattern the pattern.
+     * @return the regular expression <code>Pattern</code>.
+     */
+    public static Pattern createRegexp(String likePattern) {
+        // - escape all non alphabetic characters
+        // - escape constructs like \<alphabetic char> into \\<alphabetic char>
+        // - replace non escaped _ % into . and .*
+        StringBuffer regexp = new StringBuffer();
+        boolean escaped = false;
+        for (int i = 0; i < likePattern.length(); i++) {
+            if (likePattern.charAt(i) == '\\') {
+                if (escaped) {
+                    regexp.append("\\\\");
+                    escaped = false;
+                } else {
+                    escaped = true;
+                }
+            } else {
+                if (Character.isLetterOrDigit(likePattern.charAt(i))) {
+                    if (escaped) {
+                        regexp.append("\\\\").append(likePattern.charAt(i));
+                        escaped = false;
+                    } else {
+                        regexp.append(likePattern.charAt(i));
+                    }
+                } else {
+                    if (escaped) {
+                        regexp.append('\\').append(likePattern.charAt(i));
+                        escaped = false;
+                    } else {
+                        switch (likePattern.charAt(i)) {
+                            case '_':
+                                regexp.append('.');
+                                break;
+                            case '%':
+                                regexp.append(".*");
+                                break;
+                            default:
+                                regexp.append('\\').append(likePattern.charAt(i));
+                        }
+                    }
+                }
+            }
+        }
+        return Pattern.compile(regexp.toString(), Pattern.DOTALL);
+    }
+
+    /**
+     * Returns length of the internal value.
+     *
+     * @param value a value.
+     * @return the length of the internal value or <code>-1</code> if the length
+     *         cannot be determined.
+     */
+    public static long getLength(InternalValue value) {
+        // TODO: support new JSR 283 property types
+        if (value.getType() == PropertyType.BINARY) {
+            return value.getBLOBFileValue().getLength();
+        } else
+        if (value.getType() == PropertyType.NAME
+                || value.getType() == PropertyType.PATH) {
+            return -1;
+        } else {
+            return value.toString().length();
+        }
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS42 INS43 INS42 INS50 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS50 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS50 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS24 INS41 INS65 INS65 INS65 INS43 INS42 INS25 INS66 INS42 INS66 INS66 INS42 INS32 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS49 INS41 INS49 INS41 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS49 INS49 INS49 INS41 INS49 INS53 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS27 INS8 INS25 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS49 INS49 INS49 INS21 INS10 INS49 INS53 INS32 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS32 INS66 INS42 INS66 INS66 INS66 INS42 INS27 INS8 INS25 INS42 INS42 INS40 INS33 INS40 INS32 INS40 INS14 INS40 INS14 INS40 INS14 INS40 INS32 INS40 INS32 INS40 INS40 INS32 INS33 INS42 INS42 INS40 INS32 INS40 INS14 INS40 INS14 INS40 INS14 INS40 INS40 INS40 INS40 INS32 INS14 INS42 INS42 INS41 INS27 INS8 INS25 INS68 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS7 INS40 INS40 INS40 INS40 INS7 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS9 INS39 INS59 INS42 INS32 INS42 INS25 INS42 INS42 INS32 INS40 INS32 INS40 INS41 INS27 INS8 INS8 INS42 INS42 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS43 INS27 INS34 INS42 INS33 INS41 INS27 INS8 INS25 INS42 INS42 INS69 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS32 INS43 INS27 INS43 INS42 INS34 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS41 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS38 INS42 INS33 INS41 INS27 INS8 INS8 INS43 INS42 INS42 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS13 INS25 INS25 INS32 INS42 INS32 INS40 INS32 INS40 INS38 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS34 INS32 INS32 INS41 INS60 INS60 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS8 INS8 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS32 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS7 INS7 INS42 INS42 INS42 INS42 INS8 INS8 INS42 INS8 INS8 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS9 INS42 INS9 INS21 INS21 INS21 INS21 INS21 INS50 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS32 INS7 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS13 INS32 INS13 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS13 INS42 INS42 INS42