- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.11 $, $Date: 2004/08/02 16:19:52 $
-	if (!src.canRead()) {
-	    throw new IOException(src.getPath() + " can't be read from.");
-	}
-	if (src.isDirectory()) {
-	    // src is a folder
-	    if (dest.isFile()) {
-		throw new IOException("can't copy a folder to a file");
-	    }
-	    if (!dest.exists()) {
-		dest.mkdirs();
-	    }
-	    if (!dest.canWrite()) {
-		throw new IOException("can't write to " + dest.getPath());
-	    }
-	    File[] children = src.listFiles();
-	    for (int i = 0; i < children.length; i++) {
-		copy(children[i], new File(dest, children[i].getName()));
-	    }
-	} else {
-	    // src is a file
-	    File destParent;
-	    if (dest.isDirectory()) {
-		// dest is a folder
-		destParent = dest;
-		dest = new File(destParent, src.getName());
-	    } else {
-		destParent = dest.getParentFile();
-	    }
-	    if (!destParent.canWrite()) {
-		throw new IOException("can't write to " + destParent.getPath());
-	    }
+        if (!src.canRead()) {
+            throw new IOException(src.getPath() + " can't be read from.");
+        }
+        if (src.isDirectory()) {
+            // src is a folder
+            if (dest.isFile()) {
+                throw new IOException("can't copy a folder to a file");
+            }
+            if (!dest.exists()) {
+                dest.mkdirs();
+            }
+            if (!dest.canWrite()) {
+                throw new IOException("can't write to " + dest.getPath());
+            }
+            File[] children = src.listFiles();
+            for (int i = 0; i < children.length; i++) {
+                copy(children[i], new File(dest, children[i].getName()));
+            }
+        } else {
+            // src is a file
+            File destParent;
+            if (dest.isDirectory()) {
+                // dest is a folder
+                destParent = dest;
+                dest = new File(destParent, src.getName());
+            } else {
+                destParent = dest.getParentFile();
+            }
+            if (!destParent.canWrite()) {
+                throw new IOException("can't write to " + destParent.getPath());
+            }
-	    FileInputStream fis = new FileInputStream(src);
-	    FileOutputStream fos = new FileOutputStream(dest);
+            FileInputStream fis = new FileInputStream(src);
+            FileOutputStream fos = new FileOutputStream(dest);
-	    byte[] buffer = new byte[8192];
-	    int read = 0;
-	    while ((read = fis.read(buffer)) > 0) {
-		fos.write(buffer, 0, read);
-	    }
+            byte[] buffer = new byte[8192];
+            int read = 0;
+            while ((read = fis.read(buffer)) > 0) {
+                fos.write(buffer, 0, read);
+            }
-	    fis.close();
-	    fos.close();
-	}
+            fis.close();
+            fos.close();
+        }
-	if (f.isDirectory()) {
-	    // it's a folder, list children first
-	    File[] children = f.listFiles();
-	    for (int i = 0; i < children.length; i++) {
-		delete(children[i]);
-	    }
-	}
-	f.delete();
+        if (f.isDirectory()) {
+            // it's a folder, list children first
+            File[] children = f.listFiles();
+            for (int i = 0; i < children.length; i++) {
+                delete(children[i]);
+            }
+        }
+        f.delete();

DEL66 DEL65 DEL66 DEL65