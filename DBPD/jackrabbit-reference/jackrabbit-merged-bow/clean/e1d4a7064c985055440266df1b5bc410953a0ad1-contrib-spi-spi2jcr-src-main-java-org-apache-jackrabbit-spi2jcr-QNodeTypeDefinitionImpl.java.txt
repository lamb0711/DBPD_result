JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.IllegalNameException;
-import org.apache.jackrabbit.name.UnknownPrefixException;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.conversion.IllegalNameException;
+import org.apache.jackrabbit.conversion.NamePathResolver;
+import org.apache.jackrabbit.conversion.NameException;
+import javax.jcr.NamespaceException;
-     * @param nsResolver    the namespace resolver in use.
+     * @param resolver
-     * @throws RepositoryException    if an error occurs while reading from
-     *                                <code>nt</code>.
-     * @throws IllegalNameException   if <code>nt</code> contains an illegal
+     *
+     * @throws NameException   if <code>nt</code> contains an illegal
-     * @throws UnknownPrefixException if <code>nt</code> contains a name with an
+     * @throws NamespaceException if <code>nt</code> contains a name with an
+     * @throws RepositoryException    if an error occurs while reading from
+     *                                <code>nt</code>.
-                                   NamespaceResolver nsResolver,
+                                   NamePathResolver resolver,
-            throws RepositoryException, IllegalNameException, UnknownPrefixException {
-        super(NameFormat.parse(nt.getName(), nsResolver),
-                getNodeTypeNames(nt.getDeclaredSupertypes(), nsResolver),
+            throws NamespaceException, RepositoryException, NameException {
+        super(resolver.getQName(nt.getName()),
+                getNodeTypeNames(nt.getDeclaredSupertypes(), resolver),
-                nt.getPrimaryItemName() != null ? NameFormat.parse(nt.getPrimaryItemName(), nsResolver) : null,
-                getQPropertyDefinitions(nt.getDeclaredPropertyDefinitions(), nsResolver, qValueFactory),
-                getQNodeDefinitions(nt.getDeclaredChildNodeDefinitions(), nsResolver));
+                nt.getPrimaryItemName() != null ? resolver.getQName(nt.getPrimaryItemName()) : null,
+                getQPropertyDefinitions(nt.getDeclaredPropertyDefinitions(), resolver, qValueFactory),
+                getQNodeDefinitions(nt.getDeclaredChildNodeDefinitions(), resolver));
-     * @param nsResolver the namespace resolver.
+     * @param resolver
-     * @throws UnknownPrefixException if the nameo of a node type contains a
-     *                                prefix that is not known to <code>nsResolver</code>.
+     * @throws NamespaceException if the name of a node type contains a
+     *                            prefix that is not known to <code>rResolver</code>.
-    private static QName[] getNodeTypeNames(NodeType[] nt,
-                                     NamespaceResolver nsResolver)
-            throws IllegalNameException, UnknownPrefixException {
-        QName[] names = new QName[nt.length];
+    private static Name[] getNodeTypeNames(NodeType[] nt,
+                                           NamePathResolver resolver)
+            throws NameException, NamespaceException {
+        Name[] names = new Name[nt.length];
-            QName ntName = NameFormat.parse(nt[i].getName(), nsResolver);
+            Name ntName = resolver.getQName(nt[i].getName());
-     * @param nsResolver the namespace resolver.
+     * @param resolver
-     * @throws IllegalNameException   if a property definition contains an
-     *                                illegal name.
-     * @throws UnknownPrefixException if the name of a property definition
-     *                                contains a namespace prefix that is now
-     *                                known to <code>nsResolver</code>.
-            NamespaceResolver nsResolver,
-            QValueFactory factory) throws RepositoryException, IllegalNameException, UnknownPrefixException {
+            NamePathResolver resolver,
+            QValueFactory factory) throws RepositoryException, NameException {
-            propertyDefs[i] = new QPropertyDefinitionImpl(propDefs[i], nsResolver, factory);
+            propertyDefs[i] = new QPropertyDefinitionImpl(propDefs[i], resolver, factory);
-    
+
-     * @param nodeDefs   the JCR node definitions.
-     * @param nsResolver the namespace resolver.
+     * @param nodeDefs the JCR node definitions.
+     * @param resolver the name and path resolver.
-     * @throws UnknownPrefixException if the name of a node definition contains
+     * @throws NamespaceException if the name of a node definition contains
-    private static QNodeDefinition[] getQNodeDefinitions(
-            NodeDefinition[] nodeDefs,
-            NamespaceResolver nsResolver) throws IllegalNameException, UnknownPrefixException {
+    private static QNodeDefinition[] getQNodeDefinitions (NodeDefinition[] nodeDefs,
+                                                          NamePathResolver resolver)
+            throws NameException, NamespaceException {
-            childNodeDefs[i] = new QNodeDefinitionImpl(nodeDefs[i], nsResolver);
+            childNodeDefs[i] = new QNodeDefinitionImpl(nodeDefs[i], resolver);

MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 MOV43 MOV65 UPD43 UPD43 UPD5 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD66 UPD66 UPD42 UPD42 UPD5 UPD42 UPD42 UPD66 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD5 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL66 DEL42 DEL42 DEL66 DEL42 DEL66 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL66 DEL65 DEL42 DEL43