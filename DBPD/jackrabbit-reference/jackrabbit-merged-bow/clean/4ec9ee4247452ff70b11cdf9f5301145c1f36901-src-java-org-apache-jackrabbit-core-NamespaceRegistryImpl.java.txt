- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.31 $, $Date: 2004/08/02 16:19:40 $
-	// reserved prefixes
-	reservedPrefixes.add(NS_XML_PREFIX);
-	reservedPrefixes.add(NS_XMLNS_PREFIX);
-	// predefined (e.g. built-in) prefixes
-	reservedPrefixes.add(NS_JCR_PREFIX);
-	reservedPrefixes.add(NS_NT_PREFIX);
-	reservedPrefixes.add(NS_MIX_PREFIX);
-	reservedPrefixes.add(NS_PT_PREFIX);
-	reservedPrefixes.add(NS_SV_PREFIX);
-	// reserved namespace URI's
-	reservedURIs.add(NS_XML_URI);
-	reservedURIs.add(NS_XMLNS_URI);
-	// predefined (e.g. built-in) namespace URI's
-	reservedURIs.add(NS_JCR_URI);
-	reservedURIs.add(NS_NT_URI);
-	reservedURIs.add(NS_MIX_URI);
-	reservedURIs.add(NS_PT_URI);
-	reservedURIs.add(NS_SV_URI);
+        // reserved prefixes
+        reservedPrefixes.add(NS_XML_PREFIX);
+        reservedPrefixes.add(NS_XMLNS_PREFIX);
+        // predefined (e.g. built-in) prefixes
+        reservedPrefixes.add(NS_JCR_PREFIX);
+        reservedPrefixes.add(NS_NT_PREFIX);
+        reservedPrefixes.add(NS_MIX_PREFIX);
+        reservedPrefixes.add(NS_PT_PREFIX);
+        reservedPrefixes.add(NS_SV_PREFIX);
+        // reserved namespace URI's
+        reservedURIs.add(NS_XML_URI);
+        reservedURIs.add(NS_XMLNS_URI);
+        // predefined (e.g. built-in) namespace URI's
+        reservedURIs.add(NS_JCR_URI);
+        reservedURIs.add(NS_NT_URI);
+        reservedURIs.add(NS_MIX_URI);
+        reservedURIs.add(NS_PT_URI);
+        reservedURIs.add(NS_SV_URI);
-	this.nsRegStore = nsRegStore;
-	load();
+        this.nsRegStore = nsRegStore;
+        load();
-	FileSystemResource propFile = new FileSystemResource(nsRegStore, NS_REG_RESOURCE);
-	try {
-	    if (!propFile.exists()) {
-		// clear existing mappings
-		prefixToURI.clear();
-		uriToPrefix.clear();
+        FileSystemResource propFile = new FileSystemResource(nsRegStore, NS_REG_RESOURCE);
+        try {
+            if (!propFile.exists()) {
+                // clear existing mappings
+                prefixToURI.clear();
+                uriToPrefix.clear();
-		// default namespace (if no prefix is specified)
-		prefixToURI.put(NS_EMPTY_PREFIX, NS_DEFAULT_URI);
-		uriToPrefix.put(NS_DEFAULT_URI, NS_EMPTY_PREFIX);
-		// declare the predefined mappings
-		// jcr:
-		prefixToURI.put(NS_JCR_PREFIX, NS_JCR_URI);
-		uriToPrefix.put(NS_JCR_URI, NS_JCR_PREFIX);
-		// nt:
-		prefixToURI.put(NS_NT_PREFIX, NS_NT_URI);
-		uriToPrefix.put(NS_NT_URI, NS_NT_PREFIX);
-		// mix:
-		prefixToURI.put(NS_MIX_PREFIX, NS_MIX_URI);
-		uriToPrefix.put(NS_MIX_URI, NS_MIX_PREFIX);
-		// pt:
-		prefixToURI.put(NS_PT_PREFIX, NS_PT_URI);
-		uriToPrefix.put(NS_PT_URI, NS_PT_PREFIX);
-		// sv:
-		prefixToURI.put(NS_SV_PREFIX, NS_SV_URI);
-		uriToPrefix.put(NS_SV_URI, NS_SV_PREFIX);
+                // default namespace (if no prefix is specified)
+                prefixToURI.put(NS_EMPTY_PREFIX, NS_DEFAULT_URI);
+                uriToPrefix.put(NS_DEFAULT_URI, NS_EMPTY_PREFIX);
+                // declare the predefined mappings
+                // jcr:
+                prefixToURI.put(NS_JCR_PREFIX, NS_JCR_URI);
+                uriToPrefix.put(NS_JCR_URI, NS_JCR_PREFIX);
+                // nt:
+                prefixToURI.put(NS_NT_PREFIX, NS_NT_URI);
+                uriToPrefix.put(NS_NT_URI, NS_NT_PREFIX);
+                // mix:
+                prefixToURI.put(NS_MIX_PREFIX, NS_MIX_URI);
+                uriToPrefix.put(NS_MIX_URI, NS_MIX_PREFIX);
+                // pt:
+                prefixToURI.put(NS_PT_PREFIX, NS_PT_URI);
+                uriToPrefix.put(NS_PT_URI, NS_PT_PREFIX);
+                // sv:
+                prefixToURI.put(NS_SV_PREFIX, NS_SV_URI);
+                uriToPrefix.put(NS_SV_URI, NS_SV_PREFIX);
-		// persist mappings
-		store();
-		return;
-	    }
+                // persist mappings
+                store();
+                return;
+            }
-	    InputStream in = propFile.getInputStream();
-	    try {
-		Properties props = new Properties();
-		props.load(in);
+            InputStream in = propFile.getInputStream();
+            try {
+                Properties props = new Properties();
+                props.load(in);
-		// clear existing mappings
-		prefixToURI.clear();
-		uriToPrefix.clear();
+                // clear existing mappings
+                prefixToURI.clear();
+                uriToPrefix.clear();
-		// read mappings from properties
-		Iterator iter = props.keySet().iterator();
-		while (iter.hasNext()) {
-		    String prefix = (String) iter.next();
-		    String uri = props.getProperty(prefix);
+                // read mappings from properties
+                Iterator iter = props.keySet().iterator();
+                while (iter.hasNext()) {
+                    String prefix = (String) iter.next();
+                    String uri = props.getProperty(prefix);
-		    prefixToURI.put(prefix, uri);
-		    uriToPrefix.put(uri, prefix);
-		}
-	    } finally {
-		in.close();
-	    }
-	} catch (Exception e) {
-	    String msg = "failed to load namespace registry";
-	    log.error(msg, e);
-	    throw new RepositoryException(msg, e);
-	}
+                    prefixToURI.put(prefix, uri);
+                    uriToPrefix.put(uri, prefix);
+                }
+            } finally {
+                in.close();
+            }
+        } catch (Exception e) {
+            String msg = "failed to load namespace registry";
+            log.error(msg, e);
+            throw new RepositoryException(msg, e);
+        }
-	FileSystemResource propFile = new FileSystemResource(nsRegStore, NS_REG_RESOURCE);
-	try {
-	    propFile.makeParentDirs();
-	    OutputStream os = propFile.getOutputStream();
-	    Properties props = new Properties();
+        FileSystemResource propFile = new FileSystemResource(nsRegStore, NS_REG_RESOURCE);
+        try {
+            propFile.makeParentDirs();
+            OutputStream os = propFile.getOutputStream();
+            Properties props = new Properties();
-	    // store mappings in properties
-	    Iterator iter = prefixToURI.keySet().iterator();
-	    while (iter.hasNext()) {
-		String prefix = (String) iter.next();
-		String uri = (String) prefixToURI.get(prefix);
-		props.setProperty(prefix, uri);
-	    }
+            // store mappings in properties
+            Iterator iter = prefixToURI.keySet().iterator();
+            while (iter.hasNext()) {
+                String prefix = (String) iter.next();
+                String uri = (String) prefixToURI.get(prefix);
+                props.setProperty(prefix, uri);
+            }
-	    try {
-		props.store(os, null);
-	    } finally {
-		// make sure stream is closed
-		os.close();
-	    }
-	} catch (Exception e) {
-	    String msg = "failed to persist namespace registry";
-	    log.error(msg, e);
-	    throw new RepositoryException(msg, e);
-	}
+            try {
+                props.store(os, null);
+            } finally {
+                // make sure stream is closed
+                os.close();
+            }
+        } catch (Exception e) {
+            String msg = "failed to persist namespace registry";
+            log.error(msg, e);
+            throw new RepositoryException(msg, e);
+        }
-	    throws NamespaceException, RepositoryException {
-	if (prefix == null || uri == null) {
-	    throw new IllegalArgumentException("prefix/uri can not be null");
-	}
-	if (NS_EMPTY_PREFIX.equals(prefix) || NS_DEFAULT_URI.equals(uri)) {
-	    throw new NamespaceException("default namespace is reserved and can not be changed");
-	}
-	if (reservedURIs.contains(uri)) {
-	    throw new NamespaceException("failed to register namespace " + prefix + " -> " + uri + ": reserved URI");
-	}
-	if (reservedPrefixes.contains(prefix)) {
-	    throw new NamespaceException("failed to register namespace " + prefix + " -> " + uri + ": reserved prefix");
-	}
+            throws NamespaceException, RepositoryException {
+        if (prefix == null || uri == null) {
+            throw new IllegalArgumentException("prefix/uri can not be null");
+        }
+        if (NS_EMPTY_PREFIX.equals(prefix) || NS_DEFAULT_URI.equals(uri)) {
+            throw new NamespaceException("default namespace is reserved and can not be changed");
+        }
+        if (reservedURIs.contains(uri)) {
+            throw new NamespaceException("failed to register namespace " + prefix + " -> " + uri + ": reserved URI");
+        }
+        if (reservedPrefixes.contains(prefix)) {
+            throw new NamespaceException("failed to register namespace " + prefix + " -> " + uri + ": reserved prefix");
+        }
-	String oldPrefix = (String) uriToPrefix.get(uri);
-	if (oldPrefix != null) {
-	    // existing namespace
-	    if (oldPrefix.equals(prefix)) {
-		throw new NamespaceException("failed to register namespace " + prefix + " -> " + uri + ": mapping already exists");
-	    }
-	    // remove old prefix
-	    prefixToURI.remove(oldPrefix);
-	    uriToPrefix.remove(uri);
-	}
+        String oldPrefix = (String) uriToPrefix.get(uri);
+        if (oldPrefix != null) {
+            // existing namespace
+            if (oldPrefix.equals(prefix)) {
+                throw new NamespaceException("failed to register namespace " + prefix + " -> " + uri + ": mapping already exists");
+            }
+            // remove old prefix
+            prefixToURI.remove(oldPrefix);
+            uriToPrefix.remove(uri);
+        }
-	if (prefixToURI.containsKey(prefix)) {
-	    // prevent remapping of existing prefixes because this would in effect
-	    // remove the previously assigned namespace;
-	    // as we can't guarantee that there are no references to this namespace
-	    // (in names of nodes/properties/node types etc.) we simply don't allow it.
-	    throw new NamespaceException("failed to register namespace " + prefix + " -> " + uri + ": remapping existing prefixes is not supported.");
-	}
+        if (prefixToURI.containsKey(prefix)) {
+            // prevent remapping of existing prefixes because this would in effect
+            // remove the previously assigned namespace;
+            // as we can't guarantee that there are no references to this namespace
+            // (in names of nodes/properties/node types etc.) we simply don't allow it.
+            throw new NamespaceException("failed to register namespace " + prefix + " -> " + uri + ": remapping existing prefixes is not supported.");
+        }
-	prefixToURI.put(prefix, uri);
-	uriToPrefix.put(uri, prefix);
+        prefixToURI.put(prefix, uri);
+        uriToPrefix.put(uri, prefix);
-	// persist mappings
-	store();
+        // persist mappings
+        store();
-	    throws NamespaceException, RepositoryException {
-	if (reservedPrefixes.contains(prefix)) {
-	    throw new NamespaceException("reserved prefix: " + prefix);
-	}
-	if (!prefixToURI.containsKey(prefix)) {
-	    throw new NamespaceException("unknown prefix: " + prefix);
-	}
-	// as we can't guarantee that there are no references to the specified
-	// namespace (in names of nodes/properties/node types etc.) we simply
-	// don't allow it.
-	throw new NamespaceException("unregistering namespaces is not supported.");
+            throws NamespaceException, RepositoryException {
+        if (reservedPrefixes.contains(prefix)) {
+            throw new NamespaceException("reserved prefix: " + prefix);
+        }
+        if (!prefixToURI.containsKey(prefix)) {
+            throw new NamespaceException("unknown prefix: " + prefix);
+        }
+        // as we can't guarantee that there are no references to the specified
+        // namespace (in names of nodes/properties/node types etc.) we simply
+        // don't allow it.
+        throw new NamespaceException("unregistering namespaces is not supported.");
-	return (String[]) prefixToURI.keySet().toArray(new String[prefixToURI.keySet().size()]);
+        return (String[]) prefixToURI.keySet().toArray(new String[prefixToURI.keySet().size()]);
-	return (String[]) uriToPrefix.keySet().toArray(new String[uriToPrefix.keySet().size()]);
+        return (String[]) uriToPrefix.keySet().toArray(new String[uriToPrefix.keySet().size()]);
-	if (!prefixToURI.containsKey(prefix)) {
-	    throw new NamespaceException(prefix + ": is not a registered namespace prefix.");
-	}
-	return (String) prefixToURI.get(prefix);
+        if (!prefixToURI.containsKey(prefix)) {
+            throw new NamespaceException(prefix + ": is not a registered namespace prefix.");
+        }
+        return (String) prefixToURI.get(prefix);
-	if (!uriToPrefix.containsKey(uri)) {
-	    throw new NamespaceException(uri + ": is not a registered namespace uri.");
-	}
-	return (String) uriToPrefix.get(uri);
+        if (!uriToPrefix.containsKey(uri)) {
+            throw new NamespaceException(uri + ": is not a registered namespace uri.");
+        }
+        return (String) uriToPrefix.get(uri);

MOV26 DEL66 DEL65 DEL66 DEL65