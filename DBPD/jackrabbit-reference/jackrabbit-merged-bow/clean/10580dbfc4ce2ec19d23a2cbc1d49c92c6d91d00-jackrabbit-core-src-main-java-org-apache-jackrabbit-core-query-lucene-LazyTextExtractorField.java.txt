JCR-2506: Stop text extraction when the maxFieldLength limit is reached

Add a maxExtractLength configuration option, and default it to ten times maxFieldLength. This prevents excessive memory use when indexing huge documents.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915356 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.tika.parser.ParseContext;
-import org.apache.tika.sax.BodyContentHandler;
-import org.xml.sax.ContentHandler;
+import org.xml.sax.SAXException;
+import org.xml.sax.helpers.DefaultHandler;
+     * The exception used to forcibly terminate the extraction process
+     * when the maximum field length is reached.
+     */
+    private static final SAXException STOP =
+        new SAXException("max field length reached");
+
+    /**
-            Executor executor, boolean highlighting) {
+            Executor executor, boolean highlighting, int maxFieldLength) {
-        executor.execute(new ParsingTask(parser, value, metadata));
+        executor.execute(
+                new ParsingTask(parser, value, metadata, maxFieldLength));
-    private class ParsingTask implements Runnable {
+    private class ParsingTask extends DefaultHandler implements Runnable {
+        private final int maxFieldLength;
+
+        private final StringBuilder builder = new StringBuilder();
+
-                Parser parser, InternalValue value, Metadata metadata) {
+                Parser parser, InternalValue value, Metadata metadata,
+                int maxFieldLength) {
+            this.maxFieldLength = maxFieldLength;
-            ContentHandler handler = new BodyContentHandler();
-                    parser.parse(stream, handler, metadata);
+                    parser.parse(stream, this, metadata, new ParseContext());
-                log.warn("Failed to extract text from a binary property", t);
+                if (t != STOP) {
+                    log.warn("Failed to extract text from a binary property", t);
+                }
-            setExtractedText(handler.toString());
+            setExtractedText(builder.toString());
+        }
+
+        @Override
+        public void characters(char[] ch, int start, int length)
+                throws SAXException {
+            builder.append(
+                    ch, start,
+                    Math.min(length, maxFieldLength - builder.length()));
+            if (builder.length() >= maxFieldLength) {
+                throw STOP;
+            }
+        }
+
+        @Override
+        public void ignorableWhitespace(char[] ch, int start, int length)
+                throws SAXException {
+            characters(ch, start, length);

MOV26 INS26 UPD40 INS40 UPD40 INS23 INS29 INS83 INS83 INS83 INS43 INS59 INS44 INS43 INS23 INS23 INS31 INS31 INS65 INS42 INS42 INS14 INS39 INS42 INS42 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS44 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS66 INS66 INS43 INS45 INS42 INS42 INS42 INS14 INS39 INS42 INS21 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS25 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS42 INS43 INS7 INS39 INS85 INS32 INS27 INS8 INS39 INS85 INS32 INS42 INS42 INS22 INS42 INS8 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS53 INS42 INS42 INS42 INS42 INS52 INS42 INS25 UPD42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 MOV8 INS42 INS32 INS42 INS42 INS42 INS42 INS52 INS14 INS43 INS42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42