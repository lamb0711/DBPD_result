#JCR-194 dead lock while locking or unlocking nodes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@239410 13f79535-47bb-0310-9956-ffa450edef68

+     * Monitor used when modifying content, too, in order to make modifications
+     * in the lock map and modifications in the content atomic.
+     */
+    private final Object contentMonitor = new Object();
+
+    /**
-        synchronized (lockMap) {
-            // check whether node is already locked
-            Path path = node.getPrimaryPath();
-            PathMap.Element element = lockMap.map(path, false);
+        synchronized (contentMonitor) {
+            synchronized (lockMap) {
+                // check whether node is already locked
+                Path path = node.getPrimaryPath();
+                PathMap.Element element = lockMap.map(path, false);
-            LockInfo other = (LockInfo) element.get();
-            if (other != null) {
-                if (element.hasPath(path)) {
-                    throw new LockException("Node already locked: " + node.safeGetJCRPath());
-                } else if (other.deep) {
-                    throw new LockException("Parent node has deep lock.");
+                LockInfo other = (LockInfo) element.get();
+                if (other != null) {
+                    if (element.hasPath(path)) {
+                        throw new LockException("Node already locked: " + node.safeGetJCRPath());
+                    } else if (other.deep) {
+                        throw new LockException("Parent node has deep lock.");
+                    }
-            }
-            if (info.deep && element.hasPath(path) &&
-                    element.getChildrenCount() > 0) {
-                throw new LockException("Some child node is locked.");
+                if (info.deep && element.hasPath(path) &&
+                        element.getChildrenCount() > 0) {
+                    throw new LockException("Some child node is locked.");
+                }
+
+                // create lock token
+                SessionImpl session = (SessionImpl) node.getSession();
+                info.setLockHolder(session);
+                info.setLive(true);
+                session.addListener(info);
+                session.addLockToken(info.lockToken.toString(), false);
+                lockMap.put(path, info);
+                lock = new LockImpl(info, node);
-            // create lock token
-            SessionImpl session = (SessionImpl) node.getSession();
-            info.setLockHolder(session);
-            info.setLive(true);
-            session.addListener(info);
-            session.addLockToken(info.lockToken.toString(), false);
-            lockMap.put(path, info);
-            lock = new LockImpl(info, node);
+            // add properties to content
+            node.internalSetProperty(Constants.JCR_LOCKOWNER,
+                    InternalValue.create(node.getSession().getUserID()));
+            node.internalSetProperty(Constants.JCR_LOCKISDEEP,
+                    InternalValue.create(info.deep));
+            node.save();
+
+            return lock;
-
-        // add properties to content
-        node.internalSetProperty(Constants.JCR_LOCKOWNER,
-                InternalValue.create(node.getSession().getUserID()));
-        node.internalSetProperty(Constants.JCR_LOCKISDEEP,
-                InternalValue.create(info.deep));
-        node.save();
-
-        return lock;
-            // get node's path and remove child in path map
-            NodeImpl node = (NodeImpl) session.getItemManager().getItem(
-                    new NodeId(info.getUUID()));
-            Path path = node.getPrimaryPath();
+            synchronized (contentMonitor) {
+                // get node's path and remove child in path map
+                NodeImpl node = (NodeImpl) session.getItemManager().getItem(
+                        new NodeId(info.getUUID()));
+                Path path = node.getPrimaryPath();
-            synchronized (lockMap) {
-                PathMap.Element element = lockMap.map(path, true);
-                if (element != null) {
-                    element.set(null);
+                synchronized (lockMap) {
+                    PathMap.Element element = lockMap.map(path, true);
+                    if (element != null) {
+                        element.set(null);
+                    }
+
+                    // set live flag to false
+                    info.setLive(false);
+
+                // remove properties in content
+                node.internalSetProperty(Constants.JCR_LOCKOWNER, (InternalValue) null);
+                node.internalSetProperty(Constants.JCR_LOCKISDEEP, (InternalValue) null);
+                node.save();
-            // set live flag to false
-            info.setLive(false);
-
-            // remove properties in content
-            node.internalSetProperty(Constants.JCR_LOCKOWNER, (InternalValue) null);
-            node.internalSetProperty(Constants.JCR_LOCKISDEEP, (InternalValue) null);
-            node.save();
-
-        synchronized (lockMap) {
-            // check whether node is locked by this session
-            Path path = node.getPrimaryPath();
+        synchronized (contentMonitor) {
+            synchronized (lockMap) {
+                // check whether node is locked by this session
+                Path path = node.getPrimaryPath();
-            PathMap.Element element = lockMap.map(path, true);
-            if (element == null) {
-                throw new LockException("Node not locked: " + node.safeGetJCRPath());
+                PathMap.Element element = lockMap.map(path, true);
+                if (element == null) {
+                    throw new LockException("Node not locked: " + node.safeGetJCRPath());
+                }
+
+                LockInfo info = (LockInfo) element.get();
+                if (info == null) {
+                    throw new LockException("Node not locked: " + node.safeGetJCRPath());
+                }
+                if (!node.getSession().equals(info.getLockHolder())) {
+                    throw new LockException("Node not locked by session: " + node.safeGetJCRPath());
+                }
+
+                // remove lock in path map
+                element.set(null);
+                info.setLive(false);
-            LockInfo info = (LockInfo) element.get();
-            if (info == null) {
-                throw new LockException("Node not locked: " + node.safeGetJCRPath());
-            }
-            if (!node.getSession().equals(info.getLockHolder())) {
-                throw new LockException("Node not locked by session: " + node.safeGetJCRPath());
-            }
-
-            // remove lock in path map
-            element.set(null);
-            info.setLive(false);
+            // remove properties in content
+            node.internalSetProperty(Constants.JCR_LOCKOWNER, (InternalValue) null);
+            node.internalSetProperty(Constants.JCR_LOCKISDEEP, (InternalValue) null);
+            node.save();
-
-        // remove properties in content
-        node.internalSetProperty(Constants.JCR_LOCKOWNER, (InternalValue) null);
-        node.internalSetProperty(Constants.JCR_LOCKISDEEP, (InternalValue) null);
-        node.save();

INS23 INS29 INS83 INS83 INS43 INS59 INS8 INS65 INS42 INS42 INS14 INS51 INS51 INS66 INS66 INS43 INS42 INS8 INS8 INS42 MOV8 INS42 MOV51 MOV21 MOV21 MOV21 MOV41 INS51 INS42 MOV8 MOV21