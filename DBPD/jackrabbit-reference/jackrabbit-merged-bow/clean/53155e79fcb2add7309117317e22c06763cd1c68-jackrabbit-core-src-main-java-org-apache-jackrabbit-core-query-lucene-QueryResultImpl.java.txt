JCR-2076: JSR 283: Joins
- columns

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@781369 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.query.qom.ColumnImpl;
-import javax.jcr.NamespaceException;
+import java.util.Map;
+import java.util.LinkedHashMap;
-     * The select properties
+     * The columns to select.
-    protected final Name[] selectProps;
+    protected final Map<String, ColumnImpl> columns = new LinkedHashMap<String, ColumnImpl>();
-    private final List resultNodes = new ArrayList();
+    private final List<ScoreNode[]> resultNodes = new ArrayList<ScoreNode[]>();
-     * @param selectProps     the select properties of the query.
+     * @param columns         the select properties of the query.
+     * @throws IllegalArgumentException if any of the columns does not have a
+     *                                  column name.
-                           Name[] selectProps,
+                           ColumnImpl[] columns,
-        this.selectProps = selectProps;
+        for (ColumnImpl column : columns) {
+            String cn = column.getColumnName();
+            if (cn == null) {
+                String msg = column + " does not have a column name";
+                throw new IllegalArgumentException(msg);
+            }
+            this.columns.put(cn, column);
+
+        }
-        try {
-            String[] propNames = new String[selectProps.length];
-            for (int i = 0; i < selectProps.length; i++) {
-                propNames[i] = session.getJCRName(selectProps[i]);
-            }
-            return propNames;
-        } catch (NamespaceException npde) {
-            String msg = "encountered invalid property name";
-            log.debug(msg);
-            throw new RepositoryException(msg, npde);
-        }
+        return columns.keySet().toArray(new String[columns.size()]);
-        return new RowIteratorImpl(getScoreNodes(), selectProps,
+        return new RowIteratorImpl(getScoreNodes(), columns,
-            log.debug("getResults({}) limit={}", new Long(size), new Long(limit));
+            log.debug("getResults({}) limit={}", size, limit);
-                    new Long(System.currentTimeMillis() - time));
+                    System.currentTimeMillis() - time);
-                collectScoreNodes(result, new ArrayList(), offset);
+                collectScoreNodes(result, new ArrayList<ScoreNode[]>(), offset);
-                    new Long(System.currentTimeMillis() - time));
+                    System.currentTimeMillis() - time);
-                                   List collector,
+                                   List<ScoreNode[]> collector,
-        for (int i = 0; i < nodes.length; i++) {
+        for (ScoreNode node : nodes) {
-                if (nodes[i] != null && !accessMgr.isGranted(nodes[i].getNodeId(), AccessManager.READ)) {
+                if (node != null && !accessMgr.isGranted(node.getNodeId(), AccessManager.READ)) {
-                next = (ScoreNode[]) resultNodes.get(nextPos);
+                next = resultNodes.get(nextPos);

MOV26 INS26 INS26 INS40 UPD40 INS40 INS23 INS31 MOV29 MOV83 MOV83 INS74 INS59 INS74 MOV29 INS83 MOV5 INS42 MOV43 INS8 INS43 INS43 INS43 INS42 INS14 MOV43 INS5 INS65 UPD5 UPD42 INS70 INS41 INS74 INS70 UPD66 UPD42 MOV42 MOV42 INS42 INS74 INS43 INS85 INS74 UPD42 UPD66 INS42 INS66 INS66 UPD43 INS44 INS42 INS8 INS32 MOV43 MOV5 INS44 INS42 INS8 INS43 INS43 INS43 INS42 MOV43 INS5 UPD42 INS43 INS42 INS60 INS25 MOV21 INS32 UPD42 MOV42 MOV3 UPD42 INS43 INS42 MOV54 UPD42 MOV42 MOV42 INS42 INS43 INS85 INS42 INS43 INS59 INS27 INS8 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS53 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 MOV27 INS42 INS42 MOV43 INS59 INS14 MOV52 UPD42 MOV42 MOV32 INS42 INS42 INS27 INS43 INS42 INS42 INS45 INS42 INS74 INS42 MOV43 INS5 INS43 INS85 INS42 INS42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL22 DEL42 DEL7 DEL40 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL43 DEL42 DEL44 DEL42 DEL45 DEL59 DEL60 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL11