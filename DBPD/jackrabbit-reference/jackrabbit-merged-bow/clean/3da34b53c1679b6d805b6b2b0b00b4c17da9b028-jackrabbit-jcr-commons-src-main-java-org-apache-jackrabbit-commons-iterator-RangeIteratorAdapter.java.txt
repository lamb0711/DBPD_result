JCR-97: Use spaces instead of tabs in o.a.j.commons.iterator

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@543808 13f79535-47bb-0310-9956-ffa450edef68

-	/**
-	 * The adapted iterator instance.
-	 */
-	private final Iterator iterator;
+    /**
+     * The adapted iterator instance.
+     */
+    private final Iterator iterator;
-	/**
-	 * Number of elements in the adapted iterator, or -1 if unknown.
-	 */
-	private long size;
+    /**
+     * Number of elements in the adapted iterator, or -1 if unknown.
+     */
+    private long size;
-	/**
-	 * Current position of the iterator.
-	 */
-	private long position;
+    /**
+     * Current position of the iterator.
+     */
+    private long position;
-	/**
-	 * Creates an adapter for the given iterator of the given size.
-	 *
-	 * @param iterator adapted iterator
-	 * @param size size of the iterator, or -1 if unknown
-	 */
-	public RangeIteratorAdapter(Iterator iterator, long size) {
-		this.iterator = iterator;
-		this.size = size;
-		this.position = 0;
-	}
+    /**
+     * Creates an adapter for the given iterator of the given size.
+     *
+     * @param iterator adapted iterator
+     * @param size size of the iterator, or -1 if unknown
+     */
+    public RangeIteratorAdapter(Iterator iterator, long size) {
+        this.iterator = iterator;
+        this.size = size;
+        this.position = 0;
+    }
-	/**
-	 * Creates an adapter for the given iterator of unknown size.
-	 *
-	 * @param iterator adapted iterator
-	 */
-	public RangeIteratorAdapter(Iterator iterator) {
-		this(iterator, -1);
-	}
+    /**
+     * Creates an adapter for the given iterator of unknown size.
+     *
+     * @param iterator adapted iterator
+     */
+    public RangeIteratorAdapter(Iterator iterator) {
+        this(iterator, -1);
+    }
-	/**
-	 * Creates a {@link RangeIterator} for the given collection.
-	 *
-	 * @param collection the collection to iterate
-	 */
-	public RangeIteratorAdapter(Collection collection) {
-		this(collection.iterator(), collection.size());
-	}
+    /**
+     * Creates a {@link RangeIterator} for the given collection.
+     *
+     * @param collection the collection to iterate
+     */
+    public RangeIteratorAdapter(Collection collection) {
+        this(collection.iterator(), collection.size());
+    }
-	//-------------------------------------------------------< RangeIterator >
+    //-------------------------------------------------------< RangeIterator >
-	/**
-	 * Returns the current position of the iterator.
-	 *
-	 * @return iterator position
-	 */
-	public long getPosition() {
-		return position;
-	}
+    /**
+     * Returns the current position of the iterator.
+     *
+     * @return iterator position
+     */
+    public long getPosition() {
+        return position;
+    }
-	/**
-	 * Returns the size of the iterator.
-	 *
-	 * @return iterator size, or -1 if unknown
-	 */
-	public long getSize() {
-		return size;
-	}
+    /**
+     * Returns the size of the iterator.
+     *
+     * @return iterator size, or -1 if unknown
+     */
+    public long getSize() {
+        return size;
+    }
-	/**
-	 * Skips the given number of elements.
-	 *
-	 * @param n number of elements to skip
-	 * @throws IllegalArgumentException if n is negative
-	 * @throws NoSuchElementException if skipped past the last element
-	 */
-	public void skip(long n)
-			throws IllegalArgumentException, NoSuchElementException {
-		if (n < 0) {
-			throw new IllegalArgumentException("skip(" + n + ")");
-		}
-		for (long i = 0; i < n; i++) {
-			next();
-		}
-	}
+    /**
+     * Skips the given number of elements.
+     *
+     * @param n number of elements to skip
+     * @throws IllegalArgumentException if n is negative
+     * @throws NoSuchElementException if skipped past the last element
+     */
+    public void skip(long n)
+    throws IllegalArgumentException, NoSuchElementException {
+        if (n < 0) {
+            throw new IllegalArgumentException("skip(" + n + ")");
+        }
+        for (long i = 0; i < n; i++) {
+            next();
+        }
+    }
-	//------------------------------------------------------------< Iterator >
+    //------------------------------------------------------------< Iterator >
-	/**
-	 * Checks if this iterator has more elements. If there are no more
-	 * elements and the size of the iterator is unknown, then the size is
-	 * set to the current position. 
-	 *
-	 * @return <code>true</code> if this iterator has more elements,
-	 *         <code>false</code> otherwise
-	 */
-	public boolean hasNext() {
-		if (iterator.hasNext()) {
-			return true;
-		} else {
-			if (size == -1) {
-				size = position;
-			}
-			return false;
-		}
-	}
+    /**
+     * Checks if this iterator has more elements. If there are no more
+     * elements and the size of the iterator is unknown, then the size is
+     * set to the current position. 
+     *
+     * @return <code>true</code> if this iterator has more elements,
+     *         <code>false</code> otherwise
+     */
+    public boolean hasNext() {
+        if (iterator.hasNext()) {
+            return true;
+        } else {
+            if (size == -1) {
+                size = position;
+            }
+            return false;
+        }
+    }
-	/**
-	 * Returns the next element in this iterator and advances the iterator
-	 * position. If there are no more elements and the size of the iterator
-	 * is unknown, then the size is set to the current position.
-	 *
-	 * @return next element
-	 * @throws NoSuchElementException if there are no more elements
-	 */
-	public Object next() throws NoSuchElementException {
-		try {
-			Object next = iterator.next();
-			position++;
-			return next;
-		} catch (NoSuchElementException e) {
-			if (size == -1) {
-				size = position;
-			}
-			throw e;
-		}
-	}
+    /**
+     * Returns the next element in this iterator and advances the iterator
+     * position. If there are no more elements and the size of the iterator
+     * is unknown, then the size is set to the current position.
+     *
+     * @return next element
+     * @throws NoSuchElementException if there are no more elements
+     */
+    public Object next() throws NoSuchElementException {
+        try {
+            Object next = iterator.next();
+            position++;
+            return next;
+        } catch (NoSuchElementException e) {
+            if (size == -1) {
+                size = position;
+            }
+            throw e;
+        }
+    }
-	/**
-	 * Removes the previously retrieved element. Decreases the current
-	 * position and size of this iterator.
-	 *
-	 * @throws UnsupportedOperationException if removes are not permitted
-	 * @throws IllegalStateException if there is no previous element to remove
-	 */
-	public void remove()
-			throws UnsupportedOperationException, IllegalStateException {
-		iterator.remove();
-		position--;
-		if (size != -1) {
-			size--;
-		}
-	}
+    /**
+     * Removes the previously retrieved element. Decreases the current
+     * position and size of this iterator.
+     *
+     * @throws UnsupportedOperationException if removes are not permitted
+     * @throws IllegalStateException if there is no previous element to remove
+     */
+    public void remove()
+    throws UnsupportedOperationException, IllegalStateException {
+        iterator.remove();
+        position--;
+        if (size != -1) {
+            size--;
+        }
+    }

