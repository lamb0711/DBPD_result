Webdav Simple: Delegate PROPPATCH to (extended) IOHandlers

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431546 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.server.io.AbstractExportContext;
-import org.apache.jackrabbit.util.ISO9075;
+import org.apache.jackrabbit.server.io.PropertyManager;
+import org.apache.jackrabbit.server.io.PropertyImportContext;
+import org.apache.jackrabbit.server.io.IOListener;
+import org.apache.jackrabbit.server.io.PropertyExportContext;
+import org.apache.jackrabbit.server.io.AbstractExportContext;
+import org.apache.jackrabbit.server.io.DefaultIOListener;
-import org.apache.jackrabbit.webdav.xml.Namespace;
-import javax.jcr.NamespaceException;
-import javax.jcr.NamespaceRegistry;
-import javax.jcr.Property;
-import javax.jcr.PropertyIterator;
-import javax.jcr.nodetype.PropertyDefinition;
+import java.util.Map;
+import java.util.Collections;
+    private PropertyManager propManager;
+        this.propManager = config.getPropertyManager();
-            ioManager.exportContent(new PropertyExportCtx(), this);
-        } catch (IOException e) {
-            // should not occure....
+            propManager.exportProperties(getPropertyExportContext(), isCollection());
+        } catch (RepositoryException e) {
+            log.warn("Error while accessing resource properties", e);
+        // set (or reset) fundamental properties
-        // non-protected JCR properties defined on the underlying jcr node
-        try {
-            PropertyIterator it = node.getProperties();
-            while (it.hasNext()) {
-                Property p = it.nextProperty();
-                String pName = p.getName();
-                PropertyDefinition def = p.getDefinition();
-                if (def.isMultiple() || isFilteredItem(p)) {
-                    log.debug("Property '" + pName + "' not added to webdav property set (either multivalue or filtered).");
-                    continue;
-                }
-                DavPropertyName name = getDavName(pName, node.getSession());
-                String value = p.getValue().getString();
-                properties.add(new DefaultDavProperty(name, value, def.isProtected()));
-            }
-        } catch (RepositoryException e) {
-            log.error("Unexpected error while retrieving properties: " + e.getMessage());
-        }
-        if (isLocked(this)) {
-            throw new DavException(DavServletResponse.SC_LOCKED);
-        }
-        if (!exists()) {
-            throw new DavException(DavServletResponse.SC_NOT_FOUND);
-        }
-        try {
-            setJcrProperty(property);
-            node.save();
-        } catch (RepositoryException e) {
-            // revert any changes made so far an throw exception
-            JcrDavException je = new JcrDavException(e);
-            try {
-                node.refresh(false);
-            } catch (RepositoryException re) {
-                // should not happen...
-            }
-            throw je;
-        }
+        alterProperty(property);
+        alterProperty(propertyName);
+    }
+
+    private void alterProperty(Object prop) throws DavException {
-            removeJcrProperty(propertyName);
-            node.save();
+            List l = new ArrayList(1);
+            l.add(prop);
+            alterProperties(l);
+            Map failure = propManager.alterProperties(getPropertyImportContext(l), isCollection());
+            if (failure.isEmpty()) {
+                node.save();
+            } else {
+                node.refresh(false);
+                // TODO: retrieve specific error from failure-map
+                throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR);
+            }
+            // revert any changes made so far
-
-        boolean success = true;
-
-        // loop over List and remember all properties and propertyNames
-        // that have successfully been altered
-        List successList = new ArrayList();
-        Iterator it = changeList.iterator();
-        while (it.hasNext()) {
-            Object propEntry = it.next();
-            if (propEntry instanceof DavPropertyName) {
-                DavPropertyName propName = (DavPropertyName)propEntry;
-                try {
-                    removeJcrProperty(propName);
-                    successList.add(propName);
-                } catch (RepositoryException e) {
-                    msr.add(propName, new JcrDavException(e).getErrorCode());
-                    success = false;
-                }
-            } else if (propEntry instanceof DavProperty) {
-                DavProperty prop = (DavProperty)propEntry;
-                try {
-                    setJcrProperty(prop);
-                    successList.add(prop);
-                } catch (RepositoryException e) {
-                    msr.add(prop.getName(), new JcrDavException(e).getErrorCode());
-                    success = false;
-                }
-            } else {
-                throw new IllegalArgumentException("unknown object in change list: " + propEntry.getClass().getName());
-            }
-        }
-
-            if (success) {
+            Map failures = propManager.alterProperties(getPropertyImportContext(changeList), isCollection());
+            if (failures.isEmpty()) {
-            it = successList.iterator();
+            Iterator it = changeList.iterator();
-                int status = (success) ? DavServletResponse.SC_OK : DavServletResponse.SC_FAILED_DEPENDENCY;
-                if (o instanceof DavProperty) {
-                    msr.add(((DavProperty) o).getName(), status);
+                int statusCode;
+                if (failures.containsKey(o)) {
+                    Object error = failures.get(o);
+                    statusCode = (error instanceof RepositoryException)
+                        ? new JcrDavException((RepositoryException)o).getErrorCode()
+                        : DavServletResponse.SC_INTERNAL_SERVER_ERROR;
-                    msr.add((DavPropertyName) o, status);
+                    statusCode = (failures.isEmpty()) ? DavServletResponse.SC_OK : DavServletResponse.SC_FAILED_DEPENDENCY;
+                }
+                if (o instanceof DavProperty) {
+                    msr.add(((DavProperty) o).getName(), statusCode);
+                } else {
+                    msr.add((DavPropertyName) o, statusCode);
+     * Returns a new <code>PropertyImportContext</code>.
+     *
+     * @param changeList
+     * @return
+     */
+    protected PropertyImportContext getPropertyImportContext(List changeList) {
+        return new ProperyImportCtx(changeList);
+    }
+
+    /**
+     * Returns a new <code>PropertyExportContext</code>.
+     *
+     * @return
+     */
+    protected PropertyExportContext getPropertyExportContext() {
+        return new PropertyExportCtx();
+    }
+
+    /**
-    /**
-     * Builds a webdav property name from the given jcrName. In case the jcrName
-     * contains a namespace prefix that would conflict with any of the predefined
-     * webdav namespaces a new prefix is assigned.<br>
-     * Please note, that the local part of the jcrName is checked for XML
-     * compatibility by calling {@link ISO9075#encode(String)}
-     *
-     * @param jcrName
-     * @param session
-     * @return a <code>DavPropertyName</code> for the given jcr name.
-     */
-    private DavPropertyName getDavName(String jcrName, Session session) throws RepositoryException {
-        // make sure the local name is xml compliant
-        String localName = ISO9075.encode(Text.getLocalName(jcrName));
-        String prefix = Text.getNamespacePrefix(jcrName);
-        String uri = session.getNamespaceURI(prefix);
-        // check for conflicts with reserved webdav-namespaces
-        if (reservedNamespaces.containsKey(prefix) && !reservedNamespaces.get(prefix).equals(uri)) {
-            prefix = prefix + "0";
-        }
-        Namespace namespace = Namespace.getNamespace(prefix, uri);
-        DavPropertyName name = DavPropertyName.create(localName, namespace);
-        return name;
-    }
-
-    /**
-     * Build jcr property name from dav property name. If the property name
-     * defines a namespace uri, that has not been registered yet, an attempt
-     * is made to register the uri with the prefix defined. Note, that no
-     * extra effort is made to generated a unique prefix.
-     *
-     * @param propName
-     * @return jcr name
-     * @throws RepositoryException
-     */
-    private String getJcrName(DavPropertyName propName) throws RepositoryException {
-        // remove any encoding necessary for xml compliance
-        String pName = ISO9075.decode(propName.getName());
-        Namespace propNamespace = propName.getNamespace();
-        if (!Namespace.EMPTY_NAMESPACE.equals(propNamespace)) {
-            Session s = getJcrSession();
-            String prefix;
-            String emptyPrefix = Namespace.EMPTY_NAMESPACE.getPrefix();
-            try {
-                // lookup 'prefix' in the session-ns-mappings / namespace-registry
-                prefix = s.getNamespacePrefix(propNamespace.getURI());
-            } catch (NamespaceException e) {
-                // namespace uri has not been registered yet
-                NamespaceRegistry nsReg = s.getWorkspace().getNamespaceRegistry();
-                prefix = propNamespace.getPrefix();
-                // avoid trouble with default namespace
-                if (emptyPrefix.equals(prefix)) {
-                    prefix = "_pre" + nsReg.getPrefixes().length + 1;
-                }
-                // NOTE: will fail if prefix is already in use in the namespace registry
-                nsReg.registerNamespace(prefix, propNamespace.getURI());
-            }
-            if (prefix != null && !emptyPrefix.equals(prefix)) {
-                pName = prefix + ":" + pName;
-            }
-        }
-        return pName;
-    }
-
-    /**
-     * @param property
-     * @throws RepositoryException
-     */
-    private void setJcrProperty(DavProperty property) throws RepositoryException {
-        // Retrieve the property value. Note, that a 'null' value is replaced
-        // by empty string, since setting a jcr property value to 'null'
-        // would be equivalent to its removal.
-        String value = "";
-        if (property.getValue() != null) {
-            value = property.getValue().toString();
-        }
-        node.setProperty(getJcrName(property.getName()), value);
-    }
-
-    /**
-     * @param propertyName
-     * @throws RepositoryException
-     */
-    private void removeJcrProperty(DavPropertyName propertyName) throws RepositoryException {
-        String jcrName = getJcrName(propertyName);
-        if (node.hasProperty(jcrName)) {
-            node.getProperty(jcrName).remove();
-        }
-        // removal of non existing property succeeds
-    }
-
-    private class PropertyExportCtx extends AbstractExportContext {
+    private class PropertyExportCtx extends AbstractExportContext implements PropertyExportContext {
-            if (propertyName instanceof DavPropertyName) {
-                DavPropertyName pName = (DavPropertyName)propertyName;
+            if (propertyValue == null) {
+                log.warn("Ignore 'setProperty' for " + propertyName + "with null value.");
+                return;
+            }
+
+            if (propertyValue instanceof DavProperty) {
+                properties.add((DavProperty)propertyValue);
+            } else {
+                DavPropertyName pName;
+                if (propertyName instanceof DavPropertyName) {
+                    pName = (DavPropertyName)propertyName;
+                } else {
+                    // create property name with default DAV: namespace
+                    pName = DavPropertyName.create(propertyName.toString());
+                }
+
+    private class ProperyImportCtx implements PropertyImportContext {
+
+        private final IOListener ioListener = new DefaultIOListener(log);
+        private final List changeList;
+        private boolean completed;
+
+        private ProperyImportCtx(List changeList) {
+            this.changeList = changeList;
+        }
+
+        /**
+         * @see PropertyImportContext#getImportRoot()
+         */
+        public Item getImportRoot() {
+            return node;
+        }
+
+        /**
+         * @see PropertyImportContext#getChangeList()
+         */
+        public List getChangeList() {
+            return Collections.unmodifiableList(changeList);
+        }
+
+        public IOListener getIOListener() {
+            return ioListener;
+        }
+
+        public boolean hasStream() {
+            return false;
+        }
+
+        /**
+         * @see PropertyImportContext#informCompleted(boolean)
+         */
+        public void informCompleted(boolean success) {
+            checkCompleted();
+            completed = true;
+        }
+
+        /**
+         * @see PropertyImportContext#isCompleted()
+         */
+        public boolean isCompleted() {
+            return completed;
+        }
+
+        /**
+         * @throws IllegalStateException if the context is already completed.
+         * @see #isCompleted()
+         * @see #informCompleted(boolean)
+         */
+        private void checkCompleted() {
+            if (completed) {
+                throw new IllegalStateException("PropertyImportContext has already been consumed.");
+            }
+        }
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS55 INS83 INS43 INS59 MOV54 MOV29 MOV83 MOV39 UPD42 MOV42 MOV44 MOV43 INS8 MOV29 INS83 INS39 INS42 MOV44 MOV43 INS8 UPD83 UPD42 INS44 INS43 UPD83 UPD43 UPD42 MOV29 UPD83 MOV83 UPD43 MOV43 UPD42 MOV42 MOV8 INS43 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 INS42 INS42 INS21 MOV21 MOV21 INS43 INS42 INS42 UPD42 UPD43 UPD42 INS41 UPD42 INS41 INS42 UPD42 MOV42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 MOV29 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS29 INS83 INS39 INS42 INS8 UPD42 INS7 INS8 INS42 UPD66 UPD42 UPD42 INS14 UPD66 MOV14 INS25 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 MOV21 INS65 UPD42 MOV42 INS41 INS65 INS42 INS41 INS42 INS41 INS41 UPD65 INS39 INS42 INS21 MOV21 INS65 INS41 INS65 UPD65 UPD65 INS22 INS32 MOV21 UPD42 UPD42 UPD42 UPD42 INS60 INS21 INS60 INS25 INS60 MOV60 INS43 INS42 INS27 INS8 MOV62 INS8 INS43 INS42 UPD42 MOV42 INS68 INS42 INS68 INS32 INS42 INS9 INS68 INS32 INS68 INS42 INS42 INS66 INS68 INS68 INS42 INS52 INS42 INS42 INS42 MOV43 INS59 INS32 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS32 UPD42 MOV42 INS42 INS33 INS21 INS41 UPD42 INS21 INS25 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS69 UPD42 MOV42 UPD42 INS9 INS42 INS42 INS42 INS42 INS69 INS53 UPD42 INS42 INS32 INS32 INS42 INS14 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV21 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS32 INS32 MOV43 MOV62 INS8 INS8 INS52 INS42 INS39 INS39 INS14 INS42 UPD42 MOV42 UPD42 INS45 MOV42 MOV43 INS34 INS42 INS42 INS32 INS32 INS32 INS14 INS42 INS42 INS32 INS32 MOV39 INS59 INS32 INS8 INS8 INS42 INS42 INS27 INS42 INS42 MOV11 INS21 INS21 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS40 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS60 INS21 INS21 INS45 INS42 INS45 UPD42 INS7 INS7 INS42 INS42 MOV43 INS59 INS7 INS7 INS42 MOV11 INS42 INS32 INS42 INS32 INS42 INS16 INS42 INS16 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS36 INS32 INS40 MOV36 MOV40 MOV40 INS42 INS42 INS62 INS14 INS42 INS32 INS42 MOV43 MOV43 INS11 INS42 INS42 INS42 MOV43 INS42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL8 DEL45 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL9 DEL42 DEL52 DEL32 DEL42 DEL43 DEL40 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL38 DEL42 DEL43 DEL40 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL61 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL16 DEL59 DEL60 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL42 DEL65 DEL66 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL45 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL66 DEL66 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL42 DEL42 DEL52 DEL32 DEL21 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL43 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL22 DEL34 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL32 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL65 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21