JCR-2715: Improved join query performance

Optimize handling of cases where the other join source produces no results.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1023801 13f79535-47bb-0310-9956-ffa450edef68

+        RowIterator joinRows;
-            return mergeRight(map, rightRows);
+            joinRows = mergeRight(map, rightRows);
-            return mergeLeft(leftRows, map, outer);
+            joinRows = mergeLeft(leftRows, map, outer);
+        return new SimpleQueryResult(columnNames, selectorNames, joinRows);
-    private QueryResult mergeLeft(
+    private RowIterator mergeLeft(
-        System.out.println("Available right matches " + rightRowMap.keySet());
-        List<Row> rows = new ArrayList<Row>();
-        for (Row leftRow : new RowIterable(leftRows)) {
-            System.out.println("Finding matchers for left row " + leftRow);
-            for (String value : getLeftValues(leftRow)) {
-                System.out.println(" - checking for matches for " + value);
-                List<Row> rightRows = rightRowMap.get(value);
-                if (rightRows != null) {
-                    for (Row rightRow : rightRows) {
-                        System.out.println(" -> found matching row " + rightRow);
-                        rows.add(mergeRow(leftRow, rightRow));
+        if (!rightRowMap.isEmpty()) {
+            List<Row> rows = new ArrayList<Row>();
+            for (Row leftRow : new RowIterable(leftRows)) {
+                for (String value : getLeftValues(leftRow)) {
+                    List<Row> rightRows = rightRowMap.get(value);
+                    if (rightRows != null) {
+                        for (Row rightRow : rightRows) {
+                            rows.add(mergeRow(leftRow, rightRow));
+                        }
+                    } else if (outer) {
+                        rows.add(mergeRow(leftRow, null));
-                } else if (outer) {
-                    rows.add(mergeRow(leftRow, null));
+            return new RowIteratorAdapter(rows);
+        } else if (outer) {
+            return new RowIteratorAdapter(leftRows) {
+                @Override
+                public Object next() {
+                    return mergeRow((Row) super.next(), null);
+                }
+            };
+        } else {
+            return new RowIteratorAdapter(Collections.emptySet());
-        return new SimpleQueryResult(
-                columnNames, selectorNames, new RowIteratorAdapter(rows));
-    private QueryResult mergeRight(
+    private RowIterator mergeRight(
-        List<Row> rows = new ArrayList<Row>();
-        for (Row rightRow : new RowIterable(rightRows)) {
-            for (String value : getRightValues(rightRow)) {
-                List<Row> leftRows = leftRowMap.get(value);
-                if (leftRows != null) {
-                    for (Row leftRow : leftRows) {
-                        rows.add(mergeRow(leftRow, rightRow));
+        if (leftRowMap.isEmpty()) {
+            List<Row> rows = new ArrayList<Row>();
+            for (Row rightRow : new RowIterable(rightRows)) {
+                for (String value : getRightValues(rightRow)) {
+                    List<Row> leftRows = leftRowMap.get(value);
+                    if (leftRows != null) {
+                        for (Row leftRow : leftRows) {
+                            rows.add(mergeRow(leftRow, rightRow));
+                        }
+                    } else {
+                        rows.add(mergeRow(null, rightRow));
-                } else {
-                    rows.add(mergeRow(null, rightRow));
+            return new RowIteratorAdapter(rows);
+        } else {
+            return new RowIteratorAdapter(rightRows) {
+                @Override
+                public Object next() {
+                    return mergeRow(null, (Row) super.next());
+                }
+            };
-        return new SimpleQueryResult(
-                columnNames, selectorNames, new RowIteratorAdapter(rows));
-     * @throws RepositoryException if the rows can't be joined
-    private Row mergeRow(Row left, Row right) throws RepositoryException {
+    private Row mergeRow(Row left, Row right) {
-                columns, evaluator, left, leftSelectors, right, rightSelectors);
+                columns, evaluator,
+                left, leftSelectors, right, rightSelectors);

UPD43 INS8 UPD43 INS8 INS60 INS41 UPD42 INS25 UPD42 INS25 INS43 INS59 INS14 INS38 MOV8 INS25 INS32 MOV8 INS8 INS42 INS42 INS21 INS21 MOV43 INS42 INS42 INS42 INS32 INS42 INS8 INS8 INS42 INS42 INS41 INS7 INS7 INS42 INS42 MOV14 INS41 INS41 MOV14 INS14 INS42 MOV32 INS42 MOV32 INS14 INS14 INS43 INS42 INS1 INS43 INS42 INS1 INS43 INS32 INS42 INS31 INS42 INS31 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS41 INS42 INS42 INS41 INS32 INS32 INS42 INS33 INS11 INS42 INS11 INS33 INS43 INS48 INS43 INS48 INS42 INS42 INS42 INS42 DEL41 DEL41 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL66 DEL65 DEL42 DEL43