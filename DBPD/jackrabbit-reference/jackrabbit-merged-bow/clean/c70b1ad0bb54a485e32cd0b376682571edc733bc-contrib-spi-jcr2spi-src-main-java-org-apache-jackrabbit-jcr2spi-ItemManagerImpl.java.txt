work in progress

- javadoc
- minor naming improvement
- comments

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@470291 13f79535-47bb-0310-9956-ffa450edef68

- * There's one <code>ItemManagerImpl</code> instance per <code>Session</code>
- * instance. It is the factory for <code>Node</code> and <code>Property</code>
- * instances.
- * <p/>
- * The <code>ItemManagerImpl</code>'s responsabilities are:
- * <ul>
- * <li>providing access to <code>Item</code> instances by <code>ItemState</code>
- * whereas <code>Node</code> and <code>Item</code> are only providing relative access.
- * <li>returning the instance of an existing <code>Node</code> or <code>Property</code>,
- * given its absolute path.
- * <li>creating the per-session instance of a <code>Node</code>
- * or <code>Property</code> that doesn't exist yet and needs to be created first.
- * <li>guaranteeing that there aren't multiple instances representing the same
- * <code>Node</code> or <code>Property</code> associated with the same
- * <code>Session</code> instance.
- * <li>maintaining a cache of the item instances it created.
- * <li>respecting access rights of associated <code>Session</code> in all methods.
- * </ul>
- * <p/>
- * If the parent <code>Session</code> is an <code>XASession</code>, there is
- * one <code>ItemManagerImpl</code> instance per started global transaction.
+ * <code>ItemManagerImpl</code> implements the <code>ItemManager</code> interface.
-            // check privileges
-            checkAccess(itemState, true);
-            // check privileges
-            checkAccess(itemState, false);
-        checkAccess(parentState, true);
-        checkAccess(parentState, true);
-        checkAccess(parentState, true);
-        checkAccess(parentState, true);
-     *
-     * @param removeFromCache
-     * @throws RepositoryException
-     */
-    private void checkAccess(ItemState state, boolean removeFromCache) throws RepositoryException {
-        // check privileges
-        if (!session.getAccessManager().canRead(state)) {
-            if (removeFromCache) {
-                // clear cache
-                Item item = retrieveItem(state);
-                if (item != null) {
-                    evictItem(state);
-                }
-            }
-            throw new AccessDeniedException("Cannot read item: " + state);
-        }
-    }
-
-    /**
-     *
-     * @param state
-     * @return
+     * @return a new <code>Node</code> instance.
-     * 
-     * @return
-     * @throws RepositoryException
+     * @return a new <code>Property</code> instance.
-    private PropertyImpl createPropertyInstance(PropertyState state)
-            throws RepositoryException {
+    private PropertyImpl createPropertyInstance(PropertyState state) {

MOV29 UPD66 UPD65 MOV65 INS66 INS66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL65 DEL42 DEL65 DEL29 DEL42 DEL65 DEL42 DEL65 DEL42 DEL43