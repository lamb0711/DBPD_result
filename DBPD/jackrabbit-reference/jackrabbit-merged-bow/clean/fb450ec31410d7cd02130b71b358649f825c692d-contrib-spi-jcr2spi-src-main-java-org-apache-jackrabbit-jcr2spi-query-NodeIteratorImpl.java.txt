spi - QueryInfo: change to return QueryResultRowIterator
spi - QueryResultRow/QueryResultRowIterator: new
jcr2spi - Update implementation accordingly (note jcr:score now is returned with property type Double)
spi2dav - Minor changes to keep it compiling; full implementation of changed interface to be done


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497844 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.ItemManager;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.spi.IdIterator;
-import org.apache.jackrabbit.spi.NodeId;
-import org.apache.jackrabbit.spi.QueryInfo;
-import org.apache.jackrabbit.spi.ItemId;
-import org.slf4j.LoggerFactory;
-import org.slf4j.Logger;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+import javax.jcr.Item;
-import javax.jcr.Item;
-import java.util.NoSuchElementException;
-import java.util.Iterator;
+import org.apache.jackrabbit.jcr2spi.ItemManager;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
+import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.spi.QueryInfo;
+import org.apache.jackrabbit.spi.QueryResultRow;
+import org.apache.jackrabbit.spi.QueryResultRowIterator;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-    /** The query result info */
-    private final QueryInfo queryInfo;
-
-    /** The ItemId's of the result nodes */
-    private final IdIterator ids;
-
-    /** Index of the jcr:score column. */
-    private final int scoreIndex;
+    /** The QueryResultRows */
+    private final QueryResultRowIterator rows;
+    /** Score for the next node */
+    private double nextScore;
+
-        this.queryInfo = queryInfo;
-        this.ids = queryInfo.getNodeIds();
+        this.rows = queryInfo.getRows();
-        QName[] columnNames = queryInfo.getColumnNames();
-        int idx = -1;
-        for (int i = 0; i < columnNames.length; i++) {
-            if (columnNames[i].getNamespaceURI().equals(QName.NS_JCR_URI)
-                && columnNames[i].getLocalName().startsWith(QName.JCR_SCORE.getLocalName())) {
-                idx = i;
-                break;
-            }
-        }
-        if (idx == -1) {
-            throw new RepositoryException("no jcr:score column in query result");
-        }
-        this.scoreIndex = idx;
-    public float getScore() throws NoSuchElementException {
+    public double getScore() throws NoSuchElementException {
-        String scoreString = queryInfo.getValues(nextId)[scoreIndex];
-        try {
-            return Float.parseFloat(scoreString);
-        } catch (NumberFormatException e) {
-            throw new NoSuchElementException();
-        }
+        return nextScore;
-            ids.skip(skipNum - 1);
+            rows.skip(skipNum - 1);
-        if (ids.getSize() != -1) {
-            return ids.getSize() - invalid;
+        if (rows.getSize() != -1) {
+            return rows.getSize() - invalid;
-        while (next == null && ids.hasNext()) {
+        nextScore = 0;
+        
+        while (next == null && rows.hasNext()) {
-                ItemId id = ids.nextId();
-                if (!id.denotesNode()) {
-                    log.error("NodeId expected. Found PropertyId: " + id);
-                    continue;
-                }
-                nextId = (NodeId)id;
+                QueryResultRow row = rows.nextQueryResultRow();
+                nextId = row.getNodeId();
+                    nextScore = row.getScore();

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV23 UPD40 UPD40 UPD43 UPD39 UPD39 INS8 UPD42 UPD42 UPD42 MOV25 MOV41 INS21 UPD66 UPD66 INS42 UPD27 MOV27 INS7 INS32 INS42 INS34 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 INS32 INS21 UPD42 UPD42 INS42 INS42 INS7 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL2 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL34 DEL38 DEL27 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11