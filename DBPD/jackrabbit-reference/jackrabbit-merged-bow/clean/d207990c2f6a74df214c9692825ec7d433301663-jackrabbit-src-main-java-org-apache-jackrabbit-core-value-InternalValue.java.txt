- some minor javadoc cleanups
- InternalValue.hashCode() returns hash code of internal value object

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@389766 13f79535-47bb-0310-9956-ffa450edef68

-     * Returns the string representation of this internal value. If this is a
-     * <i>binary</i> value then the path of its backing file will be returned.
-     *
-     * @return string representation of this internal value
-     */
-    public String toString() {
-        if (type == PropertyType.DATE) {
-            return ISO8601.format((Calendar) val);
-        } else {
-            return val.toString();
-        }
-    }
-
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj instanceof InternalValue) {
-            InternalValue other = (InternalValue) obj;
-            return val.equals(other.val);
-        }
-        return false;
-    }
-
-    /**
-     * Returns zero to satisfy the Object equals/hashCode contract.
-     * This class is mutable and not meant to be used as a hash key.
-     *
-     * @return always zero
-     * @see Object#hashCode()
-     */
-    public int hashCode() {
-        return 0;
-    }
-
-    /**
+    //-------------------------------------------< java.lang.Object overrides >
+    /**
+     * Returns the string representation of this internal value.
+     *
+     * @return string representation of this internal value
+     */
+    public String toString() {
+        if (type == PropertyType.DATE) {
+            return ISO8601.format((Calendar) val);
+        } else {
+            return val.toString();
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof InternalValue) {
+            InternalValue other = (InternalValue) obj;
+            return val.equals(other.val);
+        }
+        return false;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public int hashCode() {
+        return val.hashCode();
+    }
+

MOV31 INS29 INS65 INS65 UPD66 INS65 INS65 INS32 INS42 INS42 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL34