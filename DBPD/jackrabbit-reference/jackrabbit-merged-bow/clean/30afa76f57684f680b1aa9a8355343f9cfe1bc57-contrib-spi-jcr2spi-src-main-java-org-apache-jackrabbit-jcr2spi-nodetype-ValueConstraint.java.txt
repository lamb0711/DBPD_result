work in progress

- javadoc
- remove some DIFF comments

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432265 13f79535-47bb-0310-9956-ffa450edef68

-    final String qualifiedDefinition;
+    private final String qualifiedDefinition;
+     * In other words: subclasses, that need to make a conversion to JCR value
+     * must overwrite this and return a value that has all qualified names
+     * and path elements resolved.
-    // DIFF JACKRABBIT: added method
+     * By default the qualified definition is the same as the JCR definition.
+     *
-    //-------------------------------------------< java.lang.Object overrides >
+    //-----------------------------------------< java.lang.Object overrides >---
-    //--------------------------------------------------------------------------
-    // DIFF JACKRABBIT: method added
+    //-----------------------------------< static factory and check methods >---
-            throw new IllegalArgumentException("illegal definition (null)");
+            throw new IllegalArgumentException("Illegal definition (null) for ValueConstraint.");
-                throw new IllegalArgumentException("unknown/unsupported target type for constraint: "
-                        + PropertyType.nameFromValue(type));
+                throw new IllegalArgumentException("Unknown/unsupported target type for constraint: " + PropertyType.nameFromValue(type));
-    // DIFF JACKRABBIT: moved from EffectiveNodeType
+//---------------------------------------------< Subclass BooleanConstraint >---
-    private void check(boolean bool) throws ConstraintViolationException {
-        if (bool != reqBool) {
-            throw new ConstraintViolationException("'" + bool + "' does not satisfy the constraint '" + qualifiedDefinition + "'");
-        }
-    }
-
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '"  + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '"  + getQualifiedDefinition() + "'");
-                check(Boolean.valueOf(value.getString()).booleanValue());
+                boolean b = Boolean.valueOf(value.getString()).booleanValue();
+                if (b != reqBool) {
+                    throw new ConstraintViolationException("'" + b + "' does not satisfy the constraint '" + getQualifiedDefinition() + "'");
+                }
+//----------------------------------------------< Subclass StringConstraint >---
-    private void check(String text) throws ConstraintViolationException {
-        if (text == null) {
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
-        }
-        Matcher matcher = pattern.matcher(text);
-        if (!matcher.matches()) {
-            throw new ConstraintViolationException("'" + text  + "' does not satisfy the constraint '" + qualifiedDefinition + "'");
-        }
-    }
-
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                check(value.toString());
+                String text = value.toString();
+                Matcher matcher = pattern.matcher(text);
+                if (!matcher.matches()) {
+                    throw new ConstraintViolationException("'" + text  + "' does not satisfy the constraint '" + getQualifiedDefinition() + "'");
+                }
+//---------------------------------------------< Subclass NumericConstraint >---
-    private void check(Double number) throws ConstraintViolationException {
-        if (number == null) {
-            throw new ConstraintViolationException("null value does not satisfy the constraint '"
-                    + qualifiedDefinition + "'");
-        }
-        check(number.doubleValue());
-    }
-
-    private void check(Long number) throws ConstraintViolationException {
-        if (number == null) {
-            throw new ConstraintViolationException("null value does not satisfy the constraint '"
-                    + qualifiedDefinition + "'");
-        }
-        check(number.doubleValue());
-    }
-
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-                    + qualifiedDefinition + "'");
+                    + getQualifiedDefinition() + "'");
+//------------------------------------------------< Subclass DateConstraint >---
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
+//------------------------------------------------< Subclass PathConstraint >---
+    /**
+     * Uses {@link PathFormat#format(Path, NamespaceResolver)} to convert the
+     * qualified <code>Path</code> into a JCR path.
+     *
+     * @see ValueConstraint#getDefinition(NamespaceResolver)
+     */
-            return qualifiedDefinition;
+            return getQualifiedDefinition();
+     * @see ValueConstraint#getQualifiedDefinition()
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                                + qualifiedDefinition + "'");
+                                + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
+//------------------------------------------------< Subclass NameConstraint >---
-    final QName name;
+
+    private final QName name;
+    /**
+     * Uses {@link NameFormat#format(QName, NamespaceResolver)} to convert the
+     * qualified <code>QName</code> into a JCR name.
+     *
+     * @see ValueConstraint#getDefinition(NamespaceResolver)
+     */
-            return qualifiedDefinition;
+            return getQualifiedDefinition();
+     * @see ValueConstraint#getQualifiedDefinition()
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
+//-------------------------------------------< Subclass ReferenceConstraint >---
-    final QName ntName;
+
+    private final QName ntName;
+    /**
+     * Uses {@link NameFormat#format(QName, NamespaceResolver)} to convert the
+     * qualified nodetype name into a JCR name.
+     *
+     * @see ValueConstraint#getDefinition(NamespaceResolver)
+     */
-            return qualifiedDefinition;
+            return getQualifiedDefinition();
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("Null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                // @todo check REFERENCE value constraint (requires a session)
+                // TODO check REFERENCE value constraint (requires a session)

INS83 INS29 INS29 MOV43 INS29 INS29 INS29 INS29 INS83 INS29 INS29 INS83 INS29 INS29 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS66 INS66 INS66 INS66 INS68 INS60 INS25 INS68 INS60 MOV60 INS25 INS68 INS68 INS66 INS65 INS66 INS66 INS68 INS68 INS68 INS66 INS65 INS66 INS66 INS68 INS68 INS68 INS66 INS65 INS66 INS66 INS68 INS68 INS42 INS42 INS69 INS39 INS59 INS27 INS8 INS42 INS42 INS69 MOV43 INS59 MOV38 INS8 INS42 INS42 INS69 INS42 INS42 INS69 INS68 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS69 INS68 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS69 INS68 INS42 INS42 INS69 INS42 INS42 INS69 INS43 INS42 MOV32 INS42 INS42 INS53 INS43 INS42 MOV32 INS53 INS43 INS43 INS42 INS42 INS69 INS69 INS43 INS43 INS42 INS42 INS69 INS69 INS43 INS43 INS42 INS42 INS69 INS69 INS43 INS43 UPD45 UPD45 INS42 INS14 INS42 MOV43 INS14 INS42 MOV43 MOV43 INS42 MOV43 INS43 INS43 INS42 INS32 INS42 INS43 INS43 INS42 INS32 INS42 MOV43 INS43 INS43 INS42 INS32 INS42 INS32 MOV43 INS27 INS32 MOV43 INS27 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 UPD45 INS32 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL27 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42