- removed redundant methods
- some javadoc improvements/fixes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@372816 13f79535-47bb-0310-9956-ffa450edef68

-     * Returns the applicable child node definition for a child node with the
-     * specified name.
-     *
-     * @param nodeName
-     * @return
-     * @throws RepositoryException if no applicable child node definition
-     *                             could be found
-     */
-    public NodeDefinitionImpl getApplicableChildNodeDefinition(QName nodeName)
-            throws RepositoryException {
-        return getApplicableChildNodeDefinition(nodeName, null);
-    }
-
-    /**
-     * Returns the applicable child node definition for a child node with the
-     * specified name and node type.
-     *
-     * @param nodeName
-     * @param nodeTypeName
-     * @return
-     * @throws RepositoryException if no applicable child node definition
-     *                             could be found
-     */
-    public NodeDefinitionImpl getApplicableChildNodeDefinition(QName nodeName,
-                                                               QName nodeTypeName)
-            throws RepositoryException {
-        return ntMgr.getNodeDefinition(
-                ent.getApplicableChildNodeDef(nodeName, nodeTypeName).getId());
-    }
-
-    /**
-     * Returns the applicable property definition for a property with the
-     * specified name and type.
-     *
-     * @param propertyName
-     * @param type
-     * @param multiValued
-     * @return
-     * @throws RepositoryException if no applicable property definition
-     *                             could be found
-     */
-    public PropertyDefinitionImpl getApplicablePropertyDefinition(QName propertyName,
-                                                                  int type,
-                                                                  boolean multiValued)
-            throws RepositoryException {
-        return ntMgr.getPropertyDefinition(
-                ent.getApplicablePropertyDef(propertyName, type, multiValued).getId());
-    }
-
-    /**
-     * Tests if the value constraints defined in the property definition
-     * <code>def</code> are satisfied by the the specified <code>values</code>.
-     * <p/>
-     * Note that the <i>protected</i> flag is not checked. Also note that no
-     * type conversions are attempted if the type of the given values does not
-     * match the required type as specified in the given definition.
-     *
-     * @param def    The definiton of the property
-     * @param values An array of <code>InternalValue</code> objects.
-     * @throws ConstraintViolationException
-     * @throws RepositoryException
-     */
-    public static void checkSetPropertyValueConstraints(PropertyDefinitionImpl def,
-                                                        InternalValue[] values)
-            throws ConstraintViolationException, RepositoryException {
-        EffectiveNodeType.checkSetPropertyValueConstraints(def.unwrap(), values);
-    }
-
-    /**
-            PropertyDefinitionImpl def;
+            PropDef def;
-                def = getApplicablePropertyDefinition(name, value.getType(), false);
+                def = ent.getApplicablePropertyDef(name, value.getType(), false);
-                def = getApplicablePropertyDefinition(name, PropertyType.UNDEFINED, false);
+                def = ent.getApplicablePropertyDef(name, PropertyType.UNDEFINED, false);
-            checkSetPropertyValueConstraints(def, new InternalValue[]{internalValue});
+            EffectiveNodeType.checkSetPropertyValueConstraints(
+                    def, new InternalValue[]{internalValue});
-            PropertyDefinitionImpl def;
+            PropDef def;
-                def = getApplicablePropertyDefinition(name, type, true);
+                def = ent.getApplicablePropertyDef(name, type, true);
-                def = getApplicablePropertyDefinition(name, PropertyType.UNDEFINED, true);
+                def = ent.getApplicablePropertyDef(name, PropertyType.UNDEFINED, true);
-            checkSetPropertyValueConstraints(def, internalValues);
+            EffectiveNodeType.checkSetPropertyValueConstraints(def, internalValues);

INS60 MOV60 INS43 MOV59 UPD43 INS42 MOV44 INS42 UPD42 MOV44 INS42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 DEL66 DEL66 DEL65 DEL42 DEL65 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL60