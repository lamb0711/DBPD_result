JCR-2025: Optimize concurrent queries

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@756432 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.lucene.document.FieldSelector;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.commons.collections.map.LRUMap;
+import java.util.Collections;
+     * Maps document number to node UUID.
+     */
+    private final Map docNumber2uuid;
+
+    /**
+     * A cache of TermDocs that are regularly read from the index.
+     */
+    private final TermDocsCache termDocsCache;
+
+    /**
+        // limit cache to 1% of maxDoc(), but at least 10.
+        this.docNumber2uuid = Collections.synchronizedMap(new LRUMap(
+                Math.max(10, delegatee.maxDoc() / 100)));
+        this.termDocsCache = new TermDocsCache(delegatee, FieldNames.PROPERTIES);
+     * Uses the {@link #docNumber2uuid} cache for document lookups that are only
+     * interested in the {@link FieldSelectors#UUID}.
+     *
+     * @param n the document number.
+     * @param fieldSelector the field selector.
+     * @return the document.
+     * @throws CorruptIndexException if the index is corrupt.
+     * @throws IOException if an error occurs while reading from the index.
+     */
+    public Document document(int n, FieldSelector fieldSelector)
+            throws CorruptIndexException, IOException {
+        if (fieldSelector == FieldSelectors.UUID) {
+            Integer docNum = new Integer(n);
+            Document doc;
+            UUID uuid = (UUID) docNumber2uuid.get(docNum);
+            if (uuid == null) {
+                doc = super.document(n, fieldSelector);
+                uuid = UUID.fromString(doc.get(FieldNames.UUID));
+                docNumber2uuid.put(docNum, uuid);
+            } else {
+                doc = new Document();
+                doc.add(new Field(FieldNames.UUID, uuid.toString(),
+                        Field.Store.YES, Field.Index.NO_NORMS));
+            }
+            return doc;
+        } else {
+            return super.document(n, fieldSelector);
+        }
+    }
+
+    /**
-     * {@link #EMPTY} is returned.
+     * {@link EmptyTermDocs#INSTANCE} is returned.
-                        return EMPTY;
+                        return EmptyTermDocs.INSTANCE;
-        return super.termDocs(term);
+        return termDocsCache.termDocs(term);
-
-    /**
-     * Implements an empty TermDocs.
-     */
-    static final TermDocs EMPTY = new TermDocs() {
-
-        public void seek(Term term) {
-        }
-
-        public void seek(TermEnum termEnum) {
-        }
-
-        public int doc() {
-            return -1;
-        }
-
-        public int freq() {
-            return -1;
-        }
-
-        public boolean next() {
-            return false;
-        }
-
-        public int read(int[] docs, int[] freqs) {
-            return 0;
-        }
-
-        public boolean skipTo(int target) {
-            return false;
-        }
-
-        public void close() {
-        }
-    };

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 MOV29 UPD83 MOV83 MOV83 UPD43 MOV43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 MOV83 INS43 INS42 INS44 MOV44 INS43 INS43 INS8 UPD42 UPD42 MOV42 INS65 UPD42 MOV42 INS42 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS39 INS42 UPD43 UPD42 INS42 UPD42 MOV42 INS25 UPD66 INS66 INS7 INS7 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 UPD42 INS27 INS8 INS8 INS32 INS22 INS32 INS22 INS14 INS67 INS67 INS42 INS40 INS60 INS60 INS60 INS25 INS41 INS41 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS14 INS52 INS42 INS43 INS42 INS40 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS48 UPD42 INS42 INS43 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS27 INS43 INS42 INS43 INS32 INS7 INS7 INS32 INS7 INS32 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS48 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS40 INS32 INS40 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 DEL42 DEL42 DEL42 DEL48 DEL43 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL34 DEL38 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL34 DEL38 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL34 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL1 DEL14 DEL59 DEL23