JCR-255 Workspace operations (copy/clone) do not handle references correctly

consolidated code that maintains/enforces referential integrity (RI):
SharedItemStateManager.store(ChangeLog) is now the only place where
RI is maintained and enforced

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@326916 13f79535-47bb-0310-9956-ffa450edef68

-     * @throws RepositoryException
+     * @throws RepositoryException if an error occurs
-        // existing mixin's
-        HashSet set = new HashSet(((NodeState) state).getMixinTypeNames());
+        // mixin types
+        Set set = ((NodeState) state).getMixinTypeNames();
+        QName[] types = new QName[set.size() + 1];
+        set.toArray(types);
-        set.add(primaryTypeName);
+        types[types.length - 1] = primaryTypeName;
-            return ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+            return ntReg.getEffectiveNodeType(types);
-            String msg = "internal error: failed to build effective node type for node " + safeGetJCRPath();
+            String msg = "internal error: failed to build effective node type for node "
+                    + safeGetJCRPath();
-     * Same as {@link Node#addMixin(String)}, but takes a <code>QName</code>
-     * instad of a <code>String</code>.
+     * Same as {@link Node#addMixin(String)} except that it takes a
+     * <code>QName</code> instead of a <code>String</code>.
-     * Same as {@link Node#removeMixin(String)}, but takes a <code>QName</code>
-     * instad of a <code>String</code>.
+     * Same as {@link Node#removeMixin(String)} except that it takes a
+     * <code>QName</code> instead of a <code>String</code>.
-     * Same as {@link Node#isNodeType(String)}, but takes a <code>QName</code>
-     * instad of a <code>String</code>.
+     * Same as {@link Node#isNodeType(String)} except that it takes a
+     * <code>QName</code> instead of a <code>String</code>.
-
-        // build effective node type representing primary type incl. mixin's
-        // and check whether it includes the specified node type
-        NodeTypeRegistry ntReg = session.getNodeTypeManager().getNodeTypeRegistry();
-        // mixin's
-        Set typeSet = ((NodeState) state).getMixinTypeNames();
-        QName[] types = new QName[typeSet.size() + 1];
-        typeSet.toArray(types);
-        // primary type
-        types[types.length - 1] = primaryTypeName;
-
-        try {
-            EffectiveNodeType ent =
-                    ntReg.getEffectiveNodeType(types);
-            return ent.includesNodeType(ntName);
-        } catch (NodeTypeConflictException ntce) {
-            String msg = "internal error: failed to build effective node type of "
-                    + Arrays.asList(types);
-            log.debug(msg);
-            throw new RepositoryException(msg, ntce);
-        }
+        // check effective node type
+        return getEffectiveNodeType().includesNodeType(ntName);
-            NodeReferences refs = getOrCreateNodeReferences(targetId);
-            // refs.getReferences() returns a list of PropertyId's
-            List idList = refs.getReferences();
-            return new LazyItemIterator(itemMgr, idList);
+            if (stateMgr.hasNodeReferences(targetId)) {
+                NodeReferences refs = stateMgr.getNodeReferences(targetId);
+                // refs.getReferences() returns a list of PropertyId's
+                List idList = refs.getReferences();
+                return new LazyItemIterator(itemMgr, idList);
+            } else {
+                // there are no references, return empty iterator
+                return IteratorHelper.EMPTY;
+            }

INS8 INS60 MOV21 MOV21 MOV25 MOV25 INS41 INS66 UPD43 MOV5 INS59 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS32 UPD42 MOV32 INS42 MOV3 UPD42 UPD42 INS32 MOV42 MOV42 INS25 INS27 MOV42 INS32 INS8 INS8 MOV32 INS34 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV60 MOV60 MOV41 INS41 INS40 INS42 UPD42 DEL42 DEL43 DEL14 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL34 DEL27 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8