JCR-325: Applied the xml-refactoring.patch that puts the PropInfo instances in charge of applying the imported property values to content nodes.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@387961 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.util.Base64;
-import org.apache.jackrabbit.util.TransientFileFactory;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.Reader;
-    public void startNode(NodeInfo nodeInfo, List propInfos,
-                          NamespaceResolver nsContext)
+    public void startNode(NodeInfo nodeInfo, List propInfos)
-                QName propName = pi.getName();
-                TextValue[] tva = pi.getValues();
-                int type = pi.getType();
-
-                PropertyState prop = null;
-                PropDef def = null;
-
-                if (node.hasPropertyName(propName)) {
-                    // a property with that name already exists...
-                    PropertyId idExisting = new PropertyId(node.getNodeId(), propName);
-                    PropertyState existing =
-                            (PropertyState) itemOps.getItemState(idExisting);
-                    def = ntReg.getPropDef(existing.getDefinitionId());
-                    if (def.isProtected()) {
-                        // skip protected property
-                        log.debug("skipping protected property "
-                                + itemOps.safeGetJCRPath(idExisting));
-                        continue;
-                    }
-                    if (def.isAutoCreated() && (existing.getType() == type
-                            || type == PropertyType.UNDEFINED)
-                            && def.isMultiple() == existing.isMultiValued()) {
-                        // this property has already been auto-created,
-                        // no need to create it
-                        prop = existing;
-                    } else {
-                        throw new ItemExistsException(itemOps.safeGetJCRPath(existing.getPropertyId()));
-                    }
-                }
-                if (prop == null) {
-                    // there's no property with that name,
-                    // find applicable definition
-
-                    // multi- or single-valued property?
-                    if (tva.length == 1) {
-                        // could be single- or multi-valued (n == 1)
-                        def = itemOps.findApplicablePropertyDefinition(propName,
-                                type, node);
-                    } else {
-                        // can only be multi-valued (n == 0 || n > 1)
-                        def = itemOps.findApplicablePropertyDefinition(propName,
-                                type, true, node);
-                    }
-
-                    if (def.isProtected()) {
-                        // skip protected property
-                        log.debug("skipping protected property " + propName);
-                        continue;
-                    }
-
-                    // create new property
-                    prop = itemOps.createPropertyState(node, propName, type, def);
-                }
-
-                // check multi-valued characteristic
-                if ((tva.length == 0 || tva.length > 1) && !def.isMultiple()) {
-                    throw new ConstraintViolationException(itemOps.safeGetJCRPath(prop.getPropertyId())
-                            + " is not multi-valued");
-                }
-
-                // convert serialized values to InternalValue objects
-                InternalValue[] iva = new InternalValue[tva.length];
-                int targetType = def.getRequiredType();
-                if (targetType == PropertyType.UNDEFINED) {
-                    if (type == PropertyType.UNDEFINED) {
-                        targetType = PropertyType.STRING;
-                    } else {
-                        targetType = type;
-                    }
-                }
-                for (int i = 0; i < tva.length; i++) {
-                    TextValue tv = tva[i];
-                    if (targetType == PropertyType.BINARY) {
-                        // base64 encoded BINARY type;
-                        // decode using Reader
-                        try {
-                            if (tv.length() < 0x10000) {
-                                // < 65kb: deserialize BINARY type in memory
-                                ByteArrayOutputStream baos = new ByteArrayOutputStream();
-                                Base64.decode(tv.retrieve(), baos);
-                                // no need to close ByteArrayOutputStream
-                                //baos.close();
-                                iva[i] = InternalValue.create(baos.toByteArray());
-                            } else {
-                                // >= 65kb: deserialize BINARY type
-                                // using Reader and temporay file
-                                TransientFileFactory fileFactory = TransientFileFactory.getInstance();
-                                File tmpFile = fileFactory.createTransientFile("bin", null, null);
-                                FileOutputStream out = new FileOutputStream(tmpFile);
-                                Reader reader = tv.reader();
-                                try {
-                                    Base64.decode(reader, out);
-                                } finally {
-                                    reader.close();
-                                    out.close();
-                                }
-                                iva[i] = InternalValue.create(tmpFile);
-                            }
-                        } catch (IOException ioe) {
-                            String msg = "failed to decode binary value";
-                            log.debug(msg, ioe);
-                            throw new RepositoryException(msg, ioe);
-                        }
-                    } else {
-                        // retrieve serialized value
-                        String serValue;
-                        try {
-                            serValue = tv.retrieve();
-                        } catch (IOException ioe) {
-                            String msg = "failed to retrieve serialized value";
-                            log.debug(msg, ioe);
-                            throw new RepositoryException(msg, ioe);
-                        }
-
-                        // convert serialized value to InternalValue using
-                        // current namespace context of xml document
-                        iva[i] = InternalValue.create(serValue, targetType,
-                                nsContext);
-                    }
-                }
-
-                // set values
-                prop.setValues(iva);
-
-                // make sure property is valid according to its definition
-                itemOps.validate(prop);
-
-                if (prop.getType() == PropertyType.REFERENCE) {
-                    // store reference for later resolution
-                    refTracker.processedReference(prop);
-                }
-
-                // store property
-                itemOps.store(prop);
+                pi.apply(node, itemOps, ntReg, refTracker);

INS21 INS32 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL18 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL40 DEL27 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL18 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL34 DEL27 DEL40 DEL34 DEL27 DEL27 DEL36 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL33 DEL33 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21