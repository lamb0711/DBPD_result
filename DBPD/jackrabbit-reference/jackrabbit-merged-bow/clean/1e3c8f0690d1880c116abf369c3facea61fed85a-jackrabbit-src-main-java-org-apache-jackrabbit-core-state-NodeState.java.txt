JCR-307: improved performance when handling nodes with large number of child node entries
- reimplemented NodeState.ChildNodeEntries
- made ChildNodeEntry immutable again
- avoided unnecessary object creation when de-/serializing child node entries

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@373549 13f79535-47bb-0310-9956-ffa450edef68

-    protected Set mixinTypeNames = new HashSet();
+    protected HashSet mixinTypeNames = new HashSet();
-    protected Set propertyNames = new HashSet();
+    protected HashSet propertyNames = new HashSet();
-            mixinTypeNames = new HashSet(nodeState.getMixinTypeNames());
+            mixinTypeNames = (HashSet) nodeState.mixinTypeNames.clone();
-            propertyNames = new HashSet(nodeState.getPropertyNames());
-            childNodeEntries = new ChildNodeEntries();
-            childNodeEntries.addAll(nodeState.getChildNodeEntries());
+            propertyNames = (HashSet) nodeState.propertyNames.clone();
+            childNodeEntries = (ChildNodeEntries) nodeState.childNodeEntries.clone();
-    private static class ChildNodeEntries implements List, Serializable {
+    private static class ChildNodeEntries implements List, Cloneable, Serializable {
-        // map used for lookup by name (key=name, value=1st same-name sibling entry)
-        Map nameMap;
+        // map used for lookup by name
+        // (key=name, value=either a single entry or a list of sns entries)
+        HashMap nameMap;
-        ChildNodeEntry add(QName nodeName, String uuid) {
-            ChildNodeEntry sibling = (ChildNodeEntry) nameMap.get(nodeName);
-            while (sibling != null && sibling.getNextSibling() != null) {
-                sibling = sibling.getNextSibling();
+        ChildNodeEntry get(String uuid) {
+            return (ChildNodeEntry) entries.get(uuid);
+        }
+
+        List get(QName nodeName) {
+            Object obj = nameMap.get(nodeName);
+            if (obj == null) {
+                return Collections.EMPTY_LIST;
+            }
+            if (obj instanceof ArrayList) {
+                // map entry is a list of siblings
+                return Collections.unmodifiableList((ArrayList) obj);
+            } else {
+                // map entry is a single child node entry
+                return Collections.singletonList(obj);
+            }
+        }
+
+        ChildNodeEntry get(QName nodeName, int index) {
+            if (index < 1) {
+                throw new IllegalArgumentException("index is 1-based");
-            int index = (sibling == null) ? 1 : sibling.getIndex() + 1;
+            Object obj = nameMap.get(nodeName);
+            if (obj == null) {
+                return null;
+            }
+            if (obj instanceof ArrayList) {
+                // map entry is a list of siblings
+                ArrayList siblings = (ArrayList) obj;
+                if (index <= siblings.size()) {
+                    return (ChildNodeEntry) siblings.get(index - 1);
+                }
+            } else {
+                // map entry is a single child node entry
+                if (index == 1) {
+                    return (ChildNodeEntry) obj;
+                }
+            }
+            return null;
+        }
+
+        ChildNodeEntry add(QName nodeName, String uuid) {
+            List siblings = null;
+            int index = 0;
+            Object obj = nameMap.get(nodeName);
+            if (obj != null) {
+                if (obj instanceof ArrayList) {
+                    // map entry is a list of siblings
+                    siblings = (ArrayList) obj;
+                } else {
+                    // map entry is a single child node entry,
+                    // convert to siblings list
+                    siblings = new ArrayList();
+                    siblings.add(obj);
+                    nameMap.put(nodeName, siblings);
+                }
+                index = siblings.size();
+            }
+
+            index++;
-            if (sibling == null) {
-                nameMap.put(nodeName, entry);
+            if (siblings != null) {
+                siblings.add(entry);
-                sibling.setNextSibling(entry);
+                nameMap.put(nodeName, entry);
-        public void removeAll() {
-            entries.clear();
-            nameMap.clear();
+        public ChildNodeEntry remove(QName nodeName, int index) {
+            if (index < 1) {
+                throw new IllegalArgumentException("index is 1-based");
+            }
+
+            Object obj = nameMap.get(nodeName);
+            if (obj == null) {
+                return null;
+            }
+
+            if (obj instanceof ChildNodeEntry) {
+                // map entry is a single child node entry
+                if (index != 1) {
+                    return null;
+                }
+                ChildNodeEntry removedEntry = (ChildNodeEntry) obj;
+                nameMap.remove(nodeName);
+                entries.remove(removedEntry.getUUID());
+                return removedEntry;
+            }
+
+            // map entry is a list of siblings
+            List siblings = (ArrayList) obj;
+            if (index > siblings.size()) {
+                return null;
+            }
+
+            // remove from siblings list
+            ChildNodeEntry removedEntry = (ChildNodeEntry) siblings.remove(index - 1);
+            // remove from ordered entries map
+            entries.remove(removedEntry.getUUID());
+
+            // update indices of subsequent same-name siblings
+            for (int i = index - 1; i < siblings.size(); i++) {
+                ChildNodeEntry oldEntry = (ChildNodeEntry) siblings.get(i);
+                ChildNodeEntry newEntry = new ChildNodeEntry(nodeName, oldEntry.getUUID(), oldEntry.getIndex() - 1);
+                // overwrite old entry with updated entry in siblings list
+                siblings.set(i, newEntry);
+                // overwrite old entry with updated entry in ordered entries map
+                entries.put(newEntry.getUUID(), newEntry);
+            }
+
+            // clean up name lookup map if necessary
+            if (siblings.size() == 0) {
+                // no more entries with that name left:
+                // remove from name lookup map as well
+                nameMap.remove(nodeName);
+            } else if (siblings.size() == 1) {
+                // just one entry with that name left:
+                // discard siblings list and update name lookup map accordingly
+                nameMap.put(nodeName, siblings.get(0));
+            }
+
+            // we're done
+            return removedEntry;
-            return entry;
+           return entry;
-        public ChildNodeEntry remove(QName nodeName, int index) {
-            if (index < 1) {
-                throw new IllegalArgumentException("index is 1-based");
-            }
-
-            ChildNodeEntry sibling = (ChildNodeEntry) nameMap.get(nodeName);
-            ChildNodeEntry prevSibling = null;
-            while (sibling != null) {
-                if (sibling.getIndex() == index) {
-                    break;
-                }
-                prevSibling = sibling;
-                sibling = sibling.getNextSibling();
-            }
-            if (sibling == null) {
-                return null;
-            }
-
-            // remove from entries list
-            entries.remove(sibling.getUUID());
-
-            // update linked list of siblings & name map entry
-            if (prevSibling != null) {
-                prevSibling.setNextSibling(sibling.getNextSibling());
-            } else {
-                // the head is removed from the linked siblings list,
-                // update name map
-                if (sibling.getNextSibling() == null) {
-                    nameMap.remove(nodeName);
-                } else {
-                    nameMap.put(nodeName, sibling.getNextSibling());
-                }
-            }
-            // update indices of subsequent same-name siblings
-            ChildNodeEntry nextSibling = sibling.getNextSibling();
-            while (nextSibling != null) {
-                nextSibling.decIndex();
-                nextSibling = nextSibling.getNextSibling();
-            }
-
-            return sibling;
-        }
-
-        List get(QName nodeName) {
-            ChildNodeEntry sibling = (ChildNodeEntry) nameMap.get(nodeName);
-            if (sibling == null) {
-                return Collections.EMPTY_LIST;
-            }
-            List siblings = new ArrayList();
-            while (sibling != null) {
-                siblings.add(sibling);
-                sibling = sibling.getNextSibling();
-            }
-            return siblings;
-        }
-
-        ChildNodeEntry get(String uuid) {
-            return (ChildNodeEntry) entries.get(uuid);
-        }
-
-        ChildNodeEntry get(QName nodeName, int index) {
-            if (index < 1) {
-                throw new IllegalArgumentException("index is 1-based");
-            }
-
-            ChildNodeEntry sibling = (ChildNodeEntry) nameMap.get(nodeName);
-            while (sibling != null) {
-                if (sibling.getIndex() == index) {
-                    return sibling;
-                }
-                sibling = sibling.getNextSibling();
-            }
-            return null;
+        public void removeAll() {
+            nameMap.clear();
+            entries.clear();
+        //------------------------------------------------< Cloneable support >
+        /**
+         * Returns a shallow copy of this <code>ChildNodeEntries</code> instance;
+         * the entries themselves are not cloned.
+         * @return a shallow copy of this instance.
+         */
+        protected Object clone() {
+            ChildNodeEntries clone = new ChildNodeEntries();
+            clone.entries = (LinkedMap) entries.clone();
+            clone.nameMap = new HashMap(nameMap.size());
+            for (Iterator it = nameMap.keySet().iterator(); it.hasNext(); ) {
+                Object key = it.next();
+                Object obj = nameMap.get(key);
+                if (obj instanceof ArrayList) {
+                    // clone List
+                    obj = ((ArrayList) obj).clone();
+                }
+                clone.nameMap.put(key, obj);
+            }
+            return clone;
+        }
+
+     * <p/>
+     * <code>ChildNodeEntry</code> instances are immutable.
-        private QName name;
-        private int index; // 1-based index for same-name siblings
-        private String uuid;
-        private ChildNodeEntry nextSibling;
+        private int hash = 0;
+
+        private final QName name;
+        private final int index; // 1-based index for same-name siblings
+        private final String uuid;
-
-            nextSibling = null;
-        public ChildNodeEntry getNextSibling() {
-            return nextSibling;
-        }
-
-        void setNextSibling(ChildNodeEntry nextSibling) {
-            if (nextSibling != null && !nextSibling.getName().equals(name)) {
-                throw new IllegalArgumentException("not a same-name sibling entry");
-            }
-
-            this.nextSibling = nextSibling;
-        }
-
-        int incIndex() {
-            return ++index;
-        }
-
-        int decIndex() {
-            if (index == 1) {
-                throw new IndexOutOfBoundsException();
-            }
-            return --index;
-        }
-
-        /**
-         * Returns zero to satisfy the Object equals/hashCode contract.
-         * This class is mutable and not meant to be used as a hash key.
-         *
-         * @return always zero
-         * @see Object#hashCode()
-         */
-            return 0;
+            // ChildNodeEntry is immutable, we can store the computed hash code value
+            int h = hash;
+            if (h == 0) {
+                h = 17;
+                h = 37 * h + name.hashCode();
+                h = 37 * h + uuid.hashCode();
+                h = 37 * h + index;
+                hash = h;
+            }
+            return h;

MOV31 MOV31 MOV23 MOV23 UPD43 UPD43 INS43 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 UPD42 INS42 UPD43 MOV43 INS42 MOV44 INS8 MOV43 INS42 MOV44 MOV44 INS8 MOV43 INS42 MOV44 MOV44 INS8 MOV83 MOV43 MOV42 MOV44 MOV44 INS8 MOV21 INS29 INS83 INS43 INS42 INS8 INS59 INS83 INS83 INS39 MOV59 INS83 MOV83 INS39 INS42 INS8 UPD42 MOV60 MOV25 INS25 MOV25 MOV60 INS25 INS25 MOV41 INS60 INS60 MOV60 INS25 INS21 MOV60 MOV25 MOV8 MOV21 MOV41 MOV25 MOV60 MOV25 INS25 INS60 INS25 INS60 MOV21 INS24 INS25 INS41 INS65 INS65 INS42 INS60 MOV21 MOV21 INS24 INS41 INS66 INS66 INS42 INS34 INS60 INS25 MOV41 INS43 INS62 INS8 INS8 INS43 INS27 INS8 INS62 INS8 INS8 INS43 INS59 MOV39 INS59 INS43 INS27 INS8 INS37 UPD27 INS43 INS62 INS8 MOV43 INS59 INS27 INS8 MOV43 INS59 INS58 INS27 INS37 INS8 INS27 MOV8 INS25 INS42 INS66 INS66 INS66 INS43 INS59 INS7 INS58 INS32 INS8 INS42 INS39 INS59 INS27 INS8 INS42 INS7 INS42 UPD42 MOV32 UPD42 INS42 INS43 INS41 INS41 INS42 UPD42 MOV32 UPD42 MOV42 MOV33 INS41 INS42 INS43 INS60 INS25 INS25 INS42 INS42 INS33 MOV42 INS34 INS42 UPD42 MOV32 UPD42 MOV42 MOV33 INS25 INS21 INS42 UPD42 INS42 UPD42 MOV32 UPD42 INS42 MOV43 INS25 MOV60 INS21 INS21 INS41 INS42 INS11 MOV42 INS32 INS41 INS42 INS11 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS21 MOV21 INS32 INS34 MOV27 MOV8 INS42 INS42 MOV14 INS40 INS11 INS40 INS14 INS43 INS59 UPD42 MOV42 UPD42 MOV42 INS60 INS60 INS25 INS21 INS42 INS42 INS42 INS34 INS21 INS21 MOV21 INS21 INS21 INS11 INS11 INS42 INS11 INS42 INS32 INS32 INS33 INS42 INS43 INS59 INS27 INS8 MOV27 INS8 INS62 INS8 INS8 INS7 INS27 INS8 MOV43 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS33 MOV43 INS32 UPD42 INS42 INS27 INS42 INS42 MOV43 INS59 MOV43 INS59 INS32 INS42 INS42 INS34 INS43 INS32 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS62 INS8 INS32 INS7 INS7 INS7 INS7 MOV43 INS32 MOV43 INS32 INS43 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS11 INS42 MOV32 INS41 INS42 INS41 INS42 INS43 INS21 INS21 INS21 INS21 INS42 INS32 UPD42 UPD42 INS42 INS34 INS41 UPD42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS34 INS42 INS11 INS42 INS14 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 MOV21 INS40 INS42 INS42 INS42 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS40 UPD42 MOV42 INS43 INS42 INS43 INS42 UPD42 UPD42 INS11 INS11 INS42 INS7 INS7 INS32 INS32 INS42 INS42 INS33 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 MOV43 INS32 MOV43 INS42 INS32 INS27 UPD42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD27 MOV27 INS32 INS27 INS32 INS27 INS42 INS42 INS42 MOV43 INS32 MOV43 INS42 INS42 INS11 INS42 MOV14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 UPD42 UPD42 INS34 UPD42 INS34 UPD42 UPD42 MOV42 UPD42 MOV42 INS34 INS42 INS42 INS42 INS34 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS43 INS42 INS42 INS42 INS36 INS42 INS42 INS34 INS42 INS11 INS43 INS42 INS42 DEL42 DEL32 DEL14 DEL42 DEL32 DEL14 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL11 DEL11 DEL42 DEL27 DEL33 DEL27 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL27 DEL36 DEL34 DEL32 DEL34 DEL27 DEL16 DEL59 DEL60 DEL8 DEL31 DEL11 DEL33 DEL33 DEL42 DEL33 DEL27 DEL32 DEL27 DEL10 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL32 DEL21 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL33 DEL27 DEL32 DEL42 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL61 DEL8 DEL31 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL59 DEL42 DEL33 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL42 DEL38 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL38 DEL41 DEL8 DEL31 DEL33 DEL52 DEL42 DEL22 DEL42 DEL34 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL8 DEL31