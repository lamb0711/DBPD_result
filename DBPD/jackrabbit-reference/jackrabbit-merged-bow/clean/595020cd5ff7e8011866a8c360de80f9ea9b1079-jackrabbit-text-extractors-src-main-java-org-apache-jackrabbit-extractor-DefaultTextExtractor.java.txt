JCR-1878: Use Apache Tika for text extraction

Remove the Java 1.4 check as we already require Java 5.

Use a custom Tika configuration file that enables the MS Office parsers, but disables parsing of generic zip files and other packages. The packages often take lots of effort to parse, but aren't that useful in the full text index.

TODO: Configuration mechanism to allow alternative Tika configurations.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@794633 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.tika.parser.Parser;
-    private static final Parser PARSER;
+    private static final AutoDetectParser PARSER;
-        // The default Tika configuration refers to Apache POI libraries that
-        // are compiled for Java 5, and can thus not be loaded in Java 1.4.
-        // This makes it impossible to load the default Tika configuration
-        // (see TIKA-217 for background), and so we need to use the following
-        // workaround to instantiate the Tika AutoDetectParser without the
-        // POI classes (and thus support for MS Office formats) when running
-        // on Java 1.4.
-        AutoDetectParser parser;
-        if ("1.4".equals(System.getProperty("java.specification.version"))) {
-            InputStream stream =
-                DefaultTextExtractor.class.getResourceAsStream("tika-config-jdk14.xml");
+        InputStream stream =
+            DefaultTextExtractor.class.getResourceAsStream("tika-config.xml");
+        try {
-                try {
-                    parser = new AutoDetectParser(new TikaConfig(stream));
-                } finally {
-                    stream.close();
-                }
-            } catch (Exception e) {
-                throw new RuntimeException(
-                        "Unable to load Tika configuration", e);
-            }
-        } else {
-            parser = new AutoDetectParser();
-        }
-        PARSER = parser;
+                PARSER = new AutoDetectParser(new TikaConfig(stream));
-        Set types = parser.getParsers().keySet();
-        TYPES = (String[]) types.toArray(new String[types.size()]);
+                Set<String> types = PARSER.getParsers().keySet();
+                TYPES = types.toArray(new String[types.size()]);
+            } finally {
+                stream.close();
+            }
+        } catch (Exception e) {
+            throw new RuntimeException(
+                    "Unable to load Tika configuration", e);
+        }

UPD43 MOV8 UPD42 UPD45 INS60 INS21 INS74 INS59 INS7 UPD42 MOV43 MOV43 INS42 INS32 INS42 MOV32 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL59 DEL60 DEL45 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL85 DEL5 DEL11 DEL7 DEL21 DEL8