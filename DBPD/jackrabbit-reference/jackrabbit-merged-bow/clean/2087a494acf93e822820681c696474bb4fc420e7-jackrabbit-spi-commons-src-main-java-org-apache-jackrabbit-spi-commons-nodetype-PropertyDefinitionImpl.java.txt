JCR-2064 Add new JSR283 features to CND reader/writer
JCR-2153 Introduce QValueConstraint and change return type of QPropertyDefinition.getValueConstraints()
JCR-2158 Consolidate CND related classes from SPI and Core


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785777 13f79535-47bb-0310-9956-ffa450edef68

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import javax.jcr.RepositoryException;
+import javax.jcr.Value;
+import javax.jcr.ValueFactory;
+import javax.jcr.nodetype.PropertyDefinition;
+
-import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.QValueConstraint;
-import org.apache.jackrabbit.spi.commons.nodetype.constraint.ValueConstraint;
-
-import javax.jcr.nodetype.PropertyDefinition;
-import javax.jcr.Value;
-import javax.jcr.RepositoryException;
-import javax.jcr.NamespaceException;
-import javax.jcr.ValueFactory;
+import org.apache.jackrabbit.spi.commons.nodetype.constraint.ValueConstraint;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-     * @param resolver
-     * @param valueFactory
+     * @param resolver the name-path resolver
+     * @param valueFactory a value factory
-     * @param propDef
-     * @param ntMgr
-     * @param resolver
-     * @param valueFactory
+     * @param propDef underlying propdef
+     * @param ntMgr nodetype manager
+     * @param resolver name-path resolver
+     * @param valueFactory value factory (for default values)
-        String[] constraints = pd.getValueConstraints();
+        QValueConstraint[] constraints = pd.getValueConstraints();
-        try {
-            String[] vca = new String[constraints.length];
-            for (int i = 0; i < constraints.length; i++) {
-                ValueConstraint constr = ValueConstraint.create(pd.getRequiredType(), constraints[i]);
-                vca[i] = constr.getDefinition(resolver);
+        String[] vca = new String[constraints.length];
+        for (int i = 0; i < constraints.length; i++) {
+            try {
+                ValueConstraint vc = ValueConstraint.create(pd.getRequiredType(), constraints[i].getString());
+                vca[i] = vc.getDefinition(resolver);
+            } catch (InvalidConstraintException e) {
+                log.warn("Internal error during conversion of constraint.", e);
+                vca[i] = constraints[i].getString();
-            return vca;
-        } catch (InvalidConstraintException e) {
-            log.error("Invalid value constraint: " + e.getMessage());
-            return null;
+        return vca;
-        Name[] names = ((QPropertyDefinition) itemDef).getAvailableQueryOperators();
-        String[] aqos = new String[names.length];
-        for (int i = 0; i < names.length; i++) {
-            try {
-                aqos[i] = resolver.getJCRName(names[i]);
-            } catch (NamespaceException e) {
-                // should not occure. fallback
-                log.warn(e.getMessage());
-                aqos[i] = names[i].toString();
-            }
-        }
-        return aqos;
+        return ((QPropertyDefinition) itemDef).getAvailableQueryOperators();

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 MOV8 MOV60 MOV60 MOV25 INS66 INS66 INS66 INS66 INS66 INS66 UPD5 INS8 MOV32 UPD43 INS54 UPD42 MOV8 INS12 MOV44 INS8 INS21 INS21 UPD42 INS32 INS7 INS32 UPD42 INS42 INS42 INS45 INS42 INS2 INS32 MOV2 INS42 INS42 INS42 INS2 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL33 DEL41 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42