JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.IllegalNameException;
-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.UnknownPrefixException;
-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.PathFormat;
+import org.apache.jackrabbit.conversion.NamePathResolver;
+import org.apache.jackrabbit.conversion.NameResolver;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.conversion.PathResolver;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.nodetype.InvalidConstraintException;
+import org.apache.jackrabbit.name.PathFactoryImpl;
+import org.apache.jackrabbit.name.NameFactoryImpl;
+import javax.jcr.NamespaceException;
+     * @param resolver
-    public String getDefinition(NamespaceResolver nsResolver) {
+    public String getDefinition(NamePathResolver resolver) {
-     * @see #getDefinition(NamespaceResolver)
+     * @see #getDefinition(NamePathResolver)
-     * @param nsResolver
+     * @param resolver
-                                         NamespaceResolver nsResolver)
+                                         NamePathResolver resolver)
-                return new NameConstraint(definition, nsResolver);
+                return new NameConstraint(definition, resolver);
-                return new PathConstraint(definition, nsResolver);
+                return new PathConstraint(definition, resolver);
-                return new ReferenceConstraint(definition, nsResolver);
+                return new ReferenceConstraint(definition, resolver);
+
-        path = Path.valueOf(qualifiedDefinition);
+        // TODO improve. don't rely on a specific factory impl
+        path = PathFactoryImpl.getInstance().create(qualifiedDefinition);
-    PathConstraint(String definition, NamespaceResolver nsResolver)
+    PathConstraint(String definition, PathResolver resolver)
-            path = PathFormat.parse(definition, nsResolver);
-        } catch (MalformedPathException mpe) {
+            path = resolver.getQPath(definition);
+        } catch (NameException e) {
-            throw new InvalidConstraintException(msg, mpe);
+            throw new InvalidConstraintException(msg, e);
+        } catch (NamespaceException e) {
+            String msg = "Invalid path expression specified as value constraint: " + definition;
+            log.debug(msg);
+            throw new InvalidConstraintException(msg, e);
-     * Uses {@link PathFormat#format(Path, NamespaceResolver)} to convert the
+     * Uses {@link NamePathResolver#getJCRPath(Path)} to convert the
-     * @see ValueConstraint#getDefinition(NamespaceResolver)
+     * @see ValueConstraint#getDefinition(NamePathResolver)
+     * @param resolver
-    public String getDefinition(NamespaceResolver nsResolver) {
+    public String getDefinition(NamePathResolver resolver) {
-            String p = PathFormat.format(path, nsResolver);
+            String p = resolver.getJCRPath(path);
-        } catch (NoPrefixDeclaredException npde) {
+        } catch (NamespaceException e) {
-                } catch (MalformedPathException e) {
+                } catch (RepositoryException e) {
-                    } catch (MalformedPathException e) {
+                    } catch (RepositoryException e) {
-    private final QName name;
+    private final Name name;
-        name = QName.valueOf(qualifiedDefinition);
+        // TODO improve. don't rely on a specific factory impl
+        name = NameFactoryImpl.getInstance().create(qualifiedDefinition);
-    NameConstraint(String definition, NamespaceResolver nsResolver)
+    NameConstraint(String definition, NameResolver resolver)
-            NameFormat.checkFormat(definition);
-            name = NameFormat.parse(definition, nsResolver);
-        } catch (IllegalNameException ine) {
+            name = resolver.getQName(definition);
+        } catch (NameException e) {
-            throw new InvalidConstraintException(msg, ine);
-        } catch (NameException upe) {
+            throw new InvalidConstraintException(msg, e);
+        } catch (NamespaceException e) {
-            throw new InvalidConstraintException(msg, upe);
+            throw new InvalidConstraintException(msg, e);
-     * Uses {@link NameFormat#format(QName, NamespaceResolver)} to convert the
-     * qualified <code>QName</code> into a JCR name.
+     * Uses {@link NamePathResolver#getJCRName(Name)} to convert the
+     * qualified <code>Name</code> into a JCR name.
-     * @see ValueConstraint#getDefinition(NamespaceResolver)
+     * @see ValueConstraint#getDefinition(NamePathResolver)
+     * @param resolver
-    public String getDefinition(NamespaceResolver nsResolver) {
+    public String getDefinition(NamePathResolver resolver) {
-            return NameFormat.format(name, nsResolver);
-        } catch (NoPrefixDeclaredException npde) {
+            return resolver.getJCRName(name);
+        } catch (NamespaceException e) {
-                QName n = value.getQName();
+                Name n = value.getName();
-    private final QName ntName;
+    private final Name ntName;
-        ntName = QName.valueOf(qualifiedDefinition);
+        // TODO improve. don't rely on a specific factory impl
+        ntName = NameFactoryImpl.getInstance().create(qualifiedDefinition);
-    ReferenceConstraint(String definition, NamespaceResolver nsResolver) throws InvalidConstraintException {
+    ReferenceConstraint(String definition, NamePathResolver resolver) throws InvalidConstraintException {
-            ntName = NameFormat.parse(definition, nsResolver);
-        } catch (IllegalNameException ine) {
+            ntName = resolver.getQName(definition);
+        } catch (org.apache.jackrabbit.conversion.IllegalNameException ine) {
-        } catch (UnknownPrefixException upe) {
+        } catch (NameException e) {
-            throw new InvalidConstraintException(msg, upe);
+            throw new InvalidConstraintException(msg, e);
+        } catch (NamespaceException e) {
+            String msg = "invalid node type name specified as value constraint: "
+                    + definition;
+            log.debug(msg);
+            throw new InvalidConstraintException(msg, e);
-     * Uses {@link NameFormat#format(QName, NamespaceResolver)} to convert the
+     * Uses {@link NamePathResolver#getJCRName(Name)} to convert the
-     * @see ValueConstraint#getDefinition(NamespaceResolver)
+     * @see ValueConstraint#getDefinition(NamePathResolver)
+     * @param resolver
-    public String getDefinition(NamespaceResolver nsResolver) {
+    public String getDefinition(NamePathResolver resolver) {
-            return NameFormat.format(ntName, nsResolver);
-        } catch (NoPrefixDeclaredException npde) {
+            return resolver.getJCRName(ntName);
+        } catch (NamespaceException npde) {

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 INS65 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 INS65 UPD43 UPD42 UPD42 UPD43 UPD42 MOV12 INS65 UPD43 UPD42 UPD42 UPD43 UPD42 INS65 UPD43 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS12 INS42 UPD42 UPD42 UPD66 INS42 UPD42 UPD42 INS12 INS42 UPD42 INS44 INS8 UPD43 INS44 INS8 UPD43 UPD42 UPD42 UPD42 INS32 INS42 UPD43 UPD42 INS43 INS42 INS60 INS21 INS53 UPD42 UPD42 UPD43 UPD43 UPD42 INS32 INS42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 INS32 INS42 UPD43 UPD43 UPD42 INS43 INS42 INS60 INS21 INS53 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS43 INS59 INS32 INS14 UPD42 UPD42 UPD43 UPD42 MOV42 UPD42 MOV42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 INS42 INS43 INS59 INS32 INS14 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 UPD42 INS45 INS42 INS42 UPD43 INS45 INS42 INS42 UPD42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL69 DEL42 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42