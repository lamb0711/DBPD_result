- Cleaned up code according to coding style checked by checkstyle.
- Added checkstyle-suppressions.xml to exclude generated classes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47489 13f79535-47bb-0310-9956-ffa450edef68

-  protected Node parent;
-  protected Node[] children;
-  protected int id;
-  protected JCRQLParser parser;
+    protected Node parent;
+    protected Node[] children;
+    protected int id;
+    protected JCRQLParser parser;
-  public SimpleNode(int i) {
-    id = i;
-  }
-
-  public SimpleNode(JCRQLParser p, int i) {
-    this(i);
-    parser = p;
-  }
-
-  public void jjtOpen() {
-  }
-
-  public void jjtClose() {
-  }
-  
-  public void jjtSetParent(Node n) { parent = n; }
-  public Node jjtGetParent() { return parent; }
-
-  public void jjtAddChild(Node n, int i) {
-    if (children == null) {
-      children = new Node[i + 1];
-    } else if (i >= children.length) {
-      Node c[] = new Node[i + 1];
-      System.arraycopy(children, 0, c, 0, children.length);
-      children = c;
+    public SimpleNode(int i) {
+	id = i;
-    children[i] = n;
-  }
-  public Node jjtGetChild(int i) {
-    return children[i];
-  }
-
-  public int jjtGetNumChildren() {
-    return (children == null) ? 0 : children.length;
-  }
-
-  /** Accept the visitor. **/
-  public Object jjtAccept(JCRQLParserVisitor visitor, Object data) {
-    return visitor.visit(this, data);
-  }
-
-  /** Accept the visitor. **/
-  public Object childrenAccept(JCRQLParserVisitor visitor, Object data) {
-    if (children != null) {
-      for (int i = 0; i < children.length; ++i) {
-        children[i].jjtAccept(visitor, data);
-      }
+    public SimpleNode(JCRQLParser p, int i) {
+	this(i);
+	parser = p;
-    return data;
-  }
-  /* You can override these two methods in subclasses of SimpleNode to
-     customize the way the node appears when the tree is dumped.  If
-     your output uses more than one line you should override
-     toString(String), otherwise overriding toString() is probably all
-     you need to do. */
+    public void jjtOpen() {
+    }
-  public String toString() { return JCRQLParserTreeConstants.jjtNodeName[id]; }
-  public String toString(String prefix) { return prefix + toString(); }
+    public void jjtClose() {
+    }
-  /* Override this method if you want to customize how the node dumps
-     out its children. */
+    public void jjtSetParent(Node n) {
+	parent = n;
+    }
-  public void dump(String prefix) {
-    System.out.println(toString(prefix));
-    if (children != null) {
-      for (int i = 0; i < children.length; ++i) {
-	SimpleNode n = (SimpleNode)children[i];
-	if (n != null) {
-	  n.dump(prefix + " ");
+    public Node jjtGetParent() {
+	return parent;
+    }
+
+    public void jjtAddChild(Node n, int i) {
+	if (children == null) {
+	    children = new Node[i + 1];
+	} else if (i >= children.length) {
+	    Node[] c = new Node[i + 1];
+	    System.arraycopy(children, 0, c, 0, children.length);
+	    children = c;
-      }
+	children[i] = n;
-  }
+
+    public Node jjtGetChild(int i) {
+	return children[i];
+    }
+
+    public int jjtGetNumChildren() {
+	return (children == null) ? 0 : children.length;
+    }
+
+    /**
+     * Accept the visitor. *
+     */
+    public Object jjtAccept(JCRQLParserVisitor visitor, Object data) {
+	return visitor.visit(this, data);
+    }
+
+    /**
+     * Accept the visitor. *
+     */
+    public Object childrenAccept(JCRQLParserVisitor visitor, Object data) {
+	if (children != null) {
+	    for (int i = 0; i < children.length; ++i) {
+		children[i].jjtAccept(visitor, data);
+	    }
+	}
+	return data;
+    }
+
+    /* You can override these two methods in subclasses of SimpleNode to
+       customize the way the node appears when the tree is dumped.  If
+       your output uses more than one line you should override
+       toString(String), otherwise overriding toString() is probably all
+       you need to do. */
+
+    public String toString() {
+	return JCRQLParserTreeConstants.jjtNodeName[id];
+    }
+
+    public String toString(String prefix) {
+	return prefix + toString();
+    }
+
+    /* Override this method if you want to customize how the node dumps
+       out its children. */
+
+    public void dump(String prefix) {
+	System.out.println(toString(prefix));
+	if (children != null) {
+	    for (int i = 0; i < children.length; ++i) {
+		SimpleNode n = (SimpleNode) children[i];
+		if (n != null) {
+		    n.dump(prefix + " ");
+		}
+	    }
+	}
+    }

INS5 MOV43 INS85 DEL85