JCR-3117: Stats for the PersistenceManager

Use AtomicLong counters and the TimeSeries mechanism for PM stats

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1186713 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.atomic.AtomicLong;
+import org.apache.jackrabbit.api.stats.RepositoryStatistics;
-import org.apache.jackrabbit.core.stats.PersistenceManagerStatCore;
+import org.apache.jackrabbit.core.stats.RepositoryStatisticsImpl;
-    /** statistics object */
-    private PersistenceManagerStatCore pmStatCore;
+    /** Counter of read operations. */
+    private AtomicLong readCounter;
+
+    /** Counter of write operations. */
+    private AtomicLong writeCounter;
+
+    /** Duration of read operations. */
+    private AtomicLong readDuration;
+
+    /** Duration of write operations. */
+    private AtomicLong writeDuration;
+
+    /** Counter of bundle cache accesses. */
+    private AtomicLong cacheCounter;
-        pmStatCore = context.getPersistenceManagerStatCore();
+
+        // statistics
+        RepositoryStatisticsImpl stats = context.getRepositoryStatistics();
+        cacheCounter = stats.getCounter(
+                RepositoryStatistics.Type.BUNDLE_CACHE_COUNTER);
+        readCounter = stats.getCounter(
+                RepositoryStatistics.Type.BUNDLE_READ_COUNTER);
+        readDuration = stats.getCounter(
+                RepositoryStatistics.Type.BUNDLE_READ_DURATION);
+        writeCounter = stats.getCounter(
+                RepositoryStatistics.Type.BUNDLE_WRITE_COUNTER);
+        writeDuration = stats.getCounter(
+                RepositoryStatistics.Type.BUNDLE_WRITE_DURATION);
-        if (pmStatCore != null && pmStatCore.isEnabled()) {
-            long t = System.currentTimeMillis();
-            try {
-                return getBundleCacheMiss(id);
-            } finally {
-                t = System.currentTimeMillis() - t;
-                pmStatCore.onReadCacheMiss(t);
-            }
-        } else {
-            return getBundleCacheMiss(id);
-        }
+        return getBundleCacheMiss(id);
+        long time = System.nanoTime();
+        readDuration.addAndGet(System.nanoTime() - time);
+        readCounter.incrementAndGet();
+
-
-        long time = System.currentTimeMillis();
+        long time = System.nanoTime();
+        writeDuration.addAndGet(System.nanoTime() - time);
+        writeCounter.incrementAndGet();
+
-        log.debug("stored bundle {} in {} ms", new Object[] { bundle.getId(),
-                System.currentTimeMillis() - time });
-        if (pmStatCore != null && pmStatCore.isEnabled()) {
-            pmStatCore.onBundleWrite(System.currentTimeMillis() - time);
-        }
-        pmStatCore.cacheAccessed(accessCount);
+        cacheCounter.addAndGet(accessCount);

INS26 INS26 INS40 INS40 UPD40 INS23 INS23 INS23 INS23 UPD43 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 MOV21 UPD42 UPD42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS60 INS21 INS21 INS21 INS21 MOV41 INS60 INS21 INS21 MOV21 UPD66 INS66 INS66 INS66 INS66 INS43 INS59 INS7 INS7 INS7 INS7 INS39 INS59 INS32 INS32 INS42 INS42 INS32 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 UPD42 INS42 INS27 UPD42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS32 INS42 UPD42 MOV32 MOV42 INS42 INS42 UPD42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL8 DEL25 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL27 DEL4 DEL3 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL8 DEL25