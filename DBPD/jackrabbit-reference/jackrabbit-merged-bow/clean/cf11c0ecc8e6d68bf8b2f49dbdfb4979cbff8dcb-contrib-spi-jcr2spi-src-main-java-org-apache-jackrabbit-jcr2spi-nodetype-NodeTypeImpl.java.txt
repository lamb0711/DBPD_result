work in progress

- minor improvement and some sync



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497068 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashSet;
-     * Returns the applicable child node definition for a child node with the
-     * specified name.
-     *
-     * @param nodeName
-     * @return
-     * @throws RepositoryException if no applicable child node definition
-     *                             could be found
-     */
-    private QNodeDefinition getApplicableNodeDef(QName nodeName)
-            throws RepositoryException {
-        return getApplicableNodeDef(nodeName, null);
-    }
-
-    /**
-     * Returns the applicable child node definition for a child node with the
-     * specified name and node type.
-     *
-     * @param nodeName
-     * @param nodeTypeName
-     * @return
-     * @throws RepositoryException if no applicable child node definition
-     *                             could be found
-     */
-    private QNodeDefinition getApplicableNodeDef(QName nodeName, QName nodeTypeName)
-            throws RepositoryException {
-        return ent.getApplicableNodeDefinition(nodeName, nodeTypeName);
-    }
-
-    /**
-     * Returns an array containing only those child node definitions of this
-     * node type (including the child node definitions inherited from supertypes
-     * of this node type) where <code>{@link NodeDefinition#isAutoCreated()}</code>
-     * returns <code>true</code>.
-     *
-     * @return an array of child node definitions.
-     * @see NodeDefinition#isAutoCreated
-     */
-    private NodeDefinition[] getAutoCreatedNodeDefinitions() {
-        QNodeDefinition[] cnda = ent.getAutoCreateNodeDefs();
-        NodeDefinition[] nodeDefs = new NodeDefinition[cnda.length];
-        for (int i = 0; i < cnda.length; i++) {
-            nodeDefs[i] = ntMgr.getNodeDefinition(cnda[i]);
-        }
-        return nodeDefs;
-    }
-
-    /**
-     * Returns an array containing only those property definitions of this
-     * node type (including the property definitions inherited from supertypes
-     * of this node type) where <code>{@link PropertyDefinition#isAutoCreated()}</code>
-     * returns <code>true</code>.
-     *
-     * @return an array of property definitions.
-     * @see PropertyDefinition#isAutoCreated
-     */
-    private PropertyDefinition[] getAutoCreatedPropertyDefinitions() {
-        QPropertyDefinition[] pda = ent.getAutoCreatePropDefs();
-        PropertyDefinition[] propDefs = new PropertyDefinition[pda.length];
-        for (int i = 0; i < pda.length; i++) {
-            propDefs[i] = ntMgr.getPropertyDefinition(pda[i]);
-        }
-        return propDefs;
-    }
-
-    /**
-     * Returns an array containing only those property definitions of this
-     * node type (including the property definitions inherited from supertypes
-     * of this node type) where <code>{@link PropertyDefinition#isMandatory()}</code>
-     * returns <code>true</code>.
-     *
-     * @return an array of property definitions.
-     * @see PropertyDefinition#isMandatory
-     */
-    private PropertyDefinition[] getMandatoryPropertyDefinitions() {
-        QPropertyDefinition[] pda = ent.getMandatoryPropDefs();
-        PropertyDefinition[] propDefs = new PropertyDefinition[pda.length];
-        for (int i = 0; i < pda.length; i++) {
-            propDefs[i] = ntMgr.getPropertyDefinition(pda[i]);
-        }
-        return propDefs;
-    }
-
-    /**
-     * Returns an array containing only those child node definitions of this
-     * node type (including the child node definitions inherited from supertypes
-     * of this node type) where <code>{@link NodeDefinition#isMandatory()}</code>
-     * returns <code>true</code>.
-     *
-     * @return an array of child node definitions.
-     * @see NodeDefinition#isMandatory
-     */
-    private NodeDefinition[] getMandatoryNodeDefinitions() {
-        QNodeDefinition[] cnda = ent.getMandatoryNodeDefs();
-        NodeDefinition[] nodeDefs = new NodeDefinition[cnda.length];
-        for (int i = 0; i < cnda.length; i++) {
-            nodeDefs[i] = ntMgr.getNodeDefinition(cnda[i]);
-        }
-        return nodeDefs;
-    }
-
-    /**
-    /**
-     * Returns all <i>inherited</i> supertypes of this node type.
-     *
-     * @return an array of <code>NodeType</code> objects.
-     * @see #getSupertypes
-     * @see #getDeclaredSupertypes
-     */
-    private NodeType[] getInheritedSupertypes() {
-        // declared supertypes
-        QName[] ntNames = ntd.getSupertypes();
-        HashSet declared = new HashSet();
-        for (int i = 0; i < ntNames.length; i++) {
-            declared.add(ntNames[i]);
-        }
-        // all supertypes
-        ntNames = ent.getInheritedNodeTypes();
-
-        // filter from all supertypes those that are not declared
-        ArrayList inherited = new ArrayList();
-        for (int i = 0; i < ntNames.length; i++) {
-            if (!declared.contains(ntNames[i])) {
-                try {
-                    inherited.add(ntMgr.getNodeType(ntNames[i]));
-                } catch (NoSuchNodeTypeException e) {
-                    // should never get here
-                    log.error("undefined supertype", e);
-                    return new NodeType[0];
-                }
-            }
-        }
-
-        return (NodeType[]) inherited.toArray(new NodeType[inherited.size()]);
-    }
-
-    //-------------------------------------------------------------< NodeType >
+    //-----------------------------------------------------------< NodeType >---
-            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver));
+            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver),
+                ntMgr.getNodeTypeRegistry());
-            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver), NameFormat.parse(nodeTypeName, nsResolver));
+            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver),
+                NameFormat.parse(nodeTypeName, nsResolver), ntMgr.getNodeTypeRegistry());

INS32 INS32 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL66 DEL66 DEL65 DEL42 DEL65 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL67 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL67 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL67 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL67 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL42 DEL67 DEL65 DEL42 DEL67 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL31