JCR-3816: [aws-ext]S3DS not able update lastModified of record > 5GB
JCR-3817: [jackrabbit-aws-ext] Performance of operation degrades while running DS GC

Applying patch from Shashank Gupta

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1632482 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.data.AsyncTouchCallback;
+import org.apache.jackrabbit.core.data.AsyncTouchResult;
+import com.amazonaws.services.s3.transfer.Copy;
-            if (propEndPoint != null & !"".equals(propEndPoint)) {
+            if ((propEndPoint != null) & !"".equals(propEndPoint)) {
-                    s3service.copyObject(copReq);
+                    Copy copy = tmx.copy(copReq);
+                    copy.waitForCopyResult();
+    
+    @Override
+    public void touchAsync(final DataIdentifier identifier,
+            final long minModifiedDate, final AsyncTouchCallback callback)
+            throws DataStoreException {
+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
+        try {
+            if (callback == null) {
+                throw new IllegalArgumentException(
+                    "callback parameter cannot be null in touchAsync");
+            }
+            Thread.currentThread().setContextClassLoader(
+                getClass().getClassLoader());
+
+            asyncWriteExecuter.execute(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        touch(identifier, minModifiedDate);
+                        callback.onSuccess(new AsyncTouchResult(identifier));
+                    } catch (DataStoreException e) {
+                        AsyncTouchResult result = new AsyncTouchResult(
+                            identifier);
+                        result.setException(e);
+                        callback.onFailure(result);
+                    }
+                }
+            });
+        } catch (Exception e) {
+            callback.onAbort(new AsyncTouchResult(identifier));
+            throw new DataStoreException("Cannot touch the record "
+                + identifier.toString(), e);
+        } finally {
+            if (contextClassLoader != null) {
+                Thread.currentThread().setContextClassLoader(contextClassLoader);
+            }
+        }
+
+    }
+
+    @Override
+    public void touch(DataIdentifier identifier, long minModifiedDate)
+            throws DataStoreException {
+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
+        try {
+            final long start = System.currentTimeMillis();
+            final String key = getKeyName(identifier);
+            if (minModifiedDate > 0
+                && minModifiedDate > getLastModified(identifier)) {
+                CopyObjectRequest copReq = new CopyObjectRequest(bucket, key,
+                    bucket, key);
+                copReq.setNewObjectMetadata(new ObjectMetadata());
+                Copy copy = tmx.copy(copReq);
+                copy.waitForCompletion();
+                LOG.debug("[{}] touched. time taken [{}] ms ", new Object[] {
+                    identifier, (System.currentTimeMillis() - start) });
+            } else {
+                LOG.debug("[{}] touch not required. time taken [{}] ms ",
+                    new Object[] { identifier,
+                        (System.currentTimeMillis() - start) });
+            }
+
+        } catch (Exception e) {
+            throw new DataStoreException("Error occured in touching key ["
+                + identifier.toString() + "]", e);
+        } finally {
+            if (contextClassLoader != null) {
+                Thread.currentThread().setContextClassLoader(contextClassLoader);
+            }
+        }
+    }
-                    if (!store.isInUse(identifier) && lastModified < min) {
-                        LOG.debug("add id [{}] to delete lists",  s3ObjSumm.getKey());
+                    if (lastModified < min
+                        && store.confirmDelete(identifier)
+                         // confirm once more that record's lastModified < min
+                        //  order is important here
+                        && s3service.getObjectMetadata(bucket,
+                            s3ObjSumm.getKey()).getLastModified().getTime() < min) {
+                       
+
+                        LOG.debug("add id [{}] to delete lists",
+                            s3ObjSumm.getKey());
+        asyncWriteExecuter.shutdownNow();
-        asyncWriteExecuter.shutdownNow();
-                s3service.copyObject(copReq);
-                LOG.debug("lastModified of [{}] updated successfully.", identifier);
-                if (callback != null) {
-                    callback.onSuccess(new AsyncUploadResult(identifier, file));
+                Copy copy = tmx.copy(copReq);
+                try {
+                    copy.waitForCopyResult();
+                    LOG.debug("lastModified of [{}] updated successfully.", identifier);
+                    if (callback != null) {
+                        callback.onSuccess(new AsyncUploadResult(identifier, file));
+                    }
+                }catch (Exception e2) {
+                    AsyncUploadResult asyncUpRes= new AsyncUploadResult(identifier, file);
+                    asyncUpRes.setException(e2);
+                    if (callback != null) {
+                        callback.onAbort(asyncUpRes);
+                    }
+                    throw new DataStoreException("Could not upload " + key, e2);
-                } catch (Exception e2) {
-                    if (!asyncUpload) {
-                        callback.onAbort(new AsyncUploadResult(identifier, file));
-                    }
+                } catch (Exception e2 ) {
+                    AsyncUploadResult asyncUpRes= new AsyncUploadResult(identifier, file);
+                    asyncUpRes.setException(e2);
+                    if (callback != null) {
+                        callback.onAbort(asyncUpRes);
+                    } 
+    
-                s3service.copyObject(copReq);
-                LOG.debug("[{}] renamed to [{}] ", oldKey, newS3Key);
+                Copy copy = tmx.copy(copReq);
+                try {
+                    copy.waitForCopyResult();
+                    LOG.debug("[{}] renamed to [{}] ", oldKey, newS3Key);
+                } catch (InterruptedException ie) {
+                    LOG.error(" Exception in renaming [{}] to [{}] ",
+                        new Object[] { ie, oldKey, newS3Key });
+                }
+               
-
+    
+
+    

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 MOV21 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS54 INS42 INS42 INS43 INS59 INS8 INS12 INS8 INS42 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS32 INS25 INS21 INS21 INS44 INS8 INS25 INS42 INS42 INS32 INS60 INS60 INS25 INS44 INS8 INS25 INS32 INS42 INS27 INS8 INS32 INS32 INS43 INS42 INS21 INS53 INS27 INS8 INS32 INS42 INS83 INS39 INS59 INS83 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS53 INS27 INS8 INS60 INS54 INS36 INS42 INS42 INS42 INS33 INS53 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS14 INS42 INS33 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS60 INS21 INS60 INS21 INS21 INS21 INS42 INS14 INS42 INS33 INS21 INS60 INS54 INS43 INS59 INS8 INS12 MOV27 INS14 INS42 INS42 INS32 INS42 INS43 INS1 INS42 INS42 INS14 INS43 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 INS43 INS27 INS42 INS32 INS43 INS59 INS8 INS12 INS42 INS42 INS32 INS21 MOV21 INS44 INS8 INS60 INS21 INS43 INS45 INS42 INS42 INS31 INS43 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS3 INS42 INS42 INS45 INS3 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS21 MOV21 MOV25 INS44 INS8 INS42 INS42 INS42 INS32 INS43 INS42 MOV21 INS43 INS59 INS32 INS42 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS5 INS4 INS5 INS4 INS42 INS42 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS43 INS42 INS60 INS21 INS25 INS53 INS60 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS54 INS42 INS42 INS43 INS85 INS42 INS36 INS43 INS85 INS42 INS36 INS27 INS27 INS42 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS14 INS43 INS59 INS32 INS27 INS8 UPD42 INS42 INS45 INS3 UPD42 MOV42 UPD42 MOV42 MOV42 INS8 INS12 INS42 INS27 INS42 INS27 MOV27 INS32 INS32 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS33 INS21 INS43 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS33 INS21 INS5 INS4 INS21 INS21 INS44 INS8 INS32 INS42 INS32 INS42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS45 INS42 MOV43 MOV42 MOV42 INS32 INS43 INS85 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 DEL32 DEL21 DEL32 DEL38 DEL27 DEL32 DEL21 DEL42 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42