JCR-247: Child axis support for XPath predicates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477599 13f79535-47bb-0310-9956-ffa450edef68

+            Path relPath = node.getRelativePath();
-            if (node.getPropertyName() == null) {
+            if (relPath == null || !node.getReferencesProperty()) {
+                // final path element is a property name
+                QName propName = relPath.getNameElement().getName();
-                tmp.append(nsMappings.getPrefix(node.getPropertyName().getNamespaceURI()));
+                tmp.append(nsMappings.getPrefix(propName.getNamespaceURI()));
-                tmp.append(node.getPropertyName().getLocalName());
+                tmp.append(propName.getLocalName());
-            return parser.parse(query.toString());
+            Query context = parser.parse(query.toString());
+            if (relPath != null && (!node.getReferencesProperty() || relPath.getLength() > 1)) {
+                // text search on some child axis
+                Path.PathElement[] elements = relPath.getElements();
+                for (int i = elements.length - 1; i >= 0; i--) {
+                    String name = null;
+                    if (!elements[i].getName().equals(RelationQueryNode.STAR_NAME_TEST)) {
+                        name = NameFormat.format(elements[i].getName(), nsMappings);;
+                    }
+                    // join text search with name test
+                    // if path references property that's elements.length - 2
+                    // if path references node that's elements.length - 1
+                    if (name != null
+                            && ((node.getReferencesProperty() && i == elements.length - 2)
+                                || (!node.getReferencesProperty() && i == elements.length - 1))) {
+                        Query q = new TermQuery(new Term(FieldNames.LABEL, name));
+                        BooleanQuery and = new BooleanQuery();
+                        and.add(q, true, false);
+                        and.add(context, true, false);
+                        context = and;
+                    } else if ((node.getReferencesProperty() && i < elements.length - 2)
+                            || (!node.getReferencesProperty() && i < elements.length - 1)) {
+                        // otherwise do a parent axis step
+                        context = new ParentAxisQuery(context, name);
+                    }
+                }
+                // finally select parent
+                context = new ParentAxisQuery(context, null);
+            }
+            return context;
+        } catch (NoPrefixDeclaredException e) {
+            exceptions.add(e);
-                    stringValues = getStringValues(node.getProperty(), node.getStringValue());
+                    QName propertyName = node.getRelativePath().getNameElement().getName();
+                    stringValues = getStringValues(propertyName, node.getStringValue());
-        if (node.getProperty() == null) {
+        if (node.getRelativePath() == null) {
+        Path relPath = node.getRelativePath();
-            field = NameFormat.format(node.getProperty(), nsMappings);
+            field = NameFormat.format(relPath.getNameElement().getName(), nsMappings);
+
+        if (relPath.getLength() > 1) {
+            try {
+                // child axis in relation
+                Path.PathElement[] elements = relPath.getElements();
+                // elements.length - 1 = property name
+                // elements.length - 2 = last child axis name test
+                for (int i = elements.length - 2; i >= 0; i--) {
+                    String name = null;
+                    if (!elements[i].getName().equals(RelationQueryNode.STAR_NAME_TEST)) {
+                        name = NameFormat.format(elements[i].getName(), nsMappings);
+                    }
+                    if (i == elements.length - 2) {
+                        // join name test with property query if there is one
+                        if (name != null) {
+                            Query nameTest = new TermQuery(new Term(FieldNames.LABEL, name));
+                            BooleanQuery and = new BooleanQuery();
+                            and.add(query, true, false);
+                            and.add(nameTest, true, false);
+                            query = and;
+                        } else {
+                            // otherwise the query can be used as is
+                        }
+                    } else {
+                        query = new ParentAxisQuery(query, name);
+                    }
+                }
+            } catch (NoPrefixDeclaredException e) {
+                // should never happen
+                exceptions.add(e);
+            }
+            // finally select the parent of the selected nodes
+            query = new ParentAxisQuery(query, null);
+        }
+

INS60 INS25 INS12 INS43 INS59 INS27 INS8 INS60 INS60 INS25 INS44 INS8 INS42 INS42 INS32 INS32 INS34 INS54 INS21 INS43 INS59 UPD27 INS43 INS59 INS27 INS8 INS42 INS43 INS42 INS21 INS60 UPD42 INS42 INS42 INS42 INS42 INS8 INS12 INS7 INS42 INS42 INS32 INS27 INS38 INS60 INS42 INS42 MOV32 INS27 INS36 INS60 INS24 INS21 INS42 INS32 INS43 INS59 INS60 INS24 INS44 INS8 INS42 INS14 INS42 INS42 INS42 INS33 INS32 INS43 INS59 INS42 INS33 INS27 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS42 INS21 INS43 INS42 INS33 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS38 INS27 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS34 INS42 INS60 INS25 INS25 INS42 INS14 INS32 INS42 UPD42 MOV42 INS32 UPD42 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS34 INS42 INS60 INS25 INS25 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS32 INS32 INS34 INS40 INS42 INS42 INS42 INS27 INS43 INS59 INS38 INS8 INS27 INS8 INS25 INS43 INS42 INS33 INS32 INS42 UPD42 MOV42 INS42 INS40 INS42 INS42 INS42 INS27 INS43 INS59 INS38 INS8 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS40 INS34 INS42 INS42 INS33 INS32 INS21 INS20 INS27 INS36 INS60 INS60 INS21 INS21 INS21 INS27 INS8 INS42 INS42 INS42 INS40 INS34 INS42 INS42 INS33 INS32 INS21 INS42 INS27 INS25 INS21 INS32 INS42 INS40 INS7 INS42 INS33 INS27 INS43 INS59 INS43 INS59 INS32 INS32 INS7 INS36 INS36 INS21 INS32 INS42 INS40 INS7 INS40 INS34 INS27 INS8 INS8 INS7 INS2 INS42 INS42 INS32 INS36 INS36 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS27 INS27 INS7 INS2 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS21 INS21 INS21 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS27 INS43 INS14 INS43 INS32 INS27 INS38 INS27 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS7 INS43 INS42 INS42 INS2 INS42 INS32 INS27 INS38 INS27 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS27 INS43 INS42 INS42 INS2 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS27 INS42 INS40 INS34 INS42 INS42 INS40 INS34 INS42 INS42 INS42 INS43 INS14 INS43 INS40 INS34 INS42 INS42 INS40 INS34 INS42 INS43 INS40 INS42 INS42 INS42 DEL32 DEL33 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32