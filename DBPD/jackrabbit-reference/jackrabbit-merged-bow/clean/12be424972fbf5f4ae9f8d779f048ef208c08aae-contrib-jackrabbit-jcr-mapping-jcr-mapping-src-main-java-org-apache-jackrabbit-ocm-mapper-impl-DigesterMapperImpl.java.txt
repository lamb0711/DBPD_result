Refactor Mapper & reader (issue 1113). 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@573060 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Collection;
-import java.util.Iterator;
-import java.util.Map;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.jackrabbit.ocm.exception.IncorrectPersistentClassException;
+
-import org.apache.jackrabbit.ocm.exception.JcrMappingException;
-import org.apache.jackrabbit.ocm.mapper.model.ClassDescriptor;
- *
+ * 
-public class DigesterMapperImpl implements Mapper {
-    private static final Log log = LogFactory.getLog(DigesterMapperImpl.class);
-
-    private MappingDescriptor mappingDescriptor;
-    private Collection rootClassDescriptors = new ArrayList(); // contains the class descriptor which have not ancestors 
-
-    private String[] mappingFiles;
-    private InputStream[] mappingStreams;
-    private DigesterDescriptorReader descriptorReader;
+public class DigesterMapperImpl extends AbstractMapperImpl implements Mapper {
+    
-        this.mappingFiles = new String[] { xmlFile };
+        descriptorReader = new DigesterDescriptorReader(xmlFile);
-        this.mappingFiles = files;
+        descriptorReader = new DigesterDescriptorReader(files);
-        this.mappingStreams = new InputStream[] { stream };
+        descriptorReader = new DigesterDescriptorReader(stream);
-        this.mappingStreams = streams;
+        descriptorReader = new DigesterDescriptorReader(streams);
-    /**
-     * Set a mapping file.
-     * 
-     * @param file path to mapping file
-     */
-    public void setMappingFile(String file) {
-        setMappingFiles(new String[] { file });
-        this.buildMapper();
-    }
-
-    /**
-     * 
-     * @param files
-     */
-    public void setMappingFiles(String[] files) {
-        this.mappingFiles = files;
-    }
-
-    public void setMappingStream(InputStream stream) {
-        setMappingStreams(new InputStream[] { stream });
-    }
-
-    public void setMappingStreams(InputStream[] streams) {
-        this.mappingStreams = streams;
-    }
-
-    public void setDescriptorReader(DigesterDescriptorReader reader) {
-        this.descriptorReader = reader;
-    }
-
-    private Mapper buildMapper() {
-        if (this.descriptorReader == null) {
-            this.descriptorReader = new DigesterDescriptorReader();
-        }
-        if (this.mappingFiles != null && this.mappingFiles.length > 0) {
-            log.info("Read the xml mapping file : " +  this.mappingFiles[0]);
-            this.mappingDescriptor = this.descriptorReader.loadClassDescriptors(this.mappingFiles[0]);
-            this.mappingDescriptor.setMapper(this);
-
-            for (int i = 1; i < this.mappingFiles.length; i++) {
-                log.info("Read the xml mapping file : " +  this.mappingFiles[i]);
-                MappingDescriptor anotherMappingDescriptor = this.descriptorReader.loadClassDescriptors(this.mappingFiles[i]);
-                this.mappingDescriptor.getClassDescriptorsByClassName().putAll(anotherMappingDescriptor.getClassDescriptorsByClassName());
-                this.mappingDescriptor.getClassDescriptorsByNodeType().putAll(anotherMappingDescriptor.getClassDescriptorsByNodeType());
-                
-            }
-        }
-        else if (this.mappingStreams != null && this.mappingStreams.length > 0) {
-            log.info("Read the stream mapping file : " +  this.mappingStreams[0].toString());
-            this.mappingDescriptor = this.descriptorReader.loadClassDescriptors(this.mappingStreams[0]);
-            this.mappingDescriptor.setMapper(this);
-
-            for (int i = 1; i < this.mappingStreams.length; i++) {
-                log.info("Read the stream mapping file : " +  this.mappingStreams[i].toString());
-                MappingDescriptor anotherMappingDescriptor = this.descriptorReader.loadClassDescriptors(this.mappingStreams[i]);
-                this.mappingDescriptor.getClassDescriptorsByClassName().putAll(anotherMappingDescriptor.getClassDescriptorsByClassName());
-                this.mappingDescriptor.getClassDescriptorsByNodeType().putAll(anotherMappingDescriptor.getClassDescriptorsByNodeType());
-            }
-        }
-        if (null != this.mappingDescriptor) {
-            List errors = new ArrayList();
-            errors =  solveReferences(errors);            
-            errors = validateDescriptors(errors, rootClassDescriptors);
-
-            if (!errors.isEmpty()) {
-                throw new InitMapperException("Mapping files contain errors."
-                        + getErrorMessage(errors));
-            }
-        }
-        else {
-            throw new InitMapperException("No mappings were provided");
-        }
-        
-        return this;
-    }
-
-    private List solveReferences(List errors) {
-        for(Iterator it = this.mappingDescriptor.getClassDescriptorsByClassName().entrySet().iterator(); it.hasNext(); ) {
-            Map.Entry entry = (Map.Entry) it.next();
-            ClassDescriptor cd = (ClassDescriptor) entry.getValue();
-
-            if (null != cd.getExtend() && !"".equals(cd.getExtend())) 
-            {
-                ClassDescriptor superClassDescriptor = this.mappingDescriptor.getClassDescriptorByName(cd.getExtend());
-
-                if (null == superClassDescriptor) 
-                {
-                    errors.add("Cannot find mapping for class "
-                            + cd.getExtend()
-                            + " referenced as extends from "
-                            + cd.getClassName());
-                }
-                else 
-                {
-            	       log.debug("Class " +cd.getClassName() +  " extends " + cd.getExtend());
-                    cd.setSuperClassDescriptor(superClassDescriptor);
-                }
-            }
-            else
-            {
-                   rootClassDescriptors.add(cd);
-            }
-            
-            Collection interfaces = cd.getImplements();
-            if (interfaces.size() > 0) 
-            {	
-            	      for (Iterator iterator = interfaces.iterator(); iterator.hasNext();)
-            	      {
-            	    	          String interfaceName= (String) iterator.next();
-                          ClassDescriptor interfaceClassDescriptor = this.mappingDescriptor.getClassDescriptorByName(interfaceName);
-
-                          if (null == interfaceClassDescriptor) 
-                          {
-                              errors.add("Cannot find mapping for interface "
-                                      + interfaceName
-                                      + " referenced as implements from "
-                                      + cd.getClassName());
-                          }
-                          else 
-                          {
-                      	       log.debug("Class " +cd.getClassName() +  " implements " + interfaceName);
-                              //cd.setSuperClassDescriptor(interfaceClassDescriptor);
-                      	      interfaceClassDescriptor.addDescendantClassDescriptor(cd); 
-                          }
-            	    	      
-            	      }
-            }
-            
-        }
-
-        return errors;
-    }
-    
-    /**
-     * Validate all class descriptors.
-     * This method validates the toplevel ancestors and after the descendants. 
-     * Otherwise, we can have invalid settings in the class descriptors
-     * @param errors all errors found during the validation process
-     * @param classDescriptors the ancestor classdescriptors
-     * @return
-     */
-    private List  validateDescriptors(List errors, Collection classDescriptors ) {
-        for(Iterator it = classDescriptors.iterator(); it.hasNext(); ) {
-            ClassDescriptor classDescriptor = (ClassDescriptor) it.next();
-            try {
-                classDescriptor.afterPropertiesSet();
-                if (classDescriptor.hasDescendants()) {
-                    errors = validateDescriptors(errors, classDescriptor.getDescendantClassDescriptors());
-                }
-            }
-            catch(JcrMappingException jme) {
-                log.warn("Mapping of class " + classDescriptor.getClassName() + " is invalid", jme);
-                errors.add(jme.getMessage());
-            }
-        }
-        return errors;
-    }    
-    
-    private String getErrorMessage(List errors) {
-        final String lineSep = System.getProperty("line.separator");
-        StringBuffer buf = new StringBuffer();
-        for(Iterator it = errors.iterator(); it.hasNext();) {
-            buf.append(lineSep).append(it.next());
-        }
-
-        return buf.toString();
-    }    
-    
-    /**
-    *
-    * @see org.apache.jackrabbit.ocm.mapper.Mapper#getClassDescriptorByClass(java.lang.Class)
-    */
-   public ClassDescriptor getClassDescriptorByClass(Class clazz) {
-	   ClassDescriptor descriptor = mappingDescriptor.getClassDescriptorByName(clazz.getName());
-	   if (descriptor==null) {
-			throw new IncorrectPersistentClassException("Class of type: " + clazz.getName() + " has no descriptor.");
-	   }
-       return descriptor ; 
-   }
-   
-   /**
-   * @see org.apache.jackrabbit.ocm.mapper.Mapper#getClassDescriptorByNodeType(String)
-   */
-  public ClassDescriptor getClassDescriptorByNodeType(String jcrNodeType) {
-	  ClassDescriptor descriptor = mappingDescriptor.getClassDescriptorByNodeType(jcrNodeType);
-	   if (descriptor==null) {
-			throw new IncorrectPersistentClassException("Node type: " + jcrNodeType + " has no descriptor.");
-	   }
-      return descriptor ;      
-  }
-   

INS43 UPD42 MOV42 MOV8 MOV21 MOV21 MOV21 MOV21 INS42 INS14 INS42 INS14 INS42 INS42 INS14 INS43 INS42 MOV43 INS42 INS42 MOV43 INS42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32 DEL21 DEL52 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL25 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL22 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL34 DEL2 DEL27 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL34 DEL2 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL52 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL27 DEL42 DEL37 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL42 DEL2 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL2 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL22 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL34 DEL2 DEL42 DEL32 DEL27 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL34 DEL2 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL52 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL27 DEL42 DEL37 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL42 DEL2 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL2 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL25 DEL33 DEL52 DEL42 DEL22 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL52 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL33 DEL42 DEL42 DEL32 DEL27 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL40 DEL42 DEL40 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL40 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31