JCR-2360: JcrUtils.getRepository(...) for simple repository access

Make the jackrabbit-core RepositoryFactoryImpl interpret file: URIs.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@897836 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.util.HashMap;
- *     Connects to the given repository URI.
- *     See {@link JcrUtils#getRepository(String)} for the supported URI types.
- *     Note that this class does not directly implement all these connection
- *     mechanisms. Instead it maps the given repository URI to known
- *     {@link RepositoryFactory} parameters and uses the Java Service
- *     Provider mechanism to recursively ask all the available repository
- *     factories to handle the resulting connection parameters. All the other
- *     parameters except the repository URI from the original invocation are
- *     also passed on to these recursive calls.
+ *     Connects to the repository at the given jndi: URI.
+ *     All the other parameters except the repository URI from the original
+ *     invocation are also passed on to these recursive calls.
-            return null;
-        } else if (parameters.containsKey(URI)) {
-            return getUriRepository(parameters);
-        } else if (parameters.containsKey(JNDI_NAME)) {
-            return getJndiRepository(parameters);
+            return null; // no default JNDI repository
-            return null;
-        }
-    }
-
-    /**
-     * Implements the repository URI connection as documented in the
-     * description of this class.
-     *
-     * @param original original repository parameters, including {@link #URI}
-     * @return repository instance
-     * @throws RepositoryException if the repository can not be accessed,
-     *                             or if the URI is invalid or unknown
-     */
-    private Repository getUriRepository(Map original)
-            throws RepositoryException {
-        Map parameters = new HashMap(original);
-        String parameter = parameters.remove(URI).toString().trim();
-
-        try {
-            URI uri = new URI(parameter);
-            String scheme = uri.getScheme();
-            if ("jndi".equalsIgnoreCase(scheme)) {
-                parameters.put(JNDI_NAME, uri.getSchemeSpecificPart());
-            } else if ("file".equalsIgnoreCase(scheme)) {
-                File file = new File(uri);
-                String home, conf;
-                if (file.isFile()) {
-                    home = file.getParentFile().getPath();
-                    conf = file.getPath();
-                } else {
-                    home = file.getPath();
-                    conf = new File(file, "repository.xml").getPath();
+            Hashtable environment = new Hashtable(parameters);
+            if (environment.containsKey(JNDI_NAME)) {
+                String name = environment.remove(JNDI_NAME).toString();
+                return getRepository(name, environment);
+            } else if (environment.containsKey(URI)) {
+                Object parameter = environment.remove(URI);
+                try {
+                    URI uri = new URI(parameter.toString().trim());
+                    if ("jndi".equalsIgnoreCase(uri.getScheme())) {
+                        String name = uri.getSchemeSpecificPart();
+                        return getRepository(name, environment);
+                    } else {
+                        return null; // not a jndi: URI
+                    }
+                } catch (URISyntaxException e) {
+                    return null; // not a valid URI
-                parameters.put("org.apache.jackrabbit.repository.home", home);
-                parameters.put("org.apache.jackrabbit.repository.conf", conf);
-                return null;
+                return null; // unknown parameters
-        } catch (URISyntaxException e) {
-            return null;
-
-        return JcrUtils.getRepository(parameters);
-    /**
-     * Implements the JNDI lookup as documented in the description of
-     * this class.
-     *
-     * @param parameters repository parameters, including {@link #JNDI_NAME}
-     * @return the repository instance from JNDI
-     * @throws RepositoryException if the name is not found in JNDI
-     *                             or does not point to a repository instance
-     */
-    private Repository getJndiRepository(Map parameters)
+    private Repository getRepository(String name, Hashtable environment)
-        Hashtable environment = new Hashtable(parameters);
-        String name = environment.remove(JNDI_NAME).toString();
-

INS31 MOV29 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 INS83 INS42 INS44 INS44 UPD66 UPD66 UPD66 INS25 MOV43 INS42 INS43 INS42 MOV27 MOV8 INS8 INS42 MOV60 INS25 MOV32 MOV8 INS25 UPD42 UPD42 MOV60 MOV32 INS8 MOV8 UPD42 UPD42 INS60 MOV54 UPD42 UPD42 INS42 UPD43 MOV43 MOV59 UPD42 INS32 UPD42 MOV42 MOV42 MOV42 MOV43 MOV8 MOV8 MOV32 INS41 MOV43 INS32 MOV43 INS32 INS32 INS42 UPD42 MOV32 INS42 INS42 UPD42 MOV42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL45 DEL42 DEL42 DEL32 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL25 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL42 DEL67 DEL65 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL42 DEL67 DEL65 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42