JCR-2946 - Improve implementation of DavResource#getProperty(DavPropertyName)
JCR-2948 - Add possibility to PROPFIND the JCR_NODETYPES_CND_LN property

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1155296 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.version.DeltaVConstants;
+import org.apache.jackrabbit.webdav.jcr.property.JcrDavPropertyNameSet;
+     * @param factory
+     * @param item
+    @Override
+    public DavProperty<?> getProperty(DavPropertyName name) {
+        DavProperty prop = super.getProperty(name);
+
+        if (prop == null && exists()) {
+            Node n = (Node) item;
+
+            // add node-specific resource properties
+            try {
+                if (JCR_INDEX.equals(name)) {
+                    prop = new DefaultDavProperty<Integer>(JCR_INDEX, n.getIndex(), true);
+                } else if (JCR_REFERENCES.equals(name)) {
+                    prop = getHrefProperty(JCR_REFERENCES, n.getReferences(), true);
+                } else if (JCR_WEAK_REFERENCES.equals(name)) {
+                    prop = getHrefProperty(JCR_WEAK_REFERENCES, n.getWeakReferences(), true);
+                } else if (JCR_UUID.equals(name)) {
+                    if (isReferenceable()) {
+                        prop = new DefaultDavProperty<String>(JCR_UUID, n.getUUID(), true);
+                    }
+                } else if (JCR_PRIMARYITEM.equals(name)) {
+                    if (hasPrimaryItem()) {
+                        Item primaryItem = n.getPrimaryItem();
+                        prop = getHrefProperty(JCR_PRIMARYITEM, new Item[] {primaryItem}, true);
+                    }
+                } else if (OrderingConstants.ORDERING_TYPE.equals(name) && isOrderable()) {
+                    // property defined by RFC 3648: this resource always has custom ordering!                    
+                    prop = new OrderingType(OrderingConstants.ORDERING_TYPE_CUSTOM);
+                }
+            } catch (RepositoryException e) {
+                log.error("Failed to retrieve node-specific property: " + e);
+            }          
+        }
+
+        return prop;
+    }
+
+    @Override
+    protected void initPropertyNames() {
+        super.initPropertyNames();
+
+        if (exists()) {
+            names.addAll(JcrDavPropertyNameSet.NODE_SET);
+            
+            if (isReferenceable()) {
+                names.add(JCR_UUID);
+            }
+            if (hasPrimaryItem()) {
+                names.add(JCR_PRIMARYITEM);
+            }
+            if (isOrderable()) {
+                names.add(OrderingConstants.ORDERING_TYPE);
+            }
+        }
+    }
+                                              
-            // overwrite the default creation date and creator-displayname if possible
-            try {
-                if (n.hasProperty(JcrConstants.JCR_CREATED)) {
-                    long creationTime = n.getProperty(JcrConstants.JCR_CREATED).getValue().getLong();
-                    properties.add(new DefaultDavProperty<String>(DavPropertyName.CREATIONDATE,
-                        HttpDateFormat.creationDateFormat().format(new Date(creationTime))));
-                }
-                // DAV:creator-displayname -> use jcr:createBy if present.
-                if (n.hasProperty(Property.JCR_CREATED_BY)) {
-                    String createdBy = n.getProperty(Property.JCR_CREATED_BY).getString();
-                    properties.add(new DefaultDavProperty<String>(DeltaVConstants.CREATOR_DISPLAYNAME, createdBy, true));
-                }
-            } catch (RepositoryException e) {
-                log.warn("Error while accessing jcr:created or jcr:createdBy property");
-            }
-                properties.add(new DefaultDavProperty<Integer>(JCR_INDEX, n.getIndex(), true));
-                addHrefProperty(JCR_REFERENCES, n.getReferences(), true);
-                addHrefProperty(JCR_WEAK_REFERENCES, n.getWeakReferences(), true);
-                if (n.isNodeType(JcrConstants.MIX_REFERENCEABLE)) {
-                    properties.add(new DefaultDavProperty<String>(JCR_UUID, n.getUUID(), true));
-                }
-            try {
-                Item primaryItem = n.getPrimaryItem();
-                addHrefProperty(JCR_PRIMARYITEM, new Item[] {primaryItem}, true);
-            } catch (ItemNotFoundException e) {
-                log.debug("No primary item present on this node '" + getResourcePath() + "'");
-            } catch (RepositoryException e) {
-                log.error("Error while retrieving primary item: " + e.getMessage());
-            }
-
-            // property defined by RFC 3648: this resource always has custom ordering!
-            if (isOrderable()) {
-                properties.add(new OrderingType(OrderingConstants.ORDERING_TYPE_CUSTOM));
-            }
+    }  
+
+    @Override
+    protected String getCreatorDisplayName() {
+        // overwrite the default creation date and creator-displayname if possible
+        try {
+            // DAV:creator-displayname -> use jcr:createBy if present.
+            if (exists() && ((Node) item).hasProperty(Property.JCR_CREATED_BY)) {
+                return ((Node) item).getProperty(Property.JCR_CREATED_BY).getString();
+            }
+        } catch (RepositoryException e) {
+            log.warn("Error while accessing jcr:createdBy property");
+        }
+
+        // fallback
+        return super.getCreatorDisplayName();
+    }
+
+    @Override
+    protected String getCreationDate() {
+        // overwrite the default creation date and creator-displayname if possible
+        try {
+            if (exists() && ((Node) item).hasProperty(JcrConstants.JCR_CREATED)) {
+                long creationTime = ((Node) item).getProperty(JcrConstants.JCR_CREATED).getValue().getLong();
+                return HttpDateFormat.creationDateFormat().format(new Date(creationTime));
+            }
+        } catch (RepositoryException e) {
+            log.warn("Error while accessing jcr:created property");
+        }
+
+        // fallback
+        return super.getCreationDate();
+    }
+
+    /**
+     * Creates a new HrefProperty with the specified name using the given
+     * array of items as value.
+     * 
+     * @param name
+     * @param values
+     * @param isProtected
+     * @return
+     */
+    protected HrefProperty getHrefProperty(DavPropertyName name, Item[] values, boolean isProtected) {
+        String[] pHref = new String[values.length];
+        for (int i = 0; i < values.length; i++) {
+            pHref[i] = getLocatorFromItem(values[i]).getHref(true);
+        }
+        return new HrefProperty(name, pHref, isProtected);
-        if (values == null) {
-            return;
+        properties.add(getHrefProperty(name, values, isProtected));
+    }
+
+    /**
+     * Creates a new {@link HrefProperty href property} to the property set, where
+     * all properties present in the specified iterator are referenced in the
+     * resulting property.
+     * 
+     * @param name
+     * @param itemIterator
+     * @param isProtected
+     * @return
+     */
+    protected HrefProperty getHrefProperty(DavPropertyName name, PropertyIterator itemIterator,
+                                           boolean isProtected) {
+        ArrayList<Property> l = new ArrayList<Property>();
+        while (itemIterator.hasNext()) {
+            l.add(itemIterator.nextProperty());
-        String[] pHref = new String[values.length];
-        for (int i = 0; i < values.length; i++) {
-            pHref[i] = getLocatorFromItem(values[i]).getHref(true);
-        }
-        properties.add(new HrefProperty(name, pHref, isProtected));
+        return getHrefProperty(name, l.toArray(new Property[l.size()]), isProtected);
-     * all properties present in the specifed iterator are referenced in the
+     * all properties present in the specified iterator are referenced in the
-        ArrayList<Property> l = new ArrayList<Property>();
-        while (itemIterator.hasNext()) {
-            l.add(itemIterator.nextProperty());
-        }
-        addHrefProperty(name, l.toArray(new Property[l.size()]), isProtected);
+        properties.add(getHrefProperty(name, itemIterator, isProtected));
-     * all versions present in the specifed iterator are referenced in the
+     * all versions present in the specified iterator are referenced in the
+     * resulting property.
+     *
+     * @param name
+     * @param itemIterator
+     * @param isProtected
+     */
+    protected HrefProperty getHrefProperty(DavPropertyName name, VersionIterator itemIterator,
+                                   boolean isProtected) {
+        ArrayList<Version> l = new ArrayList<Version>();
+        while (itemIterator.hasNext()) {
+            l.add(itemIterator.nextVersion());
+        }
+        return getHrefProperty(name, l.toArray(new Version[l.size()]), isProtected);
+    }
+
+    /**
+     * Add a new {@link HrefProperty href property} to the property set, where
+     * all versions present in the specified iterator are referenced in the
-        ArrayList<Version> l = new ArrayList<Version>();
-        while (itemIterator.hasNext()) {
-            l.add(itemIterator.nextVersion());
-        }
-        addHrefProperty(name, l.toArray(new Version[l.size()]), isProtected);
+        properties.add(getHrefProperty(name, itemIterator, isProtected));
+
+    private boolean hasPrimaryItem() {
+        try {
+            return exists() && ((Node) item).getPrimaryNodeType().getPrimaryItemName() != null;
+        } catch (RepositoryException e) {
+            log.warn(e.getMessage());
+        }
+        return false;
+    }
+    
+    private boolean isReferenceable() {
+        try {
+            return exists() && ((Node) item).isNodeType(JcrConstants.MIX_REFERENCEABLE);
+        } catch (RepositoryException e) {
+            log.warn(e.getMessage());
+        }
+        return false;
+    }

UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS74 INS42 INS44 INS8 INS78 MOV83 MOV39 INS42 INS8 MOV29 MOV78 INS83 INS39 MOV42 INS8 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 MOV43 INS42 INS8 INS29 INS43 INS42 MOV29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS43 INS42 MOV29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS43 INS42 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS65 INS65 INS42 INS43 INS76 INS43 INS42 INS60 INS25 INS41 INS42 INS21 INS25 MOV21 INS25 INS42 INS54 INS41 INS42 INS54 INS41 INS65 INS65 INS65 INS65 INS65 INS42 MOV41 INS43 INS42 INS5 INS42 INS39 INS42 MOV21 INS65 INS65 INS65 INS65 INS65 INS42 INS41 INS43 INS42 INS43 INS42 INS39 INS42 INS21 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 MOV21 INS54 INS41 MOV54 INS41 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS48 INS32 INS8 MOV32 INS8 INS8 INS12 INS48 INS8 INS12 INS48 INS66 INS66 INS42 INS42 INS42 MOV14 INS42 INS43 INS85 INS66 INS65 INS66 INS66 INS66 INS42 INS42 INS42 MOV32 UPD66 INS42 UPD42 MOV42 INS32 UPD66 MOV32 INS66 INS65 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS8 MOV12 INS9 INS8 INS9 INS42 INS42 INS48 INS27 INS32 INS60 INS54 INS42 INS42 INS21 INS25 INS25 INS25 MOV21 MOV60 MOV54 INS25 MOV44 INS8 INS42 INS25 MOV44 INS8 INS42 INS42 INS32 INS42 INS66 UPD42 UPD42 MOV42 INS42 INS32 UPD42 INS42 INS66 INS32 INS41 INS44 INS41 INS42 INS42 INS42 INS33 INS42 INS43 INS59 INS8 INS12 INS32 INS32 INS8 INS32 INS8 MOV32 INS8 INS27 INS8 INS21 INS27 INS8 INS21 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS27 UPD43 INS42 INS42 INS11 INS25 INS44 INS8 INS42 INS42 INS40 INS42 INS21 INS42 INS21 INS21 INS32 INS32 INS41 INS32 INS32 INS32 MOV60 INS41 INS32 INS32 INS27 INS42 INS32 INS32 UPD42 INS43 INS42 INS32 INS8 INS25 INS43 INS42 INS21 INS32 INS32 INS32 INS42 INS36 INS42 INS40 INS32 INS42 INS42 INS45 INS42 INS36 MOV42 MOV40 MOV32 INS42 INS42 INS45 INS42 INS32 INS33 UPD42 MOV32 INS42 INS36 INS42 INS40 UPD42 INS32 INS42 INS42 INS42 INS42 MOV21 INS32 INS8 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS11 INS32 INS42 INS11 INS32 INS42 INS11 INS42 UPD42 MOV42 INS7 INS42 INS42 INS42 MOV21 INS32 INS8 INS25 INS42 INS42 INS27 INS43 INS42 INS36 INS42 INS40 INS43 INS42 INS36 INS42 INS43 INS42 INS42 MOV14 INS7 INS42 INS42 INS42 MOV21 INS32 INS8 INS25 INS45 INS42 INS42 INS11 INS42 INS11 INS42 INS42 MOV32 INS7 INS42 INS42 INS42 MOV25 INS32 INS8 MOV25 INS43 INS42 INS36 INS43 INS42 UPD42 INS42 MOV32 INS42 INS42 INS42 INS25 INS27 INS42 INS11 INS42 UPD42 UPD42 INS32 MOV8 INS32 INS32 INS43 INS42 INS7 INS42 INS40 INS42 INS42 INS42 INS7 INS42 INS42 MOV14 INS7 INS42 MOV14 INS42 MOV32 UPD42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL43 DEL42 DEL40 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL74 DEL40 DEL14 DEL39 DEL42 DEL21 DEL39 DEL42 DEL21 DEL42 DEL43 DEL74 DEL40 DEL42 DEL9 DEL14 DEL45 DEL27 DEL45 DEL32 DEL45 DEL27