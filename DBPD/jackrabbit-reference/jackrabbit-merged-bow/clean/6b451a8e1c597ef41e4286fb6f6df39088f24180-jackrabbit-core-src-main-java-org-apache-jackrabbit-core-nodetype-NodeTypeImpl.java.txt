JCR-1483: Move common node type functionality to jackrabbit-spi-commons
- replaced NodeTypeDef (jackrabbit-core) with QNodeTypeDefinition
- QNodeTypeDefinitionImpl is not immutable, hence no cloning needed anymore
- introduced QNodeTypeDefinitionBuilder
- moved constructors of Q*DefinitionImpl classes in spi2jcr to spi-commons
- fixed a bug in RepositoryServiceImpl in spi2jcr

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816551 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
+import java.util.List;
+import org.apache.jackrabbit.spi.QNodeTypeDefinition;
-    private final NodeTypeDef ntd;
+    private final QNodeTypeDefinition ntd;
-     * Creates a valid node type instance.
-     * We assume that the node type definition is valid and all referenced
-     * node types (supertypes, required node types etc.) do exist and are valid.
+     * Creates a valid node type instance. We assume that the node type
+     * definition is valid and all referenced node types (supertypes, required
+     * node types etc.) do exist and are valid.
-     * @param ent        the effective (i.e. merged and resolved) node type representation
-     * @param ntd        the definition of this node type
-     * @param ntMgr      the node type manager associated with this node type
-     * @param resolver
+     * @param ent          the effective (i.e. merged and resolved) node type
+     *                     representation
+     * @param ntd          the definition of this node type
+     * @param ntMgr        the node type manager associated with this node type
+     * @param resolver     the name path resolver of the session.
+     * @param valueFactory the value factory of the session.
+     * @param store        the data store or <code>null</code> if none is
+     *                     configured.
-    NodeTypeImpl(EffectiveNodeType ent, NodeTypeDef ntd,
-                 NodeTypeManagerImpl ntMgr, NamePathResolver resolver,
-                 ValueFactory valueFactory, DataStore store) {
+    NodeTypeImpl(EffectiveNodeType ent,
+                 QNodeTypeDefinition ntd,
+                 NodeTypeManagerImpl ntMgr,
+                 NamePathResolver resolver,
+                 ValueFactory valueFactory,
+                 DataStore store) {
-     * @param nodeTypeName
+     * @param nodeTypeName the name of a node type.
-     * @param nodeTypeName
+     * @param nodeTypeName the name of a node type.
-    public NodeTypeDef getDefinition() {
-        // return clone to make sure nobody messes around with the 'live' definition
-        return (NodeTypeDef) ntd.clone();
+    public QNodeTypeDefinition getDefinition() {
+        return ntd;
-        HashSet declared = new HashSet();
-        for (int i = 0; i < ntNames.length; i++) {
-            declared.add(ntNames[i]);
+        Set<Name> declared = new HashSet<Name>();
+        for (Name ntName : ntNames) {
+            declared.add(ntName);
-        ArrayList inherited = new ArrayList();
-        for (int i = 0; i < ntNames.length; i++) {
-            if (!declared.contains(ntNames[i])) {
+        List<NodeType> inherited = new ArrayList<NodeType>();
+        for (Name ntName : ntNames) {
+            if (!declared.contains(ntName)) {
-                    inherited.add(ntMgr.getNodeType(ntNames[i]));
+                    inherited.add(ntMgr.getNodeType(ntName));
-        return (NodeType[]) inherited.toArray(new NodeType[inherited.size()]);
+        return inherited.toArray(new NodeType[inherited.size()]);
-            for (int i = 0; i < values.length; i++) {
-                if (values[i] == null) {
+            for (Value value : values) {
+                if (value == null) {
-                    type = values[i].getType();
-                } else if (type != values[i].getType()) {
+                    type = value.getType();
+                } else if (type != value.getType()) {
-            ArrayList list = new ArrayList();
+            List<InternalValue> list = new ArrayList<InternalValue>();
-            for (int i = 0; i < values.length; i++) {
-                if (values[i] != null) {
+            for (Value value : values) {
+                if (value != null) {
-                        Value targetVal = ValueHelper.convert(
-                                values[i], targetType, valueFactory);
+                        Value targetVal = ValueHelper.convert(value, targetType, valueFactory);
-                        internalValue = InternalValue.create(values[i], resolver, store);
+                        internalValue = InternalValue.create(value, resolver, store);
-            InternalValue[] internalValues =
-                    (InternalValue[]) list.toArray(new InternalValue[list.size()]);
+            InternalValue[] internalValues = list.toArray(new InternalValue[list.size()]);

INS26 INS26 INS26 INS40 INS40 INS40 UPD43 UPD43 UPD42 INS65 INS65 UPD43 UPD42 INS70 INS70 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 INS66 INS66 INS42 INS74 INS44 INS42 INS8 INS74 INS44 INS42 MOV8 MOV32 INS43 INS43 INS43 INS42 MOV21 INS43 INS43 INS43 INS42 INS70 INS70 UPD42 MOV42 INS42 INS74 INS42 UPD42 MOV42 INS42 INS74 INS42 INS44 INS42 INS8 INS74 INS44 INS42 MOV8 MOV5 MOV43 INS43 INS42 MOV43 INS43 INS43 INS42 MOV25 MOV25 INS43 INS43 INS43 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 MOV43 INS43 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL43 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL43 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43 DEL85 DEL5 DEL11 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL43 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43 DEL85 DEL5 DEL11