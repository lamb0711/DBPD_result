JCR-999  SPI: provide batch read functionality
JCR-1000 JCR2SPI: remove duplicate item states

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552873 13f79535-47bb-0310-9956-ffa450edef68

-                target = new WeakReference(state);
+                // only set 'target' if not already by upon resolution
+                if (!isAvailable()) {
+                    setItemState(state);
+                }
+        ItemState state = null;
-            ItemState state = (ItemState) target.get();
-            if (state != null) {
-                return state;
-            }
+            state = (ItemState) target.get();
-        return null;
+        return state;
-     * Set the target of this HierarchyEntry to the given new ItemState.
-     * @throws IllegalStateException if this entry has already been resolved.
-     * @throws IllegalArgumentException if the given state is <code>null</code>
-     * or has another Status than {@link Status#NEW} or in case of class mismatch.
+     * @param entry
-    void internalSetItemState(ItemState newItemState) {
-        if (target != null || newItemState == null) {
-            throw new IllegalStateException();
-        }
-
-        if ((denotesNode() && newItemState.isNode()) || (!denotesNode() && !newItemState.isNode())) {
-            target = new WeakReference(newItemState);
-        } else {
-            throw new IllegalArgumentException();
-        }
-    }
-
-            if (state.getStatus() == Status.NEW) {
-                state.setStatus(Status.REMOVED);
-            } else {
-                state.getWorkspaceState().setStatus(Status.REMOVED);
-            }
+            state.setStatus(Status.REMOVED);
-        ItemState state = null;
-        if (target != null) {
-            state = (ItemState) target.get();
-        }
-        return state != null;
+        return internalGetItemState() != null;
+     * @see HierarchyEntry#setItemState(ItemState)
+     */
+    public synchronized void setItemState(ItemState state) {
+        if (state == null || (denotesNode() && !state.isNode()) || (!denotesNode() && state.isNode())) {
+            throw new IllegalArgumentException();
+        }
+        if (isAvailable()) {
+            throw new IllegalStateException("HierarchyEntry has already been resolved.");
+        }
+        target = new WeakReference(state);
+    }
+
+    /**
+     * {@inheritDoc}<br>
-                state.merge(state.getWorkspaceState(), false);
+                state.revert();
-                state.merge(state.getWorkspaceState(), false);
+                state.revert();
-        // TODO: check again if 'reconnect' is not possible for transiently-modified state
+        // TODO: check again if 'reload' is not possible for transiently-modified state
-            try {
-                state.reconnect(keepChanges);
-            } catch (ItemNotFoundException e) {
-                // remove hierarchyEntry (including all children and set
-                // state-status to REMOVED (or STALE_DESTROYED)
-                remove();
-            } catch (RepositoryException e) {
-                // TODO: rather throw? remove from parent?
-                log.warn("Exception while reloading item state: " + e);
-                log.debug("Stacktrace: ", e);
-            }
+            state.reload(keepChanges);
-
-        state.checkIsSessionState();

MOV31 MOV31 MOV31 MOV29 MOV43 UPD42 INS29 MOV29 INS83 INS39 UPD42 INS8 INS83 INS83 UPD42 MOV25 MOV41 INS65 INS41 UPD65 MOV43 UPD42 MOV21 INS42 MOV8 INS27 INS65 UPD66 INS68 INS32 INS8 INS32 MOV33 INS42 INS42 INS69 INS27 INS42 INS32 INS32 MOV21 INS8 INS42 MOV43 INS27 MOV36 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV21 INS25 INS42 INS33 INS32 INS45 UPD42 INS38 INS8 INS38 UPD42 MOV42 MOV42 INS32 INS21 INS32 INS42 INS32 UPD42 MOV42 MOV42 INS42 INS42 DEL8 DEL83 DEL39 DEL42 DEL33 DEL27 DEL41 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL27 DEL8 DEL25 DEL8 DEL25 DEL33 DEL41 DEL8 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL32 DEL32 DEL38 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL9 DEL32 DEL42 DEL42 DEL32 DEL9 DEL32 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32 DEL21