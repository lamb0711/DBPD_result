JCR-RMI: Use remote iterators instead of arrays to avoid memory and network problems with large result sets.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@365458 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import javax.jcr.NodeIterator;
-import javax.jcr.PropertyIterator;
-import javax.jcr.nodetype.NodeTypeIterator;
-import javax.jcr.nodetype.PropertyDefinition;
-import javax.jcr.nodetype.NodeDefinition;
-import javax.jcr.query.RowIterator;
-import javax.jcr.version.VersionIterator;
-import org.apache.jackrabbit.rmi.remote.RemoteNodeDefinition;
-import org.apache.jackrabbit.rmi.remote.RemoteProperty;
-import org.apache.jackrabbit.rmi.remote.RemotePropertyDefinition;
-import org.apache.jackrabbit.rmi.remote.RemoteRow;
-import org.apache.jackrabbit.rmi.remote.RemoteVersion;
- *
- * @author Jukka Zitting
-     * local properties. The remote references are created using the
-     * remote adapter factory.
-     * <p>
-     * A <code>null</code> input is treated as an empty iterator.
-     *
-     * @param iterator local property iterator
-     * @return remote property array
-     * @throws RemoteException on RMI errors
-     */
-    protected RemoteProperty[] getRemotePropertyArray(PropertyIterator iterator)
-            throws RemoteException {
-        if (iterator != null) {
-            ArrayList remotes = new ArrayList();
-            while (iterator.hasNext()) {
-                remotes.add(factory.getRemoteProperty(iterator.nextProperty()));
-            }
-            return (RemoteProperty[]) remotes.toArray(new RemoteProperty[remotes.size()]);
-        } else {
-            return new RemoteProperty[0]; // for safety
-        }
-    }
-
-    /**
-     * Utility method for creating an array of remote references for
-     * local nodes. The remote references are created using the
-     * remote adapter factory.
-     * <p>
-     * A <code>null</code> input is treated as an empty iterator.
-     *
-     * @param iterator local node iterator
-     * @return remote node array
-     * @throws RemoteException on RMI errors
-     */
-    protected RemoteNode[] getRemoteNodeArray(NodeIterator iterator)
-            throws RemoteException {
-        if (iterator != null) {
-            ArrayList remotes = new ArrayList();
-            while (iterator.hasNext()) {
-                remotes.add(getRemoteNode(iterator.nextNode()));
-            }
-            return (RemoteNode[]) remotes.toArray(new RemoteNode[remotes.size()]);
-        } else {
-            return new RemoteNode[0]; // for safety
-        }
-    }
-
-    /**
-     * Utility method for creating an array of remote references for
-     * local versions. The remote references are created using the
-     * remote adapter factory.
-     * <p>
-     * A <code>null</code> input is treated as an empty array.
-     *
-     * @param versions local version array
-     * @return remote version array
-     * @throws RemoteException on RMI errors
-     */
-    protected RemoteVersion[] getRemoteVersionArray(Version[] versions)
-            throws RemoteException {
-        if (versions != null) {
-            RemoteVersion[] remotes = new RemoteVersion[versions.length];
-            for (int i = 0; i < remotes.length; i++) {
-                remotes[i] = factory.getRemoteVersion(versions[i]);
-            }
-            return remotes;
-        } else {
-            return new RemoteVersion[0]; // for safety
-        }
-    }
-
-    /**
-     * Utility method for creating an array of remote references for
-     * local versions. The remote references are created using the
-     * remote adapter factory.
-     * <p>
-     * A <code>null</code> input is treated as an empty iterator.
-     *
-     * @param iterator local version iterator
-     * @return remote version array
-     * @throws RemoteException on RMI errors
-     */
-    protected RemoteVersion[] getRemoteVersionArray(VersionIterator iterator)
-            throws RemoteException {
-        if (iterator != null) {
-            ArrayList remotes = new ArrayList();
-            while (iterator.hasNext()) {
-                remotes.add(factory.getRemoteVersion(iterator.nextVersion()));
-            }
-            return (RemoteVersion[]) remotes.toArray(new RemoteVersion[remotes.size()]);
-        } else {
-            return new RemoteVersion[0]; // for safety
-        }
-    }
-
-    /**
-     * Utility method for creating an array of remote references for
-    /**
-     * Utility method for creating an array of remote references for
-     * local node types. The remote references are created using the
-     * remote adapter factory.
-     * <p>
-     * A <code>null</code> input is treated as an empty iterator.
-     *
-     * @param iterator local node type iterator
-     * @return remote node type array
-     * @throws RemoteException on RMI errors
-     */
-    protected RemoteNodeType[] getRemoteNodeTypeArray(NodeTypeIterator iterator)
-            throws RemoteException {
-        if (iterator != null) {
-            ArrayList remotes = new ArrayList();
-            while (iterator.hasNext()) {
-                remotes.add(factory.getRemoteNodeType(iterator.nextNodeType()));
-            }
-            return (RemoteNodeType[]) remotes.toArray(new RemoteNodeType[remotes.size()]);
-        } else {
-            return new RemoteNodeType[0]; // for safety
-        }
-    }
-
-    /**
-     * Utility method for creating an array of remote references for
-     * local node definitions. The remote references are created using the
-     * remote adapter factory.
-     * <p>
-     * A <code>null</code> input is treated as an empty array.
-     *
-     * @param defs local node definition array
-     * @return remote node definition array
-     * @throws RemoteException on RMI errors
-     */
-    protected RemoteNodeDefinition[] getRemoteNodeDefArray(NodeDefinition[] defs)
-            throws RemoteException {
-        if (defs != null) {
-            RemoteNodeDefinition[] remotes = new RemoteNodeDefinition[defs.length];
-            for (int i = 0; i < defs.length; i++) {
-                remotes[i] = factory.getRemoteNodeDefinition(defs[i]);
-            }
-            return remotes;
-        } else {
-            return new RemoteNodeDefinition[0]; // for safety
-        }
-    }
-
-    /**
-     * Utility method for creating an array of remote references for
-     * local property definitions. The remote references are created using the
-     * remote adapter factory.
-     * <p>
-     * A <code>null</code> input is treated as an empty array.
-     *
-     * @param defs local property definition array
-     * @return remote property definition array
-     * @throws RemoteException on RMI errors
-     */
-    protected RemotePropertyDefinition[] getRemotePropertyDefArray(PropertyDefinition[] defs)
-            throws RemoteException {
-        if (defs != null) {
-            RemotePropertyDefinition[] remotes = new RemotePropertyDefinition[defs.length];
-            for (int i = 0; i < defs.length; i++) {
-                remotes[i] = factory.getRemotePropertyDefinition(defs[i]);
-            }
-            return remotes;
-        } else {
-            return new RemotePropertyDefinition[0]; // for safety
-        }
-    }
-
-    /**
-     * Utility method for creating an array of remote references for
-     * local query result rows. The remote references are created using the
-     * remote adapter factory.
-     * <p>
-     * A <code>null</code> input is treated as an empty iterator.
-     *
-     * @param iterator local query result row iterator
-     * @return remote query result row array
-     * @throws RemoteException on RMI errors
-     */
-    protected RemoteRow[] getRemoteRowArray(RowIterator iterator)
-            throws RemoteException {
-        if (iterator != null) {
-            ArrayList remotes = new ArrayList();
-            while (iterator.hasNext()) {
-                remotes.add(getFactory().getRemoteRow(iterator.nextRow()));
-            }
-            return (RemoteRow[]) remotes.toArray(new RemoteRow[remotes.size()]);
-        } else {
-            return new RemoteRow[0]; // for safety
-        }
-    }
-

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL8 DEL31