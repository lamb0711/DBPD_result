JCR-329: NodeReferencesId.equals() is not symmetric
plus some cleanups/consolidations (mostly cosmetical) of recent changes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@382075 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Serializable;
+
-public class NodeReferencesId extends NodeId {
+public class NodeReferencesId implements Serializable {
+
+    /** Serialization UID of this class. */
+    static final long serialVersionUID = -3819311769214730025L;
-     * Create a new instance of this class. Takes a UUID as parameter.
+     * The id of the target node.
+     */
+    private final NodeId targetId;
+
+    /**
+     * Creates a new instance of this class. Takes a UUID as parameter.
+     * @throws IllegalArgumentException if <code>uuid</code> is <code>null</code>.
-        super(uuid);
+        targetId = new NodeId(uuid);
-     * Create a new instance of this class. Takes a id as parameter.
+     * Creates a new instance of this class. Takes an id as parameter.
+     * @throws IllegalArgumentException if <code>id</code> is <code>null</code>.
-        super(id == null ? null : id.getUUID());
+        if (id == null) {
+            throw new IllegalArgumentException("id must not be null");
+        }
+        targetId = id;
+    }
+
+    /**
+     * Returns the id of the target node.
+     *
+     * @return the id of the target node.
+     */
+    public NodeId getTargetId() {
+        return targetId;
-    public static NodeId valueOf(String s) throws IllegalArgumentException {
+    public static NodeReferencesId valueOf(String s) throws IllegalArgumentException {
+    /**
+     * Returns the same as <code>this.getTargetId().toString()</code>.
+     *
+     * @return the same as <code>this.getTargetId().toString()</code>.
+     */
+    public String toString() {
+        return targetId.toString();
+    }
+
+    /**
+     * Returns the same as <code>this.getTargetId().hashCode()</code>.
+     *
+     * @return the same as <code>this.getTargetId().hashCode()</code>.
+     */
+    public int hashCode() {
+        return targetId.hashCode();
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof NodeReferencesId) {
+            return targetId.getUUID().equals(((NodeReferencesId) obj).targetId.getUUID());
+        }
+        return false;
+    }

INS26 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 MOV43 INS59 INS29 INS83 MOV43 INS42 INS8 INS43 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS38 INS65 INS42 INS65 INS21 INS65 INS25 INS21 INS65 INS65 INS41 INS42 INS65 INS65 INS42 INS41 INS65 INS65 INS41 INS65 INS43 INS42 INS25 INS25 INS41 INS66 INS34 INS66 UPD66 INS42 INS66 INS7 UPD66 INS42 INS66 MOV27 INS8 INS7 INS66 INS66 INS42 INS66 INS66 INS32 INS66 INS66 INS32 INS42 INS27 INS8 INS62 INS8 INS9 INS42 INS14 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS41 INS42 INS43 INS41 INS43 INS42 INS14 INS9 INS42 INS32 INS42 INS43 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS36 INS42 INS11 INS43 INS42 INS42 DEL42 DEL46 DEL33 DEL42 DEL42 DEL32 DEL16 DEL46