jcr-97: Improve Checkstyle conformance

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@312896 13f79535-47bb-0310-9956-ffa450edef68

- * Locks the given node
+ * Lock the given <code>Node</code>
-public class Lock implements Command
-{
-	/** logger */
-	private static Log log = LogFactory.getLog(Lock.class);
+public class Lock implements Command {
+    /** logger */
+    private static Log log = LogFactory.getLog(Lock.class);
-	// ---------------------------- < keys >
-	/** Node path key */
-	private String pathKey = "path";
+    // ---------------------------- < keys >
+    /** Node path key */
+    private String pathKey = "path";
-	/**
-	 * depth lock
-	 */
-	private String deepKey = "deep";
+    /**
+     * depth lock
+     */
+    private String deepKey = "deep";
-	/**
-	 * Session scoped lock <br>
-	 * Key that refers to a <code>Boolean</code> context variable
-	 */
-	private String sessionScopedKey = "sessionScoped";
+    /**
+     * Session scoped lock <br>
+     * Key that refers to a <code>Boolean</code> context variable
+     */
+    private String sessionScopedKey = "sessionScoped";
-	/**
-	 * @inheritDoc
-	 */
-	public boolean execute(Context ctx) throws Exception
-	{
-		String path = (String) ctx.get(this.pathKey);
-		boolean deep = Boolean.valueOf((String) ctx.get(this.deepKey))
-				.booleanValue();
-		boolean sessionScoped = Boolean.valueOf(
-				(String) ctx.get(this.sessionScopedKey)).booleanValue();
-		if (log.isDebugEnabled())
-		{
-			log.debug("locking node at " + path + " deep=" + deep
-					+ " sessionScoped=" + sessionScoped);
-		}
-		CommandHelper.getNode(ctx, path).lock(deep, sessionScoped);
-		return false;
-	}
+    /**
+     * {@inheritDoc}
+     */
+    public boolean execute(Context ctx) throws Exception {
+        String path = (String) ctx.get(this.pathKey);
+        boolean deep = Boolean.valueOf((String) ctx.get(this.deepKey))
+            .booleanValue();
+        boolean sessionScoped = Boolean.valueOf(
+            (String) ctx.get(this.sessionScopedKey)).booleanValue();
+        if (log.isDebugEnabled()) {
+            log.debug("locking node at " + path + " deep=" + deep
+                    + " sessionScoped=" + sessionScoped);
+        }
+        CommandHelper.getNode(ctx, path).lock(deep, sessionScoped);
+        return false;
+    }
-	public String getDeepKey()
-	{
-		return deepKey;
-	}
+    /**
+     * @return deep key
+     */
+    public String getDeepKey() {
+        return deepKey;
+    }
-	public void setDeepKey(String deepKey)
-	{
-		this.deepKey = deepKey;
-	}
+    /**
+     * @param deepKey
+     *        deep key to set
+     */
+    public void setDeepKey(String deepKey) {
+        this.deepKey = deepKey;
+    }
-	public String getSessionScopedKey()
-	{
-		return sessionScopedKey;
-	}
+    /**
+     * @return the session scoped key
+     */
+    public String getSessionScopedKey() {
+        return sessionScopedKey;
+    }
-	public void setSessionScopedKey(String sessionScopedKey)
-	{
-		this.sessionScopedKey = sessionScopedKey;
-	}
+    /**
+     * @param sessionScopedKey
+     *        the session scoped key to set
+     */
+    public void setSessionScopedKey(String sessionScopedKey) {
+        this.sessionScopedKey = sessionScopedKey;
+    }
-	/**
-	 * @return Returns the srcPathKey.
-	 */
-	public String getPathKey()
-	{
-		return pathKey;
-	}
+    /**
+     * @return the source path key
+     */
+    public String getPathKey() {
+        return pathKey;
+    }
-	/**
-	 * @param srcPathKey
-	 *            The srcPathKey to set.
-	 */
-	public void setPathKey(String srcPathKey)
-	{
-		this.pathKey = srcPathKey;
-	}
+    /**
+     * @param srcPathKey
+     *        the source path key to set
+     */
+    public void setPathKey(String srcPathKey) {
+        this.pathKey = srcPathKey;
+    }

INS29 INS29 INS29 INS29 UPD66 INS65 INS65 INS65 INS65 INS65 INS65 INS66 INS42 INS66 INS66 INS42 INS66 UPD66 UPD66 DEL65