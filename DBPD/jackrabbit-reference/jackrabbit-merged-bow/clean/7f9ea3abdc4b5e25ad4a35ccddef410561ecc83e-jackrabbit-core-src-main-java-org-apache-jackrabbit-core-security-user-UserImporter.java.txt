JCR-3218 : UserImporter should trigger execution AuthorizableActions in case of user/group creation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1235192 13f79535-47bb-0310-9956-ffa450edef68

+    /**
+     * Container used to collect group members stored in protected nodes.
+     */
+    private Membership currentMembership;
+
+    /**
+     * Temporary store for the pw an imported new user to be able to call
+     * the creation actions irrespective of the order of protected properties
+     */
+    private Map<String,String> currentPw = new HashMap<String,String>(1);
+
-    // -----------------------------------------------------< ProtectedPropertyImporter >---
-
+    // -----------------------------------------< ProtectedPropertyImporter >---
+    /**
+     * @see ProtectedPropertyImporter#handlePropInfo(org.apache.jackrabbit.core.NodeImpl, org.apache.jackrabbit.core.xml.PropInfo, org.apache.jackrabbit.spi.QPropertyDefinition)
+     */
+
+                /*
+                Execute authorizable actions for a NEW group as this is the
+                same place in the userManager#createGroup that the actions
+                are called.
+                In case of a NEW user the actions are executed if the password
+                has been imported before.
+                */
+                if (parent.isNew()) {
+                    if (a.isGroup()) {
+                        userManager.onCreate((Group) a);
+                    } else if (currentPw.containsKey(a.getID())) {
+                        userManager.onCreate((User) a, currentPw.remove(a.getID()));
+                    }
+                }
+
-                ((User) a).changePassword(v.getString());
+                String pw = v.getString();
+                ((User) a).changePassword(pw);
+                /*
+                 Execute authorizable actions for a NEW user at this point after
+                 having set the password if the principal name has already been
+                 processed, otherwise postpone it.
+                 */
+                if (parent.isNew()) {
+                    if (parent.hasProperty(UserConstants.P_PRINCIPAL_NAME)) {
+                        userManager.onCreate((User) a, pw);
+                    } else {
+                        // principal name not yet available -> remember the pw
+                        currentPw.clear();
+                        currentPw.put(a.getID(), pw);
+                    }
+                }
+    /**
+     * @see ProtectedPropertyImporter#handlePropInfo(org.apache.jackrabbit.core.NodeImpl, org.apache.jackrabbit.core.xml.PropInfo, org.apache.jackrabbit.spi.QPropertyDefinition)
+     */
+    /**
+     * @see org.apache.jackrabbit.core.xml.ProtectedPropertyImporter#processReferences()
+     */
-    //------------------------------------------------------------< private >---
-    private void handleFailure(String msg) throws RepositoryException {
-        switch (importBehavior) {
-            case ImportBehavior.IGNORE:
-            case ImportBehavior.BESTEFFORT:
-                log.warn(msg);
-                break;
-            case ImportBehavior.ABORT:
-                throw new ConstraintViolationException(msg);
-            default:
-                // no other behavior. nothing to do.
-
-        }
-    }
-
-    // -----------------------------------------------------< ProtectedNodeImporter >---
-
-    private Membership currentMembership;
-
+    // ---------------------------------------------< ProtectedNodeImporter >---
+    /**
+     * @see ProtectedNodeImporter#start(org.apache.jackrabbit.core.NodeImpl)
+     */
+    /**
+     * @see ProtectedNodeImporter#start(org.apache.jackrabbit.core.state.NodeState)
+     */
+    /**
+     * @see ProtectedNodeImporter#start(org.apache.jackrabbit.core.NodeImpl)
+     */
+    /**
+     * @see org.apache.jackrabbit.core.xml.ProtectedNodeImporter#endChildInfo()
+     */
+    /**
+     * @see ProtectedNodeImporter#end(org.apache.jackrabbit.core.NodeImpl)
+     */
+    /**
+     * @see ProtectedNodeImporter#end(org.apache.jackrabbit.core.state.NodeState)
+     */
-    //--------------------------------------------------------------------------
+    //------------------------------------------------------------< private >---
+    /**
+     * Handling the import behavior
+     *
+     * @param msg
+     * @throws RepositoryException
+     */
+    private void handleFailure(String msg) throws RepositoryException {
+        switch (importBehavior) {
+            case ImportBehavior.IGNORE:
+            case ImportBehavior.BESTEFFORT:
+                log.warn(msg);
+                break;
+            case ImportBehavior.ABORT:
+                throw new ConstraintViolationException(msg);
+            default:
+                // no other behavior. nothing to do.
+
+        }
+    }
+
+    //------------------------------------------------------< inner classes >---

MOV31 MOV23 INS23 INS29 INS29 INS83 INS74 INS59 INS29 INS29 INS29 INS29 INS29 MOV44 INS29 INS29 INS29 INS29 MOV44 INS29 INS65 INS65 INS43 INS43 INS43 INS42 INS14 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS66 INS66 INS66 INS42 INS42 INS42 INS74 INS34 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS68 INS66 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS69 INS69 INS69 INS42 INS42 INS69 INS69 INS69 INS40 INS42 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS40 INS42 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS40 INS40 INS40 INS25 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS32 INS8 INS60 INS25 INS42 INS42 INS25 INS43 INS59 INS32 INS8 INS32 INS8 INS25 INS42 INS42 MOV32 INS42 INS42 INS42 INS25 INS42 INS42 INS21 INS32 INS8 INS32 INS8 INS8 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS40 INS21 INS21 INS21 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS11 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42