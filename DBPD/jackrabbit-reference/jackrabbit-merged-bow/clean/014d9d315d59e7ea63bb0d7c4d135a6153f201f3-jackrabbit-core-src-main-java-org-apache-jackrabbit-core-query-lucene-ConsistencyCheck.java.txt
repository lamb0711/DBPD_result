#0000 - JCR-1232: Merge UUID to NodeId

Replace UUID references with NodeId alternatives from o.a.j.core.query.lucene.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@793015 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.uuid.UUID;
-     * All the document UUIDs within the index.
+     * All the document ids within the index.
-    private Set<UUID> documentUUIDs;
+    private Set<NodeId> documentIds;
-        // UUIDs of multiple nodes in the index
-        Set<UUID> multipleEntries = new HashSet<UUID>();
-        // collect all documents UUIDs
-        documentUUIDs = new HashSet<UUID>();
+        // Ids of multiple nodes in the index
+        Set<NodeId> multipleEntries = new HashSet<NodeId>();
+        // collect all documents ids
+        documentIds = new HashSet<NodeId>();
-                UUID uuid = UUID.fromString(d.get(FieldNames.UUID));
-                if (stateMgr.hasItemState(new NodeId(uuid))) {
-                    if (!documentUUIDs.add(uuid)) {
-                        multipleEntries.add(uuid);
+                NodeId id = new NodeId(d.get(FieldNames.UUID));
+                if (stateMgr.hasItemState(id)) {
+                    if (!documentIds.add(id)) {
+                        multipleEntries.add(id);
-                    errors.add(new NodeDeleted(uuid));
+                    errors.add(new NodeDeleted(id));
-        for (UUID uuid : multipleEntries) {
-            errors.add(new MultipleEntries(uuid));
+        for (NodeId id : multipleEntries) {
+            errors.add(new MultipleEntries(id));
-                UUID uuid = UUID.fromString(d.get(FieldNames.UUID));
+                NodeId id = new NodeId(d.get(FieldNames.UUID));
-                UUID parentUUID = null;
+                NodeId parentId = null;
-                    parentUUID = UUID.fromString(parentUUIDString);
+                    parentId = new NodeId(parentUUIDString);
-                if (parentUUID == null || documentUUIDs.contains(parentUUID)) {
+                if (parentId == null || documentIds.contains(parentId)) {
-                NodeId parentId = new NodeId(parentUUID);
-                    errors.add(new MissingAncestor(uuid, parentUUID));
+                    errors.add(new MissingAncestor(id, parentId));
-                    errors.add(new UnknownParent(uuid, parentUUID));
+                    errors.add(new UnknownParent(id, parentId));
-        private final UUID parentUUID;
+        private final NodeId parentId;
-        private MissingAncestor(UUID uuid, UUID parentUUID) {
-            super("Parent of " + uuid + " missing in index. Parent: " + parentUUID, uuid);
-            this.parentUUID = parentUUID;
+        private MissingAncestor(NodeId id, NodeId parentId) {
+            super("Parent of " + id + " missing in index. Parent: " + parentId, id);
+            this.parentId = parentId;
-            NodeId parentId = new NodeId(parentUUID);
-            while (parentId != null && !documentUUIDs.contains(parentId.getUUID())) {
+            NodeId ancestorId = parentId;
+            while (ancestorId != null && !documentIds.contains(ancestorId)) {
-                    NodeState n = (NodeState) stateMgr.getItemState(parentId);
+                    NodeState n = (NodeState) stateMgr.getItemState(ancestorId);
-                    documentUUIDs.add(n.getNodeId().getUUID());
-                    parentId = n.getParentId();
+                    documentIds.add(n.getNodeId());
+                    ancestorId = n.getParentId();
-        private UnknownParent(UUID uuid, UUID parentUUID) {
-            super("Node " + uuid + " has unknown parent: " + parentUUID, uuid);
+        private UnknownParent(NodeId id, NodeId parentId) {
+            super("Node " + id + " has unknown parent: " + parentId, id);
-            log.warn("Unknown parent for " + uuid + " cannot be repaired");
+            log.warn("Unknown parent for " + id + " cannot be repaired");
-        MultipleEntries(UUID uuid) {
-            super("Multiple entries found for node " + uuid, uuid);
+        MultipleEntries(NodeId id) {
+            super("Multiple entries found for node " + id, id);
-            index.removeAllDocuments(uuid);
+            index.removeAllDocuments(id);
-                NodeState node = (NodeState) stateMgr.getItemState(new NodeId(uuid));
+                NodeState node = (NodeState) stateMgr.getItemState(id);
-                documentUUIDs.add(node.getNodeId().getUUID());
+                documentIds.add(node.getNodeId());
-        NodeDeleted(UUID uuid) {
-            super("Node " + uuid + " does not longer exist.", uuid);
+        NodeDeleted(NodeId id) {
+            super("Node " + id + " does not longer exist.", id);
-            log.info("Removing deleted node from index: " + uuid);
-            index.removeDocument(uuid);
+            log.info("Removing deleted node from index: " + id);
+            index.removeDocument(id);

UPD74 UPD43 UPD42 UPD43 UPD66 UPD42 UPD74 UPD42 UPD42 UPD43 UPD42 MOV43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 MOV43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 MOV43 MOV32 MOV32 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 MOV43 UPD42 UPD42 MOV42 UPD42 INS42 UPD42 UPD42 INS14 INS42 UPD42 UPD42 INS14 UPD42 MOV43 MOV32 MOV32 MOV43 MOV43 MOV32 INS43 MOV32 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS42 UPD42 INS14 MOV43 UPD42 UPD42 UPD42 MOV43 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL42 DEL32 DEL42 DEL43