JCR-442: Committed patch-060808-backup.txt from Nicolas.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429606 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileInputStream;
+import java.util.zip.ZipException;
-import javax.jcr.Item;
+import javax.jcr.InvalidSerializedDataException;
+import javax.jcr.ItemExistsException;
+import javax.jcr.NoSuchWorkspaceException;
+import javax.jcr.Session;
+import javax.jcr.Workspace;
+import javax.jcr.lock.LockException;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.version.VersionException;
+import org.apache.jackrabbit.core.WorkspaceImpl;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.InputSource;
-
-    private static int called = 0;
+    
-
+    
-    public WorkspaceBackup(RepositoryImpl repo, BackupConfig conf, String name) throws LoginException, RepositoryException {
-        super(repo, conf);
+    public WorkspaceBackup(RepositoryImpl repo, BackupConfig conf, String name, String login, String password) throws LoginException, RepositoryException {
+        super(repo, conf, login, password);
-    public void init(RepositoryImpl repo, BackupConfig conf, String name) throws LoginException, RepositoryException {
-        super.init(repo, conf);
+    public void init(RepositoryImpl repo, BackupConfig conf, String name, String login, String password) throws LoginException, RepositoryException {
+        super.init(repo, conf, login, password);
-
+    
-     * @see org.apache.jackrabbit.backup.Backup#backup(org.apache.jackrabbit.backup.BackupIOHandler)
+     * @see org.apache.jackrabbijcr:root/t.backup.Backup#backup(org.apache.jackrabbit.backup.BackupIOHandler)
-            IOException {
-       SessionImpl s = (SessionImpl) repo.login(new SimpleCredentials(this.conf.getLogin(), this.conf.getPassword().toCharArray()), this.wspName);
-       
-       SAXTransformerFactory stf = (SAXTransformerFactory) SAXTransformerFactory.newInstance();
-       File temp = new File(this.conf.getWorkFolder() + "wsp.xml");
-       try {
-           TransformerHandler th = stf.newTransformerHandler();
-           th.setResult(new StreamResult(new FileOutputStream(temp)));
-           th.getTransformer().setParameter(OutputKeys.METHOD, "xml");
-           th.getTransformer().setParameter(OutputKeys.ENCODING, "UTF-8");
-           th.getTransformer().setParameter(OutputKeys.INDENT, "no");
-
-           new SysViewSAXEventGenerator(
-                   s.getRootNode(), false, false, th) {
-               protected void process(Node node, int level)
-                       throws RepositoryException, SAXException {
-                   if (!"/jcr:system".equals(node.getPath())) {
-                       super.process(node, level);
-                   }
-               }
-           }.serialize();
-           h.write("export"+ called +".xml", temp);
-       } catch (TransformerException te) {
-           throw new RepositoryException(te);
-       } catch (SAXException se) {
-           throw new RepositoryException(se);
-       } finally {
-           temp.delete();
-           called += 1;
-       }
-
+    IOException {
+        SessionImpl s = (SessionImpl) this.getRepo().login(this.getCredentials(), this.wspName);
+        
+        SAXTransformerFactory stf = (SAXTransformerFactory) SAXTransformerFactory.newInstance();
+        File temp = new File(this.getConf().getWorkFolder() + "wsp.xml");
+        try {
+            TransformerHandler th = stf.newTransformerHandler();
+            th.setResult(new StreamResult(new FileOutputStream(temp)));
+            th.getTransformer().setParameter(OutputKeys.METHOD, "xml");
+            th.getTransformer().setParameter(OutputKeys.ENCODING, "UTF-8");
+            th.getTransformer().setParameter(OutputKeys.INDENT, "no");
+            
+            new SysViewSAXEventGenerator(
+                    s.getRootNode(), false, false, th) {
+                protected void process(Node node, int level)
+                throws RepositoryException, SAXException {
+                    if (!"/jcr:system".equals(node.getPath())) {
+                        super.process(node, level);
+                    }
+                }
+            }.serialize();
+            h.write("export_"+ this.wspName +".xml", temp);
+        } catch (TransformerException te) {
+            throw new RepositoryException(te);
+        } catch (SAXException se) {
+            throw new RepositoryException(se);
+        } finally {
+            temp.delete();
+        }
+        
-
+    
-    public void restore(BackupIOHandler h) {
-        // TODO Auto-generated method stub
+    public void restore(BackupIOHandler h) throws ZipException, IOException, LoginException, NoSuchWorkspaceException, RepositoryException {
+        //TODO put temp and constant in object's attribute.
+        
+        //Restore the SysView in a temp file
+        File wspXml = new File(this.getConf().getWorkFolder() + "/workspace.xml");
+        File temp = new File(this.getConf().getWorkFolder() + "wsp.xml");
+        try {
+            FileInputStream fis = new FileInputStream(wspXml);
+            InputSource xml = new InputSource(fis);
+            
+            //Launch & register the wsp
+            //There is at least the default wsp.
+            SessionImpl s1 = (SessionImpl) this.getSession();
+            Workspace wsp_def = s1.getWorkspace();
+            
+            //Check if the workspace already exist (UC: partial restore)
+            String[] allWsp = wsp_def.getAccessibleWorkspaceNames();
+            boolean isCreated = false;
+            
+            for (int i = 0; i < allWsp.length; i++) {
+                if (this.wspName.equals(allWsp[i])) {
+                    isCreated = true;
+                    break;
+                }
+            }
+
+            if (!isCreated) {
+                ((WorkspaceImpl) wsp_def).createWorkspace(this.wspName, xml);
+            }
+
+            h.read("export_"+ this.wspName +".xml", temp);
+
+            SessionImpl s2 = (SessionImpl) this.getRepo().login(this.getCredentials(), this.wspName);
+
+            FileInputStream iTemp = new FileInputStream(temp);
+            //TODO add a parameter in the conf file to manage UUIDBehavior
+            s2.importXML(s2.getRootNode().getPath(), iTemp, 3);
+        }
+        finally {
+            wspXml.delete();
+            temp.delete();
+        }
-
+    

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS44 INS44 INS8 INS83 INS39 INS42 MOV44 MOV44 MOV44 INS44 INS44 INS43 INS43 MOV8 INS83 INS39 INS42 MOV44 INS43 INS43 MOV43 INS43 MOV43 INS8 INS43 INS42 INS43 INS42 INS46 INS21 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS60 INS60 INS54 INS42 INS42 INS42 INS42 INS42 INS42 MOV7 INS42 INS42 INS48 MOV43 MOV43 INS43 INS59 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS60 INS60 INS60 INS60 INS60 INS60 INS24 INS25 MOV21 INS60 INS60 INS21 INS21 INS21 INS52 INS42 MOV43 MOV43 INS43 INS27 INS43 INS27 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS38 INS8 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 UPD42 MOV42 MOV32 INS42 INS32 INS45 INS42 INS32 INS45 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS9 INS39 INS59 INS42 INS40 INS42 INS25 INS42 MOV21 INS42 INS42 INS27 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS52 INS42 INS52 UPD42 INS32 UPD45 INS22 INS32 INS42 INS32 INS42 INS43 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV34 INS32 INS8 INS32 INS45 INS22 INS45 INS43 INS32 INS43 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS2 INS21 INS10 INS36 INS42 INS22 INS42 MOV52 MOV42 INS42 INS32 INS42 INS32 INS22 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS7 INS11 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS9 INS43 INS42 INS42 DEL83 DEL83 DEL39 DEL59 DEL23 DEL42 DEL42 DEL46 DEL83 DEL39 DEL42 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL14 DEL52 DEL42 DEL22 DEL42 DEL42 DEL34 DEL7 DEL21 DEL42 DEL42 DEL42 DEL48 DEL83 DEL39 DEL42 DEL8 DEL31