optimized value handling on import

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160421 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
-    private StringBufferValue textHandler = new StringBufferValue();
+    private BufferedStringValue textHandler = new BufferedStringValue();
-     * Translates character data encountered in
-     * <code>{@link #characters(char[], int, int)}</code> into a
-     * <code>jcr:xmltext</code> child node with a <code>jcr:xmlcharacters</code>
-     * property.
+     * Appends the given character data to the internal buffer.
-     * @param text
-     * @throws SAXException
+     * @param ch     the characters to be appended
+     * @param start  the index of the first character to append
+     * @param length the number of characters to append
+     * @throws SAXException if an error occurs
+     * @see #characters(char[], int, int)
+     * @see #ignorableWhitespace(char[], int, int)
+     * @see #processCharacters()
-    private void onTextNode(StringBufferValue text)
+    private void appendCharacters(char ch[], int start, int length)
-        String s = textHandler.retrieve();
-        if (s.trim().length() == 0) {
-            // ignore whitespace-only character data
-            log.debug("ignoring withespace character data: " + s);
-            return;
+        if (textHandler == null) {
+            textHandler = new BufferedStringValue();
-            Importer.NodeInfo node =
-                    new Importer.NodeInfo(JCR_XMLTEXT, null, null, null);
-            Importer.TextValue[] values = new Importer.TextValue[]{text};
-            ArrayList props = new ArrayList();
-            Importer.PropInfo prop =
-                    new Importer.PropInfo(JCR_XMLCHARACTERS,
-                            PropertyType.STRING, values);
-            props.add(prop);
-            // call Importer
-            importer.startNode(node, props, nsContext);
-            importer.endNode(node);
+            textHandler.append(ch, start, length);
+        } catch (IOException ioe) {
+            String msg = "internal error while processing internal buffer data";
+            log.error(msg, ioe);
+            throw new SAXException(msg, ioe);
+        }
+    }
+
+    /**
+     * Translates character data reported by the
+     * <code>{@link #characters(char[], int, int)}</code> &
+     * <code>{@link #ignorableWhitespace(char[], int, int)}</code> SAX events
+     * into a  <code>jcr:xmltext</code> child node with one
+     * <code>jcr:xmlcharacters</code> property.
+     *
+     * @throws SAXException if an error occurs
+     * @see #appendCharacters(char[], int, int)
+     */
+    private void processCharacters()
+            throws SAXException {
+        try {
+            if (textHandler != null && textHandler.length() > 0) {
+                // there is character data that needs to be added to
+                // the current node
+
+                String text = textHandler.retrieve();
+                if (text.trim().length() == 0) {
+                    // ignore whitespace-only character data
+                    log.debug("ignoring withespace character data: " + text);
+                    return;
+                }
+
+                Importer.NodeInfo node =
+                        new Importer.NodeInfo(JCR_XMLTEXT, null, null, null);
+                Importer.TextValue[] values =
+                        new Importer.TextValue[]{textHandler};
+                ArrayList props = new ArrayList();
+                Importer.PropInfo prop =
+                        new Importer.PropInfo(JCR_XMLCHARACTERS,
+                                PropertyType.STRING, values);
+                props.add(prop);
+                // call Importer
+                importer.startNode(node, props, nsContext);
+                importer.endNode(node);
+
+                // reset handler
+                textHandler.dispose();
+                textHandler = null;
+            }
+        } catch (IOException ioe) {
+            String msg = "internal error while processing internal buffer data";
+            log.error(msg, ioe);
+            throw new SAXException(msg, ioe);
-        if (textHandler != null && textHandler.length() > 0) {
-            // there is character data that needs to be added to the current node
-            onTextNode(textHandler);
-            // reset handler
-            textHandler.dispose();
-            textHandler = null;
-        }
+        // process buffered character data
+        processCharacters();
-         * buffer character data; will be processed
-         * in endElement and startElement method
+         * buffer data reported by the characters event;
+         * will be processed on the next endElement or startElement event.
-        if (textHandler == null) {
-            textHandler = new StringBufferValue();
-        }
-        textHandler.append(ch, start, length);
+        appendCharacters(ch, start, length);
-         * will be processed in endElement and startElement method
+         * will be processed on the next endElement or startElement event.
-        if (textHandler == null) {
-            textHandler = new StringBufferValue();
-        }
-        textHandler.append(ch, start, length);
+        appendCharacters(ch, start, length);
-        if (textHandler != null && textHandler.length() > 0) {
-            // there is character data that needs to be added to the current node
-            onTextNode(textHandler);
-            // reset handler
-            textHandler.dispose();
-            textHandler = null;
-        }
+        // process buffered character data
+        processCharacters();
+

INS26 INS40 INS31 UPD43 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 UPD42 INS8 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS85 INS39 INS42 INS39 INS42 INS42 INS25 INS54 UPD65 UPD65 MOV21 INS21 MOV21 UPD43 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS68 INS68 INS68 MOV27 INS8 MOV8 INS12 UPD66 UPD66 INS66 INS65 INS66 UPD66 UPD66 UPD42 INS66 INS68 INS8 INS12 INS32 UPD42 INS42 INS69 INS69 INS69 INS42 INS69 INS69 INS69 INS42 INS21 INS44 INS8 INS68 INS42 INS69 INS69 INS69 INS25 INS44 INS8 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS5 INS39 INS39 INS5 INS39 INS39 INS7 INS43 INS42 INS60 INS21 INS53 INS42 INS69 INS69 INS69 INS5 INS39 INS39 MOV27 MOV8 INS43 INS42 INS60 INS21 INS53 INS39 INS85 INS39 INS85 INS42 INS14 INS42 INS43 INS59 INS32 INS14 INS5 INS39 INS39 INS39 INS85 MOV60 INS25 MOV21 MOV21 INS42 INS43 INS59 INS32 INS14 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS39 INS85 INS27 INS8 MOV5 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 UPD42 INS32 INS34 INS21 INS41 INS42 INS32 INS42 INS32 MOV5 INS42 INS42 INS42 INS42 INS27 UPD42 INS45 INS42 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25