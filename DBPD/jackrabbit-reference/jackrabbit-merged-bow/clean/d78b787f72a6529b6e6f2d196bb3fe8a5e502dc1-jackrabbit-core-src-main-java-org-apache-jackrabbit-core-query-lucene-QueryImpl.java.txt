JCR-1104: JSR 283 support
- JQOM work in progress

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@572945 13f79535-47bb-0310-9956-ffa450edef68

-public class QueryImpl implements ExecutableQuery {
+public class QueryImpl extends AbstractQueryImpl {
-     * The session of the user executing this query
-     */
-    protected final SessionImpl session;
-
-    /**
-     * The item manager of the user executing this query
-     */
-    protected final ItemManager itemMgr;
-
-    /**
-     * The actual search index
-     */
-    protected final SearchIndex index;
-
-    /**
-     * The property type registry for type lookup.
-     */
-    protected final PropertyTypeRegistry propReg;
-
-    /**
-     * If <code>true</code> the default ordering of the result nodes is in
-     * document order.
-     */
-    private boolean documentOrder = true;
-
-    /**
-        this.session = session;
-        this.itemMgr = itemMgr;
-        this.index = index;
-        this.propReg = propReg;
+        super(session, itemMgr, index, propReg);
-
-        allNodesQueryNode = factory.createQueryRootNode();
-        PathQueryNode pathNode = factory.createPathQueryNode(allNodesQueryNode);
-        LocationStepQueryNode lsNode = factory.createLocationStepQueryNode(pathNode);
-        lsNode.setNameTest(null);
-        lsNode.setIncludeDescendants(true);
-        pathNode.addPathStep(lsNode);
-        pathNode.setAbsolute(true);
-        allNodesQueryNode.setLocationNode(pathNode);
-        
+        allNodesQueryNode = createMatchAllNodesQuery(factory);
-
+    
-        return new QueryResultImpl(index, itemMgr, session.getNamespaceResolver(),
-                session.getAccessManager(), this, query, getSelectProperties(),
-                orderProperties, ascSpecs, documentOrder, offset, limit);
-    }
-
-    /**
-     * If set <code>true</code> the result nodes will be in document order
-     * per default (if no order by clause is specified). If set to
-     * <code>false</code> the result nodes are returned in whatever sequence
-     * the index has stored the nodes. That sequence is stable over multiple
-     * invocations of the same query, but will change when nodes get added or
-     * removed from the index.
-     * <p/>
-     * The default value for this property is <code>true</code>.
-     * @return the current value of this property.
-     */
-    public boolean getRespectDocumentOrder() {
-        return documentOrder;
-    }
-
-    /**
-     * Sets a new value for this property.
-     *
-     * @param documentOrder if <code>true</code> the result nodes are in
-     * document order per default.
-     *
-     * @see #getRespectDocumentOrder()
-     */
-    public void setRespectDocumentOrder(boolean documentOrder) {
-        this.documentOrder = documentOrder;
+        return new QueryResultImpl(index, itemMgr,
+                session.getNamespaceResolver(), session.getAccessManager(),
+                this, query, getSelectProperties(), orderProperties, ascSpecs,
+                getRespectDocumentOrder(), offset, limit);
-    protected boolean needsSystemTree() {
+    public boolean needsSystemTree() {
+
+    //----------------------------< internal >----------------------------------
+
+    /**
+     * Creates an abstract query tree that matches all nodes. XPath example:
+     * //element(*, nt:base)
+     *
+     * @param factory the query node factory.
+     * @return the abstract query tree.
+     */
+    private static QueryRootNode createMatchAllNodesQuery(
+            QueryNodeFactory factory) {
+        QueryRootNode allNodesQueryNode = factory.createQueryRootNode();
+        PathQueryNode pathNode = factory.createPathQueryNode(allNodesQueryNode);
+        LocationStepQueryNode lsNode = factory.createLocationStepQueryNode(pathNode);
+        lsNode.setNameTest(null);
+        lsNode.setIncludeDescendants(true);
+        pathNode.addPathStep(lsNode);
+        pathNode.setAbsolute(true);
+        allNodesQueryNode.setLocationNode(pathNode);
+        return allNodesQueryNode;
+    }

INS43 INS31 UPD42 MOV42 INS8 UPD83 INS29 UPD83 MOV83 UPD83 MOV83 INS43 INS42 INS44 MOV8 INS46 MOV21 INS21 MOV65 INS65 MOV65 INS42 INS43 INS42 INS60 INS41 INS42 INS42 INS42 INS42 INS7 UPD66 UPD66 INS42 UPD66 MOV66 UPD66 INS42 INS43 INS59 INS42 INS42 INS32 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL29 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL68 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21