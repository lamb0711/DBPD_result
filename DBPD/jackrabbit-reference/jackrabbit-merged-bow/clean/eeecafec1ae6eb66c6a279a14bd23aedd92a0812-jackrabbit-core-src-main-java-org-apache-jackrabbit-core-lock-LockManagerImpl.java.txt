JCR-1590: JSR 283: Locking

Another code cleanup step: Use LockInfo instead of AbstractLockInfo when referring to lock infos.

Perhaps we should simply make LockInfo an abstract class and merge the current AbstractLockInfo into it? There doesn't seem to be much benefit in having a separate interface for code that's only used within a single package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803505 13f79535-47bb-0310-9956-ffa450edef68

-    private final PathMap<AbstractLockInfo> lockMap =
-        new PathMap<AbstractLockInfo>();
+    private final PathMap<LockInfo> lockMap = new PathMap<LockInfo>();
-        final ArrayList<AbstractLockInfo> list = new ArrayList<AbstractLockInfo>();
+        final ArrayList<LockInfo> list = new ArrayList<LockInfo>();
-        lockMap.traverse(new PathMap.ElementVisitor<AbstractLockInfo>() {
-            public void elementVisited(PathMap.Element<AbstractLockInfo> element) {
-                AbstractLockInfo info = element.get();
+        lockMap.traverse(new PathMap.ElementVisitor<LockInfo>() {
+            public void elementVisited(PathMap.Element<LockInfo> element) {
+                LockInfo info = element.get();
-            for (int i = 0; i < list.size(); i++) {
-                AbstractLockInfo info = list.get(i);
-                writer.write(info.getLockToken());
+            for (LockInfo info : list) {
+                writer.write(info.getLockToken().toString());
-            PathMap.Element<AbstractLockInfo> element = lockMap.map(path, false);
+            PathMap.Element<LockInfo> element = lockMap.map(path, false);
-                getSessionLockManager(session).lockTokenAdded(info.getLockToken());
+                getSessionLockManager(session).lockTokenAdded(
+                        info.getLockToken().toString());
-            PathMap.Element<AbstractLockInfo> element =
+            PathMap.Element<LockInfo> element =
-            AbstractLockInfo info = element.get();
+            LockInfo info = element.get();
-            getSessionLockManager(session).lockTokenRemoved(info.getLockToken());
+            getSessionLockManager(session).lockTokenRemoved(
+                    info.getLockToken().toString());
-     * Package-private low-level helper method returning all
-     * <code>AbstractLockInfo</code>s associated with the specified
-     * session.
+     * Package-private low-level helper method returning all locks
+     * associated with the specified session.
-    AbstractLockInfo[] getLockInfos(final SessionImpl session) {
-        final ArrayList<AbstractLockInfo> infos = new ArrayList<AbstractLockInfo>();
-        lockMap.traverse(new PathMap.ElementVisitor<AbstractLockInfo>() {
-            public void elementVisited(PathMap.Element<AbstractLockInfo> element) {
-                AbstractLockInfo info = element.get();
+    LockInfo[] getLockInfos(final SessionImpl session) {
+        final ArrayList<LockInfo> infos = new ArrayList<LockInfo>();
+        lockMap.traverse(new PathMap.ElementVisitor<LockInfo>() {
+            public void elementVisited(PathMap.Element<LockInfo> element) {
+                LockInfo info = element.get();
-    public AbstractLockInfo getLockInfo(NodeId id) throws RepositoryException {
+    public LockInfo getLockInfo(NodeId id) throws RepositoryException {
-            PathMap.Element<AbstractLockInfo> element = lockMap.map(path, false);
-            AbstractLockInfo info = element.get();
+            PathMap.Element<LockInfo> element = lockMap.map(path, false);
+            LockInfo info = element.get();
-            PathMap.Element<AbstractLockInfo> element = lockMap.map(path, false);
-            AbstractLockInfo info = element.get();
-            if (info != null && (element.hasPath(path) || info.deep)) {
+            PathMap.Element<LockInfo> element = lockMap.map(path, false);
+            LockInfo info = element.get();
+            if (info != null && (element.hasPath(path) || info.isDeep())) {
-        AbstractLockInfo[] infos = getLockInfos(session);
+        LockInfo[] infos = getLockInfos(session);
-            PathMap.Element<AbstractLockInfo> element = lockMap.map(getPath(session, node.getId()), true);
+            PathMap.Element<LockInfo> element =
+                lockMap.map(getPath(session, node.getId()), true);
-            PathMap.Element<AbstractLockInfo> element = lockMap.map(path, false);
-            AbstractLockInfo info = element.get();
+            PathMap.Element<LockInfo> element = lockMap.map(path, false);
+            LockInfo info = element.get();
-                return info.deep;
+                return info.isDeep();
-        PathMap.Element<AbstractLockInfo> element = lockMap.map(path, false);
+        PathMap.Element<LockInfo> element = lockMap.map(path, false);
-        PathMap.Element<AbstractLockInfo> element =
+        PathMap.Element<LockInfo> element =
-        AbstractLockInfo info = element.get();
+        LockInfo info = element.get();
-            PathMap.Element<AbstractLockInfo> element =
+            PathMap.Element<LockInfo> element =
-                AbstractLockInfo info = element.get();
+                LockInfo info = element.get();
-            PathMap.Element<AbstractLockInfo> element =
+            PathMap.Element<LockInfo> element =
-                AbstractLockInfo info = element.get();
+                LockInfo info = element.get();
-    private void refresh(PathMap.Element<AbstractLockInfo> element) {
-        final ArrayList<AbstractLockInfo> infos = new ArrayList<AbstractLockInfo>();
+    private void refresh(PathMap.Element<LockInfo> element) {
+        final ArrayList<LockInfo> infos = new ArrayList<LockInfo>();
-        element.traverse(new PathMap.ElementVisitor<AbstractLockInfo>() {
-            public void elementVisited(PathMap.Element<AbstractLockInfo> element) {
+        element.traverse(new PathMap.ElementVisitor<LockInfo>() {
+            public void elementVisited(PathMap.Element<LockInfo> element) {
-            AbstractLockInfo info = infos.get(i);
+            LockInfo info = infos.get(i);
-            PathMap.Element<AbstractLockInfo> parent =
+            PathMap.Element<LockInfo> parent =
-            PathMap.Element<AbstractLockInfo> parent =
+            PathMap.Element<LockInfo> parent =
-            PathMap.Element<AbstractLockInfo> parent =
+            PathMap.Element<LockInfo> parent =
-                    session.removeLockToken(getLockToken());
+                    session.removeLockToken(getLockToken().toString());
-            PathMap.Element<AbstractLockInfo> element = lockMap.map(path, true);
+            PathMap.Element<LockInfo> element = lockMap.map(path, true);
-            AbstractLockInfo info = element.get();
+            LockInfo info = element.get();
-        lockMap.traverse(new PathMap.ElementVisitor<AbstractLockInfo>() {
-            public void elementVisited(PathMap.Element<AbstractLockInfo> element) {
+        lockMap.traverse(new PathMap.ElementVisitor<LockInfo>() {
+            public void elementVisited(PathMap.Element<LockInfo> element) {

UPD74 UPD5 UPD43 UPD43 UPD43 UPD42 UPD74 UPD42 UPD74 UPD74 UPD66 UPD66 UPD42 UPD74 MOV74 UPD5 UPD74 UPD74 UPD43 UPD43 UPD74 MOV74 UPD43 UPD43 INS70 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD74 UPD74 INS44 INS42 MOV8 UPD74 UPD74 UPD43 UPD42 UPD74 MOV74 UPD74 UPD74 UPD43 UPD74 UPD43 UPD42 UPD74 UPD74 UPD43 UPD42 UPD42 UPD74 UPD74 UPD42 UPD74 MOV74 UPD74 UPD43 UPD74 UPD74 UPD74 UPD74 UPD43 UPD74 UPD43 UPD43 INS43 INS42 UPD43 UPD43 UPD42 INS32 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 INS42 INS32 UPD42 UPD42 MOV32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 INS42 INS42 MOV32 MOV42 INS32 UPD74 INS32 INS42 INS42 UPD42 UPD42 UPD74 UPD74 UPD43 UPD43 UPD42 MOV32 INS42 UPD43 UPD43 INS42 INS42 UPD43 INS32 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 MOV32 MOV42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL66 DEL40 DEL40 DEL42