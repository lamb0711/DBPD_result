JCR-1104: JSR 283 support
- query (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@642979 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.commons.query.qom.DefaultTraversingQOMTreeVisitor;
-     * The shared item state manager of the workspace.
+     * The item state manager of the workspace.
-    private final ItemStateManager sharedItemMgr;
+    private final ItemStateManager ism;
-     * A hierarchy manager based on {@link #sharedItemMgr} to resolve paths.
+     * A hierarchy manager based on {@link #ism} to resolve paths.
-     * @param sharedItemMgr      the shared item state manager of the
-     *                           workspace.
-     * @param hmgr               a hierarchy manager based on sharedItemMgr.
+     * @param ism                the item state manager of the workspace.
+     * @param hmgr               a hierarchy manager based on ism.
-                                    ItemStateManager sharedItemMgr,
+                                    ItemStateManager ism,
-        this.sharedItemMgr = sharedItemMgr;
+        this.ism = ism;
-        Value v = (Value) ((StaticOperandImpl) node.getOperand2()).accept(this, data);
-        final String stringValue;
-        switch (v.getType()) {
-            case PropertyType.BINARY:
-                throw new InvalidQueryException("Binary value not supported in comparison");
-            case PropertyType.BOOLEAN:
-                stringValue = v.getString();
-                break;
-            case PropertyType.DATE:
-                stringValue = DateField.dateToString(v.getDate().getTime());
-                break;
-            case PropertyType.DOUBLE:
-                stringValue = DoubleField.doubleToString(v.getDouble());
-                break;
-            case PropertyType.LONG:
-                stringValue = LongField.longToString(v.getLong());
-                break;
-            case PropertyType.NAME:
-                Name n = session.getQName(v.getString());
-                stringValue = nsMappings.translatePropertyName(n);
-                break;
-            case PropertyType.PATH:
-                Path p = session.getQPath(v.getString());
-                stringValue = npResolver.getJCRPath(p);
-                break;
-            case PropertyType.REFERENCE:
-                stringValue = v.getString();
-                break;
-            case PropertyType.STRING:
-                stringValue = v.getString();
-                break;
-            default:
-                // TODO: support for new types defined in JSR 283
-                throw new InvalidQueryException("Unsupported property type "
-                        + PropertyType.nameFromValue(v.getType()));
-        }
-
-        final int operator = node.getOperator();
-
-        return ((DynamicOperandImpl) node.getOperand1()).accept(
-                new DefaultTraversingQOMTreeVisitor() {
-            public Object visit(PropertyValueImpl node, Object data) throws Exception {
-                String propName = npResolver.getJCRName(node.getPropertyQName());
-                String text = FieldNames.createNamedValue(propName, stringValue);
-                switch (operator) {
-                    case QueryObjectModelConstants.OPERATOR_EQUAL_TO:
-                        return new TermQuery(new Term(FieldNames.PROPERTIES, text));
-                    case QueryObjectModelConstants.OPERATOR_GREATER_THAN:
-                        Term lower = new Term(FieldNames.PROPERTIES, text);
-                        Term upper = new Term(FieldNames.PROPERTIES,
-                                FieldNames.createNamedValue(propName, "\uFFFF"));
-                        return new RangeQuery(lower, upper, false);
-                    case QueryObjectModelConstants.OPERATOR_GREATER_THAN_OR_EQUAL_TO:
-                        lower = new Term(FieldNames.PROPERTIES, text);
-                        upper = new Term(FieldNames.PROPERTIES,
-                                FieldNames.createNamedValue(propName, "\uFFFF"));
-                        return new RangeQuery(lower, upper, true);
-                    case QueryObjectModelConstants.OPERATOR_LESS_THAN:
-                        lower = new Term(FieldNames.PROPERTIES,
-                                FieldNames.createNamedValue(propName, ""));
-                        upper = new Term(FieldNames.PROPERTIES, text);
-                        return new RangeQuery(lower, upper, false);
-                    case QueryObjectModelConstants.OPERATOR_LESS_THAN_OR_EQUAL_TO:
-                        lower = new Term(FieldNames.PROPERTIES,
-                                FieldNames.createNamedValue(propName, ""));
-                        upper = new Term(FieldNames.PROPERTIES, text);
-                        return new RangeQuery(lower, upper, true);
-                    case QueryObjectModelConstants.OPERATOR_LIKE:
-                        if (stringValue.equals("%")) {
-                            return new MatchAllQuery(propName);
-                        } else {
-                            return new WildcardQuery(FieldNames.PROPERTIES,
-                                    propName, stringValue);
-                        }
-                    case QueryObjectModelConstants.OPERATOR_NOT_EQUAL_TO:
-                        MatchAllQuery all = new MatchAllQuery(propName);
-                        BooleanQuery b = new BooleanQuery();
-                        b.add(all, BooleanClause.Occur.SHOULD);
-                        b.add(new TermQuery(new Term(FieldNames.PROPERTIES, text)),
-                                BooleanClause.Occur.MUST_NOT);
-                        return b;
-                    default:
-                        throw new InvalidQueryException(
-                                "Unknown operator " + operator);
-                }
-            }
-
-            public Object visit(LengthImpl node, Object data) throws Exception {
-                // TODO: implement
-                return super.visit(node, data);
-            }
-
-            public Object visit(NodeLocalNameImpl node, Object data) throws Exception {
-                // TODO: implement
-                throw new UnsupportedOperationException("Not yet implemented");
-            }
-
-            public Object visit(NodeNameImpl node, Object data) throws Exception {
-                // TODO: implement
-                throw new UnsupportedOperationException("Not yet implemented");
-            }
-
-            public Object visit(FullTextSearchScoreImpl node, Object data)
-                    throws Exception {
-                // TODO: implement
-                throw new UnsupportedOperationException("Not yet implemented");
-            }
-
-            public Object visit(UpperCaseImpl node, Object data) throws Exception {
-                Object obj = super.visit(node, data);
-                if (obj instanceof Transformable) {
-                    ((Transformable) obj).setTransformation(TransformConstants.TRANSFORM_UPPER_CASE);
-                    return obj;
-                } else if (obj instanceof TermQuery) {
-                    return transformTermQuery((TermQuery) obj, true);
-                } else {
-                    throw new InvalidQueryException(
-                            "upper-case not supported on operand "
-                            + node.getOperand().getClass().getName());
-                }
-            }
-
-            public Object visit(LowerCaseImpl node, Object data) throws Exception {
-                Object obj = super.visit(node, data);
-                if (obj instanceof Transformable) {
-                    ((Transformable) obj).setTransformation(TransformConstants.TRANSFORM_LOWER_CASE);
-                    return obj;
-                } else if (obj instanceof TermQuery) {
-                    return transformTermQuery((TermQuery) obj, false);
-                } else {
-                    throw new InvalidQueryException(
-                            "lower-case not supported on operand "
-                            + node.getOperand().getClass().getName());
-                }
-            }
-
-            private Query transformTermQuery(TermQuery query, boolean toUpper)
-                    throws InvalidQueryException {
-                if (query.getTerm().field() == FieldNames.PROPERTIES) {
-                    if (toUpper) {
-                        return new CaseTermQuery.Upper(query.getTerm());
-                    } else {
-                        return new CaseTermQuery.Lower(query.getTerm());
-                    }
-                } else {
-                    throw new InvalidQueryException(
-                            "Upper/LowerCase not supported on field "
-                            + query.getTerm().field());
-                }
-            }
-        }, data);
+        return ((DynamicOperandImpl) node.getOperand1()).accept(this, node);
-    public Object visit(LowerCaseImpl node, Object data) {
-        // query builder should not use this method
-        throw new IllegalStateException();
+    public Object visit(LowerCaseImpl node, Object data) throws Exception {
+        Object obj = ((DynamicOperandImpl) node.getOperand()).accept(this, data);
+        if (obj instanceof Transformable) {
+            ((Transformable) obj).setTransformation(TransformConstants.TRANSFORM_LOWER_CASE);
+            return obj;
+        } else if (obj instanceof TermQuery) {
+            return transformTermQuery((TermQuery) obj, false);
+        } else {
+            throw new InvalidQueryException(
+                    "lower-case not supported on operand "
+                    + node.getOperand().getClass().getName());
+        }
-    public Object visit(NodeNameImpl node, Object data) {
-        // TODO: implement
-        throw new UnsupportedOperationException("not yet implemented");
+    public Object visit(NodeNameImpl node, Object data) throws Exception {
+        if (data instanceof ComparisonImpl) {
+            ComparisonImpl comp = ((ComparisonImpl) data);
+            int operator = comp.getOperator();
+            Value v = (Value) ((StaticOperandImpl) comp.getOperand2()).accept(this, data);
+            switch (v.getType()) {
+                case PropertyType.DATE:
+                case PropertyType.DOUBLE:
+                // TODO case PropertyType.DECIMAL:
+                case PropertyType.LONG:
+                case PropertyType.BOOLEAN:
+                case PropertyType.REFERENCE:
+                // TODO case PropertyType.WEAKREFERENCE:
+                // TODO case PropertyType.URI
+                    throw new InvalidQueryException(v.getString() +
+                            " cannot be converted into a NAME value");
+            }
+
+            Name value;
+            try {
+                value = JQOM2LuceneQueryBuilder.this.session.getQName(v.getString());
+            } catch (RepositoryException e) {
+                throw new InvalidQueryException(v.getString() +
+                        " cannot be converted into a NAME value");
+            }
+            String stringValue = npResolver.getJCRName(value);
+            // the prefix including colon
+            String prefix = stringValue.substring(0, stringValue.indexOf(':') + 1);
+
+            switch (operator) {
+                case QueryObjectModelConstants.OPERATOR_EQUAL_TO:
+                    return new TermQuery(new Term(FieldNames.LABEL, stringValue));
+                case QueryObjectModelConstants.OPERATOR_GREATER_THAN:
+                    Term lower = new Term(FieldNames.LABEL, stringValue);
+                    Term upper = new Term(FieldNames.LABEL,
+                            prefix + "\uFFFF");
+                    return new RangeQuery(lower, upper, false);
+                case QueryObjectModelConstants.OPERATOR_GREATER_THAN_OR_EQUAL_TO:
+                    lower = new Term(FieldNames.LABEL, stringValue);
+                    upper = new Term(FieldNames.LABEL,
+                            prefix + "\uFFFF");
+                    return new RangeQuery(lower, upper, true);
+                case QueryObjectModelConstants.OPERATOR_LESS_THAN:
+                    lower = new Term(FieldNames.LABEL, prefix);
+                    upper = new Term(FieldNames.LABEL, stringValue);
+                    return new RangeQuery(lower, upper, false);
+                case QueryObjectModelConstants.OPERATOR_LESS_THAN_OR_EQUAL_TO:
+                    lower = new Term(FieldNames.LABEL, prefix);
+                    upper = new Term(FieldNames.LABEL, stringValue);
+                    return new RangeQuery(lower, upper, true);
+                case QueryObjectModelConstants.OPERATOR_LIKE:
+                    if (stringValue.equals("%")) {
+                        return new MatchAllDocsQuery();
+                    } else {
+                        return new WildcardQuery(FieldNames.LABEL,
+                                null, stringValue);
+                    }
+                case QueryObjectModelConstants.OPERATOR_NOT_EQUAL_TO:
+                    MatchAllDocsQuery all = new MatchAllDocsQuery();
+                    BooleanQuery b = new BooleanQuery();
+                    b.add(all, BooleanClause.Occur.SHOULD);
+                    b.add(new TermQuery(new Term(FieldNames.LABEL, stringValue)),
+                            BooleanClause.Occur.MUST_NOT);
+                    return b;
+                default:
+                    throw new InvalidQueryException(
+                            "Unknown operator " + operator);
+            }
+        } else {
+            // TODO
+            throw new InvalidQueryException("not yet implemented");
+        }
-    public Object visit(PropertyValueImpl node, Object data) {
-        // query builder should not use this method
-        throw new IllegalStateException();
+    public Object visit(PropertyValueImpl node, Object data) throws Exception {
+        if (data instanceof ComparisonImpl) {
+            ComparisonImpl comp = ((ComparisonImpl) data);
+            int operator = comp.getOperator();
+            Value v = (Value) ((StaticOperandImpl) comp.getOperand2()).accept(this, data);
+            String stringValue = stringValueOf(v);
+            String propName = npResolver.getJCRName(node.getPropertyQName());
+            String text = FieldNames.createNamedValue(propName, stringValue);
+            switch (operator) {
+                case QueryObjectModelConstants.OPERATOR_EQUAL_TO:
+                    return new TermQuery(new Term(FieldNames.PROPERTIES, text));
+                case QueryObjectModelConstants.OPERATOR_GREATER_THAN:
+                    Term lower = new Term(FieldNames.PROPERTIES, text);
+                    Term upper = new Term(FieldNames.PROPERTIES,
+                            FieldNames.createNamedValue(propName, "\uFFFF"));
+                    return new RangeQuery(lower, upper, false);
+                case QueryObjectModelConstants.OPERATOR_GREATER_THAN_OR_EQUAL_TO:
+                    lower = new Term(FieldNames.PROPERTIES, text);
+                    upper = new Term(FieldNames.PROPERTIES,
+                            FieldNames.createNamedValue(propName, "\uFFFF"));
+                    return new RangeQuery(lower, upper, true);
+                case QueryObjectModelConstants.OPERATOR_LESS_THAN:
+                    lower = new Term(FieldNames.PROPERTIES,
+                            FieldNames.createNamedValue(propName, ""));
+                    upper = new Term(FieldNames.PROPERTIES, text);
+                    return new RangeQuery(lower, upper, false);
+                case QueryObjectModelConstants.OPERATOR_LESS_THAN_OR_EQUAL_TO:
+                    lower = new Term(FieldNames.PROPERTIES,
+                            FieldNames.createNamedValue(propName, ""));
+                    upper = new Term(FieldNames.PROPERTIES, text);
+                    return new RangeQuery(lower, upper, true);
+                case QueryObjectModelConstants.OPERATOR_LIKE:
+                    if (stringValue.equals("%")) {
+                        return new MatchAllQuery(propName);
+                    } else {
+                        return new WildcardQuery(FieldNames.PROPERTIES,
+                                propName, stringValue);
+                    }
+                case QueryObjectModelConstants.OPERATOR_NOT_EQUAL_TO:
+                    MatchAllQuery all = new MatchAllQuery(propName);
+                    BooleanQuery b = new BooleanQuery();
+                    b.add(all, BooleanClause.Occur.SHOULD);
+                    b.add(new TermQuery(new Term(FieldNames.PROPERTIES, text)),
+                            BooleanClause.Occur.MUST_NOT);
+                    return b;
+                default:
+                    throw new InvalidQueryException(
+                            "Unknown operator " + operator);
+            }
+        } else {
+            // TODO
+            throw new InvalidQueryException("not yet implemented");
+        }
-        // query builder should not use this method
-        throw new IllegalStateException();
+        Object obj = ((DynamicOperandImpl) node.getOperand()).accept(this, data);
+        if (obj instanceof Transformable) {
+            ((Transformable) obj).setTransformation(TransformConstants.TRANSFORM_UPPER_CASE);
+            return obj;
+        } else if (obj instanceof TermQuery) {
+            return transformTermQuery((TermQuery) obj, true);
+        } else {
+            throw new InvalidQueryException(
+                    "upper-case not supported on operand "
+                    + node.getOperand().getClass().getName());
+        }
+    }
+
+    //------------------------------< internal >--------------------------------
+
+    private String stringValueOf(Value value) throws RepositoryException {
+        switch (value.getType()) {
+            case PropertyType.BINARY:
+                return value.getString();
+            case PropertyType.BOOLEAN:
+                return value.getString();
+            case PropertyType.DATE:
+                return DateField.dateToString(value.getDate().getTime());
+            case PropertyType.DOUBLE:
+                return DoubleField.doubleToString(value.getDouble());
+            case PropertyType.LONG:
+                return LongField.longToString(value.getLong());
+            case PropertyType.NAME:
+                Name n = session.getQName(value.getString());
+                return nsMappings.translatePropertyName(n);
+            case PropertyType.PATH:
+                Path p = session.getQPath(value.getString());
+                return npResolver.getJCRPath(p);
+            case PropertyType.REFERENCE:
+                return value.getString();
+            case PropertyType.STRING:
+                return value.getString();
+            default:
+                // TODO: support for new types defined in JSR 283
+                throw new InvalidQueryException("Unsupported property type "
+                        + PropertyType.nameFromValue(value.getType()));
+        }
+    }
+
+    private Query transformTermQuery(TermQuery query, boolean toUpper)
+            throws InvalidQueryException {
+        if (query.getTerm().field() == FieldNames.PROPERTIES) {
+            if (toUpper) {
+                return new CaseTermQuery.Upper(query.getTerm());
+            } else {
+                return new CaseTermQuery.Lower(query.getTerm());
+            }
+        } else {
+            throw new InvalidQueryException(
+                    "Upper/LowerCase not supported on field "
+                    + query.getTerm().field());
+        }

MOV31 INS31 MOV31 MOV31 MOV31 INS31 MOV31 INS83 MOV43 INS42 MOV44 MOV44 MOV43 INS8 MOV43 MOV44 MOV44 MOV43 INS8 UPD83 MOV83 MOV43 INS42 INS44 INS43 INS8 UPD42 UPD42 INS41 INS25 INS25 INS43 INS42 UPD42 MOV42 INS50 UPD66 UPD42 UPD66 UPD66 INS32 MOV43 INS62 INS8 INS8 INS62 MOV8 INS8 MOV43 UPD42 MOV42 INS32 MOV49 INS41 MOV49 INS41 MOV49 INS41 MOV49 INS41 MOV49 INS41 MOV49 INS60 INS41 MOV49 INS60 INS41 MOV49 INS41 MOV49 INS41 INS49 INS53 UPD42 MOV36 INS42 INS52 INS42 INS32 INS42 INS43 INS60 INS60 MOV60 INS50 MOV60 INS54 INS60 INS60 INS50 MOV53 INS42 INS43 INS60 INS60 INS60 INS60 INS53 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS43 INS59 MOV32 MOV43 INS59 MOV32 INS32 INS32 MOV14 UPD42 UPD42 INS36 INS42 INS52 INS42 INS42 INS43 INS59 INS39 INS59 MOV43 MOV32 INS49 INS49 INS49 INS49 INS49 INS53 MOV43 INS8 INS12 INS43 INS59 INS43 INS59 INS42 INS49 INS41 INS49 INS60 INS60 INS41 INS49 MOV21 MOV21 INS41 INS49 MOV21 MOV21 INS41 INS49 INS21 INS21 INS41 INS49 INS25 INS49 INS60 INS60 INS21 INS21 INS41 INS49 INS53 INS42 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS14 INS36 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 UPD43 INS27 INS11 INS42 INS42 INS36 INS42 INS32 INS40 INS40 INS40 INS40 INS40 INS14 UPD42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS14 INS40 INS43 INS59 INS43 INS59 INS14 INS40 INS14 INS40 INS14 INS40 INS7 INS7 INS14 INS40 INS32 INS8 INS8 INS40 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS14 UPD43 UPD45 INS42 INS42 INS36 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS45 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS45 INS32 INS43 INS32 INS11 INS42 INS42 MOV43 MOV43 INS27 INS7 INS43 INS42 INS53 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS34 INS27 INS43 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 INS9 INS42 INS14 UPD42 INS14 INS43 INS42 INS42 INS9 UPD42 INS14 INS42 INS14 INS43 INS42 INS42 INS9 INS42 INS14 INS42 INS14 INS43 INS42 INS42 INS9 INS42 INS42 INS45 INS41 MOV41 UPD42 MOV42 INS42 INS14 UPD42 MOV42 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS40 INS43 INS27 UPD42 INS11 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 MOV32 INS45 INS42 MOV32 INS42 MOV14 INS32 INS34 INS42 INS43 INS40 INS42 INS43 INS40 INS42 INS43 INS40 INS27 INS42 INS43 INS40 INS42 INS43 INS40 INS27 INS42 INS43 INS40 INS42 INS43 INS40 INS42 INS42 INS43 INS40 INS42 UPD43 MOV43 INS40 INS42 UPD42 MOV42 INS14 INS14 INS43 UPD43 MOV43 INS43 INS14 UPD42 MOV42 INS45 INS42 INS43 INS42 INS42 INS36 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 UPD42 INS27 UPD42 MOV42 UPD42 MOV42 INS13 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 UPD42 INS43 INS43 INS40 INS33 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD43 MOV43 INS40 INS42 INS42 INS11 INS52 INS42 MOV32 INS45 UPD42 MOV42 INS42 UPD42 INS43 INS32 UPD42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL66 DEL42 DEL42 DEL42 DEL48 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL42 DEL48 DEL53 DEL42 DEL32 DEL7 DEL21 DEL10 DEL42 DEL42 DEL32 DEL32 DEL32 DEL7 DEL21 DEL10 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL10 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL10 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL10 DEL42 DEL59 DEL60 DEL10 DEL10 DEL10 DEL49 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL14 DEL53 DEL50 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL43 DEL8 DEL31 DEL83 DEL43 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL1 DEL14 DEL42 DEL32 DEL41 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL42 DEL42 DEL42 DEL48 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL53 DEL8 DEL31