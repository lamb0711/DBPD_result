JCR-582 No support for Oracle schemas


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@454389 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.util.Text;
+import javax.jcr.RepositoryException;
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.sql.DatabaseMetaData;
+import java.sql.Statement;
+    /**
+     * {@inheritDoc}
+     * <p/>
+     * Overridden in order to support multiple oracle schemas. Note that
+     * schema names in Oracle correspond to the username of the connection.
+     * See http://issues.apache.org/jira/browse/JCR-582
+     *
+     * @throws Exception if an error occurs
+     */
+    protected void checkSchema() throws Exception {
+        DatabaseMetaData metaData = con.getMetaData();
+        String tableName = schemaObjectPrefix + "NODE";
+        if (metaData.storesLowerCaseIdentifiers()) {
+            tableName = tableName.toLowerCase();
+        } else if (metaData.storesUpperCaseIdentifiers()) {
+            tableName = tableName.toUpperCase();
+        }
+        String userName = metaData.getUserName();
+
+        ResultSet rs = metaData.getTables(null, userName, tableName, null);
+        boolean schemaExists;
+        try {
+            schemaExists = rs.next();
+        } finally {
+            rs.close();
+        }
+
+        if (!schemaExists) {
+            // read ddl from resources
+            InputStream in = getClass().getResourceAsStream(schema + ".ddl");
+            if (in == null) {
+                String msg = "Configuration error: unknown schema '" + schema + "'";
+                log.debug(msg);
+                throw new RepositoryException(msg);
+            }
+            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+            Statement stmt = con.createStatement();
+            try {
+                String sql = reader.readLine();
+                while (sql != null) {
+                    // Skip comments and empty lines
+                    if (!sql.startsWith("#") && sql.length() > 0) {
+                        // replace prefix variable
+                        sql = Text.replace(sql, SCHEMA_OBJECT_PREFIX_VARIABLE, schemaObjectPrefix);
+                        // execute sql stmt
+                        stmt.executeUpdate(sql);
+                    }
+                    // read next sql stmt
+                    sql = reader.readLine();
+                }
+                // commit the changes
+                con.commit();
+            } finally {
+                closeStream(in);
+                closeStatement(stmt);
+            }
+        }
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS39 INS42 INS43 INS8 INS65 INS65 INS42 INS60 INS60 INS25 INS60 INS60 INS60 INS54 INS25 INS65 INS66 INS66 INS66 INS66 INS42 INS66 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS43 INS59 INS43 INS59 INS39 INS59 INS8 INS8 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS21 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS21 INS21 INS42 INS60 INS25 INS60 INS60 INS54 INS42 INS42 INS42 INS45 INS7 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS7 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS8 INS42 INS32 INS7 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS53 INS42 INS42 INS14 INS42 INS42 INS32 INS60 INS61 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS27 INS43 INS59 INS32 INS14 INS43 INS14 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS8 INS7 INS38 INS27 INS21 INS21 INS42 INS32 INS32 INS32 INS34 INS7 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42