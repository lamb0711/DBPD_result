JCR-EXT: Cleanups and improvements for the simple node type state implementation.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@328809 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashSet;
-import java.util.Set;
+import java.util.Arrays;
-    private QName defaultPrimaryTypeName;
+    private QName defaultPrimaryTypeName = null;
-    private Set requiredPrimaryTypeNames;
+    private QName[] requiredPrimaryTypeNames = new QName[0];
-    private boolean allowsSameNameSiblings;
-
-    /** Creates an empty node definition state instance. */
-    public NodeDefinitionState() {
-        super();
-        defaultPrimaryTypeName = null;
-        requiredPrimaryTypeNames = new HashSet();
-        allowsSameNameSiblings = false;
-    }
+    private boolean allowsSameNameSiblings = false;
-        return (QName[]) requiredPrimaryTypeNames.toArray(
-                new QName[requiredPrimaryTypeNames.size()]);
+        return requiredPrimaryTypeNames;
-     * Adds a type name to the list of required primary types.
+     * Sets the list of required primary types.
-     * @param requiredPrimaryTypeName type name
+     * @param requiredPrimaryTypeNames type names
-    public void addRequiredPrimaryTypeName(QName requiredPrimaryTypeName) {
-        requiredPrimaryTypeNames.add(requiredPrimaryTypeName);
+    public void setRequiredPrimaryTypeName(QName[] requiredPrimaryTypeNames) {
+        this.requiredPrimaryTypeNames = requiredPrimaryTypeNames;
+        Arrays.sort(this.requiredPrimaryTypeNames);
+    public boolean equals(Object object) {
+        return (this == object)
+            || (object != null && new StateComparator().compare(this, object) == 0);
+    }
+
+    public int hashCode() {
+        int code = super.hashCode();
+        code = code * 17 + (allowsSameNameSiblings ? 1 : 0);
+        code = code * 17 + ((defaultPrimaryTypeName != null) ? defaultPrimaryTypeName.hashCode() : 0);
+        for (int i = 0; i < requiredPrimaryTypeNames.length; i++) {
+            code = code * 17 + requiredPrimaryTypeNames[i].hashCode();
+        }
+        return code;
+    }
+

MOV31 MOV31 MOV31 UPD40 INS31 INS5 MOV29 INS83 MOV5 INS42 INS8 INS39 UPD42 INS44 INS8 INS39 UPD42 INS44 UPD39 INS42 INS8 INS33 INS43 INS85 MOV3 INS9 INS41 INS65 MOV5 INS42 MOV21 MOV21 INS43 INS42 INS60 INS21 INS21 INS24 INS41 UPD42 MOV42 INS34 INS42 UPD66 INS42 INS66 INS32 INS42 INS27 INS39 INS59 INS7 INS7 INS58 INS27 INS37 INS8 INS42 INS22 INS42 INS42 INS42 INS22 INS36 INS36 INS42 INS48 INS42 INS27 INS42 INS27 INS39 INS59 INS42 INS40 INS42 MOV21 INS52 INS42 INS52 INS42 INS27 INS27 INS42 INS27 INS36 INS27 INS36 INS42 INS34 INS7 INS52 INS42 INS27 INS27 INS42 INS34 INS16 INS42 INS34 INS16 INS42 INS27 INS42 INS33 INS32 INS34 INS42 INS34 INS34 INS36 INS32 INS34 INS27 INS32 INS14 UPD42 MOV42 INS52 INS42 INS27 INS42 INS42 INS42 INS34 INS2 UPD42 MOV42 INS43 INS42 INS33 INS42 INS42 INS42 DEL40 DEL26 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL14 DEL42 DEL9 DEL7 DEL46 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL32 DEL11 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8