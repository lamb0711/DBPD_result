JCR-1184: Introduce spellchecker functionality based on content in the workspace

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@587866 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.value.LongValue;
-import org.apache.jackrabbit.value.PathValue;
-import org.apache.jackrabbit.value.StringValue;
+import org.apache.jackrabbit.value.ValueFactoryImpl;
+import javax.jcr.ValueFactory;
+     * The value factory.
+     */
+    private static final ValueFactory VALUE_FACTORY = ValueFactoryImpl.getInstance();
+
+    /**
+     * The name of the spell check function without prefix but with left
+     * parenthesis.
+     */
+    private static final String SPELLCHECK_FUNC_LPAR = "spellcheck(";
+
+    /**
-     * The excerpt provider.
+     * The excerpt provider or <code>null</code> if none is available.
+     * The spell suggestion or <code>null</code> if none is available.
+     */
+    private final SpellSuggestion spellSuggestion;
+
+    /**
-        this(nodes, properties, resolver, null);
+        this(nodes, properties, resolver, null, null);
-     * @param nodes      a <code>ScoreNodeIterator</code> that contains the
-     *                   nodes of the query result.
-     * @param properties <code>QName</code> of the select properties.
-     * @param resolver   <code>NamespaceResolver</code> of the user
-     *                   <code>Session</code>.
-     * @param exProvider the excerpt provider associated with the query result
-     *                   that created this row iterator.
+     * @param nodes           a <code>ScoreNodeIterator</code> that contains the
+     *                        nodes of the query result.
+     * @param properties      <code>QName</code> of the select properties.
+     * @param resolver        <code>NamespaceResolver</code> of the user
+     *                        <code>Session</code>.
+     * @param exProvider      the excerpt provider associated with the query
+     *                        result that created this row iterator.
+     * @param spellSuggestion the spell suggestion associated with the query
+     *                        result or <code>null</code> if none is available.
-                    ExcerptProvider exProvider) {
+                    ExcerptProvider exProvider,
+                    SpellSuggestion spellSuggestion) {
+        this.spellSuggestion = spellSuggestion;
-                                tmp[i] = new StringValue(prop.getString());
+                                tmp[i] = VALUE_FACTORY.createValue(prop.getString());
-                        // property not set or jcr:path / jcr:score / jcr:highlight
+                        // property not set or one of the following:
+                        // jcr:path / jcr:score / rep:excerpt / rep:spellcheck
-                            tmp[i] = PathValue.valueOf(node.getPath());
+                            tmp[i] = VALUE_FACTORY.createValue(node.getPath(), PropertyType.PATH);
-                            tmp[i] = new LongValue(Math.round(score * 1000f));
+                            tmp[i] = VALUE_FACTORY.createValue(Math.round(score * 1000f));
+                        } else if (isSpellCheckFunction(properties[i])) {
+                            tmp[i] = getSpellCheckedStatement();
-                        return new StringValue(p.getString());
+                        return VALUE_FACTORY.createValue(p.getString());
-                    // either jcr:score, jcr:path or not set
+                    // either jcr:score, jcr:path, rep:excerpt,
+                    // rep:spellcheck or not set
-                        return PathValue.valueOf(node.getPath());
+                        return VALUE_FACTORY.createValue(node.getPath(), PropertyType.PATH);
-                        return new LongValue(Math.round(score * 1000f));
+                        return VALUE_FACTORY.createValue(Math.round(score * 1000f));
+                    } else if (isSpellCheckFunction(prop)) {
+                        return getSpellCheckedStatement();
-                    return new StringValue(excerpt);
+                    return VALUE_FACTORY.createValue(excerpt);
-                return new StringValue(text);
+                return VALUE_FACTORY.createValue(text);
+
+        /**
+         * @param name a QName.
+         * @return <code>true</code> if <code>name</code> is the rep:spellcheck
+         *         function, <code>false</code> otherwise.
+         */
+        private boolean isSpellCheckFunction(QName name) {
+            return name.getNamespaceURI().equals(QName.NS_REP_URI) &&
+                    name.getLocalName().startsWith(SPELLCHECK_FUNC_LPAR);
+        }
+
+        /**
+         * Returns the spell checked string of the first relation query node
+         * with a spellcheck operation.
+         *
+         * @return a StringValue or <code>null</code> if the spell checker
+         *         thinks the words are spelled correctly. This method also
+         *         returns <code>null</code> if no spell checker is configured.
+         */
+        private Value getSpellCheckedStatement() {
+            String v = null;
+            if (spellSuggestion != null) {
+                try {
+                    v = spellSuggestion.getSuggestion();
+                } catch (IOException e) {
+                    log.warn("Spell checking failed", e);
+                }
+            }
+            if (v != null) {
+                return VALUE_FACTORY.createValue(v);
+            } else {
+                return null;
+            }
+        }

MOV26 UPD40 UPD40 INS23 INS23 INS23 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS44 INS31 INS31 INS65 INS42 INS42 INS32 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS65 INS43 INS42 INS21 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS66 INS42 INS42 INS66 INS66 UPD66 INS66 INS33 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS66 INS42 INS7 INS65 INS65 INS43 INS42 INS41 INS65 INS65 INS42 INS60 INS25 INS25 INS22 INS42 INS42 INS66 INS66 INS66 INS42 INS27 INS66 INS66 INS66 INS66 INS66 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS52 INS42 INS32 INS32 INS42 INS42 INS33 INS42 INS33 INS54 INS42 INS33 INS41 INS41 INS32 INS32 INS42 INS40 INS32 INS42 INS42 INS8 INS12 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS7 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS25 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 MOV32 UPD42 UPD42 INS40 INS32 INS32 INS8 MOV8 INS25 INS42 INS42 MOV32 INS42 INS42 INS41 MOV2 INS32 INS8 MOV8 INS32 UPD42 UPD42 INS40 MOV2 INS32 INS42 INS2 INS21 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS7 INS42 INS42 MOV32 INS2 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14