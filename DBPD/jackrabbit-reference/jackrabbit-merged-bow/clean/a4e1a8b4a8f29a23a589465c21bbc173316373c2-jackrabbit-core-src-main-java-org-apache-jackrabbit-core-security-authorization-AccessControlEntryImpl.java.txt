JCR-2887 - Split PrivilegeRegistry in a per-session manager instance and a repository level registry  (WIP)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1181645 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
-     * All privileges contained in this entry
+     * All privileges contained in this entry.
-    private final Privilege[] privileges;
+    private Privilege[] privileges;
-     * @throws AccessControlException if either principal or privileges are invalid.
-     * @throws RepositoryException if another error occurs.
-     */
-    protected AccessControlEntryImpl(Principal principal, Privilege[] privileges)
-            throws AccessControlException, RepositoryException {
-        this(principal, privileges, true, null);
-    }
-
-    /**
-     * Construct an access control entry for the given principal and privileges.
-     *
-     * @param principal Principal for this access control entry.
-     * @param privileges Privileges for this access control entry.
-        if (principal == null) {
-            throw new IllegalArgumentException();
+        if (principal == null || privileges == null) {
+            throw new AccessControlException();
-        this.privilegeBits = getPrivilegeManager().getBits(privileges);
+        this.privilegeBits = getPrivilegeManager().getBits(privileges).unmodifiable();
+     * Construct an access control entry for the given principal and privileges.
+     *
+     * @param principal Principal for this access control entry.
+     * @param privilegesBits Privileges for this access control entry.
+     * @param isAllow <code>true</code> if this ACE grants the specified
+     * privileges to the specified principal; <code>false</code> otherwise.
+     * @param restrictions A map of restriction name (String) to restriction
+     * (Value). See {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlList#getRestrictionNames()}
+     * and {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlList#getRestrictionType(String)}.
+     * @throws RepositoryException if another error occurs.
+     */
+    protected AccessControlEntryImpl(Principal principal, PrivilegeBits privilegesBits,
+                                     boolean isAllow, Map<String, Value> restrictions)
+            throws RepositoryException {
+        if (principal == null || privilegesBits == null) {
+            throw new IllegalArgumentException();
+        }
+        this.principal = principal;
+        this.privilegeBits = privilegesBits.unmodifiable();
+        this.allow = isAllow;
+
+        if (restrictions == null) {
+            this.restrictions = Collections.emptyMap();
+        } else {
+            this.restrictions = new HashMap<Name, Value>(restrictions.size());
+            // validate the passed restrictions and fill the map
+            for (String name : restrictions.keySet()) {
+                Value value = ValueHelper.copy(restrictions.get(name), getValueFactory());
+                this.restrictions.put(getResolver().getQName(name), value);
+            }
+        }
+    }
+
+    /**
+     *
+     * @param base
+     * @param privilegeBits
+     * @param isAllow
+     * @throws AccessControlException
+     */
+    protected AccessControlEntryImpl(AccessControlEntryImpl base, PrivilegeBits privilegeBits, boolean isAllow)
+            throws AccessControlException, RepositoryException {
+        this(base.principal, privilegeBits, isAllow, (base.restrictions.isEmpty()) ? null : Collections.<String, Value>emptyMap());
+
+        if (!base.restrictions.isEmpty()) {
+            // validate the passed restrictions and fill the map
+            for (Name name : base.restrictions.keySet()) {
+                Value value = ValueHelper.copy(base.restrictions.get(name), getValueFactory());
+                this.restrictions.put(name, value);
+            }
+        }
+    }
+
+    /**
-        for (Privilege p : privileges) {
-            h = 37 * h + p.hashCode();
-        }
+        h = 37 * h + privilegeBits.hashCode();
+        if (privileges == null) {
+            Set<Privilege> ps = getPrivilegeManager().getPrivileges(privilegeBits);
+            privileges = ps.toArray(new Privilege[ps.size()]);
+        }

INS26 MOV31 INS40 INS31 INS44 INS44 INS29 INS83 INS42 INS44 INS44 INS44 MOV43 INS43 INS8 INS8 INS25 UPD65 INS65 INS43 UPD42 INS39 INS42 INS74 INS42 MOV25 INS21 INS21 INS21 INS25 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS17 INS25 MOV21 INS25 MOV41 UPD66 INS27 INS8 UPD42 UPD42 INS66 UPD66 INS42 INS66 INS66 INS65 INS66 INS65 INS66 UPD42 MOV42 INS43 INS43 INS43 INS27 INS7 INS7 INS7 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS16 INS38 INS8 INS27 INS8 MOV27 INS27 INS53 INS32 INS68 INS68 INS42 INS42 INS42 INS27 INS27 INS22 INS42 INS22 INS32 INS22 INS42 INS42 INS33 INS21 INS21 INS70 INS36 INS33 INS32 INS32 INS70 INS42 INS33 INS60 INS21 INS42 INS33 INS14 MOV32 INS42 INS40 INS42 INS40 INS42 INS69 INS42 INS33 INS42 INS33 INS52 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS7 INS7 INS44 INS32 INS8 INS32 INS42 INS43 INS43 INS42 INS40 INS42 INS44 INS32 INS8 INS74 INS59 INS7 INS43 INS43 INS22 INS32 INS22 INS14 INS43 INS42 INS42 INS42 INS60 INS21 INS40 INS42 INS42 INS42 INS43 INS42 INS40 INS42 INS60 INS21 UPD42 INS43 MOV43 INS42 INS32 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS74 INS32 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS3 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS22 INS42 INS32 INS42 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 DEL83 DEL43 DEL85 DEL5 DEL42 DEL42 DEL9 DEL33 DEL17 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8