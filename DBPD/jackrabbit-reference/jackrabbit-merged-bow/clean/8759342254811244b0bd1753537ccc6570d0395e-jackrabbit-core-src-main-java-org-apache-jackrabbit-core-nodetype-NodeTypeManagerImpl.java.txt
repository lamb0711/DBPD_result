JCR-890: concurrent read-only access to a session

Move ValueFactory into SessionContext.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@985269 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.ValueFactory;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.data.DataStore;
+import org.apache.jackrabbit.core.session.SessionContext;
-     * The wrapped node type registry.
+     * Component context of the current session.
-    private final NodeTypeRegistry ntReg;
-
-    /**
-     * Current session.
-     */
-    private final SessionImpl session;
-
-    /**
-     * The value factory obtained from the current session.
-     */
-    private final ValueFactory valueFactory;
+    private final SessionContext context;
-    private final DataStore store;
-
-    public NodeTypeManagerImpl(
-            NodeTypeRegistry ntReg, SessionImpl session, DataStore store) {
-        this.ntReg = ntReg;
-        this.session = session;
-        this.valueFactory = session.getValueFactory();
-        this.ntReg.addListener(this);
-        this.store = store;
+    public NodeTypeManagerImpl(SessionContext context) {
+        this.context = context;
-        rootNodeDef =
-            new NodeDefinitionImpl(ntReg.getRootNodeDef(), this, session);
+        NodeTypeRegistry registry = context.getNodeTypeRegistry();
+
+        rootNodeDef = new NodeDefinitionImpl(
+                registry.getRootNodeDef(), this, context);
+
+        registry.addListener(this);
-                ndi = new NodeDefinitionImpl(def, this, session);
+                ndi = new NodeDefinitionImpl(def, this, context);
-                pdi = new PropertyDefinitionImpl(def, this, session, valueFactory);
+                pdi = new PropertyDefinitionImpl(
+                        def, this, context, context.getValueFactory());
-                EffectiveNodeType ent = ntReg.getEffectiveNodeType(name);
-                QNodeTypeDefinition def = ntReg.getNodeTypeDef(name);
-                nt = new NodeTypeImpl(ent, def, this, session, valueFactory, store);
+                NodeTypeRegistry registry = context.getNodeTypeRegistry();
+                EffectiveNodeType ent = registry.getEffectiveNodeType(name);
+                QNodeTypeDefinition def = registry.getNodeTypeDef(name);
+                nt = new NodeTypeImpl(
+                        ent, def, this, context,
+                        context.getValueFactory(), context.getDataStore());
-        return session;
+        return context;
-        return ntReg;
+        return context.getNodeTypeRegistry();
-                    NamespaceMapping mapping = new NamespaceMapping(session);
+                    NamespaceMapping mapping = new NamespaceMapping(context.getSessionImpl());
-            new NamespaceHelper(session).registerNamespaces(namespaceMap);
+            new NamespaceHelper(context.getSessionImpl()).registerNamespaces(namespaceMap);
+                NodeTypeRegistry registry = context.getNodeTypeRegistry();
-                    if (ntReg.isRegistered(nodeTypeDef.getName())) {
+                    if (registry.isRegistered(nodeTypeDef.getName())) {
-                    ntReg.reregisterNodeType(nodeTypeDef);
+                    registry.reregisterNodeType(nodeTypeDef);
-        Name[] ntNames = ntReg.getRegisteredNodeTypes();
+        Name[] ntNames = context.getNodeTypeRegistry().getRegisteredNodeTypes();
-        Name[] ntNames = ntReg.getRegisteredNodeTypes();
+        Name[] ntNames = context.getNodeTypeRegistry().getRegisteredNodeTypes();
-        Name[] ntNames = ntReg.getRegisteredNodeTypes();
+        Name[] ntNames = context.getNodeTypeRegistry().getRegisteredNodeTypes();
-            return getNodeType(session.getQName(nodeTypeName));
+            return getNodeType(context.getQName(nodeTypeName));
-        ntReg.registerNodeTypes(defs);
+        context.getNodeTypeRegistry().registerNodeTypes(defs);
-            Name qname = session.getQName(name);
+            Name qname = context.getQName(name);
+        NodeTypeRegistry registry = context.getNodeTypeRegistry();
+
-            if (ntReg.isRegistered(def.getName())) {
+            if (registry.isRegistered(def.getName())) {
-                ntReg.reregisterNodeType(nodeTypeDef);
+                registry.reregisterNodeType(nodeTypeDef);
-                ntNames.add(session.getQName(name));
+                ntNames.add(context.getQName(name));
-        return new QNodeTypeDefinitionImpl(definition, session, QValueFactoryImpl.getInstance());
+        return new QNodeTypeDefinitionImpl(definition, context, QValueFactoryImpl.getInstance());
-        ntReg.dump(ps);
+        context.getNodeTypeRegistry().dump(ps);

MOV26 UPD40 UPD43 UPD42 UPD42 UPD43 UPD42 INS60 INS21 INS60 UPD66 UPD42 MOV43 INS59 INS32 UPD42 INS32 INS43 INS59 UPD42 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV43 UPD42 INS32 INS32 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS60 INS60 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV43 INS59 INS32 INS43 INS59 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 MOV43 UPD42 UPD42 INS32 INS42 INS42 UPD42 UPD42 UPD42 INS32 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 UPD42 UPD42 MOV43 INS32 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL52 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42