JCR-442: Committed patch-060808-backup.txt from Nicolas.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429606 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import org.apache.jackrabbit.core.config.ConfigurationException;
+    /**
+     * TODO where can I find the generic repository.xml?
+     * Path to the generic repository.xml
+     */
-    static BackupIOHandler h; 
-    RepositoryImpl repo;
-    BackupConfig conf;
-    RepositoryConfig repoConf;
-    BackupManager backup;
-  
-    
+    private static final String REPOSITORY_XML = "/home/ntoper/workspace/backup/";
+
+    /**
+     * The backupIOHandler used to handle IO
+     */
+    private static BackupIOHandler h;
+
+    /**
+     * Used to get a reference to the repository.
+     */
+    private RepositoryImpl repo;
+
+    /**
+     *  The backupconfig object.
+     */
+    private BackupConfig conf;
+ 
+    /**
+     * The repositoryConfig object.
+     */
+    private RepositoryConfig repoConf;
+
+    /**
+     * The backupManager is used to launch all backup/restore operations.
+     */
+    private BackupManager backup;
+
-     * LaunchBackup --zip myzip.zip --size 2 --conf backup.xml --login nico --password mlypass backup repository.xml repository/
-     * LaunchBackup --zip ./myzip.zip --size 2 --conf backup.xml --login nico --password  restore repository.xml repository/
+     * LaunchBackup --zip myzip.zip --conf backup.xml --login nico --password mlypass backup repository.xml repository/
+     * LaunchBackup --zip ./myzip.zip --login nico --password p repository.xml  restore 
+     * LaunchBackup --zip ./myzip.zip -- conf restore.xml --login nico --password p restore repository.xml repository/
+     * 
+     * If backup.xml for restore, no repository + backupConfig restore Only partial restore
-     * --size in Go
-     * 
-     * 
+     *
-     * 
+     *
-     *  
+     *
-     * 
+     *
-     * @throws RepositoryException 
-     * @throws IOException 
-     * @throws IOException 
-     * @throws IllegalAccessException 
-     * @throws InstantiationException 
-     * @throws ClassNotFoundException 
+     * @throws RepositoryException
+     * @throws IOException
+     * @throws IllegalAccessException
+     * @throws InstantiationException
+     * @throws ClassNotFoundException
+     * @throws AccessDeniedException
+     * @throws IOException
-        
+
-            
+
-            
-            if (args[i].equals("--zip")){
+
+            if (args[i].equals("--zip")) {
-                //We put it here because later we might offer other possibilities than only zip
-                LaunchBackup.h = new ZipFileBackupIOHandler(zipFile);
-            
-            if (args[i].equals("--conf")){
-                
+
+            if (args[i].equals("--conf")) {
-                
-            
-            if (args[i].equals("--login")){
-                
+
+            if (args[i].equals("--login")) {
-                
-            
-            if (args[i].equals("--password")){
-                
+
+            if (args[i].equals("--password")) {
-                
-            
-            if (args[i].equals("backup") && isRestore == false ){
+
+            if (args[i].equals("backup") && !isRestore) {
-                
-            
-            if (args[i].equals("restore") && isBackup == false ){
+
+            if (args[i].equals("restore") && !isBackup ) {
-            } 
+            }
-        
+
-                   
+
-        
+
-        try {    
+        try {
-                launch = new LaunchBackup(repoConfFile, home, confFile, login, password); 
+                launch = new LaunchBackup(repoConfFile, home, confFile, login, password);
+                LaunchBackup.h = new ZipBackupIOHandler(zipFile, true);
-            }      
+            }
+            else if (isRestore && confFile == null) {
+                    LaunchBackup.h = new ZipBackupIOHandler(zipFile, false);
+                    launch = new LaunchBackup(repoConfFile, home, login, password);
+                    launch.restore(h);
+            }
-                    launch = new LaunchBackup();
+                    LaunchBackup.h = new ZipBackupIOHandler(zipFile, false);
+                    launch = new LaunchBackup(repoConfFile, home, confFile, login, password);
-        finally
-        {
-            if (launch !=null)
+        finally {
+            if (launch != null) {
+            }
- 
+
-    private static void usage(){
+    private static void usage() {
-     * @param String filename: name of the configuration file
-     * @throws RepositoryException 
-     * @throws IllegalAccessException 
-     * @throws InstantiationException 
-     * @throws ClassNotFoundException 
-     * @throws IOException 
+     * @param String repoConfFile: name of the configuration file
+     * @throws RepositoryException
+     * @throws IllegalAccessException
+     * @throws InstantiationException
+     * @throws ClassNotFoundException
+     * @throws IOException
+     *
+
-        this.conf = BackupConfig.create(backupConfFile, repoConfFile, login, password);
-        this.backup =  BackupManager.create(this.repo, this.conf);
-        
+        this.conf = BackupConfig.create(backupConfFile, repoConfFile);
+        this.backup =  BackupManager.create(this.repo, this.conf, login, password);
-    
+
-     * Used for restore operations only
+     * Used for restore operations only.
+     *
+     * This constructor restores the repository! I don't see any other options since to restore we
+     * need the repository and what is inside.
+     *
+     *
+     * @param password
+     * @param login
+     * @param home
+     * @throws RepositoryException
+     * @throws IOException
+     * @throws IllegalAccessException
+     * @throws InstantiationException
+     * @throws ClassNotFoundException
+     * @throws
+    public LaunchBackup(String repoConfFile, String home, String login, String password) throws RepositoryException, InstantiationException, IllegalAccessException, IOException, ClassNotFoundException {
+        /*
+         * There is a dissymetry there (due to design constraint: we wanted to be close of JR's way of working).
+         * We need to restore BackupConfiguration and the Repository and we need each other to create them.
+         */
-    public LaunchBackup() {
-        // TODO Auto-generated constructor stub
+        //Extract BackupConfig
+        BackupConfigurationBackup b = new BackupConfigurationBackup();
+        b.restore(h);
+        //RepoConfFile isn't the right one. We know it
+        BackupConfig bc;
+        try {
+            //We know we have restored it to backup.xml
+            //There is no other way, except to break the abstract class and create
+            //another restore methods. This seems fine and this way is unique/
+            // If we have the issue again, we will evolve the design.
+            bc = BackupConfig.create("backup.xml", repoConfFile);
+            } catch (ConfigurationException e) {
+             throw new RepositoryException();
+            } catch (ClassNotFoundException e) {
+                throw new RepositoryException();
+            } catch (InstantiationException e) {
+                throw new RepositoryException();
+            }
+         finally {
+             //We need to delete it anyway
+             File f = new File("backup.xml");
+             f.delete();
+         }
+
+        //Restore repository
+        RepositoryBackup br = new RepositoryBackup(repoConfFile, home);;
+        br.setConf(bc);
+        br.restore(h);
+        RepositoryImpl repo = br.getRepo();
+
+        this.backup = BackupManager.create(repo, bc, login, password);
+        this.repo = this.backup.getRepo();
+        this.conf = this.backup.getConf();
-
-
+     * @throws IOException 
+     * @throws RepositoryException 
+     * @throws IllegalAccessException 
-    public void restore(BackupIOHandler h) {
+    public void restore(BackupIOHandler h) throws RepositoryException, IOException, IllegalAccessException {
-    
+
-        this.repo.shutdown();        
+        this.repo.shutdown();
-    
+

INS26 INS26 INS40 INS40 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS29 INS83 INS29 INS83 INS29 INS83 INS29 INS83 INS29 MOV83 MOV42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS8 INS43 INS43 INS43 MOV65 INS42 INS42 INS45 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS60 INS54 INS60 INS20 INS21 INS21 INS60 INS21 INS21 INS21 MOV65 MOV65 MOV65 INS42 INS42 INS42 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 INS42 INS42 INS42 UPD66 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS8 INS12 INS12 INS12 INS8 INS43 INS59 INS32 INS32 INS43 INS59 INS7 INS7 INS7 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS60 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS25 INS8 INS42 INS42 INS43 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS59 INS32 INS43 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS22 INS42 INS38 INS38 INS21 INS27 MOV8 MOV25 MOV21 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS7 INS42 INS27 INS21 INS8 INS42 INS42 INS45 INS42 INS43 INS43 INS43 INS43 INS45 INS40 INS14 INS42 INS33 INS7 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS43 INS42 INS9 INS40 INS14 INS7 INS7 INS32 INS42 INS43 INS42 INS9 INS42 INS42 INS42 INS42 INS40 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS9 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL40 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL9 DEL27 DEL42 DEL9 DEL27 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL29 DEL8 DEL31