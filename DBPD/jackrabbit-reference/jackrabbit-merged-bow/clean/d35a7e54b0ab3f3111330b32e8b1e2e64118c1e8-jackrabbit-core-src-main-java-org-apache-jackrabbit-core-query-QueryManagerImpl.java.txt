JCR-890: concurrent read-only access to a session

Use the SessionContext and SessionOperations in search

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@983708 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_LANGUAGE;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_STATEMENT;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.NT_QUERY;
+
-import org.apache.jackrabbit.core.ItemManager;
-import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.session.SessionContext;
+import org.apache.jackrabbit.core.session.SessionOperation;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
-     * The <code>Session</code> for this QueryManager.
+     * Component context of the current session.
-    private final SessionImpl session;
-
-    /**
-     * The <code>ItemManager</code> of for item retrieval in search results
-     */
-    private final ItemManager itemMgr;
+    private final SessionContext sessionContext;
-     * @param session   the session for this query manager.
-     * @param itemMgr   the item manager of the session.
+     * @param sessionContext component context of the current session
-    public QueryManagerImpl(final SessionImpl session,
-                            final ItemManager itemMgr,
-                            final SearchManager searchMgr)
+    public QueryManagerImpl(
+            final SessionContext sessionContext, final SearchManager searchMgr)
-        this.session = session;
-        this.itemMgr = itemMgr;
+        this.sessionContext = sessionContext;
-        this.qomFactory = new QueryObjectModelFactoryImpl(session) {
+        this.qomFactory = new QueryObjectModelFactoryImpl(
+                sessionContext.getSessionImpl()) {
-                        session, qomTree, Query.JCR_JQOM, null);
+                        sessionContext, qomTree, Query.JCR_JQOM, null);
-    public Query createQuery(String statement, String language)
-            throws InvalidQueryException, RepositoryException {
-        sanityCheck();
-        QueryFactory qf = new QueryFactoryImpl(language);
-        return qf.createQuery(statement, language);
+    public Query createQuery(final String statement, final String language)
+            throws RepositoryException {
+        return perform(new SessionOperation<Query>() {
+            public Query perform(SessionContext context)
+                    throws RepositoryException {
+                QueryFactory qf = new QueryFactoryImpl(language);
+                return qf.createQuery(statement, language);
+            }
+        });
-    public Query getQuery(Node node)
-            throws InvalidQueryException, RepositoryException {
-        sanityCheck();
-        if (!node.isNodeType(session.getJCRName(NameConstants.NT_QUERY))) {
-            throw new InvalidQueryException("node is not of type nt:query");
-        }
-        String statement = node.getProperty(session.getJCRName(NameConstants.JCR_STATEMENT)).getString();
-        String language = node.getProperty(session.getJCRName(NameConstants.JCR_LANGUAGE)).getString();
+    public Query getQuery(final Node node) throws RepositoryException {
+        return perform(new SessionOperation<Query>() {
+            public Query perform(SessionContext context)
+                    throws RepositoryException {
+                NamePathResolver resolver = context.getSessionImpl();
+                if (!node.isNodeType(resolver.getJCRName(NT_QUERY))) {
+                    throw new InvalidQueryException(
+                            "Node is not of type nt:query: " + node);
+                }
+                String statement =
+                    node.getProperty(resolver.getJCRName(JCR_STATEMENT)).getString();
+                String language =
+                    node.getProperty(resolver.getJCRName(JCR_LANGUAGE)).getString();
-        QueryFactory qf = new QueryFactoryImpl(node, language);
-        return qf.createQuery(statement, language);
+                QueryFactory qf = new QueryFactoryImpl(node, language);
+                return qf.createQuery(statement, language);
+            }
+        });
-    public Iterable<Node> getWeaklyReferringNodes(Node node)
+    public Iterable<Node> getWeaklyReferringNodes(final Node node)
-        sanityCheck();
-        List<Node> nodes = new ArrayList<Node>();
-        try {
-            NodeId nodeId = new NodeId(node.getIdentifier());
-            for (NodeId id : searchMgr.getWeaklyReferringNodes(nodeId)) {
-                nodes.add(session.getNodeById(id));
+        return perform(new SessionOperation<Iterable<Node>>() {
+            public Iterable<Node> perform(SessionContext context)
+                    throws RepositoryException {
+                List<Node> nodes = new ArrayList<Node>();
+                try {
+                    NodeId nodeId = new NodeId(node.getIdentifier());
+                    for (NodeId id : searchMgr.getWeaklyReferringNodes(nodeId)) {
+                        nodes.add(sessionContext.getSessionImpl().getNodeById(id));
+                    }
+                } catch (IOException e) {
+                    throw new RepositoryException(e);
+                }
+                return nodes;
-        } catch (IOException e) {
-            throw new RepositoryException(e);
-        }
-        return nodes;
+        });
-     * Checks if this <code>QueryManagerImpl</code> instance is still usable,
-     * otherwise throws a {@link javax.jcr.RepositoryException}.
-     *
-     * @throws RepositoryException if this query manager is not usable anymore,
-     *                             e.g. the corresponding session is closed.
+     * Performs the given session operation.
-    private void sanityCheck() throws RepositoryException {
-        if (!session.isLive()) {
-            throw new RepositoryException("corresponding session has been closed");
-        }
+    private <T> T perform(SessionOperation<T> operation)
+            throws RepositoryException {
+        return sessionContext.getSessionState().perform(operation);
-                new QOMQueryFactory(new QueryObjectModelFactoryImpl(session) {
-                    protected QueryObjectModel createQuery(QueryObjectModelTree qomTree)
-                            throws InvalidQueryException, RepositoryException {
+                new QOMQueryFactory(new QueryObjectModelFactoryImpl(
+                        sessionContext.getSessionImpl()) {
+                    @Override
+                    protected QueryObjectModel createQuery(
+                            QueryObjectModelTree qomTree)
+                            throws RepositoryException {
-                                session, qomTree, language, node);
+                                sessionContext, qomTree, language, node);
-                }, session.getValueFactory()),
+                },
+                sessionContext.getSessionImpl().getValueFactory()),
-                    public Query createQuery(String statement,
-                                             String language)
-                            throws InvalidQueryException, RepositoryException {
-                        return searchMgr.createQuery(session, itemMgr, statement, language, node);
+                    public Query createQuery(String statement, String language)
+                            throws RepositoryException {
+                        return searchMgr.createQuery(
+                                sessionContext, statement, language, node);

MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 UPD40 UPD40 INS31 UPD43 MOV29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS8 INS8 INS73 INS43 INS42 INS44 MOV43 UPD42 UPD42 UPD43 UPD42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS83 INS41 INS83 INS41 UPD65 INS42 INS42 INS74 INS42 INS41 UPD66 UPD42 UPD66 UPD42 UPD42 MOV42 INS42 INS32 INS32 INS32 UPD66 INS43 INS43 INS32 UPD42 INS42 INS14 INS42 INS14 INS42 INS14 UPD42 MOV42 INS42 INS32 INS42 INS42 UPD42 INS32 INS74 INS1 INS74 INS1 INS74 INS1 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS43 MOV31 INS43 INS43 INS31 INS43 INS74 INS31 INS42 INS42 UPD42 INS42 UPD42 MOV42 INS83 INS43 INS42 INS44 MOV43 MOV8 INS42 INS43 INS43 INS83 INS74 INS42 INS44 MOV43 MOV8 INS32 INS32 UPD43 UPD42 INS42 INS43 INS42 INS60 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD43 UPD42 INS42 INS43 INS59 MOV43 MOV43 INS42 INS42 INS42 INS78 UPD42 UPD42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS27 UPD42 INS45 INS42 UPD42 INS42 UPD42 INS42 INS32 UPD42 MOV42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL42 DEL66 DEL65 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL21 DEL43 DEL32 DEL21 DEL40 DEL45 DEL40 DEL40 DEL42 DEL32 DEL21 DEL66 DEL66 DEL40 DEL65 DEL66 DEL65 DEL42 DEL66 DEL39 DEL42 DEL32 DEL38 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42