work in progress

- version always protected
- versionHistory always protected
- fix Node.getReferences && reference properties
- mixinTypes are 'active' upon save only (and not before). therefore
  cleanup after removeMixin is done only after save.
  adding new states defined by a new mixin are only added after the
  node has been saved.
- nodestates identified by a uuid only were created a second time upon
  ChildNodeEntry.resolve => fix needs to be improved
- Events/ChangeLog are processed by the save-target state
- ChangeLog.persisted not used any more

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@467956 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.Event;
-import org.apache.jackrabbit.spi.PropertyId;
+import org.apache.jackrabbit.spi.Event;
+import java.util.Iterator;
+import java.util.Collection;
-import java.util.Iterator;
-        onEvent(events, isLocal, null);
+        pushEvents(getEventCollection(events));
+    /**
+     *
+     * @param events
+     * @param changeLog
+     */
-        // inform all transient states, that they have been persisted and must
-        // connect to their workspace state (and eventually reload the data).
-        // TODO: TOBEFIXED. only used to set status to EXISTING in order (which is probably wrong)
-        changeLog.persisted();
+        Collection evs = getEventCollection(events);
+        // TODO: make sure, that events only contain events related to the modifications submitted with the changelog.
-        // inform all existing workspace states about the transient modifications
-        // that have been persisted now.
-        onEvent(events, true, changeLog);
+        // inform the changelog target state about the transient modifications
+        // that have been persisted now: NEW-states will be connected to their
+        // overlayed state, EXISTING_REMOVED states will be definitely removed,
+        // EXISTING_MODIFIED states are merged with their workspace-state.
+        changeLog.getTarget().refresh(evs, changeLog);
+        // all events not covered by the changelog must not be handled on the
+        // session-states -> treat the same way as events returned by
+        // workspace operations.
+        pushEvents(evs);
-    private void onEvent(EventIterator events, boolean isLocal, ChangeLog changeLog) {
-        // collect set of removed node ids
-        Set removedNodeIds = new HashSet();
-        List addEventList = new ArrayList();
-        List eventList = new ArrayList();
-        while (events.hasNext()) {
-            Event event = events.nextEvent();
-            int type = event.getType();
-            if (type == Event.NODE_ADDED || event.getType() == Event.PROPERTY_ADDED) {
-                addEventList.add(event);
-            } else if (type == Event.NODE_REMOVED) {
-                // remember removed nodes separately for proper handling later on.
-                removedNodeIds.add(event.getItemId());
-                eventList.add(event);
-            } else {
-                eventList.add(event);
-            }
-        }
-        if (eventList.isEmpty() && addEventList.isEmpty()) {
+    private void pushEvents(Collection events) {
+        if (events.isEmpty()) {
+        // collect set of removed node ids
+        Set removedEvents = new HashSet();
+        // separately collect the add events
+        Set addEvents = new HashSet();
-        /* process remove and change events */
-        for (Iterator it = eventList.iterator(); it.hasNext(); ) {
+        for (Iterator it = events.iterator(); it.hasNext();) {
-
-            ItemState state = lookup(event.getItemId());
-            NodeState parent = (event.getParentId() != null) ? (NodeState) lookup(event.getParentId()) : null;
-
-            if (type == Event.NODE_REMOVED || type == Event.PROPERTY_REMOVED) {
-                if (state != null) {
-                    state.refresh(event, changeLog);
-                }
-                if (parent != null) {
-                    // invalidate parent only if it has not been removed
-                    // with the same event bundle.
-                    if (!removedNodeIds.contains(event.getParentId())) {
-                        parent.refresh(event, changeLog);
-                    }
-                }
-            } else if (type == Event.PROPERTY_CHANGED) {
-                if (state != null) {
-                    try {
-                        // TODO: improve.
-                        /* retrieve property value and type from server even if
-                           changes were issued from this session (changelog).
-                           this is currently the only way to update the workspace
-                           state, which is not connected to its overlaying session-state.
-                        */
-                        PropertyState tmp = getItemStateFactory().createPropertyState((PropertyId) state.getId(), state.getParent());
-                        ((PropertyState) state).init(tmp.getType(), tmp.getValues());
-                        state.refresh(event, changeLog);
-                    } catch (ItemStateException e) {
-                        log.error("Unexpected error while updating modified property state.", e);
-                    }
-                }
-                // TODO: check again. parent must be notified if mixintypes or jcr:uuid prop is changed.
-                if (parent != null) {
-                    parent.refresh(event, changeLog);
-                }
-            } else {
-                // should never occur
-                throw new IllegalArgumentException("Invalid event type: " + event.getType());
+            if (type == Event.NODE_REMOVED) {
+                // remember removed nodes separately for proper handling later on.
+                removedEvents.add(event.getItemId());
+            } else if (type == Event.NODE_ADDED || type == Event.PROPERTY_ADDED) {
+                addEvents.add(event);
+                it.remove();
-        /* Add events need to be processed hierarchically, since its not possible
+        /* Process ADD-events.
+           In case of persisting transients modifications, the event-set may
+           still contain events that are not covered by the changeLog such as
+           new version-history or other autocreated properties and nodes.
+
+           Add events need to be processed hierarchically, since its not possible
-        while (!addEventList.isEmpty() && progress) {
+        while (!addEvents.isEmpty() && progress) {
-            for (Iterator it = addEventList.iterator(); it.hasNext();) {
-                Event event = (Event) it.next();
-                NodeState parent = (NodeState) lookup(event.getParentId());
+            for (Iterator it = addEvents.iterator(); it.hasNext();) {
+                Event ev = (Event) it.next();
+                NodeState parent = (ev.getParentId() != null) ? (NodeState) lookup(ev.getParentId()) : null;
-                    parent.refresh(event, changeLog);
+                    parent.refresh(ev);
+
+        /* process all other events (removal, property changed) */
+        for (Iterator it = events.iterator(); it.hasNext(); ) {
+            Event event = (Event) it.next();
+            int type = event.getType();
+
+            ItemState state = lookup(event.getItemId());
+            NodeState parent = (event.getParentId() != null) ? (NodeState) lookup(event.getParentId()) : null;
+
+            if (type == Event.NODE_REMOVED || type == Event.PROPERTY_REMOVED) {
+                if (state != null) {
+                    state.refresh(event);
+                }
+                if (parent != null) {
+                    // invalidate parent only if it has not been removed
+                    // with the same event bundle.
+                    if (!removedEvents.contains(event.getParentId())) {
+                        parent.refresh(event);
+                    }
+                }
+            } else if (type == Event.PROPERTY_CHANGED) {
+                if (state != null) {
+                    state.refresh(event);
+                }
+                // TODO: check again. parent must be notified if mixintypes or jcr:uuid prop is changed.
+                if (parent != null) {
+                    parent.refresh(event);
+                }
+            } else {
+                // should never occur
+                throw new IllegalArgumentException("Invalid event type: " + event.getType());
+            }
+        }
+    }
+
+    private static Collection getEventCollection(EventIterator events) {
+        List evs = new ArrayList();
+        while (events.hasNext()) {
+           evs.add(events.nextEvent());
+        }
+        return evs;

MOV26 MOV26 MOV26 UPD40 INS31 INS29 UPD42 MOV24 INS83 INS83 INS43 INS42 MOV44 INS8 INS65 INS65 INS60 UPD43 UPD42 INS25 INS24 INS42 MOV60 INS61 INS41 INS42 INS42 INS43 INS59 INS32 UPD42 INS32 MOV8 UPD43 INS58 INS32 INS8 MOV32 INS8 INS42 UPD42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS43 INS59 INS42 INS42 MOV60 MOV60 INS25 MOV43 UPD42 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV42 UPD42 MOV42 UPD43 INS42 INS42 INS32 MOV27 MOV8 INS25 INS32 UPD42 INS42 INS42 MOV27 INS8 UPD42 MOV43 INS60 UPD42 INS42 INS42 MOV32 MOV21 MOV21 MOV43 INS59 MOV43 MOV27 MOV27 UPD42 INS42 UPD42 INS42 INS11 INS16 MOV27 INS8 MOV27 UPD42 UPD42 UPD42 INS43 INS32 INS36 INS11 INS33 MOV21 INS42 INS42 INS42 INS27 MOV43 MOV32 UPD42 INS32 INS33 UPD42 INS42 INS42 UPD42 DEL33 DEL32 DEL9 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL59 DEL60 DEL8 DEL8 DEL25 DEL25 DEL8 DEL61 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL25 DEL11 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42