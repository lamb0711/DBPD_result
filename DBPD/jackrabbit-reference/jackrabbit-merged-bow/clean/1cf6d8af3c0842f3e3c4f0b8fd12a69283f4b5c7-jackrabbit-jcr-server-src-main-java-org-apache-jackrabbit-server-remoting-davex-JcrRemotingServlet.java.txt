JCR-3005: Make it possible to get multiple nodes in one call via davex

Use GET instead of POST for the multi-node requests.

The request needs to be addressed to the workspace resource, and contain one or more :path parameters:

    curl http://localhost:8080/server/default?:path=/node1&:path=/node2

An optional :depth parameter can be used to override the configured default depth.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1179564 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.PrintWriter;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+import javax.jcr.Item;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.Node;
+import javax.jcr.NodeIterator;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+import javax.jcr.Workspace;
+import javax.servlet.ServletConfig;
+import javax.servlet.ServletContext;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.jackrabbit.JcrConstants;
+import org.apache.jackrabbit.server.util.RequestData;
+import org.apache.jackrabbit.util.Text;
+import org.apache.jackrabbit.webdav.DavResourceFactory;
-import org.apache.jackrabbit.webdav.DavResourceFactory;
-import org.apache.jackrabbit.webdav.observation.SubscriptionManager;
-import org.apache.jackrabbit.webdav.version.DeltaVConstants;
+import org.apache.jackrabbit.webdav.jcr.JCRWebdavServerServlet;
-import org.apache.jackrabbit.webdav.jcr.JCRWebdavServerServlet;
-import org.apache.jackrabbit.util.Text;
-import org.apache.jackrabbit.JcrConstants;
-import org.apache.jackrabbit.server.util.RequestData;
+import org.apache.jackrabbit.webdav.observation.SubscriptionManager;
+import org.apache.jackrabbit.webdav.version.DeltaVConstants;
-import javax.jcr.Item;
-import javax.jcr.Node;
-import javax.jcr.Repository;
-import javax.jcr.RepositoryException;
-import javax.jcr.Session;
-import javax.jcr.Workspace;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.NodeIterator;
-import javax.jcr.PathNotFoundException;
-import javax.servlet.ServletConfig;
-import javax.servlet.ServletContext;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletResponse;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
-    private static final String PARAM_GET = ":get";
+    private static final String PARAM_PATH = ":path";
+    private static final String PARAM_DEPTH = ":depth";
-        if (canHandle(DavMethods.DAV_GET, webdavRequest, davResource)) {
+        if (doGetMultiple(webdavRequest, webdavResponse, davResource)) {
+            // request was handled by the multi-get handler
+        } else if (canHandle(DavMethods.DAV_GET, webdavRequest, davResource)) {
-                } else if ((pValues = data.getParameterValues(PARAM_GET)) != null) {
-                   getMultiple(session, pValues, davResource.getLocator(), webdavResponse);
-                   return;
-    protected void getMultiple(
-            Session session, String[] paths, DavResourceLocator locator,
-            WebdavResponse webdavResponse)
-            throws IOException, RepositoryException {
-        // Collect all requested nodes
-        Map<String, Node> nodes = new HashMap<String, Node>();
-        Node node = session.getNode(locator.getRepositoryPath());
-        nodes.put(node.getPath(), node);
-        for (String path : paths) {
+    protected boolean doGetMultiple(
+            WebdavRequest request, WebdavResponse response,
+            DavResource resource) throws IOException, DavException {
+        String[] paths = request.getParameterValues(PARAM_PATH);
+        if (paths == null
+                || resource.getLocator().getWorkspaceName() == null
+                || resource.getLocator().getRepositoryPath() != null) {
+            return false;
+        }
+
+        // Get the depth
+        int depth = brConfig.getDefaultDepth();
+        String depthParam = request.getParameter(PARAM_DEPTH);
+        if (depthParam != null) {
-                nodes.put(path, session.getNode(path));
-            } catch (PathNotFoundException ignore) {
-                // skip a missing node
+                depth = Integer.parseInt(depthParam);
+            } catch (NumberFormatException e) {
+                throw new DavException(
+                        DavServletResponse.SC_BAD_REQUEST,
+                        "Invalid depth parameter: " + depthParam);
-        int depth = ((WrappingLocator) locator).getDepth();
-        if (depth < BatchReadConfig.DEPTH_INFINITE) {
-            depth = getDepth(node);
+        // Collect all requested nodes
+        Collection<Node> nodes = new ArrayList<Node>(paths.length);
+        Set<String> alreadyAdded = new HashSet<String>();
+        Session session =
+                JcrDavSession.getRepositorySession(resource.getSession());
+        for (String path : paths) {
+            if (!alreadyAdded.contains(paths)) {
+                try {
+                    nodes.add(session.getNode(path));
+                    alreadyAdded.add(path);
+                } catch (PathNotFoundException ignore) {
+                    // skip a missing node
+                } catch (RepositoryException e) {
+                    throw new DavException(
+                            WebdavResponse.SC_INTERNAL_SERVER_ERROR,
+                            "Unable to access path " + path, e, null);
+                }
+            }
-        webdavResponse.setContentType("text/plain;charset=utf-8");
-        webdavResponse.setStatus(DavServletResponse.SC_OK);
-        new JsonWriter(webdavResponse.getWriter()).write(nodes, depth);
+        response.setContentType("text/plain;charset=utf-8");
+        response.setStatus(DavServletResponse.SC_OK);
+        try {
+            new JsonWriter(response.getWriter()).write(nodes, depth);
+        } catch (RepositoryException e) {
+            throw new DavException(WebdavResponse.SC_INTERNAL_SERVER_ERROR, e);
+        }
+        return true;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS83 INS83 INS83 INS43 INS59 MOV8 UPD39 UPD42 INS44 INS43 INS8 UPD42 UPD45 INS42 INS42 INS45 INS25 UPD43 UPD42 UPD42 INS43 INS42 UPD42 MOV42 MOV60 INS25 MOV60 INS60 MOV25 INS60 INS60 INS60 MOV70 MOV21 MOV21 INS54 INS41 INS32 INS8 MOV25 MOV32 INS8 MOV8 UPD42 UPD42 MOV42 MOV5 INS27 INS8 INS43 INS59 UPD27 INS8 INS74 INS59 INS74 INS59 MOV43 INS59 INS8 INS8 INS12 INS9 INS42 INS42 INS42 INS42 MOV60 MOV60 MOV60 INS54 UPD42 INS27 INS27 INS41 INS42 INS42 INS32 UPD42 INS33 INS54 INS43 MOV43 INS42 INS14 INS43 MOV43 INS42 INS14 INS42 INS32 INS25 UPD42 UPD42 MOV21 INS44 INS8 INS8 MOV12 MOV12 MOV8 UPD42 UPD42 UPD42 MOV42 INS27 INS27 INS32 INS33 INS9 INS42 UPD42 INS42 INS42 INS42 INS8 INS12 INS42 INS74 INS40 INS42 INS74 INS42 INS42 INS32 INS38 MOV8 INS43 INS42 INS53 MOV60 MOV25 MOV25 INS42 INS33 INS32 INS33 MOV32 UPD42 MOV42 MOV21 INS44 INS8 INS43 MOV43 INS43 MOV43 INS42 INS42 INS32 INS42 INS14 MOV27 MOV8 INS32 INS42 UPD42 UPD42 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS12 INS43 INS40 INS42 UPD42 MOV42 INS42 INS42 INS14 INS21 INS44 INS8 UPD42 INS42 UPD42 UPD42 INS42 INS43 INS40 INS27 INS32 MOV43 INS42 INS53 INS42 INS45 INS42 UPD42 INS42 INS42 INS42 INS14 INS43 INS40 INS27 INS42 INS33 INS42 INS45 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL41 DEL8 DEL54 DEL8 DEL25 DEL8 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL40 DEL8 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8