JCR-EXT: Cleaned up, documented and extended the name and path implementation classes.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@169166 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-import java.util.List;
-import java.util.Vector;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.NamespaceException;
+import javax.jcr.PathNotFoundException;
-/**
- * TODO
- */
-public class Path {
+public final class Path {
-    /**
-     * Pattern used to validate and parse path elements:<p>
-     * <ul>
-     * <li>group 1 is .
-     * <li>group 2 is ..
-     * <li>group 3 is namespace prefix incl. delimiter (colon)
-     * <li>group 4 is namespace prefix excl. delimiter (colon)
-     * <li>group 5 is localName
-     * <li>group 6 is index incl. brackets
-     * <li>group 7 is index excl. brackets
-     * </ul>
-     */
-    private static final Pattern PATH_ELEMENT_PATTERN = Pattern.compile(
-            "(\\.?)" + "|" + "(\\.\\.)" + "|" + "(([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?):)?([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?)(\\[([1-9]\\d*)\\])?");
+    private final PathElement[] elements;
-    public static Path parseJCRPath(Session session, String path)
-            throws IllegalArgumentException, RepositoryException {
-        Vector elements = new Vector();
-
-        int p = path.indexOf('/');
-        if (p == 0) {
-            elements.add(RootElement.getInstance());
-            path = path.substring(1);
-            p = path.indexOf('/');
-        }
-
-        while (p != -1) {
-            elements.add(parseJCRPathElement(session, path.substring(0, p)));
-            path = path.substring(p + 1);
-            p = path.indexOf('/');
-        }
-
-        elements.add(parseJCRPathElement(session, path));
-
-        return new Path(elements); 
-    }
-    
-    private static PathElement parseJCRPathElement(
-            Session session, String element)
-            throws IllegalArgumentException, RepositoryException {
-        Matcher matcher = PATH_ELEMENT_PATTERN.matcher(element);
-        if (matcher.matches()) {
-            try {
-                if (matcher.group(1) != null) {
-                    return ThisElement.getInstance();
-                } else if (matcher.group(2) != null) {
-                    return ParentElement.getInstance();
-                } else if (matcher.group(3) != null) {
-                    return new NamedElement(
-                            Name.parseJCRName(session, element));
-                } else {
-                    return new IndexedElement(
-                            Name.parseJCRName(session, matcher.group(5)),
-                            Integer.parseInt(matcher.group(6)));
-                }
-            } catch (NamespaceException e) {
-                throw new IllegalArgumentException(
-                        "Invalid path element " + element);
-            }
-        } else {
-            throw new IllegalArgumentException(
-                    "Invalid path element " + element);
-        }
-    }
-
-    private final List elements;
-
-    private Path(List elements) {
+    Path(PathElement[] elements) {
-    public Item walk(Item item)
-            throws ItemNotFoundException, RepositoryException {
-        Iterator iterator = elements.iterator();
-        while (iterator.hasNext()) {
-            PathElement element = (PathElement) iterator.next();
-            item = element.step(item);
+    public Item resolve(Item item)
+            throws PathNotFoundException, RepositoryException {
+        for (int i = 0; i < elements.length; i++) {
+            item = elements[i].resolve(item);
+    public static Path parse(Session session, String path)
+            throws IllegalArgumentException, RepositoryException {
+        return new PathParser(session).parsePath(path);
+    }
+
+    public static Item resolve(Item item, String path)
+            throws IllegalArgumentException, PathNotFoundException,
+            RepositoryException {
+        return parse(item.getSession(), path).resolve(item);
+    }
+

MOV31 UPD40 INS83 INS5 MOV59 MOV43 UPD42 MOV44 INS43 MOV43 INS8 UPD83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 INS8 INS83 UPD43 INS42 INS44 INS44 MOV43 INS43 MOV43 INS8 MOV43 INS85 INS5 UPD42 MOV42 INS24 MOV41 MOV41 UPD42 INS43 INS42 INS43 INS42 UPD42 MOV42 INS41 MOV43 INS85 INS58 INS27 INS37 INS8 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS39 INS59 UPD42 MOV42 INS40 INS42 MOV21 INS14 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 INS42 INS34 UPD43 MOV43 INS42 INS42 INS32 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS2 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL27 DEL32 DEL59 DEL83 DEL43 DEL83 DEL42 DEL42 DEL42 DEL34 DEL27 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL13 DEL32 DEL59 DEL60 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL13 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL13 DEL32 DEL7 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL42 DEL42 DEL34 DEL32 DEL32 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL34 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL34 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL8 DEL25 DEL25 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL83 DEL83 DEL42 DEL43 DEL23 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8