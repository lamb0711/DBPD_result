JCR-442: Committed patch-060808-backup.txt from Nicolas.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429606 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.util.zip.ZipException;
+import org.apache.jackrabbit.core.nodetype.InvalidNodeTypeDefException;
+import org.apache.jackrabbit.core.nodetype.xml.NodeTypeReader;
+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.UnknownPrefixException;
-    public NodeTypeBackup(RepositoryImpl repo, BackupConfig conf) throws LoginException, RepositoryException {
-        super(repo, conf);
-     }
-    
+    public NodeTypeBackup(RepositoryImpl repo, BackupConfig conf, String login, String password) throws LoginException, RepositoryException {
+        super(repo, conf, login, password);
+    }
+
-     }
-
+    }
-        //Can we assume the default wsp always exist?
-        
+
-        h.write("NodeType", out);     
+        h.write("NodeType", out);
-    
-    
+
-     * @throws NoSuchNodeTypeException 
+     * @throws NoSuchNodeTypeException
-    QName[] qn = ntreg.getRegisteredNodeTypes();
-    NodeTypeDef[] ntd = new NodeTypeDef[qn.length];
-    
-    for (int i=0; i < qn.length; i++) {
-        ntd[i] = ntreg.getNodeTypeDef(qn[i]);
+        QName[] qn = ntreg.getRegisteredNodeTypes();
+        NodeTypeDef[] ntd = new NodeTypeDef[qn.length];
+
+        for (int i=0; i < qn.length; i++) {
+            ntd[i] = ntreg.getNodeTypeDef(qn[i]);
+        }
+
+        return ntd;
-    return ntd;
-    }
-   
-    public void restore(BackupIOHandler h) {
-        // TODO Auto-generated method stub
+    public void restore(BackupIOHandler h) throws ZipException, IOException, RepositoryException {
+        File f = new File(this.getConf().getWorkFolder() + "Node.xml");
+        try {
+            h.read("NodeType", f);
+            FileInputStream is = new FileInputStream(f);
+            NodeTypeReader r = new NodeTypeReader(is);
+            NodeTypeDef[] ntds = r.getNodeTypeDefs();
+
+            Session s = this.getSession();
+            Workspace wsp = s.getWorkspace();
+
+            NodeTypeManagerImpl ntm = (NodeTypeManagerImpl) wsp.getNodeTypeManager();
+            NodeTypeRegistry ntreg = ntm.getNodeTypeRegistry();
+
+            for (int i = 0; i < ntds.length; i++) {
+                if (!ntreg.isRegistered(ntds[i].getName())) {
+                    ntreg.registerNodeType(ntds[i]);
+                }
+            }
+            NamespaceRegistry ns = wsp.getNamespaceRegistry();
+
+        } catch (IllegalNameException e) {
+            new RepositoryException();
+        } catch (UnknownPrefixException e) {
+            new RepositoryException();
+        } catch (InvalidNodeTypeDefException e) {
+            new RepositoryException();
+        }
+        finally {
+            f.delete();
+        }
-

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS44 INS44 INS43 INS43 INS43 INS8 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS54 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS12 INS12 INS8 INS42 INS42 INS14 INS21 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS24 INS60 INS44 INS8 INS44 INS8 INS44 INS8 INS21 INS43 INS27 INS32 INS43 INS59 INS43 INS59 INS5 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS32 INS42 INS32 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS34 INS38 INS8 INS42 INS42 INS43 INS43 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS2 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 DEL66 DEL8