JCR-3811 Allow retrying of failed journal entry database inserts.
 - Add a new ResettableTempFileInputStream that is capable of being reset to the beginning of the stream in order to allow re-reading
 - Simplify TempFileInputStream to only be responsible for removing the temporary file when it is closed
 - Fix bug in ConnectionHelper where resources were not cleaned up when a SQL call would fail in batch mode
 - Fix bug in DbDataStore where temporary file was never removed in addRecord

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1625518 13f79535-47bb-0310-9956-ffa450edef68

-            if (inBatchMode()) {
-                return call();
-            } else {
-                boolean sleepInterrupted = false;
-                int failures = 0;
-                SQLException lastException = null;
-                while (!sleepInterrupted && (blockOnConnectionLoss || failures <= RETRIES)) {
-                    try {
-                    	T object = call(); 
-                        cleanupParamResources();
-                        return object;
-                    } catch (SQLException e) {
-                        lastException = e;
-                    }
-                    log.error("Failed to execute SQL (stacktrace on DEBUG log level): " + lastException);
-                    log.debug("Failed to execute SQL", lastException);
-                    if (!resetParamResources()) {
-                        break; // don't try again if streams cannot be reset
-                    }
-                    failures++;
-                    if (blockOnConnectionLoss || failures <= RETRIES) { // if we're going to try again
+            try {
+                if (inBatchMode()) {
+                    return call();
+                } else {
+                    boolean sleepInterrupted = false;
+                    int failures = 0;
+                    SQLException lastException = null;
+                    while (!sleepInterrupted && (blockOnConnectionLoss || failures <= RETRIES)) {
-                            Thread.sleep(SLEEP_BETWEEN_RETRIES_MS);
-                        } catch (InterruptedException e1) {
-                            Thread.currentThread().interrupt();
-                            sleepInterrupted = true;
-                            log.error("Interrupted: canceling retry");
+                            return call();
+                        } catch (SQLException e) {
+                            lastException = e;
+                        }
+                        log.error("Failed to execute SQL (stacktrace on DEBUG log level): " + lastException);
+                        log.debug("Failed to execute SQL", lastException);
+                        if (!resetParamResources()) {
+                            log.warn("Could not reset parameters: not retrying SQL call");
+                            break;
+                        }
+                        failures++;
+                        if (blockOnConnectionLoss || failures <= RETRIES) { // if we're going to try again
+                            try {
+                                Thread.sleep(SLEEP_BETWEEN_RETRIES_MS);
+                            } catch (InterruptedException e1) {
+                                Thread.currentThread().interrupt();
+                                sleepInterrupted = true;
+                                log.error("Interrupted: canceling retry");
+                            }
+                    throw lastException;
+            } finally {
-                throw lastException;
-		 *
-		 * @param params
-		            wrapper.cleanupResources();
+		            wrapper.closeStream();
-                        wrapper.cleanupResources();

INS54 INS8 INS8 MOV25 MOV21 UPD42 INS41 INS21 INS32 INS32 MOV42 INS42 INS42 INS45 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL42 DEL32 DEL21 DEL42 DEL65 DEL42 DEL42 DEL32 DEL21