applying patch from angela, fixing:

[JCR-122] cannot PUT changes to a resource in the simple webdav server
[JCR-123] Webdav: Error when accessing Simple-Server
[JCR-126] Jcr-Server Module: Remove Dependency from Jackrabbit-Core


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@180346 13f79535-47bb-0310-9956-ffa450edef68

-	this.name = name;
-	this.namespace = namespace;
-	this.reportClass = reportClass;
+        this.name = name;
+        this.namespace = namespace;
+        this.reportClass = reportClass;
-	try {
-	    return (Report) reportClass.getConstructor(new Class[0]).newInstance(new Object[0]);
-	} catch (Exception e) {
-	    // should never occur
-	    throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, "Failed to register Report.");
-	}
-    }    
+        try {
+            return (Report) reportClass.getConstructor(new Class[0]).newInstance(new Object[0]);
+        } catch (Exception e) {
+            // should never occur
+            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, "Failed to register Report.");
+        }
+    }
-     * Returns an Xml element representing this report type
+     * Returns an Xml element representing this report type. It may be used to
+     * build the body for a REPORT request.
-	return new Element(name, namespace);
+        return new Element(name, namespace);
-	if (reqInfo != null) {
-	    Element elem = reqInfo.getReportElement();
-	    if (elem != null) {
-		return name.equals(elem.getName()) && namespace.equals(elem.getNamespace());
-	    }
-	}
-	return false;
+        if (reqInfo != null) {
+            Element elem = reqInfo.getReportElement();
+            if (elem != null) {
+                return name.equals(elem.getName()) && namespace.equals(elem.getNamespace());
+            }
+        }
+        return false;
-	if (name == null || namespace == null || reportClass == null) {
-	    throw new IllegalArgumentException("A ReportType cannot be registered with a null name, namespace or report class");
-	}
+        if (name == null || namespace == null || reportClass == null) {
+            throw new IllegalArgumentException("A ReportType cannot be registered with a null name, namespace or report class");
+        }
-	String key = buildKey(namespace, name);
-	if (types.containsKey(key)) {
-	    return (ReportType) types.get(key);
-	} else {
-	    // test if this report class has an empty constructor and implements Report interface
-	    boolean isValidClass = false;
-	    Class[] interfaces = reportClass.getInterfaces();
-	    for (int i = 0; i < interfaces.length && !isValidClass; i++) {
-		isValidClass = (interfaces[i] == Report.class);
-	    }
-	    if (!isValidClass) {
-		throw new IllegalArgumentException("The specified report class must implement the Report interface.");
-	    }
+        String key = buildKey(namespace, name);
+        if (types.containsKey(key)) {
+            return (ReportType) types.get(key);
+        } else {
+            // test if this report class has an empty constructor and implements Report interface
+            boolean isValidClass = false;
+            Class[] interfaces = reportClass.getInterfaces();
+            for (int i = 0; i < interfaces.length && !isValidClass; i++) {
+                isValidClass = (interfaces[i] == Report.class);
+            }
+            if (!isValidClass) {
+                throw new IllegalArgumentException("The specified report class must implement the Report interface.");
+            }
-	    try {
-		reportClass.getConstructor(new Class[0]);
-	    } catch (NoSuchMethodException e) {
-		throw new IllegalArgumentException("The specified report class must provide a default constructor.");
-	    }
+            try {
+                reportClass.getConstructor(new Class[0]);
+            } catch (NoSuchMethodException e) {
+                throw new IllegalArgumentException("The specified report class must provide a default constructor.");
+            }
-	    ReportType type = new ReportType(name, namespace, reportClass);
-	    types.put(key, type);
-	    return type;
-	}
+            ReportType type = new ReportType(name, namespace, reportClass);
+            types.put(key, type);
+            return type;
+        }
-	if (reportInfo == null) {
-	    throw new IllegalArgumentException("ReportInfo must not be null.");
-	}
-	String key = buildKey(reportInfo.getReportElement().getNamespace(), reportInfo.getReportElement().getName());
-	if (types.containsKey(key)) {
-	    return (ReportType) types.get(key);
-	} else {
-	    throw new IllegalArgumentException("The request report '"+key+"' has not been registered yet.");
-	}
+        if (reportInfo == null) {
+            throw new IllegalArgumentException("ReportInfo must not be null.");
+        }
+        String key = buildKey(reportInfo.getReportElement().getNamespace(), reportInfo.getReportElement().getName());
+        if (types.containsKey(key)) {
+            return (ReportType) types.get(key);
+        } else {
+            throw new IllegalArgumentException("The request report '"+key+"' has not been registered yet.");
+        }
-	return "{" + namespace.getURI() + "}" + name;
+        return "{" + namespace.getURI() + "}" + name;

UPD66 INS66