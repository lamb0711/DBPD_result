JCR-1206: Use SecureRandom to generate UUIDs by default. Also includes a workaround for systems where SecureRandom initialization is very slow.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@594470 13f79535-47bb-0310-9956-ffa450edef68

-import java.security.NoSuchAlgorithmException;
-import java.security.NoSuchProviderException;
- * random implementation is avialable or an Exception is raised a java.util.Random
+ * random implementation is available or an Exception is raised a java.util.Random
-    private static final Random regularRandom = new Random();
+    private static Random regularRandom = new Random();
-    private static Random secureRandom;
+    private static SecureRandom secureRandom;
+    
+    /**
+     * Flag to indicate if the secureRandom instance was initialized
+     */
+    private static volatile boolean secureRandomSeeded;
+    
+    /**
+     * The maximum number of milliseconds to wait for the the initialization
+     */
+    private static final int MAX_SEED_TIME = 1000;
-     * <p>Returns a new version four UUID.</p>
+     * Returns a new version four UUID.
+     * A cryptographically secure pseudorandom number generator 
+     * is used to generate the values (because otherwise the probability 
+     * of duplicates may be significantly higher).
+     * See also: https://issues.apache.org/jira/browse/JCR-1206
+     * and http://en.wikipedia.org/wiki/UUID
-    public Object nextIdentifier() {
-        return nextUUID(false);
+    public UUID nextIdentifier() {
+        return nextUUID(true);
-    public Object nextIdentifier(boolean secure) {
+    public UUID nextIdentifier(boolean secure) {
+    
+    /**
+     * Initialize the secure random and seed it.
+     */
+    private static synchronized void initSecureRandom() {
+        if (secureRandom != null) {
+            return;
+        }
+        try {
+            if (usePRNGPackage != null) {
+                secureRandom = SecureRandom.getInstance(usePRNG, usePRNGPackage);
+            } else {
+                secureRandom = SecureRandom.getInstance(usePRNG);
+            }
+        } catch (Exception e) {
+            // Fall back to default SecureRandom
+            secureRandom = new SecureRandom();
+        }
+        // Can not do that in a static initializer block, because
+        // threads are not started after the initializer block exits
+        Thread t = new Thread() {
+            public void run() {
+                // Seed it with 32 bytes. May be slow on some systems,
+                // see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6202721
+                byte[] seed = secureRandom.generateSeed(32);
+                secureRandom.setSeed(seed);
+                secureRandomSeeded = true;
+            }
+        };
+        secureRandomSeeded = false;
+        t.start();
+        try {
+            t.join(MAX_SEED_TIME);
+        } catch (InterruptedException e) {
+            // ignore
+        }
+        if (!secureRandomSeeded) {
+            // Alternative seed algorithm if the default is very slow
+            secureRandom.setSeed(System.currentTimeMillis());
+            // Thread timing (a second thread is already running)
+            for (int j = 0; j < 16; j++) {
+                int i = 0;
+                long start = System.currentTimeMillis();
+                while (start == System.currentTimeMillis()) {
+                    i++;
+                }
+                // Supplement the existing seed
+                secureRandom.setSeed(i);
+            }
+        }
+    }
-            //Initialize the secure random if null.
-            if (secureRandom == null) {
-                try {
-                    if (usePRNGPackage != null) {
-                        secureRandom = SecureRandom.getInstance(usePRNG, usePRNGPackage);
-                    } else {
-                        secureRandom = SecureRandom.getInstance(usePRNG);
-                    }
-                } catch (NoSuchAlgorithmException nsae) {
-                    secure = false; //Fail back to default PRNG/Random
-                } catch (NoSuchProviderException nspe) {
-                    secure = false; //Fail back to default PRNG/Random
-                }
-                secureRandom.nextBytes(raw);
-            }
-        }
-
-        if (!secure) {
+            initSecureRandom();
+            secureRandom.nextBytes(raw);
+        } else {

INS23 INS23 INS31 UPD43 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 UPD43 UPD43 INS29 INS83 INS83 INS83 INS39 INS42 INS8 UPD42 INS65 INS42 INS65 INS42 INS34 UPD42 UPD42 INS65 INS25 MOV54 INS60 INS21 INS21 INS54 INS25 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS27 INS8 INS43 INS59 INS7 INS32 INS8 INS12 INS38 INS8 INS42 INS8 UPD9 INS42 INS33 INS41 INS42 INS42 INS14 INS42 INS9 INS42 INS42 INS21 INS44 INS8 INS42 INS21 INS24 INS21 MOV21 UPD43 UPD42 INS43 INS1 INS32 INS43 INS42 INS32 INS58 INS27 INS37 INS8 INS32 UPD42 INS42 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS42 INS34 INS42 INS60 INS60 INS61 INS21 INS42 UPD42 INS14 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS34 INS39 INS59 INS39 INS59 INS27 INS8 INS32 INS43 INS60 INS21 INS21 INS42 INS34 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS5 INS59 INS32 INS7 INS42 INS42 INS42 INS42 INS37 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS34 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL9 DEL42 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL25 DEL42 DEL38