SPI
- NamespaceRegistryImpl now only relies on RepositoryService.getRegisteredNamespaces() for methods: getPrefixes() and getURIs().
- Added methods getPrefix() and getURI() to NamespaceStorage.
- Separated nsResolver in RepositoryServiceImpl into namespace cache and session info bound namespace resolver
- Added methods getNamespacePrefix() and getNamespaceURI() to RepositoryService.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@498558 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
+import java.util.Collection;
-    private static final HashSet reservedPrefixes = new HashSet();
-    private static final HashSet reservedURIs = new HashSet();
+    private static final Set RESERVED_PREFIXES = new HashSet();
+    private static final Set RESERVED_URIS = new HashSet();
+    private static final Map RESERVED_NAMESPACES = new HashMap();
-        reservedPrefixes.add(QName.NS_XML_PREFIX);
-        reservedPrefixes.add(QName.NS_XMLNS_PREFIX);
+        RESERVED_PREFIXES.add(QName.NS_XML_PREFIX);
+        RESERVED_PREFIXES.add(QName.NS_XMLNS_PREFIX);
-        reservedPrefixes.add(QName.NS_REP_PREFIX);
-        reservedPrefixes.add(QName.NS_JCR_PREFIX);
-        reservedPrefixes.add(QName.NS_NT_PREFIX);
-        reservedPrefixes.add(QName.NS_MIX_PREFIX);
-        reservedPrefixes.add(QName.NS_SV_PREFIX);
+        RESERVED_PREFIXES.add(QName.NS_REP_PREFIX);
+        RESERVED_PREFIXES.add(QName.NS_JCR_PREFIX);
+        RESERVED_PREFIXES.add(QName.NS_NT_PREFIX);
+        RESERVED_PREFIXES.add(QName.NS_MIX_PREFIX);
+        RESERVED_PREFIXES.add(QName.NS_SV_PREFIX);
-        reservedURIs.add(QName.NS_XML_URI);
-        reservedURIs.add(QName.NS_XMLNS_URI);
+        RESERVED_URIS.add(QName.NS_XML_URI);
+        RESERVED_URIS.add(QName.NS_XMLNS_URI);
-        reservedURIs.add(QName.NS_REP_URI);
-        reservedURIs.add(QName.NS_JCR_URI);
-        reservedURIs.add(QName.NS_NT_URI);
-        reservedURIs.add(QName.NS_MIX_URI);
-        reservedURIs.add(QName.NS_SV_URI);
+        RESERVED_URIS.add(QName.NS_REP_URI);
+        RESERVED_URIS.add(QName.NS_JCR_URI);
+        RESERVED_URIS.add(QName.NS_NT_URI);
+        RESERVED_URIS.add(QName.NS_MIX_URI);
+        RESERVED_URIS.add(QName.NS_SV_URI);
+        // reserved and predefined namespaces
+        RESERVED_NAMESPACES.put(QName.NS_XML_PREFIX, QName.NS_XML_URI);
+        RESERVED_NAMESPACES.put(QName.NS_XMLNS_PREFIX, QName.NS_XMLNS_URI);
+        RESERVED_NAMESPACES.put(QName.NS_REP_PREFIX, QName.NS_REP_URI);
+        RESERVED_NAMESPACES.put(QName.NS_JCR_PREFIX, QName.NS_JCR_URI);
+        RESERVED_NAMESPACES.put(QName.NS_NT_PREFIX, QName.NS_NT_URI);
+        RESERVED_NAMESPACES.put(QName.NS_MIX_PREFIX, QName.NS_MIX_URI);
+        RESERVED_NAMESPACES.put(QName.NS_SV_PREFIX, QName.NS_SV_URI);
-     * @throws RepositoryException
-    public NamespaceRegistryImpl(NamespaceStorage storage, boolean level2Repository)
-        throws RepositoryException {
+    public NamespaceRegistryImpl(NamespaceStorage storage,
+                                 boolean level2Repository) {
-        load();
-    }
-
-    /**
-     * Load all mappings from the <code>NamespaceStorage</code> and update this
-     * registry.
-     *
-     * @throws RepositoryException
-     */
-    private void load() throws RepositoryException {
-        Map nsValues = storage.getRegisteredNamespaces();
-        Iterator prefixes = nsValues.keySet().iterator();
-        while (prefixes.hasNext()) {
-            String prefix = (String) prefixes.next();
-            String uri = (String) nsValues.get(prefix);
-            addMapping(prefix, uri);
+        // prefill with reserved namespaces
+        prefixToURI.putAll(RESERVED_NAMESPACES);
+        for (Iterator it = RESERVED_NAMESPACES.keySet().iterator(); it.hasNext(); ) {
+            String prefix = (String) it.next();
+            uriToPrefix.put(prefixToURI.get(prefix), prefix);
-        prefixToURI.remove(prefix).toString();
+        prefixToURI.remove(prefix);
+    /**
+     * Syncs the cached namespace mappings with the given namespaces map.
+     *
+     * @param namespaces the up-to-date namespace mapping.
+     */
+    private void syncNamespaces(Map namespaces) {
+        prefixToURI.clear();
+        prefixToURI.putAll(namespaces);
+        uriToPrefix.clear();
+        for (Iterator it = namespaces.keySet().iterator(); it.hasNext(); ) {
+            String prefix = (String) it.next();
+            String uri = (String) namespaces.get(prefix);
+            uriToPrefix.put(uri, prefix);
+        }
+    }
+
-        if (reservedURIs.contains(uri)) {
+        if (RESERVED_URIS.contains(uri)) {
-        if (reservedPrefixes.contains(prefix)) {
+        if (RESERVED_PREFIXES.contains(prefix)) {
-        String oldPrefix = (String) uriToPrefix.get(uri);
+        String oldPrefix = null;
+        try {
+            oldPrefix = getPrefix(uri);
+        } catch (NamespaceException e) {
+            // does not exist
+        }
-        if (prefixToURI.containsKey(prefix)) {
+        try {
+            getURI(prefix);
+        } catch (NamespaceException e) {
+            // ok
-        if (reservedPrefixes.contains(prefix)) {
+        if (RESERVED_PREFIXES.contains(prefix)) {
-        if (!prefixToURI.containsKey(prefix)) {
-            throw new NamespaceException("unknown prefix: " + prefix);
-        }
+        String uri = getURI(prefix);
-        String uri = prefixToURI.get(prefix).toString();
-        return (String[]) prefixToURI.keySet().toArray(new String[prefixToURI.keySet().size()]);
-
+        Map namespaces = storage.getRegisteredNamespaces();
+        syncNamespaces(namespaces);
+        Set prefixes = namespaces.keySet();
+        return (String[]) prefixes.toArray(new String[prefixes.size()]);
-        return (String[]) uriToPrefix.keySet().toArray(new String[uriToPrefix.keySet().size()]);
+        Map namespaces = storage.getRegisteredNamespaces();
+        syncNamespaces(namespaces);
+        Collection uris = namespaces.values();
+        return (String[]) uris.toArray(new String[uris.size()]);
-        if (!prefixToURI.containsKey(prefix)) {
-            // reload mappings in order to make sure, the NamespaceRegistry is
-            // up to date, and try to retrieve the uri again.
+        String uri = (String) prefixToURI.get(prefix);
+        if (uri == null) {
+            // try to load the uri
-                load();
+                uri = storage.getURI(prefix);
+                prefixToURI.put(prefix, uri);
-        String uri = (String) prefixToURI.get(prefix);
-        if (!uriToPrefix.containsKey(uri)) {
-            // reload mappings in order to make sure, the NamespaceRegistry is
-            // up to date, and try to retrieve the prefix again.
+        String prefix = (String) uriToPrefix.get(uri);
+        if (prefix == null) {
+            // try to load the prefix
-                load();
+                prefix = storage.getPrefix(uri);
+                uriToPrefix.put(uri, prefix);
-        String prefix = (String) uriToPrefix.get(uri);
+

INS26 INS26 MOV31 INS40 INS40 INS23 UPD43 UPD43 INS83 INS83 INS83 INS43 INS59 UPD42 INS44 MOV8 MOV8 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS14 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS24 UPD65 MOV43 INS42 INS21 INS21 INS21 INS24 INS60 INS54 INS54 MOV60 INS21 INS60 INS60 INS21 INS60 INS25 MOV25 INS43 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS58 INS32 INS8 MOV32 UPD66 UPD42 INS66 INS32 INS32 INS32 INS58 INS32 INS8 INS43 INS59 INS8 INS12 MOV8 INS12 INS43 INS32 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS27 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS42 MOV43 INS59 INS42 INS42 INS60 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 UPD42 MOV42 MOV42 MOV60 MOV60 MOV21 UPD42 UPD42 INS42 MOV42 INS33 INS21 INS44 INS8 INS21 INS44 INS8 UPD42 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 MOV5 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 MOV5 INS42 INS33 INS54 INS42 INS33 INS42 INS42 INS32 MOV43 INS59 INS32 MOV42 UPD42 MOV42 MOV32 MOV43 MOV43 INS7 MOV43 INS42 INS32 INS43 INS42 UPD42 MOV42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS8 MOV12 INS32 INS42 INS42 INS11 INS42 INS42 MOV32 INS42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 MOV5 MOV5 INS21 INS21 INS21 INS42 INS42 MOV43 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV43 MOV43 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 INS32 INS7 INS32 INS42 INS42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 DEL42 DEL65 DEL42 DEL43 DEL32 DEL42 DEL32 DEL66 DEL42 DEL43 DEL59 DEL60 DEL32 DEL8 DEL61 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32