JCR-EXT: Various improvements and documentation for the JCR base classes.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@328807 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import java.util.List;
+import javax.jcr.NamespaceException;
+import javax.jcr.Session;
+import javax.jcr.nodetype.NodeTypeManager;
+import org.apache.jackrabbit.iterator.ArrayNodeIterator;
+import org.apache.jackrabbit.iterator.ArrayPropertyIterator;
+import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.name.NoPrefixDeclaredException;
+import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.SessionNamespaceResolver;
-    /** Protected constructor. This class is only useful when extended. */
-    protected BaseNode() {
-    }
-
-    public Node addNode(String relPath) throws ItemExistsException,
-            PathNotFoundException, VersionException,
-            ConstraintViolationException, LockException, RepositoryException {
+    public Node addNode(String relPath) throws RepositoryException {
-            throws ItemExistsException, PathNotFoundException,
-            NoSuchNodeTypeException, LockException, VersionException,
-            ConstraintViolationException, RepositoryException {
+            throws RepositoryException {
-        String prefix =
-            getSession().getNamespacePrefix("http://www.jcp.org/jcr/1.0");
-        node.setProperty(prefix + ":primaryType", primaryNodeTypeName);
+        String primaryType;
+        String prefix = getSession().getNamespacePrefix(QName.NS_JCR_URI);
+        if (prefix.length() > 0) {
+            primaryType = prefix + ":primaryType";
+        } else {
+            primaryType = "primaryType";
+        }
+        node.setProperty(primaryType, primaryNodeTypeName);
-            throws UnsupportedRepositoryOperationException, VersionException,
-            ConstraintViolationException, ItemNotFoundException, LockException,
-            RepositoryException {
+            throws RepositoryException {
-            throws ValueFormatException, VersionException, LockException,
-            RepositoryException {
+            throws RepositoryException {
-        throw new UnsupportedRepositoryOperationException();
+        return new ArrayNodeIterator(new Node[0]);
-        throw new UnsupportedRepositoryOperationException();
+        return new ArrayPropertyIterator(new Property[0]);
-        throw new UnsupportedRepositoryOperationException();
+        try {
+            Session session = getSession();
+            NamespaceResolver resolver = new SessionNamespaceResolver(session);
+            Property property = getProperty(QName.JCR_PRIMARYTYPE.toJCRName(resolver));
+            NodeTypeManager manager = session.getWorkspace().getNodeTypeManager();
+            return manager.getNodeType(property.getString());
+        } catch (NoPrefixDeclaredException e) {
+            throw new NamespaceException("jcr:primaryType", e);
+        }
-        throw new UnsupportedRepositoryOperationException();
+        List types = new LinkedList();
+
+        Session session = getSession();
+        NamespaceResolver resolver = new SessionNamespaceResolver(session);
+        try {
+            Property property = getProperty(QName.JCR_MIXINTYPES.toJCRName(resolver));
+            Value[] values = property.getValues();
+            NodeTypeManager manager = session.getWorkspace().getNodeTypeManager();
+          for (int i = 0; i < values.length; i++) {
+                types.add(manager.getNodeType(values[i].getString()));
+            }
+        } catch (NoPrefixDeclaredException e) {
+            throw new NamespaceException("jcr:mixinTypes", e);
+        } catch (PathNotFoundException e) {
+            // jcr:mixinTypes not found, fall through with no mixin types
+        }
+
+        return (NodeType[]) types.toArray(new NodeType[types.size()]);
-        throw new UnsupportedRepositoryOperationException();
+        return false;
-        throw new UnsupportedRepositoryOperationException();
+        return false;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS8 INS8 UPD42 UPD42 MOV53 INS60 INS25 INS21 INS41 INS41 INS54 INS60 INS60 INS60 INS54 INS41 INS41 INS41 INS43 INS59 INS27 INS8 INS8 INS32 INS14 INS14 INS8 INS12 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS11 INS9 INS9 MOV43 INS42 INS42 INS32 INS34 MOV21 INS21 INS42 INS42 INS42 INS42 UPD43 MOV43 INS3 UPD43 MOV43 INS3 INS60 INS60 INS60 INS60 INS41 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS60 INS60 INS60 INS24 INS44 INS8 INS44 INS8 INS5 INS32 INS40 INS42 INS42 INS7 INS7 UPD42 INS5 INS34 UPD42 INS5 INS34 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS43 INS42 MOV53 INS43 INS42 INS43 INS42 INS43 INS59 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS43 INS42 MOV53 MOV43 INS42 INS43 INS85 INS42 INS42 INS3 INS42 MOV27 INS42 INS45 INS43 INS85 INS43 INS85 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS5 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS42 UPD43 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS32 UPD43 INS45 INS42 INS43 INS85 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 UPD42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS32 INS2 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL14 DEL53 DEL8 DEL8 DEL42 DEL43 DEL14 DEL53 DEL42 DEL43 DEL14 DEL53