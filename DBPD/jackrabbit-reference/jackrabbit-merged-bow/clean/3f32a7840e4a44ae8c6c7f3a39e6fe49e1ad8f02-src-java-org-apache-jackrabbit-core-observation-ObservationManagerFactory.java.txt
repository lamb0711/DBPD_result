Initial checkin of QueryManager with support for JCRQL (search implementation is not complete, some features are missing: searching for distinct same name sibling, sorting not yet implemented, indexing contains potential for optimizing)

Changed observation to support SynchronousEventListeners. The search registers itself as synchronous event listener. Also changed access checking on events sent out, because checking access on removed nodes need to be performed before they actually get removed.

Extended config.xml, which allows now to specify an index location for the QueryManager.

Added jar files needed for search.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47399 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.*;
+import org.apache.jackrabbit.core.state.ItemStateProvider;
+import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
+import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
-import org.apache.jackrabbit.core.ItemManager;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.Path;
-import org.apache.jackrabbit.core.MalformedPathException;
-import javax.jcr.nodetype.NodeType;
-import javax.jcr.nodetype.NodeTypeManager;
- * <code>ObservationManager</code> instances for sessions. It also implements the
- * {@link EventDispatcher} interface where {@link EventStateCollection}s can be
- * dispatched to {@link javax.jcr.observation.EventListener}s.
+ * <code>ObservationManager</code> instances for sessions. It also
+ * creates new {@link EventStateCollection}s that can be dispatched
+ * to registered {@link javax.jcr.observation.EventListener}s.
+ * @version $Revision:  $, $Date:  $
-public final class ObservationManagerFactory implements EventDispatcher, Runnable {
+final public class ObservationManagerFactory implements Runnable {
-     * Currently active <code>EventConsumer</code>s for notification
+     * Currently active <code>EventConsumer</code>s for notification.
+     * Currently active synchronous <code>EventConsumer</code>s for notification.
+     */
+    private Set synchronousConsumers = new HashSet();
+
+    /**
+     * Set of synchronous <code>EventConsumer</code>s for read only Set access.
+     */
+    private Set synchronousReadOnlyConsumers;
+
+    /**
-    private Set getConsumers() {
+    private Set getAsynchronousConsumers() {
+    private Set getSynchronousConsumers() {
+	synchronized (consumerChange) {
+	    if (synchronousReadOnlyConsumers == null) {
+		synchronousReadOnlyConsumers = Collections.unmodifiableSet(new HashSet(synchronousConsumers));
+	    }
+	    return synchronousReadOnlyConsumers;
+	}
+    }
+
+    public EventStateCollection createEventStateCollection(
+	    SessionImpl session,
+	    ItemStateProvider provider,
+	    HierarchyManager hmgr) {
+	return new EventStateCollection(this, session, provider, hmgr);
+    }
-		    log.error("EventConsumer threw exception.", t);
+		    log.warn("EventConsumer threw exception.", t);
-    //-------------------------< EventDispatcher >------------------------------
+    /**
+     * Gives this observation manager the oportunity to
+     * prepare the events for dispatching.
+     *
+     * @param events the {@link EventState}s to prepare.
+     */
+    void prepareEvents(EventStateCollection events)
+	    throws RepositoryException {
+	Set consumers = new HashSet();
+	consumers.addAll(getSynchronousConsumers());
+	consumers.addAll(getAsynchronousConsumers());
+	for (Iterator it = consumers.iterator(); it.hasNext(); ) {
+	    EventConsumer c = (EventConsumer)it.next();
+	    c.prepareEvents(events);
+	}
+    }
-     * @see EventDispatcher#dispatchEvents
+     * Dispatches the {@link EventStateCollection events} to all
+     * registered {@link javax.jcr.observation.EventListener}s.
+     *
+     * @param events the {@link EventState}s to dispatch.
-    public void dispatchEvents(EventStateCollection events) {
-	eventQueue.add(new DispatchAction(events, getConsumers()));
+    void dispatchEvents(EventStateCollection events) {
+	// notify synchronous listeners
+	Set synchronous = getSynchronousConsumers();
+	if (log.isDebugEnabled()) {
+	    log.debug("notifying " + synchronous.size() + " synchronous listeners.");
+	}
+	for (Iterator it = synchronous.iterator(); it.hasNext(); ) {
+	    EventConsumer c = (EventConsumer) it.next();
+	    try {
+		c.consumeEvents(events);
+	    } catch (Throwable t) {
+		log.error("Synchronous EventConsumer threw exception.", t);
+		// move on to next consumer
+	    }
+	}
+	eventQueue.add(new DispatchAction(events, getAsynchronousConsumers()));
-	    NodeType[] nodeTypes;
+	    NodeTypeImpl[] nodeTypes;
-		NodeTypeManager ntMgr = session.getNodeTypeManager();
-		nodeTypes = new NodeType[nodeTypeName.length];
+		NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
+		nodeTypes = new NodeTypeImpl[nodeTypeName.length];
-		    nodeTypes[i] = ntMgr.getNodeType(nodeTypeName[i]);
+		    nodeTypes[i] = (NodeTypeImpl)ntMgr.getNodeType(nodeTypeName[i]);
-		// remove existing if any
-		activeConsumers.remove(consumer);
-		// re-add it
-		activeConsumers.add(consumer);
-		// reset read only consumer set
-		readOnlyConsumers = null;
+                if (listener instanceof SynchronousEventListener) {
+		    // remove existing if any
+		    synchronousConsumers.remove(consumer);
+		    // re-add it
+		    synchronousConsumers.add(consumer);
+		    // reset read only consumer set
+		    synchronousReadOnlyConsumers = null;
+		} else {
+		    // remove existing if any
+		    activeConsumers.remove(consumer);
+		    // re-add it
+		    activeConsumers.add(consumer);
+		    // reset read only consumer set
+		    readOnlyConsumers = null;
+		}
-		activeConsumers.remove(consumer);
-		// reset read only listener set
-		readOnlyConsumers = null;
+		if (listener instanceof SynchronousEventListener) {
+		    synchronousConsumers.remove(consumer);
+		    // reset read only listener set
+		    synchronousReadOnlyConsumers = null;
+		} else {
+		    activeConsumers.remove(consumer);
+		    // reset read only listener set
+		    readOnlyConsumers = null;
+		}
-	    return new EventListenerIteratorImpl(session, getConsumers());
+	    return new EventListenerIteratorImpl(session,
+		    getSynchronousConsumers(),
+		    getAsynchronousConsumers());

MOV26 UPD40 UPD40 UPD40 UPD40 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS65 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 UPD42 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS29 INS39 INS42 INS44 INS43 INS8 UPD66 UPD66 UPD66 UPD66 INS66 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS42 INS51 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS65 INS65 INS43 INS42 INS42 INS60 INS21 INS21 INS24 INS65 UPD65 INS60 INS25 INS24 UPD66 INS66 INS43 INS66 INS42 INS8 INS42 INS42 INS42 INS14 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS43 INS59 INS32 INS32 INS58 INS32 INS8 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS43 INS59 INS32 INS8 INS58 INS32 INS8 INS42 INS25 INS41 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS66 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS43 INS59 INS42 INS42 INS60 INS54 UPD5 INS8 INS8 INS27 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS8 INS12 UPD43 INS25 INS25 INS32 INS42 INS33 INS21 INS42 INS42 INS42 UPD42 MOV42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS11 INS21 INS44 INS8 UPD42 UPD42 UPD43 INS62 INS8 MOV8 INS62 INS8 MOV8 UPD42 INS42 INS7 INS43 INS32 INS45 INS32 INS45 INS43 INS32 INS32 INS43 INS42 INS21 UPD42 INS42 INS43 INS21 INS21 INS21 INS42 INS43 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD5 INS42 INS32 INS32 INS7 INS42 INS32 INS7 INS42 INS42 INS14 INS42 INS42 INS45 INS42 UPD43 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS43 INS42 UPD42 INS43 MOV32 INS42 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL65 DEL83 DEL42 DEL43 DEL42 DEL42 DEL67 DEL83