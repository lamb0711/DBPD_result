JCR-1365: Query path constraints like foo//*/bar do not scale

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@620859 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.query.lucene.hits.HitsIntersection;
+import org.apache.jackrabbit.uuid.UUID;
+import org.apache.lucene.search.MatchAllDocsQuery;
-import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+     * @return the name test or <code>null</code> if none was specified.
+     */
+    String getNameTest() {
+        return nameTest;
+    }
+
+    /**
+     * @return the position check or {@link LocationStepQueryNode#NONE} is none
+     *         was specified.
+     */
+    int getPosition() {
+        return position;
+    }
+
+    /**
+        // only try to compact if no position is specified
+        if (position == LocationStepQueryNode.NONE) {
+            if (cQuery instanceof DescendantSelfAxisQuery) {
+                DescendantSelfAxisQuery dsaq = (DescendantSelfAxisQuery) cQuery;
+                if (dsaq.subQueryMatchesAll()) {
+                    Query sub;
+                    if (nameTest == null) {
+                        sub = new MatchAllDocsQuery();
+                    } else {
+                        sub = new TermQuery(new Term(FieldNames.LABEL, nameTest));
+                    }
+                    return new DescendantSelfAxisQuery(dsaq.getContextQuery(),
+                            sub, dsaq.getMinLevels() + 1).rewrite(reader);
+                }
+            }
+        }
+
+        // if we get here we could not compact the query
-            return new ChildAxisScorer(searcher.getSimilarity(), reader);
+            return new ChildAxisScorer(searcher.getSimilarity(),
+                    reader, (HierarchyResolver) reader);
+         * The <code>HierarchyResolver</code> of the index.
+         */
+        private final HierarchyResolver hResolver;
+
+        /**
+         * @param hResolver  the hierarchy resolver of <code>reader</code>.
-        protected ChildAxisScorer(Similarity similarity, IndexReader reader) {
+        protected ChildAxisScorer(Similarity similarity,
+                                  IndexReader reader,
+                                  HierarchyResolver hResolver) {
+            this.hResolver = hResolver;
-                List uuids = new ArrayList();
+                Map uuids = new HashMap();
-                int i = contextHits.next();
-                while (i > -1) {
-                    String uuid = reader.document(i).get(FieldNames.UUID);
-                    uuids.add(uuid);
-                    i = contextHits.next();
+                for (int i = contextHits.next(); i > -1; i = contextHits.next()) {
+                    String uuid = reader.document(i, FieldSelectors.UUID).get(FieldNames.UUID);
+                    uuids.put(new Integer(i), uuid);
-
-                TermDocs docs = reader.termDocs();
-                try {
-                    for (Iterator it = uuids.iterator(); it.hasNext();) {
-                        docs.seek(new Term(FieldNames.PARENT, (String) it.next()));
-                        while (docs.next()) {
-                            childrenHits.set(docs.doc());
+                if (nameTestScorer != null) {
+                    Hits nameHits = new ScorerHits(nameTestScorer);
+                    for (int h = nameHits.next(); h > -1; h = nameHits.next()) {
+                        if (uuids.containsKey(new Integer(hResolver.getParent(h)))) {
+                            childrenHits.set(h);
-                } finally {
-                    docs.close();
+                } else {
+                    // get child node entries for each hit
+                    for (Iterator it = uuids.values().iterator(); it.hasNext(); ) {
+                        String uuid = (String) it.next();
+                        NodeId id = new NodeId(UUID.fromString(uuid));
+                        try {
+                            NodeState state = (NodeState) itemMgr.getItemState(id);
+                            Iterator entries = state.getChildNodeEntries().iterator();
+                            while (entries.hasNext()) {
+                                NodeId childId = ((NodeState.ChildNodeEntry) entries.next()).getId();
+                                Term uuidTerm = new Term(FieldNames.UUID, childId.getUUID().toString());
+                                TermDocs docs = reader.termDocs(uuidTerm);
+                                try {
+                                    if (docs.next()) {
+                                        childrenHits.set(docs.doc());
+                                    }
+                                } finally {
+                                    docs.close();
+                                }
+                            }
+                        } catch (ItemStateException e) {
+                            // does not exist anymore -> ignore
+                        }
+                    }
-                if (nameTestScorer != null) {
-                    hits = new HitsIntersection(childrenHits, new ScorerHits(nameTestScorer));
-                } else {
-                    hits = childrenHits;
-                }
+                hits = childrenHits;
-                Document node = reader.document(i);
+                Document node = reader.document(i, FieldSelectors.UUID_AND_PARENT);

MOV26 MOV26 INS26 INS26 UPD40 INS40 INS40 UPD40 INS31 INS31 INS29 INS43 INS42 INS8 INS29 INS39 INS42 INS8 INS8 INS23 INS65 INS42 INS41 INS65 INS41 MOV60 INS25 MOV25 INS29 INS83 INS83 INS43 INS59 INS44 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS27 INS8 INS65 INS42 INS42 INS65 INS43 INS42 INS21 INS67 INS42 INS40 INS25 INS66 INS42 INS66 INS42 INS7 INS42 INS42 INS62 INS8 INS11 INS22 INS42 INS24 INS25 MOV21 INS42 INS43 INS60 INS25 INS43 INS42 INS52 INS42 UPD43 INS58 MOV27 MOV7 INS8 MOV27 INS8 INS8 INS42 INS43 INS59 INS32 INS8 INS42 UPD42 INS39 MOV59 MOV60 MOV21 INS60 INS24 INS24 INS42 INS42 INS11 INS42 INS42 INS60 INS25 INS41 UPD43 INS43 INS59 INS58 INS27 INS7 INS8 INS58 MOV32 INS8 INS40 INS43 INS42 INS43 INS59 INS27 INS8 INS8 INS32 UPD42 UPD42 INS14 INS42 INS42 MOV14 INS39 INS59 INS42 INS38 INS42 INS32 INS25 MOV43 INS59 INS60 INS60 INS54 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS14 INS42 INS42 INS43 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS8 INS42 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS7 INS7 INS43 INS32 INS42 INS27 INS40 INS42 INS42 INS42 INS42 INS42 INS14 MOV21 INS32 INS42 INS42 INS42 MOV11 INS42 INS42 INS14 INS60 MOV60 INS61 INS44 INS8 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS32 INS34 INS43 INS32 INS32 INS42 INS42 INS43 INS32 INS43 INS59 INS43 INS32 INS8 INS43 INS42 INS43 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 UPD42 INS42 INS42 INS60 INS60 INS60 MOV54 INS42 INS42 INS42 INS43 INS40 INS42 INS43 INS32 INS32 UPD42 INS43 INS59 MOV43 INS59 MOV43 INS59 MOV8 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS32 INS25 INS36 INS42 UPD43 MOV43 INS40 INS32 INS42 INS42 INS42 MOV32 MOV8 INS11 UPD42 INS32 INS42 INS43 INS32 INS42 INS42 INS40 INS42 INS42 DEL8 DEL39 DEL60 DEL8 DEL61 DEL42 DEL42 DEL40 DEL14 DEL32 DEL21 DEL61 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL24 DEL8 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL8 DEL25