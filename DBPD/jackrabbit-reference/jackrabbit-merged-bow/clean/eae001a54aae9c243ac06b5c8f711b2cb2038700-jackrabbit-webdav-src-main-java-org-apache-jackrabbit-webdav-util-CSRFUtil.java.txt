JCR-4009: CSRF in Jackrabbit-Webdav  (CVE-2016-6801)

CSRFUtil: properly parse content types (handle params, normalize, handle case differences also multiple field instances), handle missing content type header field, handle partial-URI in referer, DEBUG logging

WebDAV servlet: disable bogus POST support

Davex: include Referer header field in POST requests used for davex remoting

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1758600 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.DavMethods;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.servlet.http.HttpServletRequest;
-import java.net.MalformedURLException;
-import java.net.URL;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Enumeration;
+import java.util.Locale;
+import javax.servlet.http.HttpServletRequest;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
-     * Request content types for CSRF checking, see JCR-3909
+     * Request content types for CSRF checking, see JCR-3909, JCR-4002, and JCR-4009
+            log.debug("CSRF protection disabled");
+            log.debug("CSRF protection enabled, allowed referrers: " + allowedReferrerHosts);
-    public boolean isValidRequest(HttpServletRequest request) throws MalformedURLException {
-        int methodCode = DavMethods.getMethodCode(request.getMethod());
-        if (disabled || DavMethods.DAV_POST != methodCode || !CONTENT_TYPES.contains(request.getContentType())) {
+    public boolean isValidRequest(HttpServletRequest request) {
+
+        if (disabled) {
+            return true;
+        } else if (!"POST".equals(request.getMethod())) {
+            // protection only needed for POST
+            Enumeration<String> cts = (Enumeration<String>) request.getHeaders("Content-Type");
+            String ct = null;
+            if (cts != null && cts.hasMoreElements()) {
+                String t = cts.nextElement();
+                // prune parameters
+                int semicolon = t.indexOf(';');
+                if (semicolon >= 0) {
+                    t = t.substring(0, semicolon);
+                }
+                ct = t.trim().toLowerCase(Locale.ENGLISH);
+            }
+            if (cts != null && cts.hasMoreElements()) {
+                // reject if there are more header field instances
+                log.debug("request blocked because there were multiple content-type header fields");
+                return false;
+            }
+            if (ct != null && !CONTENT_TYPES.contains(ct)) {
+                // type present and not in blacklist
+                return true;
+            }
-            // empty referrer headers are not allowed for POST + relevant content types (see JCR-3909)
+            // empty referrer headers are not allowed for POST + relevant
+            // content types (see JCR-3909)
+                log.debug("POST with content type" + ct + " blocked due to missing referer header field");
-            String host = new URL(refHeader).getHost();
-            // test referrer-host equals server or
-            // if it is contained in the set of explicitly allowed host names
-            return host.equals(request.getServerName()) || allowedReferrerHosts.contains(host);
+            try {
+                String host = new URI(refHeader).getHost();
+                // test referrer-host equals server or
+                // if it is contained in the set of explicitly allowed host
+                // names
+                boolean ok = host == null || host.equals(request.getServerName()) || allowedReferrerHosts.contains(host);
+                if (!ok) {
+                    log.debug("POST with content type" + ct + " blocked due to referer header field being: " + refHeader);
+                }
+                return ok;
+            } catch (URISyntaxException ex) {
+                // referrer malformed -> block access
+                log.debug("POST with content type" + ct + " blocked due to malformed referer header field: " + refHeader);
+                return false;
+            }

MOV26 MOV26 MOV26 MOV26 INS26 UPD40 UPD40 INS40 UPD40 INS8 INS25 UPD66 INS42 INS8 INS25 INS21 INS21 INS41 INS38 MOV8 INS8 INS32 INS32 INS9 MOV32 INS60 INS60 INS25 INS25 INS25 MOV60 MOV25 INS54 INS42 INS42 INS45 INS42 INS42 INS27 INS45 UPD42 INS74 INS59 MOV43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS8 INS12 INS45 INS42 INS43 INS43 INS42 INS11 INS42 INS33 INS27 INS32 INS60 MOV60 INS25 INS21 INS27 INS32 INS21 MOV41 MOV27 MOV38 INS41 INS21 INS41 MOV60 INS60 INS25 MOV41 INS44 INS8 UPD42 MOV42 INS42 INS74 INS32 INS42 INS33 INS42 INS42 INS43 INS59 INS27 INS8 INS7 INS42 INS33 INS42 INS42 INS32 UPD42 INS33 INS9 INS32 INS9 INS43 INS39 INS59 INS38 INS8 INS42 INS43 INS42 INS21 INS41 INS43 INS43 INS42 INS42 INS45 INS42 INS42 INS32 UPD42 INS32 INS42 INS34 INS21 INS42 INS32 INS42 INS42 INS45 UPD42 MOV42 INS42 INS42 INS27 INS42 INS42 MOV27 INS42 INS21 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS7 INS32 INS42 INS40 INS45 INS42 INS45 INS27 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 UPD43 INS27 MOV32 INS42 INS42 INS27 INS45 INS42 INS45 INS42 INS42 INS42 INS34 INS42 UPD42 INS42 INS33 INS45 INS42 INS45 INS42 DEL42 DEL40 DEL42 DEL32 DEL43 DEL42 DEL27 DEL27 DEL8 DEL25 DEL8