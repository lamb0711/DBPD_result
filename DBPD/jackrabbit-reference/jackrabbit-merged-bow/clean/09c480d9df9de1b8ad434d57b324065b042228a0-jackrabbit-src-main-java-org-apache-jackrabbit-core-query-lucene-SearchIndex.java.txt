Open up some access modifiers to allow for better extension of the default query handler.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@350022 13f79535-47bb-0310-9956-ffa450edef68

+     * @param queryImpl the query impl.
-    QueryHits executeQuery(Query query,
-                             QName[] orderProps,
-                             boolean[] orderSpecs) throws IOException {
-        SortField[] sortFields = new SortField[orderProps.length];
-        for (int i = 0; i < orderProps.length; i++) {
-            String prop = null;
-            if (QName.JCR_SCORE.equals(orderProps[i])) {
-                // order on jcr:score does not use the natural order as
-                // implemented in lucene. score ascending in lucene means that
-                // higher scores are first. JCR specs that lower score values
-                // are first.
-                sortFields[i] = new SortField(null, SortField.SCORE, orderSpecs[i]);
-            } else {
-                try {
-                    prop = orderProps[i].toJCRName(getNamespaceMappings());
-                } catch (NoPrefixDeclaredException e) {
-                    // will never happen
-                }
-                sortFields[i] = new SortField(prop, SharedFieldSortComparator.PROPERTIES, !orderSpecs[i]);
-            }
-        }
+    public QueryHits executeQuery(QueryImpl queryImpl,
+                                  Query query,
+                                  QName[] orderProps,
+                                  boolean[] orderSpecs) throws IOException {
+        SortField[] sortFields = createSortFields(orderProps, orderSpecs);
-    Analyzer getTextAnalyzer() {
+    public Analyzer getTextAnalyzer() {
-    NamespaceMappings getNamespaceMappings() {
+    public NamespaceMappings getNamespaceMappings() {
+     * Creates the SortFields for the order properties.
+     *
+     * @param orderProps the order properties.
+     * @param orderSpecs the order specs for the properties.
+     * @return an array of sort fields
+     */
+    protected SortField[] createSortFields(QName[] orderProps,
+                                           boolean[] orderSpecs) {
+        List sortFields = new ArrayList();
+        for (int i = 0; i < orderProps.length; i++) {
+            String prop = null;
+            if (QName.JCR_SCORE.equals(orderProps[i])) {
+                // order on jcr:score does not use the natural order as
+                // implemented in lucene. score ascending in lucene means that
+                // higher scores are first. JCR specs that lower score values
+                // are first.
+                sortFields.add(new SortField(null, SortField.SCORE, orderSpecs[i]));
+            } else {
+                try {
+                    prop = orderProps[i].toJCRName(getNamespaceMappings());
+                } catch (NoPrefixDeclaredException e) {
+                    // will never happen
+                }
+                sortFields.add(new SortField(prop, SharedFieldSortComparator.PROPERTIES, !orderSpecs[i]));
+            }
+        }
+        return (SortField[]) sortFields.toArray(new SortField[sortFields.size()]);
+    }
+
+    /**
+    /**
+     * Returns the actual index.
+     *
+     * @return the actual index.
+     */
+    protected MultiIndex getIndex() {
+        return index;
+    }
+

INS31 INS31 INS83 INS44 INS8 INS83 INS83 INS29 INS83 INS5 INS42 INS44 INS44 MOV8 INS29 INS83 INS43 INS42 INS8 INS65 INS43 INS42 INS60 MOV60 MOV60 MOV60 MOV25 MOV41 INS65 INS65 INS65 INS65 INS43 INS85 INS5 INS42 INS5 INS42 INS41 INS65 INS65 INS42 INS41 INS42 INS66 INS42 MOV5 INS59 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS85 INS39 INS85 INS43 INS11 INS66 INS66 INS42 INS42 INS32 INS42 INS42 INS14 MOV5 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS3 INS42 INS5 INS32 INS32 INS32 INS43 INS85 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 MOV14 INS42 DEL40 DEL3 DEL42 DEL42 DEL2 DEL7 DEL42 DEL42 DEL2 DEL7