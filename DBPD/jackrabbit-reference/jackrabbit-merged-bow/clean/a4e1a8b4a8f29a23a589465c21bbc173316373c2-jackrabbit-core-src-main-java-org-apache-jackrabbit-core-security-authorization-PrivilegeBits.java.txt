JCR-2887 - Split PrivilegeRegistry in a per-session manager instance and a repository level registry  (WIP)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1181645 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+    private static final Map<Long, PrivilegeBits> BUILT_IN = new HashMap<Long, PrivilegeBits>();
+    static {
+        BUILT_IN.put(EMPTY.longValue(), EMPTY);
+    }
+
-            return new PrivilegeBits(d.next());
-        }
-    }
-        
-    /**
-     * Returns an unmodifiable instance.
-     *
-     * @return an unmodifiable <code>PrivilegeBits</code> instance.
-     */
-    PrivilegeBits unmodifiable() {
-        if (d instanceof ModifiableData) {
-            return (d.isSimple()) ? getInstance(d.longValue()) : getInstance(d.longValues());
-        } else {
-            return this;
+            PrivilegeBits pb = new PrivilegeBits(d.next());
+            if (pb.d.isSimple()) {
+                BUILT_IN.put(pb.longValue(), pb);
+            }
+            return pb;
-     * Package private method used by <code>PrivilegeRegistry</code> to create
-     * an instance of privilege bits for the specified long value.
+     * Package private method used by <code>PrivilegeRegistry</code> to get or
+     * create an instance of privilege bits for the specified long value.
-            return new PrivilegeBits(new UnmodifiableData(bits));
+            PrivilegeBits pb = BUILT_IN.get(bits);
+            if (pb == null) {
+                pb = new PrivilegeBits(new UnmodifiableData(bits));
+                BUILT_IN.put(bits, pb);
+            }
+            return pb;
+     * Returns an unmodifiable instance.
+     *
+     * @return an unmodifiable <code>PrivilegeBits</code> instance.
+     */
+    public PrivilegeBits unmodifiable() {
+        if (d instanceof ModifiableData) {
+            return (d.isSimple()) ? getInstance(d.longValue()) : getInstance(d.longValues());
+        } else {
+            return this;
+        }
+    }
+
+    /**
+     * Returns <code>true</code> if this privilege bits instance can be altered.
+     *
+     * @return true if this privilege bits instance can be altered.
+     */
+    public boolean isModifiable() {
+        return (d instanceof ModifiableData);
+    }
+
+    /**
-        } else if (d.isSimple()) {
-            return (d.longValue() & READ) == READ;
-            return (d.longValues()[0] & READ) == READ;
+            return d.includesRead();
+        abstract boolean includesRead();
+
+        boolean equalData(Data d) {
+            if (isSimple() != d.isSimple()) {
+                return false;
+            }
+            if (isSimple()) {
+                return longValue() == d.longValue();
+            } else {
+                return Arrays.equals(longValues(), d.longValues());
+            }
+        }
+
-
-        //---------------------------------------------------------< Object >---
-        @Override
-        public boolean equals(Object o) {
-            if (o == this) {
-                return true;
-            } else if (o instanceof Data) {
-                Data d = (Data) o;
-                if (isSimple() != d.isSimple()) {
-                    return false;
-                }
-                if (isSimple()) {
-                    return longValue() == d.longValue();
-                } else {
-                    return Arrays.equals(longValues(), d.longValues());
-                }
-            } else {
-                return false;
-            }
-        }
+        private final boolean includesRead;
+            includesRead  = (bits & READ) == READ;
+            includesRead = (bitsArr[0] & READ) == READ;
+        @Override
+        boolean includesRead() {
+            return includesRead;
+        }
+
-            return (isSimple) ? new Long(bits).hashCode() : bitsArr.hashCode();
+            return (isSimple) ? new Long(bits).hashCode() : Arrays.hashCode(bitsArr);
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (o == this) {
+                return true;
+            } else if (o instanceof UnmodifiableData) {
+                UnmodifiableData d = (UnmodifiableData) o;
+                if (isSimple != d.isSimple) {
+                    return false;
+                }
+                if (isSimple) {
+                    return bits == d.bits;
+                } else {
+                    return Arrays.equals(bitsArr, d.bitsArr);
+                }
+            } else if (o instanceof ModifiableData) {
+                return equalData((Data) o);
+            } else {
+                return false;
+            }
+        @Override
+        boolean includesRead() {
+            return (bits[0] & READ) == READ;
+        }
+
+
+        @Override
+        public boolean equals(Object o) {
+            if (o == this) {
+                return true;
+            } else if (o instanceof ModifiableData) {
+                ModifiableData d = (ModifiableData) o;
+                return Arrays.equals(bits, d.bits);
+            } else if (o instanceof UnmodifiableData) {
+                return equalData((Data) o);
+            } else {
+                return false;
+            }
+        }

INS26 INS26 MOV31 INS40 INS40 INS23 INS28 INS31 MOV31 INS83 INS83 INS83 INS74 INS59 INS83 INS8 INS83 INS29 INS83 INS39 INS42 INS8 INS31 INS23 INS31 INS31 INS31 INS31 INS43 INS43 INS43 INS42 INS14 INS21 INS65 INS65 INS41 INS25 INS83 INS39 INS42 UPD42 INS44 MOV8 INS83 INS83 INS39 INS59 MOV78 INS39 INS42 INS8 INS78 INS83 INS39 INS42 MOV44 INS8 INS78 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS74 INS32 UPD66 UPD66 INS66 INS66 INS36 MOV27 MOV8 MOV8 MOV43 INS42 INS42 INS21 INS21 INS41 INS42 INS25 INS42 INS41 INS42 INS43 INS42 INS25 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS60 INS25 INS8 INS62 INS7 INS7 INS42 MOV27 MOV8 INS25 INS27 INS42 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS60 INS25 INS41 INS42 INS43 INS32 INS42 INS27 INS42 INS27 INS62 INS8 INS25 INS36 INS42 INS42 INS52 INS41 INS62 INS8 INS25 INS42 INS42 MOV14 INS40 INS42 INS21 INS43 INS59 INS27 MOV8 INS42 INS42 MOV42 UPD42 MOV42 INS36 INS42 INS36 INS42 UPD42 INS42 INS42 INS43 INS60 INS25 INS25 INS62 INS8 MOV8 INS27 INS9 INS42 INS43 INS60 INS41 INS62 INS8 INS8 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS27 INS27 INS42 INS43 INS59 INS27 INS8 INS42 INS8 INS8 INS42 INS43 INS41 INS2 INS42 INS42 INS43 INS59 INS32 INS42 INS43 INS41 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS2 INS42 INS42 INS42 INS11 INS42 INS40 INS41 INS41 INS41 INS42 INS32 INS42 INS34 INS42 INS42 INS11 INS42 INS42 INS42 INS40 INS42 INS32 INS9 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS9 INS27 INS32 INS42 MOV11 INS43 INS42 INS42 INS11 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS43 INS42 INS42 DEL41 DEL32 DEL42 DEL27 DEL36 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL2 DEL42 DEL27 DEL36 DEL42 DEL27 DEL41 DEL8 DEL25 DEL25 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL25 DEL25 DEL8