JCR-2313 - Improvements to user management (2) [work in progress] 

- remove 'administrators' group from set of pre-installed users as it has no special meaning
   neither within the user administration nor within the ac-evaluation code.

- remove SystemUserManager and move the special admin-handling to the UserManagerImpl
- add explicit check for uuid-conflict to UserManagerImpl#createAuthorizableNode
- make sure the admin-user is properly recreated upon reconfiguration of the usersPath (UserManager config) 
- make sure the admin-user is created in case of other uuid-conflict

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@881215 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.api.security.user.User;
-import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
-         Fallback szenario to retrieve userID from the subject:
+         Fallback scenario to retrieve userID from the subject:
-        if (session == systemSession) {
-            return new SystemUserManager(systemSession, params);
+        UserManagerImpl um;
+        if (umc != null) {
+            Class<?>[] paramTypes = new Class[] { SessionImpl.class, String.class, Properties.class };
+            um = (UserManagerImpl) umc.getUserManager(UserManagerImpl.class, paramTypes, (SessionImpl) session, adminId, params);
+            // TODO: should we make sure the implementation doesn't allow
+            // TODO: to change the autosave behavior? since the user manager
+            // TODO: writes to a separate workspace this would cause troubles.
-            UserManagerImpl um;
-            if (umc != null) {
-                Class<?>[] paramTypes = new Class[] { SessionImpl.class, String.class, Properties.class };
-                um = (UserManagerImpl) umc.getUserManager(UserManagerImpl.class, paramTypes, (SessionImpl) session, adminId, params);
-                // TODO: should we make sure the implementation doesn't allow
-                // TODO: to change the autosave behavior? since the user manager
-                // TODO: writes to a separate workspace this would cause troubles.
-            } else {
-                um = new UserManagerImpl(session, adminId, params);
-            }
-            return um;
+            um = new UserManagerImpl(session, adminId, params);
+        return um;
-     * Make sure the 'administrators' group exists and the user with the
-     * configured (or default) adminID is member of this user-group.
+     * Make sure the sytem users (admin and anonymous) exist.
-        // assume administrators groupID and principalName are the same.
-        // and avoid retrieving group by principal.
-        Group admins = (Group) userManager.getAuthorizable(SecurityConstants.ADMINISTRATORS_NAME);
-        if (admins == null) {
-            admins = userManager.createGroup(new PrincipalImpl(SecurityConstants.ADMINISTRATORS_NAME));
-            if (!userManager.isAutoSave()) {
-                session.save();
-            }
-            log.info("... created administrators group with name '"+SecurityConstants.ADMINISTRATORS_NAME+"'");
-        }
-
-        try {
-            if (admins != null && admins.addMember(admin)) {
-                if (!userManager.isAutoSave()) {
-                    session.save();
-                }
-                log.info("... added admin '" + adminId + "' as member of the administrators group.");
-            }
-        } catch (RepositoryException e) {
-            // administrator has full permissions anyway. just log a
-            // warning and ignore the error.
-            log.warn("Unexpected error while adding admin to the administrators group", e);
-        }
-
-                userManager.createUser(anonymousId, "");
-                if (!userManager.isAutoSave()) {
-                    session.save();
+                try {
+                    userManager.createUser(anonymousId, "");
+                    if (!userManager.isAutoSave()) {
+                        session.save();
+                    }
+                    log.info("... created anonymous user with id \'" + anonymousId + "\' ...");
+                } catch (RepositoryException e) {
+                    // exception while creating the anonymous user.
+                    // log an error but don't abort the repository start-up
+                    log.error("Failed to create anonymous user.", e);
-                log.info("... created anonymous-user with id \'" + anonymousId + "\' ...");
-
-    /**
-     * System user manager that (re) creates the admin user in case it doesn't
-     * exist yet (upon initial startup) or has been deleted.
-     */
-    protected final class  SystemUserManager extends UserManagerImpl {
-
-        private final SystemSession session;
-        private String adminPw;
-
-        protected SystemUserManager(SystemSession session, Properties config) throws RepositoryException {
-            super(session, adminId, config);
-            this.session = session;
-            adminPw = adminId; // The default value as defined upon #createSystemUsers
-        }
-
-        @Override
-        public Authorizable getAuthorizable(String id) throws RepositoryException {
-            Authorizable a = super.getAuthorizable(id);
-            if (a == null && adminId.equals(id)) {
-                log.info("Admin user does not exist.");
-                a = createAdmin(adminId, adminPw);
-            }
-            return a;
-        }
-
-        private User createAdmin(String adminId, String pw) throws RepositoryException {
-            User admin = createUser(adminId, pw);
-            if (!isAutoSave()) {
-                session.save();
-            }
-            log.info("... created admin user with id \'" + adminId + "\' and default pw.");
-            return admin;
-        }
-    }

MOV8 MOV60 MOV60 UPD66 INS8 INS54 MOV8 INS12 MOV44 INS8 INS21 INS32 UPD45 INS42 INS42 INS45 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL25 DEL8 DEL66 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL43 DEL40 DEL14 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL48 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL55