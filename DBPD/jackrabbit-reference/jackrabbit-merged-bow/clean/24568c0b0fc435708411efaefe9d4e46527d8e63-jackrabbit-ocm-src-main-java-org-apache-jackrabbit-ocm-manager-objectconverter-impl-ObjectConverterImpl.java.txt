this is the second patch provided by Boni Gopalan for issue JCR-1784 (The UUID of the collection elements changes on update). 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@705010 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.NodeIterator;
+ * @author <a href='mailto:boni.g@bioimagene.com'>Boni Gopalan</a>
+			update(session, objectNode, object);
+		} catch (PathNotFoundException pnfe) {
+			throw new ObjectContentManagerException("Impossible to update the object with UUID: " + uuId , pnfe);
+		} catch (RepositoryException re) {
+			throw new org.apache.jackrabbit.ocm.exception.RepositoryException("Impossible to update the object with UUID: " + uuId, re);
+		}
+	}
+
+	/**
+	 *
+	 * @see org.apache.jackrabbit.ocm.manager.objectconverter.ObjectConverter#update(javax.jcr.Session,
+	 *      javax.jcr.Node, java.lang.Object)
+	 */
+	public void update(Session session, Node objectNode, Object object) {
+			ClassDescriptor classDescriptor = mapper.getClassDescriptorByClass(ReflectionUtils.getBeanClass(object));
-		} catch (PathNotFoundException pnfe) {
-			throw new ObjectContentManagerException("Impossible to update the object with UUID: " + uuId , pnfe);
-		} catch (RepositoryException re) {
-			throw new org.apache.jackrabbit.ocm.exception.RepositoryException("Impossible to update the object with UUID: " + uuId, re);
-		}
-	
+
-			Node objectNode = parentNode.getNode(nodeName);
-
-			checkNodeType(session, classDescriptor);
-
-			checkCompatiblePrimaryNodeTypes(session, objectNode, classDescriptor, false);
-
-			simpleFieldsHelp.storeSimpleFields(session, object, classDescriptor, objectNode);
-			updateBeanFields(session, object, classDescriptor, objectNode);
-			updateCollectionFields(session, object, classDescriptor, objectNode);
-			simpleFieldsHelp.refreshUuidPath(session, classDescriptor, objectNode, object);
+			Node objectNode = getNode(parentNode,classDescriptor,nodeName,object);
+			update(session, objectNode, object);
+	 * 
+	 * @param parentNode the parent node at which to look for the node element.
+	 * @param nodeName the node name to look for
+	 * @param object the data.
+	 * @param classDescriptor
+	 * @return The child node we are interested in.
+	 */
+	private Node getNode(Node parentNode, ClassDescriptor classDescriptor, String nodeName, Object object) throws RepositoryException{
+		if (parentNode == null) return null;
+		NodeIterator nodes = parentNode.getNodes(nodeName);
+		if (nodes.getSize() == 1) return nodes.nextNode();
+		if (classDescriptor.hasUUIdField()){
+            String uuidFieldName = classDescriptor.getUuidFieldDescriptor().getFieldName();
+            Object objUuid = ReflectionUtils.getNestedProperty(object, uuidFieldName);
+        	String currentItemUuid = (objUuid == null) ? null : objUuid.toString();
+        	if (currentItemUuid != null){
+        		//The Node already exists so we need to update the existing node 
+        		//rather than to replace it.
+        		return parentNode.getSession().getNodeByUUID(currentItemUuid);
+        	}
+        	else{
+        		throw new NullPointerException("Cannot locate the node to update since there is no UUID provided even though, " + classDescriptor.getClassName() + " has been mapped with a UUID field , " + uuidFieldName );
+        	}
+        		
+		}
+		return parentNode.getNode(nodeName);
+		
+	}
+	
+	/**

INS26 INS40 INS31 INS31 INS65 INS29 INS83 INS39 INS42 INS44 INS44 INS44 MOV8 INS29 INS83 MOV43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS66 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS60 INS25 INS25 INS41 INS68 INS42 INS42 INS42 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS27 INS41 INS43 INS59 INS27 INS41 INS32 INS8 MOV32 INS40 INS42 INS69 INS69 INS69 INS60 INS60 INS21 INS42 INS33 INS33 INS42 INS42 INS32 INS32 INS34 INS32 INS42 INS42 INS60 INS60 INS60 INS25 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 UPD42 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS33 INS41 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS36 INS33 INS32 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS43 INS27 INS42 INS33 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL60