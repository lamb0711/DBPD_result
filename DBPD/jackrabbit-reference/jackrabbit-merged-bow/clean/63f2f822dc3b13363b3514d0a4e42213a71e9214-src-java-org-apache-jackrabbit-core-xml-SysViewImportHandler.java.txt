grouped frequently used constants scattered around in various source files into Constants interface

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153503 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
-import org.apache.jackrabbit.core.version.VersionManager;
-class SysViewImportHandler extends DefaultHandler {
+class SysViewImportHandler extends DefaultHandler implements Constants {
-     * list of all mix:referenceable
+     * mapping <original uuid> to <new uuid> of mix:referenceable nodes
-    public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {
+    public void startElement(String namespaceURI, String localName,
+                             String qName, Attributes atts)
+            throws SAXException {
-            if (!NamespaceRegistryImpl.NS_SV_URI.equals(nsURI)) {
+            if (!NS_SV_URI.equals(nsURI)) {
-                if (currentPropName.equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
+                if (currentPropName.equals(JCR_PRIMARYTYPE)) {
-                } else if (currentPropName.equals(ItemImpl.PROPNAME_MIXINTYPES)) {
+                } else if (currentPropName.equals(JCR_MIXINTYPES)) {
-                } else if (currentPropName.equals(ItemImpl.PROPNAME_UUID)) {
+                } else if (currentPropName.equals(JCR_UUID)) {
-                } else if (currentPropName.equals(VersionManager.PROPNAME_BASE_VERSION)) {
+                } else if (currentPropName.equals(JCR_BASEVERSION)) {
-                } else if (currentPropName.equals(VersionManager.PROPNAME_VERSION_HISTORY)) {
+                } else if (currentPropName.equals(JCR_VERSIONHISTORY)) {
-                } else if (currentPropName.equals(VersionManager.PROPNAME_PREDECESSORS)) {
+                } else if (currentPropName.equals(JCR_PREDECESSORS)) {
-                } else if (currentPropName.equals(VersionManager.PROPNAME_IS_CHECKED_OUT)) {
+                } else if (currentPropName.equals(JCR_ISCHECKEDOUT)) {
-                    // check if reference for later resolution
+                        // store reference for later resolution
+    /**
+     * @see ContentHandler#endDocument()
+     */
+    public void endDocument() throws SAXException {
+        try {
+            // adjust all reference properties
+            Iterator iter = references.iterator();
+            while (iter.hasNext()) {
+                Property prop = (Property) iter.next();
+                if (prop.getDefinition().isMultiple()) {
+                    Value[] values = prop.getValues();
+                    Value[] newVals = new Value[values.length];
+                    for (int i = 0; i < values.length; i++) {
+                        Value val = values[i];
+                        if (val.getType() == PropertyType.REFERENCE) {
+                            String original = val.getString();
+                            String adjusted = (String) referees.get(original);
+                            if (adjusted == null) {
+                                log.warn("Reference " + original + " of property can not be adjusted! " + prop.getPath());
+                                newVals[i] = val;
+                            } else {
+                                newVals[i] = new ReferenceValue(session.getNodeByUUID(adjusted));
+                            }
+                        } else {
+                            newVals[i] = val;
+                        }
+                    }
+                    prop.setValue(newVals);
+                } else {
+                    Value val = prop.getValue();
+                    if (val.getType() == PropertyType.REFERENCE) {
+                        String original = val.getString();
+                        String adjusted = (String) referees.get(original);
+                        if (adjusted == null) {
+                            log.warn("Reference " + original + " of property can not be adjusted! " + prop.getPath());
+                        } else {
+                            prop.setValue(session.getNodeByUUID(adjusted));
+                        }
+                    }
+                }
+            }
+        } catch (RepositoryException re) {
+            throw new SAXException("failed to adjust REFERENCE properties", re);
+        }
+    }
+
-        if (state.node.isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+        if (state.node.isNodeType(MIX_REFERENCEABLE)) {
-    public void endDocument() throws SAXException {
-        try {
-            // adjust all reference properties
-            Iterator iter = references.iterator();
-            while (iter.hasNext()) {
-                Property prop = (Property) iter.next();
-                if (prop.getDefinition().isMultiple()) {
-                    Value[] values = prop.getValues();
-                    Value[] newVals = new Value[values.length];
-                    for (int i = 0; i < values.length; i++) {
-                        Value val = values[i];
-                        if (val.getType() == PropertyType.REFERENCE) {
-                            String original = val.getString();
-                            String adjusted = (String) referees.get(original);
-                            if (adjusted == null) {
-                                log.error("Reference " + original + " of property can not be adjusted! " + prop.getPath());
-                                newVals[i] = val;
-                            } else {
-                                newVals[i] = new ReferenceValue(session.getNodeByUUID(adjusted));
-                            }
-                        } else {
-                            newVals[i] = val;
-                        }
-                    }
-                    prop.setValue(newVals);
-                } else {
-                    Value val = prop.getValue();
-                    if (val.getType() == PropertyType.REFERENCE) {
-                        String original = val.getString();
-                        String adjusted = (String) referees.get(original);
-                        if (adjusted == null) {
-                            log.error("Reference " + original + " of property can not be adjusted! " + prop.getPath());
-                        } else {
-                            prop.setValue(session.getNodeByUUID(adjusted));
-                        }
-                    }
-                }
-            }
-        } catch (RepositoryException e) {
-            log.error("Error while adjusting reference proerties: " + e.toString());
-        }
-    }
-
-

MOV31 INS43 INS42 INS29 INS65 UPD66 INS68 INS42 INS42 INS42 UPD42 INS53 INS14 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 MOV8 INS42 INS42 INS8 INS42 INS21 MOV21 UPD42 INS42 INS32 INS42 INS42 MOV27 DEL40 DEL26 DEL40 DEL26 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL40