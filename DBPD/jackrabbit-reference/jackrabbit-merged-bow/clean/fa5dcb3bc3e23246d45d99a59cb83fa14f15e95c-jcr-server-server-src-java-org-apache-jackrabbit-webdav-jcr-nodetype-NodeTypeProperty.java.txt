JCR-347 - Jcr-server: Parsing NodeTypeProperty not compliant with definition

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@385458 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.DavException;
-import org.apache.jackrabbit.webdav.DavServletResponse;
-        this(name, new NodeType[] {nodeType}, isProtected);
+        this(name, new NodeType[]{nodeType}, isProtected);
+    public NodeTypeProperty(DavPropertyName name, String[] nodeTypeNames, boolean isProtected) {
+        super(name, isProtected);
+        for (int i = 0; i < nodeTypeNames.length; i++) {
+            if (nodeTypeNames[i] != null) {
+                nodetypeNames.add(nodeTypeNames[i]);
+            }
+        }
+    }
+
-     * @throws IllegalArgumentException if the content of the specified property
-     * contains elements other than {@link NodeTypeConstants#XML_NODETYPE}.
-    public NodeTypeProperty(DavProperty property) throws DavException {
+    public NodeTypeProperty(DavProperty property) {
-        Object propValue = property.getValue();
-        Iterator it;
-        if (propValue instanceof List) {
-            it = ((List)propValue).iterator();
-        } else if (propValue instanceof Element) {
-            List l = new ArrayList();
-            l.add(propValue);
-            it = l.iterator();
+        if (property instanceof NodeTypeProperty) {
+            nodetypeNames.addAll(((NodeTypeProperty)property).nodetypeNames);
-            log.warn("Cannot build NodeTypeProperty from the given property.");
-            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "Cannot build NodeTypeProperty from the given property.");
+            // assume property has be built from xml
+            Object propValue = property.getValue();
+            if (propValue instanceof List) {
+                retrieveNodeTypeNames(((List)propValue));
+            } else if (propValue instanceof Element) {
+                List l = new ArrayList();
+                l.add(propValue);
+                retrieveNodeTypeNames(l);
+            } else {
+                log.debug("NodeTypeProperty '" + property.getName() + "' has no/unparsable value.");
+            }
+    }
-            while (it.hasNext()) {
-                Object content = it.next();
+    private void retrieveNodeTypeNames(List elementList) {
+        Iterator it = elementList.iterator();
+        while (it.hasNext()) {
+            Object content = it.next();
-                }
+            }
-                String nodetypeName = DomUtil.getText(el);
+                String nodetypeName = DomUtil.getChildText(el, XML_NODETYPENAME, NodeTypeConstants.NAMESPACE);
-            }
-	} else {
+                }
+            } else {

INS31 INS31 INS83 INS42 INS44 INS44 INS44 INS8 MOV29 INS83 INS42 MOV44 INS8 UPD83 INS39 UPD42 INS44 INS43 INS42 INS5 INS42 INS39 INS42 INS46 INS24 MOV46 INS25 INS43 INS42 INS42 INS43 INS85 INS42 INS42 INS58 INS27 INS37 INS8 INS62 INS8 INS8 UPD42 MOV42 INS42 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS43 INS21 MOV60 MOV25 INS32 INS42 INS34 INS27 INS8 INS42 INS32 INS42 INS42 INS2 INS33 INS21 INS42 INS42 INS22 INS42 INS42 INS32 INS36 INS42 MOV32 MOV36 INS21 INS42 INS42 INS2 INS11 UPD42 INS32 INS32 INS42 INS42 INS43 INS42 INS42 MOV42 MOV42 UPD42 MOV42 INS27 UPD42 INS42 INS40 INS42 INS45 INS32 INS45 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL66 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL42 DEL7 DEL42 DEL42 DEL32 DEL7 DEL45 DEL32 DEL21 DEL42 DEL43 DEL40 DEL45 DEL14 DEL53 DEL43