JCR-2272: Update branch to match latest trunk.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/branches/JCR-2272@1176340 13f79535-47bb-0310-9956-ffa450edef68

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.lucene.search.Query;
+import java.io.IOException;
+import java.io.Reader;
+import java.io.StringReader;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.Set;
+import java.util.SortedMap;
+import java.util.TreeMap;
+
+import org.apache.jackrabbit.core.id.NodeId;
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
+import org.apache.lucene.analysis.tokenattributes.TermAttribute;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Fieldable;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Fieldable;
-import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
-import org.apache.lucene.analysis.tokenattributes.TermAttribute;
-import org.apache.jackrabbit.core.id.NodeId;
-
-import java.io.IOException;
-import java.io.StringReader;
-import java.io.Reader;
-import java.util.Set;
-import java.util.HashSet;
-import java.util.TreeMap;
-import java.util.SortedMap;
-import java.util.Arrays;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.Query;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-    protected final Set<Term> getQueryTerms() {
-        Set<Term> extractedTerms = new HashSet<Term>();
-        Set<Term> relevantTerms = new HashSet<Term>();
-        query.extractTerms(extractedTerms);
+    protected final Set<Term[]> getQueryTerms() {
+        Set<Term[]> relevantTerms = new HashSet<Term[]>();
+        getQueryTerms(query, relevantTerms);
+        return relevantTerms;
+    }
+
+    private static void getQueryTerms(Query q, Set<Term[]> relevantTerms) {
+        if (q instanceof BooleanQuery) {
+            final BooleanQuery bq = (BooleanQuery) q;
+            for (BooleanClause clause : bq.getClauses()) {
+                getQueryTerms(clause.getQuery(), relevantTerms);
+            }
+            return;
+        }
+        //need to preserve insertion order
+        Set<Term> extractedTerms = new LinkedHashSet<Term>();
+        q.extractTerms(extractedTerms);
+        Set<Term> filteredTerms = filterRelevantTerms(extractedTerms);
+        if (!filteredTerms.isEmpty()) {
+            relevantTerms.add(filteredTerms.toArray(new Term[] {}));
+        }
+    }
+
+    private static Set<Term> filterRelevantTerms(Set<Term> extractedTerms) {
+      //need to preserve insertion order
+        Set<Term> relevantTerms = new LinkedHashSet<Term>();

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 MOV29 INS83 INS83 INS74 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 UPD83 INS42 INS44 INS43 INS5 INS60 INS21 INS41 INS43 INS42 INS74 INS42 INS25 MOV60 INS21 INS60 INS25 INS74 INS42 INS42 INS43 INS85 INS74 INS59 INS32 INS42 INS42 INS43 INS5 INS62 INS8 INS32 MOV74 INS59 INS38 INS8 INS43 INS43 INS74 INS42 INS43 INS5 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS43 INS60 INS70 INS41 UPD42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS43 INS43 UPD42 INS42 INS43 INS85 INS74 INS42 INS42 INS83 INS43 INS59 INS44 INS32 INS8 UPD74 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD74 INS42 MOV43 INS5 INS42 INS42 INS11 INS43 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS32 UPD43 INS43 INS85 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS3 UPD42 INS42 INS42 INS42 INS32 INS42 INS5 INS4 INS42 INS42 INS43 INS85 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21