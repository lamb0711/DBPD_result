JCR-890: concurrent read-only access to a session

Turn setProperty() into a SessionOperation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@957491 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ValueFactory;
+import org.apache.jackrabbit.core.session.SessionOperation;
+
+import static javax.jcr.PropertyType.STRING;
-    protected void removeChildProperty(String propName) throws RepositoryException {
-        try {
-            removeChildProperty(session.getQName(propName));
-        } catch (NameException e) {
-            throw new RepositoryException(
-                    "invalid property name: " + propName, e);
-        }
-    }
-
-     * Same as <code>{@link Node#setProperty(String, Value[])}</code> except that
-     * this method takes a <code>Name</code> name argument instead of a
-     * <code>String</code>.
-     *
-     * @param name
-     * @param values
-     * @return
-     * @throws ValueFormatException
-     * @throws VersionException
-     * @throws LockException
-     * @throws ConstraintViolationException
-     * @throws RepositoryException
-     */
-    public PropertyImpl setProperty(Name name, Value[] values)
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        int type = PropertyType.UNDEFINED;
-        if (values != null) {
-            for (Value v : values) {
-                // use the type of the first value
-                if (v != null) {
-                    type = v.getType();
-                    break;
-                }
-            }
-        }
-
-        return setProperty(name, values, type, false);
-    }
-
-    /**
-        return setProperty(name, value, false);
+        SetPropertyOperation operation =
+            new SetPropertyOperation(name, value, false);
+        sessionContext.getSessionState().perform(operation);
+        return operation.getProperty();
+    private Name getQName(String name) throws RepositoryException {
+        return session.getQName(name);
+    }
+
+    private ValueFactory getValueFactory() throws RepositoryException {
+        return getSession().getValueFactory();
+    }
+
+    private Value[] getValues(String[] values, int type)
+            throws RepositoryException {
+        if (values != null) {
+            return ValueHelper.convert(values, type, getValueFactory());
+        } else {
+            return null;
+        }
+    }
+
-     * {@inheritDoc}
+     * Returns the type of the first of the given values, or
+     * {@link PropertyType#UNDEFINED} if no values are given.
+     *
+     * @param values given values, or <code>null</code>
+     * @return value type, or {@link PropertyType#UNDEFINED}
+    private int getType(Value[] values) {
+        if (values != null) {
+            for (Value v : values) {
+                if (v != null) {
+                    return v.getType();
+                }
+            }
+        }
+        return PropertyType.UNDEFINED;
+    }
+
+    /** Wrapper around {@link #setProperty(Name, Value[], int boolean)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        return setProperty(session.getQName(name), values);
+            throws RepositoryException {
+        return setProperty(getQName(name), values, getType(values), false);
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(Name, Value[], int boolean)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        return setProperty(session.getQName(name), values, type);
+            throws RepositoryException {
+        return setProperty(getQName(name), values, type, true);
-    /**
-     * {@inheritDoc}
-     */
-    public Property setProperty(String name, String[] values)
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value[] v = null;
-        if (values != null) {
-            v = ValueHelper.convert(values, PropertyType.STRING, session.getValueFactory());
-        }
-        return setProperty(name, v);
+    /** Wrapper around {@link #setProperty(Name, Value[], int boolean)} */
+    public Property setProperty(String name, String[] strings)
+            throws RepositoryException {
+        Value[] values = getValues(strings, STRING);
+        return setProperty(getQName(name), values, STRING, false);
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(Name, Value[], int, boolean)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value[] v = null;
-        if (values != null) {
-            v = ValueHelper.convert(values, type, session.getValueFactory());
-        }
-        return setProperty(session.getQName(name), v, type, true);
+            throws RepositoryException {
+        Value[] converted = getValues(values, type);
+        return setProperty(session.getQName(name), converted, type, true);
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(String, Value)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value v = null;
+            throws RepositoryException {
-            v = session.getValueFactory().createValue(value);
+            return setProperty(name, getValueFactory().createValue(value));
+        } else {
+            return setProperty(name, (Value) null);
-        return setProperty(name, v);
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(String, Value, int)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value v = null;
+            throws RepositoryException {
-            v = session.getValueFactory().createValue(value, type);
+            return setProperty(
+                    name, getValueFactory().createValue(value, type), type);
+        } else {
+            return setProperty(name, (Value) null, type);
-        return setProperty(session.getQName(name), v, true);
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link SetPropertyOperation} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        if (value != null) {
-            value = ValueHelper.convert(value, type, session.getValueFactory());
+            throws RepositoryException {
+        if (value != null && value.getType() != type) {
+            value = ValueHelper.convert(value, type, getValueFactory());
-        return setProperty(session.getQName(name), value, true);
+        SetPropertyOperation operation =
+            new SetPropertyOperation(session.getQName(name), value, true);
+        sessionContext.getSessionState().perform(operation);
+        return operation.getProperty();
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link SetPropertyOperation} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        return setProperty(session.getQName(name), value);
+            throws RepositoryException {
+        SetPropertyOperation operation =
+            new SetPropertyOperation(session.getQName(name), value, false);
+        sessionContext.getSessionState().perform(operation);
+        return operation.getProperty();
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(String, Value)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value v = null;
+            throws RepositoryException {
-            v = session.getValueFactory().createValue(value);
+            Binary binary = getValueFactory().createBinary(value);
+            try {
+                return setProperty(name, getValueFactory().createValue(binary));
+            } finally {
+                binary.dispose();
+            }
+        } else {
+            return setProperty(name, (Value) null);
-        return setProperty(name, v);
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(String, Value)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value v = session.getValueFactory().createValue(value);
-        return setProperty(name, v);
+            throws RepositoryException {
+        return setProperty(name, getValueFactory().createValue(value));
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(String, Value)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value v = session.getValueFactory().createValue(value);
-        return setProperty(name, v);
+            throws RepositoryException {
+        return setProperty(name, getValueFactory().createValue(value));
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(String, Value)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value v = session.getValueFactory().createValue(value);
-        return setProperty(name, v);
+            throws RepositoryException {
+        return setProperty(name, getValueFactory().createValue(value));
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(String, Value)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value v = null;
+            throws RepositoryException {
-                v = session.getValueFactory().createValue(value);
+                return setProperty(name, getValueFactory().createValue(value));
-                // thrown if calendar cannot be formatted as ISO8601
-                throw new ValueFormatException(e.getMessage());
+                throw new ValueFormatException(
+                        "Value is not an ISO8601 date: " + value, e);
+        } else {
+            return setProperty(name, (Value) null);
-        return setProperty(name, v);
-    /**
-     * {@inheritDoc}
-     */
+    /** Wrapper around {@link #setProperty(String, Value)} */
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        Value v = null;
+            throws RepositoryException {
-                v = session.getValueFactory().createValue(value);
+                return setProperty(name, getValueFactory().createValue(value));
-                // happens when node is not referenceable
-                throw new ValueFormatException("node is not of type mix:referenceable");
+                throw new ValueFormatException(
+                        "Node is not referenceable: " + value, e);
+        } else {
+            return setProperty(name, (Value) null);
-        return setProperty(name, v);
-     *
-     * @param name        the name of the property to set.
-     * @param value       the value to set. If <code>null</code> the property is
-     *                    removed.
-     * @param enforceType if the type of <code>value</code> is enforced.
-     * @return the <code>Property</code> object set, or <code>null</code> if
-     *         this method was used to remove a property (by setting its value
-     *         to <code>null</code>).
-     * @throws ValueFormatException         if <code>value</code> cannot be
-     *                                      converted to the specified type or
-     *                                      if the property already exists and
-     *                                      is multi-valued.
-     * @throws VersionException             if this node is read-only due to a
-     *                                      checked-in node and this implementation
-     *                                      performs this validation immediately.
-     * @throws LockException                if a lock prevents the setting of
-     *                                      the property and this implementation
-     *                                      performs this validation immediately.
-     * @throws ConstraintViolationException if the change would violate a
-     *                                      node-type or other constraint and
-     *                                      this implementation performs this
-     *                                      validation immediately.
-     * @throws RepositoryException          if another error occurs.
-    protected PropertyImpl setProperty(Name name,
-                                       Value value,
-                                       boolean enforceType) throws
-            ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        // check state of this instance
-        sanityCheck();
+    private class SetPropertyOperation extends SessionOperation {
-        // check pre-conditions for setting property
-        checkSetProperty();
+        private final Name name;
-        int type = PropertyType.UNDEFINED;
-        if (value != null) {
-            type = value.getType();
+        private final Value value;
+
+        private final boolean enforceType;
+
+        private volatile PropertyImpl property = null;
+
+        /**
+         * @param name  property name
+         * @param value new value of the property,
+         *              or <code>null</code> to remove the property
+         * @param enforceType <code>true</code> to enforce the value type
+         */
+        public SetPropertyOperation(
+                Name name, Value value, boolean enforceType) {
+            super("setProperty()");
+            this.name = name;
+            this.value = value;
+            this.enforceType = enforceType;
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, type, false, enforceType, status);
-        try {
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
+        /**
+         * @return the <code>Property</code> object set, or <code>null</code> if
+         *         this method was used to remove a property (by setting its value
+         *         to <code>null</code>).
+         */
+        public PropertyImpl getProperty() {
+            return property;
+        }
+
+        /**
+         * @throws ValueFormatException         if <code>value</code> cannot be
+         *                                      converted to the specified type or
+         *                                      if the property already exists and
+         *                                      is multi-valued.
+         * @throws VersionException             if this node is read-only due to a
+         *                                      checked-in node and this implementation
+         *                                      performs this validation immediately.
+         * @throws LockException                if a lock prevents the setting of
+         *                                      the property and this implementation
+         *                                      performs this validation immediately.
+         * @throws ConstraintViolationException if the change would violate a
+         *                                      node-type or other constraint and
+         *                                      this implementation performs this
+         *                                      validation immediately.
+         * @throws RepositoryException          if another error occurs.
+         */
+        @Override
+        public void perform(SessionContext context) throws RepositoryException {
+            itemSanityCheck();
+            // check pre-conditions for setting property
+            checkSetProperty();
+
+            int type = PropertyType.UNDEFINED;
+            if (value != null) {
+                type = value.getType();
-            // rethrow
-            throw re;
+
+            BitSet status = new BitSet();
+            property =
+                getOrCreateProperty(name, type, false, enforceType, status);
+            try {
+                property.setValue(value);
+            } catch (RepositoryException e) {
+                if (status.get(CREATED)) {
+                    // setting value failed, get rid of newly created property
+                    removeChildProperty(name);
+                }
+                throw e; // rethrow
+            }
-        return prop;
+

MOV26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS55 UPD83 MOV83 INS43 INS42 INS44 MOV43 MOV8 INS83 INS43 INS42 MOV43 INS8 INS83 INS5 INS42 MOV44 INS44 MOV43 INS8 UPD83 INS39 INS42 MOV43 INS8 MOV44 MOV43 MOV43 MOV43 INS29 INS83 INS42 MOV43 MOV43 INS8 MOV43 INS8 INS8 INS29 INS83 INS42 INS8 MOV29 MOV83 MOV43 MOV42 MOV44 MOV44 MOV43 INS8 INS29 INS83 MOV43 INS42 MOV44 MOV44 MOV43 INS8 MOV43 MOV44 MOV44 MOV43 INS8 MOV43 MOV44 MOV44 MOV43 INS29 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS31 INS31 MOV31 INS60 INS21 INS41 INS42 INS43 INS42 INS42 INS41 INS43 INS85 INS39 UPD42 MOV42 INS25 INS65 INS41 INS41 INS5 UPD42 INS25 INS65 INS25 INS25 INS60 INS21 INS41 INS60 INS21 MOV41 INS25 INS65 INS41 INS41 INS65 MOV41 INS25 INS25 MOV65 UPD42 MOV42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 MOV43 INS59 INS29 INS83 INS42 MOV44 MOV44 MOV44 INS8 INS29 INS83 MOV43 INS42 INS8 INS78 UPD83 INS39 UPD42 INS44 INS43 INS59 INS32 INS32 INS42 MOV32 INS32 UPD42 MOV42 MOV27 INS8 INS8 UPD66 UPD66 INS66 INS66 INS65 INS40 INS66 UPD65 INS66 INS66 UPD65 INS66 INS32 INS66 UPD65 INS66 MOV43 INS85 INS66 UPD65 INS66 INS66 UPD65 INS66 MOV27 INS8 INS8 INS66 INS65 INS66 MOV27 INS8 INS8 INS66 UPD65 INS66 INS27 MOV8 INS43 INS59 INS32 INS32 INS66 UPD65 INS66 INS43 INS59 INS32 INS66 UPD65 INS66 MOV27 INS8 INS8 INS66 INS65 INS66 INS32 INS66 UPD65 INS66 INS32 INS66 INS65 INS66 INS66 UPD65 INS66 MOV27 INS8 INS8 INS66 UPD65 INS66 MOV27 MOV8 INS8 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 MOV33 INS65 INS65 INS65 INS46 INS21 MOV21 INS21 MOV65 INS41 INS42 INS43 INS42 INS21 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS41 INS41 INS67 INS67 INS66 INS32 INS9 INS66 INS42 INS32 INS42 INS42 INS9 INS66 UPD42 INS32 INS32 UPD42 INS42 INS9 INS68 INS42 INS32 UPD42 INS68 INS41 MOV41 INS68 INS41 MOV41 INS42 MOV27 INS27 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS14 INS32 INS42 INS42 UPD42 UPD42 INS68 INS60 INS54 MOV41 INS68 INS42 INS42 INS32 INS68 INS42 INS42 INS32 INS68 INS32 INS68 INS54 MOV41 INS68 MOV41 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS45 INS7 INS7 INS42 UPD42 MOV42 INS7 INS43 INS42 INS42 INS9 INS42 INS42 UPD42 MOV42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS69 MOV69 INS69 INS69 INS42 INS42 INS42 INS42 MOV69 INS69 INS32 INS42 INS69 INS69 INS69 INS32 INS32 INS42 INS43 MOV32 INS42 INS9 INS42 INS42 INS43 MOV32 INS42 INS9 INS42 INS42 INS42 INS69 INS69 INS43 INS59 INS8 INS8 INS42 INS69 INS69 MOV32 MOV42 MOV42 INS42 INS69 INS69 MOV32 MOV42 MOV42 INS42 INS69 INS69 INS32 INS42 UPD42 MOV42 INS42 INS69 INS69 INS8 MOV12 INS42 INS69 INS69 MOV12 INS22 INS42 INS22 INS42 INS22 INS42 UPD42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS39 INS39 INS43 INS42 INS42 INS32 INS11 INS43 INS43 INS39 INS42 INS42 INS32 INS42 MOV42 INS11 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS43 MOV43 UPD42 MOV42 INS42 INS32 INS41 INS21 INS11 INS43 INS43 INS43 MOV43 INS43 MOV43 INS42 INS43 MOV43 INS41 INS11 INS43 MOV43 INS41 INS11 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 INS42 INS42 INS42 MOV32 MOV42 MOV42 MOV43 INS33 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 MOV42 MOV42 MOV43 INS33 INS42 INS32 INS42 INS42 INS32 INS32 MOV43 INS33 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS43 INS33 INS42 INS32 INS43 INS33 UPD42 UPD42 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 MOV32 MOV32 MOV42 UPD42 MOV42 MOV32 MOV42 MOV42 INS27 INS42 MOV32 MOV42 MOV42 INS27 INS42 INS45 INS42 INS45 INS42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL43 DEL44 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL68 DEL66 DEL66 DEL42 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL7 DEL21 DEL10 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL33 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL9 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL25 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL43 DEL42 DEL43 DEL43 DEL42 DEL43 DEL8 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL7 DEL21 DEL45 DEL42 DEL42 DEL33 DEL59 DEL60 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL43 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL41 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL43 DEL43 DEL42 DEL43 DEL59 DEL60 DEL8 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31