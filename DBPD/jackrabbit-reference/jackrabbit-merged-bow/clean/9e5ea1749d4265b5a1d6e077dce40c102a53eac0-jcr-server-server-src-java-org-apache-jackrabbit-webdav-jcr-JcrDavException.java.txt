JCR-337 - Remove jcr dependency from dav-library
JCR-343 - Report#init limits the Report interface to DeltaV compliant resources
JCR-340 - ValuesProperty missing property type information
JCR-342 - DavResource#getDavSession() missing
JCR-344 - DeltaVResource lists MKWORKSPACE in the method constant.
JCR-345 - DavException does not allow to specify an exception cause

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@385540 13f79535-47bb-0310-9956-ffa450edef68

-    public JcrDavException(Exception e, int errorCode) {
-        super(errorCode, e.getMessage());
-        exceptionClass = e.getClass();
+    /**
+     * Create a new <code>JcrDavException</code>.
+     *
+     * @param cause The original cause of this <code>DavException</code>. Note, that
+     * in contrast to {@link Throwable#Throwable(Throwable)}, {@link Throwable#Throwable(String, Throwable)} and
+     * {@link Throwable#initCause(Throwable)} the cause must not be <code>null</code>.
+     * @param errorCode Status code for the response.
+     * @throws NullPointerException if the given exception is <code>null</code>.
+     * @see DavException#DavException(int, String)
+     * @see DavException#DavException(int)
+     */
+    public JcrDavException(Throwable cause, int errorCode) {
+        super(errorCode, cause);
+        exceptionClass = cause.getClass();
-            log.debug("Handling exception with error code " + errorCode, e);
+            log.debug("Handling exception with error code " + errorCode, cause);
-    public JcrDavException(RepositoryException e) {
-        this(e, ((Integer)codeMap.get(e.getClass())).intValue());
+    /**
+     * Same as {@link JcrDavException#JcrDavException(Throwable, int)} where the
+     * error code is retrieved from an internal mapping.
+     *
+     * @param cause Cause of this DavException
+     * @throws NullPointerException if the given exception is <code>null</code>.
+     * @see JcrDavException#JcrDavException(Throwable, int)
+     */
+    public JcrDavException(RepositoryException cause) {
+        this(cause, ((Integer)codeMap.get(cause.getClass())).intValue());
+     * Always returns true.
+     *
-
-}
+}

INS29 INS29 INS65 INS65 INS65 INS65 INS65 INS65 UPD43 UPD42 INS65 INS65 INS65 INS65 UPD42 INS65 INS66 INS42 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS68 INS68 UPD42 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS68 UPD42 INS66 INS68 INS68 INS68 INS42 INS42 INS69 INS69 INS42 INS42 INS69 INS68 INS42 INS42 INS69 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS69 INS42 INS42 INS69 INS39 INS43 INS39 UPD42 INS42 INS42 INS69 INS69 INS43 INS39 INS43 INS43 INS43 INS43 INS42 UPD42 INS43 INS39 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL42 DEL42 DEL32