- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.3 $, $Date: 2004/09/09 15:23:42 $
-	    throws RepositoryException {
-	this.rep = rep;
+            throws RepositoryException {
+        this.rep = rep;
-	if (credentials instanceof SimpleCredentials) {
-	    SimpleCredentials sc = (SimpleCredentials) credentials;
-	    // clear password for security reasons
-	    char[] pwd = sc.getPassword();
-	    if (pwd != null) {
-		for (int i = 0; i < pwd.length; i++) {
-		    pwd[i] = 0;
-		}
-	    }
-	    userId = sc.getUserId();
-	    String[] names = sc.getAttributeNames();
-	    for (int i = 0; i < names.length; i++) {
-		attributes.put(names[i], sc.getAttribute(names[i]));
-	    }
-	} else {
-	    userId = null;
-	}
+        if (credentials instanceof SimpleCredentials) {
+            SimpleCredentials sc = (SimpleCredentials) credentials;
+            // clear password for security reasons
+            char[] pwd = sc.getPassword();
+            if (pwd != null) {
+                for (int i = 0; i < pwd.length; i++) {
+                    pwd[i] = 0;
+                }
+            }
+            userId = sc.getUserId();
+            String[] names = sc.getAttributeNames();
+            for (int i = 0; i < names.length; i++) {
+                attributes.put(names[i], sc.getAttribute(names[i]));
+            }
+        } else {
+            userId = null;
+        }
-	nsMappings = new TransientNamespaceMappings(rep.getNamespaceRegistry());
+        nsMappings = new TransientNamespaceMappings(rep.getNamespaceRegistry());
-	ntMgr = new NodeTypeManagerImpl(rep.getNodeTypeRegistry(), getNamespaceResolver());
-	wsp = new WorkspaceImpl(wspName, rep.getWorkspaceStateManager(wspName),
-		rep.getWorkspaceReferenceManager(wspName), rep, this);
-	itemStateMgr = new SessionItemStateManager(rep.getRootNodeUUID(), wsp.getPersistentStateManager(), getNamespaceResolver());
-	hierMgr = itemStateMgr.getHierarchyMgr();
-	itemMgr = new ItemManager(itemStateMgr, hierMgr, this, ntMgr.getRootNodeDefinition(), rep.getRootNodeUUID());
-	accessMgr = new AccessManagerImpl(credentials, hierMgr, getNamespaceResolver());
+        ntMgr = new NodeTypeManagerImpl(rep.getNodeTypeRegistry(), getNamespaceResolver());
+        wsp = new WorkspaceImpl(wspName, rep.getWorkspaceStateManager(wspName),
+                rep.getWorkspaceReferenceManager(wspName), rep, this);
+        itemStateMgr = new SessionItemStateManager(rep.getRootNodeUUID(), wsp.getPersistentStateManager(), getNamespaceResolver());
+        hierMgr = itemStateMgr.getHierarchyMgr();
+        itemMgr = new ItemManager(itemStateMgr, hierMgr, this, ntMgr.getRootNodeDefinition(), rep.getRootNodeUUID());
+        accessMgr = new AccessManagerImpl(credentials, hierMgr, getNamespaceResolver());
-	    throws RepositoryException {
-	this.rep = rep;
+            throws RepositoryException {
+        this.rep = rep;
-	this.userId = userId;
+        this.userId = userId;
-	nsMappings = new TransientNamespaceMappings(rep.getNamespaceRegistry());
+        nsMappings = new TransientNamespaceMappings(rep.getNamespaceRegistry());
-	ntMgr = new NodeTypeManagerImpl(rep.getNodeTypeRegistry(), getNamespaceResolver());
-	wsp = new WorkspaceImpl(wspName, rep.getWorkspaceStateManager(wspName),
-		rep.getWorkspaceReferenceManager(wspName), rep, this);
-	itemStateMgr = new SessionItemStateManager(rep.getRootNodeUUID(), wsp.getPersistentStateManager(), getNamespaceResolver());
-	hierMgr = itemStateMgr.getHierarchyMgr();
-	itemMgr = new ItemManager(itemStateMgr, hierMgr, this, ntMgr.getRootNodeDefinition(), rep.getRootNodeUUID());
+        ntMgr = new NodeTypeManagerImpl(rep.getNodeTypeRegistry(), getNamespaceResolver());
+        wsp = new WorkspaceImpl(wspName, rep.getWorkspaceStateManager(wspName),
+                rep.getWorkspaceReferenceManager(wspName), rep, this);
+        itemStateMgr = new SessionItemStateManager(rep.getRootNodeUUID(), wsp.getPersistentStateManager(), getNamespaceResolver());
+        hierMgr = itemStateMgr.getHierarchyMgr();
+        itemMgr = new ItemManager(itemStateMgr, hierMgr, this, ntMgr.getRootNodeDefinition(), rep.getRootNodeUUID());
-	return accessMgr;
+        return accessMgr;
-	return ntMgr;
+        return ntMgr;
-	return itemMgr;
+        return itemMgr;
-	return nsMappings;
+        return nsMappings;
-	return itemStateMgr;
+        return itemStateMgr;
-	return hierMgr;
+        return hierMgr;
-	ps.println("Session: " + (userId == null ? "unknown" : userId) + " (" + this + ")");
-	ps.println();
-	itemMgr.dump(ps);
+        ps.println("Session: " + (userId == null ? "unknown" : userId) + " (" + this + ")");
+        ps.println();
+        itemMgr.dump(ps);
-	return wsp;
+        return wsp;
-	    throws LoginException, RepositoryException {
-	// @todo reimplement impersonate(Credentials) correctly
+            throws LoginException, RepositoryException {
+        // @todo reimplement impersonate(Credentials) correctly
-	// check if the credentials of this session allow to 'impersonate'
-	// the user represented by tha supplied credentials
+        // check if the credentials of this session allow to 'impersonate'
+        // the user represented by tha supplied credentials
-	// FIXME: the original purpose of this method is to enable
-	// a 'superuser' to impersonate another user without needing
-	// to know its password.
-	try {
-	    return rep.login(otherCredentials, null);
-	} catch (NoSuchWorkspaceException nswe) {
-	    // should never get here...
-	    String msg = "impersonate failed";
-	    log.error(msg, nswe);
-	    throw new LoginException(msg, nswe);
-	}
+        // FIXME: the original purpose of this method is to enable
+        // a 'superuser' to impersonate another user without needing
+        // to know its password.
+        try {
+            return rep.login(otherCredentials, null);
+        } catch (NoSuchWorkspaceException nswe) {
+            // should never get here...
+            String msg = "impersonate failed";
+            log.error(msg, nswe);
+            throw new LoginException(msg, nswe);
+        }
-	return (Node) itemMgr.getRootNode();
+        return (Node) itemMgr.getRootNode();
-	try {
-	    NodeImpl node = (NodeImpl) itemMgr.getItem(new NodeId(uuid));
-	    if (node.isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
-		return node;
-	    } else {
-		// there is a node with that uuid but the node does not expose it
-		throw new ItemNotFoundException(uuid);
-	    }
-	} catch (AccessDeniedException ade) {
-	    throw new ItemNotFoundException(uuid);
-	}
+        try {
+            NodeImpl node = (NodeImpl) itemMgr.getItem(new NodeId(uuid));
+            if (node.isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+                return node;
+            } else {
+                // there is a node with that uuid but the node does not expose it
+                throw new ItemNotFoundException(uuid);
+            }
+        } catch (AccessDeniedException ade) {
+            throw new ItemNotFoundException(uuid);
+        }
-	try {
-	    return itemMgr.getItem(Path.create(absPath, getNamespaceResolver(), true));
-	} catch (AccessDeniedException ade) {
-	    throw new PathNotFoundException(absPath);
-	} catch (MalformedPathException mpe) {
-	    String msg = "invalid path:" + absPath;
-	    log.error(msg);
-	    throw new RepositoryException(msg, mpe);
-	}
+        try {
+            return itemMgr.getItem(Path.create(absPath, getNamespaceResolver(), true));
+        } catch (AccessDeniedException ade) {
+            throw new PathNotFoundException(absPath);
+        } catch (MalformedPathException mpe) {
+            String msg = "invalid path:" + absPath;
+            log.error(msg);
+            throw new RepositoryException(msg, mpe);
+        }
-	try {
-	    itemMgr.getItem(Path.create(absPath, getNamespaceResolver(), true));
-	    return true;
-	} catch (RepositoryException re) {
-	    // fall through...
-	} catch (MalformedPathException mpe) {
-	    // fall through...
-	}
-	return false;
+        try {
+            itemMgr.getItem(Path.create(absPath, getNamespaceResolver(), true));
+            return true;
+        } catch (RepositoryException re) {
+            // fall through...
+        } catch (MalformedPathException mpe) {
+            // fall through...
+        }
+        return false;
-	itemMgr.getRootNode().save();
+        itemMgr.getRootNode().save();
-	if (!keepChanges) {
-	    // optimization
-	    itemStateMgr.disposeAllTransientItemStates();
-	    return;
-	}
-	itemMgr.getRootNode().refresh(keepChanges);
+        if (!keepChanges) {
+            // optimization
+            itemStateMgr.disposeAllTransientItemStates();
+            return;
+        }
+        itemMgr.getRootNode().refresh(keepChanges);
-	return itemStateMgr.hasAnyTransientItemStates();
+        return itemStateMgr.hasAnyTransientItemStates();
-	    throws ItemExistsException, PathNotFoundException,
-	    ConstraintViolationException, RepositoryException {
+            throws ItemExistsException, PathNotFoundException,
+            ConstraintViolationException, RepositoryException {
-	// check paths & get node instances
+        // check paths & get node instances
-	Path srcPath;
-	Path.PathElement srcName;
-	Path srcParentPath;
-	NodeImpl targetNode;
-	NodeImpl srcParentNode;
-	try {
-	    srcPath = Path.create(srcAbsPath, getNamespaceResolver(), true);
-	    srcName = srcPath.getNameElement();
-	    srcParentPath = srcPath.getAncestor(1);
-	    ItemImpl item = itemMgr.getItem(srcPath);
-	    if (!item.isNode()) {
-		throw new PathNotFoundException(srcAbsPath);
-	    }
-	    targetNode = (NodeImpl) item;
-	    srcParentNode = (NodeImpl) itemMgr.getItem(srcParentPath);
-	} catch (AccessDeniedException ade) {
-	    throw new PathNotFoundException(srcAbsPath);
-	} catch (MalformedPathException mpe) {
-	    String msg = srcAbsPath + ": invalid path";
-	    log.error(msg, mpe);
-	    throw new RepositoryException(msg, mpe);
-	}
+        Path srcPath;
+        Path.PathElement srcName;
+        Path srcParentPath;
+        NodeImpl targetNode;
+        NodeImpl srcParentNode;
+        try {
+            srcPath = Path.create(srcAbsPath, getNamespaceResolver(), true);
+            srcName = srcPath.getNameElement();
+            srcParentPath = srcPath.getAncestor(1);
+            ItemImpl item = itemMgr.getItem(srcPath);
+            if (!item.isNode()) {
+                throw new PathNotFoundException(srcAbsPath);
+            }
+            targetNode = (NodeImpl) item;
+            srcParentNode = (NodeImpl) itemMgr.getItem(srcParentPath);
+        } catch (AccessDeniedException ade) {
+            throw new PathNotFoundException(srcAbsPath);
+        } catch (MalformedPathException mpe) {
+            String msg = srcAbsPath + ": invalid path";
+            log.error(msg, mpe);
+            throw new RepositoryException(msg, mpe);
+        }
-	Path destPath;
-	Path.PathElement destName;
-	Path destParentPath;
-	NodeImpl destParentNode;
-	try {
-	    destPath = Path.create(destAbsPath, getNamespaceResolver(), true);
-	    destName = destPath.getNameElement();
-	    destParentPath = destPath.getAncestor(1);
-	    destParentNode = (NodeImpl) itemMgr.getItem(destParentPath);
-	} catch (AccessDeniedException ade) {
-	    throw new PathNotFoundException(destAbsPath);
-	} catch (MalformedPathException mpe) {
-	    String msg = destAbsPath + ": invalid path";
-	    log.error(msg, mpe);
-	    throw new RepositoryException(msg, mpe);
-	}
-	int ind = destName.getIndex();
-	if (ind > 0) {
-	    // subscript in name element
-	    String msg = destAbsPath + ": invalid destination path (subscript in name element is not allowed)";
-	    log.error(msg);
-	    throw new RepositoryException(msg);
-	}
+        Path destPath;
+        Path.PathElement destName;
+        Path destParentPath;
+        NodeImpl destParentNode;
+        try {
+            destPath = Path.create(destAbsPath, getNamespaceResolver(), true);
+            destName = destPath.getNameElement();
+            destParentPath = destPath.getAncestor(1);
+            destParentNode = (NodeImpl) itemMgr.getItem(destParentPath);
+        } catch (AccessDeniedException ade) {
+            throw new PathNotFoundException(destAbsPath);
+        } catch (MalformedPathException mpe) {
+            String msg = destAbsPath + ": invalid path";
+            log.error(msg, mpe);
+            throw new RepositoryException(msg, mpe);
+        }
+        int ind = destName.getIndex();
+        if (ind > 0) {
+            // subscript in name element
+            String msg = destAbsPath + ": invalid destination path (subscript in name element is not allowed)";
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
-	// check for name collisions
+        // check for name collisions
-	try {
-	    ItemImpl item = itemMgr.getItem(destPath);
-	    if (!item.isNode()) {
-		// there's already a property with that name
-		throw new ItemExistsException(item.safeGetJCRPath());
-	    } else {
-		// there's already a node with that name
-		// check same-name sibling setting of both new and existing node
-		if (!destParentNode.getDefinition().allowSameNameSibs()
-			|| !((NodeImpl) item).getDefinition().allowSameNameSibs()) {
-		    throw new ItemExistsException(item.safeGetJCRPath());
-		}
-	    }
-	} catch (AccessDeniedException ade) {
-	    // FIXME by throwing ItemExistsException we're disclosing too much information
-	    throw new ItemExistsException(destAbsPath);
-	} catch (PathNotFoundException pnfe) {
-	    // no name collision
-	}
+        try {
+            ItemImpl item = itemMgr.getItem(destPath);
+            if (!item.isNode()) {
+                // there's already a property with that name
+                throw new ItemExistsException(item.safeGetJCRPath());
+            } else {
+                // there's already a node with that name
+                // check same-name sibling setting of both new and existing node
+                if (!destParentNode.getDefinition().allowSameNameSibs()
+                        || !((NodeImpl) item).getDefinition().allowSameNameSibs()) {
+                    throw new ItemExistsException(item.safeGetJCRPath());
+                }
+            }
+        } catch (AccessDeniedException ade) {
+            // FIXME by throwing ItemExistsException we're disclosing too much information
+            throw new ItemExistsException(destAbsPath);
+        } catch (PathNotFoundException pnfe) {
+            // no name collision
+        }
-	// check constraints
+        // check constraints
-	// get applicable definition of target node at new location
-	NodeTypeImpl nt = (NodeTypeImpl) targetNode.getPrimaryNodeType();
-	NodeDefImpl newTargetDef;
-	try {
-	    newTargetDef = destParentNode.getApplicableChildNodeDef(destName.getName(), nt.getQName());
-	} catch (RepositoryException re) {
-	    String msg = destAbsPath + ": no definition found in parent node's node type for new node";
-	    log.error(msg, re);
-	    throw new ConstraintViolationException(msg, re);
-	}
-	// check protected flag of old & new parent
-	if (destParentNode.getDefinition().isProtected()) {
-	    String msg = destAbsPath + ": cannot add a child node to a protected node";
-	    log.error(msg);
-	    throw new ConstraintViolationException(msg);
-	}
-	if (srcParentNode.getDefinition().isProtected()) {
-	    String msg = srcAbsPath + ": cannot remove a child node from a protected node";
-	    log.error(msg);
-	    throw new ConstraintViolationException(msg);
-	}
+        // get applicable definition of target node at new location
+        NodeTypeImpl nt = (NodeTypeImpl) targetNode.getPrimaryNodeType();
+        NodeDefImpl newTargetDef;
+        try {
+            newTargetDef = destParentNode.getApplicableChildNodeDef(destName.getName(), nt.getQName());
+        } catch (RepositoryException re) {
+            String msg = destAbsPath + ": no definition found in parent node's node type for new node";
+            log.error(msg, re);
+            throw new ConstraintViolationException(msg, re);
+        }
+        // check protected flag of old & new parent
+        if (destParentNode.getDefinition().isProtected()) {
+            String msg = destAbsPath + ": cannot add a child node to a protected node";
+            log.error(msg);
+            throw new ConstraintViolationException(msg);
+        }
+        if (srcParentNode.getDefinition().isProtected()) {
+            String msg = srcAbsPath + ": cannot remove a child node from a protected node";
+            log.error(msg);
+            throw new ConstraintViolationException(msg);
+        }
-	// do move operation
+        // do move operation
-	String targetUUID = ((NodeState) targetNode.getItemState()).getUUID();
-	// add target to new parent
-	destParentNode.createChildNodeLink(destName.getName(), targetUUID);
-	// remove target from old parent
-	srcParentNode.removeChildNode(srcName.getName(), srcName.getIndex() == 0 ? 1 : srcName.getIndex());
-	// change definition of target if necessary
-	NodeDefImpl oldTargetDef = (NodeDefImpl) targetNode.getDefinition();
-	NodeDefId oldTargetDefId = new NodeDefId(oldTargetDef.unwrap());
-	NodeDefId newTargetDefId = new NodeDefId(newTargetDef.unwrap());
-	if (!oldTargetDefId.equals(newTargetDefId)) {
-	    targetNode.onRedefine(newTargetDefId);
-	}
+        String targetUUID = ((NodeState) targetNode.getItemState()).getUUID();
+        // add target to new parent
+        destParentNode.createChildNodeLink(destName.getName(), targetUUID);
+        // remove target from old parent
+        srcParentNode.removeChildNode(srcName.getName(), srcName.getIndex() == 0 ? 1 : srcName.getIndex());
+        // change definition of target if necessary
+        NodeDefImpl oldTargetDef = (NodeDefImpl) targetNode.getDefinition();
+        NodeDefId oldTargetDefId = new NodeDefId(oldTargetDef.unwrap());
+        NodeDefId newTargetDefId = new NodeDefId(newTargetDef.unwrap());
+        if (!oldTargetDefId.equals(newTargetDefId)) {
+            targetNode.onRedefine(newTargetDefId);
+        }
-	Item item = null;
-	try {
-	    item = itemMgr.getItem(Path.create(parentAbsPath, getNamespaceResolver(), true));
-	} catch (MalformedPathException mpe) {
-	    String msg = parentAbsPath + ": invalid path";
-	    log.error(msg, mpe);
-	    throw new RepositoryException(msg, mpe);
-	} catch (AccessDeniedException ade) {
-	    throw new PathNotFoundException(parentAbsPath);
-	}
-	if (!item.isNode()) {
-	    String msg = parentAbsPath + ": node expected";
-	    log.error(msg);
-	    throw new RepositoryException(msg);
-	}
-	NodeImpl parent = (NodeImpl) item;
-	return new ImportHandler(parent, rep.getNamespaceRegistry(), this);
+        Item item = null;
+        try {
+            item = itemMgr.getItem(Path.create(parentAbsPath, getNamespaceResolver(), true));
+        } catch (MalformedPathException mpe) {
+            String msg = parentAbsPath + ": invalid path";
+            log.error(msg, mpe);
+            throw new RepositoryException(msg, mpe);
+        } catch (AccessDeniedException ade) {
+            throw new PathNotFoundException(parentAbsPath);
+        }
+        if (!item.isNode()) {
+            String msg = parentAbsPath + ": node expected";
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+        NodeImpl parent = (NodeImpl) item;
+        return new ImportHandler(parent, rep.getNamespaceRegistry(), this);
-	    throws IOException, PathNotFoundException, ItemExistsException,
-	    ConstraintViolationException, InvalidSerializedDataException,
-	    RepositoryException {
-	ImportHandler handler = (ImportHandler) getImportContentHandler(parentAbsPath);
-	try {
-	    XMLReader parser = XMLReaderFactory.createXMLReader("org.apache.xerces.parsers.SAXParser");
+            throws IOException, PathNotFoundException, ItemExistsException,
+            ConstraintViolationException, InvalidSerializedDataException,
+            RepositoryException {
+        ImportHandler handler = (ImportHandler) getImportContentHandler(parentAbsPath);
+        try {
+            XMLReader parser = XMLReaderFactory.createXMLReader("org.apache.xerces.parsers.SAXParser");
-	    parser.setContentHandler(handler);
-	    parser.setErrorHandler(handler);
+            parser.setContentHandler(handler);
+            parser.setErrorHandler(handler);
-	    parser.parse(new InputSource(in));
-	} catch (SAXException se) {
-	    // check for wrapped repository exception
-	    Exception e = se.getException();
-	    if (e != null && e instanceof RepositoryException) {
-		throw (RepositoryException) e;
-	    } else {
-		String msg = "failed to parse XML stream";
-		log.error(msg, se);
-		throw new InvalidSerializedDataException(msg, se);
-	    }
-	}
+            parser.parse(new InputSource(in));
+        } catch (SAXException se) {
+            // check for wrapped repository exception
+            Exception e = se.getException();
+            if (e != null && e instanceof RepositoryException) {
+                throw (RepositoryException) e;
+            } else {
+                String msg = "failed to parse XML stream";
+                log.error(msg, se);
+                throw new InvalidSerializedDataException(msg, se);
+            }
+        }
-	// discard all transient changes
-	itemStateMgr.disposeAllTransientItemStates();
+        // discard all transient changes
+        itemStateMgr.disposeAllTransientItemStates();
-	// @todo invalidate session, release session-scoped locks, free resources, prepare to get gc'ed etc.
+        // @todo invalidate session, release session-scoped locks, free resources, prepare to get gc'ed etc.
-	log.debug("disposing workspace...");
-	wsp.dispose();
+        log.debug("disposing workspace...");
+        wsp.dispose();
-	return rep;
+        return rep;
-	return userId;
+        return userId;
-	return attributes.get(name);
+        return attributes.get(name);
-	return (String[]) attributes.keySet().toArray(new String[attributes.size()]);
+        return (String[]) attributes.keySet().toArray(new String[attributes.size()]);
-	nsMappings.setNamespacePrefix(prefix, uri);
+        nsMappings.setNamespacePrefix(prefix, uri);
-	return nsMappings.getPrefixes();
+        return nsMappings.getPrefixes();
-	return nsMappings.getURI(prefix);
+        return nsMappings.getURI(prefix);
-	return nsMappings.getPrefix(uri);
+        return nsMappings.getPrefix(uri);
-	// @todo implement locking support
-	throw new UnsupportedOperationException("Locking not implemented yet.");
+        // @todo implement locking support
+        throw new UnsupportedOperationException("Locking not implemented yet.");
-	// @todo implement locking support
-	return new String[0];
+        // @todo implement locking support
+        return new String[0];
-	// @todo implement locking support
-	throw new UnsupportedOperationException("Locking not implemented yet.");
+        // @todo implement locking support
+        throw new UnsupportedOperationException("Locking not implemented yet.");
-	// the global persistent namespace registry
-	private NamespaceRegistryImpl nsReg;
+        // the global persistent namespace registry
+        private NamespaceRegistryImpl nsReg;
-	// local prefix/namespace mappings
-	private HashMap prefixToURI = new HashMap();
-	private HashMap uriToPrefix = new HashMap();
+        // local prefix/namespace mappings
+        private HashMap prefixToURI = new HashMap();
+        private HashMap uriToPrefix = new HashMap();
-	// prefixes in global namespace registry hidden by local mappings
-	private Set hiddenPrefixes = new HashSet();
+        // prefixes in global namespace registry hidden by local mappings
+        private Set hiddenPrefixes = new HashSet();
-	TransientNamespaceMappings(NamespaceRegistryImpl nsReg) {
-	    this.nsReg = nsReg;
-	}
+        TransientNamespaceMappings(NamespaceRegistryImpl nsReg) {
+            this.nsReg = nsReg;
+        }
-	void setNamespacePrefix(String prefix, String uri)
-		throws NamespaceException, RepositoryException {
-	    if (prefix == null || uri == null) {
-		throw new IllegalArgumentException("prefix/uri can not be null");
-	    }
-	    if (NamespaceRegistryImpl.NS_EMPTY_PREFIX.equals(prefix)
-		    || NamespaceRegistryImpl.NS_DEFAULT_URI.equals(uri)) {
-		throw new NamespaceException("default namespace is reserved and can not be changed");
-	    }
-	    // check if namespace exists (the following call will
-	    // trigger a NamespaceException if it doesn't)
-	    String globalPrefix = nsReg.getPrefix(uri);
+        void setNamespacePrefix(String prefix, String uri)
+                throws NamespaceException, RepositoryException {
+            if (prefix == null || uri == null) {
+                throw new IllegalArgumentException("prefix/uri can not be null");
+            }
+            if (NamespaceRegistryImpl.NS_EMPTY_PREFIX.equals(prefix)
+                    || NamespaceRegistryImpl.NS_DEFAULT_URI.equals(uri)) {
+                throw new NamespaceException("default namespace is reserved and can not be changed");
+            }
+            // check if namespace exists (the following call will
+            // trigger a NamespaceException if it doesn't)
+            String globalPrefix = nsReg.getPrefix(uri);
-	    // check new prefix for collision
-	    String globalURI = null;
-	    try {
-		globalURI = nsReg.getURI(prefix);
-	    } catch (NamespaceException nse) {
-		// ignore
-	    }
-	    if (globalURI != null) {
-		// prefix is already mapped in global namespace registry;
-		// check if it refers to a namespace that has been locally
-		// remapped, thus hiding it
-		if (!hiddenPrefixes.contains(prefix)) {
-		    // we don't allow to hide a namespace because we can't
-		    // guarantee that there are no references to it
-		    // (in names of nodes/properties/node types etc.)
-		    throw new NamespaceException(prefix + ": prefix is already mapped to the namespace: " + globalURI);
-		}
-	    }
+            // check new prefix for collision
+            String globalURI = null;
+            try {
+                globalURI = nsReg.getURI(prefix);
+            } catch (NamespaceException nse) {
+                // ignore
+            }
+            if (globalURI != null) {
+                // prefix is already mapped in global namespace registry;
+                // check if it refers to a namespace that has been locally
+                // remapped, thus hiding it
+                if (!hiddenPrefixes.contains(prefix)) {
+                    // we don't allow to hide a namespace because we can't
+                    // guarantee that there are no references to it
+                    // (in names of nodes/properties/node types etc.)
+                    throw new NamespaceException(prefix + ": prefix is already mapped to the namespace: " + globalURI);
+                }
+            }
-	    // check if namespace is already locally mapped
-	    String oldPrefix = (String) uriToPrefix.get(uri);
-	    if (oldPrefix != null) {
-		// resurrect hidden global prefix
-		hiddenPrefixes.remove(nsReg.getPrefix(uri));
-		// remove old mapping
-		uriToPrefix.remove(uri);
-		prefixToURI.remove(oldPrefix);
-	    }
+            // check if namespace is already locally mapped
+            String oldPrefix = (String) uriToPrefix.get(uri);
+            if (oldPrefix != null) {
+                // resurrect hidden global prefix
+                hiddenPrefixes.remove(nsReg.getPrefix(uri));
+                // remove old mapping
+                uriToPrefix.remove(uri);
+                prefixToURI.remove(oldPrefix);
+            }
-	    // check if prefix is already locally mapped
-	    String oldURI = (String) prefixToURI.get(prefix);
-	    if (oldURI != null) {
-		// resurrect hidden global prefix
-		hiddenPrefixes.remove(nsReg.getPrefix(oldURI));
-		// remove old mapping
-		uriToPrefix.remove(oldURI);
-		prefixToURI.remove(prefix);
-	    }
+            // check if prefix is already locally mapped
+            String oldURI = (String) prefixToURI.get(prefix);
+            if (oldURI != null) {
+                // resurrect hidden global prefix
+                hiddenPrefixes.remove(nsReg.getPrefix(oldURI));
+                // remove old mapping
+                uriToPrefix.remove(oldURI);
+                prefixToURI.remove(prefix);
+            }
-	    if (!prefix.equals(globalPrefix)) {
-		// store new mapping
-		prefixToURI.put(prefix, uri);
-		uriToPrefix.put(uri, prefix);
-		hiddenPrefixes.add(globalPrefix);
-	    }
-	}
+            if (!prefix.equals(globalPrefix)) {
+                // store new mapping
+                prefixToURI.put(prefix, uri);
+                uriToPrefix.put(uri, prefix);
+                hiddenPrefixes.add(globalPrefix);
+            }
+        }
-	String[] getPrefixes() {
-	    if (prefixToURI.isEmpty()) {
-		// shortcut
-		return nsReg.getPrefixes();
-	    }
+        String[] getPrefixes() {
+            if (prefixToURI.isEmpty()) {
+                // shortcut
+                return nsReg.getPrefixes();
+            }
-	    HashSet prefixes = new HashSet();
-	    // global prefixes
-	    String[] globalPrefixes = nsReg.getPrefixes();
-	    for (int i = 0; i < globalPrefixes.length; i++) {
-		if (!hiddenPrefixes.contains(globalPrefixes[i])) {
-		    prefixes.add(globalPrefixes[i]);
-		}
-	    }
-	    // local prefixes
-	    prefixes.addAll(prefixToURI.keySet());
+            HashSet prefixes = new HashSet();
+            // global prefixes
+            String[] globalPrefixes = nsReg.getPrefixes();
+            for (int i = 0; i < globalPrefixes.length; i++) {
+                if (!hiddenPrefixes.contains(globalPrefixes[i])) {
+                    prefixes.add(globalPrefixes[i]);
+                }
+            }
+            // local prefixes
+            prefixes.addAll(prefixToURI.keySet());
-	    return (String[]) prefixes.toArray(new String[prefixes.size()]);
-	}
+            return (String[]) prefixes.toArray(new String[prefixes.size()]);
+        }
-	//------------------------------------------------< NamespaceResolver >
-	/**
-	 * @see NamespaceResolver#getURI
-	 */
-	public String getURI(String prefix) throws NamespaceException {
-	    if (prefixToURI.isEmpty()) {
-		// shortcut
-		return nsReg.getURI(prefix);
-	    }
-	    // check local mappings
-	    if (prefixToURI.containsKey(prefix)) {
-		return (String) prefixToURI.get(prefix);
-	    }
+        //------------------------------------------------< NamespaceResolver >
+        /**
+         * @see NamespaceResolver#getURI
+         */
+        public String getURI(String prefix) throws NamespaceException {
+            if (prefixToURI.isEmpty()) {
+                // shortcut
+                return nsReg.getURI(prefix);
+            }
+            // check local mappings
+            if (prefixToURI.containsKey(prefix)) {
+                return (String) prefixToURI.get(prefix);
+            }
-	    // check global mappings
-	    if (!hiddenPrefixes.contains(prefix)) {
-		return nsReg.getURI(prefix);
-	    }
+            // check global mappings
+            if (!hiddenPrefixes.contains(prefix)) {
+                return nsReg.getURI(prefix);
+            }
-	    throw new NamespaceException(prefix + ": unknown prefix");
-	}
+            throw new NamespaceException(prefix + ": unknown prefix");
+        }
-	/**
-	 * @see NamespaceResolver#getPrefix
-	 */
-	public String getPrefix(String uri) throws NamespaceException {
-	    if (prefixToURI.isEmpty()) {
-		// shortcut
-		return nsReg.getPrefix(uri);
-	    }
+        /**
+         * @see NamespaceResolver#getPrefix
+         */
+        public String getPrefix(String uri) throws NamespaceException {
+            if (prefixToURI.isEmpty()) {
+                // shortcut
+                return nsReg.getPrefix(uri);
+            }
-	    // check local mappings
-	    if (uriToPrefix.containsKey(uri)) {
-		return (String) uriToPrefix.get(uri);
-	    }
+            // check local mappings
+            if (uriToPrefix.containsKey(uri)) {
+                return (String) uriToPrefix.get(uri);
+            }
-	    // check global mappings
-	    return nsReg.getPrefix(uri);
-	}
+            // check global mappings
+            return nsReg.getPrefix(uri);
+        }

MOV26 DEL66 DEL65 DEL66 DEL65