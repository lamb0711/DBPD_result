work in progress

- HierarchyManager: changes methods to take ItemState instead of ItemId
- HierarchyManager: remove log-utility methods (saveGetJCRPath)
- HierarchyManager: remove CachingHierachyManager. not used
- ItemManager: changes methods to take ItemState instead of ItemId
- ItemStateValidator: remove utility methods not related to validation
- new class LogUtil that provides static saveGetJCRPath methods previously
  present on HierarchyManager, ItemStateValidator
- NodeState: add method 'getPropertyEntries()'
- create interface ChildPropertyEntry
- let PropertyReference implement ChildPropertyEntry

TODO: query/NodeIteratorImpl needs to be fixed. 


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429652 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.state.PropertyState;
-import org.apache.jackrabbit.spi.PropertyId;
-        NodeId vId = vhState.getChildNodeEntry(QName.JCR_ROOTVERSION, Path.INDEX_DEFAULT).getId();
-        return (Version) itemMgr.getItem(vId);
+        try {
+            NodeState vState = vhState.getChildNodeEntry(QName.JCR_ROOTVERSION, Path.INDEX_DEFAULT).getNodeState();
+            return (Version) itemMgr.getItem(vState);
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        }
-        NodeId vId = getVersionId(versionName);
-        return (Version) itemMgr.getItem(vId);
+        NodeState vState = getVersionState(versionName);
+        return (Version) itemMgr.getItem(vState);
-        NodeId vId = getVersionIdByLabel(label);
-        return (Version) itemMgr.getItem(vId);
+        ChildNodeEntry vEntry = getVersionEntryByLabel(getQLabel(label));
+        try {
+            return (Version) itemMgr.getItem(vEntry.getNodeState());
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        }
-        Operation op = AddLabel.create(vhState.getNodeId(), getVersionId(versionName), qLabel, moveLabel);
+        ChildNodeEntry vEntry = getVersionEntry(versionName);
+        Operation op = AddLabel.create(vhState.getNodeId(), vEntry.getId(), qLabel, moveLabel);
-        Operation op = RemoveLabel.create(vhState.getNodeId(), getVersionIdByLabel(label), qLabel);
+        ChildNodeEntry vEntry = getVersionEntryByLabel(getQLabel(label));
+        Operation op = RemoveLabel.create(vhState.getNodeId(), vEntry.getId(), qLabel);
-     * @param string
+     * @param label
-                NodeId vId = getVersionIdByLabel(qLabels[i]);
+                NodeId vId = getVersionEntryByLabel(qLabels[i]).getId();
-            NodeId vId = getVersionIdByLabel(qLabels[i]);
+            NodeId vId = getVersionEntryByLabel(qLabels[i]).getId();
-        try {
-            NodeId vId = getVersionId(versionName);
-            NodeState vState = (NodeState) itemStateMgr.getItemState(vId);
-
-            // TODO: ev. delegate to versionmanager
-            Operation rm = Remove.create(vState);
-            itemStateMgr.execute(rm);
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
-        }
+        NodeState vState = getVersionState(versionName);
+        // TODO: ev. delegate to versionmanager
+        Operation rm = Remove.create(vState);
+        itemStateMgr.execute(rm);
-    private NodeId getVersionId(String versionName) throws VersionException, RepositoryException {
+    private ChildNodeEntry getVersionEntry(String versionName) throws VersionException, RepositoryException {
-                return vEntry.getId();
+                return vEntry;
-     * @param label
+     * @param versionName
-    private NodeId getVersionIdByLabel(String label) throws VersionException, RepositoryException {
-        QName qLabel = getQLabel(label);
-        return getVersionIdByLabel(qLabel);
+    private NodeState getVersionState(String versionName) throws VersionException, RepositoryException {
+        try {
+            return getVersionEntry(versionName).getNodeState();
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        }
-    private NodeId getVersionIdByLabel(QName qLabel) throws VersionException, RepositoryException {
+    private ChildNodeEntry getVersionEntryByLabel(QName qLabel) throws VersionException, RepositoryException {
-                PropertyId pId = labelNodeState.getPropertyState(qLabel).getPropertyId();
-                Node version = ((Property) itemMgr.getItem(pId)).getNode();
-                return (NodeId) session.getHierarchyManager().getItemId(version);
+                PropertyState pState = labelNodeState.getPropertyState(qLabel);
+                Node version = ((Property) itemMgr.getItem(pState)).getNode();
+                return getVersionEntry(version.getName());

MOV26 UPD40 INS8 INS8 MOV8 MOV8 UPD43 UPD42 UPD43 UPD42 INS8 UPD43 UPD42 INS54 INS54 MOV60 INS60 INS60 MOV21 INS60 UPD42 UPD42 UPD42 INS54 UPD42 MOV8 INS12 UPD43 UPD43 INS8 INS12 INS43 INS59 MOV43 INS59 INS43 INS59 UPD42 MOV43 UPD42 INS8 MOV12 INS44 INS8 MOV42 UPD42 UPD42 UPD42 MOV41 INS44 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 UPD42 MOV41 UPD43 INS43 INS42 INS53 UPD42 UPD42 UPD42 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 MOV32 MOV32 INS42 INS42 INS42 INS32 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS14 INS42 MOV42 INS42 INS14 INS42 INS42 UPD42 UPD42 INS32 INS32 INS42 UPD42 UPD42 INS43 INS42 INS32 INS43 INS42 MOV32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD43 INS32 INS42 UPD42 MOV42 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV32 INS42 INS32 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL54 DEL8 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL32 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL11