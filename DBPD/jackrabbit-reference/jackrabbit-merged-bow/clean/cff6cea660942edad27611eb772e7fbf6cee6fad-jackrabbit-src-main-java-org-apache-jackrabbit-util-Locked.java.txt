Improve Locked utility
- run method now provides the lockable Node
- removed instance variables
- changed test cases accodingly

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@397802 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.RepositoryException;
-import javax.jcr.Session;
-import javax.jcr.observation.ObservationManager;
-import javax.jcr.observation.EventListener;
-import javax.jcr.observation.EventIterator;
-import javax.jcr.observation.Event;
-import javax.jcr.lock.LockException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.lock.LockException;
+import javax.jcr.observation.Event;
+import javax.jcr.observation.EventIterator;
+import javax.jcr.observation.EventListener;
+import javax.jcr.observation.ObservationManager;
+
+import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.SessionNamespaceResolver;
+import org.apache.jackrabbit.name.NoPrefixDeclaredException;
- * final Node counter = ...;
+ * Node counter = ...;
- *     protected Object run() throws RepositoryException {
- *         long value = counter.getProperty("value").getLong();
- *         counter.setProperty("value", ++value);
- *         counter.save();
+ *     protected Object run(Node counter) throws RepositoryException {
+ *         Property seqProp = counter.getProperty("value");
+ *         long value = seqProp.getLong();
+ *         seqProp.setValue(++value);
+ *         seqProp.save();
- * final Node counter = ...;
+ * Node counter = ...;
- *     protected Object run() throws RepositoryException {
- *         long value = counter.getProperty("value").getLong();
- *         counter.setProperty("value", ++value);
- *         counter.save();
+ *     protected Object run(Node counter) throws RepositoryException {
+ *         Property seqProp = counter.getProperty("value");
+ *         long value = seqProp.getLong();
+ *         seqProp.setValue(++value);
+ *         seqProp.save();
-     * The lock we hold while executing {@link #run}.
-     */
-    private Lock lock;
-
-    /**
-     * An event listener if one was registered
-     */
-    private EventListener listener;
-
-    /**
+     * @throws IllegalArgumentException if <code>lockable</code> is not
+     *      <i>mix:lockable</i>.
-     * @throws RepositoryException  if {@link #run} throws an exception.
-     * @throws InterruptedException if this thread is interrupted while waiting
-     *                              for the lock on node <code>lockable</code>.
+     * @throws IllegalArgumentException if <code>timeout</code> is negative or
+     *                                  <code>lockable</code> is not
+     *                                  <i>mix:lockable</i>.
+     * @throws RepositoryException      if {@link #run} throws an exception.
+     * @throws UnsupportedRepositoryOperationException
+     *                                  if this repository does not support
+     *                                  locking.
+     * @throws InterruptedException     if this thread is interrupted while
+     *                                  waiting for the lock on node
+     *                                  <code>lockable</code>.
-            throws RepositoryException, InterruptedException {
+            throws UnsupportedRepositoryOperationException, RepositoryException, InterruptedException {
+
+        SessionNamespaceResolver resolver = new SessionNamespaceResolver(session);
+
+        Lock lock;
+        EventListener listener = null;
-            if (tryLock(lockable, isDeep)) {
-                return runAndUnlock();
+            // check whether the lockable can be locked at all
+            if (!lockable.isNodeType(resolver.getJCRName(QName.MIX_LOCKABLE))) {
+                throw new IllegalArgumentException("Node is not lockable");
+            }
+
+            lock = tryLock(lockable, isDeep);
+            if (lock != null) {
+                return runAndUnlock(lock);
-            for (;;) {
+            for (; ;) {
-                    if (tryLock(lockable, isDeep)) {
-                        return runAndUnlock();
+                    lock = tryLock(lockable, isDeep);
+                    if (lock != null) {
+                        return runAndUnlock(lock);
+        } catch (NoPrefixDeclaredException e) {
+            throw new RepositoryException(e);
+     * @param node The <code>Node</code> on which the lock is placed.
-    protected abstract Object run() throws RepositoryException;
+    protected abstract Object run(Node node) throws RepositoryException;
-     * @return the object returned by {@link #run()}.
+     * @param lock The <code>Lock</code> to unlock in any case before returning.
+     *
+     * @return the object returned by {@link #run}.
-    private Object runAndUnlock() throws RepositoryException {
+    private Object runAndUnlock(Lock lock) throws RepositoryException {
-            return run();
+            return run(lock.getNode());
-     * @return <code>true</code> if the lock could be aquired.
+     * @return The <code>Lock</code> or <code>null</code> if the
+     *         <code>lockable</code> cannot be locked.
+     * @throws UnsupportedRepositoryOperationException
+     *                             if this repository does not support locking.
-    private boolean tryLock(Node lockable, boolean isDeep) throws RepositoryException {
+    private static Lock tryLock(Node lockable, boolean isDeep)
+            throws UnsupportedRepositoryOperationException, RepositoryException {
-            lock = lockable.lock(isDeep, true);
-            // if we get here we have a lock
-            return true;
+            return lockable.lock(isDeep, true);
-        return false;
+        return null;
-    private boolean isObservationSupported(Session s) {
+    private static boolean isObservationSupported(Session s) {
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS43 INS44 INS44 INS83 INS43 INS43 INS83 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS65 INS65 UPD65 MOV65 INS42 INS60 INS60 INS60 INS65 INS43 INS42 INS65 INS43 INS42 INS65 INS42 INS42 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 UPD66 UPD66 UPD42 UPD66 UPD66 UPD66 INS66 UPD66 INS43 INS59 MOV43 MOV59 MOV43 INS59 INS12 INS42 INS66 INS42 INS42 INS66 INS42 INS66 UPD66 INS42 INS66 INS33 INS42 INS42 INS14 INS42 INS33 INS25 INS21 INS44 INS8 INS67 INS43 INS42 INS38 INS8 INS7 INS27 INS43 INS42 INS53 INS42 MOV32 INS42 INS32 INS53 INS42 MOV32 INS42 INS33 INS42 INS14 INS32 INS42 INS42 INS32 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS45 INS42 INS21 INS42 INS42 INS7 INS27 INS42 MOV32 INS42 INS33 INS42 DEL29 DEL83 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL42 DEL67 DEL65 DEL42 DEL68 DEL39 DEL42 DEL7 DEL21 DEL9 DEL9