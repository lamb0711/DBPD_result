JCR-247: Child axis support for XPath predicates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477599 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.Path;
-                    sb.append(NameFormat.format(ISO9075.encode(selectProps[i]), resolver));
+                    NameFormat.format(ISO9075.encode(selectProps[i]), resolver, sb);
-                sb.append(NameFormat.format(XPathQueryBuilder.FN_NOT_10, resolver));
+                NameFormat.format(XPathQueryBuilder.FN_NOT_10, resolver, sb);
-            sb.append(NameFormat.format(ISO9075.encode(node.getPropertyName()), resolver));
-            sb.append("='").append(NameFormat.format(node.getValue(), resolver));
+            NameFormat.format(ISO9075.encode(node.getPropertyName()), resolver, sb);
+            sb.append("='");
+            NameFormat.format(node.getValue(), resolver, sb);
-            sb.append(NameFormat.format(QName.JCR_PRIMARYTYPE, resolver));
-            sb.append("='").append(NameFormat.format(node.getValue(), resolver));
+            NameFormat.format(QName.JCR_PRIMARYTYPE, resolver, sb);
+            sb.append("='");
+            NameFormat.format(node.getValue(), resolver, sb);
-            sb.append(NameFormat.format(XPathQueryBuilder.JCR_CONTAINS, resolver));
+            NameFormat.format(XPathQueryBuilder.JCR_CONTAINS, resolver, sb);
-            if (node.getPropertyName() == null) {
+            Path relPath = node.getRelativePath();
+            if (relPath == null) {
-                sb.append("@");
-                sb.append(NameFormat.format(ISO9075.encode(node.getPropertyName()), resolver));
+                Path.PathElement[] elements = relPath.getElements();
+                String slash = "";
+                for (int i = 0; i < elements.length; i++) {
+                    sb.append(slash);
+                    slash = "/";
+                    if (node.getReferencesProperty() && i == elements.length - 1) {
+                        sb.append("@");
+                    }
+                    if (elements[i].getName().equals(RelationQueryNode.STAR_NAME_TEST)) {
+                        sb.append("*");
+                    } else {
+                        NameFormat.format(ISO9075.encode(elements[i].getName()), resolver, sb);
+                    }
+                    if (elements[i].getIndex() != 0) {
+                        sb.append("[").append(elements[i].getIndex()).append("]");
+                    }
+                }
-                    sb.append(NameFormat.format(XPathQueryBuilder.JCR_ROOT, resolver));
+                    NameFormat.format(XPathQueryBuilder.JCR_ROOT, resolver, sb);
-                    sb.append(NameFormat.format(ISO9075.encode(node.getNameTest()), resolver));
+                    NameFormat.format(ISO9075.encode(node.getNameTest()), resolver, sb);
-            sb.append(NameFormat.format(XPathQueryBuilder.JCR_DEREF, resolver));
+            NameFormat.format(XPathQueryBuilder.JCR_DEREF, resolver, sb);
-            sb.append(NameFormat.format(ISO9075.encode(node.getRefProperty()), resolver));
+            NameFormat.format(ISO9075.encode(node.getRefProperty()), resolver, sb);
-                sb.append(NameFormat.format(ISO9075.encode(node.getNameTest()), resolver));
+                NameFormat.format(ISO9075.encode(node.getNameTest()), resolver, sb);
-            StringBuffer propName = new StringBuffer();
+            StringBuffer propPath = new StringBuffer();
-            if (node.getProperty().equals(XPathQueryBuilder.FN_POSITION_FULL)) {
-                NameFormat.format(node.getProperty(), resolver, propName);
+            Path relPath = node.getRelativePath();
+            if (relPath.getNameElement().getName().equals(XPathQueryBuilder.FN_POSITION_FULL)) {
+                NameFormat.format(XPathQueryBuilder.FN_POSITION_FULL, resolver, propPath);
-                propName.append("@");
-                NameFormat.format(ISO9075.encode(node.getProperty()), resolver, propName);
+                Path.PathElement[] elements = relPath.getElements();
+                String slash = "";
+                for (int i = 0; i < elements.length; i++) {
+                    propPath.append(slash);
+                    slash = "/";
+                    if (i == elements.length - 1) {
+                        propPath.append("@");
+                    }
+                    if (elements[i].getName().equals(RelationQueryNode.STAR_NAME_TEST)) {
+                        propPath.append("*");
+                    } else {
+                        NameFormat.format(ISO9075.encode(elements[i].getName()), resolver, propPath);
+                    }
+                    if (elements[i].getIndex() != 0) {
+                        propPath.append("[").append(elements[i].getIndex()).append("]");
+                    }
+                }
-            node.acceptOperands(this, propName);
+            node.acceptOperands(this, propPath);
-                sb.append(propName).append(" eq ");
+                sb.append(propPath).append(" eq ");
-                sb.append(propName).append(" = ");
+                sb.append(propPath).append(" = ");
-                sb.append(propName).append(" >= ");
+                sb.append(propPath).append(" >= ");
-                sb.append(propName).append(" ge ");
+                sb.append(propPath).append(" ge ");
-                sb.append(propName).append(" > ");
+                sb.append(propPath).append(" > ");
-                sb.append(propName).append(" gt ");
+                sb.append(propPath).append(" gt ");
-                sb.append(propName).append(" <= ");
+                sb.append(propPath).append(" <= ");
-                sb.append(propName).append(" le ");
+                sb.append(propPath).append(" le ");
-                sb.append(NameFormat.format(XPathQueryBuilder.JCR_LIKE, resolver));
-                sb.append("(").append(propName).append(", ");
+                NameFormat.format(XPathQueryBuilder.JCR_LIKE, resolver, sb);
+                sb.append("(").append(propPath).append(", ");
-                sb.append(propName).append(" < ");
+                sb.append(propPath).append(" < ");
-                sb.append(propName).append(" lt ");
+                sb.append(propPath).append(" lt ");
-                sb.append(propName).append(" != ");
+                sb.append(propPath).append(" != ");
-                sb.append(propName).append(" ne ");
+                sb.append(propPath).append(" ne ");
-                sb.append(NameFormat.format(XPathQueryBuilder.FN_NOT, resolver));
-                sb.append("(").append(propName).append(")");
+                NameFormat.format(XPathQueryBuilder.FN_NOT, resolver, sb);
+                sb.append("(").append(propPath).append(")");
-                sb.append(propName);
+                sb.append(propPath);
-                sb.append(" @").append(NameFormat.format(prop, resolver));
+                sb.append(" @");
+                NameFormat.format(prop, resolver, sb);
-            b.append(NameFormat.format(XPathQueryBuilder.XS_DATETIME, resolver));
+            NameFormat.format(XPathQueryBuilder.XS_DATETIME, resolver, b);

INS26 INS40 INS21 INS21 INS60 INS60 MOV32 MOV32 MOV32 INS32 MOV32 MOV32 INS32 INS43 INS59 INS27 INS8 INS32 MOV32 INS43 INS59 INS8 INS42 INS42 MOV42 MOV42 MOV40 MOV42 INS42 INS42 MOV42 MOV42 MOV40 MOV42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS24 MOV42 MOV42 MOV40 MOV42 INS42 INS42 UPD42 INS42 INS42 INS32 INS60 INS60 INS24 UPD42 MOV21 INS21 INS32 INS42 INS42 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 MOV32 INS42 INS42 INS32 UPD42 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 MOV21 MOV32 INS32 MOV42 MOV42 MOV40 MOV42 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS45 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS25 INS25 INS25 INS42 UPD42 MOV42 INS42 INS40 UPD42 INS43 INS85 INS42 INS32 INS42 INS42 INS45 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS25 INS25 INS25 MOV21 INS42 INS42 INS42 INS42 INS42 INS32 MOV32 INS40 INS42 INS42 INS42 INS34 INS32 INS7 UPD27 MOV27 INS8 INS32 INS8 INS8 INS27 INS8 INS32 MOV32 INS40 INS42 INS42 INS42 INS34 INS32 INS7 INS27 INS8 INS32 INS8 INS8 INS27 INS8 UPD42 MOV21 MOV42 MOV42 MOV40 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS27 MOV21 INS32 INS42 INS40 INS21 INS21 INS32 INS34 INS21 MOV42 MOV42 MOV40 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS27 MOV21 INS32 INS42 INS40 INS21 MOV21 INS32 INS34 INS21 UPD42 MOV21 UPD42 INS42 INS27 INS2 INS42 INS32 INS32 INS2 INS42 INS32 INS40 INS34 INS2 INS42 INS32 INS2 INS42 INS32 UPD42 MOV21 INS40 INS34 INS42 INS42 MOV42 MOV42 INS45 MOV42 MOV42 MOV32 MOV42 INS42 INS42 INS42 INS32 INS42 INS45 UPD42 INS42 INS42 INS42 INS42 INS45 UPD42 INS42 INS42 INS32 INS42 INS45 UPD42 MOV21 INS32 INS42 INS32 INS32 INS42 INS32 UPD42 MOV21 INS2 UPD42 INS42 INS42 INS45 INS2 INS42 INS2 UPD42 INS42 INS42 INS45 INS2 INS42 UPD42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 MOV21 UPD42 MOV42 MOV42 MOV40 MOV42 INS42 UPD45 MOV21 UPD42 MOV21 UPD42 MOV21 UPD42 MOV21 UPD42 INS32 UPD42 MOV42 MOV42 MOV40 MOV42 INS42 UPD45 UPD42 UPD42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL33 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL8 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32