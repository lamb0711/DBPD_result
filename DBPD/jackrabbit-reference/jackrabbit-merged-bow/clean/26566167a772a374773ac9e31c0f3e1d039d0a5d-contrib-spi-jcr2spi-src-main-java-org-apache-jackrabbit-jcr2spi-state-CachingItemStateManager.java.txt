TransientItemStatemanager now also extends from CachingItemStateManager.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431601 13f79535-47bb-0310-9956-ffa450edef68

-public class CachingItemStateManager implements ItemStateManager, ItemStateLifeCycleListener {
+public class CachingItemStateManager implements ItemStateManager {
-     * The root node of the workspace.
+     * The root node of the workspace or <code>null</code> if it has not been
+     * retrieved yet.
-    private final NodeState root;
+    private NodeState root;
+     * An {@link ItemStateLifeCycleListener} to maintain the LRU and UUID
+     * reference cache.
+     */
+    private final ItemStateLifeCycleListener lifeCycleListener;
+
+    /**
-     * @throws NoSuchItemStateException if the root node cannot be obtained.
-     * @throws ItemStateException       if any other error occurs while
-     *                                  obtaining the root node.
-    public CachingItemStateManager(ItemStateFactory isf, IdFactory idFactory)
-            throws ItemStateException, NoSuchItemStateException {
+    public CachingItemStateManager(ItemStateFactory isf, IdFactory idFactory) {
-        // initialize root
-        root = isf.createNodeState(idFactory.createNodeId((String) null, Path.ROOT), this);
-        root.addListener(this);
+        this.lifeCycleListener = new ISLifeCycleListener();
+        if (root == null) {
+            root = isf.createNodeState(idFactory.createNodeId((String) null, Path.ROOT), this);
+            root.addListener(lifeCycleListener);
+        }
-    //------------------------< ItemStateListener >-----------------------------
-
-    public void statusChanged(ItemState state, int previousStatus) {
-        if (state.getStatus() == ItemState.STATUS_REMOVED ||
-                state.getStatus() == ItemState.STATUS_STALE_DESTROYED) {
-            recentlyUsed.remove(state);
-            if (state.isNode()) {
-                NodeState nodeState = (NodeState) state;
-                if (nodeState.getUUID() != null) {
-                    uuid2NodeState.remove(nodeState.getUUID());
-                }
-            }
-        }
-    }
-
-    public void stateCreated(ItemState created) {
-    }
-
-    public void stateModified(ItemState modified) {
-    }
-
-    public void stateDestroyed(ItemState destroyed) {
-    }
-
-    public void stateDiscarded(ItemState discarded) {
-    }
-
+     * @return the item state factory of this <code>ItemStateManager</code>.
+     */
+    protected final ItemStateFactory getItemStateFactory() {
+        return isf;
+    }
+
+    /**
-        NodeState nodeState = root;
+        NodeState nodeState = getRootState();
-                nodeState.addListener(this);
+                nodeState.addListener(lifeCycleListener);
-            state = root;
+            try {
+                state = getRootState();
+            } catch (ItemStateException e) {
+                log.warn("unable to get root node state:" + e.getMessage());
+                return null;
+            }
+
+    //------------------------< ItemStateListener >-----------------------------
+
+    private class ISLifeCycleListener implements ItemStateLifeCycleListener {
+
+        public void statusChanged(ItemState state, int previousStatus) {
+            if (state.getStatus() == ItemState.STATUS_REMOVED ||
+                    state.getStatus() == ItemState.STATUS_STALE_DESTROYED) {
+                recentlyUsed.remove(state);
+                if (state.isNode()) {
+                    NodeState nodeState = (NodeState) state;
+                    if (nodeState.getUUID() != null) {
+                        uuid2NodeState.remove(nodeState.getUUID());
+                    }
+                }
+            }
+        }
+
+        public void stateCreated(ItemState created) {
+        }
+
+        public void stateModified(ItemState modified) {
+        }
+
+        public void stateDestroyed(ItemState destroyed) {
+        }
+
+        public void stateDiscarded(ItemState discarded) {
+        }
+    }

MOV23 INS23 INS31 INS55 INS29 INS83 MOV43 MOV59 INS43 INS59 MOV43 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS83 INS42 MOV43 MOV31 MOV31 MOV31 MOV31 MOV31 INS65 INS42 INS42 INS25 MOV41 INS65 INS42 INS41 INS66 INS66 INS66 INS65 UPD66 INS66 INS7 INS27 INS8 INS66 INS42 INS8 INS42 INS22 INS14 INS42 INS33 MOV21 INS21 INS32 INS54 INS52 INS42 INS43 INS32 INS42 INS8 INS12 INS42 INS42 INS42 INS42 MOV21 INS44 INS8 MOV43 INS42 INS21 INS41 INS42 INS32 INS32 INS33 INS42 INS42 INS42 INS27 INS45 INS32 INS42 INS42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL43 DEL42 DEL42 DEL52 DEL32 DEL8 DEL42 DEL52 DEL42 DEL8