JCR-2105: JSR 283 NodeType Management (work in progress)
JCR-1483: Move common node type functionality to jackrabbit-spi-commons

NOTE: intermediate checkin to avoid additional conflicts with stefans work


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@774294 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.commons.nodetype.InvalidNodeTypeDefException;
+import javax.jcr.nodetype.InvalidNodeTypeDefinitionException;
+import javax.jcr.nodetype.NodeTypeExistsException;
-   /**
-     * @see NodeTypeRegistry#registerNodeType(QNodeTypeDefinition)
-     */
-    public synchronized EffectiveNodeType registerNodeType(QNodeTypeDefinition ntDef)
-            throws InvalidNodeTypeDefException, RepositoryException {
-        // validate the new nodetype definition
-        EffectiveNodeType ent = validator.validateNodeTypeDef(ntDef, registeredNTDefs);
-
-        // persist new node type definition
-        storage.registerNodeTypes(new QNodeTypeDefinition[] {ntDef});
-
-        // update internal caches
-        internalRegister(ntDef, ent);
-
-        // notify listeners
-        notifyRegistered(ntDef.getName());
-        return ent;
-    }
-
-     * @see NodeTypeRegistry#registerNodeTypes(Collection)
+     * @see NodeTypeRegistry#registerNodeTypes(Collection, boolean)
-    public synchronized void registerNodeTypes(Collection ntDefs)
-            throws InvalidNodeTypeDefException, RepositoryException {
+    public synchronized void registerNodeTypes(Collection<QNodeTypeDefinition> ntDefs, boolean allowUpdate) throws NodeTypeExistsException, InvalidNodeTypeDefinitionException, RepositoryException {
+        List<Name> added = new ArrayList<Name>();
+        List<Name> modified = new ArrayList<Name>();
+        for (QNodeTypeDefinition def : ntDefs) {
+            Name name = def.getName();
+            if (isRegistered(name)) {
+                modified.add(name);
+            } else {
+                added.add(name);
+            }
+        }
-        storage.registerNodeTypes((QNodeTypeDefinition[])ntDefs.toArray(new QNodeTypeDefinition[ntDefs.size()]));
+        storage.registerNodeTypes(ntDefs.toArray(new QNodeTypeDefinition[ntDefs.size()]), allowUpdate);
-        // update internal cache
+        // update internal cache:
+        // unregister modified node type definition
+        internalUnregister(modified);
+        // register all new and modified definition
-        for (Iterator iter = ntDefs.iterator(); iter.hasNext();) {
-            Name ntName = ((QNodeTypeDefinition)iter.next()).getName();
+        for (Name ntName : added) {
-    }
-
-    /**
-     * @see NodeTypeRegistry#unregisterNodeType(Name)
-     */
-    public void unregisterNodeType(Name nodeTypeName) throws NoSuchNodeTypeException, RepositoryException {
-        HashSet ntNames = new HashSet();
-        ntNames.add(nodeTypeName);
-        unregisterNodeTypes(ntNames);
+        for (Name ntName : modified) {
+            notifyReRegistered(ntName);
+        }
-    public synchronized void unregisterNodeTypes(Collection nodeTypeNames)
+    public synchronized void unregisterNodeTypes(Collection<Name> nodeTypeNames)
-        for (Iterator iter = nodeTypeNames.iterator(); iter.hasNext();) {
-            Name ntName = (Name) iter.next();
-
+        for (Name ntName : nodeTypeNames) {
-        storage.unregisterNodeTypes((Name[]) nodeTypeNames.toArray(new Name[nodeTypeNames.size()]));
+        storage.unregisterNodeTypes(nodeTypeNames.toArray(new Name[nodeTypeNames.size()]));
-     * @see NodeTypeRegistry#reregisterNodeType(QNodeTypeDefinition)
-     */
-    public synchronized EffectiveNodeType reregisterNodeType(QNodeTypeDefinition ntd)
-            throws NoSuchNodeTypeException, InvalidNodeTypeDefException,
-            RepositoryException {
-        Name name = ntd.getName();
-        if (!registeredNTDefs.containsKey(name)) {
-            throw new NoSuchNodeTypeException(name.toString());
-        }
-        /* validate new node type definition */
-        EffectiveNodeType ent = validator.validateNodeTypeDef(ntd, registeredNTDefs);
-
-        // first call reregistering on storage
-        storage.reregisterNodeTypes(new QNodeTypeDefinition[]{ntd});
-
-        // unregister old node type definition
-        internalUnregister(name);
-        // register new definition
-        internalRegister(ntd, ent);
-
-        // notify listeners
-        notifyReRegistered(name);
-        return ent;
-    }
-
-    /**
-    private void internalUnregister(Collection ntNames) {
-        for (Iterator iter = ntNames.iterator(); iter.hasNext();) {
-            Name name = (Name) iter.next();
+    private void internalUnregister(Collection<Name> ntNames) {
+        for (Name name : ntNames) {

MOV26 INS26 UPD40 INS40 INS31 MOV29 MOV83 MOV83 MOV39 MOV42 MOV44 INS44 UPD43 MOV43 INS43 MOV43 INS8 MOV8 INS74 INS39 INS42 UPD42 UPD42 MOV42 INS60 MOV60 INS70 MOV60 MOV21 MOV21 MOV21 INS70 INS70 INS74 INS70 INS74 INS70 MOV43 MOV43 INS74 INS59 INS74 INS44 INS42 INS8 INS44 INS42 INS8 INS44 INS42 INS8 MOV43 MOV43 MOV44 INS42 MOV8 MOV43 MOV43 INS44 INS42 INS8 INS69 INS43 INS43 INS42 INS14 INS43 MOV43 UPD42 MOV43 INS42 MOV60 INS25 MOV32 INS42 UPD42 MOV43 INS42 MOV21 MOV43 INS42 MOV21 UPD42 MOV32 MOV43 INS42 MOV21 INS39 INS42 INS42 INS74 UPD42 MOV42 INS74 MOV43 INS32 INS8 INS8 INS43 INS43 INS43 MOV43 UPD42 MOV42 MOV42 INS21 MOV21 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 DEL43 DEL43 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL11 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL8 DEL24 DEL8 DEL31 DEL42 DEL42 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL85 DEL5 DEL11 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL8