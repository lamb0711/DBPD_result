work in progress

- cleaning changeLog upon status changes (resolve TODO)
- ChangeLog: make state-sets private


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@481293 13f79535-47bb-0310-9956-ffa450edef68

-    final Set addedStates = new LinkedHashSet();
+    private final Set addedStates = new LinkedHashSet();
-    final Set modifiedStates = new LinkedHashSet();
+    private final Set modifiedStates = new LinkedHashSet();
-    final Set deletedStates = new LinkedHashSet();
+    private final Set deletedStates = new LinkedHashSet();
+     * Returns true, if this change log contains the given <code>ItemState</code>
+     * in the set of transiently removed states.
+     *
+     * @param state
+     * @return
+     */
+    public boolean containsDeletedState(ItemState state) {
+        return deletedStates.contains(state);
+    }
+
+    /**
+     * Remove all entries and operation related to the given ItemState, that
+     * are not used any more (respecting the status change).
+     *
+     * @param state
+     */
+    public void removeAffected(ItemState state, int previousStatus) {
+        switch (state.getStatus()) {
+            case (Status.EXISTING):
+                switch (previousStatus) {
+                    case Status.EXISTING_MODIFIED:
+                        // was modified and is now refreshed
+                        modifiedStates.remove(state);
+                        break;
+                    case Status.EXISTING_REMOVED:
+                        // was removed and is now refreshed
+                        deletedStates.remove(state);
+                        break;
+                    case Status.STALE_MODIFIED:
+                        // was modified and state and is now refreshed
+                        modifiedStates.remove(state);
+                        break;
+                    case Status.NEW:
+                        // was new and has been saved now
+                        addedStates.remove(state);
+                        break;
+                }
+                // TODO: check if correct: changelog gets cleared any way -> no need to remove operations
+                break;
+            case Status.EXISTING_MODIFIED:
+                modified(state);
+                break;
+            case (Status.REMOVED):
+                if (previousStatus == Status.NEW) {
+                    // was new and now removed again
+                    addedStates.remove(state);
+                    // TODO: remove 'addNode' or 'setProperty' operation
+                    deletedStates.remove(state);
+                    removeAffectedOperations(state);
+                } else if (previousStatus == Status.EXISTING_REMOVED) {
+                    // was removed and is now saved
+                    deletedStates.remove(state);
+                    removeAffectedOperations(state);
+                }
+                break;
+            case (Status.EXISTING_REMOVED):
+                deleted(state);
+                removeAffectedOperations(state);
+                break;
+            case Status.STALE_DESTROYED:
+                // state is now stale. remove from modified
+                modifiedStates.remove(state);
+                removeAffectedOperations(state);
+                break;
+        }
+    }
+
+    private void removeAffectedOperations(ItemState state) {
+        for (Iterator it = operations.iterator(); it.hasNext();) {
+            Operation op = (Operation) it.next();
+            if (op.getAffectedItemStates().contains(state)) {
+                it.remove();
+            }
+        }
+    }
+
+    /**

INS31 INS31 INS31 INS83 INS83 INS83 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS43 INS42 INS41 INS65 INS65 INS43 INS42 INS39 INS42 INS50 INS43 INS42 INS24 INS66 INS66 INS42 INS42 INS32 INS66 INS66 INS42 INS42 INS32 INS49 INS50 INS10 INS49 INS21 INS10 INS49 INS25 INS10 INS49 INS21 INS21 INS10 INS49 INS21 INS21 INS10 INS42 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS40 INS32 INS36 INS27 INS8 INS25 INS36 INS32 INS32 INS40 INS32 INS32 INS43 INS59 INS42 INS42 INS60 INS25 INS40 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS42 INS42 INS40 INS42 INS40 INS21 INS21 INS21 INS27 INS8 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS40 INS21 INS21 INS42 INS42 INS42 INS42 INS11 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42