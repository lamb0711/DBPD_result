JCR-1313: Additional excerpt provider implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@612123 13f79535-47bb-0310-9956-ffa450edef68

-class DefaultHighlighter {
+public class DefaultHighlighter {
-     * A default value of <tt>80</tt>
+     * A default value of <tt>75</tt>
-    public static final int DEFAULT_SURROUND = 80;
+    public static final int DEFAULT_SURROUND = 75;
-    private DefaultHighlighter() {
-    }
+    public static final String START_HIGHLIGHT = "<highlight>";
-    /**
-     * @param tvec       the term position vector for this hit
-     * @param queryTerms the query terms.
-     * @param text       the original text that was used to create the tokens.
-     * @param prepend    the string used to prepend a highlighted token, for
-     *                   example <tt>&quot;&lt;b&gt;&quot;</tt>
-     * @param append     the string used to append a highlighted token, for
-     *                   example <tt>&quot;&lt;/b&gt;&quot;</tt>
-     * @return a String with text fragments where tokens from the query are
-     *         highlighted
-     */
-    public static String highlight(TermPositionVector tvec,
-                                   Set queryTerms,
-                                   String text,
-                                   String prepend,
-                                   String append)
-            throws IOException {
-        return highlight(tvec, queryTerms, text, prepend, append,
-                DEFAULT_MAXFRAGMENTS, DEFAULT_SURROUND);
+    public static final String END_HIGHLIGHT = "</highlight>";
+
+    protected DefaultHighlighter() {
+        return new DefaultHighlighter().doHighlight(tvec, queryTerms, text,
+                excerptStart, excerptEnd, fragmentStart, fragmentEnd, hlStart,
+                hlEnd, maxFragments, surround);
+    }
+
+    /**
+     * @param tvec         the term position vector for this hit
+     * @param queryTerms   the query terms.
+     * @param text         the original text that was used to create the tokens.
+     * @param maxFragments the maximum number of fragments
+     * @param surround     the maximum number of chars surrounding a highlighted
+     *                     token
+     * @return a String with text fragments where tokens from the query are
+     *         highlighted
+     */
+    public static String highlight(TermPositionVector tvec,
+                                   Set queryTerms,
+                                   String text,
+                                   int maxFragments,
+                                   int surround)
+            throws IOException {
+        return highlight(tvec, queryTerms, text, START_EXCERPT, END_EXCERPT,
+                START_FRAGMENT_SEPARATOR, END_FRAGMENT_SEPARATOR,
+                START_HIGHLIGHT, END_HIGHLIGHT, maxFragments, surround);
+    }
+
+    /**
+     * @see #highlight(TermPositionVector, Set, String, String, String, String, String, String, String, int, int)
+     */
+    protected String doHighlight(TermPositionVector tvec,
+                                 Set queryTerms,
+                                 String text,
+                                 String excerptStart,
+                                 String excerptEnd,
+                                 String fragmentStart,
+                                 String fragmentEnd,
+                                 String hlStart,
+                                 String hlEnd,
+                                 int maxFragments,
+                                 int surround) throws IOException {
-        return mergeFragments(offsets, new StringReader(text), excerptStart,
+        return mergeFragments(offsets, text, excerptStart,
-    /**
-     * @param tvec         the term position vector for this hit
-     * @param queryTerms   the query terms.
-     * @param text         the original text that was used to create the tokens.
-     * @param prepend      the string used to prepend a highlighted token, for
-     *                     example <tt>&quot;&lt;b&gt;&quot;</tt>
-     * @param append       the string used to append a highlighted token, for
-     *                     example <tt>&quot;&lt;/b&gt;&quot;</tt>
-     * @param maxFragments the maximum number of fragments
-     * @param surround     the maximum number of chars surrounding a highlighted
-     *                     token
-     * @return a String with text fragments where tokens from the query are
-     *         highlighted
-     */
-    public static String highlight(TermPositionVector tvec,
-                                   Set queryTerms,
-                                   String text,
-                                   String prepend,
-                                   String append,
-                                   int maxFragments,
-                                   int surround)
+    protected String mergeFragments(TermVectorOffsetInfo[] offsets,
+                                    String text,
+                                    String excerptStart,
+                                    String excerptEnd,
+                                    String fragmentStart,
+                                    String fragmentEnd,
+                                    String hlStart,
+                                    String hlEnd,
+                                    int maxFragments,
+                                    int surround)
-        return highlight(tvec, queryTerms, text, START_EXCERPT, END_EXCERPT,
-                START_FRAGMENT_SEPARATOR, END_FRAGMENT_SEPARATOR, prepend,
-                append, maxFragments, surround);
-    }
-
-    private static String mergeFragments(TermVectorOffsetInfo[] offsets,
-                                         StringReader reader,
-                                         String excerptStart,
-                                         String excerptEnd,
-                                         String fragmentStart,
-                                         String fragmentEnd,
-                                         String hlStart,
-                                         String hlEnd,
-                                         int maxFragments,
-                                         int surround)
-            throws IOException {
+        StringReader reader = new StringReader(text);
-            StringBuffer text = new StringBuffer(excerptStart);
-            text.append(fragmentStart);
-            int min = text.length();
+            StringBuffer excerpt = new StringBuffer(excerptStart);
+            excerpt.append(fragmentStart);
+            int min = excerpt.length();
-            text.append(buf, 0, len);
+            excerpt.append(buf, 0, len);
-                for (int i = text.length() - 1; i > min; i--) {
-                    if (Character.isWhitespace(text.charAt(i))) {
-                        text.delete(i, text.length());
-                        text.append(" ...");
+                for (int i = excerpt.length() - 1; i > min; i--) {
+                    if (Character.isWhitespace(excerpt.charAt(i))) {
+                        excerpt.delete(i, excerpt.length());
+                        excerpt.append(" ...");
-            text.append(fragmentEnd).append(excerptEnd);
-            return text.toString();
+            excerpt.append(fragmentEnd).append(excerptEnd);
+            return excerpt.toString();

MOV31 INS83 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 MOV43 INS59 UPD83 MOV29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS29 UPD83 UPD42 UPD83 UPD34 INS42 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 UPD42 INS39 INS42 INS39 UPD42 INS65 INS43 INS42 INS60 UPD66 INS42 INS42 INS42 INS42 INS42 INS42 INS68 INS42 MOV43 INS59 INS14 UPD42 INS42 UPD42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS42 INS42 MOV14 INS43 INS43 INS43 MOV43 MOV43 INS43 INS43 INS43 MOV43 MOV43 INS39 INS39 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL44 DEL42 DEL44 DEL83 DEL83 DEL42