JCR-2183 - Provide overridables for lock checking
- Add public LockInfo class
- Make AbstractLockInfo package private
- Rename internal LockInfo classes to avoid confusion
- Add overridable in LockManagerImpl with default implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@790892 13f79535-47bb-0310-9956-ffa450edef68

-            LockInfo info = new LockInfo(lockToken, false,
+            InternalLockInfo info = new InternalLockInfo(lockToken, false,
-        final ArrayList<LockInfo> list = new ArrayList<LockInfo>();
+        final ArrayList<AbstractLockInfo> list = new ArrayList<AbstractLockInfo>();
-                LockInfo info = (LockInfo) element.get();
-                if (!info.sessionScoped) {
+            	AbstractLockInfo info = (AbstractLockInfo) element.get();
+                if (!info.isSessionScoped()) {
-                AbstractLockInfo info = list.get(i);
-                writer.write(info.lockToken.toString());
+            	AbstractLockInfo info = list.get(i);
+                writer.write(info.getLockToken());
-        LockInfo info = new LockInfo(new LockToken(node.getNodeId()),
+        InternalLockInfo info = new InternalLockInfo(new LockToken(node.getNodeId()),
-                } else if (other.deep) {
+                } else if (other.isDeep()) {
-                getSessionLockManager(session).lockTokenAdded(info.lockToken.toString());
+                getSessionLockManager(session).lockTokenAdded(info.getLockToken());
-            if (!info.sessionScoped) {
+            if (!info.isSessionScoped()) {
-            if (session != info.getLockHolder()) {
-                throw new LockException("Node not locked by session: " + node);
-            }
+            checkUnlock(info, session);
-            if (!info.sessionScoped) {
+            if (!info.isSessionScoped()) {
-                if (info.isLive() && info.getLockHolder().equals(session)) {
+                if (info.isLive() && info.isLockHolder(session)) {
-                if (element.hasPath(path) || info.deep) {
+                if (element.hasPath(path) || info.isDeep()) {
-    public boolean isLockHolder(Session session, NodeImpl node)
-            throws RepositoryException {
-        acquire();
-
-        try {
-            SessionImpl nodeSession = (SessionImpl) node.getSession();
-            PathMap.Element element = lockMap.map(getPath(nodeSession, node.getId()), true);
-            if (element == null) {
-                return false;
-            }
-            AbstractLockInfo info = (AbstractLockInfo) element.get();
-            return info != null && info.getLockHolder() == session;
-        } catch (ItemNotFoundException e) {
-            return false;
-        } finally {
-            release();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-        AbstractLockInfo info = (AbstractLockInfo) element.get();
+        LockInfo info = (LockInfo) element.get();
-            if (element.hasPath(path) || info.deep) {
-                if (session != info.getLockHolder()) {
-                    throw new LockException("Node locked.");
-                }
+            if (element.hasPath(path) || info.isDeep()) {
+            	checkLock(info, session);
+     * Check whether a lock info allows access to a session. May be overridden
+     * by subclasses to allow access to nodes for sessions other than the
+     * lock holder itself.
+     * <p/>
+     * Default implementation allows access to the lock holder only.
+     * 
+     * @param info info to check
+     * @param session session
+     * @throws LockException if write access to the specified path is not allowed
+     * @throws RepositoryException if some other error occurs
+     */
+    protected void checkLock(LockInfo info, Session session) 
+    		throws LockException, RepositoryException {
+    	
+    	if (!info.isLockHolder(session)) {
+            throw new LockException("Node locked.");
+        }
+    }
+
+    /**
-    public void lockTokenAdded(SessionImpl session, String lt) throws LockException, RepositoryException {
+    public void checkUnlock(Session session, NodeImpl node)
+    		throws LockException, RepositoryException {
+
+	    // check whether node is locked by this session
+	    PathMap.Element element = lockMap.map(
+	    		getPath((SessionImpl) session, node.getId()), true);
+	    if (element == null) {
+	        throw new LockException("Node not locked: " + node);
+	    }
+	    AbstractLockInfo info = (AbstractLockInfo) element.get();
+	    if (info == null) {
+	        throw new LockException("Node not locked: " + node);
+	    }
+	    checkUnlock(info, session);
+    }
+
+    /**
+     * Check whether a session is allowed to unlock a node. May be overridden
+     * by subclasses to allow this to sessions other than the lock holder
+     * itself.
+     * <p/>
+     * Default implementation allows unlocking to the lock holder only.
+     * 
+     * @param info info to check
+     * @param session session
+     * @throws LockException if unlocking is denied
+     * @throws RepositoryException if some other error occurs
+     */
+    protected void checkUnlock(LockInfo info, Session session)
+    		throws LockException, RepositoryException {
+    	
+	    if (!info.isLockHolder(session)) {
+	        throw new LockException("Node not locked by session: " + info.getId());
+	    }
+    }
+    
+    /**
+     * {@inheritDoc}
+     */
+    public void addLockToken(SessionImpl session, String lt) throws LockException, RepositoryException {
-                    if (info.getLockHolder() == null) {
+                	if (info.isLockHolder(session)) {
+                		// nothing to do
+                	} else if (info.getLockHolder() == null) {
-                        if (info instanceof LockInfo) {
-                            session.addListener((LockInfo) info);
+                        if (info instanceof InternalLockInfo) {
+                            session.addListener((InternalLockInfo) info);
-    public void lockTokenRemoved(SessionImpl session, String lt) throws LockException, RepositoryException {
+    public void removeLockToken(SessionImpl session, String lt) 
+    		throws LockException, RepositoryException {
+    	
-                    if (session == info.getLockHolder()) {
+                	if (info.isLockHolder(session)) {
+                	} else if (info.getLockHolder() == null) {
+                		// nothing to do
-        final ArrayList<LockInfo> infos = new ArrayList<LockInfo>();
+        final ArrayList<AbstractLockInfo> infos = new ArrayList<AbstractLockInfo>();
-                LockInfo info = (LockInfo) element.get();
+            	AbstractLockInfo info = (AbstractLockInfo) element.get();
-            LockInfo info = infos.get(i);
+        	AbstractLockInfo info = infos.get(i);
-                if (!info.sessionScoped) {
+                if (!info.isSessionScoped()) {
-    class LockInfo extends AbstractLockInfo implements SessionListener {
+    class InternalLockInfo extends AbstractLockInfo implements SessionListener {
-        public LockInfo(LockToken lockToken, boolean sessionScoped,
-                        boolean deep, String lockOwner) {
+        public InternalLockInfo(LockToken lockToken, boolean sessionScoped,
+                                boolean deep, String lockOwner) {
-        public LockInfo(LockToken lockToken, boolean sessionScoped,
-                        boolean deep, String lockOwner, long timeoutHint) {
+        public InternalLockInfo(LockToken lockToken, boolean sessionScoped,
+                                boolean deep, String lockOwner, long timeoutHint) {
-
+        
-            if (live) {
-                if (sessionScoped) {
+            if (isLive()) {
+                if (isSessionScoped()) {
-                            log.warn("Unable to remove session-scoped lock on node '" + lockToken + "': " + e.getMessage());
+                            log.warn("Unable to remove session-scoped lock on node '" + getLockToken() + "': " + e.getMessage());
-                } else {
-                    if (session == lockHolder) {
-                        session.removeLockToken(lockToken.toString());
-                        lockHolder = null;
-                    }
+                } else if (isLockHolder(session)) {
+                    session.removeLockToken(getLockToken());
+                    setLockHolder(null);
-            LockInfo info = new LockInfo(new LockToken(nodeId), false, isDeep, lockOwner);
+            InternalLockInfo info = new InternalLockInfo(new LockToken(nodeId), false, isDeep, lockOwner);

MOV31 INS31 INS31 INS31 MOV29 MOV83 MOV39 MOV42 MOV44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 MOV44 MOV43 MOV43 MOV8 UPD39 UPD42 INS43 MOV8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 UPD42 UPD42 UPD42 INS43 INS42 UPD42 MOV42 INS42 MOV60 MOV60 INS25 INS65 INS65 INS65 INS65 INS65 MOV43 INS42 UPD42 MOV42 INS25 INS21 INS65 INS65 INS65 INS65 INS65 MOV43 INS42 INS43 INS42 UPD42 MOV42 INS42 INS25 UPD42 UPD42 UPD74 UPD43 INS42 MOV27 INS8 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS38 INS27 INS8 INS32 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS38 MOV8 UPD74 UPD43 UPD42 INS21 INS25 INS32 INS53 MOV42 MOV33 INS53 UPD42 MOV42 INS42 INS42 INS32 INS53 UPD43 INS32 UPD43 UPD42 UPD74 INS43 INS32 MOV27 INS8 MOV42 UPD42 MOV42 INS42 INS14 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS14 UPD42 UPD74 UPD43 INS42 UPD43 UPD42 UPD43 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS32 INS32 INS21 MOV11 INS43 INS27 INS43 INS27 MOV43 INS27 UPD43 UPD42 INS32 INS25 UPD42 UPD43 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS32 UPD42 INS42 INS32 MOV8 UPD43 UPD42 MOV60 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS25 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 INS8 MOV25 INS32 INS25 UPD43 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 INS8 MOV8 UPD42 INS42 INS42 INS42 INS33 INS42 INS42 MOV42 UPD42 MOV42 INS33 UPD43 UPD42 INS42 INS42 INS42 UPD42 UPD43 UPD42 INS43 INS32 INS42 INS42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL32 DEL27 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL40 DEL32 DEL42 DEL40 DEL40 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL9 DEL41 DEL27 DEL42 DEL32 DEL42 DEL27 DEL27 DEL41 DEL42 DEL32 DEL21 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL7 DEL42 DEL42 DEL27 DEL25 DEL8