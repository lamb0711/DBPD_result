JCR-417 (preparation):
- add AbstractLocatorFactory
- add separate loc-factory to simple project => reducing dependency
  to 'jcr' package.

JCR-544
- add separate workspace resource representing the jcr workspace
- move Workspace.restore call to workspace resource.
- consequently RootItemCollection not used any more

minor improvements
- root, workspace resource must not support 'observation' -> moving
  constant to item-resources
- get rid of 'setModificationTime'



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@448257 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.search.SearchResource;
-import org.apache.jackrabbit.webdav.jcr.version.report.NodeTypesReport;
-import org.apache.jackrabbit.webdav.jcr.version.report.RegisteredNamespacesReport;
-import org.apache.jackrabbit.webdav.jcr.version.report.RepositoryDescriptorsReport;
-import org.apache.jackrabbit.webdav.version.report.ReportType;
-import org.apache.jackrabbit.webdav.version.report.SupportedReportSetProperty;
+import org.apache.jackrabbit.webdav.io.OutputContext;
+import org.apache.jackrabbit.webdav.version.DeltaVResource;
-import javax.jcr.Session;
-import java.util.Date;
+import java.util.Date;
+import java.io.IOException;
- * <code>DavResourceIterator</code> containing only <code>RootItemCollection</code>
- * resources, thus revealing the names of the accessable workspaces.
+ * <code>DavResourceIterator</code> containing only workspace resources
+ * resources, thus revealing the names of the accessable JCR workspaces.
-public class RootCollection extends AbstractResource implements DavResource {
+public class RootCollection extends AbstractResource {
-        setModificationTime(new Date().getTime());
-     * Returns a string listing the complieance classes for this resource as it
-     * is required for the DAV response header.
-     *
-     * @return string listing the compliance classes.
-     * @see org.apache.jackrabbit.webdav.DavResource#getComplianceClass()
-     */
-    public String getComplianceClass() {
-        return DavResource.COMPLIANCE_CLASS;
-    }
-
-    /**
+        sb.append(DeltaVResource.METHODS_INCL_MKWORKSPACE);
+        sb.append(SearchResource.METHODS);
+     * Always returns 'now'
+     *
+     * @return
+     */
+    public long getModificationTime() {
+        return new Date().getTime();
+    }
+
+    /**
+     * Sets content lengths to '0' and retrieves the modification time.
+     *
+     * @param outputContext
+     * @throws IOException
+     */
+    public void spool(OutputContext outputContext) throws IOException {
+        outputContext.setContentLength(0);
+        outputContext.setModificationTime(getModificationTime());
+    }
+
+    /**
-     * <code>RootItemCollection</code> resources, revealing
-     * the names of all available workspaces.
+     * workspace resources available.
-                DavResourceLocator childLoc = getLocator().getFactory().createResourceLocator(getLocator().getPrefix(), "/"+wsNames[i], ItemResourceConstants.ROOT_ITEM_PATH);
+                String wspPath = "/"+wsNames[i];
+                DavResourceLocator childLoc = getLocator().getFactory().createResourceLocator(getLocator().getPrefix(), wspPath, wspPath);
-     * @see AbstractResource#initSupportedReports()
-     */
-    protected void initSupportedReports() {
-        supportedReports = new SupportedReportSetProperty(new ReportType[] {
-            ReportType.EXPAND_PROPERTY,
-            NodeTypesReport.NODETYPES_REPORT,
-            RegisteredNamespacesReport.REGISTERED_NAMESPACES_REPORT,
-            RepositoryDescriptorsReport.REPOSITORY_DESCRIPTORS_REPORT
-        });
-    }
-
-    /**
-     * is not member of a workspace resource, the workspace href is calculated
-     * from the workspace name retrieved from the underlying repository session.
+     * is not member of a workspace resource, this method always returns
+     * <code>null</code>.
-     * @return workspace href build from workspace name.
+     * @return <code>null</code>
-        Session session = getRepositorySession();
-        if (session != null) {
-            String workspaceName = session.getWorkspace().getName();
-            DavResourceLocator loc = getLocator().getFactory().createResourceLocator(getLocator().getPrefix(), "/"+workspaceName, ItemResourceConstants.ROOT_ITEM_PATH);
-            return loc.getHref(true);
-        }

MOV26 MOV26 MOV26 MOV31 MOV31 UPD40 UPD40 UPD40 UPD40 INS39 UPD42 UPD83 UPD42 INS44 INS43 INS8 UPD66 UPD66 INS21 INS21 INS65 UPD65 INS65 INS43 INS42 INS42 INS21 MOV41 INS32 INS32 UPD66 MOV32 INS66 INS42 INS42 INS42 INS32 INS32 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS60 MOV43 INS59 INS42 MOV27 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL32 DEL21 DEL66 DEL66 DEL40 DEL42 DEL68 DEL65 DEL42 DEL43 DEL40 DEL42 DEL42 DEL68 DEL42 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL40 DEL40 DEL4 DEL3 DEL14 DEL7 DEL66 DEL40 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL27 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL25 DEL8