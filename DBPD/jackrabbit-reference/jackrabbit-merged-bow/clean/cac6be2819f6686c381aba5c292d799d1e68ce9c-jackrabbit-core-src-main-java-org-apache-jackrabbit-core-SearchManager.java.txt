JCR-2085: test case (TCK) maintenance for JCR 2.0
- more query tests
- storing of JQOM and SQL2 as node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@786480 13f79535-47bb-0310-9956-ffa450edef68

-     * Name of the parameter that indicates the query implementation class.
-     */
-    private static final String PARAM_QUERY_IMPL = "queryClass";
-
-    /**
-     *                  to return <code>Node</code> instances in the result set.
+     *                  to return <code>Node</code> instances in the result
+     *                  set.
+     * @param node      a nt:query node where the query was read from or
+     *                  <code>null</code> if it is not a stored query.
-                             String language)
+                             String language,
+                             Node node)
-        query.init(session, itemMgr, handler, statement, language);
+        query.init(session, itemMgr, handler, statement, language, node);
+     * @param node      a nt:query node where the query was read from or
+     *                  <code>null</code> if it is not a stored query.
-                                                   String langugage)
+                                                   String langugage,
+                                                   Node node)
-        qom.init(session, session.getItemManager(), handler, qomTree, langugage);
+        qom.init(session, session.getItemManager(), handler, qomTree, langugage, node);
-     * Creates a query object from a node that can be executed on the workspace.
-     *
-     * @param session the session of the user executing the query.
-     * @param itemMgr the item manager of the user executing the query. Needed
-     *                to return <code>Node</code> instances in the result set.
-     * @param node a node of type nt:query.
-     * @return a <code>Query</code> instance to execute.
-     * @throws InvalidQueryException if <code>absPath</code> is not a valid
-     *                               persisted query (that is, a node of type nt:query)
-     * @throws RepositoryException   if any other error occurs.
-     */
-    public Query createQuery(SessionImpl session,
-                             ItemManager itemMgr,
-                             Node node)
-            throws InvalidQueryException, RepositoryException {
-        AbstractQueryImpl query = createQueryInstance();
-        query.init(session, itemMgr, handler, node);
-        return query;
-    }
-
-    /**
-        final Set removedNodes = new HashSet();
+        final Set<NodeId> removedNodes = new HashSet<NodeId>();
-        final Map addedNodes = new HashMap();
+        final Map<NodeId, EventImpl> addedNodes = new HashMap<NodeId, EventImpl>();
-        List propEvents = new ArrayList();
+        List<EventImpl> propEvents = new ArrayList<EventImpl>();
-        for (int i = 0; i < propEvents.size(); i++) {
-            EventImpl e = (EventImpl) propEvents.get(i);
+        for (EventImpl e : propEvents) {
-                    EventImpl e = (EventImpl) addedNodes.get(id);
+                    EventImpl e = addedNodes.get(id);

INS44 MOV44 INS65 INS43 INS42 INS65 INS70 UPD66 INS66 INS42 INS66 INS66 INS42 INS42 INS66 INS66 INS74 INS74 INS74 INS44 INS42 MOV8 INS42 INS42 MOV43 INS43 MOV43 INS43 INS43 MOV43 MOV43 MOV43 INS42 INS42 INS74 INS42 INS42 INS74 INS74 MOV43 INS43 MOV43 INS43 INS43 MOV43 MOV43 INS42 INS42 INS42 MOV43 MOV32 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL11