JCR-3364: Moving of nodes requires read access to all parent nodes of the destination node

Use explicit cycle detection to detect the JCR-3291 case without the need for extra transient items

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1535539 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashSet;
+import javax.jcr.InvalidItemStateException;
-     * @param builder builder currently being used
-     * @param state   item to find path of
+     * @param builder  builder currently being used
+     * @param state    item to find path of
+     * @param detector path cycle detector
-    protected void buildPath(PathBuilder builder, ItemState state)
+    protected void buildPath(
+            PathBuilder builder, ItemState state, CycleDetector detector)
+        } else if (detector.checkCycle(parentId)) {
+            throw new InvalidItemStateException(
+                    "Path cycle detected: " + parentId);
-        buildPath(builder, parent);
+        buildPath(builder, parent, detector);
-            buildPath(builder, getItemState(id));
+            buildPath(builder, getItemState(id), new CycleDetector());
+
+    /**
+     * Utility class used to detect path cycles with as little overhead
+     * as possible. The {@link #checkCycle(ItemId)} method is called for
+     * each path element as the
+     * {@link HierarchyManagerImpl#buildPath(PathBuilder, ItemState, CycleDetector)}
+     * method walks up the hierarchy. At first, during the first fifteen
+     * path elements, the detector does nothing in order to avoid
+     * introducing any unnecessary overhead to normal paths that seldom
+     * are deeper than that. After that initial threshold all item
+     * identifiers along the path are tracked, and a cycle is reported
+     * if an identifier is encountered that already occurred along the
+     * same path.
+     */
+    protected static class CycleDetector {
+
+        private int count = 0;
+
+        private Set<ItemId> ids;
+
+        boolean checkCycle(ItemId id) throws InvalidItemStateException {
+            if (count++ >= 15) {
+                if (ids == null) {
+                    ids = new HashSet<ItemId>();
+                } else {
+                    return !ids.add(id);
+                }
+            }
+            return false;
+        }
+
+    }
+

INS26 INS26 INS40 INS40 INS55 INS44 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS65 INS43 INS42 INS65 INS83 INS39 INS59 INS83 INS74 INS59 INS39 INS42 INS44 INS43 INS8 UPD66 UPD66 INS42 INS66 INS42 INS25 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS34 INS43 INS43 INS42 INS43 INS42 INS42 INS25 INS41 INS32 INS8 INS42 INS68 INS68 INS42 INS42 INS42 INS27 INS8 INS9 INS42 INS42 INS42 INS53 INS42 INS69 INS42 INS42 INS69 INS69 INS69 INS37 INS34 INS25 INS14 INS14 INS43 INS43 INS43 INS43 INS42 INS27 INS8 INS8 INS43 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS41 INS42 INS45 INS42 INS42 INS7 INS38 INS42 INS14 INS32 INS74 INS42 INS42 INS42 INS43 INS43 INS42 INS42