JCR-156: Review test cases and cross check with 1.0 specification
- Some test cases might fail because the methods locateChildNodeDef() and locatePropertyDef() return child node definitions or property definitions of node types that contain additional residual definitions. This will cause a different exception to be thrown than expected.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@209048 13f79535-47bb-0310-9956-ffa450edef68

+
+            // node types with more than one residual child node definition
+            // will cause trouble in test cases. the implementation
+            // might pick another definition than the definition returned by
+            // this method, when a child node is set.
+            NodeDefinition[] childDefs = type.getChildNodeDefinitions();
+            int residuals = 0;
+            for (int i = 0; i < childDefs.length; i++) {
+                if (childDefs[i].getName().equals("*")) {
+                    residuals++;
+                }
+            }
+            if (residuals > 1) {
+                // more than one residual, not suitable for tests
+                continue;
+            }
+
-                if (!residual && i == 0) {
+                if (!residual) {
+                // also skip property residual property definition if there
+                // is another residual definition
+                if (residual) {
+                    // check if there is another residual property def
+                    if (getNumResidualPropDefs(type) > 1) {
+                        continue;
+                    }
+                }
+
+                if (!residual) {
+                    // if not looking for a residual property def then there
+                    // must not be any residual definition at all on the node
+                    // type
+                    if (getNumResidualPropDefs(type) > 0) {
+                        continue;
+                    }
+                }
+
+     * Returns the number of residual property definitions of <code>type</code>
+     * including its base types.
+     * @param type the node type
+     * @return the number of residual property definitions.
+     */
+    private static int getNumResidualPropDefs(NodeType type) {
+        PropertyDefinition[] pDefs = type.getPropertyDefinitions();
+        int residuals = 0;
+        for (int j = 0; j < pDefs.length; j++) {
+            PropertyDefinition pDef = pDefs[j];
+            if (pDef.getName().equals("*")) {
+                residuals++;
+            }
+        }
+        return residuals;
+    }
+
+    /**

INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS43 INS42 INS60 INS60 INS24 INS41 INS66 INS66 INS42 INS66 INS66 INS42 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS60 INS60 INS24 INS25 INS43 INS85 INS42 INS32 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS8 INS43 INS85 INS42 INS32 INS42 INS34 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS34 INS18 INS25 INS25 INS42 INS42 INS2 INS32 INS42 INS45 INS21 INS42 INS42 INS42 INS42 INS34 INS32 INS8 MOV38 INS42 INS8 INS38 INS8 INS42 INS42 INS42 INS42 INS37 INS32 INS42 INS45 INS21 INS25 INS42 INS25 INS42 INS2 INS42 INS37 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS32 INS34 INS18 INS32 INS34 INS18 INS42 INS42 INS42 INS42 DEL42 DEL34 DEL27 DEL27