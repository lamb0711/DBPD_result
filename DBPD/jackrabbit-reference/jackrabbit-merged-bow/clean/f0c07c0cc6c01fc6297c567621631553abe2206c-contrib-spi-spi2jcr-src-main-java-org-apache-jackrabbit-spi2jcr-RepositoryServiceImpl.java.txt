- exists must also catch PathNotFoundException
- restore(NodeId, VersionId, boolean) must also cover Node.restore taking a relative path that may point to a non-existing node.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@516352 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.MalformedPathException;
+        } catch (PathNotFoundException e) {
+            return false;
-                Node n = getNode(nodeId, sInfo);
-                Node v = getNode(versionId, sInfo);
-                n.restore(v.getName(), removeExisting);
+                Version v = (Version) getNode(versionId, sInfo);
+                if (exists(sessionInfo, nodeId)) {
+                    Node n = getNode(nodeId, sInfo);
+                    n.restore(v, removeExisting);
+                } else {
+                    try {
+                        // restore with rel-Path part
+                        Node n = null;
+                        Path relPath = null;
+                        Path path = nodeId.getPath();
+                        if (nodeId.getUniqueID() != null) {
+                            n = getNode(idFactory.createNodeId(nodeId.getUniqueID()), sInfo);
+                            relPath = (path.isAbsolute()) ? Path.ROOT.computeRelativePath(nodeId.getPath()) : path;
+                        } else {
+                            int degree = 0;
+                            while (degree < path.getLength()) {
+                                Path ancestorPath = path.getAncestor(degree);
+                                NodeId parentId = idFactory.createNodeId(nodeId.getUniqueID(), ancestorPath);
+                                if (exists(sessionInfo, parentId)) {
+                                    n = getNode(parentId, sInfo);
+                                    relPath = ancestorPath.computeRelativePath(path);
+                                }
+                                degree++;
+                            }
+                        }
+                        if (n == null) {
+                            throw new PathNotFoundException("Path not found " + nodeId);
+                        } else {
+                            n.restore(v, PathFormat.format(relPath, sInfo.getNamespaceResolver()), removeExisting);
+                        }
+                    } catch (MalformedPathException e) {
+                        throw new RepositoryException(e);
+                    } catch (NoPrefixDeclaredException e) {
+                        throw new RepositoryException(e);
+                    }
+                }

INS26 INS40 INS12 INS44 INS8 INS43 INS42 INS41 INS42 INS9 INS8 MOV60 INS25 MOV41 INS43 INS32 INS8 INS8 INS42 INS11 INS42 INS42 INS42 MOV60 INS21 INS54 INS43 MOV32 INS32 INS8 INS12 INS12 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS44 INS8 INS44 INS8 MOV43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS33 INS21 INS21 INS60 INS61 INS42 INS33 INS53 MOV21 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS7 INS7 INS39 INS59 INS27 INS8 INS14 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS16 INS42 INS34 INS42 INS32 INS60 INS60 INS25 INS21 INS43 INS27 MOV42 INS32 INS42 INS42 INS42 INS32 INS42 INS36 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS37 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS7 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL32 DEL8