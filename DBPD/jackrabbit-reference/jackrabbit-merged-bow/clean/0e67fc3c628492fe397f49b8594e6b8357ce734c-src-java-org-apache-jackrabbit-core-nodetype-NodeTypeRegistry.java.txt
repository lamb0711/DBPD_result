fixed issue JCR-36: NodeTypeRegistry.reregister unregisters dependent types
http://issues.apache.org/jira/browse/JCR-36




git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@123983 13f79535-47bb-0310-9956-ffa450edef68

-                EffectiveNodeType est = buildEffectiveNodeType(supertypes);
+                EffectiveNodeType est = getEffectiveNodeType(supertypes);
+     *
+     * @throws NoSuchNodeTypeException
+        // 1. make sure that the specified node type is registered
+        if (!registeredNTDefs.containsKey(ntName)) {
+            throw new NoSuchNodeTypeException(ntName.toString());
+        }
+
+        // 2. check if effective node type has already been built
-        } else {
-            throw new NoSuchNodeTypeException(ntName.toString());
+        }
+
+        // 3. build effective node type
+        try {
+            EffectiveNodeType ent = EffectiveNodeType.create(this, ntName);
+            // store new effective node type
+            entCache.put(ent);
+            return ent;
+        } catch (NodeTypeConflictException ntce) {
+            // should never get here as all registered node types have to be valid!
+            String msg = "internal error: encountered invalid registered node type " + ntName;
+            log.error(msg, ntce);
+            throw new NoSuchNodeTypeException(msg, ntce);
+     *
+     * @throws NodeTypeConflictException
+     * @throws NoSuchNodeTypeException
-    public synchronized EffectiveNodeType buildEffectiveNodeType(QName[] ntNames)
+    public synchronized EffectiveNodeType getEffectiveNodeType(QName[] ntNames)
-        // 2. check if aggregate has already been build
+        // 2. check if aggregate has already been built
-            // walk list of existing aggregates sorted by 'weight' of
-            // aggregate (i.e. the cost of building it)
+            /**
+             * walk list of existing aggregates sorted by 'weight' of
+             * aggregate (i.e. the cost of building it)
+             */
-                // check if the existing aggregate is a 'subset' of the one
-                // we're looking for
+                /**
+                 * check if the existing aggregate is a 'subset' of the one
+                 * we're looking for
+                 */
-                // no matching sub-aggregates found:
-                // build aggregate of remaining node types through iteration
+                /**
+                 * no matching sub-aggregates found:
+                 * build aggregate of remaining node types through iteration
+                 */
-            // the definition has been modified, there's nothing to do here...
+            // the definition has not been modified, there's nothing to do here...

UPD42 INS65 INS25 INS54 INS65 INS65 INS42 INS38 MOV8 INS8 INS12 INS42 INS42 INS32 INS60 INS21 INS41 INS44 INS8 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS43 INS42 INS60 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS52 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS42 UPD42