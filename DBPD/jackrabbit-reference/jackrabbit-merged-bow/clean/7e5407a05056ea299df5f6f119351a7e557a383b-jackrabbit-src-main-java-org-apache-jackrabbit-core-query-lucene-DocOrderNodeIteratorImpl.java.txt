[JCR-317] replace UUID strings by UUID classes in NodeId, etc..

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378221 13f79535-47bb-0310-9956-ffa450edef68

-    /** The UUIDs of the nodes in the result set */
-    protected String[] uuids;
+    /** The DIs of the nodes in the result set */
+    protected NodeId[] ids;
-     * @param uuids the uuids of the nodes.
+     * @param ids the uuids of the nodes.
-    DocOrderNodeIteratorImpl(final ItemManager itemMgr, String[] uuids, Float[] scores) {
+    DocOrderNodeIteratorImpl(final ItemManager itemMgr, NodeId[] ids, Float[] scores) {
-        this.uuids = uuids;
+        this.ids = ids;
-            return uuids.length;
+            return ids.length;
-        ScoreNode[] nodes = new ScoreNode[uuids.length];
-        for (int i = 0; i < uuids.length; i++) {
-            nodes[i] = new ScoreNode(uuids[i], scores[i]);
+        ScoreNode[] nodes = new ScoreNode[ids.length];
+        for (int i = 0; i < ids.length; i++) {
+            nodes[i] = new ScoreNode(ids[i], scores[i]);
-        final List invalidUUIDs = new ArrayList(2);
+        final List invalidIDs = new ArrayList(2);
-            if (invalidUUIDs.size() > 0) {
+            if (invalidIDs.size() > 0) {
-                    if (!invalidUUIDs.contains(nodes[i].uuid)) {
+                    if (!invalidIDs.contains(nodes[i].id)) {
-                invalidUUIDs.clear();
+                invalidIDs.clear();
-                                node1 = (NodeImpl) itemMgr.getItem(new NodeId(n1.uuid));
+                                node1 = (NodeImpl) itemMgr.getItem(n1.id);
-                                log.warn("Node " + n1.uuid + " does not exist anymore: " + e);
+                                log.warn("Node " + n1.id + " does not exist anymore: " + e);
-                                invalidUUIDs.add(n1.uuid);
+                                invalidIDs.add(n1.id);
-                                node2 = (NodeImpl) itemMgr.getItem(new NodeId(n2.uuid));
+                                node2 = (NodeImpl) itemMgr.getItem(n2.id);
-                                log.warn("Node " + n2.uuid + " does not exist anymore: " + e);
+                                log.warn("Node " + n2.id + " does not exist anymore: " + e);
-                                invalidUUIDs.add(n2.uuid);
+                                invalidIDs.add(n2.id);
-                        invalidUUIDs.add(n1.uuid);
-                        invalidUUIDs.add(n2.uuid);
+                        invalidIDs.add(n1.id);
+                        invalidIDs.add(n2.id);
-        } while (invalidUUIDs.size() > 0);
+        } while (invalidIDs.size() > 0);
-        if (uuids.length != nodes.length) {
-            uuids = new String[nodes.length];
+        if (ids.length != nodes.length) {
+            ids = new NodeId[nodes.length];
-            uuids[i] = nodes[i].uuid;
+            ids[i] = nodes[i].id;
-            log.debug("" + uuids.length + " node(s) ordered in " + (System.currentTimeMillis() - time) + " ms");
+            log.debug("" + ids.length + " node(s) ordered in " + (System.currentTimeMillis() - time) + " ms");
-        orderedNodes = new NodeIteratorImpl(itemMgr, uuids, scores);
+        orderedNodes = new NodeIteratorImpl(itemMgr, ids, scores);
-        final String uuid;
+        final NodeId id;
-        ScoreNode(String uuid, Float score) {
-            this.uuid = uuid;
+        ScoreNode(NodeId id, Float score) {
+            this.id = id;

UPD5 UPD43 UPD42 UPD5 UPD42 UPD43 UPD66 UPD42 UPD42 MOV43 UPD42 UPD42 UPD43 UPD42 UPD42 MOV42 UPD42 UPD40 UPD42 UPD40 UPD42 UPD42 UPD40 UPD40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD5 UPD42 UPD42 UPD40 UPD42 UPD42 MOV43 UPD42 UPD42 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 INS40 UPD40 INS40 UPD40 DEL40 DEL14 DEL40 DEL14 DEL42 DEL43