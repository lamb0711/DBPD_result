fixed bug JCR-124: Session.import() fails to resolve proper property definition in some cases


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@178206 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.value.InternalValue;
+import org.apache.jackrabbit.core.value.InternalValue;
-                                + name + "' in node type '" + ntName + "'";
+                                    + name + "' in node type '" + ntName + "'";
-                                + name + "' in node type '" + ntName + "'";
+                                    + name + "' in node type '" + ntName + "'";
+        if (namedItemDefs.size() == 0 && unnamedItemDefs.size() == 0) {
+            return ItemDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return ItemDef.EMPTY_ARRAY;
+        }
+        if (namedItemDefs.size() == 0) {
+            return ItemDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return ItemDef.EMPTY_ARRAY;
+        }
+        if (unnamedItemDefs.size() == 0) {
+            return ItemDef.EMPTY_ARRAY;
+        }
-        if (defs == null) {
-            return null;
+        if (defs == null || defs.size() == 0) {
+            return ItemDef.EMPTY_ARRAY;
+        if (namedItemDefs.size() == 0 && unnamedItemDefs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        if (namedItemDefs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        return (NodeDef[]) defs.toArray(new NodeDef[defs.size()]);
+    }
+
+    public NodeDef[] getNamedNodeDefs(QName name) {
+        List list = (List) namedItemDefs.get(name);
+        if (list == null || list.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        ArrayList defs = new ArrayList(list.size());
+        Iterator iter = list.iterator();
+        while (iter.hasNext()) {
+            ItemDef def = (ItemDef) iter.next();
+            if (def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        if (defs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        if (unnamedItemDefs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        if (namedItemDefs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        if (namedItemDefs.size() == 0 && unnamedItemDefs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (namedItemDefs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        return (PropDef[]) defs.toArray(new PropDef[defs.size()]);
+    }
+
+    public PropDef[] getNamedPropDefs(QName name) {
+        List list = (List) namedItemDefs.get(name);
+        if (list == null || list.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        ArrayList defs = new ArrayList(list.size());
+        Iterator iter = list.iterator();
+        while (iter.hasNext()) {
+            ItemDef def = (ItemDef) iter.next();
+            if (!def.definesNode()) {
+                defs.add(def);
+            }
+        }
+        if (defs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (unnamedItemDefs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (namedItemDefs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (namedItemDefs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return PropDef.EMPTY_ARRAY;
+        }
+        if (namedItemDefs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
+        if (defs.size() == 0) {
+            return NodeDef.EMPTY_ARRAY;
+        }
-     * specified name, type and multiValued characteristic.
+     * specified name, type and multiValued characteristic. If there more than
+     * one applicable definitions then the following rules are applied:
+     * <ul>
+     * <li>named definitions are preferred to residual definitions</li>
+     * <li>definitions with specific required type are preferred to definitions
+     * with required type UNDEFINED</li>
+     * </ul>
-        ItemDef[] defs = getNamedItemDefs(name);
-        if (defs != null) {
-            for (int i = 0; i < defs.length; i++) {
-                ItemDef def = defs[i];
-                if (!def.definesNode()) {
-                    PropDef pd = (PropDef) def;
-                    int reqType = pd.getRequiredType();
-                    // property definition with that name exists
-                    // match type
-                    if (reqType == PropertyType.UNDEFINED
-                            || type == PropertyType.UNDEFINED
-                            || reqType == type) {
-                        // match multiValued flag
-                        if (multiValued == pd.isMultiple()) {
-                            // found match
+        PropDef match =
+                getMatchingPropDef(getNamedPropDefs(name), type, multiValued);
+        if (match != null) {
+            return match;
+        }
+
+        // no item with that name defined;
+        // try residual property definitions
+        match = getMatchingPropDef(getUnnamedPropDefs(), type, multiValued);
+        if (match != null) {
+            return match;
+        }
+
+        // no applicable definition found
+        throw new ConstraintViolationException("no matching property definition found for " + name);
+    }
+
+    /**
+     * Returns the applicable property definition for a property with the
+     * specified name and type. The multiValued flag is not taken into account
+     * in the selection algorithm. Other than
+     * <code>{@link #getApplicablePropertyDef(QName, int, boolean)}</code>
+     * this method does not take the multiValued flag into account in the
+     * selection algorithm. If there more than one applicable definitions then
+     * the following rules are applied:
+     * <ul>
+     * <li>named definitions are preferred to residual definitions</li>
+     * <li>definitions with specific required type are preferred to definitions
+     * with required type UNDEFINED</li>
+     * <li>single-value definitions are preferred to multiple-value definitions</li>
+     * </ul>
+     *
+     * @param name
+     * @param type
+     * @return
+     * @throws ConstraintViolationException if no applicable property definition
+     *                                      could be found
+     */
+    public PropDef getApplicablePropertyDef(QName name, int type)
+            throws ConstraintViolationException {
+        // try named property definitions first
+        PropDef match = getMatchingPropDef(getNamedPropDefs(name), type);
+        if (match != null) {
+            return match;
+        }
+
+        // no item with that name defined;
+        // try residual property definitions
+        match = getMatchingPropDef(getUnnamedPropDefs(), type);
+        if (match != null) {
+            return match;
+        }
+
+        // no applicable definition found
+        throw new ConstraintViolationException("no matching property definition found for " + name);
+    }
+
+    private PropDef getMatchingPropDef(PropDef[] defs, int type) {
+        PropDef match = null;
+        for (int i = 0; i < defs.length; i++) {
+            ItemDef def = defs[i];
+            if (!def.definesNode()) {
+                PropDef pd = (PropDef) def;
+                int reqType = pd.getRequiredType();
+                // match type
+                if (reqType == PropertyType.UNDEFINED
+                        || type == PropertyType.UNDEFINED
+                        || reqType == type) {
+                    if (match == null) {
+                        match = pd;
+                    } else {
+                        // check if this definition is a better match than
+                        // the one we've already got
+                        if (match.getRequiredType() != pd.getRequiredType()) {
+                            if (match.getRequiredType() == PropertyType.UNDEFINED) {
+                                // found better match
+                                match = pd;
+                            }
+                        } else {
+                            if (match.isMultiple() && !pd.isMultiple()) {
+                                // found better match
+                                match = pd;
+                            }
+                        }
+                    }
+                    if (match.getRequiredType() != PropertyType.UNDEFINED
+                            && !match.isMultiple()) {
+                        // found best possible match, get outta here
+                        return match;
+                    }
+                }
+            }
+        }
+        return match;
+    }
+
+    private PropDef getMatchingPropDef(PropDef[] defs, int type,
+                                       boolean multiValued) {
+        PropDef match = null;
+        for (int i = 0; i < defs.length; i++) {
+            ItemDef def = defs[i];
+            if (!def.definesNode()) {
+                PropDef pd = (PropDef) def;
+                int reqType = pd.getRequiredType();
+                // match type
+                if (reqType == PropertyType.UNDEFINED
+                        || type == PropertyType.UNDEFINED
+                        || reqType == type) {
+                    // match multiValued flag
+                    if (multiValued == pd.isMultiple()) {
+                        // found match
+                        if (pd.getRequiredType() != PropertyType.UNDEFINED) {
+                            // found best possible match, get outta here
+                        } else {
+                            if (match == null) {
+                                match = pd;
+                            }
-
-        // no item with that name defined;
-        // try residual property definitions
-        PropDef[] pda = getUnnamedPropDefs();
-        for (int i = 0; i < pda.length; i++) {
-            PropDef pd = pda[i];
-            int reqType = pd.getRequiredType();
-            // match type
-            if (reqType == PropertyType.UNDEFINED
-                    || type == PropertyType.UNDEFINED
-                    || reqType == type) {
-                // match multiValued flag
-                if (multiValued == pd.isMultiple()) {
-                    // found match
-                    return pd;
-                }
-            }
-        }
-
-        // no applicable definition found
-        throw new ConstraintViolationException("no matching property definition found for " + name);
+        return match;

MOV26 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS5 MOV83 MOV5 INS42 INS44 INS8 MOV5 INS83 MOV5 UPD42 MOV42 INS44 MOV8 MOV83 INS5 INS42 INS8 MOV29 INS83 MOV43 MOV42 MOV44 MOV44 MOV44 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS41 INS43 INS85 INS25 INS25 MOV41 INS43 INS42 INS60 INS25 INS60 INS60 INS61 INS25 MOV41 INS25 INS60 INS60 INS25 INS25 INS25 INS25 INS61 INS25 INS41 INS25 INS25 MOV41 INS43 INS42 INS60 INS25 INS25 MOV41 INS43 INS85 INS25 MOV60 MOV60 MOV61 INS25 MOV41 INS25 INS25 INS25 INS25 INS25 INS25 INS60 INS25 INS21 INS25 MOV53 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS42 MOV60 INS25 INS21 INS25 INS53 INS42 MOV5 INS42 INS39 INS42 INS60 MOV24 INS41 INS42 INS5 INS42 INS39 INS42 INS39 INS42 MOV60 MOV24 INS41 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS27 INS8 INS27 INS8 INS11 INS42 INS27 INS8 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS27 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS27 INS8 INS32 INS8 INS27 INS8 INS11 INS27 INS8 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 MOV43 INS59 INS27 INS8 INS7 INS27 INS8 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS66 INS66 INS42 INS43 MOV27 INS8 INS7 INS27 INS8 INS14 INS43 INS59 MOV58 MOV37 INS8 INS42 INS43 INS85 INS43 MOV58 MOV37 INS42 INS27 INS27 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 MOV27 INS27 INS27 INS27 INS41 INS32 INS34 INS41 INS5 INS32 INS32 INS34 INS41 INS32 INS34 INS41 INS42 INS42 INS11 INS27 INS27 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS25 INS32 INS34 INS41 INS32 INS34 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS27 INS27 INS41 INS42 INS42 INS60 INS25 INS32 INS34 INS41 INS5 INS32 INS32 INS34 INS41 INS32 INS34 INS41 INS42 INS42 INS11 INS27 INS27 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS32 INS34 INS41 INS42 INS32 INS42 INS33 INS41 INS42 INS32 INS42 INS33 INS41 INS68 UPD42 MOV42 UPD42 INS32 UPD42 INS41 INS42 INS32 INS42 INS33 INS41 INS43 INS27 INS42 INS42 INS33 MOV60 INS25 INS42 INS42 UPD42 INS33 UPD40 INS25 INS32 INS34 INS32 INS34 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS34 INS40 INS32 INS34 INS32 INS34 INS40 INS42 INS42 INS40 INS43 INS85 INS42 INS42 INS3 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS32 INS42 INS33 INS32 INS34 INS40 INS43 INS32 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS34 INS32 INS34 INS40 INS43 INS59 INS38 INS8 INS42 INS42 INS40 INS43 INS85 INS42 INS42 INS3 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS32 INS42 INS33 INS32 INS34 INS40 UPD42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS69 INS69 INS69 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 MOV38 INS8 INS43 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS11 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS21 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS43 INS39 INS39 UPD42 MOV42 MOV42 INS42 MOV60 MOV60 INS25 INS42 UPD42 INS32 INS60 MOV60 MOV25 INS43 INS85 INS42 INS42 INS43 INS32 INS32 INS43 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS42 MOV27 INS8 UPD42 INS42 INS42 INS43 INS59 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV25 INS25 INS42 INS42 INS11 INS27 INS8 INS27 INS8 INS43 INS42 INS8 INS42 INS33 INS21 INS27 INS38 INS41 INS42 INS25 INS7 INS27 INS8 INS32 INS40 INS32 INS42 INS27 MOV8 INS8 INS42 INS42 INS32 INS32 INS25 INS42 INS42 INS42 INS42 INS32 INS40 INS25 INS42 INS42 INS42 INS42 INS27 INS8 UPD27 INS42 INS42 INS27 INS8 INS32 INS40 INS21 INS32 INS38 INS21 INS42 INS33 INS21 INS42 INS42 INS7 INS42 INS42 INS32 INS7 INS7 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 INS42 DEL33 DEL31 DEL43 DEL85 DEL5 DEL32 DEL42 DEL32 DEL42 DEL41 DEL8 DEL8 DEL25 DEL8 DEL31