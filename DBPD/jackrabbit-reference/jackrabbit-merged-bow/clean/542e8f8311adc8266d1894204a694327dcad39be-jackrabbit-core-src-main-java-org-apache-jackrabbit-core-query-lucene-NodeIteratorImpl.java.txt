JCR-2010: Retrieve row path via hierarchy manager instead of node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@758193 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.NodeIterator;
+
-class NodeIteratorImpl implements ScoreNodeIterator {
+class NodeIteratorImpl implements NodeIterator {
-    protected final ScoreNode[][] scoreNodes;
+    protected final ScoreNodeIterator scoreNodes;
-    /** Current position in the UUID array */
-    protected int pos = -1;
-
+     * Whether this iterator had been initialized.
+     */
+    private boolean initialized;
+
+    /**
-     * @param scoreNodes    the node ids of the matching nodes.
+     * @param scoreNodes    iterator over score nodes.
-                     ScoreNode[][] scoreNodes,
+                     ScoreNodeIterator scoreNodes,
-        fetchNext();
-        return nextNodeImpl();
-    }
-
-    /**
-     * Returns the next <code>Node</code> in the result set.
-     * @return the next <code>Node</code> in the result set.
-     * @throws NoSuchElementException if iteration has no more
-     *   <code>Node</code>s.
-     */
-    public Object next() throws NoSuchElementException {
-        return nextNode();
-    }
-
-    /**
-     * Returns the next <code>Node</code> in the result set.
-     *
-     * @return the next <code>Node</code> in the result set.
-     * @throws NoSuchElementException if iteration has no more <code>Node</code>s.
-     */
-    public NodeImpl nextNodeImpl() throws NoSuchElementException {
+        initialize();
+     * Returns the next <code>Node</code> in the result set.
+     * @return the next <code>Node</code> in the result set.
+     * @throws NoSuchElementException if iteration has no more
+     *   <code>Node</code>s.
+     */
+    public Object next() throws NoSuchElementException {
+        initialize();
+        return nextNode();
+    }
+
+    /**
-        if (skipNum < 0) {
-            throw new IllegalArgumentException("skipNum must not be negative");
-        }
-        if ((pos + skipNum) > scoreNodes.length) {
-            throw new NoSuchElementException();
-        }
-        if (skipNum == 0) {
-            // do nothing
-        } else {
-            pos += skipNum - 1;
+        initialize();
+        if (skipNum > 0) {
+            scoreNodes.skip(skipNum - 1);
-        return scoreNodes.length - invalid;
+        long size = scoreNodes.getSize();
+        if (size == -1) {
+            return size;
+        } else {
+            return size - invalid;
+        }
-        return pos - invalid;
+        initialize();
+        long position = scoreNodes.getPosition() - invalid;
+        // scoreNode.getPosition() is one ahead
+        // if there is a prefetched node
+        if (next != null) {
+            position--;
+        }
+        return position;
+        initialize();
-     * Returns the score of the node returned by {@link #nextNode()}. In other
-     * words, this method returns the score value of the next <code>Node</code>.
-     * @return the score of the node returned by {@link #nextNode()}.
-     * @throws NoSuchElementException if there is no next node.
-     */
-    public float getScore() throws NoSuchElementException {
-        if (!hasNext()) {
-            throw new NoSuchElementException();
-        }
-        return scoreNodes[pos][selectorIndex].getScore();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public ScoreNode[] getScoreNodes() {
-        return scoreNodes[pos];
-    }
-
-    /**
-        while (next == null && (pos + 1) < scoreNodes.length) {
+        while (next == null && scoreNodes.hasNext()) {
+            ScoreNode[] sn = scoreNodes.nextScoreNodes();
-                next = (NodeImpl) itemMgr.getItem(scoreNodes[pos + 1][selectorIndex].getNodeId());
+                next = (NodeImpl) itemMgr.getItem(sn[selectorIndex].getNodeId());
-                        + scoreNodes[pos + 1][selectorIndex].getNodeId() + ": " + e.toString());
+                        + sn[selectorIndex].getNodeId() + ": " + e.toString());
-                pos++;
-        pos++;
+    }
+
+    protected void initialize() {
+        if (!initialized) {
+            fetchNext();
+            initialized = true;
+        }

INS26 MOV23 MOV31 INS40 INS43 INS31 INS31 INS31 INS31 INS42 MOV43 UPD83 UPD39 MOV29 MOV43 UPD42 INS8 MOV29 MOV83 INS39 UPD42 MOV42 INS8 MOV29 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 MOV29 MOV83 MOV39 MOV42 INS8 INS83 INS39 INS42 INS8 UPD42 INS43 INS21 INS21 INS21 MOV25 INS60 INS25 INS21 INS60 INS25 MOV41 INS21 MOV21 MOV61 INS25 UPD66 UPD66 UPD42 MOV42 INS32 INS32 INS32 UPD27 INS39 INS59 INS27 INS8 INS8 INS32 INS39 INS59 INS27 INS8 INS42 INS32 INS38 INS8 INS42 INS42 INS42 INS42 INS32 INS42 MOV38 MOV41 MOV41 UPD42 MOV42 INS42 INS27 INS42 INS33 INS21 INS42 INS32 INS60 INS42 MOV21 MOV21 INS32 UPD42 MOV42 INS42 INS42 INS32 INS42 INS37 INS42 INS42 MOV5 INS59 INS7 INS42 INS42 MOV27 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL43 DEL85 DEL85 DEL5 DEL43 DEL85 DEL85 DEL5 DEL42 DEL43 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL8 DEL42 DEL7 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL27 DEL36 DEL40 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL8 DEL40 DEL42 DEL27 DEL42 DEL42 DEL2 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL34 DEL27 DEL36 DEL40 DEL27 DEL42 DEL34 DEL27 DEL2 DEL42 DEL34 DEL27 DEL2 DEL42 DEL37 DEL21 DEL42 DEL37 DEL66 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL42 DEL68 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL32 DEL38 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL2 DEL42 DEL32 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL8 DEL31 DEL8 DEL31