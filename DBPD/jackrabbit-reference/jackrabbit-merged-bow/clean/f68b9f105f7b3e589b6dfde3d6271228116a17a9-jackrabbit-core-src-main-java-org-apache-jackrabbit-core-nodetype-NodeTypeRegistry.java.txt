JCR-2066 NodeTypeRegistry could auto-subtype from nt:base


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@786319 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import java.util.TreeSet;
+        checkNtBaseSubtyping(ntd, registeredNTDefs);
+        checkNtBaseSubtyping(ntd, registeredNTDefs);
-        // create working copies of current ent & ntd caches:
-        // cache of pre-built aggregations of node types
-        EffectiveNodeTypeCache tmpENTCache = (EffectiveNodeTypeCache) entCache.clone();
+        // check if all node type defs have proper nt:base subtyping
+        for (NodeTypeDef ntd : ntDefs) {
+            checkNtBaseSubtyping(ntd, tmpNTDefCache);
+        }
+
+        // create working copies of current ent & ntd caches:
+        // cache of pre-built aggregations of node types
+        EffectiveNodeTypeCache tmpENTCache = (EffectiveNodeTypeCache) entCache.clone();
+     * Checks if the given node type def has the correct supertypes in respect
+     * to nt:base. all mixin nodetypes must not have a nt:base, the primary
+     * ones only if they don't inherit it from another supertype.
+     *
+     * @param ntd the node type def to check
+     * @param ntdCache cache for lookup
+     * @return <code>true</code> if the ntd was modified
+     */
+    private static boolean checkNtBaseSubtyping(NodeTypeDef ntd, Map<Name, NodeTypeDef> ntdCache) {
+        if (NameConstants.NT_BASE.equals(ntd.getName())) {
+            return false;
+        }
+        Set<Name> supertypes = new TreeSet<Name>(Arrays.asList(ntd.getSupertypes()));
+        if (supertypes.isEmpty()) {
+            return false;
+        }
+        boolean modified;
+        if (ntd.isMixin()) {
+            // if mixin, remove possible nt:base supertype
+            modified = supertypes.remove(NameConstants.NT_BASE);
+        } else {
+            // check if all supertypes (except nt:base) are mixins
+            boolean allMixins = true;
+            for (Name name: supertypes) {
+                if (!name.equals(NameConstants.NT_BASE)) {
+                    NodeTypeDef def = ntdCache.get(name);
+                    if (def != null && !def.isMixin()) {
+                        allMixins = false;
+                        break;
+                    }
+                }
+            }
+            if (allMixins) {
+                // ntd is a primary node type and has only mixins as supertypes,
+                // so it needs a nt:base
+                modified = supertypes.add(NameConstants.NT_BASE);
+            } else {
+                // ntd is a primary node type and at least one of the supertypes
+                // is too, so ensure that no nt:base is added. note that the
+                // trivial case, where there would be no supertype left is handled
+                // in the NodeTypeDef directly
+                modified = supertypes.remove(NameConstants.NT_BASE);
+            }
+        }
+        if (modified) {
+            ntd.setSupertypes(supertypes.toArray(new Name[supertypes.size()]));
+        }
+        return modified;
+    }
+
+    /**
-                // make sure that all primary types except nt:base extend from nt:base
-                if (!ntd.isMixin() && !NameConstants.NT_BASE.equals(ntd.getName())
-                        && !est.includesNodeType(NameConstants.NT_BASE)) {
-                    // auto-subtype from nt:base
-                    Name[] s = new Name[supertypes.length + 1];
-                    System.arraycopy(supertypes, 0 ,s, 1, supertypes.length);
-                    s[0] = NameConstants.NT_BASE;
-                    supertypes = s;
-                    ntd.setSupertypes(s);
-                }
+                    // skip nt:base required types
+                    if (NameConstants.NT_BASE.equals(rpt)) {
+                        continue;
+                    }

INS26 INS26 INS40 INS40 INS31 MOV60 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS21 INS21 INS70 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS25 INS60 INS25 INS60 INS25 INS25 INS41 INS32 INS32 INS44 INS42 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS43 INS43 MOV32 INS8 INS74 INS59 INS32 INS8 INS39 INS59 MOV32 INS8 INS8 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS41 INS43 INS43 INS42 INS14 INS42 INS42 INS41 INS42 INS21 INS60 INS70 INS25 INS21 INS42 INS32 INS9 INS42 INS42 INS74 INS32 INS9 INS7 INS39 INS59 INS44 INS42 INS8 INS42 INS8 INS8 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS9 INS43 INS42 INS25 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS38 INS8 INS7 INS7 INS42 INS42 INS3 INS32 INS60 INS25 INS42 INS32 INS42 INS32 MOV5 INS32 INS25 INS42 INS42 INS40 INS43 INS59 INS27 INS8 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS32 INS8 INS42 INS42 INS32 INS27 INS38 INS21 INS10 INS40 INS42 INS42 INS18 INS42 INS42 INS42 INS42 INS33 INS32 INS7 INS42 INS42 INS42 INS9 DEL38 DEL38 DEL42 DEL42 DEL40 DEL32 DEL38 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL34 DEL27 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL42 DEL34 DEL2 DEL40 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25