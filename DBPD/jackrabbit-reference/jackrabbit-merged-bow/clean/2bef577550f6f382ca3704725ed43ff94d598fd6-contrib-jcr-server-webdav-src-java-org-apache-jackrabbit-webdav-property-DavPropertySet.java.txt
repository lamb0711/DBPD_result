JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Namespace;
-import org.apache.jackrabbit.webdav.DavConstants;
+import org.apache.jackrabbit.webdav.xml.Namespace;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
-public class DavPropertySet {
+public class DavPropertySet extends PropContainer {
-    private final HashMap map = new HashMap();
+    private final Map map = new HashMap();
-     * Checks if this set contains the property with the specified name.
-     *
-     * @param name The name of the property
-     *
-     * @return <code>true</code> if this set contains the property;
-     *         <code>false</code> otherwise.
-     */
-    public boolean contains(DavPropertyName name) {
-        return map.containsKey(name);
-    }
-
-    /**
-     * Checks if this set contains the property with the specified name and the
-     * default WebDAV {@link org.apache.jackrabbit.webdav.DavConstants#NAMESPACE namespace}.
-     *
-     * @param name The name of the property
-     *
-     * @return <code>true</code> if this set contains the property;
-     *         <code>false</code> otherwise.
-     */
-    public boolean contains(String name) {
-        return contains(DavPropertyName.create(name, DavConstants.NAMESPACE));
-    }
-
-    /**
-     * Return true if this property set is empty.
-     *
-     * @return true if the internal map contains no elements.
-     */
-    public boolean isEmpty() {
-        return map.isEmpty();
-    }
-
-    /**
+    //------------------------------------------------------< PropContainer >---
+    /**
+     * Checks if this set contains the property with the specified name.
+     *
+     * @param name The name of the property
+     * @return <code>true</code> if this set contains the property;
+     *         <code>false</code> otherwise.
+     * @see PropContainer#contains(DavPropertyName)
+     */
+    public boolean contains(DavPropertyName name) {
+        return map.containsKey(name);
+    }
+
+    /**
+     * @param contentEntry NOTE, that the given object must be an instance of
+     * <code>DavProperty</code> in order to be successfully added to this set.
+     * @return true if the specified object is an instance of <code>DavProperty</code>
+     * and false otherwise.
+     * @see PropContainer#addContent(Object)
+     */
+    public boolean addContent(Object contentEntry) {
+        if (contentEntry instanceof DavProperty) {
+            add((DavProperty)contentEntry);
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * @see PropContainer#isEmpty()
+     */
+    public boolean isEmpty() {
+        return map.isEmpty();
+    }
+
+    /**
+     * @see PropContainer#getContentSize()
+     */
+    public int getContentSize() {
+        return map.size();
+    }
+
+    /**
+     * @see PropContainer#getContent()
+     */
+    public Collection getContent() {
+        return map.values();
+    }
+

INS26 INS26 INS26 INS26 MOV31 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS43 INS31 INS31 INS42 UPD43 UPD42 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 UPD42 INS65 INS65 UPD43 UPD42 INS25 INS41 UPD65 INS65 INS41 INS65 INS42 INS41 INS68 UPD42 UPD66 INS66 UPD66 UPD66 INS68 UPD42 INS62 INS8 INS9 INS68 INS68 INS32 INS68 INS32 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS43 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS9 INS42 INS42 UPD42 MOV42 INS11 INS43 INS42 INS42 DEL66 DEL66 DEL40 DEL42 DEL67 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL41 DEL66 DEL65 DEL66