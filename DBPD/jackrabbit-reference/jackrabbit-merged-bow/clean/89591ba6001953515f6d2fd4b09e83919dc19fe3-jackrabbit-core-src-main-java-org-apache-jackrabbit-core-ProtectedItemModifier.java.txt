JCR-1589: JSR 283 Retention & Hold Management (work in progress)
JCR-1957: Move common validation checks to a single place

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@738422 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.retention.RetentionManagerImpl;
-public abstract class SecurityItemModifier {
+public abstract class ProtectedItemModifier {
-    private final boolean checkAcPermission;
+    private static final int DEFAULT_PERM_CHECK = -1;
+    private final int permission;
-    protected SecurityItemModifier(boolean checkAcPermission) {
-        Class cl = getClass();
-        if (!(cl.equals(UserManagerImpl.class) ||
-              cl.equals(ACLEditor.class) ||
-              cl.equals(org.apache.jackrabbit.core.security.authorization.principalbased.ACLEditor.class))) {
-            throw new IllegalArgumentException("Only UserManagerImpl and ACLEditor may extend from the SecurityItemModifier");
-        }
-        this.checkAcPermission = checkAcPermission;
+    protected ProtectedItemModifier() {
+        this(DEFAULT_PERM_CHECK);
-    protected NodeImpl addSecurityNode(NodeImpl parentImpl, Name name, Name ntName) throws RepositoryException {
+    protected ProtectedItemModifier(int permission) {
+        Class cl = getClass();
+        if (!(cl.equals(UserManagerImpl.class) ||
+              cl.equals(RetentionManagerImpl.class) ||
+              cl.equals(ACLEditor.class) ||
+              cl.equals(org.apache.jackrabbit.core.security.authorization.principalbased.ACLEditor.class))) {
+            throw new IllegalArgumentException("Only UserManagerImpl, RetentionManagerImpl and ACLEditor may extend from the ProtectedItemModifier");
+        }
+        this.permission = permission;
+    }
+
+    protected NodeImpl addNode(NodeImpl parentImpl, Name name, Name ntName) throws RepositoryException {
-    protected Property setSecurityProperty(NodeImpl parentImpl, Name name, Value value) throws RepositoryException {
-        if (!parentImpl.isNew()) {
+    protected Property setProperty(NodeImpl parentImpl, Name name, Value value) throws RepositoryException {
+        return setProperty(parentImpl, name, value, false);
+    }
+
+    protected Property setProperty(NodeImpl parentImpl, Name name, Value value, boolean ignorePermissions) throws RepositoryException {
+        if (!ignorePermissions) {
-    protected Property setSecurityProperty(NodeImpl parentImpl, Name name, Value[] values) throws RepositoryException {
+    protected Property setProperty(NodeImpl parentImpl, Name name, Value[] values) throws RepositoryException {
-    protected void removeSecurityItem(ItemImpl itemImpl) throws RepositoryException {
+    protected void removeItem(ItemImpl itemImpl) throws RepositoryException {
-        SessionImpl sImpl = (SessionImpl) item.getSession();
-        AccessManager acMgr = sImpl.getAccessManager();
+        if (perm > Permission.NONE) {
+            SessionImpl sImpl = (SessionImpl) item.getSession();
+            AccessManager acMgr = sImpl.getAccessManager();
-        Path path = sImpl.getHierarchyManager().getPath(item.getId());
-        acMgr.checkPermission(path, perm);
+            Path path = item.getPrimaryPath();
+            acMgr.checkPermission(path, perm);
+        }
-        SessionImpl sImpl = (SessionImpl) node.getSession();
-        AccessManager acMgr = sImpl.getAccessManager();
+        if (perm > Permission.NONE) {
+            SessionImpl sImpl = (SessionImpl) node.getSession();
+            AccessManager acMgr = sImpl.getAccessManager();
-        boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);
-        if (!isGranted) {
-            throw new AccessDeniedException("Permission denied.");
+            boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);
+            if (!isGranted) {
+                throw new AccessDeniedException("Permission denied.");
+            }
-        if (checkAcPermission) {
-            return Permission.MODIFY_AC;
-        } else if (isNode) {
-            return (isRemove) ? Permission.REMOVE_NODE : Permission.ADD_NODE;
+        if (permission < Permission.NONE) {
+            if (isNode) {
+                return (isRemove) ? Permission.REMOVE_NODE : Permission.ADD_NODE;
+            } else {
+                return (isRemove) ? Permission.REMOVE_PROPERTY : Permission.SET_PROPERTY;
+            }
-            return (isRemove) ? Permission.REMOVE_PROPERTY : Permission.SET_PROPERTY;
+            return permission;

INS26 INS40 UPD42 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 UPD39 INS83 INS42 INS8 UPD42 UPD42 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 UPD42 INS44 UPD42 UPD42 INS8 INS8 INS42 INS38 UPD42 INS17 UPD39 UPD42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS39 INS42 INS25 INS25 INS34 INS42 INS42 INS42 INS42 INS32 INS27 MOV8 INS27 MOV8 INS27 INS8 UPD42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS40 INS42 INS40 INS42 INS40 MOV25 UPD42 INS42 INS32 UPD45 INS32 INS42 INS42 INS57 MOV42 UPD42 MOV42 INS43 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL40