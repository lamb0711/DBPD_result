Added SQL and XPath query implementation. The implementation is not complete yet. Only basic operations are supported.
Also added postGoals to the maven.xml to generate the parser classes for SQL XPath.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@123135 13f79535-47bb-0310-9956-ffa450edef68

-     * Flag indicating whether nodes are ordered ascending or descending
+     * Array of flag indicating whether a node is ordered ascending or descending
-    private boolean ascending;
+    private boolean[] orderSpecs;
-     * @param asc        if <code>true</code> result nodes are orderd ascending;
+     * @param orderSpecs if <code>true</code> a result node is orderd ascending;
-    public OrderQueryNode(QueryNode parent, String[] properties, boolean asc) {
+    public OrderQueryNode(QueryNode parent, String[] properties, boolean[] orderSpecs) {
+        if (properties.length != orderSpecs.length)
-        this.ascending = asc;
+        this.orderSpecs = orderSpecs;
-     * Returns <code>true</code> if result nodes should be orderd ascending.
-     * If <code>false</code> result nodes are ordered descending.
+     * Returns <code>true</code> if the property <code>i</code> should be orderd
+     * ascending. If <code>false</code> the property is ordered descending.
+     * @param i index of the property
-     * @return the value of the ascending property.
+     * @return the order spec for the property <code>i</code>.
+     *
+     * @exception ArrayIndexOutOfBoundsException if there is no property with
+     * index <code>i</code>.
-    public boolean isAscending() {
-        return ascending;
+    public boolean isAscending(int i) {
+        return orderSpecs[i];
+     * Returns a boolean array that contains the sort order specification
+     * for each property returned by {@link #getOrderByProperties()}.
+     * @return the sort specification.
+     */
+    public boolean[] getOrderBySpecs() {
+        return orderSpecs;
+    }
+
+    /**
+                if (isAscending(i)) {
+                    // FIXME really default to descending?
+                    sb.append(" ASCENDING");
+                }
-        if (ascending) {
-            // FIXME really default to descending?
-            sb.append(" ASCENDING");
+        return sb.toString();
+    }
+
+    /**
+     * Returns a JCR SQL representation for this query node.
+     *
+     * @return a JCR SQL representation for this query node.
+     */
+    public String toJCRSQLString() {
+        StringBuffer sb = new StringBuffer("ORDER BY");
+        if (properties.length > 0) {
+            String comma = "";
+            for (int i = 0; i < properties.length; i++) {
+                sb.append(comma).append(" \"");
+                sb.append(properties[i]).append("\"");
+                if (!isAscending(i)) {
+                    sb.append(" DESC");
+                }
+                comma = ",";
+            }
+        } else {
+            sb.append(" SCORE");

INS31 INS31 INS5 INS44 INS29 INS83 INS5 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS39 INS85 UPD42 INS5 UPD42 INS25 INS65 INS65 INS39 INS42 INS65 INS65 INS39 INS85 INS41 INS65 INS65 INS42 INS60 INS25 INS41 UPD66 UPD42 UPD66 INS39 INS85 INS27 MOV21 UPD66 UPD66 INS42 INS66 UPD66 INS42 INS66 INS66 INS2 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS43 INS59 INS27 INS8 INS8 INS32 INS40 INS40 UPD42 INS42 INS42 INS68 INS42 INS42 INS14 INS40 INS34 INS60 INS24 INS21 INS42 INS42 UPD42 INS42 INS43 INS45 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS25 INS42 INS42 INS42 INS45 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS25 INS21 INS42 INS42 INS45 INS32 MOV8 INS42 INS34 INS32 INS32 INS38 INS8 INS7 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS21 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 DEL39 DEL39 DEL42 DEL42 DEL25