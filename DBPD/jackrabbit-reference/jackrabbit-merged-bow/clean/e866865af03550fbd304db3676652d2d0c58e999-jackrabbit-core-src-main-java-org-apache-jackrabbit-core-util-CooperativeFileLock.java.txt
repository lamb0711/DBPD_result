JCR-2431 CooperativeFileLock improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@889270 13f79535-47bb-0310-9956-ffa450edef68

- * The file lock is used to ensure a resource is only open once at any time. 
- * It uses a cooperative locking protocol. 
+ * The file lock is used to ensure a resource is only open once at any time.
+ * It uses a cooperative locking protocol.
-    
+
+    private Thread watchdog;
+
-     * 
+     *
-     * 
+     *
+        } finally {
+            stop = true;
+            locked = false;
-        stop = true;
-        locked = false;
-    }
-
-    /**
-     * This finalizer unlocks the file if necessary.
-     */
-    protected void finalize() {
-        if (locked) {
-            release();
+        try {
+            if (watchdog != null) {
+                watchdog.interrupt();
+            }
+        } catch (Exception e) {
+            LOG.debug("Error stopping watchdog " + fileName, e);
-     * 
+     *
-                throw error("Lock file modified in the future: dist=" + dist);
+                // lock file modified in the future -
+                // wait for a bit longer than usual
+                try {
+                    Thread.sleep(2 * LOCK_SLEEP);
+                } catch (Exception e) {
+                    LOG.debug("Sleep", e);
+                }
+                return;
-            sleep(2 * LOCK_SLEEP);
-            if (!load().equals(properties)) {
-                throw error("Locked by another process");
+            // wait twice the watchdog sleep time
+            for (int i = 0; i < 8; i++) {
+                sleep(LOCK_SLEEP / 4);
+                if (!load().equals(properties)) {
+                    throw error("Locked by another process");
+                }
-        Thread watchdog = new Thread(new Runnable() {
+        watchdog = new Thread(new Runnable() {
+                        } catch (OutOfMemoryError e) {
+                            // ignore
+                        } catch (InterruptedException e) {
+                            // ignore
+                        } catch (NullPointerException e) {
+                            // ignore
-    
+
-     * 
+     *
-    
+
-     * 
+     *
-    }    
-    
+    }
+

INS23 INS83 MOV43 INS59 UPD66 UPD66 INS42 INS54 INS21 INS8 INS8 INS12 INS7 INS21 INS21 INS25 INS44 INS8 INS24 INS42 MOV14 MOV7 MOV7 INS27 INS8 INS43 INS42 MOV21 INS8 INS58 INS27 INS37 INS8 INS42 INS33 MOV21 INS42 INS32 INS54 INS41 INS39 INS59 INS42 INS34 INS42 MOV21 MOV25 INS32 INS42 INS42 INS27 INS42 INS8 INS12 INS42 INS34 INS42 INS42 INS45 INS42 INS21 INS44 INS8 UPD27 INS32 INS43 INS42 INS21 INS34 INS42 INS42 INS27 INS42 INS32 MOV34 INS42 UPD42 MOV42 INS42 INS45 INS42 INS12 INS12 INS12 INS44 INS8 INS44 INS8 INS44 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL45 DEL42 DEL27 DEL32 DEL53 DEL8 DEL42 DEL59 DEL60