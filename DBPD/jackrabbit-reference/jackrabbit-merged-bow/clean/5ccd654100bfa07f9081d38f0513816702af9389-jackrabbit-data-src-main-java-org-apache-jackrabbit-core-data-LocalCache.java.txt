JCR-3815: Local Cache Purge Cause Performance Issues
Applying patch from Shashank Gupta.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1632481 13f79535-47bb-0310-9956-ffa450edef68

-                LOG.debug("file [{}] added to local cache.", fileName);
+                LOG.debug(
+                    "file [{}] doesn't exists. adding to local cache using inputstream.",
+                    fileName);
+                LOG.debug(
+                    "file [{}] doesn't exists. returning transient file [{}].",
+                    fileName, transFile.getAbsolutePath());
-            // f.exists and not in purge mode
+            LOG.debug(
+                "file [{}]  exists. adding to local cache using inputstream.",
+                fileName);
-        cache.tryPurge();
+        tryPurge();
-    public AsyncUploadCacheResult store(String fileName, File src, boolean tryForAsyncUpload) throws IOException {
+    public AsyncUploadCacheResult store(String fileName, File src,
+            boolean tryForAsyncUpload) throws IOException {
-            || (src.exists() && !dest.exists() && !src.equals(dest) && canAdmitFile(src.length())
+            || (src.exists() && !dest.exists() && !src.equals(dest)
+                && canAdmitFile(src.length())
+            LOG.debug("file [{}]  exists= [{}] and adding to local cache.",
+                fileName, destExists);
-            LOG.debug("file [{}] added to local cache.", fileName);
+        } else {
+            LOG.info("file [{}] exists= [{}] not added to local cache.",
+                fileName, destExists);
-        cache.tryPurge();
+        tryPurge();
-            cache.put(fileName, f.length());
+            cache.get(fileName);
-        for (String n : new ArrayList<String>(toBeDeleted)) {
-            if (tryDelete(n)) {
+        for (String fileName : new ArrayList<String>(toBeDeleted)) {
+            fileName = fileName.replace("\\", "/");
+            if( cache.remove(fileName) != null) {
+    
+    /**
+     * This method tries purging of local cache. It checks if local cache
+     * has exceeded the defined limit then it triggers purge cache job in a
+     * seperate thread.
+     */
+    synchronized void tryPurge() {
+        if (!isInPurgeMode()
+            && cache.currentSizeInBytes > cache.cachePurgeTrigSize) {
+            setPurgeMode(true);
+            LOG.info(
+                "cache.entries = [{}], currentSizeInBytes=[{}]  exceeds cachePurgeTrigSize=[{}]",
+                new Object[] { cache.size(), cache.currentSizeInBytes,
+                    cache.cachePurgeTrigSize });
+            new Thread(new PurgeJob()).start();
+        } else {
+            LOG.debug(
+                "currentSizeInBytes=[{}],cachePurgeTrigSize=[{}], isInPurgeMode =[{}]",
+                new Object[] { cache.currentSizeInBytes,
+                    cache.cachePurgeTrigSize, isInPurgeMode() });
+        }
+    }
+            } else {
+                LOG.info("not able to remove cache entry [{}], size [{}]", key,
+                    super.get(key));
-        public synchronized Long put(final String fileName, final Long value) {
-            Long oldValue = cache.get(fileName);
-            if (oldValue == null) {
-                long flength = value.longValue();
-                currentSizeInBytes += flength;
-                return super.put(fileName.replace("\\", "/"), value);
+        public Long put(final String fileName, final Long value) {
+            if( isInPurgeMode()) {
+                LOG.debug("cache is purge mode: put is no-op");
+                return null;
-           toBeDeleted.remove(fileName);
-           return oldValue;
-        }
-
-        /**
-         * This method tries purging of local cache. It checks if local cache
-         * has exceeded the defined limit then it triggers purge cache job in a
-         * seperate thread.
-         */
-        synchronized void tryPurge() {
-            if (currentSizeInBytes > cachePurgeTrigSize && !isInPurgeMode()) {
-                setPurgeMode(true);
-                LOG.info(
-                    "currentSizeInBytes=[{}]  exceeds cachePurgeTrigSize=[{}]",
-                    cache.currentSizeInBytes, cache.cachePurgeTrigSize);
-                new Thread(new PurgeJob()).start();
-            } else {
-                LOG.debug(
-                    "currentSizeInBytes=[{}],cachePurgeTrigSize=[{}], isInPurgeMode =[{}]",
-                    new Object[] { cache.currentSizeInBytes,
-                        cache.cachePurgeTrigSize, isInPurgeMode() });
+            synchronized (this) {
+                Long oldValue = cache.get(fileName);
+                if (oldValue == null) {
+                    long flength = value.longValue();
+                    currentSizeInBytes += flength;
+                    return super.put(fileName.replace("\\", "/"), value);
+                }
+                toBeDeleted.remove(fileName);
+                return oldValue;
+        
+        @Override
+        public Long get(Object key) {
+            if( isInPurgeMode()) {
+                LOG.debug("cache is purge mode: get is no-op");
+                return null;
+            }
+            synchronized (this) {
+                return super.get(key);
+            }
+        }
+        
-                    LOG.info(" cache purge job started");
+                    LOG.info(" cache purge job started. initial cache entries = [{}]", initialSize);
-
-

MOV31 INS31 INS8 INS78 INS83 INS43 INS42 INS44 INS8 MOV21 INS8 MOV21 MOV27 INS25 INS51 INS42 INS42 INS43 INS42 INS25 INS51 INS21 INS21 UPD42 INS21 INS32 INS8 INS52 MOV8 INS42 INS32 INS8 INS52 INS8 INS32 INS32 INS7 INS27 INS40 INS40 INS8 INS42 INS21 INS41 INS42 INS21 INS41 INS41 INS21 INS42 INS42 INS45 INS42 UPD45 INS42 INS42 INS42 INS45 INS42 INS42 UPD42 INS42 INS32 INS32 INS33 UPD45 INS3 INS21 INS32 INS33 INS32 INS33 INS48 MOV21 INS32 INS42 INS42 INS45 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS5 INS4 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 UPD45 INS42 INS42 INS45 INS42 INS32 INS43 INS85 INS32 INS40 INS40 INS42 INS42 INS45 INS42 INS48 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL40 DEL40 DEL83