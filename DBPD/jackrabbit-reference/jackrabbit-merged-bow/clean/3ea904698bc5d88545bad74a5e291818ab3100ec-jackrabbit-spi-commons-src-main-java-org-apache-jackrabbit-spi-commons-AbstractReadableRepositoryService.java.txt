JCR-2265: AbstractReadableRepositoryService should pass credentials to createSessionInfo

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@805770 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.Batch;
-import org.apache.jackrabbit.spi.SessionInfo;
-import org.apache.jackrabbit.spi.ItemId;
-import org.apache.jackrabbit.spi.NodeId;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.LockInfo;
-import org.apache.jackrabbit.spi.EventFilter;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Subscription;
-import org.apache.jackrabbit.spi.EventBundle;
-import org.apache.jackrabbit.spi.QNodeDefinition;
-import org.apache.jackrabbit.spi.QPropertyDefinition;
-import org.apache.jackrabbit.spi.PropertyId;
-import org.apache.jackrabbit.spi.QueryInfo;
-import org.apache.jackrabbit.spi.QNodeTypeDefinition;
-import org.apache.jackrabbit.spi.QValue;
-import org.apache.jackrabbit.spi.ItemInfo;
-import org.apache.jackrabbit.spi.commons.namespace.NamespaceMapping;
-import org.apache.jackrabbit.spi.commons.nodetype.compact.CompactNodeTypeDefReader;
-import org.apache.jackrabbit.spi.commons.nodetype.compact.ParseException;
-
-import javax.jcr.RepositoryException;
-import javax.jcr.PathNotFoundException;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.ValueFormatException;
-import javax.jcr.AccessDeniedException;
-import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.ItemExistsException;
-import javax.jcr.NoSuchWorkspaceException;
-import javax.jcr.InvalidItemStateException;
-import javax.jcr.ReferentialIntegrityException;
-import javax.jcr.MergeException;
-import javax.jcr.NamespaceException;
-import javax.jcr.Credentials;
-import javax.jcr.LoginException;
-import javax.jcr.SimpleCredentials;
-import javax.jcr.query.InvalidQueryException;
-import javax.jcr.lock.LockException;
-import javax.jcr.version.VersionException;
-import javax.jcr.nodetype.NoSuchNodeTypeException;
-import javax.jcr.nodetype.ConstraintViolationException;
-import javax.jcr.nodetype.InvalidNodeTypeDefinitionException;
-import javax.jcr.nodetype.NodeTypeExistsException;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.List;
-import java.util.Set;
-import java.util.HashSet;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.jcr.AccessDeniedException;
+import javax.jcr.Credentials;
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.ItemExistsException;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.LoginException;
+import javax.jcr.MergeException;
+import javax.jcr.NamespaceException;
+import javax.jcr.NoSuchWorkspaceException;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.ReferentialIntegrityException;
+import javax.jcr.RepositoryException;
+import javax.jcr.SimpleCredentials;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.ValueFormatException;
+import javax.jcr.lock.LockException;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.nodetype.InvalidNodeTypeDefinitionException;
+import javax.jcr.nodetype.NoSuchNodeTypeException;
+import javax.jcr.nodetype.NodeTypeExistsException;
+import javax.jcr.query.InvalidQueryException;
+import javax.jcr.version.VersionException;
+
+import org.apache.jackrabbit.spi.Batch;
+import org.apache.jackrabbit.spi.EventBundle;
+import org.apache.jackrabbit.spi.EventFilter;
+import org.apache.jackrabbit.spi.ItemId;
+import org.apache.jackrabbit.spi.ItemInfo;
+import org.apache.jackrabbit.spi.LockInfo;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.PropertyId;
+import org.apache.jackrabbit.spi.QNodeDefinition;
+import org.apache.jackrabbit.spi.QNodeTypeDefinition;
+import org.apache.jackrabbit.spi.QPropertyDefinition;
+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.QueryInfo;
+import org.apache.jackrabbit.spi.SessionInfo;
+import org.apache.jackrabbit.spi.Subscription;
+import org.apache.jackrabbit.spi.commons.namespace.NamespaceMapping;
+import org.apache.jackrabbit.spi.commons.nodetype.compact.CompactNodeTypeDefReader;
+import org.apache.jackrabbit.spi.commons.nodetype.compact.ParseException;
+     * The name of the default workspace
+     */
+    protected final String defaulWsp;
+
+    /**
-     * @throws RepositoryException if the namespace mappings are invalid.
-     * @throws ParseException      if an error occurs while parsing the CND.
+     * @param defaultWsp  name of the default workspace
+     * @throws RepositoryException       if the namespace mappings are invalid.
+     * @throws ParseException            if an error occurs while parsing the CND.
+     * @throws IllegalArgumentException  if <code>defaultWsp</code> is <code>null</code>
-                                             List<String> wspNames)
-            throws RepositoryException, ParseException {
+                                             List<String> wspNames,
+                                             String defaultWsp)
+            throws RepositoryException, ParseException, IllegalArgumentException {
+
+        if (defaultWsp == null) {
+            throw new IllegalArgumentException("Default workspace is null");
+        }
+        this.defaulWsp = defaultWsp;
+    //---------------------< may be overwritten by subclasses>------------------
+
-     * Checks if the given <code>credentials</code> are valid.
+     * Checks if the given <code>credentials</code> are valid. This default
+     * implementation is empty thus allowing all credentials.
-    protected abstract void checkCredentials(Credentials credentials,
-                                             String workspaceName)
-            throws LoginException;
+    protected void checkCredentials(Credentials credentials, String workspaceName) throws LoginException {
+        // empty
+    }
-    //---------------------< may be overwritten by subclasses>------------------
+    /**
+     * Checks whether the <code>workspaceName</code> is valid.
+     * @param workspaceName  name of the workspace to check
+     * @throws NoSuchWorkspaceException  if <code>workspaceName</code> is neither in the
+     *   list of workspaces nor null (i.e. default workspace).
+     */
+    protected void checkWorkspace(String workspaceName) throws NoSuchWorkspaceException {
+        if (workspaceName != null && !wspNames.contains(workspaceName)) {
+            throw new NoSuchWorkspaceException(workspaceName);
+        }
+    }
+
+    /**
+     * Creates a session info instance for the given <code>credentials</code> and
+     * <code>workspaceName</code>. This default implementation creates a
+     * {@link SessionInfoImpl} instance and sets the <code>userId</code> and
+     * workspaceName. The user <code>userId</code> is <code>null</code> or the
+     * <code>userId</code> from <code>credentials</code> if it is of type
+     * {@link SimpleCredentials}.
+     *
+     * @param credentials the credentials.
+     * @param workspaceName the name of the workspace to access.
+     * @return a session info instance for the given <code>credentials</code> and
+     *         <code>workspaceName</code>.
+     * @throws RepositoryException
+     */
+    protected SessionInfo createSessionInfo(Credentials credentials, String workspaceName)
+            throws RepositoryException {
+
+        String userId = null;
+        if (credentials instanceof SimpleCredentials) {
+            userId = ((SimpleCredentials) credentials).getUserID();
+        }
+
+        SessionInfoImpl s = new SessionInfoImpl();
+        s.setUserID(userId);
+        s.setWorkspacename(workspaceName);
+        return s;
+    }
+
+    /**
+     * Creates a session info instance for the given <code>sessionInfo</code> and
+     * <code>workspaceName</code>. This default implementation creates a
+     * {@link SessionInfoImpl} instance and sets the <code>userId</code> and
+     * workspaceName. The user <code>userId</code> is set to the return value of
+     * {@link SessionInfo#getUserID()}.
+     *
+     * @param sessionInfo the sessionInfo.
+     * @param workspaceName the name of the workspace to access.
+     * @return a session info instance for the given <code>credentials</code> and
+     *         <code>workspaceName</code>.
+     * @throws RepositoryException
+     */
+    protected SessionInfo createSessionInfo(SessionInfo sessionInfo, String workspaceName)
+            throws RepositoryException {
+
+        String userId = sessionInfo.getUserID();
+
+        SessionInfoImpl s = new SessionInfoImpl();
+        s.setUserID(userId);
+        s.setWorkspacename(workspaceName);
+        return s;
+    }
-    /**
-     * Creates a session info instance for the given <code>userId</code> and
-     * <code>workspaceName</code>. This default implementation creates a
-     * {@link SessionInfoImpl} instance and sets the userId and workspaceName.
-     *
-     * @param userId the userId.
-     * @param workspaceName the name of the workspace to access.
-     * @return a session info instance for the given <code>userId</code> and
-     *         <code>workspaceName</code>.
-     */
-    protected SessionInfo createSessionInfo(String userId,
-                                            String workspaceName) {
-        SessionInfoImpl s = new SessionInfoImpl();
-        s.setUserID(userId);
-        s.setWorkspacename(workspaceName);
-        return s;
-    }
-
-     * <li>checks if the given <code>workspaceName</code> is in
-     * {@link #wspNames} otherwise throws a {@link NoSuchWorkspaceException}.</li>
-     * <li>calls {@link #createSessionInfo(String, String)} with a <code>null</code>
-     * <code>userId</code> or the <code>userId</code> from <code>credentials</code>
-     * if it is of type {@link SimpleCredentials}.</li>
+     * <li>calls {@link #checkWorkspace(String)}</li>
+     * <li>calls {@link #createSessionInfo(Credentials, String)} passing
+     * <code>workspaceName</code> or the name of the default workspace if
+     * <code>null</code></li>.
-        if (!wspNames.contains(workspaceName)) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        String userId = null;
-        if (credentials instanceof SimpleCredentials) {
-            userId = ((SimpleCredentials) credentials).getUserID();
-        }
-        return createSessionInfo(userId, workspaceName);
+        checkWorkspace(workspaceName);
+        return createSessionInfo(credentials, workspaceName == null ? defaulWsp : workspaceName);
-     * to {@link #createSessionInfo(String, String)} with the userId taken
-     * from the passed <code>sessionInfo</code>.
+     * to {@link #createSessionInfo(SessionInfo, String)} passing
+     * <code>workspaceName</code> or the name of the default workspace if
+     * <code>null</code></li>.
-        return createSessionInfo(sessionInfo.getUserID(), workspaceName);
+        return createSessionInfo(sessionInfo, workspaceName == null ? defaulWsp : workspaceName);
+
-    
+
-                                    String language, Map namespaces) throws
+                                    String language, Map<String, String> namespaces) throws

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 INS23 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS43 MOV8 INS29 INS83 MOV43 INS42 MOV44 MOV44 MOV43 MOV8 INS8 INS43 INS44 INS44 INS43 INS65 INS42 INS42 INS65 INS65 INS43 INS42 INS42 INS25 INS21 INS65 INS65 INS65 INS43 INS42 INS42 MOV25 INS65 INS43 INS42 INS42 INS60 INS21 INS21 INS41 INS65 INS65 INS65 INS65 INS65 INS60 MOV21 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS74 INS66 INS42 INS66 UPD66 UPD66 INS42 INS66 INS42 INS27 INS8 INS7 UPD66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS27 UPD66 UPD66 INS66 INS66 MOV65 INS66 UPD42 UPD66 UPD66 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 MOV43 INS59 UPD66 UPD66 UPD66 UPD66 UPD66 INS32 INS32 INS66 UPD66 UPD66 INS42 INS42 INS43 INS43 INS43 INS42 INS33 INS53 INS22 INS42 INS27 MOV38 INS42 INS42 INS14 INS42 INS42 MOV42 INS42 INS42 MOV42 INS42 INS68 INS42 MOV32 INS68 INS42 INS42 INS42 INS42 INS16 MOV42 INS16 MOV42 INS42 INS42 INS14 INS52 INS42 INS42 INS33 INS43 INS42 INS42 INS42 INS42 INS69 INS69 MOV69 INS27 INS42 INS42 MOV69 INS27 INS42 INS42 INS43 INS45 INS42 INS43 INS43 MOV43 INS42 INS33 UPD43 INS42 INS33 INS42 INS42 INS42 MOV42 UPD42 DEL83 DEL42 DEL42 DEL32 DEL41 DEL42 DEL67 DEL65 DEL66 DEL42 DEL66 DEL42 DEL43