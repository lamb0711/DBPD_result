JCR-3162 Index update overhead on cluster slave due to JCR-905
 - rollback

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1214749 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.cluster.ChangeLogRecord;
-import org.apache.jackrabbit.core.cluster.ClusterNode;
-import org.apache.jackrabbit.core.cluster.ClusterRecord;
-import org.apache.jackrabbit.core.cluster.ClusterRecordDeserializer;
-import org.apache.jackrabbit.core.cluster.ClusterRecordProcessor;
-import org.apache.jackrabbit.core.cluster.LockRecord;
-import org.apache.jackrabbit.core.cluster.NamespaceRecord;
-import org.apache.jackrabbit.core.cluster.NodeTypeRecord;
-import org.apache.jackrabbit.core.cluster.PrivilegeRecord;
-import org.apache.jackrabbit.core.cluster.WorkspaceRecord;
-import org.apache.jackrabbit.core.journal.Journal;
-import org.apache.jackrabbit.core.journal.JournalException;
-import org.apache.jackrabbit.core.journal.Record;
-import org.apache.jackrabbit.core.journal.RecordIterator;
-import org.apache.jackrabbit.core.state.ItemState;
-            checkPendingJournalChanges(context);
-    /**
-     * In the case of an initial index build operation, this checks if there are
-     * some new nodes pending in the journal and tries to preemptively delete
-     * them, to keep the index consistent.
-     * 
-     * See JCR-3162
-     * 
-     * @param context
-     * @throws IOException
-     */
-    private void checkPendingJournalChanges(QueryHandlerContext context) {
-        ClusterNode cn = context.getClusterNode();
-        if (cn == null) {
-            return;
-        }
-
-        List<NodeId> addedIds = new ArrayList<NodeId>();
-        long rev = cn.getRevision();
-
-        List<ChangeLogRecord> changes = getChangeLogRecords(rev, context.getWorkspace());
-        Iterator<ChangeLogRecord> iterator = changes.iterator();
-        while (iterator.hasNext()) {
-            ChangeLogRecord record = iterator.next();
-            for (ItemState state : record.getChanges().addedStates()) {
-                if (!state.isNode()) {
-                    continue;
-                }
-                addedIds.add((NodeId) state.getId());
-            }
-        }
-        if (!addedIds.isEmpty()) {
-            Collection<NodeState> empty = Collections.emptyList();
-            try {
-                updateNodes(addedIds.iterator(), empty.iterator());
-            } catch (Exception e) {
-                log.error(e.getMessage(), e);
-            }
-        }
-    }
-
-
-    /**
-     * Polls the underlying journal for events of the type ChangeLogRecord that
-     * happened after a given revision, on a given workspace.
-     *
-     * @param revision
-     *            starting revision
-     * @param workspace
-     *            the workspace name
-     * @return
-     */
-    private List<ChangeLogRecord> getChangeLogRecords(long revision,
-            final String workspace) {
-        log.debug(
-                "Get changes from the Journal for revision {} and workspace {}.",
-                revision, workspace);
-        ClusterNode cn = getContext().getClusterNode();
-        if (cn == null) {
-            return Collections.emptyList();
-        }
-        Journal journal = cn.getJournal();
-        final List<ChangeLogRecord> events = new ArrayList<ChangeLogRecord>();
-        ClusterRecordDeserializer deserializer = new ClusterRecordDeserializer();
-        RecordIterator records = null;
-        try {
-            records = journal.getRecords(revision);
-            while (records.hasNext()) {
-                Record record = records.nextRecord();
-                if (!record.getProducerId().equals(cn.getId())) {
-                    continue;
-                }
-                ClusterRecord r = null;
-                try {
-                    r = deserializer.deserialize(record);
-                } catch (JournalException e) {
-                    log.error(
-                            "Unable to read revision '" + record.getRevision()
-                                    + "'.", e);
-                }
-                if (r == null) {
-                    continue;
-                }
-                r.process(new ClusterRecordProcessor() {
-                    public void process(ChangeLogRecord record) {
-                        String eventW = record.getWorkspace();
-                        if (eventW != null ? eventW.equals(workspace) : workspace == null) {
-                            events.add(record);
-                        }
-                    }
-
-                    public void process(LockRecord record) {
-                    }
-
-                    public void process(NamespaceRecord record) {
-                    }
-
-                    public void process(NodeTypeRecord record) {
-                    }
-
-                    public void process(PrivilegeRecord record) {
-                    }
-
-                    public void process(WorkspaceRecord record) {
-                    }
-                });
-            }
-        } catch (JournalException e1) {
-            log.error(e1.getMessage(), e1);
-        } finally {
-            if (records != null) {
-                records.close();
-            }
-        }
-        return events;
-    }

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL21 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL18 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL32 DEL21 DEL8 DEL70 DEL8 DEL61 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL18 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL16 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL61 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL42 DEL41 DEL8 DEL31