JCR-1169 Distribution of commons classes (adjust jackrabbit-core)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@590014 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.Path;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.conversion.NameResolver;
+import org.apache.jackrabbit.name.NameFactoryImpl;
+import javax.jcr.NamespaceException;
-    private final NamespaceResolver resolver;
+    private final NameResolver resolver;
-    private QueryFormat(QueryRootNode root, NamespaceResolver resolver)
+    private QueryFormat(QueryRootNode root, NameResolver resolver)
-    public static String toString(QueryRootNode root, NamespaceResolver resolver)
+    public static String toString(QueryRootNode root, NameResolver resolver)
-        QName[] selectProps = node.getSelectProperties();
+        Name[] selectProps = node.getSelectProperties();
-                    NameFormat.format(ISO9075.encode(selectProps[i]), resolver, sb);
+                    sb.append(resolver.getJCRName(encode(selectProps[i])));
-                } catch (NoPrefixDeclaredException e) {
+                } catch (NamespaceException e) {
-                NameFormat.format(XPathQueryBuilder.FN_NOT_10, resolver, sb);
+                sb.append(resolver.getJCRName(XPathQueryBuilder.FN_NOT_10));
-            } catch (NoPrefixDeclaredException e) {
+            } catch (NamespaceException e) {
-            NameFormat.format(ISO9075.encode(node.getPropertyName()), resolver, sb);
+            Name name = encode(node.getPropertyName());
+            sb.append(resolver.getJCRName(name));
-            NameFormat.format(node.getValue(), resolver, sb);
-        } catch (NoPrefixDeclaredException e) {
+            sb.append(resolver.getJCRName(node.getValue()));
+        } catch (NamespaceException e) {
-            NameFormat.format(XPathQueryBuilder.JCR_CONTAINS, resolver, sb);
+            sb.append(resolver.getJCRName(XPathQueryBuilder.JCR_CONTAINS));
-                Path.PathElement[] elements = relPath.getElements();
+                Path.Element[] elements = relPath.getElements();
-                        NameFormat.format(ISO9075.encode(elements[i].getName()), resolver, sb);
+                        Name n = encode(elements[i].getName());
+                        sb.append(resolver.getJCRName(n));
-        } catch (NoPrefixDeclaredException e) {
+        } catch (NamespaceException e) {
-        final QName[] nodeType = new QName[1];
+        final Name[] nodeType = new Name[1];
-                    NameFormat.format(XPathQueryBuilder.JCR_ROOT, resolver, sb);
+                    sb.append(resolver.getJCRName(XPathQueryBuilder.JCR_ROOT));
-                    NameFormat.format(ISO9075.encode(node.getNameTest()), resolver, sb);
+                    sb.append(resolver.getJCRName(encode(node.getNameTest())));
-            } catch (NoPrefixDeclaredException e) {
+            } catch (NamespaceException e) {
-                NameFormat.format(ISO9075.encode(nodeType[0]), resolver, sb);
-            } catch (NoPrefixDeclaredException e) {
+                sb.append(resolver.getJCRName(encode(nodeType[0])));
+            } catch (NamespaceException e) {
-            NameFormat.format(XPathQueryBuilder.JCR_DEREF, resolver, sb);
+            sb.append(resolver.getJCRName(XPathQueryBuilder.JCR_DEREF));
-            NameFormat.format(ISO9075.encode(node.getRefProperty()), resolver, sb);
+            sb.append(resolver.getJCRName(encode(node.getRefProperty())));
-                NameFormat.format(ISO9075.encode(node.getNameTest()), resolver, sb);
+                sb.append(resolver.getJCRName(encode(node.getNameTest())));
-        } catch (NoPrefixDeclaredException e) {
+        } catch (NamespaceException e) {
-                NameFormat.format(XPathQueryBuilder.FN_POSITION_FULL, resolver, propPath);
+                propPath.append(resolver.getJCRName(XPathQueryBuilder.FN_POSITION_FULL));
-                Path.PathElement[] elements = relPath.getElements();
+                Path.Element[] elements = relPath.getElements();
-                        NameFormat.format(ISO9075.encode(elements[i].getName()), resolver, propPath);
+                        propPath.append(resolver.getJCRName(encode(elements[i].getName())));
-                NameFormat.format(XPathQueryBuilder.JCR_LIKE, resolver, sb);
+                sb.append(resolver.getJCRName(XPathQueryBuilder.JCR_LIKE));
-                NameFormat.format(XPathQueryBuilder.FN_NOT, resolver, sb);
+                sb.append(resolver.getJCRName(XPathQueryBuilder.FN_NOT));
-                NameFormat.format(XPathQueryBuilder.REP_SIMILAR, resolver, sb);
+                sb.append(resolver.getJCRName(XPathQueryBuilder.REP_SIMILAR));
-                NameFormat.format(XPathQueryBuilder.REP_SPELLCHECK, resolver, sb);
+                sb.append(resolver.getJCRName(XPathQueryBuilder.REP_SPELLCHECK));
-        } catch (NoPrefixDeclaredException e) {
+        } catch (NamespaceException e) {
-                QName prop = ISO9075.encode(specs[i].getProperty());
+                Name prop = encode(specs[i].getProperty());
-                NameFormat.format(prop, resolver, sb);
+                sb.append(resolver.getJCRName(prop));
-        } catch (NoPrefixDeclaredException e) {
+        } catch (NamespaceException e) {
-                sb.insert(0, NameFormat.format(XPathQueryBuilder.FN_LOWER_CASE, resolver) + "(");
+                sb.insert(0, resolver.getJCRName(XPathQueryBuilder.FN_LOWER_CASE) + "(");
-                sb.insert(0, NameFormat.format(XPathQueryBuilder.FN_UPPER_CASE, resolver) + "(");
+                sb.insert(0, resolver.getJCRName(XPathQueryBuilder.FN_UPPER_CASE) + "(");
-        } catch (NoPrefixDeclaredException e) {
+        } catch (NamespaceException e) {
-     * @throws NoPrefixDeclaredException if a prefix declaration is missing for
+     * @throws NamespaceException if a prefix declaration is missing for
-            throws NoPrefixDeclaredException {
+            throws NamespaceException {
-            NameFormat.format(XPathQueryBuilder.XS_DATETIME, resolver, b);
+            b.append(resolver.getJCRName(XPathQueryBuilder.XS_DATETIME));
+
+    private static Name encode(Name name) {
+        String encoded = ISO9075.encode(name.getLocalName());
+        if (encoded.equals(name.getLocalName())) {
+            return name;
+        } else {
+            return NameFactoryImpl.getInstance().create(name.getNamespaceURI(), encoded);
+        }
+    }

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 UPD43 UPD43 INS83 INS83 INS43 INS42 INS44 INS8 UPD42 UPD43 UPD43 UPD42 INS42 INS43 INS42 INS60 INS25 UPD42 UPD42 UPD5 UPD5 UPD42 INS42 INS43 INS59 INS32 INS8 INS8 UPD43 INS60 UPD43 INS42 INS42 INS32 INS42 INS42 INS32 INS41 INS41 UPD42 INS43 INS59 INS32 UPD43 UPD43 UPD42 UPD5 INS32 UPD43 UPD43 UPD43 UPD43 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 UPD42 UPD42 INS32 INS42 INS42 MOV32 MOV32 UPD42 UPD42 UPD42 INS32 UPD42 UPD43 UPD42 UPD42 INS32 INS42 INS42 MOV32 MOV32 UPD42 UPD42 UPD42 MOV21 UPD42 INS42 INS42 INS32 INS42 INS32 INS42 UPD43 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 UPD5 UPD42 UPD43 INS32 UPD43 MOV42 UPD42 MOV42 INS40 UPD42 INS32 UPD43 MOV21 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 UPD42 UPD43 UPD42 INS42 INS42 MOV32 MOV32 UPD42 INS42 INS42 MOV32 MOV32 UPD5 UPD42 UPD42 UPD42 INS32 INS32 UPD43 MOV42 UPD42 MOV42 INS40 UPD40 INS32 UPD42 UPD42 UPD42 UPD42 INS32 UPD43 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 INS32 INS42 INS42 MOV32 MOV32 UPD42 INS60 UPD42 UPD42 INS32 INS42 INS42 MOV32 MOV32 MOV42 UPD42 MOV42 INS40 UPD40 UPD42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 INS43 INS59 MOV42 UPD42 MOV42 INS40 UPD42 UPD42 UPD42 INS42 INS42 MOV32 UPD42 UPD42 INS32 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV32 MOV32 UPD42 UPD42 UPD42 INS32 MOV42 UPD42 MOV42 INS40 UPD42 UPD42 INS32 INS21 MOV21 MOV42 UPD42 MOV42 INS40 INS32 MOV21 UPD42 MOV42 UPD42 MOV42 INS32 MOV42 INS42 INS42 MOV40 UPD42 UPD42 INS32 MOV42 UPD42 MOV42 INS40 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL40 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL21 DEL40 DEL42 DEL42 DEL42 DEL42 DEL40