JCR-3107 Speed up hierarchy cache initialization
 - based on a patch by Martin BÃ¶ttcher

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1182761 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.text.NumberFormat;
+import java.util.Arrays;
+import java.util.BitSet;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+import org.apache.commons.collections.map.LRUMap;
+import org.apache.jackrabbit.core.id.NodeId;
+import org.apache.lucene.index.CorruptIndexException;
-import org.apache.lucene.index.CorruptIndexException;
-import org.apache.jackrabbit.core.id.NodeId;
-import org.apache.commons.collections.map.LRUMap;
+import org.apache.lucene.store.IndexInput;
+import org.apache.lucene.store.IndexOutput;
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.BitSet;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.Collections;
-import java.text.NumberFormat;
-import java.util.concurrent.ConcurrentHashMap;
-
-    private CacheInitializer cacheInitializer;
+    private final CacheInitializer cacheInitializer;
-        this.shareableNodes = new BitSet();
-        TermDocs tDocs = delegatee.termDocs(
-                new Term(FieldNames.SHAREABLE_NODE, ""));
-        try {
-            while (tDocs.next()) {
-                shareableNodes.set(tDocs.doc());
-            }
-        } finally {
-            tDocs.close();
-        }
+        this.shareableNodes = initShareableNodes(delegatee);
+    private BitSet initShareableNodes(IndexReader delegatee) throws IOException {
+        BitSet shareableNodes = new BitSet();
+        TermDocs tDocs = delegatee.termDocs(new Term(FieldNames.SHAREABLE_NODE,
+                ""));
+        try {
+            while (tDocs.next()) {
+                shareableNodes.set(tDocs.doc());
+            }
+        } finally {
+            tDocs.close();
+        }
+        return shareableNodes;
+    }
+
+         * The {@link #inSegmentParents} is persisted using this filename.
+         */
+        private static final String FILE_CACHE_NAME_ARRAY = "cache.inSegmentParents";
+
+        /**
-         *
-         * @param reader an index reader.
+         * @param reader
+         *            an index reader.
-                initializeParents(reader);
+                boolean initCacheFromFile = loadCacheFromFile();
+                if (!initCacheFromFile) {
+                    // file-based cache is not available, load from the
+                    // repository
+                    initializeParents(reader);
+                }
-                    // no more nodes to initialize
+                    // no more nodes to initialize, persist cache to file
+                    saveCacheToFile();
+
+        /**
+         * Persists the cache info {@link #inSegmentParents} to a file:
+         * {@link #FILE_CACHE_NAME_ARRAY}, for faster init times on startup.
+         * 
+         * see https://issues.apache.org/jira/browse/JCR-3107
+         */
+        public void saveCacheToFile() throws IOException {
+            IndexOutput io = null;
+            try {
+                io = reader.directory().createOutput(FILE_CACHE_NAME_ARRAY);
+                for (int parent : inSegmentParents) {
+                    io.writeInt(parent);
+                }
+            } catch (Exception e) {
+                log.error(
+                        "Error saving " + FILE_CACHE_NAME_ARRAY + ": "
+                                + e.getMessage(), e);
+            } finally {
+                io.close();
+            }
+        }
+
+        /**
+         * Loads the cache info {@link #inSegmentParents} from the file
+         * {@link #FILE_CACHE_NAME_ARRAY}.
+         * 
+         * see https://issues.apache.org/jira/browse/JCR-3107
+         * 
+         * @return true if the cache has been initialized of false if the cache
+         *         file does not exist yet, or an error happened
+         */
+        private boolean loadCacheFromFile() throws IOException {
+            IndexInput ii = null;
+            try {
+                ii = reader.directory().openInput(FILE_CACHE_NAME_ARRAY);
+                for (int i = 0; i < inSegmentParents.length; i++) {
+                    inSegmentParents[i] = ii.readInt();
+                }
+                return true;
+            } catch (FileNotFoundException ignore) {
+                // expected in the case where the file-based cache has not been
+                // initialized yet
+            } catch (IOException ignore) {
+                log.warn(
+                        "Saved state of CachingIndexReader is corrupt, will try to remove offending file "
+                                + FILE_CACHE_NAME_ARRAY, ignore);
+                // In the case where is a read error, the cache file is removed
+                // so it can be recreated after
+                // the cache loads the data from the repository directly
+                reader.directory().deleteFile(FILE_CACHE_NAME_ARRAY);
+            } finally {
+                if (ii != null) {
+                    ii.close();
+                }
+            }
+            return false;
+        }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS23 INS31 INS31 INS42 INS43 INS42 INS42 INS60 MOV60 MOV54 INS41 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS42 INS43 INS59 INS42 INS65 INS42 INS42 INS45 INS65 INS42 INS60 INS54 INS65 INS65 INS42 INS60 INS54 INS41 INS32 INS42 INS42 MOV14 INS66 INS65 INS66 UPD66 INS8 INS66 INS65 INS66 INS65 INS66 INS66 INS43 INS59 INS8 INS12 INS8 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS43 INS59 INS8 INS12 INS12 INS8 INS9 INS42 INS42 INS67 MOV25 INS60 INS25 INS67 INS67 INS42 INS42 INS33 INS21 INS70 INS44 INS8 INS21 INS67 INS67 INS42 INS42 INS33 INS21 INS24 INS41 INS44 INS8 INS44 INS8 INS25 INS42 INS39 INS59 INS38 MOV8 INS42 INS42 INS7 INS44 INS42 INS8 INS43 INS42 INS21 INS32 INS42 INS42 INS7 INS58 INS27 INS37 INS8 INS9 INS43 INS42 INS43 INS42 INS21 INS21 INS27 INS8 INS42 INS32 INS42 INS21 INS42 INS32 INS39 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS32 INS32 INS42 INS33 INS21 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS34 INS7 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS2 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42