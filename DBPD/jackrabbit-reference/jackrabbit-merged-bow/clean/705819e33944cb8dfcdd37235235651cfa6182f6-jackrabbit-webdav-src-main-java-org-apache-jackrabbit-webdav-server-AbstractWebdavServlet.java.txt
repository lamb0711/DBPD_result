JCR-4166: support GZIP content coding in requests

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1878706 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.ContentCodingAwareRequest;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.w3c.dom.Element;
+import java.util.Locale;
-            List<String> ces = getContentCodings(request);
-            if (!ces.isEmpty()) {
-                webdavResponse.setStatus(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
-                webdavResponse.setHeader("Accept-Encoding", "identity");
-                webdavResponse.setContentType("text/plain; charset=UTF-8");
-                webdavResponse.getWriter().println("Content-Encodings not supported, but received: " + ces);
-                webdavResponse.getWriter().flush();
+            if (!(webdavRequest instanceof ContentCodingAwareRequest)) {
+                List<String> ces = getContentCodings(request);
+                if (!ces.isEmpty()) {
+                    webdavResponse.setStatus(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
+                    webdavResponse.setHeader("Accept-Encoding", "identity");
+                    webdavResponse.setContentType("text/plain; charset=UTF-8");
+                    webdavResponse.getWriter().println("Content-Encodings not supported, but received: " + ces);
+                    webdavResponse.getWriter().flush();
+                }
-
-            if (e.getErrorCode() == HttpServletResponse.SC_UNAUTHORIZED) {
-                sendUnauthorized(webdavRequest, webdavResponse, e);
+            handleDavException(webdavRequest, webdavResponse, e);
+        } catch (IOException ex) {
+            Throwable cause = ex.getCause();
+            if (cause instanceof DavException) {
+                handleDavException(webdavRequest, webdavResponse, (DavException) cause);
-                webdavResponse.sendError(e);
+                throw ex;
+    private void handleDavException(WebdavRequest webdavRequest, WebdavResponse webdavResponse, DavException ex)
+            throws IOException {
+        if (ex.getErrorCode() == HttpServletResponse.SC_UNAUTHORIZED) {
+            sendUnauthorized(webdavRequest, webdavResponse, ex);
+        } else {
+            Element condition = ex.getErrorCondition();
+            if (DomUtil.matches(condition, ContentCodingAwareRequest.PRECONDITION_SUPPORTED)) {
+                if (webdavRequest instanceof ContentCodingAwareRequest) {
+                    webdavResponse.setHeader("accept", ((ContentCodingAwareRequest) webdavRequest).getAcceptableCodings());
+                }
+            }
+            webdavResponse.sendError(ex);
+        }
+    }
+
-    private List<String> getContentCodings(HttpServletRequest request) {
+    /**
+     * Obtain the (ordered!) list of content codings that have been used in the
+     * request
+     */
+    public static List<String> getContentCodings(HttpServletRequest request) {
-                    result.add(h.trim());
+                    result.add(h.trim().toLowerCase(Locale.ENGLISH));

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 UPD83 INS83 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS65 INS12 INS12 INS42 INS42 INS42 INS27 INS8 INS8 INS66 INS66 INS25 MOV44 INS8 INS44 INS8 INS32 INS40 INS21 INS60 INS25 INS21 INS38 INS8 MOV21 INS43 INS42 INS60 INS25 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS32 INS36 MOV60 MOV25 INS42 INS43 INS59 INS62 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS25 INS42 INS42 INS42 INS62 UPD42 INS42 INS42 INS32 INS42 INS43 INS53 INS42 INS42 INS62 INS8 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS21 INS42 INS42 INS42 INS11 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS45 INS32 INS42 INS42 MOV32 MOV42 INS42 INS36 INS42 UPD42 INS40 INS11 INS43 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL27 DEL8 DEL25 DEL8 DEL12 DEL42