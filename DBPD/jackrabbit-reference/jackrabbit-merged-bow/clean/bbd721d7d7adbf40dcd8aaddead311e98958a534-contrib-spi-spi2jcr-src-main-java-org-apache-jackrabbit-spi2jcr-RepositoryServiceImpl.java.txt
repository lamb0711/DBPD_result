JCR-999  SPI: provide batch read functionality
JCR-1000 JCR2SPI: remove duplicate item states

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552873 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.NameException;
+import org.apache.jackrabbit.JcrConstants;
+import javax.jcr.ItemVisitor;
+import javax.jcr.util.TraversingItemVisitor;
+     * The configuration map used to determine the maximal depth of child
+     * items to be accessed upon a call to {@link getNodeInfo(SessionInfo, NodeId)}.
+     */
+    private final BatchReadConfig batchReadConfig;
+
+    /**
+     * @param batchReadConfig
+     * {@link #getNodeInfo(SessionInfo, NodeId)}.
-    public RepositoryServiceImpl(Repository repository) {
+    public RepositoryServiceImpl(Repository repository, BatchReadConfig batchReadConfig) {
+        this.batchReadConfig = batchReadConfig;
-        return new NodeInfoImpl(getNode(nodeId, sInfo),
-                idFactory, sInfo.getNamespaceResolver());
+        Node node = getNode(nodeId, sInfo);
+        NodeInfo info = new NodeInfoImpl(node, idFactory, sInfo.getNamespaceResolver());
+        return info;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Iterator getItemInfos(SessionInfo sessionInfo, NodeId nodeId)
+            throws ItemNotFoundException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        Node node = getNode(nodeId, sInfo);
+        QName ntName = null;
+        try {
+            ntName = NameFormat.parse(node.getProperty(JcrConstants.JCR_PRIMARYTYPE).getString(), sInfo.getNamespaceResolver());
+        } catch (NameException e) {
+            // ignore. should never occur
+        }
+        int depth = batchReadConfig.getDepth(ntName);
+        if (depth == BatchReadConfig.DEPTH_DEFAULT) {
+            NodeInfo info = new NodeInfoImpl(node, idFactory, sInfo.getNamespaceResolver());
+            return Collections.singletonList(info).iterator();
+        } else {
+            final List itemInfos = new ArrayList();
+            ItemVisitor visitor = new TraversingItemVisitor(false, depth) {
+                protected void entering(Property property, int i) throws RepositoryException {
+                    itemInfos.add(new PropertyInfoImpl(property, idFactory, sInfo.getNamespaceResolver(), getQValueFactory()));
+                }
+                protected void entering(Node node, int i) throws RepositoryException {
+                    itemInfos.add(new NodeInfoImpl(node, idFactory, sInfo.getNamespaceResolver()));
+                }
+                protected void leaving(Property property, int i) {
+                    // nothing to do
+                }
+                protected void leaving(Node node, int i) {
+                    // nothing to do
+                }
+            };
+            visitor.visit(node);
+            return itemInfos.iterator();
+        }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS29 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS42 INS42 INS65 INS43 INS42 INS21 INS60 INS60 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS54 INS60 INS25 INS66 INS66 INS65 INS66 INS42 INS65 INS66 INS42 INS7 INS43 INS59 INS43 INS59 INS42 INS65 INS42 INS42 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS39 INS59 INS27 INS8 INS8 INS66 INS68 INS22 INS42 INS42 INS42 MOV32 INS42 INS42 MOV14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS32 INS42 INS40 INS60 INS41 INS60 INS60 INS21 INS41 INS42 INS69 INS69 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS83 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS9 INS42 INS1 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS31 INS31 INS31 INS31 INS42 INS42 INS40 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS39 INS42 INS42 INS21 INS43 INS42 INS39 INS42 INS42 INS21 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42