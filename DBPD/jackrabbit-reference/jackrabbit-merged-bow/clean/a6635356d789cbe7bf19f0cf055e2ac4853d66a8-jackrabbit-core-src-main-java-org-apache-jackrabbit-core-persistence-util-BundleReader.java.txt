JCR-2762: Optimize bundle serialization

Introduce bundle serialization version 3 that uses a fixed list of known names and namespaces to more efficiently store commonly used names. See BundleWriter.writeName() for a detailed description of the name serialization format.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1022485 13f79535-47bb-0310-9956-ffa450edef68

-        int a = in.readUnsignedByte();
-        int b = in.readUnsignedByte();
-        int c = in.readUnsignedByte();
-        String uri = binding.nsIndex.indexToString(a << 16 | b << 8 | c);
-        String local = binding.nameIndex.indexToString(in.readInt());
-        Name nodeTypeName = NameFactoryImpl.getInstance().create(uri, local);
-
-        // primaryType
+        Name nodeTypeName;
+        if (version >= BundleBinding.VERSION_3) {
+            nodeTypeName = readName();
+        } else {
+            int a = in.readUnsignedByte();
+            int b = in.readUnsignedByte();
+            int c = in.readUnsignedByte();
+            String uri = binding.nsIndex.indexToString(a << 16 | b << 8 | c);
+            String local = binding.nameIndex.indexToString(in.readInt());
+            nodeTypeName = NameFactoryImpl.getInstance().create(uri, local);
+        }
-            PropertyId pId = new PropertyId(bundle.getId(), name);
-            // skip redundant primaryType, mixinTypes and uuid properties
-            if (name.equals(NameConstants.JCR_PRIMARYTYPE)
-                || name.equals(NameConstants.JCR_MIXINTYPES)
-                || name.equals(NameConstants.JCR_UUID)) {
-                readPropertyEntry(pId);
-                name = readIndexedQName();
-                continue;
-            }
+            PropertyId pId = new PropertyId(id, name);
-            bundle.addProperty(pState);
+            // skip redundant primaryType, mixinTypes and uuid properties
+            if (!name.equals(NameConstants.JCR_PRIMARYTYPE)
+                && !name.equals(NameConstants.JCR_MIXINTYPES)
+                && !name.equals(NameConstants.JCR_UUID)) {
+                bundle.addProperty(pState);
+            }
+        if (version >= BundleBinding.VERSION_3) {
+            return readName();
+        }
+
+        if (version >= BundleBinding.VERSION_3) {
+            return readName();
+        }
+
+    /**
+     * Deserializes a name written using bundle serialization version 3.
+     * See the {@link BundleWriter} class for details of the serialization
+     * format.
+     *
+     * @return deserialized name
+     * @throws IOException if an I/O error occurs
+     */
+    private Name readName() throws IOException {
+        int b = in.readUnsignedByte();
+        if ((b & 0x80) == 0) {
+            return BundleNames.indexToName(b);
+        } else {
+            String uri;
+            int ns = (b >> 4) & 0x07;
+            if (ns != 0x07) {
+                uri = BundleNames.indexToNamespace(ns);
+            } else {
+                uri = in.readUTF();
+            }
+
+            String local;
+            int len = b & 0x0f;
+            if (b != 0x0f) {
+                byte[] buffer = new byte[len + 1];
+                in.readFully(buffer);
+                local = new String(buffer, "UTF-8");
+            } else {
+                local = in.readUTF();
+            }
+
+            return NameFactoryImpl.getInstance().create(uri, local);
+        }
+    }
+

INS31 INS29 INS83 INS43 INS42 INS43 INS8 INS25 INS25 INS25 INS65 INS65 INS65 INS42 INS42 INS60 INS25 INS27 INS8 INS8 MOV25 INS27 INS8 INS27 INS8 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS39 INS59 INS27 INS8 INS8 INS42 INS40 INS21 MOV60 MOV60 MOV60 MOV60 MOV60 INS21 INS42 INS40 INS41 INS42 INS40 INS41 INS42 INS42 INS32 INS36 INS34 INS41 INS60 INS60 INS25 INS60 INS60 INS25 INS41 INS7 INS7 MOV43 UPD27 INS32 INS32 INS42 INS42 INS27 INS32 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS32 INS42 INS32 INS42 MOV32 INS38 INS38 INS38 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS21 INS21 INS42 INS42 INS42 INS27 INS42 INS34 INS60 INS21 INS21 INS21 INS32 INS42 INS42 INS42 INS42 MOV43 INS42 MOV32 MOV32 MOV32 MOV32 INS36 INS34 INS7 INS7 INS42 INS34 INS5 INS59 INS32 INS7 INS7 INS42 INS42 UPD42 MOV42 INS27 INS42 INS32 INS42 INS32 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS5 INS27 INS43 INS42 INS45 INS42 INS42 INS39 INS85 INS42 INS34 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL18