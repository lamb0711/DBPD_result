- improved versioning / virtual node behaviour
  fixes jira issues: JCR-20, JCR-22 and JCR-23

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@111518 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.ReferenceMap;
+import java.util.Map;
- * This Class provides general versioning functions.
+ * This Class provides implements the persistent part of the versionin. the
+ * current implementation uses the 'normal' repository content as storage.
+
-     * the version histories
+     * the version histories. key=uuid, value=version history
-    private HashMap histories = new HashMap();
-
+    private Map histories = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK);
+    
-            if (false) {
+            if (true) {
+     * returns the version manager
+     * @return
+     */
+    public synchronized VersionManager getVersionManager(Workspace wsp) {
+        VersionManager vm = (VersionManager) versionManagers.get(wsp.getName());
+        if (vm==null) {
+            vm = new VersionManager(this);
+            versionManagers.put(wsp.getName(), vm);
+        }
+        return vm;
+    }
+
+
+    /**
-    public synchronized InternalVersionHistory createVersionHistory(NodeImpl node)
+    synchronized InternalVersionHistory createVersionHistory(NodeImpl node)
-    public synchronized InternalVersionHistory getVersionHistory(String histId)
+    synchronized InternalVersionHistory getVersionHistory(String histId)
-            hist = new InternalVersionHistory(this, hNode);
-            histories.put(histId, hist);
+            if (hNode!=null) {
+                hist = new InternalVersionHistory(this, hNode);
+                histories.put(histId, hist);
+            }
+     * Checks if the versionhistory for the given id exists
+     * @param histId
+     * @return
+     */
+    synchronized boolean hasVersionHistory(String histId) {
+        if (histories.containsKey(histId)) {
+            return true;
+        } else {
+            return historyRoot.hasNode(new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, histId));
+        }
+    }
+
+    /**
-    public synchronized Iterator getVersionHistories() throws RepositoryException {
+    synchronized Iterator getVersionHistories() throws RepositoryException {
+     * returns the number of version histories
+     * @return
+     * @throws RepositoryException
+     */
+    synchronized int getNumVersionHistories() throws RepositoryException {
+        return historyRoot.getChildNodes().length;
+    }
+
+    /**
-    public synchronized InternalVersion getVersion(String histId, String versionId)
+    synchronized InternalVersion getVersion(String histId, String versionId)
+     * returns the version with the given id
+     * @param versionId
+     * @return
+     * @throws RepositoryException
+     */
+    synchronized InternalVersion getVersion(String versionId)
+            throws RepositoryException {
+
+        // todo: implement better
+        PersistentNode[] ph = historyRoot.getChildNodes();
+        for (int i=0; i<ph.length; i++) {
+            InternalVersionHistory vh = getVersionHistory(ph[i].getName().getLocalName());
+            InternalVersion v = vh.getVersion(versionId);
+            if (v!=null) {
+                return v;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Checks if the version with the given id exists
+     * @param versionId
+     * @return
+     */
+    synchronized boolean hasVersion(String versionId) {
+        // todo: implement better
+        try {
+            PersistentNode[] ph = historyRoot.getChildNodes();
+            for (int i=0; i<ph.length; i++) {
+                InternalVersionHistory vh = getVersionHistory(ph[i].getName().getLocalName());
+                if (vh.hasVersion(versionId)) {
+                    return true;
+                }
+            }
+        } catch (RepositoryException e) {
+            // ignore
+        }
+        return false;
+    }
+
+    /**
-    protected void onVersionModified(InternalVersion version)  throws RepositoryException {
+    void onVersionModified(InternalVersion version)  throws RepositoryException {
-    protected void onVersionHistoryModified(InternalVersionHistory vh)  throws RepositoryException {
+    void onVersionHistoryModified(InternalVersionHistory vh)  throws RepositoryException {
-    public synchronized InternalVersion checkin(NodeImpl node) throws RepositoryException {
+    synchronized InternalVersion checkin(NodeImpl node) throws RepositoryException {
-    /**
-     * returns the version manager
-     * @return
-     */
-    public synchronized VersionManager getVersionManager(Workspace wsp) {
-        VersionManager vm = (VersionManager) versionManagers.get(wsp.getName());
-        if (vm==null) {
-            vm = new VersionManager(this);
-            versionManagers.put(wsp.getName(), vm);
-        }
-        return vm;
-    }
-
-    /**
-     * returns the node type manager of the version storage
-     * @return
-     */
-    public NodeTypeManagerImpl getNodeTypeManager(){
-        return ntMgr;
-    }

INS26 INS26 MOV31 MOV31 INS40 INS40 INS31 INS31 INS31 UPD43 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS43 INS8 UPD83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD66 INS66 UPD42 INS65 INS65 INS65 INS43 INS42 INS25 INS65 INS65 INS65 INS42 INS41 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS24 INS41 INS65 INS65 INS65 INS43 INS42 INS54 INS41 UPD66 UPD43 INS40 INS40 INS66 INS42 INS42 INS32 INS8 INS8 INS66 INS42 INS22 UPD66 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS33 INS66 INS42 INS42 INS8 INS12 INS9 UPD42 INS25 INS42 INS42 INS42 INS41 INS41 INS32 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS60 INS24 INS44 INS8 UPD9 INS27 INS8 INS9 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS27 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS43 INS42 INS42 INS33 MOV21 MOV21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 MOV41 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS42 INS43 INS40 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS8 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS2 INS42 INS42 INS32 INS9 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL83 DEL43 DEL42 DEL8 DEL83 DEL83 DEL83