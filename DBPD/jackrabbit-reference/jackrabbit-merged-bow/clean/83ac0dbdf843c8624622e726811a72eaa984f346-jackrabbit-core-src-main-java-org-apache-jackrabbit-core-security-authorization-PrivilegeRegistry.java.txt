JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1081433 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.privilege.ParseException;
+import org.apache.jackrabbit.commons.privilege.PrivilegeDefinition;
+import org.apache.jackrabbit.commons.privilege.PrivilegeDefinitionReader;
+import org.apache.jackrabbit.commons.privilege.PrivilegeDefinitionWriter;
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.Writer;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
-    private final Map<Name, PrivilegeDefinition> registeredPrivileges = new HashMap<Name, PrivilegeDefinition>();
+    private final Map<Name, Definition> registeredPrivileges = new HashMap<Name, Definition>();
-    /**
-     * @deprecated For backwards compatibility only.
-     */
-            Map<Name, PrivilegeDefinition> definitions = createPrivilegeDefinitions(customDefs);
+            Map<Name, Definition> definitions = createPrivilegeDefinitions(customDefs);
+        } catch (ParseException e) {
+            throw new RepositoryException("Failed to load custom privileges", e);
-                    PrivilegeDefinition jcrWrite = createJcrWriteDefinition();
+                    Definition jcrWrite = createJcrWriteDefinition();
-            Map<Name, PrivilegeDefinition> definitions = createPrivilegeDefinitions(stubs);
+            Map<Name, Definition> definitions = createPrivilegeDefinitions(stubs);
+            } catch (ParseException e) {
+                throw new RepositoryException("Failed to register custom privilege " + privilegeName.toString(), e);
-    PrivilegeDefinition[] getAll() {
-        return registeredPrivileges.values().toArray(new PrivilegeDefinition[registeredPrivileges.size()]);
+    Definition[] getAll() {
+        return registeredPrivileges.values().toArray(new Definition[registeredPrivileges.size()]);
-    PrivilegeDefinition get(Name name) {
+    Definition get(Name name) {
-            for (PrivilegeDefinition def : registeredPrivileges.values()) {
+            for (Definition def : registeredPrivileges.values()) {
-    private void registerDefinitions(Map<Name, PrivilegeDefinition> definitions) {
+    private void registerDefinitions(Map<Name, Definition> definitions) {
-        for (PrivilegeDefinition def : definitions.values()) {
+        for (Definition def : definitions.values()) {
-            PrivilegeDefinition all = registeredPrivileges.get(NameConstants.JCR_ALL);
+            Definition all = registeredPrivileges.get(NameConstants.JCR_ALL);
-            for (PrivilegeDefinition def : definitions.values()) {
+            for (Definition def : definitions.values()) {
-            all = new PrivilegeDefinition(NameConstants.JCR_ALL, false, allAggrNames, allBits);
+            all = new Definition(NameConstants.JCR_ALL, false, allAggrNames, allBits);
-    private Map<Name,PrivilegeDefinition> createBuiltInPrivilegeDefinitions() {
-        Map<Name, PrivilegeDefinition> defs = new HashMap<Name, PrivilegeDefinition>();
+    private Map<Name, Definition> createBuiltInPrivilegeDefinitions() {
+        Map<Name, Definition> defs = new HashMap<Name, Definition>();
-            PrivilegeDefinition def = new PrivilegeDefinition(privilegeName, false, bits);
+            Definition def = new Definition(privilegeName, false, bits);
-        PrivilegeDefinition jcrWrite = createJcrWriteDefinition();
+        Definition jcrWrite = createJcrWriteDefinition();
-        PrivilegeDefinition repWrite = createRepWriteDefinition(jcrWrite.bits);
+        Definition repWrite = createRepWriteDefinition(jcrWrite.bits);
-        PrivilegeDefinition jcrAll = new PrivilegeDefinition(NameConstants.JCR_ALL, false, jcrAllAggregates, jcrAllBits);
+        Definition jcrAll = new Definition(NameConstants.JCR_ALL, false, jcrAllAggregates, jcrAllBits);
-    private Map<Name, PrivilegeDefinition> createPrivilegeDefinitions(Map<Name, DefinitionStub> toRegister) throws RepositoryException {
-        Map<Name, PrivilegeDefinition> definitions = new HashMap<Name, PrivilegeDefinition>(toRegister.size());
+    private Map<Name, Definition> createPrivilegeDefinitions(Map<Name, DefinitionStub> toRegister) throws RepositoryException {
+        Map<Name, Definition> definitions = new HashMap<Name, Definition>(toRegister.size());
-                definitions.put(name, new PrivilegeDefinition(stub, nextBits()));
+                definitions.put(name, new Definition(stub, nextBits()));
-                    PrivilegeDefinition def = new PrivilegeDefinition(stub, bts);
+                    Definition def = new Definition(stub, bts);
-    private int getAggregateBits(Set<Name> declaredAggregateNames, Map<Name, PrivilegeDefinition> toRegister) {
+    private int getAggregateBits(Set<Name> declaredAggregateNames, Map<Name, Definition> toRegister) {
-                PrivilegeDefinition def = toRegister.get(n);
+                Definition def = toRegister.get(n);
-    private static PrivilegeDefinition createJcrWriteDefinition() {
+    private static Definition createJcrWriteDefinition() {
-        return new PrivilegeDefinition(NameConstants.JCR_WRITE, false, jcrWriteAggregates, jcrWriteBits);
+        return new Definition(NameConstants.JCR_WRITE, false, jcrWriteAggregates, jcrWriteBits);
-    private static PrivilegeDefinition createRepWriteDefinition(int jcrWriteBits) {
+    private static Definition createRepWriteDefinition(int jcrWriteBits) {
-        return new PrivilegeDefinition(REP_WRITE_NAME, false, repWriteAggregates, repWriteBits);
+        return new Definition(REP_WRITE_NAME, false, repWriteAggregates, repWriteBits);
-    static class PrivilegeDefinition extends DefinitionStub {
+    static class Definition extends DefinitionStub {
-        private PrivilegeDefinition(DefinitionStub stub, int bits) {
+        private Definition(DefinitionStub stub, int bits) {
-        private PrivilegeDefinition(Name name, boolean isAbstract, int bits) {
+        private Definition(Name name, boolean isAbstract, int bits) {
-        private PrivilegeDefinition(Name name, boolean isAbstract, Set<Name> declaredAggregateNames, int bits) {
+        private Definition(Name name, boolean isAbstract, Set<Name> declaredAggregateNames, int bits) {
-        private PrivilegeDefinition(Name name, boolean isAbstract, Set<Name> declaredAggregateNames, int bits, boolean isCustom) {
+        private Definition(Name name, boolean isAbstract, Set<Name> declaredAggregateNames, int bits, boolean isCustom) {
-        private Map<Name, DefinitionStub> load() throws IOException, FileSystemException, RepositoryException {
+        private Map<Name, DefinitionStub> load() throws FileSystemException, RepositoryException, ParseException, IOException {
-                BufferedReader reader = new BufferedReader(new InputStreamReader(customPrivilegesResource.getInputStream(), "utf-8"));
+                InputStream in = customPrivilegesResource.getInputStream();
-                    String line;
-                    while ((line = reader.readLine()) != null) {
-                        String[] params = Text.explode(line, ';', true);
+                    PrivilegeDefinitionReader pr = new PrivilegeDefinitionReader(in, "text/xml");
+                    for (PrivilegeDefinition def : pr.getPrivilegeDefinitions()) {
-                        if (params.length < 1) {
-                            // empty line
-                            continue;
-                        }
-
-                        Name privName = NAME_FACTORY.create(params[0]);
-                        boolean isAbstract = false;
+                        Name privName = getName(def.getName());
+                        boolean isAbstract = def.isAbstract();
-
-                        if (params.length >= 2) {
-                            isAbstract = "abstract".equals(params[1]);
-                        }
-                        if (params.length >= 3) {
-                            String[] declExpNames = Text.explode(params[2], ',');
-                            for (String declExpName : declExpNames) {
-                                declaredAggrNames.add(NAME_FACTORY.create(declExpName));
-                            }
+                        for (String dan : def.getDeclaredAggregateNames()) {
+                            declaredAggrNames.add(getName(dan));
-
-                    reader.close();
+                    in.close();
-        private void append(Map<Name, PrivilegeDefinition> newPrivilegeDefinitions) throws IOException, FileSystemException, RepositoryException {
-            Map<Name, DefinitionStub> defs = load();
-            defs.putAll(newPrivilegeDefinitions);
+        private Name getName(String jcrName) throws RepositoryException {
+            String uri = namespaceRegistry.getURI(Text.getNamespacePrefix(jcrName));
+            return NAME_FACTORY.create(uri, Text.getLocalName(jcrName));
+        }
-            Writer writer = new OutputStreamWriter(customPrivilegesResource.getOutputStream(), "utf-8");
-            try {
-                for (DefinitionStub def : defs.values()) {
-                    StringBuilder sb = new StringBuilder();
-                    sb.append(def.name.toString()).append(';');
-                    if (def.isAbstract) {
-                        sb.append("abstract");
-                    }
-                    sb.append(";");
-                    if (!def.declaredAggregateNames.isEmpty()) {
-                        int cnt = 0;
-                        for (Name dan : def.declaredAggregateNames) {
-                            if (cnt > 0) {
-                                sb.append(",");
-                            }
-                            sb.append(dan.toString());
-                            cnt++;
-                        }
-                    }
-                    writer.write(sb.toString());
-                    writer.write("\n");
+        private void append(Map<Name, Definition> newPrivilegeDefinitions) throws IOException, FileSystemException, RepositoryException, ParseException {
+            List<PrivilegeDefinition> jcrDefs;
+            Map<String, String> nsMapping;
+
+            if (customPrivilegesResource.exists()) {
+                InputStream in = customPrivilegesResource.getInputStream();
+                try {
+                    PrivilegeDefinitionReader pr = new PrivilegeDefinitionReader(in, "text/xml");
+                    jcrDefs = new ArrayList<PrivilegeDefinition>(Arrays.asList(pr.getPrivilegeDefinitions()));
+                    nsMapping = pr.getNamespaces();
+                } finally {
+                    in.close();
+            } else {
+                jcrDefs = new ArrayList<PrivilegeDefinition>();
+                nsMapping = new HashMap<String, String>();
+            }
+
+            for (Definition d : newPrivilegeDefinitions.values()) {
+                String name = resolver.getJCRName(d.name);
+                String uri = d.name.getNamespaceURI();
+                nsMapping.put(namespaceRegistry.getPrefix(uri), uri);
+
+                String[] aggrNames = new String[d.declaredAggregateNames.size()];
+                int i = 0;
+                for (Name dan : d.declaredAggregateNames) {
+                    aggrNames[i++] = resolver.getJCRName(dan);
+                    uri = d.name.getNamespaceURI();
+                    nsMapping.put(namespaceRegistry.getPrefix(uri), uri);
+                }
+                PrivilegeDefinition pd = new PrivilegeDefinition(name, d.isAbstract, aggrNames);
+                jcrDefs.add(pd);
+            }
+
+            OutputStream out = customPrivilegesResource.getOutputStream();
+            try {
+                PrivilegeDefinitionWriter pdw = new PrivilegeDefinitionWriter("text/xml");
+                pdw.writeDefinitions(out, jcrDefs.toArray(new PrivilegeDefinition[jcrDefs.size()]), nsMapping);
-                writer.close();
+                out.close();

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 UPD40 UPD40 INS40 INS40 UPD40 UPD74 UPD5 INS43 UPD74 UPD74 UPD43 INS43 UPD42 MOV43 INS31 MOV43 UPD43 UPD43 INS42 UPD74 MOV43 MOV43 UPD43 MOV43 MOV43 UPD43 UPD74 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS43 INS83 INS43 INS42 INS44 INS43 INS8 INS43 UPD42 UPD74 INS12 UPD42 UPD43 UPD42 UPD74 UPD43 UPD43 UPD43 UPD42 UPD74 UPD43 INS42 INS42 MOV43 INS42 INS42 INS60 INS41 UPD74 INS42 INS60 INS60 INS25 INS70 INS54 MOV43 UPD43 INS44 INS8 INS3 UPD42 UPD43 MOV43 UPD43 UPD42 UPD42 UPD42 MOV43 UPD43 UPD42 INS43 INS43 INS43 INS59 INS32 UPD43 INS74 INS59 UPD74 MOV74 INS59 INS32 INS8 INS8 MOV44 MOV32 INS8 UPD43 INS8 MOV8 UPD42 UPD74 INS43 INS42 INS53 UPD74 INS12 INS5 MOV32 UPD42 UPD43 INS44 UPD42 UPD74 UPD43 INS43 UPD42 UPD74 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 UPD42 INS43 MOV43 INS42 UPD43 UPD43 INS42 INS42 INS42 INS60 INS54 INS21 INS21 UPD43 UPD42 UPD42 MOV60 INS60 INS21 INS60 MOV60 MOV70 INS60 INS21 UPD42 UPD42 MOV32 INS60 MOV21 UPD43 INS42 INS14 UPD43 INS44 INS8 INS43 INS85 UPD43 UPD42 INS43 INS42 MOV43 UPD43 UPD42 INS42 MOV43 UPD43 UPD43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 INS43 MOV59 INS8 INS8 INS7 INS7 UPD42 UPD43 INS43 INS59 INS32 MOV5 INS59 UPD40 MOV43 INS59 INS32 INS43 INS59 UPD42 INS43 INS45 INS42 UPD42 INS43 INS42 INS53 INS42 UPD42 INS42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 MOV32 INS70 INS42 INS42 INS42 INS42 UPD42 INS60 MOV21 INS21 INS21 INS42 INS14 INS42 INS14 UPD42 UPD42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS3 UPD42 INS21 INS21 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS14 UPD42 UPD42 INS42 INS32 INS42 UPD42 INS42 INS42 INS14 UPD42 UPD42 UPD43 INS43 MOV44 INS32 MOV8 UPD42 INS42 INS43 INS59 INS7 INS7 INS32 INS74 INS74 INS42 INS42 INS40 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV5 INS32 INS7 INS7 MOV43 INS42 INS40 INS42 INS43 INS45 INS42 INS42 MOV3 INS43 INS27 INS42 UPD43 UPD43 UPD42 INS42 UPD42 INS14 UPD42 MOV42 UPD42 MOV42 INS60 INS70 UPD42 INS42 INS42 INS14 INS42 INS14 INS42 INS32 INS42 INS42 INS43 MOV43 INS43 INS43 INS43 UPD40 MOV40 UPD42 MOV42 INS2 INS32 INS42 INS32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS45 INS32 UPD42 UPD42 INS43 INS42 INS45 MOV39 INS59 MOV44 INS32 MOV8 INS43 INS42 INS45 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS37 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD43 INS42 INS42 UPD43 INS42 MOV42 INS32 UPD42 UPD42 MOV42 INS42 INS42 INS43 MOV43 UPD42 MOV42 INS42 INS32 INS42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL14 DEL42 DEL42 DEL42 DEL42 DEL13 DEL9 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL18 DEL8 DEL25 DEL42 DEL34 DEL2 DEL9 DEL59 DEL60 DEL42 DEL40 DEL34 DEL27 DEL42 DEL45 DEL42 DEL34 DEL2 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL2 DEL13 DEL32 DEL59 DEL60 DEL42 DEL70 DEL8 DEL25 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL61 DEL32 DEL42 DEL43 DEL14 DEL42 DEL34 DEL27 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL37 DEL21 DEL60 DEL42 DEL43 DEL45 DEL14 DEL45 DEL42 DEL42 DEL32 DEL32 DEL13 DEL32 DEL21 DEL40 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL45 DEL32 DEL21 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL54