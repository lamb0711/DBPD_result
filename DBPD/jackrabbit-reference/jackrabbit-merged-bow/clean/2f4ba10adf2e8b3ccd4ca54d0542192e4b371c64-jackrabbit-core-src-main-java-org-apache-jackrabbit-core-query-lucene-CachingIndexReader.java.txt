JCR-2524: Reduce memory usage of DocIds

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@924677 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import java.util.concurrent.ConcurrentHashMap;
-     * Cache of nodes parent relation. If an entry in the array is not null,
-     * that means the node with the document number = array-index has the node
-     * with <code>DocId</code> as parent.
+     * Cache of nodes parent relation. If an entry in the array is >= 0,
+     * then that means the node with the document number = array-index has the
+     * node with the value at that position as parent.
-    private final DocId[] parents;
+    private final int[] inSegmentParents;
-     * Initializes the {@link #parents} cache.
+     * Cache of nodes parent relation that point to a foreign index segment.
+     */
+    private final Map<Integer, DocId> foreignParentDocIds = new ConcurrentHashMap<Integer, DocId>();
+
+    /**
+     * Initializes the {@link #inSegmentParents} and {@link #foreignParentDocIds}
+     * caches.
-     * @param initCache if the {@link #parents} cache should be initialized
+     * @param initCache if the parent caches should be initialized
-        this.parents = new DocId[delegatee.maxDoc()];
+        this.inSegmentParents = new int[delegatee.maxDoc()];
+        Arrays.fill(this.inSegmentParents, -1);
-        parent = parents[n];
+        int parentDocNum = inSegmentParents[n];
+        if (parentDocNum != -1) {
+            parent = DocId.create(parentDocNum);
+        } else {
+            parent = foreignParentDocIds.get(n);
+        }
+            int plainDocId = -1;
-                                    parent = DocId.create(docs.doc());
+                                    plainDocId = docs.doc();
+                                    parent = DocId.create(plainDocId);
-            parents[n] = parent;
+            if (plainDocId != -1) {
+                // PlainDocId
+                inSegmentParents[n] = plainDocId;
+            } else {
+                // UUIDDocId
+                foreignParentDocIds.put(n, parent);
+                if (existing) {
+                    // there was an existing parent reference in
+                    // inSegmentParents, which was invalid and is replaced
+                    // with a UUIDDocId (points to a foreign segment).
+                    // mark as unknown
+                    inSegmentParents[n] = -1;
+                }
+            }
-     * Initializes the {@link CachingIndexReader#parents} cache.
+     * Initializes the {@link CachingIndexReader#inSegmentParents} and
+     * {@link CachingIndexReader#foreignParentDocIds} caches.
-         * Initializes the {@link CachingIndexReader#parents} <code>DocId</code>
-         * array.
+         * Initializes the {@link CachingIndexReader#inSegmentParents} and
+         * {@link CachingIndexReader#foreignParentDocIds} caches.
-                    parents[info.docId] = DocId.create(parent.docId);
+                    inSegmentParents[info.docId] = parent.docId;
-                    parents[info.docId] = DocId.create(info.parent);
+                    foreignParentDocIds.put(info.docId, DocId.create(info.parent));
-                    parents[info.docId] = DocId.create(doc.getValues(FieldNames.PARENT));
+                    foreignParentDocIds.put(info.docId, DocId.create(doc.getValues(FieldNames.PARENT)));
-                    parents[info.docId] = DocId.NULL;
+                    foreignParentDocIds.put(info.docId, DocId.NULL);
-                if (parents.length > 0) {
-                    foreignParents /= parents.length;
+                if (inSegmentParents.length > 0) {
+                    foreignParents /= inSegmentParents.length;
-                            parents.length,
+                            inSegmentParents.length,

INS26 INS26 INS40 INS40 INS23 UPD5 INS29 INS83 INS83 INS74 INS59 INS39 UPD42 INS65 INS43 INS43 MOV43 INS42 INS14 INS21 INS60 INS25 UPD66 UPD66 UPD66 INS66 INS42 INS42 INS74 INS66 INS65 UPD66 UPD66 INS32 INS39 INS59 INS27 INS8 INS8 INS66 INS65 UPD66 INS43 INS43 MOV43 INS67 INS42 INS42 INS22 INS38 INS42 INS2 INS42 INS38 INS21 MOV21 INS60 INS25 INS67 UPD66 INS65 UPD66 INS42 INS42 UPD42 INS42 UPD42 UPD5 INS52 INS42 INS34 INS42 INS42 INS34 INS7 INS39 INS59 INS27 INS8 INS8 UPD42 INS42 INS42 INS67 INS39 INS42 INS32 INS32 INS42 INS38 INS42 INS38 MOV21 INS21 INS25 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS34 INS32 INS42 INS8 UPD40 UPD42 INS42 INS42 INS42 INS42 INS21 UPD42 INS7 INS40 INS32 UPD40 UPD40 INS2 INS38 UPD42 INS42 INS42 INS40 MOV32 INS32 INS32 INS42 INS42 INS34 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 INS40 INS21 INS7 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 DEL66 DEL42 DEL67 DEL65 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL40 DEL7