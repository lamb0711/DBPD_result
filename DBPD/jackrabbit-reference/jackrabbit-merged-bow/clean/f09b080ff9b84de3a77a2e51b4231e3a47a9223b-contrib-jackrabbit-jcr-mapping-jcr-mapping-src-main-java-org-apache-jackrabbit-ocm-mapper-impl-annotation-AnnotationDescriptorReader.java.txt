Working on annotations : 
Give the possibility to defined annotations on the attribute declaration and on the getter 
code clean-up
Continue the unit tests (still in progress)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@581387 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.jackrabbit.ocm.exception.InitMapperException;
+import org.apache.jackrabbit.ocm.mapper.model.ImplementDescriptor;
+import org.apache.jackrabbit.ocm.reflection.ReflectionUtils;
+	private static final Log log = LogFactory.getLog(AnnotationDescriptorReader.class);
+	
-		Node annotationNode =  (Node) clazz.getAnnotation(Node.class);
-		ClassDescriptor descriptor = new ClassDescriptor();
-		descriptor.setClassName(clazz.getName());
-		descriptor.setJcrType(annotationNode.jcrType());
-		if (annotationNode.jcrSuperTypes() != null && ! annotationNode.jcrSuperTypes().equals(""))
+		ClassDescriptor classDescriptor = null;
+		
+		Node nodeAnnotation =  (Node) clazz.getAnnotation(Node.class);
+		if (nodeAnnotation != null)
-		     descriptor.setJcrSuperTypes(annotationNode.jcrSuperTypes());
+			classDescriptor = createClassDescriptor(clazz, nodeAnnotation);			
+			addAttributeDescriptors(mappingDescriptor, classDescriptor, clazz);
+			return classDescriptor;
+		}
+		else
+		{
+			throw  new InitMapperException("The persistent class " + clazz.getName() + " has not @Node annotation");
+		}
+	
+		
+		
+	}
+
+	private ClassDescriptor createClassDescriptor(Class clazz, Node nodeAnnotation) 
+	{
+		ClassDescriptor classDescriptor = new ClassDescriptor();
+		classDescriptor.setClassName(clazz.getName());
+		classDescriptor.setJcrType(nodeAnnotation.jcrType());
+		if (nodeAnnotation.jcrSuperTypes() != null && ! nodeAnnotation.jcrSuperTypes().equals(""))
+		{
+		     classDescriptor.setJcrSuperTypes(nodeAnnotation.jcrSuperTypes());
-		if (annotationNode.jcrMixinTypes() != null && ! annotationNode.jcrMixinTypes().equals(""))
+		if (nodeAnnotation.jcrMixinTypes() != null && ! nodeAnnotation.jcrMixinTypes().equals(""))
-		     descriptor.setJcrMixinTypes(annotationNode.jcrMixinTypes());
+		     classDescriptor.setJcrMixinTypes(nodeAnnotation.jcrMixinTypes());
-		if (annotationNode.extend() != null && ! annotationNode.extend().equals(""))
+		if (nodeAnnotation.extend() != null && ! nodeAnnotation.extend().equals(Object.class))
-		     descriptor.setExtend(annotationNode.extend());
+		     classDescriptor.setExtend(nodeAnnotation.extend().getName());
-		descriptor.setAbstract(annotationNode.isAbstract());
-		descriptor.setInterface(clazz.isInterface());
+		classDescriptor.setAbstract(nodeAnnotation.isAbstract());
+		classDescriptor.setInterface(clazz.isInterface());
+		return classDescriptor;
+	}
+	
+	private void addImplementDescriptor(ClassDescriptor classDescriptor, Class clazz) 
+	{
+		Implement implementAnnotation = (Implement) clazz.getAnnotation(Implement.class);
+		if (implementAnnotation != null) 
+		{
+            ImplementDescriptor implementDescriptor =  new ImplementDescriptor();
+            implementDescriptor.setInterfaceName(implementAnnotation.interfaceName().getName());
+            classDescriptor.addImplementDescriptor(implementDescriptor);
+		}
-		addFieldDescriptors(descriptor, clazz);
-		addBeanDescriptors(descriptor, clazz);
-		addCollectionDescriptors(mappingDescriptor, descriptor, clazz);
-		return descriptor;
-	}
-
-	private void addCollectionDescriptors(MappingDescriptor mappingDescriptor, ClassDescriptor descriptor,Class clazz) {
-		BeanInfo beanInfo;
-		try {
-			beanInfo = Introspector.getBeanInfo(clazz);
-		} catch (IntrospectionException e) {
-			throw new RuntimeException(e);
-		}
-		PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
-		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
-			Collection jcrChildNode = propertyDescriptor.getReadMethod().getAnnotation(Collection.class);
-			if (jcrChildNode != null) {
-				Class targetClass = jcrChildNode.type();
-				CollectionDescriptor collectionDescriptor = new CollectionDescriptor();
-				ClassDescriptor classDescriptor = mappingDescriptor.getClassDescriptorByName(targetClass.getName());
-
-				if (classDescriptor == null)
-					throw new RuntimeException(
-							"Unable to reference class "
-									+ targetClass.getName()
-									+ " as a child node since it has not been registered, ordering perhaps?");
-
-				if (jcrChildNode.jcrName() != null && ! jcrChildNode.jcrName().equals(""))
-				{
-				   collectionDescriptor.setJcrName(jcrChildNode.jcrName());
-				}
-				else
-				{
-				   collectionDescriptor.setJcrName(propertyDescriptor.getName());
-				}
-				
-				Node annotationNode = (Node) targetClass.getAnnotation(Node.class);
-				collectionDescriptor.setDefaultPrimaryType(annotationNode.jcrType());
-				collectionDescriptor.setJcrSameNameSiblings(jcrChildNode.sameNameSiblings());
-				collectionDescriptor.setJcrAutoCreated(jcrChildNode.autoCreate());
-				collectionDescriptor.setJcrProtected(jcrChildNode.protect());
-				collectionDescriptor.setJcrOnParentVersion(jcrChildNode.onParentVersion());
-				collectionDescriptor.setJcrMandatory(jcrChildNode.mandatory());
-				collectionDescriptor.setAutoInsert(jcrChildNode.autoInsert());
-				collectionDescriptor.setAutoRetrieve(jcrChildNode.autoRetrieve());
-				collectionDescriptor.setAutoUpdate(jcrChildNode.autoUpdate());
-				collectionDescriptor.setCollectionClassName(propertyDescriptor.getReadMethod().getReturnType().getName());
-				collectionDescriptor.setElementClassName(targetClass.getName());
-				collectionDescriptor.setCollectionConverter(jcrChildNode.converter().getName());
-				collectionDescriptor.setFieldName(propertyDescriptor.getName());
-
-				collectionDescriptor.setJcrType(annotationNode.jcrType());
-				collectionDescriptor.setJcrSameNameSiblings(jcrChildNode.sameNameSiblings());
-				collectionDescriptor.setProxy(jcrChildNode.proxy());
-
-				descriptor.addCollectionDescriptor(collectionDescriptor);
-			}
-		}
-
-	}
-
-	
-	private void addBeanDescriptors(ClassDescriptor descriptor,Class clazz) {
-		BeanInfo beanInfo;
-		try {
-			beanInfo = Introspector.getBeanInfo(clazz);
-		} catch (IntrospectionException e) {
-			throw new RuntimeException(e);
-		}
-		PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
-		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
-			Bean jcrChildNode = propertyDescriptor.getReadMethod().getAnnotation(Bean.class);
-			if (jcrChildNode != null) {
-				
-				BeanDescriptor beanDescriptor = new BeanDescriptor();
-				beanDescriptor.setFieldName(propertyDescriptor.getName());
-				if (jcrChildNode.jcrName() != null && ! jcrChildNode.jcrName().equals(""))
-				{
-				   beanDescriptor.setJcrName(jcrChildNode.jcrName());
-				}
-				else
-				{
-					beanDescriptor.setJcrName(propertyDescriptor.getName());
-				}
-				
-				beanDescriptor.setProxy(jcrChildNode.proxy());				
-				beanDescriptor.setConverter(jcrChildNode.converter().getName());
-				beanDescriptor.setAutoInsert(jcrChildNode.autoInsert());
-				beanDescriptor.setAutoRetrieve(jcrChildNode.autoRetrieve());
-				beanDescriptor.setAutoUpdate(jcrChildNode.autoUpdate());
-				beanDescriptor.setJcrType(jcrChildNode.jcrType());
-				beanDescriptor.setJcrAutoCreated(jcrChildNode.jcrAutoCreated());
-				beanDescriptor.setJcrMandatory(jcrChildNode.jcrMandatory());
-				beanDescriptor.setJcrOnParentVersion(jcrChildNode.jcrOnParentVersion());
-				beanDescriptor.setJcrProtected(jcrChildNode.jcrProtected());			            
-				beanDescriptor.setJcrSameNameSiblings(jcrChildNode.jcrSameNameSiblings());				
-
-				descriptor.addBeanDescriptor(beanDescriptor);
-			}
-		}
-
-	private void addFieldDescriptors(ClassDescriptor descriptor, Class clazz) {
+	/**
+	 * Add FieldDescriptors, BeanDescriptors and CollectionDescriptors.
+	 * The descriptots can be defined on the getter methods or on the field declation. 
+	 * 
+	 * @param mappingDescriptor The mapping descriptor
+	 * @param classDescriptor the classdescriptor for which the descriptors have to be added
+	 * @param clazz The associated class
+	 */
+	private void addAttributeDescriptors(MappingDescriptor mappingDescriptor, ClassDescriptor classDescriptor,Class clazz) {
+ 
+		addDescriptorsFromFields(mappingDescriptor, classDescriptor, clazz);
+		addDescriptorsFromGetters(mappingDescriptor, classDescriptor, clazz);
+	}
+
+	private void addDescriptorsFromFields(MappingDescriptor mappingDescriptor, ClassDescriptor classDescriptor, Class clazz) {
+	    
+		java.lang.reflect.Field[] fields = clazz.getDeclaredFields();
+	    for (int index = 0; index < fields.length; index++) 
+	    {
+			Field fieldAnnotation = fields[index].getAnnotation(Field.class);
+			if (fieldAnnotation != null) {
+				addFieldDescriptor(classDescriptor, fields[index].getName(), fieldAnnotation);
+			}
+			
+			// Check if there is an Bean annotation
+			Bean beanAnnotation = fields[index].getAnnotation(Bean.class);
+			if (beanAnnotation != null) {
+				addBeanDescriptor(classDescriptor, fields[index].getName(), beanAnnotation);
+			}
+			
+			// Check if there is an Collection annotation
+			Collection collectionAnnotation = fields[index].getAnnotation(Collection.class);
+			if (collectionAnnotation != null) {
+				addCollectionDescriptor(mappingDescriptor, classDescriptor, fields[index].getName(), 
+						                fields[index].getName(), collectionAnnotation);
+			}
+					
+		   	
+		}
+		
+	}
+
+	private void addDescriptorsFromGetters(MappingDescriptor mappingDescriptor, ClassDescriptor classDescriptor, Class clazz) {
-
-			Field jcrProperty = propertyDescriptor.getReadMethod().getAnnotation(Field.class);
-			if (jcrProperty != null) {
-				FieldDescriptor fieldDescriptor = new FieldDescriptor();				
-				fieldDescriptor.setFieldName(propertyDescriptor.getName());
-				if ((jcrProperty.jcrName() != null) && (!jcrProperty.jcrName().equals("")))
-				{
-					fieldDescriptor.setJcrName(jcrProperty.jcrName());	
-				}
-				else
-				{
-					fieldDescriptor.setJcrName(propertyDescriptor.getName());	
-				}
-				fieldDescriptor.setId(jcrProperty.id());				
-				fieldDescriptor.setPath(jcrProperty.path());
-				fieldDescriptor.setUuid(jcrProperty.uuid());
-				
-				// It is not possible to set a null value into an annotation attribute.
-				// If the converter == Object.class, it should be considered as null
-				if (! jcrProperty.converter().equals(Object.class))
-				{
-				    fieldDescriptor.setConverter(jcrProperty.converter().getName());
-				}
-				
-				// It is not possible to set a null value into an annotation attribute.
-				// If the jcrDefaultValue value is an empty string => it should be considered as null
-				if ((jcrProperty.jcrDefaultValue() != null) && (!jcrProperty.jcrDefaultValue().equals("")))
-				{
-				     fieldDescriptor.setJcrDefaultValue(jcrProperty.jcrDefaultValue());
-				}
-				
-				// It is not possible to set a null value into an annotation attribute.
-				// If the jcrValueConstraints value is an empty string => it should be considered as null
-				if ((jcrProperty.jcrValueConstraints() != null) && (!jcrProperty.jcrValueConstraints().equals("")))
-				{	
-				     fieldDescriptor.setJcrValueConstraints(jcrProperty.jcrValueConstraints());
-				}
-				
-				// It is not possible to set a null value into an annotation attribute.
-				// If the jcrProperty value is an empty string => it should be considered as null
-				if ((jcrProperty.jcrType() != null) && (!jcrProperty.jcrType().equals("")))
-				{
-				    fieldDescriptor.setJcrType(jcrProperty.jcrType());
-				}
-				
-				fieldDescriptor.setJcrAutoCreated(jcrProperty.jcrAutoCreated());
-				fieldDescriptor.setJcrMandatory(jcrProperty.jcrMandatory());
-				fieldDescriptor.setJcrOnParentVersion(jcrProperty.jcrOnParentVersion());
-				fieldDescriptor.setJcrProtected(jcrProperty.jcrProtected());
-				fieldDescriptor.setJcrMultiple(jcrProperty.jcrMultiple());
-				
-				//fieldDescriptor.setJcrType(value)
-				descriptor.addFieldDescriptor(fieldDescriptor);
+
+			// Check if there is an Field annotation
+			Field fieldAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Field.class);
+			if (fieldAnnotation != null) {
+				addFieldDescriptor(classDescriptor, propertyDescriptor.getName(), fieldAnnotation);
+			}
+			
+			// Check if there is an Bean annotation
+			Bean beanAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Bean.class);
+			if (beanAnnotation != null) {
+				addBeanDescriptor(classDescriptor, propertyDescriptor.getName(), beanAnnotation);
+			}
+			
+			// Check if there is an Collection annotation
+			Collection collectionAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Collection.class);
+			if (collectionAnnotation != null) {
+				addCollectionDescriptor(mappingDescriptor, classDescriptor, propertyDescriptor.getName(), 
+						                propertyDescriptor.getReadMethod().getReturnType().getName(), collectionAnnotation);
+	}
+
+	private void addCollectionDescriptor(MappingDescriptor mappingDescriptor, ClassDescriptor descriptor,
+			                             String fieldName, String collectionClassName, Collection collectionAnnotation) {
+		
+		Class targetClass = collectionAnnotation.elementClassName();
+		CollectionDescriptor collectionDescriptor = new CollectionDescriptor();
+		ClassDescriptor classDescriptor = mappingDescriptor.getClassDescriptorByName(targetClass.getName());
+
+		//TODO : This check can be done later by AbstractMapperImpl
+		if (classDescriptor == null)
+			throw new InitMapperException(
+					"Unable to reference class "
+							+ targetClass.getName()
+							+ " as a child node since it has not been registered, ordering perhaps?");
+		
+		collectionDescriptor.setFieldName(fieldName);
+		
+		if (collectionAnnotation.jcrName() != null && ! collectionAnnotation.jcrName().equals(""))
+		{
+		   collectionDescriptor.setJcrName(collectionAnnotation.jcrName());
+		}
+		else
+		{
+		   collectionDescriptor.setJcrName(fieldName);
+		}
+		
+		Node annotationNode = (Node) targetClass.getAnnotation(Node.class);
+		collectionDescriptor.setProxy(collectionAnnotation.proxy());
+		
+		collectionDescriptor.setAutoInsert(collectionAnnotation.autoInsert());
+		collectionDescriptor.setAutoRetrieve(collectionAnnotation.autoRetrieve());
+		collectionDescriptor.setAutoUpdate(collectionAnnotation.autoUpdate());
+		collectionDescriptor.setCollectionClassName(collectionClassName);
+		if (! collectionAnnotation.elementClassName().equals(Object.class))
+		{
+			collectionDescriptor.setElementClassName(collectionAnnotation.elementClassName().getName());
+		}
+		else
+		{
+		    collectionDescriptor.setElementClassName(targetClass.getName());
+		}
+		
+		collectionDescriptor.setCollectionConverter(collectionAnnotation.collectionConverter().getName());
+		
+		collectionDescriptor.setJcrType(annotationNode.jcrType());
+		collectionDescriptor.setJcrSameNameSiblings(collectionAnnotation.jcrSameNameSiblings());
+		collectionDescriptor.setJcrAutoCreated(collectionAnnotation.jcrAutoCreated());
+		collectionDescriptor.setJcrProtected(collectionAnnotation.jcrProtected());
+		collectionDescriptor.setJcrOnParentVersion(collectionAnnotation.jcrOnParentVersion());
+		collectionDescriptor.setJcrMandatory(collectionAnnotation.jcrMandatory());
+		
+
+		descriptor.addCollectionDescriptor(collectionDescriptor);
+	}
+	
+	private void addBeanDescriptor(ClassDescriptor classDescriptor, String fieldName, Bean beanAnnotation) {
+		BeanDescriptor beanDescriptor = new BeanDescriptor();
+		beanDescriptor.setFieldName(fieldName);
+		if (beanAnnotation.jcrName() != null && ! beanAnnotation.jcrName().equals(""))
+		{
+		   beanDescriptor.setJcrName(beanAnnotation.jcrName());
+		}
+		else
+		{
+			beanDescriptor.setJcrName(fieldName);
+		}
+		
+		beanDescriptor.setProxy(beanAnnotation.proxy());				
+		beanDescriptor.setConverter(beanAnnotation.converter().getName());
+		beanDescriptor.setAutoInsert(beanAnnotation.autoInsert());
+		beanDescriptor.setAutoRetrieve(beanAnnotation.autoRetrieve());
+		beanDescriptor.setAutoUpdate(beanAnnotation.autoUpdate());
+		beanDescriptor.setJcrType(beanAnnotation.jcrType());
+		beanDescriptor.setJcrAutoCreated(beanAnnotation.jcrAutoCreated());
+		beanDescriptor.setJcrMandatory(beanAnnotation.jcrMandatory());
+		beanDescriptor.setJcrOnParentVersion(beanAnnotation.jcrOnParentVersion());
+		beanDescriptor.setJcrProtected(beanAnnotation.jcrProtected());			            
+		beanDescriptor.setJcrSameNameSiblings(beanAnnotation.jcrSameNameSiblings());				
+
+		classDescriptor.addBeanDescriptor(beanDescriptor);
+	}
+
+
+	private void addFieldDescriptor(ClassDescriptor classDescriptor, String fieldName, Field fieldAnnotation) 
+	{
+				
+		FieldDescriptor fieldDescriptor = new FieldDescriptor();				
+		fieldDescriptor.setFieldName(fieldName);
+		if ((fieldAnnotation.jcrName() != null) && (!fieldAnnotation.jcrName().equals("")))
+		{
+			fieldDescriptor.setJcrName(fieldAnnotation.jcrName());	
+		}
+		else
+		{
+			fieldDescriptor.setJcrName(fieldName);	
+		}
+		fieldDescriptor.setId(fieldAnnotation.id());				
+		fieldDescriptor.setPath(fieldAnnotation.path());
+		fieldDescriptor.setUuid(fieldAnnotation.uuid());
+		
+		// It is not possible to set a null value into an annotation attribute.
+		// If the converter == Object.class, it should be considered as null
+		if (! fieldAnnotation.converter().equals(Object.class))
+		{
+		    fieldDescriptor.setConverter(fieldAnnotation.converter().getName());
+		}
+		
+		// It is not possible to set a null value into an annotation attribute.
+		// If the jcrDefaultValue value is an empty string => it should be considered as null
+		if ((fieldAnnotation.jcrDefaultValue() != null) && (!fieldAnnotation.jcrDefaultValue().equals("")))
+		{
+		     fieldDescriptor.setJcrDefaultValue(fieldAnnotation.jcrDefaultValue());
+		}
+		
+		// It is not possible to set a null value into an annotation attribute.
+		// If the jcrValueConstraints value is an empty string => it should be considered as null
+		if ((fieldAnnotation.jcrValueConstraints() != null) && (!fieldAnnotation.jcrValueConstraints().equals("")))
+		{	
+		     fieldDescriptor.setJcrValueConstraints(fieldAnnotation.jcrValueConstraints());
+		}
+		
+		// It is not possible to set a null value into an annotation attribute.
+		// If the jcrProperty value is an empty string => it should be considered as null
+		if ((fieldAnnotation.jcrType() != null) && (!fieldAnnotation.jcrType().equals("")))
+		{
+		    fieldDescriptor.setJcrType(fieldAnnotation.jcrType());
+		}
+		
+		fieldDescriptor.setJcrAutoCreated(fieldAnnotation.jcrAutoCreated());
+		fieldDescriptor.setJcrMandatory(fieldAnnotation.jcrMandatory());
+		fieldDescriptor.setJcrOnParentVersion(fieldAnnotation.jcrOnParentVersion());
+		fieldDescriptor.setJcrProtected(fieldAnnotation.jcrProtected());
+		fieldDescriptor.setJcrMultiple(fieldAnnotation.jcrMultiple());
+		
+		//fieldDescriptor.setJcrType(value)
+		classDescriptor.addFieldDescriptor(fieldDescriptor);

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 MOV43 MOV42 MOV44 MOV44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 MOV44 INS8 MOV83 MOV39 UPD42 MOV42 INS44 INS44 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV44 INS44 INS44 INS44 INS8 UPD42 INS44 INS44 INS8 UPD42 INS44 INS44 INS8 INS42 INS42 INS32 INS60 MOV60 INS25 INS42 INS43 INS42 INS43 INS42 MOV60 MOV21 MOV21 MOV25 MOV25 MOV25 MOV21 MOV21 INS41 INS43 INS42 INS60 INS25 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 MOV21 MOV21 INS43 INS42 INS43 INS42 INS60 INS24 INS43 INS42 INS43 INS42 MOV60 MOV54 MOV60 INS70 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 MOV60 MOV60 MOV25 INS21 MOV25 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 INS25 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 UPD42 UPD43 MOV43 UPD42 MOV42 INS43 INS42 MOV60 INS21 MOV25 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 UPD42 UPD43 MOV43 UPD42 MOV42 UPD43 MOV43 UPD42 MOV42 MOV60 MOV21 MOV25 MOV21 MOV21 MOV21 MOV25 MOV25 MOV25 MOV25 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS42 INS42 INS57 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 MOV44 MOV42 INS8 INS42 INS42 INS42 INS32 INS38 INS8 INS8 UPD42 UPD42 MOV42 INS32 INS8 UPD42 UPD42 INS43 INS42 INS42 INS33 UPD42 INS42 INS33 INS21 INS21 INS41 INS53 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS11 INS42 INS33 INS60 INS21 MOV21 UPD42 INS42 UPD42 UPD42 UPD42 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS60 INS25 INS60 INS25 MOV60 INS25 MOV60 INS25 MOV60 INS25 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS32 MOV21 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS21 UPD42 UPD42 MOV42 UPD42 INS42 INS7 INS32 INS42 INS14 UPD42 UPD42 INS43 INS32 INS43 INS59 INS32 INS40 INS42 INS42 INS42 INS34 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 MOV27 INS8 INS27 MOV8 INS27 INS8 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 MOV57 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS57 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS27 UPD42 UPD42 UPD42 UPD42 UPD42 INS57 UPD42 INS32 INS42 INS42 INS42 INS57 INS42 INS42 INS14 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 UPD42 UPD42 MOV21 UPD42 INS42 INS33 UPD42 INS42 INS33 MOV21 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 INS43 INS42 INS42 INS42 INS42 INS45 INS32 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 MOV32 INS42 INS43 INS43 INS32 INS42 INS2 INS42 INS57 INS32 INS2 INS42 INS57 INS32 INS2 INS42 INS57 INS32 MOV42 MOV42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS42 MOV32 UPD42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL83 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL44 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL70 DEL8 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL44 DEL42 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL70 DEL8