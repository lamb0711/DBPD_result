JCR-1638: Redundant calls to RepositoryService.getChildInfos

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@701388 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ChildInfo;
-    private ChildNodeEntries childNodeEntries;
+    private final ChildNodeEntries childNodeEntries;
-    private ChildNodeAttic childNodeAttic;
+    private final ChildNodeAttic childNodeAttic;
-    private NodeEntryImpl(NodeEntryImpl parent, Name name, String uniqueID, EntryFactory factory) {
+    private NodeEntryImpl(NodeEntryImpl parent, Name name, String uniqueID,
+                          EntryFactory factory) {
+        childNodeEntries = new ChildNodeEntriesImpl(this, factory, null);
-     *
-     * @return
+     * @return the entry corresponding to the root node.
-     *
-     * @return
+     * @return the created entry.
-            childNodeEntries.setStatus(ChildNodeEntries.STATUS_INVALIDATED);
+            childNodeEntries.invalidate();
-
-        if (getStatus() != Status.STALE_DESTROYED && parent.childNodeEntries != null) {
+        if (getStatus() != Status.STALE_DESTROYED) {
-            NodeEntry cne = (entry.childNodeEntries == null) ? null : entry.getNodeEntry(name, index, false);
+            NodeEntry cne = entry.getNodeEntry(name, index, false);
-                if (entry.childNodeEntries != null) {
-                    List siblings = entry.childNodeEntries.get(name);
-                    if (entry.containsAtticChild(siblings, name, index)) {
-                        throw new PathNotFoundException(path.toString());
-                    }
+                List siblings = entry.childNodeEntries.get(name);
+                if (entry.containsAtticChild(siblings, name, index)) {
+                    throw new PathNotFoundException(path.toString());
-                NodeId parentId = entry.getId();
+                NodeId parentId = entry.getWorkspaceId();
-        try {
-            List namedEntries = childNodeEntries().get(nodeName);
-            if (namedEntries.isEmpty()) {
-                return false;
-            } else {
-                return EntryValidation.containsValidNodeEntry(namedEntries.iterator());
-            }
-        } catch (RepositoryException e) {
-            log.debug("Unable to determine if a child node with name " + nodeName + " exists.");
+        List namedEntries = childNodeEntries.get(nodeName);
+        if (namedEntries.isEmpty()) {
+        } else {
+            return EntryValidation.containsValidNodeEntry(namedEntries.iterator());
-        // TODO: avoid loading the child-infos if childNodeEntries == null
-        List entries = childNodeEntries().get(nodeName);
+        List entries = childNodeEntries.get(nodeName);
-        } else if (loadIfNotFound
+        }
+
+        if (cne == null && loadIfNotFound
-
-        for (Iterator it = childNodeEntries().iterator(); it.hasNext();) {
+        for (Iterator it = getCompleteChildNodeEntries().iterator(); it.hasNext();) {
-        List namedEntries = childNodeEntries().get(nodeName);
+        List namedEntries = getCompleteChildNodeEntries().get(nodeName);
-        if (childNodeEntries == null) {
-            childNodeEntries = new ChildNodeEntriesImpl(this, factory, childInfos);
+        if (childNodeAttic.isEmpty()) {
+            ((ChildNodeEntriesImpl) childNodeEntries).update(childInfos);
-            ((ChildNodeEntriesImpl) childNodeEntries).reload(childInfos);
+            // filter those entries that have been moved to the attic.
+            List remaining = new ArrayList();
+            while (childInfos.hasNext()) {
+                ChildInfo ci = (ChildInfo) childInfos.next();
+                if (!childNodeAttic.contains(ci.getName(), ci.getIndex(), ci.getUniqueID())) {
+                    remaining.add(ci);
+                }
+            }
+            ((ChildNodeEntriesImpl) childNodeEntries).update(remaining.iterator());
-     * @see NodeEntry#addNodeEntry(Name, String, int)
+     * @see NodeEntry#getOrAddNodeEntry(Name,int,String)
-    public NodeEntry addNodeEntry(Name nodeName, String uniqueID, int index) throws RepositoryException {
-        return internalAddNodeEntry(nodeName, uniqueID, index, childNodeEntries());
+    public NodeEntry getOrAddNodeEntry(Name nodeName, int index, String uniqueID) throws RepositoryException {
+        NodeEntry ne = lookupNodeEntry(uniqueID, nodeName, index);
+        if (ne == null) {
+            ne = internalAddNodeEntry(nodeName, uniqueID, index);
+        } else {
+            log.debug("Child NodeEntry already exists -> didn't add.");
+        }
+        return ne;
-        NodeEntry entry = internalAddNodeEntry(nodeName, uniqueID, Path.INDEX_UNDEFINED, childNodeEntries());
+        NodeEntry entry = internalAddNodeEntry(nodeName, uniqueID, Path.INDEX_UNDEFINED);
-     *
-     * @param childEntries
-     * @return
+     * @return the added entry.
-    private NodeEntry internalAddNodeEntry(Name nodeName, String uniqueID,
-                                           int index, ChildNodeEntries childEntries) {
+    private NodeEntry internalAddNodeEntry(Name nodeName, String uniqueID, int index) {
-        childEntries.add(entry, index);
+        childNodeEntries.add(entry, index);
-     * @see NodeEntry#addPropertyEntry(Name)
+     * @see NodeEntry#getOrAddPropertyEntry(Name)
-    public PropertyEntry addPropertyEntry(Name propName) throws ItemExistsException {
-        // TODO: check for existing prop.
-        return internalAddPropertyEntry(propName, true);
+    public PropertyEntry getOrAddPropertyEntry(Name propName) throws ItemExistsException {
+        PropertyEntry pe = lookupPropertyEntry(propName);
+        if (pe == null) {
+            pe = internalAddPropertyEntry(propName, true);
+        }  else {
+            log.debug("Child PropertyEntry already exists -> didn't add.");
+        }
+        return pe;
-     * @return
+     * @return the added entry.
-            parent.childNodeEntries().reorder(this, beforeEntry);
+            parent.childNodeEntries.reorder(this, beforeEntry);
-            NodeEntry previousBefore = parent.childNodeEntries().reorder(this, beforeEntry);
+            NodeEntry previousBefore = parent.childNodeEntries.reorder(this, beforeEntry);
-       NodeEntryImpl entry = (NodeEntryImpl) parent.childNodeEntries().remove(this);
+       NodeEntryImpl entry = (NodeEntryImpl) parent.childNodeEntries.remove(this);
-       parent.childNodeEntries().add(this);
+       parent.childNodeEntries.add(this);
-                if (childNodeEntries == null) {
-                    // childNodeEntries not yet loaded -> ignore
-                    return;
-                }
-
-                    internalAddNodeEntry(eventName, uniqueChildID, index, childNodeEntries);
+                    internalAddNodeEntry(eventName, uniqueChildID, index);
-        } // else: propEntry has never been moved to the attic (see 'addPropertyEntry')
+        } // else: propEntry has never been moved to the attic (see 'getOrAddPropertyEntry')
-     *
-     * @return
+     * @return <code>true</code> if the given oldName and oldIndex match
+     * {@link #getWorkspaceName()} and {@link #getWorkspaceIndex()}, respectively.
-     *
-     * @return
+     * @return <code>true</code> if the given oldName matches
+     * {@link #getWorkspaceName()}.
-     * @return
+     * @return the entry or <code>null</code> if building the corresponding
+     * <code>NodeState</code> failed with <code>ItemNotFoundException</code>.
-     * @return
+     * @return the entry or <code>null</code> if building the corresponding
+     * <code>PropertyState</code> failed with <code>ItemNotFoundException</code>.
-     * @return
+     * @return the entry or <code>null</code> if the matching entry has a status
+     * <code>Status#NEW</code>.
-            if (child == null && childNodeEntries != null) {
+            if (child == null) {
-    private ChildNodeEntries childNodeEntries() throws InvalidItemStateException, RepositoryException {
+    private ChildNodeEntries getCompleteChildNodeEntries() throws InvalidItemStateException, RepositoryException {
-            if (childNodeEntries == null) {
-                childNodeEntries = new ChildNodeEntriesImpl(this, factory);
-            } else if (childNodeEntries.getStatus() == ChildNodeEntries.STATUS_INVALIDATED) {
-                childNodeEntries.reload();
-            }
+            childNodeEntries.reload();
-     * @return
+     * @return iterator over all children entries, that currently are loaded
+     * with this NodeEntry
-        if (childNodeEntries != null) {
+        synchronized (childNodeEntries) {
-        List sns = childNodeEntries().get(cne.getName());
+        List sns = childNodeEntries.get(cne.getName());
-     * Returns true if the attic contains a matching child entry or if any of
-     * the remaining child entries present in the siblings list has been modified
-     * in a way that its original index is equal to the given child index.
+     * Returns <code>true</code> if the attic contains a matching child entry or
+     * if any of the remaining child entries present in the siblings list has
+     * been modified in a way that its original index is equal to the given
+     * child index.
-     * @return
+     * @return <code>true</code> if there is a child entry in the attic that
+     * matches the given name/index or if the siblings list contain a reordered
+     * entry that matches.
-        List sns = parent.childNodeEntries().get(name);
+        List sns = parent.getCompleteChildNodeEntries().get(name);
-            parent.childNodeEntries().remove(this);
+            parent.childNodeEntries.remove(this);
-                parent.childNodeEntries().add(this, revertInfo.oldIndex);
+                parent.childNodeEntries.add(this, revertInfo.oldIndex);
-        private NodeEntryImpl oldParent;
-        private Name oldName;
-        private int oldIndex;
+        private final NodeEntryImpl oldParent;
+        private final Name oldName;
+        private final int oldIndex;

INS26 INS40 MOV44 INS83 INS83 MOV8 UPD42 INS42 INS8 UPD42 INS21 MOV25 MOV8 INS60 INS25 INS41 INS60 INS25 INS41 INS51 INS83 INS83 INS83 INS7 INS66 INS66 MOV27 INS32 MOV69 INS43 INS59 INS27 INS8 INS8 INS42 INS66 INS43 INS59 INS27 MOV8 INS8 INS42 INS66 MOV43 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 MOV8 INS66 INS66 INS42 MOV8 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS42 INS14 INS27 INS42 INS42 INS60 INS61 INS21 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 UPD42 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS40 INS68 INS68 INS68 MOV43 INS52 INS42 INS33 MOV42 MOV42 INS27 MOV38 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS7 INS32 MOV43 INS42 INS42 INS42 MOV27 MOV42 INS42 UPD42 MOV32 INS27 MOV42 UPD42 UPD42 INS42 INS42 INS14 INS42 INS42 INS60 INS25 INS36 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS45 INS42 MOV32 INS42 INS42 INS45 INS40 INS40 UPD42 INS40 MOV60 MOV25 INS42 INS33 UPD42 INS43 INS43 INS59 INS38 INS8 INS11 INS42 INS42 MOV42 MOV42 MOV42 MOV42 INS40 INS42 INS42 INS42 INS11 INS32 INS21 INS43 INS42 INS40 INS43 INS32 INS42 INS42 INS32 INS32 INS32 INS32 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL33 DEL27 DEL27 DEL40 DEL33 DEL27 DEL36 DEL33 DEL16 DEL40 DEL33 DEL27 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL32 DEL42 DEL33 DEL27 DEL42 DEL52 DEL42 DEL42 DEL14 DEL7 DEL21 DEL32 DEL32 DEL41 DEL42 DEL32 DEL42 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL41 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL52 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL40 DEL27 DEL25 DEL25 DEL8 DEL42 DEL33 DEL27 DEL25 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32