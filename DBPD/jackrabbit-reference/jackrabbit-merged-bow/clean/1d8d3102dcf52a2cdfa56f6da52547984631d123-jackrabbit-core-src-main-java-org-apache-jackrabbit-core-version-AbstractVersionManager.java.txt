JCR-1476: Restore to base version throws NullPointerException

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@638303 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
+     * Node type registry.
+     */
+    protected final NodeTypeRegistry ntReg;
+
+    /**
+    public AbstractVersionManager(NodeTypeRegistry ntReg) {
+        this.ntReg = ntReg;
+    }
+
+
+    /**
+     * Creates an {@link InternalVersionItem} based on the {@link NodeState}
+     * identified by <code>id</code>.
+     *
+     * @param id    the node id of the version item.
+     * @return the version item or <code>null</code> if there is no node state
+     *         with the given <code>id</code>.
+     * @throws RepositoryException if an error occurs while reading from the
+     *                             version storage.
+     */
+    protected InternalVersionItem createInternalVersionItem(NodeId id)
+            throws RepositoryException {
+        try {
+            if (stateMgr.hasItemState(id)) {
+                NodeState state = (NodeState) stateMgr.getItemState(id);
+                NodeStateEx pNode = new NodeStateEx(stateMgr, ntReg, state, null);
+                NodeId parentId = pNode.getParentId();
+                InternalVersionItem parent = getItem(parentId);
+                Name ntName = state.getNodeTypeName();
+                if (ntName.equals(NameConstants.NT_FROZENNODE)) {
+                    return new InternalFrozenNodeImpl(this, pNode, parent);
+                } else if (ntName.equals(NameConstants.NT_VERSIONEDCHILD)) {
+                    return new InternalFrozenVHImpl(this, pNode, parent);
+                } else if (ntName.equals(NameConstants.NT_VERSION)) {
+                    return ((InternalVersionHistory) parent).getVersion(id);
+                } else if (ntName.equals(NameConstants.NT_VERSIONHISTORY)) {
+                    return new InternalVersionHistoryImpl(this, pNode);
+                } else {
+                    return null;
+                }
+            } else {
+                return null;
+            }
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        }
+    }

INS26 INS40 INS23 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS42 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS54 INS66 INS42 INS7 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS8 INS12 INS22 INS42 INS42 INS42 INS25 INS44 INS8 INS52 INS42 INS32 INS8 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS41 INS42 INS14 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS33 INS43 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS41 INS32 INS8 INS25 INS42 INS43 INS32 INS43 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS40 INS41 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS43 INS52 INS42 INS42 INS14 INS42 INS42 INS40 INS41 INS32 INS8 INS8 INS42 INS43 INS52 INS42 INS42 INS32 INS42 INS42 INS40 INS41 INS41 INS42 INS36 INS42 INS42 INS14 INS33 INS11 INS43 INS52 INS42 INS43 INS42 INS42 INS42