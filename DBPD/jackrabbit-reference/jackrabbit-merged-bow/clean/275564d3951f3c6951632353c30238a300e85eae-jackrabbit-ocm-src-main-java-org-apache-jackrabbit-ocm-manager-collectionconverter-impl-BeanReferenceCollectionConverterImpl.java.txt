- working on JCR-1339 : better support for Map. It is important to define an ID field in the class used for the Map elements. This ID will be used as a key in the map. 
- Rename ManagedHashMap into ManageableHashMap in ordrer to follow the same naming convention.
- Now, it is not necessary to define the ElementClassName if the Collection or the Map are parametrized like List<MyClass>

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@646938 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableCollectionUtil;
+import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableObjectsUtil;
+import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableObjects;
-                                      ManageableCollection collection) throws RepositoryException {
-        addUuidProperties(session, parentNode, collectionDescriptor, collection);
+                                      ManageableObjects objects) throws RepositoryException {
+        addUuidProperties(session, parentNode, collectionDescriptor, objects);
-                                 ManageableCollection collection) throws RepositoryException
+                                 ManageableObjects objects) throws RepositoryException
-        if (collection == null) {
+        if (objects == null) {
-        addUuidProperties(session, parentNode, collectionDescriptor, collection);
+        addUuidProperties(session, parentNode, collectionDescriptor, objects);
-    protected ManageableCollection doGetCollection(Session session,
+    protected ManageableObjects doGetCollection(Session session,
-            ManageableCollection collection = ManageableCollectionUtil.getManageableCollection(collectionFieldClass);
+            ManageableObjects objects = ManageableObjectsUtil.getManageableObjects(collectionFieldClass);
+
+            // For collection of bean references, only Collections are supported
+            if (! (objects instanceof ManageableCollection))
+            {
+
+            	throw new JcrMappingException("Impossible to retrieve the attribute "
+            			+ collectionDescriptor.getFieldName() + " in the class "
+            			+ collectionDescriptor.getClassDescriptor().getClassName()
+            			+  " because it is not a collection");
+            }
-                String path = session.getNodeByUUID(uuid).getPath();    			
+                String path = session.getNodeByUUID(uuid).getPath();
-                collection.addObject(object);
+                ((ManageableCollection) objects).addObject(object);
-            return collection;
+            return objects;
-	private void addUuidProperties(Session session, Node parentNode, CollectionDescriptor collectionDescriptor, ManageableCollection collection) throws UnsupportedRepositoryOperationException, RepositoryException, VersionException, LockException, ConstraintViolationException {
+	private void addUuidProperties(Session session, Node parentNode,
+			CollectionDescriptor collectionDescriptor,
+			ManageableObjects objects)
+	        throws UnsupportedRepositoryOperationException, RepositoryException, VersionException, LockException, ConstraintViolationException {
-            if (collection == null) {
+            if (objects == null) {
-            Value[] values = new Value[collection.getSize()];
+            Value[] values = new Value[objects.getSize()];
-            Iterator collectionIterator = collection.getIterator();
-            for (int i = 0; i < collection.getSize(); i++) {
+            Iterator collectionIterator = objects.getIterator();
+            for (int i = 0; i < objects.getSize(); i++) {

INS26 UPD40 INS40 INS43 UPD43 UPD42 UPD43 UPD42 INS42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS25 INS43 INS38 INS8 UPD42 MOV5 INS42 UPD42 INS36 INS53 UPD42 UPD42 UPD42 INS62 INS14 MOV5 UPD42 UPD42 INS42 MOV43 INS43 INS27 INS36 UPD42 INS42 INS45 INS32 INS45 INS32 INS45 INS11 INS42 INS42 INS32 INS42 MOV43 INS42 INS42 INS42 DEL42