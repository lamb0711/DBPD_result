JCR-1588: 283 Access Control

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@689499 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.api.jsr283.security.AccessControlEntry;
-import org.apache.jackrabbit.api.jsr283.security.AccessControlPolicy;
-import javax.jcr.ItemNotFoundException;
-public abstract class AbstractAccessControlProvider implements AccessControlProvider {
+public abstract class AbstractAccessControlProvider implements AccessControlProvider, AccessControlUtils {
-    private final String policyName;
-    private final String policyDesc;
+    public static final String PARAM_OMIT_DEFAULT_PERMISSIONS = "omit-default-permission";
-     * Returns the system session this provider has been created for.
+     * the system session this provider has been created for.
-    private Principal everyone;
-        this(AbstractAccessControlProvider.class.getName() + ": default Policy", null);
-    }
-
-    protected AbstractAccessControlProvider(String defaultPolicyName, String defaultPolicyDesc) {
-        policyName = defaultPolicyName;
-        policyDesc = defaultPolicyDesc;
-     *
+     * Throws <code>IllegalStateException</code> if the provider has not
+     * been initialized or has been closed.
-     * Simple test if the specified path points to an item that defines AC
-     * information.
-     * 
-     * @param absPath
-     * @return
-     */
-    protected abstract boolean isAcItem(Path absPath) throws RepositoryException;
-
-    /**
+     * Returns compiled permissions for the administrator i.e. permissions
+     * that grants everything and returns {@link PrivilegeRegistry#ALL}
+     * upon {@link CompiledPermissions#getPrivileges(Path)} for all
+     * paths.
-     * @param principals
-     * @return
-     */
-    protected static boolean isAdminOrSystem(Set principals) {
-        for (Iterator it = principals.iterator(); it.hasNext();) {
-            Principal p = (Principal) it.next();
-            if (p instanceof AdminPrincipal || p instanceof SystemPrincipal) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    /**
-     *
-     * @return
+     * @return an implementation of <code>CompiledPermissions</code> that
+     * grants everything and always returns {@link PrivilegeRegistry#ALL}
+     * upon {@link CompiledPermissions#getPrivileges(Path)}.
-            public boolean grants(Path absPath, int permissions) throws RepositoryException {
+            public boolean grants(Path absPath, int permissions) {
-            public int getPrivileges(Path absPath) throws RepositoryException {
+            public int getPrivileges(Path absPath) {
-            public boolean canReadAll() throws RepositoryException {
+            public boolean canReadAll() {
-     * Simple implementation to determine if the given set of principals
-     * only will result in read-only access.
+     * Returns compiled permissions for a read-only user i.e. permissions
+     * that grants READ permission for all non-AC items.
-     * @param principals
-     * @return true if the given set only contains the everyone group.
-     */
-    protected boolean isReadOnly(Set principals) {
-        // TODO: improve. need to detect if 'anonymous' is included.
-        return principals.size() == 1 && principals.contains(everyone);
-    }
-
-    /**
-     *
-     * @return
+     * @return an implementation of <code>CompiledPermissions</code> that
+     * grants READ permission for all non-AC items.
-            public boolean canReadAll() throws RepositoryException {
+            public boolean canReadAll() {
+    //-------------------------------------------------< AccessControlUtils >---
+    /**
+     * @see AccessControlUtils#isAdminOrSystem(Set)
+     */
+    public boolean isAdminOrSystem(Set principals) {
+        for (Iterator it = principals.iterator(); it.hasNext();) {
+            Principal p = (Principal) it.next();
+            if (p instanceof AdminPrincipal || p instanceof SystemPrincipal) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * @see AccessControlUtils#isReadOnly(Set)
+     */
+    public boolean isReadOnly(Set principals) {
+        // TODO: find ways to determine read-only status
+        return false;
+    }
+
-    public void init(Session systemSession, Map options) throws RepositoryException {
+    public void init(Session systemSession, Map configuration) throws RepositoryException {
-
-        everyone = session.getPrincipalManager().getEveryone();
-
-
-    /**
-     * @see AccessControlProvider#getPolicy(Path)
-     * @param absPath
-     */
-    public AccessControlPolicy getPolicy(Path absPath) throws ItemNotFoundException, RepositoryException {
-        checkInitialized();
-        return new AccessControlPolicy() {
-            public String getName() throws RepositoryException {
-                return policyName;
-            }
-            public String getDescription() throws RepositoryException {
-                return policyDesc;
-            }
-        };
-    }
-
-    /**
-     * @see AccessControlProvider#getAccessControlEntries(Path)
-     * @param absPath
-     */
-    public AccessControlEntry[] getAccessControlEntries(Path absPath) throws RepositoryException {
-        checkInitialized();
-        // always empty array, since aces will never be changed using the api.
-        return new AccessControlEntry[0];
-    }
-
-    /**
-     * @see AccessControlProvider#getEditor(Session)
-     */
-    public AccessControlEditor getEditor(Session session) {
-        checkInitialized();
-        // not editable at all: policy is always the default and cannot be
-        // changed using the JCR API.
-        return null;
-    }

MOV31 MOV31 INS43 INS42 UPD83 INS83 MOV43 UPD83 INS39 INS42 MOV44 MOV8 UPD42 INS45 INS65 INS65 INS65 UPD65 UPD42 UPD66 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS68 INS67 INS68 INS67 INS68 INS42 INS42 INS69 UPD42 UPD42 INS42 INS42 INS42 INS42 MOV69 INS42 INS42 INS42 INS42 MOV69 INS43 UPD43 INS8 INS42 UPD42 INS41 INS9 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL57 DEL42 DEL32 DEL45 DEL27 DEL33 DEL17 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL65 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL66 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL65 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL33 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL68 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL68 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL31