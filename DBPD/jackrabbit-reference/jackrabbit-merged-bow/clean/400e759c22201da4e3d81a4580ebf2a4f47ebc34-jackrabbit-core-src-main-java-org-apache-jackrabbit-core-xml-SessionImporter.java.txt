JCR-2710 Add support for large number of users in a group
UserImporter copes with node structure for group membership now

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@987181 13f79535-47bb-0310-9956-ffa450edef68

-    private final List<ProtectedNodeImporter> pnImporters = new ArrayList();
-    /**
-     * Available importers for protected properties.
-     */
-    private final List<ProtectedPropertyImporter> ppImporters = new ArrayList();
+    private final List<ProtectedItemImporter> pItemImporters = new ArrayList();
-            List<ProtectedNodeImporter> ln = config.getProtectedNodeImporters();
-            for (ProtectedNodeImporter pni : ln) {
-                if (pni.init(session, session, false, uuidBehavior, refTracker)) {
-                    pnImporters.add(pni);
-                }
-            }
-            List<ProtectedPropertyImporter> lp = config.getProtectedPropertyImporters();
-            for (ProtectedPropertyImporter ppi : lp) {
-                if (ppi.init(session, session, false, uuidBehavior, refTracker)) {
-                    ppImporters.add(ppi);
+            List<ProtectedItemImporter> iList = (List<ProtectedItemImporter>) config.getProtectedItemImporters();
+            for (ProtectedItemImporter importer : iList) {
+                if (importer.init(session, session, false, uuidBehavior, refTracker)) {
+                    pItemImporters.add(importer);
-        if (pnImporters.isEmpty()) {
-            ProtectedNodeImporter def = new DefaultProtectedNodeImporter();
+        if (pItemImporters.isEmpty()) {
+            ProtectedItemImporter def = new DefaultProtectedItemImporter();
-                pnImporters.add(def);
-            }
-        }
-        if (ppImporters.isEmpty()) {
-            DefaultProtectedPropertyImporter def = new DefaultProtectedPropertyImporter();
-            if (def.init(session, session, false, uuidBehavior, refTracker)) {
-                ppImporters.add(def);
+                pItemImporters.add(def);
-            // Notify the ProtectedNodeImporter about the start of a item
-            // tree that is protected by this parent. If it potentially is
-            // able to deal with it, notify it about the child node.
-            for (ProtectedNodeImporter pni : pnImporters) {
-                if (pni.start(parent)) {
-                    log.debug("Protected node -> delegated to ProtectedNodeImporter");
-                    pnImporter = pni;
-                    pnImporter.startChildInfo(nodeInfo, propInfos);
-                    break;
-                } /* else: p-i-Importer isn't able to deal with the protected tree.
+            if (pnImporter != null) {
+                // pnImporter was already started (current nodeInfo is a sibling)
+                // notify it about this child node.
+                pnImporter.startChildInfo(nodeInfo, propInfos);
+            } else {
+                // no importer defined yet:
+                // test if there is a ProtectedNodeImporter among the configured
+                // importers that can handle this.
+                // if there is one, notify the ProtectedNodeImporter about the
+                // start of a item tree that is protected by this parent. If it
+                // potentially is able to deal with it, notify it about the child node.
+                for (ProtectedItemImporter pni : pItemImporters) {
+                    if (pni instanceof ProtectedNodeImporter && ((ProtectedNodeImporter) pni).start(parent)) {
+                        log.debug("Protected node -> delegated to ProtectedNodeImporter");
+                        pnImporter = (ProtectedNodeImporter) pni;
+                        pnImporter.startChildInfo(nodeInfo, propInfos);
+                        break;
+                    } /* else: p-i-Importer isn't able to deal with the protected tree.
+                }
-                for (ProtectedPropertyImporter ppi : ppImporters) {
-                    if (ppi.handlePropInfo(node, pi, def)) {
+                for (ProtectedItemImporter ppi : pItemImporters) {
+                    if (ppi instanceof ProtectedPropertyImporter && ((ProtectedPropertyImporter) ppi).handlePropInfo(node, pi, def)) {
-        for (ProtectedPropertyImporter ppi : ppImporters) {
+        for (ProtectedItemImporter ppi : pItemImporters) {
-        for (ProtectedNodeImporter pni : pnImporters) {
-            pni.processReferences();
-        }

UPD74 UPD43 UPD42 UPD42 UPD42 UPD42 INS25 UPD43 UPD74 MOV74 UPD42 UPD43 INS27 INS8 INS8 UPD42 INS43 UPD42 INS11 UPD43 UPD42 UPD42 INS42 INS33 INS21 MOV70 INS42 UPD74 MOV74 INS32 UPD42 UPD43 INS32 UPD42 UPD42 INS43 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS27 INS42 INS27 UPD42 UPD42 INS62 INS32 INS62 INS32 INS42 MOV43 INS36 MOV42 MOV42 INS42 MOV43 INS36 MOV42 MOV42 MOV42 MOV42 INS11 INS11 INS11 MOV43 INS42 MOV43 INS42 MOV43 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70