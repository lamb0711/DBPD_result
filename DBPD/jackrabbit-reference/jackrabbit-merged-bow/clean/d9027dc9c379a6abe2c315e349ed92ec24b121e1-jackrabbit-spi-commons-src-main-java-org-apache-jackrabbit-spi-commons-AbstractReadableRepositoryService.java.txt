JCR-2087: Upgrade to Java 5 as the base platform

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@787219 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ItemInfo;
-import org.apache.jackrabbit.spi.commons.nodetype.compact.QNodeTypeDefinitionsBuilderImpl;
-    protected static final Set WRITE_ACTIONS = new HashSet(Arrays.asList(
-            new String[]{"add_node", "set_property", "remove"}));
+    protected static final Set<String> WRITE_ACTIONS = new HashSet<String>(
+            Arrays.asList("add_node", "set_property", "remove"));
-    protected final Map descriptors;
+    protected final Map<String, String> descriptors;
-    protected final Map nodeTypeDefs = new HashMap();
+    protected final Map<Name, QNodeTypeDefinition> nodeTypeDefs = new HashMap<Name, QNodeTypeDefinition>();
-    protected final List wspNames;
+    protected final List<String> wspNames;
-    public AbstractReadableRepositoryService(Map descriptors,
-                                             Map namespaces,
+    public AbstractReadableRepositoryService(Map<String, String> descriptors,
+                                             Map<String, String> namespaces,
-                                             List wspNames)
+                                             List<String> wspNames)
-        this.descriptors = Collections.unmodifiableMap(new HashMap(descriptors));
-        for (Iterator it = namespaces.entrySet().iterator(); it.hasNext(); ) {
-            Map.Entry entry = (Map.Entry) it.next();
-            this.namespaces.setMapping((String) entry.getKey(),
-                    (String) entry.getValue());
+        this.descriptors = Collections.unmodifiableMap(new HashMap<String, String>(descriptors));
+        for (Map.Entry<String, String> entry : namespaces.entrySet()) {
+            this.namespaces.setMapping(entry.getKey(), entry.getValue());
-        this.wspNames = Collections.unmodifiableList(new ArrayList(wspNames));
+        this.wspNames = Collections.unmodifiableList(new ArrayList<String>(wspNames));
-    public Iterator getItemInfos(SessionInfo sessionInfo, NodeId nodeId) throws
+    public Iterator<? extends ItemInfo> getItemInfos(SessionInfo sessionInfo, NodeId nodeId) throws
-    public Map getRepositoryDescriptors() throws RepositoryException {
+    public Map<String, String> getRepositoryDescriptors() throws RepositoryException {
-        return (String[]) wspNames.toArray(new String[wspNames.size()]);
+        return wspNames.toArray(new String[wspNames.size()]);
-        for (int i = 0; i < actions.length; i++) {
-            if (WRITE_ACTIONS.contains(actions[i])) {
+        for (String action : actions) {
+            if (WRITE_ACTIONS.contains(action)) {
-    public Iterator getQNodeTypeDefinitions(SessionInfo sessionInfo) throws
+    public Iterator<QNodeTypeDefinition> getQNodeTypeDefinitions(SessionInfo sessionInfo) throws
-    public Iterator getQNodeTypeDefinitions(SessionInfo sessionInfo, Name[] nodetypeNames)
+    public Iterator<QNodeTypeDefinition> getQNodeTypeDefinitions(SessionInfo sessionInfo, Name[] nodetypeNames)
-        List ntDefs = new ArrayList();
-        for (int i = 0; i < nodetypeNames.length; i++) {
-            Object def = nodeTypeDefs.get(nodetypeNames[i]);
+        List<QNodeTypeDefinition> ntDefs = new ArrayList<QNodeTypeDefinition>();
+        for (Name nodetypeName : nodetypeNames) {
+            QNodeTypeDefinition def = nodeTypeDefs.get(nodetypeName);
-                throw new RepositoryException("unknown node type: "
-                        + nodetypeNames[i]);
+                throw new RepositoryException("unknown node type: " + nodetypeName);
-    public Map getRegisteredNamespaces(SessionInfo sessionInfo) throws
+    public Map<String, String> getRegisteredNamespaces(SessionInfo sessionInfo) throws
-     * @throws UnsupportedRepositoryOperationException always.
+     * @throws UnsupportedRepositoryOperationException
+     *          always.
-    public Iterator merge(SessionInfo sessionInfo,
-                          NodeId nodeId,
-                          String srcWorkspaceName,
-                          boolean bestEffort) throws NoSuchWorkspaceException, AccessDeniedException, MergeException, LockException, InvalidItemStateException, RepositoryException {
+    public Iterator<NodeId> merge(SessionInfo sessionInfo,
+                                  NodeId nodeId,
+                                  String srcWorkspaceName,
+                                  boolean bestEffort) throws
+            NoSuchWorkspaceException, AccessDeniedException, MergeException,
+            LockException, InvalidItemStateException, RepositoryException {
-     * @throws UnsupportedRepositoryOperationException always.
+     * @throws UnsupportedRepositoryOperationException
+     *          always.
-    public Iterator merge(SessionInfo sessionInfo,
-                          NodeId nodeId,
-                          String srcWorkspaceName,
-                          boolean bestEffort,
-                          boolean isShallow) throws NoSuchWorkspaceException, AccessDeniedException, MergeException, LockException, InvalidItemStateException, RepositoryException {
+    public Iterator<NodeId> merge(SessionInfo sessionInfo,
+                                  NodeId nodeId,
+                                  String srcWorkspaceName,
+                                  boolean bestEffort,
+                                  boolean isShallow) throws
+            NoSuchWorkspaceException, AccessDeniedException, MergeException,
+            LockException, InvalidItemStateException, RepositoryException {
-                                  String language, Map namespaces, long limit,
+                                  String language, Map<String, String> namespaces, long limit,

MOV26 UPD40 INS74 INS74 INS74 INS74 INS74 INS74 INS74 INS74 INS74 INS74 INS74 MOV43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS74 INS74 INS74 INS70 MOV43 INS76 MOV43 INS43 INS43 INS70 MOV43 INS43 MOV43 INS43 INS70 MOV43 INS43 INS43 MOV43 INS43 MOV43 INS43 INS74 INS42 INS74 INS42 INS42 INS42 INS42 INS74 INS42 INS42 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS44 MOV32 MOV8 INS43 INS42 INS42 MOV32 INS44 INS42 INS8 UPD42 MOV42 INS42 INS74 INS44 INS42 INS8 INS42 INS42 UPD66 INS42 INS42 UPD66 UPD42 MOV42 MOV43 INS43 INS43 MOV43 INS43 INS45 INS45 INS45 MOV43 INS43 INS43 INS42 INS42 INS42 INS42 UPD42 MOV42 INS74 INS42 INS42 MOV43 INS42 MOV25 MOV43 INS43 INS43 INS42 MOV60 MOV25 MOV21 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 INS43 INS42 INS74 INS42 UPD43 INS74 INS42 INS42 MOV32 MOV32 INS74 INS42 MOV43 INS43 UPD42 MOV43 MOV43 INS43 MOV43 INS43 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL45 DEL45 DEL4 DEL3 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL11 DEL11 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL85 DEL5 DEL11 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL43 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24