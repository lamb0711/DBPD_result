JCR-2554 Added two ReentrantLocks (Thread, Xid) in LockManagerImpl

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@925982 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.TransactionContext;
+import javax.transaction.xa.Xid;
+import java.util.Arrays;
-     * Lock to path map.
+     * Thread aware lock to path map.
+    
+    /**
+     * Xid aware lock to path map.
+     */
+    private final ReentrantLock xidlockMapLock = new ReentrantLock(){
+
+    	/**
+    	 * The actice Xid of this {@link ReentrantLock}
+    	 */
+        private Xid activeXid;
+
+        /**
+         * Check if the given Xid comes from the same globalTX
+         * @param otherXid
+         * @return true if same globalTX otherwise false
+         */
+        boolean isSameGlobalTx(Xid otherXid) {
+    	    return (activeXid == otherXid) || Arrays.equals(activeXid.getGlobalTransactionId(), otherXid.getGlobalTransactionId());
+    	}
+        
+        /**
+         * {@inheritDoc}
+         */
+        public void acquire() throws InterruptedException {
+        	if (Thread.interrupted()) throw new InterruptedException();
+        	Xid currentXid = TransactionContext.getCurrentXid();
+            synchronized(this) {
+            	if (currentXid == activeXid || (activeXid != null && isSameGlobalTx(currentXid))) { 
+                ++holds_;
+            	} else {
+            		try {  
+            			while (activeXid != null) 
+            				wait(); 
+            			activeXid = currentXid;
+            			holds_ = 1;
+            		} catch (InterruptedException ex) {
+            			notify();
+            			throw ex;
+            		}
+            	}
+            }
+        }
+        
+        /**
+         * {@inheritDoc}
+         */
+        public synchronized void release()  {
+        	Xid currentXid = TransactionContext.getCurrentXid();
+            if (activeXid != null && !isSameGlobalTx(currentXid))
+                throw new Error("Illegal Lock usage"); 
+
+              if (--holds_ == 0) {
+                activeXid = null;
+                notify(); 
+              }
+        }
+    };
-                lockMapLock.acquire();
+            	if (TransactionContext.getCurrentXid() == null) {
+            		lockMapLock.acquire();
+            	} else {
+            		xidlockMapLock.acquire();
+            	}
-        lockMapLock.release();
+    	if (TransactionContext.getCurrentXid() == null) {
+    		lockMapLock.release();
+    	} else {
+    		xidlockMapLock.release();
+    	}

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS29 INS83 INS83 INS43 INS59 INS8 INS65 INS42 INS42 INS14 INS25 UPD66 INS66 INS43 INS1 INS27 MOV8 INS8 INS42 INS23 INS31 INS31 INS31 INS32 INS33 INS21 INS29 INS83 INS43 INS59 INS29 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS8 INS42 INS42 INS32 INS65 INS42 INS42 INS65 INS65 INS65 INS43 INS42 INS41 INS65 INS42 INS25 INS60 INS51 INS65 INS60 INS25 INS25 INS25 INS10 INS42 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS27 INS65 INS32 INS53 INS43 INS59 INS52 INS8 INS65 INS43 INS59 INS27 INS53 INS27 INS8 INS27 MOV8 INS8 INS42 INS36 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS25 INS42 INS42 INS32 INS27 INS38 INS14 INS38 INS34 INS21 INS21 INS32 INS33 INS21 INS27 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS33 INS32 INS43 INS45 INS42 INS7 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS36 INS21 INS54 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS27 INS38 INS8 INS12 INS27 INS32 INS42 INS61 INS21 INS21 INS44 INS8 INS42 INS33 INS42 INS42 INS27 INS21 INS7 INS7 INS43 INS42 INS21 INS53 INS42 INS33 INS32 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 DEL10