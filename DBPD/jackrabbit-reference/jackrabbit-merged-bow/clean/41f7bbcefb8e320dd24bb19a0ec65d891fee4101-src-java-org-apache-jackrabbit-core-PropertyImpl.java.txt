JCR-62 import must not ignore xml prefixed attributes:
add "xml" as built-in and reserved namespace, anticipating spec change in 0.16.4

+ minor cosmetical changes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@158098 13f79535-47bb-0310-9956-ffa450edef68

+     * Determines the length of the given value.
+     * @param value value whose length should be determined
+     * @return the length of the given value
+     * @throws RepositoryException if an error occurs
+     * @see javax.jcr.Property#getLength()
+     * @see javax.jcr.Property#getLengths()
+     */
+    protected long getLength(InternalValue value) throws RepositoryException {
+       switch (value.getType()) {
+            case PropertyType.STRING:
+            case PropertyType.LONG:
+            case PropertyType.DOUBLE:
+                return value.toString().length();
+
+            case PropertyType.NAME:
+                QName name = (QName) value.internalValue();
+                try {
+                    return name.toJCRName(session.getNamespaceResolver()).length();
+                } catch (NoPrefixDeclaredException npde) {
+                    // should never happen...
+                    String msg = safeGetJCRPath()
+                            + ": the value represents an invalid name";
+                    log.debug(msg);
+                    throw new RepositoryException(msg, npde);
+                }
+
+            case PropertyType.PATH:
+                Path path = (Path) value.internalValue();
+                try {
+                    return path.toJCRPath(session.getNamespaceResolver()).length();
+                } catch (NoPrefixDeclaredException npde) {
+                    // should never happen...
+                    String msg = safeGetJCRPath()
+                            + ": the value represents an invalid path";
+                    log.debug(msg);
+                    throw new RepositoryException(msg, npde);
+                }
+
+            case PropertyType.BINARY:
+                BLOBFileValue blob = (BLOBFileValue) value.internalValue();
+                return blob.getLength();
+        }
+
+        return -1;
+    }
+
+    /**
-            return 0;
+            // should never be the case, but being a little paranoid can't hurt...
+            log.warn(safeGetJCRPath() + ": single-valued property with no value");
+            return -1;
-        InternalValue value = values[0];
-        switch (value.getType()) {
-            case PropertyType.STRING:
-            case PropertyType.LONG:
-            case PropertyType.DOUBLE:
-                return value.toString().length();
-
-            case PropertyType.NAME:
-                QName name = (QName) value.internalValue();
-                try {
-                    return name.toJCRName(session.getNamespaceResolver()).length();
-                } catch (NoPrefixDeclaredException npde) {
-                    // should never happen...
-                    String msg = safeGetJCRPath() + ": the value represents an invalid name";
-                    log.debug(msg);
-                    throw new RepositoryException(msg, npde);
-                }
-
-            case PropertyType.PATH:
-                Path path = (Path) value.internalValue();
-                try {
-                    return path.toJCRPath(session.getNamespaceResolver()).length();
-                } catch (NoPrefixDeclaredException npde) {
-                    // should never happen...
-                    String msg = safeGetJCRPath() + ": the value represents an invalid path";
-                    log.debug(msg);
-                    throw new RepositoryException(msg, npde);
-                }
-
-            case PropertyType.BINARY:
-                BLOBFileValue blob = (BLOBFileValue) value.internalValue();
-                return blob.getLength();
-        }
-        return -1;
+        return getLength(values[0]);
-            long length = -1;
-            InternalValue value = values[i];
-            switch (value.getType()) {
-                case PropertyType.STRING:
-                case PropertyType.LONG:
-                case PropertyType.DOUBLE:
-                    length = value.toString().length();
-                    break;
-
-                case PropertyType.NAME:
-                    QName name = (QName) value.internalValue();
-                    try {
-                        length = name.toJCRName(session.getNamespaceResolver()).length();
-                    } catch (NoPrefixDeclaredException npde) {
-                        // should never happen...
-                        String msg = safeGetJCRPath() + ": the value represents an invalid name";
-                        log.debug(msg);
-                        throw new RepositoryException(msg, npde);
-                    }
-                    break;
-
-                case PropertyType.PATH:
-                    Path path = (Path) value.internalValue();
-                    try {
-                        length = path.toJCRPath(session.getNamespaceResolver()).length();
-                    } catch (NoPrefixDeclaredException npde) {
-                        // should never happen...
-                        String msg = safeGetJCRPath() + ": the value represents an invalid path";
-                        log.debug(msg);
-                        throw new RepositoryException(msg, npde);
-                    }
-                    break;
-
-                case PropertyType.BINARY:
-                    BLOBFileValue blob = (BLOBFileValue) value.internalValue();
-                    length = blob.getLength();
-                    break;
-            }
-            lengths[i] = length;
+            lengths[i] = getLength(values[i]);

MOV31 INS31 INS31 INS29 UPD83 INS44 MOV29 MOV83 INS39 INS42 MOV43 MOV43 INS8 MOV29 INS83 MOV5 INS42 MOV43 MOV43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 MOV43 INS42 MOV21 MOV25 MOV60 INS25 INS41 MOV21 MOV25 MOV60 MOV60 INS24 MOV41 INS66 INS42 INS66 INS66 INS42 INS66 INS68 INS68 MOV27 INS8 INS32 MOV58 MOV27 MOV37 INS8 INS40 INS42 INS40 INS42 MOV21 INS41 UPD42 MOV42 MOV2 MOV21 INS38 UPD42 MOV27 INS34 INS32 UPD45 INS42 MOV2 DEL34 DEL41 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL49 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL10 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL10 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL10 DEL40 DEL49 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL10 DEL50 DEL8 DEL24 DEL8 DEL31