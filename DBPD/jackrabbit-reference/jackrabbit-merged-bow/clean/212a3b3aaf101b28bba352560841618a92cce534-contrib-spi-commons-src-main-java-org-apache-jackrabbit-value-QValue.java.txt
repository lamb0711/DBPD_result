work in progress

- cleanup QValue
- remove fs package which is not used any more within QValue

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432264 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.fs.FileSystemResource;
-import org.apache.jackrabbit.fs.FileSystemException;
-                // DIFF JR: references are not forced to represent a UUID object
+                // NOTE: references are not forced to represent a UUID object
-    // DIFF JR: constructor added
-        // DIFF JR: reference value must not represent a UUID object
+        // NOTE: reference value must not represent a UUID object
-    static class BLOBFileValue {
+    private static class BLOBFileValue {
-         * buffer for small-sized data
+         * Buffer for small-sized data
-         * underlying file system resource
-         */
-        private final FileSystemResource fsResource;
-
-        /**
-         * converted text
+         * Converted text
-        BLOBFileValue(InputStream in) throws IOException {
+        private BLOBFileValue(InputStream in) throws IOException {
-        BLOBFileValue(InputStream in, boolean temp) throws IOException {
+        private BLOBFileValue(InputStream in, boolean temp) throws IOException {
-            fsResource = null;
+            // buffer is EMPTY_BYTE_ARRAY (default value)
-        BLOBFileValue(byte[] bytes) {
+        private BLOBFileValue(byte[] bytes) {
-            fsResource = null;
-        BLOBFileValue(File file) throws IOException {
+        private BLOBFileValue(File file) throws IOException {
+            // this instance is backed by a 'real' file
-            // this instance is backed by a 'real' file; set virtual fs resource to null
-            fsResource = null;
-        }
-
-        /**
-         * Creates a new <code>BLOBFileValue</code> instance from a resource in the
-         * virtual file system.
-         *
-         * @param fsResource resource in virtual file system
-         * @throws IOException if the resource can not be read
-         */
-        BLOBFileValue(FileSystemResource fsResource) throws IOException {
-            try {
-                if (!fsResource.exists()) {
-                    throw new IOException(fsResource.getPath()
-                        + ": the specified resource does not exist");
-                }
-            } catch (FileSystemException fse) {
-                throw new IOException(fsResource.getPath()
-                    + ": Error while creating value: " + fse.toString());
-            }
-            // this instance is backed by a resource in the virtual file system
-            this.fsResource = fsResource;
-            // set 'real' file to null
-            file = null;
-            // this instance is not backed by temporarily allocated resource/buffer
-            temp = false;
+            // buffer is EMPTY_BYTE_ARRAY (default value)
-        long getLength() {
+        private long getLength() {
-            } else if (fsResource != null) {
-                // this instance is backed by a resource in the virtual file system
-                try {
-                    return fsResource.length();
-                } catch (FileSystemException fse) {
-                    return -1;
-                }
-        void discard() {
+        private void discard() {
-         * Same as <code>{@link #delete(false)}</code>.
-         * <p/>
-         * If this <code>BLOBFileValue</code> is <i>not</i> backed by a persistent
-         * resource calling this method will have no effect.
-         *
-         * @see #discard()
-         */
-        void delete() {
-            if (!temp) {
-                delete(false);
-            }
-        }
-
-        /**
-         * Deletes the persistent resource backing this <code>BLOBFileValue</code>.
-        void delete(boolean pruneEmptyParentDirs) {
+        private void delete(boolean pruneEmptyParentDirs) {
-            } else if (fsResource != null) {
-                // this instance is backed by a resource in the virtual file system
-                try {
-                    fsResource.delete(pruneEmptyParentDirs);
-                } catch (FileSystemException fse) {
-                    // ignore
-                }
-        String getString()
+        private String getString()
-        InputStream getStream()
+        private InputStream getStream()
-            } else if (fsResource != null) {
-                // this instance is backed by a resource in the virtual file system
-                try {
-                    return fsResource.getInputStream();
-                } catch (FileSystemException fse) {
-                    throw new RepositoryException(fsResource.getPath()
-                        + ": the specified resource does not exist", fse);
-                }
-            } else if (fsResource != null) {
-                // this instance is backed by a resource in the virtual file system
-                try {
-                    in = fsResource.getInputStream();
-                } catch (FileSystemException fse) {
-                    throw new RepositoryException(fsResource.getPath()
-                        + ": the specified resource does not exist", fse);
-                }
-        //-------------------------------------------< java.lang.Object overrides >
+        //-----------------------------------------------< java.lang.Object >---
-            } else if (fsResource != null) {
-                // this instance is backed by a resource in the virtual file system
-                return fsResource.toString();
-                    && (fsResource == null ? other.fsResource == null : fsResource.equals(other.fsResource))
-        // TODO: obj. is not mutable. -> provide impl of hashCode.

INS83 INS83 INS42 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 UPD66 UPD66 MOV8 MOV8 MOV8 MOV8 MOV8 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL34 DEL38 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL68 DEL65 DEL29 DEL39 DEL42 DEL42 DEL38 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL16 DEL36