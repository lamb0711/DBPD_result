JCR-3405 : Improvements to user management implementation 

- password utility
- configurable password hashing: algorithm, number of iterations
- improve handling of plaintxt passwords starting with {algorithm}

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1370420 13f79535-47bb-0310-9956-ffa450edef68

+import java.security.NoSuchAlgorithmException;
+ * <li>{@link #PARAM_PASSWORD_HASH_ALGORITHM}: Optional parameter to configure
+ * the algorithm used for password hash generation. The default value is
+ * {@link PasswordUtility#DEFAULT_ALGORITHM}.</li>
+ * <li>{@link #PARAM_PASSWORD_HASH_ITERATIONS}: Optional parameter to configure
+ * the number of iterations used for password hash generations. The default
+ * value is {@link PasswordUtility#DEFAULT_ITERATIONS}.</li>
+    /**
+     * Configuration parameter to change the default algorithm used to generate
+     * password hashes. The default value is {@link PasswordUtility#DEFAULT_ALGORITHM}.
+     */
+    public static final String PARAM_PASSWORD_HASH_ALGORITHM = "passwordHashAlgorithm";
+
+    /**
+     * Configuration parameter to change the number of iterations used for
+     * password hash generation. The default value is {@link PasswordUtility#DEFAULT_ITERATIONS}.
+     */
+    public static final String PARAM_PASSWORD_HASH_ITERATIONS = "passwordHashIterations";
+
-        if (password == null) {
-            throw new IllegalArgumentException("Cannot create user: null password.");
-        }
+
+        // NOTE: password validation during setPassword and onCreate.
-            setProperty(userNode, P_PASSWORD, getValue(UserImpl.buildPasswordValue(password)), true);
+            setPassword(userNode, password, true);
+    /**
+     * Generate a password value from the specified string and set the
+     * {@link UserConstants#P_PASSWORD} property to the given user node.
+     *
+     * @param userNode A user node.
+     * @param password The password value.
+     * @param forceHash If <code>true</code> the specified password string will
+     * always be hashed; otherwise the hash will only be generated if it appears
+     * to be a {@link PasswordUtility#isPlainTextPassword(String) plain text} password.
+     * @throws RepositoryException If an exception occurs.
+     */
+    void setPassword(NodeImpl userNode, String password, boolean forceHash) throws RepositoryException {
+        if (password == null) {
+            throw new IllegalArgumentException("Password may not be null.");
+        }
+        String pwHash;
+        if (forceHash || PasswordUtility.isPlainTextPassword(password)) {
+            try {
+                String algorithm = config.getConfigValue(PARAM_PASSWORD_HASH_ALGORITHM, PasswordUtility.DEFAULT_ALGORITHM);
+                int iterations = config.getConfigValue(PARAM_PASSWORD_HASH_ITERATIONS, PasswordUtility.DEFAULT_ITERATIONS);
+                pwHash = PasswordUtility.buildPasswordHash(password, algorithm, PasswordUtility.DEFAULT_SALT_SIZE, iterations);
+            } catch (NoSuchAlgorithmException e) {
+                throw new RepositoryException(e);
+            } catch (UnsupportedEncodingException e) {
+                throw new RepositoryException(e);
+            }
+        } else {
+            pwHash = password;
+        }
+        Value v = getSession().getValueFactory().createValue(pwHash);
+        setProperty(userNode, P_PASSWORD, getValue(pwHash), userNode.isNew());
+    }
+

INS26 INS40 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 MOV25 INS60 INS25 INS60 INS21 INS67 INS67 INS67 INS67 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS67 INS67 INS67 INS68 INS66 INS42 INS42 INS42 INS32 INS54 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS42 INS8 INS12 INS12 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS43 UPD45 INS60 INS60 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS39 INS59 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS42 INS43 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32