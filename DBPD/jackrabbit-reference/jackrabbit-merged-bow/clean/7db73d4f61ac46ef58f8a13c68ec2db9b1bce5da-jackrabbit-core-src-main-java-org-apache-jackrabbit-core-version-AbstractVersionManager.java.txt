JCR-2140 Configurations and Baselines


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@796586 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
+
-import javax.jcr.Value;
-import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.PropertyType;
-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.value.InternalValue;
-import org.apache.jackrabbit.core.value.InternalValue;
+import org.apache.jackrabbit.core.value.InternalValue;
+    public InternalBaseline getBaseline(NodeId id) throws RepositoryException {
+        // lock handling via getItem()
+        InternalBaseline v = (InternalBaseline) getItem(id);
+        if (v == null) {
+            log.warn("Versioning item not found: " + id);
+        }
+        return v;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
-     * Creates aew configuration node
+     * Creates a new configuration node.
+     * <p/>
+     * The nt:confguration is stored within the nt:configurations storage using
+     * the nodeid of the configuration root (rootId) as path.
+     *
-     * @param baseline the optional baseline
-    NodeStateEx internalCreateConfiguration(NodeId rootId, InternalBaseline baseline)
+    NodeStateEx internalCreateConfiguration(NodeId rootId)
-        if (baseline != null) {
-            // the exact behavior is not clarified yet.
-            // see http://jsr-283.dev.java.net/issues/show_bug.cgi?id=795
-            throw new UnsupportedRepositoryOperationException(
-                    "creating configurations based on a baseline not supported, yet");
-        }
-
-            NodeId configId = new NodeId();
-                    configId.toString(), NameConstants.REP_CONFIGURATIONS);
-            Name name = getName(configId.toString());
+                    rootId.toString(), NameConstants.REP_CONFIGURATIONS);
+            Name name = getName(rootId.toString());
+
+            NodeId configId = new NodeId();
-            String uuid = new NodeId().toString();
-            NodeStateEx histParent = getParentNode(historyRoot, uuid, NameConstants.REP_VERSIONSTORAGE);
-            Name histName = getName(uuid);
+            NodeStateEx histParent = getParentNode(historyRoot, configId.toString(), NameConstants.REP_VERSIONSTORAGE);
+            Name histName = getName(configId.toString());
+            config.setPropertyValue(NameConstants.JCR_ISCHECKEDOUT, InternalValue.create(true));
+            InternalValue[] preds = new InternalValue[]{InternalValue.create(blId)};
+            config.setPropertyValues(NameConstants.JCR_PREDECESSORS, PropertyType.REFERENCE, preds, true);
+     * {@inheritDoc}
+     */
+    public InternalConfiguration getConfigurationForNode(NodeId rootId) throws RepositoryException {
+        ReadLock lock = acquireReadLock();
+        try {
+            String uuid = rootId.toString();
+            Name name = getName(uuid);
+
+            NodeStateEx parent = getParentNode(configurationsRoot, uuid, null);
+            if (parent != null && parent.hasNode(name)) {
+                NodeStateEx config = parent.getNode(name, 1);
+                return new InternalConfigurationImpl(this, config);
+            } else {
+                return null;
+            }
+        } finally {
+            lock.release();
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public InternalConfiguration getConfiguration(NodeId nodeId)
+            throws RepositoryException {
+        // lock handling via getItem()
+        InternalConfiguration config = (InternalConfiguration) getItem(nodeId);
+        if (config == null) {
+            throw new ItemNotFoundException(nodeId.toString());
+        }
+        return config;
+    }
+
+    /**
-            InternalVersionImpl v = history.checkin(NameFactoryImpl.getInstance().create("", versionName), node);
+            InternalVersionImpl v = history.checkin(
+                    NameFactoryImpl.getInstance().create("", versionName), node, null);
+     * internally checks in a configuration
+     * @param config the config
+     * @param baseVersions the base versions to record
+     * @return the new baseline
+     * @throws RepositoryException if an error occurs
+     */
+    protected InternalBaseline internalCheckin(InternalConfigurationImpl config,
+                                               Set<NodeId> baseVersions)
+            throws RepositoryException {
+        InternalVersionHistoryImpl vh = (InternalVersionHistoryImpl) getVersionHistoryOfNode(config.getId());
+        WriteOperation operation = startWriteOperation();
+        try {
+            NodeStateEx node = config.node;
+            String versionName = calculateCheckinVersionName(vh, node, false);
+            InternalBaseline v = (InternalBaseline) vh.checkin(
+                    NameFactoryImpl.getInstance().create("", versionName),
+                    node, baseVersions);
+            // update properties on 'node' to point to the new base version
+            // but leave it checked out
+            node.setPropertyValue(
+                    NameConstants.JCR_BASEVERSION,
+                    InternalValue.create(v.getId()));
+            node.setPropertyValues(
+                    NameConstants.JCR_PREDECESSORS,
+                    PropertyType.REFERENCE,
+                    new InternalValue[]{InternalValue.create(v.getId())}
+            );
+            node.store();
+            operation.save();
+            return v;
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        } finally {
+            operation.close();
+        }
+    }
+
+    /**
+                } else if (ntName.equals(NameConstants.NT_CONFIGURATION)) {
+                    return new InternalConfigurationImpl(this, pNode);

MOV26 MOV26 UPD40 UPD40 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS54 INS65 INS42 MOV43 INS42 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS60 INS54 INS65 INS42 INS43 INS59 INS27 INS8 INS42 UPD66 MOV66 INS66 INS66 UPD66 MOV66 MOV60 MOV60 MOV60 MOV60 INS65 INS42 INS43 INS59 INS8 INS8 INS65 INS43 INS59 INS27 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS60 INS21 INS42 INS42 INS32 INS60 MOV60 INS60 INS25 INS21 INS42 INS42 INS11 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS41 INS44 INS8 INS21 INS43 INS32 INS32 MOV43 INS43 INS32 INS5 INS59 INS32 INS42 MOV43 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS43 INS32 INS14 INS43 INS32 INS42 INS43 INS59 INS43 INS59 MOV43 INS59 INS32 INS32 INS32 INS32 INS42 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 INS32 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS40 INS32 INS43 INS85 INS42 INS3 INS42 INS42 INS40 INS40 INS42 INS9 INS42 INS32 UPD42 INS42 INS42 INS32 INS27 INS32 INS60 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS11 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS40 INS3 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS40 UPD42 INS32 UPD42 UPD40 INS42 INS42 INS9 INS42 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS43 INS59 INS14 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS32 INS42 INS42 INS32 INS5 INS4 INS43 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS85 INS32 INS42 INS42 INS32 INS43 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS25 INS32 INS8 MOV8 INS42 INS42 INS40 INS41 INS14 INS43 INS52 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL65 DEL42 DEL65 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL14 DEL32 DEL40