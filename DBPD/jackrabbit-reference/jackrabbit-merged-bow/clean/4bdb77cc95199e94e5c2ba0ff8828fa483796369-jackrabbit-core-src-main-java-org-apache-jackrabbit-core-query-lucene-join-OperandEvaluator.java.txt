JCR-2715: Improved join query performance

Extend LuceneQueryFactory to handle more QOM constraints.
Simplify handling of bind variables.
Improve OperandEvaluator, including its javadocs.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1026361 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.query.qom.StaticOperand;
-class OperandEvaluator {
+/**
+ * Evaluator of QOM {@link Operand operands}. This class evaluates operands
+ * in the context of a {@link ValueFactory value factory}, a set of bind
+ * variables and possibly a query result row.
+ */
+public class OperandEvaluator {
+    /** Value factory */
+    /** Bind variables */
+    /**
+     * Creates an operand evaluator for the given value factory and set of
+     * bind variables.
+     *
+     * @param factory value factory
+     * @param variables bind variables
+     */
+    /**
+     * Returns the value of the given static operand
+     * ({@link Literal literal} or {@link BindVariableValue bind variable}).
+     *
+     * @param operand static operand to be evaluated
+     * @return evaluated value
+     * @throws RepositoryException if a named bind variable is not found,
+     *                             or if the operand type is unknown
+     */
+    public Value getValue(StaticOperand operand) throws RepositoryException {
+        if (operand instanceof Literal) {
+            Literal literal = (Literal) operand;
+            return literal.getLiteralValue();
+        } else if (operand instanceof BindVariableValue) {
+            BindVariableValue bvv = (BindVariableValue) operand;
+            Value value = variables.get(bvv.getBindVariableName());
+            if (value != null) {
+                return value;
+            } else {
+                throw new RepositoryException(
+                        "Unknown bind variable: " + bvv.getBindVariableName());
+            }
+        } else {
+            throw new UnsupportedRepositoryOperationException(
+                    "Unknown static operand type: " + operand);
+        }
+    }
+
+    /**
+     * Returns the value of the given operand in the context of the given row.
+     * This is a convenience method that uses a somewhat lossy best-effort
+     * mapping to evaluate multi-valued operands to a single value. Use the
+     * {@link #getValues(Operand, Row)} method for more accurate results.
+     *
+     * @param operand operand to be evaluated
+     * @param row query result row
+     * @return evaluated value
+     * @throws RepositoryException
+     */
-        switch (values.length) {
-        case 0:
-            return factory.createValue("");
-        case 1:
+        if (values.length == 1) {
-        default:
+        } else {
-     * Evaluates the given operand against the given row.
+     * Evaluates the given operand in the context of the given row.
-     * @param operand operand
-     * @param row row
+     * @param operand operand to be evaluated
+     * @param row query result row
-        if (operand instanceof BindVariableValue) {
-            return getBindVariableValues((BindVariableValue) operand);
+        if (operand instanceof StaticOperand) {
+            StaticOperand so = (StaticOperand) operand;
+            return new Value[] { getValue(so) };
-            return getFullTextSearchScoreValues(
-                    (FullTextSearchScore) operand, row);
+            FullTextSearchScore ftss = (FullTextSearchScore) operand;
+            double score = row.getScore(ftss.getSelectorName());
+            return new Value[] { factory.createValue(score) };
+        } else if (operand instanceof NodeName) {
+            NodeName nn = (NodeName) operand;
+            Node node = row.getNode(nn.getSelectorName());
+            return new Value[] { factory.createValue(node.getName(), NAME) };
-        } else if (operand instanceof Literal) {
-            return getLiteralValues((Literal) operand);
-        } else if (operand instanceof NodeLocalName) {
-            return getNodeLocalNameValues((NodeLocalName) operand, row);
-        } else if (operand instanceof NodeName) {
-            return getNodeNameValues((NodeName) operand, row);
-        } else if (operand instanceof PropertyValue) {
-            return getPropertyValues((PropertyValue) operand, row);
+        } else if (operand instanceof NodeLocalName) {
+            return getNodeLocalNameValues((NodeLocalName) operand, row);
+        } else if (operand instanceof PropertyValue) {
+            return getPropertyValues((PropertyValue) operand, row);
-     * Returns the value of the given variable value operand at the given row.
-     *
-     * @param operand variable value operand
-     * @return value of the operand at the given row
-     */
-    private Value[] getBindVariableValues(BindVariableValue operand) {
-        Value value = variables.get(operand.getBindVariableName());
-        if (value != null) {
-            return new Value[] { value };
-        } else {
-            return new Value[0];
-        }
-    }
-
-    /**
-     * Returns the value of the given search score operand at the given row.
-     *
-     * @param operand search score operand
-     * @param row row
-     * @return value of the operand at the given row
-     * @throws RepositoryException if the operand can't be evaluated
-     */
-    private Value[] getFullTextSearchScoreValues(
-            FullTextSearchScore operand, Row row) throws RepositoryException {
-        double score = row.getScore(operand.getSelectorName());
-        return new Value[] { factory.createValue(score) };
-    }
-
-    /**
-     * Returns the value of the given literal value operand.
-     *
-     * @param operand literal value operand
-     * @return value of the operand
-     */
-    private Value[] getLiteralValues(Literal operand) {
-        return new Value[] { operand.getLiteralValue() };
-    }
-
-    /**
+     * Returns the values of the given upper case operand at the given row.
+     *
+     * @param operand upper case operand
+     * @param row row
+     * @return values of the operand at the given row
+     * @throws RepositoryException if the operand can't be evaluated
+     */
+    private Value[] getUpperCaseValues(UpperCase operand, Row row)
+            throws RepositoryException {
+        Value[] values = getValues(operand.getOperand(), row);
+        for (int i = 0; i < values.length; i++) {
+            String value = values[i].getString();
+            String upper = value.toUpperCase(ENGLISH);
+            if (!value.equals(upper)) {
+                values[i] = factory.createValue(upper);
+            }
+        }
+        return values;
+    }
+
+    /**
-     * Returns the value of the given node name operand at the given row.
-     *
-     * @param operand node name operand
-     * @param row row
-     * @return value of the operand at the given row
-     * @throws RepositoryException if the operand can't be evaluated
-     */
-    private Value[] getNodeNameValues(NodeName operand, Row row)
-            throws RepositoryException {
-        Node node = row.getNode(operand.getSelectorName());
-        return new Value[] { factory.createValue(node.getName(), NAME) };
-    }
-
-    /**
-     * Returns the values of the given upper case operand at the given row.
-     *
-     * @param operand upper case operand
-     * @param row row
-     * @return values of the operand at the given row
-     * @throws RepositoryException if the operand can't be evaluated
-     */
-    private Value[] getUpperCaseValues(UpperCase operand, Row row)
-            throws RepositoryException {
-        Value[] values = getValues(operand.getOperand(), row);
-        for (int i = 0; i < values.length; i++) {
-            String value = values[i].getString();
-            String upper = value.toLowerCase(ENGLISH);
-            if (!value.equals(upper)) {
-                values[i] = factory.createValue(upper);
-            }
-        }
-        return values;
-    }
-
-    /**

INS26 MOV31 INS40 INS29 INS83 INS42 INS31 INS65 INS29 INS29 INS29 INS29 UPD83 MOV83 INS43 UPD42 MOV42 MOV44 MOV43 INS8 INS29 UPD66 MOV66 INS65 UPD66 MOV66 UPD66 MOV66 INS65 UPD66 MOV66 UPD66 MOV66 INS65 INS65 INS65 INS65 INS65 INS65 MOV65 MOV65 MOV65 MOV42 UPD43 INS25 INS65 INS65 INS65 INS65 INS65 INS25 MOV25 UPD42 MOV42 UPD66 MOV66 UPD42 MOV42 UPD66 MOV66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 UPD66 MOV66 INS66 INS65 UPD66 MOV66 INS65 INS66 UPD66 UPD66 INS66 UPD66 UPD42 MOV62 INS8 INS25 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS8 UPD66 UPD66 UPD66 INS62 UPD42 MOV42 UPD66 MOV66 INS42 UPD66 MOV66 INS60 INS41 MOV62 INS8 INS8 INS68 INS40 INS34 MOV41 MOV60 MOV24 MOV41 INS42 INS43 INS60 MOV62 INS8 MOV43 INS59 INS32 INS60 INS60 INS25 INS53 INS42 INS69 INS69 INS42 INS43 INS59 INS3 INS60 INS60 MOV41 MOV62 INS8 INS42 MOV11 INS42 INS42 MOV43 INS59 MOV43 MOV59 MOV27 INS8 INS8 INS14 INS43 INS43 INS42 INS42 INS11 MOV5 INS4 MOV43 INS59 INS39 INS59 INS60 INS60 MOV41 MOV62 MOV8 INS42 MOV11 UPD42 INS41 INS53 INS43 INS27 INS42 INS42 INS43 INS42 INS32 INS42 MOV11 INS42 INS32 INS43 INS59 MOV43 INS59 MOV62 MOV8 UPD42 UPD42 UPD42 INS42 INS14 INS42 INS45 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 MOV11 INS42 INS32 INS25 UPD42 UPD42 MOV43 INS27 INS42 INS42 INS42 INS42 INS32 MOV62 MOV8 INS25 INS45 INS32 INS42 INS42 MOV62 MOV8 MOV8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL42 DEL40 DEL34 DEL49 DEL42 DEL42 DEL45 DEL32 DEL41 DEL34 DEL49 DEL49 DEL50 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL25 DEL25 DEL65 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL4 DEL3 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL25 DEL8 DEL31 DEL65 DEL42 DEL66 DEL65 DEL65 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL31 DEL65 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL4 DEL3 DEL41 DEL8 DEL31 DEL65 DEL42 DEL66 DEL65 DEL29 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL44 DEL60 DEL8 DEL31