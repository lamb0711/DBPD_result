JCR-2056:  Binary interfaces (WIP...)




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@778445 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Binary;
-import java.io.ByteArrayOutputStream;
-    // those fields are mutually exclusive, i.e. only one can be non-null
-    private byte[] streamData = null;
+    private Binary bin = null;
+     * Constructs a <code>BinaryValue</code> object based on a <code>Binary</code>.
+     *
+     * @param bin the bytes this <code>BinaryValue</code> should represent
+     */
+    public BinaryValue(Binary bin) {
+        super(TYPE);
+        this.bin = bin;
+    }
+
+    /**
-        this.stream = stream;
+        try {
+            bin = new BinaryImpl(stream);
+        } catch (IOException e) {
+            throw new IllegalArgumentException("specified stream cannot be read", e);
+        }
-     * Constructs a <code>BinaryValue</code> object based on a stream.
+     * Constructs a <code>BinaryValue</code> object based on a byte array.
-     * @param data the stream this <code>BinaryValue</code> should represent
+     * @param data the bytes this <code>BinaryValue</code> should represent
-        streamData = data;
+        bin = new BinaryImpl(data);
-                    && streamData == other.streamData) {
+                    && bin == other.bin) {
-            // stream, streamData and text are mutually exclusive,
-            // i.e. only one of them can be non-null
-            if (stream != null) {
-                return stream.equals(other.stream);
-            } else if (streamData != null) {
-                return streamData.equals(other.streamData);
-            } else {
-                return text.equals(other.text);
-            }
+            return (text != null && text.equals(other.text))
+                    || (bin != null && bin.equals(other.bin));
-        if (streamData != null) {
+        if (text == null) {
-                text = new String(streamData, DEFAULT_ENCODING);
-            } catch (UnsupportedEncodingException e) {
-                throw new RepositoryException(DEFAULT_ENCODING
-                        + " not supported on this platform", e);
-            }
-            streamData = null;
-        } else if (stream != null) {
-            try {
-                ByteArrayOutputStream out = new ByteArrayOutputStream();
-                byte[] buffer = new byte[8192];
-                int read;
-                while ((read = stream.read(buffer)) > 0) {
-                    out.write(buffer, 0, read);
-                }
-                byte[] data = out.toByteArray();
-                text = new String(data, DEFAULT_ENCODING);
+                byte[] bytes = new byte[(int) bin.getSize()];
+                bin.read(bytes, 0);
+                text = new String(bytes, DEFAULT_ENCODING);
-                throw new RepositoryException("conversion from stream to string failed", e);
-            } finally {
-                try {
-                    if (stream != null) {
-                        stream.close();
-                    }
-                } catch (IOException e) {
-                    // ignore
-                }
+                throw new RepositoryException("failed to retrieve binary data", e);
-            stream = null;
-        if (text != null) {
-            return text;
-        } else {
-            throw new ValueFormatException("empty value");
-        }
+        return text;
-        // build stream value if necessary
-        if (streamData != null) {
-            stream = new ByteArrayInputStream(streamData);
-            streamData = null;
-        } else if (text != null) {
+        if (bin != null) {
+            return bin.getStream();
+        } else {
-                stream = new ByteArrayInputStream(text.getBytes(DEFAULT_ENCODING));
+                return new ByteArrayInputStream(text.getBytes(DEFAULT_ENCODING));
-            text = null;
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Binary getBinary()
+            throws ValueFormatException, IllegalStateException,
+            RepositoryException {
+
+        if (bin == null) {
+            try {
+                bin = new BinaryImpl(new ByteArrayInputStream(text.getBytes(DEFAULT_ENCODING)));
+            } catch (UnsupportedEncodingException e) {
+                throw new RepositoryException(DEFAULT_ENCODING
+                        + " not supported on this platform", e);
+            } catch (IOException e) {
+                throw new RepositoryException("failed to retrieve binary data", e);
+            }
-        return super.getStream();
+        return bin;

MOV26 UPD40 INS31 INS31 INS43 INS29 INS44 MOV29 INS83 INS42 MOV44 INS8 MOV29 INS83 MOV43 INS42 MOV43 MOV43 INS8 INS29 INS43 UPD42 MOV43 INS43 INS43 INS42 UPD42 INS65 INS65 INS43 INS42 MOV46 INS54 INS46 MOV25 MOV41 MOV21 INS25 INS65 INS42 INS42 INS42 MOV25 INS66 INS42 INS66 INS42 INS8 INS12 UPD66 UPD66 INS42 UPD27 INS27 INS8 MOV8 INS65 UPD27 INS42 UPD42 INS21 INS44 INS8 UPD42 INS14 INS41 UPD42 INS42 INS33 INS41 UPD42 UPD42 INS7 INS43 INS42 INS53 INS43 INS42 INS27 INS8 INS32 MOV12 INS42 INS14 INS42 INS14 INS42 INS36 INS36 MOV60 MOV21 MOV21 INS42 INS42 INS41 INS43 INS42 INS43 INS45 INS42 UPD42 UPD40 INS27 INS27 MOV5 INS14 INS53 INS42 INS42 MOV27 MOV32 INS27 INS32 UPD42 UPD42 UPD42 UPD42 UPD43 MOV43 INS32 UPD42 INS14 INS14 UPD42 MOV42 MOV33 UPD42 MOV42 MOV33 UPD42 MOV42 MOV42 UPD40 MOV40 MOV5 INS11 UPD42 UPD45 UPD42 INS42 INS42 INS42 INS43 MOV14 INS43 INS45 INS42 INS39 INS32 INS42 INS42 INS42 INS42 DEL39 DEL85 DEL5 DEL42 DEL27 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL27 DEL32 DEL41 DEL8 DEL41 DEL8 DEL25 DEL25 DEL34 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL34 DEL27 DEL8 DEL61 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL8 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL48