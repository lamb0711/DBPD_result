JCR-3117 Stats for the PersistenceManager

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1186195 13f79535-47bb-0310-9956-ffa450edef68

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.jackrabbit.core.fs.FileSystemResource;
+import org.apache.jackrabbit.core.fs.FileSystemResource;
-import org.apache.jackrabbit.core.state.ItemState;
+import org.apache.jackrabbit.core.state.ItemState;
-import org.apache.jackrabbit.core.state.NodeReferences;
-import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.state.NodeReferences;
+import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.stats.PersistenceManagerStatCore;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+    /** statistics object */
+    private PersistenceManagerStatCore pmStatCore;
+
+        pmStatCore = context.getPersistenceManagerStatCore();
-        } else if (bundle == null) {
-            bundle = loadBundle(id);
-            if (bundle != null) {
-                bundle.markOld();
-                bundles.put(id, bundle, bundle.getSize());
-            } else {
-                bundles.put(id, MISSING, 16);
+        }
+        if (bundle != null) {
+            return bundle;
+        }
+        // cache miss
+        if (pmStatCore != null && pmStatCore.isEnabled()) {
+            long t = System.currentTimeMillis();
+            try {
+                return getBundleCacheMiss(id);
+            } finally {
+                t = System.currentTimeMillis() - t;
+                pmStatCore.onReadCacheMiss(t);
+        } else {
+            return getBundleCacheMiss(id);
+        }
+    }
+
+    /**
+     * Called when the bundle is not present in the cache, so we'll need to load
+     * it from the PM impl.
+     * 
+     * This also updates the cache.
+     * 
+     * @param id
+     * @return
+     * @throws ItemStateException
+     */
+    private NodePropBundle getBundleCacheMiss(NodeId id)
+            throws ItemStateException {
+        NodePropBundle bundle = loadBundle(id);
+        if (bundle != null) {
+            bundle.markOld();
+            bundles.put(id, bundle, bundle.getSize());
+        } else {
+            bundles.put(id, MISSING, 16);
+
+        long time = System.currentTimeMillis();
-        log.debug("stored bundle {}", bundle.getId());
+        log.debug("stored bundle {} in {} ms", new Object[] { bundle.getId(),
+                System.currentTimeMillis() - time });
+        if (pmStatCore != null && pmStatCore.isEnabled()) {
+            pmStatCore.onBundleWrite(System.currentTimeMillis() - time);
+        }
+        pmStatCore.cacheAccessed(accessCount);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 INS23 INS31 INS29 INS83 INS43 INS59 MOV29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 UPD42 MOV8 INS65 INS42 INS42 INS21 INS42 INS43 INS42 INS42 MOV60 INS25 INS25 INS25 INS65 INS65 INS65 INS65 INS60 MOV41 INS60 INS25 INS21 INS66 INS7 INS42 MOV27 MOV8 INS27 INS8 INS27 INS8 INS8 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS39 INS59 INS27 INS8 INS32 INS42 INS32 INS42 INS33 INS41 INS27 INS32 INS60 INS54 INS41 INS42 INS42 MOV32 INS42 INS32 UPD45 INS3 INS27 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS39 INS59 INS8 INS8 INS32 INS42 INS42 INS5 INS4 INS42 INS33 INS42 INS42 INS32 INS42 INS32 INS41 INS21 INS21 INS42 INS42 INS43 INS85 MOV32 INS27 INS42 INS42 INS27 INS42 INS42 INS32 INS7 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL25 DEL8