JCR-307: improved performance when handling nodes with large number of child node entries
- reimplemented NodeState.ChildNodeEntries
- made ChildNodeEntry immutable again
- avoided unnecessary object creation when de-/serializing child node entries

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@373549 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-    private static final UUID NULL_UUID_PLACEHOLDER =
-            UUID.fromString("00000000-0000-0000-0000-000000000000");
+    private static final byte[] NULL_UUID_PLACEHOLDER_BYTES = new byte[] {
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    };
-            out.write(NULL_UUID_PLACEHOLDER.getRawBytes());
+            out.write(NULL_UUID_PLACEHOLDER_BYTES);
-            out.write(UUID.fromString(state.getParentUUID()).getRawBytes());
+            out.write(UUID.stringToBytes(state.getParentUUID()));
-            out.write(UUID.fromString(entry.getUUID()).getRawBytes());  // uuid
+            out.write(UUID.stringToBytes(entry.getUUID()));    // uuid
-        UUID uuid = new UUID(uuidBytes);
-        if (!uuid.equals(NULL_UUID_PLACEHOLDER)) {
-            state.setParentUUID(uuid.toString());
+        if (!Arrays.equals(uuidBytes, NULL_UUID_PLACEHOLDER_BYTES)) {
+            state.setParentUUID(UUID.bytesToString(uuidBytes));
-            state.addChildNodeEntry(name, new UUID(uuidBytes).toString());
+            state.addChildNodeEntry(name, UUID.bytesToString(uuidBytes));

INS26 INS40 INS5 INS39 INS85 UPD42 INS3 INS5 INS4 INS39 INS85 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 MOV32 MOV32 MOV32 MOV32 UPD42 INS42 UPD42 UPD42 MOV42 UPD42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14