MNG-5771 use extension.xml to define core exported artifacts and packages

Signed-off-by: Igor Fedorenko <ifedorenko@apache.org>

-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
-import org.codehaus.plexus.PlexusContainer;
-import org.codehaus.plexus.component.annotations.Component;
-import org.codehaus.plexus.component.annotations.Requirement;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.apache.maven.extension.internal.DefaultCoreExports;
+
+import com.google.common.collect.ImmutableSet;
- * @todo this should probably be a component with some dynamic control of filtering
-@Component( role = ArtifactFilterManager.class )
+@Named
+@Singleton
+@SuppressWarnings( "deprecation" )
-    private static final Set<String> DEFAULT_EXCLUSIONS;
+    // this is a live injected collection
+    protected final List<ArtifactFilterManagerDelegate> delegates;
-    @Requirement
-    private PlexusContainer plexus;
+    protected final Set<String> coreArtifacts;
-    static
+    protected final Set<String> excludedArtifacts;
+
+    @Inject
+    public DefaultArtifactFilterManager( List<ArtifactFilterManagerDelegate> delegates, DefaultCoreExports extensions )
-        Set<String> artifacts = new HashSet<String>();
-
-        artifacts.add( "classworlds:classworlds" );
-        artifacts.add( "org.codehaus.plexus:plexus-classworlds" );
-        artifacts.add( "org.codehaus.plexus:plexus-component-api" );
-        artifacts.add( "org.codehaus.plexus:plexus-container-default" );
-        artifacts.add( "plexus:plexus-container-default" );
-        artifacts.add( "org.sonatype.spice:spice-inject-plexus" );
-        artifacts.add( "org.sonatype.sisu:sisu-inject-plexus" );
-        artifacts.add( "org.eclipse.sisu:org.eclipse.sisu.plexus" );
-        artifacts.add( "org.apache.maven:maven-artifact" );
-        artifacts.add( "org.apache.maven:maven-aether-provider" );
-        artifacts.add( "org.apache.maven:maven-artifact-manager" );
-        artifacts.add( "org.apache.maven:maven-compat" );
-        artifacts.add( "org.apache.maven:maven-core" );
-        artifacts.add( "org.apache.maven:maven-error-diagnostics" );
-        artifacts.add( "org.apache.maven:maven-lifecycle" );
-        artifacts.add( "org.apache.maven:maven-model" );
-        artifacts.add( "org.apache.maven:maven-model-builder" );
-        artifacts.add( "org.apache.maven:maven-monitor" );
-        artifacts.add( "org.apache.maven:maven-plugin-api" );
-        artifacts.add( "org.apache.maven:maven-plugin-descriptor" );
-        artifacts.add( "org.apache.maven:maven-plugin-parameter-documenter" );
-        artifacts.add( "org.apache.maven:maven-plugin-registry" );
-        artifacts.add( "org.apache.maven:maven-profile" );
-        artifacts.add( "org.apache.maven:maven-project" );
-        artifacts.add( "org.apache.maven:maven-repository-metadata" );
-        artifacts.add( "org.apache.maven:maven-settings" );
-        artifacts.add( "org.apache.maven:maven-settings-builder" );
-        artifacts.add( "org.apache.maven:maven-toolchain" );
-        artifacts.add( "org.apache.maven.wagon:wagon-provider-api" );
-        artifacts.add( "org.eclipse.aether:aether-api" );
-        artifacts.add( "org.eclipse.aether:aether-spi" );
-        artifacts.add( "org.eclipse.aether:aether-impl" );
-        //
-        // We must also filter out the old or NoClassDefFoundErrors will surface
-        //
-        artifacts.add( "org.sonatype.aether:aether-api" );
-        artifacts.add( "org.sonatype.aether:aether-spi" );
-        artifacts.add( "org.sonatype.aether:aether-impl" );
-
-        /*
-         * NOTE: Don't exclude the wagons or any of their dependencies (apart from the wagon API). This would otherwise
-         * provoke linkage errors for wagons contributed by build extensions. We also don't need to exclude the wagons
-         * from plugins. Plugins that use wagons directly and declare the corresponding dependency will simply use a
-         * wagon from their plugin realm.
-         */
-
-        DEFAULT_EXCLUSIONS = Collections.unmodifiableSet( artifacts );
-    }
-
-    protected Set<String> excludedArtifacts = new HashSet<String>( DEFAULT_EXCLUSIONS );
-
-    /**
-     * @deprecated Use this class as a component instead, and then use getArtifactFilter().
-     */
-    public static ArtifactFilter createStandardFilter()
-    {
-        // TODO: configure this from bootstrap or scan lib
-        return new ExclusionSetFilter( DEFAULT_EXCLUSIONS );
+        this.delegates = delegates;
+        this.coreArtifacts = ImmutableSet.copyOf( extensions.getExportedArtifacts() );
+        this.excludedArtifacts = new LinkedHashSet<String>( extensions.getExportedArtifacts() );
-        for ( ArtifactFilterManagerDelegate delegate : getDelegates() )
+        for ( ArtifactFilterManagerDelegate delegate : delegates )
-    private List<ArtifactFilterManagerDelegate> getDelegates()
-    {
-        try
-        {
-            return plexus.lookupList( ArtifactFilterManagerDelegate.class );
-        }
-        catch ( ComponentLookupException e )
-        {
-            return new ArrayList<ArtifactFilterManagerDelegate>();
-        }
-    }
-
-    /* (non-Javadoc)
-     * @see org.apache.maven.ArtifactFilterManager#excludeArtifact(java.lang.String)
-     */
-        Set<String> excludes = new LinkedHashSet<String>( DEFAULT_EXCLUSIONS );
+        Set<String> excludes = new LinkedHashSet<String>( coreArtifacts );
-        for ( ArtifactFilterManagerDelegate delegate : getDelegates() )
+        for ( ArtifactFilterManagerDelegate delegate : delegates )
