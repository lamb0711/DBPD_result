Basic error reporting (tips aren't available for everything yet) is complete for everything the CLI typically handles directly.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@603779 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.extension.ExtensionScanningException;
-import java.io.File;
-
-        // =====================================================================
-        // Cases covered:
-        // =====================================================================
-        //
-        // MavenExecutionException(String, File, ProjectBuildingException)
-        // MavenExecutionException(String, ExtensionScanningException)
-        // MavenExecutionException(String, IOException)
-        //
-        // =====================================================================
-        // Cases left to cover:
-        // =====================================================================
-        //
-        // MavenExecutionException(String, ArtifactResolutionException)
-        // MavenExecutionException(String, File)
-
-        Throwable cause = e.getCause();
-        if ( cause != null )
-        {
-            if ( cause instanceof IOException )
-            {
-                writer.write( e.getMessage() );
-                writer.write( NEWLINE );
-
-                handleGenericException( cause, showStackTraces, writer );
-
-                return true;
-            }
-            else if ( cause instanceof ExtensionScanningException )
-            {
-                writer.write( "While scanning for build extensions:" );
-                writer.write( NEWLINE );
-                writer.write( NEWLINE );
-
-                Throwable nestedCause = cause.getCause();
-                if ( ( nestedCause != null ) && ( nestedCause instanceof ProjectBuildingException ) )
-                {
-                    return handleProjectBuildingException( (ProjectBuildingException) nestedCause,
-                                                           showStackTraces,
-                                                           writer );
-                }
-                else
-                {
-                    handleGenericException( cause, showStackTraces, writer );
-
-                    return true;
-                }
-            }
-            else if ( cause instanceof ProjectBuildingException )
-            {
-                return handleProjectBuildingException( (ProjectBuildingException) cause,
-                                                       showStackTraces,
-                                                       writer );
-            }
-            else if ( cause instanceof ArtifactResolutionException )
-            {
-
-            }
-        }
-        else
-        {
-
-        }
+        handleGenericException( e, showStackTraces, writer );
-        // =====================================================================
-        // Cases covered:
-        // =====================================================================
-        //
-        // DuplicateProjectException(String, File, File, String)
-
-        File existing = e.getExistingProjectFile();
-        File conflicting = e.getConflictingProjectFile();
-        String projectId = e.getProjectId();
-
-        writer.write( "Duplicated project detected." );
-        writer.write( NEWLINE );
-        writer.write( NEWLINE );
-        writer.write( "Project: " + projectId );
-        writer.write( NEWLINE );
-        writer.write( "File: " );
-        writer.write( existing.getAbsolutePath() );
-        writer.write( NEWLINE );
-        writer.write( "File: " );
-        writer.write( conflicting.getAbsolutePath() );
+        handleGenericException( e, showStackTraces, writer );
+
