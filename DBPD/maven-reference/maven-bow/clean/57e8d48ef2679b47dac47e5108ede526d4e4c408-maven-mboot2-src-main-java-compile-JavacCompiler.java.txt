Update MBoot compiler relative to changes in plexus-compiler.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163914 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.OutputStream;
-import java.lang.reflect.Constructor;
-    public List compile( CompilerConfiguration config ) throws Exception
+    public List compile( CompilerConfiguration config )
+        throws Exception
-        System.out.println( "Compiling " + sources.length + " source file" + ( sources.length == 1 ? "" : "s" )
-            + " to " + destinationDir.getAbsolutePath() );
+        // TODO: use getLogger() - but for some reason it is null when this is used
+        System.out.println( "Compiling " + sources.length + " source file" + ( sources.length == 1 ? "" : "s" ) +
+                            " to " + destinationDir.getAbsolutePath() );
-        args.add( "-nowarn" );
+        if ( config.isNoWarn() )
+        {
+            args.add( "-nowarn" );
+        }
-        args.add( "-classpath" );
+        List classpathEntries = config.getClasspathEntries();
+        if ( classpathEntries != null && !classpathEntries.isEmpty() )
+        {
+            args.add( "-classpath" );
-        args.add( getClasspathString( config.getClasspathEntries() ) );
+            args.add( getPathString( classpathEntries ) );
+        }
+        List sourceLocations = config.getSourceLocations();
+        if ( sourceLocations != null && !sourceLocations.isEmpty() )
+        {
+            args.add( "-sourcepath" );
+
+            args.add( getPathString( sourceLocations ) );
+        }
+
+        // TODO: this could be much improved
+        if ( !compilerOptions.containsKey( "-target" ) )
+        {
+            if ( !compilerOptions.containsKey( "-source" ) )
+            {
+                // If omitted, later JDKs complain about a 1.1 target
+                args.add( "-source" );
+                args.add( "1.3" );
+            }
+
+            // Required, or it defaults to the target of your JDK (eg 1.5)
+            args.add( "-target" );
+            args.add( "1.1" );
+        }
+
-            if ( (entry.getValue() != null) )
+            if ( ( entry.getValue() != null ) )
+            {
+            }
-        cl.addURL( toolsJar.toURL() );
+        if ( toolsJar.exists() )
+        {
+            cl.addURL( toolsJar.toURL() );
+        }
-        Class c = cl.loadClass( "sun.tools.javac.Main" );
-
-        Constructor cons = c.getConstructor( new Class[] { OutputStream.class, String.class } );
+        Class c = cl.loadClass( "com.sun.tools.javac.Main" );
-        Object compiler = cons.newInstance( new Object[] { err, "javac" } );
+        Method compile = c.getMethod( "compile", new Class[]{String[].class} );
-        Method compile = c.getMethod( "compile", new Class[] { String[].class } );
+        Integer ok = (Integer) compile.invoke( null, new Object[]{args.toArray( new String[0] )} );
-        Boolean ok = (Boolean) compile.invoke( compiler, new Object[] { args.toArray( new String[0] ) } );
+        List messages = parseModernStream(
+            new BufferedReader( new InputStreamReader( new ByteArrayInputStream( err.toByteArray() ) ) ) );
-        List messages = parseModernStream( new BufferedReader( new InputStreamReader( new ByteArrayInputStream( err.toByteArray() ) ) ) );
-
-        if ( !ok.booleanValue() && messages.isEmpty() )
+        if ( ok.intValue() != 0 && messages.isEmpty() )
-            // TODO: don't throw exception
-            throw new Exception( "Failure executing javac, but could not parse the error:\n\n" + err.toString() );
+            // TODO: exception?
+            messages.add( new CompilerError(
+                "Failure executing javac, but could not parse the error:\n\n" + err.toString(), true ) );
-    protected List parseModernStream( BufferedReader input ) throws IOException
+    protected List parseModernStream( BufferedReader input )
+        throws IOException
-                if ( (line = input.readLine()) == null )
+                if ( ( line = input.readLine() ) == null )
+                // TODO: there should be a better way to parse these
-                    errors.add( new CompilerError( line ) );
+                    errors.add( new CompilerError( line, true ) );
+                }
+                else if ( buffer.length() == 0 && line.startsWith( "Note: " ) )
+                {
+                    // skip this one - it is JDK 1.5 telling us that the interface is deprecated.
-            return new CompilerError( "no more tokens - could not parse error message: " + error );
+            // TODO: exception?
+            return new CompilerError( "no more tokens - could not parse error message: " + error, true );
-            return new CompilerError( "could not parse error message: " + error );
+            // TODO: exception?
+            return new CompilerError( "could not parse error message: " + error, true );
-}
+}
