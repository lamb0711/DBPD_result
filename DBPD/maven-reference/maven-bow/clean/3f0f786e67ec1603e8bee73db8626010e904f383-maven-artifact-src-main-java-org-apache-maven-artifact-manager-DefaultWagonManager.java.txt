transform deployment of SNAPSHOT.
Currently, the POM and artifact are deployed separately, causing an inconsistent version to be written out.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163684 13f79535-47bb-0310-9956-ffa450edef68

-    public void releaseWagon( Wagon wagon )
+    private void releaseWagon( Wagon wagon )
-    // TODO: don't throw exception
-        throws Exception
+        throws TransferFailedException
-        Wagon wagon = getWagon( repository.getProtocol() );
+        try
+        {
+            putRemoteFile( repository, source, repository.pathOf( artifact ) );
+        }
+        catch ( ArtifactPathFormatException e )
+        {
+            throw new TransferFailedException( "Path of artifact could not be determined: ", e );
+        }
+    }
-        wagon.connect( repository, getProxy( repository.getProtocol() ) );
+    public void putArtifactMetadata( File source, ArtifactMetadata artifactMetadata, ArtifactRepository repository )
+        throws TransferFailedException
+    {
+        try
+        {
+            putRemoteFile( repository, source, repository.pathOfMetadata( artifactMetadata ) );
+        }
+        catch ( ArtifactPathFormatException e )
+        {
+            throw new TransferFailedException( "Path of artifact could not be determined: ", e );
+        }
+    }
-        wagon.put( source, repository.pathOf( artifact ) );
+    private void putRemoteFile( ArtifactRepository repository, File source, String remotePath )
+        throws TransferFailedException
+    {
+        Wagon wagon = null;
+        try
+        {
+            wagon = getWagon( repository.getProtocol() );
+        }
+        catch ( UnsupportedProtocolException e )
+        {
+            throw new TransferFailedException( "Unsupported Protocol: ", e );
+        }
-        wagon.disconnect();
+        // TODO: probably don't want this on metadata...
+        // TODO: not working well on upload, commented out for now
+//        if ( downloadMonitor != null )
+//        {
+//            wagon.addTransferListener( downloadMonitor );
+//        }
-        releaseWagon( wagon );
+        try
+        {
+            wagon.connect( repository, getProxy( repository.getProtocol() ) );
+
+            wagon.put( source, remotePath );
+
+            // TODO [BP]: put all disconnects in finally
+            wagon.disconnect();
+        }
+        catch ( ConnectionException e )
+        {
+            throw new TransferFailedException( "Connection failed: ", e );
+        }
+        catch ( AuthenticationException e )
+        {
+            throw new TransferFailedException( "Authentication failed: ", e );
+        }
+        catch ( AuthorizationException e )
+        {
+            throw new TransferFailedException( "Authorization failed: ", e );
+        }
+        catch ( ResourceDoesNotExistException e )
+        {
+            throw new TransferFailedException( "Resource to deploy not found: ", e );
+        }
+        finally
+        {
+            try
+            {
+                releaseWagon( wagon );
+            }
+            catch ( Exception e )
+            {
+                throw new TransferFailedException( "Unable to release wagon", e );
+            }
+        }
-    public void getMetadata( ArtifactMetadata metadata, ArtifactRepository remoteRepository,
-                             ArtifactRepository localRepository )
+    public void getArtifactMetadata( ArtifactMetadata metadata, ArtifactRepository remoteRepository, File destination )
-        String localPath;
-            localPath = localRepository.pathOfMetadata( metadata );
-        File metadataFile = new File( localRepository.getBasedir(), localPath );
-        getRemoteFile( remoteRepository, metadataFile, remotePath );
+        getRemoteFile( remoteRepository, destination, remotePath );
+        // TODO: probably don't want this on metadata...
+        if ( !temp.exists() )
+        {
+            throw new TransferFailedException( "Downloaded file does not exist: " + temp );
+        }
+
