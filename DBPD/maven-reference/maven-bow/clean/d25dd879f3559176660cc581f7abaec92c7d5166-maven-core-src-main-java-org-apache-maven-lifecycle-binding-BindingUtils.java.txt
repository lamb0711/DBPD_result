OPEN - issue MNG-3027: forked execution does not get configuration from the POM 
http://jira.codehaus.org/browse/MNG-3027

Adding reporting section to sources of plugin configuration when mojos are forked from a report mojo. Also, improving detection/addition of report mojos from a plugin, when no report-set is defined.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@543308 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Reporting;
-        
+
+     * Builds a mapping of groupId:artifactId --&gt; ReportPlugin from the POM. If a plugin is listed
+     * without a groupId, the {@link BindingUtils#createPluginKey(Plugin)} method will fill it in
+     * using org.apache.maven.plugins.
+     */
+    static Map buildReportPluginMap( MavenProject project )
+    {
+        Map pluginMap = new HashMap();
+
+        if ( project != null )
+        {
+            Reporting reporting = project.getReporting();
+            if ( reporting != null )
+            {
+                for ( Iterator it = reporting.getPlugins().iterator(); it.hasNext(); )
+                {
+                    ReportPlugin plugin = (ReportPlugin) it.next();
+
+                    pluginMap.put( createPluginKey( plugin.getGroupId(), plugin.getArtifactId() ), plugin );
+                }
+            }
+        }
+
+        return pluginMap;
+    }
+
+    /**
-     * or pluginManagement section of a POM. If a plugin is listed without a groupId, the 
+     * or pluginManagement section of a POM. If a plugin is listed without a groupId, the
-        
+
-     * Create a key for use in looking up Plugin instances from mappings. The key consists of 
+     * Create a key for use in looking up Plugin instances from mappings. The key consists of
-        if ( reportPlugin == null && reportSet == null )
+        if ( ( reportPlugin == null ) && ( reportSet == null ) )
-     * Merge the Plugin and PluginExecution configurations, with the PluginExecution configuration 
+     * Merge the Plugin and PluginExecution configurations, with the PluginExecution configuration
-        if ( plugin == null && execution == null )
+        if ( ( plugin == null ) && ( execution == null ) )
-    
+
-    static void injectProjectConfiguration( MojoBinding binding, MavenProject project )
+    static void injectProjectConfiguration( MojoBinding binding, MavenProject project, boolean includeReportConfig )
-        Plugin plugin = (Plugin) pluginMap.get( createPluginKey( binding.getGroupId(), binding.getArtifactId() ) );
+
+        String key = createPluginKey( binding.getGroupId(), binding.getArtifactId() );
+        Plugin plugin = (Plugin) pluginMap.get( key );
-        
+
-        binding.setConfiguration( mergeConfigurations( plugin, exec ) );
+        Object configuration = mergeConfigurations( plugin, exec );
+
+        if ( includeReportConfig )
+        {
+            ReportPlugin reportPlugin = (ReportPlugin) BindingUtils.buildReportPluginMap( project ).get( key );
+            if ( reportPlugin != null )
+            {
+                Map reportSets = reportPlugin.getReportSetsAsMap();
+
+                ReportSet reportSet = null;
+                if ( ( reportSets != null ) && ( exec != null ) )
+                {
+                    reportSet = (ReportSet) reportSets.get( exec.getId() );
+                }
+
+                Object reportConfig = BindingUtils.mergeConfigurations( reportPlugin, reportSet );
+
+                // NOTE: This looks weird, but we must retain some consistency with
+                // dominance of plugin configs, regardless of whether they're report
+                // mojos or not.
+                configuration = mergeRawConfigurations( reportConfig, configuration );
+            }
+        }
+
+        binding.setConfiguration( configuration );
-     * Inject any plugin configuration available from the specified POM into the MojoBindings 
-     * present in the given LifecycleBindings instance, after first merging in the configuration 
+     * Inject any plugin configuration available from the specified POM into the MojoBindings
+     * present in the given LifecycleBindings instance, after first merging in the configuration
-                    
+
-        
+
-        
+
-        
+
-        
+
-        
+
