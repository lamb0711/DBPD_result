o creating a mode for aligning the the embedder with a user installation


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@370406 13f79535-47bb-0310-9956-ffa450edef68

-    private boolean pluginUpdateOverride;
-
-    private boolean checkLatestPluginVersion;
-
+    // release plugin uses this but in IDE there will probably always be some form of interaction.
-    private boolean usePluginRegistry;
-
-    private boolean updateSnapshots;
-
+    /**
+     * This option determines whether the embedder is to be aligned to the user
+     * installation.
+     */
+    private boolean alignWithUserInstallation;
+
-    public void setPluginUpdateOverride( boolean pluginUpdateOverride )
-    {
-        this.pluginUpdateOverride = pluginUpdateOverride;
-    }
-
-    public boolean isPluginUpdateOverride()
-    {
-        return pluginUpdateOverride;
-    }
-
-    public void setCheckLatestPluginVersion( boolean checkLatestPluginVersion )
-    {
-        this.checkLatestPluginVersion = checkLatestPluginVersion;
-    }
-
-    public boolean isCheckLatestPluginVersion()
-    {
-        return checkLatestPluginVersion;
-    }
-
-    public void setUsePluginRegistry( boolean usePluginRegistry )
-    {
-        this.usePluginRegistry = usePluginRegistry;
-    }
-
-    public boolean isUsePluginRegistry()
-    {
-        return usePluginRegistry;
-    }
-
-    public void setUpdateSnapshots( boolean updateSnapshots )
-    {
-        this.updateSnapshots = updateSnapshots;
-    }
-
-    public boolean isUpdateSnapshots()
-    {
-        return updateSnapshots;
-    }
-
+    public boolean isAlignWithUserInstallation()
+    {
+        return alignWithUserInstallation;
+    }
+
+    public void setAlignWithUserInstallation( boolean alignWithUserInstallation )
+    {
+        this.alignWithUserInstallation = alignWithUserInstallation;
+    }
+
-
-        if ( pluginUpdateOverride )
-        {
-            runtimeInfo.setPluginUpdateOverride( Boolean.TRUE );
-        }
-        else
-        {
-            runtimeInfo.setPluginUpdateOverride( Boolean.FALSE );
-        }
+        runtimeInfo.setPluginUpdateOverride( Boolean.FALSE );
+        detectUserInstallation();
+
+            // ----------------------------------------------------------------------
+            // Artifact related components
+            // ----------------------------------------------------------------------
+
-            lifecycleExecutor = (LifecycleExecutor) embedder.lookup( LifecycleExecutor.ROLE );
-
-            wagonManager = (WagonManager) embedder.lookup( WagonManager.ROLE );
-
-            // ----------------------------------------------------------------------
-            // If an explicit local repository has not been set then we will use the
-            // setting builder to use the maven defaults to help us find one.
-            // ----------------------------------------------------------------------
+            lifecycleExecutor = (LifecycleExecutor) embedder.lookup( LifecycleExecutor.ROLE );
-            if ( localRepositoryDirectory == null )
-            {
-                settingsBuilder = (MavenSettingsBuilder) embedder.lookup( MavenSettingsBuilder.ROLE );
+            wagonManager = (WagonManager) embedder.lookup( WagonManager.ROLE );
-                try
-                {
-                    settings = settingsBuilder.buildSettings();
-                }
-                catch ( IOException e )
-                {
-                    throw new MavenEmbedderException( "Error creating settings.", e );
-                }
-                catch ( XmlPullParserException e )
-                {
-                    throw new MavenEmbedderException( "Error creating settings.", e );
-                }
-            }
-            else
-            {
-                settings = new Settings();
-
-                settings.setLocalRepository( localRepositoryDirectory.getAbsolutePath() );
-            }
-
-            settings.setRuntimeInfo( createRuntimeInfo( settings ) );
-
-            settings.setOffline( offline );
-
-            settings.setUsePluginRegistry( usePluginRegistry );
-
-            settings.setInteractiveMode( interactiveMode );
+            createMavenSettings();
+    // ----------------------------------------------------------------------
+    //
+    // ----------------------------------------------------------------------
+
+    private void detectUserInstallation()
+    {
+        if ( new File( userHome, ".m2" ).exists() )
+        {
+            alignWithUserInstallation = true;
+        }
+    }
+
+    /**
+     * Create the Settings that will be used with the embedder. If we are aligning with the user
+     * installation then we lookup the standard settings builder and use that to create our
+     * settings. Otherwise we constructs a settings object and populate the information
+     * ourselves.
+     *
+     * @throws MavenEmbedderException
+     * @throws ComponentLookupException
+     */
+    private void createMavenSettings()
+        throws MavenEmbedderException, ComponentLookupException
+    {
+        if ( alignWithUserInstallation )
+        {
+            // ----------------------------------------------------------------------
+            // We will use the standard method for creating the settings. This
+            // method reproduces the method of building the settings from the CLI
+            // mode of operation.
+            // ----------------------------------------------------------------------
+
+            settingsBuilder = (MavenSettingsBuilder) embedder.lookup( MavenSettingsBuilder.ROLE );
+
+            try
+            {
+                settings = settingsBuilder.buildSettings();
+            }
+            catch ( IOException e )
+            {
+                throw new MavenEmbedderException( "Error creating settings.", e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new MavenEmbedderException( "Error creating settings.", e );
+            }
+        }
+        else
+        {
+            if ( localRepository == null )
+            {
+                throw new IllegalArgumentException( "When not aligning with a user install you must specify a local repository location using the setLocalRepositoryDirectory( File ) method." );
+            }
+
+            settings = new Settings();
+
+            settings.setLocalRepository( localRepositoryDirectory.getAbsolutePath() );
+
+            settings.setRuntimeInfo( createRuntimeInfo( settings ) );
+
+            settings.setOffline( offline );
+
+            settings.setInteractiveMode( interactiveMode );
+        }
+    }
+
+    // ----------------------------------------------------------------------
+    // Lifecycle
+    // ----------------------------------------------------------------------
+
