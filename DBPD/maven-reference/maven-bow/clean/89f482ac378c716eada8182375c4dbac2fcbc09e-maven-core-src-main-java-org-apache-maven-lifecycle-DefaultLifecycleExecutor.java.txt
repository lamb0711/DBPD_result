last of the error-reporting unit tests, and an additional error type to handle modules that are referenced but don't exist, which should stop the build. All tests pass.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@613032 13f79535-47bb-0310-9956-ffa450edef68

-            PluginDescriptor pluginDescriptor = null;
+            PluginDescriptor pluginDescriptor;
-            if ( pluginDescriptor != null )
+            MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( mojoBinding.getGoal() );
+            MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );
+
+            mojoExecution.setConfiguration( (Xpp3Dom) mojoBinding.getConfiguration() );
+
+            try
-                MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( mojoBinding.getGoal() );
-                MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );
-
-                mojoExecution.setConfiguration( (Xpp3Dom) mojoBinding.getConfiguration() );
-
-                try
-                {
-                    pluginManager.executeMojo(
-                        project,
-                        mojoExecution,
-                        session );
-                }
-                catch ( PluginManagerException e )
-                {
-                    throw new LifecycleExecutionException(
-                        "Internal error in the plugin manager executing goal '"
-                            + mojoDescriptor.getId() + "': " + e.getMessage(),
-                            project,
-                        e );
-                }
-                catch ( ArtifactNotFoundException e )
-                {
-                    throw new LifecycleExecutionException(
-                        e.getMessage(),
-                        project,
-                        e );
-                }
-                catch ( InvalidDependencyVersionException e )
-                {
-                    throw new LifecycleExecutionException(
-                        e.getMessage(),
-                        project,
-                        e );
-                }
-                catch ( ArtifactResolutionException e )
-                {
-                    throw new LifecycleExecutionException(
-                        e.getMessage(),
-                        project,
-                        e );
-                }
-                catch ( PluginConfigurationException e )
-                {
-                    throw new LifecycleExecutionException(
-                        e.getMessage(),
-                        project,
-                        e );
-                }
+                pluginManager.executeMojo(
+                    project,
+                    mojoExecution,
+                    session );
-            else
+            catch ( PluginManagerException e )
-                    "Failed to load plugin for: "
-                        + MojoBindingUtils.toString( mojoBinding ) + ". Reason: unknown", project );
+                    "Internal error in the plugin manager executing goal '"
+                        + mojoDescriptor.getId() + "': " + e.getMessage(),
+                        project,
+                    e );
+            }
+            catch ( ArtifactNotFoundException e )
+            {
+                throw new LifecycleExecutionException(
+                    e.getMessage(),
+                    project,
+                    e );
+            }
+            catch ( InvalidDependencyVersionException e )
+            {
+                throw new LifecycleExecutionException(
+                    e.getMessage(),
+                    project,
+                    e );
+            }
+            catch ( ArtifactResolutionException e )
+            {
+                throw new LifecycleExecutionException(
+                    e.getMessage(),
+                    project,
+                    e );
+            }
+            catch ( PluginConfigurationException e )
+            {
+                throw new LifecycleExecutionException(
+                    e.getMessage(),
+                    project,
+                    e );
