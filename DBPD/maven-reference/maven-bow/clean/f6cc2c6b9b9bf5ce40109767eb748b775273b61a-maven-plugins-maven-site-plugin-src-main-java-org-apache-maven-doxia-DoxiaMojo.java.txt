MNG-560: Added initLocalesList() and codeToLocale() methods to honnor correctly locales parameter; Added how to documentation to contribute a new translation; Added a test project

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@280130 13f79535-47bb-0310-9956-ffa450edef68

+     * A comma separated list of locales supported by Maven. The first valid token will be the default Locale
+     * for this instance of the Java Virtual Machine.
+     *
-            if ( locales == null )
-            {
-                localesList.add( defaultLocale );
-            }
-            else
-            {
-                // The first token is the default locale
-                StringTokenizer st = new StringTokenizer( locales, "," );
-
-                while ( st.hasMoreTokens() )
-                {
-                    localesList.add( new Locale( st.nextToken().trim() ) );
-                }
-
-                defaultLocale = (Locale) localesList.get( 0 );
-            }
+            initLocalesList();
+    /**
+     * Init the <code>localesList</code> variable.
+     * <p>If <code>locales</code> variable is available, the first valid token will be the <code>defaultLocale</code>
+     * for this instance of the Java Virtual Machine.</p>
+     */
+    private void initLocalesList()
+    {
+        if ( locales == null )
+        {
+            localesList.add( defaultLocale );
+
+            return;
+        }
+
+        String[] localesArray = StringUtils.split( locales, "," );
+
+        boolean defaultLocaleWasSet = false;
+        for ( int i = 0; i < localesArray.length; i++ )
+        {
+            Locale locale = codeToLocale( localesArray[i] );
+
+            if ( locale != null )
+            {
+                if ( !Arrays.asList( Locale.getAvailableLocales() ).contains( locale ) )
+                {
+                    getLog().warn( "The locale parsed defined by '" + locale
+                                       + "' is not available in this Java Virtual Machine ("
+                                       + System.getProperty( "java.version" ) + " from "
+                                       + System.getProperty( "java.vendor" ) + ") - IGNORING" );
+                    continue;
+                }
+
+                if ( !i18n.getBundle( "site-plugin", locale ).getLocale().getLanguage().equals( locale.getLanguage() ) )
+                {
+                    StringBuffer sb = new StringBuffer();
+
+                    sb.append( "The locale '" ).append( locale ).append( "' (" );
+                    sb.append( locale.getDisplayName( Locale.ENGLISH ) );
+                    sb.append( ") is not currently support by Maven - IGNORING. " );
+                    sb.append( "\n" );
+                    sb.append( "Contribution are welcome and greatly appreciated! " );
+                    sb.append( "\n" );
+                    sb.append( "If you want to contribute a new translation, please visit " );
+                    sb.append( "http://maven.apache.org/maven2/plugins/maven-site-plugin/i18n.html " );
+                    sb.append( "for detailed instructions." );
+
+                    getLog().warn( sb.toString() );
+
+                    continue;
+                }
+
+                localesList.add( locale );
+
+                if ( !defaultLocaleWasSet )
+                {
+                    defaultLocale = locale;
+                    defaultLocaleWasSet = true;
+                }
+            }
+        }
+    }
+
+
+    /**
+     * Converts a locale code like "en", "en_US" or "en_US_win" to a <code>java.util.Locale</code>
+     * object.
+     * <p>If localeCode = <code>default</code>, return the current value of the default locale for this instance
+     * of the Java Virtual Machine.</p>
+     *
+     * @see <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Locale.html">java.util.Locale#getDefault()</a>
+     * @param localeCode the locale code string.
+     * @return a java.util.Locale object instancied or null if errors occurred
+     */
+    private Locale codeToLocale( final String localeCode )
+    {
+        if ( localeCode == null )
+        {
+            return null;
+        }
+
+        if ( localeCode.equalsIgnoreCase( "default" ) )
+        {
+            return Locale.getDefault();
+        }
+
+        String language = "";
+        String country = "";
+        String variant = "";
+
+        StringTokenizer tokenizer = new StringTokenizer( localeCode, "_" );
+        if ( tokenizer.countTokens() > 3 )
+        {
+            getLog().warn( "Invalid java.util.Locale format for '" + localeCode + "' entry - IGNORING" );
+            return null;
+        }
+
+        if ( tokenizer.hasMoreTokens() )
+        {
+            language = tokenizer.nextToken();
+            if ( tokenizer.hasMoreTokens() )
+            {
+                country = tokenizer.nextToken();
+                if ( tokenizer.hasMoreTokens() )
+                {
+                    variant = tokenizer.nextToken();
+                }
+            }
+        }
+
+        return new Locale( language, country, variant );
+    }
