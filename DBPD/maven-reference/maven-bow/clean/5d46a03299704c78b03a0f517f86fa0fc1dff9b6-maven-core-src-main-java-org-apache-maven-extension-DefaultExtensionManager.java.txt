allow version spec/release version of an extension

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@225480 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+import org.apache.maven.artifact.versioning.VersionRange;
+import org.codehaus.plexus.util.StringUtils;
-        throws ArtifactResolutionException, PlexusContainerException
+        throws ArtifactResolutionException, PlexusContainerException, InvalidVersionSpecificationException
-        // TODO: version may be null
-        Artifact artifact = artifactFactory.createExtensionArtifact( extension.getGroupId(), extension.getArtifactId(),
-                                                                     extension.getVersion() );
+        // TODO: this is duplicated with DefaultMavenProjectBuilder. Push into artifact factory.
+        String version;
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections.singleton( artifact ),
-                                                                                project.getArtifact(),
-                                                                                project.getRemoteArtifactRepositories(),
-                                                                                localRepository,
-                                                                                artifactMetadataSource );
-        for ( Iterator i = result.getArtifacts().iterator(); i.hasNext(); )
+        if ( StringUtils.isEmpty( extension.getVersion() ) )
-            Artifact a = (Artifact) i.next();
-            container.addJarResource( a.getFile() );
+            version = "RELEASE";
+        }
+        else
+        {
+            version = extension.getVersion();
+        }
+
+        VersionRange versionRange = VersionRange.createFromVersionSpec( version );
+        Artifact artifact = artifactFactory.createExtensionArtifact( extension.getGroupId(), extension.getArtifactId(),
+                                                                     versionRange );
+
+        if ( artifact != null )
+        {
+            ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections.singleton( artifact ),
+                                                                                    project.getArtifact(),
+                                                                                    project.getRemoteArtifactRepositories(),
+                                                                                    localRepository,
+                                                                                    artifactMetadataSource );
+            for ( Iterator i = result.getArtifacts().iterator(); i.hasNext(); )
+            {
+                Artifact a = (Artifact) i.next();
+                container.addJarResource( a.getFile() );
+            }
