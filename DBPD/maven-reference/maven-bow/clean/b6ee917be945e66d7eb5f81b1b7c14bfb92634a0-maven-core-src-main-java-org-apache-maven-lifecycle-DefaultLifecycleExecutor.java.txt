o getting the project dependencies now does not require two passes and we now always resolve from the root artifact. we no longer have to set the dependency artifacts either. with chained local repositories everything will be found in a repository so you don't have to make a distinction between what you have in a reactor/workspace/repo. the artifact will be found.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@774078 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.plugin.MojoFailureException;
-import org.apache.maven.plugin.PluginConfigurationException;
-import org.apache.maven.plugin.PluginExecutionException;
-        throws LifecycleExecutionException, MojoFailureException
-
-        if ( goals.isEmpty() )
-        {
-            throw new LifecycleExecutionException( "\n\nYou must specify at least one goal. Try 'mvn install' to build or 'mvn --help' for options \nSee http://maven.apache.org for more information.\n\n" );
-        }
-                    List<MojoExecution> lifecyclePlan = calculateLifecyclePlan( goal, session );        
+                    List<MojoExecution> lifecyclePlan;
+                    
+                    try
+                    {
+                        lifecyclePlan = calculateLifecyclePlan( goal, session );
+                    }
+                    catch ( LifecycleExecutionException e )
+                    {
+                        session.getResult().addException( e );
+                        return;
+                    }        
+                        session.getResult().addException( e );
+                        return;
+                        session.getResult().addException( e );
+                        return;
-                        catch ( PluginExecutionException e )
+                        catch ( Exception e )
-                            // This looks like a duplicate
-                            throw new LifecycleExecutionException( "Error executing goal.", e );                                        
-                        }
-                        catch ( PluginConfigurationException e )
-                        {
-                            // If the mojo can't actually be configured
-                            throw new LifecycleExecutionException( "Error executing goal.", e );                                        
+                            session.getResult().addException( e );
+                            return;
-    // This can ultimately be moved up to the Maven component
-    
-        Artifact artifact = repositorySystem.createArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion(), null, project.getPackaging() );
-
+        Artifact artifact = repositorySystem.createArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion(), null, project.getPackaging() );      
+        
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact( artifact )
-            // Here the root is not resolved because we are presumably working with a project locally.
-            .setResolveRoot( false )
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
+            .setArtifact( artifact )
-            //.setArtifactDependencies( project.getDependencyArtifacts() )
-
-
-        //TODO: this is wrong
-        project.setArtifacts( result.getArtifacts() );
-
-        ArtifactRepository localRepository = session.getLocalRepository();
-        List<ArtifactRepository> remoteArtifactRepositories = session.getCurrentProject().getRemoteArtifactRepositories();
-
-        for ( Artifact projectArtifact : session.getCurrentProject().getArtifacts() )
-        {
-            repositorySystem.resolve( new ArtifactResolutionRequest( projectArtifact, localRepository, remoteArtifactRepositories ) );
-        }
+        project.setArtifacts( result.getArtifacts() );        
