Replaced interpolator code.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@694907 13f79535-47bb-0310-9956-ffa450edef68

+    private final static List<InterpolatorProperty> environmentInterpolatorProperties =
+        new ArrayList<InterpolatorProperty>();
+
-            systemInterpolatorProperties.add( new InterpolatorProperty( "${env." + e.getKey() + "}", e.getValue() ) );
+            environmentInterpolatorProperties.add( new InterpolatorProperty( "${env." + e.getKey() + "}", e.getValue() ) );
+    public static List<InterpolatorProperty> createInterpolatorProperties(List<ModelProperty> modelProperties,
+                                                                      String baseUriForModel,
+                                                                      Map<String, String> aliases,
+                                                                      boolean includeSystemProperties,
+                                                                      boolean includeEnvironmentProperties)
+    {
+        if(modelProperties == null)
+        {
+            throw new IllegalArgumentException("modelProperties: null");
+        }
+
+        if(baseUriForModel == null)
+        {
+            throw new IllegalArgumentException( "baseUriForModel: null");
+        }
+
+        List<InterpolatorProperty> interpolatorProperties
+                = new ArrayList<InterpolatorProperty>( );
+
+        if( includeSystemProperties )
+        {
+            interpolatorProperties.addAll( systemInterpolatorProperties );
+        }
+
+        if( includeEnvironmentProperties )
+        {
+            interpolatorProperties.addAll( environmentInterpolatorProperties );
+        }
+
+        for ( ModelProperty mp : modelProperties )
+        {
+            InterpolatorProperty ip = mp.asInterpolatorProperty( baseUriForModel );
+            if ( ip != null )
+            {
+                interpolatorProperties.add( ip );
+                for ( Map.Entry<String, String> a : aliases.entrySet() )
+                {
+                    interpolatorProperties.add( new InterpolatorProperty(
+                            ip.getKey().replaceAll( a.getKey(), a.getValue()),
+                            ip.getValue().replaceAll( a.getKey(), a.getValue()) ) );
+                }
+            }
+        }
+        return interpolatorProperties;
+    }
+
+    public static void interpolateModelProperties(List<ModelProperty> modelProperties, 
+                                                  List<InterpolatorProperty> interpolatorProperties )
+    {
+
+        List<ModelProperty> unresolvedProperties = new ArrayList<ModelProperty>();
+        for ( ModelProperty mp : modelProperties )
+        {
+            if ( !mp.isResolved() )
+            {
+                unresolvedProperties.add( mp );
+            }
+        }
+
+        for ( InterpolatorProperty ip : interpolatorProperties )
+        {
+            for ( ModelProperty mp : unresolvedProperties )
+            {
+                  mp.resolveWith(ip);
+            }
+        }
+
+
+        for ( InterpolatorProperty ip : interpolatorProperties )
+        {
+            for ( ModelProperty mp : unresolvedProperties )
+            {
+                  mp.resolveWith(ip);
+            }
+        }
+    }
+
+
-                                 Collection<ImportModel> importModels, Collection<InterpolatorProperty> interpolatorProperties)
+                                 Collection<ImportModel> importModels, List<InterpolatorProperty> interpolatorProperties)
-        List<InterpolatorProperty> properties = new ArrayList<InterpolatorProperty>( interpolatorProperties );
-                importModelProperties(importModels, fromModelTransformer.transformToModelProperties( domainModels ));
+                importModelProperties(importModels, fromModelTransformer.transformToModelProperties( domainModels, interpolatorProperties ));
-        //interpolator
+
-
-        for ( ModelProperty mp : mps )
-        {
-            InterpolatorProperty ip = mp.asInterpolatorProperty( baseUriForModel );
-            if ( ip != null )
-            {
-                properties.add( ip );
-            }
-        }
-
-        List<ModelProperty> unresolvedProperties = new ArrayList<ModelProperty>();
-        for ( ModelProperty mp : mps )
-        {
-            if ( !mp.isResolved() )
-            {
-                unresolvedProperties.add( mp );
-            }
-        }
-
-        /*
-        for ( InterpolatorProperty ip : properties )
-        {
-            for ( ModelProperty mp : unresolvedProperties )
-            {
-                  mp.resolveWith(ip);
-                  System.out.println(mp);
-                 System.out.println("-------------------");
-            }
-        }
-        */
+        //interpolateModelProperties( mps, baseUriForModel );
-                    if(im.getId().equals(mp.getValue())) {
+                    if(im.getId().equals(mp.getResolvedValue())) {
-            if(mp.getValue() != null && mp.getValue().trim().equals("") && isLeafNode( mp, modelProperties) )
+            if(mp.getResolvedValue() != null && mp.getResolvedValue().trim().equals("") && isLeafNode( mp, modelProperties) )
