OPEN - issue MNG-2577: Allow interpolation of Properties in settings.xml 
http://jira.codehaus.org/browse/MNG-2577

Modifying to use request properties (embeddable system properties), and organizing this with the existing use of envars. NOT allowing profile-property interpolation, as these could influence profiles in a recursive manner and make their values hard to determine...besides, model-interpolation will pickup profile properties before POMs are interpolated, so the only thing this will miss is profile/properties -> servers, etc. inside the settings itself.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@545283 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.context.BuildContextManager;
+import org.apache.maven.context.SystemBuildContext;
+import org.apache.maven.settings.io.xpp3.SettingsXpp3Writer;
+import org.codehaus.plexus.util.interpolation.PropertiesBasedValueSource;
+    private BuildContextManager manager;
+
-        if ( globalSettingsFile == null && userSettingsFile == null )
+        if ( ( globalSettingsFile == null ) && ( userSettingsFile == null ) )
-        
+
-        
+
+        userSettings = interpolate( userSettings );
+
+    private Settings interpolate( Settings settings )
+        throws IOException
+    {
+        List activeProfiles = settings.getActiveProfiles();
+
+        StringWriter writer = new StringWriter();
+        new SettingsXpp3Writer().write( writer, settings );
+
+        String serializedSettings = writer.toString();
+
+        SystemBuildContext sysContext = SystemBuildContext.getSystemBuildContext( manager, true );
+
+        RegexBasedInterpolator interpolator = new RegexBasedInterpolator();
+
+        interpolator.addValueSource( new PropertiesBasedValueSource( sysContext.getSystemProperties() ) );
+        interpolator.addValueSource( new EnvarBasedValueSource() );
+
+        serializedSettings = interpolator.interpolate( serializedSettings, "settings" );
+
+        Settings result;
+        try
+        {
+            result = new SettingsXpp3Reader().read( new StringReader( serializedSettings ) );
+
+            result.setActiveProfiles( activeProfiles );
+        }
+        catch ( XmlPullParserException e )
+        {
+            IOException error = new IOException( "Failed to parse interpolated settings: " + e.getMessage() );
+            error.initCause( e );
+
+            throw error;
+        }
+
+        return result;
+    }
+
-            
+
-                StringWriter sWriter = new StringWriter();
-
-                IOUtil.copy( reader, sWriter );
-
-                String rawInput = sWriter.toString();
-
-                try
-                {
-                    RegexBasedInterpolator interpolator = new RegexBasedInterpolator();
-
-                    interpolator.addValueSource( new EnvarBasedValueSource() );
-
-                    rawInput = interpolator.interpolate( rawInput, "settings" );
-                }
-                catch ( Exception e )
-                {
-                    getLogger().warn(
-                                      "Failed to initialize environment variable resolver. Skipping environment substitution in settings." );
-                    
-                    getLogger().debug( "Failed to initialize envar resolver. Skipping resolution.", e );
-                }
-
-                StringReader sReader = new StringReader( rawInput );
-
-                settings = modelReader.read( sReader );
+                settings = modelReader.read( reader );
-                
+
-                
+
-            if ( profile.getActivation() != null && profile.getActivation().isActiveByDefault()
+            if ( ( profile.getActivation() != null ) && profile.getActivation().isActiveByDefault()
