o active the new text file reports which capture any stack traces that
  occur as well as stdout and std err

o there is a new parameter that is accepted so you can use a simplifed
  regex from the command line

  m2 surefire:test -D=test=FooTest

  is implicitly **/FooTest.java and the directory scanner is used

  so you can this to run a single test if you like or a set of tests:

  m2 surefire:test -Dtest=*Foo*

  is implicitly **/*Foo*.java

  You can also specify a comma separated list if you wish:

  m2 surefire:test -Dtest=*Foo*,*Bar*

  whic is implicitly **/*Foo*.java,**/*Bar*.java

  This just makes running a smaller set of tests easier while trying
  to pin point problems.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163120 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.StringTokenizer;
+import java.lang.reflect.Array;
+ * @parameter
+ *  name="reportsDirectory"
+ *  type="String"
+ *  required="false"
+ *  validator=""
+ *  expression="#project.build.directory/surefire-reports"
+ *  description="Base directory where all reports are written to."
+ * @parameter
+ *  name="test"
+ *  type="String"
+ *  required="false"
+ *  validator=""
+ *  expression="#test"
+ *  description="Specify this parameter if you want to use the test regex notation to select tests to run."
-        List includes = (List) request.getParameter( "includes" );
-
-        List excludes = (List) request.getParameter( "excludes" );
-
+        String reportsDirectory = (String) request.getParameter( "reportsDirectory" );
+
+        String test = (String) request.getParameter( "test" );
+
+        // ----------------------------------------------------------------------
+        // Setup the surefire booter
+        // ----------------------------------------------------------------------
+
+        SurefireBooter surefireBooter = new SurefireBooter();
+
+        surefireBooter.setReportsDirectory( reportsDirectory );
+
+        // ----------------------------------------------------------------------
+        // Check to see if we are running a single test. The raw parameter will
+        // come through if it has not been set.
+        // ----------------------------------------------------------------------
+
+        if ( !test.equals( "#test" ) )
+        {
+            // FooTest -> **/FooTest.java
+
+            List includes = new ArrayList();
+
+            List excludes = new ArrayList();
+
+            String[] testRegexes = split( test, ",", -1 );
+
+            for ( int i = 0; i < testRegexes.length; i++ )
+            {
+                includes.add( "**/" + testRegexes[i] + ".java" );
+            }
+
+            surefireBooter.addBattery( "org.codehaus.surefire.battery.DirectoryBattery", new Object[]{basedir, includes, excludes} );
+        }
+        else
+        {
+            List includes = (List) request.getParameter( "includes" );
+
+            List excludes = (List) request.getParameter( "excludes" );
+
+            surefireBooter.addBattery( "org.codehaus.surefire.battery.DirectoryBattery", new Object[]{basedir, includes, excludes} );
+        }
+
-        SurefireBooter surefireBooter = new SurefireBooter();
-
-        surefireBooter.addBattery( "org.codehaus.surefire.battery.DirectoryBattery", new Object[]{basedir, includes, excludes} );
-
-        // TODO: there should be a better way to construct a classpath
-        surefireBooter.addClassPathUrl( new File( mavenRepoLocal, "surefire/jars/surefire-1.1.jar" ).getPath() );
+        surefireBooter.addClassPathUrl( new File( mavenRepoLocal, "surefire/jars/surefire-1.2-SNAPSHOT.jar" ).getPath() );
-        surefireBooter.addReport( "org.codehaus.surefire.report.ConsoleReport" );
+        surefireBooter.addReport( "org.codehaus.surefire.report.ConsoleReporter" );
+
+        surefireBooter.addReport( "org.codehaus.surefire.report.FileReporter" );
+
+    protected String[] split( String str, String separator, int max )
+    {
+        StringTokenizer tok = null;
+        if ( separator == null )
+        {
+            // Null separator means we're using StringTokenizer's default
+            // delimiter, which comprises all whitespace characters.
+            tok = new StringTokenizer( str );
+        }
+        else
+        {
+            tok = new StringTokenizer( str, separator );
+        }
+
+        int listSize = tok.countTokens();
+        if ( max > 0 && listSize > max )
+        {
+            listSize = max;
+        }
+
+        String[] list = new String[listSize];
+        int i = 0;
+        int lastTokenBegin = 0;
+        int lastTokenEnd = 0;
+        while ( tok.hasMoreTokens() )
+        {
+            if ( max > 0 && i == listSize - 1 )
+            {
+                // In the situation where we hit the max yet have
+                // tokens left over in our input, the last list
+                // element gets all remaining text.
+                String endToken = tok.nextToken();
+                lastTokenBegin = str.indexOf( endToken, lastTokenEnd );
+                list[i] = str.substring( lastTokenBegin );
+                break;
+            }
+            else
+            {
+                list[i] = tok.nextToken();
+                lastTokenBegin = str.indexOf( list[i], lastTokenEnd );
+                lastTokenEnd = lastTokenBegin + list[i].length();
+            }
+            i++;
+        }
+        return list;
+    }
