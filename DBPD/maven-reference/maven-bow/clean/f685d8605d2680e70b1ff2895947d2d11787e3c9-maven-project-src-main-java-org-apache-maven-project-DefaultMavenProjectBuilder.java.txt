Resolving: MNG-449, MNG-152, MNG-1090, MNG-1089, MNG-1122

o Removed -cpl and related command line switches for controlling use of LATEST metadata for resolving plugin versions
o Made LATEST the only metadata used to resolve plugin versions, since this is also available when releases are performed
o Added various error diagnostics for project build exceptions
o Enhanced artifact not found error diagnostics
o Removed maven-project and added maven-artifact to maven-surefire-plugin's pom
o Removed the stanza that added pluginArtifacts to the test-booter's classpath...they are already covered by the classpathElements
o Fixed ITs in connection to the removal of -cpl
o Changed the plugin manager to detect whether a plugin's artifact file has changed since the plugin container was created...if so, reload it.
o Took the projecthelp plugin out of the build until I can diagnose the problems with its build (probably tomorrow).



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@312827 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.ArtifactUtils;
-        Map managedVersions = createManagedVersionMap( project.getDependencyManagement() );
+        Map managedVersions = createManagedVersionMap( project.getId(), project.getDependencyManagement() );
-            throw new ProjectBuildingException( "Error in dependency version", e );
+            throw new ProjectBuildingException( project.getId(), "Error in dependency version", e );
-                throw new ProjectBuildingException( "Cannot lookup metadata source for building the project.", e );
+                throw new ProjectBuildingException( "all", "Cannot lookup metadata source for building the project.", e );
-    private Map createManagedVersionMap( DependencyManagement dependencyManagement )
+    private Map createManagedVersionMap( String projectId, DependencyManagement dependencyManagement )
-                    throw new ProjectBuildingException( "Unable to parse dependency version", e );
+                    throw new ProjectBuildingException( projectId, "Unable to parse dependency version", e );
-        Model model = readModel( projectDescriptor );
+        Model model = readModel( "unknown", projectDescriptor );
-            throw new ProjectBuildingException(
+            throw new ProjectBuildingException( project.getId(), 
+            String projectId = ArtifactUtils.versionlessKey( projectArtifact );
+            
-                    model = readModel( file );
+                    model = readModel( projectId, file );
-                    throw new ProjectBuildingException( "POM could not be resolved from the repository" );
+                    throw new ProjectBuildingException( projectId, "POM could not be resolved from the repository" );
-                throw new ProjectBuildingException( "Error getting the POM in the repository", e );
+                throw new ProjectBuildingException( projectId, "Error getting the POM in the repository", e );
-                    throw new ProjectBuildingException( "POM not found in repository", e );
+                    throw new ProjectBuildingException( projectId, "POM not found in repository", e );
+        String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
+        
-            throw new ProjectBuildingException( "Failed to calculate active external profiles.", e );
+            throw new ProjectBuildingException( projectId, "Failed to calculate active external profiles.", e );
-            throw new ProjectBuildingException( "Error building project from \'" + pomLocation + "\': " + model.getId(),
+            throw new ProjectBuildingException( project.getId(), "Error building project from \'" + pomLocation + "\': " + model.getId(),
+    private String safeVersionlessKey( String groupId, String artifactId )
+    {
+        String gid = groupId;
+        
+        if ( StringUtils.isEmpty( gid ) )
+        {
+            gid = "unknown";
+        }
+        
+        String aid = artifactId;
+        
+        if ( StringUtils.isEmpty( aid ) )
+        {
+            aid = "unknown";
+        }
+        
+        return ArtifactUtils.versionlessKey( gid, aid );
+    }
+
-            throw new ProjectBuildingException( "Failed to validate POM for \'" + pomLocation +
-                "\'.\n\n  Reason(s):\n" + validationResult.render( "  " ) );
+            throw new InvalidProjectModelException( project.getId(), pomLocation, "Failed to validate POM", validationResult );
-        project.setPluginArtifacts( createPluginArtifacts( project.getBuildPlugins() ) );
-        project.setReportArtifacts( createReportArtifacts( project.getReportPlugins() ) );
-        project.setExtensionArtifacts( createExtensionArtifacts( project.getBuildExtensions() ) );
+        project.setPluginArtifacts( createPluginArtifacts( project.getId(), project.getBuildPlugins() ) );
+        project.setReportArtifacts( createReportArtifacts( project.getId(), project.getReportPlugins() ) );
+        project.setExtensionArtifacts( createExtensionArtifacts( project.getId(), project.getBuildExtensions() ) );
-            throw new ProjectBuildingException( "Failed to activate local (project-level) build profiles.", e );
+            String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
+            
+            throw new ProjectBuildingException( projectId, "Failed to activate local (project-level) build profiles.", e );
+            String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
+            
-                throw new ProjectBuildingException( "Missing groupId element from parent element" );
+                throw new ProjectBuildingException( projectId, "Missing groupId element from parent element" );
-                throw new ProjectBuildingException( "Missing artifactId element from parent element" );
+                throw new ProjectBuildingException( projectId, "Missing artifactId element from parent element" );
-                throw new ProjectBuildingException( "Missing version element from parent element" );
+                throw new ProjectBuildingException( projectId, "Missing version element from parent element" );
-                    Model candidateParent = readModel( parentDescriptor );
+                    Model candidateParent = readModel( projectId, parentDescriptor );
-                throw new ProjectBuildingException( "Failed to calculate active build profiles.", e );
+                String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
+                
+                throw new ProjectBuildingException( projectId, "Failed to calculate active build profiles.", e );
-    private Model readModel( File file )
+    private Model readModel( String projectId, File file )
-            return readModel( reader );
+            return readModel( projectId, file.getAbsolutePath(), reader );
-            throw new ProjectBuildingException( "Could not find the model file '" + file.getAbsolutePath() + "'.", e );
+            throw new ProjectBuildingException( projectId, "Could not find the model file '" + file.getAbsolutePath() + "'.", e );
-            throw new ProjectBuildingException( "Failed to build model from file '" + file.getAbsolutePath() +
+            throw new ProjectBuildingException( projectId, "Failed to build model from file '" + file.getAbsolutePath() +
-            throw new ProjectBuildingException( "Failed to parse model from file '" + file.getAbsolutePath() +
+            throw new ProjectBuildingException( projectId, "Failed to parse model from file '" + file.getAbsolutePath() +
-    private Model readModel( Reader reader )
-        throws IOException, XmlPullParserException, InvalidModelException
+    private Model readModel( String projectId, String pomLocation, Reader reader )
+        throws IOException, XmlPullParserException, InvalidProjectModelException
-            throw new InvalidModelException( "Invalid POM (not v4.0.0 modelVersion)" );
+            throw new InvalidProjectModelException( projectId, pomLocation, "Invalid POM (not v4.0.0 modelVersion)" );
-    private Model readModel( URL url )
+    private Model readModel( String projectId, URL url )
-            return readModel( reader );
+            return readModel( projectId, url.toExternalForm(), reader );
-            throw new ProjectBuildingException( "Failed build model from URL \'" + url.toExternalForm() +
+            throw new ProjectBuildingException( projectId, "Failed build model from URL \'" + url.toExternalForm() +
-            throw new ProjectBuildingException( "Failed to parse model from URL \'" + url.toExternalForm() +
+            throw new ProjectBuildingException( projectId, "Failed to parse model from URL \'" + url.toExternalForm() +
-    protected Set createPluginArtifacts( List plugins )
+    protected Set createPluginArtifacts( String projectId, List plugins )
-                throw new ProjectBuildingException( "Unable to parse plugin version", e );
+                throw new ProjectBuildingException( projectId, "Unable to parse plugin version", e );
-    protected Set createReportArtifacts( List reports )
+    protected Set createReportArtifacts( String projectId, List reports )
-                    throw new ProjectBuildingException( "Unable to parse plugin version", e );
+                    throw new ProjectBuildingException( projectId, "Unable to parse plugin version", e );
-    protected Set createExtensionArtifacts( List extensions )
+    protected Set createExtensionArtifacts( String projectId, List extensions )
-                    throw new ProjectBuildingException( "Unable to parse extension version", e );
+                    throw new ProjectBuildingException( projectId, "Unable to parse extension version", e );
-            throw new ProjectBuildingException( "Error building super-project", e );
+            String projectId = safeVersionlessKey( STANDALONE_SUPERPOM_GROUPID, STANDALONE_SUPERPOM_ARTIFACTID );
+            
+            throw new ProjectBuildingException( projectId, "Error building super-project", e );
-        return readModel( url );
+        String projectId = safeVersionlessKey( STANDALONE_SUPERPOM_GROUPID, STANDALONE_SUPERPOM_ARTIFACTID );
+        
+        return readModel( projectId, url );
