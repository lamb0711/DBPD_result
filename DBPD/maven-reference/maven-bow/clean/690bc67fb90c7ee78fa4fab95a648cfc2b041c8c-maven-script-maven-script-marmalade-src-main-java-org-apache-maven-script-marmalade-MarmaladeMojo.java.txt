Added marmalade support back in...it's currently still using the libraries-shovelled-into-core method, but it now uses the new mojo mechanism that uses plexus ComponentConfigurators...had to make the lookup for configurators dynamic for the DefaultPluginManager, too.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168064 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.plugin.AbstractPlugin;
-import org.apache.maven.plugin.PluginExecutionRequest;
-import org.apache.maven.plugin.PluginExecutionResponse;
+import org.apache.maven.plugin.AbstractMojo;
+import org.apache.maven.plugin.MojoExecutionException;
+import org.codehaus.plexus.component.MapOrientedComponent;
+import org.codehaus.plexus.component.repository.ComponentRequirement;
+import org.codehaus.plexus.util.StringUtils;
+import java.util.Map;
+import java.util.TreeMap;
-    extends AbstractPlugin
+    extends AbstractMojo
+    implements MapOrientedComponent
+    private Map contextMap = new TreeMap();
+
-    public void execute( PluginExecutionRequest request, PluginExecutionResponse response )
-        throws Exception
+    public void execute()
+        throws MojoExecutionException
+        MarmaladeExecutionContext context = new DefaultContext( contextMap );
-        MarmaladeExecutionContext context = new DefaultContext( request.getParameters() );
-
-        context.setVariable( MarmaladeMojoExecutionDirectives.REQUEST_INVAR, request );
-        context.setVariable( MarmaladeMojoExecutionDirectives.RESPONSE_INVAR, response );
-        
-        PrintWriter outWriter = new PrintWriter(sOutWriter);
-        
-        context.setOutWriter(outWriter);
-        
+        PrintWriter outWriter = new PrintWriter( sOutWriter );
+
+        context.setOutWriter( outWriter );
+
-        PrintWriter errWriter = new PrintWriter(sErrWriter);
-        
-        context.setErrWriter(errWriter);
-        
+        PrintWriter errWriter = new PrintWriter( sErrWriter );
+
+        context.setErrWriter( errWriter );
+
-            throw e;
+            throw new MojoExecutionException( "[ERROR] While executing mojo script.\n Error: " + e.getLocalizedMessage(), e );
-        
+
-        if(output.length() > 0)
+        if ( output.length() > 0 )
-            getLog().info(output);
+            getLog().info( output );
-        
+
-        if(error.length() > 0)
+        if ( error.length() > 0 )
-            getLog().error(error);
+            getLog().error( error );
-//        Map externalizedVars = context.getExternalizedVariables();
-//        for ( Iterator it = externalizedVars.entrySet().iterator(); it.hasNext(); )
-//        {
-//            Map.Entry entry = (Map.Entry) it.next();
-//
-//            request.addContextValue( entry.getKey(), entry.getValue() );
-//        }
+        //        Map externalizedVars = context.getExternalizedVariables();
+        //        for ( Iterator it = externalizedVars.entrySet().iterator(); it.hasNext(); )
+        //        {
+        //            Map.Entry entry = (Map.Entry) it.next();
+        //
+        //            request.addContextValue( entry.getKey(), entry.getValue() );
+        //        }
+    }
+
+    public void addComponentRequirement( ComponentRequirement requirementDescriptor, Object requirementValue )
+    {
+        String key = requirementDescriptor.getFieldName();
+
+        if ( StringUtils.isEmpty( key ) )
+        {
+            key = requirementDescriptor.getRole();
+        }
+
+        contextMap.put( key, requirementValue );
+    }
+
+    public void setComponentConfiguration( Map componentConfiguration )
+    {
+        contextMap.putAll( componentConfiguration );
