change resolve() methods to not return Artifact - but instead modify the original. Artifact is immutable except for version so it is safe - but will it cost flexibility later. Currently, this makes it much simpler as less copying vigilance is required.
This has ironed out most wrinkles. Still need to implement the snapshot checking cache, and special case the use of installed snapshots over deployed ones.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163706 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashSet;
-    // TODO: would like to avoid the returning of a new artifact - is it ok to modify the original though?
-    public Artifact resolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )
+    public void resolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )
-                artifact = transform.transformForResolve( artifact, remoteRepositories, localRepository );
+                transform.transformForResolve( artifact, remoteRepositories, localRepository );
-        if ( destination.exists() )
+        if ( !destination.exists() )
-            return artifact;
-        }
+            try
+            {
+                if ( artifact.getRepository() != null )
+                {
+                    // the transformations discovered the artifact - so use it exclusively
+                    wagonManager.getArtifact( artifact, artifact.getRepository(), destination );
+                }
+                else
+                {
+                    wagonManager.getArtifact( artifact, remoteRepositories, destination );
+                }
-        try
-        {
-            if ( artifact.getRepository() != null )
-            {
-                // the transformations discovered the artifact - so use it exclusively
-                wagonManager.getArtifact( artifact, artifact.getRepository(), destination );
+                // must be after the artifact is downloaded
+                for ( Iterator i = artifact.getMetadataList().iterator(); i.hasNext(); )
+                {
+                    ArtifactMetadata metadata = (ArtifactMetadata) i.next();
+                    metadata.storeInLocalRepository( localRepository );
+                }
-            else
+            catch ( ResourceDoesNotExistException e )
-                wagonManager.getArtifact( artifact, remoteRepositories, destination );
+                throw new ArtifactResolutionException( artifactNotFound( localPath, remoteRepositories ), e );
-
-            // must be after the artifact is downloaded
-            for ( Iterator i = artifact.getMetadataList().iterator(); i.hasNext(); )
+            catch ( TransferFailedException e )
-                ArtifactMetadata metadata = (ArtifactMetadata) i.next();
-                metadata.storeInLocalRepository( localRepository );
+                throw new ArtifactResolutionException( "Error downloading artifact " + artifact, e );
+            }
+            catch ( ArtifactMetadataRetrievalException e )
+            {
+                throw new ArtifactResolutionException( "Error downloading artifact " + artifact, e );
-        catch ( ResourceDoesNotExistException e )
-        {
-            throw new ArtifactResolutionException( artifactNotFound( localPath, remoteRepositories ), e );
-        }
-        catch ( TransferFailedException e )
-        {
-            throw new ArtifactResolutionException( "Error downloading artifact " + artifact, e );
-        }
-        catch ( ArtifactMetadataRetrievalException e )
-        {
-            throw new ArtifactResolutionException( "Error downloading artifact " + artifact, e );
-        }
-
-        return artifact;
-    public Set resolve( Set artifacts, List remoteRepositories, ArtifactRepository localRepository )
-        throws ArtifactResolutionException
-    {
-        Set resolvedArtifacts = new HashSet();
-
-        for ( Iterator i = artifacts.iterator(); i.hasNext(); )
-        {
-            Artifact artifact = (Artifact) i.next();
-
-            Artifact resolvedArtifact = resolve( artifact, remoteRepositories, localRepository );
-
-            resolvedArtifacts.add( resolvedArtifact );
-        }
-
-        return resolvedArtifacts;
-    }
-
-        // TODO: this is unclean, but necessary as long as resolve may return a different artifact
-        Map collectedArtifacts = artifactResolutionResult.getArtifacts();
-        Map resolvedArtifacts = new HashMap( collectedArtifacts.size() );
-        for ( Iterator i = collectedArtifacts.keySet().iterator(); i.hasNext(); )
+        for ( Iterator i = artifactResolutionResult.getArtifacts().values().iterator(); i.hasNext(); )
-            Object key = i.next();
-            resolvedArtifacts.put( key, resolve( (Artifact) collectedArtifacts.get( key ), remoteRepositories,
-                                                 localRepository ) );
+            Artifact artifact = (Artifact) i.next();
+            resolve( artifact, remoteRepositories, localRepository );
-        collectedArtifacts.clear();
-        collectedArtifacts.putAll( resolvedArtifacts );
-
