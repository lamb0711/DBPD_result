o Allowed build extensions to contribute lifecycle participants

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@820374 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import java.util.HashSet;
-            for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants() )
+            for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants( Collections.<MavenProject> emptyList() ) )
+        ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();
-            for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants() )
+            for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants( projects ) )
+                Thread.currentThread().setContextClassLoader( listener.getClass().getClassLoader() );
+
+        finally
+        {
+            Thread.currentThread().setContextClassLoader( originalClassLoader );
+        }
-    private List<AbstractMavenLifecycleParticipant> getLifecycleParticipants()
+    private Collection<AbstractMavenLifecycleParticipant> getLifecycleParticipants( Collection<MavenProject> projects )
-        // TODO injection of component lists does not work
-        List<AbstractMavenLifecycleParticipant> lifecycleListeners;
+        Collection<AbstractMavenLifecycleParticipant> lifecycleListeners =
+            new LinkedHashSet<AbstractMavenLifecycleParticipant>();
+
+        ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();
-            lifecycleListeners = container.lookupList( AbstractMavenLifecycleParticipant.class );
+            try
+            {
+                lifecycleListeners.addAll( container.lookupList( AbstractMavenLifecycleParticipant.class ) );
+            }
+            catch ( ComponentLookupException e )
+            {
+                // this is just silly, lookupList should return an empty list!
+                logger.warn( "Failed to lookup lifecycle participants: " + e.getMessage() );
+            }
+
+            Collection<ClassLoader> scannedRealms = new HashSet<ClassLoader>();
+
+            for ( MavenProject project : projects )
+            {
+                ClassLoader projectRealm = project.getClassRealm();
+
+                if ( projectRealm != null && scannedRealms.add( projectRealm ) )
+                {
+                    Thread.currentThread().setContextClassLoader( projectRealm );
+
+                    try
+                    {
+                        lifecycleListeners.addAll( container.lookupList( AbstractMavenLifecycleParticipant.class ) );
+                    }
+                    catch ( ComponentLookupException e )
+                    {
+                        // this is just silly, lookupList should return an empty list!
+                        logger.warn( "Failed to lookup lifecycle participants: " + e.getMessage() );
+                    }
+                }
+            }
-        catch ( ComponentLookupException e1 )
+        finally
-            // this is just silly, lookupList should return an empty list!
-            lifecycleListeners = new ArrayList<AbstractMavenLifecycleParticipant>();
+            Thread.currentThread().setContextClassLoader( originalClassLoader );
+
