PR: MNG-598
implement ability to retrieve packaging handlers (lifecycle mappings) from extension plugins. Remove plugin mapping
metadata for the same
integration tests are in place for type handlers but commented out until implemented (41)


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@225263 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.repository.metadata.RepositoryMetadataManagementException;
-import org.apache.maven.plugin.mapping.PluginMappingManagementException;
-import org.apache.maven.plugin.mapping.PluginMappingManager;
-        throws LifecycleExecutionException
+        throws ArtifactResolutionException, LifecycleExecutionException
-        Map mappings;
-
+        LifecycleMapping m;
+
-            PluginMappingManager mappingManager = getPluginMappingManager( session, project );
-
-            Plugin pluginContainingLifecycleMapping = mappingManager.getByPackaging( packaging );
-
-            LifecycleMapping m;
-
-            if ( pluginContainingLifecycleMapping != null )
-            {
-                try
-                {
-                    pluginManager.verifyPlugin( pluginContainingLifecycleMapping, project, session.getSettings(),
-                                                session.getLocalRepository() );
-
-                    m = (LifecycleMapping) pluginManager.getPluginComponent( pluginContainingLifecycleMapping,
-                                                                             LifecycleMapping.ROLE, packaging );
-
-                    mappings = m.getPhases();
-                }
-                catch ( ComponentLookupException e )
-                {
-                    throw new LifecycleExecutionException( "Plugin: " + pluginContainingLifecycleMapping.getKey() +
-                        " declares lifecycle mapping for: \'" + packaging +
-                        "\', but does not appear to contain the actual mapping among its component descriptors.", e );
-                }
-            }
-            else
-            {
-                try
-                {
-                    m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
-
-                    mappings = m.getPhases();
-                }
-                catch ( ComponentLookupException e )
-                {
-                    getLogger().warn(
-                        "Lifecycle mappings not found for packaging: \'" + packaging + "\'. Using defaults." );
-
-                    getLogger().debug( "Lifecycle mappings not found for packaging: \'" + packaging + "\'.", e );
-
-                    mappings = defaultPhases;
-                }
-            }
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new LifecycleExecutionException(
-                "Cannot load plugin which defines lifecycle mappings for: \'" + packaging + "\'.", e );
+            m = (LifecycleMapping) findExtension( project, LifecycleMapping.ROLE, packaging, session.getSettings(),
+                                                  session.getLocalRepository() );
-                "Cannot load plugin which defines lifecycle mappings for: \'" + packaging + "\'.", e );
+                "Cannot load extension plugin obtaining lifecycle mappings for: \'" + packaging + "\'.", e );
-            throw new LifecycleExecutionException( "Cannot load lifecycle mappings.", e );
+            throw new LifecycleExecutionException(
+                "Cannot load extension plugin obtaining lifecycle mappings for: \'" + packaging + "\'.", e );
-        return mappings;
-    }
-
-    private PluginMappingManager getPluginMappingManager( MavenSession session, MavenProject project )
-        throws LifecycleExecutionException
-    {
-        PluginMappingManager mappingManager = session.getPluginMappingManager();
-
-        // don't reassemble the plugin mappings if the session has already been configured with them.
-        if ( mappingManager == null )
+        if ( m == null )
-                List pluginGroupIds = session.getSettings().getPluginGroups();
-                List pluginRepositories = project.getPluginArtifactRepositories();
-                ArtifactRepository localRepository = session.getLocalRepository();
-
-                mappingManager = pluginMappingBuilder.loadPluginMappings( pluginGroupIds, pluginRepositories,
-                                                                          localRepository );
-
-                // lazily configure this on the session.
-                session.setPluginMappingManager( mappingManager );
+                m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
-            catch ( RepositoryMetadataManagementException e )
+            catch ( ComponentLookupException e )
-                throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
-            }
-            catch ( PluginMappingManagementException e )
-            {
-                throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
+                getLogger().warn(
+                    "Lifecycle mappings not found for packaging: \'" + packaging + "\'. Using defaults." );
+
+                getLogger().debug( "Lifecycle mappings not found for packaging: \'" + packaging + "\'.", e );
+
+                return defaultPhases;
-        return mappingManager;
+        return m.getPhases();
+    }
+
+    private Object findExtension( MavenProject project, String role, String roleHint, Settings settings,
+                                  ArtifactRepository localRepository )
+        throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException
+    {
+        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+        {
+            Plugin plugin = (Plugin) i.next();
+
+            if ( plugin.isExtensions() )
+            {
+                pluginManager.verifyPlugin( plugin, project, settings, localRepository );
+
+                // TODO: if moved to the plugin manager we already have the descriptor from above and so do can lookup the container directly
+                try
+                {
+                    return pluginManager.getPluginComponent( plugin, role, roleHint );
+                }
+                catch ( ComponentLookupException e )
+                {
+                    getLogger().debug( "Unable to find the lifecycle component in the extension", e );
+                }
+            }
+        }
+        return null;
