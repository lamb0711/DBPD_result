MNG-4041: maven core returns stale project state during extended use. this is a patch which provides intelligent caching and yields a very substantial performance improvement.
Submitted by: Igor Fedorenko



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@782014 13f79535-47bb-0310-9956-ffa450edef68

-        Artifact artifact;
-        List<ArtifactRepository> repositories = new ArrayList<ArtifactRepository>();
+        private final Artifact artifact;
+        private final List<ArtifactRepository> repositories = new ArrayList<ArtifactRepository>();
+        private final int hashCode;
-        CacheKey( Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+        public CacheKey( Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+
+            int hash = 17;
+            hash = hash * 31 + artifactHashCode( artifact );
+            hash = hash * 31 + repositories.hashCode();
+            this.hashCode = hash;
-            int hash = 17;
-            hash = hash * 31 + artifact.hashCode();
-            hash = hash * 31 + repositories.hashCode();
-
-            return hash;
+            return hashCode;
-            return artifact.equals( other.artifact ) && repositories.equals( other.repositories );
+            return artifactEquals( artifact, other.artifact ) && repositories.equals( other.repositories );
+    private static int artifactHashCode( Artifact a )
+    {
+        int result = 17;
+        result = 31 * result + a.getGroupId().hashCode();
+        result = 31 * result + a.getArtifactId().hashCode();
+        result = 31 * result + a.getType().hashCode();
+        if ( a.getVersion() != null )
+        {
+            result = 31 * result + a.getVersion().hashCode();
+        }
+        result = 31 * result + ( a.getClassifier() != null ? a.getClassifier().hashCode() : 0 );
+        result = 31 * result + ( a.getScope() != null ? a.getScope().hashCode() : 0 );
+        result = 31 * result + ( a.getDependencyFilter() != null? a.getDependencyFilter().hashCode() : 0 );
+        result = 31 * result + ( a.isOptional() ? 1 : 0 );
+        return result;
+    }
+
+    private static boolean artifactEquals( Artifact a1, Artifact a2 )
+    {
+        if ( a1 == a2 )
+        {
+            return true;
+        }
+        
+        return eq( a1.getGroupId(), a2.getGroupId() )
+            && eq( a1.getArtifactId(), a2.getArtifactId() )
+            && eq( a1.getType(), a2.getType() )
+            && eq( a1.getVersion(), a2.getVersion() )
+            && eq( a1.getClassifier(), a2.getClassifier() )
+            && eq( a1.getScope(), a2.getScope() )
+            && eq( a1.getDependencyFilter(), a2.getDependencyFilter() )
+            && a1.isOptional() == a2.isOptional();
+    }
+
+    private static <T> boolean eq( T s1, T s2 )
+    {
+        return s1 != null? s1.equals( s2 ): s2 == null;
+    }
+
-        Artifact pomArtifact;
-        List<Artifact> artifacts;
-        List<ArtifactRepository> remoteRepositories;
+        private Artifact pomArtifact;
+        private List<Artifact> artifacts;
+        private List<ArtifactRepository> remoteRepositories;
-        long length;
-        long timestamp;
+        private long length;
+        private long timestamp;
+        
+        public Artifact getArtifact()
+        {
+            return pomArtifact;
+        }
+
+        public List<Artifact> getArtifacts()
+        {
+            return artifacts;
+        }
+
+        public List<ArtifactRepository> getRemoteRepositories()
+        {
+            return remoteRepositories;
+        }
-    
-    private Map<CacheKey, CacheRecord> cache = new HashMap<CacheKey, CacheRecord>();
+
+    protected Map<CacheKey, CacheRecord> cache = new HashMap<CacheKey, CacheRecord>();
-            Artifact pomArtifact = ArtifactUtils.copyArtifact( cacheRecord.pomArtifact );
-            Set<Artifact> artifacts = new LinkedHashSet<Artifact>( copyArtifacts( cacheRecord.artifacts ) );
-            return new ResolutionGroup( pomArtifact, artifacts , cacheRecord.remoteRepositories );
+            Artifact pomArtifact = ArtifactUtils.copyArtifact( cacheRecord.getArtifact() );
+            Set<Artifact> artifacts = new LinkedHashSet<Artifact>( copyArtifacts( cacheRecord.getArtifacts() ) );
+            return new ResolutionGroup( pomArtifact, artifacts , cacheRecord.getRemoteRepositories() );
+    public void flush()
+    {
+        cache.clear();
+    }
