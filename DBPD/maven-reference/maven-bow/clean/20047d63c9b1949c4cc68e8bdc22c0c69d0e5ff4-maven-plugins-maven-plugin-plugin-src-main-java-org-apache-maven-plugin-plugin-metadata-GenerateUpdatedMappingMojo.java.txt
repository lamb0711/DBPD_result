Fixing problem with using distributionManagement repository definition for download of plugins.xml metadata.

Now, in order to build a maven plugin, you need two things:

1. a repository defined in distributionManagment
2. a repository defined in <repositories/> which has the same id as the one in distributionManagement.

This is necessary, since in most cases SSH will be used in the distributionManagement definition for uploading the plugin...which means that the download of the existing plugins.xml file might not be available for users trying to run an install. SSH requires authentication information, and users (particularly those running the bootstrap) might not have this auth info.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@216013 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+        String distributionRepositoryId = distributionRepository.getId();
+
+        List remoteArtifactRepositories = project.getRemoteArtifactRepositories();
+
+        ArtifactRepository readRemoteRepository = null;
+
+        for ( Iterator it = remoteArtifactRepositories.iterator(); it.hasNext(); )
+        {
+            ArtifactRepository currentRepository = (ArtifactRepository) it.next();
+
+            if ( distributionRepositoryId.equals( currentRepository.getId() ) )
+            {
+                readRemoteRepository = currentRepository;
+                
+                break;
+            }
+        }
+        
-            repositoryMetadataManager.resolve( metadata, distributionRepository, localRepository );
+            repositoryMetadataManager.resolve( metadata, readRemoteRepository, localRepository );
-                getLog().info( "Cannot find " + metadata + " on remote repository. We'll create a new one." );
-                getLog().debug( "Metadata " + metadata + " not found.", e );
+                getLog().info( "Cannot find " + metadata + " on remote repository. Creating a new one." );
+                getLog().debug( "Metadata " + metadata + " cannot be resolved.", e );
-                throw new MojoExecutionException( "Cannot resolve plugin-mapping metadata: " + metadata, e );
+                throw new MojoExecutionException( "Failed to resolve " + metadata, e );
