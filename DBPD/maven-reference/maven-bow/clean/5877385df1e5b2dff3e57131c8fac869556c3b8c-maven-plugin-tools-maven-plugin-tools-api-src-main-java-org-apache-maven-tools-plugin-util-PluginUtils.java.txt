Final pass on cleaning up the mojo api...collapsed MavenPluginDescriptor and PluginDescriptor in the same way as MavenMojoDescriptor/MojoDescriptor had been; eliminated the need for plugin.descriptor.Dependency and MavenPluginDependency (using ComponentDependencies instead); adjusted the MojoExtractors (name?) to return Lists instead of Sets; added duplicate checking to a new addMojo(MojoDescriptor) method on PluginDescriptor, so we catch it on all sides; changed the Generators to use execute(outputDirectory, pluginDescriptor) rather than the myriad pluginDescriptor-derived values; added an IT for checking that the build for a plugin will fail if multiple mojos are detected with the same goal; and, added a special case to PluginDescriptor.getGoalPrefixFromArtifactId() to handle maven-plugin-plugin. That should be about it. I'm not sure that I've gotten the IT for that failure test added to svn yet, so that may follow.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168481 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.project.MavenProject;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.codehaus.plexus.component.repository.ComponentDependency;
+import java.util.LinkedList;
+import java.util.List;
-    public static void writeDependencies( XMLWriter w, MavenProject project )
+    public static void writeDependencies( XMLWriter w, PluginDescriptor pluginDescriptor )
-        for ( Iterator it = project.getDependencies().iterator(); it.hasNext(); )
+        for ( Iterator it = pluginDescriptor.getDependencies().iterator(); it.hasNext(); )
-            Dependency dep = (Dependency) it.next();
+            ComponentDependency dep = (ComponentDependency) it.next();
-            if ( !Artifact.SCOPE_TEST.equals( dep.getScope() ) )
-            {
-                w.startElement( "dependency" );
+            w.startElement( "dependency" );
-                PluginUtils.element( w, "groupId", dep.getGroupId() );
+            PluginUtils.element( w, "groupId", dep.getGroupId() );
-                PluginUtils.element( w, "artifactId", dep.getArtifactId() );
+            PluginUtils.element( w, "artifactId", dep.getArtifactId() );
-                PluginUtils.element( w, "type", dep.getType() );
+            PluginUtils.element( w, "type", dep.getType() );
-                PluginUtils.element( w, "version", dep.getVersion() );
+            PluginUtils.element( w, "version", dep.getVersion() );
-                w.endElement();
-            }
+            w.endElement();
+    
+    public static List toComponentDependencies(List dependencies)
+    {
+        List componentDeps = new LinkedList();
+
+        for ( Iterator it = dependencies.iterator(); it.hasNext(); )
+        {
+            Dependency dependency = (Dependency) it.next();
+            
+            ComponentDependency cd = new ComponentDependency();
+
+            cd.setArtifactId( dependency.getArtifactId() );
+            cd.setGroupId( dependency.getGroupId() );
+            cd.setVersion( dependency.getVersion() );
+            cd.setType( dependency.getType() );
+
+            componentDeps.add( cd );
+        }
+        
+        return componentDeps;
+    }
