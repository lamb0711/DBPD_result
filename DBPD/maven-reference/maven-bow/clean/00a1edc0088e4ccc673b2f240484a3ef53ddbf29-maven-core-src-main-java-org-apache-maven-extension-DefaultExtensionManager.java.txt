disable project-specific loading of extensions and plugins until we can figure out how to do it without causing OOME's.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@589904 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.PlexusContainerException;
-                              ArtifactRepository localRepository,
-                              Map projectSessions )
+                              ArtifactRepository localRepository )
-                      projectSessions,
-                              ArtifactRepository localRepository,
-                              Map projectSessions )
+                              ArtifactRepository localRepository )
-                      projectSessions,
+    private String createExtensionRealmId( Artifact realmArtifact )
+    {
+        return "/extensions/" + ArtifactUtils.versionlessKey( realmArtifact );
+    }
+
-                               Map projectSessions,
-        // create a new MavenProjectSession instance for the current project.
-        // This session instance will house the plugin and extension realms that
-        // pertain to this specific project, along with containing the project-level
-        // realm to use as a lookupRealm in the lifecycle executor and plugin manager.
-        MavenProjectSession projectSession = (MavenProjectSession) projectSessions.get( projectId );
-        if ( projectSession == null )
-        {
-            try
-            {
-                projectSession = new MavenProjectSession( projectId, container );
-            }
-            catch ( PlexusContainerException e )
-            {
-                throw new ExtensionManagerException( "Failed to create project realm for: " + projectId, projectId, e );
-            }
-
-            projectSessions.put( projectId, projectSession );
-        }
-
-             && !projectSession.containsExtensionRealm( extensionArtifact )
+            String realmId = createExtensionRealmId( extensionArtifact );
+            try
+            {
+                container.getClassWorld().getRealm( realmId );
+
+                // if we find the realm, we don't need to proceed, we've already added this extension.
+                return;
+            }
+            catch ( NoSuchRealmException e )
+            {
+                // proceed.
+            }
+
-                extensionRealm = projectSession.createExtensionRealm( extensionArtifact );
+                extensionRealm = container.getContainerRealm().createChildRealm( realmId );
-            importLocalExtensionComponents( extensionRealm, projectSession, extensionArtifact );
+            importLocalExtensionComponents( extensionRealm, projectId, extensionArtifact );
-                                                 MavenProjectSession projectSession,
+                                                 String projectId,
-        String projectId = projectSession.getProjectId();
-
-            ClassRealm projectRealm = projectSession.getProjectRealm();
+            ClassRealm realm = container.getContainerRealm();
-                            getLogger().debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealm.getId() + "\nto project realm: " + projectRealm.getId() );
+                            getLogger().debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealm.getId() + "\nto container realm: " + realm.getId() );
-                            projectRealm.importFrom( extensionRealm.getId(), implementation );
+                            realm.importFrom( extensionRealm.getId(), implementation );
-                            comp.setRealmId( projectRealm.getId() );
+                            comp.setRealmId( realm.getId() );
-                            throw new ExtensionManagerException( "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealm.getId() + " to project realm: " + projectRealm.getId(), extensionArtifact, projectId, e );
+                            throw new ExtensionManagerException( "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealm.getId() + " to project realm: " + realm.getId(), extensionArtifact, projectId, e );
-    public void registerWagons( Map projectSessions )
+    public void registerWagons()
-        for ( Iterator it = projectSessions.values().iterator(); it.hasNext(); )
-        {
-            MavenProjectSession projectSession = (MavenProjectSession) it.next();
-
-            ClassRealm oldRealm = container.setLookupRealm( projectSession.getProjectRealm() );
-
-            wagonManager.findAndRegisterWagons( container );
-
-            container.setLookupRealm( oldRealm );
-        }
+        wagonManager.findAndRegisterWagons( container );
