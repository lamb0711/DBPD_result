o we simply can't survive right now without inserting plexus utils, we just have too many builds without
  declared dependencies on it
o cleaning up some unused stuff from the bootstrap


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@534974 13f79535-47bb-0310-9956-ffa450edef68

+        checkPlexusUtils( resolutionGroup, artifactFactory );        
+
+
+    public static void checkPlexusUtils( ResolutionGroup resolutionGroup, ArtifactFactory artifactFactory )
+    {
+        // ----------------------------------------------------------------------------
+        // If the plugin already declares a dependency on plexus-utils then we're all
+        // set as the plugin author is aware of its use. If we don't have a dependency
+        // on plexus-utils then we must protect users from stupid plugin authors who
+        // did not declare a direct dependency on plexus-utils because the version
+        // Maven uses is hidden from downstream use. We will also bump up any
+        // anything below 1.1 to 1.1 as this mimics the behaviour in 2.0.5 where
+        // plexus-utils 1.1 was being forced into use.
+        // ----------------------------------------------------------------------------
+
+        VersionRange vr = null;
+
+        try
+        {
+            vr = VersionRange.createFromVersionSpec( "[1.1,)" );
+        }
+        catch ( InvalidVersionSpecificationException e )
+        {
+            // Won't happen
+        }
+
+        boolean plexusUtilsPresent = false;
+
+        for ( Iterator i = resolutionGroup.getArtifacts().iterator(); i.hasNext(); )
+        {
+            Artifact a = (Artifact) i.next();
+
+            if ( a.getArtifactId().equals( "plexus-utils" ) &&
+                vr.containsVersion( new DefaultArtifactVersion( a.getVersion() ) ) )
+            {
+                plexusUtilsPresent = true;
+
+                break;
+            }
+        }
+
+        if ( !plexusUtilsPresent )
+        {
+            // We will add plexus-utils as every plugin was getting this anyway from Maven itself. We will set the
+            // version to the latest version we know that works as of the 2.0.6 release. We set the scope to runtime
+            // as this is what's implicitly happening in 2.0.6.
+
+            resolutionGroup.getArtifacts().add( artifactFactory.createArtifact( "org.codehaus.plexus",
+                                                                                "plexus-utils", "1.1",
+                                                                                Artifact.SCOPE_RUNTIME, "jar" ) );
+        }
+    }    
