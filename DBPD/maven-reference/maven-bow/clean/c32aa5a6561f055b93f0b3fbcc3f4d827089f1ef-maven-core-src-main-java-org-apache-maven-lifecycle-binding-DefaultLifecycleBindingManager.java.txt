Fixing unit test problems from it0103 fix, and fixing it0042...just 4 more failing ITs before this is back on its feet.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@645015 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
-     * Retrieve the LifecycleBindings given by the lifecycle mapping component/file for the project's packaging. Any
-     * applicable mojo configuration will be injected into the LifecycleBindings from the POM.
+     * {@inheritDoc}
-     * Construct the LifecycleBindings for the default lifecycle mappings, including injection of configuration from the
-     * project into each MojoBinding, where appropriate.
+     * {@inheritDoc}
-     * Construct the LifecycleBindings that constitute the extra mojos bound to the lifecycle within the POM itself.
-     * @param session
+     * {@inheritDoc}
-    public LifecycleBindings getProjectCustomBindings( final MavenProject project, final MavenSession session )
+    public LifecycleBindings getProjectCustomBindings( final MavenProject project, final MavenSession session, Set unbindableMojos )
-                                            mojoBinding.setLateBound( true );
+                                            unbindableMojos.add( mojoBinding );
+
+                                            unbindableMojos.add( mojoBinding );
-                                            logger.debug( "Skipping addition to build-plan for goal: "
+                                            logger.warn( "\n\nSkipping addition to build-plan for goal: "
-                                                          + " because no phase information was available (either through the mojo descriptor, which is currently missing, or in the POM itself)." );
+                                                          + " because no phase information was available (either through the mojo descriptor, which is currently missing, or in the POM itself).\n\n" );
+                                            unbindableMojos.add( mojoBinding );
-     * Construct the LifecycleBindings that constitute the mojos mapped to the lifecycles by an overlay specified in a
-     * plugin. Inject mojo configuration from the POM into all appropriate MojoBinding instances.
+     * {@inheritDoc}
-     * Retrieve the list of MojoBinding instances that correspond to the reports configured for the specified project.
-     * Inject all appropriate configuration from the POM for each MojoBinding, using the following precedence rules:
-     * <br/>
-     * <ol>
-     * <li>report-set-level configuration</li>
-     * <li>reporting-level configuration</li>
-     * <li>execution-level configuration</li>
-     * <li>plugin-level configuration</li>
-     * </ol>
+     * {@inheritDoc}
+    /**
+     * {@inheritDoc}
+     */
+    public void resolveUnbindableMojos( final Set unbindableMojos,
+                                        final MavenProject project,
+                                        final MavenSession session,
+                                        final LifecycleBindings lifecycleBindings )
+        throws LifecycleSpecificationException
+    {
+        for ( Iterator it = unbindableMojos.iterator(); it.hasNext(); )
+        {
+            MojoBinding binding = (MojoBinding) it.next();
+            PluginDescriptor pluginDescriptor;
+            try
+            {
+                pluginDescriptor = pluginLoader.loadPlugin( binding, project, session );
+            }
+            catch ( PluginLoaderException e )
+            {
+                String message = "Failed to load plugin descriptor for: "
+                                 + MojoBindingUtils.toString( binding )
+                                 + ". Cannot discover it's default phase, specified in its plugin descriptor.";
+
+                throw new LifecycleSpecificationException( message, e );
+            }
+
+            MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( binding.getGoal() );
+            if ( mojoDescriptor == null )
+            {
+                throw new LifecycleSpecificationException( "Cannot find mojo descriptor for goal: " + binding.getGoal() + " in plugin: " + pluginDescriptor.getPluginLookupKey() );
+            }
+
+            String phase = mojoDescriptor.getPhase();
+            if ( phase == null )
+            {
+                throw new LifecycleSpecificationException(
+                                                           "Mojo descriptor: "
+                                                                           + mojoDescriptor.getFullGoalName()
+                                                                           + " doesn't have a default lifecycle phase. Please specify a <phase/> for this goal in your POM." );
+            }
+
+            LifecycleUtils.addMojoBinding( phase, binding, lifecycleBindings );
+        }
+    }
+
