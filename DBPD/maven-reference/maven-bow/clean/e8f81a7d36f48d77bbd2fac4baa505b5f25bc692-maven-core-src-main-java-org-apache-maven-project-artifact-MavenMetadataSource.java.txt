o Fixed legacy artifact creation by metadata source

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@807836 13f79535-47bb-0310-9956-ffa450edef68

-        String effectiveScope = getEffectiveScope( dependency.getScope(), ( owner != null ) ? owner.getScope() : null );
-
-        if ( effectiveScope == null )
-        {
-            return null;
-        }
-
-        VersionRange versionRange;
-            versionRange = VersionRange.createFromVersionSpec( dependency.getVersion() );
+            String inheritedScope = ( owner != null ) ? owner.getScope() : null;
+
+            ArtifactFilter inheritedFilter = ( owner != null ) ? owner.getDependencyFilter() : null;
+
+            return createDependencyArtifact( repositorySystem, dependency, inheritedScope, inheritedFilter );
+    }
+
+    private static Artifact createDependencyArtifact( ArtifactFactory factory, Dependency dependency, String inheritedScope,
+                                               ArtifactFilter inheritedFilter )
+        throws InvalidVersionSpecificationException
+    {
+        String effectiveScope = getEffectiveScope( dependency.getScope(), inheritedScope );
+
+        if ( effectiveScope == null )
+        {
+            return null;
+        }
+
+        VersionRange versionRange = VersionRange.createFromVersionSpec( dependency.getVersion() );
-            repositorySystem.createDependencyArtifact( dependency.getGroupId(), dependency.getArtifactId(),
-                                                       versionRange, dependency.getType(), dependency.getClassifier(),
-                                                       effectiveScope, dependency.isOptional() );
+            factory.createDependencyArtifact( dependency.getGroupId(), dependency.getArtifactId(), versionRange,
+                                              dependency.getType(), dependency.getClassifier(), effectiveScope,
+                                              dependency.isOptional() );
-        ArtifactFilter dependencyFilter = ( owner != null ) ? owner.getDependencyFilter() : null;
+        ArtifactFilter dependencyFilter = inheritedFilter;
-    private String getEffectiveScope( String originalScope, String inheritedScope )
+    private static String getEffectiveScope( String originalScope, String inheritedScope )
-    private ArtifactFilter createDependencyFilter( Dependency dependency, ArtifactFilter inheritedFilter )
+    private static ArtifactFilter createDependencyFilter( Dependency dependency, ArtifactFilter inheritedFilter )
-        return createArtifacts( artifactFactory, dependencies, dependencyFilter );
-    }
-
-    private static Set<Artifact> createArtifacts( ArtifactFactory factory, List<Dependency> dependencies, ArtifactFilter filter )
-    {
-            Artifact dependencyArtifact = factory.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(), d.getScope(), d.getType() );
+            Artifact dependencyArtifact;
+            try
+            {
+                dependencyArtifact = createDependencyArtifact( artifactFactory, d, inheritedScope, dependencyFilter );
+            }
+            catch ( InvalidVersionSpecificationException e )
+            {
+                throw new InvalidDependencyVersionException( project.getId(), d, project.getFile(), e );
+            }
-            if ( filter.include( dependencyArtifact ) )
+            if ( dependencyArtifact != null )
