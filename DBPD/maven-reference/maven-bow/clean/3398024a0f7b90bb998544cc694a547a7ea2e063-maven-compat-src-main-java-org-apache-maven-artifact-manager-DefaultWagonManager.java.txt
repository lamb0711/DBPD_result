o delegating local repository implementation that chains the reactor and user local repository
o removal of more state from the WagonManager and pushing it into the request in an attempt to bridge the way for Mercury



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773456 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.LinkedHashMap;
-import org.apache.maven.artifact.repository.ArtifactRepositoryFactory;
-import org.apache.maven.wagon.authentication.AuthenticationInfo;
-import org.apache.maven.wagon.proxy.ProxyInfo;
-import org.apache.maven.wagon.proxy.ProxyInfoProvider;
-import org.apache.maven.wagon.repository.RepositoryPermissions;
-    // TODO: proxies, authentication and mirrors are via settings, and should come in via an alternate method - perhaps
-    // attached to ArtifactRepository before the method is called (so AR would be composed of WR, not inherit it)
-    private Map<String, ProxyInfo> proxies = new HashMap<String, ProxyInfo>();
-
-    private static Map<String, AuthenticationInfo> authenticationInfoMap = new HashMap<String, AuthenticationInfo>();
-
-    private Map<String, RepositoryPermissions> serverPermissionsMap = new HashMap<String, RepositoryPermissions>();
-
-    //used LinkedMap to preserve the order.
-    private Map<String, ArtifactRepository> mirrors = new LinkedHashMap<String, ArtifactRepository>();
-
-    private RepositoryPermissions defaultRepositoryPermissions;
-
-    // Components
-
-    @Requirement
-    private ArtifactRepositoryFactory repositoryFactory;
-
-    //@Requirement
-    private CredentialsDataSource credentialsDataSource;
-
-    // TODO: this leaks the component in the public api - it is never released back to the container
-
-        System.out.println( "PROTOCOL: " + protocol );
-            {
-                Repository artifactRepository = new Repository( repository.getId(), repository.getUrl() );
-
-                AuthenticationInfo authenticationInfo = getAuthenticationInfo( repository.getId() );
-
-                wagon.connect( artifactRepository, authenticationInfo, new ProxyInfoProvider()
-                {
-                    public ProxyInfo getProxyInfo( String protocol )
-                    {
-                        return getProxy( protocol );
-                    }
-                } );
+            {                
+                wagon.connect( new Repository( repository.getId(), repository.getUrl() ) );
-            catch ( CredentialsDataSourceException e )
-            {
-                String err = "Problem with server credentials: " + e.getMessage();
-                logger.error( err );
-                throw new TransferFailedException( err );
-            }
+    //TODO: all of this needs to move into the repository system
+    
-        {
-            wagon.connect( new Repository( repository.getId(), repository.getUrl() ), getAuthenticationInfo( repository.getId() ), new ProxyInfoProvider()
-            {
-                public ProxyInfo getProxyInfo( String protocol )
-                {
-                    return getProxy( protocol );
-                }
-            } );
+        {            
+            wagon.connect( new Repository( repository.getId(), repository.getUrl() ) );
-        catch ( CredentialsDataSourceException e )
-        {
-            throw new TransferFailedException( "Retrieving credentials failed: " + e.getMessage(), e );
-        }
-    public ProxyInfo getProxy( String protocol )
-    {
-        return proxies.get( protocol );
-    }
-
-    public AuthenticationInfo getAuthenticationInfo( String id )
-        throws CredentialsDataSourceException
-    {
-        return authenticationInfoMap.get( id );
-    }
-
-
-    /**
-     * Set the proxy used for a particular protocol.
-     * 
-     * @param protocol the protocol (required)
-     * @param host the proxy host name (required)
-     * @param port the proxy port (required)
-     * @param username the username for the proxy, or null if there is none
-     * @param password the password for the proxy, or null if there is none
-     * @param nonProxyHosts the set of hosts not to use the proxy for. Follows Java system property
-     *            format: <code>*.foo.com|localhost</code>.
-     * @todo [BP] would be nice to configure this via plexus in some way
-     */
-    public void addProxy( String protocol, String host, int port, String username, String password, String nonProxyHosts )
-    {
-        ProxyInfo proxyInfo = new ProxyInfo();
-        proxyInfo.setHost( host );
-        proxyInfo.setType( protocol );
-        proxyInfo.setPort( port );
-        proxyInfo.setNonProxyHosts( nonProxyHosts );
-        proxyInfo.setUserName( username );
-        proxyInfo.setPassword( password );
-
-        proxies.put( protocol, proxyInfo );
-    }
-
-    // We are leaving this method here so that we can attempt to use the new maven-artifact
-    // library from the 2.0.x code so that we aren't maintaining two lines of code
-    // for the artifact management.
-    public void addAuthenticationInfo( String repositoryId, String username, String password, String privateKey, String passphrase )
-    {
-        AuthenticationInfo authInfo = new AuthenticationInfo();
-        authInfo.setUserName( username );
-        authInfo.setPassword( password );
-        authInfo.setPrivateKey( privateKey );
-        authInfo.setPassphrase( passphrase );
-
-        authenticationInfoMap.put( repositoryId, authInfo );
-    }
-
-    public void addPermissionInfo( String repositoryId, String filePermissions, String directoryPermissions )
-    {
-        RepositoryPermissions permissions = new RepositoryPermissions();
-
-        boolean addPermissions = false;
-
-        if ( filePermissions != null )
-        {
-            permissions.setFileMode( filePermissions );
-            addPermissions = true;
-        }
-
-        if ( directoryPermissions != null )
-        {
-            permissions.setDirectoryMode( directoryPermissions );
-            addPermissions = true;
-        }
-
-        if ( addPermissions )
-        {
-            serverPermissionsMap.put( repositoryId, permissions );
-        }
-    }
-
+    
