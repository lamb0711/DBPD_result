make the assembly mojo work, and use field type


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163637 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.plugin.PluginExecutionRequest;
-import org.apache.maven.plugin.PluginExecutionResponse;
+import org.apache.maven.plugin.PluginExecutionException;
-import org.codehaus.plexus.archiver.zip.ZipArchiver;
+import org.codehaus.plexus.archiver.zip.ZipArchiver;
- * @parameter name="outputDirectory" type="String" required="true" validator="" expression="#project.build.directory" description=""
- * @parameter name="descriptor" type="String" required="true" validator="" expression="#maven.assemble.descriptor" description=""
+ * @parameter name="outputDirectory" type="java.io.File" required="true" validator="" expression="#project.build.directory" description=""
+ * @parameter name="descriptor" type="java.io.File" required="true" validator="" expression="#maven.assemble.descriptor" description=""
-    public void execute( PluginExecutionRequest request, PluginExecutionResponse response )
+    private File outputDirectory;
+
+    private File descriptor;
+
+    private String finalName;
+
+    public void execute()
+        throws PluginExecutionException
+    {
+        try
+        {
+            doExecute();
+        }
+        catch ( Exception e )
+        {
+            // TODO: don't catch exception
+            throw new PluginExecutionException( "Error creating assembly", e );
+        }
+    }
+
+    private void doExecute()
-        // TODO: align all to basedir
-        String outputDirectory = (String) request.getParameter( "outputDirectory" );
-        String descriptor = (String) request.getParameter( "descriptor" );
-        String finalName = (String) request.getParameter( "finalName" );
-
-        Assembly assembly = reader.read( new FileReader( new File( descriptor ) ) );
+        Assembly assembly = reader.read( new FileReader( descriptor ) );
-                    tarCompressionMethod.setValue( format.substring( index + 1 ) );
+                    // TODO: this should accept gz and bz2 as well so we can skip over the switch
+                    String compression = format.substring( index + 1 );
+                    if ( compression.equals( "gz" ) )
+                    {
+                        tarCompressionMethod.setValue( "gzip" );
+                    }
+                    else if ( compression.equals( "bz2" ) )
+                    {
+                        tarCompressionMethod.setValue( "bzip2" );
+                    }
+                    else
+                    {
+                        // TODO: better handling
+                        throw new IllegalArgumentException( "Unknown compression format: " + compression );
+                    }
+                if ( !output.endsWith( "/" ) && !output.endsWith( "\\" ) )
+                {
+                    // TODO: shouldn't archiver do this?
+                    output += '/';
+                }
+                if ( includes.length == 0 )
+                {
+                    includes = null;
+                }
