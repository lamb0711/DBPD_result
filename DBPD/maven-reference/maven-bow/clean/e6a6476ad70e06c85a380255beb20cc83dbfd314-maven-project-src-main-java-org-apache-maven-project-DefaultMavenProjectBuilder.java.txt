o cleaning up the project builder, deprecating maven 1.x repository support, it will be 3 years by the time this is actually released
  so tough noogies for people still trying to use Maven 1.x repositories with Maven 2.x.

  The next series of refactoring I will be doing with GIT.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@580609 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.manager.WagonManager;
+import org.apache.maven.profiles.build.ProfileAdvisor;
-import org.apache.maven.profiles.build.ProfileAdvisor;
-import org.apache.maven.wagon.events.TransferListener;
-    implements MavenProjectBuilder, Initializable, Contextualizable
+    implements MavenProjectBuilder,
+    Initializable,
+    Contextualizable
-    // ----------------------------------------------------------------------
-    // I am making this available for use with a new method that takes a
-    // a monitor wagon monitor as a parameter so that tools can use the
-    // methods here and receive callbacks. MNG-1015
-    //
-    //    Probably no longer relevant with wagonManager/wagonManager change - joakime
-    // ----------------------------------------------------------------------
-
-    private WagonManager wagonManager;
-
-        return buildFromSourceFileInternal( projectDescriptor, localRepository, profileManager, true );
+        return buildFromSourceFileInternal( projectDescriptor, localRepository, profileManager );
-    public MavenProject build( File projectDescriptor,
-                               ArtifactRepository localRepository,
-                               ProfileManager profileManager,
-                               boolean checkDistributionManagementStatus )
-        throws ProjectBuildingException
-    {
-        return buildFromSourceFileInternal( projectDescriptor, localRepository, profileManager, checkDistributionManagementStatus );
-    }
-
-    // jvz:note
-    // When asked for something from the repository are we getting it from the reactor? Yes, when using this call
-    // we are assuming that the reactor has been run and we have collected the projects required to satisfy it0042
-    // which means the projects in the reactor are required for finding classes in <project>/target/classes. Not
-    // sure this is ideal. I remove all caching from the builder and all reactor related ITs which assume
-    // access to simbling project resources failed.
+    /** @deprecated  */
-                                             boolean allowStubModel )
+                                             boolean allowStub )
+        throws ProjectBuildingException
+
+    {
+        return buildFromRepository( artifact, remoteArtifactRepositories, localRepository );
+    }
+
+
+    public MavenProject buildFromRepository( Artifact artifact,
+                                             List remoteArtifactRepositories,
+                                             ArtifactRepository localRepository )
-        Model model = findModelFromRepository( artifact, remoteArtifactRepositories, localRepository, allowStubModel );
+        Model model = findModelFromRepository( artifact, remoteArtifactRepositories, localRepository );
-    public MavenProject buildFromRepository( Artifact artifact,
-                                             List remoteArtifactRepositories,
-                                             ArtifactRepository localRepository )
-        throws ProjectBuildingException
-    {
-        return buildFromRepository( artifact, remoteArtifactRepositories, localRepository, true );
-    }
-
-        return buildWithDependencies( projectDescriptor, localRepository, profileManager, null );
-    }
-
-    // note:jvz This was added for the embedder.
-
-    /** @todo move to metadatasource itself? */
-    public MavenProjectBuildingResult buildWithDependencies( File projectDescriptor,
-                                                             ArtifactRepository localRepository,
-                                                             ProfileManager profileManager,
-                                                             TransferListener transferListener )
-        throws ProjectBuildingException
-    {
-        MavenProject project = build( projectDescriptor, localRepository, profileManager, false );
+        MavenProject project = build( projectDescriptor, localRepository, profileManager );
-        if ( transferListener != null )
-        {
-            wagonManager.setDownloadMonitor( transferListener );
-        }
-
-                                         DependencyManagement dependencyManagement,
-                                         MavenProject parent )
+                                         DependencyManagement dependencyManagement )
-                    Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),
-                        versionRange, d.getType(),
-                        d.getClassifier(), d.getScope(),
-                        d.isOptional() );
+
+                    Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),
+                        d.getClassifier(), d.getScope(), d.isOptional() );
+
+
-                        Iterator exclItr = d.getExclusions().iterator();
-                        while ( exclItr.hasNext() )
+
+                        for ( Iterator j = d.getExclusions().iterator(); j.hasNext(); )
-                            Exclusion e = (Exclusion) exclItr.next();
+                            Exclusion e = (Exclusion) j.next();
+
+
+
+
-                                                      ProfileManager profileManager,
-                                                      boolean checkDistributionManagementStatus )
+                                                      ProfileManager profileManager )
+        /*
+        */
-        /*
-
-        MNG-3178: What is this actually for as we're not deploying this anymore.
-
-        if ( checkDistributionManagementStatus )
-        {
-            if ( ( project.getDistributionManagement() != null ) && ( project.getDistributionManagement().getStatus() != null ) )
-            {
-                String projectId = safeVersionlessKey( project.getGroupId(), project.getArtifactId() );
-
-                throw new ProjectBuildingException( projectId,
-                    "Invalid project file: distribution status must not be specified for a project outside of the repository" );
-            }
-        }
-        */
-
-                                           ArtifactRepository localRepository,
-                                           boolean allowStubModel )
+                                           ArtifactRepository localRepository )
-            if ( allowStubModel )
-            {
-                getLogger().debug( "Artifact not found - using stub model: " + e.getMessage() );
-
-                model = createStubModel( projectArtifact );
-            }
-            else
-            {
-                throw new ProjectBuildingException( projectId, "POM '" + projectId + "' not found in repository: " + e.getMessage(), e );
-            }
+            throw new ProjectBuildingException( projectId, "POM '" + projectId + "' not found in repository: " + e.getMessage(), e );
-    // This is used when requested artifacts do not have an associated POM. This is for the case where we are
-    // using an m1 repo where the only thing required to be present are the JAR files.
-    private Model createStubModel( Artifact projectArtifact )
-    {
-        getLogger().debug( "Using defaults for missing POM " + projectArtifact );
-
-        Model model = new Model();
-
-        model.setModelVersion( "4.0.0" );
-
-        model.setArtifactId( projectArtifact.getArtifactId() );
-
-        model.setGroupId( projectArtifact.getGroupId() );
-
-        model.setVersion( projectArtifact.getVersion() );
-
-        // TODO: not correct in some instances
-        model.setPackaging( projectArtifact.getType() );
-
-        model.setDistributionManagement( new DistributionManagement() );
-
-        model.getDistributionManagement().setStatus( ArtifactStatus.GENERATED.toString() );
-
-        return model;
-    }
-
-    // jvz:note
+
+
+
-        MavenProject project = null;
+        MavenProject project;
+
-            project = assembleLineage( model,
-                lineage,
-                localRepository,
-                projectDir,
-                parentSearchRepositories,
-                aggregatedRemoteWagonRepositories,
-                externalProfileManager,
-                strict );
+            project = assembleLineage( model, lineage, localRepository, projectDir, aggregatedRemoteWagonRepositories, externalProfileManager, strict );
-                getLogger().debug( "Cannot determine whether " + currentProject.getId() + " is a module of " + previousProject.getId() + ". Reason: " + e.getMessage(), e );
+                getLogger().debug(
+                    "Cannot determine whether " + currentProject.getId() + " is a module of " + previousProject.getId() + ". Reason: " + e.getMessage(),
+                    e );
-            project = processProjectLogic( pomLocation, project, externalProfileManager, projectDir, strict );
+            project = processProjectLogic( pomLocation, project, projectDir, strict );
+
+
-        // jvz:note
-        // this only happens if we are building from a source file
-            // Only translate the base directory for files in the source tree
-        project.setManagedVersionMap( createManagedVersionMap( projectId, project.getDependencyManagement(),
-            project.getParent() ) );
+        project.setManagedVersionMap( createManagedVersionMap( projectId, project.getDependencyManagement() ) );
-        Set reposFromProfiles = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model, projectDir,
-            explicitlyActive,
-            explicitlyInactive );
+        Set reposFromProfiles = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model, projectDir, explicitlyActive, explicitlyInactive );
+
-                                              ProfileManager profileMgr,
-                                          List parentSearchRepositories,
+
-        // strict means "no stubs", so we invert it here for the allowStubs parameter.
+
+
+
