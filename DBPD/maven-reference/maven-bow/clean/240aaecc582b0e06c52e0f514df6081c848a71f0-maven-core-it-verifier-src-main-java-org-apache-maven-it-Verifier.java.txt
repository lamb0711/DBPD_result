o pull in the ~/build.properties
o allow absolute paths in the expected results specifications


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@162783 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.Properties;
+    private String mavenRepoLocal;
+
+        Properties mavenProperties = new Properties();
+
+        try
+        {
+            mavenProperties.load( new FileInputStream( new File( System.getProperty( "user.home" ), "build.properties" ) ) );
+        }
+        catch ( IOException e )
+        {
+            throw new VerificationException( "Can't find the build.properties file! Verification can't proceed!" );
+        }
+
+        mavenRepoLocal = mavenProperties.getProperty( "maven.repo.local" );
+
-        System.out.println( "\n" );
-        
-        System.out.println( "-------------------------------------" );
-        
-        System.out.println( "Integration test OK" );
-        
-        System.out.println( "-------------------------------------" );
+        System.out.println( "---------------------------> OK" );        
+        line = replace( line, "${maven.repo.local}", mavenRepoLocal );
+
-            File expectedFile = new File( basedir, line );
+            File expectedFile;
+
+            if ( line.startsWith( "/" ) )
+            {
+                expectedFile = new File( line );
+            }
+            else
+            {
+                expectedFile = new File( basedir, line );
+            }
+    public static String replaceOnce( String text, String repl, String with )
+    {
+        return replace( text, repl, with, 1 );
+    }
+
+    public static String replace( String text, String repl, String with )
+    {
+        return replace( text, repl, with, -1 );
+    }
+
+    public static String replace( String text, String repl, String with, int max )
+    {
+        if ( text == null || repl == null || with == null || repl.length() == 0 )
+        {
+            return text;
+        }
+
+        StringBuffer buf = new StringBuffer( text.length() );
+        int start = 0, end = 0;
+        while ( ( end = text.indexOf( repl, start ) ) != -1 )
+        {
+            buf.append( text.substring( start, end ) ).append( with );
+            start = end + repl.length();
+
+            if ( --max == 0 )
+            {
+                break;
+            }
+        }
+        buf.append( text.substring( start ) );
+        return buf.toString();
+    }
+
+
+    // ----------------------------------------------------------------------
+    //
+    // ----------------------------------------------------------------------
+
