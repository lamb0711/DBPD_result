Upgrade HttpUtils from maven1


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@162837 13f79535-47bb-0310-9956-ffa450edef68

+/* ====================================================================
+ *   Copyright 2001-2004 The Apache Software Foundation.
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ * ====================================================================
+ */
+
+import java.io.FileNotFoundException;
+/**
+ * Http utils for retrieving files.
+ *
+ * @author costin@dnt.ro
+ * @author gg@grtmail.com (Added Java 1.1 style HTTP basic auth)
+ * @author <a href="mailto:jason@zenplex.com">Jason van Zyl</a>
+ *
+ * @todo Need to add a timeout so we can flip to a backup repository.
+ * @todo Download everything in a single session.
+ * @todo Throw meaningful exception when authentication fails.
+ */
+    /**
+     * Use a proxy to bypass the firewall with or without authentication
+     *
+     * @param proxyHost Proxy Host (if proxy is required), or null
+     * @param proxyPort Proxy Port (if proxy is required), or null
+     * @param proxyUserName Proxy Username (if authentification is required),
+     *        or null
+     * @param proxyPassword Proxy Password (if authentification is required),
+     *        or null
+     * @throws SecurityException if an operation is not authorized by the
+     * SecurityManager
+     */
+    /**
+     * Retrieve a remote file.  Throws an Exception on errors unless the 
+     * ifnoreErrors flag is set to True
+     *
+     * @param url the of the file to retrieve
+     * @param destinationFile where to store it
+     * @param ignoreErrors whether to ignore errors during I/O or throw an
+     *      exception when they happen
+     * @param useTimestamp whether to check the modified timestamp on the
+     *      <code>destinationFile</code> against the remote <code>source</code>
+     * @param proxyHost Proxy Host (if proxy is required), or null
+     * @param proxyPort Proxy Port (if proxy is required), or null
+     * @param proxyUserName Proxy Username (if authentification is required),
+     *        or null.
+     * @param proxyPassword Proxy Password (if authentification is required),
+     *        or null.
+     * @param useChecksum Flag to indicate the use of the checksum for the retrieved
+     *        artifact if it is available.
+     * @throws IOException If an I/O exception occurs.
+     */
-        throws Exception
+        throws IOException
+    /**
+     * Retrieve a remote file.  Throws an Exception on errors unless the 
+     * ifnoreErrors flag is set to True
+     *
+     * @param url the of the file to retrieve
+     * @param destinationFile where to store it
+     * @param ignoreErrors whether to ignore errors during I/O or throw an
+     *      exception when they happen
+     * @param useTimestamp whether to check the modified timestamp on the
+     *      <code>destinationFile</code> against the remote <code>source</code>
+     * @param proxyHost Proxy Host (if proxy is required), or null
+     * @param proxyPort Proxy Port (if proxy is required), or null
+     * @param proxyUserName Proxy Username (if authentification is required),
+     *        or null
+     * @param proxyPassword Proxy Password (if authentification is required),
+     *        or null
+     * @throws IOException If an I/O exception occurs.
+     */
-        throws Exception
+        throws IOException
+    {
+        //set the timestamp to the file date.
+        long timestamp = -1;
+        if ( useTimestamp && destinationFile.exists() )
+        {
+            timestamp = destinationFile.lastModified();
+        }
+
+        try
+        {
+            getFile( url,
+                     destinationFile,
+                     timestamp,
+                     proxyHost,
+                     proxyPort,
+                     proxyUserName,
+                     proxyPassword );
+        }
+        catch ( IOException ex )
+        {
+            if ( !ignoreErrors )
+            {
+                throw ex;
+            }
+        }
+    }
+
+    /**
+     * Retrieve a remote file.
+     *
+     * @param url the URL of the file to retrieve
+     * @param destinationFile where to store it
+     * @param timestamp if provided, the remote URL is only retrieved if it was
+     * modified more recently than timestamp. Otherwise, negative value indicates that
+     * the remote URL should be retrieved unconditionally.
+     * @param proxyHost Proxy Host (if proxy is required), or null
+     * @param proxyPort Proxy Port (if proxy is required), or null
+     * @param proxyUserName Proxy Username (if authentification is required),
+     *        or null
+     * @param proxyPassword Proxy Password (if authentification is required),
+     *        or null
+     * @throws IOException If an I/O exception occurs.
+     */
+    public static void getFile( String url,
+                                File destinationFile,
+                                long timestamp,
+                                String proxyHost,
+                                String proxyPort,
+                                String proxyUserName,
+                                String proxyPassword )
+      throws IOException
-        //set the timestamp to the file date.
-        long timestamp = 0;
-        boolean hasTimestamp = false;
-        if ( useTimestamp && destinationFile.exists() )
-        {
-            timestamp = destinationFile.lastModified();
-            hasTimestamp = true;
-        }
-
+
-        //NB: things like user authentication could go in here too.
-        if ( useTimestamp && hasTimestamp )
+        if ( timestamp >= 0 )
-            String encoding = null;
-            // check to see if sun's Base64 encoder is available.
-            try
-            {
-                sun.misc.BASE64Encoder encoder =
-                    (sun.misc.BASE64Encoder) Class.forName(
-                        "sun.misc.BASE64Encoder" ).newInstance();
-
-                encoding = encoder.encode( up.getBytes() );
-            }
-            catch ( Exception ex )
-            {
-                // Do nothing, as for MavenSession we will never use
-                // auth and we will eventually move over httpclient
-                // in the commons.
-            }
+            String encoding = Base64.encode(up.getBytes(), false);
+            // although HTTPUrlConnection javadocs says FileNotFoundException should be
+            // thrown on a 404 error, that certainly does not appear to be the case, so
+            // test for 404 ourselves, and throw FileNotFoundException as needed
+            if ( httpConnection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND)
+            {
+                throw new FileNotFoundException(url.toString() + " (HTTP Error: "
+                        + httpConnection.getResponseCode() + " " + httpConnection.getResponseMessage() + ")");
+            }
-                throw new Exception( "Not authorized." );
+                throw new IOException( "Not authorized." );
+            }
+            // test for 407 result (HTTP only)
+            if ( httpConnection.getResponseCode() == HttpURLConnection.HTTP_PROXY_AUTH )
+            {
+                throw new IOException( "Not authorized by proxy." );
+        IOException isException = null;
-                // do nothing
+              isException = ex;
-            if ( ignoreErrors )
-            {
-                return;
-            }
-
-            // This will never happen with maven's use of this class.
-            throw new Exception( "Can't get " + destinationFile.getName() + " to " + destinationFile );
+            throw isException;
+        if ( connection.getLastModified() <= timestamp &&
+             connection.getLastModified() != 0 )
+        {
+            return;
+        }
+        
-        if ( useTimestamp )
+        if ( timestamp >= 0 )
-
+    /**
+     * Parse an url which might contain a username and password. If the
+     * given url doesn't contain a username and password then return the
+     * origin url unchanged.
+     *
+     * @param url The url to parse.
+     * @return The username, password and url.
+     * @throws RuntimeException if the url is (very) invalid
+     */
-            String s = url.substring( 7, i );
+            String protocol = url.substring( 0, url.indexOf("://") ) + "://";
+            String s = url.substring( protocol.length(), i );
-            parsedUrl[2] = "http://" + url.substring( i + 1 );
+            parsedUrl[2] = protocol + url.substring( i + 1 );
+    /**
+     * set the timestamp of a named file to a specified time.
+     *
+     * @param file the file to touch
+     * @param timemillis in milliseconds since the start of the era
+     * @return true if it succeeded. False means that this is a java1.1 system
+     *      and that file times can not be set
+     * @throws RuntimeException Thrown in unrecoverable error. Likely this
+     *      comes from file access failures.
+     */
-        throws Exception
-
