[MNG-5760] Add `-r/--resume` to automatically resume from the last failure point

Author: Martin Kanters <mkanters93@gmail.com>

+import org.apache.maven.execution.BuildResumptionDataRepository;
+    private BuildResumptionDataRepository buildResumptionDataRepository;
+
+        buildResumptionDataRepository = container.lookup( BuildResumptionDataRepository.class );
+
-                    project = ( (LifecycleExecutionException) exception ).getProject();
+                    LifecycleExecutionException lifecycleExecutionException = (LifecycleExecutionException) exception;
+                    project = lifecycleExecutionException.getProject();
-            if ( project != null && !project.equals( result.getTopologicallySortedProjects().get( 0 ) ) )
+            List<MavenProject> sortedProjects = result.getTopologicallySortedProjects();
+            if ( result.canResume() )
-                slf4jLogger.error( "" );
-                slf4jLogger.error( "After correcting the problems, you can resume the build with the command" );
-                slf4jLogger.error( buffer().a( "  " ).strong( "mvn <args> -rf "
-                    + getResumeFrom( result.getTopologicallySortedProjects(), project ) ).toString() );
+                logBuildResumeHint( "mvn <args> -r " );
+            }
+            else if ( project != null && !project.equals( sortedProjects.get( 0 ) ) )
+            {
+                String resumeFromSelector = getResumeFromSelector( sortedProjects, project );
+                logBuildResumeHint( "mvn <args> -rf " + resumeFromSelector );
+    private void logBuildResumeHint( String resumeBuildHint )
+    {
+        slf4jLogger.error( "" );
+        slf4jLogger.error( "After correcting the problems, you can resume the build with the command" );
+        slf4jLogger.error( buffer().a( "  " ).strong( resumeBuildHint ).toString() );
+    }
+
-     * A helper method to determine the value to resume the build with {@code -rf} taking into account the
-     * edge case where multiple modules in the reactor have the same artifactId.
+     * A helper method to determine the value to resume the build with {@code -rf} taking into account the edge case
+     *   where multiple modules in the reactor have the same artifactId.
-     * {@code -rf :artifactId} will pick up the first module which matches, but when multiple modules in the
-     * reactor have the same artifactId, effective failed module might be later in build reactor.
-     * This means that developer will either have to type groupId or wait for build execution of all modules
-     * which were fine, but they are still before one which reported errors.
+     * {@code -rf :artifactId} will pick up the first module which matches, but when multiple modules in the reactor
+     *   have the same artifactId, effective failed module might be later in build reactor.
+     * This means that developer will either have to type groupId or wait for build execution of all modules which
+     *   were fine, but they are still before one which reported errors.
+     * This method is made package-private for testing purposes.
-     * @return Value for -rf flag to resume build exactly from place where it failed ({@code :artifactId} in
-     *    general and {@code groupId:artifactId} when there is a name clash).
+     * @return Value for -rf flag to resume build exactly from place where it failed ({@code :artifactId} in general
+     * and {@code groupId:artifactId} when there is a name clash).
-    private String getResumeFrom( List<MavenProject> mavenProjects, MavenProject failedProject )
+    String getResumeFromSelector( List<MavenProject> mavenProjects, MavenProject failedProject )
-        for ( MavenProject buildProject : mavenProjects )
+        boolean hasOverlappingArtifactId = mavenProjects.stream()
+                .filter( project -> failedProject.getArtifactId().equals( project.getArtifactId() ) )
+                .count() > 1;
+
+        if ( hasOverlappingArtifactId )
-            if ( failedProject.getArtifactId().equals( buildProject.getArtifactId() ) && !failedProject.equals(
-                    buildProject ) )
-            {
-                return failedProject.getGroupId() + ":" + failedProject.getArtifactId();
-            }
+            return failedProject.getGroupId() + ":" + failedProject.getArtifactId();
+
+        if ( commandLine.hasOption( CLIManager.RESUME ) )
+        {
+            request.setResume();
+        }
+
