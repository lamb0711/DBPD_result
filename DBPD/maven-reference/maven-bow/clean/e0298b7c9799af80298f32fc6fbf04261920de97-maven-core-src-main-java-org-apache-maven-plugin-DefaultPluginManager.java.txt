o first pass at setting up error handling for each possible error condition
 - this resulted in cleaning up some exceptions in plexus so that they might message could be surfaced in Maven
o move the plugin prefix searching to the lifecycle executor and get it out of the plugin manager
o add capability to the RepositorySystem to get plain resources from a repository. I'm going simple with the repository group
  metadata and I will just get the file directly as the only implementation is the plugin group metadata. the system is 
  not easily or generally extensible so i'll just take what I need



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@776412 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.component.composition.CycleDetectedInComponentGraphException;
-import org.codehaus.plexus.component.repository.exception.ComponentRepositoryException;
-    // This should be template method code for allowing subclasses to assist in contributing search/hint information
-    public Plugin findPluginForPrefix( String prefix, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+    private String pluginKey( Plugin plugin )
-        //Use the plugin managers capabilities to get information to augement the request
-
-        return null;
-        //return getByPrefix( prefix, session.getPluginGroups(), project.getRemoteArtifactRepositories(), session.getLocalRepository() );
+        return plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + plugin.getVersion();
+    /**
+     * 
+     * @param plugin
+     * @param localRepository
+     * @param remoteRepositories
+     * @return PluginDescriptor The component descriptor for the Maven plugin.
+     * @throws PluginNotFoundException The plugin could not be found in any repositories.
+     * @throws PluginResolutionException The plugin could be found but could not be resolved.
+     * @throws PlexusConfigurationException A discovered component descriptor cannot be read, or or can't be parsed correctly. Shouldn't 
+     *                                      happen but if someone has made a descriptor by hand it's possible.
+     * @throws CycleDetectedInComponentGraphException A cycle has been detected in the component graph for a plugin that has been dynamically loaded.
+     */
-        throws PluginLoaderException
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException
-        }
-
-        try
-        {
-            return addPlugin( plugin, localRepository, remoteRepositories );
-        }
-        catch ( ArtifactResolutionException e )
-        // PluginResolutionException - a problem that occurs resolving the plugin artifact or its deps
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( ArtifactNotFoundException e )
-        // PluginNotFoundException - the plugin itself cannot be found in any repositories
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( PluginContainerException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( PluginVersionNotFoundException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-    }
-
-    private String pluginKey( Plugin plugin )
-    {
-        return plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + plugin.getVersion();
-    }
-
-    protected PluginDescriptor addPlugin( Plugin plugin, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginContainerException, PluginVersionNotFoundException
-    {
+        }        
+        
-        resolutionErrorHandler.throwErrors( request, result );
+        try
+        {
+            resolutionErrorHandler.throwErrors( request, result );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new PluginResolutionException( plugin, e );            
+        }
+        
-        Set<Artifact> pluginArtifacts = getPluginArtifacts( pluginArtifact, plugin, localRepository, remoteRepositories );
+        Set<Artifact> pluginArtifacts;
+        
+        try
+        {
+            pluginArtifacts = getPluginArtifacts( pluginArtifact, plugin, localRepository, remoteRepositories );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            throw new PluginNotFoundException( plugin, e );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new PluginResolutionException( plugin, e );
+        }
-                
+                 
-            throw new PluginContainerException( plugin, pluginRealm, "Error scanning plugin realm for components.", e );
+            throw new PluginDescriptorParsingException( plugin, e );
-        catch ( ComponentRepositoryException e )
+        catch ( CycleDetectedInComponentGraphException e )
-            throw new PluginContainerException( plugin, pluginRealm, "Error scanning plugin realm for components.", e );
+            throw new CycleDetectedInPluginGraphException( plugin, e );
-        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin );
+        pluginDescriptor = getPluginDescriptor( plugin );
-    public MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, ArtifactRepository localRepository,
-                                             List<ArtifactRepository> remoteRepositories )
-        throws PluginLoaderException
+    public MojoDescriptor getMojoDescriptor( String groupId, String artifactId, String version, String goal, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException
+    {
+        Plugin plugin = new Plugin();
+        plugin.setGroupId( groupId );        
+        plugin.setArtifactId( artifactId );
+        plugin.setVersion( version );
+        
+        return getMojoDescriptor( plugin, goal, localRepository, remoteRepositories );
+    }
+        
+    public MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException
-            throw new PluginLoaderException( plugin, "Failed to load plugin mojo. Reason: Unknown mojo: " + goal );
+            throw new MojoNotFoundException( goal, pluginDescriptor );
