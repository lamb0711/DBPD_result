o Added user.xml as the central point of config for local repository, both in MBoot2 and maven proper.
o Added proxy-profile support to user.xml


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163510 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.user.MavenProfile;
-    public static int main( String[] args, ClassWorld classWorld )
-        throws Exception
+    public static int main( String[] args, ClassWorld classWorld ) throws Exception
-        File userConfigurationDirectory = getUserConfigurationDirectory();
+        //        File userConfigurationDirectory = getUserConfigurationDirectory();
-        Properties mavenProperties = getMavenProperties( userConfigurationDirectory );
+        //        Properties mavenProperties = getMavenProperties( userConfigurationDirectory );
-        ArtifactRepository localRepository = getLocalRepository( mavenProperties, userConfigurationDirectory );
+        ArtifactRepository localRepository = getLocalRepository();
-        
+
-        
+
-        
+
-                request = new MavenReactorExecutionRequest( localRepository,
-                                                            userModel,
-                                                            eventDispatcher,
-                                                            mavenProperties,
-                                                            commandLine.getArgList(),
-                                                            includes,
-                                                            excludes,
-                                                            userDir );
+                request = new MavenReactorExecutionRequest( localRepository, userModel, eventDispatcher,
+                                                            commandLine.getArgList(), includes, excludes, userDir );
-                request = new MavenProjectExecutionRequest( localRepository,
-                                                            userModel,
-                                                            eventDispatcher,
-                                                            mavenProperties,
-                                                            commandLine.getArgList(),
-                                                            projectFile );
+                request = new MavenProjectExecutionRequest( localRepository, userModel, eventDispatcher,
+                                                            commandLine.getArgList(), projectFile );
-            request = new MavenInitializingExecutionRequest( localRepository, userModel, eventDispatcher, mavenProperties, commandLine.getArgList() );
+            request = new MavenInitializingExecutionRequest( localRepository, userModel, eventDispatcher,
+                                                             commandLine.getArgList() );
-            
+
-        
+
-            options.addOption( OptionBuilder
-                               .withLongOpt( "nobanner" )
-                               .withDescription( "Suppress logo banner" )
-                               .create( NO_BANNER ) );
-            options.addOption( OptionBuilder
-                               .withLongOpt( "define" )
-                               .hasArg()
-                               .withDescription( "Define a system property" )
-                               .create( SET_SYSTEM_PROPERTY ) );
-            options.addOption( OptionBuilder
-                               .withLongOpt( "offline" )
-                               .hasArg()
-                               .withDescription( "Work offline" )
-                               .create( WORK_OFFLINE ) );
-            options.addOption( OptionBuilder
-                               .withLongOpt( "mojoDescriptors" )
-                               .withDescription( "Display available mojoDescriptors" )
-                               .create( LIST_GOALS ) );
-            options.addOption( OptionBuilder
-                               .withLongOpt( "help" )
-                               .withDescription( "Display help information" )
-                               .create( HELP ) );
-            options.addOption( OptionBuilder
-                               .withLongOpt( "offline" )
-                               .withDescription( "Build is happening offline" )
-                               .create( WORK_OFFLINE ) );
-            options.addOption( OptionBuilder
-                               .withLongOpt( "version" )
-                               .withDescription( "Display version information" )
-                               .create( VERSION ) );
-            options.addOption( OptionBuilder
-                               .withLongOpt( "debug" )
-                               .withDescription( "Produce execution debug output" )
-                               .create( DEBUG ) );
-            options.addOption( OptionBuilder
-                               .withLongOpt( "reactor" )
-                               .withDescription( "Execute goals for project found in the reactor" )
-                               .create( REACTOR ) );
+            options.addOption( OptionBuilder.withLongOpt( "nobanner" ).withDescription( "Suppress logo banner" )
+                                            .create( NO_BANNER ) );
+            options
+                   .addOption( OptionBuilder.withLongOpt( "define" ).hasArg()
+                                            .withDescription( "Define a system property" ).create( SET_SYSTEM_PROPERTY ) );
+            options.addOption( OptionBuilder.withLongOpt( "offline" ).hasArg().withDescription( "Work offline" )
+                                            .create( WORK_OFFLINE ) );
+            options
+                   .addOption( OptionBuilder.withLongOpt( "mojoDescriptors" )
+                                            .withDescription( "Display available mojoDescriptors" ).create( LIST_GOALS ) );
+            options.addOption( OptionBuilder.withLongOpt( "help" ).withDescription( "Display help information" )
+                                            .create( HELP ) );
+            options.addOption( OptionBuilder.withLongOpt( "offline" ).withDescription( "Build is happening offline" )
+                                            .create( WORK_OFFLINE ) );
+            options.addOption( OptionBuilder.withLongOpt( "version" ).withDescription( "Display version information" )
+                                            .create( VERSION ) );
+            options.addOption( OptionBuilder.withLongOpt( "debug" ).withDescription( "Produce execution debug output" )
+                                            .create( DEBUG ) );
+            options.addOption( OptionBuilder.withLongOpt( "reactor" )
+                                            .withDescription( "Execute goals for project found in the reactor" )
+                                            .create( REACTOR ) );
-        public CommandLine parse( String[] args )
-            throws ParseException
+        public CommandLine parse( String[] args ) throws ParseException
-    protected static ArtifactRepository getLocalRepository( Properties mavenProperties,
-                                                            File userConfigurationDirectory )
+    protected static ArtifactRepository getLocalRepository() throws Exception
-        String localRepository = mavenProperties.getProperty( MavenConstants.MAVEN_REPO_LOCAL );
+        UserModel userModel = UserModelUtils.getUserModel();
+        MavenProfile mavenProfile = UserModelUtils.getActiveMavenProfile( userModel );
+
+        String localRepository = null;
+        if ( mavenProfile != null )
+        {
+            localRepository = mavenProfile.getLocalRepository();
+        }
+
+            String userConfigurationDirectory = System.getProperty( "user.home" );
-}
+}
