[MNG-5760] Several fixes for the --resume feature.

BuildResumptionDataRepository is not used in MavenCli

Make setResume() on MavenExecutionRequest a traditional setter

Fix resolution of resume.properties file

Add unit test for DefaultBuildResumptionDataRepository#applyResumptionData

Avoid storing and using an empty excludedProjects field in the resume.properties file.

Avoid star imports

Don't create a unneeded Path when resolving resume.properties

Support the scenario where the first project was failed, but subsequent projects succeeded. (e.g. by fail-at-end or parallel builds)

Maven invocations without project shouldn't fail

+import org.codehaus.plexus.util.StringUtils;
+        final String resumeFromSelector;
+        final List<String> projectsToSkip;
-            LOGGER.info( "The first module in the build failed, resuming the build would not make sense." );
-            return Optional.empty();
+            // As the first module in the build failed, there is no need to specify this as the resumeFrom project.
+            resumeFromSelector = null;
+            projectsToSkip = determineProjectsToSkip( result, failedProjects, 0 );
+        }
+        else
+        {
+            resumeFromSelector = resumeFromProject.getGroupId() + ":" + resumeFromProject.getArtifactId();
+            List<MavenProject> allProjects = result.getTopologicallySortedProjects();
+            int resumeFromProjectIndex = allProjects.indexOf( resumeFromProject );
+            projectsToSkip = determineProjectsToSkip( result, failedProjects, resumeFromProjectIndex + 1 );
-        final String resumeFromSelector = resumeFromProject.getGroupId() + ":" + resumeFromProject.getArtifactId();
-        final List<String> projectsToSkip = determineProjectsToSkip( result, failedProjects, resumeFromProject );
-
-        return Optional.of( new BuildResumptionData( resumeFromSelector, projectsToSkip ) );
+        boolean canBuildBeResumed = StringUtils.isNotEmpty( resumeFromSelector ) || !projectsToSkip.isEmpty();
+        if ( canBuildBeResumed )
+        {
+            return Optional.of( new BuildResumptionData( resumeFromSelector, projectsToSkip ) );
+        }
+        else
+        {
+            return Optional.empty();
+        }
+                .filter( Objects::nonNull )
-     * @param resumeFromProject The project where the build will be resumed with in the next run.
+     * @param startFromProjectIndex Start looking for projects which can be skipped from a certain index.
-                                                  MavenProject resumeFromProject )
+                                                  int startFromProjectIndex )
-        int resumeFromProjectIndex = allProjects.indexOf( resumeFromProject );
-        List<MavenProject> remainingProjects = allProjects.subList( resumeFromProjectIndex + 1, allProjects.size() );
+        List<MavenProject> remainingProjects = allProjects.subList( startFromProjectIndex, allProjects.size() );
