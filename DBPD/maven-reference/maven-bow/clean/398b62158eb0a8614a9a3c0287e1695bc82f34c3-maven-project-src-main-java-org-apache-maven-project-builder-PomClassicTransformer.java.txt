Merge of branch: sisbell-maven-2.1-profile.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@685443 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.shared.model.DomainModel;
-import org.apache.maven.shared.model.ModelContainer;
-import org.apache.maven.shared.model.ModelDataSource;
-import org.apache.maven.shared.model.ModelMarshaller;
-import org.apache.maven.shared.model.ModelProperty;
-import org.apache.maven.shared.model.ModelTransformer;
+import org.apache.maven.shared.model.*;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.Map;
-import java.util.HashMap;
+import java.util.*;
-    private final Set<String> uris;
-
-    private static Map<String, List<ModelProperty>> cache = new HashMap<String, List<ModelProperty>>();
-
-    //private static List<DomainModel> cache = new ArrayList<DomainModel>();
-
-    /**
-     * Default constructor
-     */
-    public PomClassicTransformer()
-    {
-        this.uris = new HashSet<String>( Arrays.asList( ProjectUri.Build.Extensions.xUri,
+    private static Set<String> uris = new HashSet<String>( Arrays.asList( ProjectUri.Build.Extensions.xUri,
-                                                        "http://apache.org/maven/project/profiles/profile/build/plugins/plugin/executions#collection" ) );
+                                                        "http://apache.org/maven/project/profiles/profile/build/plugins/plugin/executions#collection" ));
+
+    private static Map<String, List<ModelProperty>> cache = new HashMap<String, List<ModelProperty>>();
+
+    private Collection<Profile> profiles;
+
+
+    //private static List<DomainModel> cache = new ArrayList<DomainModel>();
+
+    /**
+     * Default constructor
+     */
+    public PomClassicTransformer(Collection<Profile> profiles)
+    {
+        this.profiles = profiles;
+        //dependency management
+        ModelDataSource source = new DefaultModelDataSource();
+        source.init( props, Arrays.asList( new ArtifactModelContainerFactory(), new IdModelContainerFactory() ) );
+
+        for(ModelContainer dependencyContainer : source.queryFor( ProjectUri.Dependencies.Dependency.xUri)) {
+                for ( ModelContainer managementContainer : source.queryFor( ProjectUri.DependencyManagement.Dependencies.Dependency.xUri) )
+                {
+                    managementContainer = new ArtifactModelContainerFactory().create(transformDependencyManagement(managementContainer.getProperties()));
+                    ModelContainerAction action = dependencyContainer.containerAction(managementContainer);
+                    if(action.equals(ModelContainerAction.JOIN) || action.equals(ModelContainerAction.DELETE)) {
+                        source.join(dependencyContainer, managementContainer);
+                    }
+                }
+        }
+
+        for(ModelContainer dependencyContainer : source.queryFor( ProjectUri.Build.Plugins.Plugin.xUri)) {
+                for ( ModelContainer managementContainer : source.queryFor( ProjectUri.Build.PluginManagement.Plugins.Plugin.xUri) )
+                {
+                    managementContainer = new ArtifactModelContainerFactory().create(transformPluginManagement(managementContainer.getProperties()));
+                    ModelContainerAction action = dependencyContainer.containerAction(managementContainer);
+                    if(action.equals(ModelContainerAction.JOIN) || action.equals(ModelContainerAction.DELETE)) {
+                        source.join(dependencyContainer, managementContainer);
+                    }
+                }
+        }        
+
+        props = source.getModelProperties();
+      //   for(ModelProperty mp : props) {
+       //      System.out.println("-" + mp);
+      //   }
+
-        }
+    }
+
-            if ( domainModels.indexOf( domainModel ) > 0 )
+            if ( domainModels.indexOf( domainModel ) == 0 )
-        return modelProperties;
+       return modelProperties;
+      //  return ModelTransformerContext.transformModelProperties(modelProperties, Arrays.asList(
+      //          new ProfileModelPropertyTransformer(),
+      //          new PluginManagementModelPropertyTransformer(),
+      //          new DependencyManagementModelPropertyTransformer()
+      //          ));
+
+        private static List<ModelProperty> transformDependencyManagement(List<ModelProperty> modelProperties) {
+            List<ModelProperty> transformedProperties = new ArrayList<ModelProperty>();
+            for(ModelProperty mp : modelProperties) {
+                if(mp.getUri().startsWith(ProjectUri.DependencyManagement.xUri))
+                {
+                    transformedProperties.add(new ModelProperty(
+                            mp.getUri().replace(ProjectUri.DependencyManagement.xUri, ProjectUri.xUri), mp.getValue()));
+                }
+            }
+            return transformedProperties;
+        }
+
+        public static List<ModelProperty> transformPluginManagement(List<ModelProperty> modelProperties) {
+            List<ModelProperty> transformedProperties = new ArrayList<ModelProperty>();
+            for(ModelProperty mp : modelProperties) {
+                if(mp.getUri().startsWith(ProjectUri.Build.PluginManagement.xUri))
+                {
+                    transformedProperties.add(new ModelProperty(
+                            mp.getUri().replace(ProjectUri.Build.PluginManagement.xUri, ProjectUri.Build.xUri), mp.getValue()));
+                }
+            }
+            return transformedProperties;
+        }
+
+ /*
+    private static class ProfileModelPropertyTransformer implements ModelPropertyTransformer {
+        public List<ModelProperty> transform(List<ModelProperty> modelProperties) {
+            List<ModelProperty> properties = new ArrayList<ModelProperty>(modelProperties);
+            List<ModelProperty> transformedProperties = new ArrayList<ModelProperty>();
+            for(ModelProperty mp : modelProperties) {
+                String uri = mp.getUri().replace("profiles#collection/profile", "");
+            }
+            return properties;
+        }
+
+        public String getBaseUri() {
+            return ProjectUri.baseUri;
+        }
+    }
+    */
