PR: MNG-458
merge components.xml files


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@326629 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+    private ComponentsXmlArchiverFileFilter componentsXmlFilter = new ComponentsXmlArchiverFileFilter();
+
-        // TODO: allow file mode specifications?
+            catch ( XmlPullParserException e )
+            {
+                throw new MojoExecutionException( "Error creating assembly: " + e.getMessage(), e );
+            }
-        throws ArchiverException, IOException, MojoExecutionException, MojoFailureException
+        throws ArchiverException, IOException, MojoExecutionException, MojoFailureException, XmlPullParserException
+        componentsXmlFilter.addToArchive( archiver );
+
-        throws ArchiverException, IOException, MojoExecutionException, MojoFailureException
+        throws ArchiverException, IOException, MojoExecutionException, MojoFailureException, XmlPullParserException
-            getLog().debug(
-                            "DependencySet[" + output + "]" + " dir perms: "
-                                + Integer.toString( archiver.getDefaultDirectoryMode(), 8 ) + " file perms: "
-                                + Integer.toString( archiver.getDefaultFileMode(), 8 ) );
+            getLog().debug( "DependencySet[" + output + "]" + " dir perms: " +
+                Integer.toString( archiver.getDefaultDirectoryMode(), 8 ) + " file perms: " +
+                Integer.toString( archiver.getDefaultFileMode(), 8 ) );
-                                throw new MojoExecutionException( "Unable to obtain unarchiver for file '"
-                                    + artifact.getFile() + "'" );
+                                throw new MojoExecutionException(
+                                    "Unable to obtain unarchiver for file '" + artifact.getFile() + "'" );
-                        archiver.addDirectory( tempLocation, output, null, FileUtils.getDefaultExcludes() );
+
+                        addDirectory( archiver, tempLocation, output, null, FileUtils.getDefaultExcludesAsList() );
-                        archiver.addFile( artifact.getFile(), output
-                            + evaluateFileNameMapping( dependencySet.getOutputFileNameMapping(), artifact ) );
+                        archiver.addFile( artifact.getFile(), output +
+                            evaluateFileNameMapping( dependencySet.getOutputFileNameMapping(), artifact ) );
+    private void addDirectory( Archiver archiver, File directory, String output, String[] includes, List excludes )
+        throws IOException, XmlPullParserException, ArchiverException
+    {
+        // TODO: more robust set of filters on added files in the archiver
+        File componentsXml = new File( directory, ComponentsXmlArchiverFileFilter.COMPONENTS_XML_PATH );
+        if ( componentsXml.exists() )
+        {
+            componentsXmlFilter.addComponentsXml( componentsXml );
+            excludes = new ArrayList( excludes );
+            excludes.add( ComponentsXmlArchiverFileFilter.COMPONENTS_XML_PATH );
+        }
+
+        archiver.addDirectory( directory, output, includes, (String[]) excludes.toArray( EMPTY_STRING_ARRAY ) );
+    }
+
-        throws ArchiverException
+        throws ArchiverException, IOException, XmlPullParserException
-                .debug(
-                        "FileSet[" + output + "]" + " dir perms: "
-                            + Integer.toString( archiver.getDefaultDirectoryMode(), 8 ) + " file perms: "
-                            + Integer.toString( archiver.getDefaultFileMode(), 8 )
-                            + ( fileSet.getLineEnding() == null ? "" : " lineEndings: " + fileSet.getLineEnding() ) );
+                .debug( "FileSet[" + output + "]" + " dir perms: " +
+                    Integer.toString( archiver.getDefaultDirectoryMode(), 8 ) + " file perms: " +
+                    Integer.toString( archiver.getDefaultFileMode(), 8 ) +
+                    ( fileSet.getLineEnding() == null ? "" : " lineEndings: " + fileSet.getLineEnding() ) );
-            archiver.addDirectory( archiveBaseDir, output, includes, excludes );
+            addDirectory( archiver, archiveBaseDir, output, includes, excludesList );
-     * @param output The string representation of the output directory.
+     * @param output               The string representation of the output directory.
-                                             String lineEnding )
+                                              String lineEnding )
-                                              "site did not exist in the target directory - please run site:site before creating the assembly" );
+                "site did not exist in the target directory - please run site:site before creating the assembly" );
