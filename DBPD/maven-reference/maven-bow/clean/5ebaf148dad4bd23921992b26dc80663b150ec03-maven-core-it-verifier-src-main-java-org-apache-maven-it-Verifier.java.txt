Adding file-pattern matching for expected results, along with ability to suppress the default maven.repo.local specification from verifier.properties...also, adding a test case for MNG-1021, to ensure the source artifact has the same build number as the main jar...I cannot reproduce the problem using this test...

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@292286 13f79535-47bb-0310-9956-ffa450edef68

-
-            if ( !expectedFile.exists() )
+            
+            if ( line.indexOf( '*' ) > -1 )
-                if ( wanted )
+                File parent = expectedFile.getParentFile();
+                
+                if ( !parent.exists() )
-                    throw new VerificationException( "Expected file was not found: " + expectedFile.getPath() );
+                    if ( wanted )
+                    {
+                        throw new VerificationException( "Expected file was not found: " + expectedFile.getPath() );
+                    }
+                }
+                else
+                {
+                    String shortNamePattern = expectedFile.getName().replaceAll( "\\*", ".*" );
+
+                    String[] candidates = parent.list();
+                    
+                    boolean found = false;
+                    
+                    if ( candidates != null )
+                    {
+                        for ( int i = 0; i < candidates.length; i++ )
+                        {
+                            if ( candidates[i].matches( shortNamePattern ) )
+                            {
+                                found = true;
+                                break;
+                            }
+                        }
+                    }
+                    
+                    if ( !found && wanted )
+                    {
+                        throw new VerificationException( "Expected file pattern was not found: " + expectedFile.getPath() );
+                    }
+                    else if ( found && !wanted )
+                    {
+                        throw new VerificationException( "Unwanted file pattern was found: " + expectedFile.getPath() );
+                    }
-                if ( !wanted )
+                if ( !expectedFile.exists() )
-                    throw new VerificationException( "Unwanted file was found: " + expectedFile.getPath() );
+                    if ( wanted )
+                    {
+                        throw new VerificationException( "Expected file was not found: " + expectedFile.getPath() );
+                    }
+                }
+                else
+                {
+                    if ( !wanted )
+                    {
+                        throw new VerificationException( "Unwanted file was found: " + expectedFile.getPath() );
+                    }
-    public void executeGoals( Properties properties, String filename )
+    public void executeGoals( Properties properties, Properties controlProperties, String filename )
-                cli.createArgument().setLine( key );
+                
+                String resolvedArg = resolveCommandLineArg( key );
+                
+                cli.createArgument().setLine( resolvedArg );
-            // Note: Make sure that the repo is surrounded by quotes as it can possibly have
-            // spaces in its path.
-            cli.createArgument().setLine( "-Dmaven.repo.local=" + "\"" + localRepo + "\"" );
+            boolean useMavenRepoLocal = Boolean.valueOf( controlProperties.getProperty( "use.mavenRepoLocal", "true" ) ).booleanValue();
+            if ( useMavenRepoLocal )
+            {
+                // Note: Make sure that the repo is surrounded by quotes as it can possibly have
+                // spaces in its path.
+                cli.createArgument().setLine( "-Dmaven.repo.local=" + "\"" + localRepo + "\"" );
+            }
+    private String resolveCommandLineArg( String key )
+    {
+        String result = key.replaceAll( "\\$\\{basedir\\}", basedir );
+        result = result.replaceAll( "\\\\", "\\" );
+        result = result.replaceAll( "\\/\\/", "\\/" );
+        
+        return result;
+    }
+
-                verifier.executeGoals( properties, "goals.txt" );
+                verifier.executeGoals( properties, controlProperties, "goals.txt" );
