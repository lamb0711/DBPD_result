Re-resolving: MNG-757

o Added it0068 to guard against regressions of the type causing MNG-836

o Added it2001, which must be run manually, to verify the test case laid out in MNG-757

o Reinstated the repository accumulation for successive traversal down the transitivity chain, so that transitively resolved artifacts can be found in repositories declared by POMs up the chain.

o Added a check for 'file:' at the beginning of the Settings.getLocalRepository() result, before prepending 'file://' to allow for relative definition of the local repository in test cases



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@280755 13f79535-47bb-0310-9956-ffa450edef68

+    
+    // lazily instantiated and cached.
+    private MavenProject superProject;
-                result = new ResolutionGroup( pomArtifact, Collections.EMPTY_SET, Collections.EMPTY_LIST );
+                // or used the inherited scope (should that be passed to the buildFromRepository method above?)
+                Set artifacts = project.createArtifacts( artifactFactory, artifact.getScope(),
+                                                         artifact.getDependencyFilter() );
+                
+                List repositories = aggregateRepositoryLists( remoteRepositories, project.getRemoteArtifactRepositories() );
+                
+                result = new ResolutionGroup( pomArtifact, artifacts, repositories );
+        catch ( ProjectBuildingException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Unable to read the metadata file", e );
+        }
+    }
+
+    private List aggregateRepositoryLists( List remoteRepositories, List remoteArtifactRepositories )
+        throws ProjectBuildingException
+    {
+        if ( superProject == null )
+        {
+            superProject = mavenProjectBuilder.buildStandaloneSuperProject( null );
+        }
+
+        List repositories = new ArrayList();
+
+        repositories.addAll( remoteRepositories );
+
+        // ensure that these are defined
+        for ( Iterator it = superProject.getRemoteArtifactRepositories().iterator(); it.hasNext(); )
+        {
+            ArtifactRepository superRepo = (ArtifactRepository) it.next();
+
+            for ( Iterator aggregatedIterator = repositories.iterator(); aggregatedIterator.hasNext(); )
+            {
+                ArtifactRepository repo = (ArtifactRepository) aggregatedIterator.next();
+
+                // if the repository exists in the list and was introduced by another POM's super-pom, 
+                // remove it...the repository definitions from the super-POM should only be at the end of
+                // the list.
+                // if the repository has been redefined, leave it.
+                if ( repo.getId().equals( superRepo.getId() ) && repo.getUrl().equals( superRepo.getUrl() ) )
+                {
+                    aggregatedIterator.remove();
+                }
+            }
+        }
+
+        // this list should contain the super-POM repositories, so we don't have to explicitly add them back.
+        for ( Iterator it = remoteArtifactRepositories.iterator(); it.hasNext(); )
+        {
+            ArtifactRepository repository = (ArtifactRepository) it.next();
+
+            if ( !repositories.contains( repository ) )
+            {
+                repositories.add( repository );
+            }
+        }
+
+        return repositories;
