

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@750361 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.commons.jxpath.JXPathContext;
-@Component(role=PluginManager.class)
+@Component(role = PluginManager.class)
-    
+
-        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidPluginException, PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
+        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidPluginException, PluginManagerException, PluginNotFoundException,
+        PluginVersionNotFoundException
-        else if ( projectPlugin.getVersion() == null ||
-                  Artifact.RELEASE_VERSION.equals(projectPlugin.getVersion()) ||
-                  Artifact.LATEST_VERSION.equals(projectPlugin.getVersion()))
+        else if ( projectPlugin.getVersion() == null || Artifact.RELEASE_VERSION.equals( projectPlugin.getVersion() ) || Artifact.LATEST_VERSION.equals( projectPlugin.getVersion() ) )
-                throw new PluginContainerException( plugin,
-                                                    "Failed to create realm for plugin '"
-                                                                    + projectPlugin, e );
+                throw new PluginContainerException( plugin, "Failed to create realm for plugin '" + projectPlugin, e );
-            logger.debug(
-                               "Checking for plugin descriptor for: " + projectPlugin.getKey()
-                                               + " with version: " + projectPlugin.getVersion() + " in collector: " + pluginCollector );
+            logger.debug( "Checking for plugin descriptor for: " + projectPlugin.getKey() + " with version: " + projectPlugin.getVersion() + " in collector: " + pluginCollector );
-                throw new PluginManagerException( projectPlugin, "The plugin descriptor for the plugin "
-                    + projectPlugin.getKey() + " was not found. Should have been in realm: " + pluginRealm
+                throw new PluginManagerException( projectPlugin, "The plugin descriptor for the plugin " + projectPlugin.getKey() + " was not found. Should have been in realm: " + pluginRealm
-        
+
-            projectPluginDependencies = repositorySystem.createArtifacts( plugin.getDependencies(), null, coreArtifactFilterManager.getCoreArtifactFilter(), project );            
+            projectPluginDependencies = repositorySystem.createArtifacts( plugin.getDependencies(), null, coreArtifactFilterManager.getCoreArtifactFilter(), project );
-        
+
-            
+
-        
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
-            .setArtifact( pluginArtifact )
-            .setArtifactDependencies( dependencies )
-            .setLocalRepository( localRepository )
-            .setRemoteRepostories( project.getRemoteArtifactRepositories() )
-            .setManagedVersionMap( pluginManagedDependencies )
-            .setFilter( filter )                
-            .setMetadataSource( repositorySystem );        
-        
+
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact( pluginArtifact ).setArtifactDependencies( dependencies ).setLocalRepository( localRepository )
+            .setRemoteRepostories( project.getRemoteArtifactRepositories() ).setManagedVersionMap( pluginManagedDependencies ).setFilter( filter ).setMetadataSource( repositorySystem );
+
-        
+
-            throw new PluginExecutionException( mojoExecution, project, "Cannot execute mojo: " + mojoDescriptor.getGoal() + ". It requires a project with an existing pom.xml, but the build is not using one." );
+            throw new PluginExecutionException( mojoExecution, project, "Cannot execute mojo: " + mojoDescriptor.getGoal()
+                + ". It requires a project with an existing pom.xml, but the build is not using one." );
-                interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties(
-                        session.getProjectBuilderConfiguration().getExecutionProperties(),
-                        PomInterpolatorTag.EXECUTION_PROPERTIES.name()));
-                interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( session.getProjectBuilderConfiguration().getUserProperties(),
-                        PomInterpolatorTag.USER_PROPERTIES.name()));
-                String interpolatedDom  =
-                        interpolateXmlString( String.valueOf( dom ), interpolatorProperties );
+                interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( session.getProjectBuilderConfiguration().getExecutionProperties(),
+                                                                                              PomInterpolatorTag.EXECUTION_PROPERTIES.name() ) );
+                interpolatorProperties
+                    .addAll( InterpolatorProperty.toInterpolatorProperties( session.getProjectBuilderConfiguration().getUserProperties(), PomInterpolatorTag.USER_PROPERTIES.name() ) );
+                String interpolatedDom = interpolateXmlString( String.valueOf( dom ), interpolatorProperties );
-                throw new PluginManagerException(
-                                                  mojoDescriptor,
-                                                  project,
-                                                  "Failed to calculate concrete state for configuration of: "
-                                                                  + mojoDescriptor.getHumanReadableKey(),
-                                                  e );
+                throw new PluginManagerException( mojoDescriptor, project, "Failed to calculate concrete state for configuration of: " + mojoDescriptor.getHumanReadableKey(), e );
-                throw new PluginManagerException(
-                                                  mojoDescriptor,
-                                                  project,
-                                                  "Failed to calculate concrete state for configuration of: "
-                                                                  + mojoDescriptor.getHumanReadableKey(),
-                                                  e );
+                throw new PluginManagerException( mojoDescriptor, project, "Failed to calculate concrete state for configuration of: " + mojoDescriptor.getHumanReadableKey(), e );
-            catch( DuplicateArtifactAttachmentException e )
+            catch ( DuplicateArtifactAttachmentException e )
-                while( r != null );
+                while ( r != null );
-                logger.fatalError(
-                                       sb.toString(), e );
+                logger.fatalError( sb.toString(), e );
-    public MavenReport getReport( MavenProject project,
-                                  MojoExecution mojoExecution,
-                                  MavenSession session )
-        throws ArtifactNotFoundException, PluginConfigurationException, PluginManagerException,
-        ArtifactResolutionException
+    public MavenReport getReport( MavenProject project, MojoExecution mojoExecution, MavenSession session )
+        throws ArtifactNotFoundException, PluginConfigurationException, PluginManagerException, ArtifactResolutionException
-        Xpp3Dom dom = project.getReportConfiguration( descriptor.getGroupId(),
-                                                      descriptor.getArtifactId(),
-                                                      mojoExecution.getExecutionId() );
+        Xpp3Dom dom = project.getReportConfiguration( descriptor.getGroupId(), descriptor.getArtifactId(), mojoExecution.getExecutionId() );
-    public PluginDescriptor verifyReportPlugin( ReportPlugin reportPlugin,
-                                                MavenProject project,
-                                                MavenSession session )
-        throws PluginVersionResolutionException, ArtifactResolutionException,
-        ArtifactNotFoundException, InvalidPluginException,
-        PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
+    public PluginDescriptor verifyReportPlugin( ReportPlugin reportPlugin, MavenProject project, MavenSession session )
+        throws PluginVersionResolutionException, ArtifactResolutionException, ArtifactNotFoundException, InvalidPluginException, PluginManagerException, PluginNotFoundException,
+        PluginVersionNotFoundException
-            version = pluginVersionManager.resolveReportPluginVersion(
-                                                                       reportPlugin.getGroupId(),
-                                                                       reportPlugin.getArtifactId(),
-                                                                       project, session );
+            version = pluginVersionManager.resolveReportPluginVersion( reportPlugin.getGroupId(), reportPlugin.getArtifactId(), project, session );
-    private Mojo getConfiguredMojo( MavenSession session,
-                                    Xpp3Dom dom,
-                                    MavenProject project,
-                                    boolean report,
-                                    MojoExecution mojoExecution,
-                                    List realmActions )
+    private Mojo getConfiguredMojo( MavenSession session, Xpp3Dom dom, MavenProject project, boolean report, MojoExecution mojoExecution, List realmActions )
-        logger.debug(
-                           "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm "
-                                           + pluginRealm.getId() + " - descRealmId="
-                                           + mojoDescriptor.getRealm() );
+            logger.debug( "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm " + pluginRealm.getId() + " - descRealmId=" + mojoDescriptor.getRealm() );
-        Mojo mojo;
-        try
-        {
-            mojo = container.lookup( Mojo.class, mojoDescriptor.getRoleHint() );
+            Mojo mojo;
+            try
+            {
+                mojo = container.lookup( Mojo.class, mojoDescriptor.getRoleHint() );
+            }
+            catch ( ComponentLookupException e )
+            {
+                throw new PluginContainerException( mojoDescriptor, pluginRealm, "Unable to find the mojo '" + mojoDescriptor.getRoleHint() + "' in the plugin '"
+                    + pluginDescriptor.getPluginLookupKey() + "'", e );
+            }
+
+            if ( mojo != null )
+            {
+                logger.debug( "Looked up - " + mojo + " - " + mojo.getClass().getClassLoader() );
+            }
+            else
+            {
+                logger.warn( "No luck." );
+            }
+
+            if ( report && !( mojo instanceof MavenReport ) )
+            {
+                // TODO: the mojoDescriptor should actually capture this information so we don't get this far
+                return null;
+            }
+
+            if ( mojo instanceof ContextEnabled )
+            {
+                Map pluginContext = session.getPluginContext( pluginDescriptor, project );
+
+                pluginContext.put( "project", project );
+
+                pluginContext.put( "pluginDescriptor", pluginDescriptor );
+
+                ( (ContextEnabled) mojo ).setPluginContext( pluginContext );
+            }
+
+            mojo.setLog( new DefaultLog( logger ) );
+
+            XmlPlexusConfiguration pomConfiguration;
+
+            if ( dom == null )
+            {
+                pomConfiguration = new XmlPlexusConfiguration( "configuration" );
+            }
+            else
+            {
+                pomConfiguration = new XmlPlexusConfiguration( dom );
+            }
+
+            // Validate against non-editable (@readonly) parameters, to make sure users aren't trying to
+            // override in the POM.
+            validatePomConfiguration( mojoDescriptor, pomConfiguration );
+
+            PlexusConfiguration mergedConfiguration = mergeMojoConfiguration( pomConfiguration, mojoDescriptor );
+
+            // TODO: plexus changes to make this more like the component descriptor so this can be used instead
+            //            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
+            //                                                                          mojoDescriptor.getConfiguration() );
+
+            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, mojoExecution, pathTranslator, logger, session.getExecutionProperties() );
+
+            PlexusConfiguration extractedMojoConfiguration = extractMojoConfiguration( mergedConfiguration, mojoDescriptor );
+
+            checkDeprecatedParameters( mojoDescriptor, pomConfiguration );
+
+            checkRequiredParameters( mojoDescriptor, extractedMojoConfiguration, expressionEvaluator );
+
+            populatePluginFields( mojo, mojoDescriptor, extractedMojoConfiguration, expressionEvaluator );
+
+            return mojo;
+
-        catch ( ComponentLookupException e )
+        finally
-            throw new PluginContainerException( mojoDescriptor, pluginRealm, "Unable to find the mojo '"
-                                              + mojoDescriptor.getRoleHint() + "' in the plugin '"
-                                              + pluginDescriptor.getPluginLookupKey() + "'", e );
-        }
-
-        if ( mojo != null )
-        {
-            logger.debug(
-                               "Looked up - " + mojo + " - "
-                                               + mojo.getClass().getClassLoader() );
-        }
-        else
-        {
-            logger.warn( "No luck." );
-        }
-
-        if ( report && !( mojo instanceof MavenReport ) )
-        {
-            // TODO: the mojoDescriptor should actually capture this information so we don't get this far
-            return null;
-        }
-
-        if ( mojo instanceof ContextEnabled )
-        {
-            Map pluginContext = session.getPluginContext( pluginDescriptor, project );
-
-            pluginContext.put( "project", project );
-
-            pluginContext.put( "pluginDescriptor", pluginDescriptor );
-
-            ( (ContextEnabled) mojo ).setPluginContext( pluginContext );
-        }
-
-        mojo.setLog( new DefaultLog( logger ) );
-
-        XmlPlexusConfiguration pomConfiguration;
-
-        if ( dom == null )
-        {
-            pomConfiguration = new XmlPlexusConfiguration( "configuration" );
-        }
-        else
-        {
-            pomConfiguration = new XmlPlexusConfiguration( dom );
-        }
-
-        // Validate against non-editable (@readonly) parameters, to make sure users aren't trying to
-        // override in the POM.
-        validatePomConfiguration( mojoDescriptor, pomConfiguration );
-
-        PlexusConfiguration mergedConfiguration = mergeMojoConfiguration( pomConfiguration,
-                                                                          mojoDescriptor );
-
-        // TODO: plexus changes to make this more like the component descriptor so this can be used instead
-        //            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
-        //                                                                          mojoDescriptor.getConfiguration() );
-
-        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator(
-                                                                                          session,
-                                                                                          mojoExecution,
-                                                                                          pathTranslator,
-                                                                                          logger,
-                                                                                          session.getExecutionProperties() );
-
-        PlexusConfiguration extractedMojoConfiguration = extractMojoConfiguration(
-                                                                                   mergedConfiguration,
-                                                                                   mojoDescriptor );
-
-        checkDeprecatedParameters( mojoDescriptor, pomConfiguration );
-
-        checkRequiredParameters( mojoDescriptor, extractedMojoConfiguration, expressionEvaluator );
-
-        populatePluginFields( mojo, mojoDescriptor, extractedMojoConfiguration, expressionEvaluator );
-
-        return mojo;
-
-        } finally {
-    private void checkDeprecatedParameters( MojoDescriptor mojoDescriptor,
-                                            PlexusConfiguration extractedMojoConfiguration )
+    private void checkDeprecatedParameters( MojoDescriptor mojoDescriptor, PlexusConfiguration extractedMojoConfiguration )
-                        else if ( param.getAlias() != null)
+                        else if ( param.getAlias() != null )
-    private void setDescriptorClassAndArtifactInfo( PluginDescriptor pluginDescriptor,
-                                                    MavenProject project,
-                                                    MavenSession session,
-                                                    List realmActions )
+    private void setDescriptorClassAndArtifactInfo( PluginDescriptor pluginDescriptor, MavenProject project, MavenSession session, List realmActions )
-    private PlexusConfiguration extractMojoConfiguration( PlexusConfiguration mergedConfiguration,
-                                                          MojoDescriptor mojoDescriptor )
+    private PlexusConfiguration extractMojoConfiguration( PlexusConfiguration mergedConfiguration, MojoDescriptor mojoDescriptor )
-                logger.debug(
-                                   "*** WARNING: Configuration \'" + child.getName()
-                                                   + "\' is not used in goal \'"
-                                                   + mojoDescriptor.getFullGoalName()
-                                                   + "; this may indicate a typo... ***" );
+                logger.debug( "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'" + mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***" );
-    private void checkRequiredParameters( MojoDescriptor goal,
-                                          PlexusConfiguration configuration,
-                                          ExpressionEvaluator expressionEvaluator )
+    private void checkRequiredParameters( MojoDescriptor goal, PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator )
-                    throw new PluginConfigurationException( goal.getPluginDescriptor(),
-                                                            e.getMessage(), e );
+                    throw new PluginConfigurationException( goal.getPluginDescriptor(), e.getMessage(), e );
-                if ( ( fieldValue == null )
-                     && ( ( value == null ) || ( value.getChildCount() == 0 ) ) )
+                if ( ( fieldValue == null ) && ( ( value == null ) || ( value.getChildCount() == 0 ) ) )
-    private void validatePomConfiguration( MojoDescriptor goal,
-                                           PlexusConfiguration pomConfiguration )
+    private void validatePomConfiguration( MojoDescriptor goal, PlexusConfiguration pomConfiguration )
-                    throw new PluginConfigurationException( goal.getPluginDescriptor(),
-                                                            errorMessage.toString() );
+                    throw new PluginConfigurationException( goal.getPluginDescriptor(), errorMessage.toString() );
-    private PlexusConfiguration mergeMojoConfiguration( XmlPlexusConfiguration fromPom,
-                                                        MojoDescriptor mojoDescriptor )
+    private PlexusConfiguration mergeMojoConfiguration( XmlPlexusConfiguration fromPom, MojoDescriptor mojoDescriptor )
-                    if ( StringUtils.isNotEmpty( pomConfig.getValue( null ) )
-                         || ( pomConfig.getChildCount() > 0 ) )
+                    if ( StringUtils.isNotEmpty( pomConfig.getValue( null ) ) || ( pomConfig.getChildCount() > 0 ) )
-                    if ( ( implementation != null )
-                         && ( toAdd.getAttribute( "implementation", null ) == null ) )
+                    if ( ( implementation != null ) && ( toAdd.getAttribute( "implementation", null ) == null ) )
-                        XmlPlexusConfiguration implementationConf = new XmlPlexusConfiguration(
-                                                                                                paramName );
+                        XmlPlexusConfiguration implementationConf = new XmlPlexusConfiguration( paramName );
-                        implementationConf.setAttribute( "implementation",
-                                                         parameter.getImplementation() );
+                        implementationConf.setAttribute( "implementation", parameter.getImplementation() );
-    private XmlPlexusConfiguration buildTopDownMergedConfiguration( PlexusConfiguration dominant,
-                                                                    PlexusConfiguration recessive )
+    private XmlPlexusConfiguration buildTopDownMergedConfiguration( PlexusConfiguration dominant, PlexusConfiguration recessive )
-            PlexusConfiguration childRec = recessive == null ? null
-                            : recessive.getChild( childDom.getName(), false );
+            PlexusConfiguration childRec = recessive == null ? null : recessive.getChild( childDom.getName(), false );
-    private void populatePluginFields( Mojo plugin,
-                                       MojoDescriptor mojoDescriptor,
-                                       PlexusConfiguration configuration,
-                                       ExpressionEvaluator expressionEvaluator )
+    private void populatePluginFields( Mojo plugin, MojoDescriptor mojoDescriptor, PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator )
-            logger.debug( "Configuring mojo '" + mojoDescriptor.getId() + "' with "
-                               + ( configuratorId == null ? "basic" : configuratorId )
-                               + " configurator -->" );
+            logger.debug( "Configuring mojo '" + mojoDescriptor.getId() + "' with " + ( configuratorId == null ? "basic" : configuratorId ) + " configurator -->" );
-            throw new PluginConfigurationException(
-                                                    mojoDescriptor.getPluginDescriptor(),
-                                                    "Unable to parse the created DOM for plugin configuration",
-                                                    e );
+            throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(), "Unable to parse the created DOM for plugin configuration", e );
-            throw new PluginConfigurationException(
-                                                    mojoDescriptor.getPluginDescriptor(),
-                                                    "Unable to retrieve component configurator for plugin configuration",
-                                                    e );
+            throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(), "Unable to retrieve component configurator for plugin configuration", e );
-                logger.fatalError(
-                                        configurator.getClass().getName() + "#configureComponent(...) caused a linkage error ("
-                                            + e.getClass().getName() + ") and may be out-of-date. Check the realms:" );
+                logger.fatalError( configurator.getClass().getName() + "#configureComponent(...) caused a linkage error (" + e.getClass().getName() + ") and may be out-of-date. Check the realms:" );
-            throw new PluginConfigurationException(
-                                                    mojoDescriptor.getPluginDescriptor(),
-                                                    e.getClass().getName() + ": " + e.getMessage(),
-                                                    new ComponentConfigurationException( e ) );
+            throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(), e.getClass().getName() + ": " + e.getMessage(), new ComponentConfigurationException( e ) );
-    public static String createPluginParameterRequiredMessage( MojoDescriptor mojo,
-                                                               Parameter parameter,
-                                                               String expression )
+    public static String createPluginParameterRequiredMessage( MojoDescriptor mojo, Parameter parameter, String expression )
-    protected void resolveTransitiveDependencies( MavenSession context,
-                                                  MavenRepositorySystem repositorySystem,
-                                                  String scope,
-                                                  MavenProject project,
-                                                  boolean isAggregator )
+    protected void resolveTransitiveDependencies( MavenSession context, MavenRepositorySystem repositorySystem, String scope, MavenProject project, boolean isAggregator )
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
-            .setArtifact( artifact )
-            .setResolveRoot( false )
-            .setArtifactDependencies( project.getDependencyArtifacts() )
-            .setLocalRepository( context.getLocalRepository() )
-            .setRemoteRepostories( project.getRemoteArtifactRepositories() )
-            .setManagedVersionMap( project.getManagedVersionMap() )
-            .setFilter( filter )                
-            .setMetadataSource( repositorySystem );
-                         
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact( artifact ).setResolveRoot( false ).setArtifactDependencies( project.getDependencyArtifacts() )
+            .setLocalRepository( context.getLocalRepository() ).setRemoteRepostories( project.getRemoteArtifactRepositories() ).setManagedVersionMap( project.getManagedVersionMap() )
+            .setFilter( filter ).setMetadataSource( repositorySystem );
+
-            if ( isAggregator
-                && checkMissingArtifactsInReactor( context.getSortedProjects(), result.getMissingArtifacts() ) )
+            if ( isAggregator && checkMissingArtifactsInReactor( context.getSortedProjects(), result.getMissingArtifacts() ) )
-        
+
-     * This method is checking to see if the artifacts that can't be resolved are all
-     * part of this reactor. This is done to prevent a chicken or egg scenario with
-     * fresh projects that have a plugin that is an aggregator and requires dependencies. See
-     * MNG-2277 for more info.
-     *
-     * NOTE: If this happens, it most likely means the project-artifact for an
-     * interproject dependency doesn't have a file yet (it hasn't been built yet).
-     *
+     * This method is checking to see if the artifacts that can't be resolved are all part of this
+     * reactor. This is done to prevent a chicken or egg scenario with fresh projects that have a
+     * plugin that is an aggregator and requires dependencies. See MNG-2277 for more info.
+     * 
+     * NOTE: If this happens, it most likely means the project-artifact for an interproject
+     * dependency doesn't have a file yet (it hasn't been built yet).
+     * 
-                if ( p.getArtifactId().equals( mArtifact.getArtifactId() )
-                     && p.getGroupId().equals( mArtifact.getGroupId() )
-                     && p.getVersion().equals( mArtifact.getVersion() ) )
+                if ( p.getArtifactId().equals( mArtifact.getArtifactId() ) && p.getGroupId().equals( mArtifact.getGroupId() ) && p.getVersion().equals( mArtifact.getVersion() ) )
-                    logger.warn( "The dependency: "
-                                      + p.getId()
-                                      + " can't be resolved but has been found in the reactor.\nThis dependency has been excluded from the plugin execution. You should rerun this mojo after executing mvn install.\n" );
+                    logger
+                        .warn( "The dependency: "
+                            + p.getId()
+                            + " can't be resolved but has been found in the reactor.\nThis dependency has been excluded from the plugin execution. You should rerun this mojo after executing mvn install.\n" );
-    private void downloadDependencies( MavenProject project,
-                                       MavenSession context,
-                                       MavenRepositorySystem repositorySystem )
+    private void downloadDependencies( MavenProject project, MavenSession context, MavenRepositorySystem repositorySystem )
-    public static void checkPlexusUtils( ResolutionGroup resolutionGroup,
-                                         ArtifactFactory artifactFactory )
+    public static void checkPlexusUtils( ResolutionGroup resolutionGroup, ArtifactFactory artifactFactory )
-            if ( a.getArtifactId().equals( "plexus-utils" )
-                 && vr.containsVersion( new DefaultArtifactVersion( a.getVersion() ) ) )
+            if ( a.getArtifactId().equals( "plexus-utils" ) && vr.containsVersion( new DefaultArtifactVersion( a.getVersion() ) ) )
-            resolutionGroup.getArtifacts()
-                           .add(
-                                 artifactFactory.createArtifact( "org.codehaus.plexus",
-                                                                 "plexus-utils", "1.1",
-                                                                 Artifact.SCOPE_RUNTIME, "jar" ) );
+            resolutionGroup.getArtifacts().add( artifactFactory.createArtifact( "org.codehaus.plexus", "plexus-utils", "1.1", Artifact.SCOPE_RUNTIME, "jar" ) );
+
+    // Plugin Prefix Loader
+
+    /**
+     * Determine the appropriate {@link PluginDescriptor} instance for use with the specified plugin
+     * prefix, using the following strategies (in order): <br/>
+     * <ol>
+     * <li>Search for a plugin that has already been loaded with the specified prefix</li>
+     * <li>Search for a plugin configured in the POM that has a matching prefix</li>
+     * <li>Search the pluginGroups specified in the settings.xml for a matching plugin</li>
+     * <li>Use groupId == org.apache.maven.plugins, and artifactId == maven-&lt;prefix&gt;-plugin,
+     * and try to resolve based on that.</li>
+     * </ol>
+     */
+    public Plugin findPluginForPrefix( String prefix, MavenProject project, MavenSession session )
+        throws PluginLoaderException
+    {
+        Set descriptors = pluginCollector.getPluginDescriptorsForPrefix( prefix );
+        Map projectPluginMap = project.getBuild().getPluginsAsMap();
+
+        Plugin plugin = null;
+
+        if ( descriptors != null )
+        {
+            PluginDescriptor pluginDescriptor = null;
+
+            for ( Iterator it = descriptors.iterator(); it.hasNext(); )
+            {
+                PluginDescriptor pd = (PluginDescriptor) it.next();
+
+                Plugin projectPlugin = (Plugin) projectPluginMap.get( pd.getPluginLookupKey() );
+                if ( ( projectPlugin != null ) && ( projectPlugin.getVersion() != null ) && projectPlugin.getVersion().equals( pd.getVersion() ) )
+                {
+                    pluginDescriptor = pd;
+                    break;
+                }
+            }
+
+            plugin = toPlugin( pluginDescriptor );
+        }
+
+        if ( plugin == null )
+        {
+            PluginDescriptor pluginDescriptor = loadFromProjectForPrefixQuery( prefix, project, session );
+
+            plugin = toPlugin( pluginDescriptor );
+        }
+
+        if ( plugin == null )
+        {
+            plugin = loadFromPrefixMapper( prefix, project, session );
+        }
+
+        if ( plugin == null )
+        {
+            plugin = new Plugin();
+            plugin.setArtifactId( PluginDescriptor.getDefaultPluginArtifactId( prefix ) );
+
+            PluginDescriptor pluginDescriptor = pluginManagerSupport.loadIsolatedPluginDescriptor( plugin, project, session );
+            plugin = toPlugin( pluginDescriptor );
+        }
+
+        if ( plugin == null )
+        {
+            throw new PluginLoaderException( "Cannot find plugin with prefix: " + prefix );
+        }
+
+        return plugin;
+    }
+
+    private Plugin toPlugin( PluginDescriptor pluginDescriptor )
+    {
+        if ( pluginDescriptor == null )
+        {
+            return null;
+        }
+
+        Plugin plugin = new Plugin();
+
+        plugin.setGroupId( pluginDescriptor.getGroupId() );
+        plugin.setArtifactId( pluginDescriptor.getArtifactId() );
+        plugin.setVersion( pluginDescriptor.getVersion() );
+
+        return plugin;
+    }
+
+    /**
+     * Look for a plugin configured in the current project that has a prefix matching the one
+     * specified. Return the {@link PluginDescriptor} if a match is found.
+     */
+    private PluginDescriptor loadFromProjectForPrefixQuery( String prefix, MavenProject project, MavenSession session )
+        throws PluginLoaderException
+    {
+        PluginDescriptor result = null;
+
+        for ( Iterator it = project.getBuildPlugins().iterator(); it.hasNext(); )
+        {
+            Plugin plugin = (Plugin) it.next();
+
+            PluginDescriptor pluginDescriptor = pluginManagerSupport.loadIsolatedPluginDescriptor( plugin, project, session );
+
+            if ( ( pluginDescriptor != null ) && prefix.equals( pluginDescriptor.getGoalPrefix() ) )
+            {
+                result = pluginDescriptor;
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    /**
+     * Look for a plugin in the pluginGroups specified in the settings.xml that has a prefix
+     * matching the one specified. Return the {@link PluginDescriptor} if a match is found.
+     */
+    private Plugin loadFromPrefixMapper( String prefix, MavenProject project, MavenSession session )
+        throws PluginLoaderException
+    {
+        Plugin plugin = pluginMappingManager.getByPrefix( prefix, session.getPluginGroups(), project.getRemoteArtifactRepositories(), session.getLocalRepository() );
+
+        if ( plugin != null )
+        {
+            Plugin projectPlugin = (Plugin) project.getBuild().getPluginsAsMap().get( plugin.getKey() );
+            if ( ( projectPlugin != null ) && ( projectPlugin.getVersion() != null ) )
+            {
+                plugin.setVersion( projectPlugin.getVersion() );
+            }
+        }
+
+        return plugin;
+    }
+
+    // Plugin Context
+    public Collection<MojoExecution> getMojoExecutionsForGoal( String goal )
+        throws Exception
+    {
+        List<MojoExecution> mojoExecutions = new ArrayList<MojoExecution>();
+
+        for ( PluginDescriptor descriptor : pluginCollector.getPluginDescriptors() )
+        {
+            MojoDescriptor mojoDescriptor = descriptor.getMojo( goal );
+
+            if ( mojoDescriptor != null )
+            {
+                MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );
+                mojoExecution.setConfiguration( Xpp3DomBuilder.build( new StringReader( mojoDescriptor.getMojoConfiguration().toString() ) ) );
+                mojoExecutions.add( mojoExecution );
+            }
+        }
+
+        return mojoExecutions;
+    }
+
+    public Object getMojoParameterFor( MojoExecution mojoExecution, String xPath )
+        throws Exception
+    {
+        Xpp3Dom mojoDescriptorConfiguration = Xpp3DomBuilder.build( new StringReader( mojoExecution.getMojoDescriptor().getMojoConfiguration().toString() ) );
+
+        Xpp3Dom mergedConfig = Xpp3Dom.mergeXpp3Dom( mojoExecution.getConfiguration(), mojoDescriptorConfiguration );
+
+        return JXPathContext.newContext( mergedConfig ).getValue( xPath );
+    }
+
+    public void executeMojo( MojoExecution mojoExecution, MavenSession session )
+        throws Exception
+    {
+        executeMojo( session.getCurrentProject(), mojoExecution, session );
+    }
