o Revised exception handling of model builder to collect as much as possible in ModelProblem instances that are stored in the ModelBuildingException when it eventually bails out. This should enable IDE integrators to provide more extensive error feedback.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@782282 13f79535-47bb-0310-9956-ffa450edef68

+        List<ModelProblem> problems = new ArrayList<ModelProblem>();
+
-        List<Profile> activeExternalProfiles = getActiveExternalProfiles( request, profileActivationContext );
+        List<Profile> activeExternalProfiles = getActiveExternalProfiles( request, profileActivationContext, problems );
-        Model model = readModel( modelSource, request );
+        Model model = readModel( modelSource, request, problems );
-        for ( Model current = model; current != null; current = readParent( current, request ) )
+        for ( Model current = model; current != null; current = readParent( current, request, problems ) )
-            List<Profile> activeProjectProfiles = getActiveProjectProfiles( rawModel, profileActivationContext );
+            List<Profile> activeProjectProfiles =
+                getActiveProjectProfiles( rawModel, profileActivationContext, problems );
-            configureResolver( request.getModelResolver(), resultModel );
+            configureResolver( request.getModelResolver(), resultModel, problems );
-        resultModel = interpolateModel( resultModel, request );
+        resultModel = interpolateModel( resultModel, request, problems );
-        validateModel( resultModel, false, request );
+        validateModel( resultModel, false, request, problems );
+
+        if ( !problems.isEmpty() )
+        {
+            throw new ModelBuildingException( problems );
+        }
-    private Model readModel( ModelSource modelSource, ModelBuildingRequest request )
+    private Model readModel( ModelSource modelSource, ModelBuildingRequest request, List<ModelProblem> problems )
-            throw new UnparseableModelException( "Failed to parse POM " + modelSource.getLocation() + ": "
-                + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e );
+            problems.add( new ModelProblem( "Non-parseable POM " + modelSource.getLocation() + ": " + e.getMessage(),
+                                            modelSource.getLocation(), e ) );
+            throw new ModelBuildingException( problems );
-            throw new UnparseableModelException( "Failed to read POM " + modelSource.getLocation(), -1, -1, e );
+            problems.add( new ModelProblem( "Non-readable POM " + modelSource.getLocation() + ": " + e.getMessage(),
+                                            modelSource.getLocation(), e ) );
+            throw new ModelBuildingException( problems );
-        validateModel( model, true, request );
+        validateModel( model, true, request, problems );
-    private void validateModel( Model model, boolean raw, ModelBuildingRequest request )
-        throws ModelBuildingException
+    private void validateModel( Model model, boolean raw, ModelBuildingRequest request, List<ModelProblem> problems )
-            throw new InvalidModelException( "Failed to validate POM " + toSourceHint( model ), result );
+            String source = toSourceHint( model );
+
+            for ( int i = 0; i < result.getMessageCount(); i++ )
+            {
+                problems.add( new ModelProblem( "Invalid POM " + source + ": " + result.getMessage( i ), source ) );
+            }
-    private List<Profile> getActiveExternalProfiles( ModelBuildingRequest request, ProfileActivationContext context )
-        throws ModelBuildingException
+    private List<Profile> getActiveExternalProfiles( ModelBuildingRequest request, ProfileActivationContext context,
+                                                     List<ModelProblem> problems )
-            throw new InvalidProfileException( "Failed to determine activation status of external profile "
-                + e.getProfile(), e.getProfile(), e );
+            problems.add( new ModelProblem( "Invalid activation condition for external profile "
+                + e.getProfile().getId() + ": " + e.getMessage(), "(external profiles)", e ) );
+
+            // FIXME: Update profile selector to integrate better with the problem reporting
+            return new ArrayList<Profile>();
-    private List<Profile> getActiveProjectProfiles( Model model, ProfileActivationContext context )
+    private List<Profile> getActiveProjectProfiles( Model model, ProfileActivationContext context,
+                                                    List<ModelProblem> problems )
-            throw new InvalidProfileException( "Failed to determine activation status of project profile "
-                + e.getProfile() + " for POM " + toSourceHint( model ), e.getProfile(), e );
+            problems.add( new ModelProblem( "Invalid activation condition for project profile "
+                + e.getProfile().getId() + " in POM " + toSourceHint( model ) + ": " + e.getMessage(),
+                                            toSourceHint( model ), e ) );
+
+            // FIXME: Update profile selector to integrate better with the problem reporting
+            return new ArrayList<Profile>();
-    private void configureResolver( ModelResolver modelResolver, Model model )
-        throws ModelBuildingException
+    private void configureResolver( ModelResolver modelResolver, Model model, List<ModelProblem> problems )
-                throw new InvalidModelException( "Failed to validate repository " + repository.getId() + " for POM "
-                    + toSourceHint( model ), e );
+                problems.add( new ModelProblem( "Invalid repository " + repository.getId() + " in POM "
+                    + toSourceHint( model ) + ": " + e.getMessage(), toSourceHint( model ), e ) );
-    private Model interpolateModel( Model model, ModelBuildingRequest request )
-        throws ModelBuildingException
+    private Model interpolateModel( Model model, ModelBuildingRequest request, List<ModelProblem> problems )
-            throw new ModelBuildingException( "Failed to interpolate model " + toSourceHint( model ), e );
+            problems.add( new ModelProblem( "Invalid expression in POM " + toSourceHint( model ) + ": "
+                + e.getMessage(), toSourceHint( model ), e ) );
+
+            return model;
-    private Model readParent( Model childModel, ModelBuildingRequest request )
+    private Model readParent( Model childModel, ModelBuildingRequest request, List<ModelProblem> problems )
-            parentModel = readParentLocally( childModel, request );
+            parentModel = readParentLocally( childModel, request, problems );
-                parentModel = readParentExternally( childModel, request );
+                parentModel = readParentExternally( childModel, request, problems );
-    private Model readParentLocally( Model childModel, ModelBuildingRequest request )
+    private Model readParentLocally( Model childModel, ModelBuildingRequest request, List<ModelProblem> problems )
-        Model candidateModel = readModel( new FileModelSource( pomFile ), request );
+        Model candidateModel = readModel( new FileModelSource( pomFile ), request, problems );
-    private Model readParentExternally( Model childModel, ModelBuildingRequest request )
+    private Model readParentExternally( Model childModel, ModelBuildingRequest request, List<ModelProblem> problems )
-            Exception e = new IllegalArgumentException( "No model resolver provided" );
-            throw new UnresolvableParentException( "Failed to resolve parent POM " + toId( parent ) + " for POM "
-                + toSourceHint( childModel ), e );
+            problems.add( new ModelProblem( "Non-resolvable parent POM " + toId( parent ) + " for POM "
+                + toSourceHint( childModel ) + ": " + "No model resolver provided", toSourceHint( childModel ) ) );
+            throw new ModelBuildingException( problems );
-            throw new UnresolvableParentException( "Failed to resolve parent POM " + toId( parent ) + " for POM "
-                + toSourceHint( childModel ), e );
+            problems.add( new ModelProblem( "Non-resolvable parent POM " + toId( parent ) + " for POM "
+                + toSourceHint( childModel ) + ": " + e.getMessage(), toSourceHint( childModel ), e ) );
+            throw new ModelBuildingException( problems );
-        return readModel( modelSource, request );
+        return readModel( modelSource, request, problems );
