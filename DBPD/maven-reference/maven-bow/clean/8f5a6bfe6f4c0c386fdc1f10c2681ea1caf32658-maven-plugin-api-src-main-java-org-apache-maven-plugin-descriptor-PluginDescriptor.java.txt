o Restored lifecycle forking

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@799310 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.HashMap;
+import org.apache.maven.plugin.lifecycle.Lifecycle;
+import org.apache.maven.plugin.lifecycle.LifecycleConfiguration;
+import org.apache.maven.plugin.lifecycle.io.xpp3.LifecycleMappingsXpp3Reader;
+import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.ReaderFactory;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
+
+    private static final String LIFECYCLE_DESCRIPTOR = "META-INF/maven/lifecycle.xml";
+
-    private List artifacts;
+    private List<Artifact> artifacts;
-    private Map artifactMap;
+    private Map<String, Artifact> artifactMap;
-    private Set introducedDependencyArtifacts;
+    private Set<Artifact> introducedDependencyArtifacts;
+    private Map<String, Lifecycle> lifecycleMappings;
+
-    public List getArtifacts()
+    public List<Artifact> getArtifacts()
-    public void setArtifacts( List artifacts )
+    public void setArtifacts( List<Artifact> artifacts )
-    public Map getArtifactMap()
+    public Map<String, Artifact> getArtifactMap()
-    public void setIntroducedDependencyArtifacts( Set introducedDependencyArtifacts )
+    public void setIntroducedDependencyArtifacts( Set<Artifact> introducedDependencyArtifacts )
-    public Set getIntroducedDependencyArtifacts()
+    public Set<Artifact> getIntroducedDependencyArtifacts()
-        return introducedDependencyArtifacts != null ? introducedDependencyArtifacts : Collections.EMPTY_SET;
+        return ( introducedDependencyArtifacts != null ) ? introducedDependencyArtifacts
+                        : Collections.<Artifact> emptySet();
+
+    public Lifecycle getLifecycleMapping( String lifecycleId )
+        throws IOException, XmlPullParserException
+    {
+        if ( lifecycleMappings == null )
+        {
+            LifecycleConfiguration lifecycleConfiguration;
+
+            Reader reader = null;
+            try
+            {
+                reader = ReaderFactory.newXmlReader( getDescriptorStream( LIFECYCLE_DESCRIPTOR ) );
+
+                lifecycleConfiguration = new LifecycleMappingsXpp3Reader().read( reader );
+            }
+            finally
+            {
+                IOUtil.close( reader );
+            }
+
+            lifecycleMappings = new HashMap<String, Lifecycle>();
+
+            for ( Lifecycle lifecycle : lifecycleConfiguration.getLifecycles() )
+            {
+                lifecycleMappings.put( lifecycle.getId(), lifecycle );
+            }
+        }
+
+        return lifecycleMappings.get( lifecycleId );
+    }
+
+    private InputStream getDescriptorStream( String descriptor )
+        throws IOException
+    {
+        File pluginFile = ( pluginArtifact != null ) ? pluginArtifact.getFile() : null;
+        if ( pluginFile == null )
+        {
+            throw new IllegalStateException( "plugin main artifact has not been resolved" );
+        }
+
+        if ( pluginFile.isFile() )
+        {
+            try
+            {
+                return new URL( "jar:" + pluginFile.toURI() + "!/" + descriptor ).openStream();
+            }
+            catch ( MalformedURLException e )
+            {
+                throw new IllegalStateException( e );
+            }
+        }
+        else
+        {
+            return new FileInputStream( new File( pluginFile, descriptor ) );
+        }
+    }
+
