PR: MNG-2410
Desc: Add support for multi-page reports using multiple sinks.

* Removed unused MultiPageSink and SinkFactory, and the AbstractMavenMultiPageReport
  (could not find any class extending that one, even in Mojo; Also, it doesn't work
  so It's safe to delete).

* Updated deps on doxia-sink-api to 1.0-alpha-9-SNAPSHOT which has the SinkFactory
  interface.

* Updated dep on doxia-site-renderer to 1.0-alpha-9-SNAPSHOT since that uses the sink-api.

* For backwards compatibility I added an MavenMultiPageReport interface.
  Normal reporting plugins can implement that, and the site plugin detects this interface
  and calls the new generate api method with the SinkFactory parameter.

  In the future, the MavenMultiPageReport should be merged with the MavenReport interface,
  and the original generate method should be removed.

  This is the only way to alter the API without breaking existing plugins.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@430440 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.doxia.sink.SinkFactory;
+    private SinkFactory sinkFactory;
+
+     * TODO: This method is never called - all reports are rendered by maven-site-plugin's
+     * ReportDocumentRender.
+     *
-        try
-        {
-            String outputDirectory = getOutputDirectory();
-
-            SiteRendererSink sink =
-                getSiteRenderer().createSink( new File( outputDirectory ), getOutputName() + ".html" );
-
-            generate( sink, Locale.getDefault() );
-
-            // TODO: add back when skinning support is in the site renderer
-//            getSiteRenderer().copyResources( outputDirectory, "maven" );
-        }
-        catch ( RendererException e )
-        {
-            throw new MojoExecutionException( "An error has occurred in " + getName( locale ) + " report generation.",
-                                              e );
-        }
-        catch ( IOException e )
-        {
-            throw new MojoExecutionException( "An error has occurred in " + getName( locale ) + " report generation.",
-                                              e );
-        }
-        catch ( MavenReportException e )
-        {
-            throw new MojoExecutionException( "An error has occurred in " + getName( locale ) + " report generation.",
-                                              e );
-        }
+        throw new MojoExecutionException( "Reporting mojo's can only be called from ReportDocumentRender" );
-     * @see org.apache.maven.reporting.MavenReport#generate(org.codehaus.doxia.sink.Sink, java.util.Locale)
+     * @see org.apache.maven.reporting.MavenReport#generate(org.apache.maven.doxia.sink.Sink, org.apache.maven.reporting.SinkFactory, java.util.Locale)
+     * @deprecated
+        getLog().warn( "Deprecated API called - no SinkFactory available. Please update this plugin." );
+        generate( sink, null, locale );
+    }
+
+    /**
+     * @see org.apache.maven.reporting.MavenReport#generate(org.apache.maven.doxia.sink.Sink, org.apache.maven.reporting.SinkFactory, java.util.Locale)
+     * @deprecated
+     */
+    public void generate( Sink sink, Locale locale )
+        throws MavenReportException
+    {
+        getLog().warn( "Deprecated API called - no SinkFactory available. Please update this plugin." );
+        generate( sink, null, locale );
+    }
+
+    /**
+     * @see org.apache.maven.reporting.MavenReport#generate(org.apache.maven.doxia.sink.Sink, org.apache.maven.reporting.SinkFactory, java.util.Locale)
+     */
+    public void generate( Sink sink, SinkFactory sinkFactory, Locale locale )
+        throws MavenReportException
+    {
+        this.sinkFactory = sinkFactory;
+
+    public SinkFactory getSinkFactory()
+    {
+        return sinkFactory;
+    }
+
