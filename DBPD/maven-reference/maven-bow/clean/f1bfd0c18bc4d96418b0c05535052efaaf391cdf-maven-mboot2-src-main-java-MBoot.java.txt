read plugin deps from pluggy pom


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163748 13f79535-47bb-0310-9956-ffa450edef68

-    String[] pluginGeneratorDeps = new String[]{"plexus/jars/plexus-container-default-1.0-alpha-2.jar",
-                                                "qdox/jars/qdox-1.2.jar",
-                                                "org.apache.maven/jars/maven-core-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-artifact-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-model-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-plugin-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-plugin-tools-api-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-plugin-tools-java-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-plugin-tools-pluggy-2.0-SNAPSHOT.jar"};
-
-    private IsolatedClassLoader bootstrapClassLoader;
-
-        bootstrapClassLoader = createClassloaderFromDependencies( reader.getDependencies() );
+
+        ClassLoader bootstrapClassLoader = createClassloaderFromDependencies( reader.getDependencies(), null );
-            reader = buildProject( directory, builds[i] );
+            reader = buildProject( directory, builds[i], bootstrapClassLoader );
-        addPluginGeneratorDependencies( bootstrapClassLoader );
+        reader = new ModelReader( downloader );
+        reader.parse( new File( basedir, "maven-plugin-tools/maven-plugin-tools-pluggy/pom.xml" ) );
+        List dependencies = new ArrayList( reader.getDependencies() );
+        dependencies.add( new Dependency( reader.getGroupId(), reader.getArtifactId(), reader.getVersion() ) );
+        IsolatedClassLoader cl = createClassloaderFromDependencies( dependencies, bootstrapClassLoader );
-            reader = buildProject( directory, pluginBuilds[i] );
+            reader = buildProject( directory, pluginBuilds[i], cl );
-    public ModelReader buildProject( String basedir, String projectId )
+    public ModelReader buildProject( String basedir, String projectId, ClassLoader classLoader )
-            generateSources( model.getAbsolutePath(), "java", generatedSources, modelVersion, "false",
-                             bootstrapClassLoader );
+            generateSources( model.getAbsolutePath(), "java", generatedSources, modelVersion, "false", classLoader );
-                             bootstrapClassLoader );
+                             classLoader );
-                             bootstrapClassLoader );
-            generateSources( model.getAbsolutePath(), "xdoc", generatedDocs, modelVersion, "false",
-                             bootstrapClassLoader );
+                             classLoader );
+            generateSources( model.getAbsolutePath(), "xdoc", generatedDocs, modelVersion, "false", classLoader );
-                                      new File( basedir, "pom.xml" ).getAbsolutePath(), bootstrapClassLoader );
+                                      new File( basedir, "pom.xml" ).getAbsolutePath(), classLoader );
-    private void addPluginGeneratorDependencies( IsolatedClassLoader cl )
-        throws Exception
-    {
-        // TODO: create a separate class loader
-
-        for ( int i = 0; i < pluginGeneratorDeps.length; i++ )
-        {
-            String dependency = pluginGeneratorDeps[i];
-
-            File f = new File( repoLocal, dependency );
-            if ( !f.exists() )
-            {
-                throw new FileNotFoundException(
-                    "Missing dependency: " + dependency +
-                    ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
-            }
-
-            cl.addURL( f.toURL() );
-        }
-    }
-
-    private IsolatedClassLoader createClassloaderFromDependencies( List dependencies )
+    private IsolatedClassLoader createClassloaderFromDependencies( List dependencies, ClassLoader parent )
-        IsolatedClassLoader cl = new IsolatedClassLoader();
+        IsolatedClassLoader cl;
+        if ( parent == null )
+        {
+            cl = new IsolatedClassLoader();
+        }
+        else
+        {
+            cl = new IsolatedClassLoader( parent );
+        }
