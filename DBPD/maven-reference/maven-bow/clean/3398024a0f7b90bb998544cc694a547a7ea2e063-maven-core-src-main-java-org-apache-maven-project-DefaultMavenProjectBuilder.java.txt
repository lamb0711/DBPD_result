o delegating local repository implementation that chains the reactor and user local repository
o removal of more state from the WagonManager and pushing it into the request in an attempt to bridge the way for Mercury



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773456 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
-
-    //private static HashMap<String, MavenProject> hm = new HashMap<String, MavenProject>();
+    
+    private Map<File, MavenProject> projectCache = new HashMap<File, MavenProject>();
+        MavenProject project = projectCache.get( pomFile );
+        
+        if ( project != null )
+        {
+            return project;
+        }
+        
-            throw new ProjectBuildingException( "", "Failed to activate pom profiles." );
+            throw new ProjectBuildingException( "", "Failed to activate pom profiles.", e );
-            throw new ProjectBuildingException( "", "" );
+            throw new ProjectBuildingException( "", "", e );
-
-        //Interpolation & Management
-        MavenProject project;
+        
-            lifecycleBindingsInjector.injectLifecycleBindings( model );
+            if ( configuration.isProcessPlugins() )
+            {                
+                lifecycleBindingsInjector.injectLifecycleBindings( model );
+            }
-            Collection<Plugin> pluginsFromProject = project.getModel().getBuild().getPlugins();
+            if ( configuration.isProcessPlugins() )
+            {            
+                Collection<Plugin> pluginsFromProject = project.getModel().getBuild().getPlugins();
-            // Merge the various sources for mojo configuration:
-            // 1. default values from mojo descriptor
-            // 2. POM values from per-plugin configuration
-            // 3. POM values from per-execution configuration
-            // These configuration sources are given in increasing order of dominance.
+                // Merge the various sources for mojo configuration:
+                // 1. default values from mojo descriptor
+                // 2. POM values from per-plugin configuration
+                // 3. POM values from per-execution configuration
+                // These configuration sources are given in increasing order of dominance.
-            // push plugin configuration down to executions
-            for ( Plugin buildPlugin : pluginsFromProject )
-            {
-                Xpp3Dom dom = (Xpp3Dom) buildPlugin.getConfiguration();
-
-                if ( dom != null )
+                // push plugin configuration down to executions
+                for ( Plugin buildPlugin : pluginsFromProject )
-                    for ( PluginExecution e : buildPlugin.getExecutions() )
+                    Xpp3Dom dom = (Xpp3Dom) buildPlugin.getConfiguration();
+
+                    if ( dom != null )
-                        Xpp3Dom dom1 = Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) e.getConfiguration(), new Xpp3Dom( dom ) );
-                        e.setConfiguration( dom1 );
+                        for ( PluginExecution e : buildPlugin.getExecutions() )
+                        {
+                            Xpp3Dom dom1 = Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) e.getConfiguration(), new Xpp3Dom( dom ) );
+                            e.setConfiguration( dom1 );
+                        }
+
+                // merge in default values from mojo descriptor
+                lifecycle.populateDefaultConfigurationForPlugins( pluginsFromProject, project, configuration.getLocalRepository() );
+
+                project.getModel().getBuild().setPlugins( new ArrayList<Plugin>( pluginsFromProject ) );
-
-            // merge in default values from mojo descriptor
-            lifecycle.populateDefaultConfigurationForPlugins( pluginsFromProject, project, configuration.getLocalRepository() );
-
-            project.getModel().getBuild().setPlugins( new ArrayList<Plugin>( pluginsFromProject ) );
-            throw new ProjectBuildingException( "", "" );
+            throw new ProjectBuildingException( "", "", e );
-            throw new ProjectBuildingException( "", e.getMessage() );
+            throw new ProjectBuildingException( "", e.getMessage(), e );
+        projectCache.put(  pomFile, project );
+        
