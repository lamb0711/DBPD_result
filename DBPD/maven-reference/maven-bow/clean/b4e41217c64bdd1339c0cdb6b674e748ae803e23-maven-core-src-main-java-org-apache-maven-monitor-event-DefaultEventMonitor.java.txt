Improve phase-tracking, event dispatching, and align build headers as events dispatched to the default event monitor...also, add debug-level enter/exit phase output in the default event monitor. Finally, refactored code that actually renders the build plan and executes the mojos for each task-segment in the lifecycle executor, to eliminate all the duplication.

This lays the ground work for improving cache management, since I also added event types for embedder control (keep in mind that event monitors can be used to control when the project/model cache is flushed, for example).


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@631455 13f79535-47bb-0310-9956-ffa450edef68

-    private static final String[] START_EVENTS = {MavenEvents.MOJO_EXECUTION};
+    private static final String[] START_EVENTS = {
+        MavenEvents.PROJECT_EXECUTION,
+        MavenEvents.PHASE_EXECUTION,
+        MavenEvents.MOJO_EXECUTION
+    };
+
+    private static final String[] END_EVENTS = {
+        MavenEvents.PHASE_EXECUTION
+    };
-        super( START_EVENTS, MavenEvents.NO_EVENTS, MavenEvents.NO_EVENTS );
+        super( START_EVENTS, END_EVENTS, MavenEvents.NO_EVENTS );
-        logger.info( "[" + target + "]" );
+        if ( MavenEvents.MOJO_EXECUTION.equals( event ) )
+        {
+            logger.info( "[" + target + "]" );
+        }
+        else if ( MavenEvents.PHASE_EXECUTION.equals( event ) )
+        {
+            logger.debug( line() );
+            logger.debug( "Entering lifecycle phase: " + target );
+            logger.debug( line() );
+        }
+        else if ( MavenEvents.PROJECT_EXECUTION.equals( event ) )
+        {
+            logger.info( line() );
+            String[] targetParts = target.split( "\n" );
+            logger.info( "Building " + targetParts[0] );
+            if ( targetParts.length > 0 )
+            {
+                logger.info( "" );
+                for ( int i = 1; i < targetParts.length; i++ )
+                {
+                    logger.info( targetParts[i] );
+                }
+            }
+            logger.info( line() );
+        }
+    }
+
+    protected void doEndEvent( String event,
+                               String target,
+                               long timestamp )
+    {
+        logger.debug( line() );
+        logger.debug( "Completed lifecycle phase: " + target );
+        logger.debug( line() );
+    }
+
+    private String line()
+    {
+        return "------------------------------------------------------------------------";
