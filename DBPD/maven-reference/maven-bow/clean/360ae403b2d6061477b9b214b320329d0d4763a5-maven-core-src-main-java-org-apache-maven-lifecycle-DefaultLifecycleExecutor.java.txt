refactoring to simplify - taking notes of potential clean up after lifecycle is completed


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163410 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.MavenMetadataSource;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
-import org.apache.maven.plugin.descriptor.MojoDescriptor;
-import org.apache.maven.project.MavenProject;
-        resolveTransitiveDependencies( session );
-
-        downloadDependencies( session );
-
-        System.out.println( "executing phase = " + phase );
-
-                try
-                {
-                    pluginManager.executeMojo( session, p.getGoal() );
-                }
-                catch ( GoalExecutionException e )
-                {
-                    throw new LifecycleExecutionException( "Problem executing " + p.getGoal(), e );
-                }
+                executeMojo( p.getGoal(), session );
-            pluginManager.verifyPluginForGoal( id, session );
-        }
-        catch ( Exception e )
-        {
-            throw new LifecycleExecutionException( "Problem getting plugin for " + id, e );
-        }
-
-        MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor( id );
-        if ( mojoDescriptor == null )
-        {
-            // TODO: goal not found exception?
-            throw new LifecycleExecutionException( "Goal not found: " + id );
-        }
-
-        if ( mojoDescriptor.requiresDependencyResolution() )
-        {
-            resolveTransitiveDependencies( session );
-
-            downloadDependencies( session );
-        }
-
-        try
-        {
-    // Artifact resolution
-    // ----------------------------------------------------------------------
-
-    private void resolveTransitiveDependencies( MavenSession context )
-        throws LifecycleExecutionException
-    {
-        MavenProject project = context.getProject();
-
-        try
-        {
-            MavenMetadataSource sourceReader = new MavenMetadataSource( artifactResolver, projectBuilder );
-
-            ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(),
-                                                                                    context.getRemoteRepositories(),
-                                                                                    context.getLocalRepository(),
-                                                                                    sourceReader );
-
-            project.getArtifacts().addAll( result.getArtifacts().values() );
-
-        }
-        catch ( Exception e )
-        {
-            throw new LifecycleExecutionException( "Error resolving transitive dependencies.", e );
-        }
-    }
-
-    // ----------------------------------------------------------------------
-    // Artifact downloading
-    // ----------------------------------------------------------------------
-
-    public void downloadDependencies( MavenSession context )
-        throws LifecycleExecutionException
-    {
-        try
-        {
-            for ( Iterator it = context.getProject().getArtifacts().iterator(); it.hasNext(); )
-            {
-                Artifact artifact = (Artifact) it.next();
-
-                artifactResolver.resolve( artifact,
-                                          context.getRemoteRepositories(),
-                                          context.getLocalRepository() );
-            }
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new LifecycleExecutionException( "Can't resolve artifact: ", e );
-        }
-    }
-
-    // ----------------------------------------------------------------------
