o push in changes to sync up with shane


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@769031 13f79535-47bb-0310-9956-ffa450edef68

+    /**
+     * These mappings correspond to packaging types, like WAR packaging, which configure a particular mojos
+     * to run in a given phase.
+     */
-
-        executeTaskSegments( goals, session, rootProject );
-    }
-
-    public List<String> getLifecyclePhases()
-    {
-        for ( Lifecycle lifecycle : lifecycles )
-        {
-            if ( lifecycle.getId().equals( "default" ) )
-            {
-                return (List<String>) lifecycle.getPhases();
-            }
-        }
-
-        return null;
-    }
-
-    private void executeTaskSegments( List<String> goals, MavenSession session, MavenProject rootProject )
-        throws LifecycleExecutionException, BuildFailureException
-    {
-        List<MavenProject> sortedProjects = session.getSortedProjects();
-
-        for ( MavenProject currentProject : sortedProjects )
+        
+        for ( MavenProject currentProject : session.getSortedProjects() )
+                        System.out.println( "target: " + target );
-        }
+        }        
+            System.out.println( mojoExecution.getMojoDescriptor().getGoal() );
+            
-    public List<MojoDescriptor> calculateLifecyclePlan( String task, MavenSession session )
+    public List<MojoDescriptor> calculateLifecyclePlan( String lifecyclePhase, MavenSession session )
-    {
+    {        
-        // 1. 
-        Lifecycle lifecycle = phaseToLifecycleMap.get( task );
+        // 1.
+        //
+        // Based on the lifecycle phase we are given, let's find the corresponding lifecycle.
+        //
+        Lifecycle lifecycle = phaseToLifecycleMap.get( lifecyclePhase );                
-        LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get( project.getPackaging() );
+        //
+        // If we are dealing with the "clean" or "site" lifecycle then there are currently no lifecycle mappings but there are default phases
+        // that need to be run instead.
+        //
+        // Now we need to take into account the packaging type of the project. For a project of type WAR, the lifecycle where mojos are mapped
+        // on to the given phases in the lifecycle are going to be a little different then, say, a project of type JAR.
+        //
+           
+        Map<String, String> lifecyclePhasesForPackaging;
+        if ( lifecyclePhase.equals( "clean" ) )
+        {
+            lifecyclePhasesForPackaging = new HashMap<String,String>();
+            
+            for( String phase : lifecycle.getDefaultPhases() )
+            {
+                lifecyclePhasesForPackaging.put( "clean", "org.apache.maven.plugins:maven-clean-plugin:clean" );
+            }
+        }
+        else
+        {
+            LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get( project.getPackaging() );
+          
+            lifecyclePhasesForPackaging = lifecycleMappingForPackaging.getLifecycles().get( lifecycle.getId() ).getPhases();            
+        }
+                
-        Map<String, String> lifecyclePhasesForPackaging = lifecycleMappingForPackaging.getLifecycles().get( "default" ).getPhases();
-        
-        // Create an order Map of the phases in the lifecycle to a list of mojos to execute.
+        //
+        // Once we have the lifecycle mapping for the given packaging, we need to know whats phases we need to worry about executing.
+        //
+                        
+        // Create an ordered Map of the phases in the lifecycle to a list of mojos to execute.
-            if ( phase.equals( task ) )
+            if ( phase.equals( lifecyclePhase ) )
-        
+        //
+        // We are only interested in the phases that correspond to the lifecycle we are trying to run. If we are running the "clean"
+        // lifecycle we are not interested in goals -- like "generate-sources -- that belong to the default lifecycle.
+        //
+            System.out.println( plugin.getArtifactId() );
+            
-                if ( execution.getPhase() != null )
+                if ( execution.getPhase() != null && execution.getPhase().equals( lifecyclePhase ) )
-                        MojoDescriptor md = getMojoDescriptor( s, session, project);
-                        phaseToMojoMapping.get( md.getPhase() ).add( s );
+                        MojoDescriptor md = getMojoDescriptor( s, session, project );
+                        
+                        boolean include = lifecycle.getPhases().contains( md.getPhase() );                        
+                        System.out.println( ">>> " + goal );
+                        System.out.println( ">>> " + md.getPhase() );                                                
+                        System.out.println( ">>> " + include );
+                        
+                        // need to know if this plugin belongs to a phase in the lifecycle that's running
+                        if ( md.getPhase() != null && include )
+                        {
+                            phaseToMojoMapping.get( md.getPhase() ).add( s );
+                        }
+        for ( MojoDescriptor md : lifecyclePlan )
+        {
+            System.out.println( md.getGoal() );
+        }
+        
-    {
+    {        
-            {
+            {                
-    }
+    }   
+    
+    public List<String> getLifecyclePhases()
+    {
+        for ( Lifecycle lifecycle : lifecycles )
+        {
+            if ( lifecycle.getId().equals( "default" ) )
+            {
+                return (List<String>) lifecycle.getPhases();
+            }
+        }
+
+        return null;
+    }    
