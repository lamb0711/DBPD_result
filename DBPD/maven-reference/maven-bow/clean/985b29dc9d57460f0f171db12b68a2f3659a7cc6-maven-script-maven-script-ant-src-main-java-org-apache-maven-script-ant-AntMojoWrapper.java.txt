o necessary goodness to allow Ant-based plugins to unpack their resources which can be executed
  tested with a custom plugin which uses ant extensively calling out to .sh and .pl


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@462711 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.DependencyResolutionRequiredException;
+import org.apache.tools.ant.types.Path;
+import org.apache.tools.ant.Project;
+import org.codehaus.plexus.archiver.UnArchiver;
+import org.codehaus.plexus.archiver.ArchiverException;
+import org.codehaus.plexus.archiver.zip.ZipUnArchiver;
+import org.codehaus.plexus.util.StringUtils;
+import java.util.Collection;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.io.File;
+/**
+ * @author John Casey
+ * @author Jason van Zyl
+ */
-    implements ContextEnabled, MapOrientedComponent
+    implements ContextEnabled,
+    MapOrientedComponent
+    private AntScriptInvoker scriptInvoker;
-    private final AntScriptInvoker scriptInvoker;
+
+    private Project antProject;
+
+    private MavenProject mavenProject;
+
+    private PluginDescriptor pluginDescriptor;
+
+        antProject = scriptInvoker.getProject();
+
+        mavenProject = (MavenProject) pluginContext.get( "project" );
+
+        pluginDescriptor = (PluginDescriptor) pluginContext.get( "pluginDescriptor" );
+
+        unpackFileBasedResources();
+
+        addClasspathReferences();
+
-    public void addComponentRequirement( ComponentRequirement requirementDescriptor, Object requirementValue )
+    public void addComponentRequirement( ComponentRequirement requirementDescriptor,
+                                         Object requirementValue )
+    private void unpackFileBasedResources()
+        throws MojoExecutionException
+    {
+        // What we need to write out any resources in the plugin to the target directory of the 
+        // mavenProject using the Ant-based plugin:
+        //
+        // 1. Need a reference to the plugin JAR itself
+        // 2. Need a reference to the ${basedir} of the mavenProject
+
+        File pluginJar = pluginDescriptor.getPluginArtifact().getFile();
+
+        String resourcesPath = pluginDescriptor.getArtifactId();
+
+        File outputDirectory = new File( mavenProject.getBuild().getDirectory() );
+
+        try
+        {
+            UnArchiver ua = new ZipUnArchiver( pluginJar );
+
+            ua.extract( resourcesPath, outputDirectory );
+        }
+        catch ( ArchiverException e )
+        {
+            throw new MojoExecutionException( "Error extracting resources from your Ant-based plugin.", e );
+        }
+    }
+
+    private void addClasspathReferences()
+        throws MojoExecutionException
+    {
+        try
+        {
+            // Compile classpath
+            Path p = new Path( antProject );
+
+            p.setPath( StringUtils.join( mavenProject.getCompileClasspathElements().iterator(), File.pathSeparator ) );
+
+            antProject.addReference( "maven.compile.classpath", p );
+
+            // Runtime classpath
+            p = new Path( antProject );
+
+            p.setPath( StringUtils.join( mavenProject.getRuntimeClasspathElements().iterator(), File.pathSeparator ) );
+
+            antProject.addReference( "maven.runtime.classpath", p );
+
+            // Test classpath
+            p = new Path( antProject );
+
+            p.setPath( StringUtils.join( mavenProject.getTestClasspathElements().iterator(), File.pathSeparator ) );
+
+            antProject.addReference( "maven.test.classpath", p );
+
+            // Plugin dependency classpath
+
+            p = getPathFromArtifacts( pluginDescriptor.getArtifacts(), antProject );
+            System.out.println( "p = " + p );
+            antProject.addReference( "maven.plugin.classpath", p );
+        }
+        catch ( DependencyResolutionRequiredException e )
+        {
+            throw new MojoExecutionException( "Error creating classpath references for Ant-based plugin scripts.", e  );
+        }
+    }
+
+    public Path getPathFromArtifacts( Collection artifacts,
+                                      Project antProject )
+        throws DependencyResolutionRequiredException
+    {
+        List list = new ArrayList( artifacts.size() );
+
+        for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+        {
+            Artifact a = (Artifact) i.next();
+
+            File file = a.getFile();
+
+            if ( file == null )
+            {
+                throw new DependencyResolutionRequiredException( a );
+            }
+
+            list.add( file.getPath() );
+        }
+
+        Path p = new Path( antProject );
+
+        p.setPath( StringUtils.join( list.iterator(), File.pathSeparator ) );
+
+        return p;
+    }
