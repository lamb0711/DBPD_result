Worked on MNG-309 and subtasks...

o Added digest creation/verification for POMs

o Added separate logging of kickouts and exclusions for ArtifactDiscoverer to keep it from polluting the repository.report.txt

o Added transactional behavior for each artifact conversion: if the artifact, its POM and all the myriad supporting files cannot be converted/created, then all files associated with that artifact are backed out of the target repo.

  NOTE: This WILL NOT happen if "--force" is used.

o Translating '+' characters to '-' in legacy artifact paths (not in v4 source repo paths, since we'll assume those are valid for use in m2). This is taking place inside the V3PomRewriter currently.

Validated all of this on localhost using a test repo. Next step is to validate on beaver with production source and test target repos, and fix anything that's outstanding (also add test cases to the test repo as needed).



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@164116 13f79535-47bb-0310-9956-ffa450edef68

- * ==================================================================== Copyright 2001-2004 The
- * Apache Software Foundation.
+ * ==================================================================== 
+ * Copyright 2001-2004 The Apache Software Foundation.
-import org.apache.maven.tools.repoclean.digest.ArtifactDigestVerifier;
+import org.apache.maven.tools.repoclean.digest.DigestVerifier;
+import org.apache.maven.tools.repoclean.report.PathLister;
+import org.apache.maven.tools.repoclean.transaction.RewriteTransaction;
+import org.apache.maven.tools.repoclean.transaction.RollbackException;
+import java.text.SimpleDateFormat;
-    private ArtifactDigestVerifier artifactDigestVerifier;
+    private static final String REPORTS_DIR_DATE_FORMAT = "dd-MMM-yyyy_hh.mm.ss";
+
+    private DigestVerifier digestVerifier;
-        File reportsBase = normalizeReportsBase( configuration.getReportsPath() );
+        File reportsBase = formatReportsBase( configuration.getReportsPath() );
+                
+                PathLister kickoutLister = null;
+                PathLister excludeLister = null;
+                
+                        File kickoutsList = new File(reportsBase, "kickouts.txt");
+                        File excludesList = new File(reportsBase, "excludes.txt");
+                        
+                        kickoutLister = new PathLister(kickoutsList);
+                        excludeLister = new PathLister(excludesList);
+
-                                                                          configuration.getBlacklistedPatterns() );
+                                                                          configuration.getBlacklistedPatterns(), excludeLister, kickoutLister );
+                    
+                    excludeLister.close();
+                    kickoutLister.close();
+                RewriteTransaction transaction = new RewriteTransaction( artifact );
+
+                    transaction.addFile( artifactTarget );
+
+                        transaction.addFile( artifactTarget );
+
+                                    transaction.addFile( targetParent );
+
-                            // if we can't copy the jar over, then skip the rest.
-                            errorOccurred = true;
+                            throw e;
-                        if ( !errorOccurred )
+                        if ( logger.isDebugEnabled() )
-                            if ( logger.isDebugEnabled() )
-                            {
-                                logger.debug( "working on digest for artifact[" + artifact.getId()
-                                    + "] with groupId: \'" + artifact.getGroupId() + "\'" );
-                            }
-
-                            try
-                            {
-                                artifactDigestVerifier.verifyDigest( artifact, artifactTarget, artifactReporter,
-                                                                     configuration.reportOnly() );
-                            }
-                            catch ( Exception e )
-                            {
-                                repoReporter.error( "Error verifying digest for artifact[" + artifact.getId() + "]", e );
-                            }
+                            logger.debug( "working on digest for artifact[" + artifact.getId() + "] with groupId: \'"
+                                + artifact.getGroupId() + "\'" );
-                        if ( !errorOccurred )
+                        try
-                            ArtifactMetadata pom = new ProjectMetadata( artifact );
+                            digestVerifier.verifyDigest( artifactSource, artifactTarget, transaction,
+                                                                 artifactReporter, configuration.reportOnly() );
+                        }
+                        catch ( Exception e )
+                        {
+                            repoReporter.error( "Error verifying digest for artifact[" + artifact.getId() + "]", e );
-                            artifactPomRewriter = (ArtifactPomRewriter) container.lookup( ArtifactPomRewriter.ROLE,
-                                                                                          configuration
-                                                                                              .getSourcePomVersion() );
+                            throw e;
+                        }
-                            File sourcePom = new File( sourceRepositoryBase, sourceRepo.pathOfMetadata( pom ) );
+                        ArtifactMetadata pom = new ProjectMetadata( artifact );
-                            File targetPom = new File( targetRepositoryBase, targetRepo.pathOfMetadata( pom ) );
+                        artifactPomRewriter = (ArtifactPomRewriter) container.lookup( ArtifactPomRewriter.ROLE,
+                                                                                      configuration
+                                                                                          .getSourcePomVersion() );
-                            File bridgedTargetPom = new File( targetRepositoryBase, bridgingLayout.pathOfMetadata( pom ) );
+                        File sourcePom = new File( sourceRepositoryBase, sourceRepo.pathOfMetadata( pom ) );
-                            try
+                        File targetPom = new File( targetRepositoryBase, targetRepo.pathOfMetadata( pom ) );
+
+                        transaction.addFile( targetPom );
+
+                        File bridgedTargetPom = new File( targetRepositoryBase, bridgingLayout.pathOfMetadata( pom ) );
+
+                        transaction.addFile( bridgedTargetPom );
+
+                        try
+                        {
+                            artifactPomRewriter.rewrite( artifact, sourcePom, targetPom, artifactReporter,
+                                                         configuration.reportOnly() );
+
+                            boolean wroteBridge = bridgePomLocations( targetPom, bridgedTargetPom, artifactReporter );
+                            
+                            digestVerifier.verifyDigest( sourcePom, targetPom, transaction,
+                                                                 artifactReporter, configuration.reportOnly() );
+                            
+                            if(wroteBridge)
-                                artifactPomRewriter.rewrite( artifact, sourcePom, targetPom, artifactReporter,
-                                                             configuration.reportOnly() );
-
-                                bridgePomLocations( targetPom, bridgedTargetPom, artifactReporter );
+                                digestVerifier.verifyDigest( sourcePom, bridgedTargetPom, transaction,
+                                                                     artifactReporter, configuration.reportOnly() );
-                            catch ( Exception e )
-                            {
-                                repoReporter.error( "Error rewriting POM for artifact[" + artifact.getId()
-                                    + "] into the target repository.", e );
-                            }
+                            
+                        }
+                        catch ( Exception e )
+                        {
+                            repoReporter.error( "Error rewriting POM for artifact[" + artifact.getId()
+                                + "] into the target repository.\n Error message: " + e.getMessage() );
+                    if ( !configuration.force() )
+                    {
+                        try
+                        {
+                            transaction.rollback();
+                        }
+                        catch ( RollbackException re )
+                        {
+                            repoReporter.error( "Error rolling back conversion transaction.", re );
+                        }
+                    }
+
-    private void bridgePomLocations( File targetPom, File bridgedTargetPom, Reporter reporter )
+    private boolean bridgePomLocations( File targetPom, File bridgedTargetPom, Reporter reporter )
+            
+            return false;
+        
+        return true;
-    private File normalizeReportsBase( String reportsPath )
+    private File formatReportsBase( String reportsPath )
-        File reportsBase = new File( reportsPath );
-        if ( !reportsBase.exists() )
-        {
-            logger.info( "Creating reports directory: \'" + reportsBase + "\'" );
+        SimpleDateFormat dateFormat = new SimpleDateFormat( REPORTS_DIR_DATE_FORMAT );
-            reportsBase.mkdirs();
-        }
-        else if ( !reportsBase.isDirectory() )
+        String subdir = dateFormat.format( new Date() );
+
+        File allReportsBase = new File( reportsPath );
+
+        File reportsBase = new File( allReportsBase, subdir );
+
+        if ( reportsBase.exists() && !reportsBase.isDirectory() )
+        else
+        {
+            logger.info( "Creating reports directory: \'" + reportsBase + "\'" );
+
+            reportsBase.mkdirs();
+        }
