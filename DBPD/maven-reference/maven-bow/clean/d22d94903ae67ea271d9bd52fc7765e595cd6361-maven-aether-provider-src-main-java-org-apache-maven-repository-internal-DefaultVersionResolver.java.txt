code simplification
+import java.io.InputStream;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
-        RequestTrace trace = DefaultRequestTrace.newChild( request.getTrace(), request );
-
+            RequestTrace trace = DefaultRequestTrace.newChild( request.getTrace(), request );
+
-        FileInputStream fis = null;
+        SyncContext syncContext = syncContextFactory.newInstance( session, true );
+
-            if ( metadata != null )
+            syncContext.acquire( null, Collections.singleton( metadata ) );
+
+            versioning = readMavenRepositoryMetadataVersioning( metadata.getFile() );
+
+            /*
+             * NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
+             * of the local repository. This is especially troublesome during snapshot resolution so we try
+             * to handle that gracefully.
+             */
+            if ( versioning != null && repository instanceof LocalRepository )
-                SyncContext syncContext = syncContextFactory.newInstance( session, true );
-
-                try
+                Snapshot snapshot = versioning.getSnapshot();
+                if ( snapshot != null && snapshot.getBuildNumber() > 0 )
-                    syncContext.acquire( null, Collections.singleton( metadata ) );
+                    Versioning repaired = new Versioning();
+                    repaired.setLastUpdated( versioning.getLastUpdated() );
+                    snapshot = new Snapshot();
+                    snapshot.setLocalCopy( true );
+                    repaired.setSnapshot( snapshot );
-                    if ( metadata.getFile() != null && metadata.getFile().exists() )
-                    {
-                        fis = new FileInputStream( metadata.getFile() );
-                        org.apache.maven.artifact.repository.metadata.Metadata m =
-                            new MetadataXpp3Reader().read( fis, false );
-                        versioning = m.getVersioning();
+                    versioning = repaired;
-                        /*
-                         * NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
-                         * of the local repository. This is especially troublesome during snapshot resolution so we try
-                         * to handle that gracefully.
-                         */
-                        if ( versioning != null && repository instanceof LocalRepository )
-                        {
-                            if ( versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0 )
-                            {
-                                Versioning repaired = new Versioning();
-                                repaired.setLastUpdated( versioning.getLastUpdated() );
-                                Snapshot snapshot = new Snapshot();
-                                snapshot.setLocalCopy( true );
-                                repaired.setSnapshot( snapshot );
-                                versioning = repaired;
-
-                                throw new IOException( "Snapshot information corrupted with remote repository data"
-                                    + ", please verify that no remote repository uses the id '" + repository.getId()
-                                    + "'" );
-                            }
-                        }
-                    }
-                }
-                finally
-                {
-                    syncContext.release();
+                    throw new IOException( "Snapshot information corrupted with remote repository data"
+                        + ", please verify that no remote repository uses the id '" + repository.getId()
+                        + "'" );
-            IOUtil.close( fis );
+            syncContext.release();
+    private Versioning readMavenRepositoryMetadataVersioning( File metadataFile )
+        throws IOException, XmlPullParserException
+    {
+        if ( metadataFile == null ||! metadataFile.exists() )
+        {
+            return null;
+        }
+
+        InputStream is = null;
+        try
+        {
+            is = new FileInputStream( metadataFile );
+
+            MetadataXpp3Reader reader = new MetadataXpp3Reader();
+            org.apache.maven.artifact.repository.metadata.Metadata m = reader.read( is, false );
+
+            return m.getVersioning();
+        }
+        finally
+        {
+            IOUtil.close( is );
+        }
+    }
+
