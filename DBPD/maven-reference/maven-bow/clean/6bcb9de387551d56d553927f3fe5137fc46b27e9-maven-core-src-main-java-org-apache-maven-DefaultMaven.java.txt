o created a separate plugin manager test and we see where we've got some methods that don't belong in the lifecycle executor. need to move getMojoDescriptor to the plugin manager, just leave the parsing and construction of the lookup key in the lifecycle executor


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@759502 13f79535-47bb-0310-9956-ffa450edef68

-                boolean usingReleasePom = false;
-
-                if ( RELEASE_POMv4.equals( file.getName() ) )
-                {
-                    logger.info( "NOTE: Using release-pom: " + file + " in reactor build." );
-
-                    usingReleasePom = true;
-                }
-
+                
-                            if ( usingReleasePom )
-                            {
-                                moduleFile = new File( basedir, name + "/" + Maven.RELEASE_POMv4 );
-                            }
-                            else
-                            {
-                                moduleFile = new File( basedir, name + "/" + Maven.POMv4 );
-                            }
+                            moduleFile = new File( basedir, name + "/" + Maven.POMv4 );
-            String includes = System.getProperty( "maven.reactor.includes", "**/" + POMv4 + ",**/" + RELEASE_POMv4 );
+            String includes = System.getProperty( "maven.reactor.includes", "**/" + POMv4 );
-            String excludes = System.getProperty( "maven.reactor.excludes", POMv4 + "," + RELEASE_POMv4 );
+            String excludes = System.getProperty( "maven.reactor.excludes", POMv4 );
-            filterOneProjectFilePerDirectory( files );
-
-            File projectFile = new File( userDir, RELEASE_POMv4 );
-
-            if ( !projectFile.exists() )
-            {
-                projectFile = new File( userDir, POMv4 );
-            }
-
+            File projectFile = new File( userDir, POMv4 );
+            
-
-    private void filterOneProjectFilePerDirectory( List files )
-    {
-        List releaseDirs = new ArrayList();
-
-        for ( Iterator it = files.iterator(); it.hasNext(); )
-        {
-            File projectFile = (File) it.next();
-
-            if ( RELEASE_POMv4.equals( projectFile.getName() ) )
-            {
-                releaseDirs.add( projectFile.getParentFile() );
-            }
-        }
-
-        for ( Iterator it = files.iterator(); it.hasNext(); )
-        {
-            File projectFile = (File) it.next();
-
-            // remove pom.xml files where there is a sibling release-pom.xml file...
-            if ( !RELEASE_POMv4.equals( projectFile.getName() ) && releaseDirs.contains( projectFile.getParentFile() ) )
-            {
-                it.remove();
-            }
-        }
-    }
-
+ 
