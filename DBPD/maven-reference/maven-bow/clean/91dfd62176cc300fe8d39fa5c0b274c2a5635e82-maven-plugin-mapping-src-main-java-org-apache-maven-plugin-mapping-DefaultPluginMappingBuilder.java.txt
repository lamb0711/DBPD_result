Working on: MNG-377

o Normalized all references to plugins to use either o.a.m.model.Plugin or o.a.m.plugin.PluginDescriptor instances

o Changed DefaultLifecycleExecutor, PluginManager, DefaultPluginManager, MavenPluginCollector, and DoxiaMojo to reflect the above

o Added mapped-plugin resolution of goal prefixes to the DefaultLifecycleExecutor

o Added caching of PluginMappingManager instance inside of MavenSession

o Modified SettingsUtils to be more resistant to null String-Lists for pluginGroups and activeProfiles during merge.

o Added checks to MavenProject.addPlugin(..) to only add if the plugin doesn't already exist in the model.

Next step is to modify installation and deployment process for plugins to publish plugins.xml repository metadata.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@209677 13f79535-47bb-0310-9956-ffa450edef68

-        for ( Iterator it = pluginGroupIds.iterator(); it.hasNext(); )
+        if ( pluginGroupIds != null )
-            String groupId = (String) it.next();
+            for ( Iterator it = pluginGroupIds.iterator(); it.hasNext(); )
+            {
+                String groupId = (String) it.next();
-            File mappingFile = resolveMappingMetadata( groupId, pluginRepositories, localRepository );
+                File mappingFile = resolveMappingMetadata( groupId, pluginRepositories, localRepository );
-            PluginMap pluginMap = readPluginMap( mappingFile );
-            
-            mappingManager.addPluginMap( pluginMap );
+                PluginMap pluginMap = readPluginMap( mappingFile );
+                
+                if ( pluginMap != null )
+                {
+                    mappingManager.addPluginMap( pluginMap );
+                }
+            }
-        Reader fileReader = null;
-        try
+        if( mappingFile.exists() )
-            fileReader = new FileReader( mappingFile );
+            Reader fileReader = null;
+            try
+            {
+                fileReader = new FileReader( mappingFile );
-            PluginMappingXpp3Reader mappingReader = new PluginMappingXpp3Reader();
-            
-            return mappingReader.read(fileReader);
+                PluginMappingXpp3Reader mappingReader = new PluginMappingXpp3Reader();
+                
+                return mappingReader.read(fileReader);
+            }
+            catch ( IOException e )
+            {
+                throw new PluginMappingManagementException( "Cannot read plugin mappings from: " + mappingFile, e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new PluginMappingManagementException( "Cannot parse plugin mappings from: " + mappingFile, e );
+            }
+            finally
+            {
+                IOUtil.close( fileReader );
+            }
-        catch ( IOException e )
+        else
-            throw new PluginMappingManagementException( "Cannot read plugin mappings from: " + mappingFile, e );
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new PluginMappingManagementException( "Cannot parse plugin mappings from: " + mappingFile, e );
-        }
-        finally
-        {
-            IOUtil.close( fileReader );
+            return null;
