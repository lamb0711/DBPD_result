Adding SettingsBuilderAdvice, to enable skipping default locations for settings files. Also, removing the settings cache, to enable call-by-call synchronization of settings between Maven embedder instances that share the same settings files. Next step is to refresh settings per-call to the embedder.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@511172 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.context.BuildContextManager;
-import org.apache.maven.settings.cache.SettingsCache;
+import org.apache.maven.settings.validation.SettingsValidationResult;
+import org.apache.maven.settings.validation.SettingsValidator;
+
-import org.apache.maven.settings.validation.SettingsValidationResult;
-import org.apache.maven.settings.validation.SettingsValidator;
-    
+
-    
-    private BuildContextManager buildContextManager;
-    
+
-        SettingsCache cache = SettingsCache.read( buildContextManager, userSettingsFile, globalSettingsFile );
-        
-        if ( cache != null )
-        {
-            return cache.getSettings();
-        }
-        
-        // NOTE: We're allowing users to hang themselves here...if the global settings file is null,
-        // the default location is NOT read.
-        Settings globalSettings = readSettings( globalSettingsFile );
-        
-        if ( userSettingsFile == null )
+        return buildSettings( userSettingsFile, globalSettingsFile, new SettingsBuilderAdvice() );
+    }
+
+    /**
+     * @since 2.1
+     */
+    public Settings buildSettings( File userSettingsFile, File globalSettingsFile, SettingsBuilderAdvice advice )
+        throws IOException, XmlPullParserException
+    {
+        if ( advice.isDefaultUserLocationEnabled() && userSettingsFile == null )
-        Settings userSettings = readSettings( userSettingsFile );
+        if ( advice.isDefaultGlobalLocationEnabled() && globalSettingsFile == null )
+        {
+            globalSettingsFile = DEFAULT_GLOBAL_SETTINGS_FILE;
+        }
+
+        if ( globalSettingsFile == null && userSettingsFile == null )
+        {
+            getLogger().debug(
+                               "No settings files provided, and default locations are disabled for this request. Returning empty Settings instance." );
+            return new Settings();
+        }
+
+        Settings globalSettings = readSettings( globalSettingsFile );
+        Settings userSettings = readSettings( userSettingsFile );
+
-
-            userSettings.setRuntimeInfo( new RuntimeInfo( userSettings ) );
-        
+
-        
+
-        
-        cache = new SettingsCache( userSettingsFile, globalSettingsFile, userSettings );
-        cache.store( buildContextManager );
-
-                        "Failed to initialize environment variable resolver. Skipping environment substitution in settings." );
+                                      "Failed to initialize environment variable resolver. Skipping environment substitution in settings." );
+                    
-                rtInfo.setFile( settingsFile );
+                rtInfo.addLocation( settingsFile.getAbsolutePath() );
+            catch ( XmlPullParserException e )
+            {
+                getLogger().error( "Failed to read settings from: " + settingsFile + ". Throwing XmlPullParserException..." );
+                
+                throw e;
+            }
+            catch ( IOException e )
+            {
+                getLogger().error( "Failed to read settings from: " + settingsFile + ". Throwing IOException..." );
+                
+                throw e;
+            }
-    
-    private void validateSettings(Settings settings, File location) throws IOException {
+
+    private void validateSettings( Settings settings, File location )
+        throws IOException
+    {
-            throw new IOException( "Failed to validate Settings file at " + location + 
-                                    "\n" + validationResult.render("\n") );
+            throw new IOException( "Failed to validate Settings file at " + location + "\n" + validationResult.render( "\n" ) );
-        
+
