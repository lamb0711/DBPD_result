o Refactoring: Moved one incorrectly placed method from BuildListCalculator to TaskSegmentCalculator

This method was creating a lot of strange internal dependencies since it was mis-placed

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@935741 13f79535-47bb-0310-9956-ffa450edef68

-@Component(role = LifecycleWeaveBuilder.class)
+@Component( role = LifecycleWeaveBuilder.class )
-    private Map<MavenProject, MavenExecutionPlan> executionPlans = new HashMap<MavenProject, MavenExecutionPlan>( );
+    private Map<MavenProject, MavenExecutionPlan> executionPlans = new HashMap<MavenProject, MavenExecutionPlan>();
-    @SuppressWarnings({"UnusedDeclaration"})
+    @SuppressWarnings( { "UnusedDeclaration" } )
-    public LifecycleWeaveBuilder(MojoExecutor mojoExecutor, BuilderCommon builderCommon, Logger logger,
-                                 ExecutionEventCatapult eventCatapult)
+    public LifecycleWeaveBuilder( MojoExecutor mojoExecutor, BuilderCommon builderCommon, Logger logger,
+                                  ExecutionEventCatapult eventCatapult )
-                    ThreadOutputMuxer muxer = null;  // new ThreadOutputMuxer( segmentChunks, System.out );
-                for (ProjectSegment segmentChunk : segmentChunks) {
+                for ( ProjectSegment segmentChunk : segmentChunks )
+                {
-                    if (artifact != null) {
-                        projectArtifacts.add( ArtifactUtils.key(artifact));
-                        projectArtifactsA.add( artifact);
+                    if ( artifact != null )
+                    {
+                        projectArtifacts.add( ArtifactUtils.key( artifact ) );
+                        projectArtifactsA.add( artifact );
-                        for (Artifact dependency : projectBuild.getProject().getDependencyArtifacts()) {
-                            String s = ArtifactUtils.key(dependency);
-                            if ( projectArtifacts.contains(s)){
-                                dependency.setFile( null);
-                                dependency.setResolved( false);
-                                dependency.setRepository( null);
+                        for ( Artifact dependency : projectBuild.getProject().getDependencyArtifacts() )
+                        {
+                            String s = ArtifactUtils.key( dependency );
+                            if ( projectArtifacts.contains( s ) )
+                            {
+                                dependency.setFile( null );
+                                dependency.setResolved( false );
+                                dependency.setRepository( null );
-                        
+
-                                                                    executionPlan, projectBuild, muxer,
-                                                                    dependencyContext, concurrentBuildLogger,
-                                                                    projectBuilds );
+                                                                    executionPlan, projectBuild, dependencyContext,
+                                                                    concurrentBuildLogger );
-                                                                             final ThreadOutputMuxer muxer,
-                                                                             final ConcurrentBuildLogger concurrentBuildLogger,
-                                                                             final ProjectBuildList projectBuilds )
+                                                                             final ConcurrentBuildLogger concurrentBuildLogger )
-                    while (current != null && !reactorBuildStatus.isHaltedOrBlacklisted( projectBuild.getProject() ))
+                    while ( current != null && !reactorBuildStatus.isHaltedOrBlacklisted( projectBuild.getProject() ) )
-                        buildExecutionPlanItem(current, phaseRecorder, schedule, reactorContext, projectBuild, dependencyContext);
+                        buildExecutionPlanItem( current, phaseRecorder, schedule, reactorContext, projectBuild,
+                                                dependencyContext );
-                                waitForAppropriateUpstreamExecutionsToFinish(builtLogItem, nextPlanItem, projectBuild);
+                                waitForAppropriateUpstreamExecutionsToFinish( builtLogItem, nextPlanItem,
+                                                                              projectBuild );
-                            reResolveReactorDependencies(nextPlanItem, projectBuild);
+                            reResolveReactorDependencies( nextPlanItem, projectBuild );
-                        new BuildSuccess( projectBuild.getProject(), wallClockTime ); // - waitingTime 
+                        new BuildSuccess( projectBuild.getProject(), wallClockTime ); // - waitingTime
-    private void reResolveReactorDependencies(ExecutionPlanItem nextPlanItem, ProjectSegment projectBuild) {
+    private void reResolveReactorDependencies( ExecutionPlanItem nextPlanItem, ProjectSegment projectBuild )
+    {
-            reresolveUpstreamProjectArtifacts(projectBuild);
+            reresolveUpstreamProjectArtifacts( projectBuild );
-        else if (requiresReResolutionOfUpstreamTestScopedReactorArtifacts( nextPlanItem))
+        else if ( requiresReResolutionOfUpstreamTestScopedReactorArtifacts( nextPlanItem ) )
-            reresolveUpstreamTestScopedArtifacts( projectBuild);
+            reresolveUpstreamTestScopedArtifacts( projectBuild );
-    private void waitForAppropriateUpstreamExecutionsToFinish(BuildLogItem builtLogItem, ExecutionPlanItem nextPlanItem, ProjectSegment projectBuild) throws InterruptedException {
+    private void waitForAppropriateUpstreamExecutionsToFinish( BuildLogItem builtLogItem,
+                                                               ExecutionPlanItem nextPlanItem,
+                                                               ProjectSegment projectBuild )
+        throws InterruptedException
+    {
-    private void reresolveUpstreamProjectArtifacts(ProjectSegment projectBuild) {
-        for ( MavenProject upstreamProject : projectBuild.getTransitiveUpstreamProjects() ){
+    private void reresolveUpstreamProjectArtifacts( ProjectSegment projectBuild )
+    {
+        for ( MavenProject upstreamProject : projectBuild.getTransitiveUpstreamProjects() )
+        {
-            Artifact dependencyArtifact =  findDependency(projectBuild.getProject(), upStreamArtifact);
-            if (dependencyArtifact != null){
-                dependencyArtifact.setFile( upStreamArtifact.getFile());
+            Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
+            if ( dependencyArtifact != null )
+            {
+                dependencyArtifact.setFile( upStreamArtifact.getFile() );
-                dependencyArtifact.setRepository( upStreamArtifact.getRepository());
+                dependencyArtifact.setRepository( upStreamArtifact.getRepository() );
-    private void reresolveUpstreamTestScopedArtifacts(ProjectSegment projectBuild) {
-        for ( MavenProject upstreamProject : projectBuild.getTransitiveUpstreamProjects() ){
-            Artifact upStreamArtifact = findTestScopedArtifact(upstreamProject);
-            Artifact dependencyArtifact =  findDependency(projectBuild.getProject(), upStreamArtifact);
-            if (dependencyArtifact != null){
-                dependencyArtifact.setFile( upStreamArtifact.getFile());
-                dependencyArtifact.setResolved( upStreamArtifact.isResolved());
-                dependencyArtifact.setRepository( upStreamArtifact.getRepository());
+    private void reresolveUpstreamTestScopedArtifacts( ProjectSegment projectBuild )
+    {
+        for ( MavenProject upstreamProject : projectBuild.getTransitiveUpstreamProjects() )
+        {
+            Artifact upStreamArtifact = findTestScopedArtifact( upstreamProject );
+            Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
+            if ( dependencyArtifact != null )
+            {
+                dependencyArtifact.setFile( upStreamArtifact.getFile() );
+                dependencyArtifact.setResolved( upStreamArtifact.isResolved() );
+                dependencyArtifact.setRepository( upStreamArtifact.getRepository() );
-    private Artifact findTestScopedArtifact(MavenProject upstreamProject) {
-        if ( upstreamProject == null){
+    private Artifact findTestScopedArtifact( MavenProject upstreamProject )
+    {
+        if ( upstreamProject == null )
+        {
-        
+
-        for (Artifact artifact : artifactList) {
-            if (Artifact.SCOPE_TEST.equals( artifact.getScope())){
+        for ( Artifact artifact : artifactList )
+        {
+            if ( Artifact.SCOPE_TEST.equals( artifact.getScope() ) )
+            {
-    private static Artifact findDependency(MavenProject project, Artifact upStreamArtifact) {
-        if (upStreamArtifact == null){
+    private static Artifact findDependency( MavenProject project, Artifact upStreamArtifact )
+    {
+        if ( upStreamArtifact == null )
+        {
-        
-        String key = ArtifactUtils.key( upStreamArtifact.getGroupId(),
-                                        upStreamArtifact.getArtifactId(),
+
+        String key = ArtifactUtils.key( upStreamArtifact.getGroupId(), upStreamArtifact.getArtifactId(),
-            String depKey = ArtifactUtils.key(dep.getGroupId(), dep.getArtifactId(), dep.getVersion());
+            String depKey = ArtifactUtils.key( dep.getGroupId(), dep.getArtifactId(), dep.getVersion() );
-        return "package".equals(phase) ||  "install".equals( phase ) || "compile".equals( phase );
+        return "package".equals( phase ) || "install".equals( phase ) || "compile".equals( phase );
-        return "package".equals(phase) || "install".equals( phase ) || "compile".equals( phase ) || "test-compile".equals( phase );
+        return "package".equals( phase ) || "install".equals( phase ) || "compile".equals( phase ) ||
+            "test-compile".equals( phase );
-    private void buildExecutionPlanItem(ExecutionPlanItem current, PhaseRecorder phaseRecorder, Schedule schedule, ReactorContext reactorContext, ProjectSegment projectBuild, DependencyContext dependencyContext) throws LifecycleExecutionException {
+    private void buildExecutionPlanItem( ExecutionPlanItem current, PhaseRecorder phaseRecorder, Schedule schedule,
+                                         ReactorContext reactorContext, ProjectSegment projectBuild,
+                                         DependencyContext dependencyContext )
+        throws LifecycleExecutionException
+    {
-                buildExecutionPlanItem( reactorContext, current, projectBuild, dependencyContext,
-                                        phaseRecorder );
+                buildExecutionPlanItem( reactorContext, current, projectBuild, dependencyContext, phaseRecorder );
-            buildExecutionPlanItem( reactorContext, current, projectBuild, dependencyContext,
-                                    phaseRecorder );
+            buildExecutionPlanItem( reactorContext, current, projectBuild, dependencyContext, phaseRecorder );
