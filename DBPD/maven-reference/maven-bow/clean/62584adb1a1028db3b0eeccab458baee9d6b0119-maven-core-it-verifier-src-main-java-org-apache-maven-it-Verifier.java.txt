make integration tests run under java


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163065 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayOutputStream;
+import java.io.FileInputStream;
-import java.io.FileInputStream;
+import java.io.PrintStream;
+import java.lang.reflect.Method;
-import java.util.Properties;
+import java.net.URLClassLoader;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
+ * @author <a href="mailto:brett@apache.org">Brett Porter</a>
-    private String basedir;
+    private static String localRepo;
-    private File homeDir;
+    private final String basedir;
-    private String localRepo;
+    private final ByteArrayOutputStream outStream = new ByteArrayOutputStream();
+    private final ByteArrayOutputStream errStream = new ByteArrayOutputStream();
-    public Verifier( String basedir, String homeDir )
+    private final PrintStream originalOut;
+    private final PrintStream originalErr;
+
+    public Verifier( String basedir )
-        this.homeDir = new File( homeDir );
+
+        originalOut = System.out;
+        System.setOut( new PrintStream( outStream ) );
+            
+        originalErr = System.err;
+        System.setErr( new PrintStream( errStream ) );
+    }
+
+    public void resetStreams()
+    {
+        System.setOut( originalOut );
+        System.setErr( originalErr );
+    }
+
+    public void displayStreamBuffers()
+    {
+        String out = outStream.toString();
+        if ( out != null && out.trim().length() > 0 )
+        {
+            System.out.println( "----- Standard Out -----" );
+            System.out.println( out );
+        }
+
+        String err = errStream.toString();
+        if ( err != null && err.trim().length() > 0 )
+        {
+            System.err.println( "----- Standard Error -----" );
+            System.err.println( err );
+        }
+        List lines = loadFile( basedir, "expected-results.txt" );
+        for ( Iterator i = lines.iterator(); i.hasNext(); )
+        {
+            String line = ( String ) i.next();
+            verifyExpectedResult( line );
+        }
+    }
+
+    private static List loadFile( String basedir, String filename ) throws VerificationException
+    {
+        return loadFile( new File( basedir, filename ) );
+    }
+
+    private static List loadFile( File file ) throws VerificationException
+    {
+        List lines = new ArrayList();
+
-            retrieveLocalRepo();
-
-            BufferedReader reader = new BufferedReader( new FileReader( new File( basedir, "expected-results.txt" ) ) );
+            BufferedReader reader = new BufferedReader( new FileReader( file ) );
-                verifyExpectedResult( line );
+                line = line.trim();
+                if ( line.startsWith( "#" ) || line.length() == 0 )
+                {
+                    continue;
+                }
+
+                line = replace( line, "${localRepository}", localRepo );
+                lines.add( line );
-
-        System.out.println( "-----------------------------------------------------------------------------------> OK" );
+        return lines;
-    private void retrieveLocalRepo() throws Exception
+    public void executeHook( String filename ) throws VerificationException
-        localRepo = System.getProperty( "maven.repo.local" );
-        if ( localRepo == null )
+        try
-            // parse ~/.m2/pom.xml for it...
-            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-            DocumentBuilder builder = factory.newDocumentBuilder();
+            File f = new File( basedir, filename );
+            if ( !f.exists() )
+            {
+                return;
+            }
-            File pom = new File( homeDir, ".m2/pom.xml" );
-            Document dom = builder.parse( pom );
-
-            localRepo = XPathAPI.selectSingleNode( dom, "/project/local/repository/text()" ).getNodeValue();
+            List lines = loadFile( f );
+ 
+            for ( Iterator i = lines.iterator(); i.hasNext(); )
+            {
+                String line = ( String ) i.next();
+                executeCommand( line );
+            }
+        catch ( VerificationException e )
+        {
+            throw e;
+        }
+        catch ( Exception e )
+        {
+            throw new VerificationException( e );
+        }
+    }
+
+    private static void executeCommand( String line ) throws VerificationException
+    {
+        int index = line.indexOf( " " );
+        String cmd;
+        String args = null;
+        if ( index >= 0 )
+        {
+            cmd = line.substring( 0, index );
+            args = line.substring( index + 1 );
+        }
+        else
+        {
+            cmd = line;
+        }
+
+        if ( cmd.equals( "rm" ) )
+        {
+            System.out.println( "Removing file: " + args );
+            File f = new File( args );
+            if ( f.exists() && !f.delete() )
+            {
+                throw new VerificationException( "Error removing file - delete failed" );
+            }
+        }
+        else
+        {
+            throw new VerificationException( "unknown command: " + cmd );
+        }
+    }
+
+    private static String retrieveLocalRepo()
+    {
+        String repo = System.getProperty( "maven.repo.local" );
+        if ( repo == null )
+        {
+            try
+            {
+                // parse ~/.m2/pom.xml for it...
+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+                DocumentBuilder builder = factory.newDocumentBuilder();
+    
+                File pom = new File( System.getProperty( "user.home" ), ".m2/pom.xml" );
+                Document dom = builder.parse( pom );
+    
+                repo = XPathAPI.selectSingleNode( dom, "/project/local/repository/text()" ).getNodeValue();
+            }
+            catch ( Exception e )
+            {
+                System.err.println( "WARNING: failed to parse user pom (ignoring): " + e.getMessage() );
+            }
+        }
+        if ( repo == null )
+        {
+            repo = System.getProperty( "user.home" ) + "/.m2/repository";
+        }
+        return repo;
-        line = replace( line, "${localRepository}", localRepo );
-
-            String urlString = "jar:file:" + line;
+            String urlString = "jar:file:" + basedir + "/" + line;
-            File expectedFile;
-
-            if ( line.startsWith( "/" ) )
+            File expectedFile = new File( line );
+            if ( !expectedFile.isAbsolute() && !line.startsWith( "/" ) )
-                expectedFile = new File( line );
-            }
-            else
-            {
-                if ( line.indexOf( ":" ) > 0 ) //windows
-                {
-                    expectedFile = new File( line );
-                }
-                else
-                {
-                    expectedFile = new File( basedir, line );
-                }
-            }
+                expectedFile = new File( basedir, line );
+            } 
+    public void executeGoals( String filename ) throws VerificationException
+    {
+        String mavenHome = System.getProperty( "maven.home" );
+        if ( mavenHome == null )
+        {
+            throw new VerificationException( "maven.home has not been specified" );
+        }
+
+        List goals = loadFile( basedir, filename );
+        if ( goals.size() == 0 )
+        {
+            throw new VerificationException( "No goals specified" );
+        }
+        List allGoals = new ArrayList();
+        allGoals.add( "clean:clean" );
+        allGoals.addAll( goals );
+
+        try 
+        {
+            String prevUserDir = System.getProperty( "user.dir" );
+            System.setProperty( "user.dir", basedir );
+            System.setProperty( "classworlds.conf", mavenHome + "/bin/classworlds.conf" );
+            URL classWorldsUrl = new URL( "file:" + mavenHome + "/core/classworlds-1.1-SNAPSHOT.jar" );
+            ClassLoader cl = URLClassLoader.newInstance( new URL[] { classWorldsUrl } );
+            Class c = Class.forName( "org.codehaus.classworlds.Launcher", true, cl );
+            Method m = c.getMethod( "main", new Class[] { String[].class } );
+            m.invoke( null, new Object[] { allGoals.toArray( new String[0] ) } );
+            System.setProperty( "user.dir", prevUserDir );
+        }
+        catch ( Exception e )
+        {
+            throw new VerificationException( e );
+        }
+    }
+
-        Verifier verifier = new Verifier( args[0], args[1] );
+        String basedir = System.getProperty( "user.dir" );
+        localRepo = retrieveLocalRepo();
-        try
+        List tests = null;
+        try 
-            verifier.verify();
+            tests = loadFile( basedir, "integration-tests.txt" );
-            System.out.println( e.getMessage() );
-
-            System.exit( 1 );
+            System.err.println( "Unable to load integration tests file" );
+            System.err.println( e.getMessage() );
+            System.exit( 2 );
-        System.exit( 0 );
+        if ( tests.size() == 0 )
+        {
+            System.out.println( "No tests to run" );
+        }
+
+        int exitCode = 0;
+
+        for ( Iterator i = tests.iterator(); i.hasNext(); )
+        {
+            String test = ( String ) i.next(); 
+
+            System.out.print( test + "... " );
+
+            Verifier verifier = new Verifier( basedir + "/" + test );
+
+            try
+            {
+                verifier.executeHook( "prebuild-hook.txt" );
+                verifier.executeGoals( "goals.txt" );
+                verifier.executeHook( "postbuild-hook.txt" );
+    
+                verifier.verify();
+
+                verifier.resetStreams();
+
+                System.out.println( "OK" );
+            }
+            catch ( VerificationException e )
+            {
+                verifier.resetStreams();
+
+                System.out.println( "FAILED" );
+
+                verifier.displayStreamBuffers();
+
+                e.printStackTrace();
+                exitCode = 1;
+            }
+        }
+        System.exit( exitCode );
-}
+}
+
