o fixed conditions under which error emails should be sent
o fixed emailing to contain a link to the report
o reformatted using IDEA
o removed directory tracking from transactions, b/c undo order is too tricky for now
o adjusted code to maven-artifact (post maven-project creation) changes.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@164705 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.construction.ArtifactConstructionSupport;
-import org.apache.maven.model.Model;
-import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
+import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.codehaus.plexus.util.IOUtil;
-import java.io.FileReader;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.StringTokenizer;
- * 
+ *
- * 
+ *
- * 
+ *
-public class DefaultArtifactDiscoverer
-    extends AbstractArtifactDiscoverer
+public class DefaultArtifactDiscoverer extends AbstractArtifactDiscoverer
-    private ArtifactConstructionSupport artifactConstructionSupport = new ArtifactConstructionSupport();
+    private ArtifactFactory artifactFactory;
-    public List discoverArtifacts( File repositoryBase, Reporter reporter, String blacklistedPatterns, PathLister excludeLister, PathLister kickoutLister )
+    public List discoverArtifacts( File repositoryBase, Reporter reporter, String blacklistedPatterns,
+                                   PathLister excludeLister, PathLister kickoutLister )
-        
+
-        int lastDot = path.lastIndexOf( '.' );
-
-        if ( lastDot < 0 )
+        List pathParts = new ArrayList();
+        StringTokenizer st = new StringTokenizer( path, "/" );
+        while ( st.hasMoreTokens() )
-            kickoutLister.addPath(path);
+            pathParts.add( st.nextToken() );
-        else
+
+        Collections.reverse( pathParts );
+
+        int currentPart = 0;
+
+        //discard the actual artifact filename.
+        pathParts.remove( 0 );
+
+        // the next one is the version.
+        String version = (String) pathParts.get( 0 );
+        pathParts.remove( 0 );
+
+        // the next one is the artifactId.
+        String artifactId = (String) pathParts.get( 0 );
+        pathParts.remove( 0 );
+
+        // the remaining are the groupId.
+        StringBuffer groupBuffer = new StringBuffer();
+
+        boolean firstPart = true;
+        for ( Iterator it = pathParts.iterator(); it.hasNext(); )
-            String pomPath = path.substring( 0, lastDot ) + ".pom";
+            String part = (String) it.next();
-            File pomFile = new File( repositoryBase, pomPath );
-            if ( pomFile.exists() )
+            groupBuffer.append( part );
+
+            if ( firstPart )
-                FileReader pomReader = null;
-                try
-                {
-                    pomReader = new FileReader( pomFile );
-                    MavenXpp3Reader modelReader = new MavenXpp3Reader();
-
-                    Model model = modelReader.read( pomReader );
-
-                    result = artifactConstructionSupport.createArtifact( model.getGroupId(), model.getArtifactId(),
-                                                                         model.getVersion(), Artifact.SCOPE_RUNTIME,
-                                                                         model.getPackaging() );
-                }
-                finally
-                {
-                    IOUtil.close( pomReader );
-                }
+                firstPart = false;
-            else
+            else if ( it.hasNext() )
-                kickoutLister.addPath(path);
+                groupBuffer.append( "." );
+        result = artifactFactory.createArtifact( groupBuffer.toString(), artifactId, version, Artifact.SCOPE_RUNTIME,
+                                                 "jar" );
+
