o found another untested path way which i'll make another test for tomorrow. executing one mojos work, but when stringing
  them together the optimization I'm trying to make for incremental support fails.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@753142 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.MalformedURLException;
-import org.apache.maven.realm.MavenRealmManager;
-import org.apache.maven.realm.RealmManagementException;
-import org.apache.maven.realm.RealmScanningUtils;
-        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidPluginException, PluginManagerException, PluginNotFoundException,
-        PluginVersionNotFoundException
+        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidPluginException, PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
-
+            
-        setDescriptorClassAndArtifactInfo( pluginDescriptor, project, session, new ArrayList() );
-
+    // We need to load different 
+    private Map<String,ClassRealm> pluginRealms = new HashMap<String,ClassRealm>();
+    
+    private String pluginKey( Plugin plugin )
+    {
+        return plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + plugin.getVersion();
+    }
+    
-        else if ( projectPlugin.getVersion() == null || Artifact.RELEASE_VERSION.equals( projectPlugin.getVersion() ) || Artifact.LATEST_VERSION.equals( projectPlugin.getVersion() ) )
+        else if ( projectPlugin.getVersion() == null || Artifact.RELEASE_VERSION.equals( projectPlugin.getVersion() ) )
-
-        Set<Artifact> artifactSet = getPluginArtifacts( pluginArtifact, projectPlugin, project, session.getLocalRepository() );
-
-        List<Artifact> artifacts = ( artifactSet == null || artifactSet.isEmpty() ) ? new ArrayList<Artifact>() : new ArrayList<Artifact>( artifactSet );
-
-        logger.debug( "Got plugin artifacts:\n\n" + artifacts );
-
-        MavenRealmManager realmManager = session.getRealmManager();
-        ClassRealm pluginRealm = realmManager.getPluginRealm( projectPlugin );
-        if ( pluginRealm == null )
-        {
-            try
-            {
-                pluginRealm = realmManager.createPluginRealm( projectPlugin, pluginArtifact, artifacts, coreArtifactFilterManager.getArtifactFilter() );
-                logger.debug( "Created realm: " + pluginRealm + " for plugin: " + projectPlugin.getKey() );
-            }
-            catch ( RealmManagementException e )
-            {
-                throw new PluginContainerException( plugin, "Failed to create realm for plugin '" + projectPlugin, e );
-            }
+        // associate the realm with the descriptor
+        
+        ClassRealm pluginRealm = pluginRealms.get( pluginKey( plugin ) );
+        
+        if ( pluginRealm == null )
+        {                        
+            pluginRealm = container.createChildRealm( pluginKey( plugin ) );    
+            Set<Artifact> pluginArtifacts = getPluginArtifacts( pluginArtifact, projectPlugin, project, session.getLocalRepository() );
+
+            for( Artifact a : pluginArtifacts )
+            {
+                try
+                {
+                    pluginRealm.addURL( a.getFile().toURI().toURL() );
+                }
+                catch ( MalformedURLException e )
+                {
+                    // Not going to happen
+                }
+            }
+                        
-                container.discoverComponents( pluginRealm );
+                container.discoverComponents( pluginRealm );                
-                realmManager.disposePluginRealm( projectPlugin );
-            pluginDescriptor.setPluginArtifact( pluginArtifact );
-
-            logger.debug( "Realm for plugin: " + plugin.getKey() + ":\n" + pluginRealm );
-        }
-        else
-        {
-            List<Artifact> managedPluginArtifacts = realmManager.getPluginArtifacts( projectPlugin );
-
-            if ( ( managedPluginArtifacts == null ) || ( managedPluginArtifacts.isEmpty() && !artifacts.isEmpty() ) )
-            {
-                realmManager.setPluginArtifacts( projectPlugin, artifacts );
-            }
+            pluginDescriptor.setPluginArtifact( pluginArtifact );            
+                        
+            pluginDescriptor.setClassRealm( pluginRealm );
+            
+            pluginRealms.put( pluginKey( plugin ), pluginRealm );
-            .setFilter( filter );
+            .setFilter( filter )
+            .setResolveRoot( false ); // We are setting this to false because the artifact itself has been resolved.
-
-    public void executeMojo( MavenProject project, MojoExecution mojoExecution )
-        throws MojoFailureException, PluginExecutionException, PluginConfigurationException
-    {
-    }    
+    
+    // We should assume that We've already loaded the plugin in question.
-            pluginRealm = pluginDescriptor.getClassRealm();
-
+            pluginRealm = pluginDescriptor.getClassRealm();            
+            
-    private Plugin createDummyPlugin( PluginDescriptor pluginDescriptor )
-    {
-        Plugin plugin = new Plugin();
-        plugin.setGroupId( pluginDescriptor.getGroupId() );
-        plugin.setArtifactId( pluginDescriptor.getArtifactId() );
-        plugin.setVersion( pluginDescriptor.getVersion() );
-
-        return plugin;
-    }
-
-        setDescriptorClassAndArtifactInfo( pluginDescriptor, project, session, realmActions );
-
-
-        if ( mojoDescriptor.isRequiresReports() )
-        {
-            Set reportDescriptors = session.getReportMojoDescriptors();
-
-            if ( ( reportDescriptors != null ) && !reportDescriptors.isEmpty() )
-            {
-                for ( Iterator it = reportDescriptors.iterator(); it.hasNext(); )
-                {
-                    MojoDescriptor reportDescriptor = (MojoDescriptor) it.next();
-                    setDescriptorClassAndArtifactInfo( reportDescriptor.getPluginDescriptor(), project, session, realmActions );
-                }
-            }
-        }
-
+        
-
+            System.out.println( pluginDescriptor );
+            
-    private void setDescriptorClassAndArtifactInfo( PluginDescriptor pluginDescriptor, MavenProject project, MavenSession session, List realmActions )
-    {
-        MavenRealmManager realmManager = session.getRealmManager();
-
-        ClassRealm projectRealm = realmManager.getProjectRealm( project.getGroupId(), project.getArtifactId(), project.getVersion() );
-        if ( projectRealm == null )
-        {
-            logger.debug( "Realm for project: " + project.getId() + " not found. Using container realm instead." );
-
-            projectRealm = container.getContainerRealm();
-        }
-
-        Plugin plugin = project.getPlugin( pluginDescriptor.getPluginLookupKey() );
-        if ( plugin == null )
-        {
-            plugin = createDummyPlugin( pluginDescriptor );
-        }
-
-        ClassRealm pluginRealm = realmManager.getPluginRealm( plugin );
-
-        if ( pluginRealm == null )
-        {
-            logger.debug( "Realm for plugin: " + pluginDescriptor.getId() + " not found. Using project realm instead." );
-
-            pluginRealm = projectRealm;
-            realmActions.add( new PluginRealmAction( pluginDescriptor ) );
-        }
-        else
-        {
-            pluginRealm.setParentRealm( projectRealm );
-            realmActions.add( new PluginRealmAction( pluginDescriptor, pluginRealm ) );
-        }
-
-        logger.debug( "Setting realm for plugin descriptor: " + pluginDescriptor.getId() + " to: " + pluginRealm );
-        pluginDescriptor.setClassRealm( pluginRealm );
-        pluginDescriptor.setArtifacts( realmManager.getPluginArtifacts( plugin ) );
-    }
-
-    // Plugin Manager Support
-
+    // We need to strip out the methods in here for a validation method.
-
-    public PluginDescriptor loadIsolatedPluginDescriptor( Plugin plugin, MavenProject project, MavenSession session )
-    {
-        if ( plugin.getVersion() == null )
-        {
-            try
-            {
-                plugin.setVersion( resolvePluginVersion( plugin.getGroupId(), plugin.getArtifactId(), project, session ) );
-            }
-            catch ( PluginVersionResolutionException e )
-            {
-                logger.debug( "Failed to load plugin descriptor for: " + plugin.getKey(), e );
-            }
-            catch ( InvalidPluginException e )
-            {
-                logger.debug( "Failed to load plugin descriptor for: " + plugin.getKey(), e );
-            }
-            catch ( PluginVersionNotFoundException e )
-            {
-                logger.debug( "Failed to load plugin descriptor for: " + plugin.getKey(), e );
-            }
-        }
-
-        if ( plugin.getVersion() == null )
-        {
-            return null;
-        }
-
-        Artifact artifact = null;
-        try
-        {
-            artifact = resolvePluginArtifact( plugin, project, session );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            logger.debug( "Failed to load plugin descriptor for: " + plugin.getKey(), e );
-        }
-        catch ( ArtifactNotFoundException e )
-        {
-            logger.debug( "Failed to load plugin descriptor for: " + plugin.getKey(), e );
-        }
-        catch ( PluginManagerException e )
-        {
-            logger.debug( "Failed to load plugin descriptor for: " + plugin.getKey(), e );
-        }
-        catch ( InvalidPluginException e )
-        {
-            logger.debug( "Failed to load plugin descriptor for: " + plugin.getKey(), e );
-        }
-        catch ( PluginVersionResolutionException e )
-        {
-            logger.debug( "Failed to load plugin descriptor for: " + plugin.getKey(), e );
-        }
-
-        if ( artifact == null )
-        {
-            return null;
-        }
-
-        MavenPluginDiscoverer discoverer = new MavenPluginDiscoverer();
-        discoverer.setManager( RealmScanningUtils.getDummyComponentDiscovererManager() );
-
-        try
-        {
-            List componentSetDescriptors =
-                RealmScanningUtils.scanForComponentSetDescriptors( artifact, discoverer, container.getContext(),
-                                                                   "Plugin: " + plugin.getKey() );
-
-            if ( !componentSetDescriptors.isEmpty() )
-            {
-                return (PluginDescriptor) componentSetDescriptors.get( 0 );
-            }
-        }
-        catch ( RealmManagementException e )
-        {
-            logger.debug( "Failed to scan plugin artifact: " + artifact.getId() + " for descriptors.", e );
-        }
-
-        return null;
-    }
