PR: MNG-926
Submitted by: Johnny R. Ruiz III
Reviewed by:  Brett Porter
assembly plugin documentation

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@290859 13f79535-47bb-0310-9956-ffa450edef68

+     * Predefined Assembly Descriptor Id's.  You can select bin, jar-with-dependencies, or src.
+     *
+     * Assembly XML Descriptor file.  This must be the path to your customized descriptor file.
+     *
+     * Base directory of the project.
+     *
-    
+
+     * The Maven Project.
+     *
+     * Maven ProjectHelper
+     *
+     * Temporary directory that contain the files to be assembled.
+     *
-
+    /**
+     * Create the binary distribution.
+     *
+     * @throws MojoExecutionException
+     */
+    /**
+     * Create the binary distribution.
+     *
+     * @throws ArchiverException, IOException, MojoExecutionException, XmlPullParserException
+     */
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-                
-                projectHelper.attachArtifact(project, format, format + "-assembly", destFile );
+
+                projectHelper.attachArtifact( project, format, format + "-assembly", destFile );
+    /**
+     * Processes Dependency Sets
+     *
+     * @param archiver
+     * @param dependencySets
+     * @param includeBaseDirectory
+     * @throws ArchiverException, IOException, MojoExecutionException
+     */
-            archiver.setDefaultDirectoryMode( Integer.parseInt( 
-                    dependencySet.getDirectoryMode(), 8 ) );
+            archiver.setDefaultDirectoryMode( Integer.parseInt( dependencySet.getDirectoryMode(), 8 ) );
-            archiver.setDefaultFileMode( Integer.parseInt( 
-                    dependencySet.getFileMode(), 8 ) );
+            archiver.setDefaultFileMode( Integer.parseInt( dependencySet.getFileMode(), 8 ) );
-            getLog().debug("DependencySet["+output+"]" +
-                " dir perms: " + Integer.toString( archiver.getDefaultDirectoryMode(), 8 ) +
-                " file perms: " + Integer.toString( archiver.getDefaultFileMode(), 8 ) );
+            getLog().debug( "DependencySet[" + output + "]" + " dir perms: " +
+                Integer.toString( archiver.getDefaultDirectoryMode(), 8 ) + " file perms: " +
+                Integer.toString( archiver.getDefaultFileMode(), 8 ) );
-                    
+
-        } 
+        }
-
+    /**
+     * Process Files that will be included in the distribution.
+     *
+     * @param archiver
+     * @param fileSets
+     * @param includeBaseDirecetory
+     * @throws ArchiverException
+     */
-            
+
-                
+
-            
-            archiver.setDefaultDirectoryMode( Integer.parseInt( 
-                    fileSet.getDirectoryMode(), 8 ) );
-            archiver.setDefaultFileMode( Integer.parseInt( 
-                    fileSet.getFileMode(), 8 ) );
-            
-            getLog().debug("FileSet["+output+"]" +
-                " dir perms: " + Integer.toString( archiver.getDefaultDirectoryMode(), 8 ) +
-                " file perms: " + Integer.toString( archiver.getDefaultFileMode(), 8 ) +
+            archiver.setDefaultDirectoryMode( Integer.parseInt( fileSet.getDirectoryMode(), 8 ) );
+
+            archiver.setDefaultFileMode( Integer.parseInt( fileSet.getFileMode(), 8 ) );
+
+            getLog().debug( "FileSet[" + output + "]" + " dir perms: " +
+                Integer.toString( archiver.getDefaultDirectoryMode(), 8 ) + " file perms: " +
+                Integer.toString( archiver.getDefaultFileMode(), 8 ) +
-    
+
-    
-            
+
-            
+
+    /**
+     * Evaluates Filename Mapping
+     *
+     * @param expression
+     * @param artifact
+     * @return expression
+     */
-    
-        String left,right;
+
+        String left, right;
-    
+
-            catch (Exception e)
+            catch ( Exception e )
-                throw new MojoExecutionException("Cannot evaluate filenameMapping", e);
+                throw new MojoExecutionException( "Cannot evaluate filenameMapping", e );
-    
+
-    
+
-    
+
-    
+
+    /**
+     * Get the files to be excluded and put it into list.
+     *
+     * @return l List of filename patterns to be excluded.
+     */
-    
+
+    /**
+     * Get the Output Directory by parsing the String output directory.
+     *
+     * @param output The string representation of the output directory.
+     * @param includeBaseDirectory True if base directory is to be included in the assembled file.
+     */
-    
+
-    
+
+    /**
+     * Creates the necessary archiver to build the distribution file.
+     *
+     * @param format Archive format
+     * @return archiver  Archiver generated
+     * @throws ArchiverException
+     */
-    
+
+    /**
+     * Insert into the exclude list the default excludes file pattern.
+     *
+     * @return defaultExcludes List containing the default patterns of files to be excluded.
+     */
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-        BufferedReader in = new BufferedReader( new FileReader ( source ) );
-        BufferedWriter out = new BufferedWriter ( new FileWriter( dest ) );
-        
+        BufferedReader in = new BufferedReader( new FileReader( source ) );
+        BufferedWriter out = new BufferedWriter( new FileWriter( dest ) );
+
-        
-        while ( ( line = in.readLine()) != null )
+
+        while ( ( line = in.readLine() ) != null )
-    
-    private void copySetReplacingLineEndings( File archiveBaseDir, File tmpDir, String[] includes, String[] excludes, String lineEnding )
+
+    private void copySetReplacingLineEndings( File archiveBaseDir, File tmpDir, String[] includes, String[] excludes,
+                                              String lineEnding )
-        
+
-        
-        for ( int j = 0; j < dirs.length; j ++)
+
+        for ( int j = 0; j < dirs.length; j ++ )
-    
+
-    
-        for ( int j = 0; j < files.length; j ++)
+
+        for ( int j = 0; j < files.length; j ++ )
-    
+
-            catch (IOException e)
+            catch ( IOException e )
-                throw new ArchiverException("Error copying file '" +
-                    files[j] + "' to '" + targetFile + "'", e);
+                throw new ArchiverException( "Error copying file '" + files[j] + "' to '" + targetFile + "'", e );
-    }	
+    }
-    
-                throw new ArchiverException( "Illlegal lineEnding specified: '" +
-                    lineEnding + "'");
+                throw new ArchiverException( "Illlegal lineEnding specified: '" + lineEnding + "'" );
-        
+
-    
+
