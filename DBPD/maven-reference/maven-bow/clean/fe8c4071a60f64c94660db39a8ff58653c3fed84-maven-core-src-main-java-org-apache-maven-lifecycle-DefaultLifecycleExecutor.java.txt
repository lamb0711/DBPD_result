Switching back to selectively import extensions into a project-specific ClassRealm, except this time extension realms will be shared (the origin of the aforementioned imports) to conserve memory tied up by classloading. Similarly, plugin realms are managed using a key produced from g:a:v of the plugin, plus the hashcode of all g:a:v of the plugin-level dependencies aggregated into one string, to distinguish the deploy plugin 2.0 with no deps from the deploy plugin 2.0 with a plugin-level dep on wagon-webdav. Plugin realms have their parent realms managed by the pluginManager now prior to lookup or execution of the mojo instance, and PluginDescriptor.(classRealm|artifacts) attributes are set for each execution. Likewise, the MavenPluginCollector now tracks plugin descriptors with their version information included, instead of just using g:a.

Had to bump the plexus-container-default version up to alpha-36 to fix a problem in ClassicSingletonComponentManager. All realms for extensions, plugins, and projects (which contain only imports from extensions) are now managed by the MavenRealmManager.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@591391 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.handler.ArtifactHandler;
-import org.apache.maven.model.Plugin;
-import org.apache.maven.plugin.InvalidPluginException;
-import org.apache.maven.plugin.PluginNotFoundException;
-import org.apache.maven.plugin.version.PluginVersionNotFoundException;
-import org.apache.maven.plugin.version.PluginVersionResolutionException;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-import java.util.HashMap;
-import java.util.Map;
-    /**
-     * @todo Not particularly happy about this. Would like WagonManager and ArtifactTypeHandlerManager to be able to
-     * lookup directly, or have them passed in
-     * @todo Move this sort of thing to the tail end of the project-building process
-     */
-    private Map findArtifactTypeHandlers( final MavenSession session )
-        throws LifecycleExecutionException, PluginNotFoundException
-    {
-        Map map = new HashMap();
-        for ( Iterator projectIterator = session.getSortedProjects().iterator(); projectIterator.hasNext(); )
-        {
-            MavenProject project = (MavenProject) projectIterator.next();
-
-            for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
-            {
-                Plugin plugin = (Plugin) i.next();
-
-                if ( plugin.isExtensions() )
-                {
-                    verifyPlugin(
-                        plugin,
-                        project,
-                        session );
-
-                    // TODO: if moved to the plugin manager we already have the descriptor from above and so do can
-                    // lookup the container directly
-                    try
-                    {
-                        Map components = pluginManager.getPluginComponents(
-                            plugin,
-                            ArtifactHandler.ROLE );
-                        map.putAll( components );
-                    }
-                    catch ( ComponentLookupException e )
-                    {
-                        getLogger().debug(
-                            "Unable to find the lifecycle component in the extension",
-                            e );
-                    }
-                    catch ( PluginManagerException e )
-                    {
-                        throw new LifecycleExecutionException(
-                            "Error looking up available components from plugin '"
-                                + plugin.getKey() + "': " + e.getMessage(),
-                                project,
-                            e );
-                    }
-
-                    // shudder...
-                    for ( Iterator j = map.values().iterator(); j.hasNext(); )
-                    {
-                        ArtifactHandler handler = (ArtifactHandler) j.next();
-                        if ( project.getPackaging().equals( handler.getPackaging() ) )
-                        {
-                            project.getArtifact().setArtifactHandler( handler );
-                        }
-                    }
-                }
-            }
-        }
-        return map;
-    }
-
-    private PluginDescriptor verifyPlugin( final Plugin plugin,
-                                           final MavenProject project,
-                                           final MavenSession session )
-        throws LifecycleExecutionException, PluginNotFoundException
-    {
-        getLogger().debug( "Verifying plugin: " + plugin.getKey() );
-
-        PluginDescriptor pluginDescriptor;
-        try
-        {
-            pluginDescriptor = pluginManager.verifyPlugin(
-                plugin,
-                project,
-                session );
-        }
-        catch ( PluginManagerException e )
-        {
-            throw new LifecycleExecutionException(
-                "Internal error in the plugin manager getting plugin '"
-                    + plugin.getKey() + "': " + e.getMessage(),
-                    project,
-                e );
-        }
-        catch ( PluginVersionResolutionException e )
-        {
-            throw new LifecycleExecutionException(
-                e.getMessage(),
-                project,
-                e );
-        }
-        catch ( InvalidPluginException e )
-        {
-            throw new LifecycleExecutionException(
-                e.getMessage(),
-                project,
-                e );
-        }
-        catch ( ArtifactNotFoundException e )
-        {
-            throw new LifecycleExecutionException(
-                e.getMessage(),
-                project,
-                e );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new LifecycleExecutionException(
-                e.getMessage(),
-                project,
-                e );
-        }
-        catch ( PluginVersionNotFoundException e )
-        {
-            throw new LifecycleExecutionException(
-                e.getMessage(),
-                project,
-                e );
-        }
-        return pluginDescriptor;
-    }
-
