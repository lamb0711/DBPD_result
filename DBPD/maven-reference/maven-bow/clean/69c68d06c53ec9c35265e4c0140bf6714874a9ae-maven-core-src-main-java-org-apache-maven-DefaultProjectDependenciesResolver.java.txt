[MNG-4633] Reactor artifact resolution in weave mode

Resolves artifacts from within reactor build.
No longer requires artifacts to be present in local repository before building weave mode ;)

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@935334 13f79535-47bb-0310-9956-ffa450edef68

-@Component(role=ProjectDependenciesResolver.class)
+@Component(role = ProjectDependenciesResolver.class)
-        return resolve( Collections.singleton( project ), scopesToCollect, scopesToResolve, session );
+        Set<MavenProject> mavenProjects = Collections.singleton( project );
+        return resolveImpl( mavenProjects, scopesToCollect, scopesToResolve, session,
+                            getIgnorableArtifacts( mavenProjects ) );
-        return resolve( projects, null, scopesToResolve, session );
+        return resolveImpl( projects, null, scopesToResolve, session, getIgnorableArtifacts( projects ) );
-    public Set<Artifact> resolve( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,
-                                  Collection<String> scopesToResolve, MavenSession session )
+    public Set<Artifact> resolve( MavenProject project, Collection<String> scopesToCollect,
+                                  Collection<String> scopesToResolve, MavenSession session,
+                                  Set<Artifact> ignoreableArtifacts )
+        throws ArtifactResolutionException, ArtifactNotFoundException
+    {
+        return resolveImpl( Collections.singleton( project ), scopesToCollect, scopesToResolve, session,
+                            getIgnorableArtifacts( ignoreableArtifacts ) );
+    }
+
+
+    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,
+                                       Collection<String> scopesToResolve, MavenSession session,
+                                       Set<String> projectIds )
-        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() )
-            && ( scopesToResolve == null || scopesToResolve.isEmpty() ) )
+        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() ) &&
+            ( scopesToResolve == null || scopesToResolve.isEmpty() ) )
-        
+
-         
+
-        
+
-        
+
-        
-        ArtifactFilter filter; 
+
+        ArtifactFilter filter;
-        }        
+        }
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
-            .setResolveRoot( false )
-            .setResolveTransitively( true )
-            .setCollectionFilter( collectionScopeFilter )
-            .setResolutionFilter( resolutionScopeFilter )
-            .setLocalRepository( session.getLocalRepository() )
-            .setOffline( session.isOffline() )
-            .setForceUpdate( session.getRequest().isUpdateSnapshots() )
-            .setCache( session.getRepositoryCache() );
+        ArtifactResolutionRequest request =
+            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true ).setCollectionFilter(
+                collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter ).setLocalRepository(
+                session.getLocalRepository() ).setOffline( session.isOffline() ).setForceUpdate(
+                session.getRequest().isUpdateSnapshots() ).setCache( session.getRepositoryCache() );
-        Set<String> projectIds = null;
-
-                if ( projectIds == null )
-                {
-                    projectIds = new HashSet<String>( projects.size() * 2 );
-
-                    for ( MavenProject p : projects )
-                    {
-                        String key = ArtifactUtils.key( p.getGroupId(), p.getArtifactId(), p.getVersion() );
-                        projectIds.add( key );
-                    }
-                }
+
+    private Set<String> getIgnorableArtifacts( Collection<? extends MavenProject> projects )
+    {
+        Set<String> projectIds = new HashSet<String>( projects.size() * 2 );
+
+        for ( MavenProject p : projects )
+        {
+            String key = ArtifactUtils.key( p.getGroupId(), p.getArtifactId(), p.getVersion() );
+            projectIds.add( key );
+        }
+        return projectIds;
+    }
+
+    private Set<String> getIgnorableArtifacts( Iterable<Artifact> artifactIterable )
+    {
+        Set<String> projectIds = new HashSet<String>();
+
+        for ( Artifact artifact : artifactIterable )
+        {
+            String key = ArtifactUtils.key( artifact );
+            projectIds.add( key );
+        }
+        return projectIds;
+    }
+
