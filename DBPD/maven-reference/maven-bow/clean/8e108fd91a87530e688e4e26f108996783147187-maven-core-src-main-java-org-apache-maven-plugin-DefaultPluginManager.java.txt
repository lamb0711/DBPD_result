o roll up all the plugin manager capability into one class. having a manager, a component discoverer, and component discovery listener is too complicated.
o using the a looking to set the discoverer and discovery listener. in plexus this can be rolled into one extender



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@762142 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.io.Reader;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.HashSet;
+import org.apache.maven.artifact.ArtifactUtils;
+import org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;
+import org.codehaus.plexus.component.discovery.ComponentDiscoverer;
+import org.codehaus.plexus.component.discovery.ComponentDiscovererManager;
+import org.codehaus.plexus.component.discovery.ComponentDiscoveryEvent;
+import org.codehaus.plexus.component.discovery.ComponentDiscoveryListener;
+import org.codehaus.plexus.component.repository.ComponentDescriptor;
+import org.codehaus.plexus.component.repository.ComponentSetDescriptor;
+import org.codehaus.plexus.context.Context;
+import org.codehaus.plexus.context.ContextMapAdapter;
+import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.InterpolationFilterReader;
+import org.codehaus.plexus.util.ReaderFactory;
+//TODO: get plugin groups
+//TODO: merge the plugin collector into the plugin manager
+//TODO: merge the plugin discovery listener into the plugin manager
-    implements PluginManager
+    implements PluginManager, ComponentDiscoverer, ComponentDiscoveryListener
-    protected MavenPluginCollector pluginCollector;
-
-    @Requirement
+    private Map<String, PluginDescriptor> pluginDescriptors;    
+    
+    public DefaultPluginManager()
+    {
+        System.out.println( "hello!!!!");
+        pluginDescriptors = new HashMap<String,PluginDescriptor>();        
+    }
+
+        //Use the plugin managers capabilities to get information to augement the request
+        
-        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( plugin );
+        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin );
+        System.out.println( "XXX plugin: " + plugin );
+        
-        {         
-            resolvePluginVersion( plugin, project, session );
-                                     
+        {                                              
-        catch ( PluginVersionResolutionException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( PluginManagerException e )
+        catch ( PluginVersionResolutionException e )
+        {
+            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
+        }
+        catch ( PluginContainerException e )
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException, InvalidPluginException, PluginVersionResolutionException
+        throws ArtifactNotFoundException, ArtifactResolutionException, InvalidPluginException, PluginVersionResolutionException, PluginContainerException, PluginVersionNotFoundException
+        resolvePluginVersion( plugin, project, session );
+        
+        System.out.println( "plugin: " + pluginArtifact );
+        
-        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( plugin );
+        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin );
+        
+        // We just need to keep track of the realm, if we need to augment we will wrap the realm
-                    try
+                        
+                    if ( ( child != null ) && ( child.getValue() != null ) )
+                        warnOfDeprecation = true;
+                    }
+                    else if ( param.getAlias() != null )
+                    {
+                        child = extractedMojoConfiguration.getChild( param.getAlias() );
-                        else if ( param.getAlias() != null )
-                        {
-                            child = extractedMojoConfiguration.getChild( param.getAlias() );
-                            if ( ( child != null ) && ( child.getValue() != null ) )
-                            {
-                                warnOfDeprecation = true;
-                            }
-                        }
-                    }
-                    catch ( PlexusConfigurationException e )
-                    {
-                        // forget it, this is just for deprecation checking, after all...
-            else
-            {
-                // TODO: I defy anyone to find these messages in the '-X' output! Do we need a new log level?
-                // ideally, this would be elevated above the true debug output, but below the default INFO level...
-                // [BP] (2004-07-18): need to understand the context more but would prefer this could be either WARN or
-                // removed - shouldn't need DEBUG to diagnose a problem most of the time.
-                logger.debug( "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'" + mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***" );
-            }
-    public void resolvePluginVersion( Plugin plugin, MavenProject project, MavenSession session )
-        throws PluginVersionResolutionException, InvalidPluginException, PluginVersionNotFoundException
+    public void resolvePluginVersion( Plugin plugin, MavenProject project, MavenSession session ) 
+        throws PluginVersionNotFoundException
-        // final pass...retrieve the version for RELEASE and also set that resolved version as the <useVersion/>
-        // in settings.xml.
+ 
+    // ----------------------------------------------------------------------
+    // Component Discovery
+    // ----------------------------------------------------------------------
+    private PluginDescriptorBuilder builder = new PluginDescriptorBuilder();
+
+    public String getComponentDescriptorLocation()
+    {
+        return "META-INF/maven/plugin.xml";
+    }
+
+    public ComponentSetDescriptor createComponentDescriptors( Reader componentDescriptorConfiguration, String source )
+        throws PlexusConfigurationException
+    {
+        return builder.build( componentDescriptorConfiguration, source );
+    }    
+
+    public List<ComponentSetDescriptor> findComponents( Context context, ClassRealm realm )
+        throws PlexusConfigurationException
+    {
+        System.out.println( "realm: " + realm );
+        
+        List<ComponentSetDescriptor> componentSetDescriptors = new ArrayList<ComponentSetDescriptor>();
+
+        Enumeration<URL> resources;
+        try
+        {
+            // We don't always want to scan parent realms. For plexus
+            // testcase, most components are in the root classloader so that needs to be scanned,
+            // but for child realms, we don't.
+            if ( realm.getParentRealm() != null )
+            {
+                resources = realm.findRealmResources( getComponentDescriptorLocation() );
+            }
+            else
+            {
+                resources = realm.findResources( getComponentDescriptorLocation() );
+            }
+        }
+        catch ( IOException e )
+        {
+            throw new PlexusConfigurationException( "Unable to retrieve resources for: " + getComponentDescriptorLocation() + " in class realm: " + realm.getId() );
+        }
+
+        for ( URL url : Collections.list( resources ) )
+        {
+            Reader reader = null;
+
+            try
+            {
+                URLConnection conn = url.openConnection();
+
+                conn.setUseCaches( false );
+
+                conn.connect();
+
+                reader = ReaderFactory.newXmlReader( conn.getInputStream() );
+
+                InterpolationFilterReader interpolationFilterReader = new InterpolationFilterReader( reader, new ContextMapAdapter( context ) );
+
+                ComponentSetDescriptor componentSetDescriptor = createComponentDescriptors( interpolationFilterReader, url.toString() );
+
+                if ( componentSetDescriptor.getComponents() != null )
+                {
+                    for ( ComponentDescriptor<?> cd : componentSetDescriptor.getComponents() )
+                    {
+                        cd.setComponentSetDescriptor( componentSetDescriptor );
+                        cd.setRealm( realm );
+                    }
+                }
+
+                componentSetDescriptors.add( componentSetDescriptor );
+
+                // Fire the event
+                ComponentDiscoveryEvent event = new ComponentDiscoveryEvent( componentSetDescriptor );
+
+                manager.fireComponentDiscoveryEvent( event );
+            }
+            catch ( IOException ex )
+            {
+                throw new PlexusConfigurationException( "Error reading configuration " + url, ex );
+            }
+            finally
+            {
+                IOUtil.close( reader );
+            }
+        }
+
+        return componentSetDescriptors;
+    }
+
+    public void setManager( ComponentDiscovererManager manager )
+    {
+        this.manager = manager;
+    }
+    
+    // ----------------------------------------------------------------------
+    // Component Discovery Listener
+    // ----------------------------------------------------------------------
+    
+    private Set pluginsInProcess = new HashSet();
+
+    private Map pluginIdsByPrefix = new HashMap();
+    
+    private ComponentDiscovererManager manager;
+    
+    public void componentDiscovered( ComponentDiscoveryEvent event )
+    {        
+        ComponentSetDescriptor componentSetDescriptor = event.getComponentSetDescriptor();
+
+        if ( componentSetDescriptor instanceof PluginDescriptor )
+        {
+            PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;            
+
+            String key = constructPluginKey( pluginDescriptor );
+            
+            if ( !pluginsInProcess.contains( key ) )
+            {
+                pluginsInProcess.add( key );
+
+                pluginDescriptors.put( key, pluginDescriptor );                
+            }
+        }
+    }
+
+    public String getId()
+    {
+        return "maven-plugin-collector";
+    }
+
+    public PluginDescriptor getPluginDescriptor( Plugin plugin )
+    {
+        return pluginDescriptors.get( constructPluginKey( plugin ) );
+    }
+
+    public Collection<PluginDescriptor> getPluginDescriptors()
+    {
+        return pluginDescriptors.values();    
+    }
+
+    private String constructPluginKey( Plugin plugin )
+    {
+        String version = ArtifactUtils.toSnapshotVersion( plugin.getVersion() );
+        return plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + version;
+    }
+
+    private String constructPluginKey( PluginDescriptor pluginDescriptor )
+    {
+        String version = ArtifactUtils.toSnapshotVersion( pluginDescriptor.getVersion() );
+        return pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId() + ":" + version;
+    }
+
+    public boolean isPluginInstalled( Plugin plugin )
+    {
+        String key = constructPluginKey( plugin );
+        return pluginDescriptors.containsKey( key );
+    }
+
+    public Set<PluginDescriptor> getPluginDescriptorsForPrefix( String prefix )
+    {
+        Set result = new HashSet();
+        for ( Iterator it = pluginDescriptors.values().iterator(); it.hasNext(); )
+        {
+            PluginDescriptor pd = (PluginDescriptor) it.next();
+            if ( pd.getGoalPrefix().equals( prefix ) )
+            {
+                result.add( pd );
+            }
+        }
+
+        return result;
+    }
