o Refactored the plugin extractors to accept a MavenProject only, and pull the information they need from it in order to extract the mojos they're responsible for.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163435 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.MavenProject;
-import org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor;
-import org.apache.maven.tools.plugin.util.PluginUtils;
+import org.apache.maven.tools.plugin.extractor.AbstractScriptedMojoDescriptorExtractor;
+import java.util.Iterator;
-    implements MojoDescriptorExtractor
+    extends AbstractScriptedMojoDescriptorExtractor
+    
+    protected String getScriptFileExtension()
+    {
+        return ".mmld";
+    }
-    public Set execute( String sourceDir, MavenProject project ) throws Exception
+    protected Set extractMojoDescriptors( Map sourceFilesKeyedByBasedir ) throws Exception
-            String[] files = PluginUtils.findSources( sourceDir, "**/*.mmld" );
-
-
-            File dir = new File( sourceDir );
-            for ( int i = 0; i < files.length; i++ )
+            
+            for ( Iterator mapIterator = sourceFilesKeyedByBasedir.entrySet().iterator(); mapIterator.hasNext(); )
-                String file = files[i];
-
-                File scriptFile = new File( dir, file );
+                Map.Entry entry = (Map.Entry) mapIterator.next();
-                MarmaladeScript script = parse(scriptFile);
+                String basedir = (String)entry.getKey();
+                Set scriptFiles = (Set)entry.getValue();
-                MarmaladeTag rootTag = script.getRoot();
-                if(rootTag instanceof MojoTag)
+                for ( Iterator it = scriptFiles.iterator(); it.hasNext(); )
-                    Map contextMap = new TreeMap();
-                    contextMap.put( MarmaladeMojoExecutionDirectives.SCRIPT_BASEPATH_INVAR, sourceDir );
+                    File scriptFile = (File) it.next();
-                    MarmaladeExecutionContext context = new DefaultContext(contextMap);
+                    MarmaladeScript script = parse(scriptFile);
-                    script.execute(context);
-                    
-                    contextMap = context.getExternalizedVariables();
-
-                    MojoDescriptor descriptor = (MojoDescriptor) contextMap.get( MarmaladeMojoExecutionDirectives.METADATA_OUTVAR );
-
-                    descriptors.add( descriptor );
-                }
-                else
-                {
-                    System.out.println("This script is not a mojo. Its root tag is {element: " + rootTag.getTagInfo().getElement() + ", class: " + rootTag.getClass().getName() + "}");
+                    MarmaladeTag rootTag = script.getRoot();
+                    if(rootTag instanceof MojoTag)
+                    {
+                        Map contextMap = new TreeMap();
+                        contextMap.put( MarmaladeMojoExecutionDirectives.SCRIPT_BASEPATH_INVAR, basedir );
+                        
+                        MarmaladeExecutionContext context = new DefaultContext(contextMap);
+                        
+                        script.execute(context);
+                        
+                        contextMap = context.getExternalizedVariables();
+    
+                        MojoDescriptor descriptor = (MojoDescriptor) contextMap.get( MarmaladeMojoExecutionDirectives.METADATA_OUTVAR );
+    
+                        descriptors.add( descriptor );
+                    }
+                    else
+                    {
+                        System.out.println("This script is not a mojo. Its root tag is {element: " + rootTag.getTagInfo().getElement() + ", class: " + rootTag.getClass().getName() + "}");
+                    }
