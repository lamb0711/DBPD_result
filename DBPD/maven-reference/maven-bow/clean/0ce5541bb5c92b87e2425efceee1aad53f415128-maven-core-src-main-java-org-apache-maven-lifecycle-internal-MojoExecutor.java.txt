[MNG-4795] [regression] Dependencies in forked reactor projects are not resolved when aggregator bound to lifecycle forks

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@996206 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.Artifact;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Set;
+import java.util.TreeSet;
-    public void execute( MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex,
-                         DependencyContext dependencyContext )
+    public DependencyContext newDependencyContext( MavenSession session, List<MojoExecution> mojoExecutions )
+    {
+        Set<String> scopesToCollect = new TreeSet<String>();
+        Set<String> scopesToResolve = new TreeSet<String>();
+
+        collectDependencyRequirements( scopesToResolve, scopesToCollect, mojoExecutions );
+
+        return new DependencyContext( session.getCurrentProject(), scopesToCollect, scopesToResolve );
+    }
+
+    private void collectDependencyRequirements( Set<String> scopesToResolve, Set<String> scopesToCollect,
+                                                Collection<MojoExecution> mojoExecutions )
+    {
+        for ( MojoExecution mojoExecution : mojoExecutions )
+        {
+            MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
+
+            scopesToResolve.addAll( toScopes( mojoDescriptor.getDependencyResolutionRequired() ) );
+
+            scopesToCollect.addAll( toScopes( mojoDescriptor.getDependencyCollectionRequired() ) );
+        }
+    }
+
+    private Collection<String> toScopes( String classpath )
+    {
+        if ( StringUtils.isNotEmpty( classpath ) )
+        {
+            if ( Artifact.SCOPE_COMPILE.equals( classpath ) )
+            {
+                return Arrays.asList( Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED );
+            }
+            else if ( Artifact.SCOPE_RUNTIME.equals( classpath ) )
+            {
+                return Arrays.asList( Artifact.SCOPE_COMPILE, Artifact.SCOPE_RUNTIME );
+            }
+            else if ( Artifact.SCOPE_COMPILE_PLUS_RUNTIME.equals( classpath ) )
+            {
+                return Arrays.asList( Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED,
+                                      Artifact.SCOPE_RUNTIME );
+            }
+            else if ( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM.equals( classpath ) )
+            {
+                return Arrays.asList( Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_RUNTIME );
+            }
+            else if ( Artifact.SCOPE_TEST.equals( classpath ) )
+            {
+                return Arrays.asList( Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED,
+                                      Artifact.SCOPE_RUNTIME, Artifact.SCOPE_TEST );
+            }
+        }
+        return Collections.emptyList();
+    }
+
+    public void execute( MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex )
+        DependencyContext dependencyContext = newDependencyContext( session, mojoExecutions );
+
+
-        lifeCycleDependencyResolver.checkForUpdate( session, dependencyContext );
+        List<MavenProject> forkedProjects = executeForkedExecutions( mojoExecution, session, projectIndex );
-        List<MavenProject> forkedProjects =
-            executeForkedExecutions( mojoExecution, session, projectIndex, dependencyContext );
+        ensureDependenciesAreResolved( mojoDescriptor, session, dependencyContext );
-        ArtifactFilter artifactFilter = getArtifactFilter( mojoDescriptor );
-        List<MavenProject> resolvedProjects =
-            LifecycleDependencyResolver.getProjects( session.getCurrentProject(), session,
-                                                     mojoDescriptor.isAggregator() );
-        for ( MavenProject project : resolvedProjects )
-        {
-            project.setArtifactFilter( artifactFilter );
-        }
-
+    private void ensureDependenciesAreResolved( MojoDescriptor mojoDescriptor, MavenSession session,
+                                                DependencyContext dependencyContext )
+        throws LifecycleExecutionException
+
+    {
+        MavenProject project = dependencyContext.getProject();
+        boolean aggregating = mojoDescriptor.isAggregator();
+
+        if ( dependencyContext.isResolutionRequiredForCurrentProject() )
+        {
+            Collection<String> scopesToCollect = dependencyContext.getScopesToCollectForCurrentProject();
+            Collection<String> scopesToResolve = dependencyContext.getScopesToResolveForCurrentProject();
+
+            lifeCycleDependencyResolver.resolveProjectDependencies( project, scopesToCollect, scopesToResolve, session,
+                                                                    aggregating, Collections.<Artifact> emptySet() );
+
+            dependencyContext.synchronizeWithProjectState();
+        }
+
+        if ( aggregating )
+        {
+            Collection<String> scopesToCollect = toScopes( mojoDescriptor.getDependencyCollectionRequired() );
+            Collection<String> scopesToResolve = toScopes( mojoDescriptor.getDependencyResolutionRequired() );
+
+            if ( dependencyContext.isResolutionRequiredForAggregatedProjects( scopesToCollect, scopesToResolve ) )
+            {
+                for ( MavenProject aggregatedProject : session.getProjects() )
+                {
+                    if ( aggregatedProject != project )
+                    {
+                        lifeCycleDependencyResolver.resolveProjectDependencies( aggregatedProject, scopesToCollect,
+                                                                                scopesToResolve, session, aggregating,
+                                                                                Collections.<Artifact> emptySet() );
+                    }
+                }
+            }
+        }
+
+        ArtifactFilter artifactFilter = getArtifactFilter( mojoDescriptor );
+        List<MavenProject> projectsToResolve =
+            LifecycleDependencyResolver.getProjects( session.getCurrentProject(), session,
+                                                     mojoDescriptor.isAggregator() );
+        for ( MavenProject projectToResolve : projectsToResolve )
+        {
+            projectToResolve.setArtifactFilter( artifactFilter );
+        }
+    }
+
-                                                        ProjectIndex projectIndex, DependencyContext dependencyContext )
+                                                       ProjectIndex projectIndex )
-            dependencyContext = dependencyContext.clone();
-
-                        execute( session, mojoExecutions, projectIndex, dependencyContext );
+                        execute( session, mojoExecutions, projectIndex );
