MNG-3182
MNG-3183

First cleanup of the logging code (it is still a mess), but all the console logging has been removed from the Maven component and pushed back
into the CLI code. As a result we now have a way to log to a file easily.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@572408 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.execution.BuildFailure;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.TimeZone;
-    private static final long MB = 1024 * 1024;
-
-    private static final int MS_PER_SEC = 1000;
-
-    private static final int SEC_PER_MIN = 60;
-
+
+            result.setReactorManager( reactorManager );
-        // old doExecute
-
-        if ( result.hasExceptions() )
-        {
-            for ( Iterator i = result.getExceptions().iterator(); i.hasNext(); )
-            {
-                Exception e = (Exception) i.next();
-
-                dispatcher.dispatchError(
-                    event,
-                    request.getBaseDirectory(),
-                    e );
-
-                logError(
-                    e,
-                    request.isShowErrors() );
-
-                stats( request.getStartTime() );
-
-                line();
-            }
-        }
-
-        // Either the build was successful, or it was a fail_at_end/fail_never reactor build
-
-        // TODO: should all the logging be left to the CLI?
-        logReactorSummary( reactorManager );
-
-        if ( reactorManager != null && reactorManager.hasBuildFailures() )
-        {
-            logErrors(
-                reactorManager,
-                request.isShowErrors() );
-
-            if ( !ReactorManager.FAIL_NEVER.equals( reactorManager.getFailureBehavior() ) )
-            {
-                dispatcher.dispatchError(
-                    event,
-                    request.getBaseDirectory(),
-                    null );
-
-                getLogger().info( "BUILD ERRORS" );
-
-                line();
-
-                stats( request.getStartTime() );
-
-                line();
-
-                result.addException( new MavenExecutionException( "Some builds failed" ) );
-
-                return result;
-            }
-            else
-            {
-                getLogger().info( " + Ignoring failures" );
-            }
-        }
-
-        logSuccess( reactorManager );
-
-        stats( request.getStartTime() );
-
-        line();
-
-        dispatcher.dispatchEnd(
-            event,
-            request.getBaseDirectory() );
-
-    private void logErrors( ReactorManager rm,
-                            boolean showErrors )
-    {
-        for ( Iterator it = rm.getSortedProjects().iterator(); it.hasNext(); )
-        {
-            MavenProject project = (MavenProject) it.next();
-
-            if ( rm.hasBuildFailure( project ) )
-            {
-                BuildFailure buildFailure = rm.getBuildFailure( project );
-
-                getLogger().info(
-                    "Error for project: " + project.getName() + " (during " + buildFailure.getTask() + ")" );
-
-                line();
-
-                logDiagnostics( buildFailure.getCause() );
-
-                logTrace(
-                    buildFailure.getCause(),
-                    showErrors );
-            }
-        }
-
-        if ( !showErrors )
-        {
-            getLogger().info( "For more information, run Maven with the -e switch" );
-
-            line();
-        }
-    }
-
-    private void logReactorSummaryLine( String name,
-                                        String status )
-    {
-        logReactorSummaryLine(
-            name,
-            status,
-            -1 );
-    }
-
-    private void logReactorSummaryLine( String name,
-                                        String status,
-                                        long time )
-    {
-        StringBuffer messageBuffer = new StringBuffer();
-
-        messageBuffer.append( name );
-
-        int dotCount = 54;
-
-        dotCount -= name.length();
-
-        messageBuffer.append( " " );
-
-        for ( int i = 0; i < dotCount; i++ )
-        {
-            messageBuffer.append( '.' );
-        }
-
-        messageBuffer.append( " " );
-
-        messageBuffer.append( status );
-
-        if ( time >= 0 )
-        {
-            messageBuffer.append( " [" );
-
-            messageBuffer.append( getFormattedTime( time ) );
-
-            messageBuffer.append( "]" );
-        }
-
-        getLogger().info( messageBuffer.toString() );
-    }
-
-    private static String getFormattedTime( long time )
-    {
-        String pattern = "s.SSS's'";
-        if ( time / 60000L > 0 )
-        {
-            pattern = "m:s" + pattern;
-            if ( time / 3600000L > 0 )
-            {
-                pattern = "H:m" + pattern;
-            }
-        }
-        DateFormat fmt = new SimpleDateFormat( pattern );
-        fmt.setTimeZone( TimeZone.getTimeZone( "UTC" ) );
-        return fmt.format( new Date( time ) );
-    }
-
-    // ----------------------------------------------------------------------
-    // Reporting / Logging
-    // ----------------------------------------------------------------------
-
-    protected void logFatal( Throwable error )
-    {
-        line();
-
-        getLogger().error( "FATAL ERROR" );
-
-        line();
-
-        logDiagnostics( error );
-
-        logTrace(
-            error,
-            true );
-    }
-
-    protected void logError( Exception e,
-                             boolean showErrors )
-    {
-        line();
-
-        getLogger().error( "BUILD ERROR" );
-
-        line();
-
-        logDiagnostics( e );
-
-        logTrace(
-            e,
-            showErrors );
-
-        if ( !showErrors )
-        {
-            getLogger().info( "For more information, run Maven with the -e switch" );
-
-            line();
-        }
-    }
-
-    protected void logFailure( BuildFailureException e,
-                               boolean showErrors )
-    {
-        line();
-
-        getLogger().error( "BUILD FAILURE" );
-
-        line();
-
-        logDiagnostics( e );
-
-        logTrace(
-            e,
-            showErrors );
-    }
-
-    private void logTrace( Throwable t,
-                           boolean showErrors )
-    {
-        if ( getLogger().isDebugEnabled() )
-        {
-            getLogger().debug(
-                "Trace",
-                t );
-
-            line();
-        }
-        else if ( showErrors )
-        {
-            getLogger().info(
-                "Trace",
-                t );
-
-            line();
-        }
-    }
-
-    private void logDiagnostics( Throwable t )
-    {
-        String message = null;
-        if ( errorDiagnostics != null )
-        {
-            message = errorDiagnostics.diagnose( t );
-        }
-
-        if ( message == null )
-        {
-            message = t.getMessage();
-        }
-
-        getLogger().info( message );
-
-        line();
-    }
-
-    protected void logSuccess( ReactorManager rm )
-    {
-        line();
-
-        getLogger().info( "BUILD SUCCESSFUL" );
-
-        line();
-    }
-
-    private void logReactorSummary( ReactorManager rm )
-    {
-        if ( rm != null && rm.hasMultipleProjects() && rm.executedMultipleProjects() )
-        {
-            getLogger().info( "" );
-            getLogger().info( "" );
-
-            // -------------------------
-            // Reactor Summary:
-            // -------------------------
-            // o project-name...........FAILED
-            // o project2-name..........SKIPPED (dependency build failed or was skipped)
-            // o project-3-name.........SUCCESS
-
-            line();
-            getLogger().info( "Reactor Summary:" );
-            line();
-
-            for ( Iterator it = rm.getSortedProjects().iterator(); it.hasNext(); )
-            {
-                MavenProject project = (MavenProject) it.next();
-
-                if ( rm.hasBuildFailure( project ) )
-                {
-                    logReactorSummaryLine(
-                        project.getName(),
-                        "FAILED",
-                        rm.getBuildFailure( project ).getTime() );
-                }
-                else if ( rm.isBlackListed( project ) )
-                {
-                    logReactorSummaryLine(
-                        project.getName(),
-                        "SKIPPED (dependency build failed or was skipped)" );
-                }
-                else if ( rm.hasBuildSuccess( project ) )
-                {
-                    logReactorSummaryLine(
-                        project.getName(),
-                        "SUCCESS",
-                        rm.getBuildSuccess( project ).getTime() );
-                }
-                else
-                {
-                    logReactorSummaryLine(
-                        project.getName(),
-                        "NOT BUILT" );
-                }
-            }
-            line();
-        }
-    }
-
-    protected void stats( Date start )
-    {
-        Date finish = new Date();
-
-        long time = finish.getTime() - start.getTime();
-
-        getLogger().info( "Total time: " + formatTime( time ) );
-
-        getLogger().info( "Finished at: " + finish );
-
-        //noinspection CallToSystemGC
-        System.gc();
-
-        Runtime r = Runtime.getRuntime();
-
-        getLogger().info(
-            "Final Memory: " + ( r.totalMemory() - r.freeMemory() ) / MB + "M/" + r.totalMemory() / MB + "M" );
-    }
-
-    protected void line()
-    {
-        getLogger().info( "------------------------------------------------------------------------" );
-    }
-
-    protected static String formatTime( long ms )
-    {
-        long secs = ms / MS_PER_SEC;
-
-        long min = secs / SEC_PER_MIN;
-
-        secs = secs % SEC_PER_MIN;
-
-        String msg = "";
-
-        if ( min > 1 )
-        {
-            msg = min + " minutes ";
-        }
-        else if ( min == 1 )
-        {
-            msg = "1 minute ";
-        }
-
-        if ( secs > 1 )
-        {
-            msg += secs + " seconds";
-        }
-        else if ( secs == 1 )
-        {
-            msg += "1 second";
-        }
-        else if ( min == 0 )
-        {
-            msg += "< 1 second";
-        }
-        return msg;
-    }
-
