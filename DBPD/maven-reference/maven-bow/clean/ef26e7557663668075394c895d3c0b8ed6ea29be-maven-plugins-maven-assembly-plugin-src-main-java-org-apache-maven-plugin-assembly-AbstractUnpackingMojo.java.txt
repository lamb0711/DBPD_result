PR: MNG-926
Submitted by: Johnny R. Ruiz III
Reviewed by:  Brett Porter
assembly plugin documentation

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@290859 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.AbstractMojo;
+import org.codehaus.plexus.util.IOUtil;
+
-import org.apache.maven.plugin.AbstractMojo;
-import org.codehaus.plexus.util.IOUtil;
-
- * Base routines for assembly and unpack goals
+ * Base routines for assembly and unpack goals.
+     * The output directory of the assembled distribution file.
+     *
+     * The filename of the assembled distribution file.
+     *
+     * Project dependencies.
+     *
-	 * Directory to unpack JARs into if needed
-	 * @parameter  expression="${project.build.directory}/assembly/work"
-	 * @required
-	 */
-	protected File workDirectory;
+     * Directory to unpack JARs into if needed
+     *
+     * @parameter expression="${project.build.directory}/assembly/work"
+     * @required
+     */
+    protected File workDirectory;
-	protected void unpack(File file, File location) throws IOException {
-		String fileName = file.getAbsolutePath().toLowerCase().trim();
-		// Should be checking for '.' too?
-		// Not doing this to be consistent with existing code
-		if ( fileName.endsWith( "jar" ) )
-		{
-			unpackJar( file, location );
-		}
-		else if( fileName.endsWith( "zip" ) )
-		{
-			unpackZip( file, location );
-		}
-	}
+    /**
+     * Unpacks the archive file.
+     *
+     * @param file File to be unpacked.
+     * @param location Location where to put the unpacked files.
+     * @throws IOException
+     */
+    protected void unpack( File file, File location )
+        throws IOException
+    {
+        String fileName = file.getAbsolutePath().toLowerCase().trim();
+        // Should be checking for '.' too?
+        // Not doing this to be consistent with existing code
+        if ( fileName.endsWith( "jar" ) )
+        {
+            unpackJar( file, location );
+        }
+        else if ( fileName.endsWith( "zip" ) )
+        {
+            unpackZip( file, location );
+        }
+    }
-	private void unpackJar( File file, File tempLocation )
-	    throws IOException
-	{
-	    if ( !file.getAbsolutePath().toLowerCase().trim().endsWith( "jar" ) )
-	    {
-	        getLog().warn( "Trying to unpack a non-jar file " + file.getAbsolutePath() + " - IGNORING" );
-	        return;
-	    }
-	
-	    JarFile jar = new JarFile( file );
-	    for ( Enumeration e = jar.entries(); e.hasMoreElements(); )
-	    {
-	        JarEntry entry = (JarEntry) e.nextElement();
-	
-	        if ( !entry.isDirectory() )
-	        {
-	            File outFile = new File( tempLocation, entry.getName() );
-	            outFile.getParentFile().mkdirs();
-	            IOUtil.copy( jar.getInputStream( entry ), new FileOutputStream( outFile ) );
-	        }
-	    }
-	}
+    /**
+     * Unpacks the Jar file.
+     *
+     * @param file File to be unpack/unjar.
+     * @param tempLocation Location where to put the unpacked files.
+     * @throws IOException
+     */
+    private void unpackJar( File file, File tempLocation )
+        throws IOException
+    {
+        if ( !file.getAbsolutePath().toLowerCase().trim().endsWith( "jar" ) )
+        {
+            getLog().warn( "Trying to unpack a non-jar file " + file.getAbsolutePath() + " - IGNORING" );
+            return;
+        }
-	private void unpackZip(File file, File tempLocation) throws IOException {
-	    if ( !file.getAbsolutePath().toLowerCase().trim().endsWith( "zip" ) )
-	    {
-	        getLog().warn( "Trying to unpack a non-zip file " + file.getAbsolutePath() + " - IGNORING" );
-	        return;
-	    }
-	
-	    ZipFile zip = new ZipFile( file );
-	    for ( Enumeration e = zip.entries(); e.hasMoreElements(); )
-	    {
-	        ZipEntry entry = (ZipEntry) e.nextElement();
-	
-	        if ( !entry.isDirectory() )
-	        {
-	            File outFile = new File( tempLocation, entry.getName() );
-	            outFile.getParentFile().mkdirs();
-	            IOUtil.copy( zip.getInputStream( entry ), new FileOutputStream( outFile ) );
-	        }
-	    }
-	}
+        JarFile jar = new JarFile( file );
+        for ( Enumeration e = jar.entries(); e.hasMoreElements(); )
+        {
+            JarEntry entry = (JarEntry) e.nextElement();
+
+            if ( !entry.isDirectory() )
+            {
+                File outFile = new File( tempLocation, entry.getName() );
+                outFile.getParentFile().mkdirs();
+                IOUtil.copy( jar.getInputStream( entry ), new FileOutputStream( outFile ) );
+            }
+        }
+    }
+
+    /**
+     * Unpacks the Zip file.
+     *
+     * @param file Zip file to be unpacked.
+     * @param tempLocation Location where to unpack the files.
+     * @throws IOException
+     */
+    private void unpackZip( File file, File tempLocation )
+        throws IOException
+    {
+        if ( !file.getAbsolutePath().toLowerCase().trim().endsWith( "zip" ) )
+        {
+            getLog().warn( "Trying to unpack a non-zip file " + file.getAbsolutePath() + " - IGNORING" );
+            return;
+        }
+
+        ZipFile zip = new ZipFile( file );
+        for ( Enumeration e = zip.entries(); e.hasMoreElements(); )
+        {
+            ZipEntry entry = (ZipEntry) e.nextElement();
+
+            if ( !entry.isDirectory() )
+            {
+                File outFile = new File( tempLocation, entry.getName() );
+                outFile.getParentFile().mkdirs();
+                IOUtil.copy( zip.getInputStream( entry ), new FileOutputStream( outFile ) );
+            }
+        }
+    }
