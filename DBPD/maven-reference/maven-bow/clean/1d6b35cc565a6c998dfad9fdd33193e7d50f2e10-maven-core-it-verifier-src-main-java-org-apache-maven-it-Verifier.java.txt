improve handling of metadata in verifier

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@280066 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.it.cli.CommandLineException;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.FileNotFoundException;
+import java.io.FilenameFilter;
+import java.net.MalformedURLException;
+import java.util.Collections;
+ * @noinspection UseOfSystemOutOrSystemErr,RefusedBequest
-        List lines = loadFile( basedir, "expected-results.txt" );
+        List lines = loadFile( basedir, "expected-results.txt", false );
-            lines = loadFile( basedir, LOG_FILENAME );
+            lines = loadFile( basedir, LOG_FILENAME, false );
+        catch ( FileNotFoundException e )
+        {
+            throw new VerificationException( "Error reading properties file", e );
+        }
-    private static List loadFile( String basedir, String filename )
+    private static List loadFile( String basedir, String filename, boolean hasCommand )
-        return loadFile( new File( basedir, filename ) );
+        return loadFile( new File( basedir, filename ), hasCommand );
-    private static List loadFile( File file )
+    private static List loadFile( File file, boolean hasCommand )
-                String line = "";
+                String line = reader.readLine();
-                while ( ( line = reader.readLine() ) != null )
+                while ( line != null )
-                    if ( line.startsWith( "#" ) || line.length() == 0 )
+                    if ( !line.startsWith( "#" ) && line.length() != 0 )
-                        continue;
+                        lines.addAll( replaceArtifacts( line, hasCommand ) );
-
-                    lines.add( replaceArtifacts( line ) );
+                    line = reader.readLine();
-            catch ( Exception e )
+            catch ( FileNotFoundException e )
+            {
+                throw new VerificationException( e );
+            }
+            catch ( IOException e )
-    private static String replaceArtifacts( String line )
+    private static List replaceArtifacts( String line, boolean hasCommand )
-            return newLine;
+            index = newLine.lastIndexOf( "SNAPSHOT" );
+            if ( index >= 0 )
+            {
+                List l = new ArrayList();
+                l.add( newLine );
+
+                int endIndex = newLine.lastIndexOf( '/' );
+
+                String command = null;
+                String filespec;
+                if ( hasCommand )
+                {
+                    int startIndex = newLine.indexOf( ' ' );
+
+                    command = newLine.substring( 0, startIndex );
+                    if ( "rm".equals( command ) )
+                    {
+                        l.add( newLine.substring( 0, index ) + "SNAPSHOT.version.txt" );
+                    }
+
+                    filespec = newLine.substring( startIndex + 1, endIndex );
+                }
+                else
+                {
+                    filespec = newLine;
+                }
+
+                File dir = new File( filespec );
+                if ( dir.exists() && dir.isDirectory() )
+                {
+                    String[] files = dir.list( new FilenameFilter()
+                    {
+                        public boolean accept( File dir, String name )
+                        {
+                            return name.startsWith( "maven-metadata" ) && name.endsWith( ".xml" );
+
+                        }
+                    } );
+
+                    for ( int i = 0; i < files.length; i++ )
+                    {
+                        if ( hasCommand )
+                        {
+                            l.add( command + " " + files[i] );
+                        }
+                        else
+                        {
+                            l.add( files[i] );
+                        }
+                    }
+                }
+
+                return l;
+            }
+            else
+            {
+                return Collections.singletonList( newLine );
+            }
-            return line;
+            return Collections.singletonList( line );
-//            if ( !a[3].equals( "pom" ) )
-//            {
-//            }
-            List lines = loadFile( f );
+            List lines = loadFile( f, true );
-            catch ( Exception e )
+            catch ( MalformedURLException e )
+            {
+                throw new VerificationException( "Error looking for JAR resource", e );
+            }
+            catch ( IOException e )
+                        System.err.println( "WARN: error closing stream: " + e );
-        List goals = loadFile( basedir, filename );
+        List goals = loadFile( basedir, filename, false );
-        List cliOptions = loadFile( basedir, "cli-options.txt" );
+        List cliOptions = loadFile( basedir, "cli-options.txt", false );
-        catch ( Exception e )
+        catch ( CommandLineException e )
+        {
+            throw new VerificationException( e );
+        }
+        catch ( IOException e )
+        catch ( FileNotFoundException e )
+        {
+            System.err.println( "Error: " + e );
+        }
-        throws VerificationException
-                tests = loadFile( basedir, "integration-tests.txt" );
+                tests = loadFile( basedir, "integration-tests.txt", false );
-            catch ( VerificationException e )
+            catch ( Throwable e )
-        private SAXParserFactory saxFactory;
-
-        public boolean parse( File file )
+        public void parse( File file )
+            throws VerificationException
-                saxFactory = SAXParserFactory.newInstance();
+                SAXParserFactory saxFactory = SAXParserFactory.newInstance();
-
-                return true;
-            catch ( Exception e )
+            catch ( FileNotFoundException e )
-                e.printStackTrace();
-
-                return false;
+                throw new VerificationException( e );
+            }
+            catch ( IOException e )
+            {
+                throw new VerificationException( e );
+            }
+            catch ( ParserConfigurationException e )
+            {
+                throw new VerificationException( e );
+            }
+            catch ( SAXException e )
+            {
+                throw new VerificationException( e );
