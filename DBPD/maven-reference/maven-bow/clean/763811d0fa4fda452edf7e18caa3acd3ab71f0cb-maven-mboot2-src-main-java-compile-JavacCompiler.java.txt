Added debug option to compiler configuration.
Copied compiler classes from plexus compiler.
Allow bootstrapping with debug info.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163301 13f79535-47bb-0310-9956-ffa450edef68

-package compile;
+/**
+ *
+ * Copyright 2004 The Apache Software Foundation
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
-import util.IsolatedClassLoader;
+package compile;
+import java.util.Iterator;
+import java.util.Map;
+import util.IsolatedClassLoader;
+
-    public List compile( String[] classpathElements, String[] sourceDirectories, String destinationDirectory )
-        throws Exception
+    public List compile( CompilerConfiguration config ) throws Exception
-        /*
-        for ( int i = 0; i < classpathElements.length; i++ )
-        {
-            System.out.println( "classpathElement = " + classpathElements[i] );
-        }
-        */
-
-        File destinationDir = new File( destinationDirectory );
+        File destinationDir = new File( config.getOutputLocation() );
-        String[] sources = getSourceFiles( sourceDirectories );
+        String[] sources = getSourceFiles( config );
-        int j = 5;
+        Map compilerOptions = config.getCompilerOptions();
-        String[] args = new String[sources.length + j];
+        List args = new ArrayList( sources.length + 5 + compilerOptions.size() * 2 );
-        args[0] = "-d";
+        args.add( "-d" );
-        args[1] = destinationDir.getAbsolutePath();
+        args.add( destinationDir.getAbsolutePath() );
-        args[2] = "-nowarn";
+        args.add( "-nowarn" );
-        args[3] = "-classpath";
+        args.add( "-classpath" );
-        args[4] = getClasspathString( classpathElements );
+        args.add( getClasspathString( config.getClasspathEntries() ) );
+
+        Iterator it = compilerOptions.entrySet().iterator();
+
+        while ( it.hasNext() )
+        {
+            Map.Entry entry = (Map.Entry) it.next();
+            args.add( entry.getKey() );
+            if ( (entry.getValue() != null) )
+                args.add( entry.getValue() );
+        }
-            args[i + j] = sources[i];
+            args.add( sources[i] );
-        Constructor cons = c.getConstructor( new Class[]{OutputStream.class, String.class} );
+        Constructor cons = c.getConstructor( new Class[] { OutputStream.class, String.class } );
-        Object compiler = cons.newInstance( new Object[]{err, "javac"} );
+        Object compiler = cons.newInstance( new Object[] { err, "javac" } );
-        Method compile = c.getMethod( "compile", new Class[]{String[].class} );
+        Method compile = c.getMethod( "compile", new Class[] { String[].class } );
-        Boolean ok = (Boolean) compile.invoke( compiler, new Object[]{args} );
+        Boolean ok = (Boolean) compile.invoke( compiler, new Object[] { args.toArray( new String[0] ) } );
-    protected List parseModernStream( BufferedReader input )
-        throws IOException
+    protected List parseModernStream( BufferedReader input ) throws IOException
-                if ( ( line = input.readLine() ) == null )
+                if ( (line = input.readLine()) == null )
-            }
-            while ( !line.endsWith( "^" ) );
+            } while ( !line.endsWith( "^" ) );
-}
+}
