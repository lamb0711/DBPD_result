o Removed GoalDecorationPhase, since goal decoration is now a part of the model
o Removed PluginDownloadPhase, since plugin resolution/download has to be a part of the prereq and pre/postGoal resolution, too
o Changed DefaultMaven to execute the session lifecycle, and the component wiring to likewise wire the DefaultMaven with a session lifecycle manager
o Removed the org.apache.maven.decoration package and its contents, since this is all in the model now
o Fixed the GoalResolutionPhase to verify each goal's plugin in turn as it resolves prereqs, preGoals and postGoals
o Fixed the GoalResolutionPhaseTest to work with the new resolution model
o Added a new createGoalExecutionContext to the MavenTestCase base class, to allow me to inject a MavenProject directly rather than a pom file
o Fixed the MavenLifecycleManagerTest to only expect 4 lifecycle phases, now than the plugin resolution and goal decoration phases are obsoleted
o All builds on local machine, but will depend on plexus-0.17.jar/pom and plexus-artifact-container-1.0-alpha-1.jar/pom to build on beaver
o I uploaded plexus-artifact-container-1.0-alpha-1.jar to ${plexus.home}/dist, but cannot upload POMs due to priveleges problem in poms dir.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163007 13f79535-47bb-0310-9956-ffa450edef68

- * Copyright 2001-2004 The Apache Software Foundation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Copyright 2001-2004 The Apache Software Foundation. Licensed under the Apache
+ * License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
+ * or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the specific language
+ * governing permissions and limitations under the License.
-    public void processPluginDescriptor( MavenPluginDescriptor mavenPluginDescriptor )
-        throws CycleDetectedException
+    public void processPluginDescriptor( MavenPluginDescriptor mavenPluginDescriptor ) throws CycleDetectedException
-    private boolean processEdge( String mojoId, String prereq )
-        throws CycleDetectedException
+    private boolean processEdge( String mojoId, String prereq ) throws CycleDetectedException
-        if ( !( componentSetDescriptor instanceof MavenPluginDescriptor ) )
+        if ( !(componentSetDescriptor instanceof MavenPluginDescriptor) )
-        return ( pluginDescriptors.get( pluginId ) != null );
+        return (pluginDescriptors.get( pluginId ) != null);
-    public void verifyPluginForGoal( String goalName )
-        throws Exception
+    public void verifyPluginForGoal( String goalName ) throws Exception
-            //!! This is entirely crappy. We need a better naming for plugin artifact ids and
+            //!! This is entirely crappy. We need a better naming for plugin
+            // artifact ids and
+
+            // Now, we need to resolve the plugins for this goal's prereqs.
+            MojoDescriptor mojoDescriptor = getMojoDescriptor( goalName );
+
+            List prereqs = mojoDescriptor.getPrereqs();
+
+            if ( prereqs != null )
+            {
+                for ( Iterator it = prereqs.iterator(); it.hasNext(); )
+                {
+                    String prereq = (String) it.next();
+
+                    verifyPluginForGoal( prereq );
+                }
+            }
-    public void addPlugin( Artifact pluginArtifact )
-        throws Exception
+    public void addPlugin( Artifact pluginArtifact ) throws Exception
-        MavenMetadataSource sr = new MavenMetadataSource( remotePluginRepositories,
-                                                          localRepository,
-                                                          artifactResolver );
+        MavenMetadataSource sr = new MavenMetadataSource( remotePluginRepositories, localRepository, artifactResolver );
-        String[] excludes = new String[]
-        {
-            "maven-core",
-            "maven-artifact",
-            "maven-model",
-            "maven-plugin",
-            "plexus",
-            "xstream",
-            "xpp3",
-            "classworlds",
-            "ognl"
-        };
+        String[] excludes = new String[] { "maven-core", "maven-artifact", "maven-model", "maven-plugin", "plexus",
+            "xstream", "xpp3", "classworlds", "ognl" };
-        container.addComponent( pluginArtifact,
-                                artifactResolver,
-                                remotePluginRepositories,
-                                localRepository,
-                                sr,
-                                excludes );
+        container.addComponent( pluginArtifact, artifactResolver, remotePluginRepositories, localRepository, sr,
+            excludes );
-    public void contextualize( Context context )
-        throws ContextException
+    public void contextualize( Context context ) throws ContextException
-    public void initialize()
-        throws Exception
+    public void initialize() throws Exception
-
