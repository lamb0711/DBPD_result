[MNG-5073] ProjectBuilder.build(File,ProjectBuildingRequest) returns null project if dependency version info is missing

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1176414 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+            Throwable error = null;
-                    throw new ProjectBuildingException( e.getModelId(), e.getMessage(), pomFile, e );
+                    result = e.getResult();
+                    if ( result == null || result.getEffectiveModel() == null )
+                    {
+                        throw new ProjectBuildingException( e.getModelId(), e.getMessage(), pomFile, e );
+                    }
+                    // validation error, continue project building and delay failing to help IDEs
+                    error = e;
-                try
-                {
-                    DefaultDependencyResolutionRequest resolution =
-                        new DefaultDependencyResolutionRequest( project, config.session );
-                    resolutionResult = dependencyResolver.resolve( resolution );
-                }
-                catch ( DependencyResolutionException e )
-                {
-                    resolutionResult = e.getResult();
-                }
-
-                Set<Artifact> artifacts = new LinkedHashSet<Artifact>();
-                if ( resolutionResult.getDependencyGraph() != null )
-                {
-                    RepositoryUtils.toArtifacts( artifacts, resolutionResult.getDependencyGraph().getChildren(),
-                                                 Collections.singletonList( project.getArtifact().getId() ), null );
-
-                    // Maven 2.x quirk: an artifact always points at the local repo, regardless whether resolved or not
-                    LocalRepositoryManager lrm = config.session.getLocalRepositoryManager();
-                    for ( Artifact artifact : artifacts )
-                    {
-                        if ( !artifact.isResolved() )
-                        {
-                            String path = lrm.getPathForLocalArtifact( RepositoryUtils.toArtifact( artifact ) );
-                            artifact.setFile( new File( lrm.getRepository().getBasedir(), path ) );
-                        }
-                    }
-                }
-                project.setResolvedArtifacts( artifacts );
-                project.setArtifacts( artifacts );
+                resolutionResult = resolveDependencies( project, config.session );
-            return new DefaultProjectBuildingResult( project, modelProblems, resolutionResult );
+            ProjectBuildingResult result = new DefaultProjectBuildingResult( project, modelProblems, resolutionResult );
+
+            if ( error != null )
+            {
+                ProjectBuildingException e = new ProjectBuildingException( Arrays.asList( result ) );
+                e.initCause( error );
+                throw e;
+            }
+
+            return result;
+    private DependencyResolutionResult resolveDependencies( MavenProject project, RepositorySystemSession session )
+    {
+        DependencyResolutionResult resolutionResult = null;
+
+        try
+        {
+            DefaultDependencyResolutionRequest resolution = new DefaultDependencyResolutionRequest( project, session );
+            resolutionResult = dependencyResolver.resolve( resolution );
+        }
+        catch ( DependencyResolutionException e )
+        {
+            resolutionResult = e.getResult();
+        }
+
+        Set<Artifact> artifacts = new LinkedHashSet<Artifact>();
+        if ( resolutionResult.getDependencyGraph() != null )
+        {
+            RepositoryUtils.toArtifacts( artifacts, resolutionResult.getDependencyGraph().getChildren(),
+                                         Collections.singletonList( project.getArtifact().getId() ), null );
+
+            // Maven 2.x quirk: an artifact always points at the local repo, regardless whether resolved or not
+            LocalRepositoryManager lrm = session.getLocalRepositoryManager();
+            for ( Artifact artifact : artifacts )
+            {
+                if ( !artifact.isResolved() )
+                {
+                    String path = lrm.getPathForLocalArtifact( RepositoryUtils.toArtifact( artifact ) );
+                    artifact.setFile( new File( lrm.getRepository().getBasedir(), path ) );
+                }
+            }
+        }
+        project.setResolvedArtifacts( artifacts );
+        project.setArtifacts( artifacts );
+
+        return resolutionResult;
+    }
+
