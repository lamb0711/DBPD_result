o Removed it0048, and replaced it with a unit test for the DefaultProfileInjector.
o Reverted the logic of the DefaultProfileInjector to merge-and-override the model, with the profile being dominant
o Added merging for distributionManagement and modules (conditionally, based on flag) in the modelBase merge
o Refactored the override logic into a couple of methods in ModelUtils to make it easier to understand what's going on here.
o Verified that both the build and the model itself are being merged correctly during profile injection, with profile dominance, but persistence of changes to the model.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@231481 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Build;
+import org.apache.maven.model.DistributionManagement;
+import org.apache.maven.model.Profile;
-    public static void mergeModelBases( ModelBase dominant, ModelBase recessive )
+    public static void mergeModelBases( ModelBase dominant, ModelBase recessive, boolean mergePathStructures )
+        if ( mergePathStructures )
+        {
+            mergeModules( dominant, recessive );
+        }
+        
+        
+        mergeDistributionManagementSections( dominant, recessive );
+    private static void mergeModules( ModelBase dominant, ModelBase recessive )
+    {
+        List modules = new ArrayList();
+        
+        List dominantModules = dominant.getModules();
+        
+        if ( dominantModules != null && !dominantModules.isEmpty() )
+        {
+            modules.addAll( dominantModules );
+        }
+        
+        List recessiveModules = recessive.getModules();
+        
+        if ( recessiveModules != null )
+        {
+            for ( Iterator it = recessiveModules.iterator(); it.hasNext(); )
+            {
+                String module = (String) it.next();
+                
+                if ( !modules.contains( module ) )
+                {
+                    modules.add( module );
+                }
+            }
+        }
+        
+        dominant.setModules( modules );
+    }
+
+    private static void mergeDistributionManagementSections( ModelBase dominant, ModelBase recessive )
+    {
+        DistributionManagement dDistMgmt = dominant.getDistributionManagement();
+        DistributionManagement rDistMgmt = recessive.getDistributionManagement();
+        
+        if ( dDistMgmt == null )
+        {
+            dominant.setDistributionManagement( rDistMgmt );
+        }
+        else if ( rDistMgmt != null )
+        {
+            if ( dDistMgmt.getRepository() == null )
+            {
+                dDistMgmt.setRepository( rDistMgmt.getRepository() );
+            }
+            
+            if ( dDistMgmt.getSnapshotRepository() == null )
+            {
+                dDistMgmt.setSnapshotRepository( rDistMgmt.getSnapshotRepository() );
+            }
+            
+            if ( StringUtils.isEmpty( dDistMgmt.getDownloadUrl() ) )
+            {
+                dDistMgmt.setDownloadUrl( rDistMgmt.getDownloadUrl() );
+            }
+            
+            if ( dDistMgmt.getRelocation() == null )
+            {
+                dDistMgmt.setRelocation( rDistMgmt.getRelocation() );
+            }
+            
+            if ( dDistMgmt.getSite() == null )
+            {
+                dDistMgmt.setSite( rDistMgmt.getSite() );
+            }
+            
+            if ( dDistMgmt.getStatus() == null )
+            {
+                dDistMgmt.setStatus( rDistMgmt.getStatus() );
+            }
+        }
+    }
+
+
+    public static void overrideModelBase( Model target, ModelBase overrides )
+    {
+        target.setDependencies( overrides.getDependencies() );
+        target.setDependencyManagement( overrides.getDependencyManagement() );
+        target.setDistributionManagement( overrides.getDistributionManagement() );
+        target.setModules( overrides.getModules() );
+        target.setPluginRepositories( overrides.getPluginRepositories() );
+        target.setReporting( overrides.getReporting() );
+        target.setRepositories( overrides.getRepositories() );
+    }
+
+    public static void overrideBuildBase( Build target, BuildBase overrides )
+    {
+        target.setDefaultGoal( overrides.getDefaultGoal() );
+        target.setFinalName( overrides.getFinalName() );
+        target.setPluginManagement( overrides.getPluginManagement() );
+        
+        target.setPlugins( overrides.getPlugins() );
+        target.flushPluginMap();
+        
+        target.setResources( overrides.getResources() );
+        target.setTestResources( overrides.getTestResources() );
+    }
