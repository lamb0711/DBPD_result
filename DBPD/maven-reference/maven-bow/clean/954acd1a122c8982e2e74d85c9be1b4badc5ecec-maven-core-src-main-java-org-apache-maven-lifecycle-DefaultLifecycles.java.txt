o Refactoring: Extracted schedules out of DefaultLifecycles

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@935341 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.lifecycle.internal.BuilderCommon;
-import org.apache.maven.lifecycle.internal.ExecutionPlanItem;
-import org.apache.maven.plugin.InvalidPluginDescriptorException;
-import org.apache.maven.plugin.MojoExecution;
-import org.apache.maven.plugin.MojoNotFoundException;
-import org.apache.maven.plugin.PluginDescriptorParsingException;
-import org.apache.maven.plugin.PluginNotFoundException;
-import org.apache.maven.plugin.PluginResolutionException;
-import org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException;
-import org.apache.maven.plugin.version.PluginVersionResolutionException;
-import org.apache.maven.project.MavenProject;
-    private List<Scheduling> schedules;
-
-    public DefaultLifecycles( Map<String, Lifecycle> lifecycles, List<Scheduling> schedules, Logger logger )
+    public DefaultLifecycles( Map<String, Lifecycle> lifecycles, Logger logger )
-        this.schedules = schedules;
-    public List<ExecutionPlanItem> createExecutionPlanItem( MavenProject mavenProject, List<MojoExecution> executions )
-        throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException,
-        PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException,
-        NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
-    {
-        BuilderCommon.attachToThread( mavenProject );
-
-        List<ExecutionPlanItem> result = new ArrayList<ExecutionPlanItem>();
-        for ( MojoExecution mojoExecution : executions )
-        {
-            String lifeCyclePhase = mojoExecution.getMojoDescriptor().getPhase();
-            final Scheduling scheduling = getScheduling( "default" );
-            Schedule schedule = null;
-            if ( scheduling != null )
-            {
-                schedule = scheduling.getSchedule( mojoExecution.getPlugin() );
-                if ( schedule == null )
-                {
-                    schedule = scheduling.getSchedule( lifeCyclePhase );
-                }
-            }
-            result.add( new ExecutionPlanItem( mojoExecution, schedule ) );
-
-        }
-        return result;
-    }
-
-    /**
-     * Gets scheduling associated with a given phase.
-     * <p/>
-     * This is part of the experimental weave mode and therefore not part of the public api.
-     *
-     * @param lifecyclePhaseName The name of the lifecycle phase
-     * @return Schecduling information related to phase
-     */
-
-    private Scheduling getScheduling( String lifecyclePhaseName )
-    {
-        for ( Scheduling schedule : schedules )
-        {
-            if ( lifecyclePhaseName.equals( schedule.getLifecycle() ) )
-            {
-                return schedule;
-            }
-        }
-        return null;
-    }
-
-     * 
+     *
-    public List<Scheduling> getSchedules()
-    {
-        return schedules;
-    }
-
