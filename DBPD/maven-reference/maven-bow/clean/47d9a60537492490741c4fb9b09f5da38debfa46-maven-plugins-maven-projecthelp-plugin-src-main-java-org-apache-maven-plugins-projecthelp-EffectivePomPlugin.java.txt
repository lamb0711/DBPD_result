Working on: MNG-786

o Changed the profile activation in it0075 to use a system property which is not always present

o Added projecthelp:active-profiles, package, and clean:clean to the goals list, in case it was only happening with the clean plugin

o Fixed the projecthelp mojos to be aggregators where appropriate

o Changed the ordering of modules in the profile injector (used to be that profile modules were prepended; now, they're appended)

NOTE: I still cannot reproduce the described behavior. Dan: Am I missing something WRT the test setup? I changed the activation trigger to be non-inherent, and I'm not using a boolean string to trigger the profile. What am I doing wrong??



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@292781 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.project.MavenProject;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.List;
+ * @aggregator
-    
+
-     * @parameter expression="${project.model}"
+     * @parameter expression="${reactorProjects}"
-    private Model pom;
-    
+    private List projects;
+
-     * @parameter
+     * @parameter expression="${output}"
-    private String output;
+    private File output;
-        StringWriter sWriter = new StringWriter();
+        StringBuffer message = new StringBuffer();
-        MavenXpp3Writer pomWriter = new MavenXpp3Writer();
-        
-        try
+        for ( Iterator it = projects.iterator(); it.hasNext(); )
-            pomWriter.write( sWriter, pom );
-        }
-        catch ( IOException e )
-        {
-            throw new MojoExecutionException( "Cannot serialize POM to XML.", e );
+            MavenProject project = (MavenProject) it.next();
+            
+            getEffectivePom( project, message );
+            
+            message.append( "\n\n" );
-        if( output != null && output.trim().length() > 0 )
+        if ( output != null )
-                File outFile = new File( output ).getAbsoluteFile();
-                
-                File dir = outFile.getParentFile();
-                
-                if( !dir.exists() )
+                File dir = output.getParentFile();
+
+                if ( !dir.exists() )
+
+                getLog().info( "Writing effective-POM to: " + output );
+
+                fWriter = new FileWriter( output );
+
+                fWriter.write( "Created by: " + getClass().getName() + "\n" );
+                fWriter.write( "Created on: " + new Date() + "\n\n" );
-                getLog().info( "Writing effective-POM to: " + outFile );
-                
-                fWriter = new FileWriter( outFile );
-                
-                fWriter.write( sWriter.toString() );
+                fWriter.write( message.toString() );
-                if( fWriter != null )
+                if ( fWriter != null )
-                    catch( IOException e )
+                    catch ( IOException e )
-            StringBuffer message = new StringBuffer();
-            
-            message.append( "\nEffective POM, after all profiles are factored in:\n\n" );
-            message.append( sWriter.toString() );
-            message.append( "\n\n" );
-            
+            StringBuffer formatted = new StringBuffer();
+
+            formatted.append( "\nEffective POMs, after inheritance, interpolation, and profiles are applied:\n\n" );
+            formatted.append( message.toString() );
+            formatted.append( "\n" );
+
-    protected final String getOutput()
+    private void getEffectivePom( MavenProject project, StringBuffer message ) 
+        throws MojoExecutionException
-        return output;
+        Model pom = project.getModel();
+
+        StringWriter sWriter = new StringWriter();
+
+        MavenXpp3Writer pomWriter = new MavenXpp3Writer();
+
+        try
+        {
+            pomWriter.write( sWriter, pom );
+            
+            message.append( "\n************************************************************************************" );
+            message.append( "\nEffective POM for project \'" + project.getId() + "\'" );
+            message.append( "\n************************************************************************************" );
+            message.append( "\n" );
+            message.append( sWriter.toString() );
+            message.append( "\n************************************************************************************" );
+        }
+        catch ( IOException e )
+        {
+            throw new MojoExecutionException( "Cannot serialize POM to XML.", e );
+        }
+
-    protected final void setOutput( String output )
+    protected final void setOutput( File output )
-    protected final Model getPom()
+    protected final void setProjects( List projects )
-        return pom;
-    }
-
-    protected final void setPom( Model pom )
-    {
-        this.pom = pom;
+        this.projects = projects;
