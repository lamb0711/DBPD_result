switched to mercury-alpha-7-SN dependency to enable managed version maps, the lifecycle UTs pass

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@763438 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
+import org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter;
-                                                   List<ArtifactRepository> remoteRepositories,
+                                                   List<?> remoteRepositories,
-            for ( ArtifactRepository ar : remoteRepositories )
+            for ( Object o : remoteRepositories )
-                String url = ar.getUrl();
+                String url;
+                String id;
+                
+                if( ArtifactRepository.class.isAssignableFrom( o.getClass() ))
+                {
+                    ArtifactRepository ar = (ArtifactRepository) o;
+                    url = ar.getUrl();
+                    id = ar.getId();
+                }
+                else if( org.apache.maven.model.Repository.class.isAssignableFrom( o.getClass() ))
+                {
+                    org.apache.maven.model.Repository ar = (org.apache.maven.model.Repository) o;
+                    url = ar.getUrl();
+                    id = ar.getId();
+                }
+                else
+                    throw new IllegalArgumentException( "found illegal class in the remote repository list - " + o.getClass().getName() );
-                        server = new Server( ar.getId(), new URL( url ) );
+                        server = new Server( id, new URL( url ) );
-    public static ArtifactMetadata toMercuryBasicMetadata( Artifact a )
+    private static void setInExClusion( ArtifactMetadata md, List<String> patterns, boolean inc )
-        ArtifactMetadata md = new ArtifactMetadata();
-        md.setGroupId( a.getGroupId() );
-        md.setArtifactId( a.getArtifactId() );
-        md.setVersion( a.getVersion() );
-        md.setType( a.getType() );
-        md.setScope( a.getScope() );
-
-        return md;
+        if( Util.isEmpty( patterns ) )
+            return;
+        
+        List<ArtifactMetadata> lusions = new ArrayList<ArtifactMetadata>( patterns.size() );
+        
+        for( String pattern : patterns )
+            lusions.add( new ArtifactMetadata(pattern) );
+        
+        if( inc )
+            md.setInclusions( lusions );
+        else
+            md.setExclusions( lusions );
-
+    
-
+        
+        if( "test-jar".equals( a.getType() ) )
+        {
+            md.setType( "jar" );
+            md.setClassifier( "tests" );
+        }
+        
+        ArtifactFilter af = a.getDependencyFilter();
+        
+        if( af != null )
+        {
+            if( ExcludesArtifactFilter.class.isAssignableFrom( af.getClass() ) )
+            {
+                setInExClusion( md, ((ExcludesArtifactFilter)af).getPatterns(), false );
+            }
+            else if( IncludesArtifactFilter.class.isAssignableFrom( af.getClass() ) )
+                {
+                    setInExClusion( md, ((IncludesArtifactFilter)af).getPatterns(), true );
+                }
+        }
-        Artifact ma = a.getClassifier() == null 
-                        ? af.createArtifact( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getScope(), a.getType() )
-                        : af.createArtifactWithClassifier( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getType(), a.getClassifier() )
+        boolean isTestJar = "test-jar".equals( a.getType() );
+        
+        String type = isTestJar ? "jar" : a.getType();
+        
+        String classifier = isTestJar ? "tests" : a.getType();
+        
+        Artifact ma = classifier == null 
+                        ? af.createArtifact( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getScope(), type )
+                        : af.createArtifactWithClassifier( a.getGroupId(), a.getArtifactId(), a.getVersion(), type, classifier )
-        ma.setResolved( true );
+        ma.setResolved( a.getFile() != null );
-        Artifact ma = a.getClassifier() == null 
-                                ? af.createArtifact( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getScope(), a.getType() )
-                                : af.createArtifactWithClassifier( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getType(), a.getClassifier() )
+        boolean isTestJar = "test-jar".equals( a.getType() );
+        
+        String type = isTestJar ? "jar" : a.getType();
+        
+        String classifier = isTestJar ? "tests" : a.getType();
+        
+        Artifact ma = classifier == null 
+                                ? af.createArtifact( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getScope(), type )
+                                : af.createArtifactWithClassifier( a.getGroupId(), a.getArtifactId(), a.getVersion(), type, classifier )
+        
+        if( "test-jar".equals( md.getType() ) )
+        {
+            mmd.setType( "jar" );
+            mmd.setClassifier( "tests" );
+        }
+        
+        if( "test-jar".equals( md.getType() ) )
+        {
+            mmd.setType( "jar" );
+            mmd.setClassifier( "tests" );
+        }
+        
+        if( "test-jar".equals( md.getType() ) )
+        {
+            mmd.setType( "jar" );
+            mmd.setClassifier( "tests" );
+        }
-        if( "org.apache.maven.plugins:maven-remote-resources-plugin".equals( 
-                                                      reqArtifact.getGroupId()+":"+reqArtifact.getArtifactId() 
-                                                                           )
-        ) scopeStr = null;
+//        if( "org.apache.maven.plugins:maven-remote-resources-plugin".equals( 
+//                                                      reqArtifact.getGroupId()+":"+reqArtifact.getArtifactId() 
+//                                                                           )
+//        ) scopeStr = null;
+            else if( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM.equals( scopeStr ) )
+                return ArtifactScopeEnum.runtime;
+    
+    public static Map<String,ArtifactMetadata> toMercuryVersionMap(Map<String,Artifact> map  )
+    {
+        if( Util.isEmpty( map ) )
+            return null;
+        
+        Map<String,ArtifactMetadata> res = new HashMap<String, ArtifactMetadata>( map.size() );
+        
+        for( Entry<String, Artifact> e : map.entrySet() )
+        {
+            res.put( e.getKey(), toMercuryMetadata( e.getValue() ) );
+        }
+        
+        return res;
+    }
