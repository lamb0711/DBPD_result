o Did some refactoring: moving utility methods to EclipseUtils so there's no
  confusion as to which project is used.

o Use executedProject everywhere except for acquiring the artifact list; the 
  executedProject misses that list (that's because no deps are resolved in
  the forked lifecycle execution; it's delayed until the plugin is encountered
  and it's requiresDependencyResolution is seen.)

o Added flag -Declipse.downloadSources=true|false to skip source downloading


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@289188 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-import java.util.TreeSet;
-
-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.model.Resource;
-import org.codehaus.plexus.util.StringUtils;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
-
-    /**
-     * Separator used for natures, builders, etc. (can't use space since conclasspath entries can contain spaces).
-     */
-    private static final String LIST_SEPARATOR = ","; //$NON-NLS-1$
-
+     * Disables the downloading of source attachments.
+     * 
+     * @parameter expression="${eclipse.downloadSources}"
+     */
+    private boolean downloadSources = true;
+
+    /**
-
-        assertNotEmpty( project.getGroupId(), "groupId" ); //$NON-NLS-1$
-        assertNotEmpty( project.getArtifactId(), "artifactId" ); //$NON-NLS-1$
+        if ( executedProject == null )
+        {
+            // backwards compat with alpha-2 only
+            executedProject = project;
+        }
+    	
+        assertNotEmpty( executedProject.getGroupId(), "groupId" ); //$NON-NLS-1$
+        assertNotEmpty( executedProject.getArtifactId(), "artifactId" ); //$NON-NLS-1$
+
+
-        if ( project.getFile() == null || !project.getFile().exists() )
+        if ( executedProject.getFile() == null || !executedProject.getFile().exists() )
-        if ( "pom".equals( project.getPackaging() ) ) //$NON-NLS-1$
+        if ( "pom".equals( executedProject.getPackaging() ) && outputDir == null ) //$NON-NLS-1$
-            outputDir = project.getFile().getParentFile();
+            outputDir = executedProject.getFile().getParentFile();
-        else if ( !outputDir.equals( project.getFile().getParentFile() ) )
+        else if ( !outputDir.equals( executedProject.getFile().getParentFile() ) )
-            outputDir = new File( outputDir, project.getArtifactId() );
+            outputDir = new File( outputDir, executedProject.getArtifactId() );
-        if ( executedProject == null )
-        {
-            // backwards compat with alpha-2 only
-            executedProject = project;
-        }
-
-
-        File projectBaseDir = project.getFile().getParentFile();
+        File projectBaseDir = executedProject.getFile().getParentFile();
-        List reactorArtifacts = resolveReactorArtifacts();
+        List reactorArtifacts = EclipseUtils.resolveReactorArtifacts( project, reactorProjects );
-        EclipseSourceDir[] sourceDirs = buildDirectoryList( project, outputDir );
+        EclipseSourceDir[] sourceDirs = EclipseUtils.buildDirectoryList( executedProject, outputDir, getLog() );
+        // use project since that one has all artifacts resolved.
-                                                      artifactFactory, remoteArtifactRepositories );
+                                                      artifactFactory, remoteArtifactRepositories, downloadSources );
-        new EclipseSettingsWriter( getLog() ).write( projectBaseDir, outputDir, project, executedProject );
+        new EclipseSettingsWriter( getLog() ).write( projectBaseDir, outputDir, executedProject );
-        new EclipseWtpmodulesWriter( getLog() ).write( outputDir, project, reactorArtifacts, sourceDirs,
+        new EclipseWtpmodulesWriter( getLog() ).write( outputDir, executedProject, reactorArtifacts, sourceDirs,
-
-    private EclipseSourceDir[] buildDirectoryList( MavenProject project, File basedir )
-    {
-        File projectBaseDir = project.getFile().getParentFile();
-
-        // avoid duplicated entries
-        Set directories = new TreeSet();
-
-        extractSourceDirs( directories, executedProject.getCompileSourceRoots(), basedir, projectBaseDir, false, null );
-
-        extractResourceDirs( directories, project.getBuild().getResources(), project, basedir, projectBaseDir, false,
-                             null );
-
-        extractSourceDirs( directories, executedProject.getTestCompileSourceRoots(), basedir, projectBaseDir, true,
-                           EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, project.getBuild()
-                               .getTestOutputDirectory(), false ) );
-
-        extractResourceDirs( directories, project.getBuild().getTestResources(), project, basedir, projectBaseDir,
-                             true, EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, project.getBuild()
-                                 .getTestOutputDirectory(), false ) );
-
-        return (EclipseSourceDir[]) directories.toArray( new EclipseSourceDir[directories.size()] );
-    }
-
-    private void extractSourceDirs( Set directories, List sourceRoots, File basedir, File projectBaseDir, boolean test,
-                                   String output )
-    {
-        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )
-        {
-            String sourceRoot = (String) it.next();
-
-            if ( new File( sourceRoot ).isDirectory() )
-            {
-                sourceRoot = EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, sourceRoot, !projectBaseDir
-                    .equals( basedir ) );
-
-                directories.add( new EclipseSourceDir( sourceRoot, output, test, null, null ) );
-            }
-        }
-    }
-
-    private void extractResourceDirs( Set directories, List resources, MavenProject project, File basedir,
-                                     File projectBaseDir, boolean test, String output )
-    {
-        for ( Iterator it = resources.iterator(); it.hasNext(); )
-        {
-
-            Resource resource = (Resource) it.next();
-            String includePattern = null;
-            String excludePattern = null;
-
-            if ( resource.getIncludes().size() != 0 )
-            {
-                // @todo includePattern = ?
-                getLog().warn( Messages.getString( "EclipsePlugin.includenotsupported" ) ); //$NON-NLS-1$
-            }
-
-            if ( resource.getExcludes().size() != 0 )
-            {
-                // @todo excludePattern = ?
-                getLog().warn( Messages.getString( "EclipsePlugin.excludenotsupported" ) ); //$NON-NLS-1$
-            }
-
-            //          Example of setting include/exclude patterns for future reference.
-            //
-            //          TODO: figure out how to merge if the same dir is specified twice
-            //          with different in/exclude patterns. We can't write them now,
-            //                      since only the the first one would be included.
-            //
-            //          if ( resource.getIncludes().size() != 0 )
-            //          {
-            //              writer.addAttribute(
-            //                      "including", StringUtils.join( resource.getIncludes().iterator(), "|" )
-            //                      );
-            //          }
-            //
-            //          if ( resource.getExcludes().size() != 0 )
-            //          {
-            //              writer.addAttribute(
-            //                      "excluding", StringUtils.join( resource.getExcludes().iterator(), "|" )
-            //              );
-            //          }
-
-            if ( !StringUtils.isEmpty( resource.getTargetPath() ) )
-            {
-                output = resource.getTargetPath();
-            }
-
-            File resourceDirectory = new File( resource.getDirectory() );
-
-            if ( !resourceDirectory.exists() || !resourceDirectory.isDirectory() )
-            {
-                continue;
-            }
-
-            String resourceDir = resource.getDirectory();
-            resourceDir = EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, resourceDir, !projectBaseDir
-                .equals( basedir ) );
-
-            if ( output != null )
-            {
-                output = EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, output, false );
-            }
-
-            directories.add( new EclipseSourceDir( resourceDir, output, test, includePattern, excludePattern ) );
-        }
-    }
-
-    /**
-     * Returns the list of referenced artifacts produced by reactor projects.
-     * @return List of Artifacts
-     */
-    private List resolveReactorArtifacts()
-    {
-        List referencedProjects = new ArrayList();
-
-        Set artifacts = project.getArtifacts();
-
-        for ( Iterator it = artifacts.iterator(); it.hasNext(); )
-        {
-            Artifact artifact = (Artifact) it.next();
-
-            MavenProject refProject = findReactorProject( reactorProjects, artifact );
-
-            if ( refProject != null )
-            {
-                referencedProjects.add( artifact );
-            }
-        }
-
-        return referencedProjects;
-    }
-
-    /**
-     * Utility method that locates a project producing the given artifact.
-     *
-     * @param reactorProjects a list of projects to search.
-     * @param artifact the artifact a project should produce.
-     * @return null or the first project found producing the artifact.
-     */
-    private static MavenProject findReactorProject( List reactorProjects, Artifact artifact )
-    {
-        if ( reactorProjects == null )
-        {
-            return null; // we're a single project
-        }
-
-        for ( Iterator it = reactorProjects.iterator(); it.hasNext(); )
-        {
-            MavenProject project = (MavenProject) it.next();
-
-            if ( project.getGroupId().equals( artifact.getGroupId() )
-                && project.getArtifactId().equals( artifact.getArtifactId() )
-                && project.getVersion().equals( artifact.getVersion() ) )
-            {
-                return project;
-            }
-        }
-
-        return null;
-    }
-
