o Decoupled from processor

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773422 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.LinkedHashSet;
-import java.util.Set;
-import org.apache.maven.model.processors.PluginProcessor;
-            Set<Plugin> pluginsFromProject = new LinkedHashSet<Plugin>();
-            for ( Plugin p : project.getModel().getBuild().getPlugins() )
-            {
-                Plugin copy = new Plugin();
-                PluginProcessor.copy2( p, copy, true );
-                copy.setDependencies( p.getDependencies() );
-                pluginsFromProject.add( copy );
-            }
+            Collection<Plugin> pluginsFromProject = project.getModel().getBuild().getPlugins();
-            lifecycle.populateDefaultConfigurationForPlugins( pluginsFromProject, project, configuration.getLocalRepository() );
-
+            // push plugin configuration down to executions
-                Plugin x = containsPlugin( buildPlugin, project.getModel().getBuild().getPlugins() );
-                for ( PluginExecution e : buildPlugin.getExecutions() )
+                if ( dom != null )
-                    if ( dom != null )
+                    for ( PluginExecution e : buildPlugin.getExecutions() )
-                        Xpp3Dom dom1 = Xpp3Dom.mergeXpp3Dom( new Xpp3Dom( dom ), (Xpp3Dom) e.getConfiguration() );
+                        Xpp3Dom dom1 = Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) e.getConfiguration(), new Xpp3Dom( dom ) );
-                    for ( String g : e.getGoals() )
-                    {
-                        if ( x != null )
-                        {
-                            PluginExecution pe = contains( g, x.getExecutions() );
-                            if ( pe != null )
-                            {
-                                Xpp3Dom dom2 = Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) pe.getConfiguration(), (Xpp3Dom) e.getConfiguration() );
-                                e.setConfiguration( dom2 );
-                            }
-                        }
-                    }
+            // merge in default values from mojo descriptor
+            lifecycle.populateDefaultConfigurationForPlugins( pluginsFromProject, project, configuration.getLocalRepository() );
+
-    private static PluginExecution contains( String goal, List<PluginExecution> plugins )
-    {
-        for ( PluginExecution pe : plugins )
-        {
-            if ( pe.getGoals().contains( goal ) )
-            {
-                return pe;
-            }
-        }
-        return null;
-    }
-
-    private static Plugin containsPlugin( Plugin plugin, List<Plugin> plugins )
-    {
-        for ( Plugin p : plugins )
-        {
-            if ( p.getGroupId().equals( plugin.getGroupId() ) && p.getArtifactId().equals( plugin.getArtifactId() ) )
-            {
-                return p;
-            }
-        }
-
-        return null;
-    }
-
