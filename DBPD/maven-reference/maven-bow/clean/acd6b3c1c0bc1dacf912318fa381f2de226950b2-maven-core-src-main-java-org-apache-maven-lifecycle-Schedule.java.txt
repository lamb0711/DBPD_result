[MNG-4633] Re-added configurable phase synchronization wrt upstream phase
           Made execution plan calculation parallel in weave mode

Existing weave mode would only phase-lock to the same phase upstream.
Execution plan calculation made parallel at high-level, still looking
into reducing blocking in DefaultMavenPluginManager to cash in on this.

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@941474 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Plugin;
-import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import org.apache.maven.plugin.MojoExecution;
-public class Schedule {
+@SuppressWarnings( { "UnusedDeclaration" } )
+public class Schedule
+{
-    private String mojoClass;
+
+    private String upstreamPhase; // The upstream phase to lock to.
+
+    private String pluginKey;
+
+    private String mojoGoal;
+
+
-    public Schedule() {
+    public Schedule()
+    {
-    public Schedule( String phase, boolean mojoSynchronized, boolean parallel ) {
+    public Schedule( String phase, boolean mojoSynchronized, boolean parallel )
+    {
-    public boolean isMissingPhase(){
-        return null == phase;
-    }
-    public String getPhase() {
+    public String getPhase()
+    {
-    public void setPhase(String phase) {
+    public void setPhase( String phase )
+    {
-    public String getMojoClass() {
-        return mojoClass;
+    public String getPluginKey()
+    {
+        return pluginKey;
-    public void setMojoClass(String mojoClass) {
-        this.mojoClass = mojoClass;
+    public void setPluginKey( String pluginKey )
+    {
+        this.pluginKey = pluginKey;
-    public boolean isMojoSynchronized() {
+    public boolean isMojoSynchronized()
+    {
-    public void setMojoSynchronized(boolean mojoSynchronized) {
+    public void setMojoSynchronized( boolean mojoSynchronized )
+    {
+    public String getUpstreamPhase()
+    {
+        return upstreamPhase;
+    }
+
+    public void setUpstreamPhase( String upstreamPhase )
+    {
+        this.upstreamPhase = upstreamPhase;
+    }
+
+    public String getMojoGoal()
+    {
+        return mojoGoal;
+    }
+
+    public void setMojoGoal( String mojoGoal )
+    {
+        this.mojoGoal = mojoGoal;
+    }
+
+    public boolean hasUpstreamPhaseDefined()
+    {
+        return getUpstreamPhase() != null;
+    }
+
+    public boolean appliesTo( MojoExecution mojoExecution )
+    {
+        boolean pluginKeyMatches = true;
+        boolean pluginGoalMatches = true;
+        if ( pluginKey == null && mojoGoal == null )
+        {
+            return false;
+        }
+        if ( pluginKey != null )
+        {
+            pluginKeyMatches = pluginKey.equals( mojoExecution.getPlugin().getKey() );
+        }
+        if ( mojoGoal != null )
+        {
+            pluginGoalMatches = mojoGoal.equals( mojoExecution.getGoal() );
+        }
+
+        if ( pluginKeyMatches && pluginGoalMatches )
+        {
+            return true;
+        }
+        return false;
+    }
-    public String toString() {
-        return "Schedule{" +
-                "phase='" + phase + '\'' +
-                ", mojoClass='" + mojoClass + '\'' +
-                ", mojoSynchronized=" + mojoSynchronized +
-                ", parallel=" + parallel +
-                '}';
+    public String toString()
+    {
+        return "Schedule{" + "phase='" + phase + '\'' + ", upstreamPhase='" + upstreamPhase + '\'' + ", pluginKey='" +
+            pluginKey + '\'' + ", mojoGoal='" + mojoGoal + '\'' + ", mojoSynchronized=" + mojoSynchronized +
+            ", parallel=" + parallel + '}';
