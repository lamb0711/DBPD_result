o Adding support for using compilers that produce an single output file like
  C#.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@233318 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.compiler.util.scan.SimpleSourceInclusionScanner;
+import java.util.Collections;
+import java.util.Collection;
+ * TODO: At least one step could be optimized, currently the plugin will do two
+ * scans of all the source code if the compiler has to have the entire set of
+ * sources. This is currently the case for at least the C# compiler and most
+ * likely all the other .NET compilers too.
+ *
+    // ----------------------------------------------------------------------
+    // Configurables
+    // ----------------------------------------------------------------------
+
-     *
+     * <p/>
-     *
+     * <p/>
+     * Used to control the name of the output file when compiling a set of
+     * sources to a single file.
+     *
+     * @parameter expression="${project.build.finalName}"
+     */
+    private String outputFileName;
+
+    // ----------------------------------------------------------------------
+    // Read-only parameters
+    // ----------------------------------------------------------------------
+
+    /**
+     * The directory to run the compiler from if fork is true.
+     *
+     * @parameter expression="${project.build.directory}"
+     * @required
+     * @readonly
+     */
+    private File buildDirectory;
+
+    /**
+        getLog().debug( "Using compiler '" + compilerId + "'." );
+
+        compilerConfiguration.setBuildDirectory( buildDirectory );
+
+        compilerConfiguration.setOutputFileName( outputFileName );
+
+        boolean canUpdateTarget;
+
-            staleSources = computeStaleSources( compilerConfiguration, compiler );
+            staleSources = computeStaleSources( compilerConfiguration,
+                                                compiler,
+                                                new StaleSourceScanner( staleMillis ) );
+
+            canUpdateTarget = compiler.canUpdateTarget( compilerConfiguration );
+
+            if ( compiler.getCompilerOutputStyle() == CompilerOutputStyle.ONE_OUTPUT_FILE_FOR_ALL_INPUT_FILES &&
+                 !canUpdateTarget )
+            {
+                getLog().info( "RESCANNING!" );
+                // TODO: This second scan for source files is sub-optimal
+                String inputFileEnding = compiler.getInputFileEnding( compilerConfiguration );
+
+                Set includes = Collections.singleton( "**/*." + inputFileEnding );
+
+                Set sources = computeStaleSources( compilerConfiguration,
+                                                   compiler,
+                                                   new SimpleSourceInclusionScanner( includes, Collections.EMPTY_SET ));
+
+                compilerConfiguration.setSourceFiles( sources );
+            }
+            else
+            {
+                compilerConfiguration.setSourceFiles( staleSources );
+            }
-        else
-        {
-            compilerConfiguration.setSourceFiles( staleSources );
-        }
-        getLog().debug( "Using compiler '" + compilerId + "'." );
-
-    private Set computeStaleSources( CompilerConfiguration compilerConfiguration, Compiler compiler )
+    private Set computeStaleSources( CompilerConfiguration compilerConfiguration,
+                                     Compiler compiler,
+                                     SourceInclusionScanner scanner )
+        File outputDirectory;
+
+
+            outputDirectory = getOutputDirectory();
-            mapping = new SingleTargetSourceMapping( compiler.getOutputFile( compilerConfiguration ) );
+            mapping = new SingleTargetSourceMapping( compiler.getInputFileEnding( compilerConfiguration ),
+                                                     compiler.getOutputFile( compilerConfiguration ) );
+
+            outputDirectory = buildDirectory;
-        SourceInclusionScanner scanner = new StaleSourceScanner( staleMillis );
-
-                staleSources.addAll( scanner.getIncludedSources( rootFile, getOutputDirectory() ) );
+                staleSources.addAll( scanner.getIncludedSources( rootFile, outputDirectory ) );
