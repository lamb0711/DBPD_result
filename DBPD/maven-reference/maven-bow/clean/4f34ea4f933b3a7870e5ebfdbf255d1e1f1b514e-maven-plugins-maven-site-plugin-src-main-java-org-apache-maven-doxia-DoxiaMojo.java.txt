Rolling back to still allow exception on duplicate files and some small improvements.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@227216 13f79535-47bb-0310-9956-ffa450edef68

+            Locale locale;
-                Locale locale = (Locale) iterator.next();
+                locale = (Locale) iterator.next();
+                    MavenReport report;
-                        MavenReport report = (MavenReport) j.next();
+                        report = (MavenReport) j.next();
-
+                    Map.Entry entry;
-                        Map.Entry entry = (Map.Entry) it.next();
+                        entry = (Map.Entry) it.next();
+     * 
+     * @param reports  a list of reports
+     * @param locale the current locale
+     * @return the inpustream 
+     * @throws MojoExecutionException is any 
-                props.put( "modules", getModulesMenu( locale ) );
+                /* See the Not working section, around line 460*/
+                //props.put( "modules", getModulesMenu( locale ) );
+            ReportPlugin reportPlugin;
-                ReportPlugin reportPlugin = (ReportPlugin) it.next();
+                reportPlugin = (ReportPlugin) it.next();
+                        ReportSet reportSet;
-                            ReportSet reportSet = (ReportSet) j.next();
+                            reportSet = (ReportSet) j.next();
-     * Convenience method that try to find duplicate files in a given directory.
-     * <p>The scan is case unsensitive.</p>
+     * Convenience method that try to find duplicate files in sub-directories of a given directory.
+     * <p>The scan is case sensitive.</p>
-        List siteFiles = FileUtils.getFileNames( directory, null, defaultExcludes, false );
-        for ( Iterator it = siteFiles.iterator(); it.hasNext(); )
-        {
-            String currentFile = (String) it.next();
+        
+        List siteFileNames = FileUtils.getFileNames( directory, null, defaultExcludes, false );
-            if ( currentFile.lastIndexOf( File.separator ) == -1 )
+        String currentFileName;
+        for ( Iterator it = siteFileNames.iterator(); it.hasNext(); )
+        {
+            currentFileName = (String) it.next();
+
+            if ( currentFileName.lastIndexOf( File.separator ) == -1 )
-            if ( currentFile.lastIndexOf( "." ) == -1 )
+            if ( currentFileName.lastIndexOf( "." ) == -1 )
-            String key = currentFile.substring( currentFile.indexOf( File.separator ) + 1,
-                                                currentFile.lastIndexOf( "." ) );
+            String key = currentFileName.substring( currentFileName.indexOf( File.separator ) + 1,
+                                                currentFileName.lastIndexOf( "." ) );
-            Set tmp = (Set) duplicate.get( key.toLowerCase() );
-            if ( tmp == null )
+            String filePattern = "**/" + key + ".*";
+
+            List duplicateFileNames = FileUtils.getFileNames( directory, filePattern, defaultExcludes, false );
+            Set duplicatedFileNamesSet = (Set) duplicate.get( key.toLowerCase() );
+            if ( duplicatedFileNamesSet == null )
-                tmp = new HashSet();
-                duplicate.put( key.toLowerCase(), tmp );
+                duplicatedFileNamesSet = new HashSet();
-            tmp.add( key );
+
+            String tmp;
+            for ( Iterator it2 = duplicateFileNames.iterator(); it2.hasNext(); )
+            {
+                tmp = (String) it2.next();
+                if ( tmp.lastIndexOf( File.separator ) == -1 )
+                {
+                    // ignore files directly in the directory
+                    continue;
+                }
+
+                duplicatedFileNamesSet.add( directory.getAbsolutePath() + File.separator + tmp );
+            }
+            duplicate.put( key.toLowerCase(), duplicatedFileNamesSet );
