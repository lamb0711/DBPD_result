Cleaned up code - generics

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@750104 13f79535-47bb-0310-9956-ffa450edef68

-    // TODO: Ranges
-                        else if ( isRange( modelProperty.getResolvedValue()) )
+                        else if ( isRange( modelProperty.getResolvedValue() ) )
-                            return isInRange( version, getRange( modelProperty.getResolvedValue()));
+                            return isInRange( version, getRange( modelProperty.getResolvedValue() ) );
-            int leftRelation = getRelationOrder(value, range.get( 0 ), true);
-            
-            if( leftRelation == 0)
-            {
-                return true;
-            }
-            
-            if(leftRelation < 0)
-            {
-                return false;
-            }
-            
-            return getRelationOrder(value, range.get( 1 ), false) <= 0;
-    }
-    
-    private static int getRelationOrder(String value, RangeValue rangeValue, boolean isLeft)
-    {
-        List<String> valueTokens = Arrays.asList(value.split( "." ));
-        List<String> rangeValueTokens = Arrays.asList(rangeValue.value.split( "." ));
-        
-        int max = Math.max( valueTokens.size(), rangeValueTokens.size() );
-        addZeroTokens(valueTokens, max);
-        addZeroTokens(rangeValueTokens, max);
-       
-        if(value.equals( rangeValue.value ) )
+        int leftRelation = getRelationOrder( value, range.get( 0 ), true );
+
+        if ( leftRelation == 0 )
-            return (rangeValue.isClosed()) ? 0 : -1;
+            return true;
-        for( int i = 0; i < valueTokens.size() ; i++)
+        if ( leftRelation < 0 )
+        {
+            return false;
+        }
+
+        return getRelationOrder( value, range.get( 1 ), false ) <= 0;
+    }
+
+    private static int getRelationOrder( String value, RangeValue rangeValue, boolean isLeft )
+    {
+        List<String> valueTokens = Arrays.asList( value.split( "." ) );
+        List<String> rangeValueTokens = Arrays.asList( rangeValue.value.split( "." ) );
+
+        int max = Math.max( valueTokens.size(), rangeValueTokens.size() );
+        addZeroTokens( valueTokens, max );
+        addZeroTokens( rangeValueTokens, max );
+
+        if ( value.equals( rangeValue.value ) )
+        {
+            return ( rangeValue.isClosed() ) ? 0 : -1;
+        }
+
+        for ( int i = 0; i < valueTokens.size(); i++ )
-            if( x < y)
+            if ( x < y )
-            else if( x > y)
+            else if ( x > y )
-        return 0;            
+        return 0;
-    
-    private static void addZeroTokens(List<String> tokens, int max)
+
+    private static void addZeroTokens( List<String> tokens, int max )
-        if(tokens.size() < max)
+        if ( tokens.size() < max )
-            for(int i = 0; i < (max - tokens.size()) ; i++){
+            for ( int i = 0; i < ( max - tokens.size() ); i++ )
+            {
-        }        
+        }
-    
-    private static boolean isRange(String value)
+
+    private static boolean isRange( String value )
-            } 
-            
+            }
+
-        if(ranges.size() < 2)
+        if ( ranges.size() < 2 )
-                ranges.add( new RangeValue("99999999", false));
+            ranges.add( new RangeValue( "99999999", false ) );
