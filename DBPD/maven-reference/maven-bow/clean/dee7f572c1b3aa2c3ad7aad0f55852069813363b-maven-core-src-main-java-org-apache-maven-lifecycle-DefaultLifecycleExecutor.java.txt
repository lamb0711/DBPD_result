Adding support for pre-scanning POMs for build extensions. NOTE: Plugins-as-extensions is not yet supported in this way.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@497993 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.extension.ExtensionManager;
-import org.apache.maven.model.Extension;
-import org.codehaus.plexus.PlexusContainerException;
-    private ExtensionManager extensionManager;
-
-        findExtensions( session );
+        try
+        {
+            Map handlers = findArtifactTypeHandlers( session );
+
+            artifactHandlerManager.addHandlers( handlers );
+        }
+        catch ( PluginNotFoundException e )
+        {
+            throw new LifecycleExecutionException( e.getMessage(), e );
+        }
-    private void findExtensions( MavenSession session )
-        throws LifecycleExecutionException
-    {
-        for ( Iterator i = session.getSortedProjects().iterator(); i.hasNext(); )
-        {
-            MavenProject project = (MavenProject) i.next();
-
-            for ( Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); )
-            {
-                Extension extension = (Extension) j.next();
-                try
-                {
-                    extensionManager.addExtension( extension, project, session.getLocalRepository() );
-                }
-                catch ( PlexusContainerException e )
-                {
-                    throw new LifecycleExecutionException( "Unable to initialise extensions", e );
-                }
-                catch ( ArtifactResolutionException e )
-                {
-                    throw new LifecycleExecutionException( e.getMessage(), e );
-                }
-                catch ( ArtifactNotFoundException e )
-                {
-                    throw new LifecycleExecutionException( e.getMessage(), e );
-                }
-            }
-
-            extensionManager.registerWagons();
-
-            try
-            {
-                Map handlers = findArtifactTypeHandlers( project, session );
-
-                artifactHandlerManager.addHandlers( handlers );
-            }
-            catch ( PluginNotFoundException e )
-            {
-                throw new LifecycleExecutionException( e.getMessage(), e );
-            }
-        }
-    }
-
+     * 
+     * @todo Move this sort of thing to the tail end of the project-building process
-    private Map findArtifactTypeHandlers( MavenProject project, MavenSession session )
+    private Map findArtifactTypeHandlers( MavenSession session )
-        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+        for ( Iterator projectIterator = session.getSortedProjects().iterator(); projectIterator.hasNext(); )
-            Plugin plugin = (Plugin) i.next();
-
-            if ( plugin.isExtensions() )
+            MavenProject project = (MavenProject) projectIterator.next();
+            
+            for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
-                verifyPlugin( plugin, project, session );
+                Plugin plugin = (Plugin) i.next();
-                // TODO: if moved to the plugin manager we already have the descriptor from above and so do can lookup the container directly
-                try
+                if ( plugin.isExtensions() )
-                    Map components = pluginManager.getPluginComponents( plugin, ArtifactHandler.ROLE );
-                    map.putAll( components );
-                }
-                catch ( ComponentLookupException e )
-                {
-                    getLogger().debug( "Unable to find the lifecycle component in the extension", e );
-                }
-                catch ( PluginManagerException e )
-                {
-                    throw new LifecycleExecutionException( "Error looking up available components from plugin '" +
-                        plugin.getKey() + "': " + e.getMessage(), e );
-                }
+                    verifyPlugin( plugin, project, session );
-                // shudder...
-                for ( Iterator j = map.values().iterator(); j.hasNext(); )
-                {
-                    ArtifactHandler handler = (ArtifactHandler) j.next();
-                    if ( project.getPackaging().equals( handler.getPackaging() ) )
+                    // TODO: if moved to the plugin manager we already have the descriptor from above and so do can lookup the container directly
+                    try
-                        project.getArtifact().setArtifactHandler( handler );
+                        Map components = pluginManager.getPluginComponents( plugin, ArtifactHandler.ROLE );
+                        map.putAll( components );
+                    }
+                    catch ( ComponentLookupException e )
+                    {
+                        getLogger().debug( "Unable to find the lifecycle component in the extension", e );
+                    }
+                    catch ( PluginManagerException e )
+                    {
+                        throw new LifecycleExecutionException( "Error looking up available components from plugin '" +
+                            plugin.getKey() + "': " + e.getMessage(), e );
+                    }
+
+                    // shudder...
+                    for ( Iterator j = map.values().iterator(); j.hasNext(); )
+                    {
+                        ArtifactHandler handler = (ArtifactHandler) j.next();
+                        if ( project.getPackaging().equals( handler.getPackaging() ) )
+                        {
+                            project.getArtifact().setArtifactHandler( handler );
+                        }
