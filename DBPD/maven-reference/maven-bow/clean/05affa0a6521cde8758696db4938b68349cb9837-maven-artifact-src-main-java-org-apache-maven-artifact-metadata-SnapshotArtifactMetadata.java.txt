PR: MNG-192
Add "RELEASE" notation so that plugins without a version can be discovered

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@169303 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.manager.WagonManager;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.layout.ArtifactPathFormatException;
-import org.apache.maven.wagon.ResourceDoesNotExistException;
-import org.apache.maven.wagon.TransferFailedException;
-import org.codehaus.plexus.util.FileUtils;
+import org.apache.maven.artifact.Artifact;
-import java.io.IOException;
-    extends AbstractArtifactMetadata
-    implements Comparable
+    extends AbstractVersionArtifactMetadata
-    private static final String SNAPSHOT_VERSION_FILE = "version.txt";
-
-    private long lastModified = 0;
-
-    public static SnapshotArtifactMetadata readFromLocalRepository( Artifact artifact,
-                                                                    ArtifactRepository localRepository )
-        throws ArtifactPathFormatException, IOException
-    {
-        SnapshotArtifactMetadata metadata = new SnapshotArtifactMetadata( artifact );
-        File f = metadata.getLocalRepositoryLocation( localRepository );
-        if ( f.exists() )
-        {
-            metadata.readFromFile( f );
-        }
-        return metadata;
-    }
-
-    public void storeInLocalRepository( ArtifactRepository localRepository )
-        throws ArtifactMetadataRetrievalException
-    {
-        try
-        {
-            if ( timestamp == null )
-            {
-                timestamp = getSessionTimestamp();
-            }
-            String path = getLocalRepositoryLocation( localRepository ).getPath();
-            File file = new File( path );
-            // TODO: this should be centralised before the resolution of the artifact
-            file.getParentFile().mkdirs();
-            FileUtils.fileWrite( path, constructVersion() );
-            lastModified = file.lastModified();
-        }
-        catch ( IOException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
-        }
-        catch ( ArtifactPathFormatException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
-        }
-    }
-
-    private File getLocalRepositoryLocation( ArtifactRepository localRepository )
-        throws ArtifactPathFormatException
-    {
-        return new File( localRepository.getBasedir(), localRepository.pathOfMetadata( this ) );
-    }
-
-    /**
-     * Retrieve the metadata from the remote repository into the local repository.
-     *
-     * @param remoteRepository the remote repository
-     * @param wagonManager     the wagon manager to use to retrieve the metadata
-     */
-    public static SnapshotArtifactMetadata retrieveFromRemoteRepository( Artifact artifact,
-                                                                         ArtifactRepository remoteRepository,
-                                                                         WagonManager wagonManager )
-        throws ArtifactMetadataRetrievalException
+    protected void setContent( String content )
-        SnapshotArtifactMetadata snapshotMetadata = new SnapshotArtifactMetadata( artifact );
-
-        try
-        {
-            // TODO: shouldn't need a file intermediatary - improve wagon to take a stream
-            File destination = File.createTempFile( "maven-artifact", null );
-            destination.deleteOnExit();
-
-            wagonManager.getArtifactMetadata( snapshotMetadata, remoteRepository, destination );
-
-            snapshotMetadata.readFromFile( destination );
-        }
-        catch ( ResourceDoesNotExistException e )
-        {
-            // No problem...
-            // this just means that there is no snapshot version file, so we keep timestamp = null, build = 0
-        }
-        catch ( TransferFailedException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
-        }
-        catch ( IOException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
-        }
-
-        return snapshotMetadata;
-    }
-
-    private void readFromFile( File file )
-        throws IOException
-    {
-        String version = FileUtils.fileRead( file );
-        lastModified = file.lastModified();
-
-        Matcher matcher = VERSION_FILE_PATTERN.matcher( version );
+        Matcher matcher = VERSION_FILE_PATTERN.matcher( content );
-    public long getLastModified()
-    {
-        return lastModified;
-    }
-
