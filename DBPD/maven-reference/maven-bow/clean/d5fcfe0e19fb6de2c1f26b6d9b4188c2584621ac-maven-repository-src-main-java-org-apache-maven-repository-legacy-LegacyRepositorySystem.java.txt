o swapping the branch to trunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779660 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.maven.repository;
+package org.apache.maven.repository.legacy;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-import java.util.Map;
-import java.util.Set;
-import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
-import org.apache.maven.artifact.resolver.ResolutionErrorHandler;
-import org.apache.maven.artifact.resolver.filter.AndArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
-import org.apache.maven.model.Exclusion;
-import org.apache.maven.wagon.authentication.AuthenticationInfo;
-import org.apache.maven.wagon.proxy.ProxyInfo;
-import org.apache.maven.wagon.repository.RepositoryPermissions;
+import org.apache.maven.repository.DelegatingLocalArtifactRepository;
+import org.apache.maven.repository.LocalArtifactRepository;
+import org.apache.maven.repository.MetadataResolutionRequest;
+import org.apache.maven.repository.MetadataResolutionResult;
+import org.apache.maven.repository.MirrorBuilder;
+import org.apache.maven.repository.RepositorySystem;
+import org.apache.maven.wagon.ResourceDoesNotExistException;
+import org.apache.maven.wagon.TransferFailedException;
+import org.apache.maven.wagon.events.TransferListener;
+import org.codehaus.plexus.PlexusContainer;
-import org.codehaus.plexus.logging.Logger;
-import org.codehaus.plexus.util.StringUtils;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-
-    @Requirement
-    private WagonManager wagonManager;
-
-    private ArtifactMetadataSource artifactMetadataSource;
-
-    @Requirement
-    private ResolutionErrorHandler resolutionErrorHandler;
+    private WagonManager wagonManager;
-    private Logger logger;
-
-    private Map<String, ProxyInfo> proxies = new HashMap<String, ProxyInfo>();
-
-    private Map<String, AuthenticationInfo> authenticationInfoMap = new HashMap<String, AuthenticationInfo>();
-
-    private Map<String, RepositoryPermissions> serverPermissionsMap = new HashMap<String, RepositoryPermissions>();
-    
-    // Artifact Creation
+    private PlexusContainer plexus;
+    public Artifact createArtifact( String groupId, String artifactId, String version, String packaging )
+    {
+        return artifactFactory.createBuildArtifact( groupId, artifactId, version, packaging );
+    }
+    
-    public Artifact createBuildArtifact( String groupId, String artifactId, String version, String packaging )
-    {
-        return artifactFactory.createBuildArtifact( groupId, artifactId, version, packaging );
-    }
-
-    /**
-     * @return {@link Set} &lt; {@link Artifact} >
-     * @todo desperately needs refactoring. It's just here because it's implementation is maven-project specific
-     */
-    public Set<Artifact> createArtifacts( List<Dependency> dependencies, String inheritedScope,
-                                          ArtifactFilter dependencyFilter, MavenRepositoryWrapper reactor )
-        throws VersionNotFoundException
-    {
-        return createArtifacts( artifactFactory, dependencies, inheritedScope, dependencyFilter, reactor );
-    }
-
-    @Deprecated
-    public static Set<Artifact> createArtifacts( ArtifactFactory artifactFactory,List<Dependency> dependencies, String inheritedScope, ArtifactFilter dependencyFilter, MavenRepositoryWrapper reactor )
-        throws VersionNotFoundException
-    {
-        Set<Artifact> projectArtifacts = new LinkedHashSet<Artifact>( dependencies.size() );
-
-        for ( Iterator<Dependency> i = dependencies.iterator(); i.hasNext(); )
-        {
-            Dependency d = i.next();
-
-            String scope = d.getScope();
-
-            if ( StringUtils.isEmpty( scope ) )
-            {
-                scope = Artifact.SCOPE_COMPILE;
-
-                d.setScope( scope );
-            }
-
-            VersionRange versionRange;
-            try
-            {
-                versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
-            }
-            catch ( InvalidVersionSpecificationException e )
-            {
-                throw new VersionNotFoundException( reactor.getId(), d, reactor.getFile(), e );
-            }
-            Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),
-                                                                          versionRange, d.getType(), d.getClassifier(),
-                                                                          scope, inheritedScope, d.isOptional() );
-
-            if ( Artifact.SCOPE_SYSTEM.equals( scope ) )
-            {
-                artifact.setFile( new File( d.getSystemPath() ) );
-            }
-
-            ArtifactFilter artifactFilter = dependencyFilter;
-
-            if ( ( artifact != null ) && ( ( artifactFilter == null ) || artifactFilter.include( artifact ) ) )
-            {
-                if ( ( d.getExclusions() != null ) && !d.getExclusions().isEmpty() )
-                {
-                    List<String> exclusions = new ArrayList<String>();
-                    for ( Iterator<Exclusion> j = d.getExclusions().iterator(); j.hasNext(); )
-                    {
-                        Exclusion e = j.next();
-                        exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
-                    }
-
-                    ArtifactFilter newFilter = new ExcludesArtifactFilter( exclusions );
-
-                    if ( artifactFilter != null )
-                    {
-                        AndArtifactFilter filter = new AndArtifactFilter();
-                        filter.add( artifactFilter );
-                        filter.add( newFilter );
-                        artifactFilter = filter;
-                    }
-                    else
-                    {
-                        artifactFilter = newFilter;
-                    }
-                }
-
-                artifact.setDependencyFilter( artifactFilter );
-
-                if ( reactor != null )
-                {
-                    artifact = reactor.find( artifact );
-                }
-
-                projectArtifacts.add( artifact );
-            }
-        }
-
-        return projectArtifacts;
-    }    
-    
+            
-            /*
-            MNG-4050: Temporarily disabled this check since it is breaking the bootstrap unit tests on commons-parent pom
-             */
-            /*
-            if ( id == null || id.trim().length() < 1 )
-            {
-                throw new InvalidRepositoryException( "Repository ID must not be empty (URL is: " + url + ").", url );
-            }
-
-            if ( url == null || url.trim().length() < 1 )
-            {
-                throw new InvalidRepositoryException( "Repository URL must not be empty (ID is: " + id + ").", id );
-            }
-            */
+            
+    
+    public ArtifactRepository createDefaultLocalRepository()
+        throws InvalidRepositoryException
+    {
+        return createLocalRepository( RepositorySystem.defaultUserLocalRepository );
+    }
+    
+    public ArtifactRepository createLocalRepository( File localRepository )
+        throws InvalidRepositoryException
+    {
+        return createRepository( "file://" + localRepository.toURI().getRawPath(),
+                                 RepositorySystem.DEFAULT_LOCAL_REPO_ID, true,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,
+                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE );
+    }
-    // From MavenExecutionRequestPopulator
-
+    public ArtifactRepository createDefaultRemoteRepository()
+        throws InvalidRepositoryException
+    {
+        return createRepository( RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID,
+                                 true, ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER, false,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY,
+                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
+    }
+    
-        return createRepository( canonicalFileUrl( url ), repositoryId );
+        return createRepository( canonicalFileUrl( url ), repositoryId, true,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,
+                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE );
-    private ArtifactRepository createRepository( String url, String repositoryId )
+    private ArtifactRepository createRepository( String url, String repositoryId, boolean releases,
+                                                 String releaseUpdates, boolean snapshots, String snapshotUpdates,
+                                                 String checksumPolicy )
-        // snapshots vs releases
-        // offline = to turning the update policy off
+        ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy( snapshots, snapshotUpdates, checksumPolicy );
-        //TODO: we'll need to allow finer grained creation of repositories but this will do for now
-
-        String updatePolicyFlag = ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS;
-
-        String checksumPolicyFlag = ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN;
-
-        ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
-
-        ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
+        ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy( releases, releaseUpdates, checksumPolicy );
+        /*
+         * Probably is not worth it, but here I make sure I restore request
+         * to its original state. 
+         */
+        try
+        {
+            LocalArtifactRepository ideWorkspace = plexus.lookup( LocalArtifactRepository.class, LocalArtifactRepository.IDE_WORKSPACE );
-if(request.getRemoteRepostories() != null && request.getRemoteRepostories().size() > 10 )
-{
-    System.out.println("legacy: request with "+request.getRemoteRepostories().size()+" remote repositories" );
-}
-        ArtifactResolutionResult res = artifactResolver.resolve( request );
+            if ( request.getLocalRepository() instanceof DelegatingLocalArtifactRepository )
+            {
+                DelegatingLocalArtifactRepository delegatingLocalRepository = (DelegatingLocalArtifactRepository) request.getLocalRepository();
-        return res;
+                LocalArtifactRepository orig = delegatingLocalRepository.getIdeWorspace();
+
+                delegatingLocalRepository.setIdeWorkspace( ideWorkspace );
+
+                try
+                {
+                    return artifactResolver.resolve( request );
+                }
+                finally
+                {
+                    delegatingLocalRepository.setIdeWorkspace( orig );
+                }
+            }
+            else
+            {
+                ArtifactRepository localRepository = request.getLocalRepository();
+                DelegatingLocalArtifactRepository delegatingLocalRepository = new DelegatingLocalArtifactRepository( localRepository );
+                delegatingLocalRepository.setIdeWorkspace( ideWorkspace );
+                request.setLocalRepository( delegatingLocalRepository );
+                try
+                {
+                    return artifactResolver.resolve( request );
+                }
+                finally
+                {
+                    request.setLocalRepository( localRepository );
+                }
+            }
+        }
+        catch ( ComponentLookupException e )
+        {
+            // no ide workspace artifact resolution
+        }
+
+        return artifactResolver.resolve( request );
-    public void setOnline( boolean online )
-    {
-        artifactResolver.setOnline( online );
-    }
-
-    public boolean isOnline()
-    {
-        return artifactResolver.isOnline();
-    }
-
+    /*
+    */
-    public void addAuthenticationInfo( String repositoryId, String username, String password, String privateKey,
-                                       String passphrase )
+    /*
+    public void addAuthenticationInfo( String repositoryId, String username, String password, String privateKey, String passphrase )
+    */
+    /*
-    
+    */
+
-    
+
-    
+
+
+//      ArtifactResolutionResult collect( Set<Artifact> artifacts,
+//      Artifact originatingArtifact,
+//      Map managedVersions,
+//      ArtifactRepository localRepository,
+//      List<ArtifactRepository> remoteRepositories,
+//      ArtifactMetadataSource source,
+//      ArtifactFilter filter,
+//      List<ResolutionListener> listeners,
+//      List<ConflictResolver> conflictResolvers )
+        
+//        ArtifactResolutionResult result = artifactCollector.
+
+    public void retrieve( ArtifactRepository repository, File destination, String remotePath, TransferListener downloadMonitor )
+        throws TransferFailedException, ResourceDoesNotExistException
+    {
+        wagonManager.getRemoteFile( repository, destination, remotePath, downloadMonitor, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN, true );
+    }
+
+    public void publish( ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor )
+        throws TransferFailedException
+    {
+        wagonManager.putRemoteFile( repository, source, remotePath, downloadMonitor );
+    }
