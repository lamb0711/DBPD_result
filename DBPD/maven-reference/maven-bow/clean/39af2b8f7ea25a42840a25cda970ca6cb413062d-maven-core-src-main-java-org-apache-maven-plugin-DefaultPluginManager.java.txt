o bootstrap working on my branch with all the changes. i need to pull from trunk and spend a few more hours on adding tests that need to be written that never were. the
  guts of the plugin manager and lifecycle executor internals are not really covered much.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@751989 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.PluginExecution;
-        Xpp3Dom dom = mojoExecution.getConfiguration();
+        // Here we are walking throught the POM to find plugin configuraiton that we
+        // need to inject into the POM. Shane will soon take care of this.
+        // Merge the plugin level configuration with the execution level configuration
+        // where the latter is dominant.
+                
+        if ( project.getBuildPlugins() != null )
+        {
+            for ( Plugin buildPlugin : project.getBuildPlugins() )
+            {
+                // The POM builder should have merged any configuration at the upper level of the plugin
+                // element with the execution level configuration where our goal is.
+                // We have our plugin
+                if ( buildPlugin.getArtifactId().equals( pluginDescriptor.getArtifactId() ) )
+                {
+                    Xpp3Dom dom = (Xpp3Dom) buildPlugin.getConfiguration();
+                    
+                    // Search through executions
+                    for ( PluginExecution e : buildPlugin.getExecutions() )
+                    {
+                        // Search though goals to match what's been asked for.
+                        for ( String g : e.getGoals() )
+                        {
+                            // This goal matches what's been asked for.                            
+                            if ( g.equals( mojoDescriptor.getGoal() ) )
+                            {
+                                dom = Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) e.getConfiguration(), dom );
+                            }
+                        }
+                    }
+                    
+                    mojoExecution.setConfiguration( dom );                    
+                }
+            }
+        }
+        
+        Xpp3Dom dom = mojoExecution.getConfiguration();
+        
-        catch ( LinkageError e )
-        {
-            if ( logger.isFatalErrorEnabled() )
-            {
-                StringBuffer sb = new StringBuffer();
-                sb.append( mojoDescriptor.getImplementation() ).append( "#execute() caused a linkage error (" );
-                sb.append( e.getClass().getName() ).append( "). Check the realms:" );
-                ClassRealm r = pluginDescriptor.getClassRealm();
-                sb.append( "\n\nNOTE:\nPlugin realm is: " ).append( r.getId() );
-                sb.append( "\nContainer realm is: " ).append( container.getContainerRealm().getId() );
-                sb.append( "\n\n" );
-
-                do
-                {
-                    sb.append( "Realm ID: " ).append( r.getId() ).append( '\n' );
-                    for ( int i = 0; i < r.getURLs().length; i++ )
-                    {
-                        sb.append( "urls[" ).append( i ).append( "] = " ).append( r.getURLs()[i] );
-                        if ( i != ( r.getURLs().length - 1 ) )
-                        {
-                            sb.append( '\n' );
-                        }
-                    }
-
-                    sb.append( "\n\n" );
-                    r = r.getParentRealm();
-                }
-                while ( r != null );
-
-                logger.fatalError( sb.toString(), e );
-            }
-
-            session.getEventDispatcher().dispatchError( event, goalExecId, e );
-
-            throw e;
-        }
