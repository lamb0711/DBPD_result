Fixing error messages related to invalid plugin configuration, similar to the instantiation exception for ArtifactRepository when there is no deployment repository...

o Moved the parameter documentation reader to a separate project, so that I can use Modello.
o Added some more parameter documentation.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@293410 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.usability.plugin.ExpressionDocumenter;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.usability.plugin.Expression;
-import org.apache.maven.usability.plugin.ExpressionDocumentation;
+import org.apache.maven.usability.plugin.ExpressionDocumenter;
+import org.codehaus.plexus.configuration.PlexusConfiguration;
-import java.util.Stack;
+import java.util.Properties;
+        exprs.add( "reactorProjects" );
-        return DiagnosisUtils.containsInCausality(error, PluginConfigurationException.class );
+        return DiagnosisUtils.containsInCausality( error, PluginConfigurationException.class );
-        PluginConfigurationException pce = (PluginConfigurationException) DiagnosisUtils.getFromCausality(error, PluginConfigurationException.class );
-        
+        PluginConfigurationException pce = (PluginConfigurationException) DiagnosisUtils
+            .getFromCausality( error, PluginConfigurationException.class );
+
-        else if( DiagnosisUtils.containsInCausality(pce, ComponentConfigurationException.class ) )
+        else if ( DiagnosisUtils.containsInCausality( pce, ComponentConfigurationException.class ) )
-            ComponentConfigurationException cce = (ComponentConfigurationException) DiagnosisUtils.getFromCausality( pce, ComponentConfigurationException.class );
-            return buildInvalidPluginConfigurationDiagnosisMessage( cce );
+            ComponentConfigurationException cce = (ComponentConfigurationException) DiagnosisUtils
+                .getFromCausality( pce, ComponentConfigurationException.class );
+            
+            return buildConfigurationDiagnosticMessage( pce, cce );
-    private String buildInvalidPluginConfigurationDiagnosisMessage( ComponentConfigurationException cce )
+    private String buildConfigurationDiagnosticMessage( PluginConfigurationException pce, ComponentConfigurationException cce )
-        message.append( "Either your POM or one of its ancestors has declared an invalid plugin configuration.\n" )
-               .append( "The error message is:\n\n" )
-               .append( cce.getMessage() ).append( "\n" );
+        PluginDescriptor descriptor = pce.getPluginDescriptor();
+
+        PlexusConfiguration failedConfiguration = cce.getFailedConfiguration();
+        message.append( "Failed to configure plugin parameters for: " + descriptor.getId() + "\n\n" );
+        
+        if ( failedConfiguration != null )
+        {
+            String value = failedConfiguration.getValue( null );
+            addParameterUsageInfo( value, message );
+        }
+        
+        message.append( "Reason: " ).append( cce.getMessage() ).append( "\n" );
+        
+        Throwable root = DiagnosisUtils.getRootCause( cce );
+        
+        message.append( "Root Cause: " ).append( root.getMessage() ).append( "\n\n" );
+
-        messageBuffer.append( "One or more required plugin parameters are invalid/missing for \'" ).append(
-            mojo.getPluginDescriptor().getGoalPrefix() ).append( ":" ).append( mojo.getGoal() ).append( "\'\n" );
+        messageBuffer.append( "One or more required plugin parameters are invalid/missing for \'" )
+            .append( mojo.getPluginDescriptor().getGoalPrefix() ).append( ":" ).append( mojo.getGoal() )
+            .append( "\'\n" );
-            
+
-                                                         StringBuffer messageBuffer )
+                                                        StringBuffer messageBuffer )
-            messageBuffer.append( "inside the definition for plugin: \'" + mojo.getPluginDescriptor().getArtifactId() + "\'specify the following:\n\n<configuration>\n  ...\n  <" + param.getName() + ">VALUE</" + param.getName() + ">\n</configuration>" );
+            messageBuffer.append( "inside the definition for plugin: \'" + mojo.getPluginDescriptor().getArtifactId()
+                + "\'specify the following:\n\n<configuration>\n  ...\n  <" + param.getName() + ">VALUE</"
+                + param.getName() + ">\n</configuration>" );
-                messageBuffer.append( "\n\n-OR-\n\n<configuration>\n  ...\n  <" + alias + ">VALUE</" + alias + ">\n</configuration>\n" );
+                messageBuffer.append( "\n\n-OR-\n\n<configuration>\n  ...\n  <" + alias + ">VALUE</" + alias
+                    + ">\n</configuration>\n" );
-            StringBuffer expressionMessageBuffer = new StringBuffer();
-
-                expressionMessageBuffer.append( "\n\n-OR-\n\n" );
+                messageBuffer.append( "\n\n-OR-\n\n" );
+            
+            addParameterUsageInfo( expression, messageBuffer );
+        }
+    }
-            Matcher exprMatcher = Pattern.compile( "\\$\\{(.+)\\}" ).matcher( expression );
+    private void addParameterUsageInfo( String expression, StringBuffer messageBuffer )
+    {
+        StringBuffer expressionMessageBuffer = new StringBuffer();
+        
+        Matcher exprMatcher = Pattern.compile( "\\$\\{(.+)\\}" ).matcher( expression );
-            boolean unmodifiableElementsFound = false;
-            boolean activeElementsFound = false;
+        boolean unmodifiableElementsFound = false;
+        boolean activeElementsFound = false;
-            int elementCount = 0;
+        int elementCount = 0;
-            while ( exprMatcher.find() )
+        while ( exprMatcher.find() )
+        {
+            elementCount++;
+
+            activeElementsFound = true;
+
+            String subExpression = exprMatcher.group( 1 );
+
+            StringTokenizer expressionParts = new StringTokenizer( subExpression, "." );
+
+            String firstPart = expressionParts.nextToken();
+
+            try
-                elementCount++;
+                Map expressions = ExpressionDocumenter.load();
+                Expression expr = (Expression) expressions.get( subExpression );
-                activeElementsFound = true;
-
-                String subExpression = exprMatcher.group( 1 );
-
-                StringTokenizer expressionParts = new StringTokenizer( subExpression, "." );
-
-                String firstPart = expressionParts.nextToken();
-
-                if ( expressionParts.hasMoreTokens() && ( "project".equals( firstPart ) || "settings".equals( firstPart ) ) )
+                if ( expr != null )
-                    addParameterConfigDocumentation( firstPart, exprMatcher.group( 0 ), subExpression, expressionMessageBuffer );
+                    if ( !expr.isEditable() )
+                    {
+                        unmodifiableElementsFound = true;
+                    }
+                    else
+                    {
+                        addParameterConfigDocumentation( firstPart, exprMatcher.group( 0 ), subExpression,
+                                                         expressionMessageBuffer );
+                    }
-                    expressionMessageBuffer.append( "on the command line, specify: \'-D" ).append( subExpression ).append("=VALUE\'" );
+                    expressionMessageBuffer.append( "on the command line, specify: \'-D" ).append( subExpression )
+                        .append( "=VALUE\'" );
+            catch ( ExpressionDocumentationException e )
+            {
+                expressionMessageBuffer.append( "\n\nERROR!! Failed to load expression documentation!" );
-            if ( activeElementsFound )
-            {
-                messageBuffer.append( expressionMessageBuffer );
+                StringWriter sWriter = new StringWriter();
+                PrintWriter pWriter = new PrintWriter( sWriter );
+
+                e.printStackTrace( pWriter );
+
+                expressionMessageBuffer.append( "\n\nException:\n\n" ).append( sWriter.toString() );
-            else
+        }
+
+        if ( activeElementsFound )
+        {
+            messageBuffer.append( expressionMessageBuffer );
+        }
+        else
+        {
+            messageBuffer.append( "    (found static expression: \'" + expression
+                + "\' which may act as a default value).\n" );
+        }
+
+        if ( unmodifiableElementsFound )
+        {
+            if ( elementCount > 1 )
-                messageBuffer.append( "    (found static expression: \'" + expression +
-                                      "\' which may act as a default value).\n" );
+                messageBuffer.append( "    " );
-            if ( unmodifiableElementsFound )
-            {
-                if ( elementCount > 1 )
-                {
-                    messageBuffer.append( "    " );
-                }
-
-                messageBuffer.append( "NOTE: One or more purely derived expression elements were detected in \'" +
-                                      expression +
-                                      "\'.\n    If you continue to get this error after any other expression elements are specified correctly," +
-                                      "\n    please report this issue to the Maven development team.\n" );
-            }
+            messageBuffer
+                .append( "NOTE: One or more purely derived expression elements were detected in \'"
+                    + expression
+                    + "\'.\n    If you continue to get this error after any other expression elements are specified correctly,"
+                    + "\n    please report this issue to the Maven development team.\n" );
-    private void addParameterConfigDocumentation( String firstPart, String wholeExpression, String subExpression, StringBuffer expressionMessageBuffer )
+    private void addParameterConfigDocumentation( String firstPart, String wholeExpression, String subExpression,
+                                                 StringBuffer expressionMessageBuffer )
+        throws ExpressionDocumentationException
-        try
+        Map expressionDoco = ExpressionDocumenter.load();
+
+        Expression expr = (Expression) expressionDoco.get( subExpression );
+
+        if ( expr != null )
-            Map expressionDoco = ExpressionDocumenter.load();
-
-            ExpressionDocumentation info = (ExpressionDocumentation) expressionDoco.get( subExpression );
-
-            if ( info != null )
+            expressionMessageBuffer.append( "check that the following section of " );
+            if ( "project".equals( firstPart ) )
-                expressionMessageBuffer.append( "check that the following section of " );
-                if ( "project".equals( firstPart ) )
-                {
-                    expressionMessageBuffer.append( "the pom.xml " );
-                }
-                else if ( "settings".equals( firstPart ) )
-                {
-                    expressionMessageBuffer.append( "your ~/.m2/settings.xml file " );
-                }
-
-                expressionMessageBuffer.append( "is present and correct:\n\n" );
-                
-                String message = info.getOrigin();
-                
-                if ( message == null )
-                {
-                    message = info.getUsage();
-                }
-                
-                expressionMessageBuffer.append( message );
-                
-                String addendum = info.getAddendum();
-                
-                if ( addendum != null )
-                {
-                    expressionMessageBuffer.append("\n\n").append( addendum );
-                }
+                expressionMessageBuffer.append( "the pom.xml " );
-            else
+            else if ( "settings".equals( firstPart ) )
-                expressionMessageBuffer.append( "ensure that the expression: \'"
-                    + wholeExpression + "\' is satisfied" );
+                expressionMessageBuffer.append( "your ~/.m2/settings.xml file " );
+            expressionMessageBuffer.append( "is present and correct:\n\n" );
+
+            String message = expr.getConfiguration();
+
+            if ( message == null )
+            {
+                message = expr.getDescription();
+            }
+
+            expressionMessageBuffer.append( message );
+
+            Properties cliConfig = expr.getCliOptions();
+
+            if ( cliConfig != null && !cliConfig.isEmpty() )
+            {
+                expressionMessageBuffer.append( "\n\n-OR-\n\nUse the following command-line switches:\n" );
+
+                prettyPrintCommandLineSwitches( cliConfig, '.', expressionMessageBuffer );
+            }
-        catch ( ExpressionDocumentationException e )
+        else
-            expressionMessageBuffer.append( "\n\nERROR!! Failed to load expression documentation!" );
-
-            StringWriter sWriter = new StringWriter();
-            PrintWriter pWriter = new PrintWriter( sWriter );
-
-            e.printStackTrace( pWriter );
-
-            expressionMessageBuffer.append( "\n\nException:\n\n" ).append( sWriter.toString() );
+            expressionMessageBuffer.append( "ensure that the expression: \'" + wholeExpression + "\' is satisfied" );
+    private void prettyPrintCommandLineSwitches( Properties switches, char filler, StringBuffer expressionMessageBuffer )
+    {
+        int maxKeyLen = 0;
+
+        for ( Iterator it = switches.entrySet().iterator(); it.hasNext(); )
+        {
+            Map.Entry entry = (Map.Entry) it.next();
+
+            String key = (String) entry.getKey();
+
+            int keyLen = key.length();
+            if ( keyLen > maxKeyLen )
+            {
+                maxKeyLen = keyLen;
+            }
+        }
+
+        final int minFillerCount = 4;
+
+        for ( Iterator it = switches.entrySet().iterator(); it.hasNext(); )
+        {
+            Map.Entry entry = (Map.Entry) it.next();
+
+            String key = (String) entry.getKey();
+
+            int keyLen = key.length();
+
+            int fillerCount = maxKeyLen - keyLen + minFillerCount;
+
+            expressionMessageBuffer.append( '\n' ).append( key ).append( ' ' );
+
+            for ( int i = 0; i < fillerCount; i++ )
+            {
+                expressionMessageBuffer.append( filler );
+            }
+
+            expressionMessageBuffer.append( ' ' ).append( entry.getValue() );
+        }
+
+        expressionMessageBuffer.append( '\n' );
+    }
+
