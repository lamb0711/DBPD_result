o remove the group metadata processing bound to the legacy artifact system. a plugin manager will be responsible for creating any hints it may want to use. it's general preproccesing which could be anything. for our implementation we can just read the files directly if necessary. we can also simplify the deployment of hinting information as well.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@761021 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.repository.metadata.GroupRepositoryMetadata;
-import org.apache.maven.artifact.repository.metadata.Metadata;
-import org.apache.maven.artifact.repository.metadata.RepositoryMetadata;
-import org.apache.maven.artifact.repository.metadata.RepositoryMetadataManager;
-import org.apache.maven.artifact.repository.metadata.RepositoryMetadataResolutionException;
+//TODO: the antrun plugin has its own configurator, the only plugin that does. might need to think about how that works
-
-    //!!jvz This is one of the last components to remove the legacy system.
-    @Requirement
-    protected RepositoryMetadataManager repositoryMetadataManager;    
-    private Map<String,org.apache.maven.model.Plugin> pluginDefinitionsByPrefix = new HashMap<String,org.apache.maven.model.Plugin>();
+    private Map<String,Plugin> pluginDefinitionsByPrefix = new HashMap<String,Plugin>();
-        return getByPrefix( prefix, session.getPluginGroups(), project.getRemoteArtifactRepositories(), session.getLocalRepository() );
+        return null;
+        //return getByPrefix( prefix, session.getPluginGroups(), project.getRemoteArtifactRepositories(), session.getLocalRepository() );
-    }
-    
-    public org.apache.maven.model.Plugin getByPrefix( String pluginPrefix, List<String> groupIds, List<ArtifactRepository> pluginRepositories, ArtifactRepository localRepository )
-    {
-        // if not found, try from the remote repository
-        if ( !pluginDefinitionsByPrefix.containsKey( pluginPrefix ) )
-        {
-            logger.info( "Searching repository for plugin with prefix: \'" + pluginPrefix + "\'." );
-
-            loadPluginMappings( groupIds, pluginRepositories, localRepository );
-        }
-
-        org.apache.maven.model.Plugin result = pluginDefinitionsByPrefix.get( pluginPrefix );
-
-        if ( result == null )
-        {
-            logger.debug( "Failed to resolve plugin from prefix: " + pluginPrefix, new Throwable() );
-        }
-
-        return result;
-    }
-
-    private void loadPluginMappings( List<String> groupIds, List<ArtifactRepository> pluginRepositories, ArtifactRepository localRepository )
-    {
-        List<String> pluginGroupIds = new ArrayList<String>( groupIds );
-
-        for ( String groupId : pluginGroupIds )
-        {
-            try
-            {
-                RepositoryMetadata metadata = new GroupRepositoryMetadata( groupId );
-                
-                repositoryMetadataManager.resolve( metadata, pluginRepositories, localRepository );
-
-                Metadata repoMetadata = metadata.getMetadata();
-                
-                if ( repoMetadata != null )
-                {
-                    for ( org.apache.maven.artifact.repository.metadata.Plugin mapping : repoMetadata.getPlugins() )
-                    {
-                        String prefix = mapping.getPrefix();
-
-                        //if the prefix has already been found, don't add it again.
-                        //this is to preserve the correct ordering of prefix searching (MNG-2926)
-                        if ( !pluginDefinitionsByPrefix.containsKey( prefix ) )
-                        {
-                            String artifactId = mapping.getArtifactId();
-
-                            Plugin plugin = new Plugin();
-
-                            plugin.setGroupId( metadata.getGroupId() );
-
-                            plugin.setArtifactId( artifactId );
-
-                            pluginDefinitionsByPrefix.put( prefix, plugin );
-                        }
-                    }
-                }
-            }
-            catch ( RepositoryMetadataResolutionException e )
-            {
-                logger.warn( "Cannot resolve plugin-mapping metadata for groupId: " + groupId + " - IGNORING." );
-
-                logger.debug( "Error resolving plugin-mapping metadata for groupId: " + groupId + ".", e );
-            }
-        }
-    }
+    }    
