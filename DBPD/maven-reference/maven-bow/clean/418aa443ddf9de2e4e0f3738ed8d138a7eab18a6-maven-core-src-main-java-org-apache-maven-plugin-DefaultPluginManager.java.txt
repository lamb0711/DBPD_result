clean up exceptions


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163443 13f79535-47bb-0310-9956-ffa450edef68

-        MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver,
-                                                                      mavenProjectBuilder );
+        MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder );
-        ( (ArtifactEnabledContainer) container ).addComponent( pluginArtifact,
-                                                               artifactResolver,
-                                                               remotePluginRepositories,
-                                                               session.getLocalRepository(),
-                                                               metadataSource,
-                                                               artifactFilter );
+        ( (ArtifactEnabledContainer) container ).addComponent( pluginArtifact, artifactResolver,
+                                                               remotePluginRepositories, session.getLocalRepository(),
+                                                               metadataSource, artifactFilter );
-            throw new GoalExecutionException( "Unable to find goal: " + goalName );            
+            throw new GoalExecutionException( "Unable to find goal: " + goalName );
-        if ( mojoDescriptor.requiresDependencyResolution() )
+        try
-            resolveTransitiveDependencies( session );
+            if ( mojoDescriptor.requiresDependencyResolution() )
+            {
+                resolveTransitiveDependencies( session );
-            downloadDependencies( session );
+                downloadDependencies( session );
+            }
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new GoalExecutionException( "Unable to resolve required dependencies for goal", e );
-        message.append( "The '" + parameter.getName() ).
-            append( "' parameter is required for the execution of the " ).
-            append( mojo.getId() ).
-            append( " mojo and cannot be null." );
+        message.append( "The '" + parameter.getName() ).append( "' parameter is required for the execution of the " ).append(
+            mojo.getId() ).append( " mojo and cannot be null." );
-        artifactFilter = new ExclusionSetFilter( new String[]
-        {
-            "maven-core",
-            "maven-artifact",
-            "maven-model",
-            "maven-plugin",
-            "plexus-container-api",
-            "plexus-container-default",
-            "plexus-artifact-container",
-            "classworlds"
-        } );
+        artifactFilter = new ExclusionSetFilter( new String[]{"maven-core", "maven-artifact", "maven-model",
+                                                              "maven-plugin", "plexus-container-api",
+                                                              "plexus-container-default", "plexus-artifact-container",
+                                                              "classworlds"} );
-        throws GoalExecutionException
+        throws ArtifactResolutionException
-        try
-        {
-            MavenMetadataSource sourceReader = new MavenMetadataSource( artifactResolver, mavenProjectBuilder );
+        MavenMetadataSource sourceReader = new MavenMetadataSource( artifactResolver, mavenProjectBuilder );
-            ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(),
-                                                                                    context.getRemoteRepositories(),
-                                                                                    context.getLocalRepository(),
-                                                                                    sourceReader );
+        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(),
+                                                                                context.getRemoteRepositories(),
+                                                                                context.getLocalRepository(),
+                                                                                sourceReader );
-            project.getArtifacts().addAll( result.getArtifacts().values() );
-
-        }
-        catch ( Exception e )
-        {
-            throw new GoalExecutionException( "Error resolving transitive dependencies.", e );
-        }
+        project.getArtifacts().addAll( result.getArtifacts().values() );
-                artifactResolver.resolve( artifact,
-                                          context.getRemoteRepositories(),
-                                          context.getLocalRepository() );
+                artifactResolver.resolve( artifact, context.getRemoteRepositories(), context.getLocalRepository() );
