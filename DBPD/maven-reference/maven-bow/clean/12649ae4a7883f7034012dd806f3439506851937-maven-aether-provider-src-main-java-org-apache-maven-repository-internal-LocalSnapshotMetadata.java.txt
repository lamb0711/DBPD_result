[MNG-4955] [regression] Outdated remote snapshots are preferred over locally installed snapshots

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1054651 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.apache.maven.artifact.repository.metadata.SnapshotVersion;
-    private final Artifact artifact;
+    private final Collection<Artifact> artifacts = new ArrayList<Artifact>();
-    public LocalSnapshotMetadata( Artifact artifact )
+    private final boolean legacyFormat;
+
+    public LocalSnapshotMetadata( Artifact artifact, boolean legacyFormat )
-        super( createMetadata( artifact ), null );
-        this.artifact = artifact;
+        super( createMetadata( artifact, legacyFormat ), null );
+        this.legacyFormat = legacyFormat;
-    public LocalSnapshotMetadata( Artifact artifact, File file )
+    public LocalSnapshotMetadata( Metadata metadata, File file, boolean legacyFormat )
-        super( createMetadata( artifact ), file );
-        this.artifact = artifact;
+        super( metadata, file );
+        this.legacyFormat = legacyFormat;
-    private static Metadata createMetadata( Artifact artifact )
+    private static Metadata createMetadata( Artifact artifact, boolean legacyFormat )
+        if ( !legacyFormat )
+        {
+            metadata.setModelVersion( "1.1.0" );
+        }
+
+    public void bind( Artifact artifact )
+    {
+        artifacts.add( artifact );
+    }
+
-        return new LocalSnapshotMetadata( artifact, file );
+        return new LocalSnapshotMetadata( metadata, file, legacyFormat );
+
+        if ( !legacyFormat )
+        {
+            String lastUpdated = metadata.getVersioning().getLastUpdated();
+
+            Map<String, SnapshotVersion> versions = new LinkedHashMap<String, SnapshotVersion>();
+
+            for ( Artifact artifact : artifacts )
+            {
+                SnapshotVersion sv = new SnapshotVersion();
+                sv.setClassifier( artifact.getClassifier() );
+                sv.setExtension( artifact.getExtension() );
+                sv.setVersion( getVersion() );
+                sv.setUpdated( lastUpdated );
+                versions.put( getKey( sv.getClassifier(), sv.getExtension() ), sv );
+            }
+
+            Versioning versioning = recessive.getVersioning();
+            if ( versioning != null )
+            {
+                for ( SnapshotVersion sv : versioning.getSnapshotVersions() )
+                {
+                    String key = getKey( sv.getClassifier(), sv.getExtension() );
+                    if ( !versions.containsKey( key ) )
+                    {
+                        versions.put( key, sv );
+                    }
+                }
+            }
+
+            metadata.getVersioning().setSnapshotVersions( new ArrayList<SnapshotVersion>( versions.values() ) );
+        }
+
+        artifacts.clear();
+    }
+
+    private String getKey( String classifier, String extension )
+    {
+        return classifier + ':' + extension;
-        return artifact.getGroupId();
+        return metadata.getGroupId();
-        return artifact.getArtifactId();
+        return metadata.getArtifactId();
-        return artifact.getBaseVersion();
+        return metadata.getVersion();
