o Enabled support and discovery of JSR-330 components

o Added Slf4j logger factory to support generic JSR-330 logging

o Exported Guice package for components that access Guice (or better it's injector) directly

Widen export of Guice packages (not ideal, need to look into ways to avoid this)

o use specific exports

o for now we will attempt to hide all of Guice in plugin realms and we'll do a bit of testing

closes #3

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1380105 13f79535-47bb-0310-9956-ffa450edef68

+
+        // javax.inject, sisu-inject (JSR-330)
+        imports.put( "javax.inject.*", coreRealm );
+        imports.put( "javax.enterprise.inject.*", coreRealm );
+        imports.put( "org.sonatype.inject.*", coreRealm );
+        imports.put( "org.slf4j.*", coreRealm );
+        
+        // com.google
+        //
+        // We may potentially want to export these, but right now I'm not sure that anything Guice specific needs
+        // to be made available to plugin authors. If we find people are getting fancy and want to take advantage
+        // of Guice specifics we can expose that later. Really some testing needs to be done to see full hiding
+        // of Guice has any impact on what we may categorize as a standard JSR-330 based Tesla/Maven plugin.
+        //
+        // imports.put( "com.google.inject.*", coreRealm );
+        // imports.put( "com.google.inject.binder.*", coreRealm );
+        // imports.put( "com.google.inject.matcher.*", coreRealm );
+        // imports.put( "com.google.inject.name.*", coreRealm );
+        // imports.put( "com.google.inject.spi.*", coreRealm );
+        // imports.put( "com.google.inject.util.*", coreRealm );
