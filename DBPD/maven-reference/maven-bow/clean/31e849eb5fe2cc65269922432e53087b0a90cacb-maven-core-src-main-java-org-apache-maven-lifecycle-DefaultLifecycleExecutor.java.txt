o pushing in configurations for plugins for shane to check


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@770005 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.descriptor.Parameter;
-import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
-        List<MojoDescriptor> lifecyclePlan = calculateLifecyclePlan( task, session );        
+        List<MojoExecution> lifecyclePlan = calculateLifecyclePlan( task, session );        
-        for ( MojoDescriptor mojoDescriptor : lifecyclePlan )
-        {
-            MojoExecution mojoExecution = new MojoExecution( mojoDescriptor ); 
-
-            System.out.println( mojoExecution.getMojoDescriptor().getGoal() );
-            
+        for ( MojoExecution mojoExecution : lifecyclePlan )
+        {            
-    public List<MojoDescriptor> calculateLifecyclePlan( String lifecyclePhase, MavenSession session )
+    public List<MojoExecution> calculateLifecyclePlan( String lifecyclePhase, MavenSession session )
-                        {
-                            phaseToMojoMapping.get( md.getPhase() ).add( s );
+                        {                                                          
+                            if ( phaseToMojoMapping.get( md.getPhase() ) != null )                                
+                            {
+                                phaseToMojoMapping.get( md.getPhase() ).add( s );                                
+                            }                            
+                        
+                        //TODO Here we need to break when we have reached the desired phase.
-        List<MojoDescriptor> lifecyclePlan = new ArrayList<MojoDescriptor>(); 
-        
+        List<MojoExecution> lifecyclePlan = new ArrayList<MojoExecution>(); 
+                        
-                lifecyclePlan.add( getMojoDescriptor( mojo, project, session.getLocalRepository() ) );
+                MojoDescriptor mojoDescriptor = getMojoDescriptor( mojo, project, session.getLocalRepository() ); 
+                
+                MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );
+                
+                String g = mojoExecution.getMojoDescriptor().getPluginDescriptor().getGroupId();
+                
+                String a = mojoExecution.getMojoDescriptor().getPluginDescriptor().getArtifactId();
+                
+                Plugin p = project.getPlugin( g + ":" + a );
+                
+                for( PluginExecution e : p.getExecutions() )
+                {
+                    for( String goal : e.getGoals() )
+                    {
+                        if( mojoDescriptor.getGoal().equals( goal ) )
+                        {
+                            mojoExecution.setConfiguration( (Xpp3Dom) e.getConfiguration() );
+                        }
+                    }
+                }
+                
+                lifecyclePlan.add( mojoExecution );
-        return convert( getMojoDescriptor( groupId+":"+artifactId+":"+version+":"+goal, project, localRepository ).getMojoConfiguration() );
+        return convert( getMojoDescriptor( groupId+":"+artifactId+":"+version+":"+goal, project, localRepository ) );
-        PlexusConfiguration configuration = mojoDescriptor.getConfiguration();
-        
-        return convert( configuration );
+        return convert( mojoDescriptor );
-    public Xpp3Dom convert( PlexusConfiguration c )
+    public Xpp3Dom convert( MojoDescriptor mojoDescriptor  )
-        Xpp3Dom dom = new Xpp3Dom( "configuration" );
+        Map<String,Parameter> parameters = mojoDescriptor.getParameterMap();
+        Xpp3Dom dom = new Xpp3Dom( "configuration" );
+
+        PlexusConfiguration c = mojoDescriptor.getMojoConfiguration();
+                
-            dom.addChild( e );            
+            dom.addChild( e );
