[MNG-4840] Prerequisites is not working on m3

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1055174 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashMap;
+import java.util.TreeSet;
+import org.apache.maven.plugin.MavenPluginManager;
+import org.apache.maven.plugin.PluginResolutionException;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
-import org.sonatype.aether.repository.LocalRepository;
+import org.sonatype.aether.util.version.GenericVersionScheme;
+import org.sonatype.aether.version.InvalidVersionSpecificationException;
+import org.sonatype.aether.version.Version;
+import org.sonatype.aether.version.VersionScheme;
+    @Requirement
+    private MavenPluginManager pluginManager;
+
-        LocalRepository localRepo = request.getRepositorySession().getLocalRepository();
-
+        selectVersion( result, request, versions );
+
+        return result;
+    }
+
+    private void selectVersion( DefaultPluginVersionResult result, PluginVersionRequest request, Versions versions )
+        throws PluginVersionResolutionException
+    {
+        String version = null;
+        ArtifactRepository repo = null;
+
-            result.setVersion( versions.releaseVersion );
-            result.setRepository( ( versions.releaseRepository == null ) ? localRepo : versions.releaseRepository );
+            version = versions.releaseVersion;
+            repo = versions.releaseRepository;
-            result.setVersion( versions.latestVersion );
-            result.setRepository( ( versions.latestRepository == null ) ? localRepo : versions.latestRepository );
+            version = versions.latestVersion;
+            repo = versions.latestRepository;
+        }
+        if ( version != null && !isCompatible( request, version ) )
+        {
+            versions.versions.remove( version );
+            version = null;
+        }
+
+        if ( version == null )
+        {
+            VersionScheme versionScheme = new GenericVersionScheme();
+
+            TreeSet<Version> releases = new TreeSet<Version>( Collections.reverseOrder() );
+            TreeSet<Version> snapshots = new TreeSet<Version>( Collections.reverseOrder() );
+
+            for ( String ver : versions.versions.keySet() )
+            {
+                try
+                {
+                    Version v = versionScheme.parseVersion( ver );
+
+                    if ( ver.endsWith( "-SNAPSHOT" ) )
+                    {
+                        snapshots.add( v );
+                    }
+                    else
+                    {
+                        releases.add( v );
+                    }
+                }
+                catch ( InvalidVersionSpecificationException e )
+                {
+                    continue;
+                }
+            }
+
+            for ( Version v : releases )
+            {
+                String ver = v.toString();
+                if ( isCompatible( request, ver ) )
+                {
+                    version = ver;
+                    repo = versions.versions.get( version );
+                    break;
+                }
+            }
+
+            if ( version == null )
+            {
+                for ( Version v : snapshots )
+                {
+                    String ver = v.toString();
+                    if ( isCompatible( request, ver ) )
+                    {
+                        version = ver;
+                        repo = versions.versions.get( version );
+                        break;
+                    }
+                }
+            }
+        }
+
+        if ( version != null )
+        {
+            result.setVersion( version );
+            result.setRepository( repo );
-            throw new PluginVersionResolutionException( request.getGroupId(), request.getArtifactId(), localRepo,
+            throw new PluginVersionResolutionException( request.getGroupId(), request.getArtifactId(),
+                                                        request.getRepositorySession().getLocalRepository(),
+    }
-        return result;
+    private boolean isCompatible( PluginVersionRequest request, String version )
+    {
+        Plugin plugin = new Plugin();
+        plugin.setGroupId( request.getGroupId() );
+        plugin.setArtifactId( request.getArtifactId() );
+        plugin.setVersion( version );
+
+        PluginDescriptor pluginDescriptor;
+
+        try
+        {
+            pluginDescriptor =
+                pluginManager.getPluginDescriptor( plugin, request.getRepositories(), request.getRepositorySession() );
+        }
+        catch ( PluginResolutionException e )
+        {
+            logger.debug( "Ignoring unresolvable plugin version " + version, e );
+            return false;
+        }
+        catch ( Exception e )
+        {
+            // ignore for now and delay failure to higher level processing
+            return true;
+        }
+
+        try
+        {
+            pluginManager.checkRequiredMavenVersion( pluginDescriptor );
+        }
+        catch ( Exception e )
+        {
+            logger.debug( "Ignoring incompatible plugin version " + version + ": " + e.getMessage() );
+            return false;
+        }
+
+        return true;
+
+            for ( String version : versioning.getVersions() )
+            {
+                if ( !versions.versions.containsKey( version ) )
+                {
+                    versions.versions.put( version, repository );
+                }
+            }
+        Map<String, ArtifactRepository> versions = new LinkedHashMap<String, ArtifactRepository>();
+
