o Added mavenHomeLocal as a argument to the project builder. The project
  builder should now completly obey mavenHomeLocal.
o Made mavenHome and mavenHomeLocal Files instead of Strings.
o Adding licenses to some files missing license.
o Silencing some eclipse warnings.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163188 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.StringReader;
+import java.io.StringWriter;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+
+import org.codehaus.plexus.util.IOUtil;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.io.StringReader;
-import java.io.StringWriter;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-    private Model superModel;
-
-    public MavenProject build( File projectDescriptor )
+    // ----------------------------------------------------------------------
+    // MavenProjectBuilder Implementation
+    // ----------------------------------------------------------------------
+
+    public MavenProject build( File mavenLocalHome, File projectDescriptor )
-        return build( projectDescriptor, false );
+        return build( mavenLocalHome, projectDescriptor, false );
-    public MavenProject build( File projectDescriptor, boolean resolveDependencies )
+    public MavenProject build( File mavenLocalHome, File projectDescriptor, boolean resolveDependencies )
-        String localRepositoryValue = null;
+        ArtifactRepository localRepository = getLocalRepository( mavenLocalHome );
-            // TODO: rename to super-pom.xml so it is not used by the reactor
-            superModel = modelReader.read( new InputStreamReader( DefaultMavenProjectBuilder.class.getResourceAsStream( "pom-4.0.0.xml" ) ) );
-
-            Model userModel = null;
-            // TODO: use maven home local instead of user.home/.m2
-            File userModelFile = new File( System.getProperty( "user.home" ) + "/.m2", "override.xml" );
-            if ( userModelFile.exists() )
-            {
-                userModel = modelReader.read( new FileReader( userModelFile ) );
-                if ( userModel.getParent() != null )
-                {
-                    throw new ProjectBuildingException( "Inheritence not supported in the user override POM" );
-                }
-
-                if ( userModel.getLocal() != null && userModel.getLocal().getRepository() != null )
-                {
-                    localRepositoryValue = userModel.getLocal().getRepository();
-                }
-                superModel.getRepositories().addAll( userModel.getRepositories() );
-            }
-
-            if ( localRepositoryValue == null && superModel.getLocal() != null && superModel.getLocal().getRepository() != null )
-            {
-                localRepositoryValue = superModel.getLocal().getRepository();
-            }
-
-            localRepositoryValue = System.getProperty( "maven.repo.local", localRepositoryValue );
-            System.setProperty( "maven.repo.local", localRepositoryValue );
-
-            ArtifactRepository localRepository = null;
-            if ( localRepositoryValue != null )
-            {
-                localRepository = RepositoryUtils.localRepositoryToWagonRepository( localRepositoryValue );
-            }
-            else
-            {
-                throw new ProjectBuildingException( "A local repository must be specified" );
-            }
+            Model superModel = getSuperModel();
+            Model userModel = getUserOverrideModel( superModel, mavenLocalHome );
+
-            if ( isEmpty( parentModel.getGroupId() ) )
+            if ( StringUtils.isEmpty( parentModel.getGroupId() ) )
-            else if ( isEmpty( parentModel.getArtifactId() ) )
+            else if ( StringUtils.isEmpty( parentModel.getArtifactId() ) )
-            else if ( isEmpty( parentModel.getVersion() ) )
+            else if ( StringUtils.isEmpty( parentModel.getVersion() ) )
-        throws Exception
+        throws ProjectBuildingException
-        Reader reader = null;
-
-            reader = new FileReader( projectDescriptor );
+            return readModel( new FileReader( projectDescriptor ) );
+        }
+        catch( FileNotFoundException ex )
+        {
+            throw new ProjectBuildingException( "Error while building model.", ex );
+        }
+    }
-            Model model = modelReader.read( reader );
-
-            reader.close();
-
-            return model;
+    private Model readModel( Reader reader )
+        throws ProjectBuildingException
+    {
+        try
+        {
+            return modelReader.read( reader );
+        }
+        catch( Exception ex )
+        {
+            throw new ProjectBuildingException( "Error while building model.", ex );
-            if ( reader != null )
-            {
-                try
-                {
-                    reader.close();
-                }
-                catch ( IOException e )
-                {
-                    // ignore
-                }
-            }
+            IOUtil.close( reader );
-    private boolean isEmpty( String string )
+    // ----------------------------------------------------------------------
+    //
+    // ----------------------------------------------------------------------
+
+    /**
+     * Locate the local repository.
+     * 
+     * <ol>
+     *  <li>Try ${maven.repo.local}
+     *  <li>Look in mavenHomeLocal/override.xml
+     *  <li>Set to the default value (${user.home}/.m2/repository).
+     * </ol>
+     * 
+     * @param mavenHomeLocal The maven local home directory
+     * @return Returns the local repository
+     * @throws ProjectBuildingException
+     */
+    protected ArtifactRepository getLocalRepository( File mavenHomeLocal )
+        throws ProjectBuildingException
-        return string == null || string.trim().length() == 0;
+        String localRepository = System.getProperty( "maven.repo.local" );
+
+        Model superModel = getSuperModel();
+
+        if ( !StringUtils.isEmpty( localRepository ) )
+        {
+            return RepositoryUtils.localRepositoryToWagonRepository( localRepository );
+        }
+
+        if ( superModel.getLocal() != null && superModel.getLocal().getRepository() != null )
+        {
+            localRepository = superModel.getLocal().getRepository();
+        }
+
+        Model userModel = getUserOverrideModel( superModel, mavenHomeLocal );
+
+        if ( userModel != null && userModel.getLocal() != null && userModel.getLocal().getRepository() != null )
+        {
+            localRepository = userModel.getLocal().getRepository();
+        }
+
+        if ( localRepository == null )
+        {
+            String userHome = System.getProperty( "user.home" );
+
+            localRepository = new File( userHome, ".m2/repository" ).getAbsolutePath();
+        }
+
+        return RepositoryUtils.localRepositoryToWagonRepository( localRepository );
+    }
+
+    private Model getSuperModel()
+        throws ProjectBuildingException
+    {
+        return readModel( new InputStreamReader( DefaultMavenProjectBuilder.class.getResourceAsStream( "pom-4.0.0.xml" ) ) );
+    }
+
+    private Model getUserOverrideModel( Model superModel, File mavenHomeLocal )
+        throws ProjectBuildingException
+    {
+        File userModelFile = new File( mavenHomeLocal, "override.xml" );
+
+        if ( !userModelFile.exists() )
+        {
+            return null;
+        }
+
+        Model model = readModel( userModelFile );
+
+        if ( model.getParent() != null )
+        {
+            throw new ProjectBuildingException( "Inheritence not supported in the user override POM" );
+        }
+
+        superModel.getRepositories().addAll( model.getRepositories() );
+
+        return model;
