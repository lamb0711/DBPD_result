[MNG-6697] New fast model interpolator not using reflection (#261)

* [MNG-6697] New fast model interpolator not using reflection

* [MNG-6697] Fix management key in case a field has been modified

* [MNG-6697] Remove the unused FIELDS_CACHE and make the InnerInterpolator private

* [MNG-6697] Clean up the code to remove a few warnings

-import org.apache.maven.model.building.ModelProblem.Severity;
-import org.apache.maven.model.building.ModelProblem.Version;
-import org.apache.maven.model.building.ModelProblemCollectorRequest;
-import org.codehaus.plexus.interpolation.InterpolationException;
-import org.codehaus.plexus.interpolation.Interpolator;
-    private Interpolator interpolator;
-
-    private RecursionInterceptor recursionInterceptor;
-
-        interpolator = createInterpolator();
-        recursionInterceptor = new PrefixAwareRecursionInterceptor( PROJECT_PREFIXES );
-    protected String interpolateInternal( String src, List<? extends ValueSource> valueSources,
-                                          List<? extends InterpolationPostProcessor> postProcessors,
-                                          ModelProblemCollector problems )
+    protected RecursionInterceptor createRecursionInterceptor()
-        if ( !src.contains( "${" ) )
-        {
-            return src;
-        }
-
-        String result = src;
-        synchronized ( this )
-        {
-
-            for ( ValueSource vs : valueSources )
-            {
-                interpolator.addValueSource( vs );
-            }
-
-            for ( InterpolationPostProcessor postProcessor : postProcessors )
-            {
-                interpolator.addPostProcessor( postProcessor );
-            }
-
-            try
-            {
-                try
-                {
-                    result = interpolator.interpolate( result, recursionInterceptor );
-                }
-                catch ( InterpolationException e )
-                {
-                    problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
-                        .setMessage( e.getMessage() ).setException( e ) );
-                }
-
-                interpolator.clearFeedback();
-            }
-            finally
-            {
-                for ( ValueSource vs : valueSources )
-                {
-                    interpolator.removeValuesSource( vs );
-                }
-
-                for ( InterpolationPostProcessor postProcessor : postProcessors )
-                {
-                    interpolator.removePostProcessor( postProcessor );
-                }
-            }
-        }
-
-        return result;
-    }
-
-    protected RecursionInterceptor getRecursionInterceptor()
-    {
-        return recursionInterceptor;
-    }
-
-    protected void setRecursionInterceptor( RecursionInterceptor recursionInterceptor )
-    {
-        this.recursionInterceptor = recursionInterceptor;
-    }
-
-    protected abstract Interpolator createInterpolator();
-
-    protected final Interpolator getInterpolator()
-    {
-        return interpolator;
+        return new PrefixAwareRecursionInterceptor( PROJECT_PREFIXES );
