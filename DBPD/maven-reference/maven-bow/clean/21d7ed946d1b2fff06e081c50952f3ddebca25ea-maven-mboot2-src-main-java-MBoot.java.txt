o update for the api/impl separation in Plexus
o make the runtime setup the same as what the Plexus runtime does which
  is to put classworlds in a separate directory as to simplify the
  directive to include all the core JARs: one line as opposed to having
  to list all the dependencies.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163199 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
-import java.io.InputStream;
+import java.util.Date;
-import java.util.Date;
-    // I need:
-    // o pom install (done)
-    // o jar install (done)
-    // o bean generation - this is not entirely necessary
-    // o jelly generation - this is not entirely necessary
-    // o plugin descriptor (done)
-    // o xpp3/reader and writer (done)
-    // o compilation of generated sources in target/generated-sources (done)
-    // o need to run modello to generate the sources (done)
-    // o make this work over and over again (done)
-    // o hide the dependencies for mboot in the JAR (done)
-
-    // maven-core
-    // maven-plugin
-    // maven-plugins
-
-    //
+    // These are the bootstrap processes' dependencies
-    String[] deps = new String[]
+    String[] bootstrapDeps = new String[]
+        "maven/jars/wagon-http-lightweight-1.0-alpha-1-SNAPSHOT.jar",
-        "qdox/jars/qdox-1.2.jar",
-        "maven/jars/wagon-http-lightweight-1.0-alpha-1-SNAPSHOT.jar"
+        "qdox/jars/qdox-1.2.jar"
+    // ----------------------------------------------------------------------
+    // These are plexus' runtime dependencies
+    // ----------------------------------------------------------------------
+
+    String[] plexusDeps = new String[]
+    {
+        "classworlds/jars/classworlds-1.1-SNAPSHOT.jar",
+        "plexus/jars/plexus-container-api-1.0-alpha-1-SNAPSHOT.jar",
+        "plexus/jars/plexus-container-default-1.0-alpha-1-SNAPSHOT.jar",
+        "plexus/jars/plexus-utils-1.0-alpha-1-SNAPSHOT.jar",
+        "xpp3/jars/xpp3-1.1.3.3.jar",
+        "xstream/jars/xstream-1.0-SNAPSHOT.jar",
+    };
+
+    // ----------------------------------------------------------------------
+    // These are modello's runtime dependencies
+    // ----------------------------------------------------------------------
+
-        "plexus/jars/plexus-0.17-SNAPSHOT.jar",
+        "plexus/jars/plexus-container-api-1.0-alpha-1-SNAPSHOT.jar",
+        "plexus/jars/plexus-container-default-1.0-alpha-1-SNAPSHOT.jar",
+        "plexus/jars/plexus-utils-1.0-alpha-1-SNAPSHOT.jar",
-    String[] plexusDeps = new String[]
-    {
-        "classworlds/jars/classworlds-1.1-SNAPSHOT.jar",
-        //"plexus/jars/plexus-0.17.jar",
-        "plexus/jars/plexus-0.17-SNAPSHOT.jar",
-        //"plexus/jars/plexus-artifact-container-1.0-alpha-1-SNAPSHOT.jar",
-        "xpp3/jars/xpp3-1.1.3.3.jar",
-        "xstream/jars/xstream-1.0-SNAPSHOT.jar",
-        //"maven/jars/maven-artifact-2.0-SNAPSHOT.jar",
-        //"maven/jars/wagon-api-1.0-alpha-1-SNAPSHOT.jar",
-        //"maven/jars/wagon-http-lightweight-1.0-alpha-1-SNAPSHOT.jar"
-    };
-
-        // "maven-1.x-integration",
-        mbootDependencies = Arrays.asList( deps );
+        mbootDependencies = Arrays.asList( bootstrapDeps );
+        String boot = new File( dist, "core/boot" ).getAbsolutePath();
+
+        FileUtils.mkdir( new File( boot ).getPath() );
+
-            FileUtils.copyFileToDirectory( repoLocal + "/" + plexusDeps[i], core );
+            if ( plexusDeps[i].startsWith( "classworlds") )
+            {
+                FileUtils.copyFileToDirectory( repoLocal + "/" + plexusDeps[i], boot );
+            }
+            else
+            {
+                FileUtils.copyFileToDirectory( repoLocal + "/" + plexusDeps[i], core );
+            }
-                 d.artifactId.equals( "junit" ) )// ||
-                 //d.artifactId.equals( "wagon-api" ) ||
-                 //d.artifactId.equals( "plexus-artifact-container" ) ||
-                 //d.artifactId.equals( "maven-artifact" ) )
+                 d.artifactId.equals( "junit" ) )
-        // Download deps
+        // Download bootstrapDeps
-            generateSources( model.getAbsolutePath(), "java", generatedSources, "3.0.0", "true" );
+            //generateSources( model.getAbsolutePath(), "java", generatedSources, "3.0.0", "true" );
-            generateSources( model.getAbsolutePath(), "xpp3-reader", generatedSources, "3.0.0", "true" );
+            //generateSources( model.getAbsolutePath(), "xpp3-reader", generatedSources, "3.0.0", "true" );
-            generateSources( model.getAbsolutePath(), "xpp3-writer", generatedSources, "3.0.0", "true" );
+            //generateSources( model.getAbsolutePath(), "xpp3-writer", generatedSources, "3.0.0", "true" );
-            generateSources( model.getAbsolutePath(), "xdoc", generatedDocs, "3.0.0", "true" );
+            //generateSources( model.getAbsolutePath(), "xdoc", generatedDocs, "3.0.0", "true" );
