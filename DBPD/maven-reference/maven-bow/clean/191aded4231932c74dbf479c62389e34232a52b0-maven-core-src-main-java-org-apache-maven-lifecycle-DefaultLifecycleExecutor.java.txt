o my test for executing a mojo in isolation is now complete and passes and gives some real indication of the problem that  exists in trying to expose the plugin manager to any external client. the test is pretty nasty but now i can
  work against this while i refactor. i can now merge to trunk.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@751980 13f79535-47bb-0310-9956-ffa450edef68

-            descriptor = getMojoDescriptor( task, session, project, task, true, false );
+            descriptor = getMojoDescriptor( task, session, project );
-                    MojoDescriptor mojo = getMojoDescriptor( task, session, project, task, true, false );
+                    MojoDescriptor mojo = getMojoDescriptor( task, session, project );
-        MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session, project, task, true, false );
+        MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session, project );
-
-            System.out.println( ">> " + mojoExecution );
-                    MojoDescriptor mojoDescriptor = getMojoDescriptor( goal, session, project, selectedPhase, false, optionalMojos.contains( goal ) );
+                    MojoDescriptor mojoDescriptor = getMojoDescriptor( goal, session, project );
-    private MojoDescriptor getMojoDescriptor( String task, MavenSession session, MavenProject project, String invokedVia, boolean canUsePrefix, boolean isOptionalMojo )
+    MojoDescriptor getMojoDescriptor( String task, MavenSession session, MavenProject project )
-        PluginDescriptor pluginDescriptor = null;
-
-        StringTokenizer tok = new StringTokenizer( task, ":" );
-        int numTokens = tok.countTokens();
-
-        if ( numTokens == 2 )
+        PluginDescriptor pluginDescriptor = null;        
+        String[] taskSegments = StringUtils.split( task, ":" );
+        
+        if ( taskSegments.length == 2 )
-            if ( !canUsePrefix )
-            {
-                String msg = "Mapped-prefix lookup of mojos are only supported from direct invocation. " + "Please use specification of the form groupId:artifactId[:version]:goal instead. "
-                    + "(Offending mojo: \'" + task + "\', invoked via: \'" + invokedVia + "\')";
-                throw new LifecycleExecutionException( msg );
-            }
-
-            String prefix = tok.nextToken();
-            goal = tok.nextToken();
-
-            plugin = pluginManager.findPluginForPrefix( prefix, project, session );
+            String prefix = taskSegments[0];
+            goal = taskSegments[1];
+            // This is the case where someone has executed a single goal from the command line
+            // of the form:
+            //
+            // mvn remote-resources:process
+            //
+            // From the metadata stored on the server which has been created as part of a standard
+            // Maven plugin deployment we will find the right PluginDescriptor from the remote
+            // repository.
+            
+            plugin = pluginManager.findPluginForPrefix( prefix, project, session );
+                        
-
-            // 3. search plugins in the current POM
+            // Search plugin in the current POM
-            // 4. default to o.a.m.plugins and maven-<prefix>-plugin
+            // Default to o.a.m.plugins and maven-<prefix>-plugin
-        else if ( numTokens == 3 || numTokens == 4 )
+        else if ( taskSegments.length == 3 || taskSegments.length == 4 )
+            plugin.setGroupId( taskSegments[0] );
+            plugin.setArtifactId( taskSegments[1] );
-            plugin.setGroupId( tok.nextToken() );
-            plugin.setArtifactId( tok.nextToken() );
-
-            if ( numTokens == 4 )
+            if ( taskSegments.length == 4 )
-                plugin.setVersion( tok.nextToken() );
+                plugin.setVersion( taskSegments[3] );
-            goal = tok.nextToken();
+            goal = taskSegments[4];
-        if ( mojoDescriptor == null )
-        {
-            if ( isOptionalMojo )
-            {
-                logger.info( "Skipping missing optional mojo: " + task );
-            }
-            else
-            {
-                throw new LifecycleExecutionException( "Required goal not found: " + task + " in " + pluginDescriptor.getId() );
-            }
-        }
-
+        
