PR: MNG-598
implement ability to retrieve packaging handlers (lifecycle mappings) from extension plugins. Remove plugin mapping
metadata for the same
integration tests are in place for type handlers but commented out until implemented (41)


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@225263 13f79535-47bb-0310-9956-ffa450edef68

+/*
+ * Copyright 2001-2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
-import org.apache.maven.lifecycle.mapping.LifecycleMapping;
-import org.codehaus.classworlds.ClassRealm;
-import org.codehaus.classworlds.ClassWorld;
-import org.codehaus.classworlds.DuplicateRealmException;
-import org.codehaus.plexus.component.discovery.ComponentDiscoverer;
-import org.codehaus.plexus.component.discovery.DefaultComponentDiscoverer;
-import org.codehaus.plexus.component.discovery.PlexusXmlComponentDiscoverer;
-import org.codehaus.plexus.component.repository.ComponentDescriptor;
-import org.codehaus.plexus.component.repository.ComponentSetDescriptor;
-import org.codehaus.plexus.configuration.PlexusConfigurationException;
-import org.codehaus.plexus.context.Context;
-import org.codehaus.plexus.context.DefaultContext;
-import java.net.MalformedURLException;
-import java.util.ArrayList;
-            mappedPlugin.setPackagingHandlers( extractPackagingHandlers() );
-
-    private List extractPackagingHandlers()
-        throws MojoExecutionException
-    {
-        List packagingHandlers = new ArrayList();
-
-        Context ctx = new DefaultContext();
-
-        ClassWorld discoveryWorld = new ClassWorld();
-
-        try
-        {
-            ClassRealm discoveryRealm = discoveryWorld.newRealm( "packageHandler-discovery" );
-
-            File classDir = new File( classesDirectory ).getAbsoluteFile();
-
-            discoveryRealm.addConstituent( classDir.toURL() );
-
-            packagingHandlers
-                .addAll( discoverLifecycleMappings( ctx, discoveryRealm, new DefaultComponentDiscoverer() ) );
-
-            packagingHandlers.addAll( discoverLifecycleMappings( ctx, discoveryRealm,
-                                                                 new PlexusXmlComponentDiscoverer() ) );
-        }
-        catch ( DuplicateRealmException e )
-        {
-            throw new MojoExecutionException( "Error constructing class-realm for lifecycle-mapping detection.", e );
-        }
-        catch ( MalformedURLException e )
-        {
-            throw new MojoExecutionException( "Error constructing class-realm for lifecycle-mapping detection.", e );
-        }
-        catch ( PlexusConfigurationException e )
-        {
-            throw new MojoExecutionException( "Error detecting lifecycle-mappings.", e );
-        }
-
-        return packagingHandlers;
-    }
-
-    private List discoverLifecycleMappings( Context ctx, ClassRealm discoveryRealm, ComponentDiscoverer discoverer )
-        throws PlexusConfigurationException
-    {
-        discoverer.setManager( new DummyComponentDiscovererManager() );
-
-        List packagingHandlers = new ArrayList();
-
-        List componentSetDescriptors = discoverer.findComponents( ctx, discoveryRealm );
-
-        if ( componentSetDescriptors != null )
-        {
-            for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )
-            {
-                ComponentSetDescriptor setDescriptor = (ComponentSetDescriptor) it.next();
-
-                List components = setDescriptor.getComponents();
-
-                if ( components != null )
-                {
-                    for ( Iterator componentIterator = components.iterator(); componentIterator.hasNext(); )
-                    {
-                        ComponentDescriptor descriptor = (ComponentDescriptor) componentIterator.next();
-
-                        if ( LifecycleMapping.ROLE.equals( descriptor.getRole() ) )
-                        {
-                            packagingHandlers.add( descriptor.getRoleHint() );
-                        }
-                    }
-                }
-            }
-        }
-
-        return packagingHandlers;
-    }
-
-
-    public static class DummyComponentDiscovererManager
-        implements ComponentDiscovererManager
-    {
-
-        DummyComponentDiscovererManager()
-        {
-        }
-
-        public List getComponentDiscoverers()
-        {
-            return null;
-        }
-
-        public void registerComponentDiscoveryListener( ComponentDiscoveryListener listener )
-        {
-        }
-
-        public void removeComponentDiscoveryListener( ComponentDiscoveryListener listener )
-        {
-        }
-
-        public void fireComponentDiscoveryEvent( ComponentDiscoveryEvent event )
-        {
-        }
-
-        public void initialize()
-        {
-        }
-
-        public List getListenerDescriptors()
-        {
-            return null;
-        }
-
-    }
