o swapping the branch to trunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779660 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Arrays;
-import java.util.Collection;
+import org.apache.maven.MavenExecutionException;
+import org.apache.maven.MissingModuleException;
-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.errors.CoreErrorReporter;
-import org.apache.maven.errors.CoreReporterManager;
-import org.apache.maven.execution.MavenSession;
-import org.apache.maven.execution.ReactorManager;
-import org.apache.maven.lifecycle.LifecycleUtils;
+import org.apache.maven.lifecycle.LifecycleExecutor;
-import org.apache.maven.model.Plugin;
-import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
-import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
-import org.apache.maven.monitor.event.DefaultEventDispatcher;
-import org.apache.maven.monitor.event.EventDispatcher;
-import org.apache.maven.plugin.InvalidPluginException;
-import org.apache.maven.plugin.MavenPluginCollector;
-import org.apache.maven.plugin.MavenPluginDiscoverer;
-import org.apache.maven.plugin.MojoExecution;
+import org.apache.maven.model.io.ModelReader;
+import org.apache.maven.model.io.ModelWriter;
-import org.apache.maven.plugin.PluginManagerException;
-import org.apache.maven.plugin.PluginNotFoundException;
-import org.apache.maven.plugin.PluginVersionNotFoundException;
-import org.apache.maven.plugin.PluginVersionResolutionException;
-import org.apache.maven.reactor.MavenExecutionException;
-import org.apache.maven.reactor.MissingModuleException;
-import org.codehaus.plexus.classworlds.realm.ClassRealm;
+//TODO: just turn this into a component
-    public static final String DEFAULT_LOCAL_REPO_ID = "local";
-
-    public static final File defaultUserLocalRepository = new File( userMavenConfigurationHome, "repository" );
-
+    //TODO: this needs to be the standard container
-    private RepositorySystem repositorySystem;
-    
-    private MavenXpp3Reader modelReader;
+    private ModelReader modelReader;
-    private MavenXpp3Writer modelWriter;
+    private ModelWriter modelWriter;
-    private ClassRealm realm;
-
+    private MavenExecutionRequest request;
+    
+    private LifecycleExecutor lifecycleExecutor;
+
-    public Collection<MojoExecution> getMojoExecutionsForGoal(String goal) 
-        throws Exception
-    {
-        return pluginManager.getMojoExecutionsForGoal( goal );
-    }
-
-    /*
-    public Object getMojoParameterFor(MojoExecution mojoExecution, String xPath) 
-        throws Exception
-    {
-        return pluginManager.getMojoParameterFor( mojoExecution, xPath);
-    }
-    */
-
-    public void executeMojo(MojoExecution mojoExecution, MavenSession mavenSession ) 
-        throws Exception
-    {
-        pluginManager.executeMojo( mojoExecution, mavenSession );
-    }
-
-    	return modelReader.read( reader );
+    	return modelReader.read( reader, null );
-        modelWriter.write( writer, model );
+        modelWriter.write( writer, null, model );
-        modelWriter.write( writer, model );
+        modelWriter.write( writer, null, model );
-    /**
-     * mkleint: protected so that IDE integrations can selectively allow downloading artifacts
-     * from remote repositories (if they prohibit by default on project loading)
-     */
-    protected void verifyPlugin( Plugin plugin, MavenProject project )
-        throws ComponentLookupException, ArtifactResolutionException, PluginVersionResolutionException,
-        ArtifactNotFoundException, InvalidPluginException, PluginManagerException,
-        PluginNotFoundException, PluginVersionNotFoundException
-    {
-        PluginManager pluginManager = container.lookup( PluginManager.class );
-        MavenSession session = new MavenSession( container, request, null, null );
-        pluginManager.verifyPlugin( plugin, project, session );
-    }
-
-        CoreErrorReporter errorReporter = request.getErrorReporter();
-        errorReporter.clearErrors();
-
-        CoreReporterManager.setReporter( errorReporter );
-
+    
+    // currently in m2eclipse each project is read read a single project for dependencies
+    // Project
+    // Exceptions
+    // explicit for exceptions where coordinate are involved.
+    // m2eclipse is not using the topological sorting at all because it keeps track itself.
+    
-
-            CoreErrorReporter errorReporter = request.getErrorReporter();
-            errorReporter.clearErrors();
-
-            CoreReporterManager.setReporter( errorReporter );
-
-            readProject( request.getPom(), request );
-        catch ( ProjectBuildingException e )
-        {
-            return result.addException( e );
-        }
-        catch ( MissingModuleException e )
-        {
-            return result.addException( e );
-        }
-
-        ReactorManager reactorManager = maven.createReactorManager( request, result );
-
-        if ( result.hasExceptions() )
-        {
-            return result;
-        }
-
-        MavenProjectBuildingResult projectBuildingResult;
-            projectBuildingResult = mavenProjectBuilder.buildProjectWithDependencies(
-                request.getPom(),
-                request.getProjectBuildingConfiguration() );
+            MavenProjectBuildingResult projectBuildingResult = mavenProjectBuilder.buildProjectWithDependencies( request.getPom(), request.getProjectBuildingConfiguration() );
+            
+            result.setProject( projectBuildingResult.getProject() );
+
+            result.setArtifactResolutionResult( projectBuildingResult.getArtifactResolutionResult() );
+
+            return result;
-
-        if ( reactorManager.hasMultipleProjects() )
-        {
-            result.setProject( projectBuildingResult.getProject() );
-
-            result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
-        }
-        else
-        {
-            result.setProject( projectBuildingResult.getProject() );
-
-            result.setTopologicallySortedProjects( Arrays.asList( new MavenProject[]{ projectBuildingResult.getProject()} ) );
-        }
-
-        result.setArtifactResolutionResult( projectBuildingResult.getArtifactResolutionResult() );
-
-        // From this I could produce something that would help IDE integrators create importers:
-        // - topo sorted list of projects
-        // - binary dependencies
-        // - source dependencies (projects in the reactor)
-        //
-        // We could create a layer approach here. As to do anything you must resolve a projects artifacts,
-        // and with that set you could then subsequently execute goals for each of those project.
-
-        return result;
-    }
-
-    // ----------------------------------------------------------------------
-    // Lifecycle information
-    // ----------------------------------------------------------------------
-
-    public List getLifecyclePhases()
-    {
-        return getBuildLifecyclePhases();
-    }
-
-    public List getAllLifecyclePhases()
-    {
-        return LifecycleUtils.getValidPhaseNames();
-    }
-
-    public List getDefaultLifecyclePhases()
-    {
-        return getBuildLifecyclePhases();
-    }
-
-    public List getBuildLifecyclePhases()
-    {
-        return LifecycleUtils.getValidBuildPhaseNames();
-    }
-
-    public List getCleanLifecyclePhases()
-    {
-        return LifecycleUtils.getValidCleanPhaseNames();
-    }
-
-    public List getSiteLifecyclePhases()
-    {
-        return LifecycleUtils.getValidSitePhaseNames();
-    private MavenExecutionRequest request;
-
-    private EventDispatcher dispatcher;
-
-                .addComponentDiscoverer( new MavenPluginDiscoverer() )
-                .addComponentDiscoveryListener( new MavenPluginCollector() )
-                .setClassWorld( classWorld ).setName( "embedder" );
+                .addComponentDiscoverer( PluginManager.class )
+                .addComponentDiscoveryListener( PluginManager.class )
+                .setClassWorld( classWorld )
+                .setName( "embedder" );
-            modelReader = new MavenXpp3Reader();
+            modelReader = container.lookup( ModelReader.class );
-            modelWriter = new MavenXpp3Writer();
+            modelWriter = container.lookup( ModelWriter.class );
-            repositorySystem = container.lookup( RepositorySystem.class );
+            container.lookup( RepositorySystem.class );
+            
+            lifecycleExecutor = container.lookup( LifecycleExecutor.class );
-
-            dispatcher = new DefaultEventDispatcher( request.getEventMonitors() );
-        // first, grab defaults including settings, in case <offline>true</offline> is set.
-
+                
-            CoreErrorReporter errorReporter = request.getErrorReporter();
-            errorReporter.clearErrors();
-
-            CoreReporterManager.setReporter( errorReporter );
-
+
+    public List<String> getLifecyclePhases()
+    {       
+        return maven.getLifecyclePhases();
+    }
