o set the header to 3.0-alpha-1, we'll wire this in with mercury in alpha-2


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@721770 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.InputStream;
-import java.util.Properties;
-import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
-import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;
-import org.codehaus.plexus.util.IOUtil;
-    implements WagonManager, Contextualizable, Initializable
+    implements WagonManager, Contextualizable
-    private String httpUserAgent;
+    private String httpUserAgent = "Apache-Maven/3.0-alpha-1";
-    // TODO: Remove this, once the maven-shade-plugin 1.2 release is out, allowing configuration of httpHeaders in the components.xml
+
+        XmlPlexusConfiguration propertyConfig = new XmlPlexusConfiguration( "property" );
+        PlexusConfiguration headerConfig = config.getChild( "httpHeaders", true );
+        headerConfig.addChild( propertyConfig );
-        if ( httpUserAgent != null )
-        {
-            try
-            {
-                wagon.getClass().getMethod( "setHttpHeaders", new Class[]{ Properties.class } );
+        XmlPlexusConfiguration nameConfig = new XmlPlexusConfiguration( "name" );
+        nameConfig.setValue( "User-Agent" );
+        propertyConfig.addChild( nameConfig );
+        
+        XmlPlexusConfiguration versionConfig = new XmlPlexusConfiguration( "value" );
+        versionConfig.setValue( httpUserAgent );
+        propertyConfig.addChild( versionConfig );
-                PlexusConfiguration headerConfig = config.getChild( "httpHeaders", true );
-                PlexusConfiguration[] children = headerConfig.getChildren( "property" );
-                boolean found = false;
-                for ( int i = 0; i < children.length; i++ )
-                {
-                    PlexusConfiguration c = children[i].getChild( "name", false );
-                    if ( c != null && "User-Agent".equals( c.getValue( null ) ) )
-                    {
-                        found = true;
-                        break;
-                    }
-                }
-                if ( !found )
-                {
-                    XmlPlexusConfiguration propertyConfig = new XmlPlexusConfiguration( "property" );
-                    headerConfig.addChild( propertyConfig );
-                    
-                    XmlPlexusConfiguration nameConfig = new XmlPlexusConfiguration( "name" );
-                    nameConfig.setValue( "User-Agent" );
-                    propertyConfig.addChild( nameConfig );
-                    
-                    XmlPlexusConfiguration versionConfig = new XmlPlexusConfiguration( "value" );
-                    versionConfig.setValue( httpUserAgent );
-                    propertyConfig.addChild( versionConfig );
-                }
-            }
-            catch ( SecurityException e )
-            {
-                // forget it. this method is public, if it exists.
-            }
-            catch ( NoSuchMethodException e )
-            {
-                // forget it.
-            }
-        }
-        
-
-    // TODO: Remove this, once the maven-shade-plugin 1.2 release is out, allowing configuration of httpHeaders in the components.xml
-    public void initialize()
-        throws InitializationException
-    {
-        if ( httpUserAgent == null )
-        {
-            InputStream resourceAsStream = null;
-            try
-            {
-                Properties properties = new Properties();
-                resourceAsStream = getClass().getClassLoader().getResourceAsStream( MAVEN_ARTIFACT_PROPERTIES );
-
-                if ( resourceAsStream != null )
-                {
-                    try
-                    {
-                        properties.load( resourceAsStream );
-
-                        httpUserAgent =
-                            "maven-artifact/" + properties.getProperty( "version" ) + " (Java "
-                                + System.getProperty( "java.version" ) + "; " + System.getProperty( "os.name" ) + " "
-                                + System.getProperty( "os.version" ) + ")";
-                    }
-                    catch ( IOException e )
-                    {
-                        getLogger().warn(
-                                          "Failed to load Maven artifact properties from:\n" + MAVEN_ARTIFACT_PROPERTIES
-                                              + "\n\nUser-Agent HTTP header may be incorrect for artifact resolution." );
-                    }
-                }
-            }
-            finally
-            {
-                IOUtil.close( resourceAsStream );
-            }
-        }
-    }
