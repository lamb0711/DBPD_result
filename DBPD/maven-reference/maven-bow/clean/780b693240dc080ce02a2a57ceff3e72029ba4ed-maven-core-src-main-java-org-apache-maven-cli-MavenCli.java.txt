o the introduction of the lifecycle stuff we've been chatting about so you
  can now do things like:

  m2 package

  which makes the jar

  m2 install

  which installs the jar

  m2 test

  You can also execute individual goals still like:

  clean:clean
  pom:install
  idea:idea

  Execution of goals this way will still have the dependency resolution
  flag obeyed but they are run in isolation in that pre/post goals don't
  exist anymore. You need to slot your mojos into the lifecycle.

  I will add the mechanism whereby configuring a plugin will push
  the mojo into the lifecycle.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163359 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.execution.initialize.MavenInitializingExecutionRequest;
-import org.apache.maven.execution.project.MavenProjectExecutionRequest;
-import org.apache.maven.execution.reactor.MavenReactorExecutionRequest;
+import org.apache.maven.execution.MavenInitializingExecutionRequest;
+import org.apache.maven.execution.MavenProjectExecutionRequest;
+import org.apache.maven.execution.MavenReactorExecutionRequest;
+
+
-    throws Exception
+        throws Exception
+
+
+
+
+
+
-                request = new MavenReactorExecutionRequest( localRepository, mavenProperties, commandLine.getArgList(),
-                                                            includes, excludes, userDir );
+
+                request = new MavenReactorExecutionRequest( localRepository,
+                                                            mavenProperties,
+                                                            commandLine.getArgList(),
+                                                            includes,
+                                                            excludes,
+                                                            userDir );
-                request = new MavenProjectExecutionRequest( localRepository, mavenProperties, commandLine.getArgList(),
+                request = new MavenProjectExecutionRequest( localRepository,
+                                                            mavenProperties,
+                                                            commandLine.getArgList(),
-            request = new MavenInitializingExecutionRequest( localRepository, mavenProperties,
-                                                             commandLine.getArgList() );
+            request = new MavenInitializingExecutionRequest( localRepository, mavenProperties, commandLine.getArgList() );
+
+
-        wagonManager.setDownloadMonitor( new ConsoleDownloadMonitor() );
+        wagonManager.setDownloadMonitor( new ConsoleDownloadMonitor() );
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-        throws ParseException
+            throws ParseException
-              {
+        {
