o dump the local repo setting


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@162538 13f79535-47bb-0310-9956-ffa450edef68

+
+import java.io.Writer;
-    
+
-        
-        setRemoteRepo(properties.getProperty( "maven.repo.remote" ));
+
+        setRemoteRepo( properties.getProperty( "maven.repo.remote" ) );
-        
+
-        
+
-
-        FileWriter writer = new FileWriter( "bootstrap.classpath" );
+        writeFile( "bootstrap.classpath", classPath.toString() );
-        writer.write( classPath.toString() );
-
-        writer.close();
-
-        writer = new FileWriter( "bootstrap.libs" );
-
-        writer.write( libs.toString() );
-
-        writer.close();
+        writeFile( "bootstrap.libs", libs.toString() );
-            Resource r  = (Resource) i.next();
+            Resource r = (Resource) i.next();
+            // If there are no includes specified then we want it all.
+            if ( size == 0 )
+            {
+                res.append( "'*'" );
+            }
+
-                res.append("'").append( include ).append("'");
+                res.append( "'" ).append( include ).append( "'" );
-        writer = new FileWriter( "bootstrap.resources" );
+        writeFile( "bootstrap.resources", res.toString() );
-        writer.write( res.toString() );
+        writeFile( "bootstrap.repo", mavenRepoLocal.getPath() );
+    }
+
+    private void writeFile( String name, String contents )
+        throws Exception
+    {
+        Writer writer = new FileWriter( name );
+
+        writer.write( contents );
-                if ( destinationFile.exists() && !file.endsWith(SNAPSHOT_SIGNATURE))
+                if ( destinationFile.exists() && !file.endsWith( SNAPSHOT_SIGNATURE ) )
-                
-                getRemoteArtifact(file, destinationFile);
-                
+
+                getRemoteArtifact( file, destinationFile );
+
-    
-    private void setRemoteRepo(String repos)
+
+    private void setRemoteRepo( String repos )
-        
-        if (repos == null)
+
+        if ( repos == null )
-            remoteRepos.add("http://www.ibiblio.org/maven/");
+            remoteRepos.add( "http://www.ibiblio.org/maven/" );
-        
-        StringTokenizer st = new StringTokenizer(repos, ",");
-        while (st.hasMoreTokens())
+
+        StringTokenizer st = new StringTokenizer( repos, "," );
+        while ( st.hasMoreTokens() )
-            remoteRepos.add((String)st.nextToken().trim());
+            remoteRepos.add( st.nextToken().trim() );
-    
+
-    /**
-     * Retrieve a <code>remoteFile</code> from the maven remote repositories
-     * and store it at <code>localFile</code>
-     * @param artifact the artifact to retrieve from the repositories.
-     * @return true if the retrieval succeeds, false otherwise.
-     */
-        for ( Iterator i = getRemoteRepo().iterator(); i.hasNext();)
+        for ( Iterator i = getRemoteRepo().iterator(); i.hasNext(); )
-            catch (FileNotFoundException e)
+            catch ( FileNotFoundException e )
-                log("Error retrieving artifact from [" + url + "]: ");
+                log( "Error retrieving artifact from [" + url + "]: " );
-    
+
-    private String replace(String text, String repl, String with)
+    private String replace( String text, String repl, String with )
-        StringBuffer buf = new StringBuffer(text.length());
+        StringBuffer buf = new StringBuffer( text.length() );
-        while ((end = text.indexOf(repl, start)) != -1)
+        while ( ( end = text.indexOf( repl, start ) ) != -1 )
-            buf.append(text.substring(start, end)).append(with);
+            buf.append( text.substring( start, end ) ).append( with );
-        buf.append(text.substring(start));
+        buf.append( text.substring( start ) );
-    
+
-        
+
-            else if( rawName.equals( "unitTest" ) )
+            else if ( rawName.equals( "unitTest" ) )
-            if (    isValid( getGroupId() )
-                 && isValid( getArtifactId() ) )
+            if ( isValid( getGroupId() )
+                && isValid( getArtifactId() ) )
-            if ( jar != null)
+            if ( jar != null )
-            if (    value != null
-                 && value.trim().equals("") == false )
+            if ( value != null
+                && value.trim().equals( "" ) == false )
