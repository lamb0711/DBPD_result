another pass at integration, not  ready.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@289142 13f79535-47bb-0310-9956-ffa450edef68

-import com.werken.forehead.Forehead;
-import com.werken.forehead.ForeheadClassLoader;
+import org.codehaus.plexus.logging.AbstractLogEnabled;
+import org.codehaus.plexus.util.cli.CommandLineException;
+import org.codehaus.plexus.util.cli.CommandLineUtils;
+import org.codehaus.plexus.util.cli.Commandline;
+import org.codehaus.plexus.util.cli.DefaultConsumer;
+import org.codehaus.plexus.util.cli.StreamConsumer;
-import java.io.FileInputStream;
-import java.util.Arrays;
-import java.util.Date;
-import java.lang.reflect.*;
-import java.net.*;
-
-import org.codehaus.plexus.logging.AbstractLogEnabled;
-
-    private String mavenHomeLocal;
+    private String mavenHomeLocal;
+        throws Maven1xIntegrationException
-        // TODO: need real integration
+        Commandline cl = new Commandline();
+
+        String exec = "maven";
+        if ( mavenHome != null )
+        {
+            exec = mavenHome + "/bin/" + exec;
+            cl.createArgument().setValue( "-Dmaven.home=" + mavenHome );
+        }
+        if ( mavenHomeLocal != null )
+        {
+            cl.createArgument().setValue( "-Dmaven.home.local=" + mavenHomeLocal );
+        }
+
+        cl.setExecutable( exec );
+
+        cl.setWorkingDirectory( project.getParentFile().getAbsolutePath() );
+
+        for ( Iterator i = goals.iterator(); i.hasNext(); )
+        {
+            cl.createArgument().setValue( (String) i.next() );
+        }
+
+        StreamConsumer consumer = new DefaultConsumer();
+
-            ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();
-            URL foreheadUrl = new File( mavenHome, "lib/forehead-1.0-beta-5.jar" ).toURL();
+            int exitCode = CommandLineUtils.executeCommandLine( cl, consumer, consumer );
+            if ( exitCode != 0 )
+            {
+                throw new Maven1xIntegrationException( "Received exit code " + exitCode + " from Maven" );
+            }
+        }
+        catch ( CommandLineException e )
+        {
+            throw new Maven1xIntegrationException( "Can't run goals " + goals, e );
+        }
+
+        // TODO: need better integration, requires changes in Maven 1.1 - also want to avoid a dep on forehead in m2/lib
+        try
+        {
+/*
+            System.setProperty( "tools.jar", "file:" + System.getProperty( "java.home" ) + "/lib/tools.jar" );
+            System.setProperty( "maven.home", mavenHome );
+            System.setProperty( "maven.home.local", mavenHome );
+
+            Forehead.getInstance().config( new FileReader( foreheadConf ) );
+            // TODO: this currently System.exit()s
+            Forehead.getInstance().run( (String[]) goals.toArray( EMPTY_STRING_ARRAY ) );
+*/
+
+/*
+            URL foreheadUrl = new File( mavenHome, "lib/forehead-1.0-beta-5.jar" ).toURL();
+            ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();
-            System.setProperty( "maven.home", mavenHome );
-            System.setProperty( "tools.jar", "file:" + System.getProperty( "java.home" ) + "/lib/tools.jar" );
-
-            /*m = c.getMethod( "getClassLoader", new Class[] { String.class } );
-            cl = ( ClassLoader ) m.invoke( forehead, new Object[] { "root.maven" } );
+*/
+
+/*
+            m = c.getMethod( "getClassLoader", new Class[]{String.class} );
+            cl = (ClassLoader) m.invoke( forehead, new Object[]{"root.maven"} );
-            m = c.getMethod( "initialize", new Class[] { String[].class } );
-            m.invoke( app, new Object[] { (String[]) goals.toArray( new String[0] ) } );
+            m = c.getMethod( "initialize", new Class[]{String[].class} );
+            m.invoke( app, new Object[]{(String[]) goals.toArray( new String[0] )} );
-            m = session.getClass().getMethod( "attainGoals", new Class[] { p.getClass(), List.class } );
-            m.invoke( session, new Object[] { p, goals } ); */
+            m = session.getClass().getMethod( "attainGoals", new Class[]{p.getClass(), List.class} );
+            m.invoke( session, new Object[]{p, goals} );
+*/
+/*
-            m = c.getMethod( "run", new Class[] { String[].class } );
-            m.invoke( forehead, new Object[] { (String[]) goals.toArray( new String[0] ) } );
+            m = c.getMethod( "run", new Class[]{String[].class} );
+            m.invoke( forehead, new Object[]{(String[]) goals.toArray( new String[0] )} );
+*/
-            // TODO: handle this
-            e.printStackTrace();
+            throw new Maven1xIntegrationException( "Error executing Maven 1.x", e );
