Resolving: MNG-684

o Split profile injection out into its own component away from the defaults assembler
o Moved code common to the defaults assembler and the profile injector into ModelUtils
o Removed the profile-related method from ModelIntheritanceAssembler
o added it0048 to test that profile values will override POM values.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@231294 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.BuildBase;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.DependencyManagement;
-import org.apache.maven.model.ModelBase;
-import org.apache.maven.model.PluginManagement;
-import org.apache.maven.model.Profile;
-import org.apache.maven.model.ReportPlugin;
-import org.apache.maven.model.ReportSet;
-import org.apache.maven.model.Reporting;
-import org.codehaus.plexus.util.xml.Xpp3Dom;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-        assembleModelBaseInheritance( child, parent );
-    }
-
-    public void mergeProfileWithModel( Model model, Profile profile )
-    {
-        assembleModelBaseInheritance( model, profile );
-
-        assembleBuildBaseInheritance( model.getBuild(), profile.getBuild() );
-    }
-
-    private void assembleModelBaseInheritance( ModelBase child, ModelBase parent )
-    {
-        // Dependencies :: aggregate
-        Map mappedChildDeps = new TreeMap();
-        for ( Iterator it = child.getDependencies().iterator(); it.hasNext(); )
-        {
-            Dependency dep = (Dependency) it.next();
-            mappedChildDeps.put( dep.getManagementKey(), dep );
-        }
-
-        for ( Iterator it = parent.getDependencies().iterator(); it.hasNext(); )
-        {
-            Dependency dep = (Dependency) it.next();
-            if ( !mappedChildDeps.containsKey( dep.getManagementKey() ) )
-            {
-                child.addDependency( dep );
-            }
-        }
-
-        // Repositories :: aggregate
-        List parentRepositories = parent.getRepositories();
-
-        List childRepositories = child.getRepositories();
-
-        for ( Iterator iterator = parentRepositories.iterator(); iterator.hasNext(); )
-        {
-            Repository repository = (Repository) iterator.next();
-
-            // child will always override parent repositories if there are duplicates
-            if ( !childRepositories.contains( repository ) )
-            {
-                child.addRepository( repository );
-            }
-        }
-
-        // Mojo Repositories :: aggregate
-        List parentPluginRepositories = parent.getPluginRepositories();
-        List childPluginRepositories = child.getPluginRepositories();
-
-        for ( Iterator iterator = parentPluginRepositories.iterator(); iterator.hasNext(); )
-        {
-            Repository repository = (Repository) iterator.next();
-
-            if ( !childPluginRepositories.contains( repository ) )
-            {
-                child.addPluginRepository( repository );
-            }
-        }
-
-        // Reports :: aggregate
-        Reporting childReporting = child.getReporting();
-        Reporting parentReporting = parent.getReporting();
-
-        if ( childReporting != null && parentReporting != null )
-        {
-            if ( StringUtils.isEmpty( childReporting.getOutputDirectory() ) )
-            {
-                childReporting.setOutputDirectory( parentReporting.getOutputDirectory() );
-            }
-
-            Map mergedReportPlugins = new HashMap();
-
-            Map childReportersByKey = childReporting.getReportPluginsAsMap();
-
-            List parentReportPlugins = parentReporting.getPlugins();
-
-            if ( parentReportPlugins != null )
-            {
-                for ( Iterator it = parentReportPlugins.iterator(); it.hasNext(); )
-                {
-                    ReportPlugin parentReportPlugin = (ReportPlugin) it.next();
-
-                    String inherited = parentReportPlugin.getInherited();
-
-                    if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
-                    {
-                        ReportPlugin childReportPlugin = (ReportPlugin) childReportersByKey.get(
-                            parentReportPlugin.getKey() );
-
-                        ReportPlugin mergedReportPlugin = parentReportPlugin;
-
-                        if ( childReportPlugin != null )
-                        {
-                            mergedReportPlugin = childReportPlugin;
-
-                            mergeReportPlugins( childReportPlugin, parentReportPlugin );
-                        }
-                        else if ( StringUtils.isEmpty( inherited ) )
-                        {
-                            mergedReportPlugin.unsetInheritanceApplied();
-                        }
-
-                        mergedReportPlugins.put( mergedReportPlugin.getKey(), mergedReportPlugin );
-                    }
-                }
-            }
-
-            for ( Iterator it = childReportersByKey.entrySet().iterator(); it.hasNext(); )
-            {
-                Map.Entry entry = (Map.Entry) it.next();
-
-                String key = (String) entry.getKey();
-
-                if ( !mergedReportPlugins.containsKey( key ) )
-                {
-                    mergedReportPlugins.put( key, entry.getValue() );
-                }
-            }
-
-            childReporting.setPlugins( new ArrayList( mergedReportPlugins.values() ) );
-
-            childReporting.flushReportPluginMap();
-        }
-
-        assembleDependencyManagementInheritance( child, parent );
-    }
-
-    private void mergeReportPlugins( ReportPlugin dominant, ReportPlugin recessive )
-    {
-        if ( StringUtils.isEmpty( dominant.getVersion() ) )
-        {
-            dominant.setVersion( recessive.getVersion() );
-        }
-
-        Xpp3Dom dominantConfig = (Xpp3Dom) dominant.getConfiguration();
-        Xpp3Dom recessiveConfig = (Xpp3Dom) recessive.getConfiguration();
-
-        dominant.setConfiguration( Xpp3Dom.mergeXpp3Dom( dominantConfig, recessiveConfig ) );
-
-        Map mergedReportSets = new HashMap();
-
-        Map dominantReportSetsById = dominant.getReportSetsAsMap();
-
-        for ( Iterator it = recessive.getReportSets().iterator(); it.hasNext(); )
-        {
-            ReportSet recessiveReportSet = (ReportSet) it.next();
-
-            String inherited = recessiveReportSet.getInherited();
-
-            if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
-            {
-                ReportSet dominantReportSet = (ReportSet) dominantReportSetsById.get( recessiveReportSet.getId() );
-
-                ReportSet merged = recessiveReportSet;
-
-                if ( dominantReportSet != null )
-                {
-                    merged = dominantReportSet;
-
-                    Xpp3Dom recessiveRSConfig = (Xpp3Dom) recessiveReportSet.getConfiguration();
-                    Xpp3Dom mergedRSConfig = (Xpp3Dom) merged.getConfiguration();
-
-                    merged.setConfiguration( Xpp3Dom.mergeXpp3Dom( mergedRSConfig, recessiveRSConfig ) );
-
-                    List mergedReports = merged.getReports();
-
-                    if ( mergedReports == null )
-                    {
-                        mergedReports = new ArrayList();
-
-                        merged.setReports( mergedReports );
-                    }
-
-                    List recessiveRSReports = recessiveReportSet.getReports();
-
-                    if ( recessiveRSReports != null )
-                    {
-                        for ( Iterator reportIterator = recessiveRSReports.iterator(); reportIterator.hasNext(); )
-                        {
-                            String report = (String) reportIterator.next();
-
-                            if ( !mergedReports.contains( report ) )
-                            {
-                                mergedReports.add( report );
-                            }
-                        }
-                    }
-                }
-                else if ( StringUtils.isEmpty( inherited ) )
-                {
-                    merged.unsetInheritanceApplied();
-                }
-
-                mergedReportSets.put( merged.getId(), merged );
-            }
-        }
-
-        for ( Iterator rsIterator = dominantReportSetsById.entrySet().iterator(); rsIterator.hasNext(); )
-        {
-            Map.Entry entry = (Map.Entry) rsIterator.next();
-
-            String key = (String) entry.getKey();
-
-            if ( !mergedReportSets.containsKey( key ) )
-            {
-                mergedReportSets.put( key, entry.getValue() );
-            }
-        }
-
-        dominant.setReportSets( new ArrayList( mergedReportSets.values() ) );
-
-        dominant.flushReportSetMap();
-    }
-
-    private void assembleDependencyManagementInheritance( ModelBase child, ModelBase parent )
-    {
-        DependencyManagement parentDepMgmt = parent.getDependencyManagement();
-
-        DependencyManagement childDepMgmt = child.getDependencyManagement();
-
-        if ( parentDepMgmt != null )
-        {
-            if ( childDepMgmt == null )
-            {
-                child.setDependencyManagement( parentDepMgmt );
-            }
-            else
-            {
-                List childDeps = childDepMgmt.getDependencies();
-
-                Map mappedChildDeps = new TreeMap();
-                for ( Iterator it = childDeps.iterator(); it.hasNext(); )
-                {
-                    Dependency dep = (Dependency) it.next();
-                    mappedChildDeps.put( dep.getManagementKey(), dep );
-                }
-
-                for ( Iterator it = parentDepMgmt.getDependencies().iterator(); it.hasNext(); )
-                {
-                    Dependency dep = (Dependency) it.next();
-                    if ( !mappedChildDeps.containsKey( dep.getManagementKey() ) )
-                    {
-                        childDepMgmt.addDependency( dep );
-                    }
-                }
-            }
-        }
+        ModelUtils.mergeModelBases( child, parent );
-            assembleBuildBaseInheritance( childBuild, parentBuild );
+            ModelUtils.mergeBuildBases( childBuild, parentBuild );
-    private void assembleBuildBaseInheritance( BuildBase childBuild, BuildBase parentBuild )
-    {
-        // if the parent build is null, obviously we cannot inherit from it...
-        if ( parentBuild != null )
-        {
-            if ( childBuild.getDefaultGoal() == null )
-            {
-                childBuild.setDefaultGoal( parentBuild.getDefaultGoal() );
-            }
-
-            if ( childBuild.getFinalName() == null )
-            {
-                childBuild.setFinalName( parentBuild.getFinalName() );
-            }
-
-            List resources = childBuild.getResources();
-            if ( resources == null || resources.isEmpty() )
-            {
-                childBuild.setResources( parentBuild.getResources() );
-            }
-
-            resources = childBuild.getTestResources();
-            if ( resources == null || resources.isEmpty() )
-            {
-                childBuild.setTestResources( parentBuild.getTestResources() );
-            }
-
-            // Plugins are aggregated if Plugin.inherit != false
-            ModelUtils.mergePluginLists( childBuild, parentBuild, true );
-
-            // Plugin management :: aggregate
-            PluginManagement childPM = childBuild.getPluginManagement();
-            PluginManagement parentPM = parentBuild.getPluginManagement();
-
-            if ( childPM == null && parentPM != null )
-            {
-                childBuild.setPluginManagement( parentPM );
-            }
-            else
-            {
-                ModelUtils.mergePluginLists( childBuild.getPluginManagement(), parentBuild.getPluginManagement(),
-                                             false );
-            }
-        }
-    }
