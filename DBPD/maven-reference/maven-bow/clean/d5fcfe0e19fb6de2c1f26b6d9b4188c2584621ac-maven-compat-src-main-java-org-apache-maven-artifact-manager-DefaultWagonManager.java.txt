o swapping the branch to trunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779660 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.util.LinkedHashMap;
+import java.util.Set;
-import org.apache.maven.artifact.repository.ArtifactRepositoryFactory;
-import org.apache.maven.wagon.authentication.AuthenticationInfo;
-import org.apache.maven.wagon.proxy.ProxyInfo;
-import org.apache.maven.wagon.proxy.ProxyInfoProvider;
-import org.apache.maven.wagon.repository.RepositoryPermissions;
-@Component(role=WagonManager.class)
+@Component(role = WagonManager.class)
-    private static final String[] CHECKSUM_IDS = {"md5", "sha1"};
+    private static final String[] CHECKSUM_IDS = { "md5", "sha1" };
-    private static final String[] CHECKSUM_ALGORITHMS = {"MD5", "SHA-1"};
+    private static final String[] CHECKSUM_ALGORITHMS = { "MD5", "SHA-1" };
-    
+
-    // TODO: proxies, authentication and mirrors are via settings, and should come in via an alternate method - perhaps
-    // attached to ArtifactRepository before the method is called (so AR would be composed of WR, not inherit it)
-    private Map<String,ProxyInfo> proxies = new HashMap<String,ProxyInfo>();
-
-    private static Map<String,AuthenticationInfo> authenticationInfoMap = new HashMap<String,AuthenticationInfo>();
-
-    private Map<String,RepositoryPermissions> serverPermissionsMap = new HashMap<String,RepositoryPermissions>();
-
-    //used LinkedMap to preserve the order.
-    private Map<String,ArtifactRepository> mirrors = new LinkedHashMap<String,ArtifactRepository>();
-
-    private Map<String,XmlPlexusConfiguration> serverConfigurationMap = new HashMap<String,XmlPlexusConfiguration>();
+    private Map<String, XmlPlexusConfiguration> serverConfigurationMap = new HashMap<String, XmlPlexusConfiguration>();
-    private RepositoryPermissions defaultRepositoryPermissions;
-
-    // Components
-
-    @Requirement
-    private ArtifactRepositoryFactory repositoryFactory;
-
-    @Requirement(role=Wagon.class)
-    private Map wagons;
-
-    //@Requirement
-    private CredentialsDataSource credentialsDataSource;
+    @Requirement(role = Wagon.class)
+    private Map<String,Wagon> wagons;
-    
+
-        this.downloadMonitor = downloadMonitor;        
+        this.downloadMonitor = downloadMonitor;
-    
-    // TODO: this leaks the component in the public api - it is never released back to the container
+
-
+        
-        
-        
-            throw new UnsupportedProtocolException(
-                "Cannot find wagon which supports the requested protocol: " + protocol );
+            throw new UnsupportedProtocolException( "Cannot find wagon which supports the requested protocol: " + protocol );
-    
+
-    private void putRemoteFile( ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor )
+    public void putRemoteFile( ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor )
-        Map<String,ChecksumObserver> checksums = new HashMap<String,ChecksumObserver>( 2 );
+        Map<String, ChecksumObserver> checksums = new HashMap<String, ChecksumObserver>( 2 );
-        Map<String,String> sums = new HashMap<String,String>( 2 );
+        Map<String, String> sums = new HashMap<String, String>( 2 );
-            {
-                Repository artifactRepository = new Repository( repository.getId(), repository.getUrl() );
-
-                AuthenticationInfo authenticationInfo = getAuthenticationInfo( repository.getId() ); 
-                                
-                wagon.connect( artifactRepository, authenticationInfo, new ProxyInfoProvider()
-                {
-                    public ProxyInfo getProxyInfo( String protocol )
-                    {
-                        return getProxy( protocol );
-                    }
-                });
+            {                
+                wagon.connect( new Repository( repository.getId(), repository.getUrl() ) );
-            catch ( CredentialsDataSourceException e )
-            {
-                String err = "Problem with server credentials: " + e.getMessage();
-                logger.error( err );
-                throw new TransferFailedException( err );
-            }
-            for (String extension : checksums.keySet()) {
-                ChecksumObserver observer = checksums.get(extension);
-                sums.put(extension, observer.getActualChecksum());
+            for ( String extension : checksums.keySet() )
+            {
+                ChecksumObserver observer = checksums.get( extension );
+                sums.put( extension, observer.getActualChecksum() );
-            for (String extension : checksums.keySet()) {
+            for ( String extension : checksums.keySet() )
+            {
-                File temp = File.createTempFile("maven-artifact", null);
+                File temp = File.createTempFile( "maven-artifact", null );
-                FileUtils.fileWrite(temp.getAbsolutePath(), "UTF-8", sums.get(extension));
+                FileUtils.fileWrite( temp.getAbsolutePath(), "UTF-8", sums.get( extension ) );
-                wagon.put(temp, remotePath + "." + extension);
+                wagon.put( temp, remotePath + "." + extension );
-            for (String aCHECKSUM_IDS : CHECKSUM_IDS) {
-                TransferListener checksumListener = checksums.get(aCHECKSUM_IDS);
-                if (checksumListener != null) {
-                    wagon.removeTransferListener(checksumListener);
+            for ( String aCHECKSUM_IDS : CHECKSUM_IDS )
+            {
+                TransferListener checksumListener = checksums.get( aCHECKSUM_IDS );
+                if ( checksumListener != null )
+                {
+                    wagon.removeTransferListener( checksumListener );
-    private ChecksumObserver addChecksumObserver( Wagon wagon,
-                                                  String algorithm )
+    private ChecksumObserver addChecksumObserver( Wagon wagon, String algorithm )
-
-    throws TransferFailedException, ResourceDoesNotExistException
+        throws TransferFailedException, ResourceDoesNotExistException
-    
+
-    
-    public void getArtifact( Artifact artifact, List<ArtifactRepository> remoteRepositories, TransferListener downloadMonitor  )
+
+    public void getArtifact( Artifact artifact, List<ArtifactRepository> remoteRepositories, TransferListener downloadMonitor )
-	{
-    	getArtifact( artifact, remoteRepositories, downloadMonitor, true );
-	}
+    {
+        getArtifact( artifact, remoteRepositories, downloadMonitor, true );
+    }
-    	if(remoteRepositories == null)
-    	{
-    		throw new IllegalArgumentException("remoteRepositories: null");
-    	}
-    	
-        for (ArtifactRepository repository : remoteRepositories) {
+        for ( ArtifactRepository repository : remoteRepositories )
+        {
-                if (artifact.isResolved())
+                if ( artifact.isResolved() )
-                	break;
+                    break;
-                logger.debug( "Unable to get resource '" + artifact.getId() + "' from repository " +
-                    repository.getId() + " (" + repository.getUrl() + ")", e );
+                logger.debug( "Unable to get resource '" + artifact.getId() + "' from repository " + repository.getId() + " (" + repository.getUrl() + ")", e );
-                logger.debug( "Unable to get resource '" + artifact.getId() + "' from repository " +
-                    repository.getId() + " (" + repository.getUrl() + ")", e );
+                logger.debug( "Unable to get resource '" + artifact.getId() + "' from repository " + repository.getId() + " (" + repository.getUrl() + ")", e );
-        }
-
+        }        
+        
-        throws TransferFailedException,
-               ResourceDoesNotExistException
+        throws TransferFailedException, ResourceDoesNotExistException
+    //TODO: all of this needs to move into the repository system
+    
-
+        
-
+                
+        boolean updateCheckIsRequired = updateCheckManager.isUpdateRequired( artifact, repository );
+        
-        {
+        {            
-        // 2. If the updateInterval has been exceeded since the last check for this artifact on this repository, then check.
-        else if ( artifact.isSnapshot() && ( force || updateCheckManager.isUpdateRequired( artifact, repository ) ) )
+        // 2. If the updateInterval has been exceeded since the last check for this artifact on this repository, then check.        
+        else if ( artifact.isSnapshot() && ( force || updateCheckIsRequired ) )
-            	updateCheckManager.touch( artifact, repository );
+                updateCheckManager.touch( artifact, repository );
-                    
+
-        
+
-    public void getArtifactMetadata( ArtifactMetadata metadata,
-                                     ArtifactRepository repository,
-                                     File destination,
-                                     String checksumPolicy )
+    public void getArtifactMetadata( ArtifactMetadata metadata, ArtifactRepository repository, File destination, String checksumPolicy )
-    public void getArtifactMetadataFromDeploymentRepository( ArtifactMetadata metadata, ArtifactRepository repository,
-                                                             File destination, String checksumPolicy )
+    public void getArtifactMetadataFromDeploymentRepository( ArtifactMetadata metadata, ArtifactRepository repository, File destination, String checksumPolicy )
-    private void getRemoteFile( ArtifactRepository repository,
-                                File destination,
-                                String remotePath,
-                                TransferListener downloadMonitor,
-                                String checksumPolicy,
-                                boolean force )
+    public void getRemoteFile( ArtifactRepository repository, File destination, String remotePath, TransferListener downloadMonitor, String checksumPolicy, boolean force )
-
+        
-
+        
-        {
-            wagon.connect( new Repository( repository.getId(), repository.getUrl() ),
-                           getAuthenticationInfo( repository.getId() ), new ProxyInfoProvider()
-            {
-                public ProxyInfo getProxyInfo( String protocol )
-                {
-                    return getProxy( protocol );
-                }
-            });
+        {            
+            wagon.connect( new Repository( repository.getId(), repository.getUrl() ) );
-                            handleChecksumFailure( checksumPolicy, "Error retrieving checksum file for " + remotePath,
-                                md5TryException );
+                            handleChecksumFailure( checksumPolicy, "Error retrieving checksum file for " + remotePath, md5TryException );
-        catch ( CredentialsDataSourceException e )
-        {
-            throw new TransferFailedException( "Retrieving credentials failed: " + e.getMessage(), e );
-        }
-                    throw new TransferFailedException(
-                        "Error copying temporary file to the final destination: " + e.getMessage(), e );
+                    throw new TransferFailedException( "Error copying temporary file to the final destination: " + e.getMessage(), e );
-    private void handleChecksumFailure( String checksumPolicy,
-                                        String message,
-                                        Throwable cause )
+    private void handleChecksumFailure( String checksumPolicy, String message, Throwable cause )
-    private void verifyChecksum( ChecksumObserver checksumObserver,
-                                 File destination,
-                                 File tempDestination,
-                                 String remotePath,
-                                 String checksumFileExtension,
-                                 Wagon wagon )
+    private void verifyChecksum( ChecksumObserver checksumObserver, File destination, File tempDestination, String remotePath, String checksumFileExtension, Wagon wagon )
-            if ( expectedChecksum.regionMatches( true, 0, "MD", 0, 2 )
-                || expectedChecksum.regionMatches( true, 0, "SHA", 0, 3 ) )
+            if ( expectedChecksum.regionMatches( true, 0, "MD", 0, 2 ) || expectedChecksum.regionMatches( true, 0, "SHA", 0, 3 ) )
-                throw new ChecksumFailedException( "Checksum failed on download: local = '" + actualChecksum +
-                    "'; remote = '" + expectedChecksum + "'" );
+                throw new ChecksumFailedException( "Checksum failed on download: local = '" + actualChecksum + "'; remote = '" + expectedChecksum + "'" );
-
-    private void releaseWagon( String protocol,
-                               Wagon wagon )
+    private void releaseWagon( String protocol, Wagon wagon )
-    
-    public ProxyInfo getProxy( String protocol )
-    {
-        return proxies.get( protocol );
-    }
-
-    public AuthenticationInfo getAuthenticationInfo( String id )
-        throws CredentialsDataSourceException
-    {
-        return authenticationInfoMap.get( id );
-    }
-     *
+     * 
-            return !( url.getHost().equals( "localhost" ) || url.getHost().equals( "127.0.0.1" ) || url.getProtocol().equals("file" ) );
+            return !( url.getHost().equals( "localhost" ) || url.getHost().equals( "127.0.0.1" ) || url.getProtocol().equals( "file" ) );
-
-    /**
-     * Set the proxy used for a particular protocol.
-     *
-     * @param protocol the protocol (required)
-     * @param host the proxy host name (required)
-     * @param port the proxy port (required)
-     * @param username the username for the proxy, or null if there is none
-     * @param password the password for the proxy, or null if there is none
-     * @param nonProxyHosts the set of hosts not to use the proxy for. Follows Java system property format:
-     *            <code>*.foo.com|localhost</code>.
-     * @todo [BP] would be nice to configure this via plexus in some way
-     */
-    public void addProxy( String protocol,
-                          String host,
-                          int port,
-                          String username,
-                          String password,
-                          String nonProxyHosts )
-    {
-        ProxyInfo proxyInfo = new ProxyInfo();
-        proxyInfo.setHost( host );
-        proxyInfo.setType( protocol );
-        proxyInfo.setPort( port );
-        proxyInfo.setNonProxyHosts( nonProxyHosts );
-        proxyInfo.setUserName( username );
-        proxyInfo.setPassword( password );
-
-        proxies.put( protocol, proxyInfo );
-    }
-
-    // We are leaving this method here so that we can attempt to use the new maven-artifact
-    // library from the 2.0.x code so that we aren't maintaining two lines of code
-    // for the artifact management.
-    public void addAuthenticationInfo( String repositoryId,
-                                       String username,
-                                       String password,
-                                       String privateKey,
-                                       String passphrase
-    )
-    {
-        AuthenticationInfo authInfo = new AuthenticationInfo();
-        authInfo.setUserName( username );
-        authInfo.setPassword( password );
-        authInfo.setPrivateKey( privateKey );
-        authInfo.setPassphrase( passphrase );
-
-        authenticationInfoMap.put( repositoryId, authInfo );
-    }
-
-    public void addPermissionInfo( String repositoryId,
-                                   String filePermissions,
-                                   String directoryPermissions )
-    {
-        RepositoryPermissions permissions = new RepositoryPermissions();
-
-        boolean addPermissions = false;
-
-        if ( filePermissions != null )
-        {
-            permissions.setFileMode( filePermissions );
-            addPermissions = true;
-        }
-
-        if ( directoryPermissions != null )
-        {
-            permissions.setDirectoryMode( directoryPermissions );
-            addPermissions = true;
-        }
-
-        if ( addPermissions )
-        {
-            serverPermissionsMap.put( repositoryId, permissions );
-        }
-    }
-
+    
-     *
-     * @param wagon      the wagon to configure
+     * 
+     * @param wagon the wagon to configure
-     * @throws WagonConfigurationException wraps any error given during configuration of the wagon instance
+     * @throws WagonConfigurationException wraps any error given during configuration of the wagon
+     *             instance
-        PlexusConfiguration config = (PlexusConfiguration) serverConfigurationMap.get( repositoryId ); 
-        
+        PlexusConfiguration config = (PlexusConfiguration) serverConfigurationMap.get( repositoryId );
+
-    
+
-    
+
+
+    public Set<String> getSupportProtocols()
+    {
+        return wagons.keySet();
+    }
