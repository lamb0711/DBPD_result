o updating for changes in components


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@162924 13f79535-47bb-0310-9956-ffa450edef68

-    // 
+    //
-        "qdox/jars/qdox-1.2.jar",
-        "maven/jars/maven-plugin-2.0-SNAPSHOT.jar"
+        "qdox/jars/qdox-1.2.jar"
+    };
+
+    String[] plexusDeps = new String[]
+    {
+        "classworlds/jars/classworlds-1.1-SNAPSHOT.jar",
+        "plexus/jars/plexus-0.16-SNAPSHOT.jar",
+        "xpp3/jars/xpp3-1.1.3.3.jar",
+        "xstream/jars/xstream-1.0-SNAPSHOT.jar",
+        "maven/jars/maven-artifact-2.0-SNAPSHOT.jar",
+        "maven/jars/wagon-api-1.0-alpha-1-SNAPSHOT.jar",
+        "maven/jars/wagon-http-lightweight-1.0-alpha-1-SNAPSHOT.jar"
-        "maven-artifact",
-        "maven-core",
+        "maven-plugin-tools",
+        "maven-artifact",
+        "maven-core"
+    };
+
+    String[] pluginBuilds = new String[]
+    {
-    
+
+
+        createToolsClassLoader();
+
+        cl.addURL( new File( repoLocal, "maven/jars/maven-plugin-2.0-SNAPSHOT.jar" ).toURL() );
+
+        cl.addURL( new File( repoLocal, "maven/jars/maven-plugin-tools-2.0-SNAPSHOT.jar" ).toURL() );
+
+
+        for ( int i = 0; i < pluginBuilds.length; i++ )
+        {
+            String directory = new File( basedir, pluginBuilds[i] ).getAbsolutePath();
+
+            System.out.println( "Building project in " + directory + " ..." );
+
+            System.out.println( "--------------------------------------------------------------------" );
+
+            System.setProperty( "basedir", directory );
+
+            buildProject( directory );
+
+            reader.reset();
+
+            System.out.println( "--------------------------------------------------------------------" );
+        }
+
+
-        FileUtils.copyFileToDirectory( repoLocal + "/classworlds/jars/classworlds-1.1-SNAPSHOT.jar", core );
-
-        FileUtils.copyFileToDirectory( repoLocal + "/plexus/jars/plexus-0.14-SNAPSHOT.jar", core );
-
-        FileUtils.copyFileToDirectory( repoLocal + "/xpp3/jars/xpp3-1.1.3.3.jar", core );
-
-        FileUtils.copyFileToDirectory( repoLocal + "/xstream/jars/xstream-1.0-SNAPSHOT.jar", core );
+        for ( int i = 0; i < plexusDeps.length; i++ )
+        {
+            FileUtils.copyFileToDirectory( repoLocal + "/" + plexusDeps[i], core );
+        }
-                d.artifactId.equals( "xpp3" ) )
+                d.artifactId.equals( "xpp3" ) ||
+                d.artifactId.equals( "junit" ) ||
+                d.artifactId.equals( "wagon-api" ) ||
+                d.artifactId.equals( "maven-artifact" ) )
-        // ----------------------------------------------------------------------
-        // plugins
-        // ----------------------------------------------------------------------
-
-        String plugins = new File( dist, "plugins" ).getAbsolutePath();
-
-        FileUtils.mkdir( new File( plugins ).getPath() );
-
-        List libs = FileUtils.getFiles( new File( basedir, "maven-plugins" ), "**/target/*.jar", null );
-
-        for ( Iterator i = libs.iterator(); i.hasNext(); )
-        {
-            File f = (File) i.next();
-
-            FileUtils.copyFileToDirectory( f.getAbsolutePath(), plugins );
-        }
-
-        installJar( basedir, repoLocal );
+        if ( !reader.artifactId.equals( "maven-plugin" ) && reader.artifactId.endsWith( "plugin" ) )
+        {
+            installPlugin( basedir, repoLocal );
+        }
+        else
+        {
+            installJar( basedir, repoLocal );
+        }
-    private void generatePluginDescriptor( String sourceDirectory, String outputDirectory, String pom )
+    IsolatedClassLoader cl;
+
+    private void createToolsClassLoader()
-        IsolatedClassLoader cl = new IsolatedClassLoader();
+        cl = new IsolatedClassLoader();
+    }
+    private void generatePluginDescriptor( String sourceDirectory, String outputDirectory, String pom )
+        throws Exception
+    {
-        IsolatedClassLoader cl = new IsolatedClassLoader();
-
-        for ( Iterator i = mbootDependencies.iterator(); i.hasNext(); )
-        {
-            String dependency = (String) i.next();
-
-            File f = new File( repoLocal, dependency );
-
-            cl.addURL( f.toURL() );
-        }
-
+    private void installPlugin( String basedir, String repoLocal )
+        throws Exception
+    {
+        String artifactId = reader.artifactId;
+
+        String version = reader.version;
+
+        String groupId = reader.groupId;
+
+        File jar = new File( repoLocal, "/" + groupId + "/plugins/" + artifactId + "-" + version + ".jar" );
+
+        System.out.println( "Installing Plugin: " + jar );
+
+        FileUtils.copyFile( new File( basedir, BUILD_DIR + "/" + artifactId + "-" + version + ".jar" ), jar );
+    }
+
