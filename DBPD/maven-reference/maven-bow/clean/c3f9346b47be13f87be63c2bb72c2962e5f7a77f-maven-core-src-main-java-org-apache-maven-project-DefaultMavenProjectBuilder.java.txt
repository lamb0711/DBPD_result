o Introduced ProfileSelector component which will replace the profile manager (the new component is stateless and focuses on the task to determine the active profiles from a given input collection). The long term goal is to use the project builder configuration as the profile activation context as this holds basically all the bits required for profile activators.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@777961 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.profiles.DefaultProfileManager;
-import org.apache.maven.profiles.ProfileActivationContext;
-import org.apache.maven.profiles.ProfileActivationException;
+import org.apache.maven.model.profile.ProfileActivationException;
+import org.apache.maven.model.profile.ProfileSelector;
-import org.apache.maven.profiles.ProfileManagerInfo;
+    private ProfileSelector profileSelector;
+
+    @Requirement
-
-        ProfileActivationContext profileActivationContext = new ProfileActivationContext( configuration.getExecutionProperties(), true );
-        profileActivationContext.setExplicitlyActiveProfileIds( configuration.getActiveProfileIds() );
-        profileActivationContext.setExplicitlyInactiveProfileIds( configuration.getInactiveProfileIds() );
-
-        ProfileManager profileManager = new DefaultProfileManager( profileActivationContext );
-            domainModel = build( "unknown", pomFile, profileManager, configuration );
+            domainModel = build( "unknown", pomFile, configuration );
-            projectProfiles = new ArrayList<Profile>();            
-            profileManager.addProfiles( domainModel.getModel().getProfiles() );
+            projectProfiles = new ArrayList<Profile>();
+            projectProfiles.addAll( domainModel.getModel().getProfiles() );
-                profileManager.addProfiles( configuration.getProfiles() );
+                projectProfiles.addAll( configuration.getProfiles() );
-            projectProfiles.addAll( profileManager.getActiveProfiles() );                         
+            projectProfiles = profileSelector.getActiveProfiles( projectProfiles, configuration );
-    private DomainModel build( String projectId, File pomFile, ProfileManager profileManager, ProjectBuilderConfiguration projectBuilderConfiguration )
+    private DomainModel build( String projectId, File pomFile, ProjectBuilderConfiguration projectBuilderConfiguration )
-        List<String> activeProfileIds = ( projectBuilderConfiguration != null && profileManager != null && profileManager.getProfileActivationContext() != null ) ? profileManager
-            .getProfileActivationContext().getExplicitlyActiveProfileIds() : new ArrayList<String>();
-
-        List<String> inactiveProfileIds = ( projectBuilderConfiguration != null && profileManager != null && profileManager.getProfileActivationContext() != null ) ? profileManager
-            .getProfileActivationContext().getExplicitlyInactiveProfileIds() : new ArrayList<String>();
-
-        ProfileManagerInfo profileInfo = new ProfileManagerInfo( projectBuilderConfiguration.getExecutionProperties(), activeProfileIds, inactiveProfileIds );
-                Collection<Profile> profiles = DefaultProfileManager.getActiveProfiles( dm.getModel().getProfiles(), profileInfo );
+                Collection<Profile> profiles;
+                try
+                {
+                    profiles =
+                        profileSelector.getActiveProfiles( dm.getModel().getProfiles(), projectBuilderConfiguration );
+                }
+                catch ( ProfileActivationException e )
+                {
+                    throw new ProjectBuildingException( projectId, "Failed to determine active profiles", pomFile, e );
+                }
