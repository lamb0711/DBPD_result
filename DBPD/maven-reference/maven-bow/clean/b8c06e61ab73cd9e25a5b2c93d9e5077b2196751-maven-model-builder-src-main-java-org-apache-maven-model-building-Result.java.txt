Remove Google Guava usage (move to Java7)
-import static com.google.common.base.Predicates.in;
-import static com.google.common.collect.Iterables.any;
-import static com.google.common.collect.Iterables.concat;
-import static com.google.common.collect.Iterables.transform;
-import static java.util.EnumSet.of;
-import java.util.Arrays;
+import java.util.ArrayList;
+import java.util.Collection;
-
-import org.apache.maven.model.building.ModelProblem.Severity;
-
-import com.google.common.base.Function;
-import com.google.common.base.Predicates;
-import com.google.common.collect.Iterables;
+import java.util.List;
-        return success( model, Iterables.concat( Iterables.transform( Arrays.asList( results ), GET_PROBLEMS ) ) );
+        final List<ModelProblem> problemsList = new ArrayList<>();
+
+        for ( Result<?> result1 : results )
+        {
+            for ( ModelProblem modelProblem : result1.getProblems() )
+            {
+                problemsList.add( modelProblem );
+            }
+        }
+
+        return success( model, problemsList );
-        return error( Iterables.concat( Iterables.transform( Arrays.asList( results ), GET_PROBLEMS ) ) );
+        final List<ModelProblem> problemsList = new ArrayList<>( );
+
+        for ( Result<?> result1 : results )
+        {
+            for ( ModelProblem modelProblem : result1.getProblems( ) )
+            {
+                problemsList.add( modelProblem );
+            }
+        }
+
+        return error( problemsList );
-        return new Result<>( result.hasErrors() || hasErrors( problems ), result.get(), concat( result.getProblems(),
-                                                                                                 problems ) );
+        Collection<ModelProblem> list = new ArrayList<>();
+        for ( ModelProblem item : problems )
+        {
+            list.add( item );
+        }
+        for ( ModelProblem item : result.getProblems() )
+        {
+            list.add( item );
+        }
+        return new Result<>( result.hasErrors() || hasErrors( problems ), result.get(), list );
-        return addProblems( result, Iterables.concat( Iterables.transform( Arrays.asList( results ), GET_PROBLEMS ) ) );
+        final List<ModelProblem> problemsList = new ArrayList<>();
+
+        for ( Result<?> result1 : results )
+        {
+            for ( ModelProblem modelProblem : result1.getProblems( ) )
+            {
+                problemsList.add( modelProblem );
+            }
+        }
+        return addProblems( result, problemsList );
-        final boolean hasErrors = any( transform( results, new Function<Result<?>, Boolean>()
+        boolean hasErrors = false;
+        List<T> modelsList = new ArrayList<>();
+        List<ModelProblem> problemsList = new ArrayList<>();
+
+        for ( Result<? extends T> result : results )
-            @Override
-            public Boolean apply( Result<?> input )
+            modelsList.add( result.get() );
+
+            for ( ModelProblem modelProblem : result.getProblems() )
-                return input.hasErrors();
+                problemsList.add( modelProblem );
-        } ), Predicates.equalTo( true ) );
-        final Iterable<T> models = transform( results, new Function<Result<? extends T>, T>()
-        {
-            @Override
-            public T apply( Result<? extends T> input )
+
+            if ( result.hasErrors() )
-                return input.get();
+                hasErrors = true;
-        } );
-        final Iterable<ModelProblem> problems = concat( transform( results, GET_PROBLEMS ) );
-        return new Result<>( hasErrors, models, problems );
+        }
+        return new Result<>( hasErrors, ( Iterable<T> ) modelsList, problemsList );
-        return any( transform( problems, new Function<ModelProblem, Severity>()
+        for ( ModelProblem input : problems )
-            @Override
-            public Severity apply( ModelProblem input )
+            if ( input.getSeverity().equals( ERROR ) || input.getSeverity().equals( FATAL ) )
-                return input.getSeverity();
+                return true;
-        } ), in( of( ERROR, FATAL ) ) );
+        }
+        return false;
-
-    private static final Function<Result<?>, Iterable<? extends ModelProblem>> GET_PROBLEMS =
-        new Function<Result<?>, Iterable<? extends ModelProblem>>()
-        {
-            @Override
-            public Iterable<? extends ModelProblem> apply( Result<?> input )
-            {
-                return input.getProblems();
-            }
-        };
