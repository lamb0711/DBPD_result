OPEN - issue MNG-3027: forked execution does not get configuration from the POM 
http://jira.codehaus.org/browse/MNG-3027

Adding reporting section to sources of plugin configuration when mojos are forked from a report mojo. Also, improving detection/addition of report mojos from a plugin, when no report-set is defined.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@543308 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.reporting.MavenReport;
+import org.codehaus.plexus.classworlds.realm.ClassRealm;
-import java.util.Map;
- * 
+ *
- * 
+ *
-public class DefaultLifecycleBindingManager implements LifecycleBindingManager, LogEnabled
+public class DefaultLifecycleBindingManager
+    implements LifecycleBindingManager, LogEnabled
-                                                        final String lifecycleId, final MavenProject project )
+                                                        final String lifecycleId, final MavenProject project,
+                                                        final boolean includeReportConfig )
-                        binding = mojoBindingFactory.parseMojoBinding( goal, project, false );
+                        binding = mojoBindingFactory.parseMojoBinding( goal, project, false, includeReportConfig );
-            logger.error( "Plugin contains a <reports/> section: this is IGNORED - please use <reporting/> instead." );
+            logger.warn( "Plugin contains a <reports/> section: this is IGNORED - please use <reporting/> instead." );
-        String pluginKey = BindingUtils.createPluginKey( reportPlugin.getGroupId(), reportPlugin.getArtifactId() );
-        Plugin plugin = (Plugin) BindingUtils.buildPluginMap( project ).get( pluginKey );
-
+
+            // FIXME: Can't we be smarter about what is and what is not a report???
+            try
+            {
+                if ( !isReport( mojoDescriptor ) )
+                {
+                    continue;
+                }
+            }
+            catch ( ClassNotFoundException e )
+            {
+                throw new LifecycleLoaderException( "Failed while verifying that mojo: " + mojoDescriptor.getId() + " is a report mojo. Reason: " + e.getMessage(), e );
+            }
+
-                Object reportConfig = BindingUtils.mergeConfigurations( reportPlugin, reportSet );
-
-                if ( plugin == null )
-                {
-                    plugin = new Plugin();
-                    plugin.setGroupId( pluginDescriptor.getGroupId() );
-                    plugin.setArtifactId( pluginDescriptor.getArtifactId() );
-                }
-
-                BindingUtils.injectPluginManagementInfo( plugin, project );
-
-                Map execMap = plugin.getExecutionsAsMap();
-                PluginExecution exec = (PluginExecution) execMap.get( id );
-
-                Object pluginConfig = plugin.getConfiguration();
-                if ( exec != null )
-                {
-                    pluginConfig = BindingUtils.mergeConfigurations( plugin, exec );
-                }
-
-                reportConfig = BindingUtils.mergeRawConfigurations( reportConfig, pluginConfig );
-
-                binding.setConfiguration( reportConfig );
+                BindingUtils.injectProjectConfiguration( binding, project, true );
+    private boolean isReport( MojoDescriptor mojoDescriptor )
+        throws ClassNotFoundException
+    {
+        ClassRealm classRealm = mojoDescriptor.getPluginDescriptor().getClassRealm();
+        String impl = mojoDescriptor.getImplementation();
+
+        Class mojoClass = classRealm.loadClass( impl );
+        Class reportClass = classRealm.loadClass( MavenReport.class.getName() );
+
+        return reportClass.isAssignableFrom( mojoClass );
+    }
+
