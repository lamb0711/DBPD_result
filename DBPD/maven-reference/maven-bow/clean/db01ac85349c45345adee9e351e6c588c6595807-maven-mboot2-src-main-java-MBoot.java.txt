handle scope


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163747 13f79535-47bb-0310-9956-ffa450edef68

+    private static final String[] EMPTY_STRING_ARRAY = new String[0];
+
+    private static final String SCOPE_TEST = "test";
+
+    private static final String SCOPE_COMPILE = "compile";
+
+    private static final String SCOPE_RUNTIME = "runtime";
+
-        // ----------------------------------------------------------------------
-        // Download bootstrapDeps
-        // ----------------------------------------------------------------------
-
-            System.out.println( "Downloading dependencies ..." );
+            System.out.println( "Downloading project dependencies ..." );
-            compile( reader.getDependencies(), sources, classes, null, generatedSources );
+            compile( reader.getDependencies(), sources, classes, null, generatedSources, SCOPE_COMPILE );
-            compile( reader.getDependencies(), sources, classes, null, null );
+            compile( reader.getDependencies(), sources, classes, null, null, SCOPE_COMPILE );
-        Dependency junitDep = new Dependency();
-
-        junitDep.setGroupId( "junit" );
-
-        junitDep.setArtifactId( "junit" );
-
-        junitDep.setVersion( "3.8.1" );
-
-        testDependencies.add( junitDep );
-
-        compile( testDependencies, testSources, testClasses, classes, null );
+        compile( testDependencies, testSources, testClasses, classes, null, SCOPE_TEST );
-                throw new FileNotFoundException( "Missing dependency: " + dependency + ( !online
-                                                                                         ? "; run again online"
-                                                                                         : "; there was a problem downloading it earlier" ) );
+                throw new FileNotFoundException(
+                    "Missing dependency: " + dependency +
+                    ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
-        IsolatedClassLoader modelloClassLoader = new IsolatedClassLoader();
+        IsolatedClassLoader cl = new IsolatedClassLoader();
-            modelloClassLoader.addURL( f.toURL() );
+            cl.addURL( f.toURL() );
-        return modelloClassLoader;
+        return cl;
-        boolean success = testRunner.execute( repoLocal, basedir, classes, testClasses, includes, excludes,
-                                              classpath( reader.getDependencies(), null ), reportsDir );
+        String[] cp = (String[]) classpath( reader.getDependencies(), null, SCOPE_TEST ).toArray( EMPTY_STRING_ARRAY );
+        boolean success = testRunner.execute( repoLocal, basedir, classes, testClasses, includes, excludes, cp,
+                                              reportsDir );
-    private String[] classpath( List dependencies, String extraClasspath )
+    private List classpath( List dependencies, String extraClasspath, String scope )
-        String classpath[] = new String[dependencies.size() + 1];
+        List classpath = new ArrayList( dependencies.size() + 1 );
-            classpath[i] = repoLocal + "/" + d.getRepositoryPath();
+            String element = repoLocal + "/" + d.getRepositoryPath();
+
+            if ( SCOPE_COMPILE.equals( scope ) )
+            {
+                if ( d.getScope().equals( SCOPE_COMPILE ) )
+                {
+                    classpath.add( element );
+                }
+            }
+            else if ( SCOPE_RUNTIME.equals( scope ) )
+            {
+                if ( d.getScope().equals( SCOPE_COMPILE ) || d.getScope().equals( SCOPE_RUNTIME ) )
+                {
+                    classpath.add( element );
+                }
+            }
+            else if ( SCOPE_TEST.equals( scope ) )
+            {
+                classpath.add( element );
+            }
-        classpath[classpath.length - 1] = extraClasspath;
+        classpath.add( extraClasspath );
-                          String generatedSources )
+                          String generatedSources, String scope )
-            compilerConfiguration.setClasspathEntries( Arrays.asList( classpath( dependencies, extraClasspath ) ) );
+            compilerConfiguration.setClasspathEntries( classpath( dependencies, extraClasspath, scope ) );
