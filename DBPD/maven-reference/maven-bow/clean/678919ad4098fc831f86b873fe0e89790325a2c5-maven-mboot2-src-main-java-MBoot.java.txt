PR: MNG-145
add mirror notation to settings, introduce to bootstrap

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168282 13f79535-47bb-0310-9956-ffa450edef68

-        Repository localRepository = new Repository( mavenRepoLocal, Repository.LAYOUT_DEFAULT );
+        Repository localRepository = new Repository( "local", mavenRepoLocal, Repository.LAYOUT_DEFAULT );
-            downloader = new ArtifactDownloader( localRepository, Collections.EMPTY_LIST );
+            downloader = new ArtifactDownloader( localRepository );
+
+            List remoteRepos = downloader.getRemoteRepositories();
+            List newRemoteRepos = new ArrayList();
+
+            for ( Iterator i = remoteRepos.iterator(); i.hasNext(); )
+            {
+                Repository repo = (Repository) i.next();
+
+                boolean foundMirror = false;
+                for ( Iterator j = userModelReader.getMirrors().iterator(); j.hasNext() && !foundMirror; )
+                {
+                    Mirror m = (Mirror) j.next();
+                    if ( m.getMirrorOf().equals( repo.getId() ) )
+                    {
+                        newRemoteRepos.add( new Repository( m.getId(), m.getUrl(), repo.getLayout() ) );
+                        foundMirror = true;
+                    }
+                }
+                if ( !foundMirror )
+                {
+                    newRemoteRepos.add( repo );
+                }
+            }
+
+            downloader.setRemoteRepositories( newRemoteRepos );
+
+            System.out.println( "Using the following for your local repository: " + localRepository );
+            System.out.println( "Using the following for your remote repository: " + newRemoteRepos );
+        private List mirrors = new ArrayList();
+
+        private Mirror currentMirror;
+
-                    throw new SAXException( "Invalid proxy entry. Missing one or more " + "fields: {host, port}." );
+                    throw new SAXException( "Invalid proxy entry. Missing one or more fields: {host, port}." );
+            else if ( "mirror".equals( rawName ) )
+            {
+                if ( notEmpty( currentMirror.getId() ) && notEmpty( currentMirror.getMirrorOf() ) &&
+                    notEmpty( currentMirror.getUrl() ) )
+                {
+                    mirrors.add( currentMirror );
+                    currentMirror = null;
+                }
+                else
+                {
+                    throw new SAXException( "Invalid mirror entry. Missing one or more fields: {id, mirrorOf, url}." );
+                }
+            }
+            else if ( currentMirror != null )
+            {
+                if ( "id".equals( rawName ) )
+                {
+                    currentMirror.setId( currentBody.toString().trim() );
+                }
+                else if ( "mirrorOf".equals( rawName ) )
+                {
+                    currentMirror.setMirrorOf( currentBody.toString().trim() );
+                }
+                else if ( "url".equals( rawName ) )
+                {
+                    currentMirror.setUrl( currentBody.toString().trim() );
+                }
+                else if ( "name".equals( rawName ) )
+                {
+                }
+                else
+                {
+                    throw new SAXException( "Illegal element inside proxy: \'" + rawName + "\'" );
+                }
+            }
+            else if ( "mirror".equals( rawName ) )
+            {
+                currentMirror = new Mirror();
+            }
+            this.currentMirror = null;
+            this.mirrors.clear();
+        }
+
+        public List getMirrors()
+        {
+            return mirrors;
-    public class Proxy
+    public static class Proxy
+    public static class Mirror
+    {
+        private String id;
+
+        private String mirrorOf;
+
+        private String url;
+
+        public String getId()
+        {
+            return id;
+        }
+
+        public void setId( String id )
+        {
+            this.id = id;
+        }
+
+        public void setMirrorOf( String mirrorOf )
+        {
+            this.mirrorOf = mirrorOf;
+        }
+
+        public void setUrl( String url )
+        {
+            this.url = url;
+        }
+
+        public String getMirrorOf()
+        {
+            return mirrorOf;
+        }
+
+        public String getUrl()
+        {
+            return url;
+        }
+    }
