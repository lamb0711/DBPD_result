o reduce the foot print of the plugin manager, the interaction between the lifecycle executor and plugin manager is far too intimate


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@751459 13f79535-47bb-0310-9956-ffa450edef68

-    // Plugin Context
-    public Collection<MojoExecution> getMojoExecutionsForGoal( String goal )
-        throws Exception
-    {
-        List<MojoExecution> mojoExecutions = new ArrayList<MojoExecution>();
-
-        for ( PluginDescriptor descriptor : pluginCollector.getPluginDescriptors() )
-        {
-            MojoDescriptor mojoDescriptor = descriptor.getMojo( goal );
-
-            if ( mojoDescriptor != null )
-            {
-                MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );
-                mojoExecution.setConfiguration( Xpp3DomBuilder.build( new StringReader( mojoDescriptor.getMojoConfiguration().toString() ) ) );
-                mojoExecutions.add( mojoExecution );
-            }
-        }
-
-        return mojoExecutions;
-    }
-
-    public Object getMojoParameterFor( MojoExecution mojoExecution, String xPath )
-        throws Exception
-    {
-        Xpp3Dom mojoDescriptorConfiguration = Xpp3DomBuilder.build( new StringReader( mojoExecution.getMojoDescriptor().getMojoConfiguration().toString() ) );
-
-        Xpp3Dom mergedConfig = Xpp3Dom.mergeXpp3Dom( mojoExecution.getConfiguration(), mojoDescriptorConfiguration );
-
-        return JXPathContext.newContext( mergedConfig ).getValue( xPath );
-    }
-
-    public void executeMojo( MojoExecution mojoExecution, MavenSession session )
-        throws Exception
-    {
-        executeMojo( session.getCurrentProject(), mojoExecution, session );
-    }
-
-    // Version Manager
-
