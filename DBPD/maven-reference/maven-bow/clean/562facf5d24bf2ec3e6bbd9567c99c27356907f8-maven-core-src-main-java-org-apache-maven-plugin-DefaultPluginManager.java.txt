PR: MNG-122
cleanup artifact metadata retrieval exceptions

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@320701 13f79535-47bb-0310-9956-ffa450edef68

-        throws ArtifactNotFoundException, PluginConfigurationException, PluginManagerException
+        throws ArtifactNotFoundException, PluginConfigurationException, PluginManagerException,
+        ArtifactResolutionException
-        throws PluginConfigurationException, ArtifactNotFoundException, PluginManagerException
+        throws PluginConfigurationException, ArtifactNotFoundException, PluginManagerException,
+        ArtifactResolutionException
-        throws PluginConfigurationException, ArtifactNotFoundException
+        throws ArtifactNotFoundException, PluginManagerException, ArtifactResolutionException
+            ArtifactRepository localRepository = session.getLocalRepository();
+
+            ResolutionGroup resolutionGroup;
-                ArtifactRepository localRepository = session.getLocalRepository();
-
-                ResolutionGroup resolutionGroup = artifactMetadataSource.retrieve( pluginArtifact, localRepository,
-                                                                                   project.getPluginArtifactRepositories() );
-
-                Set dependencies = new HashSet( resolutionGroup.getArtifacts() );
-
-                dependencies.addAll( pluginDescriptor.getIntroducedDependencyArtifacts() );
-
-                ArtifactResolutionResult result = artifactResolver.resolveTransitively( dependencies, pluginArtifact,
-                                                                                        localRepository,
-                                                                                        resolutionGroup.getResolutionRepositories(),
-                                                                                        artifactMetadataSource,
-                                                                                        artifactFilter );
-
-                Set resolved = result.getArtifacts();
-
-                for ( Iterator it = resolved.iterator(); it.hasNext(); )
-                {
-                    Artifact artifact = (Artifact) it.next();
-
-                    if ( !artifact.equals( pluginArtifact ) )
-                    {
-                        artifact = project.replaceWithActiveArtifact( artifact );
-
-                        pluginContainer.addJarResource( artifact.getFile() );
-                    }
-                }
-
-                pluginDescriptor.setClassRealm( pluginContainer.getContainerRealm() );
-
-                List unresolved = new ArrayList( dependencies );
-
-                unresolved.removeAll( resolved );
-
-                resolveCoreArtifacts( unresolved, localRepository, resolutionGroup.getResolutionRepositories() );
-
-                List allResolved = new ArrayList( resolved.size() + unresolved.size() );
-
-                allResolved.addAll( resolved );
-                allResolved.addAll( unresolved );
-
-                pluginDescriptor.setArtifacts( allResolved );
-            }
-            catch ( ArtifactResolutionException e )
-            {
-                throw new PluginConfigurationException( pluginDescriptor, "Cannot resolve plugin dependencies", e );
-            }
-            catch ( PlexusContainerException e )
-            {
-                throw new PluginConfigurationException( pluginDescriptor, "Cannot start plugin container", e );
+                resolutionGroup = artifactMetadataSource.retrieve( pluginArtifact, localRepository,
+                                                                   project.getPluginArtifactRepositories() );
-                throw new PluginConfigurationException( pluginDescriptor, "Cannot resolve plugin dependencies", e );
+                throw new ArtifactResolutionException( "Unable to download metadata from repository for plugin '" +
+                    pluginArtifact.getId() + "': " + e.getMessage(), pluginArtifact, e );
+
+            Set dependencies = new HashSet( resolutionGroup.getArtifacts() );
+
+            dependencies.addAll( pluginDescriptor.getIntroducedDependencyArtifacts() );
+
+            ArtifactResolutionResult result = artifactResolver.resolveTransitively( dependencies, pluginArtifact,
+                                                                                    localRepository,
+                                                                                    resolutionGroup.getResolutionRepositories(),
+                                                                                    artifactMetadataSource,
+                                                                                    artifactFilter );
+
+            Set resolved = result.getArtifacts();
+
+            for ( Iterator it = resolved.iterator(); it.hasNext(); )
+            {
+                Artifact artifact = (Artifact) it.next();
+
+                if ( !artifact.equals( pluginArtifact ) )
+                {
+                    artifact = project.replaceWithActiveArtifact( artifact );
+
+                    try
+                    {
+                        pluginContainer.addJarResource( artifact.getFile() );
+                    }
+                    catch ( PlexusContainerException e )
+                    {
+                        throw new PluginManagerException( "Error adding plugin dependency '" +
+                            artifact.getDependencyConflictId() + "' into plugin manager: " + e.getMessage(), e );
+                    }
+                }
+            }
+
+            pluginDescriptor.setClassRealm( pluginContainer.getContainerRealm() );
+
+            List unresolved = new ArrayList( dependencies );
+
+            unresolved.removeAll( resolved );
+
+            resolveCoreArtifacts( unresolved, localRepository, resolutionGroup.getResolutionRepositories() );
+
+            List allResolved = new ArrayList( resolved.size() + unresolved.size() );
+
+            allResolved.addAll( resolved );
+            allResolved.addAll( unresolved );
+
+            pluginDescriptor.setArtifacts( allResolved );
