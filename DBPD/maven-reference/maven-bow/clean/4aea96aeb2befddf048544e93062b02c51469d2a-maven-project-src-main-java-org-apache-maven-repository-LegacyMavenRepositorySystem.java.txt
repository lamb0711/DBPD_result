o use the artifact resolution request/result method to remove another couple methods from the repository system


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@747658 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import org.codehaus.plexus.logging.LogEnabled;
-    implements MavenRepositorySystem, LogEnabled
+    implements MavenRepositorySystem
-    
+
-        
+
-    
+
-        
+
-    
+
-    
+
-    
-    public Artifact createArtifact(String groupId, String artifactId, String version, String scope, String type)
+
+    public Artifact createArtifact( String groupId, String artifactId, String version, String scope, String type )
-    	return artifactFactory.createArtifact(groupId, artifactId, version, scope, type);
+        return artifactFactory.createArtifact( groupId, artifactId, version, scope, type );
-    public Artifact createArtifactWithClassifier(String groupId, String artifactId, String version, String type, String classifier)
+    public Artifact createArtifactWithClassifier( String groupId, String artifactId, String version, String type, String classifier )
-    	return artifactFactory.createArtifactWithClassifier(groupId, artifactId, version, type, classifier);
+        return artifactFactory.createArtifactWithClassifier( groupId, artifactId, version, type, classifier );
-    
-    public Artifact createBuildArtifact(String groupId, String artifactId, String version, String packaging )
+
+    public Artifact createBuildArtifact( String groupId, String artifactId, String version, String packaging )
-    	return artifactFactory.createBuildArtifact(groupId, artifactId, version, packaging );    	
+        return artifactFactory.createBuildArtifact( groupId, artifactId, version, packaging );
-    
+
-    	return artifactFactory.createProjectArtifact(groupId, artifactId, metaVersionId );    	
+        return artifactFactory.createProjectArtifact( groupId, artifactId, metaVersionId );
-        return artifactFactory.createDependencyArtifact( groupId, artifactId, versionRange, type, classifier, scope );        
+        return artifactFactory.createDependencyArtifact( groupId, artifactId, versionRange, type, classifier, scope );
-        return artifactFactory.createDependencyArtifact( groupId, artifactId, versionRange, type, classifier, scope, inheritedScope );        
+        return artifactFactory.createDependencyArtifact( groupId, artifactId, versionRange, type, classifier, scope, inheritedScope );
-    
+
-    
+
-    
+
-    
+
-    
-    public List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact,
-			ArtifactRepository localRepository,
-			List<ArtifactRepository> remoteRepositories)
-			throws ArtifactMetadataRetrievalException 
-	{
-        return artifactMetadataSource.retrieveAvailableVersions(artifact, localRepository, remoteRepositories);
-	}
-    
+
+    public List<ArtifactVersion> retrieveAvailableVersions( Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+        throws ArtifactMetadataRetrievalException
+    {
+        return artifactMetadataSource.retrieveAvailableVersions( artifact, localRepository, remoteRepositories );
+    }
+
-        return artifactMetadataSource.retrieve(artifact, localRepository, remoteRepositories);
+        return artifactMetadataSource.retrieve( artifact, localRepository, remoteRepositories );
-    
-    public ArtifactResolutionResult resolveTransitively(
-			Set<Artifact> artifacts, Artifact originatingArtifact,
-			Map managedVersions, ArtifactRepository localRepository,
-			List<ArtifactRepository> remoteRepositories,
-			ArtifactFilter filter )
-			throws ArtifactResolutionException, ArtifactNotFoundException 
-    {
-    	return artifactResolver.resolveTransitively(artifacts, originatingArtifact, remoteRepositories, localRepository, artifactMetadataSource );    	
-	}
-    
+
-        for( Repository mavenRepo : repositories )
+        for ( Repository mavenRepo : repositories )
-        
+
-            if ( url == null || url.trim().length() < 1 )                
+            if ( url == null || url.trim().length() < 1 )
-    
+
-    
-    public ArtifactRepository createRepository( String url,
-                                                String repositoryId,
-                                                ArtifactRepositoryPolicy snapshotsPolicy,
-                                                ArtifactRepositoryPolicy releasesPolicy )
+
+    public ArtifactRepository createRepository( String url, String repositoryId, ArtifactRepositoryPolicy snapshotsPolicy, ArtifactRepositoryPolicy releasesPolicy )
-        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout, snapshotsPolicy, releasesPolicy );        
+        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout, snapshotsPolicy, releasesPolicy );
-        artifactRepositoryFactory.setGlobalChecksumPolicy( policy );        
+        artifactRepositoryFactory.setGlobalChecksumPolicy( policy );
-    
+
-    
+
-                          + artifact.getType() + "; constructing POM artifact instead." );
+                + artifact.getType() + "; constructing POM artifact instead." );
-    public void enableLogging( Logger logger )
-    {
-        this.logger = logger;
-    }
-    
-     *
+     * 
-        /* FIXME: Not sure what this was meant to do here but right now it screws up several ITs
-        File artifactFile = new File( localRepository.getBasedir(), localRepository.pathOf( artifact ) );
-        artifact.setFile( artifactFile );
-        //*/
+    }
+
+    public ArtifactResolutionResult resolve( ArtifactResolutionRequest request )
+    {
+        return artifactResolver.resolve( request );
-    
+
-    
+
-        
+
-    
-    private Map<String,ProxyInfo> proxies = new HashMap<String,ProxyInfo>();
-    
-    private Map<String,AuthenticationInfo> authenticationInfoMap = new HashMap<String,AuthenticationInfo>();
-    
-    private Map<String,RepositoryPermissions> serverPermissionsMap = new HashMap<String,RepositoryPermissions>();
-    
+
+    private Map<String, ProxyInfo> proxies = new HashMap<String, ProxyInfo>();
+
+    private Map<String, AuthenticationInfo> authenticationInfoMap = new HashMap<String, AuthenticationInfo>();
+
+    private Map<String, RepositoryPermissions> serverPermissionsMap = new HashMap<String, RepositoryPermissions>();
+
-    private Map<String,ArtifactRepository> mirrors = new LinkedHashMap<String,ArtifactRepository>();
-    
+    private Map<String, ArtifactRepository> mirrors = new LinkedHashMap<String, ArtifactRepository>();
+
-            repository = artifactRepositoryFactory.createArtifactRepository( id, mirror.getUrl(),
-                                                                     repository.getLayout(), repository.getSnapshots(),
-                                                                     repository.getReleases() );
+            repository = artifactRepositoryFactory.createArtifactRepository( id, mirror.getUrl(), repository.getLayout(), repository.getSnapshots(), repository.getReleases() );
-    }    
-    
+    }
+
-     * This method finds a matching mirror for the selected repository. If there is an exact match, this will be used.
-     * If there is no exact match, then the list of mirrors is examined to see if a pattern applies.
-     *
+     * This method finds a matching mirror for the selected repository. If there is an exact match,
+     * this will be used. If there is no exact match, then the list of mirrors is examined to see if
+     * a pattern applies.
+     * 
-     * This method checks if the pattern matches the originalRepository.
-     * Valid patterns:
-     * * = everything
-     * external:* = everything not on the localhost and not file based.
-     * repo,repo1 = repo or repo1
-     * *,!repo1 = everything except repo1
-     *
+     * This method checks if the pattern matches the originalRepository. Valid patterns: * =
+     * everything external:* = everything not on the localhost and not file based. repo,repo1 = repo
+     * or repo1 *,!repo1 = everything except repo1
+     * 
-            for (String repo : repos) {
+            for ( String repo : repos )
+            {
-                if (repo.length() > 1 && repo.startsWith("!")) {
-                    if (originalId.equals(repo.substring(1))) {
+                if ( repo.length() > 1 && repo.startsWith( "!" ) )
+                {
+                    if ( originalId.equals( repo.substring( 1 ) ) )
+                    {
-                else if (originalId.equals(repo)) {
+                else if ( originalId.equals( repo ) )
+                {
-                else if (EXTERNAL_WILDCARD.equals(repo) && isExternalRepo(originalRepository)) {
+                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
+                {
-                } else if (WILDCARD.equals(repo)) {
+                }
+                else if ( WILDCARD.equals( repo ) )
+                {
-    }    
-    
+    }
+
-     *
+     * 
-            return !( url.getHost().equals( "localhost" ) || url.getHost().equals( "127.0.0.1" ) || url.getProtocol().equals("file" ) );
+            return !( url.getHost().equals( "localhost" ) || url.getHost().equals( "127.0.0.1" ) || url.getProtocol().equals( "file" ) );
-    }  
-    
+    }
+
-        
+
-    
+
-    
+
-    } 
-    
+    }
+
-    }    
-    
+    }
+
-    public ArtifactResolutionResult resolve( ArtifactResolutionRequest request )
-    {
-        return artifactResolver.resolve( request );
-    }
-
-    
+
-    }    
-    
+    }
+
-    
+
