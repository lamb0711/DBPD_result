MNG-5306 : introduce ModelProblemCollectorRequest and a new ModelProblem property - version which denotes on which validation level the error/warning applies. Additionally move the logic on failing the ModelBuilding from ModelProblemCollector to ModelBuilder's protected method to allow overriding. Default maven behaviour should stay the same.

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1357589 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.building.ModelProblem.Version;
-                problems.add( ModelProblem.Severity.FATAL, message, null, null );
+                problems.add( new ModelProblemCollectorRequest(ModelProblem.Severity.FATAL, ModelProblem.Version.BASE).setMessage(message));
-        if ( problems.hasErrors() )
+        if ( hasModelErrors(problems) )
-                    problems.add( Severity.ERROR, "Malformed POM " + modelSource.getLocation() + ": " + e.getMessage(),
-                                  null, e );
+                    problems.add( new ModelProblemCollectorRequest(Severity.ERROR, Version.V20)
+                            .setMessage("Malformed POM " + modelSource.getLocation() + ": " + e.getMessage())
+                            .setException(e ));
-                    problems.add( Severity.WARNING, "Malformed POM " + modelSource.getLocation() + ": "
-                        + e.getMessage(), null, e );
+                    problems.add( new ModelProblemCollectorRequest(Severity.WARNING, Version.V20)
+                            .setMessage("Malformed POM " + modelSource.getLocation() + ": " + e.getMessage())
+                            .setException(e));
-            problems.add( Severity.FATAL, "Non-parseable POM " + modelSource.getLocation() + ": " + e.getMessage(),
-                          null, e );
+            problems.add( new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE)
+                    .setMessage("Non-parseable POM " + modelSource.getLocation() + ": " + e.getMessage())
+                    .setException(e));
-            problems.add( Severity.FATAL, "Non-readable POM " + modelSource.getLocation() + ": " + msg, null, e );
+            problems.add( new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE)
+                    .setMessage("Non-readable POM " + modelSource.getLocation() + ": " + msg)
+                    .setException(e ));
-        if ( problems.hasFatalErrors() )
+        if ( hasFatalErrors(problems) )
-                problems.add( Severity.ERROR, "Invalid repository " + repository.getId() + ": " + e.getMessage(),
-                              repository.getLocation( "" ), e );
+                problems.add( new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE)
+                        .setMessage( "Invalid repository " + repository.getId() + ": " + e.getMessage())
+                        .setLocation(repository.getLocation( "" ))
+                        .setException(e) );
-                problems.add( Severity.WARNING, "'build.plugins.plugin.version' for " + key + " is missing.", location,
-                              null );
+                problems.add( new ModelProblemCollectorRequest(Severity.WARNING, Version.V20)
+                        .setMessage( "'build.plugins.plugin.version' for " + key + " is missing.")
+                        .setLocation(location));
-                problems.add( Severity.ERROR, "Invalid packaging for parent POM "
-                    + ModelProblemUtils.toSourceHint( parentModel ) + ", must be \"pom\" but is \""
-                    + parentModel.getPackaging() + "\"", parentModel.getLocation( "packaging" ), null );
+                problems.add( new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE)
+                        .setMessage( "Invalid packaging for parent POM " + ModelProblemUtils.toSourceHint( parentModel ) + ", must be \"pom\" but is \""
+                                    + parentModel.getPackaging() + "\"")
+                        .setLocation(parentModel.getLocation( "packaging" )));
-            problems.add( Severity.WARNING, buffer.toString(), parent.getLocation( "" ), null );
+            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.BASE)
+                    .setMessage( buffer.toString())
+                    .setLocation( parent.getLocation( "" )));
-            problems.add( Severity.FATAL, buffer.toString(), parent.getLocation( "" ), e );
+            problems.add( new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE)
+                    .setMessage( buffer.toString())
+                    .setLocation(parent.getLocation( "" ))
+                    .setException(e));
-                problems.add( Severity.ERROR, "'dependencyManagement.dependencies.dependency.groupId' for "
-                    + dependency.getManagementKey() + " is missing.", dependency.getLocation( "" ), null );
+                problems.add( new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE)
+                        .setMessage( "'dependencyManagement.dependencies.dependency.groupId' for " + dependency.getManagementKey() + " is missing.")
+                        .setLocation( dependency.getLocation( "" )));
-                problems.add( Severity.ERROR, "'dependencyManagement.dependencies.dependency.artifactId' for "
-                    + dependency.getManagementKey() + " is missing.", dependency.getLocation( "" ), null );
+                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE)
+                        .setMessage( "'dependencyManagement.dependencies.dependency.artifactId' for " + dependency.getManagementKey() + " is missing.")
+                        .setLocation( dependency.getLocation( "" )));
-                problems.add( Severity.ERROR, "'dependencyManagement.dependencies.dependency.version' for "
-                    + dependency.getManagementKey() + " is missing.", dependency.getLocation( "" ), null );
+                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE)
+                        .setMessage( "'dependencyManagement.dependencies.dependency.version' for " + dependency.getManagementKey() + " is missing.")
+                        .setLocation( dependency.getLocation( "" )));
-                problems.add( Severity.ERROR, message, null, null );
+                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage( message ));
-                    problems.add( Severity.ERROR, buffer.toString(), dependency.getLocation( "" ), e );
+                    problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
+                            .setMessage( buffer.toString() )
+                            .setLocation( dependency.getLocation( "" ))
+                            .setException( e ));
+    protected boolean hasModelErrors(ModelProblemCollectorExt problems) {
+        if (problems instanceof DefaultModelProblemCollector) {
+            return ((DefaultModelProblemCollector)problems).hasErrors();
+        } else {
+            //the default execution path only knows the DefaultModelProblemCollector,
+            // only reason it's not in signature is because it's package private
+            throw new IllegalStateException(); 
+        }
+        
+    }
+
+    protected boolean hasFatalErrors(ModelProblemCollectorExt problems) {
+        if (problems instanceof DefaultModelProblemCollector) {
+            return ((DefaultModelProblemCollector)problems).hasFatalErrors();
+        } else {
+            //the default execution path only knows the DefaultModelProblemCollector,
+            // only reason it's not in signature is because it's package private
+            throw new IllegalStateException(); 
+        }
+    }
+
