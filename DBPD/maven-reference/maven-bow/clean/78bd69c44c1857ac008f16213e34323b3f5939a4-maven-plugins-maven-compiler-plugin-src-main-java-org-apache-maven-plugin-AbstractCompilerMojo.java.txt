Resolving: MNG-643

o Added includes/excludes for compile and testCompile
o added integration tests for single execution of compile and testCompile with excludes
o Added integration test for multiple execution of compile in different phases per Dan Tran's request

The bulk of this commit is KrisBravo's work (I think that's who Corridor Software Developer is??). Thanks for the help.




git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@239272 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.compiler.util.scan.SimpleSourceInclusionScanner;
-import org.codehaus.plexus.compiler.util.scan.StaleSourceScanner;
-import java.util.Collections;
-     * Version of the compiler to use, ex. "1.3", "1.5"
-     *
-     * @parameter
-     */
-    private String compilerVersion;
-
-    /**
+    protected abstract SourceInclusionScanner getSourceInclusionScanner( int staleMillis );
+
+    protected abstract SourceInclusionScanner getSourceInclusionScanner( String inputFileEnding );
+
-            staleSources = computeStaleSources( compilerConfiguration,
-                                                compiler,
-                                                new StaleSourceScanner( staleMillis ) );
+            staleSources = computeStaleSources( compilerConfiguration, compiler, getSourceInclusionScanner( staleMillis ) );
-            if ( compiler.getCompilerOutputStyle() == CompilerOutputStyle.ONE_OUTPUT_FILE_FOR_ALL_INPUT_FILES &&
-                 !canUpdateTarget )
+            if ( compiler.getCompilerOutputStyle() == CompilerOutputStyle.ONE_OUTPUT_FILE_FOR_ALL_INPUT_FILES
+                && !canUpdateTarget )
-                Set includes = Collections.singleton( "**/*." + inputFileEnding );
-
-                Set sources = computeStaleSources( compilerConfiguration,
-                                                   compiler,
-                                                   new SimpleSourceInclusionScanner( includes, Collections.EMPTY_SET ));
+                Set sources = computeStaleSources( compilerConfiguration, compiler,
+                                                   getSourceInclusionScanner( inputFileEnding ) );
-    private Set computeStaleSources( CompilerConfiguration compilerConfiguration,
-                                     Compiler compiler,
-                                     SourceInclusionScanner scanner )
+    private Set computeStaleSources( CompilerConfiguration compilerConfiguration, Compiler compiler,
+                                    SourceInclusionScanner scanner )
-            mapping = new SuffixMapping( compiler.getInputFileEnding( compilerConfiguration ),
-                                         compiler.getOutputFileEnding( compilerConfiguration ) );
+            mapping = new SuffixMapping( compiler.getInputFileEnding( compilerConfiguration ), compiler
+                .getOutputFileEnding( compilerConfiguration ) );
-            mapping = new SingleTargetSourceMapping( compiler.getInputFileEnding( compilerConfiguration ),
-                                                     compiler.getOutputFile( compilerConfiguration ) );
+            mapping = new SingleTargetSourceMapping( compiler.getInputFileEnding( compilerConfiguration ), compiler
+                .getOutputFile( compilerConfiguration ) );
-                throw new MojoExecutionException( "Error scanning source root: \'" + sourceRoot + "\' " +
-                                                  "for stale files to recompile.", e );
+                throw new MojoExecutionException( "Error scanning source root: \'" + sourceRoot + "\' "
+                    + "for stale files to recompile.", e );
