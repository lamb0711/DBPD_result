Fixing it0112 and it0115, and cleaning up extension isolation further. Also, adding a flag to tell whether an accompanying profiles.xml file is valid for any given POM file...when loaded from a repository (or stubbed), this flag should always be false.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@586061 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.classworlds.ClassWorld;
-        if ( ( extensionArtifact != null ) && !projectSession.containsRealm( extensionArtifact ) )
+        if ( ( extensionArtifact != null ) && !projectSession.containsExtensionRealm( extensionArtifact ) )
-            ComponentDiscoverer discoverer = new DefaultComponentDiscoverer();
-            discoverer.setManager( new DummyDiscovererManager() );
+            importLocalExtensionComponents( extensionRealm, projectSession, extensionArtifact );
+        }
+    }
-            ClassRealm projectRealm = projectSession.getProjectRealm();
-            try
+    private void importLocalExtensionComponents( ClassRealm extensionRealm,
+                                                 MavenProjectSession projectSession,
+                                                 Artifact extensionArtifact )
+        throws ExtensionManagerException
+    {
+        String projectId = projectSession.getProjectId();
+
+        ClassRealm discoveryRealm = new ClassRealm( new ClassWorld(), "discovery", Thread.currentThread().getContextClassLoader() );
+        try
+        {
+            discoveryRealm.addURL( extensionArtifact.getFile().toURL() );
+        }
+        catch ( MalformedURLException e )
+        {
+            throw new ExtensionManagerException( "Unable to generate URL from extension artifact for local-component discovery: " + extensionArtifact.getFile(), extensionArtifact, projectId, e );
+        }
+
+        ComponentDiscoverer discoverer = new DefaultComponentDiscoverer();
+        discoverer.setManager( new DummyDiscovererManager() );
+
+        ClassRealm projectRealm = projectSession.getProjectRealm();
+        try
+        {
+            List componentSetDescriptors = discoverer.findComponents( container.getContext(), discoveryRealm );
+            for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )
-                List componentSetDescriptors = discoverer.findComponents( container.getContext(), extensionRealm );
-                for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )
+                ComponentSetDescriptor compSet = (ComponentSetDescriptor) it.next();
+                for ( Iterator compIt = compSet.getComponents().iterator(); compIt.hasNext(); )
-                    ComponentSetDescriptor compSet = (ComponentSetDescriptor) it.next();
-                    for ( Iterator compIt = compSet.getComponents().iterator(); compIt.hasNext(); )
+                    ComponentDescriptor comp = (ComponentDescriptor) compIt.next();
+                    String implementation = comp.getImplementation();
+
+                    try
-                        ComponentDescriptor comp = (ComponentDescriptor) compIt.next();
-                        String implementation = comp.getImplementation();
+                        getLogger().debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealm.getId() + "\nto project realm: " + projectRealm.getId() );
-                        try
-                        {
-                            getLogger().debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealm.getId() + "\nto project realm: " + projectRealm.getId() );
+                        projectRealm.importFrom( extensionRealm.getId(), implementation );
-                            projectRealm.importFrom( extensionRealm.getId(), implementation );
-
-                            comp.setRealmId( projectRealm.getId() );
-                            container.addComponentDescriptor( comp );
-                        }
-                        catch ( NoSuchRealmException e )
-                        {
-                            throw new ExtensionManagerException( "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealm.getId() + " to project realm: " + projectRealm.getId(), extensionArtifact, projectId, e );
-                        }
+                        comp.setRealmId( projectRealm.getId() );
+                        container.addComponentDescriptor( comp );
+                    }
+                    catch ( NoSuchRealmException e )
+                    {
+                        throw new ExtensionManagerException( "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealm.getId() + " to project realm: " + projectRealm.getId(), extensionArtifact, projectId, e );
-            catch ( PlexusConfigurationException e )
-            {
-                throw new ExtensionManagerException( "Unable to discover extension components.", extensionArtifact, projectId, e );
-            }
-            catch ( ComponentRepositoryException e )
-            {
-                throw new ExtensionManagerException( "Unable to discover extension components from imports added to project-session realm.", extensionArtifact, projectId, e );
-            }
+        }
+        catch ( PlexusConfigurationException e )
+        {
+            throw new ExtensionManagerException( "Unable to discover extension components.", extensionArtifact, projectId, e );
+        }
+        catch ( ComponentRepositoryException e )
+        {
+            throw new ExtensionManagerException( "Unable to discover extension components from imports added to project-session realm.", extensionArtifact, projectId, e );
