remove old style req, resp mojo support

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168082 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.CollectionUtils;
-        MojoExecutionRequest request = null;
-
-            // TODO: remove
-            boolean newMojoTechnique = checkMojoTechnique( plugin.getClass() );
-
-            String goalId = PluginDescriptor.getGoalIdFromFullGoal( goalName );
+            String goalId = mojoDescriptor.getGoal();
-            Xpp3Dom dom = session.getProject().getGoalConfiguration( PluginDescriptor.getPluginArtifactIdFromGoal( goalName ),
-                                                                     goalId );
+            Xpp3Dom dom = session.getProject().getGoalConfiguration(
+                PluginDescriptor.getPluginArtifactIdFromGoal( goalName ), goalId );
-                if ( newMojoTechnique )
-                {
-                    Map map = getPluginConfigurationFromExpressions( plugin, mojoDescriptor, mergedConfiguration,
-                                                                     expressionEvaluator );
+                getPluginConfigurationFromExpressions( plugin, mojoDescriptor, mergedConfiguration,
+                                                       expressionEvaluator );
-                    populatePluginFields( plugin, mojoDescriptor, mergedConfiguration, expressionEvaluator );
-                }
-                else
-                {
-                    getLogger().warn( "WARNING: The mojo " + mojoDescriptor.getId() + " is using the OLD API" );
-
-                    Map map = getPluginConfigurationFromExpressions( plugin, mojoDescriptor, mergedConfiguration,
-                                                                     expressionEvaluator );
-
-                    request = createPluginRequest( pomConfiguration, map );
-                }
+                populatePluginFields( plugin, mojoDescriptor, mergedConfiguration, expressionEvaluator );
-                if ( newMojoTechnique )
-                {
-                    plugin.execute();
-                }
-                else
-                {
-                    plugin.execute( request );
-                }
+                plugin.execute();
-    /**
-     * @deprecated
-     */
-    private static boolean checkMojoTechnique( Class aClass )
-    {
-        boolean newMojoTechnique = false;
-        try
-        {
-            aClass.getDeclaredMethod( "execute", new Class[0] );
-            newMojoTechnique = true;
-        }
-        catch ( NoSuchMethodException e )
-        {
-            // intentionally ignored
-
-            Class superclass = aClass.getSuperclass();
-            if ( superclass != AbstractMojo.class )
-            {
-                return checkMojoTechnique( superclass );
-            }
-        }
-        return newMojoTechnique;
-    }
-
-    /**
-     * @param configuration
-     * @param map
-     * @return
-     * @deprecated
-     */
-    private static MojoExecutionRequest createPluginRequest( PlexusConfiguration configuration, Map map )
-    {
-        Map parameters = new HashMap();
-        PlexusConfiguration[] children = configuration.getChildren();
-        for ( int i = 0; i < children.length; i++ )
-        {
-            PlexusConfiguration child = children[i];
-            parameters.put( child.getName(), child.getValue( null ) );
-        }
-        map = CollectionUtils.mergeMaps( map, parameters );
-        return new MojoExecutionRequest( map );
-    }
-
-                                      ExpressionEvaluator expressionEvaluator )
+                                       ExpressionEvaluator expressionEvaluator )
-                                                    "Unable to retrieve component configurator for plugin configuration",
-                                                    e );
+                "Unable to retrieve component configurator for plugin configuration", e );
-    private Map getPluginConfigurationFromExpressions( Mojo plugin, MojoDescriptor goal,
-                                                       PlexusConfiguration mergedConfiguration,
-                                                       ExpressionEvaluator expressionEvaluator )
+    private void getPluginConfigurationFromExpressions( Mojo plugin, MojoDescriptor goal,
+                                                        PlexusConfiguration mergedConfiguration,
+                                                        ExpressionEvaluator expressionEvaluator )
-        Map map = new HashMap();
-
-            map.put( key, value );
-        return map;
-                                                              "maven-project", "plexus-container-artifact", "maven-reporting-api", "doxia-core",
+                                                              "maven-project", "plexus-container-artifact",
+                                                              "maven-reporting-api", "doxia-core",
