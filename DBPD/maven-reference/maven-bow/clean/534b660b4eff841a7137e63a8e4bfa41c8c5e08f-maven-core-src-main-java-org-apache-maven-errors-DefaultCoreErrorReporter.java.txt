Removed extension scanner. It was tied up into the old model lineage code, which is very buggy. Needs to be reimplemented.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@700226 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
-import org.apache.maven.artifact.resolver.CyclicDependencyException;
-import org.apache.maven.extension.ExtensionManagerException;
-import org.apache.maven.errors.DefaultProjectErrorReporter;
-import org.apache.maven.errors.ProjectErrorReporter;
-import org.apache.maven.errors.ProjectReporterManager;
-import org.apache.maven.extension.ModelInterpolationException;
-import java.util.LinkedHashMap;
-    public void reportErrorInterpolatingModel( Model model,
-                                               Map inheritedValues,
-                                               File pomFile,
-                                               MavenExecutionRequest request,
-                                               ModelInterpolationException cause )
-    {
-        StringWriter writer = new StringWriter();
-
-        writer.write( NEWLINE );
-        writer.write( "You have an invalid expression in your POM (interpolation failed):" );
-        writer.write( NEWLINE );
-        writer.write( cause.getMessage() );
-
-        writeProjectCoordinate( model, pomFile, writer );
-        addTips( CoreErrorTips.getTipsForModelInterpolationError( model, pomFile, cause ),
-                 writer );
-
-        registerBuildError( cause, writer.toString(), cause.getCause() );
-    }
-
-    public void reportErrorResolvingExtensionDependencies( Artifact extensionArtifact,
-                                                           Artifact projectArtifact,
-                                                           List remoteRepos,
-                                                           MavenExecutionRequest request,
-                                                           ArtifactResolutionResult resolutionResult,
-                                                           ExtensionManagerException err )
-    {
-        StringWriter writer = new StringWriter();
-
-        writer.write( NEWLINE );
-        writer.write( "Maven encountered an error while trying to resolve the artifacts for a build extension used in your project." );
-        writer.write( NEWLINE );
-        writer.write( NEWLINE );
-        writer.write( "Project:" );
-        writeArtifactInfo( projectArtifact, writer, false );
-        writer.write( NEWLINE );
-        writer.write( NEWLINE );
-        writer.write( "Extension:" );
-        writeArtifactInfo( extensionArtifact, writer, false );
-        writer.write( NEWLINE );
-        writer.write( NEWLINE );
-
-        List missingArtifacts = resolutionResult.getMissingArtifacts();
-        if ( ( missingArtifacts != null ) && !missingArtifacts.isEmpty() )
-        {
-            writer.write( "The following artifacts were not found." );
-            writer.write( NEWLINE );
-            writer.write( "(Format is: groupId:artifactId:version:type[:classifier])" );
-            writer.write( NEWLINE );
-
-            for ( Iterator it = missingArtifacts.iterator(); it.hasNext(); )
-            {
-                Artifact artifact = (Artifact) it.next();
-                writer.write( NEWLINE );
-                writeCompactArtifactCoordinate( "- ", artifact, writer );
-            }
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-        }
-
-        List circularDependencyExceptions = resolutionResult.getCircularDependencyExceptions();
-        if ( ( circularDependencyExceptions != null ) && !circularDependencyExceptions.isEmpty() )
-        {
-            writer.write( "The following dependency cycles were found." );
-            writer.write( NEWLINE );
-            writer.write( "(Format is: groupId:artifactId:version:type[:classifier]), followed by the dependency trail that included the offending artifact.)" );
-            writer.write( NEWLINE );
-
-            int i = 1;
-            for ( Iterator it = circularDependencyExceptions.iterator(); it.hasNext(); )
-            {
-                CyclicDependencyException cde = (CyclicDependencyException) it.next();
-                Artifact artifact = cde.getArtifact();
-                writer.write( NEWLINE );
-                writeCompactArtifactCoordinate( i + ". ", artifact, writer );
-
-                List trail = artifact.getDependencyTrail();
-                for ( Iterator trailIt = trail.iterator(); trailIt.hasNext(); )
-                {
-                    String id = (String) trailIt.next();
-                    writer.write( NEWLINE );
-                    writer.write( "  - " );
-                    writer.write( id );
-                }
-
-                writer.write( NEWLINE );
-                i++;
-            }
-
-            writer.write( NEWLINE );
-        }
-
-        Map mapOfLists = new LinkedHashMap();
-
-        List metadataExceptions = resolutionResult.getMetadataResolutionExceptions();
-        if ( ( metadataExceptions != null ) && !metadataExceptions.isEmpty() )
-        {
-            mapOfLists.put( "The following metadata-resolution errors were found.", metadataExceptions );
-        }
-
-        List errorArtifactExceptions = resolutionResult.getErrorArtifactExceptions();
-        if ( ( errorArtifactExceptions != null ) && !errorArtifactExceptions.isEmpty() )
-        {
-            mapOfLists.put( "The following artifact-resolution errors were found.", errorArtifactExceptions );
-        }
-
-        List versionRangeViolations = resolutionResult.getVersionRangeViolations();
-        if ( ( versionRangeViolations != null ) && !versionRangeViolations.isEmpty() )
-        {
-            mapOfLists.put( "The following artifact version-range violations were found.", versionRangeViolations );
-        }
-
-        for ( Iterator entryIt = mapOfLists.entrySet().iterator(); entryIt.hasNext(); )
-        {
-            Map.Entry entry = (Map.Entry) entryIt.next();
-            String key = (String) entry.getKey();
-            List exceptions = (List) entry.getValue();
-
-            writer.write( key );
-            writer.write( NEWLINE );
-
-            int i = 1;
-            for ( Iterator it = exceptions.iterator(); it.hasNext(); )
-            {
-                Exception e = (Exception) it.next();
-                writer.write( NEWLINE );
-                writer.write( i );
-                writer.write( ". " );
-                writer.write( e.getMessage() );
-
-                Throwable t = getRootCause( e );
-                if ( ( t != null ) && ( t != e ) )
-                {
-                    writer.write( NEWLINE );
-                    writer.write( NEWLINE );
-                    writer.write( "Root error: " );
-                    writer.write( NEWLINE );
-                    writer.write( NEWLINE );
-                    writer.write( t.getMessage() );
-                }
-
-                writer.write( NEWLINE );
-                i++;
-            }
-
-            writer.write( NEWLINE );
-        }
-
-        addTips( CoreErrorTips.getErrorResolvingExtensionArtifactsTips( extensionArtifact, projectArtifact, resolutionResult ),
-                 writer );
-
-        registerBuildError( err, writer.toString() );
-    }
-
