Removed use of workspace from project builder. In the build of trunk, there were about 50K of calls from MavenMetadataSource to the project builder. I put a simple hashmap cache in the metadata source to reduce calls to dozens.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@699773 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
+    private HashMap<String, MavenProject> hm = new HashMap<String, MavenProject>();
+    
-                try
-                {
-                    project =
-                        mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories, localRepository );
-                }
-                catch ( InvalidProjectModelException e )
-                {
-                    handleInvalidOrMissingMavenPOM( artifact, e );
-                    if ( getLogger().isDebugEnabled() )
+                if(hm.containsKey(pomArtifact.getId()))
+                {
+                    project = hm.get(pomArtifact.getId());
+                }
+                else
+                {
+                    try
-                        getLogger().debug( "Reason: " + e.getMessage() );
+                        project =
+                            mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories, localRepository );
+                        hm.put(pomArtifact.getId(), project);
-                        ModelValidationResult validationResult = e.getValidationResult();
-
-                        if ( validationResult != null )
-                        {
-                            getLogger().debug( "\nValidation Errors:" );
-                            for ( Iterator i = validationResult.getMessages().iterator(); i.hasNext(); )
-                            {
-                                getLogger().debug( i.next().toString() );
-                            }
-                            getLogger().debug( "\n" );
-                        }
-                        else
-                        {
-                            getLogger().debug( "", e );
-                        }
+                    catch ( InvalidProjectModelException e )
+                    {
+                        handleInvalidOrMissingMavenPOM( artifact, e );
-                    project = null;
-                }
-                catch ( ProjectBuildingException e )
-                {
-                    handleInvalidOrMissingMavenPOM( artifact, e );
+                        if ( getLogger().isDebugEnabled() )
+                        {
+                            getLogger().debug( "Reason: " + e.getMessage() );
-                    project = null;
+                            ModelValidationResult validationResult = e.getValidationResult();
+
+                            if ( validationResult != null )
+                            {
+                                getLogger().debug( "\nValidation Errors:" );
+                                for ( Iterator i = validationResult.getMessages().iterator(); i.hasNext(); )
+                                {
+                                    getLogger().debug( i.next().toString() );
+                                }
+                                getLogger().debug( "\n" );
+                            }
+                            else
+                            {
+                                getLogger().debug( "", e );
+                            }
+                        }
+
+                        project = null;
+                    }
+                    catch ( ProjectBuildingException e )
+                    {
+                        handleInvalidOrMissingMavenPOM( artifact, e );
+
+                        project = null;
+                    }
+
