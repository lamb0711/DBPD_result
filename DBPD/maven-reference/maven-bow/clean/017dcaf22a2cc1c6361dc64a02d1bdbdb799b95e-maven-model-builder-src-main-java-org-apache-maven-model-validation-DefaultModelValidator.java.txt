[MNG-5993] Confusing error message in case of missing/empty
 artifactId/groupId and version in pluginManagement

-            validateStringNotEmpty( "parent.artifactId", problems, Severity.FATAL, Version.BASE,
-                                    parent.getArtifactId(), parent );
+            validateStringNotEmpty( "parent.artifactId", problems, Severity.FATAL, Version.BASE, parent.getArtifactId(),
+                                    parent );
-            if ( equals( parent.getGroupId(), m.getGroupId() )
-                && equals( parent.getArtifactId(), m.getArtifactId() ) )
+            if ( equals( parent.getGroupId(), m.getGroupId() ) && equals( parent.getArtifactId(), m.getArtifactId() ) )
-                addViolation( problems, Severity.FATAL, Version.BASE, "parent.artifactId", null, "must be changed"
-                    + ", the parent element cannot have the same groupId:artifactId as the project.", parent );
+                addViolation( problems, Severity.FATAL, Version.BASE, "parent.artifactId", null,
+                              "must be changed"
+                                  + ", the parent element cannot have the same groupId:artifactId as the project.",
+                              parent );
+            // [MNG-6074] Maven should produce an error if no model version has been set in a POM file used to build an
+            // effective model.
+            //
+            // As of 3.4, the model version is mandatory even in raw models. The XML element still is optional in the
+            // XML schema and this will not change anytime soon. We do not want to build effective models based on
+            // models without a version starting with 3.4.
+            validateStringNotEmpty( "modelVersion", problems, Severity.ERROR, Version.V20, m.getModelVersion(), m );
+
-                validate30RawProfileActivation( problems, profile.getActivation(), profile.getId(), prefix
-                    + ".activation", request );
+                validate30RawProfileActivation( problems, profile.getActivation(), profile.getId(),
+                                                prefix + ".activation", request );
-                                         request );
+                                           request );
-                    validate20RawDependencies( problems, profile.getDependencyManagement().getDependencies(), prefix
-                        + ".dependencyManagement.dependencies.dependency", request );
+                    validate20RawDependencies( problems, profile.getDependencyManagement().getDependencies(),
+                                               prefix + ".dependencyManagement.dependencies.dependency", request );
-                                      request );
+                                         request );
-                validateRawRepositories( problems, profile.getPluginRepositories(), prefix
-                    + ".pluginRepositories.pluginRepository", request );
+                validateRawRepositories( problems, profile.getPluginRepositories(),
+                                         prefix + ".pluginRepositories.pluginRepository", request );
-                                            request );
+                                              request );
-                addViolation( problems,
-                              Severity.WARNING,
-                              Version.V30,
-                              prefix + ( missing ? ".file.missing" : ".file.exists" ),
-                              null,
+                addViolation( problems, Severity.WARNING, Version.V30,
+                              prefix + ( missing ? ".file.missing" : ".file.exists" ), null,
-                addViolation( problems,
-                              Severity.WARNING,
-                              Version.V30,
-                              prefix + ( missing ? ".file.missing" : ".file.exists" ),
-                              null,
-                              "Failed to interpolate file location "
-                                  + path
-                                  + " for profile "
-                                  + sourceHint
+                addViolation( problems, Severity.WARNING, Version.V30,
+                              prefix + ( missing ? ".file.missing" : ".file.exists" ), null,
+                              "Failed to interpolate file location " + path + " for profile " + sourceHint
-                                     ModelBuildingRequest request )
+                                       ModelBuildingRequest request )
+            if ( plugin.getGroupId() == null
+                || ( plugin.getGroupId() != null && plugin.getGroupId().trim().isEmpty() ) )
+            {
+                addViolation( problems, Severity.FATAL, Version.V20, prefix + ".(groupId:artifactId)", null,
+                              "groupId of a plugin must be defined. ", plugin );
+            }
+
+            if ( plugin.getArtifactId() == null
+                || ( plugin.getArtifactId() != null && plugin.getArtifactId().trim().isEmpty() ) )
+            {
+                addViolation( problems, Severity.FATAL, Version.V20, prefix + ".(groupId:artifactId)", null,
+                              "artifactId of a plugin must be defined. ", plugin );
+            }
+
+            // This will catch cases like <version></version> or <version/>
+            if ( plugin.getVersion() != null && plugin.getVersion().trim().isEmpty() )
+            {
+                addViolation( problems, Severity.FATAL, Version.V20, prefix + ".(groupId:artifactId)", null,
+                              "version of a plugin must be defined. ", plugin );
+            }
+
-                    addViolation( problems, Severity.ERROR, Version.V20, prefix + "[" + plugin.getKey()
-                        + "].executions.execution.id", null, "must be unique but found duplicate execution with id "
-                        + exec.getId(), exec );
+                    addViolation( problems, Severity.ERROR, Version.V20,
+                                  prefix + "[" + plugin.getKey() + "].executions.execution.id", null,
+                                  "must be unique but found duplicate execution with id " + exec.getId(), exec );
-                addViolation( problems, Severity.ERROR, Version.BASE, "packaging", null,
-                              "with value '" + m.getPackaging() + "' is invalid. Aggregator projects "
-                                  + "require 'pom' as packaging.", m );
+                addViolation( problems, Severity.ERROR, Version.BASE, "packaging", null, "with value '"
+                    + m.getPackaging() + "' is invalid. Aggregator projects " + "require 'pom' as packaging.", m );
-                    validateBoolean( "build.plugins.plugin.inherited", problems, errOn30, Version.V20,
-                                     p.getInherited(), p.getKey(), p );
+                    validateBoolean( "build.plugins.plugin.inherited", problems, errOn30, Version.V20, p.getInherited(),
+                                     p.getKey(), p );
-                                    "distributionManagement.snapshotRepository", request );
+                                               "distributionManagement.snapshotRepository", request );
-                                          + " will be unresolvable by dependent projects", dependency );
+                                          + " will be unresolvable by dependent projects",
+                                      dependency );
-                    msg =
-                        "duplicate declaration of version "
-                            + StringUtils.defaultString( dependency.getVersion(), "(?)" );
+                    msg = "duplicate declaration of version "
+                        + StringUtils.defaultString( dependency.getVersion(), "(?)" );
-                    msg =
-                        "version " + StringUtils.defaultString( existing.getVersion(), "(?)" ) + " vs "
-                            + StringUtils.defaultString( dependency.getVersion(), "(?)" );
+                    msg = "version " + StringUtils.defaultString( existing.getVersion(), "(?)" ) + " vs "
+                        + StringUtils.defaultString( dependency.getVersion(), "(?)" );
-                     * TODO: Extensions like Flex Mojos use custom scopes like "merged", "internal", "external", etc.
-                     * In order to don't break backward-compat with those, only warn but don't error out.
+                     * TODO: Extensions like Flex Mojos use custom scopes like "merged", "internal", "external", etc. In
+                     * order to don't break backward-compat with those, only warn but don't error out.
-                    addViolation( problems, Severity.WARNING, Version.BASE, prefix + "systemPath",
-                                  d.getManagementKey(), msg, d );
+                    addViolation( problems, Severity.WARNING, Version.BASE, prefix + "systemPath", d.getManagementKey(),
+                                  msg, d );
-     * @since 3.2.4 
+     * @since 3.2.4
-                                       ModelBuildingRequest request )
+                                          ModelBuildingRequest request )
-                addViolation( problems, errOn30, Version.V20, prefix + ".id", null,
-                              "must be unique: " + repository.getId() + " -> " + existing.getUrl() + " vs "
-                                  + repository.getUrl(), repository );
+                addViolation( problems, errOn30, Version.V20, prefix + ".id", null, "must be unique: "
+                    + repository.getId() + " -> " + existing.getUrl() + " vs " + repository.getUrl(), repository );
-                                     ModelBuildingRequest request )
+                                                ModelBuildingRequest request )
-                addViolation( problems, errOn31, Version.V20, prefix + ".id", null, "must not be 'local'"
-                    + ", this identifier is reserved for the local repository"
-                    + ", using it for other repositories will corrupt your repository metadata.", repository );
+                addViolation( problems, errOn31, Version.V20, prefix + ".id", null,
+                              "must not be 'local'" + ", this identifier is reserved for the local repository"
+                                  + ", using it for other repositories will corrupt your repository metadata.",
+                              repository );
-                                    ModelBuildingRequest request )
+                                         ModelBuildingRequest request )
-                addViolation( problems, severity, version, fieldName, sourceHint, "with value '" + id
-                    + "' does not match a valid id pattern.", tracker );
+                addViolation( problems, severity, version, fieldName, sourceHint,
+                              "with value '" + id + "' does not match a valid id pattern.", tracker );
-                addViolation( problems, severity, version, fieldName, sourceHint, "with value '" + id
-                    + "' does not match a valid id pattern.", tracker );
+                addViolation( problems, severity, version, fieldName, sourceHint,
+                              "with value '" + id + "' does not match a valid id pattern.", tracker );
-
-        addViolation( problems, severity, version, fieldName, sourceHint, "must be 'true' or 'false' but is '" + string
-            + "'.", tracker );
+        addViolation( problems, severity, version, fieldName, sourceHint,
+                      "must be 'true' or 'false' but is '" + string + "'.", tracker );
-        addViolation( problems, severity, version, fieldName, sourceHint, "must be one of " + values + " but is '"
-            + string + "'.", tracker );
+        addViolation( problems, severity, version, fieldName, sourceHint,
+                      "must be one of " + values + " but is '" + string + "'.", tracker );
-                                      + string.charAt( i ), tracker );
+                                      + string.charAt( i ),
+                                  tracker );
-            addViolation( problems, errOn30, Version.V20, fieldName, sourceHint, "must be a valid version but is '"
-                + string + "'.", tracker );
+            addViolation( problems, errOn30, Version.V20, fieldName, sourceHint,
+                          "must be a valid version but is '" + string + "'.", tracker );
-        problems.add( new ModelProblemCollectorRequest( severity, version )
-            .setMessage( buffer.toString() ).setLocation( getLocation( fieldName, tracker ) ) );
+        // CHECKSTYLE_OFF: LineLength
+        problems.add( new ModelProblemCollectorRequest( severity,
+                                                        version ).setMessage( buffer.toString() ).setLocation( getLocation( fieldName,
+                                                                                                                            tracker ) ) );
+        // CHECKSTYLE_ON: LineLength
