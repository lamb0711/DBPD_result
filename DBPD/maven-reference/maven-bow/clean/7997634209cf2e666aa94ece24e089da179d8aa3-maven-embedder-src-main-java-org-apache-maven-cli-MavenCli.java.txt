MNG-5774 Provide an extension point for alternate CLI configuration source

+import java.util.Map.Entry;
+import org.apache.maven.cli.configuration.ConfigurationProcessor;
+import org.apache.maven.cli.configuration.SettingsXmlConfigurationProcessor;
-import org.apache.maven.settings.building.DefaultSettingsBuildingRequest;
-import org.apache.maven.settings.building.SettingsBuilder;
-import org.apache.maven.settings.building.SettingsBuildingRequest;
-import org.apache.maven.settings.building.SettingsBuildingResult;
-import org.apache.maven.settings.building.SettingsProblem;
-    public static final File DEFAULT_USER_SETTINGS_FILE = new File( userMavenConfigurationHome, "settings.xml" );
-
-    public static final File DEFAULT_GLOBAL_SETTINGS_FILE =
-        new File( System.getProperty( "maven.home", System.getProperty( "user.dir", "" ) ), "conf/settings.xml" );
-
-    private SettingsBuilder settingsBuilder;
-
+    private Map<String, ConfigurationProcessor> configurationProcessors;
+    
-            settings( cliRequest );
+            configure( cliRequest );
-        settingsBuilder = container.lookup( SettingsBuilder.class );
-
+        configurationProcessors = container.lookupMap( ConfigurationProcessor.class );
+        
-                settingsBuilder = container.lookup( SettingsBuilder.class );
-
+                
+                configurationProcessors = container.lookupMap( ConfigurationProcessor.class );
+                
+                configure( cliRequest );
+                
-                settings( cliRequest, request );
+
+                
+                
-                settingsBuilder = null;
-    private void settings( CliRequest cliRequest )
+    private void configure( CliRequest cliRequest )
-        settings( cliRequest, cliRequest.request );
-    }
-
-    private void settings( CliRequest cliRequest, MavenExecutionRequest request )
-        throws Exception
-    {
-        File userSettingsFile;
-
-        if ( cliRequest.commandLine.hasOption( CLIManager.ALTERNATE_USER_SETTINGS ) )
+        //
+        // This is not ideal but there are events specifically for configuration from the CLI which I don't
+        // believe are really valid but there are ITs which assert the right events are published so this
+        // needs to be supported so the EventSpyDispatcher needs to be put in the CliRequest so that
+        // it can be accessed by configuration processors.
+        //
+        cliRequest.request.setEventSpyDispatcher( eventSpyDispatcher );
+        
+        //
+        // We expect at most 2 implementations to be available. The SettingsXmlConfigurationProcessor implementation
+        // is always available in the core and likely always will be, but we may have another ConfigurationProcessor
+        // present supplied by the user. The rule is that we only allow the execution of one ConfigurationProcessor.
+        // If there is more than one then we execute the one supplied by the user, otherwise we execute the
+        // the default SettingsXmlConfigurationProcessor.
+        // 
+        int userSuppliedConfigurationProcessorCount = configurationProcessors.size() - 1;
+        
+        if ( userSuppliedConfigurationProcessorCount == 0 )
-            userSettingsFile = new File( cliRequest.commandLine.getOptionValue( CLIManager.ALTERNATE_USER_SETTINGS ) );
-            userSettingsFile = resolveFile( userSettingsFile, cliRequest.workingDirectory );
-
-            if ( !userSettingsFile.isFile() )
+            //
+            // Our settings.xml source is historically how we have configured Maven from the CLI so we are going to 
+            // have to honour its existence forever. So let's run it.
+            //
+            configurationProcessors.get( SettingsXmlConfigurationProcessor.HINT ).process( cliRequest );            
+        }        
+        else if ( userSuppliedConfigurationProcessorCount == 1 )
+        {
+            //
+            // Run the user supplied ConfigurationProcessor
+            //
+            for ( Entry<String, ConfigurationProcessor> entry : configurationProcessors.entrySet() )
-                throw new FileNotFoundException( "The specified user settings file does not exist: "
-                    + userSettingsFile );
-            }
+                String hint = entry.getKey();
+                if ( !hint.equals( SettingsXmlConfigurationProcessor.HINT ) )
+                {
+                    ConfigurationProcessor configurationProcessor = entry.getValue();
+                    configurationProcessor.process( cliRequest );
+                }
+            }            
-        else
+        else if ( userSuppliedConfigurationProcessorCount > 1 )
-            userSettingsFile = DEFAULT_USER_SETTINGS_FILE;
-        }
-
-        File globalSettingsFile;
-
-        if ( cliRequest.commandLine.hasOption( CLIManager.ALTERNATE_GLOBAL_SETTINGS ) )
-        {
-            globalSettingsFile =
-                new File( cliRequest.commandLine.getOptionValue( CLIManager.ALTERNATE_GLOBAL_SETTINGS ) );
-            globalSettingsFile = resolveFile( globalSettingsFile, cliRequest.workingDirectory );
-
-            if ( !globalSettingsFile.isFile() )
+            //
+            // There are too many ConfigurationProcessors so we don't know which one to run so report the error.
+            //
+            StringBuffer sb = new StringBuffer( 
+                String.format( "\nThere can only be one user supplied ConfigurationProcessor, there are %s:\n\n", 
+                               userSuppliedConfigurationProcessorCount ) );
+            for ( Entry<String, ConfigurationProcessor> entry : configurationProcessors.entrySet() )
-                throw new FileNotFoundException( "The specified global settings file does not exist: "
-                    + globalSettingsFile );
+                String hint = entry.getKey();
+                if ( !hint.equals( SettingsXmlConfigurationProcessor.HINT ) )
+                {
+                    ConfigurationProcessor configurationProcessor = entry.getValue();
+                    sb.append( String.format( "%s\n", configurationProcessor.getClass().getName() ) );
+                }
-        }
-        else
-        {
-            globalSettingsFile = DEFAULT_GLOBAL_SETTINGS_FILE;
-        }
-
-        request.setGlobalSettingsFile( globalSettingsFile );
-        request.setUserSettingsFile( userSettingsFile );
-
-        SettingsBuildingRequest settingsRequest = new DefaultSettingsBuildingRequest();
-        settingsRequest.setGlobalSettingsFile( globalSettingsFile );
-        settingsRequest.setUserSettingsFile( userSettingsFile );
-        settingsRequest.setSystemProperties( cliRequest.systemProperties );
-        settingsRequest.setUserProperties( cliRequest.userProperties );
-
-        if ( eventSpyDispatcher != null )
-        {
-            eventSpyDispatcher.onEvent( settingsRequest );
-        }
-
-        slf4jLogger.debug( "Reading global settings from "
-            + getLocation( settingsRequest.getGlobalSettingsSource(),
-                                   settingsRequest.getGlobalSettingsFile() ) );
-        slf4jLogger.debug( "Reading user settings from "
-            + getLocation( settingsRequest.getUserSettingsSource(), settingsRequest.getUserSettingsFile() ) );
-
-        SettingsBuildingResult settingsResult = settingsBuilder.build( settingsRequest );
-
-        if ( eventSpyDispatcher != null )
-        {
-            eventSpyDispatcher.onEvent( settingsResult );
-        }
-
-        executionRequestPopulator.populateFromSettings( request, settingsResult.getEffectiveSettings() );
-
-        if ( !settingsResult.getProblems().isEmpty() && slf4jLogger.isWarnEnabled() )
-        {
-            slf4jLogger.warn( "" );
-            slf4jLogger.warn( "Some problems were encountered while building the effective settings" );
-
-            for ( SettingsProblem problem : settingsResult.getProblems() )
-            {
-                slf4jLogger.warn( problem.getMessage() + " @ " + problem.getLocation() );
-            }
-
-            slf4jLogger.warn( "" );
-        }
+            sb.append( String.format( "\n" ) );
+            throw new Exception( sb.toString() );
+        }                
-            .setMultiModuleProjectDirectory( cliRequest.multiModuleProjectDirectory )
-            ;
+            .setMultiModuleProjectDirectory( cliRequest.multiModuleProjectDirectory );
-    static class CliRequest
-    {
-        String[] args;
-        CommandLine commandLine;
-        ClassWorld classWorld;
-        String workingDirectory;
-        File multiModuleProjectDirectory;
-        boolean debug;
-        boolean quiet;
-        boolean showErrors = true;
-        Properties userProperties = new Properties();
-        Properties systemProperties = new Properties();
-        MavenExecutionRequest request;
-
-        CliRequest( String[] args, ClassWorld classWorld )
-        {
-            this.args = args;
-            this.classWorld = classWorld;
-            this.request = new DefaultMavenExecutionRequest();
-        }
-    }
-
-
