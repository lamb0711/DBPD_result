o Tweaked API

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@965131 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Map;
-    private List<String> activeProfileIds;
+    private List<String> activeProfileIds = Collections.emptyList();
-    private List<String> inactiveProfileIds;
+    private List<String> inactiveProfileIds = Collections.emptyList();
-    private Properties systemProperties;
+    private Map<String, String> systemProperties = Collections.emptyMap();
-    private Properties userProperties;
+    private Map<String, String> userProperties = Collections.emptyMap();
-        if ( activeProfileIds == null )
-        {
-            activeProfileIds = new ArrayList<String>();
-        }
-
+    /**
+     * Sets the identifiers of those profiles that should be activated by explicit demand.
+     * 
+     * @param activeProfileIds The identifiers of those profiles to activate, may be {@code null}.
+     * @return This context, never {@code null}.
+     */
-            this.activeProfileIds = new ArrayList<String>( activeProfileIds );
+            this.activeProfileIds = Collections.unmodifiableList( activeProfileIds );
-            this.activeProfileIds = null;
+            this.activeProfileIds = Collections.emptyList();
-        if ( inactiveProfileIds == null )
-        {
-            inactiveProfileIds = new ArrayList<String>();
-        }
-
+    /**
+     * Sets the identifiers of those profiles that should be deactivated by explicit demand.
+     * 
+     * @param inactiveProfileIds The identifiers of those profiles to deactivate, may be {@code null}.
+     * @return This context, never {@code null}.
+     */
-            this.inactiveProfileIds = new ArrayList<String>( inactiveProfileIds );
+            this.inactiveProfileIds = Collections.unmodifiableList( inactiveProfileIds );
-            this.inactiveProfileIds = null;
+            this.inactiveProfileIds = Collections.emptyList();
-    public Properties getSystemProperties()
+    public Map<String, String> getSystemProperties()
-        if ( systemProperties == null )
-        {
-            systemProperties = new Properties();
-        }
-
+    /**
+     * Sets the system properties to use for interpolation and profile activation. The system properties are collected
+     * from the runtime environment like {@link System#getProperties()} and environment variables.
+     * 
+     * @param executionProperties The execution properties, may be {@code null}.
+     * @return This context, never {@code null}.
+     */
+    @SuppressWarnings( "unchecked" )
-            this.systemProperties = new Properties();
-            this.systemProperties.putAll( systemProperties );
+            this.systemProperties = Collections.unmodifiableMap( (Map) systemProperties );
-            this.systemProperties = null;
+            this.systemProperties = Collections.emptyMap();
-    public Properties getUserProperties()
+    /**
+     * Sets the system properties to use for interpolation and profile activation. The system properties are collected
+     * from the runtime environment like {@link System#getProperties()} and environment variables.
+     * 
+     * @param executionProperties The execution properties, may be {@code null}.
+     * @return This context, never {@code null}.
+     */
+    public DefaultProfileActivationContext setSystemProperties( Map<String, String> systemProperties )
-        if ( userProperties == null )
+        if ( systemProperties != null )
-            userProperties = new Properties();
+            this.systemProperties = Collections.unmodifiableMap( systemProperties );
+        }
+        else
+        {
+            this.systemProperties = Collections.emptyMap();
+        return this;
+    }
+
+    public Map<String, String> getUserProperties()
+    {
+    /**
+     * Sets the user properties to use for interpolation and profile activation. The user properties have been
+     * configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command
+     * line.
+     * 
+     * @param userProperties The user properties, may be {@code null}.
+     * @return This context, never {@code null}.
+     */
+    @SuppressWarnings( "unchecked" )
-            this.userProperties = new Properties();
-            this.userProperties.putAll( userProperties );
+            this.userProperties = Collections.unmodifiableMap( (Map) userProperties );
-            this.userProperties = null;
+            this.userProperties = Collections.emptyMap();
+        }
+
+        return this;
+    }
+
+    /**
+     * Sets the user properties to use for interpolation and profile activation. The user properties have been
+     * configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command
+     * line.
+     * 
+     * @param userProperties The user properties, may be {@code null}.
+     * @return This context, never {@code null}.
+     */
+    public DefaultProfileActivationContext setUserProperties( Map<String, String> userProperties )
+    {
+        if ( userProperties != null )
+        {
+            this.userProperties = Collections.unmodifiableMap( userProperties );
+        }
+        else
+        {
+            this.userProperties = Collections.emptyMap();
-    public ProfileActivationContext setProjectDirectory( File projectDirectory )
+    /**
+     * Sets the base directory of the current project.
+     * 
+     * @param projectDirectory The base directory of the current project, may be {@code null} if profile activation
+     *            happens in the context of metadata retrieval rather than project building.
+     * @return This context, never {@code null}.
+     */
+    public DefaultProfileActivationContext setProjectDirectory( File projectDirectory )
