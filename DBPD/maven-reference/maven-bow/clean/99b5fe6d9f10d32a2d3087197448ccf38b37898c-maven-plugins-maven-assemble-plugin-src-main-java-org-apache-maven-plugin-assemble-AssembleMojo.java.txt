flesh out assemble mojo


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163603 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.FileUtils;
-import org.codehaus.plexus.util.StringUtils;
+import org.codehaus.plexus.archiver.Archiver;
+import org.codehaus.plexus.archiver.tar.TarArchiver;
-import java.util.List;
- * @parameter name="buildDirectory"
- * type="String"
- * required="true"
- * validator=""
- * expression="#project.build.directory/assembly"
- * description=""
+    private static final String[] EMPTY_STRING_ARRAY = {};
+
-        String buildDirectory = (String) request.getParameter( "buildDirectory" );
-        // TODO: include in bootstrap
-        File outputBase = new File( buildDirectory, fullName );
-        outputBase.mkdirs();
-        for ( Iterator i = assembly.getFilesets().iterator(); i.hasNext(); )
+        for ( Iterator i = assembly.getFormats().iterator(); i.hasNext(); )
-            FileSet fileset = (FileSet) i.next();
-            String directory = fileset.getDirectory();
-            String output = fileset.getOutputDirectory();
-            if ( output == null )
+            String format = (String) i.next();
+
+            String filename = fullName + "." + format;
+
+            // TODO: use component roles? Can we do that in a mojo?
+            Archiver archiver;
+            if ( format.startsWith( "tar" ) )
-                output = directory;
+                TarArchiver tarArchiver = new TarArchiver();
+                archiver = tarArchiver;
+                int index = format.indexOf( '.' );
+                if ( index >= 0 )
+                {
+                    // TODO: this needs a cleanup in plexus archiver - use a real typesafe enum
+                    TarArchiver.TarCompressionMethod tarCompressionMethod = new TarArchiver.TarCompressionMethod();
+                    tarCompressionMethod.setValue( format.substring( index + 1 ) );
+                    tarArchiver.setCompression( tarCompressionMethod );
+                }
+            }
+            else
+            {
+                // TODO: better handling
+                throw new IllegalArgumentException( "Unknown format: " + format );
-            // TODO: includes/excludes
+            for ( Iterator j = assembly.getFilesets().iterator(); j.hasNext(); )
+            {
+                FileSet fileset = (FileSet) j.next();
+                String directory = fileset.getDirectory();
+                String output = fileset.getOutputDirectory();
+                if ( output == null )
+                {
+                    output = directory;
+                }
-            FileUtils.copyDirectoryStructure( new File( directory ), new File( outputBase, output ));
+                String[] includes = (String[]) fileset.getIncludes().toArray( EMPTY_STRING_ARRAY );
+                String[] excludes = (String[]) fileset.getExcludes().toArray( EMPTY_STRING_ARRAY );
+                archiver.addDirectory( new File( directory ), output, includes, excludes );
+            }
+
+            archiver.setDestFile( new File( outputDirectory, filename ) );
+            archiver.createArchive();
-
-        // TODO: package it up
