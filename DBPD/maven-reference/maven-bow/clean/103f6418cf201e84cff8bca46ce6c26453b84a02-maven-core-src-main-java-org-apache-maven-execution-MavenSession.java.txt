Experimenting with Munge to chop out deprecated code for a Maven 4.x codebase

I will try and collect all deprecated code at the bottom of classes with Munge markers and
use this in conjunction with a definitive list of classes to be purged in order to use
one code line to safely experiment with Maven 4.x.

-    private PlexusContainer container;
-
-    private final Settings settings;
-
-    @Deprecated
-    public MavenSession( PlexusContainer container, MavenExecutionRequest request, MavenExecutionResult result,
-                         MavenProject project )
-    {
-        this( container, request, result, Arrays.asList( new MavenProject[]{project} ) );
-    }
-
-    @Deprecated
-    public MavenSession( PlexusContainer container, Settings settings, ArtifactRepository localRepository,
-                         EventDispatcher eventDispatcher, ReactorManager unused, List<String> goals,
-                         String executionRootDir, Properties executionProperties, Date startTime )
-    {
-        this( container, settings, localRepository, eventDispatcher, unused, goals, executionRootDir,
-              executionProperties, null, startTime );
-    }
-
-    @Deprecated
-    public MavenSession( PlexusContainer container, Settings settings, ArtifactRepository localRepository,
-                         EventDispatcher eventDispatcher, ReactorManager unused, List<String> goals,
-                         String executionRootDir, Properties executionProperties, Properties userProperties,
-                         Date startTime )
-    {
-        this.container = container;
-        this.settings = settings;
-        this.executionProperties = executionProperties;
-        this.request = new DefaultMavenExecutionRequest();
-        this.request.setUserProperties( userProperties );
-        this.request.setLocalRepository( localRepository );
-        this.request.setGoals( goals );
-        this.request.setBaseDirectory( ( executionRootDir != null ) ? new File( executionRootDir ) : null );
-        this.request.setStartTime( startTime );
-    }
-
-    @Deprecated
-    public MavenSession( PlexusContainer container, MavenExecutionRequest request, MavenExecutionResult result,
-                         List<MavenProject> projects )
-    {
-        this.container = container;
-        this.request = request;
-        this.result = result;
-        this.settings = new SettingsAdapter( request );
-        setProjects( projects );
-    }
-
-    public MavenSession( PlexusContainer container, RepositorySystemSession repositorySession, MavenExecutionRequest request,
-                         MavenExecutionResult result )
-    {
-        this.container = container;
-        this.request = request;
-        this.result = result;
-        this.settings = new SettingsAdapter( request );
-        this.repositorySession = repositorySession;
-    }
-    @Deprecated
-    public PlexusContainer getContainer()
-    {
-        return container;
-    }
-
-    @Deprecated
-    public Object lookup( String role )
-        throws ComponentLookupException
-    {
-        return container.lookup( role );
-    }
-
-    @Deprecated
-    public Object lookup( String role, String roleHint )
-        throws ComponentLookupException
-    {
-        return container.lookup( role, roleHint );
-    }
-
-    @Deprecated
-    public List<Object> lookupList( String role )
-        throws ComponentLookupException
-    {
-        return container.lookupList( role );
-    }
-
-    @Deprecated
-    public Map<String, Object> lookupMap( String role )
-        throws ComponentLookupException
-    {
-        return container.lookupMap( role );
-    }
-
-    /**
-     * @deprecated Use either {@link #getUserProperties()} or {@link #getSystemProperties()}.
-     */
-    @Deprecated
-    public Properties getExecutionProperties()
-    {
-        if ( executionProperties == null )
-        {
-            executionProperties = new Properties();
-            executionProperties.putAll( request.getSystemProperties() );
-            executionProperties.putAll( request.getUserProperties() );
-        }
-
-        return executionProperties;
-    }
-
-    @Deprecated
-    public boolean isUsingPOMsFromFilesystem()
-    {
-        return request.isProjectPresent();
-    }
-
-    @Deprecated
-    public EventDispatcher getEventDispatcher()
-    {
-        return null;
-    }
-
-    @Deprecated
-    //
-    // Used by Tycho and will break users and force them to upgrade to Maven 3.1 so we should really leave
-    // this here, possibly indefinitely.
-    //
-    public RepositoryCache getRepositoryCache()
-    {
-        return null;
-    }
-
+    /*if_not[MAVEN4]*/
+    //
+    // Deprecated 
+    //
+        
+    private PlexusContainer container;    
+    
+    private final Settings settings;
+    
+    @Deprecated
+    public MavenSession( PlexusContainer container, RepositorySystemSession repositorySession, MavenExecutionRequest request,
+                         MavenExecutionResult result )
+    {
+        this.container = container;
+        this.request = request;
+        this.result = result;
+        this.settings = new SettingsAdapter( request );
+        this.repositorySession = repositorySession;
+    }
+    
+    @Deprecated
+    public MavenSession( PlexusContainer container, MavenExecutionRequest request, MavenExecutionResult result,
+                         MavenProject project )
+    {
+        this( container, request, result, Arrays.asList( new MavenProject[]{project} ) );
+    }
+
+    @Deprecated
+    public MavenSession( PlexusContainer container, Settings settings, ArtifactRepository localRepository,
+                         EventDispatcher eventDispatcher, ReactorManager unused, List<String> goals,
+                         String executionRootDir, Properties executionProperties, Date startTime )
+    {
+        this( container, settings, localRepository, eventDispatcher, unused, goals, executionRootDir,
+              executionProperties, null, startTime );
+    }
+
+    @Deprecated
+    public MavenSession( PlexusContainer container, Settings settings, ArtifactRepository localRepository,
+                         EventDispatcher eventDispatcher, ReactorManager unused, List<String> goals,
+                         String executionRootDir, Properties executionProperties, Properties userProperties,
+                         Date startTime )
+    {
+        this.container = container;
+        this.settings = settings;
+        this.executionProperties = executionProperties;
+        this.request = new DefaultMavenExecutionRequest();
+        this.request.setUserProperties( userProperties );
+        this.request.setLocalRepository( localRepository );
+        this.request.setGoals( goals );
+        this.request.setBaseDirectory( ( executionRootDir != null ) ? new File( executionRootDir ) : null );
+        this.request.setStartTime( startTime );
+    }
+
+    @Deprecated
+    public MavenSession( PlexusContainer container, MavenExecutionRequest request, MavenExecutionResult result,
+                         List<MavenProject> projects )
+    {
+        this.container = container;
+        this.request = request;
+        this.result = result;
+        this.settings = new SettingsAdapter( request );
+        setProjects( projects );
+    }
+
+    @Deprecated
+    //
+    // Used by Tycho and will break users and force them to upgrade to Maven 3.1 so we should really leave
+    // this here, possibly indefinitely.
+    //
+    public RepositoryCache getRepositoryCache()
+    {
+        return null;
+    }
+
+    @Deprecated
+    public EventDispatcher getEventDispatcher()
+    {
+        return null;
+    }
+
+    @Deprecated
+    public boolean isUsingPOMsFromFilesystem()
+    {
+        return request.isProjectPresent();
+    }
+
+    /**
+     * @deprecated Use either {@link #getUserProperties()} or {@link #getSystemProperties()}.
+     */
+    @Deprecated
+    public Properties getExecutionProperties()
+    {
+        if ( executionProperties == null )
+        {
+            executionProperties = new Properties();
+            executionProperties.putAll( request.getSystemProperties() );
+            executionProperties.putAll( request.getUserProperties() );
+        }
+
+        return executionProperties;
+    }
+    
+    @Deprecated
+    public PlexusContainer getContainer()
+    {
+        return container;
+    }
+
+    @Deprecated
+    public Object lookup( String role )
+        throws ComponentLookupException
+    {
+        return container.lookup( role );
+    }
+
+    @Deprecated
+    public Object lookup( String role, String roleHint )
+        throws ComponentLookupException
+    {
+        return container.lookup( role, roleHint );
+    }
+
+    @Deprecated
+    public List<Object> lookupList( String role )
+        throws ComponentLookupException
+    {
+        return container.lookupList( role );
+    }
+
+    @Deprecated
+    public Map<String, Object> lookupMap( String role )
+        throws ComponentLookupException
+    {
+        return container.lookupMap( role );
+    }   
+    
+    /*end[MAVEN4]*/
+    
