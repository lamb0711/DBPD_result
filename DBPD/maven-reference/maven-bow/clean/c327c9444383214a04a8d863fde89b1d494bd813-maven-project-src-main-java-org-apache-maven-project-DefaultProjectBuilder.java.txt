Refactored out more uses of modello and moved classes from maven-project to maven-project-builder. Doing this so that maven-mercury will not have direct dependency on modello or maven model.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@746002 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.maven.project.builder.impl;
+package org.apache.maven.project;
-import java.io.File;
-import java.io.IOException;
-import java.io.Reader;
+import java.io.*;
-import org.apache.maven.model.Parent;
-import org.apache.maven.project.MavenProject;
-import org.apache.maven.project.ProjectBuilderConfiguration;
-import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
+import org.apache.maven.project.*;
+import org.codehaus.plexus.util.WriterFactory;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
-        if ( domainModel.getModel().getParent() != null )
+        if ( domainModel.getParentId() != null )
-            if ( isParentLocal( domainModel.getModel().getParent(), pom.getParentFile() ) )
+            if ( isParentLocal( domainModel.getRelativePathOfParent(), pom.getParentFile() ) )
-            domainModels.add( new PomClassicDomainModel( model ) );
+            domainModels.add( convertToDomainModel( model ) );
+
+    private PomClassicDomainModel convertToDomainModel(Model model) throws IOException
+    {
+                if ( model == null )
+        {
+            throw new IllegalArgumentException( "model: null" );
+        }
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        Writer out = null;
+        MavenXpp3Writer writer = new MavenXpp3Writer();
+        try
+        {
+            out = WriterFactory.newXmlWriter( baos );
+            writer.write( out, model );
+        }
+        finally
+        {
+            if ( out != null )
+            {
+                out.close();
+            }
+        }
+        return new PomClassicDomainModel(new ByteArrayInputStream(baos.toByteArray()));
+    }
-            MavenProject mavenProject = new MavenProject( domainModel.getModel(), 
+            MavenProject mavenProject = new MavenProject( convertFromInputStreamToModel(domainModel.getInputStream()),
+    private static Model convertFromInputStreamToModel(InputStream inputStream) throws IOException
+    {
+
+        try
+        {
+            return new MavenXpp3Reader().read( ReaderFactory.newXmlReader( inputStream ) );
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new IOException( e.getMessage() );
+        }
+
+    }
+
-     * @param parent           the parent model info
+     * @param relativePath         the parent model info
-    private boolean isParentLocal( Parent parent, File projectDirectory )
+    private boolean isParentLocal( String relativePath, File projectDirectory )
-            File f = new File( projectDirectory, parent.getRelativePath() ).getCanonicalFile();
+            File f = new File( projectDirectory, relativePath ).getCanonicalFile();
-        Parent parent = domainModel.getModel().getParent();
+        String parentId = domainModel.getParentId();
-        if ( parent == null )
+        if ( parentId == null )
-        Artifact artifactParent = artifactFactory.createParentArtifact( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
+        Artifact artifactParent = artifactFactory.createParentArtifact( domainModel.getParentGroupId(),
+                domainModel.getParentArtifactId(), domainModel.getParentVersion() );
-        if ( !parentDomainModel.matchesParent( domainModel.getModel().getParent() ) )
+        if ( !parentDomainModel.matchesParentOf( domainModel ) )
-                ": Child ID = " + domainModel.getModel().getId() );
+                ": Child ID = " + domainModel.getId() );
-        Parent parent = domainModel.getModel().getParent();
+        String parentId = domainModel.getParentId();
-        if ( parent == null )
+        if ( parentId == null )
-        Model model = domainModel.getModel();
+       // Model model = domainModel.getModel();
-        File parentFile = new File( projectDirectory, model.getParent().getRelativePath() ).getCanonicalFile();
+        File parentFile = new File( projectDirectory, domainModel.getRelativePathOfParent() ).getCanonicalFile();
-        if ( !parentDomainModel.matchesParent( domainModel.getModel().getParent() ) )
+        if ( !parentDomainModel.matchesParentOf( domainModel ) )
-            logger.debug( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = "
+            logger.info( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = "
-                    + domainModel.getModel().getParent().getId() );
+                    + domainModel.getParentId() );
-                        + domainModel.getModel().getParent().getId());
+                        + domainModel.getParentId());
-        if ( parentDomainModel.getModel().getParent() != null )
+        if ( domainModel.getParentId() != null )
-            if ( isParentLocal( parentDomainModel.getModel().getParent(), parentFile.getParentFile() ) )
+            if ( isParentLocal(parentDomainModel.getRelativePathOfParent(), parentFile.getParentFile() ) )
