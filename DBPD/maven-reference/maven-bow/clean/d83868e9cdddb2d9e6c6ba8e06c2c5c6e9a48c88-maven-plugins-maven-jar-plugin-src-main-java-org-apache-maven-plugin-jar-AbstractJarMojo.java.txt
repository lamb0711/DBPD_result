*** empty log message ***


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@162928 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.AbstractPlugin;
+import org.codehaus.plexus.util.DirectoryScanner;
+import org.codehaus.plexus.util.StringUtils;
+
-import java.util.Properties;
-import org.apache.maven.artifact.MavenArtifact;
-import org.apache.maven.plugin.AbstractPlugin;
-import org.apache.maven.project.MavenProject;
-import org.codehaus.plexus.util.DirectoryScanner;
-import org.codehaus.plexus.util.StringUtils;
-
+
+    /*
+    */
+
+    /*
-            MavenArtifact artifact = (MavenArtifact) i.next();
+            Artifact artifact = (Artifact) i.next();
+    */
-    protected void addDirectory(Map includes, File baseDir) throws IOException {
-        addDirectory(includes, "", baseDir);
+    protected void addDirectory( Map includes, File baseDir ) throws IOException
+    {
+        addDirectory( includes, "", baseDir );
-     * @param prefix value to be added to the front of jar entry names
+     * @param prefix   value to be added to the front of jar entry names
-    protected void addDirectory(Map includes, String prefix, File baseDir) throws IOException {
+    protected void addDirectory( Map includes, String prefix, File baseDir ) throws IOException
+    {
-     * @param includes a map <String, File> of items to be include in the outpur
+     * @param includes        a map <String, File> of items to be include in the outpur
-     * @param prefix value to be added to the front of jar entry names
-     * @param baseDir  the directory to add
+     * @param prefix          value to be added to the front of jar entry names
+     * @param baseDir         the directory to add
-    protected void addDirectory(Map includes, String includesPattern, String excludesPattern, String prefix, File baseDir)
+    protected void addDirectory( Map includes, String includesPattern, String excludesPattern, String prefix, File baseDir )
-        scanner.setBasedir(baseDir);
+        scanner.setBasedir( baseDir );
-        for (int i = 0; i < files.length; i++) {
+        for ( int i = 0; i < files.length; i++ )
+        {
-            file = file.replace('\\', '/'); // todo shouldn't the scanner return platform independent names?
-            includes.put(prefix + file, new File(baseDir, file));
+            file = file.replace( '\\', '/' ); // todo shouldn't the scanner return platform independent names?
+            includes.put( prefix + file, new File( baseDir, file ) );
-    protected void createJar(File jarFile, Map includes) throws IOException {
+    protected void createJar( File jarFile, Map includes ) throws IOException
+    {
-        JarOutputStream jos = createJar(jarFile, createManifest());
-        try {
-            addEntries(jos, includes);
-        } finally {
+        JarOutputStream jos = createJar( jarFile, createManifest() );
+        try
+        {
+            addEntries( jos, includes );
+        }
+        finally
+        {
-    protected Manifest createManifest() {
+    protected Manifest createManifest()
+    {
-        attrs.putValue(Attributes.Name.MANIFEST_VERSION.toString(), "1.0");
-        attrs.putValue("Created-By", "2.0 (Apache Maven)");
+        attrs.putValue( Attributes.Name.MANIFEST_VERSION.toString(), "1.0" );
+        attrs.putValue( "Created-By", "2.0 (Apache Maven)" );
-    protected JarOutputStream createJar(File jarFile, Manifest mf) throws IOException {
+    protected JarOutputStream createJar( File jarFile, Manifest mf ) throws IOException
+    {
-        FileOutputStream fos = new FileOutputStream(jarFile);
-        try {
-            return new JarOutputStream(fos, mf);
-        } catch (IOException e) {
-            try {
+        FileOutputStream fos = new FileOutputStream( jarFile );
+        try
+        {
+            return new JarOutputStream( fos, mf );
+        }
+        catch ( IOException e )
+        {
+            try
+            {
-            } catch (IOException e1) {
+            }
+            catch ( IOException e1 )
+            {
-    protected void addEntries(JarOutputStream jos, Map includes) throws IOException {
-        for (Iterator i = includes.entrySet().iterator(); i.hasNext();) {
+    protected void addEntries( JarOutputStream jos, Map includes ) throws IOException
+    {
+        for ( Iterator i = includes.entrySet().iterator(); i.hasNext(); )
+        {
-            addEntry(jos, name, file);
+            addEntry( jos, name, file );
-    protected void addEntry(JarOutputStream jos, String name, File source) throws IOException {
-        FileInputStream fis = new FileInputStream(source);
-        try {
-            jos.putNextEntry(new JarEntry(name));
+    protected void addEntry( JarOutputStream jos, String name, File source ) throws IOException
+    {
+        FileInputStream fis = new FileInputStream( source );
+        try
+        {
+            jos.putNextEntry( new JarEntry( name ) );
-            while ((count = fis.read(buffer)) > 0) {
-                jos.write(buffer, 0, count);
+            while ( ( count = fis.read( buffer ) ) > 0 )
+            {
+                jos.write( buffer, 0, count );
-        } finally {
+        }
+        finally
+        {
