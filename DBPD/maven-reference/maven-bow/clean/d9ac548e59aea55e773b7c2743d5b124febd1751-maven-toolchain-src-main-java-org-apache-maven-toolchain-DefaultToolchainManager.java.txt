o inject the logger

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@760303 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.lang.reflect.InvocationTargetException;
-import java.util.Collections;
+
-import org.codehaus.plexus.PlexusConstants;
-import org.codehaus.plexus.context.Context;
-import org.codehaus.plexus.context.ContextException;
-import org.codehaus.plexus.logging.AbstractLogEnabled;
-import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
+import org.codehaus.plexus.logging.Logger;
- *
+ * 
-@Component(role=ToolchainManager.class)
-public class DefaultToolchainManager extends AbstractLogEnabled
-    implements ToolchainManager,
-               ToolchainManagerPrivate
+@Component(role = ToolchainManager.class)
+public class DefaultToolchainManager
+    implements ToolchainManager, ToolchainManagerPrivate
-	@Requirement
+    @Requirement
+    private Logger logger;
+    
+    @Requirement
-    public DefaultToolchainManager( )
-    {
-    }
-
-            PersistedToolchains pers = readToolchainSettings ();
+            PersistedToolchains pers = readToolchainSettings();
-            List toRet = new ArrayList(  );
+            List toRet = new ArrayList();
-                            getLogger().error("Missing toolchain factory for type:" + toolchainModel.getType() + ". Possibly caused by misconfigured project.");
+                            logger.error( "Missing toolchain factory for type:" + toolchainModel.getType() + ". Possibly caused by misconfigured project." );
-            ToolchainPrivate[] tc = new ToolchainPrivate[ toRet.size() ];
-            return (ToolchainPrivate[]) toRet.toArray(tc);
+            ToolchainPrivate[] tc = new ToolchainPrivate[toRet.size()];
+            return (ToolchainPrivate[]) toRet.toArray( tc );
-            getLogger().fatalError("Error in component lookup", ex);
+            logger.fatalError( "Error in component lookup", ex );
-    public Toolchain getToolchainFromBuildContext( String type,
-                                                   MavenSession session )
+    public Toolchain getToolchainFromBuildContext( String type, MavenSession session )
-        Map context = retrieveContext(session);
-        if ( "javac".equals( type )) 
+        Map context = retrieveContext( session );
+        if ( "javac".equals( type ) )
-        ToolchainModel model = (ToolchainModel)obj;
-        
-        if ( model != null ) 
+        ToolchainModel model = (ToolchainModel) obj;
+
+        if ( model != null )
-                ToolchainFactory fact = container.lookup(ToolchainFactory.class, type);
+                ToolchainFactory fact = container.lookup( ToolchainFactory.class, type );
-                getLogger().fatalError("Error in component lookup", ex);
+                logger.fatalError( "Error in component lookup", ex );
-                getLogger().error("Misconfigured toolchain.", ex);
+                logger.error( "Misconfigured toolchain.", ex );
-    private MavenProject getCurrentProject(MavenSession session) {
+    private MavenProject getCurrentProject( MavenSession session )
+    {
-        try 
+        try
-            Method meth = session.getClass().getMethod("getCurrentProject", new Class[0]);
-            return (MavenProject) meth.invoke (session );
-        } catch (Exception ex) 
+            Method meth = session.getClass().getMethod( "getCurrentProject", new Class[0] );
+            return (MavenProject) meth.invoke( session );
+        }
+        catch ( Exception ex )
-    
-    private Map retrieveContext( MavenSession session ) 
+
+    private Map retrieveContext( MavenSession session )
-        if (session == null) 
+        if ( session == null )
-        desc.setArtifactId( PluginDescriptor.getDefaultPluginArtifactId ("toolchains") );
-        MavenProject current = getCurrentProject(session);
-        if ( current != null ) 
+        desc.setArtifactId( PluginDescriptor.getDefaultPluginArtifactId( "toolchains" ) );
+        MavenProject current = getCurrentProject( session );
+        if ( current != null )
-            
+
-    
-    public void storeToolchainToBuildContext( ToolchainPrivate toolchain,
-                                              MavenSession session )
+    public void storeToolchainToBuildContext( ToolchainPrivate toolchain, MavenSession session )
-        context.put( getStorageKey( toolchain.getType() ), toolchain.getModel () );
+        context.put( getStorageKey( toolchain.getType() ), toolchain.getModel() );
-    
+
-    
-    private PersistedToolchains readToolchainSettings( )
+    private PersistedToolchains readToolchainSettings()
-        File tch = new File( System.getProperty( "user.home" ),
-            ".m2/toolchains.xml" );
+        File tch = new File( System.getProperty( "user.home" ), ".m2/toolchains.xml" );
-                throw new MisconfiguredToolchainException( "Cannot read toolchains file at " + tch.getAbsolutePath(  ),
-                    ex );
+                throw new MisconfiguredToolchainException( "Cannot read toolchains file at " + tch.getAbsolutePath(), ex );
-                if (in != null) 
+                if ( in != null )
-                    try 
+                    try
-                    } 
-                    catch (IOException ex) 
-                    { }
+                    }
+                    catch ( IOException ex )
+                    {
+                    }
-//                IOUtil.close( in );
+                //                IOUtil.close( in );
