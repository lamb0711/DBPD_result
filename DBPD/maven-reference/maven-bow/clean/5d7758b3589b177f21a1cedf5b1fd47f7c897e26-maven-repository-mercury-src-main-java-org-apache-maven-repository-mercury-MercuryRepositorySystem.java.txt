o pull from trunky dunk dunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@767707 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Map;
+import java.util.Set;
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.mercury.artifact.ArtifactQueryList;
+import org.apache.maven.mercury.artifact.ArtifactScopeEnum;
+import org.apache.maven.mercury.artifact.MetadataTreeNode;
-import org.apache.maven.repository.RepositorySystem;
+import org.apache.maven.repository.MetadataGraph;
+import org.apache.maven.repository.MetadataResolutionRequest;
+import org.apache.maven.repository.MetadataResolutionResult;
+import org.apache.maven.repository.RepositorySystem;
+System.out.println("mercury: request for "+request.getArtifact()
++"("+request.getArtifactDependencies()+") repos="+request.getRemoteRepostories().size()
++" repos, map=" + request.getManagedVersionMap() 
+);
+
+        
+        Map<String, ArtifactMetadata> versionMap = MercuryAdaptor.toMercuryVersionMap( (Map<String,Artifact>)request.getManagedVersionMap() );
-            MercuryAdaptor.toMercuryRepos( request.getLocalRepository()
+            MercuryAdaptor.toMercuryRepos(   request.getLocalRepository()
-            List<ArtifactMetadata> mercuryMetadataList =
-                _mercury.resolve( repos, null, MercuryAdaptor.toMercuryMetadata( request.getArtifact() ) );
+long start = System.currentTimeMillis();
+
+            org.apache.maven.artifact.Artifact rootArtifact = request.getArtifact();
+            
+            org.apache.maven.artifact.Artifact mavenPluginArtifact = rootArtifact;
+            
+            Set<Artifact> artifacts = request.getArtifactDependencies();
+            
+            boolean isPlugin = "maven-plugin".equals( rootArtifact.getType() ); 
+            
+            ArtifactScopeEnum scope = MercuryAdaptor.extractScope( rootArtifact, isPlugin, request.getFilter() );
+            
+            if( isPlugin  )
+                rootArtifact = createArtifact( rootArtifact.getGroupId()
+                                                    , rootArtifact.getArtifactId()
+                                                    , rootArtifact.getVersion()
+                                                    , rootArtifact.getScope()
+                                                    , "jar"
+                                                  );
+
+            ArtifactMetadata rootMd = MercuryAdaptor.toMercuryMetadata( rootArtifact );
+
+            org.apache.maven.artifact.Artifact root = null;
+
+            // copied from artifact resolver 
+            if ( request.isResolveRoot() && rootArtifact.getFile() == null && Util.isEmpty( artifacts ) )
+            {
+                try
+                {
+                    List<ArtifactMetadata> mercuryMetadataList = new ArrayList<ArtifactMetadata>(1);
+                    
+                    mercuryMetadataList.add( rootMd );
+                    
+                    List<org.apache.maven.mercury.artifact.Artifact> mercuryArtifactList =
+                        _mercury.read( repos, mercuryMetadataList );
+                    
+                    if( Util.isEmpty( mercuryArtifactList ) )
+                    {
+                        result.addErrorArtifactException( new ArtifactResolutionException( "scope="+scope, rootArtifact) );
+                        return result;
+                    }
+
+                    root = isPlugin ? mavenPluginArtifact : rootArtifact;
+                    
+                    org.apache.maven.mercury.artifact.Artifact a = mercuryArtifactList.get( 0 );
+                    
+                    root.setFile( a.getFile() );
+                    root.setResolved( true );
+                    root.setResolvedVersion( a.getVersion() );
+                    
+                    result.addArtifact( rootArtifact );
+                    result.addRequestedArtifact( rootArtifact );
+                }
+                catch ( Exception e )
+                {
+                    result.addMissingArtifact( request.getArtifact() );
+                    return result;
+                }
+            }
+
+            if ( Util.isEmpty( artifacts ) )
+            {
+                return result;
+            } 
+            
+            List<ArtifactMetadata> mercuryMetadataList = null;
+
+            if ( Util.isEmpty( artifacts ) )
+                mercuryMetadataList = _mercury.resolve( repos, scope,  rootMd );
+            else
+            {
+                List<ArtifactMetadata> query = new ArrayList<ArtifactMetadata>( artifacts.size() + 1 );
+                
+                query.add( rootMd );
+                
+                for( Artifact a : artifacts )
+                    query.add( MercuryAdaptor.toMercuryMetadata( a ) );
+
+                mercuryMetadataList = _mercury.resolve( repos, scope, new ArtifactQueryList(query), null, null, versionMap );
+            }
+long diff = System.currentTimeMillis() - start;
+            
+            {
-                    result.addArtifact( MercuryAdaptor.toMavenArtifact( _artifactFactory, a ) );
+                {
+                    if( a.getGroupId().equals( rootMd.getGroupId() ) && a.getArtifactId().equals( rootMd.getArtifactId() ) )
+                    { // root artifact processing
+                        root = isPlugin ? mavenPluginArtifact : rootArtifact;
+                        
+                        root.setFile( a.getFile() );
+                        root.setResolved( true );
+                        root.setResolvedVersion( a.getVersion() );
+
+                        result.addArtifact( root );
+                        result.addRequestedArtifact( root );
+                    }
+                    else
+                    {
+                        Artifact ma = MercuryAdaptor.toMavenArtifact( _artifactFactory, a );
+                        
+                        result.addArtifact( ma );
+                        result.addRequestedArtifact( ma );
+                    }
+                }
+
+System.out.println("mercury: resolved("+diff+") "+root+"("+scope+") as file "+root.getFile() );
+//for( Artifact a: result.getArtifacts() )
+//System.out.println("mercury dependency: "+a+" as file "+a.getFile() );
+            }
+            else
+            {
+                result.addMissingArtifact( rootArtifact );
+System.out.println("mercury: missing artifact("+diff+") "+rootArtifact+"("+scope+")" );
+            }
+            
+    
+    
+    
+
+    public MetadataResolutionResult resolveMetadata( MetadataResolutionRequest request )
+    {
+        if ( request == null )
+            throw new IllegalArgumentException( LANG.getMessage( "null.request" ) );
+
+        if ( request.getArtifactMetadata() == null )
+            throw new IllegalArgumentException( LANG.getMessage( "null.request.artifact" ) );
+
+        List<Repository> repos =
+            MercuryAdaptor.toMercuryRepos( request.getLocalRepository()
+                                           , request.getRemoteRepostories()
+                                           , _dependencyProcessor
+                                         );
+
+        MetadataResolutionResult res = new MetadataResolutionResult();
+        
+        ArtifactMetadata md = MercuryAdaptor.toMercuryArtifactMetadata( request.getArtifactMetadata() );
+        
+        try
+        {
+            MetadataTreeNode root = _mercury.resolveAsTree( repos, ArtifactScopeEnum.valueOf( request.getScope() ), new ArtifactQueryList(md), null, null );
+            if( root != null )
+            {
+                MetadataGraph resTree = MercuryAdaptor.resolvedTreeToGraph( root );
+                
+                res.setResolvedTree( resTree );
+            }
+        }
+        catch ( RepositoryException e )
+        {
+            res.addError( e );
+        }
+        
+        return res;
+    }
