o giving shane a handle on how to grab default plugin information as i've removed all the diddling in the plugin manager itself


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@769637 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.codehaus.plexus.configuration.PlexusConfiguration;
+import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
-                        MojoDescriptor md = getMojoDescriptor( s, session, project );
+                        MojoDescriptor md = getMojoDescriptor( s, session.getCurrentProject(), session.getLocalRepository() );
-                lifecyclePlan.add( getMojoDescriptor( mojo, session, project ) );
+                lifecyclePlan.add( getMojoDescriptor( mojo, project, session.getLocalRepository() ) );
-    MojoDescriptor getMojoDescriptor( String task, MavenSession session, MavenProject project )
+    MojoDescriptor getMojoDescriptor( String task, MavenProject project, ArtifactRepository localRepository )
+    //MojoDescriptor getMojoDescriptor( String groupId, String artifactId, String version, String goal, MavenProject project, ArtifactRepository localRepository )
-            plugin = pluginManager.findPluginForPrefix( prefix, project, session );
+            plugin = pluginManager.findPluginForPrefix( prefix, project );
-                        desc = pluginManager.loadPlugin( buildPlugin, project, session );
+                        desc = pluginManager.loadPlugin( buildPlugin, project, localRepository );
-            mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, session );
+            mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, project, localRepository );
-    }    
+    }   
+    
+    public Xpp3Dom getDefaultPluginConfiguration( String groupId, String artifactId, String version, String goal, MavenProject project, ArtifactRepository localRepository ) 
+        throws LifecycleExecutionException
+    {
+        return convert( getMojoDescriptor( groupId+":"+artifactId+":"+version+":"+goal, project, localRepository ).getMojoConfiguration() );
+    }
+    
+    public Xpp3Dom getMojoConfiguration( MojoDescriptor mojoDescriptor )
+    {
+        PlexusConfiguration configuration = mojoDescriptor.getConfiguration();
+        
+        return convert( configuration );
+    }
+    
+    public Xpp3Dom convert( PlexusConfiguration c )
+    {
+        Xpp3Dom dom = new Xpp3Dom( "configuration" );
+        
+        PlexusConfiguration[] ces = c.getChildren();
+        
+        for( PlexusConfiguration ce : ces )
+        {
+            Xpp3Dom e = new Xpp3Dom( ce.getName() );
+            e.setValue( ce.getValue( ce.getAttribute( "default-value", null ) ) );
+            dom.addChild( e );            
+        }
+
+        return dom;
+    }
