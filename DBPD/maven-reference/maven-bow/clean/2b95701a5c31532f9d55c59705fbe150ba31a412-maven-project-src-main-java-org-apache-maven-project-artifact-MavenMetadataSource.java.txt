Rearranging project-builder caching so it's done externally and available for use in the model-lineage builder and during artifact resolution as well.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@509692 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.context.BuildContextManager;
+import org.apache.maven.project.build.ProjectBuildCache;
+    
+    private BuildContextManager buildContextManager;
+        ProjectBuildCache cache = ProjectBuildCache.read( buildContextManager );
+        
-                try
+                project = cache.getCachedProject( artifact );
+                
+                if ( project == null )
-                    project = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories, localRepository,
-                                                                       true );
-                }
-                catch ( InvalidProjectModelException e )
-                {
-                    getLogger().warn( "POM for \'" + pomArtifact +
-                        "\' is invalid. It will be ignored for artifact resolution. Reason: " + e.getMessage() );
-
-                    if ( getLogger().isDebugEnabled() )
+                    try
-                        getLogger().debug( "Reason: " + e.getMessage() );
-                        
-                        ModelValidationResult validationResult = e.getValidationResult();
-
-                        if ( validationResult != null )
-                        {
-                            getLogger().debug( "\nValidation Errors:" );
-                            for ( Iterator i = validationResult.getMessages().iterator(); i.hasNext(); )
-                            {
-                                getLogger().debug( i.next().toString() );
-                            }
-                            getLogger().debug( "\n" );
-                        }
+                        project = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories, localRepository,
+                                                                           true );
+                    catch ( InvalidProjectModelException e )
+                    {
+                        getLogger().warn( "POM for \'" + pomArtifact +
+                            "\' is invalid. It will be ignored for artifact resolution. Reason: " + e.getMessage() );
-                    project = null;
+                        if ( getLogger().isDebugEnabled() )
+                        {
+                            getLogger().debug( "Reason: " + e.getMessage() );
+                            
+                            ModelValidationResult validationResult = e.getValidationResult();
+
+                            if ( validationResult != null )
+                            {
+                                getLogger().debug( "\nValidation Errors:" );
+                                for ( Iterator i = validationResult.getMessages().iterator(); i.hasNext(); )
+                                {
+                                    getLogger().debug( i.next().toString() );
+                                }
+                                getLogger().debug( "\n" );
+                            }
+                        }
+
+                        project = null;
+                    }
+                    catch ( ProjectBuildingException e )
+                    {
+                        throw new ArtifactMetadataRetrievalException( "Unable to read the metadata file for artifact '" +
+                            artifact.getDependencyConflictId() + "': " + e.getMessage(), e );
+                    }
-                catch ( ProjectBuildingException e )
-                {
-                    throw new ArtifactMetadataRetrievalException( "Unable to read the metadata file for artifact '" +
-                        artifact.getDependencyConflictId() + "': " + e.getMessage(), e );
-                }
+                
-                            getLogger().warn( "While downloading " + pomArtifact.getGroupId() + ":" +
-                                pomArtifact.getArtifactId() + ":" + pomArtifact.getVersion() + message + "\n" );
+                            getLogger().warn( "While downloading " + artifact.getGroupId() + ":" +
+                                artifact.getArtifactId() + ":" + artifact.getVersion() + message + "\n" );
-                            getLogger().debug( "While downloading " + pomArtifact.getGroupId() + ":" +
-                                pomArtifact.getArtifactId() + ":" + pomArtifact.getVersion() + message + "\n" );
+                            getLogger().debug( "While downloading " + artifact.getGroupId() + ":" +
+                                artifact.getArtifactId() + ":" + artifact.getVersion() + message + "\n" );
