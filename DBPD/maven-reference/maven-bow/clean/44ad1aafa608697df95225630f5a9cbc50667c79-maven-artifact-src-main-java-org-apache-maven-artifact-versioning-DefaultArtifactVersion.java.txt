[MNG-6631] - Make DefaultArtifactVersion faster

Use if-statements instead of exception-based control flow.
Throwing exceptions is very expensive and should not be used
for normal flow.

-import java.util.regex.Pattern;
-import java.util.NoSuchElementException;
+
+import static org.apache.commons.lang3.math.NumberUtils.isDigits;
-            try
+            if ( part2.length() == 1  || !part2.startsWith( "0" ) )
-                if ( ( part2.length() == 1 ) || !part2.startsWith( "0" ) )
-                {
-                    buildNumber = Integer.valueOf( part2 );
-                }
-                else
+                buildNumber = tryParseInt( part2 );
+                if ( buildNumber == null )
-            catch ( NumberFormatException e )
+            else
-            try
-            {
-                majorVersion = Integer.valueOf( part1 );
-            }
-            catch ( NumberFormatException e )
+            majorVersion = tryParseInt( part1 );
+            if ( majorVersion == null )
-            try
+            if ( tok.hasMoreTokens() )
-                if ( tok.hasMoreTokens() )
-                {
-                    minorVersion = getNextIntegerToken( tok );
-                }
-                if ( tok.hasMoreTokens() )
-                {
-                    incrementalVersion = getNextIntegerToken( tok );
-                }
-                if ( tok.hasMoreTokens() )
-                {
-                    qualifier = tok.nextToken();
-                    fallback = Pattern.compile( "\\d+" ).matcher( qualifier ).matches();
-                }
-
-                // string tokenizer won't detect these and ignores them
-                if ( part1.contains( ".." ) || part1.startsWith( "." ) || part1.endsWith( "." ) )
+                if ( majorVersion == null )
-            catch ( NumberFormatException e )
+            else
+            {
+                fallback = true;
+            }
+            if ( tok.hasMoreTokens() )
+            {
+                minorVersion = getNextIntegerToken( tok );
+                if ( minorVersion == null )
+                {
+                    fallback = true;
+                }
+            }
+            if ( tok.hasMoreTokens() )
+            {
+                incrementalVersion = getNextIntegerToken( tok );
+                if ( incrementalVersion == null )
+                {
+                    fallback = true;
+                }
+            }
+            if ( tok.hasMoreTokens() )
+            {
+                qualifier = tok.nextToken();
+                fallback = isDigits( qualifier );
+            }
+
+            // string tokenizer won't detect these and ignores them
+            if ( part1.contains( ".." ) || part1.startsWith( "." ) || part1.endsWith( "." ) )
+        String s = tok.nextToken();
+        if ( ( s.length() > 1 ) && s.startsWith( "0" ) )
+        {
+            return null;
+        }
+        return tryParseInt( s );
+    }
+
+    private static Integer tryParseInt( String s )
+    {
-            String s = tok.nextToken();
-            if ( ( s.length() > 1 ) && s.startsWith( "0" ) )
+            if ( !isDigits( s ) )
-                throw new NumberFormatException( "Number part has a leading 0: '" + s + "'" );
+                return null;
-            return Integer.valueOf( s );
+            long longValue = Long.parseLong( s );
+            if ( longValue > Integer.MAX_VALUE )
+            {
+                return null;
+            }
+            return (int) longValue;
-        catch ( NoSuchElementException e )
+        catch ( NumberFormatException e )
-            throw new NumberFormatException( "Number is invalid" );
+            return null;
