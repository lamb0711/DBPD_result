Mapping in most of the rest of the maven-core errors to the error reporter...just need to finish the ExtensionManagerException mappings, then write error reports for the new mappings from today, and we should be in good shape.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@603431 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.artifact.versioning.ArtifactVersion;
+import org.apache.maven.execution.MavenExecutionRequest;
+import org.apache.maven.lifecycle.LifecycleException;
+import org.apache.maven.lifecycle.LifecycleExecutionException;
+import org.apache.maven.model.Model;
+import org.apache.maven.plugin.MojoExecution;
+import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.PluginConfigurationException;
+import org.apache.maven.plugin.PluginExecutionException;
+import org.apache.maven.plugin.PluginParameterException;
+import org.apache.maven.plugin.descriptor.Parameter;
+import org.apache.maven.profiles.ProfileManager;
+import org.apache.maven.project.ProjectBuildingException;
+import org.apache.maven.project.interpolation.ModelInterpolationException;
+import org.apache.maven.project.path.PathTranslator;
+import org.apache.maven.reactor.MavenExecutionException;
+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.codehaus.plexus.configuration.PlexusConfiguration;
+import org.codehaus.plexus.logging.Logger;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+    void reportMissingPluginDescriptor( MojoBinding binding, MavenProject project, LifecycleExecutionException err );
+
+    void reportMojoExecutionException( MojoBinding binding, MavenProject project, MojoExecutionException cause );
+
+    void reportInvalidPluginExecutionEnvironment( MojoBinding binding, MavenProject project, PluginExecutionException cause );
+
+    void reportMojoLookupError( MojoBinding binding, MavenProject project, ComponentLookupException cause );
+
+    void reportAttemptToOverrideUneditableMojoParameter( Parameter currentParameter, MojoBinding binding, MavenProject project, MavenSession session, MojoExecution exec, PathTranslator translator, Logger logger, PluginConfigurationException cause );
+
+    void reportMissingRequiredMojoParameter( MojoBinding binding, MavenProject project, List invalidParameters, PluginParameterException err );
+
+    void reportUseOfBannedMojoParameter( Parameter currentParameter, MojoBinding binding, MavenProject project, String expression, String altExpression, ExpressionEvaluationException err );
+
+    void reportReflectionErrorWhileEvaluatingMojoParameter( Parameter currentParameter, MojoBinding binding, MavenProject project, String expression, Exception cause );
+
+    void reportErrorApplyingMojoConfiguration( MojoBinding binding, MavenProject project, PlexusConfiguration config, PluginConfigurationException cause );
+
+    void reportProjectDependenciesNotFound( MavenProject project, String scope, ArtifactNotFoundException cause );
+
+    void reportProjectDependenciesUnresolvable( MavenProject project, String scope, ArtifactResolutionException cause );
+
+    void reportProjectDependencyArtifactNotFound( MavenProject project, Artifact artifact, ArtifactNotFoundException cause );
+
+    void reportProjectDependencyArtifactUnresolvable( MavenProject project, Artifact artifact, ArtifactResolutionException cause );
+
+    void reportErrorLoadingPlugin( MojoBinding binding, MavenProject project, PluginLoaderException cause );
+
+    void reportErrorFormulatingBuildPlan( List tasks, MavenProject configuringProject, String targetDescription, LifecycleException cause );
+
+    void handleProjectBuildingError( MavenExecutionRequest request, File pomFile, ProjectBuildingException exception );
+
+    void reportInvalidMavenVersion( MavenProject project, ArtifactVersion mavenVersion, MavenExecutionException err );
+
+    void reportPomFileScanningError( File basedir, String includes, String excludes, IOException cause );
+
+    void reportPomFileCanonicalizationError( File pomFile, IOException cause );
+
+    void handleSuperPomBuildingError( ProfileManager globalProfileManager, ProjectBuildingException exception );
+
+    void handleSuperPomBuildingError( ProjectBuildingException exception );
+
+    void reportErrorInterpolatingModel( Model model, Map inheritedValues, File pomFile, MavenExecutionRequest request, ModelInterpolationException cause );
