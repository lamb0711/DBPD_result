disable project-specific loading of extensions and plugins until we can figure out how to do it without causing OOME's.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@589904 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.ArtifactUtils;
-import org.apache.maven.execution.MavenProjectSession;
-import org.codehaus.plexus.classworlds.realm.DuplicateRealmException;
-import java.net.MalformedURLException;
+    private String createPluginRealmId( String groupId, String artifactId )
+    {
+        return "/plugins/" + ArtifactUtils.versionlessKey( groupId, artifactId );
+    }
+
-        MavenProjectSession projectSession;
+//        MavenProjectSession projectSession;
+//
+//        try
+//        {
+//            projectSession = session.getProjectSession( project );
+//        }
+//        catch ( PlexusContainerException e )
+//        {
+//            throw new PluginManagerException( plugin, "Failed to create project-specific session for project: " + project.getId()
+//                                                + ".", project, e );
+//        }
+//
+
+        String pluginRealmId = createPluginRealmId( projectPlugin.getGroupId(), projectPlugin.getArtifactId() );
-            projectSession = session.getProjectSession( project );
-        }
-        catch ( PlexusContainerException e )
-        {
-            throw new PluginManagerException( plugin, "Failed to create project-specific session for project: " + project.getId()
-                                                + ".", project, e );
-        }
-
-        try
-        {
-            pluginRealm = projectSession.getPluginRealm( projectPlugin );
+//            pluginRealm = projectSession.getPluginRealm( projectPlugin );
+            pluginRealm = container.getClassWorld().getRealm( pluginRealmId );
-            pluginRealm = projectSession.createPluginRealm( projectPlugin );
+//            pluginRealm = projectSession.createPluginRealm( projectPlugin );
-            try
-            {
-                pluginRealm.addURL( pluginArtifact.getFile().toURI().toURL() );
-            }
-            catch ( MalformedURLException e )
-            {
-                throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + pluginArtifact.getId() + " as URL.", e );
-            }
+            List jars = new ArrayList();
+
+            jars.add( pluginArtifact.getFile() );
+//            try
+//            {
+//                pluginRealm.addURL( pluginArtifact.getFile().toURI().toURL() );
+//            }
+//            catch ( MalformedURLException e )
+//            {
+//                throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + pluginArtifact.getId() + " as URL.", e );
+//            }
-                try
-                {
-                    getLogger().debug( "Adding: " + artifact.getId() + " to plugin class-realm: " + key + " in project-session: " + project.getId() );
-                    pluginRealm.addURL( artifact.getFile().toURI().toURL() );
-                }
-                catch ( MalformedURLException e )
-                {
-                    throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + artifact.getId() + " as URL.", e );
-                }
+//                getLogger().debug( "Adding: " + artifact.getId() + " to plugin class-realm: " + key + " in project-session: " + project.getId() );
+
+                getLogger().debug( "Adding: " + artifact.getId() + " to plugin class-realm: " + key );
+                jars.add( artifact.getFile() );
+//                try
+//                {
+//                    pluginRealm.addURL( artifact.getFile().toURI().toURL() );
+//                }
+//                catch ( MalformedURLException e )
+//                {
+//                    throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + artifact.getId() + " as URL.", e );
+//                }
+            pluginRealm = container.createComponentRealm( pluginRealmId, jars );
+
-        catch ( DuplicateRealmException e )
+//        catch ( DuplicateRealmException e )
+//        {
+//            throw new PluginContainerException( plugin, pluginRealm, "Failed to create project-specific realm for plugin '" + projectPlugin
+//                                                + " in project: " + project.getId(), e );
+//        }
+        catch ( PlexusContainerException e )
-            throw new PluginContainerException( plugin, pluginRealm, "Failed to create project-specific realm for plugin '" + projectPlugin
-                                                + " in project: " + project.getId(), e );
+          throw new PluginContainerException( plugin, pluginRealm,
+                                                "Failed to create realm for plugin '"
+                                                                + projectPlugin, e );
-        MavenProjectSession projectSession;
-        try
-        {
-            projectSession = session.getProjectSession( project );
-        }
-        catch ( PlexusContainerException e )
-        {
-            throw new PluginManagerException( mojoDescriptor, "Failed to create project-specific session for project: " + project.getId()
-                                                + ".", project, e );
-        }
+//        MavenProjectSession projectSession;
+//        try
+//        {
+//            projectSession = session.getProjectSession( project );
+//        }
+//        catch ( PlexusContainerException e )
+//        {
+//            throw new PluginManagerException( mojoDescriptor, "Failed to create project-specific session for project: " + project.getId()
+//                                                + ".", project, e );
+//        }
+        String pluginRealmId = createPluginRealmId( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
-            pluginRealm = projectSession.getPluginRealm( pluginDescriptor );
+//            pluginRealm = projectSession.getPluginRealm( pluginDescriptor );
+            pluginRealm = container.getClassWorld().getRealm( pluginRealmId );
-            getLogger().debug( "Plugin realm: " + pluginDescriptor.getId() + " not found in project session for: " + project.getId() + ". Using project realm instead." );
-            pluginRealm = projectSession.getProjectRealm();
+//            getLogger().debug( "Plugin realm: " + pluginDescriptor.getId() + " not found in project session for: " + project.getId() + ". Using project realm instead." );
+//            pluginRealm = projectSession.getProjectRealm();
+
+            getLogger().debug( "Plugin realm: " + pluginRealmId + " not found. Using container realm instead." );
+            pluginRealm = container.getContainerRealm();
-        ClassRealm realm = null;
+//        ClassRealm pluginRealm = null;
+//
+//        MavenProjectSession projectSession;
+//        try
+//        {
+//            projectSession = session.getProjectSession( project );
+//        }
+//        catch ( PlexusContainerException e )
+//        {
+//            throw new PluginManagerException( mojoDescriptor, "Failed to create project-specific session for project: " + project.getId()
+//                                                + ".", project, e );
+//        }
+//
+//        try
+//        {
+//            pluginRealm = projectSession.getPluginRealm( pluginDescriptor );
+//        }
+//        catch ( NoSuchRealmException e )
+//        {
+//            getLogger().debug( "Plugin realm: " + pluginDescriptor.getId() + " not found in project session for: " + project.getId() + ". Using project realm instead." );
+//            pluginRealm = projectSession.getProjectRealm();
+//        }
-        MavenProjectSession projectSession;
+        String pluginRealmId = createPluginRealmId( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
+        ClassRealm pluginRealm;
-            projectSession = session.getProjectSession( project );
-        }
-        catch ( PlexusContainerException e )
-        {
-            throw new PluginManagerException( mojoDescriptor, "Failed to create project-specific session for project: " + project.getId()
-                                                + ".", project, e );
-        }
-
-        try
-        {
-            realm = projectSession.getPluginRealm( pluginDescriptor );
+            pluginRealm = container.getClassWorld().getRealm( pluginRealmId );
-            getLogger().debug( "Plugin realm: " + pluginDescriptor.getId() + " not found in project session for: " + project.getId() + ". Using project realm instead." );
-            realm = projectSession.getProjectRealm();
+            getLogger().debug( "Plugin realm: " + pluginRealmId + " not found. Using container realm instead." );
+            pluginRealm = container.getContainerRealm();
-        ClassRealm oldRealm = container.setLookupRealm( realm );
-        pluginDescriptor.setClassRealm( realm );
+        ClassRealm oldRealm = container.setLookupRealm( pluginRealm );
+        pluginDescriptor.setClassRealm( pluginRealm );
-                                           + realm.getId() + " - descRealmId="
+                                           + pluginRealm.getId() + " - descRealmId="
-            plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint(), realm );
+            plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint(), pluginRealm );
-            throw new PluginContainerException( mojoDescriptor, realm, "Unable to find the mojo '"
+            throw new PluginContainerException( mojoDescriptor, pluginRealm, "Unable to find the mojo '"
