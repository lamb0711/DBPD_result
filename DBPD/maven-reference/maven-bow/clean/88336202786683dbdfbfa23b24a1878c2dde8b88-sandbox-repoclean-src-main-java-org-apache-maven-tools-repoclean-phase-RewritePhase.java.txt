o Added support to RewritePhase of repoclean to copy -SNAPSHOT.version.txt and -RELEASE.version.txt (or whatever it's called) using ArtifactMetadata, where these files exist in the source repo.
o Reformatted mojo annotation doco to tabular format.
o Committed a start to the plugin-overview (developer's PoV on this)...it's just an outline with an incomplete introduction for now, but it's still a start.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@169873 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.metadata.ReleaseArtifactMetadata;
+import org.apache.maven.artifact.metadata.SnapshotArtifactMetadata;
+import org.apache.maven.tools.repoclean.digest.DigestException;
+import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
-        ArtifactPomRewriter artifactPomRewriter = null;
-
-        try
+        File sourceBase = new File( new URL( sourceRepo.getUrl() ).getPath() );
+
+        File targetBase = new File( new URL( targetRepo.getUrl() ).getPath() );
+
+        for ( Iterator it = artifacts.iterator(); it.hasNext(); )
-            File sourceBase = new File( new URL( sourceRepo.getUrl() ).getPath() );
+            Artifact artifact = (Artifact) it.next();
-            File targetBase = new File( new URL( targetRepo.getUrl() ).getPath() );
+            RewriteTransaction transaction = new RewriteTransaction( artifact );
-            for ( Iterator it = artifacts.iterator(); it.hasNext(); )
+            String artifactReportPath = buildArtifactReportPath( artifact );
+
+            FileReporter artifactReporter = null;
+            try
-                Artifact artifact = (Artifact) it.next();
+                artifactReporter = new FileReporter( reportsBase, artifactReportPath );
-                RewriteTransaction transaction = new RewriteTransaction( artifact );
+                boolean errorOccurred = false;
-                String artifactReportPath = buildArtifactReportPath( artifact );
+                File artifactSource = new File( sourceRepo.getBasedir(), sourceRepo.pathOf( artifact ) );
+                File artifactTarget = new File( targetRepo.getBasedir(), targetRepo.pathOf( artifact ).replace( '+',
+                                                                                                                '-' ) );
-                FileReporter artifactReporter = null;
-                try
+                transaction.addFile( artifactTarget );
+
+                artifact.setFile( artifactSource );
+
+                boolean targetMissingOrOlder = !artifactTarget.exists()
+                    || artifactTarget.lastModified() < artifactSource.lastModified();
+
+                if ( artifactSource.exists() && ( configuration.force() || targetMissingOrOlder ) )
-                    artifactReporter = new FileReporter( reportsBase, artifactReportPath );
-
-                    boolean errorOccurred = false;
-
-                    File artifactSource = new File( sourceRepo.getBasedir(), sourceRepo.pathOf( artifact ) );
-                    File artifactTarget = new File( targetRepo.getBasedir(), targetRepo.pathOf( artifact )
-                        .replace( '+', '-' ) );
-
-                    artifact.setFile( artifactSource );
-
-                    boolean targetMissingOrOlder = !artifactTarget.exists()
-                        || artifactTarget.lastModified() < artifactSource.lastModified();
-
-                    if ( artifactSource.exists() && ( configuration.force() || targetMissingOrOlder ) )
+                    try
-                        transaction.addFile( artifactTarget );
-
-                        try
+                        if ( !configuration.reportOnly() )
-                            if ( !configuration.reportOnly() )
+                            if ( logger.isDebugEnabled() )
-                                if ( logger.isDebugEnabled() )
-                                {
-                                    logger.debug( "sourceRepo basedir is: \'" + sourceRepo.getBasedir() + "\'" );
-                                    logger.debug( "targetRepo basedir is: \'" + targetRepo.getBasedir() + "\'" );
-                                }
-
-                                File targetParent = artifactTarget.getParentFile();
-                                if ( !targetParent.exists() )
-                                {
-                                    targetParent.mkdirs();
-                                }
-
-                                if ( logger.isDebugEnabled() )
-                                {
-                                    logger.debug( "Copying artifact[" + artifact.getId() + "] from \'" + artifactSource
-                                        + "\' to \'" + artifactTarget + "\'." );
-                                }
-
-                                copyArtifact( artifact, artifactTarget, artifactReporter );
-                            }
-                        }
-                        catch ( Exception e )
-                        {
-                            repoReporter.error( "Error transferring artifact[" + artifact.getId()
-                                + "] to the target repository.", e );
-
-                            throw e;
-                        }
-
-                        if ( logger.isDebugEnabled() )
-                        {
-                            logger.debug( "working on digest for artifact[" + artifact.getId() + "] with groupId: \'"
-                                + artifact.getGroupId() + "\'" );
-                        }
-
-                        try
-                        {
-                            digestVerifier.verifyDigest( artifactSource, artifactTarget, transaction, artifactReporter,
-                                                         configuration.reportOnly() );
-                        }
-                        catch ( Exception e )
-                        {
-                            repoReporter.error( "Error verifying digest for artifact[" + artifact.getId() + "]", e );
-
-                            throw e;
-                        }
-
-                        ArtifactMetadata pom = new ProjectMetadata( artifact );
-
-                        File sourcePom = new File( sourceBase, sourceRepo.pathOfMetadata( pom ) );
-
-                        String pomContents = null;
-                        
-                        String pomVersion = ArtifactPomRewriter.V3_POM;
-
-                        if ( sourcePom.exists() )
-                        {
-                            pomContents = readPomContents( sourcePom );
-                            
-                            if ( pomContents.indexOf( "modelVersion" ) > -1 )
-                            {
-                                pomVersion = ArtifactPomRewriter.V4_POM;
-                            }
-                        }
-
-                        artifactPomRewriter = (ArtifactPomRewriter) container.lookup( ArtifactPomRewriter.ROLE,
-                                                                                      pomVersion );
-
-                        File targetPom = new File( targetBase, targetRepo.pathOfMetadata( pom ).replace( '+', '-' ) );
-
-                        transaction.addFile( targetPom );
-
-                        File bridgedTargetPom = new File( targetBase, bridgingLayout.pathOfMetadata( pom )
-                            .replace( '+', '-' ) );
-
-                        transaction.addFile( bridgedTargetPom );
-
-                        try
-                        {
-                            File targetPomParent = targetPom.getParentFile();
-                            if ( !targetPomParent.exists() )
-                            {
-                                targetPomParent.mkdirs();
+                                logger.debug( "sourceRepo basedir is: \'" + sourceRepo.getBasedir() + "\'" );
+                                logger.debug( "targetRepo basedir is: \'" + targetRepo.getBasedir() + "\'" );
-                            FileWriter to = null;
-                            try
+                            File targetParent = artifactTarget.getParentFile();
+                            if ( !targetParent.exists() )
-                                StringReader from = null;
-                                if ( pomContents != null )
-                                {
-                                    from = new StringReader( pomContents );
-                                }
-
-                                to = new FileWriter( targetPom );
-
-                                artifactPomRewriter.rewrite( artifact, from, to, artifactReporter, configuration
-                                    .reportOnly() );
-                            }
-                            finally
-                            {
-                                IOUtil.close( to );
+                                targetParent.mkdirs();
-                            boolean wroteBridge = bridgePomLocations( targetPom, bridgedTargetPom, artifactReporter );
-
-                            digestVerifier.verifyDigest( sourcePom, targetPom, transaction, artifactReporter,
-                                                         configuration.reportOnly() );
-
-                            if ( wroteBridge )
+                            if ( logger.isDebugEnabled() )
-                                digestVerifier.verifyDigest( sourcePom, bridgedTargetPom, transaction,
-                                                             artifactReporter, configuration.reportOnly() );
+                                logger.debug( "Copying artifact[" + artifact.getId() + "] from \'" + artifactSource
+                                    + "\' to \'" + artifactTarget + "\'." );
+                            copyArtifact( artifact, artifactTarget, artifactReporter );
-                        catch ( Exception e )
-                        {
-                            repoReporter.error( "Error rewriting POM for artifact[" + artifact.getId()
-                                + "] into the target repository.\n Error message: " + e.getMessage() );
-
-                            throw e;
-                        }
-
-                        rewritten.add( artifact );
-                    else if ( !targetMissingOrOlder )
+                    catch ( Exception e )
-                        artifactReporter.warn( "Target file for artifact is present and not stale. (Artifact: \'"
-                            + artifact.getId() + "\' in path: \'" + artifactSource + "\' with target path: "
-                            + artifactTarget + ")." );
-                    }
-                    else
-                    {
-                        artifactReporter.error( "Cannot find source file for artifact: \'" + artifact.getId()
-                            + "\' under path: \'" + artifactSource + "\'" );
+                        repoReporter.error( "Error transferring artifact[" + artifact.getId()
+                            + "] to the target repository.", e );
+
+                        throw e;
-                    if ( artifactReporter.hasError() )
+                    if ( logger.isDebugEnabled() )
-                        repoReporter.warn( "Error(s) occurred while rewriting artifact: \'" + artifact.getId()
-                            + "\' or its POM." );
+                        logger.debug( "working on digest for artifact[" + artifact.getId() + "] with groupId: \'"
+                            + artifact.getGroupId() + "\'" );
+
+                    try
+                    {
+                        digestVerifier.verifyDigest( artifactSource, artifactTarget, transaction, artifactReporter,
+                                                     configuration.reportOnly() );
+                    }
+                    catch ( Exception e )
+                    {
+                        repoReporter.error( "Error verifying digest for artifact[" + artifact.getId() + "]", e );
+
+                        throw e;
+                    }
+
+                    try
+                    {
+                        rewriteMetadata( artifact, transaction, sourceBase, sourceRepo, targetBase, targetRepo,
+                                         artifactReporter, configuration.reportOnly() );
+                    }
+                    catch ( Exception e )
+                    {
+                        repoReporter.error( "Error rewriting POM for artifact[" + artifact.getId()
+                            + "] into the target repository.\n Error message: " + e.getMessage() );
+
+                        throw e;
+                    }
+
+                    rewritten.add( artifact );
+                }
+                else if ( !targetMissingOrOlder )
+                {
+                    artifactReporter.warn( "Target file for artifact is present and not stale. (Artifact: \'"
+                        + artifact.getId() + "\' in path: \'" + artifactSource + "\' with target path: "
+                        + artifactTarget + ")." );
+                }
+                else
+                {
+                    artifactReporter.error( "Cannot find source file for artifact: \'" + artifact.getId()
+                        + "\' under path: \'" + artifactSource + "\'" );
+                }
+
+                if ( artifactReporter.hasError() )
+                {
+                    repoReporter.warn( "Error(s) occurred while rewriting artifact: \'" + artifact.getId()
+                        + "\' or its POM." );
+                }
+            }
+            catch ( Exception e )
+            {
+                if ( !configuration.force() )
+                {
+                    repoReporter.warn( "Rolling back conversion for: " + artifact );
+                    try
+                    {
+                        transaction.rollback();
+                    }
+                    catch ( RollbackException re )
+                    {
+                        repoReporter.error( "Error rolling back conversion transaction.", re );
+                    }
+                }
+                else
+                {
+                    repoReporter.warn( "NOT Rolling back conversion for: " + artifact + "; we are in --force mode." );
+                }
+
+                artifactReporter.error( "Error while rewriting file or POM for artifact: \'" + artifact.getId()
+                    + "\'. See report at: \'" + artifactReportPath + "\'.", e );
+            }
+            finally
+            {
+                if ( artifactReporter != null )
+                {
+                    artifactReporter.close();
+                }
+            }
+        }
+
+        logger.info( "Actual number of artifacts rewritten: " + rewritten.size() + " (" + ( rewritten.size() * 2 )
+            + " including POMs)." );
+
+        return rewritten;
+    }
+
+    private void rewriteMetadata( Artifact artifact, RewriteTransaction transaction, File sourceBase,
+                                 ArtifactRepository sourceRepo, File targetBase, ArtifactRepository targetRepo,
+                                 Reporter artifactReporter, boolean reportOnly )
+        throws Exception
+    {
+        // SNAPSHOT metadata
+        ArtifactMetadata snapshot = new SnapshotArtifactMetadata( artifact );
+
+        File snapshotSource = new File( sourceBase, sourceRepo.pathOfMetadata( snapshot ) );
+        File snapshotTarget = new File( targetBase, targetRepo.pathOfMetadata( snapshot ) );
+
+        freshenSupplementalMetadata( snapshot, snapshotSource, snapshotTarget, transaction, artifactReporter,
+                                     reportOnly );
+
+        // RELEASE metadata
+        ArtifactMetadata release = new ReleaseArtifactMetadata( artifact );
+
+        File releaseSource = new File( sourceBase, sourceRepo.pathOfMetadata( release ) );
+        File releaseTarget = new File( targetBase, targetRepo.pathOfMetadata( release ) );
+
+        freshenSupplementalMetadata( release, releaseSource, releaseTarget, transaction, artifactReporter, reportOnly );
+
+        // The rest is for POM metadata - translation and bridging of locations in the target repo may be required.
+        ArtifactMetadata pom = new ProjectMetadata( artifact );
+
+        File sourcePom = new File( sourceBase, sourceRepo.pathOfMetadata( pom ) );
+        File targetPom = new File( targetBase, targetRepo.pathOfMetadata( pom ).replace( '+', '-' ) );
+
+        String pomContents = null;
+
+        boolean pomNeedsRewriting = true;
+
+        if ( sourcePom.exists() )
+        {
+            pomContents = readPomContents( sourcePom );
+
+            if ( pomContents.indexOf( "modelVersion" ) > -1 )
+            {
+                pomNeedsRewriting = false;
+
+                freshenSupplementalMetadata( pom, sourcePom, targetPom, transaction, artifactReporter, reportOnly );
+            }
+        }
+
+        if ( pomNeedsRewriting )
+        {
+            ArtifactPomRewriter artifactPomRewriter = null;
+
+            try
+            {
+                artifactPomRewriter = (ArtifactPomRewriter) container.lookup( ArtifactPomRewriter.ROLE,
+                                                                              ArtifactPomRewriter.V3_POM );
+
+                transaction.addFile( targetPom );
+
+                File bridgedTargetPom = new File( targetBase, bridgingLayout.pathOfMetadata( pom ).replace( '+', '-' ) );
+
+                transaction.addFile( bridgedTargetPom );
+
+                try
+                {
+                    File targetPomParent = targetPom.getParentFile();
+                    if ( !targetPomParent.exists() )
+                    {
+                        targetPomParent.mkdirs();
+                    }
+
+                    FileWriter to = null;
+                    try
+                    {
+                        StringReader from = null;
+                        if ( pomContents != null )
+                        {
+                            from = new StringReader( pomContents );
+                        }
+
+                        to = new FileWriter( targetPom );
+
+                        artifactPomRewriter.rewrite( artifact, from, to, artifactReporter, reportOnly );
+                    }
+                    finally
+                    {
+                        IOUtil.close( to );
+                    }
+
+                    boolean wroteBridge = bridgePomLocations( pom, targetPom, bridgedTargetPom, artifactReporter,
+                                                              transaction, reportOnly );
+
+                    digestVerifier.verifyDigest( sourcePom, targetPom, transaction, artifactReporter, reportOnly );
+
+                    if ( wroteBridge )
+                    {
+                        digestVerifier.verifyDigest( sourcePom, bridgedTargetPom, transaction, artifactReporter,
+                                                     reportOnly );
+                    }
+
-                    if ( !configuration.force() )
-                    {
-                        repoReporter.warn( "Rolling back conversion for: " + artifact );
-                        try
-                        {
-                            transaction.rollback();
-                        }
-                        catch ( RollbackException re )
-                        {
-                            repoReporter.error( "Error rolling back conversion transaction.", re );
-                        }
-                    }
-                    else
-                    {
-                        repoReporter
-                            .warn( "NOT Rolling back conversion for: " + artifact + "; we are in --force mode." );
-                    }
-
-                    artifactReporter.error( "Error while rewriting file or POM for artifact: \'" + artifact.getId()
-                        + "\'. See report at: \'" + artifactReportPath + "\'.", e );
-                }
-                finally
-                {
-                    if ( artifactReporter != null )
-                    {
-                        artifactReporter.close();
-                    }
+                    throw e;
-
-            logger.info( "Actual number of artifacts rewritten: " + rewritten.size() + " (" + ( rewritten.size() * 2 )
-                + " including POMs)." );
-        }
-        finally
-        {
-            if ( artifactPomRewriter != null )
+            finally
-                container.release( artifactPomRewriter );
+                if ( artifactPomRewriter != null )
+                {
+                    try
+                    {
+                        container.release( artifactPomRewriter );
+                    }
+                    catch ( ComponentLifecycleException e )
+                    {
+                    }
+                }
+    }
-        return rewritten;
+    private void freshenSupplementalMetadata( ArtifactMetadata metadata, File source, File target,
+                                             RewriteTransaction transaction, Reporter artifactReporter,
+                                             boolean reportOnly )
+        throws IOException, DigestException, ReportWriteException
+    {
+        if ( source.exists() )
+        {
+            File targetParent = target.getParentFile();
+            if ( !targetParent.exists() )
+            {
+                targetParent.mkdirs();
+            }
+
+            FileReader reader = null;
+            FileWriter writer = null;
+
+            try
+            {
+                reader = new FileReader( source );
+                writer = new FileWriter( target );
+
+                IOUtil.copy( reader, writer );
+            }
+            finally
+            {
+                IOUtil.close( reader );
+                IOUtil.close( writer );
+            }
+
+            digestVerifier.verifyDigest( source, target, transaction, artifactReporter, reportOnly );
+
+        }
-    private boolean bridgePomLocations( File targetPom, File bridgedTargetPom, Reporter reporter )
-        throws IOException, ReportWriteException
+    private boolean bridgePomLocations( ArtifactMetadata pom, File targetPom, File bridgedTargetPom, Reporter reporter,
+                                       RewriteTransaction transaction, boolean reportOnly )
+        throws IOException, ReportWriteException, DigestException
-        FileInputStream in = null;
-        FileOutputStream out = null;
-
-        try
-        {
-            in = new FileInputStream( targetPom );
-            out = new FileOutputStream( bridgedTargetPom );
-
-            IOUtil.copy( in, out );
-        }
-        finally
-        {
-            IOUtil.close( in );
-            IOUtil.close( out );
-        }
+        freshenSupplementalMetadata( pom, targetPom, bridgedTargetPom, transaction, reporter, reportOnly );
