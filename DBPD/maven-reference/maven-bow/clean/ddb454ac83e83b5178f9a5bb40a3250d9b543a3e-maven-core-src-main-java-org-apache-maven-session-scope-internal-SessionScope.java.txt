[MNG-6831] Replace Anonymous classes by lambdas

Closes #303
-    private static final Provider<Object> SEEDED_KEY_PROVIDER = new Provider<Object>()
+    private static final Provider<Object> SEEDED_KEY_PROVIDER = () ->
-        public Object get()
-        {
-            throw new IllegalStateException();
-        }
+        throw new IllegalStateException();
-        return new Provider<T>()
+        return () ->
-            @SuppressWarnings( "unchecked" )
-            public T get()
+            LinkedList<ScopeState> stack = values.get();
+            if ( stack == null || stack.isEmpty() )
-                LinkedList<ScopeState> stack = values.get();
-                if ( stack == null || stack.isEmpty() )
-                {
-                    throw new OutOfScopeException( "Cannot access " + key + " outside of a scoping block" );
-                }
-
-                ScopeState state = stack.getFirst();
-
-                Provider<?> seeded = state.seeded.get( key );
-
-                if ( seeded != null )
-                {
-                    return (T) seeded.get();
-                }
-
-                T provided = (T) state.provided.get( key );
-                if ( provided == null && unscoped != null )
-                {
-                    provided = unscoped.get();
-                    state.provided.put( key, provided );
-                }
-
-                return provided;
+                throw new OutOfScopeException( "Cannot access " + key + " outside of a scoping block" );
+
+            ScopeState state = stack.getFirst();
+
+            Provider<?> seeded = state.seeded.get( key );
+
+            if ( seeded != null )
+            {
+                return (T) seeded.get();
+            }
+
+            T provided = (T) state.provided.get( key );
+            if ( provided == null && unscoped != null )
+            {
+                provided = unscoped.get();
+                state.provided.put( key, provided );
+            }
+
+            return provided;
