[MNG-4633] Adjusted upstream reactor artifact resolution to resolve on every phase change

Changed build summary time to show effective mojo time in weave mode, it's the only thing that made sense.
Removed uneccessary synchronized block in DefaultMavenPluginManager because now everything JustWorks(TM)

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@938149 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
-                Set<String> projectArtifacts = new HashSet<String>();
-                Set<Artifact> projectArtifactsA = new HashSet<Artifact>();
+                Set<Artifact> projectArtifacts = new HashSet<Artifact>();
-                        projectArtifacts.add( ArtifactUtils.key( artifact ) );
-                        projectArtifactsA.add( artifact );
+                        projectArtifacts.add( artifact );
-                                                            projectBuild.getTaskSegment(), projectArtifactsA );
-                        for ( Artifact dependency : projectBuild.getProject().getDependencyArtifacts() )
-                        {
-                            String s = ArtifactUtils.key( dependency );
-                            if ( projectArtifacts.contains( s ) )
-                            {
-                                dependency.setFile( null );
-                                dependency.setResolved( false );
-                                dependency.setRepository( null );
-                            }
-                        }
+                                                            projectBuild.getTaskSegment(), projectArtifacts );
+                Collection<ArtifactLink> dependencyLinks = getUpstreamReactorDependencies( projectBuild );
+
+                    PhaseRecorder phaseRecorder = new PhaseRecorder( projectBuild.getProject() );
+                    long totalMojoTime = 0;
+                    long mojoStart;
-                        PhaseRecorder phaseRecorder = new PhaseRecorder( projectBuild.getProject() );
+                        mojoStart = System.currentTimeMillis();
+                        totalMojoTime += ( System.currentTimeMillis() - mojoStart );
-                            reResolveReactorDependencies( nextPlanItem, projectBuild );
+
+                            if ( phaseRecorder.isDifferentPhase( nextPlanItem.getMojoExecution() ) )
+                            {
+                                for ( ArtifactLink dependencyLink : dependencyLinks )
+                                {
+                                    dependencyLink.resolveFromUpstream();
+                                }
+                            }
-                    final long wallClockTime = System.currentTimeMillis() - buildStartTime;
-                        new BuildSuccess( projectBuild.getProject(), wallClockTime ); // - waitingTime
+                        new BuildSuccess( projectBuild.getProject(), totalMojoTime ); // - waitingTime
-    private void reResolveReactorDependencies( ExecutionPlanItem nextPlanItem, ProjectSegment projectBuild )
-    {
-        if ( requiresReResolutionOfUpstreamReactorArtifacts( nextPlanItem ) )
-        {
-            reresolveUpstreamProjectArtifacts( projectBuild );
-        }
-        else if ( requiresReResolutionOfUpstreamTestScopedReactorArtifacts( nextPlanItem ) )
-        {
-            reresolveUpstreamTestScopedArtifacts( projectBuild );
-        }
-    }
-
-    private void reresolveUpstreamProjectArtifacts( ProjectSegment projectBuild )
+    private Collection<ArtifactLink> getUpstreamReactorDependencies( ProjectSegment projectBuild )
+        Collection<ArtifactLink> result = new ArrayList<ArtifactLink>();
-            Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
-            if ( dependencyArtifact != null )
+            if ( upStreamArtifact != null )
-                dependencyArtifact.setFile( upStreamArtifact.getFile() );
-                dependencyArtifact.setResolved( true );
-                dependencyArtifact.setRepository( upStreamArtifact.getRepository() );
+                Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
+                if ( dependencyArtifact != null )
+                {
+                    result.add( new ArtifactLink( dependencyArtifact, upStreamArtifact ) );
+                }
-        }
-    }
-
-    private void reresolveUpstreamTestScopedArtifacts( ProjectSegment projectBuild )
-    {
-        for ( MavenProject upstreamProject : projectBuild.getTransitiveUpstreamProjects() )
-        {
-            Artifact upStreamArtifact = findTestScopedArtifact( upstreamProject );
-            Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
-            if ( dependencyArtifact != null )
+            Artifact upStreamTestScopedArtifact = findTestScopedArtifact( upstreamProject );
+            if ( upStreamTestScopedArtifact != null )
-                dependencyArtifact.setFile( upStreamArtifact.getFile() );
-                dependencyArtifact.setResolved( upStreamArtifact.isResolved() );
-                dependencyArtifact.setRepository( upStreamArtifact.getRepository() );
+                Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
+                if ( dependencyArtifact != null )
+                {
+                    result.add( new ArtifactLink( dependencyArtifact, upStreamTestScopedArtifact ) );
+                }
-
+        return result;
+
-    private boolean requiresReResolutionOfUpstreamReactorArtifacts( ExecutionPlanItem nextExecutionPlanItem )
-    {
-        final String phase = nextExecutionPlanItem.getLifecyclePhase();
-        return "package".equals( phase ) || "install".equals( phase ) || "compile".equals( phase );
-    }
-
-    private boolean requiresReResolutionOfUpstreamTestScopedReactorArtifacts( ExecutionPlanItem nextExecutionPlanItem )
-    {
-        final String phase = nextExecutionPlanItem.getLifecyclePhase();
-        return "package".equals( phase ) || "install".equals( phase ) || "compile".equals( phase ) ||
-            "test-compile".equals( phase );
-    }
-
+
+    static class ArtifactLink
+    {
+        private final Artifact artifactInThis;
+
+        private final Artifact upstream;
+
+        ArtifactLink( Artifact artifactInThis, Artifact upstream )
+        {
+            this.artifactInThis = artifactInThis;
+            this.upstream = upstream;
+        }
+
+        public void resolveFromUpstream()
+        {
+            artifactInThis.setFile( upstream.getFile() );
+            artifactInThis.setRepository( upstream.getRepository() );
+            artifactInThis.setResolved( true ); // Or maybe upstream.isResolved()....
+
+        }
+    }
+
