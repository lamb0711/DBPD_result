o Did some refactoring: moving utility methods to EclipseUtils so there's no
  confusion as to which project is used.

o Use executedProject everywhere except for acquiring the artifact list; the 
  executedProject misses that list (that's because no deps are resolved in
  the forked lifecycle execution; it's delayed until the plugin is encountered
  and it's requiresDependencyResolution is seen.)

o Added flag -Declipse.downloadSources=true|false to skip source downloading


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@289188 13f79535-47bb-0310-9956-ffa450edef68

-                         List remoteArtifactRepositories )
+                         List remoteArtifactRepositories, boolean downloadSources )
-                           artifactFactory, remoteArtifactRepositories );
+                           artifactFactory, remoteArtifactRepositories, downloadSources );
-                               ArtifactFactory artifactFactory, List remoteArtifactRepositories )
+                               ArtifactFactory artifactFactory, List remoteArtifactRepositories,
+                               boolean downloadSources )
+
-            // source artifact: use the "sources" classifier added by the source plugin
-            Artifact sourceArtifact = artifactFactory.createArtifactWithClassifier( artifact.getGroupId(), artifact
-                .getArtifactId(), artifact.getVersion(), "java-source", "sources" ); //$NON-NLS-1$ //$NON-NLS-2$
-
-            try
+            if ( downloadSources )
-                if ( log.isDebugEnabled() )
+            	Artifact sourceArtifact = retrieveSourceArtifact( artifact, remoteArtifactRepositories,
+                                                                  localRepository, artifactResolver, artifactFactory );
+            	
+                if ( !sourceArtifact.isResolved() )
-                    log.debug( Messages.getString( "EclipseClasspathWriter.lookingforsources", //$NON-NLS-1$
-                                                   sourceArtifact.getArtifactId() ) );
+                    log.info( Messages.getString( "EclipseClasspathWriter.sourcesnotavailable", //$NON-NLS-1$
+                                                  sourceArtifact.getArtifactId() ) );
-                artifactResolver.resolve( sourceArtifact, remoteArtifactRepositories, localRepository );
-            }
-            catch ( ArtifactResolutionException e )
-            {
-                // ignore, the jar has not been found
-                if ( log.isDebugEnabled() )
-                {
-                    log.debug( e.getMessage(), e );
-                }
-            }
-
-            File sourceArtifactFile = sourceArtifact.getFile();
-
-            if ( !sourceArtifact.isResolved() )
-            {
-                log.info( Messages.getString( "EclipseClasspathWriter.sourcesnotavailable", //$NON-NLS-1$
-                                              sourceArtifact.getArtifactId() ) );
-            }
-            else
-            {
-                if ( log.isDebugEnabled() )
+                else
-                                                       sourceArtifactFile.getPath() } ) );
+                                                       sourceArtifact.getFile().getAbsolutePath() } ) );
+
+                    sourcepath = "M2_REPO/" //$NON-NLS-1$
+                        + EclipseUtils.toRelativeAndFixSeparator( localRepositoryFile, sourceArtifact.getFile().getAbsolutePath(), false );
-                sourcepath = "M2_REPO/" //$NON-NLS-1$
-                    + EclipseUtils.toRelativeAndFixSeparator( localRepositoryFile, sourceArtifactFile.getPath(), false );
+
+    
+    private Artifact retrieveSourceArtifact( Artifact artifact, List remoteArtifactRepositories, ArtifactRepository localRepository, ArtifactResolver artifactResolver,
+                                       ArtifactFactory artifactFactory )
+    {
+        // source artifact: use the "sources" classifier added by the source plugin
+        Artifact sourceArtifact = artifactFactory.createArtifactWithClassifier( artifact.getGroupId(), artifact
+            .getArtifactId(), artifact.getVersion(), "java-source", "sources" ); //$NON-NLS-1$ //$NON-NLS-2$
+
+        try
+        {
+            log.debug( Messages.getString( "EclipseClasspathWriter.lookingforsources", //$NON-NLS-1$
+                                               sourceArtifact.getArtifactId() ) );
+
+            artifactResolver.resolve( sourceArtifact, remoteArtifactRepositories, localRepository );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            // ignore, the jar has not been found
+            if ( log.isDebugEnabled() )
+            {
+                log.debug( "Cannot resolve source artifact", e );
+            }
+        }
+        
+        return sourceArtifact;
+    }
