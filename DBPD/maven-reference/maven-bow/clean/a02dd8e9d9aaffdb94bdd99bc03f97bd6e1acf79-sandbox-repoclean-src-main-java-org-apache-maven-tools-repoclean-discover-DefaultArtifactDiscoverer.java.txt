Worked on MNG-309 and subtasks...

o Added digest creation/verification for POMs

o Added separate logging of kickouts and exclusions for ArtifactDiscoverer to keep it from polluting the repository.report.txt

o Added transactional behavior for each artifact conversion: if the artifact, its POM and all the myriad supporting files cannot be converted/created, then all files associated with that artifact are backed out of the target repo.

  NOTE: This WILL NOT happen if "--force" is used.

o Translating '+' characters to '-' in legacy artifact paths (not in v4 source repo paths, since we'll assume those are valid for use in m2). This is taking place inside the V3PomRewriter currently.

Validated all of this on localhost using a test repo. Next step is to validate on beaver with production source and test target repos, and fix anything that's outstanding (also add test cases to the test repo as needed).



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@164116 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.tools.repoclean.report.FileReporter;
-import org.codehaus.plexus.util.DirectoryScanner;
+import org.apache.maven.tools.repoclean.report.PathLister;
+import org.apache.maven.tools.repoclean.report.Reporter;
-    implements ArtifactDiscoverer
+    extends AbstractArtifactDiscoverer
-    public List discoverArtifacts( File repositoryBase, FileReporter reporter, String blacklistedPatterns )
+    public List discoverArtifacts( File repositoryBase, Reporter reporter, String blacklistedPatterns, PathLister excludeLister, PathLister kickoutLister )
-        String[] blacklisted = null;
-        if ( blacklistedPatterns != null && blacklistedPatterns.length() > 0 )
-        {
-            blacklisted = blacklistedPatterns.split( "," );
-        }
-        else
-        {
-            blacklisted = new String[0];
-        }
-
-        String[] allExcludes = new String[STANDARD_DISCOVERY_EXCLUDES.length + blacklisted.length];
-
-        System.arraycopy( STANDARD_DISCOVERY_EXCLUDES, 0, allExcludes, 0, STANDARD_DISCOVERY_EXCLUDES.length );
-        System.arraycopy( blacklisted, 0, allExcludes, 0, blacklisted.length );
-
-        DirectoryScanner scanner = new DirectoryScanner();
-        scanner.setBasedir( repositoryBase );
-        scanner.setExcludes( allExcludes );
-
-        scanner.scan();
-
-        String[] artifactPaths = scanner.getIncludedFiles();
-
+        String[] artifactPaths = scanForArtifactPaths( repositoryBase, blacklistedPatterns, excludeLister );
+        
-            Artifact artifact = buildArtifact( repositoryBase, path, reporter );
+            Artifact artifact = buildArtifact( repositoryBase, path, kickoutLister );
-    private Artifact buildArtifact( File repositoryBase, String path, FileReporter reporter )
+    private Artifact buildArtifact( File repositoryBase, String path, PathLister kickoutLister )
-            reporter.error( "Found potential artifact file with invalid name. Path: \'" + path
-                + "\' doesn't seem to contain a file extension." );
+            kickoutLister.addPath(path);
-                reporter.error( "POM not found for potential artifact at \'" + path
-                    + "\'. Cannot create Artifact instance." );
+                kickoutLister.addPath(path);
