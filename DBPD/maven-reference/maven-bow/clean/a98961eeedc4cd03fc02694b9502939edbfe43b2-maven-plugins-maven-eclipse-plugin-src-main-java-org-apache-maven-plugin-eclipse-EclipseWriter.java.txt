o Fix MNG-410 (and MNG-769, MNG-738). Added testcase project-3 to demonstrate this.

o Added testcase to check generation of eclipse files in
  different location; modified the testcase to support this,
  and deal with the absolute paths.

o Neatified the addSourceLinks/addResourceLinks: using
  a map to keep track of duplicate source folders has the side
  effect of only needing one of those methods; it should
  also be faster :)

o Tried to add support for includes/excludes, but eclipse only
  supports unique source directories; this is typically not the
  case in maven, filters are used to split one resourcedir
  up. Left the code in for future reference.
  TODO: find a way to merge includes/excludes. If only
  the dir where in/excludes are specified is unique, they
  could be written without problem. This requires a preprocessing
  pass.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@240143 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import java.util.HashMap;
-
-        Collection referencedProjects = writeEclipseClasspath( projectBaseDir, outputDir, project, executedProject, reactorProjects );
-        writeEclipseProject( projectBaseDir, outputDir, project, executedProject, referencedProjects );
+        Map eclipseSourceRoots = new HashMap();
-        writeEclipseSettings( projectBaseDir, outputDir, project, executedProject );
+        Collection referencedProjects = writeEclipseClasspath(
+        	projectBaseDir, outputDir, project, executedProject, reactorProjects, eclipseSourceRoots
+        );
+        
+        writeEclipseProject( projectBaseDir, outputDir, project, executedProject, referencedProjects, eclipseSourceRoots );
+
+        writeEclipseSettings( projectBaseDir, outputDir, project, executedProject);
-    protected void writeEclipseProject( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, Collection referencedProjects )
+    protected void writeEclipseProject( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, Collection referencedProjects, Map eclipseSourceRoots )
-
-            addSourceLinks( writer, projectBaseDir, basedir, executedProject.getCompileSourceRoots() );
-
-            addResourceLinks( writer, projectBaseDir, basedir, executedProject.getBuild().getResources() );
-
-            addSourceLinks( writer, projectBaseDir, basedir, executedProject.getTestCompileSourceRoots() );
-
-            addResourceLinks( writer, projectBaseDir, basedir, executedProject.getBuild().getTestResources() );
+            
+            addSourceLinks( writer, projectBaseDir, basedir, eclipseSourceRoots );
-    protected Collection writeEclipseClasspath( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, List reactorProjects )
+    protected Collection writeEclipseClasspath( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, List reactorProjects, Map eclipseSourceRoots )
-                        null );
+                        null, eclipseSourceRoots );
-                      null );
+                      null, eclipseSourceRoots );
-                        project.getBuild().getTestOutputDirectory() );
+                        project.getBuild().getTestOutputDirectory(),
+                        eclipseSourceRoots );
-                      project.getBuild().getTestOutputDirectory() );
+                      project.getBuild().getTestOutputDirectory(),
+                      eclipseSourceRoots );
-    private void addSourceRoots( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots, String output )
+    private void addSourceRoots( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots, String output, Map addedSourceRoots )
+                // Don't add the same sourceroots twice. No include/exclude
+            	// patterns possible in maven for (test|script|)source directories.
+                if ( addedSourceRoots.containsKey( sourceRoot ) )
+                {
+                	continue; 
+                }
+
-                sourceRoot = toRelative( projectBaseDir, sourceRoot );
+                String eclipseSourceRoot = toRelative( projectBaseDir, sourceRoot );
+                
-                    sourceRoot = sourceRoot.replaceAll( "/", "-" );
+                    eclipseSourceRoot = eclipseSourceRoot.replaceAll( "/", "-" );
-                writer.addAttribute( "path", sourceRoot );
+                addedSourceRoots.put( sourceRoot, eclipseSourceRoot );
+                
+                writer.addAttribute( "path", eclipseSourceRoot );
-    private void addResources( XMLWriter writer, File projectBaseDir, File basedir, List resources, String output )
+    private void addResources( XMLWriter writer, File projectBaseDir, File basedir, List resources, String output, Map addedSourceRoots )
-                log.error( "This plugin currently doesn't support target paths for resources." );
-
-                return;
+            	output = resource.getTargetPath();
+            String resourceDir = resource.getDirectory();
+            
+            // don't add the same sourceroot twice; eclipse can't handle
+            // that, even with mutual exclusive include/exclude patterns.
+            if ( addedSourceRoots.containsKey( resourceDir ) )
+            {
+            	continue;
+            }
+
+            String eclipseResourceDir = toRelative( projectBaseDir, resourceDir );
+            
+            if ( ! projectBaseDir.equals( basedir ) )
+            {
+                eclipseResourceDir = eclipseResourceDir.replaceAll( "/", "-" );
+            }
+
+            addedSourceRoots.put( resourceDir, eclipseResourceDir );
+            
-
-            String resourceDir = resource.getDirectory();
-            resourceDir = toRelative( projectBaseDir, resourceDir );
-            if (!projectBaseDir.equals(basedir))
-            {
-                resourceDir = resourceDir.replaceAll( "/", "-" );
-            }
-            writer.addAttribute( "path", resourceDir );
+            writer.addAttribute( "path", eclipseResourceDir );
+//			Example of setting include/exclude patterns for future reference.
+//
+//          TODO: figure out how to merge if the same dir is specified twice
+//          with different in/exclude patterns. We can't write them now,
+//			since only the the first one would be included.
+//
+//          if ( resource.getIncludes().size() != 0 )
+//          {
+//          	writer.addAttribute(
+//            		"including", StringUtils.join( resource.getIncludes().iterator(), "|" )
+//        		);
+//          }
+//
+//          if ( resource.getExcludes().size() != 0 )
+//          {
+//          	writer.addAttribute(
+//          		"excluding", StringUtils.join( resource.getExcludes().iterator(), "|" )
+//          	);
+//          }
+            
-    private void addSourceLinks( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots )
+    private void addSourceLinks( XMLWriter writer, File projectBaseDir, File basedir, Map sourceRoots )
-        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )
+        for ( Iterator it = sourceRoots.keySet().iterator(); it.hasNext(); )
+            
+            String linkName = (String) sourceRoots.get( sourceRoot );
+            
+            sourceRoot = sourceRoot.replaceAll("\\\\", "/");
+            
+            log.debug( "Adding link '" + linkName + "' to '" + sourceRoot + "'" );
-                writer.writeText( toRelative( projectBaseDir, sourceRoot ).replaceAll( "/", "-" ) );
+                writer.writeText( linkName );
-                writer.writeText( sourceRoot.replaceAll("\\\\", "/") );
-
-                writer.endElement(); // location
-
-                writer.endElement(); // link
-            }
-        }
-    }
-
-    private void addResourceLinks( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots )
-    {
-        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )
-        {
-            String resourceDir = ((Resource) it.next() ).getDirectory();
-
-            if ( new File( resourceDir ).isDirectory() )
-            {
-                writer.startElement( "link" );
-
-                writer.startElement( "name" );
-
-                writer.writeText( toRelative( projectBaseDir, resourceDir ).replaceAll( "/", "-" ) );
-
-                writer.endElement(); // name
-
-                writer.startElement( "type" );
-
-                writer.writeText( "2" );
-
-                writer.endElement(); // type
-
-                writer.startElement( "location" );
-
-                writer.writeText( resourceDir.replaceAll( "\\\\", "/" ) );
+                writer.writeText( sourceRoot );
