PR: MNG-613
reorganise in preparation for generalised repository metadata

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@264091 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.metadata.Metadata;
+import org.apache.maven.artifact.repository.metadata.Plugin;
+import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
+import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer;
-import org.apache.maven.plugin.mapping.MappedPlugin;
-import org.apache.maven.plugin.mapping.PluginMap;
-import org.apache.maven.plugin.mapping.io.xpp3.PluginMappingXpp3Reader;
-import org.apache.maven.plugin.mapping.io.xpp3.PluginMappingXpp3Writer;
-import org.codehaus.plexus.component.discovery.ComponentDiscovererManager;
-import org.codehaus.plexus.component.discovery.ComponentDiscoveryEvent;
-import org.codehaus.plexus.component.discovery.ComponentDiscoveryListener;
-import java.util.List;
-    
+
-    
+
-    
+
-    
-    protected boolean updatePluginMap( RepositoryMetadata metadata ) throws MojoExecutionException
+
+    protected File updatePluginMap( RepositoryMetadata metadata )
+        throws MojoExecutionException
-        PluginMappingXpp3Reader mappingReader = new PluginMappingXpp3Reader();
+        MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();
-        PluginMap pluginMap = null;
+        Metadata pluginMap = null;
-        File metadataFile = metadata.getFile();
+        File metadataFile = new File( localRepository.getBasedir(),
+                                      localRepository.pathOfRepositoryMetadata( metadata ) );
-        if ( metadataFile != null && metadataFile.exists() )
+        if ( metadataFile.exists() )
-                throw new MojoExecutionException( "Cannot parse plugin-mapping metadata from file: " + metadataFile, e );
+                throw new MojoExecutionException( "Cannot parse plugin-mapping metadata from file: " + metadataFile,
+                                                  e );
-        
+
-            pluginMap = new PluginMap();
-            
+            pluginMap = new Metadata();
+
-        boolean shouldUpdate = true;
-        
-            MappedPlugin preExisting = (MappedPlugin) it.next();
+            Plugin preExisting = (Plugin) it.next();
-                getLog().info( "Plugin-mapping metadata for prefix: " + project.getArtifactId() + " already exists. Skipping." );
-                
-                shouldUpdate = false;
-                break;
+                getLog().info(
+                    "Plugin-mapping metadata for prefix: " + project.getArtifactId() + " already exists. Skipping." );
+
+                return null;
-        if ( shouldUpdate )
+        Plugin mappedPlugin = new Plugin();
+
+        mappedPlugin.setArtifactId( project.getArtifactId() );
+
+        mappedPlugin.setPrefix( getGoalPrefix() );
+
+        pluginMap.addPlugin( mappedPlugin );
+
+        Writer writer = null;
+        try
-            MappedPlugin mappedPlugin = new MappedPlugin();
+            File generatedMetadataFile = new File( metadataOutputDirectory, metadata.getRepositoryPath() );
-            mappedPlugin.setArtifactId( project.getArtifactId() );
+            File dir = generatedMetadataFile.getParentFile();
-            mappedPlugin.setPrefix( getGoalPrefix() );
-
-            pluginMap.addPlugin( mappedPlugin );
-
-            Writer writer = null;
-            try
+            if ( !dir.exists() )
-                File generatedMetadataFile = new File( metadataOutputDirectory, metadata.getRepositoryPath() );
-                
-                File dir = generatedMetadataFile.getParentFile();
-
-                if ( !dir.exists() )
-                {
-                    dir.mkdirs();
-                }
-
-                writer = new FileWriter( generatedMetadataFile );
-
-                PluginMappingXpp3Writer mappingWriter = new PluginMappingXpp3Writer();
-
-                mappingWriter.write( writer, pluginMap );
-                
-                metadata.setFile( generatedMetadataFile );
+                dir.mkdirs();
-            catch ( IOException e )
-            {
-                throw new MojoExecutionException( "Error writing repository metadata to build directory.", e );
-            }
-            finally
-            {
-                IOUtil.close( writer );
-            }
+
+            writer = new FileWriter( generatedMetadataFile );
+
+            MetadataXpp3Writer mappingWriter = new MetadataXpp3Writer();
+
+            mappingWriter.write( writer, pluginMap );
+
+            return generatedMetadataFile;
-        
-        return shouldUpdate;
+        catch ( IOException e )
+        {
+            throw new MojoExecutionException( "Error writing repository metadata to build directory.", e );
+        }
+        finally
+        {
+            IOUtil.close( writer );
+        }
