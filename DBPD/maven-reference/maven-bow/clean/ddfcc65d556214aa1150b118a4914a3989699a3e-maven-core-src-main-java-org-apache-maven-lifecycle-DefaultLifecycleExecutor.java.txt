PR: MNG-817
add goal="..." to @execute

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@292125 13f79535-47bb-0310-9956-ffa450edef68

-            if ( mojoDescriptor.getExecutePhase() != null )
+            if ( mojoDescriptor.getExecutePhase() != null || mojoDescriptor.getExecuteGoal() != null )
-        // Create new lifecycle
-        Map lifecycleMappings = constructLifecycleMappings( session, targetPhase, project );
-
-        String executeLifecycle = mojoDescriptor.getExecuteLifecycle();
-        if ( executeLifecycle != null )
+        Map lifecycleMappings = null;
+        if ( targetPhase != null )
-            Lifecycle lifecycleOverlay;
-            try
-            {
-                lifecycleOverlay = mojoDescriptor.getPluginDescriptor().getLifecycleMapping( executeLifecycle );
-            }
-            catch ( IOException e )
-            {
-                throw new LifecycleExecutionException( "Unable to read lifecycle mapping file", e );
-            }
-            catch ( XmlPullParserException e )
-            {
-                throw new LifecycleExecutionException( "Unable to parse lifecycle mapping file", e );
-            }
+            // Create new lifecycle
+            lifecycleMappings = constructLifecycleMappings( session, targetPhase, project );
-            if ( lifecycleOverlay == null )
+            String executeLifecycle = mojoDescriptor.getExecuteLifecycle();
+            if ( executeLifecycle != null )
-                throw new LifecycleExecutionException( "Lifecycle '" + executeLifecycle + "' not found in plugin" );
-            }
-
-            for ( Iterator i = lifecycleOverlay.getPhases().iterator(); i.hasNext(); )
-            {
-                Phase phase = (Phase) i.next();
-                for ( Iterator j = phase.getExecutions().iterator(); j.hasNext(); )
+                Lifecycle lifecycleOverlay;
+                try
-                    Execution e = (Execution) j.next();
+                    lifecycleOverlay = mojoDescriptor.getPluginDescriptor().getLifecycleMapping( executeLifecycle );
+                }
+                catch ( IOException e )
+                {
+                    throw new LifecycleExecutionException( "Unable to read lifecycle mapping file", e );
+                }
+                catch ( XmlPullParserException e )
+                {
+                    throw new LifecycleExecutionException( "Unable to parse lifecycle mapping file", e );
+                }
-                    for ( Iterator k = e.getGoals().iterator(); k.hasNext(); )
+                if ( lifecycleOverlay == null )
+                {
+                    throw new LifecycleExecutionException( "Lifecycle '" + executeLifecycle + "' not found in plugin" );
+                }
+
+                for ( Iterator i = lifecycleOverlay.getPhases().iterator(); i.hasNext(); )
+                {
+                    Phase phase = (Phase) i.next();
+                    for ( Iterator j = phase.getExecutions().iterator(); j.hasNext(); )
-                        String goal = (String) k.next();
-                        MojoDescriptor desc = mojoDescriptor.getPluginDescriptor().getMojo( goal );
+                        Execution e = (Execution) j.next();
-                        if ( desc == null )
+                        for ( Iterator k = e.getGoals().iterator(); k.hasNext(); )
-                            String message = "Required goal '" + goal + "' not found in plugin '" +
-                                mojoDescriptor.getPluginDescriptor().getGoalPrefix() + "'";
-                            int index = goal.indexOf( ':' );
-                            if ( index >= 0 )
-                            {
-                                String prefix = goal.substring( index + 1 );
-                                if ( prefix.equals( mojoDescriptor.getPluginDescriptor().getGoalPrefix() ) )
-                                {
-                                    message = message + " (goals should not be prefixed - try '" + prefix + "')";
-                                }
-                            }
-                            throw new LifecycleExecutionException( message );
-                        }
+                            String goal = (String) k.next();
+                            MojoDescriptor desc = mojoDescriptor.getPluginDescriptor().getMojo( goal );
-                        MojoExecution mojoExecution = new MojoExecution( desc, (Xpp3Dom) e.getConfiguration() );
-                        addToLifecycleMappings( lifecycleMappings, phase.getId(), mojoExecution,
-                                                session.getSettings() );
+                            if ( desc == null )
+                            {
+                                String message = "Required goal '" + goal + "' not found in plugin '" +
+                                    mojoDescriptor.getPluginDescriptor().getGoalPrefix() + "'";
+                                int index = goal.indexOf( ':' );
+                                if ( index >= 0 )
+                                {
+                                    String prefix = goal.substring( index + 1 );
+                                    if ( prefix.equals( mojoDescriptor.getPluginDescriptor().getGoalPrefix() ) )
+                                    {
+                                        message = message + " (goals should not be prefixed - try '" + prefix + "')";
+                                    }
+                                }
+                                throw new LifecycleExecutionException( message );
+                            }
+
+                            MojoExecution mojoExecution = new MojoExecution( desc, (Xpp3Dom) e.getConfiguration() );
+                            addToLifecycleMappings( lifecycleMappings, phase.getId(), mojoExecution,
+                                                    session.getSettings() );
+                        }
+
+            removeFromLifecycle( mojoDescriptor, lifecycleMappings );
-        removeFromLifecycle( mojoDescriptor, lifecycleMappings );
-
-        executeGoalWithLifecycle( targetPhase, session, lifecycleMappings, executionProject );
+        if ( targetPhase != null )
+        {
+            executeGoalWithLifecycle( targetPhase, session, lifecycleMappings, executionProject );
+        }
+        else
+        {
+            executeStandaloneGoal( mojoDescriptor.getExecuteGoal(), session, executionProject );
+        }
-
