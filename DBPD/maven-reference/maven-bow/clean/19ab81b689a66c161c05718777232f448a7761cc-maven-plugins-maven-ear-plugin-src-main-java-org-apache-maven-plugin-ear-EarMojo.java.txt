- MNG-1461: custom application.xml can now be specified properly. Overrides any other file found in the source directories
- MNG-1444: added directory scanner to exclude common directories (subversion, CVS files, etc). Added earSourceIncludes and earSourceExcludes properties to specify the list of tokens to include and exclude respectively.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@332123 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.DirectoryScanner;
+import java.util.ArrayList;
+import java.util.List;
+     * The comma separated list of tokens to include in the EAR.
+     * Default is '**'.
+     *
+     * @parameter alias="includes"
+     */
+    private String earSourceIncludes = "**";
+
+    /**
+     * The comma separated list of tokens to exclude from the EAR.
+     *
+     * @parameter alias="excludes"
+     */
+    private String earSourceExcludes;
+
+    private static final String[] EMPTY_STRING_ARRAY = {};
+
+    /**
-     * The location of the application.xml file to be used within the ear file.
+     * The location of a custom application.xml file to be used
+     * within the ear file.
-     * @parameter expression="${basedir}/src/main/application/META-INF/application.xml"
+     * @parameter
-    private File applicationXmlFile;
+    private String applicationXml;
-        getLog().debug( "applicationXmlLocation[" + applicationXmlFile + "]" );
+        getLog().debug( "applicationXml[" + getApplicationXml() + "]" );
-                FileUtils.copyDirectoryStructure( earSourceDir, getWorkDirectory() );
+                String[] fileNames = getEarFiles( earSourceDir );
+                for ( int i = 0; i < fileNames.length; i++ )
+                {
+                    FileUtils.copyFile( new File( earSourceDir, fileNames[i] ),
+                                        new File( getWorkDirectory(), fileNames[i] ) );
+                }
+
+            if ( applicationXml != null && !"".equals( applicationXml ) )
+            {
+                //rename to application.xml
+                getLog().info( "Including custom application.xml[" + applicationXml + "]" );
+                File metaInfDir = new File( getWorkDirectory(), META_INF );
+                FileUtils.copyFile( new File( applicationXml ), new File( metaInfDir, "/application.xml" ) );
+            }
+
-                FileUtils.copyDirectoryStructure( resourcesDir, getWorkDirectory() );
+                String[] fileNames = getEarFiles( resourcesDir );
+                for ( int i = 0; i < fileNames.length; i++ )
+                {
+                    FileUtils.copyFile( new File( resourcesDir, fileNames[i] ),
+                                        new File( getWorkDirectory(), fileNames[i] ) );
+                }
+    public String getApplicationXml()
+    {
+        return applicationXml;
+    }
+
+    public void setApplicationXml( String applicationXml )
+    {
+        this.applicationXml = applicationXml;
+    }
+
+    /**
+     * Returns a string array of the excludes to be used
+     * when assembling/copying the ear.
+     *
+     * @return an array of tokens to exclude
+     */
+    protected String[] getExcludes()
+    {
+        List excludeList = new ArrayList( FileUtils.getDefaultExcludesAsList() );
+        if ( earSourceExcludes != null && !"".equals( earSourceExcludes ) )
+        {
+            excludeList.add( earSourceExcludes );
+        }
+
+        // if applicationXml is specified, omit the one in the source directory
+        if ( getApplicationXml() != null && !"".equals( getApplicationXml() ) )
+        {
+            excludeList.add( "**/" + META_INF + "/application.xml" );
+        }
+
+        return (String[]) excludeList.toArray( EMPTY_STRING_ARRAY );
+    }
+
+    /**
+     * Returns a string array of the includes to be used
+     * when assembling/copying the ear.
+     *
+     * @return an array of tokens to include
+     */
+    protected String[] getIncludes()
+    {
+        return new String[]{earSourceIncludes};
+    }
+
+
+    /**
+     * Returns a list of filenames that should be copied
+     * over to the destination directory.
+     *
+     * @param sourceDir the directory to be scanned
+     * @return the array of filenames, relative to the sourceDir
+     */
+    private String[] getEarFiles( File sourceDir )
+    {
+        DirectoryScanner scanner = new DirectoryScanner();
+        scanner.setBasedir( sourceDir );
+        scanner.setExcludes( getExcludes() );
+        scanner.addDefaultExcludes();
+
+        scanner.setIncludes( getIncludes() );
+
+        scanner.scan();
+
+        return scanner.getIncludedFiles();
+    }
