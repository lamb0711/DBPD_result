Final pass on cleaning up the mojo api...collapsed MavenPluginDescriptor and PluginDescriptor in the same way as MavenMojoDescriptor/MojoDescriptor had been; eliminated the need for plugin.descriptor.Dependency and MavenPluginDependency (using ComponentDependencies instead); adjusted the MojoExtractors (name?) to return Lists instead of Sets; added duplicate checking to a new addMojo(MojoDescriptor) method on PluginDescriptor, so we catch it on all sides; changed the Generators to use execute(outputDirectory, pluginDescriptor) rather than the myriad pluginDescriptor-derived values; added an IT for checking that the build for a plugin will fail if multiple mojos are detected with the same goal; and, added a special case to PluginDescriptor.getGoalPrefixFromArtifactId() to handle maven-plugin-plugin. That should be about it. I'm not sure that I've gotten the IT for that failure test added to svn yet, so that may follow.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168481 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.MavenProject;
-import org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor;
-import org.apache.maven.tools.plugin.extractor.InvalidParameterException;
-import org.apache.maven.tools.plugin.PluginToolsException;
+import org.apache.maven.plugin.descriptor.DuplicateMojoDescriptorException;
+import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.tools.plugin.PluginToolsException;
+import org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor;
+import org.codehaus.plexus.logging.AbstractLogEnabled;
+import org.codehaus.plexus.logging.Logger;
+import org.codehaus.plexus.logging.console.ConsoleLogger;
-import java.util.HashSet;
+import java.util.List;
-import java.util.Set;
+    extends AbstractLogEnabled
+
+        this.enableLogging( new ConsoleLogger( Logger.LEVEL_INFO, "standalone-scanner-logger" ) );
-    public Set execute( MavenProject project, PluginDescriptor pluginDescriptor )
+    public void populatePluginDescriptor( MavenProject project, PluginDescriptor pluginDescriptor )
-        Set descriptors = new HashSet();
+        Logger logger = getLogger();
-        System.out.println( "Using " + mojoDescriptorExtractors.size() + " extractors." );
+        logger.debug( "Using " + mojoDescriptorExtractors.size() + " extractors." );
-            System.out.println( "Applying extractor for language: " + language );
+            logger.debug( "Applying extractor for language: " + language );
-            Set extractorDescriptors = extractor.execute( project, pluginDescriptor );
+            List extractorDescriptors = extractor.execute( project, pluginDescriptor );
-            System.out.println( "Extractor for language: " + language + " found " + extractorDescriptors.size() +
-                                " mojo descriptors." );
+            logger.debug( "Extractor for language: " + language + " found " + extractorDescriptors.size()
+                + " mojo descriptors." );
-            descriptors.addAll( extractorDescriptors );
+            for ( Iterator descriptorIt = extractorDescriptors.iterator(); descriptorIt.hasNext(); )
+            {
+                MojoDescriptor descriptor = (MojoDescriptor) descriptorIt.next();
+
+                logger.debug( "Adding mojo: " + descriptor + " to plugin descriptor." );
+
+                descriptor.setPluginDescriptor( pluginDescriptor );
+
+                try
+                {
+                    pluginDescriptor.addMojo( descriptor );
+                }
+                catch ( DuplicateMojoDescriptorException e )
+                {
+                    throw new PluginToolsException( "Duplicate goal specification detected.\nError was: "
+                        + e.getLocalizedMessage(), e );
+                }
+            }
-
-        return descriptors;
