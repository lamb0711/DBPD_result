o trying to use the request/result pattern everywhere
o remove another use of ResolutionGroup in the core
o remove all the deprecated methods in the resolver, we'll see what breaks and we'll restore in maven-compat


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@749407 13f79535-47bb-0310-9956-ffa450edef68

-                                                         List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners,
-                                                         List<ConflictResolver> conflictResolvers )
+                                                          List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners,
+                                                          List<ConflictResolver> conflictResolvers )
-        if ( listeners == null )
-        {
-            // TODO: this is simplistic.
-            listeners = new ArrayList<ResolutionListener>();
-            if ( getLogger().isDebugEnabled() )
-            {
-                listeners.add( new DebugResolutionListener( getLogger() ) );
-            }
-
-            listeners.add( new WarningResolutionListener( getLogger() ) );
-        }
-
-        ArtifactResolutionResult result;
-
-        result = artifactCollector.collect(
-        		artifacts, 
-        		originatingArtifact,
-				managedVersions, 
-				localRepository, 
-				remoteRepositories, 
-				source,
-				filter, 
-				listeners, 
-				conflictResolvers );
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
+        .setArtifact( originatingArtifact )
+        .setArtifactDependencies( artifacts )
+        .setManagedVersionMap( managedVersions )
+        .setLocalRepository( localRepository )
+        .setRemoteRepostories( remoteRepositories )
+        .setMetadataSource( source )
+        .setFilter( filter )
+        .setListeners( listeners )
+        .setConflictResolvers( conflictResolvers );        
+        
+        return resolveWithExceptions( request );
+    }
+    
+    public ArtifactResolutionResult resolveWithExceptions( ArtifactResolutionRequest request )
+        throws ArtifactResolutionException, ArtifactNotFoundException
+    {            
+        ArtifactResolutionResult result = resolve( request );
-        List<Artifact> resolvedArtifacts = new ArrayList<Artifact>();
-
-        List<Artifact> missingArtifacts = new ArrayList<Artifact>();
-
-        for ( ResolutionNode node : result.getArtifactResolutionNodes() )
+        if ( result.getMissingArtifacts().size() > 0 )
-            try
-            {
-                resolve( node.getArtifact(), node.getRemoteRepositories(), localRepository );
-
-                resolvedArtifacts.add( node.getArtifact() );
-            }
-            catch ( ArtifactNotFoundException anfe )
-            {
-                getLogger().debug( anfe.getMessage(), anfe );
-
-                missingArtifacts.add( node.getArtifact() );
-            }
-        }
-
-        if ( missingArtifacts.size() > 0 )
-        {
-            throw new MultipleArtifactsNotFoundException( originatingArtifact, resolvedArtifacts, missingArtifacts, remoteRepositories );
+            throw new MultipleArtifactsNotFoundException( request.getArtifact(), new ArrayList( result.getArtifacts() ), result.getMissingArtifacts(), request.getRemoteRepostories() );
-
-
-
-
-
-
-
-        // This is an attempt to get the metadata for the artifacts we are ultimately trying to resolve.
-        // We still
+        if ( listeners == null )
+        {
+            listeners = new ArrayList<ResolutionListener>();
+            
+            if ( getLogger().isDebugEnabled() )
+            {
+                listeners.add( new DebugResolutionListener( getLogger() ) );
+            }
-        ArtifactResolutionResult result = artifactCollector.collect( 
-        		artifacts, 
-        		originatingArtifact,                                                                      
-        		managedVersions, 
-        		localRepository,                                                                      
-        		remoteRepositories, 
-        		source, 
-        		filter, 
-        		listeners );
+            listeners.add( new WarningResolutionListener( getLogger() ) );
+        }
+                
+        // After the collection we will have the artifact object in the result but they will not be resolved yet.
+        ArtifactResolutionResult result = artifactCollector.collect( artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, listeners );
-        if ( result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() )
+        if ( result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() || result.hasCircularDependencyExceptions() )
-        for ( ResolutionNode node : result.getArtifactResolutionNodes() )
+        for ( Artifact requestedArtifact : result.getRequestedArtifacts() )
-                resolve( node.getArtifact(), node.getRemoteRepositories(), localRepository );
+                resolve( requestedArtifact, remoteRepositories, localRepository );
+                
+                result.addArtifact( requestedArtifact );
-                result.addMissingArtifact( node.getArtifact() );
+                result.addMissingArtifact( requestedArtifact );                               
