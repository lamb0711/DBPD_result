o Refactored RepositoryCleaner to use DiscoveryPhase and RewritePhase.
o Added the ability to read a pom and figure out whether it's a v4 pom (based on presence of modelVersion)
o Added a more accurate counter for artifacts that are actually rewritten successfully, rather than just the ones that enter the rewriting process.
o Probably need to add the phases still...


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@169041 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.metadata.ArtifactMetadata;
-import org.apache.maven.tools.repoclean.artifact.metadata.ProjectMetadata;
-import org.apache.maven.tools.repoclean.digest.DigestVerifier;
-import org.apache.maven.tools.repoclean.discover.ArtifactDiscoverer;
+import org.apache.maven.tools.repoclean.phase.DiscoveryPhase;
+import org.apache.maven.tools.repoclean.phase.RewritePhase;
-import org.apache.maven.tools.repoclean.report.PathLister;
-import org.apache.maven.tools.repoclean.report.ReportWriteException;
-import org.apache.maven.tools.repoclean.report.Reporter;
-import org.apache.maven.tools.repoclean.rewrite.ArtifactPomRewriter;
-import org.apache.maven.tools.repoclean.transaction.RewriteTransaction;
-import org.apache.maven.tools.repoclean.transaction.RollbackException;
-import org.codehaus.plexus.util.IOUtil;
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.Iterator;
-public class RepositoryCleaner extends AbstractLogEnabled implements Contextualizable
+public class RepositoryCleaner
+    extends AbstractLogEnabled
+    implements Contextualizable
-    private DigestVerifier digestVerifier;
-
-    private ArtifactRepositoryLayout bridgingLayout;
-
+    private DiscoveryPhase discoveryPhase;
+
+    private RewritePhase rewritePhase;
+
-                ArtifactDiscoverer artifactDiscoverer = null;
+                List artifacts;
-                List artifacts = null;
+                artifacts = discoveryPhase.execute( reportsBase, sourceRepositoryBase, configuration, repoReporter );
-                PathLister kickoutLister = null;
-                PathLister excludeLister = null;
-
-                try
-                {
-                    artifactDiscoverer = (ArtifactDiscoverer) container.lookup( ArtifactDiscoverer.ROLE,
-                                                                                configuration.getSourceRepositoryLayout() );
-
-                    if ( logger.isDebugEnabled() )
-                    {
-                        logger.debug( "Discovering artifacts." );
-                    }
-
-                    try
-                    {
-                        File kickoutsList = new File( reportsBase, "kickouts.txt" );
-                        File excludesList = new File( reportsBase, "excludes.txt" );
-
-                        kickoutLister = new PathLister( kickoutsList );
-                        excludeLister = new PathLister( excludesList );
-
-                        artifacts = artifactDiscoverer.discoverArtifacts( sourceRepositoryBase, repoReporter,
-                                                                          configuration.getBlacklistedPatterns(),
-                                                                          excludeLister, kickoutLister );
-                    }
-                    catch ( Exception e )
-                    {
-                        repoReporter.error( "Error discovering artifacts in source repository.", e );
-                        
-                        throw e;
-                    }
-
-                }
-                finally
-                {
-                    if ( artifactDiscoverer != null )
-                    {
-                        container.release( artifactDiscoverer );
-                    }
-
-                    if ( excludeLister != null )
-                    {
-                        excludeLister.close();
-                    }
-
-                    if ( kickoutLister != null )
-                    {
-                        kickoutLister.close();
-                    }
-                }
-
-                if ( artifacts != null )
+                if ( !artifacts.isEmpty() )
-                                                                                    configuration.getSourceRepositoryLayout() );
+                                                                                    configuration
+                                                                                        .getSourceRepositoryLayout() );
-                        ArtifactRepository sourceRepo = new ArtifactRepository( "source", "file://" +
-                                                                                          sourceRepositoryBase.getAbsolutePath(),
-                                                                                sourceLayout );
+                        ArtifactRepository sourceRepo = new ArtifactRepository( "source", "file://"
+                            + sourceRepositoryBase.getAbsolutePath(), sourceLayout );
-                                                                                    configuration.getTargetRepositoryLayout() );
+                                                                                    configuration
+                                                                                        .getTargetRepositoryLayout() );
-                        ArtifactRepository targetRepo = new ArtifactRepository( "target", "file://" +
-                                                                                          targetRepositoryBase.getAbsolutePath(),
-                                                                                targetLayout );
+                        ArtifactRepository targetRepo = new ArtifactRepository( "target", "file://"
+                            + targetRepositoryBase.getAbsolutePath(), targetLayout );
-                        artifactIndexer.writeAritfactIndex( artifacts, targetRepositoryBase );
+                        //                        List originalArtifacts = new ArrayList( artifacts );
-                        rewriteArtifactsAndPoms( artifacts, sourceRepo, targetRepo, configuration, reportsBase,
-                                                 sourceRepositoryBase, targetRepositoryBase, repoReporter );
+                        List rewritten = rewritePhase.execute( artifacts, sourceRepo, targetRepo, configuration,
+                                                               reportsBase, repoReporter );
+
+                        artifactIndexer.writeAritfactIndex( rewritten, targetRepositoryBase );
-                    logger.debug(
-                        "Warning encountered while rewriting one or more artifacts from source repository to target repository." );
+                    logger
+                        .warn( "Warning encountered while rewriting one or more artifacts from source repository to target repository." );
-            // if we wrote a repository report, and the configuration says to email the report, then do it.
+            // if we wrote a repository report with an error in it, and the configuration says to email the report, 
+            // then do it.
-                contentBuffer.append( "Errors occurred while performing maven-1 to maven-2 repository conversion.\n\n" +
-                                      "For more details, see:\n\n" );
+                contentBuffer.append( "Errors occurred while performing maven-1 to maven-2 repository conversion.\n\n"
+                    + "For more details, see:\n\n" );
-                contentBuffer.append( configuration.getErrorReportLink().replaceAll("#date", dateSubdir) );
+                contentBuffer.append( configuration.getErrorReportLink().replaceAll( "#date", dateSubdir ) );
-                    
+
-    private void rewriteArtifactsAndPoms( List artifacts, ArtifactRepository sourceRepo, ArtifactRepository targetRepo,
-                                          RepositoryCleanerConfiguration configuration, File reportsBase,
-                                          File sourceRepositoryBase, File targetRepositoryBase,
-                                          FileReporter repoReporter )
-        throws Exception
-    {
-        Logger logger = getLogger();
-
-        ArtifactPomRewriter artifactPomRewriter = null;
-
-        try
-        {
-            logger.debug( "Rewriting up to " + artifacts.size() + " artifacts (Should be " + ( artifacts.size() * 2 ) +
-                         " rewrites including POMs)." );
-
-            int actualRewriteCount = 0;
-            for ( Iterator it = artifacts.iterator(); it.hasNext(); )
-            {
-                Artifact artifact = (Artifact) it.next();
-
-                RewriteTransaction transaction = new RewriteTransaction( artifact );
-
-                String artifactReportPath = buildArtifactReportPath( artifact );
-
-                FileReporter artifactReporter = null;
-                try
-                {
-                    artifactReporter = new FileReporter( reportsBase, artifactReportPath );
-
-                    boolean errorOccurred = false;
-
-                    File artifactSource = new File( sourceRepo.getBasedir(), sourceRepo.pathOf( artifact ) );
-                    File artifactTarget = new File( targetRepo.getBasedir(), targetRepo.pathOf( artifact ).replace(
-                        '+', '-' ) );
-
-                    transaction.addFile( artifactTarget );
-
-                    artifact.setFile( artifactSource );
-
-                    boolean targetMissingOrOlder = !artifactTarget.exists() ||
-                        artifactTarget.lastModified() < artifactSource.lastModified();
-
-                    if ( artifactSource.exists() && ( configuration.force() || targetMissingOrOlder ) )
-                    {
-                        actualRewriteCount++;
-
-                        transaction.addFile( artifactTarget );
-
-                        try
-                        {
-                            if ( !configuration.reportOnly() )
-                            {
-                                if ( logger.isDebugEnabled() )
-                                {
-                                    logger.debug( "sourceRepo basedir is: \'" + sourceRepo.getBasedir() + "\'" );
-                                    logger.debug( "targetRepo basedir is: \'" + targetRepo.getBasedir() + "\'" );
-                                }
-
-                                File targetParent = artifactTarget.getParentFile();
-                                if ( !targetParent.exists() )
-                                {
-                                    targetParent.mkdirs();
-                                }
-
-                                if ( logger.isDebugEnabled() )
-                                {
-                                    logger.debug( "Copying artifact[" + artifact.getId() + "] from \'" +
-                                                  artifactSource + "\' to \'" + artifactTarget + "\'." );
-                                }
-
-                                copyArtifact( artifact, artifactTarget, artifactReporter );
-                            }
-                        }
-                        catch ( Exception e )
-                        {
-                            repoReporter.error( "Error transferring artifact[" + artifact.getId() +
-                                                "] to the target repository.", e );
-
-                            throw e;
-                        }
-
-                        if ( logger.isDebugEnabled() )
-                        {
-                            logger.debug( "working on digest for artifact[" + artifact.getId() + "] with groupId: \'" +
-                                          artifact.getGroupId() + "\'" );
-                        }
-
-                        try
-                        {
-                            digestVerifier.verifyDigest( artifactSource, artifactTarget, transaction, artifactReporter,
-                                                         configuration.reportOnly() );
-                        }
-                        catch ( Exception e )
-                        {
-                            repoReporter.error( "Error verifying digest for artifact[" + artifact.getId() + "]", e );
-
-                            throw e;
-                        }
-
-                        ArtifactMetadata pom = new ProjectMetadata( artifact );
-
-                        artifactPomRewriter = (ArtifactPomRewriter) container.lookup( ArtifactPomRewriter.ROLE,
-                                                                                      configuration.getSourcePomVersion() );
-
-                        File sourcePom = new File( sourceRepositoryBase, sourceRepo.pathOfMetadata( pom ) );
-
-                        File targetPom = new File( targetRepositoryBase,
-                                                   targetRepo.pathOfMetadata( pom ).replace( '+', '-' ) );
-
-                        transaction.addFile( targetPom );
-
-                        File bridgedTargetPom = new File( targetRepositoryBase, bridgingLayout.pathOfMetadata( pom ).replace(
-                            '+', '-' ) );
-
-                        transaction.addFile( bridgedTargetPom );
-
-                        try
-                        {
-                            artifactPomRewriter.rewrite( artifact, sourcePom, targetPom, artifactReporter,
-                                                         configuration.reportOnly() );
-
-                            boolean wroteBridge = bridgePomLocations( targetPom, bridgedTargetPom, artifactReporter );
-
-                            digestVerifier.verifyDigest( sourcePom, targetPom, transaction, artifactReporter,
-                                                         configuration.reportOnly() );
-
-                            if ( wroteBridge )
-                            {
-                                digestVerifier.verifyDigest( sourcePom, bridgedTargetPom, transaction,
-                                                             artifactReporter, configuration.reportOnly() );
-                            }
-
-                        }
-                        catch ( Exception e )
-                        {
-                            repoReporter.error( "Error rewriting POM for artifact[" + artifact.getId() +
-                                                "] into the target repository.\n Error message: " + e.getMessage() );
-
-                            throw e;
-                        }
-
-                    }
-                    else if ( !targetMissingOrOlder )
-                    {
-                        artifactReporter.warn( "Target file for artifact is present and not stale. (Artifact: \'" +
-                                               artifact.getId() + "\' in path: \'" + artifactSource +
-                                               "\' with target path: " + artifactTarget + ")." );
-                    }
-                    else
-                    {
-                        artifactReporter.error( "Cannot find source file for artifact: \'" + artifact.getId() +
-                                                "\' under path: \'" + artifactSource + "\'" );
-                    }
-
-                    if ( artifactReporter.hasError() )
-                    {
-                        repoReporter.warn( "Error(s) occurred while rewriting artifact: \'" + artifact.getId() +
-                                           "\' or its POM." );
-                    }
-                }
-                catch ( Exception e )
-                {
-                    if ( !configuration.force() )
-                    {
-                        repoReporter.warn( "Rolling back conversion for: " + artifact );
-                        try
-                        {
-                            transaction.rollback();
-                        }
-                        catch ( RollbackException re )
-                        {
-                            repoReporter.error( "Error rolling back conversion transaction.", re );
-                        }
-                    }
-                    else
-                    {
-                        repoReporter.warn( "NOT Rolling back conversion for: " + artifact + "; we are in --force mode." );
-                    }
-
-                    artifactReporter.error( "Error while rewriting file or POM for artifact: \'" + artifact.getId() +
-                                            "\'. See report at: \'" + artifactReportPath + "\'.", e );
-                }
-                finally
-                {
-                    if ( artifactReporter != null )
-                    {
-                        artifactReporter.close();
-                    }
-                }
-            }
-
-            logger.info( "Actual number of artifacts rewritten: " + actualRewriteCount + " (" +
-                         ( actualRewriteCount * 2 ) + " including POMs)." );
-        }
-        finally
-        {
-            if ( artifactPomRewriter != null )
-            {
-                container.release( artifactPomRewriter );
-            }
-        }
-    }
-
-    private boolean bridgePomLocations( File targetPom, File bridgedTargetPom, Reporter reporter )
-        throws IOException, ReportWriteException
-    {
-        if ( targetPom.equals( bridgedTargetPom ) )
-        {
-            reporter.warn( "Cannot create legacy-compatible copy of POM at: " + targetPom +
-                           "; legacy-compatible path is the same as the converted POM itself." );
-
-            return false;
-        }
-
-        FileInputStream in = null;
-        FileOutputStream out = null;
-
-        try
-        {
-            in = new FileInputStream( targetPom );
-            out = new FileOutputStream( bridgedTargetPom );
-
-            IOUtil.copy( in, out );
-        }
-        finally
-        {
-            IOUtil.close( in );
-            IOUtil.close( out );
-        }
-
-        return true;
-    }
-
-    private String buildArtifactReportPath( Artifact artifact )
-    {
-        String classifier = artifact.getClassifier();
-        String groupId = artifact.getGroupId().replace( '.', '/' );
-        String artifactId = artifact.getArtifactId();
-        String type = artifact.getType();
-        String version = artifact.getVersion();
-
-        return groupId + "/" + artifactId + "/" + type + "/" +
-            ( ( classifier != null ) ? ( classifier + "-" ) : ( "" ) ) + version + ".report.txt";
-    }
-
-    private void copyArtifact( Artifact artifact, File artifactTarget, FileReporter reporter )
-        throws IOException
-    {
-        File artifactSource = artifact.getFile();
-
-        InputStream inStream = null;
-        OutputStream outStream = null;
-        try
-        {
-            File targetParent = artifactTarget.getParentFile();
-            if ( !targetParent.exists() )
-            {
-                targetParent.mkdirs();
-            }
-
-            inStream = new BufferedInputStream( new FileInputStream( artifactSource ) );
-            outStream = new BufferedOutputStream( new FileOutputStream( artifactTarget ) );
-
-            byte[] buffer = new byte[16];
-            int read = -1;
-
-            while ( ( read = inStream.read( buffer ) ) > -1 )
-            {
-                outStream.write( buffer, 0, read );
-            }
-
-            outStream.flush();
-        }
-        finally
-        {
-            IOUtil.close( inStream );
-            IOUtil.close( outStream );
-        }
-    }
-
-            logger.error( "Cannot write to target repository \'" + targetRepositoryBase +
-                          "\' because it is not a directory." );
+            logger.error( "Cannot write to target repository \'" + targetRepositoryBase
+                + "\' because it is not a directory." );
