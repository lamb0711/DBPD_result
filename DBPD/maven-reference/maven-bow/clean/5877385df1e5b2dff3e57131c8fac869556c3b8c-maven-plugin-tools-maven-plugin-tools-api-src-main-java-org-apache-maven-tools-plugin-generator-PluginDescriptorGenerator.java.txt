Final pass on cleaning up the mojo api...collapsed MavenPluginDescriptor and PluginDescriptor in the same way as MavenMojoDescriptor/MojoDescriptor had been; eliminated the need for plugin.descriptor.Dependency and MavenPluginDependency (using ComponentDependencies instead); adjusted the MojoExtractors (name?) to return Lists instead of Sets; added duplicate checking to a new addMojo(MojoDescriptor) method on PluginDescriptor, so we catch it on all sides; changed the Generators to use execute(outputDirectory, pluginDescriptor) rather than the myriad pluginDescriptor-derived values; added an IT for checking that the build for a plugin will fail if multiple mojos are detected with the same goal; and, added a special case to PluginDescriptor.getGoalPrefixFromArtifactId() to handle maven-plugin-plugin. That should be about it. I'm not sure that I've gotten the IT for that failure test added to svn yet, so that may follow.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168481 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.MavenProject;
-import java.util.Set;
-    public void execute( String destinationDirectory, Set mavenMojoDescriptors, MavenProject project,
-                         String goalPrefix )
+    public void execute( String destinationDirectory, PluginDescriptor pluginDescriptor )
-            element( w, "groupId", project.getGroupId() );
+            element( w, "groupId", pluginDescriptor.getGroupId() );
-            element( w, "artifactId", project.getArtifactId() );
+            element( w, "artifactId", pluginDescriptor.getArtifactId() );
-            element( w, "goalPrefix", goalPrefix );
+            element( w, "goalPrefix", pluginDescriptor.getGoalPrefix() );
-            for ( Iterator it = mavenMojoDescriptors.iterator(); it.hasNext(); )
+            for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
-                processPluginDescriptor( descriptor, w, project );
+                processMojoDescriptor( descriptor, w );
-            PluginUtils.writeDependencies( w, project );
+            PluginUtils.writeDependencies( w, pluginDescriptor );
-    protected void processPluginDescriptor( MojoDescriptor mojoDescriptor, XMLWriter w, MavenProject project )
+    protected void processMojoDescriptor( MojoDescriptor mojoDescriptor, XMLWriter w )
-        Map configuration = new HashMap( parameters.size() );
-        for ( int j = 0; j < parameters.size(); j++ )
+        
+        Map configuration = new HashMap();
+        
+        if( parameters != null )
-            Parameter parameter = (Parameter) parameters.get( j );
-
-            String expression = parameter.getExpression();
-
-            if ( StringUtils.isNotEmpty( expression ) && expression.startsWith( "${component." ) )
+            for ( int j = 0; j < parameters.size(); j++ )
-                // treat it as a component...a requirement, in other words.
+                Parameter parameter = (Parameter) parameters.get( j );
-                requirements.add( parameter );
+                String expression = parameter.getExpression();
+
+                if ( StringUtils.isNotEmpty( expression ) && expression.startsWith( "${component." ) )
+                {
+                    // treat it as a component...a requirement, in other words.
+
+                    requirements.add( parameter );
+                }
+                else
+                {
+                    // treat it as a normal parameter.
+
+                    w.startElement( "parameter" );
+
+                    element( w, "name", parameter.getName() );
+
+                    if ( parameter.getAlias() != null )
+                    {
+                        element( w, "alias", parameter.getAlias() );
+                    }
+
+                    element( w, "type", parameter.getType() );
+
+                    if ( parameter.getDeprecated() != null )
+                    {
+                        element( w, "deprecated", parameter.getDeprecated() );
+                    }
+
+                    // TODO: do we still need this?
+                    element( w, "validator", parameter.getValidator() );
+
+                    element( w, "required", Boolean.toString( parameter.isRequired() ) );
+
+                    element( w, "editable", Boolean.toString( parameter.isEditable() ) );
+
+                    element( w, "description", parameter.getDescription() );
+
+                    if ( expression != null && expression.length() > 0 )
+                    {
+                        configuration.put( parameter, expression );
+                    }
+
+                    w.endElement();
+                }
+
-            else
-            {
-                // treat it as a normal parameter.
-
-                w.startElement( "parameter" );
-
-                element( w, "name", parameter.getName() );
-
-                if ( parameter.getAlias() != null )
-                {
-                    element( w, "alias", parameter.getAlias() );
-                }
-
-                element( w, "type", parameter.getType() );
-
-                if ( parameter.getDeprecated() != null )
-                {
-                    element( w, "deprecated", parameter.getDeprecated() );
-                }
-
-                // TODO: do we still need this?
-                element( w, "validator", parameter.getValidator() );
-
-                element( w, "required", Boolean.toString( parameter.isRequired() ) );
-
-                element( w, "editable", Boolean.toString( parameter.isEditable() ) );
-
-                element( w, "description", parameter.getDescription() );
-
-                if ( expression != null && expression.length() > 0 )
-                {
-                    configuration.put( parameter, expression );
-                }
-
-                w.endElement();
-            }
-
