o delegating local repository implementation that chains the reactor and user local repository
o removal of more state from the WagonManager and pushing it into the request in an attempt to bridge the way for Mercury



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773456 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.logging.LogEnabled;
- * Default implementation of the artifact collector.
- *
- * @version $Id$
- * @todo This needs to collect all errors and not die on the first error. If there are problems retrieving the metadata
- *       then we need all the information so that we can tell users about what we attempted to do.
- * @todo there 8 places where we can can range exceptions which is bad, again the result of not using a graph.
-    implements ArtifactCollector, LogEnabled
+    implements ArtifactCollector
-    /**
-     * The conflict resolver to use when none is specified.
-     */
+	@Requirement
-    public ArtifactResolutionResult collect( Set<Artifact> artifacts, Artifact originatingArtifact,
+    public ArtifactResolutionResult collect( Set<Artifact> artifacts, 
+                                             Artifact originatingArtifact,
+                                             Map managedVersions, 
-                                             ArtifactMetadataSource source, ArtifactFilter filter,
-                                             List<ResolutionListener> listeners )
-    {
-        return collect( artifacts, originatingArtifact, Collections.EMPTY_MAP, localRepository, remoteRepositories,
-                        source, filter, listeners );
-    }
-
-    public ArtifactResolutionResult collect( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                             Map managedVersions, ArtifactRepository localRepository,
-                                             List<ArtifactRepository> remoteRepositories,
-                                             ArtifactMetadataSource source, ArtifactFilter filter,
-                                             List<ResolutionListener> listeners )
-    {
-        return collect( artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source,
-                        filter, listeners, null );
-    }
-
-    public ArtifactResolutionResult collect( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                             Map managedVersions, ArtifactRepository localRepository,
-                                             List<ArtifactRepository> remoteRepositories,
-                                             ArtifactMetadataSource source, ArtifactFilter filter,
+                                             ArtifactMetadataSource source, 
+                                             ArtifactFilter filter,
-            // TODO: warn that we're using the default conflict resolver
-
-            recurse( result, root, resolvedArtifacts, versionMap, localRepository, remoteRepositories, source, filter,
-                     listeners, conflictResolvers );
+            recurse( result, root, resolvedArtifacts, versionMap, localRepository, remoteRepositories, source, filter, listeners, conflictResolvers );
-    private void recurse( ArtifactResolutionResult result, ResolutionNode node,
-                          Map<Object, List<ResolutionNode>> resolvedArtifacts, ManagedVersionMap managedVersions,
-                          ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-                          ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners,
+    private void recurse( ArtifactResolutionResult result, 
+                          ResolutionNode node,
+                          Map<Object, List<ResolutionNode>> resolvedArtifacts, 
+                          ManagedVersionMap managedVersions,
+                          ArtifactRepository localRepository, 
+                          List<ArtifactRepository> remoteRepositories,
+                          ArtifactMetadataSource source, 
+                          ArtifactFilter filter, 
+                          List<ResolutionListener> listeners,
-                                            versions =
-                                                source.retrieveAvailableVersions( resetArtifact, localRepository,
-                                                                                  remoteRepositories );
+                                            versions = source.retrieveAvailableVersions( resetArtifact, localRepository, remoteRepositories );
-                                            throw new ArtifactResolutionException(
-                                                                                   "Unable to get dependency information: "
-                                                                                       + e.getMessage(), resetArtifact,
-                                                                                   remoteRepositories, e );
+                                            throw new ArtifactResolutionException( "Unable to get dependency information: " + e.getMessage(), resetArtifact, remoteRepositories, e );
-                                    ArtifactVersion selectedVersion =
-                                        resetArtifact.getVersionRange().matchVersion(
-                                                                                      resetArtifact.getAvailableVersions() );
+                                    ArtifactVersion selectedVersion = resetArtifact.getVersionRange().matchVersion( resetArtifact.getAvailableVersions() );
-                            result.addVersionRangeViolation( new ArtifactResolutionException(
-                                                                                              "Cannot resolve artifact version conflict between "
-                                                                                                  + previous.getArtifact().getVersion()
-                                                                                                  + " and "
-                                                                                                  + node.getArtifact().getVersion(),
-                                                                                              previous.getArtifact() ) );
+                            ArtifactResolutionException are = new ArtifactResolutionException( "Cannot resolve artifact version conflict between " + previous.getArtifact().getVersion()
+                                                                                              + " and " + node.getArtifact().getVersion(), previous.getArtifact() ); 
+                            result.addVersionRangeViolation( are );
-                            result.addVersionRangeViolation( new ArtifactResolutionException(
-                                                                                              "Conflict resolver returned unknown resolution node: ",
-                                                                                              resolved.getArtifact() ) );
+                            result.addVersionRangeViolation( new ArtifactResolutionException( "Conflict resolver returned unknown resolution node: ", resolved.getArtifact() ) );
-    private void manageArtifact( ResolutionNode node, ManagedVersionMap managedVersions,
-                                 List<ResolutionListener> listeners )
+    private void manageArtifact( ResolutionNode node, ManagedVersionMap managedVersions, List<ResolutionListener> listeners )
-
-    public void enableLogging( Logger logger )
-    {
-        this.logger = logger;
-    }
