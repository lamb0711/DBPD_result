o Removed static processor context and move its remaining bits into the project builder

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@778441 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-import org.apache.maven.model.ProcessorContext;
+import org.apache.maven.model.inheritance.InheritanceAssembler;
+import org.apache.maven.model.management.ManagementInjector;
+import org.apache.maven.model.profile.ProfileInjector;
+    private InheritanceAssembler inheritanceAssembler;
+
+    @Requirement
+    private ProfileInjector profileInjector;
+
+    @Requirement
+    private ManagementInjector managementInjector;
+
+    @Requirement
-            List<Profile> externalProfiles = new ArrayList<Profile>();
-                    logger.debug( "Merging profile into model (build): Model = " + domainModel.getId() + ", Profile = " + p.getId() );
-                    externalProfiles.add( p );
+                    logger.debug( "Merging profile into model (build): Model = " + domainModel.getId() + ", Profile = "
+                        + p.getId() );
+                    profileInjector.injectProfile( domainModel.getModel(), p );
-
-            domainModel = ProcessorContext.mergeProfilesIntoModel( externalProfiles, domainModel );
-            ProcessorContext.processManagementNodes( model );
+            managementInjector.injectManagement( model );
+                        profileInjector.injectProfile( dm.getModel(), p );
-                    profileModels.add( ProcessorContext.mergeProfilesIntoModel( profiles, dm ) );
-                }
-                else
-                {
-                    profileModels.add( dm );
-            else
-            {
-                profileModels.add( dm );
-            }
+            profileModels.add( dm );
-        DomainModel transformedDomainModel = ProcessorContext.build( profileModels, listeners );
+        DomainModel transformedDomainModel = build( profileModels, listeners );
+    /**
+     * Parent domain models on bottom.
+     * 
+     * @param domainModels
+     * @param listeners
+     * @return
+     * @throws IOException
+     */
+    private DomainModel build( List<DomainModel> domainModels, List<ModelEventListener> listeners )
+        throws IOException
+    {
+        DomainModel child = null;
+        for ( DomainModel domainModel : domainModels )
+        {
+            if ( domainModel.isMostSpecialized() )
+            {
+                child = domainModel;
+            }
+        }
+        if ( child == null )
+        {
+            throw new IOException( "Could not find child model" );
+        }
+
+        Model target = processModelsForInheritance( convertDomainModelsToMavenModels( domainModels ) );
+        if ( listeners != null )
+        {
+            for ( ModelEventListener listener : listeners )
+            {
+                listener.fire( target );
+            }
+        }
+        DomainModel domainModel = new DomainModel( target, child.isMostSpecialized() );
+        domainModel.setProjectDirectory( child.getProjectDirectory() );
+        domainModel.setParentFile( child.getParentFile() );
+
+        return domainModel;
+    }
+
+    private List<Model> convertDomainModelsToMavenModels( List<DomainModel> domainModels )
+        throws IOException
+    {
+        List<Model> models = new ArrayList<Model>();
+        for ( DomainModel domainModel : domainModels )
+        {
+            DomainModel dm = domainModel;
+            if ( dm.getModel() != null )
+            {
+                if ( dm.isMostSpecialized() )
+                {
+                    models.add( 0, dm.getModel() );
+                }
+                else
+                {
+                    models.add( dm.getModel() );
+                }
+
+            }
+            else
+            {
+                throw new IOException( "model: null" );
+            }
+
+        }
+
+        return models;
+    }
+
+    private Model processModelsForInheritance( List<Model> models )
+    {
+        Collections.reverse( models );
+
+        Model previousModel = null;
+
+        for ( Model currentModel : models )
+        {
+            inheritanceAssembler.assembleModelInheritance( currentModel, previousModel );
+            previousModel = currentModel;
+        }
+
+        return previousModel;
+    }
+
