MNG-5753: Allow plugin implementors to choose how they want the configuration created for a particular MojoExecution

+import org.apache.maven.lifecycle.MojoExecutionConfigurator;
-import org.apache.maven.model.Plugin;
-import org.apache.maven.model.PluginExecution;
+import com.google.common.collect.ImmutableMap;
+
+    @Requirement
+    private Map<String, MojoExecutionConfigurator> mojoExecutionConfigurators;
+
+    // Only used for testing
+        this.mojoExecutionConfigurators =
+            ImmutableMap.of( "default", (MojoExecutionConfigurator) new DefaultMojoExecutionConfigurator() );
-    public MavenExecutionPlan calculateExecutionPlan( MavenSession session, MavenProject project, List<Object> tasks, boolean setup )
+    @Override
+    public MavenExecutionPlan calculateExecutionPlan( MavenSession session, MavenProject project, List<Object> tasks,
+                                                      boolean setup )
+    @Override
+    @Override
-                                                 project.getRemotePluginRepositories(),
-                                                 session.getRepositorySession() );
+                                                 project.getRemotePluginRepositories(), session.getRepositorySession() );
-        populateMojoExecutionConfiguration( project, mojoExecution,
-                                            MojoExecution.Source.CLI.equals( mojoExecution.getSource() ) );
+        mojoExecutionConfigurator( mojoExecution ).configure( project,
+                                                              mojoExecution,
+                                                              MojoExecution.Source.CLI.equals( mojoExecution.getSource() ) );
-    public List<MojoExecution> calculateMojoExecutions( MavenSession session, MavenProject project,
-                                                         List<Object> tasks )
+    public List<MojoExecution> calculateMojoExecutions( MavenSession session, MavenProject project, List<Object> tasks )
-    private void populateMojoExecutionConfiguration( MavenProject project, MojoExecution mojoExecution,
-                                                     boolean allowPluginLevelConfig )
-    {
-        String g = mojoExecution.getGroupId();
-
-        String a = mojoExecution.getArtifactId();
-
-        Plugin plugin = findPlugin( g, a, project.getBuildPlugins() );
-
-        if ( plugin == null && project.getPluginManagement() != null )
-        {
-            plugin = findPlugin( g, a, project.getPluginManagement().getPlugins() );
-        }
-
-        if ( plugin != null )
-        {
-            PluginExecution pluginExecution =
-                findPluginExecution( mojoExecution.getExecutionId(), plugin.getExecutions() );
-
-            Xpp3Dom pomConfiguration = null;
-
-            if ( pluginExecution != null )
-            {
-                pomConfiguration = (Xpp3Dom) pluginExecution.getConfiguration();
-            }
-            else if ( allowPluginLevelConfig )
-            {
-                pomConfiguration = (Xpp3Dom) plugin.getConfiguration();
-            }
-
-            Xpp3Dom mojoConfiguration = ( pomConfiguration != null ) ? new Xpp3Dom( pomConfiguration ) : null;
-
-            mojoConfiguration = Xpp3Dom.mergeXpp3Dom( mojoExecution.getConfiguration(), mojoConfiguration );
-
-            mojoExecution.setConfiguration( mojoConfiguration );
-        }
-    }
-
-    private Plugin findPlugin( String groupId, String artifactId, Collection<Plugin> plugins )
-    {
-        for ( Plugin plugin : plugins )
-        {
-            if ( artifactId.equals( plugin.getArtifactId() ) && groupId.equals( plugin.getGroupId() ) )
-            {
-                return plugin;
-            }
-        }
-
-        return null;
-    }
-
-    private PluginExecution findPluginExecution( String executionId, Collection<PluginExecution> executions )
-    {
-        if ( StringUtils.isNotEmpty( executionId ) )
-        {
-            for ( PluginExecution execution : executions )
-            {
-                if ( executionId.equals( execution.getId() ) )
-                {
-                    return execution;
-                }
-            }
-        }
-
-        return null;
-    }
-
-                parameterConfiguration =
-                    Xpp3Dom.mergeXpp3Dom( parameterConfiguration, parameterDefaults, Boolean.TRUE );
+                parameterConfiguration = Xpp3Dom.mergeXpp3Dom( parameterConfiguration, parameterDefaults, Boolean.TRUE );
+    @Override
-                forkedExecutions =
-                    calculateForkedGoal( mojoExecution, session, forkedProject, alreadyForkedExecutions );
+                forkedExecutions = calculateForkedGoal( mojoExecution, session, forkedProject, alreadyForkedExecutions );
-        Map<String, List<MojoExecution>> lifecycleMappings =
-            calculateLifecycleMappings( session, project, forkedPhase );
+        Map<String, List<MojoExecution>> lifecycleMappings = calculateLifecycleMappings( session, project, forkedPhase );
-                populateMojoExecutionConfiguration( project, forkedExecution, false );
+                mojoExecutionConfigurator( forkedExecution ).configure( project, forkedExecution, false );
-                        populateMojoExecutionConfiguration( project, forkedExecution, true );
+                        mojoExecutionConfigurator( forkedExecution ).configure( project, forkedExecution, true );
+
-    //TODO: take repo mans into account as one may be aggregating prefixes of many
-    //TODO: collect at the root of the repository, read the one at the root, and fetch remote if something is missing
-    //      or the user forces the issue
+    // TODO: take repo mans into account as one may be aggregating prefixes of many
+    // TODO: collect at the root of the repository, read the one at the root, and fetch remote if something is missing
+    // or the user forces the issue
-        populateMojoExecutionConfiguration( project, forkedExecution, true );
+        mojoExecutionConfigurator( forkedExecution ).configure( project, forkedExecution, true );
+    private MojoExecutionConfigurator mojoExecutionConfigurator( MojoExecution mojoExecution )
+    {
+        String configuratorId = mojoExecution.getMojoDescriptor().getComponentConfigurator();
+        if ( configuratorId == null )
+        {
+            configuratorId = "default";
+        }
+        MojoExecutionConfigurator mojoExecutionConfigurator = mojoExecutionConfigurators.get( configuratorId );
+
+        if ( mojoExecutionConfigurator == null )
+        {
+            //
+            // The plugin has a custom component configurator but does not have a custom mojo execution configurator
+            // so fall back to the default mojo execution configurator.
+            //
+            mojoExecutionConfigurator = mojoExecutionConfigurators.get( "default" );
+        }
+        return mojoExecutionConfigurator;
+    }
