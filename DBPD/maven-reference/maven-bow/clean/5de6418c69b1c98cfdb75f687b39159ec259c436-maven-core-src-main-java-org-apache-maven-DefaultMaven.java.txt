PR: MNG-122
exception clean up phase 1

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@320668 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.reactor.ReactorException;
+import org.apache.maven.reactor.MavenExecutionException;
-    
+
-        throws ReactorException, SettingsConfigurationException
+        throws SettingsConfigurationException, MavenExecutionException
-                throw new ReactorException( "Cannot retrieve WagonManager in order to set offline mode.", e );
+                throw new MavenExecutionException( "Cannot retrieve WagonManager in order to set offline mode.", e );
-            throw new ReactorException( "Unable to configure Maven for execution", e );
+            throw new MavenExecutionException( "Unable to configure Maven for execution", e );
-            throw new ReactorException( "Unable to configure Maven for execution", e );
+            throw new MavenExecutionException( "Unable to configure Maven for execution", e );
-            throw new ReactorException( "Error processing projects for the reactor: ", e );
+            throw new MavenExecutionException( "Error processing projects for the reactor: ", e );
+        MavenSession session = createSession( request, rm );
+
+        session.setUsingPOMsFromFilesystem( foundProjects );
+
-            MavenSession session = createSession( request, rm );
+            MavenExecutionResponse response = lifecycleExecutor.execute( session, rm, dispatcher );
-            session.setUsingPOMsFromFilesystem( foundProjects );
-
-            try
+            // TODO: is this perhaps more appropriate in the CLI?
+            if ( response.isExecutionFailure() )
-                MavenExecutionResponse response = lifecycleExecutor.execute( session, rm, dispatcher );
+                dispatcher.dispatchError( event, request.getBaseDirectory(), response.getException() );
-                // TODO: is this perhaps more appropriate in the CLI?
-                if ( response.isExecutionFailure() )
+                // TODO: yuck! Revisit when cleaning up the exception handling from the top down
+                Throwable exception = response.getException();
+
+                // TODO: replace all handling by buildfailureexception/mavenexecutionexception or lifecycleexecutionexception
+                if ( exception instanceof BuildFailureException )
-                    dispatcher.dispatchError( event, request.getBaseDirectory(), response.getException() );
+                    logFailure( response, rm, exception, null );
+                }
+                else if ( exception instanceof MojoFailureException )
+                {
+                    MojoFailureException e = (MojoFailureException) exception;
-                    // TODO: yuck! Revisit when cleaning up the exception handling from the top down
-                    Throwable exception = response.getException();
-
-                    if ( ReactorManager.FAIL_AT_END.equals( rm.getFailureBehavior() ) &&
-                        exception instanceof ReactorException )
+                    logFailure( response, rm, e, e.getLongMessage() );
+                }
+                else if ( exception instanceof MojoExecutionException )
+                {
+                    // TODO: replace by above
+                    if ( exception.getCause() == null )
-                        logFailure( response, rm, exception, null );
-                    }
-                    else if ( exception instanceof MojoFailureException )
-                    {
-                        MojoFailureException e = (MojoFailureException) exception;
+                        MojoExecutionException e = (MojoExecutionException) exception;
-                    else if ( exception instanceof MojoExecutionException )
-                    {
-                        // TODO: replace by above
-                        if ( exception.getCause() == null )
-                        {
-                            MojoExecutionException e = (MojoExecutionException) exception;
-
-                            logFailure( response, rm, e, e.getLongMessage() );
-                        }
-                        else
-                        {
-                            // TODO: throw exceptions like this, so "failures" are just that
-                            logError( response );
-                        }
-                    }
-                    else if ( exception instanceof ArtifactNotFoundException )
-                    {
-                        logFailure( response, rm, exception, null );
-                    }
-                        // TODO: this should be a "FATAL" exception, reported to the
-                        // developers - however currently a LOT of
-                        // "user" errors fall through the cracks (like invalid POMs, as
-                        // one example)
+                        // TODO: throw exceptions like this, so "failures" are just that
-
-                    return response;
+                }
+                else if ( exception instanceof ArtifactNotFoundException )
+                {
+                    logFailure( response, rm, exception, null );
-                    logSuccess( response, rm );
+                    // TODO: this should be a "FATAL" exception, reported to the
+                    // developers - however currently a LOT of
+                    // "user" errors fall through the cracks (like invalid POMs, as
+                    // one example)
+                    logError( response );
-            catch ( LifecycleExecutionException e )
+            else
-                logFatal( e );
-
-                throw new ReactorException( "Error executing project within the reactor", e );
+                logSuccess( response, rm );
-            // TODO: not really satisfactory
-            return null;
+            return response;
-        catch ( ReactorException e )
+        catch ( LifecycleExecutionException e )
+            logFatal( e );
+
-            throw e;
+            throw new MavenExecutionException( "Error executing project within the reactor", e );
-        throws ProjectBuildingException, ReactorException, IOException, ArtifactResolutionException,
-        ProfileActivationException
+        throws ArtifactResolutionException, ProjectBuildingException, ProfileActivationException,
+        MavenExecutionException
-                if ( runtimeInformation.getApplicationVersion().compareTo( version ) < 0 )
+                try
-                    throw new ProjectBuildingException( project.getId(), "Unable to build project '" + project.getFile() +
-                        "; it requires Maven version " + version.toString() );
+                    if ( runtimeInformation.getApplicationVersion().compareTo( version ) < 0 )
+                    {
+                        throw new ProjectBuildingException( project.getId(), "Unable to build project '" +
+                            project.getFile() + "; it requires Maven version " + version.toString() );
+                    }
+                }
+                catch ( IOException e )
+                {
+                    throw new MavenExecutionException( "Unable to get Maven application version", e );
-                List collectedProjects = collectProjects( moduleFiles, localRepository, recursive, settings,
-                                                          globalProfileManager, false );
+                List collectedProjects =
+                    collectProjects( moduleFiles, localRepository, recursive, settings, globalProfileManager, false );
-                throw new ProjectBuildingException(
-                    "unknown", "The file " + pom.getAbsolutePath() + " you specified has zero length." );
+                throw new ProjectBuildingException( "unknown", "The file " + pom.getAbsolutePath() +
+                    " you specified has zero length." );
