fixed errors reported by Checkstyle

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@813604 13f79535-47bb-0310-9956-ffa450edef68

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
- * 
+ *
-	public static int DEFAULT_VERTICES = 32;
-	public static int DEFAULT_EDGES    = 64;
-	
-	// flags to indicate the granularity of vertices
-	private boolean versionedVertices = false;
-	private boolean scopedVertices    = false;
-	/**
-	 * the entry point we started building the graph from
-	 */
-    MetadataGraphVertex entry;
-    
-    // graph vertices
-    TreeSet< MetadataGraphVertex >  vertices;
+    public static final int DEFAULT_VERTICES = 32;
+    public static final int DEFAULT_EDGES    = 64;
-    /** 
+    // flags to indicate the granularity of vertices
+    private boolean versionedVertices = false;
+    private boolean scopedVertices    = false;
+    /**
+    * the entry point we started building the graph from
+    */
+    MetadataGraphVertex entry;
+
+    // graph vertices
+    TreeSet<MetadataGraphVertex> vertices;
+
+    /**
-    
+
-     *  null in dirty graph, actual 
+     *  null in dirty graph, actual
-    	init( nVertices, 2*nVertices );
+        init( nVertices, 2 * nVertices );
-    	init( nVertices, nEdges );
+        init( nVertices, nEdges );
-    	checkVertex(entry);
-    	checkVertices(1);
+        checkVertex( entry );
+        checkVertices( 1 );
-    	entry.setCompareVersion( versionedVertices );
-    	entry.setCompareScope( scopedVertices );
+        entry.setCompareVersion( versionedVertices );
+        entry.setCompareScope( scopedVertices );
-    	vertices.add( entry );
-    	this.entry = entry;
+        vertices.add( entry );
+        this.entry = entry;
-    	this( tree, false, false );
+        this( tree, false, false );
-     * 
+     *
-     * 
+     *
-        setVersionedVertices(versionedVertices);
-        setScopedVertices(scopedVertices);
-        
+        setVersionedVertices( versionedVertices );
+        setScopedVertices( scopedVertices );
+
-        
+
-    						)
+                            )
-        if( ! vertices.contains(vertex) )
+        if ( !vertices.contains( vertex ) )
-        	vertices.add(vertex);
+            vertices.add( vertex );
-        if( parentVertex != null ) // then create the edge
-        { 
+        if ( parentVertex != null ) // then create the edge
+        {
-            addEdge( parentVertex, vertex, e);
+            addEdge( parentVertex, vertex, e );
-        	entry = vertex;
+            entry = vertex;
-        for( int i = 0; i< kids.length; i++ )
+        for ( int i = 0; i < kids.length; i++ )
-        	MetadataTreeNode n = kids[i];
+            MetadataTreeNode n = kids[i];
-    	if( md == null || vertices == null || vertices.size() < 1 )
-    		return null;
-    	
-    	MetadataGraphVertex v = new MetadataGraphVertex(md);
-    	v.setCompareVersion(versionedVertices);
-    	v.setCompareScope(scopedVertices);
+        if ( md == null || vertices == null || vertices.size() < 1 )
+        {
+            return null;
+        }
-    	for( MetadataGraphVertex gv : vertices  )
-    	{
-    		if( gv.equals(v) )
-    			return gv;
-    	}
-    	
-    	return null;
+        MetadataGraphVertex v = new MetadataGraphVertex( md );
+        v.setCompareVersion( versionedVertices );
+        v.setCompareScope( scopedVertices );
+
+        for ( MetadataGraphVertex gv : vertices )
+        {
+            if ( gv.equals( v ) )
+            {
+                return gv;
+            }
+        }
+
+        return null;
-    	if( md == null )
-    		return null;
-   
-    	checkVertices();
-    	
-    	MetadataGraphVertex v = findVertex(md);
-    	if( v != null)
-    		return v;
-    	
-    	v = new MetadataGraphVertex(md);
-    	
-    	v.setCompareVersion(versionedVertices);
-    	v.setCompareScope(scopedVertices);
+        if ( md == null )
+        {
+            return null;
+        }
-    	vertices.add( v );
-    	return v;
+        checkVertices();
+
+        MetadataGraphVertex v = findVertex( md );
+        if ( v != null )
+        {
+            return v;
+        }
+
+        v = new MetadataGraphVertex( md );
+
+        v.setCompareVersion( versionedVertices );
+        v.setCompareScope( scopedVertices );
+
+        vertices.add( v );
+        return v;
-    	int nV = nVertices;
-    	if( nVertices < 1 )
-    		nV = 1;
- 
-    	checkVertices(nV);
+        int nV = nVertices;
+        if ( nVertices < 1 )
+        {
+            nV = 1;
+        }
-    	int nE = nVertices;
-    	if( nEdges <= nV )
-    		nE = 2*nE;
- 
-    	checkEdges(nE);
+        checkVertices( nV );
+
+        int nE = nVertices;
+        if ( nEdges <= nV )
+        {
+            nE = 2 * nE;
+        }
+
+        checkEdges( nE );
-    	checkVertices(DEFAULT_VERTICES);
+        checkVertices( DEFAULT_VERTICES );
-    	if( vertices == null )
-    		vertices = new TreeSet<MetadataGraphVertex>();
+        if ( vertices == null )
+        {
+            vertices = new TreeSet<MetadataGraphVertex>();
+        }
-    	int count = DEFAULT_EDGES;
-    	
-    	if( vertices != null )
-    		count = vertices.size() + vertices.size() / 2;
+        int count = DEFAULT_EDGES;
-    	checkEdges( count );
+        if ( vertices != null )
+        {
+            count = vertices.size() + vertices.size() / 2;
+        }
+
+        checkEdges( count );
-    	if( incidentEdges == null )
-    		incidentEdges = new HashMap<MetadataGraphVertex, List<MetadataGraphEdge>>( nEdges );
-    	if( excidentEdges == null )
-    		excidentEdges = new HashMap<MetadataGraphVertex, List<MetadataGraphEdge>>( nEdges );
+        if ( incidentEdges == null )
+        {
+            incidentEdges = new HashMap<MetadataGraphVertex, List<MetadataGraphEdge>>( nEdges );
+        }
+        if ( excidentEdges == null )
+        {
+            excidentEdges = new HashMap<MetadataGraphVertex, List<MetadataGraphEdge>>( nEdges );
+        }
-    	if( v == null )
-    		throw new MetadataResolutionException( "null vertex" );
-    	if( v.getMd() == null )
-    		throw new MetadataResolutionException( "vertex without metadata" );
+        if ( v == null )
+        {
+            throw new MetadataResolutionException( "null vertex" );
+        }
+        if ( v.getMd() == null )
+        {
+            throw new MetadataResolutionException( "vertex without metadata" );
+        }
-    	if( e == null )
-    		throw new MetadataResolutionException( "badly formed edge" );
+        if ( e == null )
+        {
+            throw new MetadataResolutionException( "badly formed edge" );
+        }
-    public List<MetadataGraphEdge> getEdgesBetween(
-    							  MetadataGraphVertex vFrom
-    							, MetadataGraphVertex vTo
-    							)
+    public List<MetadataGraphEdge> getEdgesBetween( MetadataGraphVertex vFrom, MetadataGraphVertex vTo )
-    	List<MetadataGraphEdge> edges = getIncidentEdges(vTo);
-    	if( edges == null || edges.isEmpty() )
-    		return null;
-    	
-    	List<MetadataGraphEdge> res = new ArrayList<MetadataGraphEdge>( edges.size() );
-    	
-    	for( MetadataGraphEdge e : edges )
-    	{
-    		if( e.getSource().equals(vFrom) )
-    			res.add(e);
-    	}
-    	
-    	return res;
+        List<MetadataGraphEdge> edges = getIncidentEdges(vTo);
+        if ( edges == null || edges.isEmpty() )
+        {
+            return null;
+        }
+
+        List<MetadataGraphEdge> res = new ArrayList<MetadataGraphEdge>( edges.size() );
+
+        for ( MetadataGraphEdge e : edges )
+        {
+            if ( e.getSource().equals( vFrom ) )
+            {
+                res.add( e );
+            }
+        }
+
+        return res;
-    public MetadataGraph addEdge( MetadataGraphVertex vFrom
-    							, MetadataGraphVertex vTo
-    							, MetadataGraphEdge e
-    							)
+    public MetadataGraph addEdge( MetadataGraphVertex vFrom, MetadataGraphVertex vTo, MetadataGraphEdge e )
-    	checkVertex(vFrom);
-    	checkVertex(vTo);
+        checkVertex( vFrom );
+        checkVertex( vTo );
-    	checkVertices();
-    	
-    	checkEdge(e);
-    	checkEdges();
-    	
-    	e.setSource(vFrom);
-    	e.setTarget(vTo);
+        checkVertices();
-    	vFrom.setCompareVersion(versionedVertices);
-    	vFrom.setCompareScope(scopedVertices);
-    	
-    	List<MetadataGraphEdge> exList = excidentEdges.get(vFrom);
-    	if( exList == null ) {
-    		exList = new ArrayList<MetadataGraphEdge>();
-    		excidentEdges.put( vFrom, exList );
-    	}
-    	
-    	if( !exList.contains(e) )
-    		exList.add(e);
-    	
-    	List<MetadataGraphEdge> inList = incidentEdges.get(vTo);
-    	if( inList == null ) {
-    		inList = new ArrayList<MetadataGraphEdge>();
-    		incidentEdges.put( vTo, inList );
-    	}
-    	
-    	if( !inList.contains(e) )
-    		inList.add(e);
-    	
-    	return this;
+        checkEdge( e );
+        checkEdges();
+
+        e.setSource( vFrom );
+        e.setTarget( vTo );
+
+        vFrom.setCompareVersion( versionedVertices );
+        vFrom.setCompareScope( scopedVertices );
+
+        List<MetadataGraphEdge> exList = excidentEdges.get( vFrom );
+        if ( exList == null )
+        {
+            exList = new ArrayList<MetadataGraphEdge>();
+            excidentEdges.put( vFrom, exList );
+        }
+
+        if ( !exList.contains( e ) )
+        {
+            exList.add( e );
+        }
+
+        List<MetadataGraphEdge> inList = incidentEdges.get( vTo );
+        if ( inList == null )
+        {
+            inList = new ArrayList<MetadataGraphEdge>();
+            incidentEdges.put( vTo, inList );
+        }
+
+        if ( !inList.contains( e ) )
+        {
+            inList.add( e );
+        }
+
+        return this;
-    	if( vertices!= null && v != null )
-    		vertices.remove(v);
-    	
-    	if( incidentEdges!= null )
-    		incidentEdges.remove(v);
-    	
-    	if( excidentEdges!= null )
-    		excidentEdges.remove(v);
+        if ( vertices != null && v != null )
+        {
+            vertices.remove( v );
+        }
-    	return this;
-    		
+        if ( incidentEdges != null )
+        {
+            incidentEdges.remove( v );
+        }
+
+        if ( excidentEdges != null )
+        {
+            excidentEdges.remove( v );
+        }
+
+        return this;
+
-    
-	public List<MetadataGraphEdge> getIncidentEdges( MetadataGraphVertex vertex )
-	{
-		checkEdges();
-		return incidentEdges.get(vertex);
-	}
-    
-	public List<MetadataGraphEdge> getExcidentEdges( MetadataGraphVertex vertex )
-	{
-		checkEdges();
-		return excidentEdges.get(vertex);
-	}
-    
-    public boolean isVersionedVertices()
-	{
-		return versionedVertices;
-	}
-	public void setVersionedVertices(boolean versionedVertices)
-	{
-		this.versionedVertices = versionedVertices;
-	}
-	public boolean isScopedVertices()
-	{
-		return scopedVertices;
-	}
-	public void setScopedVertices(boolean scopedVertices)
-	{
-		this.scopedVertices = scopedVertices;
-		// scoped graph is versioned by definition
-		if( scopedVertices )
-			versionedVertices = true;
-	}
-	public ArtifactScopeEnum getScope()
-	{
-		return scope;
-	}
-	public void setScope(ArtifactScopeEnum scope)
-	{
-		this.scope = scope;
-	}
+    public List<MetadataGraphEdge> getIncidentEdges( MetadataGraphVertex vertex )
+    {
+        checkEdges();
+        return incidentEdges.get( vertex );
+    }
+
+    public List<MetadataGraphEdge> getExcidentEdges( MetadataGraphVertex vertex )
+    {
+        checkEdges();
+        return excidentEdges.get( vertex );
+    }
+
+    public boolean isVersionedVertices()
+    {
+        return versionedVertices;
+    }
+
+    public void setVersionedVertices( boolean versionedVertices )
+    {
+        this.versionedVertices = versionedVertices;
+    }
+
+    public boolean isScopedVertices()
+    {
+        return scopedVertices;
+    }
+
+    public void setScopedVertices( boolean scopedVertices )
+    {
+        this.scopedVertices = scopedVertices;
+
+        // scoped graph is versioned by definition
+        if ( scopedVertices )
+        {
+            versionedVertices = true;
+        }
+    }
+
+    public ArtifactScopeEnum getScope()
+    {
+        return scope;
+    }
+
+    public void setScope( ArtifactScopeEnum scope )
+    {
+        this.scope = scope;
+    }
+
+    // ------------------------------------------------------------------------
+    public boolean isEmpty()
+    {
+        return entry == null || vertices == null || vertices.isEmpty();
+    }
+
-	public boolean isEmpty()
-	{
-		return
-			entry == null
-			|| vertices == null
-			|| vertices.isEmpty()
-		;
-	}
+    public boolean isEmptyEdges()
+    {
+        return isEmpty() || incidentEdges == null || incidentEdges.isEmpty();
+    }
-	public boolean isEmptyEdges()
-	{
-		return
-			   isEmpty()
-			|| incidentEdges == null
-			|| incidentEdges.isEmpty()
-		;
-	}
-    //------------------------------------------------------------------------
-	@Override
-	public String toString()
-	{
-		StringBuilder sb = new StringBuilder(512);
-		if( isEmpty() )
-			return "empty";
-		for( MetadataGraphVertex v : vertices )
-		{
-			sb.append("Vertex:  "+v.getMd().toString()+ "\n");
-			List<MetadataGraphEdge> ins = getIncidentEdges(v);
-			if( ins != null )
-				for( MetadataGraphEdge e : ins )
-				{
-					sb.append("       from :  "+e.toString()+"\n");
-				}
-			else
-				sb.append("      no entries\n");
-				
-			List<MetadataGraphEdge> outs = getExcidentEdges(v);
-			if( outs != null )
-				for( MetadataGraphEdge e : outs )
-				{
-					sb.append("        to :  "+e.toString()+ "\n");
-				}
-			else
-				sb.append("      no exit\n");
-				
-			sb.append("-------------------------------------------------\n");
-		}
-		sb.append("=============================================================\n");
-		return sb.toString();
-	}
-	
+    @Override
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder( 512 );
+        if ( isEmpty() )
+        {
+            return "empty";
+        }
+        for ( MetadataGraphVertex v : vertices )
+        {
+            sb.append( "Vertex:  " + v.getMd().toString() + "\n" );
+            List<MetadataGraphEdge> ins = getIncidentEdges( v );
+            if ( ins != null )
+            {
+                for ( MetadataGraphEdge e : ins )
+                {
+                    sb.append( "       from :  " + e.toString() + "\n" );
+                }
+            }
+            else
+            {
+                sb.append( "      no entries\n" );
+            }
+
+            List<MetadataGraphEdge> outs = getExcidentEdges( v );
+            if ( outs != null )
+            {
+                for ( MetadataGraphEdge e : outs )
+                {
+                    sb.append( "        to :  " + e.toString() + "\n" );
+                }
+            }
+            else
+            {
+                sb.append( "      no exit\n" );
+            }
+
+            sb.append( "-------------------------------------------------\n" );
+        }
+        sb.append( "=============================================================\n" );
+        return sb.toString();
+    }
+
