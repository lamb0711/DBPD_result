Final pass on cleaning up the mojo api...collapsed MavenPluginDescriptor and PluginDescriptor in the same way as MavenMojoDescriptor/MojoDescriptor had been; eliminated the need for plugin.descriptor.Dependency and MavenPluginDependency (using ComponentDependencies instead); adjusted the MojoExtractors (name?) to return Lists instead of Sets; added duplicate checking to a new addMojo(MojoDescriptor) method on PluginDescriptor, so we catch it on all sides; changed the Generators to use execute(outputDirectory, pluginDescriptor) rather than the myriad pluginDescriptor-derived values; added an IT for checking that the build for a plugin will fail if multiple mojos are detected with the same goal; and, added a special case to PluginDescriptor.getGoalPrefixFromArtifactId() to handle maven-plugin-plugin. That should be about it. I'm not sure that I've gotten the IT for that failure test added to svn yet, so that may follow.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168481 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.tools.plugin.extractor.AbstractScriptedMojoDescriptorExtractor;
-import org.codehaus.marmalade.launch.MarmaladeLauncher;
+import org.apache.maven.tools.plugin.extractor.AbstractScriptedMojoDescriptorExtractor;
+import org.codehaus.marmalade.launch.MarmaladeLauncher;
-import org.codehaus.marmalade.runtime.DefaultContext;
-import org.codehaus.marmalade.runtime.MarmaladeExecutionContext;
-import org.codehaus.marmalade.runtime.MarmaladeExecutionException;
-import java.util.HashSet;
+import java.util.ArrayList;
+import java.util.List;
-import java.util.TreeMap;
-    protected Set extractMojoDescriptors( Map sourceFilesKeyedByBasedir, PluginDescriptor pluginDescriptor )
+    protected List extractMojoDescriptors( Map sourceFilesKeyedByBasedir, PluginDescriptor pluginDescriptor )
-            Set descriptors = new HashSet();
+            List descriptors = new ArrayList();
-                    MarmaladeLauncher launcher = new MarmaladeLauncher().withInputFile( scriptFile );
-
-                    Logger logger = getLogger();
-
-                    if ( logger != null )
+                    try
-                        PlexusIntegratedLog log = new PlexusIntegratedLog();
+                        MarmaladeLauncher launcher = new MarmaladeLauncher().withInputFile( scriptFile );
-                        log.enableLogging( logger );
+                        Logger logger = getLogger();
-                        launcher = launcher.withLog( log );
+                        if ( logger != null )
+                        {
+                            PlexusIntegratedLog log = new PlexusIntegratedLog();
+
+                            log.enableLogging( logger );
+
+                            launcher = launcher.withLog( log );
+                        }
+
+                        MarmaladeScript script = launcher.getMarmaladeScript();
+
+                        MarmaladeTag rootTag = script.getRoot();
+                        if ( rootTag instanceof MojoTag )
+                        {
+                            launcher.withVariable( MarmaladeMojoExecutionDirectives.SCRIPT_BASEPATH_INVAR, basedir );
+                            launcher
+                                .withVariable( MarmaladeMojoExecutionDirectives.PLUGIN_DESCRIPTOR, pluginDescriptor );
+
+                            Map contextMap = launcher.run();
+
+                            MojoDescriptor descriptor = (MojoDescriptor) contextMap
+                                .get( MarmaladeMojoExecutionDirectives.METADATA_OUTVAR );
+
+                            descriptors.add( descriptor );
+                        }
+                        else
+                        {
+                            getLogger().debug(
+                                               "Found non-mojo marmalade script at: " + scriptFile
+                                                   + ".\nIts root tag is {element: "
+                                                   + rootTag.getTagInfo().getElement() + ", class: "
+                                                   + rootTag.getClass().getName() + "}" );
+                        }
-
-                    MarmaladeScript script = launcher.getMarmaladeScript();
-
-                    MarmaladeTag rootTag = script.getRoot();
-                    if ( rootTag instanceof MojoTag )
+                    catch ( IOException e )
-                        Map contextMap = new TreeMap();
-                        contextMap.put( MarmaladeMojoExecutionDirectives.SCRIPT_BASEPATH_INVAR, basedir );
-                        contextMap.put( MarmaladeMojoExecutionDirectives.PLUGIN_DESCRIPTOR, pluginDescriptor );
-
-                        MarmaladeExecutionContext context = new DefaultContext( contextMap );
-
-                        script.execute( context );
-
-                        contextMap = context.getExternalizedVariables();
-
-                        MojoDescriptor descriptor = (MojoDescriptor) contextMap
-                            .get( MarmaladeMojoExecutionDirectives.METADATA_OUTVAR );
-
-                        descriptors.add( descriptor );
+                        throw new PluginToolsException( "Error reading descriptor Marmalade mojo in: " + scriptFile, e );
-                    else
+                    catch ( MarmaladeLaunchException e )
-                        System.out.println( "This script is not a mojo. Its root tag is {element: "
-                            + rootTag.getTagInfo().getElement() + ", class: " + rootTag.getClass().getName() + "}" );
+                        throw new PluginToolsException( "Error extracting descriptor Marmalade mojo from: " + scriptFile, e );
-        catch ( IOException e )
-        {
-            throw new PluginToolsException( "Error reading Marmalade for extracting mojo descriptor", e );
-        }
-        catch ( MarmaladeExecutionException e )
-        {
-            throw new PluginToolsException( "Error executing Marmalade for extracting mojo descriptor", e );
-        }
-        catch ( MarmaladeLaunchException e )
-        {
-            throw new PluginToolsException( "Error executing Marmalade for extracting mojo descriptor", e );
-        }
