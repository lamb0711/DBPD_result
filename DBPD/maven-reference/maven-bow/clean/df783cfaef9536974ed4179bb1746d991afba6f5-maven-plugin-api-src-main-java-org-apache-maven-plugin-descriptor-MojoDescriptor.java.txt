o merged from r631837 (added more javadoc)

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@631838 13f79535-47bb-0310-9956-ffa450edef68

- * The bean containing the mojo descriptor.
+ * The bean containing the Mojo descriptor.
+ * <br/>
+ * For more information about the usage tag, have a look to:
+ * <a href="http://maven.apache.org/developers/mojo-api-specification.html">http://maven.apache.org/developers/mojo-api-specification.html</a>
- * @todo is there a need for the delegation of MavenMojoDescriptor to this? Why not just extend ComponentDescriptor here?
+ * @todo is there a need for the delegation of MavenMojoDescriptor to this?
+ * Why not just extend ComponentDescriptor here?
+ * @version $Id$
+    /** The Plexus component type */
+    /** "once-per-session" execution strategy */
+    /** "always" execution strategy */
+    /** By default, the execution strategy is "once-per-session" */
+    /** The goal name of the Mojo */
+    /** Reference the binded phase name of the Mojo */
-    
+
+    /** Specify the version when the Mojo was added to the API. Similar to Javadoc since. */
+    /** Reference the invocation phase of the Mojo */
+    /** Reference the invocation goal of the Mojo */
+    /** Reference the invocation lifecycle of the Mojo */
+    /** Specify the version when the Mojo was deprecated to the API. Similar to Javadoc deprecated. */
+    /** By default, no need to aggregate the Maven project and its child modules */
+    /** Specify the required dependencies in a specified scope */
+    /**  By default, the Mojo needs a Maven project to be executed */
+    /**  By default, the Mojo is online */
+    /**  Plugin configuration */
+    /**  Plugin descriptor */
+    /**  By default, the Mojo is herited */
+    /**  By default, the Mojo could not be invoke directly */
+    /**  By default, the Mojo don't need reports to run */
+    /**
+     * Default constructor.
+     */
+    /**
+     * @return the language of this Mojo, i.e. <code>java</code>
+     */
+    /**
+     * @param language the new language
+     */
+    /**
+     * @return <code>true</code> if the Mojo is deprecated, <code>false</code> otherwise.
+     */
+    /**
+     * @param deprecated <code>true</code> to deprecate the Mojo, <code>false</code> otherwise.
+     */
+    /**
+     * @return the list of parameters
+     */
+    /**
+     * @param parameters the new list of parameters
+     * @throws DuplicateParameterException if any
+     */
+    /**
+     * @param parameter add a new parameter
+     * @throws DuplicateParameterException if any
+     */
-        else
-        {
+
-    }
+    /**
+     * @return the list parameters as a Map
+     */
+    /**
+     * @param requiresDependencyResolution the new required dependencies in a specified scope
+     */
+    /**
+     * @return the required dependencies in a specified scope
+     * @TODO the name is not intelligible
+     */
+    /**
+     * @param requiresProject <code>true</code> if the Mojo needs a Maven project to be executed, <code>false</code> otherwise.
+     */
+    /**
+     * @return <code>true</code> if the Mojo needs a Maven project to be executed, <code>false</code> otherwise.
+     */
+    /**
+     * @param requiresOnline <code>true</code> if the Mojo is online, <code>false</code> otherwise.
+     */
+    /**
+     * @return <code>true</code> if the Mojo is online, <code>false</code> otherwise.
+     */
+    /**
+     * @return <code>true</code> if the Mojo is online, <code>false</code> otherwise.
+     */
+    /**
+     * @return the binded phase name of the Mojo
+     */
+    /**
+     * @param phase the new binded phase name of the Mojo
+     */
+    /**
+     * @return the version when the Mojo was added to the API
+     */
+    /**
+     * @param since the new version when the Mojo was added to the API
+     */
+    /**
+     * @return The goal name of the Mojo
+     */
+    /**
+     * @param goal The new goal name of the Mojo
+     */
+    /**
+     * @return the invocation phase of the Mojo
+     */
+    /**
+     * @param executePhase the new invocation phase of the Mojo
+     */
+    /**
+     * @return <code>true</code> if the Mojo uses <code>always</code> for the <code>executionStrategy</code>
+     */
+    /**
+     * @return the execution strategy
+     */
+    /**
+     * @param executionStrategy the new execution strategy
+     */
+    /**
+     * @return the mojo configuration
+     */
+    /**
+     * @param mojoConfiguration a new mojo configuration
+     */
+    /** {@inheritDoc} */
+    /** {@inheritDoc} */
+    /**
+     * @return the id of the mojo, based on the goal name
+     */
+    /**
+     * @return the full goal name
+     * @see PluginDescriptor#getGoalPrefix()
+     * @see #getGoal()
+     */
+    /** {@inheritDoc} */
+    /**
+     * @return the plugin descriptor
+     */
+    /**
+     * @param pluginDescriptor the new plugin descriptor
+     */
+    /**
+     * @return <code>true</code> if the Mojo is herited, <code>false</code> otherwise.
+     */
+    /**
+     * @param inheritedByDefault <code>true</code> if the Mojo is herited, <code>false</code> otherwise.
+     */
+    /** {@inheritDoc} */
+    /** {@inheritDoc} */
+    /**
+     * @return the invocation lifecycle of the Mojo
+     */
+    /**
+     * @param executeLifecycle the new invocation lifecycle of the Mojo
+     */
+    /**
+     * @param aggregator <code>true</code> if the Mojo uses the Maven project and its child modules, <code>false</code> otherwise.
+     */
+    /**
+     * @return <code>true</code> if the Mojo uses the Maven project and its child modules, <code>false</code> otherwise.
+     */
+    /**
+     * @return <code>true</code> if the Mojo could not be invoke directly, <code>false</code> otherwise.
+     */
+    /**
+     * @param directInvocationOnly <code>true</code> if the Mojo could not be invoke directly, <code>false</code> otherwise.
+     */
+    /**
+     * @return <code>true</code> if the Mojo needs reports to run, <code>false</code> otherwise.
+     */
+    /**
+     * @param requiresReports <code>true</code> if the Mojo needs reports to run, <code>false</code> otherwise.
+     */
+    /**
+     * @param executeGoal the new invocation goal of the Mojo
+     */
+    /**
+     * @return the invocation goal of the Mojo
+     */
