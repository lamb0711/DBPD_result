o swapping the branch to trunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779660 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Activation;
-import org.apache.maven.model.Model;
-import org.apache.maven.model.Profile;
-import org.apache.maven.model.interpolator.InterpolatorProperty;
-import org.apache.maven.model.interpolator.PomInterpolatorTag;
-import org.apache.maven.profiles.ProfileActivationContext;
-import org.apache.maven.profiles.ProfileActivationException;
-import org.apache.maven.profiles.ProfileManager;
-import org.apache.maven.profiles.matchers.DefaultMatcher;
-import org.apache.maven.profiles.matchers.FileMatcher;
-import org.apache.maven.profiles.matchers.JdkMatcher;
-import org.apache.maven.profiles.matchers.ProfileMatcher;
-import org.apache.maven.profiles.matchers.PropertyMatcher;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Properties;
+import org.apache.maven.model.Activation;
+import org.apache.maven.model.Model;
+import org.apache.maven.model.Profile;
+import org.apache.maven.model.profile.activator.FileProfileActivator;
+import org.apache.maven.model.profile.activator.JdkVersionProfileActivator;
+import org.apache.maven.model.profile.activator.OperatingSystemProfileActivator;
+import org.apache.maven.model.profile.activator.ProfileActivator;
+import org.apache.maven.model.profile.activator.PropertyProfileActivator;
+
+@Deprecated
-    
-    private static final ProfileMatcher defaultMatcher = new DefaultMatcher();
-    private static final List<ProfileMatcher> matchers =
-        Collections.unmodifiableList( Arrays.asList( new PropertyMatcher(), new FileMatcher(), new JdkMatcher() ) );    
+    private static final List<ProfileActivator> activators =
+        Arrays.asList( new PropertyProfileActivator(), new OperatingSystemProfileActivator(),
+                       new FileProfileActivator(), new JdkVersionProfileActivator() );
-    
-    public static List<Profile> getActiveProfilesFrom(ProfileManager globalProfileManager, Properties properties, Model model)
-		throws ProfileActivationException
-	{
-	    List<Profile> projectProfiles = new ArrayList<Profile>();
-	    
-	    ProfileActivationContext profileActivationContext = (globalProfileManager == null) ? new ProfileActivationContext( new Properties(), false ):
-	        globalProfileManager.getProfileActivationContext();
-	    profileActivationContext.getExecutionProperties().putAll(properties);
-	    
-	    if(globalProfileManager != null)
-	    {           
-	    	projectProfiles.addAll( globalProfileManager.getActiveProfiles() );    
-	    }
-
-	    ProfileManager profileManager = new DefaultProfileManager( profileActivationContext );
-	    profileManager.addProfiles( model.getProfiles() );
-	    projectProfiles.addAll( profileManager.getActiveProfiles() ); 
-	    return projectProfiles;
-	}   
- 
-    public static Collection<Profile> getActiveProfiles(List<Profile> profiles, ProfileManagerInfo profileContextInfo)
-    {
-        List<InterpolatorProperty> properties = profileContextInfo.getInterpolatorProperties();
-        Collection<String> activeProfileIds = profileContextInfo.getActiveProfileIds();
-        Collection<String> inactiveProfileIds = profileContextInfo.getInactiveProfileIds();
-        
-        List<Profile> matchedProfiles = new ArrayList<Profile>();
-        List<Profile> defaultProfiles = new ArrayList<Profile>();
-        for ( Profile profile : profiles )
-        {
-            String profileId = profile.getId();
-
-            if ( !inactiveProfileIds.contains( profileId ) )
-            {
-                if ( activeProfileIds.contains( profileId ) )
-                {
-                    matchedProfiles.add( profile );
-                }
-                else if ( defaultMatcher.isMatch( profile, properties ) )
-                {
-                    defaultProfiles.add( profile );
-                }
-                else
-                {
-                    for ( ProfileMatcher matcher : matchers )
-                    {
-                        if ( matcher.isMatch( profile, properties ) )
-                        {
-                            matchedProfiles.add( profile );
-                            break;
-                        }
-                    }
-                }
-            }
-        }
-
-        if ( matchedProfiles.isEmpty() )
-        {
-            matchedProfiles = defaultProfiles;
-        }
-
-        return matchedProfiles;
-    }    
-        List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
-        if(context.getExecutionProperties() != null)
+        for ( ProfileActivator activator : activators )
-            interpolatorProperties.addAll(InterpolatorProperty.toInterpolatorProperties(
-                                                                                        context.getExecutionProperties(),
-                                                                                        PomInterpolatorTag.EXECUTION_PROPERTIES.name()));              
-        }
-     
-        for(ProfileMatcher matcher : matchers)
-        {
-            if(matcher.isMatch(profile, interpolatorProperties))
+            try
-                return true;
+                if ( activator.isActive( profile, context ) )
+                {
+                    return true;
+                }
+            }
+            catch ( org.apache.maven.model.profile.ProfileActivationException e )
+            {
+                throw new ProfileActivationException( e.getMessage(), e.getCause() );
+
