[MNG-4919] Plugin execution contributed by lifecycle mapping gets lost when same goal is bound multiple times

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1055486 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashSet;
+import java.util.List;
-        for ( Lifecycle lifecycle : defaultLifeCycles.getLifeCycles() )
+        for ( Lifecycle lifecycle : getOrderedLifecycles() )
+    private List<Lifecycle> getOrderedLifecycles()
+    {
+        // NOTE: The lifecycle order can affect implied execution ids so we better be deterministic.
+
+        List<Lifecycle> lifecycles = new ArrayList<Lifecycle>( defaultLifeCycles.getLifeCycles() );
+
+        Collections.sort( lifecycles, new Comparator<Lifecycle>()
+        {
+
+            public int compare( Lifecycle l1, Lifecycle l2 )
+            {
+                return l1.getId().compareTo( l2.getId() );
+            }
+
+        } );
+
+        return lifecycles;
+    }
+
-            // either <groupId>:<artifactId>:<goal> or <groupId>:<artifactId>:<version>:<goal>
-            String goal = mojos[i].trim();
-            String[] p = StringUtils.split( goal, ":" );
+            GoalSpec gs = parseGoalSpec( mojos[i].trim() );
-            PluginExecution execution = new PluginExecution();
-            execution.setId( "default-" + p[p.length - 1] );
-            execution.setPhase( phase );
-            execution.setPriority( i - mojos.length );
-            execution.getGoals().add( p[p.length - 1] );
+            if ( gs == null )
+            {
+                logger.warn( "Ignored invalid goal specification '" + mojos[i] + "' from lifecycle mapping for phase "
+                    + phase );
+                continue;
+            }
-            plugin.setGroupId( p[0] );
-            plugin.setArtifactId( p[1] );
-            if ( p.length >= 4 )
-            {
-                plugin.setVersion( p[2] );
-            }
+            plugin.setGroupId( gs.groupId );
+            plugin.setArtifactId( gs.artifactId );
+            plugin.setVersion( gs.version );
+            PluginExecution execution = new PluginExecution();
+            execution.setId( getExecutionId( plugin, gs.goal ) );
+            execution.setPhase( phase );
+            execution.setPriority( i - mojos.length );
+            execution.getGoals().add( gs.goal );
+
+    private GoalSpec parseGoalSpec( String goalSpec )
+    {
+        GoalSpec gs = new GoalSpec();
+
+        String[] p = StringUtils.split( goalSpec.trim(), ":" );
+
+        if ( p.length == 3 )
+        {
+            // <groupId>:<artifactId>:<goal>
+            gs.groupId = p[0];
+            gs.artifactId = p[1];
+            gs.goal = p[2];
+        }
+        else if ( p.length == 4 )
+        {
+            // <groupId>:<artifactId>:<version>:<goal>
+            gs.groupId = p[0];
+            gs.artifactId = p[1];
+            gs.version = p[2];
+            gs.goal = p[3];
+        }
+        else
+        {
+            // invalid
+            gs = null;
+        }
+
+        return gs;
+    }
+
+    private String getExecutionId( Plugin plugin, String goal )
+    {
+        Set<String> existingIds = new HashSet<String>();
+        for ( PluginExecution execution : plugin.getExecutions() )
+        {
+            existingIds.add( execution.getId() );
+        }
+
+        String base = "default-" + goal;
+        String id = base;
+
+        for ( int index = 1; existingIds.contains( id ); index++ )
+        {
+            id = base + '-' + index;
+        }
+
+        return id;
+    }
+
+    static class GoalSpec
+    {
+
+        String groupId;
+
+        String artifactId;
+
+        String version;
+
+        String goal;
+
+    }
