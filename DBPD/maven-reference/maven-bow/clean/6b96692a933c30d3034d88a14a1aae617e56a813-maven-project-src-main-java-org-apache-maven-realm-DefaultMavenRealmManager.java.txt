Merge of sisbell-maven-2.1-profile branch. Removes use of project lineage from builder.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@693332 13f79535-47bb-0310-9956-ffa450edef68

+
+
+
-    public DefaultMavenRealmManager( PlexusContainer container,
-                                     Logger logger )
+    public DefaultMavenRealmManager( PlexusContainer container, Logger logger )
-    public ClassRealm createExtensionRealm( Artifact extensionArtifact,
-                                            List artifacts )
+    public ClassRealm createExtensionRealm( Artifact extensionArtifact, List artifacts )
-            throw new RealmManagementException( id, "Extension realm: " + id + " already exists.",
-                                                e );
+            throw new RealmManagementException( id, "Extension realm: " + id + " already exists.", e );
-    public void importExtensionsIntoProjectRealm( String projectGroupId,
-                                                  String projectArtifactId,
-                                                  String projectVersion,
-                                                  Artifact extensionArtifact )
+    public void importExtensionsIntoProjectRealm( String projectGroupId, String projectArtifactId,
+                                                  String projectVersion, Artifact extensionArtifact )
-            throw new RealmManagementException( extensionRealmId, "Cannot import project extensions; extension artifact has no associated file that can be scanned for extension components (extension: " + extensionArtifact.getId() + ")" );
+            throw new RealmManagementException( extensionRealmId,
+                                                "Cannot import project extensions; extension artifact has no associated file that can be scanned for extension components (extension: " +
+                                                    extensionArtifact.getId() + ")" );
-
-        List componentSetDescriptors = RealmScanningUtils.scanForComponentSetDescriptors( extensionArtifact, discoverer, container.getContext(), extensionRealmId );
+        List componentSetDescriptors = RealmScanningUtils.scanForComponentSetDescriptors( extensionArtifact, discoverer,
+                                                                                          container.getContext(),
+                                                                                          extensionRealmId );
-                    logger.debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealmId + "\nto project realm: " + realm.getId() );
+                    logger.debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " +
+                        comp.getRoleHint() + "\nfrom extension realm: " + extensionRealmId + "\nto project realm: " +
+                        realm.getId() );
-                    throw new RealmManagementException( extensionRealmId, "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealmId + " to project realm: " + realm.getId(), e );
+                    throw new RealmManagementException( extensionRealmId, "Failed to create import for component: " +
+                        implementation + " from extension realm: " + extensionRealmId + " to project realm: " +
+                        realm.getId(), e );
-                    throw new RealmManagementException( extensionRealmId, "Unable to discover components from imports to project: " + projectId + " from extension artifact: " + extensionArtifact.getId(), e );
+                    throw new RealmManagementException( extensionRealmId,
+                                                        "Unable to discover components from imports to project: " +
+                                                            projectId + " from extension artifact: " +
+                                                            extensionArtifact.getId(), e );
-    private ClassRealm getProjectRealm( String projectGroupId, String projectArtifactId, String projectVersion, boolean create )
+    private ClassRealm getProjectRealm( String projectGroupId, String projectArtifactId, String projectVersion,
+                                        boolean create )
-    public ClassRealm createPluginRealm( Plugin plugin,
-                                          Artifact pluginArtifact,
-                                          List artifacts,
-                                          ArtifactFilter coreArtifactFilter )
+    public ClassRealm createPluginRealm( Plugin plugin, Artifact pluginArtifact, List artifacts,
+                                         ArtifactFilter coreArtifactFilter )
-            throw new RealmManagementException( id, "Plugin realm: " + id + " already exists.",
-                                                e );
+            throw new RealmManagementException( id, "Plugin realm: " + id + " already exists.", e );
-    private void populateRealm( String id,
-                                ClassRealm realm,
-                                Artifact mainArtifact,
-                                List artifacts,
+    private void populateRealm( String id, ClassRealm realm, Artifact mainArtifact, List artifacts,
-                throw new RealmManagementException( id, mainArtifact, "Invalid URL for artifact file: "
-                                                                  + mainArtifact.getFile()
-                                                                  + " to be used in realm: " + id
-                                                                  + ".", e );
+                throw new RealmManagementException( id, mainArtifact, "Invalid URL for artifact file: " +
+                    mainArtifact.getFile() + " to be used in realm: " + id + ".", e );
-                    throw new RealmManagementException( id, artifact, "Invalid URL for artifact file: "
-                                                                      + artifact.getFile()
-                                                                      + " to be used in realm: " + id
-                                                                      + ".", e );
+                    throw new RealmManagementException( id, artifact, "Invalid URL for artifact file: " +
+                        artifact.getFile() + " to be used in realm: " + id + ".", e );
-                logger.debug( "Excluding artifact: " + artifact.getArtifactId() + " from plugin realm; it's already included in Maven's core." );
+                logger.debug( "Excluding artifact: " + artifact.getArtifactId() +
+                    " from plugin realm; it's already included in Maven's core." );
-    public void setPluginArtifacts( Plugin plugin,
-                                    List artifacts )
+    public void setPluginArtifacts( Plugin plugin, List artifacts )
