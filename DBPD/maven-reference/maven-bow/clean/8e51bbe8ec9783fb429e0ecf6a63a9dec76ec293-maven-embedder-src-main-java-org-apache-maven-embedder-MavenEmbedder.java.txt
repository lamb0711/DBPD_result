o Remove the MavenEmbedderConfiguration as this is not used in any of the IDE integration. The MavenEmbedRequest is what is being used as the session level configuration.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@491363 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.DefaultMavenExecutionResult;
-import org.apache.maven.execution.DefaultMavenExecutionResult;
+import org.codehaus.plexus.DefaultPlexusContainer;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.PlexusContainerException;
-import org.codehaus.plexus.PlexusContainerException;
-import org.codehaus.plexus.DefaultPlexusContainer;
-import org.codehaus.plexus.PlexusContainer;
+import java.util.Collections;
-import java.util.Collections;
-    // ----------------------------------------------------------------------
-    //
-    // ----------------------------------------------------------------------
-
-    private File localRepositoryDirectory;
-
-    // release plugin uses this but in IDE there will probably always be some form of interaction.
-    private boolean interactiveMode;
-
-    private boolean offline;
-
-    private String globalChecksumPolicy;
-
-    /**
-     * This option determines whether the embedder is to be aligned to the user
-     * installation.
-     *
-     * @deprecated not used
-     */
-    private boolean alignWithUserInstallation;
-
+    private MavenEmbedRequest embedderRequest;
+
-    /** @deprecated not used. */
-    public void setInteractiveMode( boolean interactiveMode )
-    {
-        this.interactiveMode = interactiveMode;
-    }
-
-    /** @deprecated not used. */
-    public boolean isInteractiveMode()
-    {
-        return interactiveMode;
-    }
-
-    /** @deprecated not used. */
-    public void setOffline( boolean offline )
-    {
-        this.offline = offline;
-    }
-
-    /** @deprecated not used. */
-    public boolean isOffline()
-    {
-        return offline;
-    }
-
-    /** @deprecated not used. */
-    public void setGlobalChecksumPolicy( String globalChecksumPolicy )
-    {
-        this.globalChecksumPolicy = globalChecksumPolicy;
-    }
-
-    /** @deprecated not used. */
-    public String getGlobalChecksumPolicy()
-    {
-        return globalChecksumPolicy;
-    }
-
-    /** @deprecated not used. */
-    public boolean isAlignWithUserInstallation()
-    {
-        return alignWithUserInstallation;
-    }
-
-    /** @deprecated not used */
-    public void setAlignWithUserInstallation( boolean alignWithUserInstallation )
-    {
-        this.alignWithUserInstallation = alignWithUserInstallation;
-    }
-
-    /**
-     * Set the classloader to use with the maven embedder.
-     *
-     * @param classLoader
-     */
-    /** @deprecated not used. */
-    public void setLocalRepositoryDirectory( File localRepositoryDirectory )
-    {
-        this.localRepositoryDirectory = localRepositoryDirectory;
-    }
-
-    /**
-     *
-     */
-    public File getLocalRepositoryDirectory()
-    {
-        return new File( getLocalRepositoryPath( settings ) );
-    }
-
-    // ----------------------------------------------------------------------
-    // Embedder Client Contract
-    // ----------------------------------------------------------------------
-
-    // ----------------------------------------------------------------------
-    // Model
-    // ----------------------------------------------------------------------
-
-    /**
-     * read the model.
-     * requires a start()-ed embedder.
-     */
-    /**
-     * write the model.
-     * requires a start()-ed embedder.
-     */
-    /**
-     * read the project.
-     * requires a start()-ed embedder.
-     */
+    /** @deprecated */
+    /** @deprecated */
+    private MavenExecutionRequest populateMavenExecutionRequestWithDefaults( MavenExecutionRequest request )
+    {
+        // populate the request from
+        // 1. embed request
+        // 2. defaults
+
+        // Local repository
+
+        if ( request.getLocalRepository() == null )
+        {
+            request.setLocalRepository( localRepository );
+
+            File localRepository = new File( request.getLocalRepository().getBasedir() );
+
+            if ( !localRepository.exists() )
+            {
+                localRepository.mkdirs();
+            }
+        }
+
+        // Settings
+
+        if ( request.getSettings() == null )
+        {
+            request.setSettings( settings );
+        }
+
+        /*
+        MavenExecutionRequest request = new DefaultMavenExecutionRequest()
+            .setBasedir( baseDirectory )
+            .setGoals( goals )
+            .setLocalRepositoryPath( localRepositoryPath ) // default: ~/.m2/repository
+            .setProperties( executionProperties ) // optional
+            .setReactorFailureBehavior( reactorFailureBehaviour ) // default: fail fast
+            .setRecursive( recursive ) // default: false
+            .setUseReactor( useReactor ) // default: true
+            .setPomFile( alternatePomFile ) // optional
+            .setShowErrors( showErrors ) // default: false
+            .setInteractiveMode( interactive ) // default: false
+            .addActiveProfiles( activeProfiles ) // optional
+            .addInactiveProfiles( inactiveProfiles ) // optional
+            .setLoggingLevel( loggingLevel ) // default: info
+            .setSettings( settings ) // default: ~/.m2/settings.xml
+            .setTransferListener( transferListener ) // default: batch mode which goes along with interactive
+            .setOffline( offline ) // default: false
+            .setUpdateSnapshots( updateSnapshots ) // default: false
+            .setNoSnapshotUpdates( noSnapshotUpdates ) // default: false
+            .setGlobalChecksumPolicy( globalChecksumPolicy ); // default: warn
+        */
+
+        // Classify settings as being used for the life of session or request
+
+        if ( request.getLocalRepository() == null )
+        {
+        }
+
+
+        return request;
+    }
+
-        // How can we get rid of the profile manager from the request
+        request = populateMavenExecutionRequestWithDefaults( request );
-    public List collectProjects( File basedir,
-                                 String[] includes,
-                                 String[] excludes )
-        throws MojoExecutionException
-    {
-        checkStarted();
-        List projects = new ArrayList();
-
-        List poms = getPomFiles( basedir, includes, excludes );
-
-        for ( Iterator i = poms.iterator(); i.hasNext(); )
-        {
-            File pom = (File) i.next();
-
-            try
-            {
-                MavenProject p = readProject( pom );
-
-                projects.add( p );
-
-            }
-            catch ( ProjectBuildingException e )
-            {
-                throw new MojoExecutionException( "Error loading " + pom, e );
-            }
-        }
-
-        return projects;
-    }
-
-    // Internal utility code
-    // ----------------------------------------------------------------------
-
-    private List getPomFiles( File basedir,
-                              String[] includes,
-                              String[] excludes )
-    {
-        DirectoryScanner scanner = new DirectoryScanner();
-
-        scanner.setBasedir( basedir );
-
-        scanner.setIncludes( includes );
-
-        scanner.setExcludes( excludes );
-
-        scanner.scan();
-
-        List poms = new ArrayList();
-
-        for ( int i = 0; i < scanner.getIncludedFiles().length; i++ )
-        {
-            poms.add( new File( basedir, scanner.getIncludedFiles()[i] ) );
-        }
-
-        return poms;
-    }
-
-    // ----------------------------------------------------------------------
-
+        this.embedderRequest = req;
+
+        if ( classWorld == null )
+        {
+            classWorld = new ClassWorld();
+
+            try
+            {
+                classWorld.newRealm( "plexus.core", classLoader );
+            }
+            catch ( DuplicateRealmException e )
+            {
+                // won't happen
+            }
+        }
+
-
-            if ( classWorld == null )
-            {
-                classWorld = new ClassWorld();
-
-                classWorld.newRealm( "plexus.core", classLoader );
-            }
-
-// TODO verify that this is not needed...
-//            embedder.start( classWorld );
-
-        catch ( DuplicateRealmException e )
-        {
-            throw new MavenEmbedderException( "Cannot create Classworld realm for the embedder.", e );
-        }
+
