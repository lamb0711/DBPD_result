Adding the build-plan instance for each project to the session and MavenExecutionResponse.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@616824 13f79535-47bb-0310-9956-ffa450edef68

+    public void constructInitialProjectBuildPlans( final MavenSession session )
+        throws LifecycleLoaderException, LifecycleSpecificationException, LifecyclePlannerException
+    {
+        for ( Iterator it = session.getSortedProjects().iterator(); it.hasNext(); )
+        {
+            MavenProject project = (MavenProject) it.next();
+
+            constructInitialProjectBuildPlan( project, session );
+        }
+    }
+
+    public BuildPlan constructInitialProjectBuildPlan( final MavenProject project,
+                                                       final MavenSession session )
+        throws LifecycleLoaderException, LifecycleSpecificationException, LifecyclePlannerException
+    {
+        BuildPlan plan = session.getBuildPlan( project );
+        if ( plan == null )
+        {
+            plan = constructBuildPlan( Collections.EMPTY_LIST, project, session );
+
+            session.setBuildPlan( project, plan );
+        }
+
+        return plan;
+    }
+
-    public BuildPlan constructBuildPlan( final List tasks, final MavenProject project, final MavenSession session )
+    public BuildPlan constructBuildPlan( final List tasks,
+                                         final MavenProject project,
+                                         final MavenSession session )
-        LifecycleBindings defaultBindings = lifecycleBindingManager.getDefaultBindings( project );
-        LifecycleBindings packagingBindings = lifecycleBindingManager.getBindingsForPackaging( project, session );
-        LifecycleBindings projectBindings = lifecycleBindingManager.getProjectCustomBindings( project, session );
+        BuildPlan plan = session.getBuildPlan( project );
-        BuildPlan plan = new BuildPlan( packagingBindings, projectBindings, defaultBindings, tasks );
+        if ( plan != null )
+        {
+            plan = plan.copy( tasks );
+        }
+        else
+        {
+            LifecycleBindings defaultBindings = lifecycleBindingManager.getDefaultBindings( project );
+            LifecycleBindings packagingBindings = lifecycleBindingManager.getBindingsForPackaging( project,
+                                                                                                   session );
+            LifecycleBindings projectBindings = lifecycleBindingManager.getProjectCustomBindings( project,
+                                                                                                  session );
+
+            plan = new BuildPlan( packagingBindings, projectBindings, defaultBindings, tasks );
+        }
-    private void initializeDirectInvocations( final BuildPlan plan, final MavenProject project, final MavenSession session )
+    private void initializeDirectInvocations( final BuildPlan plan,
+                                              final MavenProject project,
+                                              final MavenSession session )
-                MojoBinding binding = mojoBindingFactory.parseMojoBinding( task, project, session, true );
+                MojoBinding binding = mojoBindingFactory.parseMojoBinding( task,
+                                                                           project,
+                                                                           session,
+                                                                           true );
-    private void addForkedLifecycleModifiers( final BuildPlan plan, final MavenProject project, MavenSession session, LinkedList callStack )
+    private void addForkedLifecycleModifiers( final BuildPlan plan,
+                                              final MavenProject project,
+                                              MavenSession session,
+                                              LinkedList callStack )
-    private void findForkModifiers( final MojoBinding mojoBinding, final BuildPlan plan, final MavenProject project, MavenSession session, LinkedList callStack )
+    private void findForkModifiers( final MojoBinding mojoBinding,
+                                    final BuildPlan plan,
+                                    final MavenProject project,
+                                    MavenSession session,
+                                    LinkedList callStack )
-        PluginDescriptor pluginDescriptor = loadPluginDescriptor( mojoBinding, plan, project, session );
+        PluginDescriptor pluginDescriptor = loadPluginDescriptor( mojoBinding,
+                                                                  plan,
+                                                                  project,
+                                                                  session );
-            throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal() + " does not exist in plugin: "
+            throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal()
+                                                 + " does not exist in plugin: "
-    private void addReportingLifecycleModifiers( final BuildPlan plan, final MavenProject project, MavenSession session, LinkedList callStack )
+    private void addReportingLifecycleModifiers( final BuildPlan plan,
+                                                 final MavenProject project,
+                                                 MavenSession session,
+                                                 LinkedList callStack )
-            PluginDescriptor pluginDescriptor = loadPluginDescriptor( mojoBinding, plan, project, session );
+            PluginDescriptor pluginDescriptor = loadPluginDescriptor( mojoBinding,
+                                                                      plan,
+                                                                      project,
+                                                                      session );
-                throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal() + " does not exist in plugin: "
+                throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal()
+                                                     + " does not exist in plugin: "
-                        PluginDescriptor pd = loadPluginDescriptor( reportBinding, plan, project, session );
+                        PluginDescriptor pd = loadPluginDescriptor( reportBinding,
+                                                                    plan,
+                                                                    project,
+                                                                    session );
-                            findForkModifiers( reportBinding, pd, plan, project, session, true, callStack );
+                            findForkModifiers( reportBinding,
+                                               pd,
+                                               plan,
+                                               project,
+                                               session,
+                                               true,
+                                               callStack );
-    private PluginDescriptor loadPluginDescriptor( final MojoBinding mojoBinding, final BuildPlan plan,
-                                                   final MavenProject project, final MavenSession session )
+    private PluginDescriptor loadPluginDescriptor( final MojoBinding mojoBinding,
+                                                   final BuildPlan plan,
+                                                   final MavenProject project,
+                                                   final MavenSession session )
-            String message =
-                "Failed to load plugin: " + MojoBindingUtils.createPluginKey( mojoBinding )
-                                + ". Adding to late-bound plugins list.\nReason: " + e.getMessage();
+            String message = "Failed to load plugin: "
+                             + MojoBindingUtils.createPluginKey( mojoBinding )
+                             + ". Adding to late-bound plugins list.\nReason: " + e.getMessage();
-    private void findForkModifiers( final MojoBinding mojoBinding, final PluginDescriptor pluginDescriptor,
-                                    final BuildPlan plan, final MavenProject project, final MavenSession session,
-                                    final boolean includeReportConfig, LinkedList callStack )
+    private void findForkModifiers( final MojoBinding mojoBinding,
+                                    final PluginDescriptor pluginDescriptor,
+                                    final BuildPlan plan,
+                                    final MavenProject project,
+                                    final MavenSession session,
+                                    final boolean includeReportConfig,
+                                    LinkedList callStack )
-            throw new LifecyclePlannerException( "Cannot find mojo descriptor for: " + referencingGoal + " in plugin: "
+            throw new LifecyclePlannerException( "Cannot find mojo descriptor for: "
+                                                 + referencingGoal + " in plugin: "
-            recurseSingleMojoFork( mojoBinding, pluginDescriptor, plan, project, includeReportConfig );
+            recurseSingleMojoFork( mojoBinding,
+                                   pluginDescriptor,
+                                   plan,
+                                   project,
+                                   includeReportConfig );
-            recursePhaseMojoFork( mojoBinding, pluginDescriptor, plan, project, session, includeReportConfig, callStack );
+            recursePhaseMojoFork( mojoBinding,
+                                  pluginDescriptor,
+                                  plan,
+                                  project,
+                                  session,
+                                  includeReportConfig,
+                                  callStack );
-    private void recursePhaseMojoFork( final MojoBinding mojoBinding, final PluginDescriptor pluginDescriptor,
-                                       final BuildPlan plan, final MavenProject project, final MavenSession session,
-                                       final boolean includeReportConfig, LinkedList callStack )
+    private void recursePhaseMojoFork( final MojoBinding mojoBinding,
+                                       final PluginDescriptor pluginDescriptor,
+                                       final BuildPlan plan,
+                                       final MavenProject project,
+                                       final MavenSession session,
+                                       final boolean includeReportConfig,
+                                       LinkedList callStack )
-                    overlayBindings =
-                        lifecycleBindingManager.getPluginLifecycleOverlay( pluginDescriptor, executeLifecycle, project );
+                    overlayBindings = lifecycleBindingManager.getPluginLifecycleOverlay( pluginDescriptor,
+                                                                                         executeLifecycle,
+                                                                                         project );
-                    throw new LifecyclePlannerException( "Failed to load overlay lifecycle: " + executeLifecycle
-                                                         + ". Reason: " + e.getMessage(), e );
+                    throw new LifecyclePlannerException( "Failed to load overlay lifecycle: "
+                                                         + executeLifecycle + ". Reason: "
+                                                         + e.getMessage(), e );
-    private void recurseSingleMojoFork( final MojoBinding mojoBinding, final PluginDescriptor pluginDescriptor,
-                                        final BuildPlan plan, final MavenProject project, final boolean includeReportConfig )
+    private void recurseSingleMojoFork( final MojoBinding mojoBinding,
+                                        final PluginDescriptor pluginDescriptor,
+                                        final BuildPlan plan,
+                                        final MavenProject project,
+                                        final boolean includeReportConfig )
-            throw new LifecyclePlannerException( "Mojo: " + executeGoal + " (referenced by: " + referencingGoal
-                                                 + ") does not exist in plugin: " + pluginDescriptor.getId() + "." );
+            throw new LifecyclePlannerException( "Mojo: " + executeGoal + " (referenced by: "
+                                                 + referencingGoal + ") does not exist in plugin: "
+                                                 + pluginDescriptor.getId() + "." );
-        MojoBinding binding =
-            mojoBindingFactory.createMojoBinding( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId(),
-                                                  pluginDescriptor.getVersion(), executeGoal, project );
+        MojoBinding binding = mojoBindingFactory.createMojoBinding( pluginDescriptor.getGroupId(),
+                                                                    pluginDescriptor.getArtifactId(),
+                                                                    pluginDescriptor.getVersion(),
+                                                                    executeGoal,
+                                                                    project );
