PR: MNG-1057
look for command line goals in the project declared plugins

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@292935 13f79535-47bb-0310-9956-ffa450edef68

-        // TODO: Add "&& canUsePrefix" to this boolean expression, and remove deprecation warning in next release.
-                getLogger().warn(
-                    "DEPRECATED: Mapped-prefix lookup of mojos are only supported from direct invocation. Please use specification of the form groupId:artifactId[:version]:goal instead. (Offending mojo: \'" +
-                        task + "\', invoked via: \'" + invokedVia + "\')" );
+                String msg = "DEPRECATED: Mapped-prefix lookup of mojos are only supported from direct invocation. " +
+                    "Please use specification of the form groupId:artifactId[:version]:goal instead. " +
+                    "(Offending mojo: \'" + task + "\', invoked via: \'" + invokedVia + "\')";
+                throw new LifecycleExecutionException( msg );
-            try
-            {
-                pluginDescriptor = pluginManager.getPluginDescriptorForPrefix( prefix );
-            }
-            catch ( PluginManagerException e )
-            {
-                throw new LifecycleExecutionException(
-                    "Cannot resolve plugin-prefix: \'" + prefix + "\' from plugin collector.", e );
-            }
+            pluginDescriptor = pluginManager.getPluginDescriptorForPrefix( prefix );
+            // 2. look in the repository via search groups
-
-            if ( pluginDescriptor != null )
+            else
-            // 2. default to o.a.m.plugins and maven-<prefix>-plugin
+            // 3. search plugins in the current POM
+            if ( plugin == null )
+            {
+                for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+                {
+                    Plugin buildPlugin = (Plugin) i.next();
+
+                    try
+                    {
+                        PluginDescriptor desc = pluginManager.verifyPlugin( buildPlugin, project, session.getSettings(),
+                                                                            session.getLocalRepository() );
+                        if ( prefix.equals( desc.getGoalPrefix() ) )
+                        {
+                            plugin = buildPlugin;
+                        }
+                    }
+                    catch ( PluginManagerException e )
+                    {
+                        throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+                    }
+                    catch ( PluginVersionResolutionException e )
+                    {
+                        throw new LifecycleExecutionException( "Error resolving plugin version", e );
+                    }
+                }
+            }
+
+            // 4. default to o.a.m.plugins and maven-<prefix>-plugin
