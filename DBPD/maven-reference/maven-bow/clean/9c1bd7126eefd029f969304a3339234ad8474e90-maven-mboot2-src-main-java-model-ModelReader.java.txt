let bootstrap handle exclusions

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@289409 13f79535-47bb-0310-9956-ffa450edef68

+    private boolean insideExclusion;
+
+    private Exclusion currentExclusion;
+
-            addDependencies( p.getDependencies(), parentDependencies, null );
+            addDependencies( p.getDependencies(), parentDependencies, null, Collections.EMPTY_SET );
-            addDependencies( p.getManagedDependencies(), managedDependencies, null );
+            addDependencies( p.getManagedDependencies(), managedDependencies, null, Collections.EMPTY_SET );
+        else if ( rawName.equals( "exclusion" ) )
+        {
+            currentDependency.addExclusion( currentExclusion );
+            insideExclusion = false;
+        }
-            if ( rawName.equals( "id" ) )
+            if ( insideExclusion )
+            {
+                if ( rawName.equals( "groupId" ) )
+                {
+                    currentExclusion.setGroupId( getBodyText() );
+                }
+                else if ( rawName.equals( "artifactId" ) )
+                {
+                    currentExclusion.setArtifactId( getBodyText() );
+                }
+            }
+            else if ( rawName.equals( "id" ) )
+            else if ( rawName.equals( "exclusion" ) )
+            {
+                insideExclusion = true;
+
+                currentExclusion = new Exclusion();
+            }
-                    throw new NullPointerException( "[" + groupId + ":" + artifactId +":" + packaging + ":" + version + "] " +
-                            "Dependency " + dependency.getConflictId() + " is missing a version, and nothing is found in dependencyManagement. ");
+                    throw new NullPointerException( "[" + groupId + ":" + artifactId + ":" + packaging + ":" + version +
+                        "] " + "Dependency " + dependency.getConflictId() +
+                        " is missing a version, and nothing is found in dependencyManagement. " );
-                addDependencies( p.getDependencies(), transitiveDependencies, dependency.getScope() );
+                addDependencies( p.getDependencies(), transitiveDependencies, dependency.getScope(),
+                                 dependency.getExclusions() );
-    private void addDependencies( Collection dependencies, Map target, String inheritedScope )
+    private void addDependencies( Collection dependencies, Map target, String inheritedScope, Set excluded )
-            if ( !hasDependency( d, target ) )
+            if ( !hasDependency( d, target ) && !excluded.contains( d.getConflictId() ) )
