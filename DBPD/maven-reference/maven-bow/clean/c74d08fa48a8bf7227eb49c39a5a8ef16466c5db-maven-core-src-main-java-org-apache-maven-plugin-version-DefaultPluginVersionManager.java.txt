if the plugin version is not working with this version of Maven, rollback until one is found.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@320983 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.versioning.ArtifactVersion;
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+import org.apache.maven.artifact.versioning.VersionRange;
+import java.util.List;
+    // TODO: Revisit to remove this piece of state. PLUGIN REGISTRY MAY BE UPDATED ON DISK OUT-OF-PROCESS!
+    private Map resolvedMetaVersions = new HashMap();
+
+        String key = artifact.getDependencyConflictId();
+        if ( resolvedMetaVersions.containsKey( key ) )
+        {
+            return (String) resolvedMetaVersions.get( key );
+        }
+
+        String artifactVersion = artifact.getVersion();
+
-            MavenProject pluginProject;
-            try
-            {
-                pluginProject = mavenProjectBuilder.buildFromRepository( artifact,
-                                                                         project.getPluginArtifactRepositories(),
-                                                                         localRepository, false );
-            }
-            catch ( ProjectBuildingException e )
-            {
-                throw new InvalidPluginException( "Unable to build project information for plugin '" +
-                    ArtifactUtils.versionlessKey( groupId, artifactId ) + "': " + e.getMessage(), e );
-            }
+            boolean pluginValid = false;
-            boolean pluginValid = true;
-
-            // if we don't have the required Maven version, then ignore an update
-            if ( pluginProject.getPrerequisites() != null && pluginProject.getPrerequisites().getMaven() != null )
+            while ( !pluginValid && artifactVersion != null )
-                DefaultArtifactVersion requiredVersion =
-                    new DefaultArtifactVersion( pluginProject.getPrerequisites().getMaven() );
-
-                if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+                pluginValid = true;
+                MavenProject pluginProject;
+                try
-                    getLogger().info( "Ignoring available plugin update: " + artifact.getVersion() +
-                        " as it requires Maven version " + requiredVersion );
-                    pluginValid = false;
+                    artifact = artifactFactory.createProjectArtifact( groupId, artifactId, artifactVersion );
+                    pluginProject = mavenProjectBuilder.buildFromRepository( artifact,
+                                                                             project.getPluginArtifactRepositories(),
+                                                                             localRepository, false );
+                }
+                catch ( ProjectBuildingException e )
+                {
+                    throw new InvalidPluginException( "Unable to build project information for plugin '" +
+                        ArtifactUtils.versionlessKey( groupId, artifactId ) + "': " + e.getMessage(), e );
+                }
+
+                // if we don't have the required Maven version, then ignore an update
+                if ( pluginProject.getPrerequisites() != null && pluginProject.getPrerequisites().getMaven() != null )
+                {
+                    DefaultArtifactVersion requiredVersion =
+                        new DefaultArtifactVersion( pluginProject.getPrerequisites().getMaven() );
+
+                    if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+                    {
+                        getLogger().info( "Ignoring available plugin update: " + artifactVersion +
+                            " as it requires Maven version " + requiredVersion );
+
+                        VersionRange vr;
+                        try
+                        {
+                            vr = VersionRange.createFromVersionSpec( "(," + artifactVersion + ")" );
+                        }
+                        catch ( InvalidVersionSpecificationException e )
+                        {
+                            throw new PluginVersionResolutionException( groupId, artifactId,
+                                                                        "Error getting available plugin versions: " +
+                                                                            e.getMessage(), e );
+                        }
+
+                        getLogger().debug( "Trying " + vr );
+                        try
+                        {
+                            List versions = artifactMetadataSource.retrieveAvailableVersions( artifact, localRepository,
+                                                                                              project.getPluginArtifactRepositories() );
+                            ArtifactVersion v = vr.matchVersion( versions );
+                            artifactVersion = v != null ? v.toString() : null;
+                        }
+                        catch ( ArtifactMetadataRetrievalException e )
+                        {
+                            throw new PluginVersionResolutionException( groupId, artifactId,
+                                                                        "Error getting available plugin versions: " +
+                                                                            e.getMessage(), e );
+                        }
+
+                        if ( artifactVersion != null )
+                        {
+                            getLogger().debug( "Found " + artifactVersion );
+                            pluginValid = false;
+                        }
+                    }
+        }
-            String artifactVersion = artifact.getVersion();
-
-            if ( pluginValid && !metaVersionId.equals( artifactVersion ) )
-            {
-                version = artifactVersion;
-            }
+        if ( !metaVersionId.equals( artifactVersion ) )
+        {
+            version = artifactVersion;
+            resolvedMetaVersions.put( key, version );
