Prevent scanning of modules that are not in the current reactor, and simplify the API usage for scanning in a reactor scenario.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@509715 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-    
+
+    public void scanForBuildExtensions( List files, ArtifactRepository localRepository,
+                                        ProfileManager globalProfileManager )
+        throws ExtensionScanningException
+    {
+        List visited = new ArrayList();
+
+        for ( Iterator it = files.iterator(); it.hasNext(); )
+        {
+            File pom = (File) it.next();
+
+            scanInternal( pom, localRepository, globalProfileManager, visited, files );
+        }
+    }
+
-        scanInternal( pom, localRepository, globalProfileManager, new ArrayList() );
+        scanInternal( pom, localRepository, globalProfileManager, new ArrayList(), Collections.singletonList( pom ) );
-    
+
+    // TODO: Use a build-context cache object for visitedModelIdx and reactorFiles, 
+    //       once we move to just-in-time project scanning.
-                               List visitedModelIds )
+                               List visitedModelIds, List reactorFiles )
-        
+
-            
+
+                File modelPom = lineageIterator.getPOMFile();
+
-                
+
-                
-                visitedModelIds.add( key );
-                
-                File modelPom = lineageIterator.getPOMFile();
-                getLogger().debug( "Checking: " + model.getId() + " for extensions. (It has " + model.getModules().size() + " modules.)" );
-                
+                visitedModelIds.add( key );
+
+                getLogger().debug(
+                                   "Checking: " + model.getId() + " for extensions. (It has "
+                                       + model.getModules().size() + " modules.)" );
+
-                
+
-                checkModulesForExtensions( modelPom, model, localRepository, originalRemoteRepositories, globalProfileManager, visitedModelIds );
-                
+                if ( !reactorFiles.contains( modelPom ) )
+                {
+                    getLogger().debug(
+                                       "POM: " + modelPom
+                                           + " is not in the current reactor. Its modules will not be scanned." );
+                }
+                else
+                {
+                    checkModulesForExtensions( modelPom, model, localRepository, originalRemoteRepositories,
+                                               globalProfileManager, visitedModelIds, reactorFiles );
+                }
+
-            
+
-            throw new ExtensionScanningException( "Failed to interpolate model from: " + pom + " prior to scanning for extensions.", e );
+            throw new ExtensionScanningException( "Failed to interpolate model from: " + pom
+                + " prior to scanning for extensions.", e );
-        
+
-        
+
-        
+
-                                            List visitedModelIds )
+                                            List visitedModelIds, List reactorFiles )
-                
+
-                    throw new ExtensionScanningException( "Error getting canonical path for modulePomDirectory.",  e );
+                    throw new ExtensionScanningException( "Error getting canonical path for modulePomDirectory.", e );
-                                           + "; continuing scan with next module. (Full path was: " + modulePomDirectory + ")" );
+                                           + "; continuing scan with next module. (Full path was: "
+                                           + modulePomDirectory + ")" );
-                scanInternal( modulePomDirectory, localRepository, globalProfileManager, visitedModelIds );
+                scanInternal( modulePomDirectory, localRepository, globalProfileManager, visitedModelIds, reactorFiles );
