Fixing plugin manager/plugin version manager for use with the help plugin...restoring backward compat.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@536027 13f79535-47bb-0310-9956-ffa450edef68

-            PluginDescriptor pluginDescriptor;
-            try
-            {
-                pluginDescriptor = pluginLoader.loadPlugin( mojoBinding, project );
-            }
-            catch ( PluginLoaderException e )
-            {
-                throw new LifecyclePlannerException( e.getMessage(), e );
-            }
-
-            MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( mojoBinding.getGoal() );
-            if ( mojoDescriptor == null )
-            {
-                throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal() + " does not exist in plugin: "
-                    + pluginDescriptor.getId() + "." );
-            }
-
-            findForkModifiers( mojoBinding, pluginDescriptor, planElement, lifecycleBindings, project, new LinkedList(), tasks );
+            findForkModifiers( mojoBinding, planElement, lifecycleBindings, project );
+    private void findForkModifiers( MojoBinding mojoBinding, ModifiablePlanElement planElement,
+                                    LifecycleBindings lifecycleBindings, MavenProject project )
+        throws LifecyclePlannerException, LifecycleSpecificationException, LifecycleLoaderException
+    {
+        PluginDescriptor pluginDescriptor;
+        try
+        {
+            pluginDescriptor = pluginLoader.loadPlugin( mojoBinding, project );
+        }
+        catch ( PluginLoaderException e )
+        {
+            throw new LifecyclePlannerException( e.getMessage(), e );
+        }
+
+        MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( mojoBinding.getGoal() );
+        if ( mojoDescriptor == null )
+        {
+            throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal() + " does not exist in plugin: "
+                + pluginDescriptor.getId() + "." );
+        }
+
+        findForkModifiers( mojoBinding, pluginDescriptor, planElement, lifecycleBindings, project, new LinkedList() );
+    }
+
+                // findForkModifiers( mojoBinding, pluginDescriptor, planElement, lifecycleBindings, 
+                //                    project, forkingBindings, tasks );
+                for ( Iterator reportBindingIt = reportBindings.iterator(); reportBindingIt.hasNext(); )
+                {
+                    MojoBinding reportBinding = (MojoBinding) reportBindingIt.next();
+                    
+                    PluginDescriptor pd;
+                    try
+                    {
+                        pd = pluginLoader.loadReportPlugin( mojoBinding, project );
+                    }
+                    catch ( PluginLoaderException e )
+                    {
+                        throw new LifecyclePlannerException( "Failed to load report-plugin descriptor for: "
+                            + MojoBindingUtils.toString( reportBinding ) + ". Reason: " + e.getMessage(), e );
+                    }
+
+//                    findForkModifiers( reportBinding, planElement, lifecycleBindings, project );
+                }
+
-                
+
-                        ((DirectInvocationOriginElement) planElement).addDirectInvocationModifier( modder );
+                        ( (DirectInvocationOriginElement) planElement ).addDirectInvocationModifier( modder );
-                                    LinkedList forkingBindings, List tasks )
+                                    LinkedList forkingBindings )
-                recurseSingleMojoFork( mojoBinding, pluginDescriptor, planElement, mergedBindings, project, forkingBindings,
-                                       tasks );
+                recurseSingleMojoFork( mojoBinding, pluginDescriptor, planElement, mergedBindings, project, forkingBindings );
-                recursePhaseMojoFork( mojoBinding, pluginDescriptor, planElement, mergedBindings, project, forkingBindings, tasks );
+                recursePhaseMojoFork( mojoBinding, pluginDescriptor, planElement, mergedBindings, project, forkingBindings );
-                                                           LinkedList forkingBindings, List tasks )
+                                                           LinkedList forkingBindings )
-            
+
-            
+
-                findForkModifiers( invokedBinding, pluginDescriptor, forkedPlan, forkedBindings, project,
-                                   forkingBindings, tasks );
+                findForkModifiers( invokedBinding, pluginDescriptor, forkedPlan, forkedBindings, project, forkingBindings );
-            
+
-                                                    MavenProject project, LinkedList forkingBindings, List tasks )
+                                                    MavenProject project, LinkedList forkingBindings )
-            findForkModifiers( forkedBinding, forkedPluginDescriptor, mpe, bindings, project, forkingBindings, tasks );
+            findForkModifiers( forkedBinding, forkedPluginDescriptor, mpe, bindings, project, forkingBindings );
-            List planMojoBindings = ((BuildPlan) mpe).getPlanMojoBindings( project, lifecycleBindingManager );
-            
+            List planMojoBindings = ( (BuildPlan) mpe ).getPlanMojoBindings( project, lifecycleBindingManager );
+
-            
+
-                                       LinkedList forkingBindings, List tasks )
+                                       LinkedList forkingBindings )
-        modifyBuildPlanForForkedLifecycle( mojoBinding, pluginDescriptor, planElement, cloned, project, forkingBindings, tasks );
+        modifyBuildPlanForForkedLifecycle( mojoBinding, pluginDescriptor, planElement, cloned, project, forkingBindings );
-                                        MavenProject project, LinkedList forkingBindings, List tasks )
+                                        MavenProject project, LinkedList forkingBindings )
-                                                      project, forkingBindings, tasks );
+                                                      project, forkingBindings );
