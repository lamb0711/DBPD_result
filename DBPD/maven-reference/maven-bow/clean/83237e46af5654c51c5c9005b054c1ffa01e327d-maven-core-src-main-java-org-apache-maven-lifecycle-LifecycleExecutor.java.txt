[MNG-3004] Concurrent building of multimodule projects

This commit consists of a modularization of the DefaultLifecycleExecutor into smaller
components. This is primarily done with the intention of extracting execution strategy 
somewhat from the rest of the logic.

It also contains three differenent execution strategies:
A) Linear ("Classic")
B) Parallel (Based on Dan's original implemementation)
C) Weave (Still experimental) 

 
The command line -T option activates parallel running, and the argument
is in the form -T <[nThreads, a float][C][W]|auto>

Notes:
* The output demultiplexer is disabled in this commit, and output will appear intermingled.
* The modello plugin has known problems
* Surefire must be run in forkmode at least once.


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@931884 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
-import org.apache.maven.plugin.InvalidPluginDescriptorException;
-import org.apache.maven.plugin.MojoExecution;
-import org.apache.maven.plugin.MojoNotFoundException;
-import org.apache.maven.plugin.PluginDescriptorParsingException;
-import org.apache.maven.plugin.PluginManagerException;
-import org.apache.maven.plugin.PluginNotFoundException;
-import org.apache.maven.plugin.PluginResolutionException;
-import org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException;
-import org.apache.maven.plugin.version.PluginVersionResolutionException;
-import org.apache.maven.project.MavenProject;
-    /**
-     * Calculate the list of {@link org.apache.maven.plugin.descriptor.MojoDescriptor} objects to run for the selected lifecycle phase.
-     * 
-     * @param phase
-     * @param session
-     * @return
-     * @throws InvalidPluginDescriptorException 
-     * @throws LifecycleExecutionException
-     */
-    MavenExecutionPlan calculateExecutionPlan( MavenSession session, String... tasks )
-        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
-        MojoNotFoundException, NoPluginFoundForPrefixException,
-        InvalidPluginDescriptorException, PluginManagerException, LifecyclePhaseNotFoundException,
-        LifecycleNotFoundException, PluginVersionResolutionException;
-        
-    // by the POM builder because they will have to be defined in plugin management. Once this is done then it
+    // by the POM builder because they will have to be defined in plugin management. Once this is setComplete then it
-    /**
-     * Calculates the forked mojo executions requested by the mojo associated with the specified mojo execution.
-     * 
-     * @param mojoExecution The mojo execution for which to calculate the forked mojo executions, must not be {@code
-     *            null}.
-     * @param session The current build session that holds the projects and further settings, must not be {@code null}.
-     */
-    void calculateForkedExecutions( MojoExecution mojoExecution, MavenSession session )
-        throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException,
-        PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
-        LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException;
-
-    /**
-     * Executes the previously calculated forked mojo executions of the given mojo execution. If the specified mojo
-     * execution requires no forking, this method does nothing. The return value denotes a subset of the projects from
-     * the session that have been forked. The method {@link MavenProject#getExecutionProject()} of those projects
-     * returns the project clone on which the forked execution were performed. It is the responsibility of the caller to
-     * reset those execution projects to {@code null} once they are no longer needed to free memory and to avoid
-     * accidental usage by unrelated mojos.
-     * 
-     * @param mojoExecution The mojo execution whose forked mojo executions should be processed, must not be {@code
-     *            null}.
-     * @param session The current build session that holds the projects and further settings, must not be {@code null}.
-     * @return The (unmodifiable) list of projects that have been forked, can be empty if no forking was required but
-     *         will never be {@code null}.
-     */
-    List<MavenProject> executeForkedExecutions( MojoExecution mojoExecution, MavenSession session )
-        throws LifecycleExecutionException;
-
