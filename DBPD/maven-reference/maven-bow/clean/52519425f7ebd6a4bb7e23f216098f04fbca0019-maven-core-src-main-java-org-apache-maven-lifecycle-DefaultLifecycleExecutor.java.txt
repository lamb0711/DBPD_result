o Restored reactor failure behaviors

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@792111 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.execution.MavenExecutionRequest;
+            if ( session.isBlackListed( currentProject ) )
+            {
+                logger.info( "Skipping " + currentProject.getName() );
+                logger.info( "This project has been banned from the build due to previous failures." );
+
+                continue;
+            }
+
-                MavenExecutionPlan executionPlan;
-
-                try
-                {
-                    executionPlan = calculateExecutionPlan( session, goals.toArray( new String[] {} ) );
-                }
-                catch ( Exception e )
-                {
-                    session.getResult().addException( e );
-                    return;
-                }
+                MavenExecutionPlan executionPlan = calculateExecutionPlan( session, goals.toArray( new String[] {} ) );
-                // mojoDescriptor.isDependencyResolutionRequired() is actually the scope of the dependency resolution required, not a boolean ... yah.
-                try
-                {
-                    projectDependenciesResolver.resolve( currentProject, executionPlan.getRequiredResolutionScopes(), session.getLocalRepository(), currentProject.getRemoteArtifactRepositories() );
-                }
-                catch ( ArtifactNotFoundException e )
-                {
-                    session.getResult().addException( e );
-                    return;
-                }
-                catch ( ArtifactResolutionException e )
-                {
-                    session.getResult().addException( e );
-                    return;
-                }
+                projectDependenciesResolver.resolve( currentProject, executionPlan.getRequiredResolutionScopes(), session.getLocalRepository(), currentProject.getRemoteArtifactRepositories() );
-                    try
-                    {
-                        logger.info( executionDescription( mojoExecution, currentProject ) );
-                        pluginManager.executeMojo( session, mojoExecution );
-                    }
-                    catch ( Exception e )
-                    {
-                        session.getResult().addException( e );
-                        return;
-                    }
+                    logger.info( executionDescription( mojoExecution, currentProject ) );
+                    pluginManager.executeMojo( session, mojoExecution );
+            catch ( Exception e )
+            {
+                session.getResult().addException( e );
+
+                if ( MavenExecutionRequest.REACTOR_FAIL_NEVER.equals( session.getReactorFailureBehavior() ) )
+                {
+                    // continue the build
+                }
+                else if ( MavenExecutionRequest.REACTOR_FAIL_AT_END.equals( session.getReactorFailureBehavior() ) )
+                {
+                    // continue the build but ban all projects that depend on the failed one
+                    session.blackList( currentProject );
+                }
+                else if ( MavenExecutionRequest.REACTOR_FAIL_FAST.equals( session.getReactorFailureBehavior() ) )
+                {
+                    // abort the build
+                    return;
+                }
+                else
+                {
+                    throw new IllegalArgumentException( "invalid reactor failure behavior "
+                        + session.getReactorFailureBehavior() );
+                }
+            }
