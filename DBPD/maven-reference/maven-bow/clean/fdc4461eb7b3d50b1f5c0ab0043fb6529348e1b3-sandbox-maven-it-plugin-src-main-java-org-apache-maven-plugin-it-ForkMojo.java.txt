Building maven projects works; it runs all integration test projects,
and when one fails (FAIL_AT_END) the build of this project fails too.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@279336 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.ArtifactRepositoryFactory;
-import org.apache.maven.artifact.repository.DefaultArtifactRepository;
-import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
+import org.apache.maven.execution.MavenExecutionResponse;
+import org.apache.maven.execution.ReactorManager;
+import org.apache.maven.lifecycle.LifecycleExecutionException;
+import org.apache.maven.lifecycle.LifecycleExecutor;
+import org.codehaus.plexus.util.dag.CycleDetectedException;
+     * @parameter expression="${component.org.apache.maven.lifecycle.LifecycleExecutor}"
+     */
+    private LifecycleExecutor lifecycleExecutor;
+
+    /**
-
-    private File projectsDir;
-
-
-    private ArtifactRepository artifactRepo;
-
-    private MavenProjectBuilder projectBuilder;
+    private File integrationTestsDirectory;
-        initComponents();
-
-        buildProjects( listITPoms() );
-    }
-
-    private void initComponents()
-        throws MojoExecutionException
-    {
-            artifactRepo = createLocalRepository();
-
-            projectBuilder = (MavenProjectBuilder)
-                session.getContainer().lookup( MavenProjectBuilder.ROLE );
-
-            if ( projectBuilder == null )
-                throw new MojoExecutionException( "Lookup for MavenProjectBuilder returned null" );
+            buildProjects();
-        catch (ComponentLookupException e)
+        catch ( CycleDetectedException e )
-            throw new MojoExecutionException( "Cannot get a MavenProjectBuilder", e);
+            throw new MojoExecutionException( "Error building projects", e );
+        }
+        catch ( LifecycleExecutionException e )
+        {
+            throw new MojoExecutionException( "Error building projects", e );
-    private void buildProjects( List poms )
+    private void buildProjects()
+        throws CycleDetectedException, LifecycleExecutionException, MojoExecutionException
-        getLog().info( "Building " + poms.size() + " integration test projects.." );
+        List projects = collectProjects();
+
+        ReactorManager rm = new ReactorManager( projects );
+
+        rm.setFailureBehavior( ReactorManager.FAIL_AT_END );
+
+        List goals = Collections.singletonList( "package" );
+
+        MavenSession forkedSession = new MavenSession(
+            session.getContainer(), session.getSettings(),
+            session.getLocalRepository(),
+            session.getEventDispatcher(),
+            rm, goals, integrationTestsDirectory.toString()
+        );
+
+        MavenExecutionResponse response = lifecycleExecutor.execute( forkedSession,
+            rm, forkedSession.getEventDispatcher()
+        );
+
+        if ( response.isExecutionFailure() )
+        {
+            throw new MojoExecutionException(
+                "Integration test failed" );
+        }
+    }
+
+    private List collectProjects()
+        throws MojoExecutionException
+    {
+        List projects = new ArrayList();
+
+        MavenProjectBuilder projectBuilder;
+
+        try
+        {
+            projectBuilder = (MavenProjectBuilder)
+                session.getContainer().lookup( MavenProjectBuilder.ROLE );
+        }
+        catch ( ComponentLookupException e )
+        {
+            throw new MojoExecutionException( "Cannot get a MavenProjectBuilder", e );
+        }
+
+        List poms = listITPoms();
+
+            File pom = (File) i.next();
+
-                MavenProject p = buildProject( (File) i.next() );
+                MavenProject p = projectBuilder.build(
+                    pom, session.getLocalRepository(),
+                    new DefaultProfileManager( session.getContainer() ) );
-                getLog().info("Building " + p.getId() );
+                getLog().debug( "Adding project " + p.getId() );
+
+                projects.add( p );
+
-                getLog().error("Build Error", e);
+                throw new MojoExecutionException( "Error loading " + pom, e );
-    }
-    private MavenProject buildProject( File pom )
-        throws ProjectBuildingException
-    {
-        return projectBuilder.build( pom, artifactRepo, new DefaultProfileManager(
-            session.getContainer() ) );
+        return projects;
-        File [] children = projectsDir.listFiles();
+        File [] children = integrationTestsDirectory.listFiles();
-
-
-    // Duplicate code from MavenCli, slightly modified.
-
-    private ArtifactRepository createLocalRepository()
-        throws ComponentLookupException
-    {
-        ArtifactRepositoryLayout repositoryLayout = (ArtifactRepositoryLayout)
-            session.getContainer().lookup( ArtifactRepositoryLayout.ROLE, "default" );
-
-        ArtifactRepositoryFactory artifactRepositoryFactory = (ArtifactRepositoryFactory)
-            session.getContainer().lookup(
-        ArtifactRepositoryFactory.ROLE );
-
-        String url = "file://" + settings.getLocalRepository();
-        ArtifactRepository localRepository = new DefaultArtifactRepository( "local", url, repositoryLayout );
-
-        boolean snapshotPolicySet = false;
-
-        if ( settings.isOffline() )
-        {
-            artifactRepositoryFactory.setGlobalEnable( false );
-            snapshotPolicySet = true;
-        }
-
-        /* can't do this here.. :(
-        if ( !snapshotPolicySet && commandLine.hasOption( CLIManager.UPDATE_SNAPSHOTS ) )
-        {
-            artifactRepositoryFactory.setGlobalUpdatePolicy( ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS );
-        }
-
-        if ( commandLine.hasOption( CLIManager.CHECKSUM_FAILURE_POLICY ) )
-        {
-            artifactRepositoryFactory.setGlobalChecksumPolicy( ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL );
-        }
-        else if ( commandLine.hasOption( CLIManager.CHECKSUM_WARNING_POLICY ) )
-        {
-            artifactRepositoryFactory.setGlobalChecksumPolicy( ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
-        }
-        */
-
-        return localRepository;
-    }
-
