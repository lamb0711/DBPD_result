Final pass on cleaning up the mojo api...collapsed MavenPluginDescriptor and PluginDescriptor in the same way as MavenMojoDescriptor/MojoDescriptor had been; eliminated the need for plugin.descriptor.Dependency and MavenPluginDependency (using ComponentDependencies instead); adjusted the MojoExtractors (name?) to return Lists instead of Sets; added duplicate checking to a new addMojo(MojoDescriptor) method on PluginDescriptor, so we catch it on all sides; changed the Generators to use execute(outputDirectory, pluginDescriptor) rather than the myriad pluginDescriptor-derived values; added an IT for checking that the build for a plugin will fail if multiple mojos are detected with the same goal; and, added a special case to PluginDescriptor.getGoalPrefixFromArtifactId() to handle maven-plugin-plugin. That should be about it. I'm not sure that I've gotten the IT for that failure test added to svn yet, so that may follow.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168481 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.LinkedList;
+import org.codehaus.plexus.component.repository.ComponentSetDescriptor;
+
+import java.util.Iterator;
+    extends ComponentSetDescriptor
-    private List mojos;
-
-        return mojos;
+        return getComponents();
+        throws DuplicateMojoDescriptorException
-        this.mojos = new LinkedList( mojos );
+        for ( Iterator it = mojos.iterator(); it.hasNext(); )
+        {
+            MojoDescriptor descriptor = (MojoDescriptor) it.next();
+
+            addMojo( descriptor );
+        }
+    }
+
+    public void addMojo( MojoDescriptor mojoDescriptor )
+        throws DuplicateMojoDescriptorException
+    {
+        // this relies heavily on the equals() and hashCode() for ComponentDescriptor, 
+        // which uses role:roleHint for identity...and roleHint == goalPrefix:goal.
+        // role does not vary for Mojos.
+        List mojos = getComponents();
+
+        if ( mojos != null && mojos.contains( mojoDescriptor ) )
+        {
+            int indexOf = mojos.indexOf( mojoDescriptor );
+
+            MojoDescriptor existing = (MojoDescriptor) mojos.get( indexOf );
+
+            throw new DuplicateMojoDescriptorException( getGoalPrefix(), mojoDescriptor.getGoal(), existing
+                .getImplementation(), mojoDescriptor.getImplementation() );
+        }
+        else
+        {
+            addComponentDescriptor( mojoDescriptor );
+        }
+
+        setId( artifactId );
-    public List getDependencies()
-    {
-        return dependencies;
-    }
-
-    public void setDependencies( List dependencies )
-    {
-        this.dependencies = new LinkedList( dependencies );
-    }
-
-        return artifactId.replaceAll( "-?maven-?", "" ).replaceAll( "-?plugin-?", "" );
+        if ( "maven-plugin-plugin".equals( artifactId ) )
+        {
+            return "plugin";
+        }
+        else
+        {
+            return artifactId.replaceAll( "-?maven-?", "" ).replaceAll( "-?plugin-?", "" );
+        }
