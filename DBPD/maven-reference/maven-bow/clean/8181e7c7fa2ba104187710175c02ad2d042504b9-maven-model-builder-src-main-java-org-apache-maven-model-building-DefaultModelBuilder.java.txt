Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/maven into trunk

+            profileActivationContext.setProjectProperties( tmpModel.getProperties() );
+
-                problems.add( new ModelProblemCollectorRequest(ModelProblem.Severity.FATAL, ModelProblem.Version.BASE).setMessage(message));
+                problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.FATAL, ModelProblem.Version.BASE ).setMessage( message ) );
-        if ( hasModelErrors(problems) )
+        if ( hasModelErrors( problems ) )
-                    problems.add( new ModelProblemCollectorRequest(Severity.ERROR, Version.V20)
-                            .setMessage("Malformed POM " + modelSource.getLocation() + ": " + e.getMessage())
-                            .setException(e ));
+                    problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.V20 )
+                            .setMessage( "Malformed POM " + modelSource.getLocation() + ": " + e.getMessage() )
+                            .setException( e ) );
-                    problems.add( new ModelProblemCollectorRequest(Severity.WARNING, Version.V20)
-                            .setMessage("Malformed POM " + modelSource.getLocation() + ": " + e.getMessage())
-                            .setException(e));
+                    problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V20 )
+                            .setMessage( "Malformed POM " + modelSource.getLocation() + ": " + e.getMessage() )
+                            .setException( e ) );
-            problems.add( new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE)
-                    .setMessage("Non-parseable POM " + modelSource.getLocation() + ": " + e.getMessage())
-                    .setException(e));
+            problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.BASE )
+                    .setMessage( "Non-parseable POM " + modelSource.getLocation() + ": " + e.getMessage() )
+                    .setException( e ) );
-            problems.add( new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE)
-                    .setMessage("Non-readable POM " + modelSource.getLocation() + ": " + msg)
-                    .setException(e ));
+            problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.BASE )
+                    .setMessage( "Non-readable POM " + modelSource.getLocation() + ": " + msg )
+                    .setException( e ) );
-        if ( hasFatalErrors(problems) )
+        if ( hasFatalErrors( problems ) )
-                problems.add( new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE)
-                        .setMessage( "Invalid repository " + repository.getId() + ": " + e.getMessage())
-                        .setLocation(repository.getLocation( "" ))
-                        .setException(e) );
+                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
+                        .setMessage( "Invalid repository " + repository.getId() + ": " + e.getMessage() )
+                        .setLocation( repository.getLocation( "" ) )
+                        .setException( e ) );
-                problems.add( new ModelProblemCollectorRequest(Severity.WARNING, Version.V20)
-                        .setMessage( "'build.plugins.plugin.version' for " + key + " is missing.")
-                        .setLocation(location));
+                problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.V20 )
+                        .setMessage( "'build.plugins.plugin.version' for " + key + " is missing." )
+                        .setLocation( location ) );
-                problems.add( new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE)
-                        .setMessage( "Invalid packaging for parent POM " + ModelProblemUtils.toSourceHint( parentModel ) + ", must be \"pom\" but is \""
-                                    + parentModel.getPackaging() + "\"")
-                        .setLocation(parentModel.getLocation( "packaging" )));
+                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
+                        .setMessage( "Invalid packaging for parent POM " + ModelProblemUtils.toSourceHint( parentModel )
+                                     + ", must be \"pom\" but is \"" + parentModel.getPackaging() + "\"" )
+                        .setLocation( parentModel.getLocation( "packaging" ) ) );
-            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.BASE)
-                    .setMessage( buffer.toString())
-                    .setLocation( parent.getLocation( "" )));
+            problems.add( new ModelProblemCollectorRequest( Severity.WARNING, Version.BASE )
+                    .setMessage( buffer.toString() )
+                    .setLocation( parent.getLocation( "" ) ) );
-            problems.add( new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE)
-                    .setMessage( buffer.toString())
-                    .setLocation(parent.getLocation( "" ))
-                    .setException(e));
+            problems.add( new ModelProblemCollectorRequest( Severity.FATAL, Version.BASE )
+                    .setMessage( buffer.toString() )
+                    .setLocation( parent.getLocation( "" ) )
+                    .setException( e ) );
-                problems.add( new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE)
-                        .setMessage( "'dependencyManagement.dependencies.dependency.groupId' for " + dependency.getManagementKey() + " is missing.")
-                        .setLocation( dependency.getLocation( "" )));
+                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
+                        .setMessage( "'dependencyManagement.dependencies.dependency.groupId' for "
+                                        + dependency.getManagementKey() + " is missing." )
+                        .setLocation( dependency.getLocation( "" ) ) );
-                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE)
-                        .setMessage( "'dependencyManagement.dependencies.dependency.artifactId' for " + dependency.getManagementKey() + " is missing.")
-                        .setLocation( dependency.getLocation( "" )));
+                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
+                        .setMessage( "'dependencyManagement.dependencies.dependency.artifactId' for "
+                                        + dependency.getManagementKey() + " is missing." )
+                        .setLocation( dependency.getLocation( "" ) ) );
-                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE)
-                        .setMessage( "'dependencyManagement.dependencies.dependency.version' for " + dependency.getManagementKey() + " is missing.")
-                        .setLocation( dependency.getLocation( "" )));
+                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
+                        .setMessage( "'dependencyManagement.dependencies.dependency.version' for "
+                                        + dependency.getManagementKey() + " is missing." )
+                        .setLocation( dependency.getLocation( "" ) ) );
-                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage( message ));
+                problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage( message ) );
-                            .setLocation( dependency.getLocation( "" ))
-                            .setException( e ));
+                            .setLocation( dependency.getLocation( "" ) )
+                            .setException( e ) );
-    protected boolean hasModelErrors(ModelProblemCollectorExt problems) {
-        if (problems instanceof DefaultModelProblemCollector) {
-            return ((DefaultModelProblemCollector)problems).hasErrors();
-        } else {
-            //the default execution path only knows the DefaultModelProblemCollector,
-            // only reason it's not in signature is because it's package private
-            throw new IllegalStateException(); 
+    protected boolean hasModelErrors( ModelProblemCollectorExt problems )
+    {
+        if ( problems instanceof DefaultModelProblemCollector )
+        {
+            return ( (DefaultModelProblemCollector) problems ).hasErrors();
-        
+        else
+        {
+            // the default execution path only knows the DefaultModelProblemCollector,
+            // only reason it's not in signature is because it's package private
+            throw new IllegalStateException();
+        }
-    protected boolean hasFatalErrors(ModelProblemCollectorExt problems) {
-        if (problems instanceof DefaultModelProblemCollector) {
-            return ((DefaultModelProblemCollector)problems).hasFatalErrors();
-        } else {
-            //the default execution path only knows the DefaultModelProblemCollector,
+    protected boolean hasFatalErrors( ModelProblemCollectorExt problems )
+    {
+        if ( problems instanceof DefaultModelProblemCollector )
+        {
+            return ( (DefaultModelProblemCollector) problems ).hasFatalErrors();
+        }
+        else
+        {
+            // the default execution path only knows the DefaultModelProblemCollector,
-            throw new IllegalStateException(); 
+            throw new IllegalStateException();
