PR: MNG-74
remove maven.properties use everywhere except classworlds conf


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163024 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Properties;
-    private Properties properties;
-
-        File mavenPropertiesFile = new File( System.getProperty( "user.home" ), "maven.properties" );
+        File userPomFile = new File( System.getProperty( "user.home" ), ".m2/pom.xml" );
-        if ( !mavenPropertiesFile.exists() )
+        reader = new ModelReader();
+        if ( !reader.parse( userPomFile ) )
-            System.out.println( "You must have a ~/maven.properties file and must contain the following entries:" );
-
-            System.out.println( "maven.home = /path/to/m2/installation" );
-
-            System.out.println( "maven.repo.local = /path/to/m2/repository" );
+            System.out.println( "You must have a ~/.m2/pom.xml file and must contain the following entries:" );
+            System.out.println( "<local>\n" );
+            System.out.println( "  <repository>/path/to/m2/repository</repository> (required)\n" );
+            System.out.println( "  <online>true</online> (optional)\n" );
+            System.out.println( "</local>" );
+        String mavenHome = null;
+
+        if ( args.length == 1 )
+        {
+            mavenHome = args[0];
+        }
+        else
+        {
+            mavenHome = System.getProperty( "maven.home" );
+
+            if ( mavenHome == null )
+            {
+                mavenHome = new File( System.getProperty( "user.home" ), "m2" ).getAbsolutePath();
+            }
+        }
+
+        File dist = new File( mavenHome );
+
+        System.out.println( "Maven installation directory: " + dist );
+
-        properties = loadProperties( mavenPropertiesFile );
-
-        // Make the system properties override maven.properties
-        properties.putAll( System.getProperties() );
-
-        for ( Iterator i = properties.keySet().iterator(); i.hasNext(); )
-        {
-            String key = (String) i.next();
-
-            // TODO: the namespace should be "properties" itself to support variables within the same file,
-            //       however, StringUtils would need to support recursive replacement
-            properties.setProperty( key, StringUtils.interpolate( properties.getProperty( key ), System.getProperties() ) );
-        }
-
-        String onlineProperty = properties.getProperty( "maven.online" );
+        String onlineProperty = System.getProperty( "maven.online", reader.getLocal().getOnline() );
-        downloader = new ArtifactDownloader( properties );
+        String mavenRepoLocal = System.getProperty( "maven.repo.local", reader.getLocal().getRepository() );
+
+        downloader = new ArtifactDownloader( mavenRepoLocal, reader.getRemoteRepositories() );
-        String mavenHome;
-
-        if ( args.length == 1 )
-        {
-            mavenHome = args[0];
-        }
-        else
-        {
-            mavenHome = properties.getProperty( "maven.home" );
-
-            if ( mavenHome == null )
-            {
-                mavenHome = new File( System.getProperty( "user.home" ), "m2" ).getAbsolutePath();
-            }
-        }
-
-        File dist = new File( mavenHome );
-
-                d.artifactId.equals( "maven-artifact" ) )
+                d.artifactId.equals( "maven-artifact" ) 
+)
-    private Properties loadProperties( File file )
-    {
-        try
-        {
-            return loadProperties( new FileInputStream( file ) );
-        }
-        catch ( Exception e )
-        {
-            // ignore
-        }
-
-        return new Properties();
-    }
-
-    private static Properties loadProperties( InputStream is )
-    {
-        Properties properties = new Properties();
-
-        try
-        {
-            if ( is != null )
-            {
-                properties.load( is );
-            }
-        }
-        catch ( IOException e )
-        {
-            // ignore
-        }
-        finally
-        {
-            try
-            {
-                if ( is != null )
-                {
-                    is.close();
-                }
-            }
-            catch ( IOException e )
-            {
-                // ignore
-            }
-        }
-
-        return properties;
-    }
-
+        private List remoteRepositories = new ArrayList();
+
+        private Local local = new Local();
+
+        private boolean insideLocal = false;
+
+        private boolean insideRepository = false;
+
+        public List getRemoteRepositories()
+        {
+            return remoteRepositories;
+        }
+
+        public Local getLocal()
+        {
+            return local;
+        }
+
+            else if ( rawName.equals( "repository" ) && !insideLocal )
+            {
+                insideRepository = true;
+            }
+            else if ( rawName.equals( "local" ) )
+            {
+                insideLocal = true;
+            }
+            else if ( rawName.equals( "local" ) )
+            {
+                insideLocal = false;
+            }
+            else if ( rawName.equals( "repository" ) )
+            {
+                if ( insideLocal )
+                {
+                    local.repository = getBodyText();
+                }
+                else 
+                {
+                    insideRepository = false;
+                }
+            }
+            else if ( insideRepository )
+            {
+                if ( rawName.equals( "url" ) )
+                {
+                    remoteRepositories.add( getBodyText() );
+                }
+            }
+
+    public static class Local
+        implements Serializable
+    {
+        private String repository;
+
+        private String online;
+
+        public String getRepository()
+        {
+            return this.repository;
+        }
+
+        public void setRepository( String repository )
+        {
+            this.repository = repository;
+        }   
+    
+        public String getOnline()
+        {
+            return this.online;
+        }
+
+        public void setOnline( String online )
+        {
+            this.online = online;
+        }   
+    }
