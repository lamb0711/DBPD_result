Adding the rest of the project errors to the aspect-bound ProjectErrorReporter.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@598864 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.resolver.AbstractArtifactResolutionException;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.model.Parent;
+import org.apache.maven.project.build.model.ModelAndFile;
-        writer.write( "While applying profile to: " );
+        writer.write( "Project Id: " );
+
+    public void reportErrorParsingProjectModel( String projectId,
+                                                File pomFile,
+                                                XmlPullParserException cause )
+    {
+        StringWriter writer = new StringWriter();
+
+        writer.write( NEWLINE );
+        if ( pomFile == null )
+        {
+            writer.write( "Error parsing built-in super POM!" );
+        }
+        else
+        {
+            writer.write( "Error parsing POM." );
+        }
+
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( cause.getMessage() );
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( "Line: " );
+        writer.write( "" + ( cause ).getLineNumber() );
+        writer.write( NEWLINE );
+        writer.write( "Column: " );
+        writer.write( "" + ( cause ).getColumnNumber() );
+        writer.write( NEWLINE );
+
+        addStandardInfo( projectId, pomFile, writer );
+        addTips( ProjectErrorTips.getTipsForPomParsingError( projectId, pomFile, cause ),
+                 writer );
+
+        registerProjectBuildError( cause, writer.toString() );
+    }
+
+    public void reportErrorParsingParentProjectModel( ModelAndFile childInfo,
+                                                      File parentPomFile,
+                                                      XmlPullParserException cause )
+    {
+        StringWriter writer = new StringWriter();
+
+        writer.write( NEWLINE );
+        if ( parentPomFile == null )
+        {
+            writer.write( "Error parsing built-in super POM!" );
+        }
+        else
+        {
+            writer.write( "Error parsing parent-POM." );
+        }
+
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( cause.getMessage() );
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( "Line: " );
+        writer.write( "" + cause.getLineNumber() );
+        writer.write( NEWLINE );
+        writer.write( "Column: " );
+        writer.write( "" + cause.getColumnNumber() );
+        writer.write( NEWLINE );
+
+        String projectId = childInfo.getModel().getParent().getId();
+        String childId = childInfo.getModel().getId();
+
+        addStandardInfo( projectId, parentPomFile, writer );
+
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( "Child-Project Id: " );
+        writer.write( childId );
+
+        addTips( ProjectErrorTips.getTipsForPomParsingError( projectId, parentPomFile, cause ),
+                 writer );
+
+        registerProjectBuildError( cause, writer.toString() );
+    }
+
+    public void reportErrorParsingProjectModel( String projectId,
+                                                File pomFile,
+                                                IOException cause )
+    {
+        StringWriter writer = new StringWriter();
+
+        writer.write( NEWLINE );
+        if ( pomFile == null )
+        {
+            writer.write( "Error parsing built-in super POM!" );
+        }
+        else
+        {
+            writer.write( "Error parsing POM." );
+        }
+
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( cause.getMessage() );
+        writer.write( NEWLINE );
+
+        addStandardInfo( projectId, pomFile, writer );
+        addTips( ProjectErrorTips.getTipsForPomParsingError( projectId, pomFile, cause ),
+                 writer );
+
+        registerProjectBuildError( cause, writer.toString() );
+    }
+
+    public void reportErrorParsingParentProjectModel( ModelAndFile childInfo,
+                                                      File parentPomFile,
+                                                      IOException cause )
+    {
+        StringWriter writer = new StringWriter();
+
+        writer.write( NEWLINE );
+        if ( parentPomFile == null )
+        {
+            writer.write( "Error parsing built-in super POM!" );
+        }
+        else
+        {
+            writer.write( "Error parsing parent-POM." );
+        }
+
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( cause.getMessage() );
+        writer.write( NEWLINE );
+
+        String projectId = childInfo.getModel().getParent().getId();
+        String childId = childInfo.getModel().getId();
+
+        addStandardInfo( projectId, parentPomFile, writer );
+
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( "Child-Project Id: " );
+        writer.write( childId );
+
+        addTips( ProjectErrorTips.getTipsForPomParsingError( projectId, parentPomFile, cause ),
+                 writer );
+
+        registerProjectBuildError( cause, writer.toString() );
+    }
+
+    public void reportParentPomArtifactNotFound( Parent parentRef,
+                                                 ArtifactRepository localRepo,
+                                                 List remoteRepos,
+                                                 String childId,
+                                                 File childPomFile,
+                                                 ArtifactNotFoundException cause )
+    {
+        reportArtifactError( parentRef, localRepo, remoteRepos, childId, childPomFile, cause );
+    }
+
+    public void reportParentPomArtifactUnresolvable( Parent parentRef,
+                                                     ArtifactRepository localRepo,
+                                                     List remoteRepos,
+                                                     String childId,
+                                                     File childPomFile,
+                                                     ArtifactResolutionException cause )
+    {
+        reportArtifactError( parentRef, localRepo, remoteRepos, childId, childPomFile, cause );
+    }
+
+    private void reportArtifactError( Parent parentRef,
+                                      ArtifactRepository localRepo,
+                                      List remoteRepos,
+                                      String childId,
+                                      File childPomFile,
+                                      AbstractArtifactResolutionException cause )
+    {
+        StringWriter writer = new StringWriter();
+
+        writer.write( NEWLINE );
+        writer.write( "Failed to resolve parent-POM from repository." );
+
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( "Parent POM Information: " );
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( "Group-Id: " );
+        writer.write( parentRef.getGroupId() );
+        writer.write( NEWLINE );
+        writer.write( "Artifact-Id: " );
+        writer.write( parentRef.getArtifactId() );
+        writer.write( NEWLINE );
+        writer.write( "Version: " );
+        writer.write( parentRef.getVersion() );
+
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( "Local Repository: " );
+        writer.write( localRepo.getBasedir() );
+
+        if ( ( remoteRepos != null ) && !remoteRepos.isEmpty() )
+        {
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Remote Repositories: " );
+
+            for ( Iterator it = remoteRepos.iterator(); it.hasNext(); )
+            {
+                ArtifactRepository remoteRepo = (ArtifactRepository) it.next();
+                writer.write( NEWLINE );
+                writer.write( remoteRepo.getId() );
+                writer.write( " -> " );
+                writer.write( remoteRepo.getUrl() );
+                // TODO: Get mirrors!!
+            }
+        }
+
+
+        writer.write( NEWLINE );
+        writer.write( NEWLINE );
+        writer.write( "Reason: " );
+        writer.write( cause.getMessage() );
+        writer.write( NEWLINE );
+
+        addStandardInfo( childId, childPomFile, writer );
+        addTips( ProjectErrorTips.getTipsForPomParsingError( childId, childPomFile, cause ),
+                 writer );
+
+        registerProjectBuildError( cause, writer.toString() );
+    }
