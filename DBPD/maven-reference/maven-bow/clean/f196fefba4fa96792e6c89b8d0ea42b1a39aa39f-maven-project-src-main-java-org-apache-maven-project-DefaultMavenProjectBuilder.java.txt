o as the profile has been removed from the super pom, we do not need to inject or process any profiles
  related to it. this great simplifies a lot of code
o caching the super project in the default project builder as it's never going to change now as no profiles
  are inject so it will only have to be constructed once an instance.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@571910 13f79535-47bb-0310-9956-ffa450edef68

-    // what is using this externally? jvz.
-    public MavenProject buildStandaloneSuperProject( ArtifactRepository localRepository )
-        throws ProjectBuildingException
-    {
-        //TODO mkleint - use the (Container, Properties) constructor to make system properties embeddable
-        ProfileManager profileManager = new DefaultProfileManager( container );
-        return buildStandaloneSuperProject( localRepository, profileManager );
-    }
+    private MavenProject superProject;
-    public MavenProject buildStandaloneSuperProject( ArtifactRepository localRepository,
-                                                     ProfileManager profileManager )
+    public MavenProject buildStandaloneSuperProject()
+        if ( this.superProject != null )
+        {
+            return this.superProject;
+        }
+
-        MavenProject project = new MavenProject( superModel );
-
-        ProjectBuildContext projectContext = ProjectBuildContext.getProjectBuildContext( buildContextManager, true );
-
-        projectContext.setCurrentProject( project );
-        projectContext.store( buildContextManager );
-
-        String projectId = safeVersionlessKey( STANDALONE_SUPERPOM_GROUPID, STANDALONE_SUPERPOM_ARTIFACTID );
-
-        project.setManagedVersionMap( createManagedVersionMap( projectId, superModel.getDependencyManagement(), null ) );
-
-        List activeProfiles = profileAdvisor.applyActivatedProfiles( superModel, null, profileManager.getExplicitlyActivatedIds(), profileManager.getExplicitlyDeactivatedIds() );
-        List activeExternalProfiles = profileAdvisor.applyActivatedExternalProfiles( superModel, null, profileManager );
-
-        LinkedHashSet profiles = new LinkedHashSet();
-
-        if ( ( activeProfiles != null ) && !activeProfiles.isEmpty() )
-        {
-            profiles.addAll( activeProfiles );
-        }
-
-        if ( ( activeExternalProfiles != null ) && !activeExternalProfiles.isEmpty() )
-        {
-            profiles.addAll( activeExternalProfiles );
-        }
-
-        project.setActiveProfiles( new ArrayList( profiles ) );
-
-        project.setOriginalModel( superModel );
+        superProject = new MavenProject( superModel );
-            project = processProjectLogic( "<Super-POM>", project, null, null, STRICT_MODEL_PARSING );
-
-            project.setExecutionRoot( true );
-
-            return project;
-        }
-        catch ( ModelInterpolationException e )
-        {
-            throw new ProjectBuildingException( projectId, e.getMessage(), e );
+            superProject.setRemoteArtifactRepositories( mavenTools.buildArtifactRepositories( superModel.getRepositories() ) );
-            throw new ProjectBuildingException( projectId, e.getMessage(), e );
+            // This will never happen with the repositories in the SuperPOM
-    }
+        superProject.setOriginalModel( superModel );
+
+        superProject.setExecutionRoot( true );
+
+        return superProject;
+    }
