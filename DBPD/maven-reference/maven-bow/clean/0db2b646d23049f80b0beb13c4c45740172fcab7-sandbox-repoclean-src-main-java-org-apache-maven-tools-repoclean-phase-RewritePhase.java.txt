
JIRA issues fixed:

MRM-1
MRM-7
MRM-3
MRM-5
o Pipelining all logging through a single Reporter now, to repository.report.txt
o Disabled WARNING reports by default, add 'reportWarnings=true' to config file to enable them.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@189629 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.tools.repoclean.report.FileReporter;
+import java.net.MalformedURLException;
-        throws Exception
+        throws ReportWriteException
-        File sourceBase = new File( new URL( sourceRepo.getUrl() ).getPath() );
+        File sourceBase = null;
+        try
+        {
+            sourceBase = new File( new URL( sourceRepo.getUrl() ).getPath() );
+        }
+        catch ( MalformedURLException e )
+        {
+            repoReporter.error( "Cannot construct source repository base File for: " + sourceRepo, e );
-        File targetBase = new File( new URL( targetRepo.getUrl() ).getPath() );
+            return null;
+        }
+
+        File targetBase = null;
+        try
+        {
+            targetBase = new File( new URL( targetRepo.getUrl() ).getPath() );
+        }
+        catch ( MalformedURLException e )
+        {
+            repoReporter.error( "Cannot construct target repository base File for: " + targetRepo, e );
+
+            return null;
+        }
-
+            
-            FileReporter artifactReporter = null;
-                artifactReporter = new FileReporter( reportsBase, artifactReportPath );
-
-                    try
+                    if ( !configuration.reportOnly() )
-                        if ( !configuration.reportOnly() )
+                        if ( logger.isDebugEnabled() )
-                            if ( logger.isDebugEnabled() )
-                            {
-                                logger.debug( "sourceRepo basedir is: \'" + sourceRepo.getBasedir() + "\'" );
-                                logger.debug( "targetRepo basedir is: \'" + targetRepo.getBasedir() + "\'" );
-                            }
-
-                            File targetParent = artifactTarget.getParentFile();
-                            if ( !targetParent.exists() )
-                            {
-                                targetParent.mkdirs();
-                            }
-
-                            if ( logger.isDebugEnabled() )
-                            {
-                                logger.debug( "Copying artifact[" + artifact.getId() + "] from \'" + artifactSource
-                                    + "\' to \'" + artifactTarget + "\'." );
-                            }
-
-                            copyArtifact( artifact, artifactTarget, artifactReporter );
+                            logger.debug( "sourceRepo basedir is: \'" + sourceRepo.getBasedir() + "\'" );
+                            logger.debug( "targetRepo basedir is: \'" + targetRepo.getBasedir() + "\'" );
-                    }
-                    catch ( Exception e )
-                    {
-                        repoReporter.error( "Error transferring artifact[" + artifact.getId()
-                            + "] to the target repository.", e );
-                        throw e;
+                        File targetParent = artifactTarget.getParentFile();
+                        if ( !targetParent.exists() )
+                        {
+                            targetParent.mkdirs();
+                        }
+
+                        if ( logger.isDebugEnabled() )
+                        {
+                            logger.debug( "Copying artifact[" + artifact.getId() + "] from \'" + artifactSource
+                                + "\' to \'" + artifactTarget + "\'." );
+                        }
+
+                        copyArtifact( artifact, artifactTarget, repoReporter );
-                    try
-                    {
-                        digestVerifier.verifyDigest( artifactSource, artifactTarget, transaction, artifactReporter,
-                                                     configuration.reportOnly() );
-                    }
-                    catch ( Exception e )
-                    {
-                        repoReporter.error( "Error verifying digest for artifact[" + artifact.getId() + "]", e );
+                    digestVerifier.verifyDigest( artifactSource, artifactTarget, transaction, repoReporter,
+                                                 configuration.reportOnly() );
-                        throw e;
-                    }
-
-                    try
-                    {
-                        rewriteMetadata( artifact, transaction, sourceBase, sourceRepo, targetBase, targetRepo,
-                                         artifactReporter, configuration.reportOnly() );
-                    }
-                    catch ( Exception e )
-                    {
-                        repoReporter.error( "Error rewriting POM for artifact[" + artifact.getId()
-                            + "] into the target repository.\n Error message: " + e.getMessage() );
-
-                        throw e;
-                    }
-
+                    rewriteMetadata( artifact, transaction, sourceBase, sourceRepo, targetBase, targetRepo,
+                                     repoReporter, configuration.reportOnly() );
+                    
-                    artifactReporter.warn( "Target file for artifact is present and not stale. (Artifact: \'"
+                    repoReporter.warn( "Target file for artifact is present and not stale. (Artifact: \'"
-                    artifactReporter.error( "Cannot find source file for artifact: \'" + artifact.getId()
+                    repoReporter.error( "Cannot find source file for artifact: \'" + artifact.getId()
-                if ( artifactReporter.hasError() )
+                if ( repoReporter.hasError() )
-                artifactReporter.error( "Error while rewriting file or POM for artifact: \'" + artifact.getId()
-                    + "\'. See report at: \'" + artifactReportPath + "\'.", e );
-            }
-            finally
-            {
-                if ( artifactReporter != null )
-                {
-                    artifactReporter.close();
-                }
+                repoReporter.error( "Error while rewriting file or POM for artifact: \'" + artifact.getId()
+                    + "\'.", e );
+                File targetPomParent = targetPom.getParentFile();
+                if ( !targetPomParent.exists() )
+                {
+                    targetPomParent.mkdirs();
+                }
+
+                FileWriter to = null;
-                    File targetPomParent = targetPom.getParentFile();
-                    if ( !targetPomParent.exists() )
+                    StringReader from = null;
+                    if ( pomContents != null )
-                        targetPomParent.mkdirs();
+                        from = new StringReader( pomContents );
-                    FileWriter to = null;
-                    try
-                    {
-                        StringReader from = null;
-                        if ( pomContents != null )
-                        {
-                            from = new StringReader( pomContents );
-                        }
+                    to = new FileWriter( targetPom );
-                        to = new FileWriter( targetPom );
-
-                        artifactPomRewriter.rewrite( artifact, from, to, artifactReporter, reportOnly );
-                    }
-                    finally
-                    {
-                        IOUtil.close( to );
-                    }
-
-                    boolean wroteBridge = bridgePomLocations( pom, targetPom, bridgedTargetPom, artifactReporter,
-                                                              transaction, reportOnly );
-
-                    digestVerifier.verifyDigest( sourcePom, targetPom, transaction, artifactReporter, reportOnly );
-
-                    if ( wroteBridge )
-                    {
-                        digestVerifier.verifyDigest( sourcePom, bridgedTargetPom, transaction, artifactReporter,
-                                                     reportOnly );
-                    }
-
+                    artifactPomRewriter.rewrite( artifact, from, to, artifactReporter, reportOnly );
-                catch ( Exception e )
+                finally
-                    throw e;
+                    IOUtil.close( to );
+                }
+
+                boolean wroteBridge = bridgePomLocations( pom, targetPom, bridgedTargetPom, artifactReporter,
+                                                          transaction, reportOnly );
+
+                digestVerifier.verifyDigest( sourcePom, targetPom, transaction, artifactReporter, reportOnly );
+
+                if ( wroteBridge )
+                {
+                    digestVerifier.verifyDigest( sourcePom, bridgedTargetPom, transaction, artifactReporter,
+                                                 reportOnly );
-    private void copyArtifact( Artifact artifact, File artifactTarget, FileReporter reporter )
+    private void copyArtifact( Artifact artifact, File artifactTarget, Reporter reporter )
