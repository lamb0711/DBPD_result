o got rid of all the settings related code and use the settings builder directly and push the responsibility of 
  dealing with settings semantics to the client code


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@512550 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.settings.RuntimeInfo;
-import org.apache.maven.settings.SettingsBuilderAdvice;
-/**
- * @author Jason van Zyl
- */
+/** @author Jason van Zyl */
-    implements MavenTools,
-    Contextualizable
+    implements MavenTools, Contextualizable
-    private MavenSettingsBuilder settingsBuilder;
-    
-    private SettingsValidator settingsValidator;
-
-    public ArtifactRepository createDefaultLocalRepository()
-        throws SettingsConfigurationException
-    {
-        return createLocalRepository( new File( getLocalRepositoryPath() ) );
-    }
-
-        return createRepository( "local", localRepositoryUrl);
+        return createRepository( "local", localRepositoryUrl );
-                                                String repositoryUrl)
+                                                 String repositoryUrl )
-    // Settings
-    // ----------------------------------------------------------------------------
-
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean interactive,
-                                   boolean offline,
-                                   boolean usePluginRegistry,
-                                   boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        return buildSettings( userSettingsPath, globalSettingsPath, interactive, offline, usePluginRegistry,
-                              pluginUpdateOverride, new SettingsBuilderAdvice() );
-    }
-    
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean interactive,
-                                   boolean offline,
-                                   boolean usePluginRegistry,
-                                   boolean pluginUpdateOverride,
-                                   SettingsBuilderAdvice advice )
-        throws SettingsConfigurationException
-    {
-        Settings settings = buildSettings( userSettingsPath, globalSettingsPath, pluginUpdateOverride, advice );
-        
-        if ( offline )
-        {
-            settings.setOffline( true );
-        }
-        
-        settings.setInteractiveMode( interactive );
-        
-        settings.setUsePluginRegistry( usePluginRegistry );
-        
-        return settings;
-    }
-    
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        return buildSettings( userSettingsPath, globalSettingsPath, pluginUpdateOverride, new SettingsBuilderAdvice() );
-    }
-    
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean pluginUpdateOverride,
-                                   SettingsBuilderAdvice advice )
-        throws SettingsConfigurationException
-    {
-        Settings settings;
-        
-        if ( advice == null )
-        {
-            advice = new SettingsBuilderAdvice();
-        }
-
-        try
-        {
-            settings = settingsBuilder.buildSettings( userSettingsPath, globalSettingsPath, advice );
-        }
-        catch ( IOException e )
-        {
-            throw new SettingsConfigurationException( "Error reading settings file", e );
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new SettingsConfigurationException( e.getMessage(), e.getDetail(), e.getLineNumber(),
-                                                      e.getColumnNumber() );
-        }
-
-        RuntimeInfo runtimeInfo = new RuntimeInfo( settings );
-
-        runtimeInfo.setPluginUpdateOverride( Boolean.valueOf( pluginUpdateOverride ) );
-
-        settings.setRuntimeInfo( runtimeInfo );
-
-        return settings;
-    }
-
-    // ----------------------------------------------------------------------------
+
+
+
-    //
-    // ----------------------------------------------------------------------------
-
-    /**
-     * Retrieve the user settings path using the followiwin search pattern:
-     * <p/>
-     * 1. System Property
-     * 2. Optional path
-     * 3. ${user.home}/.m2/settings.xml
-     */
-    public File getUserSettingsPath( String optionalSettingsPath )
-    {
-        File userSettingsPath = new File( System.getProperty( ALT_USER_SETTINGS_XML_LOCATION ) + "" );
-
-        if ( !userSettingsPath.exists() )
-        {
-            if ( optionalSettingsPath != null )
-            {
-                File optionalSettingsPathFile = new File( optionalSettingsPath );
-
-                if ( optionalSettingsPathFile.exists() )
-                {
-                    userSettingsPath = optionalSettingsPathFile;
-                }
-                else
-                {
-                    userSettingsPath = defaultUserSettingsFile;
-                }
-            }
-            else
-            {
-                userSettingsPath = defaultUserSettingsFile;
-            }
-        }
-
-        return userSettingsPath;
-    }
-
-    /**
-     * Retrieve the global settings path using the followiwin search pattern:
-     * <p/>
-     * 1. System Property
-     * 2. CLI Option
-     * 3. ${maven.home}/conf/settings.xml
-     */
-    public File getGlobalSettingsPath()
-    {
-        File globalSettingsFile = new File( System.getProperty( ALT_GLOBAL_SETTINGS_XML_LOCATION ) + "" );
-
-        if ( !globalSettingsFile.exists() )
-        {
-            globalSettingsFile = defaultGlobalSettingsFile;
-        }
-
-        return globalSettingsFile;
-    }
-
-    /**
-     * Retrieve the local repository path using the followiwin search pattern:
-     * <p/>
-     * 1. System Property
-     * 2. localRepository specified in user settings file
-     * 3. ${user.home}/.m2/repository
-     */
-    public String getLocalRepositoryPath( Settings settings )
-    {
-        String localRepositoryPath = System.getProperty( ALT_LOCAL_REPOSITORY_LOCATION );
-
-        if ( localRepositoryPath == null )
-        {
-            localRepositoryPath = settings.getLocalRepository();
-        }
-
-        if ( localRepositoryPath == null )
-        {
-            localRepositoryPath = defaultUserLocalRepository.getAbsolutePath();
-        }
-
-        return localRepositoryPath;
-    }
-
-    public String getLocalRepositoryPath()
-        throws SettingsConfigurationException
-    {
-        return getLocalRepositoryPath( buildSettings( getUserSettingsPath( null ),
-                                                      getGlobalSettingsPath(),
-                                                      false,
-                                                      true,
-                                                      false,
-                                                      false ) );
-    }
-
-    public ArtifactRepository getLocalRepository()
-        throws SettingsConfigurationException
-    {
-        return createLocalRepository( new File( getLocalRepositoryPath() ) );
-    }
-
-    // ----------------------------------------------------------------------------
-
-    public void writeSettings( Settings settings, Writer w )
-        throws IOException
-    {
-        SettingsValidationResult validationResult = settingsValidator.validate( settings );
-
-        if ( validationResult.getMessageCount() > 0 )
-        {
-            throw new IOException( "Failed to validate Settings.\n" + validationResult.render("\n") );
-        }
-        
-        Element root = new Element( "settings" );
-
-        Document doc = new Document( root );
-
-        SettingsJDOMWriter writer = new SettingsJDOMWriter();
-
-        String encoding = settings.getModelEncoding() != null ? settings.getModelEncoding() : "UTF-8";
-
-        Format format = Format.getPrettyFormat().setEncoding( encoding );
-
-        writer.write( settings, doc, w, format );
-    }
-
-    public Settings readSettings( Reader r )
-        throws IOException, SettingsConfigurationException
-    {
-        SettingsXpp3Reader reader = new SettingsXpp3Reader();
-        try
-        {
-            Settings settings = reader.read( r );
-            
-            SettingsValidationResult validationResult = settingsValidator.validate( settings );
-
-            if ( validationResult.getMessageCount() > 0 )
-            {
-                throw new IOException( "Failed to validate Settings.\n" + validationResult.render("\n") );
-            }
-            
-            return settings;
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new SettingsConfigurationException( "Failed to parse settings.", e );
-        }
-    }
-
