o Introduced ModelBuilder component that now hosts most of the logic from the project builder to construct the effective model. With maven-model-builder we now should have a rather slim module that tools can re-use for building models. The project builder is simply layered on top of the model builder.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@780627 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import org.apache.maven.model.Profile;
+@Deprecated
+    extends DefaultProjectBuildingRequest
-    private ArtifactRepository localRepository;
-
-    private List<ArtifactRepository> remoteRepositories;
-    
-    private Properties executionProperties;
-
-    private List<ModelEventListener> listeners;
-    
-    private MavenProject topProject;
-    
-    private boolean processPlugins = true;
-
-    private boolean lenientValidation;
-
-    private List<String> activeProfileIds;
-    
-    private List<String> inactiveProfileIds;
-    
-    private List<Profile> profiles;
-        
-    public MavenProject getTopLevelProjectFromReactor()
-    {
-    	return topProject;
-    }
-    
-    public void setTopLevelProjectForReactor(MavenProject mavenProject)
-    {
-    	this.topProject = mavenProject;
-    }       
-        this.localRepository = localRepository;
+        super.setLocalRepository( localRepository );
-    public ArtifactRepository getLocalRepository()
-    {
-        return localRepository;
-    }
-        
-    public List<ArtifactRepository> getRemoteRepositories()
-    {
-        if ( remoteRepositories == null )
-        {
-            remoteRepositories = new ArrayList<ArtifactRepository>();
-        }
-        return remoteRepositories;
-    }
-
-        this.remoteRepositories = remoteRepositories;
+        super.setRemoteRepositories( remoteRepositories );
-    
-    public Properties getExecutionProperties()
-    {
-        if ( executionProperties == null )
-        {
-            executionProperties = new Properties();
-        }
-        return executionProperties;
-    }
-        this.executionProperties = executionProperties;
+        super.setExecutionProperties( executionProperties );
-    public List<ModelEventListener> getModelEventListeners()
-    {
-        return listeners;
-    }
-
-        this.listeners = listeners;
+        super.setModelEventListeners( listeners );
-    public boolean isProcessPlugins()
-    {
-        return processPlugins;
-    }
-
-        this.processPlugins = processPlugins;
+        super.setProcessPlugins( processPlugins );
-        this.lenientValidation = lenientValidation;
+        super.setLenientValidation( lenientValidation );
-    public boolean istLenientValidation()
-    {
-        return lenientValidation;
-    }
-
-    public List<String> getActiveProfileIds()
-    {
-        if ( activeProfileIds == null )
-        {
-            activeProfileIds = new ArrayList<String>();
-        }
-        return activeProfileIds;        
-    }
-
-    public void setActiveProfileIds( List<String> activeProfileIds )
-    {
-        this.activeProfileIds = activeProfileIds;      
-    }
-
-    public List<String> getInactiveProfileIds()
-    {
-        if ( inactiveProfileIds == null )
-        {
-            inactiveProfileIds = new ArrayList<String>();
-        }
-        return inactiveProfileIds;
-    }
-
-    public void setInactiveProfileIds( List<String> inactiveProfileIds )
-    {
-        this.inactiveProfileIds = inactiveProfileIds;
-    }
-
-    public void setProfiles( List<Profile> profiles )
-    {
-        this.profiles = profiles;
-    }
-    
-    public void addProfile( Profile profile )
-    {
-        if ( profiles == null )
-        {
-            profiles = new ArrayList<Profile>();
-        }
-        
-        profiles.add( profile );
-    }
-
-    public List<Profile> getProfiles()
-    {
-        if ( profiles == null )
-        {
-            profiles = new ArrayList<Profile>();
-        }
-        return profiles;
-    }
-
