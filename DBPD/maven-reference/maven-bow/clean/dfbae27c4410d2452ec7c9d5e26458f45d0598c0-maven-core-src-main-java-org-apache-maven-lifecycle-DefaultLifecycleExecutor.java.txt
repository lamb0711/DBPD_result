o Added first-pass logging and event-monitoring impls. Converted all System.out calls in maven-component plugins to use logger.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163457 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.monitor.event.EventDispatcher;
+import org.apache.maven.monitor.event.MavenEvents;
+        EventDispatcher dispatcher = session.getEventDispatcher();
+        
+            
+            String event = MavenEvents.PHASE_EXECUTION;
-            if ( p.getGoals() != null )
+            // !! This is ripe for refactoring to an aspect.
+            // Event monitoring.
+            dispatcher.dispatchStart( event, p.getId() );
+            try
-                for ( Iterator i = p.getGoals().iterator(); i.hasNext(); )
+                if ( p.getGoals() != null )
-                    String goal = (String) i.next();
-
-                    PluginExecutionResponse pluginResponse = executeMojo( goal, session );
-
-                    if ( pluginResponse.isExecutionFailure() )
+                    for ( Iterator i = p.getGoals().iterator(); i.hasNext(); )
-                        response.setExecutionFailure( goal, pluginResponse.getFailureResponse() );
-                        return;
+                        String goal = (String) i.next();
+
+                        PluginExecutionResponse pluginResponse = executeMojo( goal, session );
+
+                        if ( pluginResponse.isExecutionFailure() )
+                        {
+                            response.setExecutionFailure( goal, pluginResponse.getFailureResponse() );
+                            return;
+                        }
+                
+                dispatcher.dispatchEnd( event, p.getId() );
+            catch ( LifecycleExecutionException e )
+            {
+                dispatcher.dispatchError( event, p.getId(), e );
+                
+                throw e;
+            }
+            // End event monitoring.
