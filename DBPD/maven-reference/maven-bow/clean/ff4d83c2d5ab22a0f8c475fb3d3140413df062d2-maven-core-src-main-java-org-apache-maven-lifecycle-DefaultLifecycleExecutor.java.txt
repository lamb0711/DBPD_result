o Renamed new plugin manager to make room for the legacy impl that will provide backward-compat with existing plugins
o Extracted plugin version resolution into a dedicated component

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@805962 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.plugin.PluginManager;
+import org.apache.maven.plugin.BuildPluginManager;
+import org.apache.maven.plugin.version.DefaultPluginVersionRequest;
+import org.apache.maven.plugin.version.PluginVersionRequest;
+import org.apache.maven.plugin.version.PluginVersionResolutionException;
+import org.apache.maven.plugin.version.PluginVersionResolver;
-    private PluginManager pluginManager;
+    private BuildPluginManager pluginManager;
+
+    @Requirement
+    private PluginVersionResolver pluginVersionResolver;
-        LifecycleNotFoundException
+        LifecycleNotFoundException, PluginVersionResolutionException
-        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
-        InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
+        InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
-        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
-    public void resolvePluginVersion( Plugin plugin, RepositoryRequest repositoryRequest )
-        throws PluginNotFoundException
+    private void resolvePluginVersion( Plugin plugin, RepositoryRequest repositoryRequest )
+        throws PluginVersionResolutionException
-        ArtifactRepository localRepository = repositoryRequest.getLocalRepository();
-
-        File artifactMetadataFile = null;
-        
-        String localPath; 
-        
-        // Search in remote repositories for a (released) version.
-        //
-        // maven-metadata-{central|nexus|...}.xml 
-        //
-        //TODO: we should cycle through the repositories but take the repository which actually
-        // satisfied the prefix.
-        for ( ArtifactRepository repository : repositoryRequest.getRemoteRepositories() )
-        {
-            localPath = plugin.getGroupId().replace( '.', '/' ) + "/" + plugin.getArtifactId() + "/maven-metadata-" + repository.getId() + ".xml";
-
-            artifactMetadataFile = new File( localRepository.getBasedir(), localPath );
-
-            if ( !artifactMetadataFile.exists() /* || user requests snapshot updates */)
-            {
-                try
-                {
-                    String remotePath = plugin.getGroupId().replace( '.', '/' ) + "/" + plugin.getArtifactId() + "/maven-metadata.xml";
-
-                    repositorySystem.retrieve( repository, artifactMetadataFile, remotePath, null );
-                }
-                catch ( TransferFailedException e )
-                {
-                    continue;
-                }
-                catch ( ResourceDoesNotExistException e )
-                {
-                    continue;
-                }
-            }
-
-            break;
-        }
-
-        // Search in the local repositiory for a (development) version
-        //
-        // maven-metadata-local.xml
-        //
-        if ( artifactMetadataFile == null || !artifactMetadataFile.exists() )
-        {
-            localPath =
-                plugin.getGroupId().replace( '.', '/' ) + "/" + plugin.getArtifactId() + "/maven-metadata-"
-                    + localRepository.getId() + ".xml";
-
-            artifactMetadataFile = new File( localRepository.getBasedir(), localPath );
-        }
-
-        if ( artifactMetadataFile.exists() )
-        {
-            logger.debug( "Extracting version for plugin " + plugin.getKey() + " from " + artifactMetadataFile );
-
-            try
-            {
-                Metadata pluginMetadata = readMetadata( artifactMetadataFile );
-
-                if ( pluginMetadata.getVersioning() != null )
-                {
-                    String release = pluginMetadata.getVersioning().getRelease();
-
-                    if ( StringUtils.isNotEmpty( release ) )
-                    {
-                        plugin.setVersion( release );
-                    }
-                    else
-                    {
-                        String latest = pluginMetadata.getVersioning().getLatest();
-
-                        if ( StringUtils.isNotEmpty( latest ) )
-                        {
-                            plugin.setVersion( latest );
-                        }
-                    }
-                }
-            }
-            catch ( RepositoryMetadataReadException e )
-            {
-                logger.warn( "Error reading plugin metadata: ", e );
-            }
-        }
-
-        if ( StringUtils.isEmpty( plugin.getVersion() ) )
-        {
-            throw new PluginNotFoundException( plugin, repositoryRequest.getRemoteRepositories() );
-        }
+        PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, repositoryRequest );
+        plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );
-            catch ( PluginNotFoundException e )
+            catch ( PluginVersionResolutionException e )
