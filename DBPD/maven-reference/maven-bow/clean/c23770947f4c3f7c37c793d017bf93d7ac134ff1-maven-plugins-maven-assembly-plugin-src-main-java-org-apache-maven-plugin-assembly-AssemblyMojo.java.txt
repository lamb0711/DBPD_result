o Finished MNG-632.
  Note: I'm not sure wheter my tmpDir approach is the best.
  It's certain to work all the time (depending on FileUtils.createTempFile),
  but it may leave a lot of 'garbage' in target/.

o Updated maven-core's assembly descriptor to make use
  of new line endings functionality.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@267344 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.DirectoryScanner;
+import org.codehaus.plexus.util.FileUtils;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileWriter;
+    /**
+     * @parameter expression="${project.build.directory}/archive-tmp"
+     * @required
+     * @readonly
+     */
+    private File tempRoot;
+
+            String lineEnding = getLineEndingCharacters( fileSet.getLineEnding() );
+            
+            File tmpDir = null;
+                
+            if ( lineEnding != null )
+            {
+                tmpDir = FileUtils.createTempFile( "", "", tempRoot );
+                tmpDir.mkdirs();
+            }
+            
-                " file perms: " + Integer.toString( archiver.getDefaultFileMode(), 8 ) );
+                " file perms: " + Integer.toString( archiver.getDefaultFileMode(), 8 ) +
+                ( fileSet.getLineEnding() == null ? "" : " lineEndings: " + fileSet.getLineEnding() ) );
-    
+
+            // TODO: default excludes should be in the archiver?
-            // TODO: default excludes should be in the archiver?
-            archiver.addDirectory( new File( directory ), output, includes, excludes );
+            
+            File archiveBaseDir = new File( directory );
+            
+            if ( lineEnding != null )
+            {
+                copySetReplacingLineEndings( archiveBaseDir, tmpDir, includes, excludes, lineEnding );
+
+                archiveBaseDir = tmpDir;
+            }
+
+            archiver.addDirectory( archiveBaseDir, output, includes, excludes );
-    
+
+    private void copyReplacingLineEndings( File source, File dest, String lineEndings )
+        throws IOException
+    {
+        getLog().debug( "Copying while replacing line endings: " + source + " to " + dest );
+
+        BufferedReader in = new BufferedReader( new FileReader ( source ) );
+        BufferedWriter out = new BufferedWriter ( new FileWriter( dest ) );
+        
+        String line;
+        
+        while ( ( line = in.readLine()) != null )
+        {
+            out.write( line );
+            out.write( lineEndings );
+        }
+        out.flush();
+        out.close();
+    }
+
+    
+    private void copySetReplacingLineEndings( File archiveBaseDir, File tmpDir, String[] includes, String[] excludes, String lineEnding )
+        throws ArchiverException
+    {
+        DirectoryScanner scanner = new DirectoryScanner();
+        scanner.setBasedir( archiveBaseDir.getAbsolutePath() );
+        scanner.setIncludes( includes );
+        scanner.setExcludes( excludes );
+        scanner.scan();
+        
+        String [] dirs = scanner.getIncludedDirectories();
+        
+        for ( int j = 0; j < dirs.length; j ++)
+        {
+            new File( tempRoot, dirs[j] ).mkdirs();
+        }
+    
+        String [] files = scanner.getIncludedFiles();
+    
+        for ( int j = 0; j < files.length; j ++)
+        {
+            File targetFile = new File( tmpDir, files[j] );
+    
+            try
+            {
+                targetFile.getParentFile().mkdirs();
+
+                copyReplacingLineEndings( new File( archiveBaseDir, files[j] ), targetFile, lineEnding );
+            }
+            catch (IOException e)
+            {
+                throw new ArchiverException("Error copying file '" +
+                    files[j] + "' to '" + targetFile + "'", e);
+            }
+        }
+
+    }	
+
+    
+    private static String getLineEndingCharacters( String lineEnding )
+        throws ArchiverException
+    {
+        if ( lineEnding != null )
+        {
+            if ( lineEnding.equals( "keep" ) )
+            {
+                lineEnding = null;
+            }
+            else if ( lineEnding.equals( "dos" ) || lineEnding.equals( "crlf" ) )
+            {
+                lineEnding = "\r\n";
+            }
+            else if ( lineEnding.equals( "unix" ) || lineEnding.equals( "lf" ) )
+            {
+                lineEnding = "\n";
+            }
+            else
+            {
+                throw new ArchiverException( "Illlegal lineEnding specified: '" +
+                    lineEnding + "'");
+            }
+        }
+        
+        return lineEnding;
+    }
+
+    
