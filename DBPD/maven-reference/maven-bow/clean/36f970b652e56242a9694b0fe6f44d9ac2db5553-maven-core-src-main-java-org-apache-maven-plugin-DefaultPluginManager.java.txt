don't fail if there is a default value and the parameter is set to required.
Reformat according to intelliJ settings.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@165266 13f79535-47bb-0310-9956-ffa450edef68

-                    String message = "The maven plugin with groupId: '" + groupId + "' and artifactId: '" + artifactId
-                        + "' which was configured for use in this project does not have a version associated with it.";
+                    String message = "The maven plugin with groupId: '" + groupId + "' and artifactId: '" + artifactId +
+                        "' which was configured for use in this project does not have a version associated with it.";
-                throw new PluginManagerException(
-                                                  "Error occurred in the artifact container attempting to download plugin "
-                                                      + groupId + ":" + artifactId, e );
+                throw new PluginManagerException( "Error occurred in the artifact container attempting to download plugin " +
+                                                  groupId + ":" + artifactId, e );
-                if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() )
-                    && version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
+                if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
+                    version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
-                throw new PluginManagerException( "Internal configuration error while retrieving " + groupId + ":"
-                    + artifactId, e );
+                throw new PluginManagerException( "Internal configuration error while retrieving " + groupId + ":" +
+                                                  artifactId, e );
-            ( (ArtifactEnabledContainer) container ).addComponent( pluginArtifact, artifactResolver, session
-                .getPluginRepositories(), session.getLocalRepository(), metadataSource, artifactFilter );
+            ( (ArtifactEnabledContainer) container ).addComponent( pluginArtifact, artifactResolver,
+                                                                   session.getPluginRepositories(),
+                                                                   session.getLocalRepository(), metadataSource,
+                                                                   artifactFilter );
-                resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder, mojoDescriptor
-                    .getRequiresDependencyResolution() );
+                resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder,
+                                               mojoDescriptor.getRequiresDependencyResolution() );
-            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration, mojoDescriptor
-                .getConfiguration() );
+            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
+                                                                          mojoDescriptor.getConfiguration() );
-                    Map map = getPluginConfigurationFromExpressions( mojoDescriptor, mergedConfiguration,
+                    Map map = getPluginConfigurationFromExpressions( plugin, mojoDescriptor, mergedConfiguration,
-                    populatePluginFields( plugin, pomConfiguration, map, expressionEvaluator );
+                    populatePluginFields( plugin, pomConfiguration, expressionEvaluator );
-                    Map map = getPluginConfigurationFromExpressions( mojoDescriptor, mergedConfiguration,
+                    Map map = getPluginConfigurationFromExpressions( plugin, mojoDescriptor, mergedConfiguration,
-            if ( !editable
-                && ( pomConfiguration.getChild( lookupKey, false ) != null || pomConfiguration.getChild( key, false ) != null ) )
+            if ( !editable && ( pomConfiguration.getChild( lookupKey, false ) != null ||
+                pomConfiguration.getChild( key, false ) != null ) )
-                StringBuffer errorMessage = new StringBuffer().append( "ERROR: Cannot override read-only parameter: " )
-                    .append( key );
+                StringBuffer errorMessage = new StringBuffer().append( "ERROR: Cannot override read-only parameter: " ).append(
+                    key );
-    private void populatePluginFields( Mojo plugin, PlexusConfiguration configuration, Map map,
-                                      ExpressionEvaluator expressionEvaluator )
+    private void populatePluginFields( Mojo plugin, PlexusConfiguration configuration,
+                                       ExpressionEvaluator expressionEvaluator )
-
-        // Configuration does not store objects, so the non-String fields are configured here
-        // TODO: remove - this is for plugins built with alpha-1
-        for ( Iterator i = map.keySet().iterator(); i.hasNext(); )
-        {
-            String key = (String) i.next();
-
-            if ( configuration.getChild( key, false ) != null )
-            {
-                continue;
-            }
-
-            Object value = map.get( key );
-
-            if ( value != null )
-            {
-                Class clazz = plugin.getClass();
-                try
-                {
-                    Field f = findPluginField( clazz, key );
-                    boolean accessible = f.isAccessible();
-                    if ( !accessible )
-                    {
-                        f.setAccessible( true );
-                    }
-
-                    f.set( plugin, value );
-
-                    if ( !accessible )
-                    {
-                        f.setAccessible( false );
-                    }
-                }
-                catch ( NoSuchFieldException e )
-                {
-                    throw new PluginConfigurationException( "Unable to set field '" + key + "' on '" + clazz + "'", e );
-                }
-                catch ( IllegalAccessException e )
-                {
-                    throw new PluginConfigurationException( "Unable to set field '" + key + "' on '" + clazz + "'", e );
-                }
-            }
-        }
-    private Map getPluginConfigurationFromExpressions( MojoDescriptor goal, PlexusConfiguration mergedConfiguration,
-                                                      ExpressionEvaluator expressionEvaluator )
+    private Map getPluginConfigurationFromExpressions( Mojo plugin, MojoDescriptor goal,
+                                                       PlexusConfiguration mergedConfiguration,
+                                                       ExpressionEvaluator expressionEvaluator )
-                if ( !expression.equals( goalConfiguration.getChild( lookupKey, false ).getValue( null ) )
-                    && !expression.equals( goalConfiguration.getChild( key, false ).getValue( null ) ) )
+                if ( !expression.equals( goalConfiguration.getChild( lookupKey, false ).getValue( null ) ) &&
+                    !expression.equals( goalConfiguration.getChild( key, false ).getValue( null ) ) )
+            // TODO: remove. If there is a default value, required should have been removed by the descriptor generator
-                if ( parameter.getDefaultValue() != null )
+                Object defaultValue;
+                try
-                    value = expressionEvaluator.evaluate( parameter.getDefaultValue() );
+                    Field pluginField = findPluginField( plugin.getClass(), parameter.getName() );
+                    boolean accessible = pluginField.isAccessible();
+                    if ( !accessible )
+                    {
+                        pluginField.setAccessible( true );
+                    }
+                    defaultValue = pluginField.get( plugin );
+                    if ( !accessible )
+                    {
+                        pluginField.setAccessible( false );
+                    }
+                }
+                catch ( IllegalAccessException e )
+                {
+                    String message = "Error finding field for parameter '" + parameter.getName() + "'";
+                    throw new PluginConfigurationException( message, e );
+                }
+                catch ( NoSuchFieldException e )
+                {
+                    String message = "Error finding field for parameter '" + parameter.getName() + "'";
+                    throw new PluginConfigurationException( message, e );
+                }
+                if ( defaultValue != null )
+                {
+                    // TODO: allow expressions?
+                    value = defaultValue;
-                throw new PluginConfigurationException( createPluginParameterRequiredMessage( goal, parameter, expression ) );
+                throw new PluginConfigurationException(
+                    createPluginParameterRequiredMessage( goal, parameter, expression ) );
-    public static String createPluginParameterRequiredMessage( MojoDescriptor mojo, Parameter parameter, String expression )
+    public static String createPluginParameterRequiredMessage( MojoDescriptor mojo, Parameter parameter,
+                                                               String expression )
-        artifactFilter = new ExclusionSetFilter( new String[] {
-            "maven-core",
-            "maven-artifact",
-            "maven-model",
-            "maven-settings",
-            "maven-monitor",
-            "maven-plugin-api",
-            "maven-plugin-descriptor",
-            "plexus-container-default",
-            "maven-project",
-            "plexus-container-artifact",
-            "wagon-provider-api",
-            "classworlds",
-            "maven-plugin" } );
+        artifactFilter = new ExclusionSetFilter( new String[]{"maven-core", "maven-artifact", "maven-model",
+                                                              "maven-settings", "maven-monitor", "maven-plugin-api",
+                                                              "maven-plugin-descriptor", "plexus-container-default",
+                                                              "maven-project", "plexus-container-artifact",
+                                                              "wagon-provider-api", "classworlds", "maven-plugin"} );
-                                               MavenProjectBuilder mavenProjectBuilder, String scope )
+                                                MavenProjectBuilder mavenProjectBuilder, String scope )
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(), context
-            .getRemoteRepositories(), context.getLocalRepository(), sourceReader, filter );
+        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(),
+                                                                                context.getRemoteRepositories(),
+                                                                                context.getLocalRepository(),
+                                                                                sourceReader, filter );
