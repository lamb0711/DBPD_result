Fixing issues related to MNG-377, where the plugins.xml metadata was being mishandled. Separated updating of this metadata into a separate mojo, bound to the 'package' phase, and put in a validator for the POM (POM has to have distributionRepository now for maven-plugin's) which is bound to the 'validate' phase. Put together an integration test that uses modello:java as a case where the pluginGroups must be consulted. Also had to change the Verifier to check a verifier.properties for failOnErrorOutput, which will suppress IT failures based on [ERROR] log output (modello outputs one of these, and kills the IT unnecessarily).

MNG-377 should be resolved at this point.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@215890 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.repository.metadata.RepositoryMetadata;
+import org.apache.maven.artifact.repository.metadata.RepositoryMetadataManagementException;
+import org.apache.maven.artifact.repository.metadata.RepositoryMetadataManager;
+import org.apache.maven.plugin.AbstractMojo;
+import org.apache.maven.plugin.mapping.metadata.PluginMappingMetadata;
+import org.apache.maven.project.MavenProject;
+
+import java.io.File;
- * @goal install-mapping
+ * @goal installMapping
-    extends AbstractPluginMappingPublisherMojo
+    extends AbstractMojo
+    /**
+     * @parameter expression="${project}"
+     * @required
+     * @readonly
+     */
+    private MavenProject project;
+
+    /**
+     * @parameter expression="${component.org.apache.maven.artifact.repository.metadata.RepositoryMetadataManager}"
+     * @required
+     * @readonly
+     */
+    private RepositoryMetadataManager repositoryMetadataManager;
+
+    /**
+     * @parameter expression="${localRepository}"
+     * @required
+     * @readonly
+     */
+    private ArtifactRepository localRepository;
+
+    /**
+     * @parameter expression="${project.build.directory}/repository-metadata"
+     * @required
+     * @readonly
+     */
+    private String outputDirectory;
+
-        publish( false );
+        ArtifactRepository distributionRepository = project.getDistributionManagementArtifactRepository();
+        
+        String remoteRepositoryId = distributionRepository.getId();
+        
+        RepositoryMetadata metadata = new PluginMappingMetadata( project.getGroupId() );
+
+        File updatedMetadataFile = new File( outputDirectory, metadata.getRepositoryPath() ).getAbsoluteFile();
+        
+        if ( !updatedMetadataFile.exists() )
+        {
+            throw new MojoExecutionException( "Cannot find updated " + metadata + " in file: \'" + updatedMetadataFile + "\'. This seems to indicate that the 'package' lifecycle phase didn't succeed." );
+        }
+        
+        metadata.setFile( updatedMetadataFile );
+        
+        try
+        {
+            repositoryMetadataManager.install( metadata, localRepository, remoteRepositoryId );
+        }
+        catch ( RepositoryMetadataManagementException e )
+        {
+            throw new MojoExecutionException( "Failed to install " + metadata, e );
+        }
