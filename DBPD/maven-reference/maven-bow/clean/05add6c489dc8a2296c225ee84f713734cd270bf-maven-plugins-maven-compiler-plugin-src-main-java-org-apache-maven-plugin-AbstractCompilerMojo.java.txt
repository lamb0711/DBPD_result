PR: MNG-976
Submitted by: Lester Ecarma
Reviewed by:  Brett Porter
add meminitial and maxmem settings to the forking compiler

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@327878 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.StringUtils;
+     * Initial size, in megabytes, of the memory allocation pool, ex. "64", "64m".
+     *
+     * @parameter
+     */
+    private String meminitial;
+
+    /**
+     * maximum size, in megabytes, of the memory allocation pool, ex. "128", "128m".
+     *
+     * @parameter
+     */
+    private String maxmem;
+
+    /**
+        if( fork )
+        {
+            if ( !StringUtils.isEmpty( meminitial ) )
+            {
+                String value = getMemoryValue( meminitial );
+                
+                if ( value != null )
+                {
+                    compilerConfiguration.setMeminitial( value );
+                }
+                else
+                {
+                    getLog().info( "Invalid value for meminitial '" + meminitial + "'. Ignoring this option." );                    
+                }
+            }
+
+            if ( !StringUtils.isEmpty( maxmem ) )
+            {
+                String value = getMemoryValue( maxmem );
+                
+                if ( value != null )
+                {
+                    compilerConfiguration.setMaxmem( value );
+                }
+                else
+                {
+                    getLog().info( "Invalid value for maxmem '" + maxmem + "'. Ignoring this option." );                    
+                }
+            }
+        }
+
+    private String getMemoryValue( String setting )
+    {
+        String value = null;
+        
+        // Allow '128' or '128m'
+        if ( isDigits( setting ) )
+        {
+            value = setting + "m";
+        }
+        else
+        {
+            if ( ( isDigits( setting.substring( 0, setting.length() - 1 ) ) ) &&
+                ( setting.toLowerCase().endsWith( "m" ) ) )
+            {
+                value = setting;
+            }
+        }
+        return value;
+    }
+
+    private boolean isDigits( String string )
+    {
+        for ( int i = 0; i < string.length(); i++ )
+        {
+            if ( !Character.isDigit( string.charAt( i ) ) )
+            {
+                return false;
+            }
+        }
+        return true;
+    }
+
