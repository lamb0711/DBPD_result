PR: MNG-735
Submitted by: Daniel Krisher
Reviewed by:  Brett Porter
Support unpacked assembly type, with separate mojo for creation



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@293366 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
-import java.io.FileNotFoundException;
- * @description Assemble an application bundle or distribution from an assembly descriptor.
-
-        doExecute();
+        Assembly assembly = readAssembly();
+
+        // TODO: include dependencies marked for distribution under certain formats
+        // TODO: how, might we plug this into an installer, such as NSIS?
+        // TODO: allow file mode specifications?
+
+        String fullName = finalName + "-" + assembly.getId();
+
+        for ( Iterator i = assembly.getFormats().iterator(); i.hasNext(); )
+        {
+            String format = (String) i.next();
+
+            String filename = fullName + "." + format;
+
+            File destFile;
+            try
+            {
+                // TODO: use component roles? Can we do that in a mojo?
+                Archiver archiver = createArchiver( format );
+
+                destFile = createArchive( archiver, assembly, filename );
+            }
+            catch ( ArchiverException e )
+            {
+                throw new MojoExecutionException( "Error creating assembly", e );
+            }
+            catch ( IOException e )
+            {
+                throw new MojoExecutionException( "Error creating assembly", e );
+            }
+
+            projectHelper.attachArtifact( project, format, format + "-assembly", destFile );
+        }
-    /**
-     * Create the binary distribution.
-     */
-    private void doExecute()
-        throws MojoExecutionException, MojoFailureException
+    protected File createArchive( Archiver archiver, Assembly assembly, String filename )
+        throws ArchiverException, IOException, MojoExecutionException
+    {
+        File destFile;
+        processDependencySets( archiver, assembly.getDependencySets(), assembly.isIncludeBaseDirectory() );
+        processFileSets( archiver, assembly.getFileSets(), assembly.isIncludeBaseDirectory() );
+
+        destFile = new File( outputDirectory, filename );
+        archiver.setDestFile( destFile );
+        archiver.createArchive();
+
+        return destFile;
+    }
+
+    protected Assembly readAssembly()
+        throws MojoFailureException, MojoExecutionException
-
-        // TODO: include dependencies marked for distribution under certain formats
-        // TODO: how, might we plug this into an installer, such as NSIS?
-        // TODO: allow file mode specifications?
-
-        String fullName = finalName + "-" + assembly.getId();
-
-        for ( Iterator i = assembly.getFormats().iterator(); i.hasNext(); )
-        {
-            String format = (String) i.next();
-
-            String filename = fullName + "." + format;
-
-            File destFile = null;
-            try
-            {
-                // TODO: use component roles? Can we do that in a mojo?
-                Archiver archiver = createArchiver( format );
-
-                processDependencySets( archiver, assembly.getDependencySets(), assembly.isIncludeBaseDirectory() );
-                processFileSets( archiver, assembly.getFileSets(), assembly.isIncludeBaseDirectory() );
-
-                destFile = new File( outputDirectory, filename );
-                archiver.setDestFile( destFile );
-                archiver.createArchive();
-            }
-            catch ( ArchiverException e )
-            {
-                throw new MojoExecutionException( "Error creating assembly", e );
-            }
-            catch ( IOException e )
-            {
-                throw new MojoExecutionException( "Error creating assembly", e );
-            }
-
-            projectHelper.attachArtifact( project, format, format + "-assembly", destFile );
-        }
+        return assembly;
-    private void processDependencySets( Archiver archiver, List dependencySets, boolean includeBaseDirectory )
+    protected void processDependencySets( Archiver archiver, List dependencySets, boolean includeBaseDirectory )
-    private void processFileSets( Archiver archiver, List fileSets, boolean includeBaseDirecetory )
+    protected void processFileSets( Archiver archiver, List fileSets, boolean includeBaseDirecetory )
