[MNG-6173] MavenSession.getAllProjects() should return all projects in the reactor

This commit removes the initialization of the MavenSession object from the
DefaultGraphBuilder. The GraphBuilder implementation should only build the
graph and should not touch the MavenSession object passed into it.

To allow complete initialization of the MavenSession the ProjectDependencyGraph
interface got enhanced so that GraphBuilder implementations can communicate all
collected projects in addition to the processed list of projects.

This closes #105

+import com.google.common.collect.Lists;
-import org.apache.maven.execution.MavenExecutionResult;
+import org.apache.maven.project.DuplicateProjectException;
-import com.google.common.collect.Lists;
-
+
-        if ( session.getProjectDependencyGraph() != null )
-        {
-            return dependencyGraph( session, session.getProjects(), false );
-        }
-        
-        List<MavenProject> projects = session.getProjects();
-
-        if ( projects == null )
-        {
-            try
-            {
-                projects = getProjectsForMavenReactor( session );
-            }
-            catch ( ProjectBuildingException e )
-            {
-                return Result.error( Lists.newArrayList( new DefaultModelProblem( null, null, null, null, 0, 0, e ) ) );
-            }
-
-            validateProjects( projects );
-
-            return dependencyGraph( session, projects, true );
-        }
-        else
-        {
-            return dependencyGraph( session, projects, false );
-        }
-    }
-    
-    private Result<ProjectDependencyGraph> dependencyGraph( MavenSession session, List<MavenProject> projects,
-                                                            boolean applyMakeBehaviour )
-    {
-        MavenExecutionRequest request = session.getRequest();
-
-        ProjectDependencyGraph projectDependencyGraph = null;
-
-            projectDependencyGraph = new DefaultProjectDependencyGraph( projects );
+            Result<ProjectDependencyGraph> result = sessionDependencyGraph( session );
-            if ( applyMakeBehaviour )
+            if ( result == null )
-                List<MavenProject> activeProjects = projectDependencyGraph.getSortedProjects();
-
-                activeProjects = trimSelectedProjects( activeProjects, projectDependencyGraph, request );
-                activeProjects = trimExcludedProjects( activeProjects, request );
-                activeProjects = trimResumedProjects( activeProjects, request );
-
-                if ( activeProjects.size() != projectDependencyGraph.getSortedProjects().size() )
-                {
-                    projectDependencyGraph =
-                        new FilteredProjectDependencyGraph( projectDependencyGraph, activeProjects );
-                }
+                final List<MavenProject> projects = getProjectsForMavenReactor( session );
+                validateProjects( projects );
+                result = reactorDependencyGraph( session, projects );
+
+            return result;
-        catch ( CycleDetectedException e )
+        catch ( final ProjectBuildingException e )
+        {
+            return Result.error( Lists.newArrayList( new DefaultModelProblem( null, null, null, null, 0, 0, e ) ) );
+        }
+        catch ( final CycleDetectedException e )
-        catch ( org.apache.maven.project.DuplicateProjectException e )
+        catch ( final DuplicateProjectException e )
-        catch ( MavenExecutionException e )
+        catch ( final MavenExecutionException e )
+    }
+
+    private Result<ProjectDependencyGraph> sessionDependencyGraph( final MavenSession session )
+        throws CycleDetectedException, DuplicateProjectException
+    {
+        Result<ProjectDependencyGraph> result = null;
+
+        if ( session.getProjectDependencyGraph() != null || session.getProjects() != null )
+        {
+            final ProjectDependencyGraph graph =
+                new DefaultProjectDependencyGraph( session.getAllProjects(), session.getProjects() );
+
+            result = Result.success( graph );
+        }
-        session.setProjects( projectDependencyGraph.getSortedProjects() );
-        session.setProjectDependencyGraph( projectDependencyGraph );
+        return result;
+    }
+
+    private Result<ProjectDependencyGraph> reactorDependencyGraph( MavenSession session, List<MavenProject> projects )
+        throws CycleDetectedException, DuplicateProjectException, MavenExecutionException
+    {
+        ProjectDependencyGraph projectDependencyGraph = new DefaultProjectDependencyGraph( projects );
+        List<MavenProject> activeProjects = projectDependencyGraph.getSortedProjects();
+        activeProjects = trimSelectedProjects( activeProjects, projectDependencyGraph, session.getRequest() );
+        activeProjects = trimExcludedProjects( activeProjects, session.getRequest() );
+        activeProjects = trimResumedProjects( activeProjects, session.getRequest() );
+
+        if ( activeProjects.size() != projectDependencyGraph.getSortedProjects().size() )
+        {
+            projectDependencyGraph = new FilteredProjectDependencyGraph( projectDependencyGraph, activeProjects );
+        }
-    private MavenExecutionResult addExceptionToResult( MavenExecutionResult result, Throwable e )
-    {
-        if ( !result.getExceptions().contains( e ) )
-        {
-            result.addException( e );
-        }
-
-        return result;
-    }
-
