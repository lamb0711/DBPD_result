Upgraded to java7 language features

-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
+
- * @since 3.0
+ * @since 3.0
-        Set<String> scopesToCollect = new TreeSet<String>();
-        Set<String> scopesToResolve = new TreeSet<String>();
+        Set<String> scopesToCollect = new TreeSet<>();
+        Set<String> scopesToResolve = new TreeSet<>();
-            Throwable cause =
-                new MissingProjectException( "Goal requires a project to execute"
-                    + " but there is no POM in this directory (" + session.getExecutionRootDirectory() + ")."
+            Throwable cause = new MissingProjectException(
+                "Goal requires a project to execute" + " but there is no POM in this directory ("
+                    + session.getExecutionRootDirectory() + ")."
-                Throwable cause =
-                    new IllegalStateException( "Goal requires online mode for execution"
-                        + " but Maven is currently offline." );
+                Throwable cause = new IllegalStateException(
+                    "Goal requires online mode for execution" + " but Maven is currently offline." );
-            catch ( MojoFailureException e )
-            {
-                throw new LifecycleExecutionException( mojoExecution, session.getCurrentProject(), e );
-            }
-            catch ( MojoExecutionException e )
-            {
-                throw new LifecycleExecutionException( mojoExecution, session.getCurrentProject(), e );
-            }
-            catch ( PluginConfigurationException e )
-            {
-                throw new LifecycleExecutionException( mojoExecution, session.getCurrentProject(), e );
-            }
-            catch ( PluginManagerException e )
+            catch ( MojoFailureException | PluginManagerException | PluginConfigurationException
+                | MojoExecutionException e )
-                                                DependencyContext dependencyContext )
+                                               DependencyContext dependencyContext )
-        List<String> scopes = new ArrayList<String>( 2 );
+        List<String> scopes = new ArrayList<>( 2 );
-            forkedProjects = new ArrayList<MavenProject>( forkedExecutions.size() );
+            forkedProjects = new ArrayList<>( forkedExecutions.size() );
