implement lax parsing of repository metadata XML files
PR: MNG-1788


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@355404 13f79535-47bb-0310-9956-ffa450edef68

-                                                                                  d.getClassifier(), d.getScope(), 
+                                                                                  d.getClassifier(), d.getScope(),
-        Model model = readModel( "unknown", projectDescriptor );
+        Model model = readModel( "unknown", projectDescriptor, true );
-        
+
-            throw new ProjectBuildingException( model.getGroupId() + ":" + model.getArtifactId(), 
-                    "Duplicate project ID found in " + projectDescriptor.getAbsolutePath() );
+            throw new ProjectBuildingException( model.getGroupId() + ":" + model.getArtifactId(),
+                                                "Duplicate project ID found in " +
+                                                    projectDescriptor.getAbsolutePath() );
-                                      projectDescriptor.getAbsoluteFile().getParentFile(), profileManager );
+                                      projectDescriptor.getAbsoluteFile().getParentFile(), profileManager, true );
-        return build( "Artifact [" + artifact + "]", model, localRepository, remoteArtifactRepositories, null, null );
+        return build( "Artifact [" + artifact + "]", model, localRepository, remoteArtifactRepositories, null, null,
+                      false );
-                model = readModel( projectId, file );
+                model = readModel( projectId, file, false );
-                                List parentSearchRepositories, File projectDir, ProfileManager externalProfileManager )
+                                List parentSearchRepositories, File projectDir, ProfileManager externalProfileManager,
+                                boolean strict )
-                                       aggregatedRemoteWagonRepositories, externalProfileManager );
+                                       aggregatedRemoteWagonRepositories, externalProfileManager, strict );
-            project = processProjectLogic( pomLocation, project, repositories, externalProfileManager, projectDir );
+            project =
+                processProjectLogic( pomLocation, project, repositories, externalProfileManager, projectDir, strict );
-                                              ProfileManager profileMgr, File projectDir )
+                                              ProfileManager profileMgr, File projectDir, boolean strict )
-        model = modelInterpolator.interpolate( model, context );
+        model = modelInterpolator.interpolate( model, context, strict );
-                                          Set aggregatedRemoteWagonRepositories, ProfileManager externalProfileManager )
+                                          Set aggregatedRemoteWagonRepositories, ProfileManager externalProfileManager,
+                                          boolean strict )
-            else if ( parentModel.getGroupId().equals( model.getGroupId() ) &&  
-                    parentModel.getArtifactId().equals( model.getArtifactId() ) )
+            else if ( parentModel.getGroupId().equals( model.getGroupId() ) &&
+                parentModel.getArtifactId().equals( model.getArtifactId() ) )
-                throw new ProjectBuildingException( projectId, "Parent element is a duplicate of " +
-                        "the current project " );
+                throw new ProjectBuildingException( projectId,
+                                                    "Parent element is a duplicate of " + "the current project " );
-                        getLogger().debug(
-                                           "Path specified in <relativePath/> (" + parentRelativePath
-                                               + ") is a directory. Searching for 'pom.xml' within this directory." );
+                        getLogger().debug( "Path specified in <relativePath/> (" + parentRelativePath +
+                            ") is a directory. Searching for 'pom.xml' within this directory." );
-                    
+
-                        throw new ProjectBuildingException( projectId, "missing parent project descriptor: " + parentDescriptor.getAbsolutePath() );
+                        throw new ProjectBuildingException( projectId, "missing parent project descriptor: " +
+                            parentDescriptor.getAbsolutePath() );
-                    Model candidateParent = readModel( projectId, parentDescriptor );
+                    Model candidateParent = readModel( projectId, parentDescriptor, strict );
-                throw new ProjectBuildingException( projectId, "Parent: " + model.getId() + " of project: " + projectId + " has wrong packaging: " + model.getPackaging() + ". Must be 'pom'." );
+                throw new ProjectBuildingException( projectId, "Parent: " + model.getId() + " of project: " +
+                    projectId + " has wrong packaging: " + model.getPackaging() + ". Must be 'pom'." );
-            
+
-                                                   externalProfileManager );
+                                                   externalProfileManager, strict );
-    private Model readModel( String projectId, File file )
+    private Model readModel( String projectId, File file, boolean strict )
-            return readModel( projectId, file.getAbsolutePath(), reader );
+            return readModel( projectId, file.getAbsolutePath(), reader, strict );
-    private Model readModel( String projectId, String pomLocation, Reader reader )
+    private Model readModel( String projectId, String pomLocation, Reader reader, boolean strict )
-            return modelReader.read( sReader );
+            return modelReader.read( sReader, strict );
-            throw new InvalidProjectModelException( projectId, pomLocation, "Parse error reading POM. Reason: " + e.getMessage(), e );
+            throw new InvalidProjectModelException( projectId, pomLocation,
+                                                    "Parse error reading POM. Reason: " + e.getMessage(), e );
-    private Model readModel( String projectId, URL url )
+    private Model readModel( String projectId, URL url, boolean strict )
-            return readModel( projectId, url.toExternalForm(), reader );
+            return readModel( projectId, url.toExternalForm(), reader, strict );
-            project = processProjectLogic( "<Super-POM>", project, remoteRepositories, null, null );
+            project = processProjectLogic( "<Super-POM>", project, remoteRepositories, null, null, true );
-        return readModel( projectId, url );
+        return readModel( projectId, url, true );
