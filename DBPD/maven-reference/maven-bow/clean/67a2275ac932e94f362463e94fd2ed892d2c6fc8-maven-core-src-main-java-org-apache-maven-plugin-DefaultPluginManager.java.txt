[MNG-4274] Plugins with an undeclared but transitive dependency on plexus-utils via a core artifact get wrong version of p-u

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@800087 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.filter.AndArtifactFilter;
+import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
+    /**
+     * Gets all artifacts required for the class realm of the specified plugin. An artifact in the result list that has
+     * no file set is meant to be excluded from the plugin realm in favor of the equivalent library from the current
+     * core distro.
+     */
-        AndArtifactFilter filter = new AndArtifactFilter();
-        filter.add( coreArtifactFilterManager.getCoreArtifactFilter() );
-        filter.add( new ScopeArtifactFilter( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM ) );
+        ArtifactFilter filter = new ScopeArtifactFilter( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM );
+            .setResolveRoot( true )
-            //.setResolveRoot( false );
-        ArtifactResolutionResult result = repositorySystem.resolve( request );
+        ArtifactResolutionResult result = repositorySystem.collect( request );
-        logger.debug( "Using the following artifacts for classpath of: " + pluginArtifact.getId() + ":\n\n" + result.getArtifacts().toString().replace( ',', '\n' ) );
+        List<Artifact> pluginArtifacts = new ArrayList<Artifact>( result.getArtifacts() );
-        return new ArrayList<Artifact>( result.getArtifacts() );
+        request.setResolveRoot( true ).setResolveTransitively( false ).setArtifactDependencies( null );
+
+        filter = coreArtifactFilterManager.getCoreArtifactFilter();
+
+        for ( Artifact artifact : pluginArtifacts )
+        {
+            if ( filter.include( artifact ) )
+            {
+                result = repositorySystem.resolve( request.setArtifact( artifact ) );
+                resolutionErrorHandler.throwErrors( request, result );
+            }
+            else
+            {
+                artifact.setFile( null );
+            }
+        }
+
+        return pluginArtifacts;
+        if ( logger.isDebugEnabled() )
+        {
+            logger.debug( "Populating plugin realm for " + constructPluginKey( plugin ) );
+        }
+
-            try
+            if ( a.getFile() != null )
-                pluginRealm.addURL( a.getFile().toURI().toURL() );
+                if ( logger.isDebugEnabled() )
+                {
+                    logger.debug( "  Included: " + a.getId() );
+                }
+
+                try
+                {
+                    pluginRealm.addURL( a.getFile().toURI().toURL() );
+                }
+                catch ( MalformedURLException e )
+                {
+                    // Not going to happen
+                }
-            catch ( MalformedURLException e )
+            else
-                // Not going to happen
+                if ( logger.isDebugEnabled() )
+                {
+                    logger.debug( "  Excluded: " + a.getId() );
+                }
