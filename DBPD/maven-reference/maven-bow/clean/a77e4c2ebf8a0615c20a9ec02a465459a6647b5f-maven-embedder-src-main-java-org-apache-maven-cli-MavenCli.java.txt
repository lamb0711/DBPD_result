[MNG-4892] Use of --log-file doesn't capture all output, e.g. from maven-antrun-plugin


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1032976 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.ExecutionListener;
+import org.apache.maven.settings.building.SettingsSource;
+import org.codehaus.plexus.logging.Logger;
-    private PrintStreamLogger logger;
+    private Logger logger;
-        CliRequest cliRequest = new CliRequest( args, classWorld );
-        cliRequest.workingDirectory = workingDirectory;
-        cliRequest.stdout = stdout;
-        cliRequest.stderr = stderr;
+        PrintStream oldout = System.out;
+        PrintStream olderr = System.err;
-        return doMain( cliRequest );
+        try
+        {
+            if ( stdout != null )
+            {
+                System.setOut( stdout );
+            }
+            if ( stderr != null )
+            {
+                System.setErr( stderr );
+            }
+
+            CliRequest cliRequest = new CliRequest( args, classWorld );
+            cliRequest.workingDirectory = workingDirectory;
+
+            return doMain( cliRequest );
+        }
+        finally
+        {
+            System.setOut( oldout );
+            System.setErr( olderr );
+        }
-            commands( cliRequest );
+            commands( cliRequest );
-        if ( cliRequest.stdout == null )
-        {
-            cliRequest.stdout = System.out;
-        }
-        if ( cliRequest.stderr == null )
-        {
-            cliRequest.stderr = System.err;
-        }
-
-        if ( logger == null )
-        {
-            logger = new PrintStreamLogger( cliRequest.stdout );
-        }
-        else
-        {
-            logger.setStream( cliRequest.stdout );
-        }
-
-        logger.setThreshold( cliRequest.request.getLoggingLevel() );
-
-                logger.setStream( cliRequest.fileStream );
+
+                System.setOut( cliRequest.fileStream );
+                System.setErr( cliRequest.fileStream );
-                cliRequest.stderr.println( e );
-                logger.setStream( cliRequest.stdout );
+                System.err.println( e );
-        else
-        {
-            logger.setStream( cliRequest.stdout );
-        }
-
-        cliRequest.request.setExecutionListener( new ExecutionEventLogger( logger ) );
-            cliRequest.stderr.println( "Unable to parse command line options: " + e.getMessage() );
-            cliManager.displayHelp( cliRequest.stdout );
+            System.err.println( "Unable to parse command line options: " + e.getMessage() );
+            cliManager.displayHelp( System.out );
-            cliManager.displayHelp( cliRequest.stdout );
+            cliManager.displayHelp( System.out );
-            CLIReportingUtils.showVersion( cliRequest.stdout );
+            CLIReportingUtils.showVersion( System.out );
-            CLIReportingUtils.showVersion( cliRequest.stdout );
+            CLIReportingUtils.showVersion( System.out );
-        //
-        // TODO: move checksum policies to
-        //
+            logger = setupLogger( cliRequest );
+
-            container.getLoggerManager().setThresholds( cliRequest.request.getLoggingLevel() );
-
+        container.getLoggerManager().setThresholds( cliRequest.request.getLoggingLevel() );
+
+    private PrintStreamLogger setupLogger( CliRequest cliRequest )
+    {
+        PrintStreamLogger logger = new PrintStreamLogger( new PrintStreamLogger.Provider()
+        {
+            public PrintStream getStream()
+            {
+                return System.out;
+            }
+        } );
+
+        return logger;
+    }
+
-            cliRequest.stdout.println( cipher.encryptAndDecorate( passwd,
-                                                                  DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
+            System.out.println( cipher.encryptAndDecorate( passwd, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
-            cliRequest.stdout.println( cipher.encryptAndDecorate( passwd, masterPasswd ) );
+            System.out.println( cipher.encryptAndDecorate( passwd, masterPasswd ) );
-        logger.debug( "Reading user settings from " + userSettingsFile );
-
-        logger.debug( "Reading global settings from " + globalSettingsFile );
-
+        logger.debug( "Reading global settings from "
+            + getSettingsLocation( settingsRequest.getGlobalSettingsSource(), settingsRequest.getGlobalSettingsFile() ) );
+        logger.debug( "Reading user settings from "
+            + getSettingsLocation( settingsRequest.getUserSettingsSource(), settingsRequest.getUserSettingsFile() ) );
+
+    private Object getSettingsLocation( SettingsSource source, File file )
+    {
+        if ( source != null )
+        {
+            return source.getLocation();
+        }
+        return file;
+    }
+
-        boolean debug = cliRequest.debug;
-                cliRequest.stdout.println( "[WARNING] Command line option -" + deprecatedOption
+                logger.warn( "Command line option -" + deprecatedOption
-            transferListener = new ConsoleMavenTransferListener( cliRequest.stdout );
+            transferListener = new ConsoleMavenTransferListener( System.out );
-            transferListener = new BatchModeMavenTransferListener( cliRequest.stdout );
+            transferListener = new BatchModeMavenTransferListener( System.out );
+        ExecutionListener executionListener = new ExecutionEventLogger( logger );
+
-        int loggingLevel;
-
-        if ( debug )
-        {
-            loggingLevel = MavenExecutionRequest.LOGGING_LEVEL_DEBUG;
-        }
-        else if ( quiet )
-        {
-            // TODO: we need to do some more work here. Some plugins use sys out or log errors at info level.
-            // Ideally, we could use Warn across the board
-            loggingLevel = MavenExecutionRequest.LOGGING_LEVEL_ERROR;
-            // TODO:Additionally, we can't change the mojo level because the component key includes the version and
-            // it isn't known ahead of time. This seems worth changing.
-        }
-        else
-        {
-            loggingLevel = MavenExecutionRequest.LOGGING_LEVEL_INFO;
-        }
-
-            .setLoggingLevel( loggingLevel ) // default: info
+            .setExecutionListener( executionListener )
-        PrintStream stdout;
-        PrintStream stderr;
