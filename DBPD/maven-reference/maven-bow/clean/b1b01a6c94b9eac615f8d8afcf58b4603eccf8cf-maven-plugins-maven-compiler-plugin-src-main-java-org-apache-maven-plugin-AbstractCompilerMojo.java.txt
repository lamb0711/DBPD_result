o Adding support for selecting the Plexus compiler implementation. Configure
  the compiler plugin with <compilerId>, both "javac" and "eclipse" will work.
  The default value is still "javac" so this shouldn't break anything.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@227494 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.compiler.javac.JavacCompiler;
+import org.codehaus.plexus.compiler.manager.CompilerManager;
+import org.codehaus.plexus.compiler.manager.NoSuchCompilerException;
-
-    private Compiler compiler = new JavacCompiler();
-    
-     * 
+     *
-    
+
-     * 
+     *
-    
+
-     * 
+     *
-   
+
-    
+
-     * 
+     *
-    
+
+    /**
+     * @parameter default-value="javac"
+     */
+    private String compilerId;
+
+    /**
+     * @parameter expression="${component.org.codehaus.plexus.compiler.manager.CompilerManager}"
+     * @required
+     * @readonly
+     */
+    private CompilerManager compilerManager;
+
+        // ----------------------------------------------------------------------
+        // Create the compiler configuration
+        // ----------------------------------------------------------------------
+
+
+
-        
+
+        // ----------------------------------------------------------------------
+        // Dump configuration
+        // ----------------------------------------------------------------------
+
+        if ( getLog().isDebugEnabled() )
+        {
+            getLog().debug( "Classpath:" );
+
+            for ( Iterator it = getClasspathElements().iterator(); it.hasNext(); )
+            {
+                String s = (String) it.next();
+
+                getLog().debug( " " + s );
+            }
+
+            getLog().debug( "Source roots:" );
+
+            for ( Iterator it = getCompileSourceRoots().iterator(); it.hasNext(); )
+            {
+                String root = (String) it.next();
+
+                getLog().debug( " " + root );
+            }
+        }
+
+        // ----------------------------------------------------------------------
+        // Compile!
+        // ----------------------------------------------------------------------
+
+
+        Compiler compiler;
+
+        try
+        {
+            compiler = compilerManager.getCompiler( compilerId );
+        }
+        catch ( NoSuchCompilerException e )
+        {
+            throw new MojoExecutionException( "No such compiler '" + e.getCompilerId() + "'." );
+        }
+
+        getLog().info( "Using compiler '" + compilerId + "'." );
+
