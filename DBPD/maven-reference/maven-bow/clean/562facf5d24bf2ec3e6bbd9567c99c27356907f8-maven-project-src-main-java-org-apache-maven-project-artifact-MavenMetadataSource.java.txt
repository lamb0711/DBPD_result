PR: MNG-122
cleanup artifact metadata retrieval exceptions

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@320701 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
-import org.codehaus.plexus.util.IOUtil;
-import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.IOException;
-import java.io.Reader;
-                    throw new ArtifactMetadataRetrievalException( "Unable to read the metadata file", e );
+                    throw new ArtifactMetadataRetrievalException( "Unable to read the metadata file for artifact '" +
+                        artifact.getDependencyConflictId() + "': " + e.getMessage(), e );
-        try
-        {
-            ResolutionGroup result;
+        ResolutionGroup result;
-            if ( project == null )
+        if ( project == null )
+        {
+            // if the project is null, we encountered an invalid model (read: m1 POM)
+            // we'll just return an empty resolution group.
+            // or used the inherited scope (should that be passed to the buildFromRepository method above?)
+            result = new ResolutionGroup( pomArtifact, Collections.EMPTY_SET, Collections.EMPTY_LIST );
+        }
+        else
+        {
+            Set artifacts = Collections.EMPTY_SET;
+            if ( !artifact.getArtifactHandler().isIncludesDependencies() )
-                // if the project is null, we encountered an invalid model (read: m1 POM)
-                // we'll just return an empty resolution group.
+                // TODO: we could possibly use p.getDependencyArtifacts instead of this call, but they haven't been filtered
-                result = new ResolutionGroup( pomArtifact, Collections.EMPTY_SET, Collections.EMPTY_LIST );
-            }
-            else
-            {
-                Set artifacts = Collections.EMPTY_SET;
-                if ( !artifact.getArtifactHandler().isIncludesDependencies() )
+                try
-                    // TODO: we could possibly use p.getDependencyArtifacts instead of this call, but they haven't been filtered
-                    // or used the inherited scope (should that be passed to the buildFromRepository method above?)
-
-                List repositories =
-                    aggregateRepositoryLists( remoteRepositories, project.getRemoteArtifactRepositories() );
-
-                result = new ResolutionGroup( pomArtifact, artifacts, repositories );
+                catch ( InvalidDependencyVersionException e )
+                {
+                    throw new ArtifactMetadataRetrievalException( "Error in metadata for artifact '" +
+                        artifact.getDependencyConflictId() + "': " + e.getMessage(), e );
+                }
-            return result;
+            List repositories = aggregateRepositoryLists( remoteRepositories, project.getRemoteArtifactRepositories() );
+
+            result = new ResolutionGroup( pomArtifact, artifacts, repositories );
-        catch ( ProjectBuildingException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Unable to read the metadata file", e );
-        }
-        catch ( InvalidDependencyVersionException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Unable to read the metadata file", e );
-        }
+
+        return result;
-        throws ProjectBuildingException
+        throws ArtifactMetadataRetrievalException
-            superProject = mavenProjectBuilder.buildStandaloneSuperProject( null );
+            try
+            {
+                superProject = mavenProjectBuilder.buildStandaloneSuperProject( null );
+            }
+            catch ( ProjectBuildingException e )
+            {
+                throw new ArtifactMetadataRetrievalException(
+                    "Unable to parse the Maven built-in model: " + e.getMessage(), e );
+            }
-
-    /**
-     * @todo share with DefaultPluginMappingManager.
-     */
-    private static Metadata readMetadata( File mappingFile )
-        throws ArtifactMetadataRetrievalException
-    {
-        Metadata result;
-
-        Reader fileReader = null;
-        try
-        {
-            fileReader = new FileReader( mappingFile );
-
-            MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();
-
-            result = mappingReader.read( fileReader );
-        }
-        catch ( FileNotFoundException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
-        }
-        catch ( IOException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Cannot parse version information from: " + mappingFile, e );
-        }
-        finally
-        {
-            IOUtil.close( fileReader );
-        }
-        return result;
-    }
