o reverting fix for MNG-1323, breaks trunk horribly when everything is clean. I ran the ITs after Piotr did but doing so with everything clean  doesn't work. Time for Hudson.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@578582 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.SortedMap;
-import java.util.TreeMap;
-    /**
-     * Map from pluginDescriptor.getKey (groupId:artifactId) into (ordered) map from version into pluginDescriptor
-     * Internal map is ordered to make sure that builds are determinic (used pluginVersion is determined)
-     */
-    private Map/* <String,OrderedMap<String,PluginDescriptor>> */pluginDescriptors = new HashMap();
-    private Map/* <String,OrderedMap<String,PluginDescriptor>> */pluginIdsByPrefix = new HashMap();
+    private Set pluginsInProcess = new HashSet();
-    public String getId()
-    {
-        return "maven-plugin-collector";
-    }
-    
+    private Map pluginDescriptors = new HashMap();
+
+    private Map pluginIdsByPrefix = new HashMap();
+
+
+            // TODO: see comment in getPluginDescriptor
+            String key = Plugin.constructKey( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
-            putIntoPluginDescriptors( pluginDescriptor );
-            putIntoPluginIdsByPrefix( pluginDescriptor );
+            if ( !pluginsInProcess.contains( key ) )
+            {
+                pluginsInProcess.add( key );
+
+                getLogger().debug( this + ": Discovered plugin: " + key );
+                
+                pluginDescriptors.put( key, pluginDescriptor );
+
+                // TODO: throw an (not runtime) exception if there is a prefix overlap - means doing so elsewhere
+                // we also need to deal with multiple versions somehow - currently, first wins
+                if ( !pluginIdsByPrefix.containsKey( pluginDescriptor.getGoalPrefix() ) )
+                {
+                    pluginIdsByPrefix.put( pluginDescriptor.getGoalPrefix(), pluginDescriptor );
+                }
+            }
+    public String getId()
+    {
+        return "maven-plugin-collector";    
+    }
+
-        SortedMap/* <String,PluginDescriptor> */pluginVersions = (SortedMap) pluginDescriptors.get( plugin.getKey() );
-        if ( pluginVersions != null )
-        {
-            PluginDescriptor res;
-            if ( plugin.getVersion() != null )
-            {
-                res = (PluginDescriptor) pluginVersions.get( plugin.getVersion() );
-            }
-            else
-            {
-                res = getDefaultPluginDescriptorVersion( pluginVersions );
-            }
-           return res;
-        }
-        else
-        {
-            return null;
-        }
-    }
-
-    private PluginDescriptor getDefaultPluginDescriptorVersion( SortedMap pluginVersions )
-    {
-        if ( pluginVersions.size() > 0 )
-        {
-            return (PluginDescriptor) pluginVersions.get( pluginVersions.lastKey() );
-        }
-        else
-        {
-            return null;
-        }
+        // TODO: include version, but can't do this in the plugin manager as it is not resolved to the right version
+        // at that point. Instead, move the duplication check to the artifact container, or store it locally based on
+        // the unresolved version?
+        return (PluginDescriptor) pluginDescriptors.get( plugin.getKey() );
-        return getPluginDescriptor( plugin ) != null;
+        return pluginDescriptors.containsKey( plugin.getKey() );
-        return getPluginDescriptorForPrefix( prefix, null );
+        return (PluginDescriptor) pluginIdsByPrefix.get( prefix );
-    public PluginDescriptor getPluginDescriptorForPrefix( String prefix, String version )
+    public void flushPluginDescriptor( Plugin plugin )
-        SortedMap/* <String,PluginDescriptor> */pluginVersions = (SortedMap) pluginIdsByPrefix.get( prefix );
-        if ( pluginVersions != null )
+        pluginsInProcess.remove( plugin.getKey() );
+        pluginDescriptors.remove( plugin.getKey() );
+        
+        for ( Iterator it = pluginIdsByPrefix.entrySet().iterator(); it.hasNext(); )
-            PluginDescriptor res;
-            if ( version != null )
+            Map.Entry entry = (Map.Entry) it.next();
+            
+            if ( plugin.getKey().equals( entry.getValue() ) )
-                res = (PluginDescriptor) pluginVersions.get( version );
+                it.remove();
-            else
-            {
-                res = getDefaultPluginDescriptorVersion( pluginVersions );
-            }
-            return res;
-        else
-        {
-            return null;
-        }
-    }
-
-//    public void flushPluginDescriptor( Plugin plugin )
-//    {
-//        getPluginDescriptor( plugin ).cleanPluginDescriptor();
-//    }
-
-    /**
-     * Puts given pluginDescriptor into pluginDescriptors map (if the map does not contains plugin for specified maven
-     * version)
-     * 
-     * @param pluginDescriptor
-     */
-    protected void putIntoPluginDescriptors( PluginDescriptor pluginDescriptor )
-    {
-        String key = Plugin.constructKey( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
-
-        SortedMap/* <String,PluginDescriptor> */descriptorsVersions = (SortedMap) pluginDescriptors.get( key );
-        if ( descriptorsVersions == null )
-        {
-            descriptorsVersions = new TreeMap();
-            pluginDescriptors.put( key, descriptorsVersions );
-        }
-
-        putIntoVersionsMap( descriptorsVersions, pluginDescriptor );
-    }
-
-    protected void putIntoVersionsMap( SortedMap/* <String(version),PluginDescriptor> */pluginVersions,
-                                       PluginDescriptor pluginDescriptor )
-    {
-        if ( !pluginVersions.containsKey( pluginDescriptor.getVersion() ) )
-        {
-            pluginVersions.put( pluginDescriptor.getVersion(), pluginDescriptor );
-        }
-    }
-
-    protected void putIntoPluginIdsByPrefix( PluginDescriptor pluginDescriptor )
-    {
-        String goalPrefix = pluginDescriptor.getGoalPrefix();
-
-        SortedMap/* <String,PluginDescriptor> */descriptorsVersions = (SortedMap) pluginIdsByPrefix.get( goalPrefix );
-        if ( descriptorsVersions == null )
-        {
-            descriptorsVersions = new TreeMap();
-            pluginIdsByPrefix.put( goalPrefix, descriptorsVersions );
-        }
-
-        putIntoVersionsMap( descriptorsVersions, pluginDescriptor );
