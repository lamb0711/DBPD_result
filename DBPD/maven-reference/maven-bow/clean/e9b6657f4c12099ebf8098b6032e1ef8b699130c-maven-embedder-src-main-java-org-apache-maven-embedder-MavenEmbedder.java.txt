o scrub of the settings building, was able to reduce to the need of the build context and use the execution request
  directly. eventually i will get it to be the session, along with the profile tools, then all the tools can also 
  share a common interpolator, which can then be shared by other components instead of having 5 interpolators lying
  around causing a great deal of inconsistency.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@573494 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.settings.SettingsConfigurationException;
-import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
+import org.apache.maven.settings.SettingsConfigurationException;
-import org.codehaus.plexus.util.StringUtils;
-            request = populator.populateDefaults( request, this );
+            request = populator.populateDefaults( request, configuration );
-            populator.populateDefaults( request, this );
+            populator.populateDefaults( request, configuration );
-    // ----------------------------------------------------------------------
-    // Local Repository
-    // ----------------------------------------------------------------------
-
-    public ArtifactRepository createLocalRepository( Settings settings )
-        throws MavenEmbedderException
-    {
-        String localRepositoryPath = null;
-
-        if ( configuration.getLocalRepository() != null )
-        {
-            localRepositoryPath = configuration.getLocalRepository().getAbsolutePath();
-        }
-
-        if ( StringUtils.isEmpty( localRepositoryPath ) )
-        {
-            localRepositoryPath = settings.getLocalRepository();
-        }
-
-        if ( StringUtils.isEmpty( localRepositoryPath ) )
-        {
-            localRepositoryPath = MavenEmbedder.defaultUserLocalRepository.getAbsolutePath();
-        }
-
-        return createLocalRepository( localRepositoryPath, MavenEmbedder.DEFAULT_LOCAL_REPO_ID );
-    }
-
-    public ArtifactRepository createLocalRepository( String url,
-                                                     String repositoryId )
-        throws MavenEmbedderException
-    {
-        try
-        {
-            return createRepository( canonicalFileUrl( url ), repositoryId );
-        }
-        catch ( IOException e )
-        {
-            throw new MavenEmbedderException( "Unable to resolve canonical path for local repository " + url, e );
-        }
-    }
-
-    private String canonicalFileUrl( String url )
-        throws IOException
-    {
-        if ( !url.startsWith( "file:" ) )
-        {
-            url = "file://" + url;
-        }
-        else if ( url.startsWith( "file:" ) && !url.startsWith( "file://" ) )
-        {
-            url = "file://" + url.substring( "file:".length() );
-        }
-
-        // So now we have an url of the form file://<path>
-
-        // We want to eliminate any relative path nonsense and lock down the path so we
-        // need to fully resolve it before any sub-modules use the path. This can happen
-        // when you are using a custom settings.xml that contains a relative path entry
-        // for the local repository setting.
-
-        File localRepository = new File( url.substring( "file://".length() ) );
-
-        if ( !localRepository.isAbsolute() )
-        {
-            url = "file://" + localRepository.getCanonicalPath();
-        }
-
-        return url;
-    }
-
-    public ArtifactRepository createRepository( String url,
-                                                String repositoryId )
-    {
-        // snapshots vs releases
-        // offline = to turning the update policy off
-
-        //TODO: we'll need to allow finer grained creation of repositories but this will do for now
-
-        String updatePolicyFlag = ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS;
-
-        String checksumPolicyFlag = ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN;
-
-        ArtifactRepositoryPolicy snapshotsPolicy =
-            new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
-
-        ArtifactRepositoryPolicy releasesPolicy =
-            new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
-
-        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout,
-            snapshotsPolicy, releasesPolicy );
-    }
-
-                request = populator.populateDefaults( request, this );
+                request = populator.populateDefaults( request, configuration );
