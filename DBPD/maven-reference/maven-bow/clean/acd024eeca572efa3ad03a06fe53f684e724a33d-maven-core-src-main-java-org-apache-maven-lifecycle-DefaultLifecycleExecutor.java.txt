o just expanding "rm" to "reactorManager" so there's some idea as to what it is

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@572010 13f79535-47bb-0310-9956-ffa450edef68

- *       much of the event handling)
+ * much of the event handling)
-public class DefaultLifecycleExecutor extends AbstractLogEnabled implements LifecycleExecutor
+public class DefaultLifecycleExecutor
+    extends AbstractLogEnabled
+    implements LifecycleExecutor
-    public void execute( final MavenSession session, final ReactorManager reactorManager, final EventDispatcher dispatcher )
+    public void execute( final MavenSession session,
+                         final ReactorManager reactorManager,
+                         final EventDispatcher dispatcher )
-        List taskSegments = segmentTaskListByAggregationNeeds( goals, session, rootProject );
+        List taskSegments = segmentTaskListByAggregationNeeds(
+            goals,
+            session,
+            rootProject );
-            throw new LifecycleExecutionException( e.getMessage(), e );
+            throw new LifecycleExecutionException(
+                e.getMessage(),
+                e );
-        executeTaskSegments( taskSegments, reactorManager, session, rootProject, dispatcher );
+        executeTaskSegments(
+            taskSegments,
+            reactorManager,
+            session,
+            rootProject,
+            dispatcher );
-    private void executeTaskSegments( final List taskSegments, final ReactorManager rm, final MavenSession session,
-                                      final MavenProject rootProject, final EventDispatcher dispatcher )
+    private void executeTaskSegments( final List taskSegments,
+                                      final ReactorManager reactorManager,
+                                      final MavenSession session,
+                                      final MavenProject rootProject,
+                                      final EventDispatcher dispatcher )
-                if ( !rm.isBlackListed( rootProject ) )
+                if ( !reactorManager.isBlackListed( rootProject ) )
-                    dispatcher.dispatchStart( event, target );
+                    dispatcher.dispatchStart(
+                        event,
+                        target );
-                    List mojoBindings = getLifecycleBindings( segment.getTasks(), rootProject, target );
+                    List mojoBindings = getLifecycleBindings(
+                        segment.getTasks(),
+                        rootProject,
+                        target );
-                        executeGoalAndHandleFailures( binding, session, dispatcher, event, rm, buildStartTime, target );
+                        executeGoalAndHandleFailures(
+                            binding,
+                            session,
+                            dispatcher,
+                            event,
+                            reactorManager,
+                            buildStartTime,
+                            target );
-                    rm.registerBuildSuccess( rootProject, System.currentTimeMillis() - buildStartTime );
+                    reactorManager.registerBuildSuccess(
+                        rootProject,
+                        System.currentTimeMillis() - buildStartTime );
-                    dispatcher.dispatchEnd( event, target );
+                    dispatcher.dispatchEnd(
+                        event,
+                        target );
-                    if ( !rm.isBlackListed( currentProject ) )
+                    if ( !reactorManager.isBlackListed( currentProject ) )
-                        dispatcher.dispatchStart( event, target );
+                        dispatcher.dispatchStart(
+                            event,
+                            target );
-                        List mojoBindings = getLifecycleBindings( segment.getTasks(), currentProject, target );
+                        List mojoBindings = getLifecycleBindings(
+                            segment.getTasks(),
+                            currentProject,
+                            target );
-                                               "Mojo: " + mojoBinding.getGoal() + " has config:\n"
-                                                               + mojoBinding.getConfiguration() );
-                            executeGoalAndHandleFailures( mojoBinding, session, dispatcher, event, rm, buildStartTime,
-                                                          target );
+                                "Mojo: " + mojoBinding.getGoal() + " has config:\n"
+                                    + mojoBinding.getConfiguration() );
+                            executeGoalAndHandleFailures(
+                                mojoBinding,
+                                session,
+                                dispatcher,
+                                event,
+                                reactorManager,
+                                buildStartTime,
+                                target );
-                        rm.registerBuildSuccess( currentProject, System.currentTimeMillis() - buildStartTime );
+                        reactorManager.registerBuildSuccess(
+                            currentProject,
+                            System.currentTimeMillis() - buildStartTime );
-                        dispatcher.dispatchEnd( event, target );
+                        dispatcher.dispatchEnd(
+                            event,
+                            target );
-                                          "This project has been banned from further executions due to previous failures." );
+                            "This project has been banned from further executions due to previous failures." );
-    private List getLifecycleBindings( final List tasks, final MavenProject project, final String targetDescription )
+    private List getLifecycleBindings( final List tasks,
+                                       final MavenProject project,
+                                       final String targetDescription )
-            BuildPlan plan = buildPlanner.constructBuildPlan( tasks, project );
+            BuildPlan plan = buildPlanner.constructBuildPlan(
+                tasks,
+                project );
-                getLogger().debug( "\n\nOur build plan is:\n" + BuildPlanUtils.listBuildPlan( plan, false ) + "\n\n" );
+                getLogger().debug(
+                    "\n\nOur build plan is:\n" + BuildPlanUtils.listBuildPlan(
+                        plan,
+                        false ) + "\n\n" );
-            throw new LifecycleExecutionException( "Failed to construct build plan for: " + targetDescription
-                            + ". Reason: " + e.getMessage(), e );
+            throw new LifecycleExecutionException(
+                "Failed to construct build plan for: " + targetDescription
+                    + ". Reason: " + e.getMessage(),
+                e );
-    private void executeGoalAndHandleFailures( final MojoBinding mojoBinding, final MavenSession session,
-                                               final EventDispatcher dispatcher, final String event,
-                                               final ReactorManager rm, final long buildStartTime, final String target )
+    private void executeGoalAndHandleFailures( final MojoBinding mojoBinding,
+                                               final MavenSession session,
+                                               final EventDispatcher dispatcher,
+                                               final String event,
+                                               final ReactorManager rm,
+                                               final long buildStartTime,
+                                               final String target )
-                pluginDescriptor = pluginLoader.loadPlugin( mojoBinding, project );
+                pluginDescriptor = pluginLoader.loadPlugin(
+                    mojoBinding,
+                    project );
-                    throw new LifecycleExecutionException( "Failed to load plugin for: "
-                                    + MojoBindingUtils.toString( mojoBinding ) + ". Reason: " + e.getMessage(), e );
+                    throw new LifecycleExecutionException(
+                        "Failed to load plugin for: "
+                            + MojoBindingUtils.toString( mojoBinding ) + ". Reason: " + e.getMessage(),
+                        e );
-                    pluginManager.executeMojo( project, mojoExecution, session );
+                    pluginManager.executeMojo(
+                        project,
+                        mojoExecution,
+                        session );
-                    throw new LifecycleExecutionException( "Internal error in the plugin manager executing goal '"
-                                    + mojoDescriptor.getId() + "': " + e.getMessage(), e );
+                    throw new LifecycleExecutionException(
+                        "Internal error in the plugin manager executing goal '"
+                            + mojoDescriptor.getId() + "': " + e.getMessage(),
+                        e );
-                    throw new LifecycleExecutionException( e.getMessage(), e );
+                    throw new LifecycleExecutionException(
+                        e.getMessage(),
+                        e );
-                    throw new LifecycleExecutionException( e.getMessage(), e );
+                    throw new LifecycleExecutionException(
+                        e.getMessage(),
+                        e );
-                    throw new LifecycleExecutionException( e.getMessage(), e );
+                    throw new LifecycleExecutionException(
+                        e.getMessage(),
+                        e );
-                    throw new BuildFailureException( e.getMessage(), e );
+                    throw new BuildFailureException(
+                        e.getMessage(),
+                        e );
-                    throw new LifecycleExecutionException( e.getMessage(), e );
+                    throw new LifecycleExecutionException(
+                        e.getMessage(),
+                        e );
-                    throw new LifecycleExecutionException( e.getMessage(), e );
+                    throw new LifecycleExecutionException(
+                        e.getMessage(),
+                        e );
-                throw new LifecycleExecutionException( "Failed to load plugin for: "
-                                + MojoBindingUtils.toString( mojoBinding ) + ". Reason: unknown" );
+                throw new LifecycleExecutionException(
+                    "Failed to load plugin for: "
+                        + MojoBindingUtils.toString( mojoBinding ) + ". Reason: unknown" );
-            dispatcher.dispatchError( event, target, e );
+            dispatcher.dispatchError(
+                event,
+                target,
+                e );
-            if ( handleExecutionFailure( rm, project, e, mojoBinding, buildStartTime ) )
+            if ( handleExecutionFailure(
+                rm,
+                project,
+                e,
+                mojoBinding,
+                buildStartTime ) )
-            dispatcher.dispatchError( event, target, e );
+            dispatcher.dispatchError(
+                event,
+                target,
+                e );
-            if ( handleExecutionFailure( rm, project, e, mojoBinding, buildStartTime ) )
+            if ( handleExecutionFailure(
+                rm,
+                project,
+                e,
+                mojoBinding,
+                buildStartTime ) )
-    private boolean handleExecutionFailure( final ReactorManager rm, final MavenProject project, final Exception e,
-                                            final MojoBinding mojoBinding, final long buildStartTime )
+    private boolean handleExecutionFailure( final ReactorManager rm,
+                                            final MavenProject project,
+                                            final Exception e,
+                                            final MojoBinding mojoBinding,
+                                            final long buildStartTime )
-        rm.registerBuildFailure( project, e, MojoBindingUtils.toString( mojoBinding ), System.currentTimeMillis()
-                        - buildStartTime );
+        rm.registerBuildFailure(
+            project,
+            e,
+            MojoBindingUtils.toString( mojoBinding ),
+            System.currentTimeMillis()
+                - buildStartTime );
-    private List segmentTaskListByAggregationNeeds( final List tasks, final MavenSession session,
+    private List segmentTaskListByAggregationNeeds( final List tasks,
+                                                    final MavenSession session,
-                        mojo = getMojoDescriptorForDirectInvocation( task, session, rootProject );
+                        mojo = getMojoDescriptorForDirectInvocation(
+                            task,
+                            session,
+                            rootProject );
-                                          "Cannot find mojo descriptor for: \'" + task
-                                                          + "\' - Treating as non-aggregator." );
+                            "Cannot find mojo descriptor for: \'" + task
+                                + "\' - Treating as non-aggregator." );
-                        getLogger().debug( "", e );
+                        getLogger().debug(
+                            "",
+                            e );
-                                            + task
-                                            + "': you must specify a valid lifecycle phase, or"
-                                            + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
+                                + task
+                                + "': you must specify a valid lifecycle phase, or"
+                                + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
-                        throw new BuildFailureException( message, e );
+                        throw new BuildFailureException(
+                            message,
+                            e );
-                        throw new BuildFailureException( message, e );
+                        throw new BuildFailureException(
+                            message,
+                            e );
-     *       lookup directly, or have them passed in
-     *
+     * lookup directly, or have them passed in
-                    verifyPlugin( plugin, project, session );
+                    verifyPlugin(
+                        plugin,
+                        project,
+                        session );
-                        Map components = pluginManager.getPluginComponents( plugin, ArtifactHandler.ROLE );
+                        Map components = pluginManager.getPluginComponents(
+                            plugin,
+                            ArtifactHandler.ROLE );
-                        getLogger().debug( "Unable to find the lifecycle component in the extension", e );
+                        getLogger().debug(
+                            "Unable to find the lifecycle component in the extension",
+                            e );
-                        throw new LifecycleExecutionException( "Error looking up available components from plugin '"
-                                        + plugin.getKey() + "': " + e.getMessage(), e );
+                        throw new LifecycleExecutionException(
+                            "Error looking up available components from plugin '"
+                                + plugin.getKey() + "': " + e.getMessage(),
+                            e );
-    private PluginDescriptor verifyPlugin( final Plugin plugin, final MavenProject project, final MavenSession session )
+    private PluginDescriptor verifyPlugin( final Plugin plugin,
+                                           final MavenProject project,
+                                           final MavenSession session )
-            pluginDescriptor = pluginManager.verifyPlugin( plugin, project, session );
+            pluginDescriptor = pluginManager.verifyPlugin(
+                plugin,
+                project,
+                session );
-            throw new LifecycleExecutionException( "Internal error in the plugin manager getting plugin '"
-                            + plugin.getKey() + "': " + e.getMessage(), e );
+            throw new LifecycleExecutionException(
+                "Internal error in the plugin manager getting plugin '"
+                    + plugin.getKey() + "': " + e.getMessage(),
+                e );
-            throw new LifecycleExecutionException( e.getMessage(), e );
+            throw new LifecycleExecutionException(
+                e.getMessage(),
+                e );
-            throw new LifecycleExecutionException( e.getMessage(), e );
+            throw new LifecycleExecutionException(
+                e.getMessage(),
+                e );
-            throw new LifecycleExecutionException( e.getMessage(), e );
+            throw new LifecycleExecutionException(
+                e.getMessage(),
+                e );
-            throw new LifecycleExecutionException( e.getMessage(), e );
+            throw new LifecycleExecutionException(
+                e.getMessage(),
+                e );
-            throw new LifecycleExecutionException( e.getMessage(), e );
+            throw new LifecycleExecutionException(
+                e.getMessage(),
+                e );
-            throw new LifecycleExecutionException( e.getMessage(), e );
+            throw new LifecycleExecutionException(
+                e.getMessage(),
+                e );
-    private MojoDescriptor getMojoDescriptorForDirectInvocation( final String task, final MavenSession session,
+    private MojoDescriptor getMojoDescriptorForDirectInvocation( final String task,
+                                                                 final MavenSession session,
-        MojoBinding binding = mojoBindingFactory.parseMojoBinding( task, project, true, false );
+        MojoBinding binding = mojoBindingFactory.parseMojoBinding(
+            task,
+            project,
+            true,
+            false );
-        PluginDescriptor descriptor = pluginLoader.loadPlugin( binding, project );
+        PluginDescriptor descriptor = pluginLoader.loadPlugin(
+            binding,
+            project );
