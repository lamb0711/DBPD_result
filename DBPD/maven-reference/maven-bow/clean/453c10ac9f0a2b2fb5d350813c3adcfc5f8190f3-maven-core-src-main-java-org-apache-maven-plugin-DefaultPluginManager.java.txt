o removing some more dead code

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@769857 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Collection;
-//TODO: get plugin groups
-//TODO: separate out project downloading
-//TODO: template method plugin validation as its framework specific
-//TODO: provide a method to get default configuraiton for a given plugin
-//TODO: get rid of all the custom configuration merging here, that's domain specific but needs to incorporate defaults the plugin manager can provide
-//TODO: the antrun plugin has its own configurator, the only plugin that does. might need to think about how that works
-//TODO: merge the plugin collector into the plugin manager
-//TODO: merge the plugin discovery listener into the plugin manager
+// TODO: get plugin groups
+// TODO: separate out project downloading
+// TODO: template method plugin validation as its framework specific
+// TODO: provide a method to get default configuraiton for a given plugin
+// TODO: get rid of all the custom configuration merging here, that's domain specific but needs to
+// incorporate defaults the plugin manager can provide
+// TODO: the antrun plugin has its own configurator, the only plugin that does. might need to think
+// about how that works
+// TODO: merge the plugin collector into the plugin manager
+// TODO: merge the plugin discovery listener into the plugin manager
-    
+
-    
-    private Map<String,Plugin> pluginDefinitionsByPrefix = new HashMap<String,Plugin>();
-    
-    private Map<String, PluginDescriptor> pluginDescriptors;    
-    
+
+    private Map<String, PluginDescriptor> pluginDescriptors;
+
-        pluginDescriptors = new HashMap<String,PluginDescriptor>();        
+        pluginDescriptors = new HashMap<String, PluginDescriptor>();
-        
+
-    
+
-    {        
+    {
-            
+
-                        
+
-        {                                              
+        {
-    }        
-    
+    }
+
-    
+
-        
+
-        
+
-        
+
-        
+
-    
-    
+
-        
+
-        
-        Map<String,Artifact> pluginManagedDependencies = new HashMap<String,Artifact>();
-                
+
+        Map<String, Artifact> pluginManagedDependencies = new HashMap<String, Artifact>();
+
-        
+
-            
+
-            
+
-                        
+
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
-            .setArtifact( pluginArtifact )
-            .setArtifactDependencies( dependencies )
-            .setLocalRepository( localRepository )
-            .setRemoteRepostories( new ArrayList( project.getRemoteArtifactRepositories() ) )
-            .setManagedVersionMap( pluginManagedDependencies )
-            .setFilter( filter )
-            .setResolveRoot( false ); // We are setting this to false because the artifact itself has been resolved.
-        
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact( pluginArtifact ).setArtifactDependencies( dependencies ).setLocalRepository( localRepository )
+            .setRemoteRepostories( new ArrayList( project.getRemoteArtifactRepositories() ) ).setManagedVersionMap( pluginManagedDependencies ).setFilter( filter ).setResolveRoot( false ); // We are setting this to false because the artifact itself has been resolved.
+
-        
+
-        
+
-        {            
+        {
-                throw new PluginExecutionException( mojoExecution, project, e.getMessage() );                
+                throw new PluginExecutionException( mojoExecution, project, e.getMessage() );
-                throw new PluginExecutionException( mojoExecution, project, e.getMessage() );                
+                throw new PluginExecutionException( mojoExecution, project, e.getMessage() );
-                throw new PluginExecutionException( mojoExecution, project, e.getMessage() );                
+                throw new PluginExecutionException( mojoExecution, project, e.getMessage() );
-                
+
-                    
+
-                    
-                    mojoExecution.setConfiguration( dom );                    
+
+                    mojoExecution.setConfiguration( dom );
-        }       
+        }
-            pluginRealm = pluginDescriptor.getClassRealm();            
-            
+            pluginRealm = pluginDescriptor.getClassRealm();
+
-            throw new PluginExecutionException( mojoExecution, project, e.getMessage() );            
+            throw new PluginExecutionException( mojoExecution, project, e.getMessage() );
-        
+
-            
+
-                Map<String,Object> pluginContext = session.getPluginContext( pluginDescriptor, project );
+                Map<String, Object> pluginContext = session.getPluginContext( pluginDescriptor, project );
-            
+
-            
+
-    private void checkDeprecatedParameters( MojoDescriptor mojoDescriptor, PlexusConfiguration extractedMojoConfiguration ) throws PlexusConfigurationException
+    private void checkDeprecatedParameters( MojoDescriptor mojoDescriptor, PlexusConfiguration extractedMojoConfiguration )
+        throws PlexusConfigurationException
-        
+
-                        
+
-    
+
-    {                
+    {
-        
+
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
-            .setArtifact( artifact )
-            .setResolveRoot( false )
-            .setArtifactDependencies( project.getDependencyArtifacts() )
-            .setLocalRepository( session.getLocalRepository() )
-            .setRemoteRepostories( new ArrayList( project.getRemoteArtifactRepositories() ) )
-            .setManagedVersionMap( project.getManagedVersionMap() )
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact( artifact ).setResolveRoot( false ).setArtifactDependencies( project.getDependencyArtifacts() )
+            .setLocalRepository( session.getLocalRepository() ).setRemoteRepostories( new ArrayList( project.getRemoteArtifactRepositories() ) ).setManagedVersionMap( project.getManagedVersionMap() )
-        
+
-        project.setArtifacts( result.getArtifacts() );                
-        
+        project.setArtifacts( result.getArtifacts() );
+
-        {            
+        {
-   
-    public void resolvePluginVersion( Plugin plugin, MavenProject project ) 
+
+    public void resolvePluginVersion( Plugin plugin, MavenProject project )
-    {        
+    {
-        
+
-        
+
-        
-        String artifactId = plugin.getArtifactId();        
-                
+
+        String artifactId = plugin.getArtifactId();
+
-        
+
-                    
+
-    }    
-    
+    }
+
-        	throw new IllegalArgumentException("plugin.version: null");
+            throw new IllegalArgumentException( "plugin.version: null" );
-        
-        PluginDescriptor pluginDescriptor =  loadPlugin( plugin, project, localRepository );
+
+        PluginDescriptor pluginDescriptor = loadPlugin( plugin, project, localRepository );
-        
+
-    
+
- 
+
-    
+
-    }    
+    }
-                
+
-    
+
-    
+
-    private Map pluginIdsByPrefix = new HashMap();
-        
-    {        
+    {
-            PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;            
+            PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;
-            
+
-                pluginDescriptors.put( key, pluginDescriptor );                
+                pluginDescriptors.put( key, pluginDescriptor );
-    public String getId()
-    {
-        return "maven-plugin-collector";
-    }
-
-    public Collection<PluginDescriptor> getPluginDescriptors()
-    {
-        return pluginDescriptors.values();    
-    }
-
-
-    public boolean isPluginInstalled( Plugin plugin )
-    {
-        String key = constructPluginKey( plugin );
-        return pluginDescriptors.containsKey( key );
-    }
-
-    public Set<PluginDescriptor> getPluginDescriptorsForPrefix( String prefix )
-    {
-        Set result = new HashSet();
-        for ( Iterator it = pluginDescriptors.values().iterator(); it.hasNext(); )
-        {
-            PluginDescriptor pd = (PluginDescriptor) it.next();
-            if ( pd.getGoalPrefix().equals( prefix ) )
-            {
-                result.add( pd );
-            }
-        }
-
-        return result;
-    }
