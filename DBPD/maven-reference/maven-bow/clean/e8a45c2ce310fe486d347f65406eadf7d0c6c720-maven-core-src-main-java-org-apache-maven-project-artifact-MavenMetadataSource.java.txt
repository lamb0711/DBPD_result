o Fixed scope handling during transitive dependency resolution

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773258 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashSet;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
+import org.apache.maven.model.Dependency;
-            {                
-                ArtifactFilter filter;
-                if ( artifact.getScope() == null )
+            {
+                artifacts = new LinkedHashSet<Artifact>();
+
+                for ( Dependency d : project.getDependencies() )
-                    filter = null;
+                    String effectiveScope = getEffectiveScope( d.getScope(), artifact.getScope() );
+
+                    if ( effectiveScope != null )
+                    {
+                        Artifact dependencyArtifact =
+                            repositorySystem.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(),
+                                                             effectiveScope, d.getType() );
+
+                        artifacts.add( dependencyArtifact );
+                    }
-                else
-                {
-                    filter = new ScopeArtifactFilter( artifact.getScope() );
-                }
-                                
-                artifacts = project.createArtifacts( filter );
-                
-                project.setArtifacts( artifacts );                
+    private String getEffectiveScope( String originalScope, String inheritedScope )
+    {
+        String effectiveScope = Artifact.SCOPE_RUNTIME;
+
+        if ( originalScope == null )
+        {
+            originalScope = Artifact.SCOPE_COMPILE;
+        }
+
+        if ( inheritedScope == null )
+        {
+            // direct dependency retains its scope
+            effectiveScope = originalScope;
+        }
+        else if ( Artifact.SCOPE_TEST.equals( originalScope ) || Artifact.SCOPE_PROVIDED.equals( originalScope ) )
+        {
+            // test and provided are not transitive, so exclude them
+            effectiveScope = null;
+        }
+        else if ( Artifact.SCOPE_SYSTEM.equals( originalScope ) )
+        {
+            // system scope come through unchanged...
+            effectiveScope = Artifact.SCOPE_SYSTEM;
+        }
+        else if ( Artifact.SCOPE_COMPILE.equals( originalScope ) && Artifact.SCOPE_COMPILE.equals( inheritedScope ) )
+        {
+            // added to retain compile scope. Remove if you want compile inherited as runtime
+            effectiveScope = Artifact.SCOPE_COMPILE;
+        }
+        else if ( Artifact.SCOPE_TEST.equals( inheritedScope ) )
+        {
+            effectiveScope = Artifact.SCOPE_TEST;
+        }
+        else if ( Artifact.SCOPE_PROVIDED.equals( inheritedScope ) )
+        {
+            effectiveScope = Artifact.SCOPE_PROVIDED;
+        }
+
+        return effectiveScope;
+    }
+
+
