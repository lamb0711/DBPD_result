Fix: mng3746 - Implemented proper ordering of system, user and model properties used in interpolation. this required creating a tag value, which could be used for comparing and ordering of InterpolatorProperty.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@695196 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
-                        false, false));
+                        PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false));
-            standardInterpolatorProperties.add(new InterpolatorProperty("${project.basedir}", basedir ));
-            standardInterpolatorProperties.add(new InterpolatorProperty("${basedir}", basedir ));
-            standardInterpolatorProperties.add(new InterpolatorProperty("${pom.basedir}", basedir ));
+            standardInterpolatorProperties.add(new InterpolatorProperty("${project.basedir}", basedir,
+                    PomInterpolatorTag.PROJECT_PROPERTIES.name() ));
+            standardInterpolatorProperties.add(new InterpolatorProperty("${basedir}", basedir,
+                    PomInterpolatorTag.PROJECT_PROPERTIES.name() ));
+            standardInterpolatorProperties.add(new InterpolatorProperty("${pom.basedir}", basedir,
+                    PomInterpolatorTag.PROJECT_PROPERTIES.name() ));
-                        uri.length() ) + "}", mp.getValue() ) );
+                        uri.length() ) + "}", mp.getValue(), PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-        ips1.addAll(ModelTransformerContext.createInterpolatorProperties(firstPassModelProperties, ProjectUri.baseUri, aliases,
-                        false, false));
+        ips1.addAll(ModelTransformerContext.createInterpolatorProperties(firstPassModelProperties, ProjectUri.baseUri, aliases,
+                        PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false));
+        Collections.sort(ips1, new Comparator<InterpolatorProperty>()
+        {
+            public int compare(InterpolatorProperty o, InterpolatorProperty o1) {
+                return PomInterpolatorTag.valueOf(o.getTag()).compareTo(PomInterpolatorTag.valueOf(o1.getTag()));
+            }
+        });
+        ips2.addAll(standardInterpolatorProperties);        
-                        false, false));
-        ips2.addAll(standardInterpolatorProperties);
+                        PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false));
+        ips2.addAll(interpolatorProperties);
+        Collections.sort(ips2, new Comparator<InterpolatorProperty>()
+        {
+            public int compare(InterpolatorProperty o, InterpolatorProperty o1) {
+                return PomInterpolatorTag.valueOf(o.getTag()).compareTo(PomInterpolatorTag.valueOf(o1.getTag()));
+            }
+        });
