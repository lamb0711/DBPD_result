Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/maven into trunk

+import org.apache.maven.cli.logging.Slf4jConfiguration;
+import org.apache.maven.cli.logging.Slf4jConfigurationFactory;
+import org.apache.maven.cli.logging.Slf4jStdoutLogger;
-import org.apache.maven.plugin.PluginRealmCache;
+            repository( cliRequest );
-            if (localContainer != null)
+            if ( localContainer != null )
+        //
+        // Parsing errors can happen during the processing of the arguments and we prefer not having to check if the logger is null
+        // and construct this so we can use an SLF4J logger everywhere.
+        //
+        slf4jLogger = new Slf4jStdoutLogger();
+
-    //
-    // All logging is handled by SFL4J
-    //
+    /**
+     * configure logging
+     */
+        slf4jLoggerFactory = LoggerFactory.getILoggerFactory();
+        Slf4jConfiguration slf4jConfiguration = Slf4jConfigurationFactory.getConfiguration( slf4jLoggerFactory );
+
-            System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", "debug" );            
+            slf4jConfiguration.setRootLoggerLevel( Slf4jConfiguration.Level.DEBUG );
-            System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", "error" );            
+            slf4jConfiguration.setRootLoggerLevel( Slf4jConfiguration.Level.ERROR );
-            System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", "info" );
+            slf4jConfiguration.setRootLoggerLevel( Slf4jConfiguration.Level.INFO );
-            System.setProperty( "org.slf4j.simpleLogger.logFile", logFile.getAbsolutePath() );
+
+            // redirect stdout and stderr to file
+        slf4jConfiguration.activate();
+
-        slf4jLoggerFactory = LoggerFactory.getILoggerFactory();
-            ContainerConfiguration cc = new DefaultContainerConfiguration()
-                .setClassWorld( cliRequest.classWorld )
-                .setRealm( setupContainerRealm( cliRequest ) )
-                .setClassPathScanning( PlexusConstants.SCANNING_INDEX )
-                .setAutoWiring( true )
-                .setName( "maven" );
+        ContainerConfiguration cc = new DefaultContainerConfiguration()
+            .setClassWorld( cliRequest.classWorld )
+            .setRealm( setupContainerRealm( cliRequest ) )
+            .setClassPathScanning( PlexusConstants.SCANNING_INDEX )
+            .setAutoWiring( true )
+            .setName( "maven" );
-            container = new DefaultPlexusContainer( cc, new AbstractModule()
+        container = new DefaultPlexusContainer( cc, new AbstractModule()
+        {
+            protected void configure()
+                bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );
+            }
+        } );
-                protected void configure()
-                {
-                    bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );
-                }
+        // NOTE: To avoid inconsistencies, we'll use the TCCL exclusively for lookups
+        container.setLookupRealm( null );
-            } );
+        container.setLoggerManager( plexusLoggerManager );
-            // NOTE: To avoid inconsistencies, we'll use the TCCL exclusively for lookups
-            container.setLookupRealm( null );
-
-            container.setLoggerManager( plexusLoggerManager );
-
-            customizeContainer( container );
+        customizeContainer( container );
+    private void repository( CliRequest cliRequest )
+        throws Exception
+    {
+        if ( cliRequest.commandLine.hasOption( CLIManager.LEGACY_LOCAL_REPOSITORY ) || Boolean.getBoolean( "maven.legacyLocalRepo" ) )
+        {
+           cliRequest.request.setUseLegacyLocalRepository( true );
+        }
+    }
+
-        ExecutionListener executionListener = new ExecutionEventLogger( slf4jLogger );
+        ExecutionListener executionListener = new ExecutionEventLogger();
-        return new Slf4jMavenTransferListener( slf4jLogger );
+        return new Slf4jMavenTransferListener();
