factor out project sorter, and use whole ID


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163982 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Dependency;
-import org.codehaus.plexus.util.dag.CycleDetectedException;
-import org.codehaus.plexus.util.dag.DAG;
-import org.codehaus.plexus.util.dag.TopologicalSorter;
-            // TODO: let the scope handler deal with this
-            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) )
+            if ( isAddedToClasspath( a ) )
-                File file = a.getFile();
-                if ( file == null )
+                // TODO: let the scope handler deal with this
+                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) )
-                    throw new DependencyResolutionRequiredException( a );
+                    File file = a.getFile();
+                    if ( file == null )
+                    {
+                        throw new DependencyResolutionRequiredException( a );
+                    }
+                    list.add( file.getPath() );
-                list.add( file.getPath() );
-    /**
-     * Sort a list of projects.
-     * <ul>
-     * <li>collect all the vertices for the projects that we want to build.</li>
-     * <li>iterate through the deps of each project and if that dep is within
-     * the set of projects we want to build then add an edge, otherwise throw
-     * the edge away because that dependency is not within the set of projects
-     * we are trying to build. we assume a closed set.</li>
-     * <li>do a topo sort on the graph that remains.</li>
-     * </ul>
-     */
-    public static List getSortedProjects( List projects )
-        throws CycleDetectedException
-    {
-        DAG dag = new DAG();
-
-        Map projectMap = new HashMap();
-
-        for ( Iterator i = projects.iterator(); i.hasNext(); )
-        {
-            MavenProject project = (MavenProject) i.next();
-
-            String artifactId = project.getArtifactId();
-
-            dag.addVertex( artifactId );
-
-            projectMap.put( artifactId, project );
-        }
-
-        for ( Iterator i = projects.iterator(); i.hasNext(); )
-        {
-            MavenProject project = (MavenProject) i.next();
-
-            String artifactId = project.getArtifactId();
-
-            for ( Iterator j = project.getDependencies().iterator(); j.hasNext(); )
-            {
-                Dependency dependency = (Dependency) j.next();
-
-                String dependencyArtifactId = dependency.getArtifactId();
-
-                if ( dag.getVertex( dependencyArtifactId ) != null )
-                {
-                    dag.addEdge( artifactId, dependencyArtifactId );
-                }
-            }
-
-            MavenProject parent = project.getParent();
-            if ( parent != null )
-            {
-                if ( dag.getVertex( parent.getArtifactId() ) != null )
-                {
-                    dag.addEdge( artifactId, parent.getArtifactId() );
-                }
-            }
-        }
-
-        List sortedProjects = new ArrayList();
-
-        for ( Iterator i = TopologicalSorter.sort( dag ).iterator(); i.hasNext(); )
-        {
-            String artifactId = (String) i.next();
-
-            sortedProjects.add( projectMap.get( artifactId ) );
-        }
-
-        return sortedProjects;
-    }
-
