[MNG-4642] Extended MojoDescriptor with threadSafe attribute

Added support for detecting @threadSafe annotation and a nice noisy, warning message.

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@938443 13f79535-47bb-0310-9956-ffa450edef68

+
+
+
+
-    
+
-    public final static MojoDescriptor COMPILE = createMojoDescriptor( "compile" );
+    public final static MojoDescriptor COMPILE = createMojoDescriptor( "compile", true );
-
-    public final static MojoDescriptor PRE_SITE = createMojoDescriptor( "pre-site" );
-    public final static MojoDescriptor SITE = createMojoDescriptor( "site" );
-    public final static MojoDescriptor POST_SITE = createMojoDescriptor( "post-site" );
-    public final static MojoDescriptor SITE_DEPLOY = createMojoDescriptor( "site-deploy" );
+    public final static MojoDescriptor PRE_SITE = createMojoDescriptor( "pre-site" );
+
+    public final static MojoDescriptor SITE = createMojoDescriptor( "site" );
+
+    public final static MojoDescriptor POST_SITE = createMojoDescriptor( "post-site" );
+
+    public final static MojoDescriptor SITE_DEPLOY = createMojoDescriptor( "site-deploy" );
-        me.add( createMojoExecution( new Plugin(), "resources", "default-resources", PROCESS_RESOURCES ) );
-        me.add( createMojoExecution( new Plugin(), "compile", "default-compile", COMPILE ) );
+        me.add( createMojoExecution( "resources", "default-resources", PROCESS_RESOURCES ) );
+        me.add( createMojoExecution( "compile", "default-compile", COMPILE ) );
-        me.add( createMojoExecution( new Plugin(), "initialize", "default-initialize", INITIALIZE ) ); 
-        me.add( createMojoExecution( new Plugin(), "resources", "default-resources", PROCESS_RESOURCES ) );
-        me.add( createMojoExecution( new Plugin(), "compile", "default-compile", COMPILE ) );
-        me.add( createMojoExecution( new Plugin(), "testResources", "default-testResources", PROCESS_TEST_RESOURCES ) );
-        me.add( createMojoExecution( new Plugin(), "testCompile", "default-testCompile", TEST_COMPILE ) );
-        me.add( createMojoExecution( new Plugin(), "test", "default-test", TEST ) );
-        me.add( createMojoExecution( new Plugin(), "war", "default-war", PACKAGE ) );
-        me.add( createMojoExecution( new Plugin(), "install", "default-install", INSTALL ) );
+        me.add( createMojoExecution( "initialize", "default-initialize", INITIALIZE ) );
+        me.add( createMojoExecution( "resources", "default-resources", PROCESS_RESOURCES ) );
+        me.add( createMojoExecution( "compile", "default-compile", COMPILE ) );
+        me.add( createMojoExecution( "testResources", "default-testResources", PROCESS_TEST_RESOURCES ) );
+        me.add( createMojoExecution( "testCompile", "default-testCompile", TEST_COMPILE ) );
+        me.add( createMojoExecution( "test", "default-test", TEST ) );
+        me.add( createMojoExecution( "war", "default-war", PACKAGE ) );
+        me.add( createMojoExecution( "install", "default-install", INSTALL ) );
-
-        me.add( createMojoExecution( new Plugin(), "enforce", "enforce-versions", VALIDATE ) );
-        me.add( createMojoExecution( new Plugin(), "resources", "default-resources", PROCESS_RESOURCES ) );
-        me.add( createMojoExecution( new Plugin(), "compile", "default-compile", COMPILE ) );
-        me.add( createMojoExecution( new Plugin(), "testResources", "default-testResources", PROCESS_TEST_RESOURCES ) );
-        me.add( createMojoExecution( new Plugin(), "testCompile", "default-testCompile", TEST_COMPILE ) );
-        me.add( createMojoExecution( new Plugin(), "test", "default-test", TEST ) );
+        me.add( createMojoExecution( "enforce", "enforce-versions", VALIDATE ) );
+        me.add( createMojoExecution( "resources", "default-resources", PROCESS_RESOURCES ) );
+        me.add( createMojoExecution( "compile", "default-compile", COMPILE ) );
+        me.add( createMojoExecution( "testResources", "default-testResources", PROCESS_TEST_RESOURCES ) );
+        me.add( createMojoExecution( "testCompile", "default-testCompile", TEST_COMPILE ) );
+        me.add( createMojoExecution( "test", "default-test", TEST ) );
-    private static MojoExecution createMojoExecution( Plugin plugin, String goal, String executionId,
-                                                      MojoDescriptor mojoDescriptor )
+    private static MojoExecution createMojoExecution( String goal, String executionId, MojoDescriptor mojoDescriptor )
+        final Plugin plugin = mojoDescriptor.getPluginDescriptor().getPlugin();
-        result.setLifecyclePhase(  mojoDescriptor.getPhase() );
+        result.setLifecyclePhase( mojoDescriptor.getPhase() );
+
+        return createMojoDescriptor( phaseName, false );
+    }
+
+    public static MojoDescriptor createMojoDescriptor( String phaseName, boolean threadSafe )
+    {
+        Plugin plugin = new Plugin();
+        plugin.setArtifactId( "org.apache.maven.test.MavenExecutionPlan" );
+        plugin.setGroupId( "stub-plugin-" + phaseName );
+        descriptor.setPlugin( plugin );
+        mojoDescriptor.setThreadSafe( threadSafe );
