Corrected getConfigFile() by specifying sun as default config file; added log4j.properties to remove warn for org.apache.commons.beanutils.BeanUtils; formated code; added copyright to pom.xml

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@279769 13f79535-47bb-0310-9956-ffa450edef68

-
+ * @author <a href="mailto:vincent.siveton@gmail.com">Vincent Siveton</a>
-    
+
-    
+
-     * 
+     *
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-     * 
+     *
-    
+
-    public void executeReport( Locale locale ) throws MavenReportException
+    public void executeReport( Locale locale )
+        throws MavenReportException
-        
+
-        
+
-        
+
-            Configuration config = ConfigurationLoader.loadConfiguration( configFile,
-                                       new PropertiesExpander( overridingProperties ) );
+            Configuration config = ConfigurationLoader
+                .loadConfiguration( configFile, new PropertiesExpander( overridingProperties ) );
-            if ( moduleFactory != null ) checker.setModuleFactory( moduleFactory );
-            
-            if ( filterSet != null ) checker.addFilter( filterSet );
+            if ( moduleFactory != null )
+                checker.setModuleFactory( moduleFactory );
+
+            if ( filterSet != null )
+                checker.addFilter( filterSet );
-        catch( CheckstyleException ce )
+        catch ( CheckstyleException ce )
-        
+
-            
+
-            
+
-    
-    private AuditListener getListener() throws MavenReportException
+
+    private AuditListener getListener()
+        throws MavenReportException
-            
+
-            
+
-                throw new MavenReportException( "Invalid output file format: (" + outputFileFormat + "). Must be 'plain' or 'xml'." );
+                throw new MavenReportException( "Invalid output file format: (" + outputFileFormat
+                    + "). Must be 'plain' or 'xml'." );
-        
+
-    
-    private OutputStream getOutputStream( File file ) throws MavenReportException
+
+    private OutputStream getOutputStream( File file )
+        throws MavenReportException
-        
+
-            
-            if ( !parentFile.exists() ) parentFile.mkdirs();
-            
+
+            if ( !parentFile.exists() )
+                parentFile.mkdirs();
+
-    private File[] getFilesToProcess( String includes, String excludes ) throws MavenReportException
+    private File[] getFilesToProcess( String includes, String excludes )
+        throws MavenReportException
-        
+
-            excludesStr.append(excludes);
+            excludesStr.append( excludes );
-        
+
-            
+
-        
+
-        
-        return (File[]) ( files.toArray( new File[ 0 ] ) );
+
+        return (File[]) ( files.toArray( new File[0] ) );
-    private Properties getOverridingProperties() throws MavenReportException
+    private Properties getOverridingProperties()
+        throws MavenReportException
-        
+
-            if (  propertiesFile != null )
+            if ( propertiesFile != null )
-        
+
-    
-    private String getConfigFile() throws MavenReportException
+
+    private String getConfigFile()
+        throws MavenReportException
-        
-        if ( "turbine".equalsIgnoreCase( format ) )
+
+        if ( StringUtils.isEmpty( format ) || ( "sun".equalsIgnoreCase( format.trim() ) ) )
+        {
+            // By default
+            configFile = getClass().getResource( "/config/sun_checks.xml" );
+        }
+        else if ( "turbine".equalsIgnoreCase( format.trim() ) )
-        else if ( "avalon".equalsIgnoreCase( format ) )
+        else if ( "avalon".equalsIgnoreCase( format.trim() ) )
-        else if ( "".equalsIgnoreCase( format ) )
-        {
-            configFile = getClass().getResource( "/config/sun_checks.xml" );
-        }
-        
+
-    
-    private ModuleFactory getModuleFactory() throws MavenReportException
+
+    private ModuleFactory getModuleFactory()
+        throws MavenReportException
-        if ( StringUtils.isEmpty( packageNamesFile ) ) return null;
+        if ( StringUtils.isEmpty( packageNamesFile ) )
+            return null;
-    
-    private FilterSet getSuppressions() throws MavenReportException
+
+    private FilterSet getSuppressions()
+        throws MavenReportException
-        if ( StringUtils.isEmpty( suppressionsFile ) ) return null;
-        
+        if ( StringUtils.isEmpty( suppressionsFile ) )
+            return null;
+
-        return ResourceBundle.getBundle("checkstyle-report", locale, CheckstyleReport.class.getClassLoader() );
+        return ResourceBundle.getBundle( "checkstyle-report", locale, CheckstyleReport.class.getClassLoader() );
