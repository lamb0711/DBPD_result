Simplify ProjectBuildingException constructors and store the original File/URI instead of a String

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@587596 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.URI;
+import java.net.URISyntaxException;
-        return buildInternal( "Artifact [" + artifact + "]", model, localRepository, remoteArtifactRepositories, null, null, false, false );
+        return buildInternal( artifact.getFile(), model, localRepository, remoteArtifactRepositories, null, null,
+                              false, false );
-                    e.getMessage(), projectDescriptor.getAbsolutePath(), e );
+                    e.getMessage(), projectDescriptor, e );
-                        "' for dependency '" + d.getManagementKey() + "': " + e.getMessage(), pomFile.getAbsolutePath(), e );
+                        "' for dependency '" + d.getManagementKey() + "': " + e.getMessage(), pomFile, e );
-        MavenProject project = buildInternal( projectDescriptor.getAbsolutePath(),
+        MavenProject project = buildInternal( projectDescriptor,
-    private MavenProject buildInternal( String pomLocation,
+    private MavenProject buildInternal( File pomLocation,
-                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.", projectDescriptor.getAbsolutePath(), e );
+                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.", projectDescriptor, e );
-            throw new InvalidProjectModelException( projectId, pomLocation, e.getMessage(), e );
+            throw new InvalidProjectModelException( projectId, e.getMessage(), pomLocation, e );
-            throw new InvalidProjectModelException( projectId, pomLocation, e.getMessage(), e );
+            throw new InvalidProjectModelException( projectId, e.getMessage(), pomLocation, e );
-    private MavenProject processProjectLogic( String pomLocation,
+    private MavenProject processProjectLogic( File pomLocation,
-            throw new InvalidProjectModelException( projectId, pomLocation, "Failed to validate POM",
+            throw new InvalidProjectModelException( projectId, "Failed to validate POM", pomLocation,
-            return readModel( projectId, file.getAbsolutePath(), reader, strict );
+            return readModel( projectId, file.toURI(), reader, strict );
-                "Could not find the model file '" + file.getAbsolutePath() + "'.", file.getAbsolutePath(), e );
+                "Could not find the model file '" + file.getAbsolutePath() + "'.", file, e );
-                file.getAbsolutePath() + "'.\nError: \'" + e.getLocalizedMessage() + "\'", file.getAbsolutePath(), e );
+                file.getAbsolutePath() + "'.\nError: \'" + e.getLocalizedMessage() + "\'", file, e );
-                             String pomLocation,
+                             URI pomLocation,
-            throw new InvalidProjectModelException( projectId, pomLocation, "Not a v" + MAVEN_MODEL_VERSION  + " POM." );
+            throw new InvalidProjectModelException( projectId, "Not a v" + MAVEN_MODEL_VERSION + " POM.", pomLocation );
-            throw new InvalidProjectModelException( projectId, pomLocation,
-                "Parse error reading POM. Reason: " + e.getMessage(), e );
+            throw new InvalidProjectModelException( projectId, "Parse error reading POM. Reason: " + e.getMessage(),
+                                                    pomLocation, e );
+        URI uri = null;
+            uri = url.toURI();
-            return readModel( projectId, url.toExternalForm(), reader, strict );
+            return readModel( projectId, uri, reader, strict );
-                "\'\nError: \'" + e.getLocalizedMessage() + "\'", url.toExternalForm(), e );
+                "\'\nError: \'" + e.getLocalizedMessage() + "\'", uri, e );
+        }
+        catch ( URISyntaxException e )
+        {
+            throw new ProjectBuildingException( projectId, "Failed build model from URL \'" + url.toExternalForm()
+                + "\'\nError: \'" + e.getLocalizedMessage() + "\'", e );
+    /**
+     * @deprecated use {@link #createPluginArtifacts(String, List, File)}
+     * @param projectId
+     * @param plugins
+     * @param pomLocation absolute path of pom file
+     * @return
+     * @throws ProjectBuildingException
+     */
+        return createPluginArtifacts( projectId, plugins, new File( pomLocation ) );
+    }
+
+    /**
+     * 
+     * @param projectId
+     * @param plugins
+     * @param pomLocation pom file
+     * @return
+     * @throws ProjectBuildingException
+     */
+    protected Set createPluginArtifacts( String projectId,
+                                         List plugins, File pomLocation )
+        throws ProjectBuildingException
+    {
-    // TODO: share with createPluginArtifacts?
+    /**
+     * @deprecated use {@link #createReportArtifacts(String, List, File)}
+     * @param projectId
+     * @param reports
+     * @param pomLocation absolute path of pom file
+     * @return
+     * @throws ProjectBuildingException
+     */
+        return createReportArtifacts( projectId, reports, new File( pomLocation ) );
+    }
+
+    // TODO: share with createPluginArtifacts?
+    protected Set createReportArtifacts( String projectId,
+                                         List reports, File pomLocation )
+        throws ProjectBuildingException
+    {
-    // TODO: share with createPluginArtifacts?
+    /**
+     * @deprecated use {@link #createExtensionArtifacts(String, List, File)}
+     * @param projectId
+     * @param extensions
+     * @param pomLocation absolute path of pom file
+     * @return
+     * @throws ProjectBuildingException
+     */
+        return createExtensionArtifacts( projectId, extensions, new File( pomLocation ) );
+    }
+
+    // TODO: share with createPluginArtifacts?
+    protected Set createExtensionArtifacts( String projectId,
+                                            List extensions, File pomLocation )
+        throws ProjectBuildingException
+    {
