o trying to isolate the plugin dependency downloading from the project dependency downloading so that I can separate it out of the plugin manager


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@760775 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Collection;
-import java.util.Collections;
-        checkPluginDependencySpec( plugin, pluginProject );
-
-        /* get plugin managed versions */
-        
-        // This is really crappy that we have to do this. The repository system should deal with this. The retrieval of the transitive dependencies.
-        
+                
-    
-    // We should assume that We've already loaded the plugin in question.
-    
+        
-        {
-            Collection<MavenProject> projects;
-
-            if ( mojoDescriptor.isAggregator() )
-            {
-                projects = session.getSortedProjects();
-            }
-            else
-            {
-                projects = Collections.singleton( project );
-            }
-
-            //!!jvz What is this? We resolveTransitiveDependencies() and then a line later downDependencies()? That can't be right. We should also already
-            // know at this point that what we need to execute can't be found. This is the wrong time to find this out.
-            
+        {            
-                for ( MavenProject p : projects )
-                {
-                    resolveTransitiveDependencies( session, repositorySystem, mojoDescriptor.isDependencyResolutionRequired(), p, mojoDescriptor.isAggregator() );
-                }
-
-                downloadDependencies( project, session, repositorySystem );
+                // mojoDescriptor.isDependencyResolutionRequired() is actually the scope of the dependency resolution required, not a boolean ... yah.
+                downloadDependencies( session, mojoDescriptor.isDependencyResolutionRequired() );
-            Parameter parameter = (Parameter) parameters.get( i );
+            Parameter parameter = parameters.get( i );
-            Parameter parameter = (Parameter) parameters.get( i );
+            Parameter parameter = parameters.get( i );
-    protected void resolveTransitiveDependencies( MavenSession context, RepositorySystem repositorySystem, String scope, MavenProject project, boolean isAggregator )
+    protected void resolveTransitiveDependencies( MavenSession session, String scope )
+        MavenProject project = session.getCurrentProject();
+        
-            .setLocalRepository( context.getLocalRepository() )
+            .setLocalRepository( session.getLocalRepository() )
-    private void downloadDependencies( MavenProject project, MavenSession context, RepositorySystem repositorySystem )
-        throws ArtifactResolutionException, ArtifactNotFoundException
-    {
-        ArtifactRepository localRepository = context.getLocalRepository();
-        List<ArtifactRepository> remoteArtifactRepositories = project.getRemoteArtifactRepositories();
+    private void downloadDependencies( MavenSession session, String scope )
+        throws ArtifactResolutionException, ArtifactNotFoundException, InvalidDependencyVersionException
+    {        
+        resolveTransitiveDependencies( session, scope );
+        
+        ArtifactRepository localRepository = session.getLocalRepository();
+        List<ArtifactRepository> remoteArtifactRepositories = session.getCurrentProject().getRemoteArtifactRepositories();
-        for ( Iterator<Artifact> it = project.getArtifacts().iterator(); it.hasNext(); )
+        for ( Artifact artifact : session.getCurrentProject().getArtifacts() )
-            Artifact artifact = (Artifact) it.next();
-            
-
+   
-    // We need to strip out the methods in here for a validation method.
-    public Artifact resolvePluginArtifact( Plugin plugin, MavenProject project, MavenSession session )
-        throws PluginManagerException, InvalidPluginException, PluginVersionResolutionException, ArtifactResolutionException, ArtifactNotFoundException
-    {
-        logger.debug( "Resolving plugin artifact " + plugin.getKey() + " from " + project.getRemoteArtifactRepositories() );
-
-        ArtifactRepository localRepository = session.getLocalRepository();
-
-        // We need the POM for the actually plugin project so we can look at the prerequisite element.
-        MavenProject pluginProject = buildPluginProject( plugin, localRepository, project.getRemoteArtifactRepositories() );
-
-        Artifact pluginArtifact = repositorySystem.createPluginArtifact( plugin );
-
-        checkRequiredMavenVersion( plugin, pluginProject, localRepository, project.getRemoteArtifactRepositories() );
-
-        checkPluginDependencySpec( plugin, pluginProject );
-
-        pluginArtifact = project.replaceWithActiveArtifact( pluginArtifact );
-
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest( pluginArtifact, localRepository, project.getRemoteArtifactRepositories() );
-
-        ArtifactResolutionResult result = repositorySystem.resolve( request );
-
-        resolutionErrorHandler.throwErrors( request, result );
-
-        return pluginArtifact;
-    }
-
-    /**
-     * @param pluginProject
-     * @todo would be better to store this in the plugin descriptor, but then it won't be available
-     *       to the version manager which executes before the plugin is instantiated
-     */
-    public void checkRequiredMavenVersion( Plugin plugin, MavenProject pluginProject, ArtifactRepository localRepository, List remoteRepositories )
+    public void checkRequiredMavenVersion( Plugin plugin, MavenProject pluginProject, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-
-    public void checkPluginDependencySpec( Plugin plugin, MavenProject pluginProject )
-        throws InvalidPluginException
-    {
-        ArtifactFilter filter = new ScopeArtifactFilter( "runtime" );
-        try
-        {
-            repositorySystem.createArtifacts( pluginProject.getDependencies(), null, filter, pluginProject );
-        }
-        catch ( VersionNotFoundException e )
-        {
-            throw new InvalidPluginException( "Plugin: " + plugin.getKey() + " has a dependency with an invalid version." );
-        }
-    }
-    // Plugin Mapping Manager
-    
-    public org.apache.maven.model.Plugin getByPrefix( String pluginPrefix, List groupIds, List pluginRepositories, ArtifactRepository localRepository )
+    public org.apache.maven.model.Plugin getByPrefix( String pluginPrefix, List<String> groupIds, List<ArtifactRepository> pluginRepositories, ArtifactRepository localRepository )
-        org.apache.maven.model.Plugin result = (org.apache.maven.model.Plugin) pluginDefinitionsByPrefix.get( pluginPrefix );
+        org.apache.maven.model.Plugin result = pluginDefinitionsByPrefix.get( pluginPrefix );
-    private void loadPluginMappings( List groupIds, List pluginRepositories, ArtifactRepository localRepository )
+    private void loadPluginMappings( List<String> groupIds, List<ArtifactRepository> pluginRepositories, ArtifactRepository localRepository )
-        List pluginGroupIds = new ArrayList( groupIds );
+        List<String> pluginGroupIds = new ArrayList<String>( groupIds );
-        // TODO: use constant
-        if ( !pluginGroupIds.contains( "org.apache.maven.plugins" ) )
+        for ( String groupId : pluginGroupIds )
-            pluginGroupIds.add( "org.apache.maven.plugins" );
-        }
-        if ( !pluginGroupIds.contains( "org.codehaus.mojo" ) )
-        {
-            pluginGroupIds.add( "org.codehaus.mojo" );
-        }
-
-        for ( Iterator it = pluginGroupIds.iterator(); it.hasNext(); )
-        {
-            String groupId = (String) it.next();
-            logger.debug( "Loading plugin prefixes from group: " + groupId );
-                loadPluginMappings( groupId, pluginRepositories, localRepository );
+                RepositoryMetadata metadata = new GroupRepositoryMetadata( groupId );
+                
+                repositoryMetadataManager.resolve( metadata, pluginRepositories, localRepository );
+
+                Metadata repoMetadata = metadata.getMetadata();
+                
+                if ( repoMetadata != null )
+                {
+                    for ( org.apache.maven.artifact.repository.metadata.Plugin mapping : repoMetadata.getPlugins() )
+                    {
+                        String prefix = mapping.getPrefix();
+
+                        //if the prefix has already been found, don't add it again.
+                        //this is to preserve the correct ordering of prefix searching (MNG-2926)
+                        if ( !pluginDefinitionsByPrefix.containsKey( prefix ) )
+                        {
+                            String artifactId = mapping.getArtifactId();
+
+                            Plugin plugin = new Plugin();
+
+                            plugin.setGroupId( metadata.getGroupId() );
+
+                            plugin.setArtifactId( artifactId );
+
+                            pluginDefinitionsByPrefix.put( prefix, plugin );
+                        }
+                    }
+                }
-
-    //!!jvz This should not be here, it's part of pre-processing.
-    private void loadPluginMappings( String groupId, List pluginRepositories, ArtifactRepository localRepository )
-        throws RepositoryMetadataResolutionException
-    {
-        RepositoryMetadata metadata = new GroupRepositoryMetadata( groupId );
-
-        logger.debug( "Checking repositories:\n" + pluginRepositories + "\n\nfor plugin prefix metadata: " + groupId );
-        
-        repositoryMetadataManager.resolve( metadata, pluginRepositories, localRepository );
-
-        Metadata repoMetadata = metadata.getMetadata();
-        
-        if ( repoMetadata != null )
-        {
-            for ( Iterator pluginIterator = repoMetadata.getPlugins().iterator(); pluginIterator.hasNext(); )
-            {
-                org.apache.maven.artifact.repository.metadata.Plugin mapping = (org.apache.maven.artifact.repository.metadata.Plugin) pluginIterator.next();
-                
-                logger.debug( "Found plugin: " + mapping.getName() + " with prefix: " + mapping.getPrefix() );
-
-                String prefix = mapping.getPrefix();
-
-                //if the prefix has already been found, don't add it again.
-                //this is to preserve the correct ordering of prefix searching (MNG-2926)
-                if ( !pluginDefinitionsByPrefix.containsKey( prefix ) )
-                {
-                    String artifactId = mapping.getArtifactId();
-
-                    org.apache.maven.model.Plugin plugin = new org.apache.maven.model.Plugin();
-
-                    plugin.setGroupId( metadata.getGroupId() );
-
-                    plugin.setArtifactId( artifactId );
-
-                    pluginDefinitionsByPrefix.put( prefix, plugin );
-                }
-            }
-        }
-    }           
