PR: MNG-490
Submitted by: Rahul Thakur
Reviewed by:  Brett Porter
Creating an archetype with a different folder structure for java and test sources still results in default (src/main/java) folder being generated.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@240227 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Build;
+import org.apache.maven.model.Model;
+import org.apache.maven.model.Resource;
+import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
+import java.io.FileReader;
+    private static final String DEFAULT_TEST_RESOURCE_DIR = "/src/test/resources";
+
+    private static final String DEFAULT_TEST_SOURCE_DIR = "/src/test/java";
+
+    private static final String DEFAULT_RESOURCE_DIR = "/src/main/resources";
+
+    private static final String DEFAULT_SOURCE_DIR = "/src/main/java";
+    
+    
-                                 ArtifactRepository localRepository, List remoteRepositories, Map parameters )
+                                ArtifactRepository localRepository, List remoteRepositories, Map parameters )
-                getLogger().info( "Using following parameters for creating Archetype: " + archetypeArtifactId + ":" + archetypeVersion );
+                getLogger().info(
+                                  "Using following parameters for creating Archetype: " + archetypeArtifactId + ":"
+                                      + archetypeVersion );
-        
-        
+
+            // ---------------------------------------------------------------------
+            // Model generated for the new archetype, so process it now
+            // ---------------------------------------------------------------------
+            File pomFile = new File( outputDirectory + "/" + ARCHETYPE_POM );
+            FileReader pomReader = new FileReader( pomFile );
+            MavenXpp3Reader reader = new MavenXpp3Reader();
+            Model generatedModel = reader.read( pomReader );
+
+            // XXX: Following POM processing block may be a candidate for 
+            // refactoring out into service methods or moving to 
+            // createProjectDirectoryStructure(outputDirectory)
+            Build build = null;
+            boolean bOverrideSrcDir = false;
+            boolean bOverrideScriptSrcDir = false;
+            boolean bOverrideResourceDir = false;
+            boolean bOverrideTestSrcDir = false;
+            boolean bOverrideTestResourceDir = false;
+            boolean bFoundBuildElement = ( null != ( build = generatedModel.getBuild() ) );
+
+            if ( getLogger().isDebugEnabled() )
+                getLogger()
+                    .debug(
+                            "********************* Debug info for resources created from generated Model ***********************" );
+
+            if ( getLogger().isDebugEnabled() )
+                getLogger().debug( "Was build element found in generated POM?: " + bFoundBuildElement );
+            
+            // create source directory if specified in POM
+            if ( bFoundBuildElement && null != build.getSourceDirectory() )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().debug( "Overriding default source directory " );
+                bOverrideSrcDir = true;
+                String srcDirectory = build.getSourceDirectory();
+                srcDirectory = StringUtils.replace( srcDirectory, "\\", "/" );
+                FileUtils.mkdir( outputDirectory
+                    + ( srcDirectory.startsWith( "/" ) ? srcDirectory : ( "/" + srcDirectory ) ) );
+            }
+
+            // create script source directory if specified in POM
+            if ( bFoundBuildElement && null != build.getScriptSourceDirectory() )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().debug( "Overriding default script source directory " );
+                bOverrideScriptSrcDir = true;
+                String scriptSourceDirectory = build.getScriptSourceDirectory();
+                scriptSourceDirectory = StringUtils.replace( scriptSourceDirectory, "\\", "/" );
+                FileUtils.mkdir( outputDirectory
+                    + ( scriptSourceDirectory.startsWith( "/" ) ? scriptSourceDirectory
+                                                               : ( "/" + scriptSourceDirectory ) ) );
+
+            }
+
+            // create resource director(y/ies) if specified in POM
+            if ( bFoundBuildElement && build.getResources().size() > 0 )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().info( "Overriding default resource directory " );
+                bOverrideResourceDir = true;
+                Iterator resourceItr = build.getResources().iterator();
+                while ( resourceItr.hasNext() )
+                {
+                    Resource resource = (Resource) resourceItr.next();
+                    String resourceDirectory = resource.getDirectory();
+                    resourceDirectory = StringUtils.replace( resourceDirectory, "\\", "/" );
+                    FileUtils.mkdir( outputDirectory
+                        + ( resourceDirectory.startsWith( "/" ) ? resourceDirectory : ( "/" + resourceDirectory ) ) );
+                }
+            }
+            // create test source directory if specified in POM
+            if ( bFoundBuildElement && null != build.getTestSourceDirectory() )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().debug( "Overriding default test directory " );
+                bOverrideTestSrcDir = true;
+                String testDirectory = build.getTestSourceDirectory();
+                testDirectory = StringUtils.replace( testDirectory, "\\", "/" );
+                FileUtils.mkdir( outputDirectory
+                    + ( testDirectory.startsWith( "/" ) ? testDirectory : ( "/" + testDirectory ) ) );
+            }
+
+            // create test resource directory if specified in POM
+            if ( bFoundBuildElement && build.getTestResources().size() > 0 )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().debug( "Overriding default test resource directory " );
+                bOverrideTestResourceDir = true;
+                Iterator testResourceItr = build.getTestResources().iterator();
+                while ( testResourceItr.hasNext() )
+                {
+                    Resource resource = (Resource) testResourceItr.next();
+                    String testResourceDirectory = resource.getDirectory();
+                    testResourceDirectory = StringUtils.replace( testResourceDirectory, "\\", "/" );
+                    FileUtils.mkdir( outputDirectory
+                        + ( testResourceDirectory.startsWith( "/" ) ? testResourceDirectory
+                                                                   : ( "/" + testResourceDirectory ) ) );
+                }
+            }
+
+            getLogger()
+                .info(
+                       "********************* End of debug info from resources from generated POM ***********************" );
+
-                FileUtils.mkdir( outputDirectory + "/src/main/java" );
-
+                if ( !bOverrideSrcDir )
+                {
+                    FileUtils.mkdir( outputDirectory + DEFAULT_SOURCE_DIR );
+                }
-                FileUtils.mkdir( outputDirectory + "/src/main/resources" );
-
+                if ( !bOverrideResourceDir )
+                {
+                    FileUtils.mkdir( outputDirectory + DEFAULT_RESOURCE_DIR );
+                }
-                FileUtils.mkdir( outputDirectory + "/src/test/java" );
+                if ( !bOverrideTestSrcDir )
+                {
+                    FileUtils.mkdir( outputDirectory + DEFAULT_TEST_SOURCE_DIR );
+                }
-                FileUtils.mkdir( outputDirectory + "/src/test/resources" );
-
+                if ( !bOverrideTestResourceDir )
+                {
+                    FileUtils.mkdir( outputDirectory + DEFAULT_TEST_RESOURCE_DIR );
+                }
-        
+
-                                    boolean packageInFileName, String packageName )
+                                   boolean packageInFileName, String packageName )
+
