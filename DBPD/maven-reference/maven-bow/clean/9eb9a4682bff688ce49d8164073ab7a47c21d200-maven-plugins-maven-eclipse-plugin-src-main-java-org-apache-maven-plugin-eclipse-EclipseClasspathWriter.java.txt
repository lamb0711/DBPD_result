Resolving: MNG-1076  Added ability to detect system scoped dependencies, and add them as external jar references rather than kind=var references. Included some new messages for handling this case, as well.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@325905 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Set;
-            String fullPath = artifactPath.getPath();
-
-            File localRepositoryFile = new File( localRepository.getBasedir() );
-
-            path = "M2_REPO/" //$NON-NLS-1$
-                + EclipseUtils.toRelativeAndFixSeparator( localRepositoryFile, fullPath, false );
-
-            if ( downloadSources )
+            if ( Artifact.SCOPE_SYSTEM.equals( artifact.getScope() ) )
-                Artifact sourceArtifact = retrieveSourceArtifact( artifact, remoteArtifactRepositories, localRepository,
-                                                                  artifactResolver, artifactFactory );
-
-                if ( !sourceArtifact.isResolved() )
+                try
-                    log.info( Messages.getString( "EclipseClasspathWriter.sourcesnotavailable", //$NON-NLS-1$
-                                                  sourceArtifact.getArtifactId() ) );
+                    path = artifactPath.getCanonicalPath();
-                else
+                catch ( IOException e )
-                    log.debug( Messages.getString( "EclipseClasspathWriter.sourcesavailable", //$NON-NLS-1$
-                                                   new Object[]{sourceArtifact.getArtifactId(),
-                                                       sourceArtifact.getFile().getAbsolutePath()} ) );
-
-                    sourcepath = "M2_REPO/" //$NON-NLS-1$
-                        + EclipseUtils.toRelativeAndFixSeparator( localRepositoryFile,
-                                                                  sourceArtifact.getFile().getAbsolutePath(), false );
+                    String message = Messages.getString( "EclipsePlugin.cantcanonicalize", artifactPath );
+                    
+                    throw new MojoExecutionException( message, e );
+                
+                log.info( Messages.getString( "EclipsePlugin.artifactissystemscoped", //$NON-NLS-1$
+                                              new Object[] { artifact.getArtifactId(), path } ) );
+                                
+                log.info( Messages.getString( "EclipseClasspathWriter.sourcesnotavailable", //$NON-NLS-1$
+                                              artifact.getArtifactId() ) );
+                kind = "lib"; //$NON-NLS-1$
+            else
+            {
+                File localRepositoryFile = new File( localRepository.getBasedir() );
-            kind = "var"; //$NON-NLS-1$
+                String fullPath = artifactPath.getPath();
+
+                path = "M2_REPO/" //$NON-NLS-1$
+                    + EclipseUtils.toRelativeAndFixSeparator( localRepositoryFile, fullPath, false );
+
+                if ( downloadSources )
+                {
+                    Artifact sourceArtifact = retrieveSourceArtifact( artifact, remoteArtifactRepositories, localRepository,
+                                                                      artifactResolver, artifactFactory );
+
+                    if ( !sourceArtifact.isResolved() )
+                    {
+                        log.info( Messages.getString( "EclipseClasspathWriter.sourcesnotavailable", //$NON-NLS-1$
+                                                      sourceArtifact.getArtifactId() ) );
+                    }
+                    else
+                    {
+                        log.debug( Messages.getString( "EclipseClasspathWriter.sourcesavailable", //$NON-NLS-1$
+                                                       new Object[]{sourceArtifact.getArtifactId(),
+                                                           sourceArtifact.getFile().getAbsolutePath()} ) );
+
+                        sourcepath = "M2_REPO/" //$NON-NLS-1$
+                            + EclipseUtils.toRelativeAndFixSeparator( localRepositoryFile,
+                                                                      sourceArtifact.getFile().getAbsolutePath(), false );
+                    }
+
+                }
+
+                kind = "var"; //$NON-NLS-1$
+            }
-                log.debug( "Cannot resolve source artifact", e );
+                String message = Messages.getString( "EclipseClasspathWriter.cantresolvesources", //$NON-NLS-1$
+                                                     new Object[] { sourceArtifact.getArtifactId(), e.getMessage() } );
+                
+                log.debug( message , e );
-            throw new MojoExecutionException( "Error getting source artifact", e );
+            String message = Messages.getString( "EclipseClasspathWriter.errorresolvingsources", //$NON-NLS-1$
+                                                 new Object[] { sourceArtifact.getArtifactId(), e.getMessage() } );
+            
+            throw new MojoExecutionException( message, e );
