Formatting

-public class Installer
-{
-    public static final String DEFAULT_DISTRIBUTION_PATH = "wrapper/dists";
+public class Installer {
+  public static final String DEFAULT_DISTRIBUTION_PATH = "wrapper/dists";
-    private final Downloader download;
+  private final Downloader download;
-    private final PathAssembler pathAssembler;
+  private final PathAssembler pathAssembler;
-    public Installer( Downloader download, PathAssembler pathAssembler )
-    {
-        this.download = download;
-        this.pathAssembler = pathAssembler;
+  public Installer(Downloader download, PathAssembler pathAssembler) {
+    this.download = download;
+    this.pathAssembler = pathAssembler;
+  }
+
+  public File createDist(WrapperConfiguration configuration) throws Exception {
+    URI distributionUrl = configuration.getDistribution();
+    boolean alwaysDownload = configuration.isAlwaysDownload();
+    boolean alwaysUnpack = configuration.isAlwaysUnpack();
+
+    PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration);
+
+    File localZipFile = localDistribution.getZipFile();
+    boolean downloaded = false;
+    if (alwaysDownload || !localZipFile.exists()) {
+      File tmpZipFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".part");
+      tmpZipFile.delete();
+      System.out.println("Downloading " + distributionUrl);
+      download.download(distributionUrl, tmpZipFile);
+      tmpZipFile.renameTo(localZipFile);
+      downloaded = true;
-    public File createDist( WrapperConfiguration configuration )
-        throws Exception
-    {
-        URI distributionUrl = configuration.getDistribution();
-        boolean alwaysDownload = configuration.isAlwaysDownload();
-        boolean alwaysUnpack = configuration.isAlwaysUnpack();
+    File distDir = localDistribution.getDistributionDir();
+    List<File> dirs = listDirs(distDir);
-        PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution( configuration );
+    if (downloaded || alwaysUnpack || dirs.isEmpty()) {
+      for (File dir : dirs) {
+        System.out.println("Deleting directory " + dir.getAbsolutePath());
+        deleteDir(dir);
+      }
+      System.out.println("Unzipping " + localZipFile.getAbsolutePath() + " to " + distDir.getAbsolutePath());
+      unzip(localZipFile, distDir);
+      dirs = listDirs(distDir);
+      if (dirs.isEmpty()) {
+        throw new RuntimeException(String.format("Maven distribution '%s' does not contain any directories. Expected to find exactly 1 directory.", distributionUrl));
+      }
+      setExecutablePermissions(dirs.get(0));
+    }
+    if (dirs.size() != 1) {
+      throw new RuntimeException(String.format("Maven distribution '%s' contains too many directories. Expected to find exactly 1 directory.", distributionUrl));
+    }
+    return dirs.get(0);
+  }
-        File localZipFile = localDistribution.getZipFile();
-        boolean downloaded = false;
-        if ( alwaysDownload || !localZipFile.exists() )
-        {
-            File tmpZipFile = new File( localZipFile.getParentFile(), localZipFile.getName() + ".part" );
-            tmpZipFile.delete();
-            System.out.println( "Downloading " + distributionUrl );
-            download.download( distributionUrl, tmpZipFile );
-            tmpZipFile.renameTo( localZipFile );
-            downloaded = true;
+  private List<File> listDirs(File distDir) {
+    List<File> dirs = new ArrayList<File>();
+    if (distDir.exists()) {
+      for (File file : distDir.listFiles()) {
+        if (file.isDirectory()) {
+          dirs.add(file);
+      }
+    }
+    return dirs;
+  }
-        File distDir = localDistribution.getDistributionDir();
-        List<File> dirs = listDirs( distDir );
+  private void setExecutablePermissions(File mavenHome) {
+    if (isWindows()) {
+      return;
+    }
+    File mavenCommand = new File(mavenHome, "bin/mvn");
+    String errorMessage = null;
+    try {
+      ProcessBuilder pb = new ProcessBuilder("chmod", "755", mavenCommand.getCanonicalPath());
+      Process p = pb.start();
+      if (p.waitFor() == 0) {
+        System.out.println("Set executable permissions for: " + mavenCommand.getAbsolutePath());
+      } else {
+        BufferedReader is = new BufferedReader(new InputStreamReader(p.getInputStream()));
+        Formatter stdout = new Formatter();
+        String line;
+        while ((line = is.readLine()) != null) {
+          stdout.format("%s%n", line);
+        }
+        errorMessage = stdout.toString();
+      }
+    } catch (IOException e) {
+      errorMessage = e.getMessage();
+    } catch (InterruptedException e) {
+      errorMessage = e.getMessage();
+    }
+    if (errorMessage != null) {
+      System.out.println("Could not set executable permissions for: " + mavenCommand.getAbsolutePath());
+      System.out.println("Please do this manually if you want to use maven.");
+    }
+  }
-        if ( downloaded || alwaysUnpack || dirs.isEmpty() )
-        {
-            for ( File dir : dirs )
-            {
-                System.out.println( "Deleting directory " + dir.getAbsolutePath() );
-                deleteDir( dir );
-            }
-            System.out.println( "Unzipping " + localZipFile.getAbsolutePath() + " to " + distDir.getAbsolutePath() );
-            unzip( localZipFile, distDir );
-            dirs = listDirs( distDir );
-            if ( dirs.isEmpty() )
-            {
-                throw new RuntimeException(
-                                            String.format( "Maven distribution '%s' does not contain any directories. Expected to find exactly 1 directory.",
-                                                           distributionUrl ) );
-            }
-            setExecutablePermissions( dirs.get( 0 ) );
+  private boolean isWindows() {
+    String osName = System.getProperty("os.name").toLowerCase(Locale.US);
+    if (osName.indexOf("windows") > -1) {
+      return true;
+    }
+    return false;
+  }
+
+  private boolean deleteDir(File dir) {
+    if (dir.isDirectory()) {
+      String[] children = dir.list();
+      for (int i = 0; i < children.length; i++) {
+        boolean success = deleteDir(new File(dir, children[i]));
+        if (!success) {
+          return false;
-        if ( dirs.size() != 1 )
-        {
-            throw new RuntimeException(
-                                        String.format( "Maven distribution '%s' contains too many directories. Expected to find exactly 1 directory.",
-                                                       distributionUrl ) );
-        }
-        return dirs.get( 0 );
+      }
-    private List<File> listDirs( File distDir )
-    {
-        List<File> dirs = new ArrayList<File>();
-        if ( distDir.exists() )
-        {
-            for ( File file : distDir.listFiles() )
-            {
-                if ( file.isDirectory() )
-                {
-                    dirs.add( file );
-                }
-            }
-        }
-        return dirs;
+    // The directory is now empty so delete it
+    return dir.delete();
+  }
+
+  public void unzip(File zip, File dest) throws IOException {
+    Enumeration entries;
+    ZipFile zipFile;
+
+    zipFile = new ZipFile(zip);
+
+    entries = zipFile.entries();
+
+    while (entries.hasMoreElements()) {
+      ZipEntry entry = (ZipEntry) entries.nextElement();
+
+      if (entry.isDirectory()) {
+        (new File(dest, entry.getName())).mkdirs();
+        continue;
+      }
+
+      copyInputStream(zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(new File(dest, entry.getName()))));
+    }
+    zipFile.close();
+  }
+
+  public void copyInputStream(InputStream in, OutputStream out) throws IOException {
+    byte[] buffer = new byte[1024];
+    int len;
+
+    while ((len = in.read(buffer)) >= 0) {
+      out.write(buffer, 0, len);
-    private void setExecutablePermissions( File mavenHome )
-    {
-        if ( isWindows() )
-        {
-            return;
-        }
-        File mavenCommand = new File( mavenHome, "bin/mvn" );
-        String errorMessage = null;
-        try
-        {
-            ProcessBuilder pb = new ProcessBuilder( "chmod", "755", mavenCommand.getCanonicalPath() );
-            Process p = pb.start();
-            if ( p.waitFor() == 0 )
-            {
-                System.out.println( "Set executable permissions for: " + mavenCommand.getAbsolutePath() );
-            }
-            else
-            {
-                BufferedReader is = new BufferedReader( new InputStreamReader( p.getInputStream() ) );
-                Formatter stdout = new Formatter();
-                String line;
-                while ( ( line = is.readLine() ) != null )
-                {
-                    stdout.format( "%s%n", line );
-                }
-                errorMessage = stdout.toString();
-            }
-        }
-        catch ( IOException e )
-        {
-            errorMessage = e.getMessage();
-        }
-        catch ( InterruptedException e )
-        {
-            errorMessage = e.getMessage();
-        }
-        if ( errorMessage != null )
-        {
-            System.out.println( "Could not set executable permissions for: " + mavenCommand.getAbsolutePath() );
-            System.out.println( "Please do this manually if you want to use maven." );
-        }
-    }
-
-    private boolean isWindows()
-    {
-        String osName = System.getProperty( "os.name" ).toLowerCase( Locale.US );
-        if ( osName.indexOf( "windows" ) > -1 )
-        {
-            return true;
-        }
-        return false;
-    }
-
-    private boolean deleteDir( File dir )
-    {
-        if ( dir.isDirectory() )
-        {
-            String[] children = dir.list();
-            for ( int i = 0; i < children.length; i++ )
-            {
-                boolean success = deleteDir( new File( dir, children[i] ) );
-                if ( !success )
-                {
-                    return false;
-                }
-            }
-        }
-
-        // The directory is now empty so delete it
-        return dir.delete();
-    }
-
-    public void unzip( File zip, File dest )
-        throws IOException
-    {
-        Enumeration entries;
-        ZipFile zipFile;
-
-        zipFile = new ZipFile( zip );
-
-        entries = zipFile.entries();
-
-        while ( entries.hasMoreElements() )
-        {
-            ZipEntry entry = (ZipEntry) entries.nextElement();
-
-            if ( entry.isDirectory() )
-            {
-                ( new File( dest, entry.getName() ) ).mkdirs();
-                continue;
-            }
-
-            copyInputStream( zipFile.getInputStream( entry ),
-                             new BufferedOutputStream( new FileOutputStream( new File( dest, entry.getName() ) ) ) );
-        }
-        zipFile.close();
-    }
-
-    public void copyInputStream( InputStream in, OutputStream out )
-        throws IOException
-    {
-        byte[] buffer = new byte[1024];
-        int len;
-
-        while ( ( len = in.read( buffer ) ) >= 0 )
-        {
-            out.write( buffer, 0, len );
-        }
-
-        in.close();
-        out.close();
-    }
+    in.close();
+    out.close();
+  }
