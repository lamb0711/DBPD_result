PR: MNG-620, 1035
Submitted by: Lester Ecarma
Reviewed by:  Brett Porter
correct issues with whitespaces in paths

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@312804 13f79535-47bb-0310-9956-ffa450edef68

+            StringBuffer options = new StringBuffer();
+
-                classpath.insert( 0, "-classpath " );
+                options.append( "-classpath " );
+                options.append( quotedPathArgument( classpath.toString() ) );
-                        files.append( fileList[j] );
+                        files.append( quotedPathArgument( fileList[j] ) );
-                addArgIfNotEmpty( arguments, "-doclet", doclet );
-                addArgIfNotEmpty( arguments, "-docletPath", docletPath );
+                addArgIfNotEmpty( arguments, "-doclet", quotedArgument( doclet ) );
+                addArgIfNotEmpty( arguments, "-docletPath", quotedPathArgument( docletPath ) );
-            addArgIfNotEmpty( arguments, "-encoding", encoding );
-            addArgIfNotEmpty( arguments, "-extdirs", extdirs );
-            addArgIfNotEmpty( arguments, "-exclude", excludePackageNames, 1.4f );
-            addArgIfNotEmpty( arguments, "-locale", this.locale );
+            addArgIfNotEmpty( arguments, "-encoding", quotedArgument( encoding ) );
+            addArgIfNotEmpty( arguments, "-extdirs", quotedPathArgument( extdirs ) );
+            addArgIfNotEmpty( arguments, "-exclude", quotedArgument( excludePackageNames ), 1.4f );
+            addArgIfNotEmpty( arguments, "-locale", quotedArgument( this.locale ) );
-            addArgIfNotEmpty( arguments, "-overview", overview );
+            addArgIfNotEmpty( arguments, "-overview", quotedArgument( overview ) );
-            addArgIfNotEmpty( arguments, "-source", source, 1.4f );
+            addArgIfNotEmpty( arguments, "-source", quotedArgument( source ), 1.4f );
-            addArgIfNotEmpty( arguments, "-additionalparam", additionalparam );
+            addArgIfNotEmpty( arguments, "-additionalparam", quotedArgument( additionalparam ) );
-            addArgIfNotEmpty( arguments, "-sourcePath", sourcePath.toString() );
-            if ( classpath.length() > 0 )
-            {
-                file = new File( javadocDirectory, "classpath" );
-                file.deleteOnExit();
-                FileUtils.fileWrite( file.getAbsolutePath(), classpath.toString() );
-                cmd.createArgument().setValue( "@classpath" );
-            }
+            addArgIfNotEmpty( arguments, "-sourcePath", quotedPathArgument( sourcePath.toString() ) );
-                addArgIfNotEmpty( arguments, "-bottom", bottom );
+                addArgIfNotEmpty( arguments, "-bottom", quotedArgument( bottom ) );
-                addArgIfNotEmpty( arguments, "-charset", charset );
-                addArgIfNotEmpty( arguments, "-d", javadocDirectory.toString() );
+                addArgIfNotEmpty( arguments, "-charset", quotedArgument( charset ) );
+                addArgIfNotEmpty( arguments, "-d", quotedPathArgument( javadocDirectory.toString() ) );
-                addArgIfNotEmpty( arguments, "-docencoding", docencoding );
-                addArgIfNotEmpty( arguments, "-doctitle", doctitle );
-                addArgIfNotEmpty( arguments, "-excludePackageNames", excludePackageNames );
-                addArgIfNotEmpty( arguments, "-excludedocfilessubdir", excludedocfilessubdir, 1.4f );
-                addArgIfNotEmpty( arguments, "-footer", footer );
-                addArgIfNotEmpty( arguments, "-group", group, true );
-                addArgIfNotEmpty( arguments, "-header", header );
-                addArgIfNotEmpty( arguments, "-helpfile", helpfile );
-                addArgIfNotEmpty( arguments, "-link", link, true );
-                addArgIfNotEmpty( arguments, "-linkoffline", linkoffline, true );
+                addArgIfNotEmpty( arguments, "-docencoding", quotedArgument( docencoding ) );
+                addArgIfNotEmpty( arguments, "-doctitle", quotedArgument( doctitle ) );
+                addArgIfNotEmpty( arguments, "-excludePackageNames", quotedArgument( excludePackageNames ) );
+                addArgIfNotEmpty( arguments, "-excludedocfilessubdir", quotedPathArgument( excludedocfilessubdir ),
+                                  1.4f );
+                addArgIfNotEmpty( arguments, "-footer", quotedArgument( footer ) );
+                addArgIfNotEmpty( arguments, "-group", quotedArgument( group ), true );
+                addArgIfNotEmpty( arguments, "-header", quotedArgument( header ) );
+                addArgIfNotEmpty( arguments, "-helpfile", quotedPathArgument( helpfile ) );
+                addArgIfNotEmpty( arguments, "-link", quotedPathArgument( link ), true );
+                addArgIfNotEmpty( arguments, "-linkoffline", quotedPathArgument( linkoffline ), true );
-                addArgIfNotEmpty( arguments, "-noqualifier", noqualifier, 1.4f );
+                addArgIfNotEmpty( arguments, "-noqualifier", quotedArgument( noqualifier ), 1.4f );
-                addArgIfNotEmpty( arguments, "-stylesheetfile", stylesheetfile );
-                addArgIfNotEmpty( arguments, "-tag", tag, 1.4f, true );
-                addArgIfNotEmpty( arguments, "-taglet", taglet, 1.4f );
-                addArgIfNotEmpty( arguments, "-tagletpath", tagletpath, 1.4f );
+                addArgIfNotEmpty( arguments, "-stylesheetfile", quotedPathArgument( stylesheetfile ) );
+                addArgIfNotEmpty( arguments, "-tag", quotedArgument( tag ), 1.4f, true );
+                addArgIfNotEmpty( arguments, "-taglet", quotedArgument( taglet ), 1.4f );
+                addArgIfNotEmpty( arguments, "-tagletpath", quotedPathArgument( tagletpath ), 1.4f );
-                addArgIfNotEmpty( arguments, "-windowtitle", windowtitle );
+                addArgIfNotEmpty( arguments, "-windowtitle", quotedArgument( windowtitle ) );
-            for ( Iterator it = arguments.iterator(); it.hasNext(); )
+            if ( options.length() > 0 )
-                String current = (String) it.next();
-                cmd.createArgument().setValue( current );
+                File optionsFile = new File( javadocDirectory, "options" );
+                for ( Iterator it = arguments.iterator(); it.hasNext(); )
+                {
+                    options.append( " " );
+                    options.append( (String) it.next() );
+                }
+                FileUtils.fileWrite( optionsFile.getAbsolutePath(), options.toString() );
+                cmd.createArgument().setValue( "@options" );
+                optionsFile.deleteOnExit();
+     * Convenience method to wrap an argument value in quotes. Intended for values which may contain whitespaces.
+     *
+     * @param value the argument value.
+     */
+    private String quotedArgument( String value )
+    {
+        if ( !StringUtils.isEmpty( value ) )
+        {
+            return "'" + value + "'";
+        }
+
+        return value;
+    }
+
+    /**
+     * Convenience method to format a path argument so that it is properly interpreted by the javadoc tool. Intended
+     * for path values which may contain whitespaces.
+     *
+     * @param value the argument value.
+     */
+    private String quotedPathArgument( String value )
+    {
+        if ( !StringUtils.isEmpty( value ) )
+        {
+            return "'" + value.replace( '\\', '/' ) + "'";
+        }
+
+        return value;
+    }
+
+    /**
