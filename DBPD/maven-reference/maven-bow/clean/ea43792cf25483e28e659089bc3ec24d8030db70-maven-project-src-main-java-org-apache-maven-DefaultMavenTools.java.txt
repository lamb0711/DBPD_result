MNG-3905 First pass at collecting all the repository related code and started to decouple from maven-artifact


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@726383 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.IOException;
+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
+    @Requirement
+    private ArtifactRepositoryLayout defaultArtifactRepositoryLayout;
+    
+    
+    // From MavenExecutionRequestPopulator
+    
+    public ArtifactRepository createLocalRepository( String url, String repositoryId )
+        throws IOException
+    {
+        return createRepository( canonicalFileUrl( url ), repositoryId );
+    }
+
+    private String canonicalFileUrl( String url )
+        throws IOException
+    {
+        if ( !url.startsWith( "file:" ) )
+        {
+            url = "file://" + url;
+        }
+        else if ( url.startsWith( "file:" ) && !url.startsWith( "file://" ) )
+        {
+            url = "file://" + url.substring( "file:".length() );
+        }
+
+        // So now we have an url of the form file://<path>
+
+        // We want to eliminate any relative path nonsense and lock down the path so we
+        // need to fully resolve it before any sub-modules use the path. This can happen
+        // when you are using a custom settings.xml that contains a relative path entry
+        // for the local repository setting.
+
+        File localRepository = new File( url.substring( "file://".length() ) );
+
+        if ( !localRepository.isAbsolute() )
+        {
+            url = "file://" + localRepository.getCanonicalPath();
+        }
+
+        return url;
+    }
+
+    public ArtifactRepository createRepository( String url,
+                                                String repositoryId )
+    {
+        // snapshots vs releases
+        // offline = to turning the update policy off
+
+        //TODO: we'll need to allow finer grained creation of repositories but this will do for now
+
+        String updatePolicyFlag = ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS;
+
+        String checksumPolicyFlag = ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN;
+
+        ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
+
+        ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
+
+        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout, snapshotsPolicy, releasesPolicy );
+    }
+    
+    public ArtifactRepository createRepository( String url,
+                                                String repositoryId,
+                                                ArtifactRepositoryPolicy snapshotsPolicy,
+                                                ArtifactRepositoryPolicy releasesPolicy )
+    {
+        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout, snapshotsPolicy, releasesPolicy );        
+    }
+
+    public void setGlobalUpdatePolicy( String policy )
+    {
+        artifactRepositoryFactory.setGlobalUpdatePolicy( policy );
+    }
+
+    public void setGlobalChecksumPolicy( String policy )
+    {
+        artifactRepositoryFactory.setGlobalChecksumPolicy( policy );        
+    }    
