[MNG-4107] ser settings can't override properties used for POM interpolation. Cleaned up the interpolation code and the MavenProjectBuilder impl. Building and interpolation is now more clearly separated.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@761104 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.profiles.ProfileContextInfo;
-        MavenProject project;
+        PomClassicDomainModel domainModel;
-			project = buildWithoutProfiles( "unknown", pomFile, configuration.getLocalRepository(), configuration.getRemoteRepositories(), configuration );
+			domainModel = buildWithoutProfiles( "unknown", pomFile, configuration.getLocalRepository(), configuration.getRemoteRepositories(), configuration );
+        
+        MavenProject project = buildWithProfiles( domainModel, configuration, pomFile, domainModel.getParentFile() );
-        project = buildWithProfiles( project.getModel(), configuration, pomFile, project.getParentFile() );
-
-
+        PomClassicDomainModel domainModel;
-			project = buildWithoutProfiles( "unknown", artifact.getFile(), configuration.getLocalRepository(), 
+			domainModel = buildWithoutProfiles( "unknown", artifact.getFile(), configuration.getLocalRepository(), 
-        project = buildWithProfiles( project.getModel(), configuration, artifact.getFile(), project.getParentFile() );
+        project = buildWithProfiles( domainModel, configuration, artifact.getFile(), domainModel.getParentFile() );
-    private MavenProject buildWithProfiles( Model model, ProjectBuilderConfiguration config, File projectDescriptor, File parentDescriptor )
+    private MavenProject buildWithProfiles( PomClassicDomainModel domainModel, ProjectBuilderConfiguration config, File projectDescriptor, File parentDescriptor )
+    	Model model;
+		try 
+		{
+			model = domainModel.getModel();
+		} 
+		catch (IOException e) 
+		{
+			throw new ProjectBuildingException("", e.getMessage());
+		}
-                PomClassicDomainModel dm = ProcessorContext.mergeProfilesIntoModel( projectProfiles, model, false );
+                PomClassicDomainModel dm = ProcessorContext.mergeProfilesIntoModel( projectProfiles, domainModel );
+    
-    private MavenProject buildWithoutProfiles( String projectId, File pomFile, ArtifactRepository localRepository, 
+    private PomClassicDomainModel buildWithoutProfiles( String projectId, File pomFile, ArtifactRepository localRepository, 
-        PomClassicDomainModel domainModel = buildModel( pomFile, new ArrayList<InterpolatorProperty>(), activeProfileIds, inactiveProfileIds, localRepository, remoteRepositories );
-
+        return buildModel( pomFile, new ProfileContextInfo(null, activeProfileIds, inactiveProfileIds), localRepository, remoteRepositories );
+/*
-
+*/
-    protected PomClassicDomainModel buildModel( File pom, Collection<InterpolatorProperty> interpolatorProperties, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        throws IOException
-    {
-        return buildModel( pom, interpolatorProperties, null, null, localRepository, remoteRepositories );
-    }
-
-    private PomClassicDomainModel buildModel( File pom, Collection<InterpolatorProperty> interpolatorProperties, Collection<String> activeProfileIds, Collection<String> inactiveProfileIds,
-                                              ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+    private PomClassicDomainModel buildModel( File pom, ProfileContextInfo profileInfo, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        if ( activeProfileIds == null )
-        {
-            activeProfileIds = new ArrayList<String>();
-        }
-        if ( inactiveProfileIds == null )
-        {
-            inactiveProfileIds = new ArrayList<String>();
-        }
-
-        List<InterpolatorProperty> properties;
-        if ( interpolatorProperties == null )
-        {
-            properties = new ArrayList<InterpolatorProperty>();
-        }
-        else
-        {
-            properties = new ArrayList<InterpolatorProperty>( interpolatorProperties );
-        }
-
-                mavenParents = getDomainModelParentsFromLocalPath( domainModel, localRepository, remoteRepositories, pom.getParentFile(), properties, activeProfileIds, inactiveProfileIds );
+                mavenParents = getDomainModelParentsFromLocalPath( domainModel, localRepository, remoteRepositories, pom.getParentFile() );
-                mavenParents = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories, properties, activeProfileIds, inactiveProfileIds );
+                mavenParents = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories );
-                 ProfileContext profileContext1 = new ProfileContext( dm.getModel().getProfiles(), activeProfileIds,
-                                                                     inactiveProfileIds, properties );
+                 ProfileContext profileContext1 = new ProfileContext( dm.getModel().getProfiles(), profileInfo );
-                    profileModels.add(ProcessorContext.mergeProfilesIntoModel( profileContext1.getActiveProfiles(), dm.getModel(), 
-                                                                                dm.isMostSpecialized() ));  
+                    profileModels.add(ProcessorContext.mergeProfilesIntoModel( profileContext1.getActiveProfiles(), dm ));  
-            }    
-               
+            }                
-        PomClassicDomainModel transformedDomainModel = ProcessorContext.build( profileModels, properties );
+        PomClassicDomainModel transformedDomainModel = ProcessorContext.build( profileModels, null );
+        //ProcessorContext.interpolateModelProperties(transformedDomainModel.getModelProperties(),
+        //		null, transformedDomainModel); 
-
-    private List<DomainModel> getDomainModelParentsFromRepository(  PomClassicDomainModel domainModel, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-                                                                   List<InterpolatorProperty> properties, Collection<String> activeProfileIds, Collection<String> inactiveProfileIds )
+    private List<DomainModel> getDomainModelParentsFromRepository(  PomClassicDomainModel domainModel, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories, properties, activeProfileIds, inactiveProfileIds ) );
+        domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories ) );
-                                                                  File projectDirectory, List<InterpolatorProperty> properties, Collection<String> activeProfileIds,
-                                                                  Collection<String> inactiveProfileIds )
+                                                                  File projectDirectory )
-            List<DomainModel> parentDomainModels = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories, properties, activeProfileIds, inactiveProfileIds );
+            List<DomainModel> parentDomainModels = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories );
-                domainModels.addAll( getDomainModelParentsFromLocalPath( parentDomainModel, localRepository, remoteRepositories, parentFile.getParentFile(), properties, activeProfileIds,
-                                                                         inactiveProfileIds ) );
+                domainModels.addAll( getDomainModelParentsFromLocalPath( parentDomainModel, localRepository, remoteRepositories, parentFile.getParentFile() ) );
-                domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories, properties, activeProfileIds, inactiveProfileIds ) );
+                domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories ) );
-    private DomainModel superDomainModel;
-
-
