

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@750361 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Collections;
-import org.apache.maven.execution.DuplicateProjectException;
-import org.apache.maven.lifecycle.LifecycleException;
-import org.apache.maven.lifecycle.plan.BuildPlan;
-import org.apache.maven.lifecycle.plan.BuildPlanner;
-import org.apache.maven.plugin.PluginContext;
-import org.codehaus.plexus.util.StringUtils;
-import org.codehaus.plexus.util.dag.CycleDetectedException;
+    private Maven maven;
+
+    private PluginManager pluginManager;
+
+    private MavenRepositorySystem repositorySystem;
+    
-
-    private MavenRepositorySystem repositoryTools;
-    private Maven maven;
-
-
-    private BuildPlanner buildPlanner;
-    
+        
-    private PluginContext pluginContext;
-
-        return pluginContext.getMojoExecutionsForGoal( goal );
+        return pluginManager.getMojoExecutionsForGoal( goal );
-        return pluginContext.getMojoParameterFor( mojoExecution, xPath);
+        return pluginManager.getMojoParameterFor( mojoExecution, xPath);
-        pluginContext.executeMojo( mojoExecution, mavenSession );
+        pluginManager.executeMojo( mojoExecution, mavenSession );
-    public BuildPlan getBuildPlan( List goals,
-                                   MavenProject project )
-        throws MavenEmbedderException
-    {
-        return getBuildPlan( goals, project, false );
-    }
-
-    public BuildPlan getBuildPlan( List goals,
-                                   MavenProject project,
-                                   boolean allowUnbindableMojos )
-        throws MavenEmbedderException
-    {
-        MavenExecutionRequest req = DefaultMavenExecutionRequest.copy( request );
-        req.setGoals( goals );
-
-        EventDispatcher dispatcher = new DefaultEventDispatcher( req.getEventMonitors() );
-
-        ReactorManager rm;
-
-        try
-        {
-            rm = new ReactorManager( Collections.singletonList( project ), ReactorManager.FAIL_FAST );
-        }
-        catch ( CycleDetectedException e )
-        {
-            // impossible, only one project.
-            throw new MavenEmbedderException( "Cycle detected in single-project reactor manager during build-plan lookup.", e );
-        }
-        catch ( DuplicateProjectException e )
-        {
-            // impossible, only one project.
-            throw new MavenEmbedderException( "Duplicate project detected in single-project reactor manager during build-plan lookup.", e );
-        }
-
-        MavenSession session = new MavenSession( container, request, dispatcher, rm );
-
-        try
-        {
-            return buildPlanner.constructBuildPlan( goals, project, session, allowUnbindableMojos );
-        }
-        catch ( LifecycleException e )
-        {
-            throw new MavenEmbedderException( "Failed to construct build-plan for project: "
-                                              + project.getId() + " using goals: '"
-                                              + StringUtils.join( goals.iterator(), ", " ) + "'", e );
-        }
-    }
-
-            buildPlanner = container.lookup( BuildPlanner.class );
-
-            repositoryTools = container.lookup( MavenRepositorySystem.class );
+            repositorySystem = container.lookup( MavenRepositorySystem.class );
