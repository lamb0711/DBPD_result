o collapsing more of the project builder, trying to turn it back into one component -- we have the old and the new with the old wrapper the new -- so that I can have an interface for compatibility and then all our new stuff in another component.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@727299 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.StringReader;
-import java.io.StringWriter;
-import java.net.URL;
-import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
-import org.apache.maven.project.builder.Interpolator;
+     * 
+     * I am taking out the profile handling and the interpolation of the base directory until we spec
+     * this out properly.
-               
-        ProfileManager profileManager = config.getGlobalProfileManager();
-
-        List activeProfiles = new ArrayList();
-        if ( profileManager != null )
-        {
-            List activated = profileAdvisor.applyActivatedProfiles( superModel, null, false,
-                                                                    profileManager.getProfileActivationContext() );
-            if ( !activated.isEmpty() )
-            {
-                activeProfiles.addAll( activated );
-            }
-
-            activated = profileAdvisor.applyActivatedExternalProfiles( superModel, null, profileManager );
-            if ( !activated.isEmpty() )
-            {
-                activeProfiles.addAll( activated );
-            }
-        }
-
-        List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
+                       
+        MavenProject project = null;
-        interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( config.getExecutionProperties(),
-                PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
-        
-        interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( config.getUserProperties(),
-                PomInterpolatorTag.USER_PROPERTIES.name()));
-
-        if(config.getBuildStartTime() != null)
-        {
-            interpolatorProperties.add(new InterpolatorProperty("${build.timestamp}",
-                new SimpleDateFormat("yyyyMMdd-hhmm").format( config.getBuildStartTime() ),
-                PomInterpolatorTag.PROJECT_PROPERTIES.name()));
-        }
-
-        File basedir = null;
-        for(InterpolatorProperty ip : interpolatorProperties )
-        {
-            if(ip.getKey().equals("${basedir}"))
-            {
-                basedir = new File(ip.getValue());
-                break;
-            }
-        }
-
-        if(basedir == null)
-        {
-            String bd = System.getProperty("basedir");
-            if( bd != null )
-            {
-                basedir = new File(bd);
-            }
-        }
-
-        try
-        {
-            superModel = Interpolator.interpolateModel(superModel, interpolatorProperties, basedir );
-        }
-        catch (IOException e)
-        {
-            throw new ProjectBuildingException(STANDALONE_SUPERPOM_GROUPID + ":" + STANDALONE_SUPERPOM_ARTIFACTID, "Interpolation failure:", e);
-        }
-
-        MavenProject project;
-            throw new ProjectBuildingException( STANDALONE_SUPERPOM_GROUPID + ":" + STANDALONE_SUPERPOM_ARTIFACTID,
-                                                "Maven super-POM contains an invalid repository!", e );
+            // Not going to happen.
-        getLogger().debug( "Activated the following profiles for standalone super-pom: " + activeProfiles );
-
-            project = constructMavenProjectFromModel( project.getModel(), null, null, config );
-            project.setActiveProfiles( activeProfiles );
-            throw new ProjectBuildingException( STANDALONE_SUPERPOM_GROUPID + ":" + STANDALONE_SUPERPOM_ARTIFACTID,
-                                                "Maven super-POM contains an invalid repository!", e );
+            // Not going to happen.
-            project = constructMavenProjectFromModel( model, projectDescriptor, parentDescriptor, config );
+            project = new MavenProject( model, artifactFactory, mavenTools, this, config );
+            
+            validateModel( model, projectDescriptor );
+
+            Artifact projectArtifact = artifactFactory.createBuildArtifact( project.getGroupId(), project.getArtifactId(),
+                                                                            project.getVersion(), project.getPackaging() );
+            project.setArtifact( projectArtifact );
+            
+            project.setParentFile( parentDescriptor );
+            
-    private MavenProject constructMavenProjectFromModel( Model model, File pomFile, File parentFile,
-                                                           ProjectBuilderConfiguration config )
-            throws ProjectBuildingException, InvalidRepositoryException
-    {
-
-        MavenProject project = new MavenProject( model, artifactFactory, mavenTools, this, config );
-        validateModel( model, pomFile );
-
-        Artifact projectArtifact = artifactFactory.createBuildArtifact( project.getGroupId(), project.getArtifactId(),
-                                                                        project.getVersion(), project.getPackaging() );
-        project.setArtifact( projectArtifact );
-        project.setParentFile( parentFile );
-
-        return project;
-    }
-
-                PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
+                PomInterpolatorTag.EXECUTION_PROPERTIES.name()));
-        interpolatorProperties.add(new InterpolatorProperty("${mavenVersion}", MavenProjectBuilder.STANDALONE_SUPERPOM_VERSION, PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
+        interpolatorProperties.add(new InterpolatorProperty("${mavenVersion}", MavenProjectBuilder.STANDALONE_SUPERPOM_VERSION, PomInterpolatorTag.EXECUTION_PROPERTIES.name()));
-                                                              Arrays.asList( getSuperProject( config, projectDescriptor ).getModel() ), 
+                                                              Arrays.asList( getSuperModel() ), 
