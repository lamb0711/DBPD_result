

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@497176 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.filter.AndArtifactFilter;
-import org.apache.maven.settings.Settings;
+import org.codehaus.plexus.DefaultPlexusContainer;
-                                          Settings settings,
-                                          ArtifactRepository localRepository )
+                                          MavenSession session )
-                                                                        project, settings, localRepository );
+                                                                        project, session );
-        return verifyVersionedPlugin( plugin, project, localRepository );
+        return verifyVersionedPlugin( plugin, project, session );
-                                                    ArtifactRepository localRepository )
+                                                    MavenSession session )
+        ArtifactRepository localRepository = session.getLocalRepository();
+
-                addPlugin( plugin, pluginArtifact, project, localRepository );
+                addPlugin( plugin, pluginArtifact, project, session );
+    ArtifactFilter coreArtifactFilter = MavenArtifactFilterManager.createStandardFilter();
+
-                              ArtifactRepository localRepository )
-        throws PluginManagerException, InvalidPluginException
+                              MavenSession session )
+        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException, InvalidPluginException
+        // ----------------------------------------------------------------------------
+        // Get the dependencies for the Plugin
+        // ----------------------------------------------------------------------------
+
+        // the only Plugin instance which will have dependencies is the one specified in the project.
+        // We need to look for a Plugin instance there, in case the instance we're using didn't come from
+        // the project.
+        Plugin projectPlugin = (Plugin) project.getBuild().getPluginsAsMap().get( plugin.getKey() );
+
+        if ( projectPlugin == null )
+        {
+            projectPlugin = plugin;
+        }
+
+        Set artifacts = getPluginArtifacts( pluginArtifact, projectPlugin, project, session );
-        ClassRealm componentRealm;
+        ClassRealm componentRealm = null;
-            componentRealm = container.createComponentRealm( plugin.getKey(),
-                                                             Collections.singletonList( pluginArtifact.getFile() ) );
+            List jars = new ArrayList();
+
+            for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+            {
+                Artifact artifact = (Artifact) i.next();
+
+                jars.add( artifact.getFile() );
+            }
+
+            jars.add( pluginArtifact.getFile() );
+
+            // Now here we need the artifact coreArtifactFilter stuff
+
+            componentRealm = container.createComponentRealm( plugin.getKey(), jars );
+
-        pluginDescriptor.setClassRealm( componentRealm );
+        pluginDescriptor.setPluginArtifact( pluginArtifact );
-        pluginDescriptor.setArtifacts( Collections.singletonList( pluginArtifact ) );
+        //pluginDescriptor.setArtifacts( Collections.singletonList( pluginArtifact ) );
-        // ----------------------------------------------------------------------------
-        // Get the dependencies for the Plugin
-        // ----------------------------------------------------------------------------                
+        //pluginDescriptor.setIntroducedDependencyArtifacts( artifacts );
+
+        pluginDescriptor.setArtifacts( new ArrayList( artifacts ) );
+
+        pluginDescriptor.setClassRealm( componentRealm );
+    }
+
+    private Set getPluginArtifacts( Artifact pluginArtifact,
+                                    Plugin plugin,
+                                    MavenProject project,
+                                    MavenSession session )
+        throws InvalidPluginException, ArtifactNotFoundException, PluginManagerException, ArtifactResolutionException
+    {
+        Set artifacts;
-            // the only Plugin instance which will have dependencies is the one specified in the project.
-            // We need to look for a Plugin instance there, in case the instance we're using didn't come from
-            // the project.
-            Plugin projectPlugin = (Plugin) project.getBuild().getPluginsAsMap().get( plugin.getKey() );
-            if ( projectPlugin == null )
-            {
-                projectPlugin = plugin;
-            }
-
-            //PLXAPI: These need to be discovered!!!!!
-            Set artifacts = MavenMetadataSource.createArtifacts( artifactFactory, projectPlugin.getDependencies(), null,
-                                                                 null, project );
-
-            pluginDescriptor.setIntroducedDependencyArtifacts( artifacts );
+            artifacts = MavenMetadataSource.createArtifacts( artifactFactory, plugin.getDependencies(), null,
+                                                             coreArtifactFilter, project );
+
+        ArtifactRepository localRepository = session.getLocalRepository();
+
+        ResolutionGroup resolutionGroup;
+
+        try
+        {
+            resolutionGroup = artifactMetadataSource.retrieve( pluginArtifact, localRepository,
+                                                               project.getPluginArtifactRepositories() );
+        }
+        catch ( ArtifactMetadataRetrievalException e )
+        {
+            throw new ArtifactResolutionException( "Unable to download metadata from repository for plugin '" +
+                pluginArtifact.getId() + "': " + e.getMessage(), pluginArtifact, e );
+        }
+
+        Set dependencies = new HashSet( resolutionGroup.getArtifacts() );
+
+        List repositories = new ArrayList();
+
+        repositories.addAll( resolutionGroup.getResolutionRepositories() );
+
+        repositories.addAll( project.getRemoteArtifactRepositories() );
+
+        ArtifactResolutionResult result = artifactResolver.resolveTransitively( dependencies, pluginArtifact,
+                                                                                localRepository, repositories,
+                                                                                artifactMetadataSource,
+                                                                                artifactFilter );
+
+        Set resolved = result.getArtifacts();
+
+        for ( Iterator it = resolved.iterator(); it.hasNext(); )
+        {
+            Artifact artifact = (Artifact) it.next();
+
+            if ( !artifact.equals( pluginArtifact ) )
+            {
+                artifact = project.replaceWithActiveArtifact( artifact );
+            }
+        }
+
+        List unresolved = new ArrayList( dependencies );
+
+        unresolved.removeAll( resolved );
+
+        resolveCoreArtifacts( unresolved, localRepository, resolutionGroup.getResolutionRepositories() );
+
+        List allResolved = new ArrayList( resolved.size() + unresolved.size() );
+
+        allResolved.addAll( resolved );
+
+        allResolved.addAll( unresolved );
+
+        return resolved;
+
+        ClassRealm pluginRealm = pluginDescriptor.getClassRealm();
+        ;
+
-            Thread.currentThread().setContextClassLoader( mojoDescriptor.getPluginDescriptor().getClassRealm() );
+            //ClassRealm pluginRealm = container.getComponentRealm(  )
+
+            Thread.currentThread().setContextClassLoader( pluginRealm );
-                                                                       reportPlugin.getArtifactId(), project,
-                                                                       session.getSettings(),
-                                                                       session.getLocalRepository() );
+                                                                       reportPlugin.getArtifactId(), project, session );
+
-        return verifyVersionedPlugin( forLookup, project, session.getLocalRepository() );
+        return verifyVersionedPlugin( forLookup, project, session );
-        ensurePluginContainerIsComplete( pluginDescriptor, container, project, session );
+        //getPluginArtifacts( pluginDescriptor, container, project, session );
+            ClassRealm realm = mojoDescriptor.getPluginDescriptor().getClassRealm();
+
+            // We are forcing the use of the plugin realm for all lookups that might occur during
+            // the lifecycle that is part of the lookup. Here we are specifically trying to keep
+            // lookups that occur in contextualize calls in line with the right realm.
+
+            DefaultPlexusContainer.setLookupRealm( realm );
+
+            DefaultPlexusContainer.setLookupRealm( null );
+
-    private void ensurePluginContainerIsComplete( PluginDescriptor pluginDescriptor,
-                                                  PlexusContainer pluginContainer,
-                                                  MavenProject project,
-                                                  MavenSession session )
-        throws ArtifactNotFoundException, PluginManagerException, ArtifactResolutionException
-    {
-        // if the plugin's already been used once, don't re-do this step...
-        // otherwise, we have to finish resolving the plugin's classpath and start the container.
-        if ( pluginDescriptor.getArtifacts() != null && pluginDescriptor.getArtifacts().size() == 1 )
-        {
-            Artifact pluginArtifact = (Artifact) pluginDescriptor.getArtifacts().get( 0 );
-
-            pluginDescriptor.setPluginArtifact( pluginArtifact );
-
-            ArtifactRepository localRepository = session.getLocalRepository();
-
-            ResolutionGroup resolutionGroup;
-            try
-            {
-                resolutionGroup = artifactMetadataSource.retrieve( pluginArtifact, localRepository,
-                                                                   project.getPluginArtifactRepositories() );
-            }
-            catch ( ArtifactMetadataRetrievalException e )
-            {
-                throw new ArtifactResolutionException( "Unable to download metadata from repository for plugin '" +
-                    pluginArtifact.getId() + "': " + e.getMessage(), pluginArtifact, e );
-            }
-
-            Set dependencies = new HashSet( resolutionGroup.getArtifacts() );
-            dependencies.addAll( pluginDescriptor.getIntroducedDependencyArtifacts() );
-
-            List repositories = new ArrayList();
-            repositories.addAll( resolutionGroup.getResolutionRepositories() );
-            repositories.addAll( project.getRemoteArtifactRepositories() );
-
-            ArtifactResolutionResult result = artifactResolver.resolveTransitively( dependencies, pluginArtifact,
-                                                                                    localRepository, repositories,
-                                                                                    artifactMetadataSource,
-                                                                                    artifactFilter );
-
-            Set resolved = result.getArtifacts();
-
-            for ( Iterator it = resolved.iterator(); it.hasNext(); )
-            {
-                Artifact artifact = (Artifact) it.next();
-
-                if ( !artifact.equals( pluginArtifact ) )
-                {
-                    artifact = project.replaceWithActiveArtifact( artifact );
-
-                    try
-                    {
-                        pluginContainer.addJarResource( artifact.getFile() );
-                    }
-                    catch ( PlexusContainerException e )
-                    {
-                        throw new PluginManagerException( "Error adding plugin dependency '" +
-                            artifact.getDependencyConflictId() + "' into plugin manager: " + e.getMessage(), e );
-                    }
-                }
-            }
-
-            pluginDescriptor.setClassRealm( pluginContainer.getContainerRealm() );
-
-            List unresolved = new ArrayList( dependencies );
-
-            unresolved.removeAll( resolved );
-
-            resolveCoreArtifacts( unresolved, localRepository, resolutionGroup.getResolutionRepositories() );
-
-            List allResolved = new ArrayList( resolved.size() + unresolved.size() );
-
-            allResolved.addAll( resolved );
-            allResolved.addAll( unresolved );
-
-            pluginDescriptor.setArtifacts( allResolved );
-        }
-    }
-
+        ClassRealm pluginRealm = mojoDescriptor.getPluginDescriptor().getClassRealm();
+
-            configurator.configureComponent( plugin, configuration, expressionEvaluator,
-                                             pluginContainer.getContainerRealm(), listener );
+            configurator.configureComponent( plugin, configuration, expressionEvaluator, pluginRealm, listener );
