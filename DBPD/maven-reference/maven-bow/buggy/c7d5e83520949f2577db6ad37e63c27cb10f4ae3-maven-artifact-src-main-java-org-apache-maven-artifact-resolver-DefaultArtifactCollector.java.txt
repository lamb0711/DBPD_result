Resolving: MNG-397

o Added ResolutionGroup class which contains a set of artifacts and a list of repositories to resolve them.
o Made the ResolutionNode a standalone class, and added the remote repositories to it
o Changed ArtifactMetadataSource.retrieve(..) to return ResolutionGroup rather than Set, in order to help keep track of the repositories which should be used to resolve the retrieved artifacts.

We need some tests for this...


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219276 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.metadata.ResolutionGroup;
-import java.util.ArrayList;
-import java.util.LinkedList;
-        ResolutionNode root = new ResolutionNode( originatingArtifact );
-        root.addDependencies( artifacts, filter );
+        ResolutionNode root = new ResolutionNode( originatingArtifact, remoteRepositories );
+        root.addDependencies( artifacts, remoteRepositories, filter );
-                set.add( artifact );
+                set.add( node );
-        result.setArtifacts( set );
+        result.setArtifactResolutionNodes( set );
-                    Set artifacts = source.retrieve( child.getArtifact(), localRepository, remoteRepositories );
-                    child.addDependencies( artifacts, filter );
+                    ResolutionGroup rGroup = source.retrieve( child.getArtifact(), localRepository, remoteRepositories );
+                    child.addDependencies( rGroup.getArtifacts(), rGroup.getResolutionRepositories(), filter );
+                    
+                    // TODO: should the remoteRepositories list be null here?!
-                               new ResolutionNode( e.getArtifact(), child ) );
+                               new ResolutionNode( e.getArtifact(), null, child ) );
-    private static class ResolutionNode
-    {
-        private Artifact artifact;
-
-        private List children = null;
-
-        private final List parents;
-
-        private final int depth;
-
-        private final ResolutionNode parent;
-
-        public ResolutionNode( Artifact artifact )
-        {
-            this.artifact = artifact;
-            this.depth = 0;
-            this.parents = Collections.EMPTY_LIST;
-            this.parent = null;
-        }
-
-        public ResolutionNode( Artifact artifact, ResolutionNode parent )
-        {
-            this.artifact = artifact;
-            this.depth = parent.depth + 1;
-            this.parents = new ArrayList();
-            this.parents.addAll( parent.parents );
-            this.parents.add( parent.getKey() );
-            this.parent = parent;
-        }
-
-        public Artifact getArtifact()
-        {
-            return artifact;
-        }
-
-        public Object getKey()
-        {
-            return artifact.getDependencyConflictId();
-        }
-
-        public void addDependencies( Set artifacts, ArtifactFilter filter )
-            throws CyclicDependencyException
-        {
-            children = new ArrayList( artifacts.size() );
-
-            for ( Iterator i = artifacts.iterator(); i.hasNext(); )
-            {
-                Artifact a = (Artifact) i.next();
-
-                if ( filter == null || filter.include( a ) )
-                {
-                    if ( parents.contains( a.getDependencyConflictId() ) )
-                    {
-                        a.setDependencyTrail( getDependencyTrail() );
-
-                        throw new CyclicDependencyException( "A dependency has introduced a cycle", a );
-                    }
-
-                    children.add( new ResolutionNode( a, this ) );
-                }
-            }
-        }
-
-        public List getDependencyTrail()
-        {
-            List path = new LinkedList();
-            ResolutionNode node = this;
-            while ( node != null )
-            {
-                path.add( 0, node.getArtifact().getId() );
-                node = node.parent;
-            }
-            return path;
-        }
-
-        public boolean isResolved()
-        {
-            return children != null;
-        }
-
-        public Iterator getChildrenIterator()
-        {
-            return children.iterator();
-        }
-
-        public int getDepth()
-        {
-            return depth;
-        }
-
-        public void setArtifact( Artifact artifact )
-        {
-            this.artifact = artifact;
-        }
-    }
