Adding more context information to existing exceptions, cleaning up construction in exceptions, and adjusting the inheritance hierarchy for exceptions to make them make a little more sense for error reporting. Also, adding improved (but not complete, yet) reporting for BuildFailureExceptions and ProjectBuildingExceptions, with some tests to make sure pertinent information is in the output.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@592859 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.IOException;
-import java.net.URI;
-import java.net.URISyntaxException;
-
+import java.io.File;
+import java.io.IOException;
+
-    private URI pomUri;
+    private File pomFile;
-        this( projectId, message, (URI) null );
+        super( message );
+        this.projectId = projectId;
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
+     * @deprecated use {@link File} constructor for pomLocation
-        this( projectId, message, pomLocation, (Throwable) null );
+        super( message );
+        this.projectId = projectId;
+        pomFile = new File( pomLocation );
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
-     * @param projectId
-     * @param message
-     * @param pomLocation absolute path of the pom file
-     * @param cause
-     */
-    private ProjectBuildingException( String projectId, String message, String pomLocation, Throwable cause )
-    {
-        this( projectId, message, new File( pomLocation ), cause );
-    }
-
-    /**
-     * 
+     *
-        this( projectId, message, pomFile, (Throwable) null );
-    }
-
-    /**
-     * 
-     * @param projectId
-     * @param message
-     * @param cause
-     */
-    private ProjectBuildingException( String projectId, String message, Throwable cause )
-    {
-        this( projectId, message, (URI) null, cause );
-    }
-
-    public ProjectBuildingException( String projectId, String message, URISyntaxException cause )
-    {
-        this( projectId, message, (Throwable) cause );
+        super( message );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
-    public ProjectBuildingException( String projectId, String message, File pomFile, Throwable cause )
+    protected ProjectBuildingException( String projectId, String message, File pomFile, Throwable cause )
-        this( projectId, message, pomFile.toURI(), cause );
+        super( message, cause );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
-     * Equivalent to new ProjectBuildingException(projectId, message, pomUri, null)
-     * 
-     * @see #ProjectBuildingException(String, String, URI, Throwable)
-     */
-    public ProjectBuildingException( String projectId, String message, URI pomUri )
-    {
-        this( projectId, message, pomUri, (Throwable) null );
-    }
-
-    /**
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
+     * @deprecated use {@link File} constructor for pomLocation
-        this( projectId, message, new File( pomLocation ), cause );
+        super( message, cause );
+        this.projectId = projectId;
+        pomFile = new File( pomLocation );
-    public ProjectBuildingException( String projectId, String message, File pomLocation,
+    public ProjectBuildingException( String projectId, String message, File pomFile,
-        this( projectId, message, pomLocation, (Throwable) cause );
-    }
-
-    /**
-     * @param projectId
-     * @param message
-     * @param pomUri location of the pom
-     * @param cause
-     */
-    private ProjectBuildingException( String projectId, String message, URI pomUri, Throwable cause )
-    {
-        this.pomUri = pomUri;
+        this.pomFile = pomFile;
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
+     * @deprecated use {@link File} constructor for pomLocation
-        this( projectId, message, new File( pomLocation ), cause );
+        super( message, cause );
+        this.projectId = projectId;
+        pomFile = new File( pomLocation );
-    public ProjectBuildingException( String projectId, String message, URI pomLocation, IOException cause )
+    public ProjectBuildingException( String projectId, String message, File pomFile, IOException cause )
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
+    }
+
+    // for super-POM building.
+    public ProjectBuildingException( String projectId, String message, IOException cause )
+    {
+        super( message, cause );
+        this.projectId = projectId;
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
+     * @deprecated use {@link File} constructor for pomLocation
-        this( projectId, message, new File( pomLocation ), cause );
+        super( message, cause );
+        this.projectId = projectId;
+        pomFile = new File( pomLocation );
-    public ProjectBuildingException( String projectId, String message, URI pomLocation, XmlPullParserException cause )
+    public ProjectBuildingException( String projectId, String message, File pomFile, XmlPullParserException cause )
-        this( message, projectId, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
-        this( message, projectId, (URI) null, cause );
+        super( message, cause );
+        this.projectId = projectId;
-        this( projectId, message, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
-        this( projectId, message, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+    }
+
+    public ProjectBuildingException( String projectId, String message, File pomFile, InvalidRepositoryException cause )
+    {
+        super( message, cause );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
-        this( projectId, message, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
-    public ProjectBuildingException( String projectId, String message, File pomLocation,
+    public ProjectBuildingException( String projectId, String message, File pomFile,
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
+     * @deprecated use {@link File} constructor for pomLocation
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        pomFile = new File( pomLocation );
-    public ProjectBuildingException( String projectId, String message, File pomLocation, ArtifactNotFoundException cause )
+    public ProjectBuildingException( String projectId, String message, File pomFile, ArtifactNotFoundException cause )
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
+     * @deprecated use {@link File} constructor for pomLocation
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        pomFile = new File( pomLocation );
-    public ProjectBuildingException( String projectId, String message, File pomLocation,
+    public ProjectBuildingException( String projectId, String message, File pomFile,
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
+     * @deprecated use {@link File} constructor for pomLocation
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        pomFile = new File( pomLocation );
-    public ProjectBuildingException( String projectId, String message, File pomLocation,
+    public ProjectBuildingException( String projectId, String message, File pomFile,
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
+     * @deprecated use {@link File} constructor for pomLocation
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        pomFile = new File( pomLocation );
-    protected ProjectBuildingException( String projectId, String message, File pomLocation,
+    protected ProjectBuildingException( String projectId, String message, File pomFile,
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        this.pomFile = pomFile;
-     * @deprecated use {@link File} or {@link URI} constructors for pomLocation
+     * @deprecated use {@link File} constructor for pomLocation
-        this( projectId, message, pomLocation, (Throwable) cause );
+        super( message, cause );
+        this.projectId = projectId;
+        pomFile = new File ( pomLocation );
-    public URI getPomUri()
+    public File getPomFile()
-        return pomUri;
+        return pomFile;
-     * @deprecated use {@link #getPomUri()}
+     * @deprecated use {@link #getPomFile()}
-        if ( getPomUri() != null )
+        if ( getPomFile() != null )
-            if ( "file".equals( getPomUri().getScheme() ) )
-            {
-                return new File( getPomUri() ).getAbsolutePath();
-            }
-            return getPomUri().toString();
+            return getPomFile().getAbsolutePath();
-            + ( ( getPomUri() == null ? "" : " at " + getPomLocation() ) );
+            + ( ( getPomFile() == null ? "" : " at " + getPomFile().getAbsolutePath() ) );
