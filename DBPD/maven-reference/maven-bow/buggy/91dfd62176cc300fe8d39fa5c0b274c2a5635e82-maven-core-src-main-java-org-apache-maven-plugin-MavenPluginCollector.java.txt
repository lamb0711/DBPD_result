Working on: MNG-377

o Normalized all references to plugins to use either o.a.m.model.Plugin or o.a.m.plugin.PluginDescriptor instances

o Changed DefaultLifecycleExecutor, PluginManager, DefaultPluginManager, MavenPluginCollector, and DoxiaMojo to reflect the above

o Added mapped-plugin resolution of goal prefixes to the DefaultLifecycleExecutor

o Added caching of PluginMappingManager instance inside of MavenSession

o Modified SettingsUtils to be more resistant to null String-Lists for pluginGroups and activeProfiles during merge.

o Added checks to MavenProject.addPlugin(..) to only add if the plugin doesn't already exist in the model.

Next step is to modify installation and deployment process for plugins to publish plugins.xml repository metadata.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@209677 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import java.util.Iterator;
-    
+
-    
+
-    
+
-
-            //            String key = pluginDescriptor.getId();
+            
-            String key = pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId();
+            String key = Plugin.constructKey( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
-                    pluginIdsByPrefix.put( pluginDescriptor.getGoalPrefix(), pluginDescriptor.getId() );
+                    pluginIdsByPrefix.put( pluginDescriptor.getGoalPrefix(), pluginDescriptor );
-    
-    public PluginDescriptor getPluginDescriptor( String groupId, String artifactId, String version )
+
+    public PluginDescriptor getPluginDescriptor( Plugin plugin )
-        return (PluginDescriptor) pluginDescriptors.get( Plugin.constructKey( groupId, artifactId ) );
-    }
-    
-    public boolean isPluginInstalled( String groupId, String artifactId )
-    {
-        //        String key = PluginDescriptor.constructPluginKey( groupId, artifactId, version );
-        // TODO: see comment in getPluginDescriptor
-        return pluginDescriptors.containsKey( Plugin.constructKey( groupId, artifactId ) );
+        return (PluginDescriptor) pluginDescriptors.get( plugin.getKey() );
-    public String getPluginIdFromPrefix( String prefix )
+    public boolean isPluginInstalled( Plugin plugin )
-        if ( !pluginIdsByPrefix.containsKey( prefix ) )
-        {
-            // TODO: lookup remotely
-        }
-        return (String) pluginIdsByPrefix.get( prefix );
+        // TODO: see comment in getPluginDescriptor
+        return pluginDescriptors.containsKey( plugin.getKey() );
+
+    public PluginDescriptor getPluginDescriptorForPrefix( String prefix )
+    {
+        return (PluginDescriptor) pluginIdsByPrefix.get( prefix );
+    }
+
