Adding project-level ClassRealm, which serves as a nexus for extensions. Extensions are loaded into separate ClassRealm instances, then scanned for components. These ComponentDescriptors are then used to add an import from the extension realm back to the project-session realm, and then the descriptor is added to the container with the project realm as its RealmId. From here, the registerWagons() method has been changed to use the map of projectSessions, and iterates through each project-level realm, setting the lookup-realm, then calling findAndRegisterWagons(..) for each. Also, the plugin manager has been changed to use the project-realm for loading plugins if it exists (the plugin realm becomes a child of the project realm, which should allow plugins to vary by project within a single reactor, though I haven't tested that yet).

Also, shading the embedder to hide the jdom classes, and adjusting the assembly appropriately.

Final thing: I'm rolling back some changes I accidentally made to the CLIManager the other day, which breaks the release plugin because the long options were removed for some reason (save action in Eclipse; don't ask).


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@585012 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.MavenProjectSession;
+import org.codehaus.plexus.MutablePlexusContainer;
+import org.codehaus.plexus.classworlds.realm.DuplicateRealmException;
+import org.codehaus.plexus.component.repository.exception.ComponentRepositoryException;
+import org.codehaus.plexus.configuration.PlexusConfigurationException;
+import java.net.MalformedURLException;
-    protected PlexusContainer container;
+    protected MutablePlexusContainer container;
-        ArtifactRepository localRepository = session.getLocalRepository();
-
-        return verifyVersionedPlugin( plugin, project, localRepository );
-    }
-
-    private PluginDescriptor verifyVersionedPlugin( Plugin plugin,
-                                                    MavenProject project,
-                                                    ArtifactRepository localRepository )
-        throws PluginVersionResolutionException, ArtifactNotFoundException,
-        ArtifactResolutionException, InvalidPluginException,
-        PluginManagerException, PluginNotFoundException
-    {
+        ArtifactRepository localRepository = session.getLocalRepository();
+
-                addPlugin( plugin, pluginArtifact, project, localRepository );
+                addPlugin( plugin, pluginArtifact, project, session );
-                              ArtifactRepository localRepository )
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException,
-        InvalidPluginException
-    {
-        // ----------------------------------------------------------------------------
-        // Get the dependencies for the Plugin
-        // ----------------------------------------------------------------------------
-
-        // the only Plugin instance which will have dependencies is the one specified in the project.
-        // We need to look for a Plugin instance there, in case the instance we're using didn't come from
-        // the project.
-        Plugin projectPlugin = (Plugin) project.getBuild().getPluginsAsMap().get( plugin.getKey() );
-
-        if ( projectPlugin == null )
-        {
-            projectPlugin = plugin;
-        }
-
-        Set artifacts = getPluginArtifacts( pluginArtifact, projectPlugin, project, localRepository );
-
-        addPlugin( plugin, projectPlugin, pluginArtifact, artifacts );
-    }
-
-    protected void addPlugin( Plugin plugin,
-                              Artifact pluginArtifact,
-                              MavenProject project,
-        addPlugin( plugin, projectPlugin, pluginArtifact, artifacts );
-    }
+        String key = projectPlugin.getKey();
-    private void addPlugin( Plugin plugin,
-                            Plugin projectPlugin,
-                            Artifact pluginArtifact,
-                            Set artifacts )
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException,
-        InvalidPluginException
-    {
-        // TODO When/if we go to project-level plugin instances (like for plugin-level deps in the
-        // POM), we need to undo this somehow.
-        ClassRealm pluginRealm = container.getComponentRealm( projectPlugin.getKey() );
+        ClassRealm pluginRealm;
+
+        // if we have a project session, it must mean we have extensions...
+        // which in turn may alter the execution of a plugin.
+        MavenProjectSession projectSession = session.getProjectSession( project );
+        if ( projectSession != null )
+        {
+            pluginRealm = projectSession.getComponentRealm( key );
+        }
+        else
+        {
+            pluginRealm = container.getComponentRealm( key );
+        }
-                               "Realm already exists for: " + projectPlugin.getKey()
+                               "Realm already exists for: " + key
-            List jars = new ArrayList();
-
-            for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+            if ( projectSession != null )
-                Artifact artifact = (Artifact) i.next();
+                componentRealm = projectSession.createPluginRealm( projectPlugin );
-                jars.add( artifact.getFile() );
+                try
+                {
+                    componentRealm.addURL( pluginArtifact.getFile().toURI().toURL() );
+                }
+                catch ( MalformedURLException e )
+                {
+                    throw new PluginContainerException( plugin, componentRealm, "Error rendering plugin artifact: " + pluginArtifact.getId() + " as URL.", e );
+                }
+
+                for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+                {
+                    Artifact artifact = (Artifact) i.next();
+
+                    try
+                    {
+                        getLogger().debug( "Adding: " + artifact.getId() + " to plugin class-realm: " + key + " in project-session: " + project.getId() );
+                        componentRealm.addURL( artifact.getFile().toURI().toURL() );
+                    }
+                    catch ( MalformedURLException e )
+                    {
+                        throw new PluginContainerException( plugin, componentRealm, "Error rendering plugin artifact: " + artifact.getId() + " as URL.", e );
+                    }
+                }
+
+                try
+                {
+                    getLogger().debug( "Discovering components in realm: " + componentRealm );
+                    container.discoverComponents( componentRealm, false );
+                }
+                catch ( PlexusConfigurationException e )
+                {
+                    throw new PluginContainerException( plugin, componentRealm, "Error re-scanning project realm for components.", e );
+                }
+                catch ( ComponentRepositoryException e )
+                {
+                    throw new PluginContainerException( plugin, componentRealm, "Error re-scanning project realm for components.", e );
+                }
+            }
+            else
+            {
+                List jars = new ArrayList();
+
+                for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+                {
+                    Artifact artifact = (Artifact) i.next();
+
+                    jars.add( artifact.getFile() );
+                }
+
+                jars.add( pluginArtifact.getFile() );
+
+                // Now here we need the artifact coreArtifactFilter stuff
+                componentRealm = container.createComponentRealm( key, jars );
-            jars.add( pluginArtifact.getFile() );
+        }
+        catch ( PlexusContainerException e )
+        {
+            throw new PluginContainerException( plugin, componentRealm, "Failed to create realm for plugin '" + projectPlugin
+                                              + ".", e );
+        }
+        catch ( DuplicateRealmException e )
+        {
+            throw new PluginContainerException( plugin, componentRealm, "Failed to create project-specific realm for plugin '" + projectPlugin
+                                                + " in project: " + project.getId(), e );
+        }
-            // Now here we need the artifact coreArtifactFilter stuff
-
-            componentRealm = container.createComponentRealm( projectPlugin.getKey(), jars );
-
-            String parentRealmId = componentRealm.getParentRealm().getId();
+        try
+        {
+            String parentRealmId = container.getContainerRealm().getId();
-        catch ( PlexusContainerException e )
-        {
-            throw new PluginContainerException( plugin, componentRealm, "Failed to create realm for plugin '" + projectPlugin
-                                              + ".", e );
-        }
-        ClassRealm realm = mojoDescriptor.getPluginDescriptor().getClassRealm();
+        ClassRealm realm = null;
+
+        MavenProjectSession projectSession = session.getProjectSession( project );
+        if ( projectSession != null )
+        {
+            try
+            {
+                realm = projectSession.getPluginRealm( pluginDescriptor );
+            }
+            catch ( NoSuchRealmException e )
+            {
+                throw new PluginManagerException( mojoDescriptor, project, "Plugin realm: " + pluginDescriptor.getId() + " not found in project session for: " + project.getId(), e );
+            }
+        }
+        else
+        {
+            realm = mojoDescriptor.getPluginDescriptor().getClassRealm();
+        }
-        container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
+        container = (MutablePlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
