Splitting model-lineage loading and profile-application out into separate components...profile-application, so the model-lineage builder can run properly, and the model-lineage builder, so we can pre-scan for models with extensions that may contain things like profile activators, which would be used during project-loading.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@496910 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.logging.LogEnabled;
+import org.codehaus.plexus.logging.Logger;
+import org.codehaus.plexus.logging.console.ConsoleLogger;
-    extends DetectedProfileActivator implements Contextualizable
+    extends DetectedProfileActivator implements Contextualizable, LogEnabled
-    private Properties properties;
+    private Context context;
+    private Logger logger;
-        properties = (Properties)context.get("SystemProperties");
+        this.context = context;
+        Properties properties = null;
+        if ( context.contains( "SystemProperties" ) )
+        {
+            try
+            {
+                properties = (Properties) context.get("SystemProperties");
+            }
+            catch ( ContextException e )
+            {
+                getLogger().debug( "Failed to get system properties cache from context.", e );
+            }
+        }
+        
+        if ( properties == null )
+        {
+            properties = System.getProperties();
+        }
+        
-            String sysValue = properties.getProperty( name );
+            String sysValue = properties != null ? properties.getProperty( name ) : null;
+    
+    protected Logger getLogger()
+    {
+        if ( logger == null )
+        {
+            logger = new ConsoleLogger( Logger.LEVEL_DEBUG, "SystemPropertyProfileActivator:internal" );
+        }
+
+        return logger;
+    }
+
+    public void enableLogging( Logger logger )
+    {
+        this.logger = logger;
+    }
