Replaced old build-plan mess with a single recursive plan instance that tracks direct invocation forks as well as lifecycle forks. All unit tests run, and I'm running integration tests now, to see if this fixes it0013.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@541938 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.lifecycle.binding.LifecycleBindingManager;
+import java.util.Stack;
- * @version $Id: DefaultLifecycleExecutor.java,v 1.16 2005/03/04 09:04:25
- *          jdcasey Exp $
- * @todo because of aggregation, we ended up with cli-ish stuff in here (like line() and the project logging, without much of the event handling)
+ * @version $Id$
+ * @todo because of aggregation, we ended up with cli-ish stuff in here (like line() and the project logging, without
+ *       much of the event handling)
-public class DefaultLifecycleExecutor
-    extends AbstractLogEnabled
-    implements LifecycleExecutor
+public class DefaultLifecycleExecutor extends AbstractLogEnabled implements LifecycleExecutor
-    
+
-    
+
-    private LifecycleBindingManager lifecycleBindingManager;
-
-     * Execute a task. Each task may be a phase in the lifecycle or the
-     * execution of a mojo.
-     *
+     * Execute a task. Each task may be a phase in the lifecycle or the execution of a mojo.
+     * 
-    public void execute( MavenSession session, ReactorManager rm, EventDispatcher dispatcher )
+    public void execute( final MavenSession session, final ReactorManager rm, final EventDispatcher dispatcher )
-        if ( goals.isEmpty() && rootProject != null )
+        if ( goals.isEmpty() && ( rootProject != null ) )
-    private void executeTaskSegments( List taskSegments, ReactorManager rm, MavenSession session,
-                                      MavenProject rootProject, EventDispatcher dispatcher )
+    private void executeTaskSegments( final List taskSegments, final ReactorManager rm, final MavenSession session,
+                                      final MavenProject rootProject, final EventDispatcher dispatcher )
-                    
+
-                    
+
-                    
+
-                    
+
-                        executeGoalAndHandleFailures( binding, session, dispatcher, event, rm, buildStartTime,
-                                                      target );
+                        executeGoalAndHandleFailures( binding, session, dispatcher, event, rm, buildStartTime, target );
-                    
+
-                    
+
-                    getLogger().info(
-                        "This project has been banned from further executions due to previous failures." );
+                    getLogger().info( "This project has been banned from further executions due to previous failures." );
-                        
+
-                        
+
-                        
+
-                            getLogger().debug( "Mojo: " + mojoBinding.getGoal() + " has config:\n" + mojoBinding.getConfiguration() );
-                            executeGoalAndHandleFailures( mojoBinding, session, dispatcher, event, rm,
-                                                          buildStartTime, target );
+                            getLogger().debug(
+                                               "Mojo: " + mojoBinding.getGoal() + " has config:\n"
+                                                               + mojoBinding.getConfiguration() );
+                            executeGoalAndHandleFailures( mojoBinding, session, dispatcher, event, rm, buildStartTime,
+                                                          target );
-                        
+
-                            "This project has been banned from further executions due to previous failures." );
+                                          "This project has been banned from further executions due to previous failures." );
-     * Retrieves the build plan for the current project, given the specified list of tasks. This
-     * build plan will consist of MojoBindings, each fully configured to execute, which enables us
-     * to enumerate the full build plan to the debug log-level, complete with the configuration each
-     * mojo will use.
+     * Retrieves the build plan for the current project, given the specified list of tasks. This build plan will consist
+     * of MojoBindings, each fully configured to execute, which enables us to enumerate the full build plan to the debug
+     * log-level, complete with the configuration each mojo will use.
-    private List getLifecycleBindings( List tasks, MavenProject project, String targetDescription )
+    private List getLifecycleBindings( final List tasks, final MavenProject project, final String targetDescription )
-            
+
-                getLogger().debug( "\n\nOur build plan is:\n" + BuildPlanUtils.listBuildPlan( plan, project, lifecycleBindingManager, false ) + "\n\n" );
+                getLogger().debug( "\n\nOur build plan is:\n" + BuildPlanUtils.listBuildPlan( plan, false ) + "\n\n" );
-            
-            mojoBindings = plan.getPlanMojoBindings( project, lifecycleBindingManager );
+
+            mojoBindings = plan.renderExecutionPlan( new Stack() );
-            throw new LifecycleExecutionException( "Failed to construct build plan for: " + targetDescription + ". Reason: "
-                + e.getMessage(), e );
+            throw new LifecycleExecutionException( "Failed to construct build plan for: " + targetDescription
+                            + ". Reason: " + e.getMessage(), e );
-        
+
-    private void executeGoalAndHandleFailures( MojoBinding mojoBinding, MavenSession session, EventDispatcher dispatcher, String event, ReactorManager rm,
-                                               long buildStartTime, String target )
+    private void executeGoalAndHandleFailures( final MojoBinding mojoBinding, final MavenSession session,
+                                               final EventDispatcher dispatcher, final String event,
+                                               final ReactorManager rm, final long buildStartTime, final String target )
-        
+
-                    throw new LifecycleExecutionException( "Failed to load plugin for: " + MojoBindingUtils.toString( mojoBinding )
-                                                           + ". Reason: " + e.getMessage(), e );
+                    throw new LifecycleExecutionException( "Failed to load plugin for: "
+                                    + MojoBindingUtils.toString( mojoBinding ) + ". Reason: " + e.getMessage(), e );
-            
+
-                
+
-                    throw new LifecycleExecutionException( "Internal error in the plugin manager executing goal '" +
-                        mojoDescriptor.getId() + "': " + e.getMessage(), e );
+                    throw new LifecycleExecutionException( "Internal error in the plugin manager executing goal '"
+                                    + mojoDescriptor.getId() + "': " + e.getMessage(), e );
-                throw new LifecycleExecutionException( "Failed to load plugin for: " + MojoBindingUtils.toString( mojoBinding )
-                                                       + ". Reason: unknown" );
+                throw new LifecycleExecutionException( "Failed to load plugin for: "
+                                + MojoBindingUtils.toString( mojoBinding ) + ". Reason: unknown" );
-    private boolean handleExecutionFailure( ReactorManager rm, MavenProject project, Exception e, MojoBinding mojoBinding,
-                                            long buildStartTime )
+    private boolean handleExecutionFailure( final ReactorManager rm, final MavenProject project, final Exception e,
+                                            final MojoBinding mojoBinding, final long buildStartTime )
-        rm.registerBuildFailure( project, e, MojoBindingUtils.toString( mojoBinding ), System.currentTimeMillis() - buildStartTime );
+        rm.registerBuildFailure( project, e, MojoBindingUtils.toString( mojoBinding ), System.currentTimeMillis()
+                        - buildStartTime );
-    private List segmentTaskListByAggregationNeeds( List tasks, MavenSession session, MavenProject rootProject )
+    private List segmentTaskListByAggregationNeeds( final List tasks, final MavenSession session,
+                                                    final MavenProject rootProject )
-                    if ( currentSegment != null && currentSegment.aggregate() )
+                    if ( ( currentSegment != null ) && currentSegment.aggregate() )
-                        // TODO: shouldn't hit this, investigate using the same resolution logic as 
+                        // TODO: shouldn't hit this, investigate using the same resolution logic as
-                            "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator." );
-                        
+                                          "Cannot find mojo descriptor for: \'" + task
+                                                          + "\' - Treating as non-aggregator." );
+
-                        String message = "Invalid task '" + task + "': you must specify a valid lifecycle phase, or"
-                            + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
-                        
+                        String message =
+                            "Invalid task '"
+                                            + task
+                                            + "': you must specify a valid lifecycle phase, or"
+                                            + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
+
-                    
+
-                    if ( mojo != null && ( mojo.isAggregator() || !mojo.isProjectRequired() ) )
+                    if ( ( mojo != null ) && ( mojo.isAggregator() || !mojo.isProjectRequired() ) )
-                        if ( currentSegment != null && !currentSegment.aggregate() )
+                        if ( ( currentSegment != null ) && !currentSegment.aggregate() )
-                        if ( currentSegment != null && currentSegment.aggregate() )
+                        if ( ( currentSegment != null ) && currentSegment.aggregate() )
-     * lookup directly, or have them passed in
+     *       lookup directly, or have them passed in
-    private Map findArtifactTypeHandlers( MavenSession session )
+    private Map findArtifactTypeHandlers( final MavenSession session )
-            
+
-                    // TODO: if moved to the plugin manager we already have the descriptor from above and so do can lookup the container directly
+                    // TODO: if moved to the plugin manager we already have the descriptor from above and so do can
+                    // lookup the container directly
-                        throw new LifecycleExecutionException( "Error looking up available components from plugin '" +
-                            plugin.getKey() + "': " + e.getMessage(), e );
+                        throw new LifecycleExecutionException( "Error looking up available components from plugin '"
+                                        + plugin.getKey() + "': " + e.getMessage(), e );
-    private PluginDescriptor verifyPlugin( Plugin plugin, MavenProject project, MavenSession session )
+    private PluginDescriptor verifyPlugin( final Plugin plugin, final MavenProject project, final MavenSession session )
-        
+
-            throw new LifecycleExecutionException(
-                "Internal error in the plugin manager getting plugin '" + plugin.getKey() + "': " + e.getMessage(), e );
+            throw new LifecycleExecutionException( "Internal error in the plugin manager getting plugin '"
+                            + plugin.getKey() + "': " + e.getMessage(), e );
-    private MojoDescriptor getMojoDescriptorForDirectInvocation( String task, MavenSession session, MavenProject project )
+    private MojoDescriptor getMojoDescriptorForDirectInvocation( final String task, final MavenSession session,
+                                                                 final MavenProject project )
-        
+
-        
+
-        private List tasks = new ArrayList();
+        private final List tasks = new ArrayList();
-        TaskSegment( boolean aggregate )
+        TaskSegment( final boolean aggregate )
-        void add( String task )
+        void add( final String task )
