PR: MNG-122
final exception cleanup - reduce the noise in the lifecycle executor, get rid of response object in favour of exception handling from DefaultMaven.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@320797 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.execution.MavenExecutionResponse;
+import org.apache.maven.plugin.version.PluginVersionNotFoundException;
-import java.util.Date;
-    public MavenExecutionResponse execute( MavenSession session, ReactorManager rm, EventDispatcher dispatcher )
-        throws LifecycleExecutionException
+    public void execute( MavenSession session, ReactorManager rm, EventDispatcher dispatcher )
+        throws BuildFailureException, LifecycleExecutionException
-        MavenExecutionResponse response = new MavenExecutionResponse();
-
-        response.setStart( session.getStartTime() );
-
-        try
+        if ( goals.isEmpty() )
-            if ( goals.isEmpty() )
-            {
-                // TODO: delete
-                throw new NoGoalsSpecifiedException( "You must specify at least one goal. Try 'install'" );
-            }
-
-            List taskSegments = segmentTaskListByAggregationNeeds( goals, session, rootProject );
-
-            // TODO: probably don't want to do all this up front
-            findExtensions( session );
-
-            executeTaskSegments( taskSegments, rm, session, rootProject, dispatcher, response );
-
-            if ( ReactorManager.FAIL_AT_END.equals( rm.getFailureBehavior() ) && rm.hasBuildFailures() )
-            {
-                response.setException( new BuildFailureException( "One or more projects failed to build." ) );
-            }
-        }
-        catch ( MojoExecutionException e )
-        {
-            response.setException( e );
-        }
-        catch ( ArtifactNotFoundException e )
-        {
-            response.setException( e );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            response.setException( e );
-        }
-        catch ( NoGoalsSpecifiedException e )
-        {
-            response.setException( e );
-        }
-        catch ( MojoFailureException e )
-        {
-            response.setException( e );
-        }
-        catch ( PluginNotFoundException e )
-        {
-            response.setException( e );
-        }
-        finally
-        {
-            response.setFinish( new Date() );
+            throw new BuildFailureException( "You must specify at least one goal. Try 'install'" );
-        return response;
+        List taskSegments = segmentTaskListByAggregationNeeds( goals, session, rootProject );
+
+        // TODO: probably don't want to do all this up front
+        findExtensions( session );
+
+        executeTaskSegments( taskSegments, rm, session, rootProject, dispatcher );
-        throws ArtifactNotFoundException, ArtifactResolutionException, LifecycleExecutionException,
-        PluginNotFoundException
+        throws LifecycleExecutionException
+                catch ( ArtifactResolutionException e )
+                {
+                    throw new LifecycleExecutionException( e.getMessage(), e );
+                }
+                catch ( ArtifactNotFoundException e )
+                {
+                    throw new LifecycleExecutionException( e.getMessage(), e );
+                }
-            Map handlers = findArtifactTypeHandlers( project, session.getSettings(), session.getLocalRepository() );
-            artifactHandlerManager.addHandlers( handlers );
+            try
+            {
+                Map handlers = findArtifactTypeHandlers( project, session.getSettings(), session.getLocalRepository() );
+                artifactHandlerManager.addHandlers( handlers );
+            }
+            catch ( PluginNotFoundException e )
+            {
+                throw new LifecycleExecutionException( e.getMessage(), e );
+            }
-                                      MavenProject rootProject, EventDispatcher dispatcher,
-                                      MavenExecutionResponse response )
-        throws ArtifactNotFoundException, MojoExecutionException, LifecycleExecutionException, MojoFailureException,
-        ArtifactResolutionException, PluginNotFoundException
+                                      MavenProject rootProject, EventDispatcher dispatcher )
+        throws LifecycleExecutionException, BuildFailureException
-                    try
+                    // only call once, with the top-level project (assumed to be provided as a parameter)...
+                    for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
-                        // only call once, with the top-level project (assumed to be provided as a parameter)...
-                        for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
-                        {
-                            String task = (String) goalIterator.next();
+                        String task = (String) goalIterator.next();
-                            executeGoalAndHandleFailures( task, session, rootProject, response, dispatcher, event, rm,
-                                                          buildStartTime, target );
-                        }
-
-                        rm.registerBuildSuccess( rootProject, System.currentTimeMillis() - buildStartTime );
-
-                        dispatcher.dispatchEnd( event, target );
+                        executeGoalAndHandleFailures( task, session, rootProject, dispatcher, event, rm, buildStartTime,
+                                                      target );
-                    catch ( LifecycleExecutionException e )
-                    {
-                        dispatcher.dispatchError( event, target, e );
-                        throw e;
-                    }
+                    rm.registerBuildSuccess( rootProject, System.currentTimeMillis() - buildStartTime );
+
+                    dispatcher.dispatchEnd( event, target );
-                response.setExecutedMultipleProjects( true );
-
-                        try
+                        for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
-                            for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
-                            {
-                                String task = (String) goalIterator.next();
+                            String task = (String) goalIterator.next();
-                                executeGoalAndHandleFailures( task, session, currentProject, response, dispatcher,
-                                                              event, rm, buildStartTime, target );
-                            }
-
-                            rm.registerBuildSuccess( currentProject, System.currentTimeMillis() - buildStartTime );
-
-                            dispatcher.dispatchEnd( event, target );
+                            executeGoalAndHandleFailures( task, session, currentProject, dispatcher, event, rm,
+                                                          buildStartTime, target );
-                        catch ( LifecycleExecutionException e )
-                        {
-                            dispatcher.dispatchError( event, target, e );
-                            throw e;
-                        }
+                        rm.registerBuildSuccess( currentProject, System.currentTimeMillis() - buildStartTime );
+
+                        dispatcher.dispatchEnd( event, target );
-                                               MavenExecutionResponse response, EventDispatcher dispatcher,
-                                               String event, ReactorManager rm, long buildStartTime, String target )
-        throws LifecycleExecutionException, MojoExecutionException, MojoFailureException, ArtifactNotFoundException,
-        ArtifactResolutionException, PluginNotFoundException
+                                               EventDispatcher dispatcher, String event, ReactorManager rm,
+                                               long buildStartTime, String target )
+        throws BuildFailureException, LifecycleExecutionException
-            executeGoal( task, session, project, response );
+            executeGoal( task, session, project );
-        catch ( MojoExecutionException e )
+        catch ( LifecycleExecutionException e )
-            handleExecutionFailure( rm, project, e, task, buildStartTime );
+            if ( handleExecutionFailure( rm, project, e, task, buildStartTime ) )
+            {
+                throw e;
+            }
-        catch ( ArtifactResolutionException e )
+        catch ( BuildFailureException e )
-            handleExecutionFailure( rm, project, e, task, buildStartTime );
-        }
-        catch ( MojoFailureException e )
-        {
-            // TODO: should be dispatchFailure?
-            dispatcher.dispatchError( event, target, e );
-
-            handleExecutionFailure( rm, project, e, task, buildStartTime );
-        }
-        catch ( ArtifactNotFoundException e )
-        {
-            // TODO: should be dispatchFailure?
-            dispatcher.dispatchError( event, target, e );
-
-            handleExecutionFailure( rm, project, e, task, buildStartTime );
-        }
-        catch ( InvalidDependencyVersionException e )
-        {
-            // TODO: should be dispatchFailure?
-            dispatcher.dispatchError( event, target, e );
-
-            handleExecutionFailure( rm, project, e, task, buildStartTime );
+            if ( handleExecutionFailure( rm, project, e, task, buildStartTime ) )
+            {
+                throw e;
+            }
-    private void handleExecutionFailure( ReactorManager rm, MavenProject project, Exception e, String task,
-                                         long buildStartTime )
-        throws MojoExecutionException, MojoFailureException, ArtifactNotFoundException, ArtifactResolutionException
+    private boolean handleExecutionFailure( ReactorManager rm, MavenProject project, Exception e, String task,
+                                            long buildStartTime )
+        rm.registerBuildFailure( project, e, task, System.currentTimeMillis() - buildStartTime );
+
-            rm.registerBuildFailure( project, e, task, System.currentTimeMillis() - buildStartTime );
-
-            if ( e instanceof MojoExecutionException )
-            {
-                throw (MojoExecutionException) e;
-            }
-            if ( e instanceof MojoFailureException )
-            {
-                throw (MojoFailureException) e;
-            }
-            else if ( e instanceof ArtifactNotFoundException )
-            {
-                throw (ArtifactNotFoundException) e;
-            }
-            else if ( e instanceof ArtifactResolutionException )
-            {
-                throw (ArtifactResolutionException) e;
-            }
-            else
-            {
-                getLogger().error( "Attempt to register inappropriate build-failure Exception.", e );
-
-                throw new IllegalArgumentException( "Inappropriate build-failure Exception: " + e );
-            }
+            return true;
-            rm.registerBuildFailure( project, e, task, System.currentTimeMillis() - buildStartTime );
-
-        // FIXME: how about the other cases?
+        return false;
-        throws LifecycleExecutionException, ArtifactNotFoundException, PluginNotFoundException,
-        ArtifactResolutionException
+        throws LifecycleExecutionException, BuildFailureException
-    private void executeGoal( String task, MavenSession session, MavenProject project, MavenExecutionResponse response )
-        throws LifecycleExecutionException, ArtifactNotFoundException, MojoExecutionException,
-        ArtifactResolutionException, MojoFailureException, InvalidDependencyVersionException, PluginNotFoundException
+    private void executeGoal( String task, MavenSession session, MavenProject project )
+        throws LifecycleExecutionException, BuildFailureException
-        if ( getPhaseToLifecycleMap().containsKey( task ) )
+        try
-            Lifecycle lifecycle = getLifecycleForPhase( task );
+            if ( getPhaseToLifecycleMap().containsKey( task ) )
+            {
+                Lifecycle lifecycle = getLifecycleForPhase( task );
-            // we have a lifecycle phase, so lets bind all the necessary goals
-            Map lifecycleMappings = constructLifecycleMappings( session, task, project, lifecycle );
-            executeGoalWithLifecycle( task, session, lifecycleMappings, project, response, lifecycle );
+                // we have a lifecycle phase, so lets bind all the necessary goals
+                Map lifecycleMappings = constructLifecycleMappings( session, task, project, lifecycle );
+                executeGoalWithLifecycle( task, session, lifecycleMappings, project, lifecycle );
+            }
+            else
+            {
+                executeStandaloneGoal( task, session, project );
+            }
-        else
+        catch ( PluginNotFoundException e )
-            executeStandaloneGoal( task, session, project, response );
+            throw new BuildFailureException( "A required plugin was not found", e.getMessage(), e );
-                                           MavenProject project, MavenExecutionResponse response, Lifecycle lifecycle )
-        throws ArtifactResolutionException, LifecycleExecutionException, MojoExecutionException, MojoFailureException,
-        ArtifactNotFoundException, InvalidDependencyVersionException, PluginNotFoundException
+                                           MavenProject project, Lifecycle lifecycle )
+        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-            executeGoals( goals, session, project, response );
+            executeGoals( goals, session, project );
-    private void executeStandaloneGoal( String task, MavenSession session, MavenProject project,
-                                        MavenExecutionResponse response )
-        throws ArtifactResolutionException, LifecycleExecutionException, MojoExecutionException, MojoFailureException,
-        ArtifactNotFoundException, InvalidDependencyVersionException, PluginNotFoundException
+    private void executeStandaloneGoal( String task, MavenSession session, MavenProject project )
+        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-        executeGoals( Collections.singletonList( new MojoExecution( mojoDescriptor ) ), session, project, response );
+        executeGoals( Collections.singletonList( new MojoExecution( mojoDescriptor ) ), session, project );
-    private void executeGoals( List goals, MavenSession session, MavenProject project, MavenExecutionResponse response )
-        throws LifecycleExecutionException, MojoExecutionException, ArtifactResolutionException, MojoFailureException,
-        ArtifactNotFoundException, InvalidDependencyVersionException, PluginNotFoundException
+    private void executeGoals( List goals, MavenSession session, MavenProject project )
+        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-                forkLifecycle( mojoDescriptor, session, project, response );
+                forkLifecycle( mojoDescriptor, session, project );
-                        forkLifecycle( descriptor, session, project, response );
+                        forkLifecycle( descriptor, session, project );
+            catch ( ArtifactNotFoundException e )
+            {
+                throw new LifecycleExecutionException( e.getMessage(), e );
+            }
+            catch ( InvalidDependencyVersionException e )
+            {
+                throw new LifecycleExecutionException( e.getMessage(), e );
+            }
+            catch ( ArtifactResolutionException e )
+            {
+                throw new LifecycleExecutionException( e.getMessage(), e );
+            }
+            catch ( MojoFailureException e )
+            {
+                throw new BuildFailureException( e.getMessage(), e.getLongMessage(), e );
+            }
+            catch ( MojoExecutionException e )
+            {
+                throw new LifecycleExecutionException( e.getMessage(), e );
+            }
+            catch ( PluginConfigurationException e )
+            {
+                throw new LifecycleExecutionException( e.getMessage(), e );
+            }
-        throws ArtifactResolutionException, LifecycleExecutionException, ArtifactNotFoundException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, PluginNotFoundException
-        throws ArtifactResolutionException, ArtifactNotFoundException, LifecycleExecutionException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, PluginNotFoundException
+                catch ( ArtifactNotFoundException e )
+                {
+                    throw new LifecycleExecutionException( e.getMessage(), e );
+                }
+                catch ( ArtifactResolutionException e )
+                {
+                    throw new LifecycleExecutionException( e.getMessage(), e );
+                }
-    private void forkLifecycle( MojoDescriptor mojoDescriptor, MavenSession session, MavenProject project,
-                                MavenExecutionResponse response )
-        throws LifecycleExecutionException, MojoExecutionException, ArtifactResolutionException, MojoFailureException,
-        ArtifactNotFoundException, InvalidDependencyVersionException, PluginNotFoundException
+    private void forkLifecycle( MojoDescriptor mojoDescriptor, MavenSession session, MavenProject project )
+        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-            response.setExecutedMultipleProjects( true );
-
-                forkProjectLifecycle( mojoDescriptor, session, reactorProject, response );
+                forkProjectLifecycle( mojoDescriptor, session, reactorProject );
-            forkProjectLifecycle( mojoDescriptor, session, project, response );
+            forkProjectLifecycle( mojoDescriptor, session, project );
-    private void forkProjectLifecycle( MojoDescriptor mojoDescriptor, MavenSession session, MavenProject project,
-                                       MavenExecutionResponse response )
-        throws ArtifactResolutionException, LifecycleExecutionException, MojoExecutionException, MojoFailureException,
-        ArtifactNotFoundException, InvalidDependencyVersionException, PluginNotFoundException
+    private void forkProjectLifecycle( MojoDescriptor mojoDescriptor, MavenSession session, MavenProject project )
+        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-            executeGoalWithLifecycle( targetPhase, session, lifecycleMappings, executionProject, response, lifecycle );
+            executeGoalWithLifecycle( targetPhase, session, lifecycleMappings, executionProject, lifecycle );
-            executeGoals( Collections.singletonList( new MojoExecution( desc ) ), session, executionProject, response );
+            executeGoals( Collections.singletonList( new MojoExecution( desc ) ), session, executionProject );
-        throws LifecycleExecutionException
+        throws BuildFailureException, LifecycleExecutionException
-            throw new LifecycleExecutionException( "Unable to find lifecycle for phase '" + phase + "'" );
+            throw new BuildFailureException( "Unable to find lifecycle for phase '" + phase + "'" );
-        throws ArtifactResolutionException, LifecycleExecutionException, ArtifactNotFoundException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-        throws ArtifactResolutionException, LifecycleExecutionException, ArtifactNotFoundException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-        throws ArtifactResolutionException, LifecycleExecutionException, ArtifactNotFoundException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, PluginNotFoundException
-        throws ArtifactResolutionException, ArtifactNotFoundException, LifecycleExecutionException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, PluginNotFoundException
-        throws ArtifactResolutionException, ArtifactNotFoundException, LifecycleExecutionException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, PluginNotFoundException
-        throws LifecycleExecutionException, ArtifactResolutionException, ArtifactNotFoundException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, PluginNotFoundException
-        throws ArtifactResolutionException, LifecycleExecutionException, ArtifactNotFoundException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, PluginNotFoundException
-            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+            throw new LifecycleExecutionException( "Error resolving plugin version: " + e.getMessage(), e );
-            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+            throw new LifecycleExecutionException( e.getMessage(), e );
-            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+            throw new LifecycleExecutionException( e.getMessage(), e );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            throw new LifecycleExecutionException( e.getMessage(), e );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new LifecycleExecutionException( e.getMessage(), e );
+        }
+        catch ( PluginVersionNotFoundException e )
+        {
+            throw new LifecycleExecutionException( e.getMessage(), e );
-        throws ArtifactResolutionException, LifecycleExecutionException, ArtifactNotFoundException,
-        PluginNotFoundException
+        throws LifecycleExecutionException, PluginNotFoundException
-            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+            throw new LifecycleExecutionException( "Error resolving plugin version: " + e.getMessage(), e );
-            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+            throw new LifecycleExecutionException( e.getMessage(), e );
-            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+            throw new LifecycleExecutionException( e.getMessage(), e );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            throw new LifecycleExecutionException( e.getMessage(), e );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new LifecycleExecutionException( e.getMessage(), e );
+        }
+        catch ( PluginVersionNotFoundException e )
+        {
+            throw new LifecycleExecutionException( e.getMessage(), e );
-                throw new LifecycleExecutionException( "Goal from the POM '" + goal + "' was not found in the plugin" );
+                throw new LifecycleExecutionException(
+                    "'" + goal + "' was specified in an execution, but not found in the plugin" );
-        throws LifecycleExecutionException, ArtifactNotFoundException, PluginNotFoundException,
-        ArtifactResolutionException
+        throws BuildFailureException, LifecycleExecutionException, PluginNotFoundException
-            throw new LifecycleExecutionException( message );
+            throw new BuildFailureException( message );
-            throw new LifecycleExecutionException( "Required goal not found: " + task );
+            throw new BuildFailureException( "Required goal not found: " + task );
