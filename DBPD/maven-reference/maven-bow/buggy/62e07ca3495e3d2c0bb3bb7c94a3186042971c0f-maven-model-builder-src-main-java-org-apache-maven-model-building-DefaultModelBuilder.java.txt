o Refactored model building components to use problem collector


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@800468 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.interpolation.ModelInterpolationException;
-            modelNormalizer.mergeDuplicates( tmpModel, request );
+            modelNormalizer.mergeDuplicates( tmpModel, request, problems );
-                profileInjector.injectProfile( tmpModel, activeProfile, request );
+                profileInjector.injectProfile( tmpModel, activeProfile, request, problems );
-                    profileInjector.injectProfile( tmpModel, activeProfile, request );
+                    profileInjector.injectProfile( tmpModel, activeProfile, request, problems );
-        assembleInheritance( lineage, request );
+        assembleInheritance( lineage, request, problems );
-        pluginManagementInjector.injectBasicManagement( resultModel, request );
+        pluginManagementInjector.injectBasicManagement( resultModel, request, problems );
-        pluginManagementInjector.injectManagement( resultModel, request );
+        pluginManagementInjector.injectManagement( resultModel, request, problems );
-        dependencyManagementInjector.injectManagement( resultModel, request );
+        dependencyManagementInjector.injectManagement( resultModel, request, problems );
-        modelNormalizer.injectDefaultValues( resultModel, request );
+        modelNormalizer.injectDefaultValues( resultModel, request, problems );
-            pluginConfigurationExpander.expandPluginConfiguration( resultModel, request );
+            pluginConfigurationExpander.expandPluginConfiguration( resultModel, request, problems );
-    private void assembleInheritance( List<ModelData> lineage, ModelBuildingRequest request )
+    private void assembleInheritance( List<ModelData> lineage, ModelBuildingRequest request,
+                                      ModelProblemCollector problems )
-            inheritanceAssembler.assembleModelInheritance( child, parent, request );
+            inheritanceAssembler.assembleModelInheritance( child, parent, request, problems );
-        try
-        {
-            Model result = modelInterpolator.interpolateModel( model, model.getProjectDirectory(), request );
-            result.setPomFile( model.getPomFile() );
-            return result;
-        }
-        catch ( ModelInterpolationException e )
-        {
-            problems.addError( "Invalid expression: " + e.getMessage(), e );
-
-            return model;
-        }
+        Model result = modelInterpolator.interpolateModel( model, model.getProjectDirectory(), request, problems );
+        result.setPomFile( model.getPomFile() );
+        return result;
-        dependencyManagementImporter.importManagement( model, importMngts, request );
+        dependencyManagementImporter.importManagement( model, importMngts, request, problems );
