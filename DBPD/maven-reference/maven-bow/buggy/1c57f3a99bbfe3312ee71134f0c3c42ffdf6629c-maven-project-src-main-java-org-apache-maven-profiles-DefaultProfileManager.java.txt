Collapsed the ProfileContext into the ProfileManager - serves similar function.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@761629 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.project.ProjectBuilderConfiguration;
+    
+    private static final ProfileMatcher defaultMatcher = new DefaultMatcher();
+
+    private static final List<ProfileMatcher> matchers =
+        Collections.unmodifiableList( Arrays.asList( new DefaultMatcher(), new PropertyMatcher() ) );    
+    public static List<Profile> getActiveProfilesFrom(ProjectBuilderConfiguration config, Model model, PlexusContainer container)
+		throws ProfileActivationException
+	{
+	    List<Profile> projectProfiles = new ArrayList<Profile>();
+	    ProfileManager externalProfileManager = config.getGlobalProfileManager();
+	    
+	    ProfileActivationContext profileActivationContext = (externalProfileManager == null) ? new ProfileActivationContext( config.getExecutionProperties(), false ):
+	        externalProfileManager.getProfileActivationContext();
+	 
+	    if(externalProfileManager != null)
+	    {           
+	    	projectProfiles.addAll( externalProfileManager.getActiveProfiles() );    
+	    }
+	
+	    ProfileManager profileManager = new DefaultProfileManager( container, profileActivationContext );
+	    profileManager.addProfiles( model.getProfiles() );
+	    projectProfiles.addAll( profileManager.getActiveProfiles() ); 
+	    return projectProfiles;
+	}   
+ 
+    public static Collection<Profile> getActiveProfiles(List<Profile> profiles, ProfileManagerInfo profileContextInfo)
+    {
+        List<InterpolatorProperty> properties = profileContextInfo.getInterpolatorProperties();
+        Collection<String> activeProfileIds = profileContextInfo.getActiveProfileIds();
+        Collection<String> inactiveProfileIds = profileContextInfo.getInactiveProfileIds();
+        
+        List<Profile> matchedProfiles = new ArrayList<Profile>();
+        List<Profile> defaultProfiles = new ArrayList<Profile>();
+        for ( Profile profile : profiles )
+        {
+            String profileId = profile.getId();
+
+            if ( !inactiveProfileIds.contains( profileId ) )
+            {
+                if ( activeProfileIds.contains( profileId ) )
+                {
+                    matchedProfiles.add( profile );
+                }
+                else if ( defaultMatcher.isMatch( profile, properties ) )
+                {
+                    defaultProfiles.add( profile );
+                }
+                else
+                {
+                    for ( ProfileMatcher matcher : matchers )
+                    {
+                        if ( matcher.isMatch( profile, properties ) )
+                        {
+                            matchedProfiles.add( profile );
+                            break;
+                        }
+                    }
+                }
+            }
+        }
+
+        if ( matchedProfiles.isEmpty() )
+        {
+            matchedProfiles = defaultProfiles;
+        }
+
+        return matchedProfiles;
+    }    
+
+    /* (non-Javadoc)
+     * @see org.apache.maven.project.ProfileManager#addProfiles(java.util.List)
+     */
+    public void addProfiles( List<Profile> profiles )
+    {
+        for ( Iterator it = profiles.iterator(); it.hasNext(); )
+        {
+            Profile profile = (Profile) it.next();
+
+            addProfile( profile );
+        }
+    }   
+    
-    private static List<ProfileMatcher> matchers = Arrays.asList( (ProfileMatcher) new DefaultMatcher(),
-        (ProfileMatcher) new PropertyMatcher());
-
-    /* (non-Javadoc)
-     * @see org.apache.maven.project.ProfileManager#addProfiles(java.util.List)
-     */
-    public void addProfiles( List<Profile> profiles )
-    {
-        for ( Iterator it = profiles.iterator(); it.hasNext(); )
-        {
-            Profile profile = (Profile) it.next();
-
-            addProfile( profile );
-        }
-    }
-
