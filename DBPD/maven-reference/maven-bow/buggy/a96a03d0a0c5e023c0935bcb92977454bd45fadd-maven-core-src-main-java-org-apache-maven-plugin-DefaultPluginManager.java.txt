o Removed dependency on plexus-container-artifact, using nested DefaultPlexusContainer instances instead for plugin isolation.
o Moved marmalade support dependencies out of maven-core, since they can be supported on demand now
o changed the ordering of the ant and assembly plugins, to show that the classloader (plugin param) bug is fixed.
o added a method in PluginDescriptor which is similar to o.a.m.model.Plugin.getId() (I think that's the method; it's the one that results in a key of 'g:a')
o moved wagon-ssh dependency into maven-core, since there is a new issue related to nested containers and wagons which are introduced as plugin dependencies. This should be solved using a mechanism similar to plugin-manager for wagon-manager impl in future anyway

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@187639 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.ArtifactEnabledContainer;
-import org.codehaus.plexus.ArtifactEnabledContainerException;
+import org.codehaus.plexus.PlexusContainerException;
+import java.io.File;
+import java.util.Collections;
-    private boolean isPluginInstalled( String groupId, String artifactId, String version )
+    private boolean isPluginInstalled( String pluginKey )
-        String key = groupId + ":" + artifactId;
-        return pluginDescriptors.containsKey( key );
+        return pluginDescriptors.containsKey( pluginKey );
-    private boolean isPluginInstalled( String prefix )
+    private boolean isPluginInstalledForPrefix( String prefix )
-        if ( !isPluginInstalled( prefix ) )
+        if ( !isPluginInstalledForPrefix( prefix ) )
+        
+        String pluginKey = groupId + ":" + artifactId;
+        
-        if ( !isPluginInstalled( groupId, artifactId, version ) )
+        if ( !isPluginInstalled( pluginKey ) )
-                Artifact pluginArtifact = artifactFactory.createArtifact( groupId, artifactId, version, null,
+                Artifact pluginArtifact = artifactFactory.createArtifact( groupId, artifactId, version, Artifact.SCOPE_RUNTIME,
-                addPlugin( pluginArtifact, session );
+
+                addPlugin( pluginKey, pluginArtifact, session );
-            catch ( ArtifactEnabledContainerException e )
+            catch ( PlexusContainerException e )
-    protected void addPlugin( Artifact pluginArtifact, MavenSession session )
-        throws ArtifactEnabledContainerException, ArtifactResolutionException, ComponentLookupException
+    protected void addPlugin( String pluginKey, Artifact pluginArtifact, MavenSession session )
+        throws ArtifactResolutionException, ComponentLookupException, PlexusContainerException
-            ( (ArtifactEnabledContainer) container ).addComponent( pluginArtifact, artifactResolver,
-                                                                   session.getPluginRepositories(),
-                                                                   session.getLocalRepository(), metadataSource,
-                                                                   artifactFilter );
+            ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections.singleton( pluginArtifact ), session.getRemoteRepositories(), session.getLocalRepository(), metadataSource, artifactFilter );
+            
+            Map resolved = result.getArtifacts();
+            
+            List files = new ArrayList();
+            
+            for ( Iterator it = resolved.values().iterator(); it.hasNext(); )
+            {
+                Artifact artifact = (Artifact) it.next();
+                File artifactFile = artifact.getFile();
+                
+                files.add( artifact.getFile() );
+            }
+            
+            container.createChildContainer( pluginKey, files, Collections.EMPTY_MAP, Collections.singletonList( this ) );
+        PlexusContainer pluginContainer = null;
+        
-            plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
+            String pluginKey = mojoDescriptor.getPluginDescriptor().getPluginLookupKey();
+            
+            pluginContainer = container.getChildContainer( pluginKey );
+            
+            if( pluginContainer == null )
+            {
+                throw new PluginConfigurationException( "Cannot find PlexusContainer for plugin: " + pluginKey );
+            }
+            
+            plugin = (Mojo) pluginContainer.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
-                                                       expressionEvaluator );
+                                                       pluginContainer, expressionEvaluator );
-                populatePluginFields( plugin, mojoDescriptor, mergedConfiguration, expressionEvaluator );
+                populatePluginFields( plugin, mojoDescriptor, mergedConfiguration, pluginContainer, expressionEvaluator );
-            releaseComponent( plugin );
+            try
+            {
+                pluginContainer.release( plugin );
+            }
+            catch ( ComponentLifecycleException e )
+            {
+                if( getLogger().isErrorEnabled() )
+                {
+                    getLogger().error( "Error releasing plugin - ignoring.", e );
+                }
+            }
-                                       ExpressionEvaluator expressionEvaluator )
+                                       PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
-                configurator = (ComponentConfigurator) container.lookup( ComponentConfigurator.ROLE, configuratorId );
+                configurator = (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, configuratorId );
-                configurator = (ComponentConfigurator) container.lookup( ComponentConfigurator.ROLE );
+                configurator = (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE );
-            configurator.configureComponent( plugin, configuration, expressionEvaluator );
+            configurator.configureComponent( plugin, configuration, expressionEvaluator, pluginContainer.getContainerRealm() );
-                    container.release( configurator );
+                    pluginContainer.release( configurator );
-                                                        ExpressionEvaluator expressionEvaluator )
+                                                        PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
-            "marmalade-core",
-            "maven-script-marmalade",
-            "plexus-container-artifact",
-            "plexus-marmalade-factory",
