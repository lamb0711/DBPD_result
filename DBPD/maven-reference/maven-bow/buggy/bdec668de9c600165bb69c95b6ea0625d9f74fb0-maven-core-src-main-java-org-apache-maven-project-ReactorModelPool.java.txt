[MNG-6656] Introduce base for build/consumer pom

-import java.io.File;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Objects;
+import java.util.Set;
+
+import org.apache.maven.model.Model;
- * Holds all POM files that are known to the reactor. This allows the project builder to resolve imported POMs from the
+ * Holds all Models that are known to the reactor. This allows the project builder to resolve imported Models from the
+ * @author Robert Scholte
+    private final Map<GAKey, Set<Model>> modelsByGa = new HashMap<>();
-    private final Map<CacheKey, File> pomFiles = new HashMap<>();
+    private final Map<Path, Model> modelsByPath = new HashMap<>();
-    public File get( String groupId, String artifactId, String version )
+    /**
+     * Get the model by its GAV or (since 3.7.0) by its GA if there is only one.
+     *  
+     * @param groupId, never {@code null}
+     * @param artifactId, never {@code null}
+     * @param version, can be {@code null}
+     * @return the matching model or {@code null}
+     * @throws IllegalStateException if version was null and multiple modules share the same groupId + artifactId
+     */
+    public Model get( String groupId, String artifactId, String version )
-        return pomFiles.get( new CacheKey( groupId, artifactId, version ) );
+        return modelsByGa.getOrDefault( new GAKey( groupId, artifactId ), Collections.emptySet() ).stream()
+                        .filter( m -> version == null || version.equals( getVersion( m ) ) )
+                        .reduce( ( a, b ) -> 
+                        {
+                            throw new IllegalStateException( "Multiple modules with key "
+                                + a.getGroupId() + ':' + a.getArtifactId() );
+                        } ).orElse( null );
-    public void put( String groupId, String artifactId, String version, File pomFile )
+    /**
+     * Find model by path, useful when location the parent by relativePath
+     * 
+     * @param path
+     * @return the matching model or {@code null}
+     * @since 3.7.0
+     */
+    public Model get( Path path )
-        pomFiles.put( new CacheKey( groupId, artifactId, version ), pomFile );
+        final Path pomFile;
+        if ( Files.isDirectory( path ) )
+        {
+            pomFile = path.resolve( "pom.xml" );
+        }
+        else
+        {
+            pomFile = path;
+        }
+        return modelsByPath.get( pomFile );
+    }
+    
+    private String getVersion( Model model )
+    {
+        String version = model.getVersion();
+        if ( version == null && model.getParent() != null )
+        {
+            version = model.getParent().getVersion();
+        }
+        return version;
-    private static final class CacheKey
+    static class Builder
+    {
+        private ReactorModelPool pool = new ReactorModelPool();
+        
+        Builder put( Path pomFile, Model model )
+        {
+            pool.modelsByPath.put( pomFile, model );
+            pool.modelsByGa.computeIfAbsent( new GAKey( getGroupId( model ), model.getArtifactId() ),
+                                             k -> new HashSet<Model>() ).add( model );
+            return this;
+        }
+        
+        ReactorModelPool build() 
+        {
+            return pool;
+        }
+
+        private static String getGroupId( Model model )
+        {
+            String groupId = model.getGroupId();
+            if ( groupId == null && model.getParent() != null )
+            {
+                groupId = model.getParent().getGroupId();
+            }
+            return groupId;
+        }
+    }
+
+    private static final class GAKey
-        private final String version;
-
-        CacheKey( String groupId, String artifactId, String version )
+        GAKey( String groupId, String artifactId )
-            this.version = ( version != null ) ? version : "";
-            int hash = 17;
-            hash = hash * 31 + this.groupId.hashCode();
-            hash = hash * 31 + this.artifactId.hashCode();
-            hash = hash * 31 + this.version.hashCode();
-            hashCode = hash;
+            hashCode = Objects.hash( this.groupId, this.artifactId );
-            if ( !( obj instanceof CacheKey ) )
-            {
-                return false;
-            }
+            GAKey that = (GAKey) obj;
-            CacheKey that = (CacheKey) obj;
-
-            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
-                && version.equals( that.version );
+            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId );
-            buffer.append( groupId ).append( ':' ).append( artifactId ).append( ':' ).append( version );
+            buffer.append( groupId ).append( ':' ).append( artifactId );
-
