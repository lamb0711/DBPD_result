Adding more context information to existing exceptions, cleaning up construction in exceptions, and adjusting the inheritance hierarchy for exceptions to make them make a little more sense for error reporting. Also, adding improved (but not complete, yet) reporting for BuildFailureExceptions and ProjectBuildingExceptions, with some tests to make sure pertinent information is in the output.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@592859 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.InvalidTaskException;
+import org.apache.maven.NoGoalsSpecifiedException;
+import org.apache.maven.ProjectCycleException;
+import org.apache.maven.artifact.InvalidRepositoryException;
+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.plugin.loader.PluginLoaderException;
+import org.apache.maven.profiles.activation.ProfileActivationException;
+import org.apache.maven.project.InvalidProjectVersionException;
+import org.apache.maven.project.artifact.InvalidDependencyVersionException;
+import java.util.List;
-    private static void buildErrorMessage( Exception e,
+    public static void buildErrorMessage( Exception e,
-            handled = handleBuildFailureException( (BuildFailureException) e, writer );
+            handled = handleBuildFailureException( (BuildFailureException) e,
+                                                   showStackTraces,
+                                                   writer );
-            handled = handleProjectBuildingException( (ProjectBuildingException) e, writer );
+            handled = handleProjectBuildingException( (ProjectBuildingException) e,
+                                                      showStackTraces,
+                                                      writer );
-            handled = handleDuplicateProjectException( (DuplicateProjectException) e, writer );
+            handled = handleDuplicateProjectException( (DuplicateProjectException) e,
+                                                       showStackTraces,
+                                                       writer );
-            handled = handleMavenExecutionException( (MavenExecutionException) e, writer );
+            handled = handleMavenExecutionException( (MavenExecutionException) e,
+                                                     showStackTraces,
+                                                     writer );
-            handleGenericException( e, writer );
+            handleGenericException( e, showStackTraces, writer );
+                                                          boolean showStackTraces,
-        writer.write( "While scanning for build extensions:" );
-        writer.write( NEWLINE );
-        writer.write( NEWLINE );
+
+        // =====================================================================
+        // Cases covered:
+        // =====================================================================
+        //
+        // MavenExecutionException(String, File, ProjectBuildingException)
+        // MavenExecutionException(String, ExtensionScanningException)
+        // MavenExecutionException(String, IOException)
+        //
+        // =====================================================================
+        // Cases left to cover:
+        // =====================================================================
+        //
+        // MavenExecutionException(String, ArtifactResolutionException)
+        // MavenExecutionException(String, File)
-                handleGenericException( cause, writer );
+                handleGenericException( cause, showStackTraces, writer );
+                writer.write( "While scanning for build extensions:" );
+                writer.write( NEWLINE );
+                writer.write( NEWLINE );
+
+                                                           showStackTraces,
-                    handleGenericException( cause, writer );
+                    handleGenericException( cause, showStackTraces, writer );
-                return handleProjectBuildingException( (ProjectBuildingException) cause, writer );
+                return handleProjectBuildingException( (ProjectBuildingException) cause,
+                                                       showStackTraces,
+                                                       writer );
+            }
+            else if ( cause instanceof ArtifactResolutionException )
+            {
+
+        else
+        {
-        return false;
+        }
+
+        if ( e.getPomFile() != null )
+        {
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "POM File: " );
+            writer.write( e.getPomFile().getAbsolutePath() );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+        }
+
+        return true;
+                                                            boolean showStackTraces,
+        // =====================================================================
+        // Cases covered:
+        // =====================================================================
+        //
+        // DuplicateProjectException(String, File, File, String)
+
+                                                boolean showStackTraces,
+
+        // =====================================================================
+        // Cases covered:
+        // =====================================================================
+        //
+        // LifecycleExecutionException(String, MavenProject, PluginNotFoundException)
+        //
+        // =====================================================================
+        // Cases left to cover:
+        // =====================================================================
+        //
+        // LifecycleExecutionException(String, MavenProject, ArtifactNotFoundException)
+        // LifecycleExecutionException(String, MavenProject, ArtifactResolutionException)
+        // LifecycleExecutionException(String, MavenProject, InvalidDependencyVersionException)
+        // LifecycleExecutionException(String, MavenProject, InvalidPluginException)
+        // LifecycleExecutionException(String, MavenProject, InvalidVersionSpecificationException)
+        // LifecycleExecutionException(String, MavenProject, LifecycleException)
+        // LifecycleExecutionException(String, MavenProject, MojoExecutionException)
+        // LifecycleExecutionException(String, MavenProject, PlexusContainerException)
+        // LifecycleExecutionException(String, MavenProject, PluginConfigurationException)
+        // LifecycleExecutionException(String, MavenProject, PluginLoaderException)
+        // LifecycleExecutionException(String, MavenProject, PluginManagerException)
+        // LifecycleExecutionException(String, MavenProject, PluginVersionNotFoundException)
+        // LifecycleExecutionException(String, MavenProject, PluginVersionResolutionException)
+
-                handleGenericException( artifactException, writer );
+                handleGenericException( artifactException, showStackTraces, writer );
+                                                           boolean showStackTraces,
+        // =====================================================================
+        // Cases covered:
+        // =====================================================================
+        //
+        // ProjectBuildingException(String, String, File, XmlPullParserException)
+        //
+        // ProjectBuildingException(String, String, IOException)
+        // ProjectBuildingException(String, String, File, IOException)
+        //
+        // ProjectBuildingException(String, String, ArtifactNotFoundException)
+        // ProjectBuildingException(String, String, File, ArtifactNotFoundException)
+        //
+        // ProjectBuildingException(String, String, ArtifactResolutionException)
+        // ProjectBuildingException(String, String, File, ArtifactResolutionException)
+        //
+        // ProjectBuildingException(String, String, File, ProfileActivationException)
+        //
+        // ProjectBuildingException(String, String, InvalidRepositoryException)
+        // ProjectBuildingException(String, String, File, InvalidRepositoryException)
+        //
+        // =====================================================================
+        // Subclass cases:
+        // =====================================================================
+        //
+        // InvalidProjectModelException(all)
+        // InvalidProjectVersionException(all)
+        // InvalidDependencyVersionException(all)
+
-        if ( cause instanceof XmlPullParserException )
-        {
-            writer.write( "Error parsing POM:" );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( cause.getMessage() );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "Line: " );
-            writer.write( "" + ( (XmlPullParserException) cause ).getLineNumber() );
-            writer.write( NEWLINE );
-            writer.write( "Column: " );
-            writer.write( "" + ( (XmlPullParserException) cause ).getColumnNumber() );
-
-            result = true;
-        }
-        else if ( e instanceof InvalidProjectModelException )
+        // Start by looking at whether we can handle the PBE as a specific sub-class of ProjectBuildingException...
+        if ( e instanceof InvalidProjectModelException )
+
-            writer.write( "The following POM validation errors occurred:" );
+            writer.write( NEWLINE );
+            writer.write( "The following POM validation errors were detected:" );
+        else if ( e instanceof InvalidDependencyVersionException )
+        {
+            writer.write( NEWLINE );
+            writer.write( "Your project declares a dependency with an invalid version." );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+
+            Dependency dep = ((InvalidDependencyVersionException)e).getDependency();
+            writer.write( "Dependency:" );
+            writer.write( NEWLINE );
+            writer.write( "Group-Id: " );
+            writer.write( dep.getGroupId() );
+            writer.write( NEWLINE );
+            writer.write( "Artifact-Id: " );
+            writer.write( dep.getArtifactId() );
+            writer.write( NEWLINE );
+            writer.write( "Version: " );
+            writer.write( dep.getVersion() );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+
+            writer.write( "Reason: " );
+            writer.write( cause.getMessage() );
+            writer.write( NEWLINE );
+
+            result = true;
+        }
+        // InvalidDependencyVersionException extends from InvalidProjectVersionException, so it comes first.
+        else if ( e instanceof InvalidProjectVersionException )
+        {
+            writer.write( NEWLINE );
+            writer.write( "You have an invalid version in your POM:" );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Location: " );
+            writer.write( ((InvalidProjectVersionException)e).getLocationInPom() );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Reason: " );
+            writer.write( cause.getMessage() );
+            writer.write( NEWLINE );
+
+            result = true;
+        }
+        // now that we've sorted through all the sub-classes of ProjectBuildingException,
+        // let's look at causes of a basic PBE instance.
+        else if ( ( cause instanceof ArtifactNotFoundException )
+                  || ( cause instanceof ArtifactResolutionException ) )
+        {
+            writer.write( NEWLINE );
+            writer.write( e.getMessage() );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Reason: " );
+            writer.write( cause.getMessage() );
+            writer.write( NEWLINE );
+
+            result = true;
+        }
+        else if ( cause instanceof ProfileActivationException )
+        {
+            writer.write( NEWLINE );
+            writer.write( "Profile activation failed. One or more named profile activators may be missing." );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Reason: " );
+            writer.write( cause.getMessage() );
+            writer.write( NEWLINE );
+
+            result = true;
+        }
+        else if ( cause instanceof IOException )
+        {
+            writer.write( NEWLINE );
+            if ( e.getPomFile() == null )
+            {
+                writer.write( "Error reading built-in super POM!" );
+            }
+            else
+            {
+                writer.write( "Error reading POM." );
+            }
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( cause.getMessage() );
+            writer.write( NEWLINE );
+        }
+        else if ( cause instanceof XmlPullParserException )
+        {
+            writer.write( NEWLINE );
+            if ( e.getPomFile() == null )
+            {
+                writer.write( "Error parsing built-in super POM!" );
+            }
+            else
+            {
+                writer.write( "Error parsing POM." );
+            }
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( cause.getMessage() );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Line: " );
+            writer.write( "" + ( (XmlPullParserException) cause ).getLineNumber() );
+            writer.write( NEWLINE );
+            writer.write( "Column: " );
+            writer.write( "" + ( (XmlPullParserException) cause ).getColumnNumber() );
+            writer.write( NEWLINE );
+
+            result = true;
+        }
+        else if ( cause instanceof InvalidRepositoryException )
+        {
+            writer.write( NEWLINE );
+            writer.write( "You have an invalid repository/pluginRepository declaration in your POM:" );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Repository-Id: " );
+            writer.write( ((InvalidRepositoryException)cause).getRepositoryId() );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Reason: " );
+            writer.write( cause.getMessage() );
+            writer.write( NEWLINE );
+
+            result = true;
+        }
-        writer.write( "Project File: " );
-        writer.write( e.getPomLocation() );
+        if ( e.getPomFile() == null )
+        {
+            writer.write( "Source: Super POM (implied root ancestor of all Maven POMs)" );
+        }
+        else
+        {
+            writer.write( "Project File: " );
+            writer.write( e.getPomFile().getAbsolutePath() );
+        }
+                                                        boolean showStackTraces,
-        if ( e instanceof AggregatedBuildFailureException )
+        // =====================================================================
+        // Cases covered (listed exceptions extend BuildFailureException):
+        // =====================================================================
+        //
+        // AggregatedBuildFailureException(String, MojoBinding, MojoFailureException)
+        //
+        // InvalidTaskException(TaskValidationResult, LifecycleLoaderException)
+        // InvalidTaskException(TaskValidationResult, LifecycleSpecificationException)
+        // InvalidTaskException(TaskValidationResult, PluginLoaderException)
+        //
+        // NoGoalsSpecifiedException(String)
+        //
+        // ProjectBuildFailureException(String, MojoBinding, MojoFailureException)
+        //
+        // ProjectCycleException(List, String, CycleDetectedException)
+
+        if ( e instanceof NoGoalsSpecifiedException )
+            writer.write( NEWLINE );
+            writer.write( "You have not specified any goals or lifecycle phases for Maven to execute." );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Please, either specify a goal or lifecycle phase on the command line" );
+            writer.write( NEWLINE );
+            writer.write( "(you may want to try \'package\' to get started), or configure the " );
+            writer.write( NEWLINE );
+            writer.write( "<defaultGoal/> element in the build section of your project POM." );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "NOTE: You can also chain multiple goals/phases together, as in the following example:" );
+            writer.write( NEWLINE );
+            writer.write( "mvn clean package" );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "For more information about which goals and phases are available, see the following:" );
+            writer.write( NEWLINE );
+            writer.write( "- Maven in 5 Minutes guide (http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)" );
+            writer.write( NEWLINE );
+            writer.write( "- Maven User's documentation (http://maven.apache.org/users/)" );
+            writer.write( NEWLINE );
+            writer.write( "- Maven Plugins page (http://maven.apache.org/plugins/)" );
+            writer.write( NEWLINE );
+            writer.write( "- CodeHaus Mojos Project page (http://mojo.codehaus.org/plugins.html)" );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+
+            return true;
+        }
+        else if ( e instanceof AggregatedBuildFailureException )
+        {
+            writer.write( NEWLINE );
-
+            writer.write( NEWLINE );
+        else if ( e instanceof InvalidTaskException )
+        {
+            String task = ( (InvalidTaskException) e ).getTask();
+            Throwable cause = e.getCause();
+
+            writer.write( NEWLINE );
+            writer.write( "Invalid mojo or lifecycle phase: " );
+            writer.write( task );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+
+            if ( cause instanceof PluginLoaderException )
+            {
+                writer.write( "Failed to load plugin: " );
+                writer.write( ( (PluginLoaderException) cause ).getPluginKey() );
+                writer.write( NEWLINE );
+                writer.write( NEWLINE );
+            }
+            else
+            {
+                writer.write( "Error message was: " );
+                writer.write( e.getMessage() );
+                writer.write( NEWLINE );
+                writer.write( NEWLINE );
+
+            }
+
+            if ( showStackTraces )
+            {
+                writer.write( "Original error:" );
+                writer.write( NEWLINE );
+                writer.write( NEWLINE );
+                handleGenericException( cause, showStackTraces, writer );
+            }
+            else
+            {
+                writer.write( "Original error message was: " );
+                writer.write( cause.getMessage() );
+                writer.write( NEWLINE );
+                writer.write( NEWLINE );
+            }
+
+            return true;
+        }
+        else if ( e instanceof ProjectCycleException )
+        {
+            writer.write( NEWLINE );
+            writer.write( "Maven has detected a cyclic relationship among a set of projects in the current build." );
+            writer.write( NEWLINE );
+            writer.write( "The projects involved are:" );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+
+            List projects = ( (ProjectCycleException) e ).getProjects();
+            for ( Iterator it = projects.iterator(); it.hasNext(); )
+            {
+                MavenProject project = (MavenProject) it.next();
+                writer.write( "- " );
+                writer.write( project.getId() );
+                writer.write( " (path: " );
+                writer.write( project.getFile().getPath() );
+                writer.write( ")" );
+                writer.write( NEWLINE );
+            }
+
+            writer.write( NEWLINE );
+            writer.write( "NOTE: This cycle usually indicates two projects listing one another as dependencies, but" );
+            writer.write( NEWLINE );
+            writer.write( "may also indicate one project using another as a parent, plugin, or extension." );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+
+            if ( showStackTraces )
+            {
+                writer.write( "Original error:" );
+                writer.write( NEWLINE );
+                writer.write( NEWLINE );
+
+                handleGenericException( ( (ProjectCycleException) e ).getCause(),
+                                        showStackTraces,
+                                        writer );
+
+                writer.write( NEWLINE );
+                writer.write( NEWLINE );
+            }
+
+            return true;
+        }
