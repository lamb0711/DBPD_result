utilise the container for populating all mojo configuration, including expressions


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163947 13f79535-47bb-0310-9956-ffa450edef68

-/* ====================================================================
- *   Copyright 2001-2004 The Apache Software Foundation.
+/*
+ * Copyright 2001-2005 The Apache Software Foundation.
- *   Licensed under the Apache License, Version 2.0 (the "License");
- *   you may not use this file except in compliance with the License.
- *   You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
- *   Unless required by applicable law or agreed to in writing, software
- *   distributed under the License is distributed on an "AS IS" BASIS,
- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *   See the License for the specific language governing permissions and
- *   limitations under the License.
- * ====================================================================
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import org.apache.maven.project.MavenProject;
+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;
+ * @todo belong in MavenSession, so it only gets created once?
+    implements ExpressionEvaluator
-    public static Object evaluate( String expression, MavenSession context )
-        throws PluginConfigurationException
+    private final MavenSession context;
+
+    public PluginParameterExpressionEvaluator( MavenSession context )
+    {
+        this.context = context;
+    }
+
+    public Object evaluate( String expression )
+        throws ExpressionEvaluationException
-                throw new PluginConfigurationException( "Cannot lookup component: " + role + ".", e );
+                throw new ExpressionEvaluationException( "Cannot lookup component: " + role + ".", e );
-            value = context.getProject().getModel().getBuild().getFinalName();
+            value = context.getProject().getBuild().getFinalName();
-                    value = getValue( expression.substring( 1, pathSeparator ), context.getProject() ) +
-                        expression.substring( pathSeparator );
+                    String pathExpression = expression.substring( 1, pathSeparator );
+                    value = ReflectionValueExtractor.evaluate( pathExpression, context.getProject() );
+                    value = value + expression.substring( pathSeparator );
-                    value = getValue( expression.substring( 1 ), context.getProject() );
+                    value = ReflectionValueExtractor.evaluate( expression.substring( 1 ), context.getProject() );
-                throw new PluginConfigurationException( "Error evaluating plugin parameter expression: " + expression,
-                                                        e );
+                // TODO: don't catch exception
+                throw new ExpressionEvaluationException( "Error evaluating plugin parameter expression: " + expression,
+                                                         e );
-                val = val.substring( 0, sharpSeparator ) + evaluate( val.substring( sharpSeparator ), context );
+                val = val.substring( 0, sharpSeparator ) + evaluate( val.substring( sharpSeparator ) );
-                value = evaluate( val.substring( sharpSeparator ), context );
+                value = evaluate( val.substring( sharpSeparator ) );
-    private static Object getValue( String expression, MavenProject project )
-        throws Exception
-    {
-        return ReflectionValueExtractor.evaluate( expression, project );
-    }
