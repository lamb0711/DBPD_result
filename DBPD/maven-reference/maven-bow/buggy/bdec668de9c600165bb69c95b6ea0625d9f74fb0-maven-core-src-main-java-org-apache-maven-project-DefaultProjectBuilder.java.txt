[MNG-6656] Introduce base for build/consumer pom

+import java.nio.file.Path;
+import org.apache.maven.feature.Features;
+import org.apache.maven.model.building.ArtifactModelSource;
+import org.apache.maven.model.building.TransformerContext;
+        request.setTransformerContext( (TransformerContext) config.session.getData().get( TransformerContext.KEY ) );
-        return build( localProject ? pomFile : null, new FileModelSource( pomFile ), config );
+        if ( localProject )
+        {
+            return build( pomFile, new FileModelSource( pomFile ), config );
+        }
+        else
+        {
+            return build( null, new ArtifactModelSource( pomFile, artifact.getGroupId(), artifact.getArtifactId(),
+                                                         artifact.getVersion() ),
+                          config );
+        }
-        ReactorModelPool modelPool = new ReactorModelPool();
+        ReactorModelPool.Builder poolBuilder = new ReactorModelPool.Builder();
+        final ReactorModelPool modelPool = poolBuilder.build();
+        
+        if ( Features.buildConsumer().isActive() )
+        {
+            final TransformerContext context = new TransformerContext()
+            {
+                @Override
+                public String getUserProperty( String key )
+                {
+                    return request.getUserProperties().getProperty( key );
+                }
+    
+                @Override
+                public Model getRawModel( Path p )
+                {
+                    return modelPool.get( p );
+                }
+    
+                @Override
+                public Model getRawModel( String groupId, String artifactId )
+                {
+                    return modelPool.get( groupId, artifactId, null );
+                }
+            };
+            request.getRepositorySession().getData().set( TransformerContext.KEY, context );
+        }
-                   config );
-
-        populateReactorModelPool( modelPool, interimResults );
+                   config, poolBuilder );
-                           boolean isRoot, boolean recursive, InternalConfig config )
+                           boolean root, boolean recursive, InternalConfig config,
+                           ReactorModelPool.Builder poolBuilder )
-            if ( !build( results, interimResults, projectIndex, pomFile, aggregatorFiles, isRoot, recursive, config ) )
+            if ( !build( results, interimResults, projectIndex, pomFile, aggregatorFiles, root, recursive, config,
+                         poolBuilder ) )
-                           boolean isRoot, boolean recursive, InternalConfig config )
+                           boolean isRoot, boolean recursive, InternalConfig config,
+                           ReactorModelPool.Builder poolBuilder )
+        
+        poolBuilder.put( model.getPomFile().toPath(),  result.getRawModel() );
+        
-                         recursive, config ) )
+                         recursive, config, poolBuilder ) )
-    private void populateReactorModelPool( ReactorModelPool reactorModelPool, List<InterimResult> interimResults )
-    {
-        for ( InterimResult interimResult : interimResults )
-        {
-            Model model = interimResult.result.getEffectiveModel();
-            reactorModelPool.put( model.getGroupId(), model.getArtifactId(), model.getVersion(), model.getPomFile() );
-
-            populateReactorModelPool( reactorModelPool, interimResult.modules );
-        }
-    }
-
-                    ArtifactRepository repo = repositorySystem.buildArtifactRepository( r );
+                    ArtifactRepository repo = MavenRepositorySystem.buildArtifactRepository( r );
-                    ArtifactRepository repo = repositorySystem.buildArtifactRepository( r );
+                    ArtifactRepository repo = MavenRepositorySystem.buildArtifactRepository( r );
