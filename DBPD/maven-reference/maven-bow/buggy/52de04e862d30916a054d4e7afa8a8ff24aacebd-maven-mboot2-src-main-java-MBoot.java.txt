Retrying commit after updating maven-core to HEAD.

o Fixed problems with plugin-plugin (had to do with refactored plugin-tools stuff)
o Added marmalade-mojo support, although without an integration test (verified it doesn't get in the way of 'normal' functionality, though)
o Added code in mboot2 to copy marmalade-mojo support libs to ${maven.home}/lib


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163405 13f79535-47bb-0310-9956-ffa450edef68

-    
-    String[] bootstrapDeps = new String[]
-    {
+
+    String[] bootstrapDeps = new String[] {
-        "qdox/jars/qdox-1.2.jar"
-    };
+        "qdox/jars/qdox-1.2.jar" };
-    String[] plexusDeps = new String[]
-    {
+    String[] plexusDeps = new String[] {
+        "plexus/jars/plexus-container-default-1.0-alpha-2-SNAPSHOT.jar", };
+
+    String[] pluginGeneratorDeps = new String[] {
-        //"plexus/jars/plexus-container-api-1.0-alpha-1-SNAPSHOT.jar",
-        //"plexus/jars/plexus-utils-1.0-alpha-1-SNAPSHOT.jar"
-    };
-    
-    String[] pluginGeneratorDeps = new String[]{
-        "plexus/jars/plexus-container-default-1.0-alpha-2-SNAPSHOT.jar",
-        "classworlds/jars/classworlds-1.1-SNAPSHOT.jar",
-        "maven/jars/maven-artifact-2.0-SNAPSHOT.jar",
-        "maven/jars/maven-plugin-tools-pluggy-2.0-SNAPSHOT.jar",
-        "maven/jars/wagon-provider-api-1.0-alpha-2-SNAPSHOT.jar",
-        "maven/jars/wagon-file-1.0-alpha-2-SNAPSHOT.jar",
-        "maven/jars/wagon-http-lightweight-1.0-alpha-2-SNAPSHOT.jar"
-    };
+        "maven/jars/maven-plugin-tools-pluggy-2.0-SNAPSHOT.jar" };
+
+    String[] mojoSupportDeps = new String[] {
+        "marmalade/jars/marmalade-core-1.0-alpha2-SNAPSHOT.jar",
+        "plexus/jars/plexus-marmalade-factory-1.0-alpha-2-SNAPSHOT.jar",
+        "maven/jars/maven-script-marmalade-2.0-SNAPSHOT.jar", };
-    String[] modelloDeps = new String[]
-    {
+    String[] modelloDeps = new String[] {
-        "modello/jars/modello-xpp3-plugin-1.0-SNAPSHOT.jar"
-    };
+        "modello/jars/modello-xpp3-plugin-1.0-SNAPSHOT.jar" };
-    String[] builds = new String[]
-    {
+    String[] builds = new String[] {
-//        "maven-script/maven-script-marmalade",
+        "maven-script/maven-script-marmalade",
-//        "maven-plugin-tools/maven-plugin-tools-marmalade",
-        "maven-core-it-verifier"
-    };
+        "maven-plugin-tools/maven-plugin-tools-marmalade",
+        "maven-core-it-verifier" };
-    String[] pluginBuilds = new String[]
-    {
+    String[] pluginBuilds = new String[] {
-        "maven-plugins/maven-surefire-plugin"
-    };
-
+        "maven-plugins/maven-surefire-plugin" };
-    public static void main( String[] args )
-        throws Exception
+    public static void main( String[] args ) throws Exception
-    public void run( String[] args )
-        throws Exception
+    public void run( String[] args ) throws Exception
-        
+
-
-                //d.artifactId.equals( "plexus-container-api" ) ||
+            //d.artifactId.equals( "plexus-container-api" ) ||
+        // Copy in deps used for non-java mojo support.
+        for ( int i = 0; i < mojoSupportDeps.length; i++ )
+        {
+            FileUtils.copyFileToDirectory( repoLocal + "/" + mojoSupportDeps[i], lib );
+        }
+
-    public void buildProject( String basedir )
-        throws Exception
+    public void buildProject( String basedir ) throws Exception
-            //generateSources( model.getAbsolutePath(), "java", generatedSources, "3.0.0", "true" );
+            //generateSources( model.getAbsolutePath(), "java",
+            // generatedSources, "3.0.0", "true" );
-            //generateSources( model.getAbsolutePath(), "xpp3-reader", generatedSources, "3.0.0", "true" );
+            //generateSources( model.getAbsolutePath(), "xpp3-reader",
+            // generatedSources, "3.0.0", "true" );
-            //generateSources( model.getAbsolutePath(), "xpp3-writer", generatedSources, "3.0.0", "true" );
+            //generateSources( model.getAbsolutePath(), "xpp3-writer",
+            // generatedSources, "3.0.0", "true" );
-            //generateSources( model.getAbsolutePath(), "xdoc", generatedDocs, "3.0.0", "true" );
+            //generateSources( model.getAbsolutePath(), "xdoc", generatedDocs,
+            // "3.0.0", "true" );
-    private void createToolsClassLoader()
-        throws Exception
+    private void createToolsClassLoader() throws Exception
-                throw new FileNotFoundException( "Missing dependency: " + dependency +
-                                                 ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
+                throw new FileNotFoundException( "Missing dependency: " + dependency
+                    + (!online ? "; run again online" : "; there was a problem downloading it earlier") );
-    
+
-        for ( int i=0; i<pluginGeneratorDeps.length; i++ )
+        for ( int i = 0; i < pluginGeneratorDeps.length; i++ )
-                throw new FileNotFoundException( "Missing dependency: " + dependency +
-                                                 ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
+                throw new FileNotFoundException( "Missing dependency: " + dependency
+                    + (!online ? "; run again online" : "; there was a problem downloading it earlier") );
-        Class cls = cl.loadClass("org.apache.maven.tools.plugin.pluggy.Main");
-        
-        Method m = cls.getMethod( "main", new Class[]{String[].class} );
-        
-        String[] args = {
-            "descriptor", sourceDirectory, outputDirectory, pom, repoLocal
-        };
-        
-        m.invoke( null, new Object[]{args} );
+        Class cls = cl.loadClass( "org.apache.maven.tools.plugin.pluggy.Main" );
+
+        Method m = cls.getMethod( "main", new Class[] { String[].class } );
+
+        String[] args = { "descriptor", sourceDirectory, outputDirectory, pom, repoLocal };
+
+        m.invoke( null, new Object[] { args } );
-                throw new FileNotFoundException( "Missing dependency: " + dependency +
-                                                 ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
+                throw new FileNotFoundException( "Missing dependency: " + dependency
+                    + (!online ? "; run again online" : "; there was a problem downloading it earlier") );
-        Method m = c.getMethod( "main", new Class[]{String[].class} );
+        Method m = c.getMethod( "main", new Class[] { String[].class } );
-        String[] args = new String[]{model, mode, dir, modelVersion, packageWithVersion};
+        String[] args = new String[] { model, mode, dir, modelVersion, packageWithVersion };
-        m.invoke( generator, new Object[]{args} );
+        m.invoke( generator, new Object[] { args } );
-    private void checkMBootDeps()
-        throws Exception
+    private void checkMBootDeps() throws Exception
-    private void createJar( String classes, String buildDir )
-        throws Exception
+    private void createJar( String classes, String buildDir ) throws Exception
-    private void installPomFile( String repoLocal, File pomIn )
-        throws Exception
+    private void installPomFile( String repoLocal, File pomIn ) throws Exception
-    private void installPom( String basedir, String repoLocal )
-        throws Exception
+    private void installPom( String basedir, String repoLocal ) throws Exception
-    private void installJar( String basedir, String repoLocal )
-        throws Exception
+    private void installJar( String basedir, String repoLocal ) throws Exception
-    private void installPlugin( String basedir, String repoLocal )
-        throws Exception
+    private void installPlugin( String basedir, String repoLocal ) throws Exception
-    private void runTests( String basedir, String classes, String testClasses )
-        throws Exception
+    private void runTests( String basedir, String classes, String testClasses ) throws Exception
-        boolean success = testRunner.execute( repoLocal, basedir, classes, testClasses, includes, excludes, classpath( reader.getDependencies(), null ) );
+        boolean success = testRunner.execute( repoLocal,
+                                              basedir,
+                                              classes,
+                                              testClasses,
+                                              includes,
+                                              excludes,
+                                              classpath( reader.getDependencies(), null ) );
-    private void downloadDependencies( List dependencies )
-        throws Exception
+    private void downloadDependencies( List dependencies ) throws Exception
-    private void compile( List dependencies,
-                          String sourceDirectory,
-                          String outputDirectory,
-                          String extraClasspath,
-                          String generatedSources )
-        throws Exception
+    private void compile( List dependencies, String sourceDirectory, String outputDirectory, String extraClasspath,
+        String generatedSources ) throws Exception
-                sourceDirectories = new String[]{sourceDirectory, generatedSources};
+                sourceDirectories = new String[] { sourceDirectory, generatedSources };
-                sourceDirectories = new String[]{generatedSources};
+                sourceDirectories = new String[] { generatedSources };
-                sourceDirectories = new String[]{sourceDirectory};
+                sourceDirectories = new String[] { sourceDirectory };
-            
-            compilerConfiguration.setOutputLocation(outputDirectory);
-            compilerConfiguration.setClasspathEntries(Arrays.asList(classpath( dependencies, extraClasspath )));
-            compilerConfiguration.setSourceLocations(Arrays.asList(sourceDirectories));
-            
+
+            compilerConfiguration.setOutputLocation( outputDirectory );
+            compilerConfiguration.setClasspathEntries( Arrays.asList( classpath( dependencies, extraClasspath ) ) );
+            compilerConfiguration.setSourceLocations( Arrays.asList( sourceDirectories ) );
+
-            List messages = compiler.compile(compilerConfiguration);
+            List messages = compiler.compile( compilerConfiguration );
-    private void copyResources( String sourceDirectory, String destinationDirectory )
-        throws Exception
+    private void copyResources( String sourceDirectory, String destinationDirectory ) throws Exception
-        public void endElement( String uri, String localName, String rawName )
-            throws SAXException
+        public void endElement( String uri, String localName, String rawName ) throws SAXException
-                f = new File( downloader.getMavenRepoLocal(), parentGroupId + "/poms/" + parentArtifactId + "-" + parentVersion + ".pom" );
+                f = new File( downloader.getMavenRepoLocal(), parentGroupId + "/poms/" + parentArtifactId + "-"
+                    + parentVersion + ".pom" );
-            System.err.println( type + " [line " + spe.getLineNumber() +
-                                ", row " + spe.getColumnNumber() + "]: " +
-                                spe.getMessage() );
+            System.err.println( type + " [line " + spe.getLineNumber() + ", row " + spe.getColumnNumber() + "]: "
+                + spe.getMessage() );
-            if ( isValid( getGroupId() )
-                && isValid( getArtifactId() ) )
+            if ( isValid( getGroupId() ) && isValid( getArtifactId() ) )
-            if ( value != null
-                && value.trim().equals( "" ) == false )
+            if ( value != null && value.trim().equals( "" ) == false )
-}
+}
