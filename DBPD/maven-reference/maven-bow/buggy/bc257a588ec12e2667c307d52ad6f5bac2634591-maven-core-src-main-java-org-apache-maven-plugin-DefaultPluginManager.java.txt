o fixes for projects which specify plugins that define system scoped plugin override dependencies


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779825 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
-    private Set<Artifact> getPluginArtifacts( Artifact pluginArtifact, Plugin pluginAsSpecifiedinPom, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+    // TODO: Turn this into a component so it can be tested.
+    //
+    Set<Artifact> getPluginArtifacts( Artifact pluginArtifact, Plugin pluginAsSpecifiedInPom, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        for( Dependency dependencySpecifiedInProject : pluginAsSpecifiedinPom.getDependencies() )
+        for( Dependency dependencySpecifiedInProject : pluginAsSpecifiedInPom.getDependencies() )
-            dependenciesToResolveForPlugin.add( repositorySystem.createDependencyArtifact( dependencySpecifiedInProject ) );
+            // Right now if you add override dependencies they will not be operated on by the metadata source. The metadata source first grabs the plugins
+            // defined dependencies and then the result is merged with the overrides. The overrides don't pass through the metadata source which is where the
+            // Artifact.setFile( file ) method is called. We should eventually take care of this in the resolver.
+            Artifact a = repositorySystem.createDependencyArtifact( dependencySpecifiedInProject );
+            if ( a.getScope().equals(  Artifact.SCOPE_SYSTEM ) )
+            {
+                a.setFile( new File( dependencySpecifiedInProject.getSystemPath() ) );
+            }
+            dependenciesToResolveForPlugin.add( a );                            
+            //.setResolveRoot( false );
-    private String constructPluginKey( Plugin plugin )
+    public String constructPluginKey( Plugin plugin )
-    private String constructPluginKey( PluginDescriptor pluginDescriptor )
+    public String constructPluginKey( PluginDescriptor pluginDescriptor )
