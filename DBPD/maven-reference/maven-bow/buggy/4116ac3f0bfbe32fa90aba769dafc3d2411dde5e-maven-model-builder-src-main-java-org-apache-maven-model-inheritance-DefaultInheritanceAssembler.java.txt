o Decoupled calculation of child path adjustment from filesystem which would make the effective model depend on the user's environment and breaks with our goal of reproducible builds

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773047 13f79535-47bb-0310-9956-ffa450edef68

-    public void assembleModelInheritance( Model child, Model parent, String childPathAdjustment )
+    public void assembleModelInheritance( Model child, Model parent )
-        hints.put( MavenModelMerger.CHILD_PATH_ADJUSTMENT, childPathAdjustment );
+        hints.put( MavenModelMerger.CHILD_PATH_ADJUSTMENT, getChildPathAdjustment( child, parent ) );
+    /**
+     * Calculates the relative path from the base directory of the parent to the parent directory of the base directory
+     * of the child. The general idea is to adjust inherited URLs to match the project layout (in SCM). This calculation
+     * is only a heuristic based on our conventions. In detail, the algo relies on the following assumptions. The parent
+     * uses aggregation and refers to the child via the modules section. The module path to the child is considered to
+     * point at the POM rather than its base directory if the path ends with ".xml" (ignoring case). The name of the
+     * child's base directory matches the artifact id of the child. Note that for the sake of independence from the user
+     * environment, the filesystem is intentionally not used for the calculation.
+     * 
+     * @param child The child model, must not be <code>null</code>.
+     * @param parent The parent model, may be <code>null</code>.
+     * @return The path adjustment, can be empty but never <code>null</code>.
+     */
+    private String getChildPathAdjustment( Model child, Model parent )
+    {
+        String adjustment = "";
+
+        if ( parent != null )
+        {
+            String childArtifactId = child.getArtifactId();
+
+            for ( String module : parent.getModules() )
+            {
+                module = module.replace( '\\', '/' );
+
+                if ( module.regionMatches( true, module.length() - 4, ".xml", 0, 4 ) )
+                {
+                    module = module.substring( 0, module.lastIndexOf( '/' ) + 1 );
+                }
+
+                String moduleName = module;
+                if ( moduleName.endsWith( "/" ) )
+                {
+                    moduleName = moduleName.substring( 0, moduleName.length() - 1 );
+                }
+
+                int lastSlash = moduleName.lastIndexOf( '/' );
+
+                moduleName = moduleName.substring( lastSlash + 1 );
+
+                if ( moduleName.equals( childArtifactId ) && lastSlash >= 0 )
+                {
+                    adjustment = module.substring( 0, lastSlash );
+                    break;
+                }
+            }
+        }
+
+        return adjustment;
+    }
+
