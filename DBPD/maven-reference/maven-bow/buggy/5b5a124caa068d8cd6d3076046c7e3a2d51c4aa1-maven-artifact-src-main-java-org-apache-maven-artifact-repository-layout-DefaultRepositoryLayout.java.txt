o Updated the repo layout classes to use direct string concatenation rather than StringUtils.replace() which is not useful because the layout is non-varying.
o Repoclean still not working with the new artifact/artifactmetadata stuff...the above modifications to the repo layout classes was primarily meant to improve performance when using repoclean.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163736 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.handler.ArtifactHandler;
+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;
+import org.apache.maven.artifact.handler.manager.ArtifactHandlerNotFoundException;
+import org.apache.maven.artifact.metadata.ArtifactMetadata;
+
-    extends AbstractArtifactRepositoryLayout
+    implements ArtifactRepositoryLayout
-    protected String layoutPattern()
+    private ArtifactHandlerManager artifactHandlerManager;
+
+    public String pathOf( Artifact artifact )
+        throws ArtifactPathFormatException
-        return "${groupPath}/${artifactId}/${baseVersion}/${artifactId}-${version}-${classifier}.${extension}";
+        ArtifactHandler artifactHandler = null;
+        try
+        {
+            // TODO: this is a poor excuse to have this method throwing an exception. Validate the artifact first, perhaps associate the handler with it
+            artifactHandler = artifactHandlerManager.getArtifactHandler( artifact.getType() );
+        }
+        catch ( ArtifactHandlerNotFoundException e )
+        {
+            throw new ArtifactPathFormatException( "Cannot find ArtifactHandler for artifact: \'" + artifact.getId()
+                + "\'.", e );
+        }
+
+        StringBuffer path = new StringBuffer();
+
+        path.append( artifact.getGroupId().replace( '.', '/' ) ).append( '/' );
+        path.append( artifact.getArtifactId() ).append( '/' );
+        path.append( artifact.getBaseVersion() ).append( '/' );
+        path.append( artifact.getArtifactId() ).append( '-' ).append( artifact.getVersion() );
+
+        if ( artifact.hasClassifier() )
+        {
+            path.append( '-' ).append( artifact.getClassifier() );
+        }
+
+        path.append( '.' ).append( artifactHandler.extension() );
+
+        return path.toString();
-    protected String metadataLayoutPattern()
+    public String pathOfMetadata( ArtifactMetadata metadata )
+        throws ArtifactPathFormatException
-        return "${groupPath}/${artifactId}/${baseVersion}/${metadataFilename}";
-    }
+        Artifact artifact = metadata.getArtifact();
-    protected String groupIdAsPath( String groupId )
-    {
-        return groupId.replace( '.', '/' );
+        ArtifactHandler artifactHandler = null;
+
+        try
+        {
+            // TODO: this is a poor excuse to have this method throwing an exception. Validate the artifact first, perhaps associate the handler with it
+            artifactHandler = artifactHandlerManager.getArtifactHandler( artifact.getType() );
+        }
+        catch ( ArtifactHandlerNotFoundException e )
+        {
+            throw new ArtifactPathFormatException( "Cannot find ArtifactHandler for artifact: \'" + artifact.getId()
+                + "\'.", e );
+        }
+
+        StringBuffer path = new StringBuffer();
+
+        path.append( artifact.getGroupId().replace( '.', '/' ) ).append( '/' );
+        path.append( artifact.getArtifactId() ).append( '/' );
+        path.append( artifact.getBaseVersion() ).append( '/' );
+        path.append( metadata.getFilename() );
+
+        return path.toString();
