o Refactored model validator to use problem collector

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@800451 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.building.ModelProblemCollector;
-    public ModelValidationResult validateRawModel( Model model, ModelBuildingRequest request )
+    public void validateRawModel( Model model, ModelBuildingRequest request, ModelProblemCollector problems )
-        ModelValidationResult result = new ModelValidationResult();
-
-            validateStringNotEmpty( "parent.groupId", result, false, parent.getGroupId() );
+            validateStringNotEmpty( "parent.groupId", problems, false, parent.getGroupId() );
-            validateStringNotEmpty( "parent.artifactId", result, false, parent.getArtifactId() );
+            validateStringNotEmpty( "parent.artifactId", problems, false, parent.getArtifactId() );
-            validateStringNotEmpty( "parent.version", result, false, parent.getVersion() );
+            validateStringNotEmpty( "parent.version", problems, false, parent.getVersion() );
-                addViolation( result, false, "The parent element cannot have the same ID as the project." );
+                addViolation( problems, false, "The parent element cannot have the same ID as the project." );
-            validateDependencies( result, model.getDependencies(), "dependencies.dependency", request );
+            validateDependencies( problems, model.getDependencies(), "dependencies.dependency", request );
-                validateDependencies( result, model.getDependencyManagement().getDependencies(),
+                validateDependencies( problems, model.getDependencyManagement().getDependencies(),
-            validateRepositories( result, model.getRepositories(), "repositories.repository", request );
+            validateRepositories( problems, model.getRepositories(), "repositories.repository", request );
-            validateRepositories( result, model.getPluginRepositories(), "pluginRepositories.pluginRepository", request );
+            validateRepositories( problems, model.getPluginRepositories(), "pluginRepositories.pluginRepository", request );
-                validateDependencies( result, profile.getDependencies(), "profiles.profile[" + profile.getId()
+                validateDependencies( problems, profile.getDependencies(), "profiles.profile[" + profile.getId()
-                    validateDependencies( result, profile.getDependencyManagement().getDependencies(),
+                    validateDependencies( problems, profile.getDependencyManagement().getDependencies(),
-                validateRepositories( result, profile.getRepositories(), "profiles.profile[" + profile.getId()
+                validateRepositories( problems, profile.getRepositories(), "profiles.profile[" + profile.getId()
-                validateRepositories( result, profile.getPluginRepositories(), "profiles.profile[" + profile.getId()
+                validateRepositories( problems, profile.getPluginRepositories(), "profiles.profile[" + profile.getId()
-
-        return result;
-    public ModelValidationResult validateEffectiveModel( Model model, ModelBuildingRequest request )
+    public void validateEffectiveModel( Model model, ModelBuildingRequest request, ModelProblemCollector problems )
-        ModelValidationResult result = new ModelValidationResult();
+        validateStringNotEmpty( "modelVersion", problems, false, model.getModelVersion() );
-        validateStringNotEmpty( "modelVersion", result, false, model.getModelVersion() );
+        validateId( "groupId", problems, model.getGroupId() );
-        validateId( "groupId", result, model.getGroupId() );
+        validateId( "artifactId", problems, model.getArtifactId() );
-        validateId( "artifactId", result, model.getArtifactId() );
-
-        validateStringNotEmpty( "packaging", result, false, model.getPackaging() );
+        validateStringNotEmpty( "packaging", problems, false, model.getPackaging() );
-            addViolation( result, false, "Packaging '" + model.getPackaging() + "' is invalid. Aggregator projects " +
+            addViolation( problems, false, "Packaging '" + model.getPackaging() + "' is invalid. Aggregator projects " +
-                addViolation( result, false, "The parent element cannot have the same ID as the project." );
+                addViolation( problems, false, "The parent element cannot have the same ID as the project." );
-        validateStringNotEmpty( "version", result, false, model.getVersion() );
+        validateStringNotEmpty( "version", problems, false, model.getVersion() );
-            validateId( "dependencies.dependency.artifactId", result, d.getArtifactId() );
+            validateId( "dependencies.dependency.artifactId", problems, d.getArtifactId() );
-            validateId( "dependencies.dependency.groupId", result, d.getGroupId() );
+            validateId( "dependencies.dependency.groupId", problems, d.getGroupId() );
-            validateStringNotEmpty( "dependencies.dependency.type", result, false, d.getType(), d.getManagementKey() );
+            validateStringNotEmpty( "dependencies.dependency.type", problems, false, d.getType(), d.getManagementKey() );
-            validateStringNotEmpty( "dependencies.dependency.version", result, false, d.getVersion(),
+            validateStringNotEmpty( "dependencies.dependency.version", problems, false, d.getVersion(),
-                    addViolation( result, false, "For dependency " + d + ": system-scoped dependency must specify systemPath." );
+                    addViolation( problems, false, "For dependency " + d + ": system-scoped dependency must specify systemPath." );
-                        addViolation( result, false, "For dependency " + d + ": system-scoped dependency must " +
+                        addViolation( problems, false, "For dependency " + d + ": system-scoped dependency must " +
-                addViolation( result, false,
+                addViolation( problems, false,
-                validateSubElementStringNotEmpty( d, "dependencyManagement.dependencies.dependency.artifactId", result,
+                validateSubElementStringNotEmpty( d, "dependencyManagement.dependencies.dependency.artifactId", problems,
-                validateSubElementStringNotEmpty( d, "dependencyManagement.dependencies.dependency.groupId", result,
+                validateSubElementStringNotEmpty( d, "dependencyManagement.dependencies.dependency.groupId", problems,
-                        addViolation( result, false,
+                        addViolation( problems, false,
-                            addViolation( result, false, "For managed dependency " + d + ": system-scoped dependency must " +
+                            addViolation( problems, false, "For managed dependency " + d + ": system-scoped dependency must " +
-                    addViolation( result, false,
+                    addViolation( problems, false,
-                    validateStringNotEmpty( "build.plugins.plugin.artifactId", result, false, p.getArtifactId() );
+                    validateStringNotEmpty( "build.plugins.plugin.artifactId", problems, false, p.getArtifactId() );
-                    validateStringNotEmpty( "build.plugins.plugin.groupId", result, false, p.getGroupId() );
+                    validateStringNotEmpty( "build.plugins.plugin.groupId", problems, false, p.getGroupId() );
-                    validateStringNotEmpty( "build.plugins.plugin.version", result, warnOnMissingPluginVersion,
+                    validateStringNotEmpty( "build.plugins.plugin.version", problems, warnOnMissingPluginVersion,
-                validateResources( result, build.getResources(), "build.resources.resource" );
+                validateResources( problems, build.getResources(), "build.resources.resource" );
-                validateResources( result, build.getTestResources(), "build.testResources.testResource" );
+                validateResources( problems, build.getTestResources(), "build.testResources.testResource" );
-                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", result, false, p.getArtifactId() );
+                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", problems, false, p.getArtifactId() );
-                    validateStringNotEmpty( "reporting.plugins.plugin.groupId", result, false, p.getGroupId() );
+                    validateStringNotEmpty( "reporting.plugins.plugin.groupId", problems, false, p.getGroupId() );
-                    validateStringNotEmpty( "reporting.plugins.plugin.version", result, warnOnMissingPluginVersion,
+                    validateStringNotEmpty( "reporting.plugins.plugin.version", problems, warnOnMissingPluginVersion,
-            forcePluginExecutionIdCollision( model, result );
+            forcePluginExecutionIdCollision( model, problems );
-
-        return result;
-    private boolean validateId( String fieldName, ModelValidationResult result, String id )
+    private boolean validateId( String fieldName, ModelProblemCollector problems, String id )
-        if ( !validateStringNotEmpty( fieldName, result, false, id ) )
+        if ( !validateStringNotEmpty( fieldName, problems, false, id ) )
-                addViolation( result, false, "'" + fieldName + "' with value '" + id + "' does not match a valid id pattern." );
+                addViolation( problems, false, "'" + fieldName + "' with value '" + id + "' does not match a valid id pattern." );
-    private void validateDependencies( ModelValidationResult result, List<Dependency> dependencies, String prefix,
+    private void validateDependencies( ModelProblemCollector problems, List<Dependency> dependencies, String prefix,
-                addViolation( result, false, "'" + prefix + ".classifier' must be empty for imported POM: " + key );
+                addViolation( problems, false, "'" + prefix + ".classifier' must be empty for imported POM: " + key );
-                addViolation( result, warning, "'" + prefix + ".(groupId:artifactId:type:classifier)' must be unique: "
+                addViolation( problems, warning, "'" + prefix + ".(groupId:artifactId:type:classifier)' must be unique: "
-    private void validateRepositories( ModelValidationResult result, List<Repository> repositories, String prefix,
+    private void validateRepositories( ModelProblemCollector problems, List<Repository> repositories, String prefix,
-            validateStringNotEmpty( prefix + ".id", result, false, repository.getId() );
+            validateStringNotEmpty( prefix + ".id", problems, false, repository.getId() );
-            validateStringNotEmpty( prefix + ".url", result, false, repository.getUrl() );
+            validateStringNotEmpty( prefix + ".url", problems, false, repository.getUrl() );
-                addViolation( result, warning, "'" + prefix + ".id' must be unique: " + repository.getId() + " -> "
+                addViolation( problems, warning, "'" + prefix + ".id' must be unique: " + repository.getId() + " -> "
-    private void validateResources( ModelValidationResult result, List<Resource> resources, String prefix )
+    private void validateResources( ModelProblemCollector problems, List<Resource> resources, String prefix )
-            validateStringNotEmpty( prefix + ".directory", result, false, resource.getDirectory() );
+            validateStringNotEmpty( prefix + ".directory", problems, false, resource.getDirectory() );
-    private void forcePluginExecutionIdCollision( Model model, ModelValidationResult result )
+    private void forcePluginExecutionIdCollision( Model model, ModelProblemCollector problems )
-                        addViolation( result, false, collisionException.getMessage() );
+                        addViolation( problems, false, collisionException.getMessage() );
-    private boolean validateStringNotEmpty( String fieldName, ModelValidationResult result, boolean warning, String string )
+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, boolean warning, String string )
-        return validateStringNotEmpty( fieldName, result, warning, string, null );
+        return validateStringNotEmpty( fieldName, problems, warning, string, null );
-    private boolean validateStringNotEmpty( String fieldName, ModelValidationResult result, boolean warning,
+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, boolean warning,
-        if ( !validateNotNull( fieldName, result, warning, string, sourceHint ) )
+        if ( !validateNotNull( fieldName, problems, warning, string, sourceHint ) )
-            addViolation( result, false, "'" + fieldName + "' is missing for " + sourceHint );
+            addViolation( problems, false, "'" + fieldName + "' is missing for " + sourceHint );
-            addViolation( result, false, "'" + fieldName + "' is missing." );
+            addViolation( problems, false, "'" + fieldName + "' is missing." );
-                                                      ModelValidationResult result, String string )
+                                                      ModelProblemCollector problems, String string )
-        if ( !validateSubElementNotNull( subElementInstance, fieldName, result, string ) )
+        if ( !validateSubElementNotNull( subElementInstance, fieldName, problems, string ) )
-        addViolation( result, false, "In " + subElementInstance + ":\n\n       -> '" + fieldName + "' is missing." );
+        addViolation( problems, false, "In " + subElementInstance + ":\n\n       -> '" + fieldName + "' is missing." );
-    private boolean validateNotNull( String fieldName, ModelValidationResult result, boolean warning, Object object, String sourceHint )
+    private boolean validateNotNull( String fieldName, ModelProblemCollector problems, boolean warning, Object object, String sourceHint )
-            addViolation( result, warning, "'" + fieldName + "' is missing for " + sourceHint );
+            addViolation( problems, warning, "'" + fieldName + "' is missing for " + sourceHint );
-            addViolation( result, warning, "'" + fieldName + "' is missing." );
+            addViolation( problems, warning, "'" + fieldName + "' is missing." );
-                                               ModelValidationResult result, Object object )
+                                               ModelProblemCollector problems, Object object )
-        addViolation( result, false, "In " + subElementInstance + ":\n\n       -> '" + fieldName + "' is missing." );
+        addViolation( problems, false, "In " + subElementInstance + ":\n\n       -> '" + fieldName + "' is missing." );
-    private void addViolation( ModelValidationResult result, boolean warning, String message )
+    private void addViolation( ModelProblemCollector problems, boolean warning, String message )
-            result.addWarning( message );
+            problems.addWarning( message );
-            result.addError( message );
+            problems.addError( message );
