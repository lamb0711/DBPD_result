Resolving: MNG-684

o Split profile injection out into its own component away from the defaults assembler
o Moved code common to the defaults assembler and the profile injector into ModelUtils
o Removed the profile-related method from ModelIntheritanceAssembler
o added it0048 to test that profile values will override POM values.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@231294 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.BuildBase;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.DependencyManagement;
+import org.apache.maven.model.ModelBase;
+import org.apache.maven.model.PluginManagement;
+import org.apache.maven.model.ReportPlugin;
+import org.apache.maven.model.ReportSet;
+import org.apache.maven.model.Reporting;
+import org.apache.maven.model.Repository;
+import org.codehaus.plexus.util.StringUtils;
+import java.util.HashMap;
+    public static void mergeModelBases( ModelBase dominant, ModelBase recessive )
+    {
+        mergeDependencies( dominant, recessive );
+        
+        dominant.setRepositories( mergeRepositoryLists( dominant.getRepositories(), recessive.getRepositories() ) );
+        dominant.setPluginRepositories( mergeRepositoryLists( dominant.getPluginRepositories(), recessive.getPluginRepositories() ) );
+        
+        mergeReporting( dominant, recessive );
+        
+        mergeDependencyManagementSections( dominant, recessive );
+    }
+    
+    private static List mergeRepositoryLists( List dominantRepositories, List recessiveRepositories )
+    {
+        List repositories = new ArrayList();
+        
+        for ( Iterator it = dominantRepositories.iterator(); it.hasNext(); )
+        {
+            Repository repository = (Repository) it.next();
+            
+            repositories.add( repository );
+        }
+        
+        for ( Iterator it = recessiveRepositories.iterator(); it.hasNext(); )
+        {
+            Repository repository = (Repository) it.next();
+            
+            if ( !repositories.contains( repository ) )
+            {
+                repositories.add( repository );
+            }
+        }
+        
+        return repositories;
+    }
+
+    private static void mergeDependencies( ModelBase dominant, ModelBase recessive )
+    {
+        Map depsMap = new HashMap();
+        
+        List deps = recessive.getDependencies();
+        
+        if ( deps != null )
+        {
+            for ( Iterator it = deps.iterator(); it.hasNext(); )
+            {
+                Dependency dependency = (Dependency) it.next();
+                depsMap.put( dependency.getManagementKey(), dependency );
+            }
+        }
+        
+        deps = dominant.getDependencies();
+        
+        if ( deps != null )
+        {
+            for ( Iterator it = deps.iterator(); it.hasNext(); )
+            {
+                Dependency dependency = (Dependency) it.next();
+                depsMap.put( dependency.getManagementKey(), dependency );
+            }
+        }
+        
+        dominant.setDependencies( new ArrayList( depsMap.values() ) );
+    }
+
+    public static void mergeReporting( ModelBase dominant, ModelBase recessive )
+    {
+        // Reports :: aggregate
+        Reporting dominantReporting = dominant.getReporting();
+        Reporting modelReporting = recessive.getReporting();
+
+        if ( dominantReporting != null && modelReporting != null )
+        {
+            if ( StringUtils.isEmpty( dominantReporting.getOutputDirectory() ) )
+            {
+                dominantReporting.setOutputDirectory( modelReporting.getOutputDirectory() );
+            }
+
+            Map mergedReportPlugins = new HashMap();
+
+            Map dominantReportersByKey = dominantReporting.getReportPluginsAsMap();
+
+            List parentReportPlugins = modelReporting.getPlugins();
+
+            if ( parentReportPlugins != null )
+            {
+                for ( Iterator it = parentReportPlugins.iterator(); it.hasNext(); )
+                {
+                    ReportPlugin recessiveReportPlugin = (ReportPlugin) it.next();
+
+                    String inherited = recessiveReportPlugin.getInherited();
+
+                    if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
+                    {
+                        ReportPlugin dominantReportPlugin = (ReportPlugin) dominantReportersByKey.get(
+                            recessiveReportPlugin.getKey() );
+
+                        ReportPlugin mergedReportPlugin = recessiveReportPlugin;
+
+                        if ( dominantReportPlugin != null )
+                        {
+                            mergedReportPlugin = dominantReportPlugin;
+
+                            mergeReportPlugins( dominantReportPlugin, recessiveReportPlugin );
+                        }
+                        else if ( StringUtils.isEmpty( inherited ) )
+                        {
+                            mergedReportPlugin.unsetInheritanceApplied();
+                        }
+
+                        mergedReportPlugins.put( mergedReportPlugin.getKey(), mergedReportPlugin );
+                    }
+                }
+            }
+
+            for ( Iterator it = dominantReportersByKey.entrySet().iterator(); it.hasNext(); )
+            {
+                Map.Entry entry = (Map.Entry) it.next();
+
+                String key = (String) entry.getKey();
+
+                if ( !mergedReportPlugins.containsKey( key ) )
+                {
+                    mergedReportPlugins.put( key, entry.getValue() );
+                }
+            }
+
+            dominantReporting.setPlugins( new ArrayList( mergedReportPlugins.values() ) );
+
+            dominantReporting.flushReportPluginMap();
+        }
+    }
+
+    public static void mergeDependencyManagementSections( ModelBase dominant, ModelBase recessive )
+    {
+        DependencyManagement recessiveDepMgmt = recessive.getDependencyManagement();
+
+        DependencyManagement dominantDepMgmt = dominant.getDependencyManagement();
+
+        if ( recessiveDepMgmt != null )
+        {
+            if ( dominantDepMgmt == null )
+            {
+                dominant.setDependencyManagement( recessiveDepMgmt );
+            }
+            else
+            {
+                List dominantDeps = dominantDepMgmt.getDependencies();
+
+                Map mappedDominantDeps = new TreeMap();
+                for ( Iterator it = dominantDeps.iterator(); it.hasNext(); )
+                {
+                    Dependency dep = (Dependency) it.next();
+                    mappedDominantDeps.put( dep.getManagementKey(), dep );
+                }
+
+                for ( Iterator it = recessiveDepMgmt.getDependencies().iterator(); it.hasNext(); )
+                {
+                    Dependency dep = (Dependency) it.next();
+                    if ( !mappedDominantDeps.containsKey( dep.getManagementKey() ) )
+                    {
+                        dominantDepMgmt.addDependency( dep );
+                    }
+                }
+            }
+        }
+    }
+
+    public static void mergeReportPlugins( ReportPlugin dominant, ReportPlugin recessive )
+    {
+        if ( StringUtils.isEmpty( dominant.getVersion() ) )
+        {
+            dominant.setVersion( recessive.getVersion() );
+        }
+
+        Xpp3Dom dominantConfig = (Xpp3Dom) dominant.getConfiguration();
+        Xpp3Dom recessiveConfig = (Xpp3Dom) recessive.getConfiguration();
+
+        dominant.setConfiguration( Xpp3Dom.mergeXpp3Dom( dominantConfig, recessiveConfig ) );
+
+        Map mergedReportSets = new HashMap();
+
+        Map dominantReportSetsById = dominant.getReportSetsAsMap();
+
+        for ( Iterator it = recessive.getReportSets().iterator(); it.hasNext(); )
+        {
+            ReportSet recessiveReportSet = (ReportSet) it.next();
+
+            String inherited = recessiveReportSet.getInherited();
+
+            if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
+            {
+                ReportSet dominantReportSet = (ReportSet) dominantReportSetsById.get( recessiveReportSet.getId() );
+
+                ReportSet merged = recessiveReportSet;
+
+                if ( dominantReportSet != null )
+                {
+                    merged = dominantReportSet;
+
+                    Xpp3Dom recessiveRSConfig = (Xpp3Dom) recessiveReportSet.getConfiguration();
+                    Xpp3Dom mergedRSConfig = (Xpp3Dom) merged.getConfiguration();
+
+                    merged.setConfiguration( Xpp3Dom.mergeXpp3Dom( mergedRSConfig, recessiveRSConfig ) );
+
+                    List mergedReports = merged.getReports();
+
+                    if ( mergedReports == null )
+                    {
+                        mergedReports = new ArrayList();
+
+                        merged.setReports( mergedReports );
+                    }
+
+                    List recessiveRSReports = recessiveReportSet.getReports();
+
+                    if ( recessiveRSReports != null )
+                    {
+                        for ( Iterator reportIterator = recessiveRSReports.iterator(); reportIterator.hasNext(); )
+                        {
+                            String report = (String) reportIterator.next();
+
+                            if ( !mergedReports.contains( report ) )
+                            {
+                                mergedReports.add( report );
+                            }
+                        }
+                    }
+                }
+                else if ( StringUtils.isEmpty( inherited ) )
+                {
+                    merged.unsetInheritanceApplied();
+                }
+
+                mergedReportSets.put( merged.getId(), merged );
+            }
+        }
+
+        for ( Iterator rsIterator = dominantReportSetsById.entrySet().iterator(); rsIterator.hasNext(); )
+        {
+            Map.Entry entry = (Map.Entry) rsIterator.next();
+
+            String key = (String) entry.getKey();
+
+            if ( !mergedReportSets.containsKey( key ) )
+            {
+                mergedReportSets.put( key, entry.getValue() );
+            }
+        }
+
+        dominant.setReportSets( new ArrayList( mergedReportSets.values() ) );
+
+        dominant.flushReportSetMap();
+    }
+
+    public static void mergeBuildBases( BuildBase dominant, BuildBase recessive )
+    {
+        // NOTE: This assumes that the dominant build is not null.
+        //If it is null, the action taken should have been external to this method.
+        
+        // if the parent build is null, obviously we cannot inherit from it...
+        if ( recessive != null )
+        {
+            if ( dominant.getDefaultGoal() == null )
+            {
+                dominant.setDefaultGoal( recessive.getDefaultGoal() );
+            }
+
+            if ( dominant.getFinalName() == null )
+            {
+                dominant.setFinalName( recessive.getFinalName() );
+            }
+
+            List resources = dominant.getResources();
+            if ( resources == null || resources.isEmpty() )
+            {
+                dominant.setResources( recessive.getResources() );
+            }
+
+            resources = dominant.getTestResources();
+            if ( resources == null || resources.isEmpty() )
+            {
+                dominant.setTestResources( recessive.getTestResources() );
+            }
+
+            // Plugins are aggregated if Plugin.inherit != false
+            ModelUtils.mergePluginLists( dominant, recessive, true );
+
+            // Plugin management :: aggregate
+            PluginManagement dominantPM = dominant.getPluginManagement();
+            PluginManagement recessivePM = recessive.getPluginManagement();
+
+            if ( dominantPM == null && recessivePM != null )
+            {
+                dominant.setPluginManagement( recessivePM );
+            }
+            else
+            {
+                ModelUtils.mergePluginLists( dominant.getPluginManagement(), recessive.getPluginManagement(),
+                                             false );
+            }
+        }
+    }
+    
