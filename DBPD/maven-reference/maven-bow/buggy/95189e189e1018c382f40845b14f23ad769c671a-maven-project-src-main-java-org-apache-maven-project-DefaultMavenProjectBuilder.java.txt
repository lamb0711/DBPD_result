[MNG-1980] Removing the duplicate ID, the reactor will catch duplicate IDs in a single build so it doesn't not need
           to be checked for in the project builder. I have removed the model caching for now while I'm refactoring
           the project builder. The plan is to break the 1000+ lines down into its constituent components and use
           a pipeline to build up the project.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@371079 13f79535-47bb-0310-9956-ffa450edef68

+/*:apt
+
+ -----
+ POM lifecycle
+ -----
+
+POM Lifecycle
+
+ Order of operations when building a POM
+
+ * inheritance
+ * path translation
+ * interpolation
+ * defaults injection
+
+ Current processing is:
+
+ * inheritance
+ * interpolation
+ * defaults injection
+ * path translation
+
+ I'm not sure how this is working at all ... i think i have a case where this is failing but i need to
+ encapsulate as a test so i can fix it. Also need to think of the in working build directory versus looking
+ things up from the repository i.e buildFromSource vs buildFromRepository.
+
+Notes
+
+ * when the model is read it may not have a groupId, as it must be inherited
+
+ * the inheritance assembler must use models that are unadulterated!
+
+*/
+
+    private Map projectCache = new HashMap();
+
-    private final Map modelCache = new HashMap();
-
-    private Map projectCache = new HashMap();
-
-    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository,
+    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository, ProfileManager profileManager )
+        throws ProjectBuildingException
+    {
+        return buildFromSourceFileInternal( projectDescriptor, localRepository, profileManager, true );
+    }
+
+    public MavenProject build( File projectDescriptor,
+                               ArtifactRepository localRepository,
+                               ProfileManager profileManager,
+                               boolean checkDistributionManagementStatus )
+        throws ProjectBuildingException
+    {
+        return buildFromSourceFileInternal( projectDescriptor, localRepository, profileManager, checkDistributionManagementStatus );
+    }
+
+    // jvz:note
+    // When asked for something from the repository are we getting it from the reactor? Yes, when using this call
+    // we are assuming that the reactor has been run and we have collected the projects required to satisfy it0042
+    // which means the projects in the reactor are required for finding classes in <project>/target/classes. Not
+    // sure this is ideal. I remove all caching from the builder and all reactor related ITs which assume
+    // access to simbling project resources failed.
+    public MavenProject buildFromRepository( Artifact artifact,
+                                             List remoteArtifactRepositories,
+                                             ArtifactRepository localRepository,
+                                             boolean allowStubModel )
+        throws ProjectBuildingException
+    {
+        String cacheKey = createCacheKey( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion() );
+
+        MavenProject project = (MavenProject) projectCache.get( cacheKey );
+
+        if ( project != null )
+        {
+            return project;
+        }
+
+        Model model = findModelFromRepository( artifact, remoteArtifactRepositories, localRepository, allowStubModel );
+
+        return buildInternal( "Artifact [" + artifact + "]", model, localRepository, remoteArtifactRepositories, null, null, false );
+    }
+
+    public MavenProject buildFromRepository( Artifact artifact,
+                                             List remoteArtifactRepositories,
+                                             ArtifactRepository localRepository )
+        throws ProjectBuildingException
+    {
+        return buildFromRepository( artifact, remoteArtifactRepositories, localRepository, true );
+    }
+
+    // what is using this externally? jvz.
+    public MavenProject buildStandaloneSuperProject( ArtifactRepository localRepository )
+        throws ProjectBuildingException
+    {
+        Model superModel = getSuperModel();
+
+        superModel.setGroupId( STANDALONE_SUPERPOM_GROUPID );
+
+        superModel.setArtifactId( STANDALONE_SUPERPOM_ARTIFACTID );
+
+        superModel.setVersion( STANDALONE_SUPERPOM_VERSION );
+
+        ProfileManager profileManager = new DefaultProfileManager( container );
+
+        List activeProfiles;
+
+        profileManager.addProfiles( superModel.getProfiles() );
+
+        String projectId = safeVersionlessKey( STANDALONE_SUPERPOM_GROUPID, STANDALONE_SUPERPOM_ARTIFACTID );
+
+        activeProfiles = injectActiveProfiles( profileManager, superModel );
+
+        MavenProject project = new MavenProject( superModel );
+
+        project.setActiveProfiles( activeProfiles );
+
+        project.setOriginalModel( superModel );
+
+        try
+        {
+            project = processProjectLogic( "<Super-POM>", project, null, null, true );
+
+            project.setExecutionRoot( true );
+
+            return project;
+        }
+        catch ( ModelInterpolationException e )
+        {
+            throw new ProjectBuildingException( projectId, e.getMessage(), e );
+        }
+        catch ( InvalidRepositoryException e )
+        {
+            throw new ProjectBuildingException( projectId, e.getMessage(), e );
+        }
+    }
+
+    public MavenProject buildWithDependencies( File projectDescriptor,
+                                               ArtifactRepository localRepository,
+    // note:jvz This was added for the embedder.
+
-    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository,
-                                               ProfileManager profileManager, TransferListener transferListener )
+    public MavenProject buildWithDependencies( File projectDescriptor,
+                                               ArtifactRepository localRepository,
+                                               ProfileManager profileManager,
+                                               TransferListener transferListener )
+    // ----------------------------------------------------------------------
+    //
+    // ----------------------------------------------------------------------
+
-    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository,
-                               ProfileManager profileManager )
-        throws ProjectBuildingException
-    {
-        return buildFromSourceFile( projectDescriptor, localRepository, profileManager, true );
-    }
-
-    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository,
-                               ProfileManager profileManager, boolean checkDistributionManagementStatus )
-        throws ProjectBuildingException
-    {
-        return buildFromSourceFile( projectDescriptor, localRepository, profileManager,
-                                    checkDistributionManagementStatus );
-    }
-
-    private MavenProject buildFromSourceFile( File projectDescriptor, ArtifactRepository localRepository,
-                                              ProfileManager profileManager, boolean checkDistributionManagementStatus )
+    private MavenProject buildFromSourceFileInternal( File projectDescriptor,
+                                                      ArtifactRepository localRepository,
+                                                      ProfileManager profileManager,
+                                                      boolean checkDistributionManagementStatus )
-        // Always cache files in the source tree over those in the repository
-        CachedModel cachedModel = new CachedModel( projectDescriptor, model );
-
-        String modelKey = createCacheKey( model.getGroupId(), model.getArtifactId(), model.getVersion() );
-        if ( modelCache.containsKey( modelKey ) )
-        {
-            throw new ProjectBuildingException( model.getGroupId() + ":" + model.getArtifactId(),
-                                                "Duplicate project ID found in " +
-                                                    projectDescriptor.getAbsolutePath() );
-        }
-        modelCache.put( modelKey, cachedModel );
-
-        MavenProject project = build( projectDescriptor.getAbsolutePath(), model, localRepository,
-                                      buildArtifactRepositories( getSuperModel() ),
-                                      projectDescriptor.getAbsoluteFile().getParentFile(), profileManager, true );
+        MavenProject project = buildInternal( projectDescriptor.getAbsolutePath(),
+                                              model,
+                                              localRepository,
+                                              buildArtifactRepositories( getSuperModel() ),
+                                              projectDescriptor,
+                                              profileManager,
+                                              true );
-            if ( project.getDistributionManagement() != null &&
-                project.getDistributionManagement().getStatus() != null )
+            if ( project.getDistributionManagement() != null && project.getDistributionManagement().getStatus() != null )
-        // Only translate the base directory for files in the source tree
-        pathTranslator.alignToBaseDirectory( project.getModel(), projectDescriptor.getParentFile() );
-
-        Build build = project.getBuild();
-        project.addCompileSourceRoot( build.getSourceDirectory() );
-        project.addScriptSourceRoot( build.getScriptSourceDirectory() );
-        project.addTestCompileSourceRoot( build.getTestSourceDirectory() );
-
-        // Only track the file of a POM in the source tree
-        project.setFile( projectDescriptor );
-
-    public MavenProject buildFromRepository( Artifact artifact, List remoteArtifactRepositories,
-                                             ArtifactRepository localRepository )
-        throws ProjectBuildingException
-    {
-        return buildFromRepository( artifact, remoteArtifactRepositories, localRepository, true );
-    }
-
-    public MavenProject buildFromRepository( Artifact artifact, List remoteArtifactRepositories,
-                                             ArtifactRepository localRepository, boolean allowStubModel )
-        throws ProjectBuildingException
-    {
-        String cacheKey = createCacheKey( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion() );
-        MavenProject project = (MavenProject) projectCache.get( cacheKey );
-        if ( project != null )
-        {
-            return project;
-        }
-
-        Model model = findModelFromRepository( artifact, remoteArtifactRepositories, localRepository, allowStubModel );
-
-        return build( "Artifact [" + artifact + "]", model, localRepository, remoteArtifactRepositories, null, null,
-                      false );
-    }
-
-    private Model findModelFromRepository( Artifact artifact, List remoteArtifactRepositories,
-                                           ArtifactRepository localRepository, boolean allowStubModel )
+    private Model findModelFromRepository( Artifact artifact,
+                                           List remoteArtifactRepositories,
+                                           ArtifactRepository localRepository,
+                                           boolean allowStubModel )
-            getLogger().warn( "Attempting to build MavenProject instance for Artifact of type: " + artifact.getType() +
-                "; constructing POM artifact instead." );
+            getLogger().warn( "Attempting to build MavenProject instance for Artifact of type: " + artifact.getType() + "; constructing POM artifact instead." );
-            projectArtifact = artifactFactory.createProjectArtifact( artifact.getGroupId(), artifact.getArtifactId(),
-                                                                     artifact.getVersion(), artifact.getScope() );
+            projectArtifact = artifactFactory.createProjectArtifact( artifact.getGroupId(),
+                                                                     artifact.getArtifactId(),
+                                                                     artifact.getVersion(),
+                                                                     artifact.getScope() );
-        CachedModel cachedModel = getCachedProject( projectArtifact.getGroupId(), projectArtifact.getArtifactId(),
-                                                    projectArtifact.getVersion() );
-        if ( cachedModel == null )
+
+        String projectId = ArtifactUtils.versionlessKey( projectArtifact );
+
+        try
-            String projectId = ArtifactUtils.versionlessKey( projectArtifact );
+            artifactResolver.resolve( projectArtifact, remoteArtifactRepositories, localRepository );
-            try
+            File file = projectArtifact.getFile();
+
+            model = readModel( projectId, file, false );
+
+            String downloadUrl = null;
+
+            ArtifactStatus status = ArtifactStatus.NONE;
+
+            DistributionManagement distributionManagement = model.getDistributionManagement();
+
+            if ( distributionManagement != null )
-                artifactResolver.resolve( projectArtifact, remoteArtifactRepositories, localRepository );
+                downloadUrl = distributionManagement.getDownloadUrl();
-                File file = projectArtifact.getFile();
-                model = readModel( projectId, file, false );
-
-                String downloadUrl = null;
-                ArtifactStatus status = ArtifactStatus.NONE;
-
-                DistributionManagement distributionManagement = model.getDistributionManagement();
-                if ( distributionManagement != null )
-                {
-                    downloadUrl = distributionManagement.getDownloadUrl();
-
-                    status = ArtifactStatus.valueOf( distributionManagement.getStatus() );
-                }
-
-                checkStatusAndUpdate( projectArtifact, status, file, remoteArtifactRepositories, localRepository );
-
-                // TODO: this is gross. Would like to give it the whole model, but maven-artifact shouldn't depend on that
-                // Can a maven-core implementation of the Artifact interface store it, and be used in the exceptions?
-                if ( downloadUrl != null )
-                {
-                    projectArtifact.setDownloadUrl( downloadUrl );
-                }
-                else
-                {
-                    projectArtifact.setDownloadUrl( model.getUrl() );
-                }
+                status = ArtifactStatus.valueOf( distributionManagement.getStatus() );
-            catch ( ArtifactResolutionException e )
+
+            checkStatusAndUpdate( projectArtifact, status, file, remoteArtifactRepositories, localRepository );
+
+            // TODO: this is gross. Would like to give it the whole model, but maven-artifact shouldn't depend on that
+            // Can a maven-core implementation of the Artifact interface store it, and be used in the exceptions?
+            if ( downloadUrl != null )
-                throw new ProjectBuildingException( projectId, "Error getting POM for '" + projectId +
-                    "' from the repository: " + e.getMessage(), e );
+                projectArtifact.setDownloadUrl( downloadUrl );
-            catch ( ArtifactNotFoundException e )
+            else
-                if ( allowStubModel )
-                {
-                    getLogger().debug( "Artifact not found - using stub model: " + e.getMessage() );
-                    model = createStubModel( projectArtifact );
-                }
-                else
-                {
-                    throw new ProjectBuildingException( projectId, "POM '" + projectId + "' not found in repository: " +
-                        e.getMessage(), e );
-                }
+                projectArtifact.setDownloadUrl( model.getUrl() );
-        else
+        catch ( ArtifactResolutionException e )
-            model = cachedModel.getModel();
+            throw new ProjectBuildingException( projectId, "Error getting POM for '" + projectId + "' from the repository: " + e.getMessage(), e );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            if ( allowStubModel )
+            {
+                getLogger().debug( "Artifact not found - using stub model: " + e.getMessage() );
+
+                model = createStubModel( projectArtifact );
+            }
+            else
+            {
+                throw new ProjectBuildingException( projectId, "POM '" + projectId + "' not found in repository: " + e.getMessage(), e );
+            }
-    private void checkStatusAndUpdate( Artifact projectArtifact, ArtifactStatus status, File file,
-                                       List remoteArtifactRepositories, ArtifactRepository localRepository )
+    private void checkStatusAndUpdate( Artifact projectArtifact,
+                                       ArtifactStatus status, File file,
+                                       List remoteArtifactRepositories,
+                                       ArtifactRepository localRepository )
+    // jvz:note
+    // This is used when requested artifacts do not have an associated POM. This is for the case where we are
+    // using an m1 repo where the only thing required to be present are the JAR files.
+
+
+
+
+
+
-/* TODO: we should only do this if we can verify the existence of the JAR itself
-        File file = artifact.getFile();
-        file.getParentFile().mkdirs();
-
-        FileWriter writer = null;
-        try
-        {
-            writer = new FileWriter( file );
-
-            MavenXpp3Writer w = new MavenXpp3Writer();
-            w.write( writer, model );
-        }
-        catch ( IOException ioe )
-        {
-            getLogger().warn( "Attempted to write out a temporary generated POM, but failed", ioe );
-        }
-        finally
-        {
-            IOUtil.close( writer );
-        }
-*/
-    private MavenProject build( String pomLocation, Model model, ArtifactRepository localRepository,
-                                List parentSearchRepositories, File projectDir, ProfileManager externalProfileManager,
-                                boolean strict )
+    // jvz:note
+    // We've got a mixture of things going in the USD and from the repository, sometimes the descriptor
+    // is a real file and sometimes null which makes things confusing.
+    private MavenProject buildInternal( String pomLocation,
+                                        Model model,
+                                        ArtifactRepository localRepository,
+                                        List parentSearchRepositories,
+                                        File projectDescriptor,
+                                        ProfileManager externalProfileManager,
+                                        boolean strict )
+        File projectDir = null;
+
+        if ( projectDescriptor != null )
+        {
+            projectDir = projectDescriptor.getAbsoluteFile().getParentFile();
+        }
+
-                    artifactRepo =
-                        ProjectUtils.buildArtifactRepository( mavenRepo, artifactRepositoryFactory, container );
+                    artifactRepo = ProjectUtils.buildArtifactRepository( mavenRepo, artifactRepositoryFactory, container );
-            project = assembleLineage( model, lineage, localRepository, projectDir, parentSearchRepositories,
-                                       aggregatedRemoteWagonRepositories, externalProfileManager, strict );
+            project = assembleLineage( model,
+                                       lineage,
+                                       localRepository,
+                                       projectDir,
+                                       parentSearchRepositories,
+                                       aggregatedRemoteWagonRepositories,
+                                       externalProfileManager,
+                                       strict );
+
+
+
-            project =
-                processProjectLogic( pomLocation, project, repositories, externalProfileManager, projectDir, strict );
+            project = processProjectLogic( pomLocation, project, externalProfileManager, projectDir, strict );
-        projectCache.put( createCacheKey( project.getGroupId(), project.getArtifactId(), project.getVersion() ),
-                          project );
+
+        projectCache.put( createCacheKey( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
+
+        // jvz:note
+        // this only happens if we are building from a source file
+        if ( projectDescriptor != null )
+        {
+            // Only translate the base directory for files in the source tree
+            pathTranslator.alignToBaseDirectory( project.getModel(), projectDescriptor.getParentFile() );
+
+            Build build = project.getBuild();
+
+            project.addCompileSourceRoot( build.getSourceDirectory() );
+
+            project.addScriptSourceRoot( build.getScriptSourceDirectory() );
+
+            project.addTestCompileSourceRoot( build.getTestSourceDirectory() );
+
+            // Only track the file of a POM in the source tree
+            project.setFile( projectDescriptor );
+        }
+
-            return ProjectUtils.buildArtifactRepositories( model.getRepositories(), artifactRepositoryFactory,
-                                                           container );
+            return ProjectUtils.buildArtifactRepositories( model.getRepositories(), artifactRepositoryFactory, container );
-    private MavenProject processProjectLogic( String pomLocation, MavenProject project, List remoteRepositories,
-                                              ProfileManager profileMgr, File projectDir, boolean strict )
+    private MavenProject processProjectLogic( String pomLocation,
+                                              MavenProject project,
+                                              ProfileManager profileMgr,
+                                              File projectDir,
+                                              boolean strict )
-        String key = createCacheKey( model.getGroupId(), model.getArtifactId(), model.getVersion() );
-        if ( !modelCache.containsKey( key ) )
-        {
-            // clone the model because the profile injection below will modify this instance
-            CachedModel cachedModel = new CachedModel( project.getFile(), ModelUtils.cloneModel( model ) );
-            modelCache.put( key, cachedModel );
-        }
+
+
-    private MavenProject assembleLineage( Model model, LinkedList lineage, ArtifactRepository localRepository,
-                                          File projectDir, List parentSearchRepositories,
-                                          Set aggregatedRemoteWagonRepositories, ProfileManager externalProfileManager,
+    private MavenProject assembleLineage( Model model,
+                                          LinkedList lineage,
+                                          ArtifactRepository localRepository,
+                                          File projectDir,
+                                          List parentSearchRepositories,
+                                          Set aggregatedRemoteWagonRepositories,
+                                          ProfileManager externalProfileManager,
+
-            throw new ProjectBuildingException( projectId, "Failed to activate local (project-level) build profiles: " +
-                e.getMessage(), e );
+            throw new ProjectBuildingException( projectId, "Failed to activate local (project-level) build profiles: " + e.getMessage(), e );
-                throw new ProjectBuildingException( projectId,
-                                                    "Parent element is a duplicate of " + "the current project " );
+                throw new ProjectBuildingException( projectId, "Parent element is a duplicate of " + "the current project " );
-            CachedModel cachedModel =
-                getCachedProject( parentModel.getGroupId(), parentModel.getArtifactId(), parentModel.getVersion() );
-            if ( cachedModel != null )
-            {
-                model = cachedModel.getModel();
-                parentDescriptor = cachedModel.getDescriptor();
-            }
-            else
-            {
-                model = null;
-            }
+            model = null;
-    private CachedModel getCachedProject( String groupId, String artifactId, String version )
-    {
-        return (CachedModel) modelCache.get( createCacheKey( groupId, artifactId, version ) );
-    }
-
-    public MavenProject buildStandaloneSuperProject( ArtifactRepository localRepository )
-        throws ProjectBuildingException
-    {
-        Model superModel = getSuperModel();
-
-        superModel.setGroupId( STANDALONE_SUPERPOM_GROUPID );
-
-        superModel.setArtifactId( STANDALONE_SUPERPOM_ARTIFACTID );
-
-        superModel.setVersion( STANDALONE_SUPERPOM_VERSION );
-
-        ProfileManager profileManager = new DefaultProfileManager( container );
-
-        List activeProfiles;
-
-        profileManager.addProfiles( superModel.getProfiles() );
-
-        String projectId = safeVersionlessKey( STANDALONE_SUPERPOM_GROUPID, STANDALONE_SUPERPOM_ARTIFACTID );
-
-        activeProfiles = injectActiveProfiles( profileManager, superModel );
-
-        MavenProject project = new MavenProject( superModel );
-
-        project.setActiveProfiles( activeProfiles );
-
-        project.setOriginalModel( superModel );
-
-        try
-        {
-            List remoteRepositories = buildArtifactRepositories( superModel );
-
-            project = processProjectLogic( "<Super-POM>", project, remoteRepositories, null, null, true );
-
-            project.setExecutionRoot( true );
-
-            return project;
-        }
-        catch ( ModelInterpolationException e )
-        {
-            throw new ProjectBuildingException( projectId, e.getMessage(), e );
-        }
-        catch ( InvalidRepositoryException e )
-        {
-            throw new ProjectBuildingException( projectId, e.getMessage(), e );
-        }
-    }
-
-
-    private static class CachedModel
-    {
-        private File descriptor;
-
-        private Model model;
-
-        public CachedModel( File descriptor, Model model )
-        {
-            this.descriptor = descriptor;
-            this.model = model;
-        }
-
-        public File getDescriptor()
-        {
-            return descriptor;
-        }
-
-        public Model getModel()
-        {
-            return model;
-        }
-    }
