[MNG-377] Resolving.

Added new mojos to the plugin-plugin that will update the plugins.xml mapping metadata in the plugin's group on the distribution repository.




git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@210153 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.logging.AbstractLogEnabled;
+import org.codehaus.plexus.util.FileUtils;
+import java.io.IOException;
+    extends AbstractLogEnabled
-    public void get( RepositoryMetadata metadata, ArtifactRepository remote, ArtifactRepository local )
+    public void resolve( RepositoryMetadata metadata, ArtifactRepository remote, ArtifactRepository local, String remoteId )
-        String realignedPath = local.formatDirectory( metadata.getRepositoryPath() );
+        String metadataPath = local.formatAsFile( metadata.getRepositoryPath() );
-        realignedPath = realignedPath.replace( File.separatorChar, '/' );
+        String realignedPath = metadataPath.replace( File.separatorChar, '/' );
-        realignedPath = "/REPOSITORY-INF/" + remote.getId() + realignedPath;
+        realignedPath = "/REPOSITORY-INF/" + remoteId + realignedPath;
-        try
+        if ( remote == null )
-            wagonManager.getRepositoryMetadata( metadata, remote, metadataFile );
+            if ( metadataFile.exists() )
+            {
+                getLogger().warn( "Cannot retrieve repository metadata for: " + metadataPath + ". Using locally cached version instead." );
+                
+                getLogger().debug( "Error retrieving repository metadata: " + metadataPath + ". Reason: repository is null." );
+                
+                metadata.setFile( metadataFile );
+            }
+            else
+            {
+                throw new RepositoryMetadataManagementException( metadata, "Cannot retrieve repository metadata from null repository." );
+            }
+        }
+        else
+        {
+            try
+            {
+                wagonManager.getRepositoryMetadata( metadata, remote, metadataFile );
-            metadata.setFile( metadataFile );
-        }
-        catch ( TransferFailedException e )
-        {
-            throw new RepositoryMetadataManagementException( metadata, "Failed to download repository metadata.", e );
-        }
-        catch ( ResourceDoesNotExistException e )
-        {
-            throw new RepositoryMetadataManagementException( metadata, "Remote repository metadata not found.", e );
+                metadata.setFile( metadataFile );
+            }
+            catch ( TransferFailedException e )
+            {
+                throw new RepositoryMetadataManagementException( metadata, "Failed to download repository metadata.", e );
+            }
+            catch ( ResourceDoesNotExistException e )
+            {
+                if ( metadataFile.exists() )
+                {
+                    getLogger().warn( "Cannot find repository metadata for: " + metadataPath + ". Using locally cached version instead." );
+                    getLogger().debug( "Error retrieving repository metadata: " + metadataPath, e );
+                    
+                    metadata.setFile( metadataFile );
+                }
+                else
+                {
+                    throw new RepositoryMetadataManagementException( metadata, "Remote repository metadata not found.", e );
+                }
+            }
-    public void put( RepositoryMetadata metadata, ArtifactRepository remote )
+    public void deploy( RepositoryMetadata metadata, ArtifactRepository remote )
+    public void install( RepositoryMetadata metadata, ArtifactRepository local, String remoteRepositoryId )
+    throws RepositoryMetadataManagementException
+    {
+        String realignedPath = local.formatAsFile( metadata.getRepositoryPath() );
+
+        realignedPath = realignedPath.replace( File.separatorChar, '/' );
+
+        if ( !realignedPath.startsWith( "/" ) )
+        {
+            realignedPath = "/" + realignedPath;
+        }
+
+        realignedPath = "/REPOSITORY-INF/" + remoteRepositoryId + realignedPath;
+
+        File metadataFile = new File( local.getBasedir(), realignedPath ).getAbsoluteFile();
+
+        try
+        {
+            File dir = metadataFile.getParentFile();
+            
+            if ( !dir.exists() )
+            {
+                dir.mkdirs();
+            }
+            
+            FileUtils.copyFile( metadata.getFile(), metadataFile );
+        }
+        catch ( IOException e )
+        {
+            throw new RepositoryMetadataManagementException( metadata, "Failed to install repository metadata.", e );
+        }
+    
+    }
+
