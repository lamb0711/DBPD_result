o first push of a plug point for repository/transport in maven


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@746285 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    public void resolve( RepositoryMetadata metadata,
-                         List<ArtifactRepository> remoteRepositories,
-                         ArtifactRepository localRepository )
+    public void resolve( RepositoryMetadata metadata, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository )
-        for (ArtifactRepository repository : remoteRepositories) {
-            ArtifactRepositoryPolicy policy =
-                    metadata.isSnapshot() ? repository.getSnapshots() : repository.getReleases();
+        for ( ArtifactRepository repository : remoteRepositories )
+        {
+            ArtifactRepositoryPolicy policy = metadata.isSnapshot() ? repository.getSnapshots() : repository.getReleases();
-            File file = new File(localRepository.getBasedir(),
-                    localRepository.pathOfLocalRepositoryMetadata(metadata, repository));
+            File file = new File( localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata( metadata, repository ) );
-            if (wagonManager.isOnline()) {
-                if (updateCheckManager.isUpdateRequired(metadata, repository, file)) {
-                    getLogger().info(metadata.getKey() + ": checking for updates from " + repository.getId());
-                    try {
-                        wagonManager.getArtifactMetadata(metadata, repository, file, policy.getChecksumPolicy());
+            if ( updateCheckManager.isUpdateRequired( metadata, repository, file ) )
+                {
+                    getLogger().info( metadata.getKey() + ": checking for updates from " + repository.getId() );
+                    try
+                    {
+                        wagonManager.getArtifactMetadata( metadata, repository, file, policy.getChecksumPolicy() );
-                    catch (ResourceDoesNotExistException e) {
-                        getLogger().debug(metadata + " could not be found on repository: " + repository.getId());
+                    catch ( ResourceDoesNotExistException e )
+                    {
+                        getLogger().debug( metadata + " could not be found on repository: " + repository.getId() );
-                        if (file.exists()) {
+                        if ( file.exists() )
+                        {
-                    catch (TransferFailedException e) {
-                        getLogger().warn(metadata + " could not be retrieved from repository: " + repository.getId() +
-                                " due to an error: " + e.getMessage());
-                        getLogger().debug("Exception", e);
+                    catch ( TransferFailedException e )
+                    {
+                        getLogger().warn( metadata + " could not be retrieved from repository: " + repository.getId() + " due to an error: " + e.getMessage() );
+                        getLogger().debug( "Exception", e );
-                        getLogger().info("Repository '" + repository.getId() + "' will be blacklisted");
-                        repository.setBlacklisted(true);
+                        getLogger().info( "Repository '" + repository.getId() + "' will be blacklisted" );
+                        repository.setBlacklisted( true );
-                    finally {
-                        updateCheckManager.touch(metadata, repository, file);
+                    finally
+                    {
+                        updateCheckManager.touch( metadata, repository, file );
-            } else {
-                getLogger().debug(
-                        "System is offline. Cannot resolve metadata:\n" + metadata.extendedToString() + "\n\n");
+            else
+            {
+                getLogger().debug( "System is offline. Cannot resolve metadata:\n" + metadata.extendedToString() + "\n\n" );
-            if (file.exists()) {
-                file.setLastModified(System.currentTimeMillis());
+            if ( file.exists() )
+            {
+                file.setLastModified( System.currentTimeMillis() );
+            
-            throw new RepositoryMetadataResolutionException(
-                "Unable to store local copy of metadata: " + e.getMessage(), e );
+            throw new RepositoryMetadataResolutionException( "Unable to store local copy of metadata: " + e.getMessage(), e );
-            throw new RepositoryMetadataResolutionException( "Unable to read local copy of metadata: " + e.getMessage(),
-                e );
+            throw new RepositoryMetadataResolutionException( "Unable to read local copy of metadata: " + e.getMessage(), e );
-    private void mergeMetadata( RepositoryMetadata metadata,
-                                List<ArtifactRepository> remoteRepositories,
-                                ArtifactRepository localRepository )
+    private void mergeMetadata( RepositoryMetadata metadata, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository )
-        Map<ArtifactRepository,Metadata> previousMetadata = new HashMap<ArtifactRepository,Metadata>();
+        Map<ArtifactRepository, Metadata> previousMetadata = new HashMap<ArtifactRepository, Metadata>();
-        for (ArtifactRepository repository : remoteRepositories) {
-            ArtifactRepositoryPolicy policy =
-                    metadata.isSnapshot() ? repository.getSnapshots() : repository.getReleases();
+        for ( ArtifactRepository repository : remoteRepositories )
+        {
+            ArtifactRepositoryPolicy policy = metadata.isSnapshot() ? repository.getSnapshots() : repository.getReleases();
-            if ((policy.isEnabled() && !repository.isBlacklisted())
-                    && (loadMetadata(metadata, repository, localRepository, previousMetadata))) {
-                metadata.setRepository(repository);
+            if ( ( policy.isEnabled() && !repository.isBlacklisted() ) && ( loadMetadata( metadata, repository, localRepository, previousMetadata ) ) )
+            {
+                metadata.setRepository( repository );
-    private void updateSnapshotMetadata( RepositoryMetadata metadata,
-                                         Map<ArtifactRepository,Metadata> previousMetadata,
-                                         ArtifactRepository selected,
-                                         ArtifactRepository localRepository )
+    private void updateSnapshotMetadata( RepositoryMetadata metadata, Map<ArtifactRepository, Metadata> previousMetadata, ArtifactRepository selected, ArtifactRepository localRepository )
-            for (ArtifactRepository repository : previousMetadata.keySet()) {
-                Metadata m = previousMetadata.get(repository);
-                if (repository.equals(selected)) {
-                    if (m.getVersioning() == null) {
-                        m.setVersioning(new Versioning());
+            for ( ArtifactRepository repository : previousMetadata.keySet() )
+            {
+                Metadata m = previousMetadata.get( repository );
+                if ( repository.equals( selected ) )
+                {
+                    if ( m.getVersioning() == null )
+                    {
+                        m.setVersioning( new Versioning() );
-                    if (m.getVersioning().getSnapshot() == null) {
-                        m.getVersioning().setSnapshot(new Snapshot());
+                    if ( m.getVersioning().getSnapshot() == null )
+                    {
+                        m.getVersioning().setSnapshot( new Snapshot() );
-                } else {
-                    if ((m.getVersioning() != null) && (m.getVersioning().getSnapshot() != null) &&
-                            m.getVersioning().getSnapshot().isLocalCopy()) {
-                        m.getVersioning().getSnapshot().setLocalCopy(false);
-                        metadata.setMetadata(m);
-                        metadata.storeInLocalRepository(localRepository, repository);
+                }
+                else
+                {
+                    if ( ( m.getVersioning() != null ) && ( m.getVersioning().getSnapshot() != null ) && m.getVersioning().getSnapshot().isLocalCopy() )
+                    {
+                        m.getVersioning().getSnapshot().setLocalCopy( false );
+                        metadata.setMetadata( m );
+                        metadata.storeInLocalRepository( localRepository, repository );
-    private boolean loadMetadata( RepositoryMetadata repoMetadata,
-                                  ArtifactRepository remoteRepository,
-                                  ArtifactRepository localRepository,
-                                  Map<ArtifactRepository,Metadata> previousMetadata )
+    private boolean loadMetadata( RepositoryMetadata repoMetadata, ArtifactRepository remoteRepository, ArtifactRepository localRepository, Map<ArtifactRepository, Metadata> previousMetadata )
-        File metadataFile = new File( localRepository.getBasedir(),
-            localRepository.pathOfLocalRepositoryMetadata( repoMetadata, remoteRepository ) );
+        File metadataFile = new File( localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata( repoMetadata, remoteRepository ) );
-            throw new RepositoryMetadataReadException(
-                "Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e );
+            throw new RepositoryMetadataReadException( "Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e );
-            throw new RepositoryMetadataReadException(
-                "Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e );
+            throw new RepositoryMetadataReadException( "Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e );
-    public void resolveAlways( RepositoryMetadata metadata,
-                               ArtifactRepository localRepository,
-                               ArtifactRepository remoteRepository )
+    public void resolveAlways( RepositoryMetadata metadata, ArtifactRepository localRepository, ArtifactRepository remoteRepository )
-        if ( !wagonManager.isOnline() )
-        {
-            // metadata is required for deployment, can't be offline
-            throw new RepositoryMetadataResolutionException(
-                "System is offline. Cannot resolve required metadata:\n" + metadata.extendedToString() );
-        }
-
-            throw new RepositoryMetadataResolutionException( metadata + " could not be retrieved from repository: " +
-                remoteRepository.getId() + " due to an error: " + e.getMessage(), e );
+            throw new RepositoryMetadataResolutionException( metadata + " could not be retrieved from repository: " + remoteRepository.getId() + " due to an error: " + e.getMessage(), e );
-    private File getArtifactMetadataFromDeploymentRepository( ArtifactMetadata metadata,
-                                                              ArtifactRepository localRepository,
-                                                              ArtifactRepository remoteRepository )
+    private File getArtifactMetadataFromDeploymentRepository( ArtifactMetadata metadata, ArtifactRepository localRepository, ArtifactRepository remoteRepository )
-        File file = new File( localRepository.getBasedir(),
-                              localRepository.pathOfLocalRepositoryMetadata( metadata, remoteRepository ) );
+        File file = new File( localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata( metadata, remoteRepository ) );
-            wagonManager.getArtifactMetadataFromDeploymentRepository( metadata, remoteRepository, file,
-                                                                      ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
+            wagonManager.getArtifactMetadataFromDeploymentRepository( metadata, remoteRepository, file, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
-            getLogger().info(
-                metadata + " could not be found on repository: " + remoteRepository.getId() + ", so will be created" );
+            getLogger().info( metadata + " could not be found on repository: " + remoteRepository.getId() + ", so will be created" );
-    public void deploy( ArtifactMetadata metadata,
-                        ArtifactRepository localRepository,
-                        ArtifactRepository deploymentRepository )
+    public void deploy( ArtifactMetadata metadata, ArtifactRepository localRepository, ArtifactRepository deploymentRepository )
-        if ( !wagonManager.isOnline() )
-        {
-            // deployment shouldn't silently fail when offline
-            throw new RepositoryMetadataDeploymentException(
-                "System is offline. Cannot deploy metadata:\n" + metadata.extendedToString() );
-        }
-
-                throw new RepositoryMetadataDeploymentException( metadata +
-                    " could not be retrieved from repository: " + deploymentRepository.getId() + " due to an error: " +
-                    e.getMessage(), e );
+                throw new RepositoryMetadataDeploymentException( metadata + " could not be retrieved from repository: " + deploymentRepository.getId() + " due to an error: " + e.getMessage(), e );
-            file = new File( localRepository.getBasedir(),
-                             localRepository.pathOfLocalRepositoryMetadata( metadata, deploymentRepository ) );
+            file = new File( localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata( metadata, deploymentRepository ) );
-    public void install( ArtifactMetadata metadata,
-                         ArtifactRepository localRepository )
+    public void install( ArtifactMetadata metadata, ArtifactRepository localRepository )
