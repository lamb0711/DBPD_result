MNG-5771 user-defined core extensions

read ${maven.projectBasedir}/.mvn/extensions.xml and create core
extensions realms during maven runtime bootstrap. this required
short-lived bootstrap plexus container to resolve extensions.

individual extensions realms are wired to maven.ext realm according
to META-INF/maven/extension.xml exported packages specification

Signed-off-by: Igor Fedorenko <ifedorenko@apache.org>

+    /**
+     * @since 3.2.6
+     */
+    public DependencyNode resolveCoreExtension( Plugin plugin, DependencyFilter dependencyFilter,
+                                                List<RemoteRepository> repositories, RepositorySystemSession session )
+        throws PluginResolutionException
+    {
+        return resolveInternal( plugin, null /* pluginArtifact */, dependencyFilter, null /* transformer */,
+                                repositories, session );
+    }
+
+        DependencyFilter resolutionFilter =
+            new ExclusionsDependencyFilter( artifactFilterManager.getCoreArtifactExcludes() );
+        resolutionFilter = AndDependencyFilter.newInstance( resolutionFilter, dependencyFilter );
+        return resolveInternal( plugin, pluginArtifact, resolutionFilter, new PlexusUtilsInjector(), repositories, session );
+    }
+
+    private DependencyNode resolveInternal( Plugin plugin, Artifact pluginArtifact, DependencyFilter dependencyFilter,
+                                            DependencyGraphTransformer transformer,
+                                            List<RemoteRepository> repositories, RepositorySystemSession session )
+        throws PluginResolutionException
+    {
-
-        DependencyFilter resolutionFilter =
-            new ExclusionsDependencyFilter( artifactFilterManager.getCoreArtifactExcludes() );
-        resolutionFilter = AndDependencyFilter.newInstance( resolutionFilter, dependencyFilter );
-        resolutionFilter = new AndDependencyFilter( collectionFilter, resolutionFilter );
+        DependencyFilter resolutionFilter = AndDependencyFilter.newInstance( collectionFilter, dependencyFilter );
-            DependencyGraphTransformer transformer =
-                ChainedDependencyGraphTransformer.newInstance( session.getDependencyGraphTransformer(),
-                                                               new PlexusUtilsInjector() );
+            transformer =
+                ChainedDependencyGraphTransformer.newInstance( session.getDependencyGraphTransformer(), transformer );
