Refactor the artifact-scanning logic from the realm manager and the plugin-artifact resolution logic in the plugin manager into two separate classes, one a component and one a static class, to allow the new PluginPrefixLoader to reuse some of both and create a lighter-weight approach to grabbing the PluginDescriptor for build-planning purposes...also avoids some needless error messages during build planning.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@617293 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.ProjectBuildingException;
+    private PluginManagerSupport pluginManagerSupport;
+
-                VersionRange versionRange;
-                try
-                {
-                    versionRange = VersionRange.createFromVersionSpec( plugin.getVersion() );
-                }
-                catch ( InvalidVersionSpecificationException e )
-                {
-                    throw new PluginManagerException( plugin, e );
-                }
-
-                List remoteRepositories = new ArrayList();
-
-//                remoteRepositories.addAll( project.getPluginArtifactRepositories() );
-
-                remoteRepositories.addAll( project.getRemoteArtifactRepositories() );
-
-                MavenProject pluginProject = buildPluginProject( plugin, localRepository, remoteRepositories );
-
-                checkRequiredMavenVersion( plugin, pluginProject, localRepository, remoteRepositories );
-
-                checkPluginDependencySpec( plugin, pluginProject );
-
-                Artifact pluginArtifact = artifactFactory.createPluginArtifact(
-                                                                                plugin.getGroupId(),
-                                                                                plugin.getArtifactId(),
-                                                                                versionRange );
-
-                pluginArtifact = project.replaceWithActiveArtifact( pluginArtifact );
-
-                artifactResolver.resolve( pluginArtifact, project.getRemoteArtifactRepositories(),
-                                          localRepository );
+                Artifact pluginArtifact = pluginManagerSupport.resolvePluginArtifact( plugin, project, session );
-    private void checkPluginDependencySpec( Plugin plugin,
-                                            MavenProject pluginProject )
-        throws InvalidPluginException
-    {
-        ArtifactFilter filter = new ScopeArtifactFilter( "runtime" );
-        try
-        {
-            pluginProject.createArtifacts( artifactFactory, null, filter );
-        }
-        catch ( InvalidDependencyVersionException e )
-        {
-            throw new InvalidPluginException( "Plugin: " + plugin.getKey() + " has a dependency with an invalid version.", e );
-        }
-    }
-
-    private MavenProject buildPluginProject( Plugin plugin,
-                                             ArtifactRepository localRepository,
-                                             List remoteRepositories )
-        throws InvalidPluginException
-    {
-        Artifact artifact = artifactFactory.createProjectArtifact( plugin.getGroupId(),
-                                                                   plugin.getArtifactId(),
-                                                                   plugin.getVersion() );
-
-        try
-        {
-            return mavenProjectBuilder.buildFromRepository( artifact,
-                                                            remoteRepositories,
-                                                            localRepository );
-        }
-        catch ( ProjectBuildingException e )
-        {
-            throw new InvalidPluginException( "Unable to build project for plugin '"
-                                              + plugin.getKey() + "': " + e.getMessage(), e );
-        }
-    }
-
-    /**
-     * @param pluginProject
-     * @todo would be better to store this in the plugin descriptor, but then it won't be available to the version
-     * manager which executes before the plugin is instantiated
-     */
-    private void checkRequiredMavenVersion( Plugin plugin,
-                                            MavenProject pluginProject,
-                                            ArtifactRepository localRepository,
-                                            List remoteRepositories )
-        throws PluginVersionResolutionException, InvalidPluginException
-    {
-        // if we don't have the required Maven version, then ignore an update
-        if ( ( pluginProject.getPrerequisites() != null )
-             && ( pluginProject.getPrerequisites().getMaven() != null ) )
-        {
-            DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion( pluginProject.getPrerequisites().getMaven() );
-
-            if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
-            {
-                throw new PluginVersionResolutionException( plugin.getGroupId(),
-                                                            plugin.getArtifactId(),
-                                                            "Plugin requires Maven version "
-                                                                            + requiredVersion );
-            }
-        }
-    }
-
