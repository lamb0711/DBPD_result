simplify the resolveTransitively API, and implement the new collector up to the level of functionality of the original.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191773 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.HashSet;
-        ArtifactResolutionResult result = new ArtifactResolutionResult();
+        return collect( artifacts, originatingArtifact, Collections.EMPTY_SET, localRepository, remoteRepositories,
+                        source, filter, artifactFactory );
+    }
+    public ArtifactResolutionResult collect( Set artifacts, Artifact originatingArtifact, Set managedVersions,
+                                             ArtifactRepository localRepository, List remoteRepositories,
+                                             ArtifactMetadataSource source, ArtifactFilter filter,
+                                             ArtifactFactory artifactFactory )
+        throws ArtifactResolutionException
+    {
-        List queue = new LinkedList();
+        ResolutionNode root = new ResolutionNode( originatingArtifact );
+        root.addDependencies( artifacts, filter );
-        queue.add( artifacts );
+        recurse( root, resolvedArtifacts, localRepository, remoteRepositories, source, filter, artifactFactory );
-        while ( !queue.isEmpty() )
+        Set set = new HashSet();
+
+        for ( Iterator i = resolvedArtifacts.values().iterator(); i.hasNext(); )
-            Set currentArtifacts = (Set) queue.remove( 0 );
-
-            for ( Iterator i = currentArtifacts.iterator(); i.hasNext(); )
+            ResolutionNode node = (ResolutionNode) i.next();
+            if ( node != root )
-                Artifact newArtifact = (Artifact) i.next();
-
-                String id = newArtifact.getDependencyConflictId();
-
-                if ( resolvedArtifacts.containsKey( id ) )
-                {
-                    Artifact knownArtifact = (Artifact) resolvedArtifacts.get( id );
-
-                    String newVersion = newArtifact.getVersion();
-
-                    String knownVersion = knownArtifact.getVersion();
-
-                    if ( !newVersion.equals( knownVersion ) )
-                    {
-                        addConflict( result, knownArtifact, newArtifact );
-                    }
-
-                    // TODO: scope handler
-                    boolean updateScope = false;
-                    if ( Artifact.SCOPE_RUNTIME.equals( newArtifact.getScope() ) &&
-                        Artifact.SCOPE_TEST.equals( knownArtifact.getScope() ) )
-                    {
-                        updateScope = true;
-                    }
-
-                    if ( Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) &&
-                        !Artifact.SCOPE_COMPILE.equals( knownArtifact.getScope() ) )
-                    {
-                        updateScope = true;
-                    }
-
-                    if ( updateScope )
-                    {
-                        Artifact artifact = artifactFactory.createArtifact( knownArtifact.getGroupId(),
-                                                                            knownArtifact.getArtifactId(), knownVersion,
-                                                                            newArtifact.getScope(),
-                                                                            knownArtifact.getType() );
-                        resolvedArtifacts.put( artifact.getDependencyConflictId(), artifact );
-                    }
-                }
-                else
-                {
-                    // ----------------------------------------------------------------------
-                    // It's the first time we have encountered this artifact
-                    // ----------------------------------------------------------------------
-
-                    if ( filter != null && !filter.include( newArtifact ) )
-                    {
-                        continue;
-                    }
-
-                    resolvedArtifacts.put( id, newArtifact );
-
-                    Set referencedDependencies = null;
-
-                    try
-                    {
-                        referencedDependencies = source.retrieve( newArtifact, localRepository, remoteRepositories );
-                    }
-                    catch ( ArtifactMetadataRetrievalException e )
-                    {
-                        throw new TransitiveArtifactResolutionException( e.getMessage(), newArtifact,
-                                                                         remoteRepositories, e );
-                    }
-
-                    // the pom for given dependency exisit we will add it to the
-                    // queue
-                    queue.add( referencedDependencies );
-                }
+                set.add( node.getArtifact() );
-        result.setArtifacts( new HashSet( resolvedArtifacts.values() ) );
+        ArtifactResolutionResult result = new ArtifactResolutionResult();
+
+        result.setArtifacts( set );
-    private void addConflict( ArtifactResolutionResult result, Artifact knownArtifact, Artifact newArtifact )
+    private void recurse( ResolutionNode node, Map resolvedArtifacts, ArtifactRepository localRepository,
+                          List remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter,
+                          ArtifactFactory artifactFactory )
+        throws ArtifactResolutionException
-        List conflicts;
-
-        conflicts = (List) result.getConflicts().get( newArtifact.getDependencyConflictId() );
-
-        if ( conflicts == null )
+        ResolutionNode previous = (ResolutionNode) resolvedArtifacts.get( node.getKey() );
+        if ( previous != null )
-            conflicts = new LinkedList();
+            // TODO: conflict resolvers
-            conflicts.add( knownArtifact );
+            // previous one is more dominant
+            if ( previous.getDepth() <= node.getDepth() )
+            {
+                boolean updateScope = false;
+                Artifact newArtifact = node.getArtifact();
+                Artifact previousArtifact = previous.getArtifact();
-            result.getConflicts().put( newArtifact.getDependencyConflictId(), conflicts );
+                if ( Artifact.SCOPE_RUNTIME.equals( newArtifact.getScope() ) &&
+                    ( Artifact.SCOPE_TEST.equals( previousArtifact.getScope() ) ||
+                        Artifact.SCOPE_PROVIDED.equals( previousArtifact.getScope() ) ) )
+                {
+                    updateScope = true;
+                }
+
+                if ( Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) &&
+                    !Artifact.SCOPE_COMPILE.equals( previousArtifact.getScope() ) )
+                {
+                    updateScope = true;
+                }
+
+                if ( updateScope )
+                {
+                    Artifact artifact = artifactFactory.createArtifact( previousArtifact.getGroupId(),
+                                                                        previousArtifact.getArtifactId(),
+                                                                        previousArtifact.getVersion(),
+                                                                        newArtifact.getScope(),
+                                                                        previousArtifact.getType() );
+                    // TODO: can I just change the scope?
+                    previous.setArtifact( artifact );
+                }
+
+                return;
+            }
+            else
+            {
+                boolean updateScope = false;
+                Artifact previousArtifact = previous.getArtifact();
+                Artifact newArtifact = node.getArtifact();
+
+                if ( Artifact.SCOPE_RUNTIME.equals( previousArtifact.getScope() ) &&
+                    ( Artifact.SCOPE_TEST.equals( newArtifact.getScope() ) ||
+                        Artifact.SCOPE_PROVIDED.equals( newArtifact.getScope() ) ) )
+                {
+                    updateScope = true;
+                }
+
+                if ( Artifact.SCOPE_COMPILE.equals( previousArtifact.getScope() ) &&
+                    !Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) )
+                {
+                    updateScope = true;
+                }
+
+                if ( updateScope )
+                {
+                    Artifact artifact = artifactFactory.createArtifact( newArtifact.getGroupId(),
+                                                                        newArtifact.getArtifactId(),
+                                                                        newArtifact.getVersion(),
+                                                                        previousArtifact.getScope(),
+                                                                        newArtifact.getType() );
+                    // TODO: can I just change the scope?
+                    node.setArtifact( artifact );
+                }
+
+            }
-        conflicts.add( newArtifact );
+        resolvedArtifacts.put( node.getKey(), node );
+
+        for ( Iterator i = node.getChildrenIterator(); i.hasNext(); )
+        {
+            ResolutionNode child = (ResolutionNode) i.next();
+            if ( !child.isResolved() )
+            {
+                try
+                {
+                    Set artifacts = source.retrieve( child.getArtifact(), localRepository, remoteRepositories );
+                    child.addDependencies( artifacts, filter );
+                }
+                catch ( ArtifactMetadataRetrievalException e )
+                {
+                    throw new TransitiveArtifactResolutionException( e.getMessage(), child.getArtifact(),
+                                                                     remoteRepositories, e );
+                }
+
+                recurse( child, resolvedArtifacts, localRepository, remoteRepositories, source, filter,
+                         artifactFactory );
+            }
+        }
+    }
+
+
+    private static class ResolutionNode
+    {
+        private Artifact artifact;
+
+        private final ResolutionNode parent;
+
+        private List children = null;
+
+        private final int depth;
+
+        public ResolutionNode( Artifact artifact )
+        {
+            this.artifact = artifact;
+            this.parent = null;
+            this.depth = 0;
+        }
+
+        public ResolutionNode( Artifact artifact, ResolutionNode parent )
+        {
+            this.artifact = artifact;
+            this.parent = parent;
+            this.depth = parent.depth + 1;
+        }
+
+        public Artifact getArtifact()
+        {
+            return artifact;
+        }
+
+        public Object getKey()
+        {
+            return artifact.getDependencyConflictId();
+        }
+
+        public void addDependencies( Set artifacts, ArtifactFilter filter )
+        {
+            children = new ArrayList( artifacts.size() );
+
+            for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+            {
+                Artifact a = (Artifact) i.next();
+
+                if ( filter == null || filter.include( a ) )
+                {
+                    children.add( new ResolutionNode( a, this ) );
+                }
+            }
+        }
+
+        public boolean isResolved()
+        {
+            return children != null;
+        }
+
+        public Iterator getChildrenIterator()
+        {
+            return children.iterator();
+        }
+
+        public int getDepth()
+        {
+            return depth;
+        }
+
+        public void setArtifact( Artifact artifact )
+        {
+            this.artifact = artifact;
+        }
