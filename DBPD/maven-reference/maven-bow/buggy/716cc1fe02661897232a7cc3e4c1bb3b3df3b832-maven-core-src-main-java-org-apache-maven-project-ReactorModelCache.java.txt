[MNG-5669] same pom.xml is read multiple times

+import org.apache.maven.building.Source;
+import java.util.Objects;
-    private final Map<CacheKey, Object> models = new ConcurrentHashMap<>( 256 );
+    private final Map<Object, Object> models = new ConcurrentHashMap<>( 256 );
+    @Override
-        return models.get( new CacheKey( groupId, artifactId, version, tag ) );
+        return models.get( new GavCacheKey( groupId, artifactId, version, tag ) );
+    @Override
-        models.put( new CacheKey( groupId, artifactId, version, tag ), data );
+        models.put( new GavCacheKey( groupId, artifactId, version, tag ), data );
-    private static final class CacheKey
+    @Override
+    public Object get( Source source, String tag )
+    {
+        return models.get( new SourceCacheKey( source, tag ) );
+    }
+
+    @Override
+    public void put( Source source, String tag, Object data )
+    {
+        models.put( new SourceCacheKey( source, tag ), data );
+    }
+
+    private static final class GavCacheKey
-        CacheKey( String groupId, String artifactId, String version, String tag )
+        GavCacheKey( String groupId, String artifactId, String version, String tag )
-            if ( !( obj instanceof CacheKey ) )
+            if ( !( obj instanceof GavCacheKey ) )
-            CacheKey that = (CacheKey) obj;
+            GavCacheKey that = (GavCacheKey) obj;
+    
+    private static final class SourceCacheKey
+    {
+        private final Source source;
+        
+        private final String tag;
+        
+        private final int hashCode;
+
+        SourceCacheKey( Source source, String tag )
+        {
+            this.source = source;
+            this.tag = tag;
+            this.hashCode = Objects.hash( source, tag );
+        }
+
+        @Override
+        public int hashCode()
+        {
+            return hashCode;
+        }
+
+        @Override
+        public boolean equals( Object obj )
+        {
+            if ( this == obj ) 
+            {
+                return true;
+            }
+            if ( !( obj instanceof SourceCacheKey ) )
+            {
+                return false;
+            }
+            
+            SourceCacheKey other = (SourceCacheKey) obj;
+            if ( !Objects.equals( this.source, other.source ) )
+            {
+                    return false;
+            }
+            
+            if ( !Objects.equals( this.tag, other.tag ) )
+            {
+                    return false;
+            }
+
+            return true;
+        }
+    }
