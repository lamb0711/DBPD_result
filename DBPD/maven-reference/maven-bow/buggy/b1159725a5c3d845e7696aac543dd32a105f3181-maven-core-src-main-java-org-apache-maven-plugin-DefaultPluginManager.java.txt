fixing formats at top of file (may be other formatting changes...)

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@574387 13f79535-47bb-0310-9956-ffa450edef68

-    package org.apache.maven.plugin;
+package org.apache.maven.plugin;
-    import org.apache.maven.ArtifactFilterManager;
-    import org.apache.maven.artifact.Artifact;
-    import org.apache.maven.artifact.factory.ArtifactFactory;
-    import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
-    import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
-    import org.apache.maven.artifact.metadata.ResolutionGroup;
-    import org.apache.maven.artifact.repository.ArtifactRepository;
-    import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-    import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-    import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
-    import org.apache.maven.artifact.resolver.ArtifactResolver;
-    import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-    import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
-    import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
-    import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
-    import org.apache.maven.artifact.versioning.VersionRange;
-    import org.apache.maven.context.BuildContextManager;
-    import org.apache.maven.execution.MavenSession;
-    import org.apache.maven.execution.RuntimeInformation;
-    import org.apache.maven.lifecycle.LifecycleExecutionContext;
-    import org.apache.maven.lifecycle.statemgmt.StateManagementUtils;
-    import org.apache.maven.model.Plugin;
-    import org.apache.maven.model.ReportPlugin;
-    import org.apache.maven.monitor.event.EventDispatcher;
-    import org.apache.maven.monitor.event.MavenEvents;
-    import org.apache.maven.monitor.logging.DefaultLog;
-    import org.apache.maven.plugin.descriptor.MojoDescriptor;
-    import org.apache.maven.plugin.descriptor.Parameter;
-    import org.apache.maven.plugin.descriptor.PluginDescriptor;
-    import org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;
-    import org.apache.maven.plugin.logging.Log;
-    import org.apache.maven.plugin.version.PluginVersionManager;
-    import org.apache.maven.plugin.version.PluginVersionNotFoundException;
-    import org.apache.maven.plugin.version.PluginVersionResolutionException;
-    import org.apache.maven.project.MavenProject;
-    import org.apache.maven.project.MavenProjectBuilder;
-    import org.apache.maven.project.ProjectBuildingException;
-    import org.apache.maven.project.artifact.InvalidDependencyVersionException;
-    import org.apache.maven.project.artifact.MavenMetadataSource;
-    import org.apache.maven.project.path.PathTranslator;
-    import org.apache.maven.reporting.MavenReport;
-    import org.codehaus.plexus.PlexusConstants;
-    import org.codehaus.plexus.PlexusContainer;
-    import org.codehaus.plexus.PlexusContainerException;
-    import org.codehaus.plexus.classworlds.realm.ClassRealm;
-    import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;
-    import org.codehaus.plexus.component.configurator.ComponentConfigurationException;
-    import org.codehaus.plexus.component.configurator.ComponentConfigurator;
-    import org.codehaus.plexus.component.configurator.ConfigurationListener;
-    import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
-    import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;
-    import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
-    import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-    import org.codehaus.plexus.configuration.PlexusConfiguration;
-    import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
-    import org.codehaus.plexus.context.Context;
-    import org.codehaus.plexus.context.ContextException;
-    import org.codehaus.plexus.logging.AbstractLogEnabled;
-    import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
-    import org.codehaus.plexus.util.StringUtils;
-    import org.codehaus.plexus.util.xml.Xpp3Dom;
+import org.apache.maven.ArtifactFilterManager;
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.factory.ArtifactFactory;
+import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
+import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
+import org.apache.maven.artifact.metadata.ResolutionGroup;
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
+import org.apache.maven.artifact.resolver.ArtifactResolver;
+import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
+import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
+import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+import org.apache.maven.artifact.versioning.VersionRange;
+import org.apache.maven.context.BuildContextManager;
+import org.apache.maven.execution.MavenSession;
+import org.apache.maven.execution.RuntimeInformation;
+import org.apache.maven.lifecycle.LifecycleExecutionContext;
+import org.apache.maven.lifecycle.statemgmt.StateManagementUtils;
+import org.apache.maven.model.Plugin;
+import org.apache.maven.model.ReportPlugin;
+import org.apache.maven.monitor.event.EventDispatcher;
+import org.apache.maven.monitor.event.MavenEvents;
+import org.apache.maven.monitor.logging.DefaultLog;
+import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import org.apache.maven.plugin.descriptor.Parameter;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;
+import org.apache.maven.plugin.logging.Log;
+import org.apache.maven.plugin.version.PluginVersionManager;
+import org.apache.maven.plugin.version.PluginVersionNotFoundException;
+import org.apache.maven.plugin.version.PluginVersionResolutionException;
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.ProjectBuildingException;
+import org.apache.maven.project.artifact.InvalidDependencyVersionException;
+import org.apache.maven.project.artifact.MavenMetadataSource;
+import org.apache.maven.project.path.PathTranslator;
+import org.apache.maven.reporting.MavenReport;
+import org.codehaus.plexus.PlexusConstants;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.PlexusContainerException;
+import org.codehaus.plexus.classworlds.realm.ClassRealm;
+import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;
+import org.codehaus.plexus.component.configurator.ComponentConfigurationException;
+import org.codehaus.plexus.component.configurator.ComponentConfigurator;
+import org.codehaus.plexus.component.configurator.ConfigurationListener;
+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;
+import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.codehaus.plexus.configuration.PlexusConfiguration;
+import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
+import org.codehaus.plexus.context.Context;
+import org.codehaus.plexus.context.ContextException;
+import org.codehaus.plexus.logging.AbstractLogEnabled;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
+import org.codehaus.plexus.util.StringUtils;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
-    import java.util.ArrayList;
-    import java.util.Collection;
-    import java.util.Collections;
-    import java.util.HashSet;
-    import java.util.Iterator;
-    import java.util.LinkedHashSet;
-    import java.util.List;
-    import java.util.Map;
-    import java.util.Set;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
-        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException,
-        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException,
-        PluginVersionNotFoundException
+        throws ArtifactResolutionException, PluginVersionResolutionException,
+        ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException,
+        PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
-            String version = pluginVersionManager.resolvePluginVersion( plugin.getGroupId(), plugin.getArtifactId(),
+            String version = pluginVersionManager.resolvePluginVersion( plugin.getGroupId(),
+                                                                        plugin.getArtifactId(),
-        throws PluginVersionResolutionException, ArtifactNotFoundException, ArtifactResolutionException,
-        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException
+        throws PluginVersionResolutionException, ArtifactNotFoundException,
+        ArtifactResolutionException, InvalidVersionSpecificationException, InvalidPluginException,
+        PluginManagerException, PluginNotFoundException
-    private PluginDescriptor verifyVersionedPlugin( Plugin plugin, MavenProject project,
+    private PluginDescriptor verifyVersionedPlugin( Plugin plugin,
+                                                    MavenProject project,
-        throws PluginVersionResolutionException, ArtifactNotFoundException, ArtifactResolutionException,
-        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException
+        throws PluginVersionResolutionException, ArtifactNotFoundException,
+        ArtifactResolutionException, InvalidVersionSpecificationException, InvalidPluginException,
+        PluginManagerException, PluginNotFoundException
-                Artifact pluginArtifact =
-                    artifactFactory.createPluginArtifact( plugin.getGroupId(), plugin.getArtifactId(), versionRange );
+                Artifact pluginArtifact = artifactFactory.createPluginArtifact(
+                                                                                plugin.getGroupId(),
+                                                                                plugin.getArtifactId(),
+                                                                                versionRange );
-                artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );
+                artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(),
+                                          localRepository );
-                getLogger().debug( "Skipping resolution for Maven built-in plugin: " + plugin.getKey() );
+                getLogger().debug(
+                                   "Skipping resolution for Maven built-in plugin: "
+                                                   + plugin.getKey() );
-            else if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
-                version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
+            else if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() )
+                      && version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
-            Artifact artifact = artifactFactory.createProjectArtifact( plugin.getGroupId(), plugin.getArtifactId(),
+            Artifact artifact = artifactFactory.createProjectArtifact( plugin.getGroupId(),
+                                                                       plugin.getArtifactId(),
-            MavenProject project =
-                mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories, localRepository, false );
+            MavenProject project = mavenProjectBuilder.buildFromRepository( artifact,
+                                                                            remoteRepositories,
+                                                                            localRepository, false );
-            if ( ( project.getPrerequisites() != null ) && ( project.getPrerequisites().getMaven() != null ) )
+            if ( ( project.getPrerequisites() != null )
+                 && ( project.getPrerequisites().getMaven() != null ) )
-                DefaultArtifactVersion requiredVersion =
-                    new DefaultArtifactVersion( project.getPrerequisites().getMaven() );
+                DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
+                                                                                     project.getPrerequisites()
+                                                                                            .getMaven() );
-                    throw new PluginVersionResolutionException( plugin.getGroupId(), plugin.getArtifactId(),
-                                                                "Plugin requires Maven version " + requiredVersion );
+                    throw new PluginVersionResolutionException( plugin.getGroupId(),
+                                                                plugin.getArtifactId(),
+                                                                "Plugin requires Maven version "
+                                                                                + requiredVersion );
-            throw new InvalidPluginException(
-                "Unable to build project for plugin '" + plugin.getKey() + "': " + e.getMessage(), e );
+            throw new InvalidPluginException( "Unable to build project for plugin '"
+                                              + plugin.getKey() + "': " + e.getMessage(), e );
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException, InvalidPluginException
+        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException,
+        InvalidPluginException
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException, InvalidPluginException
+        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException,
+        InvalidPluginException
-        Set artifacts = getPluginArtifacts( pluginArtifact, projectPlugin, project, session.getLocalRepository() );
+        Set artifacts = getPluginArtifacts( pluginArtifact, projectPlugin, project,
+                                            session.getLocalRepository() );
-    private void addPlugin( Plugin plugin, Plugin projectPlugin, Artifact pluginArtifact, Set artifacts )
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException, InvalidPluginException
+    private void addPlugin( Plugin plugin,
+                            Plugin projectPlugin,
+                            Artifact pluginArtifact,
+                            Set artifacts )
+        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException,
+        InvalidPluginException
-            getLogger().debug( "Realm already exists for: " + projectPlugin.getKey() + ". Skipping addition..." );
+            getLogger().debug(
+                               "Realm already exists for: " + projectPlugin.getKey()
+                                               + ". Skipping addition..." );
-            componentRealm.importFrom( componentRealm.getParentRealm().getId(), Xpp3Dom.class.getName() );
-            componentRealm.importFrom( componentRealm.getParentRealm().getId(), "org.codehaus.plexus.util.xml.pull" );            
+            componentRealm.importFrom( componentRealm.getParentRealm().getId(),
+                                       Xpp3Dom.class.getName() );
+            componentRealm.importFrom( componentRealm.getParentRealm().getId(),
+                                       "org.codehaus.plexus.util.xml.pull" );
-            throw new PluginManagerException( "Failed to create realm for plugin '" + projectPlugin + ".", e );
+            throw new PluginManagerException( "Failed to create realm for plugin '" + projectPlugin
+                                              + ".", e );
-            throw new PluginManagerException( "Failed to import Xpp3Dom from parent realm for plugin: '" + projectPlugin + ".", e );
+            throw new PluginManagerException(
+                                              "Failed to import Xpp3Dom from parent realm for plugin: '"
+                                                              + projectPlugin + ".", e );
-        getLogger().debug( "Checking for plugin descriptor for: " + plugin.getKey() + " in collector: " + pluginCollector );
+        getLogger().debug(
+                           "Checking for plugin descriptor for: " + plugin.getKey()
+                                           + " in collector: " + pluginCollector );
-            throw new IllegalStateException(
-                "The PluginDescriptor for the plugin " + projectPlugin.getKey() + " was not found" );
+            throw new IllegalStateException( "The PluginDescriptor for the plugin "
+                                             + projectPlugin.getKey() + " was not found" );
-    private Set getPluginArtifacts( Artifact pluginArtifact, Plugin plugin, MavenProject project,
+    private Set getPluginArtifacts( Artifact pluginArtifact,
+                                    Plugin plugin,
+                                    MavenProject project,
-            projectPluginDependencies = MavenMetadataSource.createArtifacts( artifactFactory, plugin.getDependencies(), null,
-                                                             coreArtifactFilterManager.getCoreArtifactFilter(), project );
+            projectPluginDependencies = MavenMetadataSource.createArtifacts(
+                                                                             artifactFactory,
+                                                                             plugin.getDependencies(),
+                                                                             null,
+                                                                             coreArtifactFilterManager.getCoreArtifactFilter(),
+                                                                             project );
-            throw new InvalidPluginException( "Plugin '" + plugin + "' is invalid: " + e.getMessage(), e );
+            throw new InvalidPluginException( "Plugin '" + plugin + "' is invalid: "
+                                              + e.getMessage(), e );
-            resolutionGroup = artifactMetadataSource.retrieve( pluginArtifact, localRepository,
+            resolutionGroup = artifactMetadataSource.retrieve(
+                                                               pluginArtifact,
+                                                               localRepository,
-            throw new ArtifactResolutionException( "Unable to download metadata from repository for plugin '" +
-                pluginArtifact.getId() + "': " + e.getMessage(), pluginArtifact, e );
+            throw new ArtifactResolutionException(
+                                                   "Unable to download metadata from repository for plugin '"
+                                                                   + pluginArtifact.getId() + "': "
+                                                                   + e.getMessage(),
+                                                   pluginArtifact, e );
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively( dependencies, pluginArtifact,
+        ArtifactResolutionResult result = artifactResolver.resolveTransitively(
+                                                                                dependencies,
+                                                                                pluginArtifact,
-                                                                                localRepository, repositories,
+                                                                                localRepository,
+                                                                                repositories,
-        getLogger().debug( "Using the following artifacts for classpath of: " + pluginArtifact.getId() + ":\n\n" + resolved.toString().replace( ',', '\n' ) );
+        getLogger().debug(
+                           "Using the following artifacts for classpath of: "
+                                           + pluginArtifact.getId() + ":\n\n"
+                                           + resolved.toString().replace( ',', '\n' ) );
-        throws ArtifactResolutionException, MojoExecutionException, MojoFailureException, ArtifactNotFoundException,
-        InvalidDependencyVersionException, PluginManagerException, PluginConfigurationException
+        throws ArtifactResolutionException, MojoExecutionException, MojoFailureException,
+        ArtifactNotFoundException, InvalidDependencyVersionException, PluginManagerException,
+        PluginConfigurationException
-            throw new MojoExecutionException( "Cannot execute mojo: " + mojoDescriptor.getGoal() +
-                ". It requires a project with an existing pom.xml, but the build is not using one." );
+            throw new MojoExecutionException(
+                                              "Cannot execute mojo: "
+                                                              + mojoDescriptor.getGoal()
+                                                              + ". It requires a project with an existing pom.xml, but the build is not using one." );
-            throw new MojoExecutionException( "Mojo: " + mojoDescriptor.getGoal() +
-                " requires online mode for execution. Maven is currently offline." );
+            throw new MojoExecutionException(
+                                              "Mojo: "
+                                                              + mojoDescriptor.getGoal()
+                                                              + " requires online mode for execution. Maven is currently offline." );
-                                               mojoDescriptor.isDependencyResolutionRequired(), artifactFactory, p );
+                                               mojoDescriptor.isDependencyResolutionRequired(),
+                                               artifactFactory, p );
-        Xpp3Dom dom = project.getReportConfiguration( descriptor.getGroupId(), descriptor.getArtifactId(),
+        Xpp3Dom dom = project.getReportConfiguration( descriptor.getGroupId(),
+                                                      descriptor.getArtifactId(),
-        throws PluginVersionResolutionException, ArtifactResolutionException, ArtifactNotFoundException,
-        InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException,
-        PluginVersionNotFoundException
+        throws PluginVersionResolutionException, ArtifactResolutionException,
+        ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException,
+        PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
-            version = pluginVersionManager.resolveReportPluginVersion( reportPlugin.getGroupId(),
-                                                                       reportPlugin.getArtifactId(), project, session );
+            version = pluginVersionManager.resolveReportPluginVersion(
+                                                                       reportPlugin.getGroupId(),
+                                                                       reportPlugin.getArtifactId(),
+                                                                       project, session );
-                getLogger().debug( "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm " + realm.getId() + " - descRealmId=" + mojoDescriptor.getRealmId()  );
+                getLogger().debug(
+                                   "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm "
+                                                   + realm.getId() + " - descRealmId="
+                                                   + mojoDescriptor.getRealmId() );
-                    getLogger().debug( "Looked up - " + plugin + " - " + plugin.getClass().getClassLoader() );
+                    getLogger().debug(
+                                       "Looked up - " + plugin + " - "
+                                                       + plugin.getClass().getClassLoader() );
-                    getLogger().warn("No luck.");
+                    getLogger().warn( "No luck." );
-                getLogger().info( "Looking up mojo " + mojoDescriptor.getRoleHint() + " in default realm " + container.getLookupRealm() + " - descRealmId=" + mojoDescriptor.getRealmId()  );
+                getLogger().info(
+                                  "Looking up mojo " + mojoDescriptor.getRoleHint()
+                                                  + " in default realm "
+                                                  + container.getLookupRealm() + " - descRealmId="
+                                                  + mojoDescriptor.getRealmId() );
-                    getLogger().info( "Looked up - " + plugin + " - " + plugin.getClass().getClassLoader() );
+                    getLogger().info(
+                                      "Looked up - " + plugin + " - "
+                                                      + plugin.getClass().getClassLoader() );
-                    getLogger().warn("No luck.");
+                    getLogger().warn( "No luck." );
-
-
-            throw new PluginManagerException( "Unable to find the mojo '" + mojoDescriptor.getRoleHint() +
-                "' in the plugin '" + pluginDescriptor.getPluginLookupKey() + "'", e );
+            throw new PluginManagerException( "Unable to find the mojo '"
+                                              + mojoDescriptor.getRoleHint() + "' in the plugin '"
+                                              + pluginDescriptor.getPluginLookupKey() + "'", e );
-
-        PlexusConfiguration mergedConfiguration = mergeMojoConfiguration( pomConfiguration, mojoDescriptor );
+        PlexusConfiguration mergedConfiguration = mergeMojoConfiguration( pomConfiguration,
+                                                                          mojoDescriptor );
-        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, mojoExecution, pathTranslator,
-                                                                                          ctx, getLogger(),
+        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator(
+                                                                                          session,
+                                                                                          mojoExecution,
+                                                                                          pathTranslator,
+                                                                                          ctx,
+                                                                                          getLogger(),
-        PlexusConfiguration extractedMojoConfiguration =
-            extractMojoConfiguration( mergedConfiguration, mojoDescriptor );
+        PlexusConfiguration extractedMojoConfiguration = extractMojoConfiguration(
+                                                                                   mergedConfiguration,
+                                                                                   mojoDescriptor );
-        populatePluginFields( plugin, mojoDescriptor, extractedMojoConfiguration, container, expressionEvaluator );
+        populatePluginFields( plugin, mojoDescriptor, extractedMojoConfiguration, container,
+                              expressionEvaluator );
-                getLogger().debug( "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'" +
-                    mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***" );
+                getLogger().debug(
+                                   "*** WARNING: Configuration \'" + child.getName()
+                                                   + "\' is not used in goal \'"
+                                                   + mojoDescriptor.getFullGoalName()
+                                                   + "; this may indicate a typo... ***" );
-                    throw new PluginConfigurationException( goal.getPluginDescriptor(), e.getMessage(), e );
+                    throw new PluginConfigurationException( goal.getPluginDescriptor(),
+                                                            e.getMessage(), e );
-                if ( ( fieldValue == null ) && ( ( value == null ) || ( value.getChildCount() == 0 ) ) )
+                if ( ( fieldValue == null )
+                     && ( ( value == null ) || ( value.getChildCount() == 0 ) ) )
-                    StringBuffer errorMessage = new StringBuffer()
-                        .append( "ERROR: Cannot override read-only parameter: " );
+                    StringBuffer errorMessage = new StringBuffer().append( "ERROR: Cannot override read-only parameter: " );
-                    throw new PluginConfigurationException( goal.getPluginDescriptor(), errorMessage.toString() );
+                    throw new PluginConfigurationException( goal.getPluginDescriptor(),
+                                                            errorMessage.toString() );
-                    if ( StringUtils.isNotEmpty( pomConfig.getValue( null ) ) || ( pomConfig.getChildCount() > 0 ) )
+                    if ( StringUtils.isNotEmpty( pomConfig.getValue( null ) )
+                         || ( pomConfig.getChildCount() > 0 ) )
-                    if ( ( implementation != null ) && ( toAdd.getAttribute( "implementation", null ) == null ) )
+                    if ( ( implementation != null )
+                         && ( toAdd.getAttribute( "implementation", null ) == null ) )
-                        XmlPlexusConfiguration implementationConf = new XmlPlexusConfiguration( paramName );
+                        XmlPlexusConfiguration implementationConf = new XmlPlexusConfiguration(
+                                                                                                paramName );
-                        implementationConf.setAttribute( "implementation", parameter.getImplementation() );
+                        implementationConf.setAttribute( "implementation",
+                                                         parameter.getImplementation() );
-            PlexusConfiguration childRec = recessive == null ? null : recessive.getChild( childDom.getName(), false );
+            PlexusConfiguration childRec = recessive == null ? null
+                            : recessive.getChild( childDom.getName(), false );
-            {   // FIXME: copy, or use reference?
+            { // FIXME: copy, or use reference?
-                configurator =
-                    (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, configuratorId, pluginRealm );
+                configurator = (ComponentConfigurator) pluginContainer.lookup(
+                                                                               ComponentConfigurator.ROLE,
+                                                                               configuratorId,
+                                                                               pluginRealm );
-                configurator = (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, "basic", pluginRealm );
+                configurator = (ComponentConfigurator) pluginContainer.lookup(
+                                                                               ComponentConfigurator.ROLE,
+                                                                               "basic", pluginRealm );
-            configurator.configureComponent( plugin, configuration, expressionEvaluator, pluginRealm, listener );
+            configurator.configureComponent( plugin, configuration, expressionEvaluator,
+                                             pluginRealm, listener );
-            throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(),
-                                                    "Unable to parse the created DOM for plugin configuration", e );
+            throw new PluginConfigurationException(
+                                                    mojoDescriptor.getPluginDescriptor(),
+                                                    "Unable to parse the created DOM for plugin configuration",
+                                                    e );
-            throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(),
+            throw new PluginConfigurationException(
+                                                    mojoDescriptor.getPluginDescriptor(),
-        throws ArtifactResolutionException, ArtifactNotFoundException, InvalidDependencyVersionException
+        throws ArtifactResolutionException, ArtifactNotFoundException,
+        InvalidDependencyVersionException
-        Artifact artifact = artifactFactory.createBuildArtifact( project.getGroupId(), project.getArtifactId(),
-                                                                 project.getVersion(), project.getPackaging() );
+        Artifact artifact = artifactFactory.createBuildArtifact( project.getGroupId(),
+                                                                 project.getArtifactId(),
+                                                                 project.getVersion(),
+                                                                 project.getPackaging() );
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getDependencyArtifacts(),
+        ArtifactResolutionResult result = artifactResolver.resolveTransitively(
+                                                                                project.getDependencyArtifacts(),
-                                                                                artifactMetadataSource, filter );
+                                                                                artifactMetadataSource,
+                                                                                filter );
-    public Object getPluginComponent( Plugin plugin, String role, String roleHint )
+    public Object getPluginComponent( Plugin plugin,
+                                      String role,
+                                      String roleHint )
-            getLogger().warn( "getPluginComponent(" + plugin + ", " + role + "): descriptor is missing classRealm" );
+            getLogger().warn(
+                              "getPluginComponent(" + plugin + ", " + role
+                                              + "): descriptor is missing classRealm" );
-    public Map getPluginComponents( Plugin plugin, String role )
+    public Map getPluginComponents( Plugin plugin,
+                                    String role )
-            getLogger().warn( "getPluginComponent(" + plugin + ", " + role + "): descriptor is missing classRealm" );
+            getLogger().warn(
+                              "getPluginComponent(" + plugin + ", " + role
+                                              + "): descriptor is missing classRealm" );
-    public static void checkPlexusUtils( ResolutionGroup resolutionGroup, ArtifactFactory artifactFactory )
+    public static void checkPlexusUtils( ResolutionGroup resolutionGroup,
+                                         ArtifactFactory artifactFactory )
-            if ( a.getArtifactId().equals( "plexus-utils" ) &&
-                vr.containsVersion( new DefaultArtifactVersion( a.getVersion() ) ) )
+            if ( a.getArtifactId().equals( "plexus-utils" )
+                 && vr.containsVersion( new DefaultArtifactVersion( a.getVersion() ) ) )
-            resolutionGroup.getArtifacts().add( artifactFactory.createArtifact( "org.codehaus.plexus",
-                                                                                "plexus-utils", "1.1",
-                                                                                Artifact.SCOPE_RUNTIME, "jar" ) );
+            resolutionGroup.getArtifacts()
+                           .add(
+                                 artifactFactory.createArtifact( "org.codehaus.plexus",
+                                                                 "plexus-utils", "1.1",
+                                                                 Artifact.SCOPE_RUNTIME, "jar" ) );
