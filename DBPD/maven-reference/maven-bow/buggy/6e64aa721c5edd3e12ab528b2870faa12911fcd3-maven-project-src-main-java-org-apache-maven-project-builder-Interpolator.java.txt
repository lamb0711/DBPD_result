o preparing to refactor the plugin management and plugin executions calculations


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@726381 13f79535-47bb-0310-9956-ffa450edef68

-/**
- * 
- */
-public class Interpolator {
+public class Interpolator
+{
+    // Only used by the plugin manager
-            throws IOException
+        throws IOException
-        List<ModelProperty> modelProperties =
-            ModelMarshaller.marshallXmlToModelProperties( new ByteArrayInputStream(xml.getBytes()), ProjectUri.baseUri,
-                    PomTransformer.URIS );
+        List<ModelProperty> modelProperties = ModelMarshaller.marshallXmlToModelProperties( new ByteArrayInputStream( xml.getBytes() ), ProjectUri.baseUri, PomTransformer.URIS );
-        aliases.put( "project.", "pom.");
+        aliases.put( "project.", "pom." );
-        List<InterpolatorProperty> ips = new ArrayList<InterpolatorProperty>(interpolatorProperties);
-        ips.addAll(ModelTransformerContext.createInterpolatorProperties(modelProperties, ProjectUri.baseUri, aliases,
-                        PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false));
+        List<InterpolatorProperty> ips = new ArrayList<InterpolatorProperty>( interpolatorProperties );
+        ips.addAll( ModelTransformerContext.createInterpolatorProperties( modelProperties, ProjectUri.baseUri, aliases, PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false ) );
-        for(ModelProperty mp : modelProperties)
+        for ( ModelProperty mp : modelProperties )
-            if(mp.getUri().startsWith(ProjectUri.properties) && mp.getValue() != null )
+            if ( mp.getUri().startsWith( ProjectUri.properties ) && mp.getValue() != null )
-                ips.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1,
-                        uri.length() ) + "}", mp.getValue() ) );
+                ips.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1, uri.length() ) + "}", mp.getValue() ) );
-    public static String interpolateModelAsString(Model model, List<InterpolatorProperty> interpolatorProperties, File projectDirectory)
-            throws IOException
+    private static String interpolateModelAsString( Model model, List<InterpolatorProperty> interpolatorProperties, File projectDirectory )
+        throws IOException
-        List<ModelProperty> modelProperties =
-                ModelMarshaller.marshallXmlToModelProperties( domainModel.getInputStream(), ProjectUri.baseUri, PomTransformer.URIS );
-        interpolateModelProperties( modelProperties, interpolatorProperties, domainModel);
+        List<ModelProperty> modelProperties = ModelMarshaller.marshallXmlToModelProperties( domainModel.getInputStream(), ProjectUri.baseUri, PomTransformer.URIS );
+        interpolateModelProperties( modelProperties, interpolatorProperties, domainModel );
-    public static Model interpolateModel(Model model, List<InterpolatorProperty> interpolatorProperties, File projectDirectory)
+    public static Model interpolateModel( Model model, List<InterpolatorProperty> interpolatorProperties, File projectDirectory )
-        PomClassicDomainModel domainModel = new PomClassicDomainModel( new ByteArrayInputStream( pomXml.getBytes() ));
+        PomClassicDomainModel domainModel = new PomClassicDomainModel( new ByteArrayInputStream( pomXml.getBytes() ) );
-        aliases.put( "\\$\\{project\\.", "\\$\\{pom\\.");
+        aliases.put( "\\$\\{project\\.", "\\$\\{pom\\." );
-    public static void interpolateModelProperties(List<ModelProperty> modelProperties,
-                                                   List<InterpolatorProperty> interpolatorProperties,
-                                                   PomClassicDomainModel domainModel)
-           throws IOException
+    public static void interpolateModelProperties( List<ModelProperty> modelProperties, List<InterpolatorProperty> interpolatorProperties, PomClassicDomainModel domainModel )
+        throws IOException
-        if(!containsProjectVersion(interpolatorProperties))
+        if ( !containsProjectVersion( interpolatorProperties ) )
-            aliases.put("\\$\\{project.version\\}", "\\$\\{version\\}");
+            aliases.put( "\\$\\{project.version\\}", "\\$\\{version\\}" );
-        ModelProperty buildProperty = new ModelProperty(ProjectUri.Build.xUri, null);
-        for(ModelProperty mp : modelProperties)
+        ModelProperty buildProperty = new ModelProperty( ProjectUri.Build.xUri, null );
+        for ( ModelProperty mp : modelProperties )
-            if( mp.getValue() != null && !mp.getUri().contains( "#property" ) && !mp.getUri().contains( "#collection" ))
+            if ( mp.getValue() != null && !mp.getUri().contains( "#property" ) && !mp.getUri().contains( "#collection" ) )
-                if( (!buildProperty.isParentOf( mp ) && !mp.getUri().equals(ProjectUri.Reporting.outputDirectory)
-                        || mp.getUri().equals(ProjectUri.Build.finalName ) ))
+                if ( ( !buildProperty.isParentOf( mp ) && !mp.getUri().equals( ProjectUri.Reporting.outputDirectory ) || mp.getUri().equals( ProjectUri.Build.finalName ) ) )
-                    firstPassModelProperties.add(mp);
+                    firstPassModelProperties.add( mp );
-                    secondPassModelProperties.add(mp);
+                    secondPassModelProperties.add( mp );
-
-        if(domainModel.isPomInBuild())
+        if ( domainModel.isPomInBuild() )
-            standardInterpolatorProperties.add(new InterpolatorProperty("${project.basedir}", basedir,
-                    PomInterpolatorTag.PROJECT_PROPERTIES.name() ));
-            standardInterpolatorProperties.add(new InterpolatorProperty("${basedir}", basedir,
-                    PomInterpolatorTag.PROJECT_PROPERTIES.name() ));
-            standardInterpolatorProperties.add(new InterpolatorProperty("${pom.basedir}", basedir,
-                    PomInterpolatorTag.PROJECT_PROPERTIES.name() ));
+            standardInterpolatorProperties.add( new InterpolatorProperty( "${project.basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+            standardInterpolatorProperties.add( new InterpolatorProperty( "${basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+            standardInterpolatorProperties.add( new InterpolatorProperty( "${pom.basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-        for(ModelProperty mp : modelProperties)
+        for ( ModelProperty mp : modelProperties )
-            if(mp.getUri().startsWith(ProjectUri.properties) && mp.getValue() != null )
+            if ( mp.getUri().startsWith( ProjectUri.properties ) && mp.getValue() != null )
-                standardInterpolatorProperties.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1,
-                        uri.length() ) + "}", mp.getValue(), PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+                standardInterpolatorProperties.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1, uri.length() ) + "}", mp.getValue(),
+                                                                              PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-        List<InterpolatorProperty> ips1 = new ArrayList<InterpolatorProperty>(interpolatorProperties);
-        ips1.addAll(standardInterpolatorProperties);
-        ips1.addAll(ModelTransformerContext.createInterpolatorProperties(firstPassModelProperties, ProjectUri.baseUri, aliases,
-                        PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false));
-        Collections.sort(ips1, new Comparator<InterpolatorProperty>()
+        List<InterpolatorProperty> ips1 = new ArrayList<InterpolatorProperty>( interpolatorProperties );
+        ips1.addAll( standardInterpolatorProperties );
+        ips1.addAll( ModelTransformerContext.createInterpolatorProperties( firstPassModelProperties, ProjectUri.baseUri, aliases, PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false ) );
+        Collections.sort( ips1, new Comparator<InterpolatorProperty>()
-            public int compare(InterpolatorProperty o, InterpolatorProperty o1) {
-                return PomInterpolatorTag.valueOf(o.getTag()).compareTo(PomInterpolatorTag.valueOf(o1.getTag()));
+            public int compare( InterpolatorProperty o, InterpolatorProperty o1 )
+            {
+                return PomInterpolatorTag.valueOf( o.getTag() ).compareTo( PomInterpolatorTag.valueOf( o1.getTag() ) );
-        });
+        } );
-        if( domainModel.isPomInBuild() )
-        {   String basedir = domainModel.getProjectDirectory().getAbsolutePath();
+        if ( domainModel.isPomInBuild() )
+        {
+            String basedir = domainModel.getProjectDirectory().getAbsolutePath();
-            for(ModelProperty mp : secondPassModelProperties)
+            for ( ModelProperty mp : secondPassModelProperties )
-                if(mp.getUri().startsWith( ProjectUri.Build.xUri ) || mp.getUri().equals( ProjectUri.Reporting.outputDirectory ))
+                if ( mp.getUri().startsWith( ProjectUri.Build.xUri ) || mp.getUri().equals( ProjectUri.Reporting.outputDirectory ) )
-                        buildDirectories.put(mp, new ModelProperty(mp.getUri(), new File(basedir, file.getPath()).getAbsolutePath()));
+                        buildDirectories.put( mp, new ModelProperty( mp.getUri(), new File( basedir, file.getPath() ).getAbsolutePath() ) );
-                secondPassModelProperties.add(e.getValue() );
+                secondPassModelProperties.add( e.getValue() );
-        List<InterpolatorProperty> ips2 = new ArrayList<InterpolatorProperty>(interpolatorProperties);
-        ips2.addAll(standardInterpolatorProperties);
-        ips2.addAll(ModelTransformerContext.createInterpolatorProperties(secondPassModelProperties, ProjectUri.baseUri, aliases,
-                        PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false));
-        ips2.addAll(interpolatorProperties);
-        Collections.sort(ips2, new Comparator<InterpolatorProperty>()
+        List<InterpolatorProperty> ips2 = new ArrayList<InterpolatorProperty>( interpolatorProperties );
+        ips2.addAll( standardInterpolatorProperties );
+        ips2.addAll( ModelTransformerContext.createInterpolatorProperties( secondPassModelProperties, ProjectUri.baseUri, aliases, PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false ) );
+        ips2.addAll( interpolatorProperties );
+        Collections.sort( ips2, new Comparator<InterpolatorProperty>()
-            public int compare(InterpolatorProperty o, InterpolatorProperty o1) {
-                return PomInterpolatorTag.valueOf(o.getTag()).compareTo(PomInterpolatorTag.valueOf(o1.getTag()));
+            public int compare( InterpolatorProperty o, InterpolatorProperty o1 )
+            {
+                return PomInterpolatorTag.valueOf( o.getTag() ).compareTo( PomInterpolatorTag.valueOf( o1.getTag() ) );
-        });
+        } );
-        InterpolatorProperty versionInterpolatorProperty =
-                new ModelProperty( ProjectUri.version, "").asInterpolatorProperty( ProjectUri.baseUri);
-        for( InterpolatorProperty ip : interpolatorProperties)
+        InterpolatorProperty versionInterpolatorProperty = new ModelProperty( ProjectUri.version, "" ).asInterpolatorProperty( ProjectUri.baseUri );
+        for ( InterpolatorProperty ip : interpolatorProperties )
