o get rid of a few more buildArtifactRepository uses


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@750650 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-
-    
+
-    
+
-    private static HashMap<String, MavenProject> hm = new HashMap<String, MavenProject>();    
-    
+    private static HashMap<String, MavenProject> hm = new HashMap<String, MavenProject>();
+
+    private MavenProject superProject;
+
-        ProjectBuilderConfiguration cbf = new DefaultProjectBuilderConfiguration();
-        cbf.setLocalRepository( localRepository );
-        cbf.setGlobalProfileManager( profileManager );
-        return build( project, cbf );
-    }    
-    
+        ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration()        
+            .setLocalRepository( localRepository )
+            .setGlobalProfileManager( profileManager );
+        
+        return build( project, configuration );
+    }
+
-        if ( projectDescriptor == null )
-        {
-            throw new IllegalArgumentException( "projectDescriptor: null" );
-        }
-
-        if ( config == null )
-        {
-            throw new IllegalArgumentException( "config: null" );
-        }
-
-        List<ArtifactRepository> artifactRepositories = new ArrayList<ArtifactRepository>();
-        
-        try
-        {
-            artifactRepositories.addAll( repositorySystem.buildArtifactRepositories( getSuperModel().getRepositories() ) );
-        }
-        catch ( InvalidRepositoryException e )
-        {
-            throw new ProjectBuildingException( "Cannot create repositories from super model.", e.getMessage() );
-        }
-        
-        if ( config.getRemoteRepositories() != null )
-        {
-            artifactRepositories.addAll( config.getRemoteRepositories() );
-        }
-
-        MavenProject project = readModelFromLocalPath( "unknown", projectDescriptor, config.getLocalRepository(), artifactRepositories, config );
+        MavenProject project = readModelFromLocalPath( "unknown", projectDescriptor, config.getLocalRepository(), config.getRemoteRepositories(), config );
-        project = buildWithProfiles( project.getModel(), config, projectDescriptor, project.getParentFile());
+        project = buildWithProfiles( project.getModel(), config, projectDescriptor, project.getParentFile() );
-    // I want to build this out as a component with history and statistics to help me track down the realm problems. jvz.
-    class ProjectCache
-    {
-        private Map<String, MavenProject> projects = new HashMap<String, MavenProject>();
-        
-        public MavenProject get( String key )
-        {
-            MavenProject p = projects.get( key ); 
-                        
-            return p;            
-        }
-        
-        public MavenProject put( String key, MavenProject project )
-        {
-            return projects.put( key, project );
-        }
-    }
-
-    public MavenProject buildFromRepository( Artifact artifact, List remoteArtifactRepositories, ArtifactRepository localRepository, boolean allowStubs )
+    public MavenProject buildFromRepository( Artifact artifact, List<ArtifactRepository> remoteArtifactRepositories, ArtifactRepository localRepository, boolean allowStubs )
-        {            
+        {
-                
-        File f = (artifact.getFile() != null) ? artifact.getFile() : new File( localRepository.getBasedir(), localRepository.pathOf( artifact ) );
-        
-        try        
-        {            
+
+        File f = ( artifact.getFile() != null ) ? artifact.getFile() : new File( localRepository.getBasedir(), localRepository.pathOf( artifact ) );
+
+        try
+        {
-        ProjectBuilderConfiguration config = new DefaultProjectBuilderConfiguration()
-            .setLocalRepository( localRepository )
-            .setRemoteRepositories( remoteRepositories );
+        ProjectBuilderConfiguration config = new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository ).setRemoteRepositories( remoteRepositories );
-        project = readModelFromLocalPath( "unknown", artifact.getFile(), config.getLocalRepository(), remoteRepositories
-                                          , config );
+        project = readModelFromLocalPath( "unknown", artifact.getFile(), config.getLocalRepository(), remoteRepositories, config );
-        
+
-     * I am taking out the profile handling and the interpolation of the base directory until we spec
-     * this out properly.
+     * I am taking out the profile handling and the interpolation of the base directory until we
+     * spec this out properly.
+        if ( superProject != null )
+        {
+            return superProject;
+        }
+
-                       
-        MavenProject project = null;
-        
+
-            project = new MavenProject( superModel, repositorySystem, this, config );
+            superProject = new MavenProject( superModel, repositorySystem, this, config );
-        try
-        {
-            project.setRemoteArtifactRepositories( repositorySystem.buildArtifactRepositories( superModel.getRepositories() ) );
-            project.setPluginArtifactRepositories( repositorySystem.buildArtifactRepositories( superModel.getRepositories() ) );
-        }
-        catch ( InvalidRepositoryException e )
-        {
-            // Not going to happen.
-        }
+        superProject.setExecutionRoot( true );
-        project.setExecutionRoot( true );
-
-        return project;
+        return superProject;
-            throw new ProjectBuildingException( safeVersionlessKey( project.getGroupId(), project.getArtifactId() ),
-                                                "Unable to build project due to an invalid dependency version: " +
-                                                    e.getMessage(), projectDescriptor, ee );
+            throw new ProjectBuildingException( safeVersionlessKey( project.getGroupId(), project.getArtifactId() ), "Unable to build project due to an invalid dependency version: " + e.getMessage(),
+                                                projectDescriptor, ee );
-                     
+
-        
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
-            .setArtifact( pomArtifact )
-            .setArtifactDependencies( project.getDependencyArtifacts() )
-            .setLocalRepository( config.getLocalRepository() )
-            .setRemoteRepostories( project.getRemoteArtifactRepositories() )
-            .setManagedVersionMap( project.getManagedVersionMap() )
+
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact( pomArtifact ).setArtifactDependencies( project.getDependencyArtifacts() )
+            .setLocalRepository( config.getLocalRepository() ).setRemoteRepostories( project.getRemoteArtifactRepositories() ).setManagedVersionMap( project.getManagedVersionMap() )
-        
+
-                
+
-            
-            throw new ProjectBuildingException( safeVersionlessKey( project.getGroupId(), project.getArtifactId() ),
-                                                "Unable to build project due to an invalid dependency version: " +
-                                                    e.getMessage(), projectDescriptor, e );
+
+            throw new ProjectBuildingException( safeVersionlessKey( project.getGroupId(), project.getArtifactId() ), "Unable to build project due to an invalid dependency version: " + e.getMessage(),
+                                                projectDescriptor, e );
-        
+
-        
+
-        
+
-                projectProfiles.addAll(externalProfileManager.getActiveProfiles( model ));
+                projectProfiles.addAll( externalProfileManager.getActiveProfiles( model ) );
-                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.",
-                                                    projectDescriptor, e );
+                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.", projectDescriptor, e );
-                projectProfiles.addAll( profileManager.getActiveProfiles( model ));
+                projectProfiles.addAll( profileManager.getActiveProfiles( model ) );
-            catch (ProfileActivationException e)
+            catch ( ProfileActivationException e )
-                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.",
-                                                    projectDescriptor, e );
+                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.", projectDescriptor, e );
-        for( Profile profile : projectProfiles )
+        for ( Profile profile : projectProfiles )
-        
+
-            
+
-            
+
-            
+
-        
+
-            serializer.startDocument("UTF-8", null );
-        } catch (IOException e) {
+            serializer.startDocument( "UTF-8", null );
+        }
+        catch ( IOException e )
+        {
-        try {
+        try
+        {
-            Class c = Class.forName("org.apache.maven.model.io.xpp3.MavenXpp3Writer");
+            Class c = Class.forName( "org.apache.maven.model.io.xpp3.MavenXpp3Writer" );
-            Method meth = c.getDeclaredMethod(
-                         "writeProfile", partypes);
-            meth.setAccessible(true);
+            Method meth = c.getDeclaredMethod( "writeProfile", partypes );
+            meth.setAccessible( true );
-            meth.invoke(w, arglist);
+            meth.invoke( w, arglist );
-        catch (Exception e)
+        catch ( Exception e )
-        Set<String> uris = new HashSet(PomTransformer.URIS);
-        uris.add(ProjectUri.Profiles.Profile.Build.Plugins.Plugin.configuration);
+        Set<String> uris = new HashSet( PomTransformer.URIS );
+        uris.add( ProjectUri.Profiles.Profile.Build.Plugins.Plugin.configuration );
-            p =
-                ModelMarshaller.marshallXmlToModelProperties( new ByteArrayInputStream( xml.getBytes( "UTF-8" ) ),
-                                                              ProjectUri.Profiles.xUri, uris );
+            p = ModelMarshaller.marshallXmlToModelProperties( new ByteArrayInputStream( xml.getBytes( "UTF-8" ) ), ProjectUri.Profiles.xUri, uris );
-            List<ModelProperty> transformed = new ArrayList<ModelProperty>();
-            for(ModelProperty mp : p)
+        List<ModelProperty> transformed = new ArrayList<ModelProperty>();
+        for ( ModelProperty mp : p )
+        {
+            if ( mp.getUri().startsWith( ProjectUri.Profiles.Profile.xUri ) && !mp.getUri().equals( ProjectUri.Profiles.Profile.id )
+                && !mp.getUri().startsWith( ProjectUri.Profiles.Profile.Activation.xUri ) )
-                if(mp.getUri().startsWith(ProjectUri.Profiles.Profile.xUri) && !mp.getUri().equals(ProjectUri.Profiles.Profile.id)
-                        && !mp.getUri().startsWith(ProjectUri.Profiles.Profile.Activation.xUri) )
-                {
-                    transformed.add(new ModelProperty(mp.getUri().replace(ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri),
-                            mp.getResolvedValue()));
-                }
+                transformed.add( new ModelProperty( mp.getUri().replace( ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri ), mp.getResolvedValue() ) );
+        }
-        ModelTransformerContext ctx = new ModelTransformerContext(PomTransformer.MODEL_CONTAINER_INFOS );
+        ModelTransformerContext ctx = new ModelTransformerContext( PomTransformer.MODEL_CONTAINER_INFOS );
-        try {
-            transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( Arrays.asList(  new PomClassicDomainModel(transformed, false), convertToDomainModel(model, true)),
-                                                                                                    transformer,
-                                                                                                    transformer,
-                                                                                                    Collections.EMPTY_LIST,
-                                                                                                    null,
-                                                                                                    null ) );
-            return convertFromInputStreamToModel(transformedDomainModel.getInputStream());
-        } catch (IOException e) {
+        try
+        {
+            transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( Arrays.asList( new PomClassicDomainModel( transformed, false ), convertToDomainModel( model, true ) ), transformer,
+                                                                              transformer, Collections.EMPTY_LIST, null, null ) );
+            return convertFromInputStreamToModel( transformedDomainModel.getInputStream() );
+        }
+        catch ( IOException e )
+        {
-
-    private MavenProject readModelFromLocalPath( String projectId, File projectDescriptor, ArtifactRepository localRepository,
-                                                 List<ArtifactRepository> remoteRepositories, ProjectBuilderConfiguration config )
+    private MavenProject readModelFromLocalPath( String projectId, File projectDescriptor, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
+                                                 ProjectBuilderConfiguration config )
-        
-        interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( config.getExecutionProperties(), 
-                PomInterpolatorTag.EXECUTION_PROPERTIES.name()));
-        
-        interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( config.getUserProperties(),
-                PomInterpolatorTag.USER_PROPERTIES.name()));
-        if(config.getBuildStartTime() != null)
+        interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( config.getExecutionProperties(), PomInterpolatorTag.EXECUTION_PROPERTIES.name() ) );
+
+        interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( config.getUserProperties(), PomInterpolatorTag.USER_PROPERTIES.name() ) );
+
+        if ( config.getBuildStartTime() != null )
-            interpolatorProperties.add(new InterpolatorProperty("${build.timestamp}",
-                new SimpleDateFormat("yyyyMMdd-hhmm").format( config.getBuildStartTime() ),
-                PomInterpolatorTag.PROJECT_PROPERTIES.name()));
+            interpolatorProperties.add( new InterpolatorProperty( "${build.timestamp}", new SimpleDateFormat( "yyyyMMdd-hhmm" ).format( config.getBuildStartTime() ),
+                                                                  PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-        
+
-        
+
-        if ( parent != null && parent.getFile() != null && parent.getModel().getBuild() != null)
+        if ( parent != null && parent.getFile() != null && parent.getModel().getBuild() != null )
-    protected PomClassicDomainModel buildModel( File pom,
-                                             Collection<InterpolatorProperty> interpolatorProperties,
-                                             ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+    protected PomClassicDomainModel buildModel( File pom, Collection<InterpolatorProperty> interpolatorProperties, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-    private PomClassicDomainModel buildModel(File pom,
-                                             Collection<InterpolatorProperty> interpolatorProperties,
-                                             Collection<String> activeProfileIds, Collection<String> inactiveProfileIds,
-                                             ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories)
+    private PomClassicDomainModel buildModel( File pom, Collection<InterpolatorProperty> interpolatorProperties, Collection<String> activeProfileIds, Collection<String> inactiveProfileIds,
+                                              ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        if(activeProfileIds == null)
+        if ( activeProfileIds == null )
-        domainModel.setMostSpecialized(true);
-        
+        domainModel.setMostSpecialized( true );
+
-
-        ProfileContext profileContext = new ProfileContext(new DefaultModelDataSource(domainModel.getModelProperties(),
-                PomTransformer.MODEL_CONTAINER_FACTORIES), activeProfileIds, inactiveProfileIds, properties);
+        ProfileContext profileContext = new ProfileContext( new DefaultModelDataSource( domainModel.getModelProperties(), PomTransformer.MODEL_CONTAINER_FACTORIES ), activeProfileIds,
+                                                            inactiveProfileIds, properties );
-        domainModels.addAll( transformProfiles(profileContext) );
+        domainModels.addAll( transformProfiles( profileContext ) );
-        
+
-                mavenParents =
-                    getDomainModelParentsFromLocalPath( domainModel, localRepository, remoteRepositories, pom.getParentFile(), properties,
-                                                        activeProfileIds, inactiveProfileIds );
+                mavenParents = getDomainModelParentsFromLocalPath( domainModel, localRepository, remoteRepositories, pom.getParentFile(), properties, activeProfileIds, inactiveProfileIds );
-                mavenParents =
-                    getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories, properties, activeProfileIds,
-                                                         inactiveProfileIds );
+                mavenParents = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories, properties, activeProfileIds, inactiveProfileIds );
-        domainModels.add( convertToDomainModel( getSuperModel() , false ));
+        domainModels.add( convertToDomainModel( getSuperModel(), false ) );
-        ModelTransformerContext ctx = new ModelTransformerContext(PomTransformer.MODEL_CONTAINER_INFOS );
+        ModelTransformerContext ctx = new ModelTransformerContext( PomTransformer.MODEL_CONTAINER_INFOS );
-        PomClassicDomainModel transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( domainModels,
-                                                                                                transformer,
-                                                                                                transformer,
-                                                                                                Collections.EMPTY_LIST,
-                                                                                                properties,
-                                                                                                listeners ) );
+        PomClassicDomainModel transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( domainModels, transformer, transformer, Collections.EMPTY_LIST, properties, listeners ) );
-    private PomClassicDomainModel convertToDomainModel(Model model, boolean isMostSpecialized) throws IOException
+    private PomClassicDomainModel convertToDomainModel( Model model, boolean isMostSpecialized )
+        throws IOException
-        return new PomClassicDomainModel(new ByteArrayInputStream(baos.toByteArray()), isMostSpecialized);
+        return new PomClassicDomainModel( new ByteArrayInputStream( baos.toByteArray() ), isMostSpecialized );
-    protected MavenProject buildFromLocalPath(File pom,
-                                           Collection<InterpolatorProperty> interpolatorProperties,
-                                           ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-                                           ProjectBuilderConfiguration projectBuilderConfiguration,
-                                           MavenProjectBuilder mavenProjectBuilder)
+    protected MavenProject buildFromLocalPath( File pom, Collection<InterpolatorProperty> interpolatorProperties, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
+                                               ProjectBuilderConfiguration projectBuilderConfiguration, MavenProjectBuilder mavenProjectBuilder )
-       List<String> activeProfileIds = (projectBuilderConfiguration != null &&
-                projectBuilderConfiguration.getGlobalProfileManager() != null &&
-                projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext() != null) ?
-               projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext().getExplicitlyActiveProfileIds() : new ArrayList<String>();
+        List<String> activeProfileIds = ( projectBuilderConfiguration != null && projectBuilderConfiguration.getGlobalProfileManager() != null && projectBuilderConfiguration.getGlobalProfileManager()
+            .getProfileActivationContext() != null ) ? projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext().getExplicitlyActiveProfileIds() : new ArrayList<String>();
-       List<String> inactiveProfileIds =
-           ( projectBuilderConfiguration != null && projectBuilderConfiguration.getGlobalProfileManager() != null &&
-                           projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext() != null ) ?
-                           projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext().getExplicitlyInactiveProfileIds() : new ArrayList<String>();
+        List<String> inactiveProfileIds = ( projectBuilderConfiguration != null && projectBuilderConfiguration.getGlobalProfileManager() != null && projectBuilderConfiguration
+            .getGlobalProfileManager().getProfileActivationContext() != null ) ? projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext().getExplicitlyInactiveProfileIds()
+                                                                              : new ArrayList<String>();
-            MavenProject mavenProject = new MavenProject( convertFromInputStreamToModel(domainModel.getInputStream()),
-                                                          repositorySystem,
-                                                          mavenProjectBuilder,
-                                                          projectBuilderConfiguration );
+            MavenProject mavenProject = new MavenProject( convertFromInputStreamToModel( domainModel.getInputStream() ), repositorySystem, mavenProjectBuilder, projectBuilderConfiguration );
-    private static Model convertFromInputStreamToModel(InputStream inputStream) throws IOException
+    private static Model convertFromInputStreamToModel( InputStream inputStream )
+        throws IOException
-     * Returns true if the relative path of the specified parent references a pom, otherwise returns false.
-     *
-     * @param relativePath         the parent model info
+     * Returns true if the relative path of the specified parent references a pom, otherwise returns
+     * false.
+     * 
+     * @param relativePath the parent model info
-     * @return true if the relative path of the specified parent references a pom, otherwise returns fals
+     * @return true if the relative path of the specified parent references a pom, otherwise returns
+     *         fals
-    private List<DomainModel> getDomainModelParentsFromRepository( PomClassicDomainModel domainModel,
-                                                                   ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-                                                                   List<InterpolatorProperty> properties,
-                                                                   Collection<String> activeProfileIds,
-                                                                   Collection<String> inactiveProfileIds )
+    private List<DomainModel> getDomainModelParentsFromRepository( PomClassicDomainModel domainModel, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
+                                                                   List<InterpolatorProperty> properties, Collection<String> activeProfileIds, Collection<String> inactiveProfileIds )
-        Artifact artifactParent = repositorySystem.createParentArtifact( domainModel.getParentGroupId(),
-                domainModel.getParentArtifactId(), domainModel.getParentVersion() );
+        Artifact artifactParent = repositorySystem.createParentArtifact( domainModel.getParentGroupId(), domainModel.getParentArtifactId(), domainModel.getParentVersion() );
-            
+
-        ProfileContext profileContext = new ProfileContext(new DefaultModelDataSource(parentDomainModel.getModelProperties(),
-                PomTransformer.MODEL_CONTAINER_FACTORIES), activeProfileIds, inactiveProfileIds, properties);
-        domainModels.addAll( transformProfiles(profileContext) );
+        ProfileContext profileContext = new ProfileContext( new DefaultModelDataSource( parentDomainModel.getModelProperties(), PomTransformer.MODEL_CONTAINER_FACTORIES ), activeProfileIds,
+                                                            inactiveProfileIds, properties );
+        domainModels.addAll( transformProfiles( profileContext ) );
-        domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories, properties,
-                                                                  activeProfileIds, inactiveProfileIds ) );
+        domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories, properties, activeProfileIds, inactiveProfileIds ) );
-    
-    private static List<DomainModel> transformProfiles( ProfileContext profileContext ) throws IOException
+
+    private static List<DomainModel> transformProfiles( ProfileContext profileContext )
+        throws IOException
-        for(ModelContainer mc : profileContainers)
+        for ( ModelContainer mc : profileContainers )
-            transformed.add(new ModelProperty(ProjectUri.xUri, null));
-            for(ModelProperty mp : mc.getProperties())
+            transformed.add( new ModelProperty( ProjectUri.xUri, null ) );
+            for ( ModelProperty mp : mc.getProperties() )
-                if(mp.getUri().startsWith(ProjectUri.Profiles.Profile.xUri) && !mp.getUri().equals(ProjectUri.Profiles.Profile.id)
-                        && !mp.getUri().startsWith(ProjectUri.Profiles.Profile.Activation.xUri) )
+                if ( mp.getUri().startsWith( ProjectUri.Profiles.Profile.xUri ) && !mp.getUri().equals( ProjectUri.Profiles.Profile.id )
+                    && !mp.getUri().startsWith( ProjectUri.Profiles.Profile.Activation.xUri ) )
-                    transformed.add(new ModelProperty(mp.getUri().replace(ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri),
-                            mp.getResolvedValue()));
+                    transformed.add( new ModelProperty( mp.getUri().replace( ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri ), mp.getResolvedValue() ) );
-            domainModels.add(new PomClassicDomainModel(transformed));
-        }   
+            domainModels.add( new PomClassicDomainModel( transformed ) );
+        }
-     * Returns list of domain model parents of the specified domain model. The parent domain models are part
-     *
+     * Returns list of domain model parents of the specified domain model. The parent domain models
+     * are part
+     * 
-    private List<DomainModel> getDomainModelParentsFromLocalPath( PomClassicDomainModel domainModel,
-                                                                  ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-                                                                  File projectDirectory,
-                                                                  List<InterpolatorProperty> properties,
-                                                                  Collection<String> activeProfileIds,
+    private List<DomainModel> getDomainModelParentsFromLocalPath( PomClassicDomainModel domainModel, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
+                                                                  File projectDirectory, List<InterpolatorProperty> properties, Collection<String> activeProfileIds,
-        ProfileContext profileContext = new ProfileContext(new DefaultModelDataSource(parentDomainModel.getModelProperties(),
-                PomTransformer.MODEL_CONTAINER_FACTORIES), activeProfileIds, inactiveProfileIds, properties);
+        ProfileContext profileContext = new ProfileContext( new DefaultModelDataSource( parentDomainModel.getModelProperties(), PomTransformer.MODEL_CONTAINER_FACTORIES ), activeProfileIds,
+                                                            inactiveProfileIds, properties );
-        for(ModelContainer mc : profileContainers)
+        for ( ModelContainer mc : profileContainers )
-            transformed.add(new ModelProperty(ProjectUri.xUri, null));
-            for(ModelProperty mp : mc.getProperties())
+            transformed.add( new ModelProperty( ProjectUri.xUri, null ) );
+            for ( ModelProperty mp : mc.getProperties() )
-                if(mp.getUri().startsWith(ProjectUri.Profiles.Profile.xUri) && !mp.getUri().equals(ProjectUri.Profiles.Profile.id)
-                    && !mp.getUri().startsWith(ProjectUri.Profiles.Profile.Activation.xUri))
+                if ( mp.getUri().startsWith( ProjectUri.Profiles.Profile.xUri ) && !mp.getUri().equals( ProjectUri.Profiles.Profile.id )
+                    && !mp.getUri().startsWith( ProjectUri.Profiles.Profile.Activation.xUri ) )
-                    transformed.add(new ModelProperty(mp.getUri().replace(ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri),
-                            mp.getResolvedValue()));
+                    transformed.add( new ModelProperty( mp.getUri().replace( ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri ), mp.getResolvedValue() ) );
-            domainModels.add(new PomClassicDomainModel(transformed));
+            domainModels.add( new PomClassicDomainModel( transformed ) );
-            logger.info( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = "
-                    + parentDomainModel.getId() + ", Child ID = " + domainModel.getId() + ", Expected Parent ID = "
-                    + domainModel.getParentId() );
+            logger.info( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = " + parentDomainModel.getId() + ", Child ID = " + domainModel.getId()
+                + ", Expected Parent ID = " + domainModel.getParentId() );
-            List<DomainModel> parentDomainModels =
-                getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories, properties, activeProfileIds,
-                                                     inactiveProfileIds );
+            List<DomainModel> parentDomainModels = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories, properties, activeProfileIds, inactiveProfileIds );
-            if(parentDomainModels.size() == 0)
+            if ( parentDomainModels.size() == 0 )
-                throw new IOException("Unable to find parent pom on local path or repo: "
-                        + domainModel.getParentId());
+                throw new IOException( "Unable to find parent pom on local path or repo: " + domainModel.getParentId() );
-            if ( isParentLocal(parentDomainModel.getRelativePathOfParent(), parentFile.getParentFile() ) )
+            if ( isParentLocal( parentDomainModel.getRelativePathOfParent(), parentFile.getParentFile() ) )
-                domainModels.addAll( getDomainModelParentsFromLocalPath( parentDomainModel, localRepository, remoteRepositories,
-                                                                         parentFile.getParentFile(), properties,
-                                                                         activeProfileIds, inactiveProfileIds ) );
+                domainModels.addAll( getDomainModelParentsFromLocalPath( parentDomainModel, localRepository, remoteRepositories, parentFile.getParentFile(), properties, activeProfileIds,
+                                                                         inactiveProfileIds ) );
-                domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories,
-                                                                          properties, activeProfileIds,
-                                                                          inactiveProfileIds ) );
+                domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories, properties, activeProfileIds, inactiveProfileIds ) );
