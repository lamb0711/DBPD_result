o the request populator is now responsible for initializing everything, anything you want to know about how the front-end is configuration, or initialized can be found in this class. i think i have almost everything out of the Maven component and in the Embedder. this is the one place to look now and I know feel comfortable about documenting it

o the profiles additions from settings are now process in the request populator and taken out of the default profile manager itself which has resulted in decoupling the Settings from the profile manager.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@573435 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.context.BuildContextManager;
-import org.apache.maven.profiles.manager.DefaultProfileManager;
-import org.apache.maven.profiles.manager.ProfileManager;
-import org.apache.maven.settings.MavenSettingsBuilder;
-import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
-    private ProfileManager profileManager;
-
-    private MavenSettingsBuilder settingsBuilder;
-
-    private Settings settings;
-
-    private ArtifactRepository localRepository;
-
-    private BuildContextManager buildContextManager;
-
-        return localRepository;
+        return request.getLocalRepository();
-        return settings;
+        return request.getSettings();
-        MavenExecutionRequest request = new DefaultMavenExecutionRequest()
-            .setSettings( settings )
-            .setLocalRepository( localRepository );
-
-        return mavenProjectBuilder.build( mavenProject, localRepository, profileManager, false );
+        return mavenProjectBuilder.build( mavenProject, request.getLocalRepository(), request.getProfileManager(), false );
-                profileManager,
+                request.getProfileManager(),
-    // Remote Repository
-    // ----------------------------------------------------------------------
-
-    // ----------------------------------------------------------------------
+    
+    private MavenExecutionRequest request;
-            settingsBuilder = (MavenSettingsBuilder) container.lookup( MavenSettingsBuilder.ROLE );
-
-            profileManager = new DefaultProfileManager( container, configuration.getSystemProperties() );
-
-            profileManager.explicitlyActivate( configuration.getActiveProfiles() );
-
-            profileManager.explicitlyDeactivate( configuration.getInactiveProfiles() );
-
-            buildContextManager = (BuildContextManager) container.lookup( BuildContextManager.ROLE, "default" );
-
-            try
-            {
-                settings = settingsBuilder.buildSettings( configuration.getUserSettingsFile(),
-                    configuration.getGlobalSettingsFile() );
-            }
-            catch ( Exception e )
-            {
-                // If something goes wrong with parsing the settings
-                settings = new Settings();
-            }
+            // This is temporary as we can probably cache a single request and use it for default values and
+            // simply cascade values in from requests used for individual executions.
+            request = new DefaultMavenExecutionRequest();
-            localRepository = createLocalRepository( settings );
-
-            profileManager.loadSettingsProfiles( settings );
-
+            populator.populateDefaults( request, this );
-        try
-        {
-            buildContextManager.clearBuildContext();
-
-            container.release( buildContextManager );
-
-            container.release( mavenProjectBuilder );
-
-            container.release( artifactRepositoryFactory );
-        }
-        catch ( ComponentLifecycleException e )
-        {
-            throw new MavenEmbedderException( "Cannot stop the embedder.", e );
-        }
+        container.dispose();
