o Fixed bash scripts (cygwin option was being tested incorrectly, and resulting in no such file: cygpath)
o Changed POM handling to use ArtifactMetadata API rather than direct Artifact construction for POMs
o Streamlined ArtifactDigestor to avoid use of byte arrays for transfer between methods (resulted in a bit of cut-and-paste code, but should run better)
o Pegged OutOfMemoryError to the ArtifactDigestVerifier/ArtifactDigestor combo (motivated the previous change)
o Cleaned up artifact source-file checking before creating any of the target directory structures
o Maybe works, maybe not...will resume testing tomorrow or the next day


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163743 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.ByteArrayOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
-import java.util.Arrays;
-        boolean result = false;
-        
-            byte[] digestFromFile = null;
-    
+            
+            InputStream in = null;
-                digestFromFile = readFile( digestFile );
+                in = new FileInputStream( artifactFile );
+                
+                int digestLen = generatedDigest.length;
+                int currentIdx = 0;
+                
+                boolean matched = true;
+                
+                int read = -1;
+                while ( ( read = in.read() ) > -1 )
+                {
+                    if(currentIdx >= digestLen || read != generatedDigest[currentIdx])
+                    {
+                        return false;
+                    }
+                }
-            catch ( Exception e )
+            catch ( IOException e )
-                throw new ArtifactDigestException( "Cannot read digest from file: \'" + digestFile + "\'", e );
+                throw new ArtifactDigestException("Cannot verify digest for artifact file: \'" + artifactFile + "\' against digest file: \'" + digestFile + "\' using algorithm: \'" + algorithm + "\'", e);
-    
-            result = Arrays.equals( generatedDigest, digestFromFile );
+            finally
+            {
+                IOUtil.close( in );
+            }
+            
+        }
+        else
+        {
+            return false;
-        return result;
+        return true;
-        byte[] data = null;
-        try
-        {
-            data = readFile( artifactFile );
-        }
-        catch ( IOException e )
-        {
-            throw new ArtifactDigestException( "Error reading artifact data from: \'" + artifactFile + "\'", e );
-        }
-
-        digest.update( data );
-        
+        InputStream in = null;
+        try
+        {
+            in = new BufferedInputStream( new FileInputStream( artifactFile ) );
+
+            byte[] buffer = new byte[16];
+            int read = -1;
+            while ( ( read = in.read( buffer ) ) > -1 )
+            {
+                digest.update(buffer, 0, read);
+            }
+        }
+        catch ( IOException e )
+        {
+            throw new ArtifactDigestException( "Error reading artifact data from: \'" + artifactFile + "\'", e );
+        }
+        finally
+        {
+            IOUtil.close( in );
+        }
+
-        FileOutputStream out = null;
+        OutputStream out = null;
-    private byte[] readFile( File artifactFile ) throws IOException
-    {
-        BufferedInputStream in = null;
-        try
-        {
-            in = new BufferedInputStream( new FileInputStream( artifactFile ) );
-            ByteArrayOutputStream baos = new ByteArrayOutputStream();
-
-            byte[] buffer = new byte[16];
-            int read = -1;
-            while ( ( read = in.read( buffer ) ) > -1 )
-            {
-                baos.write( buffer, 0, read );
-            }
-
-            return baos.toByteArray();
-        }
-        finally
-        {
-            IOUtil.close( in );
-        }
-    }
-
