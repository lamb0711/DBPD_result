MNG-5771 user-defined core extensions

read ${maven.projectBasedir}/.mvn/extensions.xml and create core
extensions realms during maven runtime bootstrap. this required
short-lived bootstrap plexus container to resolve extensions.

individual extensions realms are wired to maven.ext realm according
to META-INF/maven/extension.xml exported packages specification

Signed-off-by: Igor Fedorenko <ifedorenko@apache.org>

+import java.io.BufferedInputStream;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import org.apache.maven.cli.internal.BootstrapCoreExtensionManager;
+import org.apache.maven.cli.internal.extension.model.CoreExtension;
+import org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader;
+import org.apache.maven.extension.internal.CoreExports;
+import org.apache.maven.extension.internal.CoreExtensionEntry;
+import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
+    private static final String EXTENSIONS_FILENAME = ".mvn/extensions.xml";
+
-        DefaultPlexusContainer container;
+        ClassRealm coreRealm = cliRequest.classWorld.getClassRealm( "plexus.core" );
+        if ( coreRealm == null )
+        {
+            coreRealm = cliRequest.classWorld.getRealms().iterator().next();
+        }
+
+        List<File> extClassPath = parseExtClasspath( cliRequest );
+
+        CoreExtensionEntry coreEntry = CoreExtensionEntry.discoverFrom( coreRealm );
+        List<CoreExtensionEntry> extensions =
+            loadCoreExtensions( cliRequest, coreRealm, coreEntry.getExportedArtifacts() );
+
+        ClassRealm containerRealm = setupContainerRealm( cliRequest.classWorld, coreRealm, extClassPath, extensions );
-            .setRealm( setupContainerRealm( cliRequest ) )
+            .setRealm( containerRealm )
-        container = new DefaultPlexusContainer( cc, new AbstractModule()
+        Set<String> exportedArtifacts = new HashSet<String>( coreEntry.getExportedArtifacts() );
+        Set<String> exportedPackages = new HashSet<String>( coreEntry.getExportedPackages() );
+        for ( CoreExtensionEntry extension : extensions )
+        {
+            exportedArtifacts.addAll( extension.getExportedArtifacts() );
+            exportedPackages.addAll( extension.getExportedPackages() );
+        }
+
+        final CoreExports exports = new CoreExports( containerRealm, exportedArtifacts, exportedPackages );
+
+        DefaultPlexusContainer container = new DefaultPlexusContainer( cc, new AbstractModule()
+                bind( CoreExports.class ).toInstance( exports );
+        for ( CoreExtensionEntry extension : extensions )
+        {
+            container.discoverComponents( extension.getClassRealm() );
+        }
+
-    private ClassRealm setupContainerRealm( CliRequest cliRequest )
+    private List<CoreExtensionEntry> loadCoreExtensions( CliRequest cliRequest, ClassRealm containerRealm,
+                                                         Set<String> providedArtifacts )
+    {
+        if ( cliRequest.projectBaseDirectory == null )
+        {
+            return Collections.emptyList();
+        }
+
+        File extensionsFile = new File( cliRequest.projectBaseDirectory, EXTENSIONS_FILENAME );
+        if ( !extensionsFile.isFile() )
+        {
+            return Collections.emptyList();
+        }
+
+        try
+        {
+            List<CoreExtension> extensions = readCoreExtensionsDescriptor( extensionsFile );
+            if ( extensions.isEmpty() )
+            {
+                return Collections.emptyList();
+            }
+
+            ContainerConfiguration cc = new DefaultContainerConfiguration() //
+                .setClassWorld( cliRequest.classWorld ) //
+                .setRealm( containerRealm ) //
+                .setClassPathScanning( PlexusConstants.SCANNING_INDEX ) //
+                .setAutoWiring( true ) //
+                .setName( "maven" );
+
+            DefaultPlexusContainer container = new DefaultPlexusContainer( cc, new AbstractModule()
+            {
+                @Override
+                protected void configure()
+                {
+                    bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );
+                }
+            } );
+
+            try
+            {
+                container.setLookupRealm( null );
+
+                container.setLoggerManager( plexusLoggerManager );
+
+                container.getLoggerManager().setThresholds( cliRequest.request.getLoggingLevel() );
+
+                Thread.currentThread().setContextClassLoader( container.getContainerRealm() );
+
+                executionRequestPopulator = container.lookup( MavenExecutionRequestPopulator.class );
+                settingsBuilder = container.lookup( SettingsBuilder.class );
+
+                MavenExecutionRequest request = DefaultMavenExecutionRequest.copy( cliRequest.request );
+                settings( cliRequest, request );
+                request = populateRequest( cliRequest, request );
+                request = executionRequestPopulator.populateDefaults( request );
+
+                BootstrapCoreExtensionManager resolver = container.lookup( BootstrapCoreExtensionManager.class );
+                return resolver.loadCoreExtensions( request, providedArtifacts, extensions );
+            }
+            finally
+            {
+                executionRequestPopulator = null;
+                settingsBuilder = null;
+                container.dispose();
+            }
+        }
+        catch ( RuntimeException e )
+        {
+            // runtime exceptions are most likely bugs in maven, let them bubble up to the user
+            throw e;
+        }
+        catch ( Exception e )
+        {
+            slf4jLogger.warn( "Failed to read extensions descriptor " + extensionsFile + ": " + e.getMessage() );
+        }
+        return Collections.emptyList();
+    }
+
+    private List<CoreExtension> readCoreExtensionsDescriptor( File extensionsFile )
+        throws IOException, XmlPullParserException
+    {
+        CoreExtensionsXpp3Reader parser = new CoreExtensionsXpp3Reader();
+        InputStream is = null;
+        try
+        {
+            is = new BufferedInputStream( new FileInputStream( extensionsFile ) );
+            return parser.read( is ).getExtensions();
+        }
+        finally
+        {
+            IOUtil.close( is );
+        }
+    }
+
+    private ClassRealm setupContainerRealm( ClassWorld classWorld, ClassRealm coreRealm, List<File> extClassPath,
+                                            List<CoreExtensionEntry> extensions )
-        ClassRealm containerRealm = null;
+        if ( !extClassPath.isEmpty() || !extensions.isEmpty() )
+        {
+            ClassRealm extRealm = classWorld.newRealm( "maven.ext", null );
+            extRealm.setParentRealm( coreRealm );
+
+            slf4jLogger.debug( "Populating class realm " + extRealm.getId() );
+
+            for ( File file : extClassPath )
+            {
+                slf4jLogger.debug( "  Included " + file );
+
+                extRealm.addURL( file.toURI().toURL() );
+            }
+
+            for ( CoreExtensionEntry entry : reverse( extensions ) )
+            {
+                Set<String> exportedPackages = entry.getExportedPackages();
+                ClassRealm realm = entry.getClassRealm();
+                for ( String exportedPackage : exportedPackages )
+                {
+                    extRealm.importFrom( realm, exportedPackage );
+                }
+                if ( exportedPackages.isEmpty() )
+                {
+                    // sisu uses realm imports to establish component visibility
+                    extRealm.importFrom( realm, realm.getId() );
+                }
+            }
+
+            return extRealm;
+        }
+
+        return coreRealm;
+    }
+
+    private static <T> List<T> reverse( List<T> list )
+    {
+        List<T> copy = new ArrayList<T>( list );
+        Collections.reverse( copy );
+        return copy;
+    }
+
+    private List<File> parseExtClasspath( CliRequest cliRequest )
+    {
+        List<File> jars = new ArrayList<File>();
+
-            String[] jars = StringUtils.split( extClassPath, File.pathSeparator );
-
-            if ( jars.length > 0 )
+            for ( String jar : StringUtils.split( extClassPath, File.pathSeparator ) )
-                ClassRealm coreRealm = cliRequest.classWorld.getClassRealm( "plexus.core" );
-                if ( coreRealm == null )
-                {
-                    coreRealm = cliRequest.classWorld.getRealms().iterator().next();
-                }
+                File file = resolveFile( new File( jar ), cliRequest.workingDirectory );
-                ClassRealm extRealm = cliRequest.classWorld.newRealm( "maven.ext", null );
+                slf4jLogger.debug( "  Included " + file );
-                slf4jLogger.debug( "Populating class realm " + extRealm.getId() );
-
-                for ( String jar : jars )
-                {
-                    File file = resolveFile( new File( jar ), cliRequest.workingDirectory );
-
-                    slf4jLogger.debug( "  Included " + file );
-
-                    extRealm.addURL( file.toURI().toURL() );
-                }
-
-                extRealm.setParentRealm( coreRealm );
-
-                containerRealm = extRealm;
+                jars.add( file );
-        return containerRealm;
+        return jars;
+        settings( cliRequest, cliRequest.request );
+    }
+
+    private void settings( CliRequest cliRequest, MavenExecutionRequest request )
+        throws Exception
+    {
-        cliRequest.request.setGlobalSettingsFile( globalSettingsFile );
-        cliRequest.request.setUserSettingsFile( userSettingsFile );
+        request.setGlobalSettingsFile( globalSettingsFile );
+        request.setUserSettingsFile( userSettingsFile );
-        eventSpyDispatcher.onEvent( settingsRequest );
+        if ( eventSpyDispatcher != null )
+        {
+            eventSpyDispatcher.onEvent( settingsRequest );
+        }
-        eventSpyDispatcher.onEvent( settingsResult );
+        if ( eventSpyDispatcher != null )
+        {
+            eventSpyDispatcher.onEvent( settingsResult );
+        }
-        executionRequestPopulator.populateFromSettings( cliRequest.request, settingsResult.getEffectiveSettings() );
+        executionRequestPopulator.populateFromSettings( request, settingsResult.getEffectiveSettings() );
-        MavenExecutionRequest request = cliRequest.request;
+        return populateRequest( cliRequest, cliRequest.request );
+    }
+
+    private MavenExecutionRequest populateRequest( CliRequest cliRequest, MavenExecutionRequest request )
+    {
-        executionListener = eventSpyDispatcher.chainListener( executionListener );
+        if ( eventSpyDispatcher != null )
+        {
+            executionListener = eventSpyDispatcher.chainListener( executionListener );
+        }
-        else
+        else if ( modelProcessor != null )
