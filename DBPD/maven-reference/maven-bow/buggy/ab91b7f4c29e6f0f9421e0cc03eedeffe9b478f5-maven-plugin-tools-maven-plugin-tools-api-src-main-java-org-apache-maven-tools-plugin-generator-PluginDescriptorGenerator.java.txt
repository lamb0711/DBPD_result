o Cleaned up field-level annotation support (especially descriptor extraction, generation, and building)
o Converted all "core" plugins (including maven-core-it-plugin) to use field-level annotations
o Removed generation of parameter descriptors for ${/#component.* param specifications.
o Added @readonly for parameters that cannot be overridden by user configuration (List override was dangerous here)
o Added validation against pom-derived configuration for @readonly parameters
o Fixed @parameter alias="" support...now configuration of the mojo instance actually will work with either the real param name or the alias. Would be nice to support multiple aliases, but that might require @alias annotations...
o Added [temporary?] support for null editable attributes for parameters, to support pre-built mojos from the repo.

Annotation support should be just about ready to go...


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@165224 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.StringUtils;
-            w.startElement( "parameter" );
-
-            element( w, "name", parameter.getName() );
+            String expression = parameter.getExpression();
-            if( parameter.getAlias() != null )
+            if ( StringUtils.isNotEmpty( expression )
+                && ( expression.startsWith( "${component." ) || expression.startsWith( "#component." ) ) )
-                element( w, "alias", parameter.getAlias() );
-            }
+                // treat it as a component...a requirement, in other words.
-            element( w, "type", parameter.getType() );
-
-            if ( parameter.getDeprecated() != null )
-            {
-                element( w, "deprecated", parameter.getDeprecated() );
-            }
-
-            element( w, "validator", parameter.getValidator() );
-
-            String value = null;
-            if ( parameter.getExpression().startsWith( "#component." ) ||
-                parameter.getExpression().startsWith( "${component." ) )
-            {
+                // treat it as a normal parameter.
+
+                w.startElement( "parameter" );
+
+                element( w, "name", parameter.getName() );
+
+                if ( parameter.getAlias() != null )
+                {
+                    element( w, "alias", parameter.getAlias() );
+                }
+
+                element( w, "type", parameter.getType() );
+
+                if ( parameter.getDeprecated() != null )
+                {
+                    element( w, "deprecated", parameter.getDeprecated() );
+                }
+
+                // TODO: do we still need this?
+                element( w, "validator", parameter.getValidator() );
+
-                value = parameter.getExpression();
+                element( w, "editable", Boolean.toString( parameter.isEditable() ) );
+
+                element( w, "description", parameter.getDescription() );
+
+                if ( StringUtils.isEmpty( expression ) )
+                {
+                    expression = parameter.getDefaultValue();
+                }
+
+                if ( expression != null && expression.length() > 0 )
+                {
+                    configuration.put( parameter, expression );
+                }
+
+                w.endElement();
-            element( w, "description", parameter.getDescription() );
-
-            if ( value == null || value.length() == 0 )
-            {
-                value = parameter.getDefaultValue();
-            }
-
-            if ( value != null && value.length() > 0 )
-            {
-                configuration.put( parameter, value );
-            }
-
-            w.endElement();
