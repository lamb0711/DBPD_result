o Fixed a configuration issue for the DefaultRepositoryLayout in components.xml...it needed a requirement on the ArtifactHandlerManager.
o Fixed a formatting issue for the layout in DefaultRepositoryLayout relating to groupId's.
o Revamped the repoclean tool to use an Artifact-centric approach to converting, cleaning, and reporting on repositories.
o Added the ability for repoclean to report on the health of an existing v3 or v4 repository, using a DefaultArtifactDiscoverer (Default* being the prefix given to the new repo layout going forward) and a V4PomRewriter implementation.
o Tested repoclean by converting my local m1 repository to a m2 repository.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163669 13f79535-47bb-0310-9956-ffa450edef68

-/* ====================================================================
- *   Copyright 2001-2004 The Apache Software Foundation.
- *
- *   Licensed under the Apache License, Version 2.0 (the "License");
- *   you may not use this file except in compliance with the License.
- *   You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *   Unless required by applicable law or agreed to in writing, software
- *   distributed under the License is distributed on an "AS IS" BASIS,
- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *   See the License for the specific language governing permissions and
- *   limitations under the License.
- * ====================================================================
+/*
+ * ==================================================================== Copyright 2001-2004 The
+ * Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License. ====================================================================
-import org.apache.maven.tools.repoclean.correlate.ArtifactMd5Correlator;
-import org.apache.maven.tools.repoclean.correlate.ArtifactPomCorrelator;
-import org.apache.maven.tools.repoclean.patch.V4ModelPatcher;
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.construction.ArtifactConstructionSupport;
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
+import org.apache.maven.tools.repoclean.digest.ArtifactDigestVerifier;
+import org.apache.maven.tools.repoclean.discover.ArtifactDiscoverer;
-import org.apache.maven.tools.repoclean.translate.PomV3ToV4Translator;
-import org.apache.maven.tools.repoclean.validate.V4ModelIndependenceValidator;
+import org.apache.maven.tools.repoclean.rewrite.ArtifactPomRewriter;
+import org.codehaus.plexus.PlexusConstants;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.context.Context;
-import org.codehaus.plexus.util.DirectoryScanner;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
-import java.io.FileReader;
-import java.io.FileWriter;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.Iterator;
+import java.util.List;
+    implements Contextualizable
-    private ArtifactPomCorrelator artifactPomCorrelator;
+    private ArtifactDigestVerifier artifactDigestVerifier;
-    private ArtifactMd5Correlator artifactMd5Correlator;
+    private ArtifactConstructionSupport artifactConstructionSupport = new ArtifactConstructionSupport();
-    private PomV3ToV4Translator pomV3ToV4Translator;
+    private PlexusContainer container;
-    private V4ModelIndependenceValidator v4ModelIndependenceValidator;
-
-    private V4ModelPatcher v4ModelPatcher;
-
-    public void cleanRepository( String repositoryPath, String reportsDir, boolean reportOnly )
+    public void cleanRepository( RepositoryCleanerConfiguration configuration )
+        throws Exception
-        Logger logger = getLogger();
+        File reportsBase = normalizeReportsBase( configuration.getReportsPath() );
-        File reportsBase = new File( reportsDir );
-        if ( !reportsBase.exists() )
-        {
-            logger.info( "Creating reports directory: \'" + reportsDir + "\'" );
-            reportsBase.mkdirs();
-        }
-        else if ( !reportsBase.isDirectory() )
-        {
-            logger.error( "Cannot write reports to \'" + reportsDir + "\' because it is not a directory." );
+        File sourceRepositoryBase = normalizeSourceRepositoryBase( configuration.getSourceRepositoryPath() );
-            reportsBase = null;
-        }
+        File targetRepositoryBase = normalizeTargetRepositoryBase( configuration.getTargetRepositoryPath() );
-        File repositoryBase = new File( repositoryPath );
-        if ( !repositoryBase.exists() )
-        {
-            logger.error( "Cannot clean repository \'" + repositoryPath + "\' because it does not exist." );
-
-            repositoryBase = null;
-        }
-        else if ( !repositoryBase.isDirectory() )
-        {
-            logger.error( "Cannot clean repository \'" + repositoryPath + "\' because it is not a directory." );
-
-            repositoryBase = null;
-        }
-
-        // do not proceed if we cannot produce reports, or if the repository is 
+        // do not proceed if we cannot produce reports, or if the repository is
-        if ( reportsBase != null && repositoryBase != null )
+        if ( reportsBase != null && sourceRepositoryBase != null && targetRepositoryBase != null )
-            logger.info( "Scanning for POMs." );
-            String[] poms = scanPoms( repositoryPath );
-
-            logger.info( "Scanning for artifacts." );
-            String[] artifacts = scanArtifacts( repositoryPath );
+            Logger logger = getLogger();
-            logger.info( "Correlating artifacts to POMs." );
-            artifactPomCorrelator.correlateArtifactsToPoms( poms, artifacts, repoReporter );
+            ArtifactDiscoverer artifactDiscoverer = (ArtifactDiscoverer) container.lookup(
+                                                                                           ArtifactDiscoverer.ROLE,
+                                                                                           configuration.getSourceRepositoryLayout() );
-            logger.info( "Correlating artifacts to MD5 digest files." );
-            artifactMd5Correlator.correlateArtifactsToMd5( repositoryBase, artifacts, repoReporter, reportOnly );
-
-            logger.info( "Translating POMs to V4 format." );
-            for ( int i = 0; i < poms.length; i++ )
+            logger.info( "Discovering artifacts." );
+            List artifacts = null;
+            try
-                String pom = poms[i];
+                artifacts = artifactDiscoverer.discoverArtifacts( sourceRepositoryBase, repoReporter );
+            }
+            catch ( Exception e )
+            {
+                repoReporter.error( "Error discovering artifacts in source repository.", e );
+            }
-                Reporter pomReporter = new Reporter( reportsBase, pom + ".report.txt" );
+            if ( artifacts != null )
+            {
+                ArtifactRepositoryLayout sourceLayout = (ArtifactRepositoryLayout) container.lookup(
+                                                                                                     ArtifactRepositoryLayout.ROLE,
+                                                                                                     configuration.getSourceRepositoryLayout() );
-                logger.info( "Reading POM: \'" + pom + "\'" );
-                org.apache.maven.model.v3_0_0.Model v3Model = null;
-                try
+                ArtifactRepository sourceRepo = new ArtifactRepository( "source",
+                                                                        "file://" + sourceRepositoryBase.getAbsolutePath(),
+                                                                        sourceLayout );
+
+                ArtifactRepositoryLayout targetLayout = (ArtifactRepositoryLayout) container.lookup(
+                                                                                                     ArtifactRepositoryLayout.ROLE,
+                                                                                                     configuration.getTargetRepositoryLayout() );
+
+                ArtifactRepository targetRepo = new ArtifactRepository( "target",
+                                                                        "file://" + targetRepositoryBase.getAbsolutePath(),
+                                                                        targetLayout );
+
+                logger.info( "Rewriting POMs and artifact files." );
+                for ( Iterator it = artifacts.iterator(); it.hasNext(); )
-                    v3Model = readV3( repositoryBase, pom );
-                }
-                catch ( Exception e )
-                {
-                    logger.error( "Error reading POM: \'" + pom + "\'", e );
-                }
+                    Artifact artifact = (Artifact) it.next();
+                    
+                    Reporter artifactReporter = new Reporter( reportsBase, artifact.getGroupId() + "_"
+                                                              + artifact.getArtifactId() + "_" + artifact.getVersion() + ".report.txt" );
-                if ( v3Model != null )
-                {
-                    logger.info( "Translating POM: \'" + pom + "\'" );
-                    org.apache.maven.model.v4_0_0.Model v4Model = pomV3ToV4Translator.translate( v3Model, pomReporter );
-
-                    logger.info( "Performing validation on resulting v4 model for POM: \'" + pom + "\'" );
-                    boolean isValid = v4ModelIndependenceValidator.validate( v4Model, pomReporter, true );
-
-                    if ( !isValid )
+                    boolean errorOccurred = false;
+                    
+                    try
-                        logger.info( "Patching v4 model for POM: \'" + pom + "\' using information glean from path." );
-                        v4ModelPatcher.patchModel( v4Model, pom, pomReporter );
+                        if ( !configuration.reportOnly() )
+                        {
+                            logger.debug("sourceRepo basedir is: \'" + sourceRepo.getBasedir() + "\'");
+                            logger.debug("targetRepo basedir is: \'" + targetRepo.getBasedir() + "\'");
+                            
+                            File artifactSource = new File( sourceRepo.getBasedir(), sourceRepo.pathOf( artifact ) );
+                            File artifactTarget = new File( targetRepo.getBasedir(), targetRepo.pathOf( artifact ) );
-                        logger.info( "Re-performing validation on patched v4 model for POM: \'" + pom + "\'" );
-                        isValid = v4ModelIndependenceValidator.validate( v4Model, pomReporter, false );
+                            File targetParent = artifactTarget.getParentFile();
+                            if ( !targetParent.exists() )
+                            {
+                                targetParent.mkdirs();
+                            }
+
+                            logger.debug( "Copying artifact[" + artifact.getId() + "] from \'"
+                                + artifactSource + "\' to \'" + artifactTarget + "\'." );
+                            
+                            copyArtifact( artifactSource, artifactTarget, artifactReporter );
+                        }
+                        else
+                        {
+                            artifactReporter.info( "Skipping artifact copy (we're in report-only mode)." );
+                        }
+                    }
+                    catch ( Exception e )
+                    {
+                        repoReporter.error("Error transferring artifact[" + artifact.getId() + "] to the target repository.", e);
+                        
+                        // if we can't copy the jar over, then skip the rest.
+                        errorOccurred = true;
-                    if ( pomReporter.hasError() )
+                    if ( !errorOccurred )
-                        repoReporter.warn( "Translation of POM: \'" + pom + "\' encountered errors." );
-                    }
-
-                    if ( !reportOnly )
-                    {
-                        logger.info( "Writing POM: \'" + pom + "\'" );
+                        logger.debug( "working on digest for artifact[" + artifact.getId() + "] with groupId: \'"
+                            + artifact.getGroupId() + "\'" );
-                            writeV4( repositoryBase, pom, v4Model );
+                            artifactDigestVerifier.verifyDigest( artifact, sourceRepo, targetRepo, artifactReporter,
+                                                                 configuration.reportOnly() );
-                            logger.error( "Error writing POM: \'" + pom + "\'", e );
+                            repoReporter.error( "Error verifying digest for artifact[" + artifact.getId() + "]", e );
-                    else
-                    {
-                        logger.info( "NOT writing POM: \'" + pom + "\'; we are in report-only mode." );
-                    }
-                }
-                else
-                {
-                    pomReporter.error( "Cannot translate pom. V3 model is null." );
-                }
-                try
-                {
-                    pomReporter.writeReport();
-                }
-                catch ( IOException e )
-                {
-                    logger.error( "Error writing report for POM: \'" + pom + "\'", e );
+                    if ( !errorOccurred )
+                    {
+                        Artifact pomArtifact = buildPomArtifact( artifact );
+
+                        ArtifactPomRewriter artifactPomRewriter = (ArtifactPomRewriter) container.lookup(
+                                                                                                          ArtifactPomRewriter.ROLE,
+                                                                                                          configuration.getSourcePomVersion() );
+
+                        File sourcePom = new File( sourceRepositoryBase, sourceRepo.pathOf( pomArtifact ) );
+
+                        File targetPom = new File( targetRepositoryBase, targetRepo.pathOf( pomArtifact ) );
+
+                        try
+                        {
+                            artifactPomRewriter.rewrite( artifact, sourcePom, targetPom, artifactReporter,
+                                                         configuration.reportOnly() );
+                        }
+                        catch ( Exception e )
+                        {
+                            repoReporter.error( "Error rewriting POM for artifact[" + artifact.getId()
+                                + "] into the target repository.", e );
+                        }
+                    }
+
+                    try
+                    {
+                        artifactReporter.writeReport();
+                    }
+                    catch ( IOException e )
+                    {
+                        logger.error( "Error writing report for artifact \'" + artifact.getId() + "\'", e );
+                    }
-    private void writeV4( File repositoryBase, String pom, org.apache.maven.model.v4_0_0.Model model ) throws Exception
+    private void copyArtifact( File artifactSource, File artifactTarget, Reporter reporter ) throws IOException
-        FileWriter writer = null;
+        InputStream inStream = null;
+        OutputStream outStream = null;
-            File pomFile = new File( repositoryBase, pom );
-            writer = new FileWriter( pomFile );
-
-            org.apache.maven.model.v4_0_0.io.xpp3.MavenXpp3Writer modelWriter = new org.apache.maven.model.v4_0_0.io.xpp3.MavenXpp3Writer();
-
-            modelWriter.write( writer, model );
+            File targetParent = artifactTarget.getParentFile();
+            if(!targetParent.exists())
+            {
+                reporter.info("Creating directory \'" + targetParent + "\'.");
+                targetParent.mkdirs();
+            }
+            
+            inStream = new BufferedInputStream(new FileInputStream(artifactSource));
+            outStream = new BufferedOutputStream(new FileOutputStream(artifactTarget));
+            
+            byte[] buffer = new byte[16];
+            int read = -1;
+            
+            while((read = inStream.read(buffer)) > -1)
+            {
+                outStream.write(buffer, 0, read);
+            }
+            
+            outStream.flush();
-            IOUtil.close( writer );
+            IOUtil.close(inStream);
+            IOUtil.close(outStream);
-    private org.apache.maven.model.v3_0_0.Model readV3( File repositoryBase, String pom ) throws Exception
+    private Artifact buildPomArtifact( Artifact artifact )
-        org.apache.maven.model.v3_0_0.Model model = null;
+        return artifactConstructionSupport.createArtifact( artifact.getGroupId(), artifact.getArtifactId(),
+                                                           artifact.getVersion(), artifact.getScope(), "pom" );
+    }
-        FileReader reader = null;
-        try
+    private File normalizeTargetRepositoryBase( String targetRepositoryPath )
+    {
+        Logger logger = getLogger();
+
+        File targetRepositoryBase = new File( targetRepositoryPath );
+        
+        logger.info("Target repository is at: \'" + targetRepositoryBase + "\'");
+
+        if ( !targetRepositoryBase.exists() )
-            File pomFile = new File( repositoryBase, pom );
-            reader = new FileReader( pomFile );
+            logger.info( "Creating target repository at: \'" + targetRepositoryBase + "\'." );
-            org.apache.maven.model.v3_0_0.io.xpp3.MavenXpp3Reader modelReader = new org.apache.maven.model.v3_0_0.io.xpp3.MavenXpp3Reader();
-            model = modelReader.read( reader );
+            targetRepositoryBase.mkdirs();
-        finally
+        else if ( !targetRepositoryBase.isDirectory() )
-            IOUtil.close( reader );
+            logger.error( "Cannot write to target repository \'" + targetRepositoryBase
+                + "\' because it is not a directory." );
+
+            targetRepositoryBase = null;
-        return model;
+        return targetRepositoryBase;
-    private String[] scanPoms( String repositoryPath )
+    private File normalizeSourceRepositoryBase( String sourceRepositoryPath )
-        DirectoryScanner scanner = new DirectoryScanner();
-        scanner.setBasedir( repositoryPath );
-        scanner.setIncludes( new String[] { "**/poms/*.pom" } );
+        Logger logger = getLogger();
-        scanner.scan();
+        File sourceRepositoryBase = new File( sourceRepositoryPath );
-        return scanner.getIncludedFiles();
+        logger.info("Source repository is at: \'" + sourceRepositoryBase + "\'");
+
+        if ( !sourceRepositoryBase.exists() )
+        {
+            logger.error( "Cannot convert repository \'" + sourceRepositoryBase + "\' because it does not exist." );
+
+            sourceRepositoryBase = null;
+        }
+        else if ( !sourceRepositoryBase.isDirectory() )
+        {
+            logger.error( "Cannot convert repository \'" + sourceRepositoryBase + "\' because it is not a directory." );
+
+            sourceRepositoryBase = null;
+        }
+
+        return sourceRepositoryBase;
-    private String[] scanArtifacts( String repositoryPath )
+    private File normalizeReportsBase( String reportsPath )
-        DirectoryScanner scanner = new DirectoryScanner();
-        scanner.setBasedir( repositoryPath );
-        scanner.setExcludes( new String[] { "**/poms/*.pom", "**/*.md5" } );
+        Logger logger = getLogger();
-        scanner.scan();
+        File reportsBase = new File( reportsPath );
+        if ( !reportsBase.exists() )
+        {
+            logger.info( "Creating reports directory: \'" + reportsBase + "\'" );
-        return scanner.getIncludedFiles();
+            reportsBase.mkdirs();
+        }
+        else if ( !reportsBase.isDirectory() )
+        {
+            logger.error( "Cannot write reports to \'" + reportsBase + "\' because it is not a directory." );
+
+            reportsBase = null;
+        }
+
+        return reportsBase;
+    }
+
+    public void contextualize( Context context )
+        throws Exception
+    {
+        this.container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
