Switching back to selectively import extensions into a project-specific ClassRealm, except this time extension realms will be shared (the origin of the aforementioned imports) to conserve memory tied up by classloading. Similarly, plugin realms are managed using a key produced from g:a:v of the plugin, plus the hashcode of all g:a:v of the plugin-level dependencies aggregated into one string, to distinguish the deploy plugin 2.0 with no deps from the deploy plugin 2.0 with a plugin-level dep on wagon-webdav. Plugin realms have their parent realms managed by the pluginManager now prior to lookup or execution of the mojo instance, and PluginDescriptor.(classRealm|artifacts) attributes are set for each execution. Likewise, the MavenPluginCollector now tracks plugin descriptors with their version information included, instead of just using g:a.

Had to bump the plexus-container-default version up to alpha-36 to fix a problem in ClassicSingletonComponentManager. All realms for extensions, plugins, and projects (which contain only imports from extensions) are now managed by the MavenRealmManager.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@591391 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
-import java.util.Map;
-    /** protected for tests only.. */
-    protected Map getPluginExtensionComponents( Plugin plugin )
-        throws PluginManagerException
-    {
-        try
-        {
-            PluginManager pluginManager = (PluginManager) container.lookup( PluginManager.ROLE );
-
-            return pluginManager.getPluginComponents( plugin, ArtifactHandler.ROLE );
-        }
-        catch ( ComponentLookupException e )
-        {
-            getLogger().debug( "Unable to find the lifecycle component in the extension", e );
-
-            return new HashMap();
-        }
-    }
-
-    /**
-     * mkleint: copied from DefaultLifecycleExecutor
-     *
-     * @todo Not particularly happy about this. Would like WagonManager and ArtifactTypeHandlerManager to be able to
-     * lookup directly, or have them passed in
-     * @todo Move this sort of thing to the tail end of the project-building process
-     */
-    private Map findArtifactTypeHandlers( MavenProject project )
-        throws MavenEmbedderException
-    {
-        Map map = new HashMap();
-
-        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
-        {
-            Plugin plugin = (Plugin) i.next();
-
-            if ( plugin.isExtensions() )
-            {
-                try
-                {
-                    verifyPlugin( plugin, project );
-                }
-                catch ( ArtifactResolutionException e )
-                {
-                    throw new PluginLookupException( plugin, "Error resolving plugin.", e );
-                }
-                catch ( ArtifactNotFoundException e )
-                {
-                    throw new PluginLookupException( plugin, "Error resolving plugin.", e );
-                }
-                catch ( PluginNotFoundException e )
-                {
-                    throw new PluginLookupException( plugin, "Error resolving plugin.", e );
-                }
-                catch ( ComponentLookupException e )
-                {
-                    throw new PluginLookupException( plugin, "Error resolving plugin.", e );
-                }
-                catch ( PluginVersionResolutionException e )
-                {
-                    throw new PluginLookupException( plugin, "Error resolving plugin.", e );
-                }
-                catch ( InvalidPluginException e )
-                {
-                    throw new PluginLookupException( plugin, "Error resolving plugin.", e );
-                }
-                catch ( PluginManagerException e )
-                {
-                    throw new PluginLookupException( plugin, "Error resolving plugin.", e );
-                }
-                catch ( PluginVersionNotFoundException e )
-                {
-                    throw new PluginLookupException( plugin, "Error resolving plugin.", e );
-                }
-
-                try
-                {
-                    Map extensionComponents = getPluginExtensionComponents( plugin );
-
-                    map.putAll( extensionComponents );
-                }
-                catch ( PluginManagerException e )
-                {
-                    throw new PluginLookupException( plugin, "Error looking up plugin components.", e );
-                }
-
-                // shudder...
-                for ( Iterator j = map.values().iterator(); j.hasNext(); )
-                {
-                    ArtifactHandler handler = (ArtifactHandler) j.next();
-
-                    if ( project.getPackaging().equals( handler.getPackaging() ) )
-                    {
-                        project.getArtifact().setArtifactHandler( handler );
-                    }
-                }
-            }
-        }
-
-        return map;
-    }
-
-        extensionScanner.scanForBuildExtensions( mavenProject, request.getLocalRepository(), request.getProfileManager() );
+        extensionScanner.scanForBuildExtensions( mavenProject, request );
