Adding the notion of a build-context, and several build-context classes that can be used: ProjectBuildContext, which contains lineage and current-project info, ExecutionBuildContext, which contains the information in the original MavenExecutionRequest, and SystemBuildContext, which contains things like System properties...these use the BuildContextManager to store and retrieve their info from the core container's Context object.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@497911 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.context.BuildContextManager;
-import org.apache.maven.model.Profile;
-import org.apache.maven.profiles.ProfilesConversionUtils;
-import org.apache.maven.profiles.ProfilesRoot;
+import org.apache.maven.project.build.ProjectBuildContext;
-    private ProfileInjector profileInjector;
-
-    private ArtifactRepositoryFactory artifactRepositoryFactory;
-    
+    
+    private BuildContextManager buildContextManager;
-
-        List activeProfiles;
-
-        profileManager.addProfiles( superModel.getProfiles() );
-
+        MavenProject project = new MavenProject( superModel );
+        
+        ProjectBuildContext projectContext = ProjectBuildContext.getProjectBuildContext( buildContextManager, true );
+        
+        projectContext.setCurrentProject( project );
+        projectContext.store( buildContextManager );
+        
-        activeProfiles = injectActiveProfiles( profileManager, superModel );
+        List activeProfiles = profileAdvisor.applyActivatedProfiles( superModel, null, profileManager.getExplicitlyActivatedIds(), profileManager.getExplicitlyDeactivatedIds() );
+        List activeExternalProfiles = profileAdvisor.applyActivatedExternalProfiles( superModel, null, profileManager );
+        
+        LinkedHashSet profiles = new LinkedHashSet();
+        
+        if ( activeProfiles != null && !activeProfiles.isEmpty() )
+        {
+            profiles.addAll( activeProfiles );
+        }
+        
+        if ( activeExternalProfiles != null && !activeExternalProfiles.isEmpty() )
+        {
+            profiles.addAll( activeExternalProfiles );
+        }
-        MavenProject project = new MavenProject( superModel );
-
-        project.setActiveProfiles( activeProfiles );
+        project.setActiveProfiles( new ArrayList( profiles ) );
+
+        ProjectBuildContext projectContext = ProjectBuildContext.getProjectBuildContext( buildContextManager, true );
+        
+        projectContext.setModelLineage( modelLineage );
+        projectContext.store( buildContextManager );
+        
+            
+            projectContext.setCurrentProject( project );
+            projectContext.store( buildContextManager );
-    private List injectActiveProfiles( ProfileManager profileManager, Model model )
-        throws ProjectBuildingException
-    {
-        List activeProfiles;
-
-        if ( profileManager != null )
-        {
-            try
-            {
-                activeProfiles = profileManager.getActiveProfiles();
-            }
-            catch ( ProfileActivationException e )
-            {
-                String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
-
-                throw new ProjectBuildingException( projectId, e.getMessage(), e );
-            }
-
-            for ( Iterator it = activeProfiles.iterator(); it.hasNext(); )
-            {
-                Profile profile = (Profile) it.next();
-
-                profileInjector.inject( profile, model );
-            }
-        }
-        else
-        {
-            activeProfiles = Collections.EMPTY_LIST;
-        }
-
-        return activeProfiles;
-    }
-
-    private void loadProjectExternalProfiles( ProfileManager profileManager, File projectDir )
-        throws ProfileActivationException
-    {
-        if ( projectDir != null )
-        {
-            try
-            {
-                ProfilesRoot root = profilesBuilder.buildProfiles( projectDir );
-
-                if ( root != null )
-                {
-                    List active = root.getActiveProfiles();
-
-                    if ( active != null && !active.isEmpty() )
-                    {
-                        profileManager.explicitlyActivate( root.getActiveProfiles() );
-                    }
-
-                    for ( Iterator it = root.getProfiles().iterator(); it.hasNext(); )
-                    {
-                        org.apache.maven.profiles.Profile rawProfile = (org.apache.maven.profiles.Profile) it.next();
-
-                        Profile converted = ProfilesConversionUtils.convertFromProfileXmlProfile( rawProfile );
-
-                        profileManager.addProfile( converted );
-                    }
-                }
-            }
-            catch ( IOException e )
-            {
-                throw new ProfileActivationException( "Cannot read profiles.xml resource from directory: " + projectDir,
-                                                      e );
-            }
-            catch ( XmlPullParserException e )
-            {
-                throw new ProfileActivationException(
-                    "Cannot parse profiles.xml resource from directory: " + projectDir, e );
-            }
-        }
-    }
-
