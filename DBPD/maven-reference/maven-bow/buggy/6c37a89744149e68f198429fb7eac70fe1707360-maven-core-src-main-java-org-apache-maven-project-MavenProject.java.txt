[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.maven.RepositoryUtils;
+import org.sonatype.aether.graph.DependencyFilter;
+import org.sonatype.aether.repository.RemoteRepository;
+    private List<RemoteRepository> remoteProjectRepositories;
+
+    private List<RemoteRepository> remotePluginRepositories;
+
-
+    
-    private ArtifactFilter extensionArtifactFilter;
+    private DependencyFilter extensionDependencyFilter;
-
+    
-    {
+    {        
-     *
+     * 
-
+    
-        {
+        {                        
-                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
-                    || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
+                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() ) || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
-                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
-                    || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
+                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() ) || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
-            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() )
-                || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
+            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() ) || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
-
+        
-        {
+        {            
-            {
+            {                
-     *
+     * 
-                Artifact artifact =
-                    repositorySystem.createArtifact( ext.getGroupId(), ext.getArtifactId(), version, null, "jar" );
+                Artifact artifact = repositorySystem.createArtifact( ext.getGroupId(), ext.getArtifactId(), version, null, "jar" );
+        this.remoteProjectRepositories = RepositoryUtils.toRepos( getRemoteArtifactRepositories() );
+        this.remotePluginRepositories = RepositoryUtils.toRepos( getPluginArtifactRepositories() );
-        return getArtifact().isSnapshot() && ( getSnapshotArtifactRepository() != null ) ? getSnapshotArtifactRepository()
-                        : getReleaseArtifactRepository();
+        return getArtifact().isSnapshot() && ( getSnapshotArtifactRepository() != null ) ? getSnapshotArtifactRepository() : getReleaseArtifactRepository();
+    public List<RemoteRepository> getRemoteProjectRepositories()
+    {
+        return remoteProjectRepositories;
+    }
+
+    public List<RemoteRepository> getRemotePluginRepositories()
+    {
+        return remotePluginRepositories;
+    }
+
-     *
+     * 
-     *
+     * 
-            if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null )
-                && ( deps.size() > 0 ) )
+            if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null ) && ( deps.size() > 0 ) )
-        projectReferences.put( getProjectReferenceId( project.getGroupId(), project.getArtifactId(),
-                                                      project.getVersion() ), project );
+        projectReferences.put( getProjectReferenceId( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
-
+        
-
+        
-     *
+     * 
-     * derived state with project instances.
+     * derived state with project instances. 
-     * Returns context value of this project associated with the given key
-     * or null if this project has no such value.
+     * Returns context value of this project associated with the given key 
+     * or null if this project has no such value. 
-     *
+     * 
-     *
+     * 
-     *
-     * @param extensionArtifactFilter The artifact filter to apply to plugins, may be {@code null}.
+     * 
+     * @param extensionDependencyFilter The dependency filter to apply to plugins, may be {@code null}.
-    public void setExtensionArtifactFilter( ArtifactFilter extensionArtifactFilter )
+    public void setExtensionDependencyFilter( DependencyFilter extensionDependencyFilter )
-        this.extensionArtifactFilter = extensionArtifactFilter;
+        this.extensionDependencyFilter = extensionDependencyFilter;
-     * Gets the artifact filter used to exclude shared extension artifacts from plugin realms. <strong>Warning:</strong>
-     * This is an internal utility method that is only public for technical reasons, it is not part of the public API.
-     * In particular, this method can be changed or deleted without prior notice and must not be used by plugins.
-     *
-     * @return The artifact filter or {@code null}.
+     * Gets the dependency filter used to exclude shared extension artifacts from plugin realms.
+     * <strong>Warning:</strong> This is an internal utility method that is only public for technical reasons, it is not
+     * part of the public API. In particular, this method can be changed or deleted without prior notice and must not be
+     * used by plugins.
+     * 
+     * @return The dependency filter or {@code null}.
-    public ArtifactFilter getExtensionArtifactFilter()
+    public DependencyFilter getExtensionDependencyFilter()
-        return extensionArtifactFilter;
+        return extensionDependencyFilter;
-     *
+     * 
-     *
+     * 
-     *
+     * 
