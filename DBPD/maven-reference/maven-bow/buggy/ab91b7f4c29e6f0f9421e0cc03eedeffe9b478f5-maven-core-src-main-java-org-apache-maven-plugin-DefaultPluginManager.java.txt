o Cleaned up field-level annotation support (especially descriptor extraction, generation, and building)
o Converted all "core" plugins (including maven-core-it-plugin) to use field-level annotations
o Removed generation of parameter descriptors for ${/#component.* param specifications.
o Added @readonly for parameters that cannot be overridden by user configuration (List override was dangerous here)
o Added validation against pom-derived configuration for @readonly parameters
o Fixed @parameter alias="" support...now configuration of the mojo instance actually will work with either the real param name or the alias. Would be nice to support multiple aliases, but that might require @alias annotations...
o Added [temporary?] support for null editable attributes for parameters, to support pre-built mojos from the repo.

Annotation support should be just about ready to go...


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@165224 13f79535-47bb-0310-9956-ffa450edef68

-                    String message = "The maven plugin with groupId: '" + groupId + "' and artifactId: '" + artifactId +
-                        "' which was configured for use in this project does not have a version associated with it.";
+                    String message = "The maven plugin with groupId: '" + groupId + "' and artifactId: '" + artifactId
+                        + "' which was configured for use in this project does not have a version associated with it.";
-                throw new PluginManagerException( "Error occurred in the artifact container attempting to download plugin " +
-                                                  groupId + ":" + artifactId, e );
+                throw new PluginManagerException(
+                                                  "Error occurred in the artifact container attempting to download plugin "
+                                                      + groupId + ":" + artifactId, e );
-                if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
-                    version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
+                if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() )
+                    && version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
-                throw new PluginManagerException(
-                    "Internal configuration error while retrieving " + groupId + ":" + artifactId, e );
+                throw new PluginManagerException( "Internal configuration error while retrieving " + groupId + ":"
+                    + artifactId, e );
-            ( (ArtifactEnabledContainer) container ).addComponent( pluginArtifact, artifactResolver,
-                                                                   session.getPluginRepositories(),
-                                                                   session.getLocalRepository(), metadataSource,
-                                                                   artifactFilter );
+            ( (ArtifactEnabledContainer) container ).addComponent( pluginArtifact, artifactResolver, session
+                .getPluginRepositories(), session.getLocalRepository(), metadataSource, artifactFilter );
-                resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder,
-                                               mojoDescriptor.getRequiresDependencyResolution() );
+                resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder, mojoDescriptor
+                    .getRequiresDependencyResolution() );
-            PlexusConfiguration configuration;
+            PlexusConfiguration pomConfiguration;
-                configuration = new XmlPlexusConfiguration( "configuration" );
+                pomConfiguration = new XmlPlexusConfiguration( "configuration" );
-                configuration = new XmlPlexusConfiguration( dom );
+                pomConfiguration = new XmlPlexusConfiguration( dom );
+
+                // Validate against non-editable (@readonly) parameters, to make sure users aren't trying to 
+                // override in the POM.
+                validatePomConfiguration( mojoDescriptor, pomConfiguration );
-            configuration = mergeConfiguration( configuration, mojoDescriptor.getConfiguration() );
+            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration, mojoDescriptor
+                .getConfiguration() );
-                    Map map = getPluginConfigurationFromExpressions( mojoDescriptor, configuration,
+                    Map map = getPluginConfigurationFromExpressions( mojoDescriptor, mergedConfiguration,
-                    populatePluginFields( plugin, configuration, map, expressionEvaluator );
+                    populatePluginFields( plugin, pomConfiguration, map, expressionEvaluator );
-                    Map map = getPluginConfigurationFromExpressions( mojoDescriptor, configuration,
+                    Map map = getPluginConfigurationFromExpressions( mojoDescriptor, mergedConfiguration,
-                    request = createPluginRequest( configuration, map );
+                    request = createPluginRequest( pomConfiguration, map );
+    private void validatePomConfiguration( MojoDescriptor goal, PlexusConfiguration pomConfiguration )
+        throws PluginConfigurationException
+    {
+        List parameters = goal.getParameters();
+
+        for ( int i = 0; i < parameters.size(); i++ )
+        {
+            Parameter parameter = (Parameter) parameters.get( i );
+
+            boolean editable = parameter.isEditable();
+
+            // the key for the configuration map we're building.
+            String key = parameter.getName();
+
+            // the key used to lookup the parameter in the config from the POM, etc.
+            String lookupKey = parameter.getAlias();
+
+            if ( StringUtils.isEmpty( lookupKey ) )
+            {
+                lookupKey = key;
+            }
+
+            // Make sure the parameter is either editable/configurable, or else is NOT specified in the POM 
+            if ( !editable
+                && ( pomConfiguration.getChild( lookupKey, false ) != null || pomConfiguration.getChild( key, false ) != null ) )
+            {
+                StringBuffer errorMessage = new StringBuffer().append( "ERROR: Cannot override read-only parameter: " )
+                    .append( key );
+
+                if ( !lookupKey.equals( key ) )
+                {
+                    errorMessage.append( " (with alias: " ).append( lookupKey ).append( ")" );
+                }
+
+                errorMessage.append( " in goal: " ).append( goal.getId() );
+
+                throw new PluginConfigurationException( errorMessage.toString() );
+            }
+        }
+    }
+
-                                       ExpressionEvaluator expressionEvaluator )
+                                      ExpressionEvaluator expressionEvaluator )
-    private Map getPluginConfigurationFromExpressions( MojoDescriptor goal, PlexusConfiguration configuration,
-                                                       ExpressionEvaluator expressionEvaluator )
+    private Map getPluginConfigurationFromExpressions( MojoDescriptor goal, PlexusConfiguration mergedConfiguration,
+                                                      ExpressionEvaluator expressionEvaluator )
+            boolean editable = parameter.isEditable();
+
-            
+
-            
+
-            if ( configuration.getChild( lookupKey, false ) == null )
+
+            boolean foundInConfiguration = false;
+
+            if ( mergedConfiguration.getChild( lookupKey, false ) != null )
-                expression = parameter.getExpression();
+                expression = mergedConfiguration.getChild( lookupKey, false ).getValue( null );
+                foundInConfiguration = true;
+            }
+            else if ( mergedConfiguration.getChild( key, false ) != null )
+            {
+                expression = mergedConfiguration.getChild( key, false ).getValue( null );
+                foundInConfiguration = true;
-                expression = configuration.getChild( lookupKey, false ).getValue( null );
+                expression = parameter.getExpression();
+            }
-                if ( expression != null && parameter.getDeprecated() != null )
+            if ( foundInConfiguration && expression != null && parameter.getDeprecated() != null )
+            {
+                PlexusConfiguration goalConfiguration = goal.getConfiguration();
+
+                if ( !expression.equals( goalConfiguration.getChild( lookupKey, false ).getValue( null ) )
+                    && !expression.equals( goalConfiguration.getChild( key, false ).getValue( null ) ) )
-                    if ( !expression.equals( goal.getConfiguration().getChild( lookupKey, false ).getValue( null ) ) )
+                    StringBuffer message = new StringBuffer().append( "DEPRECATED: " ).append( key );
+
+                    if ( !lookupKey.equals( key ) )
-                        getLogger().warn(
-                            "DEPRECATED: " + parameter.getName() + " is deprecated.\n\t" + parameter.getDeprecated() );
+                        message.append( " (aliased to " ).append( lookupKey ).append( ")" );
+
+                    message.append( " is deprecated.\n\t" ).append( parameter.getDeprecated() );
+
+                    getLogger().warn( message.toString() );
-                throw new PluginConfigurationException( createPluginParameterRequiredMessage( goal, parameter ) );
+                throw new PluginConfigurationException( createPluginParameterRequiredMessage( goal, parameter, expression ) );
-    public static String createPluginParameterRequiredMessage( MojoDescriptor mojo, Parameter parameter )
+    public static String createPluginParameterRequiredMessage( MojoDescriptor mojo, Parameter parameter, String expression )
+        message.append( " The retrieval expression was: " ).append( expression );
-        artifactFilter = new ExclusionSetFilter( new String[]{"maven-core", "maven-artifact", "maven-model",
-                                                              "maven-settings", "maven-monitor", "maven-plugin-api",
-                                                              "maven-plugin-descriptor", "plexus-container-default",
-                                                              "maven-project", "plexus-container-artifact",
-                                                              "wagon-provider-api", "classworlds", "maven-plugin"} );
+        artifactFilter = new ExclusionSetFilter( new String[] {
+            "maven-core",
+            "maven-artifact",
+            "maven-model",
+            "maven-settings",
+            "maven-monitor",
+            "maven-plugin-api",
+            "maven-plugin-descriptor",
+            "plexus-container-default",
+            "maven-project",
+            "plexus-container-artifact",
+            "wagon-provider-api",
+            "classworlds",
+            "maven-plugin" } );
-                                                MavenProjectBuilder mavenProjectBuilder, String scope )
+                                               MavenProjectBuilder mavenProjectBuilder, String scope )
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(),
-                                                                                context.getRemoteRepositories(),
-                                                                                context.getLocalRepository(),
-                                                                                sourceReader, filter );
+        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(), context
+            .getRemoteRepositories(), context.getLocalRepository(), sourceReader, filter );
-}
-
+}
