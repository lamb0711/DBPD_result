move all artifact creation to artifact factory - further refactoring planned


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163499 13f79535-47bb-0310-9956-ffa450edef68

- * ====================================================================
- * Copyright 2001-2004 The Apache Software Foundation. Licensed under the Apache
- * License, Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
- * or agreed to in writing, software distributed under the License is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the specific language
- * governing permissions and limitations under the License.
- * ====================================================================
+ * Copyright 2001-2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import org.apache.maven.artifact.DefaultArtifact;
-import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;
+import org.apache.maven.artifact.factory.ArtifactFactory;
-    protected ArtifactResolver artifactResolver;
-
-    protected ArtifactHandlerManager artifactHandlerManager;
+//    protected ArtifactHandlerManager artifactHandlerManager;
-    protected MavenProjectBuilder mavenProjectBuilder;
-
-     * 
+     *
-    public void processPluginDescriptor( MavenPluginDescriptor mavenPluginDescriptor ) throws CycleDetectedException
+    public void processPluginDescriptor( MavenPluginDescriptor mavenPluginDescriptor )
+        throws CycleDetectedException
-        if ( !(componentSetDescriptor instanceof MavenPluginDescriptor) )
+        if ( !( componentSetDescriptor instanceof MavenPluginDescriptor ) )
-    public void verifyPluginForGoal( String goalName, MavenSession session ) throws Exception
+    public void verifyPluginForGoal( String goalName, MavenSession session )
+        throws Exception
-    public void verifyPlugin( String pluginId, MavenSession session ) throws Exception
+    public void verifyPlugin( String pluginId, MavenSession session )
+        throws Exception
-            Artifact pluginArtifact = new DefaultArtifact( "maven", artifactId, version, DefaultArtifact.SCOPE_RUNTIME,
-                                                           "plugin", "jar" );
+            ArtifactFactory artifactFactory = null;
+            try
+            {
+                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
-            addPlugin( pluginArtifact, session );
+                Artifact pluginArtifact = artifactFactory.createArtifact( "maven", artifactId, version, null, "plugin",
+                                                                          "jar", null );
+
+                addPlugin( pluginArtifact, session );
+            }
+            finally
+            {
+                if ( artifactFactory != null )
+                {
+                    container.release( artifactFactory );
+                }
+            }
-    protected void addPlugin( Artifact pluginArtifact, MavenSession session ) throws Exception
+    protected void addPlugin( Artifact pluginArtifact, MavenSession session )
+        throws Exception
-        // TODO: these should be configured, not instantiated here
+        ArtifactResolver artifactResolver = null;
+        MavenProjectBuilder mavenProjectBuilder = null;
-        artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
+        try
+        {
+            artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
+            mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
-        mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
+            MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder );
-        MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder );
-
-        ((ArtifactEnabledContainer) container).addComponent( pluginArtifact,
-                                                             artifactResolver,
-                                                             remotePluginRepositories,
-                                                             session.getLocalRepository(),
-                                                             metadataSource,
-                                                             artifactFilter );
+            ( (ArtifactEnabledContainer) container ).addComponent( pluginArtifact, artifactResolver,
+                                                                   remotePluginRepositories,
+                                                                   session.getLocalRepository(), metadataSource,
+                                                                   artifactFilter );
+        }
+        finally
+        {
+            // TODO: watch out for the exceptions being thrown
+            if ( artifactResolver != null )
+            {
+                container.release( artifactResolver );
+            }
+            if ( mavenProjectBuilder != null )
+            {
+                container.release( mavenProjectBuilder );
+            }
+        }
-    public PluginExecutionResponse executeMojo( MavenSession session, String goalName ) throws GoalExecutionException
+    public PluginExecutionResponse executeMojo( MavenSession session, String goalName )
+        throws GoalExecutionException
-                resolveTransitiveDependencies( session );
-                downloadDependencies( session );
+                ArtifactResolver artifactResolver = null;
+                MavenProjectBuilder mavenProjectBuilder = null;
+
+                // TODO: should these be released
+                try
+                {
+                    artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
+                    mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
+
+                    resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder );
+                    downloadDependencies( session, artifactResolver );
+                }
+                finally
+                {
+                    // TODO: watch out for the exceptions being thrown
+                    if ( artifactResolver != null )
+                    {
+                        container.release( artifactResolver );
+                    }
+                    if ( mavenProjectBuilder != null )
+                    {
+                        container.release( mavenProjectBuilder );
+                    }
+                }
-        catch ( ArtifactResolutionException e )
+        catch ( Exception e )
-    private void releaseComponents( MojoDescriptor goal, PluginExecutionRequest request ) throws Exception
+    private void releaseComponents( MojoDescriptor goal, PluginExecutionRequest request )
+        throws Exception
-    public static Map createParameters( MojoDescriptor goal, MavenSession session ) throws PluginConfigurationException
+    public static Map createParameters( MojoDescriptor goal, MavenSession session )
+        throws PluginConfigurationException
-        message.append( "The '" + parameter.getName() )
-               .append( "' parameter is required for the execution of the " )
-               .append( mojo.getId() )
-               .append( " mojo and cannot be null." );
+        message.append( "The '" + parameter.getName() ).append( "' parameter is required for the execution of the " ).append(
+            mojo.getId() ).append( " mojo and cannot be null." );
-    public void contextualize( Context context ) throws ContextException
+    public void contextualize( Context context )
+        throws ContextException
-        artifactFilter = new ExclusionSetFilter( new String[] {
-            "maven-core",
-            "maven-artifact",
-            "maven-model",
-            "maven-monitor",
-            "maven-plugin",
-            "plexus-container-api",
-            "plexus-container-default",
-            "plexus-artifact-container",
-            "wagon-provider-api",
-            "classworlds" } );
+        artifactFilter = new ExclusionSetFilter( new String[]{"maven-core", "maven-artifact", "maven-model",
+                                                              "maven-monitor", "maven-plugin", "plexus-container-api",
+                                                              "plexus-container-default", "plexus-artifact-container",
+                                                              "wagon-provider-api", "classworlds"} );
-    private void resolveTransitiveDependencies( MavenSession context ) throws ArtifactResolutionException
+    private void resolveTransitiveDependencies( MavenSession context, ArtifactResolver artifactResolver,
+                                                MavenProjectBuilder mavenProjectBuilder )
+        throws ArtifactResolutionException
-    private void downloadDependencies( MavenSession context ) throws GoalExecutionException
+    private void downloadDependencies( MavenSession context, ArtifactResolver artifactResolver )
+        throws GoalExecutionException
