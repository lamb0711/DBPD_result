PR: MNG-932
add a goal for creating a jar from the test sources


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@293227 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.archiver.MavenArchiveConfiguration;
-import org.apache.maven.archiver.MavenArchiver;
-import org.apache.maven.plugin.AbstractMojo;
-import org.apache.maven.project.MavenProject;
- * @description build a jar
+ * @requiresProject
-    extends AbstractMojo
+    extends AbstractJarMojo
-
-    private static final String[] DEFAULT_EXCLUDES = new String[]{"**/package.html"};
-
-    private static final String[] DEFAULT_INCLUDES = new String[]{"**/**"};
-
-    /**
-	 * Directory containing the generated JAR.
-     *
-     * @parameter expression="${project.build.directory}"
-     * @required
-     * @readonly
-     *
-     * @todo Change type to File
-     */
-    private String basedir;
-
-    /**
-	 * Name of the generated JAR.
-	 *
-     * @parameter alias="jarName" expression="${project.build.finalName}"
-     * @required
-     */
-    private String finalName;
-
-    private String outputDirectory;
-
-    /**
-	 * The maven project.
-	 *
-     * @parameter expression="${project}"
-     * @required
-     * @readonly
-     */
-    private MavenProject project;
-
-    /**
-     * The maven archiver to use.
-     *
-     * @parameter
-     */
-    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();
+    private File outputDirectory;
-        File jarFile = new File( basedir, finalName + ".jar" );
+        File jarFile = createArchive();
+        
+        getProject().getArtifact().setFile( jarFile );
+    }
-        MavenArchiver archiver = new MavenArchiver();
-
-        archiver.setOutputFile( jarFile );
-
-        try
-        {
-            File contentDirectory = new File( outputDirectory );
-            if ( !contentDirectory.exists() )
-            {
-                getLog().warn( "JAR will be empty - no content was marked for inclusion!" );
-            }
-            else
-            {
-                archiver.getArchiver().addDirectory( contentDirectory, DEFAULT_INCLUDES, DEFAULT_EXCLUDES );
-            }
-
-            archiver.createArchive( project, archive );
-
-            project.getArtifact().setFile( jarFile );
-        }
-        catch ( Exception e )
-        {
-            // TODO: improve error handling
-            throw new MojoExecutionException( "Error assembling JAR", e );
-        }
+    /**
+     * Return the main classes directory, so it's used as the root of the jar.
+     */
+    protected File getOutputDirectory()
+    {
+        return outputDirectory;
