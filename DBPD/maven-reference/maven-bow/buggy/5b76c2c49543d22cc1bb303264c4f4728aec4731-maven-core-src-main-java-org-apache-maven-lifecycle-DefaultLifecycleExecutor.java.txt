o created an execution plan which currently contains the mojos that will be executed and the phase of dependency resolution required, if needed



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@778284 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.maven.lifecycle;
+ package org.apache.maven.lifecycle;
-                List<MojoExecution> lifecyclePlan;
+                MavenExecutionPlan executionPlan;
-                    lifecyclePlan = calculateBuildPlan( session, goals.toArray( new String[] {} ) );
+                    executionPlan = calculateExecutionPlan( session, goals.toArray( new String[] {} ) );
-                    downloadProjectDependencies( session, Artifact.SCOPE_TEST /** mojoDescriptor.isDependencyResolutionRequired()*/ );
+                    downloadProjectDependencies( session, executionPlan.getRequiredResolutionScope() );
-                    for ( MojoExecution mojoExecution : lifecyclePlan )
+                    for ( MojoExecution mojoExecution : executionPlan.getExecutions() )
-                for ( MojoExecution mojoExecution : lifecyclePlan )
+                for ( MojoExecution mojoExecution : executionPlan.getExecutions() )
-    public List<MojoExecution> calculateBuildPlan(  MavenSession session, String... tasks )
+    public MavenExecutionPlan calculateExecutionPlan( MavenSession session, String... tasks )
+        String requiredDependencyResolutionScope = null;
+        
-
+            requiredDependencyResolutionScope = calculateRequiredDependencyResolutionScope( requiredDependencyResolutionScope, mojoDescriptor.isDependencyResolutionRequired() );          
+            
-        return lifecyclePlan;
+        return new MavenExecutionPlan( lifecyclePlan, requiredDependencyResolutionScope );        
+    // SCOPE_COMPILE
+    // SCOPE_TEST
+    // SCOPE_RUNTIME
+    //
+    String calculateRequiredDependencyResolutionScope( String currentRequiredDependencyResolutionScope, String inputScope )
+    {
+        if ( inputScope == null )
+        {
+            return currentRequiredDependencyResolutionScope;
+        }
+                
+        if ( currentRequiredDependencyResolutionScope == null && inputScope != null )
+        {
+            return inputScope;
+        }
+
+        if ( currentRequiredDependencyResolutionScope.equals( Artifact.SCOPE_COMPILE ) && ( inputScope.equals(  Artifact.SCOPE_RUNTIME ) || inputScope.equals( Artifact.SCOPE_TEST ) ) )
+        {
+            return inputScope;
+        }
+
+        if ( currentRequiredDependencyResolutionScope.equals( Artifact.SCOPE_RUNTIME ) && inputScope.equals(  Artifact.SCOPE_TEST ) )
+        {
+            return inputScope;
+        }        
+        
+        // Nothing changed we return what we were
+        //
+        return currentRequiredDependencyResolutionScope;
+    }
+    
-    private void populateMojoExecutionConfiguration( MavenProject project, MojoExecution mojoExecution,
-                                                     boolean directInvocation )
+    private void populateMojoExecutionConfiguration( MavenProject project, MojoExecution mojoExecution, boolean directInvocation )
-        Plugin p = project.getPlugin( g + ":" + a );
+        Plugin plugin = project.getPlugin( g + ":" + a );
-        if ( p != null )
+        if ( plugin != null )
-            for ( PluginExecution e : p.getExecutions() )
+            for ( PluginExecution e : plugin.getExecutions() )
-                    Xpp3Dom mojoConfiguration =
-                        extractMojoConfiguration( executionConfiguration, mojoExecution.getMojoDescriptor() );
+                    Xpp3Dom mojoConfiguration = extractMojoConfiguration( executionConfiguration, mojoExecution.getMojoDescriptor() );
-            if ( p != null && p.getConfiguration() != null )
+            if ( plugin != null && plugin.getConfiguration() != null )
-                Xpp3Dom projectDom = (Xpp3Dom) p.getConfiguration();
+                Xpp3Dom projectDom = (Xpp3Dom) plugin.getConfiguration();
-    }    
+    }
