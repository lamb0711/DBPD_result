o Use SLF4J for logging

Conflicts:

	pom.xml

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1396842 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.cli.event.DefaultEventSpyContext;
+import org.apache.maven.cli.event.ExecutionEventLogger;
+import org.apache.maven.cli.logging.PrintStreamLogger;
+import org.apache.maven.cli.logging.Slf4jLoggerManager;
+import org.apache.maven.cli.transfer.BatchModeMavenTransferListener;
+import org.apache.maven.cli.transfer.ConsoleMavenTransferListener;
+import org.apache.maven.cli.transfer.QuietMavenTransferListener;
-import org.codehaus.plexus.logging.Logger;
+import org.codehaus.plexus.logging.LoggerManager;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+    
+    private LoggerManager plexusLoggerManager;
-    private Logger logger;
-
+    private ILoggerFactory slf4jLoggerFactory;
+    
+    private Logger slf4jLogger;
+    
-            // Need to process cli options first to get possible logging options
-            CLIReportingUtils.showError( logger, "ABORTED", e, cliRequest.showErrors );
+            CLIReportingUtils.showError( slf4jLogger, "ABORTED", e, cliRequest.showErrors );
-            CLIReportingUtils.showError( logger, "Error executing Maven.", e, cliRequest.showErrors );
+            CLIReportingUtils.showError( slf4jLogger, "Error executing Maven.", e, cliRequest.showErrors );
-            if ( cliRequest.fileStream != null )
-            {
-                cliRequest.fileStream.close();
-            }
-    //
-    // Logging needs to be handled in a standard way at the container level.
-    //
-    private void logging( CliRequest cliRequest )
-    {
-        cliRequest.debug = cliRequest.commandLine.hasOption( CLIManager.DEBUG );
-        cliRequest.quiet = !cliRequest.debug && cliRequest.commandLine.hasOption( CLIManager.QUIET );
-        cliRequest.showErrors = cliRequest.debug || cliRequest.commandLine.hasOption( CLIManager.ERRORS );
-
-        if ( cliRequest.debug )
-        {
-            cliRequest.request.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_DEBUG );
-        }
-        else if ( cliRequest.quiet )
-        {
-            // TODO: we need to do some more work here. Some plugins use sys out or log errors at info level.
-            // Ideally, we could use Warn across the board
-            cliRequest.request.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_ERROR );
-            // TODO:Additionally, we can't change the mojo level because the component key includes the version and
-            // it isn't known ahead of time. This seems worth changing.
-        }
-        else
-        {
-            cliRequest.request.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_INFO );
-        }
-
-        if ( cliRequest.commandLine.hasOption( CLIManager.LOG_FILE ) )
-        {
-            File logFile = new File( cliRequest.commandLine.getOptionValue( CLIManager.LOG_FILE ) );
-            logFile = resolveFile( logFile, cliRequest.workingDirectory );
-
-            try
-            {
-                cliRequest.fileStream = new PrintStream( logFile );
-
-                System.setOut( cliRequest.fileStream );
-                System.setErr( cliRequest.fileStream );
-            }
-            catch ( FileNotFoundException e )
-            {
-                System.err.println( e );
-            }
-        }
-    }
-
-    //
-    // Every bit of information taken from the CLI should be processed here.
-    //
-        // TODO: these should be moved out of here. Wrong place.
-        //
-            CLIReportingUtils.showVersion( System.out );
+            System.out.println(CLIReportingUtils.showVersion());
+    }    
+
+    //
+    // All logging is handled by SFL4J
+    //
+    private void logging( CliRequest cliRequest )
+    {
+        cliRequest.debug = cliRequest.commandLine.hasOption( CLIManager.DEBUG );
+        cliRequest.quiet = !cliRequest.debug && cliRequest.commandLine.hasOption( CLIManager.QUIET );
+        cliRequest.showErrors = cliRequest.debug || cliRequest.commandLine.hasOption( CLIManager.ERRORS );
+
+        if ( cliRequest.debug )
+        {
+            cliRequest.request.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_DEBUG );
+            System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", "debug" );            
+        }
+        else if ( cliRequest.quiet )
+        {
+            cliRequest.request.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_ERROR );
+            System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", "error" );            
+        }
+        else
+        {
+            cliRequest.request.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_INFO );
+            System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", "info" );
+        }
+
+        if ( cliRequest.commandLine.hasOption( CLIManager.LOG_FILE ) )
+        {
+            File logFile = new File( cliRequest.commandLine.getOptionValue( CLIManager.LOG_FILE ) );
+            logFile = resolveFile( logFile, cliRequest.workingDirectory );
+            System.setProperty("org.slf4j.simpleLogger.logFile", logFile.getAbsolutePath());
+        }
+
+        plexusLoggerManager = new Slf4jLoggerManager();       
+        slf4jLoggerFactory = LoggerFactory.getILoggerFactory();
+        slf4jLogger = slf4jLoggerFactory.getLogger(this.getClass().getName());
-            CLIReportingUtils.showVersion( System.out );
+            System.out.print(CLIReportingUtils.showVersion());
-            logger.info( "Error stacktraces are turned on." );
+            slf4jLogger.info( "Error stacktraces are turned on." );
-            logger.info( "Disabling strict checksum verification on all artifact downloads." );
+            slf4jLogger.info( "Disabling strict checksum verification on all artifact downloads." );
-            logger.info( "Enabling strict checksum verification on all artifact downloads." );
+            slf4jLogger.info( "Enabling strict checksum verification on all artifact downloads." );
-            logger = setupLogger( cliRequest );
-
-            final MavenLoggerManager loggerManager = new MavenLoggerManager( logger ) ;
-
-                    bind( ILoggerFactory.class ).toInstance( new PlexusLoggerFactory( loggerManager ) );
+                    bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );
-            container.setLoggerManager( loggerManager );
+            container.setLoggerManager( plexusLoggerManager );
-        logger = container.getLoggerManager().getLoggerForComponent( MavenCli.class.getName(), null );
+        slf4jLogger = slf4jLoggerFactory.getLogger(this.getClass().getName());
-    private PrintStreamLogger setupLogger( CliRequest cliRequest )
-    {
-        PrintStreamLogger logger = new PrintStreamLogger( new PrintStreamLogger.Provider()
-        {
-            public PrintStream getStream()
-            {
-                return System.out;
-            }
-        } );
-
-        logger.setThreshold( cliRequest.request.getLoggingLevel() );
-
-        return logger;
-    }
-
-                logger.debug( "Populating class realm " + extRealm.getId() );
+                slf4jLogger.debug( "Populating class realm " + extRealm.getId() );
-                    logger.debug( "  Included " + file );
+                    slf4jLogger.debug( "  Included " + file );
-    protected void customizeContainer( PlexusContainer container )
-    {
-    }
-
-            logger.error( "" );
+            slf4jLogger.error( "" );
-                logger.error( "To see the full stack trace of the errors, re-run Maven with the -e switch." );
+                slf4jLogger.error( "To see the full stack trace of the errors, re-run Maven with the -e switch." );
-            if ( !logger.isDebugEnabled() )
+            if ( !slf4jLogger.isDebugEnabled() )
-                logger.error( "Re-run Maven using the -X switch to enable full debug logging." );
+                slf4jLogger.error( "Re-run Maven using the -X switch to enable full debug logging." );
-                logger.error( "" );
-                logger.error( "For more information about the errors and possible solutions"
+                slf4jLogger.error( "" );
+                slf4jLogger.error( "For more information about the errors and possible solutions"
-                    logger.error( entry.getValue() + " " + entry.getKey() );
+                    slf4jLogger.error( entry.getValue() + " " + entry.getKey() );
-                logger.error( "" );
-                logger.error( "After correcting the problems, you can resume the build with the command" );
-                logger.error( "  mvn <goals> -rf :" + project.getArtifactId() );
+                slf4jLogger.error( "" );
+                slf4jLogger.error( "After correcting the problems, you can resume the build with the command" );
+                slf4jLogger.error( "  mvn <goals> -rf :" + project.getArtifactId() );
-                logger.info( "Build failures were ignored." );
+                slf4jLogger.info( "Build failures were ignored." );
-                logger.error( line, summary.getException() );
+                slf4jLogger.error( line, summary.getException() );
-                logger.error( line );
+                slf4jLogger.error( line );
-    protected ModelProcessor createModelProcessor( PlexusContainer container )
-        throws ComponentLookupException
-    {
-        return container.lookup( ModelProcessor.class );
-    }
-
-        logger.debug( "Reading global settings from "
+        slf4jLogger.debug( "Reading global settings from "
-        logger.debug( "Reading user settings from "
+        slf4jLogger.debug( "Reading user settings from "
-        if ( !settingsResult.getProblems().isEmpty() && logger.isWarnEnabled() )
+        if ( !settingsResult.getProblems().isEmpty() && slf4jLogger.isWarnEnabled() )
-            logger.warn( "" );
-            logger.warn( "Some problems were encountered while building the effective settings" );
+            slf4jLogger.warn( "" );
+            slf4jLogger.warn( "Some problems were encountered while building the effective settings" );
-                logger.warn( problem.getMessage() + " @ " + problem.getLocation() );
+                slf4jLogger.warn( problem.getMessage() + " @ " + problem.getLocation() );
-            logger.warn( "" );
+            slf4jLogger.warn( "" );
-                logger.warn( "Command line option -" + deprecatedOption
+                slf4jLogger.warn( "Command line option -" + deprecatedOption
-            transferListener = new ConsoleMavenTransferListener( System.out );
+            transferListener = new ConsoleMavenTransferListener( slf4jLogger );
-            transferListener = new BatchModeMavenTransferListener( System.out );
+            transferListener = new BatchModeMavenTransferListener( slf4jLogger );
-        ExecutionListener executionListener = new ExecutionEventLogger( logger );
+        ExecutionListener executionListener = new ExecutionEventLogger( slf4jLogger );
-        PrintStream fileStream;
+    private PrintStreamLogger setupLogger( int loggingLevel )
+    {
+        PrintStreamLogger logger = new PrintStreamLogger( new PrintStreamLogger.Provider()
+        {
+            public PrintStream getStream()
+            {
+                return System.out;
+            }
+        } );
+
+        logger.setThreshold( loggingLevel );
+
+        return logger;
+    }        
+    
+    //
+    // Customizations available via the CLI
+    //
+    
+    protected void customizeContainer( PlexusContainer container )
+    {
+    }
+
+    protected ModelProcessor createModelProcessor( PlexusContainer container )
+        throws ComponentLookupException
+    {
+        return container.lookup( ModelProcessor.class );
+    }        
