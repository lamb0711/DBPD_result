Adding the beginnings of a workspace to Maven, which is just a shared cache component for project, model, and POM file instances (for now). This allows fine-grained control over when such caches are cleared in environments where embedder instances may be reused multiple times, and will eventually enable new profile activators that require access to project information in the current build along with other advanced caching and cache-querying features.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@632482 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.monitor.event.EventMonitor;
+import org.apache.maven.monitor.event.MavenWorkspaceMonitor;
+import org.apache.maven.monitor.event.PerCallWorkspaceMonitor;
+import org.apache.maven.workspace.MavenWorkspaceStore;
+    private MavenWorkspaceStore workspaceManager;
+
+        eventMonitors( request, configuration );
+
+        workspaceMonitor( request, configuration );
+
+    private void workspaceMonitor( MavenExecutionRequest request,
+                                   Configuration configuration )
+    {
+        MavenWorkspaceMonitor workspaceMonitor = request.getWorkspaceMonitor();
+
+        if ( workspaceMonitor == null )
+        {
+            workspaceMonitor = configuration.getWorkspaceMonitor();
+        }
+
+        List requestEventMonitors = request.getEventMonitors();
+        if ( ( requestEventMonitors != null ) && !requestEventMonitors.isEmpty() )
+        {
+            for ( Iterator it = requestEventMonitors.iterator(); it.hasNext(); )
+            {
+                Object monitor = it.next();
+                if ( monitor instanceof MavenWorkspaceMonitor )
+                {
+                    if ( workspaceMonitor == null )
+                    {
+                        workspaceMonitor = (MavenWorkspaceMonitor) monitor;
+                    }
+                    it.remove();
+                    break;
+                }
+            }
+        }
+
+        if ( workspaceMonitor == null )
+        {
+            workspaceMonitor = new PerCallWorkspaceMonitor();
+        }
+
+        workspaceMonitor.setWorkspaceStore( workspaceManager );
+
+        request.addEventMonitor( workspaceMonitor );
+    }
+
+    private void eventMonitors( MavenExecutionRequest request,
+                                Configuration configuration )
+    {
+        List configEventMonitors = configuration.getEventMonitors();
+
+        if ( ( configEventMonitors != null ) && !configEventMonitors.isEmpty() )
+        {
+            for ( Iterator it = configEventMonitors.iterator(); it.hasNext(); )
+            {
+                EventMonitor monitor = (EventMonitor) it.next();
+                request.addEventMonitor( monitor );
+            }
+        }
+    }
+
