refactor source roots to be lists


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163470 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.StringUtils;
-    //!!! Refactor, collect the list of compile source roots and create a
-    // path1:path2
-    // type construct from the list instead of the other way around. jvz.
+    private List compileSourceRoots = new ArrayList();
-    private String compileSourceRoots = "";
-
-    private String testCompileSourceRoots = "";
+    private List testCompileSourceRoots = new ArrayList();
-        if ( path != null || path.trim().length() != 0 )
+        if ( path != null )
-            if ( compileSourceRoots.length() > 0 )
+            path = path.trim();
+            if ( path.length() != 0 )
-                compileSourceRoots += File.pathSeparator;
+                if ( !compileSourceRoots.contains( path ) )
+                {
+                    compileSourceRoots.add( path );
+                }
-            compileSourceRoots += path;
-    public String getCompileSourceRoots()
-    {
-        // Get rid of any trailing path separators.
-        if ( compileSourceRoots.endsWith( File.pathSeparator ) )
-        {
-            compileSourceRoots = compileSourceRoots.substring( 0, compileSourceRoots.length() - 1 );
-        }
-
-        // Always add the build.sourceDirectory
-        return getBuild().getSourceDirectory() + File.pathSeparator + compileSourceRoots;
-    }
-
-    public List getCompileSourceRootsList()
-    {
-        String[] s = StringUtils.split( getCompileSourceRoots(), File.pathSeparator );
-
-        List list = new ArrayList();
-
-        for ( int i = 0; i < s.length; i++ )
-        {
-            list.add( s[i] );
-        }
-
-        return list;
-    }
-
-        if ( path != null || path.trim().length() != 0 )
+        if ( path != null )
-            if ( testCompileSourceRoots.length() > 0 )
+            path = path.trim();
+            if ( path.length() != 0 )
-                testCompileSourceRoots += File.pathSeparator;
+                if ( !testCompileSourceRoots.contains( path ) )
+                {
+                    testCompileSourceRoots.add( path );
+                }
-            testCompileSourceRoots += path;
-    public String getTestCompileSourceRoots()
+    public List getCompileSourceRoots()
-        // Get rid of any trailing path separators.
-        if ( testCompileSourceRoots.endsWith( File.pathSeparator ) )
-        {
-            testCompileSourceRoots = testCompileSourceRoots.substring( 0, testCompileSourceRoots.length() - 1 );
-        }
-
-        // Always add the build.unitTestSourceDirectory
-        return getBuild().getUnitTestSourceDirectory() + File.pathSeparator + testCompileSourceRoots;
+        return compileSourceRoots;
-    public List getTestCompileSourceRootsList()
+    public List getTestCompileSourceRoots()
-        String[] s = StringUtils.split( getTestCompileSourceRoots(), File.pathSeparator );
-
-        List list = new ArrayList();
-
-        for ( int i = 0; i < s.length; i++ )
-        {
-            list.add( s[i] );
-        }
-
-        return list;
+        return testCompileSourceRoots;
-            if ( a.getScope() == null || "compile".equals( a.getScope() ) )
+            if ( a.getScope() == null || Artifact.SCOPE_COMPILE.equals( a.getScope() ) )
-                if ( a.getScope() == null || "test".equals( a.getScope() ) || "compile".equals( a.getScope() )
-                    || "runtime".equals( a.getScope() ) )
+                if ( a.getScope() == null || Artifact.SCOPE_TEST.equals( a.getScope() ) || Artifact.SCOPE_COMPILE.equals( a.getScope() )
+                    || Artifact.SCOPE_RUNTIME.equals( a.getScope() ) )
