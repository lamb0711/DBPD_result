o Moved plugin prefix resolution into a dedicated component
o Completed compat impl of legacy plugin manager

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@806153 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.Reader;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.metadata.Metadata;
-import org.apache.maven.artifact.repository.metadata.RepositoryMetadataReadException;
-import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
+import org.apache.maven.plugin.prefix.DefaultPluginPrefixRequest;
+import org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException;
+import org.apache.maven.plugin.prefix.PluginPrefixRequest;
+import org.apache.maven.plugin.prefix.PluginPrefixResolver;
+import org.apache.maven.plugin.prefix.PluginPrefixResult;
-import org.apache.maven.wagon.ResourceDoesNotExistException;
-import org.apache.maven.wagon.TransferFailedException;
-import org.codehaus.plexus.util.IOUtil;
-import org.codehaus.plexus.util.ReaderFactory;
+
+    @Requirement
+    private PluginPrefixResolver pluginPrefixResolver;
-                   
-    private Map<String,Plugin> pluginPrefixes = new HashMap<String,Plugin>();
-    
+
-        Plugin plugin = pluginPrefixes.get( prefix );
+        PluginPrefixRequest prefixRequest = new DefaultPluginPrefixRequest( session ).setPrefix( prefix );
+        PluginPrefixResult prefixResult = pluginPrefixResolver.resolve( prefixRequest );
-        if ( plugin != null )
-        {
-            return plugin;
-        }
+        Plugin plugin = new Plugin();
+        plugin.setGroupId( prefixResult.getGroupId() );
+        plugin.setArtifactId( prefixResult.getArtifactId() );
-        MavenProject project = session.getCurrentProject();
-
-        if ( project != null )
-        {
-            RepositoryRequest repositoryRequest = getRepositoryRequest( session, project );
-
-            for ( Plugin buildPlugin : project.getBuildPlugins() )
-            {
-                try
-                {
-                    PluginDescriptor pluginDescriptor = pluginManager.loadPlugin( buildPlugin, repositoryRequest );
-
-                    if ( prefix.equals( pluginDescriptor.getGoalPrefix() ) )
-                    {
-                        Plugin p = new Plugin();
-                        p.setGroupId( buildPlugin.getGroupId() );
-                        p.setArtifactId( buildPlugin.getArtifactId() );
-                        pluginPrefixes.put( prefix, p );
-                        return p;
-                    }
-                }
-                catch ( Exception e )
-                {
-                    logger.debug( "Failed to retrieve plugin descriptor for " + buildPlugin, e );
-                }
-            }
-        }
-
-        // Process all plugin groups in the local repository first to see if we get a hit. A developer may have been 
-        // developing a plugin locally and installing.
-        //
-        for ( String pluginGroup : session.getPluginGroups() )
-        {            
-            String localPath = pluginGroup.replace( '.', '/' ) + "/" + "maven-metadata-" + session.getLocalRepository().getId() + ".xml";
-
-            File destination = new File( session.getLocalRepository().getBasedir(), localPath );
-
-            if ( destination.exists() )
-            {                
-                processPluginGroupMetadata( pluginGroup, destination, pluginPrefixes );    
-                
-                plugin = pluginPrefixes.get( prefix );
-                
-                if ( plugin != null )
-                {
-                    return plugin;
-                }
-            }
-        }
-        
-        // Process all the remote repositories.
-        //
-        for ( String pluginGroup : session.getPluginGroups() )
-        {                
-            for ( ArtifactRepository repository : session.getCurrentProject().getPluginArtifactRepositories() )
-            {
-                try
-                {
-                    String localPath = pluginGroup.replace( '.', '/' ) + "/" + "maven-metadata-" + repository.getId() + ".xml";
-                    
-                    File destination = new File( session.getLocalRepository().getBasedir(), localPath );
-                    
-                    String remotePath = pluginGroup.replace( '.', '/' ) + "/" + "maven-metadata.xml";
-
-                    repositorySystem.retrieve( repository, destination, remotePath, session.getRequest().getTransferListener() );
-                    
-                    processPluginGroupMetadata( pluginGroup, destination, pluginPrefixes );
-                    
-                    plugin = pluginPrefixes.get( prefix );
-                    
-                    if ( plugin != null )
-                    {
-                        return plugin;
-                    }
-                }
-                catch ( TransferFailedException e )
-                {
-                    continue;
-                }
-                catch ( ResourceDoesNotExistException e )
-                {
-                    continue;
-                }
-            }
-
-        }
-                            
-        throw new NoPluginFoundForPrefixException( prefix, session.getLocalRepository(), session.getCurrentProject().getPluginArtifactRepositories() );
+        return plugin;
-    
-    // Keep track of the repository that provided the prefix mapping
-    //
-    private class PluginPrefix
-    {
-        private Plugin plugin;
-        
-        private ArtifactRepository repository;
-        public PluginPrefix( Plugin plugin, ArtifactRepository repository )
-        {
-            this.plugin = plugin;
-            this.repository = repository;
-        }
-    }
-    
-    
-    private void processPluginGroupMetadata( String pluginGroup, File pluginGroupMetadataFile, Map<String,Plugin> pluginPrefixes )
-    {
-        try
-        {
-            Metadata pluginGroupMetadata = readMetadata( pluginGroupMetadataFile );
-
-            List<org.apache.maven.artifact.repository.metadata.Plugin> plugins = pluginGroupMetadata.getPlugins();
-
-            if ( plugins != null )
-            {
-                for ( org.apache.maven.artifact.repository.metadata.Plugin metadataPlugin : plugins )
-                {
-                    Plugin p = new Plugin();
-                    p.setGroupId( pluginGroup );
-                    p.setArtifactId( metadataPlugin.getArtifactId() );
-                    pluginPrefixes.put( metadataPlugin.getPrefix(), p );
-                }
-            }
-        }
-        catch ( RepositoryMetadataReadException e )
-        {
-            logger.warn( "Error reading plugin group metadata: ", e );
-        }
-    }
-    
-    protected Metadata readMetadata( File mappingFile )
-        throws RepositoryMetadataReadException
-    {
-        Metadata result;
-
-        Reader reader = null;
-        try
-        {
-            reader = ReaderFactory.newXmlReader( mappingFile );
-
-            MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();
-
-            result = mappingReader.read( reader, false );
-        }
-        catch ( FileNotFoundException e )
-        {
-            throw new RepositoryMetadataReadException( "Cannot read metadata from '" + mappingFile + "'", e );
-        }
-        catch ( IOException e )
-        {
-            throw new RepositoryMetadataReadException( "Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e );
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new RepositoryMetadataReadException( "Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e );
-        }
-        finally
-        {
-            IOUtil.close( reader );
-        }
-        return result;
-    }
-    
