PR: MNG-1233
corrected handling of scope based exclusions

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@326363 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.versioning.VersionRange;
+    private List trail;
+
-                if ( filter == null || filter.include( a ) )
+                if ( parents.contains( a.getDependencyConflictId() ) )
-                    if ( parents.contains( a.getDependencyConflictId() ) )
-                    {
-                        a.setDependencyTrail( getDependencyTrail() );
+                    a.setDependencyTrail( getDependencyTrail() );
-                        throw new CyclicDependencyException( "A dependency has introduced a cycle", a );
-                    }
-
-                    children.add( new ResolutionNode( a, remoteRepositories, this ) );
+                    throw new CyclicDependencyException( "A dependency has introduced a cycle", a );
+
+                children.add( new ResolutionNode( a, remoteRepositories, this ) );
+        trail = null;
-        List path = new LinkedList();
-        ResolutionNode node = this;
-        while ( node != null )
-        {
-            Artifact artifact = node.getArtifact();
-            if ( artifact.getVersion() == null )
-            {
-                // set the recommended version
-                VersionRange versionRange = artifact.getVersionRange();
-                String version = artifact.getSelectedVersion().toString();
-                artifact.selectVersion( version );
-            }
+        List trial = getTrail();
-            path.add( 0, artifact.getId() );
-            node = node.parent;
+        List ret = new ArrayList( trial.size() );
+        for ( Iterator i = trial.iterator(); i.hasNext(); )
+        {
+            Artifact artifact = (Artifact) i.next();
+            ret.add( artifact.getId() );
-        return path;
+        return ret;
+    }
+
+    private List getTrail()
+        throws OverConstrainedVersionException
+    {
+        if ( trail == null )
+        {
+            List ids = new LinkedList();
+            ResolutionNode node = this;
+            while ( node != null )
+            {
+                Artifact artifact = node.getArtifact();
+                if ( artifact.getVersion() == null )
+                {
+                    // set the recommended version
+                    String version = artifact.getSelectedVersion().toString();
+                    artifact.selectVersion( version );
+                }
+
+                ids.add( 0, artifact );
+                node = node.parent;
+            }
+            trail = ids;
+        }
+        return trail;
+
+    public boolean filterTrail( ArtifactFilter filter )
+        throws OverConstrainedVersionException
+    {
+        boolean success = true;
+        if ( filter != null )
+        {
+            for ( Iterator i = getTrail().iterator(); i.hasNext() && success; )
+            {
+                Artifact artifact = (Artifact) i.next();
+                if ( !filter.include( artifact ) )
+                {
+                    success = false;
+                }
+            }
+        }
+        return success;
+    }
