Switching back to selectively import extensions into a project-specific ClassRealm, except this time extension realms will be shared (the origin of the aforementioned imports) to conserve memory tied up by classloading. Similarly, plugin realms are managed using a key produced from g:a:v of the plugin, plus the hashcode of all g:a:v of the plugin-level dependencies aggregated into one string, to distinguish the deploy plugin 2.0 with no deps from the deploy plugin 2.0 with a plugin-level dep on wagon-webdav. Plugin realms have their parent realms managed by the pluginManager now prior to lookup or execution of the mojo instance, and PluginDescriptor.(classRealm|artifacts) attributes are set for each execution. Likewise, the MavenPluginCollector now tracks plugin descriptors with their version information included, instead of just using g:a.

Had to bump the plexus-container-default version up to alpha-36 to fix a problem in ClassicSingletonComponentManager. All realms for extensions, plugins, and projects (which contain only imports from extensions) are now managed by the MavenRealmManager.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@591391 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.ArtifactUtils;
+import org.apache.maven.execution.MavenRealmManager;
+import org.apache.maven.execution.RealmManagementException;
-import org.codehaus.plexus.PlexusContainer;
-import org.codehaus.plexus.PlexusContainerException;
-import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;
-    public PluginDescriptor getPluginDescriptorForPrefix( String prefix )
-    {
-        return pluginCollector.getPluginDescriptorForPrefix( prefix );
-    }
-
-
-                PluginDescriptor pd = pluginCollector.getPluginDescriptor( plugin );
-                pd.setClassRealm( container.getContainerRealm() );
+        setDescriptorClassAndArtifactInfo( pluginDescriptor, project, session );
+
-    private String createPluginRealmId( String groupId, String artifactId )
-    {
-        return "/plugins/" + ArtifactUtils.versionlessKey( groupId, artifactId );
-    }
-
-        Plugin projectPlugin = (Plugin) project.getBuild().getPluginsAsMap().get( plugin.getKey() );
+        Plugin projectPlugin = project.getPlugin( plugin.getKey() );
+        else if ( projectPlugin.getVersion() == null )
+        {
+            projectPlugin.setVersion( plugin.getVersion() );
+        }
-        String key = projectPlugin.getKey();
-
-        ClassRealm pluginRealm = null;
-
-//        MavenProjectSession projectSession;
-//
-//        try
-//        {
-//            projectSession = session.getProjectSession( project );
-//        }
-//        catch ( PlexusContainerException e )
-//        {
-//            throw new PluginManagerException( plugin, "Failed to create project-specific session for project: " + project.getId()
-//                                                + ".", project, e );
-//        }
-//
-
-        String pluginRealmId = createPluginRealmId( projectPlugin.getGroupId(), projectPlugin.getArtifactId() );
-
-        try
+        MavenRealmManager realmManager = session.getRealmManager();
+        ClassRealm pluginRealm = realmManager.getPluginRealm( projectPlugin );;
+        if ( pluginRealm == null )
-//            pluginRealm = projectSession.getPluginRealm( projectPlugin );
-            pluginRealm = container.getClassWorld().getRealm( pluginRealmId );
-        }
-        catch ( NoSuchRealmException e )
-        {
-            getLogger().debug( "Plugin realm is missing for: " + projectPlugin.getKey() + ". New realm will be created." );
-        }
-
-        if ( ( pluginRealm != null ) && ( pluginRealm != container.getContainerRealm() ) )
-        {
-            getLogger().debug(
-                               "Realm already exists for: " + key
-                                               + " (realm id: " + pluginRealm.getId() + "). Skipping addition..." );
-            // we've already discovered this plugin, and configured it, so skip it this time.
-
-            return;
-        }
-
-        // ----------------------------------------------------------------------------
-        // Realm creation for a plugin
-        // ----------------------------------------------------------------------------
-
-        getLogger().debug( "Creating a ClassRealm instance for plugin: " + projectPlugin.getKey() + " for project: " + project.getId() );
-
-        try
-        {
-//            pluginRealm = projectSession.createPluginRealm( projectPlugin );
-
-            List jars = new ArrayList();
-
-            jars.add( pluginArtifact.getFile() );
-//            try
-//            {
-//                pluginRealm.addURL( pluginArtifact.getFile().toURI().toURL() );
-//            }
-//            catch ( MalformedURLException e )
-//            {
-//                throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + pluginArtifact.getId() + " as URL.", e );
-//            }
-
-            for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+            try
-                Artifact artifact = (Artifact) i.next();
+                pluginRealm = realmManager.createPluginRealm( projectPlugin, pluginArtifact, artifacts );
-//                getLogger().debug( "Adding: " + artifact.getId() + " to plugin class-realm: " + key + " in project-session: " + project.getId() );
-
-                getLogger().debug( "Adding: " + artifact.getId() + " to plugin class-realm: " + key );
-                jars.add( artifact.getFile() );
-//                try
-//                {
-//                    pluginRealm.addURL( artifact.getFile().toURI().toURL() );
-//                }
-//                catch ( MalformedURLException e )
-//                {
-//                    throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + artifact.getId() + " as URL.", e );
-//                }
+                getLogger().debug( "Created realm: " + pluginRealm + " for plugin: " + projectPlugin.getKey() );
-
-            pluginRealm = container.createComponentRealm( pluginRealmId, jars );
+            catch ( RealmManagementException e )
+            {
+                throw new PluginContainerException( plugin,
+                                                    "Failed to create realm for plugin '"
+                                                                    + projectPlugin, e );
+            }
-                throw new PluginContainerException( plugin, pluginRealm, "Error re-scanning project realm for components.", e );
+                throw new PluginContainerException( plugin, pluginRealm, "Error scanning plugin realm for components.", e );
-                throw new PluginContainerException( plugin, pluginRealm, "Error re-scanning project realm for components.", e );
+                throw new PluginContainerException( plugin, pluginRealm, "Error scanning plugin realm for components.", e );
+
+            // ----------------------------------------------------------------------------
+            // The PluginCollector will now know about the plugin we are trying to load
+            // ----------------------------------------------------------------------------
+
+            getLogger().debug(
+                               "Checking for plugin descriptor for: " + projectPlugin.getKey()
+                                               + " with version: " + projectPlugin.getVersion() + " in collector: " + pluginCollector );
+
+            PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( projectPlugin );
+
+            if ( pluginDescriptor == null )
+            {
+                throw new IllegalStateException( "The PluginDescriptor for the plugin "
+                                                 + projectPlugin.getKey() + " was not found" );
+            }
+
+            pluginDescriptor.setPluginArtifact( pluginArtifact );
+
+            getLogger().debug( "Realm for plugin: " + plugin.getKey() + ":\n" + pluginRealm );
-//        catch ( DuplicateRealmException e )
-//        {
-//            throw new PluginContainerException( plugin, pluginRealm, "Failed to create project-specific realm for plugin '" + projectPlugin
-//                                                + " in project: " + project.getId(), e );
-//        }
-        catch ( PlexusContainerException e )
-        {
-          throw new PluginContainerException( plugin, pluginRealm,
-                                                "Failed to create realm for plugin '"
-                                                                + projectPlugin, e );
-        }
-
-        try
-        {
-            String parentRealmId = container.getContainerRealm().getId();
-
-            // adding for MNG-3012 to try to work around problems with Xpp3Dom (from plexus-utils)
-            // spawning a ClassCastException when a mojo calls plugin.getConfiguration() from maven-model...
-            pluginRealm.importFrom( parentRealmId, Xpp3Dom.class.getName() );
-            pluginRealm.importFrom( parentRealmId, "org.codehaus.plexus.util.xml.pull" );
-
-            // Adding for MNG-2878, since maven-reporting-impl was removed from the
-            // internal list of artifacts managed by maven, the classloader is different
-            // between maven-reporting-impl and maven-reporting-api...so this resource
-            // is not available from the AbstractMavenReport since it uses:
-            // getClass().getResourceAsStream( "/default-report.xml" )
-            // (maven-reporting-impl version 2.0; line 134; affects: checkstyle plugin, and probably others)
-            pluginRealm.importFrom( parentRealmId, "/default-report.xml" );
-        }
-        catch ( NoSuchRealmException e )
-        {
-            throw new PluginContainerException( plugin, pluginRealm,
-                                              "Failed to import Xpp3Dom from core realm for plugin: '"
-                                                              + projectPlugin + ".", e );
-        }
-
-        // ----------------------------------------------------------------------------
-        // The PluginCollector will now know about the plugin we are trying to load
-        // ----------------------------------------------------------------------------
-
-        getLogger().debug(
-                           "Checking for plugin descriptor for: " + plugin.getKey()
-                                           + " in collector: " + pluginCollector );
-
-        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( projectPlugin );
-
-        if ( pluginDescriptor == null )
-        {
-            throw new IllegalStateException( "The PluginDescriptor for the plugin "
-                                             + projectPlugin.getKey() + " was not found" );
-        }
-
-        pluginDescriptor.setPluginArtifact( pluginArtifact );
-
-        // we're only setting the plugin's artifact itself as the artifact list, to allow it to be retrieved
-        // later when the plugin is first invoked. Retrieving this artifact will in turn allow us to
-        // transitively resolve its dependencies, and add them to the plugin container...
-        //pluginDescriptor.setArtifacts( Collections.singletonList( pluginArtifact ) );
-
-        //pluginDescriptor.setIntroducedDependencyArtifacts( artifacts );
-
-        pluginDescriptor.setArtifacts( new ArrayList( artifacts ) );
-
-        getLogger().debug( "Realm for plugin: " + plugin.getKey() + ":\n" + pluginRealm );
-
-        pluginDescriptor.setClassRealm( pluginRealm );
-        Mojo plugin;
+        Mojo mojo;
-        plugin = getConfiguredMojo( session, dom, project, false, mojoExecution );
-
-
-
-        dispatcher.dispatchStart( event, goalExecId );
-
+        // by this time, the pluginDescriptor has had the correct realm setup from getConfiguredMojo(..)
+        ClassRealm pluginRealm = null;
+        ClassRealm oldLookupRealm = container.getLookupRealm();
-//        MavenProjectSession projectSession;
-//        try
-//        {
-//            projectSession = session.getProjectSession( project );
-//        }
-//        catch ( PlexusContainerException e )
-//        {
-//            throw new PluginManagerException( mojoDescriptor, "Failed to create project-specific session for project: " + project.getId()
-//                                                + ".", project, e );
-//        }
-
-        String pluginRealmId = createPluginRealmId( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
-        ClassRealm pluginRealm;
-//            pluginRealm = projectSession.getPluginRealm( pluginDescriptor );
-            pluginRealm = container.getClassWorld().getRealm( pluginRealmId );
-        }
-        catch ( NoSuchRealmException e )
-        {
-//            getLogger().debug( "Plugin realm: " + pluginDescriptor.getId() + " not found in project session for: " + project.getId() + ". Using project realm instead." );
-//            pluginRealm = projectSession.getProjectRealm();
+            mojo = getConfiguredMojo( session, dom, project, false, mojoExecution );
-            getLogger().debug( "Plugin realm: " + pluginRealmId + " not found. Using container realm instead." );
-            pluginRealm = container.getContainerRealm();
-        }
+            dispatcher.dispatchStart( event, goalExecId );
-        ClassRealm oldRealm = null;
+            pluginRealm = pluginDescriptor.getClassRealm();
-        try
-        {
-            getLogger().debug( "Setting lookup realm and context classloader for plugin to: " + pluginRealm.getId() + " (instance is: " + pluginRealm + ")" );
+            getLogger().debug( "Setting context classloader for plugin to: " + pluginRealm.getId() + " (instance is: " + pluginRealm + ")" );
-            oldRealm = container.setLookupRealm( pluginRealm );
-
-            plugin.execute();
+            mojo.execute();
-            if ( plugin instanceof MavenReport )
+            if ( mojo instanceof MavenReport )
-                ctx.addReport( mojoDescriptor, (MavenReport) plugin );
+                ctx.addReport( mojoDescriptor, (MavenReport) mojo );
-            if ( oldRealm != null )
+            pluginDescriptor.setArtifacts( null );
+
+            if ( ( pluginRealm != null ) && ( pluginRealm != container.getContainerRealm() ) )
-                container.setLookupRealm( oldRealm );
+                pluginRealm.setParentRealm( null );
+            }
+
+            if ( oldLookupRealm != null )
+            {
+                container.setLookupRealm( oldLookupRealm );
+    private Plugin createDummyPlugin( PluginDescriptor pluginDescriptor )
+    {
+        Plugin plugin = new Plugin();
+        plugin.setGroupId( pluginDescriptor.getGroupId() );
+        plugin.setArtifactId( pluginDescriptor.getArtifactId() );
+        plugin.setVersion( pluginDescriptor.getVersion() );
+
+        return plugin;
+    }
+
-        // if this is the first time this plugin has been used, the plugin's container will only
-        // contain the plugin's artifact in isolation; we need to finish resolving the plugin's
-        // dependencies, and add them to the container.
-        //getPluginArtifacts( pluginDescriptor, container, project, session );
+        setDescriptorClassAndArtifactInfo( pluginDescriptor, project, session );
-        Mojo plugin;
-
-//        ClassRealm pluginRealm = null;
-//
-//        MavenProjectSession projectSession;
-//        try
-//        {
-//            projectSession = session.getProjectSession( project );
-//        }
-//        catch ( PlexusContainerException e )
-//        {
-//            throw new PluginManagerException( mojoDescriptor, "Failed to create project-specific session for project: " + project.getId()
-//                                                + ".", project, e );
-//        }
-//
-//        try
-//        {
-//            pluginRealm = projectSession.getPluginRealm( pluginDescriptor );
-//        }
-//        catch ( NoSuchRealmException e )
-//        {
-//            getLogger().debug( "Plugin realm: " + pluginDescriptor.getId() + " not found in project session for: " + project.getId() + ". Using project realm instead." );
-//            pluginRealm = projectSession.getProjectRealm();
-//        }
-
-        String pluginRealmId = createPluginRealmId( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
-        ClassRealm pluginRealm;
-        try
-        {
-            pluginRealm = container.getClassWorld().getRealm( pluginRealmId );
-        }
-        catch ( NoSuchRealmException e )
-        {
-            getLogger().debug( "Plugin realm: " + pluginRealmId + " not found. Using container realm instead." );
-            pluginRealm = container.getContainerRealm();
-        }
+        ClassRealm pluginRealm = pluginDescriptor.getClassRealm();
-        ClassRealm oldRealm = container.setLookupRealm( pluginRealm );
-        pluginDescriptor.setClassRealm( pluginRealm );
+        container.setLookupRealm( pluginRealm );
+        Mojo mojo;
-            plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint(), pluginRealm );
+            mojo = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint(), pluginRealm );
-        finally
-        {
-            container.setLookupRealm( oldRealm );
-        }
-        if ( plugin != null )
+        if ( mojo != null )
-                               "Looked up - " + plugin + " - "
-                                               + plugin.getClass().getClassLoader() );
+                               "Looked up - " + mojo + " - "
+                                               + mojo.getClass().getClassLoader() );
-        if ( report && !( plugin instanceof MavenReport ) )
+        if ( report && !( mojo instanceof MavenReport ) )
-        if ( plugin instanceof ContextEnabled )
+        if ( mojo instanceof ContextEnabled )
-            ( (ContextEnabled) plugin ).setPluginContext( pluginContext );
+            ( (ContextEnabled) mojo ).setPluginContext( pluginContext );
-        plugin.setLog( mojoLogger );
+        mojo.setLog( mojoLogger );
-        populatePluginFields( plugin, mojoDescriptor, extractedMojoConfiguration, container,
-                              expressionEvaluator );
+        populatePluginFields( mojo, mojoDescriptor, extractedMojoConfiguration, expressionEvaluator );
-        return plugin;
+        return mojo;
+    }
+
+    private void setDescriptorClassAndArtifactInfo( PluginDescriptor pluginDescriptor,
+                                                    MavenProject project,
+                                                    MavenSession session )
+    {
+        MavenRealmManager realmManager = session.getRealmManager();
+
+        ClassRealm projectRealm = realmManager.getProjectRealm( project.getGroupId(), project.getArtifactId(), project.getVersion() );
+        if ( projectRealm == null )
+        {
+            getLogger().debug( "Realm for project: " + project.getId() + " not found. Using container realm instead." );
+
+            projectRealm = container.getContainerRealm();
+        }
+
+        Plugin plugin = project.getPlugin( pluginDescriptor.getPluginLookupKey() );
+        if ( plugin == null )
+        {
+            plugin = createDummyPlugin( pluginDescriptor );
+        }
+
+        ClassRealm pluginRealm = realmManager.getPluginRealm( plugin );
+
+        if ( pluginRealm == null )
+        {
+            getLogger().debug( "Realm for plugin: " + pluginDescriptor.getId() + " not found. Using project realm instead." );
+
+            pluginRealm = projectRealm;
+        }
+        else
+        {
+            pluginRealm.setParentRealm( projectRealm );
+        }
+
+        getLogger().debug( "Setting realm for plugin descriptor: " + pluginDescriptor.getId() + " to: " + pluginRealm );
+        pluginDescriptor.setClassRealm( pluginRealm );
+        pluginDescriptor.setArtifacts( realmManager.getPluginArtifacts( plugin ) );
-                                       PlexusContainer pluginContainer,
-        ClassRealm pluginRealm = mojoDescriptor.getPluginDescriptor().getClassRealm();
+        // TODO: What is the point in using the plugin realm here instead of the core realm?
+        ClassRealm realm = mojoDescriptor.getPluginDescriptor().getClassRealm();
-                configurator = (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, configuratorId, pluginRealm );
+                configurator = (ComponentConfigurator) container.lookup( ComponentConfigurator.ROLE, configuratorId, realm );
-                configurator = (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, "basic", pluginRealm );
+                configurator = (ComponentConfigurator) container.lookup( ComponentConfigurator.ROLE, "basic", realm );
-            getLogger().debug( "Configuring mojo '" + mojoDescriptor.getId() + "' with " + configuratorId + " configurator -->" );
+            getLogger().debug( "Configuring mojo '" + mojoDescriptor.getId() + "' with "
+                               + ( configuratorId == null ? "basic" : configuratorId )
+                               + " configurator -->" );
-            configurator.configureComponent( plugin, configuration, expressionEvaluator, pluginRealm, listener );
+            configurator.configureComponent( plugin, configuration, expressionEvaluator, realm, listener );
-                    pluginContainer.release( configurator );
+                    container.release( configurator );
-    public Object getPluginComponent( Plugin plugin,
-                                      String role,
-                                      String roleHint )
-        throws PluginManagerException, ComponentLookupException
-    {
-        ClassRealm pluginRealm = pluginCollector.getPluginDescriptor( plugin ).getClassRealm();
-
-        if ( pluginRealm == null )
-        {
-            getLogger().warn( "getPluginComponent(" + plugin + ", " + role + "): descriptor is missing classRealm" );
-
-            pluginRealm = container.getLookupRealm();
-        }
-
-        return container.lookup( role, roleHint, pluginRealm );
-    }
-
-    public Map getPluginComponents( Plugin plugin,
-                                    String role )
-        throws ComponentLookupException, PluginManagerException
-    {
-        getLogger().debug( "Looking for plugin realm: " + plugin + " using: " + pluginCollector );
-
-        ClassRealm pluginRealm = pluginCollector.getPluginDescriptor( plugin ).getClassRealm();
-
-        if ( pluginRealm == null )
-        {
-            getLogger().warn( "getPluginComponent(" + plugin + ", " + role + "): descriptor is missing classRealm" );
-
-            pluginRealm = container.getLookupRealm();
-        }
-
-        return container.lookupMap( role, pluginRealm );
-    }
-
