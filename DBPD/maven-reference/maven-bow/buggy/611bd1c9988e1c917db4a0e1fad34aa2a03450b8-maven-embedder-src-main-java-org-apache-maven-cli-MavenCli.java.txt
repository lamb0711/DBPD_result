o Fixed regressions after refactoring

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@830017 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.MavenExecutionRequestPopulator;
-    
+
+    private MavenExecutionRequestPopulator executionRequestPopulator;
+
-    private enum Exit { EXIT_WITH_ERROR, EXIT_WITHOUT_ERROR }
+    private enum Exit { EXIT_WITHOUT_ERROR, EXIT_WITH_ERROR }
+        if ( cliRequest.stdout == null )
+        {
+            cliRequest.stdout = System.out;
+        }
+        if ( cliRequest.stderr == null )
+        {
+            cliRequest.stderr = System.err;
+        }       
+        
+        logger = new PrintStreamLogger( cliRequest.stdout );
+
-        if ( cliRequest.stdout == null )
+        cliRequest.debug = cliRequest.commandLine.hasOption( CLIManager.DEBUG );
+        cliRequest.quiet = !cliRequest.debug && cliRequest.commandLine.hasOption( CLIManager.QUIET );
+        cliRequest.showErrors = cliRequest.debug || cliRequest.commandLine.hasOption( CLIManager.ERRORS );
+
+        if ( cliRequest.debug )
-            cliRequest.stdout = System.out;
+            cliRequest.request.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_DEBUG );
-        if ( cliRequest.stderr == null )
+        else if ( cliRequest.quiet )
-            cliRequest.stderr = System.err;
-        }       
-        
-        logger = new PrintStreamLogger( System.out );
-                
+            // TODO: we need to do some more work here. Some plugins use sys out or log errors at info level.
+            // Ideally, we could use Warn across the board
+            cliRequest.request.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_ERROR );
+            // TODO:Additionally, we can't change the mojo level because the component key includes the version and it isn't known ahead of time. This seems worth changing.
+        }
+        else
+        {
+            cliRequest.request.setLoggingLevel( MavenExecutionRequest.LOGGING_LEVEL_INFO );
+        }
+
+        logger.setThreshold( cliRequest.request.getLoggingLevel() );
+
-    private void cli( CliRequest request )
+    private void cli( CliRequest cliRequest )
-            request.commandLine = cliManager.parse( request.args );
+            cliRequest.commandLine = cliManager.parse( cliRequest.args );
-            request.stderr.println( "Unable to parse command line options: " + e.getMessage() );
-            cliManager.displayHelp( request.stdout );
-            request.exit = Exit.EXIT_WITH_ERROR;
+            cliRequest.stderr.println( "Unable to parse command line options: " + e.getMessage() );
+            cliManager.displayHelp( cliRequest.stdout );
+            cliRequest.exit = Exit.EXIT_WITH_ERROR;
-        request.debug = request.commandLine.hasOption( CLIManager.DEBUG );
-        request.quiet = !request.debug && request.commandLine.hasOption( CLIManager.QUIET );
-        request.showErrors = request.debug || request.commandLine.hasOption( CLIManager.ERRORS );
-
-        if ( request.commandLine.hasOption( CLIManager.HELP ) )
+        if ( cliRequest.commandLine.hasOption( CLIManager.HELP ) )
-            cliManager.displayHelp( request.stdout );
-            request.exit = Exit.EXIT_WITHOUT_ERROR;
+            cliManager.displayHelp( cliRequest.stdout );
+            cliRequest.exit = Exit.EXIT_WITHOUT_ERROR;
-        if ( request.commandLine.hasOption( CLIManager.VERSION ) )
+        if ( cliRequest.commandLine.hasOption( CLIManager.VERSION ) )
-            CLIReportingUtils.showVersion( request.stdout );
-            request.exit = Exit.EXIT_WITHOUT_ERROR;
+            CLIReportingUtils.showVersion( cliRequest.stdout );
+            cliRequest.exit = Exit.EXIT_WITHOUT_ERROR;
-        container.setLoggerManager( new MavenLoggerManager( new PrintStreamLogger( System.out ) ) );
+        container.setLoggerManager( new MavenLoggerManager( logger ) );
+        executionRequestPopulator = container.lookup( MavenExecutionRequestPopulator.class );
+
+        executionRequestPopulator.populateFromSettings( cliRequest.request, settingsResult.getEffectiveSettings() );
+
