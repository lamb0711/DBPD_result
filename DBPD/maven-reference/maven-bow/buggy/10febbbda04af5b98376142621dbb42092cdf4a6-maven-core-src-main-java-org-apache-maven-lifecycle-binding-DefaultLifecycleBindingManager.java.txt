Replaced old build-plan mess with a single recursive plan instance that tracks direct invocation forks as well as lifecycle forks. All unit tests run, and I'm running integration tests now, to see if this fixes it0013.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@541938 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.lifecycle.model.LifecycleBinding;
-import org.apache.maven.lifecycle.plan.DirectInvocationModifier;
-import org.apache.maven.lifecycle.plan.LifecyclePlannerException;
-import java.util.Collections;
- * Responsible for the gross construction of LifecycleBindings, or mappings of MojoBinding instances
- * to different parts of the three lifecycles: clean, build, and site. Also, handles transcribing
- * these LifecycleBindings instances into lists of MojoBinding's, which can be consumed by the
- * LifecycleExecutor.
+ * Responsible for the gross construction of LifecycleBindings, or mappings of MojoBinding instances to different parts
+ * of the three lifecycles: clean, build, and site. Also, handles transcribing these LifecycleBindings instances into
+ * lists of MojoBinding's, which can be consumed by the LifecycleExecutor.
- *
+ * 
-public class DefaultLifecycleBindingManager
-    implements LifecycleBindingManager, LogEnabled
+public class DefaultLifecycleBindingManager implements LifecycleBindingManager, LogEnabled
-    
+
-     * Retrieve the LifecycleBindings given by the lifecycle mapping component/file for the project's
-     * packaging. Any applicable mojo configuration will be injected into the LifecycleBindings from
-     * the POM.
+     * Retrieve the LifecycleBindings given by the lifecycle mapping component/file for the project's packaging. Any
+     * applicable mojo configuration will be injected into the LifecycleBindings from the POM.
-    public LifecycleBindings getBindingsForPackaging( MavenProject project )
+    public LifecycleBindings getBindingsForPackaging( final MavenProject project )
-     * {@link LifecycleBindingLoader} instance, or a {@link LifecycleMapping} instance that matches
-     * the project's packaging. For the first match found, construct the corresponding LifecycleBindings
-     * instance and return it after POM configurations have been injected into any appropriate
-     * MojoBinding instances contained within.
+     * {@link LifecycleBindingLoader} instance, or a {@link LifecycleMapping} instance that matches the project's
+     * packaging. For the first match found, construct the corresponding LifecycleBindings instance and return it after
+     * POM configurations have been injected into any appropriate MojoBinding instances contained within.
-    private LifecycleBindings searchPluginsWithExtensions( MavenProject project )
+    private LifecycleBindings searchPluginsWithExtensions( final MavenProject project )
-                    loader = (LifecycleBindingLoader) pluginLoader.loadPluginComponent( LifecycleBindingLoader.ROLE, packaging,
-                                                                                        plugin, project );
+                    loader =
+                        (LifecycleBindingLoader) pluginLoader.loadPluginComponent( LifecycleBindingLoader.ROLE,
+                                                                                   packaging, plugin, project );
-                        + " could not be retrieved from plugin: " + plugin.getKey() + ".\nReason: " + e.getMessage(), e );
+                                    + " could not be retrieved from plugin: " + plugin.getKey() + ".\nReason: "
+                                    + e.getMessage(), e );
-                        + e.getMessage(), e );
+                                    + e.getMessage(), e );
-                        mapping = (LifecycleMapping) pluginLoader.loadPluginComponent( LifecycleMapping.ROLE, packaging, plugin,
-                                                                                       project );
+                        mapping =
+                            (LifecycleMapping) pluginLoader.loadPluginComponent( LifecycleMapping.ROLE, packaging,
+                                                                                 plugin, project );
-                            + " could not be retrieved from plugin: " + plugin.getKey() + ".\nReason: " + e.getMessage(), e );
+                                        + " could not be retrieved from plugin: " + plugin.getKey() + ".\nReason: "
+                                        + e.getMessage(), e );
-                            + e.getMessage(), e );
+                                        + e.getMessage(), e );
-     * Construct the LifecycleBindings for the default lifecycle mappings, including injection of 
-     * configuration from the project into each MojoBinding, where appropriate.
+     * Construct the LifecycleBindings for the default lifecycle mappings, including injection of configuration from the
+     * project into each MojoBinding, where appropriate.
-    public LifecycleBindings getDefaultBindings( MavenProject project )
-        throws LifecycleSpecificationException
+    public LifecycleBindings getDefaultBindings( final MavenProject project ) throws LifecycleSpecificationException
-    public void enableLogging( Logger logger )
+    public void enableLogging( final Logger logger )
-     * Construct the LifecycleBindings that constitute the extra mojos bound to the lifecycle within
-     * the POM itself.
+     * Construct the LifecycleBindings that constitute the extra mojos bound to the lifecycle within the POM itself.
-    public LifecycleBindings getProjectCustomBindings( MavenProject project )
+    public LifecycleBindings getProjectCustomBindings( final MavenProject project )
-                        if ( goals != null && !goals.isEmpty() )
+                        if ( ( goals != null ) && !goals.isEmpty() )
-                                
+
-                                    logger.warn( "Execution: " + execution.getId() + " in plugin: " + plugin.getKey() + " in the POM has a null goal." );
+                                    logger.warn( "Execution: " + execution.getId() + " in plugin: " + plugin.getKey()
+                                                    + " in the POM has a null goal." );
-                                            throw new LifecycleLoaderException( "Failed to load plugin: " + plugin + ". Reason: "
-                                                + e.getMessage(), e );
+                                            throw new LifecycleLoaderException( "Failed to load plugin: " + plugin
+                                                            + ". Reason: " + e.getMessage(), e );
-                                    
+
-                                        logger.error( "Somehow, the PluginDescriptor for plugin: " + plugin.getKey() + " contains no mojos. This is highly irregular. Ignoring..." );
+                                        logger.error( "Somehow, the PluginDescriptor for plugin: " + plugin.getKey()
+                                                        + " contains no mojos. This is highly irregular. Ignoring..." );
-                                        throw new LifecycleSpecificationException( "No phase specified for goal: " + goal
-                                            + " in plugin: " + plugin.getKey() + " from POM: " + projectId );
+                                        throw new LifecycleSpecificationException( "No phase specified for goal: "
+                                                        + goal + " in plugin: " + plugin.getKey() + " from POM: "
+                                                        + projectId );
-     * Construct the LifecycleBindings that constitute the mojos mapped to the lifecycles by an overlay
-     * specified in a plugin. Inject mojo configuration from the POM into all appropriate MojoBinding
-     * instances.
+     * Construct the LifecycleBindings that constitute the mojos mapped to the lifecycles by an overlay specified in a
+     * plugin. Inject mojo configuration from the POM into all appropriate MojoBinding instances.
-    public LifecycleBindings getPluginLifecycleOverlay( PluginDescriptor pluginDescriptor, String lifecycleId,
-                                                        MavenProject project )
+    public LifecycleBindings getPluginLifecycleOverlay( final PluginDescriptor pluginDescriptor,
+                                                        final String lifecycleId, final MavenProject project )
-                    //<phase>
-                    //  <id>test</id>
-                    //  <executions>
-                    //    <execution>
-                    //      <goals>
-                    //        <goal>org.apache.maven.plugins:maven-surefire-plugin:test</goal>
-                    //      </goals>
-                    //      <configuration>
-                    //        <classesDirectory>${project.build.directory}/generated-classes/cobertura</classesDirectory>
-                    //        <ignoreFailures>true</ignoreFailures>
-                    //        <forkMode>once</forkMode>
-                    //      </configuration>
-                    //    </execution>
-                    //  </executions>
-                    //</phase>
+                    // <phase>
+                    // <id>test</id>
+                    // <executions>
+                    // <execution>
+                    // <goals>
+                    // <goal>org.apache.maven.plugins:maven-surefire-plugin:test</goal>
+                    // </goals>
+                    // <configuration>
+                    // <classesDirectory>${project.build.directory}/generated-classes/cobertura</classesDirectory>
+                    // <ignoreFailures>true</ignoreFailures>
+                    // <forkMode>once</forkMode>
+                    // </configuration>
+                    // </execution>
+                    // </executions>
+                    // </phase>
-                        configuration = Xpp3Dom.mergeXpp3Dom( new Xpp3Dom( (Xpp3Dom) phase.getConfiguration() ), configuration );
+                        configuration =
+                            Xpp3Dom.mergeXpp3Dom( new Xpp3Dom( (Xpp3Dom) phase.getConfiguration() ), configuration );
-                //   We should create a new lifecycle executor for modelVersion >5.0.0
+                // We should create a new lifecycle executor for modelVersion >5.0.0
-                    Xpp3Dom configuration = Xpp3Dom.mergeXpp3Dom( new Xpp3Dom( (Xpp3Dom) phase.getConfiguration() ),
-                                                                  (Xpp3Dom) binding.getConfiguration() );
+                    Xpp3Dom configuration =
+                        Xpp3Dom.mergeXpp3Dom( new Xpp3Dom( (Xpp3Dom) phase.getConfiguration() ),
+                                              (Xpp3Dom) binding.getConfiguration() );
-     * Retrieve the list of MojoBinding instances that correspond  to the reports configured for the
-     * specified project. Inject all appropriate configuration from the POM for each MojoBinding, using
-     * the following precedence rules:
+     * Retrieve the list of MojoBinding instances that correspond to the reports configured for the specified project.
+     * Inject all appropriate configuration from the POM for each MojoBinding, using the following precedence rules:
-     *   <li>report-set-level configuration</li>
-     *   <li>reporting-level configuration</li>
-     *   <li>execution-level configuration</li>
-     *   <li>plugin-level configuration</li>
+     * <li>report-set-level configuration</li>
+     * <li>reporting-level configuration</li>
+     * <li>execution-level configuration</li>
+     * <li>plugin-level configuration</li>
-    public List getReportBindings( MavenProject project )
+    public List getReportBindings( final MavenProject project )
-                if ( reportSets == null || reportSets.isEmpty() )
+                if ( ( reportSets == null ) || reportSets.isEmpty() )
-    private List getReportPluginsForProject( MavenProject project )
+    private List getReportPluginsForProject( final MavenProject project )
-        if ( project.getReporting() == null || !project.getReporting().isExcludeDefaults() )
+        if ( ( project.getReporting() == null ) || !project.getReporting().isExcludeDefaults() )
-                        if ( reportPlugin.getGroupId().equals( groupId ) && reportPlugin.getArtifactId().equals( artifactId ) )
+                        if ( reportPlugin.getGroupId().equals( groupId )
+                                        && reportPlugin.getArtifactId().equals( artifactId ) )
-    private List getReportsForPlugin( ReportPlugin reportPlugin, ReportSet reportSet, MavenProject project )
-        throws LifecycleLoaderException
+    private List getReportsForPlugin( final ReportPlugin reportPlugin, final ReportSet reportSet,
+                                      final MavenProject project ) throws LifecycleLoaderException
-                + e.getMessage(), e );
+                            + e.getMessage(), e );
-            if ( reportSet == null || reportSet.getReports().contains( mojoDescriptor.getGoal() ) )
+            if ( ( reportSet == null ) || reportSet.getReports().contains( mojoDescriptor.getGoal() ) )
-                
+
-    /**
-     * Determine whether the first list contains all of the same MojoBinding instances, in the same
-     * order, starting at index zero, as the second list. If so, it is either a perfect super-list
-     * or an equal list, and return true. Return false otherwise.
-     */
-    private static boolean isSameOrSuperListOfMojoBindings( List superCandidate, List check )
-    {
-        if ( superCandidate == null || check == null )
-        {
-            return false;
-        }
-
-        if ( superCandidate.size() < check.size() )
-        {
-            return false;
-        }
-
-        List superKeys = new ArrayList( superCandidate.size() );
-        for ( Iterator it = superCandidate.iterator(); it.hasNext(); )
-        {
-            MojoBinding binding = (MojoBinding) it.next();
-
-            superKeys.add( LifecycleUtils.createMojoBindingKey( binding, true ) );
-        }
-
-        List checkKeys = new ArrayList( check.size() );
-        for ( Iterator it = check.iterator(); it.hasNext(); )
-        {
-            MojoBinding binding = (MojoBinding) it.next();
-
-            checkKeys.add( LifecycleUtils.createMojoBindingKey( binding, true ) );
-        }
-
-        return superKeys.subList( 0, checkKeys.size() ).equals( checkKeys );
-    }
-
-    /**
-     * Traverse the specified LifecycleBindings instance for all of the specified tasks. If the task
-     * is found to be a phase name, construct the list of all MojoBindings that lead up to that phase
-     * in that lifecycle, and add them to the master MojoBinding list. If the task is not a phase name,
-     * treat it as a direct mojo invocation, parse it into a MojoBinding (resolving the plugin prefix
-     * first if necessary), and add it to the master MojoBinding list. Finally, return the master list.
-     */
-    public List assembleMojoBindingList( List tasks, LifecycleBindings bindings, MavenProject project )
-        throws LifecycleSpecificationException, LifecyclePlannerException, LifecycleLoaderException
-    {
-        return assembleMojoBindingList( tasks, bindings, Collections.EMPTY_MAP, project );
-    }
-
-    /**
-     * Traverse the specified LifecycleBindings instance for all of the specified tasks. If the task
-     * is found to be a phase name, construct the list of all MojoBindings that lead up to that phase
-     * in that lifecycle, and add them to the master MojoBinding list. If the task is not a phase name,
-     * treat it as a direct mojo invocation, parse it into a MojoBinding (resolving the plugin prefix
-     * first if necessary), and add it to the master MojoBinding list.
-     * 
-     * Then, iterate through all MojoBindings in the master list, and for each one that maps to an 
-     * entry in directInvocationModifiers, substitute the resultant MojoBinding list from that 
-     * modifier in place of the original MojoBinding.
-     * 
-     * Finally, return the modified master list.
-     */
-    public List assembleMojoBindingList( List tasks, LifecycleBindings lifecycleBindings, Map directInvocationModifiers,
-                                                MavenProject project )
-        throws LifecycleSpecificationException, LifecyclePlannerException, LifecycleLoaderException
-    {
-        List planBindings = new ArrayList();
-
-        List lastMojoBindings = null;
-        for ( Iterator it = tasks.iterator(); it.hasNext(); )
-        {
-            String task = (String) it.next();
-
-            LifecycleBinding binding = LifecycleUtils.findLifecycleBindingForPhase( task, lifecycleBindings );
-            if ( binding != null )
-            {
-                List mojoBindings = LifecycleUtils.getMojoBindingListForLifecycle( task, binding );
-
-                // save these so we can reference the originals...
-                List originalMojoBindings = mojoBindings;
-
-                // if these mojo bindings are a superset of the last bindings, only add the difference.
-                if ( isSameOrSuperListOfMojoBindings( mojoBindings, lastMojoBindings ) )
-                {
-                    List revised = new ArrayList( mojoBindings );
-                    revised.removeAll( lastMojoBindings );
-
-                    if ( revised.isEmpty() )
-                    {
-                        continue;
-                    }
-
-                    mojoBindings = revised;
-                }
-
-                planBindings.addAll( mojoBindings );
-                lastMojoBindings = originalMojoBindings;
-            }
-            else
-            {
-                MojoBinding mojoBinding = mojoBindingFactory.parseMojoBinding( task, project, true );
-                BindingUtils.injectProjectConfiguration( mojoBinding, project );
-
-                mojoBinding.setOrigin( "direct invocation" );
-
-                String key = LifecycleUtils.createMojoBindingKey( mojoBinding, true );
-                DirectInvocationModifier modifier = (DirectInvocationModifier) directInvocationModifiers.get( key );
-
-                if ( modifier != null )
-                {
-                    planBindings.addAll( modifier.getModifiedBindings( project, this ) );
-                }
-                else
-                {
-                    planBindings.add( mojoBinding );
-                }
-            }
-        }
-
-        return planBindings;
-    }
-
