o merge of the maven-embedder-refactor branch into the trunk



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@392327 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
-    implements MavenSettingsBuilder, Initializable
+    implements MavenSettingsBuilder
-    public static final String userHome = System.getProperty( "user.home" );
-
-    /**
-     * @configuration
-     */
-    private String userSettingsPath;
-
-    /**
-     * @configuration
-     */
-    private String globalSettingsPath;
-
-    private File userSettingsFile;
-
-    private File globalSettingsFile;
-
-    private Settings loadedSettings;
-
-    // ----------------------------------------------------------------------
-    // Component Lifecycle
-    // ----------------------------------------------------------------------
-
-    public void initialize()
-    {
-        userSettingsFile =
-            getFile( userSettingsPath, "user.home", MavenSettingsBuilder.ALT_USER_SETTINGS_XML_LOCATION );
-
-        globalSettingsFile =
-            getFile( globalSettingsPath, "maven.home", MavenSettingsBuilder.ALT_GLOBAL_SETTINGS_XML_LOCATION );
-
-        getLogger().debug(
-            "Building Maven global-level settings from: '" + globalSettingsFile.getAbsolutePath() + "'" );
-        getLogger().debug( "Building Maven user-level settings from: '" + userSettingsFile.getAbsolutePath() + "'" );
-    }
-
+    public Settings buildSettings( File userSettingsFile, File globalSettingsFile )
+        throws IOException, XmlPullParserException
+    {
+        Settings globalSettings = readSettings( globalSettingsFile );
+
+        Settings userSettings = readSettings( userSettingsFile );
+
+        if ( globalSettings == null )
+        {
+            globalSettings = new Settings();
+        }
+
+        if ( userSettings == null )
+        {
+            userSettings = new Settings();
+
+            userSettings.setRuntimeInfo( new RuntimeInfo( userSettings ) );
+        }
+
+        SettingsUtils.merge( userSettings, globalSettings, TrackableBase.GLOBAL_LEVEL );
+
+        activateDefaultProfiles( userSettings );
+
+        return userSettings;
+    }
+
+        if ( settingsFile == null )
+        {
+            return null;
+        }
+
+                System.out.println( "settings.getPluginGroups().size() = " + settings.getPluginGroups().size() );
+
-    public Settings buildSettings()
-        throws IOException, XmlPullParserException
-    {
-        return buildSettings( userSettingsFile );
-    }
-
-    public Settings buildSettings( File userSettingsFile )
-        throws IOException, XmlPullParserException
-    {
-        if ( loadedSettings == null )
-        {
-            Settings globalSettings = readSettings( globalSettingsFile );
-            Settings userSettings = readSettings( userSettingsFile );
-
-            if ( globalSettings == null )
-            {
-                globalSettings = new Settings();
-            }
-
-            if ( userSettings == null )
-            {
-                userSettings = new Settings();
-                userSettings.setRuntimeInfo( new RuntimeInfo( userSettings ) );
-            }
-
-            SettingsUtils.merge( userSettings, globalSettings, TrackableBase.GLOBAL_LEVEL );
-
-            activateDefaultProfiles( userSettings );
-
-            setLocalRepository( userSettings );
-
-            loadedSettings = userSettings;
-        }
-
-        return loadedSettings;
-    }
-
-    private void setLocalRepository( Settings userSettings )
-    {
-        // try using the local repository specified on the command line...
-        String localRepository = System.getProperty( MavenSettingsBuilder.ALT_LOCAL_REPOSITORY_LOCATION );
-
-        // otherwise, use the one in settings.xml
-        if ( localRepository == null || localRepository.length() < 1 )
-        {
-            localRepository = userSettings.getLocalRepository();
-        }
-
-        // if all of the above are missing, default to ~/.m2/repository.
-        if ( localRepository == null || localRepository.length() < 1 )
-        {
-            File mavenUserConfigurationDirectory = new File( userHome, ".m2" );
-            if ( !mavenUserConfigurationDirectory.exists() )
-            {
-                if ( !mavenUserConfigurationDirectory.mkdirs() )
-                {
-                    //throw a configuration exception
-                }
-            }
-
-            localRepository = new File( mavenUserConfigurationDirectory, "repository" ).getAbsolutePath();
-        }
-
-        userSettings.setLocalRepository( localRepository );
-    }
-
-
