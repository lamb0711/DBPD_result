o Refactored settings validation to support more extensive problem descriptor

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@928934 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.settings.building.SettingsProblem;
+import org.apache.maven.settings.building.SettingsProblemCollector;
-    public SettingsValidationResult validate( Settings model )
-    {
-        SettingsValidationResult result = new SettingsValidationResult();
-        List<Profile> profiles = model.getProfiles();
+    public void validate( Settings settings, SettingsProblemCollector problems )
+    {
+        List<Profile> profiles = settings.getProfiles();
+
-            for (Profile prof : profiles )
+            for ( Profile prof : profiles )
-                validateRepositories( result, prof.getRepositories(), "repositories.repository" );
-                validateRepositories( result, prof.getPluginRepositories(), "pluginRepositories.pluginRepository" );
+                validateRepositories( problems, prof.getRepositories(), "repositories.repository" );
+                validateRepositories( problems, prof.getPluginRepositories(), "pluginRepositories.pluginRepository" );
-
-        return result;
-    private void validateRepositories( SettingsValidationResult result, List<Repository> repositories, String prefix )
+    private void validateRepositories( SettingsProblemCollector problems, List<Repository> repositories, String prefix )
-            validateStringNotEmpty( prefix + ".id", result, repository.getId() );
+            validateStringNotEmpty( problems, prefix + ".id", repository.getId() );
-            validateStringNotEmpty( prefix + ".url", result, repository.getUrl() );
+            validateStringNotEmpty( problems, prefix + ".url", repository.getUrl() );
-
-
-
-    private boolean validateStringNotEmpty( String fieldName, SettingsValidationResult result, String string )
+    private boolean validateStringNotEmpty( SettingsProblemCollector problems, String fieldName, String string )
-        return validateStringNotEmpty( fieldName, result, string, null );
+        return validateStringNotEmpty( problems, fieldName, string, null );
-    private boolean validateStringNotEmpty( String fieldName, SettingsValidationResult result, String string, String sourceHint )
+    private boolean validateStringNotEmpty( SettingsProblemCollector problems, String fieldName, String string, String sourceHint )
-        if ( !validateNotNull( fieldName, result, string, sourceHint ) )
+        if ( !validateNotNull( problems, fieldName, string, sourceHint ) )
+        String msg;
-            result.addMessage( "'" + fieldName + "' is missing for " + sourceHint );
+            msg = "'" + fieldName + "' is missing for " + sourceHint;
-            result.addMessage( "'" + fieldName + "' is missing." );
+            msg = "'" + fieldName + "' is missing.";
+        addError( problems, msg );
-    private boolean validateNotNull( String fieldName, SettingsValidationResult result, Object object, String sourceHint )
+    private boolean validateNotNull( SettingsProblemCollector problems, String fieldName, Object object,
+                                     String sourceHint )
+        String msg;
-            result.addMessage( "'" + fieldName + "' is missing for " + sourceHint );
+            msg = "'" + fieldName + "' is missing for " + sourceHint;
-            result.addMessage( "'" + fieldName + "' is missing." );
+            msg = "'" + fieldName + "' is missing.";
+        addError( problems, msg );
+    private void addError( SettingsProblemCollector problems, String msg )
+    {
+        problems.add( SettingsProblem.Severity.ERROR, msg, -1, -1, null );
+    }
+
