recognise prefix of plugins already loaded

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168605 13f79535-47bb-0310-9956-ffa450edef68

+        PluginDescriptor pluginDescriptor = null;
+
-            // TODO: look up registered aliases in plugin manager instead
-            groupId = PluginDescriptor.getDefaultPluginGroupId();
-            artifactId = PluginDescriptor.getDefaultPluginArtifactId( tok.nextToken() );
+            String prefix = tok.nextToken();
+
+            pluginDescriptor = pluginManager.verifyPlugin( prefix );
+
+            if ( pluginDescriptor == null )
+            {
+                groupId = PluginDescriptor.getDefaultPluginGroupId();
+                artifactId = PluginDescriptor.getDefaultPluginArtifactId( prefix );
+            }
-        // TODO: this shouldn't be necessary all the time.
-        injectHandlerPluginConfiguration( session.getProject(), groupId, artifactId, version );
-
-        try
+        if ( pluginDescriptor == null )
-            PluginDescriptor pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session );
-            // TODO: should be able to create a Map from this
-            for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext(); )
+            injectHandlerPluginConfiguration( session.getProject(), groupId, artifactId, version );
+            try
-                MojoDescriptor mojoDescriptor = (MojoDescriptor) i.next();
-                if ( mojoDescriptor.getGoal().equals( goal ) )
-                {
-                    return mojoDescriptor;
-                }
+                pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session );
+            }
+            catch ( PluginManagerException e )
+            {
+                throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
-        catch ( PluginManagerException e )
+
+        MojoDescriptor mojoDescriptor = null;
+
+        // TODO: should be able to create a Map from this
+        for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext() && mojoDescriptor == null; )
-            throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+            MojoDescriptor desc = (MojoDescriptor) i.next();
+            if ( desc.getGoal().equals( goal ) )
+            {
+                mojoDescriptor = desc;
+            }
-        throw new LifecycleExecutionException( "Required goal not found: " + task );
+        if ( mojoDescriptor == null )
+        {
+            throw new LifecycleExecutionException( "Required goal not found: " + task );
+        }
+
+        return mojoDescriptor;
