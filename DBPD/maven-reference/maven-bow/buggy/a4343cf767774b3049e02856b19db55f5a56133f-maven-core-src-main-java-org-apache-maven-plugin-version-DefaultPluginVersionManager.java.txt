PR: MNG-625
allow a plugin to specify the minimum Maven version (will apply for both building and its execution - this should be separated later).

If you are running an older version then it will not prompt to update when found, and will fail if it is encountered with a hardcoded version.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@220239 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
+import org.apache.maven.execution.RuntimeInformation;
+import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.ProjectBuildingException;
+    private MavenProjectBuilder mavenProjectBuilder;
+
+    private RuntimeInformation runtimeInformation;
+
-        // second pass...if we're using the plugin registry, and the plugin is listed in the plugin-registry.xml, use 
+        // second pass...if we're using the plugin registry, and the plugin is listed in the plugin-registry.xml, use
-        // third pass...if we're checking for latest install/deploy, retrieve the version for LATEST metadata and also 
+        // third pass...if we're checking for latest install/deploy, retrieve the version for LATEST metadata and also
-            // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.
-            updatedVersion = version;
+            if ( version != null )
+            {
+                // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.
+                updatedVersion = version;
-            // 3. Persist this version without prompting.
-            forcePersist = true;
-            promptToPersist = false;
+                // 3. Persist this version without prompting.
+                forcePersist = true;
+                promptToPersist = false;
+            }
-        // final pass...retrieve the version for RELEASE and also set that resolved version as the <useVersion/> 
+        // final pass...retrieve the version for RELEASE and also set that resolved version as the <useVersion/>
-            // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.
-            updatedVersion = version;
+            if ( version != null )
+            {
+                // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.
+                updatedVersion = version;
-            // 3. Persist this version without prompting.
-            forcePersist = true;
-            promptToPersist = false;
+                // 3. Persist this version without prompting.
+                forcePersist = true;
+                promptToPersist = false;
+            }
-            // If it's not, then we'll defer to the autoUpdate setting from the registry 
+            // If it's not, then we'll defer to the autoUpdate setting from the registry
+        throws PluginVersionResolutionException
-        // TODO: check - this was SCOPE_RUNTIME before, now is null
-            version = artifact.getVersion();
+            MavenProject project = mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories,
+                                                                            localRepository );
+
+            boolean pluginValid = true;
+
+            // if we don't have the required Maven version, then ignore an update
+            if ( project.getPrerequesites() != null && project.getPrerequesites().getMaven() != null )
+            {
+                DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
+                    project.getPrerequesites().getMaven() );
+                if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+                {
+                    getLogger().info( "Ignoring available plugin update: " + artifact.getVersion() +
+                        " as it requires Maven version " + requiredVersion );
+                    pluginValid = false;
+                }
+            }
+
+            if ( pluginValid )
+            {
+                version = artifact.getVersion();
+            }
-
+        catch ( ProjectBuildingException e )
+        {
+            throw new PluginVersionResolutionException( groupId, artifactId,
+                                                        "Unable to build resolve plugin project information", e );
+        }
+        catch ( IOException e )
+        {
+            throw new PluginVersionResolutionException( groupId, artifactId,
+                                                        "Unable to determine Maven version for comparison", e );
+        }
