Fix for problems with modello plugin. Builder was not properly inheriting the goals.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@721608 13f79535-47bb-0310-9956-ffa450edef68

+            //ProjectUri.Build.PluginManagement.Plugins.Plugin.Executions.xUri,
+
+               // System.out.println(action);
-                {
-                    source.join( dependencyContainer, managementContainer );
+                {    //System.out.println("A:");
+                    ModelDataSource dependencyDatasource = new DefaultModelDataSource();
+                    dependencyDatasource.init( dependencyContainer.getProperties(), Arrays.asList( new ArtifactModelContainerFactory(),
+                            new IdModelContainerFactory() ) );
+
+                    ModelDataSource managementDatasource = new DefaultModelDataSource();
+                    managementDatasource.init( managementContainer.getProperties(), Arrays.asList( new ArtifactModelContainerFactory(),
+                            new IdModelContainerFactory() ) );
+
+                    List<ModelContainer> managementExecutionContainers = managementDatasource.queryFor(ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri);
+                    List<ModelProperty> managementPropertiesWithoutExecutions = new ArrayList<ModelProperty>(managementContainer.getProperties());
+                    for(ModelContainer a : managementExecutionContainers)
+                    {
+                        managementPropertiesWithoutExecutions.removeAll(a.getProperties());
+                    }
+
+                    source.join( dependencyContainer, new ArtifactModelContainerFactory().create(managementPropertiesWithoutExecutions) );
+
+                    List<ModelContainer> dependencyExecutionContainers = dependencyDatasource.queryFor(ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri);
+                    List<ModelContainer> joinedExecutionContainers = new ArrayList<ModelContainer>();
+                    //System.out.println(managementExecutionContainers.size());
+                    for(ModelContainer a : managementExecutionContainers)
+                    {
+                        for(ModelContainer b : dependencyExecutionContainers)
+                        {
+                            if(b.containerAction(a).equals(ModelContainerAction.JOIN))
+                            {
+                                source.join(b, a);
+                                joinedExecutionContainers.add(a);
+                            }
+                        }
+                    }
+
+                    ModelProperty executionsProperty = null;
+                    for(ModelProperty a : dependencyContainer.getProperties())
+                    {
+                        if(a.getUri().equals(ProjectUri.Build.Plugins.Plugin.Executions.xUri)) {
+                            executionsProperty = a;
+                            break;
+                        }
+                    }
+
+                    if(executionsProperty == null)
+                    {
+                        for(ModelProperty a : managementPropertiesWithoutExecutions)
+                        {
+                            if(a.getUri().equals(ProjectUri.Build.Plugins.Plugin.Executions.xUri)) {
+                                executionsProperty = a;
+                                break;
+                            }
+                        }
+                    }
+
+                    if(executionsProperty != null)
+                    {
+                        managementExecutionContainers.removeAll(joinedExecutionContainers);
+                        Collections.reverse(managementExecutionContainers);
+                        for(ModelContainer a : managementExecutionContainers)
+                        {
+                            source.insertModelPropertiesAfter(executionsProperty,
+                                    ModelTransformerContext.sort(a.getProperties(), ProjectUri.Build.Plugins.Plugin.Executions.xUri));
+                        }
+                    }
