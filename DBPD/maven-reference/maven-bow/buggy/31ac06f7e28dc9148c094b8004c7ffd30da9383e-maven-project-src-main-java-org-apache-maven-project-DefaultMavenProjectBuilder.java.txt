Working on: MNG-521

o Cleaned up output from discovery of MavenProjectBuilder instance in MavenProjectTestCase.
o Added <relativePath/> to parent in maven.mdo (default value is '../pom.xml')
o Added filesystem parent-POM search using <relativePath/>...if discovered pom doesn't match the parent specification (g:a:v), then it's not used - the parent is resolved - and search for ancestor POMs on disk goes no further.

NOTE: Next thing is to reactor-ize the release plugin, then MNG-521 should be implemented.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@225379 13f79535-47bb-0310-9956-ffa450edef68

-                                      Collections.EMPTY_LIST, externalProfiles );
+                                      Collections.EMPTY_LIST, externalProfiles, projectDescriptor.getAbsoluteFile().getParentFile() );
-                      Collections.EMPTY_LIST );
+                      Collections.EMPTY_LIST, null );
-                                List remoteArtifactRepositories, List externalProfiles )
+                                List remoteArtifactRepositories, List externalProfiles, File projectDir )
-        MavenProject project = assembleLineage( model, lineage, repositories, localRepository );
+        MavenProject project = assembleLineage( model, lineage, repositories, localRepository, externalProfiles, projectDir );
-                                          ArtifactRepository localRepository )
+                                          ArtifactRepository localRepository, List externalProfiles, File projectDir )
+            
+            model = getCachedModel( parentModel.getGroupId(), parentModel.getArtifactId(), parentModel.getVersion() );
+            
+            // the only way this will have a value is if we find the parent on disk...
+            File parentProjectDir = null;
+            
+            String parentRelativePath = parentModel.getRelativePath();
+            
+            // if we can't find a cached model matching the parent spec, then let's try to look on disk using
+            // <relativePath/>
+            if ( model == null && projectDir != null && StringUtils.isNotEmpty(parentRelativePath) )
+            {
+                File parentDescriptor = new File( projectDir, parentRelativePath );
+                
+                try
+                {
+                    parentDescriptor = parentDescriptor.getCanonicalFile();
+                }
+                catch ( IOException e )
+                {
+                    getLogger().debug( "Failed to canonicalize potential parent POM: \'" + parentDescriptor + "\'", e );
+                    
+                    parentDescriptor = null;
+                }
+                
+                if ( parentDescriptor != null && parentDescriptor.exists() )
+                {
+                    Model candidateParent = readModel( parentDescriptor );
+                    
+                    // this works because parent-version is still required...
+                    if ( parentModel.getGroupId().equals( candidateParent.getGroupId() )
+                        && parentModel.getArtifactId().equals( candidateParent.getArtifactId() )
+                        && ( parentModel.getVersion().equals( candidateParent.getVersion() ) 
+                            || ( candidateParent.getParent() != null 
+                                && parentModel.getVersion().equals(candidateParent.getParent().getVersion() ) ) ) )
+                    {
+                        model = candidateParent;
+                        
+                        parentProjectDir = parentDescriptor.getParentFile();
+                        
+                        getLogger().debug( "Using parent-POM from the project hierarchy at: \'" + parentModel.getRelativePath() + "\' for project: " + project.getId() );
+                    }
+                    else
+                    {
+                        getLogger().debug("Invalid parent-POM referenced by relative path: \'" + parentModel.getRelativePath() + "\'. It did not match parent specification in " + project.getId() );
+                    }
+                }
+            }
+            
+            Artifact parentArtifact = null;
-            //!! (**)
-            // ----------------------------------------------------------------------
-            // Do we have the necessary information to actually find the parent
-            // POMs here?? I don't think so ... Say only one remote repository is
-            // specified and that is ibiblio then this model that we just read doesn't
-            // have any repository information ... I think we might have to inherit
-            // as we go in order to do this.
-            // ----------------------------------------------------------------------
+            // only resolve the parent model from the repository system if we didn't find it on disk...
+            if ( model == null )
+            {
+                //!! (**)
+                // ----------------------------------------------------------------------
+                // Do we have the necessary information to actually find the parent
+                // POMs here?? I don't think so ... Say only one remote repository is
+                // specified and that is ibiblio then this model that we just read doesn't
+                // have any repository information ... I think we might have to inherit
+                // as we go in order to do this.
+                // ----------------------------------------------------------------------
-            Artifact artifact = artifactFactory.createParentArtifact( parentModel.getGroupId(),
-                                                                      parentModel.getArtifactId(),
-                                                                      parentModel.getVersion() );
+                parentArtifact = artifactFactory.createParentArtifact( parentModel.getGroupId(),
+                                                                       parentModel.getArtifactId(),
+                                                                       parentModel.getVersion() );
-            model = findModelFromRepository( artifact, aggregatedRemoteWagonRepositories, localRepository );
+                model = findModelFromRepository( parentArtifact, aggregatedRemoteWagonRepositories, localRepository );
+            }
-            MavenProject parent = assembleLineage( model, lineage, aggregatedRemoteWagonRepositories, localRepository );
+            MavenProject parent = assembleLineage( model, lineage, aggregatedRemoteWagonRepositories, localRepository, externalProfiles, parentProjectDir );
-            project.setParentArtifact( artifact );
+            project.setParentArtifact( parentArtifact );
