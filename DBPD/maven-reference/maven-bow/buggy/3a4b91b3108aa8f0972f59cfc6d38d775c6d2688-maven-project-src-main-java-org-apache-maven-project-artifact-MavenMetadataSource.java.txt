PR: MNG-613
push shared code into metadata manager

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@280232 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.metadata.RepositoryMetadata;
-import org.apache.maven.artifact.repository.metadata.Versioning;
-        ArtifactMetadata metadata = new ArtifactRepositoryMetadata( artifact );
+        RepositoryMetadata metadata = new ArtifactRepositoryMetadata( artifact );
-        // TODO: this has been ripped from AbstractVersionTransformation - stop duplication
-        Versioning versioning = null;
-        for ( Iterator i = remoteRepositories.iterator(); i.hasNext(); )
-        {
-            ArtifactRepository repository = (ArtifactRepository) i.next();
-
-            versioning = loadVersioningInformation( metadata, repository, localRepository, artifact );
-            if ( versioning != null )
-            {
-                artifact.setRepository( repository );
-                // TODO: merge instead (see above)
-                break;
-            }
-        }
-        Versioning v = loadVersioningInformation( metadata, localRepository, localRepository, artifact );
-        if ( v != null )
-        {
-            versioning = v;
-            // TODO: figure out way to avoid duplicated message
-            if ( getLogger().isDebugEnabled() /*&& !alreadyResolved*/ )
-            {
-                // Locally installed file is newer, don't use the resolved version
-                getLogger().debug( artifact.getArtifactId() + ": using locally installed snapshot" );
-            }
-        }
-
-        if ( versioning != null )
+        Metadata repoMetadata = metadata.getMetadata();
+        if ( repoMetadata != null )
-            versions = new ArrayList( versioning.getVersions().size() );
-            for ( Iterator i = versioning.getVersions().iterator(); i.hasNext(); )
+            List metadataVersions = repoMetadata.getVersioning().getVersions();
+            versions = new ArrayList( metadataVersions.size() );
+            for ( Iterator i = metadataVersions.iterator(); i.hasNext(); )
-    private Versioning loadVersioningInformation( ArtifactMetadata repoMetadata, ArtifactRepository remoteRepository,
-                                                    ArtifactRepository localRepository, Artifact artifact )
+    private Metadata loadMetadata( ArtifactMetadata repoMetadata, ArtifactRepository remoteRepository,
+                                   ArtifactRepository localRepository )
-        Versioning versioning = null;
+        Metadata metadata = null;
-            Metadata metadata = readMetadata( metadataFile );
-            versioning = metadata.getVersioning();
+            metadata = readMetadata( metadataFile );
-        return versioning;
+        return metadata;
