[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.DefaultRepositoryRequest;
-import org.apache.maven.artifact.repository.RepositoryCache;
-import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.repository.ArtifactTransferListener;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.repository.RemoteRepository;
-    private RepositoryRequest repositoryRequest;
+    private List<RemoteRepository> repositories = Collections.emptyList();
+
+    private RepositorySystemSession session;
-        repositoryRequest = new DefaultRepositoryRequest();
-    }
-
-    /**
-     * Creates a request by copying settings from the specified repository request.
-     * 
-     * @param repositoryRequest The repository request to copy from, must not be {@code null}.
-     */
-    public DefaultPluginVersionRequest( RepositoryRequest repositoryRequest )
-    {
-        this.repositoryRequest = new DefaultRepositoryRequest( repositoryRequest );
-    }
-
-    /**
-     * Creates a request for the specified plugin by copying settings from the specified repository request.
-     * 
-     * @param The plugin for which to resolve a version, must not be {@code null}.
-     * @param repositoryRequest The repository request to copy from, must not be {@code null}.
-     */
-    public DefaultPluginVersionRequest( Plugin plugin, RepositoryRequest repositoryRequest )
-    {
-        this.groupId = plugin.getGroupId();
-        this.artifactId = plugin.getArtifactId();
-        this.repositoryRequest = new DefaultRepositoryRequest( repositoryRequest );
-     * has a current project, its plugin artifact repositories will be used as well.
+     * has a current project, its plugin repositories will be used as well.
-     * @param The plugin for which to resolve a version, must not be {@code null}.
+     * @param plugin The plugin for which to resolve a version, must not be {@code null}.
-        this.groupId = plugin.getGroupId();
-        this.artifactId = plugin.getArtifactId();
-        this.repositoryRequest = new DefaultRepositoryRequest();
+        setGroupId( plugin.getGroupId() );
+        setArtifactId( plugin.getArtifactId() );
-        setCache( session.getRepositoryCache() );
-        setLocalRepository( session.getLocalRepository() );
-        setOffline( session.isOffline() );
-        setForceUpdate( session.getRequest().isUpdateSnapshots() );
-        setTransferListener( session.getRequest().getTransferListener() );
+        setRepositorySession( session.getRepositorySession() );
-            setRemoteRepositories( project.getPluginArtifactRepositories() );
+            setRepositories( project.getRemotePluginRepositories() );
+    /**
+     * Creates a request for the specified plugin using the given repository session and plugin repositories.
+     * 
+     * @param plugin The plugin for which to resolve a version, must not be {@code null}.
+     * @param session The repository session to use, must not be {@code null}.
+     * @param repositories The plugin repositories to query, may be {@code null}.
+     */
+    public DefaultPluginVersionRequest( Plugin plugin, RepositorySystemSession session, List<RemoteRepository> repositories )
+    {
+        setGroupId( plugin.getGroupId() );
+        setArtifactId( plugin.getArtifactId() );
+
+        setRepositorySession( session );
+
+        setRepositories( repositories );
+    }
+
-    public RepositoryCache getCache()
+    public List<RemoteRepository> getRepositories()
-        return repositoryRequest.getCache();
+        return repositories;
-    public DefaultPluginVersionRequest setCache( RepositoryCache cache )
+    public DefaultPluginVersionRequest setRepositories( List<RemoteRepository> repositories )
-        repositoryRequest.setCache( cache );
+        if ( repositories != null )
+        {
+            this.repositories = repositories;
+        }
+        else
+        {
+            this.repositories = Collections.emptyList();
+        }
-    public ArtifactRepository getLocalRepository()
+    public RepositorySystemSession getRepositorySession()
-        return repositoryRequest.getLocalRepository();
+        return session;
-    public DefaultPluginVersionRequest setLocalRepository( ArtifactRepository localRepository )
+    public DefaultPluginVersionRequest setRepositorySession( RepositorySystemSession session )
-        repositoryRequest.setLocalRepository( localRepository );
-
-        return this;
-    }
-
-    public List<ArtifactRepository> getRemoteRepositories()
-    {
-        return repositoryRequest.getRemoteRepositories();
-    }
-
-    public DefaultPluginVersionRequest setRemoteRepositories( List<ArtifactRepository> remoteRepositories )
-    {
-        repositoryRequest.setRemoteRepositories( remoteRepositories );
-
-        return this;
-    }
-
-    public boolean isOffline()
-    {
-        return repositoryRequest.isOffline();
-    }
-
-    public DefaultPluginVersionRequest setOffline( boolean offline )
-    {
-        repositoryRequest.setOffline( offline );
-
-        return this;
-    }
-
-    public boolean isForceUpdate()
-    {
-        return repositoryRequest.isForceUpdate();
-    }
-
-    public DefaultPluginVersionRequest setForceUpdate( boolean forceUpdate )
-    {
-        repositoryRequest.setForceUpdate( forceUpdate );
-
-        return this;
-    }
-
-    public ArtifactTransferListener getTransferListener()
-    {
-        return repositoryRequest.getTransferListener();
-    }
-
-    public DefaultPluginVersionRequest setTransferListener( ArtifactTransferListener transferListener )
-    {
-        repositoryRequest.setTransferListener( transferListener );
+        this.session = session;
