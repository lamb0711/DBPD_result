- allow multiple versions of a plugin to operate concurrently.
- allow specification of a mojo as groupId:artifactId:version:goal
- general removal of more hard coding

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168543 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.StringTokenizer;
-                injectHandlerPluginConfiguration( project, additionalPluginGroupId, additionalPluginArtifactId );
+                injectHandlerPluginConfiguration( project, additionalPluginGroupId, additionalPluginArtifactId, null );
-    private void injectHandlerPluginConfiguration( MavenProject project, String groupId, String artifactId )
+    private void injectHandlerPluginConfiguration( MavenProject project, String groupId, String artifactId,
+                                                   String version )
+            plugin.setVersion( version );
+        String version = plugin.getVersion();
+
+        PluginDescriptor pluginDescriptor;
-            pluginManager.verifyPlugin( groupId, artifactId, session );
+            pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session );
-        PluginDescriptor pluginDescriptor = pluginManager.getPluginDescriptor( groupId, artifactId );
-
-                    throw new LifecycleExecutionException(
-                        "Required phase '" + mojoDescriptor.getPhase() + "' not found" );
+                    String message = "Required phase '" + mojoDescriptor.getPhase() + "' not found";
+                    throw new LifecycleExecutionException( message );
-                phase.getGoals().add( mojoDescriptor.getFullGoalName() );
+                phase.getGoals().add( mojoDescriptor.getId() );
-        MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor( task );
-
-        if ( mojoDescriptor == null )
-        {
-            String groupId = PluginDescriptor.getDefaultPluginGroupId();
-
-            String pluginId = PluginDescriptor.getPrefixFromGoal( task );
-
-            String artifactId = PluginDescriptor.getDefaultPluginArtifactId( pluginId );
-
-            injectHandlerPluginConfiguration( session.getProject(), groupId, artifactId );
-
-            try
-            {
-                pluginManager.verifyPlugin( groupId, artifactId, session );
-            }
-            catch ( PluginManagerException e )
-            {
-                throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
-            }
-
-            mojoDescriptor = pluginManager.getMojoDescriptor( task );
-
-            if ( mojoDescriptor == null )
-            {
-                throw new LifecycleExecutionException( "Required goal not found: " + task );
-            }
-        }
+        MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session );
+    private MojoDescriptor getMojoDescriptor( String task, MavenSession session )
+        throws ArtifactResolutionException, LifecycleExecutionException
+    {
+        String groupId = null;
+        String artifactId = null;
+        String version = null;
+        String goal = null;
+
+        StringTokenizer tok = new StringTokenizer( task, ":" );
+        int numTokens = tok.countTokens();
+        if ( numTokens == 2 )
+        {
+            // TODO: look up registered aliases in plugin manager instead
+            groupId = PluginDescriptor.getDefaultPluginGroupId();
+            artifactId = PluginDescriptor.getDefaultPluginArtifactId( tok.nextToken() );
+            goal = tok.nextToken();
+        }
+        else if ( numTokens == 4 )
+        {
+            groupId = tok.nextToken();
+            artifactId = tok.nextToken();
+            version = tok.nextToken();
+            goal = tok.nextToken();
+        }
+        else
+        {
+            String message = "Invalid task '" + task + "': you must specify a valid lifecycle phase, or" +
+                " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
+            throw new LifecycleExecutionException( message );
+        }
+
+        // TODO: this shouldn't be necessary all the time.
+        injectHandlerPluginConfiguration( session.getProject(), groupId, artifactId, version );
+
+        try
+        {
+            PluginDescriptor pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session );
+            // TODO: should be able to create a Map from this
+            for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext(); )
+            {
+                MojoDescriptor mojoDescriptor = (MojoDescriptor) i.next();
+                if ( mojoDescriptor.getGoal().equals( goal ) )
+                {
+                    return mojoDescriptor;
+                }
+            }
+        }
+        catch ( PluginManagerException e )
+        {
+            throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+        }
+
+        throw new LifecycleExecutionException( "Required goal not found: " + task );
+    }
+
