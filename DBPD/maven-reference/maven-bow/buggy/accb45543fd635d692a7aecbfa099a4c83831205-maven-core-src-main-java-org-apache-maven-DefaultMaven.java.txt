[MNG-4224] maven lifecycle participant
Submitted by: Igor Fedorenko

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@789993 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-                
-        MavenSession session;
+
+        MavenSession session = new MavenSession( container, request, result);
-        Map<String,MavenProject> projects;
+        try
+        {
+            for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants() )
+            {
+                listener.afterSessionStart( session );
+            }
+        }
+        catch ( MavenExecutionException e )
+        {
+            return processResult( result, e );
+        }
+        List<MavenProject> projects;
-                projects.put( ArtifactUtils.key( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
+                projects.add( project );
-        
+
+        session.setProjects( projects );
+
+        try
+        {
+            for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants() )
+            {
+                listener.afterProjectsRead( session );
+            }
+        }
+        catch ( MavenExecutionException e )
+        {
+            return processResult( result, e );
+        }
+
-            ProjectSorter projectSorter = new ProjectSorter( projects.values() );
-                                    
-            session = new MavenSession( container, request, result, projectSorter.getSortedProjects() );            
+            ProjectSorter projectSorter = new ProjectSorter( session.getProjects() );
+
+            projects = projectSorter.getSortedProjects();
+
+            session.setProjects( projects );
-       
+
-                
-        delegatingLocalArtifactRepository.setBuildReactor( new ReactorArtifactRepository( projects ) );
+        try
+        {
+            delegatingLocalArtifactRepository.setBuildReactor( new ReactorArtifactRepository( getProjectMap( session.getProjects() ) ) );
+        }
+        catch ( MavenExecutionException e )
+        {
+            return processResult( result, e );
+        }
+    private List<AbstractMavenLifecycleParticipant> getLifecycleParticipants()
+    {
+        // TODO injection of component lists does not work
+        List<AbstractMavenLifecycleParticipant> lifecycleListeners;
+        try
+        {
+            lifecycleListeners = container.lookupList( AbstractMavenLifecycleParticipant.class );
+        }
+        catch ( ComponentLookupException e1 )
+        {
+            // this is just silly, lookupList should return an empty list!
+            lifecycleListeners = new ArrayList<AbstractMavenLifecycleParticipant>();
+        }
+        return lifecycleListeners;
+    }
+
-    protected Map<String,MavenProject> getProjectsForMavenReactor( MavenExecutionRequest request )
+    private List<MavenProject> getProjectsForMavenReactor( MavenExecutionRequest request )
-            return new HashMap<String,MavenProject>();
+            return new ArrayList<MavenProject>();
+        return projects;
+    }
+
+    private Map<String, MavenProject> getProjectMap( List<MavenProject> projects )
+        throws org.apache.maven.DuplicateProjectException
+    {
