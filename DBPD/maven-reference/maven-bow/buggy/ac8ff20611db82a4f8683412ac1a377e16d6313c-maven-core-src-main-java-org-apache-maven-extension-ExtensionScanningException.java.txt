Adding project-level ClassRealm, which serves as a nexus for extensions. Extensions are loaded into separate ClassRealm instances, then scanned for components. These ComponentDescriptors are then used to add an import from the extension realm back to the project-session realm, and then the descriptor is added to the container with the project realm as its RealmId. From here, the registerWagons() method has been changed to use the map of projectSessions, and iterates through each project-level realm, setting the lookup-realm, then calling findAndRegisterWagons(..) for each. Also, the plugin manager has been changed to use the project-realm for loading plugins if it exists (the plugin realm becomes a child of the project realm, which should allow plugins to vary by project within a single reactor, though I haven't tested that yet).

Also, shading the embedder to hide the jdom classes, and adjusting the assembly appropriately.

Final thing: I'm rolling back some changes I accidentally made to the CLIManager the other day, which breaks the release plugin because the long options were removed for some reason (save action in Eclipse; don't ask).


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@585012 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Extension;
+import org.apache.maven.model.Model;
+import org.apache.maven.project.ProjectBuildingException;
+import org.apache.maven.project.interpolation.ModelInterpolationException;
+
+import java.io.File;
+import java.io.IOException;
+
-    public ExtensionScanningException( String message, Throwable cause )
+    private File pomFile;
+    private String extensionId;
+    private String modelId;
+    private String moduleSubpath;
+
+    public ExtensionScanningException( String message,
+                                       File pomFile,
+                                       ProjectBuildingException cause )
+    {
+        super( message, cause );
+        this.pomFile = pomFile;
+    }
+
+    public ExtensionScanningException( String message,
+                                       Model model,
+                                       Extension extension,
+                                       ExtensionManagerException cause )
+    {
+        super( message, cause );
+        modelId = model.getId();
+        extensionId = extension.getGroupId() + ":" + extension.getArtifactId();
+    }
+
+    public ExtensionScanningException( String message,
+                                       ProjectBuildingException cause )
-    public ExtensionScanningException( String message )
+    public ExtensionScanningException( String message,
+                                       File pomFile,
+                                       String moduleSubpath,
+                                       IOException cause )
-        super( message );
+        super( message, cause );
+        this.pomFile = pomFile;
+        this.moduleSubpath = moduleSubpath;
+    }
+
+    public ExtensionScanningException( String message,
+                                       File pomFile,
+                                       ModelInterpolationException cause )
+    {
+        super( message, cause );
+        this.pomFile = pomFile;
+    }
+
+    public File getPomFile()
+    {
+        return pomFile;
+    }
+
+    public String getExtensionId()
+    {
+        return extensionId;
+    }
+
+    public String getModelId()
+    {
+        return modelId;
+    }
+
+    public String getModuleSubpath()
+    {
+        return moduleSubpath;
