declare the desired "prefix" inside the plugin descriptor instead of pulling apart the artifact ID (though that is how the default is created).
Currently, the reverse is not handled in anyway, so a non-default prefix may not work, but this makes the code easier to isolate.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168099 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.codehaus.plexus.util.IOUtil;
+import java.io.IOException;
-    public void execute( String destinationDirectory, Set mavenMojoDescriptors, MavenProject project )
-        throws Exception
+    public void execute( String destinationDirectory, Set mavenMojoDescriptors, MavenProject project,
+                         String goalPrefix )
+        throws IOException
-        FileWriter writer = new FileWriter( f );
-
-        XMLWriter w = new PrettyPrintXMLWriter( writer );
-
-        w.startElement( "plugin" );
-
-        element( w, "groupId", project.getGroupId() );
-
-        element( w, "artifactId", project.getArtifactId() );
-
-        element( w, "isolatedRealm", "true" );
-
-        w.startElement( "mojos" );
-
-        for ( Iterator it = mavenMojoDescriptors.iterator(); it.hasNext(); )
+        FileWriter writer = null;
+        try
-            MojoDescriptor descriptor = (MojoDescriptor) it.next();
-            processPluginDescriptor( descriptor, w, project );
+            writer = new FileWriter( f );
+
+            XMLWriter w = new PrettyPrintXMLWriter( writer );
+
+            w.startElement( "plugin" );
+
+            element( w, "groupId", project.getGroupId() );
+
+            element( w, "artifactId", project.getArtifactId() );
+
+            element( w, "goalPrefix", goalPrefix );
+
+            element( w, "isolatedRealm", "true" );
+
+            w.startElement( "mojos" );
+
+            for ( Iterator it = mavenMojoDescriptors.iterator(); it.hasNext(); )
+            {
+                MojoDescriptor descriptor = (MojoDescriptor) it.next();
+                processPluginDescriptor( descriptor, w, project );
+            }
+
+            w.endElement();
+
+            PluginUtils.writeDependencies( w, project );
+
+            w.endElement();
+
+            writer.flush();
-
-        w.endElement();
-
-        PluginUtils.writeDependencies( w, project );
-
-        w.endElement();
-
-        writer.flush();
-
-        writer.close();
+        finally
+        {
+            IOUtil.close( writer );
+        }
-        throws Exception
-        w.startElement( "id" );
-
-        w.writeText( mojoDescriptor.getId() + ":" + mojoDescriptor.getGoal() );
-
-        w.endElement();
-
-            if ( StringUtils.isNotEmpty( expression )
-                && ( expression.startsWith( "${component." ) || expression.startsWith( "#component." ) ) )
+            if ( StringUtils.isNotEmpty( expression ) &&
+                ( expression.startsWith( "${component." ) || expression.startsWith( "#component." ) ) )
-                String type = convertType( parameter.getType() );
+                String type = parameter.getType();
-    /**
-     * @param type
-     * @return
-     * @deprecated - should force proper class specification
-     */
-    private static String convertType( String type )
-    {
-        if ( "String".equals( type ) )
-        {
-            return "java.lang.String";
-        }
-        else if ( "File".equals( type ) )
-        {
-            return "java.io.File";
-        }
-        else if ( "List".equals( type ) )
-        {
-            return "java.util.List";
-        }
-        else if ( "".equals( type ) )
-        {
-            return null;
-        }
-        else
-        {
-            return type;
-        }
-    }
-
