o fix for testitMNG4091_InvalidDescriptor(org.apache.maven.it.MavenITmng4091BadPluginDescriptorTest)


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@777230 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.InvalidPluginDescriptorException;
-    
+        
-        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, NoPluginFoundForPrefixException
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException
-    {
-        
+    {        
-        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, NoPluginFoundForPrefixException
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException
-
+    
+    private void populateDefaultConfigurationForPlugin( Plugin plugin, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories ) 
+        throws LifecycleExecutionException
+    {
+        for( PluginExecution pluginExecution : plugin.getExecutions() )
+        {
+            for( String goal : pluginExecution.getGoals() )
+            {
+                Xpp3Dom dom = getDefaultPluginConfiguration( plugin.getGroupId(), plugin.getArtifactId(), plugin.getVersion(), goal, localRepository, remoteRepositories );
+                pluginExecution.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) pluginExecution.getConfiguration(), dom, Boolean.TRUE ) );
+            }
+        }
+    }
+    
-        for( Plugin p : plugins )
+        for( Plugin plugin : plugins )
-            for( PluginExecution e : p.getExecutions() )
-            {
-                for( String goal : e.getGoals() )
-                {
-                    Xpp3Dom dom = getDefaultPluginConfiguration( p.getGroupId(), p.getArtifactId(), p.getVersion(), goal, localRepository, remoteRepositories );
-                    e.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) e.getConfiguration(), dom, Boolean.TRUE ) );
-                }
-            }
+            populateDefaultConfigurationForPlugin( plugin, localRepository, remoteRepositories );
+        }
+        catch ( InvalidPluginDescriptorException e )
+        {
+            throw new LifecycleExecutionException( "Error getting default plugin information: ", e );
