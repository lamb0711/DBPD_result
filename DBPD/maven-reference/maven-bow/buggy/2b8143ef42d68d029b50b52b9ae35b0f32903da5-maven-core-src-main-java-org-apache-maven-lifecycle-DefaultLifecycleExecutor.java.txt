Resolving: MNG-250



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@226334 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.monitor.event.EventDispatcher;
+import org.apache.maven.monitor.event.MavenEvents;
-import org.apache.maven.plugin.mapping.MavenPluginMappingBuilder;
-    private MavenPluginMappingBuilder pluginMappingBuilder;
-
-    public MavenExecutionResponse execute( List tasks, MavenSession session, MavenProject project )
+    public MavenExecutionResponse execute( MavenSession session, MavenProject project, EventDispatcher dispatcher )
+        List taskSegments = segmentTaskListByAggregationNeeds( session.getGoals(), session, project );
+        
-            for ( Iterator i = tasks.iterator(); i.hasNext(); )
-            {
-                String task = (String) i.next();
-                executeGoal( task, session, project );
-            }
+            executeTaskSegments( taskSegments, session, project, dispatcher );
+    private void executeTaskSegments( List taskSegments, MavenSession session, MavenProject project,
+                                     EventDispatcher dispatcher )
+        throws PluginNotFoundException, MojoExecutionException, ArtifactResolutionException,
+        LifecycleExecutionException
+    {
+        for ( Iterator it = taskSegments.iterator(); it.hasNext(); )
+        {
+            TaskSegment segment = (TaskSegment) it.next();
+            
+            if ( segment.aggregate() )
+            {
+                line();
+
+                getLogger().info( "Building " + project.getName() );
+                
+                getLogger().info( "  " + segment );
+
+                line();
+
+                // !! This is ripe for refactoring to an aspect.
+                // Event monitoring.
+                String event = MavenEvents.PROJECT_EXECUTION;
+
+                dispatcher.dispatchStart( event, project.getId() + " ( " + segment + " )" );
+
+                try
+                {
+                    // only call once, with the top-level project (assumed to be provided as a parameter)...
+                    for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
+                    {
+                        String task = (String) goalIterator.next();
+
+                        executeGoal( task, session, project );
+                    }
+                    
+                    dispatcher.dispatchEnd( event, project.getId() + " ( " + segment + " )" );
+                }
+                catch ( LifecycleExecutionException e )
+                {
+                    dispatcher.dispatchError( event, project.getId() + " ( " + segment + " )", e );
+                    
+                    throw e;
+                }
+            }
+            else
+            {
+                List sortedProjects = session.getSortedProjects();
+                
+                // iterate over projects, and execute on each...
+                for ( Iterator projectIterator = sortedProjects.iterator(); projectIterator.hasNext(); )
+                {
+                    MavenProject currentProject = (MavenProject) projectIterator.next();
+                    
+                    line();
+
+                    getLogger().info( "Building " + currentProject.getName() );
+                    
+                    getLogger().info( "  " + segment );
+
+                    line();
+
+                    // !! This is ripe for refactoring to an aspect.
+                    // Event monitoring.
+                    String event = MavenEvents.PROJECT_EXECUTION;
+
+                    dispatcher.dispatchStart( event, currentProject.getId() + " ( " + segment + " )" );
+
+                    try
+                    {
+                        for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
+                        {
+                            String task = (String) goalIterator.next();
+
+                            executeGoal( task, session, currentProject );
+                        }
+                        
+                        dispatcher.dispatchEnd( event, currentProject.getId() + " ( " + segment + " )" );
+                    }
+                    catch ( LifecycleExecutionException e )
+                    {
+                        dispatcher.dispatchError( event, currentProject.getId() + " ( " + segment + " )", e );
+                        
+                        throw e;
+                    }
+                }
+            }
+        }
+    }
+
+    private List segmentTaskListByAggregationNeeds( List tasks, MavenSession session, MavenProject project ) 
+        throws LifecycleExecutionException
+    {
+        List segments = new ArrayList();
+        
+        TaskSegment currentSegment = null;
+        for ( Iterator it = tasks.iterator(); it.hasNext(); )
+        {
+            String task = (String) it.next();
+            
+            // if it's a phase, then we don't need to check whether it's an aggregator.
+            // simply add it to the current task partition.
+            if ( phases.contains( task ) )
+            {
+                if ( currentSegment != null && currentSegment.aggregate() )
+                {
+                    segments.add( currentSegment );
+                    currentSegment = null;
+                }
+                
+                if ( currentSegment == null )
+                {
+                    currentSegment = new TaskSegment();
+                }
+                
+                currentSegment.add( task );
+            }
+            else
+            {
+                MojoDescriptor mojo = null;
+                try
+                {
+                    mojo = getMojoDescriptor( task, session, project );
+                }
+                catch ( LifecycleExecutionException e )
+                {
+                    getLogger().info( "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator." );
+                    getLogger().debug( "", e );
+                }
+                catch ( ArtifactResolutionException e )
+                {
+                    getLogger().info( "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator." );
+                    getLogger().debug( "", e );
+                }
+                
+                if ( mojo != null && mojo.isAggregator() )
+                {
+                    if ( currentSegment != null && !currentSegment.aggregate() )
+                    {
+                        segments.add( currentSegment );
+                        currentSegment = null;
+                    }
+                    
+                    if ( currentSegment == null )
+                    {
+                        currentSegment = new TaskSegment( true );
+                    }
+                    
+                    currentSegment.add( task );
+                }
+                else
+                {
+                    if ( currentSegment != null && currentSegment.aggregate() )
+                    {
+                        segments.add( currentSegment );
+                        currentSegment = null;
+                    }
+                    
+                    if ( currentSegment == null )
+                    {
+                        currentSegment = new TaskSegment();
+                    }
+                    
+                    currentSegment.add( task );
+                }
+            }
+        }
+        
+        segments.add( currentSegment );
+        
+        return segments;
+    }
+
+    
+    protected void line()
+    {
+        getLogger().info( "----------------------------------------------------------------------------" );
+    }
+
+    private static class TaskSegment
+    {
+        private boolean aggregate = false;
+        private List tasks = new ArrayList();
+        
+        TaskSegment()
+        {
+            
+        }
+        
+        TaskSegment( boolean aggregate )
+        {
+            this.aggregate = aggregate;
+        }
+        
+        public String toString()
+        {
+            StringBuffer message = new StringBuffer();
+            
+            message.append( " task-segment: [" );
+            
+            for ( Iterator it = tasks.iterator(); it.hasNext(); )
+            {
+                String task = (String) it.next();
+                
+                message.append( task );
+                
+                if ( it.hasNext() )
+                {
+                    message.append( ", ");
+                }
+            }
+            
+            message.append( "]" );
+            
+            if ( aggregate )
+            {
+                message.append( " (aggregator-style)" );
+            }
+            
+            return message.toString();
+        }
+
+        boolean aggregate()
+        {
+            return aggregate;
+        }
+        
+        void add( String task )
+        {
+            tasks.add( task );
+        }
+        
+        List getTasks()
+        {
+            return tasks;
+        }
+    }
