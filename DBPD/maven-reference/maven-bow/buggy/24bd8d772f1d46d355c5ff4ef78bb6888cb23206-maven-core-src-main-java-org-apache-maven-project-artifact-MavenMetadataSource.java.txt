o Introduced RepositoryRequest to hold the bare minimum of items required for repo accesses
o Added cache for metadata.xml

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@803059 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.RepositoryRequest;
+import org.apache.maven.repository.legacy.metadata.DefaultMetadataResolutionRequest;
-    public ResolutionGroup retrieve( MetadataResolutionRequest request )
-        throws ArtifactMetadataRetrievalException
-    {
-        return retrieve( request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories(),
-                         request.isResolveManagedVersions() );
-    }
-
+        MetadataResolutionRequest request = new DefaultMetadataResolutionRequest();
+        request.setArtifact( artifact );
+        request.setLocalRepository( localRepository );
+        request.setRemoteRepositories( remoteRepositories );
+        request.setResolveManagedVersions( resolveManagedVersions );
+        return retrieve( request );
+    }
+
+    public ResolutionGroup retrieve( MetadataResolutionRequest request )
+        throws ArtifactMetadataRetrievalException
+    {
+        Artifact artifact = request.getArtifact();
+
-        
-        ResolutionGroup cached = cache.get( artifact, resolveManagedVersions, localRepository, remoteRepositories );
+
+        ResolutionGroup cached =
+            cache.get( artifact, request.isResolveManagedVersions(), request.getLocalRepository(),
+                       request.getRemoteRepositories() );
-            ProjectRelocation rel = retrieveRelocatedProject( artifact, localRepository, remoteRepositories );
+            ProjectRelocation rel = retrieveRelocatedProject( artifact, request );
-        if ( managedDependencies != null && resolveManagedVersions )
+        if ( managedDependencies != null && request.isResolveManagedVersions() )
-            new ResolutionGroup( pomArtifact, relocatedArtifact, artifacts, managedVersions, remoteRepositories );
+            new ResolutionGroup( pomArtifact, relocatedArtifact, artifacts, managedVersions, request.getRemoteRepositories() );
-        cache.put( artifact, resolveManagedVersions, localRepository, remoteRepositories, result );
+        cache.put( artifact, request.isResolveManagedVersions(), request.getLocalRepository(),
+                   request.getRemoteRepositories(), result );
-        RepositoryMetadata metadata = new ArtifactRepositoryMetadata( artifact );
+        MetadataResolutionRequest request = new DefaultMetadataResolutionRequest();
+        request.setArtifact( artifact );
+        request.setLocalRepository( localRepository );
+        request.setRemoteRepositories( remoteRepositories );
+        return retrieveAvailableVersions( request );
+    }
+
+    public List<ArtifactVersion> retrieveAvailableVersions( MetadataResolutionRequest request )
+        throws ArtifactMetadataRetrievalException
+    {
+        RepositoryMetadata metadata = new ArtifactRepositoryMetadata( request.getArtifact() );
-            repositoryMetadataManager.resolve( metadata, remoteRepositories, localRepository );
+            repositoryMetadataManager.resolve( metadata, request );
-            throw new ArtifactMetadataRetrievalException( e.getMessage(), e, artifact );
+            throw new ArtifactMetadataRetrievalException( e.getMessage(), e, request.getArtifact() );
-    private ProjectRelocation retrieveRelocatedProject( Artifact artifact, ArtifactRepository localRepository,
-                                                        List<ArtifactRepository> remoteRepositories )
+    private ProjectRelocation retrieveRelocatedProject( Artifact artifact, RepositoryRequest repositoryRequest )
-                    configuration.setLocalRepository( localRepository );
-                    configuration.setRemoteRepositories( remoteRepositories );
+                    configuration.setRepositoryCache( repositoryRequest.getCache() );
+                    configuration.setLocalRepository( repositoryRequest.getLocalRepository() );
+                    configuration.setRemoteRepositories( repositoryRequest.getRemoteRepositories() );
-                            available =
-                                retrieveAvailableVersions( relocatedArtifact, localRepository, remoteRepositories );
+                            MetadataResolutionRequest metadataRequest =
+                                new DefaultMetadataResolutionRequest( repositoryRequest );
+                            metadataRequest.setArtifact( relocatedArtifact );
+                            available = retrieveAvailableVersions( metadataRequest );
