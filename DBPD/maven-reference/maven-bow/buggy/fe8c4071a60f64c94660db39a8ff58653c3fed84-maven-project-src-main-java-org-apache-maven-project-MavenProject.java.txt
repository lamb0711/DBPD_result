Switching back to selectively import extensions into a project-specific ClassRealm, except this time extension realms will be shared (the origin of the aforementioned imports) to conserve memory tied up by classloading. Similarly, plugin realms are managed using a key produced from g:a:v of the plugin, plus the hashcode of all g:a:v of the plugin-level dependencies aggregated into one string, to distinguish the deploy plugin 2.0 with no deps from the deploy plugin 2.0 with a plugin-level dep on wagon-webdav. Plugin realms have their parent realms managed by the pluginManager now prior to lookup or execution of the mojo instance, and PluginDescriptor.(classRealm|artifacts) attributes are set for each execution. Likewise, the MavenPluginCollector now tracks plugin descriptors with their version information included, instead of just using g:a.

Had to bump the plexus-container-default version up to alpha-36 to fix a problem in ClassicSingletonComponentManager. All realms for extensions, plugins, and projects (which contain only imports from extensions) are now managed by the MavenRealmManager.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@591391 13f79535-47bb-0310-9956-ffa450edef68

-    
+
-    
+
-    
+
-    
+
-    
+
-        
+
-        
+
-        this.file = project.file;
+        file = project.file;
-            this.dependencyArtifacts = Collections.unmodifiableSet( project.dependencyArtifacts );
+            dependencyArtifacts = Collections.unmodifiableSet( project.dependencyArtifacts );
-        
+
-            this.artifacts = Collections.unmodifiableSet( project.artifacts );
+            artifacts = Collections.unmodifiableSet( project.artifacts );
-        
+
-            this.pluginArtifacts = Collections.unmodifiableSet( project.pluginArtifacts );
+            pluginArtifacts = Collections.unmodifiableSet( project.pluginArtifacts );
-        
+
-            this.reportArtifacts = Collections.unmodifiableSet( project.reportArtifacts );
-        }        
-        
+            reportArtifacts = Collections.unmodifiableSet( project.reportArtifacts );
+        }
+
-            this.extensionArtifacts = Collections.unmodifiableSet( project.extensionArtifacts );
-        }        
-        
-        this.parentArtifact = project.parentArtifact;
+            extensionArtifacts = Collections.unmodifiableSet( project.extensionArtifacts );
+        }
+
+        parentArtifact = project.parentArtifact;
-            this.remoteArtifactRepositories = Collections.unmodifiableList( project.remoteArtifactRepositories );
-        }        
-        
+            remoteArtifactRepositories = Collections.unmodifiableList( project.remoteArtifactRepositories );
+        }
+
-            this.pluginArtifactRepositories = Collections.unmodifiableList( project.pluginArtifactRepositories );
-        }        
-        
+            pluginArtifactRepositories = Collections.unmodifiableList( project.pluginArtifactRepositories );
+        }
+
-            this.collectedProjects = Collections.unmodifiableList( project.collectedProjects );
-        }        
-        
+            collectedProjects = Collections.unmodifiableList( project.collectedProjects );
+        }
+
-            this.activeProfiles = Collections.unmodifiableList( project.activeProfiles );
-        }        
-        
+            activeProfiles = Collections.unmodifiableList( project.activeProfiles );
+        }
+
-            this.attachedArtifacts = new ArrayList( project.getAttachedArtifacts() );
-        }        
-        
+            attachedArtifacts = new ArrayList( project.getAttachedArtifacts() );
+        }
+
-            this.compileSourceRoots = new ArrayList( project.compileSourceRoots );
-        }        
-        
+            compileSourceRoots = new ArrayList( project.compileSourceRoots );
+        }
+
-            this.testCompileSourceRoots = new ArrayList( project.testCompileSourceRoots );
-        }        
-        
+            testCompileSourceRoots = new ArrayList( project.testCompileSourceRoots );
+        }
+
-            this.scriptSourceRoots = new ArrayList( project.scriptSourceRoots );
-        }        
-        
-        this.model = ModelUtils.cloneModel( project.model );
+            scriptSourceRoots = new ArrayList( project.scriptSourceRoots );
+        }
+
+        model = ModelUtils.cloneModel( project.model );
-            this.originalModel = ModelUtils.cloneModel( project.originalModel );
+            originalModel = ModelUtils.cloneModel( project.originalModel );
-        this.executionRoot = project.executionRoot;
+        executionRoot = project.executionRoot;
-            this.artifact = ArtifactUtils.copyArtifact( project.artifact );
+            artifact = ArtifactUtils.copyArtifact( project.artifact );
-        
+
-        
+
-        
+
-    
+
-        
+
-        
+
-            
+
-        
+
-            
+
-                    
+
-                    
+
-                    
+
-                    
+
-                    
+
-        
+
-        if ( artifacts == null || artifacts.isEmpty() )
+        if ( ( artifacts == null ) || artifacts.isEmpty() )
-        
+
-        if ( artifacts == null || artifacts.isEmpty() )
+        if ( ( artifacts == null ) || artifacts.isEmpty() )
-        if ( artifacts == null || artifacts.isEmpty() )
+        if ( ( artifacts == null ) || artifacts.isEmpty() )
-        if ( artifacts == null || artifacts.isEmpty() )
+        if ( ( artifacts == null ) || artifacts.isEmpty() )
-        
-        if ( groupId == null && model.getParent() != null )
+
+        if ( ( groupId == null ) && ( model.getParent() != null ) )
-        
+
-        
-        if ( version == null && model.getParent() != null )
+
+        if ( ( version == null ) && ( model.getParent() != null ) )
-        
+
-        this.buildOverlay = new BuildOverlay( build );
+        buildOverlay = new BuildOverlay( build );
-        this.artifactMap = null;
+        artifactMap = null;
-     * eg. if only compile phase has run, dependencies with scope test won't be included. 
+     * eg. if only compile phase has run, dependencies with scope test won't be included.
-        this.pluginArtifactMap = null;
+        pluginArtifactMap = null;
-        this.reportArtifactMap = null;
+        reportArtifactMap = null;
-        this.extensionArtifactMap = null;
+        extensionArtifactMap = null;
-        return this.extensionArtifacts;
+        return extensionArtifacts;
-    
+
-        
+
-    
+
-            if ( pmByKey != null && pmByKey.containsKey( pluginKey ) )
+            if ( ( pmByKey != null ) && pmByKey.containsKey( pluginKey ) )
-        return getArtifact().isSnapshot() && snapshotArtifactRepository != null ? snapshotArtifactRepository
+        return getArtifact().isSnapshot() && ( snapshotArtifactRepository != null ) ? snapshotArtifactRepository
-        
+
-    
+
-        this.managedVersionMap = map;
+        managedVersionMap = map;
-    
+
-        return this.managedVersionMap;
+        return managedVersionMap;
-        if ( build == null || build.getExtensions() == null )
+        if ( ( build == null ) || ( build.getExtensions() == null ) )
-        if ( getProjectReferences() != null && !getProjectReferences().isEmpty() )
+        if ( ( getProjectReferences() != null ) && !getProjectReferences().isEmpty() )
-            if ( ref != null && ref.getArtifact() != null )
+            if ( ( ref != null ) && ( ref.getArtifact() != null ) )
-                    if ( ref.getArtifact().getFile() != null && ref.getArtifact().getFile().exists() )
+                    if ( ( ref.getArtifact().getFile() != null ) && ref.getArtifact().getFile().exists() )
-                    ( ref.getArtifact().getFile() != null && ref.getArtifact().getFile().exists() ) )
+                    ( ( ref.getArtifact().getFile() != null ) && ref.getArtifact().getFile().exists() ) )
-    
+
-        
+
-	
+
+
+    public Plugin getPlugin( String pluginKey )
+    {
+        return (Plugin) getBuild().getPluginsAsMap().get( pluginKey );
+    }
