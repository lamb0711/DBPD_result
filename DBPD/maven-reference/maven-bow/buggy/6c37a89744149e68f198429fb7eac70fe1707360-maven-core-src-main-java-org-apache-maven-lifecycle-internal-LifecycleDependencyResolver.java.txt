[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *  http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under                    
+ * the License.
-import org.apache.maven.ProjectDependenciesResolver;
+import org.apache.maven.RepositoryUtils;
-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.artifact.resolver.MultipleArtifactsNotFoundException;
+import org.apache.maven.project.DefaultDependencyResolutionRequest;
+import org.apache.maven.project.DependencyResolutionException;
+import org.apache.maven.project.DependencyResolutionResult;
+import org.apache.maven.project.ProjectDependenciesResolver;
+import org.sonatype.aether.graph.Dependency;
+import org.sonatype.aether.graph.DependencyFilter;
+import org.sonatype.aether.graph.DependencyNode;
+import org.sonatype.aether.util.filter.AndDependencyFilter;
+import org.sonatype.aether.util.filter.ScopeDependencyFilter;
-@Component( role = LifecycleDependencyResolver.class )
+@Component(role = LifecycleDependencyResolver.class)
+
-    private ProjectDependenciesResolver projectDependenciesResolver;
+    private ProjectDependenciesResolver dependenciesResolver;
-    @SuppressWarnings( { "UnusedDeclaration" } )
+    @SuppressWarnings({"UnusedDeclaration"})
-        this.projectDependenciesResolver = projectDependenciesResolver;
+        this.dependenciesResolver = projectDependenciesResolver;
-            getProjectDependencies( project, scopesToCollect, scopesToResolve, session, aggregating,
-                                    projectArtifacts );
+            getDependencies( project, scopesToCollect, scopesToResolve, session, aggregating, projectArtifacts );
+
+        Map<String, Artifact> map = new HashMap<String, Artifact>();
+        for ( Artifact artifact : artifacts )
+        {
+            map.put( artifact.getId(), artifact );
+        }
+        for ( Artifact artifact : project.getDependencyArtifacts() )
+        {
+            if ( artifact.getFile() == null )
+            {
+                Artifact resolved = map.get( artifact.getId() );
+                if ( resolved != null )
+                {
+                    artifact.setFile( resolved.getFile() );
+                    artifact.setDependencyTrail( resolved.getDependencyTrail() );
+                    artifact.setResolvedVersion( resolved.getVersion() );
+                    artifact.setResolved( true );
+                }
+            }
+        }
-    private Set<Artifact> getProjectDependencies( MavenProject project, Collection<String> scopesToCollect,
-                                                  Collection<String> scopesToResolve, MavenSession session,
-                                                  boolean aggregating, Set<Artifact> projectArtifacts )
+    private Set<Artifact> getDependencies( MavenProject project, Collection<String> scopesToCollect,
+                                           Collection<String> scopesToResolve, MavenSession session,
+                                           boolean aggregating, Set<Artifact> projectArtifacts )
-        Set<Artifact> artifacts;
+        if ( scopesToCollect == null )
+        {
+            scopesToCollect = Collections.emptySet();
+        }
+        if ( scopesToResolve == null )
+        {
+            scopesToResolve = Collections.emptySet();
+        }
+
+        if ( scopesToCollect.isEmpty() && scopesToResolve.isEmpty() )
+        {
+            return new LinkedHashSet<Artifact>();
+        }
+
+        scopesToCollect = new HashSet<String>( scopesToCollect );
+        scopesToCollect.addAll( scopesToResolve );
+
+        DependencyFilter collectionFilter = new ScopeDependencyFilter( null, negate( scopesToCollect ) );
+        DependencyFilter resolutionFilter = new ScopeDependencyFilter( null, negate( scopesToResolve ) );
+        resolutionFilter = AndDependencyFilter.newInstance( collectionFilter, resolutionFilter );
+        resolutionFilter =
+            AndDependencyFilter.newInstance( resolutionFilter, new ReactorDependencyFilter( projectArtifacts ) );
+
+        DependencyResolutionResult result;
-            try
+            DefaultDependencyResolutionRequest request =
+                new DefaultDependencyResolutionRequest( project, session.getRepositorySession() );
+            request.setResolutionFilter( resolutionFilter );
+
+            result = dependenciesResolver.resolve( request );
+        }
+        catch ( DependencyResolutionException e )
+        {
+            result = e.getResult();
+
+            /*
+             * MNG-2277, the check below compensates for our bad plugin support where we ended up with aggregator
+             * plugins that require dependency resolution although they usually run in phases of the build where project
+             * artifacts haven't been assembled yet. The prime example of this is "mvn release:prepare".
+             */
+            if ( aggregating && areAllDependenciesInReactor( session.getProjects(), result.getUnresolvedDependencies() ) )
-                artifacts = projectDependenciesResolver.resolve( project , scopesToCollect,
-                                                                 scopesToResolve, session, projectArtifacts );
+                logger.warn( "The following dependencies could not be resolved at this point of the build"
+                    + " but seem to be part of the reactor:" );
+
+                for ( Dependency dependency : result.getUnresolvedDependencies() )
+                {
+                    logger.warn( "o " + dependency );
+                }
+
+                logger.warn( "Try running the build up to the lifecycle phase \"package\"" );
-            catch ( MultipleArtifactsNotFoundException e )
+            else
-                /*
-                * MNG-2277, the check below compensates for our bad plugin support where we ended up with aggregator
-                * plugins that require dependency resolution although they usually run in phases of the build where
-                * project artifacts haven't been assembled yet. The prime example of this is "mvn release:prepare".
-                */
-                artifacts = handleException( session, aggregating, e );
+                throw new LifecycleExecutionException( null, project, e );
-
-            return artifacts;
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new LifecycleExecutionException( null, project, e );
-        }
-        catch ( ArtifactNotFoundException e )
-        {
-            throw new LifecycleExecutionException( null, project, e );
-    }
-
-
-    private Set<Artifact> handleException( MavenSession session, boolean aggregating,
-                                           MultipleArtifactsNotFoundException e )
-        throws MultipleArtifactsNotFoundException
-    {
-        Set<Artifact> artifacts;
-        /*
-        * MNG-2277, the check below compensates for our bad plugin support where we ended up with aggregator
-        * plugins that require dependency resolution although they usually run in phases of the build where project
-        * artifacts haven't been assembled yet. The prime example of this is "mvn release:prepare".
-        */
-        if ( aggregating && areAllArtifactsInReactor( session.getProjects(), e.getMissingArtifacts() ) )
+        Set<Artifact> artifacts = new LinkedHashSet<Artifact>();
+        if ( result.getDependencyGraph() != null && !result.getDependencyGraph().getChildren().isEmpty() )
-            logger.warn( "The following artifacts could not be resolved at this point of the build"
-                + " but seem to be part of the reactor:" );
-
-            for ( Artifact artifact : e.getMissingArtifacts() )
-            {
-                logger.warn( "o " + artifact.getId() );
-            }
-
-            logger.warn( "Try running the build up to the lifecycle phase \"package\"" );
-
-            artifacts = new LinkedHashSet<Artifact>( e.getResolvedArtifacts() );
-        }
-        else
-        {
-            throw e;
+            RepositoryUtils.toArtifacts( artifacts, result.getDependencyGraph().getChildren(),
+                                         Collections.singletonList( project.getArtifact().getId() ), collectionFilter );
-    private boolean areAllArtifactsInReactor( Collection<MavenProject> projects, Collection<Artifact> artifacts )
+    private boolean areAllDependenciesInReactor( Collection<MavenProject> projects, Collection<Dependency> dependencies )
-        for ( Artifact artifact : artifacts )
+        for ( Dependency dependency : dependencies )
-            String key = ArtifactUtils.key( artifact );
+            org.sonatype.aether.artifact.Artifact a = dependency.getArtifact();
+            String key = ArtifactUtils.key( a.getGroupId(), a.getArtifactId(), a.getVersion() );
+    private Collection<String> negate( Collection<String> scopes )
+    {
+        Collection<String> result = new HashSet<String>();
+        Collections.addAll( result, "system", "compile", "provided", "runtime", "test" );
+
+        for ( String scope : scopes )
+        {
+            if ( "compile".equals( scope ) )
+            {
+                result.remove( "compile" );
+                result.remove( "system" );
+                result.remove( "provided" );
+            }
+            else if ( "runtime".equals( scope ) )
+            {
+                result.remove( "compile" );
+                result.remove( "runtime" );
+            }
+            else if ( "compile+runtime".equals( scope ) )
+            {
+                result.remove( "compile" );
+                result.remove( "system" );
+                result.remove( "provided" );
+                result.remove( "runtime" );
+            }
+            else if ( "runtime+system".equals( scope ) )
+            {
+                result.remove( "compile" );
+                result.remove( "system" );
+                result.remove( "runtime" );
+            }
+            else if ( "test".equals( scope ) )
+            {
+                result.clear();
+            }
+        }
+
+        return result;
+    }
+
+    private static class ReactorDependencyFilter
+        implements DependencyFilter
+    {
+
+        private Set<String> keys = new HashSet<String>();
+
+        public ReactorDependencyFilter( Collection<Artifact> artifacts )
+        {
+            for ( Artifact artifact : artifacts )
+            {
+                String key = ArtifactUtils.key( artifact );
+                keys.add( key );
+            }
+        }
+
+        public boolean accept( DependencyNode node, List<DependencyNode> parents )
+        {
+            Dependency dependency = node.getDependency();
+            if ( dependency != null )
+            {
+                org.sonatype.aether.artifact.Artifact a = dependency.getArtifact();
+                String key = ArtifactUtils.key( a.getGroupId(), a.getArtifactId(), a.getVersion() );
+                return !keys.contains( key );
+            }
+            return false;
+        }
+
+    }
+
