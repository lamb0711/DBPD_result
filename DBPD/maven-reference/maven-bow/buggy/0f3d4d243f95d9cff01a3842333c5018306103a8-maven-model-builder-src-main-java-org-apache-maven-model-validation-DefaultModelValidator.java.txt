[MNG-4383] Uninterpolated expressions should cause an error

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@821772 13f79535-47bb-0310-9956-ffa450edef68

-        boolean warnOnBadBoolean = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;
-        boolean warnOnBadDependencyScope = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;
+        boolean warnOnly = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;
-                validateBoolean( "dependencies.dependency.optional", problems, warnOnBadBoolean, d.getOptional(),
+                validateVersion( "dependencies.dependency.version", problems, warnOnly, d.getVersion(),
+                                 d.getManagementKey() );
+
+                validateBoolean( "dependencies.dependency.optional", problems, warnOnly, d.getOptional(),
-                 * order to don't break backward-compat with those, only warn but don't error our.
+                 * order to don't break backward-compat with those, only warn but don't error out.
-                    validateBoolean( "dependencyManagement.dependencies.dependency.optional", problems,
-                                     warnOnBadBoolean, d.getOptional(), d.getManagementKey() );
+                    validateBoolean( "dependencyManagement.dependencies.dependency.optional", problems, warnOnly,
+                                     d.getOptional(), d.getManagementKey() );
-                    validateBoolean( "build.plugins.plugin.inherited", problems, warnOnBadBoolean, p.getInherited(),
+                    validateBoolean( "build.plugins.plugin.inherited", problems, warnOnly, p.getInherited(),
-                    validateBoolean( "build.plugins.plugin.extensions", problems, warnOnBadBoolean, p.getExtensions(),
+                    validateBoolean( "build.plugins.plugin.extensions", problems, warnOnly, p.getExtensions(),
-                                      problems, warnOnBadDependencyScope, d.getScope(), d.getManagementKey(),
+                                      problems, warnOnly, d.getScope(), d.getManagementKey(),
-            addViolation( problems, warning, "'" + fieldName + "' must be 'true' or 'false' for " + sourceHint );
+            addViolation( problems, warning, "'" + fieldName + "' must be 'true' or 'false' for " + sourceHint
+                + " but is '" + string + "'." );
-            addViolation( problems, warning, "'" + fieldName + "' must be 'true' or 'false'." );
+            addViolation( problems, warning, "'" + fieldName + "' must be 'true' or 'false' but is '" + string + "'." );
-            addViolation( problems, warning, "'" + fieldName + "' must be one of " + values + " for " + sourceHint );
+            addViolation( problems, warning, "'" + fieldName + "' must be one of " + values + " for " + sourceHint
+                + " but is '" + string + "'." );
-            addViolation( problems, warning, "'" + fieldName + "' must be one of " + values );
+            addViolation( problems, warning, "'" + fieldName + "' must be one of " + values + " but is '" + string
+                + "'." );
+        }
+
+        return false;
+    }
+
+    private boolean validateVersion( String fieldName, ModelProblemCollector problems, boolean warning, String string,
+                                     String sourceHint )
+    {
+        if ( string == null || string.length() <= 0 )
+        {
+            return true;
+        }
+
+        if ( !hasExpression( string ) )
+        {
+            return true;
+        }
+
+        if ( sourceHint != null )
+        {
+            addViolation( problems, warning, "'" + fieldName + "' must be a valid version for " + sourceHint
+                + " but is '" + string + "'." );
+        }
+        else
+        {
+            addViolation( problems, warning, "'" + fieldName + "' must be a valid version but is '" + string + "'." );
