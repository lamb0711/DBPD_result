PR: MNG-870
MAke plugin discovery reactor aware



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@290887 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.ArtifactUtils;
+import java.util.Collections;
+import java.util.Comparator;
-    private ProjectSorter()
-    {
-        // no touchy...
-    }
+    private final DAG dag;
+
+    private final List sortedProjects;
+
+    private MavenProject topLevelProject;
-    public static List getSortedProjects( List projects )
+    public ProjectSorter( List projects )
-        DAG dag = new DAG();
+        dag = new DAG();
-            String id = getId( project.getGroupId(), project.getArtifactId() );
+            String id = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
-            String id = getId( project.getGroupId(), project.getArtifactId() );
+            String id = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
-                String dependencyId = getId( dependency.getGroupId(), dependency.getArtifactId() );
+                String dependencyId = ArtifactUtils.versionlessKey( dependency.getGroupId(),
+                                                                    dependency.getArtifactId() );
-                String parentId = getId( parent.getGroupId(), parent.getArtifactId() );
+                String parentId = ArtifactUtils.versionlessKey( parent.getGroupId(), parent.getArtifactId() );
-                    String pluginId = getId( plugin.getGroupId(), plugin.getArtifactId() );
+                    String pluginId = ArtifactUtils.versionlessKey( plugin.getGroupId(), plugin.getArtifactId() );
+                        project.addProjectReference( (MavenProject) projectMap.get( pluginId ) );
+
-                    String pluginId = getId( plugin.getGroupId(), plugin.getArtifactId() );
+                    String pluginId = ArtifactUtils.versionlessKey( plugin.getGroupId(), plugin.getArtifactId() );
+                        project.addProjectReference( (MavenProject) projectMap.get( pluginId ) );
+
-                String extensionId = getId( extension.getGroupId(), extension.getArtifactId() );
+                String extensionId = ArtifactUtils.versionlessKey( extension.getGroupId(), extension.getArtifactId() );
+                    project.addProjectReference( (MavenProject) projectMap.get( extensionId ) );
+
+        this.sortedProjects = Collections.unmodifiableList( sortedProjects );
+    }
+
+    // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
+    public MavenProject getTopLevelProject()
+    {
+        if ( topLevelProject == null )
+        {
+            List projectsByFile = new ArrayList( sortedProjects );
+
+            Collections.sort( projectsByFile, new ByProjectFileComparator() );
+
+            topLevelProject = (MavenProject) projectsByFile.get( 0 );
+        }
+
+        return topLevelProject;
+    }
+
+    public List getSortedProjects()
+    {
-    private static String getId( String groupId, String artifactId )
+    public boolean hasMultipleProjects()
-        return groupId + ":" + artifactId;
+        return sortedProjects.size() > 1;
+
+    public List getDependents( String id )
+    {
+        return dag.getParentLabels( id );
+    }
+
+    private static class ByProjectFileComparator
+        implements Comparator
+    {
+
+        public int compare( Object first, Object second )
+        {
+            MavenProject p1 = (MavenProject) first;
+            MavenProject p2 = (MavenProject) second;
+
+            String p1Path = p1.getFile().getAbsolutePath();
+            String p2Path = p2.getFile().getAbsolutePath();
+
+            int comparison = p1Path.length() - p2Path.length();
+
+            if ( comparison > 0 )
+            {
+                return 1;
+            }
+            else if ( comparison < 0 )
+            {
+                return -1;
+            }
+            else
+            {
+                return 0;
+            }
+        }
+    }
+
