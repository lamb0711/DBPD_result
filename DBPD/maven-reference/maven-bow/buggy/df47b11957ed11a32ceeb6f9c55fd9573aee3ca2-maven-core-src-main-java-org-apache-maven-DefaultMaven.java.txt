[MNG-2576] Make Like Reactor Mode

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@794043 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import org.apache.maven.execution.ProjectDependencyGraph;
-        {                        
+        {
-            projects = projectSorter.getSortedProjects();
+            ProjectDependencyGraph projectDependencyGraph = createDependencyGraph( projectSorter, request );
-            session.setProjects( projects );
+            session.setProjects( projectDependencyGraph.getSortedProjects() );
-            session.setProjectDependencyGraph( new DefaultProjectDependencyGraph( projectSorter ) );
+            session.setProjectDependencyGraph( projectDependencyGraph );
+        catch ( MavenExecutionException e )
+        {
+            return processResult( result, e );
+        }
+
+            projects.add( project );
-
-            projects.add( project );
+    private ProjectDependencyGraph createDependencyGraph( ProjectSorter sorter, MavenExecutionRequest request )
+        throws MavenExecutionException
+    {
+        ProjectDependencyGraph graph = new DefaultProjectDependencyGraph( sorter );
+
+        if ( !request.getSelectedProjects().isEmpty() )
+        {
+            File reactorDirectory = request.getPom().getParentFile().getAbsoluteFile();
+
+            Map<File, MavenProject> projectsByFile = new HashMap<File, MavenProject>();
+
+            for ( MavenProject project : sorter.getSortedProjects() )
+            {
+                projectsByFile.put( project.getFile(), project );
+            }
+
+            List<MavenProject> selectedProjects = new ArrayList<MavenProject>( request.getSelectedProjects().size() );
+
+            for ( String selectedProject : request.getSelectedProjects() )
+            {
+                File pomFile = new File( reactorDirectory, selectedProject );
+
+                if ( pomFile.isDirectory() )
+                {
+                    pomFile = new File( pomFile, Maven.POMv4 );
+                }
+
+                MavenProject project = projectsByFile.get( pomFile );
+
+                if ( project != null )
+                {
+                    selectedProjects.add( project );
+                }
+                else
+                {
+                    throw new MavenExecutionException( "Could not find project in reactor: " + selectedProject,
+                                                       request.getPom() );
+                }
+            }
+
+            boolean makeUpstream = false;
+            boolean makeDownstream = false;
+            if ( MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals( request.getMakeBehavior() ) )
+            {
+                makeUpstream = true;
+            }
+            else if ( MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals( request.getMakeBehavior() ) )
+            {
+                makeDownstream = true;
+            }
+            else if ( MavenExecutionRequest.REACTOR_MAKE_BOTH.equals( request.getMakeBehavior() ) )
+            {
+                makeUpstream = true;
+                makeDownstream = true;
+            }
+            else if ( StringUtils.isNotEmpty( request.getMakeBehavior() ) )
+            {
+                throw new MavenExecutionException( "Invalid reactor make behavior: " + request.getMakeBehavior(),
+                                                   request.getPom() );
+            }
+
+            Collection<MavenProject> makeProjects = new LinkedHashSet<MavenProject>( selectedProjects );
+
+            if ( makeUpstream || makeDownstream )
+            {
+                for ( MavenProject selectedProject : selectedProjects )
+                {
+                    if ( makeUpstream )
+                    {
+                        makeProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );
+                    }
+                    if ( makeDownstream )
+                    {
+                        makeProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );
+                    }
+                }
+            }
+
+            // TODO: process resume from
+
+            graph = new FilteredProjectDependencyGraph( graph, makeProjects );
+        }
+
+        return graph;
+    }
+
