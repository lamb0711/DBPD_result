Fixed pom profile activation issues. Added support for hooking up latest builder into Mercury.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@759145 13f79535-47bb-0310-9956-ffa450edef68

-
+            System.out.println("Profile = " + profileId);
+                System.out.println("AAA: " + profileId);
-            {
+            {System.out.println("BBB: " + profileId);
-                {
+                {System.out.println("CCCC: " + profileId);
-                {
+                {System.out.println("DDDDD: " + profileId);
+            System.out.println("activeFromPom.isEmpty()");
-
+        System.out.println("Active From POM: " + activeFromPom.size() + ": EXTERNAL:" + activeExternal.size());
+        System.out.println("All active size: " + allActive.size());
+        
+            System.out.println("Removing: " + defaults.size());
-            if(p.getActivation() != null && p.getActivation().isActiveByDefault() )
+            if( (p.getActivation() != null && p.getActivation().isActiveByDefault()) || p.getActivation() == null )
-    {/*
-        //TODO: Using reflection now. Need to replace with custom mapper
-        StringWriter writer = new StringWriter();
-        XmlSerializer serializer = new MXSerializer();
-        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
-        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
-        try
-        {
-            serializer.setOutput( writer );
-            serializer.startDocument("UTF-8", null );
-        } catch (IOException e) {
-            
-        }
-
-        try {
-            MavenXpp3Writer w = new MavenXpp3Writer();
-            Class c = Class.forName("org.apache.maven.model.io.xpp3.MavenXpp3Writer");
-
-            Class partypes[] = new Class[3];
-            partypes[0] = Profile.class;
-            partypes[1] = String.class;
-            partypes[2] = XmlSerializer.class;
-
-            Method meth = c.getDeclaredMethod(
-                         "writeProfile", partypes);
-            meth.setAccessible(true);
-            
-            Object arglist[] = new Object[3];
-            arglist[0] = profile;
-            arglist[1] = "profile";
-            arglist[2] = serializer;
-
-            meth.invoke(w, arglist);
-            serializer.endDocument();
-        } catch (Exception e)
-        {
-            throw new ProfileActivationException(e.getMessage(), e);
-        }
-
-        List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
-        interpolatorProperties.addAll(InterpolatorProperty.toInterpolatorProperties(
-                context.getExecutionProperties(),
-                PomInterpolatorTag.EXECUTION_PROPERTIES.name()));
-
-        List<ModelProperty> p;
-        try
-        {                                                                   
-            p = ModelMarshaller.marshallXmlToModelProperties(new ByteArrayInputStream(writer.toString().getBytes( "UTF-8" )),
-                    ProjectUri.Profiles.xUri, PomTransformer.URIS);
-        } catch (IOException e) {
-            throw new ProfileActivationException(e.getMessage());
-        }
-        
-        ModelContainer mc = new IdModelContainerFactory(ProjectUri.Profiles.Profile.xUri).create(p);
-        for(ActiveProfileMatcher matcher : matchers)
-        {
-            if(matcher.isMatch(mc, interpolatorProperties))
-            {
-                return true;
-            }
-        }
-        return false;
-        */
+    {
