declare the desired "prefix" inside the plugin descriptor instead of pulling apart the artifact ID (though that is how the default is created).
Currently, the reverse is not handled in anyway, so a non-default prefix may not work, but this makes the code easier to isolate.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168099 13f79535-47bb-0310-9956-ffa450edef68

-    public Xpp3Dom getGoalConfiguration( String pluginId, String goalName )
+    public Xpp3Dom getGoalConfiguration( String pluginGroupId, String pluginArtifactId, String goalId )
-                // TODO: groupID not handled
-                if ( pluginId.equals( plugin.getArtifactId() ) )
+                if ( pluginGroupId.equals( plugin.getGroupId() ) && pluginArtifactId.equals( plugin.getArtifactId() ) )
-                    if ( goalName != null )
+                    if ( goalId != null )
-                        for ( Iterator j = plugin.getGoals().iterator(); j.hasNext(); )
+                        Goal goal = (Goal) plugin.getGoalsAsMap().get( goalId );
+                        if ( goal != null )
-                            Goal goal = (Goal) j.next();
-                            if ( goal.getId().equals( goalName ) )
+                            Xpp3Dom goalConfiguration = (Xpp3Dom) goal.getConfiguration();
+                            if ( goalConfiguration != null )
-                                Xpp3Dom goalConfiguration = (Xpp3Dom) goal.getConfiguration();
-                                if ( goalConfiguration != null )
-                                {
-                                    Xpp3Dom newDom = new Xpp3Dom( goalConfiguration );
-                                    dom = Xpp3Dom.mergeXpp3Dom( newDom, dom );
-                                }
-                                break;
+                                Xpp3Dom newDom = new Xpp3Dom( goalConfiguration );
+                                dom = Xpp3Dom.mergeXpp3Dom( newDom, dom );
