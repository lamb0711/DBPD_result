Upgraded to java7 language features

-    private List<String> blackList = new ArrayList<String>();
+    private List<String> blackList = new ArrayList<>();
-    private Map<String, BuildFailure> buildFailuresByProject = new HashMap<String, BuildFailure>();
+    private Map<String, BuildFailure> buildFailuresByProject = new HashMap<>();
-    private Map pluginContextsByProjectAndPluginKey = new HashMap();
+    private Map<String, Map<String, Map>> pluginContextsByProjectAndPluginKey = new HashMap<>();
-    private Map<String, BuildSuccess> buildSuccessesByProject = new HashMap<String, BuildSuccess>();
+    private Map<String, BuildSuccess> buildSuccessesByProject = new HashMap<>();
-        Map pluginContextsByKey = (Map) pluginContextsByProjectAndPluginKey.get( project.getId() );
+        Map<String, Map> pluginContextsByKey = pluginContextsByProjectAndPluginKey.get( project.getId() );
-            pluginContextsByKey = new HashMap();
+            pluginContextsByKey = new HashMap<>();
-        Map pluginContext = (Map) pluginContextsByKey.get( plugin.getPluginLookupKey() );
+        Map pluginContext = pluginContextsByKey.get( plugin.getPluginLookupKey() );
-        if ( FAIL_FAST.equals( failureBehavior ) || FAIL_AT_END.equals( failureBehavior )
-            || FAIL_NEVER.equals( failureBehavior ) )
+        if ( FAIL_FAST.equals( failureBehavior ) || FAIL_AT_END.equals( failureBehavior ) || FAIL_NEVER.equals(
+            failureBehavior ) )
-            throw new IllegalArgumentException( "Invalid failure behavior (must be one of: \'" + FAIL_FAST + "\', \'"
-                + FAIL_AT_END + "\', \'" + FAIL_NEVER + "\')." );
+            throw new IllegalArgumentException(
+                "Invalid failure behavior (must be one of: \'" + FAIL_FAST + "\', \'" + FAIL_AT_END + "\', \'"
+                    + FAIL_NEVER + "\')." );
-                    if ( !buildSuccessesByProject.containsKey( dependentId )
-                        && !buildFailuresByProject.containsKey( dependentId ) )
+                    if ( !buildSuccessesByProject.containsKey( dependentId ) && !buildFailuresByProject.containsKey(
+                        dependentId ) )
-        return (BuildFailure) buildFailuresByProject.get( getProjectKey( project ) );
+        return buildFailuresByProject.get( getProjectKey( project ) );
-        return (BuildSuccess) buildSuccessesByProject.get( getProjectKey( project ) );
+        return buildSuccessesByProject.get( getProjectKey( project ) );
