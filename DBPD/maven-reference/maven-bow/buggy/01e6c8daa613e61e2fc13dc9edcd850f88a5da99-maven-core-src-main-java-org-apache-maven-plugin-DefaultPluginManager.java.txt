PR: MNG-257

refactor artifact creation to all go through the factory, and assign the type handler from there.
Attach EJB client to the EJB artifact so that it is installed/deployed along with it.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191096 13f79535-47bb-0310-9956-ffa450edef68

-    private ArtifactFactory artifactFactory;
-
-                                         Settings settings, ArtifactRepository localRepository )
+                                          Settings settings, ArtifactRepository localRepository )
-                version = pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings, localRepository );
+                version = pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings,
+                                                                     localRepository );
+            ArtifactFactory artifactFactory = null;
+                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
+
-                                                  "Error occurred in the artifact container attempting to download plugin "
-                                                      + groupId + ":" + artifactId, e );
+                    "Error occurred in the artifact container attempting to download plugin " + groupId + ":" +
+                        artifactId, e );
-                if ( ( groupId == null || artifactId == null || version == null || ( groupId.equals( e.getGroupId() )
-                    && artifactId.equals( e.getArtifactId() ) && version.equals( e.getVersion() ) ) )
-                    && "maven-plugin".equals( e.getType() ) )
+                if (
+                    ( groupId == null || artifactId == null || version == null ||
+                        ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
+                            version.equals( e.getVersion() ) ) ) && "maven-plugin".equals( e.getType() ) )
-                throw new PluginManagerException( "Internal configuration error while retrieving " + groupId + ":"
-                    + artifactId, e );
+                throw new PluginManagerException(
+                    "Internal configuration error while retrieving " + groupId + ":" + artifactId, e );
+            }
+            finally
+            {
+                if ( artifactFactory != null )
+                {
+                    releaseComponent( artifactFactory );
+                }
+
-                             ArtifactRepository localRepository )
+                              ArtifactRepository localRepository )
+        ArtifactFactory artifactFactory = null;
-
+            artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
-            MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder );
+            MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder,
+                                                                          artifactFactory );
-                                                                                    artifactFilter );
+                                              artifactFilter );
-            container.createChildContainer( pluginKey, files, Collections.EMPTY_MAP, Collections.singletonList( this ) );
+            container.createChildContainer( pluginKey, files, Collections.EMPTY_MAP,
+                                            Collections.singletonList( this ) );
-                                                                                                  distroProvidedFilter );
+                                              distroProvidedFilter );
+            if ( artifactFactory != null )
+            {
+                releaseComponent( artifactFactory );
+            }
+            ArtifactFactory artifactFactory = null;
+                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
-                    .isDependencyResolutionRequired() );
+                    .isDependencyResolutionRequired(), artifactFactory );
+                if ( artifactFactory != null )
+                {
+                    releaseComponent( artifactFactory );
+                }
-            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session,
-                                                                                              pluginDescriptor,
+            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, pluginDescriptor,
-                                         ExpressionEvaluator expressionEvaluator, Mojo plugin )
+                                          ExpressionEvaluator expressionEvaluator, Mojo plugin )
-                                              "DEPRECATED: using default-value to set the default value of field '"
-                                                  + parameter.getName() + "'" );
+                                "DEPRECATED: using default-value to set the default value of field '" +
+                                    parameter.getName() + "'" );
-                                      PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
+                                       PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
-                                                    "Unable to retrieve component configurator for plugin configuration",
-                                                    e );
+                "Unable to retrieve component configurator for plugin configuration", e );
-                                                              String expression )
+                                                               String expression )
-        artifactFilter = new ExclusionSetFilter( new String[] {
-            "classworlds",
-            "maven-artifact",
-            "maven-core",
-            "maven-model",
-            "maven-monitor",
-            "maven-plugin-api",
-            "maven-plugin-descriptor",
-            "maven-project",
-            "maven-settings",
-            "plexus-container-default",
-            "plexus-utils",
-            "wagon-provider-api",
-            "wagon-ssh",
-            "wagon-http-lightweight",
-            "wagon-file" } );
+        artifactFilter = new ExclusionSetFilter(
+            new String[]{"classworlds", "maven-artifact", "maven-core", "maven-model", "maven-monitor", "maven-plugin-api", "maven-plugin-descriptor", "maven-project", "maven-settings", "plexus-container-default", "plexus-utils", "wagon-provider-api", "wagon-ssh", "wagon-http-lightweight", "wagon-file"} );
-                                               MavenProjectBuilder mavenProjectBuilder, String scope )
+                                                MavenProjectBuilder mavenProjectBuilder, String scope,
+                                                ArtifactFactory artifactFactory )
-        MavenMetadataSource sourceReader = new MavenMetadataSource( artifactResolver, mavenProjectBuilder );
+        MavenMetadataSource sourceReader = new MavenMetadataSource( artifactResolver, mavenProjectBuilder,
+                                                                    artifactFactory );
