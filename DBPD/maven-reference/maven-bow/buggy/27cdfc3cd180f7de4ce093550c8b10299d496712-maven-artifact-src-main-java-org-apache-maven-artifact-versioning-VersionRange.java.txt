PR: MNG-505
use comparable versions in ranges

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219630 13f79535-47bb-0310-9956-ffa450edef68

-    private final String recommendedVersion;
+    private final ArtifactVersion recommendedVersion;
-    private VersionRange( String recommendedVersion, List restrictions )
+    private VersionRange( ArtifactVersion recommendedVersion, List restrictions )
-    public String getRecommendedVersion()
+    public ArtifactVersion getRecommendedVersion()
-        List exclusions = new ArrayList();
+        List restrictions = new ArrayList();
-        String version = null;
+        ArtifactVersion version = null;
-            exclusions.add( parseRestriction( process.substring( 0, index + 1 ) ) );
+            restrictions.add( parseRestriction( process.substring( 0, index + 1 ) ) );
-            if ( exclusions.size() > 0 )
+            if ( restrictions.size() > 0 )
-                version = process;
+                version = new DefaultArtifactVersion( process );
-        return new VersionRange( version, exclusions );
+        return new VersionRange( version, restrictions );
-            restriction = new Restriction( process, lowerBoundInclusive, process, upperBoundInclusive );
+
+            ArtifactVersion version = new DefaultArtifactVersion( process );
+
+            restriction = new Restriction( version, lowerBoundInclusive, version, upperBoundInclusive );
-            if ( lowerBound.length() == 0 )
+            ArtifactVersion lowerVersion = null;
+            if ( lowerBound.length() > 0 )
-                lowerBound = null;
+                lowerVersion = new DefaultArtifactVersion( lowerBound );
-            if ( upperBound.length() == 0 )
+            ArtifactVersion upperVersion = null;
+            if ( upperBound.length() > 0 )
-                upperBound = null;
+                upperVersion = new DefaultArtifactVersion( upperBound );
-            restriction = new Restriction( lowerBound, lowerBoundInclusive, upperBound, upperBoundInclusive );
+            restriction = new Restriction( lowerVersion, lowerBoundInclusive, upperVersion, upperBoundInclusive );
+        return new VersionRange( new DefaultArtifactVersion( version ), Collections.EMPTY_LIST );
+    }
+
+    public VersionRange restrict( VersionRange restriction )
+    {
+        ArtifactVersion version = max( recommendedVersion, restriction.getRecommendedVersion() );
+
+        // TODO
+
+
+    private ArtifactVersion max( ArtifactVersion v1, ArtifactVersion v2 )
+    {
+        if ( v1.compareTo( v2 ) > 0 )
+        {
+            return v1;
+        }
+        else
+        {
+            return v2;
+        }
+    }
