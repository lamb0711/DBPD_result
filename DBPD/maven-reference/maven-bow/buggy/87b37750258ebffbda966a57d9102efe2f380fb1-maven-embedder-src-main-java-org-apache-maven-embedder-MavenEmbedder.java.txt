MNG-2722 Create a strategy for providing sane default values in the MavenExecutionRequest 


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@491468 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.classworlds.realm.ClassRealm;
-import java.io.FileNotFoundException;
-    public static final String userHome = System.getProperty( "user.home" );
-
-    private ArtifactRepositoryFactory artifactRepositoryFactory;
-
+    private ArtifactRepositoryFactory artifactRepositoryFactory;
+
-    private ClassLoader classLoader;
-
+    private ClassRealm realm;
+
-    private boolean started = false;
-
+    // ----------------------------------------------------------------------------
+    // Constructors
+    // ----------------------------------------------------------------------------
+
+    public MavenEmbedder( ClassWorld classWorld )
+        throws MavenEmbedderException
+    {
+        this( classWorld, null );
+    }
+
+    public MavenEmbedder( ClassWorld classWorld, MavenEmbedderLogger logger )
+        throws MavenEmbedderException
+    {
+        this.classWorld = classWorld;
+
+        this.logger = logger;
+
+        start();
+    }
+
+    public MavenEmbedder( ClassLoader classLoader )
+        throws MavenEmbedderException
+    {
+        this( classLoader, null );
+    }
+
+    public MavenEmbedder( ClassLoader classLoader, MavenEmbedderLogger logger )
+        throws MavenEmbedderException
+    {
+        this( new ClassWorld( "plexus.core", classLoader ), logger );
+    }
+
-    public void setClassLoader( ClassLoader classLoader )
-    {
-        this.classLoader = classLoader;
-    }
-
-    public ClassLoader getClassLoader()
-    {
-        return classLoader;
-    }
-
-    public void setClassWorld( ClassWorld classWorld )
-    {
-        this.classWorld = classWorld;
-    }
-
-        checkStarted();
-        checkStarted();
-        checkStarted();
-    /** @deprecated */
+    /** @deprecated  */
-        checkStarted();
-    /** @deprecated */
+    /** @deprecated  */
-        checkStarted();
-    private MavenExecutionRequest populateMavenExecutionRequestWithDefaults( MavenExecutionRequest request )
+    private MavenExecutionRequest populateMavenExecutionRequestWithDefaults( MavenExecutionRequest r )
+        throws MavenEmbedderException
-        // Local repository    	    	
-        if ( request.getLocalRepository() == null )
+        // Settings        
+        // Local repository  
+        // TransferListener
+        // EventMonitor
+
+        if ( r.getSettings() == null )
-            request.setLocalRepository( localRepository );
+            File userSettingsPath = mavenTools.getUserSettingsPath( r.getSettingsFile() );
-            File localRepository = new File( request.getLocalRepository().getBasedir() );
+            File globalSettingsFile = mavenTools.getGlobalSettingsPath();
-            if ( !localRepository.exists() )
+            try
-                localRepository.mkdirs();
+                r.setSettings( mavenTools.buildSettings( userSettingsPath, globalSettingsFile, r.isInteractiveMode(),
+                                                         r.isOffline(), r.isUsePluginRegistry(),
+                                                         r.isUsePluginUpdateOverride() ) );
+            }
+            catch ( SettingsConfigurationException e )
+            {
+                throw new MavenEmbedderException( "Error processing settings.xml.", e );
-        // Settings
-
-        if ( request.getSettings() == null )
+        if ( r.getLocalRepository() == null )
-            request.setSettings( settings );
+            String localRepositoryPath = mavenTools.getLocalRepositoryPath( r.getSettings() );
+
+            if ( r.getLocalRepository() == null )
+            {
+                r.setLocalRepository( mavenTools.createLocalRepository( new File( localRepositoryPath ) ) );
+            }
-        /*
-        MavenExecutionRequest request = new DefaultMavenExecutionRequest()
-            .setBasedir( baseDirectory )
-            .setGoals( goals )
-            .setLocalRepositoryPath( localRepositoryPath ) // default: ~/.m2/repository
-            .setReactorFailureBehavior( reactorFailureBehaviour ) // default: fail fast
-            .setRecursive( recursive ) // default: false
-            .setUseReactor( useReactor ) // default: true
-            .setShowErrors( showErrors ) // default: false
-            .setInteractiveMode( interactive ) // default: false
-            .setLoggingLevel( loggingLevel ) // default: info
-            .setSettings( settings ) // default: ~/.m2/settings.xml
-            .setTransferListener( transferListener ) // default: batch mode which goes along with interactive
-            .setOffline( offline ) // default: false
-            .setUpdateSnapshots( updateSnapshots ) // default: false
-            .setNoSnapshotUpdates( noSnapshotUpdates ) // default: false
-            .setGlobalChecksumPolicy( globalChecksumPolicy ); // default: warn
-        */
-
-        // Classify settings as being used for the life of session or request
-
-        if ( request.getLocalRepository() == null )
-        {
-        }
-
-
-        return request;
+        return r;
-        request = populateMavenExecutionRequestWithDefaults( request );
-
+            request = populateMavenExecutionRequestWithDefaults( request );
+
+        catch ( MavenEmbedderException e )
+        {
+            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
+        }
-        checkStarted();
-        checkStarted();
-        checkStarted();
-                classLoader.getResourceAsStream( "/plugins/" + summaryPluginDescriptor.getArtifactId() + ".xml" );
+                realm.getResourceAsStream( "/plugins/" + summaryPluginDescriptor.getArtifactId() + ".xml" );
-        checkStarted();
-        checkStarted();
-    public void start()
+    private void start()
-        // ----------------------------------------------------------------------
-        // Set the maven.home system property which is need by components like
-        // the plugin registry builder.
-        // ----------------------------------------------------------------------
-
-        if ( classWorld == null && classLoader == null )
-        {
-            throw new IllegalStateException(
-                "A classWorld or classloader must be specified using setClassLoader|World(ClassLoader)." );
-        }
-
-        if ( classWorld == null )
-        {
-            classWorld = new ClassWorld();
-
-            try
-            {
-                classWorld.newRealm( "plexus.core", classLoader );
-            }
-            catch ( DuplicateRealmException e )
-            {
-                // won't happen
-            }
-        }
-
-            started = true;
-            
-            settings = mavenTools.buildSettings( req.getUserSettingsFile(), req.getGlobalSettingsFile(), null );
+            settings = mavenTools.buildSettings( req.getUserSettingsFile(), req.getGlobalSettingsFile(), false );
-        started = false;
-    public void execute( MavenExecutionRequest request )
+    public MavenExecutionResult execute( MavenExecutionRequest request )
-        checkStarted();
-
-        maven.execute( request );
-    }
-
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean interactive,
-                                   boolean offline,
-                                   boolean usePluginRegistry,
-                                   Boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        checkStarted();
-        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, interactive, offline, usePluginRegistry,
-                                         pluginUpdateOverride );
-    }
-
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean interactive,
-                                   boolean offline,
-                                   boolean usePluginRegistry,
-                                   boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        checkStarted();
-        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, interactive, offline, usePluginRegistry,
-                                         Boolean.valueOf( pluginUpdateOverride ) );
-    }
-
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   Boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        checkStarted();
-        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, pluginUpdateOverride );
-    }
-
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        checkStarted();
-        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, Boolean.valueOf( pluginUpdateOverride ) );
-    }
-
-    public File getUserSettingsPath( String optionalSettingsPath )
-    {
-        checkStarted();
-        return mavenTools.getUserSettingsPath( optionalSettingsPath );
-    }
-
-    public File getGlobalSettingsPath()
-    {
-        checkStarted();
-        return mavenTools.getGlobalSettingsPath();
-    }
-
-    public String getLocalRepositoryPath( Settings settings )
-    {
-        checkStarted();
-        return mavenTools.getLocalRepositoryPath( settings );
-    }
-
-    private void checkStarted()
-    {
-        if ( !started )
+        try
-            throw new IllegalStateException(
-                "The embedder is not started, you need to call start() on the embedder prior to calling this method" );
+            request = populateMavenExecutionRequestWithDefaults( request );
+        catch ( MavenEmbedderException e )
+        {
+            throw new MavenExecutionException( "Error populating request with default values.", e );
+        }
+
+        return maven.execute( request );
