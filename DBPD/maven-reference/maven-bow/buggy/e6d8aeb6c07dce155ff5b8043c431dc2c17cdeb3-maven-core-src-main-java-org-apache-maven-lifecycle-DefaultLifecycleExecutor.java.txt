o allowing the selective execution of a set of mojos inside a plugins by
  specifying a <goals/> section inside a <plugin/> configuration.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163539 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Goal;
-            // TODO: should enrich this with the type handler, but for now just
+            // TODO: should enrich this with the type artifactHandler, but for now just
-            ArtifactHandler handler = artifactHandlerManager.getArtifactHandler( project.getPackaging() );
+            ArtifactHandler artifactHandler = artifactHandlerManager.getArtifactHandler( project.getPackaging() );
-            if ( handler != null )
+            if ( artifactHandler != null )
-                // If so, remove both of these goals from type handler
-                if ( handler.packageGoal() != null )
+                // If so, remove both of these goals from type artifactHandler
+                if ( artifactHandler.packageGoal() != null )
-                    verifyMojoPhase( handler.packageGoal(), session );
+                    verifyMojoPhase( artifactHandler.packageGoal(), session );
-                if ( handler.additionalPlugin() != null )
+
+                if ( artifactHandler.additionalPlugin() != null )
-                    String additionalPluginArtifactId = "maven-" + handler.additionalPlugin() + "-plugin";
+
+                    String additionalPluginArtifactId = "maven-" + artifactHandler.additionalPlugin() + "-plugin";
-                    processPluginPhases( "maven", "maven-" + handler.additionalPlugin() + "-plugin", session );
+                    Plugin plugin = new Plugin();
+
+                    plugin.setGroupId( additionalPluginGroupId );
+
+                    plugin.setArtifactId( additionalPluginArtifactId );
+
+                    processPluginPhases( plugin, session );
-        PluginManagement mgmt = project.getPluginManagement();
-        if( mgmt != null )
+        PluginManagement pluginManagement = project.getPluginManagement();
+
+        if ( pluginManagement != null )
-            List pluginList = mgmt.getPlugins();
+            List pluginList = pluginManagement.getPlugins();
+
+
+
-            // TODO: should this flag be used in verifyPlugin, completely disabling the plugin?
-            if ( Boolean.TRUE != plugin.isDisabled() )
+            processPluginPhases( plugin, mavenSession );
+        }
+    }
+
+    /**
+     * Take each mojo contained with a plugin, look to see whether it contributes to a
+     * phase in the lifecycle and if it does place it at the end of the list of goals
+     * to execute for that given phase.
+     *
+     * @param mavenSession
+     * @throws Exception
+     */
+    // TODO: don't throw Exception
+    private void processPluginPhases( Plugin plugin, MavenSession mavenSession )
+        throws Exception
+    {
+        String groupId = plugin.getGroupId();
+
+        String artifactId = plugin.getArtifactId();
+
+        pluginManager.verifyPlugin( groupId, artifactId, mavenSession );
+
+        PluginDescriptor pluginDescriptor = pluginManager.getPluginDescriptor( groupId, artifactId );
+
+        // ----------------------------------------------------------------------
+        // Look to see if the plugin configuration specifies particular mojos
+        // within the plugin. If this is the case then simply configure the
+        // mojos the user has specified and ignore the rest.
+        // ----------------------------------------------------------------------
+
+
+        if ( plugin.getGoals().size() > 0 )
+        {
+            String pluginId = pluginDescriptor.getArtifactId();
+
+            pluginId = pluginId.substring( 6 ).substring( 0, 7 );
+
+            for ( Iterator i = plugin.getGoals().iterator(); i.hasNext(); )
-                processPluginPhases( plugin.getGroupId(), plugin.getArtifactId(), mavenSession );
+                Goal goal = (Goal) i.next();
+
+                configureMojo( pluginManager.getMojoDescriptor( pluginId + ":" + goal.getId() ) );
+            }
+        }
+        else
+        {
+            for ( Iterator j = pluginDescriptor.getMojos().iterator(); j.hasNext(); )
+            {
+                MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();
+
+                configureMojo( mojoDescriptor );
-    // TODO: don't throw Exception
-    private void processPluginPhases( String groupId, String artifactId, MavenSession mavenSession )
+    /**
+     * Take a look at a mojo contained within a plugin, look to see whether it contributes to a
+     * phase in the lifecycle and if it does place it at the end of the list of goals
+     * to execute for the stated phase.
+     *
+     * @param mojoDescriptor
+     * @throws Exception
+     */
+    private void configureMojo( MojoDescriptor mojoDescriptor )
-        pluginManager.verifyPlugin( groupId, artifactId, mavenSession );
-        PluginDescriptor pluginDescriptor = pluginManager.getPluginDescriptor( groupId, artifactId );
-        for ( Iterator j = pluginDescriptor.getMojos().iterator(); j.hasNext(); )
+        if ( mojoDescriptor.getPhase() != null )
-            MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();
+            Phase phase = (Phase) phaseMap.get( mojoDescriptor.getPhase() );
-            // TODO: check if the goal exists in the configuration and is
-            // disabled
-            if ( mojoDescriptor.getPhase() != null )
-            {
-                Phase phase = (Phase) phaseMap.get( mojoDescriptor.getPhase() );
-                phase.getGoals().add( mojoDescriptor.getId() );
-            }
+            phase.getGoals().add( mojoDescriptor.getId() );
-
+
+
+
+
+
