PR: MNG-471

implemented cloned lifecycle, project and tests. update mojos accordingly


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191476 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.lifecycle.Execution;
+import org.apache.maven.plugin.lifecycle.Lifecycle;
+import org.apache.maven.plugin.lifecycle.Phase;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
+import java.io.IOException;
-            String executePhase = mojoDescriptor.getExecutePhase();
-            if ( executePhase != null )
+            if ( mojoDescriptor.getExecutePhase() != null )
-                forkLifecycle( executePhase, mojoDescriptor.getExecuteLifecycle(), session, project );
+                forkLifecycle( mojoDescriptor, session, project );
-    private void forkLifecycle( String task, String executeLifecycle, MavenSession session,
-                                MavenProject project )
+    private void forkLifecycle( MojoDescriptor mojoDescriptor, MavenSession session, MavenProject project )
+        String task = mojoDescriptor.getExecutePhase();
+
+        String executeLifecycle = mojoDescriptor.getExecuteLifecycle();
-            // TODO: overlay new lifecycle
+            Lifecycle lifecycleOverlay;
+            try
+            {
+                lifecycleOverlay = mojoDescriptor.getPluginDescriptor().getLifecycleMapping( executeLifecycle );
+            }
+            catch ( IOException e )
+            {
+                throw new LifecycleExecutionException( "Unable to read lifecycle mapping file", e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new LifecycleExecutionException( "Unable to parse lifecycle mapping file", e );
+            }
+
+            if ( lifecycleOverlay == null )
+            {
+                throw new LifecycleExecutionException( "Lifecycle '" + executeLifecycle + "' not found in plugin" );
+            }
+
+            for ( Iterator i = lifecycleOverlay.getPhases().iterator(); i.hasNext(); )
+            {
+                Phase phase = (Phase) i.next();
+                for ( Iterator j = phase.getExecutions().iterator(); j.hasNext(); )
+                {
+                    Execution e = (Execution) j.next();
+
+                    for ( Iterator k = e.getGoals().iterator(); k.hasNext(); )
+                    {
+                        String goal = (String) k.next();
+                        MojoDescriptor desc = mojoDescriptor.getPluginDescriptor().getMojo( goal );
+                        MojoExecution mojoExecution = new MojoExecution( desc, (Xpp3Dom) e.getConfiguration() );
+                        addToLifecycleMappings( lifecycleMappings, phase.getId(), mojoExecution, session.getSettings() );
+                    }
+                }
+            }
-        // TODO: clone project
-        executeGoalWithLifecycle( task, session, lifecycleMappings, project );
+        MavenProject executionProject = new MavenProject( project );
+        executeGoalWithLifecycle( task, session, lifecycleMappings, executionProject );
+        project.setExecutionProject( executionProject );
-        throws LifecycleExecutionException
