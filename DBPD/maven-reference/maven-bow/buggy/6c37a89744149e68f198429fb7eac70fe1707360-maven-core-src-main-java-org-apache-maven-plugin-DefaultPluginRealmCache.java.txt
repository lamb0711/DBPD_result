[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.Exclusion;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.graph.DependencyFilter;
+import org.sonatype.aether.repository.LocalRepository;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.repository.WorkspaceRepository;
+        implements Key
+
-        private final List<ArtifactRepository> repositories = new ArrayList<ArtifactRepository>();
+        private final WorkspaceRepository workspace;
+
+        private final LocalRepository localRepo;
+
+        private final List<RemoteRepository> repositories;
-        private final ArtifactFilter filter;
+        private final DependencyFilter filter;
-                         ArtifactFilter dependencyFilter, ArtifactRepository localRepository,
-                         List<ArtifactRepository> remoteRepositories )
+                         DependencyFilter dependencyFilter, List<RemoteRepository> repositories,
+                         RepositorySystemSession session )
-            this.repositories.add( localRepository );
-            this.repositories.addAll( remoteRepositories );
+            this.workspace = CacheUtils.getWorkspace( session );
+            this.localRepo = session.getLocalRepository();
+            this.repositories = new ArrayList<RemoteRepository>( repositories.size() );
+            for ( RemoteRepository repository : repositories )
+            {
+                if ( repository.isRepositoryManager() )
+                {
+                    this.repositories.addAll( repository.getMirroredRepositories() );
+                }
+                else
+                {
+                    this.repositories.add( repository );
+                }
+            }
-            hash = hash * 31 + pluginHashCode( plugin );
-            hash = hash * 31 + repositories.hashCode();
-            hash = hash * 31 + ( parentRealm != null ? parentRealm.hashCode() : 0 );
+            hash = hash * 31 + CacheUtils.pluginHashCode( plugin );
+            hash = hash * 31 + hash( workspace );
+            hash = hash * 31 + hash( localRepo );
+            hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
+            hash = hash * 31 + hash( parentRealm );
-            hash = hash * 31 + ( dependencyFilter != null ? dependencyFilter.hashCode() : 0 );
+            hash = hash * 31 + hash( dependencyFilter );
+        public String toString()
+        {
+            return plugin.getId();
+        }
+
+        @Override
+        private static int hash( Object obj )
+        {
+            return obj != null ? obj.hashCode() : 0;
+        }
+
-            CacheKey other = (CacheKey) o;
+            CacheKey that = (CacheKey) o;
-            return parentRealm == other.parentRealm && pluginEquals( plugin, other.plugin )
-                && eq( repositories, other.repositories ) && eq( filter, other.filter )
-                && eq( parentImports, other.parentImports );
+            return parentRealm == that.parentRealm && CacheUtils.pluginEquals( plugin, that.plugin )
+                && eq( workspace, that.workspace ) && eq( localRepo, that.localRepo )
+                && CacheUtils.repositoriesEquals( this.repositories, that.repositories ) && eq( filter, that.filter )
+                && eq( parentImports, that.parentImports );
+
+        private static <T> boolean eq( T s1, T s2 )
+        {
+            return s1 != null ? s1.equals( s2 ) : s2 == null;
+        }
+
-    protected final Map<CacheKey, CacheRecord> cache = new ConcurrentHashMap<CacheKey, CacheRecord>();
+    protected final Map<Key, CacheRecord> cache = new ConcurrentHashMap<Key, CacheRecord>();
-    public CacheRecord get( Plugin plugin, ClassLoader parentRealm, List<String> parentImports,
-                            ArtifactFilter dependencyFilter, ArtifactRepository localRepository,
-                            List<ArtifactRepository> remoteRepositories )
+    public Key createKey( Plugin plugin, ClassLoader parentRealm, List<String> parentImports,
+                          DependencyFilter dependencyFilter, List<RemoteRepository> repositories,
+                          RepositorySystemSession session )
-        return cache.get( new CacheKey( plugin, parentRealm, parentImports, dependencyFilter, localRepository,
-                                        remoteRepositories ) );
+        return new CacheKey( plugin, parentRealm, parentImports, dependencyFilter, repositories, session );
-    public CacheRecord put( Plugin plugin, ClassLoader parentRealm, List<String> parentImports,
-                            ArtifactFilter dependencyFilter, ArtifactRepository localRepository,
-                            List<ArtifactRepository> remoteRepositories, ClassRealm pluginRealm,
-                            List<Artifact> pluginArtifacts )
+    public CacheRecord get( Key key )
+    {
+        return cache.get( key );
+    }
+
+    public CacheRecord put( Key key, ClassRealm pluginRealm, List<Artifact> pluginArtifacts )
-            throw new NullPointerException();
+            throw new IllegalArgumentException();
-        CacheKey key =
-            new CacheKey( plugin, parentRealm, parentImports, dependencyFilter, localRepository, remoteRepositories );
-
-            throw new IllegalStateException( "Duplicate plugin realm for plugin " + plugin.getId() );
+            throw new IllegalStateException( "Duplicate plugin realm for plugin " + key );
-        int hash = 17;
-
-        hash = hash * 31 + plugin.getGroupId().hashCode();
-        hash = hash * 31 + plugin.getArtifactId().hashCode();
-        hash = hash * 31 + plugin.getVersion().hashCode();
-
-        hash = hash * 31 + ( plugin.isExtensions() ? 1 : 0 );
-
-        for ( Dependency dependency : plugin.getDependencies() )
-        {
-            hash = hash * 31 + dependency.getGroupId().hashCode();
-            hash = hash * 31 + dependency.getArtifactId().hashCode();
-            hash = hash * 31 + dependency.getVersion().hashCode();
-            hash = hash * 31 + dependency.getType().hashCode();
-            hash = hash * 31 + ( dependency.getClassifier() != null ? dependency.getClassifier().hashCode() : 0 );
-            hash = hash * 31 + ( dependency.getScope() != null ? dependency.getScope().hashCode() : 0 );
-
-            for ( Exclusion exclusion : dependency.getExclusions() )
-            {
-                hash = hash * 31 + exclusion.getGroupId().hashCode();
-                hash = hash * 31 + exclusion.getArtifactId().hashCode();
-            }
-        }
-
-        return hash;
+        return CacheUtils.pluginHashCode( plugin );
-        return eq( a.getGroupId(), b.getGroupId() ) //
-            && eq( a.getArtifactId(), b.getArtifactId() ) //
-            && eq( a.getVersion(), b.getVersion() ) //
-            && a.isExtensions() == b.isExtensions() //
-            && dependenciesEquals( a.getDependencies(), b.getDependencies() );
-    }
-
-    private static boolean dependenciesEquals( List<Dependency> a, List<Dependency> b )
-    {
-        if ( a.size() != b.size() )
-        {
-            return false;
-        }
-
-        Iterator<Dependency> aI = a.iterator();
-        Iterator<Dependency> bI = b.iterator();
-
-        while ( aI.hasNext() )
-        {
-            Dependency aD = aI.next();
-            Dependency bD = bI.next();
-
-            boolean r = eq( aD.getGroupId(), bD.getGroupId() ) //
-                && eq( aD.getArtifactId(), bD.getArtifactId() ) //
-                && eq( aD.getVersion(), bD.getVersion() ) //
-                && eq( aD.getType(), bD.getType() ) //
-                && eq( aD.getClassifier(), bD.getClassifier() ) //
-                && eq( aD.getScope(), bD.getScope() );
-
-            r &= exclusionsEquals( aD.getExclusions(), bD.getExclusions() );
-
-            if ( !r )
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private static boolean exclusionsEquals( List<Exclusion> a, List<Exclusion> b )
-    {
-        if ( a.size() != b.size() )
-        {
-            return false;
-        }
-
-        Iterator<Exclusion> aI = a.iterator();
-        Iterator<Exclusion> bI = b.iterator();
-
-        while ( aI.hasNext() )
-        {
-            Exclusion aD = aI.next();
-            Exclusion bD = bI.next();
-
-            boolean r = eq( aD.getGroupId(), bD.getGroupId() ) //
-                && eq( aD.getArtifactId(), bD.getArtifactId() );
-
-            if ( !r )
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private static <T> boolean eq( T s1, T s2 )
-    {
-        return s1 != null ? s1.equals( s2 ) : s2 == null;
+        return CacheUtils.pluginEquals( a, b );
