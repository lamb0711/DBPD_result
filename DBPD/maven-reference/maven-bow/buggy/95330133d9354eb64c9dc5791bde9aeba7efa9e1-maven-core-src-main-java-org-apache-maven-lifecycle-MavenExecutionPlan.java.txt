[MNG-4633] Fixed weave mode bug when building m3 itself in weave mode.

Updated testcase for MEP.

Also removed all unused/unecessar code from weave mode.

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@934201 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.lifecycle.internal.ExecutionPlanItem;
+import org.apache.maven.plugin.MojoExecution;
+
-import org.apache.maven.lifecycle.internal.ExecutionPlanItem;
-import org.apache.maven.plugin.MojoExecution;
-import org.apache.maven.plugin.descriptor.MojoDescriptor;
-
+
-    /** For project dependency resolution, the scopes of resolution required if any. */
+
+    /**
+     * For project dependency resolution, the scopes of resolution required if any.
+     */
-    /** For project dependency collection, the scopes of collection required if any. */
+    /**
+     * For project dependency collection, the scopes of collection required if any.
+     */
-    private final Map<String, ExecutionPlanItem> lastInPhase;
-    private final List<String> phasesInOrder;
+    private final Map<String, ExecutionPlanItem> lastMojoExecutionForAllPhases;
+
+
+    final List<String> phases;
-                               Set<String> requiredDependencyCollectionScopes, List<ExecutionPlanItem> planItem )
+                               Set<String> requiredDependencyCollectionScopes, List<ExecutionPlanItem> planItem,
+                               DefaultLifecycles defaultLifecycles )
-        lastInPhase = new HashMap<String, ExecutionPlanItem>();
-        phasesInOrder = new ArrayList<String>();
+        lastMojoExecutionForAllPhases = new HashMap<String, ExecutionPlanItem>();
+
+        String firstPhasePreset = getFirstPhasePresentInPlan();
+
+        List<String> phases = null;
+        if ( defaultLifecycles != null )
+        {
+            final Lifecycle lifecycle = defaultLifecycles.get( firstPhasePreset );
+            if ( lifecycle != null )
+            {
+                phases = lifecycle.getPhases();
+            }
+        }
+        this.phases = phases;
+
+        Map<String, ExecutionPlanItem> lastInExistingPhases = new HashMap<String, ExecutionPlanItem>();
-            final String phaseName = getPhase( executionPlanItem );
-            if ( !lastInPhase.containsKey( phaseName ) )
+            final String phaseName = executionPlanItem.getLifecyclePhase();
+            if ( phaseName != null )
-                phasesInOrder.add( phaseName );
+                lastInExistingPhases.put( phaseName, executionPlanItem );
-            lastInPhase.put( phaseName, executionPlanItem );
+
+        ExecutionPlanItem lastSeenExecutionPlanItem = null;
+        ExecutionPlanItem forThis;
+
+        if ( phases != null )
+        {
+            for ( String phase : phases )
+            {
+                forThis = lastInExistingPhases.get( phase );
+                if ( forThis != null )
+                {
+                    lastSeenExecutionPlanItem = forThis;
+                }
+                lastMojoExecutionForAllPhases.put( phase, lastSeenExecutionPlanItem );
+
+            }
+        }
+
-    private String getPhase( ExecutionPlanItem executionPlanItem )
+    private String getFirstPhasePresentInPlan()
-        final MojoExecution mojoExecution = executionPlanItem.getMojoExecution();
-        final MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
-        return mojoDescriptor.getPhase();
-
+        for ( ExecutionPlanItem executionPlanItem : getExecutionPlanItems() )
+        {
+            final String phase = executionPlanItem.getLifecyclePhase();
+            if ( phase != null )
+            {
+                return phase;
+            }
+        }
+        return null;
+
-     * the closest upstream item will be returned.
-     * @param executionPlanItem The execution plan item
+     * the closest executionPlanItem from an earlier phase item will be returned.
+     *
+     * @param requestedPhase the requested phase
+     *                       The execution plan item
-    public ExecutionPlanItem findLastInPhase( ExecutionPlanItem executionPlanItem )
+    public ExecutionPlanItem findLastInPhase( String requestedPhase )
-        ExecutionPlanItem executionPlanItem1 = lastInPhase.get( getPhase( executionPlanItem ) );
-        return executionPlanItem1;
+        ExecutionPlanItem result = lastMojoExecutionForAllPhases.get( requestedPhase );
+        int i = phases.indexOf( requestedPhase );
+        while ( result == null && i > 0 )
+        {
+            final String previousPhase = phases.get( --i );
+            result = lastMojoExecutionForAllPhases.get( previousPhase );
+
+        }
+        return result;
+    // Used by m2e but will be removed, really. 
+    @SuppressWarnings({"UnusedDeclaration"})
