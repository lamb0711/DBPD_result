o Added <pluginManagement/>
o Removed goal decoration.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163468 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.lifecycle.GoalNotFoundException;
-import org.apache.maven.lifecycle.goal.GoalNotFoundException;
-import org.apache.maven.lifecycle.session.MavenSessionPhaseManager;
- * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
+ * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
-    protected MavenSessionPhaseManager sessionPhaseManager;
-
-    public MavenExecutionResponse execute( MavenExecutionRequest request )
-        throws GoalNotFoundException, Exception
+    public MavenExecutionResponse execute( MavenExecutionRequest request ) throws GoalNotFoundException, Exception
-    public MavenExecutionResponse handleProject( MavenExecutionRequest request )
-        throws Exception
+    public MavenExecutionResponse handleProject( MavenExecutionRequest request ) throws Exception
-        
+
-        
+
-            
+
-        catch(Exception e)
+        catch ( Exception e )
-                // TODO: this should be a "FATAL" exception, reported to the developers - however currently a LOT of
-                // "user" errors fall through the cracks (like invalid POMs, as one example)
+                // TODO: this should be a "FATAL" exception, reported to the
+                // developers - however currently a LOT of
+                // "user" errors fall through the cracks (like invalid POMs, as
+                // one example)
-    public MavenExecutionResponse handleReactor( MavenReactorExecutionRequest request )
-        throws ReactorException
+    public MavenExecutionResponse handleReactor( MavenReactorExecutionRequest request ) throws ReactorException
-        
+
-            
+
-            
+
-    public MavenProject getProject( File pom, ArtifactRepository localRepository )
-        throws ProjectBuildingException
+    public MavenProject getProject( File pom, ArtifactRepository localRepository ) throws ProjectBuildingException
-    //!! We should probably have the execution request handler create the session as
+    //!! We should probably have the execution request handler create the
+    // session as
-        return new MavenSession( container, pluginManager, request.getLocalRepository(), request.getEventDispatcher(), request.getLog(), request.getGoals() );
+        return new MavenSession( container,
+                                 pluginManager,
+                                 request.getLocalRepository(),
+                                 request.getEventDispatcher(),
+                                 request.getLog(),
+                                 request.getGoals() );
-     * @todo [BP] this might not be required if there is a better way to pass them in. It doesn't feel quite right.
+     * @todo [BP] this might not be required if there is a better way to pass
+     *       them in. It doesn't feel quite right.
-    private void resolveParameters( MavenExecutionRequest request )
-        throws ComponentLookupException
+    private void resolveParameters( MavenExecutionRequest request ) throws ComponentLookupException
-            wagonManager.setProxy( "http", request.getParameter( "maven.proxy.http.host" ), port,
+            wagonManager.setProxy( "http",
+                                   request.getParameter( "maven.proxy.http.host" ),
+                                   port,
-        getLogger().info( "Final Memory: " + ( ( r.totalMemory() - r.freeMemory() ) / mb ) + "M/" + ( r.totalMemory() / mb ) + "M" );
+        getLogger().info( "Final Memory: " + ((r.totalMemory() - r.freeMemory()) / mb) + "M/" + (r.totalMemory() / mb)
+            + "M" );
-    public List getSortedProjects( List projects )
-        throws CycleDetectedException
+    public List getSortedProjects( List projects ) throws CycleDetectedException
-}
+}
