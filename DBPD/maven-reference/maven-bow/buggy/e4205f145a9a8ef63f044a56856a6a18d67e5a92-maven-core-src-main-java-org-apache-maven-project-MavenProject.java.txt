o starting to collapse the methods in the project builder
o rebuilder the maven metadata source 

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@772728 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.project.artifact.InvalidDependencyVersionException;
-import org.apache.maven.repository.VersionNotFoundException;
-    private File parentFile;
-
-    public File getParentFile()
-    {
-        return parentFile;
-    }
-
-    public void setParentFile( File parentFile )
-    {
-        this.parentFile = parentFile;
-    }
-
-        if ( model == null )
-        {
-            throw new IllegalArgumentException( "model: null" );
-        }
+     * @deprecated use {@link #clone()} so subclasses can provide a copy of the same class
+     */
+    @Deprecated
+    public MavenProject( MavenProject project )
+    {
+        deepCopy( project );
+    }
+    
+    @Deprecated
+    public MavenProject( Model model, RepositorySystem repositorySystem )
+    {        
+        this.repositorySystem = repositorySystem;
+        setModel( model );
+    }
+
+    private File parentFile;
+
+    public File getParentFile()
+    {
+        return parentFile;
+    }
+
+    public void setParentFile( File parentFile )
+    {
+        this.parentFile = parentFile;
+    }
+
+    /**
-        /*
-        DistributionManagement dm = model.getDistributionManagement();
-
-        if ( dm != null )
-        {
-            ArtifactRepository repo = repositorySystem.buildArtifactRepository( dm.getRepository() );
-            setReleaseArtifactRepository( repo );
-
-        }
-        */
-
-    /**
-     * @deprecated use {@link #clone()} so subclasses can provide a copy of the same class
-     */
-    @Deprecated
-    public MavenProject( MavenProject project )
-    {
-        deepCopy( project );
-    }
-
-        {
+        {            
+            System.out.println( "++> " + a.getArtifactId() );
+                    System.out.println( "--> " + a.getArtifactId() );
-    public Set<Artifact> createArtifacts( ArtifactFactory artifactFactory, String inheritedScope, ArtifactFilter dependencyFilter )
-        throws InvalidDependencyVersionException
+    //TODO: this method doesn't belong here at all
+    @Deprecated
+    public Set<Artifact> createArtifacts( ArtifactFilter filter )
-        try
+        Set<Artifact> artifacts = new HashSet<Artifact>();
+        
+        for( Dependency d : getDependencies() )
-            return repositorySystem.createArtifacts( getDependencies(), inheritedScope, dependencyFilter, this );
+            //TODO: something is wrong here because the scope of compile is never set correctly.
+            if ( d.getScope() == null )
+            {
+                d.setScope( Artifact.SCOPE_COMPILE );
+            }                        
+            
+            Artifact artifact = repositorySystem.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(), d.getScope(), d.getType() );
+            
+            if ( filter == null || filter.include( artifact ) )
+            {            
+                artifacts.add( artifact );
+            }
-        catch ( VersionNotFoundException e )
-        {
-            throw new InvalidDependencyVersionException( e.getProjectId(), e.getDependency(), e.getPomFile(), e.getCauseException() );
-        }
+        
+        return artifacts;
