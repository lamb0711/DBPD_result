Fold back into MavenRepositorySystem and work from there to clean up all references to the legacy system and Settings.

-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.Collections;
-import java.util.HashSet;
-import org.apache.maven.RepositoryUtils;
-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.metadata.ArtifactMetadata;
-import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-import org.apache.maven.artifact.repository.MavenArtifactRepository;
-import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
-import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout2;
-
-    private static final String WILDCARD = "*";
-
-    private static final String EXTERNAL_WILDCARD = "external:*";
-
-    private final Map<String, ArtifactRepositoryLayout> layouts;
-        
+            
+    private final MavenRepositorySystem repositorySystem;
+    
-    public DefaultMavenExecutionRequestPopulator( RepositorySystem repositorySystem, Map<String, ArtifactRepositoryLayout> layouts )
+    public DefaultMavenExecutionRequestPopulator( MavenRepositorySystem repositorySystem )
-        this.layouts = layouts;
+        this.repositorySystem = repositorySystem;
-                        request.addRemoteRepository( MavenRepositorySystem.buildArtifactRepository( remoteRepository ) );
+                        request.addRemoteRepository( repositorySystem.buildArtifactRepository( remoteRepository ) );
-                        request.addPluginArtifactRepository( MavenRepositorySystem.buildArtifactRepository( pluginRepository ) );
+                        request.addPluginArtifactRepository( repositorySystem.buildArtifactRepository( pluginRepository ) );
-        Set<String> definedRepositories = getRepoIds( request.getRemoteRepositories() );
+        Set<String> definedRepositories = repositorySystem.getRepoIds( request.getRemoteRepositories() );
-                request.addRemoteRepository( createDefaultRemoteRepository( request ) );
+                request.addRemoteRepository( repositorySystem.createDefaultRemoteRepository( request ) );
-        Set<String> definedRepositories = getRepoIds( request.getPluginArtifactRepositories() );
+        Set<String> definedRepositories = repositorySystem.getRepoIds( request.getPluginArtifactRepositories() );
-                request.addPluginArtifactRepository( createDefaultRemoteRepository( request ) );
+                request.addPluginArtifactRepository( repositorySystem.createDefaultRemoteRepository( request ) );
-    private ArtifactRepository createDefaultRemoteRepository( MavenExecutionRequest request )
-        throws Exception
-    {
-        return createRepository( request, RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID,
-                                 true, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, false,
-                                 ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY,
-                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
-    }
-    
-    private ArtifactRepository createRepository( MavenExecutionRequest request, String url, String repositoryId, boolean releases,
-                                                 String releaseUpdates, boolean snapshots, String snapshotUpdates,
-                                                 String checksumPolicy ) throws Exception
-    {
-        ArtifactRepositoryPolicy snapshotsPolicy =
-            new ArtifactRepositoryPolicy( snapshots, snapshotUpdates, checksumPolicy );
-
-        ArtifactRepositoryPolicy releasesPolicy =
-            new ArtifactRepositoryPolicy( releases, releaseUpdates, checksumPolicy );
-
-        return createArtifactRepository( repositoryId, url, "default", snapshotsPolicy, releasesPolicy, request );
-    }
-        
-    private Set<String> getRepoIds( List<ArtifactRepository> repositories )
-    {
-        Set<String> repoIds = new HashSet<String>();
-
-        if ( repositories != null )
-        {
-            for ( ArtifactRepository repository : repositories )
-            {
-                repoIds.add( repository.getId() );
-            }
-        }
-
-        return repoIds;
-    }
-
-        injectMirror( request, request.getRemoteRepositories(), request.getMirrors() );
-        injectMirror( request, request.getPluginArtifactRepositories(), request.getMirrors() );
+        repositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );
+        repositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );
-            return createLocalRepository( request, new File( localRepositoryPath ) );
+            return repositorySystem.createLocalRepository( request, new File( localRepositoryPath ) );
-    }
-    
-    //
-    // Code taken from LegacyRepositorySystem
-    //
-        
-    private ArtifactRepository createLocalRepository( MavenExecutionRequest request, File localRepository )
-        throws Exception
-    {
-        return createRepository( request, "file://" + localRepository.toURI().getRawPath(),
-                                 RepositorySystem.DEFAULT_LOCAL_REPO_ID, true,
-                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true,
-                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,
-                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE );
-    }
-    
-    private void injectMirror( MavenExecutionRequest request, List<ArtifactRepository> repositories, List<Mirror> mirrors )
-    {
-        if ( repositories != null && mirrors != null )
-        {
-            for ( ArtifactRepository repository : repositories )
-            {
-                Mirror mirror = getMirror( repository, mirrors );
-                injectMirror( request, repository, mirror );
-            }
-        }
-
-    private void injectMirror( MavenExecutionRequest request, ArtifactRepository repository, Mirror mirror )
-    {
-        if ( mirror != null )
-        {
-            ArtifactRepository original =
-                createArtifactRepository( repository.getId(), repository.getUrl(), repository.getLayout(),
-                                          repository.getSnapshots(), repository.getReleases(), request );
-
-            repository.setMirroredRepositories( Collections.singletonList( original ) );
-
-            repository.setId( mirror.getId() );
-            repository.setUrl( mirror.getUrl() );
-
-            if ( StringUtils.isNotEmpty( mirror.getLayout() ) )
-            {
-                repository.setLayout( getLayout( mirror.getLayout() ) );
-            }
-        }
-    }    
-       
-    private ArtifactRepositoryLayout getLayout( String id )
-    {
-        ArtifactRepositoryLayout layout = layouts.get( id );
-
-        if ( layout == null )
-        {
-            layout = new UnknownRepositoryLayout( id, layouts.get( "default" ) );
-        }
-
-        return layout;
-    }
-
-    /**
-     * In the future, the legacy system might encounter repository types for which no layout components exists because
-     * the actual communication with the repository happens via a repository connector. As a minimum, the legacy system
-     * needs to retain the id of this layout so that the content type of the remote repository can still be accurately
-     * described.
-     */
-    private static class UnknownRepositoryLayout
-        implements ArtifactRepositoryLayout
-    {
-
-        private final String id;
-
-        private final ArtifactRepositoryLayout fallback;
-
-        public UnknownRepositoryLayout( String id, ArtifactRepositoryLayout fallback )
-        {
-            this.id = id;
-            this.fallback = fallback;
-        }
-
-        @Override
-        public String getId()
-        {
-            return id;
-        }
-
-        @Override
-        public String pathOf( Artifact artifact )
-        {
-            return fallback.pathOf( artifact );
-        }
-
-        @Override
-        public String pathOfLocalRepositoryMetadata( ArtifactMetadata metadata, ArtifactRepository repository )
-        {
-            return fallback.pathOfLocalRepositoryMetadata( metadata, repository );
-        }
-
-        @Override
-        public String pathOfRemoteRepositoryMetadata( ArtifactMetadata metadata )
-        {
-            return fallback.pathOfRemoteRepositoryMetadata( metadata );
-        }
-
-        @Override
-        public String toString()
-        {
-            return getId();
-        }
-    }    
-    
-    //
-    // ArtifactRepositoryFactory
-    //
-    private ArtifactRepository createArtifactRepository( String id, String url, String layoutId,
-                                                        ArtifactRepositoryPolicy snapshots,
-                                                        ArtifactRepositoryPolicy releases,
-                                                        MavenExecutionRequest request )
-        throws Exception
-    {
-        ArtifactRepositoryLayout layout = layouts.get( layoutId );
-
-        checkLayout( id, layoutId, layout );
-
-        return createArtifactRepository( id, url, layout, snapshots, releases, request );
-    }
-
-    private ArtifactRepository createArtifactRepository( String id, String url,
-                                                        ArtifactRepositoryLayout repositoryLayout,
-                                                        ArtifactRepositoryPolicy snapshots,
-                                                        ArtifactRepositoryPolicy releases,
-                                                        MavenExecutionRequest request )
-    {
-        String globalChecksumPolicy = request.getGlobalChecksumPolicy();
-      
-        if ( snapshots == null )
-        {
-            snapshots = new ArtifactRepositoryPolicy();
-        }
-
-        if ( releases == null )
-        {
-            releases = new ArtifactRepositoryPolicy();
-        }
-
-        if ( globalChecksumPolicy != null )
-        {
-            snapshots.setChecksumPolicy( globalChecksumPolicy );
-            releases.setChecksumPolicy( globalChecksumPolicy );
-        }
-
-        ArtifactRepository repository;
-        if ( repositoryLayout instanceof ArtifactRepositoryLayout2 )
-        {
-            repository =
-                ( (ArtifactRepositoryLayout2) repositoryLayout ).newMavenArtifactRepository( id, url, snapshots,
-                                                                                             releases );
-        }
-        else
-        {
-            repository = new MavenArtifactRepository( id, url, repositoryLayout, snapshots, releases );
-        }
-
-        return repository;
-    }
-    
-    private void checkLayout( String repositoryId, String layoutId, ArtifactRepositoryLayout layout )
-        throws Exception
-    {
-        if ( layout == null )
-        {
-            throw new Exception( String.format( "Cannot find ArtifactRepositoryLayout instance for: %s %s", layoutId, repositoryId ) );
-        }
-    }
-    
-    //
-    // MirrorSelector
-    //
-    private Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )
-    {
-        String repoId = repository.getId();
-
-        if ( repoId != null && mirrors != null )
-        {
-            for ( Mirror mirror : mirrors )
-            {
-                if ( repoId.equals( mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
-                {
-                    return mirror;
-                }
-            }
-
-            for ( Mirror mirror : mirrors )
-            {
-                if ( matchPattern( repository, mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
-                {
-                    return mirror;
-                }
-            }
-        }
-
-        return null;
-    }
-
-    /**
-     * This method checks if the pattern matches the originalRepository. Valid patterns: * =
-     * everything external:* = everything not on the localhost and not file based. repo,repo1 = repo
-     * or repo1 *,!repo1 = everything except repo1
-     *
-     * @param originalRepository to compare for a match.
-     * @param pattern used for match. Currently only '*' is supported.
-     * @return true if the repository is a match to this pattern.
-     */
-    private boolean matchPattern( ArtifactRepository originalRepository, String pattern )
-    {
-        boolean result = false;
-        String originalId = originalRepository.getId();
-
-        // simple checks first to short circuit processing below.
-        if ( WILDCARD.equals( pattern ) || pattern.equals( originalId ) )
-        {
-            result = true;
-        }
-        else
-        {
-            // process the list
-            String[] repos = pattern.split( "," );
-            for ( String repo : repos )
-            {
-                repo = repo.trim();
-                // see if this is a negative match
-                if ( repo.length() > 1 && repo.startsWith( "!" ) )
-                {
-                    if ( repo.substring( 1 ).equals( originalId ) )
-                    {
-                        // explicitly exclude. Set result and stop processing.
-                        result = false;
-                        break;
-                    }
-                }
-                // check for exact match
-                else if ( repo.equals( originalId ) )
-                {
-                    result = true;
-                    break;
-                }
-                // check for external:*
-                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
-                {
-                    result = true;
-                    // don't stop processing in case a future segment explicitly excludes this repo
-                }
-                else if ( WILDCARD.equals( repo ) )
-                {
-                    result = true;
-                    // don't stop processing in case a future segment explicitly excludes this repo
-                }
-            }
-        }
-        return result;
-    }
-
-    /**
-     * Checks the URL to see if this repository refers to an external repository
-     *
-     * @param originalRepository
-     * @return true if external.
-     */
-    private boolean isExternalRepo( ArtifactRepository originalRepository )
-    {
-        try
-        {
-            URL url = new URL( originalRepository.getUrl() );
-            return !( url.getHost().equals( "localhost" ) || url.getHost().equals( "127.0.0.1" )
-                            || url.getProtocol().equals( "file" ) );
-        }
-        catch ( MalformedURLException e )
-        {
-            // bad url just skip it here. It should have been validated already, but the wagon lookup will deal with it
-            return false;
-        }
-    }
-
-    private boolean matchesLayout( ArtifactRepository repository, Mirror mirror )
-    {
-        return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );
-    }
-
-    /**
-     * Checks whether the layouts configured for a mirror match with the layout of the repository.
-     *
-     * @param repoLayout The layout of the repository, may be {@code null}.
-     * @param mirrorLayout The layouts supported by the mirror, may be {@code null}.
-     * @return {@code true} if the layouts associated with the mirror match the layout of the original repository,
-     *         {@code false} otherwise.
-     */
-    private boolean matchesLayout( String repoLayout, String mirrorLayout )
-    {
-        boolean result = false;
-
-        // simple checks first to short circuit processing below.
-        if ( StringUtils.isEmpty( mirrorLayout ) || WILDCARD.equals( mirrorLayout ) )
-        {
-            result = true;
-        }
-        else if ( mirrorLayout.equals( repoLayout ) )
-        {
-            result = true;
-        }
-        else
-        {
-            // process the list
-            String[] layouts = mirrorLayout.split( "," );
-            for ( String layout : layouts )
-            {
-                // see if this is a negative match
-                if ( layout.length() > 1 && layout.startsWith( "!" ) )
-                {
-                    if ( layout.substring( 1 ).equals( repoLayout ) )
-                    {
-                        // explicitly exclude. Set result and stop processing.
-                        result = false;
-                        break;
-                    }
-                }
-                // check for exact match
-                else if ( layout.equals( repoLayout ) )
-                {
-                    result = true;
-                    break;
-                }
-                else if ( WILDCARD.equals( layout ) )
-                {
-                    result = true;
-                    // don't stop processing in case a future segment explicitly excludes this repo
-                }
-            }
-        }
-
-        return result;
-    }    
