Fixing it0013 and it0020, and adding next installment of describe mojo implementation.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@294957 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.MavenSession;
+import org.apache.maven.plugin.MojoFailureException;
+import java.util.List;
+     * @parameter expression="${session}"
+     * @required
+     * @readonly
+     */
+    private MavenSession session;
+
+    /**
-        throws MojoExecutionException
+        throws MojoExecutionException, MojoFailureException
-        String pluginPrefix = null;
-
-        if ( plugin != null && plugin.length() > 0 )
-        {
-            if ( plugin.indexOf( ":" ) > -1 )
-            {
-                String[] pluginParts = plugin.split( ":" );
-
-                switch ( pluginParts.length )
-                {
-                    case ( 1 ):
-                    {
-                        pluginPrefix = pluginParts[0];
-                        break;
-                    }
-                    case ( 2 ):
-                    {
-                        groupId = pluginParts[0];
-                        artifactId = pluginParts[1];
-                        break;
-                    }
-                    case ( 3 ):
-                    {
-                        groupId = pluginParts[0];
-                        artifactId = pluginParts[1];
-                        version = pluginParts[2];
-                        break;
-                    }
-                    default:
-                    {
-                        throw new MojoExecutionException(
-                                                          "plugin parameter must be a plugin prefix, or conform to: 'groupId:artifactId[:version]." );
-                    }
-                }
-            }
-            else
-            {
-                pluginPrefix = plugin;
-            }
-        }
-
-        PluginDescriptor descriptor;
-
-        if ( pluginPrefix != null )
-        {
-            descriptor = pluginManager.getPluginDescriptorForPrefix( pluginPrefix );
-        }
-        else if ( groupId != null && artifactId != null )
-        {
-            Plugin plugin = new Plugin();
-
-            plugin.setGroupId( groupId );
-            plugin.setArtifactId( artifactId );
-
-            if ( version != null )
-            {
-                plugin.setVersion( version );
-            }
-
-            try
-            {
-                descriptor = pluginManager.verifyPlugin( plugin, project, settings, localRepository );
-            }
-            catch ( ArtifactResolutionException e )
-            {
-                throw new MojoExecutionException( "Error retrieving plugin descriptor for:\n\ngroupId: \'" + groupId
-                    + "\'\nartifactId: \'" + artifactId + "\'\nversion: \'" + version + "\'\n\n", e );
-            }
-            catch ( PluginManagerException e )
-            {
-                throw new MojoExecutionException( "Error retrieving plugin descriptor for:\n\ngroupId: \'" + groupId
-                    + "\'\nartifactId: \'" + artifactId + "\'\nversion: \'" + version + "\'\n\n", e );
-            }
-            catch ( PluginVersionResolutionException e )
-            {
-                throw new MojoExecutionException( "Error retrieving plugin descriptor for:\n\ngroupId: \'" + groupId
-                    + "\'\nartifactId: \'" + artifactId + "\'\nversion: \'" + version + "\'\n\n", e );
-            }
-        }
-        else
-        {
-            throw new MojoExecutionException(
-                                              "You must either specify \'groupId\' and \'artifactId\', or a valid \'plugin\' parameter." );
-        }
+        PluginInfo pi = new PluginInfo();
+        
+        parsePluginLookupInfo( pi );
+        
+        PluginDescriptor descriptor = lookupPluginDescriptor( pi );
+        writeDescription( descriptionBuffer );
+    }
+
+    private void writeDescription( StringBuffer descriptionBuffer ) throws MojoExecutionException
+    {
+                output.getParentFile().mkdirs();
+                
-            System.out.println( descriptionBuffer.toString() );
+            getLog().info( descriptionBuffer.toString() );
+        }
+    }
+
+    private PluginDescriptor lookupPluginDescriptor( PluginInfo pi ) throws MojoExecutionException, MojoFailureException
+    {
+        PluginDescriptor descriptor = null;
+        
+        Plugin forLookup = null;
+        
+        if ( pi.prefix != null )
+        {
+            descriptor = pluginManager.getPluginDescriptorForPrefix( pi.prefix );
+            
+            if ( descriptor == null )
+            {
+                try
+                {
+                    forLookup = pluginManager.getPluginDefinitionForPrefix( pi.prefix, session, project );
+                }
+                catch ( PluginManagerException e )
+                {
+                    throw new MojoExecutionException(
+                        "Cannot resolve plugin-prefix: \'" + pi.prefix + "\' from plugin mappings metadata.", e );
+                }
+            }
+        }
+        else if ( pi.groupId != null && pi.artifactId != null )
+        {
+            forLookup = new Plugin();
+            
+            forLookup.setGroupId( pi.groupId );
+            forLookup.setArtifactId( pi.artifactId );
+
+            if ( pi.version != null )
+            {
+                forLookup.setVersion( pi.version );
+            }
+        }
+        else
+        {
+            throw new MojoFailureException("You must either specify \'groupId\' and \'artifactId\', or a valid \'plugin\' parameter." );
+        }
+        
+        if ( descriptor == null && forLookup != null )
+        {
+            try
+            {
+                descriptor = pluginManager.verifyPlugin( forLookup, project, settings, localRepository );
+            }
+            catch ( ArtifactResolutionException e )
+            {
+                throw new MojoExecutionException( "Error retrieving plugin descriptor for:\n\ngroupId: \'" + groupId
+                    + "\'\nartifactId: \'" + artifactId + "\'\nversion: \'" + version + "\'\n\n", e );
+            }
+            catch ( PluginManagerException e )
+            {
+                throw new MojoExecutionException( "Error retrieving plugin descriptor for:\n\ngroupId: \'" + groupId
+                    + "\'\nartifactId: \'" + artifactId + "\'\nversion: \'" + version + "\'\n\n", e );
+            }
+            catch ( PluginVersionResolutionException e )
+            {
+                throw new MojoExecutionException( "Error retrieving plugin descriptor for:\n\ngroupId: \'" + groupId
+                    + "\'\nartifactId: \'" + artifactId + "\'\nversion: \'" + version + "\'\n\n", e );
+            }
+        }
+        
+        return descriptor;
+    }
+
+    private void parsePluginLookupInfo( PluginInfo pi ) throws MojoFailureException
+    {
+        if ( plugin != null && plugin.length() > 0 )
+        {
+            if ( plugin.indexOf( ":" ) > -1 )
+            {
+                String[] pluginParts = plugin.split( ":" );
+
+                switch ( pluginParts.length )
+                {
+                    case ( 1 ):
+                    {
+                        pi.prefix = pluginParts[0];
+                        break;
+                    }
+                    case ( 2 ):
+                    {
+                        pi.groupId = pluginParts[0];
+                        pi.artifactId = pluginParts[1];
+                        break;
+                    }
+                    case ( 3 ):
+                    {
+                        pi.groupId = pluginParts[0];
+                        pi.artifactId = pluginParts[1];
+                        pi.version = pluginParts[2];
+                        break;
+                    }
+                    default:
+                    {
+                        throw new MojoFailureException("plugin parameter must be a plugin prefix, or conform to: 'groupId:artifactId[:version]." );
+                    }
+                }
+            }
+            else
+            {
+                pi.prefix = plugin;
+            }
+        }
+        else
+        {
+            pi.groupId = groupId;
+            pi.artifactId = artifactId;
+            pi.version = version;
-        buffer.append( "Description of Plugin" ).append( "\n-----------------------------------------------" )
-            .append( "\n\nGroup Id:  " ).append( pd.getGroupId() ).append( "\nArtifact Id: " )
-            .append( pd.getArtifactId() ).append( "\nVersion:     " ).append( pd.getVersion() )
-            .append( "\nGoal Prefix: " ).append( pd.getGoalPrefix() ).append( "\n\nMojos:" )
-            .append( "\n-----------------------------------------------" ).append( "\n\n" );
+        buffer.append( "Plugin: \'" ).append( pd.getName() ).append( '\'' );
+        buffer.append( "\n-----------------------------------------------" );
+        buffer.append( "\nGroup Id:  " ).append( pd.getGroupId() );
+        buffer.append( "\nArtifact Id: " ).append( pd.getArtifactId() );
+        buffer.append( "\nVersion:     " ).append( pd.getVersion() );
+        buffer.append( "\nGoal Prefix: " ).append( pd.getGoalPrefix() );
+        buffer.append( "\nDescription:\n\n" ).append( pd.getDescription() ).append( "\n" );
+        buffer.append( "\nMojos:\n" );
+            buffer.append( "\nGoal: \'" ).append( md.getGoal() ).append( '\'' );
+            buffer.append( "\n========================================" );
+            
-
-            buffer.append( "\n-----------------------------------------------" ).append( "\n\n" );
+            
+            buffer.append( "\n\n" );
-        buffer.append( "Description of Mojo" ).append( "\n-----------------------------------------------" )
-            .append( "\n\n" );
+        buffer.append( "Mojo: \'" ).append( md.getFullGoalName() ).append( '\'' );
+        buffer.append( "\n-----------------------------------------------" );
+        buffer.append( "\nGoal: \'" ).append( md.getGoal() ).append( "\'" );
+        
+        buffer.append( "\n\n" );
-        // TODO Complete mojo description dump.
-        buffer.append( "TODO!" );
+        buffer.append( "\nDescription:\n\n" ).append( md.getDescription() ).append( "\n" );
+        
+        String deprecation = md.getDeprecated();
+        
+        if ( deprecation != null )
+        {
+            buffer.append( "\n\nNOTE: This mojo is deprecated.\n" ).append( deprecation ).append( "\n" );
+        }
+        
+        buffer.append( "\nImplementation: " ).append( md.getImplementation() );
+        buffer.append( "\nLanguage: " ).append( md.getLanguage() );
+        
+        String phase = md.getPhase();
+        if ( phase != null )
+        {
+            buffer.append( "\nBound to Phase: " ).append( phase );
+        }
+        
+        String eGoal = md.getExecuteGoal();
+        String eLife = md.getExecuteLifecycle();
+        String ePhase = md.getExecutePhase();
+        
+        List parameters = md.getParameters();
+        
+        List requirements = md.getRequirements();
+    
+    private static class PluginInfo
+    {
+        String prefix;
+        String groupId;
+        String artifactId;
+        String version;
+        String mojo;
+        
+        Plugin plugin;
+        PluginDescriptor pluginDescriptor;
+    }
