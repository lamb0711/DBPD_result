Separated out the interpolation from the build.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@761609 13f79535-47bb-0310-9956-ffa450edef68

+    	//Do inheritance
-     
-        MavenProject project = buildWithProfiles( domainModel, configuration, pomFile );
+
+		//Profiles
+        List<Profile> projectProfiles;
+        try
+        {
+        	projectProfiles = ProfileContext.getActiveProfilesFrom(configuration, domainModel.getModel(), container);
+        }
+        catch ( ProfileActivationException e )
+        {
+            throw new ProjectBuildingException( "", "Failed to activate pom profiles.");
+        }   
+        catch(IOException e)
+        {
+        	throw new ProjectBuildingException( "", "Failed to activate pom profiles.");	
+        }
+        
+        try
+        {
+            domainModel = ProcessorContext.mergeProfilesIntoModel( projectProfiles, domainModel );
+        }
+        catch ( IOException e )
+        {
+            throw new ProjectBuildingException("", "");
+        }  		
+		//Interpolation
+        MavenProject project = interpolateDomainModel( domainModel, configuration, pomFile );
+        project.setActiveProfiles( projectProfiles );
+        
+        if(configuration.getRemoteRepositories() == null)
+        {
+        	throw new IllegalArgumentException("configuration.getRemoteRepositories(): null");
+        }
-
-        project = buildWithProfiles( domainModel, configuration, artifact.getFile() );
+        List<Profile> projectProfiles;
+        try
+        {
+        	projectProfiles = ProfileContext.getActiveProfilesFrom(configuration, domainModel.getModel(), container);
+        }
+        catch ( ProfileActivationException e )
+        {
+            throw new ProjectBuildingException( "", "Failed to activate pom profiles.");
+        }   
+        catch(IOException e)
+        {
+        	throw new ProjectBuildingException( "", "Failed to activate pom profiles.");	
+        }
+        
+        try
+        {
+            domainModel = ProcessorContext.mergeProfilesIntoModel( projectProfiles, domainModel );
+        }
+        catch ( IOException e )
+        {
+            throw new ProjectBuildingException("", "");
+        }
+        project = interpolateDomainModel( domainModel, configuration, artifact.getFile() );
+        project.setActiveProfiles( projectProfiles );
+    	if(remoteRepositories == null)
+    	{
+    		throw new IllegalArgumentException("repositories: null");
+    	}
-
-    private MavenProject buildWithProfiles( PomClassicDomainModel domainModel, ProjectBuilderConfiguration config, File projectDescriptor )
+    
+    private MavenProject interpolateDomainModel( PomClassicDomainModel domainModel, ProjectBuilderConfiguration config, File projectDescriptor )
-		File parentDescriptor = domainModel.getParentFile();
-
-        List<Profile> projectProfiles;
-        try
-        {
-        	projectProfiles = ProfileContext.getActiveProfilesFrom(config, model, container);
-        }
-        catch ( ProfileActivationException e )
-        {
-            throw new ProjectBuildingException( projectId, "Failed to activate pom profiles.", projectDescriptor,
-                                                e );
-        }
-        }
-
-        try
-        {
-            PomClassicDomainModel dm = ProcessorContext.mergeProfilesIntoModel( projectProfiles, domainModel );
-            List<ModelProperty> mps = dm.getModelProperties();
-            ProcessorContext.interpolateModelProperties( mps, interpolatorProperties, dm );
-            if ( dm.getProjectDirectory() != null )
+        }      
+            try
-                mps = ProcessorContext.alignPaths( mps, dm.getProjectDirectory() );
-            }
-            dm = new PomClassicDomainModel( mps, false );
-            model = dm.getModel();
-        }
-        catch ( IOException e )
-        {
+            	List<ModelProperty> mps = domainModel.getModelProperties();
+            	ProcessorContext.interpolateModelProperties( mps, interpolatorProperties, domainModel );
+            	if ( domainModel.getProjectDirectory() != null )
+            	{
+            		mps = ProcessorContext.alignPaths( mps, domainModel.getProjectDirectory() );
+            	}
+            	File f = domainModel.getParentFile();
+            	domainModel = new PomClassicDomainModel( mps, false );
+            	domainModel.setParentFile(f);
+            	model = domainModel.getModel();
-            throw new ProjectBuildingException( projectId, "", projectDescriptor, e );
-        }   
+            }
+            catch ( IOException e )
+            {
+
+                throw new ProjectBuildingException(projectId, "", projectDescriptor, e);
+            }   
-            project.setParentFile( parentDescriptor );
+            project.setParentFile( domainModel.getParentFile() );
-        project.setActiveProfiles( projectProfiles );
-
-            			profileModels.add(ProcessorContext.mergeProfilesIntoModel( profileContext1.getActiveProfiles(), dm ));  
+            			profileModels.add(ProcessorContext.mergeProfilesIntoModel( profiles, dm ));  
