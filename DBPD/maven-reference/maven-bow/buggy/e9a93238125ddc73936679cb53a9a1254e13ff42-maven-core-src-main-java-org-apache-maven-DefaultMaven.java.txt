o Changed maven-user-model/UserModel/UserModelBuilder to maven-settings/MavenSettings/MavenSettingsBuilder.

  This supports a change to a simpler local configuration file (~/.m2/settings.xml by default), which has the general format of:

<settings>
  <profiles>
    <profile>
      <active>true</active> <!-- not needed if this is the only profile -->
      <localRepository>/path/to/repo</localRepository>
    </profile>
    .
    .
    .
  </profiles>
  <servers>
    <server>
      <id>myserver</id>
      <username>me</username>
      <password>mypass</password>
      <privateKey>/path/to/key</privateKey>
      <passphrase>key-passphrase</passphrase>
    </server>
    .
    .
    .
  </servers>
  <proxies>
    <proxy>
      <active>true</active> <!-- not needed if this is the only proxy -->
      .
      .
      .
    </proxy>
    .
    .
    .
  </proxies>
</settings>

o Added special parameter named '#settings' which simply injects the current MavenSettings from the MavenSession into the request parameters.
o Adjusted the it-verifier and mboot2 accordingly.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163578 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.user.ProxyProfile;
-import org.apache.maven.model.user.UserModel;
-import org.apache.maven.model.user.UserModelUtils;
+import org.apache.maven.settings.MavenSettings;
+import org.apache.maven.settings.Proxy;
-
-        session.setRemoteRepositories( getArtifactRepositories( project, request.getUserModel() ) );
+        
+        session.setRemoteRepositories( getArtifactRepositories( project, request.getSettings() ) );
-    private List getArtifactRepositories( MavenProject project, UserModel userModel )
+    private List getArtifactRepositories( MavenProject project, MavenSettings settings )
-            remoteRepos.add( artifactRepositoryFactory.createArtifactRepository( modelRepo, userModel ) );
+            remoteRepos.add( artifactRepositoryFactory.createArtifactRepository( modelRepo, settings ) );
-        return new MavenSession( container, pluginManager, request.getUserModel(), request.getLocalRepository(),
+        return new MavenSession( container, pluginManager, request.getSettings(), request.getLocalRepository(),
-        UserModel userModel = request.getUserModel();
+        MavenSettings settings = request.getSettings();
-        ProxyProfile proxyProfile = UserModelUtils.getActiveProxyProfile( userModel );
+        Proxy proxy = settings.getActiveProxy();
-        if ( proxyProfile != null )
+        if ( proxy != null )
-            wagonManager.setProxy( proxyProfile.getProtocol(), proxyProfile.getHost(), proxyProfile.getPort(),
-                                   proxyProfile.getUsername(), proxyProfile.getPassword(),
-                                   proxyProfile.getNonProxyHosts() );
+            wagonManager.setProxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),
+                                   proxy.getUsername(), proxy.getPassword(),
+                                   proxy.getNonProxyHosts() );
