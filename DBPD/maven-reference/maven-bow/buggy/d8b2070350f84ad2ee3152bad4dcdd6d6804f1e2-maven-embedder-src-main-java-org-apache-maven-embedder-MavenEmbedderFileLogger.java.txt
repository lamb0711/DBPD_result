o Fixed file logger to properly log exception stack traces

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@804164 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
+import java.io.FileNotFoundException;
+import java.io.PrintStream;
-    extends AbstractMavenEmbedderLogger
+    extends MavenEmbedderPrintStreamLogger
-    private PrintWriter log;
+        super( openStream( logFile ) );
+    }
+
+    private static PrintStream openStream( File logFile )
+    {
-            this.log = new PrintWriter( new FileWriter( logFile ) ); // platform encoding
+            return new PrintStream( logFile );
-        catch ( IOException e )
+        catch ( FileNotFoundException e )
-            // The client must make sure the file is valid.
-            // TODO: [BP] would just throwing the IOE be better? We can't just ignore it, since that would give misleading NPE's later
-            throw new RuntimeException( "The embedder was unable to write to the specified log file: " + logFile, e );
+            throw new IllegalArgumentException( "Cannot open specified log file " + logFile, e );
-    public void debug( String message,
-                       Throwable throwable )
-    {
-        if ( isDebugEnabled() )
-        {
-            print( "[DEBUG] " );
-            println( message );
-
-            if ( null != throwable )
-            {
-                throwable.printStackTrace( System.out );
-            }
-        }
-    }
-
-    public void info( String message,
-                      Throwable throwable )
-    {
-        if ( isInfoEnabled() )
-        {
-            print( "[INFO] " );
-            println( message );
-
-            if ( null != throwable )
-            {
-                throwable.printStackTrace( System.out );
-            }
-        }
-    }
-
-    public void warn( String message,
-                      Throwable throwable )
-    {
-        if ( isWarnEnabled() )
-        {
-            print( "[WARNING] " );
-            println( message );
-
-            if ( null != throwable )
-            {
-                throwable.printStackTrace( System.out );
-            }
-        }
-    }
-
-    public void error( String message,
-                       Throwable throwable )
-    {
-        if ( isErrorEnabled() )
-        {
-            print( "[ERROR] " );
-            println( message );
-
-            if ( null != throwable )
-            {
-                throwable.printStackTrace( System.out );
-            }
-        }
-    }
-
-    public void fatalError( String message,
-                            Throwable throwable )
-    {
-        if ( isFatalErrorEnabled() )
-        {
-            print( "[ERROR] " );
-            println( message );
-
-            if ( null != throwable )
-            {
-                throwable.printStackTrace( System.out );
-            }
-        }
-    }
-
-    protected void print( String message )
-    {
-        log.print( message );
-    }
-
-    protected void println( String message )
-    {
-        log.println( message );
-    }
-
-    public void close()
-    {
-        log.flush();
-
-        log.close();
-    }
