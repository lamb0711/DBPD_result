Updated model processors.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@752990 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.PluginExecution;
-import org.codehaus.plexus.util.xml.Xpp3DomBuilder;
-import org.codehaus.plexus.util.xml.Xpp3DomUtils;
-    private static void copy(Plugin p1, Plugin p2)
+    private static void copy(Plugin source, Plugin target)
-        if(p2.getArtifactId() == null)
+        if(target.getArtifactId() == null)
-            p2.setArtifactId( p1.getArtifactId() );   
+            target.setArtifactId( source.getArtifactId() );   
-        if(p2.getGroupId() == null)
+        target.setGroupId( source.getGroupId() );    
+        
+        if(target.getInherited() == null)
-            p2.setGroupId( p1.getGroupId() );    
+            target.setInherited( source.getInherited() );    
-        if(p2.getInherited() == null)
+        if(target.getVersion() == null)
-            p2.setInherited( p1.getInherited() );    
+            target.setVersion( source.getVersion() );    
-        if(p2.getVersion() == null)
-        {
-            p2.setVersion( p1.getVersion() );    
-        }
-        if(p2.getDependencies().isEmpty())
+        for( PluginExecution pe : source.getExecutions())
-            DependenciesProcessor proc = new DependenciesProcessor();
-            proc.process( new ArrayList<Dependency>(), new ArrayList<Dependency>(p1.getDependencies()), p2.getDependencies(), false );            
+            PluginExecution idMatch = contains(pe, target.getExecutions());
+            if(idMatch != null)//Join
+            {
+               copyPluginExecution(pe, idMatch);    
+            }
+            else 
+            {
+                PluginExecution targetPe = new PluginExecution();
+                copyPluginExecution(pe, targetPe); 
+                target.addExecution( targetPe );
+            }
+            
+        }
+     
+        DependenciesProcessor proc = new DependenciesProcessor();
+        if(target.getDependencies().isEmpty())
+        {
+            
+            proc.process( new ArrayList<Dependency>(), new ArrayList<Dependency>(source.getDependencies()), target.getDependencies(), false );            
-            DependenciesProcessor proc = new DependenciesProcessor();
-            proc.process( new ArrayList<Dependency>(p1.getDependencies()), new ArrayList<Dependency>(), p2.getDependencies(), false );            
+            proc.process( new ArrayList<Dependency>(source.getDependencies()), new ArrayList<Dependency>(), target.getDependencies(), false );            
-        if(p1.getConfiguration() != null)
+        if(source.getConfiguration() != null)
-            if(p2.getConfiguration() != null)
+            if(target.getConfiguration() != null)
-                p2.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) p1.getConfiguration(), (Xpp3Dom) p2.getConfiguration() ));     
+                target.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) source.getConfiguration(), (Xpp3Dom) target.getConfiguration() ));     
-                p2.setConfiguration( p1.getConfiguration() );
+                target.setConfiguration( source.getConfiguration() );
-        //Executions
-        p2.setExtensions(p1.isExtensions());
+        target.setExtensions(source.isExtensions()); 
+    }
+    
+    private static PluginExecution contains(PluginExecution pe, List<PluginExecution> executions)
+    {
+        String executionId = (pe.getId() != null) ? pe.getId() : "";
+        for(PluginExecution e : executions)
+        {
+            String id = (e.getId() != null) ? e.getId() : "";
+            if(executionId.equals( id ))
+            {
+                return  e;
+            }
+        }
+        return null;
+    }
+    
+    private static void copyPluginExecution(PluginExecution source, PluginExecution target)
+    {
+        target.setId( source.getId() );
+        if(target.getInherited() == null)
+        {
+            target.setInherited( source.getInherited() );
+        }
+        if(target.getPhase() == null)
+        {
+            target.setPhase( source.getPhase() );
+        }
+        List<String> goals = new ArrayList<String>(target.getGoals());
+        for(String goal : source.getGoals())
+        {
+            if(!goals.contains( goal ))
+            {
+                goals.add( goal );    
+            }
+            
+        }    
+        target.setGoals( goals );
+        
+        if(target.getConfiguration() != null)
+        {
+            target.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) source.getConfiguration(), (Xpp3Dom) target.getConfiguration() ));     
+        }
+        else
+        {
+            target.setConfiguration( source.getConfiguration() );
+        }       
