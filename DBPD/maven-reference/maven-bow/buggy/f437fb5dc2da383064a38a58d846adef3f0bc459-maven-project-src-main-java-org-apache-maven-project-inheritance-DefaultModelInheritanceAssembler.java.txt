Resolving: MNG-773

o Separated profile injection logic from the inheritance assembly. While they look similar superficially, the
  merge-out vs. merge-in semantics make it pretty complex to put this logic together in the same methods. It's
  easier to understand what's going on if they remain similar but separate code...

o Added it0058 to test that application of a profile from settings.xml doesn't transport module lists from POM
  to POM inside of a reactor build.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@239918 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.DependencyManagement;
+import org.apache.maven.model.PluginManagement;
+import org.apache.maven.model.ReportPlugin;
+import org.apache.maven.model.ReportSet;
+import org.apache.maven.model.Reporting;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
+        
+        assembleDependencyInheritance( child, parent );
-        ModelUtils.mergeModelBases( child, parent, false );
+        child.setRepositories( ModelUtils.mergeRepositoryLists( child.getRepositories(), parent.getRepositories() ) );
+        child.setPluginRepositories( ModelUtils.mergeRepositoryLists( child.getPluginRepositories(), parent.getPluginRepositories() ) );
+        
+        assembleReportingInheritance( child, parent );
+        
+        assembleDependencyManagementInheritance( child, parent );
+        
+        assembleDistributionManagementInheritance( child, parent );
+    }
+
+    private void assembleDistributionManagementInheritance( Model child, Model parent )
+    {
+        DistributionManagement cDistMgmt = child.getDistributionManagement();
+        DistributionManagement pDistMgmt = parent.getDistributionManagement();
+        
+        if ( cDistMgmt == null )
+        {
+            child.setDistributionManagement( pDistMgmt );
+        }
+        else if ( pDistMgmt != null )
+        {
+            if ( cDistMgmt.getRepository() == null )
+            {
+                cDistMgmt.setRepository( pDistMgmt.getRepository() );
+            }
+            
+            if ( cDistMgmt.getSnapshotRepository() == null )
+            {
+                cDistMgmt.setSnapshotRepository( pDistMgmt.getSnapshotRepository() );
+            }
+            
+            if ( StringUtils.isEmpty( cDistMgmt.getDownloadUrl() ) )
+            {
+                cDistMgmt.setDownloadUrl( pDistMgmt.getDownloadUrl() );
+            }
+            
+            if ( cDistMgmt.getRelocation() == null )
+            {
+                cDistMgmt.setRelocation( pDistMgmt.getRelocation() );
+            }
+            
+            if ( cDistMgmt.getSite() == null )
+            {
+                cDistMgmt.setSite( pDistMgmt.getSite() );
+            }
+            
+            // NOTE: We SHOULD NOT be inheriting status, since this is an assessment of the POM quality.
+        }
+    }
+
+    private void assembleDependencyManagementInheritance( Model child, Model parent )
+    {
+        DependencyManagement parentDepMgmt = parent.getDependencyManagement();
+
+        DependencyManagement childDepMgmt = child.getDependencyManagement();
+
+        if ( parentDepMgmt != null )
+        {
+            if ( childDepMgmt == null )
+            {
+                child.setDependencyManagement( parentDepMgmt );
+            }
+            else
+            {
+                List childDeps = childDepMgmt.getDependencies();
+
+                Map mappedChildDeps = new TreeMap();
+                for ( Iterator it = childDeps.iterator(); it.hasNext(); )
+                {
+                    Dependency dep = (Dependency) it.next();
+                    mappedChildDeps.put( dep.getManagementKey(), dep );
+                }
+
+                for ( Iterator it = parentDepMgmt.getDependencies().iterator(); it.hasNext(); )
+                {
+                    Dependency dep = (Dependency) it.next();
+                    if ( !mappedChildDeps.containsKey( dep.getManagementKey() ) )
+                    {
+                        childDepMgmt.addDependency( dep );
+                    }
+                }
+            }
+        }
+    }
+
+    private void assembleReportingInheritance( Model child, Model parent )
+    {
+        // Reports :: aggregate
+        Reporting childReporting = child.getReporting();
+        Reporting parentReporting = parent.getReporting();
+
+        if ( childReporting != null && parentReporting != null )
+        {
+            if ( StringUtils.isEmpty( childReporting.getOutputDirectory() ) )
+            {
+                childReporting.setOutputDirectory( parentReporting.getOutputDirectory() );
+            }
+
+            Map mergedReportPlugins = new HashMap();
+
+            Map childReportersByKey = childReporting.getReportPluginsAsMap();
+
+            List parentReportPlugins = parentReporting.getPlugins();
+
+            if ( parentReportPlugins != null )
+            {
+                for ( Iterator it = parentReportPlugins.iterator(); it.hasNext(); )
+                {
+                    ReportPlugin parentReportPlugin = (ReportPlugin) it.next();
+
+                    String inherited = parentReportPlugin.getInherited();
+
+                    if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
+                    {
+                        ReportPlugin childReportPlugin = (ReportPlugin) childReportersByKey.get(
+                            parentReportPlugin.getKey() );
+
+                        ReportPlugin mergedReportPlugin = parentReportPlugin;
+
+                        if ( childReportPlugin != null )
+                        {
+                            mergedReportPlugin = childReportPlugin;
+
+                            mergeReportPlugins( childReportPlugin, parentReportPlugin );
+                        }
+                        else if ( StringUtils.isEmpty( inherited ) )
+                        {
+                            mergedReportPlugin.unsetInheritanceApplied();
+                        }
+
+                        mergedReportPlugins.put( mergedReportPlugin.getKey(), mergedReportPlugin );
+                    }
+                }
+            }
+
+            for ( Iterator it = childReportersByKey.entrySet().iterator(); it.hasNext(); )
+            {
+                Map.Entry entry = (Map.Entry) it.next();
+
+                String key = (String) entry.getKey();
+
+                if ( !mergedReportPlugins.containsKey( key ) )
+                {
+                    mergedReportPlugins.put( key, entry.getValue() );
+                }
+            }
+
+            childReporting.setPlugins( new ArrayList( mergedReportPlugins.values() ) );
+
+            childReporting.flushReportPluginMap();
+        }
+    }
+
+    private void mergeReportPlugins( ReportPlugin childReportPlugin, ReportPlugin parentReportPlugin )
+    {
+          if ( StringUtils.isEmpty( childReportPlugin.getVersion() ) )
+          {
+              childReportPlugin.setVersion( parentReportPlugin.getVersion() );
+          }
+  
+          Xpp3Dom childConfig = (Xpp3Dom) childReportPlugin.getConfiguration();
+          Xpp3Dom parentConfig = (Xpp3Dom) parentReportPlugin.getConfiguration();
+  
+          childReportPlugin.setConfiguration( Xpp3Dom.mergeXpp3Dom( childConfig, parentConfig ) );
+  
+          Map mergedReportSets = new HashMap();
+  
+          Map childReportSetsById = childReportPlugin.getReportSetsAsMap();
+  
+          for ( Iterator it = parentReportPlugin.getReportSets().iterator(); it.hasNext(); )
+          {
+              ReportSet parentReportSet = (ReportSet) it.next();
+  
+              String inherited = parentReportSet.getInherited();
+  
+              if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
+              {
+                  ReportSet childReportSet = (ReportSet) childReportSetsById.get( parentReportSet.getId() );
+  
+                  ReportSet merged = parentReportSet;
+  
+                  if ( childReportSet != null )
+                  {
+                      merged = childReportSet;
+  
+                      Xpp3Dom parentRSConfig = (Xpp3Dom) parentReportSet.getConfiguration();
+                      Xpp3Dom mergedRSConfig = (Xpp3Dom) merged.getConfiguration();
+  
+                      merged.setConfiguration( Xpp3Dom.mergeXpp3Dom( mergedRSConfig, parentRSConfig ) );
+  
+                      List mergedReports = merged.getReports();
+  
+                      if ( mergedReports == null )
+                      {
+                          mergedReports = new ArrayList();
+  
+                          merged.setReports( mergedReports );
+                      }
+  
+                      List parentRSReports = parentReportSet.getReports();
+  
+                      if ( parentRSReports != null )
+                      {
+                          for ( Iterator reportIterator = parentRSReports.iterator(); reportIterator.hasNext(); )
+                          {
+                              String report = (String) reportIterator.next();
+  
+                              if ( !mergedReports.contains( report ) )
+                              {
+                                  mergedReports.add( report );
+                              }
+                          }
+                      }
+                  }
+                  else if ( StringUtils.isEmpty( inherited ) )
+                  {
+                      merged.unsetInheritanceApplied();
+                  }
+  
+                  mergedReportSets.put( merged.getId(), merged );
+              }
+          }
+  
+          for ( Iterator rsIterator = childReportSetsById.entrySet().iterator(); rsIterator.hasNext(); )
+          {
+              Map.Entry entry = (Map.Entry) rsIterator.next();
+  
+              String key = (String) entry.getKey();
+  
+              if ( !mergedReportSets.containsKey( key ) )
+              {
+                  mergedReportSets.put( key, entry.getValue() );
+              }
+          }
+  
+          childReportPlugin.setReportSets( new ArrayList( mergedReportSets.values() ) );
+  
+          childReportPlugin.flushReportSetMap();
+    }
+
+    private void assembleDependencyInheritance( Model child, Model parent )
+    {
+        Map depsMap = new HashMap();
+        
+        List deps = parent.getDependencies();
+        
+        if ( deps != null )
+        {
+            for ( Iterator it = deps.iterator(); it.hasNext(); )
+            {
+                Dependency dependency = (Dependency) it.next();
+                depsMap.put( dependency.getManagementKey(), dependency );
+            }
+        }
+        
+        deps = child.getDependencies();
+        
+        if ( deps != null )
+        {
+            for ( Iterator it = deps.iterator(); it.hasNext(); )
+            {
+                Dependency dependency = (Dependency) it.next();
+                depsMap.put( dependency.getManagementKey(), dependency );
+            }
+        }
+        
+        child.setDependencies( new ArrayList( depsMap.values() ) );
-            ModelUtils.mergeBuildBases( childBuild, parentBuild );
+            if ( childBuild.getDirectory() == null )
+            {
+                childBuild.setDirectory( parentBuild.getDirectory() );
+            }
+
+            if ( childBuild.getDefaultGoal() == null )
+            {
+                childBuild.setDefaultGoal( parentBuild.getDefaultGoal() );
+            }
+
+            if ( childBuild.getFinalName() == null )
+            {
+                childBuild.setFinalName( parentBuild.getFinalName() );
+            }
+
+            List resources = childBuild.getResources();
+            if ( resources == null || resources.isEmpty() )
+            {
+                childBuild.setResources( parentBuild.getResources() );
+            }
+
+            resources = childBuild.getTestResources();
+            if ( resources == null || resources.isEmpty() )
+            {
+                childBuild.setTestResources( parentBuild.getTestResources() );
+            }
+
+            // Plugins are aggregated if Plugin.inherit != false
+            ModelUtils.mergePluginLists( childBuild, parentBuild, true );
+
+            // Plugin management :: aggregate
+            PluginManagement dominantPM = childBuild.getPluginManagement();
+            PluginManagement recessivePM = parentBuild.getPluginManagement();
+
+            if ( dominantPM == null && recessivePM != null )
+            {
+                childBuild.setPluginManagement( recessivePM );
+            }
+            else
+            {
+                ModelUtils.mergePluginLists( childBuild.getPluginManagement(), parentBuild.getPluginManagement(),
+                                             false );
+            }
-    private static String appendPath( String url, String path )
+    private String appendPath( String url, String path )
-    private static void mergeExtensionLists( Build childBuild, Build parentBuild )
+    private void mergeExtensionLists( Build childBuild, Build parentBuild )
