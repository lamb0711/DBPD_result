Working on MNG-607

o Changed MavenMetadataSource to a component, to avoid having to lookup artifactFactory and projectBuilder in order to 
  construct it.

o Added add(..) method to ScmBean in the release plugin to allow addition of release-pom.xml

o Changed the PrepareReleaseMojo to resolve ONLY version and parent-version for the normal pom.xml, and fully resolve all
  artifacts used in the release-pom.xml, including version, parent-version, dependency closure (given by project.getArtifacts()), plugins, and reports. It will then add the release-pom.xml, and (attempt to) delete it before performing the final commit for next development version.

o Added some mapping methods to ArtifactUtils, to key by artifact.getId, and to create an Artifact.getId()-compatible string from parameters.

o Added TestProjectBuilder to remove the requirement in ProjectClasspathTest to modify the fields of the project builder directly.

o Cleaned up the AbstractReleaseMojo and PrepareReleaseMojo to avoid container lookups...they're now mojo parameters with the 'component.' prefix.

NOTE: Next step is to figure out how to use maven-scm to remove an SCM resource, to enable the prepare mojo to take the release-pom.xml back out of HEAD after the tag is complete.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@224413 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.ReportPlugin;
-    private ArtifactResolver artifactResolver;
+    protected ArtifactResolver artifactResolver;
+    
+    protected ArtifactMetadataSource artifactMetadataSource;
-
+    
-        ArtifactMetadataSource source;
-        try
-        {
-            source = (ArtifactMetadataSource) container.lookup( ArtifactMetadataSource.ROLE );
-        }
-        catch ( ComponentLookupException e )
-        {
-            throw new ProjectBuildingException( "Unable to get the artifact metadata source component", e );
-        }
-        return buildWithDependencies( projectDescriptor, localRepository, source, externalProfiles );
-    }
-
-    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository,
-                                               ArtifactMetadataSource artifactMetadataSource, List externalProfiles )
-        throws ProjectBuildingException, ArtifactResolutionException
-    {
+        
+        ensureMetadataSourceIsInitialized();
+        
+    
+    private void ensureMetadataSourceIsInitialized() 
+        throws ProjectBuildingException
+    {
+        if ( artifactMetadataSource == null )
+        {
+            try
+            {
+                artifactMetadataSource = (ArtifactMetadataSource) container.lookup( ArtifactMetadataSource.ROLE );
+            }
+            catch ( ComponentLookupException e )
+            {
+                throw new ProjectBuildingException( "Cannot lookup metadata source for building the project.", e );
+            }
+        }
+    }
+        Model originalModel = ModelUtils.cloneModel( model );
+        
-
+        
+        project.setOriginalModel( originalModel );
+
+    protected Set createReportArtifacts( List reports )
+    throws ProjectBuildingException
+    {
+        Set pluginArtifacts = new HashSet();
+        
+        if ( reports != null )
+        {
+            for ( Iterator i = reports.iterator(); i.hasNext(); )
+            {
+                ReportPlugin p = (ReportPlugin) i.next();
+
+                String version;
+                if ( StringUtils.isEmpty( p.getVersion() ) )
+                {
+                    version = "RELEASE";
+                }
+                else
+                {
+                    version = p.getVersion();
+                }
+
+                Artifact artifact = null;
+                try
+                {
+                    artifact = artifactFactory.createPluginArtifact( p.getGroupId(), p.getArtifactId(), VersionRange
+                        .createFromVersionSpec( version ) );
+                }
+                catch ( InvalidVersionSpecificationException e )
+                {
+                    throw new ProjectBuildingException( "Unable to parse plugin version", e );
+                }
+
+                if ( artifact != null )
+                {
+                    pluginArtifacts.add( artifact );
+                }
+            }
+        }
+
+        return pluginArtifacts;
+    }
+
