Working on: MNG-377

o Added component descriptor for the MavenPluginMappingBuilder

o Added a new ComponentDiscoveryListener implementation to factor the DefaultPluginManager out of the plexus.xml for maven-core...the DefaultPluginManager now delegates to this component for plugin registration/lookup/etc. and has proper component requirements.

o Moved the DefaultPluginManager component declaration into components.xml, and added a component definition for MavenPluginCollector to plexus.xml in maven-core

Next step is to get rid of the old pluginKey junk, and start using o.a.m.Plugin instances to hold g:a:v info for all plugins in the system...this will make the interface cleaner and remove the need to concat/parse the plugin identity. Then, I'll add the mapped-plugin lookup functionality to the lifecycle executor.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@209563 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Plugin;
-import org.codehaus.plexus.component.discovery.ComponentDiscoveryEvent;
-import org.codehaus.plexus.component.discovery.ComponentDiscoveryListener;
-import org.codehaus.plexus.component.repository.ComponentSetDescriptor;
-import java.util.HashMap;
-    implements PluginManager, ComponentDiscoveryListener, Initializable, Contextualizable
+    implements PluginManager, Initializable, Contextualizable
-    protected Map pluginDescriptors;
-
-    protected Map pluginIdsByPrefix;
-
-    protected PathTranslator pathTranslator;
-
-    private Set pluginsInProcess = new HashSet();
-
+    // component requirements
+    protected PathTranslator pathTranslator;
+    
+    protected MavenPluginCollector pluginCollector;
+    
+    protected PluginVersionManager pluginVersionManager;
+    
+    protected ArtifactFactory artifactFactory;
+
+    protected ArtifactResolver artifactResolver;
+
+    protected MavenProjectBuilder mavenProjectBuilder;
+    // END component requirements
+
-        pluginDescriptors = new HashMap();
-
-        pluginIdsByPrefix = new HashMap();
-
-    // Mojo discovery
-    // ----------------------------------------------------------------------
-
-    public void componentDiscovered( ComponentDiscoveryEvent event )
-    {
-        ComponentSetDescriptor componentSetDescriptor = event.getComponentSetDescriptor();
-
-        if ( componentSetDescriptor instanceof PluginDescriptor )
-        {
-            PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;
-
-            //            String key = pluginDescriptor.getId();
-            // TODO: see comment in getPluginDescriptor
-            String key = pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId();
-
-            if ( !pluginsInProcess.contains( key ) )
-            {
-                pluginsInProcess.add( key );
-
-                pluginDescriptors.put( key, pluginDescriptor );
-
-                // TODO: throw an (not runtime) exception if there is a prefix overlap - means doing so elsewhere
-                // we also need to deal with multiple versions somehow - currently, first wins
-                if ( !pluginIdsByPrefix.containsKey( pluginDescriptor.getGoalPrefix() ) )
-                {
-                    pluginIdsByPrefix.put( pluginDescriptor.getGoalPrefix(), pluginDescriptor.getId() );
-                }
-            }
-        }
-    }
-
-    // ----------------------------------------------------------------------
-    private PluginDescriptor getPluginDescriptor( String groupId, String artifactId, String version )
-    {
-        //        String key = PluginDescriptor.constructPluginKey( groupId, artifactId, version );
-        // TODO: include version, but can't do this in the plugin manager as it is not resolved to the right version
-        // at that point. Instead, move the duplication check to the artifact container, or store it locally based on
-        // the unresolved version?
-        String key = groupId + ":" + artifactId;
-        return (PluginDescriptor) pluginDescriptors.get( key );
-    }
-
-    private boolean isPluginInstalled( String pluginKey )
-    {
-        //        String key = PluginDescriptor.constructPluginKey( groupId, artifactId, version );
-        // TODO: see comment in getPluginDescriptor
-        return pluginDescriptors.containsKey( pluginKey );
-    }
-
-    private boolean isPluginInstalledForPrefix( String prefix )
-    {
-        return pluginIdsByPrefix.containsKey( prefix );
-    }
-
-        if ( !isPluginInstalledForPrefix( prefix ) )
-        {
-            // TODO: lookup remotely
-        }
-        return (String) pluginIdsByPrefix.get( prefix );
+        return pluginCollector.getPluginIdFromPrefix( prefix );
-        String pluginKey = groupId + ":" + artifactId;
-
-            PluginVersionManager pluginVersionManager = null;
-
-            try
-            {
-                pluginVersionManager = (PluginVersionManager) container.lookup( PluginVersionManager.ROLE );
-
-                version = pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings,
-                                                                     localRepository );
-            }
-            catch ( ComponentLookupException e )
-            {
-                throw new PluginVersionResolutionException( groupId, artifactId,
-                                                            "Cannot retrieve an instance of the PluginVersionManager",
-                                                            e );
-            }
-            finally
-            {
-                releaseComponent( pluginVersionManager );
-            }
+            version = pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings,
+                                                                 localRepository );
-        if ( !isPluginInstalled( pluginKey ) )
+        if ( !pluginCollector.isPluginInstalled( groupId, artifactId ) )
-            ArtifactFactory artifactFactory = null;
-                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
-
-
-                addPlugin( pluginKey, pluginArtifact, project, localRepository );
-
+    
+                addPlugin( groupId, artifactId, version, pluginArtifact, project, localRepository );
+    
-            catch ( ComponentLookupException e )
-            {
-                throw new PluginManagerException(
-                    "Internal configuration error while retrieving " + groupId + ":" + artifactId, e );
-            }
-            finally
-            {
-                if ( artifactFactory != null )
-                {
-                    releaseComponent( artifactFactory );
-                }
-
-            }
-        return getPluginDescriptor( groupId, artifactId, version );
+        return pluginCollector.getPluginDescriptor( groupId, artifactId, version );
-    protected void addPlugin( String pluginKey, Artifact pluginArtifact, MavenProject project,
+    protected void addPlugin( String groupId, String artifactId, String version, Artifact pluginArtifact, MavenProject project,
-        throws ArtifactResolutionException, ComponentLookupException, PlexusContainerException
+        throws ArtifactResolutionException, PlexusContainerException
-        ArtifactResolver artifactResolver = null;
+        String pluginKey = Plugin.constructKey( groupId, artifactId );
+        
+        artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );
-        try
-        {
-            artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
+        PlexusContainer child = container.createChildContainer( pluginKey, Collections
+            .singletonList( pluginArtifact.getFile() ), Collections.EMPTY_MAP, Collections.singletonList( pluginCollector ) );
-            artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );
+        // this plugin's descriptor should have been discovered in the child creation, so we should be able to
+        // circle around and set the artifacts and class realm
+        PluginDescriptor addedPlugin = pluginCollector.getPluginDescriptor( groupId, artifactId, version );
-            PlexusContainer child = container.createChildContainer( pluginKey, Collections
-                .singletonList( pluginArtifact.getFile() ), Collections.EMPTY_MAP, Collections.singletonList( this ) );
+        addedPlugin.setClassRealm( child.getContainerRealm() );
-            // this plugin's descriptor should have been discovered in the child creation, so we should be able to
-            // circle around and set the artifacts and class realm
-            PluginDescriptor addedPlugin = (PluginDescriptor) pluginDescriptors.get( pluginKey );
-
-            addedPlugin.setClassRealm( child.getContainerRealm() );
-
-            // we're only setting the plugin's artifact itself as the artifact list, to allow it to be retrieved
-            // later when the plugin is first invoked. Retrieving this artifact will in turn allow us to
-            // transitively resolve its dependencies, and add them to the plugin container...
-            addedPlugin.setArtifacts( Collections.singletonList( pluginArtifact ) );
-        }
-        finally
-        {
-            if ( artifactResolver != null )
-            {
-                releaseComponent( artifactResolver );
-            }
-        }
+        // we're only setting the plugin's artifact itself as the artifact list, to allow it to be retrieved
+        // later when the plugin is first invoked. Retrieving this artifact will in turn allow us to
+        // transitively resolve its dependencies, and add them to the plugin container...
+        addedPlugin.setArtifacts( Collections.singletonList( pluginArtifact ) );
-    private void releaseComponent( Object component )
-    {
-        try
-        {
-            container.release( component );
-        }
-        catch ( ComponentLifecycleException e )
-        {
-            getLogger().error( "Error releasing component - ignoring", e );
-        }
-    }
+//    private void releaseComponent( Object component )
+//    {
+//        try
+//        {
+//            container.release( component );
+//        }
+//        catch ( ComponentLifecycleException e )
+//        {
+//            getLogger().error( "Error releasing component - ignoring", e );
+//        }
+//    }
-            ArtifactResolver artifactResolver = null;
-            MavenProjectBuilder mavenProjectBuilder = null;
-            ArtifactFactory artifactFactory = null;
-
-            try
-            {
-                artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
-                mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
-                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
-
-                resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder, mojoDescriptor
-                    .isDependencyResolutionRequired(), artifactFactory, project );
-                downloadDependencies( project, session, artifactResolver );
-            }
-            catch ( ComponentLookupException e )
-            {
-                throw new PluginManagerException( "Internal configuration error in plugin manager", e );
-            }
-            finally
-            {
-                if ( artifactResolver != null )
-                {
-                    releaseComponent( artifactResolver );
-                }
-                if ( mavenProjectBuilder != null )
-                {
-                    releaseComponent( mavenProjectBuilder );
-                }
-                if ( artifactFactory != null )
-                {
-                    releaseComponent( artifactFactory );
-                }
-            }
+            resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder, mojoDescriptor
+                .isDependencyResolutionRequired(), artifactFactory, project );
+            
+            downloadDependencies( project, session, artifactResolver );
-        PluginDescriptor pluginDescriptor = getPluginDescriptor( groupId, artifactId, version );
+        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( groupId, artifactId, version );
-        throws PluginConfigurationException, ComponentLookupException
+        throws PluginConfigurationException
-            ArtifactResolver artifactResolver = null;
-            MavenProjectBuilder mavenProjectBuilder = null;
-            ArtifactFactory artifactFactory = null;
-
-                artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
-                mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
-                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
-
-
+    
-
+    
-
+    
-
+    
-
+    
-
+    
-
+    
-
+    
-
+    
-
+    
-
+    
-
+    
-            finally
-            {
-                if ( artifactFactory != null )
-                {
-                    releaseComponent( artifactFactory );
-                }
-                if ( artifactResolver != null )
-                {
-                    releaseComponent( artifactResolver );
-                }
-                if ( mavenProjectBuilder != null )
-                {
-                    releaseComponent( mavenProjectBuilder );
-                }
-            }
-        boolean systemOnline = !context.getSettings().isOffline();
-
