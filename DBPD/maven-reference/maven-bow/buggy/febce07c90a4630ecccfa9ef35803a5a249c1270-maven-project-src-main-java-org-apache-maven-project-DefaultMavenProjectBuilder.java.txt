Adding more context information to existing exceptions, cleaning up construction in exceptions, and adjusting the inheritance hierarchy for exceptions to make them make a little more sense for error reporting. Also, adding improved (but not complete, yet) reporting for BuildFailureExceptions and ProjectBuildingExceptions, with some tests to make sure pertinent information is in the output.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@592859 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.StringUtils;
+import org.codehaus.plexus.util.StringUtils;
-import java.net.URI;
-import java.net.URISyntaxException;
-                    throw new ProjectBuildingException( projectId, "Unable to parse version '" + d.getVersion() +
-                        "' for dependency '" + d.getManagementKey() + "': " + e.getMessage(), pomFile, e );
+                    throw new InvalidDependencyVersionException( projectId, d, pomFile, e );
-            return readModel( projectId, file.toURI(), reader, strict );
+
+            String modelSource = IOUtil.toString( reader );
+
+            checkModelVersion( modelSource, projectId, file );
+
+            StringReader sReader = new StringReader( modelSource );
+
+            try
+            {
+                return modelReader.read( sReader, strict );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new InvalidProjectModelException( projectId, "Parse error reading POM. Reason: " + e.getMessage(),
+                                                        file, e );
+            }
-    private Model readModel( String projectId,
-                             URI pomLocation,
-                             Reader reader,
-                             boolean strict )
-        throws IOException, InvalidProjectModelException
+    private void checkModelVersion( String modelSource,
+                                    String projectId,
+                                    File file )
+        throws InvalidProjectModelException
-        String modelSource = IOUtil.toString( reader );
-
-            throw new InvalidProjectModelException( projectId, "Not a v" + MAVEN_MODEL_VERSION + " POM.", pomLocation );
-        }
-
-        StringReader sReader = new StringReader( modelSource );
-
-        try
-        {
-            return modelReader.read( sReader, strict );
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new InvalidProjectModelException( projectId, "Parse error reading POM. Reason: " + e.getMessage(),
-                                                    pomLocation, e );
-        }
-    }
-
-    private Model readModel( String projectId,
-                             URL url,
-                             boolean strict )
-        throws ProjectBuildingException
-    {
-        Reader reader = null;
-        URI uri = null;
-        try
-        {
-            uri = new URI( url.toString().replaceAll( " ", "%20" ) );
-            reader = ReaderFactory.newXmlReader( url.openStream() );
-            return readModel( projectId, uri, reader, strict );
-        }
-        catch ( IOException e )
-        {
-            throw new ProjectBuildingException( projectId, "Failed build model from URL \'" + url.toExternalForm() +
-                "\'\nError: \'" + e.getLocalizedMessage() + "\'", uri, e );
-        }
-        catch ( URISyntaxException e )
-        {
-            throw new ProjectBuildingException( projectId, "Failed build model from URL \'" + url.toExternalForm()
-                + "\'\nError: \'" + e.getLocalizedMessage() + "\'", e );
-        }
-        finally
-        {
-            IOUtil.close( reader );
+            throw new InvalidProjectModelException( projectId, "Not a v" + MAVEN_MODEL_VERSION + " POM.", file );
-                                            List extensions, File pomLocation )
+                                            List extensions, File pomFile )
-                    throw new ProjectBuildingException( projectId, "Unable to parse version '" + version +
-                        "' for extension '" + ArtifactUtils.versionlessKey( ext.getGroupId(), ext.getArtifactId() ) +
-                        "': " + e.getMessage(), pomLocation, e );
+                    String key = ArtifactUtils.versionlessKey( ext.getGroupId(), ext.getArtifactId() );
+                    throw new InvalidProjectVersionException( projectId, "extension '" + key,
+                                                              version, pomFile, e );
-        return readModel( projectId, url, STRICT_MODEL_PARSING );
+        Reader reader = null;
+        try
+        {
+            reader = ReaderFactory.newXmlReader( url.openStream() );
+            String modelSource = IOUtil.toString( reader );
+
+            checkModelVersion( modelSource, projectId, null );
+
+            StringReader sReader = new StringReader( modelSource );
+
+            return modelReader.read( sReader, STRICT_MODEL_PARSING );
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new InvalidProjectModelException( projectId, "Parse error reading POM. Reason: " + e.getMessage(), e );
+        }
+        catch ( IOException e )
+        {
+            throw new ProjectBuildingException( projectId, "Failed build model from URL \'" + url.toExternalForm() +
+                "\'\nError: \'" + e.getLocalizedMessage() + "\'", e );
+        }
+        finally
+        {
+            IOUtil.close( reader );
+        }
