PR: MNG-249
also recognise transitive projects



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@225780 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
-        MavenProject p;
+        MavenProject project;
-                p = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories, localRepository );
+                project = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories, localRepository );
-            DistributionManagement distMgmt = p.getDistributionManagement();
+            DistributionManagement distMgmt = project.getDistributionManagement();
-            // TODO: we could possibly use p.getDependencyArtifacts instead, but they haven't been filtered or used the
-            // scope (should that be passed to the buildFromRepository method above?
-            Set artifacts = createArtifacts( artifactFactory, p.getDependencies(), artifact.getScope(),
-                                             artifact.getDependencyFilter() );
+            // TODO: we could possibly use p.getDependencyArtifacts instead of this call, but they haven't been filtered
+            // or used the inherited scope (should that be passed to the buildFromRepository method above?)
+            Set artifacts = project.createArtifacts( artifactFactory, artifact.getScope(),
+                                                     artifact.getDependencyFilter() );
-            return new ResolutionGroup( pomArtifact, artifacts, p.getRemoteArtifactRepositories() );
+            return new ResolutionGroup( pomArtifact, artifacts, project.getRemoteArtifactRepositories() );
-                                       ArtifactFilter dependencyFilter )
+                                       ArtifactFilter dependencyFilter, Map projectReferences )
-        Set projectArtifacts = new HashSet();
+        Set projectArtifacts = new HashSet( dependencies.size() );
+                if ( projectReferences != null )
+                {
+                    // TODO: use MavenProject getProjectReferenceId
+                    String refId = d.getGroupId() + ":" + d.getArtifactId();
+                    MavenProject project = (MavenProject) projectReferences.get( refId );
+                    if ( project != null && project.getArtifact() != null )
+                    {
+                        artifact = new ActiveProjectArtifact( project, artifact );
+                    }
+                }
+
