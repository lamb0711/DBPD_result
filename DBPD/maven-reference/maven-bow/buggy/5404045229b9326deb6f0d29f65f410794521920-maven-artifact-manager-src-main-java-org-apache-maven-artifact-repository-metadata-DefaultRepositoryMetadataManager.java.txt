PR: MNG-230
create a local copy of the snapshot

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@292401 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+        Map previousMetadata = new HashMap();
+        ArtifactRepository selected = null;
-                loadMetadata( metadata, repository, localRepository, true );
+                if ( loadMetadata( metadata, repository, localRepository, previousMetadata ) )
+                {
+                    metadata.setRepository( repository );
+                    selected = repository;
+                }
-        loadMetadata( metadata, localRepository, localRepository, false );
+        if ( loadMetadata( metadata, localRepository, localRepository, previousMetadata ) )
+        {
+            selected = localRepository;
+        }
+
+        // TODO: this could be a lot nicer... should really be in the snapshot transformation?
+        if ( metadata.isSnapshot() )
+        {
+            Metadata prevMetadata = metadata.getMetadata();
+
+            for ( Iterator i = previousMetadata.keySet().iterator(); i.hasNext(); )
+            {
+                ArtifactRepository repository = (ArtifactRepository) i.next();
+                Metadata m = (Metadata) previousMetadata.get( repository );
+                if ( repository.equals( selected ) )
+                {
+                    if ( m.getVersioning() == null )
+                    {
+                        m.setVersioning( new Versioning() );
+                    }
+
+                    if ( m.getVersioning().getSnapshot() == null )
+                    {
+                        m.getVersioning().setSnapshot( new Snapshot() );
+                    }
+
+                    if ( !m.getVersioning().getSnapshot().isLocalCopy() )
+                    {
+                        m.getVersioning().getSnapshot().setLocalCopy( true );
+                        metadata.setMetadata( m );
+                        metadata.storeInLocalRepository( localRepository, repository );
+                    }
+                }
+                else
+                {
+                    if ( m.getVersioning() != null && m.getVersioning().getSnapshot() != null &&
+                        m.getVersioning().getSnapshot().isLocalCopy() )
+                    {
+                        m.getVersioning().getSnapshot().setLocalCopy( false );
+                        metadata.setMetadata( m );
+                        metadata.storeInLocalRepository( localRepository, repository );
+                    }
+                }
+            }
+
+            metadata.setMetadata( prevMetadata );
+        }
-    private void loadMetadata( RepositoryMetadata repoMetadata, ArtifactRepository remoteRepository,
-                               ArtifactRepository localRepository, boolean setRepository )
+    private boolean loadMetadata( RepositoryMetadata repoMetadata, ArtifactRepository remoteRepository,
+                                  ArtifactRepository localRepository, Map previousMetadata )
+        boolean setRepository = false;
+
+            if ( repoMetadata.isSnapshot() && previousMetadata != null )
+            {
+                previousMetadata.put( remoteRepository, metadata );
+            }
+
-                if ( repoMetadata.getMetadata().merge( metadata ) )
-                {
-                    if ( setRepository )
-                    {
-                        repoMetadata.setRepository( remoteRepository );
-                    }
-                }
+                setRepository = repoMetadata.getMetadata().merge( metadata );
-                if ( setRepository )
-                {
-                    repoMetadata.setRepository( remoteRepository );
-                }
+                setRepository = true;
+        return setRepository;
