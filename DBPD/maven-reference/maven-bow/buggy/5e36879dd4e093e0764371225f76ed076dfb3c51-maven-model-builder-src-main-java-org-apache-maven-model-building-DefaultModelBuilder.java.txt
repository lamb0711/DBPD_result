o Reworked handling of model problems to allow for easier reusage across all the other model diddling components

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@800413 13f79535-47bb-0310-9956-ffa450edef68

-        DefaultModelBuildingProblems problems = new DefaultModelBuildingProblems( null );
+        DefaultModelProblemCollector problems = new DefaultModelProblemCollector( null );
+        problems.setSourceHint( "(external profiles)" );
+            problems.setSourceHint( tmpModel );
+
+        problems.setSourceHint( resultModel );
+
-        DefaultModelBuildingProblems problems = new DefaultModelBuildingProblems( result.getProblems() );
+        DefaultModelProblemCollector problems = new DefaultModelProblemCollector( result.getProblems() );
+        problems.setSourceHint( resultModel );
-                                                     ModelBuildingProblems problems )
+                                                     ModelProblemCollector problems )
-            problems.add( new ModelProblem( "Invalid activation condition for external profile "
-                + e.getProfile().getId() + ": " + e.getMessage(), ModelProblem.Severity.ERROR, "(external profiles)", e ) );
+            problems.addError( "Invalid activation condition for external profile " + e.getProfile().getId() + ": "
+                + e.getMessage(), e );
-                                                ModelBuildingProblems problems )
+                                                ModelProblemCollector problems )
-            problems.add( new ModelProblem(
-                                            "Invalid activation condition for project profile "
-                                                + e.getProfile().getId() + " in POM "
-                                                + ModelProblemUtils.toSourceHint( model ) + ": " + e.getMessage(),
-                                            ModelProblem.Severity.ERROR, ModelProblemUtils.toSourceHint( model ), e ) );
+            problems.addError( "Invalid activation condition for project profile " + e.getProfile().getId() + ": "
+                + e.getMessage(), e );
-    private void configureResolver( ModelResolver modelResolver, Model model, ModelBuildingProblems problems )
+    private void configureResolver( ModelResolver modelResolver, Model model, DefaultModelProblemCollector problems )
+        problems.setSourceHint( model );
+
-                problems.add( new ModelProblem( "Invalid repository " + repository.getId() + " in POM "
-                    + ModelProblemUtils.toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
-                                                ModelProblemUtils.toSourceHint( model ), e ) );
+                problems.addError( "Invalid repository " + repository.getId() + ": " + e.getMessage(), e );
-    private Model interpolateModel( Model model, ModelBuildingRequest request, ModelBuildingProblems problems )
+    private Model interpolateModel( Model model, ModelBuildingRequest request, ModelProblemCollector problems )
-            problems.add( new ModelProblem( "Invalid expression in POM " + ModelProblemUtils.toSourceHint( model )
-                + ": " + e.getMessage(), ModelProblem.Severity.ERROR, ModelProblemUtils.toSourceHint( model ), e ) );
+            problems.addError( "Invalid expression: " + e.getMessage(), e );
-    private void importDependencyManagement( Model model, ModelBuildingRequest request, ModelBuildingProblems problems )
+    private void importDependencyManagement( Model model, ModelBuildingRequest request,
+                                             DefaultModelProblemCollector problems )
-                    problems.add( new ModelProblem( "Non-resolvable import POM "
-                        + ModelProblemUtils.toId( groupId, artifactId, version ) + " for POM "
-                        + ModelProblemUtils.toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
-                                                    ModelProblemUtils.toSourceHint( model ), e ) );
+                    problems.addError( "Non-resolvable import POM "
+                        + ModelProblemUtils.toId( groupId, artifactId, version ) + ": " + e.getMessage(), e );
-                    problems.addAll( e.getProblems() );
+                    problems.getProblems().addAll( e.getProblems() );
-                problems.addAll( importResult.getProblems() );
+                problems.getProblems().addAll( importResult.getProblems() );
-    private void fireBuildExtensionsAssembled( Model model, ModelBuildingRequest request, ModelBuildingProblems problems )
+    private void fireBuildExtensionsAssembled( Model model, ModelBuildingRequest request, ModelProblemCollector problems )
-                problems.add( new ModelProblem( "Invalid build extensions: " + e.getMessage(),
-                                                ModelProblem.Severity.ERROR, ModelProblemUtils.toSourceHint( model ), e ) );
+                problems.addError( "Invalid build extensions: " + e.getMessage(), e );
