PR: MNG-870
MAke plugin discovery reactor aware



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@290887 13f79535-47bb-0310-9956-ffa450edef68

+/*
+ * Copyright 2001-2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.Extension;
-import org.apache.maven.model.Plugin;
-import org.apache.maven.model.ReportPlugin;
+import org.apache.maven.project.ProjectSorter;
-import org.codehaus.plexus.util.dag.DAG;
-import org.codehaus.plexus.util.dag.TopologicalSorter;
-import java.util.Collections;
-import java.util.Comparator;
-
-    private DAG reactorDag;
-
-    private Map projectMap;
-
-    private List projectsByDependency;
-
-    private MavenProject topLevelProject;
-
+    private final ProjectSorter sorter;
+
-        reactorDag = new DAG();
-
-        projectMap = new HashMap();
-
-        for ( Iterator i = projects.iterator(); i.hasNext(); )
-        {
-            MavenProject project = (MavenProject) i.next();
-
-            String id = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
-
-            reactorDag.addVertex( id );
-
-            projectMap.put( id, project );
-        }
-
-        for ( Iterator i = projects.iterator(); i.hasNext(); )
-        {
-            MavenProject project = (MavenProject) i.next();
-
-            String id = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
-
-            for ( Iterator j = project.getDependencies().iterator(); j.hasNext(); )
-            {
-                Dependency dependency = (Dependency) j.next();
-
-                String dependencyId = ArtifactUtils.versionlessKey( dependency.getGroupId(), dependency.getArtifactId() );
-
-                if ( reactorDag.getVertex( dependencyId ) != null )
-                {
-                    project.addProjectReference( (MavenProject) projectMap.get( dependencyId ) );
-
-                    reactorDag.addEdge( id, dependencyId );
-                }
-            }
-
-            MavenProject parent = project.getParent();
-            if ( parent != null )
-            {
-                String parentId = ArtifactUtils.versionlessKey( parent.getGroupId(), parent.getArtifactId() );
-                if ( reactorDag.getVertex( parentId ) != null )
-                {
-                    reactorDag.addEdge( id, parentId );
-                }
-            }
-
-            List buildPlugins = project.getBuildPlugins();
-            if ( buildPlugins != null )
-            {
-                for ( Iterator j = buildPlugins.iterator(); j.hasNext(); )
-                {
-                    Plugin plugin = (Plugin) j.next();
-                    String pluginId = ArtifactUtils.versionlessKey( plugin.getGroupId(), plugin.getArtifactId() );
-                    if ( reactorDag.getVertex( pluginId ) != null )
-                    {
-                        reactorDag.addEdge( id, pluginId );
-                    }
-                }
-            }
-
-            List reportPlugins = project.getReportPlugins();
-            if ( reportPlugins != null )
-            {
-                for ( Iterator j = reportPlugins.iterator(); j.hasNext(); )
-                {
-                    ReportPlugin plugin = (ReportPlugin) j.next();
-                    String pluginId = ArtifactUtils.versionlessKey( plugin.getGroupId(), plugin.getArtifactId() );
-                    if ( reactorDag.getVertex( pluginId ) != null )
-                    {
-                        reactorDag.addEdge( id, pluginId );
-                    }
-                }
-            }
-
-            for ( Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); )
-            {
-                Extension extension = (Extension) j.next();
-                String extensionId = ArtifactUtils.versionlessKey( extension.getGroupId(), extension.getArtifactId() );
-                if ( reactorDag.getVertex( extensionId ) != null )
-                {
-                    reactorDag.addEdge( id, extensionId );
-                }
-            }
-        }
-
-        projectsByDependency = new ArrayList();
-
-        for ( Iterator i = TopologicalSorter.sort( reactorDag ).iterator(); i.hasNext(); )
-        {
-            String id = (String) i.next();
-
-            projectsByDependency.add( projectMap.get( id ) );
-        }
-
-        projectsByDependency = Collections.unmodifiableList( projectsByDependency );
+        this.sorter = new ProjectSorter( projects );
-        if ( FAIL_FAST.equals( failureBehavior ) || FAIL_AT_END.equals( failureBehavior ) || FAIL_NEVER.equals( failureBehavior ) )
+        if ( FAIL_FAST.equals( failureBehavior ) || FAIL_AT_END.equals( failureBehavior ) ||
+            FAIL_NEVER.equals( failureBehavior ) )
-            throw new IllegalArgumentException( "Invalid failure behavior (must be one of: \'" + FAIL_FAST + "\', \'"
-                + FAIL_AT_END + "\', \'" + FAIL_NEVER + "\')." );
+            throw new IllegalArgumentException( "Invalid failure behavior (must be one of: \'" + FAIL_FAST + "\', \'" +
+                FAIL_AT_END + "\', \'" + FAIL_NEVER + "\')." );
-    public List getProjectsSortedByDependency()
-    {
-        return projectsByDependency;
-    }
-
-    // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
-    public MavenProject getTopLevelProject()
-    {
-        if ( topLevelProject == null )
-        {
-            List projectsByFile = new ArrayList( projectsByDependency );
-
-            Collections.sort(projectsByFile, new ByProjectFileComparator() );
-
-            topLevelProject = (MavenProject) projectsByFile.get( 0 );
-        }
-
-        return topLevelProject;
-    }
-
-        blackList(
-            ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() ) );
+        blackList( ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() ) );
-            List dependents = reactorDag.getParentLabels( id );
+            List dependents = sorter.getDependents( id );
-        return blackList.contains(
-            ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() ) );
+        return blackList.contains( ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() ) );
-        return projectsByDependency.size() > 1;
+        return sorter.hasMultipleProjects();
-    private static class ByProjectFileComparator implements Comparator
+    public List getSortedProjects()
-
-        public int compare( Object first, Object second )
-        {
-            MavenProject p1 = (MavenProject) first;
-            MavenProject p2 = (MavenProject) second;
-
-            String p1Path = p1.getFile().getAbsolutePath();
-            String p2Path = p2.getFile().getAbsolutePath();
-
-            int comparison = p1Path.length() - p2Path.length();
-
-            if ( comparison > 0 )
-            {
-                return 1;
-            }
-            else if ( comparison < 0 )
-            {
-                return -1;
-            }
-            else
-            {
-                return 0;
-            }
-        }
+        return sorter.getSortedProjects();
+
