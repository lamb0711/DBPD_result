PR: MNG-471

- correct the lifecycle instantiation
- read/write executeLifecycle in the plugin descriptor


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191416 13f79535-47bb-0310-9956-ffa450edef68

-        Map phaseMap = new HashMap();
-
-        for ( Iterator i = phases.iterator(); i.hasNext(); )
-        {
-            String p = (String) i.next();
-
-            // Make a copy of the phase as we will modify it
-            phaseMap.put( p, new ArrayList() );
-        }
-
-        if ( phaseMap.containsKey( task ) )
+        if ( phases.contains( task ) )
-            constructLifecyclePhaseMap( session, phaseMap, task, project );
+            Map lifecycleMappings = constructLifecycleMappings( session, task, project );
+            executeGoalWithLifecycle( task, session, lifecycleMappings, project );
-
-        executeGoalWithLifecycle( task, session, phaseMap, project );
+        else
+        {
+            executeStandaloneGoal( task, session, project );
+        }
-        List goals;
+        List goals = processGoalChain( task, lifecycleMappings );
-        if ( lifecycleMappings.containsKey( task ) )
-        {
-            goals = processGoalChain( task, lifecycleMappings );
-        }
-        else
-        {
-            MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session, project );
-            goals = Collections.singletonList( new MojoExecution( mojoDescriptor ) );
-        }
+        executeGoals( goals, session, project );
+    }
+    private void executeStandaloneGoal( String task, MavenSession session, MavenProject project )
+        throws ArtifactResolutionException, LifecycleExecutionException, MojoExecutionException
+    {
+        MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session, project );
+        executeGoals( Collections.singletonList( new MojoExecution( mojoDescriptor ) ), session, project );
+    }
+
+    private void executeGoals( List goals, MavenSession session, MavenProject project )
+        throws LifecycleExecutionException, MojoExecutionException, ArtifactResolutionException
+    {
-                forkLifecycle( executePhase, mojoDescriptor.getExecuteLifecycle(), session, lifecycleMappings,
-                               project );
+                forkLifecycle( executePhase, mojoDescriptor.getExecuteLifecycle(), session, project );
-    private void forkLifecycle( String executePhase, String executeLifecycle, MavenSession session,
-                                Map lifecycleMappings, MavenProject project )
+    private void forkLifecycle( String task, String executeLifecycle, MavenSession session,
+                                MavenProject project )
-        // Deep copy of the lifecycle
-        Map phaseMap = new HashMap();
-        for ( Iterator i = lifecycleMappings.keySet().iterator(); i.hasNext(); )
-        {
-            String phase = (String) i.next();
-            List mappings = (List) lifecycleMappings.get( phase );
-            phaseMap.put( phase, new ArrayList( mappings ) );
-        }
+        // Create new lifecycle
+        Map lifecycleMappings = constructLifecycleMappings( session, task, project );
-        executeGoalWithLifecycle( executePhase, session, phaseMap, project );
+        executeGoalWithLifecycle( task, session, lifecycleMappings, project );
-    private void constructLifecyclePhaseMap( MavenSession session, Map phaseMap, String selectedPhase,
-                                             MavenProject project )
+    private Map constructLifecycleMappings( MavenSession session, String selectedPhase, MavenProject project )
-        bindLifecycleForPackaging( session, phaseMap, selectedPhase, project );
+        Map lifecycleMappings = bindLifecycleForPackaging( session, selectedPhase, project );
-            bindPluginToLifecycle( plugin, session, phaseMap, project );
+            bindPluginToLifecycle( plugin, session, lifecycleMappings, project );
+
+        return lifecycleMappings;
-    private void bindLifecycleForPackaging( MavenSession session, Map phaseMap, String selectedPhase,
-                                            MavenProject project )
+    private Map bindLifecycleForPackaging( MavenSession session, String selectedPhase, MavenProject project )
+        Map lifecycleMappings = new HashMap();
+
-                    addToPhaseMap( phaseMap, phase, new MojoExecution( mojoDescriptor ), session.getSettings() );
+                    addToLifecycleMappings( lifecycleMappings, phase, new MojoExecution( mojoDescriptor ),
+                                            session.getSettings() );
+
+        return lifecycleMappings;
-                        addToPhaseMap( phaseMap, mojoDescriptor.getPhase(), mojoExecution, settings );
+                        addToLifecycleMappings( phaseMap, mojoDescriptor.getPhase(), mojoExecution, settings );
-                    addToPhaseMap( phaseMap, execution.getPhase(), mojoExecution, settings );
+                    addToLifecycleMappings( phaseMap, execution.getPhase(), mojoExecution, settings );
-                    addToPhaseMap( phaseMap, mojoDescriptor.getPhase(), mojoExecution, settings );
+                    addToLifecycleMappings( phaseMap, mojoDescriptor.getPhase(), mojoExecution, settings );
-    private void addToPhaseMap( Map phaseMap, String phase, MojoExecution mojoExecution, Settings settings )
-        throws LifecycleExecutionException
+    private void addToLifecycleMappings( Map lifecycleMappings, String phase, MojoExecution mojoExecution,
+                                         Settings settings )
-        List goals = (List) phaseMap.get( phase );
+        List goals = (List) lifecycleMappings.get( phase );
-            String message = "Required phase '" + phase + "' not found";
-            throw new LifecycleExecutionException( message );
+            goals = new ArrayList();
+            lifecycleMappings.put( phase, goals );
