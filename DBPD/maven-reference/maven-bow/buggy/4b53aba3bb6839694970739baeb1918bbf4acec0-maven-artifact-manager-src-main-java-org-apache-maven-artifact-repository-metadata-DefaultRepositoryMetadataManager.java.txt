Fixing issues related to MNG-377, where the plugins.xml metadata was being mishandled. Separated updating of this metadata into a separate mojo, bound to the 'package' phase, and put in a validator for the POM (POM has to have distributionRepository now for maven-plugin's) which is bound to the 'validate' phase. Put together an integration test that uses modello:java as a case where the pluginGroups must be consulted. Also had to change the Verifier to check a verifier.properties for failOnErrorOutput, which will suppress IT failures based on [ERROR] log output (modello outputs one of these, and kills the IT unnecessarily).

MNG-377 should be resolved at this point.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@215890 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.IOUtil;
+import java.io.FileReader;
+import java.io.Reader;
+import java.util.HashMap;
+import java.util.Map;
-    public void resolve( RepositoryMetadata metadata, ArtifactRepository remote, ArtifactRepository local, String remoteId )
+    // only resolve repository metadata once per session...
+    private Map resolved = new HashMap();
+
+    public void resolve( RepositoryMetadata metadata, ArtifactRepository remote, ArtifactRepository local )
-        String metadataPath = local.formatAsFile( metadata.getRepositoryPath() );
+        File metadataFile = (File) resolved.get( metadata.getRepositoryPath() );
-        String realignedPath = metadataPath.replace( File.separatorChar, '/' );
-
-        if ( !realignedPath.startsWith( "/" ) )
+        if ( metadataFile == null )
-            realignedPath = "/" + realignedPath;
-        }
+            metadataFile = constructLocalRepositoryFile( metadata, local, remote.getId() );
-        realignedPath = "/REPOSITORY-INF/" + remoteId + realignedPath;
-
-        File metadataFile = new File( local.getBasedir(), realignedPath );
-
-        if ( remote == null )
-        {
-            if ( metadataFile.exists() )
+            if ( remote == null )
-                getLogger().warn( "Cannot retrieve repository metadata for: " + metadataPath + ". Using locally cached version instead." );
-                
-                getLogger().debug( "Error retrieving repository metadata: " + metadataPath + ". Reason: repository is null." );
-                
-                metadata.setFile( metadataFile );
+                throw new RepositoryMetadataManagementException( metadata,
+                                                                 "Cannot retrieve repository metadata from null repository." );
-                throw new RepositoryMetadataManagementException( metadata, "Cannot retrieve repository metadata from null repository." );
-            }
-        }
-        else
-        {
-            try
-            {
-                wagonManager.getRepositoryMetadata( metadata, remote, metadataFile );
-
-                metadata.setFile( metadataFile );
-            }
-            catch ( TransferFailedException e )
-            {
-                throw new RepositoryMetadataManagementException( metadata, "Failed to download repository metadata.", e );
-            }
-            catch ( ResourceDoesNotExistException e )
-            {
-                if ( metadataFile.exists() )
+                try
-                    getLogger().warn( "Cannot find repository metadata for: " + metadataPath + ". Using locally cached version instead." );
-                    getLogger().debug( "Error retrieving repository metadata: " + metadataPath, e );
-                    
+                    wagonManager.getRepositoryMetadata( metadata, remote, metadataFile );
+
+                    verifyLocalRepositoryFile( metadataFile );
+
-                else
+                catch ( TransferFailedException e )
-                    throw new RepositoryMetadataManagementException( metadata, "Remote repository metadata not found.", e );
+                    throw new RepositoryMetadataManagementException( metadata,
+                                                                     "Failed to download repository metadata.", e );
+                }
+                catch ( ResourceDoesNotExistException e )
+                {
+                    throw new RepositoryMetadataManagementException( metadata, "Remote repository metadata not found.",
+                                                                     e );
+                }
+                catch ( IOException e )
+                {
+                    throw new RepositoryMetadataManagementException(
+                                                                     metadata,
+                                                                     "Download of repository metadata resulted in an invalid file.",
+                                                                     e );
-    throws RepositoryMetadataManagementException
+        throws RepositoryMetadataManagementException
-            
+
-            
+
-    
+
+    }
+
+    private File constructLocalRepositoryFile( RepositoryMetadata metadata, ArtifactRepository local, String remoteId )
+    {
+        String metadataPath = local.formatAsFile( metadata.getRepositoryPath() );
+
+        String realignedPath = metadataPath.replace( File.separatorChar, '/' );
+
+        if ( !realignedPath.startsWith( "/" ) )
+        {
+            realignedPath = "/" + realignedPath;
+        }
+
+        realignedPath = "/REPOSITORY-INF/" + remoteId + realignedPath;
+
+        return new File( local.getBasedir(), realignedPath );
+    }
+
+    private void verifyLocalRepositoryFile( File metadataFile )
+        throws IOException
+    {
+        Reader metadataReader = null;
+
+        try
+        {
+            metadataReader = new FileReader( metadataFile );
+
+            char[] cbuf = new char[16];
+
+            while ( metadataReader.read( cbuf ) > -1 )
+            {
+                // do nothing...just verify that it can be read.
+            }
+        }
+        finally
+        {
+            IOUtil.close( metadataReader );
+        }
+
