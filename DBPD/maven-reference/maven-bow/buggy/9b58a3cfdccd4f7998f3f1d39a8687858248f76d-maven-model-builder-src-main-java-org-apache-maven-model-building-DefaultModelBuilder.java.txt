MNG-5444 fixed building MavenProject from ModelSource

To maintain compatibility with (the extremely unlikely) existing
implementations of ModelSource, the new API methods are provided
via optional ModelSource2 interface. Updated javadoc to encourage
use of the new API.

Signed-off-by: Igor Fedorenko <igor@ifedorenko.com>

-        ModelData resultData = new ModelData( inputModel );
-        ModelData superData = new ModelData( getSuperModel() );
+        ModelData resultData = new ModelData( request.getModelSource(), inputModel );
+        ModelData superData = new ModelData( null, getSuperModel() );
-            currentData = readParent( tmpModel, request, problems );
+            currentData = readParent( tmpModel, currentData.getSource(), request, problems );
-    private ModelData readParent( Model childModel, ModelBuildingRequest request,
+    private ModelData readParent( Model childModel, ModelSource childSource, ModelBuildingRequest request,
-                parentData = readParentLocally( childModel, request, problems );
+                parentData = readParentLocally( childModel, childSource, request, problems );
-                    File expectedParentFile = getParentPomFile( childModel );
+                    ModelSource expectedParentSource = getParentPomFile( childModel, childSource );
-                    if ( !pomFile.equals( expectedParentFile ) )
+                    if ( expectedParentSource instanceof ModelSource2
+                        && !pomFile.toURI().equals( ( (ModelSource2) expectedParentSource ).getLocationURI() ) )
-    private ModelData readParentLocally( Model childModel, ModelBuildingRequest request,
+    private ModelData readParentLocally( Model childModel, ModelSource childSource, ModelBuildingRequest request,
-        File pomFile = getParentPomFile( childModel );
+        ModelSource candidateSource = getParentPomFile( childModel, childSource );
-        if ( pomFile == null || !pomFile.isFile() )
+        if ( candidateSource == null )
-        Model candidateModel = readModel( null, pomFile, request, problems );
+        File pomFile = null;
+        if ( candidateSource instanceof FileModelSource )
+        {
+            pomFile = ( (FileModelSource) candidateSource ).getPomFile();
+        }
+
+        Model candidateModel = readModel( candidateSource, pomFile, request, problems );
-        ModelData parentData = new ModelData( candidateModel, groupId, artifactId, version );
+        ModelData parentData = new ModelData( candidateSource, candidateModel, groupId, artifactId, version );
-    private File getParentPomFile( Model childModel )
+    private ModelSource getParentPomFile( Model childModel, ModelSource source )
-        File projectDirectory = childModel.getProjectDirectory();
-
-        if ( projectDirectory == null )
+        if ( !( source instanceof ModelSource2 ) )
-        parentPath = parentPath.replace( '\\', File.separatorChar ).replace( '/', File.separatorChar );
-
-        File pomFile = new File( new File( projectDirectory, parentPath ).toURI().normalize() );
-
-        if ( pomFile.isDirectory() )
-        {
-            pomFile = modelProcessor.locatePom( pomFile );
-        }
-
-        return pomFile;
+        return ( (ModelSource2) source ).getRelatedSource( parentPath );
-        ModelData parentData = new ModelData( parentModel, groupId, artifactId, version );
+        ModelData parentData = new ModelData( modelSource, parentModel, groupId, artifactId, version );
