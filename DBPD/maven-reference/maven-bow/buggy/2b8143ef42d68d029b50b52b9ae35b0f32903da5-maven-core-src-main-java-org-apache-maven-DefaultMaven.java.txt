Resolving: MNG-250



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@226334 13f79535-47bb-0310-9956-ffa450edef68

+        
+        
+        MavenProject topLevelProject;
-
-            projects = ProjectSorter.getSortedProjects( projects );
+            
+            // the reasoning here is that the list is still unsorted according to dependency, so the first project
+            // SHOULD BE the top-level, or the one we want to start with if we're doing an aggregated build.
+            
+            // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
+            topLevelProject = (MavenProject) projects.get( 0 );
+            
+            projects = ProjectSorter.getSortedProjects(projects);
-        catch ( CycleDetectedException e )
-        {
-            throw new ReactorException( "Error processing projects for the reactor: ", e );
-        }
+        catch ( CycleDetectedException e )
+        {
+            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
+
+            MavenExecutionResponse response = new MavenExecutionResponse();
+            response.setStart( new Date() );
+            response.setFinish( new Date() );
+            response.setException( e );
+            logFailure( response, e, null );
+
+            return response;
+        }
-            List goals = request.getGoals();
-
-            for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
+            try
-                MavenProject project = (MavenProject) iterator.next();
-
-                line();
-
-                getLogger().info( "Building " + project.getName() );
-
-                line();
-
-                try
+                MavenExecutionResponse response = lifecycleExecutor.execute( session, topLevelProject, dispatcher );
+                
+                // TODO: is this perhaps more appropriate in the CLI?
+                if ( response.isExecutionFailure() )
-                    MavenExecutionResponse response = processProject( session, goals, project, dispatcher );
-                    if ( response.isExecutionFailure() )
+                    dispatcher.dispatchError( event, request.getBaseDirectory(), response.getException() );
+
+                    // TODO: yuck! Revisit when cleaning up the exception handling from the top down
+                    Throwable exception = response.getException();
+
+                    if ( exception instanceof MojoExecutionException )
-                        dispatcher.dispatchError( event, request.getBaseDirectory(), response.getException() );
-
-                        return response;
+                        if ( exception.getCause() == null )
+                        {
+                            MojoExecutionException e = (MojoExecutionException) exception;
+                            
+                            logFailure( response, e, e.getLongMessage() );
+                        }
+                        else
+                        {
+                            // TODO: throw exceptions like this, so "failures" are just that
+                            logError( response );
+                        }
+                    else if ( exception instanceof ArtifactResolutionException )
+                    {
+                        logFailure( response, exception, null );
+                    }
+                    else
+                    {
+                        // TODO: this should be a "FATAL" exception, reported to the
+                        // developers - however currently a LOT of
+                        // "user" errors fall through the cracks (like invalid POMs, as
+                        // one example)
+                        logError( response );
+                    }
+                    
+                    return response;
-                catch ( LifecycleExecutionException e )
+                else
-                    throw new ReactorException( "Error executing project within the reactor", e );
+                    logSuccess( response );
+            catch ( LifecycleExecutionException e )
+            {
+                throw new ReactorException( "Error executing project within the reactor", e );
+            }
-    private MavenExecutionResponse processProject( MavenSession session, List goals, MavenProject project,
-                                                   EventDispatcher dispatcher )
-        throws LifecycleExecutionException
-    {
-        // !! This is ripe for refactoring to an aspect.
-        // Event monitoring.
-        String event = MavenEvents.PROJECT_EXECUTION;
-
-        dispatcher.dispatchStart( event, project.getId() );
-
-        MavenExecutionResponse response;
-        try
-        {
-            // Actual meat of the code.
-            response = lifecycleExecutor.execute( goals, session, project );
-
-            dispatcher.dispatchEnd( event, project.getId() );
-        }
-        catch ( LifecycleExecutionException e )
-        {
-            dispatcher.dispatchError( event, project.getId(), e );
-            throw e;
-        }
-        // End event monitoring.
-
-        // TODO: is this perhaps more appropriate in the CLI?
-        if ( response.isExecutionFailure() )
-        {
-            // TODO: yuck! Revisit when cleaning up the exception handling from the top down
-            Throwable exception = response.getException();
-
-            if ( exception instanceof MojoExecutionException )
-            {
-                if ( exception.getCause() == null )
-                {
-                    MojoExecutionException e = (MojoExecutionException) exception;
-                    logFailure( response, e, e.getLongMessage() );
-                }
-                else
-                {
-                    // TODO: throw exceptions like this, so "failures" are just that
-                    logError( response );
-                }
-            }
-            else if ( exception instanceof ArtifactResolutionException )
-            {
-                logFailure( response, exception, null );
-            }
-            else
-            {
-                // TODO: this should be a "FATAL" exception, reported to the
-                // developers - however currently a LOT of
-                // "user" errors fall through the cracks (like invalid POMs, as
-                // one example)
-                logError( response );
-            }
-        }
-        else
-        {
-            logSuccess( response );
-        }
-        return response;
-    }
-
+        
