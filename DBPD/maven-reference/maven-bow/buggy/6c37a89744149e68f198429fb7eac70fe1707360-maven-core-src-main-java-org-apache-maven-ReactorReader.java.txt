[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.repository.LocalArtifactRepository;
+import org.sonatype.aether.artifact.Artifact;
+import org.sonatype.aether.repository.WorkspaceReader;
+import org.sonatype.aether.repository.WorkspaceRepository;
+import java.util.HashSet;
- * An implementation of a repository that knows how to search the Maven reactor for artifacts.
- *
+ * An implementation of a workspace reader that knows how to search the Maven reactor for artifacts.
+ * 
-public class ReactorArtifactRepository
-    extends LocalArtifactRepository
+class ReactorReader
+    implements WorkspaceReader
-    private final int hashCode;
+    private WorkspaceRepository repository;
-    public ReactorArtifactRepository( Map<String, MavenProject> reactorProjects )
+    public ReactorReader( Map<String, MavenProject> reactorProjects )
-        hashCode = ( reactorProjects != null ) ? reactorProjects.keySet().hashCode() : 0;
-    }
-    @Override
-    public Artifact find( Artifact artifact )
-    {
-        String projectKey = ArtifactUtils.key( artifact );
-
-        MavenProject project = projectsByGAV.get( projectKey );
-
-        if ( project != null )
-        {
-            File file = find( project, artifact );
-            if ( file != null )
-            {
-                resolve( artifact, file );
-            }
-        }
-
-        return artifact;
+        repository = new WorkspaceRepository( "reactor", new HashSet<String>( projectsByGAV.keySet() ) );
-        if ( "pom".equals( artifact.getType() ) )
+        if ( "pom".equals( artifact.getExtension() ) )
-        Artifact projectArtifact = findMatchingArtifact( project, artifact );
+        org.apache.maven.artifact.Artifact projectArtifact = findMatchingArtifact( project, artifact );
-    private boolean hasArtifactFileFromPackagePhase( Artifact projectArtifact )
+    private boolean hasArtifactFileFromPackagePhase( org.apache.maven.artifact.Artifact projectArtifact )
-    private void resolve( Artifact artifact, File file )
+    /**
+     * Tries to resolve the specified artifact from the artifacts of the given project.
+     * 
+     * @param project The project to try to resolve the artifact from, must not be <code>null</code>.
+     * @param requestedArtifact The artifact to resolve, must not be <code>null</code>.
+     * @return The matching artifact from the project or <code>null</code> if not found.
+     */
+    private org.apache.maven.artifact.Artifact findMatchingArtifact( MavenProject project, Artifact requestedArtifact )
-        artifact.setFile( file );
+        String requestedRepositoryConflictId = getConflictId( requestedArtifact );
-        artifact.setResolved( true );
+        org.apache.maven.artifact.Artifact mainArtifact = project.getArtifact();
+        if ( requestedRepositoryConflictId.equals( getConflictId( mainArtifact ) ) )
+        {
+            return mainArtifact;
+        }
-        artifact.setRepository( this );
+        Collection<org.apache.maven.artifact.Artifact> attachedArtifacts = project.getAttachedArtifacts();
+        if ( attachedArtifacts != null && !attachedArtifacts.isEmpty() )
+        {
+            for ( org.apache.maven.artifact.Artifact attachedArtifact : attachedArtifacts )
+            {
+                if ( requestedRepositoryConflictId.equals( getConflictId( attachedArtifact ) ) )
+                {
+                    return attachedArtifact;
+                }
+            }
+        }
+
+        return null;
-    @Override
+    /**
+     * Gets the repository conflict id of the specified artifact. Unlike the dependency conflict id, the repository
+     * conflict id uses the artifact file extension instead of the artifact type. Hence, the repository conflict id more
+     * closely reflects the identity of artifacts as perceived by a repository.
+     * 
+     * @param artifact The artifact, must not be <code>null</code>.
+     * @return The repository conflict id, never <code>null</code>.
+     */
+    private String getConflictId( org.apache.maven.artifact.Artifact artifact )
+    {
+        StringBuilder buffer = new StringBuilder( 128 );
+        buffer.append( artifact.getGroupId() );
+        buffer.append( ':' ).append( artifact.getArtifactId() );
+        if ( artifact.getArtifactHandler() != null )
+        {
+            buffer.append( ':' ).append( artifact.getArtifactHandler().getExtension() );
+        }
+        else
+        {
+            buffer.append( ':' ).append( artifact.getType() );
+        }
+        if ( artifact.hasClassifier() )
+        {
+            buffer.append( ':' ).append( artifact.getClassifier() );
+        }
+        return buffer.toString();
+    }
+
+    private String getConflictId( Artifact artifact )
+    {
+        StringBuilder buffer = new StringBuilder( 128 );
+        buffer.append( artifact.getGroupId() );
+        buffer.append( ':' ).append( artifact.getArtifactId() );
+        buffer.append( ':' ).append( artifact.getExtension() );
+        if ( artifact.getClassifier().length() > 0 )
+        {
+            buffer.append( ':' ).append( artifact.getClassifier() );
+        }
+        return buffer.toString();
+    }
+
+    /**
+     * Determines whether the specified artifact refers to test classes.
+     * 
+     * @param artifact The artifact to check, must not be {@code null}.
+     * @return {@code true} if the artifact refers to test classes, {@code false} otherwise.
+     */
+    private static boolean isTestArtifact( Artifact artifact )
+    {
+        if ( "test-jar".equals( artifact.getProperty( "type", "" ) ) )
+        {
+            return true;
+        }
+        else if ( "jar".equals( artifact.getExtension() ) && "tests".equals( artifact.getClassifier() ) )
+        {
+            return true;
+        }
+        return false;
+    }
+
+    public File findArtifact( Artifact artifact )
+    {
+        String projectKey = artifact.getGroupId() + ':' + artifact.getArtifactId() + ':' + artifact.getVersion();
+
+        MavenProject project = projectsByGAV.get( projectKey );
+
+        if ( project != null )
+        {
+            return find( project, artifact );
+        }
+
+        return null;
+    }
+
-        String key = ArtifactUtils.versionlessKey( artifact );
+        String key = artifact.getGroupId() + ':' + artifact.getArtifactId();
-    @Override
-    public String getId()
+    public WorkspaceRepository getRepository()
-        return "reactor";
-    }
-
-    @Override
-    public boolean hasLocalMetadata()
-    {
-        return false;
-    }
-
-    /**
-     * Tries to resolve the specified artifact from the artifacts of the given project.
-     *
-     * @param project The project to try to resolve the artifact from, must not be <code>null</code>.
-     * @param requestedArtifact The artifact to resolve, must not be <code>null</code>.
-     * @return The matching artifact from the project or <code>null</code> if not found.
-     */
-    private Artifact findMatchingArtifact( MavenProject project, Artifact requestedArtifact )
-    {
-        String requestedDependencyConflictId = requestedArtifact.getDependencyConflictId();
-
-        // check for match with project's main artifact by dependency conflict id
-        Artifact mainArtifact = project.getArtifact();
-        if ( requestedDependencyConflictId.equals( mainArtifact.getDependencyConflictId() ) )
-        {
-            return mainArtifact;
-        }
-
-        String requestedRepositoryConflictId = getRepositoryConflictId( requestedArtifact );
-
-        // check for match with project's main artifact by repository conflict id
-        if ( requestedRepositoryConflictId.equals( getRepositoryConflictId( mainArtifact ) ) )
-        {
-            return mainArtifact;
-        }
-
-        // check for match with one of the attached artifacts
-        Collection<Artifact> attachedArtifacts = project.getAttachedArtifacts();
-        if ( attachedArtifacts != null && !attachedArtifacts.isEmpty() )
-        {
-            // first try matching by dependency conflict id
-            for ( Artifact attachedArtifact : attachedArtifacts )
-            {
-                if ( requestedDependencyConflictId.equals( attachedArtifact.getDependencyConflictId() ) )
-                {
-                    return attachedArtifact;
-                }
-            }
-
-            // next try matching by repository conflict id
-            for ( Artifact attachedArtifact : attachedArtifacts )
-            {
-                if ( requestedRepositoryConflictId.equals( getRepositoryConflictId( attachedArtifact ) ) )
-                {
-                    return attachedArtifact;
-                }
-            }
-        }
-
-        return null;
-    }
-
-    /**
-     * Gets the repository conflict id of the specified artifact. Unlike the dependency conflict id, the repository
-     * conflict id uses the artifact file extension instead of the artifact type. Hence, the repository conflict id more
-     * closely reflects the identity of artifacts as perceived by a repository.
-     *
-     * @param artifact The artifact, must not be <code>null</code>.
-     * @return The repository conflict id, never <code>null</code>.
-     */
-    private String getRepositoryConflictId( Artifact artifact )
-    {
-        StringBuilder buffer = new StringBuilder( 128 );
-        buffer.append( artifact.getGroupId() );
-        buffer.append( ':' ).append( artifact.getArtifactId() );
-        if ( artifact.getArtifactHandler() != null )
-        {
-            buffer.append( ':' ).append( artifact.getArtifactHandler().getExtension() );
-        }
-        else
-        {
-            buffer.append( ':' ).append( artifact.getType() );
-        }
-        if ( artifact.hasClassifier() )
-        {
-            buffer.append( ':' ).append( artifact.getClassifier() );
-        }
-        return buffer.toString();
-    }
-
-    /**
-     * Determines whether the specified artifact refers to test classes.
-     *
-     * @param artifact The artifact to check, must not be {@code null}.
-     * @return {@code true} if the artifact refers to test classes, {@code false} otherwise.
-     */
-    private static boolean isTestArtifact( Artifact artifact )
-    {
-        if ( "test-jar".equals( artifact.getType() ) )
-        {
-            return true;
-        }
-        else if ( "jar".equals( artifact.getType() ) && "tests".equals( artifact.getClassifier() ) )
-        {
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    public int hashCode()
-    {
-        return hashCode;
-    }
-
-    @Override
-    public boolean equals( Object obj )
-    {
-        if ( this == obj )
-        {
-            return true;
-        }
-        if ( obj == null )
-        {
-            return false;
-        }
-        if ( getClass() != obj.getClass() )
-        {
-            return false;
-        }
-
-        ReactorArtifactRepository other = (ReactorArtifactRepository) obj;
-
-        return eq( projectsByGAV.keySet(), other.projectsByGAV.keySet() );
-    }
-
-    @Override
-    public boolean isProjectAware()
-    {
-        return true;
+        return repository;
