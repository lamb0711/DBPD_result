MNG-2721: Determine a standard way to pass proxy information into the embedder 
http://jira.codehaus.org/browse/MNG-2721

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@491499 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import org.apache.maven.settings.Settings;
+import org.apache.maven.settings.Proxy;
+import org.apache.maven.settings.Server;
+import org.apache.maven.settings.Mirror;
+import org.apache.maven.reactor.MavenExecutionException;
+import org.apache.maven.usability.SystemWarnings;
+import org.apache.maven.artifact.manager.WagonManager;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
+import org.codehaus.plexus.context.ContextException;
+import org.codehaus.plexus.context.Context;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.PlexusConstants;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
-	implements MavenExecutionRequestDefaultsPopulator
+	implements MavenExecutionRequestDefaultsPopulator, Contextualizable
-	
-	public MavenExecutionRequest populateDefaults(MavenExecutionRequest request) 
+
+    private PlexusContainer container;
+
+    public MavenExecutionRequest populateDefaults(MavenExecutionRequest request)
+        // Wagon
+
+        if ( request.getSettings().isOffline() )
+        {
+            getLogger().info( SystemWarnings.getOfflineWarning() );
+
+            WagonManager wagonManager = null;
+
+            try
+            {
+                wagonManager = (WagonManager) container.lookup( WagonManager.ROLE );
+
+                wagonManager.setOnline( false );
+            }
+            catch ( ComponentLookupException e )
+            {
+                throw new MavenEmbedderException( "Cannot retrieve WagonManager in order to set offline mode.", e );
+            }
+            finally
+            {
+                try
+                {
+                    container.release( wagonManager );
+                }
+                catch ( ComponentLifecycleException e )
+                {
+                    getLogger().warn( "Cannot release WagonManager.", e );
+                }
+            }
+        }
+
+        try
+        {
+            resolveParameters( request.getSettings() );
+        }
+        catch ( ComponentLookupException e )
+        {
+            throw new MavenEmbedderException( "Unable to configure Maven for execution", e );
+        }
+        catch ( ComponentLifecycleException e )
+        {
+            throw new MavenEmbedderException( "Unable to configure Maven for execution", e );
+        }
+        catch ( SettingsConfigurationException e )
+        {
+            throw new MavenEmbedderException( "Unable to configure Maven for execution", e );
+        }
+
-    }	
+    }
+
+    private void resolveParameters( Settings settings )
+        throws ComponentLookupException, ComponentLifecycleException, SettingsConfigurationException
+    {
+        WagonManager wagonManager = (WagonManager) container.lookup( WagonManager.ROLE );
+
+        try
+        {
+            Proxy proxy = settings.getActiveProxy();
+
+            if ( proxy != null )
+            {
+                if ( proxy.getHost() == null )
+                {
+                    throw new SettingsConfigurationException( "Proxy in settings.xml has no host" );
+                }
+
+                wagonManager.addProxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), proxy.getUsername(),
+                                       proxy.getPassword(), proxy.getNonProxyHosts() );
+            }
+
+            for ( Iterator i = settings.getServers().iterator(); i.hasNext(); )
+            {
+                Server server = (Server) i.next();
+
+                wagonManager.addAuthenticationInfo( server.getId(), server.getUsername(), server.getPassword(),
+                                                    server.getPrivateKey(), server.getPassphrase() );
+
+                wagonManager.addPermissionInfo( server.getId(), server.getFilePermissions(),
+                                                server.getDirectoryPermissions() );
+
+                if ( server.getConfiguration() != null )
+                {
+                    wagonManager.addConfiguration( server.getId(), (Xpp3Dom) server.getConfiguration() );
+                }
+            }
+
+            for ( Iterator i = settings.getMirrors().iterator(); i.hasNext(); )
+            {
+                Mirror mirror = (Mirror) i.next();
+
+                wagonManager.addMirror( mirror.getId(), mirror.getMirrorOf(), mirror.getUrl() );
+            }
+        }
+        finally
+        {
+            container.release( wagonManager );
+        }
+    }
+
+    // ----------------------------------------------------------------------------
+    // Lifecycle
+    // ----------------------------------------------------------------------------
+
+    public void contextualize( Context context )
+        throws ContextException
+    {
+        container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
+    }
