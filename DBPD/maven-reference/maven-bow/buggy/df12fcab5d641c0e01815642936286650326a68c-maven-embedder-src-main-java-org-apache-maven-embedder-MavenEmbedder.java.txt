o restoring assembly descriptor so that I can actually build from within this module
o all the use of an embedder request with no settings file information and have the defaults just kick in



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@491334 13f79535-47bb-0310-9956-ffa450edef68

+     *
-    
+
-    /**
-     * @deprecated not used.
-     */
+    /** @deprecated not used. */
-    /**
-     * @deprecated not used.
-     */
+    /** @deprecated not used. */
-    /**
-     * @deprecated not used.
-     */
+    /** @deprecated not used. */
-    /**
-     * @deprecated not used.
-     */
+    /** @deprecated not used. */
-    /**
-     * @deprecated not used.
-     */
+    /** @deprecated not used. */
-    /**
-     * @deprecated not used.
-     */
+    /** @deprecated not used. */
-    /**
-     * @deprecated not used.
-     */
+    /** @deprecated not used. */
-    /**
-     * @deprecated not used
-     */
+    /** @deprecated not used */
-    /**
-     * @deprecated not used.
-     */
+    /** @deprecated not used. */
-     * 
+     *
-        return new File(getLocalRepositoryPath(settings));
+        return new File( getLocalRepositoryPath( settings ) );
-    public void writeModel( Writer writer, Model model )
+    public void writeModel( Writer writer,
+                            Model model )
-    public MavenProject readProjectWithDependencies( File mavenProject, TransferListener transferListener )
+    public MavenProject readProjectWithDependencies( File mavenProject,
+                                                     TransferListener transferListener )
-        return mavenProjectBuilder.buildWithDependencies( mavenProject, localRepository, profileManager, transferListener );
+        return mavenProjectBuilder.buildWithDependencies( mavenProject, localRepository, profileManager,
+                                                          transferListener );
-    public List collectProjects( File basedir, String[] includes, String[] excludes )
+    public List collectProjects( File basedir,
+                                 String[] includes,
+                                 String[] excludes )
-    public Artifact createArtifact( String groupId, String artifactId, String version, String scope, String type )
+    public Artifact createArtifact( String groupId,
+                                    String artifactId,
+                                    String version,
+                                    String scope,
+                                    String type )
-    public Artifact createArtifactWithClassifier( String groupId, String artifactId, String version, String type, String classifier )
+    public Artifact createArtifactWithClassifier( String groupId,
+                                                  String artifactId,
+                                                  String version,
+                                                  String type,
+                                                  String classifier )
-    public void resolve( Artifact artifact, List remoteRepositories, ArtifactRepository localRepository )
+    public void resolve( Artifact artifact,
+                         List remoteRepositories,
+                         ArtifactRepository localRepository )
-            InputStream is = classLoader.getResourceAsStream( "/plugins/" + summaryPluginDescriptor.getArtifactId() + ".xml" );
+            InputStream is =
+                classLoader.getResourceAsStream( "/plugins/" + summaryPluginDescriptor.getArtifactId() + ".xml" );
-    private SummaryPluginDescriptor makeMockPlugin( String groupId, String artifactId, String name )
+    private SummaryPluginDescriptor makeMockPlugin( String groupId,
+                                                    String artifactId,
+                                                    String name )
-        PlexusConfiguration[] phasesConfigurations = configuration.getChild( "lifecycles" ).getChild( 0 ).getChild( "phases" ).getChildren( "phase" );
+        PlexusConfiguration[] phasesConfigurations =
+            configuration.getChild( "lifecycles" ).getChild( 0 ).getChild( "phases" ).getChildren( "phase" );
-    public ArtifactRepository createLocalRepository( String url, String repositoryId )
+    public ArtifactRepository createLocalRepository( String url,
+                                                     String repositoryId )
-    public ArtifactRepository createRepository( String url, String repositoryId )
+    public ArtifactRepository createRepository( String url,
+                                                String repositoryId )
-        ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
+        ArtifactRepositoryPolicy snapshotsPolicy =
+            new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
-        ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
+        ArtifactRepositoryPolicy releasesPolicy =
+            new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
-        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout, snapshotsPolicy, releasesPolicy );
+        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout,
+                                                                   snapshotsPolicy, releasesPolicy );
-    private List getPomFiles( File basedir, String[] includes, String[] excludes )
+    private List getPomFiles( File basedir,
+                              String[] includes,
+                              String[] excludes )
-        start(new DefaultMavenEmbedRequest());
-        
+        start( new DefaultMavenEmbedRequest() );
+
-    
-    public void start(MavenEmbedRequest req)
+
+    public void start( MavenEmbedRequest req )
-
-            throw new IllegalStateException( "A classWorld or classloader must be specified using setClassLoader|World(ClassLoader)." );
+            throw new IllegalStateException(
+                "A classWorld or classloader must be specified using setClassLoader|World(ClassLoader)." );
-        
-        
+
+
-            
-            if (req.getContainerCustomizer() != null) 
+
+            if ( req.getContainerCustomizer() != null )
-                req.getContainerCustomizer().customize(container);
+                req.getContainerCustomizer().customize( container );
-            
+
-            
-            profileManager.explicitlyActivate(req.getActiveProfiles());
-            
-            profileManager.explicitlyDeactivate(req.getInactiveProfiles());
+
+            profileManager.explicitlyActivate( req.getActiveProfiles() );
+
+            profileManager.explicitlyDeactivate( req.getInactiveProfiles() );
-            defaultArtifactRepositoryLayout = (ArtifactRepositoryLayout) container.lookup( ArtifactRepositoryLayout.ROLE, DEFAULT_LAYOUT_ID );
+            defaultArtifactRepositoryLayout =
+                (ArtifactRepositoryLayout) container.lookup( ArtifactRepositoryLayout.ROLE, DEFAULT_LAYOUT_ID );
-            
-            settings = mavenTools.buildSettings( req.getUserSettingsFile(), 
-                                                 req.getGlobalSettingsFile(), 
-                                                 null );
-            profileManager.loadSettingsProfiles( settings );
-            
-            resolveParameters( settings );
-    
+            // ----------------------------------------------------------------------------
+            // Settings
+            //
+            // If the settings file and the global settings file are null then we will use
+            // the defaults that Maven provides.
+            // ----------------------------------------------------------------------------
+
+            if ( req.getUserSettingsFile() == null )
+            {
+                req.setUserSettingsFile( mavenTools.getUserSettingsPath( null ) );
+            }
+
+            if ( req.getGlobalSettingsFile() == null )
+            {
+                req.setGlobalSettingsFile( mavenTools.getGlobalSettingsPath() );
+            }
+
+            settings = mavenTools.buildSettings( req.getUserSettingsFile(), req.getGlobalSettingsFile(), null );
+
+            resolveParameters( settings );
+
-            
+
+            profileManager.loadSettingsProfiles( settings );
-        } 
-        catch (SettingsConfigurationException e ) 
+        }
+        catch ( SettingsConfigurationException e )
-        } 
+        }
-    
+
-     * 
+     *
-        
+
-        
-        if ( proxy != null ) 
+
+        if ( proxy != null )
-            if ( proxy.getHost() == null ) 
+            if ( proxy.getHost() == null )
-            System.out.println("setting proxy to=" + proxy.getHost());
+            System.out.println( "setting proxy to=" + proxy.getHost() );
-                    proxy.getPassword(), proxy.getNonProxyHosts() );
+                                   proxy.getPassword(), proxy.getNonProxyHosts() );
-        
-        for ( Iterator i = settings.getServers().iterator(); i.hasNext(); ) 
+
+        for ( Iterator i = settings.getServers().iterator(); i.hasNext(); )
-            
+
-                    server.getPrivateKey(), server.getPassphrase() );
-            
+                                                server.getPrivateKey(), server.getPassphrase() );
+
-                    server.getDirectoryPermissions() );
-            
-            if ( server.getConfiguration() != null ) 
+                                            server.getDirectoryPermissions() );
+
+            if ( server.getConfiguration() != null )
-        
-        for ( Iterator i = settings.getMirrors().iterator(); i.hasNext(); ) 
+
+        for ( Iterator i = settings.getMirrors().iterator(); i.hasNext(); )
-            
+
-    
-
-        maven.execute(  request );
+        maven.execute( request );
-        return mavenTools.buildSettings( userSettingsPath,
-                                                 globalSettingsPath,
-                                                 interactive,
-                                                 offline,
-                                                 usePluginRegistry,
-                                                 pluginUpdateOverride );
+        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, interactive, offline, usePluginRegistry,
+                                         pluginUpdateOverride );
-    
+
+    public Settings buildSettings( File userSettingsPath,
+                                   File globalSettingsPath,
+                                   boolean interactive,
+                                   boolean offline,
+                                   boolean usePluginRegistry,
+                                   boolean pluginUpdateOverride )
+        throws SettingsConfigurationException
+    {
+        checkStarted();
+        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, interactive, offline, usePluginRegistry,
+                                         Boolean.valueOf( pluginUpdateOverride ) );
+    }
+
-        return mavenTools.buildSettings( userSettingsPath,
-                                         globalSettingsPath,
-                                         pluginUpdateOverride );
+        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, pluginUpdateOverride );
-    
+
+    public Settings buildSettings( File userSettingsPath,
+                                   File globalSettingsPath,
+                                   boolean pluginUpdateOverride )
+        throws SettingsConfigurationException
+    {
+        checkStarted();
+        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, Boolean.valueOf( pluginUpdateOverride ) );
+    }
-    
-    private void checkStarted() {
-        if (!started) {
-            throw new IllegalStateException("The embedder is not started, you need to call start() on the embedder prior to calling this method");
-        } 
+
+    private void checkStarted()
+    {
+        if ( !started )
+        {
+            throw new IllegalStateException(
+                "The embedder is not started, you need to call start() on the embedder prior to calling this method" );
+        }
