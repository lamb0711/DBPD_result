o Revised error handling

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@807736 13f79535-47bb-0310-9956-ffa450edef68

-    private void populateDefaultConfigurationForPlugin( Plugin plugin, RepositoryRequest repositoryRequest ) 
+    public void populateDefaultConfigurationForPlugin( Plugin plugin, RepositoryRequest repositoryRequest ) 
-        for( PluginExecution pluginExecution : plugin.getExecutions() )
+        try
-            for( String goal : pluginExecution.getGoals() )
+            // NOTE: Retrieve the plugin descriptor regardless whether there are any executions to verify the plugin
+            PluginDescriptor pluginDescriptor = pluginManager.loadPlugin( plugin, repositoryRequest );
+
+            for ( PluginExecution pluginExecution : plugin.getExecutions() )
-                Xpp3Dom dom = getDefaultPluginConfiguration( plugin, goal, repositoryRequest );
-                pluginExecution.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) pluginExecution.getConfiguration(), dom, Boolean.TRUE ) );
+                for ( String goal : pluginExecution.getGoals() )
+                {
+                    MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( goal );
+
+                    if ( mojoDescriptor == null )
+                    {
+                        throw new MojoNotFoundException( goal, pluginDescriptor );
+                    }
+
+                    Xpp3Dom defaultConfiguration = getMojoConfiguration( mojoDescriptor );
+
+                    Xpp3Dom executionConfiguration =
+                        Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) pluginExecution.getConfiguration(), defaultConfiguration,
+                                              Boolean.TRUE );
+
+                    pluginExecution.setConfiguration( executionConfiguration );
+                }
+        catch ( PluginNotFoundException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
+        catch ( PluginResolutionException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
+        catch ( PluginDescriptorParsingException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
+        catch ( MojoNotFoundException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
+        catch ( InvalidPluginDescriptorException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
-    
+
-    
-    private Xpp3Dom getDefaultPluginConfiguration( Plugin plugin, String goal, RepositoryRequest repositoryRequest ) 
-        throws LifecycleExecutionException
-    {
-        MojoDescriptor mojoDescriptor;
-        
-        try
-        {
-            mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, repositoryRequest );
-        }
-        catch ( PluginNotFoundException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        catch ( PluginResolutionException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        catch ( PluginDescriptorParsingException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        catch ( MojoNotFoundException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        catch ( InvalidPluginDescriptorException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        
-        return getMojoConfiguration( mojoDescriptor );
-    }
-    
+
