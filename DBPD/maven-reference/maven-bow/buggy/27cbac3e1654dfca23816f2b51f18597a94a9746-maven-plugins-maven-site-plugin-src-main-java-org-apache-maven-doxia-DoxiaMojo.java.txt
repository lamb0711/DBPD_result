Use plexus-site-renderer for generate site with velocity templates.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@178887 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.doxia.module.xhtml.XhtmlSink;
-import org.codehaus.doxia.site.renderer.SiteRenderer;
+import org.apache.maven.reporting.MavenReportException;
+import org.codehaus.plexus.siterenderer.Renderer;
+import org.codehaus.plexus.siterenderer.RendererException;
+import org.codehaus.plexus.siterenderer.sink.SiteRendererSink;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.InputStreamReader;
+import java.io.LineNumberReader;
- * @author <a href="mailto:evenisse@apache.org">Emmanuel Venisse</a>
- * @version $Id$
+ * @requiresDependencyResolution test
+ *
+ * @author <a href="mailto:evenisse@apache.org">Emmanuel Venisse</a>
+ * @version $Id$
-    /**
-     * @parameter expression="${basedir}"
-     * @required
-     */
-    private String basedir;
+    private static final String RESOURCE_DIR = "org/apache/maven/doxia";
+
+    private static final String DEFAULT_TEMPLATE = RESOURCE_DIR + "/maven-site.vm";
-     * @parameter alias="flavor"
+     * @parameterX expression="${template}
-    private String flavour = "maven";
+    private String template = DEFAULT_TEMPLATE;
-     * @parameter expression="${component.org.codehaus.doxia.site.renderer.SiteRenderer}"
+     * @parameterX expression="${attributes}
+     */
+    private Map attributes;
+
+    /**
+     * @parameter expression="${component.org.codehaus.plexus.siterenderer.Renderer}"
-    private SiteRenderer siteRenderer;
+    private Renderer siteRenderer;
-                    XhtmlSink sink = siteRenderer.createSink( new File( siteDirectory ),
-                                                              report.getOutputName() + ".html", outputDirectory,
-                                                              getSiteDescriptor(), flavour );
+                    String outputFileName = report.getOutputName() + ".html";
+
+                    SiteRendererSink sink = siteRenderer.createSink( new File( siteDirectory ), outputFileName,
+                                                                     getSiteDescriptor() );
+
+                    File outputFile = new File( outputDirectory, outputFileName );
+
+                    if ( !outputFile.getParentFile().exists() )
+                    {
+                        outputFile.getParentFile().mkdirs();
+                    }
+
+                    siteRenderer.generateDocument( new FileWriter( outputFile ), template, attributes, sink );
-            //Generate static site
-            siteRenderer.render( siteDirectory, generatedSiteDirectory, outputDirectory, flavour, getSiteDescriptor(),
-                                 resourcesDirectory );
+            // Generate static site
+            siteRenderer.render( new File( siteDirectory ), new File( outputDirectory ), getSiteDescriptor(), template,
+                                 attributes );
+            siteRenderer.render( new File( generatedSiteDirectory ), new File( outputDirectory ), getSiteDescriptor(),
+                                 template, attributes );
+
+            // Copy site resources
+            if ( resourcesDirectory != null )
+            {
+                FileUtils.copyDirectory( resourcesDirectory, new File( outputDirectory ) );
+            }
+            
+            copyResources( outputDirectory );
+        }
+        catch ( MavenReportException e )
+        {
+            throw new MojoExecutionException( "Error during report generation", e );
+        }
+        catch ( RendererException e )
+        {
+            throw new MojoExecutionException( "Error during page generation", e );
-            // TODO: handle it better
-                throw new MojoExecutionException( "'" + report.getCategoryName() + "' category define for " +
-                                                  report.getName() + " mojo isn't valid." );
+                throw new MojoExecutionException( "'" + report.getCategoryName() + "' category define for "
+                                                  + report.getName() + " mojo isn't valid." );
-            buffer.append( "    <item name=\"" + MavenReport.CATEGORY_PROJECT_INFORMATION +
-                           "\" href=\"/project-info.html\" collapse=\"true\">\n" );
+            buffer.append( "    <item name=\"" + MavenReport.CATEGORY_PROJECT_INFORMATION
+                           + "\" href=\"/project-info.html\" collapse=\"true\">\n" );
-                buffer.append(
-                    "        <item name=\"" + report.getName() + "\" href=\"/" + report.getOutputName() +
-                    ".html\"/>\n" );
+                buffer.append( "        <item name=\"" + report.getName() + "\" href=\"/" + report.getOutputName()
+                               + ".html\"/>\n" );
-            buffer.append( "    <item name=\"" + MavenReport.CATEGORY_PROJECT_REPORTS +
-                           "\" href=\"/maven-reports.html\" collapse=\"true\">\n" );
+            buffer.append( "    <item name=\"" + MavenReport.CATEGORY_PROJECT_REPORTS
+                           + "\" href=\"/maven-reports.html\" collapse=\"true\">\n" );
-                buffer.append(
-                    "        <item name=\"" + report.getName() + "\" href=\"/" + report.getOutputName() +
-                    ".html\"/>\n" );
+                buffer.append( "        <item name=\"" + report.getName() + "\" href=\"/" + report.getOutputName()
+                               + ".html\"/>\n" );
-        XhtmlSink sink = siteRenderer.createSink( new File( siteDirectory ), "project-info.html", outputDirectory,
-                                                  siteDescriptor, flavour );
+        String outputFileName = "project-info.html";
+
+        SiteRendererSink sink = siteRenderer
+            .createSink( new File( siteDirectory ), outputFileName, getSiteDescriptor() );
-        sink.text( "This document provides an overview of the various documents and links that are part " +
-                   "of this project's general information. All of this content is automatically generated by " );
+        sink.text( "This document provides an overview of the various documents and links that are part "
+                   + "of this project's general information. All of this content is automatically generated by " );
+
+        siteRenderer.generateDocument( new FileWriter( new File( outputDirectory, outputFileName ) ), template,
+                                       attributes, sink );
-        XhtmlSink sink = siteRenderer.createSink( new File( siteDirectory ), "maven-reports.html", outputDirectory,
-                                                  siteDescriptor, flavour );
+        String outputFileName = "maven-reports.html";
+
+        SiteRendererSink sink = siteRenderer
+            .createSink( new File( siteDirectory ), outputFileName, getSiteDescriptor() );
+
+        siteRenderer.generateDocument( new FileWriter( new File( outputDirectory, outputFileName ) ), template,
+                                       attributes, sink );
+    }
+
+    private void copyResources( String outputDirectory )
+        throws Exception
+    {
+        InputStream resourceList = getStream( RESOURCE_DIR + "/resources.txt" );
+
+        if ( resourceList != null )
+        {
+            LineNumberReader reader = new LineNumberReader( new InputStreamReader( resourceList ) );
+
+            String line;
+
+            while ( ( line = reader.readLine() ) != null )
+            {
+                InputStream is = getStream( RESOURCE_DIR + "/" + line );
+
+                if ( is == null )
+                {
+                    throw new IOException( "The resource " + line + " doesn't exists in " + DEFAULT_TEMPLATE + " template." );
+                }
+
+                File outputFile = new File( outputDirectory, line );
+
+                if ( !outputFile.getParentFile().exists() )
+                {
+                    outputFile.getParentFile().mkdirs();
+                }
+
+                FileOutputStream w = new FileOutputStream( outputFile );
+
+                IOUtil.copy( is, w );
+
+                IOUtil.close( is );
+
+                IOUtil.close( w );
+            }
+        }
+    }
+
+    private InputStream getStream( String name )
+        throws Exception
+    {
+        return DoxiaMojo.class.getClassLoader().getResourceAsStream( name );
