multi-module support


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163528 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.DefaultMavenExecutionRequest;
-import org.apache.maven.execution.MavenProjectExecutionRequest;
-import org.apache.maven.execution.MavenReactorExecutionRequest;
+import org.codehaus.plexus.util.FileUtils;
+import org.codehaus.plexus.util.StringUtils;
+import java.util.Collections;
-    public MavenExecutionResponse execute( MavenExecutionRequest request ) throws GoalNotFoundException, Exception
+    public MavenExecutionResponse execute( MavenExecutionRequest request )
+        throws GoalNotFoundException, Exception
-        // TODO: not happy about this:
-        if ( request instanceof MavenReactorExecutionRequest )
+        EventDispatcher dispatcher = request.getEventDispatcher();
+        String event = MavenEvents.REACTOR_EXECUTION;
+
+        // TODO: goals are outer loop
+        dispatcher.dispatchStart( event, request.getBaseDirectory() );
+        try
-            return handleReactor( (MavenReactorExecutionRequest) request );
+            List projects = new ArrayList();
+
+            try
+            {
+                List files = request.getProjectFiles();
+
+                for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
+                {
+                    File file = (File) iterator.next();
+
+                    MavenProject project = getProject( file, request.getLocalRepository() );
+
+                    projects.add( project );
+                }
+
+                projects = projectBuilder.getSortedProjects( projects );
+
+                if ( projects.isEmpty() )
+                {
+                    projects.add( projectBuilder.buildSuperProject( request.getLocalRepository() ) );
+                }
+            }
+            catch ( IOException e )
+            {
+                throw new ReactorException( "Error processing projects for the reactor: ", e );
+            }
+            catch ( ProjectBuildingException e )
+            {
+                throw new ReactorException( "Error processing projects for the reactor: ", e );
+            }
+            catch ( CycleDetectedException e )
+            {
+                throw new ReactorException( "Error processing projects for the reactor: ", e );
+            }
+
+            for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
+            {
+                MavenProject project = (MavenProject) iterator.next();
+
+                line();
+
+                getLogger().info( "Building " + project.getName() );
+
+                line();
+
+                try
+                {
+                    boolean isPom = "pom".equals( project.getPackaging() );
+                    if ( isPom )
+                    {
+                        // TODO: not required if discovered and cached
+                        MavenExecutionResponse response = processProject( request, project, dispatcher,
+                                                                          Collections.singletonList( "pom:install" ) );
+                        if ( response.isExecutionFailure() )
+                        {
+                            return response;
+                        }
+                    }
+
+                    if ( project.getModules() != null && !project.getModules().isEmpty() )
+                    {
+                        String includes = StringUtils.join( project.getModules().iterator(), "/pom.xml," ) +
+                            "/pom.xml";
+                        File baseDir = project.getFile().getParentFile();
+                        MavenExecutionRequest reactorRequest = new DefaultMavenExecutionRequest(
+                            request.getLocalRepository(), request.getUserModel(), request.getEventDispatcher(),
+                            request.getGoals(), FileUtils.getFiles( baseDir, includes, null ), baseDir.getPath() );
+                        MavenExecutionResponse response = execute( reactorRequest );
+                        if ( response != null && response.isExecutionFailure() )
+                        {
+                            return response;
+                        }
+
+                    }
+
+                    if ( !isPom )
+                    {
+                        MavenExecutionResponse response = processProject( request, project, dispatcher,
+                                                                          request.getGoals() );
+
+                        if ( response.isExecutionFailure() )
+                        {
+                            return response;
+                        }
+                    }
+                }
+                catch ( Exception e )
+                {
+                    throw new ReactorException( "Error executing project within the reactor", e );
+                }
+            }
+
+            dispatcher.dispatchEnd( event, request.getBaseDirectory() );
+
+            // TODO: not really satisfactory
+            return null;
-        else
+        catch ( ReactorException e )
-            return handleProject( request );
+            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
+
+            throw e;
-    // TODO: don't throw generic exception
-    public MavenExecutionResponse handleProject( MavenExecutionRequest request ) throws Exception
+    private MavenExecutionResponse processProject( MavenExecutionRequest request, MavenProject project,
+                                                   EventDispatcher dispatcher, List goals )
+        throws ComponentLookupException
-        List projectFiles = request.getProjectFiles();
-        
-        MavenProject project = null;
-        if(projectFiles != null && !projectFiles.isEmpty())
-        {
-            project = getProject( (File) request.getProjectFiles().get( 0 ), request.getLocalRepository() );
-        }
-        else
-        {
-            project = projectBuilder.buildSuperProject( request.getLocalRepository() );
-        }
-
-        EventDispatcher dispatcher = request.getEventDispatcher();
-            response = lifecycleExecutor.execute( request.getGoals(), session );
+            response = lifecycleExecutor.execute( goals, session );
-    // ----------------------------------------------------------------------
-    // Reactor
-    // ----------------------------------------------------------------------
-
-    public MavenExecutionResponse handleReactor( MavenReactorExecutionRequest request ) throws ReactorException
-    {
-        EventDispatcher dispatcher = request.getEventDispatcher();
-        String event = MavenEvents.REACTOR_EXECUTION;
-
-        dispatcher.dispatchStart( event, request.getBaseDirectory().getPath() );
-        try
-        {
-            List projects = new ArrayList();
-
-            getLogger().info( "Starting the reactor..." );
-
-            try
-            {
-                List files = request.getProjectFiles();
-
-                for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
-                {
-                    File file = (File) iterator.next();
-
-                    MavenProject project = getProject( file, request.getLocalRepository() );
-
-                    projects.add( project );
-                }
-
-                projects = projectBuilder.getSortedProjects( projects );
-
-            }
-            catch ( IOException e )
-            {
-                throw new ReactorException( "Error processing projects for the reactor: ", e );
-            }
-            catch ( ProjectBuildingException e )
-            {
-                throw new ReactorException( "Error processing projects for the reactor: ", e );
-            }
-            catch ( CycleDetectedException e )
-            {
-                throw new ReactorException( "Error processing projects for the reactor: ", e );
-            }
-
-            getLogger().info( "Our processing order:" );
-
-            for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
-            {
-                MavenProject project = (MavenProject) iterator.next();
-
-                getLogger().info( project.getName() );
-            }
-
-            for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
-            {
-                MavenProject project = (MavenProject) iterator.next();
-
-                System.out.println( "\n\n\n" );
-
-                line();
-
-                getLogger().info( "Building " + project.getName() );
-
-                line();
-
-                MavenProjectExecutionRequest projectExecutionRequest = request.createProjectExecutionRequest( project );
-
-                try
-                {
-                    MavenExecutionResponse response = handleProject( projectExecutionRequest );
-
-                    if ( response.isExecutionFailure() )
-                    {
-                        return response;
-                    }
-                }
-                catch ( Exception e )
-                {
-                    throw new ReactorException( "Error executing project within the reactor", e );
-                }
-
-            }
-
-            dispatcher.dispatchEnd( event, request.getBaseDirectory().getPath() );
-
-            // TODO: not really satisfactory
-            return null;
-        }
-        catch ( ReactorException e )
-        {
-            dispatcher.dispatchError( event, request.getBaseDirectory().getPath(), e );
-
-            throw e;
-        }
-    }
-
-    public MavenProject getProject( File pom, ArtifactRepository localRepository ) throws ProjectBuildingException
+    public MavenProject getProject( File pom, ArtifactRepository localRepository )
+        throws ProjectBuildingException
-     *       them in. It doesn't feel quite right.
+     * them in. It doesn't feel quite right.
-    private void resolveParameters( MavenExecutionRequest request ) throws ComponentLookupException
+    private void resolveParameters( MavenExecutionRequest request )
+        throws ComponentLookupException
-    public void contextualize( Context context ) throws ContextException
+    public void contextualize( Context context )
+        throws ContextException
-        getLogger().info(
-                          "Final Memory: " + ( ( r.totalMemory() - r.freeMemory() ) / mb ) + "M/"
-                              + ( r.totalMemory() / mb ) + "M" );
+        getLogger().info( "Final Memory: " + ( ( r.totalMemory() - r.freeMemory() ) / mb ) + "M/" +
+                          ( r.totalMemory() / mb ) + "M" );
-    public List getSortedProjects( List projects ) throws CycleDetectedException
+    public List getSortedProjects( List projects )
+        throws CycleDetectedException
