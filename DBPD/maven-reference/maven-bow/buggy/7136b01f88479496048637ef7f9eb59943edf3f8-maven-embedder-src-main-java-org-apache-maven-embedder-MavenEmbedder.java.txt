o merging in my changes from the refactored embedder branch

  milos, this has some stuff that we worked on so i've tried to unify everythign in trunk
  now


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@483655 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.MavenExecutionResult;
+import org.apache.maven.execution.DefaultMavenExecutionResult;
+import java.util.Collections;
+    /**
+     * This method is used to grab the list of dependencies that belong to a project so that a UI
+     * can be populated. For example, a list of libraries that are used by an Eclipse, Netbeans, or
+     * IntelliJ project.
+     */
+    // Not well formed exceptions to point people at errors
+    // line number in the originating POM so that errors can be shown
+    // Need to walk down the tree of dependencies and find all the errors and report in the result
+    // validate the request
+    // for dependency errors: identifier, path
+    // unable to see why you can't get a resource from the repository
+    // short message or error id
+    // completely obey the same settings used by the CLI, should work exactly the same as the
+    //   command line. right now they are very different
+    public MavenExecutionResult readProjectWithDependencies( MavenExecutionRequest request )
+    {
+        MavenProject project = null;
+
+        // How can we get rid of the profile manager from the request
+
+        try
+        {
+            project = mavenProjectBuilder.buildWithDependencies( new File( request.getPomFile() ),
+                                                                 request.getLocalRepository(), profileManager,
+                                                                 request.getTransferListener() );
+        }
+        catch ( ProjectBuildingException e )
+        {
+            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
+        }
+
+        return new DefaultMavenExecutionResult( project, Collections.EMPTY_LIST );
+    }
+
