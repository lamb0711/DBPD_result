[MNG-2576] Make Like Reactor Mode

o Restored resume-from

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@795062 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
+        Collection<MavenProject> activeProjects = sorter.getSortedProjects();
+
+        File reactorDirectory = request.getPom().getAbsoluteFile().getParentFile();
+
-            File reactorDirectory = request.getPom().getParentFile().getAbsoluteFile();
-
-            Map<File, MavenProject> projectsByFile = new HashMap<File, MavenProject>();
-
-            for ( MavenProject project : sorter.getSortedProjects() )
-            {
-                projectsByFile.put( project.getFile(), project );
-            }
-
-                File pomFile = new File( reactorDirectory, selectedProject );
+                MavenProject project = null;
-                if ( pomFile.isDirectory() )
+                for ( MavenProject activeProject : activeProjects )
-                    pomFile = new File( pomFile, Maven.POMv4 );
+                    if ( isMatchingProject( activeProject, selectedProject, reactorDirectory ) )
+                    {
+                        project = activeProject;
+                        break;
+                    }
-                MavenProject project = projectsByFile.get( pomFile );
-
-                    throw new MavenExecutionException( "Could not find project in reactor: " + selectedProject,
-                                                       request.getPom() );
+                    throw new MavenExecutionException( "Could not find the selected project in the reactor: "
+                        + selectedProject, request.getPom() );
+            activeProjects = selectedProjects;
+
+
-            Collection<MavenProject> makeProjects = new LinkedHashSet<MavenProject>( selectedProjects );
-
+                activeProjects = new LinkedHashSet<MavenProject>( selectedProjects );
+
-                        makeProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );
+                        activeProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );
-                        makeProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );
+                        activeProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );
+        }
-            // TODO: process resume from
+        if ( StringUtils.isNotEmpty( request.getResumeFrom() ) )
+        {
+            String selectedProject = request.getResumeFrom();
-            graph = new FilteredProjectDependencyGraph( graph, makeProjects );
+            List<MavenProject> projects = new ArrayList<MavenProject>( activeProjects.size() );
+
+            boolean resumed = false;
+
+            for ( MavenProject project : activeProjects )
+            {
+                if ( !resumed && isMatchingProject( project, selectedProject, reactorDirectory ) )
+                {
+                    resumed = true;
+                }
+
+                if ( resumed )
+                {
+                    projects.add( project );
+                }
+            }
+
+            if ( !resumed )
+            {
+                throw new MavenExecutionException( "Could not find project to resume reactor build from: "
+                    + selectedProject + " vs " + activeProjects, request.getPom() );
+            }
+
+            activeProjects = projects;
+        }
+
+        if ( activeProjects.size() != sorter.getSortedProjects().size() )
+        {
+            graph = new FilteredProjectDependencyGraph( graph, activeProjects );
+    private boolean isMatchingProject( MavenProject project, String selector, File reactorDirectory )
+    {
+        File selectedProject = new File( reactorDirectory, selector );
+
+        if ( selectedProject.isFile() )
+        {
+            return selectedProject.equals( project.getFile() );
+        }
+        else
+        {
+            return selectedProject.equals( project.getBasedir() );
+        }
+    }
+
