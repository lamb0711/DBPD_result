Merged back changes from sisbell-maven-2.1-profile

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@685575 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
-import org.apache.maven.artifact.versioning.VersionRange;
-import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
-import org.apache.maven.model.*;
+import org.apache.maven.model.Build;
+import org.apache.maven.model.CiManagement;
+import org.apache.maven.model.Contributor;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.DependencyManagement;
+import org.apache.maven.model.Developer;
+import org.apache.maven.model.DistributionManagement;
+import org.apache.maven.model.IssueManagement;
+import org.apache.maven.model.License;
+import org.apache.maven.model.MailingList;
+import org.apache.maven.model.Model;
+import org.apache.maven.model.Organization;
+import org.apache.maven.model.Plugin;
+import org.apache.maven.model.PluginExecution;
+import org.apache.maven.model.PluginManagement;
+import org.apache.maven.model.Prerequisites;
+import org.apache.maven.model.ReportPlugin;
+import org.apache.maven.model.ReportSet;
+import org.apache.maven.model.Reporting;
+import org.apache.maven.model.Resource;
+import org.apache.maven.model.Scm;
-import org.codehaus.plexus.util.StringUtils;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+import java.util.Stack;
-    private ArtifactFactory artifactFactory;
-
-    public MavenProject(Model model, ArtifactFactory artifactFactory) {
-        setModel( model );
-        this.artifactFactory = artifactFactory;
-    }
-
-    //    if ( project.getPluginArtifacts() != null )
-    //    {
-           // setPluginArtifacts( Collections.unmodifiableSet( project.getPluginArtifacts() ) );
-      //  }
+        if ( project.getPluginArtifacts() != null )
+        {
+            setPluginArtifacts( Collections.unmodifiableSet( project.getPluginArtifacts() ) );
+        }
+    public void setPluginArtifacts( Set pluginArtifacts )
+    {
+        this.pluginArtifacts = pluginArtifacts;
+
+        pluginArtifactMap = null;
+    }
+
-        if(pluginArtifacts != null) {
-            return pluginArtifacts;
-        }
-        Set pa = new HashSet();
-        if(artifactFactory != null) {
-            List plugins = getBuildPlugins();
-            for ( Iterator i = plugins.iterator(); i.hasNext(); )
-            {
-                Plugin p = (Plugin) i.next();
-
-                String version;
-                if ( StringUtils.isEmpty( p.getVersion() ) )
-                {
-                    version = "RELEASE";
-                }
-                else
-                {
-                    version = p.getVersion();
-                }
-
-                Artifact artifact;
-                try
-                {
-                    artifact = artifactFactory.createPluginArtifact( p.getGroupId(), p.getArtifactId(),
-                        VersionRange.createFromVersionSpec( version ) );
-                }
-                catch ( InvalidVersionSpecificationException e )
-                {
-                    return pa;
-                }
-
-                if ( artifact != null )
-                {
-                    pa.add( artifact );
-                }
-            }
-        }
-        pluginArtifacts = pa;
-        pluginArtifactMap = null;
-        pluginArtifactMap = ArtifactUtils.artifactMapByVersionlessId( getPluginArtifacts() );
+        if ( pluginArtifactMap == null )
+        {
+            pluginArtifactMap = ArtifactUtils.artifactMapByVersionlessId( getPluginArtifacts() );
+        }
+
-        if(managedVersionMap != null) {
-            return managedVersionMap;
-        }
-        
-        Map map = null;
-        if( artifactFactory != null ) {
-
-            List deps;
-            DependencyManagement dependencyManagement = getDependencyManagement();
-            if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null ) && ( deps.size() > 0 ) )
-            {
-                map = new ManagedVersionMap( map );
-                for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )
-                {
-                    Dependency d = (Dependency) i.next();
-
-                    try
-                    {
-                        VersionRange versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
-
-                        Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),
-                            d.getClassifier(), d.getScope(), d.isOptional() );
-
-                        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && ( d.getSystemPath() != null ) )
-                        {
-                            artifact.setFile( new File( d.getSystemPath() ) );
-                        }
-
-                        // If the dependencyManagement section listed exclusions,
-                        // add them to the managed artifacts here so that transitive
-                        // dependencies will be excluded if necessary.
-
-                        if ( ( null != d.getExclusions() ) && !d.getExclusions().isEmpty() )
-                        {
-                            List exclusions = new ArrayList();
-
-                            for ( Iterator j = d.getExclusions().iterator(); j.hasNext(); )
-                            {
-                                Exclusion e = (Exclusion) j.next();
-
-                                exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
-                            }
-
-                            ExcludesArtifactFilter eaf = new ExcludesArtifactFilter( exclusions );
-
-                            artifact.setDependencyFilter( eaf );
-                        }
-                        else
-                        {
-                            artifact.setDependencyFilter( null );
-                        }
-
-                        map.put( d.getManagementKey(), artifact );
-                    }
-                    catch ( InvalidVersionSpecificationException e )
-                    {
-                        map = Collections.EMPTY_MAP;
-                    }
-                }
-            }
-            else if ( map == null )
-            {
-                map = Collections.EMPTY_MAP;
-            }
-        }
-        managedVersionMap = map;
