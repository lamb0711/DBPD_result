PR: MNG-191
collect proejcts and modules first, then execute reactor


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163563 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.execution.DefaultMavenExecutionRequest;
-import org.apache.maven.lifecycle.GoalNotFoundException;
-    
+
-        throws GoalNotFoundException, Exception
+        throws ReactorException
-            List projects = new ArrayList();
+            List projects;
-                List files = request.getProjectFiles();
-
-                for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
-                {
-                    File file = (File) iterator.next();
-
-                    MavenProject project = getProject( file, request.getLocalRepository() );
-
-                    projects.add( project );
-                }
+                projects = collectProjects( request.getFiles(), request.getLocalRepository() );
-                    boolean isPom = "pom".equals( project.getPackaging() );
-                    if ( isPom )
+                    List goals;
+                    if ( "pom".equals( project.getPackaging() ) )
-                        MavenExecutionResponse response = processProject( request, project, dispatcher,
-                                                                          Collections.singletonList( "pom:install" ) );
-                        if ( response.isExecutionFailure() )
-                        {
-                            return response;
-                        }
+                        goals = Collections.singletonList( "pom:install" );
+                    }
+                    else
+                    {
+                        goals = request.getGoals();
-                    if ( project.getModules() != null && !project.getModules().isEmpty() )
+                    MavenExecutionResponse response = processProject( request, project, dispatcher, goals );
+                    if ( response.isExecutionFailure() )
-                        String includes = StringUtils.join( project.getModules().iterator(), "/pom.xml," ) + "/pom.xml";
-
-                        File baseDir = project.getFile().getParentFile();
-
-                        MavenExecutionRequest reactorRequest = new DefaultMavenExecutionRequest(
-                            request.getLocalRepository(),
-                            request.getUserModel(),
-                            request.getEventDispatcher(),
-                            request.getGoals(),
-                            FileUtils.getFiles( baseDir, includes, null ),
-                            baseDir.getPath() );
-
-                        MavenExecutionResponse response = execute( reactorRequest );
-
-                        if ( response != null && response.isExecutionFailure() )
-                        {
-                            return response;
-                        }
-                    }
-
-                    if ( !isPom )
-                    {
-                        MavenExecutionResponse response = processProject( request, project, dispatcher,
-                                                                          request.getGoals() );
-
-                        if ( response.isExecutionFailure() )
-                        {
-                            return response;
-                        }
+                        return response;
+    private List collectProjects( List files, ArtifactRepository localRepository )
+        throws ProjectBuildingException, ReactorException, IOException
+    {
+        List projects = new ArrayList( files.size() );
+
+        for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
+        {
+            File file = (File) iterator.next();
+
+            MavenProject project = getProject( file, localRepository );
+
+            if ( project.getModules() != null && !project.getModules().isEmpty() )
+            {
+                project.setPackaging( "pom" );
+
+                String includes = StringUtils.join( project.getModules().iterator(), "/pom.xml," ) + "/pom.xml";
+
+                if ( includes.indexOf( ".." ) >= 0 )
+                {
+                    throw new ReactorException( "Modules may not include '..'" );
+                }
+
+                List moduleFiles = FileUtils.getFiles( project.getFile().getParentFile(), includes, null );
+                projects.addAll( collectProjects( moduleFiles, localRepository ) );
+            }
+            projects.add( project );
+        }
+
+        return projects;
+    }
+
-        
+
