PR: MNG-257
- hook up the source:jar goal to packaging, but only execute for non-SNAPSHOT builds
- allow comma-delimited list of goals in phase definitions
- only register necessary phases for the goals given


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191111 13f79535-47bb-0310-9956-ffa450edef68

+        String maxPhase = null;
+
+
+            if ( tasks.contains( p ) )
+            {
+                maxPhase = p;
+            }
-        Map mappings;
-        try
+        if ( maxPhase != null )
-            LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, project.getPackaging() );
-            mappings = m.getPhases();
-        }
-        catch ( ComponentLookupException e )
-        {
-            getLogger().error( "No lifecycle mapping for type '" + project.getPackaging() + "': using defaults" );
-            mappings = defaultPhases;
-        }
-
-        for ( Iterator i = mappings.keySet().iterator(); i.hasNext(); )
-        {
-            String phase = (String) i.next();
-
-            String task = (String) mappings.get( phase );
-
-            MojoDescriptor mojoDescriptor = configureMojo( task, session, phaseMap );
-
-            addToPhaseMap( phaseMap, phase, mojoDescriptor );
-
-            List matchingGoalInstances = findMatchingGoalInstances( mojoDescriptor, project );
-
-            for ( Iterator instanceIterator = matchingGoalInstances.iterator(); instanceIterator.hasNext(); )
+            Map mappings;
+            try
-                GoalInstance goalInstance = (GoalInstance) instanceIterator.next();
+                LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, project.getPackaging() );
+                mappings = m.getPhases();
+            }
+            catch ( ComponentLookupException e )
+            {
+                getLogger().error( "No lifecycle mapping for type '" + project.getPackaging() + "': using defaults" );
+                mappings = defaultPhases;
+            }
-                addToGoalInstanceMap( goalInstanceMap, goalInstance );
+            for ( Iterator i = phases.iterator(); i.hasNext(); )
+            {
+                String phase = (String) i.next();
+
+                String phaseTasks = (String) mappings.get( phase );
+
+                if ( phaseTasks != null )
+                {
+                    for ( StringTokenizer tok = new StringTokenizer( phaseTasks, "," ); tok.hasMoreTokens(); )
+                    {
+                        String task = tok.nextToken().trim();
+
+                        MojoDescriptor mojoDescriptor = configureMojo( task, session, phaseMap );
+
+                        addToPhaseMap( phaseMap, phase, mojoDescriptor );
+
+                        List matchingGoalInstances = findMatchingGoalInstances( mojoDescriptor, project );
+
+                        for ( Iterator instanceIterator = matchingGoalInstances.iterator(); instanceIterator.hasNext(); )
+                        {
+                            GoalInstance goalInstance = (GoalInstance) instanceIterator.next();
+
+                            addToGoalInstanceMap( goalInstanceMap, goalInstance );
+                        }
+                    }
+                }
+
+                if ( phase.equals( maxPhase ) )
+                {
+                    break;
+                }
