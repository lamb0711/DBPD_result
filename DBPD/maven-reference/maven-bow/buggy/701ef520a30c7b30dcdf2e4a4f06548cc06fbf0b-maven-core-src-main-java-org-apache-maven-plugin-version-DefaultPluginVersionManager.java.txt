Working on MNG-607

o Changed MavenMetadataSource to a component, to avoid having to lookup artifactFactory and projectBuilder in order to 
  construct it.

o Added add(..) method to ScmBean in the release plugin to allow addition of release-pom.xml

o Changed the PrepareReleaseMojo to resolve ONLY version and parent-version for the normal pom.xml, and fully resolve all
  artifacts used in the release-pom.xml, including version, parent-version, dependency closure (given by project.getArtifacts()), plugins, and reports. It will then add the release-pom.xml, and (attempt to) delete it before performing the final commit for next development version.

o Added some mapping methods to ArtifactUtils, to key by artifact.getId, and to create an Artifact.getId()-compatible string from parameters.

o Added TestProjectBuilder to remove the requirement in ProjectClasspathTest to modify the fields of the project builder directly.

o Cleaned up the AbstractReleaseMojo and PrepareReleaseMojo to avoid container lookups...they're now mojo parameters with the 'component.' prefix.

NOTE: Next step is to figure out how to use maven-scm to remove an SCM resource, to enable the prepare mojo to take the release-pom.xml back out of HEAD after the tag is complete.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@224413 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.ArtifactResolver;
-    private ArtifactResolver artifactResolver;
-
+    private ArtifactMetadataSource artifactMetadataSource;
+
-    private ArtifactMetadataSource metadataSource;
-
+        return resolvePluginVersion( groupId, artifactId, project, settings, localRepository, false );
+    }
+    
+    public String resolvePluginVersion( String groupId, String artifactId, MavenProject project, Settings settings,
+                                        ArtifactRepository localRepository, boolean resolveAsReportPlugin )
+        throws PluginVersionResolutionException
+    {
-        String version = getVersionFromPluginConfig( groupId, artifactId, project );
+        String version = getVersionFromPluginConfig( groupId, artifactId, project, resolveAsReportPlugin );
-    private String getVersionFromPluginConfig( String groupId, String artifactId, MavenProject project )
+    private String getVersionFromPluginConfig( String groupId, String artifactId, MavenProject project, boolean resolveAsReportPlugin )
-        for ( Iterator it = project.getBuildPlugins().iterator(); it.hasNext(); )
-        {
-            Plugin plugin = (Plugin) it.next();
-
-            if ( groupId.equals( plugin.getGroupId() ) && artifactId.equals( plugin.getArtifactId() ) )
-            {
-                version = plugin.getVersion();
-
-                break;
-            }
-        }
-
-        // won't this overwrite the above loop if it exists in both places (unlikely, I know)??
-        // maybe that's the idea...?
-        if ( project.getReportPlugins() != null )
+        if ( resolveAsReportPlugin )
-                ReportPlugin reportPlugin = (ReportPlugin) it.next();
+                ReportPlugin plugin = (ReportPlugin) it.next();
-                if ( groupId.equals( reportPlugin.getGroupId() ) && artifactId.equals( reportPlugin.getArtifactId() ) )
+                if ( groupId.equals( plugin.getGroupId() ) && artifactId.equals( plugin.getArtifactId() ) )
-                    version = reportPlugin.getVersion();
+                    version = plugin.getVersion();
+
+                    break;
+                }
+            }
+        }
+        else
+        {
+            for ( Iterator it = project.getBuildPlugins().iterator(); it.hasNext(); )
+            {
+                Plugin plugin = (Plugin) it.next();
+
+                if ( groupId.equals( plugin.getGroupId() ) && artifactId.equals( plugin.getArtifactId() ) )
+                {
+                    version = plugin.getVersion();
-            metadataSource.retrieve( artifact, localRepository, remoteRepositories );
+            artifactMetadataSource.retrieve( artifact, localRepository, remoteRepositories );
