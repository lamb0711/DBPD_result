o another pass at cleaning up the MavenCli, it still needs work but at least I can see a pattern now for embedding


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@829988 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.execution.DefaultMavenExecutionResult;
-import org.apache.maven.execution.MavenExecutionRequestPopulationException;
-import org.apache.maven.execution.MavenExecutionRequestPopulator;
-import org.apache.maven.settings.Settings;
-import org.apache.maven.settings.building.SettingsBuildingException;
-import org.codehaus.plexus.PlexusContainerException;
-import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
+// TODO: push all common bits back to plexus cli and prepare for transition to Guice. We don't need 50 ways to make CLIs
+
- * @author jason van zyl
+ * @author Jason van Zyl
-    public static final File DEFAULT_GLOBAL_SETTINGS_FILE =
-        new File( System.getProperty( "maven.home", System.getProperty( "user.dir", "" ) ), "conf/settings.xml" );
+    public static final File DEFAULT_GLOBAL_SETTINGS_FILE = new File( System.getProperty( "maven.home", System.getProperty( "user.dir", "" ) ), "conf/settings.xml" );
-    private DefaultPlexusContainer container;
-
+
+    private Maven maven;
+    
+    private SettingsBuilder settingsBuilder;            
+    
+    private DefaultSecDispatcher dispatcher;
+
+    private enum Exit { EXIT_WITH_ERROR, EXIT_WITHOUT_ERROR }
-        MavenCli cli = new MavenCli( classWorld );
-
-        return cli.doMain( args, null, System.out, System.err );
+        MavenCli cli = new MavenCli();
+        return cli.doMain( new CliRequest( args, classWorld ) );
-    public MavenCli()
+    // TODO: need to externalize CliRequest
+    public static int doMain( String[] args, ClassWorld classWorld )
-        this( null );
+        MavenCli cli = new MavenCli();
+        return cli.doMain( new CliRequest( args, classWorld ) );
-
-    public MavenCli( ClassWorld classWorld )
-    {
-        if ( classWorld == null )
-        {
-            classWorld = new ClassWorld( "plexus.core", Thread.currentThread().getContextClassLoader() );
-        }
-
-        try
-        {
-            ContainerConfiguration cc =
-                new DefaultContainerConfiguration().setClassWorld( classWorld ).setName( "embedder" );
-
-            container = new DefaultPlexusContainer( cc );
-        }
-        catch ( PlexusContainerException e )
-        {
-            throw new IllegalStateException( "Could not start component container: " + e.getMessage(), e );
-        }
-
-        logger = new PrintStreamLogger( System.out );
-
-        container.setLoggerManager( new MavenLoggerManager( logger ) );
-        customizeContainer( container );
-    }
-
-    protected void customizeContainer( PlexusContainer container )
-    {        
-    }
-    
-    public int doMain( String[] args, String workingDirectory, PrintStream stdout, PrintStream stderr )
+    // TODO: need to externalize CliRequest
+    public int doMain( CliRequest cliRequest )
-        if ( stdout == null )
-        {
-            stdout = System.out;
-        }
-        if ( stderr == null )
-        {
-            stderr = System.err;
-        }
-        if ( workingDirectory == null )
-        {
-            workingDirectory = System.getProperty( "user.dir" );
-        }
-
-        // ----------------------------------------------------------------------
-        // Setup the command line parser
-        // ----------------------------------------------------------------------
-
-        CLIManager cliManager = new CLIManager();
-
-        CommandLine commandLine;
-            commandLine = cliManager.parse( args );
+            initialize( cliRequest );
+            // Need to process cli options first to get possible logging options
+            cli( cliRequest );                        
+            logging( cliRequest );     
+            commands( cliRequest );
+            container( cliRequest );
+            settings( cliRequest );
+            populateRequest( cliRequest );
+            encryption( cliRequest );                                    
+            return execute( cliRequest );
-        catch ( ParseException e )
-        {
-            stderr.println( "Unable to parse command line options: " + e.getMessage() );
-            cliManager.displayHelp( stdout );
+        catch( Exception e )
+        {            
+            CLIReportingUtils.showError( logger, "Error executing Maven.", e, cliRequest.showErrors );
+            
-
-        boolean debug = commandLine.hasOption( CLIManager.DEBUG );
-
-        boolean quiet = !debug && commandLine.hasOption( CLIManager.QUIET );
-
-        boolean showErrors = debug || commandLine.hasOption( CLIManager.ERRORS );
-
-        // ----------------------------------------------------------------------
-        // Process particular command line options
-        // ----------------------------------------------------------------------
-
-        if ( commandLine.hasOption( CLIManager.HELP ) )
+        finally
-            cliManager.displayHelp( stdout );
-
-            return 0;
+            if ( cliRequest.fileStream != null )
+            {
+                cliRequest.fileStream.close();
+            }
+    }
-        if ( commandLine.hasOption( CLIManager.VERSION ) )
+    private void initialize( CliRequest cliRequest )
+    {
+        if ( cliRequest.workingDirectory == null )
-            CLIReportingUtils.showVersion( stdout );
-
-            return 0;
-        }
-
+            cliRequest.workingDirectory = System.getProperty( "user.dir" );
+        }                               
+        
+        //
+        //
+        
-        }
-
-        PrintStream fileStream = null;
-
-        if ( commandLine.hasOption( CLIManager.LOG_FILE ) )
+        }        
+    }
+    
+    //
+    // Logging needs to be handled in a standard way at the container level.
+    //
+    private void logging( CliRequest cliRequest )
+    {   
+        if ( cliRequest.stdout == null )
-            File logFile = new File( commandLine.getOptionValue( CLIManager.LOG_FILE ) );
-            logFile = resolveFile( logFile, workingDirectory );
+            cliRequest.stdout = System.out;
+        }
+        if ( cliRequest.stderr == null )
+        {
+            cliRequest.stderr = System.err;
+        }       
+        
+        logger = new PrintStreamLogger( System.out );
+                
+        if ( cliRequest.commandLine.hasOption( CLIManager.LOG_FILE ) )
+        {
+            File logFile = new File( cliRequest.commandLine.getOptionValue( CLIManager.LOG_FILE ) );
+            logFile = resolveFile( logFile, cliRequest.workingDirectory );
-                fileStream = new PrintStream( logFile );
-                logger.setStream( fileStream );
+                cliRequest.fileStream = new PrintStream( logFile );
+                logger.setStream( cliRequest.fileStream );
-                stderr.println( e );
-                logger.setStream( stdout );
+                cliRequest.stderr.println( e );
+                logger.setStream( cliRequest.stdout );
-            logger.setStream( stdout );
-        }
-
-        //
-        
-        Maven maven;
-        
-        try
-        {
-            maven = container.lookup( Maven.class );
-            
-            modelProcessor = createModelProcessor( container );
-        }
-        catch ( ComponentLookupException e )
-        {
-            CLIReportingUtils.showError( logger, "Unable to start the embedder: ", e, showErrors );
-
-            return 1;
+            logger.setStream( cliRequest.stdout );
-        Configuration configuration = buildEmbedderConfiguration( commandLine, workingDirectory );        
+        cliRequest.request.setExecutionListener( new ExecutionEventLogger( logger ) );        
+    }
+    
+    //
+    // Every bit of information taken from the CLI should be processed here.
+    //
+    private void cli( CliRequest request )
+    {
+        CLIManager cliManager = new CLIManager();
+
+        try
+        {
+            request.commandLine = cliManager.parse( request.args );
+        }
+        catch ( ParseException e )
+        {
+            request.stderr.println( "Unable to parse command line options: " + e.getMessage() );
+            cliManager.displayHelp( request.stdout );
+            request.exit = Exit.EXIT_WITH_ERROR;
+        }
+
+        request.debug = request.commandLine.hasOption( CLIManager.DEBUG );
+        request.quiet = !request.debug && request.commandLine.hasOption( CLIManager.QUIET );
+        request.showErrors = request.debug || request.commandLine.hasOption( CLIManager.ERRORS );
+
+        // TODO: these should be moved out of here. Wrong place.
+        //
+        if ( request.commandLine.hasOption( CLIManager.HELP ) )
+        {
+            cliManager.displayHelp( request.stdout );
+            request.exit = Exit.EXIT_WITHOUT_ERROR;
+        }
+
+        if ( request.commandLine.hasOption( CLIManager.VERSION ) )
+        {
+            CLIReportingUtils.showVersion( request.stdout );
+            request.exit = Exit.EXIT_WITHOUT_ERROR;
+        }        
+    }    
-        MavenExecutionRequest request = new DefaultMavenExecutionRequest();
-
-        request.setGlobalSettingsFile( configuration.getGlobalSettingsFile() );
-        request.setUserSettingsFile( configuration.getUserSettingsFile() );
-
-        populateProperties( request, commandLine );
-
-        Settings settings;
-
-        try
+    private void commands( CliRequest cliRequest )
+    {
+        if ( cliRequest.debug || cliRequest.commandLine.hasOption( CLIManager.SHOW_VERSION ) )
-            SettingsBuildingRequest settingsRequest = new DefaultSettingsBuildingRequest();
-            settingsRequest.setGlobalSettingsFile( configuration.getGlobalSettingsFile() );
-            settingsRequest.setUserSettingsFile( configuration.getUserSettingsFile() );
-            settingsRequest.setSystemProperties( request.getSystemProperties() );
-            settingsRequest.setUserProperties( request.getUserProperties() );
-
-            SettingsBuilder settingsBuilder = container.lookup( SettingsBuilder.class );
-
-            try
-            {
-                SettingsBuildingResult settingsResult = settingsBuilder.build( settingsRequest );
-
-                settings = settingsResult.getEffectiveSettings();
-
-                if ( !settingsResult.getProblems().isEmpty() && logger.isWarnEnabled() )
-                {
-                    logger.warn( "" );
-                    logger.warn( "Some problems were encountered while building the effective settings" );
-
-                    for ( SettingsProblem problem : settingsResult.getProblems() )
-                    {
-                        logger.warn( problem.getMessage() + " @ " + problem.getLocation() );
-                    }
-
-                    logger.warn( "" );
-                }
-            }
-            finally
-            {
-                try
-                {
-                    container.release( settingsBuilder );
-                }
-                catch ( ComponentLifecycleException e )
-                {
-                    logger.debug( "Failed to release component: " + e.getMessage(), e );
-                }
-            }
-        }
-        catch ( ComponentLookupException e )
-        {
-            CLIReportingUtils.showError( logger, "Unable to lookup settings builder: ", e, showErrors );
-
-            return 1;
-        }
-        catch ( SettingsBuildingException e )
-        {
-            CLIReportingUtils.showError( logger, "Failed to read settings: ", e, showErrors );
-
-            return 1;
+            CLIReportingUtils.showVersion( cliRequest.stdout );
-        try
-        {
-            MavenExecutionRequestPopulator requestPopulator = container.lookup( MavenExecutionRequestPopulator.class );
-
-            try
-            {
-                requestPopulator.populateFromSettings( request, settings );
-            }
-            finally
-            {
-                try
-                {
-                    container.release( requestPopulator );
-                }
-                catch ( ComponentLifecycleException e )
-                {
-                    logger.debug( "Failed to release component: " + e.getMessage(), e );
-                }
-            }
-        }
-        catch ( ComponentLookupException e )
-        {
-            CLIReportingUtils.showError( logger, "Unable to lookup execution request populator: ", e, showErrors );
-
-            return 1;
-        }
-        catch ( MavenExecutionRequestPopulationException e )
-        {
-            CLIReportingUtils.showError( logger, "Failed to process settings: ", e, showErrors );
-
-            return 1;
-        }
-
-        populateRequest( request, commandLine, workingDirectory, debug, quiet, showErrors, stdout );
-
-        request.setExecutionListener( new ExecutionEventLogger( logger ) );
-
-        container.getLoggerManager().setThresholds( request.getLoggingLevel() );
-
-        if ( debug || commandLine.hasOption( CLIManager.SHOW_VERSION ) )
-        {
-            CLIReportingUtils.showVersion( stdout );
-        }
-
-        if ( showErrors )
+        if ( cliRequest.showErrors )
-        if ( MavenExecutionRequest.CHECKSUM_POLICY_WARN.equals( request.getGlobalChecksumPolicy() ) )
+        //
+        // TODO: move checksum policies to 
+        //
+        if ( MavenExecutionRequest.CHECKSUM_POLICY_WARN.equals( cliRequest.request.getGlobalChecksumPolicy() ) )
-        else if ( MavenExecutionRequest.CHECKSUM_POLICY_FAIL.equals( request.getGlobalChecksumPolicy() ) )
+        else if ( MavenExecutionRequest.CHECKSUM_POLICY_FAIL.equals( cliRequest.request.getGlobalChecksumPolicy() ) )
-
-        if ( configuration.getGlobalSettingsFile() != null )
+    }   
+    
+    private void container( CliRequest cliRequest )
+        throws Exception
+    {
+        if ( cliRequest.classWorld == null )
-            request.setGlobalSettingsFile( configuration.getGlobalSettingsFile() );
+            cliRequest.classWorld = new ClassWorld( "plexus.core", Thread.currentThread().getContextClassLoader() );
-        if ( configuration.getUserSettingsFile() != null )
-        {
-            request.setUserSettingsFile( configuration.getUserSettingsFile() );
-        }
+        ContainerConfiguration cc = new DefaultContainerConfiguration()
+            .setClassWorld( cliRequest.classWorld )
+            .setName( "maven" );
-        try
-        {
-            if ( commandLine.hasOption( CLIManager.ENCRYPT_MASTER_PASSWORD ) )
-            {
-                String passwd = commandLine.getOptionValue( CLIManager.ENCRYPT_MASTER_PASSWORD );
+        DefaultPlexusContainer container = new DefaultPlexusContainer( cc );
-                DefaultPlexusCipher cipher = new DefaultPlexusCipher();
+        container.setLoggerManager( new MavenLoggerManager( new PrintStreamLogger( System.out ) ) );
-                stdout.println( cipher.encryptAndDecorate( passwd, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
-
-                return 0;
-            }
-            else if ( commandLine.hasOption( CLIManager.ENCRYPT_PASSWORD ) )
-            {
-                String passwd = commandLine.getOptionValue( CLIManager.ENCRYPT_PASSWORD );
-
-                DefaultSecDispatcher dispatcher;
-                dispatcher = (DefaultSecDispatcher) container.lookup( SecDispatcher.class );
-                String configurationFile = dispatcher.getConfigurationFile();
-                if ( configurationFile.startsWith( "~" ) )
-                {
-                    configurationFile = System.getProperty( "user.home" ) + configurationFile.substring( 1 );
-                }
-                String file = System.getProperty( DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION, configurationFile );
-                container.release( dispatcher );
-
-                String master = null;
-
-                SettingsSecurity sec = SecUtil.read( file, true );
-                if ( sec != null )
-                {
-                    master = sec.getMaster();
-                }
-
-                if ( master == null )
-                {
-                    stderr.println( "Master password is not set in the setting security file" );
-
-                    return 1;
-                }
-
-                DefaultPlexusCipher cipher = new DefaultPlexusCipher();
-                String masterPasswd = cipher.decryptDecorated( master, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION );
-                stdout.println( cipher.encryptAndDecorate( passwd, masterPasswd ) );
-
-                return 0;
-            }
-        }
-        catch ( Exception e )
-        {
-            stderr.println( "FATAL ERROR: " + "Error encrypting password: " + e.getMessage() );
-
-            return 1;
-        }
+        container.getLoggerManager().setThresholds( cliRequest.request.getLoggingLevel() );
-        MavenExecutionResult result = new DefaultMavenExecutionResult();
+        customizeContainer( container );
-        try
-        {
-            MavenExecutionRequestPopulator populator = container.lookup(  MavenExecutionRequestPopulator.class );            
-            
-            request = populator.populateDefaults( request );
-        }
-        catch ( MavenExecutionRequestPopulationException e )
-        {
-            result.addException( e );
-        }
-        catch ( ComponentLookupException e )
-        {
-            result.addException( e );
-        }
+        maven = container.lookup( Maven.class );
-        result = maven.execute( request );
+        modelProcessor = createModelProcessor( container );
-        // The exception handling should be handled in Maven itself.
+        settingsBuilder = container.lookup( SettingsBuilder.class );
-        try
+        dispatcher = (DefaultSecDispatcher) container.lookup( SecDispatcher.class );
+    }
+    
+    protected void customizeContainer( PlexusContainer container )
+    {
+    }    
+    
+    //
+    // This should probably be a separate tool and not be baked into Maven.
+    //
+    private void encryption( CliRequest cliRequest )
+        throws Exception
+    {
+        if ( cliRequest.commandLine.hasOption( CLIManager.ENCRYPT_MASTER_PASSWORD ) )
-            return processResult( request, result, showErrors );
+            String passwd = cliRequest.commandLine.getOptionValue( CLIManager.ENCRYPT_MASTER_PASSWORD );
+
+            DefaultPlexusCipher cipher = new DefaultPlexusCipher();
+
+            cliRequest.stdout.println( cipher.encryptAndDecorate( passwd, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
-        finally
+        else if ( cliRequest.commandLine.hasOption( CLIManager.ENCRYPT_PASSWORD ) )
-            if ( fileStream != null )
+            String passwd = cliRequest.commandLine.getOptionValue( CLIManager.ENCRYPT_PASSWORD );
+
+            String configurationFile = dispatcher.getConfigurationFile();
+
+            if ( configurationFile.startsWith( "~" ) )
-                fileStream.close();
+                configurationFile = System.getProperty( "user.home" ) + configurationFile.substring( 1 );
+
+            String file = System.getProperty( DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION, configurationFile );
+
+            String master = null;
+
+            SettingsSecurity sec = SecUtil.read( file, true );
+            if ( sec != null )
+            {
+                master = sec.getMaster();
+            }
+
+            if ( master == null )
+            {
+                cliRequest.stderr.println( "Master password is not set in the setting security file." );
+            }
+
+            DefaultPlexusCipher cipher = new DefaultPlexusCipher();
+            String masterPasswd = cipher.decryptDecorated( master, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION );
+            cliRequest.stdout.println( cipher.encryptAndDecorate( passwd, masterPasswd ) );
-
-    private int processResult( MavenExecutionRequest request, MavenExecutionResult result, boolean showErrors )
+    
+    private int execute( CliRequest cliRequest )
+        MavenExecutionResult result = maven.execute( cliRequest.request );           
+        
-                logSummary( summary, references, "", showErrors );
+                logSummary( summary, references, "", cliRequest.showErrors );
-            if ( !showErrors )
+            if ( !cliRequest.showErrors )
-                logger.error( "For more information about the errors and possible solutions"
-                    + ", please read the following articles:" );
+                logger.error( "For more information about the errors and possible solutions" + ", please read the following articles:" );
-            if ( MavenExecutionRequest.REACTOR_FAIL_NEVER.equals( request.getReactorFailureBehavior() ) )
+            if ( MavenExecutionRequest.REACTOR_FAIL_NEVER.equals( cliRequest.request.getReactorFailureBehavior() ) )
-    protected ModelProcessor createModelProcessor( PlexusContainer container ) 
+    protected ModelProcessor createModelProcessor( PlexusContainer container )
-        return container.lookup( ModelProcessor.class );        
+        return container.lookup( ModelProcessor.class );
-    private Configuration buildEmbedderConfiguration( CommandLine commandLine, String workingDirectory )
+    private void settings( CliRequest cliRequest )
+        throws Exception
-        if ( commandLine.hasOption( CLIManager.ALTERNATE_USER_SETTINGS ) )
+        if ( cliRequest.commandLine.hasOption( CLIManager.ALTERNATE_USER_SETTINGS ) )
-            userSettingsFile = new File( commandLine.getOptionValue( CLIManager.ALTERNATE_USER_SETTINGS ) );
-            userSettingsFile = resolveFile( userSettingsFile, workingDirectory );
+            userSettingsFile = new File( cliRequest.commandLine.getOptionValue( CLIManager.ALTERNATE_USER_SETTINGS ) );
+            userSettingsFile = resolveFile( userSettingsFile, cliRequest.workingDirectory );
-        if ( commandLine.hasOption( CLIManager.ALTERNATE_GLOBAL_SETTINGS ) )
+        if ( cliRequest.commandLine.hasOption( CLIManager.ALTERNATE_GLOBAL_SETTINGS ) )
-            globalSettingsFile = new File( commandLine.getOptionValue( CLIManager.ALTERNATE_GLOBAL_SETTINGS ) );
-            globalSettingsFile = resolveFile( globalSettingsFile, workingDirectory );
+            globalSettingsFile = new File( cliRequest.commandLine.getOptionValue( CLIManager.ALTERNATE_GLOBAL_SETTINGS ) );
+            globalSettingsFile = resolveFile( globalSettingsFile, cliRequest.workingDirectory );
-        Configuration configuration = new DefaultConfiguration()
-            .setUserSettingsFile( userSettingsFile )
-            .setGlobalSettingsFile( globalSettingsFile );
+        cliRequest.request.setGlobalSettingsFile( globalSettingsFile );
+        cliRequest.request.setUserSettingsFile( userSettingsFile );
-        return configuration;
+        populateProperties( cliRequest.request, cliRequest.commandLine );
+
+        SettingsBuildingRequest settingsRequest = new DefaultSettingsBuildingRequest();
+        settingsRequest.setGlobalSettingsFile( globalSettingsFile );
+        settingsRequest.setUserSettingsFile( userSettingsFile );
+        settingsRequest.setSystemProperties( cliRequest.request.getSystemProperties() );
+        settingsRequest.setUserProperties( cliRequest.request.getUserProperties() );
+
+        SettingsBuildingResult settingsResult = settingsBuilder.build( settingsRequest );
+
+        if ( !settingsResult.getProblems().isEmpty() && logger.isWarnEnabled() )
+        {
+            logger.warn( "" );
+            logger.warn( "Some problems were encountered while building the effective settings" );
+
+            for ( SettingsProblem problem : settingsResult.getProblems() )
+            {
+                logger.warn( problem.getMessage() + " @ " + problem.getLocation() );
+            }
+
+            logger.warn( "" );
+        }
-    
-    private MavenExecutionRequest populateRequest( MavenExecutionRequest request, CommandLine commandLine,
-                                                   String workingDirectory, boolean debug, boolean quiet,
-                                                   boolean showErrors, PrintStream stdout )
+
+    private MavenExecutionRequest populateRequest( CliRequest cliRequest )
+        MavenExecutionRequest request = cliRequest.request; 
+        CommandLine commandLine = cliRequest.commandLine;
+        String workingDirectory = cliRequest.workingDirectory;
+        boolean debug = cliRequest.debug;
+        boolean quiet = cliRequest.quiet;
+        boolean showErrors = cliRequest.showErrors;
+        
-        if ( commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES )
-            || commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES2 ) )
+        if ( commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES ) || commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES2 ) )
-        @SuppressWarnings( "unchecked" )
+        @SuppressWarnings("unchecked")
-            String [] profileOptionValues = commandLine.getOptionValues( CLIManager.ACTIVATE_PROFILES );
+            String[] profileOptionValues = commandLine.getOptionValues( CLIManager.ACTIVATE_PROFILES );
-                    StringTokenizer profileTokens = new StringTokenizer( profileOptionValues[i] , "," );
+                    StringTokenizer profileTokens = new StringTokenizer( profileOptionValues[i], "," );
-            transferListener = new ConsoleMavenTransferListener( stdout );
+            transferListener = new ConsoleMavenTransferListener( cliRequest.stdout );
-            transferListener = new BatchModeMavenTransferListener( stdout );
+            transferListener = new BatchModeMavenTransferListener( cliRequest.stdout );
-        request
-            .setBaseDirectory( baseDirectory )
-            .setGoals( goals )
-            .setSystemProperties( systemProperties )
-            .setUserProperties( userProperties )
-            .setReactorFailureBehavior( reactorFailureBehaviour ) // default: fail fast
+        request.setBaseDirectory( baseDirectory ).setGoals( goals ).setSystemProperties( systemProperties ).setUserProperties( userProperties ).setReactorFailureBehavior( reactorFailureBehaviour ) // default: fail fast
-            .setUsePluginUpdateOverride( pluginUpdateOverride )
-            .addActiveProfiles( activeProfiles ) // optional
+            .setUsePluginUpdateOverride( pluginUpdateOverride ).addActiveProfiles( activeProfiles ) // optional
-        }        
-        
+        }
+
-        else if ( !commandLine.hasOption( CLIManager.ALSO_MAKE )
-            && commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
+        else if ( !commandLine.hasOption( CLIManager.ALSO_MAKE ) && commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
-        else if ( commandLine.hasOption( CLIManager.ALSO_MAKE )
-            && commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
+        else if ( commandLine.hasOption( CLIManager.ALSO_MAKE ) && commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
+    }
+    
+    static class CliRequest
+    {    
+        String[] args;
+        CommandLine commandLine;
+        PrintStream stdout;
+        PrintStream stderr;
+        ClassWorld classWorld;    
+        String workingDirectory;
+        boolean debug;
+        boolean quiet;
+        boolean showErrors; 
+        PrintStream fileStream;
+        MavenExecutionRequest request;
+        Exit exit;
+        
+        CliRequest( String[] args, ClassWorld classWorld )
+        {
+            this.args = args;
+            this.classWorld = classWorld;
+            this.request = new DefaultMavenExecutionRequest();
+        }        
