o deal specifically with site resources as the site is definitely
  a first class citizen.
  


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@171228 13f79535-47bb-0310-9956-ffa450edef68

-    public void createArchetype( String archetypeGroupId, String archetypeArtifactId, String archetypeVersion,
-                                 ArtifactRepository localRepository, List remoteRepositories, Map parameters )
+    public void createArchetype( String archetypeGroupId,
+                                 String archetypeArtifactId,
+                                 String archetypeVersion,
+                                 ArtifactRepository localRepository,
+                                 List remoteRepositories,
+                                 Map parameters )
-        Artifact archetypeArtifact = artifactFactory.createArtifact( archetypeGroupId, archetypeArtifactId,
-                                                                     archetypeVersion, Artifact.SCOPE_RUNTIME, "jar" );
+        Artifact archetypeArtifact = artifactFactory.createArtifact( archetypeGroupId,
+                                                                     archetypeArtifactId,
+                                                                     archetypeVersion,
+                                                                     Artifact.SCOPE_RUNTIME,
+                                                                     "jar" );
-        createProjectDirectoryStructure( outputDirectory );
-
-                    " descriptor cannot be found." );
+                                                        " descriptor cannot be found." );
-            processSources( outputDirectory, context, descriptor.getSources(), packageName );
+            // ----------------------------------------------------------------------
+            // Main
+            // ----------------------------------------------------------------------
-            processResources( outputDirectory, context, descriptor.getResources(), packageName );
+            if ( descriptor.getSources().size() > 0 )
+            {
+                FileUtils.mkdir( outputDirectory + "/src/main/java" );
-            processSources( outputDirectory, context, descriptor.getTestSources(), packageName );
+                processSources( outputDirectory, context, descriptor.getSources(), packageName );
+            }
-            processResources( outputDirectory, context, descriptor.getTestResources(), packageName );
+            if ( descriptor.getResources().size() > 0 )
+            {
+                FileUtils.mkdir( outputDirectory + "/src/main/resources" );
+
+                processResources( outputDirectory, context, descriptor.getResources(), packageName );
+            }
+
+            // ----------------------------------------------------------------------
+            // Test
+            // ----------------------------------------------------------------------
+
+            if ( descriptor.getTestSources().size() > 0 )
+            {
+                FileUtils.mkdir( outputDirectory + "/src/test/java" );
+
+                processSources( outputDirectory, context, descriptor.getTestSources(), packageName );
+            }
+
+            if ( descriptor.getTestResources().size() > 0 )
+            {
+                FileUtils.mkdir( outputDirectory + "/src/test/resources" );
+
+                processResources( outputDirectory, context, descriptor.getTestResources(), packageName );
+            }
+
+            // ----------------------------------------------------------------------
+            // Site
+            // ----------------------------------------------------------------------
+
+            if ( descriptor.getSiteResources().size() > 0 )
+            {
+                processResources( outputDirectory, context, descriptor.getSiteResources(), packageName );
+            }
+
-    protected void processTemplate( String outputDirectory, Context context, String template, boolean packageInFileName,
+    protected void processTemplate( String outputDirectory,
+                                    Context context,
+                                    String template,
+                                    boolean packageInFileName,
-        FileUtils.mkdir( outputDirectory + "/src/main/java" );
-
-        FileUtils.mkdir( outputDirectory + "/src/main/resources" );
-
-        FileUtils.mkdir( outputDirectory + "/src/test/java" );
-
-        FileUtils.mkdir( outputDirectory + "/src/test/resources" );
