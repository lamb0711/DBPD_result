try-with-resources

Reformatted to code style by me. This fixes #53

-import java.io.BufferedInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.PrintStream;
-import java.io.Reader;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.jar.JarFile;
-import java.util.zip.ZipEntry;
-
-import org.codehaus.plexus.util.IOUtil;
+import java.io.BufferedInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PrintStream;
+import java.io.Reader;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.jar.JarFile;
+import java.util.zip.ZipEntry;
+
- * @since 3.0
+ * @since 3.0
-     * 
+     *
-                    InputStream is = new BufferedInputStream( new FileInputStream( pluginXml ) );
-                    try
+                    try ( InputStream is = new BufferedInputStream( new FileInputStream( pluginXml ) ) )
-                    finally
-                    {
-                        IOUtil.close( is );
-                    }
-            throw new InvalidPluginDescriptorException( "Invalid plugin descriptor for " + plugin.getId() + " ("
-                + pluginFile + ")", validator.getErrors() );
+            throw new InvalidPluginDescriptorException(
+                "Invalid plugin descriptor for " + plugin.getId() + " (" + pluginFile + ")", validator.getErrors() );
-                    throw new PluginIncompatibleException( pluginDescriptor.getPlugin(), "The plugin "
-                        + pluginDescriptor.getId() + " requires Maven version " + requiredMavenVersion );
+                    throw new PluginIncompatibleException( pluginDescriptor.getPlugin(),
+                                                           "The plugin " + pluginDescriptor.getId()
+                                                               + " requires Maven version " + requiredMavenVersion );
-            PluginRealmCache.Key cacheKey =
-                pluginRealmCache.createKey( plugin, parent, foreignImports, filter,
-                                            project.getRemotePluginRepositories(), session.getRepositorySession() );
+            PluginRealmCache.Key cacheKey = pluginRealmCache.createKey( plugin, parent, foreignImports, filter,
+                                                                        project.getRemotePluginRepositories(),
+                                                                        session.getRepositorySession() );
-            pluginDependenciesResolver.resolve( plugin, RepositoryUtils.toArtifact( pluginArtifact ),
-                                                dependencyFilter, project.getRemotePluginRepositories(),
-                                                repositorySession );
+            pluginDependenciesResolver.resolve( plugin, RepositoryUtils.toArtifact( pluginArtifact ), dependencyFilter,
+                                                project.getRemotePluginRepositories(), repositorySession );
-        pluginRealm =
-            classRealmManager.createPluginRealm( plugin, parent, null, foreignImports,
-                                                 toAetherArtifacts( pluginArtifacts ) );
+        pluginRealm = classRealmManager.createPluginRealm( plugin, parent, null, foreignImports,
+                                                           toAetherArtifacts( pluginArtifacts ) );
-            ( (DefaultPlexusContainer) container ).discoverComponents( pluginRealm,
-                                                                       new SessionScopeModule( container ),
+            ( (DefaultPlexusContainer) container ).discoverComponents( pluginRealm, new SessionScopeModule( container ),
-            throw new PluginContainerException( plugin, pluginRealm, "Error in component graph of plugin "
-                + plugin.getId() + ": " + e.getMessage(), e );
+            throw new PluginContainerException( plugin, pluginRealm,
+                                                "Error in component graph of plugin " + plugin.getId() + ": "
+                                                    + e.getMessage(), e );
-            throw new PluginContainerException( plugin, pluginRealm, "Error in component graph of plugin "
-                + plugin.getId() + ": " + e.getMessage(), e );
+            throw new PluginContainerException( plugin, pluginRealm,
+                                                "Error in component graph of plugin " + plugin.getId() + ": "
+                                                    + e.getMessage(), e );
-                        + pluginDescriptor.getId() + "'. A required class is missing: " + cause.getMessage() );
+                                    + pluginDescriptor.getId() + "'. A required class is missing: "
+                                    + cause.getMessage() );
-                        + pluginDescriptor.getId() + "' due to an API incompatibility: " + e.getClass().getName()
-                        + ": " + cause.getMessage() );
+                                    + pluginDescriptor.getId() + "' due to an API incompatibility: "
+                                    + e.getClass().getName() + ": " + cause.getMessage() );
-                throw new PluginContainerException( mojoDescriptor, pluginRealm, "Unable to load the mojo '"
-                    + mojoDescriptor.getGoal() + "' (or one of its required components) from the plugin '"
-                    + pluginDescriptor.getId() + "'", e );
+                throw new PluginContainerException( mojoDescriptor, pluginRealm,
+                                                    "Unable to load the mojo '" + mojoDescriptor.getGoal()
+                                                        + "' (or one of its required components) from the plugin '"
+                                                        + pluginDescriptor.getId() + "'", e );
-            logger.debug( "Configuring mojo '" + mojoDescriptor.getId() + "' with " + configuratorId
-                + " configurator -->" );
+            logger.debug(
+                "Configuring mojo '" + mojoDescriptor.getId() + "' with " + configuratorId + " configurator -->" );
-                + e.getMessage() );
+                            + e.getMessage() );
-            ps.println( "An API incompatibility was encountered during configuration of mojo " + mojoDescriptor.getId()
-                + ": " + e.getClass().getName() + ": " + e.getMessage() );
+            ps.println(
+                "An API incompatibility was encountered during configuration of mojo " + mojoDescriptor.getId() + ": "
+                    + e.getClass().getName() + ": " + e.getMessage() );
-                    String msg =
-                        "Error evaluating the expression '" + expression + "' for configuration value '"
-                            + configuration.getName() + "'";
+                    String msg = "Error evaluating the expression '" + expression + "' for configuration value '"
+                        + configuration.getName() + "'";
-        @SuppressWarnings( "unchecked" )
-        Map<String, ExtensionRealmCache.CacheRecord> pluginRealms =
+        @SuppressWarnings( "unchecked" ) Map<String, ExtensionRealmCache.CacheRecord> pluginRealms =
-            ClassRealm extensionRealm = classRealmManager.createExtensionRealm( plugin,
-                                                                                toAetherArtifacts( artifacts ) );
+            ClassRealm extensionRealm =
+                classRealmManager.createExtensionRealm( plugin, toAetherArtifacts( artifacts ) );
