o adding the name to the deploy plugin metadata so that i can pull it down
  and display it in an IDE


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@292339 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.descriptor.PluginDescriptor;
+import org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;
+import org.codehaus.plexus.configuration.PlexusConfigurationException;
+import java.io.InputStreamReader;
+import java.io.InputStream;
+    private PluginDescriptorBuilder pluginDescriptorBuilder;
+
+    // ----------------------------------------------------------------------
+    // Model
+    // ----------------------------------------------------------------------
+
+    // ----------------------------------------------------------------------
+    // Project
+    // ----------------------------------------------------------------------
+
+    public List collectProjects( File basedir, String[] includes, String[] excludes )
+        throws MojoExecutionException
+    {
+        List projects = new ArrayList();
+
+        List poms = getPomFiles( basedir, includes, excludes );
+
+        for ( Iterator i = poms.iterator(); i.hasNext(); )
+        {
+            File pom = (File) i.next();
+
+            try
+            {
+                MavenProject p = readProject( pom );
+
+                projects.add( p );
+
+            }
+            catch ( ProjectBuildingException e )
+            {
+                throw new MojoExecutionException( "Error loading " + pom, e );
+            }
+        }
+
+        return projects;
+    }
+
+    // ----------------------------------------------------------------------
+    // Plugins
+    // ----------------------------------------------------------------------
+
+    public List getAvailablePlugins()
+    {
+        List plugins = new ArrayList();
+
+        plugins.add( makeMockPlugin( "org.apache.maven.plugins", "maven-jar-plugin", "Maven Jar Plug-in" ) );
+
+        plugins.add( makeMockPlugin( "org.apache.maven.plugins", "maven-compiler-plugin", "Maven Compiler Plug-in" ) );
+
+        return plugins;
+    }
+
+    public PluginDescriptor getPluginDescriptor( SummaryPluginDescriptor summaryPluginDescriptor )
+        throws MavenEmbedderException
+    {
+        PluginDescriptor pluginDescriptor;
+
+        try
+        {
+            InputStream is = classLoader.getResourceAsStream( "/plugins/" + summaryPluginDescriptor.getArtifactId() + ".xml" );
+
+            pluginDescriptor = pluginDescriptorBuilder.build( new InputStreamReader( is ) );
+        }
+        catch ( PlexusConfigurationException e )
+        {
+            throw new MavenEmbedderException( "Error retrieving plugin descriptor.", e );
+        }
+
+        return pluginDescriptor;
+    }
+
+    private SummaryPluginDescriptor makeMockPlugin( String groupId, String artifactId, String name )
+    {
+        return new SummaryPluginDescriptor( groupId, artifactId, name );
+    }
+
+    // ----------------------------------------------------------------------
+    // Execution of phases/goals
+    // ----------------------------------------------------------------------
+
+    // TODO: should we allow the passing in of a settings object so that everything can be taken from the client env
+
+    public void execute( MavenProject project, List goals, EventDispatcher eventDispatcher, File executionRootDirectory )
+        throws CycleDetectedException, LifecycleExecutionException, MojoExecutionException
+    {
+        execute( Collections.singletonList( project ), goals, eventDispatcher, executionRootDirectory );
+    }
+
+    public void execute( List projects, List goals, EventDispatcher eventDispatcher, File executionRootDirectory )
+        throws CycleDetectedException, LifecycleExecutionException, MojoExecutionException
+    {
+        ReactorManager rm = new ReactorManager( projects );
+
+        rm.setFailureBehavior( ReactorManager.FAIL_AT_END );
+
+        MavenSession session = new MavenSession( embedder.getContainer(),
+                                                 settings,
+                                                 localRepository,
+                                                 eventDispatcher,
+                                                 rm,
+                                                 goals,
+                                                 executionRootDirectory.getAbsolutePath() );
+
+        session.setUsingPOMsFromFilesystem( true );
+
+        MavenExecutionResponse response = lifecycleExecutor.execute( session,
+                                                                     rm,
+                                                                     session.getEventDispatcher() );
+
+        if ( response.isExecutionFailure() )
+        {
+            throw new MojoExecutionException( "Integration test failed" );
+        }
+    }
+
-    // ----------------------------------------------------------------------
-    // Execution of phases/goals
-    // ----------------------------------------------------------------------
-
-    public void execute( MavenProject project, List goals, EventDispatcher eventDispatcher, File executionRootDirectory )
-        throws CycleDetectedException, LifecycleExecutionException, MojoExecutionException
-    {
-        execute( Collections.singletonList( project ), goals, eventDispatcher, executionRootDirectory );
-    }
-
-    public void execute( List projects, List goals, EventDispatcher eventDispatcher, File executionRootDirectory )
-        throws CycleDetectedException, LifecycleExecutionException, MojoExecutionException
-    {
-        ReactorManager rm = new ReactorManager( projects );
-
-        rm.setFailureBehavior( ReactorManager.FAIL_AT_END );
-
-        //rm.blackList( (MavenProject) projects.get( 0 ) );
-
-        MavenSession session = new MavenSession( embedder.getContainer(),
-                                                 settings,
-                                                 localRepository,
-                                                 eventDispatcher,
-                                                 rm,
-                                                 goals,
-                                                 executionRootDirectory.getAbsolutePath() );
-
-        session.setUsingPOMsFromFilesystem( true );
-
-        MavenExecutionResponse response = lifecycleExecutor.execute( session,
-                                                                     rm,
-                                                                     session.getEventDispatcher() );
-
-        if ( response.isExecutionFailure() )
-        {
-            throw new MojoExecutionException( "Integration test failed" );
-        }
-    }
-
-    public List collectProjects( File basedir, String[] includes, String[] excludes )
-        throws MojoExecutionException
-    {
-        List projects = new ArrayList();
-
-        List poms = getPomFiles( basedir, includes, excludes );
-
-        for ( Iterator i = poms.iterator(); i.hasNext(); )
-        {
-            File pom = (File) i.next();
-
-            try
-            {
-                MavenProject p = readProject( pom );
-
-                projects.add( p );
-
-            }
-            catch ( ProjectBuildingException e )
-            {
-                throw new MojoExecutionException( "Error loading " + pom, e );
-            }
-        }
-
-        return projects;
-    }
-
-                throw new IllegalStateException( "You have set a maven home, or the default of ~/m2 must exist on your system." );
+                if ( !mavenHome.mkdirs() )
+                {
+                    throw new IllegalStateException( "A maven home directory does not exist and cannot be created." );
+                }
+            pluginDescriptorBuilder = new PluginDescriptorBuilder();
+
