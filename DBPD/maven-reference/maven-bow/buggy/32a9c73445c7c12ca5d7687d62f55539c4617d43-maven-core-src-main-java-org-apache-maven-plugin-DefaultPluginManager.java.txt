Fixing MNG-2277 integration test.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@646517 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.MultipleArtifactsNotFoundException;
-                resolveTransitiveDependencies( session, artifactResolver,
+                resolveTransitiveDependencies( session,
+                                               artifactResolver,
-                                               artifactFactory, p );
+                                               artifactFactory,
+                                               p,
+                                               mojoDescriptor.isAggregator() );
-                                                MavenProject project )
+                                                MavenProject project,
+                                                boolean isAggregator )
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively(
-                                                                                project.getDependencyArtifacts(),
-                                                                                artifact,
-                                                                                project.getManagedVersionMap(),
-                                                                                context.getLocalRepository(),
-                                                                                project.getRemoteArtifactRepositories(),
-                                                                                artifactMetadataSource,
-                                                                                filter );
-        project.setArtifacts( result.getArtifacts() );
+        Set resolvedArtifacts;
+        try
+        {
+            ArtifactResolutionResult result = artifactResolver.resolveTransitively(
+                                                                                   project.getDependencyArtifacts(),
+                                                                                   artifact,
+                                                                                   project.getManagedVersionMap(),
+                                                                                   context.getLocalRepository(),
+                                                                                   project.getRemoteArtifactRepositories(),
+                                                                                   artifactMetadataSource,
+                                                                                   filter );
+
+            resolvedArtifacts = result.getArtifacts();
+        }
+        catch( MultipleArtifactsNotFoundException e )
+        {
+            /*only do this if we are an aggregating plugin: MNG-2277
+            if the dependency doesn't yet exist but is in the reactor, then
+            all we can do is warn and skip it. A better fix can be inserted into 2.1*/
+            if ( isAggregator
+                 && checkMissingArtifactsInReactor( context.getSortedProjects(),
+                                                    e.getMissingArtifacts() ) )
+            {
+                resolvedArtifacts = new HashSet( e.getResolvedArtifacts() );
+            }
+            else
+            {
+                //we can't find all the artifacts in the reactor so bubble the exception up.
+                throw e;
+            }
+        }
+
+        project.setArtifacts( resolvedArtifacts );
+    }
+
+    /**
+     * This method is checking to see if the artifacts that can't be resolved are all
+     * part of this reactor. This is done to prevent a chicken or egg scenario with
+     * fresh projects that have a plugin that is an aggregator and requires dependencies. See
+     * MNG-2277 for more info.
+     *
+     * NOTE: If this happens, it most likely means the project-artifact for an
+     * interproject dependency doesn't have a file yet (it hasn't been built yet).
+     *
+     * @param projects the sibling projects in the reactor
+     * @param missing the artifacts that can't be found
+     * @return true if ALL missing artifacts are found in the reactor.
+     */
+    private boolean checkMissingArtifactsInReactor( Collection projects,
+                                                    Collection missing )
+    {
+        Collection foundInReactor = new HashSet();
+        Iterator iter = missing.iterator();
+        while ( iter.hasNext() )
+        {
+            Artifact mArtifact = (Artifact) iter.next();
+            Iterator pIter = projects.iterator();
+            while ( pIter.hasNext() )
+            {
+                MavenProject p = (MavenProject) pIter.next();
+                if ( p.getArtifactId().equals( mArtifact.getArtifactId() )
+                     && p.getGroupId().equals( mArtifact.getGroupId() )
+                     && p.getVersion().equals( mArtifact.getVersion() ) )
+                {
+                    //TODO: the packaging could be different, but the exception doesn't contain that info
+                    //most likely it would be produced by the project we just found in the reactor since all
+                    //the other info matches. Assume it's ok.
+                    getLogger().warn( "The dependency: "
+                                      + p.getId()
+                                      + " can't be resolved but has been found in the reactor.\nThis dependency has been excluded from the plugin execution. You should rerun this mojo after executing mvn install.\n" );
+
+                    //found it, move on.
+                    foundInReactor.add( p );
+                    break;
+                }
+            }
+        }
+
+        //if all of them have been found, we can continue.
+        return foundInReactor.size() == missing.size();
