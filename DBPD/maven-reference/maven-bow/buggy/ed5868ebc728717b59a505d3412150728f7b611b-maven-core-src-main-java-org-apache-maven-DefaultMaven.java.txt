MNG-3176 Adding a method to create the reactor manager as I want to use it for execution as well as the buildWithDependencies method.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@572029 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.profiles.DefaultProfileManager;
-    implements Maven, Contextualizable
+    implements Maven,
+    Contextualizable
-    public MavenExecutionResult execute( MavenExecutionRequest request )
+    public ReactorManager createReactorManager( MavenExecutionRequest request,
+                                                MavenExecutionResult result )
-        request.setStartTime( new Date() );
-
-        initializeBuildContext( request );
-
-        EventDispatcher dispatcher = new DefaultEventDispatcher( request.getEventMonitors() );
-
-        String event = MavenEvents.REACTOR_EXECUTION;
-
-        dispatcher.dispatchStart( event, request.getBaseDirectory() );
-
-        MavenExecutionResult result = new DefaultMavenExecutionResult();
-
-        getLogger().info( "Scanning for projects..." );
-
-        boolean foundProjects = true;
-
-                foundProjects = false;
+                request.setProjectPresent( false );
-            return result;
+            return null;
-            reactorManager = new ReactorManager( projects, request.getReactorFailureBehavior() );
+            reactorManager = new ReactorManager(
+                projects,
+                request.getReactorFailureBehavior() );
-            result.addException( new BuildFailureException(
-                "The projects in the reactor contain a cyclic reference: " + e.getMessage(), e ) );
+            result.addException(
+                new BuildFailureException(
+                    "The projects in the reactor contain a cyclic reference: " + e.getMessage(),
+                    e ) );
-            return result;
+            return null;
-            result.addException( new BuildFailureException( e.getMessage(), e ) );
+            result.addException(
+                new BuildFailureException(
+                    e.getMessage(),
+                    e ) );
-            return result;
+            return null;
-        // Display the order of the projects
-        //CLI:move
+        return reactorManager;
+    }
+
+    public MavenExecutionResult execute( MavenExecutionRequest request )
+    {
+        request.setStartTime( new Date() );
+
+        initializeBuildContext( request );
+
+        EventDispatcher dispatcher = new DefaultEventDispatcher( request.getEventMonitors() );
+
+        String event = MavenEvents.REACTOR_EXECUTION;
+
+        dispatcher.dispatchStart(
+            event,
+            request.getBaseDirectory() );
+
+        MavenExecutionResult result = new DefaultMavenExecutionResult();
+
+        getLogger().info( "Scanning for projects..." );
+
+        ReactorManager reactorManager = createReactorManager(
+            request,
+            result );
+
+        // Check and make sure the creation of the reactor manager didn't cause a problem.
+
+        if ( result.hasExceptions() )
+        {
+            return result;
+        }
-        MavenSession session = createSession( request, reactorManager, dispatcher );
-
-        session.setUsingPOMsFromFilesystem( foundProjects );
+        MavenSession session = createSession(
+            request,
+            reactorManager,
+            dispatcher );
-            lifecycleExecutor.execute( session, reactorManager, dispatcher );
+            lifecycleExecutor.execute(
+                session,
+                reactorManager,
+                dispatcher );
-            result.addException( new BuildFailureException( e.getMessage(), e ) );
+            result.addException(
+                new BuildFailureException(
+                    e.getMessage(),
+                    e ) );
-                dispatcher.dispatchError( event, request.getBaseDirectory(), e );
+                dispatcher.dispatchError(
+                    event,
+                    request.getBaseDirectory(),
+                    e );
-                logError( e, request.isShowErrors() );
+                logError(
+                    e,
+                    request.isShowErrors() );
-            logErrors( reactorManager, request.isShowErrors() );
+            logErrors(
+                reactorManager,
+                request.isShowErrors() );
-                dispatcher.dispatchError( event, request.getBaseDirectory(), null );
+                dispatcher.dispatchError(
+                    event,
+                    request.getBaseDirectory(),
+                    null );
-        dispatcher.dispatchEnd( event, request.getBaseDirectory() );
+        dispatcher.dispatchEnd(
+            event,
+            request.getBaseDirectory() );
-        SystemBuildContext systemContext = SystemBuildContext.getSystemBuildContext( buildContextManager, true );
+        SystemBuildContext systemContext = SystemBuildContext.getSystemBuildContext(
+            buildContextManager,
+            true );
-    private void logErrors( ReactorManager rm, boolean showErrors )
+    private void logErrors( ReactorManager rm,
+                            boolean showErrors )
-                logTrace( buildFailure.getCause(), showErrors );
+                logTrace(
+                    buildFailure.getCause(),
+                    showErrors );
-            throw new MavenExecutionException( "Error selecting project files for the reactor: " + e.getMessage(), e );
+            throw new MavenExecutionException(
+                "Error selecting project files for the reactor: " + e.getMessage(),
+                e );
-            buildExtensionScanner.scanForBuildExtensions( files, request.getLocalRepository(), request.getProfileManager() );
+            buildExtensionScanner.scanForBuildExtensions(
+                files,
+                request.getLocalRepository(),
+                request.getProfileManager() );
-            throw new MavenExecutionException( "Error scanning for extensions: " + e.getMessage(), e );
+            throw new MavenExecutionException(
+                "Error scanning for extensions: " + e.getMessage(),
+                e );
-            projects = collectProjects( files, request.getLocalRepository(), request.isRecursive(),
-                                        request.getSettings(), request.getProfileManager(), !request.useReactor() );
+            projects = collectProjects(
+                files,
+                request.getLocalRepository(),
+                request.isRecursive(),
+                request.getSettings(),
+                request.getProfileManager(),
+                !request.useReactor() );
-            throw new MavenExecutionException( e.getMessage(), e );
+            throw new MavenExecutionException(
+                e.getMessage(),
+                e );
-            throw new MavenExecutionException( e.getMessage(), e );
+            throw new MavenExecutionException(
+                e.getMessage(),
+                e );
-            throw new MavenExecutionException( e.getMessage(), e );
+            throw new MavenExecutionException(
+                e.getMessage(),
+                e );
-    private void logReactorSummaryLine( String name, String status )
+    private void logReactorSummaryLine( String name,
+                                        String status )
-        logReactorSummaryLine( name, status, -1 );
+        logReactorSummaryLine(
+            name,
+            status,
+            -1 );
-    private void logReactorSummaryLine( String name, String status, long time )
+    private void logReactorSummaryLine( String name,
+                                        String status,
+                                        long time )
-    private List collectProjects( List files, ArtifactRepository localRepository, boolean recursive, Settings settings,
-                                  ProfileManager globalProfileManager, boolean isRoot )
+    private List collectProjects( List files,
+                                  ArtifactRepository localRepository,
+                                  boolean recursive,
+                                  Settings settings,
+                                  ProfileManager globalProfileManager,
+                                  boolean isRoot )
-            MavenProject project = getProject( file, localRepository, settings, globalProfileManager );
+            MavenProject project = getProject(
+                file,
+                localRepository,
+                settings,
+                globalProfileManager );
-                    throw new BuildFailureException( "Unable to build project '" + project.getFile() +
-                        "; it requires Maven version " + version.toString() );
+                    throw new BuildFailureException(
+                        "Unable to build project '" + project.getFile() +
+                            "; it requires Maven version " + version.toString() );
-                        moduleFile = new File( basedir, name + "/" + Maven.RELEASE_POMv4 );
+                        moduleFile = new File(
+                            basedir,
+                            name + "/" + Maven.RELEASE_POMv4 );
-                        moduleFile = new File( basedir, name + "/" + Maven.POMv4 );
+                        moduleFile = new File(
+                            basedir,
+                            name + "/" + Maven.POMv4 );
-                            throw new MavenExecutionException( "Unable to canonicalize file name " + moduleFile, e );
+                            throw new MavenExecutionException(
+                                "Unable to canonicalize file name " + moduleFile,
+                                e );
-                    collectProjects( moduleFiles, localRepository, recursive, settings, globalProfileManager, false );
+                    collectProjects(
+                        moduleFiles,
+                        localRepository,
+                        recursive,
+                        settings,
+                        globalProfileManager,
+                        false );
-    public MavenProject getProject( File pom, ArtifactRepository localRepository, Settings settings,
+    public MavenProject getProject( File pom,
+                                    ArtifactRepository localRepository,
+                                    Settings settings,
-                throw new ProjectBuildingException( "unknown", "The file " + pom.getAbsolutePath() +
-                    " you specified has zero length." );
+                throw new ProjectBuildingException(
+                    "unknown",
+                    "The file " + pom.getAbsolutePath() +
+                        " you specified has zero length." );
-        return projectBuilder.build( pom, localRepository, globalProfileManager );
+        return projectBuilder.build(
+            pom,
+            localRepository,
+            globalProfileManager );
-    protected MavenSession createSession( MavenExecutionRequest request, ReactorManager rpm,
+    protected MavenSession createSession( MavenExecutionRequest request,
+                                          ReactorManager rpm,
-        MavenSession session = new MavenSession( container, request, dispatcher, rpm );
+        MavenSession session = new MavenSession(
+            container,
+            request,
+            dispatcher,
+            rpm );
-        logTrace( error, true );
+        logTrace(
+            error,
+            true );
-    protected void logError( Exception e, boolean showErrors )
+    protected void logError( Exception e,
+                             boolean showErrors )
-        logTrace( e, showErrors );
+        logTrace(
+            e,
+            showErrors );
-    protected void logFailure( BuildFailureException e, boolean showErrors )
+    protected void logFailure( BuildFailureException e,
+                               boolean showErrors )
-        logTrace( e, showErrors );
+        logTrace(
+            e,
+            showErrors );
-    private void logTrace( Throwable t, boolean showErrors )
+    private void logTrace( Throwable t,
+                           boolean showErrors )
-            getLogger().debug( "Trace", t );
+            getLogger().debug(
+                "Trace",
+                t );
-            getLogger().info( "Trace", t );
+            getLogger().info(
+                "Trace",
+                t );
-                    logReactorSummaryLine( project.getName(), "FAILED", rm.getBuildFailure( project ).getTime() );
+                    logReactorSummaryLine(
+                        project.getName(),
+                        "FAILED",
+                        rm.getBuildFailure( project ).getTime() );
-                    logReactorSummaryLine( project.getName(), "SKIPPED (dependency build failed or was skipped)" );
+                    logReactorSummaryLine(
+                        project.getName(),
+                        "SKIPPED (dependency build failed or was skipped)" );
-                    logReactorSummaryLine( project.getName(), "SUCCESS", rm.getBuildSuccess( project ).getTime() );
+                    logReactorSummaryLine(
+                        project.getName(),
+                        "SUCCESS",
+                        rm.getBuildSuccess( project ).getTime() );
-                    logReactorSummaryLine( project.getName(), "NOT BUILT" );
+                    logReactorSummaryLine(
+                        project.getName(),
+                        "NOT BUILT" );
-            String includes = System.getProperty( "maven.reactor.includes", "**/" + POMv4 + ",**/" + RELEASE_POMv4 );
-            String excludes = System.getProperty( "maven.reactor.excludes", POMv4 + "," + RELEASE_POMv4 );
+            String includes = System.getProperty(
+                "maven.reactor.includes",
+                "**/" + POMv4 + ",**/" + RELEASE_POMv4 );
+            String excludes = System.getProperty(
+                "maven.reactor.excludes",
+                POMv4 + "," + RELEASE_POMv4 );
-            files = FileUtils.getFiles( userDir, includes, excludes );
+            files = FileUtils.getFiles(
+                userDir,
+                includes,
+                excludes );
-            File projectFile = new File( userDir, RELEASE_POMv4 );
+            File projectFile = new File(
+                userDir,
+                RELEASE_POMv4 );
-                projectFile = new File( userDir, POMv4 );
+                projectFile = new File(
+                    userDir,
+                    POMv4 );
