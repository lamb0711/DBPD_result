o Fixed paths of build directories

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@755721 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashSet;
-import org.apache.maven.model.Build;
-import org.apache.maven.model.BuildBase;
+
+    /**
+     * The URIs that denote file/directory paths and need their basedir alignment or normalization.
+     */
+    private static final Collection<String> PATH_URIS =
+        Collections.unmodifiableSet( new HashSet<String>(
+                                                          Arrays.asList(
+                                                                         ProjectUri.Build.directory,
+                                                                         ProjectUri.Build.outputDirectory,
+                                                                         ProjectUri.Build.testOutputDirectory,
+                                                                         ProjectUri.Build.sourceDirectory,
+                                                                         ProjectUri.Build.testSourceDirectory,
+                                                                         ProjectUri.Build.scriptSourceDirectory,
+                                                                         ProjectUri.Build.Resources.Resource.directory,
+                                                                         ProjectUri.Build.TestResources.TestResource.directory,
+                                                                         ProjectUri.Build.Filters.filter,
+                                                                         ProjectUri.Reporting.outputDirectory ) ) );   
+
-        interpolateModelProperties(model.getModelProperties(), new ArrayList<InterpolatorProperty>(), child);
-        return new PomClassicDomainModel(model.getModelProperties());         
+        interpolateModelProperties( model.getModelProperties(), new ArrayList<InterpolatorProperty>(), child );
+        List<ModelProperty> modelProperties;
+        if ( child.getProjectDirectory() != null )
+        {
+            modelProperties = alignPaths( model.getModelProperties(), child.getProjectDirectory() );
+        }
+        else
+        {
+            modelProperties = model.getModelProperties();
+        }
+        return new PomClassicDomainModel( modelProperties );
+    /**
+     * Post-processes the paths of build directories by aligning relative paths to the project directory and normalizing
+     * file separators to the platform-specific separator.
+     * 
+     * @param modelProperties The model properties to process, must not be {@code null}.
+     * @param basedir The project directory, must not be {@code null}.
+     * @return The updated model properties, never {@code null}.
+     */
+    private static List<ModelProperty> alignPaths( Collection<ModelProperty> modelProperties, File basedir )
+    {
+        List<ModelProperty> mps = new ArrayList<ModelProperty>( modelProperties.size() );
+
+        for ( ModelProperty mp : modelProperties )
+        {
+            String value = mp.getResolvedValue();
+            if ( value != null && PATH_URIS.contains( mp.getUri() ) )
+            {
+                File file = new File( value );
+                if ( file.isAbsolute() )
+                {
+                    // path was already absolute, just normalize file separator and we're done
+                    value = file.getPath();
+                }
+                else if ( file.getPath().startsWith( File.separator ) )
+                {
+                    // drive-relative Windows path, don't align with project directory but with drive root
+                    value = file.getAbsolutePath();
+                }
+                else
+                {
+                    // an ordinary relative path, align with project directory
+                    value = new File( new File( basedir, value ).toURI().normalize() ).getAbsolutePath();
+                }
+                mp = new ModelProperty( mp.getUri(), value );
+            }
+            mps.add( mp );
+        }
+
+        return mps;
+    }
+
