o Revised extension caching to be insensitive to POM repos

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@819868 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
-import java.util.Iterator;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.Exclusion;
-import org.apache.maven.model.Plugin;
-        private final Plugin extension;
-
-        private final List<ArtifactRepository> repositories = new ArrayList<ArtifactRepository>();
+        private final List<File> files;
-        public CacheKey( Plugin extension, RepositoryRequest repositoryRequest )
+        public CacheKey( List<? extends Artifact> extensionArtifacts )
-            this.extension = extension.clone();
-            this.repositories.add( repositoryRequest.getLocalRepository() );
-            this.repositories.addAll( repositoryRequest.getRemoteRepositories() );
+            this.files = new ArrayList<File>( extensionArtifacts.size() );
+            for ( Artifact artifact : extensionArtifacts )
+            {
+                files.add( artifact.getFile() );
+            }
-            int hash = 17;
-            hash = hash * 31 + extensionHashCode( extension );
-            hash = hash * 31 + repositories.hashCode();
-            this.hashCode = hash;
+            this.hashCode = files.hashCode();
-            return extensionEquals( extension, other.extension ) && eq( repositories, other.repositories );
+            return files.equals( other.files );
-    public CacheRecord get( Plugin extension, RepositoryRequest repositoryRequest )
+    public CacheRecord get( List<? extends Artifact> extensionArtifacts )
-        return cache.get( new CacheKey( extension, repositoryRequest ) );
+        return cache.get( new CacheKey( extensionArtifacts ) );
-    public void put( Plugin extension, RepositoryRequest repositoryRequest, ClassRealm extensionRealm,
-                     List<Artifact> extensionArtifacts, ExtensionDescriptor extensionDescriptor )
+    public CacheRecord put( List<? extends Artifact> extensionArtifacts, ClassRealm extensionRealm,
+                            ExtensionDescriptor extensionDescriptor )
-        if ( extensionRealm == null || extensionArtifacts == null )
+        if ( extensionRealm == null )
-        CacheKey key = new CacheKey( extension, repositoryRequest );
+        CacheKey key = new CacheKey( extensionArtifacts );
-            throw new IllegalStateException( "Duplicate extension realm for extension " + extension.getId() );
+            throw new IllegalStateException( "Duplicate extension realm for extension " + extensionArtifacts );
-        CacheRecord record = new CacheRecord( extensionRealm, extensionArtifacts, extensionDescriptor );
+        CacheRecord record = new CacheRecord( extensionRealm, extensionDescriptor );
+
+
+        return record;
-    protected static int extensionHashCode( Plugin extension )
-    {
-        int hash = 17;
-
-        hash = hash * 31 + extension.getGroupId().hashCode();
-        hash = hash * 31 + extension.getArtifactId().hashCode();
-        hash = hash * 31 + extension.getVersion().hashCode();
-
-        for ( Dependency dependency : extension.getDependencies() )
-        {
-            hash = hash * 31 + dependency.getGroupId().hashCode();
-            hash = hash * 31 + dependency.getArtifactId().hashCode();
-            hash = hash * 31 + dependency.getVersion().hashCode();
-            hash = hash * 31 + dependency.getType().hashCode();
-            hash = hash * 31 + ( dependency.getClassifier() != null ? dependency.getClassifier().hashCode() : 0 );
-            hash = hash * 31 + ( dependency.getScope() != null ? dependency.getScope().hashCode() : 0 );
-
-            for ( Exclusion exclusion : dependency.getExclusions() )
-            {
-                hash = hash * 31 + exclusion.getGroupId().hashCode();
-                hash = hash * 31 + exclusion.getArtifactId().hashCode();
-            }
-        }
-
-        return hash;
-    }
-
-    private static boolean extensionEquals( Plugin a, Plugin b )
-    {
-        return eq( a.getGroupId(), b.getGroupId() ) //
-            && eq( a.getArtifactId(), b.getArtifactId() ) //
-            && eq( a.getVersion(), b.getVersion() ) // 
-            && a.isExtensions() == b.isExtensions() //
-            && dependenciesEquals( a.getDependencies(), b.getDependencies() );
-    }
-
-    private static boolean dependenciesEquals( List<Dependency> a, List<Dependency> b )
-    {
-        if ( a.size() != b.size() )
-        {
-            return false;
-        }
-
-        Iterator<Dependency> aI = a.iterator();
-        Iterator<Dependency> bI = b.iterator();
-
-        while ( aI.hasNext() )
-        {
-            Dependency aD = aI.next();
-            Dependency bD = bI.next();
-
-            boolean r = eq( aD.getGroupId(), bD.getGroupId() ) //
-                && eq( aD.getArtifactId(), bD.getArtifactId() ) //
-                && eq( aD.getVersion(), bD.getVersion() ) // 
-                && eq( aD.getType(), bD.getType() ) //
-                && eq( aD.getClassifier(), bD.getClassifier() ) //
-                && eq( aD.getScope(), bD.getScope() );
-
-            r &= exclusionsEquals( aD.getExclusions(), bD.getExclusions() );
-
-            if ( !r )
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private static boolean exclusionsEquals( List<Exclusion> a, List<Exclusion> b )
-    {
-        if ( a.size() != b.size() )
-        {
-            return false;
-        }
-
-        Iterator<Exclusion> aI = a.iterator();
-        Iterator<Exclusion> bI = b.iterator();
-
-        while ( aI.hasNext() )
-        {
-            Exclusion aD = aI.next();
-            Exclusion bD = bI.next();
-
-            boolean r = eq( aD.getGroupId(), bD.getGroupId() ) //
-                && eq( aD.getArtifactId(), bD.getArtifactId() );
-
-            if ( !r )
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private static <T> boolean eq( T s1, T s2 )
-    {
-        return s1 != null ? s1.equals( s2 ) : s2 == null;
-    }
-
-    public void register( MavenProject project, ClassRealm extensionRealm )
+    public void register( MavenProject project, CacheRecord record )
