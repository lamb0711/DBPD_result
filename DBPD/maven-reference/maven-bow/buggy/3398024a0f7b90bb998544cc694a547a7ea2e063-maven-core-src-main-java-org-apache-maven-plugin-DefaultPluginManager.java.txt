o delegating local repository implementation that chains the reactor and user local repository
o removal of more state from the WagonManager and pushing it into the request in an attempt to bridge the way for Mercury



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773456 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+    @Requirement
+    private PluginClassLoaderCache pluginClassLoaderCache;
+    
-        //TODO: this is assuming plugins in the reactor. must be replaced with a reactor local repository implementation
-        pluginArtifact = project.replaceWithActiveArtifact( pluginArtifact );
-
+        //pluginRealm.display();
+        
+        pluginClassLoaderCache.cachePluginClassLoader( constructPluginKey( plugin ), pluginRealm );
+        
-
+        
-        Set<Artifact> resolved = new LinkedHashSet<Artifact>();
+        logger.debug( "Using the following artifacts for classpath of: " + pluginArtifact.getId() + ":\n\n" + result.getArtifacts().toString().replace( ',', '\n' ) );
-        //TODO: this is also assuming artifacts in the reactor.
-        for ( Iterator<Artifact> it = result.getArtifacts().iterator(); it.hasNext(); )
-        {
-            Artifact artifact = it.next();
-
-            if ( !artifact.equals( pluginArtifact ) )
-            {
-                artifact = project.replaceWithActiveArtifact( artifact );
-            }
-
-            resolved.add( artifact );
-        }
-
-        logger.debug( "Using the following artifacts for classpath of: " + pluginArtifact.getId() + ":\n\n" + resolved.toString().replace( ',', '\n' ) );
-
-        return resolved;
+        return result.getArtifacts();
-            pluginRealm = pluginDescriptor.getClassRealm();
+            //pluginRealm = pluginDescriptor.getClassRealm();
+            pluginRealm = pluginClassLoaderCache.getPluginClassLoader( constructPluginKey( mojoDescriptor.getPluginDescriptor() ) );            
