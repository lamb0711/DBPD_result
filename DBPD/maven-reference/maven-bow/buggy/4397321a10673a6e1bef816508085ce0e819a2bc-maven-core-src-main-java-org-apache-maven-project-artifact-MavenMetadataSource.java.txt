o Extended metadata resolution group to also hold managed version map. This can save us another trip through the project builder when transitively resolving say plugin dependencies. We already need to build the project to grab the direct dependencies so we can as well grab the managed ones while we're there

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@801738 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+import org.apache.maven.model.DependencyManagement;
+import org.apache.maven.repository.legacy.metadata.MetadataResolutionRequest;
-    
-    public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+
+    public ResolutionGroup retrieve( MetadataResolutionRequest request )
+        throws ArtifactMetadataRetrievalException
+    {
+        return retrieve( request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories(),
+                         request.isResolveManagedVersions() );
+    }
+
+    public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepository,
+                                     List<ArtifactRepository> remoteRepositories )
+        throws ArtifactMetadataRetrievalException
+    {
+        return retrieve( artifact, localRepository, remoteRepositories, false );
+    }
+
+    public ResolutionGroup retrieve( Artifact artifact, ArtifactRepository localRepository,
+                                     List<ArtifactRepository> remoteRepositories, boolean resolveManagedVersions )
-        ResolutionGroup cached = cache.get( artifact, localRepository, remoteRepositories );
+        ResolutionGroup cached = cache.get( artifact, resolveManagedVersions, localRepository, remoteRepositories );
+        List<Dependency> managedDependencies = null;
+
-            dependencies = ((ArtifactWithDependencies)artifact).getDependencies();
+            dependencies = ( (ArtifactWithDependencies) artifact ).getDependencies();
+
+            managedDependencies = ( (ArtifactWithDependencies) artifact ).getManagedDependencies();
+
+                DependencyManagement depMngt = rel.project.getDependencyManagement();
+                managedDependencies = ( depMngt != null ) ? depMngt.getDependencies() : null;
-            ArtifactFilter dependencyFilter = artifact.getDependencyFilter();
-
-            for ( Dependency d : dependencies )
+            for ( Dependency dependency : dependencies )
-                String effectiveScope = getEffectiveScope( d.getScope(), artifact.getScope() );
+                Artifact dependencyArtifact = createDependencyArtifact( dependency, artifact, pomArtifact );
-                if ( effectiveScope != null )
+                if ( dependencyArtifact != null )
-                    Artifact dependencyArtifact;
-
-                    VersionRange versionRange;
-                    try
-                    {
-                        versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
-                    }
-                    catch ( InvalidVersionSpecificationException e )
-                    {
-                        throw new ArtifactMetadataRetrievalException( "Invalid version for dependency "
-                            + d.getManagementKey() + ": " + e.getMessage(), e, pomArtifact );
-                    }
-
-                    dependencyArtifact =
-                        repositorySystem.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange,
-                                                                   d.getType(), d.getClassifier(), effectiveScope,
-                                                                   d.isOptional() );
-
-                    if ( dependencyFilter == null || dependencyFilter.include( dependencyArtifact ) )
-                    {
-                        dependencyArtifact.setOptional( d.isOptional() );
-
-                        if ( Artifact.SCOPE_SYSTEM.equals( effectiveScope ) )
-                        {
-                            dependencyArtifact.setFile( new File( d.getSystemPath() ) );
-                        }
-
-                        ArtifactFilter newFilter = dependencyFilter;
-
-                        if ( !d.getExclusions().isEmpty() )
-                        {
-                            List<String> exclusions = new ArrayList<String>();
-
-                            for ( Exclusion e : d.getExclusions() )
-                            {
-                                exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
-                            }
-
-                            newFilter = new ExcludesArtifactFilter( exclusions );
-                            if ( dependencyFilter != null )
-                            {
-                                newFilter = new AndArtifactFilter( Arrays.asList( dependencyFilter, newFilter ) );
-                            }
-                        }
-
-                        dependencyArtifact.setDependencyFilter( newFilter );
-
-                        artifacts.add( dependencyArtifact );
-                    }
+                    artifacts.add( dependencyArtifact );
-        ResolutionGroup result = new ResolutionGroup( pomArtifact, artifacts, remoteRepositories );
+        Map<String, Artifact> managedVersions = null;
-        cache.put( artifact, localRepository, remoteRepositories, result );
+        if ( managedDependencies != null && resolveManagedVersions )
+        {
+            managedVersions = new HashMap<String, Artifact>();
+
+            for ( Dependency managedDependency : managedDependencies )
+            {
+                Artifact managedArtifact = createDependencyArtifact( managedDependency, null, pomArtifact );
+
+                managedVersions.put( managedDependency.getManagementKey(), managedArtifact );
+            }
+        }
+
+        ResolutionGroup result = new ResolutionGroup( pomArtifact, artifacts, managedVersions, remoteRepositories );
+
+        cache.put( artifact, resolveManagedVersions, localRepository, remoteRepositories, result );
+    private Artifact createDependencyArtifact( Dependency dependency, Artifact owner, Artifact pom )
+        throws ArtifactMetadataRetrievalException
+    {
+        String effectiveScope = getEffectiveScope( dependency.getScope(), ( owner != null ) ? owner.getScope() : null );
+
+        if ( effectiveScope == null )
+        {
+            return null;
+        }
+
+        VersionRange versionRange;
+        try
+        {
+            versionRange = VersionRange.createFromVersionSpec( dependency.getVersion() );
+        }
+        catch ( InvalidVersionSpecificationException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Invalid version for dependency "
+                + dependency.getManagementKey() + ": " + e.getMessage(), e, pom );
+        }
+
+        Artifact dependencyArtifact =
+            repositorySystem.createDependencyArtifact( dependency.getGroupId(), dependency.getArtifactId(),
+                                                       versionRange, dependency.getType(), dependency.getClassifier(),
+                                                       effectiveScope, dependency.isOptional() );
+
+        ArtifactFilter dependencyFilter = ( owner != null ) ? owner.getDependencyFilter() : null;
+
+        if ( dependencyFilter != null && !dependencyFilter.include( dependencyArtifact ) )
+        {
+            return null;
+        }
+
+        if ( Artifact.SCOPE_SYSTEM.equals( effectiveScope ) )
+        {
+            dependencyArtifact.setFile( new File( dependency.getSystemPath() ) );
+        }
+
+        dependencyArtifact.setDependencyFilter( createDependencyFilter( dependency, dependencyFilter ) );
+
+        return dependencyArtifact;
+    }
+
+    private ArtifactFilter createDependencyFilter( Dependency dependency, ArtifactFilter inheritedFilter )
+    {
+        ArtifactFilter effectiveFilter = inheritedFilter;
+
+        if ( !dependency.getExclusions().isEmpty() )
+        {
+            List<String> exclusions = new ArrayList<String>();
+
+            for ( Exclusion e : dependency.getExclusions() )
+            {
+                exclusions.add( e.getGroupId() + ':' + e.getArtifactId() );
+            }
+
+            effectiveFilter = new ExcludesArtifactFilter( exclusions );
+
+            if ( inheritedFilter != null )
+            {
+                effectiveFilter = new AndArtifactFilter( Arrays.asList( inheritedFilter, effectiveFilter ) );
+            }
+        }
+
+        return effectiveFilter;
+    }
+
