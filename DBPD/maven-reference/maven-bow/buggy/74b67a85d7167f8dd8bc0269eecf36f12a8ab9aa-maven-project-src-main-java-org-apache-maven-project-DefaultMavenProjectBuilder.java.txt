Removed artifact resolver. Now just using the repositorySystem directly.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@748908 13f79535-47bb-0310-9956-ffa450edef68

-        MavenProject project = readModelFromLocalPath( "unknown", projectDescriptor, new DefaultPomArtifactResolver( config.getLocalRepository(), artifactRepositories, repositorySystem ), config );
+        MavenProject project = readModelFromLocalPath( "unknown", projectDescriptor, config.getLocalRepository(), artifactRepositories, config );
-        project = readModelFromLocalPath( "unknown", artifact.getFile(), new DefaultPomArtifactResolver( config.getLocalRepository(), artifactRepositories, repositorySystem ), config );
+        project = readModelFromLocalPath( "unknown", artifact.getFile(), config.getLocalRepository(), artifactRepositories, config );
-    private MavenProject readModelFromLocalPath( String projectId, File projectDescriptor, PomArtifactResolver resolver, ProjectBuilderConfiguration config )
+    private MavenProject readModelFromLocalPath( String projectId, File projectDescriptor, ArtifactRepository localRepository,
+                                                 List<ArtifactRepository> remoteRepositories, ProjectBuilderConfiguration config )
-            mavenProject = buildFromLocalPath( projectDescriptor, interpolatorProperties, resolver, config, this );
+            mavenProject = buildFromLocalPath( projectDescriptor, interpolatorProperties, localRepository, remoteRepositories, config, this );
-    public PomClassicDomainModel buildModel( File pom,
+    protected PomClassicDomainModel buildModel( File pom,
-                                             PomArtifactResolver resolver )
+                                             ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        return buildModel( pom, interpolatorProperties, null, null, resolver );
+        return buildModel( pom, interpolatorProperties, null, null, localRepository, remoteRepositories );
-                                             PomArtifactResolver resolver)
+                                             ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories)
-        if ( resolver == null )
-        {
-            throw new IllegalArgumentException( "resolver: null" );
-        }
-
-                    getDomainModelParentsFromLocalPath( domainModel, resolver, pom.getParentFile(), properties,
+                    getDomainModelParentsFromLocalPath( domainModel, localRepository, remoteRepositories, pom.getParentFile(), properties,
-                    getDomainModelParentsFromRepository( domainModel, resolver, properties, activeProfileIds,
+                    getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories, properties, activeProfileIds,
-    public MavenProject buildFromLocalPath(File pom,
+    protected MavenProject buildFromLocalPath(File pom,
-                                           PomArtifactResolver resolver,
+                                           ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-                                                        resolver );
+                                                        localRepository, remoteRepositories );
+    private void resolve( Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+        throws IOException
+    {
+        if(localRepository == null || remoteRepositories == null)
+        {
+            throw new IOException("LocalRepository or RemoteRepositories: null");
+        }
+
+        File artifactFile = new File( localRepository.getBasedir(), localRepository.pathOf( artifact ) );
+        artifact.setFile( artifactFile );
+
+        try
+        {
+            repositorySystem.resolve( artifact, localRepository, remoteRepositories );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new IOException( e.getMessage() );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            throw new IOException( e.getMessage() );
+        }
+    }
+
-                                                                   PomArtifactResolver artifactResolver,
+                                                                   ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-        artifactResolver.resolve( artifactParent );
+        resolve( artifactParent, localRepository, remoteRepositories );
-        domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, artifactResolver, properties,
+        domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories, properties,
-     * @param artifactResolver
-                                                                  PomArtifactResolver artifactResolver,
+                                                                  ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-                getDomainModelParentsFromRepository( domainModel, artifactResolver, properties, activeProfileIds,
+                getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories, properties, activeProfileIds,
-                domainModels.addAll( getDomainModelParentsFromLocalPath( parentDomainModel, artifactResolver,
+                domainModels.addAll( getDomainModelParentsFromLocalPath( parentDomainModel, localRepository, remoteRepositories,
-                domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, artifactResolver,
+                domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories,
-    public Model getSuperModel()
+    protected Model getSuperModel()
