[MNG-4381] Allow extension plugins to contribute non-core components to be reused by other plugins

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@819540 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.maven.artifact.resolver.filter.ExclusionSetFilter;
+import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
+import org.apache.maven.plugin.ExtensionRealmCache;
+    private ExtensionRealmCache extensionRealmCache;
+
+    @Requirement
+    private ProjectRealmCache projectRealmCache;
+
+    @Requirement
+    private ExtensionDescriptorBuilder extensionDescriptorBuilder = new ExtensionDescriptorBuilder();
+
-    public ClassRealm createProjectRealm( Model model, RepositoryRequest repositoryRequest )
+    public synchronized ProjectRealmCache.CacheRecord createProjectRealm( Model model,
+                                                                          RepositoryRequest repositoryRequest )
-        Build build = model.getBuild();
-
-        if ( build == null )
-        {
-            return projectRealm;
-        }
-
-        for ( Plugin plugin : build.getPlugins() )
+        Build build = model.getBuild();
+
+        if ( build != null )
-            if ( plugin.isExtensions() )
+            for ( Extension extension : build.getExtensions() )
+                Plugin plugin = new Plugin();
+                plugin.setGroupId( extension.getGroupId() );
+                plugin.setArtifactId( extension.getArtifactId() );
+                plugin.setVersion( extension.getVersion() );
-        }
-        if ( build.getExtensions().isEmpty() && extensionPlugins.isEmpty() )
-        {
-            return projectRealm;
-        }
-
-        projectRealm = classRealmManager.createProjectRealm( model );
-
-        for ( Extension extension : build.getExtensions() )
-        {
-            if ( extension.getVersion() == null )
+            for ( Plugin plugin : build.getPlugins() )
-                PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( repositoryRequest );
-                versionRequest.setGroupId( extension.getGroupId() );
-                versionRequest.setArtifactId( extension.getArtifactId() );
-                extension.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );
+                if ( plugin.isExtensions() )
+                {
+                    extensionPlugins.add( plugin );
+                }
-
-            Artifact artifact =
-                repositorySystem.createArtifact( extension.getGroupId(), extension.getArtifactId(),
-                                                 extension.getVersion(), "jar" );
-
-            populateRealm( projectRealm, artifact, null, repositoryRequest );
+        if ( extensionPlugins.isEmpty() )
+        {
+            return new ProjectRealmCache.CacheRecord( null, null );
+        }
+
+        List<ClassRealm> extensionRealms = new ArrayList<ClassRealm>();
+
+        Map<ClassRealm, List<String>> exportedPackages = new HashMap<ClassRealm, List<String>>();
+
+        Map<ClassRealm, List<String>> exportedArtifacts = new HashMap<ClassRealm, List<String>>();
+
+        List<Artifact> publicArtifacts = new ArrayList<Artifact>();
+
-            Artifact artifact = repositorySystem.createPluginArtifact( plugin );
+            ClassRealm extensionRealm;
+            List<Artifact> artifacts;
+            ExtensionDescriptor extensionDescriptor = null;
-            Set<Artifact> dependencies = new LinkedHashSet<Artifact>();
-            for ( Dependency dependency : plugin.getDependencies() )
+            ExtensionRealmCache.CacheRecord record = extensionRealmCache.get( plugin, repositoryRequest );
+
+            if ( record != null )
-                dependencies.add( repositorySystem.createDependencyArtifact( dependency ) );
+                extensionRealm = record.realm;
+                artifacts = record.artifacts;
+                extensionDescriptor = record.desciptor;
+            }
+            else
+            {
+                artifacts = resolveExtensionArtifacts( plugin, repositoryRequest );
+
+                extensionRealm = classRealmManager.createExtensionRealm( plugin );
+
+                if ( logger.isDebugEnabled() )
+                {
+                    logger.debug( "Populating extension realm for " + plugin.getId() );
+                }
+
+                for ( Artifact artifact : artifacts )
+                {
+                    if ( artifact.getFile() != null )
+                    {
+                        if ( logger.isDebugEnabled() )
+                        {
+                            logger.debug( "  Included: " + artifact.getId() );
+                        }
+
+                        try
+                        {
+                            extensionRealm.addURL( artifact.getFile().toURI().toURL() );
+                        }
+                        catch ( MalformedURLException e )
+                        {
+                            // Not going to happen
+                        }
+                    }
+                    else
+                    {
+                        if ( logger.isDebugEnabled() )
+                        {
+                            logger.debug( "  Excluded: " + artifact.getId() );
+                        }
+                    }
+                }
+
+                try
+                {
+                    container.discoverComponents( extensionRealm );
+                }
+                catch ( Exception e )
+                {
+                    throw new IllegalStateException( "Failed to discover components in extension realm "
+                        + extensionRealm.getId(), e );
+                }
+
+                Artifact extensionArtifact = artifacts.get( 0 );
+                try
+                {
+                    extensionDescriptor = extensionDescriptorBuilder.build( extensionArtifact.getFile() );
+                }
+                catch ( IOException e )
+                {
+                    String message = "Invalid extension descriptor for " + plugin.getId() + ": " + e.getMessage();
+                    if ( logger.isDebugEnabled() )
+                    {
+                        logger.error( message, e );
+                    }
+                    else
+                    {
+                        logger.error( message );
+                    }
+                }
+
+                extensionRealmCache.put( plugin, repositoryRequest, extensionRealm, artifacts, extensionDescriptor );
-            populateRealm( projectRealm, artifact, dependencies, repositoryRequest );
+            extensionRealms.add( extensionRealm );
+            if ( extensionDescriptor != null )
+            {
+                exportedPackages.put( extensionRealm, extensionDescriptor.getExportedPackages() );
+                exportedArtifacts.put( extensionRealm, extensionDescriptor.getExportedArtifacts() );
+            }
+
+            if ( !plugin.isExtensions() && artifacts.size() == 1 && artifacts.get( 0 ).getFile() != null )
+            {
+                /*
+                 * This is purely for backward-compat with 2.x where <extensions> consisting of a single artifact where
+                 * loaded into the core and hence available to plugins, in contrast to bigger extensions that were
+                 * loaded into a dedicated realm which is invisible to plugins.
+                 */
+                publicArtifacts.addAll( artifacts );
+            }
-        try
+        ProjectRealmCache.CacheRecord record = projectRealmCache.get( extensionRealms );
+
+        if ( record == null )
-            container.discoverComponents( projectRealm );
-        }
-        catch ( Exception e )
-        {
-            throw new IllegalStateException( "Failed to discover components in project realm " + projectRealm.getId(),
-                                             e );
+            projectRealm = classRealmManager.createProjectRealm( model );
+
+            if ( logger.isDebugEnabled() )
+            {
+                logger.debug( "Populating project realm for " + model.getId() );
+            }
+
+            for ( Artifact publicArtifact : publicArtifacts )
+            {
+                if ( logger.isDebugEnabled() )
+                {
+                    logger.debug( "  Included: " + publicArtifact.getId() );
+                }
+
+                try
+                {
+                    projectRealm.addURL( publicArtifact.getFile().toURI().toURL() );
+                }
+                catch ( MalformedURLException e )
+                {
+                    // can't happen
+                }
+            }
+
+            Set<String> exclusions = new LinkedHashSet<String>();
+
+            for ( ClassRealm extensionRealm : extensionRealms )
+            {
+                List<String> excludes = exportedArtifacts.get( extensionRealm );
+
+                if ( excludes != null )
+                {
+                    exclusions.addAll( excludes );
+                }
+
+                List<String> exports = exportedPackages.get( extensionRealm );
+
+                if ( exports == null || exports.isEmpty() )
+                {
+                    /*
+                     * Most existing extensions don't define exported packages, i.e. no classes are to be exposed to
+                     * plugins, yet the components provided by the extension (e.g. artifact handlers) must be
+                     * accessible, i.e. we still must import the extension realm into the project realm.
+                     */
+                    exports = Arrays.asList( extensionRealm.getId() );
+                }
+
+                for ( String export : exports )
+                {
+                    projectRealm.importFrom( extensionRealm, export );
+                }
+            }
+
+            ArtifactFilter extensionArtifactFilter = null;
+            if ( !exclusions.isEmpty() )
+            {
+                extensionArtifactFilter = new ExclusionSetFilter( exclusions );
+            }
+
+            projectRealmCache.put( extensionRealms, projectRealm, extensionArtifactFilter );
+
+            record = new ProjectRealmCache.CacheRecord( projectRealm, extensionArtifactFilter );
-        return projectRealm;
+        return record;
-    private void populateRealm( ClassRealm realm, Artifact artifact, Set<Artifact> dependencies,
-                                RepositoryRequest repositoryRequest )
+    private List<Artifact> resolveExtensionArtifacts( Plugin extensionPlugin, RepositoryRequest repositoryRequest )
+        Artifact extensionArtifact = repositorySystem.createPluginArtifact( extensionPlugin );
+
+        Set<Artifact> overrideArtifacts = new LinkedHashSet<Artifact>();
+        for ( Dependency dependency : extensionPlugin.getDependencies() )
+        {
+            overrideArtifacts.add( repositorySystem.createDependencyArtifact( dependency ) );
+        }
+
+        ArtifactFilter collectionFilter = new ScopeArtifactFilter( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM );
+
+        ArtifactFilter resolutionFilter = artifactFilterManager.getCoreArtifactFilter();
+
-        request.setArtifact( artifact );
-        request.setArtifactDependencies( dependencies );
+        request.setArtifact( extensionArtifact );
+        request.setArtifactDependencies( overrideArtifacts );
+        request.setCollectionFilter( collectionFilter );
+        request.setResolutionFilter( resolutionFilter );
+        request.setResolveRoot( true );
-        // FIXME setTransferListener
-        ArtifactFilter filter = artifactFilterManager.getCoreArtifactFilter();
+        List<Artifact> extensionArtifacts = new ArrayList<Artifact>( result.getArtifacts() );
-        for ( Artifact resultArtifact : result.getArtifacts() )
-        {
-            if ( filter.include( resultArtifact ) )
-            {
-                if ( logger.isDebugEnabled() )
-                {
-                    logger.debug( "  Included: " + resultArtifact.getId() );
-                }
-
-                try
-                {
-                    realm.addURL( resultArtifact.getFile().toURI().toURL() );
-                }
-                catch ( MalformedURLException e )
-                {
-                    throw new IllegalStateException( "Failed to populate project realm " + realm.getId() + " with "
-                        + artifact.getFile(), e );
-                }
-            }
-            else
-            {
-                if ( logger.isDebugEnabled() )
-                {
-                    logger.debug( "  Excluded: " + resultArtifact.getId() );
-                }
-            }
-        }
+        return extensionArtifacts;
