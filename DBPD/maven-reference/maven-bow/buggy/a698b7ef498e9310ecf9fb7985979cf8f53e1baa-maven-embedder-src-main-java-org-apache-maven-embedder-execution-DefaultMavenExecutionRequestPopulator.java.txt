o the request populator is now responsible for initializing everything, anything you want to know about how the front-end is configuration, or initialized can be found in this class. i think i have almost everything out of the Maven component and in the Embedder. this is the one place to look now and I know feel comfortable about documenting it

o the profiles additions from settings are now process in the request populator and taken out of the default profile manager itself which has resulted in decoupling the Settings from the profile manager.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@573435 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Profile;
+import org.apache.maven.settings.MavenSettingsBuilder;
+import org.apache.maven.settings.SettingsUtils;
+import java.util.List;
+    private MavenSettingsBuilder settingsBuilder;
+
-            request.setSettings( embedder.getSettings() );
+            try
+            {
+                request.setSettings(
+                    settingsBuilder.buildSettings(
+                        embedder.getConfiguration().getUserSettingsFile(),
+                        embedder.getConfiguration().getGlobalSettingsFile() ) );
+            }
+            catch( Exception e )
+            {
+                request.setSettings( new Settings() );
+            }
-            request.setLocalRepository( embedder.getLocalRepository() );
+            request.setLocalRepository( embedder.createLocalRepository( request.getSettings() ) );
-        request.setProfileManager( createProfileManager( request ) );
+        ProfileManager globalProfileManager = new DefaultProfileManager( container );
+
+        loadSettingsProfiles( globalProfileManager, request.getSettings() );
+
+        globalProfileManager.explicitlyActivate( request.getActiveProfiles() );
+
+        globalProfileManager.explicitlyDeactivate( request.getInactiveProfiles() );
+
+        request.setProfileManager( globalProfileManager );
-    // ------------------------------------------------------------------------
-    // Profile Manager
-    // ------------------------------------------------------------------------
-
-    public ProfileManager createProfileManager( MavenExecutionRequest request )
-    {
-        ProfileManager globalProfileManager = new DefaultProfileManager( container, request.getProperties() );
-
-        globalProfileManager.loadSettingsProfiles( request.getSettings() );
-
-        globalProfileManager.explicitlyActivate( request.getActiveProfiles() );
-
-        globalProfileManager.explicitlyDeactivate( request.getInactiveProfiles() );
-
-        return globalProfileManager;        
-    }
-
+
+    public void loadSettingsProfiles( ProfileManager profileManager, Settings settings )
+    {
+        List settingsProfiles = settings.getProfiles();
+
+        if ( settingsProfiles != null && !settingsProfiles.isEmpty() )
+        {
+            List settingsActiveProfileIds = settings.getActiveProfiles();
+
+            profileManager.explicitlyActivate( settingsActiveProfileIds );
+
+            for ( Iterator it = settings.getProfiles().iterator(); it.hasNext(); )
+            {
+                org.apache.maven.settings.Profile rawProfile = (org.apache.maven.settings.Profile) it.next();
+
+                Profile profile = SettingsUtils.convertFromSettingsProfile( rawProfile );
+
+                profileManager.addProfile( profile );
+            }
+        }
+    }
+
