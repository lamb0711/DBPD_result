o Extends AbstractReport to AbstractMojo => we need now to create only one class for a report and a mojo
o Start implementation of internationalization

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@178980 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.AbstractMojo;
+import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.project.MavenProject;
+import org.codehaus.doxia.module.xhtml.XhtmlSink;
+import org.codehaus.doxia.site.renderer.SiteRenderer;
+import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.StringInputStream;
+import org.codehaus.plexus.util.StringUtils;
+import java.io.File;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+    extends AbstractMojo
+    /** @todo share, use default excludes from plexus utils. */
+    protected static final String[] DEFAULT_EXCLUDES = {// Miscellaneous typical temporary files
+        "**/*~", "**/#*#", "**/.#*", "**/%*%", "**/._*",
+
+        // CVS
+        "**/CVS", "**/CVS/**", "**/.cvsignore",
+
+        // SCCS
+        "**/SCCS", "**/SCCS/**",
+
+        // Visual SourceSafe
+        "**/vssver.scc",
+
+        // Subversion
+        "**/.svn", "**/.svn/**",
+
+        // Mac
+        "**/.DS_Store"};
+
-    public void generate( Sink sink )
+    protected abstract SiteRenderer getSiteRenderer();
+
+    protected abstract String getOutputDirectory();
+
+    protected abstract MavenProject getProject();
+
+    /**
+     * @see org.apache.maven.plugin.Mojo#execute()
+     */
+    public void execute()
+        throws MojoExecutionException
+    {
+        config = new MavenReportConfiguration();
+
+        config.setProject( getProject() );
+
+        config.setReportOutputDirectory( new File( getOutputDirectory() ) );
+
+        try
+        {
+            String outputDirectory = getOutputDirectory();
+
+            XhtmlSink sink = getSiteRenderer().createSink( new File( outputDirectory ), outputDirectory,
+                                                      getOutputName() + ".html",
+                                                      getSiteDescriptor(), "maven" );
+
+            generate( sink, Locale.ENGLISH );
+        }
+        catch ( Exception e )
+        {
+            throw new MojoExecutionException( "An error is occurred in " + getName() + " report generation." );
+        }
+    }
+
+    /**
+     * @see org.apache.maven.reporting.MavenReport#generate(org.codehaus.doxia.sink.Sink, java.util.Locale)
+     */
+    public void generate( Sink sink, Locale locale )
-        execute();
+        executeReport( locale );
-    protected abstract void execute()
+    protected abstract void executeReport( Locale locale )
-}
+
+    private String getReportsMenu()
+        throws MojoExecutionException
+    {
+        StringBuffer buffer = new StringBuffer();
+        buffer.append( "<menu name=\"Project Documentation\">\n" );
+
+        buffer.append( "  <item name=\"" + getName() + "\" href=\"/" + getOutputName() + ".html\"/>\n" );
+
+        buffer.append( "</menu>\n" );
+
+        return buffer.toString();
+    }
+
+    private InputStream getSiteDescriptor()
+        throws MojoExecutionException
+    {
+        String siteDescriptorContent = "";
+
+        try
+        {
+            siteDescriptorContent = IOUtil.toString( getClass().getResourceAsStream( "/default-report.xml" ) );
+        }
+        catch ( IOException e )
+        {
+            throw new MojoExecutionException( "The site descriptor cannot be read!", e );
+        }
+
+        Map props = new HashMap();
+
+        props.put( "reports", getReportsMenu() );
+
+        // TODO: interpolate ${project.*} in general
+
+        if ( getProject().getName() != null )
+        {
+            props.put( "project.name", getProject().getName() );
+        }
+        else
+        {
+            props.put( "project.name", "NO_PROJECT_NAME_SET" );
+        }
+
+        if ( getProject().getUrl() != null )
+        {
+            props.put( "project.url", getProject().getUrl() );
+        }
+        else
+        {
+            props.put( "project.url", "NO_PROJECT_URL_SET" );
+        }
+
+        siteDescriptorContent = StringUtils.interpolate( siteDescriptorContent, props );
+
+        return new StringInputStream( siteDescriptorContent );
+    }
+}
