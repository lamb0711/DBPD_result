PR: MNG-122
use real exceptions for repository metadata

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@320683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
-        throws ArtifactMetadataRetrievalException
+        throws RepositoryMetadataResolutionException
-                ArtifactRepositoryPolicy policy = metadata.isSnapshot() ? repository.getSnapshots()
-                    : repository.getReleases();
+                ArtifactRepositoryPolicy policy =
+                    metadata.isSnapshot() ? repository.getSnapshots() : repository.getReleases();
-                        metadata.storeInLocalRepository( localRepository, repository );
+                        try
+                        {
+                            metadata.storeInLocalRepository( localRepository, repository );
+                        }
+                        catch ( RepositoryMetadataStoreException e )
+                        {
+                            throw new RepositoryMetadataResolutionException(
+                                "Unable to store local copy of metadata: " + e.getMessage(), e );
+                        }
+
+        try
+        {
+            mergeMetadata( metadata, remoteRepositories, localRepository );
+        }
+        catch ( RepositoryMetadataStoreException e )
+        {
+            throw new RepositoryMetadataResolutionException(
+                "Unable to store local copy of metadata: " + e.getMessage(), e );
+        }
+        catch ( RepositoryMetadataReadException e )
+        {
+            throw new RepositoryMetadataResolutionException( "Unable to read local copy of metadata: " + e.getMessage(),
+                                                             e );
+        }
+    }
+
+    private void mergeMetadata( RepositoryMetadata metadata, List remoteRepositories,
+                                ArtifactRepository localRepository )
+        throws RepositoryMetadataStoreException, RepositoryMetadataReadException
+    {
-            ArtifactRepositoryPolicy policy = metadata.isSnapshot() ? repository.getSnapshots()
-                : repository.getReleases();
+            ArtifactRepositoryPolicy policy =
+                metadata.isSnapshot() ? repository.getSnapshots() : repository.getReleases();
+        updateSnapshotMetadata( metadata, previousMetadata, selected, localRepository );
+    }
+
+    private void updateSnapshotMetadata( RepositoryMetadata metadata, Map previousMetadata, ArtifactRepository selected,
+                                         ArtifactRepository localRepository )
+        throws RepositoryMetadataStoreException
+    {
-        throws ArtifactMetadataRetrievalException
+        throws RepositoryMetadataReadException
-        throws ArtifactMetadataRetrievalException
+        throws RepositoryMetadataReadException
-            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
+            throw new RepositoryMetadataReadException( "Cannot read metadata from '" + mappingFile + "'", e );
-            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
+            throw new RepositoryMetadataReadException(
+                "Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e );
-            throw new ArtifactMetadataRetrievalException( "Cannot parse version information from: " + mappingFile, e );
+            throw new RepositoryMetadataReadException(
+                "Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e );
-        throws ArtifactMetadataRetrievalException
+        throws RepositoryMetadataResolutionException
-            throw new ArtifactMetadataRetrievalException(
+            throw new RepositoryMetadataResolutionException(
-        if ( file.exists() )
+        try
-            Metadata prevMetadata = readMetadata( file );
-            metadata.setMetadata( prevMetadata );
+            if ( file.exists() )
+            {
+                Metadata prevMetadata = readMetadata( file );
+                metadata.setMetadata( prevMetadata );
+            }
+        }
+        catch ( RepositoryMetadataReadException e )
+        {
+            throw new RepositoryMetadataResolutionException( e.getMessage(), e );
-        throws ArtifactMetadataRetrievalException
+        throws RepositoryMetadataResolutionException
-                throw new ArtifactMetadataRetrievalException(
+                throw new RepositoryMetadataResolutionException(
-        throws ArtifactMetadataRetrievalException
+        throws RepositoryMetadataDeploymentException
-            throw new ArtifactMetadataRetrievalException(
+            throw new RepositoryMetadataDeploymentException(
-        resolveAlways( metadata, deploymentRepository, file, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN, false );
+        try
+        {
+            resolveAlways( metadata, deploymentRepository, file, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN, false );
+        }
+        catch ( RepositoryMetadataResolutionException e )
+        {
+            throw new RepositoryMetadataDeploymentException(
+                "Unable to get previous metadata to update: " + e.getMessage(), e );
+        }
-        metadata.storeInLocalRepository( localRepository, deploymentRepository );
+        try
+        {
+            metadata.storeInLocalRepository( localRepository, deploymentRepository );
+        }
+        catch ( RepositoryMetadataStoreException e )
+        {
+            throw new RepositoryMetadataDeploymentException( "Error installing metadata: " + e.getMessage(), e );
+        }
-            // TODO: wrong exception
-            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
+            throw new RepositoryMetadataDeploymentException( "Error while deploying metadata: " + e.getMessage(), e );
-        throws ArtifactMetadataRetrievalException
+        throws RepositoryMetadataInstallationException
-        metadata.storeInLocalRepository( localRepository, localRepository );
+        try
+        {
+            metadata.storeInLocalRepository( localRepository, localRepository );
+        }
+        catch ( RepositoryMetadataStoreException e )
+        {
+            throw new RepositoryMetadataInstallationException( "Error installing metadata: " + e.getMessage(), e );
+        }
