[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.HashSet;
-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.repository.DefaultRepositoryRequest;
-import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.artifact.resolver.ArtifactResolutionRequest;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ExclusionSetFilter;
+import org.sonatype.aether.artifact.Artifact;
+import org.sonatype.aether.graph.DependencyFilter;
+import org.sonatype.aether.graph.DependencyNode;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.util.filter.ExclusionsDependencyFilter;
+import org.sonatype.aether.util.graph.PreorderNodeListGenerator;
- * technical reasons, it is not part of the public API. In particular, this interface can be changed or deleted without
+ * technical reasons, it is not part of the public API. In particular, this class can be changed or deleted without
+        Collection<String> repoIds = new HashSet<String>();
+            repoIds.add( repository.getId() );
-            artifactRepositories.addAll( externalRepositories );
+            for ( ArtifactRepository repository : externalRepositories )
+            {
+                if ( repoIds.add( repository.getId() ) )
+                {
+                    artifactRepositories.add( repository );
+                }
+            }
-        RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();
-        repositoryRequest.setCache( request.getRepositoryCache() );
-        repositoryRequest.setLocalRepository( request.getLocalRepository() );
-        repositoryRequest.setRemoteRepositories( project.getPluginArtifactRepositories() );
-        repositoryRequest.setOffline( request.isOffline() );
-        repositoryRequest.setForceUpdate( request.isForceUpdate() );
-        repositoryRequest.setTransferListener( request.getTransferListener() );
-
-                PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, repositoryRequest );
+                PluginVersionRequest versionRequest =
+                    new DefaultPluginVersionRequest( plugin, request.getRepositorySession(),
+                                                     project.getRemotePluginRepositories() );
-            PluginArtifactsCache.CacheRecord recordArtifacts =
-                pluginArtifactsCache.get( plugin, repositoryRequest, null );
+            PluginArtifactsCache.Key cacheKey =
+                pluginArtifactsCache.createKey( plugin, null, project.getRemotePluginRepositories(),
+                                                request.getRepositorySession() );
+
+            PluginArtifactsCache.CacheRecord recordArtifacts = pluginArtifactsCache.get( cacheKey );
-                artifacts = resolveExtensionArtifacts( plugin, repositoryRequest, request );
+                artifacts = resolveExtensionArtifacts( plugin, project.getRemotePluginRepositories(), request );
-                recordArtifacts = pluginArtifactsCache.put( plugin, repositoryRequest, null, artifacts );
+                recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );
-            ArtifactFilter extensionArtifactFilter = null;
+            DependencyFilter extensionArtifactFilter = null;
-                extensionArtifactFilter = new ExclusionSetFilter( exclusions );
+                extensionArtifactFilter = new ExclusionsDependencyFilter( exclusions );
-    private List<Artifact> resolveExtensionArtifacts( Plugin extensionPlugin, RepositoryRequest repositoryRequest,
+    private List<Artifact> resolveExtensionArtifacts( Plugin extensionPlugin, List<RemoteRepository> repositories,
-        ArtifactResolutionRequest artifactRequest = new ArtifactResolutionRequest( repositoryRequest );
-        artifactRequest.setServers( request.getServers() );
-        artifactRequest.setMirrors( request.getMirrors() );
-        artifactRequest.setProxies( request.getProxies() );
+        DependencyNode root =
+            pluginDependenciesResolver.resolve( extensionPlugin, null, null, repositories,
+                                                request.getRepositorySession() );
-        return pluginDependenciesResolver.resolve( extensionPlugin, null, artifactRequest, null );
+        PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();
+        root.accept( nlg );
+        return nlg.getArtifacts( false );
