MNG-5677 hooks to allow fine-grained cache management

Also fixed broken cache #flush() and missing #dispose() in
couple of places.

Signed-off-by: Igor Fedorenko <igor@ifedorenko.com>

-import java.util.HashMap;
+import java.util.concurrent.ConcurrentHashMap;
+import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Disposable;
-    implements ProjectRealmCache
+    implements ProjectRealmCache, Disposable
-    private static class CacheKey
+    protected static class CacheKey
+        implements Key
+        @Override
+        public String toString()
+        {
+            return extensionRealms.toString();
+        }
-    private final Map<CacheKey, CacheRecord> cache = new HashMap<CacheKey, CacheRecord>();
+    protected final Map<Key, CacheRecord> cache = new ConcurrentHashMap<Key, CacheRecord>();
-    public CacheRecord get( List<? extends ClassRealm> extensionRealms )
+    @Override
+    public Key createKey( List<? extends ClassRealm> extensionRealms )
-        return cache.get( new CacheKey( extensionRealms ) );
+        return new CacheKey( extensionRealms );
-    public CacheRecord put( List<? extends ClassRealm> extensionRealms, ClassRealm projectRealm,
-                            DependencyFilter extensionArtifactFilter )
+    public CacheRecord get( Key key )
+    {
+        return cache.get( key );
+    }
+
+    public CacheRecord put( Key key, ClassRealm projectRealm, DependencyFilter extensionArtifactFilter )
-        CacheKey key = new CacheKey( extensionRealms );
-
-            throw new IllegalStateException( "Duplicate project realm for extensions " + extensionRealms );
+            throw new IllegalStateException( "Duplicate project realm for extensions " + key );
+        for ( CacheRecord record : cache.values() )
+        {
+            ClassRealm realm = record.realm;
+            try
+            {
+                realm.getWorld().disposeRealm( realm.getId() );
+            }
+            catch ( NoSuchRealmException e )
+            {
+                // ignore
+            }
+        }
-    public void register( MavenProject project, CacheRecord record )
+    public void register( MavenProject project, Key key, CacheRecord record )
+    @Override
+    public void dispose()
+    {
+        flush();
+    }
+
