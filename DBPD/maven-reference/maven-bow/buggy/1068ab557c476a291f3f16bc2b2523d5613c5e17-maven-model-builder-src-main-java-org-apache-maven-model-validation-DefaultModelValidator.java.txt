[MNG-4454] Incomplete <parent> element causes NPE

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@881784 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.building.ModelProblem.Severity;
-            validateStringNotEmpty( "parent.groupId", problems, false, parent.getGroupId() );
+            validateStringNotEmpty( "parent.groupId", problems, Severity.FATAL, parent.getGroupId() );
-            validateStringNotEmpty( "parent.artifactId", problems, false, parent.getArtifactId() );
+            validateStringNotEmpty( "parent.artifactId", problems, Severity.FATAL, parent.getArtifactId() );
-            validateStringNotEmpty( "parent.version", problems, false, parent.getVersion() );
+            validateStringNotEmpty( "parent.version", problems, Severity.FATAL, parent.getVersion() );
-            if ( parent.getGroupId().equals( model.getGroupId() )
-                && parent.getArtifactId().equals( model.getArtifactId() ) )
+            if ( equals( parent.getGroupId(), model.getGroupId() )
+                && equals( parent.getArtifactId(), model.getArtifactId() ) )
-                addViolation( problems, false, "The parent element cannot have the same ID as the project." );
+                addViolation( problems, Severity.ERROR, "The parent element cannot have the same ID as the project." );
-            validateEnum( "modelVersion", problems, false, model.getModelVersion(), null, "4.0.0" );
-            validateStringNoExpression( "groupId", problems, true, model.getGroupId() );
-            validateStringNoExpression( "artifactId", problems, true, model.getArtifactId() );
-            validateStringNoExpression( "version", problems, true, model.getVersion() );
+            validateEnum( "modelVersion", problems, Severity.ERROR, model.getModelVersion(), null, "4.0.0" );
+            validateStringNoExpression( "groupId", problems, Severity.WARNING, model.getGroupId() );
+            validateStringNoExpression( "artifactId", problems, Severity.WARNING, model.getArtifactId() );
+            validateStringNoExpression( "version", problems, Severity.WARNING, model.getVersion() );
-                    addViolation( problems, false, "profiles.profile.id must be unique"
+                    addViolation( problems, Severity.ERROR, "profiles.profile.id must be unique"
-        validateStringNotEmpty( "modelVersion", problems, false, model.getModelVersion() );
+        validateStringNotEmpty( "modelVersion", problems, Severity.ERROR, model.getModelVersion() );
-        validateStringNotEmpty( "packaging", problems, false, model.getPackaging() );
+        validateStringNotEmpty( "packaging", problems, Severity.ERROR, model.getPackaging() );
-            addViolation( problems, false, "Packaging '" + model.getPackaging() + "' is invalid. Aggregator projects "
-                + "require 'pom' as packaging." );
+            addViolation( problems, Severity.ERROR, "Packaging '" + model.getPackaging()
+                + "' is invalid. Aggregator projects " + "require 'pom' as packaging." );
-        Parent parent = model.getParent();
-        if ( parent != null )
-        {
-            if ( parent.getGroupId().equals( model.getGroupId() )
-                && parent.getArtifactId().equals( model.getArtifactId() ) )
-            {
-                addViolation( problems, false, "The parent element cannot have the same ID as the project." );
-            }
-        }
+        validateStringNotEmpty( "version", problems, Severity.ERROR, model.getVersion() );
-        validateStringNotEmpty( "version", problems, false, model.getVersion() );
-
-        boolean warnOnly = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;
+        Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );
-            validateStringNotEmpty( "dependencies.dependency.type", problems, false, d.getType(), d.getManagementKey() );
+            validateStringNotEmpty( "dependencies.dependency.type", problems, Severity.ERROR, d.getType(),
+                                    d.getManagementKey() );
-            validateStringNotEmpty( "dependencies.dependency.version", problems, false, d.getVersion(),
+            validateStringNotEmpty( "dependencies.dependency.version", problems, Severity.ERROR, d.getVersion(),
-                    addViolation( problems, false, "For dependency " + d.getManagementKey()
+                    addViolation( problems, Severity.ERROR, "For dependency " + d.getManagementKey()
-                        addViolation( problems, false, "For dependency " + d.getManagementKey()
+                        addViolation( problems, Severity.ERROR, "For dependency " + d.getManagementKey()
-                addViolation( problems, false, "For dependency " + d.getManagementKey()
+                addViolation( problems, Severity.ERROR, "For dependency " + d.getManagementKey()
-                validateVersion( "dependencies.dependency.version", problems, warnOnly, d.getVersion(),
+                validateVersion( "dependencies.dependency.version", problems, errOn30, d.getVersion(),
-                validateBoolean( "dependencies.dependency.optional", problems, warnOnly, d.getOptional(),
+                validateBoolean( "dependencies.dependency.optional", problems, errOn30, d.getOptional(),
-                validateEnum( "dependencies.dependency.scope", problems, true, d.getScope(),
+                validateEnum( "dependencies.dependency.scope", problems, Severity.WARNING, d.getScope(),
-                validateStringNotEmpty( "dependencyManagement.dependencies.dependency.artifactId", problems, false,
-                                        d.getArtifactId(), d.getManagementKey() );
+                validateStringNotEmpty( "dependencyManagement.dependencies.dependency.artifactId", problems,
+                                        Severity.ERROR, d.getArtifactId(), d.getManagementKey() );
-                validateStringNotEmpty( "dependencyManagement.dependencies.dependency.groupId", problems, false,
-                                        d.getGroupId(), d.getManagementKey() );
+                validateStringNotEmpty( "dependencyManagement.dependencies.dependency.groupId", problems,
+                                        Severity.ERROR, d.getGroupId(), d.getManagementKey() );
-                        addViolation( problems, false, "For managed dependency " + d.getManagementKey()
+                        addViolation( problems, Severity.ERROR, "For managed dependency " + d.getManagementKey()
-                            addViolation( problems, false, "For managed dependency " + d.getManagementKey()
-                                + ": system-scoped dependency must specify an absolute systemPath but is "
-                                + systemPath );
+                            addViolation( problems, Severity.ERROR, "For managed dependency " + d.getManagementKey()
+                                + ": system-scoped dependency must specify an absolute systemPath but is " + systemPath );
-                    addViolation( problems, false, "For managed dependency " + d.getManagementKey()
+                    addViolation( problems, Severity.ERROR, "For managed dependency " + d.getManagementKey()
-                    validateBoolean( "dependencyManagement.dependencies.dependency.optional", problems, warnOnly,
+                    validateBoolean( "dependencyManagement.dependencies.dependency.optional", problems, errOn30,
-                    addViolation( problems, false, "Duplicate child module: " + module );
+                    addViolation( problems, Severity.ERROR, "Duplicate child module: " + module );
-            boolean warnOnMissingPluginVersion =
-                request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1;
+            Severity errOn31 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1 );
-                    validateStringNotEmpty( "build.plugins.plugin.artifactId", problems, false, p.getArtifactId() );
+                    validateStringNotEmpty( "build.plugins.plugin.artifactId", problems, Severity.ERROR,
+                                            p.getArtifactId() );
-                    validateStringNotEmpty( "build.plugins.plugin.groupId", problems, false, p.getGroupId() );
+                    validateStringNotEmpty( "build.plugins.plugin.groupId", problems, Severity.ERROR, p.getGroupId() );
-                    validateStringNotEmpty( "build.plugins.plugin.version", problems, warnOnMissingPluginVersion,
-                                            p.getVersion(), p.getKey() );
+                    validateStringNotEmpty( "build.plugins.plugin.version", problems, errOn31, p.getVersion(),
+                                            p.getKey() );
-                    validateVersion( "build.plugins.plugin.version", problems, warnOnly, p.getVersion(), p.getKey() );
+                    validateVersion( "build.plugins.plugin.version", problems, errOn30, p.getVersion(), p.getKey() );
-                    validateBoolean( "build.plugins.plugin.inherited", problems, warnOnly, p.getInherited(),
+                    validateBoolean( "build.plugins.plugin.inherited", problems, errOn30, p.getInherited(),
-                    validateBoolean( "build.plugins.plugin.extensions", problems, warnOnly, p.getExtensions(),
+                    validateBoolean( "build.plugins.plugin.extensions", problems, errOn30, p.getExtensions(),
-                                      problems, warnOnly, d.getScope(), d.getManagementKey(),
+                                      problems, errOn30, d.getScope(), d.getManagementKey(),
-                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", problems, false, p.getArtifactId() );
+                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", problems, Severity.ERROR,
+                                            p.getArtifactId() );
-                    validateStringNotEmpty( "reporting.plugins.plugin.groupId", problems, false, p.getGroupId() );
+                    validateStringNotEmpty( "reporting.plugins.plugin.groupId", problems, Severity.ERROR,
+                                            p.getGroupId() );
-                    validateStringNotEmpty( "reporting.plugins.plugin.version", problems, warnOnMissingPluginVersion,
-                                            p.getVersion(), p.getKey() );
+                    validateStringNotEmpty( "reporting.plugins.plugin.version", problems, errOn31, p.getVersion(),
+                                            p.getKey() );
-                    addViolation( problems, false, "'distributionManagement.status' must not be specified" );
+                    addViolation( problems, Severity.ERROR, "'distributionManagement.status' must not be specified" );
-        if ( !validateStringNotEmpty( fieldName, problems, false, id, sourceHint ) )
+        if ( !validateStringNotEmpty( fieldName, problems, Severity.ERROR, id, sourceHint ) )
-                addViolation( problems, false, "'" + fieldName + "'"
+                addViolation( problems, Severity.ERROR, "'" + fieldName + "'"
-                addViolation( problems, false, "'" + prefix + ".classifier' must be empty for imported POM: " + key );
+                addViolation( problems, Severity.ERROR, "'" + prefix + ".classifier' must be empty for imported POM: " + key );
-                boolean warning = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;
+                Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );
-                if ( StringUtils.clean( existing.getVersion() ).equals( StringUtils.clean( dependency.getVersion() ) ) )
+                if ( equals( existing.getVersion(), dependency.getVersion() ) )
-                addViolation( problems, warning, "'" + prefix
+                addViolation( problems, errOn30, "'" + prefix
-            validateStringNotEmpty( prefix + ".id", problems, false, repository.getId() );
+            validateStringNotEmpty( prefix + ".id", problems, Severity.ERROR, repository.getId() );
-            validateStringNotEmpty( prefix + "[" + repository.getId() + "].url", problems, false, repository.getUrl() );
+            validateStringNotEmpty( prefix + "[" + repository.getId() + "].url", problems, Severity.ERROR,
+                                    repository.getUrl() );
-                boolean warning = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;
+                Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );
-                addViolation( problems, warning, "'" + prefix + ".id' must be unique: " + repository.getId() + " -> "
+                addViolation( problems, errOn30, "'" + prefix + ".id' must be unique: " + repository.getId() + " -> "
-            addViolation( problems, true, "'" + prefix + ".layout = legacy' is deprecated: " + repository.getId() );
+            addViolation( problems, Severity.WARNING, "'" + prefix + ".layout = legacy' is deprecated: "
+                + repository.getId() );
-        boolean warnOnBadBoolean = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;
+        Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );
-            validateStringNotEmpty( prefix + ".directory", problems, false, resource.getDirectory() );
+            validateStringNotEmpty( prefix + ".directory", problems, Severity.ERROR, resource.getDirectory() );
-            validateBoolean( prefix + ".filtering", problems, warnOnBadBoolean, resource.getFiltering(),
+            validateBoolean( prefix + ".filtering", problems, errOn30, resource.getFiltering(),
-                        addViolation( problems, false, collisionException.getMessage() );
+                        addViolation( problems, Severity.ERROR, collisionException.getMessage() );
-    private boolean validateStringNoExpression( String fieldName, ModelProblemCollector problems, boolean warning,
+    private boolean validateStringNoExpression( String fieldName, ModelProblemCollector problems, Severity severity,
-        addViolation( problems, warning, "'" + fieldName + "' contains an expression but should be a constant." );
+        addViolation( problems, severity, "'" + fieldName + "' contains an expression but should be a constant." );
-    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, boolean warning, String string )
+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity,
+                                            String string )
-        return validateStringNotEmpty( fieldName, problems, warning, string, null );
+        return validateStringNotEmpty( fieldName, problems, severity, string, null );
-    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, boolean warning,
+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity,
-        if ( !validateNotNull( fieldName, problems, warning, string, sourceHint ) )
+        if ( !validateNotNull( fieldName, problems, severity, string, sourceHint ) )
-            addViolation( problems, warning, "'" + fieldName + "' is missing for " + sourceHint );
+            addViolation( problems, severity, "'" + fieldName + "' is missing for " + sourceHint );
-            addViolation( problems, warning, "'" + fieldName + "' is missing." );
+            addViolation( problems, severity, "'" + fieldName + "' is missing." );
-    private boolean validateNotNull( String fieldName, ModelProblemCollector problems, boolean warning, Object object, String sourceHint )
+    private boolean validateNotNull( String fieldName, ModelProblemCollector problems, Severity severity,
+                                     Object object, String sourceHint )
-            addViolation( problems, warning, "'" + fieldName + "' is missing for " + sourceHint );
+            addViolation( problems, severity, "'" + fieldName + "' is missing for " + sourceHint );
-            addViolation( problems, warning, "'" + fieldName + "' is missing." );
+            addViolation( problems, severity, "'" + fieldName + "' is missing." );
-    private boolean validateBoolean( String fieldName, ModelProblemCollector problems, boolean warning, String string,
+    private boolean validateBoolean( String fieldName, ModelProblemCollector problems, Severity severity, String string,
-            addViolation( problems, warning, "'" + fieldName + "' must be 'true' or 'false' for " + sourceHint
+            addViolation( problems, severity, "'" + fieldName + "' must be 'true' or 'false' for " + sourceHint
-            addViolation( problems, warning, "'" + fieldName + "' must be 'true' or 'false' but is '" + string + "'." );
+            addViolation( problems, severity, "'" + fieldName + "' must be 'true' or 'false' but is '" + string + "'." );
-    private boolean validateEnum( String fieldName, ModelProblemCollector problems, boolean warning, String string,
+    private boolean validateEnum( String fieldName, ModelProblemCollector problems, Severity severity, String string,
-            addViolation( problems, warning, "'" + fieldName + "' must be one of " + values + " for " + sourceHint
+            addViolation( problems, severity, "'" + fieldName + "' must be one of " + values + " for " + sourceHint
-            addViolation( problems, warning, "'" + fieldName + "' must be one of " + values + " but is '" + string
+            addViolation( problems, severity, "'" + fieldName + "' must be one of " + values + " but is '" + string
-    private boolean validateVersion( String fieldName, ModelProblemCollector problems, boolean warning, String string,
+    private boolean validateVersion( String fieldName, ModelProblemCollector problems, Severity severity, String string,
-            addViolation( problems, warning, "'" + fieldName + "' must be a valid version for " + sourceHint
+            addViolation( problems, severity, "'" + fieldName + "' must be a valid version for " + sourceHint
-            addViolation( problems, warning, "'" + fieldName + "' must be a valid version but is '" + string + "'." );
+            addViolation( problems, severity, "'" + fieldName + "' must be a valid version but is '" + string + "'." );
-    private void addViolation( ModelProblemCollector problems, boolean warning, String message )
+    private static void addViolation( ModelProblemCollector problems, Severity severity, String message )
-        if ( warning )
+        problems.add( severity, message, null );
+    }
+
+    private static boolean equals( String s1, String s2 )
+    {
+        return StringUtils.clean( s1 ).equals( StringUtils.clean( s2 ) );
+    }
+
+    private static Severity getSeverity( ModelBuildingRequest request, int errorThreshold )
+    {
+        if ( request.getValidationLevel() < errorThreshold )
-            problems.addWarning( message );
+            return Severity.WARNING;
-            problems.addError( message );
+            return Severity.ERROR;
