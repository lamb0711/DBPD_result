[MNG-2006] - Module SCM URL resolution -relative path. Brought scm path behavior inline with Maven 2

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@759354 13f79535-47bb-0310-9956-ffa450edef68

+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.maven.model.Model;
+    
+    private List<Model> parentModels;
+
+        parentModels = new ArrayList<Model>();
+    }
+    
+    /**
+     * Ordered from least specialized to most specialized.
+     */
+    public List<Model> getParentModels()
+    {
+    	return parentModels;
-        this.processors = new ArrayList<Processor>();
+        this(new ArrayList<Processor>());
-
+        if(parent instanceof Model)
+        {
+        	parentModels.add( (Model) parent );
+        }
+    
+    protected String normalizeUri(String u, String artifactId, Model parent)
+    {
+    	if(u == null)
+    	{
+    		return null;
+    	}
+		try 
+		{
+			String slashes = getSlashes(new URI(u).getRawSchemeSpecificPart());
+			URI uri = new URI(u + "/"
+					+ getModulePathAdjustment(parent, artifactId));
+
+			String normalized = uri.normalize().toString();
+			if("file".equals(uri.getScheme()))//UNC Paths
+			{
+				normalized = normalized.replaceFirst("/", slashes);
+			}
+			return normalized;   
+		} 
+		catch (URISyntaxException e) {
+
+		}  
+		return null;
+    }
+    
+    private static String getSlashes(String uri)
+    {
+    	StringBuilder sb = new StringBuilder();
+    	for(byte b : uri.getBytes())
+    	{
+    		if(b == 47)
+    		{
+    			sb.append("/");
+    		}
+        	else
+        	{
+        		break;
+        	}
+    	}
+    	return sb.toString();
+    }    
+    
+    private String getModulePathAdjustment(Model moduleProject,
+			String artifactId) {
+
+		Map<String, String> moduleAdjustments = new HashMap<String, String>();
+		List<String> modules = moduleProject.getModules();
+		if (modules != null) {
+			for (Iterator<String> it = modules.iterator(); it.hasNext();) {
+				String modulePath = (String) it.next();
+				String moduleName = modulePath;
+
+				if (moduleName.endsWith("/") || moduleName.endsWith("\\")) {
+					moduleName = moduleName.substring(0,
+							moduleName.length() - 1);
+				}
+
+				int lastSlash = moduleName.lastIndexOf('/');
+
+				if (lastSlash < 0) {
+					lastSlash = moduleName.lastIndexOf('\\');
+				}
+
+				String adjustment = null;
+
+				if (lastSlash > -1) {
+					moduleName = moduleName.substring(lastSlash + 1);
+					adjustment = modulePath.substring(0, lastSlash);
+				}
+
+				moduleAdjustments.put(moduleName, adjustment);
+			}
+		}
+		String adjust = moduleAdjustments.get(artifactId);
+		return (adjust != null) ? adjust + "/" + artifactId :  "/" + artifactId;
+	}      
