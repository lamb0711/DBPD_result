[MNG-3220] Allow managed dependencies to be imported into other projects

o Restored import scope for 3.x

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@795611 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.DependencyManagement;
+import org.apache.maven.model.management.DependencyManagementImporter;
+    private DependencyManagementImporter dependencyManagementImporter;
+
+    @Requirement
+        importDependencyManagement( resultModel, request, problems );
+
+    private void importDependencyManagement( Model model, ModelBuildingRequest request, List<ModelProblem> problems )
+    {
+        DependencyManagement depMngt = model.getDependencyManagement();
+
+        if ( depMngt == null )
+        {
+            return;
+        }
+
+        ModelResolver modelResolver = request.getModelResolver();
+
+        ModelBuildingRequest importRequest = null;
+
+        List<Model> importModels = null;
+
+        for ( Iterator<Dependency> it = depMngt.getDependencies().iterator(); it.hasNext(); )
+        {
+            Dependency dependency = it.next();
+
+            if ( !"pom".equals( dependency.getType() ) || !"import".equals( dependency.getScope() ) )
+            {
+                continue;
+            }
+
+            it.remove();
+
+            if ( modelResolver == null )
+            {
+                throw new IllegalArgumentException( "no model resolver provided, cannot resolve import POM "
+                    + toId( dependency ) + " for POM " + toSourceHint( model ) );
+            }
+
+            ModelSource importSource;
+            try
+            {
+                importSource =
+                    modelResolver.resolveModel( dependency.getGroupId(), dependency.getArtifactId(),
+                                                dependency.getVersion() );
+            }
+            catch ( UnresolvableModelException e )
+            {
+                problems.add( new ModelProblem( "Non-resolvable import POM " + toId( dependency ) + " for POM "
+                    + toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
+                                                toSourceHint( model ), e ) );
+                continue;
+            }
+
+            if ( importRequest == null )
+            {
+                importRequest = new DefaultModelBuildingRequest();
+                importRequest.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );
+            }
+
+            importRequest.setModelSource( importSource );
+            importRequest.setModelResolver( modelResolver.newCopy() );
+
+            ModelBuildingResult importResult;
+            try
+            {
+                importResult = build( importRequest );
+            }
+            catch ( ModelBuildingException e )
+            {
+                problems.addAll( e.getProblems() );
+                continue;
+            }
+
+            problems.addAll( importResult.getProblems() );
+
+            if ( importModels == null )
+            {
+                importModels = new ArrayList<Model>();
+            }
+
+            importModels.add( importResult.getEffectiveModel() );
+        }
+
+        dependencyManagementImporter.importManagement( model, importModels, request );
+    }
+
+    private String toId( Dependency dependency )
+    {
+        StringBuilder buffer = new StringBuilder( 64 );
+
+        buffer.append( dependency.getGroupId() );
+        buffer.append( ':' );
+        buffer.append( dependency.getArtifactId() );
+        buffer.append( ':' );
+        buffer.append( dependency.getVersion() );
+
+        return buffer.toString();
+    }
+
