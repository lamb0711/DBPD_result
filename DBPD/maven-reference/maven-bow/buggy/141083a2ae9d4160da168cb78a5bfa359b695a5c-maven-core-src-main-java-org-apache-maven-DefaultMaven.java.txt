o place execute method first
o inject the logger


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@749807 13f79535-47bb-0310-9956-ffa450edef68

-    implements Maven, LogEnabled
+    implements Maven
+    @Requirement
+    public MavenExecutionResult execute( MavenExecutionRequest request )
+    {
+        request.setStartTime( new Date() );
+
+        MavenExecutionResult result = new DefaultMavenExecutionResult();
+
+        ReactorManager reactorManager = createReactorManager( request, result );
+
+        if ( result.hasExceptions() )
+        {
+            return result;
+        }
+
+        EventDispatcher dispatcher = new DeprecationEventDispatcher( MavenEvents.DEPRECATIONS, request.getEventMonitors() );
+
+        String event = MavenEvents.MAVEN_EXECUTION;
+
+        dispatcher.dispatchStart( event, request.getBaseDirectory() );
+
+        MavenSession session = createSession( request, reactorManager, dispatcher );
+
+        if ( request.getGoals() != null )
+        {
+            for ( Iterator i = request.getGoals().iterator(); i.hasNext(); )
+            {
+                String goal = (String) i.next();
+
+                if ( goal == null )
+                {
+                    i.remove();
+                    continue;
+                }
+
+                TaskValidationResult tvr = lifecycleExecutor.isTaskValid( goal, session, reactorManager.getTopLevelProject() );
+
+                if ( !tvr.isTaskValid() )
+                {
+                    Exception e = tvr.generateInvalidTaskException();
+                    result.addException( e );
+                    dispatcher.dispatchError( event, request.getBaseDirectory(), e );
+
+                    return result;
+                }
+            }
+        }
+
+        logger.info( "Scanning for projects..." );
+
+        if ( reactorManager.hasMultipleProjects() )
+        {
+            logger.info( "Reactor build order: " );
+
+            for ( Iterator i = reactorManager.getSortedProjects().iterator(); i.hasNext(); )
+            {
+                MavenProject project = (MavenProject) i.next();
+
+                logger.info( "  " + project.getName() );
+            }
+        }
+
+        try
+        {
+            lifecycleExecutor.execute( session, reactorManager, dispatcher );
+        }
+        catch ( LifecycleExecutionException e )
+        {
+            result.addException( e );
+            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
+
+            return result;
+        }
+        catch ( BuildFailureException e )
+        {
+            result.addException( e );
+            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
+
+            return result;
+        }
+
+        result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
+
+        result.setProject( reactorManager.getTopLevelProject() );
+
+        result.setBuildPlans( session.getBuildPlans() );
+
+        dispatcher.dispatchEnd( event, request.getBaseDirectory() );
+
+        return result;
+    }    
+    
-    public MavenExecutionResult execute( MavenExecutionRequest request )
-    {
-        request.setStartTime( new Date() );
-
-        MavenExecutionResult result = new DefaultMavenExecutionResult();
-
-        ReactorManager reactorManager = createReactorManager( request, result );
-
-        if ( result.hasExceptions() )
-        {
-            return result;
-        }
-
-        EventDispatcher dispatcher = new DeprecationEventDispatcher( MavenEvents.DEPRECATIONS, request.getEventMonitors() );
-
-        String event = MavenEvents.MAVEN_EXECUTION;
-
-        dispatcher.dispatchStart( event, request.getBaseDirectory() );
-
-        MavenSession session = createSession( request, reactorManager, dispatcher );
-
-        if ( request.getGoals() != null )
-        {
-            for ( Iterator i = request.getGoals().iterator(); i.hasNext(); )
-            {
-                String goal = (String) i.next();
-
-                if ( goal == null )
-                {
-                    i.remove();
-                    continue;
-                }
-
-                TaskValidationResult tvr = lifecycleExecutor.isTaskValid( goal, session, reactorManager.getTopLevelProject() );
-
-                if ( !tvr.isTaskValid() )
-                {
-                    Exception e = tvr.generateInvalidTaskException();
-                    result.addException( e );
-                    dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-                    return result;
-                }
-            }
-        }
-
-        getLogger().info( "Scanning for projects..." );
-
-        if ( reactorManager.hasMultipleProjects() )
-        {
-            getLogger().info( "Reactor build order: " );
-
-            for ( Iterator i = reactorManager.getSortedProjects().iterator(); i.hasNext(); )
-            {
-                MavenProject project = (MavenProject) i.next();
-
-                getLogger().info( "  " + project.getName() );
-            }
-        }
-
-        try
-        {
-            lifecycleExecutor.execute( session, reactorManager, dispatcher );
-        }
-        catch ( LifecycleExecutionException e )
-        {
-            result.addException( e );
-            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-            return result;
-        }
-        catch ( BuildFailureException e )
-        {
-            result.addException( e );
-            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-            return result;
-        }
-
-        result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
-
-        result.setProject( reactorManager.getTopLevelProject() );
-
-        result.setBuildPlans( session.getBuildPlans() );
-
-        dispatcher.dispatchEnd( event, request.getBaseDirectory() );
-
-        return result;
-    }
-
-                    getLogger().info( "NOTE: Using release-pom: " + file + " in reactor build." );
+                    logger.info( "NOTE: Using release-pom: " + file + " in reactor build." );
-                            getLogger().warn( "Empty module detected. Please check you don't have any empty module definitions in your POM." );
+                            logger.warn( "Empty module detected. Please check you don't have any empty module definitions in your POM." );
-
-    protected Logger getLogger()
-    {
-        return logger;
-    }
-
-    public void enableLogging( Logger logger )
-    {
-        this.logger = logger;
-    }
