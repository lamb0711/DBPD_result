Resolving MNG-221, simplify qdox with field-level mojo parameter annotations

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@164872 13f79535-47bb-0310-9956-ffa450edef68

-import com.thoughtworks.qdox.JavaDocBuilder;
-import com.thoughtworks.qdox.model.DocletTag;
-import com.thoughtworks.qdox.model.JavaClass;
-import com.thoughtworks.qdox.model.JavaSource;
+import org.codehaus.modello.StringUtils;
+import org.codehaus.plexus.logging.AbstractLogEnabled;
+import org.codehaus.plexus.logging.Logger;
+
+import com.thoughtworks.qdox.JavaDocBuilder;
+import com.thoughtworks.qdox.model.DocletTag;
+import com.thoughtworks.qdox.model.JavaClass;
+import com.thoughtworks.qdox.model.JavaField;
+import com.thoughtworks.qdox.model.JavaSource;
+    extends AbstractLogEnabled
-        boolean required = parameter.isRequired();
-
-        String validator = parameter.getValidator();
-
-        if ( validator == null )
-        {
-            throw new InvalidParameterException( "validator", i );
-        }
-
-        tag = javaClass.getTagByName( MAVEN_PLUGIN_DESCRIPTION );
+        tag = findInClassHierarchy( javaClass, MAVEN_PLUGIN_DESCRIPTION );
-        tag = javaClass.getTagByName( MAVEN_PLUGIN_INSTANTIATION );
+        tag = findInClassHierarchy( javaClass, MAVEN_PLUGIN_INSTANTIATION );
-        tag = javaClass.getTagByName( GOAL_MULTI_EXECUTION_STRATEGY );
+        tag = findInClassHierarchy( javaClass, GOAL_MULTI_EXECUTION_STRATEGY );
-        DocletTag goal = javaClass.getTagByName( GOAL );
+        DocletTag goal = findInClassHierarchy( javaClass, GOAL );
-        DocletTag phase = javaClass.getTagByName( PHASE );
+        DocletTag phase = findInClassHierarchy( javaClass, PHASE );
-        DocletTag requiresDependencyResolution = javaClass.getTagByName( GOAL_REQUIRES_DEPENDENCY_RESOLUTION );
+        DocletTag requiresDependencyResolution = findInClassHierarchy( javaClass, GOAL_REQUIRES_DEPENDENCY_RESOLUTION );
-        // ----------------------------------------------------------------------
-        //
-        // ----------------------------------------------------------------------
+        extractParameters( mojoDescriptor, javaClass );
-        DocletTag[] parameterTags = javaClass.getTagsByName( PARAMETER );
+        return mojoDescriptor;
+    }
-        List parameters = new ArrayList();
+    private DocletTag findInClassHierarchy( JavaClass javaClass, String tagName )
+    {
+        DocletTag tag = javaClass.getTagByName( tagName );
-        for ( int j = 0; j < parameterTags.length; j++ )
+        if ( tag == null )
-            DocletTag parameter = parameterTags[j];
+            JavaClass superClass = javaClass.getSuperJavaClass();
+
+            if ( superClass != null )
+            {
+                tag = findInClassHierarchy( superClass, tagName );
+            }
+        }
+
+        return tag;
+    }
+
+    private void extractParameters( MojoDescriptor mojoDescriptor, JavaClass javaClass )
+    {
+        // ---------------------------------------------------------------------------------
+        // We're resolving class-level, ancestor-class-field, local-class-field order here.
+        // ---------------------------------------------------------------------------------
+
+        List rawParams = new ArrayList();
+
+        // for backward compat, we'll toss on the params declared at the class level.
+        DocletTag[] classLevelParams = javaClass.getTagsByName( PARAMETER );
+        if ( classLevelParams != null )
+        {
+            for ( int i = 0; i < classLevelParams.length; i++ )
+            {
+                DocletTag tag = classLevelParams[i];
+
+                String message = "DEPRECATED: Use field-level annotations "
+                    + "for parameters instead of class-level annotations. (parameter \'"
+                    + tag.getNamedParameter( "name" ) + "\'; class \'" + javaClass.getFullyQualifiedName() + ")";
+
+                Logger logger = getLogger();
+                if ( logger != null )
+                {
+                    logger.warn( message );
+                }
+                else
+                {
+                    // we're being used from pluggy, so this is okay...
+                    System.err.println( message );
+                }
+
+                rawParams.add( tag );
+            }
+        }
+
+        extractFieldParameterTags( javaClass, rawParams );
+
+        Set parameters = new HashSet();
+
+        for ( Iterator it = rawParams.iterator(); it.hasNext(); )
+        {
+            Object parameterInfo = it.next();
+
+            JavaField field = null;
+            DocletTag parameter = null;
+
+            // FIXME: ICK! This is only here for backward compatibility to the class-level annotations of params.
+            if ( parameterInfo instanceof JavaField )
+            {
+                field = (JavaField) parameterInfo;
+
+                parameter = field.getTagByName( PARAMETER );
+            }
+            else
+            {
+                parameter = (DocletTag) parameterInfo;
+            }
-            pd.setName( parameter.getNamedParameter( "name" ) );
+            // if the field is null, then we're using a deprecated annotation pattern...
+            // TODO: Remove this check once we're clear of the annotation-compat issues.
+            if ( field == null )
+            {
+                pd.setName( parameter.getNamedParameter( "name" ) );
-            pd.setType( parameter.getNamedParameter( "type" ) );
+                pd.setType( parameter.getNamedParameter( "type" ) );
+
+                pd.setDefaultValue( parameter.getNamedParameter( "default" ) );
+            }
+            else
+            {
+                pd.setName( field.getName() );
+
+                pd.setType( field.getType().getValue() );
+            }
+
+            String alias = parameter.getNamedParameter( "alias" );
+
+            if ( StringUtils.isEmpty( alias ) )
+            {
+                pd.setAlias( alias );
+            }
-            pd.setValidator( parameter.getNamedParameter( "validator" ) );
-
-            pd.setDefaultValue( parameter.getNamedParameter( "default" ) );
-
-        mojoDescriptor.setParameters( parameters );
+        if ( !parameters.isEmpty() )
+        {
+            List paramList = new ArrayList( parameters );
-        return mojoDescriptor;
+            mojoDescriptor.setParameters( paramList );
+        }
+    }
+
+    private void extractFieldParameterTags( JavaClass javaClass, List rawParams )
+    {
+        // we have to add the parent fields first, so that they will be overwritten by the local fields if
+        // that actually happens...
+        JavaClass superClass = javaClass.getSuperJavaClass();
+
+        if ( superClass != null )
+        {
+            extractFieldParameterTags( superClass, rawParams );
+        }
+
+        JavaField[] classFields = javaClass.getFields();
+
+        if ( classFields != null )
+        {
+            for ( int i = 0; i < classFields.length; i++ )
+            {
+                JavaField field = classFields[i];
+
+                DocletTag paramTag = field.getTagByName( PARAMETER );
+
+                if ( paramTag != null )
+                {
+                    rawParams.add( field );
+                }
+            }
+        }
+
-                //                
+                //
-                //                
-                //                
+                //
+                //
-                //                
+                //
-                //                
+                //
-                //                
+                //
