PR: MNG-154
Define the lifecycle according to packaging.
Some more work on the structure of this is required.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@189871 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.handler.ArtifactHandler;
-import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;
-import org.apache.maven.artifact.handler.manager.ArtifactHandlerNotFoundException;
+import org.apache.maven.lifecycle.mapping.LifecycleMapping;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-    private ArtifactHandlerManager artifactHandlerManager;
-
+    private Map defaultPhases;
+
-        catch ( ArtifactHandlerNotFoundException e )
-        {
-            response.setException( e );
-        }
-        throws ArtifactHandlerNotFoundException, LifecycleExecutionException, PluginNotFoundException,
-        MojoExecutionException, ArtifactResolutionException
+        throws LifecycleExecutionException, PluginNotFoundException, MojoExecutionException,
+        ArtifactResolutionException
-            Phase p = (Phase) i.next();
+            String p = (String) i.next();
-            phaseMap.put( p.getId(), new Phase( p ) );
+            phaseMap.put( p, new ArrayList() );
-        ArtifactHandler artifactHandler = artifactHandlerManager.getArtifactHandler( project.getPackaging() );
-
-        if ( artifactHandler != null )
+        Map mappings;
+        try
-            if ( artifactHandler.packageGoal() != null )
+            LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, project.getPackaging() );
+            mappings = m.getPhases();
+        }
+        catch ( ComponentLookupException e )
+        {
+            getLogger().error( "No lifecycle mapping for type '" + project.getPackaging() + "': using defaults" );
+            mappings = defaultPhases;
+        }
+
+        for ( Iterator i = mappings.keySet().iterator(); i.hasNext(); )
+        {
+            String phase = (String) i.next();
+            String task = (String) mappings.get( phase );
+            MojoDescriptor mojoDescriptor = configureMojo( task, session, phaseMap );
+            List goals = (List) phaseMap.get( phase );
+            if ( !goals.contains( mojoDescriptor.getId() ) )
-                // TODO: need to inject plugin configuration here
-                configureMojo( artifactHandler.packageGoal(), session, phaseMap );
-            }
-
-            if ( artifactHandler.additionalPlugin() != null )
-            {
-                String additionalPluginGroupId = PluginDescriptor.getDefaultPluginGroupId();
-
-                String additionalPluginArtifactId = PluginDescriptor.getDefaultPluginArtifactId(
-                    artifactHandler.additionalPlugin() );
-
-                injectHandlerPluginConfiguration( project, additionalPluginGroupId, additionalPluginArtifactId, null );
+                goals.add( mojoDescriptor.getId() );
-                Phase phase = (Phase) phaseMap.get( mojoDescriptor.getPhase() );
+                List goals = (List) phaseMap.get( mojoDescriptor.getPhase() );
-                if ( phase == null )
+                if ( goals == null )
-                phase.getGoals().add( mojoDescriptor.getId() );
+                if ( !goals.contains( mojoDescriptor.getId() ) )
+                {
+                    goals.add( mojoDescriptor.getId() );
+                }
-            int index = phases.indexOf( phaseMap.get( task ) );
+            int index = phases.indexOf( task );
-                // TODO: phases should just be strings...
-                Phase p = (Phase) phases.get( j );
+                String p = (String) phases.get( j );
-                p = (Phase) phaseMap.get( p.getId() );
+                List phaseGoals = (List) phaseMap.get( p );
-                if ( p.getGoals() != null )
+                if ( phaseGoals != null )
-                    for ( Iterator k = p.getGoals().iterator(); k.hasNext(); )
+                    for ( Iterator k = phaseGoals.iterator(); k.hasNext(); )
-                pluginDescriptor =
-                    pluginManager.verifyPlugin( groupId, artifactId, version, session.getProject(),
-                                                session.getLocalRepository() );
+                pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session.getProject(),
+                                                               session.getLocalRepository() );
