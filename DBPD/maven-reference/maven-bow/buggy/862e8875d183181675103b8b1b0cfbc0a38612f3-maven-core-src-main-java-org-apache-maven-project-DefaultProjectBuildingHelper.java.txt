[MNG-4561] [regression] network settings are not applied to repositories from plugin dependencies
[MNG-4528] [regression] mvn deploy ignores proxy settings

o Revised original solution to generally exclude wagons pulled in transitively via Maven core artifacts

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@909934 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.ArtifactFilterManager;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
-import org.apache.maven.artifact.resolver.ResolutionErrorHandler;
-import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
-import org.apache.maven.model.Dependency;
+import org.apache.maven.plugin.internal.PluginDependenciesResolver;
-    private ResolutionErrorHandler resolutionErrorHandler;
-
-    @Requirement
-    private ArtifactFilterManager artifactFilterManager;
-
-    @Requirement
+    @Requirement
+    private PluginDependenciesResolver pluginDependenciesResolver;
+
-            if ( !plugin.isExtensions() && artifacts.size() == 1 && artifacts.get( 0 ).getFile() != null )
+            if ( !plugin.isExtensions() && artifacts.size() == 2 && artifacts.get( 0 ).getFile() != null
+                && "plexus-utils".equals( artifacts.get( 1 ).getArtifactId() ) )
-                 * loaded into a dedicated realm which is invisible to plugins.
+                 * loaded into a dedicated realm which is invisible to plugins (MNG-2749).
-                publicArtifacts.addAll( artifacts );
+                publicArtifacts.add( artifacts.get( 0 ) );
-        Artifact extensionArtifact = repositorySystem.createPluginArtifact( extensionPlugin );
-
-        Set<Artifact> overrideArtifacts = new LinkedHashSet<Artifact>();
-        for ( Dependency dependency : extensionPlugin.getDependencies() )
-        {
-            overrideArtifacts.add( repositorySystem.createDependencyArtifact( dependency ) );
-        }
-
-        ArtifactFilter collectionFilter = new ScopeArtifactFilter( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM );
-
-        ArtifactFilter resolutionFilter = artifactFilterManager.getCoreArtifactFilter();
-
-        artifactRequest.setArtifact( extensionArtifact );
-        artifactRequest.setArtifactDependencies( overrideArtifacts );
-        artifactRequest.setCollectionFilter( collectionFilter );
-        artifactRequest.setResolutionFilter( resolutionFilter );
-        artifactRequest.setResolveRoot( true );
-        artifactRequest.setResolveTransitively( true );
-        ArtifactResolutionResult result = repositorySystem.resolve( artifactRequest );
-
-        try
-        {
-            resolutionErrorHandler.throwErrors( artifactRequest, result );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new PluginResolutionException( extensionPlugin, e );
-        }
-
-        List<Artifact> extensionArtifacts = new ArrayList<Artifact>( result.getArtifacts() );
-
-        return extensionArtifacts;
+        return pluginDependenciesResolver.resolve( extensionPlugin, null, artifactRequest, null );
