[MNG-4960] [regression] Make-like reactor mode does not build selected project when resuming from one of its prerequisites

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1056770 13f79535-47bb-0310-9956-ffa450edef68

-        Collection<MavenProject> activeProjects = sorter.getSortedProjects();
+        List<MavenProject> activeProjects = sorter.getSortedProjects();
-        File reactorDirectory;
-        if ( request.getBaseDirectory() != null )
+        activeProjects = trimSelectedProjects( activeProjects, graph, request );
+        activeProjects = trimResumedProjects( activeProjects, request );
+
+        if ( activeProjects.size() != sorter.getSortedProjects().size() )
-            reactorDirectory = new File( request.getBaseDirectory() );
+            graph = new FilteredProjectDependencyGraph( graph, activeProjects );
-        else
-        {
-            reactorDirectory = null;
-        }
+
+        return graph;
+    }
+
+    private List<MavenProject> trimSelectedProjects( List<MavenProject> projects, ProjectDependencyGraph graph,
+                                                     MavenExecutionRequest request )
+        throws MavenExecutionException
+    {
+        List<MavenProject> result = projects;
-            List<MavenProject> selectedProjects = new ArrayList<MavenProject>( request.getSelectedProjects().size() );
-
-            for ( String selectedProject : request.getSelectedProjects() )
+            File reactorDirectory = null;
+            if ( request.getBaseDirectory() != null )
-                MavenProject project = null;
+                reactorDirectory = new File( request.getBaseDirectory() );
+            }
-                for ( MavenProject activeProject : activeProjects )
+            Collection<MavenProject> selectedProjects = new LinkedHashSet<MavenProject>( projects.size() );
+
+            for ( String selector : request.getSelectedProjects() )
+            {
+                MavenProject selectedProject = null;
+
+                for ( MavenProject project : projects )
-                    if ( isMatchingProject( activeProject, selectedProject, reactorDirectory ) )
+                    if ( isMatchingProject( project, selector, reactorDirectory ) )
-                        project = activeProject;
+                        selectedProject = project;
-                if ( project != null )
+                if ( selectedProject != null )
-                    selectedProjects.add( project );
+                    selectedProjects.add( selectedProject );
-                        + selectedProject, request.getPom() );
+                        + selector, request.getPom() );
-            activeProjects = selectedProjects;
-
-                activeProjects = new LinkedHashSet<MavenProject>( selectedProjects );
-
-                for ( MavenProject selectedProject : selectedProjects )
+                for ( MavenProject selectedProject : new ArrayList<MavenProject>( selectedProjects ) )
-                        activeProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );
+                        selectedProjects.addAll( graph.getUpstreamProjects( selectedProject, true ) );
-                        activeProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );
+                        selectedProjects.addAll( graph.getDownstreamProjects( selectedProject, true ) );
+
+            result = new ArrayList<MavenProject>( selectedProjects.size() );
+
+            for ( MavenProject project : projects )
+            {
+                if ( selectedProjects.contains( project ) )
+                {
+                    result.add( project );
+                }
+            }
+        return result;
+    }
+
+    private List<MavenProject> trimResumedProjects( List<MavenProject> projects, MavenExecutionRequest request )
+        throws MavenExecutionException
+    {
+        List<MavenProject> result = projects;
+
-            String selectedProject = request.getResumeFrom();
+            File reactorDirectory = null;
+            if ( request.getBaseDirectory() != null )
+            {
+                reactorDirectory = new File( request.getBaseDirectory() );
+            }
-            List<MavenProject> projects = new ArrayList<MavenProject>( activeProjects.size() );
+            String selector = request.getResumeFrom();
+
+            result = new ArrayList<MavenProject>( projects.size() );
-            for ( MavenProject project : activeProjects )
+            for ( MavenProject project : projects )
-                if ( !resumed && isMatchingProject( project, selectedProject, reactorDirectory ) )
+                if ( !resumed && isMatchingProject( project, selector, reactorDirectory ) )
-                    projects.add( project );
+                    result.add( project );
-                throw new MavenExecutionException( "Could not find project to resume reactor build from: "
-                    + selectedProject + " vs " + activeProjects, request.getPom() );
+                throw new MavenExecutionException( "Could not find project to resume reactor build from: " + selector
+                    + " vs " + projects, request.getPom() );
-
-            activeProjects = projects;
-        if ( activeProjects.size() != sorter.getSortedProjects().size() )
-        {
-            graph = new FilteredProjectDependencyGraph( graph, activeProjects );
-        }
-
-        return graph;
+        return result;
