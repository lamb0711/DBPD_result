Resolving issue: MNG-379

o Added support for update-all and update-none when prompting the user.

o Added --update-plugins/-F option to force an update of the plugins used in the project.

o Added autoUpdate setting for the plugin registry. This is used when in non-interactive mode, to determine whether to register plugin updates

o Added updateInterval to determine when/how often to check for updates to registered plugins. Supports three syntaxes:

  - 'never'
  - 'always'
  - 'interval:XXX' (where XXX can be a combination of weeks, days, hours, and minutes in the syntax: 1w1d1h1m)
         > this renders the interval syntax similar to 'interval:1w' to check every week.

  NOTE: update intervals are calculated from the time a particular plugin was last checked.

o Added lastChecked attribute for registered plugins, to use as a basis for calculating update-check interval

o Added RuntimeInfo classes for maven-settings and maven-plugin-registry, to help in tracking the file each instance comes from, in addition to merging info which is useful when extracting the user-level instance from the merged instance (for persisting changes to the user instance, f.e.).

o Changed verifyPlugin(..) to take an instance of Settings, to allow persistent decisions across the session (like update-all, update-none in the plugin version manager)

This should take care of outstanding issues with this new feature. I'm closing the JIRA issue now, and we'll deal with any bugs/shortcomings as separate issues.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191021 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.settings.Settings;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
-    public String resolvePluginVersion( String groupId, String artifactId, MavenProject project,
-                                       ArtifactRepository localRepository, boolean interactiveMode )
+    // calculated.
+    private PluginRegistry pluginRegistry;
+
+    public String resolvePluginVersion( String groupId, String artifactId, MavenProject project, Settings settings,
+                                       ArtifactRepository localRepository )
-        // TODO: we're NEVER going to persist POM-derived plugin versions...dunno if this is 'right' or not.
+        // we're NEVER going to persist POM-derived plugin versions.
-        boolean promptToPersistUpdatedVersion = false;
+        // we're not going to prompt the user to accept a plugin update until we find one.
+        boolean promptToPersist = false;
-                // TODO: 2. check for updates. Determine whether this is the right time to attempt to update the version.
-                boolean checkForUpdates = true;
+                boolean forceUpdate = settings.getRuntimeInfo().isPluginUpdateForced();
-                if ( checkForUpdates )
+                // 2. check for updates. Determine whether this is the right time to attempt to update the version.
+                if ( forceUpdate || shouldCheckForUpdates( groupId, artifactId ) )
+                        // see if this version we've resolved is on our previously rejected list.
-                        promptToPersistUpdatedVersion = !isRejected;
+                        promptToPersist = !isRejected;
+                        // if we've rejected this version previously, forget about updating.
-                    else
-                    {
-                        // let's be very careful about making this code resistant to change...
-                        promptToPersistUpdatedVersion = false;
-                    }
-                else
-                {
-                    // let's be very careful about making this code resistant to change...
-                    promptToPersistUpdatedVersion = false;
-                }
-            }
-            else
-            {
-                // let's be very careful about making this code resistant to change...
-                promptToPersistUpdatedVersion = false;
-            promptToPersistUpdatedVersion = true;
+            // 3. Tell the system to determine whether this update can/should be persisted.
+            promptToPersist = true;
-        // if we're not in interactive mode, then the default is to update and NOT prompt.
-        // TODO: replace this with proper update policy-based determination related to batch mode.
-        boolean persistUpdatedVersion = promptToPersistUpdatedVersion && !interactiveMode;
+        // determine whether this build is running in interactive mode
+        // If it's not, then we'll defer to the autoUpdate setting from the registry 
+        // for a decision on updating the plugin in the registry...rather than prompting
+        // the user.
+        boolean inInteractiveMode = settings.isInteractiveMode();
+        
+        // determines what should be done if we're in non-interactive mode.
+        // if true, then just update the registry with the new versions.
+        boolean autoUpdate = Boolean.valueOf( pluginRegistry.getAutoUpdate() ).booleanValue();
+        // We should persist by default if:
+        // 1. we detected a change in the plugin version from what was in the registry, or
+        //      a. the plugin is not registered
+        // 2. we're in interactive mode, or
+        //      a. the registry is declared to be in autoUpdate mode
+        //
+        // NOTE: This is only the default value; it may be changed as the result of prompting the user.
+        boolean persistUpdate = promptToPersist && ( inInteractiveMode || autoUpdate );
+
+        Boolean applyToAll = settings.getRuntimeInfo().getApplyToAllPluginUpdates();
+        
+        // Incorporate interactive-mode and previous decisions on apply-to-all, if appropriate.
-        if ( promptToPersistUpdatedVersion && interactiveMode )
-        {
-            persistUpdatedVersion = promptToPersistPluginUpdate( version, updatedVersion, groupId, artifactId );
-        }
+        // don't prompt if the user has selected ALL/NONE previously in this session
+        //
+        // NOTE: We're incorporating here, to make the usages of this check more consistent and 
+        // resistant to change.
+        promptToPersist = promptToPersist && applyToAll == null && inInteractiveMode;
+        if ( promptToPersist )
+        {
+            persistUpdate = promptToPersistPluginUpdate( version, updatedVersion, groupId, artifactId, settings );
+        }
+        
-        if ( persistUpdatedVersion )
+        // cases where this version will be persisted:
+        // 1. the user is prompted and answers yes or all
+        // 2. the user has previously answeres all in this session
+        // 3. the build is running in non-interactive mode, and the registry setting is for auto-update
+        if ( ( applyToAll == null || applyToAll.booleanValue() ) && persistUpdate )
+            
+            // we're using the updated version of the plugin in this session as well.
+            version = updatedVersion;
-        else if ( promptToPersistUpdatedVersion && interactiveMode )
+        else if ( promptToPersist )
+    private boolean shouldCheckForUpdates( String groupId, String artifactId )
+        throws PluginVersionResolutionException
+    {
+        PluginRegistry pluginRegistry = getPluginRegistry( groupId, artifactId );
+
+        org.apache.maven.plugin.registry.Plugin plugin = getPlugin( groupId, artifactId, pluginRegistry );
+
+        if ( plugin == null )
+        {
+            return true;
+        }
+        else
+        {
+            String lastChecked = plugin.getLastChecked();
+
+            if ( StringUtils.isEmpty( lastChecked ) )
+            {
+                return true;
+            }
+            else
+            {
+                SimpleDateFormat format = new SimpleDateFormat(
+                                                                org.apache.maven.plugin.registry.Plugin.LAST_CHECKED_DATE_FORMAT );
+
+                try
+                {
+                    Date lastCheckedDate = format.parse( lastChecked );
+
+                    return IntervalUtils.isExpired( pluginRegistry.getUpdateInterval(), lastCheckedDate );
+                }
+                catch ( ParseException e )
+                {
+                    getLogger().warn(
+                                      "Last-checked date for plugin {" + constructPluginKey( groupId, artifactId )
+                                          + "} is invalid. Checking for updates." );
+
+                    return true;
+                }
+            }
+        }
+    }
+
-                                                String artifactId )
+                                                String artifactId, Settings settings )
-            message.append( "Would you like to use this new version from now on? [Y/n] " );
+            message.append( "Would you like to use this new version from now on? ( [Y]es, [n]o, [a]ll, n[o]ne ) " );
+            boolean shouldPersist = false;
+
+            if ( !StringUtils.isEmpty( persistAnswer ) )
+            {
+                persistAnswer = persistAnswer.toLowerCase();
+                
+                if ( persistAnswer.startsWith( "y" ) )
+                {
+                    shouldPersist = true;
+                }
+                else if ( persistAnswer.startsWith( "a" ) )
+                {
+                    shouldPersist = true;
+
+                    settings.getRuntimeInfo().setApplyToAllPluginUpdates( Boolean.TRUE );
+                }
+                else if ( persistAnswer.indexOf( "o" ) > -1 )
+                {
+                    settings.getRuntimeInfo().setApplyToAllPluginUpdates( Boolean.FALSE );
+                }
+            }
+
+                
+                SimpleDateFormat format = new SimpleDateFormat( org.apache.maven.plugin.registry.Plugin.LAST_CHECKED_DATE_FORMAT );
+                
+                plugin.setLastChecked(format.format( new Date() ) );
-            plugin.setAutoUpdate( false );
-        File pluginRegistryFile = pluginRegistry.getFile();
+        File pluginRegistryFile = pluginRegistry.getRuntimeInfo().getFile();
-        PluginRegistry pluginRegistry = null;
-
-        try
-        {
-            pluginRegistry = mavenPluginRegistryBuilder.buildPluginRegistry();
-        }
-        catch ( IOException e )
-        {
-            throw new PluginVersionResolutionException( groupId, artifactId, "Cannot read plugin registry", e );
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new PluginVersionResolutionException( groupId, artifactId, "Cannot parse plugin registry", e );
-        }
-
-            pluginRegistry = mavenPluginRegistryBuilder.createUserPluginRegistry();
+            try
+            {
+                pluginRegistry = mavenPluginRegistryBuilder.buildPluginRegistry();
+            }
+            catch ( IOException e )
+            {
+                throw new PluginVersionResolutionException( groupId, artifactId, "Cannot read plugin registry", e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new PluginVersionResolutionException( groupId, artifactId, "Cannot parse plugin registry", e );
+            }
+
+            if ( pluginRegistry == null )
+            {
+                pluginRegistry = mavenPluginRegistryBuilder.createUserPluginRegistry();
+            }
