Fixing plugin-discovery when one plugin depends on another, and the pluginCollector sees a plugin before that plugin is meant to be added with its componentRealm.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@498048 13f79535-47bb-0310-9956-ffa450edef68

+        getLogger().debug( "In verifyVersionedPlugin for: " + plugin.getKey() );
-            if ( !pluginCollector.isPluginInstalled( plugin ) )
-            {
-                addPlugin( plugin, pluginArtifact, project, localRepository );
-            }
+//            if ( !pluginCollector.isPluginInstalled( plugin ) )
+//            {
+//            }
+            addPlugin( plugin, pluginArtifact, project, localRepository );
+        // TODO When/if we go to project-level plugin instances (like for plugin-level deps in the 
+        // POM), we need to undo this somehow.
+        ClassRealm pluginRealm = container.getComponentRealm( projectPlugin.getKey() );
+        
+        if ( pluginRealm != null && pluginRealm != container.getContainerRealm() )
+        {
+            getLogger().debug( "Realm already exists for: " + projectPlugin.getKey() + ". Skipping addition..." );
+            // we've already discovered this plugin, and configured it, so skip it this time.
+            return;
+        }
+        getLogger().debug( "Looking for plugin realm: " + plugin + " using: " + pluginCollector );
+        
