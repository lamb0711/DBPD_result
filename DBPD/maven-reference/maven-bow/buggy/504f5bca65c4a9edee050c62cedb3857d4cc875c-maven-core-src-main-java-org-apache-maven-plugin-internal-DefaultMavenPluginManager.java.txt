[MNG-4186] Provide an exact pointer to documentation specific to each known exception that can occur

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@827792 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayOutputStream;
+import java.io.PrintStream;
-import org.apache.maven.plugin.PluginManagerException;
-        throws PluginResolutionException, PluginManagerException
+        throws PluginResolutionException, PluginContainerException
-                                  List<String> imports )
-        throws PluginResolutionException, PluginManagerException
+                                    List<String> imports )
+        throws PluginResolutionException, PluginContainerException
-            throw new PluginManagerException( plugin, "Error in component graph of plugin " + plugin.getId() + ": "
-                + e.getMessage(), e );
+            throw new PluginContainerException( plugin, pluginRealm, "Error in component graph of plugin "
+                + plugin.getId() + ": " + e.getMessage(), e );
-            throw new PluginManagerException( plugin, "Error in component graph of plugin " + plugin.getId() + ": "
-                + e.getMessage(), e );
+            throw new PluginContainerException( plugin, pluginRealm, "Error in component graph of plugin "
+                + plugin.getId() + ": " + e.getMessage(), e );
-                    throw new PluginContainerException( mojoDescriptor, pluginRealm, "Unable to load the mojo '"
-                        + mojoDescriptor.getGoal() + "' in the plugin '" + pluginDescriptor.getId()
-                        + "'. A required class is missing: " + cause.getMessage(), e );
+                    ByteArrayOutputStream os = new ByteArrayOutputStream( 1024 );
+                    PrintStream ps = new PrintStream( os );
+                    ps.println( "Unable to load the mojo '" + mojoDescriptor.getGoal() + "' in the plugin '"
+                        + pluginDescriptor.getId() + "'. A required class is missing: " + cause.getMessage() );
+                    pluginRealm.display( ps );
+
+                    throw new PluginContainerException( mojoDescriptor, pluginRealm, os.toString(), cause );
+                }
+                else if ( cause instanceof LinkageError )
+                {
+                    ByteArrayOutputStream os = new ByteArrayOutputStream( 1024 );
+                    PrintStream ps = new PrintStream( os );
+                    ps.println( "Unable to load the mojo '" + mojoDescriptor.getGoal() + "' in the plugin '"
+                        + pluginDescriptor.getId() + "' due to an API incompatibility: " + e.getClass().getName()
+                        + ": " + cause.getMessage() );
+                    pluginRealm.display( ps );
+
+                    throw new PluginContainerException( mojoDescriptor, pluginRealm, os.toString(), cause );
-                throw new PluginContainerException( mojoDescriptor, pluginRealm, "Unable to find the mojo '"
-                    + mojoDescriptor.getGoal() + "' (or one of its required components) in the plugin '"
+                throw new PluginContainerException( mojoDescriptor, pluginRealm, "Unable to load the mojo '"
+                    + mojoDescriptor.getGoal() + "' (or one of its required components) from the plugin '"
-            throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(),
-                                                    "A required class was missing during configuration of mojo "
-                                                        + mojoDescriptor.getId() + ": " + e.getMessage(), e );
+            ByteArrayOutputStream os = new ByteArrayOutputStream( 1024 );
+            PrintStream ps = new PrintStream( os );
+            ps.println( "A required class was missing during configuration of mojo " + mojoDescriptor.getId() + ": "
+                + e.getMessage() );
+            pluginRealm.display( ps );
+
+            throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(), os.toString(), e );
-            if ( logger.isFatalErrorEnabled() )
-            {
-                logger.fatalError( configurator.getClass().getName()
-                    + "#configureComponent(...) caused a linkage error (" + e.getClass().getName()
-                    + ") and may be out-of-date. Check the realms:" );
+            ByteArrayOutputStream os = new ByteArrayOutputStream( 1024 );
+            PrintStream ps = new PrintStream( os );
+            ps.println( "An API incompatibility was encountered during configuration of mojo " + mojoDescriptor.getId()
+                + ": " + e.getClass().getName() + ": " + e.getMessage() );
+            pluginRealm.display( ps );
-                StringBuilder sb = new StringBuilder();
-                sb.append( "Plugin realm = " + pluginRealm.getId() ).append( '\n' );
-                for ( int i = 0; i < pluginRealm.getURLs().length; i++ )
-                {
-                    sb.append( "urls[" + i + "] = " + pluginRealm.getURLs()[i] );
-                    if ( i != ( pluginRealm.getURLs().length - 1 ) )
-                    {
-                        sb.append( '\n' );
-                    }
-                }
-                logger.fatalError( sb.toString() );
-
-                ClassRealm containerRealm = container.getContainerRealm();
-                sb = new StringBuilder();
-                sb.append( "Container realm = " + containerRealm.getId() ).append( '\n' );
-                for ( int i = 0; i < containerRealm.getURLs().length; i++ )
-                {
-                    sb.append( "urls[" + i + "] = " + containerRealm.getURLs()[i] );
-                    if ( i != ( containerRealm.getURLs().length - 1 ) )
-                    {
-                        sb.append( '\n' );
-                    }
-                }
-                logger.fatalError( sb.toString() );
-            }
-
-            throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(), e.getClass().getName() + ": "
-                + e.getMessage(), new ComponentConfigurationException( e ) );
+            throw new PluginConfigurationException( mojoDescriptor.getPluginDescriptor(), os.toString(), e );
