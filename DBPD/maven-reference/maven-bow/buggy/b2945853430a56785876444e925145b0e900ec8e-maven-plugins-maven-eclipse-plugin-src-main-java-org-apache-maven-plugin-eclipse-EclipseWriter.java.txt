o Project references are now written to .project, so that eclipse
  can calculate the build order - no more rebuilds needed to fix this!

o Added a switch -Declipse.workpace=/path/to/workspace that allows for the
  .classpath and .project files to be written to a new directory:
  - For each project a new directory is created.
  - Eclipse 'Links' are created to the original project location for the
    sources and resources directories.
  - The target directory will be in the new workspace location, not in
    the original project tree.
  
  This offers the following advantages:
  
  - Project trees that normally couldn't be imported into eclipse
  because of the overlap error now can be imported succesfully
  (m2 works now!)

  - Projects that reside on a ClearCase SMB mounted drive (which are
  very slow) can now have a target directory on a local drive without
  modifying the pom, greatly improving build speed in eclipse.

o Fixed some minor bugs where the wrong project instance was used.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@226669 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.logging.Log;
+import java.util.ArrayList;
+ * @author <a href="mailto:kenney@neonics.com">Kenney Westerhof</a>
+    private Log log;
+    
-
+    
+    
+    public void setLog(Log log)
+    {
+        this.log = log;
+    }
-    public void write( MavenProject project, MavenProject executedProject, List reactorProjects )
+    public void write( File outputDir, MavenProject project, MavenProject executedProject, List reactorProjects )
-        File basedir = project.getFile().getParentFile();
-
+        
+        File projectBaseDir = project.getFile().getParentFile();
-        writeEclipseProject( basedir, project, map );
+        List referencedProjects = writeEclipseClasspath( projectBaseDir, outputDir, project, executedProject, map, reactorProjects );
+        
+        writeEclipseProject( projectBaseDir, outputDir, project, executedProject, referencedProjects, map );
-        writeEclipseClasspath( basedir, project, executedProject, map, reactorProjects );
-
-        System.out.println( "Wrote Eclipse project for " + project.getArtifactId() + " to " + basedir.getAbsolutePath() );
+        log.info( "Wrote Eclipse project for " + project.getArtifactId() + " to " + outputDir.getAbsolutePath() );
-    protected void writeEclipseProject( File basedir, MavenProject project, Map map )
+    protected void writeEclipseProject( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, List referencedProjects, Map map )
-        // TODO: Add project dependencies here
-        // Should look in the reactor for other projects
-
+        for ( Iterator it = referencedProjects.iterator(); it.hasNext(); )
+        {
+            writer.startElement( "project" );
+            
+            writer.writeText( ( (MavenProject) it.next() ).getArtifactId() );
+            
+            writer.endElement();
+        }
+        
+
+        if ( ! projectBaseDir.equals( basedir ) )
+        {
+            writer.startElement( "linkedResources" );
+
+            addSourceLinks( writer, projectBaseDir, basedir, executedProject.getCompileSourceRoots() );
+
+            addResourceLinks( writer, projectBaseDir, basedir, executedProject.getBuild().getResources() );
+
+            addSourceLinks( writer, projectBaseDir, basedir, executedProject.getTestCompileSourceRoots() );
+
+            addResourceLinks( writer, projectBaseDir, basedir, executedProject.getBuild().getTestResources() );
+
+            writer.endElement(); // linedResources
+        }
+
-    protected void writeEclipseClasspath( File basedir, MavenProject project, MavenProject executedProject, Map map, List reactorProjects )
+    protected List writeEclipseClasspath( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, Map map, List reactorProjects )
-        addSourceRoots( writer, project.getBasedir(),
+        addSourceRoots( writer, projectBaseDir, basedir,
-        addResources( writer, project.getBasedir(),
+        addResources( writer, projectBaseDir, basedir,
-        addSourceRoots( writer, project.getBasedir(),
+        addSourceRoots( writer, projectBaseDir, basedir,
-        addResources( writer, project.getBasedir(),
+        addResources( writer, projectBaseDir, basedir,
-        writer.addAttribute( "path", toRelative( basedir, project.getBuild().getOutputDirectory() ) );
+        writer.addAttribute( "path", toRelative( projectBaseDir, project.getBuild().getOutputDirectory() ) );
+        
+        List referencedProjects = new ArrayList();
-            addDependency( writer, artifact, reactorProjects );
+            MavenProject refProject = addDependency( writer, artifact, reactorProjects );
+            
+            if ( refProject != null )
+            {
+                referencedProjects.add( refProject );
+            }
+        
+        return referencedProjects;
-    private void addSourceRoots( XMLWriter writer, File basedir, List sourceRoots, String output )
+    private void addSourceRoots( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots, String output )
-                writer.addAttribute( "path", toRelative( basedir, sourceRoot ) );
+                sourceRoot = toRelative( projectBaseDir, sourceRoot );
+                if (!projectBaseDir.equals(basedir))
+                    sourceRoot = sourceRoot.replaceAll("/", "-");
+                
+                writer.addAttribute( "path", sourceRoot );
-                    writer.addAttribute( "output", toRelative( basedir, output ) );
+                    writer.addAttribute( "output", toRelative( projectBaseDir, output ) );
-    private void addResources( XMLWriter writer, File basedir, List resources, String output )
+    private void addResources( XMLWriter writer, File projectBaseDir, File basedir, List resources, String output )
-                System.err.println( "This plugin currently doesn't support include patterns for resources. Adding the entire directory." );
+                log.warn( "This plugin currently doesn't support include patterns for resources. Adding the entire directory." );
-                System.err.println( "This plugin currently doesn't support exclude patterns for resources. Adding the entire directory." );
+                log.warn( "This plugin currently doesn't support exclude patterns for resources. Adding the entire directory." );
-                System.err.println( "This plugin currently doesn't support target paths for resources." );
+                log.error( "This plugin currently doesn't support target paths for resources." );
-            writer.addAttribute( "path", toRelative( basedir, resource.getDirectory() ) );
+            String resourceDir = resource.getDirectory();
+            resourceDir = toRelative( projectBaseDir, resourceDir );
+            if (!projectBaseDir.equals(basedir))
+                resourceDir = resourceDir.replaceAll("/", "-");
+            
+            writer.addAttribute( "path", resourceDir );
-                writer.addAttribute( "output", toRelative( basedir, output ) );
+                writer.addAttribute( "output", toRelative( projectBaseDir, output ) );
-    private void addDependency( XMLWriter writer, Artifact artifact, List reactorProjects )
+    private void addSourceLinks( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots )
-        String path = getProjectPath( reactorProjects, artifact );
-        
-        String kind = path == null ? "var" : "src";
+        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )
+        {
+            String sourceRoot = (String) it.next();
+
+            if ( new File( sourceRoot ).isDirectory() )
+            {
+                writer.startElement( "link" );
+
+                writer.startElement( "name" );
+
+                writer.writeText( toRelative( projectBaseDir, sourceRoot ).replaceAll("/", "-") );
-        // fall-through when no local project could be found in the reactor
-        if ( path == null )
+                writer.endElement(); // name
+
+                writer.startElement( "type" );
+
+                writer.writeText( "2" );
+
+                writer.endElement(); // type
+
+                writer.startElement( "location" );
+
+                writer.writeText( sourceRoot );
+
+                writer.endElement(); // location
+
+                writer.endElement(); // link
+            }
+        }
+    }
+
+    private void addResourceLinks( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots )
+    {
+        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )
+        {
+            String resourceDir = ((Resource) it.next() ).getDirectory();
+
+            if ( new File( resourceDir ).isDirectory() )
+            {
+                writer.startElement( "link" );
+
+                writer.startElement( "name" );
+
+                writer.writeText( toRelative( projectBaseDir, resourceDir ).replaceAll("/", "-") );
+
+                writer.endElement(); // name
+
+                writer.startElement( "type" );
+
+                writer.writeText( "2" );
+
+                writer.endElement(); // type
+
+                writer.startElement( "location" );
+
+                writer.writeText( resourceDir );
+
+                writer.endElement(); // location
+
+                writer.endElement(); // link
+            }
+        }
+    }
+    
+    /**
+     * 
+     * @param writer
+     * @param artifact
+     * @param reactorProjects
+     * @return null or the reactorProject providing this dependency
+     */
+    private MavenProject addDependency( XMLWriter writer, Artifact artifact, List reactorProjects )
+    {
+        MavenProject reactorProject = findReactorProject( reactorProjects, artifact );
+
+        String path = null;
+        
+        String kind = null;
+        
+
+        if (reactorProject != null)
+        {
+            path = "/" + reactorProject.getArtifactId();
+            
+            kind = "src";
+        }
+        else
-                System.err.println( "The artifacts path was null. Artifact id: " + artifact.getId() );
+                log.error( "The artifacts path was null. Artifact id: " + artifact.getId() );
-                return;
+                return null;
+            
+            kind = "var";
+        
+        return reactorProject;
-    private String getProjectPath( List reactorProjects, Artifact artifact )
+    /**
+     * Utility method that locates a project producing the given artifact.
+     * 
+     * @param reactorProjects a list of projects to search.
+     * @param artifact the artifact a project should produce.
+     * @return null or the first project found producing the artifact.
+     */
+    private static MavenProject findReactorProject( List reactorProjects, Artifact artifact )
-                return "/" + project.getArtifactId();
+                return project;
