- allow multiple versions of a plugin to operate concurrently.
- allow specification of a mojo as groupId:artifactId:version:goal
- general removal of more hard coding

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168543 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.dag.CycleDetectedException;
-    protected Map mojoDescriptors;
-        mojoDescriptors = new HashMap();
-
-    /**
-     * Mojo descriptors are looked up using their id which is of the form
-     * <pluginId>: <mojoId>. So this might be archetype:create for example which
-     * is the create mojo that resides in the archetype plugin.
-     *
-     * @param name
-     * @return
-     * @todo remove
-     */
-    public MojoDescriptor getMojoDescriptor( String name )
+    private PluginDescriptor getPluginDescriptor( String groupId, String artifactId, String version )
-        return (MojoDescriptor) mojoDescriptors.get( name );
-    }
-
-    public PluginDescriptor getPluginDescriptor( String groupId, String artifactId )
-    {
-        return (PluginDescriptor) pluginDescriptors.get( PluginDescriptor.constructPluginKey( groupId, artifactId ) );
+        return (PluginDescriptor) pluginDescriptors.get(
+            PluginDescriptor.constructPluginKey( groupId, artifactId, version ) );
-    public void processPluginDescriptor( PluginDescriptor pluginDescriptor )
-        throws CycleDetectedException
-    {
-        String key = pluginDescriptor.getId();
-
-        if ( pluginsInProcess.contains( key ) )
-        {
-            return;
-        }
-
-        pluginsInProcess.add( key );
-
-        for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
-        {
-            MojoDescriptor mojoDescriptor = (MojoDescriptor) it.next();
-
-            mojoDescriptors.put( mojoDescriptor.getFullGoalName(), mojoDescriptor );
-        }
-
-        pluginDescriptors.put( key, pluginDescriptor );
-    }
-
-        if ( !( componentSetDescriptor instanceof PluginDescriptor ) )
+        if ( componentSetDescriptor instanceof PluginDescriptor )
-            return;
-        }
+            PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;
-        PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;
+            if ( pluginDescriptor.getVersion() == null )
+            {
+                // TODO: temporary - until we're done testing that version is always written
+                throw new NullPointerException(
+                    "Version was null - check your plugin '" + pluginDescriptor.getId() +
+                    "' was built with Maven 2.0 Alpha 2" );
+            }
-        try
-        {
-            processPluginDescriptor( pluginDescriptor );
-        }
-        catch ( CycleDetectedException e )
-        {
-            getLogger().error( "A cycle was detected in the goal graph: ", e );
+            String key = pluginDescriptor.getId();
+
+            if ( !pluginsInProcess.contains( key ) )
+            {
+                pluginsInProcess.add( key );
+
+                pluginDescriptors.put( key, pluginDescriptor );
+            }
-    private boolean isPluginInstalled( String groupId, String artifactId )
+    private boolean isPluginInstalled( String groupId, String artifactId, String version )
-        return pluginDescriptors.containsKey( PluginDescriptor.constructPluginKey( groupId, artifactId ) );
+        return pluginDescriptors.containsKey( PluginDescriptor.constructPluginKey( groupId, artifactId, version ) );
-    public void verifyPlugin( String groupId, String artifactId, MavenSession session )
+    public PluginDescriptor verifyPlugin( String groupId, String artifactId, String version, MavenSession session )
-        // TODO: we should we support concurrent versions
-        if ( !isPluginInstalled( groupId, artifactId ) )
+        // TODO: this should be possibly outside
+        if ( version == null )
-            String version = null;
-
+        }
+        if ( !isPluginInstalled( groupId, artifactId, version ) )
+        {
+        return getPluginDescriptor( groupId, artifactId, version );
-            getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value + " for parameter: \'" + key + "\'" );
+            getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value +
+                               " for parameter: \'" + key + "\'" );
