[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-import org.apache.maven.artifact.repository.RepositoryRequest;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.repository.LocalRepository;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.repository.WorkspaceRepository;
-    public Key createKey( Plugin plugin, RepositoryRequest repositoryRequest )
+    public Key createKey( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
-        return new CacheKey( plugin, repositoryRequest );
-    }
-
-    public void put( Key cacheKey, PluginDescriptor pluginDescriptor )
-    {
-        descriptors.put( cacheKey, clone( pluginDescriptor ) );
+        return new CacheKey( plugin, repositories, session );
+    public void put( Key cacheKey, PluginDescriptor pluginDescriptor )
+    {
+        descriptors.put( cacheKey, clone( pluginDescriptor ) );
+    }
+
-        private final List<ArtifactRepository> repositories;
+        private final WorkspaceRepository workspace;
+
+        private final LocalRepository localRepo;
+
+        private final List<RemoteRepository> repositories;
-        public CacheKey( Plugin plugin, RepositoryRequest repositoryRequest )
+        public CacheKey( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
-            repositories = new ArrayList<ArtifactRepository>( repositoryRequest.getRemoteRepositories().size() + 1 );
-            repositories.add( repositoryRequest.getLocalRepository() );
-            repositories.addAll( repositoryRequest.getRemoteRepositories() );
+            workspace = CacheUtils.getWorkspace( session );
+            localRepo = session.getLocalRepository();
+            this.repositories = new ArrayList<RemoteRepository>( repositories.size() );
+            for ( RemoteRepository repository : repositories )
+            {
+                if ( repository.isRepositoryManager() )
+                {
+                    this.repositories.addAll( repository.getMirroredRepositories() );
+                }
+                else
+                {
+                    this.repositories.add( repository );
+                }
+            }
-            hash = hash * 31 + repositoriesHashCode( repositories );
+            hash = hash * 31 + hash( workspace );
+            hash = hash * 31 + localRepo.hashCode();
+            hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
-            return this.artifactId.equals( that.artifactId ) && this.groupId.equals( that.groupId )
-                && this.version.equals( that.version ) && repositoriesEquals( this.repositories, that.repositories );
+            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
+                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
+                && eq( this.workspace, that.workspace )
+                && CacheUtils.repositoriesEquals( this.repositories, that.repositories );
-        private static int repositoryHashCode( ArtifactRepository repository )
+        private static int hash( Object obj )
-            int result = 17;
-            result = 31 * result + ( repository.getId() != null ? repository.getId().hashCode() : 0 );
-            return result;
-        }
-
-        private static int repositoriesHashCode( List<ArtifactRepository> repositories )
-        {
-            int result = 17;
-            for ( ArtifactRepository repository : repositories )
-            {
-                result = 31 * result + repositoryHashCode( repository );
-            }
-            return result;
-        }
-
-        private static boolean repositoryEquals( ArtifactRepository r1, ArtifactRepository r2 )
-        {
-            if ( r1 == r2 )
-            {
-                return true;
-            }
-
-            return eq( r1.getId(), r2.getId() ) && eq( r1.getUrl(), r2.getUrl() )
-                && repositoryPolicyEquals( r1.getReleases(), r2.getReleases() )
-                && repositoryPolicyEquals( r1.getSnapshots(), r2.getSnapshots() );
-        }
-
-        private static boolean repositoryPolicyEquals( ArtifactRepositoryPolicy p1, ArtifactRepositoryPolicy p2 )
-        {
-            if ( p1 == p2 )
-            {
-                return true;
-            }
-
-            return p1.isEnabled() == p2.isEnabled() && eq( p1.getUpdatePolicy(), p2.getUpdatePolicy() );
-        }
-
-        private static boolean repositoriesEquals( List<ArtifactRepository> r1, List<ArtifactRepository> r2 )
-        {
-            if ( r1.size() != r2.size() )
-            {
-                return false;
-            }
-
-            for ( Iterator<ArtifactRepository> it1 = r1.iterator(), it2 = r2.iterator(); it1.hasNext(); )
-            {
-                if ( !repositoryEquals( it1.next(), it2.next() ) )
-                {
-                    return false;
-                }
-            }
-
-            return true;
+            return obj != null ? obj.hashCode() : 0;
