o Generified model/project

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@744572 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Profile;
+import org.apache.maven.model.Repository;
-    private Set artifacts;
+    private Set<Artifact> artifacts;
-    private List collectedProjects = Collections.EMPTY_LIST;
+    private List<MavenProject> collectedProjects = Collections.emptyList();
-    private List compileSourceRoots = new ArrayList();
+    private List<String> compileSourceRoots = new ArrayList<String>();
-    private List testCompileSourceRoots = new ArrayList();
+    private List<String> testCompileSourceRoots = new ArrayList<String>();
-    private List scriptSourceRoots = new ArrayList();
+    private List<String> scriptSourceRoots = new ArrayList<String>();
-    private List pluginArtifactRepositories;
+    private List<ArtifactRepository> pluginArtifactRepositories;
-    private List activeProfiles = new ArrayList();
+    private List<Profile> activeProfiles = new ArrayList<Profile>();
-    private Set dependencyArtifacts;
+    private Set<Artifact> dependencyArtifacts;
-    private Map artifactMap;
+    private Map<String, Artifact> artifactMap;
-    private Map pluginArtifactMap;
+    private Map<String, Artifact> pluginArtifactMap;
-    private Set reportArtifacts;
+    private Set<Artifact> reportArtifacts;
-    private Map reportArtifactMap;
+    private Map<String, Artifact> reportArtifactMap;
-    private Set extensionArtifacts;
+    private Set<Artifact> extensionArtifacts;
-    private Map extensionArtifactMap;
+    private Map<String, Artifact> extensionArtifactMap;
-    private Map managedVersionMap;
+    private Map<String, Artifact> managedVersionMap;
-    private Map projectReferences = new HashMap();
+    private Map<String, MavenProject> projectReferences = new HashMap<String, MavenProject>();
-    private Map moduleAdjustments;
+    private Map<String, String> moduleAdjustments;
-    private Stack previousExecutionProjects = new Stack();
+    private Stack<MavenProject> previousExecutionProjects = new Stack<MavenProject>();
-            LinkedHashSet repoSet = new LinkedHashSet();
+            Set<Repository> repoSet = new LinkedHashSet<Repository>();
-            setRemoteArtifactRepositories( mavenTools.buildArtifactRepositories( new ArrayList( repoSet ) ) );
+            setRemoteArtifactRepositories( mavenTools.buildArtifactRepositories( new ArrayList<Repository>( repoSet ) ) );
-            moduleAdjustments = new HashMap();
+            moduleAdjustments = new HashMap<String, String>();
-            List modules = getModules();
+            List<String> modules = getModules();
-                for ( Iterator it = modules.iterator(); it.hasNext(); )
+                for ( Iterator<String> it = modules.iterator(); it.hasNext(); )
-    public void setRemoteArtifactRepositories( List remoteArtifactRepositories )
+    public void setRemoteArtifactRepositories( List<ArtifactRepository> remoteArtifactRepositories )
-    public void setDependencies( List dependencies )
+    public void setDependencies( List<Dependency> dependencies )
-    public List getDependencies()
+    public List<Dependency> getDependencies()
-    public List getCompileSourceRoots()
+    public List<String> getCompileSourceRoots()
-    public List getScriptSourceRoots()
+    public List<String> getScriptSourceRoots()
-    public List getTestCompileSourceRoots()
+    public List<String> getTestCompileSourceRoots()
-    public List getCompileClasspathElements()
+    public List<String> getCompileClasspathElements()
-        List list = new ArrayList( getArtifacts().size() );
+        List<String> list = new ArrayList<String>( getArtifacts().size() + 1 );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getCompileArtifacts()
+    public List<Artifact> getCompileArtifacts()
-        List list = new ArrayList( getArtifacts().size() );
+        List<Artifact> list = new ArrayList<Artifact>( getArtifacts().size() );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getCompileDependencies()
+    public List<Dependency> getCompileDependencies()
-        Set artifacts = getArtifacts();
+        Set<Artifact> artifacts = getArtifacts();
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
-        List list = new ArrayList( artifacts.size() );
+        List<Dependency> list = new ArrayList<Dependency>( artifacts.size() );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getTestClasspathElements()
+    public List<String> getTestClasspathElements()
-        List list = new ArrayList( getArtifacts().size() + 2 );
+        List<String> list = new ArrayList<String>( getArtifacts().size() + 2 );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getTestArtifacts()
+    public List<Artifact> getTestArtifacts()
-        List list = new ArrayList( getArtifacts().size() );
+        List<Artifact> list = new ArrayList<Artifact>( getArtifacts().size() );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getTestDependencies()
+    public List<Dependency> getTestDependencies()
-        Set artifacts = getArtifacts();
+        Set<Artifact> artifacts = getArtifacts();
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
-        List list = new ArrayList( artifacts.size() );
+        List<Dependency> list = new ArrayList<Dependency>( artifacts.size() );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getRuntimeClasspathElements()
+    public List<String> getRuntimeClasspathElements()
-        List list = new ArrayList( getArtifacts().size() + 1 );
+        List<String> list = new ArrayList<String>( getArtifacts().size() + 1 );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getRuntimeArtifacts()
+    public List<Artifact> getRuntimeArtifacts()
-        List list = new ArrayList( getArtifacts().size() );
+        List<Artifact> list = new ArrayList<Artifact>( getArtifacts().size() );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getRuntimeDependencies()
+    public List<Dependency> getRuntimeDependencies()
-        Set artifacts = getArtifacts();
+        Set<Artifact> artifacts = getArtifacts();
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
-        List list = new ArrayList( artifacts.size() );
+        List<Dependency> list = new ArrayList<Dependency>( artifacts.size() );
-        for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = artifacts.iterator(); i.hasNext(); )
-    public List getSystemClasspathElements()
+    public List<String> getSystemClasspathElements()
-        List list = new ArrayList( getArtifacts().size() );
+        List<String> list = new ArrayList<String>( getArtifacts().size() );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getSystemArtifacts()
+    public List<Artifact> getSystemArtifacts()
-        List list = new ArrayList( getArtifacts().size() );
+        List<Artifact> list = new ArrayList<Artifact>( getArtifacts().size() );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public List getSystemDependencies()
+    public List<Dependency> getSystemDependencies()
-        Set artifacts = getArtifacts();
+        Set<Artifact> artifacts = getArtifacts();
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
-        List list = new ArrayList( artifacts.size() );
+        List<Dependency> list = new ArrayList<Dependency>( artifacts.size() );
-        for ( Iterator i = getArtifacts().iterator(); i.hasNext(); )
+        for ( Iterator<Artifact> i = getArtifacts().iterator(); i.hasNext(); )
-    public void setMailingLists( List mailingLists )
+    public void setMailingLists( List<MailingList> mailingLists )
-    public List getMailingLists()
+    public List<MailingList> getMailingLists()
-    public void setDevelopers( List developers )
+    public void setDevelopers( List<Developer> developers )
-    public List getDevelopers()
+    public List<Developer> getDevelopers()
-    public void setContributors( List contributors )
+    public void setContributors( List<Contributor> contributors )
-    public List getContributors()
+    public List<Contributor> getContributors()
-    public List getResources()
+    public List<Resource> getResources()
-    public List getTestResources()
+    public List<Resource> getTestResources()
-    public void setLicenses( List licenses )
+    public void setLicenses( List<License> licenses )
-    public List getLicenses()
+    public List<License> getLicenses()
-    public void setArtifacts( Set artifacts )
+    public void setArtifacts( Set<Artifact> artifacts )
-    public Set getArtifacts()
+    public Set<Artifact> getArtifacts()
-        return artifacts == null ? Collections.EMPTY_SET : artifacts;
+        return artifacts == null ? Collections.<Artifact> emptySet() : artifacts;
-    public Map getArtifactMap()
+    public Map<String, Artifact> getArtifactMap()
-    public Set getPluginArtifacts()
+    public Set<Artifact> getPluginArtifacts()
-        pluginArtifacts = new HashSet();
+        pluginArtifacts = new HashSet<Artifact>();
-            List plugins = getBuildPlugins();
-            for ( Iterator i = plugins.iterator(); i.hasNext(); )
+            List<Plugin> plugins = getBuildPlugins();
+            for ( Iterator<Plugin> i = plugins.iterator(); i.hasNext(); )
-    public Map getPluginArtifactMap()
+    public Map<String, Artifact> getPluginArtifactMap()
-    public void setReportArtifacts( Set reportArtifacts )
+    public void setReportArtifacts( Set<Artifact> reportArtifacts )
-    public Set getReportArtifacts()
+    public Set<Artifact> getReportArtifacts()
-        reportArtifacts = new HashSet();
-        List reports = getReportPlugins();
+        reportArtifacts = new HashSet<Artifact>();
+        List<ReportPlugin> reports = getReportPlugins();
-            for ( Iterator i = reports.iterator(); i.hasNext(); )
+            for ( Iterator<ReportPlugin> i = reports.iterator(); i.hasNext(); )
-    public Map getReportArtifactMap()
+    public Map<String, Artifact> getReportArtifactMap()
-    public void setExtensionArtifacts( Set extensionArtifacts )
+    public void setExtensionArtifacts( Set<Artifact> extensionArtifacts )
-    public Set getExtensionArtifacts()
+    public Set<Artifact> getExtensionArtifacts()
-        extensionArtifacts = new HashSet();
-        List extensions = getBuildExtensions();
+        extensionArtifacts = new HashSet<Artifact>();
+        List<Extension> extensions = getBuildExtensions();
-            for ( Iterator i = extensions.iterator(); i.hasNext(); )
+            for ( Iterator<Extension> i = extensions.iterator(); i.hasNext(); )
-    public Map getExtensionArtifactMap()
+    public Map<String, Artifact> getExtensionArtifactMap()
-    public List getRepositories()
+    public List<Repository> getRepositories()
-    public List getReportPlugins()
+    public List<ReportPlugin> getReportPlugins()
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
-    public List getBuildPlugins()
+    public List<Plugin> getBuildPlugins()
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
-    public List getModules()
+    public List<String> getModules()
-            Map pmByKey = pm.getPluginsAsMap();
+            Map<String, Plugin> pmByKey = pm.getPluginsAsMap();
-    public List getCollectedProjects()
+    public List<MavenProject> getCollectedProjects()
-    public void setCollectedProjects( List collectedProjects )
+    public void setCollectedProjects( List<MavenProject> collectedProjects )
-    public void setPluginArtifactRepositories( List pluginArtifactRepositories )
+    public void setPluginArtifactRepositories( List<ArtifactRepository> pluginArtifactRepositories )
-    public List getPluginArtifactRepositories()
+    public List<ArtifactRepository> getPluginArtifactRepositories()
-    public List getPluginRepositories()
+    public List<Repository> getPluginRepositories()
-    public void setActiveProfiles( List activeProfiles )
+    public void setActiveProfiles( List<Profile> activeProfiles )
-    public List getActiveProfiles()
+    public List<Profile> getActiveProfiles()
-        List attachedArtifacts = getAttachedArtifacts();
+        List<Artifact> attachedArtifacts = getAttachedArtifacts();
-            for ( Iterator iterator = getReportPlugins().iterator(); iterator.hasNext(); )
+            for ( Iterator<ReportPlugin> iterator = getReportPlugins().iterator(); iterator.hasNext(); )
-    public Set getDependencyArtifacts()
+    public Set<Artifact> getDependencyArtifacts()
-    public void setDependencyArtifacts( Set dependencyArtifacts )
+    public void setDependencyArtifacts( Set<Artifact> dependencyArtifacts )
-    public void setManagedVersionMap( Map map )
+    public void setManagedVersionMap( Map<String, Artifact> map )
-    public Map getManagedVersionMap()
+    public Map<String, Artifact> getManagedVersionMap()
-        Map map = null;
+        Map<String, Artifact> map = null;
-            List deps;
+            List<Dependency> deps;
-                for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )
+                for ( Iterator<Dependency> i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )
-                            List exclusions = new ArrayList();
+                            List<String> exclusions = new ArrayList<String>();
-                            for ( Iterator j = d.getExclusions().iterator(); j.hasNext(); )
+                            for ( Iterator<Exclusion> j = d.getExclusions().iterator(); j.hasNext(); )
-                        map = Collections.EMPTY_MAP;
+                        map = Collections.emptyMap();
-                map = Collections.EMPTY_MAP;
+                map = Collections.emptyMap();
-    public List getBuildExtensions()
+    public List<Extension> getBuildExtensions()
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
-    public Set createArtifacts( ArtifactFactory artifactFactory, String inheritedScope,
+    public Set<Artifact> createArtifacts( ArtifactFactory artifactFactory, String inheritedScope,
-    public List getFilters()
+    public List<String> getFilters()
-    public Map getProjectReferences()
+    public Map<String, MavenProject> getProjectReferences()
-                Iterator itr = ref.getAttachedArtifacts().iterator();
+                Iterator<Artifact> itr = ref.getAttachedArtifacts().iterator();
-    protected void setAttachedArtifacts( List attachedArtifacts )
+    protected void setAttachedArtifacts( List<Artifact> attachedArtifacts )
-    protected void setCompileSourceRoots( List compileSourceRoots )
+    protected void setCompileSourceRoots( List<String> compileSourceRoots )
-    protected void setTestCompileSourceRoots( List testCompileSourceRoots )
+    protected void setTestCompileSourceRoots( List<String> testCompileSourceRoots )
-    protected void setScriptSourceRoots( List scriptSourceRoots )
+    protected void setScriptSourceRoots( List<String> scriptSourceRoots )
-            setAttachedArtifacts( new ArrayList( project.getAttachedArtifacts() ) );
+            setAttachedArtifacts( new ArrayList<Artifact>( project.getAttachedArtifacts() ) );
-            setCompileSourceRoots( ( new ArrayList( project.getCompileSourceRoots() ) ) );
+            setCompileSourceRoots( ( new ArrayList<String>( project.getCompileSourceRoots() ) ) );
-            setTestCompileSourceRoots( ( new ArrayList( project.getTestCompileSourceRoots() ) ) );
+            setTestCompileSourceRoots( ( new ArrayList<String>( project.getTestCompileSourceRoots() ) ) );
-            setScriptSourceRoots( ( new ArrayList( project.getScriptSourceRoots() ) ) );
+            setScriptSourceRoots( ( new ArrayList<String>( project.getScriptSourceRoots() ) ) );
-    private void addArtifactPath( Artifact a, List list )
+    private void addArtifactPath( Artifact a, List<String> list )
