[MNG-4298] Build MavenProject instances incrementally
Submitted by: Igor Fedorenko

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@803961 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.ArtifactUtils;
-        return build( pomFile, true, configuration, false );
+        return build( pomFile, true, configuration );
-    private ProjectBuildingResult build( File pomFile, boolean localProject, ProjectBuildingRequest configuration,
-                                         boolean resolveDependencies )
+    private ProjectBuildingResult build( File pomFile, boolean localProject, ProjectBuildingRequest configuration )
-        ModelBuildingRequest request = getModelBuildingRequest( configuration, null );
-
-        DefaultModelBuildingListener listener = new DefaultModelBuildingListener( projectBuildingHelper, configuration );
-        request.setModelBuildingListeners( Arrays.asList( listener ) );
-
-        if ( localProject )
-        {
-            request.setPomFile( pomFile );
-        }
-        else
-        {
-            request.setModelSource( new FileModelSource( pomFile ) );
-        }
-            ModelBuildingResult result;
-            try
-            {
-                result = modelBuilder.build( request );
-            }
-            catch ( ModelBuildingException e )
-            {
-                throw new ProjectBuildingException( e.getModelId(), "Encountered POM errors", pomFile, e );
-            }
+            MavenProject project = configuration.getProject();
-            Model model = result.getEffectiveModel();
+            List<ModelProblem> modelProblems = null;
-            if ( localProject && !result.getProblems().isEmpty() && logger.isWarnEnabled() )
+            if ( project == null )
-                logger.warn( "" );
-                logger.warn( "Some problems were encountered while building the effective model for " + model.getId() );
-
-                for ( ModelProblem problem : result.getProblems() )
+                ModelBuildingRequest request = getModelBuildingRequest( configuration, null );
+    
+                DefaultModelBuildingListener listener = new DefaultModelBuildingListener( projectBuildingHelper, configuration );
+                request.setModelBuildingListeners( Arrays.asList( listener ) );
+    
+                if ( localProject )
-                    logger.warn( problem.getMessage() );
+                    request.setPomFile( pomFile );
+                }
+                else
+                {
+                    request.setModelSource( new FileModelSource( pomFile ) );
+                }
+    
+                ModelBuildingResult result;
+                try
+                {
+                    result = modelBuilder.build( request );
+                }
+                catch ( ModelBuildingException e )
+                {
+                    throw new ProjectBuildingException( e.getModelId(), "Encountered POM errors", pomFile, e );
-                logger.warn( "" );
-                logger.warn( "It is highly recommended to fix these problems"
-                    + " because they threaten the stability of your build." );
-                logger.warn( "" );
-                logger.warn( "For this reason, future Maven versions will no"
-                    + " longer support building such malformed projects." );
-                logger.warn( "" );
+                modelProblems = result.getProblems();
+
+                Model model = result.getEffectiveModel();
+
+                if ( localProject && !result.getProblems().isEmpty() && logger.isWarnEnabled() )
+                {
+                    logger.warn( "" );
+                    logger.warn( "Some problems were encountered while building the effective model for " + model.getId() );
+    
+                    for ( ModelProblem problem : result.getProblems() )
+                    {
+                        logger.warn( problem.getMessage() );
+                    }
+    
+                    logger.warn( "" );
+                    logger.warn( "It is highly recommended to fix these problems"
+                        + " because they threaten the stability of your build." );
+                    logger.warn( "" );
+                    logger.warn( "For this reason, future Maven versions will no"
+                        + " longer support building such malformed projects." );
+                    logger.warn( "" );
+                }
+
+                project = toProject( result, configuration, listener );
-            MavenProject project = toProject( result, configuration, listener );
+            try
+            {
+                if ( configuration.isProcessPlugins() && configuration.isProcessPluginConfiguration() )
+                {
+                    RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();
+                    repositoryRequest.setLocalRepository( configuration.getLocalRepository() );
+                    repositoryRequest.setRemoteRepositories( project.getPluginArtifactRepositories() );
+                    repositoryRequest.setCache( configuration.getRepositoryCache() );
+                    repositoryRequest.setOffline( configuration.isOffline() );
+            
+                    lifecycle.populateDefaultConfigurationForPlugins( project.getModel().getBuild().getPlugins(), repositoryRequest );
+                }
+            }
+            catch ( LifecycleExecutionException e )
+            {
+                throw new ProjectBuildingException( project.getId(), e.getMessage(), e );
+            }
-            if ( resolveDependencies )
+            if ( configuration.isResolveDependencies() )
-            return new DefaultProjectBuildingResult( project, result.getProblems(), artifactResult );
+            return new DefaultProjectBuildingResult( project, modelProblems, artifactResult );
-        return build( artifact.getFile(), false, configuration, false );
+        return build( artifact.getFile(), false, configuration );
-    public ProjectBuildingResult buildProjectWithDependencies( File pomFile, ProjectBuildingRequest request )
-        throws ProjectBuildingException
-    {
-        return build( pomFile, true, request, true );
-    }
-
-        try
-        {
-            if ( configuration.isProcessPlugins() && configuration.isProcessPluginConfiguration() )
-            {
-                RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();
-                repositoryRequest.setLocalRepository( configuration.getLocalRepository() );
-                repositoryRequest.setRemoteRepositories( project.getPluginArtifactRepositories() );
-                repositoryRequest.setCache( configuration.getRepositoryCache() );
-                repositoryRequest.setOffline( configuration.isOffline() );
-
-                lifecycle.populateDefaultConfigurationForPlugins( model.getBuild().getPlugins(), repositoryRequest );
-            }
-        }
-        catch ( LifecycleExecutionException e )
-        {
-            throw new ProjectBuildingException( project.getId(), e.getMessage(), e );
-        }
-
-    private static String safeVersionlessKey( String groupId, String artifactId )
-    {
-        String gid = groupId;
-
-        if ( StringUtils.isEmpty( gid ) )
-        {
-            gid = "unknown";
-        }
-
-        String aid = artifactId;
-
-        if ( StringUtils.isEmpty( aid ) )
-        {
-            aid = "unknown";
-        }
-
-        return ArtifactUtils.versionlessKey( gid, aid );
-    }
-
