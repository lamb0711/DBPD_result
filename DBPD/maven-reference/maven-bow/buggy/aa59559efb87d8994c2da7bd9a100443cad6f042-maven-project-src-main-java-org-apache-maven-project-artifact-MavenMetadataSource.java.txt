PR: MNG-507
implement repository relocation of an artifact


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@220220 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Relocation;
+import org.codehaus.plexus.logging.AbstractLogEnabled;
+    extends AbstractLogEnabled
-    // TODO: Remove resolver from params list.
-    public MavenMetadataSource( MavenProjectBuilder projectBuilder, ArtifactFactory artifactFactory )
-    {
-        this.mavenProjectBuilder = projectBuilder;
-        this.artifactFactory = artifactFactory;
-    }
-
+    /**
+     * Retrieve the metadata for the project from the repository.
+     * Uses the ProjectBuilder, to enable post-processing and inheritance calculation before retrieving the
+     * associated artifacts.
+     *
+     * @todo this a very thin wrapper around a project builder - is it needed?
+     */
-        // TODO: only metadata is really needed - resolve as metadata
-        Artifact pomArtifact = artifactFactory.createProjectArtifact( artifact.getGroupId(), artifact.getArtifactId(),
-                                                                      artifact.getVersion(), artifact.getScope() );
-
-        // TODO: this a very thin wrapper around a project builder - is it needed?
+        MavenProject p;
-        // Use the ProjectBuilder, to enable post-processing and inheritance calculation before retrieving the
-        // associated artifacts.
+        Artifact pomArtifact;
+        boolean done = false;
+        do
+        {
+            // TODO: only metadata is really needed - resolve as metadata
+            pomArtifact = artifactFactory.createProjectArtifact( artifact.getGroupId(), artifact.getArtifactId(),
+                                                                 artifact.getVersion(), artifact.getScope() );
+
+            try
+            {
+                p = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories, localRepository );
+            }
+            catch ( ProjectBuildingException e )
+            {
+                throw new ArtifactMetadataRetrievalException( "Unable to read the metadata file", e );
+            }
+
+            Relocation relocation = null;
+
+            if ( p.getDistributionManagement() != null )
+            {
+                relocation = p.getDistributionManagement().getRelocation();
+            }
+            if ( relocation != null )
+            {
+                if ( relocation.getGroupId() != null )
+                {
+                    artifact.setGroupId( relocation.getGroupId() );
+                }
+                if ( relocation.getArtifactId() != null )
+                {
+                    artifact.setArtifactId( relocation.getArtifactId() );
+                }
+                if ( relocation.getVersion() != null )
+                {
+                    artifact.setVersion( relocation.getVersion() );
+                }
+
+                String message = pomArtifact + " has been relocated to " + artifact + ".\n";
+
+                if ( relocation.getMessage() != null )
+                {
+                    message += relocation.getMessage();
+                }
+
+//                getLogger().warn( message );
+            }
+            else
+            {
+                done = true;
+            }
+        }
+        while ( !done );
+
+        dependencies = p.getDependencies();
+        artifact.setDownloadUrl( pomArtifact.getDownloadUrl() );
+
-            MavenProject p = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories,
-                                                                      localRepository );
-            dependencies = p.getDependencies();
-            artifact.setDownloadUrl( pomArtifact.getDownloadUrl() );
-
-        catch ( ProjectBuildingException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Unable to read the metadata file", e );
-        }
