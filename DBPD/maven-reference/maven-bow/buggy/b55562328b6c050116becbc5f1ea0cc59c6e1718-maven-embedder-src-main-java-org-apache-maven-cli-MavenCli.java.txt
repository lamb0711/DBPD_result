o Enabled reuse of MavenCli for embedded execution during the ITs

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@823736 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.io.PrintStream;
-    
+
+    private DefaultPlexusContainer container;
+
+    private PrintStreamLogger logger;
+
-        ClassWorld classWorld = new ClassWorld( "plexus.core", Thread.currentThread().getContextClassLoader() );
-
-        int result = main( args, classWorld );
+        int result = main( args, null );
-        MavenCli cli = new MavenCli();
+        MavenCli cli = new MavenCli( classWorld );
-        return cli.doMain( args, classWorld );
+        return cli.doMain( args, null, System.out, System.err );
-    public int doMain( String[] args, ClassWorld classWorld )
+    public MavenCli()
+        this( null );
+    }
+
+    public MavenCli( ClassWorld classWorld )
+    {
+        if ( classWorld == null )
+        {
+            classWorld = new ClassWorld( "plexus.core", Thread.currentThread().getContextClassLoader() );
+        }
+
+        try
+        {
+            ContainerConfiguration cc =
+                new DefaultContainerConfiguration().setClassWorld( classWorld ).setName( "embedder" );
+
+            container = new DefaultPlexusContainer( cc );
+        }
+        catch ( PlexusContainerException e )
+        {
+            throw new IllegalStateException( "Could not start component container: " + e.getMessage(), e );
+        }
+
+        logger = new PrintStreamLogger( System.out );
+
+        container.setLoggerManager( new MavenLoggerManager( logger ) );
+    }
+
+    public int doMain( String[] args, String workingDirectory, PrintStream stdout, PrintStream stderr )
+    {
+        if ( stdout == null )
+        {
+            stdout = System.out;
+        }
+        if ( stderr == null )
+        {
+            stderr = System.err;
+        }
+        if ( workingDirectory == null )
+        {
+            workingDirectory = System.getProperty( "user.dir" );
+        }
+
-            System.err.println( "Unable to parse command line options: " + e.getMessage() );
-            cliManager.displayHelp();
+            stderr.println( "Unable to parse command line options: " + e.getMessage() );
+            cliManager.displayHelp( stdout );
-            cliManager.displayHelp();
+            cliManager.displayHelp( stdout );
-            CLIReportingUtils.showVersion();
+            CLIReportingUtils.showVersion( stdout );
+        PrintStream fileStream = null;
+
+        if ( commandLine.hasOption( CLIManager.LOG_FILE ) )
+        {
+            File logFile = new File( commandLine.getOptionValue( CLIManager.LOG_FILE ) );
+            logFile = CLIRequestUtils.resolveFile( logFile, workingDirectory );
+
+            try
+            {
+                fileStream = new PrintStream( logFile );
+                logger.setStream( fileStream );
+            }
+            catch ( FileNotFoundException e )
+            {
+                stderr.println( e );
+                logger.setStream( stdout );
+            }
+        }
+        else
+        {
+            logger.setStream( stdout );
+        }
+
-        DefaultPlexusContainer container;
-        
-        Logger logger;
-        
-            ContainerConfiguration cc = new DefaultContainerConfiguration()
-                .setClassWorld( classWorld )
-                .setName( "embedder" );
-
-            container = new DefaultPlexusContainer( cc );
-
-            logger = container.getLogger();
-
-            if ( commandLine.hasOption( CLIManager.LOG_FILE ) )
-            {
-                File logFile = new File( commandLine.getOptionValue( CLIManager.LOG_FILE ) ).getAbsoluteFile();
-
-                logger = new FileLogger( logFile );
-
-                container.setLoggerManager( new MavenLoggerManager( logger ) );
-            }
-            
-        catch ( PlexusContainerException e )
-        {
-            CLIReportingUtils.showError( new ConsoleLogger( Logger.LEVEL_ERROR, Maven.class.getName() ), "Unable to start the embedder: ", e, showErrors );
-
-            return 1;
-        }
-        Configuration configuration = buildEmbedderConfiguration( commandLine );        
+        Configuration configuration = buildEmbedderConfiguration( commandLine, workingDirectory );        
-        CLIRequestUtils.populateRequest( request, commandLine, debug, quiet, showErrors );
+        CLIRequestUtils.populateRequest( request, commandLine, workingDirectory, debug, quiet, showErrors );
-            CLIReportingUtils.showVersion();
+            CLIReportingUtils.showVersion( stdout );
-                System.out.println( cipher.encryptAndDecorate( passwd,
-                                                               DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
+                stdout.println( cipher.encryptAndDecorate( passwd, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
-                    System.err.println( "Master password is not set in the setting security file" );
+                    stderr.println( "Master password is not set in the setting security file" );
-                System.out.println( cipher.encryptAndDecorate( passwd, masterPasswd ) );
+                stdout.println( cipher.encryptAndDecorate( passwd, masterPasswd ) );
-            System.err.println( "FATAL ERROR: " + "Error encrypting password: " + e.getMessage() );
+            stderr.println( "FATAL ERROR: " + "Error encrypting password: " + e.getMessage() );
-        if ( result.hasExceptions() )
+        try
-            ExceptionSummary es = result.getExceptionSummary();
+            if ( result.hasExceptions() )
+            {
+                ExceptionSummary es = result.getExceptionSummary();
-            if ( es == null )
-            {
-                logger.error( "", result.getExceptions().get( 0 ) );
-            }
-            else
-            {
-                if ( showErrors )
+                if ( es == null )
-                    logger.error( es.getMessage(), es.getException() );
+                    logger.error( "", result.getExceptions().get( 0 ) );
-                    logger.error( es.getMessage() );
+                    if ( showErrors )
+                    {
+                        logger.error( es.getMessage(), es.getException() );
+                    }
+                    else
+                    {
+                        logger.error( es.getMessage() );
+                    }
-            }
-            if ( MavenExecutionRequest.REACTOR_FAIL_NEVER.equals( request.getReactorFailureBehavior() ) )
-            {
-                logger.info( "Build failures were ignored." );
+                if ( MavenExecutionRequest.REACTOR_FAIL_NEVER.equals( request.getReactorFailureBehavior() ) )
+                {
+                    logger.info( "Build failures were ignored." );
-                return 0;
+                    return 0;
+                }
+                else
+                {
+                    return 1;
+                }
-                return 1;
+                return 0;
-        else
+        finally
-            return 0;
+            if ( fileStream != null )
+            {
+                fileStream.close();
+            }
-    private Configuration buildEmbedderConfiguration( CommandLine commandLine )
+    private Configuration buildEmbedderConfiguration( CommandLine commandLine, String workingDirectory )
+            userSettingsFile = CLIRequestUtils.resolveFile( userSettingsFile, workingDirectory );
+            globalSettingsFile = CLIRequestUtils.resolveFile( globalSettingsFile, workingDirectory );
+
