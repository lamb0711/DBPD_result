All tests pass on my localhost...committing to see how it works on hudson.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@672782 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.project.interpolation.ModelInterpolationException;
-        else if ( projectPlugin.getVersion() == null || 
-                  Artifact.RELEASE_VERSION.equals(projectPlugin.getVersion()) || 
+        else if ( projectPlugin.getVersion() == null ||
+                  Artifact.RELEASE_VERSION.equals(projectPlugin.getVersion()) ||
-        List artifacts = getPluginArtifacts( pluginArtifact, projectPlugin, project,
-                                            session.getLocalRepository() );
+        Set<Artifact> artifactSet = getPluginArtifacts( pluginArtifact, projectPlugin, project, session.getLocalRepository() );
+
+        List<Artifact> artifacts = ( artifactSet == null || artifactSet.isEmpty() )
+                        ? new ArrayList<Artifact>() : new ArrayList<Artifact>( artifactSet );
-            List managedPluginArtifacts = realmManager.getPluginArtifacts( projectPlugin );
+            List<Artifact> managedPluginArtifacts = realmManager.getPluginArtifacts( projectPlugin );
-    private List getPluginArtifacts( Artifact pluginArtifact,
+    private Set<Artifact> getPluginArtifacts( Artifact pluginArtifact,
-        Set projectPluginDependencies;
+        Set<Artifact> projectPluginDependencies;
-        Set dependencies = new LinkedHashSet();
+        Set<Artifact> dependencies = new LinkedHashSet<Artifact>();
-        List resolved = new ArrayList( result.getArtifacts() );
+        Set<Artifact> resolved = new HashSet<Artifact>();
-        for ( Iterator it = resolved.iterator(); it.hasNext(); )
+        for ( Iterator<Artifact> it = result.getArtifacts().iterator(); it.hasNext(); )
-            Artifact artifact = (Artifact) it.next();
+            Artifact artifact = it.next();
+
+            resolved.add( artifact );
+        if ( !project.isConcrete() )
+        {
+            try
+            {
+                mavenProjectBuilder.calculateConcreteState( project, session.getProjectBuilderConfiguration() );
+            }
+            catch ( ModelInterpolationException e )
+            {
+                throw new PluginManagerException( mojoDescriptor, project, "Failed to calculate concrete state for project.", e );
+            }
+        }
+
+
+        try
+        {
+            mavenProjectBuilder.restoreDynamicState( project, session.getProjectBuilderConfiguration() );
+        }
+        catch ( ModelInterpolationException e )
+        {
+            throw new PluginManagerException( mojoDescriptor, project, "Failed to restore dynamic state for project.", e );
+        }
