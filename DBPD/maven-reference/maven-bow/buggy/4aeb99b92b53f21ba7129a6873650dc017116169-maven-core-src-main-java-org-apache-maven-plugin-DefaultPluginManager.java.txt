Plugins now load per-project, which means they can have different plugin-level dependencies and configurations per-project, even if they're running in the same reactor.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@586515 13f79535-47bb-0310-9956-ffa450edef68

-        // if we have a project session, it must mean we have extensions...
-        // which in turn may alter the execution of a plugin.
-        MavenProjectSession projectSession = session.getProjectSession( project );
-        if ( projectSession != null )
+        MavenProjectSession projectSession;
+        try
-            try
-            {
-                pluginRealm = projectSession.getPluginRealm( projectPlugin );
-            }
-            catch ( NoSuchRealmException e )
-            {
-                getLogger().debug( "Plugin realm is missing for: " + projectPlugin.getKey() + ". New realm will be created." );
-            }
+            projectSession = session.getProjectSession( project );
-        else
+        catch ( PlexusContainerException e )
-            pluginRealm = container.getComponentRealm( key );
+            throw new PluginManagerException( plugin, "Failed to create project-specific session for project: " + project.getId()
+                                                + ".", project, e );
+        }
+
+        try
+        {
+            pluginRealm = projectSession.getPluginRealm( projectPlugin );
+        }
+        catch ( NoSuchRealmException e )
+        {
+            getLogger().debug( "Plugin realm is missing for: " + projectPlugin.getKey() + ". New realm will be created." );
-                                               + ". Skipping addition..." );
+                                               + " (realm id: " + pluginRealm.getId() + "). Skipping addition..." );
-            if ( projectSession != null )
+            pluginRealm = projectSession.createPluginRealm( projectPlugin );
+
+            try
-                pluginRealm = projectSession.createPluginRealm( projectPlugin );
+                pluginRealm.addURL( pluginArtifact.getFile().toURI().toURL() );
+            }
+            catch ( MalformedURLException e )
+            {
+                throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + pluginArtifact.getId() + " as URL.", e );
+            }
+
+            for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+            {
+                Artifact artifact = (Artifact) i.next();
-                    pluginRealm.addURL( pluginArtifact.getFile().toURI().toURL() );
+                    getLogger().debug( "Adding: " + artifact.getId() + " to plugin class-realm: " + key + " in project-session: " + project.getId() );
+                    pluginRealm.addURL( artifact.getFile().toURI().toURL() );
-                    throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + pluginArtifact.getId() + " as URL.", e );
-                }
-
-                for ( Iterator i = artifacts.iterator(); i.hasNext(); )
-                {
-                    Artifact artifact = (Artifact) i.next();
-
-                    try
-                    {
-                        getLogger().debug( "Adding: " + artifact.getId() + " to plugin class-realm: " + key + " in project-session: " + project.getId() );
-                        pluginRealm.addURL( artifact.getFile().toURI().toURL() );
-                    }
-                    catch ( MalformedURLException e )
-                    {
-                        throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + artifact.getId() + " as URL.", e );
-                    }
-                }
-
-                try
-                {
-                    getLogger().debug( "Discovering components in realm: " + pluginRealm );
-                    container.discoverComponents( pluginRealm, false );
-                }
-                catch ( PlexusConfigurationException e )
-                {
-                    throw new PluginContainerException( plugin, pluginRealm, "Error re-scanning project realm for components.", e );
-                }
-                catch ( ComponentRepositoryException e )
-                {
-                    throw new PluginContainerException( plugin, pluginRealm, "Error re-scanning project realm for components.", e );
+                    throw new PluginContainerException( plugin, pluginRealm, "Error rendering plugin artifact: " + artifact.getId() + " as URL.", e );
-            else
+
+            try
-                List jars = new ArrayList();
-
-                for ( Iterator i = artifacts.iterator(); i.hasNext(); )
-                {
-                    Artifact artifact = (Artifact) i.next();
-
-                    jars.add( artifact.getFile() );
-                }
-
-                jars.add( pluginArtifact.getFile() );
-
-                // Now here we need the artifact coreArtifactFilter stuff
-                pluginRealm = container.createComponentRealm( key, jars );
+                getLogger().debug( "Discovering components in realm: " + pluginRealm );
+                container.discoverComponents( pluginRealm, false );
-
-        }
-        catch ( PlexusContainerException e )
-        {
-            throw new PluginContainerException( plugin, pluginRealm, "Failed to create realm for plugin '" + projectPlugin
-                                              + ".", e );
+            catch ( PlexusConfigurationException e )
+            {
+                throw new PluginContainerException( plugin, pluginRealm, "Error re-scanning project realm for components.", e );
+            }
+            catch ( ComponentRepositoryException e )
+            {
+                throw new PluginContainerException( plugin, pluginRealm, "Error re-scanning project realm for components.", e );
+            }
+        ClassRealm oldRealm = null;
+            getLogger().debug( "Setting lookup realm and context classloader for plugin to: " + pluginRealm.getId() + " (instance is: " + pluginRealm + ")" );
+
-            ClassRealm oldRealm = container.setLookupRealm( pluginRealm );
+            oldRealm = container.setLookupRealm( pluginRealm );
-            container.setLookupRealm( oldRealm );
-
+            if ( oldRealm != null )
+            {
+                container.setLookupRealm( oldRealm );
+            }
-        MavenProjectSession projectSession = session.getProjectSession( project );
-        if ( projectSession != null )
+        MavenProjectSession projectSession;
+        try
-            try
-            {
-                realm = projectSession.getPluginRealm( pluginDescriptor );
-            }
-            catch ( NoSuchRealmException e )
-            {
-                throw new PluginManagerException( mojoDescriptor, project, "Plugin realm: " + pluginDescriptor.getId() + " not found in project session for: " + project.getId(), e );
-            }
+            projectSession = session.getProjectSession( project );
-        else
+        catch ( PlexusContainerException e )
-            realm = mojoDescriptor.getPluginDescriptor().getClassRealm();
+            throw new PluginManagerException( mojoDescriptor, "Failed to create project-specific session for project: " + project.getId()
+                                                + ".", project, e );
+        }
+
+        try
+        {
+            realm = projectSession.getPluginRealm( pluginDescriptor );
+        }
+        catch ( NoSuchRealmException e )
+        {
+            getLogger().debug( "Plugin realm: " + pluginDescriptor.getId() + " not found in project session for: " + project.getId() + ". Using project realm instead." );
+            realm = projectSession.getProjectRealm();
-        if ( realm != null )
+        ClassRealm oldRealm = container.setLookupRealm( realm );
+
+        getLogger().debug(
+                           "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm "
+                                           + realm.getId() + " - descRealmId="
+                                           + mojoDescriptor.getRealmId() );
+
+        try
-            ClassRealm oldRealm = container.setLookupRealm( realm );
-
-            getLogger().debug(
-                               "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm "
-                                               + realm.getId() + " - descRealmId="
-                                               + mojoDescriptor.getRealmId() );
-
-            try
-            {
-                plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint(), realm );
-            }
-            catch ( ComponentLookupException e )
-            {
-                throw new PluginContainerException( mojoDescriptor, realm, "Unable to find the mojo '"
-                                                  + mojoDescriptor.getRoleHint() + "' in the plugin '"
-                                                  + pluginDescriptor.getPluginLookupKey() + "'", e );
-            }
-
-            if ( plugin != null )
-            {
-                getLogger().debug(
-                                   "Looked up - " + plugin + " - "
-                                                   + plugin.getClass().getClassLoader() );
-            }
-            else
-            {
-                getLogger().warn( "No luck." );
-            }
-
+            plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint(), realm );
+        }
+        catch ( ComponentLookupException e )
+        {
+            throw new PluginContainerException( mojoDescriptor, realm, "Unable to find the mojo '"
+                                              + mojoDescriptor.getRoleHint() + "' in the plugin '"
+                                              + pluginDescriptor.getPluginLookupKey() + "'", e );
+        }
+        finally
+        {
+
+        if ( plugin != null )
+        {
+            getLogger().debug(
+                               "Looked up - " + plugin + " - "
+                                               + plugin.getClass().getClassLoader() );
+        }
-            getLogger().info(
-                              "Looking up mojo " + mojoDescriptor.getRoleHint()
-                                              + " in default realm "
-                                              + container.getLookupRealm() + " - descRealmId="
-                                              + mojoDescriptor.getRealmId() );
-
-            try
-            {
-                plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
-            }
-            catch ( ComponentLookupException e )
-            {
-                throw new PluginContainerException( mojoDescriptor, container.getContainerRealm(), "Unable to find the mojo '"
-                                                  + mojoDescriptor.getRoleHint() + "' in the plugin '"
-                                                  + pluginDescriptor.getPluginLookupKey() + "' (using core class realm)", e );
-            }
-
-            if ( plugin != null )
-            {
-                getLogger().info(
-                                  "Looked up - " + plugin + " - "
-                                                  + plugin.getClass().getClassLoader() );
-            }
-            else
-            {
-                getLogger().warn( "No luck." );
-            }
-
+            getLogger().warn( "No luck." );
