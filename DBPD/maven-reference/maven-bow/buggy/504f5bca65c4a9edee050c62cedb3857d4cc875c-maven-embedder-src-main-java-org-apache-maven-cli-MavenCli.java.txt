[MNG-4186] Provide an exact pointer to documentation specific to each known exception that can occur

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@827792 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.apache.maven.exception.DefaultExceptionHandler;
+import org.apache.maven.exception.ExceptionHandler;
-import org.apache.maven.model.locator.ModelLocator;
-            if ( result.hasExceptions() )
-            {
-                ExceptionSummary es = result.getExceptionSummary();
-
-                if ( es == null )
-                {
-                    logger.error( "", result.getExceptions().get( 0 ) );
-                }
-                else
-                {
-                    if ( showErrors )
-                    {
-                        logger.error( es.getMessage(), es.getException() );
-                    }
-                    else
-                    {
-                        logger.error( es.getMessage() );
-                        logger.error( "To see the full stack trace of the error, re-run Maven with the -e switch." );
-                    }
-
-                    logger.error( "Re-run Maven using the -X switch to enable full debug logging." );
-
-                    if ( StringUtils.isNotEmpty( es.getReference() ) )
-                    {
-                        logger.error( "" );
-                        logger.error( "For more information about the error and possible solutions"
-                            + ", please try the following article:" );
-                        logger.error( "  " + es.getReference() );
-                    }
-                }
-
-                if ( MavenExecutionRequest.REACTOR_FAIL_NEVER.equals( request.getReactorFailureBehavior() ) )
-                {
-                    logger.info( "Build failures were ignored." );
-
-                    return 0;
-                }
-                else
-                {
-                    return 1;
-                }
-            }
-            else
-            {
-                return 0;
-            }
+            return processResult( request, result, showErrors );
+    private int processResult( MavenExecutionRequest request, MavenExecutionResult result, boolean showErrors )
+    {
+        if ( result.hasExceptions() )
+        {
+            ExceptionHandler handler = new DefaultExceptionHandler();
+
+            Map<String, String> references = new LinkedHashMap<String, String>();
+
+            for ( Throwable exception : result.getExceptions() )
+            {
+                ExceptionSummary summary = handler.handleException( exception );
+
+                logSummary( summary, references, "", showErrors );
+            }
+
+            logger.error( "" );
+
+            if ( !showErrors )
+            {
+                logger.error( "To see the full stack trace of the errors, re-run Maven with the -e switch." );
+            }
+            if ( !logger.isDebugEnabled() )
+            {
+                logger.error( "Re-run Maven using the -X switch to enable full debug logging." );
+            }
+
+            if ( !references.isEmpty() )
+            {
+                logger.error( "" );
+                logger.error( "For more information about the errors and possible solutions"
+                    + ", please read the following articles:" );
+
+                for ( Map.Entry<String, String> entry : references.entrySet() )
+                {
+                    logger.error( entry.getValue() + " " + entry.getKey() );
+                }
+            }
+
+            if ( MavenExecutionRequest.REACTOR_FAIL_NEVER.equals( request.getReactorFailureBehavior() ) )
+            {
+                logger.info( "Build failures were ignored." );
+
+                return 0;
+            }
+            else
+            {
+                return 1;
+            }
+        }
+        else
+        {
+            return 0;
+        }
+    }
+
+    private void logSummary( ExceptionSummary summary, Map<String, String> references, String indent, boolean showErrors )
+    {
+        String referenceKey = "";
+
+        if ( StringUtils.isNotEmpty( summary.getReference() ) )
+        {
+            referenceKey = references.get( summary.getReference() );
+            if ( referenceKey == null )
+            {
+                referenceKey = "[" + references.size() + "]";
+                references.put( summary.getReference(), referenceKey );
+            }
+        }
+
+        if ( showErrors )
+        {
+            logger.error( indent + referenceKey, summary.getException() );
+        }
+        else
+        {
+            logger.error( indent + summary.getMessage() + " " + referenceKey );
+        }
+
+        indent += "  ";
+
+        for ( ExceptionSummary child : summary.getChildren() )
+        {
+            logSummary( child, references, indent, showErrors );
+        }
+    }
+
