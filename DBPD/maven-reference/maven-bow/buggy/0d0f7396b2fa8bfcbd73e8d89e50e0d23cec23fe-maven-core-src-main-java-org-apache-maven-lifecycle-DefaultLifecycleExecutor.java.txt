Cleaning up exception wrapping to allow better reporting of errors to end users. Also implementing the beginnings of a new error reporter, and bumping the version of plexus-container-default up to 1.0-alpha-33-SNAPSHOT to improve the accessibility to ClassRealm info for ComponentLookupException.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@584343 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.AggregatedBuildFailureException;
+import org.apache.maven.NoGoalsSpecifiedException;
+import org.apache.maven.ProjectBuildFailureException;
-import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+     * @throws MojoFailureException
-            throw new BuildFailureException( "You must specify at least one goal. Try 'install'" );
+            throw new NoGoalsSpecifiedException( "You must specify at least one goal. Try 'install'" );
-                e.getMessage(),
+                "Plugin could not be not found while searching for artifact-type handlers.",
-                        executeGoalAndHandleFailures(
-                            binding,
-                            session,
-                            dispatcher,
-                            event,
-                            reactorManager,
-                            buildStartTime,
-                            target );
+                        try
+                        {
+                            executeGoalAndHandleFailures(
+                                binding,
+                                session,
+                                dispatcher,
+                                event,
+                                reactorManager,
+                                buildStartTime,
+                                target );
+                        }
+                        catch ( MojoFailureException e )
+                        {
+                            AggregatedBuildFailureException error = new AggregatedBuildFailureException(
+                                                                                                         session.getExecutionRootDirectory(),
+                                                                                                         binding,
+                                                                                                         e );
+
+                            dispatcher.dispatchError( event, target, error );
+
+                            if ( handleExecutionFailure( reactorManager, rootProject, error, binding, buildStartTime ) )
+                            {
+                                throw error;
+                            }
+                        }
-                            MojoBinding mojoBinding = (MojoBinding) mojoIterator.next();
+                            MojoBinding binding = (MojoBinding) mojoIterator.next();
-                                "Mojo: " + mojoBinding.getGoal() + " has config:\n"
-                                    + mojoBinding.getConfiguration() );
-                            executeGoalAndHandleFailures(
-                                mojoBinding,
-                                session,
-                                dispatcher,
-                                event,
-                                reactorManager,
-                                buildStartTime,
-                                target );
+                                "Mojo: " + binding.getGoal() + " has config:\n"
+                                    + binding.getConfiguration() );
+
+                            try
+                            {
+                                executeGoalAndHandleFailures( binding, session, dispatcher,
+                                                              event, reactorManager,
+                                                              buildStartTime, target );
+                            }
+                            catch ( MojoFailureException e )
+                            {
+                                ProjectBuildFailureException error = new ProjectBuildFailureException(
+                                                                                                       currentProject.getId(),
+                                                                                                       binding,
+                                                                                                       e );
+
+                                dispatcher.dispatchError( event, target, error );
+
+                                if ( handleExecutionFailure( reactorManager, currentProject, error, binding, buildStartTime ) )
+                                {
+                                    throw error;
+                                }
+                            }
-        throws BuildFailureException, LifecycleExecutionException
+        throws LifecycleExecutionException, MojoFailureException
-                catch ( MojoFailureException e )
-                {
-                    throw new BuildFailureException(
-                        e.getMessage(),
-                        e );
-                }
-            dispatcher.dispatchError(
-                event,
-                target,
-                e );
+            dispatcher.dispatchError( event, target, e );
-            if ( handleExecutionFailure(
-                rm,
-                project,
-                e,
-                mojoBinding,
-                buildStartTime ) )
-            {
-                throw e;
-            }
-        }
-        catch ( BuildFailureException e )
-        {
-            dispatcher.dispatchError(
-                event,
-                target,
-                e );
-
-            if ( handleExecutionFailure(
-                rm,
-                project,
-                e,
-                mojoBinding,
-                buildStartTime ) )
+            if ( handleExecutionFailure( rm, project, e, mojoBinding, buildStartTime ) )
+
-                MojoDescriptor mojo = null;
-                    mojo = getMojoDescriptorForDirectInvocation(
+                    getMojoDescriptorForDirectInvocation(
-        throws LifecycleExecutionException, BuildFailureException
-        catch ( InvalidVersionSpecificationException e )
-        {
-            throw new LifecycleExecutionException(
-                e.getMessage(),
-                e );
-        }
