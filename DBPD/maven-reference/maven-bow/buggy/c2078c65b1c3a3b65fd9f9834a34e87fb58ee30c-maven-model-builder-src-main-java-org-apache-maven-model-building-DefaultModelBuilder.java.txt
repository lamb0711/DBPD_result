o Enabled model cache

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@799470 13f79535-47bb-0310-9956-ffa450edef68

-        putCache( request.getModelCache(), resultModel.getGroupId(), resultModel.getArtifactId(),
-                  resultModel.getVersion(), ModelCacheTag.EFFECTIVE, resultModel );
-
-                parentData =
-                    new ModelData( ModelUtils.cloneModel( parentData.getModel() ), parentData.getGroupId(),
-                                   parentData.getArtifactId(), parentData.getVersion() );
+                /*
+                 * NOTE: This is a sanity check of the cache hit. If the cached parent POM was locally resolved, the
+                 * child's <relativePath> should point at that parent, too. If it doesn't, we ignore the cache and
+                 * resolve externally, to mimic the behavior if the cache didn't exist in the first place. Otherwise,
+                 * the cache would obscure a bad POM.
+                 */
+
+                File pomFile = parentData.getModel().getPomFile();
+                if ( pomFile != null )
+                {
+                    File expectedParentFile = getParentPomFile( childModel );
+
+                    if ( !pomFile.equals( expectedParentFile ) )
+                    {
+                        parentData = readParentExternally( childModel, request, problems );
+                    }
+                }
-        File projectDirectory = childModel.getProjectDirectory();
-        if ( projectDirectory == null )
-        {
-            return null;
-        }
+        File pomFile = getParentPomFile( childModel );
-        Parent parent = childModel.getParent();
-
-        File pomFile = new File( new File( projectDirectory, parent.getRelativePath() ).toURI().normalize() );
-        if ( pomFile.isDirectory() )
-        {
-            pomFile = new File( pomFile, "pom.xml" );
-        }
-        if ( !pomFile.isFile() )
+        if ( pomFile == null || !pomFile.isFile() )
+        Parent parent = childModel.getParent();
+
+    private File getParentPomFile( Model childModel )
+    {
+        File projectDirectory = childModel.getProjectDirectory();
+
+        if ( projectDirectory == null )
+        {
+            return null;
+        }
+
+        String parentPath = childModel.getParent().getRelativePath();
+
+        File pomFile = new File( new File( projectDirectory, parentPath ).toURI().normalize() );
+
+        if ( pomFile.isDirectory() )
+        {
+            pomFile = new File( pomFile, "pom.xml" );
+        }
+
+        return pomFile;
+    }
+
-            DependencyManagement importMngt;
+            DependencyManagement importMngt =
+                getCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.IMPORT );
-            Model importModel =
-                getCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.EFFECTIVE );
-
-            if ( importModel == null )
+            if ( importMngt == null )
-                importModel = importResult.getEffectiveModel();
+                Model importModel = importResult.getEffectiveModel();
-            }
-            else
-            {
-                importMngt = ModelUtils.cloneDependencyManagement( importModel.getDependencyManagement() );
-            }
-            if ( importMngt == null )
-            {
-                continue;
+                if ( importMngt == null )
+                {
+                    importMngt = new DependencyManagement();
+                }
+
+                putCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.IMPORT, importMngt );
-            modelCache.put( groupId, artifactId, version, tag.getName(), data );
+            modelCache.put( groupId, artifactId, version, tag.getName(), tag.intoCache( data ) );
-            return tag.getType().cast( modelCache.get( groupId, artifactId, version, tag.getName() ) );
+            Object data = modelCache.get( groupId, artifactId, version, tag.getName() );
+            if ( data != null )
+            {
+                return tag.fromCache( tag.getType().cast( data ) );
+            }
