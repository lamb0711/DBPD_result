[MNG-4469] [regression] deploy:deploy-file fails with secured repository

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@888488 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
-import java.util.Map;
+import java.util.Arrays;
+import java.util.List;
+import org.apache.maven.execution.MavenExecutionRequest;
+import org.apache.maven.execution.MavenSession;
+import org.apache.maven.plugin.LegacySupport;
+import org.apache.maven.repository.RepositorySystem;
-    // TODO: use settings?
-    private String globalUpdatePolicy;
+    
+    @Requirement
+    private org.apache.maven.repository.legacy.repository.ArtifactRepositoryFactory factory;
-    private String globalChecksumPolicy;
+    @Requirement
+    private LegacySupport legacySupport;
-    // FIXME: This is a non-ThreadLocal cache!!
-    private final Map<String,ArtifactRepository> artifactRepositories = new HashMap<String,ArtifactRepository>();
-
-    @Requirement(role=ArtifactRepositoryLayout.class)
-    private Map<String,ArtifactRepositoryLayout> repositoryLayouts;
+    @Requirement
+    private RepositorySystem repositorySystem;
-        return repositoryLayouts.get( layoutId );
+        return factory.getLayout( layoutId );
-        ArtifactRepositoryLayout layout = repositoryLayouts.get( layoutId );
-
-        checkLayout( id, layoutId, layout );
-
-        return createDeploymentArtifactRepository( id, url, layout, uniqueVersion );
-    }
-
-    private void checkLayout( String repositoryId,
-                              String layoutId,
-                              ArtifactRepositoryLayout layout )
-        throws UnknownRepositoryLayoutException
-    {
-        if ( layout == null )
-        {
-            throw new UnknownRepositoryLayoutException( repositoryId, layoutId );
-        }
+        return injectSession( factory.createDeploymentArtifactRepository( id, url, layoutId, uniqueVersion ), false );
-        return createArtifactRepository( id, url, repositoryLayout, null, null );
+        return injectSession( factory.createDeploymentArtifactRepository( id, url, repositoryLayout, uniqueVersion ), false);
-        ArtifactRepositoryLayout layout = repositoryLayouts.get( layoutId );
-
-        checkLayout( id, layoutId, layout );
-
-        return createArtifactRepository( id, url, layout, snapshots, releases );
+        return injectSession( factory.createArtifactRepository( layoutId, url, layoutId, snapshots, releases ), true );
-        if ( snapshots == null )
-        {
-            snapshots = new ArtifactRepositoryPolicy();
-        }
-
-        if ( releases == null )
-        {
-            releases = new ArtifactRepositoryPolicy();
-        }
-
-        if ( globalUpdatePolicy != null )
-        {
-            snapshots.setUpdatePolicy( globalUpdatePolicy );
-            releases.setUpdatePolicy( globalUpdatePolicy );
-        }
-
-        if ( globalChecksumPolicy != null )
-        {
-            snapshots.setChecksumPolicy( globalChecksumPolicy );
-            releases.setChecksumPolicy( globalChecksumPolicy );
-        }
-
-        ArtifactRepository repository = new MavenArtifactRepository( id, url, repositoryLayout, snapshots, releases );
-
-        artifactRepositories.put( id, repository );
-
-        return repository;
+        return injectSession( factory.createArtifactRepository( id, url, repositoryLayout, snapshots, releases ), true );
-        globalUpdatePolicy = updatePolicy;
+        factory.setGlobalUpdatePolicy( updatePolicy );
-        globalChecksumPolicy = checksumPolicy;
+        factory.setGlobalChecksumPolicy( checksumPolicy );
- }
+
+    private ArtifactRepository injectSession( ArtifactRepository repository, boolean mirrors )
+    {
+        MavenSession session = legacySupport.getSession();
+
+        if ( session != null && repository != null )
+        {
+            MavenExecutionRequest request = session.getRequest();
+            if ( request != null )
+            {
+                List<ArtifactRepository> repositories = Arrays.asList( repository );
+
+                if ( mirrors )
+                {
+                    repositorySystem.injectMirror( repositories, request.getMirrors() );
+                }
+
+                repositorySystem.injectProxy( repositories, request.getProxies() );
+
+                repositorySystem.injectAuthentication( repositories, request.getServers() );
+            }
+        }
+
+        return repository;
+    }
+
+}
