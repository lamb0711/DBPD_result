[MNG-1803] Provide line number information when there are errors processing a pom.xml

o Merged feature branch

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@949708 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.InputLocation;
+import org.apache.maven.model.InputLocationTracker;
-            validateStringNotEmpty( "parent.groupId", problems, Severity.FATAL, parent.getGroupId() );
+            validateStringNotEmpty( "parent.groupId", problems, Severity.FATAL, parent.getGroupId(), parent );
-            validateStringNotEmpty( "parent.artifactId", problems, Severity.FATAL, parent.getArtifactId() );
+            validateStringNotEmpty( "parent.artifactId", problems, Severity.FATAL, parent.getArtifactId(), parent );
-            validateStringNotEmpty( "parent.version", problems, Severity.FATAL, parent.getVersion() );
+            validateStringNotEmpty( "parent.version", problems, Severity.FATAL, parent.getVersion(), parent );
-                    + ", the parent element cannot have the same groupId:artifactId as the project." );
+                    + ", the parent element cannot have the same groupId:artifactId as the project.", parent );
-            validateEnum( "modelVersion", problems, Severity.ERROR, model.getModelVersion(), null, "4.0.0" );
-            validateStringNoExpression( "groupId", problems, Severity.WARNING, model.getGroupId() );
-            validateStringNoExpression( "artifactId", problems, Severity.WARNING, model.getArtifactId() );
-            validateStringNoExpression( "version", problems, Severity.WARNING, model.getVersion() );
+            validateEnum( "modelVersion", problems, Severity.ERROR, model.getModelVersion(), null, model, "4.0.0" );
+            validateStringNoExpression( "groupId", problems, Severity.WARNING, model.getGroupId(), model );
+            validateStringNoExpression( "artifactId", problems, Severity.WARNING, model.getArtifactId(), model );
+            validateStringNoExpression( "version", problems, Severity.WARNING, model.getVersion(), model );
-                                  "must be unique but found duplicate profile with id " + profile.getId() );
+                                  "must be unique but found duplicate profile with id " + profile.getId(), profile );
-                              "must be unique but found duplicate declaration of plugin " + key );
+                              "must be unique but found duplicate declaration of plugin " + key, plugin );
-                        + exec.getId() );
+                        + exec.getId(), exec );
-        validateStringNotEmpty( "modelVersion", problems, Severity.ERROR, model.getModelVersion() );
+        validateStringNotEmpty( "modelVersion", problems, Severity.ERROR, model.getModelVersion(), model );
-        validateId( "groupId", problems, model.getGroupId() );
+        validateId( "groupId", problems, model.getGroupId(), model );
-        validateId( "artifactId", problems, model.getArtifactId() );
+        validateId( "artifactId", problems, model.getArtifactId(), model );
-        validateStringNotEmpty( "packaging", problems, Severity.ERROR, model.getPackaging() );
+        validateStringNotEmpty( "packaging", problems, Severity.ERROR, model.getPackaging(), model );
-                    + "' is invalid. Aggregator projects " + "require 'pom' as packaging." );
+                    + "' is invalid. Aggregator projects " + "require 'pom' as packaging.", model );
-                                  "has been specified without a path to the project directory." );
+                                  "has been specified without a path to the project directory.",
+                                  model.getLocation( "modules" ) );
-        validateStringNotEmpty( "version", problems, Severity.ERROR, model.getVersion() );
+        validateStringNotEmpty( "version", problems, Severity.ERROR, model.getVersion(), model );
-                                  "specifies duplicate child module " + module );
+                                  "specifies duplicate child module " + module, model.getLocation( "modules" ) );
-                                            p.getArtifactId() );
+                                            p.getArtifactId(), p );
-                    validateStringNotEmpty( "build.plugins.plugin.groupId", problems, Severity.ERROR, p.getGroupId() );
+                    validateStringNotEmpty( "build.plugins.plugin.groupId", problems, Severity.ERROR, p.getGroupId(), p );
-                    validatePluginVersion( "build.plugins.plugin.version", problems, p.getVersion(), p.getKey(),
+                    validatePluginVersion( "build.plugins.plugin.version", problems, p.getVersion(), p.getKey(), p,
-                    validateBoolean( "build.plugins.plugin.inherited", problems, errOn30, p.getInherited(),
-                                     p.getKey() );
+                    validateBoolean( "build.plugins.plugin.inherited", problems, errOn30, p.getInherited(), p.getKey(),
+                                     p );
-                                     p.getKey() );
+                                     p.getKey(), p );
-                                            p.getArtifactId() );
+                                            p.getArtifactId(), p );
-                                            p.getGroupId() );
+                                            p.getGroupId(), p );
-                                            p.getKey() );
+                                            p.getKey(), p );
-                                  "must not be specified." );
+                                  "must not be specified.", distMgmt );
-                              "must be empty, imported POM cannot have a classifier." );
+                              "must be empty, imported POM cannot have a classifier.", dependency );
-                                  "should use a variable instead of a hard-coded path " + sysPath );
+                                  "should use a variable instead of a hard-coded path " + sysPath, dependency );
-                              "must be unique: " + key + " -> " + msg );
+                              "must be unique: " + key + " -> " + msg, dependency );
-                validateBoolean( prefix + "optional", problems, errOn30, d.getOptional(), d.getManagementKey() );
+                validateBoolean( prefix + "optional", problems, errOn30, d.getOptional(), d.getManagementKey(), d );
-                    validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey() );
+                    validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey(), d );
-                    validateEnum( prefix + "scope", problems, Severity.WARNING, d.getScope(), d.getManagementKey(),
+                    validateEnum( prefix + "scope", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), d,
-                validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey() );
+                validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey(), d );
-                validateEnum( prefix + "scope", problems, errOn30, d.getScope(), d.getManagementKey(), "compile",
+                validateEnum( prefix + "scope", problems, errOn30, d.getScope(), d.getManagementKey(), d, "compile",
-        validateId( prefix + "artifactId", problems, d.getArtifactId(), d.getManagementKey() );
+        validateId( prefix + "artifactId", problems, d.getArtifactId(), d.getManagementKey(), d );
-        validateId( prefix + "groupId", problems, d.getGroupId(), d.getManagementKey() );
+        validateId( prefix + "groupId", problems, d.getGroupId(), d.getManagementKey(), d );
-            validateStringNotEmpty( prefix + "type", problems, Severity.ERROR, d.getType(), d.getManagementKey() );
+            validateStringNotEmpty( prefix + "type", problems, Severity.ERROR, d.getType(), d.getManagementKey(), d );
-            validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, d.getVersion(), d.getManagementKey() );
+            validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, d.getVersion(), d.getManagementKey(),
+                                    d );
-                addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(), "is missing." );
+                addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(), "is missing.", d );
-                                  "must specify an absolute path but is " + systemPath );
+                                  "must specify an absolute path but is " + systemPath, d );
-                    addViolation( problems, Severity.WARNING, prefix + "systemPath", d.getManagementKey(), msg );
+                    addViolation( problems, Severity.WARNING, prefix + "systemPath", d.getManagementKey(), msg, d );
-                + " This field may only be specified for a dependency with system scope." );
+                + " This field may only be specified for a dependency with system scope.", d );
-            validateStringNotEmpty( prefix + ".id", problems, Severity.ERROR, repository.getId() );
+            validateStringNotEmpty( prefix + ".id", problems, Severity.ERROR, repository.getId(), repository );
-                                    repository.getUrl() );
+                                    repository.getUrl(), repository );
-                    + existing.getUrl() + " vs " + repository.getUrl() );
+                    + existing.getUrl() + " vs " + repository.getUrl(), repository );
-                    + ", using it for other repositories will corrupt your repository metadata." );
+                    + ", using it for other repositories will corrupt your repository metadata.", repository );
-                              "uses the deprecated value 'legacy'." );
+                              "uses the deprecated value 'legacy'.", repository );
-            validateStringNotEmpty( prefix + ".directory", problems, Severity.ERROR, resource.getDirectory() );
+            validateStringNotEmpty( prefix + ".directory", problems, Severity.ERROR, resource.getDirectory(), resource );
-                             resource.getDirectory() );
+                             resource.getDirectory(), resource );
-    private boolean validateId( String fieldName, ModelProblemCollector problems, String id )
+    private boolean validateId( String fieldName, ModelProblemCollector problems, String id, InputLocationTracker tracker )
-        return validateId( fieldName, problems, id, null );
+        return validateId( fieldName, problems, id, null, tracker );
-    private boolean validateId( String fieldName, ModelProblemCollector problems, String id, String sourceHint )
+    private boolean validateId( String fieldName, ModelProblemCollector problems, String id, String sourceHint,
+                                InputLocationTracker tracker )
-        if ( !validateStringNotEmpty( fieldName, problems, Severity.ERROR, id, sourceHint ) )
+        if ( !validateStringNotEmpty( fieldName, problems, Severity.ERROR, id, sourceHint, tracker ) )
-                    + "' does not match a valid id pattern." );
+                    + "' does not match a valid id pattern.", tracker );
-                                                String string )
+                                                String string, InputLocationTracker tracker )
-        addViolation( problems, severity, fieldName, null, "contains an expression but should be a constant." );
+        addViolation( problems, severity, fieldName, null, "contains an expression but should be a constant.", tracker );
-                                            String string )
+                                            String string, InputLocationTracker tracker )
-        return validateStringNotEmpty( fieldName, problems, severity, string, null );
+        return validateStringNotEmpty( fieldName, problems, severity, string, null, tracker );
-                                            String string, String sourceHint )
+                                            String string, String sourceHint, InputLocationTracker tracker )
-        if ( !validateNotNull( fieldName, problems, severity, string, sourceHint ) )
+        if ( !validateNotNull( fieldName, problems, severity, string, sourceHint, tracker ) )
-        addViolation( problems, severity, fieldName, sourceHint, "is missing." );
+        addViolation( problems, severity, fieldName, sourceHint, "is missing.", tracker );
-                                     Object object, String sourceHint )
+                                     Object object, String sourceHint, InputLocationTracker tracker )
-        addViolation( problems, severity, fieldName, sourceHint, "is missing." );
+        addViolation( problems, severity, fieldName, sourceHint, "is missing.", tracker );
-                                     String sourceHint )
+                                     String sourceHint, InputLocationTracker tracker )
-        addViolation( problems, severity, fieldName, sourceHint, "must be 'true' or 'false' but is '" + string + "'." );
+        addViolation( problems, severity, fieldName, sourceHint, "must be 'true' or 'false' but is '" + string + "'.",
+                      tracker );
-                                  String sourceHint, String... validValues )
+                                  String sourceHint, InputLocationTracker tracker, String... validValues )
-            + "'." );
+            + "'.", tracker );
-                                     String sourceHint )
+                                     String sourceHint, InputLocationTracker tracker )
-        addViolation( problems, severity, fieldName, sourceHint, "must be a valid version but is '" + string + "'." );
+        addViolation( problems, severity, fieldName, sourceHint, "must be a valid version but is '" + string + "'.",
+                      tracker );
-                                           String sourceHint, ModelBuildingRequest request )
+                                           String sourceHint, InputLocationTracker tracker, ModelBuildingRequest request )
-        addViolation( problems, errOn30, fieldName, sourceHint, "must be a valid version but is '" + string + "'." );
+        addViolation( problems, errOn30, fieldName, sourceHint, "must be a valid version but is '" + string + "'.",
+                      tracker );
-                                      String sourceHint, String message )
+                                      String sourceHint, String message, InputLocationTracker tracker )
-        addViolation( problems, severity, buffer.toString() );
+        problems.add( severity, buffer.toString(), getLocation( fieldName, tracker ), null );
-    private static void addViolation( ModelProblemCollector problems, Severity severity, String message )
+    private static InputLocation getLocation( String fieldName, InputLocationTracker tracker )
-        problems.add( severity, message, null );
+        InputLocation location = null;
+
+        if ( tracker != null )
+        {
+            if ( fieldName != null )
+            {
+                Object key = fieldName;
+
+                int idx = fieldName.lastIndexOf( '.' );
+                if ( idx >= 0 )
+                {
+                    key = fieldName = fieldName.substring( idx + 1 );
+                }
+
+                if ( fieldName.endsWith( "]" ) )
+                {
+                    key = fieldName.substring( fieldName.lastIndexOf( '[' ) + 1, fieldName.length() - 1 );
+                    try
+                    {
+                        key = Integer.valueOf( key.toString() );
+                    }
+                    catch ( NumberFormatException e )
+                    {
+                        // use key as is
+                    }
+                }
+
+                location = tracker.getLocation( key );
+            }
+
+            if ( location == null )
+            {
+                location = tracker.getLocation( "" );
+            }
+        }
+
+        return location;
