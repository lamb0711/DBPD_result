Working on MNG-607

o Changed MavenMetadataSource to a component, to avoid having to lookup artifactFactory and projectBuilder in order to 
  construct it.

o Added add(..) method to ScmBean in the release plugin to allow addition of release-pom.xml

o Changed the PrepareReleaseMojo to resolve ONLY version and parent-version for the normal pom.xml, and fully resolve all
  artifacts used in the release-pom.xml, including version, parent-version, dependency closure (given by project.getArtifacts()), plugins, and reports. It will then add the release-pom.xml, and (attempt to) delete it before performing the final commit for next development version.

o Added some mapping methods to ArtifactUtils, to key by artifact.getId, and to create an Artifact.getId()-compatible string from parameters.

o Added TestProjectBuilder to remove the requirement in ProjectClasspathTest to modify the fields of the project builder directly.

o Cleaned up the AbstractReleaseMojo and PrepareReleaseMojo to avoid container lookups...they're now mojo parameters with the 'component.' prefix.

NOTE: Next step is to figure out how to use maven-scm to remove an SCM resource, to enable the prepare mojo to take the release-pom.xml back out of HEAD after the tag is complete.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@224413 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.ArtifactUtils;
+import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
+import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.model.ReportPlugin;
+import org.apache.maven.scm.ScmFileStatus;
+import org.codehaus.plexus.util.IOUtil;
+import java.io.FileWriter;
+import java.io.Writer;
+import java.util.Map;
+    
+    /**
+     * @parameter expression="${component.org.apache.maven.artifact.metadata.ArtifactMetadataSource}"
+     * @required
+     * @readonly
+     */
+    private ArtifactMetadataSource artifactMetadataSource;
+    
+    /**
+     * @parameter expression="${component.org.codehaus.plexus.components.inputhandler.InputHandler}"
+     * @required
+     * @readonly
+     */
+    private InputHandler inputHandler;
+    
+    /**
+     * @parameter expression="${localRepository}"
+     * @required
+     * @readonly
+     */
+    private ArtifactRepository localRepository;
+    private static final String RELEASE_POM = "release-pom.xml";
+
-
+        
+        generateReleasePropertiesFile();
+        
+        generateReleasePom();
+        
+        
+        new File( basedir, RELEASE_POM ).delete();
+    private void generateReleasePropertiesFile() throws MojoExecutionException
+    {
+        try
+        {
+            Properties releaseProperties = new Properties();
+
+            releaseProperties.setProperty( "version", projectVersion );
+
+            releaseProperties.setProperty( USERNAME, username );
+
+            releaseProperties.setProperty( TAG, getTagLabel() );
+
+            releaseProperties.setProperty( SCM_URL, urlScm );
+
+            FileOutputStream os = new FileOutputStream( new File( project.getFile().getParentFile(), RELEASE_PROPS ) );
+
+            releaseProperties.store( os, "maven release plugin info" );
+
+            os.close();
+        }
+        catch ( IOException e )
+        {
+            throw new MojoExecutionException( "Cannote write release-version file.", e );
+        }
+    }
+
-            InputHandler handler = (InputHandler) getContainer().lookup( InputHandler.ROLE );
-
-            String inputVersion = handler.readLine();
+            String inputVersion = inputHandler.readLine();
-        try
-        {
-            Properties releaseProperties = new Properties();
-
-            releaseProperties.setProperty( "version", projectVersion );
-
-            releaseProperties.setProperty( USERNAME, username );
-
-            releaseProperties.setProperty( TAG, getTagLabel() );
-
-            releaseProperties.setProperty( SCM_URL, urlScm );
-
-            FileOutputStream os = new FileOutputStream( new File( project.getFile().getParentFile(), RELEASE_PROPS ) );
-
-            releaseProperties.store( os, "maven release plugin info" );
-
-            os.close();
-        }
-        catch ( IOException e )
-        {
-            throw new MojoExecutionException( "Cannote write release-version file.", e );
-        }
-
-            if ( isSnapshot( project.getParentArtifact().getBaseVersion() ) )
+            Artifact parentArtifact = project.getParentArtifact();
+            
+            if ( isSnapshot( parentArtifact.getBaseVersion() ) )
-                model.getParent().setVersion( project.getParentArtifact().getVersion() );
+                String version = resolveVersion( parentArtifact, "parent" );
+                
+                model.getParent().setVersion( version );
-
-        //Rewrite dependencies version
-        for ( Iterator i = project.getArtifacts().iterator(); i.hasNext(); )
+        
+        //Rewrite dependencies section
+        Map artifactMap = ArtifactUtils.artifactMapByArtifactId( project.getArtifacts() );
+        
+        for ( Iterator i = model.getDependencies().iterator(); i.hasNext(); )
-            Artifact artifact = (Artifact) i.next();
-            if ( isSnapshot( artifact.getBaseVersion() ) )
-            {
-                for ( Iterator j = model.getDependencies().iterator(); j.hasNext(); )
-                {
-                    Dependency dependency = (Dependency) j.next();
-                    if ( artifact.getGroupId().equals( dependency.getGroupId() ) &&
-                        artifact.getArtifactId().equals( dependency.getArtifactId() ) &&
-                        artifact.getBaseVersion().equals( dependency.getVersion() ) &&
-                        artifact.getType().equals( dependency.getType() ) )
-                    {
-                        dependency.setVersion( artifact.getVersion() );
-                    }
-                }
-            }
+            Dependency dep = (Dependency) i.next();
+            
+            String conflictId = ArtifactUtils.artifactId( dep.getGroupId(), dep.getArtifactId(), dep.getType(), dep.getVersion() );
+            
+            Artifact artifact = (Artifact) artifactMap.get( conflictId );
+            
+            dep.setVersion( artifact.getVersion() );
-
-        //Rewrite plugins version
-        for ( Iterator i = project.getPluginArtifacts().iterator(); i.hasNext(); )
-        {
-            Artifact artifact = (Artifact) i.next();
-            if ( isSnapshot( artifact.getBaseVersion() ) )
-            {
-                for ( Iterator j = model.getBuild().getPlugins().iterator(); j.hasNext(); )
-                {
-                    Plugin plugin = (Plugin) j.next();
-                    if ( artifact.getGroupId().equals( plugin.getGroupId() ) &&
-                        artifact.getArtifactId().equals( plugin.getArtifactId() ) )
-                    {
-                        plugin.setGroupId( artifact.getGroupId() );
-                        plugin.setVersion( artifact.getVersion() );
-                    }
-                }
-            }
-        }
-
+        
+    
+    private void generateReleasePom() throws MojoExecutionException
+    {
+        MavenProject releaseProject = new MavenProject( project );
+        Model releaseModel = releaseProject.getModel();
+        
+        //Rewrite parent version
+        if ( project.hasParent() )
+        {
+            Artifact parentArtifact = project.getParentArtifact();
+            
+            if ( isSnapshot( parentArtifact.getBaseVersion() ) )
+            {
+                String version = resolveVersion( parentArtifact, "parent" );
+                
+                model.getParent().setVersion( version );
+            }
+        }
+
+        //Rewrite dependencies section
+        List newdeps = new ArrayList();
+        
+        for ( Iterator i = releaseProject.getArtifacts().iterator(); i.hasNext(); )
+        {
+            Artifact artifact = (Artifact) i.next();
+            
+            Dependency newdep = new Dependency();
+            
+            newdep.setArtifactId( artifact.getArtifactId() );
+            newdep.setGroupId( artifact.getGroupId() );
+            newdep.setVersion( artifact.getVersion() );
+            newdep.setType( artifact.getType() );
+            newdep.setScope( artifact.getScope() );
+            
+            newdeps.add( newdep );
+        }
+        
+        releaseModel.setDependencies( newdeps );
+
+        //Rewrite plugins version
+        for ( Iterator i = releaseProject.getPluginArtifacts().iterator(); i.hasNext(); )
+        {
+            Artifact artifact = (Artifact) i.next();
+            if ( isSnapshot( artifact.getBaseVersion() ) )
+            {
+                for ( Iterator j = releaseModel.getBuild().getPlugins().iterator(); j.hasNext(); )
+                {
+                    Plugin plugin = (Plugin) j.next();
+                    if ( ArtifactUtils.versionlessKey(artifact).equals( plugin.getKey() ) )
+                    {
+                        String version = resolveVersion( artifact, "plugin" );
+                        
+                        plugin.setGroupId( artifact.getGroupId() );
+                        plugin.setVersion( version );
+                    }
+                }
+            }
+        }
+        
+        //Rewrite report version
+        for ( Iterator i = releaseProject.getReportArtifacts().iterator(); i.hasNext(); )
+        {
+            Artifact artifact = (Artifact) i.next();
+            if ( isSnapshot( artifact.getBaseVersion() ) )
+            {
+                List reportPlugins = releaseProject.getReportPlugins();
+                
+                if ( reportPlugins != null )
+                {
+                    for ( Iterator j = reportPlugins.iterator(); j.hasNext(); )
+                    {
+                        ReportPlugin plugin = (ReportPlugin) j.next();
+                        if ( ArtifactUtils.versionlessKey(artifact).equals( plugin.getKey() ) )
+                        {
+                            String version = resolveVersion( artifact, "report" );
+                            
+                            plugin.setGroupId( artifact.getGroupId() );
+                            plugin.setVersion( version );
+                        }
+                    }
+                }
+            }
+        }
+        
+        File releasePomFile = new File( basedir, RELEASE_POM );
+        
+        Writer writer = null;
+        
+        try
+        {
+            writer = new FileWriter( releasePomFile );
+            
+            releaseProject.writeModel( writer );
+        }
+        catch ( IOException e )
+        {
+            throw new MojoExecutionException( "Cannot write release-pom to: " + releasePomFile, e );
+        }
+        finally
+        {
+            IOUtil.close( writer );
+        }
+        
+        try
+        {
+            ScmBean scm = getScm();
+
+            scm.setWorkingDirectory( basedir );
+
+            List scmChanges = scm.getStatus();
+            
+            for ( Iterator i = scmChanges.iterator(); i.hasNext(); )
+            {
+                ScmFile f = (ScmFile) i.next();
+                
+                if ( f.getPath().equals( "release-pom.xml" ) && f.getStatus() != ScmFileStatus.MODIFIED )
+                {
+                    getScm().add( RELEASE_POM );
+                }
+            }
+        }
+        catch ( ScmException e )
+        {
+            throw new MojoExecutionException( "Error updating the release-pom.xml.", e );
+        }
+        catch ( IOException e )
+        {
+            throw new MojoExecutionException( "Error updating the release-pom.xml.", e );
+        }
+    }
+
+    private String resolveVersion( Artifact artifact, String artifactUsage ) 
+        throws MojoExecutionException
+    {
+        if ( artifact.getFile() == null )
+        {
+            try
+            {
+                artifactMetadataSource.retrieve(artifact, localRepository, project.getPluginArtifactRepositories() );
+            }
+            catch ( ArtifactMetadataRetrievalException e )
+            {
+                throw new MojoExecutionException( "Cannot resolve " + artifactUsage + ": " + artifact.getId(), e );
+            }
+        }
+        
+        return artifact.getVersion();
+    }
-            InputHandler handler = (InputHandler) getContainer().lookup( InputHandler.ROLE );
-
-            String inputVersion = handler.readLine();
+            String inputVersion = inputHandler.readLine();
-        checkInPom( "[maven-release-plugin] prepare release " + projectVersion );
+        checkIn( "pom.xml,release-pom.xml", "[maven-release-plugin] prepare release " + projectVersion );
-        checkInPom( "[maven-release-plugin] prepare for development " + projectVersion );
+        checkIn( "pom.xml", "[maven-release-plugin] prepare for development " + projectVersion );
-    private void checkInPom( String message )
+    private void checkIn( String includePattern, String message )
-            scm.checkin( message, "pom.xml", null );
+            scm.checkin( message, includePattern, null );
-                    InputHandler handler = (InputHandler) getContainer().lookup( InputHandler.ROLE );
-
-                    String inputTag = handler.readLine();
+                    String inputTag = inputHandler.readLine();
