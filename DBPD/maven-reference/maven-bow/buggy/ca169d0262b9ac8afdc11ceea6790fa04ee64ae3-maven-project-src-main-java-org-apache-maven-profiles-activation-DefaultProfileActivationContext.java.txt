Refactor management of activated, deactivated, and default-activated profile ids, so the context tracks all of that stuff.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@612186 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.realm.MavenRealmManager;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+    List explicitlyActive;
+    List explicitlyInactive;
+    private final MavenRealmManager realmManager;
+    private List activeByDefault;
+
+    public DefaultProfileActivationContext( MavenRealmManager realmManager, Properties executionProperties, boolean isCustomActivatorFailureSuppressed )
+    {
+        this.realmManager = realmManager;
+        this.executionProperties = executionProperties;
+        this.isCustomActivatorFailureSuppressed = isCustomActivatorFailureSuppressed;
+    }
+        realmManager = null;
-
+    public List getExplicitlyActiveProfileIds()
+    {
+        if ( explicitlyActive == null )
+        {
+            return Collections.EMPTY_LIST;
+        }
+
+        return explicitlyActive;
+    }
+
+    public void setExplicitlyActiveProfileIds( List active )
+    {
+        explicitlyActive = active;
+    }
+
+    public List getExplicitlyInactiveProfileIds()
+    {
+        if ( explicitlyInactive == null )
+        {
+            return Collections.EMPTY_LIST;
+        }
+
+        return explicitlyInactive;
+    }
+
+    public void setExplicitlyInactiveProfileIds( List inactive )
+    {
+        explicitlyInactive = inactive;
+    }
+
+    public MavenRealmManager getRealmManager()
+    {
+        return realmManager;
+    }
+
+    public void setActive( String profileId )
+    {
+        if ( explicitlyActive == null )
+        {
+            explicitlyActive = new ArrayList();
+        }
+
+        explicitlyActive.add( profileId );
+    }
+
+    public void setInactive( String profileId )
+    {
+        if ( explicitlyInactive == null )
+        {
+            explicitlyInactive = new ArrayList();
+        }
+
+        explicitlyInactive.add( profileId );
+    }
+
+    public boolean isExplicitlyActive( String profileId )
+    {
+        return ( explicitlyActive != null ) && explicitlyActive.contains( profileId );
+    }
+
+    public boolean isExplicitlyInactive( String profileId )
+    {
+        return ( explicitlyInactive != null ) && explicitlyInactive.contains( profileId );
+    }
+
+    public List getActiveByDefaultProfileIds()
+    {
+        if ( activeByDefault == null )
+        {
+            return Collections.EMPTY_LIST;
+        }
+
+        return activeByDefault;
+    }
+
+    public boolean isActiveByDefault( String profileId )
+    {
+        return ( activeByDefault != null ) && activeByDefault.contains( profileId );
+    }
+
+    public void setActiveByDefault( String profileId )
+    {
+        if ( activeByDefault == null )
+        {
+            activeByDefault = new ArrayList();
+        }
+
+        activeByDefault.add( profileId );
+    }
+
+    public void setActiveByDefaultProfileIds( List activeByDefault )
+    {
+        this.activeByDefault = activeByDefault;
+    }
+
