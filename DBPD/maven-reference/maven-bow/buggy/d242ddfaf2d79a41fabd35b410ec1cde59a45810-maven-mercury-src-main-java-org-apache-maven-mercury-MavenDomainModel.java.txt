applied our coding conventions (no code change)

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@725035 13f79535-47bb-0310-9956-ffa450edef68

-public final class MavenDomainModel implements DomainModel {
+public final class MavenDomainModel
+    implements DomainModel
+{
-
-     *
+     * 
-    throws IOException
+        throws IOException
-      this( new ByteArrayInputStream(bytes) );
+        this( new ByteArrayInputStream( bytes ) );
-     *
+     * 
-    public MavenDomainModel(InputStream inputStream)
-            throws IOException {
-        this(ModelMarshaller.marshallXmlToModelProperties(inputStream, ProjectUri.baseUri, PomTransformer.URIS));
+    public MavenDomainModel( InputStream inputStream )
+        throws IOException
+    {
+        this( ModelMarshaller.marshallXmlToModelProperties( inputStream, ProjectUri.baseUri, PomTransformer.URIS ) );
-     *
+     * 
-    public MavenDomainModel(List<ModelProperty> modelProperties)
-            throws IOException {
-        if (modelProperties == null) {
-            throw new IllegalArgumentException("modelProperties: null");
+    public MavenDomainModel( List<ModelProperty> modelProperties )
+        throws IOException
+    {
+        if ( modelProperties == null )
+        {
+            throw new IllegalArgumentException( "modelProperties: null" );
-        this.modelProperties = new ArrayList<ModelProperty>(modelProperties);
+        this.modelProperties = new ArrayList<ModelProperty>( modelProperties );
-    public boolean hasParent() {
-        //TODO: Expensive call if no parent
+    public boolean hasParent()
+    {
+        // TODO: Expensive call if no parent
-    public List<ArtifactBasicMetadata> getDependencyMetadata() throws DataSourceException {
+    public List<ArtifactBasicMetadata> getDependencyMetadata()
+        throws DataSourceException
+    {
-        source.init(modelProperties, Arrays.asList(new ArtifactModelContainerFactory(), new IdModelContainerFactory()));
-        for(ModelContainer modelContainer: source.queryFor(ProjectUri.Dependencies.Dependency.xUri)) {
-            metadatas.add(transformContainerToMetadata(modelContainer));
+        source.init( modelProperties,
+                     Arrays.asList( new ArtifactModelContainerFactory(), new IdModelContainerFactory() ) );
+
+        for ( ModelContainer modelContainer : source.queryFor( ProjectUri.Dependencies.Dependency.xUri ) )
+        {
+            metadatas.add( transformContainerToMetadata( modelContainer ) );
-    public Collection<ModelContainer> getActiveProfileContainers(List<InterpolatorProperty> properties) throws DataSourceException {
+    public Collection<ModelContainer> getActiveProfileContainers( List<InterpolatorProperty> properties )
+        throws DataSourceException
+    {
-        dataSource.init(modelProperties, Arrays.asList( new ArtifactModelContainerFactory(), new IdModelContainerFactory() ) );
-        return new ProfileContext(dataSource, properties).getActiveProfiles();
+        dataSource.init( modelProperties, Arrays.asList( new ArtifactModelContainerFactory(),
+                                                         new IdModelContainerFactory() ) );
+        return new ProfileContext( dataSource, properties ).getActiveProfiles();
-    public ArtifactBasicMetadata getParentMetadata() {
-        if (parentMetadata != null) {
-            return copyArtifactBasicMetadata(parentMetadata);
+    public ArtifactBasicMetadata getParentMetadata()
+    {
+        if ( parentMetadata != null )
+        {
+            return copyArtifactBasicMetadata( parentMetadata );
+
-        for (ModelProperty mp : modelProperties) {
-            if (mp.getUri().equals(ProjectUri.Parent.version)) {
+        for ( ModelProperty mp : modelProperties )
+        {
+            if ( mp.getUri().equals( ProjectUri.Parent.version ) )
+            {
-            } else if (mp.getUri().equals(ProjectUri.Parent.artifactId)) {
+            }
+            else if ( mp.getUri().equals( ProjectUri.Parent.artifactId ) )
+            {
-            } else if (mp.getUri().equals(ProjectUri.Parent.groupId)) {
+            }
+            else if ( mp.getUri().equals( ProjectUri.Parent.groupId ) )
+            {
-            if (groupId != null && artifactId != null && version != null) {
+            if ( groupId != null && artifactId != null && version != null )
+            {
-        if (groupId == null || artifactId == null || version == null) {
+        if ( groupId == null || artifactId == null || version == null )
+        {
-        parentMetadata.setArtifactId(artifactId);
-        parentMetadata.setVersion(version);
-        parentMetadata.setGroupId(groupId);
+        parentMetadata.setArtifactId( artifactId );
+        parentMetadata.setVersion( version );
+        parentMetadata.setGroupId( groupId );
-        return copyArtifactBasicMetadata(parentMetadata);
+        return copyArtifactBasicMetadata( parentMetadata );
-    private ArtifactBasicMetadata copyArtifactBasicMetadata(ArtifactBasicMetadata metadata) {
+    private ArtifactBasicMetadata copyArtifactBasicMetadata( ArtifactBasicMetadata metadata )
+    {
-        amd.setArtifactId(metadata.getArtifactId());
-        amd.setGroupId(metadata.getGroupId());
-        amd.setVersion(metadata.getVersion());
+        amd.setArtifactId( metadata.getArtifactId() );
+        amd.setGroupId( metadata.getGroupId() );
+        amd.setVersion( metadata.getVersion() );
-    public String getEventHistory() {
+    public String getEventHistory()
+    {
-    public void setEventHistory(String eventHistory) {
-        if (eventHistory == null) {
-            throw new IllegalArgumentException("eventHistory: null");
+    public void setEventHistory( String eventHistory )
+    {
+        if ( eventHistory == null )
+        {
+            throw new IllegalArgumentException( "eventHistory: null" );
-    public List<ModelProperty> getModelProperties() throws IOException {
-        return new ArrayList<ModelProperty>(modelProperties);
+    public List<ModelProperty> getModelProperties()
+        throws IOException
+    {
+        return new ArrayList<ModelProperty>( modelProperties );
-    private ArtifactBasicMetadata transformContainerToMetadata( ModelContainer container  ) throws DataSourceException
+    private ArtifactBasicMetadata transformContainerToMetadata( ModelContainer container )
+        throws DataSourceException
-            if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.groupId)) {
-                metadata.setGroupId(mp.getValue());
-            } else if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.artifactId)) {
-                metadata.setArtifactId(mp.getValue());
-            }  else if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.version)) {
-                metadata.setVersion(mp.getValue());
-            } else if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.classifier)) {
-                metadata.setClassifier(mp.getValue());
-            } else if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.scope)) {
-                metadata.setScope(mp.getValue());
-            } else if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.type)) {
-                metadata.setType(mp.getValue());
-            } else if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.optional)) {
-                metadata.setOptional(mp.getValue());
+            if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.groupId ) )
+            {
+                metadata.setGroupId( mp.getValue() );
+            }
+            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.artifactId ) )
+            {
+                metadata.setArtifactId( mp.getValue() );
+            }
+            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.version ) )
+            {
+                metadata.setVersion( mp.getValue() );
+            }
+            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.classifier ) )
+            {
+                metadata.setClassifier( mp.getValue() );
+            }
+            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.scope ) )
+            {
+                metadata.setScope( mp.getValue() );
+            }
+            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.type ) )
+            {
+                metadata.setType( mp.getValue() );
+            }
+            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.optional ) )
+            {
+                metadata.setOptional( mp.getValue() );
-        if(metadata.getScope() == null) {
-            metadata.setScope("runtime");
+        if ( metadata.getScope() == null )
+        {
+            metadata.setScope( "runtime" );
-        dataSource.init(container.getProperties(), Arrays.asList(new ArtifactModelContainerFactory(), new ExclusionModelContainerFactory()) );
+        dataSource.init( container.getProperties(), Arrays.asList( new ArtifactModelContainerFactory(),
+                                                                   new ExclusionModelContainerFactory() ) );
-        for(ModelContainer exclusion : dataSource.queryFor(ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.xUri)) {
+        for ( ModelContainer exclusion : dataSource.queryFor( ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.xUri ) )
+        {
-            exclusions.add(meta);
+            exclusions.add( meta );
-            for(ModelProperty mp : exclusion.getProperties()) {
-                if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.artifactId)) {
-                    meta.setArtifactId(mp.getValue());
-                } else if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.groupId)) {
-                    meta.setGroupId(mp.getValue());
+            for ( ModelProperty mp : exclusion.getProperties() )
+            {
+                if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.artifactId ) )
+                {
+                    meta.setArtifactId( mp.getValue() );
+                }
+                else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.groupId ) )
+                {
+                    meta.setGroupId( mp.getValue() );
-        metadata.setExclusions(exclusions);
-        
+        metadata.setExclusions( exclusions );
+
