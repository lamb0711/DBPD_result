MNG-411: Adding more reports: cim, issuetracking,license, scm and teamlist

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219836 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.reporting.AbstractMavenReport;
+import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.ProjectBuildingException;
+import org.apache.maven.reporting.AbstractMavenReport;
+import java.util.ArrayList;
- * Generates the dependencies report.
- *
- * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @author <a href="mailto:vincent.siveton@gmail.com">Vincent Siveton</a>
- * @version $Id$
+ * Generates the Project Dependencies report.
+ * 
+ * 
+ * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
+ * @author <a href="mailto:vincent.siveton@gmail.com">Vincent Siveton </a>
+ * @version $Id$
+     * @parameter expression="${component.org.apache.maven.artifact.factory.ArtifactFactory}"
+     * @required
+     * @readonly
+     */
+    private ArtifactFactory artifactFactory;
+
+    /**
+     * @parameter expression="${component.org.apache.maven.project.MavenProjectBuilder}"
+     * @required
+     * @readonly
+     */
+    private MavenProjectBuilder mavenProjectBuilder;
+
+    /**
-     * @see AbstractMavenReport#getSiteRenderer()
+     * @see org.apache.maven.reporting.AbstractMavenReport#getSiteRenderer()
-            DependenciesRenderer r = new DependenciesRenderer( getSink(), getProject(), locale );
+            DependenciesRenderer r = new DependenciesRenderer( getSink(), getProject(), locale, mavenProjectBuilder,
+                                                               artifactFactory );
-        public DependenciesRenderer( Sink sink, MavenProject project, Locale locale )
+        private ArtifactFactory artifactFactory;
+
+        private MavenProjectBuilder mavenProjectBuilder;
+
+        public DependenciesRenderer( Sink sink, MavenProject project, Locale locale,
+                                    MavenProjectBuilder mavenProjectBuilder, ArtifactFactory artifactFactory )
+
+            this.mavenProjectBuilder = mavenProjectBuilder;
+
+            this.artifactFactory = artifactFactory;
-            startSection( getTitle() );
-
-            if ( dependencies.isEmpty() )
+            if ( ( dependencies == null ) || ( dependencies.isEmpty() ) )
+                startSection( getTitle() );
+
+
+                endSection();
+
+                return;
+            }
+
+            startSection( getTitle() );
+
+            startTable();
+
+            tableCaption( getBundle( locale ).getString( "report.dependencies.intro" ) );
+
+            String groupId = getBundle( locale ).getString( "report.dependencies.column.groupId" );
+            String artifactId = getBundle( locale ).getString( "report.dependencies.column.artifactId" );
+            String version = getBundle( locale ).getString( "report.dependencies.column.version" );
+            String description = getBundle( locale ).getString( "report.dependencies.column.description" );
+            String url = getBundle( locale ).getString( "report.dependencies.column.url" );
+
+            tableHeader( new String[] { groupId, artifactId, version, description, url } );
+
+            for ( Iterator i = dependencies.iterator(); i.hasNext(); )
+            {
+                Dependency dependency = (Dependency) i.next();
+
+                Artifact artifact = artifactFactory.createArtifact( dependency.getGroupId(),
+                                                                    dependency.getArtifactId(),
+                                                                    dependency.getVersion(), dependency.getScope(),
+                                                                    dependency.getType() );
+                MavenProject artifactProject = null;
+                try
+                {
+                    artifactProject = getMavenProjectFromRepository( artifact );
+                }
+                catch ( ProjectBuildingException e )
+                {
+                    throw new IllegalArgumentException(
+                                                        "Can't find a valid Maven project in the repository for the artifact ["
+                                                            + artifact + "]." );
+                }
+
+                tableRow( new String[] {
+                    dependency.getGroupId(),
+                    dependency.getArtifactId(),
+                    dependency.getVersion(),
+                    artifactProject.getDescription(),
+                    createLinkPatternedText( artifactProject.getUrl(), artifactProject.getUrl() ) } );
+            }
+
+            endTable();
+
+            endSection();
+
+            // Transitive dependencies
+            Set artifacts = getTransitiveDependencies( project );
+
+            startSection( getBundle( locale ).getString( "report.transitivedependencies.title" ) );
+
+            if ( artifacts.isEmpty() )
+            {
+                paragraph( getBundle( locale ).getString( "report.transitivedependencies.nolist" ) );
-                tableCaption( getBundle( locale ).getString( "report.dependencies.intro" ) );
+                tableCaption( getBundle( locale ).getString( "report.transitivedependencies.intro" ) );
-                String groupId = getBundle( locale ).getString( "report.dependencies.column.groupId" );
-                String artifactId = getBundle( locale ).getString( "report.dependencies.column.artifactId" );
-                String version = getBundle( locale ).getString( "report.dependencies.column.version" );
+                tableHeader( new String[] { groupId, artifactId, version, description, url } );
-                tableHeader( new String[]{groupId, artifactId, version} );
-
-                for ( Iterator i = dependencies.iterator(); i.hasNext(); )
+                for ( Iterator i = artifacts.iterator(); i.hasNext(); )
-                    Dependency d = (Dependency) i.next();
+                    Artifact artifact = (Artifact) i.next();
-                    tableRow( new String[]{d.getGroupId(), d.getArtifactId(), d.getVersion()} );
+                    MavenProject artifactProject = null;
+                    try
+                    {
+                        artifactProject = getMavenProjectFromRepository( artifact );
+                    }
+                    catch ( ProjectBuildingException e )
+                    {
+                        throw new IllegalArgumentException(
+                                                            "Can't find a valid Maven project in the repository for the artifact ["
+                                                                + artifact + "]." );
+                    }
+                    System.out.println( "nklj-----------------------------" );
+                    System.out.println( artifactProject.getUrl() );
+                    tableRow( new String[] {
+                        artifact.getGroupId(),
+                        artifact.getArtifactId(),
+                        artifact.getVersion(),
+                        artifactProject.getDescription(),
+                        createLinkPatternedText( artifactProject.getUrl(), artifactProject.getUrl() ) } );
-
-            // Transitive dependencies
-            if ( !dependencies.isEmpty() )
-            {
-                Set artifacts = getTransitiveDependencies( project );
-
-                startSection( getBundle( locale ).getString( "report.transitivedependencies.title" ) );
-
-                if ( artifacts.isEmpty() )
-                {
-                    // TODO: should the report just be excluded?
-                    paragraph( getBundle( locale ).getString( "report.transitivedependencies.nolist" ) );
-                }
-                else
-                {
-                    startTable();
-
-                    tableCaption( getBundle( locale ).getString( "report.transitivedependencies.intro" ) );
-
-                    String groupId = getBundle( locale ).getString( "report.transitivedependencies.column.groupId" );
-                    String artifactId = getBundle( locale ).getString(
-                        "report.transitivedependencies.column.artifactId" );
-                    String version = getBundle( locale ).getString( "report.transitivedependencies.column.version" );
-
-                    tableHeader( new String[]{groupId, artifactId, version} );
-
-                    for ( Iterator i = artifacts.iterator(); i.hasNext(); )
-                    {
-                        Artifact artifact = (Artifact) i.next();
-
-                        tableRow(
-                            new String[]{artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion()} );
-                    }
-
-                    endTable();
-                }
-
-                endSection();
-            }
-
-         * Return a set of artifact which are not already present in the dependencies list.
-         *
-         * @param project a Maven project
-         * @return a set of transitive dependencies
-         * @todo check if this works with version ranges
+         * Return a set of <code>Artifacts</code> which are not already
+         * present in the dependencies list.
+         * 
+         * @param project
+         *            a Maven project
+         * @return a set of transitive dependencies as artifacts
-            Set result = new HashSet();
-
-            if ( project.getDependencies() == null || project.getArtifacts() == null )
-            {
-                return result;
-            }
+            Set transitiveDependencies = new HashSet();
+            if ( ( dependencies == null ) || ( artifacts == null ) )
+            {
+                return transitiveDependencies;
+            }
+
+            List dependenciesAsArtifacts = new ArrayList( dependencies.size() );
+            for ( Iterator i = dependencies.iterator(); i.hasNext(); )
+            {
+                Dependency dependency = (Dependency) i.next();
+
+                Artifact artifact = artifactFactory.createArtifact( dependency.getGroupId(),
+                                                                    dependency.getArtifactId(),
+                                                                    dependency.getVersion(), dependency.getScope(),
+                                                                    dependency.getType() );
+                dependenciesAsArtifacts.add( artifact );
+            }
+
-                boolean toadd = true;
-                for ( Iterator i = dependencies.iterator(); i.hasNext(); )
+                if ( !dependenciesAsArtifacts.contains( artifact ) )
-                    Dependency dependency = (Dependency) i.next();
-                    if ( artifact.getArtifactId().equals( dependency.getArtifactId() ) &&
-                        artifact.getGroupId().equals( dependency.getGroupId() ) &&
-                        artifact.getVersion().equals( dependency.getVersion() ) )
-                    {
-                        toadd = false;
-                        break;
-                    }
-                }
-
-                if ( toadd )
-                {
-                    result.add( artifact );
+                    transitiveDependencies.add( artifact );
-            return result;
+            return transitiveDependencies;
+        }
+
+        /**
+         * Get the <code>Maven project</code> from the repository depending
+         * the <code>Artifact</code> given.
+         * 
+         * @param artifact
+         *            an artifact
+         * @return the Maven project for the given artifact
+         * @throws ProjectBuildingException
+         *             if any
+         */
+        private MavenProject getMavenProjectFromRepository( Artifact artifact )
+            throws ProjectBuildingException
+        {
+            return mavenProjectBuilder.buildFromRepository( artifact, project.getRepositories(), artifact
+                .getRepository() );
-}
+}
