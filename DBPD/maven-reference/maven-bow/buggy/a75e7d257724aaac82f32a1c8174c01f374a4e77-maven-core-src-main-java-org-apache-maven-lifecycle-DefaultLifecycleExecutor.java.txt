improved error handling and other clean up


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163979 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-        Map phaseMap = new HashMap();
-
-        for ( Iterator i = phases.iterator(); i.hasNext(); )
-        {
-            Phase p = (Phase) i.next();
-
-            // Make a copy of the phase as we will modify it
-            phaseMap.put( p.getId(), new Phase( p ) );
-        }
-
-            MavenProject project = session.getProject();
-
-            ArtifactHandler artifactHandler = artifactHandlerManager.getArtifactHandler( project.getPackaging() );
-
-            if ( artifactHandler != null )
-            {
-                if ( artifactHandler.packageGoal() != null )
-                {
-                    verifyMojoPhase( artifactHandler.packageGoal(), session, phaseMap );
-                }
-
-                if ( artifactHandler.additionalPlugin() != null )
-                {
-                    String additionalPluginGroupId = PluginDescriptor.getDefaultPluginGroupId();
-
-                    String additionalPluginArtifactId = PluginDescriptor.getDefaultPluginArtifactId(
-                        artifactHandler.additionalPlugin() );
-
-                    injectHandlerPluginConfiguration( project, additionalPluginGroupId, additionalPluginArtifactId );
-                }
-            }
-
-            processPluginConfiguration( session.getProject(), session, phaseMap );
-
-            for ( Iterator i = tasks.iterator(); i.hasNext(); )
-            {
-                String task = (String) i.next();
-
-                processGoalChain( task, session, phaseMap );
-
-                if ( phaseMap.containsKey( task ) )
-                {
-                    executePhase( task, session, phaseMap );
-                }
-                else
-                {
-                    executeMojo( task, session );
-                }
-            }
+            processGoals( session, tasks );
+        catch ( ArtifactResolutionException e )
+        {
+            response.setException( e );
+        }
+    private void processGoals( MavenSession session, List tasks )
+        throws ArtifactHandlerNotFoundException, LifecycleExecutionException, PluginNotFoundException,
+        PluginExecutionException, ArtifactResolutionException
+    {
+        Map phaseMap = new HashMap();
+
+        for ( Iterator i = phases.iterator(); i.hasNext(); )
+        {
+            Phase p = (Phase) i.next();
+
+            // Make a copy of the phase as we will modify it
+            phaseMap.put( p.getId(), new Phase( p ) );
+        }
+
+        MavenProject project = session.getProject();
+
+        ArtifactHandler artifactHandler = artifactHandlerManager.getArtifactHandler( project.getPackaging() );
+
+        if ( artifactHandler != null )
+        {
+            if ( artifactHandler.packageGoal() != null )
+            {
+                verifyMojoPhase( artifactHandler.packageGoal(), session, phaseMap );
+            }
+
+            if ( artifactHandler.additionalPlugin() != null )
+            {
+                String additionalPluginGroupId = PluginDescriptor.getDefaultPluginGroupId();
+
+                String additionalPluginArtifactId = PluginDescriptor.getDefaultPluginArtifactId(
+                    artifactHandler.additionalPlugin() );
+
+                injectHandlerPluginConfiguration( project, additionalPluginGroupId, additionalPluginArtifactId );
+            }
+        }
+
+        processPluginConfiguration( session.getProject(), session, phaseMap );
+
+        for ( Iterator i = tasks.iterator(); i.hasNext(); )
+        {
+            String task = (String) i.next();
+
+            processGoalChain( task, session, phaseMap );
+
+            try
+            {
+                if ( phaseMap.containsKey( task ) )
+                {
+                    executePhase( task, session, phaseMap );
+                }
+                else
+                {
+                    executeMojo( task, session );
+                }
+            }
+            catch ( PluginManagerException e )
+            {
+                throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+            }
+        }
+    }
+
-        throws PluginExecutionException, PluginNotFoundException
+        throws PluginExecutionException, PluginNotFoundException, PluginManagerException, ArtifactResolutionException
+            catch ( PluginManagerException e )
+            {
+                dispatcher.dispatchError( event, p.getId(), e );
+                throw e;
+            }
+            catch ( ArtifactResolutionException e )
+            {
+                dispatcher.dispatchError( event, p.getId(), e );
+                throw e;
+            }
-        throws PluginExecutionException, PluginNotFoundException
+        throws PluginExecutionException, PluginNotFoundException, PluginManagerException, ArtifactResolutionException
