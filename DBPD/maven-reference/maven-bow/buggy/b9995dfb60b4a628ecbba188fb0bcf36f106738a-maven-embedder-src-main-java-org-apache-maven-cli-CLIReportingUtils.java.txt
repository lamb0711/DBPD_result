Updating reporting for mojo failures.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@586100 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.AggregatedBuildFailureException;
+import org.apache.maven.ProjectBuildFailureException;
-import org.apache.maven.plugin.AbstractMojoExecutionException;
+import org.apache.maven.lifecycle.MojoBindingUtils;
-                                             .getResourceAsStream(
-                                                                   "META-INF/maven/org.apache.maven/maven-core/pom.properties" );
+                                             .getResourceAsStream( "META-INF/maven/org.apache.maven/maven-core/pom.properties" );
-    static void showError( Exception e, boolean show, MavenEmbedderLogger logger )
+    static void showError( Exception e,
+                           boolean show,
+                           MavenEmbedderLogger logger )
-    static void showError( String message, Exception e,
+    static void showError( String message,
+                           Exception e,
-    private static void buildErrorMessage( Exception e, boolean showStackTraces, StringWriter writer )
+    private static void buildErrorMessage( Exception e,
+                                           boolean showStackTraces,
+                                           StringWriter writer )
-            handled = handleLifecycleExecutionException( (LifecycleExecutionException) e, showStackTraces, writer );
+            handled = handleLifecycleExecutionException( (LifecycleExecutionException) e,
+                                                         showStackTraces,
+                                                         writer );
-
-                    return handleProjectBuildingException( (ProjectBuildingException) nestedCause, writer );
+                    return handleProjectBuildingException( (ProjectBuildingException) nestedCause,
+                                                           writer );
-    private static void handleGenericException( Throwable exception, StringWriter writer )
+    private static void handleGenericException( Throwable exception,
+                                                StringWriter writer )
-                                                              boolean showStackTraces, StringWriter writer )
+                                                              boolean showStackTraces,
+                                                              StringWriter writer )
-    private static boolean handleBuildFailureException( BuildFailureException e, StringWriter writer )
+    private static boolean handleBuildFailureException( BuildFailureException e,
+                                                        StringWriter writer )
-        Throwable cause = e.getCause();
-        if ( ( cause != null ) && ( cause instanceof MojoFailureException ) )
+        if ( e instanceof AggregatedBuildFailureException )
-            writer.write( ( (AbstractMojoExecutionException) cause ).getLongMessage() );
+            writer.write( "Mojo (aggregator): " );
+            writer.write( NEWLINE );
+            writer.write( "    " );
+            writer.write( MojoBindingUtils.toString( ( (AggregatedBuildFailureException) e ).getBinding() ) );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "FAILED while executing in directory:" );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "    " );
+            writer.write( ( (AggregatedBuildFailureException) e ).getExecutionRootDirectory() );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Reason:" );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+
+            handleMojoFailureException( ( (AggregatedBuildFailureException) e ).getMojoFailureException(),
+                                        writer );
+
+
+            return true;
+        }
+        else if ( e instanceof ProjectBuildFailureException )
+        {
+            writer.write( NEWLINE );
+            writer.write( "Mojo: " );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "    " );
+            writer.write( MojoBindingUtils.toString( ( (ProjectBuildFailureException) e ).getBinding() ) );
+            writer.write( NEWLINE );
+            writer.write( "FAILED for project: " );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "    " );
+            writer.write( ( (ProjectBuildFailureException) e ).getProjectId() );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+            writer.write( "Reason:" );
+            writer.write( NEWLINE );
+            writer.write( NEWLINE );
+
+            handleMojoFailureException( ( (ProjectBuildFailureException) e ).getMojoFailureException(),
+                                        writer );
+
+    private static boolean handleMojoFailureException( MojoFailureException error,
+                                                       StringWriter writer )
+    {
+        String message = error.getLongMessage();
+        if ( message == null )
+        {
+            message = error.getMessage();
+        }
+
+        writer.write( message );
+        writer.write( NEWLINE );
+
+        return true;
+    }
+
-                    logReactorSummaryLine( project.getName(), "FAILED",
-                                           rm.getBuildFailure( project ).getTime(), logger );
+                    logReactorSummaryLine( project.getName(),
+                                           "FAILED",
+                                           rm.getBuildFailure( project ).getTime(),
+                                           logger );
-                    logReactorSummaryLine( project.getName(), "SUCCESS",
+                    logReactorSummaryLine( project.getName(),
+                                           "SUCCESS",
