o Restored forking to other mojo

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@799083 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
+import org.apache.maven.plugin.PluginConfigurationException;
-                    logger.info( executionDescription( mojoExecution, currentProject ) );
-                    pluginManager.executeMojo( session, mojoExecution );
-                }                         
+                    execute( currentProject, session, mojoExecution );
+                }
-        
+
+    private void execute( MavenProject project, MavenSession session, MojoExecution mojoExecution )
+        throws MojoFailureException, MojoExecutionException, PluginConfigurationException, PluginManagerException
+    {
+        MavenProject executionProject = null;
+
+        List<MojoExecution> forkedExecutions = mojoExecution.getForkedExecutions();
+
+        if ( !forkedExecutions.isEmpty() )
+        {
+            executionProject = project.clone();
+
+            session.setCurrentProject( executionProject );
+            try
+            {
+                for ( MojoExecution forkedExecution : forkedExecutions )
+                {
+                    execute( executionProject, session, forkedExecution );
+                }
+            }
+            finally
+            {
+                session.setCurrentProject( project );
+            }
+        }
+
+        project.setExecutionProject( executionProject );
+
+        logger.info( executionDescription( mojoExecution, project ) );
+
+        pluginManager.executeMojo( session, mojoExecution );
+    }
+
-            if ( StringUtils.isNotEmpty( mojoDescriptor.isDependencyResolutionRequired() ) )
-            {
-                requiredDependencyResolutionScopes.add( mojoDescriptor.isDependencyResolutionRequired() );
-            }
-
+
+            calculateForkedExecutions( mojoExecution, project, new HashSet<MojoDescriptor>() );
+
+            collectDependencyResolutionScopes( requiredDependencyResolutionScopes, mojoExecution );
-    
+
+    private void collectDependencyResolutionScopes( Collection<String> requiredDependencyResolutionScopes,
+                                                    MojoExecution mojoExecution )
+    {
+        String requiredDependencyResolutionScope = mojoExecution.getMojoDescriptor().isDependencyResolutionRequired();
+
+        if ( StringUtils.isNotEmpty( requiredDependencyResolutionScope ) )
+        {
+            requiredDependencyResolutionScopes.add( requiredDependencyResolutionScope );
+        }
+
+        for ( MojoExecution forkedExecution : mojoExecution.getForkedExecutions() )
+        {
+            collectDependencyResolutionScopes( requiredDependencyResolutionScopes, forkedExecution );
+        }
+    }
+
+    private void calculateForkedExecutions( MojoExecution mojoExecution, MavenProject project,
+                                            Collection<MojoDescriptor> alreadyForkedExecutions )
+        throws MojoNotFoundException
+    {
+        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
+
+        if ( !alreadyForkedExecutions.add( mojoDescriptor ) )
+        {
+            return;
+        }
+
+        PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
+
+        if ( StringUtils.isNotEmpty( mojoDescriptor.getExecutePhase() ) )
+        {
+            // TODO
+
+        }
+        else if ( StringUtils.isNotEmpty( mojoDescriptor.getExecuteGoal() ) )
+        {
+            String forkedGoal = mojoDescriptor.getExecuteGoal();
+
+            MojoDescriptor forkedMojoDescriptor = pluginDescriptor.getMojo( forkedGoal );
+            if ( forkedMojoDescriptor == null )
+            {
+                throw new MojoNotFoundException( forkedGoal, pluginDescriptor );
+            }
+
+            MojoExecution forkedExecution = new MojoExecution( forkedMojoDescriptor, forkedGoal );
+
+            populateMojoExecutionConfiguration( project, forkedExecution, true );
+
+            calculateForkedExecutions( forkedExecution, project, alreadyForkedExecutions );
+
+            mojoExecution.addForkedExecution( forkedExecution );
+        }
+    }
+
