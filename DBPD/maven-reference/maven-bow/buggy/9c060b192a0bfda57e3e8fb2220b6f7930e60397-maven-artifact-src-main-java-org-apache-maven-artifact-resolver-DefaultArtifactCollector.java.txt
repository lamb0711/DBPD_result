PR: MNG-613
Completion of the version selection from a range.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@279720 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.factory.ArtifactFactory;
+import org.apache.maven.artifact.versioning.ArtifactVersion;
-                                             ArtifactMetadataSource source, ArtifactFilter filter,
-                                             ArtifactFactory artifactFactory, List listeners )
+                                             ArtifactMetadataSource source, ArtifactFilter filter, List listeners )
-                        source, filter, artifactFactory, listeners );
+                        source, filter, listeners );
-                                             ArtifactMetadataSource source, ArtifactFilter filter,
-                                             ArtifactFactory artifactFactory, List listeners )
+                                             ArtifactMetadataSource source, ArtifactFilter filter, List listeners )
-                     artifactFactory, listeners );
+                     listeners );
-                          ArtifactFilter filter, ArtifactFactory artifactFactory, List listeners )
+                          ArtifactFilter filter, List listeners )
-                        String version = versionRange.getSelectedVersion().toString();
-                        artifact.selectVersion( version );
+
+                        // TODO: maybe its better to just pass the range through to retrieval and use a transformation?
+                        ArtifactVersion version;
+                        if ( !versionRange.isSelectedVersionKnown() )
+                        {
+                            List versions = artifact.getAvailableVersions();
+                            if ( versions == null )
+                            {
+                                versions = source.retrieveAvailableVersions( artifact, localRepository,
+                                                                             remoteRepositories );
+                                artifact.setAvailableVersions( versions );
+                            }
+
+                            version = versionRange.matchVersion( versions );
+
+                            if ( version == null )
+                            {
+                                if ( versions.isEmpty() )
+                                {
+                                    throw new OverConstrainedVersionException(
+                                        "No versions are present in the repository for the artifact with a range " +
+                                            versionRange );
+                                }
+                                else
+                                {
+                                    throw new OverConstrainedVersionException(
+                                        "Couldn't find a version in " + versions + " to match range " + versionRange );
+                                }
+                            }
+                        }
+                        else
+                        {
+                            version = versionRange.getSelectedVersion();
+                        }
+
+                        artifact.selectVersion( version.toString() );
+                        fireEvent( ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, child );
-                         artifactFactory, listeners );
+                         listeners );
+                case ResolutionListener.SELECT_VERSION_FROM_RANGE:
+                    listener.selectVersionFromRange( node.getArtifact() );
+                    break;
