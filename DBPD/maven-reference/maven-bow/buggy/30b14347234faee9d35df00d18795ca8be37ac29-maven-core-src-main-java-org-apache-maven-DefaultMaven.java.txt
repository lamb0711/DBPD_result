Resolving: MNG-421

o External profiles (from settings.xml, profiles.xml) are now available before the main MavenProject is constructed, which allows repositories defined in external profiles to be used to resolve project parents and dependencies.

NOTE: I need to double-check whether the profile-defined repos are actually used to resolve the parent project(s)...there may be another commit following on the heels of this one.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@189667 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.ExternalProfileInjector;
-    protected ExternalProfileInjector externalProfileInjector;
-
-                projects.add( projectBuilder.buildStandaloneSuperProject( request.getLocalRepository() ) );
+                List externalProfiles = getActiveExternalProfiles( null, request.getSettings() );
+                
+                projects.add( projectBuilder.buildStandaloneSuperProject( request.getLocalRepository(), externalProfiles ) );
-        MavenProject project = projectBuilder.build( pom, localRepository );
+        List externalProfiles = getActiveExternalProfiles( pom, settings );
+        MavenProject project = projectBuilder.build( pom, localRepository, externalProfiles );
+        
+        return project;
+    }
+
+    private List getActiveExternalProfiles( File pom, Settings settings ) throws ProjectBuildingException
+    {
+        List externalProfiles = new ArrayList();
+        
-            List profiles = new ArrayList();
-            
-                profiles.add( profile );
+                externalProfiles.add( profile );
-            
-            externalProfileInjector.injectExternalProfiles( project, profiles );
-        try
+        if( pom != null )
-            ProfilesRoot root = profilesBuilder.buildProfiles( pom.getParentFile() );
-            
-            if( root != null )
+            try
-                List profiles = new ArrayList();
+                ProfilesRoot root = profilesBuilder.buildProfiles( pom.getParentFile() );
-                for ( Iterator it = root.getProfiles().iterator(); it.hasNext(); )
+                if( root != null )
-                    org.apache.maven.profiles.Profile rawProfile = (org.apache.maven.profiles.Profile) it.next();
-                    
-                    profiles.add( ModelNormalizationUtils.convertFromProfileXmlProfile( rawProfile ) );
+                    for ( Iterator it = root.getProfiles().iterator(); it.hasNext(); )
+                    {
+                        org.apache.maven.profiles.Profile rawProfile = (org.apache.maven.profiles.Profile) it.next();
+                        
+                        externalProfiles.add( ModelNormalizationUtils.convertFromProfileXmlProfile( rawProfile ) );
+                    }
-                
-                externalProfileInjector.injectExternalProfiles( project, profiles );
+            }
+            catch ( IOException e )
+            {
+                throw new ProjectBuildingException( "Cannot read profiles.xml resource for pom: " + pom, e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new ProjectBuildingException( "Cannot parse profiles.xml resource for pom: " + pom, e );
-        catch ( IOException e )
-        {
-            throw new ProjectBuildingException( "Cannot read profiles.xml resource for pom: " + pom, e );
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new ProjectBuildingException( "Cannot parse profiles.xml resource for pom: " + pom, e );
-        }
-        return project;
+        return externalProfiles;
