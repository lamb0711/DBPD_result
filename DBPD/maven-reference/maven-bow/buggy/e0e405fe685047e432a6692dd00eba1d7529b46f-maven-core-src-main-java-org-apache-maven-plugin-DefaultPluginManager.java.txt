clean up plugin configuration handling


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163652 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.component.configurator.BasicComponentConfigurator;
+import org.codehaus.plexus.configuration.PlexusConfiguration;
+import org.codehaus.plexus.configuration.PlexusConfigurationException;
-import java.util.ArrayList;
+    protected ComponentConfigurator configurator;
+
-    public void processPluginDescriptor( MavenPluginDescriptor mavenPluginDescriptor ) throws CycleDetectedException
+    public void processPluginDescriptor( MavenPluginDescriptor mavenPluginDescriptor )
+        throws CycleDetectedException
-    public void verifyPluginForGoal( String goalName, MavenSession session ) throws Exception
+    public void verifyPluginForGoal( String goalName, MavenSession session )
+        throws Exception
-    public void verifyPlugin( String groupId, String artifactId, MavenSession session ) throws Exception
+    public void verifyPlugin( String groupId, String artifactId, MavenSession session )
+        throws Exception
-                                                                          "maven-plugin", "jar", null );
+                                                                          "maven-plugin", null );
-    protected void addPlugin( Artifact pluginArtifact, MavenSession session ) throws Exception
+    protected void addPlugin( Artifact pluginArtifact, MavenSession session )
+        throws Exception
-    public void executeMojo( MavenSession session, String goalName ) throws PluginExecutionException
+    public void executeMojo( MavenSession session, String goalName )
+        throws PluginExecutionException
+            // TODO: can probable refactor these a little when only the new plugin technique is in place
+            PlexusConfiguration configuration = getProjectDefinedPluginConfiguration( session.getProject(),
+                                                                                      mojoDescriptor.getId() );
+
+            Map map = getPluginConfigurationFromExpressions( mojoDescriptor, configuration, session );
+
-                populateParameters( plugin, mojoDescriptor, session );
+                populatePluginFields( plugin, configuration, map );
-                request = new PluginExecutionRequest( createParameters( mojoDescriptor, session ) );
+                request = createPluginRequest( configuration, map );
-    private void releaseComponents( MojoDescriptor goal, PluginExecutionRequest request ) throws Exception
+    private void releaseComponents( MojoDescriptor goal, PluginExecutionRequest request )
+        throws Exception
-    private void populateParameters( Plugin plugin, MojoDescriptor mojoDescriptor, MavenSession session )
+    private static PluginExecutionRequest createPluginRequest( PlexusConfiguration configuration, Map map )
-        // TODO: merge eventually, just to avoid reuse
-        // TODO: probably want to use the plexus component configurator... then do the additional processing in
-        //  createParameters afterwards. Not sure how we might find files that are nested in other objects... perhaps
-        //  we add a "needs translation" to the mojo so such types can be translated (implementing some interface) and
-        //  address their own file objects
-        Map values = createParameters( mojoDescriptor, session );
-
-        List parameters = mojoDescriptor.getParameters();
-
-        Xpp3Dom dom = new Xpp3Dom( mojoDescriptor.getId() );
-
-        for ( Iterator i = parameters.iterator(); i.hasNext(); )
-        {
-            Parameter param = (Parameter) i.next();
-            String name = param.getName();
-            Object value = values.get( name );
-
-            // TODO:Still not complete robust - need to merge in the processing in createParameters
-            if ( value instanceof String )
-            {
-                Xpp3Dom d = new Xpp3Dom( name );
-                d.setValue( (String) value );
-                dom.addChild( d );
-            }
-            else
-            {
-                Class clazz = plugin.getClass();
-                try
-                {
-                    Field f = clazz.getDeclaredField( name );
-                    boolean accessible = f.isAccessible();
-                    if ( !accessible )
-                    {
-                        f.setAccessible( true );
-                    }
-
-                    f.set( plugin, value );
-
-                    if ( !accessible )
-                    {
-                        f.setAccessible( false );
-                    }
-                }
-                catch ( NoSuchFieldException e )
-                {
-                    throw new PluginConfigurationException( "Unable to set field '" + name + "' on '" + clazz + "'" );
-                }
-                catch ( IllegalAccessException e )
-                {
-                    throw new PluginConfigurationException( "Unable to set field '" + name + "' on '" + clazz + "'" );
-                }
-            }
-        }
-
-        // TODO: should be a component
-        ComponentConfigurator configurator = new BasicComponentConfigurator();
-            configurator.configureComponent( plugin, new XmlPlexusConfiguration( dom ) );
+            Map parameters = new HashMap();
+            PlexusConfiguration[] children = configuration.getChildren();
+            for ( int i = 0; i < children.length; i++ )
+            {
+                PlexusConfiguration child = children[i];
+                parameters.put( child.getName(), child.getValue() );
+            }
+            map = CollectionUtils.mergeMaps( map, parameters );
+        }
+        catch ( PlexusConfigurationException e )
+        {
+            throw new PluginConfigurationException( "Unable to construct map from plugin configuration", e );
+        }
+        return new PluginExecutionRequest( map );
+    }
+
+    private void populatePluginFields( Plugin plugin, PlexusConfiguration configuration, Map map )
+        throws PluginConfigurationException
+    {
+        try
+        {
+            configurator.configureComponent( plugin, configuration );
+
+        // Configuration does not store objects, so the non-String fields are configured here
+        // TODO: we don't have converters, so something things that -are- strings are not configured properly (eg String -> File from an expression)
+        for ( Iterator i = map.keySet().iterator(); i.hasNext(); )
+        {
+            String key = (String) i.next();
+            Object value = map.get( key );
+
+            Class clazz = plugin.getClass();
+            try
+            {
+                Field f = clazz.getDeclaredField( key );
+                boolean accessible = f.isAccessible();
+                if ( !accessible )
+                {
+                    f.setAccessible( true );
+                }
+
+                f.set( plugin, value );
+
+                if ( !accessible )
+                {
+                    f.setAccessible( false );
+                }
+            }
+            catch ( NoSuchFieldException e1 )
+            {
+                throw new PluginConfigurationException( "Unable to set field '" + key + "' on '" + clazz + "'" );
+            }
+            catch ( IllegalAccessException e11 )
+            {
+                throw new PluginConfigurationException( "Unable to set field '" + key + "' on '" + clazz + "'" );
+            }
+        }
-    public Map createParameters( MojoDescriptor goal, MavenSession session ) throws PluginConfigurationException
+    private Map getPluginConfigurationFromExpressions( MojoDescriptor goal, PlexusConfiguration configuration,
+                                                       MavenSession session )
+        throws PluginConfigurationException
-            String expression = parameter.getExpression();
-
-            Object value = PluginParameterExpressionEvaluator.evaluate( expression, session );
-
-            getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value );
-
-            if ( value == null )
+            if ( configuration.getChild( key, false ) == null )
-                if ( parameter.getDefaultValue() != null )
+                String expression = parameter.getExpression();
+
+                Object value = PluginParameterExpressionEvaluator.evaluate( expression, session );
+
+                getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value );
+
+                if ( value == null )
-                    value = PluginParameterExpressionEvaluator.evaluate( parameter.getDefaultValue(), session );
+                    if ( parameter.getDefaultValue() != null )
+                    {
+                        value = PluginParameterExpressionEvaluator.evaluate( parameter.getDefaultValue(), session );
+                    }
-            }
-            map.put( key, value );
-        }
+                // ----------------------------------------------------------------------
+                // We will perform a basic check here for parameters values that are
+                // required. Required parameters can't be null so we throw an
+                // Exception in the case where they are. We probably want some
+                // pluggable
+                // mechanism here but this will catch the most obvious of
+                // misconfigurations.
+                // ----------------------------------------------------------------------
-        if ( session.getProject() != null )
-        {
-            map = mergeProjectDefinedPluginConfiguration( session.getProject(), goal.getId(), map );
-        }
+                if ( value == null && parameter.isRequired() )
+                {
+                    throw new PluginConfigurationException( createPluginParameterRequiredMessage( goal, parameter ) );
+                }
-        for ( int i = 0; i < parameters.size(); i++ )
-        {
-            Parameter parameter = (Parameter) parameters.get( i );
+                String type = parameter.getType();
-            String key = parameter.getName();
+                // TODO: Not sure how we might find files that are nested in other objects... perhaps
+                //  we add a "needs translation" to the mojo so such types can be translated (implementing some interface) and
+                //  address their own file objects
+                if ( type != null && ( type.equals( "File" ) || type.equals( "java.io.File" ) ) )
+                {
+                    value = pathTranslator.alignToBaseDirectory( (String) value,
+                                                                 session.getProject().getFile().getParentFile() );
+                }
-            Object value = map.get( key );
-
-            // ----------------------------------------------------------------------
-            // We will perform a basic check here for parameters values that are
-            // required. Required parameters can't be null so we throw an
-            // Exception in the case where they are. We probably want some
-            // pluggable
-            // mechanism here but this will catch the most obvious of
-            // misconfigurations.
-            // ----------------------------------------------------------------------
-
-            if ( value == null && parameter.isRequired() )
-            {
-                throw new PluginConfigurationException( createPluginParameterRequiredMessage( goal, parameter ) );
-            }
-
-            String type = parameter.getType();
-
-            if ( type != null && ( type.equals( "File" ) || type.equals( "java.io.File" ) ) )
-            {
-                value = pathTranslator.alignToBaseDirectory( (String) value, session.getProject().getFile()
-                                                                                    .getParentFile() );
-
-    public static Map mergeProjectDefinedPluginConfiguration( MavenProject project, String goalId, Map map )
+    private static PlexusConfiguration getProjectDefinedPluginConfiguration( MavenProject project, String goalId )
+        Xpp3Dom dom = null;
+
-            for ( Iterator iterator = project.getPlugins().iterator(); iterator.hasNext(); )
+            for ( Iterator iterator = project.getPlugins().iterator(); iterator.hasNext() && dom == null; )
-                    map = CollectionUtils.mergeMaps( plugin.getConfiguration(), map );
+                    dom = (Xpp3Dom) plugin.getConfiguration();
-                                map = CollectionUtils.mergeMaps( goal.getConfiguration(), map );
+                                Xpp3Dom goalConfiguration = copyXpp3Dom( (Xpp3Dom) goal.getConfiguration() );
+                                mergeXpp3Dom( goalConfiguration, dom );
+                                dom = goalConfiguration;
-
-                    return map;
-        return map;
+        PlexusConfiguration configuration;
+        if ( dom == null )
+        {
+            configuration = new XmlPlexusConfiguration( "configuration" );
+        }
+        else
+        {
+            configuration = new XmlPlexusConfiguration( dom );
+        }
+
+        return configuration;
+    }
+
+    private static void mergeXpp3Dom( Xpp3Dom dominant, Xpp3Dom recessive )
+    {
+        // TODO: how to merge lists rather than override?
+        // TODO: share this as some sort of assembler, implement a walk interface?
+        Xpp3Dom[] children = recessive.getChildren();
+        for ( int i = 0; i < children.length; i++ )
+        {
+            Xpp3Dom child = children[i];
+            Xpp3Dom childDom = dominant.getChild( child.getName() );
+            if ( childDom != null )
+            {
+                mergeXpp3Dom( childDom, child );
+            }
+            else
+            {
+                dominant.addChild( copyXpp3Dom( child ) );
+            }
+        }
+    }
+
+    private static Xpp3Dom copyXpp3Dom( Xpp3Dom src )
+    {
+        // TODO: into Xpp3Dom as a copy constructor
+        Xpp3Dom dom = new Xpp3Dom( src.getName() );
+        dom.setValue( src.getValue() );
+
+        String[] attributeNames = src.getAttributeNames();
+        for ( int i = 0; i < attributeNames.length; i++ )
+        {
+            String attributeName = attributeNames[i];
+            dom.setAttribute( attributeName, src.getAttribute( attributeName ) );
+        }
+
+        Xpp3Dom[] children = src.getChildren();
+        for ( int i = 0; i < children.length; i++ )
+        {
+            dom.addChild( copyXpp3Dom( children[i] ) );
+        }
+
+        return dom;
-        message.append( "The '" + parameter.getName() ).append( "' parameter is required for the execution of the " )
-               .append( mojo.getId() ).append( " mojo and cannot be null." );
+        message.append( "The '" + parameter.getName() ).append( "' parameter is required for the execution of the " ).append(
+            mojo.getId() ).append( " mojo and cannot be null." );
-    public void contextualize( Context context ) throws ContextException
+    public void contextualize( Context context )
+        throws ContextException
-        artifactFilter = new ExclusionSetFilter( new String[] {
-            "maven-core",
-            "maven-artifact",
-            "maven-model",
-            "maven-settings",
-            "maven-monitor",
-            "maven-plugin",
-            "plexus-container-api",
-            "plexus-container-default",
-            "plexus-artifact-container",
-            "wagon-provider-api",
-            "classworlds" } );
+        artifactFilter = new ExclusionSetFilter( new String[]{"maven-core", "maven-artifact", "maven-model",
+                                                              "maven-settings", "maven-monitor", "maven-plugin",
+                                                              "plexus-container-api", "plexus-container-default",
+                                                              "plexus-artifact-container", "wagon-provider-api",
+                                                              "classworlds"} );
-                                               MavenProjectBuilder mavenProjectBuilder )
+                                                MavenProjectBuilder mavenProjectBuilder )
