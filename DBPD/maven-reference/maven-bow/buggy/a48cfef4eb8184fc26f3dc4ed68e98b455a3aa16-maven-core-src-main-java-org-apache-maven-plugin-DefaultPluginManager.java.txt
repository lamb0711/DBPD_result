PR: MNG-423
move default value into configuration, rather than relying on Java. More convenient for other languages, and allows us to validate/document it. Cleaned up the plugin manager handling. More should be pushed into plexus proper.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@188647 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-            if ( pluginDescriptor.getVersion() == null )
-            {
-                // TODO: temporary - until we're done testing that version is always written
-                throw new NullPointerException( "Version was null - check your plugin '" + pluginDescriptor.getId() +
-                                                "' was built with Maven 2.0 Alpha 2" );
-            }
-
-        
+
-                Artifact pluginArtifact = artifactFactory.createArtifact( groupId, artifactId, version, Artifact.SCOPE_RUNTIME,
+                Artifact pluginArtifact = artifactFactory.createArtifact( groupId, artifactId, version,
+                                                                          Artifact.SCOPE_RUNTIME,
-            ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections.singleton( pluginArtifact ), session.getRemoteRepositories(), session.getLocalRepository(), metadataSource, artifactFilter );
-            
+            ArtifactResolutionResult result = artifactResolver.resolveTransitively(
+                Collections.singleton( pluginArtifact ), session.getRemoteRepositories(), session.getLocalRepository(),
+                metadataSource, artifactFilter );
+
-            
+
-            
+
-                File artifactFile = artifact.getFile();
-                
+
-            
+
-        
+
-            
+
-            
-            if( pluginContainer == null )
+
+            if ( pluginContainer == null )
-            
+
-            // TODO: can probable refactor these a little when only the new plugin technique is in place
-
-                // Validate against non-editable (@readonly) parameters, to make sure users aren't trying to 
-                // override in the POM.
-                // TODO: currently breaks it0014, as an expression is in pomConfiguration
-//                validatePomConfiguration( mojoDescriptor, pomConfiguration );
-            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, pathTranslator,
-                                                                                              getLogger() );
+            // Validate against non-editable (@readonly) parameters, to make sure users aren't trying to
+            // override in the POM.
+            validatePomConfiguration( mojoDescriptor, pomConfiguration );
-            // TODO: Go back to this when we get the container ready to configure mojos...
+            // TODO: plexus
-            try
-            {
-                getPluginConfigurationFromExpressions( plugin, mojoDescriptor, mergedConfiguration,
-                                                       pluginContainer, expressionEvaluator );
+            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, pathTranslator,
+                                                                                              getLogger() );
+            checkRequiredParameters( mojoDescriptor, mergedConfiguration, expressionEvaluator, plugin );
-                populatePluginFields( plugin, mojoDescriptor, mergedConfiguration, pluginContainer, expressionEvaluator );
-            }
-            catch ( ExpressionEvaluationException e )
-            {
-                throw new MojoExecutionException( "Unable to configure plugin", e );
-            }
+            populatePluginFields( plugin, mojoDescriptor, mergedConfiguration, pluginContainer, expressionEvaluator );
-                if( getLogger().isErrorEnabled() )
+                if ( getLogger().isErrorEnabled() )
+    private void checkRequiredParameters( MojoDescriptor goal, PlexusConfiguration configuration,
+                                          ExpressionEvaluator expressionEvaluator, Mojo plugin )
+        throws PluginConfigurationException
+    {
+        // TODO: this should be built in to the configurator, as we presently double process the expressions
+
+        List parameters = goal.getParameters();
+
+        List invalidParameters = new ArrayList();
+
+        for ( int i = 0; i < parameters.size(); i++ )
+        {
+            Parameter parameter = (Parameter) parameters.get( i );
+
+            // the key for the configuration map we're building.
+            String key = parameter.getName();
+
+            Object fieldValue = null;
+            String expression = null;
+            PlexusConfiguration value = configuration.getChild( key, false );
+            try
+            {
+                if ( value != null )
+                {
+                    expression = value.getValue( null );
+                    fieldValue = expressionEvaluator.evaluate( expression );
+                    if ( fieldValue == null )
+                    {
+                        fieldValue = value.getAttribute( "default-value", null );
+                    }
+                }
+
+                if ( fieldValue == null && StringUtils.isNotEmpty( parameter.getAlias() ) )
+                {
+                    value = configuration.getChild( parameter.getAlias(), false );
+                    if ( value != null )
+                    {
+                        expression = value.getValue( null );
+                        fieldValue = expressionEvaluator.evaluate( expression );
+                        if ( fieldValue == null )
+                        {
+                            fieldValue = value.getAttribute( "default-value", null );
+                        }
+                    }
+                }
+            }
+            catch ( ExpressionEvaluationException e )
+            {
+                throw new PluginConfigurationException( "Bad expression", e );
+            }
+
+            if ( fieldValue == null && goal.getComponentConfigurator() == null )
+            {
+                try
+                {
+                    // TODO: remove in beta-1
+                    Field field = findPluginField( plugin.getClass(), parameter.getName() );
+                    boolean accessible = field.isAccessible();
+                    if ( !accessible )
+                    {
+                        field.setAccessible( true );
+                    }
+                    fieldValue = field.get( plugin );
+                    if ( !accessible )
+                    {
+                        field.setAccessible( false );
+                    }
+                    if ( fieldValue != null )
+                    {
+                        getLogger().warn( "DEPRECATED: using default-value to set the default value of field '" +
+                                          parameter.getName() + "'" );
+                    }
+                }
+                catch ( NoSuchFieldException e )
+                {
+                    throw new PluginConfigurationException( "Unable to find field to check default value", e );
+                }
+                catch ( IllegalAccessException e )
+                {
+                    throw new PluginConfigurationException( "Unable to read field to check default value", e );
+                }
+            }
+
+            if ( parameter.isRequired() && fieldValue == null )
+            {
+                parameter.setExpression( expression );
+                invalidParameters.add( parameter );
+            }
+        }
+
+        if ( !invalidParameters.isEmpty() )
+        {
+            throw new PluginParameterException( goal, invalidParameters );
+        }
+    }
+
-            boolean editable = parameter.isEditable();
-
-            // the key used to lookup the parameter in the config from the POM, etc.
-            String lookupKey = parameter.getAlias();
+            PlexusConfiguration value = pomConfiguration.getChild( key, false );
-            if ( StringUtils.isEmpty( lookupKey ) )
+            if ( value == null && StringUtils.isNotEmpty( parameter.getAlias() ) )
-                lookupKey = key;
+                key = parameter.getAlias();
+                value = pomConfiguration.getChild( key, false );
-            // Make sure the parameter is either editable/configurable, or else is NOT specified in the POM 
-            if ( !editable && ( pomConfiguration.getChild( lookupKey, false ) != null ||
-                pomConfiguration.getChild( key, false ) != null ) )
+            // Make sure the parameter is either editable/configurable, or else is NOT specified in the POM
+            if ( !parameter.isEditable() && value != null )
-                StringBuffer errorMessage = new StringBuffer().append( "ERROR: Cannot override read-only parameter: " ).append(
-                    key );
-
-                if ( !lookupKey.equals( key ) )
-                {
-                    errorMessage.append( " (with alias: " ).append( lookupKey ).append( ")" );
-                }
-
+                StringBuffer errorMessage = new StringBuffer().append( "ERROR: Cannot override read-only parameter: " );
+                errorMessage.append( key );
-                configurator = (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, configuratorId );
+                configurator =
+                    (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, configuratorId );
-            configurator.configureComponent( plugin, configuration, expressionEvaluator, pluginContainer.getContainerRealm() );
-
+            configurator.configureComponent( plugin, configuration, expressionEvaluator,
+                                             pluginContainer.getContainerRealm() );
-    /**
-     * @deprecated [JC] in favor of what?
-     */
-    private void getPluginConfigurationFromExpressions( Mojo plugin, MojoDescriptor goal,
-                                                        PlexusConfiguration mergedConfiguration,
-                                                        PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
-        throws ExpressionEvaluationException, PluginConfigurationException
-    {
-        List parameters = goal.getParameters();
-
-        List invalidParameters = new ArrayList();
-
-        if ( parameters == null || parameters.isEmpty() )
-        {
-            return;
-        }
-
-        for ( int i = 0; i < parameters.size(); i++ )
-        {
-            Parameter parameter = (Parameter) parameters.get( i );
-
-            boolean editable = parameter.isEditable();
-
-            // the key for the configuration map we're building.
-            String key = parameter.getName();
-
-            // the key used to lookup the parameter in the config from the POM, etc.
-            String lookupKey = parameter.getAlias();
-
-            if ( StringUtils.isEmpty( lookupKey ) )
-            {
-                lookupKey = key;
-            }
-
-            String expression;
-
-            boolean foundInConfiguration = false;
-
-            if ( mergedConfiguration.getChild( lookupKey, false ) != null )
-            {
-                expression = mergedConfiguration.getChild( lookupKey, false ).getValue( null );
-                foundInConfiguration = true;
-            }
-            else if ( mergedConfiguration.getChild( key, false ) != null )
-            {
-                expression = mergedConfiguration.getChild( key, false ).getValue( null );
-                foundInConfiguration = true;
-            }
-            else
-            {
-                expression = parameter.getExpression();
-            }
-
-            if ( foundInConfiguration && expression != null && parameter.getDeprecated() != null )
-            {
-                PlexusConfiguration goalConfiguration = goal.getMojoConfiguration();
-                
-                // TODO: Go back to this when we get the container ready to configure mojos...
-//                PlexusConfiguration goalConfiguration = goal.getConfiguration();
-
-                if ( !expression.equals( goalConfiguration.getChild( lookupKey, false ).getValue( null ) ) &&
-                    !expression.equals( goalConfiguration.getChild( key, false ).getValue( null ) ) )
-                {
-                    StringBuffer message = new StringBuffer().append( "DEPRECATED: " ).append( key );
-
-                    if ( !lookupKey.equals( key ) )
-                    {
-                        message.append( " (aliased to " ).append( lookupKey ).append( ")" );
-                    }
-
-                    message.append( " is deprecated.\n\t" ).append( parameter.getDeprecated() );
-
-                    getLogger().warn( message.toString() );
-                }
-            }
-
-            Object value = expressionEvaluator.evaluate( expression );
-
-            getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value +
-                               " for parameter: \'" + key + "\'" );
-
-            // TODO: remove. If there is a default value, required should have been removed by the descriptor generator
-            if ( value == null && goal.getComponentConfigurator() == null )
-            {
-                Object defaultValue;
-                try
-                {
-                    Field pluginField = findPluginField( plugin.getClass(), parameter.getName() );
-                    boolean accessible = pluginField.isAccessible();
-                    if ( !accessible )
-                    {
-                        pluginField.setAccessible( true );
-                    }
-                    defaultValue = pluginField.get( plugin );
-                    if ( !accessible )
-                    {
-                        pluginField.setAccessible( false );
-                    }
-                }
-                catch ( IllegalAccessException e )
-                {
-                    String message = "Error finding field for parameter '" + parameter.getName() + "'";
-                    throw new PluginConfigurationException( message, e );
-                }
-                catch ( NoSuchFieldException e )
-                {
-                    String message = "Error finding field for parameter '" + parameter.getName() + "'";
-                    throw new PluginConfigurationException( message, e );
-                }
-                if ( defaultValue != null )
-                {
-                    // TODO: allow expressions?
-                    value = defaultValue;
-                }
-            }
-
-            // ----------------------------------------------------------------------
-            // We will perform a basic check here for parameters values that are
-            // required. Required parameters can't be null so we throw an
-            // Exception in the case where they are. We probably want some
-            // pluggable
-            // mechanism here but this will catch the most obvious of
-            // misconfigurations.
-            // ----------------------------------------------------------------------
-
-            if ( value == null && parameter.isRequired() )
-            {
-                invalidParameters.add( parameter );
-            }
-
-        }
-
-        if ( !invalidParameters.isEmpty() )
-        {
-            throw new PluginParameterException( goal, invalidParameters );
-        }
-    }
-
-        // TODO: Note: maven-plugin just re-added until all plugins are switched over...
-        artifactFilter = new ExclusionSetFilter( new String[]
-        {
-            "bsh",
-            "classworlds",
-            "doxia-core",
-            "maven-artifact",
-            "maven-core",
-            "maven-model",
-            "maven-monitor",
-            "maven-plugin",
-            "maven-plugin-api",
-            "maven-plugin-descriptor",
-            "maven-project",
-            "maven-reporting-api",
-            "maven-script-beanshell",
-            "maven-settings",
-            "plexus-bsh-factory",
-            "plexus-container-default",
-            "plexus-utils",
-            "wagon-provider-api"
-        } );
+        artifactFilter = new ExclusionSetFilter( new String[]{"bsh", "classworlds", "doxia-core", "maven-artifact",
+                                                              "maven-core", "maven-model", "maven-monitor",
+                                                              "maven-plugin-api", "maven-plugin-descriptor",
+                                                              "maven-project", "maven-reporting-api",
+                                                              "maven-script-beanshell", "maven-settings",
+                                                              "plexus-bsh-factory", "plexus-container-default",
+                                                              "plexus-utils", "wagon-provider-api"} );
-        artifactResolver.resolve( context.getProject().getParentArtifact(), context.getRemoteRepositories(), context.getLocalRepository() );
+        artifactResolver.resolve( context.getProject().getParentArtifact(), context.getRemoteRepositories(),
+                                  context.getLocalRepository() );
