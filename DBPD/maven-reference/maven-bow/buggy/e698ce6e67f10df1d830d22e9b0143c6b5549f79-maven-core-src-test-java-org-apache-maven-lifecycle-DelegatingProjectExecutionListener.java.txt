MNG-5549 introduced MojoExecutionEvent and ProjectExecutionEvent

Signed-off-by: Igor Fedorenko <ifedorenko@apache.org>

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
-import org.apache.maven.execution.MavenSession;
+import org.apache.maven.execution.ProjectExecutionEvent;
-import org.apache.maven.plugin.MojoExecution;
-import org.apache.maven.project.MavenProject;
-    public void beforeProjectExecution( MavenSession session, MavenProject project )
+    public void beforeProjectExecution( ProjectExecutionEvent event )
-            listener.beforeProjectExecution( session, project );
+            listener.beforeProjectExecution( event );
-    public void beforeProjectLifecycleExecution( MavenSession session, MavenProject project,
-                                                 List<MojoExecution> executionPlan )
+    public void beforeProjectLifecycleExecution( ProjectExecutionEvent event )
-            listener.beforeProjectLifecycleExecution( session, project, executionPlan );
+            listener.beforeProjectLifecycleExecution( event );
-    public void afterProjectExecutionSuccess( MavenSession session, MavenProject project )
+    public void afterProjectExecutionSuccess( ProjectExecutionEvent event )
-            listener.afterProjectExecutionSuccess( session, project );
+            listener.afterProjectExecutionSuccess( event );
-    public void afterProjectExecutionFailure( MavenSession session, MavenProject project, Throwable cause )
+    public void afterProjectExecutionFailure( ProjectExecutionEvent event )
-            listener.afterProjectExecutionFailure( session, project, cause );
+            listener.afterProjectExecutionFailure( event );
