Resolving: MNG-666

If a v3 POM is encountered (or any POM where modelVersion is != '4.0.0'), an InvalidModelException is thrown.
This exception extends ProjectBuildingException, to enable piggybacking on the same catch() clause.
When the MavenMetadataSource catches InvalidModelException, it returns a ResolutionGroup with the pomArtifact and empty collections for the pom dependency artifacts and the repository list with which to resolve the empty artifacts set.

Also, added it0059 to test builds where a dependency POM is a v3 pom (missing <modelVersion/>).


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@239981 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.project.InvalidModelException;
+import java.util.Collections;
+            catch ( InvalidModelException e )
+            {
+                getLogger().warn( "POM for: \'" + pomArtifact.getId() + "\' does not appear to be valid. Its will be ignored for artifact resolution." );
+                
+                project = null;
+            }
-            Relocation relocation = null;
-
-            DistributionManagement distMgmt = project.getDistributionManagement();
-            if ( distMgmt != null )
+            if ( project != null )
-                relocation = distMgmt.getRelocation();
-            }
-            if ( relocation != null )
-            {
-                if ( relocation.getGroupId() != null )
+                Relocation relocation = null;
+
+                DistributionManagement distMgmt = project.getDistributionManagement();
+                if ( distMgmt != null )
-                    artifact.setGroupId( relocation.getGroupId() );
-                }
-                if ( relocation.getArtifactId() != null )
-                {
-                    artifact.setArtifactId( relocation.getArtifactId() );
-                }
-                if ( relocation.getVersion() != null )
-                {
-                    artifact.setVersion( relocation.getVersion() );
+                    relocation = distMgmt.getRelocation();
-                String message = "\n  This artifact has been relocated to " + artifact.getGroupId() + ":" +
-                    artifact.getArtifactId() + ":" + artifact.getVersion() + ".\n";
-
-                if ( relocation.getMessage() != null )
+                if ( relocation != null )
-                    message += "  " + relocation.getMessage() + "\n";
-                }
+                    if ( relocation.getGroupId() != null )
+                    {
+                        artifact.setGroupId( relocation.getGroupId() );
+                    }
+                    if ( relocation.getArtifactId() != null )
+                    {
+                        artifact.setArtifactId( relocation.getArtifactId() );
+                    }
+                    if ( relocation.getVersion() != null )
+                    {
+                        artifact.setVersion( relocation.getVersion() );
+                    }
-                getLogger().warn( message + "\n" );
+                    String message = "\n  This artifact has been relocated to " + artifact.getGroupId() + ":"
+                        + artifact.getArtifactId() + ":" + artifact.getVersion() + ".\n";
+
+                    if ( relocation.getMessage() != null )
+                    {
+                        message += "  " + relocation.getMessage() + "\n";
+                    }
+
+                    getLogger().warn( message + "\n" );
+                }
+                else
+                {
+                    done = true;
+                }
-            // TODO: we could possibly use p.getDependencyArtifacts instead of this call, but they haven't been filtered
-            // or used the inherited scope (should that be passed to the buildFromRepository method above?)
-            Set artifacts = project.createArtifacts( artifactFactory, artifact.getScope(),
+            ResolutionGroup result;
+            
+            if ( project == null )
+            {
+                // if the project is null, we encountered an invalid model (read: m1 POM)
+                // we'll just return an empty resolution group.
+                result = new ResolutionGroup( pomArtifact, Collections.EMPTY_SET, Collections.EMPTY_LIST );
+            }
+            else
+            {
+                // TODO: we could possibly use p.getDependencyArtifacts instead of this call, but they haven't been filtered
+                // or used the inherited scope (should that be passed to the buildFromRepository method above?)
+                Set artifacts = project.createArtifacts( artifactFactory, artifact.getScope(),
-
+                
+                List repositories = aggregateRepositoryLists( remoteRepositories, project.getRemoteArtifactRepositories() );
+                
+                result = new ResolutionGroup( pomArtifact, artifacts, repositories );
+            }
-            List repositories = aggregateRepositoryLists( remoteRepositories, project.getRemoteArtifactRepositories() );
-            
-            return new ResolutionGroup( pomArtifact, artifacts, repositories );
+            return result;
