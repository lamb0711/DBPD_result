decouple project stuff from maven-core

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@164205 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.MavenMetadataSource;
+import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
-    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository )
-        throws ProjectBuildingException
+    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository,
+                                               ArtifactMetadataSource artifactMetadataSource )
+        throws ProjectBuildingException, ArtifactResolutionException
-        return buildFromSourceFile( projectDescriptor, localRepository, true );
+        MavenProject project = buildFromSourceFile( projectDescriptor, localRepository );
+
+        // ----------------------------------------------------------------------
+        // Typically when the project builder is being used from maven proper
+        // the transitive dependencies will not be resolved here because this
+        // requires a lot of work when we may only be interested in running
+        // something simple like 'm2 clean'. So the artifact collector is used
+        // in the dependency resolution phase if it is required by any of the
+        // goals being executed. But when used as a component in another piece
+        // of code people may just want to build maven projects and have the
+        // dependencies resolved for whatever reason: this is why we keep
+        // this snippet of code here.
+        // ----------------------------------------------------------------------
+
+        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(),
+                                                                                project.getRemoteArtifactRepositories(),
+                                                                                localRepository,
+                                                                                artifactMetadataSource );
+
+        project.addArtifacts( result.getArtifacts().values(), artifactFactory );
+        return project;
-        return buildFromSourceFile( projectDescriptor, localRepository, false );
+        return buildFromSourceFile( projectDescriptor, localRepository );
-    private MavenProject buildFromSourceFile( File projectDescriptor, ArtifactRepository localRepository,
-                                              boolean resolveDependencies )
+    private MavenProject buildFromSourceFile( File projectDescriptor, ArtifactRepository localRepository )
-        MavenProject project = build( model, localRepository, resolveDependencies );
+        MavenProject project = build( model, localRepository );
-        return build( model, localRepository, false );
+        return build( model, localRepository );
-    private MavenProject build( Model model, ArtifactRepository localRepository, boolean resolveDependencies )
+    private MavenProject build( Model model, ArtifactRepository localRepository )
-            project = processProjectLogic( project, localRepository, aggregatedRemoteWagonRepositories,
-                                           resolveDependencies );
+            project = processProjectLogic( project, aggregatedRemoteWagonRepositories );
-        catch ( ArtifactResolutionException e )
-        {
-            throw new ProjectBuildingException( "Error building project: " + model.getId(), e );
-        }
-
-    private MavenProject processProjectLogic( MavenProject project, ArtifactRepository localRepository,
-                                              List remoteRepositories, boolean resolveDependencies )
-        throws ProjectBuildingException, ModelInterpolationException, ArtifactResolutionException
+    private MavenProject processProjectLogic( MavenProject project, List remoteRepositories )
+        throws ProjectBuildingException, ModelInterpolationException
-        // ----------------------------------------------------------------------
-        // Typically when the project builder is being used from maven proper
-        // the transitive dependencies will not be resolved here because this
-        // requires a lot of work when we may only be interested in running
-        // something simple like 'm2 clean'. So the artifact collector is used
-        // in the dependency resolution phase if it is required by any of the
-        // goals being executed. But when used as a component in another piece
-        // of code people may just want to build maven projects and have the
-        // dependencies resolved for whatever reason: this is why we keep
-        // this snippet of code here.
-        // ----------------------------------------------------------------------
-
-        if ( resolveDependencies )
-        {
-            // TODO: comes from Maven CORE
-            MavenMetadataSource sourceReader = new MavenMetadataSource( artifactResolver, this );
-
-            ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(),
-                                                                                    remoteRepositories,
-                                                                                    localRepository, sourceReader );
-
-            project.addArtifacts( result.getArtifacts().values(), artifactFactory );
-        }
-
-            project = processProjectLogic( project, localRepository, remoteRepositories, false );
+            project = processProjectLogic( project, remoteRepositories );
-        catch ( ArtifactResolutionException e )
-        {
-            throw new ProjectBuildingException( "Error building super-project", e );
-        }
+    }
+
+    /**
+     * @return
+     * @todo remove
+     */
+    public ArtifactResolver getArtifactResolver()
+    {
+        return artifactResolver;
