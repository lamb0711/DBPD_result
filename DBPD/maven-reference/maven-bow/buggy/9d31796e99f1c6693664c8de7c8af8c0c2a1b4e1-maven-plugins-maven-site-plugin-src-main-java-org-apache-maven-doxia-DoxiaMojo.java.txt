PR: MNG-366
reverse the reference. DoxiaMojo depends on maven-core instead of maven-core depending on the reporting api + doxia

This is not a great solution, but it gets us closer. It is currently not possible, as before, to get the correct set of reports as they are all loaded into the one container and then everything found is returned.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@188690 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.plugin.PluginManager;
+import org.apache.maven.plugin.PluginManagerException;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.PlexusContainerLocator;
+import org.codehaus.plexus.context.Context;
+import org.codehaus.plexus.context.ContextException;
+import org.codehaus.plexus.PlexusConstants;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
- * @goal site
- * @description Doxia plugin
- * @requiresDependencyResolution test
+ * Generate the project site.
+ * @goal site
+ * @requiresDependencyResolution test
+    implements Contextualizable
-     * @parameter expression="${reports}"
+     * @parameter expression="${component.org.apache.maven.plugin.PluginManager}"
-    private Map reports;
+    private PluginManager pluginManager;
+    private PlexusContainer container;
+
-                URL[] urls = { templateDirectoryUrl };
+                URL[] urls = {templateDirectoryUrl};
+        Map reports = getReports();
+
-            categorizeReports();
+            categorizeReports( reports );
-                                                                         getSiteDescriptor( locale ) );
+                                                                         getSiteDescriptor( reports, locale ) );
-                        siteRenderer
-                            .generateDocument( new FileWriter( outputFile ), template, attributes, sink, locale );
+                        siteRenderer.generateDocument( new FileWriter( outputFile ), template, attributes, sink,
+                                                       locale );
-                        generateProjectInfoPage( getSiteDescriptor( locale ), locale );
+                        generateProjectInfoPage( getSiteDescriptor( reports, locale ), locale );
-                        generateProjectReportsPage( getSiteDescriptor( locale ), locale );
+                        generateProjectReportsPage( getSiteDescriptor( reports, locale ), locale );
-                        throw new MojoExecutionException( "An error is occurred in project reports page generation.", e );
+                        throw new MojoExecutionException( "An error is occurred in project reports page generation.",
+                                                          e );
-                siteRenderer.render( new File( siteDirectory ), localeOutputDirectory, getSiteDescriptor( locale ),
-                                     template, attributes );
+                siteRenderer.render( new File( siteDirectory ), localeOutputDirectory,
+                                     getSiteDescriptor( reports, locale ), template, attributes );
-                                     getSiteDescriptor( locale ), template, attributes );
+                                     getSiteDescriptor( reports, locale ), template, attributes );
-    private void categorizeReports()
+    private void categorizeReports( Map reports )
-                throw new MojoExecutionException( "'" + report.getCategoryName() + "' category define for "
-                                                  + report.getName( defaultLocale ) + " mojo isn't valid." );
+                throw new MojoExecutionException( "'" + report.getCategoryName() + "' category define for " +
+                                                  report.getName( defaultLocale ) + " mojo isn't valid." );
-        throws MojoExecutionException
-        buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.about") + " " + project.getName() + "\" href=\"/index.html\"/>\n" );
+        buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.about" ) + " " +
+                       project.getName() + "\" href=\"/index.html\"/>\n" );
-            buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.projectinformation")
-                           + "\" href=\"/project-info.html\" collapse=\"true\">\n" );
+            buffer.append( "    <item name=\"" +
+                           i18n.getString( "site-plugin", locale, "report.menu.projectinformation" ) +
+                           "\" href=\"/project-info.html\" collapse=\"true\">\n" );
-                buffer.append( "        <item name=\"" + report.getName( locale ) + "\" href=\"/"
-                               + report.getOutputName() + ".html\"/>\n" );
+                buffer.append( "        <item name=\"" + report.getName( locale ) + "\" href=\"/" +
+                               report.getOutputName() + ".html\"/>\n" );
-            buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.projectreports")
-                           + "\" href=\"/maven-reports.html\" collapse=\"true\">\n" );
+            buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.projectreports" ) +
+                           "\" href=\"/maven-reports.html\" collapse=\"true\">\n" );
-                buffer.append( "        <item name=\"" + report.getName( locale ) + "\" href=\"/"
-                               + report.getOutputName() + ".html\"/>\n" );
+                buffer.append( "        <item name=\"" + report.getName( locale ) + "\" href=\"/" +
+                               report.getOutputName() + ".html\"/>\n" );
-    private InputStream getSiteDescriptor( Locale locale )
+    /**
+     * @todo should only be needed once
+     */
+    private InputStream getSiteDescriptor( Map reports, Locale locale )
-        SiteRendererSink sink = siteRenderer.createSink( new File( siteDirectory ), outputFileName,
-                                                         getSiteDescriptor( locale ) );
+        SiteRendererSink sink = siteRenderer.createSink( new File( siteDirectory ), outputFileName, siteDescriptor );
-        String title = i18n.getString( "site-plugin", locale, "report.information.title");
+        String title = i18n.getString( "site-plugin", locale, "report.information.title" );
-        sink.text( i18n.getString( "site-plugin", locale, "report.information.description1") + " " );
+        sink.text( i18n.getString( "site-plugin", locale, "report.information.description1" ) + " " );
-        sink.text( " " + i18n.getString( "site-plugin", locale, "report.information.description2") );
+        sink.text( " " + i18n.getString( "site-plugin", locale, "report.information.description2" ) );
-        sink.text( i18n.getString( "site-plugin", locale, "report.information.sectionTitle") );
+        sink.text( i18n.getString( "site-plugin", locale, "report.information.sectionTitle" ) );
-        sink.text( i18n.getString( "site-plugin", locale, "report.information.column.document") );
+        sink.text( i18n.getString( "site-plugin", locale, "report.information.column.document" ) );
-        sink.text( i18n.getString( "site-plugin", locale, "report.information.column.description") );
+        sink.text( i18n.getString( "site-plugin", locale, "report.information.column.description" ) );
-        SiteRendererSink sink = siteRenderer.createSink( new File( siteDirectory ), outputFileName,
-                                                         getSiteDescriptor( locale ) );
+        SiteRendererSink sink = siteRenderer.createSink( new File( siteDirectory ), outputFileName, siteDescriptor );
-        String title = i18n.getString( "site-plugin", locale, "report.project.title");
+        String title = i18n.getString( "site-plugin", locale, "report.project.title" );
-        sink.text( i18n.getString( "site-plugin", locale, "report.project.description1") + " " );
+        sink.text( i18n.getString( "site-plugin", locale, "report.project.description1" ) + " " );
-        sink.text( ". " + i18n.getString( "site-plugin", locale, "report.project.description2") );
+        sink.text( ". " + i18n.getString( "site-plugin", locale, "report.project.description2" ) );
-        sink.text( i18n.getString( "site-plugin", locale, "report.project.sectionTitle") );
+        sink.text( i18n.getString( "site-plugin", locale, "report.project.sectionTitle" ) );
-        sink.text( i18n.getString( "site-plugin", locale, "report.project.column.document") );
+        sink.text( i18n.getString( "site-plugin", locale, "report.project.column.document" ) );
-        sink.text( i18n.getString( "site-plugin", locale, "report.project.column.description") );
+        sink.text( i18n.getString( "site-plugin", locale, "report.project.column.description" ) );
-                    throw new IOException( "The resource " + line + " doesn't exists in " + DEFAULT_TEMPLATE
-                                           + " template." );
+                    throw new IOException( "The resource " + line + " doesn't exists in " + DEFAULT_TEMPLATE +
+                                           " template." );
-            String[] includedResources = { "**/**" };
+            String[] includedResources = {"**/**"};
-    
+
-    
+
+
+    private Map getReports()
+        throws MojoExecutionException
+    {
+        // TODO: not the best solution. Perhaps a mojo tag that causes the plugin manager to populate project reports instead?
+
+        List reportPlugins = project.getReportPlugins();
+        if ( reportPlugins != null )
+        {
+            for ( Iterator it = reportPlugins.iterator(); it.hasNext(); )
+            {
+                org.apache.maven.model.Plugin plugin = (org.apache.maven.model.Plugin) it.next();
+                try
+                {
+                    pluginManager.verifyPlugin( plugin.getGroupId(), plugin.getArtifactId(), plugin.getVersion(),
+                                                project, localRepository );
+                }
+                catch ( ArtifactResolutionException e )
+                {
+                    throw new MojoExecutionException( "Cannot find report plugin", e );
+                }
+                catch ( PluginManagerException e )
+                {
+                    throw new MojoExecutionException( "Cannot find report plugin", e );
+                }
+            }
+        }
+
+        // TODO: this is not good (using the container), also because it will import every report ever loaded
+        //   What we need is to be able to select individual reports and know what reports are inside a plugin
+        //   It may be better to push the report section in the pom back to "plugins", then just have a reports list
+        //   again which are role hints to look up
+
+        try
+        {
+            return container.lookupMap( MavenReport.ROLE );
+        }
+        catch ( ComponentLookupException e )
+        {
+            throw new MojoExecutionException( "Unable to find reports", e );
+        }
+    }
+
+    public void contextualize( Context context )
+        throws ContextException
+    {
+        container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
+    }
