o Moved the default plugin stuff to <pluginManagement/>. Plugin config will be pulled from here and injected into <plugins/> as needed to satisfy type-handlers at runtime.
o Added the ability for DefaultMaven to load only the super-pom in the event that no pom.xml exists to initiate the assembly.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163527 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.PluginManagement;
+            MavenProject project = session.getProject();
+            
-            ArtifactHandler handler = artifactHandlerManager.getArtifactHandler( session.getProject().getPackaging() );
+            ArtifactHandler handler = artifactHandlerManager.getArtifactHandler( project.getPackaging() );
+                    String additionalPluginGroupId = "maven";
+                    String additionalPluginArtifactId = "maven-" + handler.additionalPlugin() + "-plugin";
+
+                    injectHandlerPluginConfiguration( project, additionalPluginGroupId, additionalPluginArtifactId );
+
+    private void injectHandlerPluginConfiguration( MavenProject project, String groupId, String artifactId )
+    {
+        PluginManagement mgmt = project.getPluginManagement();
+        if( mgmt != null )
+        {
+            List pluginList = mgmt.getPlugins();
+
+            Plugin handlerPlugin = null;
+            for ( Iterator it = pluginList.iterator(); it.hasNext(); )
+            {
+                Plugin plugin = (Plugin) it.next();
+                if ( groupId.equals( plugin.getGroupId() ) && artifactId.equals( plugin.getArtifactId() ) )
+                {
+                    handlerPlugin = plugin;
+                    break;
+                }
+            }
+
+            if ( handlerPlugin != null )
+            {
+                project.addPlugin( handlerPlugin );
+            }
+        }
+    }
+
