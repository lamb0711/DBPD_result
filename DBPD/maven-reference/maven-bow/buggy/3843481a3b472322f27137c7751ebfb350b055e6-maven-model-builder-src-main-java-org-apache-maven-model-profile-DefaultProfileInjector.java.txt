o Fixed order of inherited plugins

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@785644 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import org.apache.maven.model.Plugin;
+import org.apache.maven.model.PluginContainer;
+import org.apache.maven.model.ReportPlugin;
+import org.apache.maven.model.Reporting;
+        @Override
+        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
+                                                     boolean sourceDominant, Map<Object, Object> context )
+        {
+            List<Plugin> src = source.getPlugins();
+            if ( !src.isEmpty() )
+            {
+                List<Plugin> tgt = target.getPlugins();
+                Map<Object, Plugin> merged = new LinkedHashMap<Object, Plugin>( ( src.size() + tgt.size() ) * 2 );
+
+                for ( Iterator<Plugin> it = tgt.iterator(); it.hasNext(); )
+                {
+                    Plugin element = it.next();
+                    Object key = getPluginKey( element );
+                    merged.put( key, element );
+                }
+
+                for ( Iterator<Plugin> it = src.iterator(); it.hasNext(); )
+                {
+                    Plugin element = it.next();
+                    Object key = getPluginKey( element );
+                    Plugin existing = merged.get( key );
+                    if ( existing == null )
+                    {
+                        merged.put( key, element );
+                    }
+                    else
+                    {
+                        mergePlugin( existing, element, sourceDominant, context );
+                    }
+                }
+
+                target.setPlugins( new ArrayList<Plugin>( merged.values() ) );
+            }
+        }
+
+        @Override
+        protected void mergeReporting_Plugins( Reporting target, Reporting source, boolean sourceDominant,
+                                               Map<Object, Object> context )
+        {
+            List<ReportPlugin> src = source.getPlugins();
+            if ( !src.isEmpty() )
+            {
+                List<ReportPlugin> tgt = target.getPlugins();
+                Map<Object, ReportPlugin> merged =
+                    new LinkedHashMap<Object, ReportPlugin>( ( src.size() + tgt.size() ) * 2 );
+
+                for ( Iterator<ReportPlugin> it = tgt.iterator(); it.hasNext(); )
+                {
+                    ReportPlugin element = it.next();
+                    Object key = getReportPluginKey( element );
+                    merged.put( key, element );
+                }
+
+                for ( Iterator<ReportPlugin> it = src.iterator(); it.hasNext(); )
+                {
+                    ReportPlugin element = it.next();
+                    Object key = getReportPluginKey( element );
+                    ReportPlugin existing = merged.get( key );
+                    if ( existing == null )
+                    {
+                        merged.put( key, element );
+                    }
+                    else
+                    {
+                        mergeReportPlugin( existing, element, sourceDominant, context );
+                    }
+                }
+
+                target.setPlugins( new ArrayList<ReportPlugin>( merged.values() ) );
+            }
+        }
+
