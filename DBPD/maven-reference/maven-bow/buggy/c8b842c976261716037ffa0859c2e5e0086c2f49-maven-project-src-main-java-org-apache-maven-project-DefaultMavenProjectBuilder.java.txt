Merge of SI_MAVEN_2_1 branch. New builder code.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@679609 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Parent;
+import org.apache.maven.project.builder.PomArtifactResolver;
+import org.apache.maven.project.builder.ProjectBuilder;
+import org.apache.maven.project.builder.PomClassicDomainModel;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.Reader;
-import java.io.StringReader;
+import java.io.*;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeMap;
+import java.util.*;
-    protected MavenProfilesBuilder profilesBuilder;
+    protected MavenProfilesBuilder profilesBuilder;                        
+    private ProjectBuilder projectBuilder;
+
-//            getLogger().debug( "Allowing project-build to proceed for: " + projectDescriptor );
-
-            Model model = readModel( "unknown", projectDescriptor, STRICT_MODEL_PARSING );
-
-            project = buildInternal( model,
+            Model model = readModelFromLocalPath( "unknown", projectDescriptor, new PomArtifactResolver(config.getLocalRepository(),
+                    buildArtifactRepositories( getSuperModel() ), artifactResolver) );
+            project = buildInternal(model,
-//        else
-//        {
-//            getLogger().debug( "Returning cached project: " + project );
-//        }
-
-        String projectId = safeVersionlessKey( artifact.getGroupId(), artifact.getArtifactId() );
+        String projectId = safeVersionlessKey( artifact.getGroupId(), artifact.getArtifactId() );
-        Model model;
-
+        Model legacy_model;
-            model = readModel( projectId, file, STRICT_MODEL_PARSING );
+            legacy_model = readModelLegacy( projectId, file, STRICT_MODEL_PARSING );
-            DistributionManagement distributionManagement = model.getDistributionManagement();
+            DistributionManagement distributionManagement = legacy_model.getDistributionManagement();
-                projectArtifact.setDownloadUrl( model.getUrl() );
+                projectArtifact.setDownloadUrl( legacy_model.getUrl() );
-        return model;
+        return legacy_model;
+
-    private Model readModel( String projectId,
+    private Model readModelLegacy( String projectId,
+
+    private Model readModelFromLocalPath( String projectId,
+                            File projectDescriptor,
+                            PomArtifactResolver resolver )
+       throws ProjectBuildingException
+   {
+       if(projectDescriptor == null) {
+           throw new IllegalArgumentException("projectDescriptor: null, Project Id =" + projectId);
+       }
+
+       if(projectBuilder == null) {
+           throw new IllegalArgumentException("projectBuilder: not initialized");
+       }
+
+       MavenProject mavenProject;
+       try {
+           mavenProject = projectBuilder.buildFromLocalPath(new FileInputStream(projectDescriptor),
+                   null, null, resolver,
+                   projectDescriptor.getParentFile());
+       } catch (IOException e) {
+           e.printStackTrace();
+           throw new ProjectBuildingException(projectId, "File = " + projectDescriptor.getAbsolutePath() , e);
+       }
+
+      return mavenProject.getModel();
+
+   }
