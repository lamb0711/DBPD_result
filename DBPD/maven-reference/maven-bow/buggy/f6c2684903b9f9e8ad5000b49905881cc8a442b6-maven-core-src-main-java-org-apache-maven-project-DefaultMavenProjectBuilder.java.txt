o Moved the default plugin stuff to <pluginManagement/>. Plugin config will be pulled from here and injected into <plugins/> as needed to satisfy type-handlers at runtime.
o Added the ability for DefaultMaven to load only the super-pom in the event that no pom.xml exists to initiate the assembly.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163527 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.project.interpolation.ModelInterpolationException;
-            Model model = modelInterpolator.interpolate( project.getModel() );
-
-            // interpolation is before injection, because interpolation is off-limits in the injected variables
-            modelDefaultsInjector.injectDefaults( model );
-
-            MavenProject parentProject = project.getParent();
-
-            project = new MavenProject( model );
-            project.setFile( projectDescriptor );
-            project.setParent( parentProject );
-            project.setArtifacts( artifactFactory.createArtifacts( project.getDependencies(), localRepository, null ) );
-
-            // ----------------------------------------------------------------------
-            // Typically when the project builder is being used from maven proper
-            // the transitive dependencies will not be resolved here because this
-            // requires a lot of work when we may only be interested in running
-            // something simple like 'm2 clean'. So the artifact collector is used
-            // in the dependency resolution phase if it is required by any of the
-            // goals being executed. But when used as a component in another piece
-            // of code people may just want to build maven projects and have the
-            // dependencies resolved for whatever reason: this is why we keep
-            // this snippet of code here.
-            // ----------------------------------------------------------------------
-
-            if ( resolveDependencies )
-            {
-                List repos = buildArtifactRepositories( project.getRepositories() );
-
-                MavenMetadataSource sourceReader = new MavenMetadataSource( artifactResolver, this );
-
-                ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(), repos,
-                                                                                        localRepository, sourceReader );
-
-                project.getArtifacts().addAll( result.getArtifacts().values() );
-            }
-
-            ModelValidationResult validationResult = validator.validate( project.getModel() );
-
-            if ( validationResult.getMessageCount() > 0 )
-            {
-                throw new ProjectBuildingException( "Exception while building project: " + validationResult.toString() );
-            }
+            project = processProjectLogic( project, localRepository, resolveDependencies );
-
-            project.addCompileSourceRoot( project.getBuild().getSourceDirectory() );
-            project.addScriptSourceRoot( project.getBuild().getScriptSourceDirectory() );
-            project.addTestCompileSourceRoot( project.getBuild().getTestSourceDirectory() );
-
+    private MavenProject processProjectLogic( MavenProject project, ArtifactRepository localRepository,
+                                             boolean resolveDependencies )
+        throws ProjectBuildingException, ModelInterpolationException, ArtifactResolutionException
+    {
+        Model model = modelInterpolator.interpolate( project.getModel() );
+
+        // interpolation is before injection, because interpolation is off-limits in the injected variables
+        modelDefaultsInjector.injectDefaults( model );
+
+        MavenProject parentProject = project.getParent();
+
+        project = new MavenProject( model );
+        project.setParent( parentProject );
+        project.setArtifacts( artifactFactory.createArtifacts( project.getDependencies(), localRepository, null ) );
+
+        // ----------------------------------------------------------------------
+        // Typically when the project builder is being used from maven proper
+        // the transitive dependencies will not be resolved here because this
+        // requires a lot of work when we may only be interested in running
+        // something simple like 'm2 clean'. So the artifact collector is used
+        // in the dependency resolution phase if it is required by any of the
+        // goals being executed. But when used as a component in another piece
+        // of code people may just want to build maven projects and have the
+        // dependencies resolved for whatever reason: this is why we keep
+        // this snippet of code here.
+        // ----------------------------------------------------------------------
+
+        if ( resolveDependencies )
+        {
+            List repos = buildArtifactRepositories( project.getRepositories() );
+
+            MavenMetadataSource sourceReader = new MavenMetadataSource( artifactResolver, this );
+
+            ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(), repos,
+                                                                                    localRepository, sourceReader );
+
+            project.getArtifacts().addAll( result.getArtifacts().values() );
+        }
+
+        ModelValidationResult validationResult = validator.validate( project.getModel() );
+
+        if ( validationResult.getMessageCount() > 0 )
+        {
+            throw new ProjectBuildingException( "Exception while building project: " + validationResult.toString() );
+        }
+
+        project.addCompileSourceRoot( project.getBuild().getSourceDirectory() );
+        project.addScriptSourceRoot( project.getBuild().getScriptSourceDirectory() );
+        project.addTestCompileSourceRoot( project.getBuild().getTestSourceDirectory() );
+
+        return project;
+    }
+
-                                          LinkedList lineage, List aggregatedRemoteWagonRepositories )
+                                         LinkedList lineage, List aggregatedRemoteWagonRepositories )
-    private Model readModel( File file )
-        throws ProjectBuildingException
+    private Model readModel( File file ) throws ProjectBuildingException
-                "Error while reading model from file '" + file.getAbsolutePath() + "'.", e );
+                                                "Error while reading model from file '" + file.getAbsolutePath() + "'.",
+                                                e );
-    private Model readModel( URL url )
-        throws ProjectBuildingException
+    private Model readModel( URL url ) throws ProjectBuildingException
-            throw new ProjectBuildingException( "Missing parent POM: " + parent.getGroupId() + ":" +
-                                                parent.getArtifactId() + "-" + parent.getVersion(), e );
+            throw new ProjectBuildingException( "Missing parent POM: " + parent.getGroupId() + ":"
+                + parent.getArtifactId() + "-" + parent.getVersion(), e );
-    public List getSortedProjects( List projects )
-        throws CycleDetectedException
+    public List getSortedProjects( List projects ) throws CycleDetectedException
+    public MavenProject buildSuperProject( ArtifactRepository localRepository )
+    throws ProjectBuildingException
+    {
+            return buildSuperProject( localRepository, false );
+    }
+    
+    public MavenProject buildSuperProject( ArtifactRepository localRepository, boolean resolveDependencies )
+        throws ProjectBuildingException
+    {
+        MavenProject project = new MavenProject( getSuperModel() );
+
+        try
+        {
+            project = processProjectLogic( project, localRepository, resolveDependencies );
+            
+            File projectFile = new File( ".", "pom.xml" );
+            project.setFile( projectFile );
+            pathTranslator.alignToBaseDirectory( project.getModel(), projectFile );
+
+            return project;
+        }
+        catch ( ModelInterpolationException e )
+        {
+            throw new ProjectBuildingException( "Error building super-project", e );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new ProjectBuildingException( "Error building super-project", e );
+        }
+    }
+
-    private Model getSuperModel()
-        throws ProjectBuildingException
+    private Model getSuperModel() throws ProjectBuildingException
-}
+}
