clean up site plugin, optimize descriptor creation

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@290404 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.StringInputStream;
+import java.util.Collections;
-    private List projectInfos = new ArrayList();
-
-    private List projectReports = new ArrayList();
-
-    private Locale defaultLocale = Locale.ENGLISH;
-
-    private List localesList = new ArrayList();
-
-            categorizeReports( reports );
+            List localesList = initLocalesList();
+            if ( localesList.isEmpty() )
+            {
+                localesList = Collections.singletonList( Locale.ENGLISH );
+            }
-            initLocalesList();
-
+            // Default is first in the list
+            Locale defaultLocale = (Locale) localesList.get( 0 );
+            List projectInfos = new ArrayList();
+            List projectReports = new ArrayList();
+            categorizeReports( reports, defaultLocale, projectInfos, projectReports );
+
-                File localeOutputDirectory = getOuputDirectory( locale );
+                String siteDescriptor = getSiteDescriptor( reports, locale, projectInfos, projectReports );
+
+                File outputDirectory = getOutputDirectory( locale, defaultLocale );
-                if ( !localeOutputDirectory.exists() )
+                if ( !outputDirectory.exists() )
-                    localeOutputDirectory.mkdirs();
+                    outputDirectory.mkdirs();
-                    InputStream siteDescriptor = getSiteDescriptor( reports, locale );
-                    siteRenderer.render( generatedSiteFile, localeOutputDirectory, siteDescriptor, template, attributes,
+                    siteRenderer.render( generatedSiteFile, outputDirectory, siteDescriptor, template, attributes,
-                    try
-                    {
-                        generateReportsPages( reports, locale, localeOutputDirectory );
-                    }
-                    catch ( Exception e )
-                    {
-                        throw new MojoExecutionException( "An error is occurred in reports pages generation.", e );
-                    }
+                    generateReportsPages( reports, locale, outputDirectory, defaultLocale, siteDescriptor );
-                    try
-                    {
-                        generateProjectInfoPage( getSiteDescriptor( reports, locale ), locale );
-                    }
-                    catch ( Exception e )
-                    {
-                        throw new MojoExecutionException( "An error is occurred in project info page generation.", e );
-                    }
+                    generateProjectInfoPage( siteDescriptor, locale, projectInfos, outputDirectory );
-                    try
-                    {
-                        generateProjectReportsPage( getSiteDescriptor( reports, locale ), locale );
-                    }
-                    catch ( Exception e )
-                    {
-                        throw new MojoExecutionException( "An error is occurred in project reports page generation.",
-                                                          e );
-                    }
+                    generateProjectReportsPage( siteDescriptor, locale, projectReports, outputDirectory );
+                String displayLanguage = locale.getDisplayLanguage( Locale.ENGLISH );
-                    getLog().info( "Ignoring the index file generation for the \"" + getDisplayLanguage( locale ) +
-                        "\" version." );
+                    getLog().info( "Ignoring the index file generation for the " + displayLanguage + " version." );
-                    getLog().info( "Generate an index file for the \"" + getDisplayLanguage( locale ) + "\" version." );
-                    generateIndexPage( getSiteDescriptor( reports, locale ), locale );
+                    getLog().info( "Generate an index file for the " + displayLanguage + " version." );
+                    generateIndexPage( siteDescriptor, locale, outputDirectory );
-                        getLog().info( "Override the generated file \"" + reportFileName + "\" for the \"" +
-                            getDisplayLanguage( locale ) + "\" version." );
+                        getLog().info( "Override the generated file \"" + reportFileName + "\" for the " +
+                            displayLanguage + " version." );
-                siteRenderer.render( siteDirectoryFile, localeOutputDirectory, getSiteDescriptor( reports, locale ),
-                                     template, attributes, locale );
+                siteRenderer.render( siteDirectoryFile, outputDirectory, siteDescriptor, template, attributes, locale );
-                    copyDirectory( cssDirectory, new File( localeOutputDirectory, "css" ) );
+                    copyDirectory( cssDirectory, new File( outputDirectory, "css" ) );
-                    copyDirectory( imagesDirectory, new File( localeOutputDirectory, "images" ) );
+                    copyDirectory( imagesDirectory, new File( outputDirectory, "images" ) );
-                copyResources( localeOutputDirectory );
+                copyResources( outputDirectory );
-                    copyDirectory( resourcesDirectory, localeOutputDirectory );
+                    copyDirectory( resourcesDirectory, outputDirectory );
-        catch ( Exception e )
+        catch ( IOException e )
-    private void categorizeReports( List reports )
+    private void categorizeReports( List reports, Locale defaultLocale, List projectInfos, List projectReports )
-    private void initLocalesList()
+    private List initLocalesList()
-            localesList.add( defaultLocale );
-
-            return;
+            return Collections.EMPTY_LIST;
-
-        boolean defaultLocaleWasSet = false;
+        List localesList = new ArrayList();
-
-                if ( !defaultLocaleWasSet )
-                {
-                    defaultLocale = locale;
-                    defaultLocaleWasSet = true;
-                }
+        return localesList;
-    private String getReportsMenu( Locale locale )
+    private String getReportsMenu( Locale locale, List projectInfos, List projectReports )
-     * @throws MojoExecutionException is any
-     * @todo should only be needed once
+     * @throws org.apache.maven.plugin.MojoExecutionException is any
-    private InputStream getSiteDescriptor( List reports, Locale locale )
+    private String getSiteDescriptor( List reports, Locale locale, List projectInfos, List projectReports )
-            props.put( "reports", getReportsMenu( locale ) );
+            props.put( "reports", getReportsMenu( locale, projectInfos, projectReports ) );
-        return new StringInputStream( siteDescriptorContent );
+        return siteDescriptorContent;
-     * @throws Exception
+     * @param outputDirectory
-    private void generateIndexPage( InputStream siteDescriptor, Locale locale )
-        throws Exception
+    private void generateIndexPage( String siteDescriptor, Locale locale, File outputDirectory )
+        throws RendererException, IOException
-        File outputFile = new File( getOuputDirectory( locale ), outputFileName );
+        File outputFile = new File( outputDirectory, outputFileName );
-     * @throws Exception
-    private void generateReportsPages( List reports, Locale locale, File localeOutputDirectory )
-        throws Exception
+    private void generateReportsPages( List reports, Locale locale, File localeOutputDirectory, Locale defaultLocale,
+                                       String siteDescriptor )
+        throws RendererException, IOException, MavenReportException
-                                                             getSiteDescriptor( reports, locale ) );
+                                                             siteDescriptor );
-    private void generateProjectInfoPage( InputStream siteDescriptor, Locale locale )
-        throws Exception
+    private void generateProjectInfoPage( String siteDescriptor, Locale locale, List projectInfos,
+                                          File outputDirectory )
+        throws RendererException, IOException
-        File outputFile = new File( getOuputDirectory( locale ), outputFileName );
+        File outputFile = new File( outputDirectory, outputFileName );
-    private void generateProjectReportsPage( InputStream siteDescriptor, Locale locale )
-        throws Exception
+    private void generateProjectReportsPage( String siteDescriptor, Locale locale, List projectReports,
+                                             File outputDirectory )
+        throws RendererException, IOException
-        File outputFile = new File( getOuputDirectory( locale ), outputFileName );
+        File outputFile = new File( outputDirectory, outputFileName );
-        throws Exception
+        throws IOException
-            String line;
+            String line = reader.readLine();
-            while ( ( line = reader.readLine() ) != null )
+            while ( line != null )
+
+                line = reader.readLine();
-        throws Exception
-    private File getOuputDirectory( Locale locale )
+    private File getOutputDirectory( Locale locale, Locale defaultLocale )
-        if ( localesList.size() == 1 )
-        {
-            return new File( outputDirectory );
-        }
-
-                        sb.append(
-                            "Review the following files for the \"" + getDisplayLanguage( locale ) + "\" version:" );
+                        sb.append( "Review the following files for the \"" );
+                        sb.append( locale.getDisplayLanguage( Locale.ENGLISH ) );
+                        sb.append( "\" version:" );
-     * Return the <code>display language</code> for the given locale or "Default"
-     *
-     * @param locale
-     * @return the display language in English or "Default" if the locale is the same of the default locale
-     */
-    private String getDisplayLanguage( Locale locale )
-    {
-        if ( !locale.getLanguage().equals( defaultLocale.getLanguage() ) )
-        {
-            return locale.getDisplayLanguage( Locale.ENGLISH );
-        }
-
-        return "Default";
-    }
-
-    /**
-    private Locale codeToLocale( final String localeCode )
+    private Locale codeToLocale( String localeCode )
-        if ( localeCode.equalsIgnoreCase( "default" ) )
+        if ( "default".equalsIgnoreCase( localeCode ) )
