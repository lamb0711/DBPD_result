utilise the container for populating all mojo configuration, including expressions


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163947 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+        Map configuration = new HashMap( parameters.size() );
+            String value = null;
-                element( w, "expression", parameter.getExpression() );
+                value = parameter.getExpression();
-            element( w, "default", parameter.getDefaultValue() );
+            if ( value == null || value.length() == 0 )
+            {
+                value = parameter.getDefaultValue();
+            }
+
+            if ( value != null && value.length() > 0 )
+            {
+                configuration.put( parameter, value );
+            }
+        // Coinfiguration
+        // ----------------------------------------------------------------------
+
+        if ( !configuration.isEmpty() )
+        {
+            w.startElement( "configuration" );
+
+            for ( Iterator i = configuration.keySet().iterator(); i.hasNext(); )
+            {
+                Parameter parameter = (Parameter) i.next();
+
+                w.startElement( parameter.getName() );
+
+                String type = convertType( parameter.getType() );
+                if ( type != null )
+                {
+                    w.addAttribute( "implementation", type );
+                }
+
+                w.writeText( (String) configuration.get( parameter ) );
+
+                w.endElement();
+            }
+
+            w.endElement();
+        }
+
+        // ----------------------------------------------------------------------
+    /**
+     * @param type
+     * @return
+     * @deprecated - should force proper class specification
+     */
+    private static String convertType( String type )
+    {
+        if ( "String".equals( type ) )
+        {
+            return "java.lang.String";
+        }
+        else if ( "File".equals( type ) )
+        {
+            return "java.io.File";
+        }
+        else if ( "List".equals( type ) )
+        {
+            return "java.util.List";
+        }
+        else if ( "".equals( type ) )
+        {
+            return null;
+        }
+        else
+        {
+            return type;
+        }
+    }
+
