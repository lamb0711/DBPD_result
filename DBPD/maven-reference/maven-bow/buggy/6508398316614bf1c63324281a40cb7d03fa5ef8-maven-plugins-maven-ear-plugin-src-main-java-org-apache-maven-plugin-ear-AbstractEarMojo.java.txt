o Bumped version of plexus-container-default to 1.0-alpha-6-SNAPSHOT

o Committed changes to the EAR plugin on behalf of Stephane Nicoll,
  awaiting his commit privileges.
  Resolves MNG-621 and MNG-622.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@227088 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.plugin.ear.module.EarModule;
-import org.apache.maven.plugin.ear.module.EarModuleFactory;
+import org.apache.maven.plugin.MojoExecutionException;
+import java.util.Arrays;
-     * @description "the maven project to use"
+     * The ear modules configuration.
+     *
+     * @parameter
+     */
+    private EarModule[] modules;
+
+    /**
-    private String earDirectory;
+    private String workDirectory;
-    private List modules;
+    private List earModules;
-    protected List getModules()
+    public void execute()
+        throws MojoExecutionException
-        if ( modules == null )
+        getLog().debug( "Resolving ear modules ..." );
+
+        if ( modules != null && modules.length > 0 )
-            // Gather modules and copy them
-            modules = new ArrayList();
-            Set artifacts = project.getArtifacts();
-            for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )
+
+            // Let's validate user-defined modules
+            EarModule module = null;
+            try
-                Artifact artifact = (Artifact) iter.next();
-                if ( !Artifact.SCOPE_TEST.equals( artifact.getScope())  ||
-                    !Artifact.SCOPE_PROVIDED.equals( artifact.getScope()) )
+                for ( int i = 0; i < modules.length; i++ )
-                    EarModule module = EarModuleFactory.newEarModule( artifact );
-                    modules.add( module );
+                    module = (EarModule) modules[i];
+                    getLog().debug( "Resolving ear module[" + module + "]" );
+                    module.resolveArtifact( project.getArtifacts() );
+            catch ( EarPluginException e )
+            {
+                throw new MojoExecutionException( "Failed to initialize ear modules", e );
+            }
+            earModules = new ArrayList( Arrays.asList( modules ) );
-        return modules;
+        else
+        {
+            earModules = new ArrayList();
+        }
+
+        // Let's add other modules
+        Set artifacts = project.getArtifacts();
+        for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )
+        {
+            Artifact artifact = (Artifact) iter.next();
+
+            // Artifact is not yet registered and it has neither test, nor a
+            // provided scope
+            if ( !isArtifactRegistered( artifact, earModules ) && (
+                !Artifact.SCOPE_TEST.equals( artifact.getScope() ) ||
+                    !Artifact.SCOPE_PROVIDED.equals( artifact.getScope() ) ) )
+            {
+                EarModule module = EarModuleFactory.newEarModule( artifact );
+                earModules.add( module );
+            }
+        }
+
+    }
+
+    protected List getModules()
+    {
+        if ( earModules == null )
+        {
+            throw new IllegalStateException( "Ear modules have not been initialized" );
+        }
+        return earModules;
-            buildDir = new File( earDirectory );
+            buildDir = new File( workDirectory );
-    protected String getEarDirectory()
+    protected String getWorkDirectory()
-        return earDirectory;
+        return workDirectory;
+    }
+
+    private static boolean isArtifactRegistered( Artifact a, List currentList )
+    {
+        Iterator i = currentList.iterator();
+        while ( i.hasNext() )
+        {
+            EarModule em = (EarModule) i.next();
+            if ( em.getArtifact().equals( a ) )
+            {
+                return true;
+            }
+        }
+        return false;
