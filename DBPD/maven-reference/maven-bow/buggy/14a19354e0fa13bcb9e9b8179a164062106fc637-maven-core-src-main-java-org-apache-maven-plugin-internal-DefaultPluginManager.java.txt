o Restored more backward-compat code

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@805995 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.DefaultRepositoryRequest;
+import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.plugin.BuildPluginManager;
+import org.apache.maven.plugin.InvalidPluginDescriptorException;
+import org.apache.maven.plugin.LegacySupport;
+import org.apache.maven.plugin.MavenPluginManager;
+import org.apache.maven.plugin.PluginDescriptorParsingException;
+import org.apache.maven.plugin.PluginResolutionException;
+import org.apache.maven.plugin.version.DefaultPluginVersionRequest;
+import org.apache.maven.plugin.version.PluginVersionRequest;
+import org.apache.maven.plugin.version.PluginVersionResolver;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.classworlds.realm.ClassRealm;
-    private BuildPluginManager pluginManager;
+    private PlexusContainer container;
+
+    @Requirement
+    private MavenPluginManager pluginManager;
+
+    @Requirement
+    private PluginVersionResolver pluginVersionResolver;
+
+    @Requirement
+    private LegacySupport legacySupport;
+
+    private RepositoryRequest getRepositoryRequest( MavenSession session, MavenProject project )
+    {
+        RepositoryRequest request = new DefaultRepositoryRequest();
+
+        request.setCache( session.getRepositoryCache() );
+        request.setLocalRepository( session.getLocalRepository() );
+        if ( project != null )
+        {
+            request.setRemoteRepositories( project.getPluginArtifactRepositories() );
+        }
+        request.setOffline( session.isOffline() );
+
+        return request;
+    }
-        // TODO Auto-generated method stub
-        return null;
+        MavenSession session = legacySupport.getSession();
+
+        PluginDescriptor pluginDescriptor;
+        try
+        {
+            RepositoryRequest repositoryRequest = getRepositoryRequest( session, session.getCurrentProject() );
+
+            pluginDescriptor = pluginManager.getPluginDescriptor( plugin, repositoryRequest );
+
+            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null );
+        }
+        catch ( Exception e )
+        {
+            throw new PluginManagerException( plugin, e.getMessage(), e );
+        }
+
+        ClassRealm oldRealm = container.getLookupRealm();
+        try
+        {
+            container.setLookupRealm( pluginDescriptor.getClassRealm() );
+
+            return container.lookup( role, roleHint );
+        }
+        finally
+        {
+            container.setLookupRealm( oldRealm );
+        }
-        // TODO Auto-generated method stub
-        return null;
+        MavenSession session = legacySupport.getSession();
+
+        PluginDescriptor pluginDescriptor;
+        try
+        {
+            RepositoryRequest repositoryRequest = getRepositoryRequest( session, session.getCurrentProject() );
+
+            pluginDescriptor = pluginManager.getPluginDescriptor( plugin, repositoryRequest );
+
+            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null );
+        }
+        catch ( Exception e )
+        {
+            throw new PluginManagerException( plugin, e.getMessage(), e );
+        }
+
+        ClassRealm oldRealm = container.getLookupRealm();
+        try
+        {
+            container.setLookupRealm( pluginDescriptor.getClassRealm() );
+
+            return container.lookupMap( role );
+        }
+        finally
+        {
+            container.setLookupRealm( oldRealm );
+        }
-        // TODO Auto-generated method stub
-        return null;
+        return verifyPlugin( plugin, project, session.getSettings(), session.getLocalRepository() );
-        // TODO Auto-generated method stub
-        return null;
+        PluginDescriptor pluginDescriptor = loadPluginDescriptor( plugin, project, session );
+
+        try
+        {
+            pluginManager.setupPluginRealm( pluginDescriptor, session, null, null );
+        }
+        catch ( PluginResolutionException e )
+        {
+            throw new PluginManagerException( plugin, e.getMessage(), e );
+        }
+
+        return pluginDescriptor;
-        // TODO Auto-generated method stub
-        return null;
+        RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();
+        repositoryRequest.setLocalRepository( localRepository );
+        repositoryRequest.setRemoteRepositories( project.getPluginArtifactRepositories() );
+        repositoryRequest.setOffline( settings.isOffline() );
+
+        if ( plugin.getVersion() == null )
+        {
+            PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, repositoryRequest );
+            plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );
+        }
+
+        try
+        {
+            return pluginManager.getPluginDescriptor( plugin, repositoryRequest );
+        }
+        catch ( PluginResolutionException e )
+        {
+            throw new PluginNotFoundException( plugin, repositoryRequest.getRemoteRepositories() );
+        }
+        catch ( PluginDescriptorParsingException e )
+        {
+            throw new PluginManagerException( plugin, e.getMessage(), e );
+        }
+        catch ( InvalidPluginDescriptorException e )
+        {
+            throw new PluginManagerException( plugin, e.getMessage(), e );
+        }
