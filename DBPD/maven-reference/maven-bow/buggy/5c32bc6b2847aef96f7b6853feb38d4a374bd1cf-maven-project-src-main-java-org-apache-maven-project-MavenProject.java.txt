All tests pass on my localhost...committing to see how it works on hudson.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@672782 13f79535-47bb-0310-9956-ffa450edef68

-    private Set pluginArtifacts;
+    private Set<Artifact> pluginArtifacts;
-    private List remoteArtifactRepositories;
+    private List<ArtifactRepository> remoteArtifactRepositories;
+    @Deprecated
+
+        if ( project.isConcrete() )
+        {
+            setDynamicBuild( ModelUtils.cloneBuild( project.getDynamicBuild() ) );
+            setOriginalInterpolatedBuild( ModelUtils.cloneBuild( project.getOriginalInterpolatedBuild() ) );
+
+            List dynamicRoots = project.getDynamicCompileSourceRoots();
+            if ( dynamicRoots != null )
+            {
+                setDynamicCompileSourceRoots( new ArrayList( dynamicRoots ) );
+                setOriginalInterpolatedCompileSourceRoots( new ArrayList(
+                                                                          project.getOriginalInterpolatedCompileSourceRoots() ) );
+            }
+
+            dynamicRoots = project.getDynamicTestCompileSourceRoots();
+            if ( dynamicRoots != null )
+            {
+                setDynamicTestCompileSourceRoots( new ArrayList( dynamicRoots ) );
+                setOriginalInterpolatedTestCompileSourceRoots( new ArrayList(
+                                                                              project.getOriginalInterpolatedTestCompileSourceRoots() ) );
+            }
+
+            dynamicRoots = project.getDynamicScriptSourceRoots();
+            if ( dynamicRoots != null )
+            {
+                setDynamicScriptSourceRoots( new ArrayList( dynamicRoots ) );
+                setOriginalInterpolatedScriptSourceRoots( new ArrayList(
+                                                                         project.getOriginalInterpolatedScriptSourceRoots() ) );
+            }
+        }
+
+        setConcrete( project.isConcrete() );
-    public List getRemoteArtifactRepositories()
+    public List<ArtifactRepository> getRemoteArtifactRepositories()
+    @Override
+    @Override
+    @Deprecated
+    @Override
+    @Override
+// ----------------------------------------------------------------------------
+// CODE BELOW IS USED TO PRESERVE DYNAMISM IN THE BUILD SECTION OF THE POM.
+// ----------------------------------------------------------------------------
+
+    private Build dynamicBuild;
+
+    private Build originalInterpolatedBuild;
+
+    private List dynamicCompileSourceRoots;
+
+    private List originalInterpolatedCompileSourceRoots;
+
+    private List dynamicTestCompileSourceRoots;
+
+    private List originalInterpolatedTestCompileSourceRoots;
+
+    private List dynamicScriptSourceRoots;
+
+    private List originalInterpolatedScriptSourceRoots;
+
+    private boolean isConcrete = false;
+
+    public boolean isConcrete()
+    {
+        return isConcrete;
+    }
+
+    public void setConcrete( boolean concrete )
+    {
+        isConcrete = concrete;
+    }
+
+    public Build getDynamicBuild()
+    {
+        return dynamicBuild;
+    }
+
+    public Build getOriginalInterpolatedBuild()
+    {
+        return originalInterpolatedBuild;
+    }
+
+    public List getDynamicCompileSourceRoots()
+    {
+        return dynamicCompileSourceRoots;
+    }
+
+    public List getOriginalInterpolatedCompileSourceRoots()
+    {
+        return originalInterpolatedCompileSourceRoots;
+    }
+
+    public List getDynamicTestCompileSourceRoots()
+    {
+        return dynamicTestCompileSourceRoots;
+    }
+
+    public List getOriginalInterpolatedTestCompileSourceRoots()
+    {
+        return originalInterpolatedTestCompileSourceRoots;
+    }
+
+    public List getDynamicScriptSourceRoots()
+    {
+        return dynamicScriptSourceRoots;
+    }
+
+    public List getOriginalInterpolatedScriptSourceRoots()
+    {
+        return originalInterpolatedScriptSourceRoots;
+    }
+
+    public void clearRestorableRoots()
+    {
+        dynamicCompileSourceRoots = null;
+        dynamicTestCompileSourceRoots = null;
+        dynamicScriptSourceRoots = null;
+        originalInterpolatedCompileSourceRoots = null;
+        originalInterpolatedScriptSourceRoots = null;
+        originalInterpolatedTestCompileSourceRoots = null;
+    }
+
+    public void clearRestorableBuild()
+    {
+        dynamicBuild = null;
+        originalInterpolatedBuild = null;
+    }
+
+    public void preserveCompileSourceRoots( List originalInterpolatedCompileSourceRoots )
+    {
+        dynamicCompileSourceRoots = getCompileSourceRoots();
+        this.originalInterpolatedCompileSourceRoots = originalInterpolatedCompileSourceRoots;
+    }
+
+    public void preserveTestCompileSourceRoots( List originalInterpolatedTestCompileSourceRoots )
+    {
+        dynamicTestCompileSourceRoots = getTestCompileSourceRoots();
+        this.originalInterpolatedTestCompileSourceRoots = originalInterpolatedTestCompileSourceRoots;
+    }
+
+    public void preserveScriptSourceRoots( List originalInterpolatedScriptSourceRoots )
+    {
+        dynamicScriptSourceRoots = getScriptSourceRoots();
+        this.originalInterpolatedScriptSourceRoots = originalInterpolatedScriptSourceRoots;
+    }
+
+    public void preserveBuild( Build originalInterpolatedBuild )
+    {
+        dynamicBuild = getBuild();
+        this.originalInterpolatedBuild = originalInterpolatedBuild;
+
+        this.originalInterpolatedBuild.setPluginManagement( null );
+        this.originalInterpolatedBuild.setPlugins( null );
+    }
+
+    protected void setDynamicBuild( Build dynamicBuild )
+    {
+        this.dynamicBuild = dynamicBuild;
+    }
+
+    protected void setOriginalInterpolatedBuild( Build originalInterpolatedBuild )
+    {
+        this.originalInterpolatedBuild = originalInterpolatedBuild;
+    }
+
+    protected void setDynamicCompileSourceRoots( List dynamicCompileSourceRoots )
+    {
+        this.dynamicCompileSourceRoots = dynamicCompileSourceRoots;
+    }
+
+    protected void setOriginalInterpolatedCompileSourceRoots( List originalInterpolatedCompileSourceRoots )
+    {
+        this.originalInterpolatedCompileSourceRoots = originalInterpolatedCompileSourceRoots;
+    }
+
+    protected void setDynamicTestCompileSourceRoots( List dynamicTestCompileSourceRoots )
+    {
+        this.dynamicTestCompileSourceRoots = dynamicTestCompileSourceRoots;
+    }
+
+    protected void setOriginalInterpolatedTestCompileSourceRoots( List originalInterpolatedTestCompileSourceRoots )
+    {
+        this.originalInterpolatedTestCompileSourceRoots = originalInterpolatedTestCompileSourceRoots;
+    }
+
+    protected void setDynamicScriptSourceRoots( List dynamicScriptSourceRoots )
+    {
+        this.dynamicScriptSourceRoots = dynamicScriptSourceRoots;
+    }
+
+    protected void setOriginalInterpolatedScriptSourceRoots( List originalInterpolatedScriptSourceRoots )
+    {
+        this.originalInterpolatedScriptSourceRoots = originalInterpolatedScriptSourceRoots;
+    }
+
