Resolving:

MNG-511
MNG-513

Working on:

MNG-449

o Added code to stop the version manager from prompting the user for unregistered plugins; it will simply register them with the resolved version.

o Added failover fourth plugin-version resolution option, which is a plugin-specific artifact metadata called LATEST.version.txt, and will be published with each install/deployment

o Added MavenProject.get/setArtifact(..) to handle a single artifact instance for a project (allows injection of artifact metadata without having to handle it all within the install/deploy mojos).

o Changed plugin-version resolution to only use MavenMetadataSource rather than resolving the whole plugin artifact.

o Changed the install and deploy mojos to only use ${project.artifact} rather than constructing their own, so they can take advantage of metadata added elsewhere in the build.

o Factored the "RELEASE".equals(..) check in the DefaultRepositoryLayout to use new metadata method storedInArtifactDirectory() instead, since RELEASE and LATEST both share this characteristic.


NOTE: I'm not going to resolve MNG-449 yet, because I'm not sure what else Brett had in mind related to the plugin-development-without-release use case...



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@215919 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.artifact.transform.LatestArtifactTransformation;
+import org.apache.maven.artifact.transform.ReleaseArtifactTransformation;
+import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.artifact.MavenMetadataSource;
+    private MavenProjectBuilder projectBuilder;
+
-                    updatedVersion = resolveReleaseVersion( groupId, artifactId, project
-                        .getPluginArtifactRepositories(), localRepository );
+                    updatedVersion = resolveMetaVersion( groupId, artifactId, project
+                        .getPluginArtifactRepositories(), localRepository, ReleaseArtifactTransformation.RELEASE_VERSION );
-                                .info( "Plugin {" + constructPluginKey( groupId, artifactId ) + "} has updates." );
+                                .info( "Plugin \'" + constructPluginKey( groupId, artifactId ) + "\' has updates." );
+        
+        boolean forcePersist = false;
-        // final pass...retrieve the version for RELEASE and also set that resolved version as the <useVersion/> 
+        // third pass...retrieve the version for RELEASE and also set that resolved version as the <useVersion/> 
-            // 1. resolve the version to be used THIS TIME
-            version = resolveReleaseVersion( groupId, artifactId, project.getPluginArtifactRepositories(),
-                                             localRepository );
+            // 1. resolve the version to be used
+            version = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(),
+                                             localRepository, ReleaseArtifactTransformation.RELEASE_VERSION );
-            // 3. Tell the system to determine whether this update can/should be persisted.
-            promptToPersist = true;
+            // 3. Persist this version without prompting.
+            forcePersist = true;
+            promptToPersist = false;
+        }
+
+        // final pass...retrieve the version for LATEST and also set that resolved version as the <useVersion/> 
+        // in settings.xml.
+        if ( StringUtils.isEmpty( version ) )
+        {
+            // 1. resolve the version to be used
+            version = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(),
+                                             localRepository, LatestArtifactTransformation.LATEST_VERSION );
+
+            // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.
+            updatedVersion = version;
+
+            // 3. Persist this version without prompting.
+            forcePersist = true;
+            promptToPersist = false;
+        //
+        // 0. RELEASE or LATEST was used to resolve the plugin version (it's not in the registry)
+        //
+        // -OR-
+        //
-        boolean persistUpdate = promptToPersist && !Boolean.FALSE.equals( pluginUpdateOverride )
-            && ( inInteractiveMode || autoUpdate );
+        boolean persistUpdate = forcePersist || ( promptToPersist && !Boolean.FALSE.equals( pluginUpdateOverride )
+            && ( inInteractiveMode || autoUpdate ) );
+        //
+        // don't prompt if RELEASE or LATEST was used to resolve the plugin version
-    private String resolveReleaseVersion( String groupId, String artifactId, List remoteRepositories,
-                                         ArtifactRepository localRepository )
+    private String resolveMetaVersion( String groupId, String artifactId, List remoteRepositories,
+                                         ArtifactRepository localRepository, String metaVersionId )
-        Artifact releaseArtifact = artifactFactory.createArtifact( groupId, artifactId, "RELEASE",
-                                                                   Artifact.SCOPE_RUNTIME, "maven-plugin" );
-
+        Artifact artifact = artifactFactory.createArtifact( groupId, artifactId, metaVersionId,
+                                                                   Artifact.SCOPE_RUNTIME, "pom" );
+        
+        MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, projectBuilder, artifactFactory );
+        
+        String version = null;
-            artifactResolver.resolve( releaseArtifact, remoteRepositories, localRepository );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new PluginVersionResolutionException( groupId, artifactId,
-                                                        "Cannot resolve RELEASE version of this plugin.", e );
-        }
+            metadataSource.retrieve( artifact, localRepository, remoteRepositories );
-        return releaseArtifact.getBaseVersion();
+            version = artifact.getBaseVersion();
+        }
+        catch ( ArtifactMetadataRetrievalException e )
+        {
+            getLogger().debug( "Failed to resolve " + metaVersionId + " version", e );
+        }
+        
+        return version;
