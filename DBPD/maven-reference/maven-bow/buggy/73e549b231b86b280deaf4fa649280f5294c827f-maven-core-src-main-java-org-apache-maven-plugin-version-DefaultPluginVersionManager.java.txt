o Fixing resolution of LATEST in plugin-versions, when <useLatest/> is enabled in plugin-registry.xml, or when --check-plugin-latest is specified on the command line.

o Fixing core-library resolution for expression: ${plugin.artifacts} and ${plugin.artifactMap} (latter is keyed by g:a)

o Modified maven-core-it-plugin to accept something like "-DartifactToFile=org.apache.maven:maven-artifact"...it'll lookup that artifact in ${plugin.artifactMap}, and touch a file that's a mutation of the abs. path for that artifact.

o Added pomArtifact to ResolutionGroup, since the MavenMetadataSource ALWAYS creates a new Artifact for a pom...this allows us to retrieve the resolved Artifact for that pom.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@225234 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.metadata.ResolutionGroup;
-import org.apache.maven.artifact.transform.LatestArtifactTransformation;
-            ( !Boolean.FALSE.equals( rtCheckLatest ) && Boolean.valueOf( getPluginRegistry( groupId, artifactId).getCheckLatest() )
+            ( !Boolean.FALSE.equals( rtCheckLatest ) && Boolean.valueOf( getPluginRegistry( groupId, artifactId ).getCheckLatest() )
+        
-            artifactMetadataSource.retrieve( artifact, localRepository, remoteRepositories );
-
-            MavenProject project = mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories,
-                                                                            localRepository );
-
-            boolean pluginValid = true;
-
-            // if we don't have the required Maven version, then ignore an update
-            if ( project.getPrerequesites() != null && project.getPrerequesites().getMaven() != null )
+            ResolutionGroup resolutionGroup = artifactMetadataSource.retrieve( artifact, localRepository, remoteRepositories );
+            
+            // switching this out with the actual resolved artifact instance, since the MMSource re-creates the pom
+            // artifact.
+            artifact = resolutionGroup.getPomArtifact();
+            
+            // make sure this artifact was actually resolved to a file in the repo...
+            if ( artifact.getFile() != null )
-                DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
-                    project.getPrerequesites().getMaven() );
-                if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+                MavenProject project = mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories,
+                                                                                localRepository );
+
+                boolean pluginValid = true;
+
+                // if we don't have the required Maven version, then ignore an update
+                if ( project.getPrerequesites() != null && project.getPrerequesites().getMaven() != null )
-                    getLogger().info( "Ignoring available plugin update: " + artifact.getVersion() +
-                        " as it requires Maven version " + requiredVersion );
-                    pluginValid = false;
+                    DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
+                        project.getPrerequesites().getMaven() );
+                    
+                    if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+                    {
+                        getLogger().info( "Ignoring available plugin update: " + artifact.getVersion() +
+                            " as it requires Maven version " + requiredVersion );
+                        pluginValid = false;
+                    }
-            }
-            if ( pluginValid )
-            {
-                version = artifact.getVersion();
+                if ( pluginValid )
+                {
+                    version = artifact.getVersion();
+                }
+        
