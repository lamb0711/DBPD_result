o Restored MavenProject.getCollectedProjects()

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@816681 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-        boolean errors =
+        boolean noErrors =
-        for ( InterimResult interimResult : interimResults )
-        {
-            Model model = interimResult.result.getEffectiveModel();
-            reactorModelPool.put( model.getGroupId(), model.getArtifactId(), model.getVersion(), model.getPomFile() );
-        }
+        populateReactorModelPool( reactorModelPool, interimResults );
-            for ( InterimResult interimResult : interimResults )
-            {
-                try
-                {
-                    ModelBuildingResult result = modelBuilder.build( interimResult.request, interimResult.result );
-
-                    MavenProject project = toProject( result, config, interimResult.listener );
-                    project.setExecutionRoot( interimResult.root );
-
-                    results.add( new DefaultProjectBuildingResult( project, result.getProblems(), null ) );
-                }
-                catch ( ModelBuildingException e )
-                {
-                    results.add( new DefaultProjectBuildingResult( e.getModelId(), interimResult.pomFile,
-                                                                   e.getProblems() ) );
-
-                    errors = true;
-                }
-            }
+            noErrors = build( results, new ArrayList<MavenProject>(), interimResults, config ) && noErrors;
-        if ( errors )
+        if ( !noErrors )
-        boolean errors = false;
+        boolean noErrors = true;
-                interimResults.add( new InterimResult( pomFile, request, result, listener, isRoot ) );
+                InterimResult interimResult = new InterimResult( pomFile, request, result, listener, isRoot );
+                interimResults.add( interimResult );
-                            errors = true;
+                            noErrors = false;
-                    if ( build( results, interimResults, moduleFiles, false, recursive, config, reactorModelPool,
-                                 modelCache ) )
+                    interimResult.modules = new ArrayList<InterimResult>();
+
+                    if ( !build( results, interimResult.modules, moduleFiles, false, recursive, config,
+                                reactorModelPool, modelCache ) )
-                        errors = true;
+                        noErrors = false;
-                errors = true;
+                noErrors = false;
-        return errors;
+        return noErrors;
+        List<InterimResult> modules = Collections.emptyList();
+
+    private void populateReactorModelPool( ReactorModelPool reactorModelPool, List<InterimResult> interimResults )
+    {
+        for ( InterimResult interimResult : interimResults )
+        {
+            Model model = interimResult.result.getEffectiveModel();
+            reactorModelPool.put( model.getGroupId(), model.getArtifactId(), model.getVersion(), model.getPomFile() );
+
+            populateReactorModelPool( reactorModelPool, interimResult.modules );
+        }
+    }
+
+    private boolean build( List<ProjectBuildingResult> results, List<MavenProject> projects,
+                           List<InterimResult> interimResults, ProjectBuildingRequest config )
+    {
+        boolean noErrors = true;
+
+        for ( InterimResult interimResult : interimResults )
+        {
+            try
+            {
+                ModelBuildingResult result = modelBuilder.build( interimResult.request, interimResult.result );
+
+                MavenProject project = toProject( result, config, interimResult.listener );
+
+                projects.add( project );
+
+                results.add( new DefaultProjectBuildingResult( project, result.getProblems(), null ) );
+
+                project.setExecutionRoot( interimResult.root );
+
+                List<MavenProject> modules = new ArrayList<MavenProject>();
+                noErrors = build( results, modules, interimResult.modules, config ) && noErrors;
+
+                projects.addAll( modules );
+
+                project.setCollectedProjects( modules );
+            }
+            catch ( ModelBuildingException e )
+            {
+                results.add( new DefaultProjectBuildingResult( e.getModelId(), interimResult.pomFile, e.getProblems() ) );
+
+                noErrors = false;
+            }
+        }
+
+        return noErrors;
+    }
+
