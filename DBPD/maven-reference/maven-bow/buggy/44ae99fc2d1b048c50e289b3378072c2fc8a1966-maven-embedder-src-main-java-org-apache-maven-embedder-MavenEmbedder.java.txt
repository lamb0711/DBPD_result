Merge maven.new for latest plexus classworlds and container APIs

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@483302 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.classworlds.ClassWorld;
-import org.codehaus.classworlds.DuplicateRealmException;
+import org.codehaus.plexus.classworlds.ClassWorld;
+import org.codehaus.plexus.classworlds.realm.DuplicateRealmException;
-import org.codehaus.plexus.embed.Embedder;
+import org.codehaus.plexus.DefaultPlexusContainer;
+import org.codehaus.plexus.PlexusContainer;
-    private Embedder embedder;
+    private PlexusContainer container;
-        ComponentDescriptor descriptor = embedder.getContainer().getComponentDescriptor( LifecycleExecutor.ROLE );
+        ComponentDescriptor descriptor = container.getComponentDescriptor( LifecycleExecutor.ROLE );
-        embedder = new Embedder();
+        try
+        {
+            container = new DefaultPlexusContainer( null, null, null, classWorld );
+        }
+        catch ( PlexusContainerException e )
+        {
+            throw new MavenEmbedderException( "Error starting Maven embedder.", e );
+        }
+        
-            embedder.setLoggerManager( new MavenEmbedderLoggerManager( new PlexusLoggerAdapter( logger ) ) );
+            container.setLoggerManager( new MavenEmbedderLoggerManager( new PlexusLoggerAdapter( logger ) ) );
-            embedder.start( classWorld );
+// TODO verify that this is not needed...
+//            embedder.start( classWorld );
-                req.getContainerCustomizer().customize(embedder.getContainer());
+                req.getContainerCustomizer().customize(container);
-            maven = (Maven) embedder.lookup( Maven.ROLE );
+            maven = (Maven) container.lookup( Maven.ROLE );
-            mavenTools = (MavenTools) embedder.lookup( MavenTools.ROLE );
+            mavenTools = (MavenTools) container.lookup( MavenTools.ROLE );
-            profileManager = new DefaultProfileManager( embedder.getContainer(), req.getSystemProperties() );
+            profileManager = new DefaultProfileManager( container, req.getSystemProperties() );
-            mavenProjectBuilder = (MavenProjectBuilder) embedder.lookup( MavenProjectBuilder.ROLE );
+            mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
-            artifactRepositoryFactory = (ArtifactRepositoryFactory) embedder.lookup( ArtifactRepositoryFactory.ROLE );
+            artifactRepositoryFactory = (ArtifactRepositoryFactory) container.lookup( ArtifactRepositoryFactory.ROLE );
-            artifactFactory = (ArtifactFactory) embedder.lookup( ArtifactFactory.ROLE );
+            artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
-            artifactResolver = (ArtifactResolver) embedder.lookup( ArtifactResolver.ROLE );
+            artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
-            defaultArtifactRepositoryLayout = (ArtifactRepositoryLayout) embedder.lookup( ArtifactRepositoryLayout.ROLE, DEFAULT_LAYOUT_ID );
+            defaultArtifactRepositoryLayout = (ArtifactRepositoryLayout) container.lookup( ArtifactRepositoryLayout.ROLE, DEFAULT_LAYOUT_ID );
-            lifecycleExecutor = (LifecycleExecutor) embedder.lookup( LifecycleExecutor.ROLE );
+            lifecycleExecutor = (LifecycleExecutor) container.lookup( LifecycleExecutor.ROLE );
-            wagonManager = (WagonManager) embedder.lookup( WagonManager.ROLE );
+            wagonManager = (WagonManager) container.lookup( WagonManager.ROLE );
-        catch ( PlexusContainerException e )
-        {
-            throw new MavenEmbedderException( "Cannot start Plexus embedder.", e );
-        }
-            embedder.release( mavenProjectBuilder );
+            container.release( mavenProjectBuilder );
-            embedder.release( artifactRepositoryFactory );
+            container.release( artifactRepositoryFactory );
-            embedder.release( lifecycleExecutor );
+            container.release( lifecycleExecutor );
