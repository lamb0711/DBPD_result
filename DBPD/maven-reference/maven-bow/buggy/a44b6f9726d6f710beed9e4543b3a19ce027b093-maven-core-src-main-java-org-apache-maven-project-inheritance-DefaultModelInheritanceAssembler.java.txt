flip pom format


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163511 13f79535-47bb-0310-9956-ffa450edef68

-/* ====================================================================
- *   Copyright 2001-2004 The Apache Software Foundation.
+/*
+ * Copyright 2001-2005 The Apache Software Foundation.
- *   Licensed under the Apache License, Version 2.0 (the "License");
- *   you may not use this file except in compliance with the License.
- *   You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
- *   Unless required by applicable law or agreed to in writing, software
- *   distributed under the License is distributed on an "AS IS" BASIS,
- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *   See the License for the specific language governing permissions and
- *   limitations under the License.
- * ====================================================================
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import org.apache.maven.model.UnitTest;
- *       model.
+ * model.
-        // Name
-        if ( child.getPackage() == null )
-        {
-            child.setPackage( parent.getPackage() );
-        }
-
-        // Short description
-        if ( child.getShortDescription() == null )
-        {
-            child.setShortDescription( parent.getShortDescription() );
-        }
-
-        // Short description
+        // description
-        // reports
-        if ( child.getReports().size() == 0 )
-        {
-            child.setReports( parent.getReports() );
-        }
-
-        List parentPlugins = parent.getPlugins();
-
-        List childPlugins = child.getPlugins();
-
-        for ( Iterator iterator = parentPlugins.iterator(); iterator.hasNext(); )
+        if ( parent.getBuild() != null && child.getBuild() != null )
-            Plugin plugin = (Plugin) iterator.next();
+            List parentPlugins = parent.getBuild().getPlugins();
-            if ( !childPlugins.contains( plugin ) )
+            List childPlugins = child.getBuild().getPlugins();
+
+            for ( Iterator iterator = parentPlugins.iterator(); iterator.hasNext(); )
-                child.addPlugin( plugin );
+                Plugin plugin = (Plugin) iterator.next();
+
+                if ( !childPlugins.contains( plugin ) )
+                {
+                    child.getBuild().addPlugin( plugin );
+                }
+            }
+        }
+
+        // Reports :: aggregate
+        if ( child.getReports() != null && parent.getReports() != null )
+        {
+            if ( child.getReports().getOutputDirectory() == null )
+            {
+                child.getReports().setOutputDirectory( parent.getReports().getOutputDirectory() );
+            }
+
+            List parentReports = parent.getReports().getPlugins();
+
+            List childReports = child.getReports().getPlugins();
+
+            for ( Iterator iterator = parentReports.iterator(); iterator.hasNext(); )
+            {
+                Plugin plugin = (Plugin) iterator.next();
+
+                if ( !childReports.contains( plugin ) )
+                {
+                    child.getReports().addPlugin( plugin );
+                }
-                    mappedChildPlugins.put( plugin.getId(), plugin );
+                    mappedChildPlugins.put( constructPluginKey( plugin ), plugin );
-                    if ( !mappedChildPlugins.containsKey( plugin.getId() ) )
+                    if ( !mappedChildPlugins.containsKey( constructPluginKey( plugin ) ) )
-                        Plugin childPlugin = (Plugin) mappedChildPlugins.get( plugin.getId() );
+                        Plugin childPlugin = (Plugin) mappedChildPlugins.get( constructPluginKey( plugin ) );
+    private String constructPluginKey( Plugin plugin )
+    {
+        return plugin.getGroupId() + ":" + plugin.getArtifactId();
+    }
+
-            if ( childBuild.getUnitTestSourceDirectory() == null )
+            if ( childBuild.getScriptSourceDirectory() == null )
-                childBuild.setUnitTestSourceDirectory( parentBuild.getUnitTestSourceDirectory() );
+                childBuild.setScriptSourceDirectory( parentBuild.getScriptSourceDirectory() );
-            if ( childBuild.getOutput() == null )
+            if ( childBuild.getTestSourceDirectory() == null )
-                childBuild.setOutput( parentBuild.getOutput() );
+                childBuild.setTestSourceDirectory( parentBuild.getTestSourceDirectory() );
-            if ( childBuild.getTestOutput() == null )
+            if ( childBuild.getOutputDirectory() == null )
-                childBuild.setTestOutput( parentBuild.getTestOutput() );
+                childBuild.setOutputDirectory( parentBuild.getOutputDirectory() );
+            }
+
+            if ( childBuild.getTestOutputDirectory() == null )
+            {
+                childBuild.setTestOutputDirectory( parentBuild.getTestOutputDirectory() );
-            UnitTest childUnitTest = childBuild.getUnitTest();
-            UnitTest parentUnitTest = parentBuild.getUnitTest();
-
-            if ( childUnitTest == null )
+            resources = childBuild.getTestResources();
+            if ( resources == null || resources.isEmpty() )
-                childBuild.setUnitTest( parentUnitTest );
-            }
-            else
-            {
-                if ( childUnitTest.getIncludes().size() == 0 )
-                {
-                    childUnitTest.setIncludes( parentUnitTest.getIncludes() );
-                }
-
-                if ( childUnitTest.getExcludes().size() == 0 )
-                {
-                    childUnitTest.setExcludes( parentUnitTest.getExcludes() );
-                }
-
-                List testResources = childUnitTest.getResources();
-                if ( testResources == null || testResources.isEmpty() )
-                {
-                    childUnitTest.setResources( parentUnitTest.getResources() );
-                }
+                childBuild.setTestResources( parentBuild.getTestResources() );
-            if ( StringUtils.isEmpty( childScm.getDeveloperConnection() )
-                && !StringUtils.isEmpty( parentScm.getDeveloperConnection() ) )
+            if ( StringUtils.isEmpty( childScm.getDeveloperConnection() ) &&
+                !StringUtils.isEmpty( parentScm.getDeveloperConnection() ) )
-
-            if ( parentScm.getBranches() != null )
-            {
-                childScm.getBranches().addAll( parentScm.getBranches() );
-            }
