convert archive mojos to new execute(). More work is required to reuse the common fields.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163659 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.plugin.PluginExecutionRequest;
-import org.apache.maven.plugin.PluginExecutionResponse;
+import org.apache.maven.plugin.PluginExecutionException;
+import org.codehaus.plexus.archiver.ArchiverException;
+import org.codehaus.plexus.archiver.jar.Manifest;
+import org.codehaus.plexus.archiver.jar.ManifestException;
- * @parameter name="package"
+ * @parameter name="packageName"
-    public static final String WEB_INF = "WEB-INF";
+    private static final String[] DEFAULT_INCLUDES = new String[]{"**/**"};
-    private PluginExecutionRequest request;
+    private static final String[] DEFAULT_EXCLUDES = new String[]{"**/WEB-INF/web.xml"};
+
+    public static final String WEB_INF = "WEB-INF";
-    private File classesDirectory;
+    private String basedir;
+
+    /**
+     * @todo File
+     */
+    private String classesDirectory;
-    private File webappDirectory;
+    /**
+     * @todo File
+     */
+    private String webappDirectory;
-    private File warSourceDirectory;
+    /**
+     * @todo File
+     */
+    private String warSourceDirectory;
-    private File warFile;
+    private String warName;
+
+    private String mainClass;
+
+    private String packageName;
+
+    private String manifest;
+
+    /**
+     * @todo boolean instead
+     */
+    private String addClasspath;
+
+    /**
+     * @todo boolean instead
+     */
+    private String addExtensions;
+
+    /**
+     * @todo boolean instead
+     */
+    private String index;
+
+    /**
+     * @todo boolean instead
+     */
+    private String compress;
-            if ( warSourceDirectory.exists() )
+            if ( new File( warSourceDirectory ).exists() )
-        getLog().info( "Assembling webapp " + project.getArtifactId() + " in " + webappDirectory.getAbsolutePath() );
+        getLog().info( "Assembling webapp " + project.getArtifactId() + " in " + webappDirectory );
+        File classesDirectory = new File( this.classesDirectory );
+        File webappDirectory = new File( this.webappDirectory );
-        copyResources( warSourceDirectory, webappDirectory, warSourceIncludes, warSourceExcludes, webXml );
+        copyResources( new File( warSourceDirectory ), webappDirectory, warSourceIncludes, warSourceExcludes, webXml );
-    public void execute( PluginExecutionRequest request, PluginExecutionResponse response )
-        throws Exception
+    public void execute()
+        throws PluginExecutionException
-        // ----------------------------------------------------------------------
-        //
-        // ----------------------------------------------------------------------
+        File warFile = new File( outputDirectory, warName + ".war" );
-        parseRequest( request );
+        try
+        {
+            performPackaging( warFile );
+        }
+        catch ( Exception e )
+        {
+            // TODO: improve error handling
+            throw new PluginExecutionException( "Error assembling EJB", e );
+        }
+    }
-        // ----------------------------------------------------------------------
-        //
-        // ----------------------------------------------------------------------
-
+    private void performPackaging( File warFile )
+        throws IOException, ArchiverException, ManifestException
+    {
-                warArchiver.addDirectory( webappDirectory, new String[]{"**/**"}, new String[]{"**/WEB-INF/web.xml"} );
+                warArchiver.addDirectory( new File( webappDirectory ), DEFAULT_INCLUDES, DEFAULT_EXCLUDES );
-                archiver.createArchive( request );
+                Manifest configuredManifest = archiver.getManifest( project, mainClass, packageName,
+                                                                    convertBoolean( addClasspath ),
+                                                                    convertBoolean( addExtensions ) );
+                archiver.createArchive( project, manifest, convertBoolean( compress ), convertBoolean( index ),
+                                        configuredManifest );
-    public void parseRequest( PluginExecutionRequest request )
+    private static boolean convertBoolean( String s )
-        this.request = request;
-
-        project = (MavenProject) request.getParameter( "project" );
-
-        classesDirectory = new File( (String) request.getParameter( "classesDirectory" ) );
-
-        outputDirectory = (String) request.getParameter( "outputDirectory" );
-
-        webappDirectory = new File( (String) request.getParameter( "webappDirectory" ) );
-
-        warSourceDirectory = new File( (String) request.getParameter( "warSourceDirectory" ) );
-
-        warSourceIncludes = (String) request.getParameter( "warSourceIncludes" );
-
-        warSourceExcludes = (String) request.getParameter( "warSourceExcludes" );
-
-        webXml = (String) request.getParameter( "webXml" );
-
-        mode = (String) request.getParameter( "mode" );
-
-        warFile = new File( outputDirectory, (String) request.getParameter( "warName" ) + ".war" );
+        return Boolean.valueOf( s ).booleanValue();
