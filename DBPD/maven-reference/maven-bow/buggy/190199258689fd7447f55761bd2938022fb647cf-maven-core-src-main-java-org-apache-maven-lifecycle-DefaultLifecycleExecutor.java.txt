PR: MNG-122
exception clean up phase 2

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@320675 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.InvalidPluginException;
+import org.apache.maven.plugin.PluginConfigurationException;
+import org.apache.maven.project.artifact.InvalidDependencyVersionException;
+        catch ( InvalidDependencyVersionException e )
+        {
+            // TODO: should be dispatchFailure?
+            dispatcher.dispatchError( event, target, e );
+
+            handleExecutionFailure( rm, project, e, task, buildStartTime );
+        }
-        ArtifactResolutionException, MojoFailureException
+        ArtifactResolutionException, MojoFailureException, InvalidDependencyVersionException
-        ArtifactNotFoundException
+        ArtifactNotFoundException, InvalidDependencyVersionException
-        ArtifactNotFoundException
+        ArtifactNotFoundException, InvalidDependencyVersionException
-        ArtifactNotFoundException
+        ArtifactNotFoundException, InvalidDependencyVersionException
-                throw new LifecycleExecutionException(
-                    "Internal error in the plugin manager executing goal '" + mojoDescriptor.getId(), e );
+                throw new LifecycleExecutionException( "Internal error in the plugin manager executing goal '" +
+                    mojoDescriptor.getId() + "': " + e.getMessage(), e );
+                        "Error getting reports from the plugin '" + reportPlugin.getKey() + "': " + e.getMessage(), e );
+                }
+                catch ( PluginConfigurationException e )
+                {
+                    throw new LifecycleExecutionException(
-        ArtifactNotFoundException
+        ArtifactNotFoundException, InvalidDependencyVersionException
-        ArtifactNotFoundException
+        ArtifactNotFoundException, InvalidDependencyVersionException
-        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+        Object pluginComponent = null;
+
+        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext() && pluginComponent == null; )
-                    return pluginManager.getPluginComponent( plugin, role, roleHint );
+                    pluginComponent = pluginManager.getPluginComponent( plugin, role, roleHint );
-                        "Error getting extensions from the plugin '" + plugin.getKey() + "'", e );
+                        "Error getting extensions from the plugin '" + plugin.getKey() + "': " + e.getMessage(), e );
-        return null;
+        return pluginComponent;
-                    throw new LifecycleExecutionException( "Error looking up available components from a plugin", e );
+                    throw new LifecycleExecutionException( "Error looking up available components from plugin '" +
+                        plugin.getKey() + "': " + e.getMessage(), e );
-            throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+            throw new LifecycleExecutionException(
+                "Internal error in the plugin manager getting plugin '" + plugin.getKey() + "': " + e.getMessage(), e );
+        catch ( InvalidPluginException e )
+        {
+            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+        }
-            throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+            throw new LifecycleExecutionException(
+                "Internal error in the plugin manager getting report '" + plugin.getKey() + "': " + e.getMessage(), e );
+        catch ( InvalidPluginException e )
+        {
+            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+        }
-                try
-                {
-                    plugin = pluginManager.getPluginDefinitionForPrefix( prefix, session, project );
-                }
-                catch ( PluginManagerException e )
-                {
-                    throw new LifecycleExecutionException(
-                        "Cannot resolve plugin-prefix: \'" + prefix + "\' from plugin mappings metadata.", e );
-                }
+                plugin = pluginManager.getPluginDefinitionForPrefix( prefix, session, project );
