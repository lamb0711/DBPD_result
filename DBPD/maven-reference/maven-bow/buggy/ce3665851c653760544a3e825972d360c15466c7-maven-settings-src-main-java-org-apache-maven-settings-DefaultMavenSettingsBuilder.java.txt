o Re-adding support for user-level settings which are not assumed to be in ~ (for continuum and other server-style apps' convenience)

o Adding support for global (installation-level) settings.xml file which is identical to the one in ~/.m2, and which will be overridden by user-level settings. The default location for this is ${maven.home}/settings.xml.

o Adding IT to test merging of global- and user-level settings.xml files

o Moved DefaultMavenSettingsBuilder/MavenSettingsBuilder to maven-settings project, to make them more generally available (to ant, for instance)

Resolves issue: MNG-294



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@190517 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.settings.Settings;
-import java.io.FileNotFoundException;
-    private String settingsPath;
+    private String userSettingsPath;
-    private File settingsFile;
+    /**
+     * @configuration
+     */
+    private String globalSettingsPath;
+
+    private File userSettingsFile;
+
+    private File globalSettingsFile;
-        settingsFile = getSettingsFile();
+        userSettingsFile = getUserSettingsFile();
+        globalSettingsFile = getGlobalSettingsFile();
-        getLogger().debug( "Building Maven settings from: '" + settingsFile.getAbsolutePath() + "'" );
+        getLogger().debug( "Building Maven global-level settings from: '" + globalSettingsFile.getAbsolutePath() + "'" );
+        getLogger().debug( "Building Maven user-level settings from: '" + userSettingsFile.getAbsolutePath() + "'" );
-    public Settings buildSettings()
+    private Settings readSettings( File settingsFile )
-            catch ( FileNotFoundException e )
-            {
-                // Not possible - just ignore
-                getLogger().warn( "Settings file disappeared - ignoring", e );
-            }
-        if ( settings == null )
-        {
-            getLogger().debug( "Settings model not found. Creating empty instance of MavenSettings." );
+        return settings;
+    }
-            settings = new Settings();
+    public Settings buildSettings()
+        throws IOException, XmlPullParserException
+    {
+        Settings globalSettings = readSettings( globalSettingsFile );
+        Settings userSettings = readSettings( userSettingsFile );
+
+        if ( userSettings == null )
+        {
+            userSettings = new Settings();
-        
-        if( settings.getLocalRepository() == null || settings.getLocalRepository().length() < 1 )
+
+        SettingsUtils.merge( userSettings, globalSettings );
+
+        if ( userSettings.getLocalRepository() == null || userSettings.getLocalRepository().length() < 1 )
-            
-            settings.setLocalRepository( localRepository );
+
+            userSettings.setLocalRepository( localRepository );
-        return settings;
+        return userSettings;
-    private File getSettingsFile()
+    private File getUserSettingsFile()
-        String path = System.getProperty( MavenSettingsBuilder.ALT_SETTINGS_XML_LOCATION );
-        
-        if( StringUtils.isEmpty( path ) )
+        String path = System.getProperty( MavenSettingsBuilder.ALT_USER_SETTINGS_XML_LOCATION );
+
+        if ( StringUtils.isEmpty( path ) )
-            return new File( userHome, settingsPath ).getAbsoluteFile();
+            path = userSettingsPath.replaceAll( "\\$\\{user.home\\}", userHome );
+
+            return new File( path ).getAbsoluteFile();
+        }
+        else
+        {
+            return new File( path ).getAbsoluteFile();
+        }
+    }
+
+    private File getGlobalSettingsFile()
+    {
+        String path = System.getProperty( MavenSettingsBuilder.ALT_GLOBAL_SETTINGS_XML_LOCATION );
+
+        if ( StringUtils.isEmpty( path ) )
+        {
+            // TODO: This replacing shouldn't be necessary as user.home should be in the
+            // context of the container and thus the value would be interpolated by Plexus
+            String mavenHome = System.getProperty( "maven.home" );
+
+            path = globalSettingsPath.replaceAll( "\\$\\{maven.home\\}", mavenHome );
+
+            return new File( path ).getAbsoluteFile();
