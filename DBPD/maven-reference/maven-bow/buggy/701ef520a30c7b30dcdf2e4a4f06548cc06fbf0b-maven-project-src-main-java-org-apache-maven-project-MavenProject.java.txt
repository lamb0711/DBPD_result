Working on MNG-607

o Changed MavenMetadataSource to a component, to avoid having to lookup artifactFactory and projectBuilder in order to 
  construct it.

o Added add(..) method to ScmBean in the release plugin to allow addition of release-pom.xml

o Changed the PrepareReleaseMojo to resolve ONLY version and parent-version for the normal pom.xml, and fully resolve all
  artifacts used in the release-pom.xml, including version, parent-version, dependency closure (given by project.getArtifacts()), plugins, and reports. It will then add the release-pom.xml, and (attempt to) delete it before performing the final commit for next development version.

o Added some mapping methods to ArtifactUtils, to key by artifact.getId, and to create an Artifact.getId()-compatible string from parameters.

o Added TestProjectBuilder to remove the requirement in ProjectClasspathTest to modify the fields of the project builder directly.

o Cleaned up the AbstractReleaseMojo and PrepareReleaseMojo to avoid container lookups...they're now mojo parameters with the 'component.' prefix.

NOTE: Next step is to figure out how to use maven-scm to remove an SCM resource, to enable the prepare mojo to take the release-pom.xml back out of HEAD after the tag is complete.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@224413 13f79535-47bb-0310-9956-ffa450edef68

+    private Model originalModel;
+
+    private Map pluginArtifactMap;
+
+    private Set reportArtifacts;
+
+    private Map reportArtifactMap;
+
-            artifactMap = ArtifactUtils.artifactMap( getArtifacts() );
+            artifactMap = ArtifactUtils.artifactMapByVersionlessId( getArtifacts() );
+    
+    public Map getPluginArtifactMap()
+    {
+        if ( pluginArtifactMap == null )
+        {
+            pluginArtifactMap = ArtifactUtils.artifactMapByVersionlessId( getPluginArtifacts() );
+        }
+        
+        return pluginArtifactMap;
+    }
+
+    public void setReportArtifacts( Set reportArtifacts )
+    {
+        this.reportArtifacts = reportArtifacts;
+    }
+    
+    public Set getReportArtifacts()
+    {
+        return reportArtifacts;
+    }
+
+    public Map getReportArtifactMap()
+    {
+        if ( reportArtifactMap == null )
+        {
+            reportArtifactMap = ArtifactUtils.artifactMapByVersionlessId( getReportArtifacts() );
+        }
+        
+        return reportArtifactMap;
+    }
+    public void writeOriginalModel( Writer writer )
+        throws IOException
+    {
+        MavenXpp3Writer pomWriter = new MavenXpp3Writer();
+
+        pomWriter.write( writer, getOriginalModel() );
+    }
+
+    
+    public void setOriginalModel( Model originalModel )
+    {
+        this.originalModel = originalModel;
+    }
+    
+    public Model getOriginalModel()
+    {
+        return originalModel;
+    }
+
+    public boolean equals( Object other )
+    {
+        if ( other == this )
+        {
+            return true;
+        }
+        else if ( !( other instanceof MavenProject ) )
+        {
+            return false;
+        }
+        else
+        {
+            MavenProject otherProject = (MavenProject) other;
+            
+            return getId().equals( otherProject.getId() );
+        }
+    }
+    
+    public int hashCode()
+    {
+        return getId().hashCode();
+    }
+    
