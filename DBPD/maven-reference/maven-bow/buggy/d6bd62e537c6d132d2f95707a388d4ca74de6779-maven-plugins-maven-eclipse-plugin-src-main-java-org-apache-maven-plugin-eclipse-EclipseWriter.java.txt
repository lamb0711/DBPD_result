o Fixed MNG-772: applied Jesse McConnell's patch with minor style adjustments,
  and did some more code cleanup.

o Tracking with projects have been referenced in order to stop adding the same
  project twice if there's a dep on more than one artifact attachment from a
  project.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@239392 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
+import java.util.Collection;
+import java.util.HashSet;
-        Map map = new HashMap();
-
-        map.put( "project.artifactId", project.getArtifactId() );
-        
-        List referencedProjects = writeEclipseClasspath( projectBaseDir, outputDir, project, executedProject, map, reactorProjects );
+        Collection referencedProjects = writeEclipseClasspath( projectBaseDir, outputDir, project, executedProject, reactorProjects );
-        writeEclipseProject( projectBaseDir, outputDir, project, executedProject, referencedProjects, map );
+        writeEclipseProject( projectBaseDir, outputDir, project, executedProject, referencedProjects );
-            if ( plugin.getArtifactId().equals("maven-compiler-plugin") )
+            if ( plugin.getArtifactId().equals( "maven-compiler-plugin" ) )
-                Xpp3Dom o = (Xpp3Dom) plugin.getConfiguration();
-
-                String source = o.getChild( "source" ).getValue();
-                
-                String target = o.getChild( "target" ).getValue();
-                
-                if ( !source.equals("1.3") )
-                {
-                    coreSettings.put( "org.eclipse.jdt.core.compiler.source", source );
-
-                    coreSettings.put( "org.eclipse.jdt.core.compiler.compliance", source );
-                }
-
-                if ( !target.equals("1.2") )
-                {
-                    coreSettings.put( "org.eclipse.jdt.core.compiler.codegen.targetPlatform", target );
-                }
+                handleCompilerPlugin( plugin, coreSettings );
-        if ( ! coreSettings.isEmpty() )
+        if ( !coreSettings.isEmpty() )
-    protected void writeEclipseProject( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, List referencedProjects, Map map )
+    protected void writeEclipseProject( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, Collection referencedProjects )
-            writer.endElement(); // linedResources
+            writer.endElement(); // linkedResources
-    protected List writeEclipseClasspath( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, Map map, List reactorProjects )
+    protected Collection writeEclipseClasspath( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, List reactorProjects )
-        List referencedProjects = new ArrayList();
+        Collection referencedProjects = new HashSet();
-            
-            MavenProject refProject = addDependency( writer, artifact, reactorProjects );
-            
-            if ( refProject != null )
-            {
-                referencedProjects.add( refProject );
-            }
+
+            addDependency( writer, artifact, reactorProjects, referencedProjects );
-    private MavenProject addDependency( XMLWriter writer, Artifact artifact, List reactorProjects )
+    private void addDependency( XMLWriter writer, Artifact artifact, List reactorProjects, Collection referencedProjects )
-        
-        if (reactorProject != null)
+        if ( reactorProject != null )
+            // if there's a dependency on multiple artifact attachments of the
+            // same project, don't add it again.
+
+            if ( !markAddedOnce( reactorProject, referencedProjects ) )
+            {
+                return;
+            }
+
-                return null;
+                return;
-        
-        return reactorProject;
+    private static boolean markAddedOnce( MavenProject project, Collection referencedProjects )
+    {
+        if ( referencedProjects.contains( project ) )
+        {
+            return false;
+        }
+        else
+        {
+            referencedProjects.add( project );
+
+            return true;
+        }
+    }
+
-    private void close( Writer closeable )
+    private static void close( Writer closeable )
-    private String toRelative( File basedir, String absolutePath )
+    private static String toRelative( File basedir, String absolutePath )
-    private void assertNotEmpty( String string, String elementName )
+    private static void assertNotEmpty( String string, String elementName )
+
+    private static void handleCompilerPlugin( Plugin plugin, Properties coreSettings )
+    {
+        Xpp3Dom pluginConfig = (Xpp3Dom) plugin.getConfiguration();
+
+        String source = null;
+
+        Xpp3Dom sourceChild = pluginConfig.getChild( "source" );
+
+        if (sourceChild != null)
+        {
+            source = sourceChild.getValue();
+        }
+
+        String target = null;
+
+        Xpp3Dom targetChild = pluginConfig.getChild( "target" );
+
+        if (targetChild != null)
+        {
+            target = targetChild.getValue();
+        }
+        
+        if ( source != null && !source.equals( "1.3" ) )
+        {
+            coreSettings.put( "org.eclipse.jdt.core.compiler.source", source );
+
+            coreSettings.put( "org.eclipse.jdt.core.compiler.compliance", source );
+        }
+
+        if ( target != null && !target.equals( "1.2" ) )
+        {
+            coreSettings.put( "org.eclipse.jdt.core.compiler.codegen.targetPlatform", target );
+        }
+    }
