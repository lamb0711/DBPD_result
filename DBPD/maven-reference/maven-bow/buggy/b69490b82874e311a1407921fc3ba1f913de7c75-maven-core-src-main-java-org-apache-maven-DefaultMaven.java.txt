Resolving: MNG-95

o Added --fail-fast --fail-at-end --fail-never CLI options, with appropriate summary and exclusion of dependent projects from the build when --fail-at-end is specified. Also, implemented it0046 and it1011 to test it.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@227490 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.ReactorManager;
-import org.apache.maven.project.ProjectSorter;
-        List projects;
-
-        MavenProject topLevelProject;
-
+        ReactorManager rm;
+        
-            projects = collectProjects( files, request.getLocalRepository(), request.isRecursive(),
+            List projects = collectProjects( files, request.getLocalRepository(), request.isRecursive(),
-            if ( !projects.isEmpty() )
-            {
-                // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
-                topLevelProject = findTopLevelProject( projects, request.getPomFile() );
-                
-                projects = ProjectSorter.getSortedProjects( projects );
-            }
-            else
+            if ( projects.isEmpty() )
-                topLevelProject = projectBuilder.buildStandaloneSuperProject( request.getLocalRepository(),
+                MavenProject superProject = projectBuilder.buildStandaloneSuperProject( request.getLocalRepository(),
-                projects.add( topLevelProject );
+                projects.add( superProject );
+            }
+            
+            rm = new ReactorManager( projects );
+            
+            String requestFailureBehavior = request.getFailureBehavior();
+            
+            if ( requestFailureBehavior != null )
+            {
+                rm.setFailureBehavior( requestFailureBehavior );
-            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-            MavenExecutionResponse response = new MavenExecutionResponse();
-            response.setStart( new Date() );
-            response.setFinish( new Date() );
-            response.setException( e );
-            logFailure( response, e, null );
-
-            return response;
+            return dispatchErrorResponse( dispatcher, event, request.getBaseDirectory(), e );
-            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-            MavenExecutionResponse response = new MavenExecutionResponse();
-            response.setStart( new Date() );
-            response.setFinish( new Date() );
-            response.setException( e );
-            logFailure( response, e, null );
-
-            return response;
+            return dispatchErrorResponse( dispatcher, event, request.getBaseDirectory(), e );
-            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-            MavenExecutionResponse response = new MavenExecutionResponse();
-            response.setStart( new Date() );
-            response.setFinish( new Date() );
-            response.setException( e );
-            logFailure( response, e, null );
-
-            return response;
+            return dispatchErrorResponse( dispatcher, event, request.getBaseDirectory(), e );
-            MavenSession session = createSession( request, projects );
+            MavenSession session = createSession( request, rm );
-                MavenExecutionResponse response = lifecycleExecutor.execute( session, topLevelProject, dispatcher );
+                MavenExecutionResponse response = lifecycleExecutor.execute( session, rm, dispatcher );
-                    if ( exception instanceof MojoExecutionException )
+                    if ( ReactorManager.FAIL_AT_END.equals( rm.getFailureBehavior() ) && ( exception instanceof ReactorException ) )
+                    {
+                        logFailure( response, exception, null );
+                        
+                        if ( rm.hasMultipleProjects() )
+                        {
+                            writeReactorSummary( rm );
+                        }
+                    }
+                    else if ( exception instanceof MojoExecutionException )
-                    logSuccess( response );
+                    logSuccess( response, rm );
-    private MavenProject findTopLevelProject( List projects, String customPomPath ) throws IOException
+    private void writeReactorSummary( ReactorManager rm )
-        File topPomFile;
+        // -------------------------
+        // Reactor Summary:
+        // -------------------------
+        // o project-name...........FAILED
+        // o project2-name..........SKIPPED (dependency build failed or was skipped)
+        // o project-3-name.........SUCCESS
-        if ( customPomPath != null )
-        {
-            topPomFile = new File( customPomPath ).getCanonicalFile();
-        }
-        else
-        {
-            topPomFile = new File( userDir, RELEASE_POMv4 );
-            
-            if ( !topPomFile.exists() )
-            {
-                topPomFile = new File( userDir, POMv4 );
-                
-                if ( !topPomFile.exists() )
-                {
-                    getLogger().warn( "Cannot find top-level project file in directory: " + userDir + ". Using first project in project-list." );
-                    
-                    return (MavenProject) projects.get( 0 );
-                }
-            }
-        }
+        line();
+        getLogger().info( "Reactor Summary:" );
+        line();
-        MavenProject topProject = null;
-        
-        for ( Iterator it = projects.iterator(); it.hasNext(); )
+        for ( Iterator it = rm.getProjectsSortedByDependency().iterator(); it.hasNext(); )
-            File projectFile = project.getFile().getCanonicalFile();
+            String id = project.getId();
-            if ( topPomFile.equals( projectFile ) )
+            if ( rm.hasBuildFailure( id ) )
-                topProject = project;
-                break;
+                logReactorSummaryLine( project.getName(), "FAILED" );
+            }
+            else if ( rm.isBlackListed( id ) )
+            {
+                logReactorSummaryLine( project.getName(), "SKIPPED (dependency build failed or was skipped)" );
+            }
+            else
+            {
+                logReactorSummaryLine( project.getName(), "SUCCESS" );
-        return topProject;
+        getLogger().info( "" );
+        getLogger().info( "" );
+    }
+
+    private void logReactorSummaryLine( String name, String status )
+    {
+        StringBuffer messageBuffer = new StringBuffer();
+        
+        messageBuffer.append( name );
+        
+        int dotCount = 65;
+        
+        dotCount -= name.length();
+        
+        for ( int i = 0; i < dotCount; i++ )
+        {
+            messageBuffer.append( '.' );
+        }
+        
+        messageBuffer.append( status );
+        
+        getLogger().info( messageBuffer.toString() );
+    }
+
+    private MavenExecutionResponse dispatchErrorResponse( EventDispatcher dispatcher, String event, String baseDirectory, Exception e )
+    {
+        dispatcher.dispatchError( event, baseDirectory, e );
+
+        MavenExecutionResponse response = new MavenExecutionResponse();
+        response.setStart( new Date() );
+        response.setFinish( new Date() );
+        response.setException( e );
+        logFailure( response, e, null );
+
+        return response;
-    protected MavenSession createSession( MavenExecutionRequest request, List projects )
+    protected MavenSession createSession( MavenExecutionRequest request, ReactorManager rpm )
-                                 request.getEventDispatcher(), projects, request.getGoals(),
+                                 request.getEventDispatcher(), rpm, request.getGoals(),
-    protected void logSuccess( MavenExecutionResponse r )
+    protected void logSuccess( MavenExecutionResponse r, ReactorManager rm )
+        if ( rm.hasMultipleProjects() )
+        {
+            writeReactorSummary( rm );
+        }
+        
-
+    
