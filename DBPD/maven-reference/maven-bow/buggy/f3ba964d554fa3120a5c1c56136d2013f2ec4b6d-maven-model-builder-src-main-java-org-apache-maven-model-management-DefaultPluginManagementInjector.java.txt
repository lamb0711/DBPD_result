o Refactored management injection to allow for proper extension loading

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@793578 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.DependencyManagement;
-import org.apache.maven.model.Exclusion;
- * Handles injection of plugin/dependency management into the model.
+ * Handles injection of plugin management into the model.
-@Component( role = ManagementInjector.class )
-public class DefaultManagementInjector
-    implements ManagementInjector
+@Component( role = PluginManagementInjector.class )
+public class DefaultPluginManagementInjector
+    implements PluginManagementInjector
-        merger.mergeManagedDependencies( model );
-        merger.mergeManagedBuildPlugins( model );
+        merger.mergeManagedBuildPlugins( model, false );
+    }
+
+    public void injectBasicManagement( Model model, ModelBuildingRequest request )
+    {
+        merger.mergeManagedBuildPlugins( model, true );
-        public void mergeManagedBuildPlugins( Model model )
+        public void mergeManagedBuildPlugins( Model model, boolean basic )
-                    mergePluginContainer_Plugins( build, pluginManagement, false, Collections.emptyMap() );
+                    mergePluginContainer_Plugins( build, pluginManagement, basic );
-        @Override
-        protected void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source,
-                                                     boolean sourceDominant, Map<Object, Object> context )
+        private void mergePluginContainer_Plugins( PluginContainer target, PluginContainer source, boolean basic )
+                Map<Object, Object> context = Collections.emptyMap();
+
-                        mergePlugin( element, managedPlugin, sourceDominant, context );
+                        if ( basic )
+                        {
+                            mergePlugin_Version( element, managedPlugin, false, context );
+                            mergePlugin_Extensions( element, managedPlugin, false, context );
+                        }
+                        else
+                        {
+                            mergePlugin( element, managedPlugin, false, context );
+                        }
-        public void mergeManagedDependencies( Model model )
-        {
-            DependencyManagement dependencyManagement = model.getDependencyManagement();
-            if ( dependencyManagement != null )
-            {
-                Map<Object, Dependency> dependencies = new HashMap<Object, Dependency>();
-                Map<Object, Object> context = Collections.emptyMap();
-
-                for ( Dependency dependency : model.getDependencies() )
-                {
-                    Object key = getDependencyKey( dependency );
-                    dependencies.put( key, dependency );
-                }
-
-                for ( Dependency managedDependency : dependencyManagement.getDependencies() )
-                {
-                    Object key = getDependencyKey( managedDependency );
-                    Dependency dependency = dependencies.get( key );
-                    if ( dependency != null )
-                    {
-                        mergeDependency( dependency, managedDependency, false, context );
-                    }
-                }
-            }
-        }
-
-        @Override
-        protected void mergeDependency_Exclusions( Dependency target, Dependency source, boolean sourceDominant,
-                                                   Map<Object, Object> context )
-        {
-            List<Exclusion> tgt = target.getExclusions();
-            if ( tgt.isEmpty() )
-            {
-                List<Exclusion> src = source.getExclusions();
-
-                for ( Iterator<Exclusion> it = src.iterator(); it.hasNext(); )
-                {
-                    Exclusion element = it.next();
-                    Exclusion clone = new Exclusion();
-                    mergeExclusion( clone, element, true, context );
-                    target.addExclusion( clone );
-                }
-            }
-        }
-
