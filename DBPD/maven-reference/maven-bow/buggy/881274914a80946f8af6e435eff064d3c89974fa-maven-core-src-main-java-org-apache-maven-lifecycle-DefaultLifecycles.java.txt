[MNG-6917] Introduce wrapper lifecycle

-import org.codehaus.plexus.util.StringUtils;
-import java.util.ArrayList;
+import java.util.Comparator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.Set;
+import java.util.Objects;
+import java.util.stream.Collectors;
-    public static final String[] STANDARD_LIFECYCLES = { "default", "clean", "site" };
+    public static final String[] STANDARD_LIFECYCLES = { "default", "clean", "site", "wrapper" };
-    @Inject
-    private Map<String, Lifecycle> lifecycles;
+    private final Map<String, Lifecycle> lifecyclesMap;
-    @Inject
-    private Logger logger;
+    private final Logger logger;
+        this.lifecyclesMap = null;
+        this.logger = null;
-    public DefaultLifecycles( Map<String, Lifecycle> lifecycles, Logger logger )
+    @Inject
+    public DefaultLifecycles( Map<String, Lifecycle> lifecyclesMap, Logger logger )
-        this.lifecycles = new LinkedHashMap<>();
+        // Must keep the lifecyclesMap as is.
+        // During initialization it only contains the default lifecycles.
+        // However, extensions might add custom lifecycles later on.
+        this.lifecyclesMap = lifecyclesMap;
-        this.lifecycles = lifecycles;
-    public Lifecycle get( String key )
+    /**
+     * Get lifecycle based on phase
+     * 
+     * @param phase
+     * @return
+     */
+    public Lifecycle get( String phase )
-        return getPhaseToLifecycleMap().get( key );
+        return getPhaseToLifecycleMap().get( phase );
-        HashMap<String, Lifecycle> phaseToLifecycleMap = new HashMap<>();
+        Map<String, Lifecycle> phaseToLifecycleMap = new HashMap<>();
-        // ensure canonical order of standard lifecycles
-        Map<String, Lifecycle> lifecycles = new LinkedHashMap<>( this.lifecycles );
-
-        LinkedHashSet<String> lifecycleNames = new LinkedHashSet<>( Arrays.asList( STANDARD_LIFECYCLES ) );
-        lifecycleNames.addAll( lifecycles.keySet() );
-
-        ArrayList<Lifecycle> result = new ArrayList<>();
-        for ( String name : lifecycleNames )
+        List<String> lifecycleIds = Arrays.asList( STANDARD_LIFECYCLES );
+        
+        Comparator<String> comparator = ( l, r ) -> 
-            Lifecycle lifecycle = lifecycles.get( name );
-            if ( lifecycle.getId() == null )
+            if ( lifecycleIds.contains( l ) ) 
-                throw new NullPointerException( "A lifecycle must have an id." );
+                return lifecycleIds.indexOf( l ) - lifecycleIds.indexOf( r );      
-            result.add( lifecycle );
-        }
-
-        return result;
+            else
+            {
+                return Integer.MAX_VALUE;
+            }
+        }; 
+        
+        // ensure canonical order of standard lifecycles
+        return lifecyclesMap.values().stream()
+                                .peek( l -> Objects.requireNonNull( l.getId(), "A lifecycle must have an id." ) )
+                                .sorted( Comparator.comparing( Lifecycle::getId, comparator ) )
+                                .collect( Collectors.toList() );
-        Set<String> phases = new LinkedHashSet<>();
-
-        for ( Lifecycle lifecycle : getLifeCycles() )
-        {
-            phases.addAll( lifecycle.getPhases() );
-        }
-
-        return StringUtils.join( phases.iterator(), ", " );
+        return getLifeCycles().stream()
+                        .flatMap( l -> l.getPhases().stream() )
+                        .collect( Collectors.joining( ", " ) );
-
+    
