o Exposed methods to allow the Site Plugin to reuse the forking code for report mojos

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@808828 13f79535-47bb-0310-9956-ffa450edef68

+        List<MavenProject> forkedProjects = executeForkedExecutions( mojoExecution, session, projectIndex );
+
+        fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_STARTED );
+
+        try
+        {
+            pluginManager.executeMojo( session, mojoExecution );
+
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_SUCCEEDED );
+        }
+        catch ( MojoFailureException e )
+        {
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
+
+            throw e;
+        }
+        catch ( MojoExecutionException e )
+        {
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
+
+            throw e;
+        }
+        catch ( PluginConfigurationException e )
+        {
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
+
+            throw e;
+        }
+        catch ( PluginManagerException e )
+        {
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
+
+            throw e;
+        }
+        finally
+        {
+            for ( MavenProject forkedProject : forkedProjects )
+            {
+                forkedProject.setExecutionProject( null );
+            }
+        }
+    }
+
+    public List<MavenProject> executeForkedExecutions( MojoExecution mojoExecution, MavenSession session )
+        throws MojoFailureException, MojoExecutionException, PluginConfigurationException, PluginManagerException
+    {
+        return executeForkedExecutions( mojoExecution, session, new ProjectIndex( session.getProjects() ) );
+    }
+
+    private List<MavenProject> executeForkedExecutions( MojoExecution mojoExecution, MavenSession session,
+                                                        ProjectIndex projectIndex )
+        throws MojoFailureException, MojoExecutionException, PluginConfigurationException, PluginManagerException
+    {
-        fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_STARTED );
-
-        try
-        {
-            pluginManager.executeMojo( session, mojoExecution );
-
-            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_SUCCEEDED );
-        }
-        catch ( MojoFailureException e )
-        {
-            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
-
-            throw e;
-        }
-        catch ( MojoExecutionException e )
-        {
-            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
-
-            throw e;
-        }
-        catch ( PluginConfigurationException e )
-        {
-            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
-
-            throw e;
-        }
-        catch ( PluginManagerException e )
-        {
-            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
-
-            throw e;
-        }
-        finally
-        {
-            for ( MavenProject forkedProject : forkedProjects )
-            {
-                forkedProject.setExecutionProject( null );
-            }
-        }
+        return forkedProjects;
+    public void calculateForkedExecutions( MojoExecution mojoExecution, MavenSession session )
+        throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException,
+        PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
+        LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
+    {
+        calculateForkedExecutions( mojoExecution, session, session.getCurrentProject(), new HashSet<MojoDescriptor>() );
+    }
+
