o pull from trunky dunk dunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@767707 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Collection;
-import org.apache.maven.project.builder.PomClassicDomainModel;
-import org.apache.maven.project.builder.PomTransformer;
-import org.apache.maven.project.builder.ProjectUri;
-import org.apache.maven.project.builder.factories.ArtifactModelContainerFactory;
-import org.apache.maven.project.builder.factories.ExclusionModelContainerFactory;
-import org.apache.maven.project.builder.profile.ProfileContext;
-import org.apache.maven.shared.model.DataSourceException;
-import org.apache.maven.shared.model.InterpolatorProperty;
-import org.apache.maven.shared.model.ModelContainer;
-import org.apache.maven.shared.model.ModelDataSource;
-import org.apache.maven.shared.model.ModelMarshaller;
-import org.apache.maven.shared.model.ModelProperty;
-import org.apache.maven.shared.model.impl.DefaultModelDataSource;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.Exclusion;
+import org.apache.maven.model.Parent;
+import org.apache.maven.model.PomClassicDomainModel;
-/**
- * Provides a wrapper for the maven model.
- */
-    /**
-     * Bytes containing the underlying model
-     */
-    private final List<ModelProperty> modelProperties;
-
-    /**
-     * History of joins and deletes of model properties
-     */
-    private String eventHistory;
-
-        this( new ByteArrayInputStream( bytes ) );
+        super( new ByteArrayInputStream( bytes ) );
-    /**
-     * Constructor
-     *
-     * @throws IOException if there is a problem constructing the model
-     */
-    public MavenDomainModel( InputStream inputStream )
-        throws IOException
+
+    public MavenDomainModel(PomClassicDomainModel model) 
+    	throws IOException
-        this( ModelMarshaller.marshallXmlToModelProperties( inputStream, ProjectUri.baseUri, PomTransformer.URIS ) );
-    }
-
-    /**
-     * Constructor
-     *
-     * @throws IOException if there is a problem constructing the model
-     */
-    public MavenDomainModel( List<ModelProperty> modelProperties )
-        throws IOException
-    {
-        super(modelProperties);
-        this.modelProperties = new ArrayList<ModelProperty>( modelProperties );
-    }
-
+    	super(model.getModel());
+    }    
+    
-        // TODO: Expensive call if no parent
-        throws DataSourceException
-        ModelDataSource source = new DefaultModelDataSource( modelProperties, PomTransformer.MODEL_CONTAINER_FACTORIES );
-        for ( ModelContainer modelContainer : source.queryFor( ProjectUri.Dependencies.Dependency.xUri ) )
+        for(Dependency d: model.getDependencies())
-            metadatas.add( transformContainerToMetadata( modelContainer ) );
+        	ArtifactMetadata metadata = new ArtifactMetadata();
+        	metadata.setArtifactId(d.getArtifactId());
+        	metadata.setClassifier(d.getClassifier());
+        	metadata.setGroupId(d.getGroupId());
+        	metadata.setScope( (d.getScope() == null) ? "runtime" : d.getScope());
+        	metadata.setVersion(d.getVersion());
+        	metadata.setOptional(d.isOptional());
+        	
+        	 if( "test-jar".equals( d.getType() ) )
+             {
+                 metadata.setType( "jar" );
+                 metadata.setClassifier( "tests" );
+             }
+             else
+             {
+            	 metadata.setType( d.getType() );	 
+             }
+                      	 
+            List<ArtifactMetadata> exclusions = new ArrayList<ArtifactMetadata>();
+            for( Exclusion e : d.getExclusions() ) 
+            {
+            	ArtifactMetadata md = new ArtifactMetadata();
+            	md.setArtifactId(e.getArtifactId());
+            	md.setGroupId(e.getGroupId());
+            	exclusions.add(md);
+            }
+            metadata.setExclusions(exclusions);
+            metadatas.add(metadata);
-
+        
-    public Collection<ModelContainer> getActiveProfileContainers( List<InterpolatorProperty> properties )
-        throws DataSourceException
-    {
-        ModelDataSource dataSource = new DefaultModelDataSource( modelProperties, PomTransformer.MODEL_CONTAINER_FACTORIES );
-
-        return new ProfileContext( dataSource, null, null, properties ).getActiveProfiles();
-    }
-
-        if ( parentMetadata != null )
+        if(parentMetadata == null)
-            return copyArtifactBasicMetadata( parentMetadata );
+            Parent parent = model.getParent();
+            if(parent != null)
+            {
+                parentMetadata = new ArtifactMetadata();
+                parentMetadata.setArtifactId( parent.getArtifactId() );
+                parentMetadata.setVersion( parent.getVersion() );
+                parentMetadata.setGroupId( parent.getGroupId() );        	
+            }       	
-
-        String groupId = null, artifactId = null, version = null;
-
-        for ( ModelProperty mp : modelProperties )
-        {
-            if ( mp.getUri().equals( ProjectUri.Parent.version ) )
-            {
-                version = mp.getResolvedValue();
-            }
-            else if ( mp.getUri().equals( ProjectUri.Parent.artifactId ) )
-            {
-                artifactId = mp.getResolvedValue();
-            }
-            else if ( mp.getUri().equals( ProjectUri.Parent.groupId ) )
-            {
-                groupId = mp.getResolvedValue();
-            }
-            if ( groupId != null && artifactId != null && version != null )
-            {
-                break;
-            }
-        }
-
-        if ( groupId == null || artifactId == null || version == null )
-        {
-            return null;
-        }
-        parentMetadata = new ArtifactMetadata();
-        parentMetadata.setArtifactId( artifactId );
-        parentMetadata.setVersion( version );
-        parentMetadata.setGroupId( groupId );
-
-        return copyArtifactBasicMetadata( parentMetadata );
+        return (parentMetadata != null) ? copyArtifactBasicMetadata( parentMetadata ) : null;
-
-    /**
-     * @see org.apache.maven.shared.model.DomainModel#getEventHistory()
-     */
-    public String getEventHistory()
-    {
-        return eventHistory;
-    }
-
-    /**
-     * @see org.apache.maven.shared.model.DomainModel#setEventHistory(String)
-     */
-    public void setEventHistory( String eventHistory )
-    {
-        if ( eventHistory == null )
-        {
-            throw new IllegalArgumentException( "eventHistory: null" );
-        }
-        this.eventHistory = eventHistory;
-    }
-
-    public List<ModelProperty> getModelProperties()
-        throws IOException
-    {
-        return new ArrayList<ModelProperty>( modelProperties );
-    }
-
-    private ArtifactMetadata transformContainerToMetadata( ModelContainer container )
-        throws DataSourceException
-    {
-        List<ModelProperty> modelProperties = container.getProperties();
-
-        ArtifactMetadata metadata = new ArtifactMetadata();
-        for ( ModelProperty mp : modelProperties )
-        {
-            if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.groupId ) )
-            {
-                metadata.setGroupId( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.artifactId ) )
-            {
-                metadata.setArtifactId( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.version ) )
-            {
-                metadata.setVersion( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.classifier ) )
-            {
-                metadata.setClassifier( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.scope ) )
-            {
-                metadata.setScope( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.type ) )
-            {
-                metadata.setType( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.optional ) )
-            {
-                metadata.setOptional( mp.getResolvedValue() );
-            }
-        }
-
-        if ( metadata.getScope() == null )
-        {
-            metadata.setScope( "runtime" );
-        }
-
-        ModelDataSource dataSource = new DefaultModelDataSource( container.getProperties(), Arrays.asList( new ArtifactModelContainerFactory(),
-                                                                   new ExclusionModelContainerFactory() ) );
-        List<ArtifactMetadata> exclusions = new ArrayList<ArtifactMetadata>();
-
-        for ( ModelContainer exclusion : dataSource.queryFor( ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.xUri ) )
-        {
-            ArtifactMetadata meta = new ArtifactMetadata();
-            exclusions.add( meta );
-
-            for ( ModelProperty mp : exclusion.getProperties() )
-            {
-                if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.artifactId ) )
-                {
-                    meta.setArtifactId( mp.getResolvedValue() );
-                }
-                else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.groupId ) )
-                {
-                    meta.setGroupId( mp.getResolvedValue() );
-                }
-            }
-
-        }
-        metadata.setExclusions( exclusions );
-
-        return metadata;
-    }
