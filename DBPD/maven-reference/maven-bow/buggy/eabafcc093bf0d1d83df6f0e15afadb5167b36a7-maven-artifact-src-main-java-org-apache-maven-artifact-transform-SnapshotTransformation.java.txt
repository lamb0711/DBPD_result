implement snapshot policies: default is to only check once a day (after crossing midnight), or if --update-snapshots (-U) is specified on the command line


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163711 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Calendar;
+import java.util.Date;
-        // TODO: remove hack
-        if ( isSnapshot( artifact ) &&
-            !Boolean.valueOf( System.getProperty( "maven.debug.snapshot.disabled", "true" ) ).booleanValue() )
+        if ( isSnapshot( artifact ) )
-            if ( !alreadyResolved( artifact ) )
+            // TODO: remove hack
+            if ( !alreadyResolved( artifact ) &&
+                !Boolean.valueOf( System.getProperty( "maven.debug.snapshot.disabled", "false" ) ).booleanValue() )
-                boolean foundRemote = false;
+                boolean checkedUpdates = false;
-                    getLogger().info(
-                        artifact.getArtifactId() + ": checking for updates from " + remoteRepository.getId() );
-
-                    SnapshotArtifactMetadata remoteMetadata = SnapshotArtifactMetadata.retrieveFromRemoteRepository(
-                        artifact, remoteRepository, wagonManager );
-
-                    if ( remoteMetadata.compareTo( localMetadata ) > 0 )
+                    String snapshotPolicy = remoteRepository.getSnapshotPolicy();
+                    // TODO: should be able to calculate this less often
+                    boolean checkForUpdates = false;
+                    if ( ArtifactRepository.SNAPSHOT_POLICY_ALWAYS.equals( snapshotPolicy ) )
-                        artifact.setRepository( remoteRepository );
+                        checkForUpdates = true;
+                    }
+                    else if ( ArtifactRepository.SNAPSHOT_POLICY_DAILY.equals( snapshotPolicy ) )
+                    {
+                        // Note that if last modified is 0, it didn't exist, so this will be true
+                        if ( getMidnightBoundary().after( new Date( localMetadata.getLastModified() ) ) )
+                        {
+                            checkForUpdates = true;
+                        }
+                    }
+                    else if ( snapshotPolicy.startsWith( ArtifactRepository.SNAPSHOT_POLICY_INTERVAL ) )
+                    {
+                        String s = snapshotPolicy.substring( ArtifactRepository.SNAPSHOT_POLICY_INTERVAL.length() + 1 );
+                        int minutes = Integer.valueOf( s ).intValue();
+                        Calendar cal = Calendar.getInstance();
+                        cal.add( Calendar.MINUTE, -minutes );
+                        // Note that if last modified is 0, it didn't exist, so this will be true
+                        if ( cal.getTime().after( new Date( localMetadata.getLastModified() ) ) )
+                        {
+                            checkForUpdates = true;
+                        }
+                    }
+                    // else assume "never"
-                        localMetadata = remoteMetadata;
-                        foundRemote = true;
+                    if ( checkForUpdates )
+                    {
+                        getLogger().info(
+                            artifact.getArtifactId() + ": checking for updates from " + remoteRepository.getId() );
+
+                        SnapshotArtifactMetadata remoteMetadata = SnapshotArtifactMetadata.retrieveFromRemoteRepository(
+                            artifact, remoteRepository, wagonManager );
+
+                        if ( remoteMetadata.compareTo( localMetadata ) > 0 )
+                        {
+                            artifact.setRepository( remoteRepository );
+
+                            localMetadata = remoteMetadata;
+                        }
+                        checkedUpdates = true;
-                if ( foundRemote )
+                if ( checkedUpdates )
-                    artifact.addMetadata( localMetadata );
+                    localMetadata.storeInLocalRepository( localRepository );
-                        if ( foundRemote )
+                        if ( artifact.getRepository() != null )
+    private Date getMidnightBoundary()
+    {
+        Calendar cal = Calendar.getInstance();
+        cal.set( Calendar.HOUR_OF_DAY, 0 );
+        cal.set( Calendar.MINUTE, 0 );
+        cal.set( Calendar.SECOND, 0 );
+        cal.set( Calendar.MILLISECOND, 0 );
+        return cal.getTime();
+    }
+
