[MNG-4633] Reactor artifact resolution in weave mode

Resolves artifacts from within reactor build.
No longer requires artifacts to be present in local repository before building weave mode ;)

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@935334 13f79535-47bb-0310-9956-ffa450edef68

-                                     MavenSession sessionForThisModule, MavenExecutionPlan executionPlan )
+                                     MavenSession sessionForThisModule, MavenExecutionPlan executionPlan,
+                                     Set<Artifact> projectArtifacts )
-        resolveDependencies( aggregating, sessionForThisModule, executionPlan, projectsToResolve );
+        resolveDependencies( aggregating, sessionForThisModule, executionPlan, projectsToResolve, projectArtifacts );
-                                        dependenctContext.getScopesToResolve(), session,
-                                        dependenctContext.isAggregating() );
+                                         dependenctContext.getScopesToResolve(), session,
+                                         dependenctContext.isAggregating(), new HashSet<Artifact>() );
-                                      List<MavenProject> projectsToResolve )
+                                       List<MavenProject> projectsToResolve, Set<Artifact> projectArtifacts )
-            resolveDependencies( project, aggregating, session, executionPlan );
+            resolveProjectDependencies( project, executionPlan.getRequiredCollectionScopes(),
+                                         executionPlan.getRequiredResolutionScopes(), session, aggregating,
+                                         projectArtifacts );
-    private void resolveDependencies( MavenProject project, boolean aggregating, MavenSession session,
-                                      MavenExecutionPlan executionPlan )
-        throws LifecycleExecutionException
-    {
-        resolveProjectDependencies( project, executionPlan.getRequiredCollectionScopes(),
-                                    executionPlan.getRequiredResolutionScopes(), session, aggregating );
-    }
-
-                                             Collection<String> scopesToResolve, MavenSession session,
-                                             boolean aggregating )
+                                              Collection<String> scopesToResolve, MavenSession session,
+                                              boolean aggregating, Set<Artifact> projectArtifacts )
-            getProjectDependencies( project, scopesToCollect, scopesToResolve, session, aggregating );
+            getProjectDependencies( project, scopesToCollect, scopesToResolve, session, aggregating,
+                                    projectArtifacts );
-                                                  boolean aggregating )
+                                                  boolean aggregating, Set<Artifact> projectArtifacts )
-                artifacts = projectDependenciesResolver.resolve( project, scopesToCollect, scopesToResolve, session );
+                artifacts = projectDependenciesResolver.resolve( project , scopesToCollect,
+                                                                 scopesToResolve, session, projectArtifacts );
-                if ( aggregating && areAllArtifactsInReactor( session.getProjects(), e.getMissingArtifacts() ) )
-                {
-                    logger.warn( "The following artifacts could not be resolved at this point of the build" +
-                        " but seem to be part of the reactor:" );
-
-                    for ( Artifact artifact : e.getMissingArtifacts() )
-                    {
-                        logger.warn( "o " + artifact.getId() );
-                    }
-
-                    logger.warn( "Try running the build up to the lifecycle phase \"package\"" );
-
-                    artifacts = new LinkedHashSet<Artifact>( e.getResolvedArtifacts() );
-                }
-                else
-                {
-                    throw e;
-                }
+                artifacts = handleException( session, aggregating, e );
+    private Set<Artifact> handleException( MavenSession session, boolean aggregating,
+                                           MultipleArtifactsNotFoundException e )
+        throws MultipleArtifactsNotFoundException
+    {
+        Set<Artifact> artifacts;/*
+        * MNG-2277, the check below compensates for our bad plugin support where we ended up with aggregator
+        * plugins that require dependency resolution although they usually run in phases of the build where project
+        * artifacts haven't been assembled yet. The prime example of this is "mvn release:prepare".
+        */
+        if ( aggregating && areAllArtifactsInReactor( session.getProjects(), e.getMissingArtifacts() ) )
+        {
+            logger.warn( "The following artifacts could not be resolved at this point of the build" +
+                " but seem to be part of the reactor:" );
+
+            for ( Artifact artifact : e.getMissingArtifacts() )
+            {
+                logger.warn( "o " + artifact.getId() );
+            }
+
+            logger.warn( "Try running the build up to the lifecycle phase \"package\"" );
+
+            artifacts = new LinkedHashSet<Artifact>( e.getResolvedArtifacts() );
+        }
+        else
+        {
+            throw e;
+        }
+        return artifacts;
+    }
+
