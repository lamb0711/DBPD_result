o merge of the maven-embedder-refactor branch into the trunk



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@392327 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.BuildFailureException;
+import org.apache.maven.Maven;
+import org.apache.maven.MavenTools;
+import org.apache.maven.SettingsConfigurationException;
-import org.apache.maven.execution.MavenSession;
-import org.apache.maven.execution.ReactorManager;
-import org.apache.maven.lifecycle.LifecycleExecutionException;
+import org.apache.maven.execution.MavenExecutionRequest;
-import org.apache.maven.monitor.event.DefaultEventDispatcher;
-import org.apache.maven.monitor.event.EventDispatcher;
-import org.apache.maven.monitor.event.EventMonitor;
-import org.apache.maven.project.DuplicateProjectException;
+import org.apache.maven.reactor.MavenExecutionException;
-import org.apache.maven.settings.RuntimeInfo;
-import org.codehaus.plexus.util.dag.CycleDetectedException;
-import java.util.Collections;
-import java.util.Date;
-import java.util.Properties;
+    //
+    // ----------------------------------------------------------------------
+
+    private Maven maven;
+
+    private MavenTools mavenTools;
+
+    // ----------------------------------------------------------------------
+    private ClassWorld classWorld;
+
+    public void setClassWorld( ClassWorld classWorld )
+    {
+        this.classWorld = classWorld;
+    }
+
+    public ClassWorld getClassWorld()
+    {
+        return classWorld;
+    }
+
-    // TODO: should we allow the passing in of a settings object so that everything can be taken from the client env
-    // TODO: transfer listener
-    // TODO: logger
-
-    public void execute( MavenProject project,
-                         List goals,
-                         EventMonitor eventMonitor,
-                         TransferListener transferListener,
-                         Properties properties,
-                         File executionRootDirectory )
-        throws CycleDetectedException, LifecycleExecutionException, BuildFailureException, DuplicateProjectException
-    {
-        execute( Collections.singletonList( project ), goals, eventMonitor, transferListener, properties, executionRootDirectory );
-    }
-
-    public void execute( List projects,
-                         List goals,
-                         EventMonitor eventMonitor,
-                         TransferListener transferListener,
-                         Properties properties,
-                         File executionRootDirectory )
-        throws CycleDetectedException, LifecycleExecutionException, BuildFailureException, DuplicateProjectException
-    {
-        ReactorManager rm = new ReactorManager( projects );
-
-        EventDispatcher eventDispatcher = new DefaultEventDispatcher();
-
-        eventDispatcher.addEventMonitor( eventMonitor );
-
-        // If this option is set the exception seems to be hidden ...
-
-        //rm.setFailureBehavior( ReactorManager.FAIL_AT_END );
-
-        rm.setFailureBehavior( ReactorManager.FAIL_FAST );
-
-        MavenSession session = new MavenSession( embedder.getContainer(),
-                                                 settings,
-                                                 localRepository,
-                                                 eventDispatcher,
-                                                 rm,
-                                                 goals,
-                                                 executionRootDirectory.getAbsolutePath(),
-                                                 properties,
-                                                 new Date() );
-
-        session.setUsingPOMsFromFilesystem( true );
-
-        if ( transferListener != null )
-        {
-            wagonManager.setDownloadMonitor( transferListener );
-        }
-
-        // ----------------------------------------------------------------------
-        // Maven should not be using system properties internally but because
-        // it does for now I'll just take properties that are handed to me
-        // and set them so that the plugin expression evaluator will work
-        // as expected.
-        // ----------------------------------------------------------------------
-
-        if ( properties != null )
-        {
-            for ( Iterator i = properties.keySet().iterator(); i.hasNext(); )
-            {
-                String key = (String) i.next();
-
-                String value = properties.getProperty( key );
-
-                System.setProperty( key, value );
-            }
-        }
-
-        lifecycleExecutor.execute( session, rm, session.getEventDispatcher() );
-    }
-
-        throws ComponentLookupException
-        throws ComponentLookupException
-        throws ComponentLookupException
-    private RuntimeInfo createRuntimeInfo( Settings settings )
-    {
-        RuntimeInfo runtimeInfo = new RuntimeInfo( settings );
-
-        runtimeInfo.setPluginUpdateOverride( Boolean.FALSE );
-
-        return runtimeInfo;
-    }
-
-        if ( classLoader == null )
+        if ( classWorld == null && classLoader == null )
-            throw new IllegalStateException( "A classloader must be specified using setClassLoader(ClassLoader)." );
+            throw new IllegalStateException( "A classWorld or classloader must be specified using setClassLoader|World(ClassLoader)." );
-            ClassWorld classWorld = new ClassWorld();
+            if ( classWorld == null )
+            {
+                classWorld = new ClassWorld();
-            classWorld.newRealm( "plexus.core", classLoader );
+                classWorld.newRealm( "plexus.core", classLoader );
+            }
+            maven = (Maven) embedder.lookup( Maven.ROLE );
+
+            mavenTools = (MavenTools) embedder.lookup( MavenTools.ROLE );
+
-            createMavenSettings();
-
-
-            localRepository = createLocalRepository( settings );
-    /**
-     * Create the Settings that will be used with the embedder. If we are aligning with the user
-     * installation then we lookup the standard settings builder and use that to create our
-     * settings. Otherwise we constructs a settings object and populate the information
-     * ourselves.
-     *
-     * @throws MavenEmbedderException
-     * @throws ComponentLookupException
-     */
-    private void createMavenSettings()
-        throws MavenEmbedderException, ComponentLookupException
-    {
-        if ( alignWithUserInstallation )
-        {
-            // ----------------------------------------------------------------------
-            // We will use the standard method for creating the settings. This
-            // method reproduces the method of building the settings from the CLI
-            // mode of operation.
-            // ----------------------------------------------------------------------
-
-            settingsBuilder = (MavenSettingsBuilder) embedder.lookup( MavenSettingsBuilder.ROLE );
-
-            try
-            {
-                settings = settingsBuilder.buildSettings();
-            }
-            catch ( IOException e )
-            {
-                throw new MavenEmbedderException( "Error creating settings.", e );
-            }
-            catch ( XmlPullParserException e )
-            {
-                throw new MavenEmbedderException( "Error creating settings.", e );
-            }
-        }
-        else
-        {
-            if ( localRepository == null )
-            {
-                throw new IllegalArgumentException( "When not aligning with a user install you must specify a local repository location using the setLocalRepositoryDirectory( File ) method." );
-            }
-
-            settings = new Settings();
-
-            settings.setLocalRepository( localRepositoryDirectory.getAbsolutePath() );
-
-            settings.setRuntimeInfo( createRuntimeInfo( settings ) );
-
-            settings.setOffline( offline );
-
-            settings.setInteractiveMode( interactiveMode );
-        }
-    }
-
+
+    // ----------------------------------------------------------------------
+    // Start of new embedder API
+    // ----------------------------------------------------------------------
+
+    public void execute( MavenExecutionRequest request )
+        throws MavenExecutionException
+    {
+        maven.execute(  request );
+    }
+
+    public Settings buildSettings( File userSettingsPath,
+                                   File globalSettingsPath,
+                                   boolean interactive,
+                                   boolean offline,
+                                   boolean usePluginRegistry,
+                                   Boolean pluginUpdateOverride )
+        throws SettingsConfigurationException
+    {
+        return mavenTools.buildSettings( userSettingsPath,
+                                                 globalSettingsPath,
+                                                 interactive,
+                                                 offline,
+                                                 usePluginRegistry,
+                                                 pluginUpdateOverride );
+    }
+
+    public File getUserSettingsPath( String optionalSettingsPath )
+    {
+        return mavenTools.getUserSettingsPath( optionalSettingsPath );
+    }
+
+    public File getGlobalSettingsPath()
+    {
+        return mavenTools.getGlobalSettingsPath();
+    }
+
+    public String getLocalRepositoryPath( Settings settings )
+    {
+        return mavenTools.getLocalRepositoryPath( settings );
+    }
