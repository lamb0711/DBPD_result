o Cleaned up field-level annotation support (especially descriptor extraction, generation, and building)
o Converted all "core" plugins (including maven-core-it-plugin) to use field-level annotations
o Removed generation of parameter descriptors for ${/#component.* param specifications.
o Added @readonly for parameters that cannot be overridden by user configuration (List override was dangerous here)
o Added validation against pom-derived configuration for @readonly parameters
o Fixed @parameter alias="" support...now configuration of the mojo instance actually will work with either the real param name or the alias. Would be nice to support multiple aliases, but that might require @alias annotations...
o Added [temporary?] support for null editable attributes for parameters, to support pre-built mojos from the repo.

Annotation support should be just about ready to go...


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@165224 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.MavenProject;
- * @parameter name="project"
- * type="org.apache.maven.project.MavenProject"
- * required="true"
- * validator=""
- * expression="${project}"
- * description=""
- * @parameter name="installer"
- * type="org.apache.maven.artifact.installer.ArtifactInstaller"
- * required="true"
- * validator=""
- * expression="${component.org.apache.maven.artifact.installer.ArtifactInstaller}"
- * description=""
- * @parameter name="localRepository"
- * type="org.apache.maven.artifact.repository.ArtifactRepository"
- * required="true"
- * validator=""
- * expression="${localRepository}"
- * description=""
-    private MavenProject project;
+    
+    /**
+     * @parameter expression="${project.groupId}"
+     * @required
+     * @readonly
+     */
+    private String groupId;
+    /**
+     * @parameter expression="${project.artifactId}"
+     * @required
+     * @readonly
+     */
+    private String artifactId;
+
+    /**
+     * @parameter expression="${project.version}"
+     * @required
+     * @readonly
+     */
+    private String version;
+
+    /**
+     * @parameter expression="${project.packaging}"
+     * @required
+     * @readonly
+     */
+    private String packaging;
+
+    /**
+     * @parameter expression="${project.file.parentFile}"
+     * @required
+     * @readonly
+     */
+    private File parentDir;
+
+    /**
+     * @parameter expression="${project.build.directory}"
+     * @required
+     * @readonly
+     */
+    private String buildDirectory;
+
+    /**
+     * @parameter alias="archiveName" expression="${project.build.finalName}"
+     * @required
+     */
+    private String finalName;
+
+    /**
+     * @parameter expression="${component.org.apache.maven.artifact.installer.ArtifactInstaller}"
+     * @required
+     * @readonly
+     */
+    /**
+     * @parameter expression="${localRepository}"
+     * @required
+     * @readonly
+     */
-        Artifact artifact = new DefaultArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion(),
-                                                 project.getPackaging() );
+        Artifact artifact = new DefaultArtifact( groupId, artifactId, version, packaging );
-        boolean isPomArtifact = "pom".equals( project.getPackaging() );
-        File pom = new File( project.getFile().getParentFile(), "pom.xml" );
+        boolean isPomArtifact = "pom".equals( packaging );
+        File pom = new File( parentDir, "pom.xml" );
-                installer.install( project.getBuild().getDirectory(), project.getBuild().getFinalName(), artifact,
-                                   localRepository );
+                installer.install( buildDirectory, finalName, artifact, localRepository );
