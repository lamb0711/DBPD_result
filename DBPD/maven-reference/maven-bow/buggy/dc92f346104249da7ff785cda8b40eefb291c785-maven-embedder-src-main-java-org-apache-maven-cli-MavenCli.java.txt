o first pass at cleaning up the embedding pattern


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@820905 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Reader;
-import org.apache.maven.embedder.Configuration;
-import org.apache.maven.embedder.ConfigurationValidationResult;
-import org.apache.maven.embedder.DefaultConfiguration;
-import org.apache.maven.embedder.MavenEmbedder;
-import org.apache.maven.embedder.MavenEmbedderConsoleLogger;
-import org.apache.maven.embedder.MavenEmbedderException;
-import org.apache.maven.embedder.MavenEmbedderFileLogger;
-import org.apache.maven.embedder.MavenEmbedderLogger;
-import org.apache.maven.embedder.execution.MavenExecutionRequestPopulator;
+import org.apache.maven.Maven;
+import org.apache.maven.execution.DefaultMavenExecutionResult;
+import org.apache.maven.execution.MavenExecutionRequestPopulationException;
+import org.apache.maven.execution.MavenExecutionRequestPopulator;
+import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;
+import org.codehaus.plexus.ContainerConfiguration;
+import org.codehaus.plexus.DefaultContainerConfiguration;
+import org.codehaus.plexus.DefaultPlexusContainer;
+import org.codehaus.plexus.PlexusContainerException;
+import org.codehaus.plexus.logging.Logger;
+import org.codehaus.plexus.logging.console.ConsoleLogger;
+import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.ReaderFactory;
+    public static final String userHome = System.getProperty( "user.home" );
+
+    public static final File userMavenConfigurationHome = new File( userHome, ".m2" );
+
+    public static final File DEFAULT_USER_SETTINGS_FILE = new File( userMavenConfigurationHome, "settings.xml" );
+
+    public static final File DEFAULT_GLOBAL_SETTINGS_FILE =
+        new File( System.getProperty( "maven.home", System.getProperty( "user.dir", "" ) ), "conf/settings.xml" );
+
+    public static final File DEFAULT_USER_TOOLCHAINS_FILE = new File( userMavenConfigurationHome, "toolchains.xml" );
+    
-        Configuration configuration = buildEmbedderConfiguration( commandLine, classWorld );
-
-        MavenEmbedderLogger logger = configuration.getMavenEmbedderLogger();
-
-        MavenEmbedder mavenEmbedder;
-
+        //
+        
+        Maven maven;
+        
+        DefaultPlexusContainer container;
+        
+        Logger logger;
+        
-            mavenEmbedder = new MavenEmbedder( configuration );
+            ContainerConfiguration cc = new DefaultContainerConfiguration()
+                .setClassWorld( classWorld )
+                .setName( "embedder" );
+
+            container = new DefaultPlexusContainer( cc );
+            
+            logger = container.getLogger();
+            
+            maven = container.lookup( Maven.class );            
-        catch ( MavenEmbedderException e )
+        catch ( PlexusContainerException e )
-            CLIReportingUtils.showError( logger, "Unable to start the embedder: ", e, showErrors );
+            CLIReportingUtils.showError( new ConsoleLogger( Logger.LEVEL_ERROR, Maven.class.getName() ), "Unable to start the embedder: ", e, showErrors );
+        catch ( ComponentLookupException e )
+        {
+            CLIReportingUtils.showError( new ConsoleLogger( Logger.LEVEL_ERROR, Maven.class.getName() ), "Unable to start the embedder: ", e, showErrors );
+            return 1;
+        }
+                
+        Configuration configuration = buildEmbedderConfiguration( commandLine );        
+        
-            MavenSettingsBuilder settingsBuilder =
-                mavenEmbedder.getPlexusContainer().lookup( MavenSettingsBuilder.class );
+            MavenSettingsBuilder settingsBuilder = container.lookup( MavenSettingsBuilder.class );
-                    mavenEmbedder.getPlexusContainer().release( settingsBuilder );
+                    container.release( settingsBuilder );
-            MavenExecutionRequestPopulator requestPopulator =
-                mavenEmbedder.getPlexusContainer().lookup( MavenExecutionRequestPopulator.class );
+            MavenExecutionRequestPopulator requestPopulator = container.lookup( MavenExecutionRequestPopulator.class );
-                    mavenEmbedder.getPlexusContainer().release( requestPopulator );
+                    container.release( requestPopulator );
-        catch ( MavenEmbedderException e )
+        catch ( MavenExecutionRequestPopulationException e )
-        ConfigurationValidationResult cvr = MavenEmbedder.validateConfiguration( configuration );
+        ConfigurationValidationResult cvr = validateConfiguration( configuration );
-            CLIReportingUtils.showError( logger, "Error reading user settings: ", cvr.getUserSettingsException(),
-                                         showErrors );
+            CLIReportingUtils.showError( logger, "Error reading user settings: ", cvr.getUserSettingsException(), showErrors );
-            CLIReportingUtils.showError( logger, "Error reading global settings: ", cvr.getGlobalSettingsException(),
-                                         showErrors );
+            CLIReportingUtils.showError( logger, "Error reading global settings: ", cvr.getGlobalSettingsException(), showErrors );
-                dispatcher = (DefaultSecDispatcher) mavenEmbedder.getPlexusContainer().lookup( SecDispatcher.class );
+                dispatcher = (DefaultSecDispatcher) container.lookup( SecDispatcher.class );
-                mavenEmbedder.getPlexusContainer().release( dispatcher );
+                container.release( dispatcher );
-                String masterPasswd =
-                    cipher.decryptDecorated( master, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION );
+                String masterPasswd = cipher.decryptDecorated( master, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION );
-            e.printStackTrace();
-
-        MavenExecutionResult result = mavenEmbedder.execute( request );
+        
+        MavenExecutionResult result = new DefaultMavenExecutionResult();
-            mavenEmbedder.stop();
+            MavenExecutionRequestPopulator populator = container.lookup(  MavenExecutionRequestPopulator.class );            
+            
+            request = populator.populateDefaults( request );
-        catch ( MavenEmbedderException e )
+        catch ( MavenExecutionRequestPopulationException e )
+        catch ( ComponentLookupException e )
+        {
+            result.addException( e );
+        }
+
+        result = maven.execute( request );
-    private Configuration buildEmbedderConfiguration( CommandLine commandLine, ClassWorld classWorld )
+    private Configuration buildEmbedderConfiguration( CommandLine commandLine )
-            userSettingsFile = MavenEmbedder.DEFAULT_USER_SETTINGS_FILE;
+            userSettingsFile = DEFAULT_USER_SETTINGS_FILE;
-            globalSettingsFile = MavenEmbedder.DEFAULT_GLOBAL_SETTINGS_FILE;
+            globalSettingsFile = DEFAULT_GLOBAL_SETTINGS_FILE;
-        Configuration configuration = new DefaultConfiguration().setUserSettingsFile( userSettingsFile ).setGlobalSettingsFile( globalSettingsFile ).setClassWorld( classWorld );
+        Configuration configuration = new DefaultConfiguration().setUserSettingsFile( userSettingsFile ).setGlobalSettingsFile( globalSettingsFile );
-            configuration.setMavenEmbedderLogger( new MavenEmbedderFileLogger( logFile ) );
+            configuration.setMavenEmbedderLogger( new FileLogger( logFile ) );
-            configuration.setMavenEmbedderLogger( new MavenEmbedderConsoleLogger() );
+            configuration.setMavenEmbedderLogger( new ConsoleLogger( Logger.LEVEL_ERROR, Maven.class.getName()) );
+    // ----------------------------------------------------------------------------
+    // Options for settings
+    //
+    // 1. No settings
+    // 2. User settings only
+    // 3. Global settings only
+    // 4. Both Users settings and Global settings. In the case that both are present
+    //    the User settings take priority.
+    //
+    // What we would like to provide is a way that the client code does not have
+    // to deal with settings configuration at all.
+    // ----------------------------------------------------------------------------
+
+    public static ConfigurationValidationResult validateConfiguration( Configuration configuration )
+    {
+        DefaultConfigurationValidationResult result = new DefaultConfigurationValidationResult();
+
+        Reader fileReader = null;
+
+        // User settings
+
+        if ( configuration.getUserSettingsFile() != null )
+        {
+            try
+            {
+                fileReader = ReaderFactory.newXmlReader( configuration.getUserSettingsFile() );
+
+                result.setUserSettings( new SettingsXpp3Reader().read( fileReader ) );
+            }
+            catch ( IOException e )
+            {
+                result.setUserSettingsException( e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                result.setUserSettingsException( e );
+            }
+            finally
+            {
+                IOUtil.close( fileReader );
+            }
+        }
+
+        // Global settings
+
+        if ( configuration.getGlobalSettingsFile() != null )
+        {
+            try
+            {
+                fileReader = ReaderFactory.newXmlReader( configuration.getGlobalSettingsFile() );
+
+                result.setGlobalSettings( new SettingsXpp3Reader().read( fileReader ) );
+            }
+            catch ( IOException e )
+            {
+                result.setGlobalSettingsException( e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                result.setGlobalSettingsException( e );
+            }
+            finally
+            {
+                IOUtil.close( fileReader );
+            }
+        }
+
+        return result;
+    }    
