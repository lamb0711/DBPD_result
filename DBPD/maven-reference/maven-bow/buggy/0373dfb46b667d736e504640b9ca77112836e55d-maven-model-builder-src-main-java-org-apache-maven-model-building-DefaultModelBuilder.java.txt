o Extended lifecycle injector to collect model problems

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@800353 13f79535-47bb-0310-9956-ffa450edef68

-        List<ModelProblem> problems = new ArrayList<ModelProblem>();
+        DefaultModelBuildingProblems problems = new DefaultModelBuildingProblems( null );
-        Model inputModel = readModel( request.getModelSource(), request.getPomFile(), request, problems );
+        Model inputModel = readModel( request.getModelSource(), request.getPomFile(), request, problems.getProblems() );
-            currentData = readParent( tmpModel, request, problems );
+            currentData = readParent( tmpModel, request, problems.getProblems() );
-        result.setProblems( problems );
+        result.setProblems( problems.getProblems() );
-        List<ModelProblem> problems = result.getProblems();
+        DefaultModelBuildingProblems problems = new DefaultModelBuildingProblems( result.getProblems() );
-            lifecycleBindingsInjector.injectLifecycleBindings( resultModel );
+            lifecycleBindingsInjector.injectLifecycleBindings( resultModel, problems );
-        addProblems( resultModel, validationResult, problems );
+        addProblems( resultModel, validationResult, problems.getProblems() );
-        if ( hasErrors( problems ) )
+        if ( hasErrors( problems.getProblems() ) )
-            throw new ModelBuildingException( problems );
+            throw new ModelBuildingException( problems.getProblems() );
-            String source = toSourceHint( model );
+            String source = ModelProblemUtils.toSourceHint( model );
-                                                     List<ModelProblem> problems )
+                                                     ModelBuildingProblems problems )
-                                                List<ModelProblem> problems )
+                                                ModelBuildingProblems problems )
-            problems.add( new ModelProblem( "Invalid activation condition for project profile "
-                + e.getProfile().getId() + " in POM " + toSourceHint( model ) + ": " + e.getMessage(),
-                                            ModelProblem.Severity.ERROR, toSourceHint( model ), e ) );
+            problems.add( new ModelProblem(
+                                            "Invalid activation condition for project profile "
+                                                + e.getProfile().getId() + " in POM "
+                                                + ModelProblemUtils.toSourceHint( model ) + ": " + e.getMessage(),
+                                            ModelProblem.Severity.ERROR, ModelProblemUtils.toSourceHint( model ), e ) );
-    private void configureResolver( ModelResolver modelResolver, Model model, List<ModelProblem> problems )
+    private void configureResolver( ModelResolver modelResolver, Model model, ModelBuildingProblems problems )
-                    + toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
-                                                toSourceHint( model ), e ) );
+                    + ModelProblemUtils.toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
+                                                ModelProblemUtils.toSourceHint( model ), e ) );
-    private Model interpolateModel( Model model, ModelBuildingRequest request, List<ModelProblem> problems )
+    private Model interpolateModel( Model model, ModelBuildingRequest request, ModelBuildingProblems problems )
-            problems.add( new ModelProblem( "Invalid expression in POM " + toSourceHint( model ) + ": "
-                + e.getMessage(), ModelProblem.Severity.ERROR, toSourceHint( model ), e ) );
+            problems.add( new ModelProblem( "Invalid expression in POM " + ModelProblemUtils.toSourceHint( model )
+                + ": " + e.getMessage(), ModelProblem.Severity.ERROR, ModelProblemUtils.toSourceHint( model ), e ) );
-                + toId( groupId, artifactId, version ) + " for POM " + toSourceHint( childModel ) );
+                + ModelProblemUtils.toId( groupId, artifactId, version ) + " for POM "
+                + ModelProblemUtils.toSourceHint( childModel ) );
-            problems.add( new ModelProblem( "Non-resolvable parent POM " + toId( groupId, artifactId, version )
-                + " for POM " + toSourceHint( childModel ) + ": " + e.getMessage(), ModelProblem.Severity.FATAL,
-                                            toSourceHint( childModel ), e ) );
+            problems.add( new ModelProblem( "Non-resolvable parent POM "
+                + ModelProblemUtils.toId( groupId, artifactId, version ) + " for POM "
+                + ModelProblemUtils.toSourceHint( childModel ) + ": " + e.getMessage(), ModelProblem.Severity.FATAL,
+                                            ModelProblemUtils.toSourceHint( childModel ), e ) );
-    private void importDependencyManagement( Model model, ModelBuildingRequest request, List<ModelProblem> problems )
+    private void importDependencyManagement( Model model, ModelBuildingRequest request, ModelBuildingProblems problems )
-                        + toId( groupId, artifactId, version ) + " for POM " + toSourceHint( model ) );
+                        + ModelProblemUtils.toId( groupId, artifactId, version ) + " for POM "
+                        + ModelProblemUtils.toSourceHint( model ) );
-                    problems.add( new ModelProblem( "Non-resolvable import POM " + toId( groupId, artifactId, version )
-                        + " for POM " + toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
-                                                    toSourceHint( model ), e ) );
+                    problems.add( new ModelProblem( "Non-resolvable import POM "
+                        + ModelProblemUtils.toId( groupId, artifactId, version ) + " for POM "
+                        + ModelProblemUtils.toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
+                                                    ModelProblemUtils.toSourceHint( model ), e ) );
-    private void fireBuildExtensionsAssembled( Model model, ModelBuildingRequest request, List<ModelProblem> problems )
+    private void fireBuildExtensionsAssembled( Model model, ModelBuildingRequest request, ModelBuildingProblems problems )
-                                                ModelProblem.Severity.ERROR, toSourceHint( model ), e ) );
+                                                ModelProblem.Severity.ERROR, ModelProblemUtils.toSourceHint( model ), e ) );
-    private String toSourceHint( Model model )
-    {
-        StringBuilder buffer = new StringBuilder( 192 );
-
-        buffer.append( toId( model ) );
-
-        File pomFile = model.getPomFile();
-        if ( pomFile != null )
-        {
-            buffer.append( " (" ).append( pomFile ).append( ")" );
-        }
-
-        return buffer.toString();
-    }
-
-    private String toId( Model model )
-    {
-        String groupId = model.getGroupId();
-        if ( groupId == null && model.getParent() != null )
-        {
-            groupId = model.getParent().getGroupId();
-        }
-
-        String artifactId = model.getArtifactId();
-
-        String version = model.getVersion();
-        if ( version == null && model.getParent() != null )
-        {
-            version = model.getParent().getVersion();
-        }
-
-        return toId( groupId, artifactId, version );
-    }
-
-    private String toId( String groupId, String artifactId, String version )
-    {
-        StringBuilder buffer = new StringBuilder( 96 );
-
-        buffer.append( ( groupId != null ) ? groupId : "[unknown-group-id]" );
-        buffer.append( ':' );
-        buffer.append( ( artifactId != null ) ? artifactId : "[unknown-artifact-id]" );
-        buffer.append( ':' );
-        buffer.append( ( version != null ) ? version : "[unknown-version]" );
-
-        return buffer.toString();
-    }
-
