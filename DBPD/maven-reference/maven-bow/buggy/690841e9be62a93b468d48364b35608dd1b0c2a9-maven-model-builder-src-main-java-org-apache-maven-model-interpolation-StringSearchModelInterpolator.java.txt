[MNG-6697] New fast model interpolator not using reflection (#261)

* [MNG-6697] New fast model interpolator not using reflection

* [MNG-6697] Fix management key in case a field has been modified

* [MNG-6697] Remove the unused FIELDS_CACHE and make the InnerInterpolator private

* [MNG-6697] Clean up the code to remove a few warnings

+import org.codehaus.plexus.interpolation.InterpolationException;
-import org.codehaus.plexus.interpolation.Interpolator;
+import org.codehaus.plexus.interpolation.RecursionInterceptor;
+import java.util.HashMap;
+    private interface InnerInterpolator
+    {
+        String interpolate( String value );
+    }
-                                      ModelProblemCollector problems )
+                                      final ModelProblemCollector problems )
-        try
-        {
-            List<? extends ValueSource> valueSources = createValueSources( model, projectDir, config, problems );
-            List<? extends InterpolationPostProcessor> postProcessors =
-                createPostProcessors( model, projectDir, config );
+        List<? extends ValueSource> valueSources = createValueSources( model, projectDir, config, problems );
+        List<? extends InterpolationPostProcessor> postProcessors =
+            createPostProcessors( model, projectDir, config );
-            InterpolateObjectAction action =
-                new InterpolateObjectAction( obj, valueSources, postProcessors, this, problems );
+        InnerInterpolator innerInterpolator = createInterpolator( valueSources, postProcessors, problems );
-            AccessController.doPrivileged( action );
-        }
-        finally
-        {
-            getInterpolator().clearAnswers();
-        }
+        PrivilegedAction<Object> action;
+        action = new InterpolateObjectAction( obj, valueSources, postProcessors, innerInterpolator, problems );
+        AccessController.doPrivileged( action );
+
-    @Override
-    protected Interpolator createInterpolator()
+    private InnerInterpolator createInterpolator( List<? extends ValueSource> valueSources,
+                                                  List<? extends InterpolationPostProcessor> postProcessors,
+                                                  final ModelProblemCollector problems )
-        StringSearchInterpolator interpolator = new StringSearchInterpolator();
+        final Map<String, String> cache = new HashMap<>();
+        final StringSearchInterpolator interpolator = new StringSearchInterpolator();
-
-        return interpolator;
+        for ( ValueSource vs : valueSources )
+        {
+            interpolator.addValueSource( vs );
+        }
+        for ( InterpolationPostProcessor postProcessor : postProcessors )
+        {
+            interpolator.addPostProcessor( postProcessor );
+        }
+        final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();
+        return new InnerInterpolator()
+        {
+            @Override
+            public String interpolate( String value )
+            {
+                if ( value != null && value.contains( "${" ) )
+                {
+                    String c = cache.get( value );
+                    if ( c == null )
+                    {
+                        try
+                        {
+                            c = interpolator.interpolate( value, recursionInterceptor );
+                        }
+                        catch ( InterpolationException e )
+                        {
+                            problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
+                                    .setMessage( e.getMessage() ).setException( e ) );
+                        }
+                        cache.put( value, c );
+                    }
+                    return c;
+                }
+                return value;
+            }
+        };
-        private final StringSearchModelInterpolator modelInterpolator;
+        private final InnerInterpolator interpolator;
-                                 StringSearchModelInterpolator modelInterpolator, ModelProblemCollector problems )
+                                 InnerInterpolator interpolator, ModelProblemCollector problems )
-            this.modelInterpolator = modelInterpolator;
+            this.interpolator = interpolator;
-            return modelInterpolator.interpolateInternal( value, valueSources, postProcessors, problems );
+            return interpolator.interpolate( value );
+                field.setAccessible( true );
-                synchronized ( field )
+                try
-                    boolean isAccessible = field.isAccessible();
-                    field.setAccessible( true );
-                    try
-                    {
-                        doInterpolate( target, interpolateObjectAction );
-                    }
-                    catch ( IllegalArgumentException e )
-                    {
-                        interpolateObjectAction.problems.add(
-                            new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage(
-                                "Failed to interpolate field3: " + field + " on class: "
-                                    + field.getType().getName() ).setException(
-                                e ) ); // TODO Not entirely the same message
-                    }
-                    catch ( IllegalAccessException e )
-                    {
-                        interpolateObjectAction.problems.add(
-                            new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage(
-                                "Failed to interpolate field4: " + field + " on class: "
-                                    + field.getType().getName() ).setException( e ) );
-                    }
-                    finally
-                    {
-                        field.setAccessible( isAccessible );
-                    }
+                    doInterpolate( target, interpolateObjectAction );
-
-
+                catch ( IllegalArgumentException e )
+                {
+                    interpolateObjectAction.problems.add(
+                        new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage(
+                            "Failed to interpolate field3: " + field + " on class: "
+                                + field.getType().getName() ).setException(
+                            e ) ); // TODO Not entirely the same message
+                }
+                catch ( IllegalAccessException e )
+                {
+                    interpolateObjectAction.problems.add(
+                        new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE ).setMessage(
+                            "Failed to interpolate field4: " + field + " on class: "
+                                + field.getType().getName() ).setException( e ) );
+                }
