Added inheritance of Plugins according to the rules we decided upon. This consists of:

- inheritanceApplied flag on Plugin and Goal (NOT fields, just a code-only flag)
- flushGoalMap/flushPluginMap to clear caching of these calculated attributes
- ModelUtils.mergePluginLists() and ModelUtils.mergePluginDefinitions() for use in both
    * DefaultModelInheritanceAssembler (Plugin/PluginManagement lists)
    * DefaultModelDefaultsInjector (PluginManagement -> Plugin merges)

- Also added a few unit tests for basic Plugin inheritance stuff. This could be more thoroughly tested...

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@178825 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Goal;
-import org.apache.maven.model.PluginManagement;
+import org.apache.maven.project.ModelUtils;
-import org.codehaus.plexus.util.xml.Xpp3Dom;
-
-
-    private void assemblePluginManagementInheritance( Build childBuild, Build parentBuild )
-    {
-        PluginManagement parentPluginMgmt = parentBuild.getPluginManagement();
-
-        PluginManagement childPluginMgmt = childBuild.getPluginManagement();
-
-        if ( parentPluginMgmt != null )
-        {
-            if ( childPluginMgmt == null )
-            {
-                childBuild.setPluginManagement( parentPluginMgmt );
-            }
-            else
-            {
-                Map mappedChildPlugins = childPluginMgmt.getPluginsAsMap();
-
-                for ( Iterator it = parentPluginMgmt.getPlugins().iterator(); it.hasNext(); )
-                {
-                    Plugin plugin = (Plugin) it.next();
-
-                    if ( !mappedChildPlugins.containsKey( plugin.getKey() ) )
-                    {
-                        childPluginMgmt.addPlugin( plugin );
-                    }
-                    else
-                    {
-                        Plugin childPlugin = (Plugin) mappedChildPlugins.get( plugin.getKey() );
-
-                        if ( childPlugin.getVersion() == null )
-                        {
-                            childPlugin.setVersion( childPlugin.getVersion() );
-                        }
-
-                        Map mappedChildGoals = childPlugin.getGoalsAsMap();
-
-                        for ( Iterator itGoals = plugin.getGoals().iterator(); itGoals.hasNext(); )
-                        {
-                            Goal parentGoal = (Goal) itGoals.next();
-                            Goal childGoal = (Goal) mappedChildGoals.get( parentGoal.getId() );
-
-                            if ( childGoal == null )
-                            {
-                                childPlugin.addGoal( parentGoal );
-                            }
-                            else
-                            {
-                                Xpp3Dom childDom = (Xpp3Dom) childGoal.getConfiguration();
-                                Xpp3Dom parentDom = (Xpp3Dom) parentGoal.getConfiguration();
-                                childGoal.setConfiguration( Xpp3Dom.mergeXpp3Dom( childDom, parentDom ) );
-                            }
-                        }
-
-                        Xpp3Dom childConfig = (Xpp3Dom) childPlugin.getConfiguration();
-                        Xpp3Dom parentConfig = (Xpp3Dom) plugin.getConfiguration();
-                        childPlugin.setConfiguration( Xpp3Dom.mergeXpp3Dom( childConfig, parentConfig ) );
-                    }
-                }
-            }
-        }
-    }
-
+    
-            // Plugins are not aggregated, but management is
-
-            assemblePluginManagementInheritance( childBuild, parentBuild );
+            // Plugins are aggregated if Plugin.inherit != false
+            ModelUtils.mergePluginLists( childBuild, parentBuild, true );
+            
+            // Plugin management :: aggregate
+            if( childBuild != null && parentBuild != null )
+            {
+                ModelUtils.mergePluginLists( childBuild.getPluginManagement(), parentBuild.getPluginManagement(), false );
+            }
