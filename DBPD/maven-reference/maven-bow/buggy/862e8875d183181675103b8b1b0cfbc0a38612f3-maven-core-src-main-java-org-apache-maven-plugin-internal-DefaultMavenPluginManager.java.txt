[MNG-4561] [regression] network settings are not applied to repositories from plugin dependencies
[MNG-4528] [regression] mvn deploy ignores proxy settings

o Revised original solution to generally exclude wagons pulled in transitively via Maven core artifacts

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@909934 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.LinkedHashSet;
-import java.util.Set;
-import org.apache.maven.ArtifactFilterManager;
-import org.apache.maven.artifact.resolver.filter.ExclusionSetFilter;
-import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
-import org.apache.maven.model.Dependency;
-    private ArtifactFilterManager artifactFilterManager;
-
-    @Requirement
+    @Requirement
+    private PluginDependenciesResolver pluginDependenciesResolver;
+
-        Set<Artifact> overrideArtifacts = new LinkedHashSet<Artifact>();
-        for ( Dependency dependency : plugin.getDependencies() )
-        {
-            overrideArtifacts.add( repositorySystem.createDependencyArtifact( dependency ) );
-        }
-
-        ArtifactFilter collectionFilter = new ScopeArtifactFilter( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM );
-
-        /*
-         * NOTE: This is a hack to support maven-deploy-plugin:[2.2.1,2.4] which has dependencies on old/buggy wagons.
-         * Under our class loader hierarchy those would take precedence over the wagons from the distro, causing grief
-         * due to their bugs (e.g. MNG-4528).
-         */
-        if ( "maven-deploy-plugin".equals( plugin.getArtifactId() )
-            && "org.apache.maven.plugins".equals( plugin.getGroupId() ) )
-        {
-            collectionFilter =
-                new AndArtifactFilter( Arrays.asList( collectionFilter,
-                                                      new ExclusionSetFilter( new String[] { "maven-core" } ) ) );
-        }
-
-        ArtifactFilter resolutionFilter = artifactFilterManager.getCoreArtifactFilter();
-
-        if ( dependencyFilter != null )
-        {
-            resolutionFilter = new AndArtifactFilter( Arrays.asList( resolutionFilter, dependencyFilter ) );
-        }
-
-        request.setArtifact( pluginArtifact );
-        request.setArtifactDependencies( overrideArtifacts );
-        request.setCollectionFilter( collectionFilter );
-        request.setResolutionFilter( resolutionFilter );
-        request.setResolveRoot( true );
-        request.setResolveTransitively( true );
-
-        ArtifactResolutionResult result = repositorySystem.resolve( request );
-        try
-        {
-            resolutionErrorHandler.throwErrors( request, result );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new PluginResolutionException( plugin, e );
-        }
-
-        List<Artifact> pluginArtifacts = new ArrayList<Artifact>( result.getArtifacts() );
-
-        addPlexusUtils( pluginArtifacts, plugin, request );
-
-        return pluginArtifacts;
-    }
-
-    // backward-compatibility with Maven 2.x
-    private void addPlexusUtils( List<Artifact> pluginArtifacts, Plugin plugin, RepositoryRequest repositoryRequest )
-        throws PluginResolutionException
-    {
-        for ( Artifact artifact : pluginArtifacts )
-        {
-            if ( "org.codehaus.plexus:plexus-utils:jar".equals( artifact.getDependencyConflictId() ) )
-            {
-                return;
-            }
-        }
-
-        Artifact plexusUtils =
-            repositorySystem.createArtifact( "org.codehaus.plexus", "plexus-utils", "1.1", Artifact.SCOPE_RUNTIME,
-                                             "jar" );
-
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest( repositoryRequest );
-        request.setArtifact( plexusUtils );
-        request.setResolveRoot( true );
-        request.setResolveTransitively( false );
-
-        ArtifactResolutionResult result = repositorySystem.resolve( request );
-        try
-        {
-            resolutionErrorHandler.throwErrors( request, result );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new PluginResolutionException( plugin, e );
-        }
-
-        pluginArtifacts.add( plexusUtils );
+        return pluginDependenciesResolver.resolve( plugin, pluginArtifact, request, dependencyFilter );
