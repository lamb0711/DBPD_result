o Introduced model cache to avoid repeated building of models that can occur multiple times during a reactor build (e.g. parents and imported POMs)

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@797959 13f79535-47bb-0310-9956-ffa450edef68

-            parentData = readParentLocally( childModel, request, problems );
+            String groupId = parent.getGroupId();
+            String artifactId = parent.getArtifactId();
+            String version = parent.getVersion();
+
+            parentData = getCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW );
-                parentData = readParentExternally( childModel, request, problems );
+                parentData = readParentLocally( childModel, request, problems );
+
+                if ( parentData == null )
+                {
+                    parentData = readParentExternally( childModel, request, problems );
+                }
+
+                putCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW, parentData );
+            }
+            else
+            {
+                parentData =
+                    new ModelData( ModelUtils.cloneModel( parentData.getModel() ), parentData.getGroupId(),
+                                   parentData.getArtifactId(), parentData.getVersion() );
+        String groupId = parent.getGroupId();
+        String artifactId = parent.getArtifactId();
+        String version = parent.getVersion();
+
-                + toId( parent ) + " for POM " + toSourceHint( childModel ) );
+                + toId( groupId, artifactId, version ) + " for POM " + toSourceHint( childModel ) );
-            modelSource = modelResolver.resolveModel( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
+            modelSource = modelResolver.resolveModel( groupId, artifactId, version );
-            problems.add( new ModelProblem( "Non-resolvable parent POM " + toId( parent ) + " for POM "
-                + toSourceHint( childModel ) + ": " + e.getMessage(), ModelProblem.Severity.FATAL,
+            problems.add( new ModelProblem( "Non-resolvable parent POM " + toId( groupId, artifactId, version )
+                + " for POM " + toSourceHint( childModel ) + ": " + e.getMessage(), ModelProblem.Severity.FATAL,
-            if ( modelResolver == null )
-            {
-                throw new IllegalArgumentException( "no model resolver provided, cannot resolve import POM "
-                    + toId( dependency ) + " for POM " + toSourceHint( model ) );
-            }
+            String groupId = dependency.getGroupId();
+            String artifactId = dependency.getArtifactId();
+            String version = dependency.getVersion();
-            ModelSource importSource;
-            try
-            {
-                importSource =
-                    modelResolver.resolveModel( dependency.getGroupId(), dependency.getArtifactId(),
-                                                dependency.getVersion() );
-            }
-            catch ( UnresolvableModelException e )
-            {
-                problems.add( new ModelProblem( "Non-resolvable import POM " + toId( dependency ) + " for POM "
-                    + toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
-                                                toSourceHint( model ), e ) );
-                continue;
-            }
+            Model importModel =
+                getCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.EFFECTIVE );
-            if ( importRequest == null )
+            if ( importModel == null )
-                importRequest = new DefaultModelBuildingRequest();
-                importRequest.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );
+                if ( modelResolver == null )
+                {
+                    throw new IllegalArgumentException( "no model resolver provided, cannot resolve import POM "
+                        + toId( groupId, artifactId, version ) + " for POM " + toSourceHint( model ) );
+                }
+
+                ModelSource importSource;
+                try
+                {
+                    importSource = modelResolver.resolveModel( groupId, artifactId, version );
+                }
+                catch ( UnresolvableModelException e )
+                {
+                    problems.add( new ModelProblem( "Non-resolvable import POM " + toId( groupId, artifactId, version )
+                        + " for POM " + toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
+                                                    toSourceHint( model ), e ) );
+                    continue;
+                }
+
+                if ( importRequest == null )
+                {
+                    importRequest = new DefaultModelBuildingRequest();
+                    importRequest.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );
+                }
+
+                importRequest.setModelSource( importSource );
+                importRequest.setModelResolver( modelResolver.newCopy() );
+
+                ModelBuildingResult importResult;
+                try
+                {
+                    importResult = build( importRequest );
+                }
+                catch ( ModelBuildingException e )
+                {
+                    problems.addAll( e.getProblems() );
+                    continue;
+                }
+
+                problems.addAll( importResult.getProblems() );
+
+                importModel = importResult.getEffectiveModel();
+
+                putCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.EFFECTIVE, importModel );
-
-            importRequest.setModelSource( importSource );
-            importRequest.setModelResolver( modelResolver.newCopy() );
-
-            ModelBuildingResult importResult;
-            try
+            else
-                importResult = build( importRequest );
+                importModel = ModelUtils.cloneModel( importModel );
-            catch ( ModelBuildingException e )
-            {
-                problems.addAll( e.getProblems() );
-                continue;
-            }
-
-            problems.addAll( importResult.getProblems() );
-            importModels.add( importResult.getEffectiveModel() );
+            importModels.add( importModel );
+    private <T> void putCache( ModelCache modelCache, String groupId, String artifactId, String version,
+                               ModelCacheTag<T> tag, T data )
+    {
+        if ( modelCache != null )
+        {
+            modelCache.put( groupId, artifactId, version, tag.getName(), data );
+        }
+    }
+
+    private <T> T getCache( ModelCache modelCache, String groupId, String artifactId, String version,
+                            ModelCacheTag<T> tag )
+    {
+        if ( modelCache != null )
+        {
+            return tag.getType().cast( modelCache.get( groupId, artifactId, version, tag.getName() ) );
+        }
+        return null;
+    }
+
-    private String toId( Parent parent )
-    {
-        return toId( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
-    }
-
-    private String toId( Dependency dependency )
-    {
-        return toId( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion() );
-    }
-
