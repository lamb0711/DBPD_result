[MNG-5937] Optimize code for Java 8

-import java.io.BufferedOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.ArrayList;
+import java.net.URISyntaxException;
+import java.nio.file.FileVisitResult;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.SimpleFileVisitor;
+import java.nio.file.attribute.BasicFileAttributes;
+import java.util.stream.Collectors;
-    public File createDist( WrapperConfiguration configuration )
-        throws Exception
+    public Path createDist( WrapperConfiguration configuration )
+        throws IOException, URISyntaxException
-        File localZipFile = localDistribution.getZipFile();
+        Path localZipFile = localDistribution.getZipFile();
-        if ( alwaysDownload || !localZipFile.exists() )
+        if ( alwaysDownload || !Files.exists( localZipFile ) )
-            File tmpZipFile = new File( localZipFile.getParentFile(), localZipFile.getName() + ".part" );
-            tmpZipFile.delete();
+            Path tmpZipFile = localZipFile.resolveSibling( localZipFile.getFileName() + ".part" );
+            Files.deleteIfExists( tmpZipFile );
-            tmpZipFile.renameTo( localZipFile );
+            Files.move( tmpZipFile, localZipFile );
-        File distDir = localDistribution.getDistributionDir();
-        List<File> dirs = listDirs( distDir );
+        Path distDir = localDistribution.getDistributionDir();
+        List<Path> dirs = listDirs( distDir );
-            for ( File dir : dirs )
+            Files.walkFileTree( distDir.toAbsolutePath(), new SimpleFileVisitor<Path>()
-                Logger.info( "Deleting directory " + dir.getAbsolutePath() );
-                deleteDir( dir );
-            }
-            Logger.info( "Unzipping " + localZipFile.getAbsolutePath() + " to " + distDir.getAbsolutePath() );
+                @Override
+                public FileVisitResult postVisitDirectory( Path dir, IOException exc )
+                    throws IOException
+                {
+                    if ( dir.getParent().equals( distDir ) )
+                    {
+                        Logger.info( "Deleting directory " + distDir.toAbsolutePath() );
+                        Files.delete( dir );
+                    }
+                    return FileVisitResult.CONTINUE;
+                }
+
+                public FileVisitResult visitFile( Path file, BasicFileAttributes attrs )
+                    throws IOException
+                {
+                    if ( !file.getParent().equals( distDir ) )
+                    {
+                        Files.delete( file );
+                    }
+                    return FileVisitResult.CONTINUE;
+                };
+            } );
+
+            Logger.info( "Unzipping " + localZipFile.toAbsolutePath() + " to " + distDir.toAbsolutePath() );
+
-            throw new RuntimeException( String.format( 
+            throw new IllegalStateException( String.format( 
-    private List<File> listDirs( File distDir )
+    private List<Path> listDirs( Path distDir ) throws IOException
-        List<File> dirs = new ArrayList<File>();
-        if ( distDir.exists() )
-        {
-            for ( File file : distDir.listFiles() )
-            {
-                if ( file.isDirectory() )
-                {
-                    dirs.add( file );
-                }
-            }
-        }
-        return dirs;
+        return Files.walk( distDir, 1 )
+                        .filter( p -> !distDir.equals( p ) )
+                        .filter( Files::isDirectory )
+                        .collect( Collectors.toList() );
-    private void setExecutablePermissions( File mavenHome )
+    private void setExecutablePermissions( Path mavenHome )
-        File mavenCommand = new File( mavenHome, "bin/mvn" );
+        Path mavenCommand = mavenHome.resolve( "bin/mvn" );
-            ProcessBuilder pb = new ProcessBuilder( "chmod", "755", mavenCommand.getCanonicalPath() );
+            ProcessBuilder pb = new ProcessBuilder( "chmod", "755", mavenCommand.toString() );
-                Logger.info( "Set executable permissions for: " + mavenCommand.getAbsolutePath() );
+                Logger.info( "Set executable permissions for: " + mavenCommand.toString() );
-                BufferedReader is = new BufferedReader( new InputStreamReader( p.getInputStream() ) );
-                Formatter stdout = new Formatter();
-                String line;
-                while ( ( line = is.readLine() ) != null )
+
+                try ( BufferedReader is = new BufferedReader( new InputStreamReader( p.getInputStream() ) );
+                      Formatter stdout = new Formatter() )
-                    stdout.format( "%s%n", line );
+                    String line;
+                    while ( ( line = is.readLine() ) != null )
+                    {
+                        stdout.format( "%s%n", line );
+                    }
+                    errorMessage = stdout.toString();
-                errorMessage = stdout.toString();
-        catch ( IOException e )
-        {
-            errorMessage = e.getMessage();
-        }
-        catch ( InterruptedException e )
+        catch ( IOException | InterruptedException e )
-            Logger.warn( "Could not set executable permissions for: " + mavenCommand.getAbsolutePath() );
+            Logger.warn( "Could not set executable permissions for: " + mavenCommand );
-        if ( osName.indexOf( "windows" ) > -1 )
-        {
-            return true;
-        }
-        return false;
+
+        return ( osName.indexOf( "windows" ) > -1 );
-    private boolean deleteDir( File dir )
+    private void unzip( Path zip, Path dest )
+        throws IOException
-        if ( dir.isDirectory() )
+        try ( ZipFile zipFile = new ZipFile( zip.toFile() ) )
-            String[] children = dir.list();
-            for ( int i = 0; i < children.length; i++ )
+            Enumeration<? extends ZipEntry> entries = zipFile.entries();
+
+            while ( entries.hasMoreElements() )
-                boolean success = deleteDir( new File( dir, children[i] ) );
-                if ( !success )
+                ZipEntry entry = entries.nextElement();
+
+                if ( entry.isDirectory() )
-                    return false;
+                    continue;
+                }
+
+                Path targetFile = dest.resolve( entry.getName() );
+
+                // prevent Zip Slip
+                if ( targetFile.startsWith( dest ) ) 
+                {
+                    Files.createDirectories( targetFile.getParent() );
+
+                    Files.copy( zipFile.getInputStream( entry ), targetFile );
-
-        // The directory is now empty so delete it
-        return dir.delete();
-
-    public void unzip( File zip, File dest )
-        throws IOException
-    {
-        Enumeration entries;
-        ZipFile zipFile;
-
-        zipFile = new ZipFile( zip );
-
-        entries = zipFile.entries();
-
-        while ( entries.hasMoreElements() )
-        {
-            ZipEntry entry = (ZipEntry) entries.nextElement();
-
-            if ( entry.isDirectory() )
-            {
-                ( new File( dest, entry.getName() ) ).mkdirs();
-                continue;
-            }
-
-            new File( dest, entry.getName() ).getParentFile().mkdirs();
-            copyInputStream( zipFile.getInputStream( entry ),
-                             new BufferedOutputStream( new FileOutputStream( new File( dest, entry.getName() ) ) ) );
-        }
-        zipFile.close();
-    }
-
-    public void copyInputStream( InputStream in, OutputStream out )
-        throws IOException
-    {
-        byte[] buffer = new byte[1024];
-        int len;
-
-        while ( ( len = in.read( buffer ) ) >= 0 )
-        {
-            out.write( buffer, 0, len );
-        }
-
-        in.close();
-        out.close();
-    }
-
