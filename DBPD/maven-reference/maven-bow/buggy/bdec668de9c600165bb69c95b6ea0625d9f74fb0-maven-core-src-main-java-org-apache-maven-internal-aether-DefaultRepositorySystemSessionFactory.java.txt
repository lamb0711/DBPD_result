[MNG-6656] Introduce base for build/consumer pom

+import org.apache.maven.feature.Features;
+import org.apache.maven.model.building.TransformerContext;
+import org.apache.maven.model.building.TransformerException;
+import org.eclipse.aether.SessionData;
+import org.eclipse.aether.artifact.Artifact;
+import org.eclipse.aether.transform.FileTransformer;
+import org.eclipse.aether.transform.TransformException;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
-
-
+        if ( Features.buildConsumer().isActive() )
+        {
+            session.setFileTransformerManager( a -> getTransformersForArtifact( a, session.getData() ) );
+        }
+
+    
+    private Collection<FileTransformer> getTransformersForArtifact( final Artifact artifact,
+                                                                    final SessionData sessionData )
+    {
+        TransformerContext context = (TransformerContext) sessionData.get( TransformerContext.KEY );
+        Collection<FileTransformer> transformers = new ArrayList<>();
+        
+        // In case of install:install-file there's no transformer context, as the goal is unrelated to the lifecycle. 
+        if ( "pom".equals( artifact.getExtension() ) && context != null )
+        {
+            transformers.add( new FileTransformer()
+            {
+                @Override
+                public InputStream transformData( File pomFile )
+                    throws IOException, TransformException
+                {
+                    try
+                    {
+                        return new ConsumerModelSourceTransformer().transform( pomFile.toPath(), context );
+                    }
+                    catch ( TransformerException e )
+                    {
+                        throw new TransformException( e );
+                    }
+                }
+                
+                @Override
+                public Artifact transformArtifact( Artifact artifact )
+                {
+                    return artifact;
+                }
+            } );
+        }
+        return Collections.unmodifiableCollection( transformers );
+    }
-}
+}
