Fixing project-loading to process inheritance in the correct direction, and finishing support for custom profile activators...also moving /project/build/extensions handling out to a separate extension scanner component, for later reuse elsewhere.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@501186 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.ArtifactUtils;
-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.extension.BuildExtensionScanner;
+import org.apache.maven.extension.ExtensionScanningException;
-import org.apache.maven.model.Build;
-import org.apache.maven.model.Extension;
-import org.apache.maven.model.Model;
-import org.apache.maven.profiles.activation.CustomActivatorAdvice;
-import org.apache.maven.project.build.model.ModelLineage;
-import org.apache.maven.project.build.model.ModelLineageIterator;
-import org.codehaus.plexus.PlexusContainerException;
-    protected ExtensionManager extensionManager;
-    
-    protected ModelLineageBuilder modelLineageBuilder;
-    
+    private BuildExtensionScanner buildExtensionScanner;
+
-        scanProjectsForExtensions( files, request, globalProfileManager );
+        // TODO: We should probably do this discovery just-in-time, if we can move to building project
+        // instances just-in-time.
+        Map cache = new HashMap();
+        
+        for ( Iterator it = files.iterator(); it.hasNext(); )
+        {
+            File pom = (File) it.next();
+
+            try
+            {
+                buildExtensionScanner.scanForBuildExtensions( pom, request.getLocalRepository(), globalProfileManager, cache );
+            }
+            catch ( ExtensionScanningException e )
+            {
+                throw new MavenExecutionException( "Error scanning: " + pom + " for extensions: " + e.getMessage(), e );
+            }
+        }
-    // TODO: We should probably do this discovery just-in-time, if we can move to building project
-    // instances just-in-time.
-    private void scanProjectsForExtensions( List files, MavenExecutionRequest request,
-                                            ProfileManager globalProfileManager )
-        throws MavenExecutionException
-    {
-        // setup the CustomActivatorAdvice to fail quietly while we discover extensions...then, we'll
-        // reset it.
-        CustomActivatorAdvice activatorAdvice = CustomActivatorAdvice.getCustomActivatorAdvice( buildContextManager );
-        activatorAdvice.setFailQuietly( true );
-        activatorAdvice.store( buildContextManager );
-        
-        try
-        {
-            MavenProject superProject;
-            try
-            {
-                superProject = projectBuilder.buildStandaloneSuperProject( request.getLocalRepository(),
-                                                                                        globalProfileManager );
-            }
-            catch ( ProjectBuildingException e )
-            {
-                throw new MavenExecutionException( "Error building super-POM for retrieving the default remote repository list: " + e.getMessage(), e );
-            }
-            
-            List originalRemoteRepositories = superProject.getRemoteArtifactRepositories();
-            Map cache = new HashMap();
-            
-            for ( Iterator it = files.iterator(); it.hasNext(); )
-            {
-                File pom = (File) it.next();
-                
-                ModelLineage lineage;
-                try
-                {
-                    getLogger().debug( "Building model-lineage for: " + pom + " to pre-scan for extensions." );
-                    
-                    lineage = modelLineageBuilder.buildModelLineage( pom, request.getLocalRepository(), originalRemoteRepositories, globalProfileManager, cache );
-                }
-                catch ( ProjectBuildingException e )
-                {
-                    throw new MavenExecutionException( "Error building model lineage in order to pre-scan for extensions: " + e.getMessage(), e );
-                }
-                
-                for ( ModelLineageIterator lineageIterator = lineage.lineageIterator(); lineageIterator.hasNext(); )
-                {
-                    Model model = (Model) lineageIterator.next();
-                    
-                    Build build = model.getBuild();
-                    
-                    if ( build != null )
-                    {
-                        List extensions = build.getExtensions();
-                        
-                        if ( extensions != null && !extensions.isEmpty() )
-                        {
-                            List remoteRepositories = lineageIterator.getArtifactRepositories();
-                            
-                            // thankfully, we don't have to deal with dependencyManagement here, yet.
-                            // TODO Revisit if/when extensions are made to use the info in dependencyManagement
-                            for ( Iterator extensionIterator = extensions.iterator(); extensionIterator.hasNext(); )
-                            {
-                                Extension extension = (Extension) extensionIterator.next();
-                                
-                                getLogger().debug( "Adding extension: " + ArtifactUtils.versionlessKey( extension.getGroupId(), extension.getArtifactId() ) + " from model: " + model.getId() );
-                                
-                                try
-                                {
-                                    extensionManager.addExtension( extension, model, remoteRepositories, request.getLocalRepository() );
-                                }
-                                catch ( ArtifactResolutionException e )
-                                {
-                                    throw new MavenExecutionException( "Cannot resolve pre-scanned extension artifact: "
-                                        + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(),
-                                                                       e );
-                                }
-                                catch ( ArtifactNotFoundException e )
-                                {
-                                    throw new MavenExecutionException( "Cannot find pre-scanned extension artifact: "
-                                                                       + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(),
-                                                                                                      e );
-                                }
-                                catch ( PlexusContainerException e )
-                                {
-                                    throw new MavenExecutionException( "Failed to add pre-scanned extension: "
-                                                                       + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(),
-                                                                                                      e );
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-            
-            extensionManager.registerWagons();
-        }
-        finally
-        {
-            activatorAdvice.reset();
-            activatorAdvice.store( buildContextManager );
-        }
-    }
-
