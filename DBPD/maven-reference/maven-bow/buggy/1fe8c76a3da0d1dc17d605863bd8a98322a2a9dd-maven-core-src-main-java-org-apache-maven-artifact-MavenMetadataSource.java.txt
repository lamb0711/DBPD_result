move all artifact creation to artifact factory - further refactoring planned


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163499 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.factory.ArtifactFactory;
+import org.apache.maven.artifact.factory.DefaultArtifactFactory;
-import org.apache.maven.model.Dependency;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
+    // TODO: configure?
+    protected ArtifactFactory artifactFactory = new DefaultArtifactFactory();
+
-        Artifact metadataArtifact = new DefaultArtifact( artifact.getGroupId(), artifact.getArtifactId(),
-                                                         artifact.getVersion(), "pom" );
+        Artifact metadataArtifact = artifactFactory.createArtifact( artifact.getGroupId(), artifact.getArtifactId(),
+                                                                    artifact.getVersion(), artifact.getScope(), "pom",
+                                                                    "pom", null );
-                artifacts = createArtifacts( project.getDependencies(), artifact.getScope(), localRepository );
+                artifacts =
+                    artifactFactory.createArtifacts( project.getDependencies(), localRepository, artifact.getScope() );
-                artifacts = createArtifacts( model.getDependencies(), artifact.getScope(), localRepository );
+                artifacts =
+                    artifactFactory.createArtifacts( model.getDependencies(), localRepository, artifact.getScope() );
-
-    protected Set createArtifacts( List dependencies, String scope, ArtifactRepository localRepository )
-    {
-        Set projectArtifacts = new HashSet();
-        for ( Iterator i = dependencies.iterator(); i.hasNext(); )
-        {
-            Dependency d = (Dependency) i.next();
-            Artifact artifact = createArtifact( d, scope, localRepository );
-            if ( artifact != null )
-            {
-                projectArtifacts.add( artifact );
-            }
-        }
-        return projectArtifacts;
-    }
-
-    protected Artifact createArtifact( Dependency dependency, String scope, ArtifactRepository localRepository )
-    {
-        // TODO: can refactor
-        String requestedScope = dependency.getScope();
-        if ( Artifact.SCOPE_TEST.equals( scope ) && Artifact.SCOPE_TEST.equals( requestedScope ) )
-        {
-            return null;
-        }
-
-        // TODO: duplicated with the ArtifactFactory, localRepository not used (should be used here to resolve path?
-        // TODO: scope handler
-        String desiredScope = Artifact.SCOPE_RUNTIME;
-        if ( Artifact.SCOPE_TEST.equals( requestedScope ) || Artifact.SCOPE_TEST.equals( scope ) )
-        {
-            desiredScope = Artifact.SCOPE_TEST;
-        }
-        return new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion(),
-                                    desiredScope, dependency.getType(), dependency.getType() );
-    }
