PR: MNG-435

add a <artifact:setProperty property|ref="..." expression="project.*" pomRefId="..." /> tag for exposing the pom as variables



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@189505 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.settings.Mirror;
-import org.apache.maven.settings.Mirror;
+import org.apache.maven.project.MavenProjectBuilder;
-    private Embedder embedder;
-
-    protected ArtifactRepository createLocalArtifactRepository( LocalRepository repository )
+    private Embedder embedder;
+
+    private Pom pom;
+
+    private String pomRefId;
+
+    private LocalRepository localRepository;
+
+    protected ArtifactRepository createLocalArtifactRepository()
+        if ( localRepository == null )
+        {
+            localRepository = getDefaultLocalRepository();
+        }
+
-                                                                                       repository.getLayout() );
+                                                                                       localRepository.getLayout() );
-        manager.setLocalRepository( repository.getLocation() );
+        manager.setLocalRepository( localRepository.getLocation() );
-        return new ArtifactRepository( "local", "file://" + repository.getLocation(), repositoryLayout );
+        return new ArtifactRepository( "local", "file://" + localRepository.getLocation(), repositoryLayout );
-    protected Object lookup( String role )
-    {
-        try
-        {
-            return getEmbedder().lookup( role );
-        }
-        catch ( ComponentLookupException e )
-        {
-            throw new BuildException( "Unable to find component: " + role, e );
-        }
-    }
-
-    private Object lookup( String role, String roleHint )
-    {
-        try
-        {
-            return getEmbedder().lookup( role, roleHint );
-        }
-        catch ( ComponentLookupException e )
-        {
-            throw new BuildException( "Unable to find component: " + role + "[" + roleHint + "]", e );
-        }
-    }
-
-    private synchronized Embedder getEmbedder()
-    {
-        if ( embedder == null )
-        {
-            embedder = (Embedder) getProject().getReference( Embedder.class.getName() );
-
-            if ( embedder == null )
-            {
-                embedder = new Embedder();
-                try
-                {
-                    embedder.start();
-                }
-                catch ( PlexusContainerException e )
-                {
-                    throw new BuildException( "Unable to start embedder", e );
-                }
-                getProject().addReference( Embedder.class.getName(), embedder );
-            }
-        }
-        return embedder;
-    }
-
+
+    protected Object lookup( String role )
+    {
+        try
+        {
+            return getEmbedder().lookup( role );
+        }
+        catch ( ComponentLookupException e )
+        {
+            throw new BuildException( "Unable to find component: " + role, e );
+        }
+    }
+
+    protected Object lookup( String role, String roleHint )
+    {
+        try
+        {
+            return getEmbedder().lookup( role, roleHint );
+        }
+        catch ( ComponentLookupException e )
+        {
+            throw new BuildException( "Unable to find component: " + role + "[" + roleHint + "]", e );
+        }
+    }
+
+    private synchronized Embedder getEmbedder()
+    {
+        if ( embedder == null )
+        {
+            embedder = (Embedder) getProject().getReference( Embedder.class.getName() );
+
+            if ( embedder == null )
+            {
+                embedder = new Embedder();
+                try
+                {
+                    embedder.start();
+                }
+                catch ( PlexusContainerException e )
+                {
+                    throw new BuildException( "Unable to start embedder", e );
+                }
+                getProject().addReference( Embedder.class.getName(), embedder );
+            }
+        }
+        return embedder;
+    }
+
+    public Pom buildPom( MavenProjectBuilder projectBuilder, ArtifactRepository localArtifactRepository )
+    {
+        if ( pomRefId != null && pom != null )
+        {
+            throw new BuildException( "You cannot specify both a POM element and a pomrefid element" );
+        }
+
+        Pom pom = this.pom;
+        if ( pomRefId != null )
+        {
+            pom = (Pom) getProject().getReference( pomRefId );
+            if ( pom == null )
+            {
+                throw new BuildException( "Reference '" + pomRefId + "' was not found." );
+            }
+        }
+
+        if ( pom != null )
+        {
+            pom.initialise( projectBuilder, localArtifactRepository );
+        }
+        return pom;
+    }
+
+    public void addPom( Pom pom )
+    {
+        this.pom = pom;
+    }
+
+    public String getPomRefId()
+    {
+        return pomRefId;
+    }
+
+    public void setPomRefId( String pomRefId )
+    {
+        this.pomRefId = pomRefId;
+    }
+
+    public LocalRepository getLocalRepository()
+    {
+        return localRepository;
+    }
+
+    public void addLocalRepository( LocalRepository localRepository )
+    {
+        this.localRepository = localRepository;
+    }
