[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
-import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.repository.metadata.Versioning;
-import org.apache.maven.repository.RepositorySystem;
-import org.apache.maven.repository.ArtifactDoesNotExistException;
-import org.apache.maven.repository.ArtifactTransferFailedException;
+import org.sonatype.aether.impl.MetadataResolver;
+import org.sonatype.aether.repository.ArtifactRepository;
+import org.sonatype.aether.repository.LocalRepository;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.resolution.MetadataRequest;
+import org.sonatype.aether.resolution.MetadataResult;
+import org.sonatype.aether.transfer.MetadataNotFoundException;
+import org.sonatype.aether.util.metadata.DefaultMetadata;
+    private static final String REPOSITORY_CONTEXT = "plugin";
+
-    private RepositorySystem repositorySystem;
+    private MetadataResolver metadataResolver;
-            if ( StringUtils.isEmpty( result.getVersion() ) )
-            {
-                throw new PluginVersionResolutionException( request.getGroupId(), request.getArtifactId(),
-                                                            request.getLocalRepository(),
-                                                            request.getRemoteRepositories(),
-                                                            "Plugin not found in any plugin repository" );
-            }
-            else if ( logger.isDebugEnabled() )
+            if ( logger.isDebugEnabled() )
-                    + " to " + result.getVersion() + " from repository "
-                    + ( result.getRepository() != null ? result.getRepository().getId() : "null" ) );
+                    + " to " + result.getVersion() + " from repository " + result.getRepository() );
-        Metadata mergedMetadata = new Metadata();
+        org.sonatype.aether.metadata.Metadata metadata =
+            new DefaultMetadata( request.getGroupId(), request.getArtifactId(), "maven-metadata.xml",
+                                 DefaultMetadata.Nature.RELEASE_OR_SNAPSHOT );
-        ArtifactRepository localRepository = request.getLocalRepository();
+        List<MetadataRequest> requests = new ArrayList<MetadataRequest>();
-        // Search in remote repositories for a (released) version.
-        //
-        // maven-metadata-{central|nexus|...}.xml
-        //
-        // TODO: we should cycle through the repositories but take the repository which actually satisfied the prefix.
-        for ( ArtifactRepository repository : request.getRemoteRepositories() )
+        requests.add( new MetadataRequest( metadata, null, REPOSITORY_CONTEXT ) );
+
+        for ( RemoteRepository repository : request.getRepositories() )
-            if ( !isEnabled( repository ) )
+            requests.add( new MetadataRequest( metadata, repository, REPOSITORY_CONTEXT ) );
+        }
+
+        List<MetadataResult> results = metadataResolver.resolveMetadata( request.getRepositorySession(), requests );
+
+        LocalRepository localRepo = request.getRepositorySession().getLocalRepository();
+
+        Versions versions = new Versions();
+
+        for ( MetadataResult res : results )
+        {
+            if ( res.getException() != null )
-                logger.debug( "Skipped plugin version lookup from disabled repository " + repository.getId() );
-                continue;
-            }
-
-            String localPath = getLocalMetadataPath( request, repository );
-
-            File artifactMetadataFile = new File( localRepository.getBasedir(), localPath );
-
-            if ( !request.isOffline() && ( !artifactMetadataFile.exists() /* || user requests snapshot updates */ ) )
-            {
-                String remotePath = getRemoteMetadataPath( request, repository );
-
-                try
+                if ( res.getException() instanceof MetadataNotFoundException )
-                    repositorySystem.retrieve( repository, artifactMetadataFile, remotePath,
-                                               request.getTransferListener() );
+                    logger.debug( "Could not find " + res.getRequest().getMetadata() + " in "
+                        + res.getRequest().getRepository() );
-                catch ( ArtifactTransferFailedException e )
+                else if ( logger.isDebugEnabled() )
-                    if ( logger.isDebugEnabled() )
-                    {
-                        logger.warn( "Failed to retrieve " + remotePath + " from " + repository.getId() + ": "
-                            + e.getMessage(), e );
-                    }
-                    else
-                    {
-                        logger.warn( "Failed to retrieve " + remotePath + " from " + repository.getId() + ": "
-                            + e.getMessage() );
-                    }
-
-                    continue;
+                    logger.warn( "Could not retrieve " + res.getRequest().getMetadata() + " from "
+                        + res.getRequest().getRepository() + ": " + res.getException().getMessage(), res.getException() );
-                catch ( ArtifactDoesNotExistException e )
+                else
-                    continue;
+                    logger.warn( "Could not retrieve " + res.getRequest().getMetadata() + " from "
+                        + res.getRequest().getRepository() + ": " + res.getException().getMessage() );
-            if ( mergeMetadata( mergedMetadata, artifactMetadataFile ) )
+            if ( res.getMetadata() != null )
-                result.setRepository( repository );
+                mergeMetadata( versions, res.getMetadata().getFile(), res.getRequest().getRepository() );
-        // Search in the local repositiory for a (development) version
-        //
-        // maven-metadata-local.xml
-        //
+        if ( StringUtils.isNotEmpty( versions.releaseVersion ) )
-            String localPath = getLocalMetadataPath( request, localRepository );
-
-            File artifactMetadataFile = new File( localRepository.getBasedir(), localPath );
-
-            if ( mergeMetadata( mergedMetadata, artifactMetadataFile ) )
-            {
-                result.setRepository( localRepository );
-            }
+            result.setVersion( versions.releaseVersion );
+            result.setRepository( ( versions.releaseRepository == null ) ? localRepo : versions.releaseRepository );
-
-        if ( mergedMetadata.getVersioning() != null )
+        else if ( StringUtils.isNotEmpty( versions.latestVersion ) )
-            String release = mergedMetadata.getVersioning().getRelease();
-
-            if ( StringUtils.isNotEmpty( release ) )
-            {
-                result.setVersion( release );
-            }
-            else
-            {
-                String latest = mergedMetadata.getVersioning().getLatest();
-
-                if ( StringUtils.isNotEmpty( latest ) )
-                {
-                    result.setVersion( latest );
-                }
-            }
+            result.setVersion( versions.latestVersion );
+            result.setRepository( ( versions.latestRepository == null ) ? localRepo : versions.latestRepository );
-
-        if ( StringUtils.isEmpty( result.getVersion() ) )
+        else
-            throw new PluginVersionResolutionException( request.getGroupId(), request.getArtifactId(),
-                                                        request.getLocalRepository(), request.getRemoteRepositories(),
+            throw new PluginVersionResolutionException( request.getGroupId(), request.getArtifactId(), localRepo,
+                                                        request.getRepositories(),
-    private boolean isEnabled( ArtifactRepository repository )
+    private void mergeMetadata( Versions versions, File metadataFile, ArtifactRepository repository )
-        return repository.getReleases().isEnabled() || repository.getSnapshots().isEnabled();
-    }
-
-    private String getLocalMetadataPath( PluginVersionRequest request, ArtifactRepository repository )
-    {
-        return request.getGroupId().replace( '.', '/' ) + '/' + request.getArtifactId() + "/maven-metadata-"
-            + repository.getId() + ".xml";
-    }
-
-    private String getRemoteMetadataPath( PluginVersionRequest request, ArtifactRepository repository )
-    {
-        return request.getGroupId().replace( '.', '/' ) + '/' + request.getArtifactId() + "/maven-metadata.xml";
-    }
-
-    private boolean mergeMetadata( Metadata target, File metadataFile )
-    {
-        if ( metadataFile.isFile() )
+        if ( metadataFile != null && metadataFile.isFile() )
-                return mergeMetadata( target, repoMetadata );
+                mergeMetadata( versions, repoMetadata, repository );
-
-        return false;
-    private boolean mergeMetadata( Metadata target, Metadata source )
+    private void mergeMetadata( Versions versions, Metadata source, ArtifactRepository repository )
-        return target.merge( source );
+        Versioning versioning = source.getVersioning();
+        if ( versioning != null )
+        {
+            String timestamp = StringUtils.clean( versioning.getLastUpdated() );
+
+            if ( StringUtils.isNotEmpty( versioning.getRelease() )
+                && timestamp.compareTo( versions.releaseTimestamp ) > 0 )
+            {
+                versions.releaseVersion = versioning.getRelease();
+                versions.releaseTimestamp = timestamp;
+                versions.releaseRepository = repository;
+            }
+
+            if ( StringUtils.isNotEmpty( versioning.getLatest() )
+                && timestamp.compareTo( versions.latestTimestamp ) > 0 )
+            {
+                versions.latestVersion = versioning.getLatest();
+                versions.latestTimestamp = timestamp;
+                versions.latestRepository = repository;
+            }
+        }
+    static class Versions
+    {
+
+        String releaseVersion = "";
+
+        String releaseTimestamp = "";
+
+        ArtifactRepository releaseRepository;
+
+        String latestVersion = "";
+
+        String latestTimestamp = "";
+
+        ArtifactRepository latestRepository;
+
+    }
+
