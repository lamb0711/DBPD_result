PR: MNG-625
allow a plugin to specify the minimum Maven version (will apply for both building and its execution - this should be separated later).

If you are running an older version then it will not prompt to update when found, and will fail if it is encountered with a hardcoded version.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@220239 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.metadata.ResolutionGroup;
+import org.apache.maven.artifact.metadata.ResolutionGroup;
+import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
+import org.apache.maven.execution.RuntimeInformation;
+import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.ProjectBuildingException;
+import java.io.IOException;
+
+    protected RuntimeInformation runtimeInformation;
+
+    protected MavenProjectBuilder mavenProjectBuilder;
-                mappingManager = pluginMappingBuilder.refreshPluginMappingManager( session
-                    .getPluginMappingManager(), project.getPluginArtifactRepositories(), session
-                    .getLocalRepository() );
+                mappingManager = pluginMappingBuilder.refreshPluginMappingManager( session.getPluginMappingManager(),
+                                                                                   project.getPluginArtifactRepositories(),
+                                                                                   session.getLocalRepository() );
-        // [HTTP-301] All version-resolution logic has been moved to DefaultPluginVersionManager. :)
+        // All version-resolution logic has been moved to DefaultPluginVersionManager.
-            String groupId = plugin.getGroupId();
-            String artifactId = plugin.getArtifactId();
-
-            plugin.setVersion(
-                pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings, localRepository ) );
+            String version = pluginVersionManager.resolvePluginVersion( plugin.getGroupId(), plugin.getArtifactId(),
+                                                                        project, settings, localRepository );
+            plugin.setVersion( version );
+
+                checkRequiredMavenVersion( plugin, localRepository, project.getPluginArtifactRepositories() );
+
-
-                // I think this ensures the plugin is not resolved multiple times
-                // TODO: put it back
-//                plugin.setVersion( pluginArtifact.getBaseVersion() );
-
+    /**
+     * @todo would be better to store this in the plugin descriptor, but then it won't be available to the version
+     * manager which executes before the plugin is instantiated
+     */
+    private void checkRequiredMavenVersion( Plugin plugin, ArtifactRepository localRepository, List remoteRepositories )
+        throws PluginVersionResolutionException, PluginManagerException
+    {
+        try
+        {
+            Artifact artifact = artifactFactory.createProjectArtifact( plugin.getGroupId(), plugin.getArtifactId(),
+                                                                       plugin.getVersion() );
+            MavenProject project = mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories,
+                                                                            localRepository );
+            // if we don't have the required Maven version, then ignore an update
+            if ( project.getPrerequesites() != null && project.getPrerequesites().getMaven() != null )
+            {
+                DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
+                    project.getPrerequesites().getMaven() );
+                if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+                {
+                    throw new PluginVersionResolutionException( plugin.getGroupId(), plugin.getArtifactId(),
+                                                                "Plugin requires Maven version " + requiredVersion );
+                }
+            }
+        }
+        catch ( ProjectBuildingException e )
+        {
+            throw new PluginVersionResolutionException( plugin.getGroupId(), plugin.getArtifactId(),
+                                                        "Unable to build project for plugin", e );
+        }
+        catch ( IOException e )
+        {
+            throw new PluginManagerException( "Unable to determine Maven version for comparison", e );
+        }
+    }
+
