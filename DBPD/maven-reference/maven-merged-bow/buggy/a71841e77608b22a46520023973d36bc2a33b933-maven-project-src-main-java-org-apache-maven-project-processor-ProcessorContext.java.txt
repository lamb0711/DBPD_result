Fixed profile activation for profiles in pom. Profile injection was causing double injection of some elements from plugin mng. Partial fix.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@758473 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.BuildBase;
+import org.apache.maven.model.DependencyManagement;
+import org.apache.maven.model.PluginExecution;
+import org.apache.maven.model.PluginManagement;
+import org.apache.maven.model.Resource;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
+        
-                                       new DevelopersProcessor() );
+                                       new DevelopersProcessor(), new ProfilesProcessor() );
+        
+        //Remove the plugin management and dependency management so they aren't applied again with the profile processing
+        PluginManagement mng = null;
+        if( model.getBuild() != null)
+        {
+            mng = model.getBuild().getPluginManagement();
+            model.getBuild().setPluginManagement( null );           
+        }
+     
+        DependencyManagement depMng = model.getDependencyManagement();
+        model.setDependencyManagement( depMng );
+        //TODO: Merge
+        target.getBuild().setPluginManagement( mng );
+        target.setDependencyManagement( depMng );
+        Profile p = copyOfProfile(profile);
+        
-        model.setModules( new ArrayList<String>(profile.getModules()) );
-        model.setDependencies(profile.getDependencies());
-        model.setDependencyManagement( profile.getDependencyManagement());
-        model.setDistributionManagement( profile.getDistributionManagement() );
-        model.setProperties( profile.getProperties() );  
-        model.setModules( new ArrayList<String>(profile.getModules() ) );
+        model.setModules( p.getModules() );
+        model.setDependencies(p.getDependencies());
+        model.setDependencyManagement( p.getDependencyManagement());
+        model.setDistributionManagement( p.getDistributionManagement() );
+        model.setProperties( p.getProperties() );  
+        model.setModules( new ArrayList<String>(p.getModules() ) );
-        proc.processWithProfile( profile.getBuild(), model);
+        proc.processWithProfile( p.getBuild(), model);
-                                       new ContributorsProcessor(), new DevelopersProcessor() );
+                                       new ContributorsProcessor(), new DevelopersProcessor(), new ProfilesProcessor() );
-       
-      //  if(!reverse)
-      //  {
-            Collections.reverse( models );    
-      //  }
+        Collections.reverse( models );    
-
-
+    public static Profile copyOfProfile(Profile profile)
+    {  
+        Profile p = new Profile();
+        p.setModules( new ArrayList<String>(profile.getModules()) );
+        p.setDependencies(new ArrayList<Dependency>(profile.getDependencies()));
+        p.setDependencyManagement( profile.getDependencyManagement());
+        p.setDistributionManagement( profile.getDistributionManagement() );
+        p.setProperties( profile.getProperties() );  
+        p.setBuild( copyBuild(profile.getBuild()) );
+
+        return p;
+    }
+    
+    private static BuildBase copyBuild(BuildBase base)
+    {
+        if(base == null)
+        {
+            return null;
+        }
+        
+        BuildBase b = new BuildBase();
+        b.setDefaultGoal( base.getDefaultGoal() );
+        b.setDirectory( base.getDirectory() );
+        b.setFilters( new ArrayList<String>(base.getFilters()) );
+        b.setFinalName( base.getFinalName() );
+        b.setPluginManagement( base.getPluginManagement() );
+        b.setPlugins( copyPlugins(base.getPlugins()) );
+        b.setResources( new ArrayList<Resource>(base.getResources()) );
+        b.setTestResources( new ArrayList<Resource>(base.getTestResources()) );    
+        return b;
+    }
+    
+    private static List<Plugin> copyPlugins(List<Plugin> plugins)
+    {
+        List<Plugin> ps = new ArrayList<Plugin>();
+        for(Plugin p : plugins)
+        {
+            ps.add( copyPlugin(p) );
+        }
+        return ps;
+    }
+    
+    private static Plugin copyPlugin(Plugin plugin)
+    {
+        Plugin p = new Plugin();
+        p.setArtifactId( plugin.getArtifactId() );
+        if(plugin.getConfiguration() != null) 
+        {
+            p.setConfiguration( new Xpp3Dom((Xpp3Dom) plugin.getConfiguration()) );           
+        }
+
+        p.setDependencies( new ArrayList<Dependency>(plugin.getDependencies()) );
+        p.setExecutions( new ArrayList<PluginExecution>(plugin.getExecutions()) );
+        p.setGoals( plugin.getGoals() );
+        p.setGroupId( plugin.getGroupId() );
+        p.setInherited( plugin.getInherited() );
+        p.setVersion( plugin.getVersion() );
+        return p;
+        
+    }

INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS83 MOV43 INS42 MOV44 INS8 UPD83 INS43 INS42 INS44 MOV21 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS60 INS25 INS60 INS21 INS21 INS21 INS60 MOV60 INS21 INS21 INS21 INS21 INS21 INS21 MOV60 INS21 MOV41 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS42 INS43 INS42 INS60 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS33 INS32 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS14 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 MOV32 INS42 INS33 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS14 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS14 INS43 UPD74 MOV32 UPD42 INS33 INS43 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS74 INS32 INS74 INS32 INS42 INS42 INS74 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS74 INS32 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS32 INS42 INS33 INS43 INS43 INS42 INS42 INS43 INS42 UPD43 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42