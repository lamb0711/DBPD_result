flip pom format


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163511 13f79535-47bb-0310-9956-ffa450edef68

+import compile.CompilerConfiguration;
+import compile.JavacCompiler;
+import download.ArtifactDownloader;
+import jar.JarMojo;
-
-import compile.CompilerConfiguration;
-import compile.JavacCompiler;
-
-import download.ArtifactDownloader;
-import jar.JarMojo;
-
-
-    String[] bootstrapDeps = new String[] {
-        "junit/jars/junit-3.8.1.jar",
-        "modello/jars/modello-core-1.0-SNAPSHOT.jar",
-        "modello/jars/modello-xdoc-plugin-1.0-SNAPSHOT.jar",
-        "modello/jars/modello-xml-plugin-1.0-SNAPSHOT.jar",
-        "modello/jars/modello-xpp3-plugin-1.0-SNAPSHOT.jar",
-        "plexus/jars/plexus-utils-1.0-alpha-2-SNAPSHOT.jar",
-        "surefire/jars/surefire-booter-1.2-SNAPSHOT.jar",
-        "surefire/jars/surefire-1.2-SNAPSHOT.jar",
-        "qdox/jars/qdox-1.2.jar" };
+    String[] bootstrapDeps = new String[]{"junit/jars/junit-3.8.1.jar", "modello/jars/modello-core-1.0-SNAPSHOT.jar",
+                                          "modello/jars/modello-xdoc-plugin-1.0-SNAPSHOT.jar",
+                                          "modello/jars/modello-xml-plugin-1.0-SNAPSHOT.jar",
+                                          "modello/jars/modello-xpp3-plugin-1.0-SNAPSHOT.jar",
+                                          "plexus/jars/plexus-utils-1.0-alpha-2-SNAPSHOT.jar",
+                                          "surefire/jars/surefire-booter-1.2-SNAPSHOT.jar",
+                                          "surefire/jars/surefire-1.2-SNAPSHOT.jar", "qdox/jars/qdox-1.2.jar"};
-    String[] plexusDeps = new String[] {
-        "classworlds/jars/classworlds-1.1-alpha-1.jar",
-        "plexus/jars/plexus-container-default-1.0-alpha-2-SNAPSHOT.jar" };
+    String[] plexusDeps = new String[]{"classworlds/jars/classworlds-1.1-alpha-1.jar",
+                                       "plexus/jars/plexus-container-default-1.0-alpha-2-SNAPSHOT.jar"};
-    String[] pluginGeneratorDeps = new String[] {
-        "plexus/jars/plexus-container-default-1.0-alpha-2-SNAPSHOT.jar",
-        "maven/jars/maven-core-2.0-SNAPSHOT.jar",
-        "maven/jars/maven-model-2.0-SNAPSHOT.jar",
-        "maven/jars/maven-plugin-2.0-SNAPSHOT.jar",
-        "maven/jars/maven-plugin-tools-api-2.0-SNAPSHOT.jar",
-        "maven/jars/maven-plugin-tools-java-2.0-SNAPSHOT.jar",
-        "maven/jars/maven-plugin-tools-pluggy-2.0-SNAPSHOT.jar" };
+    String[] pluginGeneratorDeps = new String[]{"plexus/jars/plexus-container-default-1.0-alpha-2-SNAPSHOT.jar",
+                                                "maven/jars/maven-core-2.0-SNAPSHOT.jar",
+                                                "maven/jars/maven-model-2.0-SNAPSHOT.jar",
+                                                "maven/jars/maven-plugin-2.0-SNAPSHOT.jar",
+                                                "maven/jars/maven-plugin-tools-api-2.0-SNAPSHOT.jar",
+                                                "maven/jars/maven-plugin-tools-java-2.0-SNAPSHOT.jar",
+                                                "maven/jars/maven-plugin-tools-pluggy-2.0-SNAPSHOT.jar"};
-    String[] modelloDeps = new String[] {
-        "classworlds/jars/classworlds-1.1-alpha-1.jar",
-        //"plexus/jars/plexus-container-api-1.0-alpha-1-SNAPSHOT.jar",
-        "plexus/jars/plexus-container-default-1.0-alpha-2-SNAPSHOT.jar",
-        //"plexus/jars/plexus-utils-1.0-alpha-1-SNAPSHOT.jar",
-        "modello/jars/modello-core-1.0-SNAPSHOT.jar",
-        "modello/jars/modello-xdoc-plugin-1.0-SNAPSHOT.jar",
-        "modello/jars/modello-xml-plugin-1.0-SNAPSHOT.jar",
-        "modello/jars/modello-xpp3-plugin-1.0-SNAPSHOT.jar" };
+    String[] modelloDeps = new String[]{"classworlds/jars/classworlds-1.1-alpha-1.jar",
+                                        //"plexus/jars/plexus-container-api-1.0-alpha-1-SNAPSHOT.jar",
+                                        "plexus/jars/plexus-container-default-1.0-alpha-2-SNAPSHOT.jar",
+                                        //"plexus/jars/plexus-utils-1.0-alpha-1-SNAPSHOT.jar",
+                                        "modello/jars/modello-core-1.0-SNAPSHOT.jar",
+                                        "modello/jars/modello-xdoc-plugin-1.0-SNAPSHOT.jar",
+                                        "modello/jars/modello-xml-plugin-1.0-SNAPSHOT.jar",
+                                        "modello/jars/modello-xpp3-plugin-1.0-SNAPSHOT.jar"};
-    String[] builds = new String[] {
-        "maven-model",
-        "maven-user-model",
-        "maven-monitor",
-        "maven-plugin",
-        "maven-artifact",
-        "maven-script/maven-script-marmalade",
-        "maven-core",
-        "maven-archiver",
-        "maven-plugin-tools/maven-plugin-tools-api",
-        "maven-plugin-tools/maven-plugin-tools-java",
-        "maven-plugin-tools/maven-plugin-tools-pluggy",
-        "maven-plugin-tools/maven-plugin-tools-marmalade",
-        "maven-core-it-verifier" };
+    String[] builds = new String[]{"maven-model", "maven-user-model", "maven-monitor", "maven-plugin",
+                                   "maven-artifact", "maven-script/maven-script-marmalade", "maven-core",
+                                   "maven-archiver", "maven-plugin-tools/maven-plugin-tools-api",
+                                   "maven-plugin-tools/maven-plugin-tools-java",
+                                   "maven-plugin-tools/maven-plugin-tools-pluggy",
+                                   "maven-plugin-tools/maven-plugin-tools-marmalade", "maven-core-it-verifier"};
-    String[] pluginBuilds = new String[] {
-        "maven-plugins/maven-clean-plugin",
-        "maven-plugins/maven-compiler-plugin",
-        "maven-plugins/maven-deploy-plugin",
-        "maven-plugins/maven-install-plugin",
-        "maven-plugins/maven-jar-plugin",
-        "maven-plugins/maven-plugin-plugin",
-        "maven-plugins/maven-pom-plugin",
-        "maven-plugins/maven-resources-plugin",
-        "maven-plugins/maven-surefire-plugin",
-        "maven-plugins/maven-war-plugin" };
-    
+    String[] pluginBuilds = new String[]{"maven-plugins/maven-clean-plugin", "maven-plugins/maven-compiler-plugin",
+                                         "maven-plugins/maven-deploy-plugin", "maven-plugins/maven-install-plugin",
+                                         "maven-plugins/maven-jar-plugin", "maven-plugins/maven-plugin-plugin",
+                                         "maven-plugins/maven-pom-plugin", "maven-plugins/maven-resources-plugin",
+                                         "maven-plugins/maven-surefire-plugin", "maven-plugins/maven-war-plugin"};
+
-    
+
-    
+
-        
+
-        
+
-        
+
-    
+
-    public static void main( String[] args ) throws Exception
+    public static void main( String[] args )
+        throws Exception
-    public void run( String[] args ) throws Exception
+    public void run( String[] args )
+        throws Exception
-                
+
-            System.out.println( "You must have a ~/.m2/user.xml file and must contain at least the following information:\n" );
+            System.out.println(
+                "You must have a ~/.m2/user.xml file and must contain at least the following information:\n" );
-            System.out.println( "<userModel>\n  " +
-                    "<mavenProfiles>\n    " +
-                    "<mavenProfile>\n      " +
-                    "<id>someId</id>\n      " +
-                    "<localRepository>/path/to/your/repository</localRepository>\n    " +
-                    "</mavenProfile>\n  " +
-                    "</mavenProfiles>\n  " +
-                    "<defaultProfiles>\n    " +
-                    "<mavenProfileId>someId</mavenProfileId>\n  " +
-                    "</defaultProfiles>\n" +
-                    "</userModel>\n" );
-            
-            System.out.println("where \'someId\' is just an id for matching within the file.");
+            System.out.println(
+                "<userModel>\n  " + "<mavenProfiles>\n    " + "<mavenProfile>\n      " + "<id>someId</id>\n      " +
+                "<localRepository>/path/to/your/repository</localRepository>\n    " +
+                "</mavenProfile>\n  " +
+                "</mavenProfiles>\n  " +
+                "<defaultProfiles>\n    " +
+                "<mavenProfileId>someId</mavenProfileId>\n  " +
+                "</defaultProfiles>\n" +
+                "</userModel>\n" );
+
+            System.out.println( "where \'someId\' is just an id for matching within the file." );
-            if ( d.getArtifactId().equals( "classworlds" ) ||
-            //d.artifactId.equals( "plexus-container-api" ) ||
-                d.artifactId.equals( "plexus-container-default" ) ||
-                //d.artifactId.equals( "plexus-utils" ) ||
+            if ( d.getArtifactId().equals( "classworlds" ) || //d.artifactId.equals( "plexus-container-api" ) ||
+                d.artifactId.equals( "plexus-container-default" ) || //d.artifactId.equals( "plexus-utils" ) ||
-    public void buildProject( String basedir, String projectId ) throws Exception
+    public void buildProject( String basedir, String projectId )
+        throws Exception
-        
-        String modelFileName = (String)MODELLO_MODEL_FILES.get( projectId );
-        
+
+        String modelFileName = (String) MODELLO_MODEL_FILES.get( projectId );
+
-        if(modelFileName != null && modelFileName.trim().length() > 0)
+        if ( modelFileName != null && modelFileName.trim().length() > 0 )
-            model = new File(base, modelFileName);
+            model = new File( base, modelFileName );
-        
+
-            String modelVersion = (String)MODELLO_TARGET_VERSIONS.get( projectId );
-            if(modelVersion == null || modelVersion.trim().length() < 1)
+            String modelVersion = (String) MODELLO_TARGET_VERSIONS.get( projectId );
+            if ( modelVersion == null || modelVersion.trim().length() < 1 )
-                System.out.println("No model version configured. Using \'1.0.0\'...");
+                System.out.println( "No model version configured. Using \'1.0.0\'..." );
-            
+
-            
-            System.out.println("Generating model bindings for version \'" + modelVersion + "\' in project: " + projectId);
-            
+
+            System.out.println(
+                "Generating model bindings for version \'" + modelVersion + "\' in project: " + projectId );
+
-    private void createToolsClassLoader() throws Exception
+    private void createToolsClassLoader()
+        throws Exception
-                throw new FileNotFoundException( "Missing dependency: " + dependency
-                    + ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
+                throw new FileNotFoundException( "Missing dependency: " + dependency +
+                                                 ( !online
+                                                   ? "; run again online"
+                                                   : "; there was a problem downloading it earlier" ) );
-    private void addPluginGeneratorDependencies() throws Exception
+    private void addPluginGeneratorDependencies()
+        throws Exception
-                throw new FileNotFoundException( "Missing dependency: " + dependency
-                    + ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
+                throw new FileNotFoundException( "Missing dependency: " + dependency +
+                                                 ( !online
+                                                   ? "; run again online"
+                                                   : "; there was a problem downloading it earlier" ) );
-        Method m = cls.getMethod( "main", new Class[] { String[].class } );
+        Method m = cls.getMethod( "main", new Class[]{String[].class} );
-        String[] args = { "descriptor", sourceDirectory, outputDirectory, pom, repoLocal };
+        String[] args = {"descriptor", sourceDirectory, outputDirectory, pom, repoLocal};
-        m.invoke( null, new Object[] { args } );
+        m.invoke( null, new Object[]{args} );
-    private void generateSources( String model, String mode, String dir, String modelVersion, String packageWithVersion )
+    private void generateSources( String model, String mode, String dir, String modelVersion,
+                                  String packageWithVersion )
-                throw new FileNotFoundException( "Missing dependency: " + dependency
-                    + ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
+                throw new FileNotFoundException( "Missing dependency: " + dependency +
+                                                 ( !online
+                                                   ? "; run again online"
+                                                   : "; there was a problem downloading it earlier" ) );
-        Method m = c.getMethod( "main", new Class[] { String[].class } );
+        Method m = c.getMethod( "main", new Class[]{String[].class} );
-        String[] args = new String[] { model, mode, dir, modelVersion, packageWithVersion };
+        String[] args = new String[]{model, mode, dir, modelVersion, packageWithVersion};
-        m.invoke( generator, new Object[] { args } );
+        m.invoke( generator, new Object[]{args} );
-    private void checkMBootDeps() throws Exception
+    private void checkMBootDeps()
+        throws Exception
-    private void checkModelloDeps() throws Exception
+    private void checkModelloDeps()
+        throws Exception
-    private void createJar( String classes, String buildDir ) throws Exception
+    private void createJar( String classes, String buildDir )
+        throws Exception
-    private void installPomFile( String repoLocal, File pomIn ) throws Exception
+    private void installPomFile( String repoLocal, File pomIn )
+        throws Exception
-    private void installPom( String basedir, String repoLocal ) throws Exception
+    private void installPom( String basedir, String repoLocal )
+        throws Exception
-    private void installJar( String basedir, String repoLocal ) throws Exception
+    private void installJar( String basedir, String repoLocal )
+        throws Exception
-    private void installPlugin( String basedir, String repoLocal ) throws Exception
+    private void installPlugin( String basedir, String repoLocal )
+        throws Exception
-    private void runTests( String basedir, String classes, String testClasses ) throws Exception
+    private void runTests( String basedir, String classes, String testClasses )
+        throws Exception
-        if ( reader.getUnitTests() != null )
-        {
-            if ( reader.getUnitTests().getIncludes().size() != 0 )
-            {
-                includes = reader.getUnitTests().getIncludes();
-            }
-            else
-            {
-                includes = new ArrayList();
+        includes = new ArrayList();
-                includes.add( "**/*Test.java" );
-            }
+        includes.add( "**/*Test.java" );
-            excludes = reader.getUnitTests().getExcludes();
-        }
-        else
-        {
-            includes = new ArrayList();
+        excludes = new ArrayList();
-            includes.add( "**/*Test.java" );
-
-            excludes = new ArrayList();
-
-            excludes.add( "**/*Abstract*.java" );
-        }
+        excludes.add( "**/*Abstract*.java" );
-    private void downloadDependencies( List dependencies ) throws Exception
+    private void downloadDependencies( List dependencies )
+        throws Exception
-                         String generatedSources ) throws Exception
+                          String generatedSources )
+        throws Exception
-                sourceDirectories = new String[] { sourceDirectory, generatedSources };
+                sourceDirectories = new String[]{sourceDirectory, generatedSources};
-                sourceDirectories = new String[] { generatedSources };
+                sourceDirectories = new String[]{generatedSources};
-                sourceDirectories = new String[] { sourceDirectory };
+                sourceDirectories = new String[]{sourceDirectory};
-    private void copyResources( String sourceDirectory, String destinationDirectory ) throws Exception
+    private void copyResources( String sourceDirectory, String destinationDirectory )
+        throws Exception
-        return d.getArtifactDirectory() + pathSeparator + d.getType() + "s" + pathSeparator + d.getArtifact();
+        return d.getArtifactDirectory() + pathSeparator + d.getPackaging() + "s" + pathSeparator + d.getArtifact();
-    
-    abstract class AbstractReader extends DefaultHandler
+
+    abstract class AbstractReader
+        extends DefaultHandler
-        private File file;
-        
+
-            this.file = file;
-
-            System.err.println( type + " [line " + spe.getLineNumber() + ", row " + spe.getColumnNumber() + "]: "
-                + spe.getMessage() );
+            System.err.println( type + " [line " + spe.getLineNumber() + ", row " + spe.getColumnNumber() + "]: " +
+                                spe.getMessage() );
-        private UnitTests unitTests;
-
+        private List testResources = new ArrayList();
+
-        private boolean insideUnitTest = false;
-
-        public UnitTests getUnitTests()
-        {
-            return unitTests;
-        }
-
-            else if ( rawName.equals( "unitTest" ) )
-            {
-                unitTests = new UnitTests();
-
-                insideUnitTest = true;
-            }
+            else if ( rawName.equals( "testResource" ) )
+            {
+                currentResource = new Resource();
+
+                insideResource = true;
+            }
-        public void endElement( String uri, String localName, String rawName ) throws SAXException
+        public void endElement( String uri, String localName, String rawName )
+            throws SAXException
-                f = new File( downloader.getMavenRepoLocal(), parentGroupId + "/poms/" + parentArtifactId + "-"
-                    + parentVersion + ".pom" );
+                f = new File( downloader.getMavenRepoLocal(), parentGroupId + "/poms/" + parentArtifactId + "-" +
+                                                              parentVersion + ".pom" );
-                unitTests = p.getUnitTests();
-
-            else if ( rawName.equals( "unitTest" ) )
-            {
-                insideUnitTest = false;
-            }
-                if ( insideUnitTest )
-                {
-                    unitTests.addResource( currentResource );
-                }
-                else
-                {
-                    resources.add( currentResource );
-                }
+                resources.add( currentResource );
+
+                insideResource = false;
+            }
+            else if ( rawName.equals( "testResource" ) )
+            {
+                testResources.add( currentResource );
-                else if ( rawName.equals( "type" ) )
+                else if ( rawName.equals( "packaging" ) )
-                    currentDependency.setType( getBodyText() );
+                    currentDependency.setPackaging( getBodyText() );
-                else if ( rawName.equals( "targetPath" ) )
-                {
-                    currentResource.setTargetPath( getBodyText() );
-                }
-            else if ( !insideResource && insideUnitTest )
-            {
-                if ( rawName.equals( "include" ) )
-                {
-                    unitTests.addInclude( getBodyText() );
-                }
-                else if ( rawName.equals( "exclude" ) )
-                {
-                    unitTests.addExclude( getBodyText() );
-                }
-            }
-                else if ( rawName.equals( "type" ) )
+                else if ( rawName.equals( "packaging" ) )
-        public void characters( char[] ch, int start, int length ) throws SAXException
+        public void characters( char[] ch, int start, int length )
+            throws SAXException
-        public void endElement( String uri, String localName, String rawName ) throws SAXException
+        public void endElement( String uri, String localName, String rawName )
+            throws SAXException
-                    throw new SAXException( "Invalid mavenProfile entry. Missing one or more "
-                        + "fields: {id,localRepository}." );
+                    throw new SAXException( "Invalid mavenProfile entry. Missing one or more " +
+                                            "fields: {id,localRepository}." );
-            
+
-        private String type = "jar";
+        private String packaging = "jar";
-            if ( "jar".equals( getType() ) || "plugin".equals( getType() ) )
+            if ( "jar".equals( getPackaging() ) || "plugin".equals( getPackaging() ) )
-                artifact += getType();
+                artifact += getPackaging();
-        public String getType()
+        public String getPackaging()
-            return type;
+            return packaging;
-        public void setType( String type )
+        public void setPackaging( String packaging )
-            this.type = type;
+            this.packaging = packaging;
-    public static class UnitTests
-        implements Serializable
-    {
-        private String directory;
-
-        private List unitTestIncludes = new ArrayList();
-
-        private List unitTestExcludes = new ArrayList();
-
-        private List unitTestResources = new ArrayList();
-
-        public void addInclude( String pattern )
-        {
-            unitTestIncludes.add( pattern );
-        }
-
-        public void addExclude( String pattern )
-        {
-            unitTestExcludes.add( pattern );
-        }
-
-        public void addResource( Resource resource )
-        {
-            unitTestResources.add( resource );
-        }
-
-        public List getIncludes()
-        {
-            return unitTestIncludes;
-        }
-
-        public List getExcludes()
-        {
-            return unitTestExcludes;
-        }
-
-        public List getResources()
-        {
-            return unitTestResources;
-        }
-
-        public void setDirectory( String directory )
-        {
-            this.directory = directory;
-        }
-
-        public String getDirectory()
-        {
-            return this.directory;
-        }
-    }
-
-        private String targetPath;
-
-        private boolean filtering;
-
-
-        public void setTargetPath( String targetPath )
-        {
-            this.targetPath = targetPath;
-        }
-
-        public String getTargetPath()
-        {
-            return targetPath;
-        }
-
-        public boolean getFiltering()
-        {
-            return filtering;
-        }
-
-        public void setFiltering( boolean filtering )
-        {
-            this.filtering = filtering;
-        }

MOV26 MOV26 MOV26 MOV26 MOV23 MOV8 MOV60 MOV60 MOV60 MOV60 MOV25 MOV43 UPD42 UPD42 UPD42 MOV14 MOV25 MOV25 UPD42 UPD42 MOV32 MOV8 MOV32 MOV8 UPD42 UPD42 MOV32 MOV8 UPD42 INS25 MOV8 UPD42 MOV32 INS8 MOV25 MOV21 INS32 INS8 UPD42 UPD42 INS21 INS21 INS32 INS42 INS42 INS45 INS21 INS21 UPD42 MOV8 UPD42 INS7 INS7 INS42 INS42 INS45 INS32 INS7 UPD42 MOV8 INS42 INS14 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS42 MOV8 INS43 MOV25 INS42 MOV32 MOV8 UPD45 UPD42 UPD45 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL38 DEL42 DEL27 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL55 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31