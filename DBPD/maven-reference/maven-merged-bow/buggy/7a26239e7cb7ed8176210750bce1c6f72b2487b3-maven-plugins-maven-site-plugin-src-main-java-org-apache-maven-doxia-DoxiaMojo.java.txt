Throw an exception if files in the site directory or in the generated site directory are duplicates

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@226350 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.SelectorUtils;
-import java.io.FileFilter;
+import java.util.LinkedHashMap;
+    /** OutputName of all project info report files generated by Maven */ 
+    private static final String[] PROJECT_INFO_FILES = new String[] { "integration",
+        "dependencies",
+        "issue-tracking",
+        "license",
+        "mail-lists",
+        "source-repository",
+        "team-list" };
+    
+    // TODO Push me in AbstractMojo class and remove me from AbstractMavenReport class
+    /**
+     * @see org.apache.maven.plugin.Mojo#execute()
+     */
-            for ( Iterator i = localesList.iterator(); i.hasNext(); )
+            for ( Iterator iterator = localesList.iterator(); iterator.hasNext(); )
-                Locale locale = (Locale) i.next();
+                Locale locale = (Locale) iterator.next();
+                // Try to find duplicate files
+                Map duplicate = new LinkedHashMap();
+                if ( siteDirectoryFile.exists() )
+                {
+                    tryToFindDuplicates( siteDirectoryFile, duplicate );
+                }
+                if ( generatedSiteFile.exists() )
+                {
+                    tryToFindDuplicates( generatedSiteFile, duplicate );
+                }
+
+                // Exception if a file is duplicate 
+                if ( ( duplicate.entrySet() != null ) && ( duplicate.entrySet().size() > 0 ) )
+                {
+                    StringBuffer sb = null;
+
+                    for ( Iterator it = duplicate.entrySet().iterator(); it.hasNext(); )
+                    {
+                        Map.Entry entry = (Map.Entry) it.next();
+                        List values = (List) entry.getValue();
+
+                        if ( values != null && values.size() > 1 )
+                        {
+                            if ( sb == null )
+                            {
+                                sb = new StringBuffer( "Some files are duplicates in the site directory or in the generated-site directory. "
+                                                  + "Review the following files:" );
+                            }
+
+                            sb.append( "\n" ).append( entry.getKey() ).append( "\n" );
+
+                            for ( Iterator it2 = values.iterator(); it2.hasNext(); )
+                            {
+                                String current = (String) it2.next();
+                                sb.append( "\t" ).append( current );
+                                if ( it2.hasNext() )
+                                {
+                                    sb.append( "\n" );
+                                }
+                            }
+                        }
+                    }
+
+                    if ( sb != null )
+                    {
+                        throw new MavenReportException( sb.toString() );
+                    }
+                }
+
-                if ( !indexExists( siteDirectoryFile ) )
+                if ( duplicate.get( "index" ) != null )
+                {
+                    getLog().info( "Ignoring the index file generation." );
+                }
+                else
-                else
-                {
-                    getLog().info( "Ignoring the index file generation." );
-                }
+                // Log if a user override a project info report file 
+                for ( int i = 0; i < PROJECT_INFO_FILES.length; i++)
+                {
+                    if ( projectInfos.size() > 0 )
+                    {
+                        if ( duplicate.get( PROJECT_INFO_FILES[i] ) != null )
+                        {
+                            getLog().info( "Override the generated files \"" + PROJECT_INFO_FILES[i] + "\"." );
+                        }
+                    }
+                }
+                
+        // TODO i18n
-     * Try to find a file called "index" in each sub-directory from the site directory.
-     * We don't care about the extension.
-     *
-     * @param siteDirectoryFile the site directory
-     * @return true if an index file was found, false otherwise
-     * @throws Exception if any
-     */
-    private boolean indexExists( File siteDirectoryFile )
-        throws Exception
-    {
-        getLog().debug( "Try to find an index file in the directory=[" + siteDirectoryFile + "]" );
-
-        File[] directories = siteDirectoryFile.listFiles( new FileFilter()
-        {
-            public boolean accept( File file )
-            {
-                for ( int i = 0; i < DEFAULT_EXCLUDES.length; i++ )
-                {
-                    if ( SelectorUtils.matchPath( DEFAULT_EXCLUDES[i], file.getName() ) )
-                    {
-                        return false;
-                    }
-                }
-
-                return file.isDirectory();
-            }
-        } );
-
-        if ( directories == null || directories.length == 0 )
-        {
-            return false;
-        }
-
-        List indexFound = new ArrayList();
-        for ( int i = 0; i < directories.length; i++ )
-        {
-            List indexes = FileUtils.getFiles( directories[i], "index.*", null, true );
-
-            if ( indexes.size() > 1 )
-            {
-                getLog().warn(
-                    "More than one index file exists in this directory [" + directories[i].getAbsolutePath() + "]." );
-                continue;
-            }
-
-            if ( indexes.size() == 1 )
-            {
-                getLog().debug( "Found [" + indexes.get( 0 ) + "]" );
-
-                indexFound.add( indexes.get( 0 ) );
-            }
-        }
-
-        if ( indexFound.size() > 1 )
-        {
-            StringBuffer sb = new StringBuffer( "\n" );
-            for ( Iterator it = indexFound.iterator(); it.hasNext(); )
-            {
-                sb.append( " * " );
-                sb.append( ( (File) it.next() ).getAbsolutePath() );
-                if ( it.hasNext() )
-                {
-                    sb.append( "\n" );
-                }
-            }
-            throw new MavenReportException( "More than one index file exists in the project site directory. "
-                + "You have to delete one of these files: " + sb.toString() );
-        }
-
-        if ( indexFound.size() == 1 )
-        {
-            getLog().warn( "One index file was found in the project site directory." );
-            return true;
-        }
-
-        return false;
-    }
-
-    /**
-    private void copyResources( File outputDirectory )
+    private void copyResources( File outputDir )
-                File outputFile = new File( outputDirectory, line );
+                File outputFile = new File( outputDir, line );
-        else
+
+        Locale firstLocale = (Locale) localesList.get( 0 );
+        if ( locale.equals( firstLocale ) )
-            Locale firstLocale = (Locale) localesList.get( 0 );
-            if ( locale.equals( firstLocale ) )
-            {
-                return new File( outputDirectory );
-            }
-            else
-            {
-                return new File( outputDirectory, locale.getLanguage() );
-            }
+            return new File( outputDirectory );
+
+        return new File( outputDirectory, locale.getLanguage() );
+    
+    /**
+     * Convenience method that try to find duplicate files in a given directory. 
+     * <p>The scan is case unsensitive.</p>
+     * 
+     * @param directory the directory to scan
+     * @param duplicate the map to update
+     * @throws IOException if any
+     **/
+    private static void tryToFindDuplicates( File directory, Map duplicate )
+        throws IOException
+    {
+        if ( duplicate == null )
+        {
+            duplicate = new HashMap();
+        }
+        
+        // The pattern as comma separated  
+        StringBuffer excludePattern = new StringBuffer();
+        for ( int i = 0; i < DEFAULT_EXCLUDES.length; i++ )
+        {
+            excludePattern.append( DEFAULT_EXCLUDES[i] ).append( "," );
+        }
+        excludePattern.deleteCharAt( excludePattern.length() - 1 );
+
+        List siteFiles = FileUtils.getFileNames( directory, null, excludePattern.toString(), false, false );
+        for ( Iterator it = siteFiles.iterator(); it.hasNext(); )
+        {
+            String currentFile = ( (String) it.next() );
+
+            if ( currentFile.lastIndexOf( File.separator ) == -1 )
+            {
+                // ignore files directly in the directory 
+                continue;
+            }
+
+            if ( currentFile.lastIndexOf( "." ) == -1 )
+            {
+                // ignore files without extension
+                continue;
+            }
+
+            String key = currentFile.substring( currentFile.indexOf( File.separator ) + 1, 
+                                                currentFile.lastIndexOf( "." ) );
+
+            String filePattern = "**/" + key + ".*";
+
+            List files = FileUtils.getFileNames( directory, filePattern, excludePattern.toString(), true, false );
+            if ( ( files != null ) && ( files.size() > 0 ) )
+            {
+                List tmp = (List) duplicate.get( key.toLowerCase() );
+                if ( tmp == null )
+                {
+                    tmp = new ArrayList();
+                }
+                if ( !tmp.containsAll( files ) )
+                {
+                    tmp.addAll( files );
+                }
+                duplicate.put( key.toLowerCase(), tmp );
+            }
+        }
+    }

MOV26 MOV31 UPD40 INS23 INS29 INS83 INS83 INS83 INS5 INS59 INS29 MOV8 INS83 UPD39 UPD42 INS44 UPD43 INS65 INS43 INS85 INS42 INS3 INS65 UPD42 INS25 MOV41 UPD65 MOV43 INS42 UPD43 UPD42 UPD42 INS25 MOV24 INS21 MOV60 INS24 INS66 INS42 INS5 INS4 INS68 MOV27 MOV8 UPD66 UPD66 UPD42 UPD66 INS42 UPD66 UPD42 UPD42 INS27 INS8 INS43 INS32 INS58 MOV32 INS8 INS43 INS85 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS40 INS42 INS42 INS33 INS21 UPD42 MOV42 UPD42 INS14 INS21 INS42 INS42 INS27 UPD42 INS43 INS59 INS60 INS25 INS25 INS60 MOV60 INS60 INS25 INS42 MOV21 INS7 UPD43 MOV43 INS32 INS32 INS34 UPD42 INS42 INS33 INS32 UPD9 INS9 INS42 INS42 INS32 INS43 INS59 MOV27 INS8 INS27 INS8 INS43 INS59 UPD43 INS43 INS59 INS27 INS8 UPD42 INS60 INS25 INS25 INS25 MOV8 INS24 INS42 INS14 UPD42 MOV32 INS42 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS36 INS38 INS18 INS32 INS38 INS18 INS42 INS42 INS32 UPD42 UPD42 INS27 UPD42 MOV42 UPD42 MOV42 MOV32 INS36 INS36 INS60 MOV25 INS25 MOV21 UPD42 MOV43 INS43 INS59 INS32 INS8 INS32 INS8 INS27 INS8 INS27 MOV58 INS27 MOV37 INS8 MOV43 INS43 UPD42 UPD42 MOV42 INS11 UPD42 UPD42 INS40 INS34 UPD42 MOV42 UPD42 MOV42 INS45 INS34 UPD42 MOV42 UPD42 MOV42 INS27 INS32 INS45 INS42 INS45 UPD42 INS42 UPD42 INS42 INS32 INS9 INS9 INS27 INS27 INS43 INS59 INS27 INS38 INS8 INS42 INS42 INS14 INS42 INS42 INS21 INS42 INS42 INS21 INS36 INS36 INS60 INS24 INS25 INS32 INS33 INS42 INS40 INS25 INS42 INS43 INS32 MOV32 MOV34 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS32 INS34 INS42 INS42 INS11 INS42 INS33 INS32 INS21 INS42 INS42 UPD42 MOV43 INS43 INS32 INS32 INS27 INS27 MOV43 INS59 INS58 MOV32 INS8 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS45 INS27 INS8 MOV43 UPD42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS40 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS7 INS42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS32 INS34 INS42 INS33 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS33 INS53 INS32 INS34 INS25 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 MOV14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS14 INS42 INS42 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS40 INS42 INS11 INS42 INS42 INS11 INS27 INS27 INS25 INS21 INS24 MOV43 MOV32 INS32 INS33 INS21 INS42 INS42 INS43 MOV32 MOV43 INS32 INS42 INS33 INS32 INS34 INS27 INS8 INS32 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS2 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS32 INS42 INS45 MOV43 INS59 INS42 INS42 INS60 INS21 INS25 INS42 INS42 MOV32 INS42 INS27 INS7 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS8 INS45 INS2 INS45 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS43 INS27 INS43 INS32 INS42 INS42 INS45 MOV32 INS42 INS45 INS45 INS42 INS42 INS42 DEL40 DEL26 DEL32 DEL38 DEL8 DEL25 DEL8 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL43 DEL85 DEL5 DEL42 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL2 DEL45 DEL33 DEL34 DEL45 DEL14 DEL45 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL40 DEL27 DEL32 DEL34 DEL27 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL2 DEL32 DEL45 DEL27 DEL32 DEL21 DEL18 DEL8 DEL25 DEL32 DEL42 DEL45 DEL42 DEL34 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL27 DEL59 DEL58 DEL42 DEL42 DEL45 DEL32 DEL21 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL32 DEL34 DEL27 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41