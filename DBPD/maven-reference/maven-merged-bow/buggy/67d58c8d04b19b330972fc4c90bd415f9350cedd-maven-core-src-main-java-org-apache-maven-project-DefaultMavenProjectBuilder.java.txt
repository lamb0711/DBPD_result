clean formatting, and ensure not to munge the model's repository list while assembling the lineage


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163342 13f79535-47bb-0310-9956-ffa450edef68

-    public void initialize() throws Exception
+    public void initialize()
+        throws Exception
-    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository,
-        boolean resolveDependencies ) throws ProjectBuildingException
+    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository, boolean resolveDependencies )
+        throws ProjectBuildingException
+            Set aggregatedRemoteWagonRepositories = RepositoryUtils.mavenToWagon( superModel.getRepositories() );
-                superModel.getRepositories() );
+                                                    aggregatedRemoteWagonRepositories );
-            for( Iterator i = lineage.iterator(); i.hasNext(); )
+            for ( Iterator i = lineage.iterator(); i.hasNext(); )
-                Model current = ((MavenProject) i.next()).getModel();
+                Model current = ( (MavenProject) i.next() ).getModel();
-            project.setArtifacts( artifactFactory.createArtifacts( project.getDependencies(),
-                localRepository ) );
+            project.setArtifacts( artifactFactory.createArtifacts( project.getDependencies(), localRepository ) );
-            if( resolveDependencies )
+            if ( resolveDependencies )
-                ArtifactResolutionResult result = artifactResolver.resolveTransitively( project
-                    .getArtifacts(), repos, localRepository, sourceReader );
+                ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(), repos,
+                                                                                        localRepository, sourceReader );
-            if( validationResult.getMessageCount() > 0 )
+            if ( validationResult.getMessageCount() > 0 )
-                throw new ProjectBuildingException( "Exception while building project: "
-                    + validationResult.toString() );
+                throw new ProjectBuildingException( "Exception while building project: " + validationResult.toString() );
-        catch( Exception e )
+        catch ( Exception e )
-            throw new ProjectBuildingException( "Error building project from " + projectDescriptor,
-                e );
+            throw new ProjectBuildingException( "Error building project from " + projectDescriptor, e );
-    private MavenProject assembleLineage( File projectDescriptor,
-        ArtifactRepository localRepository, LinkedList lineage, List remoteRepositories )
+    private MavenProject assembleLineage( File projectDescriptor, ArtifactRepository localRepository,
+                                          LinkedList lineage, Set aggregatedRemoteWagonRepositories )
-        if( parentModel != null )
+        if ( parentModel != null )
-            if( StringUtils.isEmpty( parentModel.getGroupId() ) )
+            if ( StringUtils.isEmpty( parentModel.getGroupId() ) )
-            else if( StringUtils.isEmpty( parentModel.getArtifactId() ) )
+            else if ( StringUtils.isEmpty( parentModel.getArtifactId() ) )
-                throw new ProjectBuildingException(
-                    "Missing artifactId element from parent element" );
+                throw new ProjectBuildingException( "Missing artifactId element from parent element" );
-            else if( StringUtils.isEmpty( parentModel.getVersion() ) )
+            else if ( StringUtils.isEmpty( parentModel.getVersion() ) )
-            remoteRepositories.addAll( model.getRepositories() );
+            aggregatedRemoteWagonRepositories.addAll( RepositoryUtils.mavenToWagon( model.getRepositories() ) );
-            File parentPom = findParentModel( parentModel, RepositoryUtils
-                .mavenToWagon( remoteRepositories ), localRepository );
+            File parentPom = findParentModel( parentModel, aggregatedRemoteWagonRepositories, localRepository );
-                remoteRepositories );
+                                                   aggregatedRemoteWagonRepositories );
-        if( project.getModel().getBuild().getFinalName() == null )
+        if ( project.getModel().getBuild().getFinalName() == null )
-            project.getModel().getBuild().setFinalName(
-                project.getArtifactId() + "-" + project.getVersion() );
+            project.getModel().getBuild().setFinalName( project.getArtifactId() + "-" + project.getVersion() );
-    private Model readModel( File projectDescriptor ) throws ProjectBuildingException
+    private Model readModel( File projectDescriptor )
+        throws ProjectBuildingException
-        catch( FileNotFoundException ex )
+        catch ( FileNotFoundException ex )
-    private Model readModel( Reader reader ) throws ProjectBuildingException
+    private Model readModel( Reader reader )
+        throws ProjectBuildingException
-        catch( Exception ex )
+        catch ( Exception ex )
-    private File findParentModel( Parent parent, Set remoteRepositories,
-        ArtifactRepository localRepository ) throws ProjectBuildingException
+    private File findParentModel( Parent parent, Set remoteArtifactRepositories, ArtifactRepository localRepository )
+        throws ProjectBuildingException
-        Artifact artifact = new DefaultArtifact( parent.getGroupId(), parent.getArtifactId(),
-            parent.getVersion(), "pom" );
+        Artifact artifact = new DefaultArtifact( parent.getGroupId(), parent.getArtifactId(), parent.getVersion(),
+                                                 "pom" );
-            artifactResolver.resolve( artifact, remoteRepositories, localRepository );
+            artifactResolver.resolve( artifact, remoteArtifactRepositories, localRepository );
-        catch( ArtifactResolutionException e )
+        catch ( ArtifactResolutionException e )
-            throw new ProjectBuildingException( "Missing parent POM: " + parent.getGroupId() + ":"
-                + parent.getArtifactId() + "-" + parent.getVersion(), e );
+            throw new ProjectBuildingException( "Missing parent POM: " + parent.getGroupId() + ":" +
+                                                parent.getArtifactId() + "-" + parent.getVersion(), e );
-    public List getSortedProjects( List projects ) throws Exception
+    public List getSortedProjects( List projects )
+        throws Exception
-        for( Iterator i = projects.iterator(); i.hasNext(); )
+        for ( Iterator i = projects.iterator(); i.hasNext(); )
-        for( Iterator i = projects.iterator(); i.hasNext(); )
+        for ( Iterator i = projects.iterator(); i.hasNext(); )
-            for( Iterator j = project.getDependencies().iterator(); j.hasNext(); )
+            for ( Iterator j = project.getDependencies().iterator(); j.hasNext(); )
-                if( dag.getVertex( dependencyArtifactId ) != null )
+                if ( dag.getVertex( dependencyArtifactId ) != null )
-        for( Iterator i = TopologicalSorter.sort( dag ).iterator(); i.hasNext(); )
+        for ( Iterator i = TopologicalSorter.sort( dag ).iterator(); i.hasNext(); )
-    private Model getSuperModel() throws ProjectBuildingException
+    private Model getSuperModel()
+        throws ProjectBuildingException
-        return readModel( new InputStreamReader( DefaultMavenProjectBuilder.class
-            .getResourceAsStream( "pom-" + MavenConstants.MAVEN_MODEL_VERSION + ".xml" ) ) );
+        return readModel( new InputStreamReader( DefaultMavenProjectBuilder.class.getResourceAsStream(
+            "pom-" + MavenConstants.MAVEN_MODEL_VERSION + ".xml" ) ) );

UPD43 UPD42 UPD42 UPD42 INS60 INS43 MOV43 INS59 INS32 INS42 UPD42 INS42 INS32 INS42 INS42 MOV32 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 DEL42 DEL42 DEL42 DEL42 DEL32