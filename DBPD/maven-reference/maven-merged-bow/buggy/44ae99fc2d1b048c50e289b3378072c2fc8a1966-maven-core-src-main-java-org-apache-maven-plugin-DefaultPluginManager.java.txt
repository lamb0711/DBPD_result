Merge maven.new for latest plexus classworlds and container APIs

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@483302 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.classworlds.realm.ClassRealm;
-    implements PluginManager, Initializable, Contextualizable
+    implements PluginManager,
+    Initializable,
+    Contextualizable
-    public Plugin getPluginDefinitionForPrefix( String prefix, MavenSession session, MavenProject project )
+    public Plugin getPluginDefinitionForPrefix( String prefix,
+                                                MavenSession session,
+                                                MavenProject project )
-    public PluginDescriptor verifyPlugin( Plugin plugin, MavenProject project, Settings settings,
+    public PluginDescriptor verifyPlugin( Plugin plugin,
+                                          MavenProject project,
+                                          Settings settings,
-    private PluginDescriptor verifyVersionedPlugin( Plugin plugin, MavenProject project,
+    private PluginDescriptor verifyVersionedPlugin( Plugin plugin,
+                                                    MavenProject project,
-    private void checkRequiredMavenVersion( Plugin plugin, ArtifactRepository localRepository, List remoteRepositories )
+    private void checkRequiredMavenVersion( Plugin plugin,
+                                            ArtifactRepository localRepository,
+                                            List remoteRepositories )
-    protected void addPlugin( Plugin plugin, Artifact pluginArtifact, MavenProject project,
+    protected void addPlugin( Plugin plugin,
+                              Artifact pluginArtifact,
+                              MavenProject project,
-        PlexusContainer child;
+        ClassRealm componentRealm;
+
-            child = container.createChildContainer( plugin.getKey(),
-                                                    Collections.singletonList( pluginArtifact.getFile() ),
-                                                    Collections.EMPTY_MAP,
-                                                    Collections.singletonList( pluginCollector ) );
+            componentRealm = container.createComponentRealm( plugin.getKey(),
+                                                             Collections.singletonList( pluginArtifact.getFile() ) );
-        PluginDescriptor addedPlugin = pluginCollector.getPluginDescriptor( plugin );
+        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( plugin );
-        if ( addedPlugin == null )
+        if ( pluginDescriptor == null )
-            throw new IllegalStateException( "The PluginDescriptor for the plugin " + plugin.getKey() + " was not found" );
+            throw new IllegalStateException(
+                "The PluginDescriptor for the plugin " + plugin.getKey() + " was not found" );
-        addedPlugin.setClassRealm( child.getContainerRealm() );
+        //pluginDescriptor.setClassRealm( child.getContainerRealm() );
+        pluginDescriptor.setClassRealm( componentRealm );
-        addedPlugin.setArtifacts( Collections.singletonList( pluginArtifact ) );
+        pluginDescriptor.setArtifacts( Collections.singletonList( pluginArtifact ) );
-//            Set artifacts =
-//                MavenMetadataSource.createArtifacts( artifactFactory, plugin.getDependencies(), null, null, project );
-
-            addedPlugin.setIntroducedDependencyArtifacts( artifacts );
+            pluginDescriptor.setIntroducedDependencyArtifacts( artifacts );
-    public void executeMojo( MavenProject project, MojoExecution mojoExecution, MavenSession session )
+    public void executeMojo( MavenProject project,
+                             MojoExecution mojoExecution,
+                             MavenSession session )
+
+
+
+
+
+
+
+
+        
-            Thread.currentThread().setContextClassLoader(
-                mojoDescriptor.getPluginDescriptor().getClassRealm().getClassLoader() );
+            Thread.currentThread().setContextClassLoader( mojoDescriptor.getPluginDescriptor().getClassRealm() );
+            /*
+            */
-    public MavenReport getReport( MavenProject project, MojoExecution mojoExecution, MavenSession session )
+    public MavenReport getReport( MavenProject project,
+                                  MojoExecution mojoExecution,
+                                  MavenSession session )
-    public PluginDescriptor verifyReportPlugin( ReportPlugin reportPlugin, MavenProject project, MavenSession session )
+    public PluginDescriptor verifyReportPlugin( ReportPlugin reportPlugin,
+                                                MavenProject project,
+                                                MavenSession session )
+        return container;
+
+        /*
+        */
-    private Mojo getConfiguredMojo( MavenSession session, Xpp3Dom dom, MavenProject project, boolean report,
+    private Mojo getConfiguredMojo( MavenSession session,
+                                    Xpp3Dom dom,
+                                    MavenProject project,
+                                    boolean report,
-    private void ensurePluginContainerIsComplete( PluginDescriptor pluginDescriptor, PlexusContainer pluginContainer,
-                                                  MavenProject project, MavenSession session )
+    private void ensurePluginContainerIsComplete( PluginDescriptor pluginDescriptor,
+                                                  PlexusContainer pluginContainer,
+                                                  MavenProject project,
+                                                  MavenSession session )
+            List repositories = new ArrayList();
+            repositories.addAll( resolutionGroup.getResolutionRepositories() );
+            repositories.addAll( project.getRemoteArtifactRepositories() );
+
-                                                                                    localRepository,
-                                                                                    repositories,
+                                                                                    localRepository, repositories,
-    private void resolveCoreArtifacts( List unresolved, ArtifactRepository localRepository,
+    private void resolveCoreArtifacts( List unresolved,
+                                       ArtifactRepository localRepository,
-    private void checkRequiredParameters( MojoDescriptor goal, PlexusConfiguration configuration,
+    private void checkRequiredParameters( MojoDescriptor goal,
+                                          PlexusConfiguration configuration,
-    private void validatePomConfiguration( MojoDescriptor goal, PlexusConfiguration pomConfiguration )
+    private void validatePomConfiguration( MojoDescriptor goal,
+                                           PlexusConfiguration pomConfiguration )
-    private PlexusConfiguration mergeMojoConfiguration( XmlPlexusConfiguration fromPom, MojoDescriptor mojoDescriptor )
+    private PlexusConfiguration mergeMojoConfiguration( XmlPlexusConfiguration fromPom,
+                                                        MojoDescriptor mojoDescriptor )
-                    if ( implementation != null
-                        && toAdd.getAttribute( "implementation", null ) == null )
+                    if ( implementation != null && toAdd.getAttribute( "implementation", null ) == null )
-                        toAdd = buildTopDownMergedConfiguration( toAdd, implementationConf  );
+                        toAdd = buildTopDownMergedConfiguration( toAdd, implementationConf );
-    private void populatePluginFields( Mojo plugin, MojoDescriptor mojoDescriptor, PlexusConfiguration configuration,
-                                       PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
+    private void populatePluginFields( Mojo plugin,
+                                       MojoDescriptor mojoDescriptor,
+                                       PlexusConfiguration configuration,
+                                       PlexusContainer pluginContainer,
+                                       ExpressionEvaluator expressionEvaluator )
-    public static String createPluginParameterRequiredMessage( MojoDescriptor mojo, Parameter parameter,
+    public static String createPluginParameterRequiredMessage( MojoDescriptor mojo,
+                                                               Parameter parameter,
-    private void resolveTransitiveDependencies( MavenSession context, ArtifactResolver artifactResolver, String scope,
-                                                ArtifactFactory artifactFactory, MavenProject project )
+    private void resolveTransitiveDependencies( MavenSession context,
+                                                ArtifactResolver artifactResolver,
+                                                String scope,
+                                                ArtifactFactory artifactFactory,
+                                                MavenProject project )
-    private void downloadDependencies( MavenProject project, MavenSession context, ArtifactResolver artifactResolver )
+    private void downloadDependencies( MavenProject project,
+                                       MavenSession context,
+                                       ArtifactResolver artifactResolver )
-    public Object getPluginComponent( Plugin plugin, String role, String roleHint )
+    public Object getPluginComponent( Plugin plugin,
+                                      String role,
+                                      String roleHint )
-    public Map getPluginComponents( Plugin plugin, String role )
+    public Map getPluginComponents( Plugin plugin,
+                                    String role )

INS26 INS40 UPD43 MOV8 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV21 INS60 INS21 INS21 MOV32 MOV32 INS43 INS59 INS32 INS32 UPD42 UPD42 MOV32 UPD42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25