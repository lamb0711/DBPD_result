Got rid of the profile injector and advisor.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@748871 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.Method;
+import org.apache.maven.profiles.DefaultProfileManager;
-import org.apache.maven.profiles.build.ProfileAdvisor;
+import org.codehaus.plexus.util.xml.pull.XmlSerializer;
+import org.codehaus.plexus.util.xml.pull.MXSerializer;
+import org.codehaus.plexus.PlexusContainer;
-    private ProfileAdvisor profileAdvisor;
+    private MavenRepositorySystem repositorySystem;
-    private MavenRepositorySystem repositorySystem;
+    private PlexusContainer container;
-        
+
+        List<Profile> projectProfiles = new ArrayList<Profile>();
-            // used to trigger the caching of SystemProperties in the container context...
-                externalProfileManager.getActiveProfiles();
+                projectProfiles.addAll(externalProfileManager.getActiveProfiles( model ));
+
+            ProfileManager profileManager = new DefaultProfileManager( container, profileActivationContext );
+            profileManager.addProfiles( model.getProfiles() );
+            try
+            {
+                projectProfiles.addAll( profileManager.getActiveProfiles( model ));
+            }
+            catch (ProfileActivationException e)
+            {
+                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.",
+                                                    projectDescriptor, e );
+            }
-        List<Profile> projectProfiles = new ArrayList<Profile>();
-
-        projectProfiles.addAll( profileAdvisor.applyActivatedProfiles( model, profileActivationContext ) );
-
-        projectProfiles.addAll( profileAdvisor.applyActivatedExternalProfiles( model, externalProfileManager ) );
+        for( Profile profile : projectProfiles )
+        {
+            inject( profile, model );
+        }
+    private Model inject( Profile profile, Model model )
+    {
+        //TODO: Using reflection now. Need to replace with custom mapper
+        StringWriter writer = new StringWriter();
+        XmlSerializer serializer = new MXSerializer();
+        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
+        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
+        try
+        {
+            serializer.setOutput( writer );
+            serializer.startDocument("UTF-8", null );
+        } catch (IOException e) {
+
+        }
+
+        try {
+            MavenXpp3Writer w = new MavenXpp3Writer();
+            Class c = Class.forName("org.apache.maven.model.io.xpp3.MavenXpp3Writer");
+
+            Class partypes[] = new Class[3];
+            partypes[0] = Profile.class;
+            partypes[1] = String.class;
+            partypes[2] = XmlSerializer.class;
+
+            Method meth = c.getDeclaredMethod(
+                         "writeProfile", partypes);
+            meth.setAccessible(true);
+
+            Object arglist[] = new Object[3];
+            arglist[0] = profile;
+            arglist[1] = "profile";
+            arglist[2] = serializer;
+
+            meth.invoke(w, arglist);
+            serializer.endDocument();
+        }
+        catch (Exception e)
+        {
+            return null;
+        }
+        Set<String> uris = new HashSet(PomTransformer.URIS);
+        uris.add(ProjectUri.Profiles.Profile.Build.Plugins.Plugin.configuration);
+
+        List<ModelProperty> p;
+        try
+        {
+            p = ModelMarshaller.marshallXmlToModelProperties(new ByteArrayInputStream(writer.getBuffer().toString().getBytes()),
+                    ProjectUri.Profiles.xUri, uris);
+        } catch (IOException e) {
+            return null;
+        }
+
+            List<ModelProperty> transformed = new ArrayList<ModelProperty>();
+            for(ModelProperty mp : p)
+            {
+                if(mp.getUri().startsWith(ProjectUri.Profiles.Profile.xUri) && !mp.getUri().equals(ProjectUri.Profiles.Profile.id)
+                        && !mp.getUri().startsWith(ProjectUri.Profiles.Profile.Activation.xUri) )
+                {
+                    transformed.add(new ModelProperty(mp.getUri().replace(ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri),
+                            mp.getResolvedValue()));
+                }
+            }
+
+        PomTransformer transformer = new PomTransformer( new PomClassicDomainModelFactory() );
+        ModelTransformerContext ctx = new ModelTransformerContext(PomTransformer.MODEL_CONTAINER_INFOS );
+
+        PomClassicDomainModel transformedDomainModel;
+        try {
+            transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( Arrays.asList(  new PomClassicDomainModel(transformed), convertToDomainModel(model)),
+                                                                                                    transformer,
+                                                                                                    transformer,
+                                                                                                    Collections.EMPTY_LIST,
+                                                                                                    null,
+                                                                                                    null ) );
+            return convertFromInputStreamToModel(transformedDomainModel.getInputStream());
+        } catch (IOException e) {
+            e.printStackTrace();
+            return null;
+        }
+
+
+    }
+

MOV26 INS26 INS26 INS26 INS26 MOV23 INS40 UPD40 INS40 INS40 INS40 INS31 UPD43 MOV60 INS83 INS43 INS42 INS44 INS44 INS8 UPD42 UPD42 INS70 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS54 INS54 INS60 INS21 INS60 INS54 INS60 INS70 INS60 INS60 INS60 INS54 INS8 INS44 INS42 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS8 INS12 INS8 INS12 INS74 INS59 INS32 INS74 INS59 INS8 INS12 INS74 INS59 INS44 INS42 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 MOV21 INS60 INS21 INS54 INS43 INS42 MOV21 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS21 INS21 INS44 INS8 INS60 INS60 INS60 INS21 INS21 INS21 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS43 INS43 INS42 INS21 INS44 INS8 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS21 INS41 INS44 INS8 INS43 INS59 INS32 INS8 INS12 INS42 INS43 INS43 INS32 INS32 INS43 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS7 INS7 INS7 INS43 INS59 INS32 INS43 INS59 INS7 INS7 INS7 INS32 INS32 INS43 INS42 INS41 INS42 INS42 INS43 INS40 INS42 INS42 INS7 INS43 INS42 INS41 INS42 INS42 INS74 INS42 INS27 INS8 INS43 INS14 INS43 INS40 INS7 INS32 INS43 INS42 INS21 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS21 INS44 INS8 UPD42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS33 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS85 INS3 INS2 INS57 INS2 INS57 INS2 INS57 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS85 INS3 INS2 INS42 INS2 INS45 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS43 INS43 INS32 INS38 INS38 INS21 INS42 INS43 INS42 INS42 INS36 INS42 INS32 INS42 INS32 INS33 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS43 INS42 INS42 INS45 INS5 INS34 INS42 INS34 INS43 INS42 INS34 INS43 INS42 INS34 INS43 INS42 INS42 INS45 INS42 INS5 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS14 INS40 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS32 INS32 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS43 INS85 INS42 INS42 INS42 INS43 INS85 INS43 INS32 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS14 INS43 INS32 MOV42 MOV42 INS42 INS42 INS42 INS42 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS33 INS33 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL32 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21