- allow multiple versions of a plugin to operate concurrently.
- allow specification of a mojo as groupId:artifactId:version:goal
- general removal of more hard coding

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168543 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.dag.CycleDetectedException;
-    protected Map mojoDescriptors;
-        mojoDescriptors = new HashMap();
-
-    /**
-     * Mojo descriptors are looked up using their id which is of the form
-     * <pluginId>: <mojoId>. So this might be archetype:create for example which
-     * is the create mojo that resides in the archetype plugin.
-     *
-     * @param name
-     * @return
-     * @todo remove
-     */
-    public MojoDescriptor getMojoDescriptor( String name )
+    private PluginDescriptor getPluginDescriptor( String groupId, String artifactId, String version )
-        return (MojoDescriptor) mojoDescriptors.get( name );
-    }
-
-    public PluginDescriptor getPluginDescriptor( String groupId, String artifactId )
-    {
-        return (PluginDescriptor) pluginDescriptors.get( PluginDescriptor.constructPluginKey( groupId, artifactId ) );
+        return (PluginDescriptor) pluginDescriptors.get(
+            PluginDescriptor.constructPluginKey( groupId, artifactId, version ) );
-    public void processPluginDescriptor( PluginDescriptor pluginDescriptor )
-        throws CycleDetectedException
-    {
-        String key = pluginDescriptor.getId();
-
-        if ( pluginsInProcess.contains( key ) )
-        {
-            return;
-        }
-
-        pluginsInProcess.add( key );
-
-        for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
-        {
-            MojoDescriptor mojoDescriptor = (MojoDescriptor) it.next();
-
-            mojoDescriptors.put( mojoDescriptor.getFullGoalName(), mojoDescriptor );
-        }
-
-        pluginDescriptors.put( key, pluginDescriptor );
-    }
-
-        if ( !( componentSetDescriptor instanceof PluginDescriptor ) )
+        if ( componentSetDescriptor instanceof PluginDescriptor )
-            return;
-        }
+            PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;
-        PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;
+            if ( pluginDescriptor.getVersion() == null )
+            {
+                // TODO: temporary - until we're done testing that version is always written
+                throw new NullPointerException(
+                    "Version was null - check your plugin '" + pluginDescriptor.getId() +
+                    "' was built with Maven 2.0 Alpha 2" );
+            }
-        try
-        {
-            processPluginDescriptor( pluginDescriptor );
-        }
-        catch ( CycleDetectedException e )
-        {
-            getLogger().error( "A cycle was detected in the goal graph: ", e );
+            String key = pluginDescriptor.getId();
+
+            if ( !pluginsInProcess.contains( key ) )
+            {
+                pluginsInProcess.add( key );
+
+                pluginDescriptors.put( key, pluginDescriptor );
+            }
-    private boolean isPluginInstalled( String groupId, String artifactId )
+    private boolean isPluginInstalled( String groupId, String artifactId, String version )
-        return pluginDescriptors.containsKey( PluginDescriptor.constructPluginKey( groupId, artifactId ) );
+        return pluginDescriptors.containsKey( PluginDescriptor.constructPluginKey( groupId, artifactId, version ) );
-    public void verifyPlugin( String groupId, String artifactId, MavenSession session )
+    public PluginDescriptor verifyPlugin( String groupId, String artifactId, String version, MavenSession session )
-        // TODO: we should we support concurrent versions
-        if ( !isPluginInstalled( groupId, artifactId ) )
+        // TODO: this should be possibly outside
+        if ( version == null )
-            String version = null;
-
+        }
+        if ( !isPluginInstalled( groupId, artifactId, version ) )
+        {
+        return getPluginDescriptor( groupId, artifactId, version );
-            getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value + " for parameter: \'" + key + "\'" );
+            getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value +
+                               " for parameter: \'" + key + "\'" );

INS31 UPD83 MOV44 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS44 MOV43 INS44 MOV8 UPD42 MOV60 INS25 INS43 INS42 MOV43 INS42 INS25 INS25 INS41 MOV62 INS8 INS42 INS27 INS8 INS38 INS8 INS32 MOV60 INS25 MOV60 MOV25 INS42 INS33 MOV60 MOV60 MOV24 MOV25 MOV25 INS32 MOV54 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS53 MOV32 MOV21 MOV21 MOV42 UPD42 MOV42 INS14 INS43 INS27 UPD42 MOV42 INS45 INS32 INS45 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL36 DEL41 DEL42 DEL44 DEL42 DEL43 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL39 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL25 DEL8