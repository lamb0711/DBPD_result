[MNG-5937] Optimize code for Java 8

-import java.io.BufferedOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.ArrayList;
+import java.net.URISyntaxException;
+import java.nio.file.FileVisitResult;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.SimpleFileVisitor;
+import java.nio.file.attribute.BasicFileAttributes;
+import java.util.stream.Collectors;
-    public File createDist( WrapperConfiguration configuration )
-        throws Exception
+    public Path createDist( WrapperConfiguration configuration )
+        throws IOException, URISyntaxException
-        File localZipFile = localDistribution.getZipFile();
+        Path localZipFile = localDistribution.getZipFile();
-        if ( alwaysDownload || !localZipFile.exists() )
+        if ( alwaysDownload || !Files.exists( localZipFile ) )
-            File tmpZipFile = new File( localZipFile.getParentFile(), localZipFile.getName() + ".part" );
-            tmpZipFile.delete();
+            Path tmpZipFile = localZipFile.resolveSibling( localZipFile.getFileName() + ".part" );
+            Files.deleteIfExists( tmpZipFile );
-            tmpZipFile.renameTo( localZipFile );
+            Files.move( tmpZipFile, localZipFile );
-        File distDir = localDistribution.getDistributionDir();
-        List<File> dirs = listDirs( distDir );
+        Path distDir = localDistribution.getDistributionDir();
+        List<Path> dirs = listDirs( distDir );
-            for ( File dir : dirs )
+            Files.walkFileTree( distDir.toAbsolutePath(), new SimpleFileVisitor<Path>()
-                Logger.info( "Deleting directory " + dir.getAbsolutePath() );
-                deleteDir( dir );
-            }
-            Logger.info( "Unzipping " + localZipFile.getAbsolutePath() + " to " + distDir.getAbsolutePath() );
+                @Override
+                public FileVisitResult postVisitDirectory( Path dir, IOException exc )
+                    throws IOException
+                {
+                    if ( dir.getParent().equals( distDir ) )
+                    {
+                        Logger.info( "Deleting directory " + distDir.toAbsolutePath() );
+                        Files.delete( dir );
+                    }
+                    return FileVisitResult.CONTINUE;
+                }
+
+                public FileVisitResult visitFile( Path file, BasicFileAttributes attrs )
+                    throws IOException
+                {
+                    if ( !file.getParent().equals( distDir ) )
+                    {
+                        Files.delete( file );
+                    }
+                    return FileVisitResult.CONTINUE;
+                };
+            } );
+
+            Logger.info( "Unzipping " + localZipFile.toAbsolutePath() + " to " + distDir.toAbsolutePath() );
+
-            throw new RuntimeException( String.format( 
+            throw new IllegalStateException( String.format( 
-    private List<File> listDirs( File distDir )
+    private List<Path> listDirs( Path distDir ) throws IOException
-        List<File> dirs = new ArrayList<File>();
-        if ( distDir.exists() )
-        {
-            for ( File file : distDir.listFiles() )
-            {
-                if ( file.isDirectory() )
-                {
-                    dirs.add( file );
-                }
-            }
-        }
-        return dirs;
+        return Files.walk( distDir, 1 )
+                        .filter( p -> !distDir.equals( p ) )
+                        .filter( Files::isDirectory )
+                        .collect( Collectors.toList() );
-    private void setExecutablePermissions( File mavenHome )
+    private void setExecutablePermissions( Path mavenHome )
-        File mavenCommand = new File( mavenHome, "bin/mvn" );
+        Path mavenCommand = mavenHome.resolve( "bin/mvn" );
-            ProcessBuilder pb = new ProcessBuilder( "chmod", "755", mavenCommand.getCanonicalPath() );
+            ProcessBuilder pb = new ProcessBuilder( "chmod", "755", mavenCommand.toString() );
-                Logger.info( "Set executable permissions for: " + mavenCommand.getAbsolutePath() );
+                Logger.info( "Set executable permissions for: " + mavenCommand.toString() );
-                BufferedReader is = new BufferedReader( new InputStreamReader( p.getInputStream() ) );
-                Formatter stdout = new Formatter();
-                String line;
-                while ( ( line = is.readLine() ) != null )
+
+                try ( BufferedReader is = new BufferedReader( new InputStreamReader( p.getInputStream() ) );
+                      Formatter stdout = new Formatter() )
-                    stdout.format( "%s%n", line );
+                    String line;
+                    while ( ( line = is.readLine() ) != null )
+                    {
+                        stdout.format( "%s%n", line );
+                    }
+                    errorMessage = stdout.toString();
-                errorMessage = stdout.toString();
-        catch ( IOException e )
-        {
-            errorMessage = e.getMessage();
-        }
-        catch ( InterruptedException e )
+        catch ( IOException | InterruptedException e )
-            Logger.warn( "Could not set executable permissions for: " + mavenCommand.getAbsolutePath() );
+            Logger.warn( "Could not set executable permissions for: " + mavenCommand );
-        if ( osName.indexOf( "windows" ) > -1 )
-        {
-            return true;
-        }
-        return false;
+
+        return ( osName.indexOf( "windows" ) > -1 );
-    private boolean deleteDir( File dir )
+    private void unzip( Path zip, Path dest )
+        throws IOException
-        if ( dir.isDirectory() )
+        try ( ZipFile zipFile = new ZipFile( zip.toFile() ) )
-            String[] children = dir.list();
-            for ( int i = 0; i < children.length; i++ )
+            Enumeration<? extends ZipEntry> entries = zipFile.entries();
+
+            while ( entries.hasMoreElements() )
-                boolean success = deleteDir( new File( dir, children[i] ) );
-                if ( !success )
+                ZipEntry entry = entries.nextElement();
+
+                if ( entry.isDirectory() )
-                    return false;
+                    continue;
+                }
+
+                Path targetFile = dest.resolve( entry.getName() );
+
+                // prevent Zip Slip
+                if ( targetFile.startsWith( dest ) ) 
+                {
+                    Files.createDirectories( targetFile.getParent() );
+
+                    Files.copy( zipFile.getInputStream( entry ), targetFile );
-
-        // The directory is now empty so delete it
-        return dir.delete();
-
-    public void unzip( File zip, File dest )
-        throws IOException
-    {
-        Enumeration entries;
-        ZipFile zipFile;
-
-        zipFile = new ZipFile( zip );
-
-        entries = zipFile.entries();
-
-        while ( entries.hasMoreElements() )
-        {
-            ZipEntry entry = (ZipEntry) entries.nextElement();
-
-            if ( entry.isDirectory() )
-            {
-                ( new File( dest, entry.getName() ) ).mkdirs();
-                continue;
-            }
-
-            new File( dest, entry.getName() ).getParentFile().mkdirs();
-            copyInputStream( zipFile.getInputStream( entry ),
-                             new BufferedOutputStream( new FileOutputStream( new File( dest, entry.getName() ) ) ) );
-        }
-        zipFile.close();
-    }
-
-    public void copyInputStream( InputStream in, OutputStream out )
-        throws IOException
-    {
-        byte[] buffer = new byte[1024];
-        int len;
-
-        while ( ( len = in.read( buffer ) ) >= 0 )
-        {
-            out.write( buffer, 0, len );
-        }
-
-        in.close();
-        out.close();
-    }
-

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 INS31 UPD43 UPD43 INS43 MOV83 UPD74 MOV74 MOV42 MOV44 INS43 INS8 UPD83 UPD42 UPD42 INS42 UPD43 UPD43 UPD42 MOV42 INS41 UPD43 MOV41 UPD43 UPD43 INS54 UPD43 UPD43 UPD74 UPD42 UPD42 INS32 UPD42 UPD43 INS36 UPD42 UPD42 INS58 INS8 UPD42 UPD42 UPD43 INS21 INS32 INS42 INS32 UPD42 INS32 MOV27 MOV43 INS59 INS60 INS61 UPD43 UPD42 INS32 INS32 INS42 INS90 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS45 MOV43 INS84 MOV42 INS14 INS74 INS59 MOV32 INS8 UPD42 INS42 UPD42 INS32 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS14 UPD43 INS32 UPD42 MOV42 INS86 INS42 INS42 INS54 MOV43 MOV43 MOV43 INS32 MOV43 INS76 INS42 MOV32 MOV60 MOV25 INS60 INS25 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS74 INS1 UPD42 INS42 UPD42 MOV42 MOV42 INS34 INS59 INS38 MOV43 INS58 INS58 INS8 INS42 INS42 INS42 MOV43 MOV43 INS43 INS59 INS32 INS8 MOV32 MOV45 INS43 INS43 INS31 INS31 UPD42 UPD42 INS42 INS32 UPD42 MOV43 MOV59 MOV43 MOV59 MOV60 MOV61 MOV21 MOV32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV21 MOV21 UPD42 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 MOV43 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 UPD43 MOV43 MOV42 INS43 INS42 INS42 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS25 INS41 UPD42 INS42 INS42 INS32 UPD42 UPD42 MOV32 INS42 UPD42 INS42 INS32 INS8 INS40 INS42 INS42 INS38 INS8 INS40 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 MOV21 MOV21 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL42 DEL43 DEL32 DEL27 DEL14 DEL44 DEL42 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL45 DEL14 DEL60 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL42 DEL32 DEL9 DEL8 DEL25 DEL9 DEL41 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL14 DEL32 DEL59 DEL60 DEL42 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL11 DEL42 DEL43 DEL42 DEL14 DEL36 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL14 DEL14 DEL14 DEL42 DEL59 DEL60 DEL59 DEL60 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL7 DEL21 DEL43 DEL42 DEL32 DEL14 DEL32 DEL32 DEL21 DEL8 DEL61 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31