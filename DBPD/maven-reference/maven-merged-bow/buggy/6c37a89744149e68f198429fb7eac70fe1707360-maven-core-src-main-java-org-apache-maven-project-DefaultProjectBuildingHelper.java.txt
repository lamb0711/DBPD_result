[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.HashSet;
-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.repository.DefaultRepositoryRequest;
-import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.artifact.resolver.ArtifactResolutionRequest;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ExclusionSetFilter;
+import org.sonatype.aether.artifact.Artifact;
+import org.sonatype.aether.graph.DependencyFilter;
+import org.sonatype.aether.graph.DependencyNode;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.util.filter.ExclusionsDependencyFilter;
+import org.sonatype.aether.util.graph.PreorderNodeListGenerator;
- * technical reasons, it is not part of the public API. In particular, this interface can be changed or deleted without
+ * technical reasons, it is not part of the public API. In particular, this class can be changed or deleted without
+        Collection<String> repoIds = new HashSet<String>();
+            repoIds.add( repository.getId() );
-            artifactRepositories.addAll( externalRepositories );
+            for ( ArtifactRepository repository : externalRepositories )
+            {
+                if ( repoIds.add( repository.getId() ) )
+                {
+                    artifactRepositories.add( repository );
+                }
+            }
-        RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();
-        repositoryRequest.setCache( request.getRepositoryCache() );
-        repositoryRequest.setLocalRepository( request.getLocalRepository() );
-        repositoryRequest.setRemoteRepositories( project.getPluginArtifactRepositories() );
-        repositoryRequest.setOffline( request.isOffline() );
-        repositoryRequest.setForceUpdate( request.isForceUpdate() );
-        repositoryRequest.setTransferListener( request.getTransferListener() );
-
-                PluginVersionRequest versionRequest = new DefaultPluginVersionRequest( plugin, repositoryRequest );
+                PluginVersionRequest versionRequest =
+                    new DefaultPluginVersionRequest( plugin, request.getRepositorySession(),
+                                                     project.getRemotePluginRepositories() );
-            PluginArtifactsCache.CacheRecord recordArtifacts =
-                pluginArtifactsCache.get( plugin, repositoryRequest, null );
+            PluginArtifactsCache.Key cacheKey =
+                pluginArtifactsCache.createKey( plugin, null, project.getRemotePluginRepositories(),
+                                                request.getRepositorySession() );
+
+            PluginArtifactsCache.CacheRecord recordArtifacts = pluginArtifactsCache.get( cacheKey );
-                artifacts = resolveExtensionArtifacts( plugin, repositoryRequest, request );
+                artifacts = resolveExtensionArtifacts( plugin, project.getRemotePluginRepositories(), request );
-                recordArtifacts = pluginArtifactsCache.put( plugin, repositoryRequest, null, artifacts );
+                recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );
-            ArtifactFilter extensionArtifactFilter = null;
+            DependencyFilter extensionArtifactFilter = null;
-                extensionArtifactFilter = new ExclusionSetFilter( exclusions );
+                extensionArtifactFilter = new ExclusionsDependencyFilter( exclusions );
-    private List<Artifact> resolveExtensionArtifacts( Plugin extensionPlugin, RepositoryRequest repositoryRequest,
+    private List<Artifact> resolveExtensionArtifacts( Plugin extensionPlugin, List<RemoteRepository> repositories,
-        ArtifactResolutionRequest artifactRequest = new ArtifactResolutionRequest( repositoryRequest );
-        artifactRequest.setServers( request.getServers() );
-        artifactRequest.setMirrors( request.getMirrors() );
-        artifactRequest.setProxies( request.getProxies() );
+        DependencyNode root =
+            pluginDependenciesResolver.resolve( extensionPlugin, null, null, repositories,
+                                                request.getRepositorySession() );
-        return pluginDependenciesResolver.resolve( extensionPlugin, null, artifactRequest, null );
+        PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();
+        root.accept( nlg );
+        return nlg.getArtifacts( false );

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD66 INS60 INS25 INS74 UPD42 INS60 INS60 INS74 INS59 MOV27 INS8 INS43 INS43 UPD43 MOV43 INS59 INS43 INS59 INS43 INS43 INS42 INS14 INS21 INS70 INS60 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 INS32 INS42 INS42 INS14 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS9 INS42 INS42 INS74 INS32 INS44 INS42 INS8 INS43 MOV43 INS59 UPD43 INS42 INS42 UPD42 MOV42 INS33 INS33 UPD42 MOV42 MOV32 INS43 INS43 INS43 INS42 INS42 INS32 INS43 INS42 MOV25 INS40 UPD42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 INS32 UPD42 UPD43 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL33 DEL42 DEL33 DEL43 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL33 DEL33