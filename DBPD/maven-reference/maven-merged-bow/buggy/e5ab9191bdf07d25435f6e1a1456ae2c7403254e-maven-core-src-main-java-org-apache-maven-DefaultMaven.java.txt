PR: MNG-191
collect proejcts and modules first, then execute reactor


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163563 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.execution.DefaultMavenExecutionRequest;
-import org.apache.maven.lifecycle.GoalNotFoundException;
-    
+
-        throws GoalNotFoundException, Exception
+        throws ReactorException
-            List projects = new ArrayList();
+            List projects;
-                List files = request.getProjectFiles();
-
-                for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
-                {
-                    File file = (File) iterator.next();
-
-                    MavenProject project = getProject( file, request.getLocalRepository() );
-
-                    projects.add( project );
-                }
+                projects = collectProjects( request.getFiles(), request.getLocalRepository() );
-                    boolean isPom = "pom".equals( project.getPackaging() );
-                    if ( isPom )
+                    List goals;
+                    if ( "pom".equals( project.getPackaging() ) )
-                        MavenExecutionResponse response = processProject( request, project, dispatcher,
-                                                                          Collections.singletonList( "pom:install" ) );
-                        if ( response.isExecutionFailure() )
-                        {
-                            return response;
-                        }
+                        goals = Collections.singletonList( "pom:install" );
+                    }
+                    else
+                    {
+                        goals = request.getGoals();
-                    if ( project.getModules() != null && !project.getModules().isEmpty() )
+                    MavenExecutionResponse response = processProject( request, project, dispatcher, goals );
+                    if ( response.isExecutionFailure() )
-                        String includes = StringUtils.join( project.getModules().iterator(), "/pom.xml," ) + "/pom.xml";
-
-                        File baseDir = project.getFile().getParentFile();
-
-                        MavenExecutionRequest reactorRequest = new DefaultMavenExecutionRequest(
-                            request.getLocalRepository(),
-                            request.getUserModel(),
-                            request.getEventDispatcher(),
-                            request.getGoals(),
-                            FileUtils.getFiles( baseDir, includes, null ),
-                            baseDir.getPath() );
-
-                        MavenExecutionResponse response = execute( reactorRequest );
-
-                        if ( response != null && response.isExecutionFailure() )
-                        {
-                            return response;
-                        }
-                    }
-
-                    if ( !isPom )
-                    {
-                        MavenExecutionResponse response = processProject( request, project, dispatcher,
-                                                                          request.getGoals() );
-
-                        if ( response.isExecutionFailure() )
-                        {
-                            return response;
-                        }
+                        return response;
+    private List collectProjects( List files, ArtifactRepository localRepository )
+        throws ProjectBuildingException, ReactorException, IOException
+    {
+        List projects = new ArrayList( files.size() );
+
+        for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
+        {
+            File file = (File) iterator.next();
+
+            MavenProject project = getProject( file, localRepository );
+
+            if ( project.getModules() != null && !project.getModules().isEmpty() )
+            {
+                project.setPackaging( "pom" );
+
+                String includes = StringUtils.join( project.getModules().iterator(), "/pom.xml," ) + "/pom.xml";
+
+                if ( includes.indexOf( ".." ) >= 0 )
+                {
+                    throw new ReactorException( "Modules may not include '..'" );
+                }
+
+                List moduleFiles = FileUtils.getFiles( project.getFile().getParentFile(), includes, null );
+                projects.addAll( collectProjects( moduleFiles, localRepository ) );
+            }
+            projects.add( project );
+        }
+
+        return projects;
+    }
+
-        
+

INS31 UPD43 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS8 UPD42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 MOV60 INS24 INS41 INS42 INS42 MOV58 MOV32 INS8 INS42 INS60 MOV60 INS60 MOV25 MOV21 MOV43 INS59 INS32 MOV43 INS59 INS42 INS21 INS42 INS42 INS42 INS32 INS21 INS25 INS21 INS7 INS42 INS42 INS42 INS32 INS27 INS8 UPD43 INS32 INS42 MOV32 MOV60 MOV25 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS34 INS53 UPD42 UPD42 INS32 INS42 UPD42 MOV42 INS32 UPD42 INS32 INS43 MOV32 INS8 MOV43 UPD42 MOV42 UPD42 MOV42 INS45 INS14 INS42 INS42 MOV32 INS42 INS33 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 INS21 INS21 INS43 INS45 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 INS42 MOV32 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL8 DEL24 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL42 DEL38 DEL42 DEL42 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL33 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL27 DEL42 DEL41 DEL8 DEL25