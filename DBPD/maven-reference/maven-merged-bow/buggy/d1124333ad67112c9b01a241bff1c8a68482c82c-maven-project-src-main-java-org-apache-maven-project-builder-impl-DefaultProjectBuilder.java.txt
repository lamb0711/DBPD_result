Merge: sisbell-plugin-manager. MNG-3631 - Get plugin config, including mojo descriptor info.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@739970 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Arrays;
+import org.apache.maven.model.Plugin;
-import org.apache.maven.project.builder.ArtifactModelContainerFactory;
-import org.apache.maven.project.builder.IdModelContainerFactory;
-import org.apache.maven.project.builder.PomArtifactResolver;
-import org.apache.maven.project.builder.PomClassicDomainModel;
-import org.apache.maven.project.builder.PomClassicDomainModelFactory;
-import org.apache.maven.project.builder.PomClassicTransformer;
-import org.apache.maven.project.builder.PomTransformer;
-import org.apache.maven.project.builder.ProjectBuilder;
-import org.apache.maven.shared.model.DomainModel;
-import org.apache.maven.shared.model.InterpolatorProperty;
-import org.apache.maven.shared.model.ModelEventListener;
-import org.apache.maven.shared.model.ModelTransformerContext;
+import org.apache.maven.project.builder.*;
+import org.apache.maven.shared.model.*;
+import org.apache.maven.shared.model.impl.DefaultModelDataSource;
+import org.codehaus.plexus.configuration.PlexusConfiguration;
+import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
+import org.apache.maven.shared.model.ModelMarshaller;
-    implements ProjectBuilder, LogEnabled
+    implements ProjectBuilder, Mixer, LogEnabled
-    }        
+    }
+
+    public Model mixPlugin(Plugin plugin, Model model) throws IOException
+    {
+        //TODO - interpolation
+        List<DomainModel> domainModels = new ArrayList<DomainModel>();
+        domainModels.add( new PluginMixin(plugin) );
+        domainModels.add( new PomClassicDomainModel(model) );
+
+        PomClassicTransformer transformer = new PomClassicTransformer( new PomClassicDomainModelFactory() );
+
+        ModelTransformerContext ctx = new ModelTransformerContext(PomTransformer.MODEL_CONTAINER_INFOS );
+
+        PomClassicDomainModel transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( domainModels,
+                                                                                                transformer,
+                                                                                                transformer,
+                                                                                                Collections.EMPTY_LIST,
+                                                                                                null,
+                                                                                                listeners ) );
+        return transformedDomainModel.getModel();
+      //  List<ModelProperty> pluginProperties = ModelMarshaller.marshallXmlToModelProperties(
+      //          (new PluginMixin(plugin)).getInputStream(), ProjectUri.Build.Plugins.xUri, null);
+        
+    }
+
+    public PlexusConfiguration mixPluginAndReturnConfig(Plugin plugin, Model model) throws IOException
+    {
+        List<DomainModel> domainModels = new ArrayList<DomainModel>();
+        domainModels.add( new PluginMixin(plugin) );
+        domainModels.add( new PomClassicDomainModel(model) );
+
+        PomClassicTransformer transformer = new PomClassicTransformer( new PomClassicDomainModelFactory() );
+
+        ModelTransformerContext ctx = new ModelTransformerContext(PomTransformer.MODEL_CONTAINER_INFOS );
+
+        PomClassicDomainModel transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( domainModels,
+                                                                                                transformer,
+                                                                                                transformer,
+                                                                                                Collections.EMPTY_LIST,
+                                                                                                null,
+                                                                                                listeners ) );
+        ModelDataSource source =
+                new DefaultModelDataSource(transformedDomainModel.getModelProperties(), PomTransformer.MODEL_CONTAINER_FACTORIES);
+        for(ModelContainer pluginContainer : source.queryFor(ProjectUri.Build.Plugins.Plugin.xUri))
+        {
+            if(matchesIdOfPlugin(pluginContainer, plugin))
+            {
+                List<ModelProperty> config = new ArrayList<ModelProperty>();
+                for(ModelProperty mp : pluginContainer.getProperties())
+                {
+                    if(mp.getUri().startsWith(ProjectUri.Build.Plugins.Plugin.configuration))
+                    {
+                        config.add(mp);
+                    }
+                }
+                return new XmlPlexusConfiguration(ModelMarshaller.unmarshalModelPropertiesToXml(config, ProjectUri.Build.Plugins.Plugin.xUri));
+
+            }
+        }
+        return null;       
+    }
+
+    private static boolean matchesIdOfPlugin(ModelContainer mc, Plugin plugin)
+    {   
+        List<ModelProperty> props = mc.getProperties();
+        return getValueByUri(ProjectUri.Build.Plugins.Plugin.groupId, props).equals(plugin.getGroupId())
+                && getValueByUri(ProjectUri.Build.Plugins.Plugin.artifactId, props).equals(plugin.getArtifactId())
+                && getValueByUri(ProjectUri.Build.Plugins.Plugin.version, props).equals(plugin.getVersion());
+    }
+
+    private static String getValueByUri(String uri, List<ModelProperty> modelProperties)
+    {
+        for(ModelProperty mp : modelProperties)
+        {
+            if(mp.getUri().equals(uri))
+            {
+                return mp.getResolvedValue();
+            }
+        }
+        return "";
+    }

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS43 INS31 INS31 INS31 INS31 INS42 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS60 INS60 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS60 INS60 INS60 INS60 INS70 INS41 INS43 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS74 INS42 INS70 INS41 INS42 INS42 INS74 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS74 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS44 INS32 INS8 INS33 INS42 INS42 INS74 INS59 INS27 INS42 INS43 INS43 INS44 INS42 INS8 INS45 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS36 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS36 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS40 INS25 INS43 INS43 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS43 INS42 INS25 INS42 INS42 INS74 INS43 INS42 INS43 INS42 INS43 INS14 INS43 INS40 INS11 INS42 INS42 INS74 INS43 INS42 INS43 INS42 INS43 INS14 INS43 INS40 INS11 INS43 INS32 INS40 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS8 INS43 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS43 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS70 INS41 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS33 INS42 INS74 INS59 INS44 INS32 INS8 INS14 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS25 INS43 INS32 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS40 INS43 INS43 INS32 INS42 INS40 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26