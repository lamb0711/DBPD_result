o restoring auth


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@794767 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import java.util.HashMap;
+import org.apache.maven.artifact.repository.Authentication;
-@Component( role = RepositorySystem.class, hint = "default" )
+@Component(role = RepositorySystem.class, hint = "default")
+    private Map<String,ArtifactRepositoryLayout> layouts;
+    
+    @Requirement
-    
+
-        Artifact artifact =
-            artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),
-                                                      d.getClassifier(), d.getScope(), d.isOptional() );
+        Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), d.isOptional() );
-    public ArtifactRepository buildArtifactRepository( Repository repo )
-        throws InvalidRepositoryException
-    {
-        if ( repo != null )
-        {
-            String id = repo.getId();
-            
-            String url = repo.getUrl();
-            
-            ArtifactRepositoryPolicy snapshots = buildArtifactRepositoryPolicy( repo.getSnapshots() );
-
-            ArtifactRepositoryPolicy releases = buildArtifactRepositoryPolicy( repo.getReleases() );
-
-            return artifactRepositoryFactory.createArtifactRepository( id, url, repo.getLayout(), snapshots, releases );
-        }
-        else
-        {
-            return null;
-        }
-    }
-
-    
+
-    
+
-        return createRepository( "file://" + localRepository.toURI().getRawPath(),
-                                 RepositorySystem.DEFAULT_LOCAL_REPO_ID, true,
-                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true,
-                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,
-                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE );
+        return createRepository( "file://" + localRepository.toURI().getRawPath(), RepositorySystem.DEFAULT_LOCAL_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE );
-        return createRepository( RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID,
-                                 true, ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER, false,
-                                 ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY,
-                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
+        return createRepository( RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER, false,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
-    
+
-        return createRepository( canonicalFileUrl( url ), repositoryId, true,
-                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true,
-                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,
+        return createRepository( canonicalFileUrl( url ), repositoryId, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,
-    private ArtifactRepository createRepository( String url, String repositoryId, boolean releases,
-                                                 String releaseUpdates, boolean snapshots, String snapshotUpdates,
-                                                 String checksumPolicy )
-    {
-        ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy( snapshots, snapshotUpdates, checksumPolicy );
-
-        ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy( releases, releaseUpdates, checksumPolicy );
-
-        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout, snapshotsPolicy, releasesPolicy );
-    }
-
-    public ArtifactRepository createArtifactRepository( String id, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases )
-    {
-        return artifactRepositoryFactory.createArtifactRepository( id, url, repositoryLayout, snapshots, releases );
-    }
-    
-    /*
-    public void addAuthenticationInfo( String repositoryId, String username, String password, String privateKey, String passphrase )
-    {
-        AuthenticationInfo authInfo = new AuthenticationInfo();
-        authInfo.setUserName( username );
-        authInfo.setPassword( password );
-        authInfo.setPrivateKey( privateKey );
-        authInfo.setPassphrase( passphrase );
-
-        authenticationInfoMap.put( repositoryId, authInfo );
-
-        wagonManager.addAuthenticationInfo( repositoryId, username, password, privateKey, passphrase );
-    }
-    */
-
-
-            List<ArtifactRepositoryPolicy> releasePolicies =
-                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );
+            List<ArtifactRepositoryPolicy> releasePolicies = new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );
-            List<ArtifactRepositoryPolicy> snapshotPolicies =
-                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );
+            List<ArtifactRepositoryPolicy> snapshotPolicies = new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );
-            ArtifactRepository effectiveRepository =
-                artifactRepositoryFactory.createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(),
-                                                                    aliasedRepo.getLayout(), snapshotPolicy,
-                                                                    releasePolicy );
+            ArtifactRepository effectiveRepository = 
+                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(), snapshotPolicy, releasePolicy );
-                effectivePolicy =
-                    new ArtifactRepositoryPolicy( policy.isEnabled(), policy.getUpdatePolicy(),
-                                                  policy.getChecksumPolicy() );
+                effectivePolicy = new ArtifactRepositoryPolicy( policy.isEnabled(), policy.getUpdatePolicy(), policy.getChecksumPolicy() );
-//      ArtifactResolutionResult collect( Set<Artifact> artifacts,
-//      Artifact originatingArtifact,
-//      Map managedVersions,
-//      ArtifactRepository localRepository,
-//      List<ArtifactRepository> remoteRepositories,
-//      ArtifactMetadataSource source,
-//      ArtifactFilter filter,
-//      List<ResolutionListener> listeners,
-//      List<ConflictResolver> conflictResolvers )
-        
-//        ArtifactResolutionResult result = artifactCollector.
+        //      ArtifactResolutionResult collect( Set<Artifact> artifacts,
+        //      Artifact originatingArtifact,
+        //      Map managedVersions,
+        //      ArtifactRepository localRepository,
+        //      List<ArtifactRepository> remoteRepositories,
+        //      ArtifactMetadataSource source,
+        //      ArtifactFilter filter,
+        //      List<ResolutionListener> listeners,
+        //      List<ConflictResolver> conflictResolvers )
+
+        //        ArtifactResolutionResult result = artifactCollector.
+
+    private Map<String, Authentication> authentications = new HashMap<String, Authentication>();
+
+    //
+    // serverId = repository id
+    //
+    public void addAuthenticationForArtifactRepository( String repositoryId, String username, String password )
+    {
+        Authentication authentication = new Authentication( username, password );
+        authentications.put( repositoryId, authentication );
+    }
+
+    //
+    // Artifact Repository Creation
+    //
+    public ArtifactRepository buildArtifactRepository( Repository repo )
+        throws InvalidRepositoryException
+    {        
+        if ( repo != null )
+        {
+            String id = repo.getId();
+
+            String url = repo.getUrl();
+
+            ArtifactRepositoryPolicy snapshots = buildArtifactRepositoryPolicy( repo.getSnapshots() );
+
+            ArtifactRepositoryPolicy releases = buildArtifactRepositoryPolicy( repo.getReleases() );
+            
+            return createArtifactRepository( id, url, layouts.get( repo.getLayout() ), snapshots, releases );
+        }
+        else
+        {
+            return null;
+        }
+    }
+    
+    private ArtifactRepository createRepository( String url, String repositoryId, boolean releases, String releaseUpdates, boolean snapshots, String snapshotUpdates, String checksumPolicy )
+    {
+        ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy( snapshots, snapshotUpdates, checksumPolicy );
+
+        ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy( releases, releaseUpdates, checksumPolicy );
+
+        return createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout, snapshotsPolicy, releasesPolicy );
+    }
+
+    public ArtifactRepository createArtifactRepository( String repositoryId, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases )
+    {        
+        if ( repositoryLayout == null )
+        {
+            repositoryLayout = defaultArtifactRepositoryLayout;
+        }
+             
+        ArtifactRepository artifactRepository = artifactRepositoryFactory.createArtifactRepository( repositoryId, url, repositoryLayout, snapshots, releases );
+
+        Authentication authentication = authentications.get( repositoryId );
+        
+        if ( authentication != null )
+        {
+            artifactRepository.setAuthentication( authentication );
+        }
+        
+        return artifactRepository;
+    }   

INS26 INS26 MOV31 MOV31 MOV31 INS40 INS40 INS23 INS23 INS31 INS78 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS39 INS42 INS44 MOV44 INS44 INS8 INS44 INS42 INS43 INS43 INS43 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS42 UPD42 INS43 INS42 INS60 INS21 INS43 INS42 INS25 INS60 INS60 INS25 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS43 INS59 INS32 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS43 INS43 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS7 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 DEL42 DEL42 DEL42 DEL32 DEL41