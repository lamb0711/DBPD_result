o Introduced listener to track lifecycle events

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@804940 13f79535-47bb-0310-9956-ffa450edef68

- package org.apache.maven.lifecycle;
+package org.apache.maven.lifecycle;
-    
+
+    private void fireEvent( MavenSession session, MojoExecution mojoExecution, LifecycleEventCatapult catapult )
+    {
+        List<LifecycleListener> listeners = session.getRequest().getLifecycleListeners();
+
+        if ( !listeners.isEmpty() )
+        {
+            LifecycleEvent event = new DefaultLifecycleEvent( session, mojoExecution );
+
+            for ( LifecycleListener listener : listeners )
+            {
+                catapult.fire( listener, event );
+            }
+        }
+    }
+
+        fireEvent( session, null, LifecycleEventCatapult.SESSION_STARTED );
-            if ( session.isBlackListed( currentProject ) )
-            {
-                logger.info( "Skipping " + currentProject.getName() );
-                logger.info( "This project has been banned from the build due to previous failures." );
-
-                continue;
-            }
-
-            logger.info( "Building " + currentProject.getName() );
-
+                if ( session.isBlackListed( currentProject ) )
+                {
+                    fireEvent( session, null, LifecycleEventCatapult.PROJECT_SKIPPED );
+
+                    logger.info( "Skipping " + currentProject.getName() );
+                    logger.info( "This project has been banned from the build due to previous failures." );
+
+                    continue;
+                }
+
+                fireEvent( session, null, LifecycleEventCatapult.PROJECT_STARTED );
+
+                logger.info( "Building " + currentProject.getName() );
+
+
+                fireEvent( session, null, LifecycleEventCatapult.PROJECT_SUCCEEDED );
+                fireEvent( session, null, LifecycleEventCatapult.PROJECT_FAILED );
+
-        }        
-    }        
+        }
+
+        fireEvent( session, null, LifecycleEventCatapult.SESSION_ENDED );
+    }
+                fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_SKIPPED );
+
-            if ( logger.isDebugEnabled() )
-            {
-                logger.debug( "Forking execution for " + mojoDescriptor.getId() );
-            }
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.FORK_STARTED );
-            executionProject = project.clone();
-
-            session.setCurrentProject( executionProject );
-                for ( MojoExecution forkedExecution : forkedExecutions )
+                if ( logger.isDebugEnabled() )
-                    execute( executionProject, session, forkedExecution );
+                    logger.debug( "Forking execution for " + mojoDescriptor.getId() );
+                }
+
+                executionProject = project.clone();
+
+                session.setCurrentProject( executionProject );
+                try
+                {
+                    for ( MojoExecution forkedExecution : forkedExecutions )
+                    {
+                        execute( executionProject, session, forkedExecution );
+                    }
+                }
+                finally
+                {
+                    session.setCurrentProject( project );
+                }
+
+                fireEvent( session, mojoExecution, LifecycleEventCatapult.FORK_SUCCEEDED );
+
+                if ( logger.isDebugEnabled() )
+                {
+                    logger.debug( "Completed forked execution for " + mojoDescriptor.getId() );
-            finally
+            catch ( MojoFailureException e )
-                session.setCurrentProject( project );
-            }
+                fireEvent( session, mojoExecution, LifecycleEventCatapult.FORK_FAILED );
-            if ( logger.isDebugEnabled() )
+                throw e;
+            }
+            catch ( MojoExecutionException e )
-                logger.debug( "Completed forked execution for " + mojoDescriptor.getId() );
+                fireEvent( session, mojoExecution, LifecycleEventCatapult.FORK_FAILED );
+
+                throw e;
+            }
+            catch ( PluginConfigurationException e )
+            {
+                fireEvent( session, mojoExecution, LifecycleEventCatapult.FORK_FAILED );
+
+                throw e;
+            }
+            catch ( PluginManagerException e )
+            {
+                fireEvent( session, mojoExecution, LifecycleEventCatapult.FORK_FAILED );
+
+                throw e;
-        project.setExecutionProject( executionProject );
+        fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_STARTED );
-        logger.info( executionDescription( mojoExecution, project ) );
+        try
+        {
+            project.setExecutionProject( executionProject );
-        pluginManager.executeMojo( session, mojoExecution );
+            logger.info( executionDescription( mojoExecution, project ) );
+
+            pluginManager.executeMojo( session, mojoExecution );
+
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_SUCCEEDED );
+        }
+        catch ( MojoFailureException e )
+        {
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
+
+            throw e;
+        }
+        catch ( MojoExecutionException e )
+        {
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
+
+            throw e;
+        }
+        catch ( PluginConfigurationException e )
+        {
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
+
+            throw e;
+        }
+        catch ( PluginManagerException e )
+        {
+            fireEvent( session, mojoExecution, LifecycleEventCatapult.MOJO_FAILED );
+
+            throw e;
+        }
-    }      
+    }
+
-    }   
+    }
-            }        
+            }
-    }        
+    }
-    }    
+    }
-        } 
+        }
-                }                
+                }
-                    }                                        
+                    }
-        }            
+        }
-    }  
+    }
-    }    
+    }
-    }    
+    }

INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS8 MOV21 MOV70 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS21 INS21 INS21 INS54 INS42 INS42 INS42 INS74 INS59 INS38 INS8 INS32 INS32 INS8 INS32 INS8 INS12 INS12 INS12 INS12 INS43 INS43 INS42 INS32 INS32 INS60 INS70 INS42 INS42 INS33 INS40 INS42 INS42 INS33 INS40 INS21 INS54 INS42 INS42 INS42 INS40 MOV21 MOV21 MOV21 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS44 INS42 INS8 INS32 MOV8 INS12 INS12 INS12 INS12 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS21 MOV25 INS21 MOV21 INS21 INS21 INS42 INS42 INS42 INS40 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS32 INS21 INS32 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS33 INS40 INS42 INS42 INS33 INS40 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS33 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS33 INS40