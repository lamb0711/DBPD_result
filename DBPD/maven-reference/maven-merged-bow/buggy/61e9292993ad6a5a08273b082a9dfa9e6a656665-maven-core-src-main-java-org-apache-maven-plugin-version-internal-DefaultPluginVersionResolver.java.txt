[MNG-4317] [regression] g:a level metadata is not properly processed when resolving plugin version

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@807140 13f79535-47bb-0310-9956-ffa450edef68

-        Throwable error = null;
+        Metadata mergedMetadata = new Metadata();
-        File artifactMetadataFile = null;
-
-        String localPath;
-
-        // TODO: we should cycle through the repositories but take the repository which actually
-        // satisfied the prefix.
+        // TODO: we should cycle through the repositories but take the repository which actually satisfied the prefix.
-            localPath =
-                request.getGroupId().replace( '.', '/' ) + "/" + request.getArtifactId() + "/maven-metadata-"
-                    + repository.getId() + ".xml";
+            String localPath = getLocalMetadataPath( request, repository );
-            artifactMetadataFile = new File( localRepository.getBasedir(), localPath );
+            File artifactMetadataFile = new File( localRepository.getBasedir(), localPath );
-            if ( !request.isOffline() && !artifactMetadataFile.exists() /* || user requests snapshot updates */)
+            if ( !request.isOffline() && ( !artifactMetadataFile.exists() /* || user requests snapshot updates */) )
-                String remotePath =
-                    request.getGroupId().replace( '.', '/' ) + "/" + request.getArtifactId() + "/maven-metadata.xml";
+                String remotePath = getRemoteMetadataPath( request, repository );
-                    error = e;
-
-            result.setRepository( repository );
-
-            break;
+            if ( mergeMetadata( mergedMetadata, artifactMetadataFile ) )
+            {
+                result.setRepository( repository );
+            }
-        if ( artifactMetadataFile == null || !artifactMetadataFile.exists() )
-            localPath =
-                request.getGroupId().replace( '.', '/' ) + "/" + request.getArtifactId() + "/maven-metadata-"
-                    + localRepository.getId() + ".xml";
+            String localPath = getLocalMetadataPath( request, localRepository );
-            artifactMetadataFile = new File( localRepository.getBasedir(), localPath );
+            File artifactMetadataFile = new File( localRepository.getBasedir(), localPath );
-            result.setRepository( localRepository );
+            if ( mergeMetadata( mergedMetadata, artifactMetadataFile ) )
+            {
+                result.setRepository( localRepository );
+            }
-        if ( artifactMetadataFile.exists() )
+        if ( mergedMetadata.getVersioning() != null )
-            logger.debug( "Extracting version for plugin " + request.getGroupId() + ':' + request.getArtifactId()
-                + " from " + artifactMetadataFile );
+            String release = mergedMetadata.getVersioning().getRelease();
-            try
+            if ( StringUtils.isNotEmpty( release ) )
-                Metadata pluginMetadata = readMetadata( artifactMetadataFile );
+                result.setVersion( release );
+            }
+            else
+            {
+                String latest = mergedMetadata.getVersioning().getLatest();
-                if ( pluginMetadata.getVersioning() != null )
+                if ( StringUtils.isNotEmpty( latest ) )
-                    String release = pluginMetadata.getVersioning().getRelease();
-
-                    if ( StringUtils.isNotEmpty( release ) )
-                    {
-                        result.setVersion( release );
-                    }
-                    else
-                    {
-                        String latest = pluginMetadata.getVersioning().getLatest();
-
-                        if ( StringUtils.isNotEmpty( latest ) )
-                        {
-                            result.setVersion( latest );
-                        }
-                    }
+                    result.setVersion( latest );
-            catch ( RepositoryMetadataReadException e )
-            {
-                throw new PluginVersionResolutionException( request.getGroupId(), request.getArtifactId(),
-                                                            e.getMessage(), e );
-            }
-        }
-        else if ( error != null )
-        {
-            throw new PluginVersionResolutionException( request.getGroupId(), request.getArtifactId(),
-                                                        error.getMessage(), error );
+    private String getLocalMetadataPath( PluginVersionRequest request, ArtifactRepository repository )
+    {
+        return request.getGroupId().replace( '.', '/' ) + '/' + request.getArtifactId() + "/maven-metadata-"
+            + repository.getId() + ".xml";
+    }
+
+    private String getRemoteMetadataPath( PluginVersionRequest request, ArtifactRepository repository )
+    {
+        return request.getGroupId().replace( '.', '/' ) + '/' + request.getArtifactId() + "/maven-metadata.xml";
+    }
+
+    private boolean mergeMetadata( Metadata target, File metadataFile )
+    {
+        if ( metadataFile.isFile() )
+        {
+            try
+            {
+                Metadata repoMetadata = readMetadata( metadataFile );
+
+                return mergeMetadata( target, repoMetadata );
+            }
+            catch ( RepositoryMetadataReadException e )
+            {
+                if ( logger.isDebugEnabled() )
+                {
+                    logger.warn( "Failed to read metadata " + metadataFile + ": " + e.getMessage(), e );
+                }
+                else
+                {
+                    logger.warn( "Failed to read metadata " + metadataFile + ": " + e.getMessage() );
+                }
+            }
+        }
+
+        return false;
+    }
+
+    private boolean mergeMetadata( Metadata target, Metadata source )
+    {
+        return target.merge( source );
+    }
+

INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 MOV8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS8 MOV25 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS41 MOV43 INS42 INS43 INS42 INS25 INS41 INS43 INS42 INS43 INS42 INS41 UPD43 INS60 MOV60 INS25 INS42 INS42 MOV27 INS42 INS42 MOV27 INS42 INS32 INS8 INS9 INS42 INS42 INS32 UPD42 UPD42 INS14 INS60 INS60 INS25 INS43 INS59 INS43 INS59 INS32 MOV8 INS13 INS13 MOV32 UPD45 INS42 INS42 INS54 INS42 INS42 INS42 INS43 MOV43 INS59 MOV43 INS59 INS32 INS8 INS42 MOV42 INS32 INS42 INS42 MOV14 INS42 UPD42 MOV42 UPD42 MOV42 MOV21 UPD42 MOV43 MOV42 MOV42 INS8 INS12 INS42 INS42 INS32 INS42 MOV14 INS36 INS42 INS42 INS42 MOV21 UPD42 MOV42 MOV42 UPD42 MOV42 INS60 INS41 MOV44 INS8 INS42 INS42 INS42 MOV38 MOV43 INS43 INS59 INS32 INS25 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS8 INS8 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS21 INS21 UPD42 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS45 INS42 INS45 MOV32 INS45 INS42 INS45 INS32 INS42 INS42 DEL33 DEL42 DEL33 DEL59 DEL60 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL32 DEL13 DEL13 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL42 DEL7 DEL21 DEL10 DEL42 DEL42 DEL42 DEL32 DEL59 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL13 DEL32 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL27 DEL25 DEL25 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21