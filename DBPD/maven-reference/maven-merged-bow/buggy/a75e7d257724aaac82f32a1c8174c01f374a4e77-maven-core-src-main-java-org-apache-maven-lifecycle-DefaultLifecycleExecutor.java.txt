improved error handling and other clean up


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163979 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-        Map phaseMap = new HashMap();
-
-        for ( Iterator i = phases.iterator(); i.hasNext(); )
-        {
-            Phase p = (Phase) i.next();
-
-            // Make a copy of the phase as we will modify it
-            phaseMap.put( p.getId(), new Phase( p ) );
-        }
-
-            MavenProject project = session.getProject();
-
-            ArtifactHandler artifactHandler = artifactHandlerManager.getArtifactHandler( project.getPackaging() );
-
-            if ( artifactHandler != null )
-            {
-                if ( artifactHandler.packageGoal() != null )
-                {
-                    verifyMojoPhase( artifactHandler.packageGoal(), session, phaseMap );
-                }
-
-                if ( artifactHandler.additionalPlugin() != null )
-                {
-                    String additionalPluginGroupId = PluginDescriptor.getDefaultPluginGroupId();
-
-                    String additionalPluginArtifactId = PluginDescriptor.getDefaultPluginArtifactId(
-                        artifactHandler.additionalPlugin() );
-
-                    injectHandlerPluginConfiguration( project, additionalPluginGroupId, additionalPluginArtifactId );
-                }
-            }
-
-            processPluginConfiguration( session.getProject(), session, phaseMap );
-
-            for ( Iterator i = tasks.iterator(); i.hasNext(); )
-            {
-                String task = (String) i.next();
-
-                processGoalChain( task, session, phaseMap );
-
-                if ( phaseMap.containsKey( task ) )
-                {
-                    executePhase( task, session, phaseMap );
-                }
-                else
-                {
-                    executeMojo( task, session );
-                }
-            }
+            processGoals( session, tasks );
+        catch ( ArtifactResolutionException e )
+        {
+            response.setException( e );
+        }
+    private void processGoals( MavenSession session, List tasks )
+        throws ArtifactHandlerNotFoundException, LifecycleExecutionException, PluginNotFoundException,
+        PluginExecutionException, ArtifactResolutionException
+    {
+        Map phaseMap = new HashMap();
+
+        for ( Iterator i = phases.iterator(); i.hasNext(); )
+        {
+            Phase p = (Phase) i.next();
+
+            // Make a copy of the phase as we will modify it
+            phaseMap.put( p.getId(), new Phase( p ) );
+        }
+
+        MavenProject project = session.getProject();
+
+        ArtifactHandler artifactHandler = artifactHandlerManager.getArtifactHandler( project.getPackaging() );
+
+        if ( artifactHandler != null )
+        {
+            if ( artifactHandler.packageGoal() != null )
+            {
+                verifyMojoPhase( artifactHandler.packageGoal(), session, phaseMap );
+            }
+
+            if ( artifactHandler.additionalPlugin() != null )
+            {
+                String additionalPluginGroupId = PluginDescriptor.getDefaultPluginGroupId();
+
+                String additionalPluginArtifactId = PluginDescriptor.getDefaultPluginArtifactId(
+                    artifactHandler.additionalPlugin() );
+
+                injectHandlerPluginConfiguration( project, additionalPluginGroupId, additionalPluginArtifactId );
+            }
+        }
+
+        processPluginConfiguration( session.getProject(), session, phaseMap );
+
+        for ( Iterator i = tasks.iterator(); i.hasNext(); )
+        {
+            String task = (String) i.next();
+
+            processGoalChain( task, session, phaseMap );
+
+            try
+            {
+                if ( phaseMap.containsKey( task ) )
+                {
+                    executePhase( task, session, phaseMap );
+                }
+                else
+                {
+                    executeMojo( task, session );
+                }
+            }
+            catch ( PluginManagerException e )
+            {
+                throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+            }
+        }
+    }
+
-        throws PluginExecutionException, PluginNotFoundException
+        throws PluginExecutionException, PluginNotFoundException, PluginManagerException, ArtifactResolutionException
+            catch ( PluginManagerException e )
+            {
+                dispatcher.dispatchError( event, p.getId(), e );
+                throw e;
+            }
+            catch ( ArtifactResolutionException e )
+            {
+                dispatcher.dispatchError( event, p.getId(), e );
+                throw e;
+            }
-        throws PluginExecutionException, PluginNotFoundException
+        throws PluginExecutionException, PluginNotFoundException, PluginManagerException, ArtifactResolutionException

INS26 INS40 INS31 MOV44 MOV29 INS83 MOV43 INS42 INS44 INS44 INS43 INS8 UPD83 INS39 INS42 INS43 INS43 INS43 INS43 MOV8 INS43 INS43 INS43 INS43 INS43 INS42 INS43 INS42 INS42 MOV60 MOV21 INS54 MOV41 INS42 INS42 INS42 INS42 MOV60 MOV24 INS42 INS42 INS42 INS42 INS42 INS42 INS8 MOV12 MOV12 MOV12 INS12 MOV8 INS21 INS44 INS8 INS54 INS32 INS43 INS42 INS21 INS8 INS12 INS12 INS12 INS42 INS42 INS42 INS42 INS32 MOV25 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS43 INS42 INS53 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS14 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL54 DEL8