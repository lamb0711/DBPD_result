Updated model processors.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@752990 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.PluginExecution;
-import org.codehaus.plexus.util.xml.Xpp3DomBuilder;
-import org.codehaus.plexus.util.xml.Xpp3DomUtils;
-    private static void copy(Plugin p1, Plugin p2)
+    private static void copy(Plugin source, Plugin target)
-        if(p2.getArtifactId() == null)
+        if(target.getArtifactId() == null)
-            p2.setArtifactId( p1.getArtifactId() );   
+            target.setArtifactId( source.getArtifactId() );   
-        if(p2.getGroupId() == null)
+        target.setGroupId( source.getGroupId() );    
+        
+        if(target.getInherited() == null)
-            p2.setGroupId( p1.getGroupId() );    
+            target.setInherited( source.getInherited() );    
-        if(p2.getInherited() == null)
+        if(target.getVersion() == null)
-            p2.setInherited( p1.getInherited() );    
+            target.setVersion( source.getVersion() );    
-        if(p2.getVersion() == null)
-        {
-            p2.setVersion( p1.getVersion() );    
-        }
-        if(p2.getDependencies().isEmpty())
+        for( PluginExecution pe : source.getExecutions())
-            DependenciesProcessor proc = new DependenciesProcessor();
-            proc.process( new ArrayList<Dependency>(), new ArrayList<Dependency>(p1.getDependencies()), p2.getDependencies(), false );            
+            PluginExecution idMatch = contains(pe, target.getExecutions());
+            if(idMatch != null)//Join
+            {
+               copyPluginExecution(pe, idMatch);    
+            }
+            else 
+            {
+                PluginExecution targetPe = new PluginExecution();
+                copyPluginExecution(pe, targetPe); 
+                target.addExecution( targetPe );
+            }
+            
+        }
+     
+        DependenciesProcessor proc = new DependenciesProcessor();
+        if(target.getDependencies().isEmpty())
+        {
+            
+            proc.process( new ArrayList<Dependency>(), new ArrayList<Dependency>(source.getDependencies()), target.getDependencies(), false );            
-            DependenciesProcessor proc = new DependenciesProcessor();
-            proc.process( new ArrayList<Dependency>(p1.getDependencies()), new ArrayList<Dependency>(), p2.getDependencies(), false );            
+            proc.process( new ArrayList<Dependency>(source.getDependencies()), new ArrayList<Dependency>(), target.getDependencies(), false );            
-        if(p1.getConfiguration() != null)
+        if(source.getConfiguration() != null)
-            if(p2.getConfiguration() != null)
+            if(target.getConfiguration() != null)
-                p2.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) p1.getConfiguration(), (Xpp3Dom) p2.getConfiguration() ));     
+                target.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) source.getConfiguration(), (Xpp3Dom) target.getConfiguration() ));     
-                p2.setConfiguration( p1.getConfiguration() );
+                target.setConfiguration( source.getConfiguration() );
-        //Executions
-        p2.setExtensions(p1.isExtensions());
+        target.setExtensions(source.isExtensions()); 
+    }
+    
+    private static PluginExecution contains(PluginExecution pe, List<PluginExecution> executions)
+    {
+        String executionId = (pe.getId() != null) ? pe.getId() : "";
+        for(PluginExecution e : executions)
+        {
+            String id = (e.getId() != null) ? e.getId() : "";
+            if(executionId.equals( id ))
+            {
+                return  e;
+            }
+        }
+        return null;
+    }
+    
+    private static void copyPluginExecution(PluginExecution source, PluginExecution target)
+    {
+        target.setId( source.getId() );
+        if(target.getInherited() == null)
+        {
+            target.setInherited( source.getInherited() );
+        }
+        if(target.getPhase() == null)
+        {
+            target.setPhase( source.getPhase() );
+        }
+        List<String> goals = new ArrayList<String>(target.getGoals());
+        for(String goal : source.getGoals())
+        {
+            if(!goals.contains( goal ))
+            {
+                goals.add( goal );    
+            }
+            
+        }    
+        target.setGoals( goals );
+        
+        if(target.getConfiguration() != null)
+        {
+            target.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) source.getConfiguration(), (Xpp3Dom) target.getConfiguration() ));     
+        }
+        else
+        {
+            target.setConfiguration( source.getConfiguration() );
+        }       

MOV26 UPD40 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 UPD42 MOV21 INS70 MOV60 INS42 INS43 INS42 INS74 INS42 INS60 INS70 INS41 INS43 INS42 INS43 INS42 INS21 INS25 INS25 INS60 INS70 INS21 INS25 INS44 INS32 INS8 INS42 INS43 INS43 INS43 INS59 INS44 INS42 INS8 INS33 INS42 INS42 INS32 INS27 INS8 INS27 INS8 INS74 INS59 INS44 INS32 INS8 INS32 INS27 INS8 INS8 UPD42 INS43 INS42 INS42 INS42 INS60 INS25 UPD42 INS42 INS42 INS42 INS42 INS16 INS43 INS42 INS60 INS25 INS42 INS42 INS32 INS32 INS33 INS21 INS32 INS33 INS21 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS32 INS33 INS21 INS21 UPD42 UPD42 UPD42 UPD42 INS42 INS43 INS59 INS27 INS8 INS8 UPD42 UPD42 UPD42 INS36 INS32 INS45 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS74 INS32 INS42 INS38 INS8 INS42 INS42 INS32 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS21 INS21 MOV14 MOV14 INS27 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS32 INS43 INS59 INS32 INS32 UPD42 UPD42 UPD42 INS32 INS33 INS36 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS43 UPD42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV43 INS42 INS42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL42 DEL32 DEL33 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60