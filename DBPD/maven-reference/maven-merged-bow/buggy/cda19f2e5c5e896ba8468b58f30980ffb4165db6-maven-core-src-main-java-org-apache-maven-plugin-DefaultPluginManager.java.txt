Resolving: MNG-494

o During addPlugin() only the plugin's artifact is resolved/added...just enough to get the plugin container to discover the pluginDescriptor.

o During getConfiguredMojo(), the rest of the plugin's artifacts will be transitively resolved and added to the plugin container (if this hasn't already been done). The deciding factor for attempting to complete the plugin container's artifact list is whether the only artifact in the pluginDescriptor's artifact list is the plugin artifact itself. If that makes sense.

It's a bit of black magic, but I think it'll work unless/until we find something more elegant. I'm abusing the container a little bit here, so it might be sensitive to plexus changes in future.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191582 13f79535-47bb-0310-9956-ffa450edef68

-                                          Settings settings, ArtifactRepository localRepository )
+                                         Settings settings, ArtifactRepository localRepository )
-                    "Error occurred in the artifact container attempting to download plugin " + groupId + ":" +
-                        artifactId, e );
+                                                  "Error occurred in the artifact container attempting to download plugin "
+                                                      + groupId + ":" + artifactId, e );
-                if (
-                    ( groupId == null || artifactId == null || version == null ||
-                        ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
-                            version.equals( e.getVersion() ) ) ) && "maven-plugin".equals( e.getType() ) )
+                if ( ( groupId == null || artifactId == null || version == null || ( groupId.equals( e.getGroupId() )
+                    && artifactId.equals( e.getArtifactId() ) && version.equals( e.getVersion() ) ) )
+                    && "maven-plugin".equals( e.getType() ) )
-                throw new PluginManagerException(
-                    "Internal configuration error while retrieving " + groupId + ":" + artifactId, e );
+                throw new PluginManagerException( "Internal configuration error while retrieving " + groupId + ":"
+                    + artifactId, e );
-                              ArtifactRepository localRepository )
+                             ArtifactRepository localRepository )
-        MavenProjectBuilder mavenProjectBuilder = null;
-        ArtifactFactory artifactFactory = null;
-            mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
-            artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
-            MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder,
-                                                                          artifactFactory );
+            artifactResolver.resolve( pluginArtifact, project.getRemoteArtifactRepositories(), localRepository );
-            ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections
-                .singleton( pluginArtifact ), project.getRemoteArtifactRepositories(), localRepository, metadataSource,
-                                              artifactFilter );
-
-            Map resolved = result.getArtifacts();
-
-            List files = new ArrayList();
-
-            for ( Iterator it = resolved.values().iterator(); it.hasNext(); )
-            {
-                Artifact artifact = (Artifact) it.next();
-
-                files.add( artifact.getFile() );
-            }
-
-            PlexusContainer child = container.createChildContainer( pluginKey, files, Collections.EMPTY_MAP,
-                                                                    Collections.singletonList( this ) );
+            PlexusContainer child = container.createChildContainer( pluginKey, Collections
+                .singletonList( pluginArtifact.getFile() ), Collections.EMPTY_MAP, Collections.singletonList( this ) );
-            ArtifactFilter distroProvidedFilter = new InversionArtifactFilter( artifactFilter );
-
-            ArtifactResolutionResult distroProvidedResult = artifactResolver.resolveTransitively( Collections
-                .singleton( pluginArtifact ), project.getRemoteArtifactRepositories(), localRepository, metadataSource,
-                                              distroProvidedFilter );
-
-            Map distroProvided = distroProvidedResult.getArtifacts();
-
-            List unfilteredArtifactList = new ArrayList( resolved.size() + distroProvided.size() );
-
-            unfilteredArtifactList.addAll( resolved.values() );
-            unfilteredArtifactList.addAll( distroProvided.values() );
-
-            addedPlugin.setArtifacts( unfilteredArtifactList );
+            // we're only setting the plugin's artifact itself as the artifact list, to allow it to be retrieved
+            // later when the plugin is first invoked. Retrieving this artifact will in turn allow us to 
+            // transitively resolve its dependencies, and add them to the plugin container...
+            addedPlugin.setArtifacts( Collections.singletonList( pluginArtifact ) );
-            if ( artifactFactory != null )
-            {
-                releaseComponent( artifactFactory );
-            }
-            if ( mavenProjectBuilder != null )
-            {
-                releaseComponent( mavenProjectBuilder );
-            }
-        PlexusContainer pluginContainer = getPluginContainer( mojoDescriptor.getPluginDescriptor() );
-
-            plugin = getConfiguredMojo( pluginContainer, mojoDescriptor, session, dom, project );
+            plugin = getConfiguredMojo( mojoDescriptor, session, dom, project );
+
+                PlexusContainer pluginContainer = getPluginContainer( mojoDescriptor.getPluginDescriptor() );
+
-                            MavenSession session, MavenProject project )
+                           MavenSession session, MavenProject project )
-        PlexusContainer pluginContainer = getPluginContainer( pluginDescriptor );
-
-                    reports.add( getConfiguredMojo( pluginContainer, mojoDescriptor, session, dom, project ) );
+                    reports.add( getConfiguredMojo( mojoDescriptor, session, dom, project ) );
-    private Mojo getConfiguredMojo( PlexusContainer pluginContainer, MojoDescriptor mojoDescriptor,
-                                    MavenSession session, Xpp3Dom dom, MavenProject project )
-        throws ComponentLookupException, PluginConfigurationException
+    private Mojo getConfiguredMojo( MojoDescriptor mojoDescriptor, MavenSession session, Xpp3Dom dom,
+                                   MavenProject project )
+        throws ComponentLookupException, PluginConfigurationException, PluginManagerException
-        Mojo plugin = (Mojo) pluginContainer.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
-        plugin.setLog( mojoLogger );
+        PlexusContainer pluginContainer = getPluginContainer( mojoDescriptor.getPluginDescriptor() );
+        // if this is the first time this plugin has been used, the plugin's container will only 
+        // contain the plugin's artifact in isolation; we need to finish resolving the plugin's
+        // dependencies, and add them to the container.
+        ensurePluginContainerIsComplete( pluginDescriptor, pluginContainer, project, session );
+
+        Mojo plugin = (Mojo) pluginContainer.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
+
+        plugin.setLog( mojoLogger );
+
-        
+
-    private PlexusConfiguration extractMojoConfiguration( PlexusConfiguration mergedConfiguration, MojoDescriptor mojoDescriptor )
+    private void ensurePluginContainerIsComplete( PluginDescriptor pluginDescriptor, PlexusContainer pluginContainer,
+                                                  MavenProject project, MavenSession session )
+        throws PluginConfigurationException, ComponentLookupException
+    {
+        // if the plugin's already been used once, don't re-do this step...
+        // otherwise, we have to finish resolving the plugin's classpath and start the container.
+        if ( pluginDescriptor.getArtifacts() != null && pluginDescriptor.getArtifacts().size() == 1 )
+        {
+            // TODO: this is a little shady...
+            Artifact pluginArtifact = (Artifact) pluginDescriptor.getArtifacts().get( 0 );
+
+            ArtifactResolver artifactResolver = null;
+            MavenProjectBuilder mavenProjectBuilder = null;
+            ArtifactFactory artifactFactory = null;
+
+            try
+            {
+                artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );
+                mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );
+                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );
+
+                MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder,
+                                                                              artifactFactory );
+
+                ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections
+                    .singleton( pluginArtifact ), project.getRemoteArtifactRepositories(),
+                                                                                        session.getLocalRepository(),
+                                                                                        metadataSource, artifactFilter );
+
+                Map resolved = result.getArtifacts();
+
+                List files = new ArrayList();
+
+                for ( Iterator it = resolved.values().iterator(); it.hasNext(); )
+                {
+                    Artifact artifact = (Artifact) it.next();
+
+                    if ( artifact != pluginArtifact )
+                    {
+                        pluginContainer.addJarResource( artifact.getFile() );
+                    }
+                }
+
+                pluginDescriptor.setClassRealm( pluginContainer.getContainerRealm() );
+
+                ArtifactFilter distroProvidedFilter = new InversionArtifactFilter( artifactFilter );
+
+                ArtifactResolutionResult distroProvidedResult = artifactResolver
+                    .resolveTransitively( Collections.singleton( pluginArtifact ), project
+                        .getRemoteArtifactRepositories(), session.getLocalRepository(), metadataSource,
+                                          distroProvidedFilter );
+
+                Map distroProvided = distroProvidedResult.getArtifacts();
+
+                List unfilteredArtifactList = new ArrayList( resolved.size() + distroProvided.size() );
+
+                unfilteredArtifactList.addAll( resolved.values() );
+                unfilteredArtifactList.addAll( distroProvided.values() );
+
+                pluginDescriptor.setArtifacts( unfilteredArtifactList );
+            }
+            catch ( ArtifactResolutionException e )
+            {
+                throw new PluginConfigurationException( "Cannot resolve plugin dependencies", e );
+            }
+            catch ( PlexusContainerException e )
+            {
+                throw new PluginConfigurationException( "Cannot start plugin container", e );
+            }
+            finally
+            {
+                if ( artifactFactory != null )
+                {
+                    releaseComponent( artifactFactory );
+                }
+                if ( artifactResolver != null )
+                {
+                    releaseComponent( artifactResolver );
+                }
+                if ( mavenProjectBuilder != null )
+                {
+                    releaseComponent( mavenProjectBuilder );
+                }
+            }
+        }
+    }
+
+    private PlexusConfiguration extractMojoConfiguration( PlexusConfiguration mergedConfiguration,
+                                                         MojoDescriptor mojoDescriptor )
-        
+
-        
+
-        
+
-            
+
-                getLogger().debug( "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'" + mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***");
+                getLogger().debug(
+                                   "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'"
+                                       + mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***" );
-        
+
-                                          ExpressionEvaluator expressionEvaluator, Mojo plugin )
+                                         ExpressionEvaluator expressionEvaluator, Mojo plugin )
-                                "DEPRECATED: using default-value to set the default value of field '" +
-                                    parameter.getName() + "'" );
+                                              "DEPRECATED: using default-value to set the default value of field '"
+                                                  + parameter.getName() + "'" );
-                                       PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
+                                      PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
-                "Unable to retrieve component configurator for plugin configuration", e );
+                                                    "Unable to retrieve component configurator for plugin configuration",
+                                                    e );
-                                                               String expression )
+                                                              String expression )
-        artifactFilter = new ExclusionSetFilter(
-            new String[]{"classworlds", "maven-artifact", "maven-core", "maven-model", "maven-monitor", "maven-plugin-api", "maven-plugin-descriptor", "maven-project", "maven-settings", "plexus-container-default", "plexus-utils", "wagon-provider-api", "wagon-ssh", "wagon-http-lightweight", "wagon-file", "doxia-core", "maven-reporting-api"} );
+        artifactFilter = new ExclusionSetFilter( new String[] {
+            "classworlds",
+            "maven-artifact",
+            "maven-core",
+            "maven-model",
+            "maven-monitor",
+            "maven-plugin-api",
+            "maven-plugin-descriptor",
+            "maven-project",
+            "maven-settings",
+            "plexus-container-default",
+            "plexus-utils",
+            "wagon-provider-api",
+            "wagon-ssh",
+            "wagon-http-lightweight",
+            "wagon-file",
+            "doxia-core",
+            "maven-reporting-api" } );
-                                                MavenProjectBuilder mavenProjectBuilder, String scope,
-                                                ArtifactFactory artifactFactory, MavenProject project )
+                                               MavenProjectBuilder mavenProjectBuilder, String scope,
+                                               ArtifactFactory artifactFactory, MavenProject project )

MOV31 INS31 INS83 INS39 INS42 MOV44 MOV44 INS44 MOV44 MOV43 INS43 MOV43 INS8 INS43 MOV60 UPD83 INS42 INS44 MOV44 INS44 INS43 INS8 INS43 INS42 INS42 INS60 INS54 UPD42 MOV42 INS60 INS21 INS43 INS42 INS43 INS42 INS42 INS25 INS42 INS43 INS59 INS8 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS27 MOV8 INS42 INS42 INS33 INS21 INS21 INS60 MOV60 MOV21 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS60 INS7 INS32 MOV43 INS59 INS32 INS27 INS8 INS42 INS32 INS32 INS33 INS32 INS34 INS43 INS59 MOV60 MOV60 INS12 INS12 INS42 INS11 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 MOV60 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS21 INS44 INS8 INS44 INS8 INS43 INS32 INS42 INS42 INS42 INS32 INS40 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS34 UPD42 INS25 INS42 INS42 INS32 UPD42 UPD42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS32 UPD42 INS27 INS8 INS42 INS42 INS32 INS32 UPD42 INS43 INS45 INS42 INS43 INS45 INS42 INS42 UPD42 MOV42 INS42 INS42 MOV21 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60