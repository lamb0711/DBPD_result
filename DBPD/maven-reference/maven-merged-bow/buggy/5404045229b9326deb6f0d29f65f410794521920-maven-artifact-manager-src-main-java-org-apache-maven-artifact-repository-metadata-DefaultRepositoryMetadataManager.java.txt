PR: MNG-230
create a local copy of the snapshot

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@292401 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+        Map previousMetadata = new HashMap();
+        ArtifactRepository selected = null;
-                loadMetadata( metadata, repository, localRepository, true );
+                if ( loadMetadata( metadata, repository, localRepository, previousMetadata ) )
+                {
+                    metadata.setRepository( repository );
+                    selected = repository;
+                }
-        loadMetadata( metadata, localRepository, localRepository, false );
+        if ( loadMetadata( metadata, localRepository, localRepository, previousMetadata ) )
+        {
+            selected = localRepository;
+        }
+
+        // TODO: this could be a lot nicer... should really be in the snapshot transformation?
+        if ( metadata.isSnapshot() )
+        {
+            Metadata prevMetadata = metadata.getMetadata();
+
+            for ( Iterator i = previousMetadata.keySet().iterator(); i.hasNext(); )
+            {
+                ArtifactRepository repository = (ArtifactRepository) i.next();
+                Metadata m = (Metadata) previousMetadata.get( repository );
+                if ( repository.equals( selected ) )
+                {
+                    if ( m.getVersioning() == null )
+                    {
+                        m.setVersioning( new Versioning() );
+                    }
+
+                    if ( m.getVersioning().getSnapshot() == null )
+                    {
+                        m.getVersioning().setSnapshot( new Snapshot() );
+                    }
+
+                    if ( !m.getVersioning().getSnapshot().isLocalCopy() )
+                    {
+                        m.getVersioning().getSnapshot().setLocalCopy( true );
+                        metadata.setMetadata( m );
+                        metadata.storeInLocalRepository( localRepository, repository );
+                    }
+                }
+                else
+                {
+                    if ( m.getVersioning() != null && m.getVersioning().getSnapshot() != null &&
+                        m.getVersioning().getSnapshot().isLocalCopy() )
+                    {
+                        m.getVersioning().getSnapshot().setLocalCopy( false );
+                        metadata.setMetadata( m );
+                        metadata.storeInLocalRepository( localRepository, repository );
+                    }
+                }
+            }
+
+            metadata.setMetadata( prevMetadata );
+        }
-    private void loadMetadata( RepositoryMetadata repoMetadata, ArtifactRepository remoteRepository,
-                               ArtifactRepository localRepository, boolean setRepository )
+    private boolean loadMetadata( RepositoryMetadata repoMetadata, ArtifactRepository remoteRepository,
+                                  ArtifactRepository localRepository, Map previousMetadata )
+        boolean setRepository = false;
+
+            if ( repoMetadata.isSnapshot() && previousMetadata != null )
+            {
+                previousMetadata.put( remoteRepository, metadata );
+            }
+
-                if ( repoMetadata.getMetadata().merge( metadata ) )
-                {
-                    if ( setRepository )
-                    {
-                        repoMetadata.setRepository( remoteRepository );
-                    }
-                }
+                setRepository = repoMetadata.getMetadata().merge( metadata );
-                if ( setRepository )
-                {
-                    repoMetadata.setRepository( remoteRepository );
-                }
+                setRepository = true;
+        return setRepository;

INS26 INS26 INS40 INS40 UPD39 INS60 INS60 INS25 INS25 INS43 INS42 INS60 INS41 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS8 INS42 INS39 INS59 INS42 INS42 INS42 INS14 INS42 INS42 INS33 MOV42 MOV42 MOV42 MOV42 INS42 INS21 INS42 INS42 INS60 INS24 INS21 INS42 INS9 INS25 INS43 INS7 INS43 INS59 INS58 INS32 INS8 INS32 INS27 INS8 MOV8 INS42 INS25 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS32 INS27 INS21 MOV21 MOV21 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS33 INS32 INS7 INS7 MOV42 MOV42 MOV42 MOV42 INS42 INS21 INS21 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS25 INS25 INS25 INS25 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS9 INS32 INS7 INS42 INS42 INS43 INS32 INS43 INS32 INS27 INS8 INS27 INS8 INS38 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS21 INS21 INS21 INS27 INS32 INS21 INS21 INS21 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS27 INS27 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS32 INS33 INS32 INS42 INS32 INS42 MOV9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL9 DEL32 DEL21 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL25 DEL8