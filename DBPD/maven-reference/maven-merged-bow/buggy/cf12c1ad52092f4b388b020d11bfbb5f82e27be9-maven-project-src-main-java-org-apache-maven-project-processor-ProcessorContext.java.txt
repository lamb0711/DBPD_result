Added support for hierarchical model inheritance.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@755131 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import org.apache.maven.model.Build;
+import org.apache.maven.model.BuildBase;
-import org.apache.maven.model.PluginManagement;
+import org.apache.maven.model.Profile;
-    public static PomClassicDomainModel build( List<DomainModel> domainModels )
-        throws IOException
+    public static PomClassicDomainModel mergeProfileIntoModel(Collection<Profile> profiles, Model model, boolean isMostSpecialized) throws IOException
+        List<Model> profileModels = new ArrayList<Model>();
+        profileModels.add( model );
+        for(Profile profile : profiles)
+        {
+            profileModels.add( attachProfileNodesToModel(profile) );
+        }
+        
-                           (Processor) new ModuleProcessor(), new PropertiesProcessor(), new ParentProcessor(),
+                           (Processor) new ProfilesModuleProcessor(), new PropertiesProcessor(), new ParentProcessor(),
-                           new CiManagementProcessor(), new ReportingProcessor(), new RepositoriesProcessor());
-
-        ModelProcessor modelProcessor = new ModelProcessor( processors );
-
-        List<Model> models = new ArrayList<Model>();
+                           new CiManagementProcessor(), new ReportingProcessor(), new RepositoriesProcessor(), 
+                           new DistributionManagementProcessor());
+        Model target = processModelsForInheritance(profileModels, processors, false);
+        
+        PomClassicDomainModel m = convertToDomainModel( target, true );
+        interpolateModelProperties(m.getModelProperties(), new ArrayList<InterpolatorProperty>(), m); 
+        
+        return new PomClassicDomainModel(m.getModelProperties(), isMostSpecialized);  
+    }
+    
+    private static Model attachProfileNodesToModel(Profile profile)
+    {
+        Model model = new Model();
+        model.setModules( new ArrayList<String>(profile.getModules()) );
+        model.setDependencies(profile.getDependencies());
+        model.setDependencyManagement( profile.getDependencyManagement());
+        model.setDistributionManagement( profile.getDistributionManagement() );
+        model.setProperties( profile.getProperties() );  
+        model.setModules( new ArrayList<String>(profile.getModules() ) );
+        BuildProcessor proc = new BuildProcessor( new ArrayList<Processor>());
+        proc.processWithProfile( profile.getBuild(), model);
+        return model;
+    }  
+
+    private static List<Model> convertDomainModelsToMavenModels(List<DomainModel> domainModels) throws IOException
+    {
+        List<Model> models = new ArrayList<Model>();
+        for(DomainModel domainModel : domainModels)
+        {
+            PomClassicDomainModel dm = (PomClassicDomainModel) domainModel;
+            if(dm.getModel() != null)
+            {
+                if(dm.isMostSpecialized())
+                {
+                    models.add(0, dm.getModel() );
+                }
+                else
+                {
+                    models.add( dm.getModel() );  
+                }
+                
+            }
+            else {
+                InputStream is = ( (PomClassicDomainModel) domainModel ).getInputStream();
+                MavenXpp3Reader reader = new MavenXpp3Reader();
+                try
+                {
+                    models.add( reader.read( is ) );
+                }
+                catch ( XmlPullParserException e )
+                {
+                    e.printStackTrace();
+                    throw new IOException( e.getMessage() );
+                }                  
+            }
+           
+        }
+
+        return models;
+    }
+    
+    /**
+     * Parent domain models on bottom.
+     * 
+     * @param domainModels
+     * @return
+     * @throws IOException
+     */
+    public static PomClassicDomainModel build( List<DomainModel> domainModels )
+        throws IOException
+    {  
-        {
-
-            //TODO: Getting some null profiles - work around to skip for now
-            boolean artifactId = false;
-            for(ModelProperty mp : domainModel.getModelProperties())
-            {
-                if(mp.getUri().equals(ProjectUri.artifactId))
-                {
-                    artifactId = true;
-                    break;
-                }
-            }
-            
-            if(!artifactId)
-            {
-                continue;
-            }
-            //TODO:END
-            
+        {   
-            
-            InputStream is = ( (PomClassicDomainModel) domainModel ).getInputStream();
-            MavenXpp3Reader reader = new MavenXpp3Reader();
-            try
-            {
-                models.add( reader.read( is ) );
-            }
-            catch ( XmlPullParserException e )
-            {
-                e.printStackTrace();
-                throw new IOException( e.getMessage() );
-            }
-
-        Collections.reverse( models );
+        if(child == null)
+        {
+            throw new IOException("Could not find child model");
+        }
+        
+        List<Processor> processors =
+            Arrays.asList( (Processor) new BuildProcessor( new ArrayList<Processor>() ),
+                           (Processor) new ModuleProcessor(), new PropertiesProcessor(), new ParentProcessor(),
+                           new OrganizationProcessor(), new MailingListProcessor(), new IssueManagementProcessor(),
+                           new CiManagementProcessor(), new ReportingProcessor(), new RepositoriesProcessor(),
+                           new DistributionManagementProcessor(), new LicensesProcessor(), new ScmProcessor());        
+        Model target = processModelsForInheritance(convertDomainModelsToMavenModels(domainModels), processors, true);
+        
+        PomClassicDomainModel model = convertToDomainModel( target, false );
+        interpolateModelProperties(model.getModelProperties(), new ArrayList<InterpolatorProperty>(), child);
+        return new PomClassicDomainModel(model.getModelProperties());         
+    }
+    
+    private static Model processModelsForInheritance(List<Model> models, List<Processor> processors, boolean reverse)
+    {
+        ModelProcessor modelProcessor = new ModelProcessor( processors );
+       
+      //  if(!reverse)
+      //  {
+            Collections.reverse( models );    
+      //  }
-        }
-        else if( length == 2)
+
+        } else if( length == 2)
-        
-        for ( int i = 1; i < length - 1; i++ )
-        {
-            if ( i < length - 2 )
+        else {
+            for ( int i = 0; i < length - 1; i++ )
-                modelProcessor.process( models.get( i ), models.get( i + 1 ), target, false );
-            }
-            else
-            {
-                modelProcessor.process( models.get( i ), models.get( i + 1 ), target, true );
-            }
+                if(i == 0)
+                {
+                    modelProcessor.process( null, models.get( 0 ), target, false );    
+                }
+                else if ( i < length - 2 )
+                {
+                    modelProcessor.process( models.get( i ), models.get( i + 1 ), target, false );
+                }
+                else
+                {
+                    modelProcessor.process( models.get( i ), models.get( i + 1 ), target, true );
+                }
+            }           
+
-
-        PomClassicDomainModel model = convertToDomainModel( target, false );
-        interpolateModelProperties(model.getModelProperties(), new ArrayList(), child);
-        return new PomClassicDomainModel(model.getModelProperties());
+        return target;
+      
-        // PomClassicDomainModel dm = (PomClassicDomainModel) domainModel;
+        if(dm == null)
+        {
+            throw new IllegalArgumentException("dm: null");
+        }
-       // System.out.println(aliases);    
+

INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS74 INS42 MOV44 MOV43 INS8 INS29 INS83 INS83 MOV43 INS42 INS44 INS43 INS8 UPD83 INS43 INS42 INS44 INS44 INS44 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS70 INS60 INS60 INS60 INS21 INS41 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS41 INS43 INS43 MOV60 MOV70 INS41 INS65 INS65 INS65 INS65 INS74 INS42 INS42 MOV60 INS70 INS25 MOV60 INS60 MOV60 MOV21 MOV41 INS42 INS74 INS42 INS74 INS42 INS39 INS42 INS41 INS25 INS43 INS43 INS42 INS74 INS59 INS32 INS44 INS42 INS8 INS74 INS59 INS43 INS59 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS8 INS42 INS66 INS42 INS42 INS43 INS43 INS44 INS42 INS8 INS27 INS8 INS43 INS59 INS43 INS43 INS43 INS43 INS25 INS42 INS27 INS8 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS14 INS42 INS43 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS60 INS25 INS42 INS42 INS43 INS42 MOV25 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV27 MOV8 INS8 INS42 INS33 INS53 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS11 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS42 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS74 INS42 INS42 INS42 INS43 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS43 INS14 INS42 INS42 INS43 INS59 INS27 INS8 MOV8 INS42 INS14 INS14 INS14 INS14 INS42 INS32 INS42 INS9 INS74 INS24 INS14 INS43 INS43 INS42 INS42 INS32 INS43 INS14 INS43 INS14 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS74 INS42 INS42 INS11 INS32 INS33 INS25 INS43 INS45 INS43 INS43 INS43 INS42 INS42 MOV43 INS43 INS58 MOV27 MOV37 INS8 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS14 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS25 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS34 INS27 INS8 MOV25 INS43 INS43 INS32 INS32 INS42 INS34 INS21 MOV27 MOV8 MOV8 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS9 INS42 INS42 INS34 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL38 DEL18 DEL8 DEL25 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL8 DEL24