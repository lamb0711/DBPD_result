CHANGES
------------------------

o Factored the layout for a repository into a separate set of components in o.a.m.a.repository.layout

o Added new DefaultRepositoryLayout that uses the repo layout in http://docs.codehaus.org/pages/viewpage.action?pageId=22230 (it is not used by default until we get the repo1 conversion done)

o Added command-line switches to force legacy local-repo or new format (-a/-A, I know, but try to find something that makes more sense!)

o Added path formatting to the repository itself, which is now constructed with a ArtifactRepositoryLayout instance (since layout should be tied to the repository)

o Removed path formatting altogether from the DefaultArtifactHandlerManager.

o Changed the AbstractArtifactBasedComponent (or whatever it's called) to use the repository formatting in the path() and localPath() methods.

o Moved the plugin repo construction (still intact as a hard-coded singleton list) into the DefaultMavenProjectBuilder, where it will eventually build from POM info.

o Added a new method to build an artifact repository for a <distributionManagement/> section, if possible. This reduced the strain on mojos to construct an ArtifactRepository on demand.

o Refactored all *DeployMojo to use #project.distributionManagementArtifactRepository instead of the #settings, #component..ArtifactRepositoryFactory, ... that it used to require. This is a big simplifying step.

o Removed remote artifact repository construction from DefaultMaven, and changed the MavenSession to delegate to MavenProject for remoteArtifactRepositories, just as it does for pluginRepositories.

o Added remoteArtifactRepositories, pluginArtifactRepositories, distributionManagementArtifactRepository to MavenProject as a cache for the higher-level repos used throughout the system. This is project info, so it belongs here.

o Fixed all the tests in maven-core and maven-artifact which I broke. :)

o Dropped what is probably a big format-bomb, since the Eclipse formatter doesn't really handle 'throws Exception' wrapping the right way.

o Added MavenProject to the MavenSession constructor, since there should always be a MavenProject associated with a build, even if it's just the super-pom.

TODO:
--------------------------

- Write an integration/unit test to ensure that the new repo format works with $classifier (was: $extra) and $groupId[0]/../$groupId[n]. This is a simple adaptation of the old layout, but still needs testing.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163638 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
+import org.apache.maven.model.DistributionManagement;
+import org.codehaus.plexus.PlexusConstants;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.codehaus.plexus.context.Context;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
-    implements MavenProjectBuilder, Initializable
+    implements MavenProjectBuilder, Initializable, Contextualizable
+    private PlexusContainer container;
+
-    public MavenProject build( File project, ArtifactRepository localRepository )
-        throws ProjectBuildingException
+    public MavenProject build( File project, ArtifactRepository localRepository ) throws ProjectBuildingException
-                                boolean resolveDependencies, boolean sourceProject )
-        throws ProjectBuildingException
+                               boolean resolveDependencies, boolean sourceProject ) throws ProjectBuildingException
-            project = processProjectLogic( project, localRepository, resolveDependencies, sourceProject );
+            project = processProjectLogic( project, localRepository, aggregatedRemoteWagonRepositories,
+                                           resolveDependencies, sourceProject );
-                                              boolean resolveDependencies, boolean sourceProject )
+                                             List remoteRepositories, boolean resolveDependencies, boolean sourceProject )
+
+        try
+        {
+            project.setPluginArtifactRepositories( buildPluginRepositories( model.getPluginRepositories() ) );
+        }
+        catch ( Exception e )
+        {
+            throw new ProjectBuildingException( "Error building plugin repository list.", e );
+        }
+
+        DistributionManagement dm = model.getDistributionManagement();
+        if ( dm != null )
+        {
+            try
+            {
+                project
+                       .setDistributionManagementArtifactRepository( buildDistributionManagementRepository( dm
+                                                                                                              .getRepository() ) );
+            }
+            catch ( Exception e )
+            {
+                throw new ProjectBuildingException( "Error building distribution management repository.", e );
+            }
+        }
+
+        project.setRemoteArtifactRepositories( remoteRepositories );
-            List repos = buildArtifactRepositories( project.getRepositories() );
-
-            ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(), repos,
+            ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(),
+                                                                                    remoteRepositories,
-                                          LinkedList lineage, List aggregatedRemoteWagonRepositories )
+                                         LinkedList lineage, List aggregatedRemoteWagonRepositories )
-                                          List aggregatedRemoteWagonRepositories )
-        throws ProjectBuildingException
+                                         List aggregatedRemoteWagonRepositories ) throws ProjectBuildingException
-            aggregatedRemoteWagonRepositories.addAll(
-                buildArtifactRepositories( project.getModel().getRepositories() ) );
+            aggregatedRemoteWagonRepositories
+                                             .addAll( buildArtifactRepositories( project.getModel().getRepositories() ) );
-    private List buildArtifactRepositories( List repositories )
-        throws ProjectBuildingException
+    private List buildArtifactRepositories( List repositories ) throws ProjectBuildingException
+
+        // TODO: Replace with repository layout detection. This is a nasty hack.
+        String remoteRepoLayoutId = "legacy";
+
+        ArtifactRepositoryLayout remoteRepoLayout = null;
+        try
+        {
+            remoteRepoLayout = (ArtifactRepositoryLayout) container.lookup( ArtifactRepositoryLayout.ROLE,
+                                                                            remoteRepoLayoutId );
+        }
+        catch ( ComponentLookupException e )
+        {
+            throw new ProjectBuildingException( "Cannot find repository layout for: \'" + remoteRepoLayoutId + "\'.", e );
+        }
-            ArtifactRepository artifactRepo = artifactRepositoryFactory.createArtifactRepository( mavenRepo, settings );
+            ArtifactRepository artifactRepo = artifactRepositoryFactory.createArtifactRepository( mavenRepo, settings,
+                                                                                                  remoteRepoLayout );
-    private Model readModel( File file )
-        throws ProjectBuildingException
+    private List buildPluginRepositories( List pluginRepositories ) throws Exception
+    {
+        List remotePluginRepositories = new ArrayList();
+
+        // TODO: needs to be configured from the POM element
+
+        MavenSettings settings = mavenSettingsBuilder.buildSettings();
+
+        Repository pluginRepo = new Repository();
+        pluginRepo.setId( "plugin-repository" );
+        pluginRepo.setUrl( "http://repo1.maven.org" );
+
+        // TODO: [jc] change this to detect the repository layout type somehow...
+        String repoLayoutId = "legacy";
+
+        ArtifactRepositoryLayout repositoryLayout = (ArtifactRepositoryLayout) container
+                                                                                        .lookup(
+                                                                                                 ArtifactRepositoryLayout.ROLE,
+                                                                                                 repoLayoutId );
+
+        ArtifactRepository pluginRepository = artifactRepositoryFactory.createArtifactRepository( pluginRepo, settings,
+                                                                                                  repositoryLayout );
+
+        remotePluginRepositories.add( pluginRepository );
+
+        return remotePluginRepositories;
+    }
+
+    private ArtifactRepository buildDistributionManagementRepository( Repository dmRepo ) throws Exception
+    {
+        // TODO: needs to be configured from the POM element
+
+        MavenSettings settings = mavenSettingsBuilder.buildSettings();
+
+        // TODO: [jc] change this to detect the repository layout type somehow...
+        String repoLayoutId = "legacy";
+
+        ArtifactRepositoryLayout repositoryLayout = (ArtifactRepositoryLayout) container
+                                                                                        .lookup(
+                                                                                                 ArtifactRepositoryLayout.ROLE,
+                                                                                                 repoLayoutId );
+
+        ArtifactRepository dmArtifactRepository = artifactRepositoryFactory.createArtifactRepository( dmRepo, settings,
+                                                                                                      repositoryLayout );
+
+        return dmArtifactRepository;
+    }
+
+    private Model readModel( File file ) throws ProjectBuildingException
-                "Error while reading model from file '" + file.getAbsolutePath() + "'.", e );
+                                                "Error while reading model from file '" + file.getAbsolutePath() + "'.",
+                                                e );
-    private Model readModel( URL url )
-        throws ProjectBuildingException
+    private Model readModel( URL url ) throws ProjectBuildingException
-            throw new ProjectBuildingException( "Missing parent POM: " + parent.getGroupId() + ":" +
-                                                parent.getArtifactId() + "-" + parent.getVersion(), e );
+            throw new ProjectBuildingException( "Missing parent POM: " + parent.getGroupId() + ":"
+                + parent.getArtifactId() + "-" + parent.getVersion(), e );
-        
+
-        
+
-            project = processProjectLogic( project, localRepository, false, false );
+            List remoteRepositories = buildArtifactRepositories( superModel.getRepositories() );
+
+            project = processProjectLogic( project, localRepository, remoteRepositories, false, false );
-    private Model getSuperModel()
-        throws ProjectBuildingException
+    private Model getSuperModel() throws ProjectBuildingException
+
+    public void contextualize( Context context ) throws Exception
+    {
+        this.container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS42 INS83 INS43 INS59 INS44 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 MOV43 INS42 INS54 INS60 INS25 INS21 INS60 INS60 INS54 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS21 INS21 INS60 INS60 INS60 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS41 INS43 INS42 INS42 INS21 INS8 INS12 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS42 INS7 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS11 INS42 INS42 INS32 INS60 INS22 INS11 INS32 INS43 INS42 INS53 INS42 INS42 INS8 INS12 INS7 INS43 INS42 INS53 INS43 INS42 INS42 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS52 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS14 INS21 INS44 INS8 INS42 INS11 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS43 INS45 INS42 INS32 INS43 INS42 INS53 UPD42 INS43 INS32 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS45 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60