o Added first-pass logging and event-monitoring impls. Converted all System.out calls in maven-component plugins to use logger.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163457 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.monitor.event.EventDispatcher;
+import org.apache.maven.monitor.event.MavenEvents;
-        MavenExecutionResponse response = lifecycleExecutor.execute( request.getGoals(), session );
+        // !! This is ripe for refactoring to an aspect.
+        // Event monitoring.
+        EventDispatcher dispatcher = request.getEventDispatcher();
+        String event = MavenEvents.PROJECT_EXECUTION;
+        
+        dispatcher.dispatchStart( event, project.getId() );
+        
+        MavenExecutionResponse response = null;
+        try
+        {
+            // Actual meat of the code.
+            response = lifecycleExecutor.execute( request.getGoals(), session );
+            
+            dispatcher.dispatchEnd( event, project.getId() );
+        }
+        catch(Exception e)
+        {
+            dispatcher.dispatchError( event, project.getId(), e );
+        }
+        // End event monitoring.
-        List projects = new ArrayList();
-
-        getLogger().info( "Starting the reactor..." );
-
+        EventDispatcher dispatcher = request.getEventDispatcher();
+        String event = MavenEvents.REACTOR_EXECUTION;
+        
+        dispatcher.dispatchStart( event, request.getBaseDirectory().getPath() );
-            List files = request.getProjectFiles();
+            List projects = new ArrayList();
-            for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
-            {
-                File file = (File) iterator.next();
-
-                MavenProject project = getProject( file, request.getLocalRepository() );
-
-                projects.add( project );
-            }
-
-            projects = projectBuilder.getSortedProjects( projects );
-        }
-        catch ( IOException e )
-        {
-            throw new ReactorException( "Error processing projects for the reactor: ", e );
-        }
-        catch ( ProjectBuildingException e )
-        {
-            throw new ReactorException( "Error processing projects for the reactor: ", e );
-        }
-        catch ( CycleDetectedException e )
-        {
-            throw new ReactorException( "Error processing projects for the reactor: ", e );
-        }
-
-        getLogger().info( "Our processing order:" );
-
-        for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
-        {
-            MavenProject project = (MavenProject) iterator.next();
-
-            getLogger().info( project.getName() );
-        }
-
-        for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
-        {
-            MavenProject project = (MavenProject) iterator.next();
-
-            System.out.println( "\n\n\n" );
-
-            line();
-
-            getLogger().info( "Building " + project.getName() );
-
-            line();
-
-            MavenProjectExecutionRequest projectExecutionRequest = request.createProjectExecutionRequest( project );
+            getLogger().info( "Starting the reactor..." );
-                MavenExecutionResponse response = handleProject( projectExecutionRequest );
+                List files = request.getProjectFiles();
-                if ( response.isExecutionFailure() )
+                for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
-                    return response;
+                    File file = (File) iterator.next();
+
+                    MavenProject project = getProject( file, request.getLocalRepository() );
+
+                    projects.add( project );
+
+                projects = projectBuilder.getSortedProjects( projects );
+
-            catch ( Exception e )
+            catch ( IOException e )
-                throw new ReactorException( "Error executing project within the reactor", e );
+                throw new ReactorException( "Error processing projects for the reactor: ", e );
+            }
+            catch ( ProjectBuildingException e )
+            {
+                throw new ReactorException( "Error processing projects for the reactor: ", e );
+            }
+            catch ( CycleDetectedException e )
+            {
+                throw new ReactorException( "Error processing projects for the reactor: ", e );
-        }
+            getLogger().info( "Our processing order:" );
-        // TODO: not really satisfactory
-        return null;
+            for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
+            {
+                MavenProject project = (MavenProject) iterator.next();
+
+                getLogger().info( project.getName() );
+            }
+
+            for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
+            {
+                MavenProject project = (MavenProject) iterator.next();
+
+                System.out.println( "\n\n\n" );
+
+                line();
+
+                getLogger().info( "Building " + project.getName() );
+
+                line();
+
+                MavenProjectExecutionRequest projectExecutionRequest = request.createProjectExecutionRequest( project );
+
+                try
+                {
+                    MavenExecutionResponse response = handleProject( projectExecutionRequest );
+
+                    if ( response.isExecutionFailure() )
+                    {
+                        return response;
+                    }
+                }
+                catch ( Exception e )
+                {
+                    throw new ReactorException( "Error executing project within the reactor", e );
+                }
+
+            }
+            
+            dispatcher.dispatchEnd( event, request.getBaseDirectory().getPath() );
+
+            // TODO: not really satisfactory
+            return null;
+        }
+        catch ( ReactorException e )
+        {
+            dispatcher.dispatchError( event, request.getBaseDirectory().getPath(), e );
+            
+            throw e;
+        }
-        return new MavenSession( container, pluginManager, request.getLocalRepository(), request.getGoals() );
+        return new MavenSession( container, pluginManager, request.getLocalRepository(), request.getEventDispatcher(), request.getLog(), request.getGoals() );

INS26 INS26 INS40 INS40 INS8 INS60 INS60 INS21 INS54 INS60 INS60 INS21 INS54 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS43 INS59 INS43 INS59 INS32 MOV8 INS12 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS33 INS21 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS7 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42