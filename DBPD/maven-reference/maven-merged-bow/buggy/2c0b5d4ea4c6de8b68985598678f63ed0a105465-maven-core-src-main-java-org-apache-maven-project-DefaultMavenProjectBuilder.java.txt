load ~/.m2/pom.xml for user overrides


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@162978 13f79535-47bb-0310-9956-ffa450edef68

+    /** @todo can we move the super model reading to the initialize method? what about the user/site? Is it reused?
+     *  @todo we should be passing in some more configuration here so that maven.home.local can be used for user properties. Then, the new stuff should be unit tested.
+     */
-            modelInheritanceAssembler.assembleModelInheritance( ( (MavenProject) lineage.get( 0 ) ).getModel(), superModel );
+            Model previous = superModel;
-            for ( int i = 1; i < lineage.size(); i++ )
+            for ( Iterator i = lineage.iterator(); i.hasNext(); )
-                modelInheritanceAssembler.assembleModelInheritance( ( (MavenProject) lineage.get( i ) ).getModel(),
-                                                                    ( (MavenProject) lineage.get( i - 1 ) ).getModel() );
+                Model current = ( (MavenProject) i.next() ).getModel();
+                modelInheritanceAssembler.assembleModelInheritance( current, previous );
+                previous = current;
+            }
+
+            // TODO: use maven.home.local instead of user.home/.m2
+            File userModelFile = new File( System.getProperty( "user.home" ) + "/.m2", "pom.xml" );
+            if ( userModelFile.exists() )
+            {
+                Model userModel = modelReader.read( new FileReader( userModelFile ) );
+                modelInheritanceAssembler.assembleModelInheritance( userModel, previous );
+
+                if ( userModel.getParent() != null )
+                {
+                    throw new ProjectBuildingException( "Inheritence not supported in the user override POM" );
+                }
+
+                MavenProject parent = project;
+                project = new MavenProject( userModel );
+                project.setFile( parent.getFile() );
+                project.setParent( parent );
+
+                // Note that we don't currently support maven.properties here: this might be a better place to do
+                // the overrides though, if it is kept. If so, would need to process this regardless of the existence
+                // of pom.xml
+                project.setProperties( parent.getProperties() );
+    /** @todo loading of project properties could be handled much more effeciently as they are never loaded from
+        the repository. However, I believe they should be removedC anyway and use the POM -- Brett. */
-        project.setFile( projectDescriptor );
-

INS29 INS29 INS65 INS65 INS65 INS66 INS66 INS66 INS66 INS60 INS24 INS60 INS25 INS43 INS59 INS58 INS32 INS8 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS60 INS21 INS25 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS43 INS59 INS32 INS7 INS43 INS27 INS45 INS43 INS59 INS32 INS27 INS8 MOV43 INS59 INS7 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS45 INS42 INS42 INS32 MOV42 MOV42 INS42 INS42 INS32 INS33 INS53 INS42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 MOV36 MOV42 UPD42 UPD42 INS45 INS42 INS42 INS14 INS42 INS42 INS14 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS42 INS43 INS45 MOV43 INS42 INS42 UPD42 UPD42 DEL34 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL27 DEL42 DEL37 DEL32 DEL11 DEL36 DEL32 DEL42 DEL34 DEL27 DEL32 DEL11 DEL36 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21