Refactor
PR: MNG-1895

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@372027 13f79535-47bb-0310-9956-ffa450edef68

+                    ResolutionNode nearest, farthest;
-                        checkScopeUpdate( node, previous, listeners );
+                        nearest = previous;
+                        farthest = node;
-                        checkScopeUpdate( previous, node, listeners );
+                        nearest = node;
+                        farthest = previous;
-                    if ( previous.getDepth() <= node.getDepth() )
+                    /* if we need to update scope of nearest to use farthest scope */
+                    if ( checkScopeUpdate( farthest, nearest, listeners ) )
-                        // previous was nearer
-                        fireEvent( ResolutionListener.OMIT_FOR_NEARER, listeners, node, previous.getArtifact() );
-                        node.disable();
+                        fireEvent( ResolutionListener.UPDATE_SCOPE, listeners, nearest, farthest.getArtifact() );
+
+                        // previously we cloned the artifact, but it is more effecient to just update the scope
+                        // if problems are later discovered that the original object needs its original scope value, cloning may
+                        // again be appropriate
+                        nearest.getArtifact().setScope( farthest.getArtifact().getScope() );
-                    else
-                    {
-                        fireEvent( ResolutionListener.OMIT_FOR_NEARER, listeners, previous, node.getArtifact() );
-                        previous.disable();
-                    }
+                    fireEvent( ResolutionListener.OMIT_FOR_NEARER, listeners, farthest, nearest.getArtifact() );
+                    farthest.disable();
-     * Check if the scope needs to be updated.
+     * Check if the scope of the nearest needs to be updated with the scope of the farthest.
-    void checkScopeUpdate( ResolutionNode farthest, ResolutionNode nearest, List listeners )
+    private boolean checkScopeUpdate( ResolutionNode farthest, ResolutionNode nearest, List listeners )
-        if ( updateScope )
-        {
-            fireEvent( ResolutionListener.UPDATE_SCOPE, listeners, nearest, farthestArtifact );
-
-            // previously we cloned the artifact, but it is more effecient to just update the scope
-            // if problems are later discovered that the original object needs its original scope value, cloning may
-            // again be appropriate
-            nearestArtifact.setScope( farthestArtifact.getScope() );
-        }
+        return updateScope;

INS83 UPD39 INS41 UPD66 INS42 INS60 INS25 INS25 MOV21 MOV21 INS43 INS59 INS59 MOV27 INS8 INS8 INS32 MOV8 INS42 INS42 INS42 INS21 INS21 INS21 INS21 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS7 INS7 INS7 INS7 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 UPD42 INS32 UPD42 INS32 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL32 DEL27 DEL8 DEL25 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25