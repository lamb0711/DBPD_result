o Fixed dependency resolution from reactor to pick up attached artifacts

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@784405 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
+import java.util.Collection;
-import org.apache.maven.artifact.repository.DefaultArtifactRepository;
-            if ( artifact.getType().equals( "pom" ) )
+            if ( "pom".equals( artifact.getType() ) )
-                //TODO Need to look for attached artifacts
-                
-                File artifactFile = project.getArtifact().getFile();
-                if ( artifactFile != null && artifactFile.exists() )
+                Artifact projectArtifact = findMatchingArtifact( project, artifact );
+
+                if ( projectArtifact != null && projectArtifact.getFile() != null && projectArtifact.getFile().exists() )
-                    artifact.setFile( artifactFile );
+                    artifact.setFile( projectArtifact.getFile() );
+
+
+    /**
+     * Tries to resolve the specified artifact from the artifacts of the given project.
+     * 
+     * @param project The project to try to resolve the artifact from, must not be <code>null</code>.
+     * @param requestedArtifact The artifact to resolve, must not be <code>null</code>.
+     * @return The matching artifact from the project or <code>null</code> if not found.
+     */
+    private Artifact findMatchingArtifact( MavenProject project, Artifact requestedArtifact )
+    {
+        String requestedDependencyConflictId = requestedArtifact.getDependencyConflictId();
+
+        // check for match with project's main artifact by dependency conflict id
+        Artifact mainArtifact = project.getArtifact();
+        if ( requestedDependencyConflictId.equals( mainArtifact.getDependencyConflictId() ) )
+        {
+            return mainArtifact;
+        }
+
+        String requestedRepositoryConflictId = getRepositoryConflictId( requestedArtifact );
+
+        // check for match with project's main artifact by repository conflict id
+        if ( requestedRepositoryConflictId.equals( getRepositoryConflictId( mainArtifact ) ) )
+        {
+            return mainArtifact;
+        }
+
+        // check for match with one of the attached artifacts
+        Collection<Artifact> attachedArtifacts = project.getAttachedArtifacts();
+        if ( attachedArtifacts != null && !attachedArtifacts.isEmpty() )
+        {
+            // first try matching by dependency conflict id
+            for ( Artifact attachedArtifact : attachedArtifacts )
+            {
+                if ( requestedDependencyConflictId.equals( attachedArtifact.getDependencyConflictId() ) )
+                {
+                    return attachedArtifact;
+                }
+            }
+
+            // next try matching by repository conflict id
+            for ( Artifact attachedArtifact : attachedArtifacts )
+            {
+                if ( requestedRepositoryConflictId.equals( getRepositoryConflictId( attachedArtifact ) ) )
+                {
+                    return attachedArtifact;
+                }
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Gets the repository conflict id of the specified artifact. Unlike the dependency conflict id, the repository
+     * conflict id uses the artifact file extension instead of the artifact type. Hence, the repository conflict id more
+     * closely reflects the identity of artifacts as perceived by a repository.
+     * 
+     * @param artifact The artifact, must not be <code>null</code>.
+     * @return The repository conflict id, never <code>null</code>.
+     */
+    private String getRepositoryConflictId( Artifact artifact )
+    {
+        StringBuilder buffer = new StringBuilder( 128 );
+        buffer.append( artifact.getGroupId() );
+        buffer.append( ':' ).append( artifact.getArtifactId() );
+        if ( artifact.getArtifactHandler() != null )
+        {
+            buffer.append( ':' ).append( artifact.getArtifactHandler().getExtension() );
+        }
+        else
+        {
+            buffer.append( ':' ).append( artifact.getType() );
+        }
+        if ( artifact.hasClassifier() )
+        {
+            buffer.append( ':' ).append( artifact.getClassifier() );
+        }
+        return buffer.toString();
+    }
+

UPD40 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS60 MOV60 INS25 INS60 INS25 INS60 INS25 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS21 INS21 INS25 INS25 INS41 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 UPD43 INS32 INS8 INS43 INS59 INS32 INS8 INS74 INS59 INS27 INS8 INS33 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS32 INS32 INS27 INS8 INS8 INS32 INS8 INS32 INS42 INS42 INS32 UPD42 UPD42 MOV32 INS42 INS42 INS32 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS41 INS43 INS43 INS42 INS32 INS27 INS38 INS70 INS70 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS33 INS21 INS21 INS42 INS42 INS21 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS44 INS42 INS8 INS44 INS42 INS8 INS43 INS34 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS45 INS60 INS42 INS42 INS43 INS42 INS25 INS43 INS42 INS25 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS43 INS59 INS42 INS32 INS8 INS42 INS32 INS8 INS42 INS42 INS13 INS32 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS32 INS41 INS42 INS42 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS27 MOV27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 UPD42 MOV42 DEL40 DEL26 DEL45 DEL42 DEL42 DEL32