o Fixed bash scripts (cygwin option was being tested incorrectly, and resulting in no such file: cygpath)
o Changed POM handling to use ArtifactMetadata API rather than direct Artifact construction for POMs
o Streamlined ArtifactDigestor to avoid use of byte arrays for transfer between methods (resulted in a bit of cut-and-paste code, but should run better)
o Pegged OutOfMemoryError to the ArtifactDigestVerifier/ArtifactDigestor combo (motivated the previous change)
o Cleaned up artifact source-file checking before creating any of the target directory structures
o Maybe works, maybe not...will resume testing tomorrow or the next day


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163743 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.ByteArrayOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
-import java.util.Arrays;
-        boolean result = false;
-        
-            byte[] digestFromFile = null;
-    
+            
+            InputStream in = null;
-                digestFromFile = readFile( digestFile );
+                in = new FileInputStream( artifactFile );
+                
+                int digestLen = generatedDigest.length;
+                int currentIdx = 0;
+                
+                boolean matched = true;
+                
+                int read = -1;
+                while ( ( read = in.read() ) > -1 )
+                {
+                    if(currentIdx >= digestLen || read != generatedDigest[currentIdx])
+                    {
+                        return false;
+                    }
+                }
-            catch ( Exception e )
+            catch ( IOException e )
-                throw new ArtifactDigestException( "Cannot read digest from file: \'" + digestFile + "\'", e );
+                throw new ArtifactDigestException("Cannot verify digest for artifact file: \'" + artifactFile + "\' against digest file: \'" + digestFile + "\' using algorithm: \'" + algorithm + "\'", e);
-    
-            result = Arrays.equals( generatedDigest, digestFromFile );
+            finally
+            {
+                IOUtil.close( in );
+            }
+            
+        }
+        else
+        {
+            return false;
-        return result;
+        return true;
-        byte[] data = null;
-        try
-        {
-            data = readFile( artifactFile );
-        }
-        catch ( IOException e )
-        {
-            throw new ArtifactDigestException( "Error reading artifact data from: \'" + artifactFile + "\'", e );
-        }
-
-        digest.update( data );
-        
+        InputStream in = null;
+        try
+        {
+            in = new BufferedInputStream( new FileInputStream( artifactFile ) );
+
+            byte[] buffer = new byte[16];
+            int read = -1;
+            while ( ( read = in.read( buffer ) ) > -1 )
+            {
+                digest.update(buffer, 0, read);
+            }
+        }
+        catch ( IOException e )
+        {
+            throw new ArtifactDigestException( "Error reading artifact data from: \'" + artifactFile + "\'", e );
+        }
+        finally
+        {
+            IOUtil.close( in );
+        }
+
-        FileOutputStream out = null;
+        OutputStream out = null;
-    private byte[] readFile( File artifactFile ) throws IOException
-    {
-        BufferedInputStream in = null;
-        try
-        {
-            in = new BufferedInputStream( new FileInputStream( artifactFile ) );
-            ByteArrayOutputStream baos = new ByteArrayOutputStream();
-
-            byte[] buffer = new byte[16];
-            int read = -1;
-            while ( ( read = in.read( buffer ) ) > -1 )
-            {
-                baos.write( buffer, 0, read );
-            }
-
-            return baos.toByteArray();
-        }
-        finally
-        {
-            IOUtil.close( in );
-        }
-    }
-

MOV26 MOV26 UPD40 UPD40 INS31 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV43 INS8 INS25 INS41 INS60 INS54 MOV27 INS8 INS8 INS9 INS43 INS59 INS8 MOV12 INS8 UPD43 MOV60 MOV60 MOV54 INS41 INS42 INS42 INS33 INS21 MOV60 INS60 INS61 INS21 UPD42 UPD43 INS8 INS12 INS9 INS7 MOV5 INS39 INS59 INS27 INS8 INS32 UPD42 MOV21 MOV60 MOV60 INS60 MOV60 MOV61 INS44 INS8 INS42 MOV14 MOV85 UPD42 MOV3 INS42 INS38 INS36 INS38 MOV21 INS42 INS42 INS42 INS39 INS39 INS39 INS59 MOV43 INS42 INS53 INS34 INS7 INS34 INS14 UPD42 INS40 UPD42 INS34 INS42 INS9 INS25 INS14 INS43 INS42 UPD42 MOV42 MOV32 UPD42 INS34 INS42 MOV43 MOV42 INS27 INS8 MOV43 INS27 INS42 INS42 INS42 UPD42 MOV42 INS27 INS27 INS41 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS2 INS9 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL7 DEL21 DEL8 DEL54 DEL33 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31