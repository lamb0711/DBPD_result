refactoring of the resolveTransitiveDependencies call. 
simplified by removing a bunch of duplicated code in addArtifacts - no need to merge, you have the full list. 
separated the original artifacts (dependency artifacts) from the resolved artifacts (getArtifacts)


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191667 13f79535-47bb-0310-9956-ffa450edef68

-                                         Settings settings, ArtifactRepository localRepository )
+                                          Settings settings, ArtifactRepository localRepository )
-                                                  "Error occurred in the artifact container attempting to download plugin "
-                                                      + groupId + ":" + artifactId, e );
+                    "Error occurred in the artifact container attempting to download plugin " + groupId + ":" +
+                        artifactId, e );
-                if ( ( groupId == null || artifactId == null || version == null || ( groupId.equals( e.getGroupId() )
-                    && artifactId.equals( e.getArtifactId() ) && version.equals( e.getVersion() ) ) )
-                    && "maven-plugin".equals( e.getType() ) )
+                if (
+                    ( groupId == null || artifactId == null || version == null ||
+                        ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
+                            version.equals( e.getVersion() ) ) ) && "maven-plugin".equals( e.getType() ) )
-                throw new PluginManagerException( "Internal configuration error while retrieving " + groupId + ":"
-                    + artifactId, e );
+                throw new PluginManagerException(
+                    "Internal configuration error while retrieving " + groupId + ":" + artifactId, e );
-                             ArtifactRepository localRepository )
+                              ArtifactRepository localRepository )
-            // later when the plugin is first invoked. Retrieving this artifact will in turn allow us to 
+            // later when the plugin is first invoked. Retrieving this artifact will in turn allow us to
-                           MavenSession session, MavenProject project )
+                            MavenSession session, MavenProject project )
-                                   MavenProject project )
+                                    MavenProject project )
-        // if this is the first time this plugin has been used, the plugin's container will only 
+        // if this is the first time this plugin has been used, the plugin's container will only
-        PlexusConfiguration extractedMojoConfiguration = extractMojoConfiguration( mergedConfiguration, mojoDescriptor );
+        PlexusConfiguration extractedMojoConfiguration = extractMojoConfiguration( mergedConfiguration,
+                                                                                   mojoDescriptor );
-        populatePluginFields( plugin, mojoDescriptor, extractedMojoConfiguration, pluginContainer, expressionEvaluator );
+        populatePluginFields( plugin, mojoDescriptor, extractedMojoConfiguration, pluginContainer,
+                              expressionEvaluator );
-                ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections
-                    .singleton( pluginArtifact ), project.getRemoteArtifactRepositories(),
+                List remoteArtifactRepositories = project.getRemoteArtifactRepositories();
+                ArtifactResolutionResult result = artifactResolver.resolveTransitively( pluginArtifact,
+                                                                                        remoteArtifactRepositories,
-                                                                                        metadataSource, artifactFilter );
+                                                                                        metadataSource,
+                                                                                        artifactFilter );
-                    .resolveTransitively( Collections.singleton( pluginArtifact ), project
-                        .getRemoteArtifactRepositories(), session.getLocalRepository(), metadataSource,
-                                          distroProvidedFilter );
+                    .resolveTransitively( pluginArtifact, remoteArtifactRepositories, session.getLocalRepository(),
+                                          metadataSource, distroProvidedFilter );
-                                                         MojoDescriptor mojoDescriptor )
+                                                          MojoDescriptor mojoDescriptor )
-                                   "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'"
-                                       + mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***" );
+                    "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'" +
+                        mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***" );
-                                         ExpressionEvaluator expressionEvaluator, Mojo plugin )
+                                          ExpressionEvaluator expressionEvaluator, Mojo plugin )
-                                              "DEPRECATED: using default-value to set the default value of field '"
-                                                  + parameter.getName() + "'" );
+                                "DEPRECATED: using default-value to set the default value of field '" +
+                                    parameter.getName() + "'" );
-                                      PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
+                                       PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
-                                                    "Unable to retrieve component configurator for plugin configuration",
-                                                    e );
+                "Unable to retrieve component configurator for plugin configuration", e );
-                                                              String expression )
+                                                               String expression )
+        Set artifacts = new HashSet();
+        artifacts.add( "classworlds" );
+        artifacts.add( "maven-artifact" );
+        artifacts.add( "maven-artifact-manager" );
+        artifacts.add( "maven-core" );
+        artifacts.add( "maven-model" );
+        artifacts.add( "maven-monitor" );
+        artifacts.add( "maven-plugin-api" );
+        artifacts.add( "maven-plugin-descriptor" );
+        artifacts.add( "maven-project" );
+        artifacts.add( "maven-settings" );
+        artifacts.add( "plexus-container-default" );
+        artifacts.add( "plexus-utils" );
+        artifacts.add( "wagon-provider-api" );
+        artifacts.add( "wagon-ssh" );
+        artifacts.add( "wagon-http-lightweight" );
+        artifacts.add( "wagon-file" );
-        artifactFilter = new ExclusionSetFilter( new String[] {
-            "classworlds",
-            "maven-artifact",
-            "maven-core",
-            "maven-model",
-            "maven-monitor",
-            "maven-plugin-api",
-            "maven-plugin-descriptor",
-            "maven-project",
-            "maven-settings",
-            "plexus-container-default",
-            "plexus-utils",
-            "wagon-provider-api",
-            "wagon-ssh",
-            "wagon-http-lightweight",
-            "wagon-file",
-            "doxia-core",
-            "maven-reporting-api" } );
+        artifacts.add( "doxia-core" );
+        artifacts.add( "maven-reporting-api" );
+        artifactFilter = new ExclusionSetFilter( artifacts );
-                                               MavenProjectBuilder mavenProjectBuilder, String scope,
-                                               ArtifactFactory artifactFactory, MavenProject project )
+                                                MavenProjectBuilder mavenProjectBuilder, String scope,
+                                                ArtifactFactory artifactFactory, MavenProject project )
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(), context
-            .getRemoteRepositories(), context.getLocalRepository(), sourceReader, filter );
+        // TODO: such a call in MavenMetadataSource too - packaging not really the intention of type
+        Artifact artifact = artifactFactory.createArtifact( project.getGroupId(), project.getArtifactId(),
+                                                            project.getVersion(), null, project.getPackaging() );
-        project.addArtifacts( result.getArtifacts().values(), artifactFactory );
+        // TODO: we don't need to resolve over and over again, as long as we are sure that the parameters are the same
+        // check this with yourkit as a hot spot.
+        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getDependencyArtifacts(),
+                                                                                artifact,
+                                                                                project.getRemoteArtifactRepositories(),
+                                                                                context.getLocalRepository(),
+                                                                                sourceReader, filter );
+
+        project.setArtifacts( new HashSet( result.getArtifacts().values() ) );
+        ArtifactRepository localRepository = context.getLocalRepository();
+        List remoteArtifactRepositories = project.getRemoteArtifactRepositories();
+
-            // TODO: should I get the modified artifacts back into the project?
-            artifactResolver.resolve( artifact, context.getRemoteRepositories(), context.getLocalRepository() );
+            artifactResolver.resolve( artifact, remoteArtifactRepositories, localRepository );
-        Set pluginArtifacts = new HashSet();
+        // TODO: is this really necessary?
-            artifactResolver.resolve( artifact, context.getRemoteRepositories(), context.getLocalRepository() );
-
-            pluginArtifacts.add( artifact );
+            artifactResolver.resolve( artifact, remoteArtifactRepositories, localRepository );
-        project.setPluginArtifacts( pluginArtifacts );
-        artifactResolver.resolve( project.getParentArtifact(), context.getRemoteRepositories(), context
-            .getLocalRepository() );
+        // TODO: is this really necessary?
+        artifactResolver.resolve( project.getParentArtifact(), remoteArtifactRepositories, localRepository );

MOV24 MOV60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS60 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS7 INS43 INS59 INS43 INS59 INS43 INS59 MOV58 MOV32 MOV58 MOV32 UPD42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS14 INS42 INS42 INS32 UPD42 INS14 INS42 INS42 MOV32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV43 INS42 INS42 INS42 INS32 INS32 INS32 INS33 INS32 INS42 MOV32 MOV32 INS43 MOV32 MOV42 UPD42 MOV42 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS42 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL4 DEL3 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32