[MNG-5669] same pom.xml is read multiple times

-
+import org.apache.maven.artifact.versioning.ArtifactVersion;
+import org.apache.maven.building.Source;
+        if ( request.getPomFile() != null )
+        {
+            intoCache( request.getModelCache(), new FileModelSource( request.getPomFile() ), ModelCacheTag.RAW,
+                      resultData );
+        }
+        else
+        {
+            intoCache( request.getModelCache(), request.getModelSource(), ModelCacheTag.RAW, resultData );
+        }
+
-        Model model;
-
-            if ( pomFile != null )
-            {
-                modelSource = new FileModelSource( pomFile );
-            }
-            else
-            {
-                throw new NullPointerException( "neither pomFile nor modelSource can be null" );
-            }
+            modelSource =
+                new FileModelSource( Objects.requireNonNull( pomFile, "neither pomFile nor modelSource can be null" ) );
+        }
+
+        Model model = getModelFromCache( modelSource, request.getModelCache() );
+        if ( model != null )
+        {
+            return model;
-            InputSource source = request.isLocationTracking() ? new InputSource() : null;
-            Map<String, Object> options = new HashMap<>();
+            Map<String, Object> options = new HashMap<>( 3 );
-            options.put( ModelProcessor.INPUT_SOURCE, source );
+            InputSource source;
+            if ( request.isLocationTracking() ) 
+            {
+                source = (InputSource) options.computeIfAbsent( ModelProcessor.INPUT_SOURCE, k -> new InputSource() );
+            }
+            else
+            {
+                source = null;
+            }
+
+        if ( pomFile != null )
+        {
+            intoCache( request.getModelCache(), modelSource, ModelCacheTag.FILEMODEL, model );
+        }
+
+        String groupId = getGroupId( model );
+        String artifactId = model.getArtifactId();
+        String version = getVersion( model );
+
+        ModelData modelData = new ModelData( modelSource, model, groupId, artifactId, version );
+        intoCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW, modelData );
+
+    private Model getModelFromCache( ModelSource modelSource, ModelCache cache )
+    {
+        Model model;
+        if ( modelSource instanceof ArtifactModelSource )
+        {
+            ArtifactModelSource artifactModelSource = ( ArtifactModelSource ) modelSource;
+            ModelData modelData = fromCache( cache, artifactModelSource.getGroupId(),
+                                            artifactModelSource.getArtifactId(),
+                                            artifactModelSource.getVersion(), ModelCacheTag.RAW );
+            if ( modelData != null )
+            {
+                model = modelData.getModel();
+            }
+            else 
+            {
+                model = null;
+            }
+        }
+        else
+        {
+            model = fromCache( cache, modelSource, ModelCacheTag.FILEMODEL );
+            
+            if ( model != null )
+            {
+                model = model.clone();
+            }
+        }
+        return model;
+    }
+
+    private String getGroupId( Model model )
+    {
+        String groupId = model.getGroupId();
+        if ( groupId == null && model.getParent() != null )
+        {
+            groupId = model.getParent().getGroupId();
+        }
+        return groupId;
+    }
+
+    private String getVersion( Model model ) 
+    {
+        String version = model.getVersion();
+        if ( version == null && model.getParent() != null )
+        {
+            version = model.getParent().getVersion();
+        } 
+        return version;
+    }
+
-        ModelData parentData;
+        ModelData parentData = null;
-            String groupId = parent.getGroupId();
-            String artifactId = parent.getArtifactId();
-            String version = parent.getVersion();
+            ModelSource expectedParentSource = getParentPomFile( childModel, childSource );
-            parentData = getCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW );
+            if ( expectedParentSource != null )
+            {
+                ModelData candidateData = readParentLocally( childModel, childSource, request, problems );
+
+                if ( candidateData != null )
+                {
+                    /*
+                     * NOTE: This is a sanity check of the cache hit. If the cached parent POM was locally resolved, 
+                     * the child's GAV should match with that parent, too. If it doesn't, we ignore the cache and
+                     * resolve externally, to mimic the behavior if the cache didn't exist in the first place. 
+                     * Otherwise, the cache would obscure a bad POM.
+                     */
+                    try
+                    {
+                        VersionRange parentVersion = VersionRange.createFromVersionSpec( parent.getVersion() );
+                        ArtifactVersion actualVersion = new DefaultArtifactVersion( candidateData.getVersion() );
+
+                        if ( parent.getGroupId().equals( candidateData.getGroupId() )
+                            && parent.getArtifactId().equals( candidateData.getArtifactId() )
+                            && parentVersion.containsVersion( actualVersion ) )
+                        {
+                            parentData = candidateData;
+                        }
+                    }
+                    catch ( InvalidVersionSpecificationException e )
+                    {
+                        // This should already been blocked during validation
+                    }
+                }
+            }
-                parentData = readParentLocally( childModel, childSource, request, problems );
-
-                if ( parentData == null )
+                parentData = fromCache( request.getModelCache(), 
+                                       parent.getGroupId(), parent.getArtifactId(),
+                                       parent.getVersion(), ModelCacheTag.RAW );
+                
+                // ArtifactModelSource means repositorySource
+                if ( parentData == null || !( parentData.getSource() instanceof ArtifactModelSource ) )
-                }
-
-                putCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW, parentData );
-            }
-            else
-            {
-                /*
-                 * NOTE: This is a sanity check of the cache hit. If the cached parent POM was locally resolved, the
-                 * child's <relativePath> should point at that parent, too. If it doesn't, we ignore the cache and
-                 * resolve externally, to mimic the behavior if the cache didn't exist in the first place. Otherwise,
-                 * the cache would obscure a bad POM.
-                 */
-
-                File pomFile = parentData.getModel().getPomFile();
-                if ( pomFile != null )
-                {
-                    FileModelSource pomSource = new FileModelSource( pomFile );
-                    ModelSource expectedParentSource = getParentPomFile( childModel, childSource );
-
-                    if ( expectedParentSource == null || ( expectedParentSource instanceof ModelSource2
-                        && !pomSource.equals(  expectedParentSource ) ) )
-                    {
-                        parentData = readParentExternally( childModel, request, problems );
-                    }
+                    
+                    intoCache( request.getModelCache(), 
+                              parentData.getGroupId(), parentData.getArtifactId(),
+                              parentData.getVersion(), ModelCacheTag.RAW, parentData );
-            DependencyManagement importMgmt = getCache( request.getModelCache(), groupId, artifactId, version,
+            DependencyManagement importMgmt = fromCache( request.getModelCache(), groupId, artifactId, version,
-                putCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.IMPORT, importMgmt );
+                intoCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.IMPORT, importMgmt );
-    private <T> void putCache( ModelCache modelCache, String groupId, String artifactId, String version,
+    private <T> void intoCache( ModelCache modelCache, String groupId, String artifactId, String version,
-    private <T> T getCache( ModelCache modelCache, String groupId, String artifactId, String version,
+    private <T> void intoCache( ModelCache modelCache, Source source, ModelCacheTag<T> tag, T data )
+    {
+        if ( modelCache != null )
+        {
+            modelCache.put( source, tag.getName(), tag.intoCache( data ) );
+        }
+    }
+
+    private <T> T fromCache( ModelCache modelCache, String groupId, String artifactId, String version,
+    private <T> T fromCache( ModelCache modelCache, Source source, ModelCacheTag<T> tag )
+    {
+        if ( modelCache != null )
+        {
+            Object data = modelCache.get( source, tag.getName() );
+            if ( data != null )
+            {
+                return tag.fromCache( tag.getType().cast( data ) );
+            }
+        }
+        return null;
+    }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 UPD42 INS83 INS73 INS39 INS42 INS44 INS44 INS44 INS44 INS8 UPD42 INS83 INS73 INS43 INS42 INS44 INS44 INS44 INS8 INS25 INS25 INS60 INS25 INS25 INS60 INS60 INS60 INS60 INS21 INS42 INS43 INS42 INS43 INS42 MOV60 INS25 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS25 INS42 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS25 INS41 INS27 INS8 INS8 MOV27 MOV8 INS43 INS59 INS27 INS8 MOV60 MOV27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS62 INS8 INS8 INS42 INS42 MOV43 INS59 INS27 INS8 INS42 INS42 MOV43 INS59 INS27 INS8 INS42 INS42 INS42 INS43 INS43 INS42 INS27 INS8 INS42 INS42 INS43 INS43 INS27 INS8 INS33 INS32 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS60 INS60 INS25 INS21 INS25 INS42 INS32 INS27 INS27 INS21 INS42 INS32 INS27 INS27 INS21 INS33 MOV60 INS25 MOV25 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS33 INS60 INS25 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS43 MOV32 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS7 INS27 INS8 INS42 INS42 INS42 INS33 INS32 INS33 INS7 INS42 INS42 INS42 INS33 INS32 INS33 INS7 INS27 INS8 MOV27 INS8 INS32 INS43 INS59 INS27 INS8 INS42 INS32 INS14 INS40 INS42 INS42 INS32 INS32 INS40 INS42 INS42 INS42 INS42 MOV21 INS21 INS42 INS32 INS42 INS40 INS42 UPD42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 MOV60 INS25 INS21 MOV25 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS32 INS34 INS7 INS7 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS32 INS40 INS7 INS7 INS42 INS42 INS42 INS40 INS7 INS32 INS42 INS32 INS42 INS43 INS27 INS8 INS7 UPD42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS11 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 INS42 INS33 INS54 INS42 INS32 MOV27 INS38 INS21 UPD42 MOV32 INS42 INS42 INS42 INS42 INS32 MOV43 INS32 INS42 INS42 INS42 INS42 INS8 INS12 INS42 MOV32 MOV32 INS32 INS32 INS40 INS36 INS32 INS32 INS42 INS42 MOV42 UPD42 MOV42 MOV40 INS86 MOV60 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS62 INS42 MOV32 INS32 INS32 INS32 INS40 INS42 INS42 INS42 INS59 MOV14 UPD43 INS43 INS59 INS27 INS8 INS43 INS42 INS32 UPD43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS14 INS32 INS32 INS32 INS21 INS42 INS42 INS42 UPD42 INS42 INS42 MOV32 INS43 INS32 INS32 UPD42 MOV42 INS32 MOV32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS7 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL42 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL33 DEL16 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL62 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL36 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL8 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25