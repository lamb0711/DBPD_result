o Extended debug logging for project dependency graph to include source location of dependency management

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1074222 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.InputLocation;
+import org.apache.maven.model.InputSource;
+import org.sonatype.aether.util.artifact.ArtifacIdUtils;
+import org.sonatype.aether.util.artifact.ArtifactProperties;
+        private Map<String, Dependency> managed;
+
-                    buffer.append( " (scope managed from " ).append( node.getPremanagedScope() ).append( ")" );
+                    buffer.append( " (scope managed from " ).append( node.getPremanagedScope() );
+                    appendManagementSource( buffer, art, "scope" );
+                    buffer.append( ")" );
-                    buffer.append( " (version managed from " ).append( node.getPremanagedVersion() ).append( ")" );
+                    buffer.append( " (version managed from " ).append( node.getPremanagedVersion() );
+                    appendManagementSource( buffer, art, "version" );
+                    buffer.append( ")" );
+        private void appendManagementSource( StringBuilder buffer, org.sonatype.aether.artifact.Artifact artifact,
+                                             String field )
+        {
+            if ( managed == null )
+            {
+                managed = new HashMap<String, Dependency>();
+                if ( project.getDependencyManagement() != null )
+                {
+                    for ( Dependency dep : project.getDependencyManagement().getDependencies() )
+                    {
+                        managed.put( dep.getManagementKey(), dep );
+                    }
+                }
+            }
+
+            String key =
+                ArtifacIdUtils.toVersionlessId( artifact.getGroupId(), artifact.getArtifactId(),
+                                                artifact.getProperty( ArtifactProperties.TYPE, "jar" ),
+                                                artifact.getClassifier() );
+
+            Dependency dependency = managed.get( key );
+            if ( dependency != null )
+            {
+                InputLocation location = dependency.getLocation( field );
+                if ( location != null )
+                {
+                    InputSource source = location.getSource();
+                    if ( source != null )
+                    {
+                        buffer.append( " by " ).append( source.getModelId() );
+                    }
+                }
+            }
+        }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS74 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS33 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS7 INS27 INS8 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS21 INS21 INS21 INS21 INS42 INS14 INS32 INS33 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS25 MOV32 INS32 INS32 MOV32 INS32 INS32 INS74 INS42 INS42 INS44 INS32 INS8 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS43 INS43 INS42 INS32 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32