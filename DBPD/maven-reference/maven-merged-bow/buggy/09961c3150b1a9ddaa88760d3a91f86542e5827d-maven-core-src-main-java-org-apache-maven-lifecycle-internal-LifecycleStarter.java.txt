MNG-5575: Separate distinct build strategies into their own new Builder implementation. The interface is not ideal yet, but gives us a cleaner
separation of implementations and gives us a path forward.

+import java.util.List;
+import java.util.Map;
+
-import org.apache.maven.execution.MavenExecutionRequest;
+import org.apache.maven.lifecycle.internal.builder.Builder;
+import org.apache.maven.lifecycle.internal.builder.BuilderNotFoundException;
-import java.util.List;
-import java.util.concurrent.CompletionService;
-import java.util.concurrent.ExecutorCompletionService;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.TimeUnit;
-
+ * 
-
-    private LifecycleModuleBuilder lifecycleModuleBuilder;
-
-    @Requirement
-    private LifecycleWeaveBuilder lifeCycleWeaveBuilder;
-
-    @Requirement
-    private LifecycleThreadedBuilder lifecycleThreadedBuilder;
-
-    @Requirement
-    private ThreadConfigurationService threadConfigService;
+    private Map<String, Builder> builders;
+        ReactorContext reactorContext = null;
+        ProjectBuildList projectBuilds = null;
-            if ( !session.isUsingPOMsFromFilesystem() && lifecycleTaskSegmentCalculator.requiresProject( session ) )
+            if ( buildExecutionRequiresProject( session ) && projectIsNotPresent( session ) )
-            final MavenExecutionRequest executionRequest = session.getRequest();
-            boolean isThreaded = executionRequest.isThreadConfigurationPresent();
-            session.setParallel( isThreaded );
-
-
-            ProjectBuildList projectBuilds = buildListCalculator.calculateProjectBuilds( session, taskSegments );
+            projectBuilds = buildListCalculator.calculateProjectBuilds( session, taskSegments );
-
-            ReactorContext callableContext =
-                new ReactorContext( result, projectIndex, oldContextClassLoader, reactorBuildStatus );
+            reactorContext = new ReactorContext( result, projectIndex, oldContextClassLoader, reactorBuildStatus );
-            if ( isThreaded )
+            String builderId = session.getRequest().getBuilderId();
+            Builder builder = builders.get( builderId );
+            if ( builder == null )
-                ExecutorService executor =
-                    threadConfigService.getExecutorService( executionRequest.getThreadCount(),
-                                                            executionRequest.isPerCoreThreadCount(),
-                                                            session.getProjects().size() );
-                try
-                {
-
-                    final boolean isWeaveMode = LifecycleWeaveBuilder.isWeaveMode( executionRequest );
-                    if ( isWeaveMode )
-                    {
-                        lifecycleDebugLogger.logWeavePlan( session );
-                        lifeCycleWeaveBuilder.build( projectBuilds, callableContext, taskSegments, session, executor,
-                                                     reactorBuildStatus );
-                    }
-                    else
-                    {
-                        ConcurrencyDependencyGraph analyzer =
-                            new ConcurrencyDependencyGraph( projectBuilds, session.getProjectDependencyGraph() );
-
-                        CompletionService<ProjectSegment> service =
-                            new ExecutorCompletionService<ProjectSegment>( executor );
-
-                        lifecycleThreadedBuilder.build( session, callableContext, projectBuilds, taskSegments, analyzer,
-                                                        service );
-                    }
-                }
-                finally
-                {
-                    executor.shutdown();
-                    // If the builder has terminated with an exception we want to catch any stray threads before going
-                    // to System.exit in the mavencli.
-                    executor.awaitTermination( 5, TimeUnit.SECONDS ) ;
-                }
+                throw new BuilderNotFoundException( String.format( "The builder requested using id = %s cannot be found", builderId ) );
-            else
-            {
-                singleThreadedBuild( session, callableContext, projectBuilds, taskSegments, reactorBuildStatus );
-            }
+
+            logger.info( "" );
+            logger.info( String.format( "Using the builder %s", builder.getClass().getName() ) );
+            builder.build( session, reactorContext, projectBuilds, taskSegments, reactorBuildStatus );
-    private void singleThreadedBuild( MavenSession session, ReactorContext callableContext,
-                                      ProjectBuildList projectBuilds, List<TaskSegment> taskSegments,
-                                      ReactorBuildStatus reactorBuildStatus )
+    private boolean buildExecutionRequiresProject( MavenSession session )
-        for ( TaskSegment taskSegment : taskSegments )
-        {
-            for ( ProjectSegment projectBuild : projectBuilds.getByTaskSegment( taskSegment ) )
-            {
-                try
-                {
-                    lifecycleModuleBuilder.buildProject( session, callableContext, projectBuild.getProject(),
-                                                         taskSegment );
-                    if ( reactorBuildStatus.isHalted() )
-                    {
-                        break;
-                    }
-                }
-                catch ( Exception e )
-                {
-                    break;  // Why are we just ignoring this exception? Are exceptions are being used for flow control
-                }
+        return lifecycleTaskSegmentCalculator.requiresProject( session );
+    }
-            }
-        }
+    private boolean projectIsNotPresent( MavenSession session )
+    {
+        return !session.getRequest().isProjectPresent();

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS23 INS31 MOV78 MOV83 INS74 MOV59 INS83 INS39 INS42 INS44 INS8 UPD39 INS42 INS8 INS43 INS43 INS43 UPD42 INS60 INS60 INS43 INS42 INS41 INS41 UPD42 MOV42 INS42 UPD42 MOV42 MOV43 INS59 MOV43 INS59 MOV60 MOV21 UPD42 MOV42 MOV32 INS38 INS42 INS33 INS42 INS33 INS21 MOV60 INS25 INS21 MOV21 MOV21 INS32 INS7 INS7 UPD43 UPD43 INS27 MOV8 INS32 INS32 UPD42 MOV42 INS32 INS32 INS42 MOV32 INS42 MOV14 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS33 INS53 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 UPD42 INS32 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS43 INS32 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL78 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL43 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL43 DEL42 DEL59 DEL23 DEL32 DEL38 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL59 DEL60 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL40 DEL32 DEL21 DEL8 DEL54 DEL8 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL10 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL10 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL70 DEL8