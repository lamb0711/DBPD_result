o Fixed missing delegation to new repo system

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@995578 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.RepositoryUtils;
+import org.apache.maven.artifact.metadata.ArtifactMetadata;
-import org.apache.maven.repository.MetadataResolutionRequest;
-import org.apache.maven.repository.MetadataResolutionResult;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.repository.AuthenticationSelector;
+import org.sonatype.aether.repository.ProxySelector;
+import org.sonatype.aether.repository.RemoteRepository;
-                    ArtifactRepositoryLayout layout = layouts.get( mirror.getLayout() );
-                    if ( layout != null )
+                    if ( StringUtils.isNotEmpty( mirror.getLayout() ) )
-                        repository.setLayout( layout );
+                        repository.setLayout( getLayout( mirror.getLayout() ) );
+                    }
+                }
+            }
+        }
+    }
+
+    private Mirror getMirror( RepositorySystemSession session, ArtifactRepository repository )
+    {
+        if ( session != null )
+        {
+            org.sonatype.aether.repository.MirrorSelector selector = session.getMirrorSelector();
+            if ( selector != null )
+            {
+                RemoteRepository repo = selector.getMirror( RepositoryUtils.toRepo( repository ) );
+                if ( repo != null )
+                {
+                    Mirror mirror = new Mirror();
+                    mirror.setId( repo.getId() );
+                    mirror.setUrl( repo.getUrl() );
+                    mirror.setLayout( repo.getContentType() );
+                    return mirror;
+                }
+            }
+        }
+        return null;
+    }
+
+    public void injectMirror( RepositorySystemSession session, List<ArtifactRepository> repositories )
+    {
+        if ( repositories != null && session != null )
+        {
+            for ( ArtifactRepository repository : repositories )
+            {
+                Mirror mirror = getMirror( session, repository );
+
+                if ( mirror != null )
+                {
+                    repository.setId( mirror.getId() );
+                    repository.setUrl( mirror.getUrl() );
+
+                    if ( StringUtils.isNotEmpty( mirror.getLayout() ) )
+                    {
+                        repository.setLayout( getLayout( mirror.getLayout() ) );
+    private Authentication getAuthentication( RepositorySystemSession session, ArtifactRepository repository )
+    {
+        if ( session != null )
+        {
+            AuthenticationSelector selector = session.getAuthenticationSelector();
+            if ( selector != null )
+            {
+                org.sonatype.aether.repository.Authentication auth =
+                    selector.getAuthentication( RepositoryUtils.toRepo( repository ) );
+                if ( auth != null )
+                {
+                    return new Authentication( auth.getUsername(), auth.getPassword() );
+                }
+            }
+        }
+        return null;
+    }
+
+    public void injectAuthentication( RepositorySystemSession session, List<ArtifactRepository> repositories )
+    {
+        if ( repositories != null && session != null )
+        {
+            for ( ArtifactRepository repository : repositories )
+            {
+                repository.setAuthentication( getAuthentication( session, repository ) );
+            }
+        }
+    }
+
-    public MetadataResolutionResult resolveMetadata( MetadataResolutionRequest request )
+    private Proxy getProxy( RepositorySystemSession session, ArtifactRepository repository )
-
-        //      ArtifactResolutionResult collect( Set<Artifact> artifacts,
-        //      Artifact originatingArtifact,
-        //      Map managedVersions,
-        //      ArtifactRepository localRepository,
-        //      List<ArtifactRepository> remoteRepositories,
-        //      ArtifactMetadataSource source,
-        //      ArtifactFilter filter,
-        //      List<ResolutionListener> listeners,
-        //      List<ConflictResolver> conflictResolvers )
-        //      ArtifactResolutionResult result = artifactCollector.
-
+        if ( session != null )
+        {
+            ProxySelector selector = session.getProxySelector();
+            if ( selector != null )
+            {
+                org.sonatype.aether.repository.Proxy proxy = selector.getProxy( RepositoryUtils.toRepo( repository ) );
+                if ( proxy != null )
+                {
+                    Proxy p = new Proxy();
+                    p.setHost( proxy.getHost() );
+                    p.setProtocol( proxy.getType() );
+                    p.setPort( proxy.getPort() );
+                    if ( proxy.getAuthentication() != null )
+                    {
+                        p.setUserName( proxy.getAuthentication().getUsername() );
+                        p.setPassword( proxy.getAuthentication().getPassword() );
+                    }
+                    return p;
+                }
+            }
+        }
+    public void injectProxy( RepositorySystemSession session, List<ArtifactRepository> repositories )
+    {
+        if ( repositories != null && session != null )
+        {
+            for ( ArtifactRepository repository : repositories )
+            {
+                repository.setProxy( getProxy( session, repository ) );
+            }
+        }
+    }
+
-            return createArtifactRepository( id, url, layouts.get( repo.getLayout() ), snapshots, releases );
+            return createArtifactRepository( id, url, getLayout( repo.getLayout() ), snapshots, releases );
+    private ArtifactRepositoryLayout getLayout( String id )
+    {
+        ArtifactRepositoryLayout layout = layouts.get( id );
+
+        if ( layout == null )
+        {
+            layout = new UnknownRepositoryLayout( id, layouts.get( "default" ) );
+        }
+
+        return layout;
+    }
+
+    /**
+     * In the future, the legacy system might encounter repository types for which no layout components exists because
+     * the actual communication with the repository happens via a repository connector. As a minimum, the legacy system
+     * needs to retain the id of this layout so that the content type of the remote repository can still be accurately
+     * described.
+     */
+    static class UnknownRepositoryLayout
+        implements ArtifactRepositoryLayout
+    {
+
+        private final String id;
+
+        private final ArtifactRepositoryLayout fallback;
+
+        public UnknownRepositoryLayout( String id, ArtifactRepositoryLayout fallback )
+        {
+            this.id = id;
+            this.fallback = fallback;
+        }
+
+        public String getId()
+        {
+            return id;
+        }
+
+        public String pathOf( Artifact artifact )
+        {
+            return fallback.pathOf( artifact );
+        }
+
+        public String pathOfLocalRepositoryMetadata( ArtifactMetadata metadata, ArtifactRepository repository )
+        {
+            return fallback.pathOfLocalRepositoryMetadata( metadata, repository );
+        }
+
+        public String pathOfRemoteRepositoryMetadata( ArtifactMetadata metadata )
+        {
+            return fallback.pathOfRemoteRepositoryMetadata( metadata );
+        }
+
+    }
+

MOV26 MOV26 INS26 INS26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 MOV31 INS31 INS42 INS43 INS42 INS43 INS42 INS25 INS41 INS43 INS42 INS74 INS42 INS25 INS42 INS43 INS42 INS43 INS42 INS25 INS41 INS43 INS42 INS74 INS42 INS25 INS42 INS43 INS42 INS43 INS42 INS25 INS41 INS43 INS42 INS74 INS42 INS25 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS27 INS8 INS33 INS42 INS43 INS43 INS27 INS8 INS42 INS42 INS27 INS8 INS33 INS42 INS43 INS43 INS27 INS8 INS42 INS42 INS27 INS8 INS33 INS42 INS43 INS43 INS27 INS8 INS42 MOV43 INS59 INS27 INS8 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 UPD43 UPD42 INS42 INS43 INS42 INS41 INS42 INS33 INS60 INS25 INS42 INS42 INS27 INS27 INS70 INS42 INS33 INS60 INS25 INS42 INS42 INS27 INS27 INS70 INS42 INS33 INS60 INS25 INS42 INS42 INS27 INS27 INS70 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS7 INS7 INS42 INS42 INS32 UPD42 MOV42 UPD42 INS32 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS33 INS42 INS33 INS44 INS42 INS8 INS43 INS59 INS27 INS8 INS42 INS33 INS42 INS33 INS44 INS42 INS8 INS43 INS59 INS27 INS8 INS42 INS33 INS42 INS33 INS44 INS42 INS8 INS42 INS42 INS42 INS7 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS33 INS60 INS25 INS43 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS43 INS42 INS21 INS42 INS14 INS52 INS42 INS52 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS32 UPD42 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS21 INS41 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS25 INS40 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS21 INS25 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS45 MOV32 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS8 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS21 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL33