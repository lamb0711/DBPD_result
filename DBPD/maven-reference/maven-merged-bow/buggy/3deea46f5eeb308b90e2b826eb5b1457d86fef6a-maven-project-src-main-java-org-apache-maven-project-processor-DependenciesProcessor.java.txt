More model builder classes and tests.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@751503 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import org.apache.maven.model.Model;
+import org.apache.maven.project.builder.ProjectUri;
+import org.apache.maven.shared.model.ModelContainerAction;
-public class DependenciesProcessor extends BaseProcessor {
-	/*
-	public void process(List<Dependency> parentDependencies, List<Dependency> childDependencies, List<Dependency> targetDependencies)
-	{
-		
-	}
-*/
-	public void process(Object parent, Object child, Object target, boolean sChildMostSpecialized) {
-		
-		
-	}
+public class DependenciesProcessor
+    extends BaseProcessor
+{
+    public void process( Object parent, Object child, Object target, boolean isChildMostSpecialized )
+    {
+        super.process( parent, child, target, isChildMostSpecialized );
+        Model c = (Model) child;
+        Model p = null;
+        if ( parent != null )
+        {
+            p = (Model) parent;
+        }
+        List<Dependency> dependencies = ((Model) target).getDependencies();
+        
+        DependencyProcessor processor = new DependencyProcessor();
+        if ( ( p == null || p.getDependencies().isEmpty() ) && !c.getDependencies().isEmpty())
+        {
+            for ( Dependency dependency : c.getDependencies() )
+            {
+                processor.process( null, dependency, dependencies, isChildMostSpecialized );
+            }
+        }
+        else
+        {
+            if ( !c.getDependencies().isEmpty() )
+            {
+                List<Dependency> parentDependencies = new ArrayList<Dependency>();
+                for ( Dependency d1 : c.getDependencies() )
+                {
+                    for ( Dependency d2 : p.getDependencies() )
+                    {
+                        if(match(d1, d2))
+                        {                            
+                            processor.process( d2, d1, dependencies, isChildMostSpecialized );//JOIN
+                        }
+                        else
+                        {
+                            processor.process( null, d1, dependencies, isChildMostSpecialized );
+                            parentDependencies.add( d2 );
+                        }
+                    }
+                }
+                
+                for(Dependency d2 : parentDependencies)
+                {
+                    processor.process( d2, null, dependencies, isChildMostSpecialized );    
+                }
+            }
+            else
+            {
+                for(Dependency d2 :  p.getDependencies())
+                {
+                    processor.process( d2, null, dependencies, isChildMostSpecialized );    
+                }               
+            }
+        }
+    }
+    
+    private static boolean match( Dependency d1, Dependency d2 )
+    {
+        // TODO: Version ranges ?
+        if ( getId( d1 ).equals( getId( d2 ) ) )
+        {
+            return ( d1.getVersion() == null ? "" : d1.getVersion() ).equals( d2.getVersion() == null ? ""
+                            : d2.getVersion() );
+        }
+        return false;
+    }
+
+    private static String getId( Dependency d )
+    {
+        StringBuilder sb = new StringBuilder();
+        sb.append( d.getGroupId() ).append( ":" ).append( d.getArtifactId() ).append( ":" ).append(
+                                                                                                    d.getType() == null ? "jar"
+                                                                                                                    : "" ).append(
+                                                                                                                                   ":" ).append(
+                                                                                                                                                 d.getClassifier() );
+        return sb.toString();
+    }      

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 UPD42 INS21 INS60 INS60 INS25 INS60 INS60 INS25 INS43 INS42 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS60 INS21 INS41 INS48 INS43 INS59 INS43 INS59 INS27 INS8 INS74 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS32 INS8 INS9 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS33 INS42 INS33 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS36 INS38 INS70 INS25 INS32 INS42 INS32 INS41 INS42 INS42 INS14 INS32 INS42 INS32 INS42 INS42 INS43 INS42 INS7 INS42 INS42 INS36 INS42 INS43 INS27 INS32 INS44 INS32 INS8 INS38 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS11 INS11 INS42 INS27 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS21 INS32 INS60 INS70 INS70 INS70 INS36 INS42 INS16 INS42 INS32 INS42 INS16 INS43 INS42 INS43 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS74 INS59 INS44 INS32 INS8 INS44 INS42 INS8 INS44 INS32 INS8 INS16 INS27 INS45 INS32 INS32 INS42 INS45 INS27 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS70 INS43 INS42 INS21 INS43 INS42 INS42 INS42 INS21 INS27 INS45 INS32 INS32 INS33 INS42 INS42 INS32 INS42 INS32 INS32 INS33 INS42 INS42 INS74 INS42 INS44 INS32 INS8 INS42 INS32 INS42 INS32 INS32 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 DEL8