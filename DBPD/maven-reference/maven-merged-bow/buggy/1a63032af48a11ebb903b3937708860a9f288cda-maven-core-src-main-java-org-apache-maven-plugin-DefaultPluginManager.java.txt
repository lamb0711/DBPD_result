PR: MNG-469
configure reports according to spec:
- <reporting> section affects reports run through site and standalone
- <build> section affects reports run standalone and overrides anything already in <reporting>
- command line parameters rule all



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191298 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.ReportSet;
-        PlexusContainer pluginContainer = null;
-
-        Mojo plugin = null;
-
+        PlexusContainer pluginContainer = getPluginContainer( mojoDescriptor.getPluginDescriptor() );
+
+        Mojo plugin = null;
+
-            String pluginKey = mojoDescriptor.getPluginDescriptor().getPluginLookupKey();
-
-            pluginContainer = container.getChildContainer( pluginKey );
-
-            if ( pluginContainer == null )
-            {
-                throw new PluginConfigurationException( "Cannot find PlexusContainer for plugin: " + pluginKey );
-            }
-
-            plugin = (Mojo) pluginContainer.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
-            plugin.setLog( mojoLogger );
-
-
+            Xpp3Dom reportDom = session.getProject().getReportConfiguration( groupId, artifactId, executionId );
+            dom = Xpp3Dom.mergeXpp3Dom( dom, reportDom );
-            PlexusConfiguration pomConfiguration;
-            if ( dom == null )
-            {
-                pomConfiguration = new XmlPlexusConfiguration( "configuration" );
-            }
-            else
-            {
-                pomConfiguration = new XmlPlexusConfiguration( dom );
-            }
-
-            // Validate against non-editable (@readonly) parameters, to make sure users aren't trying to
-            // override in the POM.
-            validatePomConfiguration( mojoDescriptor, pomConfiguration );
-
-            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration, mojoDescriptor
-                .getMojoConfiguration() );
-
-            // TODO: plexus
-            //            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
-            //                                                                          mojoDescriptor.getConfiguration() );
-
-            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, pluginDescriptor,
-                                                                                              pathTranslator,
-                                                                                              getLogger() );
-
-            checkRequiredParameters( mojoDescriptor, mergedConfiguration, expressionEvaluator, plugin );
-
-            populatePluginFields( plugin, mojoDescriptor, mergedConfiguration, pluginContainer, expressionEvaluator );
-
-            // !! This is ripe for refactoring to an aspect.
-            // Event monitoring.
-            String event = MavenEvents.MOJO_EXECUTION;
-            EventDispatcher dispatcher = session.getEventDispatcher();
-
-            String goalExecId = goalName;
-
-            if ( mojoExecution.getExecutionId() != null )
-            {
-                goalExecId += " {execution: " + mojoExecution.getExecutionId() + "}";
-            }
-
-            dispatcher.dispatchStart( event, goalExecId );
-            try
-            {
-                plugin.execute();
-
-                dispatcher.dispatchEnd( event, goalExecId );
-            }
-            catch ( MojoExecutionException e )
-            {
-                session.getEventDispatcher().dispatchError( event, goalExecId, e );
-
-                throw e;
-            }
-            // End event monitoring.
-
+            plugin = getConfiguredMojo( pluginContainer, mojoDescriptor, session, dom );
+
+        // !! This is ripe for refactoring to an aspect.
+        // Event monitoring.
+        String event = MavenEvents.MOJO_EXECUTION;
+        EventDispatcher dispatcher = session.getEventDispatcher();
+
+        String goalExecId = goalName;
+
+        if ( mojoExecution.getExecutionId() != null )
+        {
+            goalExecId += " {execution: " + mojoExecution.getExecutionId() + "}";
+        }
+
+        dispatcher.dispatchStart( event, goalExecId );
+        try
+        {
+            plugin.execute();
+
+            dispatcher.dispatchEnd( event, goalExecId );
+        }
+        catch ( MojoExecutionException e )
+        {
+            session.getEventDispatcher().dispatchError( event, goalExecId, e );
+
+            throw e;
+        }
+    public List getReports( String groupId, String artifactId, String version, ReportSet reportSet,
+                            MavenSession session )
+        throws PluginManagerException, PluginVersionResolutionException, PluginConfigurationException
+    {
+        PluginDescriptor pluginDescriptor = getPluginDescriptor( groupId, artifactId, version );
+
+        PlexusContainer pluginContainer = getPluginContainer( pluginDescriptor );
+
+        List reports = new ArrayList();
+        for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext(); )
+        {
+            MojoDescriptor mojoDescriptor = (MojoDescriptor) i.next();
+
+            // TODO: check ID is correct for reports
+            // TODO: this returns mojos that aren't reports
+            // if the POM configured no reports, give all from plugin
+            if ( reportSet == null || reportSet.getReports().contains( mojoDescriptor.getGoal() ) )
+            {
+                try
+                {
+                    String id = null;
+                    if ( reportSet != null )
+                    {
+                        id = reportSet.getId();
+                    }
+                    MojoExecution mojoExecution = new MojoExecution( mojoDescriptor, id );
+
+                    String executionId = mojoExecution.getExecutionId();
+                    Xpp3Dom dom = session.getProject().getReportConfiguration( groupId, artifactId, executionId );
+
+                    reports.add( getConfiguredMojo( pluginContainer, mojoDescriptor, session, dom ) );
+                }
+                catch ( ComponentLookupException e )
+                {
+                    throw new PluginManagerException( "Error looking up plugin: ", e );
+                }
+            }
+        }
+        return reports;
+    }
+
+    private PlexusContainer getPluginContainer( PluginDescriptor pluginDescriptor )
+        throws PluginManagerException
+    {
+        String pluginKey = pluginDescriptor.getPluginLookupKey();
+
+        PlexusContainer pluginContainer = container.getChildContainer( pluginKey );
+
+        if ( pluginContainer == null )
+        {
+            throw new PluginManagerException( "Cannot find PlexusContainer for plugin: " + pluginKey );
+        }
+        return pluginContainer;
+    }
+
+    private Mojo getConfiguredMojo( PlexusContainer pluginContainer, MojoDescriptor mojoDescriptor,
+                                    MavenSession session, Xpp3Dom dom )
+        throws ComponentLookupException, PluginConfigurationException
+    {
+        Mojo plugin = (Mojo) pluginContainer.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
+        plugin.setLog( mojoLogger );
+
+        PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
+
+        PlexusConfiguration pomConfiguration;
+        if ( dom == null )
+        {
+            pomConfiguration = new XmlPlexusConfiguration( "configuration" );
+        }
+        else
+        {
+            pomConfiguration = new XmlPlexusConfiguration( dom );
+        }
+
+        // Validate against non-editable (@readonly) parameters, to make sure users aren't trying to
+        // override in the POM.
+        validatePomConfiguration( mojoDescriptor, pomConfiguration );
+
+        PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration, mojoDescriptor
+            .getMojoConfiguration() );
+
+        // TODO: plexus
+        //            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
+        //                                                                          mojoDescriptor.getConfiguration() );
+
+        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, pluginDescriptor,
+                                                                                          pathTranslator, getLogger() );
+
+        checkRequiredParameters( mojoDescriptor, mergedConfiguration, expressionEvaluator, plugin );
+
+        populatePluginFields( plugin, mojoDescriptor, mergedConfiguration, pluginContainer, expressionEvaluator );
+        return plugin;
+    }
+
+        // TODO: remove doxia
-            new String[]{"classworlds", "maven-artifact", "maven-core", "maven-model", "maven-monitor", "maven-plugin-api", "maven-plugin-descriptor", "maven-project", "maven-settings", "plexus-container-default", "plexus-utils", "wagon-provider-api", "wagon-ssh", "wagon-http-lightweight", "wagon-file"} );
+            new String[]{"classworlds", "maven-artifact", "maven-core", "maven-model", "maven-monitor", "maven-plugin-api", "maven-plugin-descriptor", "maven-project", "maven-settings", "plexus-container-default", "plexus-utils", "wagon-provider-api", "wagon-ssh", "wagon-http-lightweight", "wagon-file", "doxia-core", "maven-reporting-api"} );

INS26 INS40 INS31 INS31 INS31 MOV60 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 MOV43 MOV8 MOV60 MOV8 MOV60 MOV60 MOV60 MOV25 MOV21 MOV54 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS24 INS41 INS42 INS43 INS42 INS42 INS60 INS60 MOV25 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS41 MOV43 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 UPD42 MOV32 INS60 MOV60 MOV60 MOV60 MOV60 MOV60 INS60 INS21 MOV21 MOV54 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 MOV11 UPD42 INS43 INS59 INS43 INS59 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS11 INS27 INS32 INS54 INS43 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS32 INS42 INS33 INS32 INS42 INS32 INS8 INS12 INS42 INS45 INS45 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS60 INS21 INS44 INS8 INS32 INS42 INS21 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS43 INS42 INS53 INS42 MOV32 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS7 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21