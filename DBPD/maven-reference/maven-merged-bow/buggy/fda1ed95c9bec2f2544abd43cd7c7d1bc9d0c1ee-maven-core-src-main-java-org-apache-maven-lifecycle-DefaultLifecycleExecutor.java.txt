o changed the inheritanceApplied flag to be set by default, and unset if the plugin is merged to the child without <inherit/> being specified...this makes it work with isolated POMs.
o changed the semantics of when the unsetInheritanceApplied() method is called...it's now only when <inherit/> is NOT set.
o changed the default inheritByDefault attribute on MojoDescriptor to be true
o added inheritByDefault to PluginDescriptor (even though we don't have tools supporting it yet), with semantics identical to MojoDescriptor
o added generator/builder support for the inheritByDefault attribute of PluginDescriptor
o added calculation of inheritanceApplied || inheritByDefault to lifecycle executor before allowing plugins/mojos to bind.
o Everything builds, but we need some sort of IT to test the finer points.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@178836 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Goal;
-
-        // ----------------------------------------------------------------------
-        // Look to see if the plugin configuration specifies particular mojos
-        // within the plugin. If this is the case then simply configure the
-        // mojos the user has specified and ignore the rest.
-        // ----------------------------------------------------------------------
-
-        for ( Iterator j = pluginDescriptor.getMojos().iterator(); j.hasNext(); )
+        
+        if( plugin.isInheritanceApplied() || pluginDescriptor.isInheritedByDefault() )
-            MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();
+            // ----------------------------------------------------------------------
+            // Look to see if the plugin configuration specifies particular mojos
+            // within the plugin. If this is the case then simply configure the
+            // mojos the user has specified and ignore the rest.
+            // ----------------------------------------------------------------------
-            // TODO: remove later
-            if ( mojoDescriptor.getGoal() == null )
+            Map goalMap = plugin.getGoalsAsMap();
+            
+            for ( Iterator j = pluginDescriptor.getMojos().iterator(); j.hasNext(); )
-                throw new LifecycleExecutionException(
-                    "The plugin " + artifactId + " was built with an older version of Maven" );
-            }
+                MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();
-            if ( plugin.getGoals().isEmpty() || plugin.getGoalsAsMap().containsKey( mojoDescriptor.getGoal() ) )
-            {
-                configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );
+                // TODO: remove later
+                if ( mojoDescriptor.getGoal() == null )
+                {
+                    throw new LifecycleExecutionException(
+                        "The plugin " + artifactId + " was built with an older version of Maven" );
+                }
+                
+                Goal goal = (Goal) goalMap.get( mojoDescriptor.getGoal() );
+
+                if( goalMap.isEmpty() )
+                {
+                    configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );
+                }
+                else if ( goal != null )
+                {
+                    // We have to check to see that the inheritance rules have been applied before binding this mojo.
+                    if( goal.isInheritanceApplied() || mojoDescriptor.isInheritedByDefault() )
+                    {
+                        configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );
+                    }
+                }

INS26 INS40 INS25 INS27 INS8 INS32 INS32 INS60 MOV24 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS42 MOV32 INS60 INS25 INS43 INS59 INS32 MOV8 INS25 INS42 INS42 INS11 INS42 INS42 INS27 INS8 INS43 MOV32 INS42 INS33 MOV25 INS42 UPD42 INS42 INS8 INS32 INS32 INS21 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 DEL32 DEL32