turn on md5 checksum tests on download

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@164054 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.ChecksumFailedException;
-import java.util.ArrayList;
-        throws TransferFailedException, ResourceDoesNotExistException
+        throws TransferFailedException, ResourceDoesNotExistException, ChecksumFailedException
-        // ----------------------------------------------------------------------
-        // These can certainly be configurable ... registering listeners
-        // ...
-
-        //ChecksumObserver md5SumObserver = new ChecksumObserver();
-
-        // ----------------------------------------------------------------------
-
-        //wagon.addTransferListener( md5SumObserver );
-
+        // TODO: configure on repository
+        ChecksumObserver checksumObserver;
+        try
+        {
+            checksumObserver = new ChecksumObserver( "MD5" );
+            wagon.addTransferListener( checksumObserver );
+        }
+        catch ( NoSuchAlgorithmException e )
+        {
+            throw new TransferFailedException( "Unable to add checksum methods", e );
+        }
+
+
+            try
+            {
+                // grab it first, because it's about to change...
+                String actualChecksum = checksumObserver.getActualChecksum();
+
+                File checksumFile = new File( destination + ".md5" );
+                wagon.get( remotePath + ".md5", checksumFile );
+
+                String expectedChecksum = FileUtils.fileRead( checksumFile );
+                if ( !expectedChecksum.equals( actualChecksum ) )
+                {
+                    // TODO: optionally retry?
+                    throw new ChecksumFailedException(
+                        "Checksum failed on download: local = " + actualChecksum + "; remote = " +
+                        expectedChecksum );
+                }
+            }
+            catch ( ResourceDoesNotExistException e )
+            {
+                getLogger().warn( "No checksum exists - assuming a valid download" );
+            }
+            catch ( IOException e )
+            {
+                getLogger().error( "Unable to read checksum - assuming a valid download", e );
+            }
-        // The temporary file is named destination + ".tmp" and is done this
-        // way to ensure
-        // that the temporary file is in the same file system as the
-        // destination because the
+        // The temporary file is named destination + ".tmp" and is done this way to ensure
+        // that the temporary file is in the same file system as the destination because the
-        // So we will attempt
-        // to do a File.renameTo for efficiency and atomicity, if this fails
-        // then we will use
-        // a brute force copy and delete the temporary file.
+        // So we will attempt to do a File.renameTo for efficiency and atomicity, if this fails
+        // then we will use a brute force copy and delete the temporary file.

MOV26 UPD40 INS43 INS42 INS60 INS54 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS21 INS21 INS44 INS8 MOV21 MOV21 INS54 INS7 INS32 INS43 INS42 INS53 INS8 INS12 INS12 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS60 INS60 INS21 INS60 INS25 INS44 INS8 INS44 INS8 INS43 INS45 INS43 INS45 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS38 INS8 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS32 INS53 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS27 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS42 INS45 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS45 INS42 DEL8