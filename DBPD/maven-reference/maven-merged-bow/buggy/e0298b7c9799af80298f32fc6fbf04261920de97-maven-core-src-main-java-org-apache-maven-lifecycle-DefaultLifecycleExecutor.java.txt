o first pass at setting up error handling for each possible error condition
 - this resulted in cleaning up some exceptions in plexus so that they might message could be surfaced in Maven
o move the plugin prefix searching to the lifecycle executor and get it out of the plugin manager
o add capability to the RepositorySystem to get plain resources from a repository. I'm going simple with the repository group
  metadata and I will just get the file directly as the only implementation is the plugin group metadata. the system is 
  not easily or generally extensible so i'll just take what I need



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@776412 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.CycleDetectedInPluginGraphException;
-import org.apache.maven.plugin.PluginLoaderException;
+import org.apache.maven.plugin.MojoNotFoundException;
+import org.apache.maven.plugin.PluginDescriptorParsingException;
+import org.apache.maven.plugin.PluginNotFoundException;
+import org.apache.maven.plugin.PluginResolutionException;
-//TODO: Inside an IDE we are replacing the notion of our reactor with a workspace. In both of these cases
-//      we need to layer these as local repositories.
-//TODO: Cache the lookups of the PluginDescriptors
-        
+                
-                    catch ( LifecycleExecutionException e )
+                    catch ( Exception e )
-                    catch ( ArtifactResolutionException e )
+                    catch ( ArtifactNotFoundException e )
-                    catch ( ArtifactNotFoundException e )
+                    catch ( ArtifactResolutionException e )
-        throws LifecycleExecutionException
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException
-                // if not then i need to grab the mojo descriptor and look at
-                // the phase that is specified
+                // if not then i need to grab the mojo descriptor and look at the phase that is specified
-                        MojoDescriptor md = getMojoDescriptor( s, session.getCurrentProject(), session.getLocalRepository() );
+                        MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, session.getLocalRepository(), project.getRemoteArtifactRepositories() );
-                        if ( md.getPhase() != null && phaseToMojoMapping.get( md.getPhase() ) != null )
+                        if ( mojoDescriptor.getPhase() != null && phaseToMojoMapping.get( mojoDescriptor.getPhase() ) != null )
-                            phaseToMojoMapping.get( md.getPhase() ).add( s );
+                            phaseToMojoMapping.get( mojoDescriptor.getPhase() ).add( s );
-        
-        // We only want to execute up to and including the specified lifecycle phase.
-        // if ( phase.equals( lifecyclePhase ) )
-        //{
-        //    break;
-        //}
-        
+                
-            MojoDescriptor mojoDescriptor = getMojoDescriptor( mojo, project, session.getLocalRepository() );
+            
+            String[] s = StringUtils.split( mojo, ":" );
+            
+            MojoDescriptor mojoDescriptor = getMojoDescriptor( mojo, session );
-    MojoDescriptor getMojoDescriptor( String task, MavenProject project, ArtifactRepository localRepository )
-        throws LifecycleExecutionException
+    MojoDescriptor getMojoDescriptor( String task, MavenSession session ) 
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, CycleDetectedInPluginGraphException, MojoNotFoundException
-        String goal;
+        MavenProject project = session.getCurrentProject();
-        Plugin plugin;
+        String goal = null;
+        
+        Plugin plugin = null;
-            plugin = pluginManager.findPluginForPrefix( prefix, localRepository, project.getRemoteArtifactRepositories() );
-
-            // Search plugin in the current POM
-            if ( plugin == null )
-            {
-                for ( Plugin buildPlugin : project.getBuildPlugins() )
-                {
-                    PluginDescriptor desc;
-                    
-                    try
-                    {
-                        desc = pluginManager.loadPlugin( buildPlugin, localRepository, project.getRemoteArtifactRepositories() );
-                    }
-                    catch ( PluginLoaderException e )
-                    {
-                        throw new LifecycleExecutionException( "Error loading PluginDescriptor.", e );                        
-                    }
-
-                    if ( prefix.equals( desc.getGoalPrefix() ) )
-                    {
-                        plugin = buildPlugin;
-                    }
-                }
-            }
+            plugin = findPluginForPrefix( prefix, session );
-        else
-        {
-            String message = "Invalid task '" + task + "': you must specify a valid lifecycle phase, or" + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
-            throw new LifecycleExecutionException( message );
-        }
-        for ( Plugin buildPlugin : project.getBuildPlugins() )
-        {
-            if ( buildPlugin.getKey().equals( plugin.getKey() ) )
-            {
-                if ( plugin.getVersion() == null || plugin.getVersion().equals( buildPlugin.getVersion() ) )
-                {
-                    plugin = buildPlugin;
-                }
-                break;
-            }
-        }
-
-        MojoDescriptor mojoDescriptor;
-        
-        try
-        {                        
-            mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, localRepository, project.getRemoteArtifactRepositories() );
-        }
-        catch ( PluginLoaderException e )
-        {
-            throw new LifecycleExecutionException( "Error loading MojoDescriptor.", e );
-        }        
-                
-        return mojoDescriptor;
+        return pluginManager.getMojoDescriptor( plugin, goal, session.getLocalRepository(), project.getRemoteArtifactRepositories() );
-            
-    // org.apache.maven.plugins:maven-remote-resources-plugin:1.0:process
-    MojoDescriptor getMojoDescriptor( String groupId, String artifactId, String version, String goal, MavenProject project, ArtifactRepository localRepository )
-        throws LifecycleExecutionException
-    {        
-        Plugin plugin = new Plugin();
-        plugin.setGroupId( groupId );
-        plugin.setArtifactId( artifactId );
-        plugin.setVersion( version );        
-
-        MojoDescriptor mojoDescriptor;
-    
-        //need to do the active project thing as the site plugin is referencing itself
-                        
-        try
-        {
-            mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, localRepository, project.getRemoteArtifactRepositories() );
-        }
-        catch ( PluginLoaderException e )
-        {
-            throw new LifecycleExecutionException( "Error loading MojoDescriptor.", e );
-        }        
-        return mojoDescriptor;
-    }    
-    
-    public void populateDefaultConfigurationForPlugins( Collection<Plugin> plugins, MavenProject project, ArtifactRepository localRepository ) 
+    public void populateDefaultConfigurationForPlugins( Collection<Plugin> plugins, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories ) 
-                    Xpp3Dom dom = getDefaultPluginConfiguration( p.getGroupId(), p.getArtifactId(), p.getVersion(), goal, project, localRepository );
+                    Xpp3Dom dom = getDefaultPluginConfiguration( p.getGroupId(), p.getArtifactId(), p.getVersion(), goal, localRepository, remoteRepositories );
-    public Xpp3Dom getDefaultPluginConfiguration( String groupId, String artifactId, String version, String goal, MavenProject project, ArtifactRepository localRepository ) 
+    private Xpp3Dom getDefaultPluginConfiguration( String groupId, String artifactId, String version, String goal, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories ) 
-        return convert( getMojoDescriptor( groupId, artifactId, version, goal, project, localRepository ) );
+        MojoDescriptor mojoDescriptor;
+        
+        try
+        {
+            mojoDescriptor = pluginManager.getMojoDescriptor( groupId, artifactId, version, goal, localRepository, remoteRepositories );
+        }
+        catch ( PluginNotFoundException e )
+        {
+            throw new LifecycleExecutionException( "Error getting default plugin information: ", e );
+        }
+        catch ( PluginResolutionException e )
+        {
+            throw new LifecycleExecutionException( "Error getting default plugin information: ", e );
+        }
+        catch ( PluginDescriptorParsingException e )
+        {
+            throw new LifecycleExecutionException( "Error getting default plugin information: ", e );
+        }
+        catch ( CycleDetectedInPluginGraphException e )
+        {
+            throw new LifecycleExecutionException( "Error getting default plugin information: ", e );
+        }
+        catch ( MojoNotFoundException e )
+        {
+            throw new LifecycleExecutionException( "Error getting default plugin information: ", e );
+        } 
+        
+        return convert( mojoDescriptor );
-    
-    
+        
+    }  
+    
+    // This would ideally be kept up
+    public Plugin findPluginForPrefix( String prefix, MavenSession session )
+    {
+        // [prefix]:[goal]
+        //
+        // eclipse:eclipse
+        // idea:idea
+        
+        return null;
+        //return getByPrefix( prefix, session.getPluginGroups(), project.getRemoteArtifactRepositories(), session.getLocalRepository() );

MOV26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 UPD40 INS40 MOV44 INS43 UPD43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 UPD43 MOV60 INS83 MOV43 INS42 MOV44 MOV44 MOV44 MOV44 INS44 MOV43 MOV43 UPD42 INS42 UPD42 INS42 INS42 INS42 UPD43 UPD42 INS42 INS42 UPD42 MOV42 INS42 UPD42 INS60 INS60 INS41 INS74 INS42 INS74 UPD42 MOV42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 MOV43 INS59 MOV43 INS59 MOV43 INS32 INS43 INS43 INS43 INS43 MOV12 INS12 MOV12 INS12 INS32 UPD42 UPD42 INS33 INS60 UPD42 INS42 INS32 INS42 INS33 UPD42 INS33 MOV42 MOV42 MOV42 MOV42 MOV32 MOV32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS44 MOV8 INS44 INS8 INS42 INS42 INS5 INS59 UPD42 MOV42 UPD42 MOV42 UPD43 UPD43 INS43 INS42 UPD43 INS43 INS42 INS53 MOV43 INS85 INS42 INS32 UPD42 UPD42 INS42 UPD42 INS42 INS14 INS42 INS42 INS42 INS45 UPD42 UPD42 INS42 INS42 UPD42 UPD42 MOV42 UPD45 UPD45 INS45 UPD42 UPD45 MOV43 INS45 INS42 MOV12 INS43 UPD42 UPD42 INS42 UPD42 MOV32 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL54 DEL42 DEL41 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32