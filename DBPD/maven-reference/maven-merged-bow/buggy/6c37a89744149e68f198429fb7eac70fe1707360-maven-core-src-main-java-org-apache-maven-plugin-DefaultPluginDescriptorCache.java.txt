[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-import org.apache.maven.artifact.repository.RepositoryRequest;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.repository.LocalRepository;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.repository.WorkspaceRepository;
-    public Key createKey( Plugin plugin, RepositoryRequest repositoryRequest )
+    public Key createKey( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
-        return new CacheKey( plugin, repositoryRequest );
-    }
-
-    public void put( Key cacheKey, PluginDescriptor pluginDescriptor )
-    {
-        descriptors.put( cacheKey, clone( pluginDescriptor ) );
+        return new CacheKey( plugin, repositories, session );
+    public void put( Key cacheKey, PluginDescriptor pluginDescriptor )
+    {
+        descriptors.put( cacheKey, clone( pluginDescriptor ) );
+    }
+
-        private final List<ArtifactRepository> repositories;
+        private final WorkspaceRepository workspace;
+
+        private final LocalRepository localRepo;
+
+        private final List<RemoteRepository> repositories;
-        public CacheKey( Plugin plugin, RepositoryRequest repositoryRequest )
+        public CacheKey( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
-            repositories = new ArrayList<ArtifactRepository>( repositoryRequest.getRemoteRepositories().size() + 1 );
-            repositories.add( repositoryRequest.getLocalRepository() );
-            repositories.addAll( repositoryRequest.getRemoteRepositories() );
+            workspace = CacheUtils.getWorkspace( session );
+            localRepo = session.getLocalRepository();
+            this.repositories = new ArrayList<RemoteRepository>( repositories.size() );
+            for ( RemoteRepository repository : repositories )
+            {
+                if ( repository.isRepositoryManager() )
+                {
+                    this.repositories.addAll( repository.getMirroredRepositories() );
+                }
+                else
+                {
+                    this.repositories.add( repository );
+                }
+            }
-            hash = hash * 31 + repositoriesHashCode( repositories );
+            hash = hash * 31 + hash( workspace );
+            hash = hash * 31 + localRepo.hashCode();
+            hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
-            return this.artifactId.equals( that.artifactId ) && this.groupId.equals( that.groupId )
-                && this.version.equals( that.version ) && repositoriesEquals( this.repositories, that.repositories );
+            return eq( this.artifactId, that.artifactId ) && eq( this.groupId, that.groupId )
+                && eq( this.version, that.version ) && eq( this.localRepo, that.localRepo )
+                && eq( this.workspace, that.workspace )
+                && CacheUtils.repositoriesEquals( this.repositories, that.repositories );
-        private static int repositoryHashCode( ArtifactRepository repository )
+        private static int hash( Object obj )
-            int result = 17;
-            result = 31 * result + ( repository.getId() != null ? repository.getId().hashCode() : 0 );
-            return result;
-        }
-
-        private static int repositoriesHashCode( List<ArtifactRepository> repositories )
-        {
-            int result = 17;
-            for ( ArtifactRepository repository : repositories )
-            {
-                result = 31 * result + repositoryHashCode( repository );
-            }
-            return result;
-        }
-
-        private static boolean repositoryEquals( ArtifactRepository r1, ArtifactRepository r2 )
-        {
-            if ( r1 == r2 )
-            {
-                return true;
-            }
-
-            return eq( r1.getId(), r2.getId() ) && eq( r1.getUrl(), r2.getUrl() )
-                && repositoryPolicyEquals( r1.getReleases(), r2.getReleases() )
-                && repositoryPolicyEquals( r1.getSnapshots(), r2.getSnapshots() );
-        }
-
-        private static boolean repositoryPolicyEquals( ArtifactRepositoryPolicy p1, ArtifactRepositoryPolicy p2 )
-        {
-            if ( p1 == p2 )
-            {
-                return true;
-            }
-
-            return p1.isEnabled() == p2.isEnabled() && eq( p1.getUpdatePolicy(), p2.getUpdatePolicy() );
-        }
-
-        private static boolean repositoriesEquals( List<ArtifactRepository> r1, List<ArtifactRepository> r2 )
-        {
-            if ( r1.size() != r2.size() )
-            {
-                return false;
-            }
-
-            for ( Iterator<ArtifactRepository> it1 = r1.iterator(), it2 = r2.iterator(); it1.hasNext(); )
-            {
-                if ( !repositoryEquals( it1.next(), it2.next() ) )
-                {
-                    return false;
-                }
-            }
-
-            return true;
+            return obj != null ? obj.hashCode() : 0;

MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 MOV44 INS23 INS23 UPD74 UPD42 UPD43 UPD42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 UPD74 INS44 UPD39 UPD42 UPD43 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 INS74 UPD42 INS43 INS42 INS21 INS21 INS70 INS21 INS21 INS43 INS42 INS41 UPD42 UPD42 INS42 UPD42 MOV43 INS43 INS42 INS7 INS7 INS44 INS42 INS8 INS7 INS7 UPD42 MOV42 INS16 UPD42 MOV42 INS42 INS32 INS42 INS32 INS22 INS43 INS42 INS25 INS42 INS27 INS42 INS27 MOV22 MOV22 MOV22 INS32 INS32 INS27 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS52 INS42 UPD74 INS32 INS42 INS32 INS8 INS8 INS27 INS32 INS27 INS32 UPD42 UPD42 UPD42 INS42 INS22 INS40 INS42 INS22 INS40 INS42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 UPD43 UPD42 MOV42 MOV42 INS42 INS42 MOV21 INS21 UPD42 UPD42 INS42 INS34 INS42 INS42 INS42 INS34 INS42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS52 INS42 UPD42 INS32 INS22 UPD42 INS22 UPD42 MOV42 INS42 INS52 INS42 UPD42 UPD42 INS52 INS42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL83 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL34 DEL59 DEL60 DEL42 DEL34 DEL42 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL34 DEL42 DEL27 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL41 DEL8 DEL31 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL24 DEL9 DEL41