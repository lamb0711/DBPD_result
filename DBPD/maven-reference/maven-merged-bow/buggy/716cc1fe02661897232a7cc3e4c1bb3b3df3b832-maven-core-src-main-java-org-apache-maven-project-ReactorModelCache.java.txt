[MNG-5669] same pom.xml is read multiple times

+import org.apache.maven.building.Source;
+import java.util.Objects;
-    private final Map<CacheKey, Object> models = new ConcurrentHashMap<>( 256 );
+    private final Map<Object, Object> models = new ConcurrentHashMap<>( 256 );
+    @Override
-        return models.get( new CacheKey( groupId, artifactId, version, tag ) );
+        return models.get( new GavCacheKey( groupId, artifactId, version, tag ) );
+    @Override
-        models.put( new CacheKey( groupId, artifactId, version, tag ), data );
+        models.put( new GavCacheKey( groupId, artifactId, version, tag ), data );
-    private static final class CacheKey
+    @Override
+    public Object get( Source source, String tag )
+    {
+        return models.get( new SourceCacheKey( source, tag ) );
+    }
+
+    @Override
+    public void put( Source source, String tag, Object data )
+    {
+        models.put( new SourceCacheKey( source, tag ), data );
+    }
+
+    private static final class GavCacheKey
-        CacheKey( String groupId, String artifactId, String version, String tag )
+        GavCacheKey( String groupId, String artifactId, String version, String tag )
-            if ( !( obj instanceof CacheKey ) )
+            if ( !( obj instanceof GavCacheKey ) )
-            CacheKey that = (CacheKey) obj;
+            GavCacheKey that = (GavCacheKey) obj;
+    
+    private static final class SourceCacheKey
+    {
+        private final Source source;
+        
+        private final String tag;
+        
+        private final int hashCode;
+
+        SourceCacheKey( Source source, String tag )
+        {
+            this.source = source;
+            this.tag = tag;
+            this.hashCode = Objects.hash( source, tag );
+        }
+
+        @Override
+        public int hashCode()
+        {
+            return hashCode;
+        }
+
+        @Override
+        public boolean equals( Object obj )
+        {
+            if ( this == obj ) 
+            {
+                return true;
+            }
+            if ( !( obj instanceof SourceCacheKey ) )
+            {
+                return false;
+            }
+            
+            SourceCacheKey other = (SourceCacheKey) obj;
+            if ( !Objects.equals( this.source, other.source ) )
+            {
+                    return false;
+            }
+            
+            if ( !Objects.equals( this.tag, other.tag ) )
+            {
+                    return false;
+            }
+
+            return true;
+        }
+    }

INS26 INS26 INS40 INS40 INS31 INS31 INS55 UPD74 INS78 INS78 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 UPD42 INS83 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 UPD43 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 UPD42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS41 INS42 INS43 INS42 INS25 INS25 INS60 INS25 INS25 INS41 INS42 INS42 INS14 INS42 INS42 INS14 INS42 UPD43 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS27 INS8 INS38 INS8 INS43 INS59 INS38 INS8 INS38 INS8 INS9 UPD43 UPD43 INS43 INS42 INS42 INS43 INS42 INS42 UPD42 INS22 INS42 INS22 INS42 INS22 INS32 INS52 INS42 INS41 INS36 INS41 INS42 INS42 INS11 INS32 INS41 INS32 INS41 UPD42 UPD42 INS42 INS42 UPD43 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS9 INS62 INS9 INS43 INS42 INS42 INS42 INS22 INS40 INS9 INS42 INS42 INS22 INS40 INS9 UPD43 UPD42 INS42 INS43 INS42 INS52 INS42 INS52 INS42 UPD42 INS42