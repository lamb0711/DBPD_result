Cleanup of code. Removed last of dynamic/concrete code.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@694598 13f79535-47bb-0310-9956-ffa450edef68

-    private void deepCopy( MavenProject project )
-    {
-        // disown the parent
-
-        // copy fields
-        setFile( project.getFile() );
-
-        // don't need a deep copy, they don't get modified or added/removed to/from - but make them unmodifiable to be
-        // sure!
-        if ( project.getDependencyArtifacts() != null )
-        {
-            setDependencyArtifacts( Collections.unmodifiableSet( project.getDependencyArtifacts() ) );
-        }
-
-        if ( project.getArtifacts() != null )
-        {
-            setArtifacts( Collections.unmodifiableSet( project.getArtifacts() ) );
-        }
-
-        if ( project.getParentFile() != null )
-        {
-            parentFile = new File( project.getParentFile().getAbsolutePath() );
-        }
-
-        if ( project.getReportArtifacts() != null )
-        {
-            setReportArtifacts( Collections.unmodifiableSet( project.getReportArtifacts() ) );
-        }
-
-        if ( project.getExtensionArtifacts() != null )
-        {
-            setExtensionArtifacts( Collections.unmodifiableSet( project.getExtensionArtifacts() ) );
-        }
-
-        setParentArtifact( ( project.getParentArtifact() ) );
-
-        if ( project.getRemoteArtifactRepositories() != null )
-        {
-            setRemoteArtifactRepositories( Collections.unmodifiableList( project.getRemoteArtifactRepositories() ) );
-        }
-
-        if ( project.getPluginArtifactRepositories() != null )
-        {
-            setPluginArtifactRepositories(
-                ( Collections.unmodifiableList( project.getPluginArtifactRepositories() ) ) );
-        }
-
-        if ( project.getCollectedProjects() != null )
-        {
-            setCollectedProjects( ( Collections.unmodifiableList( project.getCollectedProjects() ) ) );
-        }
-
-        if ( project.getActiveProfiles() != null )
-        {
-            setActiveProfiles( ( Collections.unmodifiableList( project.getActiveProfiles() ) ) );
-        }
-
-        if ( project.getAttachedArtifacts() != null )
-        {
-            // clone properties modifyable by plugins in a forked lifecycle
-            setAttachedArtifacts( new ArrayList( project.getAttachedArtifacts() ) );
-        }
-
-        if ( project.getCompileSourceRoots() != null )
-        {
-            // clone source roots
-            setCompileSourceRoots( ( new ArrayList( project.getCompileSourceRoots() ) ) );
-        }
-
-        if ( project.getTestCompileSourceRoots() != null )
-        {
-            setTestCompileSourceRoots( ( new ArrayList( project.getTestCompileSourceRoots() ) ) );
-        }
-
-        if ( project.getScriptSourceRoots() != null )
-        {
-            setScriptSourceRoots( ( new ArrayList( project.getScriptSourceRoots() ) ) );
-        }
-
-        setModel( ( ModelUtils.cloneModel( project.getModel() ) ) );
-
-        if ( project.getOriginalModel() != null )
-        {
-            setOriginalModel( ( ModelUtils.cloneModel( project.getOriginalModel() ) ) );
-        }
-
-        setExecutionRoot( project.isExecutionRoot() );
-
-        if ( project.getArtifact() != null )
-        {
-            setArtifact( ArtifactUtils.copyArtifact( project.getArtifact() ) );
-        }
-
-        if ( project.getManagedVersionMap() != null )
-        {
-            setManagedVersionMap( new ManagedVersionMap( project.getManagedVersionMap() ) );
-        }
-
-        if ( project.getReleaseArtifactRepository() != null )
-        {
-            setReleaseArtifactRepository( project.getReleaseArtifactRepository() );
-        }
-
-        if ( project.getSnapshotArtifactRepository() != null )
-        {
-            setSnapshotArtifactRepository( project.getSnapshotArtifactRepository() );
-        }
-
-        setConcrete( project.isConcrete() );
-    }
-
-                // TODO: let the scope handler deal with this
-                // NOTE: [jc] scope == 'test' is the widest possible scope, so we don't really need to perform
-                // this check...
-                // if ( Artifact.SCOPE_TEST.equals( a.getScope() ) || Artifact.SCOPE_COMPILE.equals( a.getScope() ) ||
-                //     Artifact.SCOPE_RUNTIME.equals( a.getScope() ) )
-                // {
-                // }
-                // TODO: let the scope handler deal with this
-                // NOTE: [jc] scope == 'test' is the widest possible scope, so we don't really need to perform
-                // this check...
-                // if ( Artifact.SCOPE_TEST.equals( a.getScope() ) || Artifact.SCOPE_COMPILE.equals( a.getScope() ) ||
-                //      Artifact.SCOPE_RUNTIME.equals( a.getScope() ) )
-                // {
-                //     list.add( a );
-                // }
-
-            // TODO: let the scope handler deal with this
-            // NOTE: [jc] scope == 'test' is the widest possible scope, so we don't really need to perform
-            // this check...
-            // if ( Artifact.SCOPE_TEST.equals( a.getScope() ) || Artifact.SCOPE_COMPILE.equals( a.getScope() ) ||
-            //     Artifact.SCOPE_RUNTIME.equals( a.getScope() ) )
-            // {
-            // }
-
-    private static String getProjectReferenceId( String groupId, String artifactId, String version )
-    {
-        return groupId + ":" + artifactId + ":" + version;
-    }
-
-
-    protected void setModel( Model model )
-    {
-        this.model = model;
-    }
-
-    protected void setAttachedArtifacts( List attachedArtifacts )
-    {
-        this.attachedArtifacts = attachedArtifacts;
-    }
-
-    protected void setCompileSourceRoots( List compileSourceRoots )
-    {
-        this.compileSourceRoots = compileSourceRoots;
-    }
-
-    protected void setTestCompileSourceRoots( List testCompileSourceRoots )
-    {
-        this.testCompileSourceRoots = testCompileSourceRoots;
-    }
-
-    protected void setScriptSourceRoots( List scriptSourceRoots )
-    {
-        this.scriptSourceRoots = scriptSourceRoots;
-    }
-
-    protected ArtifactRepository getReleaseArtifactRepository()
-    {
-        return releaseArtifactRepository;
-    }
-
-    protected ArtifactRepository getSnapshotArtifactRepository()
-    {
-        return snapshotArtifactRepository;
-    }
-
-    private void addArtifactPath( Artifact a, List list )
-        throws DependencyResolutionRequiredException
-    {
-        String refId = getProjectReferenceId( a.getGroupId(), a.getArtifactId(), a.getVersion() );
-        MavenProject project = (MavenProject) projectReferences.get( refId );
-
-        boolean projectDirFound = false;
-        if ( project != null )
-        {
-            if ( a.getType().equals( "test-jar" ) )
-            {
-                File testOutputDir = new File( project.getBuild().getTestOutputDirectory() );
-                if ( testOutputDir.exists() )
-                {
-                    list.add( testOutputDir.getAbsolutePath() );
-                    projectDirFound = true;
-                }
-            }
-            else
-            {
-                list.add( project.getBuild().getOutputDirectory() );
-                projectDirFound = true;
-            }
-        }
-        if ( !projectDirFound )
-        {
-            File file = a.getFile();
-            if ( file == null )
-            {
-                throw new DependencyResolutionRequiredException( a );
-            }
-            list.add( file.getPath() );
-        }
-    }
-
-// ----------------------------------------------------------------------------
-// CODE BELOW IS USED TO PRESERVE DYNAMISM IN THE BUILD SECTION OF THE POM.
-// ----------------------------------------------------------------------------
-
-    private Build originalInterpolatedBuild;
-
-    private boolean isConcrete = false;
-
-    public boolean isConcrete()
+    protected void setModel( Model model )
-        return isConcrete;
+        this.model = model;
-    public void setConcrete( boolean concrete )
+    protected void setAttachedArtifacts( List attachedArtifacts )
-        isConcrete = concrete;
+        this.attachedArtifacts = attachedArtifacts;
-    public void preserveBuild( Build originalInterpolatedBuild )
+    protected void setCompileSourceRoots( List compileSourceRoots )
-        this.originalInterpolatedBuild = originalInterpolatedBuild;
-        this.originalInterpolatedBuild.setPluginManagement( null );
-        this.originalInterpolatedBuild.setPlugins( null );
+        this.compileSourceRoots = compileSourceRoots;
+    }
+
+    protected void setTestCompileSourceRoots( List testCompileSourceRoots )
+    {
+        this.testCompileSourceRoots = testCompileSourceRoots;
+    }
+
+    protected void setScriptSourceRoots( List scriptSourceRoots )
+    {
+        this.scriptSourceRoots = scriptSourceRoots;
+    }
+
+    protected ArtifactRepository getReleaseArtifactRepository()
+    {
+        return releaseArtifactRepository;
+    }
+
+    protected ArtifactRepository getSnapshotArtifactRepository()
+    {
+        return snapshotArtifactRepository;
+    }
+
+    private void deepCopy( MavenProject project )
+    {
+        // disown the parent
+
+        // copy fields
+        setFile( project.getFile() );
+
+        // don't need a deep copy, they don't get modified or added/removed to/from - but make them unmodifiable to be
+        // sure!
+        if ( project.getDependencyArtifacts() != null )
+        {
+            setDependencyArtifacts( Collections.unmodifiableSet( project.getDependencyArtifacts() ) );
+        }
+
+        if ( project.getArtifacts() != null )
+        {
+            setArtifacts( Collections.unmodifiableSet( project.getArtifacts() ) );
+        }
+
+        if ( project.getParentFile() != null )
+        {
+            parentFile = new File( project.getParentFile().getAbsolutePath() );
+        }
+
+        if ( project.getReportArtifacts() != null )
+        {
+            setReportArtifacts( Collections.unmodifiableSet( project.getReportArtifacts() ) );
+        }
+
+        if ( project.getExtensionArtifacts() != null )
+        {
+            setExtensionArtifacts( Collections.unmodifiableSet( project.getExtensionArtifacts() ) );
+        }
+
+        setParentArtifact( ( project.getParentArtifact() ) );
+
+        if ( project.getRemoteArtifactRepositories() != null )
+        {
+            setRemoteArtifactRepositories( Collections.unmodifiableList( project.getRemoteArtifactRepositories() ) );
+        }
+
+        if ( project.getPluginArtifactRepositories() != null )
+        {
+            setPluginArtifactRepositories(
+                ( Collections.unmodifiableList( project.getPluginArtifactRepositories() ) ) );
+        }
+
+        if ( project.getCollectedProjects() != null )
+        {
+            setCollectedProjects( ( Collections.unmodifiableList( project.getCollectedProjects() ) ) );
+        }
+
+        if ( project.getActiveProfiles() != null )
+        {
+            setActiveProfiles( ( Collections.unmodifiableList( project.getActiveProfiles() ) ) );
+        }
+
+        if ( project.getAttachedArtifacts() != null )
+        {
+            // clone properties modifyable by plugins in a forked lifecycle
+            setAttachedArtifacts( new ArrayList( project.getAttachedArtifacts() ) );
+        }
+
+        if ( project.getCompileSourceRoots() != null )
+        {
+            // clone source roots
+            setCompileSourceRoots( ( new ArrayList( project.getCompileSourceRoots() ) ) );
+        }
+
+        if ( project.getTestCompileSourceRoots() != null )
+        {
+            setTestCompileSourceRoots( ( new ArrayList( project.getTestCompileSourceRoots() ) ) );
+        }
+
+        if ( project.getScriptSourceRoots() != null )
+        {
+            setScriptSourceRoots( ( new ArrayList( project.getScriptSourceRoots() ) ) );
+        }
+
+        setModel( ( ModelUtils.cloneModel( project.getModel() ) ) );
+
+        if ( project.getOriginalModel() != null )
+        {
+            setOriginalModel( ( ModelUtils.cloneModel( project.getOriginalModel() ) ) );
+        }
+
+        setExecutionRoot( project.isExecutionRoot() );
+
+        if ( project.getArtifact() != null )
+        {
+            setArtifact( ArtifactUtils.copyArtifact( project.getArtifact() ) );
+        }
+
+        if ( project.getManagedVersionMap() != null )
+        {
+            setManagedVersionMap( new ManagedVersionMap( project.getManagedVersionMap() ) );
+        }
+
+        if ( project.getReleaseArtifactRepository() != null )
+        {
+            setReleaseArtifactRepository( project.getReleaseArtifactRepository() );
+        }
+
+        if ( project.getSnapshotArtifactRepository() != null )
+        {
+            setSnapshotArtifactRepository( project.getSnapshotArtifactRepository() );
+        }
+    }
+
+    private void addArtifactPath( Artifact a, List list )
+        throws DependencyResolutionRequiredException
+    {
+        String refId = getProjectReferenceId( a.getGroupId(), a.getArtifactId(), a.getVersion() );
+        MavenProject project = (MavenProject) projectReferences.get( refId );
+
+        boolean projectDirFound = false;
+        if ( project != null )
+        {
+            if ( a.getType().equals( "test-jar" ) )
+            {
+                File testOutputDir = new File( project.getBuild().getTestOutputDirectory() );
+                if ( testOutputDir.exists() )
+                {
+                    list.add( testOutputDir.getAbsolutePath() );
+                    projectDirFound = true;
+                }
+            }
+            else
+            {
+                list.add( project.getBuild().getOutputDirectory() );
+                projectDirFound = true;
+            }
+        }
+        if ( !projectDirFound )
+        {
+            File file = a.getFile();
+            if ( file == null )
+            {
+                throw new DependencyResolutionRequiredException( a );
+            }
+            list.add( file.getPath() );
+        }
+    }
+
+    private static String getProjectReferenceId( String groupId, String artifactId, String version )
+    {
+        return groupId + ":" + artifactId + ":" + version;

MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL33 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL33 DEL32 DEL21 DEL8 DEL31