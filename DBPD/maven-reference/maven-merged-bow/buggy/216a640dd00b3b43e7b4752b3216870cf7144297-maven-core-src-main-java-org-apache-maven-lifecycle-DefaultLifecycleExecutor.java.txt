recognise prefix of plugins already loaded

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168605 13f79535-47bb-0310-9956-ffa450edef68

+        PluginDescriptor pluginDescriptor = null;
+
-            // TODO: look up registered aliases in plugin manager instead
-            groupId = PluginDescriptor.getDefaultPluginGroupId();
-            artifactId = PluginDescriptor.getDefaultPluginArtifactId( tok.nextToken() );
+            String prefix = tok.nextToken();
+
+            pluginDescriptor = pluginManager.verifyPlugin( prefix );
+
+            if ( pluginDescriptor == null )
+            {
+                groupId = PluginDescriptor.getDefaultPluginGroupId();
+                artifactId = PluginDescriptor.getDefaultPluginArtifactId( prefix );
+            }
-        // TODO: this shouldn't be necessary all the time.
-        injectHandlerPluginConfiguration( session.getProject(), groupId, artifactId, version );
-
-        try
+        if ( pluginDescriptor == null )
-            PluginDescriptor pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session );
-            // TODO: should be able to create a Map from this
-            for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext(); )
+            injectHandlerPluginConfiguration( session.getProject(), groupId, artifactId, version );
+            try
-                MojoDescriptor mojoDescriptor = (MojoDescriptor) i.next();
-                if ( mojoDescriptor.getGoal().equals( goal ) )
-                {
-                    return mojoDescriptor;
-                }
+                pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session );
+            }
+            catch ( PluginManagerException e )
+            {
+                throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
-        catch ( PluginManagerException e )
+
+        MojoDescriptor mojoDescriptor = null;
+
+        // TODO: should be able to create a Map from this
+        for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext() && mojoDescriptor == null; )
-            throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+            MojoDescriptor desc = (MojoDescriptor) i.next();
+            if ( desc.getGoal().equals( goal ) )
+            {
+                mojoDescriptor = desc;
+            }
-        throw new LifecycleExecutionException( "Required goal not found: " + task );
+        if ( mojoDescriptor == null )
+        {
+            throw new LifecycleExecutionException( "Required goal not found: " + task );
+        }
+
+        return mojoDescriptor;

MOV60 INS25 INS60 MOV24 INS25 MOV41 INS27 INS8 INS43 INS59 INS27 INS27 INS8 INS33 INS60 INS21 INS25 INS42 INS33 MOV21 INS54 INS42 INS42 INS33 MOV32 INS27 INS42 INS33 MOV53 INS43 INS59 INS7 INS27 INS8 INS8 MOV12 INS42 INS33 INS42 INS42 MOV32 INS42 INS32 INS42 INS33 MOV21 MOV21 INS21 UPD42 INS21 INS42 INS42 INS42 INS7 UPD42 INS7 INS42 MOV32 INS42 INS42 INS42 DEL8 DEL54