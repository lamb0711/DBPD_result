Fix for problems with modello plugin. Builder was not properly inheriting the goals.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@721608 13f79535-47bb-0310-9956-ffa450edef68

+            //ProjectUri.Build.PluginManagement.Plugins.Plugin.Executions.xUri,
+
+               // System.out.println(action);
-                {
-                    source.join( dependencyContainer, managementContainer );
+                {    //System.out.println("A:");
+                    ModelDataSource dependencyDatasource = new DefaultModelDataSource();
+                    dependencyDatasource.init( dependencyContainer.getProperties(), Arrays.asList( new ArtifactModelContainerFactory(),
+                            new IdModelContainerFactory() ) );
+
+                    ModelDataSource managementDatasource = new DefaultModelDataSource();
+                    managementDatasource.init( managementContainer.getProperties(), Arrays.asList( new ArtifactModelContainerFactory(),
+                            new IdModelContainerFactory() ) );
+
+                    List<ModelContainer> managementExecutionContainers = managementDatasource.queryFor(ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri);
+                    List<ModelProperty> managementPropertiesWithoutExecutions = new ArrayList<ModelProperty>(managementContainer.getProperties());
+                    for(ModelContainer a : managementExecutionContainers)
+                    {
+                        managementPropertiesWithoutExecutions.removeAll(a.getProperties());
+                    }
+
+                    source.join( dependencyContainer, new ArtifactModelContainerFactory().create(managementPropertiesWithoutExecutions) );
+
+                    List<ModelContainer> dependencyExecutionContainers = dependencyDatasource.queryFor(ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri);
+                    List<ModelContainer> joinedExecutionContainers = new ArrayList<ModelContainer>();
+                    //System.out.println(managementExecutionContainers.size());
+                    for(ModelContainer a : managementExecutionContainers)
+                    {
+                        for(ModelContainer b : dependencyExecutionContainers)
+                        {
+                            if(b.containerAction(a).equals(ModelContainerAction.JOIN))
+                            {
+                                source.join(b, a);
+                                joinedExecutionContainers.add(a);
+                            }
+                        }
+                    }
+
+                    ModelProperty executionsProperty = null;
+                    for(ModelProperty a : dependencyContainer.getProperties())
+                    {
+                        if(a.getUri().equals(ProjectUri.Build.Plugins.Plugin.Executions.xUri)) {
+                            executionsProperty = a;
+                            break;
+                        }
+                    }
+
+                    if(executionsProperty == null)
+                    {
+                        for(ModelProperty a : managementPropertiesWithoutExecutions)
+                        {
+                            if(a.getUri().equals(ProjectUri.Build.Plugins.Plugin.Executions.xUri)) {
+                                executionsProperty = a;
+                                break;
+                            }
+                        }
+                    }
+
+                    if(executionsProperty != null)
+                    {
+                        managementExecutionContainers.removeAll(joinedExecutionContainers);
+                        Collections.reverse(managementExecutionContainers);
+                        for(ModelContainer a : managementExecutionContainers)
+                        {
+                            source.insertModelPropertiesAfter(executionsProperty,
+                                    ModelTransformerContext.sort(a.getProperties(), ProjectUri.Build.Plugins.Plugin.Executions.xUri));
+                        }
+                    }

INS60 INS21 INS60 INS21 INS60 INS60 INS70 INS60 INS60 INS70 INS60 INS70 INS25 INS25 INS43 INS59 INS32 INS43 INS59 INS32 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS43 INS59 INS44 INS32 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS70 INS42 INS42 INS33 INS43 INS42 INS42 INS42 INS25 INS42 INS33 INS70 INS42 INS33 INS21 INS21 INS70 INS43 INS42 INS42 INS42 INS42 INS14 INS14 INS43 INS42 INS42 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS74 INS32 INS42 INS32 INS14 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS74 INS42 INS44 INS42 INS8 INS42 INS32 INS8 INS44 INS42 INS8 INS32 INS32 INS44 INS42 INS8 INS42 INS43 INS43 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS43 INS42 INS25 INS32 INS42 INS40 INS21 INS10 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS7 INS42 INS32 INS8 INS42 INS32 INS32 INS42 INS40 INS21 INS21 INS42 INS42 INS32 INS42 INS40 INS21 INS10 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS7 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42