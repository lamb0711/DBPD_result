Clean up of the lifecycle executor, simplify configuration and push back into the plugin manager.
This fixed a couple of bugs along the way.

One change that this has brought to bear from the document is you now must specify a goal for it to be bound to the LC
(see it0008)


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191285 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.plugin.GoalInstance;
+import org.apache.maven.plugin.MojoExecution;
- * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
+ * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
+ * @author <a href="mailto:brett@apache.org">Brett Porter</a>
- * @todo this is structured somewhat confusingly. Attempt to "flatten out" to reduce the number of paths through by
- * compiling the list of plugins/tasks first.
-     * Execute a list of tasks. Each task may be a phase in the lifecycle or the
+     * Execute a task. Each task may be a phase in the lifecycle or the
-            processGoals( session, tasks );
+            for ( Iterator i = tasks.iterator(); i.hasNext(); )
+            {
+                String task = (String) i.next();
+                executeGoal( task, session );
+            }
-    private void processGoals( MavenSession session, List tasks )
-        throws LifecycleExecutionException, PluginNotFoundException, MojoExecutionException,
-        ArtifactResolutionException
+    private void executeGoal( String task, MavenSession session )
+        throws LifecycleExecutionException, PluginNotFoundException, MojoExecutionException, ArtifactResolutionException
-        Map goalInstanceMap = new HashMap();
-        String maxPhase = null;
+        String selectedPhase = null;
-            if ( tasks.contains( p ) )
+            if ( task.equals( p ) )
-                maxPhase = p;
+                selectedPhase = p;
-        MavenProject project = session.getProject();
+        List goals;
-        if ( maxPhase != null )
-        {
-            Map mappings;
-            try
-            {
-                LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, project.getPackaging() );
-                mappings = m.getPhases();
-            }
-            catch ( ComponentLookupException e )
-            {
-                getLogger().error( "No lifecycle mapping for type '" + project.getPackaging() + "': using defaults" );
-                mappings = defaultPhases;
-            }
-
-            for ( Iterator i = phases.iterator(); i.hasNext(); )
-            {
-                String phase = (String) i.next();
-
-                String phaseTasks = (String) mappings.get( phase );
-
-                if ( phaseTasks != null )
-                {
-                    for ( StringTokenizer tok = new StringTokenizer( phaseTasks, "," ); tok.hasMoreTokens(); )
-                    {
-                        String task = tok.nextToken().trim();
-
-                        MojoDescriptor mojoDescriptor = configureMojo( task, session, phaseMap );
-
-                        addToPhaseMap( phaseMap, phase, mojoDescriptor );
-
-                        List matchingGoalInstances = findMatchingGoalInstances( mojoDescriptor, project );
-
-                        for ( Iterator instanceIterator = matchingGoalInstances.iterator(); instanceIterator.hasNext(); )
-                        {
-                            GoalInstance goalInstance = (GoalInstance) instanceIterator.next();
-
-                            addToGoalInstanceMap( goalInstanceMap, goalInstance );
-                        }
-                    }
-                }
-
-                if ( phase.equals( maxPhase ) )
-                {
-                    break;
-                }
-            }
-        }
-
-        processPluginConfiguration( project, session, phaseMap, goalInstanceMap );
-
-        for ( Iterator i = tasks.iterator(); i.hasNext(); )
-        {
-            String task = (String) i.next();
-
-            // verify that all loose-leaf goals have had GoalInstance(s) configured for them...
-            // we only need to do this if the current task is not a phase name.
-            if ( !phaseMap.containsKey( task ) )
-            {
-                MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session );
-
-                if ( mojoDescriptor != null && !goalInstanceMap.containsKey( mojoDescriptor ) )
-                {
-                    List matchingGoalInstances = findMatchingGoalInstances( mojoDescriptor, project );
-
-                    for ( Iterator instanceIterator = matchingGoalInstances.iterator(); instanceIterator.hasNext(); )
-                    {
-                        GoalInstance goalInstance = (GoalInstance) instanceIterator.next();
-
-                        addToGoalInstanceMap( goalInstanceMap, goalInstance );
-                    }
-                }
-            }
-
-            // now we can proceed to actually load up the list of goals we're interested in.
-            List goals = processGoalChain( task, session, phaseMap );
-
-            for ( Iterator j = goals.iterator(); j.hasNext(); )
-            {
-                MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();
-
-                List instances = (List) goalInstanceMap.get( mojoDescriptor );
-
-                if ( instances != null )
-                {
-                    for ( Iterator instanceIterator = instances.iterator(); instanceIterator.hasNext(); )
-                    {
-                        GoalInstance instance = (GoalInstance) instanceIterator.next();
-
-                        String executePhase = mojoDescriptor.getExecutePhase();
-
-                        if ( executePhase != null )
-                        {
-                            // TODO: is this too broad to execute?
-                            execute( Collections.singletonList( executePhase ), session );
-                        }
-
-                        try
-                        {
-                            pluginManager.executeMojo( session, instance );
-                        }
-                        catch ( PluginManagerException e )
-                        {
-                            throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
-                        }
-                    }
-                }
-                else
-                {
-                    throw new LifecycleExecutionException( "This goal has not been configured: "
-                        + mojoDescriptor.getGoal() );
-                }
-            }
-        }
-    }
-
-    private void addToGoalInstanceMap( Map goalInstanceMap, GoalInstance goalInstance )
-    {
-        MojoDescriptor mojoDescriptor = goalInstance.getMojoDescriptor();
-
-        List instances = (List) goalInstanceMap.get( mojoDescriptor );
-
-        if ( instances == null )
-        {
-            instances = new ArrayList();
-
-            goalInstanceMap.put( mojoDescriptor, instances );
-        }
-
-        int idx = instances.indexOf( goalInstance );
-
-        if ( idx > -1 )
-        {
-            GoalInstance cached = (GoalInstance) instances.get( idx );
-
-            cached.incorporate( goalInstance );
-        }
-        else
-        {
-            instances.add( goalInstance );
-        }
-    }
-
-    private void injectHandlerPluginConfiguration( MavenProject project, String groupId, String artifactId,
-                                                  String version )
-    {
-        String key = Plugin.constructKey( groupId, artifactId );
-        Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get( key );
-
-        if ( plugin == null )
-        {
-            plugin = new Plugin();
-            plugin.setGroupId( groupId );
-            plugin.setArtifactId( artifactId );
-            plugin.setVersion( version );
-
-            PluginManagement pluginManagement = project.getPluginManagement();
-            if ( pluginManagement != null )
-            {
-                Plugin def = (Plugin) pluginManagement.getPluginsAsMap().get( key );
-                if ( def != null )
-                {
-                    modelDefaultsInjector.mergePluginWithDefaults( plugin, def );
-                }
-            }
-
-            project.addPlugin( plugin );
-        }
-    }
-
-    private void processPluginConfiguration( MavenProject project, MavenSession mavenSession, Map phaseMap,
-                                            Map goalInstanceMap )
-        throws LifecycleExecutionException, ArtifactResolutionException
-    {
-        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+        // Need to verify all the plugins up front, as standalone goals should use the version from the POM.
+        for ( Iterator i = session.getProject().getBuildPlugins().iterator(); i.hasNext(); )
-            processPluginPhases( plugin, mavenSession, phaseMap, goalInstanceMap );
+            verifyPlugin( plugin, session );
+        }
+
+        if ( selectedPhase != null )
+        {
+            // we have a lifecycle phase, so lets bind all the necessary goals
+            constructLifecyclePhaseMap( session, phaseMap, selectedPhase );
+
+            goals = processGoalChain( selectedPhase, phaseMap );
+        }
+        else
+        {
+            MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session );
+            goals = Collections.singletonList( new MojoExecution( mojoDescriptor ) );
+        }
+
+        for ( Iterator i = goals.iterator(); i.hasNext(); )
+        {
+            MojoExecution mojoExecution = (MojoExecution) i.next();
+
+            String executePhase = mojoExecution.getMojoDescriptor().getExecutePhase();
+
+            if ( executePhase != null )
+            {
+                // TODO: with introduction of cloned lifecyle, we want to avoid reconstructing some things - narrow
+                executeGoal( executePhase, session );
+            }
+
+            try
+            {
+                pluginManager.executeMojo( mojoExecution, session );
+            }
+            catch ( PluginManagerException e )
+            {
+                throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+            }
+        }
+    }
+
+    private void constructLifecyclePhaseMap( MavenSession session, Map phaseMap, String selectedPhase )
+        throws ArtifactResolutionException, LifecycleExecutionException
+    {
+        // first, bind those associated with the packaging
+        bindLifecycleForPackaging( session, phaseMap, selectedPhase );
+
+        // next, loop over plugins and for any that have a phase, bind it
+        for ( Iterator i = session.getProject().getBuildPlugins().iterator(); i.hasNext(); )
+        {
+            Plugin plugin = (Plugin) i.next();
+
+            bindPluginToLifecycle( plugin, session, phaseMap );
+        }
+    }
+
+    private void bindLifecycleForPackaging( MavenSession session, Map phaseMap, String selectedPhase )
+        throws ArtifactResolutionException, LifecycleExecutionException
+    {
+        Map mappings;
+        String packaging = session.getProject().getPackaging();
+        try
+        {
+            LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
+            mappings = m.getPhases();
+        }
+        catch ( ComponentLookupException e )
+        {
+            getLogger().error( "No lifecycle mapping for type '" + packaging + "': using defaults" );
+            mappings = defaultPhases;
+        }
+
+        boolean finished = false;
+        for ( Iterator i = phases.iterator(); i.hasNext() && !finished; )
+        {
+            String phase = (String) i.next();
+
+            String phaseTasks = (String) mappings.get( phase );
+
+            if ( phaseTasks != null )
+            {
+                for ( StringTokenizer tok = new StringTokenizer( phaseTasks, "," ); tok.hasMoreTokens(); )
+                {
+                    String goal = tok.nextToken().trim();
+
+                    MojoDescriptor mojoDescriptor = getMojoDescriptor( goal, session );
+                    addToPhaseMap( phaseMap, phase, new MojoExecution( mojoDescriptor ), session.getSettings() );
+                }
+            }
+
+            if ( phase.equals( selectedPhase ) )
+            {
+                finished = true;
+            }
-     * @param goalInstanceMap 
-    private void processPluginPhases( Plugin plugin, MavenSession session, Map phaseMap, Map goalInstanceMap )
+    private void bindPluginToLifecycle( Plugin plugin, MavenSession session, Map phaseMap )
+        if ( plugin.getGoals() != null && !plugin.getGoals().isEmpty() )
+        {
+            getLogger().warn(
+                "DEPRECATED: goal definitions for plugin '" + plugin.getKey() + "' must be in an executions element" );
+        }
+
+        PluginDescriptor pluginDescriptor;
+        Settings settings = session.getSettings();
+
+        pluginDescriptor = verifyPlugin( plugin, session );
+
+        if ( pluginDescriptor.getMojos() != null && !pluginDescriptor.getMojos().isEmpty() )
+        {
+            // use the plugin if inherit was true in a base class, or it is in the current POM, otherwise use the default inheritence setting
+            if ( plugin.isInheritanceApplied() || pluginDescriptor.isInheritedByDefault() )
+            {
+                bindGoalMapToLifecycle( pluginDescriptor, plugin.getGoalsAsMap(), phaseMap, settings );
+
+                List executions = plugin.getExecutions();
+
+                if ( executions != null )
+                {
+                    for ( Iterator it = executions.iterator(); it.hasNext(); )
+                    {
+                        PluginExecution execution = (PluginExecution) it.next();
+
+                        bindExecutionToLifecycle( pluginDescriptor, phaseMap, execution, settings );
+                    }
+                }
+            }
+        }
+    }
+
+    private PluginDescriptor verifyPlugin( Plugin plugin, MavenSession session )
+        throws ArtifactResolutionException, LifecycleExecutionException
+    {
-            pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session.getProject(), session
-                .getSettings(), session.getLocalRepository() );
+            MavenProject project = session.getProject();
+            ArtifactRepository localRepository = session.getLocalRepository();
+            pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, project, session.getSettings(),
+                                                           localRepository );
-
-        if ( plugin.isInheritanceApplied() || pluginDescriptor.isInheritedByDefault() )
-        {
-            processGoalContainerPhases( plugin, null, pluginDescriptor, session, plugin.getGoalsAsMap(), phaseMap,
-                                        goalInstanceMap );
-
-            List executions = plugin.getExecutions();
-
-            if ( executions != null )
-            {
-                for ( Iterator it = executions.iterator(); it.hasNext(); )
-                {
-                    PluginExecution execution = (PluginExecution) it.next();
-
-                    if ( execution.isInheritanceApplied() )
-                    {
-                        processGoalContainerPhases( plugin, execution, pluginDescriptor, session, execution
-                            .getGoalsAsMap(), phaseMap, goalInstanceMap );
-                    }
-                }
-            }
-        }
-    }
-
-    private void processGoalContainerPhases( Plugin plugin, PluginExecution execution,
-                                            PluginDescriptor pluginDescriptor, MavenSession session, Map goalMap,
-                                            Map phaseMap, Map goalInstanceMap )
-        throws LifecycleExecutionException
-    {
-        // ----------------------------------------------------------------------
-        // Look to see if the plugin configuration specifies particular mojos
-        // within the plugin. If this is the case then simply configure the
-        // mojos the user has specified and ignore the rest.
-        // ----------------------------------------------------------------------
-
-        if ( pluginDescriptor.getMojos() != null )
-        {
-            for ( Iterator j = pluginDescriptor.getMojos().iterator(); j.hasNext(); )
-            {
-                MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();
-
-                // TODO: remove later
-                if ( mojoDescriptor.getGoal() == null )
-                {
-                    throw new LifecycleExecutionException( "The plugin " + pluginDescriptor.getId()
-                        + " was built with an older version of Maven" );
-                }
-
-                Goal goal = (Goal) goalMap.get( mojoDescriptor.getGoal() );
-
-                if ( goalMap.isEmpty() )
-                {
-                    configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );
-
-                    addToGoalInstanceMap( goalInstanceMap, new GoalInstance( plugin, execution, goal, mojoDescriptor ) );
-                }
-                else if ( goal != null )
-                {
-                    // We have to check to see that the inheritance rules have been applied before binding this mojo.
-                    if ( goal.isInheritanceApplied() || mojoDescriptor.isInheritedByDefault() )
-                    {
-                        configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );
-
-                        addToGoalInstanceMap( goalInstanceMap, new GoalInstance( plugin, execution, goal,
-                                                                                 mojoDescriptor ) );
-                    }
-                }
-            }
-        }
+        return pluginDescriptor;
-     * Take a look at a mojo contained within a plugin, look to see whether it contributes to a
-     * phase in the lifecycle and if it does place it at the end of the list of goals
-     * to execute for the stated phase.
-     *
-     * @param mojoDescriptor
+     * @deprecated
-    private void configureMojoPhaseBinding( MojoDescriptor mojoDescriptor, Map phaseMap, Settings settings )
+    private void bindGoalMapToLifecycle( PluginDescriptor pluginDescriptor, Map goalMap, Map phaseMap,
+                                         Settings settings )
+        for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext(); )
+        {
+            MojoDescriptor mojoDescriptor = (MojoDescriptor) i.next();
+
+            Goal goal = (Goal) goalMap.get( mojoDescriptor.getGoal() );
+
+            if ( goal != null )
+            {
+                // We have to check to see that the inheritance rules have been applied before binding this mojo.
+                if ( mojoDescriptor.isInheritedByDefault() )
+                {
+                    if ( mojoDescriptor.getPhase() != null )
+                    {
+                        MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );
+                        addToPhaseMap( phaseMap, mojoDescriptor.getPhase(), mojoExecution, settings );
+                    }
+                }
+            }
+        }
+    }
+
+    private void bindExecutionToLifecycle( PluginDescriptor pluginDescriptor, Map phaseMap, PluginExecution execution,
+                                           Settings settings )
+        throws LifecycleExecutionException
+    {
+        for ( Iterator i = execution.getGoals().iterator(); i.hasNext(); )
+        {
+            String goal = (String) i.next();
+
+            MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( goal );
+            if ( mojoDescriptor == null )
+            {
+                throw new LifecycleExecutionException( "Goal from the POM '" + goal + "' was not found in the plugin" );
+            }
+
+            // We have to check to see that the inheritance rules have been applied before binding this mojo.
+            if ( execution.isInheritanceApplied() || mojoDescriptor.isInheritedByDefault() )
+            {
+                MojoExecution mojoExecution = new MojoExecution( mojoDescriptor, execution.getId() );
+                if ( execution.getPhase() != null )
+                {
+                    addToPhaseMap( phaseMap, execution.getPhase(), mojoExecution, settings );
+                }
+                else if ( mojoDescriptor.getPhase() != null )
+                {
+                    // if the phase was not in the configuration, use the phase in the descriptor
+                    addToPhaseMap( phaseMap, mojoDescriptor.getPhase(), mojoExecution, settings );
+                }
+            }
+        }
+    }
+
+    private void addToPhaseMap( Map phaseMap, String phase, MojoExecution mojoExecution, Settings settings )
+        throws LifecycleExecutionException
+    {
+        List goals = (List) phaseMap.get( phase );
+
+        if ( goals == null )
+        {
+            String message = "Required phase '" + phase + "' not found";
+            throw new LifecycleExecutionException( message );
+        }
+
+        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
-            if ( mojoDescriptor.getPhase() != null )
-            {
-                addToPhaseMap( phaseMap, mojoDescriptor.getPhase(), mojoDescriptor );
-            }
+            goals.add( mojoExecution );
-    private void addToPhaseMap( Map phaseMap, String phase, MojoDescriptor mojoDescriptor )
-        throws LifecycleExecutionException
-    {
-        if ( phase != null )
-        {
-            List goals = (List) phaseMap.get( phase );
-
-            if ( goals == null )
-            {
-                String message = "Required phase '" + phase + "' not found";
-                throw new LifecycleExecutionException( message );
-            }
-
-            if ( !goals.contains( mojoDescriptor ) )
-            {
-                goals.add( mojoDescriptor );
-            }
-        }
-    }
-
-    private List processGoalChain( String task, MavenSession session, Map phaseMap )
-        throws LifecycleExecutionException, ArtifactResolutionException
+    private List processGoalChain( String task, Map phaseMap )
-        if ( phaseMap.containsKey( task ) )
+        // only execute up to the given phase
+        int index = phases.indexOf( task );
+
+        for ( int i = 0; i <= index; i++ )
-            // only execute up to the given phase
-            int index = phases.indexOf( task );
+            String p = (String) phases.get( i );
-            for ( int j = 0; j <= index; j++ )
+            List phaseGoals = (List) phaseMap.get( p );
+
+            if ( phaseGoals != null )
-                String p = (String) phases.get( j );
-
-                List phaseGoals = (List) phaseMap.get( p );
-
-                if ( phaseGoals != null )
-                {
-                    goals.addAll( phaseGoals );
-                }
+                goals.addAll( phaseGoals );
-        else
-        {
-            MojoDescriptor mojoDescriptor = configureMojo( task, session, phaseMap );
-
-            goals.add( mojoDescriptor );
-        }
-
-    private MojoDescriptor configureMojo( String task, MavenSession session, Map phaseMap )
-        throws LifecycleExecutionException, ArtifactResolutionException
-    {
-        MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session );
-
-        configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );
-
-        return mojoDescriptor;
-    }
-
-    private List findMatchingGoalInstances( MojoDescriptor mojoDescriptor, MavenProject project )
-    {
-        PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
-
-        List plugins = project.getBuildPlugins();
-
-        List matchingSteps = new ArrayList();
-
-        Plugin plugin = null;
-
-        for ( Iterator it = plugins.iterator(); it.hasNext(); )
-        {
-            plugin = (Plugin) it.next();
-
-            if ( pluginDescriptor.getPluginLookupKey().equals( plugin.getKey() ) )
-            {
-                String mojoGoal = mojoDescriptor.getGoal();
-
-                Goal unattached = (Goal) plugin.getGoalsAsMap().get( mojoDescriptor.getGoal() );
-
-                if ( unattached != null )
-                {
-                    matchingSteps.add( new GoalInstance( plugin, unattached, mojoDescriptor ) );
-                }
-
-                List executions = plugin.getExecutions();
-
-                if ( executions != null )
-                {
-                    for ( Iterator executionIterator = executions.iterator(); executionIterator.hasNext(); )
-                    {
-                        PluginExecution execution = (PluginExecution) executionIterator.next();
-
-                        Goal attached = (Goal) execution.getGoalsAsMap().get( mojoDescriptor.getGoal() );
-
-                        if ( attached != null )
-                        {
-                            matchingSteps.add( new GoalInstance( plugin, execution, attached, mojoDescriptor ) );
-                        }
-                    }
-                }
-
-                break;
-            }
-        }
-
-        // if nothing is configured, then we need to add a "fully detached" step...
-        if ( matchingSteps.isEmpty() )
-        {
-            matchingSteps.add( new GoalInstance( mojoDescriptor ) );
-        }
-
-        return matchingSteps;
-    }
-
-            String message = "Invalid task '" + task + "': you must specify a valid lifecycle phase, or"
-                + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
+            String message = "Invalid task '" + task + "': you must specify a valid lifecycle phase, or" +
+                " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
+        MavenProject project = session.getProject();
-                injectHandlerPluginConfiguration( session.getProject(), groupId, artifactId, version );
-
-                pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, session.getProject(),
+                pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, project,
-        else
-        {
-            injectHandlerPluginConfiguration( session.getProject(), pluginDescriptor.getGroupId(), pluginDescriptor
-                .getArtifactId(), pluginDescriptor.getVersion() );
-        }
-        MojoDescriptor mojoDescriptor = null;
+        injectHandlerPluginConfiguration( project, pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId(),
+                                          pluginDescriptor.getVersion() );
-        if ( pluginDescriptor.getMojos() != null )
-        {
-            // TODO: should be able to create a Map from this
-            for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext() && mojoDescriptor == null; )
-            {
-                MojoDescriptor desc = (MojoDescriptor) i.next();
-                if ( desc.getGoal().equals( goal ) )
-                {
-                    mojoDescriptor = desc;
-                }
-            }
-        }
-        else
-        {
-            throw new LifecycleExecutionException( "The plugin " + pluginDescriptor.getGroupId() + ":"
-                + pluginDescriptor.getArtifactId() + ":" + pluginDescriptor.getVersion()
-                + " doesn't contain any mojo. Check if it isn't corrupted." );
-        }
-
+        MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( goal );
-    public List getPhases()
+    private void injectHandlerPluginConfiguration( MavenProject project, String groupId, String artifactId,
+                                                   String version )
-        return phases;
-    }
+        String key = Plugin.constructKey( groupId, artifactId );
+        Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get( key );
+        if ( plugin == null )
+        {
+            plugin = new Plugin();
+            plugin.setGroupId( groupId );
+            plugin.setArtifactId( artifactId );
+            plugin.setVersion( version );
+
+            PluginManagement pluginManagement = project.getPluginManagement();
+            if ( pluginManagement != null )
+            {
+                Plugin def = (Plugin) pluginManagement.getPluginsAsMap().get( key );
+                if ( def != null )
+                {
+                    modelDefaultsInjector.mergePluginWithDefaults( plugin, def );
+                }
+            }
+
+            project.addPlugin( plugin );
+        }
+    }

INS26 MOV31 INS40 UPD40 MOV65 INS31 INS31 MOV44 INS31 UPD65 UPD42 MOV44 MOV44 MOV43 MOV43 MOV60 UPD42 MOV43 MOV43 MOV83 MOV39 UPD42 MOV42 MOV44 MOV44 MOV44 MOV43 MOV43 MOV8 INS42 INS8 INS83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 MOV8 INS29 UPD42 INS8 MOV83 MOV39 UPD42 MOV42 MOV44 MOV44 MOV44 MOV44 MOV43 MOV8 MOV44 MOV8 MOV8 UPD66 UPD66 INS24 INS25 MOV24 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 INS21 UPD43 UPD42 INS60 INS60 INS25 INS60 INS60 INS21 INS25 INS41 INS65 UPD43 UPD42 INS24 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 MOV60 MOV25 INS60 MOV60 MOV41 MOV60 MOV21 INS60 UPD66 INS8 MOV43 MOV43 MOV58 MOV32 INS8 INS27 INS8 INS8 MOV58 MOV32 UPD42 UPD42 UPD42 INS32 INS32 UPD42 INS43 INS59 INS39 INS59 INS27 INS27 INS8 INS43 INS59 INS43 INS59 INS7 INS27 INS8 INS42 UPD42 MOV58 MOV32 INS8 UPD42 UPD42 INS58 MOV32 MOV8 UPD42 MOV43 INS59 INS8 MOV43 INS59 INS24 UPD42 INS33 UPD42 MOV43 MOV60 INS21 UPD42 MOV42 MOV33 MOV21 INS21 MOV60 INS21 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS32 INS42 INS9 MOV32 INS38 INS27 INS38 INS21 UPD42 MOV42 INS42 INS42 INS42 MOV32 INS42 INS32 MOV27 INS38 MOV25 INS60 INS60 MOV60 MOV60 MOV25 MOV43 INS59 UPD42 INS25 INS42 INS32 INS21 UPD42 UPD42 UPD42 MOV42 MOV42 INS32 INS58 INS32 INS8 UPD43 INS32 INS7 INS7 UPD42 UPD43 MOV32 INS42 MOV43 INS42 INS32 INS33 INS32 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 MOV27 UPD42 MOV42 INS32 UPD43 MOV43 MOV27 MOV27 MOV8 INS42 INS42 INS32 UPD42 MOV43 MOV42 UPD42 MOV42 MOV42 MOV43 INS59 INS42 INS42 INS60 MOV21 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 UPD42 INS42 INS32 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS27 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 UPD42 INS25 MOV32 UPD42 MOV42 UPD42 UPD42 UPD42 INS32 INS53 MOV32 INS60 INS25 INS42 INS42 INS42 INS42 INS32 INS43 INS59 MOV32 UPD42 MOV42 UPD43 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS14 UPD43 INS32 MOV32 MOV43 INS7 INS42 INS42 INS42 INS45 MOV32 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS8 UPD42 UPD42 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 INS43 INS59 INS27 INS8 MOV25 MOV43 INS42 INS42 INS42 INS42 INS11 UPD42 INS42 UPD42 UPD42 INS43 INS42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS21 INS42 INS9 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS25 UPD42 MOV43 INS27 INS42 INS42 INS14 INS32 INS33 INS21 UPD42 INS43 INS32 UPD42 MOV42 INS32 UPD27 MOV27 INS8 INS45 INS42 INS45 INS43 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS14 MOV32 MOV21 INS60 MOV21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 INS43 INS42 UPD42 INS43 INS59 INS42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS14 UPD42 UPD42 INS32 INS42 INS42 UPD43 MOV43 MOV42 INS42 INS42 UPD42 DEL66 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL14 DEL33 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL24 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL24 DEL8 DEL24 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL24 DEL10 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8 DEL24 DEL8 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL32 DEL11 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL24 DEL8 DEL25 DEL10 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL29 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL8 DEL42 DEL43 DEL33 DEL59 DEL60 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31