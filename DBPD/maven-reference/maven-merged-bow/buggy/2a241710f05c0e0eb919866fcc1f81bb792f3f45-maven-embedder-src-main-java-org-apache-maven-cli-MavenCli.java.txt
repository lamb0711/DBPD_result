MNG-3182
MNG-3183

First cleanup of the logging code (it is still a mess), but all the console logging has been removed from the Maven component and pushed back
into the CLI code. As a result we now have a way to log to a file easily.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@572408 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.embedder.ConfigurationValidationResult;
+import org.apache.maven.embedder.MavenEmbedderConsoleLogger;
-import org.apache.maven.embedder.ConfigurationValidationResult;
+import org.apache.maven.embedder.MavenEmbedderFileLogger;
+import org.apache.maven.embedder.MavenEmbedderLogger;
+import org.apache.maven.execution.BuildFailure;
+import org.apache.maven.execution.ReactorManager;
+import org.apache.maven.project.MavenProject;
+import org.codehaus.plexus.logging.Logger;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.TimeZone;
+        MavenCli cli = new MavenCli();
+
+        return cli.doMain( args, classWorld );
+    }
+
+    public int doMain( String[] args,
+                       ClassWorld classWorld )
+    {
+
+        if ( commandLine.hasOption( CLIManager.LOG_FILE ) )
+        {
+            File logFile = new File(
+                baseDirectory,
+                commandLine.getOptionValue( CLIManager.LOG_FILE ) );
+
+            configuration.setMavenEmbedderLogger( new MavenEmbedderFileLogger( logFile ) );
+        }
+        else
+        {
+            configuration.setMavenEmbedderLogger( new MavenEmbedderConsoleLogger() );
+        }
+
+
+            logger = mavenEmbedder.getLogger();
+        logResult( request, result );
+
+            logger.close();
+
+        logger.close();
+
-    private static void showError( Exception e,
-                                   boolean show )
-    {
-        showError( e.getMessage(), e, show );
-    }
-
-    private static void showError( String message,
-                                   Exception e,
-                                   boolean show )
-    {
-        System.err.println();
-        System.err.println( message );
-        System.err.println();
-
-        if ( show )
-        {
-            System.err.println( "Error stacktrace:" );
-
-            e.printStackTrace();
-        }
-        else
-        {
-            System.err.println( "For more information, run with the -e flag" );
-        }
-    }
-
+
+    // ----------------------------------------------------------------------
+    // Reporting / Logging
+    // ----------------------------------------------------------------------
+
+    private static final long MB = 1024 * 1024;
+
+    private static final int MS_PER_SEC = 1000;
+
+    private static final int SEC_PER_MIN = 60;
+
+    private MavenEmbedderLogger logger;
+
+    private MavenEmbedderLogger getLogger()
+    {
+        return logger;
+    }
+
+    private void logResult( MavenExecutionRequest request, MavenExecutionResult result )
+    {
+        ReactorManager reactorManager = result.getReactorManager();
+
+        // TODO: should all the logging be left to the CLI?
+        logReactorSummary( reactorManager );
+
+        if ( reactorManager != null && reactorManager.hasBuildFailures() )
+        {
+            logErrors(
+                reactorManager,
+                request.isShowErrors() );
+
+            if ( !ReactorManager.FAIL_NEVER.equals( reactorManager.getFailureBehavior() ) )
+            {
+                getLogger().info( "BUILD ERRORS" );
+
+                line();
+
+                stats( request.getStartTime() );
+
+                line();
+            }
+            else
+            {
+                getLogger().info( " + Ignoring failures" );
+            }
+        }
+
+        logSuccess( reactorManager );
+
+        stats( request.getStartTime() );
+
+        line();
+    }
+
+    private void logErrors( ReactorManager rm,
+                            boolean showErrors )
+    {
+        for ( Iterator it = rm.getSortedProjects().iterator(); it.hasNext(); )
+        {
+            MavenProject project = (MavenProject) it.next();
+
+            if ( rm.hasBuildFailure( project ) )
+            {
+                BuildFailure buildFailure = rm.getBuildFailure( project );
+
+                getLogger().info(
+                    "Error for project: " + project.getName() + " (during " + buildFailure.getTask() + ")" );
+
+                line();
+
+                logTrace(
+                    buildFailure.getCause(),
+                    showErrors );
+            }
+        }
+
+        if ( !showErrors )
+        {
+            getLogger().info( "For more information, run Maven with the -e switch" );
+
+            line();
+        }
+    }
+
+    private static void showError( Exception e,
+                                   boolean show )
+    {
+        showError( e.getMessage(), e, show );
+    }
+
+    private static void showError( String message,
+                                   Exception e,
+                                   boolean show )
+    {
+        System.err.println();
+        System.err.println( message );
+        System.err.println();
+
+        if ( show )
+        {
+            System.err.println( "Error stacktrace:" );
+
+            e.printStackTrace();
+        }
+        else
+        {
+            System.err.println( "For more information, run with the -e flag" );
+        }
+    }
+    
+    private void logTrace( Throwable t,
+                           boolean showErrors )
+    {
+        if ( getLogger().isDebugEnabled() )
+        {
+            getLogger().debug(
+                "Trace",
+                t );
+
+            line();
+        }
+        else if ( showErrors )
+        {
+            getLogger().info(
+                "Trace",
+                t );
+
+            line();
+        }
+    }
+
+    private void logSuccess( ReactorManager rm )
+    {
+        line();
+
+        getLogger().info( "BUILD SUCCESSFUL" );
+
+        line();
+    }
+
+    private void logReactorSummary( ReactorManager rm )
+    {
+        if ( rm != null && rm.hasMultipleProjects() && rm.executedMultipleProjects() )
+        {
+            getLogger().info( "" );
+            getLogger().info( "" );
+
+            // -------------------------
+            // Reactor Summary:
+            // -------------------------
+            // o project-name...........FAILED
+            // o project2-name..........SKIPPED (dependency build failed or was skipped)
+            // o project-3-name.........SUCCESS
+
+            line();
+            getLogger().info( "Reactor Summary:" );
+            line();
+
+            for ( Iterator it = rm.getSortedProjects().iterator(); it.hasNext(); )
+            {
+                MavenProject project = (MavenProject) it.next();
+
+                if ( rm.hasBuildFailure( project ) )
+                {
+                    logReactorSummaryLine(
+                        project.getName(),
+                        "FAILED",
+                        rm.getBuildFailure( project ).getTime() );
+                }
+                else if ( rm.isBlackListed( project ) )
+                {
+                    logReactorSummaryLine(
+                        project.getName(),
+                        "SKIPPED (dependency build failed or was skipped)" );
+                }
+                else if ( rm.hasBuildSuccess( project ) )
+                {
+                    logReactorSummaryLine(
+                        project.getName(),
+                        "SUCCESS",
+                        rm.getBuildSuccess( project ).getTime() );
+                }
+                else
+                {
+                    logReactorSummaryLine(
+                        project.getName(),
+                        "NOT BUILT" );
+                }
+            }
+            line();
+        }
+    }
+
+    private void stats( Date start )
+    {
+        Date finish = new Date();
+
+        long time = finish.getTime() - start.getTime();
+
+        getLogger().info( "Total time: " + formatTime( time ) );
+
+        getLogger().info( "Finished at: " + finish );
+
+        //noinspection CallToSystemGC
+        System.gc();
+
+        Runtime r = Runtime.getRuntime();
+
+        getLogger().info(
+            "Final Memory: " + ( r.totalMemory() - r.freeMemory() ) / MB + "M/" + r.totalMemory() / MB + "M" );
+    }
+
+    private void line()
+    {
+        getLogger().info( "------------------------------------------------------------------------" );
+    }
+
+    private static String formatTime( long ms )
+    {
+        long secs = ms / MS_PER_SEC;
+
+        long min = secs / SEC_PER_MIN;
+
+        secs = secs % SEC_PER_MIN;
+
+        String msg = "";
+
+        if ( min > 1 )
+        {
+            msg = min + " minutes ";
+        }
+        else if ( min == 1 )
+        {
+            msg = "1 minute ";
+        }
+
+        if ( secs > 1 )
+        {
+            msg += secs + " seconds";
+        }
+        else if ( secs == 1 )
+        {
+            msg += "1 second";
+        }
+        else if ( min == 0 )
+        {
+            msg += "< 1 second";
+        }
+        return msg;
+    }
+
+    private void logReactorSummaryLine( String name,
+                                        String status )
+    {
+        logReactorSummaryLine(
+            name,
+            status,
+            -1 );
+    }
+
+    private void logReactorSummaryLine( String name,
+                                        String status,
+                                        long time )
+    {
+        StringBuffer messageBuffer = new StringBuffer();
+
+        messageBuffer.append( name );
+
+        int dotCount = 54;
+
+        dotCount -= name.length();
+
+        messageBuffer.append( " " );
+
+        for ( int i = 0; i < dotCount; i++ )
+        {
+            messageBuffer.append( '.' );
+        }
+
+        messageBuffer.append( " " );
+
+        messageBuffer.append( status );
+
+        if ( time >= 0 )
+        {
+            messageBuffer.append( " [" );
+
+            messageBuffer.append( getFormattedTime( time ) );
+
+            messageBuffer.append( "]" );
+        }
+
+        getLogger().info( messageBuffer.toString() );
+    }
+
+    private static String getFormattedTime( long time )
+    {
+        String pattern = "s.SSS's'";
+        if ( time / 60000L > 0 )
+        {
+            pattern = "m:s" + pattern;
+            if ( time / 3600000L > 0 )
+            {
+                pattern = "H:m" + pattern;
+            }
+        }
+        DateFormat fmt = new SimpleDateFormat( pattern );
+        fmt.setTimeZone( TimeZone.getTimeZone( "UTC" ) );
+        return fmt.format( new Date( time ) );
+    }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS5 INS42 INS43 INS42 INS60 INS41 INS25 INS21 INS21 INS42 INS27 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS60 INS21 INS25 INS21 INS21 INS21 INS43 INS42 INS39 INS42 INS24 INS25 INS43 INS42 INS39 INS42 INS25 INS43 INS42 INS21 INS21 INS21 INS43 INS42 INS25 INS43 INS42 INS60 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS42 INS39 INS42 INS60 INS60 INS21 INS60 INS25 INS25 INS41 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS21 INS60 INS21 INS21 INS24 INS21 INS21 INS25 INS21 INS42 INS39 INS42 INS60 INS25 INS60 INS21 INS41 INS43 INS85 INS42 INS43 INS59 INS32 INS32 INS8 INS8 INS32 INS32 INS34 INS34 INS42 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS32 INS32 INS32 INS42 INS58 INS32 INS8 INS38 INS8 INS42 INS32 INS8 INS25 INS42 INS32 INS32 INS32 INS42 INS27 INS8 INS42 INS43 INS59 INS39 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS39 INS59 INS39 INS59 INS7 INS43 INS59 INS27 INS8 INS25 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS39 INS59 INS7 INS32 INS58 INS27 INS37 INS8 INS32 INS32 INS27 INS8 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS60 INS21 INS21 INS21 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS21 INS25 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS21 INS21 INS32 INS42 INS21 INS21 INS42 INS8 INS42 INS32 INS42 INS45 INS42 INS27 INS32 INS21 INS21 INS21 INS21 INS21 INS24 INS21 INS42 INS42 INS14 INS42 INS27 INS32 INS42 INS27 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS27 INS32 INS42 INS45 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS45 INS42 INS34 INS21 INS27 INS8 INS42 INS34 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS38 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS45 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS34 INS21 INS21 INS21 INS32 INS42 INS32 INS42 INS42 INS45 INS27 INS34 INS21 INS25 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS59 INS32 INS32 INS7 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS38 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS32 INS32 INS42 INS32 INS32 INS21 INS21 INS42 INS27 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS58 INS32 INS8 INS32 INS43 INS32 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS34 INS21 INS7 INS42 INS34 INS21 INS27 INS8 INS34 INS43 INS42 INS42 INS42 INS34 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS34 INS7 INS27 INS8 INS43 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS32 INS42 INS45 INS42 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS27 INS7 INS42 INS27 INS7 INS42 INS34 INS21 INS42 INS42 INS42 INS13 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS27 INS27 INS34 INS21 INS42 INS42 INS43 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS43 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS25 INS27 INS45 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS7 INS42 INS42 INS45 INS42 INS42 INS34 INS7 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS21 INS32 INS8 INS25 INS45 INS27 INS42 INS42 INS42 INS45 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS21 INS32 INS8 INS8 INS36 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS32 INS42 INS42 INS42 INS21 INS21 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS45 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL83