Working on: MNG-483

Fixing profile application to separate profiles discovered in and around POM from those in settings.xml, and apply them separately in the order: 

for-each-project-in-inheritance:{POM, profiles.xml}, settings.xml

Added common interface for accumulating, explicitly activating and deactivating, and retrieving profiles to be applied to a given project. This manager interface (ProfileManager) is general enough to be applicable to both the project-level and settings-level profiles.

Added 'performRelease'-keyed profile to super-POM which will be used by the release plugin and anyone using a parallel process, and which will enable '-DupdateReleaseInfo=true' for the deploy mojo, along with enabling the source attachment for the project.

Added 'attach' parameter to JarSourceMojo to allow local POM to turn off source attachments, overriding release profile in super-pom.

Updated the release:perform mojo to use '-DperformRelease=true' for switching on the new release profile, rather than just using '-DupdateReleaseInfo=true'...



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@233013 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.profiles.activation.ProfileActivationCalculator;
+import org.apache.maven.profiles.DefaultProfileManager;
+import org.apache.maven.profiles.MavenProfilesBuilder;
+import org.apache.maven.profiles.ProfileManager;
+import org.apache.maven.profiles.ProfilesConversionUtils;
+import org.apache.maven.profiles.ProfilesRoot;
+import org.apache.maven.profiles.activation.ProfileActivationException;
+    protected MavenProfilesBuilder profilesBuilder;
+
-    private ProfileActivationCalculator profileActivationCalculator;
-
-    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository,
-                                               List externalProfiles )
+    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository, ProfileManager profileManager )
-        MavenProject project = buildFromSourceFile( projectDescriptor, localRepository, externalProfiles );
+        MavenProject project = buildFromSourceFile( projectDescriptor, localRepository, profileManager );
-    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository, List externalProfiles )
+    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository, ProfileManager profileManager )
-        return buildFromSourceFile( projectDescriptor, localRepository, externalProfiles );
+        return buildFromSourceFile( projectDescriptor, localRepository, profileManager );
-    private MavenProject buildFromSourceFile( File projectDescriptor, ArtifactRepository localRepository,
-                                              List externalProfiles )
+    private MavenProject buildFromSourceFile( File projectDescriptor, ArtifactRepository localRepository, ProfileManager profileManager )
-                                      Collections.EMPTY_LIST, externalProfiles,
-                                      projectDescriptor.getAbsoluteFile().getParentFile() );
+                                      Collections.EMPTY_LIST, projectDescriptor.getAbsoluteFile().getParentFile(), profileManager );
-                      Collections.EMPTY_LIST, null );
+                      null, null );
-                                List parentSearchRepositories, List externalProfiles, File projectDir )
+                                List parentSearchRepositories, File projectDir, ProfileManager profileManager )
-        for ( Iterator i = externalProfiles.iterator(); i.hasNext(); )
+        List activeExternalProfiles;
+        try
+        {
+            if ( profileManager != null )
+            {
+                activeExternalProfiles = profileManager.getActiveProfiles();
+            }
+            else
+            {
+                activeExternalProfiles = Collections.EMPTY_LIST;
+            }
+        }
+        catch ( ProfileActivationException e )
+        {
+            throw new ProjectBuildingException( "Failed to calculate active external profiles.", e );
+        }
+        
+        for ( Iterator i = activeExternalProfiles.iterator(); i.hasNext(); )
-        MavenProject project = assembleLineage( model, lineage, localRepository, externalProfiles, projectDir,
-                                                parentSearchRepositories, aggregatedRemoteWagonRepositories );
+        MavenProject project = assembleLineage( model, lineage, localRepository, projectDir, parentSearchRepositories,
+                                                aggregatedRemoteWagonRepositories );
-            project = processProjectLogic( pomLocation, project, new ArrayList( aggregatedRemoteWagonRepositories ),
-                                           externalProfiles );
+            project = processProjectLogic( pomLocation, project, new ArrayList( aggregatedRemoteWagonRepositories ), profileManager );
-    private MavenProject processProjectLogic( String pomLocation, MavenProject project, List remoteRepositories,
-                                              List externalProfiles )
+    private MavenProject processProjectLogic( String pomLocation, MavenProject project, List remoteRepositories, ProfileManager profileMgr )
-
-        List activeProfiles = new ArrayList( externalProfiles );
-
-        List activePomProfiles = profileActivationCalculator.calculateActiveProfiles( model.getProfiles() );
-
-        activeProfiles.addAll( activePomProfiles );
-
-        Properties profileProperties = new Properties();
-
-        for ( Iterator it = activeProfiles.iterator(); it.hasNext(); )
+        
+        Properties profileProperties = project.getProfileProperties();
+        
+        if ( profileProperties == null )
-            Profile profile = (Profile) it.next();
-
-            profileInjector.inject( profile, model );
-
-            profileProperties.putAll( profile.getProperties() );
+            profileProperties = new Properties();
+        
+        List activeProfiles = project.getActiveProfiles();
+        
+        if ( activeProfiles == null )
+        {
+            activeProfiles = new ArrayList();
+        }
+        
+        List injectedProfiles = injectActiveProfiles( profileMgr, model, profileProperties );
+        
+        activeProfiles.addAll( injectedProfiles );
-
-        project.addProfileProperties( profileProperties );
-
-        project.setActiveProfiles( activeProfiles );
-        
-
+        project.setActiveProfiles( activeProfiles );
+        
+        project.addProfileProperties( profileProperties );
+        
+        project.assembleProfilePropertiesInheritance();
+        
-                                          List externalProfiles, File projectDir, List parentSearchRepositories,
+                                          File projectDir, List parentSearchRepositories,
+        ProfileManager profileManager = new DefaultProfileManager( container );
+        
+        List activeProfiles;
+        
+        Properties profileProperties = new Properties();
+
+        try
+        {
+            profileManager.addProfiles( model.getProfiles() );
+            
+            loadProjectExternalProfiles( profileManager, projectDir );
+            
+            activeProfiles = injectActiveProfiles( profileManager, model, profileProperties );
+        }
+        catch ( ProfileActivationException e )
+        {
+            throw new ProjectBuildingException( "Failed to activate local (project-level) build profiles.", e );
+        }
+
+        project.addProfileProperties( profileProperties );
+
+        project.setActiveProfiles( activeProfiles );
+        
-            MavenProject parent = assembleLineage( model, lineage, localRepository, externalProfiles, parentProjectDir,
-                                                   parentSearchRepositories, aggregatedRemoteWagonRepositories );
+            MavenProject parent = assembleLineage( model, lineage, localRepository, parentProjectDir, parentSearchRepositories, 
+                                                   aggregatedRemoteWagonRepositories );
+    private List injectActiveProfiles( ProfileManager profileManager, Model model, Properties profileProperties ) 
+        throws ProjectBuildingException
+    {
+        List activeProfiles;
+        
+        if ( profileManager != null )
+        {
+            try
+            {
+                activeProfiles = profileManager.getActiveProfiles();
+            }
+            catch ( ProfileActivationException e )
+            {
+                throw new ProjectBuildingException( "Failed to calculate active build profiles.", e );
+            }
+
+            for ( Iterator it = activeProfiles.iterator(); it.hasNext(); )
+            {
+                Profile profile = (Profile) it.next();
+
+                profileInjector.inject( profile, model );
+
+                profileProperties.putAll( profile.getProperties() );
+            }
+        }
+        else
+        {
+            activeProfiles = Collections.EMPTY_LIST;
+        }
+        
+        return activeProfiles;
+    }
+
+    private void loadProjectExternalProfiles( ProfileManager profileManager, File projectDir )
+        throws ProfileActivationException
+    {
+        if ( projectDir != null )
+        {
+            try
+            {
+                ProfilesRoot root = profilesBuilder.buildProfiles( projectDir );
+
+                if ( root != null )
+                {
+                    for ( Iterator it = root.getProfiles().iterator(); it.hasNext(); )
+                    {
+                        org.apache.maven.profiles.Profile rawProfile = (org.apache.maven.profiles.Profile) it.next();
+
+                        profileManager.addProfile( ProfilesConversionUtils.convertFromProfileXmlProfile( rawProfile ) );
+                    }
+                }
+            }
+            catch ( IOException e )
+            {
+                throw new ProfileActivationException( "Cannot read profiles.xml resource from directory: " + projectDir, e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new ProfileActivationException( "Cannot parse profiles.xml resource from directory: " + projectDir, e );
+            }
+        }
+    }
+
-    public MavenProject buildStandaloneSuperProject( ArtifactRepository localRepository, List externalProfiles )
+    public MavenProject buildStandaloneSuperProject( ArtifactRepository localRepository )
-            project = processProjectLogic( "<Super-POM>", project, remoteRepositories, externalProfiles );
+            project = processProjectLogic( "<Super-POM>", project, remoteRepositories, null );

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD40 INS23 MOV44 INS31 INS31 INS83 INS43 INS59 MOV21 MOV21 INS83 MOV43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 INS43 INS42 INS60 INS54 INS43 INS42 INS60 INS25 INS25 INS21 INS60 INS60 MOV60 INS54 INS21 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS42 INS25 UPD42 UPD42 UPD42 INS42 MOV43 INS59 INS8 INS12 INS42 INS43 INS59 INS27 INS8 MOV43 INS27 INS8 MOV43 INS32 INS43 INS59 MOV43 INS59 INS8 INS12 INS32 INS32 INS42 INS42 INS42 MOV43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS27 INS8 UPD42 MOV42 INS33 INS42 INS25 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS42 INS33 INS21 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS14 INS42 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS54 MOV24 INS21 INS42 INS33 INS54 UPD42 UPD42 INS27 INS8 INS8 INS43 INS42 INS53 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS43 INS42 MOV32 INS32 INS7 INS43 INS42 INS53 INS8 INS12 INS7 INS8 INS12 INS12 INS42 INS33 INS21 INS21 INS42 INS14 UPD42 INS42 INS14 INS42 MOV14 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS21 INS44 INS8 INS42 INS40 INS60 INS25 INS44 INS8 INS44 INS8 INS7 INS7 INS43 INS45 INS42 UPD42 INS43 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS7 INS43 INS42 INS53 INS43 INS59 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS33 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS14 INS42 INS42 INS32 INS42 INS33 INS24 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS58 INS32 INS8 INS43 INS27 INS42 INS43 INS27 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS42 INS40 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS40 INS42 INS42 DEL83 DEL43 DEL42 DEL59 DEL23 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL44 DEL42 DEL42 DEL44 DEL42