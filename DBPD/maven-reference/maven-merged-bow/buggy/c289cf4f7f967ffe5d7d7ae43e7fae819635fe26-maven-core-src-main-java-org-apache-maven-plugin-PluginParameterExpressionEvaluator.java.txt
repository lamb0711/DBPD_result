change expressions to use ${} instead of #

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@164171 13f79535-47bb-0310-9956-ffa450edef68

-    public Object evaluate( String expression )
+    public Object evaluate( String expr )
-        if ( expression == null )
+        if ( expr == null )
-            // todo : verify if it's fixed with trygvis modification in Plexus
+            // TODO: this should not have happened - previously there was a note about a fix to plexus Trygve was going to make - investigate
-        if ( expression.startsWith( "#component" ) )
+
+        String expression = stripTokens( expr );
+        if ( expression.equals( expr ) )
+        {
+            // Was not an expression
+            return expression;
+        }
+
+        if ( expression.startsWith( "component" ) )
-            String role = expression.substring( 11 );
+            String role = expression.substring( 10 );
-        else if ( expression.equals( "#localRepository" ) )
+        else if ( expression.equals( "localRepository" ) )
-        else if ( expression.equals( "#maven.final.name" ) )
+        else if ( expression.equals( "maven.final.name" ) )
-        else if ( expression.equals( "#project" ) )
+        else if ( expression.equals( "project" ) )
-        else if ( expression.startsWith( "#project" ) )
+        else if ( expression.startsWith( "project" ) )
-        else if ( "#settings".equals( expression ) )
+        else if ( "settings".equals( expression ) )
-        else if ( expression.equals( "#basedir" ) )
+        else if ( expression.equals( "basedir" ) )
-        else if ( expression.startsWith( "#basedir" ) )
+        else if ( expression.startsWith( "basedir" ) )
-                new Exception( "Got expression '" + expression + "' that was not recognised" ).printStackTrace();
+                context.getLog().error( "Got expression '" + expression + "' that was not recognised" );
-        else if ( expression.startsWith( "#" ) )
+        else
-            value = System.getProperty( expression.substring( 1 ) );
+            value = System.getProperty( expression );
+            // Note that we only half support nesting of expressions due to endsWith above
-
-            if ( sharpSeparator > 0 )
+            if ( sharpSeparator < 0 )
-                val = val.substring( 0, sharpSeparator ) + evaluate( val.substring( sharpSeparator ) );
-                value = val;
+                sharpSeparator = val.indexOf( "${" );
-            else if ( sharpSeparator > 0 )
+
+            if ( sharpSeparator >= 0 )
-                value = evaluate( val.substring( sharpSeparator ) );
+                if ( sharpSeparator > 0 )
+                {
+                    value = val.substring( 0, sharpSeparator ) + evaluate( val.substring( sharpSeparator ) );
+                }
+                else
+                {
+                    value = evaluate( val.substring( sharpSeparator ) );
+                }
-        // ----------------------------------------------------------------------
-        // If we strike and we are not dealing with an expression then we will
-        // will let the value pass through unaltered so that users can hardcode
-        // literal values. Expressions that evaluate to null will be passed
-        // through as null so that the validator can see the null value and
-        // act in accordance with the requirements laid out in the
-        // mojo descriptor.
-        // ----------------------------------------------------------------------
-
-        if ( value == null && expression.length() > 0 && !expression.startsWith( "#" ) )
-        {
-            value = expression;
-        }
-
+    private String stripTokens( String expr )
+    {
+        if ( expr.startsWith( "#" ) )
+        {
+            context.getLog().warn( "DEPRECATED: use ${} to delimit expressions instead of # for '" + expr + "'" );
+            expr = expr.substring( 1 );
+        }
+        else if ( expr.startsWith( "${" ) && expr.endsWith( "}" ) )
+        {
+            expr = expr.substring( 2, expr.length() - 1 );
+        }
+        return expr;
+    }
+

INS31 INS83 INS43 INS42 INS44 INS8 UPD42 INS60 INS25 INS42 INS43 INS42 INS25 INS41 MOV43 INS59 INS32 MOV8 INS42 INS32 INS8 INS25 INS42 UPD42 INS42 INS32 MOV42 UPD42 MOV42 INS42 INS41 UPD45 INS25 INS42 INS42 INS45 INS21 INS21 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS43 UPD45 INS27 INS8 INS27 INS8 INS32 INS7 INS32 INS32 INS21 INS42 UPD45 INS42 INS34 INS21 INS42 INS34 MOV25 INS32 INS42 INS27 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS7 UPD34 UPD45 INS7 MOV27 MOV8 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS34 INS42 INS32 UPD45 INS42 INS32 INS42 INS42 INS34 INS27 UPD45 INS42 INS42 INS45 INS32 INS34 UPD45 MOV8 UPD42 INS42 INS42 UPD45 MOV42 INS32 INS42 MOV27 INS42 UPD42 MOV42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL14 DEL42 DEL34 DEL32 DEL42 DEL42 DEL45 DEL32 DEL25 DEL42 DEL42 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL45 DEL32 DEL38 DEL27 DEL25