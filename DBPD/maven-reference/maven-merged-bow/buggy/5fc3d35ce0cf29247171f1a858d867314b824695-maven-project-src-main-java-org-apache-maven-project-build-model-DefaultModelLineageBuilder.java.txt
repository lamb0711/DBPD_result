Removing maven-build-context, and replacing it with caching aspects for model-lineage stuff and project instances. Still needs caching for artifact resolution, and I have an aspect for this too, but it's not enabled yet, since it's still buggy.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@595215 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.context.BuildContextManager;
-import org.apache.maven.project.ProjectBuildingException;
-import org.apache.maven.project.build.ProjectBuildCache;
+import org.apache.maven.profiles.activation.DefaultProfileActivationContext;
+import org.apache.maven.profiles.activation.ProfileActivationContext;
+import org.apache.maven.project.ProjectBuildingException;
-    private BuildContextManager buildContextManager;
-
-    public DefaultModelLineageBuilder( ArtifactResolver resolver, ArtifactFactory artifactFactory, BuildContextManager buildContextManager )
+    public DefaultModelLineageBuilder( ArtifactResolver resolver,
+                                       ArtifactFactory artifactFactory )
-        this.buildContextManager = buildContextManager;
-    public ModelLineage buildModelLineage( File pom, ArtifactRepository localRepository, List remoteRepositories,
-                                           ProfileManager profileManager, boolean allowStubs, boolean validProfilesXmlLocation )
+    public ModelLineage buildModelLineage( File pom,
+                                           ArtifactRepository localRepository,
+                                           List remoteRepositories,
+                                           ProfileManager profileManager,
+                                           boolean allowStubs,
+                                           boolean validProfilesXmlLocation )
-        ProjectBuildCache projectBuildCache = ProjectBuildCache.read( buildContextManager );
-
-                                                                   : new ArrayList( remoteRepositories );
+                        : new ArrayList( remoteRepositories );
-        ModelAndFile current = new ModelAndFile( readModel( pom, projectBuildCache ), pom, validProfilesXmlLocation );
+        // TODO: Cache the result of this readModel(..) call.
+        ModelAndFile current = new ModelAndFile( readModel( pom ), pom, validProfilesXmlLocation );
-                lineage.setOrigin( current.model, current.file, currentRemoteRepositories, current.validProfilesXmlLocation );
+                lineage.setOrigin( current.getModel(),
+                                   current.getFile(),
+                                   currentRemoteRepositories,
+                                   current.isValidProfilesXmlLocation() );
-                lineage.addParent( current.model, current.file, currentRemoteRepositories, current.validProfilesXmlLocation );
+                lineage.addParent( current.getModel(),
+                                   current.getFile(),
+                                   currentRemoteRepositories,
+                                   current.isValidProfilesXmlLocation() );
-            currentRemoteRepositories = updateRepositorySet( current.model, currentRemoteRepositories, current.file, profileManager, current.validProfilesXmlLocation );
+            currentRemoteRepositories = updateRepositorySet( current.getModel(),
+                                                             currentRemoteRepositories,
+                                                             current.getFile(),
+                                                             profileManager,
+                                                             current.isValidProfilesXmlLocation() );
-            current = resolveParentPom( current, currentRemoteRepositories, localRepository, projectBuildCache, allowStubs );
+            current = resolveParentPom( current,
+                                        currentRemoteRepositories,
+                                        localRepository,
+                                        allowStubs );
-    public void resumeBuildingModelLineage( ModelLineage lineage, ArtifactRepository localRepository,
-                                            ProfileManager profileManager, boolean allowStubs )
+    public void resumeBuildingModelLineage( ModelLineage lineage,
+                                            ArtifactRepository localRepository,
+                                            ProfileManager profileManager,
+                                            boolean allowStubs )
-            throw new ProjectBuildingException( "unknown", "Cannot resume a ModelLineage that doesn't contain at least one Model instance." );
+            throw new ProjectBuildingException( "unknown",
+                                                "Cannot resume a ModelLineage that doesn't contain at least one Model instance." );
-        ProjectBuildCache projectBuildCache = ProjectBuildCache.read( buildContextManager );
-
-        ModelAndFile current = new ModelAndFile( lineage.getDeepestAncestorModel(), lineage.getDeepestAncestorFile(), lineage.isDeepestAncestorUsingProfilesXml() );
+        ModelAndFile current = new ModelAndFile( lineage.getDeepestAncestorModel(),
+                                                 lineage.getDeepestAncestorFile(),
+                                                 lineage.isDeepestAncestorUsingProfilesXml() );
-        current = resolveParentPom( current, currentRemoteRepositories, localRepository, projectBuildCache, allowStubs );
+        current = resolveParentPom( current,
+                                    currentRemoteRepositories,
+                                    localRepository,
+                                    allowStubs );
-            lineage.addParent( current.model, current.file, currentRemoteRepositories, current.validProfilesXmlLocation );
+            lineage.addParent( current.getModel(),
+                               current.getFile(),
+                               currentRemoteRepositories,
+                               current.isValidProfilesXmlLocation() );
-            currentRemoteRepositories = updateRepositorySet( current.model, currentRemoteRepositories, current.file, profileManager, current.validProfilesXmlLocation );
+            currentRemoteRepositories = updateRepositorySet( current.getModel(),
+                                                             currentRemoteRepositories,
+                                                             current.getFile(),
+                                                             profileManager,
+                                                             current.isValidProfilesXmlLocation() );
-            current = resolveParentPom( current, currentRemoteRepositories, localRepository, projectBuildCache, allowStubs );
+            current = resolveParentPom( current,
+                                        currentRemoteRepositories,
+                                        localRepository,
+                                        allowStubs );
-        return readModel( pomFile, null, true );
-    }
-
-    /**
-     * Read the Model instance from the given POM file, and cache it in the given Map before
-     * returning it.
-     */
-    private Model readModel( File pomFile, ProjectBuildCache projectBuildCache )
-        throws ProjectBuildingException
-    {
-        return readModel( pomFile, projectBuildCache, false );
-    }
-
-    /**
-     * Read the Model instance from the given POM file. Optionally (in normal cases) cache the
-     * Model instance in the given Map before returning it. The skipCache flag controls whether the
-     * Model instance is actually cached.
-     */
-    private Model readModel( File pom, ProjectBuildCache projectBuildCache, boolean skipCache )
-        throws ProjectBuildingException
-    {
-        File pomFile = pom;
-        if ( pom.isDirectory() )
+        if ( pomFile.isDirectory() )
-            pomFile = new File( pom, "pom.xml" );
-//            getLogger().debug( "readModel(..): POM: " + pom + " is a directory. Trying: " + pomFile + " instead." );
+            pomFile = new File( pomFile, "pom.xml" );
-            throw new ProjectBuildingException( "unknown", "Failed to read model from: " + pomFile, pomFile, e );
+            throw new ProjectBuildingException( "unknown", "Failed to read model from: " + pomFile,
+                                                pomFile, e );
-            throw new ProjectBuildingException( "unknown", "Failed to parse model from: " + pomFile, pomFile, e );
+            throw new ProjectBuildingException( "unknown",
+                                                "Failed to parse model from: " + pomFile, pomFile,
+                                                e );
-        if ( !skipCache )
-        {
-            projectBuildCache.cacheModelFileForModel( pomFile, model );
-            projectBuildCache.store( buildContextManager );
-        }
-
-    private List updateRepositorySet( Model model, List oldArtifactRepositories, File pomFile,
-                                      ProfileManager externalProfileManager, boolean useProfilesXml )
+    private List updateRepositorySet( Model model,
+                                      List oldArtifactRepositories,
+                                      File pomFile,
+                                      ProfileManager externalProfileManager,
+                                      boolean useProfilesXml )
-                loadActiveProfileRepositories( remoteRepos, model, externalProfileManager, projectDir, useProfilesXml );
+                loadActiveProfileRepositories( remoteRepos,
+                                               model,
+                                               externalProfileManager,
+                                               projectDir,
+                                               useProfilesXml );
-                artifactRepositories = new LinkedHashSet( remoteRepos.size() + oldArtifactRepositories.size() );
+                artifactRepositories = new LinkedHashSet( remoteRepos.size()
+                                                          + oldArtifactRepositories.size() );
-                throw new ProjectBuildingException( model.getId(), "Failed to create ArtifactRepository list for: "
-                    + pomFile, pomFile, e );
+                throw new ProjectBuildingException( model.getId(),
+                                                    "Failed to create ArtifactRepository list for: "
+                                                                    + pomFile, pomFile, e );
-    private void loadActiveProfileRepositories( List repositories, Model model, ProfileManager profileManager,
-                                                File pomFile, boolean useProfilesXml )
+    private void loadActiveProfileRepositories( List repositories,
+                                                Model model,
+                                                ProfileManager profileManager,
+                                                File pomFile,
+                                                boolean useProfilesXml )
+        // FIXME: Find a way to pass in this context, so it's never null!
+        ProfileActivationContext context;
+
+            context = profileManager.getProfileActivationContext();
+            context = new DefaultProfileActivationContext( System.getProperties(), false );
-        LinkedHashSet profileRepos = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( profileManager, pomFile, model.getId() );
+        LinkedHashSet profileRepos = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( profileManager,
+                                                                                               pomFile,
+                                                                                               model.getId() );
-        profileRepos.addAll( profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model, pomFile,
-                                                                                               explicitlyActive,
-                                                                                               explicitlyInactive,
-                                                                                               useProfilesXml ) );
+        profileRepos.addAll( profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model,
+                                                                                       pomFile,
+                                                                                       explicitlyActive,
+                                                                                       explicitlyInactive,
+                                                                                       useProfilesXml,
+                                                                                       context ) );
-    private ModelAndFile resolveParentPom( ModelAndFile child, List remoteRepositories, ArtifactRepository localRepository,
-                                   ProjectBuildCache projectBuildCache, boolean allowStubs )
+    private ModelAndFile resolveParentPom( ModelAndFile child,
+                                           List remoteRepositories,
+                                           ArtifactRepository localRepository,
+                                           boolean allowStubs )
-        Model model = child.model;
-        File modelPomFile = child.file;
+        Model model = child.getModel();
+        File modelPomFile = child.getFile();
-              validateParentDeclaration( modelParent, model );
+            validateParentDeclaration( modelParent, model );
-            File parentPomFile = projectBuildCache.getCachedModelFile( modelParent );
+            File parentPomFile = null;
-            if ( ( parentPomFile == null ) && ( modelPomFile != null ) )
+            if ( ( modelPomFile != null ) )
-                    parentPomFile = resolveParentFromRepositories( modelParent, localRepository, remoteRepositories, model.getId(), modelPomFile );
+                    parentPomFile = resolveParentFromRepositories( modelParent,
+                                                                   localRepository,
+                                                                   remoteRepositories,
+                                                                   model.getId(),
+                                                                   modelPomFile );
-                catch( ProjectBuildingException e )
+                catch ( ProjectBuildingException e )
-                        getLogger().debug( "DISREGARDING the error encountered while resolving artifact for: " + modelParent.getId() + ", building a stub model in its place.", e );
+                        getLogger().debug( "DISREGARDING the error encountered while resolving artifact for: "
+                                                           + modelParent.getId()
+                                                           + ", building a stub model in its place.",
+                                           e );
-                    getLogger().warn( "Cannot find parent POM: " + modelParent.getId() + " for child: " + model.getId() + ". Using stub model instead." );
+                    getLogger().warn( "Cannot find parent POM: " + modelParent.getId()
+                                      + " for child: " + model.getId()
+                                      + ". Using stub model instead." );
-    private void validateParentDeclaration( Parent modelParent, Model model )
+    private void validateParentDeclaration( Parent modelParent,
+                                            Model model )
-            throw new ProjectBuildingException( model.getId(), "Missing groupId element from parent element" );
+            throw new ProjectBuildingException( model.getId(),
+                                                "Missing groupId element from parent element" );
-            throw new ProjectBuildingException( model.getId(), "Missing artifactId element from parent element" );
+            throw new ProjectBuildingException( model.getId(),
+                                                "Missing artifactId element from parent element" );
-            && modelParent.getArtifactId().equals( model.getArtifactId() ) )
+                  && modelParent.getArtifactId().equals( model.getArtifactId() ) )
-                + "the current project " );
+                                                               + "the current project " );
-            throw new ProjectBuildingException( model.getId(), "Missing version element from parent element" );
+            throw new ProjectBuildingException( model.getId(),
+                                                "Missing version element from parent element" );
-    private File resolveParentFromRepositories( Parent modelParent, ArtifactRepository localRepository,
-                                                List remoteRepositories, String childId, File childPomFile )
+    private File resolveParentFromRepositories( Parent modelParent,
+                                                ArtifactRepository localRepository,
+                                                List remoteRepositories,
+                                                String childId,
+                                                File childPomFile )
-        Artifact parentPomArtifact = artifactFactory.createBuildArtifact( modelParent.getGroupId(), modelParent
-            .getArtifactId(), modelParent.getVersion(), "pom" );
+        Artifact parentPomArtifact = artifactFactory.createBuildArtifact( modelParent.getGroupId(),
+                                                                          modelParent.getArtifactId(),
+                                                                          modelParent.getVersion(),
+                                                                          "pom" );
-            throw new ProjectBuildingException( childId, "Failed to resolve parent POM: " + modelParent.getId(), childPomFile, e );
+            throw new ProjectBuildingException( childId, "Failed to resolve parent POM: "
+                                                         + modelParent.getId(), childPomFile, e );
-            throw new ProjectBuildingException( childId, "Cannot find artifact for parent POM: " + modelParent.getId(), childPomFile, e );
+            throw new ProjectBuildingException( childId, "Cannot find artifact for parent POM: "
+                                                         + modelParent.getId(), childPomFile, e );
-    private File resolveParentWithRelativePath( Parent modelParent, File modelPomFile )
+    private File resolveParentWithRelativePath( Parent modelParent,
+                                                File modelPomFile )
-                || parentModel.getGroupId().equals( modelParent.getGroupId() );
+                                  || parentModel.getGroupId().equals( modelParent.getGroupId() );
-                || parentModel.getVersion().equals( modelParent.getVersion() );
+                                    || parentModel.getVersion().equals( modelParent.getVersion() );
-            if ( groupsMatch && versionsMatch && parentModel.getArtifactId().equals( modelParent.getArtifactId() ) )
+            if ( groupsMatch && versionsMatch
+                 && parentModel.getArtifactId().equals( modelParent.getArtifactId() ) )
-    private static final class ModelAndFile
-    {
-        private final Model model;
-        private final File file;
-        private final boolean validProfilesXmlLocation;
-
-        ModelAndFile( Model model, File file, boolean validProfilesXmlLocation )
-        {
-            this.model = model;
-            this.file = file;
-            this.validProfilesXmlLocation = validProfilesXmlLocation;
-        }
-    }
-

MOV26 MOV26 UPD40 UPD40 MOV29 MOV44 INS60 MOV43 INS43 INS59 MOV43 UPD42 INS42 INS42 INS21 INS21 INS32 INS32 MOV43 INS7 INS7 INS42 INS42 INS42 INS42 INS42 MOV43 MOV36 INS32 INS32 INS32 INS42 INS32 INS42 INS14 INS33 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 MOV43 INS42 INS42 INS42 INS43 INS32 INS9 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL33 DEL9 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL40 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL36 DEL27 DEL83 DEL83 DEL83 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL55