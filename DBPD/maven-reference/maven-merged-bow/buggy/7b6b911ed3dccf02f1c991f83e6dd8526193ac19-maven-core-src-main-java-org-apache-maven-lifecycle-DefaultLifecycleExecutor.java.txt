o lifecycle executor now strictly deals with plugins, and is 500 lines (still needs to be smaller) and is getting
  a lot more efficient 


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@757293 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+import java.util.LinkedHashMap;
-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.lifecycle.mapping.LifecycleMapping;
-import org.apache.maven.model.ReportPlugin;
-import org.apache.maven.model.ReportSet;
-import org.apache.maven.plugin.MojoExecution;
-import org.apache.maven.plugin.MojoFailureException;
-import org.apache.maven.plugin.PluginConfigurationException;
-import org.apache.maven.plugin.PluginManagerException;
-import org.apache.maven.plugin.PluginNotFoundException;
-import org.apache.maven.plugin.PluginVersionNotFoundException;
-import org.apache.maven.plugin.PluginVersionResolutionException;
-import org.apache.maven.reporting.MavenReport;
-    private List defaultReports;
-
-        List goals = session.getGoals();
+        List<String> goals = session.getGoals();
-                return (List<String>) lifecycle.getPhases().values();
+                return (List<String>) lifecycle.getPhases();
+    // 4. Bind those mojos found in the lifecycle mapping for the packaging to the lifecycle
+    // 5. Bind mojos specified in the project itself to the lifecycle
-        LifecycleMapping mapping = lifecycleMappings.get( project.getPackaging() );
+        LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get( project.getPackaging() );
-        Map<String,String> lifecyclePhases = mapping.getLifecycles().get( "default" ).getPhases();
+        Map<String, String> lifecyclePhasesForPackaging = lifecycleMappingForPackaging.getLifecycles().get( "default" ).getPhases();
-        for( String phase : lifecycle.getPhases().values() )
-        {
-            System.out.println( ">> " + phase );
+        // Create an order Map of the phases in the lifecycle to a list of mojos to execute.
+        Map<String,List<String>> phaseToMojoMapping = new LinkedHashMap<String,List<String>>();
+        
+        // 4. 
+        for ( String phase : lifecycle.getPhases() )
+        {   
+            List<String> mojos = new ArrayList<String>(); 
+            
+            // Bind the mojos in the lifecycle mapping for the packaging to the lifecycle itself. If
+            // we can find the specified phase in the packaging them grab those mojos and add them to 
+            // the list we are going to execute.
+            String mojo = lifecyclePhasesForPackaging.get( phase );
+            
+            if ( mojo != null )
+            {
+                mojos.add( mojo );
+            }
+            
+            phaseToMojoMapping.put( phase, mojos );    
+            
+            // We only want to execute up to and including the specified lifecycle phase.
+            if ( phase.equals( task ) )
+            {
+                break;
+            }
-                
+              
+        // 5. 
+        
+        for( Plugin plugin : project.getBuild().getPlugins() )
+        {
+            for( PluginExecution execution : plugin.getExecutions() )
+            {
+                // if the phase is specified then I don't have to go fetch the plugin yet and pull it down
+                // to examine the phase it is associated to.                
+                if ( execution.getPhase() != null )
+                {
+                    for( String goal : execution.getGoals() )
+                    {
+                        String s = plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + plugin.getVersion() + ":" + goal;
+                        phaseToMojoMapping.get( execution.getPhase() ).add( s );
+                    }
+                    
+                }                
+                // if not then i need to grab the mojo descriptor and look at
+                // the phase that is specified
+                else
+                {
+                    for( String goal : execution.getGoals() )
+                    {
+                        String s = plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + plugin.getVersion() + ":" + goal;
+                        MojoDescriptor md = getMojoDescriptor( s, session, project);
+                        phaseToMojoMapping.get( md.getPhase() ).add( s );
+                    }
+                }
+            }
+        }
+                       
+        // We need to turn this into a set of MojoExecutions
+        for( List<String> mojos : phaseToMojoMapping.values() )
+        {
+            for( String mojo : mojos )
+            {
+                System.out.println( ">> " + mojo );
+            }
+        }       
+        
-        try
-        {            
-            if ( lifecycle != null )
-            {
-                Map lifecycleMappings = constructLifecycleMappings( session, task, project, lifecycle );
-
-                executeGoalWithLifecycle( task, session, lifecycleMappings, project, lifecycle );
-            }
-            else
-            {
-                executeStandaloneGoal( task, session, project );
-            }
-        }
-        catch ( PluginNotFoundException e )
-        {
-            throw new BuildFailureException( "A required plugin was not found: " + e.getMessage(), e );
-        }
-        */
-    }
-
-    /*
-    private void executeGoalWithLifecycle( String task, MavenSession session, Map lifecycleMappings, MavenProject project, Lifecycle lifecycle )
-        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-    {
-        List goals = new ArrayList();
-
-        // only execute up to the given phase
-        int index = lifecycle.getPhases().indexOf( task );
-
-        for ( int i = 0; i <= index; i++ )
-        {
-            String p = (String) lifecycle.getPhases().get( i );
-
-            List phaseGoals = (List) lifecycleMappings.get( p );
-
-            if ( phaseGoals != null )
-            {
-                goals.addAll( phaseGoals );
-            }
-        }
-
-        if ( !goals.isEmpty() )
-        {
-            executeGoals( goals, session, project );
-        }
-        else
-        {
-            getLogger().info( "No goals needed for project - skipping" );
-        }
-    }
-    */
-
-    private void executeStandaloneGoal( String task, MavenSession session, MavenProject project )
-        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-    {
-        // guaranteed to come from the CLI and not be part of a phase
-        MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session, project );
-        executeGoals( Collections.singletonList( new MojoExecution( mojoDescriptor ) ), session, project );
-    }
-
-    private void executeGoals( List<MojoExecution> goals, MavenSession session, MavenProject project )
-        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-    {
-        for ( MojoExecution mojoExecution : goals )
+       for ( MojoExecution mojoExecution : goals )
-            if ( mojoDescriptor.isRequiresReports() )
-            {
-                List reports = getReports( project, mojoExecution, session );
-
-                mojoExecution.setReports( reports );
-            }
-
-        }
+        }         
+         */
-    private List getReports( MavenProject project, MojoExecution mojoExecution, MavenSession session )
-        throws LifecycleExecutionException, PluginNotFoundException
-    {
-        List reportPlugins = project.getReportPlugins();
-
-        if ( project.getModel().getReports() != null )
-        {
-            getLogger().error( "Plugin contains a <reports/> section: this is IGNORED - please use <reporting/> instead." );
-        }
-
-        if ( project.getReporting() == null || !project.getReporting().isExcludeDefaults() )
-        {
-            if ( reportPlugins == null )
-            {
-                reportPlugins = new ArrayList();
-            }
-            else
-            {
-                reportPlugins = new ArrayList( reportPlugins );
-            }
-
-            for ( Iterator i = defaultReports.iterator(); i.hasNext(); )
-            {
-                String report = (String) i.next();
-
-                StringTokenizer tok = new StringTokenizer( report, ":" );
-                int count = tok.countTokens();
-                if ( count != 2 && count != 3 )
-                {
-                    getLogger().warn( "Invalid default report ignored: '" + report + "' (must be groupId:artifactId[:version])" );
-                }
-                else
-                {
-                    String groupId = tok.nextToken();
-                    String artifactId = tok.nextToken();
-                    String version = tok.hasMoreTokens() ? tok.nextToken() : null;
-
-                    boolean found = false;
-                    for ( Iterator j = reportPlugins.iterator(); j.hasNext() && !found; )
-                    {
-                        ReportPlugin reportPlugin = (ReportPlugin) j.next();
-                        if ( reportPlugin.getGroupId().equals( groupId ) && reportPlugin.getArtifactId().equals( artifactId ) )
-                        {
-                            found = true;
-                        }
-                    }
-
-                    if ( !found )
-                    {
-                        ReportPlugin reportPlugin = new ReportPlugin();
-                        reportPlugin.setGroupId( groupId );
-                        reportPlugin.setArtifactId( artifactId );
-                        reportPlugin.setVersion( version );
-                        reportPlugins.add( reportPlugin );
-                    }
-                }
-            }
-        }
-
-        List reports = new ArrayList();
-        if ( reportPlugins != null )
-        {
-            for ( Iterator it = reportPlugins.iterator(); it.hasNext(); )
-            {
-                ReportPlugin reportPlugin = (ReportPlugin) it.next();
-
-                List reportSets = reportPlugin.getReportSets();
-
-                if ( reportSets == null || reportSets.isEmpty() )
-                {
-                    reports.addAll( getReports( reportPlugin, null, project, session, mojoExecution ) );
-                }
-                else
-                {
-                    for ( Iterator j = reportSets.iterator(); j.hasNext(); )
-                    {
-                        ReportSet reportSet = (ReportSet) j.next();
-
-                        reports.addAll( getReports( reportPlugin, reportSet, project, session, mojoExecution ) );
-                    }
-                }
-            }
-        }
-        return reports;
-    }
-
-    private List getReports( ReportPlugin reportPlugin, ReportSet reportSet, MavenProject project, MavenSession session, MojoExecution mojoExecution )
-        throws LifecycleExecutionException, PluginNotFoundException
-    {
-        PluginDescriptor pluginDescriptor = loadReport( reportPlugin, project, session );
-
-        List reports = new ArrayList();
-
-        for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext(); )
-        {
-            MojoDescriptor mojoDescriptor = (MojoDescriptor) i.next();
-
-            // TODO: check ID is correct for reports
-            // if the POM configured no reports, give all from plugin
-            if ( reportSet == null || reportSet.getReports().contains( mojoDescriptor.getGoal() ) )
-            {
-                String id = null;
-                if ( reportSet != null )
-                {
-                    id = reportSet.getId();
-                }
-
-                MojoExecution reportExecution = new MojoExecution( mojoDescriptor, id );
-
-                try
-                {
-                    MavenReport reportMojo = pluginManager.getReport( project, reportExecution, session );
-
-                    // Comes back null if it was a plugin, not a report - these are mojos in the reporting plugins that are not reports
-                    if ( reportMojo != null )
-                    {
-                        reports.add( reportMojo );
-
-                        mojoExecution.addMojoExecution( reportExecution );
-                    }
-                }
-                catch ( PluginManagerException e )
-                {
-                    throw new LifecycleExecutionException( "Error getting reports from the plugin '" + reportPlugin.getKey() + "': " + e.getMessage(), e );
-                }
-                catch ( PluginConfigurationException e )
-                {
-                    throw new LifecycleExecutionException( "Error getting reports from the plugin '" + reportPlugin.getKey() + "'", e );
-                }
-                catch ( ArtifactNotFoundException e )
-                {
-                    throw new LifecycleExecutionException( e.getMessage(), e );
-                }
-                catch ( ArtifactResolutionException e )
-                {
-                    throw new LifecycleExecutionException( e.getMessage(), e );
-                }
-            }
-        }
-        return reports;
-    }
-
-    /*
-    private Map constructLifecycleMappings( MavenSession session, String selectedPhase, MavenProject project, Lifecycle lifecycle )
-        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-    {
-        // first, bind those associated with the packaging
-        Map lifecycleMappings = bindLifecycleForPackaging( session, selectedPhase, project, lifecycle );
-
-        // next, loop over plugins and for any that have a phase, bind it
-        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
-        {
-            Plugin plugin = (Plugin) i.next();
-
-            bindPluginToLifecycle( plugin, session, lifecycleMappings, project );
-        }
-
-        return lifecycleMappings;
-    }
-    */
-
-    /*
-    private Map bindLifecycleForPackaging( MavenSession session, String selectedPhase, MavenProject project, Lifecycle lifecycle )
-        throws LifecycleExecutionException, BuildFailureException, PluginNotFoundException
-    {
-        Map mappings = findMappingsForLifecycle( session, project, lifecycle );
-
-        Map lifecycleMappings = new HashMap();
-
-        for ( Iterator i = lifecycle.getPhases().iterator(); i.hasNext(); )
-        {
-            String phase = (String) i.next();
-
-            String phaseTasks = (String) mappings.get( phase );
-
-            if ( phaseTasks != null )
-            {
-                for ( StringTokenizer tok = new StringTokenizer( phaseTasks, "," ); tok.hasMoreTokens(); )
-                {
-                    String goal = tok.nextToken().trim();
-
-                    // Not from the CLI, don't use prefix
-                    MojoDescriptor mojoDescriptor = getMojoDescriptor( goal, session, project );
-
-                    if ( mojoDescriptor == null )
-                    {
-                        continue;
-                    }
-
-                    if ( mojoDescriptor.isDirectInvocationOnly() )
-                    {
-                        throw new LifecycleExecutionException( "Mojo: \'" + goal + "\' requires direct invocation. It cannot be used as part of lifecycle: \'" + project.getPackaging() + "\'." );
-                    }
-
-                    addToLifecycleMappings( lifecycleMappings, phase, new MojoExecution( mojoDescriptor ), session );
-                }
-            }
-
-            if ( phase.equals( selectedPhase ) )
-            {
-                break;
-            }
-        }
-
-        return lifecycleMappings;
-    }
-    */
-
-    private Map findMappingsForLifecycle( MavenSession session, MavenProject project, Lifecycle lifecycle )
-        throws LifecycleExecutionException, PluginNotFoundException
-    {
-        String packaging = project.getPackaging();
-        Map mappings = null;
-
-        LifecycleMapping m;
-
-        Map defaultMappings = lifecycle.getDefaultPhases();
-
-        if ( mappings == null )
-        {
-            m = lifecycleMappings.get( packaging );
-
-            mappings = null; //m.getLifecycles().get( lifecycle.getId() );                    
-        }
-
-        if ( mappings == null )
-        {
-            if ( defaultMappings == null )
-            {
-                throw new LifecycleExecutionException( "Cannot find lifecycle mapping for packaging: \'" + packaging + "\', and there is no default" );
-            }
-            else
-            {
-                mappings = defaultMappings;
-            }
-        }
-
-        return mappings;
-    }
-
-    /**
-     * Take each mojo contained with a plugin, look to see whether it contributes to a phase in the
-     * lifecycle and if it does place it at the end of the list of goals to execute for that given
-     * phase.
-     * 
-     * @param project
-     * @param session
-     * @throws PluginVersionNotFoundException
-     * @throws PluginManagerException
-     * @throws InvalidPluginException
-     * @throws PluginVersionResolutionException
-     * @throws ArtifactNotFoundException
-     * @throws ArtifactResolutionException
-     */
-    private void bindPluginToLifecycle( Plugin plugin, MavenSession session, Map phaseMap, MavenProject project )
-        throws LifecycleExecutionException
-    {
-        PluginDescriptor pluginDescriptor = loadPlugin( plugin, project, session );
-
-        if ( pluginDescriptor.getMojos() != null && !pluginDescriptor.getMojos().isEmpty() )
-        {
-            // use the plugin if inherit was true in a base class, or it is in the current POM, otherwise use the default inheritence setting
-            if ( plugin.isInheritanceApplied() || pluginDescriptor.isInheritedByDefault() )
-            {
-                if ( plugin.getGoals() != null )
-                {
-                    getLogger().error( "Plugin contains a <goals/> section: this is IGNORED - please use <executions/> instead." );
-                }
-
-                List executions = plugin.getExecutions();
-
-                if ( executions != null )
-                {
-                    for ( Iterator it = executions.iterator(); it.hasNext(); )
-                    {
-                        PluginExecution execution = (PluginExecution) it.next();
-
-                        bindExecutionToLifecycle( pluginDescriptor, phaseMap, execution, session );
-                    }
-                }
-            }
-        }
-    }
-
-    private void bindExecutionToLifecycle( PluginDescriptor pluginDescriptor, Map phaseMap, PluginExecution execution, MavenSession session )
-        throws LifecycleExecutionException
-    {
-        for ( Iterator i = execution.getGoals().iterator(); i.hasNext(); )
-        {
-            String goal = (String) i.next();
-
-            MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( goal );
-            if ( mojoDescriptor == null )
-            {
-                throw new LifecycleExecutionException( "'" + goal + "' was specified in an execution, but not found in the plugin" );
-            }
-
-            // We have to check to see that the inheritance rules have been applied before binding this mojo.
-            if ( execution.isInheritanceApplied() || mojoDescriptor.isInheritedByDefault() )
-            {
-                MojoExecution mojoExecution = new MojoExecution( mojoDescriptor, execution.getId() );
-
-                String phase = execution.getPhase();
-
-                if ( phase == null )
-                {
-                    // if the phase was not in the configuration, use the phase in the descriptor
-                    phase = mojoDescriptor.getPhase();
-                }
-
-                if ( phase != null )
-                {
-                    if ( mojoDescriptor.isDirectInvocationOnly() )
-                    {
-                        throw new LifecycleExecutionException( "Mojo: \'" + goal + "\' requires direct invocation. It cannot be used as part of the lifecycle (it was included via the POM)." );
-                    }
-
-                    addToLifecycleMappings( phaseMap, phase, mojoExecution, session );
-                }
-            }
-        }
-    }
-
-    private void addToLifecycleMappings( Map lifecycleMappings, String phase, MojoExecution mojoExecution, MavenSession session )
-    {
-        List goals = (List) lifecycleMappings.get( phase );
-
-        if ( goals == null )
-        {
-            goals = new ArrayList();
-            lifecycleMappings.put( phase, goals );
-        }
-
-        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
-        if ( session.isOffline() && mojoDescriptor.isOnlineRequired() )
-        {
-            String goal = mojoDescriptor.getGoal();
-            getLogger().warn( goal + " requires online mode, but maven is currently offline. Disabling " + goal + "." );
-        }
-        else
-        {
-            goals.add( mojoExecution );
-        }
-    }
-
-    // all this logic should go to the plugin manager
-
-
+        
-                for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+                for ( Plugin buildPlugin : project.getBuildPlugins() )
-                    Plugin buildPlugin = (Plugin) i.next();
-
-            for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+            for ( Plugin buildPlugin : project.getBuildPlugins() )
-                Plugin buildPlugin = (Plugin) i.next();
-
-    private PluginDescriptor loadReport( ReportPlugin plugin, MavenProject project, MavenSession session )
-        throws LifecycleExecutionException
-    {
-        try
-        {
-            return pluginManager.loadReportPlugin( plugin, project, session );
-        }
-        catch ( PluginLoaderException e )
-        {
-            throw new LifecycleExecutionException( e.getMessage(), e );
-        }
-    }
-
-        phaseToLifecycleMap = new HashMap();
+        phaseToLifecycleMap = new HashMap<String,Lifecycle>();
-        for ( Iterator i = lifecycles.iterator(); i.hasNext(); )
+        for ( Lifecycle lifecycle : lifecycles )
-            Lifecycle lifecycle = (Lifecycle) i.next();
-
-            for ( Iterator p = lifecycle.getPhases().values().iterator(); p.hasNext(); )
+            for ( String phase : lifecycle.getPhases() )
-                String phase = (String) p.next();
-

MOV26 UPD40 UPD40 INS31 INS83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV43 MOV43 INS8 MOV60 MOV60 MOV60 INS60 INS70 INS70 INS70 INS70 INS74 INS74 INS59 MOV44 MOV32 INS8 MOV44 INS32 INS8 INS44 INS32 INS8 MOV44 INS42 INS8 INS43 INS43 UPD42 UPD42 MOV43 MOV43 INS74 INS42 INS14 INS60 MOV60 MOV25 MOV21 INS25 MOV32 UPD42 MOV42 INS70 INS74 INS42 UPD42 MOV42 UPD42 MOV42 INS70 INS70 INS70 MOV42 INS42 MOV43 UPD43 MOV43 INS74 INS74 MOV59 MOV43 INS27 MOV8 INS32 INS32 INS8 UPD42 UPD42 MOV44 MOV32 INS8 INS43 INS43 INS44 INS42 INS8 INS44 MOV32 MOV8 INS74 MOV44 MOV32 MOV8 UPD42 INS43 MOV43 INS74 INS43 INS43 UPD42 MOV14 UPD42 UPD42 MOV42 INS33 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS10 INS25 MOV42 UPD42 MOV42 MOV43 INS42 MOV21 INS70 MOV43 INS42 MOV43 MOV43 MOV43 UPD42 UPD42 MOV42 INS43 INS43 MOV42 UPD42 MOV42 INS74 UPD42 UPD42 INS42 INS27 INS8 INS8 INS44 MOV32 MOV8 MOV42 UPD42 MOV42 MOV43 MOV43 UPD42 UPD42 INS32 MOV33 INS70 INS70 INS40 UPD42 MOV43 INS42 UPD42 MOV42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS44 INS32 INS8 INS44 MOV32 INS8 UPD45 UPD42 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS60 INS21 MOV43 INS42 INS60 MOV60 INS21 MOV43 INS59 INS32 MOV43 INS59 MOV43 INS32 UPD42 MOV42 INS27 INS32 INS42 INS42 UPD42 MOV42 INS27 UPD42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD45 MOV45 MOV32 UPD45 MOV45 MOV32 UPD45 MOV45 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS32 UPD45 MOV45 MOV32 INS45 INS32 UPD45 MOV45 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL43 DEL42 DEL43 DEL42 DEL45 DEL14 DEL39 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL16 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL38 DEL25 DEL8 DEL42 DEL42 DEL42 DEL33 DEL32 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL32 DEL42 DEL45 DEL83 DEL42 DEL32 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL31 DEL83 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL43 DEL60 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL58 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL27 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL33 DEL27 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL32 DEL24 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL8 DEL24