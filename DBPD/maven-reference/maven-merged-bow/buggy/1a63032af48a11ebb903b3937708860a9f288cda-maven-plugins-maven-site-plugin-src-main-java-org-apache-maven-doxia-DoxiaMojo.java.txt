PR: MNG-469
configure reports according to spec:
- <reporting> section affects reports run through site and standalone
- <build> section affects reports run standalone and overrides anything already in <reporting>
- command line parameters rule all



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191298 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.MavenSession;
+import org.apache.maven.model.ReportSet;
+import org.apache.maven.plugin.PluginConfigurationException;
-import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
-import org.codehaus.plexus.personality.plexus.lifecycle.phase.PlexusContainerLocator;
-import org.codehaus.plexus.context.Context;
-import org.codehaus.plexus.context.ContextException;
-import org.codehaus.plexus.PlexusConstants;
-import org.codehaus.plexus.PlexusContainer;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-    implements Contextualizable
-    
+
-     * @parameter expression="${project.remoteArtifactRepositories}"
+     * @parameter expression="${session}"
-    private List remoteRepositories;
+    private MavenSession session;
-    private PlexusContainer container;
-
-        Map reports = getReports();
+        List reports = getReports();
-                    for ( Iterator j = reports.keySet().iterator(); j.hasNext(); )
+                    for ( Iterator j = reports.iterator(); j.hasNext(); )
-                        String reportKey = (String) j.next();
+                        MavenReport report = (MavenReport) j.next();
-                        getLog().info( "Generate " + reportKey + " report." );
-
-                        MavenReport report = (MavenReport) reports.get( reportKey );
+                        getLog().info( "Generate " + report.getName( locale ) + " report." );
-    private void categorizeReports( Map reports )
+    private void categorizeReports( List reports )
-        for ( Iterator i = reports.values().iterator(); i.hasNext(); )
+        for ( Iterator i = reports.iterator(); i.hasNext(); )
-                throw new MojoExecutionException( "'" + report.getCategoryName() + "' category define for " +
-                                                  report.getName( defaultLocale ) + " mojo isn't valid." );
+                throw new MojoExecutionException(
+                    "'" + report.getCategoryName() + "' category define for " + report.getName( defaultLocale ) +
+                        " mojo isn't valid." );
-        buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.about" ) + " " +
-                       project.getName() + "\" href=\"/index.html\"/>\n" );
+        buffer.append(
+            "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.about" ) + " " +
+                project.getName() + "\" href=\"/index.html\"/>\n" );
-            buffer.append( "    <item name=\"" +
-                           i18n.getString( "site-plugin", locale, "report.menu.projectinformation" ) +
-                           "\" href=\"/project-info.html\" collapse=\"true\">\n" );
+            buffer.append(
+                "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.projectinformation" ) +
+                    "\" href=\"/project-info.html\" collapse=\"true\">\n" );
-                buffer.append( "        <item name=\"" + report.getName( locale ) + "\" href=\"/" +
-                               report.getOutputName() + ".html\"/>\n" );
+                buffer.append(
+                    "        <item name=\"" + report.getName( locale ) + "\" href=\"/" + report.getOutputName() +
+                        ".html\"/>\n" );
-            buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.projectreports" ) +
-                           "\" href=\"/maven-reports.html\" collapse=\"true\">\n" );
+            buffer.append(
+                "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.projectreports" ) +
+                    "\" href=\"/maven-reports.html\" collapse=\"true\">\n" );
-                buffer.append( "        <item name=\"" + report.getName( locale ) + "\" href=\"/" +
-                               report.getOutputName() + ".html\"/>\n" );
+                buffer.append(
+                    "        <item name=\"" + report.getName( locale ) + "\" href=\"/" + report.getOutputName() +
+                        ".html\"/>\n" );
-    private InputStream getSiteDescriptor( Map reports, Locale locale )
+    private InputStream getSiteDescriptor( List reports, Locale locale )
-                    throw new IOException( "The resource " + line + " doesn't exists in " + DEFAULT_TEMPLATE +
-                                           " template." );
+                    throw new IOException(
+                        "The resource " + line + " doesn't exists in " + DEFAULT_TEMPLATE + " template." );
-    private Map getReports()
+    private List getReports()
-            getLog().error( "DEPRECATED: Plugin contains a <reports/> section: this is IGNORED - please use <reporting/> instead.");
+            getLog().error(
+                "DEPRECATED: Plugin contains a <reports/> section: this is IGNORED - please use <reporting/> instead." );
-        
+
+        List reports = new ArrayList();
+
-                    pluginManager.verifyPlugin( reportPlugin.getGroupId(), reportPlugin.getArtifactId(), reportPlugin.getVersion(),
-                                                project, settings, localRepository );
+                    pluginManager.verifyPlugin( reportPlugin.getGroupId(), reportPlugin.getArtifactId(),
+                                                reportPlugin.getVersion(), project, settings, localRepository );
+
+                try
+                {
+                    List reportSets = reportPlugin.getReportSets();
+                    if ( reportSets == null || reportSets.isEmpty() )
+                    {
+                        reports.addAll(
+                            pluginManager.getReports( reportPlugin.getGroupId(), reportPlugin.getArtifactId(),
+                                                      reportPlugin.getVersion(), null, session ) );
+
+                    }
+                    else
+                    {
+                        for ( Iterator j = reportSets.iterator(); j.hasNext(); )
+                        {
+                            ReportSet reportSet = (ReportSet) j.next();
+
+                            reports.addAll(
+                                pluginManager.getReports( reportPlugin.getGroupId(), reportPlugin.getArtifactId(),
+                                                          reportPlugin.getVersion(), reportSet, session ) );
+                        }
+                    }
+                }
+                catch ( PluginManagerException e )
+                {
+                    throw new MojoExecutionException( "Error getting reports", e );
+                }
+                catch ( PluginVersionResolutionException e )
+                {
+                    throw new MojoExecutionException( "Error getting reports", e );
+                }
+                catch ( PluginConfigurationException e )
+                {
+                    throw new MojoExecutionException( "Error getting reports", e );
+                }
-
-        // TODO: this is not good (using the container), also because it will import every report ever loaded
-        //   What we need is to be able to select individual reports and know what reports are inside a plugin
-        //   It may be better to push the report section in the pom back to "plugins", then just have a reports list
-        //   again which are role hints to look up
-
-        try
-        {
-            return container.lookupMap( MavenReport.ROLE );
-        }
-        catch ( ComponentLookupException e )
-        {
-            throw new MojoExecutionException( "Unable to find reports", e );
-        }
-    }
-
-    public void contextualize( Context context )
-        throws ContextException
-    {
-        container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
+        return reports;

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS23 MOV29 MOV83 UPD43 MOV43 MOV59 MOV43 UPD42 UPD42 UPD43 UPD43 INS60 INS41 UPD66 UPD43 UPD42 UPD42 INS43 INS59 INS42 UPD42 UPD42 MOV42 INS42 INS14 UPD43 MOV43 MOV42 UPD42 INS54 INS8 INS12 INS12 INS12 INS60 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS32 INS27 INS32 INS21 INS24 INS42 INS14 INS42 INS14 INS42 INS14 UPD43 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS58 INS32 INS8 INS43 INS45 INS42 INS43 INS45 INS42 INS43 INS45 INS42 MOV42 MOV42 UPD42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS42 INS42 UPD43 INS32 INS42 INS42 INS32 INS32 INS32 INS33 INS42 INS42 INS42 INS32 INS43 INS59 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL23 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL43 DEL42 DEL44 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL11 DEL7 DEL21 DEL8 DEL31