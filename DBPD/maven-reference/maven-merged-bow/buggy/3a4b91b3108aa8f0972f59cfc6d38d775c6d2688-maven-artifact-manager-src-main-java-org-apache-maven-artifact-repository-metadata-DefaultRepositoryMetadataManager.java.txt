PR: MNG-613
push shared code into metadata manager

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@280232 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
+import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.Reader;
-    public void resolve( ArtifactMetadata metadata, List remoteRepositories, ArtifactRepository localRepository )
+    public void resolve( RepositoryMetadata metadata, List remoteRepositories, ArtifactRepository localRepository )
-        boolean alreadyResolved = alreadyResolved( metadata );
-        if ( !alreadyResolved )
+        // TODO: currently this is first wins, but really we should take the latest by comparing either the
+        // snapshot timestamp, or some other timestamp later encoded into the metadata.
+        loadMetadata( metadata, localRepository, localRepository );
+
+        for ( Iterator i = remoteRepositories.iterator(); i.hasNext(); )
-            for ( Iterator i = remoteRepositories.iterator(); i.hasNext(); )
+            ArtifactRepository repository = (ArtifactRepository) i.next();
+
+            ArtifactRepositoryPolicy policy = metadata.isSnapshot() ? repository.getSnapshots()
+                : repository.getReleases();
+
+            if ( !policy.isEnabled() )
-                ArtifactRepository repository = (ArtifactRepository) i.next();
-
-                ArtifactRepositoryPolicy policy = metadata.isSnapshot() ? repository.getSnapshots()
-                    : repository.getReleases();
-
-                if ( !policy.isEnabled() )
-                {
-                    getLogger().debug( "Skipping disabled repository " + repository.getId() );
-                }
-                else
+                getLogger().debug( "Skipping disabled repository " + repository.getId() );
+            }
+            else
+            {
+                boolean alreadyResolved = alreadyResolved( metadata );
+                if ( !alreadyResolved )
+                    cachedMetadata.add( metadata.getKey() );
+                loadMetadata( metadata, repository, localRepository );
-
-            cachedMetadata.add( metadata.getKey() );
-    public void resolveAlways( ArtifactMetadata metadata, ArtifactRepository localRepository,
+    private void loadMetadata( RepositoryMetadata repoMetadata, ArtifactRepository remoteRepository,
+                               ArtifactRepository localRepository )
+        throws ArtifactMetadataRetrievalException
+    {
+        File metadataFile = new File( localRepository.getBasedir(),
+                                      localRepository.pathOfLocalRepositoryMetadata( repoMetadata, remoteRepository ) );
+
+        if ( metadataFile.exists() )
+        {
+            Metadata metadata = readMetadata( metadataFile );
+            repoMetadata.setRepository( remoteRepository );
+
+            if ( repoMetadata.getMetadata() != null )
+            {
+                metadata.merge( repoMetadata.getMetadata() );
+            }
+            repoMetadata.setMetadata( metadata );
+        }
+    }
+
+    /**
+     * @todo share with DefaultPluginMappingManager.
+     */
+    protected static Metadata readMetadata( File mappingFile )
+        throws ArtifactMetadataRetrievalException
+    {
+        Metadata result;
+
+        Reader fileReader = null;
+        try
+        {
+            fileReader = new FileReader( mappingFile );
+
+            MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();
+
+            result = mappingReader.read( fileReader );
+        }
+        catch ( FileNotFoundException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
+        }
+        catch ( IOException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Cannot parse version information from: " + mappingFile, e );
+        }
+        finally
+        {
+            IOUtil.close( fileReader );
+        }
+        return result;
+    }
+
+    public void resolveAlways( RepositoryMetadata metadata, ArtifactRepository localRepository,
+
+        if ( file.exists() )
+        {
+            Metadata prevMetadata = readMetadata( file );
+            metadata.setMetadata( prevMetadata );
+        }
-        resolveAlways( metadata, localRepository, deploymentRepository );
+
+        File file = new File( localRepository.getBasedir(),
+                              localRepository.pathOfLocalRepositoryMetadata( metadata, deploymentRepository ) );
+
+        resolveAlways( metadata, deploymentRepository, file, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
-            File f = new File( localRepository.getBasedir(),
-                               localRepository.pathOfLocalRepositoryMetadata( metadata, deploymentRepository ) );
-            wagonManager.putArtifactMetadata( f, metadata, deploymentRepository );
+            wagonManager.putArtifactMetadata( file, metadata, deploymentRepository );

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 MOV8 MOV24 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 UPD43 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS54 INS41 UPD43 INS25 MOV60 UPD42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS66 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS12 INS8 INS42 UPD42 INS32 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS14 INS42 INS42 INS60 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS33 INS21 INS60 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS21 INS42 INS42 INS60 INS21 UPD42 UPD42 UPD42 INS40 INS8 INS43 INS32 INS32 INS43 INS59 INS32 INS27 INS8 INS32 INS7 INS43 INS59 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS32 INS43 INS59 INS32 MOV60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV38 MOV8 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 MOV42 MOV32 INS42 INS42 DEL25 DEL8