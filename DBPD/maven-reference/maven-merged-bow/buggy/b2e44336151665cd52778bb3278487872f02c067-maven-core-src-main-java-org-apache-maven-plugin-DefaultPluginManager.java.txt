utilise the container for populating all mojo configuration, including expressions


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163947 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;
-import org.codehaus.plexus.configuration.PlexusConfigurationException;
-            if ( newMojoTechnique )
-            {
-                Map map = getPluginConfigurationFromExpressions( mojoDescriptor, configuration, session );
+            configuration = mergeConfiguration( configuration, mojoDescriptor.getConfiguration() );
-                populatePluginFields( plugin, configuration, map );
+            PluginParameterExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session );
+            try
+            {
+                if ( newMojoTechnique )
+                {
+                    Map map = getPluginConfigurationFromExpressions( mojoDescriptor, configuration, session,
+                                                                     expressionEvaluator );
+
+                    populatePluginFields( plugin, configuration, map, expressionEvaluator );
+                }
+                else
+                {
+                    getLogger().warn( "WARNING: The mojo " + mojoDescriptor.getId() + " is using the OLD API" );
+
+                    Map map = getPluginConfigurationFromExpressions( mojoDescriptor, configuration, session,
+                                                                     expressionEvaluator );
+
+                    request = createPluginRequest( configuration, map );
+                }
-            else
+            catch ( ExpressionEvaluationException e )
-                getLogger().warn( "WARNING: The mojo " + mojoDescriptor.getId() + " is using the OLD API" );
-
-                Map map = getPluginConfigurationFromExpressions( mojoDescriptor, configuration, session );
-
-                request = createPluginRequest( configuration, map );
+                throw new PluginExecutionException( "Unable to configure plugin", e );
-            throw new PluginExecutionException( "Error configuring plugin for execution.", e );
+            String msg = "Error configuring plugin for execution of .";
+            throw new PluginExecutionException( msg, e );
-                releaseComponents( mojoDescriptor, request );
-
+    private PlexusConfiguration mergeConfiguration( PlexusConfiguration dominant, PlexusConfiguration configuration )
+    {
+        // TODO: share with mergeXpp3Dom
+        PlexusConfiguration[] children = configuration.getChildren();
+        for ( int i = 0; i < children.length; i++ )
+        {
+            PlexusConfiguration child = children[i];
+            PlexusConfiguration childDom = (XmlPlexusConfiguration) dominant.getChild( child.getName(), false );
+            if ( childDom != null )
+            {
+                mergeConfiguration( childDom, child );
+            }
+            else
+            {
+                dominant.addChild( copyConfiguration( child ) );
+            }
+        }
+        return dominant;
+    }
+
+    public static PlexusConfiguration copyConfiguration( PlexusConfiguration src )
+    {
+        // TODO: shouldn't be necessary
+        XmlPlexusConfiguration dom = new XmlPlexusConfiguration( src.getName() );
+        dom.setValue( src.getValue( null ) );
+
+        String[] attributeNames = src.getAttributeNames();
+        for ( int i = 0; i < attributeNames.length; i++ )
+        {
+            String attributeName = attributeNames[i];
+            dom.setAttribute( attributeName, src.getAttribute( attributeName, null ) );
+        }
+
+        PlexusConfiguration[] children = src.getChildren();
+        for ( int i = 0; i < children.length; i++ )
+        {
+            dom.addChild( copyConfiguration( children[i] ) );
+        }
+
+        return dom;
+    }
+
-    // TODO: don't throw Exception
-    private void releaseComponents( MojoDescriptor goal, PluginExecutionRequest request )
-        throws Exception
-    {
-        if ( request != null && request.getParameters() != null )
-        {
-            for ( Iterator iterator = goal.getParameters().iterator(); iterator.hasNext(); )
-            {
-                Parameter parameter = (Parameter) iterator.next();
-
-                String key = parameter.getName();
-
-                String expression = parameter.getExpression();
-
-                if ( expression != null && expression.startsWith( "#component" ) )
-                {
-                    Object component = request.getParameter( key );
-
-                    container.release( component );
-                }
-            }
-        }
-    }
-
+    /**
+     * @param configuration
+     * @param map
+     * @return
+     * @deprecated
+     */
-        throws PluginConfigurationException
-        try
+        Map parameters = new HashMap();
+        PlexusConfiguration[] children = configuration.getChildren();
+        for ( int i = 0; i < children.length; i++ )
-            Map parameters = new HashMap();
-            PlexusConfiguration[] children = configuration.getChildren();
-            for ( int i = 0; i < children.length; i++ )
-            {
-                PlexusConfiguration child = children[i];
-                parameters.put( child.getName(), child.getValue() );
-            }
-            map = CollectionUtils.mergeMaps( map, parameters );
+            PlexusConfiguration child = children[i];
+            parameters.put( child.getName(), child.getValue( null ) );
-        catch ( PlexusConfigurationException e )
-        {
-            throw new PluginConfigurationException( "Unable to construct map from plugin configuration", e );
-        }
+        map = CollectionUtils.mergeMaps( map, parameters );
-    private void populatePluginFields( Plugin plugin, PlexusConfiguration configuration, Map map )
+    private void populatePluginFields( Plugin plugin, PlexusConfiguration configuration, Map map,
+                                       ExpressionEvaluator expressionEvaluator )
-            configurator.configureComponent( plugin, configuration );
+            configurator.configureComponent( plugin, configuration, expressionEvaluator );
-        // TODO: we don't have converters, so "primitives" that -are- strings are not configured properly (eg String -> File from an expression)
+        // TODO: remove - this is for plugins built with alpha-1
+    /**
+     * @deprecated
+     */
-                                                       MavenSession session )
-        throws PluginConfigurationException
+                                                       MavenSession session, ExpressionEvaluator expressionEvaluator )
+        throws ExpressionEvaluationException, PluginConfigurationException
+            String expression;
-                String expression = parameter.getExpression();
-
-                Object value = PluginParameterExpressionEvaluator.evaluate( expression, session );
-
-                getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value );
-
-                if ( value == null )
-                {
-                    if ( parameter.getDefaultValue() != null )
-                    {
-                        value = PluginParameterExpressionEvaluator.evaluate( parameter.getDefaultValue(), session );
-                    }
-                }
-
-                // ----------------------------------------------------------------------
-                // We will perform a basic check here for parameters values that are
-                // required. Required parameters can't be null so we throw an
-                // Exception in the case where they are. We probably want some
-                // pluggable
-                // mechanism here but this will catch the most obvious of
-                // misconfigurations.
-                // ----------------------------------------------------------------------
-
-                if ( value == null && parameter.isRequired() )
-                {
-                    throw new PluginConfigurationException( createPluginParameterRequiredMessage( goal, parameter ) );
-                }
-
-                String type = parameter.getType();
-
-                // TODO: Not sure how we might find files that are nested in other objects... perhaps
-                //  we add a "needs translation" to the mojo so such types can be translated (implementing some interface) and
-                //  address their own file objects
-                if ( type != null && ( type.equals( "File" ) || type.equals( "java.io.File" ) ) )
-                {
-                    value = pathTranslator.alignToBaseDirectory( (String) value,
-                                                                 session.getProject().getFile().getParentFile() );
-                }
-
-                map.put( key, value );
+                expression = parameter.getExpression();
+            else
+            {
+                expression = configuration.getChild( key, false ).getValue( null );
+            }
+
+            Object value = expressionEvaluator.evaluate( expression );
+
+            getLogger().debug( "Evaluated mojo parameter expression: \'" + expression + "\' to: " + value );
+
+            if ( value == null )
+            {
+                if ( parameter.getDefaultValue() != null )
+                {
+                    value = expressionEvaluator.evaluate( parameter.getDefaultValue() );
+                }
+            }
+
+            // ----------------------------------------------------------------------
+            // We will perform a basic check here for parameters values that are
+            // required. Required parameters can't be null so we throw an
+            // Exception in the case where they are. We probably want some
+            // pluggable
+            // mechanism here but this will catch the most obvious of
+            // misconfigurations.
+            // ----------------------------------------------------------------------
+
+            if ( value == null && parameter.isRequired() )
+            {
+                throw new PluginConfigurationException( createPluginParameterRequiredMessage( goal, parameter ) );
+            }
+
+            String type = parameter.getType();
+
+            // TODO: remove - done via plexus configuration, but need to inject the base directory into it
+            if ( type != null && ( type.equals( "File" ) || type.equals( "java.io.File" ) ) )
+            {
+                value = pathTranslator.alignToBaseDirectory( (String) value,
+                                                             session.getProject().getFile().getParentFile() );
+            }
+
+            map.put( key, value );

MOV26 INS26 UPD40 INS40 INS31 INS31 MOV83 INS43 UPD42 MOV42 MOV44 MOV44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS8 INS44 INS29 INS44 INS43 MOV8 INS42 UPD43 UPD42 UPD43 UPD42 INS60 INS24 INS41 INS42 INS43 INS42 MOV60 INS21 MOV60 INS24 MOV60 INS24 INS41 INS65 INS65 INS65 INS65 MOV60 MOV60 INS24 MOV21 MOV41 INS43 INS42 INS65 INS43 INS42 INS42 MOV60 MOV60 INS24 MOV41 UPD42 UPD42 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 UPD43 INS32 INS5 INS58 INS27 INS37 INS8 INS5 MOV58 MOV27 MOV37 INS8 INS42 INS42 INS42 INS58 INS27 INS37 INS8 INS42 INS42 MOV58 MOV27 MOV37 MOV8 INS21 INS60 INS54 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 MOV60 INS60 INS25 UPD42 UPD42 INS14 INS42 INS42 INS32 MOV43 INS85 UPD42 INS39 INS59 UPD42 MOV42 INS40 INS42 INS60 INS21 INS43 INS85 UPD42 MOV21 INS39 INS59 INS42 INS40 INS42 INS60 MOV21 MOV60 MOV60 INS25 INS7 INS43 INS59 INS8 INS12 INS60 UPD42 MOV42 INS42 INS42 INS42 INS34 INS43 INS59 INS27 INS8 INS8 INS43 INS32 UPD42 MOV42 UPD42 MOV42 INS33 UPD42 UPD42 INS42 INS34 INS43 INS59 INS32 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS34 INS43 INS59 MOV27 INS8 INS8 INS42 INS32 INS42 INS42 INS14 MOV25 INS44 INS8 INS43 INS59 INS42 INS42 INS11 UPD42 MOV42 MOV33 INS21 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS2 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS2 INS32 INS42 INS21 INS21 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS53 INS42 INS42 INS45 INS42 INS43 INS32 INS32 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS33 UPD42 MOV42 INS2 INS42 INS42 INS42 INS42 INS33 INS7 INS7 UPD42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 MOV32 INS9 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS32 MOV43 MOV43 INS43 INS45 INS42 UPD42 UPD42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 UPD42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL32 DEL11 DEL43 DEL42 DEL42 DEL42 DEL32 DEL39 DEL43 DEL27 DEL32 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL33 DEL27 DEL45 DEL32 DEL27 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL31 DEL43 DEL8 DEL24 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL25 DEL24 DEL8