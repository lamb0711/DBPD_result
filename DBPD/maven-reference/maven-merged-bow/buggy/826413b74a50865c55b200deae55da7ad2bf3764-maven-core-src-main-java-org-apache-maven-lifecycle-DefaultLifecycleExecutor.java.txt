PR: MNG-598
allow type handlers to be specified by plugin extensions



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@225477 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.handler.ArtifactHandler;
+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;
+    private ArtifactHandlerManager artifactHandlerManager;
+
+            Map handlers = findArtifactTypeHandlers( project, session.getSettings(), session.getLocalRepository() );
+            artifactHandlerManager.addHandlers( handlers );
+
+        catch ( PluginManagerException e )
+        {
+            throw new LifecycleExecutionException( "Unable to initialise extensions", e );
+        }
+        catch ( PluginVersionResolutionException e )
+        {
+            throw new LifecycleExecutionException( "Unable to initialise extensions", e );
+        }
+     * @todo Not particularly happy about this. Would like WagonManager and ArtifactTypeHandlerManager to be able to
+     * lookup directly, or have them passed in
+     */
+    private Map findArtifactTypeHandlers( MavenProject project, Settings settings, ArtifactRepository localRepository )
+        throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException
+    {
+        Map map = new HashMap();
+        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+        {
+            Plugin plugin = (Plugin) i.next();
+
+            if ( plugin.isExtensions() )
+            {
+                pluginManager.verifyPlugin( plugin, project, settings, localRepository );
+
+                // TODO: if moved to the plugin manager we already have the descriptor from above and so do can lookup the container directly
+                try
+                {
+                    Map components = pluginManager.getPluginComponents( plugin, ArtifactHandler.ROLE );
+                    map.putAll( components );
+                }
+                catch ( ComponentLookupException e )
+                {
+                    getLogger().debug( "Unable to find the lifecycle component in the extension", e );
+                }
+            }
+        }
+        return map;
+    }
+
+    /**

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS42 INS42 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS24 INS41 INS12 INS12 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS58 INS32 INS8 INS42 INS60 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS21 INS54 INS42 INS42 INS32 INS32 INS43 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS43 INS32 INS32 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS44 INS8 INS43 INS59 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS45 INS42 INS42