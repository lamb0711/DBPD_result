[MNG-4526] [regression] Shade plugin includes too much (relative to 2.2.1)

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@904309 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;
+import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
+    private List<MavenProject> getProjects( MavenProject project, MavenSession session, boolean aggregator )
+    {
+        if ( aggregator )
+        {
+            return session.getProjects();
+        }
+        else
+        {
+            return Collections.singletonList( project );
+        }
+    }
+
-                List<MavenProject> projectsToResolve;
-
-                if ( projectBuild.taskSegment.aggregating )
-                {
-                    projectsToResolve = session.getProjects();
-                }
-                else
-                {
-                    projectsToResolve = Collections.singletonList( currentProject );
-                }
+                List<MavenProject> projectsToResolve =
+                    getProjects( currentProject, session, projectBuild.taskSegment.aggregating );
-        project.setArtifacts( artifacts );
+        project.setResolvedArtifacts( artifacts );
+        ArtifactFilter artifactFilter = getArtifactFilter( mojoDescriptor );
+        List<MavenProject> resolvedProjects =
+            getProjects( session.getCurrentProject(), session, mojoDescriptor.isAggregator() );
+        for ( MavenProject project : resolvedProjects )
+        {
+            project.setArtifactFilter( artifactFilter );
+        }
+
+    private ArtifactFilter getArtifactFilter( MojoDescriptor mojoDescriptor )
+    {
+        String scopeToResolve = mojoDescriptor.getDependencyResolutionRequired();
+        String scopeToCollect = mojoDescriptor.getDependencyCollectionRequired();
+
+        List<String> scopes = new ArrayList<String>( 2 );
+        if ( StringUtils.isNotEmpty( scopeToCollect ) )
+        {
+            scopes.add( scopeToCollect );
+        }
+        if ( StringUtils.isNotEmpty( scopeToResolve ) )
+        {
+            scopes.add( scopeToResolve );
+        }
+
+        if ( scopes.isEmpty() )
+        {
+            return null;
+        }
+        else
+        {
+            return new CumulativeScopeArtifactFilter( scopes );
+        }
+    }
+
-        List<MavenProject> forkedProjects;
-
-        if ( mojoDescriptor.isAggregator() )
-        {
-            forkedProjects = session.getProjects();
-        }
-        else
-        {
-            forkedProjects = Collections.singletonList( project );
-        }
+        List<MavenProject> forkedProjects = getProjects( project, session, mojoDescriptor.isAggregator() );

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS43 INS42 INS39 INS42 INS25 INS60 INS60 INS70 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS25 INS25 INS42 INS42 INS42 INS42 INS42 MOV8 MOV8 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS8 INS32 INS8 INS32 INS8 INS8 INS41 INS41 UPD42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS21 INS42 INS42 INS41 INS41 INS32 MOV32 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS34 INS32 INS32 INS33 INS14 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25