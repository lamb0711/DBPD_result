use ${..} style interpolation


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163381 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.StringUtils;
-    private static final Pattern EXPRESSION_PATTERN = Pattern.compile( "#([A-Za-z.]+)" );
+    private static final Pattern EXPRESSION_PATTERN = Pattern.compile( "\\$\\{([^}]+)\\}" );
-    public Model interpolate( Model model ) throws ModelInterpolationException
+    public Model interpolate( Model model )
+        throws ModelInterpolationException
-        catch( Exception e )
+        catch ( Exception e )
-            throw new ModelInterpolationException(
-                "Cannot serialize project model for interpolation.", e );
+            throw new ModelInterpolationException( "Cannot serialize project model for interpolation.", e );
-        catch( Exception e )
+        catch ( Exception e )
-        while( matcher.find() )
+        while ( matcher.find() )
-            catch( Exception e )
+            catch ( Exception e )
-                if( logger != null )
+                if ( logger != null )
-                    logger.debug( "POM interpolation cannot proceed with expression: " + wholeExpr
-                        + ". Skipping...", e );
+                    logger.debug( "POM interpolation cannot proceed with expression: " + wholeExpr + ". Skipping...", e );
-            if( value != null )
+            if ( value != null )
-                result = result.replaceAll( wholeExpr, value );
+                result = StringUtils.replace( result, wholeExpr, value );
+                // could use:
+                // result = matcher.replaceFirst( value );
+                // but this could result in multiple lookups of value, and replaceAll is not correct behaviour 

INS26 INS40 UPD45 UPD42 UPD42 INS42