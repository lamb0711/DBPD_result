[MNG-4542] StringSearchModelInterpolator concurrency problem

Revived test from 2.2.X code base, fixed concurrency issue and added concurrency test

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@902080 13f79535-47bb-0310-9956-ffa450edef68

-    protected void interpolateObject( Object obj, Model model, File projectDir, ModelBuildingRequest config, ModelProblemCollector problems )
+    protected void interpolateObject( Object obj, Model model, File projectDir, ModelBuildingRequest config,
+                                      ModelProblemCollector problems )
-            List<? extends InterpolationPostProcessor> postProcessors = createPostProcessors( model, projectDir, config );
+            List<? extends InterpolationPostProcessor> postProcessors = createPostProcessors( model, projectDir,
+                                                                                              config );
-                                        StringSearchModelInterpolator modelInterpolator, ModelProblemCollector problems )
+                                        StringSearchModelInterpolator modelInterpolator, ModelProblemCollector problems)
-                Field[] fields = fieldsByClass.get( cls );
-                if ( fields == null )
+                Field[] fields = getFields(cls);
+                for (Field currentField : fields)
-                    fields = cls.getDeclaredFields();
-                    fieldsByClass.put( cls, fields );
-                }
-
-                for ( int i = 0; i < fields.length; i++ )
-                {
-                    Class<?> type = fields[i].getType();
-                    if ( isQualifiedForInterpolation( fields[i], type ) )
+                    Class<?> type = currentField.getType();
+                    if ( isQualifiedForInterpolation( currentField, type ) )
-                        boolean isAccessible = fields[i].isAccessible();
-                        fields[i].setAccessible( true );
-                        try
-                        {
+                        synchronized ( currentField){
+                            boolean isAccessible = currentField.isAccessible();
+                            currentField.setAccessible( true );
-                                    String value = (String) fields[i].get( target );
-                                    if ( value != null && !Modifier.isFinal( fields[i].getModifiers() ) )
+                                    String value = (String) currentField.get( target );
+                                    if ( value != null && !Modifier.isFinal( currentField.getModifiers() ) )
-                                            fields[i].set( target, interpolated );
+                                            currentField.set( target, interpolated );
-                                    Collection<Object> c = (Collection<Object>) fields[i].get( target );
+                                    Collection<Object> c = (Collection<Object>) currentField.get( target );
-                                                                                               postProcessors, problems );
+                                                                                               postProcessors,
+                                                                                               problems );
-                                    Map<Object, Object> m = (Map<Object, Object>) fields[i].get( target );
+                                    Map<Object, Object> m = (Map<Object, Object>) currentField.get( target );
-                                                                                               postProcessors, problems );
+                                                                                               postProcessors,
+                                                                                               problems );
-                                    Object value = fields[i].get( target );
+                                    Object value = currentField.get( target );
-                                        if ( fields[i].getType().isArray() )
+                                        if ( currentField.getType().isArray() )
-                                problems.add( Severity.ERROR, "Failed to interpolate field: " + fields[i]
-                                    + " on class: " + cls.getName(), e );
+                                e.printStackTrace(System.err);
+
+                                problems.add( Severity.ERROR, "Failed to interpolate field3: " + currentField +
+                                    " on class: " + cls.getName(), e );
-                                problems.add( Severity.ERROR, "Failed to interpolate field: " + fields[i]
-                                    + " on class: " + cls.getName(), e );
+                                e.printStackTrace(System.err);
+                                problems.add( Severity.ERROR, "Failed to interpolate field4: " + currentField +
+                                    " on class: " + cls.getName(), e );
-                        }
-                        finally
-                        {
-                            fields[i].setAccessible( isAccessible );
+                            finally
+                            {
+                                currentField.setAccessible( isAccessible );
+                            }
+        private Field[] getFields(Class<?> cls) {
+            Field[] fields;
+            synchronized(fieldsByClass)
+            {
+                fields = fieldsByClass.get( cls );
+                if ( fields == null )
+                {
+                    fields = cls.getDeclaredFields();
+                    fieldsByClass.put( cls, fields );
+                }
+            }
+            return fields;
+        }
+
-            Boolean primitive = fieldIsPrimitiveByClass.get( fieldType );
-            if ( primitive == null )
+            Boolean primitive;
+            synchronized ( fieldIsPrimitiveByClass)
-                primitive = Boolean.valueOf( fieldType.isPrimitive() );
-                fieldIsPrimitiveByClass.put( fieldType, primitive );
+                primitive = fieldIsPrimitiveByClass.get( fieldType );
+                if ( primitive == null )
+                {
+                    primitive = fieldType.isPrimitive();
+                    fieldIsPrimitiveByClass.put( fieldType, primitive );
+                }
-            if ( primitive.booleanValue() )
+            if ( primitive )
-            if ( "parent".equals( field.getName() ) )
-            {
-                return false;
-            }
+            return !"parent".equals(field.getName());
-            return true;

INS31 INS83 MOV5 INS42 INS44 INS8 INS74 INS42 INS60 INS51 INS41 INS51 MOV41 INS43 INS76 INS5 INS59 INS42 INS8 INS42 INS42 INS8 INS42 INS38 INS42 INS43 INS85 INS42 INS21 MOV25 INS21 MOV25 MOV32 INS70 INS42 INS7 INS7 INS5 INS44 INS42 MOV8 INS42 MOV32 INS42 MOV32 INS43 INS85 INS32 INS43 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS51 INS42 INS42 MOV8 INS60 INS21 INS39 INS59 INS32 INS8 INS42 INS32 INS42 INS42 INS9 INS21 INS42 INS42 INS21 INS21 INS32 INS32 INS32 INS42 INS42 INS42 MOV43 INS42 INS42 INS40 INS42 INS42 INS40 MOV74 UPD45 INS42 MOV32 UPD45 INS42 MOV32 MOV43 MOV74 INS42 MOV74 INS42 INS42 MOV74 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25 DEL9 DEL9 DEL41