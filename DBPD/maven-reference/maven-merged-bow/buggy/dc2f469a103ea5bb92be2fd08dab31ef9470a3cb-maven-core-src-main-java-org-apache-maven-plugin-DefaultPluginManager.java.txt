[MNG-3012] Adding an import for Xpp3Dom from plexus-utils in maven-core to plugin realms, to prevent ClassCastException when they call plugin.getConfiguration() from maven-model objects.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@543187 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;
-    
+
-        
+
-        
+
-    
+
-     * @deprecated 
+     * @deprecated
-                
+
-            if ( groupId == null || artifactId == null || version == null )
+            if ( ( groupId == null ) || ( artifactId == null ) || ( version == null ) )
-        
+
-            if ( project.getPrerequisites() != null && project.getPrerequisites().getMaven() != null )
+            if ( ( project.getPrerequisites() != null ) && ( project.getPrerequisites().getMaven() != null ) )
-        if ( pluginRealm != null && pluginRealm != container.getContainerRealm() )
+        getLogger().debug( "Realm for " + projectPlugin.getKey() + " is: " + pluginRealm );
+
+        if ( ( pluginRealm != null ) && ( pluginRealm != container.getContainerRealm() ) )
+
+//            StringBuffer debugMessage = new StringBuffer();
+//            debugMessage.append( "Realm for plugin: " ).append( projectPlugin.getKey() );
+//            debugMessage.append( " with classpath:\n" ).append( String.valueOf( Arrays.asList( pluginRealm.getURLs() ) ).replace( ',', '\n' ) );
+//            debugMessage.append( "\nClass realm is: " )
+//                        .append( pluginRealm.getId() )
+//                        .append( " with parent: " )
+//                        .append( pluginRealm.getParentRealm().getId() );
+//            debugMessage.append( "\nParent classpath:\n" )
+//                        .append(
+//                                 String.valueOf( Arrays.asList( pluginRealm.getParentRealm().getURLs() ) )
+//                                       .replace( ',', '\n' ) );
+//            getLogger().debug( debugMessage.toString() );
+
+
+            // adding for MNG-3012 to try to work around problems with Xpp3Dom (from plexus-utils)
+            // spawning a ClassCastException when a mojo calls plugin.getConfiguration() from maven-model...
+            getLogger().info( "\n\n\n\n***** Adding import for " + Xpp3Dom.class.getName() + "\nPlugin: " + projectPlugin.getKey() + " *****\n\n\n\n" );
+            componentRealm.importFrom( componentRealm.getParentRealm().getId(), Xpp3Dom.class.getName() );
+
+//            StringBuffer debugMessage = new StringBuffer();
+//            debugMessage.append( "Creating realm for plugin: " ).append( projectPlugin.getKey() );
+//            debugMessage.append( " with classpath:\n" ).append( String.valueOf( jars ).replace( ',', '\n' ) );
+//            debugMessage.append( "\nClass realm is: " )
+//                        .append( componentRealm.getId() )
+//                        .append( " with parent: " )
+//                        .append( componentRealm.getParentRealm().getId() );
+//            debugMessage.append( "\nParent classpath:\n" )
+//                        .append(
+//                                 String.valueOf( Arrays.asList( componentRealm.getParentRealm().getURLs() ) )
+//                                       .replace( ',', '\n' ) );
+//            getLogger().debug( debugMessage.toString() );
+        catch ( NoSuchRealmException e )
+        {
+            throw new PluginManagerException( "Failed to import Xpp3Dom from parent realm for plugin: '" + projectPlugin + ".", e );
+        }
-        checkPlexusUtils( resolutionGroup, artifactFactory );        
+        checkPlexusUtils( resolutionGroup, artifactFactory );
-        Xpp3Dom dom = (Xpp3Dom) mojoExecution.getConfiguration();
+        Xpp3Dom dom = mojoExecution.getConfiguration();
-        
+
-            
+
-                
+
-            
+
-                getLogger().debug( "Looked up - " + plugin + " - " + plugin.getClass().getClassLoader() );
-                else// not needed i guess.
+                {
+                    getLogger().debug( "Looked up - " + plugin + " - " + plugin.getClass().getClassLoader() );
+                }
+                else
+                {
+                }
-                getLogger().info( "Looked up - " + plugin + " - " + plugin.getClass().getClassLoader() );
-                else// not needed i guess.
+                {
+                    getLogger().info( "Looked up - " + plugin + " - " + plugin.getClass().getClassLoader() );
+                }
+                else
+                {
+                }
-        
+
-        // NEW: Pass in the LifecycleExecutionContext so we have access to the current project, 
+        // NEW: Pass in the LifecycleExecutionContext so we have access to the current project,
-        
+
-                    if ( fieldValue == null && StringUtils.isNotEmpty( parameter.getAlias() ) )
+                    if ( ( fieldValue == null ) && StringUtils.isNotEmpty( parameter.getAlias() ) )
-                if ( fieldValue == null && ( value == null || value.getChildCount() == 0 ) )
+                if ( ( fieldValue == null ) && ( ( value == null ) || ( value.getChildCount() == 0 ) ) )
-            if ( value == null && StringUtils.isNotEmpty( parameter.getAlias() ) )
+            if ( ( value == null ) && StringUtils.isNotEmpty( parameter.getAlias() ) )
-                    if ( StringUtils.isNotEmpty( pomConfig.getValue( null ) ) || pomConfig.getChildCount() > 0 )
+                    if ( StringUtils.isNotEmpty( pomConfig.getValue( null ) ) || ( pomConfig.getChildCount() > 0 ) )
-                if ( toAdd == null && mojoConfig != null )
+                if ( ( toAdd == null ) && ( mojoConfig != null ) )
-                    if ( implementation != null && toAdd.getAttribute( "implementation", null ) == null )
+                    if ( ( implementation != null ) && ( toAdd.getAttribute( "implementation", null ) == null ) )
-        if ( StringUtils.isEmpty( value ) && recessive != null )
+        if ( StringUtils.isEmpty( value ) && ( recessive != null ) )
-    }    
+    }

INS26 INS40 INS21 INS32 INS12 MOV43 INS32 INS42 INS27 INS36 INS36 INS21 INS21 INS44 INS8 MOV32 INS36 INS42 INS45 INS32 INS45 INS42 MOV27 MOV27 INS32 INS32 INS43 INS42 INS53 MOV27 MOV27 INS36 INS36 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS32 INS32 INS42 INS14 INS36 INS36 INS36 INS36 MOV27 MOV27 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS57 INS42 INS43 INS27 INS42 INS8 INS8 INS8 INS8 MOV27 MOV27 MOV27 MOV27 INS57 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS45 INS42 INS45 MOV21 MOV21 MOV21 MOV21 INS36 INS36 INS36 INS43 MOV27 MOV27 MOV27 INS42 INS36 INS36 INS36 INS36 INS36 INS36 MOV27 MOV27 MOV27 MOV27 MOV27 MOV27 DEL66 DEL27 DEL11