transitive deps in mboot. Will now proceed to trim up the POMs. Still need to trim ~/maven2/lib also.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163764 13f79535-47bb-0310-9956-ffa450edef68

+import download.ArtifactDownloader;
+import download.DownloadFailedException;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Set;
-    private List dependencies = new ArrayList();
+    private Map dependencies = new HashMap();
-    private final Repository localRepository;
+    private final boolean resolveTransitiveDependencies;
-    public ModelReader( Repository downloader )
+    private final ArtifactDownloader downloader;
+
+    private static Set inProgress = new HashSet();
+
+    private Map parentDependencies = new HashMap();
+
+    private Map transitiveDependencies = new HashMap();
+
+    public ModelReader( ArtifactDownloader downloader, boolean resolveTransitiveDependencies )
-        this.localRepository = downloader;
+        this.downloader = downloader;
+
+        this.resolveTransitiveDependencies = resolveTransitiveDependencies;
-    public List getDependencies()
+    public Collection getDependencies()
-        return dependencies;
+        Map m = new HashMap();
+        m.putAll( transitiveDependencies );
+        m.putAll( parentDependencies );
+        m.putAll( dependencies );
+        return m.values();
-            ModelReader p = new ModelReader( localRepository );
+            // actually, these should be transtive (see MNG-77) - but some projects have circular deps that way (marmalade, and currently m2)
+            ModelReader p = retrievePom( parentGroupId, parentArtifactId, parentVersion, false );
-            try
-            {
-                p.parse( localRepository.getArtifactFile( parentGroupId, parentArtifactId, parentVersion, "pom" ) );
-            }
-            catch ( ParserConfigurationException e )
-            {
-                throw new SAXException( "Error getting parent POM", e );
-            }
-            catch ( IOException e )
-            {
-                throw new SAXException( "Error getting parent POM", e );
-            }
-
-            dependencies.addAll( p.getDependencies() );
+            addDependencies( p.getDependencies(), parentDependencies );
-            dependencies.add( currentDependency );
-
+
+            if ( !hasDependency( currentDependency, dependencies ) )
+            {
+                if ( resolveTransitiveDependencies )
+                {
+                    ModelReader p = retrievePom( currentDependency.getGroupId(), currentDependency.getArtifactId(),
+                                                 currentDependency.getVersion(), resolveTransitiveDependencies );
+
+                    addDependencies( p.getDependencies(), transitiveDependencies );
+                }
+            }
+            dependencies.put( currentDependency.getConflictId(), currentDependency );
+    private void addDependencies( Collection dependencies, Map target )
+    {
+        for ( Iterator i = dependencies.iterator(); i.hasNext(); )
+        {
+            Dependency d = (Dependency) i.next();
+
+            if ( !hasDependency( d, target ) )
+            {
+                target.put( d.getConflictId(), d );
+            }
+        }
+    }
+
+    private boolean hasDependency( Dependency d, Map dependencies )
+    {
+        String conflictId = d.getConflictId();
+        if ( dependencies.containsKey( conflictId ) )
+        {
+            // We only care about pushing in compile scope dependencies I think
+            // if not, we'll need to be able to get the original and pick the appropriate scope
+            if ( d.getScope().equals( "compile" ) )
+            {
+                dependencies.remove( conflictId );
+            }
+            else
+            {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private ModelReader retrievePom( String groupId, String artifactId, String version,
+                                     boolean resolveTransitiveDependencies )
+        throws SAXException
+    {
+        String key = groupId + ":" + artifactId + ":" + version;
+
+        if ( inProgress.contains( key ) )
+        {
+            throw new SAXException( "Circular dependency found, looking for " + key + "\nIn progress:" + inProgress );
+        }
+
+        inProgress.add( key );
+
+        ModelReader p = new ModelReader( downloader, resolveTransitiveDependencies );
+
+        try
+        {
+            Dependency pom = new Dependency( groupId, artifactId, version, "pom" );
+            downloader.downloadDependencies( Collections.singletonList( pom ) );
+
+            Repository localRepository = downloader.getLocalRepository();
+            p.parse( localRepository.getArtifactFile( pom ) );
+        }
+        catch ( IOException e )
+        {
+            throw new SAXException( "Error getting parent POM", e );
+        }
+        catch ( ParserConfigurationException e )
+        {
+            throw new SAXException( "Error getting parent POM", e );
+        }
+        catch ( DownloadFailedException e )
+        {
+            throw new SAXException( "Error getting parent POM", e );
+        }
+
+        inProgress.remove( key );
+
+        return p;
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 UPD43 INS83 INS83 INS39 INS59 UPD43 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS44 UPD43 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS39 INS42 INS21 UPD42 INS60 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS24 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS21 INS60 INS54 INS21 INS41 UPD43 INS43 INS43 INS43 INS42 INS7 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS9 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS32 INS43 INS59 INS8 MOV12 MOV12 INS12 INS32 INS42 UPD42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 MOV21 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS14 INS60 INS21 INS60 INS21 INS44 INS8 INS42 INS42 INS42 UPD42 INS52 INS42 INS43 MOV43 INS59 MOV42 INS25 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS8 INS8 INS42 INS45 INS42 INS45 INS42 INS14 INS43 INS42 INS42 INS43 INS59 INS32 MOV43 INS59 INS32 INS43 INS42 INS53 INS42 INS42 INS32 UPD42 UPD42 INS38 INS8 INS42 INS42 INS42 INS42 INS11 INS32 INS21 INS32 INS42 INS45 INS21 INS41 INS43 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS14 UPD42 MOV42 MOV42 MOV42 MOV42 INS9 INS32 INS25 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS9 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS8 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS42 INS42 MOV43 INS59 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL8 DEL54