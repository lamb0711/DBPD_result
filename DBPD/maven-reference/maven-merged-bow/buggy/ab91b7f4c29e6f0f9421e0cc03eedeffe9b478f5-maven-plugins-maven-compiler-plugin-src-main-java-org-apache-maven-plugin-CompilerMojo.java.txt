o Cleaned up field-level annotation support (especially descriptor extraction, generation, and building)
o Converted all "core" plugins (including maven-core-it-plugin) to use field-level annotations
o Removed generation of parameter descriptors for ${/#component.* param specifications.
o Added @readonly for parameters that cannot be overridden by user configuration (List override was dangerous here)
o Added validation against pom-derived configuration for @readonly parameters
o Fixed @parameter alias="" support...now configuration of the mojo instance actually will work with either the real param name or the alias. Would be nice to support multiple aliases, but that might require @alias annotations...
o Added [temporary?] support for null editable attributes for parameters, to support pre-built mojos from the repo.

Annotation support should be just about ready to go...


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@165224 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.compiler.util.scan.InclusionScanException;
-import org.codehaus.plexus.compiler.util.scan.SourceInclusionScanner;
-import org.codehaus.plexus.compiler.util.scan.StaleSourceScanner;
-import org.codehaus.plexus.compiler.util.scan.mapping.SuffixMapping;
-import org.codehaus.plexus.compiler.Compiler;
-import org.codehaus.plexus.compiler.CompilerConfiguration;
-import org.codehaus.plexus.compiler.CompilerError;
-import org.codehaus.plexus.compiler.javac.JavacCompiler;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Set;
- * @parameter name="compileSourceRoots" type="java.util.List" required="true" validator=""
- * expression="${project.compileSourceRoots}" description=""
- * @parameter name="outputDirectory" type="String" required="true" validator=""
- * expression="${project.build.outputDirectory}" description=""
- * @parameter name="classpathElements" type="List" required="true" validator=""
- * expression="${project.compileClasspathElements}" description=""
- * @parameter name="debug" type="boolean" required="false" validator=""
- * expression="${maven.compiler.debug}" description="Whether to include debugging
- * information in the compiled class files; the default value is false"
- * @parameter name="source" type="String" required="false" expression="${source}" validator=""
- * description="The -source argument for the Java compiler"
- * @parameter name="target" type="String" required="false" expression="${target}" validator=""
- * description="The -target argument for the Java compiler"
- * @parameter name="staleMillis" type="long" required="false" expression="${lastModGranularityMs}"
- * validator="" description="The granularity in milliseconds of the last modification
- * date for testing whether a source needs recompilation"
-    extends AbstractPlugin
+    extends AbstractCompilerMojo
-    private Compiler compiler = new JavacCompiler();
-
-    // TODO: use boolean when supported
-    private String debug = Boolean.TRUE.toString();
-
-    private List compileSourceRoots;
-
-    private List classpathElements;
-
-    private String outputDirectory;
-
-    private String source;
-
-    private String target;
-
-    // TODO: Use long when supported
-    private String staleMillis = "0";
-
-    public void execute()
-        throws PluginExecutionException
-    {
-        // ----------------------------------------------------------------------
-        //
-        // ----------------------------------------------------------------------
-
-        compileSourceRoots = removeEmptyCompileSourceRoots( compileSourceRoots );
-        if ( compileSourceRoots.isEmpty() )
-        {
-            getLog().info( "No sources to compile" );
-            return;
-        }
-
-        CompilerConfiguration compilerConfiguration = new CompilerConfiguration();
-
-        compilerConfiguration.setOutputLocation( outputDirectory );
-        compilerConfiguration.setClasspathEntries( classpathElements );
-        compilerConfiguration.setSourceLocations( compileSourceRoots );
-
-        // TODO: have an option to always compile (without need to clean)
-        Set staleSources = computeStaleSources();
-
-        if ( staleSources.isEmpty() )
-        {
-            getLog().info( "Nothing to compile - all classes are up to date" );
-            return;
-        }
-        else
-        {
-            compilerConfiguration.setSourceFiles( staleSources );
-        }
-
-        if ( source != null )
-        {
-            compilerConfiguration.addCompilerOption( "-source", source );
-        }
-
-        if ( target != null )
-        {
-            compilerConfiguration.addCompilerOption( "-target", target );
-        }
-
-        if ( debug != null && "true".equals( debug ) )
-        {
-            compilerConfiguration.setDebug( true );
-        }
-
-        List messages = null;
-        try
-        {
-            messages = compiler.compile( compilerConfiguration );
-        }
-        catch ( Exception e )
-        {
-            // TODO: don't catch Exception
-            throw new PluginExecutionException( "Fatal error compiling", e );
-        }
-
-        boolean compilationError = false;
-
-        for ( Iterator i = messages.iterator(); i.hasNext(); )
-        {
-            CompilerError message = (CompilerError) i.next();
-
-            if ( message.isError() )
-            {
-                compilationError = true;
-            }
-        }
-
-        if ( compilationError )
-        {
-            throw new CompilationFailureException( messages );
-        }
-    }
-
-    private Set computeStaleSources()
-        throws PluginExecutionException
-    {
-        long staleTime = 0;
-
-        if ( staleMillis != null && staleMillis.length() > 0 )
-        {
-            try
-            {
-                staleTime = Long.parseLong( staleMillis );
-            }
-            catch ( NumberFormatException e )
-            {
-                throw new PluginExecutionException( "Invalid staleMillis plugin parameter value: \'" + staleMillis +
-                                                    "\'", e );
-            }
-
-        }
-        SuffixMapping mapping = new SuffixMapping( ".java", ".class" );
-
-        SourceInclusionScanner scanner = new StaleSourceScanner( staleTime );
-
-        scanner.addSourceMapping( mapping );
-
-        File outDir = new File( outputDirectory );
-
-        Set staleSources = new HashSet();
-
-        for ( Iterator it = compileSourceRoots.iterator(); it.hasNext(); )
-        {
-            String sourceRoot = (String) it.next();
-
-            File rootFile = new File( sourceRoot );
-
-            try
-            {
-                staleSources.addAll( scanner.getIncludedSources( rootFile, outDir ) );
-            }
-            catch ( InclusionScanException e )
-            {
-                throw new PluginExecutionException( "Error scanning source root: \'" + sourceRoot +
-                                                    "\' for stale files to recompile.", e );
-            }
-        }
-
-        return staleSources;
-    }
-
-     * @todo also in ant plugin. This should be resolved at some point so that it does not need to
-     * be calculated continuously - or should the plugins accept empty source roots as is?
+     * @parameter expression="${project.compileSourceRoots}"
+     * @required
+     * @readonly
-    private static List removeEmptyCompileSourceRoots( List compileSourceRootsList )
+    private List compileSourceRoots;
+    
+    /**
+     * @parameter expression="${project.compileClasspathElements}"
+     * @required
+     * @readonly
+     */
+    private List classpathElements;
+    
+    /**
+     * @parameter expression="${project.build.outputDirectory}"
+     * @required
+     * @readonly
+     */
+    private String outputDirectory;
+    
+    protected List getCompileSourceRoots()
-        List newCompileSourceRootsList = new ArrayList();
-        if ( compileSourceRootsList != null )
-        {
-            // copy as I may be modifying it
-            for ( Iterator i = compileSourceRootsList.iterator(); i.hasNext(); )
-            {
-                String srcDir = (String) i.next();
-                if ( !newCompileSourceRootsList.contains( srcDir ) && new File( srcDir ).exists() )
-                {
-                    newCompileSourceRootsList.add( srcDir );
-                }
-            }
-        }
-        return newCompileSourceRootsList;
+        return compileSourceRoots;
+
+    protected List getClasspathElements()
+    {
+        return classpathElements;
+    }
+
+    protected String getOutputDirectory()
+    {
+        return outputDirectory;
+    }
+

UPD43 UPD42 INS29 INS29 INS29 UPD83 MOV43 INS42 INS8 UPD83 MOV43 UPD42 UPD83 MOV43 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS41 INS66 INS66 INS66 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL42 DEL40 DEL42 DEL32 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL45 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL24 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25