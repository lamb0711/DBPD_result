PR: MNG-140

split artifact impl from api so that dep resolution can be used independently of wagon
only the first step in making maven-artifact more useful as a public api - more changes to be made


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191634 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.transform.ReleaseArtifactTransformation;
-    
+
-    private MavenProject buildFromSourceFile( File projectDescriptor, ArtifactRepository localRepository, List externalProfiles )
+    private MavenProject buildFromSourceFile( File projectDescriptor, ArtifactRepository localRepository,
+                                              List externalProfiles )
-    private MavenProject build( String pomLocation, Model model, ArtifactRepository localRepository, List externalProfiles )
+    private MavenProject build( String pomLocation, Model model, ArtifactRepository localRepository,
+                                List externalProfiles )
-        List aggregatedRemoteWagonRepositories = ProjectUtils.buildArtifactRepositories( superModel.getRepositories(), artifactRepositoryFactory, container );
+        List aggregatedRemoteWagonRepositories = ProjectUtils.buildArtifactRepositories( superModel.getRepositories(),
+                                                                                         artifactRepositoryFactory,
+                                                                                         container );
-            
+
-                ArtifactRepository artifactRepo = ProjectUtils.buildArtifactRepository( mavenRepo, artifactRepositoryFactory, container );
+                ArtifactRepository artifactRepo = ProjectUtils.buildArtifactRepository( mavenRepo,
+                                                                                        artifactRepositoryFactory,
+                                                                                        container );
-        
+
-            throw new ProjectBuildingException( "Error building project from \'" + pomLocation + "\': " + model.getId(), e );
+            throw new ProjectBuildingException( "Error building project from \'" + pomLocation + "\': " + model.getId(),
+                                                e );
-    private MavenProject processProjectLogic( String pomLocation, MavenProject project, List remoteRepositories, List externalProfiles )
+    private MavenProject processProjectLogic( String pomLocation, MavenProject project, List remoteRepositories,
+                                              List externalProfiles )
-        
+
-        
+
-        
+
-        
+
-        
+
-            
+
-            
+
-        
+
-        
+
-        
+
-        
+
-        project.setPluginArtifactRepositories( ProjectUtils.buildArtifactRepositories( model.getPluginRepositories(), artifactRepositoryFactory, container ) );
+        project.setPluginArtifactRepositories(
+            ProjectUtils.buildArtifactRepositories( model.getPluginRepositories(), artifactRepositoryFactory,
+                                                    container ) );
-            project.setDistributionManagementArtifactRepository( ProjectUtils.buildArtifactRepository( dm.getRepository(), artifactRepositoryFactory, container ) );
+            project.setDistributionManagementArtifactRepository(
+                ProjectUtils.buildArtifactRepository( dm.getRepository(), artifactRepositoryFactory, container ) );
-                                                                      parentProject.getVersion(),
-                                                                      null,
-                                                                      "pom", null );
+                                                                      parentProject.getVersion(), null, "pom", null );
-            throw new ProjectBuildingException( "Failed to validate POM for \'" + pomLocation + "\'.\n\n  Reason(s):\n" + validationResult.render( "  " ) );
+            throw new ProjectBuildingException(
+                "Failed to validate POM for \'" + pomLocation + "\'.\n\n  Reason(s):\n" +
+                    validationResult.render( "  " ) );
-            List respositories = ProjectUtils.buildArtifactRepositories( model.getRepositories(), artifactRepositoryFactory, container );
+            List respositories = ProjectUtils.buildArtifactRepositories( model.getRepositories(),
+                                                                         artifactRepositoryFactory, container );
-                "Failed to build model from file '" + file.getAbsolutePath() + "'.\nError: \'" + e.getLocalizedMessage() + "\'", e );
+                "Failed to build model from file '" + file.getAbsolutePath() + "'.\nError: \'" +
+                    e.getLocalizedMessage() + "\'", e );
-                "Failed to parse model from file '" + file.getAbsolutePath() + "'.\nError: \'" + e.getLocalizedMessage() + "\'", e );
+                "Failed to parse model from file '" + file.getAbsolutePath() + "'.\nError: \'" +
+                    e.getLocalizedMessage() + "\'", e );
-            throw new ProjectBuildingException( "Failed build model from URL \'" + url.toExternalForm() + "\'\nError: \'" + e.getLocalizedMessage() + "\'", e );
+            throw new ProjectBuildingException(
+                "Failed build model from URL \'" + url.toExternalForm() + "\'\nError: \'" + e.getLocalizedMessage() +
+                    "\'", e );
-            throw new ProjectBuildingException( "Failed to parse model from URL \'" + url.toExternalForm() + "\'\nError: \'" + e.getLocalizedMessage() + "\'", e );
+            throw new ProjectBuildingException(
+                "Failed to parse model from URL \'" + url.toExternalForm() + "\'\nError: \'" + e.getLocalizedMessage() +
+                    "\'", e );
-        return new MavenMetadataSource( artifactResolver, this, artifactFactory ).createArtifacts( dependencies, null, null );
+        return new MavenMetadataSource( artifactResolver, this, artifactFactory ).createArtifacts( dependencies, null,
+                                                                                                   null );
-                version = ReleaseArtifactTransformation.RELEASE_VERSION;
+                version = "RELEASE";
-            Artifact artifact = artifactFactory.createArtifact( p.getGroupId(), p.getArtifactId(), version,
-                                                                null, "maven-plugin", null );
+            Artifact artifact = artifactFactory.createArtifact( p.getGroupId(), p.getArtifactId(), version, null,
+                                                                "maven-plugin", null );
-            List remoteRepositories = ProjectUtils.buildArtifactRepositories( superModel.getRepositories(), artifactRepositoryFactory, container );
+            List remoteRepositories = ProjectUtils.buildArtifactRepositories( superModel.getRepositories(),
+                                                                              artifactRepositoryFactory, container );

INS45 DEL40 DEL26 DEL40